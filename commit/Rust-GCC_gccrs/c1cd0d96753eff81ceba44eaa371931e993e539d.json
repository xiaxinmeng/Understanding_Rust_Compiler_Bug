{"sha": "c1cd0d96753eff81ceba44eaa371931e993e539d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFjZDBkOTY3NTNlZmY4MWNlYmE0NGVhYTM3MTkzMWU5OTNlNTM5ZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-09-05T08:04:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T08:04:55Z"}, "message": "g-dirope.ads: Minor reformatting Document that bounds of result of Base_Name match the input...\n\n2005-09-01  Robert Dewar  <dewar@adacore.com>\n\t    Arnaud Charlet  <charlet@adacore.com>\n\n\t* g-dirope.ads: Minor reformatting\n\tDocument that bounds of result of Base_Name match the input index\n\tpositions.\n\tAdd documentation on environment variable syntax for Expand_Path\n\n\t* gnat_ugn.texi: Update documentation to include mention of -m switches\n\tDocument new treatment of wide characters in max line length\n\tstyle check.\n\tRemove -gnatL/-gnatZ switches, no longer used.\n\tAdd note on pragmas Assertion_Policy and Debug_Policy in discussion\n\tof -gnata switch.\n\n\t* gnat_rm.texi: Add doc for two argument form of pragma\n\tFloat_Representation.\n\tAdd documentation for pragma No_Strict_Aliasing\n\tAdd note that explicit component clause overrides pragma Pack.\n\tAdd documentation of pragma Debug_Policy\n\nFrom-SVN: r103891", "tree": {"sha": "315ab80bfc87e26827bb28b9552bb16248ad50f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/315ab80bfc87e26827bb28b9552bb16248ad50f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1cd0d96753eff81ceba44eaa371931e993e539d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1cd0d96753eff81ceba44eaa371931e993e539d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1cd0d96753eff81ceba44eaa371931e993e539d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1cd0d96753eff81ceba44eaa371931e993e539d/comments", "author": null, "committer": null, "parents": [{"sha": "bbb9131042c3407858ad99ed9aeaae5ded1e99bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb9131042c3407858ad99ed9aeaae5ded1e99bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbb9131042c3407858ad99ed9aeaae5ded1e99bf"}], "stats": {"total": 236, "additions": 168, "deletions": 68}, "files": [{"sha": "226c593cc741fb32229b4c3c1c3109c2ec741342", "filename": "gcc/ada/g-dirope.ads", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cd0d96753eff81ceba44eaa371931e993e539d/gcc%2Fada%2Fg-dirope.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cd0d96753eff81ceba44eaa371931e993e539d/gcc%2Fada%2Fg-dirope.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dirope.ads?ref=c1cd0d96753eff81ceba44eaa371931e993e539d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 1998-2004 Ada Core Technologies, Inc.           --\n+--            Copyright (C) 1998-2005 Ada Core Technologies, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -94,7 +94,7 @@ package GNAT.Directory_Operations is\n    --  Dir_Name. Raises Directory_Error if Dir_Name cannot be removed.\n \n    function Get_Current_Dir return Dir_Name_Str;\n-   --  Returns the current working directory for the execution environment.\n+   --  Returns the current working directory for the execution environment\n \n    procedure Get_Current_Dir (Dir : out Dir_Name_Str; Last : out Natural);\n    --  Returns the current working directory for the execution environment\n@@ -137,6 +137,10 @@ package GNAT.Directory_Operations is\n    --  The comparison of Suffix is case-insensitive on systems such as Windows\n    --  and VMS where the file search is case-insensitive (e.g. on such systems,\n    --  Base_Name (\"/Users/AdaCore/BB12.patch\", \".Patch\") returns \"BB12\").\n+   --\n+   --  Note that the index bounds of the result match the corresponding indexes\n+   --  in the Path string (you cannot assume that the lower bound of the\n+   --  returned string is one).\n \n    function File_Extension (Path : Path_Name) return String;\n    --  Return the file extension. This is defined as the string after the\n@@ -150,16 +154,7 @@ package GNAT.Directory_Operations is\n    --  path information. This is equivalent to Base_Name with default Extension\n    --  value.\n \n-   type Path_Style is\n-     (UNIX,\n-      --  Use '/' as the directory separator. The default on Unix systems\n-      --  and on OpenVMS.\n-\n-      DOS,\n-      --  Use '\\' as the directory separator. The default on Windows.\n-\n-      System_Default);\n-\n+   type Path_Style is (UNIX, DOS, System_Default);\n    function Format_Pathname\n      (Path  : Path_Name;\n       Style : Path_Style := System_Default) return Path_Name;\n@@ -168,26 +163,20 @@ package GNAT.Directory_Operations is\n    --  function will help to provide a consistent naming scheme running for\n    --  different environments. If style is set to System_Default the routine\n    --  will use the default directory separator on the running environment.\n+   --\n+   --  The Style argument indicates the syntax to be used for path names:\n+   --\n+   --    UNIX\n+   --      Use '/' as the directory separator. The default on Unix systems\n+   --      and on OpenVMS.\n+   --\n+   --    DOS\n+   --      Use '\\' as the directory separator. The default on Windows.\n+   --\n+   --    System_Default\n+   --      Use the default style for the current system\n \n-   type Environment_Style is\n-     (UNIX,\n-      --  Environment variables and OpenVMS logical names use $ as prefix and\n-      --  can use curly brackets as in ${HOME}/mydir. If there is no closing\n-      --  curly bracket for an opening one then translation is done, so for\n-      --  example ${VAR/toto is returned as ${VAR/toto.\n-\n-      DOS,\n-      --  Environment variables uses % as prefix and suffix\n-      --  (e.g. %HOME%/mydir). The name DOS refer to \"DOS-like\" environment.\n-      --  This includes al Windows systems.\n-\n-      Both,\n-      --  Recognize both forms described above.\n-\n-      System_Default);\n-      --  Uses either UNIX on Unix and OpenVMS systems, or DOS on Windows and\n-      --  OS/2 depending on the running environment.\n-\n+   type Environment_Style is (UNIX, DOS, Both, System_Default);\n    function Expand_Path\n      (Path : Path_Name;\n       Mode : Environment_Style := System_Default) return Path_Name;\n@@ -198,6 +187,29 @@ package GNAT.Directory_Operations is\n    --  variable does not exists the variable will be replaced by the empty\n    --  string. Two dollar or percent signs are replaced by a single\n    --  dollar/percent sign. Note that a variable must start with a letter.\n+   --\n+   --  The Mode argument indicates the recognized syntax for environment\n+   --  variables as follows:\n+   --\n+   --    UNIX\n+   --      Environment variables and OpenVMS logical names use $ as prefix and\n+   --      can use curly brackets as in ${HOME}/mydir. If there is no closing\n+   --      curly bracket for an opening one then no translation is done, so for\n+   --      example ${VAR/toto is returned as ${VAR/toto. The use of {} brackets\n+   --      is required if the environment variable name contains other than\n+   --      alphanumeric characters.\n+   --\n+   --    DOS\n+   --      Environment variables uses % as prefix and suffix (e.g. %HOME%/dir).\n+   --      The name DOS refer to \"DOS-like\" environment. This includes all\n+   --      Windows systems.\n+   --\n+   --    Both\n+   --      Recognize both forms described above.\n+   --\n+   --    System_Default\n+   --      Uses either UNIX on Unix and OpenVMS systems, or DOS on Windows and\n+   --      OS/2 depending on the running environment.\n \n    ---------------\n    -- Iterators --\n@@ -215,7 +227,7 @@ package GNAT.Directory_Operations is\n    --  Raises Directory_Error if Dir has not be opened (Dir = Null_Dir).\n \n    function Is_Open (Dir : Dir_Type) return Boolean;\n-   --  Returns True if Dir is open, or False otherwise.\n+   --  Returns True if Dir is open, or False otherwise\n \n    procedure Read\n      (Dir  : in out Dir_Type;\n@@ -251,6 +263,6 @@ private\n \n    Dir_Seps : constant Ada.Strings.Maps.Character_Set :=\n                 Ada.Strings.Maps.To_Set (\"/\\\");\n-   --  UNIX and DOS style directory separators.\n+   --  UNIX and DOS style directory separators\n \n end GNAT.Directory_Operations;"}, {"sha": "7e9713f05886ece539c3edbf520ffea11e989d40", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 88, "deletions": 9, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cd0d96753eff81ceba44eaa371931e993e539d/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cd0d96753eff81ceba44eaa371931e993e539d/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c1cd0d96753eff81ceba44eaa371931e993e539d", "patch": "@@ -118,6 +118,7 @@ Implementation Defined Pragmas\n * Pragma CPP_Virtual::\n * Pragma CPP_Vtable::\n * Pragma Debug::\n+* Pragma Debug_Policy::\n * Pragma Detect_Blocking::\n * Pragma Elaboration_Checks::\n * Pragma Eliminate::\n@@ -156,6 +157,7 @@ Implementation Defined Pragmas\n * Pragma Machine_Attribute::\n * Pragma Main_Storage::\n * Pragma No_Return::\n+* Pragma No_Strict_Aliasing ::\n * Pragma Normalize_Scalars::\n * Pragma Obsolescent::\n * Pragma Passive::\n@@ -649,6 +651,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma CPP_Virtual::\n * Pragma CPP_Vtable::\n * Pragma Debug::\n+* Pragma Debug_Policy::\n * Pragma Detect_Blocking::\n * Pragma Elaboration_Checks::\n * Pragma Eliminate::\n@@ -687,6 +690,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Machine_Attribute::\n * Pragma Main_Storage::\n * Pragma No_Return::\n+* Pragma No_Strict_Aliasing::\n * Pragma Normalize_Scalars::\n * Pragma Obsolescent::\n * Pragma Passive::\n@@ -1362,12 +1366,45 @@ PROCEDURE_CALL_WITHOUT_SEMICOLON ::=\n The argument has the syntactic form of an expression, meeting the\n syntactic requirements for pragmas.\n \n-If assertions are not enabled on the command line, this pragma has no\n-effect.  If asserts are enabled, the semantics of the pragma is exactly\n+If debug pragmas are not enabled, this pragma has no\n+effect.  If debug pragmas are enabled, the semantics of the pragma is exactly\n equivalent to the procedure call statement corresponding to the argument\n with a terminating semicolon.  Pragmas are permitted in sequences of\n declarations, so you can use pragma @code{Debug} to intersperse calls to\n-debug procedures in the middle of declarations.\n+debug procedures in the middle of declarations.  Debug pragmas can be\n+enabled either by use of the command line switch @code{-gnata} or by use\n+of the configuration pragma @code{Debug_Policy}.\n+\n+\n+@node Pragma Debug_Policy\n+@unnumberedsec Pragma Debug_Policy\n+@findex Debug_Policy\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Debug_Policy (CHECK | IGNORE);\n+@end smallexample\n+\n+@noindent\n+If the argument is @code{CHECK}, then pragma @code{DEBUG} is enabled.\n+If the argument is @code{IGNORE}, then pragma @code{DEBUG} is ignored.\n+This pragma overrides the effect of the @code{-gnata} switch on the\n+command line.\n+\n+If debug pragmas are not enabled, this pragma has no\n+effect.  If debug pragmas are enabled, the semantics of the pragma is exactly\n+equivalent to the procedure call statement corresponding to the argument\n+with a terminating semicolon.  Pragmas are permitted in sequences of\n+declarations, so you can use pragma @code{Debug} to intersperse calls to\n+debug procedures in the middle of declarations.  Debug pragmas can be\n+enabled either by use of the command line switch @code{-gnata} or by use\n+of the configuration pragma @code{Debug_Policy}.\n+\n+\n+\n+\n+\n \n @node Pragma Detect_Blocking\n @unnumberedsec Pragma Detect_Blocking\n@@ -1981,13 +2018,13 @@ execution, hence the name.\n Syntax:\n \n @smallexample @c ada\n-pragma Float_Representation (FLOAT_REP);\n+pragma Float_Representation (FLOAT_REP[, float_type_LOCAL_NAME]);\n \n FLOAT_REP ::= VAX_Float | IEEE_Float\n @end smallexample\n \n @noindent\n-This pragma\n+In the one argument form, this pragma is a configuration pragma which\n allows control over the internal representation chosen for the predefined\n floating point types declared in the packages @code{Standard} and\n @code{System}. On all systems other than OpenVMS, the argument must\n@@ -1998,6 +2035,24 @@ the standard runtime libraries be recompiled. See the\n description of the @code{GNAT LIBRARY} command in the OpenVMS version\n of the GNAT Users Guide for details on the use of this command.\n \n+The two argument form specifies the representation to be used for\n+the specified floating-poin type. On all systems other than OpenVMS,\n+the argument must\n+be @code{IEEE_Float} and the pragma has no effect. On OpenVMS, the\n+argument may be @code{VAX_Float} to specify the use of the VAX float\n+format, as follows:\n+\n+@itemize @bullet\n+@item\n+For digits values up to 6, F float format will be used.\n+@item\n+For digits values from 7 to 9, G float format will be used.\n+@item\n+For digits values from 10 to 15, F float format will be used.\n+@item\n+Digits values above 15 are not allowed.\n+@end itemize\n+\n @node Pragma Ident\n @unnumberedsec Pragma Ident\n @findex Ident\n@@ -2670,7 +2725,7 @@ package p is\n \n   new_name_for_i : Integer;\n   pragma Linker_Alias (new_name_for_i, \"i\");\n-end p; \n+end p;\n @end smallexample\n \n @node Pragma Linker_Constructor\n@@ -2865,6 +2920,26 @@ Another use of this pragma is to suppress incorrect warnings about\n missing returns in functions, where the last statement of a function\n statement sequence is a call to such a procedure.\n \n+@node Pragma No_Strict_Aliasing\n+@unnumberedsec Pragma No_Strict_Aliasing\n+@findex No_Strict_Aliasing\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+ppragma No_Strict_Aliasing [([Entity =>] type_LOCAL_NAME)];\n+@end smallexample\n+\n+@noindent\n+@var{type_LOCAL_NAME} must refer to an access type\n+declaration in the current declarative part.  The effect is to inhibit\n+strict aliasing optimization for the given type.  The form with no\n+arguments is a configuration pragma which applies to all access types\n+declared in units to which the pragma applies. For a detailed\n+description of the strict aliasing optimization, and the situations\n+in which it must be suppressed, see section \"Optimization and Strict Aliasing\"\n+in the @value{EDITION} User's Guide.\n+\n @node Pragma Normalize_Scalars\n @unnumberedsec Pragma Normalize_Scalars\n @findex Normalize_Scalars\n@@ -4033,7 +4108,7 @@ Note that if a warning is desired for all calls to a given subprogram,\n regardless of whether they occur in the same unit as the subprogram\n declaration, then this pragma should not be used (calls from another\n unit would not be flagged); pragma Obsolescent can be used instead\n-for this purpose (@xref{Pragma Obsolescent}).\n+for this purpose, see @xref{Pragma Obsolescent}.\n \n @node Pragma Unreserve_All_Interrupts\n @unnumberedsec Pragma Unreserve_All_Interrupts\n@@ -4245,7 +4320,7 @@ Address of such an entity, for example to guard potential references,\n as shown in the example below.\n \n Some file formats do not support weak symbols so not all target machines\n-support this pragma. \n+support this pragma.\n \n @smallexample @c ada\n --  Example of the use of pragma Weak_External\n@@ -9167,7 +9242,7 @@ Only @code{Size} may be specified for such types.\n @cindex Component_Size Clause\n \n @noindent\n-Normally, the value specified in a component clause must be consistent\n+Normally, the value specified in a component size clause must be consistent\n with the subtype of the array component with regard to size and alignment.\n In other words, the value specified must be at least equal to the size\n of this subtype, and must be a multiple of the alignment value.\n@@ -9189,6 +9264,10 @@ then the resulting array has a length of 31 bytes (248 bits = 8 * 31).\n Of course access to the components of such an array is considerably\n less efficient than if the natural component size of 32 is used.\n \n+Note that there is no point in giving both a component size clause\n+and a pragma Pack for the same array type. if such duplicate\n+clauses are given, the pragma Pack will be ignored.\n+\n @node Bit_Order Clauses\n @section Bit_Order Clauses\n @cindex Bit_Order Clause"}, {"sha": "4361b013af3960f006a3c722cef767f5ffd393d0", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cd0d96753eff81ceba44eaa371931e993e539d/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cd0d96753eff81ceba44eaa371931e993e539d/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=c1cd0d96753eff81ceba44eaa371931e993e539d", "patch": "@@ -331,6 +331,7 @@ Performance Considerations\n * Optimization Levels::\n * Debugging Optimized Code::\n * Inlining of Subprograms::\n+* Other Optimization Switches::\n * Optimization and Strict Aliasing::\n @ifset vms\n * Coverage Analysis::\n@@ -3752,7 +3753,8 @@ Allow full Ada 2005 features.\n @item -gnata\n @cindex @option{-gnata} (@command{gcc})\n Assertions enabled. @code{Pragma Assert} and @code{pragma Debug} to be\n-activated.\n+activated. Note that these pragmas can also be controlled using the\n+configuration pragmas @code{Assertion_Policy} and @code{Debug_Policy}.\n \n @item -gnatA\n @cindex @option{-gnatA} (@command{gcc})\n@@ -3865,11 +3867,6 @@ Limit file names to @var{n} (1-999) characters ^(@code{k} = krunch)^^.\n @cindex @option{-gnatl} (@command{gcc})\n Output full source listing with embedded error messages.\n \n-@item -gnatL\n-@cindex @option{-gnatL} (@command{gcc})\n-This switch is deprecated. You can use @option{--RTS=sjlj} instead to enable\n-@code{setjmp/longjmp} exception mechanism.\n-\n @item -gnatm=@var{n}\n @cindex @option{-gnatm} (@command{gcc})\n Limit number of detected error or warning messages to @var{n}\n@@ -3996,10 +3993,6 @@ Distribution stub generation and compilation\n to be generated and compiled).\n @end ifset\n \n-@item -gnatZ\n-This switch is deprecated. When zero cost exception handling is not the\n-default and this is supported, you can use @option{--RTS=zcx} instead.\n-\n @item ^-I^/SEARCH=^@var{dir}\n @cindex @option{^-I^/SEARCH^} (@command{gcc})\n @cindex RTL\n@@ -4054,16 +4047,13 @@ No optimization, the default setting if no @option{-O} appears\n \n @item n = 1\n Normal optimization, the default if you specify @option{-O} without\n-an operand.\n+an operand. A good compromise between code quality and compilation\n+time.\n \n @item n = 2\n-Extensive optimization\n+Extensive optimization, may improve execution time, possibly at the cost of\n+substantially increased compilation time.\n \n-@item n = 3\n-Extensive optimization with automatic inlining of subprograms not\n-specified by pragma @code{Inline}. This applies only to\n-inlining within a unit. For details on control of inlining\n-see @ref{Subprogram Inlining Control}.\n @end table\n @end ifclear\n \n@@ -4094,11 +4084,6 @@ Perform some optimizations, but omit ones that are costly.\n @item   DEVELOPMENT\n Same as @code{SOME}.\n \n-@item   INLINING\n-Full optimization, and also attempt automatic inlining of small\n-subprograms within a unit even when pragma @code{Inline}\n-is not specified (@pxref{Inlining of Subprograms}).\n-\n @item   UNROLL_LOOPS\n Try to unroll loops. This keyword may be specified together with\n any keyword above other than @code{NONE}. Loop unrolling\n@@ -5537,10 +5522,10 @@ If the ^letter m^word LINE_LENGTH^ appears in the string after @option{-gnaty}\n then the length of source lines must not exceed 79 characters, including\n any trailing blanks. The value of 79 allows convenient display on an\n 80 character wide device or window, allowing for possible special\n-treatment of 80 character lines. Note that this count is of raw\n+treatment of 80 character lines. Note that this count is of\n characters in the source text. This means that a tab character counts\n-as one character in this count and a wide character sequence counts as\n-several characters (however many are needed in the encoding).\n+as one character in this count but a wide character sequence counts as\n+a single character (however many bytes are needed in the encoding).\n \n @item ^Mnnn^MAX_LENGTH=nnn^\n @emph{Set maximum line length.}\n@@ -8911,7 +8896,9 @@ some guidelines on debugging optimized code.\n * Optimization Levels::\n * Debugging Optimized Code::\n * Inlining of Subprograms::\n+* Other Optimization Switches::\n * Optimization and Strict Aliasing::\n+\n @ifset vms\n * Coverage Analysis::\n @end ifset\n@@ -9019,8 +9006,16 @@ No optimization (the default);\n generates unoptimized code but has\n the fastest compilation time.\n \n+Note that many other compilers do fairly extensive optimization\n+even if \"no optimization\" is specified. When using gcc, it is\n+very unusual to use ^-O0^/OPTIMIZE=NONE^ for production if\n+execution time is of any concern, since ^-O0^/OPTIMIZE=NONE^\n+really does mean no optimization at all. This difference between\n+gcc and other compilers should be kept in mind when doing\n+performance comparisons.\n+\n @item ^-O1^/OPTIMIZE=SOME^\n-Medium level optimization;\n+Moderate optimization;\n optimizes reasonably well but does not\n degrade compilation time significantly.\n \n@@ -9309,6 +9304,20 @@ that you should not automatically assume that @option{-O3} is better than\n @option{-O2}, and indeed you should use @option{-O3} only if tests show that\n it actually improves performance.\n \n+@node Other Optimization Switches\n+@subsection Other Optimization Switches\n+@cindex Optimization Switches\n+\n+Since @code{GNAT} uses the @code{gcc} back end, all the specialized\n+@code{gcc} optimization switches are potentially usable. These switches\n+have not been extensively tested with GNAT but can generally be expected\n+to work. Examples of switches in this category are\n+@option{-funroll-loops} and\n+the various target-specific @option{-m} options (in particular, it has been\n+observed that @option{-march=pentium4} can significantly improve performance\n+on appropriate machines. For full details of these switches, see the\n+@code{gcc} manual.\n+\n @node Optimization and Strict Aliasing\n @subsection Optimization and Strict Aliasing\n @cindex Aliasing"}]}