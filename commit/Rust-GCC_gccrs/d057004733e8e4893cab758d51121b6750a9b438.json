{"sha": "d057004733e8e4893cab758d51121b6750a9b438", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA1NzAwNDczM2U4ZTQ4OTNjYWI3NThkNTExMjFiNjc1MGE5YjQzOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-28T19:15:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-28T19:15:51Z"}, "message": "re PR rtl-optimization/78546 (wrong code at -O2 and above)\n\n\tPR rtl-optimization/78546\n\t* simplify-rtx.c (neg_const_int): When negating most negative\n\tnumber in mode wider than HOST_BITS_PER_WIDE_INT, use\n\tsimplify_const_unary_operation to produce CONST_DOUBLE or\n\tCONST_WIDE_INT.\n\t(simplify_plus_minus): Hanlde the case where neg_const_int\n\tdoesn't return a CONST_INT.\n\n\t* gcc.dg/torture/pr78546-1.c: New test.\n\t* gcc.dg/torture/pr78546-2.c: New test.\n\nFrom-SVN: r242929", "tree": {"sha": "e5ee8b087a141ae20a31c9baa3a55ea3434bb42b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5ee8b087a141ae20a31c9baa3a55ea3434bb42b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d057004733e8e4893cab758d51121b6750a9b438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d057004733e8e4893cab758d51121b6750a9b438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d057004733e8e4893cab758d51121b6750a9b438", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d057004733e8e4893cab758d51121b6750a9b438/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82979abd860fb54c2d0ab0a1001d86ec69f71ae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82979abd860fb54c2d0ab0a1001d86ec69f71ae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82979abd860fb54c2d0ab0a1001d86ec69f71ae2"}], "stats": {"total": 72, "additions": 66, "deletions": 6}, "files": [{"sha": "40ef344df1839642cd03d2a7f47674f113faf34c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057004733e8e4893cab758d51121b6750a9b438/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057004733e8e4893cab758d51121b6750a9b438/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d057004733e8e4893cab758d51121b6750a9b438", "patch": "@@ -1,3 +1,13 @@\n+2016-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/78546\n+\t* simplify-rtx.c (neg_const_int): When negating most negative\n+\tnumber in mode wider than HOST_BITS_PER_WIDE_INT, use\n+\tsimplify_const_unary_operation to produce CONST_DOUBLE or\n+\tCONST_WIDE_INT.\n+\t(simplify_plus_minus): Hanlde the case where neg_const_int\n+\tdoesn't return a CONST_INT.\n+\n 2016-11-28  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \tPR target/78556"}, {"sha": "83fb37d853524ca6206ea2e9a2899d66394ede60", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057004733e8e4893cab758d51121b6750a9b438/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057004733e8e4893cab758d51121b6750a9b438/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d057004733e8e4893cab758d51121b6750a9b438", "patch": "@@ -56,12 +56,17 @@ static rtx simplify_unary_operation_1 (enum rtx_code, machine_mode, rtx);\n static rtx simplify_binary_operation_1 (enum rtx_code, machine_mode,\n \t\t\t\t\trtx, rtx, rtx, rtx);\n \f\n-/* Negate a CONST_INT rtx, truncating (because a conversion from a\n-   maximally negative number can overflow).  */\n+/* Negate a CONST_INT rtx.  */\n static rtx\n neg_const_int (machine_mode mode, const_rtx i)\n {\n-  return gen_int_mode (-(unsigned HOST_WIDE_INT) INTVAL (i), mode);\n+  unsigned HOST_WIDE_INT val = -UINTVAL (i);\n+  \n+  if (GET_MODE_PRECISION (mode) > HOST_BITS_PER_WIDE_INT\n+      && val == UINTVAL (i))\n+    return simplify_const_unary_operation (NEG, mode, CONST_CAST_RTX (i),\n+\t\t\t\t\t   mode);\n+  return gen_int_mode (val, mode);\n }\n \n /* Test whether expression, X, is an immediate constant that represents\n@@ -4507,9 +4512,12 @@ simplify_plus_minus (enum rtx_code code, machine_mode mode, rtx op0,\n       rtx value = ops[n_ops - 1].op;\n       if (ops[n_ops - 1].neg ^ ops[n_ops - 2].neg)\n \tvalue = neg_const_int (mode, value);\n-      ops[n_ops - 2].op = plus_constant (mode, ops[n_ops - 2].op,\n-\t\t\t\t\t INTVAL (value));\n-      n_ops--;\n+      if (CONST_INT_P (value))\n+\t{\n+\t  ops[n_ops - 2].op = plus_constant (mode, ops[n_ops - 2].op,\n+\t\t\t\t\t     INTVAL (value));\n+\t  n_ops--;\n+\t}\n     }\n \n   /* Put a non-negated operand first, if possible.  */"}, {"sha": "04a6840299df6fc9367ca72c50d7084212909838", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057004733e8e4893cab758d51121b6750a9b438/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057004733e8e4893cab758d51121b6750a9b438/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d057004733e8e4893cab758d51121b6750a9b438", "patch": "@@ -1,5 +1,9 @@\n 2016-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/78546\n+\t* gcc.dg/torture/pr78546-1.c: New test.\n+\t* gcc.dg/torture/pr78546-2.c: New test.\n+\n \tPR fortran/78298\n \t* gfortran.dg/gomp/pr78298.f90: New test.\n "}, {"sha": "9cae5b18858b5c5b2074b7ce6e1e298d1aad9890", "filename": "gcc/testsuite/gcc.dg/torture/pr78546-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057004733e8e4893cab758d51121b6750a9b438/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78546-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057004733e8e4893cab758d51121b6750a9b438/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78546-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78546-1.c?ref=d057004733e8e4893cab758d51121b6750a9b438", "patch": "@@ -0,0 +1,22 @@\n+/* PR rtl-optimization/78546 */\n+/* { dg-do run { target int128 } } */\n+\n+typedef unsigned __int128 u128;\n+u128 b;\n+\n+static inline u128\n+foo (u128 p1)\n+{\n+  p1 += ~b;\n+  return -p1;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  u128 x = foo (~0x7fffffffffffffffLL);\n+  if (x != 0x8000000000000001ULL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "afec5b5bfc8e12b2280b857c68f71e966e8018f9", "filename": "gcc/testsuite/gcc.dg/torture/pr78546-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057004733e8e4893cab758d51121b6750a9b438/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78546-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057004733e8e4893cab758d51121b6750a9b438/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78546-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78546-2.c?ref=d057004733e8e4893cab758d51121b6750a9b438", "patch": "@@ -0,0 +1,16 @@\n+/* PR rtl-optimization/78546 */\n+/* { dg-do run { target int128 } } */\n+\n+typedef unsigned __int128 u128;\n+u128 b;\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  u128 x = ((u128) ~0x7fffffffffffffffLL) - b;\n+  u128 y = 1 - x;\n+  if (y != 0x8000000000000001ULL)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}