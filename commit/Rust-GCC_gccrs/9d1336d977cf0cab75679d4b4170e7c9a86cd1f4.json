{"sha": "9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "node_id": "C_kwDOANBUbNoAKDlkMTMzNmQ5NzdjZjBjYWI3NTY3OWQ0YjQxNzBlN2M5YTg2Y2QxZjQ", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-12-07T07:41:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-18T07:46:21Z"}, "message": "Enhance final_value_replacement_loop to handle bitwise induction.\n\nThis patch will enable below optimization:\n\n {\n-  int bit;\n-  long long unsigned int _1;\n-  long long unsigned int _2;\n-\n   <bb 2> [local count: 46707768]:\n-\n-  <bb 3> [local count: 1027034057]:\n-  # tmp_11 = PHI <tmp_8(3), tmp_6(D)(2)>\n-  # bit_13 = PHI <bit_9(3), 63(2)>\n-  _1 = 1 << bit_13;\n-  _2 = ~_1;\n-  tmp_8 = _2 & tmp_11;\n-  bit_9 = bit_13 + -3;\n-  if (bit_9 != -3(OVF))\n-    goto <bb 3>; [95.65%]\n-  else\n-    goto <bb 4>; [4.35%]\n-\n-  <bb 4> [local count: 46707768]:\n-  return tmp_8;\n+  tmp_12 = tmp_6(D) & 7905747460161236406;\n+  return tmp_12;\n\n }\n\ngcc/ChangeLog:\n\n\tPR middle-end/103462\n\t* match.pd (bitwise_induction_p): New match.\n\t* tree-scalar-evolution.cc (gimple_bitwise_induction_p):\n\tDeclare.\n\t(analyze_and_compute_bitwise_induction_effect): New function.\n\t(enum bit_op_kind): New enum.\n\t(final_value_replacement_loop): Enhanced to handle bitwise\n\tinduction.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr103462-1.c: New test.\n\t* gcc.target/i386/pr103462-2.c: New test.\n\t* gcc.target/i386/pr103462-3.c: New test.\n\t* gcc.target/i386/pr103462-4.c: New test.\n\t* gcc.target/i386/pr103462-5.c: New test.\n\t* gcc.target/i386/pr103462-6.c: New test.", "tree": {"sha": "374f3e3a39dacb7097ddb27370329b1a60258f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/374f3e3a39dacb7097ddb27370329b1a60258f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a174dc1a7f2bf0a71475ff633b130a60c0c3ff4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a174dc1a7f2bf0a71475ff633b130a60c0c3ff4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a174dc1a7f2bf0a71475ff633b130a60c0c3ff4a"}], "stats": {"total": 653, "additions": 652, "deletions": 1}, "files": [{"sha": "c2fed9b9b004296b8050db2387c7efb726d85bf2", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "patch": "@@ -7828,3 +7828,13 @@ and,\n \t       == TYPE_UNSIGNED (TREE_TYPE (@3))))\n        && single_use (@4)\n        && single_use (@5))))\n+\n+(for bit_op (bit_and bit_ior bit_xor)\n+ (match (bitwise_induction_p @0 @2 @3)\n+  (bit_op:c\n+   (nop_convert1? (bit_not2?@0 (convert3? (lshift integer_onep@1 @2))))\n+   @3)))\n+\n+(match (bitwise_induction_p @0 @2 @3)\n+ (bit_not\n+  (nop_convert1? (bit_xor@0 (convert2? (lshift integer_onep@1 @2)) @3))))"}, {"sha": "1dc4c2acad6b7ac0709893efa25eb5438937fc41", "filename": "gcc/testsuite/gcc.target/i386/pr103462-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-1.c?ref=9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-sccp-details\" } */\n+/* { dg-final { scan-tree-dump-times {final value replacement} 12 \"sccp\" } } */\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo (unsigned long long tmp)\n+{\n+  for (int bit = 0; bit < 64; bit += 3)\n+    tmp &= ~(1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo1 (unsigned long long tmp)\n+{\n+  for (int bit = 63; bit >= 0; bit -= 3)\n+    tmp &= ~(1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo2 (unsigned long long tmp)\n+{\n+  for (int bit = 0; bit < 64; bit += 3)\n+    tmp &= (1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo3 (unsigned long long tmp)\n+{\n+  for (int bit = 63; bit >= 0; bit -= 3)\n+    tmp &= (1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo4 (unsigned long long tmp)\n+{\n+  for (int bit = 0; bit < 64; bit += 3)\n+    tmp |= ~(1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo5 (unsigned long long tmp)\n+{\n+  for (int bit = 63; bit >= 0; bit -= 3)\n+    tmp |= ~(1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo6 (unsigned long long tmp)\n+{\n+  for (int bit = 0; bit < 64; bit += 3)\n+    tmp |= (1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo7 (unsigned long long tmp)\n+{\n+  for (int bit = 63; bit >= 0; bit -= 3)\n+    tmp |= (1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo8 (unsigned long long tmp)\n+{\n+  for (int bit = 0; bit < 64; bit += 3)\n+    tmp ^= ~(1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo9 (unsigned long long tmp)\n+{\n+  for (int bit = 63; bit >= 0; bit -= 3)\n+    tmp ^= ~(1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo10 (unsigned long long tmp)\n+{\n+  for (int bit = 0; bit < 64; bit += 3)\n+    tmp ^= (1ULL << bit);\n+  return tmp;\n+}\n+\n+unsigned long long\n+__attribute__((noipa))\n+foo11 (unsigned long long tmp)\n+{\n+  for (int bit = 63; bit >= 0; bit -= 3)\n+    tmp ^= (1ULL << bit);\n+  return tmp;\n+}"}, {"sha": "bc375cb78d4bc12ca5884c7325dc695efe5a918a", "filename": "gcc/testsuite/gcc.target/i386/pr103462-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-2.c?ref=9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+#include \"pr103462-1.c\"\n+\n+int main()\n+{\n+  unsigned long long tmp = 0x1111111111111111ULL;\n+  if (foo (tmp) != 0x110110110110110ULL)\n+    __builtin_abort ();\n+\n+  if (foo1 (tmp) != 0x110110110110110ULL)\n+    __builtin_abort ();\n+\n+  if (foo2 (tmp) != 0x0ULL)\n+    __builtin_abort ();\n+\n+  if (foo3 (tmp) != 0x0ULL)\n+    __builtin_abort ();\n+\n+  if (foo4 (tmp) != 0xffffffffffffffffULL)\n+    __builtin_abort ();\n+\n+  if (foo5 (tmp) != 0xffffffffffffffffULL)\n+    __builtin_abort ();\n+\n+  if (foo6 (tmp) != 0x9359359359359359ULL)\n+    __builtin_abort ();\n+\n+  if (foo7 (tmp) != 0x9359359359359359ULL)\n+    __builtin_abort ();\n+\n+  if (foo8 (tmp) != 0x8358358358358358ULL)\n+    __builtin_abort ();\n+\n+  if (foo9 (tmp) != 0x8358358358358358ULL)\n+    __builtin_abort ();\n+\n+  if (foo10 (tmp) != 0x8358358358358358ULL)\n+    __builtin_abort ();\n+\n+  if (foo11 (tmp) != 0x8358358358358358ULL)\n+    __builtin_abort ();\n+}\n+"}, {"sha": "4ba248a4872a1283e1ad0fb8a546f151a57b6dce", "filename": "gcc/testsuite/gcc.target/i386/pr103462-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-3.c?ref=9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-sccp-details\" } */\n+/* { dg-final { scan-tree-dump-times {final value replacement} 12 \"sccp\" } } */\n+\n+unsigned int\n+__attribute__((noipa))\n+foo (unsigned int tmp)\n+{\n+  for (int bit = 0; bit < 32; bit += 3)\n+    tmp &= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo1 (unsigned int tmp)\n+{\n+  for (int bit = 31; bit >= 0; bit -= 3)\n+    tmp &= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo2 (unsigned int tmp)\n+{\n+  for (int bit = 0; bit < 32; bit += 3)\n+    tmp &= (1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo3 (unsigned int tmp)\n+{\n+  for (int bit = 31; bit >= 0; bit -= 3)\n+    tmp &= (1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo4 (unsigned int tmp)\n+{\n+  for (int bit = 0; bit < 32; bit += 3)\n+    tmp |= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo5 (unsigned int tmp)\n+{\n+  for (int bit = 31; bit >= 0; bit -= 3)\n+    tmp |= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo6 (unsigned int tmp)\n+{\n+  for (int bit = 0; bit < 32; bit += 3)\n+    tmp |= (1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo7 (unsigned int tmp)\n+{\n+  for (int bit = 31; bit >= 0; bit -= 3)\n+    tmp |= (1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo8 (unsigned int tmp)\n+{\n+  for (int bit = 0; bit < 32; bit += 3)\n+    tmp ^= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo9 (unsigned int tmp)\n+{\n+  for (int bit = 31; bit >= 0; bit -= 3)\n+    tmp ^= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo10 (unsigned int tmp)\n+{\n+  for (int bit = 0; bit < 32; bit += 3)\n+    tmp ^= (1U << bit);\n+  return tmp;\n+}\n+\n+unsigned int\n+__attribute__((noipa))\n+foo11 (unsigned int tmp)\n+{\n+  for (int bit = 31; bit >= 0; bit -= 3)\n+    tmp ^= (1U << bit);\n+  return tmp;\n+}"}, {"sha": "e2f4056f525eb1a410ba9afed42048dfa6d12949", "filename": "gcc/testsuite/gcc.target/i386/pr103462-4.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-4.c?ref=9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+#include \"pr103462-3.c\"\n+\n+int main()\n+{\n+  unsigned int tmp = 0x11111111U;\n+\n+  if (foo (tmp) != 0x10110110U)\n+    __builtin_abort ();\n+\n+  if (foo1 (tmp) != 0x1101101U)\n+    __builtin_abort ();\n+\n+  if (foo2 (tmp) != 0x0U)\n+    __builtin_abort ();\n+\n+  if (foo3 (tmp) != 0x0U)\n+    __builtin_abort ();\n+\n+  if (foo4 (tmp) != 0xffffffffU)\n+    __builtin_abort ();\n+\n+  if (foo5 (tmp) != 0xffffffffU)\n+    __builtin_abort ();\n+\n+  if (foo6 (tmp) != 0x59359359U)\n+    __builtin_abort ();\n+\n+  if (foo7 (tmp) != 0x93593593U)\n+    __builtin_abort ();\n+\n+  if (foo8 (tmp) != 0xa7ca7ca7U)\n+    __builtin_abort ();\n+\n+  if (foo9 (tmp) != 0x7ca7ca7cU)\n+    __builtin_abort ();\n+\n+  if (foo10 (tmp) != 0x58358358U)\n+    __builtin_abort ();\n+\n+  if (foo11 (tmp) != 0x83583583U)\n+    __builtin_abort ();\n+}\n+"}, {"sha": "1f4ffa34b48dcf1b2544c257654c0206dca95f75", "filename": "gcc/testsuite/gcc.target/i386/pr103462-5.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-5.c?ref=9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-sccp-details\" } */\n+/* { dg-final { scan-tree-dump-times {final value replacement} 12 \"sccp\" } } */\n+\n+unsigned short\n+__attribute__((noipa))\n+foo (unsigned short tmp)\n+{\n+  for (int bit = 0; bit < 16; bit += 3)\n+    tmp &= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo1 (unsigned short tmp)\n+{\n+  for (int bit = 15; bit >= 0; bit -= 3)\n+    tmp &= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo2 (unsigned short tmp)\n+{\n+  for (int bit = 0; bit < 16; bit += 3)\n+    tmp &= (1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo3 (unsigned short tmp)\n+{\n+  for (int bit = 15; bit >= 0; bit -= 3)\n+    tmp &= (1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo4 (unsigned short tmp)\n+{\n+  for (int bit = 0; bit < 16; bit += 3)\n+    tmp |= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo5 (unsigned short tmp)\n+{\n+  for (int bit = 15; bit >= 0; bit -= 3)\n+    tmp |= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo6 (unsigned short tmp)\n+{\n+  for (int bit = 0; bit < 16; bit += 3)\n+    tmp |= (1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo7 (unsigned short tmp)\n+{\n+  for (int bit = 15; bit >= 0; bit -= 3)\n+    tmp |= (1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo8 (unsigned short tmp)\n+{\n+  for (int bit = 0; bit < 16; bit += 3)\n+    tmp ^= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo9 (unsigned short tmp)\n+{\n+  for (int bit = 15; bit >= 0; bit -= 3)\n+    tmp ^= ~(1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo10 (unsigned short tmp)\n+{\n+  for (int bit = 0; bit < 16; bit += 3)\n+    tmp ^= (1U << bit);\n+  return tmp;\n+}\n+\n+unsigned short\n+__attribute__((noipa))\n+foo11 (unsigned short tmp)\n+{\n+  for (int bit = 15; bit >= 0; bit -= 3)\n+    tmp ^= (1U << bit);\n+  return tmp;\n+}"}, {"sha": "65426d71efe4aee32c71218a023453bb54b28dc1", "filename": "gcc/testsuite/gcc.target/i386/pr103462-6.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103462-6.c?ref=9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+#include \"pr103462-5.c\"\n+\n+int main()\n+{\n+  unsigned short tmp = 0x1111U;\n+\n+  if (foo (tmp) != 0x110)\n+    __builtin_abort ();\n+\n+  if (foo1 (tmp) != 0x110)\n+    __builtin_abort ();\n+\n+  if (foo2 (tmp) != 0x0)\n+    __builtin_abort ();\n+\n+  if (foo3 (tmp) != 0x0)\n+    __builtin_abort ();\n+\n+  if (foo4 (tmp) != 0xffff)\n+    __builtin_abort ();\n+\n+  if (foo5 (tmp) != 0xffff)\n+    __builtin_abort ();\n+\n+  if (foo6 (tmp) != 0x9359)\n+    __builtin_abort ();\n+\n+  if (foo7 (tmp) != 0x9359)\n+    __builtin_abort ();\n+\n+  if (foo8 (tmp) != 0x8358)\n+    __builtin_abort ();\n+\n+  if (foo9 (tmp) != 0x8358)\n+    __builtin_abort ();\n+\n+  if (foo10 (tmp) != 0x8358)\n+    __builtin_abort ();\n+\n+  if (foo11 (tmp) != 0x8358)\n+    __builtin_abort ();\n+}\n+"}, {"sha": "fc59d035b199d32e49d7579a939b25b91d604af1", "filename": "gcc/tree-scalar-evolution.cc", "status": "modified", "additions": 172, "deletions": 1, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftree-scalar-evolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4/gcc%2Ftree-scalar-evolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.cc?ref=9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "patch": "@@ -3487,6 +3487,154 @@ expression_expensive_p (tree expr)\n \t  || expanded_size > cache.elements ());\n }\n \n+/* Match.pd function to match bitwise inductive expression.\n+   .i.e.\n+   _2 = 1 << _1;\n+   _3 = ~_2;\n+   tmp_9 = _3 & tmp_12;  */\n+extern bool gimple_bitwise_induction_p (tree, tree *, tree (*)(tree));\n+\n+/* Return the inductive expression of bitwise operation if possible,\n+   otherwise returns DEF.  */\n+static tree\n+analyze_and_compute_bitwise_induction_effect (class loop* loop,\n+\t\t\t\t\t      tree phidef,\n+\t\t\t\t\t      unsigned HOST_WIDE_INT niter)\n+{\n+  tree match_op[3],inv, bitwise_scev;\n+  tree type = TREE_TYPE (phidef);\n+  gphi* header_phi = NULL;\n+\n+  /* Match things like op2(MATCH_OP[2]), op1(MATCH_OP[1]), phidef(PHIDEF)\n+\n+     op2 = PHI <phidef, inv>\n+     _1 = (int) bit_17;\n+     _3 = 1 << _1;\n+     op1 = ~_3;\n+     phidef = op1 & op2;  */\n+  if (!gimple_bitwise_induction_p (phidef, &match_op[0], NULL)\n+      || TREE_CODE (match_op[2]) != SSA_NAME\n+      || !(header_phi = dyn_cast <gphi *> (SSA_NAME_DEF_STMT (match_op[2])))\n+      || gimple_phi_num_args (header_phi) != 2)\n+    return NULL_TREE;\n+\n+  if (PHI_ARG_DEF_FROM_EDGE (header_phi, loop_latch_edge (loop)) != phidef)\n+    return NULL_TREE;\n+\n+  bitwise_scev = analyze_scalar_evolution (loop, match_op[1]);\n+  bitwise_scev = instantiate_parameters (loop, bitwise_scev);\n+\n+  /* Make sure bits is in range of type precision.  */\n+  if (TREE_CODE (bitwise_scev) != POLYNOMIAL_CHREC\n+      || !INTEGRAL_TYPE_P (TREE_TYPE (bitwise_scev))\n+      || !tree_fits_uhwi_p (CHREC_LEFT (bitwise_scev))\n+      || tree_to_uhwi (CHREC_LEFT (bitwise_scev)) >= TYPE_PRECISION (type)\n+      || !tree_fits_shwi_p (CHREC_RIGHT (bitwise_scev)))\n+    return NULL_TREE;\n+\n+enum bit_op_kind\n+  {\n+   INDUCTION_BIT_CLEAR,\n+   INDUCTION_BIT_IOR,\n+   INDUCTION_BIT_XOR,\n+   INDUCTION_BIT_RESET,\n+   INDUCTION_ZERO,\n+   INDUCTION_ALL\n+  };\n+\n+  enum bit_op_kind induction_kind;\n+  enum tree_code code1\n+    = gimple_assign_rhs_code (SSA_NAME_DEF_STMT (phidef));\n+  enum tree_code code2\n+    = gimple_assign_rhs_code (SSA_NAME_DEF_STMT (match_op[0]));\n+\n+  /* BIT_CLEAR: A &= ~(1 << bit)\n+     BIT_RESET: A ^= (1 << bit).\n+     BIT_IOR: A |= (1 << bit)\n+     BIT_ZERO: A &= (1 << bit)\n+     BIT_ALL: A |= ~(1 << bit)\n+     BIT_XOR: A ^= ~(1 << bit).\n+     bit is induction variable.  */\n+  switch (code1)\n+    {\n+    case BIT_AND_EXPR:\n+      induction_kind = code2 == BIT_NOT_EXPR\n+\t? INDUCTION_BIT_CLEAR\n+\t: INDUCTION_ZERO;\n+      break;\n+    case BIT_IOR_EXPR:\n+      induction_kind = code2 == BIT_NOT_EXPR\n+\t? INDUCTION_ALL\n+\t: INDUCTION_BIT_IOR;\n+      break;\n+    case BIT_XOR_EXPR:\n+      induction_kind = code2 == BIT_NOT_EXPR\n+\t? INDUCTION_BIT_XOR\n+\t: INDUCTION_BIT_RESET;\n+      break;\n+      /* A ^ ~(1 << bit) is equal to ~(A ^ (1 << bit)).  */\n+    case BIT_NOT_EXPR:\n+      gcc_assert (code2 == BIT_XOR_EXPR);\n+      induction_kind = INDUCTION_BIT_XOR;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (induction_kind == INDUCTION_ZERO)\n+    return build_zero_cst (type);\n+  if (induction_kind == INDUCTION_ALL)\n+    return build_all_ones_cst (type);\n+\n+  wide_int bits = wi::zero (TYPE_PRECISION (type));\n+  HOST_WIDE_INT bit_start = tree_to_shwi (CHREC_LEFT (bitwise_scev));\n+  HOST_WIDE_INT step = tree_to_shwi (CHREC_RIGHT (bitwise_scev));\n+  HOST_WIDE_INT bit_final = bit_start + step * niter;\n+\n+  /* bit_start, bit_final in range of [0,TYPE_PRECISION)\n+     implies all bits are set in range.  */\n+  if (bit_final >= TYPE_PRECISION (type)\n+      || bit_final < 0)\n+    return NULL_TREE;\n+\n+  /* Loop tripcount should be niter + 1.  */\n+  for (unsigned i = 0; i != niter + 1; i++)\n+    {\n+      bits = wi::set_bit (bits, bit_start);\n+      bit_start += step;\n+    }\n+\n+  bool inverted = false;\n+  switch (induction_kind)\n+    {\n+    case INDUCTION_BIT_CLEAR:\n+      code1 = BIT_AND_EXPR;\n+      inverted = true;\n+      break;\n+    case INDUCTION_BIT_IOR:\n+      code1 = BIT_IOR_EXPR;\n+      break;\n+    case INDUCTION_BIT_RESET:\n+      code1 = BIT_XOR_EXPR;\n+      break;\n+    /* A ^= ~(1 << bit) is special, when loop tripcount is even,\n+       it's equal to  A ^= bits, else A ^= ~bits.  */\n+    case INDUCTION_BIT_XOR:\n+      code1 = BIT_XOR_EXPR;\n+      if (niter % 2 == 0)\n+\tinverted = true;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (inverted)\n+    bits = wi::bit_not (bits);\n+\n+  inv = PHI_ARG_DEF_FROM_EDGE (header_phi, loop_preheader_edge (loop));\n+  return fold_build2 (code1, type, inv, wide_int_to_tree (type, bits));\n+}\n+\n /* Do final value replacement for LOOP, return true if we did anything.  */\n \n bool\n@@ -3519,7 +3667,8 @@ final_value_replacement_loop (class loop *loop)\n     {\n       gphi *phi = psi.phi ();\n       tree rslt = PHI_RESULT (phi);\n-      tree def = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n+      tree phidef = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n+      tree def = phidef;\n       if (virtual_operand_p (def))\n \t{\n \t  gsi_next (&psi);\n@@ -3537,6 +3686,28 @@ final_value_replacement_loop (class loop *loop)\n       def = analyze_scalar_evolution_in_loop (ex_loop, loop, def,\n \t\t\t\t\t      &folded_casts);\n       def = compute_overall_effect_of_inner_loop (ex_loop, def);\n+\n+      /* Handle bitwise induction expression.\n+\n+\t .i.e.\n+\t for (int i = 0; i != 64; i+=3)\n+\t   res &= ~(1UL << i);\n+\n+\t RES can't be analyzed out by SCEV because it is not polynomially\n+\t expressible, but in fact final value of RES can be replaced by\n+\t RES & CONSTANT where CONSTANT all ones with bit {0,3,6,9,... ,63}\n+\t being cleared, similar for BIT_IOR_EXPR/BIT_XOR_EXPR.  */\n+      unsigned HOST_WIDE_INT niter_num;\n+      tree bit_def;\n+      if (tree_fits_uhwi_p (niter)\n+\t  && (niter_num = tree_to_uhwi (niter)) != 0\n+\t  && niter_num < TYPE_PRECISION (TREE_TYPE (phidef))\n+\t  && (bit_def\n+\t      = analyze_and_compute_bitwise_induction_effect (loop,\n+\t\t\t\t\t\t\t      phidef,\n+\t\t\t\t\t\t\t      niter_num)))\n+\tdef = bit_def;\n+\n       if (!tree_does_not_contain_chrecs (def)\n \t  || chrec_contains_symbols_defined_in_loop (def, ex_loop->num)\n \t  /* Moving the computation from the loop may prolong life range"}]}