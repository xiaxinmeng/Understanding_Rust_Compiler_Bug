{"sha": "4f2d36749024d35dd0119be7af2123b935f92241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYyZDM2NzQ5MDI0ZDM1ZGQwMTE5YmU3YWYyMTIzYjkzNWY5MjI0MQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-07T00:22:22Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-07T00:22:22Z"}, "message": "(alter_reg): New variable stack_slot.\n\n(alter_reg): New variable stack_slot.  Apply anti\nBYTES_BIG_ENDIAN correction to stack slot address stored in\nspill_stack_slot.\n\nFrom-SVN: r8884", "tree": {"sha": "f91c0bccc04292aeff8f5dd8e5435be7a0505006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f91c0bccc04292aeff8f5dd8e5435be7a0505006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f2d36749024d35dd0119be7af2123b935f92241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2d36749024d35dd0119be7af2123b935f92241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f2d36749024d35dd0119be7af2123b935f92241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2d36749024d35dd0119be7af2123b935f92241/comments", "author": null, "committer": null, "parents": [{"sha": "70ef1c9e6da84a04ec534afef4a1b1cd19ad5faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ef1c9e6da84a04ec534afef4a1b1cd19ad5faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ef1c9e6da84a04ec534afef4a1b1cd19ad5faa"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "1db7cd36e7c6f0c2345c9564e1cd1439076feb58", "filename": "gcc/reload1.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2d36749024d35dd0119be7af2123b935f92241/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2d36749024d35dd0119be7af2123b935f92241/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=4f2d36749024d35dd0119be7af2123b935f92241", "patch": "@@ -2361,6 +2361,7 @@ alter_reg (i, from_reg)\n \t  /* Compute maximum size needed, both for inherent size\n \t     and for total size.  */\n \t  enum machine_mode mode = GET_MODE (regno_reg_rtx[i]);\n+\t  rtx stack_slot;\n \t  if (spill_stack_slot[from_reg])\n \t    {\n \t      if (GET_MODE_SIZE (GET_MODE (spill_stack_slot[from_reg]))\n@@ -2371,15 +2372,25 @@ alter_reg (i, from_reg)\n \t    }\n \t  /* Make a slot with that size.  */\n \t  x = assign_stack_local (mode, total_size, -1);\n+\t  stack_slot = x;\n \t  if (BYTES_BIG_ENDIAN)\n \t    {\n \t      /* Cancel the  big-endian correction done in assign_stack_local.\n \t\t Get the address of the beginning of the slot.\n \t\t This is so we can do a big-endian correction unconditionally\n \t\t below.  */\n \t      adjust = GET_MODE_SIZE (mode) - total_size;\n+\t      if (adjust)\n+\t\t{\n+\t\t  stack_slot = gen_rtx (MEM, mode_for_size (total_size\n+\t\t\t\t\t\t\t    * BITS_PER_UNIT,\n+\t\t\t\t\t\t\t    MODE_INT, 1),\n+\t\t\t\t\tplus_constant (XEXP (x, 0), adjust));\n+\t\t  RTX_UNCHANGING_P (stack_slot)\n+\t\t    = RTX_UNCHANGING_P (regno_reg_rtx[i]);\n+\t\t}\n \t    }\n-\t  spill_stack_slot[from_reg] = x;\n+\t  spill_stack_slot[from_reg] = stack_slot;\n \t  spill_stack_slot_width[from_reg] = total_size;\n \t}\n "}]}