{"sha": "203b127fccc9abe5373c9e3cc03a476c35b1f594", "node_id": "C_kwDOANBUbNoAKDIwM2IxMjdmY2NjOWFiZTUzNzNjOWUzY2MwM2E0NzZjMzViMWY1OTQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-10T13:08:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-10T13:11:11Z"}, "message": "Restore CCP copy propagation\n\nThe following restores copy propagation in CCP for the case the\nlattice was constant before trying to transition to a copy.  At\nsome point we changed to use the meet operator to handle\ninteger constant -> integer constant transitions but that screws\nup the const -> copy lattice transition.\n\n\tPR tree-optimization/84646\n\t* tree-ssa-ccp.cc (set_lattice_value): Make sure we\n\tallow a const -> copy transition and avoid using meet\n\tin that case.\n\n\t* gcc.dg/tree-ssa/ssa-ccp-42.c: New testcase.", "tree": {"sha": "111ef9a845428138f442f827bd7653ef033ae2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/111ef9a845428138f442f827bd7653ef033ae2a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/203b127fccc9abe5373c9e3cc03a476c35b1f594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203b127fccc9abe5373c9e3cc03a476c35b1f594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203b127fccc9abe5373c9e3cc03a476c35b1f594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203b127fccc9abe5373c9e3cc03a476c35b1f594/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd044dae51caea3c641f86ec5cb0ebccf7e06de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd044dae51caea3c641f86ec5cb0ebccf7e06de7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd044dae51caea3c641f86ec5cb0ebccf7e06de7"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "b4e5c0f73f20f775c328e80513951471a1e994c3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-42.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203b127fccc9abe5373c9e3cc03a476c35b1f594/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203b127fccc9abe5373c9e3cc03a476c35b1f594/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-42.c?ref=203b127fccc9abe5373c9e3cc03a476c35b1f594", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple -O -fdump-tree-ccp1\" } */\n+\n+__GIMPLE (ssa,startwith(\"ccp\")) int foo (int n)\n+{\n+  int i;\n+  int j;\n+\n+  __BB(2):\n+    i_1 = 0;\n+    goto __BB3;\n+\n+  __BB(3):\n+    i_2 = __PHI (__BB2: i_1, __BB3: i_4);\n+    j_3 = i_2;\n+    i_4 = i_2 + 1;\n+    if (i_4 < n_5(D))\n+      goto __BB3;\n+    else\n+      goto __BB4;\n+\n+  __BB(4):\n+    return j_3;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return i_2;\" \"ccp1\" } } */"}, {"sha": "69fd7f1d11d86ad8708126dada43b02437280499", "filename": "gcc/tree-ssa-ccp.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203b127fccc9abe5373c9e3cc03a476c35b1f594/gcc%2Ftree-ssa-ccp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203b127fccc9abe5373c9e3cc03a476c35b1f594/gcc%2Ftree-ssa-ccp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.cc?ref=203b127fccc9abe5373c9e3cc03a476c35b1f594", "patch": "@@ -532,7 +532,12 @@ set_lattice_value (tree var, ccp_prop_value_t *new_val)\n      use the meet operator to retain a conservative value.\n      Missed optimizations like PR65851 makes this necessary.\n      It also ensures we converge to a stable lattice solution.  */\n-  if (old_val->lattice_val != UNINITIALIZED)\n+  if (old_val->lattice_val != UNINITIALIZED\n+      /* But avoid using meet for constant -> copy transitions.  */\n+      && !(old_val->lattice_val == CONSTANT\n+\t   && CONSTANT_CLASS_P (old_val->value)\n+\t   && new_val->lattice_val == CONSTANT\n+\t   && TREE_CODE (new_val->value) == SSA_NAME))\n     ccp_lattice_meet (new_val, old_val);\n \n   gcc_checking_assert (valid_lattice_transition (*old_val, *new_val));"}]}