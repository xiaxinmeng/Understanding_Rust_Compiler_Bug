{"sha": "6f78039049da44f05d46417acd6f23486a705d6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3ODAzOTA0OWRhNDRmMDVkNDY0MTdhY2Q2ZjIzNDg2YTcwNWQ2Zg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-04-11T21:37:16Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-04-11T21:37:16Z"}, "message": "re PR target/80376 (Some vec_xxpermdi usage lead to ICE)\n\n2017-04-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/80376\n\tPR target/80315\n\t* config/rs6000/rs6000.c (rs6000_expand_unop_builtin): Return\n\tCONST0_RTX (mode) rather than const0_rtx where appropriate.\n\t(rs6000_expand_binop_builtin): Likewise.\n\t(rs6000_expand_ternop_builtin): Likewise; also add missing\n\tvsx_xxpermdi_* variants; also fix typo (arg1 => arg2) for\n\tvshasigma built-ins.\n\t* doc/extend.texi: Document that vec_xxpermdi's third argument\n\tmust be a constant.\n\nFrom-SVN: r246859", "tree": {"sha": "27402358ff1ec4f5608fb30536f252fb0e712e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27402358ff1ec4f5608fb30536f252fb0e712e52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f78039049da44f05d46417acd6f23486a705d6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f78039049da44f05d46417acd6f23486a705d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f78039049da44f05d46417acd6f23486a705d6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f78039049da44f05d46417acd6f23486a705d6f/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "125db6a1c6aca542c14b326facdcaf9a1fca8b52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125db6a1c6aca542c14b326facdcaf9a1fca8b52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125db6a1c6aca542c14b326facdcaf9a1fca8b52"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "388db6d7ab2d6d2d82c5a2680efdabca6b55c6fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f78039049da44f05d46417acd6f23486a705d6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f78039049da44f05d46417acd6f23486a705d6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f78039049da44f05d46417acd6f23486a705d6f", "patch": "@@ -1,3 +1,16 @@\n+2017-04-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/80376\n+\tPR target/80315\n+\t* config/rs6000/rs6000.c (rs6000_expand_unop_builtin): Return\n+\tCONST0_RTX (mode) rather than const0_rtx where appropriate.\n+\t(rs6000_expand_binop_builtin): Likewise.\n+\t(rs6000_expand_ternop_builtin): Likewise; also add missing\n+\tvsx_xxpermdi_* variants; also fix typo (arg1 => arg2) for\n+\tvshasigma built-ins.\n+\t* doc/extend.texi: Document that vec_xxpermdi's third argument\n+\tmust be a constant.\n+\n 2017-04-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (dimode_scalar_chain::compute_convert_gain):"}, {"sha": "d34c19d71f2e713422342dfdc34745464136723d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f78039049da44f05d46417acd6f23486a705d6f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f78039049da44f05d46417acd6f23486a705d6f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6f78039049da44f05d46417acd6f23486a705d6f", "patch": "@@ -14582,7 +14582,7 @@ rs6000_expand_unop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  || INTVAL (op0) < -16)\n \t{\n \t  error (\"argument 1 must be a 5-bit signed literal\");\n-\t  return const0_rtx;\n+\t  return CONST0_RTX (tmode);\n \t}\n     }\n \n@@ -14685,7 +14685,7 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  || TREE_INT_CST_LOW (arg1) & ~0x1f)\n \t{\n \t  error (\"argument 2 must be a 5-bit unsigned literal\");\n-\t  return const0_rtx;\n+\t  return CONST0_RTX (tmode);\n \t}\n     }\n   else if (icode == CODE_FOR_dfptstsfi_eq_dd\n@@ -15611,13 +15611,18 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  || TREE_INT_CST_LOW (arg2) & ~0xf)\n \t{\n \t  error (\"argument 3 must be a 4-bit unsigned literal\");\n-\t  return const0_rtx;\n+\t  return CONST0_RTX (tmode);\n \t}\n     }\n   else if (icode == CODE_FOR_vsx_xxpermdi_v2df\n            || icode == CODE_FOR_vsx_xxpermdi_v2di\n            || icode == CODE_FOR_vsx_xxpermdi_v2df_be\n            || icode == CODE_FOR_vsx_xxpermdi_v2di_be\n+           || icode == CODE_FOR_vsx_xxpermdi_v1ti\n+           || icode == CODE_FOR_vsx_xxpermdi_v4sf\n+           || icode == CODE_FOR_vsx_xxpermdi_v4si\n+           || icode == CODE_FOR_vsx_xxpermdi_v8hi\n+           || icode == CODE_FOR_vsx_xxpermdi_v16qi\n            || icode == CODE_FOR_vsx_xxsldwi_v16qi\n            || icode == CODE_FOR_vsx_xxsldwi_v8hi\n            || icode == CODE_FOR_vsx_xxsldwi_v4si\n@@ -15631,7 +15636,7 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  || TREE_INT_CST_LOW (arg2) & ~0x3)\n \t{\n \t  error (\"argument 3 must be a 2-bit unsigned literal\");\n-\t  return const0_rtx;\n+\t  return CONST0_RTX (tmode);\n \t}\n     }\n   else if (icode == CODE_FOR_vsx_set_v2df\n@@ -15651,7 +15656,7 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  || TREE_INT_CST_LOW (arg2) & ~0x1)\n \t{\n \t  error (\"argument 3 must be a 1-bit unsigned literal\");\n-\t  return const0_rtx;\n+\t  return CONST0_RTX (tmode);\n \t}\n     }\n   else if (icode == CODE_FOR_dfp_ddedpd_dd\n@@ -15663,7 +15668,7 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  || TREE_INT_CST_LOW (arg2) & ~0x3)\n \t{\n \t  error (\"argument 1 must be 0 or 2\");\n-\t  return const0_rtx;\n+\t  return CONST0_RTX (tmode);\n \t}\n     }\n   else if (icode == CODE_FOR_dfp_denbcd_dd\n@@ -15675,7 +15680,7 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  || TREE_INT_CST_LOW (arg0) & ~0x1)\n \t{\n \t  error (\"argument 1 must be a 1-bit unsigned literal\");\n-\t  return const0_rtx;\n+\t  return CONST0_RTX (tmode);\n \t}\n     }\n   else if (icode == CODE_FOR_dfp_dscli_dd\n@@ -15689,7 +15694,7 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  || TREE_INT_CST_LOW (arg1) & ~0x3f)\n \t{\n \t  error (\"argument 2 must be a 6-bit unsigned literal\");\n-\t  return const0_rtx;\n+\t  return CONST0_RTX (tmode);\n \t}\n     }\n   else if (icode == CODE_FOR_crypto_vshasigmaw\n@@ -15701,14 +15706,14 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n       if (TREE_CODE (arg1) != INTEGER_CST || wi::geu_p (arg1, 2))\n \t{\n \t  error (\"argument 2 must be 0 or 1\");\n-\t  return const0_rtx;\n+\t  return CONST0_RTX (tmode);\n \t}\n \n       STRIP_NOPS (arg2);\n-      if (TREE_CODE (arg2) != INTEGER_CST || wi::geu_p (arg1, 16))\n+      if (TREE_CODE (arg2) != INTEGER_CST || wi::geu_p (arg2, 16))\n \t{\n \t  error (\"argument 3 must be in the range 0..15\");\n-\t  return const0_rtx;\n+\t  return CONST0_RTX (tmode);\n \t}\n     }\n "}, {"sha": "f7cbe447307dea675ee47cab3c2560bf69095aeb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f78039049da44f05d46417acd6f23486a705d6f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f78039049da44f05d46417acd6f23486a705d6f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6f78039049da44f05d46417acd6f23486a705d6f", "patch": "@@ -17623,20 +17623,21 @@ void vec_vsx_st (vector bool char, int, vector bool char *);\n void vec_vsx_st (vector bool char, int, unsigned char *);\n void vec_vsx_st (vector bool char, int, signed char *);\n \n-vector double vec_xxpermdi (vector double, vector double, int);\n-vector float vec_xxpermdi (vector float, vector float, int);\n-vector long long vec_xxpermdi (vector long long, vector long long, int);\n+vector double vec_xxpermdi (vector double, vector double, const int);\n+vector float vec_xxpermdi (vector float, vector float, const int);\n+vector long long vec_xxpermdi (vector long long, vector long long, const int);\n vector unsigned long long vec_xxpermdi (vector unsigned long long,\n-                                        vector unsigned long long, int);\n-vector int vec_xxpermdi (vector int, vector int, int);\n+                                        vector unsigned long long, const int);\n+vector int vec_xxpermdi (vector int, vector int, const int);\n vector unsigned int vec_xxpermdi (vector unsigned int,\n-                                  vector unsigned int, int);\n-vector short vec_xxpermdi (vector short, vector short, int);\n+                                  vector unsigned int, const int);\n+vector short vec_xxpermdi (vector short, vector short, const int);\n vector unsigned short vec_xxpermdi (vector unsigned short,\n-                                    vector unsigned short, int);\n-vector signed char vec_xxpermdi (vector signed char, vector signed char, int);\n+                                    vector unsigned short, const int);\n+vector signed char vec_xxpermdi (vector signed char, vector signed char,\n+                                 const int);\n vector unsigned char vec_xxpermdi (vector unsigned char,\n-                                   vector unsigned char, int);\n+                                   vector unsigned char, const int);\n \n vector double vec_xxsldi (vector double, vector double, int);\n vector float vec_xxsldi (vector float, vector float, int);"}]}