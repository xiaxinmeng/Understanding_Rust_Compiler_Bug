{"sha": "ba11c17994a5aba402252e4a7d0e5c91cad0aea9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExMWMxNzk5NGE1YWJhNDAyMjUyZTRhN2QwZTVjOTFjYWQwYWVhOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-28T13:36:30Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-28T13:36:30Z"}, "message": "(pointer_int_sum): Don't distribute if intop is unsigned and not the\nsame size as ptrop.\n\nFrom-SVN: r10186", "tree": {"sha": "4e1cbd749e872edf73c87f35b7de6e3682d478c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e1cbd749e872edf73c87f35b7de6e3682d478c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba11c17994a5aba402252e4a7d0e5c91cad0aea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba11c17994a5aba402252e4a7d0e5c91cad0aea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba11c17994a5aba402252e4a7d0e5c91cad0aea9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba11c17994a5aba402252e4a7d0e5c91cad0aea9/comments", "author": null, "committer": null, "parents": [{"sha": "307d8cd67d3339e79da8160b95eed56cabe6d37e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307d8cd67d3339e79da8160b95eed56cabe6d37e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/307d8cd67d3339e79da8160b95eed56cabe6d37e"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "b16a7bfb8206a2ab55d503a86625ac9d300dbed7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba11c17994a5aba402252e4a7d0e5c91cad0aea9/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba11c17994a5aba402252e4a7d0e5c91cad0aea9/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ba11c17994a5aba402252e4a7d0e5c91cad0aea9", "patch": "@@ -2648,7 +2648,13 @@ pointer_int_sum (resultcode, ptrop, intop)\n       && TREE_CONSTANT (size_exp)\n       /* If the constant comes from pointer subtraction,\n \t skip this optimization--it would cause an error.  */\n-      && TREE_CODE (TREE_TYPE (TREE_OPERAND (intop, 0))) == INTEGER_TYPE)\n+      && TREE_CODE (TREE_TYPE (TREE_OPERAND (intop, 0))) == INTEGER_TYPE\n+      /* If the constant is unsigned, and smaller than the pointer size,\n+\t then we must skip this optimization.  This is because it could cause\n+\t an overflow error if the constant is negative but INTOP is not.  */\n+      && (! TREE_UNSIGNED (TREE_TYPE (intop))\n+\t  || (TYPE_PRECISION (TREE_TYPE (intop))\n+\t      == TYPE_PRECISION (TREE_TYPE (ptrop)))))\n     {\n       enum tree_code subcode = resultcode;\n       tree int_type = TREE_TYPE (intop);"}]}