{"sha": "06bc1b0c539e3a60692d7432d15e701c38610f80", "node_id": "C_kwDOANBUbNoAKDA2YmMxYjBjNTM5ZTNhNjA2OTJkNzQzMmQxNWU3MDFjMzg2MTBmODA", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-01-11T02:38:27Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-01-11T14:47:39Z"}, "message": "tree-object-size: Dynamic sizes for ADDR_EXPR\n\nAllow returning dynamic expressions from ADDR_EXPR for\n__builtin_dynamic_object_size and also allow offsets to be dynamic.\n\ngcc/ChangeLog:\n\n\tPR middle-end/70090\n\t* tree-object-size.c (size_valid_p): New function.\n\t(size_for_offset): Remove OFFSET constness assertion.\n\t(addr_object_size): Build dynamic expressions for object\n\tsizes and use size_valid_p to decide if it is valid for the\n\tgiven OBJECT_SIZE_TYPE.\n\t(compute_builtin_object_size): Allow dynamic offsets when\n\tcomputing size at O0.\n\t(call_object_size): Call size_valid_p.\n\t(plus_stmt_object_size): Allow non-constant offset and use\n\tsize_valid_p to decide if it is valid for the given\n\tOBJECT_SIZE_TYPE.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/70090\n\t* gcc.dg/builtin-dynamic-object-size-0.c: Add new tests.\n\t* gcc.dg/builtin-object-size-1.c (test1)\n\t[__builtin_object_size]: Adjust expected output for dynamic\n\tobject sizes.\n\t* gcc.dg/builtin-object-size-2.c (test1)\n\t[__builtin_object_size]: Likewise.\n\t* gcc.dg/builtin-object-size-3.c (test1)\n\t[__builtin_object_size]: Likewise.\n\t* gcc.dg/builtin-object-size-4.c (test1)\n\t[__builtin_object_size]: Likewise.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "2975a476439279b221cf40bdc1b47b747d1b5ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2975a476439279b221cf40bdc1b47b747d1b5ddc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06bc1b0c539e3a60692d7432d15e701c38610f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bc1b0c539e3a60692d7432d15e701c38610f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bc1b0c539e3a60692d7432d15e701c38610f80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bc1b0c539e3a60692d7432d15e701c38610f80/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f07810659616221c3bf4177c1fc2ca3607f7728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f07810659616221c3bf4177c1fc2ca3607f7728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f07810659616221c3bf4177c1fc2ca3607f7728"}], "stats": {"total": 365, "additions": 299, "deletions": 66}, "files": [{"sha": "dd8dc99a5807c54accb745350ba6ccd21239f24f", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-0.c", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c?ref=06bc1b0c539e3a60692d7432d15e701c38610f80", "patch": "@@ -250,6 +250,79 @@ test_deploop (size_t sz, size_t cond)\n   return __builtin_dynamic_object_size (bin, 0);\n }\n \n+/* Address expressions.  */\n+\n+struct dynarray_struct\n+{\n+  long a;\n+  char c[16];\n+  int b;\n+};\n+\n+size_t\n+__attribute__ ((noinline))\n+test_dynarray_struct (size_t sz, size_t off)\n+{\n+  struct dynarray_struct bin[sz];\n+\n+  return __builtin_dynamic_object_size (&bin[off].c, 0);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_dynarray_struct_subobj (size_t sz, size_t off)\n+{\n+  struct dynarray_struct bin[sz];\n+\n+  return __builtin_dynamic_object_size (&bin[off].c[4], 1);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_dynarray_struct_subobj2 (size_t sz, size_t off, size_t *objsz)\n+{\n+  struct dynarray_struct2\n+    {\n+      long a;\n+      int b;\n+      char c[sz];\n+    };\n+\n+  struct dynarray_struct2 bin;\n+\n+  *objsz = sizeof (bin);\n+\n+  return __builtin_dynamic_object_size (&bin.c[off], 1);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_substring (size_t sz, size_t off)\n+{\n+  char str[sz];\n+\n+  return __builtin_dynamic_object_size (&str[off], 0);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_substring_ptrplus (size_t sz, size_t off)\n+{\n+  int str[sz];\n+\n+  return __builtin_dynamic_object_size (str + off, 0);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_substring_ptrplus2 (size_t sz, size_t off, size_t off2)\n+{\n+  int str[sz];\n+  int *ptr = &str[off];\n+\n+  return __builtin_dynamic_object_size (ptr + off2, 0);\n+}\n+\n size_t\n __attribute__ ((access (__read_write__, 1, 2)))\n __attribute__ ((noinline))\n@@ -258,6 +331,14 @@ test_parmsz_simple (void *obj, size_t sz)\n   return __builtin_dynamic_object_size (obj, 0);\n }\n \n+size_t\n+__attribute__ ((noinline))\n+__attribute__ ((access (__read_write__, 1, 2)))\n+test_parmsz (void *obj, size_t sz, size_t off)\n+{\n+  return __builtin_dynamic_object_size (obj + off, 0);\n+}\n+\n size_t\n __attribute__ ((access (__read_write__, 1, 2)))\n __attribute__ ((noinline))\n@@ -266,6 +347,14 @@ test_parmsz_scaled (int *obj, size_t sz)\n   return __builtin_dynamic_object_size (obj, 0);\n }\n \n+size_t\n+__attribute__ ((noinline))\n+__attribute__ ((access (__read_write__, 1, 2)))\n+test_parmsz_scaled_off (int *obj, size_t sz, size_t off)\n+{\n+  return __builtin_dynamic_object_size (obj + off, 0);\n+}\n+\n size_t\n __attribute__ ((access (__read_write__, 1, 3)))\n __attribute__ ((noinline))\n@@ -274,6 +363,23 @@ test_parmsz_unknown (void *obj, void *unknown, size_t sz, int cond)\n   return __builtin_dynamic_object_size (cond ? obj : unknown, 0);\n }\n \n+size_t\n+__attribute__ ((noinline))\n+__attribute__ ((access (__read_write__, 1, 2)))\n+test_loop (int *obj, size_t sz, size_t start, size_t end, int incr)\n+{\n+  int *ptr = obj + start;\n+\n+  for (int i = start; i != end; i = i + incr)\n+    {\n+      ptr = ptr + incr;\n+      if (__builtin_dynamic_object_size (ptr, 0) == 0)\n+\treturn 0;\n+    }\n+\n+  return __builtin_dynamic_object_size (ptr, 0);\n+}\n+\n unsigned nfails = 0;\n \n #define FAIL() ({ \\\n@@ -333,6 +439,32 @@ main (int argc, char **argv)\n     FAIL ();\n   if (test_dynarray (__builtin_strlen (argv[0])) != __builtin_strlen (argv[0]))\n     FAIL ();\n+  if (test_dynarray_struct (42, 4) !=\n+      ((42 - 4) * sizeof (struct dynarray_struct)\n+       - __builtin_offsetof (struct dynarray_struct, c)))\n+    FAIL ();\n+  if (test_dynarray_struct (42, 48) != 0)\n+    FAIL ();\n+  if (test_substring (128, 4) != 128 - 4)\n+    FAIL ();\n+  if (test_substring (128, 142) != 0)\n+    FAIL ();\n+  if (test_dynarray_struct_subobj (42, 4) != 16 - 4)\n+    FAIL ();\n+  if (test_dynarray_struct_subobj (42, 48) != 0)\n+    FAIL ();\n+  size_t objsz = 0;\n+  if (test_dynarray_struct_subobj2 (42, 4, &objsz)\n+    != objsz - 4 - sizeof (long) - sizeof (int))\n+    FAIL ();\n+  if (test_substring_ptrplus (128, 4) != (128 - 4) * sizeof (int))\n+    FAIL ();\n+  if (test_substring_ptrplus (128, 142) != 0)\n+    FAIL ();\n+  if (test_substring_ptrplus2 (128, 4, 4) != (128 - 8) * sizeof (int))\n+    FAIL ();\n+  if (test_substring_ptrplus2 (128, 4, -3) != (128 - 1) * sizeof (int))\n+    FAIL ();\n   if (test_dynarray_cond (0) != 16)\n     FAIL ();\n   if (test_dynarray_cond (1) != 8)\n@@ -349,6 +481,30 @@ main (int argc, char **argv)\n     FAIL ();\n   if (test_parmsz_unknown (argv[0], argv[0], __builtin_strlen (argv[0]) + 1, 0)\n       != -1)\n+  if (test_parmsz (argv[0], __builtin_strlen (argv[0]) + 1, -1) != 0)\n+    FAIL ();\n+  if (test_parmsz (argv[0], __builtin_strlen (argv[0]) + 1, 0)\n+      != __builtin_strlen (argv[0]) + 1)\n+    FAIL ();\n+  if (test_parmsz (argv[0], __builtin_strlen (argv[0]) + 1,\n+\t\t   __builtin_strlen (argv[0])) != 1)\n+    FAIL ();\n+  if (test_parmsz (argv[0], __builtin_strlen (argv[0]) + 1,\n+\t\t   __builtin_strlen (argv[0]) + 2) != 0)\n+    FAIL ();\n+  if (test_parmsz_scaled_off (arr, 42, 2) != 40 * sizeof (int))\n+    FAIL ();\n+  if (test_loop (arr, 42, 0, 32, 1) != 10 * sizeof (int))\n+    FAIL ();\n+  if (test_loop (arr, 42, 32, -1, -1) != 0)\n+    FAIL ();\n+  if (test_loop (arr, 42, 32, 10, -1) != 32 * sizeof (int))\n+    FAIL ();\n+  if (test_loop (arr, 42, 42, 0, -1) != 42 * sizeof (int))\n+    FAIL ();\n+  if (test_loop (arr, 42, 44, 0, -1) != 0)\n+    FAIL ();\n+  if (test_loop (arr, 42, 20, 52, 1) != 0)\n     FAIL ();\n \n   if (nfails > 0)"}, {"sha": "161f426ec0bb5fc8290da781ab1a9ecb062037d5", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-1.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c?ref=06bc1b0c539e3a60692d7432d15e701c38610f80", "patch": "@@ -81,30 +81,56 @@ test1 (void *q, int x)\n     r = malloc (30);\n   else\n     r = calloc (2, 16);\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 0) != (x < 20 ? 30 : 2 * 16))\n+    abort ();\n+#else\n   /* We may duplicate this test onto the two exit paths.  On one path\n      the size will be 32, the other it will be 30.  If we don't duplicate\n      this test, then the size will be 32.  */\n   if (__builtin_object_size (r, 0) != 2 * 16\n       && __builtin_object_size (r, 0) != 30)\n     abort ();\n+#endif\n   if (x < 20)\n     r = malloc (30);\n   else\n     r = calloc (2, 14);\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 0) != (x < 20 ? 30 : 2 * 14))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 0) != 30)\n     abort ();\n+#endif\n   if (x < 30)\n     r = malloc (sizeof (a));\n   else\n     r = &a.a[3];\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 0) != (x < 30 ? sizeof (a) : sizeof (a) - 3))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 0) != sizeof (a))\n     abort ();\n+#endif\n   r = memcpy (r, \"a\", 2);\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 0) != (x < 30 ? sizeof (a) : sizeof (a) - 3))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 0) != sizeof (a))\n     abort ();\n+#endif\n   r = memcpy (r + 2, \"b\", 2) + 2;\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 0)\n+      != (x < 30 ? sizeof (a) - 4 : sizeof (a) - 7))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 0) != sizeof (a) - 4)\n     abort ();\n+#endif\n   r = &a.a[4];\n   r = memset (r, 'a', 2);\n   if (__builtin_object_size (r, 0)\n@@ -140,14 +166,16 @@ test1 (void *q, int x)\n     abort ();\n   if (__builtin_object_size (var + 10, 0) != x)\n     abort ();\n+  if (__builtin_object_size (&var[5], 0) != x + 5)\n+    abort ();\n #else\n   if (__builtin_object_size (var, 0) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (var + 10, 0) != (size_t) -1)\n     abort ();\n-#endif\n   if (__builtin_object_size (&var[5], 0) != (size_t) -1)\n     abort ();\n+#endif\n   if (__builtin_object_size (zerol, 0) != 0)\n     abort ();\n   if (__builtin_object_size (&zerol, 0) != 0)"}, {"sha": "2729538da1786c885be43d80d5403a1f7e19be7b", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-2.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c?ref=06bc1b0c539e3a60692d7432d15e701c38610f80", "patch": "@@ -75,30 +75,56 @@ test1 (void *q, int x)\n     r = malloc (30);\n   else\n     r = calloc (2, 16);\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 1) != (x < 20 ? 30 : 2 * 16))\n+    abort ();\n+#else\n   /* We may duplicate this test onto the two exit paths.  On one path\n      the size will be 32, the other it will be 30.  If we don't duplicate\n      this test, then the size will be 32.  */\n   if (__builtin_object_size (r, 1) != 2 * 16\n       && __builtin_object_size (r, 1) != 30)\n     abort ();\n+#endif\n   if (x < 20)\n     r = malloc (30);\n   else\n     r = calloc (2, 14);\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 1) != (x < 20 ? 30 : 2 * 14))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 1) != 30)\n     abort ();\n+#endif\n   if (x < 30)\n     r = malloc (sizeof (a));\n   else\n     r = &a.a[3];\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 1) != (x < 30 ? sizeof (a) : sizeof (a) - 3))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 1) != sizeof (a))\n     abort ();\n+#endif\n   r = memcpy (r, \"a\", 2);\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 1) != (x < 30 ? sizeof (a) : sizeof (a) - 3))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 1) != sizeof (a))\n     abort ();\n+#endif\n   r = memcpy (r + 2, \"b\", 2) + 2;\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 0)\n+      != (x < 30 ? sizeof (a) - 4 : sizeof (a) - 7))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 1) != sizeof (a) - 4)\n     abort ();\n+#endif\n   r = &a.a[4];\n   r = memset (r, 'a', 2);\n   if (__builtin_object_size (r, 1) != sizeof (a.a) - 4)\n@@ -142,27 +168,28 @@ test1 (void *q, int x)\n     abort ();\n   if (__builtin_object_size (var + 10, 1) != x)\n     abort ();\n+  if (__builtin_object_size (&var[5], 1) != x + 5)\n+    abort ();\n+  if (__builtin_object_size (vara, 1) != (x + 10) * sizeof (struct A))\n+    abort ();\n+  if (__builtin_object_size (vara + 10, 1) != x * sizeof (struct A))\n+    abort ();    \n+  if (__builtin_object_size (&vara[5], 1) != (x + 5) * sizeof (struct A))\n+    abort ();\n #else\n   if (__builtin_object_size (var, 1) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (var + 10, 1) != (size_t) -1)\n     abort ();\n-#endif\n   if (__builtin_object_size (&var[5], 1) != (size_t) -1)\n     abort ();\n-#ifdef __builtin_object_size\n-  if (__builtin_object_size (vara, 1) != (x + 10) * sizeof (struct A))\n-    abort ();\n-  if (__builtin_object_size (vara + 10, 1) != x * sizeof (struct A))\n-    abort ();    \n-#else\n   if (__builtin_object_size (vara, 1) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (vara + 10, 1) != (size_t) -1)\n     abort ();    \n-#endif\n   if (__builtin_object_size (&vara[5], 1) != (size_t) -1)\n     abort ();\n+#endif\n   if (__builtin_object_size (&vara[0].a, 1) != sizeof (vara[0].a))\n     abort ();\n   if (__builtin_object_size (&vara[10].a[0], 1) != sizeof (vara[0].a))"}, {"sha": "db31171a8bd3165f24bafe02342c721a4c203c6f", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-3.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c?ref=06bc1b0c539e3a60692d7432d15e701c38610f80", "patch": "@@ -42,9 +42,17 @@ test1 (void *q, int x)\n     abort ();\n   if (__builtin_object_size (q, 2) != 0)\n     abort ();\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 2)\n+      != (x < 0\n+\t  ? sizeof (a) - __builtin_offsetof (struct A, a) - 9\n+\t  : sizeof (a) - __builtin_offsetof (struct A, c) - 1))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, c) - 1)\n     abort ();\n+#endif\n   if (x < 6)\n     r = &w[2].a[1];\n   else\n@@ -58,15 +66,28 @@ test1 (void *q, int x)\n   if (__builtin_object_size (&y.b, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, b))\n     abort ();\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 2)\n+      != (x < 6\n+\t  ? 2 * sizeof (w[0]) - __builtin_offsetof (struct A, a) - 1\n+\t  : sizeof (a) - __builtin_offsetof (struct A, a) - 6))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 6)\n     abort ();\n+#endif\n   if (x < 20)\n     r = malloc (30);\n   else\n     r = calloc (2, 16);\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (r, 2) != (x < 20 ? 30 : 2 * 16))\n+    abort ();\n+#else\n   if (__builtin_object_size (r, 2) != 30)\n     abort ();\n+#endif\n   if (x < 20)\n     r = malloc (30);\n   else\n@@ -145,14 +166,16 @@ test1 (void *q, int x)\n     abort ();\n   if (__builtin_object_size (var + 10, 2) != x)\n     abort ();\n+  if (__builtin_object_size (&var[5], 2) != x + 5)\n+    abort ();\n #else\n   if (__builtin_object_size (var, 2) != 0)\n     abort ();\n   if (__builtin_object_size (var + 10, 2) != 0)\n     abort ();\n-#endif\n   if (__builtin_object_size (&var[5], 2) != 0)\n     abort ();\n+#endif\n   if (__builtin_object_size (zerol, 2) != 0)\n     abort ();\n   if (__builtin_object_size (&zerol, 2) != 0)"}, {"sha": "f644890dd1496cdbe010217f91e6e8c4b42182d1", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-4.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c?ref=06bc1b0c539e3a60692d7432d15e701c38610f80", "patch": "@@ -155,27 +155,28 @@ test1 (void *q, int x)\n     abort ();\n   if (__builtin_object_size (var + 10, 3) != x)\n     abort ();\n+  if (__builtin_object_size (&var[5], 3) != x + 5)\n+    abort ();\n+  if (__builtin_object_size (vara, 3) != (x + 10) * sizeof (struct A))\n+    abort ();\n+  if (__builtin_object_size (vara + 10, 3) != x * sizeof (struct A))\n+    abort ();    \n+  if (__builtin_object_size (&vara[5], 3) != (x + 5) * sizeof (struct A))\n+    abort ();\n #else\n   if (__builtin_object_size (var, 3) != 0)\n     abort ();\n   if (__builtin_object_size (var + 10, 3) != 0)\n     abort ();\n-#endif\n   if (__builtin_object_size (&var[5], 3) != 0)\n     abort ();\n-#ifdef __builtin_object_size\n-  if (__builtin_object_size (vara, 3) != (x + 10) * sizeof (struct A))\n-    abort ();\n-  if (__builtin_object_size (vara + 10, 3) != x * sizeof (struct A))\n-    abort ();    \n-#else\n   if (__builtin_object_size (vara, 3) != 0)\n     abort ();\n   if (__builtin_object_size (vara + 10, 3) != 0)\n     abort ();    \n-#endif\n   if (__builtin_object_size (&vara[5], 3) != 0)\n     abort ();\n+#endif\n   if (__builtin_object_size (&vara[0].a, 3) != sizeof (vara[0].a))\n     abort ();\n   if (__builtin_object_size (&vara[10].a[0], 3) != sizeof (vara[0].a))"}, {"sha": "3a39e6f15bb70233d7c5c7895fe0f38ec655f826", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 46, "deletions": 48, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bc1b0c539e3a60692d7432d15e701c38610f80/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=06bc1b0c539e3a60692d7432d15e701c38610f80", "patch": "@@ -107,6 +107,14 @@ size_unknown_p (tree val, int object_size_type)\n \t  ? integer_zerop (val) : integer_all_onesp (val));\n }\n \n+/* Return true if VAL represents a valid size for OBJECT_SIZE_TYPE.  */\n+\n+static inline bool\n+size_valid_p (tree val, int object_size_type)\n+{\n+  return ((object_size_type & OST_DYNAMIC) || TREE_CODE (val) == INTEGER_CST);\n+}\n+\n /* Return true if VAL is usable as an object size in the object_sizes\n    vectors.  */\n \n@@ -341,7 +349,6 @@ init_offset_limit (void)\n static tree\n size_for_offset (tree sz, tree offset, tree wholesize = NULL_TREE)\n {\n-  gcc_checking_assert (TREE_CODE (offset) == INTEGER_CST);\n   gcc_checking_assert (types_compatible_p (TREE_TYPE (sz), sizetype));\n \n   /* For negative offsets, if we have a distinct WHOLESIZE, use it to get a net\n@@ -540,18 +547,11 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t    sz = wholesize = size_unknown (object_size_type);\n \t}\n       if (!size_unknown_p (sz, object_size_type))\n-\t{\n-\t  tree offset = TREE_OPERAND (pt_var, 1);\n-\t  if (TREE_CODE (offset) != INTEGER_CST\n-\t      || TREE_CODE (sz) != INTEGER_CST)\n-\t    sz = wholesize = size_unknown (object_size_type);\n-\t  else\n-\t    sz = size_for_offset (sz, offset, wholesize);\n-\t}\n+\tsz = size_for_offset (sz, TREE_OPERAND (pt_var, 1), wholesize);\n \n       if (!size_unknown_p (sz, object_size_type)\n-\t  && TREE_CODE (sz) == INTEGER_CST\n-\t  && compare_tree_int (sz, offset_limit) < 0)\n+\t  && (TREE_CODE (sz) != INTEGER_CST\n+\t      || compare_tree_int (sz, offset_limit) < 0))\n \t{\n \t  pt_var_size = sz;\n \t  pt_var_wholesize = wholesize;\n@@ -571,8 +571,9 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \n   if (pt_var_size)\n     {\n-      /* Validate the size determined above.  */\n-      if (compare_tree_int (pt_var_size, offset_limit) >= 0)\n+      /* Validate the size determined above if it is a constant.  */\n+      if (TREE_CODE (pt_var_size) == INTEGER_CST\n+\t  && compare_tree_int (pt_var_size, offset_limit) >= 0)\n \treturn false;\n     }\n \n@@ -596,7 +597,7 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t    var = TREE_OPERAND (var, 0);\n \t  if (! TYPE_SIZE_UNIT (TREE_TYPE (var))\n \t      || ! tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (var)))\n-\t      || (pt_var_size\n+\t      || (pt_var_size && TREE_CODE (pt_var_size) == INTEGER_CST\n \t\t  && tree_int_cst_lt (pt_var_size,\n \t\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (var)))))\n \t    var = pt_var;\n@@ -610,17 +611,11 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t\tswitch (TREE_CODE (v))\n \t\t  {\n \t\t  case ARRAY_REF:\n-\t\t    if (TYPE_SIZE_UNIT (TREE_TYPE (TREE_OPERAND (v, 0)))\n-\t\t\t&& TREE_CODE (TREE_OPERAND (v, 1)) == INTEGER_CST)\n+\t\t    if (TYPE_SIZE_UNIT (TREE_TYPE (TREE_OPERAND (v, 0))))\n \t\t      {\n \t\t\ttree domain\n \t\t\t  = TYPE_DOMAIN (TREE_TYPE (TREE_OPERAND (v, 0)));\n-\t\t\tif (domain\n-\t\t\t    && TYPE_MAX_VALUE (domain)\n-\t\t\t    && TREE_CODE (TYPE_MAX_VALUE (domain))\n-\t\t\t       == INTEGER_CST\n-\t\t\t    && tree_int_cst_lt (TREE_OPERAND (v, 1),\n-\t\t\t\t\t\tTYPE_MAX_VALUE (domain)))\n+\t\t\tif (domain && TYPE_MAX_VALUE (domain))\n \t\t\t  {\n \t\t\t    v = NULL_TREE;\n \t\t\t    break;\n@@ -687,20 +682,20 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \tvar = pt_var;\n \n       if (var != pt_var)\n-\tvar_size = TYPE_SIZE_UNIT (TREE_TYPE (var));\n+\t{\n+\t  var_size = TYPE_SIZE_UNIT (TREE_TYPE (var));\n+\t  if (!TREE_CONSTANT (var_size))\n+\t    var_size = get_or_create_ssa_default_def (cfun, var_size);\n+\t  if (!var_size)\n+\t    return false;\n+\t}\n       else if (!pt_var_size)\n \treturn false;\n       else\n \tvar_size = pt_var_size;\n       bytes = compute_object_offset (TREE_OPERAND (ptr, 0), var);\n       if (bytes != error_mark_node)\n-\t{\n-\t  if (TREE_CODE (bytes) == INTEGER_CST\n-\t      && tree_int_cst_lt (var_size, bytes))\n-\t    bytes = size_zero_node;\n-\t  else\n-\t    bytes = size_binop (MINUS_EXPR, var_size, bytes);\n-\t}\n+\tbytes = size_for_offset (var_size, bytes);\n       if (var != pt_var\n \t  && pt_var_size\n \t  && TREE_CODE (pt_var) == MEM_REF\n@@ -709,11 +704,7 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t  tree bytes2 = compute_object_offset (TREE_OPERAND (ptr, 0), pt_var);\n \t  if (bytes2 != error_mark_node)\n \t    {\n-\t      if (TREE_CODE (bytes2) == INTEGER_CST\n-\t\t  && tree_int_cst_lt (pt_var_size, bytes2))\n-\t\tbytes2 = size_zero_node;\n-\t      else\n-\t\tbytes2 = size_binop (MINUS_EXPR, pt_var_size, bytes2);\n+\t      bytes2 = size_for_offset (pt_var_size, bytes2);\n \t      bytes = size_binop (MIN_EXPR, bytes, bytes2);\n \t    }\n \t}\n@@ -729,14 +720,18 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n       wholebytes = pt_var_wholesize;\n     }\n \n-  if (TREE_CODE (bytes) != INTEGER_CST\n-      || TREE_CODE (wholebytes) != INTEGER_CST)\n-    return false;\n+  if (!size_unknown_p (bytes, object_size_type)\n+      && size_valid_p (bytes, object_size_type)\n+      && !size_unknown_p (bytes, object_size_type)\n+      && size_valid_p (wholebytes, object_size_type))\n+    {\n+      *psize = bytes;\n+      if (pwholesize)\n+\t*pwholesize = wholebytes;\n+      return true;\n+    }\n \n-  *psize = bytes;\n-  if (pwholesize)\n-    *pwholesize = wholebytes;\n-  return true;\n+  return false;\n }\n \n \n@@ -1058,11 +1053,11 @@ compute_builtin_object_size (tree ptr, int object_size_type,\n \t      tree offset = gimple_assign_rhs2 (def);\n \t      ptr = gimple_assign_rhs1 (def);\n \n-\t      if (tree_fits_shwi_p (offset)\n+\t      if (((object_size_type & OST_DYNAMIC)\n+\t\t   || tree_fits_shwi_p (offset))\n \t\t  && compute_builtin_object_size (ptr, object_size_type,\n \t\t\t\t\t\t  psize))\n \t\t{\n-\t\t  /* Return zero when the offset is out of bounds.  */\n \t\t  *psize = size_for_offset (*psize, offset);\n \t\t  return true;\n \t\t}\n@@ -1247,7 +1242,7 @@ call_object_size (struct object_size_info *osi, tree ptr, gcall *call)\n   gcc_assert (osi->pass == 0);\n   tree bytes = alloc_object_size (call, object_size_type);\n \n-  if (!(object_size_type & OST_DYNAMIC) && TREE_CODE (bytes) != INTEGER_CST)\n+  if (!size_valid_p (bytes, object_size_type))\n     bytes = size_unknown (object_size_type);\n \n   object_sizes_set (osi, varno, bytes, bytes);\n@@ -1328,9 +1323,8 @@ plus_stmt_object_size (struct object_size_info *osi, tree var, gimple *stmt)\n     return false;\n \n   /* Handle PTR + OFFSET here.  */\n-  if (TREE_CODE (op1) == INTEGER_CST\n-      && (TREE_CODE (op0) == SSA_NAME\n-\t  || TREE_CODE (op0) == ADDR_EXPR))\n+  if (size_valid_p (op1, object_size_type)\n+      && (TREE_CODE (op0) == SSA_NAME || TREE_CODE (op0) == ADDR_EXPR))\n     {\n       if (TREE_CODE (op0) == SSA_NAME)\n \t{\n@@ -1358,6 +1352,10 @@ plus_stmt_object_size (struct object_size_info *osi, tree var, gimple *stmt)\n   else\n     bytes = wholesize = size_unknown (object_size_type);\n \n+  if (!size_valid_p (bytes, object_size_type)\n+      || !size_valid_p (wholesize, object_size_type))\n+    bytes = wholesize = size_unknown (object_size_type);\n+\n   if (object_sizes_set (osi, varno, bytes, wholesize))\n     osi->changed = true;\n   return reexamine;"}]}