{"sha": "edf501302358716842d8f5fb99a2849da03d384d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRmNTAxMzAyMzU4NzE2ODQyZDhmNWZiOTlhMjg0OWRhMDNkMzg0ZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-09-04T02:34:10Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-09-04T02:34:10Z"}, "message": "cast-qual-1.c: Add missing dg-bogus tag.\n\n1999-09-03 19:31 -0700  Zack Weinberg  <zack@bitmover.com>\n\n\t* gcc.dg/cast-qual-1.c: Add missing dg-bogus tag.\n\t* gcc.dg/compare1.c: Fix typo.\n\t* gcc-dg/cpp-unc.c, cpp-unc1.c, cpp-unc2.c, cpp-unc3.c: New\n\tfiles which test the preprocessor's unterminated conditional\n\tdiagnostics.\n\nFrom-SVN: r29097", "tree": {"sha": "326bceebef801f4cd6d4a1156ea4dc1fa7755572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/326bceebef801f4cd6d4a1156ea4dc1fa7755572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edf501302358716842d8f5fb99a2849da03d384d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf501302358716842d8f5fb99a2849da03d384d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf501302358716842d8f5fb99a2849da03d384d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf501302358716842d8f5fb99a2849da03d384d/comments", "author": null, "committer": null, "parents": [{"sha": "99dccabc3ce6ab4859abe72c0fce799b3a6be995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99dccabc3ce6ab4859abe72c0fce799b3a6be995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99dccabc3ce6ab4859abe72c0fce799b3a6be995"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "464fd45119d53c3e75d58c98506e5b49ec4ab053", "filename": "gcc/testsuite/gcc.dg/cast-qual-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-1.c?ref=edf501302358716842d8f5fb99a2849da03d384d", "patch": "@@ -20,7 +20,7 @@ bad_cast(const void *bar)\n void\n good_assign(const void *bar)\n {\n-  char *const *foo = bar;\n+  char *const *foo = bar; /* { dg-bogus \"initialization discards\" \"discarding `const' warning\" } */\n }\n \n void"}, {"sha": "3be9d95baf055bbc28f5a268fe768095fa596f5c", "filename": "gcc/testsuite/gcc.dg/compare1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare1.c?ref=edf501302358716842d8f5fb99a2849da03d384d", "patch": "@@ -22,5 +22,5 @@ int main()\n {\n   enum machine_mode mode = DImode;\n \n-  return (mode == Pmode); /* dg-bogus \"warning:\" \"comparison between signed and unsigned\" } */\n+  return (mode == Pmode); /* { dg-bogus \"warning:\" \"comparison between signed and unsigned\" } */\n }"}, {"sha": "4daddf65e64b6901783798db39dae4b92c9d1cb5", "filename": "gcc/testsuite/gcc.dg/cpp-unc.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc.c?ref=edf501302358716842d8f5fb99a2849da03d384d", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do preprocess } */\n+\n+/* Tests for un-terminated conditional diagnostics.\n+   Copyright (c) 1999 Free Software Foundation.\n+   Contributed by Zack Weinberg, who made it up all by himself.  */\n+\n+#endif /* { dg-error \"#endif\" \"#endif without #if\" } */\n+\n+#else  /* { dg-error \"#else\" \"#else without #if\" } */\n+#endif /* { dg-error \"#endif\" \"#endif after #else without #if\" } */\n+\n+#elif 0 /* { dg-error \"#elif\" \"#elif without #if\" } */\n+#endif  /* { dg-error \"#endif\" \"#endif after #else without #if\" } */\n+\n+#if 1  /* { dg-bogus \"unterminated\" \"terminated true conditional\" } */\n+blah\n+#endif\n+\n+#if 0  /* { dg-bogus \"unterminated\" \"terminated false conditional\" } */\n+ignored\n+#endif\n+\n+/* We shouldn't see unbalanced conditionals inside #if'ed out #includes.  */\n+#if 0\n+#include \"cpp-unc1.c\"\n+#endif\n+\n+/* The ifdef below should not get an error just because there's a bad if\n+   inside the included file.  \n+   The odd dg-error tag on the include matches the \"In file included from\"\n+   message.  */\n+#define FOO\n+#ifdef FOO  /* { dg-bogus \"unterminated\" \"nested unterm\" } */\n+#include \"cpp-unc1.c\"  /* { dg-error \"\" } */\n+#endif\n+\n+/* dg.exp doesn't read the included files for tags, so we have to\n+   do them explicitly here.  */\n+/* { dg-error \"#if\" \"unc1.h: unterminated #if\" { target native } 3 } */"}, {"sha": "5059ae667604c840b4c9e2bf51330e202933822f", "filename": "gcc/testsuite/gcc.dg/cpp-unc1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc1.c?ref=edf501302358716842d8f5fb99a2849da03d384d", "patch": "@@ -0,0 +1,13 @@\n+/* Tests for un-terminated conditionals: 1.  */\n+\n+#if 1  /* { dg-error \"unterminated\" \"unterminated #if\" } */\n+\n+#ifdef notdef /* { dg-bogus \"unterminated\" \"nested terminated #ifdef\" } */\n+\n+blah blah blah\n+\n+#endif\n+\n+more text\n+\n+/* oops! */"}, {"sha": "d9e39591570c20dc03a76151af1e257121e1a8eb", "filename": "gcc/testsuite/gcc.dg/cpp-unc2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc2.c?ref=edf501302358716842d8f5fb99a2849da03d384d", "patch": "@@ -0,0 +1,11 @@\n+/* Tests for unterminated conditionals: 2.  */\n+\n+#ifdef __sparc__  /* { dg-error \"unterminated\" \"unterminated if-elif-elif...\" } */\n+sparc\n+#elif defined __powerpc__\n+ppc\n+#elif defined __i386__\n+i386\n+#elif defined __vax__\n+vax\n+"}, {"sha": "9a16bb311550f6e541d13b2413bda0a2bcb29f05", "filename": "gcc/testsuite/gcc.dg/cpp-unc3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf501302358716842d8f5fb99a2849da03d384d/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unc3.c?ref=edf501302358716842d8f5fb99a2849da03d384d", "patch": "@@ -0,0 +1,4 @@\n+/* Tests for unterminated conditionals: 3.  */\n+\n+#if 1  /* { dg-error \"#else\" \"unterminated #else\" } */\n+#else"}]}