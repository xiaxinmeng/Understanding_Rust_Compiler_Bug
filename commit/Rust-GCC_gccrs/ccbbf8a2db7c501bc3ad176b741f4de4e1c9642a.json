{"sha": "ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NiYmY4YTJkYjdjNTAxYmMzYWQxNzZiNzQxZjRkZTRlMWM5NjQyYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-05-16T22:24:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-05-16T22:24:26Z"}, "message": "cgraph.c (dump_cgraph_node): Dump versionable flag.\n\n\t* cgraph.c (dump_cgraph_node): Dump versionable flag.\n\t* cgraph.h (cgraph_local_info): Add versionable flag.\n\t* ipa-cp.c (ipcp_analyze_node): Set versionable flag.\n\t(ipcp_versionable_function_p): Use it.\n\t* lto-cgraph.c (lto_output_node, input_overwrite_node): Stream\n\tversionable flag.\n\nFrom-SVN: r159467", "tree": {"sha": "4771f6f7459bb79d821387c1cdb37bd5ee699b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4771f6f7459bb79d821387c1cdb37bd5ee699b11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/comments", "author": null, "committer": null, "parents": [{"sha": "91fbf0c7c60930152acf7ec888ffa08383a20453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91fbf0c7c60930152acf7ec888ffa08383a20453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91fbf0c7c60930152acf7ec888ffa08383a20453"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "cfb3a7f1a733cc1c1cd78209c3bef28390a309df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a", "patch": "@@ -1,3 +1,12 @@\n+2010-05-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (dump_cgraph_node): Dump versionable flag.\n+\t* cgraph.h (cgraph_local_info): Add versionable flag.\n+\t* ipa-cp.c (ipcp_analyze_node): Set versionable flag.\n+\t(ipcp_versionable_function_p): Use it.\n+\t* lto-cgraph.c (lto_output_node, input_overwrite_node): Stream\n+\tversionable flag.\n+\n 2010-05-16  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_clone_node): Take decl argument and insert\n@@ -7,7 +16,8 @@\n \t* lto-cgrpah.c (lto_cgraph_encoder_new): Create body map.\n \t(lto_cgraph_encoder_delete): Delete body map.\n \t(lto_cgraph_encoder_size): Move to header.\n-\t(lto_cgraph_encoder_encode_body_p, lto_set_cgraph_encoder_encode_body): New.\n+\t(lto_cgraph_encoder_encode_body_p,\n+\tlto_set_cgraph_encoder_encode_body): New.\n \t(lto_output_node): Do not take written_decls argument; output clone_of\n \tpointer.\n \t(add_node_to): Add include_body_argument; call"}, {"sha": "29a1b3657372c2a86cd3a10c74811cb0f67d2f4e", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a", "patch": "@@ -1830,6 +1830,8 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n     fprintf (f, \" always_inline\");\n   else if (node->local.inlinable)\n     fprintf (f, \" inlinable\");\n+  else if (node->local.versionable)\n+    fprintf (f, \" versionable\");\n   if (node->local.redefined_extern_inline)\n     fprintf (f, \" redefined_extern_inline\");\n   if (TREE_ASM_WRITTEN (node->decl))\n@@ -2046,6 +2048,8 @@ cgraph_clone_edge (struct cgraph_edge *e, struct cgraph_node *n,\n \n /* Create node representing clone of N executed COUNT times.  Decrease\n    the execution counts from original node too.\n+   The new clone will have decl set to DECL that may or may not be the same\n+   as decl of N.\n \n    When UPDATE_ORIGINAL is true, the counts are subtracted from the original\n    function's profile to reflect the fact that part of execution is handled"}, {"sha": "f8d8e6e8291a868743c3432911812cdfdc1e30a8", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a", "patch": "@@ -105,6 +105,10 @@ struct GTY(()) cgraph_local_info {\n   /* False when there something makes inlining impossible (such as va_arg).  */\n   unsigned inlinable : 1;\n \n+  /* False when there something makes versioning impossible.\n+     Currently computed and used only by ipa-cp.  */\n+  unsigned versionable : 1;\n+\n   /* True when function should be inlined independently on its size.  */\n   unsigned disregard_inline_limits : 1;\n "}, {"sha": "88a5b4fffc63b7d2b76e332045372ef97c16a390", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a", "patch": "@@ -183,6 +183,7 @@ ipcp_analyze_node (struct cgraph_node *node)\n   /* Unreachable nodes should have been eliminated before ipcp.  */\n   gcc_assert (node->needed || node->reachable);\n \n+  node->local.versionable = tree_versionable_function_p (node->decl);\n   ipa_initialize_node_params (node);\n   ipa_detect_param_modifications (node);\n }\n@@ -419,7 +420,7 @@ ipcp_versionable_function_p (struct cgraph_node *node)\n   basic_block bb;\n \n   /* There are a number of generic reasons functions cannot be versioned.  */\n-  if (!tree_versionable_function_p (decl))\n+  if (!node->local.versionable)\n     return false;\n \n   /* Removing arguments doesn't work if the function takes varargs.  */"}, {"sha": "48e834e566a360d7eacba8fdb8c82c0af89d5f29", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=ccbbf8a2db7c501bc3ad176b741f4de4e1c9642a", "patch": "@@ -468,6 +468,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   bp_pack_value (bp, node->local.externally_visible, 1);\n   bp_pack_value (bp, node->local.finalized, 1);\n   bp_pack_value (bp, node->local.inlinable, 1);\n+  bp_pack_value (bp, node->local.versionable, 1);\n   bp_pack_value (bp, node->local.disregard_inline_limits, 1);\n   bp_pack_value (bp, node->local.redefined_extern_inline, 1);\n   bp_pack_value (bp, node->local.vtable_method, 1);\n@@ -921,6 +922,7 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->local.externally_visible = bp_unpack_value (bp, 1);\n   node->local.finalized = bp_unpack_value (bp, 1);\n   node->local.inlinable = bp_unpack_value (bp, 1);\n+  node->local.versionable = bp_unpack_value (bp, 1);\n   node->local.disregard_inline_limits = bp_unpack_value (bp, 1);\n   node->local.redefined_extern_inline = bp_unpack_value (bp, 1);\n   node->local.vtable_method = bp_unpack_value (bp, 1);"}]}