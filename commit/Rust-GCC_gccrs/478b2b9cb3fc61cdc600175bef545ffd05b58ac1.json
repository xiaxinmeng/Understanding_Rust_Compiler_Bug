{"sha": "478b2b9cb3fc61cdc600175bef545ffd05b58ac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc4YjJiOWNiM2ZjNjFjZGM2MDAxNzViZWY1NDVmZmQwNWI1OGFjMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-17T00:32:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-17T00:32:29Z"}, "message": "stl_algobase.h (struct __lexicographical_compare): Move to namespace std.\n\n2007-11-16  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h (struct __lexicographical_compare):\n\tMove to namespace std.\n\t(__lexicographical_compare_aux<>(_II1, _II1, _II2, _II2)): Add.\n\t(lexicographical_compare<>(_II1, _II1, _II2, _II2)): Call the latter.\n\nFrom-SVN: r130254", "tree": {"sha": "7ce124adf3423071e7a9522e99ff52570e5feede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ce124adf3423071e7a9522e99ff52570e5feede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/478b2b9cb3fc61cdc600175bef545ffd05b58ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478b2b9cb3fc61cdc600175bef545ffd05b58ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/478b2b9cb3fc61cdc600175bef545ffd05b58ac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478b2b9cb3fc61cdc600175bef545ffd05b58ac1/comments", "author": null, "committer": null, "parents": [{"sha": "ca0395de2ab4fab321f56d45192ea51a443b5242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0395de2ab4fab321f56d45192ea51a443b5242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca0395de2ab4fab321f56d45192ea51a443b5242"}], "stats": {"total": 123, "additions": 71, "deletions": 52}, "files": [{"sha": "bcf8f3720285a88425f6de381181dcffd61e01b6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478b2b9cb3fc61cdc600175bef545ffd05b58ac1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478b2b9cb3fc61cdc600175bef545ffd05b58ac1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=478b2b9cb3fc61cdc600175bef545ffd05b58ac1", "patch": "@@ -1,3 +1,10 @@\n+2007-11-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algobase.h (struct __lexicographical_compare):\n+\tMove to namespace std.\n+\t(__lexicographical_compare_aux<>(_II1, _II1, _II2, _II2)): Add.\n+\t(lexicographical_compare<>(_II1, _II1, _II2, _II2)): Call the latter.\n+\n 2007-11-16  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algobase.h (struct __lexicographical_compare): Add."}, {"sha": "f9f3be15cacc711df538381c149f0f9721a630b3", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 64, "deletions": 52, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/478b2b9cb3fc61cdc600175bef545ffd05b58ac1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/478b2b9cb3fc61cdc600175bef545ffd05b58ac1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=478b2b9cb3fc61cdc600175bef545ffd05b58ac1", "patch": "@@ -815,6 +815,65 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         { return true; }\n     };\n \n+  template<bool _BoolType>\n+    struct __lexicographical_compare\n+    {\n+      template<typename _II1, typename _II2>\n+        static bool\n+        __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n+        {\n+\t  typedef typename iterator_traits<_II1>::iterator_category _Category1;\n+\t  typedef typename iterator_traits<_II2>::iterator_category _Category2;\n+\t  typedef std::__lc_rai<_Category1, _Category2> \t__rai_type;\n+\n+\t  __last1 = __rai_type::__newlast1(__first1, __last1,\n+\t\t\t\t\t   __first2, __last2);\n+\t  for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);\n+\t       ++__first1, ++__first2)\n+\t    {\n+\t      if (*__first1 < *__first2)\n+\t\treturn true;\n+\t      if (*__first2 < *__first1)\n+\t\treturn false;\n+\t    }\n+\t  return __first1 == __last1 && __first2 != __last2;\n+\t}\n+    };\n+\n+  template<>\n+    struct __lexicographical_compare<true>\n+    {\n+      template<typename _Tp, typename _Up>\n+        static bool\n+        __lc(const _Tp* __first1, const _Tp* __last1,\n+\t     const _Up* __first2, const _Up* __last2)\n+\t{\n+\t  const size_t __len1 = __last1 - __first1;\n+\t  const size_t __len2 = __last2 - __first2;\n+\t  const int __result = __builtin_memcmp(__first1, __first2,\n+\t\t\t\t\t\tstd::min(__len1, __len2));\n+\t  return __result != 0 ? __result < 0 : __len1 < __len2;\n+\t}\n+    };\n+\n+  template<typename _II1, typename _II2>\n+    inline bool\n+    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,\n+\t\t\t\t  _II2 __first2, _II2 __last2)\n+    {\n+      typedef typename iterator_traits<_II1>::value_type _ValueType1;\n+      typedef typename iterator_traits<_II2>::value_type _ValueType2;\n+      const bool __simple =\n+\t(__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value\n+\t && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed\n+\t && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed\n+\t && __is_pointer<_II1>::__value\n+\t && __is_pointer<_II2>::__value);\n+\n+      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,\n+\t\t\t\t\t\t\t    __first2, __last2);\n+    }\n+\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n@@ -877,48 +936,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       return true;\n     }\n \n-\n-  template<bool _BoolType>\n-    struct __lexicographical_compare\n-    {\n-      template<typename _II1, typename _II2>\n-        static bool\n-        __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n-        {\n-\t  typedef typename iterator_traits<_II1>::iterator_category _Category1;\n-\t  typedef typename iterator_traits<_II2>::iterator_category _Category2;\n-\t  typedef std::__lc_rai<_Category1, _Category2> \t__rai_type;\n-\n-\t  __last1 = __rai_type::__newlast1(__first1, __last1,\n-\t\t\t\t\t   __first2, __last2);\n-\t  for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);\n-\t       ++__first1, ++__first2)\n-\t    {\n-\t      if (*__first1 < *__first2)\n-\t\treturn true;\n-\t      if (*__first2 < *__first1)\n-\t\treturn false;\n-\t    }\n-\t  return __first1 == __last1 && __first2 != __last2;\n-\t}\n-    };\n-\n-  template<>\n-    struct __lexicographical_compare<true>\n-    {\n-      template<typename _Tp, typename _Up>\n-        static bool\n-        __lc(const _Tp* __first1, const _Tp* __last1,\n-\t     const _Up* __first2, const _Up* __last2)\n-\t{\n-\t  const size_t __len1 = __last1 - __first1;\n-\t  const size_t __len2 = __last2 - __first2;\n-\t  const int __result = __builtin_memcmp(__first1, __first2,\n-\t\t\t\t\t\tstd::min(__len1, __len2));\n-\t  return __result != 0 ? __result < 0 : __len1 < __len2;\n-\t}\n-    };\n-\n   /**\n    *  @brief Performs \"dictionary\" comparison on ranges.\n    *  @param  first1  An input iterator.\n@@ -948,15 +965,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n-      const bool __simple =\n-\t(__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value\n-\t && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed\n-\t && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed\n-\t && __is_pointer<_II1>::__value\n-\t && __is_pointer<_II2>::__value);\n-\n-      return _GLIBCXX_STD_P::__lexicographical_compare<__simple>::\n-\t__lc(__first1, __last1, __first2, __last2);\n+      return std::__lexicographical_compare_aux\n+\t(std::__niter_base<_II1>::__b(__first1),\n+\t std::__niter_base<_II1>::__b(__last1),\n+\t std::__niter_base<_II2>::__b(__first2),\n+\t std::__niter_base<_II2>::__b(__last2));\n     }\n \n   /**\n@@ -998,7 +1011,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       return __first1 == __last1 && __first2 != __last2;\n     }\n \n-\n   /**\n    *  @brief Finds the places in ranges which don't match.\n    *  @param  first1  An input iterator."}]}