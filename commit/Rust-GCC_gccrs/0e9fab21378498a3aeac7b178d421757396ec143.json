{"sha": "0e9fab21378498a3aeac7b178d421757396ec143", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU5ZmFiMjEzNzg0OThhM2FlYWM3YjE3OGQ0MjE3NTczOTZlYzE0Mw==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2005-04-06T15:06:04Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-04-06T15:06:04Z"}, "message": "Main.java (Fileset): New class.\n\n2005-04-05  Andrew Haley  <aph@redhat.com>\n\n        * gnu/gcj/tools/gcj_dbtool/Main.java (Fileset): New class.\n        (Tokenizer): New class.\n        (getFiles): New method.\n        (main): Add \"-\" argument.\n        Add \"-0\" argument.\n        Read list of files from stdin when merging map databases.\n        (usage):  Add \"-\" argument.\n        Add \"-0\" argument.\n        Minor corrections.\n\nFrom-SVN: r97719", "tree": {"sha": "6eb178a184c82235aa0230c96d22f93413de548a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb178a184c82235aa0230c96d22f93413de548a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e9fab21378498a3aeac7b178d421757396ec143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9fab21378498a3aeac7b178d421757396ec143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9fab21378498a3aeac7b178d421757396ec143", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9fab21378498a3aeac7b178d421757396ec143/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1b259d59eba8cec9424e55751035117cfbde8a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b259d59eba8cec9424e55751035117cfbde8a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b259d59eba8cec9424e55751035117cfbde8a9"}], "stats": {"total": 178, "additions": 158, "deletions": 20}, "files": [{"sha": "f38aac5a52e437949cff0d823e155880d224b51a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9fab21378498a3aeac7b178d421757396ec143/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9fab21378498a3aeac7b178d421757396ec143/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0e9fab21378498a3aeac7b178d421757396ec143", "patch": "@@ -1,3 +1,15 @@\n+2005-04-05  Andrew Haley  <aph@redhat.com>\n+\n+\t* gnu/gcj/tools/gcj_dbtool/Main.java (Fileset): New class.\n+\t(Tokenizer): New class.\n+\t(getFiles): New method.\n+\t(main): Add \"-\" argument.\n+\tAdd \"-0\" argument.\n+\tRead list of files from stdin when merging map databases.\n+\t(usage):  Add \"-\" argument.\n+\tAdd \"-0\" argument.\n+\tMinor corrections.\n+\n 2005-04-05  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \tPR libgcj/20750"}, {"sha": "58e9720f5fb0af160d8198d20f4f1a21262bab6a", "filename": "libjava/gnu/gcj/tools/gcj_dbtool/Main.java", "status": "modified", "additions": 146, "deletions": 20, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9fab21378498a3aeac7b178d421757396ec143/libjava%2Fgnu%2Fgcj%2Ftools%2Fgcj_dbtool%2FMain.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9fab21378498a3aeac7b178d421757396ec143/libjava%2Fgnu%2Fgcj%2Ftools%2Fgcj_dbtool%2FMain.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Ftools%2Fgcj_dbtool%2FMain.java?ref=0e9fab21378498a3aeac7b178d421757396ec143", "patch": "@@ -22,7 +22,22 @@\n \n   public static void main (String[] s)\n   {\n+    boolean fileListFromStdin = false;\n+    char filenameSeparator = ' ';\n+\n     insist (s.length >= 1);\n+\n+    if (s[0].equals(\"-\") ||\n+\ts[0].equals(\"-0\"))\n+      {\n+\tif (s[0].equals(\"-0\"))\n+\t  filenameSeparator = (char)0;\n+\tfileListFromStdin = true;\n+\tString[] newArgs = new String[s.length - 1];\n+\tSystem.arraycopy(s, 1, newArgs, 0, s.length - 1);\n+\ts = newArgs;\n+      }\n+\n     if (s[0].equals(\"-v\") || s[0].equals(\"--version\"))\n       {\n \tinsist (s.length == 1);\n@@ -145,7 +160,8 @@ public static void main (String[] s)\n     if (s[0].equals(\"-m\"))\n       {\n \t// Merge databases.\n-\tinsist (s.length >= 3);\n+\tinsist (s.length >= 3\n+\t\t|| fileListFromStdin && s.length == 2);\n \ttry\n \t  {\n \t    File database = new File(s[1]);\n@@ -155,24 +171,32 @@ public static void main (String[] s)\n \t    \t\n \t    int newSize = 0;\n \t    int newStringTableSize = 0;\n-\t    PersistentByteMap[] sourceMaps = new PersistentByteMap[s.length - 2];\n+\t    Fileset files = getFiles(s, 2, fileListFromStdin, \n+\t\t\t\t     filenameSeparator);\n+\t    PersistentByteMap[] sourceMaps \n+\t      = new PersistentByteMap[files.size()];\n+\n \t    // Scan all the input files, calculating worst case string\n \t    // table and hash table use.\n-\t    for (int i = 2; i < s.length; i++)\n-\t      {\n-\t\tPersistentByteMap b \n-\t\t  = new PersistentByteMap(new File(s[i]),\n-\t\t\t\t\t  PersistentByteMap.AccessMode.READ_ONLY);\n-\t\tnewSize += b.size();\n-\t\tnewStringTableSize += b.stringTableSize();\n-\t\tsourceMaps[i - 2] = b;\n-\t      }\n+\t    {\n+\t      Iterator it = files.iterator();\n+\t      int i = 0;\n+\t      while (it.hasNext())\n+\t\t{\n+\t\t  PersistentByteMap b \n+\t\t    = new PersistentByteMap((File)it.next(),\n+\t\t\t\t\t    PersistentByteMap.AccessMode.READ_ONLY);\n+\t\t  newSize += b.size();\n+\t\t  newStringTableSize += b.stringTableSize();\n+\t\t  sourceMaps[i++] = b;\n+\t\t}\n+\t    }\n \t    \n \t    newSize *= 1.5; // Scaling the new size by 1.5 results in\n \t\t\t    // fewer collisions.\n \t    PersistentByteMap map \n \t      = PersistentByteMap.emptyPersistentByteMap\n-\t        (temp, newSize, newStringTableSize);\n+\t      (temp, newSize, newStringTableSize);\n \n \t    for (int i = 0; i < sourceMaps.length; i++)\n \t      {\n@@ -296,16 +320,19 @@ private static void usage(PrintStream out)\n        + \"  Usage: \\n\"\n        + \"    gcj-dbtool -n file.gcjdb [size]     - Create a new gcj map database\\n\"\n        + \"    gcj-dbtool -a file.gcjdb file.jar file.so\\n\"\n-       + \"            - Add the contents of file.jar to a new gcj map database\\n\"\n+       + \"            - Add the contents of file.jar to a gcj map database\\n\"\n        + \"    gcj-dbtool -f file.gcjdb file.jar file.so\\n\"\n-       + \"            - Add the contents of file.jar to a new gcj map database\\n\"\n+       + \"            - Add the contents of file.jar to a gcj map database\\n\"\n        + \"    gcj-dbtool -t file.gcjdb            - Test a gcj map database\\n\"\n        + \"    gcj-dbtool -l file.gcjdb            - List a gcj map database\\n\"\n-       + \"    gcj-dbtool -m dest.gcjdb [source.gcjdb]...\\n\"\n-       + \"             - Merge gcj map databases into dest\\n\"\n-       + \"               Replaces dest\\n\"\n-       + \"               To add to dest, include dest in the list of sources\\n\"\n-       + \"    gcj-dbtool -p [LIBDIR]              - Print default database name\");\n+       + \"    gcj-dbtool [-][-0] -m dest.gcjdb [source.gcjdb]...\\n\"\n+       + \"            - Merge gcj map databases into dest\\n\"\n+       + \"              Replaces dest\\n\"\n+       + \"              To add to dest, include dest in the list of sources\\n\"\n+       + \"              If the first arg is -, read the list from stdin\\n\"\n+       + \"              If the first arg is -0, filenames separated by nul\\n\"\n+       + \"    gcj-dbtool -p [LIBDIR]              - Print default database name\"\n+       );\n   }\n \n   // Add a jar to a map.  This copies the map first and returns a\n@@ -405,5 +432,104 @@ static String bytesToString(byte[] b)\n       hexBytes.append(Integer.toHexString(b[i] & 0xff));\n     return hexBytes.toString();\n   }\n+\n+\n+  // Return a Fileset, either from a String array or from System.in,\n+  // depending on fileListFromStdin.\n+  private static final Fileset getFiles(String[] s, int startPos,\n+\t\t\t\t\tboolean fileListFromStdin,\n+\t\t\t\t\tchar separator)\n+  {\n+    if (fileListFromStdin)\n+      return new Fileset(System.in, separator);\n+    else\n+      return new Fileset(s, startPos, s.length);\n+  }\n+}\n+\n+// Parse a stream into tokens.  The separator can be any char, and\n+// space is equivalent to any whitepace character.\n+class Tokenizer\n+{\n+  final Reader r;\n+  final char separator;\n+\n+  Tokenizer(Reader r, char separator)\n+  {\n+    this.r = r;\n+    this.separator = separator;\n+  }\n+\n+  boolean isSeparator(int c)\n+  {\n+    if (Character.isWhitespace(separator))\n+      return Character.isWhitespace((char)c);\n+    else\n+      return c == separator;\n+  }\n+\n+  // Parse a token from the input stream.  Return the empty string\n+  // when the stream is exhausted.\n+  String nextToken ()\n+  {\n+    StringBuffer buf = new StringBuffer();\n+    int c;\n+    try\n+      {\n+\twhile ((c = r.read()) != -1)\n+\t  {\n+\t    if (! isSeparator(c))\n+\t      {\n+\t\tbuf.append((char)c);\n+\t\tbreak;\n+\t      }\n+\t  }\n+\twhile ((c = r.read()) != -1)\n+\t  {\n+\t    if (isSeparator(c))\n+\t      break;\n+\t    else\n+\t      buf.append((char)c);\n+\t  }\n+      }\n+    catch (java.io.IOException e)\n+      {\n+      }\n+    return buf.toString();\n+  }\n+}\n+\n+// A Fileset is a container for a set of files; it can be created\n+// either from a string array or from an input stream, given a\n+// separator character.\n+class Fileset\n+{\n+  LinkedHashSet files = new LinkedHashSet();\n+  \n+  Fileset (String[] s, int start, int end)\n+  {\n+    for (int i = start; i < end; i++)\n+      {\n+\tfiles.add(new File(s[i]));\n+      }\n+  }\n+\n+  Fileset (InputStream is, char separator)\n+  {\n+    Reader r = new BufferedReader(new InputStreamReader(is));\n+    Tokenizer st = new Tokenizer(r, separator);\n+    String name;\n+    while (! \"\".equals(name = st.nextToken()))\n+      files.add(new File(name));\n+  }\n+\n+  Iterator iterator()\n+  {\n+    return files.iterator();\n+  }\n+\n+  int size()\n+  {\n+    return files.size();\n+  }\n }\n-    "}]}