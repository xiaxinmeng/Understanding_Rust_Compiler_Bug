{"sha": "e0d4c0b3e5dd120db562995f8d3ba99885012c73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkNGMwYjNlNWRkMTIwZGI1NjI5OTVmOGQzYmE5OTg4NTAxMmM3Mw==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2010-09-08T03:38:40Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2010-09-08T03:38:40Z"}, "message": "re PR other/45587 (the processor(s) that read the .texi files mess up.)\n\n2010-09-08  Kenneth Zadeck <zadeck@naturalbridge.com>\n\tPR doc/45587\n\t* doc/md.texi: Fixed modes on several standard pattern names.\n\nFrom-SVN: r163987", "tree": {"sha": "500bf176ef004220a2d37019c0a2f42a1e84240d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/500bf176ef004220a2d37019c0a2f42a1e84240d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d4c0b3e5dd120db562995f8d3ba99885012c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d4c0b3e5dd120db562995f8d3ba99885012c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d4c0b3e5dd120db562995f8d3ba99885012c73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d4c0b3e5dd120db562995f8d3ba99885012c73/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59bdeecb0b6f482ca57b90faec9872f92a4d9a7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59bdeecb0b6f482ca57b90faec9872f92a4d9a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59bdeecb0b6f482ca57b90faec9872f92a4d9a7d"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "5fe7ded8f15275ebdb281ae5965277c279a48434", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d4c0b3e5dd120db562995f8d3ba99885012c73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d4c0b3e5dd120db562995f8d3ba99885012c73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0d4c0b3e5dd120db562995f8d3ba99885012c73", "patch": "@@ -1,3 +1,7 @@\n+2010-09-08  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\tPR doc/45587\n+\t* doc/md.texi: Fixed modes on several standard pattern names.\n+\n 2010-09-08  Mingjie Xing  <mingjie.xing@gmail.com>\n \n \t* config/mips/loongson.md (loongson_psll<V_suffix>): Rename to..."}, {"sha": "1ca22203dbfe8ef207434b43dce7457d09f9311b", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d4c0b3e5dd120db562995f8d3ba99885012c73/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d4c0b3e5dd120db562995f8d3ba99885012c73/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e0d4c0b3e5dd120db562995f8d3ba99885012c73", "patch": "@@ -4370,19 +4370,19 @@ point mode @var{n} as a signed number according to the current\n rounding mode and store in operand 0 (which has mode @var{n}).\n \n @cindex @code{lround@var{m}@var{n}2}\n-@item @samp{lround@var{m}2}\n+@item @samp{lround@var{m}@var{n}2}\n Convert operand 1 (valid for floating point mode @var{m}) to fixed\n point mode @var{n} as a signed number rounding to nearest and away\n from zero and store in operand 0 (which has mode @var{n}).\n \n @cindex @code{lfloor@var{m}@var{n}2}\n-@item @samp{lfloor@var{m}2}\n+@item @samp{lfloor@var{m}@var{n}2}\n Convert operand 1 (valid for floating point mode @var{m}) to fixed\n point mode @var{n} as a signed number rounding down and store in\n operand 0 (which has mode @var{n}).\n \n @cindex @code{lceil@var{m}@var{n}2}\n-@item @samp{lceil@var{m}2}\n+@item @samp{lceil@var{m}@var{n}2}\n Convert operand 1 (valid for floating point mode @var{m}) to fixed\n point mode @var{n} as a signed number rounding up and store in\n operand 0 (which has mode @var{n}).\n@@ -4561,19 +4561,19 @@ operand 2 is the character to search for (normally zero),\n and operand 3 is a constant describing the known alignment\n of the beginning of the string.\n \n-@cindex @code{float@var{mn}2} instruction pattern\n+@cindex @code{float@var{m}@var{n}2} instruction pattern\n @item @samp{float@var{m}@var{n}2}\n Convert signed integer operand 1 (valid for fixed point mode @var{m}) to\n floating point mode @var{n} and store in operand 0 (which has mode\n @var{n}).\n \n-@cindex @code{floatuns@var{mn}2} instruction pattern\n+@cindex @code{floatuns@var{m}@var{n}2} instruction pattern\n @item @samp{floatuns@var{m}@var{n}2}\n Convert unsigned integer operand 1 (valid for fixed point mode @var{m})\n to floating point mode @var{n} and store in operand 0 (which has mode\n @var{n}).\n \n-@cindex @code{fix@var{mn}2} instruction pattern\n+@cindex @code{fix@var{m}@var{n}2} instruction pattern\n @item @samp{fix@var{m}@var{n}2}\n Convert operand 1 (valid for floating point mode @var{m}) to fixed\n point mode @var{n} as a signed number and store in operand 0 (which\n@@ -4583,7 +4583,7 @@ the value of operand 1 is an integer.\n If the machine description defines this pattern, it also needs to\n define the @code{ftrunc} pattern.\n \n-@cindex @code{fixuns@var{mn}2} instruction pattern\n+@cindex @code{fixuns@var{m}@var{n}2} instruction pattern\n @item @samp{fixuns@var{m}@var{n}2}\n Convert operand 1 (valid for floating point mode @var{m}) to fixed\n point mode @var{n} as an unsigned number and store in operand 0 (which\n@@ -4596,35 +4596,35 @@ Convert operand 1 (valid for floating point mode @var{m}) to an\n integer value, still represented in floating point mode @var{m}, and\n store it in operand 0 (valid for floating point mode @var{m}).\n \n-@cindex @code{fix_trunc@var{mn}2} instruction pattern\n+@cindex @code{fix_trunc@var{m}@var{n}2} instruction pattern\n @item @samp{fix_trunc@var{m}@var{n}2}\n Like @samp{fix@var{m}@var{n}2} but works for any floating point value\n of mode @var{m} by converting the value to an integer.\n \n-@cindex @code{fixuns_trunc@var{mn}2} instruction pattern\n+@cindex @code{fixuns_trunc@var{m}@var{n}2} instruction pattern\n @item @samp{fixuns_trunc@var{m}@var{n}2}\n Like @samp{fixuns@var{m}@var{n}2} but works for any floating point\n value of mode @var{m} by converting the value to an integer.\n \n-@cindex @code{trunc@var{mn}2} instruction pattern\n+@cindex @code{trunc@var{m}@var{n}2} instruction pattern\n @item @samp{trunc@var{m}@var{n}2}\n Truncate operand 1 (valid for mode @var{m}) to mode @var{n} and\n store in operand 0 (which has mode @var{n}).  Both modes must be fixed\n point or both floating point.\n \n-@cindex @code{extend@var{mn}2} instruction pattern\n+@cindex @code{extend@var{m}@var{n}2} instruction pattern\n @item @samp{extend@var{m}@var{n}2}\n Sign-extend operand 1 (valid for mode @var{m}) to mode @var{n} and\n store in operand 0 (which has mode @var{n}).  Both modes must be fixed\n point or both floating point.\n \n-@cindex @code{zero_extend@var{mn}2} instruction pattern\n+@cindex @code{zero_extend@var{m}@var{n}2} instruction pattern\n @item @samp{zero_extend@var{m}@var{n}2}\n Zero-extend operand 1 (valid for mode @var{m}) to mode @var{n} and\n store in operand 0 (which has mode @var{n}).  Both modes must be fixed\n point.\n \n-@cindex @code{fract@var{mn}2} instruction pattern\n+@cindex @code{fract@var{m}@var{n}2} instruction pattern\n @item @samp{fract@var{m}@var{n}2}\n Convert operand 1 of mode @var{m} to mode @var{n} and store in\n operand 0 (which has mode @var{n}).  Mode @var{m} and mode @var{n}\n@@ -4633,7 +4633,7 @@ fixed-point to signed integer, floating-point to fixed-point,\n or fixed-point to floating-point.\n When overflows or underflows happen, the results are undefined.\n \n-@cindex @code{satfract@var{mn}2} instruction pattern\n+@cindex @code{satfract@var{m}@var{n}2} instruction pattern\n @item @samp{satfract@var{m}@var{n}2}\n Convert operand 1 of mode @var{m} to mode @var{n} and store in\n operand 0 (which has mode @var{n}).  Mode @var{m} and mode @var{n}\n@@ -4642,15 +4642,15 @@ or floating-point to fixed-point.\n When overflows or underflows happen, the instruction saturates the\n results to the maximum or the minimum.\n \n-@cindex @code{fractuns@var{mn}2} instruction pattern\n+@cindex @code{fractuns@var{m}@var{n}2} instruction pattern\n @item @samp{fractuns@var{m}@var{n}2}\n Convert operand 1 of mode @var{m} to mode @var{n} and store in\n operand 0 (which has mode @var{n}).  Mode @var{m} and mode @var{n}\n could be unsigned integer to fixed-point, or\n fixed-point to unsigned integer.\n When overflows or underflows happen, the results are undefined.\n \n-@cindex @code{satfractuns@var{mn}2} instruction pattern\n+@cindex @code{satfractuns@var{m}@var{n}2} instruction pattern\n @item @samp{satfractuns@var{m}@var{n}2}\n Convert unsigned integer operand 1 of mode @var{m} to fixed-point mode\n @var{n} and store in operand 0 (which has mode @var{n})."}]}