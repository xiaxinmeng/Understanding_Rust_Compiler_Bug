{"sha": "be1e06df3529510b772562d8e1431f6ad06c6032", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxZTA2ZGYzNTI5NTEwYjc3MjU2MmQ4ZTE0MzFmNmFkMDZjNjAzMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-06-01T10:38:58Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-06-01T10:38:58Z"}, "message": "h8300-protos.h: Add a prototype for h8300_shift_needs_scratch_p.\n\n\t* config/h8300/h8300-protos.h: Add a prototype for\n\th8300_shift_needs_scratch_p.\n\t* config/h8300/h8300.c (h8300_shift_needs_scratch_p): New.\n\t* config/h8300/h8300.h (OK_FOR_R): New.\n\t(OK_FOR_S): Likewise.\n\t(OK_FOR_T): Likewise.\n\t(EXTRA_CONSTRAINT): Call OK_FOR_R, OK_FOR_S, and OK_FOR_T.\n\t* config/h8300/h8300.md (anonymous shift patterns): Use\n\tconstraints R, S, and T.\n\nFrom-SVN: r54143", "tree": {"sha": "47987182d6c74d206e1e47074caa0553e2ab6ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47987182d6c74d206e1e47074caa0553e2ab6ef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be1e06df3529510b772562d8e1431f6ad06c6032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1e06df3529510b772562d8e1431f6ad06c6032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1e06df3529510b772562d8e1431f6ad06c6032", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1e06df3529510b772562d8e1431f6ad06c6032/comments", "author": null, "committer": null, "parents": [{"sha": "2ecfd709c24bcc376504af4317552e7e492c6702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ecfd709c24bcc376504af4317552e7e492c6702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ecfd709c24bcc376504af4317552e7e492c6702"}], "stats": {"total": 91, "additions": 87, "deletions": 4}, "files": [{"sha": "fed41ea17df735346e4a33b58a7a0f615772dab6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1e06df3529510b772562d8e1431f6ad06c6032/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1e06df3529510b772562d8e1431f6ad06c6032/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be1e06df3529510b772562d8e1431f6ad06c6032", "patch": "@@ -1,3 +1,15 @@\n+2002-06-01  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Add a prototype for\n+\th8300_shift_needs_scratch_p.\n+\t* config/h8300/h8300.c (h8300_shift_needs_scratch_p): New.\n+\t* config/h8300/h8300.h (OK_FOR_R): New.\n+\t(OK_FOR_S): Likewise.\n+\t(OK_FOR_T): Likewise.\n+\t(EXTRA_CONSTRAINT): Call OK_FOR_R, OK_FOR_S, and OK_FOR_T.\n+\t* config/h8300/h8300.md (anonymous shift patterns): Use\n+\tconstraints R, S, and T.\n+\n Sat Jun  1 11:23:22 CEST 2002  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* basic-block.h (struct basic_block_def): New field loop_father."}, {"sha": "9637aeb5de1cbd4de93e72afafa07459baa70f60", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1e06df3529510b772562d8e1431f6ad06c6032/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1e06df3529510b772562d8e1431f6ad06c6032/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=be1e06df3529510b772562d8e1431f6ad06c6032", "patch": "@@ -41,6 +41,7 @@ extern unsigned int compute_logical_op_length PARAMS ((enum machine_mode,\n \t\t\t\t\t\t       rtx *));\n extern int compute_logical_op_cc PARAMS ((enum machine_mode, rtx *));\n extern int expand_a_shift PARAMS ((enum machine_mode, int, rtx[]));\n+extern int h8300_shift_needs_scratch_p PARAMS ((int, enum machine_mode));\n extern int expand_a_rotate PARAMS ((enum rtx_code, rtx[]));\n extern int fix_bit_operand PARAMS ((rtx *, int, enum rtx_code));\n extern int h8300_adjust_insn_length PARAMS ((rtx, int));"}, {"sha": "89918ab7c97d3756a795ccbec66190727da10b67", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1e06df3529510b772562d8e1431f6ad06c6032/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1e06df3529510b772562d8e1431f6ad06c6032/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=be1e06df3529510b772562d8e1431f6ad06c6032", "patch": "@@ -2694,6 +2694,58 @@ get_shift_alg (shift_type, shift_mode, count, info)\n     info->shift2 = NULL;\n }\n \n+/* Given COUNT and MODE of a shift, return 1 if a scratch reg may be\n+   needed for some shift with COUNT and MODE.  Return 0 otherwise.  */\n+\n+int\n+h8300_shift_needs_scratch_p (count, mode)\n+     int count;\n+     enum machine_mode mode;\n+{\n+  int cpu;\n+  int a, lr, ar;\n+\n+  if (GET_MODE_BITSIZE (mode) <= count)\n+    return 1;\n+\n+  /* Find out the target CPU.  */\n+  if (TARGET_H8300)\n+    cpu = 0;\n+  else if (TARGET_H8300H)\n+    cpu = 1;\n+  else\n+    cpu = 2;\n+\n+  /* Find the shift algorithm.  */\n+  switch (mode)\n+    {\n+    case QImode:\n+      a  = shift_alg_qi[cpu][SHIFT_ASHIFT][count];\n+      lr = shift_alg_qi[cpu][SHIFT_LSHIFTRT][count];\n+      ar = shift_alg_qi[cpu][SHIFT_ASHIFTRT][count];\n+      break;\n+\n+    case HImode:\n+      a  = shift_alg_hi[cpu][SHIFT_ASHIFT][count];\n+      lr = shift_alg_hi[cpu][SHIFT_LSHIFTRT][count];\n+      ar = shift_alg_hi[cpu][SHIFT_ASHIFTRT][count];\n+      break;\n+\n+    case SImode:\n+      a  = shift_alg_si[cpu][SHIFT_ASHIFT][count];\n+      lr = shift_alg_si[cpu][SHIFT_LSHIFTRT][count];\n+      ar = shift_alg_si[cpu][SHIFT_ASHIFTRT][count];\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+\n+  /* On H8/300H and H8/S, count == 8 uses the scratch register.  */\n+  return (a == SHIFT_LOOP || lr == SHIFT_LOOP || ar == SHIFT_LOOP\n+\t  || (!TARGET_H8300 && mode == SImode && count == 8));\n+}\n+\n /* Emit the assembler code for doing shifts.  */\n \n const char *"}, {"sha": "2bee304bbe8c43060cb1a9aab77b4f0155d2e989", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1e06df3529510b772562d8e1431f6ad06c6032/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1e06df3529510b772562d8e1431f6ad06c6032/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=be1e06df3529510b772562d8e1431f6ad06c6032", "patch": "@@ -803,6 +803,21 @@ struct cum_arg\n \n /* Extra constraints.  */\n \n+#define OK_FOR_R(OP)\t\t\t\t\t\\\n+  (GET_CODE (OP) == CONST_INT\t\t\t\t\\\n+   ? !h8300_shift_needs_scratch_p (INTVAL (OP), QImode)\t\\\n+   : 0)\n+\n+#define OK_FOR_S(OP)\t\t\t\t\t\\\n+  (GET_CODE (OP) == CONST_INT\t\t\t\t\\\n+   ? !h8300_shift_needs_scratch_p (INTVAL (OP), HImode)\t\\\n+   : 0)\n+\n+#define OK_FOR_T(OP)\t\t\t\t\t\\\n+  (GET_CODE (OP) == CONST_INT\t\t\t\t\\\n+   ? !h8300_shift_needs_scratch_p (INTVAL (OP), SImode)\t\\\n+   : 0)\n+\n /* Nonzero if X is a constant address suitable as an 8-bit absolute on\n    the H8/300H, which is a special case of the 'R' operand.  */\n \n@@ -840,7 +855,10 @@ struct cum_arg\n        && GET_CODE (XEXP (OP, 0)) == CONST_INT))\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\\\n-  ((C) == 'U' ? OK_FOR_U (OP) :\t\t\t\\\n+  ((C) == 'R' ? OK_FOR_R (OP) :\t\t\t\\\n+   (C) == 'S' ? OK_FOR_S (OP) :\t\t\t\\\n+   (C) == 'T' ? OK_FOR_T (OP) :\t\t\t\\\n+   (C) == 'U' ? OK_FOR_U (OP) :\t\t\t\\\n    0)\n \f\n /* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression"}, {"sha": "9aa47ce8f45ea9e2c72383f7805a9d3861c2da94", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1e06df3529510b772562d8e1431f6ad06c6032/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1e06df3529510b772562d8e1431f6ad06c6032/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=be1e06df3529510b772562d8e1431f6ad06c6032", "patch": "@@ -1754,7 +1754,7 @@\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:QI 3 \"nshift_operator\"\n \t\t\t[ (match_operand:QI 1 \"register_operand\" \"0,0\")\n-\t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"KM,rn\")]))\n+\t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")]))\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n   \"* return output_a_shift (operands);\"\n@@ -1789,7 +1789,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:HI 3 \"nshift_operator\"\n \t\t\t[ (match_operand:HI 1 \"register_operand\" \"0,0\")\n-\t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"KM,rn\")]))\n+\t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")]))\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n   \"* return output_a_shift (operands);\"\n@@ -1824,7 +1824,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:SI 3 \"nshift_operator\"\n \t\t\t[ (match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"K,rn\")]))\n+\t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")]))\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n   \"* return output_a_shift (operands);\""}]}