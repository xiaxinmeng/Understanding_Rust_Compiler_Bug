{"sha": "775afb2516d17b4a3c63ffe7be4d7144a75fb0a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc1YWZiMjUxNmQxN2I0YTNjNjNmZmU3YmU0ZDcxNDRhNzVmYjBhMQ==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "2000-04-10T07:48:15Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "2000-04-10T07:48:15Z"}, "message": "invoke.texi (-ansi): Remove -foperator-names from list of implied options.\n\n\t* invoke.texi (-ansi): Remove -foperator-names from list of\n\timplied options. Do not call it ANSI C++.\n\t(-foperator-names): Document as -fno-operator-names.\n\t* cp/decl2.c (flag_operator_names): Default to 1.\n\t(lang_decode_option): Do not set it for -ansi.\n\nFrom-SVN: r33051", "tree": {"sha": "f573924d989d6fd402fbc9289692dffbbe58a1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f573924d989d6fd402fbc9289692dffbbe58a1c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1/comments", "author": null, "committer": null, "parents": [{"sha": "62e3806d3ad0f1e429269a434d2cb3eaa58fb2d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e3806d3ad0f1e429269a434d2cb3eaa58fb2d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e3806d3ad0f1e429269a434d2cb3eaa58fb2d4"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "39c6402588bfea75b770eadfff26b2f81165a4b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=775afb2516d17b4a3c63ffe7be4d7144a75fb0a1", "patch": "@@ -2,6 +2,9 @@\n \n \t* invoke.texi (-fno-gnu-keywords): Remove classof, headof,\n \t__classof__, and __headof__ from the list of gnu keywords.\n+\t(-ansi): Remove -foperator-names from list of implied options. \n+\tDo not call it ANSI C++.\n+\t(-foperator-names): Document as -fno-operator-names.\n \n 2000-04-09  Zack Weinberg  <zack@wolery.cumb.org>\n "}, {"sha": "0d773d9b94e8f0cfe29f0f2c1ec0e80823c7ddbc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=775afb2516d17b4a3c63ffe7be4d7144a75fb0a1", "patch": "@@ -1,6 +1,8 @@\n 2000-04-10  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* lex.c (init_parse): Remove traces of classof and headof.\n+\t* decl2.c (flag_operator_names): Default to 1.\n+\t(lang_decode_option): Do not set it for -ansi.\n \n 2000-04-09  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "ad4431fb86ac5befff2eb44fce7cd42037f99936", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=775afb2516d17b4a3c63ffe7be4d7144a75fb0a1", "patch": "@@ -419,7 +419,7 @@ int flag_access_control = 1;\n \n /* Nonzero if we want to understand the operator names, i.e. 'bitand'.  */\n \n-int flag_operator_names;\n+int flag_operator_names = 1;\n \n /* Nonzero if we want to check the return value of new and avoid calling\n    constructors if it is a null pointer.  */\n@@ -789,7 +789,7 @@ lang_decode_option (argc, argv)\n     }\n   else if (!strcmp (p, \"-ansi\"))\n     flag_no_nonansi_builtin = 1, flag_ansi = 1,\n-    flag_no_gnu_keywords = 1, flag_operator_names = 1;\n+    flag_no_gnu_keywords = 1;\n #ifdef SPEW_DEBUG\n   /* Undocumented, only ever used when you're invoking cc1plus by hand, since\n      it's probably safe to assume no sane person would ever want to use this"}, {"sha": "36176167286ecf952d06b4203c1bb0f9cedb1a66", "filename": "gcc/invoke.texi", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775afb2516d17b4a3c63ffe7be4d7144a75fb0a1/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=775afb2516d17b4a3c63ffe7be4d7144a75fb0a1", "patch": "@@ -103,17 +103,17 @@ in the following sections.\n @item C++ Language Options\n @xref{C++ Dialect Options,,Options Controlling C++ Dialect}.\n @smallexample\n--fno-access-control  -fcheck-new  -fconserve-space  -fdollars-in-identifiers\n--fno-elide-constructors  -fexternal-templates  -ffor-scope  \n--fno-for-scope  -fno-gnu-keywords  -fguiding-decls\n--fhonor-std -fhuge-objects  -fno-implicit-templates  -finit-priority\n--fno-implement-inlines -fname-mangling-version-@var{n}  -fno-default-inline  \n--foperator-names  -fno-optional-diags  -fpermissive -frepo  -fstrict-prototype\n--fsquangle  -ftemplate-depth-@var{n} -fuse-cxa-atexit -fvtable-thunks\n--nostdinc++  -Wctor-dtor-privacy -Wno-deprecated -Weffc++  \n--Wno-non-template-friend \n--Wnon-virtual-dtor  -Wold-style-cast  -Woverloaded-virtual  \n--Wno-pmf-conversions  -Wreorder  -Wsign-promo  -Wsynth\n+-fno-access-control -fcheck-new -fconserve-space\n+-fdollars-in-identifiers -fno-elide-constructors -fexternal-templates\n+-ffor-scope -fno-for-scope -fno-gnu-keywords -fguiding-decls -fhonor-std\n+-fhuge-objects -fno-implicit-templates -finit-priority\n+-fno-implement-inlines -fname-mangling-version-@var{n}\n+-fno-default-inline -fno-operator-names -fno-optional-diags -fpermissive\n+-frepo -fstrict-prototype -fsquangle -ftemplate-depth-@var{n}\n+-fuse-cxa-atexit -fvtable-thunks -nostdinc++ -Wctor-dtor-privacy\n+-Wno-deprecated -Weffc++ -Wno-non-template-friend -Wnon-virtual-dtor\n+-Wold-style-cast -Woverloaded-virtual -Wno-pmf-conversions -Wreorder\n+-Wsign-promo -Wsynth\n @end smallexample\n \n @item Warning Options\n@@ -672,19 +672,17 @@ from C, such as C++ and Objective C) that the compiler accepts:\n @cindex ANSI support\n @item -ansi\n In C mode, support all ANSI standard C programs.  In C++ mode,\n-remove GNU extensions that conflict with ANSI C++.\n+remove GNU extensions that conflict with ISO C++.\n @c shouldn't we be saying \"ISO\"?\n \n This turns off certain features of GCC that are incompatible with ANSI\n-C (when compiling C code), or of ANSI standard C++ (when compiling C++ code),\n+C (when compiling C code), or of standard C++ (when compiling C++ code),\n such as the @code{asm} and @code{typeof} keywords, and\n predefined macros such as @code{unix} and @code{vax} that identify the\n type of system you are using.  It also enables the undesirable and\n rarely used ANSI trigraph feature.  For the C compiler, \n it disables recognition of C++ style @samp{//} comments as well as\n-the @code{inline} keyword.  For the C++ compiler,\n-@samp{-foperator-names} is enabled as well.\n-\n+the @code{inline} keyword.\n \n The alternate keywords @code{__asm__}, @code{__extension__},\n @code{__inline__} and @code{__typeof__} continue to work despite\n@@ -1180,11 +1178,10 @@ template <class T, class U> void foo(T t);\n Like all options that change the ABI, all C++ code, @emph{including\n libgcc} must be built with the same setting of this option.\n \n-@item -foperator-names\n-Recognize the operator name keywords @code{and}, @code{bitand},\n+@item -fno-operator-names\n+Do not treat the operator name keywords @code{and}, @code{bitand},\n @code{bitor}, @code{compl}, @code{not}, @code{or} and @code{xor} as\n-synonyms for the symbols they refer to.  @samp{-ansi} implies\n-@samp{-foperator-names}.\n+synonyms as keywords.\n \n @item -fno-optional-diags\n Disable diagnostics that the standard says a compiler does not need to"}]}