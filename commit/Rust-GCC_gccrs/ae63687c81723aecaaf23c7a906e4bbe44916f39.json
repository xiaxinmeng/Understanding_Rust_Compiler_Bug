{"sha": "ae63687c81723aecaaf23c7a906e4bbe44916f39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU2MzY4N2M4MTcyM2FlY2FhZjIzYzdhOTA2ZTRiYmU0NDkxNmYzOQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2009-05-15T14:22:58Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2009-05-15T14:22:58Z"}, "message": "real.c (encode_ieee_half): Define.\n\n2009-05-15  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* real.c (encode_ieee_half): Define.\n\t(decode_ieee_half): Define.\n\t(ieee_half_format): Define.\n\t(arm_half_format): Define.\n\t* real.h (ieee_half_format): Declare.\n\t(arm_half_format): Declare.\n\nFrom-SVN: r147579", "tree": {"sha": "defc8b4c498f81b113528376f579d4fe7297ed7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/defc8b4c498f81b113528376f579d4fe7297ed7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae63687c81723aecaaf23c7a906e4bbe44916f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae63687c81723aecaaf23c7a906e4bbe44916f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae63687c81723aecaaf23c7a906e4bbe44916f39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae63687c81723aecaaf23c7a906e4bbe44916f39/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1bd74ad9803518db3978dade5031dab2a481cc3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bd74ad9803518db3978dade5031dab2a481cc3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bd74ad9803518db3978dade5031dab2a481cc3a"}], "stats": {"total": 172, "additions": 172, "deletions": 0}, "files": [{"sha": "28823304600c1795f4fdaa838c0e149de4d24f64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae63687c81723aecaaf23c7a906e4bbe44916f39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae63687c81723aecaaf23c7a906e4bbe44916f39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae63687c81723aecaaf23c7a906e4bbe44916f39", "patch": "@@ -1,3 +1,12 @@\n+2009-05-15  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* real.c (encode_ieee_half): Define.\n+\t(decode_ieee_half): Define.\n+\t(ieee_half_format): Define.\n+\t(arm_half_format): Define.\n+\t* real.h (ieee_half_format): Declare.\n+\t(arm_half_format): Declare.\n+\n 2009-05-15  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* optabs.c (prepare_float_lib_cmp):  Test that the comparison,"}, {"sha": "f4c493bd041296c32b5e44ffd83586974e182430", "filename": "gcc/real.c", "status": "modified", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae63687c81723aecaaf23c7a906e4bbe44916f39/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae63687c81723aecaaf23c7a906e4bbe44916f39/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=ae63687c81723aecaaf23c7a906e4bbe44916f39", "patch": "@@ -4513,6 +4513,167 @@ const struct real_format decimal_quad_format =\n     false\n   };\n \f\n+/* Encode half-precision floats.  This routine is used both for the IEEE\n+   ARM alternative encodings.  */\n+static void\n+encode_ieee_half (const struct real_format *fmt, long *buf,\n+\t\t  const REAL_VALUE_TYPE *r)\n+{\n+  unsigned long image, sig, exp;\n+  unsigned long sign = r->sign;\n+  bool denormal = (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+\n+  image = sign << 15;\n+  sig = (r->sig[SIGSZ-1] >> (HOST_BITS_PER_LONG - 11)) & 0x3ff;\n+\n+  switch (r->cl)\n+    {\n+    case rvc_zero:\n+      break;\n+\n+    case rvc_inf:\n+      if (fmt->has_inf)\n+\timage |= 31 << 10;\n+      else\n+\timage |= 0x7fff;\n+      break;\n+\n+    case rvc_nan:\n+      if (fmt->has_nans)\n+\t{\n+\t  if (r->canonical)\n+\t    sig = (fmt->canonical_nan_lsbs_set ? (1 << 9) - 1 : 0);\n+\t  if (r->signalling == fmt->qnan_msb_set)\n+\t    sig &= ~(1 << 9);\n+\t  else\n+\t    sig |= 1 << 9;\n+\t  if (sig == 0)\n+\t    sig = 1 << 8;\n+\n+\t  image |= 31 << 10;\n+\t  image |= sig;\n+\t}\n+      else\n+\timage |= 0x3ff;\n+      break;\n+\n+    case rvc_normal:\n+      /* Recall that IEEE numbers are interpreted as 1.F x 2**exp,\n+\t whereas the intermediate representation is 0.F x 2**exp.\n+\t Which means we're off by one.  */\n+      if (denormal)\n+\texp = 0;\n+      else\n+\texp = REAL_EXP (r) + 15 - 1;\n+      image |= exp << 10;\n+      image |= sig;\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  buf[0] = image;\n+}\n+\n+/* Decode half-precision floats.  This routine is used both for the IEEE\n+   ARM alternative encodings.  */\n+static void\n+decode_ieee_half (const struct real_format *fmt, REAL_VALUE_TYPE *r,\n+\t\t  const long *buf)\n+{\n+  unsigned long image = buf[0] & 0xffff;\n+  bool sign = (image >> 15) & 1;\n+  int exp = (image >> 10) & 0x1f;\n+\n+  memset (r, 0, sizeof (*r));\n+  image <<= HOST_BITS_PER_LONG - 11;\n+  image &= ~SIG_MSB;\n+\n+  if (exp == 0)\n+    {\n+      if (image && fmt->has_denorm)\n+\t{\n+\t  r->cl = rvc_normal;\n+\t  r->sign = sign;\n+\t  SET_REAL_EXP (r, -14);\n+\t  r->sig[SIGSZ-1] = image << 1;\n+\t  normalize (r);\n+\t}\n+      else if (fmt->has_signed_zero)\n+\tr->sign = sign;\n+    }\n+  else if (exp == 31 && (fmt->has_nans || fmt->has_inf))\n+    {\n+      if (image)\n+\t{\n+\t  r->cl = rvc_nan;\n+\t  r->sign = sign;\n+\t  r->signalling = (((image >> (HOST_BITS_PER_LONG - 2)) & 1)\n+\t\t\t   ^ fmt->qnan_msb_set);\n+\t  r->sig[SIGSZ-1] = image;\n+\t}\n+      else\n+\t{\n+\t  r->cl = rvc_inf;\n+\t  r->sign = sign;\n+\t}\n+    }\n+  else\n+    {\n+      r->cl = rvc_normal;\n+      r->sign = sign;\n+      SET_REAL_EXP (r, exp - 15 + 1);\n+      r->sig[SIGSZ-1] = image | SIG_MSB;\n+    }\n+}\n+\n+/* Half-precision format, as specified in IEEE 754R.  */\n+const struct real_format ieee_half_format =\n+  {\n+    encode_ieee_half,\n+    decode_ieee_half,\n+    2,\n+    11,\n+    11,\n+    -13,\n+    16,\n+    15,\n+    15,\n+    false,\n+    true,\n+    true,\n+    true,\n+    true,\n+    true,\n+    true,\n+    false\n+  };\n+\n+/* ARM's alternative half-precision format, similar to IEEE but with\n+   no reserved exponent value for NaNs and infinities; rather, it just\n+   extends the range of exponents by one.  */\n+const struct real_format arm_half_format =\n+  {\n+    encode_ieee_half,\n+    decode_ieee_half,\n+    2,\n+    11,\n+    11,\n+    -13,\n+    17,\n+    15,\n+    15,\n+    false,\n+    true,\n+    false,\n+    false,\n+    true,\n+    true,\n+    false,\n+    false\n+  };\n+\f\n /* A synthetic \"format\" for internal arithmetic.  It's the size of the\n    internal significand minus the two bits needed for proper rounding.\n    The encode and decode routines exist only to satisfy our paranoia"}, {"sha": "834a24b71852016ca7d80f50c8d02685d01c50cd", "filename": "gcc/real.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae63687c81723aecaaf23c7a906e4bbe44916f39/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae63687c81723aecaaf23c7a906e4bbe44916f39/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=ae63687c81723aecaaf23c7a906e4bbe44916f39", "patch": "@@ -303,6 +303,8 @@ extern const struct real_format real_internal_format;\n extern const struct real_format decimal_single_format;\n extern const struct real_format decimal_double_format;\n extern const struct real_format decimal_quad_format;\n+extern const struct real_format ieee_half_format;\n+extern const struct real_format arm_half_format;\n \n \n /* ====================================================================== */"}]}