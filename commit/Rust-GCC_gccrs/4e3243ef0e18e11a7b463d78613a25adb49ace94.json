{"sha": "4e3243ef0e18e11a7b463d78613a25adb49ace94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUzMjQzZWYwZTE4ZTExYTdiNDYzZDc4NjEzYTI1YWRiNDlhY2U5NA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-02-13T07:02:12Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-13T07:02:12Z"}, "message": "GridBagConstraints.java (FIRST_LINE_ENT, [...]): New constants.\n\n2003-02-13  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/GridBagConstraints.java\n\t(FIRST_LINE_ENT, FIRST_LINE_START, LAST_LINE_END, LAST_LINE_START,\n\tLINE_END, LINE_START, PAGE_END, PAGE_START): New constants.\n\t* java/awt/KeyboardFocusManager.java\n\t(setGlobalCurrentFocusCycleRoot): Must be public.\n\t* java/awt/MenuComponent.java\n\t(MenuComponent): Must be public.\n\t* java/awt/Toolkit.java:\n\tAdded some empty lines to make documentation more readable.\n\t(getFontPeer): Added @deprecated.\n\t(getColorModel): Added exception documentation.\n\t(getProperty): Fixed documentation.\n\nFrom-SVN: r62822", "tree": {"sha": "b711d0bfe0257d0a89bbc44dd4461298544c21a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b711d0bfe0257d0a89bbc44dd4461298544c21a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e3243ef0e18e11a7b463d78613a25adb49ace94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3243ef0e18e11a7b463d78613a25adb49ace94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e3243ef0e18e11a7b463d78613a25adb49ace94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3243ef0e18e11a7b463d78613a25adb49ace94/comments", "author": null, "committer": null, "parents": [{"sha": "22ffcc6f9f1bffb267892948349c3cbf4bda2991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ffcc6f9f1bffb267892948349c3cbf4bda2991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ffcc6f9f1bffb267892948349c3cbf4bda2991"}], "stats": {"total": 94, "additions": 91, "deletions": 3}, "files": [{"sha": "3f31061468f2098a848f939893f8975742bf02f9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3243ef0e18e11a7b463d78613a25adb49ace94/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3243ef0e18e11a7b463d78613a25adb49ace94/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4e3243ef0e18e11a7b463d78613a25adb49ace94", "patch": "@@ -1,3 +1,18 @@\n+2003-02-13  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/GridBagConstraints.java\n+ \t(FIRST_LINE_ENT, FIRST_LINE_START, LAST_LINE_END, LAST_LINE_START,\n+ \tLINE_END, LINE_START, PAGE_END, PAGE_START): New constants.\n+ \t* java/awt/KeyboardFocusManager.java\n+ \t(setGlobalCurrentFocusCycleRoot): Must be public.\n+ \t* java/awt/MenuComponent.java\n+ \t(MenuComponent): Must be public.\n+ \t* java/awt/Toolkit.java:\n+ \tAdded some empty lines to make documentation more readable.\n+ \t(getFontPeer): Added @deprecated.\n+ \t(getColorModel): Added exception documentation.\n+ \t(getProperty): Fixed documentation.\n+ \n 2003-02-12  Jeff Sturm  <jsturm@one-point.com>\n \n \t* configure.host (alpha*-*): Default to -mieee."}, {"sha": "651cfdc199937561e9af950c97f199c3cf655737", "filename": "libjava/java/awt/GridBagConstraints.java", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3243ef0e18e11a7b463d78613a25adb49ace94/libjava%2Fjava%2Fawt%2FGridBagConstraints.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3243ef0e18e11a7b463d78613a25adb49ace94/libjava%2Fjava%2Fawt%2FGridBagConstraints.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGridBagConstraints.java?ref=4e3243ef0e18e11a7b463d78613a25adb49ace94", "patch": "@@ -80,6 +80,52 @@ public class GridBagConstraints implements Cloneable, Serializable\n   /** Occupy all remaining cells.  */\n   public static final int REMAINDER = 0;\n \n+  /**\n+   * Position to where the first text line would end. Equals to NORTHEAST for\n+   * horizontal left-to-right orientations.\n+   */\n+  public static final int FIRST_LINE_END = 24;\n+\n+  /**\n+   * Position to where the first text line would start. Equals to NORTHWEST for\n+   * horizontal left-to-right orientations.\n+   */\n+  public static final int FIRST_LINE_START = 23;\n+\n+  /**\n+   * Position to where the last text line would end. Equals to SOUTHEAST for\n+   * horizontal left-to-right orientations.\n+   */\n+  public static final int LAST_LINE_END = 26;\n+\n+  /**\n+   * Position to where the last text line would start. Equals to SOUTHWEST for\n+   * horizontal left-to-right orientations.\n+   */\n+  public static final int LAST_LINE_START = 25;\n+\n+  /**\n+   * Position to where a text line would end. Equals to EAST for\n+   * left-to-right orientations.\n+   */\n+  public static final int LINE_END = 22;\n+\n+  /**\n+   * Position to where a text line would start. Equals to WEST for\n+   * left-to-right orientations.\n+   */\n+  public static final int LINE_START = 21;\n+\n+  /**\n+   * Position to where a page ends. Equals SOUTH for horizontal orientations.\n+   */\n+  public static final int PAGE_END = 20;\n+\n+  /**\n+   * Position to where a page starts. Equals NORTH for horizontal orientations.\n+   */\n+  public static final int PAGE_START = 19;\n+\n   public int anchor;\n   public int fill;\n   public int gridheight;"}, {"sha": "867316ba84314a75be7b9eff6e6d43d9c987e343", "filename": "libjava/java/awt/KeyboardFocusManager.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3243ef0e18e11a7b463d78613a25adb49ace94/libjava%2Fjava%2Fawt%2FKeyboardFocusManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3243ef0e18e11a7b463d78613a25adb49ace94/libjava%2Fjava%2Fawt%2FKeyboardFocusManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FKeyboardFocusManager.java?ref=4e3243ef0e18e11a7b463d78613a25adb49ace94", "patch": "@@ -386,7 +386,7 @@ protected Container getGlobalCurrentFocusCycleRoot()\n     return focusCycleRoot;\n   }\n \n-  protected void setGlobalCurrentFocusCycleRoot(Container cycleRoot)\n+  public void setGlobalCurrentFocusCycleRoot(Container cycleRoot)\n   {\n     firePropertyChange(\"currentFocusCycleRoot\", focusCycleRoot, cycleRoot);\n     focusCycleRoot = cycleRoot;"}, {"sha": "09c25c9d1af59f64995b4529080349381bd1dfc3", "filename": "libjava/java/awt/MenuComponent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3243ef0e18e11a7b463d78613a25adb49ace94/libjava%2Fjava%2Fawt%2FMenuComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3243ef0e18e11a7b463d78613a25adb49ace94/libjava%2Fjava%2Fawt%2FMenuComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuComponent.java?ref=4e3243ef0e18e11a7b463d78613a25adb49ace94", "patch": "@@ -95,7 +95,7 @@ public abstract class MenuComponent implements java.io.Serializable\n   *\n   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n-protected\n+public\n MenuComponent()\n {\n   if (GraphicsEnvironment.isHeadless())"}, {"sha": "7fc3ac0e1640c18420d8f339e8acc692dbd7afa4", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3243ef0e18e11a7b463d78613a25adb49ace94/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3243ef0e18e11a7b463d78613a25adb49ace94/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=4e3243ef0e18e11a7b463d78613a25adb49ace94", "patch": "@@ -134,6 +134,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>TextField</code>.\n    *\n    * @param target The <code>TextField</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>TextField</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -144,6 +145,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Label</code>.\n    *\n    * @param target The <code>Label</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>Label</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -154,6 +156,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>List</code>.\n    *\n    * @param target The <code>List</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>List</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -164,6 +167,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Checkbox</code>.\n    *\n    * @param target The <code>Checkbox</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>Checkbox</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -174,6 +178,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Scrollbar</code>.\n    *\n    * @param target The <code>Scrollbar</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>Scrollbar</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -184,6 +189,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>ScrollPane</code>.\n    *\n    * @param target The <code>ScrollPane</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>ScrollPane</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -194,6 +200,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>TextArea</code>.\n    *\n    * @param target The <code>TextArea</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>TextArea</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -204,6 +211,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Choice</code>.\n    *\n    * @param target The <code>Choice</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>Choice</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -214,6 +222,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Frame</code>.\n    *\n    * @param target The <code>Frame</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>Frame</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -224,6 +233,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Canvas</code>.\n    *\n    * @param target The <code>Canvas</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>Canvas</code> object.\n    */\n   protected abstract CanvasPeer createCanvas(Canvas target);\n@@ -232,6 +242,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Panel</code>.\n    *\n    * @param target The <code>Panel</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>Panel</code> object.\n    */\n   protected abstract PanelPeer createPanel(Panel target);\n@@ -240,6 +251,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Window</code>.\n    *\n    * @param target The <code>Window</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>Window</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -250,6 +262,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Dialog</code>.\n    *\n    * @param target The dialog to create the peer for\n+   *\n    * @return The peer for the specified font name.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -260,6 +273,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>MenuBar</code>.\n    *\n    * @param target The <code>MenuBar</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>MenuBar</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -270,6 +284,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>Menu</code>.\n    *\n    * @param target The <code>Menu</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>Menu</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -280,6 +295,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>PopupMenu</code>.\n    *\n    * @param target The <code>PopupMenu</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>PopupMenu</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -290,6 +306,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>MenuItem</code>.\n    *\n    * @param target The <code>MenuItem</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>MenuItem</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -300,6 +317,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>FileDialog</code>.\n    *\n    * @param target The <code>FileDialog</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>FileDialog</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -310,6 +328,7 @@ public Toolkit()\n    * Creates a peer object for the specified <code>CheckboxMenuItem</code>.\n    *\n    * @param target The <code>CheckboxMenuItem</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>CheckboxMenuItem</code> object.\n    *\n    * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n@@ -326,6 +345,7 @@ public Toolkit()\n    * XXX: FIXME\n    *\n    * @param target The <code>Component</code> to create the peer for.\n+   *\n    * @return The peer for the specified <code>Component</code> object.\n    */\n   protected LightweightPeer createComponent(Component target)\n@@ -338,7 +358,10 @@ protected LightweightPeer createComponent(Component target)\n    *\n    * @param name The font to create the peer for.\n    * @param style The font style to create the peer for.\n+   *\n    * @return The peer for the specified font name.\n+   *\n+   * @deprecated\n    */\n   protected abstract FontPeer getFontPeer(String name, int style);\n \n@@ -416,6 +439,8 @@ public Insets getScreenInsets(GraphicsConfiguration gc)\n    * Returns the color model of the screen.\n    *\n    * @return The color model of the screen.\n+   * \n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n    */\n   public abstract ColorModel getColorModel();\n \n@@ -430,6 +455,7 @@ public Insets getScreenInsets(GraphicsConfiguration gc)\n    * Return the font metrics for the specified font\n    *\n    * @param name The name of the font to return metrics for.\n+   *\n    * @return The requested font metrics.\n    */\n   public abstract FontMetrics getFontMetrics(Font name);\n@@ -647,6 +673,7 @@ public void setLockingKeyState(int keyCode, boolean on)\n    * component.\n    *\n    * @param component The component to fetch the native container for.\n+   *\n    * @return The native container object for this component.\n    */\n   protected static Container getNativeContainer(Component component)\n@@ -700,7 +727,7 @@ public boolean isFrameStateSupported(int state)\n    * default value if the property does not exist.\n    *\n    * @param key The name of the property to retrieve.\n-   * @param defThe default value of the property.\n+   * @param def The default value of the property.\n    */\n   public static String getProperty(String key, String def)\n   {"}]}