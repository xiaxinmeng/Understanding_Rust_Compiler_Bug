{"sha": "fdd6f94b11a377119dc23c679a1985737a2ae6d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRkNmY5NGIxMWEzNzcxMTlkYzIzYzY3OWExOTg1NzM3YTJhZTZkNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-15T22:37:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-15T22:37:07Z"}, "message": "Don't crash on erroneous thunk call.\n\nFrom-SVN: r170201", "tree": {"sha": "655af659633c6288e1246526c2d3e83d0206ef53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/655af659633c6288e1246526c2d3e83d0206ef53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdd6f94b11a377119dc23c679a1985737a2ae6d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd6f94b11a377119dc23c679a1985737a2ae6d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd6f94b11a377119dc23c679a1985737a2ae6d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd6f94b11a377119dc23c679a1985737a2ae6d7/comments", "author": null, "committer": null, "parents": [{"sha": "69eb61d47a9c6dae5308134ee809d85882fbeb10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69eb61d47a9c6dae5308134ee809d85882fbeb10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69eb61d47a9c6dae5308134ee809d85882fbeb10"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "bb5a6a09d0b571cc48040d11b032435e69100a69", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd6f94b11a377119dc23c679a1985737a2ae6d7/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd6f94b11a377119dc23c679a1985737a2ae6d7/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=fdd6f94b11a377119dc23c679a1985737a2ae6d7", "patch": "@@ -2215,6 +2215,8 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name,\n   Struct_field_list::const_iterator p = fields->begin();\n   for (unsigned int i = 0; i < next_index; ++i)\n     ++p;\n+  bool is_recover_call = ce->is_recover_call();\n+  Expression* recover_arg = NULL;\n   for (; p != fields->end(); ++p, ++next_index)\n     {\n       Expression* thunk_param = Expression::make_var_reference(named_parameter,\n@@ -2224,26 +2226,41 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name,\n       Expression* param = Expression::make_field_reference(thunk_param,\n \t\t\t\t\t\t\t   next_index,\n \t\t\t\t\t\t\t   location);\n-      call_params->push_back(param);\n+      if (!is_recover_call)\n+\tcall_params->push_back(param);\n+      else\n+\t{\n+\t  gcc_assert(call_params->empty());\n+\t  recover_arg = param;\n+\t}\n+    }\n+\n+  if (call_params->empty())\n+    {\n+      delete call_params;\n+      call_params = NULL;\n     }\n \n   Expression* call = Expression::make_call(func_to_call, call_params, false,\n \t\t\t\t\t   location);\n   // We need to lower in case this is a builtin function.\n   call = call->lower(gogo, function, -1);\n-  if (may_call_recover)\n-    {\n-      Call_expression* ce = call->call_expression();\n-      if (ce != NULL)\n-\tce->set_is_deferred();\n-    }\n+  Call_expression* call_ce = call->call_expression();\n+  if (call_ce != NULL && may_call_recover)\n+    call_ce->set_is_deferred();\n \n   Statement* call_statement = Statement::make_statement(call);\n \n   // We already ran the determine_types pass, so we need to run it\n   // just for this statement now.\n   call_statement->determine_types();\n \n+  // Sanity check.\n+  call->check_types(gogo);\n+\n+  if (call_ce != NULL && recover_arg != NULL)\n+    call_ce->set_recover_arg(recover_arg);\n+\n   gogo->add_statement(call_statement);\n \n   // If this is a defer statement, the label comes immediately after"}]}