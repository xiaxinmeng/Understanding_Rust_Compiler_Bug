{"sha": "50f071d999374b6dd13149a31f505d4457c9de6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmMDcxZDk5OTM3NGI2ZGQxMzE0OWEzMWY1MDVkNDQ1N2M5ZGU2ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-07-02T19:14:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-07-10T12:36:50Z"}, "message": "c++: Allow floating-point template parms in C++20.\n\nP1907R1 made various adjustments to non-type template parameters, notably\nintroducing the notion of \"structural type\".  I implemented an early version\nof that specification in r10-4426, but it was adjusted in the final paper to\nallow more.  This patch implements allowing template parameters of\nfloating-point type; still to be implemented are unions and subobjects.\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (convert_nontype_argument): Handle REAL_TYPE.\n\t(invalid_nontype_parm_type_p): Allow all structural types.\n\t* tree.c (structural_type_p): Use SCALAR_TYPE_P.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/pr81246.C: No error in C++20.\n\t* g++.dg/cpp0x/variadic74.C: No error in C++20.\n\t* g++.dg/cpp1z/nontype-auto3.C: No error in C++20.\n\t* g++.dg/template/crash106.C: No error in C++20.\n\t* g++.dg/template/crash119.C: No error in C++20.\n\t* g++.dg/template/nontype12.C: No error in C++20.\n\t* g++.dg/template/void3.C: Don't require follow-on message.\n\t* g++.dg/template/void7.C: Don't require follow-on message.\n\t* g++.dg/template/void9.C: Don't require follow-on message.", "tree": {"sha": "1885dd7dce23a0a290a08ea85c2e9f593c83d513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1885dd7dce23a0a290a08ea85c2e9f593c83d513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50f071d999374b6dd13149a31f505d4457c9de6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f071d999374b6dd13149a31f505d4457c9de6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f071d999374b6dd13149a31f505d4457c9de6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f071d999374b6dd13149a31f505d4457c9de6d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e47dfca5aa473e77fdff95d631dc39de87a41eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e47dfca5aa473e77fdff95d631dc39de87a41eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e47dfca5aa473e77fdff95d631dc39de87a41eec"}], "stats": {"total": 148, "additions": 89, "deletions": 59}, "files": [{"sha": "61f227338583a30e8d427d5751b0c28ca2d53a62", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -7257,7 +7257,8 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n      For a non-type template-parameter of integral or enumeration type,\n      integral promotions (_conv.prom_) and integral conversions\n      (_conv.integral_) are applied.  */\n-  if (INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n+  if (INTEGRAL_OR_ENUMERATION_TYPE_P (type)\n+      || TREE_CODE (type) == REAL_TYPE)\n     {\n       if (cxx_dialect < cxx11)\n \t{\n@@ -7272,7 +7273,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \n       /* Notice that there are constant expressions like '4 % 0' which\n \t do not fold into integer constants.  */\n-      if (TREE_CODE (expr) != INTEGER_CST && !val_dep_p)\n+      if (!CONSTANT_CLASS_P (expr) && !val_dep_p)\n \t{\n \t  if (complain & tf_error)\n \t    {\n@@ -7287,7 +7288,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t\treturn NULL_TREE;\n \t      /* else cxx_constant_value complained but gave us\n \t\t a real constant, so go ahead.  */\n-\t      if (TREE_CODE (expr) != INTEGER_CST)\n+\t      if (!CONSTANT_CLASS_P (expr))\n \t\t{\n \t\t  /* Some assemble time constant expressions like\n \t\t     (intptr_t)&&lab1 - (intptr_t)&&lab2 or\n@@ -7297,7 +7298,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t\t     compile time.  Refuse them here.  */\n \t\t  gcc_checking_assert (reduced_constant_expression_p (expr));\n \t\t  error_at (loc, \"template argument %qE for type %qT not \"\n-\t\t\t\t \"a constant integer\", expr, type);\n+\t\t\t\t \"a compile-time constant\", expr, type);\n \t\t  return NULL_TREE;\n \t\t}\n \t    }\n@@ -26127,31 +26128,31 @@ invalid_nontype_parm_type_p (tree type, tsubst_flags_t complain)\n   else if (cxx_dialect >= cxx11\n \t   && TREE_CODE (type) == BOUND_TEMPLATE_TEMPLATE_PARM)\n     return false;\n-  else if (CLASS_TYPE_P (type))\n+  else if (VOID_TYPE_P (type))\n+    /* Fall through.  */;\n+  else if (cxx_dialect >= cxx20)\n     {\n-      if (cxx_dialect < cxx20)\n-\t{\n-\t  if (complain & tf_error)\n-\t    error (\"non-type template parameters of class type only available \"\n-\t\t   \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n-\t  return true;\n-\t}\n       if (dependent_type_p (type))\n \treturn false;\n-      if (!complete_type_or_else (type, NULL_TREE))\n+      if (!complete_type_or_maybe_complain (type, NULL_TREE, complain))\n \treturn true;\n-      if (!structural_type_p (type))\n+      if (structural_type_p (type))\n+\treturn false;\n+      if (complain & tf_error)\n \t{\n-\t  if (complain & tf_error)\n-\t    {\n-\t      auto_diagnostic_group d;\n-\t      error (\"%qT is not a valid type for a template non-type \"\n-\t\t     \"parameter because it is not structural\", type);\n-\t      structural_type_p (type, true);\n-\t    }\n-\t  return true;\n+\t  auto_diagnostic_group d;\n+\t  error (\"%qT is not a valid type for a template non-type \"\n+\t\t \"parameter because it is not structural\", type);\n+\t  structural_type_p (type, true);\n \t}\n-      return false;\n+      return true;\n+    }\n+  else if (CLASS_TYPE_P (type))\n+    {\n+      if (complain & tf_error)\n+\terror (\"non-type template parameters of class type only available \"\n+\t       \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n+      return true;\n     }\n \n   if (complain & tf_error)"}, {"sha": "9effd27f58789572344999a3054ac81b6de87ce0", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -4519,19 +4519,24 @@ zero_init_expr_p (tree t)\n bool\n structural_type_p (tree t, bool explain)\n {\n-  t = strip_array_types (t);\n-  if (INTEGRAL_OR_ENUMERATION_TYPE_P (t))\n-    return true;\n-  if (NULLPTR_TYPE_P (t))\n-    return true;\n-  if (TYPE_PTR_P (t) || TYPE_PTRMEM_P (t))\n+  /* A structural type is one of the following: */\n+\n+  /* a scalar type, or */\n+  if (SCALAR_TYPE_P (t))\n     return true;\n+  /* an lvalue reference type, or */\n   if (TYPE_REF_P (t) && !TYPE_REF_IS_RVALUE (t))\n     return true;\n+  /* a literal class type with the following properties:\n+     - all base classes and non-static data members are public and non-mutable\n+       and\n+     - the types of all bases classes and non-static data members are\n+       structural types or (possibly multi-dimensional) array thereof.  */\n   if (!CLASS_TYPE_P (t))\n     return false;\n   if (TREE_CODE (t) == UNION_TYPE)\n     {\n+      /* FIXME allow (and mangle) unions.  */\n       if (explain)\n \tinform (location_of (t), \"%qT is a union\", t);\n       return false;\n@@ -4542,12 +4547,6 @@ structural_type_p (tree t, bool explain)\n \texplain_non_literal_class (t);\n       return false;\n     }\n-  if (CLASSTYPE_HAS_MUTABLE (t))\n-    {\n-      if (explain)\n-\tinform (location_of (t), \"%qT has a mutable member\", t);\n-      return false;\n-    }\n   for (tree m = next_initializable_field (TYPE_FIELDS (t)); m;\n        m = next_initializable_field (DECL_CHAIN (m)))\n     {\n@@ -4563,12 +4562,19 @@ structural_type_p (tree t, bool explain)\n \t    }\n \t  return false;\n \t}\n-      if (!structural_type_p (TREE_TYPE (m)))\n+      if (DECL_MUTABLE_P (m))\n+\t{\n+\t  if (explain)\n+\t    inform (location_of (m), \"%qD is mutable\", m);\n+\t  return false;\n+\t}\n+      tree mtype = strip_array_types (TREE_TYPE (m));\n+      if (!structural_type_p (mtype))\n \t{\n \t  if (explain)\n \t    {\n \t      inform (location_of (m), \"%qD has a non-structural type\", m);\n-\t      structural_type_p (TREE_TYPE (m), true);\n+\t      structural_type_p (mtype, true);\n \t    }\n \t  return false;\n \t}"}, {"sha": "01260e1853431eb3a67c4d69659eb11ee51045c2", "filename": "gcc/testsuite/g++.dg/cpp0x/pr81246.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81246.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81246.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81246.C?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -4,7 +4,7 @@ namespace N\n { \n   template < typename T > class A\n   { \n-    template < T > friend class B;  // { dg-error \"not a valid type\" }\n+    template < T > friend class B;  // { dg-error \"not a valid type\" \"\" { target c++17_down } }\n   };\n \n   A < float > a;"}, {"sha": "656aacdebe46166794619623f570846882b4db59", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic74.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -2,7 +2,7 @@\n template <class... Types> class A\n {\n public:\n-  template <Types... Values> class X { /* ... */ }; // { dg-error \"not a valid type for a template non-type parameter\" }\n+  template <Types... Values> class X { /* ... */ }; // { dg-error \"not a valid type for a template non-type parameter\" \"\" { target c++17_down } }\n };\n \n template<class... Types> class B"}, {"sha": "3ffdbcf0e7e01b3ec777f9d43dd4b4b7e3ee377e", "filename": "gcc/testsuite/g++.dg/cpp1z/nontype-auto3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto3.C?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -4,7 +4,7 @@\n template<auto n> struct B { decltype(n) f = n; };\n B<5> b1;   // OK: template parameter type is int\n B<'a'> b2; // OK: template parameter type is char\n-B<2.5> b3; // { dg-error \"\" } template parameter type cannot be double\n+B<2.5> b3; // { dg-error \"\" \"\" { target c++17_down } } template parameter type cannot be double\n \n template <auto n> void f(B<n>) { }\n "}, {"sha": "038d46fdac877dbbbba8bf471c730a505222b389", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class-equiv1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class-equiv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class-equiv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class-equiv1.C?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile { target c++20 } }\n+\n+template <auto N> struct A {};\n+template <class,class> struct assert_same;\n+template <class T> struct assert_same<T,T> {};\n+\n+#define TEQ(X,Y) static_assert(__is_same(A<(X)>,A<(Y)>))\n+#define TNEQ(X,Y) static_assert(!__is_same(A<(X)>,A<(Y)>))\n+\n+union U {\n+  int i; int j;\n+  constexpr U(int i): i(i) {}\n+  constexpr U(unsigned u): j(u) {}\n+};\n+\n+TEQ(U(0),U(0));\n+\n+// Calling the other constructor initializes a different member with the same\n+// value.  We need to distinguish these.\n+TNEQ(U(0),U(0u));\n+\n+// { dg-final { scan-assembler \"_Z1f1AIXtl1Udi1iLi0EEEE\" } }\n+void f(A<U(0)>) { }\n+// { dg-final { scan-assembler \"_Z1g1AIXtl1Udi1jLi0EEEE\" } }\n+void g(A<U(0u)>) { }"}, {"sha": "f904bd4dc9b836bae7456f0288da9dafed449d15", "filename": "gcc/testsuite/g++.dg/template/crash106.C", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -4,11 +4,9 @@ typedef double T;\n \n struct A\n {\n-  template<T> void foo(); // { dg-error \"type\" }\n+  template<T> void foo(); // { dg-error \"type\" \"\" { target c++17_down } }\n };\n \n-template<T N = 0, void (A::*)() = &A::foo<N> > struct B {}; // { dg-error \"type|declared\" }\n+template<T N = 0.0, void (A::*)() = &A::foo<N> > struct B {}; // { dg-error \"type|declared\" \"\" { target c++17_down } }\n \n-B<> b; // { dg-message \"non-type\" }\n-\n-// { dg-prune-output \"(could not convert|no matches)\" }\n+B<> b; // { dg-error \"(could not convert|no matches)\" \"\" { target c++17_down } }"}, {"sha": "3911327ad3ae7243eeafb67a6dea11a6236731e5", "filename": "gcc/testsuite/g++.dg/template/crash119.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash119.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash119.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash119.C?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -1,6 +1,6 @@\n // PR c++/59115\n \n-template<typename T, float, int, typename U> void foo(T, U) {} // { dg-error \"valid type\" }\n+template<typename T, float, int, typename U> void foo(T, U) {} // { dg-error \"valid type\" \"\" { target c++17_down } }\n \n void bar()\n {"}, {"sha": "e37cf8f7646febb4aba20315ffa9a376756c3f7e", "filename": "gcc/testsuite/g++.dg/template/nontype12.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype12.C?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -3,19 +3,19 @@\n \n template<typename T> struct A\n {\n-  template<T> int foo();                        // { dg-error \"double\" }\n-  template<template<T> class> int bar();        // { dg-error \"double\" }\n-  template<T> struct X;                         // { dg-error \"double\" }\n+  template<T> int foo();                        // { dg-error \"double\" \"\" { target c++17_down } }\n+  template<template<T> class> int bar();        // { dg-error \"double\" \"\" { target c++17_down } }\n+  template<T> struct X;                         // { dg-error \"double\" \"\" { target c++17_down } }\n };\n \n A<char>   a1;\n-A<double> a2;                                   // { dg-message \"required\" }\n+A<double> a2;                                   // { dg-message \"required\" \"\" { target c++17_down } }\n \n template<typename T> struct B\n {\n-  template<double> int foo();                   // { dg-error \"double\" }\n-  template<template<double> class> int bar();   // { dg-error \"double\" }\n-  template<double> struct X;                    // { dg-error \"double\" }\n+  template<double> int foo();                   // { dg-error \"double\" \"\" { target c++17_down } }\n+  template<template<double> class> int bar();   // { dg-error \"double\" \"\" { target c++17_down } }\n+  template<double> struct X;                    // { dg-error \"double\" \"\" { target c++17_down } }\n };\n \n template<void> int foo();                       // { dg-error \"void\" }\n@@ -24,12 +24,12 @@ template<void> struct X;                        // { dg-error \"void\" }\n \n template<typename T> struct C\n {\n-  template<T> int foo();                        // { dg-error \"double\" }\n+  template<T> int foo();                        // { dg-error \"double\" \"\" { target c++17_down } }\n };\n \n-template<typename T> int baz(T) { C<T> c; return 0;}  // { dg-message \"required\" }\n+template<typename T> int baz(T) { C<T> c; return 0;}  // { dg-message \"required\" \"\" { target c++17_down } }\n \n void foobar()\n {\n-  baz(1.2);                                     // { dg-message \"required\" }\n+  baz(1.2);                                     // { dg-message \"required\" \"\" { target c++17_down } }\n }"}, {"sha": "6526a2a47be1db3ebe1421a8e70457a8bad4b7e8", "filename": "gcc/testsuite/g++.dg/template/void3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -1,5 +1,5 @@\n //PR c++/28637\n \n template<void> struct A {};  // { dg-error \"not a valid type\" }\n-A<0> a;                      // { dg-message \"non-type\" }\n+A<0> a;\n "}, {"sha": "2c464b3a055cfb27870d120e244240e9722c4e3d", "filename": "gcc/testsuite/g++.dg/template/void7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid7.C?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -5,4 +5,4 @@ template<void> struct A         // { dg-error \"not a valid type\" }\n   static int i;\n };\n \n-A<0> a;                        // { dg-message \"non-type\" }\n+A<0> a;"}, {"sha": "37aafd0b975f3ac3a9eb6ffbd51eee96b1cc2288", "filename": "gcc/testsuite/g++.dg/template/void9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f071d999374b6dd13149a31f505d4457c9de6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid9.C?ref=50f071d999374b6dd13149a31f505d4457c9de6d", "patch": "@@ -1,4 +1,4 @@\n //PR c++/28738\n \n template<int,void> struct A {};    // { dg-error \"not a valid type\" }\n-template<int N> struct A<N,0> {};  // { dg-message \"invalid\" }\n+template<int N> struct A<N,0> {};"}]}