{"sha": "828176ba490d034d5d689f7733466530c25c5ed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4MTc2YmE0OTBkMDM0ZDVkNjg5Zjc3MzM0NjY1MzBjMjVjNWVkMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-18T11:18:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-18T14:07:16Z"}, "message": "libstdc++: Improve doxygen comments in <bits/stl_function.h>\n\nAdd notes about deprecation and modern replacements. Fix bogus\n\"memory_adaptors\" group name. Use markdown for formatting.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_function.h: Improve doxygen comments.", "tree": {"sha": "354efd52b40fe45f56c302796af43f0e7c52a739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/354efd52b40fe45f56c302796af43f0e7c52a739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828176ba490d034d5d689f7733466530c25c5ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828176ba490d034d5d689f7733466530c25c5ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828176ba490d034d5d689f7733466530c25c5ed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828176ba490d034d5d689f7733466530c25c5ed3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aba938d6c3525450e70fe26e7d92a70761a5ba8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba938d6c3525450e70fe26e7d92a70761a5ba8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aba938d6c3525450e70fe26e7d92a70761a5ba8e"}], "stats": {"total": 134, "additions": 74, "deletions": 60}, "files": [{"sha": "5de8c3234f7a142e0728bd447aeb17c5186bf9e2", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 74, "deletions": 60, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828176ba490d034d5d689f7733466530c25c5ed3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828176ba490d034d5d689f7733466530c25c5ed3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=828176ba490d034d5d689f7733466530c25c5ed3", "patch": "@@ -66,40 +66,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.3.1 base classes\n   /** @defgroup functors Function Objects\n-   * @ingroup utilities\n+   *  @ingroup utilities\n    *\n-   *  Function objects, or @e functors, are objects with an @c operator()\n+   *  Function objects, or _functors_, are objects with an `operator()`\n    *  defined and accessible.  They can be passed as arguments to algorithm\n    *  templates and used in place of a function pointer.  Not only is the\n    *  resulting expressiveness of the library increased, but the generated\n    *  code can be more efficient than what you might write by hand.  When we\n-   *  refer to @a functors, then, generally we include function pointers in\n+   *  refer to _functors_, then, generally we include function pointers in\n    *  the description as well.\n    *\n    *  Often, functors are only created as temporaries passed to algorithm\n    *  calls, rather than being created as named variables.\n    *\n    *  Two examples taken from the standard itself follow.  To perform a\n-   *  by-element addition of two vectors @c a and @c b containing @c double,\n-   *  and put the result in @c a, use\n+   *  by-element addition of two vectors `a` and `b` containing `double`,\n+   *  and put the result in `a`, use\n    *  \\code\n    *  transform (a.begin(), a.end(), b.begin(), a.begin(), plus<double>());\n    *  \\endcode\n-   *  To negate every element in @c a, use\n+   *  To negate every element in `a`, use\n    *  \\code\n    *  transform(a.begin(), a.end(), a.begin(), negate<double>());\n    *  \\endcode\n-   *  The addition and negation functions will be inlined directly.\n+   *  The addition and negation functions will usually be inlined directly.\n    *\n-   *  The standard functors are derived from structs named @c unary_function\n-   *  and @c binary_function.  These two classes contain nothing but typedefs,\n-   *  to aid in generic (template) programming.  If you write your own\n-   *  functors, you might consider doing the same.\n+   *  An _adaptable function object_ is one which provides nested typedefs\n+   *  `result_type` and either `argument_type` (for a unary function) or\n+   *  `first_argument_type` and `second_argument_type` (for a binary function).\n+   *  Those typedefs are used by function object adaptors such as `bind2nd`.\n+   *  The standard library provides two class templates, `unary_function` and\n+   *  `binary_function`, which define those typedefs and so can be used as\n+   *  base classes of adaptable function objects.\n+   *\n+   *  Since C++11 the use of function object adaptors has been superseded by\n+   *  more powerful tools such as lambda expressions, `function<>`, and more\n+   *  powerful type deduction (using `auto` and `decltype`). The helpers for\n+   *  defining adaptable function objects are deprecated since C++11, and no\n+   *  longer part of the standard library since C++17. However, they are still\n+   *  defined and used by libstdc++ after C++17, as a conforming extension.\n    *\n    *  @{\n    */\n+\n   /**\n-   *  This is one of the @link functors functor base classes@endlink.\n+   *  Helper for defining adaptable unary function objects.\n+   *  @deprecated Deprecated in C++11, no longer in the standard since C++17.\n    */\n   template<typename _Arg, typename _Result>\n     struct unary_function\n@@ -112,7 +124,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   /**\n-   *  This is one of the @link functors functor base classes@endlink.\n+   *  Helper for defining adaptable binary function objects.\n+   *  @deprecated Deprecated in C++11, no longer in the standard since C++17.\n    */\n   template<typename _Arg1, typename _Arg2, typename _Result>\n     struct binary_function\n@@ -129,12 +142,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /** @}  */\n \n   // 20.3.2 arithmetic\n-  /** @defgroup arithmetic_functors Arithmetic Classes\n-   * @ingroup functors\n+\n+  /** @defgroup arithmetic_functors Arithmetic Function Object Classes\n+   *  @ingroup functors\n    *\n-   *  Because basic math often needs to be done during an algorithm,\n-   *  the library provides functors for those operations.  See the\n-   *  documentation for @link functors the base classes@endlink\n+   *  The library provides function objects for basic arithmetic operations.\n+   *  See the documentation for @link functors function objects @endlink\n    *  for examples of their use.\n    *\n    *  @{\n@@ -166,6 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct plus : public binary_function<_Tp, _Tp, _Tp>\n     {\n+      /// Returns the sum\n       _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n@@ -319,7 +333,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.3.3 comparisons\n   /** @defgroup comparison_functors Comparison Classes\n-   * @ingroup functors\n+   *  @ingroup functors\n    *\n    *  The library provides six wrapper functors for all the basic comparisons\n    *  in C++, like @c <.\n@@ -763,10 +777,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.3.4 logical operations\n   /** @defgroup logical_functors Boolean Operations Classes\n-   * @ingroup functors\n+   *  @ingroup functors\n    *\n-   *  Here are wrapper functors for Boolean operations: @c &&, @c ||,\n-   *  and @c !.\n+   *  The library provides function objects for the logical operations:\n+   *  `&&`, `||`, and `!`.\n    *\n    *  @{\n    */\n@@ -971,30 +985,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.3.5 negators\n   /** @defgroup negators Negators\n-   * @ingroup functors\n+   *  @ingroup functors\n    *\n-   *  The functions @c not1 and @c not2 each take a predicate functor\n-   *  and return an instance of @c unary_negate or\n-   *  @c binary_negate, respectively.  These classes are functors whose\n-   *  @c operator() performs the stored predicate function and then returns\n-   *  the negation of the result.\n+   *  The function templates `not1` and `not2` are function object adaptors,\n+   *  which each take a predicate functor and wrap it in an instance of\n+   *  `unary_negate` or `binary_negate`, respectively.  Those classes are\n+   *  functors whose `operator()` evaluates the wrapped predicate function\n+   *  and then returns the negation of the result.\n    *\n    *  For example, given a vector of integers and a trivial predicate,\n    *  \\code\n    *  struct IntGreaterThanThree\n    *    : public std::unary_function<int, bool>\n    *  {\n-   *      bool operator() (int x) { return x > 3; }\n+   *      bool operator() (int x) const { return x > 3; }\n    *  };\n    *\n    *  std::find_if (v.begin(), v.end(), not1(IntGreaterThanThree()));\n    *  \\endcode\n-   *  The call to @c find_if will locate the first index (i) of @c v for which\n-   *  <code>!(v[i] > 3)</code> is true.\n+   *  The call to `find_if` will locate the first index (i) of `v` for which\n+   *  `!(v[i] > 3)` is true.\n    *\n    *  The not1/unary_negate combination works on predicates taking a single\n-   *  argument.  The not2/binary_negate combination works on predicates which\n-   *  take two arguments.\n+   *  argument.  The not2/binary_negate combination works on predicates taking\n+   *  two arguments.\n+   *\n+   *  @deprecated Deprecated in C++17, no longer in the standard since C++20.\n+   *  Use `not_fn` instead.\n    *\n    *  @{\n    */\n@@ -1055,24 +1072,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.3.7 adaptors pointers functions\n   /** @defgroup pointer_adaptors Adaptors for pointers to functions\n-   * @ingroup functors\n+   *  @ingroup functors\n    *\n    *  The advantage of function objects over pointers to functions is that\n    *  the objects in the standard library declare nested typedefs describing\n-   *  their argument and result types with uniform names (e.g., @c result_type\n-   *  from the base classes @c unary_function and @c binary_function).\n+   *  their argument and result types with uniform names (e.g., `result_type`\n+   *  from the base classes `unary_function` and `binary_function`).\n    *  Sometimes those typedefs are required, not just optional.\n    *\n    *  Adaptors are provided to turn pointers to unary (single-argument) and\n    *  binary (double-argument) functions into function objects.  The\n-   *  long-winded functor @c pointer_to_unary_function is constructed with a\n-   *  function pointer @c f, and its @c operator() called with argument @c x\n-   *  returns @c f(x).  The functor @c pointer_to_binary_function does the same\n-   *  thing, but with a double-argument @c f and @c operator().\n+   *  long-winded functor `pointer_to_unary_function` is constructed with a\n+   *  function pointer `f`, and its `operator()` called with argument `x`\n+   *  returns `f(x)`.  The functor `pointer_to_binary_function` does the same\n+   *  thing, but with a double-argument `f` and `operator()`.\n    *\n-   *  The function @c ptr_fun takes a pointer-to-function @c f and constructs\n+   *  The function `ptr_fun` takes a pointer-to-function `f` and constructs\n    *  an instance of the appropriate functor.\n    *\n+   *  @deprecated Deprecated in C++11, no longer in the standard since C++17.\n+   *\n    *  @{\n    */\n   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.\n@@ -1182,8 +1201,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   // 20.3.8 adaptors pointers members\n-  /** @defgroup memory_adaptors Adaptors for pointers to members\n-   * @ingroup functors\n+  /** @defgroup ptrmem_adaptors Adaptors for pointers to members\n+   *  @ingroup functors\n    *\n    *  There are a total of 8 = 2^3 function objects in this family.\n    *   (1) Member functions taking no arguments vs member functions taking\n@@ -1192,13 +1211,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *   (3) Const vs non-const member function.\n    *\n    *  All of this complexity is in the function objects themselves.  You can\n-   *   ignore it by using the helper function mem_fun and mem_fun_ref,\n+   *   ignore it by using the helper function `mem_fun` and `mem_fun_ref`,\n    *   which create whichever type of adaptor is appropriate.\n    *\n+   *  @deprecated Deprecated in C++11, no longer in the standard since C++17.\n+   *  Use `mem_fn` instead.\n+   *\n    *  @{\n    */\n-  /// One of the @link memory_adaptors adaptors for member\n-  /// pointers@endlink.\n+  /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp>\n     class mem_fun_t : public unary_function<_Tp*, _Ret>\n     {\n@@ -1215,8 +1236,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Ret (_Tp::*_M_f)();\n     };\n \n-  /// One of the @link memory_adaptors adaptors for member\n-  /// pointers@endlink.\n+  /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp>\n     class const_mem_fun_t : public unary_function<const _Tp*, _Ret>\n     {\n@@ -1233,8 +1253,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Ret (_Tp::*_M_f)() const;\n     };\n \n-  /// One of the @link memory_adaptors adaptors for member\n-  /// pointers@endlink.\n+  /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp>\n     class mem_fun_ref_t : public unary_function<_Tp, _Ret>\n     {\n@@ -1251,8 +1270,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Ret (_Tp::*_M_f)();\n   };\n \n-  /// One of the @link memory_adaptors adaptors for member\n-  /// pointers@endlink.\n+  /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp>\n     class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>\n     {\n@@ -1269,8 +1287,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Ret (_Tp::*_M_f)() const;\n     };\n \n-  /// One of the @link memory_adaptors adaptors for member\n-  /// pointers@endlink.\n+  /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp, typename _Arg>\n     class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>\n     {\n@@ -1287,8 +1304,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Ret (_Tp::*_M_f)(_Arg);\n     };\n \n-  /// One of the @link memory_adaptors adaptors for member\n-  /// pointers@endlink.\n+  /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp, typename _Arg>\n     class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>\n     {\n@@ -1305,8 +1321,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Ret (_Tp::*_M_f)(_Arg) const;\n     };\n \n-  /// One of the @link memory_adaptors adaptors for member\n-  /// pointers@endlink.\n+  /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp, typename _Arg>\n     class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>\n     {\n@@ -1323,8 +1338,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Ret (_Tp::*_M_f)(_Arg);\n     };\n \n-  /// One of the @link memory_adaptors adaptors for member\n-  /// pointers@endlink.\n+  /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp, typename _Arg>\n     class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>\n     {"}]}