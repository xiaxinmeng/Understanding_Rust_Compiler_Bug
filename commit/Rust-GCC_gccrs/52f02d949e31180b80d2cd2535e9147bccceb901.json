{"sha": "52f02d949e31180b80d2cd2535e9147bccceb901", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJmMDJkOTQ5ZTMxMTgwYjgwZDJjZDI1MzVlOTE0N2JjY2NlYjkwMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-05-24T15:50:51Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-05-24T15:50:51Z"}, "message": "re PR libstdc++/6750 (ofstream incorrectly sets failbit (severe regression))\n\n\n2002-05-24  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/6750\n\t* include/bits/ostream.tcc (ostream::operator<<(const char*)): Fix\n\tfor empty string literal.\n\t(ostream::operator<<(const _CharT*)): Same.\n\t(ostream<char>::operator<<(const char*)): Same.\n\t(ostream<char>::operator<<(streambuf*)): Same.\n\t* testsuite/27_io/ostream_inserter_char.cc (test08): Add tests.\n\t* testsuite/27_io/ostream_inserter_other.cc (test02): Modify.\n\nFrom-SVN: r53839", "tree": {"sha": "5e9be3b32d3a0564f481ae3dffdeaf34d3b10573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e9be3b32d3a0564f481ae3dffdeaf34d3b10573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52f02d949e31180b80d2cd2535e9147bccceb901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f02d949e31180b80d2cd2535e9147bccceb901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f02d949e31180b80d2cd2535e9147bccceb901", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f02d949e31180b80d2cd2535e9147bccceb901/comments", "author": null, "committer": null, "parents": [{"sha": "d2f108e266cd19172d664d433e772420e88d1504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f108e266cd19172d664d433e772420e88d1504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f108e266cd19172d664d433e772420e88d1504"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "71e4d888dacc1ab9e51e9005f43ff851f446e33f", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f02d949e31180b80d2cd2535e9147bccceb901/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f02d949e31180b80d2cd2535e9147bccceb901/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=52f02d949e31180b80d2cd2535e9147bccceb901", "patch": "@@ -119,19 +119,11 @@ namespace std\n     basic_ostream<_CharT, _Traits>::operator<<(__streambuf_type* __sbin)\n     {\n       sentry __cerb(*this);\n-      if (__cerb)\n+      if (__cerb && __sbin)\n \t{\n \t  try\n \t    {\n-\t      streamsize __xtrct = 0;\n-\t      if (__sbin)\n-\t\t{\n-\t\t  __streambuf_type* __sbout = this->rdbuf();\n-\t\t  __xtrct = __copy_streambufs(*this, __sbin, __sbout);\n-\t\t}\n-\t      else\n-\t\tthis->setstate(ios_base::badbit);\n-\t      if (!__xtrct)\n+\t      if (!__copy_streambufs(*this, __sbin, this->rdbuf()))\n \t\tthis->setstate(ios_base::failbit);\n \t    }\n \t  catch(exception& __fail)\n@@ -143,6 +135,8 @@ namespace std\n \t\t__throw_exception_again;\n \t    }\n \t}\n+      else if (!__sbin)\n+\tthis->setstate(ios_base::badbit);\n       return *this;\n     }\n \n@@ -539,14 +533,13 @@ namespace std\n     {\n       typedef basic_ostream<_CharT, _Traits> __ostream_type;\n       typename __ostream_type::sentry __cerb(__out);\n-      if (__cerb)\n+      if (__cerb && __s)\n \t{\n \t  try \n \t    {\n \t      streamsize __w = __out.width();\n \t      _CharT* __pads = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __w));\n-\t      streamsize __len = __s \n-\t\t           ? static_cast<streamsize>(_Traits::length(__s)) : 0;\n+\t      streamsize __len = static_cast<streamsize>(_Traits::length(__s));\n \t      if (__w > __len)\n \t\t{\n \t\t  __pad(__out, __out.fill(), __pads, __s, __w, __len, false);\n@@ -555,8 +548,6 @@ namespace std\n \t\t}\n \t      __out.write(__s, __len);\n \t      __out.width(0);\n-\t      if (!__len)\n-\t\t__out.setstate(ios_base::badbit);\n \t    }\n \t  catch(exception& __fail)\n \t    {\n@@ -567,6 +558,8 @@ namespace std\n \t\t__throw_exception_again;\n \t    }\n \t}\n+      else if (!__s)\n+\t__out.setstate(ios_base::badbit);\n       return __out;\n     }\n \n@@ -581,9 +574,9 @@ namespace std\n       typedef char_traits<char>\t\t     __traits_type;\n #endif\n       typename __ostream_type::sentry __cerb(__out);\n-      if (__cerb)\n+      if (__cerb && __s)\n \t{\n-\t  size_t __clen = __s ? __traits_type::length(__s) : 0;\n+\t  size_t __clen = __traits_type::length(__s);\n \t  _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * (__clen + 1)));\n \t  for (size_t  __i = 0; __i < __clen; ++__i)\n \t    __ws[__i] = __out.widen(__s[__i]);\n@@ -603,8 +596,6 @@ namespace std\n \t\t}\n \t      __out.write(__str, __len);\n \t      __out.width(0);\n-\t      if (!__len)\n-\t\t__out.setstate(ios_base::badbit);\n \t    }\n \t  catch(exception& __fail)\n \t    {\n@@ -615,6 +606,8 @@ namespace std\n \t\t__throw_exception_again;\n \t    }\n \t}\n+      else if (!__s)\n+\t__out.setstate(ios_base::badbit);\n       return __out;\n     }\n \n@@ -625,14 +618,14 @@ namespace std\n     {\n       typedef basic_ostream<char, _Traits> __ostream_type;\n       typename __ostream_type::sentry __cerb(__out);\n-      if (__cerb)\n+      if (__cerb && __s)\n \t{\n \t  try \n \t    {\n \t      streamsize __w = __out.width();\n \t      char* __pads = static_cast<char*>(__builtin_alloca(__w));\n-\t      streamsize __len = __s ? \n-\t\t             static_cast<streamsize>(_Traits::length(__s)) : 0;\n+\t      streamsize __len = static_cast<streamsize>(_Traits::length(__s));\n+\n \t      if (__w > __len)\n \t\t{\n \t\t  __pad(__out, __out.fill(), __pads, __s, __w, __len, false);\n@@ -641,8 +634,6 @@ namespace std\n \t\t}\n \t      __out.write(__s, __len);\n \t      __out.width(0);\n-\t      if (!__len)\n-\t\t__out.setstate(ios_base::badbit);\n \t    }\n \t  catch(exception& __fail)\n \t    {\n@@ -653,6 +644,8 @@ namespace std\n \t\t__throw_exception_again;\n \t    }\n \t}\n+      else if (!__s)\n+\t__out.setstate(ios_base::badbit);\n       return __out;\n     }\n "}, {"sha": "2fe88f5815b589cab8167fa7bd7b342c98eba0d1", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_char.cc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f02d949e31180b80d2cd2535e9147bccceb901/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f02d949e31180b80d2cd2535e9147bccceb901/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_char.cc?ref=52f02d949e31180b80d2cd2535e9147bccceb901", "patch": "@@ -296,23 +296,35 @@ void test08()\n \n   // 1\n   std::ostringstream oss;\n-  oss << pt << std::endl;\n+  oss << pt;\n   VERIFY( oss.bad() );\n   VERIFY( oss.str().size() == 0 );\n \n+  oss.clear();\n+  oss << \"\";\n+  VERIFY( oss.good() );\n+\n #if _GLIBCPP_USE_WCHAR_T\n   // 2\n   std::wostringstream woss;\n-  woss << pt << std::endl;\n+  woss << pt;\n   VERIFY( woss.bad() );\n   VERIFY( woss.str().size() == 0 );\n \n+  woss.clear();\n+  woss << \"\";\n+  VERIFY( woss.good() );\n+\n   // 3\n   wchar_t* wt = NULL;\n   woss.clear();\n-  woss << wt << std::endl;\n+  woss << wt;\n   VERIFY( woss.bad() );\n   VERIFY( woss.str().size() == 0 );\n+\n+  woss.clear();\n+  woss << L\"\";\n+  VERIFY( woss.good() );\n #endif\n }\n "}, {"sha": "4ce5b68d207ebc53ace531ede4f8c45d030af4cf", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_other.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f02d949e31180b80d2cd2535e9147bccceb901/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_other.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f02d949e31180b80d2cd2535e9147bccceb901/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_other.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_other.cc?ref=52f02d949e31180b80d2cd2535e9147bccceb901", "patch": "@@ -1,7 +1,7 @@\n // 1999-08-16 bkoz\n // 1999-11-01 bkoz\n \n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -67,7 +67,7 @@ test02()\n   f_out1 << strbuf01;\n   state02 = f_out1.rdstate();\n   VERIFY( state01 != state02 );\n-  VERIFY( (state02 & std::ios_base::failbit) != 0 );\n+  VERIFY( (state02 & std::ios_base::badbit) != 0 );\n \n   // filebuf->filebuf\n   std::ifstream f_in(name_01);"}]}