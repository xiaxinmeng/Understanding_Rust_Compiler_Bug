{"sha": "ee610fcd4d08b101e426b13827d70b8a387e0498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2MTBmY2Q0ZDA4YjEwMWU0MjZiMTM4MjdkNzBiOGEzODdlMDQ5OA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-06-09T07:08:00Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-06-09T07:08:00Z"}, "message": "configure.ac (gcc_cv_as_hidden): Enable on *-*-darwin*.\n\n\t* configure.ac (gcc_cv_as_hidden): Enable on *-*-darwin*.\n\t(gcc_cv_ld_hidden): Likewise.\n\t* configure: Regenerate.\n\t* config/i386/i386.c (USE_HIDDEN_LINKONCE): Remove TARGET_MACHO.\n\t(ix86_stack_protect_fail): Mark unused.\n\t(TARGET_STACK_PROTECT_FAIL) [TARGET_MACHO]: Don't redefine.\n\t* config/rs6000/rs6000.c (rs6000_assemble_visibility)\n\t[TARGET_MACHO]: Don't define.\n\t(TARGET_ASM_ASSEMBLE_VISIBILITY): Likewise.\n\t(TARGET_STACK_PROTECT_FAIL): Likewise.\n\t(rs6000_stack_protect_fail): Mark unused.\n\t* dwarf2asm.c (dw2_output_indirect_constant_1): Mark decl hidden if\n\tUSE_LINKONCE_INDIRECT.\n\tDon't emit .hidden expicitly.\n\nFrom-SVN: r174837", "tree": {"sha": "facd661921ca763f2c6699b2804e74acd1049588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/facd661921ca763f2c6699b2804e74acd1049588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee610fcd4d08b101e426b13827d70b8a387e0498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee610fcd4d08b101e426b13827d70b8a387e0498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee610fcd4d08b101e426b13827d70b8a387e0498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee610fcd4d08b101e426b13827d70b8a387e0498/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f2e22ff77819ca19eff4da9e2430943f95d5947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2e22ff77819ca19eff4da9e2430943f95d5947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2e22ff77819ca19eff4da9e2430943f95d5947"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "4f12db9e3e5c7db95e609bf5ca4352d24cc52807", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee610fcd4d08b101e426b13827d70b8a387e0498", "patch": "@@ -1,3 +1,20 @@\n+2011-06-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (gcc_cv_as_hidden): Enable on *-*-darwin*.\n+\t(gcc_cv_ld_hidden): Likewise.\n+\t* configure: Regenerate.\n+\t* config/i386/i386.c (USE_HIDDEN_LINKONCE): Remove TARGET_MACHO.\n+\t(ix86_stack_protect_fail): Mark unused.\n+\t(TARGET_STACK_PROTECT_FAIL) [TARGET_MACHO]: Don't redefine.\n+\t* config/rs6000/rs6000.c (rs6000_assemble_visibility)\n+\t[TARGET_MACHO]: Don't define.\n+\t(TARGET_ASM_ASSEMBLE_VISIBILITY): Likewise.\n+\t(TARGET_STACK_PROTECT_FAIL): Likewise.\n+\t(rs6000_stack_protect_fail): Mark unused.\n+\t* dwarf2asm.c (dw2_output_indirect_constant_1): Mark decl hidden if\n+\tUSE_LINKONCE_INDIRECT.\n+\tDon't emit .hidden expicitly.\n+\n 2011-06-08  Andi Kleen  <ak@linux.intel.com>\n \n \t* varasm.c (get_section): Print location of other conflict"}, {"sha": "0bcb2db11878a653601499bdf9a7ec3a71a365a1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ee610fcd4d08b101e426b13827d70b8a387e0498", "patch": "@@ -8725,7 +8725,7 @@ ix86_setup_frame_addresses (void)\n }\n \f\n #ifndef USE_HIDDEN_LINKONCE\n-# if (defined(HAVE_GAS_HIDDEN) && (SUPPORTS_ONE_ONLY - 0)) || TARGET_MACHO\n+# if defined(HAVE_GAS_HIDDEN) && (SUPPORTS_ONE_ONLY - 0)\n #  define USE_HIDDEN_LINKONCE 1\n # else\n #  define USE_HIDDEN_LINKONCE 0\n@@ -32207,7 +32207,7 @@ ix86_mangle_type (const_tree type)\n    __stack_chk_fail directly.  64-bit code doesn't need to setup any PIC\n    register, so it is better to call __stack_chk_fail directly.  */\n \n-static tree\n+static tree ATTRIBUTE_UNUSED\n ix86_stack_protect_fail (void)\n {\n   return TARGET_64BIT\n@@ -35407,8 +35407,10 @@ ix86_autovectorize_vector_sizes (void)\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE ix86_mangle_type\n \n+#ifndef TARGET_MACHO\n #undef TARGET_STACK_PROTECT_FAIL\n #define TARGET_STACK_PROTECT_FAIL ix86_stack_protect_fail\n+#endif\n \n #undef TARGET_SUPPORTS_SPLIT_STACK\n #define TARGET_SUPPORTS_SPLIT_STACK ix86_supports_split_stack"}, {"sha": "4827c26f19d7901b501a6fdaf4a2c45da2207be2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ee610fcd4d08b101e426b13827d70b8a387e0498", "patch": "@@ -884,7 +884,7 @@ static bool legitimate_lo_sum_address_p (enum machine_mode, rtx, int);\n static struct machine_function * rs6000_init_machine_status (void);\n static bool rs6000_assemble_integer (rtx, unsigned int, int);\n static bool no_global_regs_above (int, bool);\n-#ifdef HAVE_GAS_HIDDEN\n+#if defined (HAVE_GAS_HIDDEN) && !defined (TARGET_MACHO)\n static void rs6000_assemble_visibility (tree, int);\n #endif\n static int rs6000_ra_ever_killed (void);\n@@ -1349,7 +1349,7 @@ static const struct default_options rs6000_option_optimization_table[] =\n #undef TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER rs6000_assemble_integer\n \n-#ifdef HAVE_GAS_HIDDEN\n+#if defined (HAVE_GAS_HIDDEN) && !defined (TARGET_MACHO)\n #undef TARGET_ASM_ASSEMBLE_VISIBILITY\n #define TARGET_ASM_ASSEMBLE_VISIBILITY rs6000_assemble_visibility\n #endif\n@@ -1558,8 +1558,10 @@ static const struct default_options rs6000_option_optimization_table[] =\n #define TARGET_DEFAULT_TARGET_FLAGS \\\n   (TARGET_DEFAULT)\n \n+#ifndef TARGET_MACHO\n #undef TARGET_STACK_PROTECT_FAIL\n #define TARGET_STACK_PROTECT_FAIL rs6000_stack_protect_fail\n+#endif\n \n /* MPC604EUM 3.5.2 Weak Consistency between Multiple Processors\n    The PowerPC architecture requires only weak consistency among\n@@ -16390,7 +16392,7 @@ rs6000_assemble_integer (rtx x, unsigned int size, int aligned_p)\n   return default_assemble_integer (x, size, aligned_p);\n }\n \n-#ifdef HAVE_GAS_HIDDEN\n+#if defined (HAVE_GAS_HIDDEN) && !defined (TARGET_MACHO)\n /* Emit an assembler directive to set symbol visibility for DECL to\n    VISIBILITY_TYPE.  */\n \n@@ -27323,7 +27325,7 @@ invalid_arg_for_unprototyped_fn (const_tree typelist, const_tree funcdecl, const\n    calling __stack_chk_fail directly.  Otherwise it is better to call\n    __stack_chk_fail directly.  */\n \n-static tree\n+static tree ATTRIBUTE_UNUSED\n rs6000_stack_protect_fail (void)\n {\n   return (DEFAULT_ABI == ABI_V4 && TARGET_SECURE_PLT && flag_pic)"}, {"sha": "cc4843188d817d983850368d3080556ff512a06e", "filename": "gcc/configure", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=ee610fcd4d08b101e426b13827d70b8a387e0498", "patch": "@@ -21708,6 +21708,12 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_hidden\" >&5\n $as_echo \"$gcc_cv_as_hidden\" >&6; }\n \n+case \"${target}\" in\n+  *-*-darwin*)\n+    # Darwin as has some visibility support, though with a different syntax.\n+    gcc_cv_as_hidden=yes\n+    ;;\n+esac\n \n # gnu_indirect_function type is an extension proposed at\n # http://groups.google/com/group/generic-abi/files. It allows dynamic runtime\n@@ -21812,6 +21818,10 @@ else\n     fi\n   else\n     case \"${target}\" in\n+      *-*-darwin*)\n+\t# Darwin ld has some visibility support.\n+\tgcc_cv_ld_hidden=yes\n+        ;;\n       hppa64*-*-hpux* | ia64*-*-hpux*)\n \tgcc_cv_ld_hidden=yes\n \t;;"}, {"sha": "70b3dbc6223f97999c2d043d3c22287fe8994c79", "filename": "gcc/configure.ac", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=ee610fcd4d08b101e426b13827d70b8a387e0498", "patch": "@@ -2192,6 +2192,12 @@ EOF\n     gcc_cv_as_hidden=yes\n     ;;\n esac])\n+case \"${target}\" in\n+  *-*-darwin*)\n+    # Darwin as has some visibility support, though with a different syntax.\n+    gcc_cv_as_hidden=yes\n+    ;;\n+esac\n \n # gnu_indirect_function type is an extension proposed at\n # http://groups.google/com/group/generic-abi/files. It allows dynamic runtime\n@@ -2291,6 +2297,10 @@ else\n     fi\n   else\n     case \"${target}\" in\n+      *-*-darwin*)\n+\t# Darwin ld has some visibility support.\n+\tgcc_cv_ld_hidden=yes\n+        ;;\n       hppa64*-*-hpux* | ia64*-*-hpux*)\n \tgcc_cv_ld_hidden=yes\n \t;;"}, {"sha": "4c1b6d4e66b29b60bd52078d83fd01e7b70286ba", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee610fcd4d08b101e426b13827d70b8a387e0498/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=ee610fcd4d08b101e426b13827d70b8a387e0498", "patch": "@@ -1,5 +1,5 @@\n /* Dwarf2 assembler output helper routines.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -915,14 +915,13 @@ dw2_output_indirect_constant_1 (splay_tree_node node,\n     {\n       TREE_PUBLIC (decl) = 1;\n       make_decl_one_only (decl, DECL_ASSEMBLER_NAME (decl));\n+      if (USE_LINKONCE_INDIRECT)\n+\tDECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n     }\n   else\n     TREE_STATIC (decl) = 1;\n \n   sym_ref = gen_rtx_SYMBOL_REF (Pmode, sym);\n-  sym = targetm.strip_name_encoding (sym);\n-  if (TREE_PUBLIC (decl) && USE_LINKONCE_INDIRECT)\n-    fprintf (asm_out_file, \"\\t.hidden %sDW.ref.%s\\n\", user_label_prefix, sym);\n   assemble_variable (decl, 1, 1, 1);\n   assemble_integer (sym_ref, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n "}]}