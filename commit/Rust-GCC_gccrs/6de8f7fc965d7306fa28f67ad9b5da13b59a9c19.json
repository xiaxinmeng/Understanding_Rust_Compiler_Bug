{"sha": "6de8f7fc965d7306fa28f67ad9b5da13b59a9c19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRlOGY3ZmM5NjVkNzMwNmZhMjhmNjdhZDliNWRhMTNiNTlhOWMxOQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-14T16:44:50Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-14T16:44:50Z"}, "message": "cppmain.c (do_preprocessing): New function; most of the old main.\n\n        * cppmain.c (do_preprocessing): New function; most of the old\n        main.\n        (main): Call it to do most of the work.\n        (cb): Move from global scope to set_callbacks ().\n        (setup_callbacks): Get the callback pointer.\n        (general_init, printer_init): Clean up code and comments.\n\nFrom-SVN: r39012", "tree": {"sha": "7493d396995298136f8f7926dbf43e43b7cd124e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7493d396995298136f8f7926dbf43e43b7cd124e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6de8f7fc965d7306fa28f67ad9b5da13b59a9c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de8f7fc965d7306fa28f67ad9b5da13b59a9c19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de8f7fc965d7306fa28f67ad9b5da13b59a9c19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de8f7fc965d7306fa28f67ad9b5da13b59a9c19/comments", "author": null, "committer": null, "parents": [{"sha": "17879734ac2a2e256b5be66ca65644a713da0288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17879734ac2a2e256b5be66ca65644a713da0288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17879734ac2a2e256b5be66ca65644a713da0288"}], "stats": {"total": 131, "additions": 80, "deletions": 51}, "files": [{"sha": "f2fd1b5285b297ec43decb9db71dfc373b9dc446", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de8f7fc965d7306fa28f67ad9b5da13b59a9c19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de8f7fc965d7306fa28f67ad9b5da13b59a9c19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6de8f7fc965d7306fa28f67ad9b5da13b59a9c19", "patch": "@@ -1,3 +1,12 @@\n+2001-01-14  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cppmain.c (do_preprocessing): New function; most of the old\n+        main.\n+        (main): Call it to do most of the work.\n+        (cb): Move from global scope to set_callbacks ().\n+        (setup_callbacks): Get the callback pointer.\n+        (general_init, printer_init): Clean up code and comments.\n+\n 2001-01-14  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/semi.h (ASM_SPEC): Pass -k to the assembler when "}, {"sha": "c69e9fa789b9146aa97561df4679c8e085a8e31a", "filename": "gcc/cppmain.c", "status": "modified", "additions": 71, "deletions": 51, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de8f7fc965d7306fa28f67ad9b5da13b59a9c19/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de8f7fc965d7306fa28f67ad9b5da13b59a9c19/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=6de8f7fc965d7306fa28f67ad9b5da13b59a9c19", "patch": "@@ -39,6 +39,7 @@ struct printer\n \n int main\t\tPARAMS ((int, char **));\n static void general_init PARAMS ((const char *));\n+static void do_preprocessing PARAMS ((int, char **));\n static void setup_callbacks PARAMS ((void));\n \n /* General output routines.  */\n@@ -63,67 +64,24 @@ static void cb_def_pragma PARAMS ((cpp_reader *));\n const char *progname;\t\t/* Needs to be global.  */\n static cpp_reader *pfile;\t/* An opaque handle.  */\n static cpp_options *options;\t/* Options of pfile.  */\n-static cpp_callbacks *cb;\t/* Callbacks of pfile.  */\n static struct printer print;\n \n int\n main (argc, argv)\n      int argc;\n      char **argv;\n {\n-  int argi = 1;  /* Next argument to handle.  */\n-\n   general_init (argv[0]);\n-  /* Default language is GNU C89.  */\n+\n+  /* Contruct a reader with default language GNU C89.  */\n   pfile = cpp_create_reader (CLK_GNUC89);\n   options = cpp_get_options (pfile);\n-  cb = cpp_get_callbacks (pfile);\n   \n-  argi += cpp_handle_options (pfile, argc - argi , argv + argi);\n-  if (argi < argc && ! CPP_FATAL_ERRORS (pfile))\n-    cpp_fatal (pfile, \"Invalid option %s\", argv[argi]);\n-  cpp_post_options (pfile);\n-  if (CPP_FATAL_ERRORS (pfile))\n-    return (FATAL_EXIT_CODE);\n-\n-  /* If cpp_handle_options saw --help or --version on the command\n-     line, it will have set pfile->help_only to indicate this.  Exit\n-     successfully.  [The library does not exit itself, because\n-     e.g. cc1 needs to print its own --help message at this point.]  */\n-  if (options->help_only)\n-    return (SUCCESS_EXIT_CODE);\n+  do_preprocessing (argc, argv);\n \n-  /* Open the output now.  We must do so even if no_output is on,\n-     because there may be other output than from the actual\n-     preprocessing (e.g. from -dM).  */\n-  if (printer_init (pfile))\n-    return (FATAL_EXIT_CODE);\n-\n-  setup_callbacks ();\n-\n-  if (! cpp_start_read (pfile, options->in_fname))\n-    return (FATAL_EXIT_CODE);\n-\n-  /* A successful cpp_start_read guarantees that we can call\n-     cpp_scan_buffer_nooutput or cpp_get_token next.  */\n-  if (options->no_output)\n-    cpp_scan_buffer_nooutput (pfile, 1);\n-  else\n-    scan_buffer (pfile);\n-\n-  /* -dM command line option.  */\n-  if (options->dump_macros == dump_only)\n-    cpp_forall_identifiers (pfile, dump_macro, NULL);\n-\n-  cpp_finish (pfile);\n+  /* Reader destructor.  */\n   cpp_cleanup (pfile);\n \n-  /* Flush any pending output.  */\n-  if (print.printed)\n-    putc ('\\n', print.outf);\n-  if (ferror (print.outf) || fclose (print.outf))\n-    cpp_notice_from_errno (pfile, options->out_fname);\n-\n   if (cpp_errors (pfile))\n     return FATAL_EXIT_CODE;\n \n@@ -141,8 +99,8 @@ general_init (const char *argv0)\n \n   xmalloc_set_program_name (progname);\n \n-/* LC_CTYPE determines the character set used by the terminal so it has be set\n-   to output messages correctly.  */\n+/* LC_CTYPE determines the character set used by the terminal so it\n+   has to be set to output messages correctly.  */\n \n #ifdef HAVE_LC_MESSAGES\n   setlocale (LC_CTYPE, \"\");\n@@ -155,10 +113,71 @@ general_init (const char *argv0)\n   (void) textdomain (PACKAGE);\n }\n \n+/* Handle switches, preprocess and output.  */\n+static void\n+do_preprocessing (argc, argv)\n+     int argc;\n+     char **argv;\n+{\n+  int argi = 1;  /* Next argument to handle.  */\n+\n+  argi += cpp_handle_options (pfile, argc - argi , argv + argi);\n+  if (CPP_FATAL_ERRORS (pfile))\n+    return;\n+\n+  if (argi < argc)\n+    cpp_fatal (pfile, \"Invalid option %s\", argv[argi]);\n+  else\n+    cpp_post_options (pfile);\n+\n+  if (CPP_FATAL_ERRORS (pfile))\n+    return;\n+\n+  /* If cpp_handle_options saw --help or --version on the command\n+     line, it will have set pfile->help_only to indicate this.  Exit\n+     successfully.  [The library does not exit itself, because\n+     e.g. cc1 needs to print its own --help message at this point.]  */\n+  if (options->help_only)\n+    return;\n+\n+  /* Open the output now.  We must do so even if no_output is on,\n+     because there may be other output than from the actual\n+     preprocessing (e.g. from -dM).  */\n+  if (printer_init (pfile))\n+    return;\n+\n+  setup_callbacks ();\n+\n+  if (cpp_start_read (pfile, options->in_fname))\n+    {\n+      /* A successful cpp_start_read guarantees that we can call\n+\t cpp_scan_buffer_nooutput or cpp_get_token next.  */\n+      if (options->no_output)\n+\tcpp_scan_buffer_nooutput (pfile, 1);\n+      else\n+\tscan_buffer (pfile);\n+\n+      /* -dM command line option.  Should this be in cpp_finish?  */\n+      if (options->dump_macros == dump_only)\n+\tcpp_forall_identifiers (pfile, dump_macro, NULL);\n+\n+      cpp_finish (pfile);\n+    }\n+\n+  /* Flush any pending output.  */\n+  if (print.printed)\n+    putc ('\\n', print.outf);\n+\n+  if (ferror (print.outf) || fclose (print.outf))\n+    cpp_notice_from_errno (pfile, options->out_fname);\n+}\n+\n /* Set up the callbacks as appropriate.  */\n static void\n setup_callbacks ()\n {\n+  cpp_callbacks *cb = cpp_get_callbacks (pfile);\n+\n   if (! options->no_output)\n     {\n       cb->ident      = cb_ident;\n@@ -264,10 +283,11 @@ printer_init (pfile)\n       print.outf = fopen (options->out_fname, \"w\");\n       if (! print.outf)\n \t{\n-\t  cpp_notice_from_errno (pfile, options-> out_fname);\n+\t  cpp_notice_from_errno (pfile, options->out_fname);\n \t  return 1;\n \t}\n     }\n+\n   return 0;\n }\n \n@@ -324,7 +344,7 @@ print_line (special_flags)\n \t   print.lineno, print.last_fname, special_flags, print.syshdr_flags);\n }\n \n-/* Callbacks */\n+/* Callbacks.  */\n \n static void\n cb_ident (pfile, str)"}]}