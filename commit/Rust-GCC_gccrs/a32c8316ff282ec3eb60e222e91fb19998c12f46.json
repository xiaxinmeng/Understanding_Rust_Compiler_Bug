{"sha": "a32c8316ff282ec3eb60e222e91fb19998c12f46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMyYzgzMTZmZjI4MmVjM2ViNjBlMjIyZTkxZmIxOTk5OGMxMmY0Ng==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-08-09T08:51:20Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-08-09T08:51:20Z"}, "message": "re PR c/81417 (-Wsign-compare should print types being compared)\n\n\tPR c/81417\n\t* c-array-notation.c (fix_builtin_array_notation_fn): Update calls to\n\tbuild_conditional_expr.\t\n\t* c-parser.c (c_parser_conditional_expression): Create locations for\n\tEXP1 and EXP2 from their source ranges.  Pass the locations down to\n\tbuild_conditional_expr.\n\t* c-tree.h (build_conditional_expr): Update declaration.\n\t* c-typeck.c (build_conditional_expr): Add location_t parameters.\n\tFor -Wsign-compare, also print the types.\n\n\t* input.c (make_location): New overload.\n\t* input.h (make_location): Declare.\n\n\t* objc-next-runtime-abi-02.c (build_v2_build_objc_method_call): Update\n\ta call to build_conditional_expr.\n\n\t* Wsign-compare-1.c: New test.\n\t* gcc.dg/compare1.c: Adjust dg-bogus.\n\t* gcc.dg/compare2.c: Likewise.\n\t* gcc.dg/compare3.c: Likewise.\n\t* gcc.dg/compare7.c: Likewise.\n\t* gcc.dg/compare8.c: Likewise.\n\t* gcc.dg/compare9.c: Likewise.\n\t* gcc.dg/pr11492.c: Likewise.\n\nFrom-SVN: r250984", "tree": {"sha": "5c9606b760b22332192173cec1c9c8ba76d9dcb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c9606b760b22332192173cec1c9c8ba76d9dcb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a32c8316ff282ec3eb60e222e91fb19998c12f46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32c8316ff282ec3eb60e222e91fb19998c12f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32c8316ff282ec3eb60e222e91fb19998c12f46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32c8316ff282ec3eb60e222e91fb19998c12f46/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc47a525cbd41692135f24607a52bd42e93400cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc47a525cbd41692135f24607a52bd42e93400cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc47a525cbd41692135f24607a52bd42e93400cb"}], "stats": {"total": 332, "additions": 240, "deletions": 92}, "files": [{"sha": "b906e6016d2fe3fdca92ca080adbf93a0a5a8c82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -1,3 +1,9 @@\n+2017-08-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/81417\n+\t* input.c (make_location): New overload.\n+\t* input.h (make_location): Declare.\n+\n 2017-08-08  Alan Modra  <amodra@gmail.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "580cda00d3f2ca7d1612f152b7f0059914b4c307", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -1,3 +1,15 @@\n+2017-08-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/81417\n+\t* c-array-notation.c (fix_builtin_array_notation_fn): Update calls to\n+\tbuild_conditional_expr.\t\n+\t* c-parser.c (c_parser_conditional_expression): Create locations for\n+\tEXP1 and EXP2 from their source ranges.  Pass the locations down to\n+\tbuild_conditional_expr.\n+\t* c-tree.h (build_conditional_expr): Update declaration.\n+\t* c-typeck.c (build_conditional_expr): Add location_t parameters.\n+\tFor -Wsign-compare, also print the types.\n+\n 2017-08-08  Martin Liska  <mliska@suse.cz>\n \n \t* c-convert.c: Include header files."}, {"sha": "40f1cfdabb82b7fddf62247ffc07ad8f949fd700", "filename": "gcc/c/c-array-notation.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fc%2Fc-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fc%2Fc-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-array-notation.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -355,8 +355,9 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n       new_cond_expr = build2 (NE_EXPR, TREE_TYPE (func_parm), func_parm,\n \t\t\t      build_zero_cst (TREE_TYPE (func_parm)));\n       new_expr = build_conditional_expr\n-\t(location, new_cond_expr, false, new_yes_expr,\n-\t TREE_TYPE (new_yes_expr), new_no_expr, TREE_TYPE (new_no_expr));\n+\t(location, new_cond_expr, false,\n+\t new_yes_expr, TREE_TYPE (new_yes_expr), location,\n+\t new_no_expr, TREE_TYPE (new_no_expr), location);\n       break;\n     case BUILT_IN_CILKPLUS_SEC_REDUCE_ALL_NONZERO:\n       new_var_init = build_modify_expr\n@@ -375,8 +376,9 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n       new_cond_expr = build2 (EQ_EXPR, TREE_TYPE (func_parm), func_parm,\n \t\t\t      build_zero_cst (TREE_TYPE (func_parm)));\n       new_expr = build_conditional_expr\n-\t(location, new_cond_expr, false, new_yes_expr,\n-\t TREE_TYPE (new_yes_expr), new_no_expr, TREE_TYPE (new_no_expr));\n+\t(location, new_cond_expr, false,\n+\t new_yes_expr, TREE_TYPE (new_yes_expr), location,\n+\t new_no_expr, TREE_TYPE (new_no_expr), location);\n       break;\n     case BUILT_IN_CILKPLUS_SEC_REDUCE_ANY_ZERO:\n       new_var_init = build_modify_expr\n@@ -394,8 +396,9 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n       new_cond_expr = build2 (EQ_EXPR, TREE_TYPE (func_parm), func_parm,\n \t\t\t      build_zero_cst (TREE_TYPE (func_parm)));\n       new_expr = build_conditional_expr\n-\t(location, new_cond_expr, false, new_yes_expr,\n-\t TREE_TYPE (new_yes_expr), new_no_expr, TREE_TYPE (new_no_expr));   \n+\t(location, new_cond_expr, false,\n+\t new_yes_expr, TREE_TYPE (new_yes_expr), location,\n+\t new_no_expr, TREE_TYPE (new_no_expr), location);\n       break;\n     case BUILT_IN_CILKPLUS_SEC_REDUCE_ANY_NONZERO:\n       new_var_init = build_modify_expr\n@@ -413,8 +416,9 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n       new_cond_expr = build2 (NE_EXPR, TREE_TYPE (func_parm), func_parm,\n \t\t\t      build_zero_cst (TREE_TYPE (func_parm)));\n       new_expr = build_conditional_expr\n-\t(location, new_cond_expr, false, new_yes_expr,\n-\t TREE_TYPE (new_yes_expr), new_no_expr, TREE_TYPE (new_no_expr));   \n+\t(location, new_cond_expr, false,\n+\t new_yes_expr, TREE_TYPE (new_yes_expr), location,\n+\t new_no_expr, TREE_TYPE (new_no_expr), location);\n       break;\n     case BUILT_IN_CILKPLUS_SEC_REDUCE_MAX:\n       if (TYPE_MIN_VALUE (new_var_type))\n@@ -434,7 +438,8 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n       new_expr = build_conditional_expr\n \t(location,\n \t build2 (LT_EXPR, TREE_TYPE (*new_var), *new_var, func_parm), false,\n-\t new_yes_expr, TREE_TYPE (*new_var), new_no_expr, TREE_TYPE (*new_var));\n+\t new_yes_expr, TREE_TYPE (*new_var), location,\n+\t new_no_expr, TREE_TYPE (*new_var), location);\n       break;\n     case BUILT_IN_CILKPLUS_SEC_REDUCE_MIN:\n       if (TYPE_MAX_VALUE (new_var_type))\n@@ -454,7 +459,8 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n       new_expr = build_conditional_expr\n \t(location,\n \t build2 (GT_EXPR, TREE_TYPE (*new_var), *new_var, func_parm), false,\n-\t new_yes_expr, TREE_TYPE (*new_var), new_no_expr, TREE_TYPE (*new_var));\n+\t new_yes_expr, TREE_TYPE (*new_var), location,\n+\t new_no_expr, TREE_TYPE (*new_var), location);\n       break;\n     case BUILT_IN_CILKPLUS_SEC_REDUCE_MAX_IND:\n       new_var_init = build_modify_expr\n@@ -504,7 +510,8 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n \t build2 (LE_EXPR, TREE_TYPE (array_ind_value), array_ind_value,\n \t\t func_parm),\n \t false,\n-\t new_yes_list, TREE_TYPE (*new_var), new_no_list, TREE_TYPE (*new_var));\n+\t new_yes_list, TREE_TYPE (*new_var), location,\n+\t new_no_list, TREE_TYPE (*new_var), location);\n       break;\n     case BUILT_IN_CILKPLUS_SEC_REDUCE_MIN_IND:\n       new_var_init = build_modify_expr\n@@ -554,7 +561,8 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n \t build2 (GE_EXPR, TREE_TYPE (array_ind_value), array_ind_value,\n \t\t func_parm),\n \t false,\n-\t new_yes_list, TREE_TYPE (*new_var), new_no_list, TREE_TYPE (*new_var));\n+\t new_yes_list, TREE_TYPE (*new_var), location,\n+\t new_no_list, TREE_TYPE (*new_var), location);\n       break;\n     case BUILT_IN_CILKPLUS_SEC_REDUCE:\n       new_var_init = build_modify_expr"}, {"sha": "6d40a97d5f569fe3f81c4abe43109732376b257f", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -6511,7 +6511,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after,\n \t\t\t\t tree omp_atomic_lhs)\n {\n   struct c_expr cond, exp1, exp2, ret;\n-  location_t start, cond_loc, colon_loc, middle_loc;\n+  location_t start, cond_loc, colon_loc;\n \n   gcc_assert (!after || c_dialect_objc ());\n \n@@ -6530,7 +6530,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after,\n     {\n       tree eptype = NULL_TREE;\n \n-      middle_loc = c_parser_peek_token (parser)->location;\n+      location_t middle_loc = c_parser_peek_token (parser)->location;\n       pedwarn (middle_loc, OPT_Wpedantic,\n \t       \"ISO C forbids omitting the middle term of a ?: expression\");\n       if (TREE_CODE (cond.value) == EXCESS_PRECISION_EXPR)\n@@ -6547,6 +6547,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after,\n       if (eptype)\n \texp1.value = build1 (EXCESS_PRECISION_EXPR, eptype, exp1.value);\n       exp1.original_type = NULL;\n+      exp1.src_range = cond.src_range;\n       cond.value = c_objc_common_truthvalue_conversion (cond_loc, exp1.value);\n       c_inhibit_evaluation_warnings += cond.value == truthvalue_true_node;\n     }\n@@ -6578,10 +6579,12 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after,\n     exp2 = convert_lvalue_to_rvalue (exp2_loc, exp2, true, true);\n   }\n   c_inhibit_evaluation_warnings -= cond.value == truthvalue_true_node;\n+  location_t loc1 = make_location (exp1.get_start (), exp1.src_range);\n+  location_t loc2 = make_location (exp2.get_start (), exp2.src_range);\n   ret.value = build_conditional_expr (colon_loc, cond.value,\n \t\t\t\t      cond.original_code == C_MAYBE_CONST_EXPR,\n-\t\t\t\t      exp1.value, exp1.original_type,\n-\t\t\t\t      exp2.value, exp2.original_type);\n+\t\t\t\t      exp1.value, exp1.original_type, loc1,\n+\t\t\t\t      exp2.value, exp2.original_type, loc2);\n   ret.original_code = ERROR_MARK;\n   if (exp1.value == error_mark_node || exp2.value == error_mark_node)\n     ret.original_type = NULL;"}, {"sha": "be2f272d2dd67e2e4fd42da3e2c7865588059c54", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -644,7 +644,7 @@ extern struct c_expr parser_build_binary_op (location_t,\n     \t\t\t\t\t     enum tree_code, struct c_expr,\n \t\t\t\t\t     struct c_expr);\n extern tree build_conditional_expr (location_t, tree, bool, tree, tree,\n-\t\t\t\t    tree, tree);\n+\t\t\t\t    location_t, tree, tree, location_t);\n extern tree build_compound_expr (location_t, tree, tree);\n extern tree c_cast_expr (location_t, struct c_type_name *, tree);\n extern tree build_c_cast (location_t, tree, tree);"}, {"sha": "8033a8190f3938b6e0a603160e90ac4c87d3004b", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -4865,8 +4865,8 @@ ep_convert_and_check (location_t loc, tree type, tree expr,\n \n tree\n build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n-\t\t\ttree op1, tree op1_original_type, tree op2,\n-\t\t\ttree op2_original_type)\n+\t\t\ttree op1, tree op1_original_type, location_t op1_loc,\n+\t\t\ttree op2, tree op2_original_type, location_t op2_loc)\n {\n   tree type1;\n   tree type2;\n@@ -5031,10 +5031,18 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n \t\t\t  || (unsigned_op1\n \t\t\t      && tree_expr_nonnegative_warnv_p (op2, &ovf)))\n \t\t\t/* OK */;\n+\t\t      else if (unsigned_op2)\n+\t\t\twarning_at (op1_loc, OPT_Wsign_compare,\n+\t\t\t\t    \"operand of ?: changes signedness from \"\n+\t\t\t\t    \"%qT to %qT due to unsignedness of other \"\n+\t\t\t\t    \"operand\", TREE_TYPE (orig_op1),\n+\t\t\t\t    TREE_TYPE (orig_op2));\n \t\t      else\n-\t\t\twarning_at (colon_loc, OPT_Wsign_compare,\n-\t\t\t\t    (\"signed and unsigned type in \"\n-\t\t\t\t     \"conditional expression\"));\n+\t\t\twarning_at (op2_loc, OPT_Wsign_compare,\n+\t\t\t\t    \"operand of ?: changes signedness from \"\n+\t\t\t\t    \"%qT to %qT due to unsignedness of other \"\n+\t\t\t\t    \"operand\", TREE_TYPE (orig_op2),\n+\t\t\t\t    TREE_TYPE (orig_op1));\n \t\t    }\n \t\t  if (!op1_maybe_const || TREE_CODE (op1) != INTEGER_CST)\n \t\t    op1 = c_wrap_maybe_const (op1, !op1_maybe_const);"}, {"sha": "a01c504fe57d4ff2adf9f6160334fcbfaee1fe41", "filename": "gcc/input.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -898,6 +898,15 @@ make_location (location_t caret, location_t start, location_t finish)\n   return combined_loc;\n }\n \n+/* Same as above, but taking a source range rather than two locations.  */\n+\n+location_t\n+make_location (location_t caret, source_range src_range)\n+{\n+  location_t pure_loc = get_pure_location (caret);\n+  return COMBINE_LOCATION_DATA (line_table, pure_loc, src_range, NULL);\n+}\n+\n #define ONE_K 1024\n #define ONE_M (ONE_K * ONE_K)\n "}, {"sha": "f58d248834228cea17b15c2b73b155e32dec1153", "filename": "gcc/input.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -109,6 +109,7 @@ get_finish (location_t loc)\n \n extern location_t make_location (location_t caret,\n \t\t\t\t location_t start, location_t finish);\n+extern location_t make_location (location_t caret, source_range src_range);\n \n void dump_line_table_statistics (void);\n "}, {"sha": "0fc51e65bdddd1309af5747566c32fb4895df17d", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -1,3 +1,9 @@\n+2017-08-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/81417\n+\t* objc-next-runtime-abi-02.c (build_v2_build_objc_method_call): Update\n+\ta call to build_conditional_expr.\n+\n 2017-08-08  Martin Liska  <mliska@suse.cz>\n \n \t* objc-gnu-runtime-abi-01.c: Include header files."}, {"sha": "0e7fd545650698133cf9a596e91105bc5208fb35", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -1647,8 +1647,8 @@ build_v2_build_objc_method_call (int super_flag, tree method_prototype,\n      /* ??? CHECKME.   */\n       ret_val = build_conditional_expr (input_location,\n \t\t\t\t\tifexp, 1,\n-\t\t\t\t\tret_val, NULL_TREE,\n-\t\t\t\t\tftree, NULL_TREE);\n+\t\t\t\t\tret_val, NULL_TREE, input_location,\n+\t\t\t\t\tftree, NULL_TREE, input_location);\n #endif\n     }\n   return ret_val;"}, {"sha": "7a55e2007325a252a75f8ad334d93f2de33b8326", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -1,3 +1,15 @@\n+2017-08-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/81417\n+\t* Wsign-compare-1.c: New test.\n+\t* gcc.dg/compare1.c: Adjust dg-bogus.\n+\t* gcc.dg/compare2.c: Likewise.\n+\t* gcc.dg/compare3.c: Likewise.\n+\t* gcc.dg/compare7.c: Likewise.\n+\t* gcc.dg/compare8.c: Likewise.\n+\t* gcc.dg/compare9.c: Likewise.\n+\t* gcc.dg/pr11492.c: Likewise.\n+\n 2017-08-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR driver/81523"}, {"sha": "be3bd2fcbd8d9febc336e72cac8b9165d2e3ca06", "filename": "gcc/testsuite/gcc.dg/Wsign-compare-1.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-compare-1.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -0,0 +1,83 @@\n+/* PR c/81417 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsign-compare -fdiagnostics-show-caret\" } */\n+\n+unsigned int\n+f0 (int x, unsigned int y)\n+{\n+  return x ? y : -1; /* { dg-warning \"18:operand of \\\\?: changes signedness from 'int' to 'unsigned int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return x ? y : -1;\n+                  ^~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+unsigned int\n+f1 (int xxx, unsigned int yyy)\n+{\n+  return xxx ? yyy : -1; /* { dg-warning \"22:operand of \\\\?: changes signedness from 'int' to 'unsigned int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return xxx ? yyy : -1;\n+                      ^~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+unsigned int\n+f2 (int xxx, unsigned int yyy)\n+{\n+  return xxx ? -1 : yyy; /* { dg-warning \"16:operand of \\\\?: changes signedness from 'int' to 'unsigned int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return xxx ? -1 : yyy;\n+                ^~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+unsigned int\n+f3 (unsigned int yyy)\n+{\n+  return yyy ?: -1; /* { dg-warning \"17:operand of \\\\?: changes signedness from 'int' to 'unsigned int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return yyy ?: -1;\n+                 ^~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+unsigned int\n+f4 (int xxx, unsigned yyy, short uuu)\n+{\n+  return xxx ? yyy : uuu; /* { dg-warning \"22:operand of \\\\?: changes signedness from 'short int' to 'unsigned int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return xxx ? yyy : uuu;\n+                      ^~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+unsigned int\n+f5 (int xxx, unsigned yyy, short uuu)\n+{\n+  return xxx ? uuu : yyy; /* { dg-warning \"16:operand of \\\\?: changes signedness from 'short int' to 'unsigned int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return xxx ? uuu : yyy;\n+                ^~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+unsigned int\n+f6 (int xxx, unsigned yyy, signed char uuu)\n+{\n+  return xxx ? yyy : uuu; /* { dg-warning \"22:operand of \\\\?: changes signedness from 'signed char' to 'unsigned int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return xxx ? yyy : uuu;\n+                      ^~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+unsigned int\n+f7 (int xxx, unsigned yyy, signed char uuu)\n+{\n+  return xxx ? uuu : yyy; /* { dg-warning \"16:operand of \\\\?: changes signedness from 'signed char' to 'unsigned int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return xxx ? uuu : yyy;\n+                ^~~\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "ebab8c2cbf7ee60bf9c8ba3c474564b709e1e5c5", "filename": "gcc/testsuite/gcc.dg/compare1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare1.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -22,17 +22,17 @@ enum mm2\n \n int f(enum mm1 x)\n {\n-  return x == (tf?DI:SI); /* { dg-bogus \"signed and unsigned\" \"case 1\" } */\n+  return x == (tf?DI:SI); /* { dg-bogus \"changes signedness\" \"case 1\" } */\n }\n \n int g(enum mm1 x)\n {\n-  return x == (tf?DI:-1); /* { dg-bogus \"signed and unsigned\" \"case 2\" } */\n+  return x == (tf?DI:-1); /* { dg-bogus \"changes signedness\" \"case 2\" } */\n }\n \n int h(enum mm2 x)\n {\n-  return x == (tf?DI2:SI2); /* { dg-bogus \"signed and unsigned\" \"case 3\" } */\n+  return x == (tf?DI2:SI2); /* { dg-bogus \"changes signedness\" \"case 3\" } */\n }\n \n int i(enum mm2 x)"}, {"sha": "cfadaccb8af3fbf96ba71a253c027130e7edaeea", "filename": "gcc/testsuite/gcc.dg/compare2.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare2.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -9,35 +9,35 @@ int tf = 1;\n void f(int x, unsigned int y)\n {\n   /* ?: branches are constants.  */\n-  x > (tf?64:128); /* { dg-bogus \"signed and unsigned\" \"case 1\" } */\n-  y > (tf?64:128); /* { dg-bogus \"signed and unsigned\" \"case 2\" } */\n+  x > (tf?64:128); /* { dg-bogus \"changes signedness\" \"case 1\" } */\n+  y > (tf?64:128); /* { dg-bogus \"changes signedness\" \"case 2\" } */\n \n   /* ?: branches are (recursively) constants.  */\n-  x > (tf?64:(tf?128:256)); /* { dg-bogus \"signed and unsigned\" \"case 3\" } */\n-  y > (tf?64:(tf?128:256)); /* { dg-bogus \"signed and unsigned\" \"case 4\" } */\n+  x > (tf?64:(tf?128:256)); /* { dg-bogus \"changes signedness\" \"case 3\" } */\n+  y > (tf?64:(tf?128:256)); /* { dg-bogus \"changes signedness\" \"case 4\" } */\n \n   /* ?: branches are signed constants.  */\n-  x > (tf?64:-1); /* { dg-bogus \"signed and unsigned\" \"case 5\" } */\n+  x > (tf?64:-1); /* { dg-bogus \"changes signedness\" \"case 5\" } */\n   y > (tf?64:-1); /* { dg-warning \"different signedness\" \"case 6\" } */\n \n   /* ?: branches are (recursively) signed constants.  */\n-  x > (tf?64:(tf?128:-1)); /* { dg-bogus \"signed and unsigned\" \"case 7\" } */\n+  x > (tf?64:(tf?128:-1)); /* { dg-bogus \"changes signedness\" \"case 7\" } */\n   y > (tf?64:(tf?128:-1)); /* { dg-warning \"different signedness\" \"case 8\" } */\n \n   /* Statement expression.  */\n-  x > ({tf; 64;}); /* { dg-bogus \"signed and unsigned\" \"case 9\" } */\n-  y > ({tf; 64;}); /* { dg-bogus \"signed and unsigned\" \"case 10\" } */\n+  x > ({tf; 64;}); /* { dg-bogus \"changes signedness\" \"case 9\" } */\n+  y > ({tf; 64;}); /* { dg-bogus \"changes signedness\" \"case 10\" } */\n \n   /* Statement expression with recursive ?: .  */\n-  x > ({tf; tf?64:(tf?128:256);}); /* { dg-bogus \"signed and unsigned\" \"case 11\" } */\n-  y > ({tf; tf?64:(tf?128:256);}); /* { dg-bogus \"signed and unsigned\" \"case 12\" } */\n+  x > ({tf; tf?64:(tf?128:256);}); /* { dg-bogus \"changes signedness\" \"case 11\" } */\n+  y > ({tf; tf?64:(tf?128:256);}); /* { dg-bogus \"changes signedness\" \"case 12\" } */\n \n   /* Statement expression with signed ?:.  */\n-  x > ({tf; tf?64:-1;}); /* { dg-bogus \"signed and unsigned\" \"case 13\" } */\n+  x > ({tf; tf?64:-1;}); /* { dg-bogus \"changes signedness\" \"case 13\" } */\n   y > ({tf; tf?64:-1;}); /* { dg-warning \"different signedness\" \"case 14\" } */\n \n   /* Statement expression with recursive signed ?:.  */\n-  x > ({tf; tf?64:(tf?128:-1);}); /* { dg-bogus \"signed and unsigned\" \"case 15\" } */\n+  x > ({tf; tf?64:(tf?128:-1);}); /* { dg-bogus \"changes signedness\" \"case 15\" } */\n   y > ({tf; tf?64:(tf?128:-1);}); /* { dg-warning \"different signedness\" \"case 16\" } */\n \n   /* ?: branches are constants.  */"}, {"sha": "836231fb8704072b5105a1c8b2ad63a6834aa67b", "filename": "gcc/testsuite/gcc.dg/compare3.c", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare3.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -11,49 +11,49 @@ void f(int x, unsigned int y)\n   /* Test comparing conditional expressions containing truth values.\n      This can occur explicitly, or e.g. when (foo?2:(bar?1:0)) is\n      optimized into (foo?2:(bar!=0)).  */\n-  x > (tf?64:(tf!=x)); /* { dg-bogus \"signed and unsigned\" \"case 1\" } */\n-  y > (tf?64:(tf!=x)); /* { dg-bogus \"signed and unsigned\" \"case 2\" } */\n-  x > (tf?(tf!=x):64); /* { dg-bogus \"signed and unsigned\" \"case 3\" } */\n-  y > (tf?(tf!=x):64); /* { dg-bogus \"signed and unsigned\" \"case 4\" } */\n-\n-  x > (tf?64:(tf==x)); /* { dg-bogus \"signed and unsigned\" \"case 5\" } */\n-  y > (tf?64:(tf==x)); /* { dg-bogus \"signed and unsigned\" \"case 6\" } */\n-  x > (tf?(tf==x):64); /* { dg-bogus \"signed and unsigned\" \"case 7\" } */\n-  y > (tf?(tf==x):64); /* { dg-bogus \"signed and unsigned\" \"case 8\" } */\n-\n-  x > (tf?64:(tf>x)); /* { dg-bogus \"signed and unsigned\" \"case 9\" } */\n-  y > (tf?64:(tf>x)); /* { dg-bogus \"signed and unsigned\" \"case 10\" } */\n-  x > (tf?(tf>x):64); /* { dg-bogus \"signed and unsigned\" \"case 11\" } */\n-  y > (tf?(tf>x):64); /* { dg-bogus \"signed and unsigned\" \"case 12\" } */\n-\n-  x < (tf?64:(tf<x)); /* { dg-bogus \"signed and unsigned\" \"case 13\" } */\n-  y < (tf?64:(tf<x)); /* { dg-bogus \"signed and unsigned\" \"case 14\" } */\n-  x < (tf?(tf<x):64); /* { dg-bogus \"signed and unsigned\" \"case 15\" } */\n-  y < (tf?(tf<x):64); /* { dg-bogus \"signed and unsigned\" \"case 16\" } */\n-\n-  x > (tf?64:(tf>=x)); /* { dg-bogus \"signed and unsigned\" \"case 17\" } */\n-  y > (tf?64:(tf>=x)); /* { dg-bogus \"signed and unsigned\" \"case 18\" } */\n-  x > (tf?(tf>=x):64); /* { dg-bogus \"signed and unsigned\" \"case 19\" } */\n-  y > (tf?(tf>=x):64); /* { dg-bogus \"signed and unsigned\" \"case 20\" } */\n-\n-  x > (tf?64:(tf<=x)); /* { dg-bogus \"signed and unsigned\" \"case 21\" } */\n-  y > (tf?64:(tf<=x)); /* { dg-bogus \"signed and unsigned\" \"case 22\" } */\n-  x > (tf?(tf<=x):64); /* { dg-bogus \"signed and unsigned\" \"case 23\" } */\n-  y > (tf?(tf<=x):64); /* { dg-bogus \"signed and unsigned\" \"case 24\" } */\n-\n-  x > (tf?64:(tf&&x)); /* { dg-bogus \"signed and unsigned\" \"case 25\" } */\n-  y > (tf?64:(tf&&x)); /* { dg-bogus \"signed and unsigned\" \"case 26\" } */\n-  x > (tf?(tf&&x):64); /* { dg-bogus \"signed and unsigned\" \"case 27\" } */\n-  y > (tf?(tf&&x):64); /* { dg-bogus \"signed and unsigned\" \"case 28\" } */\n-\n-  x > (tf?64:(tf||x)); /* { dg-bogus \"signed and unsigned\" \"case 29\" } */\n-  y > (tf?64:(tf||x)); /* { dg-bogus \"signed and unsigned\" \"case 30\" } */\n-  x > (tf?(tf||x):64); /* { dg-bogus \"signed and unsigned\" \"case 31\" } */\n-  y > (tf?(tf||x):64); /* { dg-bogus \"signed and unsigned\" \"case 32\" } */\n-\n-  x > (tf?64:(!tf)); /* { dg-bogus \"signed and unsigned\" \"case 33\" } */\n-  y > (tf?64:(!tf)); /* { dg-bogus \"signed and unsigned\" \"case 34\" } */\n-  x > (tf?(!tf):64); /* { dg-bogus \"signed and unsigned\" \"case 35\" } */\n-  y > (tf?(!tf):64); /* { dg-bogus \"signed and unsigned\" \"case 36\" } */\n+  x > (tf?64:(tf!=x)); /* { dg-bogus \"changes signedness\" \"case 1\" } */\n+  y > (tf?64:(tf!=x)); /* { dg-bogus \"changes signedness\" \"case 2\" } */\n+  x > (tf?(tf!=x):64); /* { dg-bogus \"changes signedness\" \"case 3\" } */\n+  y > (tf?(tf!=x):64); /* { dg-bogus \"changes signedness\" \"case 4\" } */\n+\n+  x > (tf?64:(tf==x)); /* { dg-bogus \"changes signedness\" \"case 5\" } */\n+  y > (tf?64:(tf==x)); /* { dg-bogus \"changes signedness\" \"case 6\" } */\n+  x > (tf?(tf==x):64); /* { dg-bogus \"changes signedness\" \"case 7\" } */\n+  y > (tf?(tf==x):64); /* { dg-bogus \"changes signedness\" \"case 8\" } */\n+\n+  x > (tf?64:(tf>x)); /* { dg-bogus \"changes signedness\" \"case 9\" } */\n+  y > (tf?64:(tf>x)); /* { dg-bogus \"changes signedness\" \"case 10\" } */\n+  x > (tf?(tf>x):64); /* { dg-bogus \"changes signedness\" \"case 11\" } */\n+  y > (tf?(tf>x):64); /* { dg-bogus \"changes signedness\" \"case 12\" } */\n+\n+  x < (tf?64:(tf<x)); /* { dg-bogus \"changes signedness\" \"case 13\" } */\n+  y < (tf?64:(tf<x)); /* { dg-bogus \"changes signedness\" \"case 14\" } */\n+  x < (tf?(tf<x):64); /* { dg-bogus \"changes signedness\" \"case 15\" } */\n+  y < (tf?(tf<x):64); /* { dg-bogus \"changes signedness\" \"case 16\" } */\n+\n+  x > (tf?64:(tf>=x)); /* { dg-bogus \"changes signedness\" \"case 17\" } */\n+  y > (tf?64:(tf>=x)); /* { dg-bogus \"changes signedness\" \"case 18\" } */\n+  x > (tf?(tf>=x):64); /* { dg-bogus \"changes signedness\" \"case 19\" } */\n+  y > (tf?(tf>=x):64); /* { dg-bogus \"changes signedness\" \"case 20\" } */\n+\n+  x > (tf?64:(tf<=x)); /* { dg-bogus \"changes signedness\" \"case 21\" } */\n+  y > (tf?64:(tf<=x)); /* { dg-bogus \"changes signedness\" \"case 22\" } */\n+  x > (tf?(tf<=x):64); /* { dg-bogus \"changes signedness\" \"case 23\" } */\n+  y > (tf?(tf<=x):64); /* { dg-bogus \"changes signedness\" \"case 24\" } */\n+\n+  x > (tf?64:(tf&&x)); /* { dg-bogus \"changes signedness\" \"case 25\" } */\n+  y > (tf?64:(tf&&x)); /* { dg-bogus \"changes signedness\" \"case 26\" } */\n+  x > (tf?(tf&&x):64); /* { dg-bogus \"changes signedness\" \"case 27\" } */\n+  y > (tf?(tf&&x):64); /* { dg-bogus \"changes signedness\" \"case 28\" } */\n+\n+  x > (tf?64:(tf||x)); /* { dg-bogus \"changes signedness\" \"case 29\" } */\n+  y > (tf?64:(tf||x)); /* { dg-bogus \"changes signedness\" \"case 30\" } */\n+  x > (tf?(tf||x):64); /* { dg-bogus \"changes signedness\" \"case 31\" } */\n+  y > (tf?(tf||x):64); /* { dg-bogus \"changes signedness\" \"case 32\" } */\n+\n+  x > (tf?64:(!tf)); /* { dg-bogus \"changes signedness\" \"case 33\" } */\n+  y > (tf?64:(!tf)); /* { dg-bogus \"changes signedness\" \"case 34\" } */\n+  x > (tf?(!tf):64); /* { dg-bogus \"changes signedness\" \"case 35\" } */\n+  y > (tf?(!tf):64); /* { dg-bogus \"changes signedness\" \"case 36\" } */\n \n }"}, {"sha": "b6fe6e78334e7e387d7d206687aee1ac0dc099de", "filename": "gcc/testsuite/gcc.dg/compare7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare7.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -6,5 +6,5 @@\n \n int f(unsigned a, int b)\n {\n-  return a < b;  /* { dg-bogus \"signed and unsigned\" } */\n+  return a < b;  /* { dg-bogus \"changes signedness\" } */\n }"}, {"sha": "d09b69c53a244afa4a4567c88c31796ad1df751a", "filename": "gcc/testsuite/gcc.dg/compare8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare8.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -4,18 +4,18 @@\n int\n f(unsigned short a1, unsigned short a2, unsigned int b)\n {\n-  return ((a1+a2)|5) > b ? 2 : 3;  /* { dg-bogus \"signed and unsigned\" } */\n+  return ((a1+a2)|5) > b ? 2 : 3;  /* { dg-bogus \"changes signedness\" } */\n }\n \n int\n g(unsigned short a1, unsigned short a2, unsigned int b)\n {\n-  return ((a1+a2)&5) > b ? 2 : 3;  /* { dg-bogus \"signed and unsigned\" } */\n+  return ((a1+a2)&5) > b ? 2 : 3;  /* { dg-bogus \"changes signedness\" } */\n }\n \n int\n h(unsigned short a1, unsigned short a2, unsigned int b)\n {\n-  return ((a1+a2)^5) > b ? 2 : 3;  /* { dg-bogus \"signed and unsigned\" } */\n+  return ((a1+a2)^5) > b ? 2 : 3;  /* { dg-bogus \"changes signedness\" } */\n }\n "}, {"sha": "fba61e42a48ea2ee26bf5dd2cec4806703c3fa9a", "filename": "gcc/testsuite/gcc.dg/compare9.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare9.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -22,20 +22,20 @@ enum mm2\n \n int f(enum mm1 x)\n {\n-  return x == (tf?DI:SI); /* { dg-bogus \"signed and unsigned\" \"case 1\" } */\n+  return x == (tf?DI:SI); /* { dg-bogus \"changes signedness\" \"case 1\" } */\n }\n \n int g(enum mm1 x)\n {\n-  return x == (tf?DI:-1); /* { dg-bogus \"signed and unsigned\" \"case 2\" } */\n+  return x == (tf?DI:-1); /* { dg-bogus \"changes signedness\" \"case 2\" } */\n }\n \n int h(enum mm2 x)\n {\n-  return x == (tf?DI2:SI2); /* { dg-bogus \"signed and unsigned\" \"case 3\" } */\n+  return x == (tf?DI2:SI2); /* { dg-bogus \"changes signedness\" \"case 3\" } */\n }\n \n int i(enum mm2 x)\n {\n-  return x == (tf?DI2:-1); /* { dg-bogus \"signed and unsigned\" \"case 4\" } */\n+  return x == (tf?DI2:-1); /* { dg-bogus \"changes signedness\" \"case 4\" } */\n }"}, {"sha": "86435a83e79bbe56c29d2cb303f72a236dfb029f", "filename": "gcc/testsuite/gcc.dg/pr11492.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32c8316ff282ec3eb60e222e91fb19998c12f46/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr11492.c?ref=a32c8316ff282ec3eb60e222e91fb19998c12f46", "patch": "@@ -5,7 +5,7 @@ int main( void )\n {\n   unsigned int a;\n   unsigned char b;\n-  for ( a = 0, b = 2; a > b * 100; a++ ) /* { dg-bogus \"comparison between signed and unsigned integer\" } */\n+  for ( a = 0, b = 2; a > b * 100; a++ ) /* { dg-bogus \"comparison of integer expressions of different signedness\" } */\n     { ; }\n \n   return 0;"}]}