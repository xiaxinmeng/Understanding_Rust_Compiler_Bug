{"sha": "3de36a09ac124ff2b1bf50c822259ca206f88f23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlMzZhMDlhYzEyNGZmMmIxYmY1MGM4MjIyNTljYTIwNmY4OGYyMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2007-11-06T14:28:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2007-11-06T14:28:28Z"}, "message": "boost_shared_ptr.h: Avoid unnecessary memory barriers in _S_atomic case.\n\n2007-11-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/tr1_impl/boost_shared_ptr.h: Avoid unnecessary memory\n\tbarriers in _S_atomic case.\n\nFrom-SVN: r129927", "tree": {"sha": "5ad6bad437076c580c15f9c56df178120a4ade51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ad6bad437076c580c15f9c56df178120a4ade51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3de36a09ac124ff2b1bf50c822259ca206f88f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de36a09ac124ff2b1bf50c822259ca206f88f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de36a09ac124ff2b1bf50c822259ca206f88f23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de36a09ac124ff2b1bf50c822259ca206f88f23/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eb7e7aa011a0e47a022580c1bc15c10654cb9a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb7e7aa011a0e47a022580c1bc15c10654cb9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb7e7aa011a0e47a022580c1bc15c10654cb9a2"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "6dcaed004d3ca47a7ccd05985360673a7341b0c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de36a09ac124ff2b1bf50c822259ca206f88f23/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de36a09ac124ff2b1bf50c822259ca206f88f23/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3de36a09ac124ff2b1bf50c822259ca206f88f23", "patch": "@@ -1,3 +1,8 @@\n+2007-11-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/tr1_impl/boost_shared_ptr.h: Avoid unnecessary memory\n+\tbarriers in _S_atomic case.\n+\n 2007-11-05  Chris Jefferson  <chris@bubblescope.net>\n \t    Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "5d244aae3e70d57b4eb5abbdee11594ea4503341", "filename": "libstdc++-v3/include/tr1_impl/boost_shared_ptr.h", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de36a09ac124ff2b1bf50c822259ca206f88f23/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de36a09ac124ff2b1bf50c822259ca206f88f23/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fboost_shared_ptr.h?ref=3de36a09ac124ff2b1bf50c822259ca206f88f23", "patch": "@@ -94,12 +94,22 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   // Empty helper class except when the template argument is _S_mutex.\n   template<_Lock_policy _Lp>\n     class _Mutex_base\n-    { };\n+    {\n+    protected:\n+      // The atomic policy uses fully-fenced builtins, single doesn't care.\n+      enum { _S_need_barriers = 0 };\n+    };\n \n   template<>\n     class _Mutex_base<_S_mutex>\n     : public __gnu_cxx::__mutex\n-    { };\n+    {\n+    protected:\n+      // This policy is used when atomic builtins are not available.\n+      // The replacement atomic operations might not have the necessary\n+      // memory barriers.\n+      enum { _S_need_barriers = 1 };\n+    };\n \n   template<_Lock_policy _Lp = __default_lock_policy>\n     class _Sp_counted_base\n@@ -136,14 +146,19 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       void\n       _M_release() // nothrow\n       {\n-\tif (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count,\n-\t\t\t\t\t\t   -1) == 1)\n+\tif (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)\n \t  {\n \t    _M_dispose();\n-#ifdef __GTHREADS\n-\t    _GLIBCXX_READ_MEM_BARRIER;\n-\t    _GLIBCXX_WRITE_MEM_BARRIER;\n-#endif\n+\t    // There must be a memory barrier between dispose() and destroy()\n+\t    // to ensure that the effects of dispose() are observed in the\n+\t    // thread that runs destroy().\n+\t    // See http://gcc.gnu.org/ml/libstdc++/2005-11/msg00136.html\n+\t    if (_Mutex_base<_Lp>::_S_need_barriers)\n+\t      {\n+\t        _GLIBCXX_READ_MEM_BARRIER;\n+\t        _GLIBCXX_WRITE_MEM_BARRIER;\n+\t      }\n+\n \t    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,\n \t\t\t\t\t\t       -1) == 1)\n \t      _M_destroy();\n@@ -159,18 +174,25 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       {\n \tif (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)\n \t  {\n-#ifdef __GTHREADS\n-\t    _GLIBCXX_READ_MEM_BARRIER;\n-\t    _GLIBCXX_WRITE_MEM_BARRIER;\n-#endif\n+\t    if (_Mutex_base<_Lp>::_S_need_barriers)\n+\t      {\n+\t        // See _M_release(),\n+\t        // destroy() must observe results of dispose()\n+\t        _GLIBCXX_READ_MEM_BARRIER;\n+\t        _GLIBCXX_WRITE_MEM_BARRIER;\n+\t      }\n \t    _M_destroy();\n \t  }\n       }\n   \n       long\n       _M_get_use_count() const // nothrow\n-      { return _M_use_count; }  // XXX is this MT safe? \n-      \n+      {\n+        // No memory barrier is used here so there is no synchronization\n+        // with other threads.\n+        return const_cast<const volatile _Atomic_word&>(_M_use_count);\n+      }\n+\n     private:  \n       _Sp_counted_base(_Sp_counted_base const&);\n       _Sp_counted_base& operator=(_Sp_counted_base const&);\n@@ -525,7 +547,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t}\n \n       //\n-      // Requirements: _Deleter' copy constructor and destructor must not throw\n+      // Requirements: _Deleter's copy constructor and destructor must not throw\n       //\n       // __shared_ptr will release __p by calling __d(__p)\n       //\n@@ -552,7 +574,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n        *          with @a __r.\n        *  @param  __r  A %__shared_ptr.\n        *  @post   get() == __r.get() && use_count() == __r.use_count()\n-       *  @throw  std::bad_alloc, in which case \n        */\n       template<typename _Tp1>\n         __shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r)"}]}