{"sha": "03fb4780dfb30b188eba1631ef4ab92112c8f4e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmYjQ3ODBkZmIzMGIxODhlYmExNjMxZWY0YWI5MjExMmM4ZjRlMQ==", "commit": {"author": {"name": "Christopher Faylor", "email": "cgf@cygnus.com", "date": "2000-11-09T03:02:33Z"}, "committer": {"name": "Christopher Faylor", "email": "cgf@gcc.gnu.org", "date": "2000-11-09T03:02:33Z"}, "message": "cygwin.h: Add -no-win32 switch.\n\n* config/i386/cygwin.h: Add -no-win32 switch.  Separate -mno-cygwin include and\nlibrary paths from -mcygwin case.  Parameterize some declarations to avoid\nwarnings.  Use standard locations for include and lib dirs.\n\nFrom-SVN: r37333", "tree": {"sha": "99790fd0de8446d92574973be036c6bed1bac802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99790fd0de8446d92574973be036c6bed1bac802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03fb4780dfb30b188eba1631ef4ab92112c8f4e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fb4780dfb30b188eba1631ef4ab92112c8f4e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03fb4780dfb30b188eba1631ef4ab92112c8f4e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fb4780dfb30b188eba1631ef4ab92112c8f4e1/comments", "author": null, "committer": null, "parents": [{"sha": "11977a4239feee970dee6a5a29e61bb8e36ff9a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11977a4239feee970dee6a5a29e61bb8e36ff9a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11977a4239feee970dee6a5a29e61bb8e36ff9a0"}], "stats": {"total": 95, "additions": 66, "deletions": 29}, "files": [{"sha": "a117c684ed4421954d39a9f072f79ddb97f34446", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fb4780dfb30b188eba1631ef4ab92112c8f4e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fb4780dfb30b188eba1631ef4ab92112c8f4e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03fb4780dfb30b188eba1631ef4ab92112c8f4e1", "patch": "@@ -1,3 +1,10 @@\n+Wed Nov  8 21:58:20 2000  Christopher Faylor <cgf@cygnus.com>\n+\n+\t* config/i386/cygwin.h: Add -no-win32 switch.  Separate -mno-cygwin\n+\tinclude and library paths from -mcygwin case.  Parameterize some\n+\tdeclarations to avoid warnings.  Use standard locations for include and\n+\tlib dirs.\n+\n 2000-11-08  Nick Clifton  <nickc@redhat.com>\n \n \t* config/arm/arm.md (mulsidi3adddi): Change output operand"}, {"sha": "6762bb7c1e94a3418963420a508220e077cb94e4", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 59, "deletions": 29, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fb4780dfb30b188eba1631ef4ab92112c8f4e1/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fb4780dfb30b188eba1631ef4ab92112c8f4e1/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=03fb4780dfb30b188eba1631ef4ab92112c8f4e1", "patch": "@@ -51,6 +51,7 @@ Boston, MA 02111-1307, USA. */\n { \"no-cygwin\",\t\t  MASK_WIN32,\t\t\t\t\t\\\n   N_(\"Use the Mingw32 interface\") },\t\t\t\t\t\\\n { \"windows\",\t\t  MASK_WINDOWS, N_(\"Create GUI application\") },\t\\\n+{ \"no-win32\",\t\t  -MASK_WIN32, N_(\"Don't set Windows defines\") },\\\n { \"console\",\t\t  -MASK_WINDOWS,\t\t\t\t\\\n   N_(\"Create console application\") }, \t\t\t\t\t\\\n { \"dll\",\t\t  MASK_DLL, N_(\"Generate code for a DLL\") },\t\\\n@@ -69,19 +70,20 @@ Boston, MA 02111-1307, USA. */\n    existing args.  */\n \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D_WIN32 \\\n-  -DWINNT  -D_X86_=1 \\\n-  -Asystem=winnt\"\n+#define CPP_PREDEFINES \"-D_X86_=1 -Asystem=winnt\"\n \n /* Normally, -lgcc is not needed since everything in it is in the DLL, but we\n    want to allow things to be added to it when installing new versions of\n    GCC without making a new CYGWIN.DLL, so we leave it.  Profiling is handled\n    by calling the init function from the prologue. */\n \n+#undef LIBGCC_SPEC\n+#define LIBGCC_SPEC \"%{mno-cygwin: %{mthreads:-lmingwthrd} -lmingw32} -lgcc %{mno-cygwin:-lmoldname -lcrtdll}\"\n+\n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{mdll: %{mno-cygwin:dllcrt1%O%s}} \\\n-                        %{!mdll: %{!mno-cygwin:crt0%O%s} \\\n-                                 %{mno-cygwin:crt1%O%s} %{pg:gcrt0%O%s}}\"\n+#define STARTFILE_SPEC \"%{shared|mdll: %{mno-cygwin:dllcrt1%O%s}} \\\n+  %{!shared: %{!mdll: %{!mno-cygwin:crt0%O%s} %{mno-cygwin:crt1%O%s} \\\n+  %{pg:gcrt0%O%s}}}\"\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n@@ -90,9 +92,19 @@ Boston, MA 02111-1307, USA. */\n   %{!ansi:-D_stdcall=__attribute__((__stdcall__)) \\\n     -D_cdecl=__attribute__((__cdecl__))} \\\n   -D__declspec(x)=__attribute__((x)) \\\n-  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__} \\\n-  %{mno-cygwin:-iwithprefixbefore \\\n-    ../../../../%(mingw_include_path)/include/mingw32 -D__MINGW32__=0.2}\"\n+  -D__i386__ -D__i386 \\\n+  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ -Dunix -D__unix -D__unix__} \\\n+  %{!mno-win32:-D_WIN32 -DWINNT -iwithprefixbefore /usr/include/w32api} \\\n+  %{mno-win32: %{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n+  %{mno-cygwin:-DWIN32 -D__WIN32__ -D_WIN32 -D__MINGW32__=0.2 \\\n+    %{mthreads:-D_MT} \\\n+    -isystem /usr/include/mingw32 \\\n+    -isystem /usr/include/mingw \\\n+    -iwithprefixbefore ../../../../mingw/include/g++-3 \\\n+    -iwithprefixbefore ../../../../mingw/include \\\n+    -iwithprefixbefore ../../../../mingw32/include/g++-3 \\\n+    -iwithprefixbefore ../../../../mingw32/include }\"\n+\n \n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n@@ -116,15 +128,22 @@ Boston, MA 02111-1307, USA. */\n \n #undef LIB_SPEC\n #define LIB_SPEC \"%{pg:-lgmon} \\\n-                  %{!mno-cygwin:-lcygwin} \\\n-                  %{mno-cygwin:-lmingw32 -lmoldname -lcrtdll} \\\n-                  %{mwindows:-lgdi32 -lcomdlg32} \\\n-\t\t  -luser32 -lkernel32 -ladvapi32 -lshell32\"\n+  %{!mno-cygwin:-lcygwin} \\\n+  %{mno-cygwin:%{mthreads:-lmingwthrd} -lmingw32} \\\n+  %{mwindows:-lgdi32 -lcomdlg32} \\\n+  -luser32 -lkernel32 -ladvapi32 -lshell32\"\n \n #define LINK_SPEC \"%{mwindows:--subsystem windows} \\\n-                   %{mconsole:--subsystem console} \\\n-                   %{mdll:--dll -e _DllMainCRTStartup@12}\"\n+  %{mconsole:--subsystem console} \\\n+  %{shared: %{mdll: %eshared and mdll are not compatible}} \\\n+  %{shared: --shared} %{mdll:--dll} \\\n+  %{static:-Bstatic} %{!static:-Bdynamic} \\\n+  %{shared|mdll: -e \\\n+    %{mno-cygwin:_DllMainCRTStartup@12} \\\n+    %{!mno-cygwin:__cygwin_dll_entry@12}}\"\n \n+#undef MATH_LIBRARY\n+#define MATH_LIBRARY \"\"\n \n #define SIZE_TYPE \"unsigned int\"\n #define PTRDIFF_TYPE \"int\"\n@@ -139,11 +158,14 @@ Boston, MA 02111-1307, USA. */\n /* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n    is a valid machine specific attribute for DECL.\n    The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-extern int i386_pe_valid_decl_attribute_p ();\n+\n+union tree_node;\n+#define TREE union tree_node *\n \n #undef VALID_MACHINE_DECL_ATTRIBUTE\n #define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n   i386_pe_valid_decl_attribute_p (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n+extern int i386_pe_valid_decl_attribute_p PARAMS ((TREE, TREE, TREE, TREE));\n \n /* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n    is a valid machine specific attribute for TYPE.\n@@ -152,11 +174,12 @@ extern int i386_pe_valid_decl_attribute_p ();\n #undef VALID_MACHINE_TYPE_ATTRIBUTE\n #define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, IDENTIFIER, ARGS) \\\n   i386_pe_valid_type_attribute_p (TYPE, ATTRIBUTES, IDENTIFIER, ARGS)\n-extern int i386_pe_valid_type_attribute_p ();\n+extern int i386_pe_valid_type_attribute_p PARAMS ((TREE, TREE, TREE, TREE));\n \n-extern union tree_node *i386_pe_merge_decl_attributes ();\n+extern union tree_node *i386_pe_merge_decl_attributes PARAMS ((TREE, TREE));\n #define MERGE_MACHINE_DECL_ATTRIBUTES(OLD, NEW) \\\n   i386_pe_merge_decl_attributes ((OLD), (NEW))\n+extern TREE i386_pe_merge_decl_attributes PARAMS ((TREE, TREE));\n \n /* Used to implement dllexport overriding dllimport semantics.  It's also used\n    to handle vtables - the first pass won't do anything because\n@@ -285,7 +308,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    section and we need to set DECL_SECTION_NAME so we do that here.\n    Note that we can be called twice on the same decl.  */\n \n-extern void i386_pe_encode_section_info ();\n+extern void i386_pe_encode_section_info PARAMS ((TREE));\n \n #ifdef ENCODE_SECTION_INFO\n #undef ENCODE_SECTION_INFO\n@@ -377,7 +400,7 @@ do {\t\t\t\t\t\t\t\\\n #define MULTIPLE_SYMBOL_SPACES\n \n #define UNIQUE_SECTION_P(DECL) DECL_ONE_ONLY (DECL)\n-extern void i386_pe_unique_section ();\n+extern void i386_pe_unique_section PARAMS ((TREE, int));\n #define UNIQUE_SECTION(DECL,RELOC) i386_pe_unique_section (DECL, RELOC)\n \n #define SUPPORTS_ONE_ONLY 1\n@@ -507,16 +530,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #endif\n #endif\n \n-#ifdef BUFSIZ\t\t/* stdio.h has been included, ok to use FILE * */\n-#define STDIO_PARAMS(ARGS) PARAMS(ARGS)\n-#else\n-#define STDIO_PARAMS(ARGS) ()\n-#endif\n-\n extern void i386_pe_record_external_function PARAMS ((char *));\n-extern void i386_pe_declare_function_type STDIO_PARAMS ((FILE *, char *, int));\n+/* extern void i386_pe_declare_function_type PARAMS ((FILE *, char *, int)); */\n extern void i386_pe_record_exported_symbol PARAMS ((char *, int));\n-extern void i386_pe_asm_file_end STDIO_PARAMS ((FILE *));\n+/* extern void i386_pe_asm_file_end PARAMS ((FILE *)); */\n \n /* For Win32 ABI compatibility */\n #undef DEFAULT_PCC_STRUCT_RETURN\n@@ -528,7 +545,9 @@ extern void i386_pe_asm_file_end STDIO_PARAMS ((FILE *));\n \n /* A bitfield declared as `int' forces `int' alignment for the struct.  */\n #undef PCC_BITFIELDS_TYPE_MATTERS\n-#define PCC_BITFIELDS_TYPE_MATTERS 0\n+#define PCC_BITFIELDS_TYPE_MATTERS 1\n+#define GROUP_BITFIELDS_BY_ALIGN TYPE_NATIVE(rec)\n+\n \n /* Enable alias attribute support.  */\n #ifndef SET_ASM_OP\n@@ -539,3 +558,14 @@ extern void i386_pe_asm_file_end STDIO_PARAMS ((FILE *));\n #define INT_ASM_OP \"\\t.long\\t\"\n #endif\n \n+#undef STANDARD_INCLUDE_DIR\n+#define STANDARD_INCLUDE_DIR \"/usr/include\"\n+\n+#undef STANDARD_STARTFILE_PREFIX\n+#define STANDARD_STARTFILE_PREFIX     \"/usr/lib/\"\n+\n+#undef TREE\n+\n+#ifndef BUFSIZ\n+# undef FILE\n+#endif"}]}