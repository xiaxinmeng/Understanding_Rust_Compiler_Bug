{"sha": "3563f78f97c4c1e1738cbd159b12d65f57c13bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU2M2Y3OGY5N2M0YzFlMTczOGNiZDE1OWIxMmQ2NWY1N2MxM2JmYg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2016-04-27T21:30:27Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2016-04-27T21:30:27Z"}, "message": "match.pd: unsigned A - B > A --> A < B\n\n2016-04-27  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* match.pd (A - B > A, A + B < A): New transformations.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/overflow-2.c: New testcase.\n\t* gcc.dg/tree-ssa/minus-ovf.c: Likewise.\n\nFrom-SVN: r235537", "tree": {"sha": "ccdf4790df4f3d8e0acf455f0f824154385e9461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccdf4790df4f3d8e0acf455f0f824154385e9461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3563f78f97c4c1e1738cbd159b12d65f57c13bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3563f78f97c4c1e1738cbd159b12d65f57c13bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3563f78f97c4c1e1738cbd159b12d65f57c13bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "044a73da40c548ed472948f3138ebf54d69afb09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044a73da40c548ed472948f3138ebf54d69afb09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/044a73da40c548ed472948f3138ebf54d69afb09"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "5fd8bec815f1ba667f8ff9b1b3b588a31bd157d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3563f78f97c4c1e1738cbd159b12d65f57c13bfb", "patch": "@@ -1,3 +1,7 @@\n+2016-04-27  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd (A - B > A, A + B < A): New transformations.\n+\n 2016-04-27  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* genattrtab.c (write_test_expr): New parameter EMIT_PARENS"}, {"sha": "f645157a4f4aed1af8e6f01a1591643ebbc1c133", "filename": "gcc/match.pd", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=3563f78f97c4c1e1738cbd159b12d65f57c13bfb", "patch": "@@ -2508,6 +2508,60 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (out @0 { wide_int_to_tree (TREE_TYPE (@0), wi::max_value\n \t       (TYPE_PRECISION (TREE_TYPE (@0)), UNSIGNED) - @1); }))))\n \n+/* To detect overflow in unsigned A - B, A < B is simpler than A - B > A.\n+   However, the detection logic for SUB_OVERFLOW in tree-ssa-math-opts.c\n+   expects the long form, so we restrict the transformation for now.  */\n+(for cmp (gt le)\n+ (simplify\n+  (cmp (minus@2 @0 @1) @0)\n+  (if (single_use (@2)\n+       && ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n+   (cmp @1 @0))))\n+(for cmp (lt ge)\n+ (simplify\n+  (cmp @0 (minus@2 @0 @1))\n+  (if (single_use (@2)\n+       && ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n+   (cmp @0 @1))))\n+\n+/* Testing for overflow is unnecessary if we already know the result.  */\n+/* A < A - B  */\n+(for cmp (lt ge)\n+     out (ne eq)\n+ (simplify\n+  (cmp @0 (realpart (IFN_SUB_OVERFLOW@2 @0 @1)))\n+  (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n+   (out (imagpart @2) { build_zero_cst (TREE_TYPE (@0)); }))))\n+/* A - B > A  */\n+(for cmp (gt le)\n+     out (ne eq)\n+ (simplify\n+  (cmp (realpart (IFN_SUB_OVERFLOW@2 @0 @1)) @0)\n+  (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n+   (out (imagpart @2) { build_zero_cst (TREE_TYPE (@0)); }))))\n+/* A + B < A  */\n+(for cmp (lt ge)\n+     out (ne eq)\n+ (simplify\n+  (cmp (realpart (IFN_ADD_OVERFLOW:c@2 @0 @1)) @0)\n+  (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n+   (out (imagpart @2) { build_zero_cst (TREE_TYPE (@0)); }))))\n+/* A > A + B  */\n+(for cmp (gt le)\n+     out (ne eq)\n+ (simplify\n+  (cmp @0 (realpart (IFN_ADD_OVERFLOW:c@2 @0 @1)))\n+  (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n+   (out (imagpart @2) { build_zero_cst (TREE_TYPE (@0)); }))))\n+\n \n /* Simplification of math builtins.  These rules must all be optimizations\n    as well as IL simplifications.  If there is a possibility that the new"}, {"sha": "ec1f3a2cc45df058ec4522fe675d6df70b3d328d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3563f78f97c4c1e1738cbd159b12d65f57c13bfb", "patch": "@@ -1,3 +1,8 @@\n+2016-04-27  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/overflow-2.c: New testcase.\n+\t* gcc.dg/tree-ssa/minus-ovf.c: Likewise.\n+\n 2015-04-27  Ryan Burn  <contact@rnburn.com>\n \n \tPR c++/69024"}, {"sha": "aad66bbcb0614601a9017cf021032307df95e3e4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/minus-ovf.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fminus-ovf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fminus-ovf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fminus-ovf.c?ref=3563f78f97c4c1e1738cbd159b12d65f57c13bfb", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int f(unsigned a, unsigned b) {\n+  unsigned remove = a - b;\n+  return remove > a;\n+}\n+\n+int g(unsigned a, unsigned b) {\n+  unsigned remove = a - b;\n+  return remove <= a;\n+}\n+\n+int h(unsigned a, unsigned b) {\n+  unsigned remove = a - b;\n+  return a < remove;\n+}\n+\n+int i(unsigned a, unsigned b) {\n+  unsigned remove = a - b;\n+  return a >= remove;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"remove\" \"optimized\" } } */"}, {"sha": "83183e8a9cc1a4553820d7b941daa75d66bb8386", "filename": "gcc/testsuite/gcc.dg/tree-ssa/overflow-2.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Foverflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563f78f97c4c1e1738cbd159b12d65f57c13bfb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Foverflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Foverflow-2.c?ref=3563f78f97c4c1e1738cbd159b12d65f57c13bfb", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized-raw\" } */\n+\n+int carry;\n+int f(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_sub_overflow(a, b, &r);\n+  return r > a;\n+}\n+int g(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_sub_overflow(a, b, &r);\n+  return a < r;\n+}\n+int h(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_sub_overflow(a, b, &r);\n+  return r <= a;\n+}\n+int i(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_sub_overflow(a, b, &r);\n+  return a >= r;\n+}\n+int j(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_add_overflow(a, b, &r);\n+  return r < a;\n+}\n+int j2(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_add_overflow(a, b, &r);\n+  return r < b;\n+}\n+int k(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_add_overflow(a, b, &r);\n+  return a > r;\n+}\n+int k2(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_add_overflow(a, b, &r);\n+  return b > r;\n+}\n+int l(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_add_overflow(a, b, &r);\n+  return r >= a;\n+}\n+int l2(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_add_overflow(a, b, &r);\n+  return r >= b;\n+}\n+int m(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_add_overflow(a, b, &r);\n+  return a <= r;\n+}\n+int m2(unsigned a, unsigned b) {\n+  unsigned r;\n+  carry = __builtin_add_overflow(a, b, &r);\n+  return b <= r;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"(le|lt|ge|gt)_expr\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"ADD_OVERFLOW\" 8 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"SUB_OVERFLOW\" 4 \"optimized\" } } */"}]}