{"sha": "8572edc828f6d1e7c8243f901fe7c96f62a11a8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3MmVkYzgyOGY2ZDFlN2M4MjQzZjkwMWZlN2M5NmY2MmExMWE4ZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-28T16:28:08Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-28T16:28:08Z"}, "message": "libstdc++: Fix arithmetic bug in year_month_weekday conversion [PR96713]\n\nThe conversion function year_month_weekday::operator sys_days computes\nthe offset in days from the first weekday of the month with:\n\n days{(index()-1)*7}\n      ^~~~~~~~~~~~~  type 'unsigned'\n\nWe want the above to yield -7d when index() is 0u, but our 'days' alias\nis based on long instead of int, so the conversion from unsigned to the\nunderlying type of 'days' instead yields a large positive value.\n\nThis patch fixes this by casting the result of index() to int so that\nthe initializer is sign-extended in the conversion to long.\n\nThe added testcase also verifies we do the right thing when index() == 5.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/96713\n\t* include/std/chrono (year_month_weekday::operator sys_days):\n\tCast the result of index() to int so that the initializer for\n\tdays{} is sign-extended when it's converted to the underlying\n\ttype.\n\t* testsuite/std/time/year_month_weekday/3.cc: New test.", "tree": {"sha": "020338c23c42a54c46c918ece03aa5312379ca65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/020338c23c42a54c46c918ece03aa5312379ca65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8572edc828f6d1e7c8243f901fe7c96f62a11a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8572edc828f6d1e7c8243f901fe7c96f62a11a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8572edc828f6d1e7c8243f901fe7c96f62a11a8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8572edc828f6d1e7c8243f901fe7c96f62a11a8e/comments", "author": null, "committer": null, "parents": [{"sha": "f4af2dde57992ae0d60a2077f4f0024327b8e6d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4af2dde57992ae0d60a2077f4f0024327b8e6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4af2dde57992ae0d60a2077f4f0024327b8e6d5"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "020982d0b78d2e30a89ee196535429fe32827502", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572edc828f6d1e7c8243f901fe7c96f62a11a8e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572edc828f6d1e7c8243f901fe7c96f62a11a8e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=8572edc828f6d1e7c8243f901fe7c96f62a11a8e", "patch": "@@ -2719,7 +2719,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator sys_days() const noexcept\n       {\n \tauto __d = sys_days{year() / month() / 1};\n-\treturn __d + (weekday() - chrono::weekday(__d) + days{(index()-1)*7});\n+\treturn __d + (weekday() - chrono::weekday(__d)\n+\t\t      + days{(static_cast<int>(index())-1)*7});\n       }\n \n       explicit constexpr"}, {"sha": "cccaccef21141268ccc953dcb0a5054402619c13", "filename": "libstdc++-v3/testsuite/std/time/year_month_weekday/3.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8572edc828f6d1e7c8243f901fe7c96f62a11a8e/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8572edc828f6d1e7c8243f901fe7c96f62a11a8e/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday%2F3.cc?ref=8572edc828f6d1e7c8243f901fe7c96f62a11a8e", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// PR libstdc++/97613\n+// Test year_month_weekday to sys_days conversion for extreme values of index().\n+\n+#include <chrono>\n+\n+void\n+test01()\n+{\n+  using namespace std::chrono;\n+  using ymd = year_month_day;\n+\n+  static_assert(ymd{sys_days{2020y/January/Sunday[0]}} == 2019y/December/29);\n+  static_assert(ymd{sys_days{2020y/January/Monday[0]}} == 2019y/December/30);\n+  static_assert(ymd{sys_days{2020y/January/Tuesday[0]}} == 2019y/December/31);\n+  static_assert(ymd{sys_days{2020y/January/Wednesday[0]}} == 2019y/December/25);\n+  static_assert(ymd{sys_days{2020y/January/Thursday[0]}} == 2019y/December/26);\n+  static_assert(ymd{sys_days{2020y/January/Friday[0]}} == 2019y/December/27);\n+  static_assert(ymd{sys_days{2020y/January/Saturday[0]}} == 2019y/December/28);\n+\n+  static_assert((2020y).is_leap());\n+  static_assert(ymd{sys_days{2020y/March/Sunday[0]}} == 2020y/February/23);\n+  static_assert(ymd{sys_days{2020y/March/Monday[0]}} == 2020y/February/24);\n+  static_assert(ymd{sys_days{2020y/March/Tuesday[0]}} == 2020y/February/25);\n+  static_assert(ymd{sys_days{2020y/March/Wednesday[0]}} == 2020y/February/26);\n+  static_assert(ymd{sys_days{2020y/March/Thursday[0]}} == 2020y/February/27);\n+  static_assert(ymd{sys_days{2020y/March/Friday[0]}} == 2020y/February/28);\n+  static_assert(ymd{sys_days{2020y/March/Saturday[0]}} == 2020y/February/29);\n+\n+  static_assert(!(2019y).is_leap());\n+  static_assert(ymd{sys_days{2019y/March/Sunday[0]}} == 2019y/February/24);\n+  static_assert(ymd{sys_days{2019y/March/Monday[0]}} == 2019y/February/25);\n+  static_assert(ymd{sys_days{2019y/March/Tuesday[0]}} == 2019y/February/26);\n+  static_assert(ymd{sys_days{2019y/March/Wednesday[0]}} == 2019y/February/27);\n+  static_assert(ymd{sys_days{2019y/March/Thursday[0]}} == 2019y/February/28);\n+  static_assert(ymd{sys_days{2019y/March/Friday[0]}} == 2019y/February/22);\n+  static_assert(ymd{sys_days{2019y/March/Saturday[0]}} == 2019y/February/23);\n+\n+  static_assert(ymd{sys_days{2020y/December/Sunday[5]}} == 2021y/January/3);\n+  static_assert(ymd{sys_days{2020y/December/Monday[5]}} == 2021y/January/4);\n+  static_assert(ymd{sys_days{2020y/December/Tuesday[5]}} == 2020y/December/29);\n+  static_assert(ymd{sys_days{2020y/December/Wednesday[5]}} == 2020y/December/30);\n+  static_assert(ymd{sys_days{2020y/December/Thursday[5]}} == 2020y/December/31);\n+  static_assert(ymd{sys_days{2020y/December/Friday[5]}} == 2021y/January/1);\n+  static_assert(ymd{sys_days{2020y/December/Saturday[5]}} == 2021y/January/2);\n+}"}]}