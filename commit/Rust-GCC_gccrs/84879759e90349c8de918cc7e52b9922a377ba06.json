{"sha": "84879759e90349c8de918cc7e52b9922a377ba06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ4Nzk3NTllOTAzNDljOGRlOTE4Y2M3ZTUyYjk5MjJhMzc3YmEwNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-10-08T08:27:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-10-08T08:27:29Z"}, "message": "mips.c (mips_frame_info): Add cprestore_size field.\n\n\t* config/mips/mips.c (mips_frame_info): Add cprestore_size field.\n\t(compute_frame_size): Initialize it.  Remove the .cprestore slot\n\tfrom args_size.\n\t(mips_output_function_prologue): Simplify accordingly.\n\t(mips_debugger_offset): Change the mips16 frame pointer offset from\n\tcurrent_function_outgoing_args to cfun->machine->frame.args_size.\n\t(mips_initial_elimination_offset): Likewise.\n\t(mips_expand_prologue): Likewise.\n\t(mips_expand_epilogue): Likewise.\n\nFrom-SVN: r72222", "tree": {"sha": "efc1731e42570efd04d51ee3349405fbe200571a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efc1731e42570efd04d51ee3349405fbe200571a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84879759e90349c8de918cc7e52b9922a377ba06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84879759e90349c8de918cc7e52b9922a377ba06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84879759e90349c8de918cc7e52b9922a377ba06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84879759e90349c8de918cc7e52b9922a377ba06/comments", "author": null, "committer": null, "parents": [{"sha": "ef1b5bbb051d2c941a002fcaaf65b675e73d4513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1b5bbb051d2c941a002fcaaf65b675e73d4513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1b5bbb051d2c941a002fcaaf65b675e73d4513"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "7a390ca2f63a95fbe790348d04e5ecfdfb1f1934", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84879759e90349c8de918cc7e52b9922a377ba06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84879759e90349c8de918cc7e52b9922a377ba06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84879759e90349c8de918cc7e52b9922a377ba06", "patch": "@@ -1,3 +1,15 @@\n+2003-10-08  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c (mips_frame_info): Add cprestore_size field.\n+\t(compute_frame_size): Initialize it.  Remove the .cprestore slot\n+\tfrom args_size.\n+\t(mips_output_function_prologue): Simplify accordingly.\n+\t(mips_debugger_offset): Change the mips16 frame pointer offset from\n+\tcurrent_function_outgoing_args to cfun->machine->frame.args_size.\n+\t(mips_initial_elimination_offset): Likewise.\n+\t(mips_expand_prologue): Likewise.\n+\t(mips_expand_epilogue): Likewise.\n+\n 2003-10-08  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (EXTRA_CONSTRAINT): Add 'W' constraint."}, {"sha": "06b40a3052ca713d3f92e2466e0c2c03c2dd3fbc", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84879759e90349c8de918cc7e52b9922a377ba06/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84879759e90349c8de918cc7e52b9922a377ba06/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=84879759e90349c8de918cc7e52b9922a377ba06", "patch": "@@ -297,6 +297,7 @@ struct mips_frame_info GTY(())\n   long total_size;\t\t/* # bytes that the entire frame takes up */\n   long var_size;\t\t/* # bytes that variables take up */\n   long args_size;\t\t/* # bytes that outgoing arguments take up */\n+  long cprestore_size;\t\t/* # bytes that the .cprestore slot takes up */\n   int  gp_reg_size;\t\t/* # bytes needed to store gp regs */\n   int  fp_reg_size;\t\t/* # bytes needed to store fp regs */\n   long mask;\t\t\t/* mask of saved gp registers */\n@@ -5107,7 +5108,7 @@ mips_debugger_offset (rtx addr, HOST_WIDE_INT offset)\n \n       /* MIPS16 frame is smaller */\n       if (frame_pointer_needed && TARGET_MIPS16)\n-\tframe_size -= current_function_outgoing_args_size;\n+\tframe_size -= cfun->machine->frame.args_size;\n \n       offset = offset - frame_size;\n     }\n@@ -6102,6 +6103,7 @@ compute_frame_size (HOST_WIDE_INT size)\n   HOST_WIDE_INT total_size;\t/* # bytes that the entire frame takes up */\n   HOST_WIDE_INT var_size;\t/* # bytes that variables take up */\n   HOST_WIDE_INT args_size;\t/* # bytes that outgoing arguments take up */\n+  HOST_WIDE_INT cprestore_size; /* # bytes that the cprestore slot takes up */\n   HOST_WIDE_INT gp_reg_rounded;\t/* # bytes needed to store gp after rounding */\n   HOST_WIDE_INT gp_reg_size;\t/* # bytes needed to store gp regs */\n   HOST_WIDE_INT fp_reg_size;\t/* # bytes needed to store fp regs */\n@@ -6115,13 +6117,14 @@ compute_frame_size (HOST_WIDE_INT size)\n   mask = 0;\n   fmask\t= 0;\n   var_size = MIPS_STACK_ALIGN (size);\n-  args_size = MIPS_STACK_ALIGN (STARTING_FRAME_OFFSET);\n+  args_size = current_function_outgoing_args_size;\n+  cprestore_size = MIPS_STACK_ALIGN (STARTING_FRAME_OFFSET) - args_size;\n \n   /* The space set aside by STARTING_FRAME_OFFSET isn't needed in leaf\n      functions.  If the function has local variables, we're committed\n      to allocating it anyway.  Otherwise reclaim it here.  */\n   if (var_size == 0 && current_function_is_leaf)\n-    args_size = 0;\n+    cprestore_size = args_size = 0;\n \n   /* The MIPS 3.0 linker does not like functions that dynamically\n      allocate the stack and have 0 for STACK_DYNAMIC_OFFSET, since it\n@@ -6131,7 +6134,7 @@ compute_frame_size (HOST_WIDE_INT size)\n   if (args_size == 0 && current_function_calls_alloca)\n     args_size = 4 * UNITS_PER_WORD;\n \n-  total_size = var_size + args_size;\n+  total_size = var_size + args_size + cprestore_size;\n \n   /* Calculate space needed for gp registers.  */\n   for (regno = GP_REG_FIRST; regno <= GP_REG_LAST; regno++)\n@@ -6180,6 +6183,7 @@ compute_frame_size (HOST_WIDE_INT size)\n   cfun->machine->frame.total_size = total_size;\n   cfun->machine->frame.var_size = var_size;\n   cfun->machine->frame.args_size = args_size;\n+  cfun->machine->frame.cprestore_size = cprestore_size;\n   cfun->machine->frame.gp_reg_size = gp_reg_size;\n   cfun->machine->frame.fp_reg_size = fp_reg_size;\n   cfun->machine->frame.mask = mask;\n@@ -6192,7 +6196,8 @@ compute_frame_size (HOST_WIDE_INT size)\n     {\n       unsigned long offset;\n \n-      offset = args_size + var_size + gp_reg_size - GET_MODE_SIZE (gpr_mode);\n+      offset = (args_size + cprestore_size + var_size\n+\t\t+ gp_reg_size - GET_MODE_SIZE (gpr_mode));\n       cfun->machine->frame.gp_sp_offset = offset;\n       cfun->machine->frame.gp_save_offset = offset - total_size;\n     }\n@@ -6204,7 +6209,7 @@ compute_frame_size (HOST_WIDE_INT size)\n \n   if (fmask)\n     {\n-      unsigned long offset = (args_size + var_size\n+      unsigned long offset = (args_size + cprestore_size + var_size\n \t\t\t      + gp_reg_rounded + fp_reg_size\n \t\t\t      - FP_INC * UNITS_PER_FPREG);\n       cfun->machine->frame.fp_sp_offset = offset;\n@@ -6229,6 +6234,8 @@ mips_initial_elimination_offset (int from, int to)\n {\n   int offset;\n \n+  compute_frame_size (get_frame_size ());\n+\n   /* Set OFFSET to the offset from the stack pointer.  */\n   switch (from)\n     {\n@@ -6237,7 +6244,6 @@ mips_initial_elimination_offset (int from, int to)\n       break;\n \n     case ARG_POINTER_REGNUM:\n-      compute_frame_size (get_frame_size ());\n       offset = cfun->machine->frame.total_size;\n       if (mips_abi == ABI_N32 || mips_abi == ABI_64)\n \toffset -= current_function_pretend_args_size;\n@@ -6248,7 +6254,7 @@ mips_initial_elimination_offset (int from, int to)\n     }\n \n   if (TARGET_MIPS16 && to == HARD_FRAME_POINTER_REGNUM)\n-    offset -= current_function_outgoing_args_size;\n+    offset -= cfun->machine->frame.args_size;\n \n   return offset;\n }\n@@ -6372,19 +6378,18 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n     {\n       /* .frame FRAMEREG, FRAMESIZE, RETREG */\n       fprintf (file,\n-\t       \"\\t.frame\\t%s,%ld,%s\\t\\t# vars= %ld, regs= %d/%d, args= %d, gp= %ld\\n\",\n+\t       \"\\t.frame\\t%s,%ld,%s\\t\\t# vars= %ld, regs= %d/%d, args= %ld, gp= %ld\\n\",\n \t       (reg_names[(frame_pointer_needed)\n \t\t\t  ? HARD_FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM]),\n \t       ((frame_pointer_needed && TARGET_MIPS16)\n-\t\t? ((long) tsize - current_function_outgoing_args_size)\n+\t\t? ((long) tsize - cfun->machine->frame.args_size)\n \t\t: (long) tsize),\n \t       reg_names[GP_REG_FIRST + 31],\n \t       cfun->machine->frame.var_size,\n \t       cfun->machine->frame.num_gp,\n \t       cfun->machine->frame.num_fp,\n-\t       current_function_outgoing_args_size,\n-\t       cfun->machine->frame.args_size\n-\t       - current_function_outgoing_args_size);\n+\t       cfun->machine->frame.args_size,\n+\t       cfun->machine->frame.cprestore_size);\n \n       /* .mask MASK, GPOFFSET; .fmask FPOFFSET */\n       fprintf (file, \"\\t.mask\\t0x%08lx,%ld\\n\\t.fmask\\t0x%08lx,%ld\\n\",\n@@ -6562,9 +6567,9 @@ mips_expand_prologue (void)\n      acceesed with unextended instructions.  */\n   if (frame_pointer_needed)\n     {\n-      if (TARGET_MIPS16 && current_function_outgoing_args_size != 0)\n+      if (TARGET_MIPS16 && cfun->machine->frame.args_size != 0)\n \t{\n-\t  rtx offset = GEN_INT (current_function_outgoing_args_size);\n+\t  rtx offset = GEN_INT (cfun->machine->frame.args_size);\n \t  RTX_FRAME_RELATED_P\n \t    (emit_insn (gen_add3_insn (hard_frame_pointer_rtx,\n \t\t\t\t       stack_pointer_rtx,\n@@ -6718,7 +6723,7 @@ mips_expand_epilogue (int sibcall_p)\n     {\n       base = hard_frame_pointer_rtx;\n       if (TARGET_MIPS16)\n-\tstep1 -= current_function_outgoing_args_size;\n+\tstep1 -= cfun->machine->frame.args_size;\n     }\n \n   /* If we need to restore registers, deallocate as much stack as"}]}