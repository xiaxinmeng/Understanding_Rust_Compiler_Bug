{"sha": "75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjY2MxZTdmYTU5MWY3YTZjODhkZGQwNGI5NzE2OWJjZjA0ZTVmZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-08T16:33:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-08T16:33:08Z"}, "message": "re PR tree-optimization/36291 (GCC is slow and memory-hungry building sipQtGuipart.cpp)\n\n2009-04-08  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/36291\n\t* tree-dfa.c (add_referenced_var): Do not recurse into\n\tglobal initializers.\n\t* tree-ssa-ccp.c (get_symbol_constant_value): Add newly\n\texposed variables.\n\t(fold_const_aggregate_ref): Likewise.\n\nFrom-SVN: r145757", "tree": {"sha": "3b276fc4543ee33b2bc43f554a23fcf7da9cf60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b276fc4543ee33b2bc43f554a23fcf7da9cf60f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6f5e3a1cc294a064bf87250db3dee449a24f278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f5e3a1cc294a064bf87250db3dee449a24f278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f5e3a1cc294a064bf87250db3dee449a24f278"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "cdb96fb7f65d41666869500a589aa248fbbf4115", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff", "patch": "@@ -1,3 +1,12 @@\n+2009-04-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/36291\n+\t* tree-dfa.c (add_referenced_var): Do not recurse into\n+\tglobal initializers.\n+\t* tree-ssa-ccp.c (get_symbol_constant_value): Add newly\n+\texposed variables.\n+\t(fold_const_aggregate_ref): Likewise.\n+\n 2009-04-08  Paolo Bonzini  <bonzini@gnu.org>\n \n         * recog.c (ordered_comparison_operator): New."}, {"sha": "1738dd0126602fc55081ad0ea8fe4427d0205016", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff", "patch": "@@ -600,13 +600,11 @@ add_referenced_var (tree var)\n     {\n       /* Scan DECL_INITIAL for pointer variables as they may contain\n \t address arithmetic referencing the address of other\n-\t variables.  \n-\t Even non-constant initializers need to be walked, because\n-\t IPA passes might prove that their are invariant later on.  */\n+\t variables.  As we are only interested in directly referenced\n+\t globals or referenced locals restrict this to initializers\n+\t than can refer to local variables.  */\n       if (DECL_INITIAL (var)\n-\t  /* Initializers of external variables are not useful to the\n-\t     optimizers.  */\n-          && !DECL_EXTERNAL (var))\n+          && DECL_CONTEXT (var) == current_function_decl)\n       \twalk_tree (&DECL_INITIAL (var), find_vars_r, NULL, 0);\n \n       return true;"}, {"sha": "a67850448a79f0b95789d2035c0016a779075473", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=75ccc1e7fa591f7a6c88ddd04b97169bcf04e5ff", "patch": "@@ -281,7 +281,15 @@ get_symbol_constant_value (tree sym)\n \t{\n \t  STRIP_USELESS_TYPE_CONVERSION (val);\n \t  if (is_gimple_min_invariant (val))\n-\t    return val;\n+\t    {\n+\t      if (TREE_CODE (val) == ADDR_EXPR)\n+\t\t{\n+\t\t  tree base = get_base_address (TREE_OPERAND (val, 0));\n+\t\t  if (base && TREE_CODE (base) == VAR_DECL)\n+\t\t    add_referenced_var (base);\n+\t\t}\n+\t      return val;\n+\t    }\n \t}\n       /* Variables declared 'const' without an initializer\n \t have zero as the initializer if they may not be\n@@ -1243,6 +1251,12 @@ fold_const_aggregate_ref (tree t)\n \tif (tree_int_cst_equal (cfield, idx))\n \t  {\n \t    STRIP_USELESS_TYPE_CONVERSION (cval);\n+\t    if (TREE_CODE (cval) == ADDR_EXPR)\n+\t      {\n+\t\ttree base = get_base_address (TREE_OPERAND (cval, 0));\n+\t\tif (base && TREE_CODE (base) == VAR_DECL)\n+\t\t  add_referenced_var (base);\n+\t      }\n \t    return cval;\n \t  }\n       break;\n@@ -1286,6 +1300,12 @@ fold_const_aggregate_ref (tree t)\n \t    && ! DECL_BIT_FIELD (cfield))\n \t  {\n \t    STRIP_USELESS_TYPE_CONVERSION (cval);\n+\t    if (TREE_CODE (cval) == ADDR_EXPR)\n+\t      {\n+\t\ttree base = get_base_address (TREE_OPERAND (cval, 0));\n+\t\tif (base && TREE_CODE (base) == VAR_DECL)\n+\t\t  add_referenced_var (base);\n+\t      }\n \t    return cval;\n \t  }\n       break;"}]}