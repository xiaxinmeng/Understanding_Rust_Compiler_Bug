{"sha": "30e025393209e1936c394e716006cdaaa6d50161", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBlMDI1MzkzMjA5ZTE5MzZjMzk0ZTcxNjAwNmNkYWFhNmQ1MDE2MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-09-10T20:36:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-09-15T20:26:15Z"}, "message": "c++: add parsing_function_declarator predicate\n\nWhile looking at PR96184 I noticed that we were recognizing the situation of\nparsing a function declarator based on current_binding_level, and that we\nought to make that a predicate function.  This patch is just refactoring,\nbut I just suggested using it in a review of another patch.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (parsing_function_declarator): Declare.\n\t* name-lookup.c (set_decl_context_in_fn): Use it.\n\t* parser.c (cp_parser_direct_declarator): Use it.\n\t(parsing_function_declarator): New.", "tree": {"sha": "b1e8f9db52b12a3a11ee3a64fde5c02186e32633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1e8f9db52b12a3a11ee3a64fde5c02186e32633"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30e025393209e1936c394e716006cdaaa6d50161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30e025393209e1936c394e716006cdaaa6d50161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30e025393209e1936c394e716006cdaaa6d50161", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30e025393209e1936c394e716006cdaaa6d50161/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d1af8a07ae9fcc40ea5c781c3ad46d20ea12a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5d1af8a07ae9fcc40ea5c781c3ad46d20ea12a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5d1af8a07ae9fcc40ea5c781c3ad46d20ea12a6"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "e5f632afba4659e92caf1cb3a7a6468f36ad6e45", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30e025393209e1936c394e716006cdaaa6d50161/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30e025393209e1936c394e716006cdaaa6d50161/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=30e025393209e1936c394e716006cdaaa6d50161", "patch": "@@ -7136,6 +7136,7 @@ extern void cp_convert_omp_range_for (tree &, vec<tree, va_gc> *, tree &,\n \t\t\t\t      tree &, tree &, tree &, tree &, tree &);\n extern void cp_finish_omp_range_for (tree, tree);\n extern bool parsing_nsdmi (void);\n+extern bool parsing_function_declarator ();\n extern bool parsing_default_capturing_generic_lambda_in_template (void);\n extern void inject_this_parameter (tree, cp_cv_quals);\n extern location_t defparse_location (tree);"}, {"sha": "ddee8b390f9debed0f5515bc45e4667b28bb8dd6", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30e025393209e1936c394e716006cdaaa6d50161/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30e025393209e1936c394e716006cdaaa6d50161/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=30e025393209e1936c394e716006cdaaa6d50161", "patch": "@@ -3363,12 +3363,9 @@ set_decl_context_in_fn (tree ctx, tree decl)\n \n   if (!DECL_CONTEXT (decl)\n       /* When parsing the parameter list of a function declarator,\n-\t don't set DECL_CONTEXT to an enclosing function.  When we\n-\t push the PARM_DECLs in order to process the function body,\n-\t current_binding_level->this_entity will be set.  */\n+\t don't set DECL_CONTEXT to an enclosing function.  */\n       && !(TREE_CODE (decl) == PARM_DECL\n-\t   && current_binding_level->kind == sk_function_parms\n-\t   && current_binding_level->this_entity == NULL))\n+\t   && parsing_function_declarator ()))\n     DECL_CONTEXT (decl) = ctx;\n }\n "}, {"sha": "8d60f40706bd85ba26dd4a882157020a4cea6d19", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30e025393209e1936c394e716006cdaaa6d50161/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30e025393209e1936c394e716006cdaaa6d50161/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=30e025393209e1936c394e716006cdaaa6d50161", "patch": "@@ -23107,7 +23107,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      else if (!cp_parser_uncommitted_to_tentative_parse_p (parser))\n \t\t/* Let compute_array_index_type diagnose this.  */;\n \t      else if (!parser->in_function_body\n-\t\t       || current_binding_level->kind == sk_function_parms)\n+\t\t       || parsing_function_declarator ())\n \t\t{\n \t\t  /* Normally, the array bound must be an integral constant\n \t\t     expression.  However, as an extension, we allow VLAs\n@@ -23831,6 +23831,17 @@ parsing_nsdmi (void)\n   return false;\n }\n \n+/* True if we're parsing a function declarator.  */\n+\n+bool\n+parsing_function_declarator ()\n+{\n+  /* this_entity is NULL for a function parameter scope while parsing the\n+     declarator; it is set when parsing the body of the function.  */\n+  return (current_binding_level->kind == sk_function_parms\n+\t  && !current_binding_level->this_entity);\n+}\n+\n /* Parse a late-specified return type, if any.  This is not a separate\n    non-terminal, but part of a function declarator, which looks like\n "}]}