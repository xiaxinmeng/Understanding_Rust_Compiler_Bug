{"sha": "ef626302f776b91db4848d8ca6e0e905e3b694a2", "node_id": "C_kwDOANBUbNoAKGVmNjI2MzAyZjc3NmI5MWRiNDg0OGQ4Y2E2ZTBlOTA1ZTNiNjk0YTI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-16T17:54:33Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-17T13:28:24Z"}, "message": "Add name-resolution helpers for looking up macros", "tree": {"sha": "24dc721305875dd6ab1a0671ad3197a89d8b28d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24dc721305875dd6ab1a0671ad3197a89d8b28d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef626302f776b91db4848d8ca6e0e905e3b694a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef626302f776b91db4848d8ca6e0e905e3b694a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef626302f776b91db4848d8ca6e0e905e3b694a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef626302f776b91db4848d8ca6e0e905e3b694a2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a026c166f077027f9997282cf63b0c6d02948ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a026c166f077027f9997282cf63b0c6d02948ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a026c166f077027f9997282cf63b0c6d02948ce0"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "5ac076a1fb934fc8477236c94b4c501de8cfdf5b", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef626302f776b91db4848d8ca6e0e905e3b694a2/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef626302f776b91db4848d8ca6e0e905e3b694a2/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=ef626302f776b91db4848d8ca6e0e905e3b694a2", "patch": "@@ -54,6 +54,7 @@ Resolver::Resolver ()\n     name_scope (Scope (mappings->get_current_crate ())),\n     type_scope (Scope (mappings->get_current_crate ())),\n     label_scope (Scope (mappings->get_current_crate ())),\n+    macro_scope (Scope (mappings->get_current_crate ())),\n     global_type_node_id (UNKNOWN_NODEID), unit_ty_node_id (UNKNOWN_NODEID)\n {\n   generate_builtins ();\n@@ -93,6 +94,13 @@ Resolver::push_new_label_rib (Rib *r)\n   label_ribs[r->get_node_id ()] = r;\n }\n \n+void\n+Resolver::push_new_macro_rib (Rib *r)\n+{\n+  rust_assert (label_ribs.find (r->get_node_id ()) == label_ribs.end ());\n+  macro_ribs[r->get_node_id ()] = r;\n+}\n+\n bool\n Resolver::find_name_rib (NodeId id, Rib **rib)\n {\n@@ -115,6 +123,17 @@ Resolver::find_type_rib (NodeId id, Rib **rib)\n   return true;\n }\n \n+bool\n+Resolver::find_macro_rib (NodeId id, Rib **rib)\n+{\n+  auto it = macro_ribs.find (id);\n+  if (it == macro_ribs.end ())\n+    return false;\n+\n+  *rib = it->second;\n+  return true;\n+}\n+\n void\n Resolver::insert_builtin_types (Rib *r)\n {\n@@ -281,6 +300,27 @@ Resolver::lookup_resolved_label (NodeId refId, NodeId *defId)\n   return true;\n }\n \n+void\n+Resolver::insert_resolved_macro (NodeId refId, NodeId defId)\n+{\n+  auto it = resolved_macros.find (refId);\n+  rust_assert (it == resolved_macros.end ());\n+\n+  resolved_labels[refId] = defId;\n+  get_label_scope ().append_reference_for_def (refId, defId);\n+}\n+\n+bool\n+Resolver::lookup_resolved_macro (NodeId refId, NodeId *defId)\n+{\n+  auto it = resolved_macros.find (refId);\n+  if (it == resolved_macros.end ())\n+    return false;\n+\n+  *defId = it->second;\n+  return true;\n+}\n+\n // NameResolution\n \n NameResolution *"}, {"sha": "208448036d904fb791a95311aaf6d0693f02d6d3", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef626302f776b91db4848d8ca6e0e905e3b694a2/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef626302f776b91db4848d8ca6e0e905e3b694a2/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=ef626302f776b91db4848d8ca6e0e905e3b694a2", "patch": "@@ -274,10 +274,12 @@ class Resolver\n   void push_new_name_rib (Rib *r);\n   void push_new_type_rib (Rib *r);\n   void push_new_label_rib (Rib *r);\n+  void push_new_macro_rib (Rib *r);\n \n   bool find_name_rib (NodeId id, Rib **rib);\n   bool find_type_rib (NodeId id, Rib **rib);\n   bool find_label_rib (NodeId id, Rib **rib);\n+  bool find_macro_rib (NodeId id, Rib **rib);\n \n   void insert_new_definition (NodeId id, Definition def);\n   bool lookup_definition (NodeId id, Definition *def);\n@@ -291,10 +293,14 @@ class Resolver\n   void insert_resolved_label (NodeId refId, NodeId defId);\n   bool lookup_resolved_label (NodeId refId, NodeId *defId);\n \n+  void insert_resolved_macro (NodeId refId, NodeId defId);\n+  bool lookup_resolved_macro (NodeId refId, NodeId *defId);\n+\n   // proxy for scoping\n   Scope &get_name_scope () { return name_scope; }\n   Scope &get_type_scope () { return type_scope; }\n   Scope &get_label_scope () { return label_scope; }\n+  Scope &get_macro_scope () { return macro_scope; }\n \n   NodeId get_global_type_node_id () { return global_type_node_id; }\n \n@@ -371,6 +377,7 @@ class Resolver\n   Scope name_scope;\n   Scope type_scope;\n   Scope label_scope;\n+  Scope macro_scope;\n \n   NodeId global_type_node_id;\n   NodeId unit_ty_node_id;\n@@ -379,6 +386,7 @@ class Resolver\n   std::map<NodeId, Rib *> name_ribs;\n   std::map<NodeId, Rib *> type_ribs;\n   std::map<NodeId, Rib *> label_ribs;\n+  std::map<NodeId, Rib *> macro_ribs;\n \n   // map any Node to its Definition\n   // ie any name or type usage\n@@ -395,6 +403,7 @@ class Resolver\n   std::map<NodeId, NodeId> resolved_names;\n   std::map<NodeId, NodeId> resolved_types;\n   std::map<NodeId, NodeId> resolved_labels;\n+  std::map<NodeId, NodeId> resolved_macros;\n \n   // map of resolved names mutability flag\n   std::map<NodeId, bool> decl_mutability;"}]}