{"sha": "f991abd12d6a68ed648edb6e01b34778afd74b6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5MWFiZDEyZDZhNjhlZDY0OGVkYjZlMDFiMzQ3NzhhZmQ3NGI2Zg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-06-01T00:39:49Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-06-01T00:39:49Z"}, "message": "c-objc-common.c (c_tree_printer): Check flag before hashtable.\n\n2005-05-30  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* c-objc-common.c (c_tree_printer): Check flag before hashtable.\n\tUse DECL_DEBUG_EXPR and SET_DECL_DEBUG_EXPR.\n\t* dwarf2out.c (dwarf2out_var_location): Ditto.\n\t* toplev.c (default_tree_printer): Ditto.\n\t* tree-outof-ssa.c (create_temp): Ditto.\n\t* tree-sra.c (instantiate_element): Ditto.\n\t* var-tracking.c (track_expr_p): Ditto.\n\t* tree.c (struct tree_map): New structure.\n\t(debug_expr_for_decl): New.\n\t(tree_map_eq): New function.\n\t(tree_map_hash): Ditto.\n\t(tree_map_marked_p): Ditto.\n\t(print_debug_expr_statistics): Ditto.\n\t(decl_debug_expr_lookup): Ditto.\n\t(decl_debug_expr_insert): Ditto.\n\t(dump_tree_statistics): Dump debug_expr hashtable stats.\n\t* tree.h (DECL_DEBUG_EXPR): Change\n\t(SET_DECL_DEBUG_EXPR): Add.\n\nFrom-SVN: r100417", "tree": {"sha": "916b04dcdacaf7602bfac6975c23a7d34d9b5870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/916b04dcdacaf7602bfac6975c23a7d34d9b5870"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f991abd12d6a68ed648edb6e01b34778afd74b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f991abd12d6a68ed648edb6e01b34778afd74b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f991abd12d6a68ed648edb6e01b34778afd74b6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f991abd12d6a68ed648edb6e01b34778afd74b6f/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d0d376c8f4185fabdebfd2d2280444545ffc6ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0d376c8f4185fabdebfd2d2280444545ffc6ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0d376c8f4185fabdebfd2d2280444545ffc6ac"}], "stats": {"total": 143, "additions": 132, "deletions": 11}, "files": [{"sha": "7b6f3ff390c4b3406f9f03ae1c2e7d1063c977fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f991abd12d6a68ed648edb6e01b34778afd74b6f", "patch": "@@ -1,3 +1,24 @@\n+2005-05-30  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* c-objc-common.c (c_tree_printer): Check flag before hashtable.\n+\tUse DECL_DEBUG_EXPR and SET_DECL_DEBUG_EXPR.\n+\t* dwarf2out.c (dwarf2out_var_location): Ditto.\n+\t* toplev.c (default_tree_printer): Ditto.\n+\t* tree-outof-ssa.c (create_temp): Ditto.\n+\t* tree-sra.c (instantiate_element): Ditto.\n+\t* var-tracking.c (track_expr_p): Ditto.\n+\t* tree.c (struct tree_map): New structure.\n+\t(debug_expr_for_decl): New.\n+\t(tree_map_eq): New function.\n+\t(tree_map_hash): Ditto.\n+\t(tree_map_marked_p): Ditto.\n+\t(print_debug_expr_statistics): Ditto.\n+\t(decl_debug_expr_lookup): Ditto.\n+\t(decl_debug_expr_insert): Ditto.\n+\t(dump_tree_statistics): Dump debug_expr hashtable stats.\n+\t* tree.h (DECL_DEBUG_EXPR): Change\n+\t(SET_DECL_DEBUG_EXPR): Add.\n+\t\n 2005-06-01  Alan Modra  <amodra@bigpond.net.au>\n \n \t* configure.ac: Add --enable-secureplt."}, {"sha": "95a0a3a7130a54be58221aa8dac2fa6183b0bdfd", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=f991abd12d6a68ed648edb6e01b34778afd74b6f", "patch": "@@ -171,7 +171,7 @@ c_tree_printer (pretty_printer *pp, text_info *text)\n   switch (*text->format_spec)\n     {\n     case 'D':\n-      if (DECL_DEBUG_EXPR (t) && DECL_DEBUG_EXPR_IS_FROM (t))\n+      if (DECL_DEBUG_EXPR_IS_FROM (t) && DECL_DEBUG_EXPR (t))\n \t{\n \t  t = DECL_DEBUG_EXPR (t);\n \t  if (!DECL_P (t))"}, {"sha": "1afe52e540da2655b9da3ccbab40d6ffa913a2f0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f991abd12d6a68ed648edb6e01b34778afd74b6f", "patch": "@@ -13283,7 +13283,7 @@ dwarf2out_var_location (rtx loc_note)\n   last_insn = loc_note;\n   last_label = newloc->label;\n   decl = NOTE_VAR_LOCATION_DECL (loc_note);\n-  if (DECL_DEBUG_EXPR (decl) && DECL_DEBUG_EXPR_IS_FROM (decl)\n+  if (DECL_DEBUG_EXPR_IS_FROM (decl) && DECL_DEBUG_EXPR (decl) \n       && DECL_P (DECL_DEBUG_EXPR (decl)))\n     decl = DECL_DEBUG_EXPR (decl); \n   add_var_loc_to_decl (decl, newloc);"}, {"sha": "6cda6bba35b43424b563fc72ca0eb048d2ec8719", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f991abd12d6a68ed648edb6e01b34778afd74b6f", "patch": "@@ -1575,7 +1575,7 @@ default_tree_printer (pretty_printer * pp, text_info *text)\n     {\n     case 'D':\n       t = va_arg (*text->args_ptr, tree);\n-      if (DECL_DEBUG_EXPR (t) && DECL_DEBUG_EXPR_IS_FROM (t))\n+      if (DECL_DEBUG_EXPR_IS_FROM (t) && DECL_DEBUG_EXPR (t))\n \tt = DECL_DEBUG_EXPR (t);\n       break;\n "}, {"sha": "de3af73b3b3b58c7177b93216e55563b39260e3a", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=f991abd12d6a68ed648edb6e01b34778afd74b6f", "patch": "@@ -158,14 +158,14 @@ create_temp (tree t)\n     name = \"temp\";\n   tmp = create_tmp_var (type, name);\n \n-  if (DECL_DEBUG_EXPR (t) && DECL_DEBUG_EXPR_IS_FROM (t))\n+  if (DECL_DEBUG_EXPR_IS_FROM (t) && DECL_DEBUG_EXPR (t))\n     {\n-      DECL_DEBUG_EXPR (tmp) = DECL_DEBUG_EXPR (t);  \n+      SET_DECL_DEBUG_EXPR (tmp, DECL_DEBUG_EXPR (t));  \n       DECL_DEBUG_EXPR_IS_FROM (tmp) = 1;\n     }\n   else if (!DECL_IGNORED_P (t))\n     {\n-      DECL_DEBUG_EXPR (tmp) = t;\n+      SET_DECL_DEBUG_EXPR (tmp, t);\n       DECL_DEBUG_EXPR_IS_FROM (tmp) = 1;\n     }\n   DECL_ARTIFICIAL (tmp) = DECL_ARTIFICIAL (t);"}, {"sha": "811f675fd3816d09285ac30aca1e32c820eb03ee", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=f991abd12d6a68ed648edb6e01b34778afd74b6f", "patch": "@@ -1126,9 +1126,9 @@ instantiate_element (struct sra_elt *elt)\n       DECL_NAME (var) = get_identifier (pretty_name);\n       obstack_free (&sra_obstack, pretty_name);\n \n-      DECL_DEBUG_EXPR (var) = generate_element_ref (elt);\n+      SET_DECL_DEBUG_EXPR (var, generate_element_ref (elt));\n       DECL_DEBUG_EXPR_IS_FROM (var) = 1;\n-\n+      \n       DECL_IGNORED_P (var) = 0;\n       TREE_NO_WARNING (var) = TREE_NO_WARNING (base);\n     }"}, {"sha": "b34d07c548f9256282e2d2f7fc2d8b60c1aef133", "filename": "gcc/tree.c", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f991abd12d6a68ed648edb6e01b34778afd74b6f", "patch": "@@ -131,19 +131,36 @@ static GTY (()) tree int_cst_node;\n static GTY ((if_marked (\"ggc_marked_p\"), param_is (union tree_node)))\n      htab_t int_cst_hash_table;\n \n+/* General tree->tree mapping  structure for use in hash tables.  */\n+\n+struct tree_map GTY(())\n+{\n+  hashval_t hash;\n+  tree from;\n+  tree to;\n+};\n+\n+static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map))) \n+     htab_t debug_expr_for_decl;\n+\n static void set_type_quals (tree, int);\n static int type_hash_eq (const void *, const void *);\n static hashval_t type_hash_hash (const void *);\n+static int tree_map_eq (const void *, const void *);\n+static hashval_t tree_map_hash (const void *);\n static hashval_t int_cst_hash_hash (const void *);\n static int int_cst_hash_eq (const void *, const void *);\n static void print_type_hash_statistics (void);\n+static void print_debug_expr_statistics (void);\n static tree make_vector_type (tree, int, enum machine_mode);\n static int type_hash_marked_p (const void *);\n+static int tree_map_marked_p (const void *);\n static unsigned int type_hash_list (tree, hashval_t);\n static unsigned int attribute_hash_list (tree, hashval_t);\n \n tree global_trees[TI_MAX];\n tree integer_types[itk_none];\n+\n \f\n /* Init tree.c.  */\n \n@@ -153,9 +170,15 @@ init_ttree (void)\n   /* Initialize the hash table of types.  */\n   type_hash_table = htab_create_ggc (TYPE_HASH_INITIAL_SIZE, type_hash_hash,\n \t\t\t\t     type_hash_eq, 0);\n+\n+  debug_expr_for_decl = htab_create_ggc (512, tree_map_hash,\n+\t\t\t\t\t tree_map_eq, 0);\n+\n   int_cst_hash_table = htab_create_ggc (1024, int_cst_hash_hash,\n \t\t\t\t\tint_cst_hash_eq, NULL);\n+  \n   int_cst_node = make_node (INTEGER_CST);\n+\n }\n \n \f\n@@ -3430,6 +3453,76 @@ build_variant_type_copy (tree type)\n   return t;\n }\n \f\n+/* Return true if the from tree in both tree maps are equal.  */\n+\n+static int\n+tree_map_eq (const void *va, const void *vb)\n+{\n+  const struct tree_map  *a = va, *b = vb;\n+  return (a->from == b->from);\n+}\n+\n+/* Hash a from tree in a tree_map.  */\n+\n+static hashval_t\n+tree_map_hash (const void *item)\n+{\n+  return (((const struct tree_map *) item)->hash);\n+}\n+\n+/* Return true if this tree map structure is marked for garbage collection\n+   purposes.  We simply return true if the from tree is marked, so that this\n+   structure goes away when the from tree goes away.  */\n+\n+static int\n+tree_map_marked_p (const void *p)\n+{\n+  tree from = ((struct tree_map *) p)->from;\n+\n+  return ggc_marked_p (from);\n+}\n+\n+/* Print out the statistics for the DECL_DEBUG_EXPR hash table.  */\n+\n+static void\n+print_debug_expr_statistics (void)\n+{\n+  fprintf (stderr, \"DECL_DEBUG_EXPR  hash: size %ld, %ld elements, %f collisions\\n\",\n+\t   (long) htab_size (debug_expr_for_decl),\n+\t   (long) htab_elements (debug_expr_for_decl),\n+\t   htab_collisions (debug_expr_for_decl));\n+}\n+\n+/* Lookup a debug expression for FROM, and return it if we find one.  */\n+\n+tree \n+decl_debug_expr_lookup (tree from)\n+{\n+  struct tree_map *h, in;\n+  in.from = from;\n+\n+  h = htab_find_with_hash (debug_expr_for_decl, &in, htab_hash_pointer (from));\n+  if (h)\n+    return h->to;\n+  return NULL_TREE;\n+}\n+\n+/* Insert a mapping FROM->TO in the debug expression hashtable.  */\n+\n+void\n+decl_debug_expr_insert (tree from, tree to)\n+{\n+  struct tree_map *h;\n+  void **loc;\n+\n+  h = ggc_alloc (sizeof (struct tree_map));\n+  h->hash = htab_hash_pointer (from);\n+  h->from = from;\n+  h->to = to;\n+  loc = htab_find_slot_with_hash (debug_expr_for_decl, h, h->hash, INSERT);\n+  *(struct tree_map **) loc = h;\n+}  \n+  \n /* Hashing of types so that we don't make duplicates.\n    The entry point is `type_hash_canon'.  */\n \n@@ -5261,6 +5354,7 @@ dump_tree_statistics (void)\n   fprintf (stderr, \"(No per-node statistics)\\n\");\n #endif\n   print_type_hash_statistics ();\n+  print_debug_expr_statistics ();\n   lang_hooks.print_statistics ();\n }\n \f"}, {"sha": "e842f6940252e4a31bbe8510c583f37f6272aef3", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f991abd12d6a68ed648edb6e01b34778afd74b6f", "patch": "@@ -2053,10 +2053,17 @@ struct tree_binfo GTY (())\n    writing debugging information about vfield and vbase decls for C++.  */\n #define DECL_FCONTEXT(NODE) (FIELD_DECL_CHECK (NODE)->decl.vindex)\n \n+extern tree decl_debug_expr_lookup (tree);\n+extern void decl_debug_expr_insert (tree, tree);\n+\n /* For VAR_DECL, this is set to either an expression that it was split\n    from (if DECL_DEBUG_EXPR_IS_FROM is true), otherwise a tree_list of\n    subexpressions that it was split into.  */\n-#define DECL_DEBUG_EXPR(NODE) (DECL_CHECK (NODE)->decl.vindex)\n+#define DECL_DEBUG_EXPR(NODE) \\\n+  (decl_debug_expr_lookup (VAR_DECL_CHECK (NODE)))\n+\n+#define SET_DECL_DEBUG_EXPR(NODE, VAL) \\\n+  (decl_debug_expr_insert (VAR_DECL_CHECK (NODE), (VAL)))\n \n #define DECL_DEBUG_EXPR_IS_FROM(NODE) \\\n   (DECL_CHECK (NODE)->decl.debug_expr_is_from)"}, {"sha": "626a8e04dd992d941c89fb4f00eff66cfa3c1389", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991abd12d6a68ed648edb6e01b34778afd74b6f/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=f991abd12d6a68ed648edb6e01b34778afd74b6f", "patch": "@@ -1441,8 +1441,7 @@ track_expr_p (tree expr)\n      don't need to track this expression if the ultimate declaration is\n      ignored.  */\n   realdecl = expr;\n-  if (DECL_DEBUG_EXPR (realdecl)\n-      && DECL_DEBUG_EXPR_IS_FROM (realdecl))\n+  if (DECL_DEBUG_EXPR_IS_FROM (realdecl) && DECL_DEBUG_EXPR (realdecl))\n     {\n       realdecl = DECL_DEBUG_EXPR (realdecl);\n       /* ??? We don't yet know how to emit DW_OP_piece for variable"}]}