{"sha": "738764ef1e4321a6e385b30cf52f8ae1d9eb43b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM4NzY0ZWYxZTQzMjFhNmUzODViMzBjZjUyZjhhZTFkOWViNDNiMQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-07-25T23:21:56Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-07-25T23:21:56Z"}, "message": "re PR middle-end/28473 (with -O, casting result of round(x) to uint64_t produces wrong values for x > INT_MAX)\n\n\n\tPR middle-end/28473\n\t* convert.c (convert_to_integer): When transforming (T)foo(x) into\n\tbar(x) check that bar's result type can represent all the values of T.\n\n\t* gcc.dg/fold-convround-1.c: New test case.\n\nFrom-SVN: r115742", "tree": {"sha": "fe2cca2c97ebff50cdce92939507476d43dba1e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe2cca2c97ebff50cdce92939507476d43dba1e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1/comments", "author": null, "committer": null, "parents": [{"sha": "cdc30c457970d9876af28cdfe7e3a90d590e55ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc30c457970d9876af28cdfe7e3a90d590e55ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc30c457970d9876af28cdfe7e3a90d590e55ae"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "0ec948f9b2a8127becdd897a934bf036e127a69f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=738764ef1e4321a6e385b30cf52f8ae1d9eb43b1", "patch": "@@ -1,3 +1,9 @@\n+2006-07-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/28473\n+\t* convert.c (convert_to_integer): When transforming (T)foo(x) into\n+\tbar(x) check that bar's result type can represent all the values of T.\n+\n 2006-07-25  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-chrec.c (chrec_convert_aggressive): Return NULL on failure."}, {"sha": "27571956a1ead9aa7b93b2d6c95e00a118323e66", "filename": "gcc/convert.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=738764ef1e4321a6e385b30cf52f8ae1d9eb43b1", "patch": "@@ -388,27 +388,36 @@ convert_to_integer (tree type, tree expr)\n \t  /* Only convert in ISO C99 mode.  */\n \t  if (!TARGET_C99_FUNCTIONS)\n \t    break;\n-\t  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (long_long_integer_type_node))\n-\t    fn = mathfn_built_in (s_intype, BUILT_IN_LLCEIL);\n-\t  else\n+\t  if (outprec < TYPE_PRECISION (long_integer_type_node)\n+\t      || (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t\t  && !TYPE_UNSIGNED (type)))\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LCEIL);\n+\t  else if (outprec == TYPE_PRECISION (long_long_integer_type_node)\n+\t\t   && !TYPE_UNSIGNED (type))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_LLCEIL);\n \t  break;\n \n \tCASE_FLT_FN (BUILT_IN_FLOOR):\n \t  /* Only convert in ISO C99 mode.  */\n \t  if (!TARGET_C99_FUNCTIONS)\n \t    break;\n-\t  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (long_long_integer_type_node))\n-\t    fn = mathfn_built_in (s_intype, BUILT_IN_LLFLOOR);\n-\t  else\n+\t  if (outprec < TYPE_PRECISION (long_integer_type_node)\n+\t      || (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t\t  && !TYPE_UNSIGNED (type)))\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LFLOOR);\n+\t  else if (outprec == TYPE_PRECISION (long_long_integer_type_node)\n+\t\t   && !TYPE_UNSIGNED (type))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_LLFLOOR);\n \t  break;\n \n \tCASE_FLT_FN (BUILT_IN_ROUND):\n-\t  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (long_long_integer_type_node))\n-\t    fn = mathfn_built_in (s_intype, BUILT_IN_LLROUND);\n-\t  else\n+\t  if (outprec < TYPE_PRECISION (long_integer_type_node)\n+\t      || (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t\t  && !TYPE_UNSIGNED (type)))\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LROUND);\n+\t  else if (outprec == TYPE_PRECISION (long_long_integer_type_node)\n+\t\t   && !TYPE_UNSIGNED (type))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_LLROUND);\n \t  break;\n \n \tCASE_FLT_FN (BUILT_IN_RINT):\n@@ -417,10 +426,13 @@ convert_to_integer (tree type, tree expr)\n \t    break;\n \t  /* ... Fall through ...  */\n \tCASE_FLT_FN (BUILT_IN_NEARBYINT):\n-\t  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (long_long_integer_type_node))\n-            fn = mathfn_built_in (s_intype, BUILT_IN_LLRINT);\n-\t  else\n-            fn = mathfn_built_in (s_intype, BUILT_IN_LRINT);\n+\t  if (outprec < TYPE_PRECISION (long_integer_type_node)\n+\t      || (outprec == TYPE_PRECISION (long_integer_type_node)\n+\t\t  && !TYPE_UNSIGNED (type)))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_LRINT);\n+\t  else if (outprec == TYPE_PRECISION (long_long_integer_type_node)\n+\t\t   && !TYPE_UNSIGNED (type))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_LLRINT);\n \t  break;\n \n \tCASE_FLT_FN (BUILT_IN_TRUNC):"}, {"sha": "63aadaf8e28d0b6bd5938608a8f5bc5d92d3d17e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=738764ef1e4321a6e385b30cf52f8ae1d9eb43b1", "patch": "@@ -1,3 +1,8 @@\n+2006-07-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/28473\n+\t* gcc.dg/fold-convround-1.c: New test case.\n+\n 2006-07-24  Steven G. Kargl  <kargls@comcast.net>\n \n \t* gfortran.dg/arithmetic_if.f90:  Fix comments."}, {"sha": "86612aa81b3d22414fbe772c098daef11b215b84", "filename": "gcc/testsuite/gcc.dg/fold-convround-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convround-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/738764ef1e4321a6e385b30cf52f8ae1d9eb43b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convround-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convround-1.c?ref=738764ef1e4321a6e385b30cf52f8ae1d9eb43b1", "patch": "@@ -0,0 +1,30 @@\n+/* PR middle-end/28473.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+extern double round(double);\n+extern double floor(double);\n+extern double ceil(double);\n+\n+unsigned long long test1(double x)\n+{\n+  return (unsigned long long) round(x);\n+}\n+\n+unsigned long long test2(double x)\n+{\n+  return (unsigned long long) floor(x);\n+}\n+unsigned long long test3(double x)\n+{\n+  return (unsigned long long) ceil(x);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_lround\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_llround\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_lfloor\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_llfloor\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_lceil\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_llceil\" 0 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+"}]}