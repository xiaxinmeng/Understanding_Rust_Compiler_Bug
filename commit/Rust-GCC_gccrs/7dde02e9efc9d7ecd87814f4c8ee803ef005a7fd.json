{"sha": "7dde02e9efc9d7ecd87814f4c8ee803ef005a7fd", "node_id": "C_kwDOANBUbNoAKDdkZGUwMmU5ZWZjOWQ3ZWNkODc4MTRmNGM4ZWU4MDNlZjAwNWE3ZmQ", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2023-03-06T17:00:47Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2023-03-07T01:21:47Z"}, "message": "testsuite: Add tail_call effective target\n\nThe RTL \"expand\" dump is the first RTL dump, and it also appears to be\nthe earliest trace of the target having implemented sibcalls.\nIncluding the \",\" in the pattern searched for, to try and avoid\npossible false matches, but there doesn't appear to be any identifiers\nor target names nearby so this is just belts and suspenders.  Using\n\"tail_call\" as a shorter and more commonly used term than a derivative\nof \"sibling calls\", and expecting only gcc folks to have heard of\n\"sibcalls\".\n\n\t* lib/target-supports.exp (check_effective_target_tail_call): New.", "tree": {"sha": "f04d98687ef2c6952cc5b43b371868e53ebe5915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f04d98687ef2c6952cc5b43b371868e53ebe5915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dde02e9efc9d7ecd87814f4c8ee803ef005a7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dde02e9efc9d7ecd87814f4c8ee803ef005a7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dde02e9efc9d7ecd87814f4c8ee803ef005a7fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dde02e9efc9d7ecd87814f4c8ee803ef005a7fd/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3dd4ada43704115b91e496de2dfbd925443450bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd4ada43704115b91e496de2dfbd925443450bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd4ada43704115b91e496de2dfbd925443450bc"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "4bad4dae582fa1901732d481abfea268125e6be5", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dde02e9efc9d7ecd87814f4c8ee803ef005a7fd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dde02e9efc9d7ecd87814f4c8ee803ef005a7fd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=7dde02e9efc9d7ecd87814f4c8ee803ef005a7fd", "patch": "@@ -11680,6 +11680,15 @@ proc check_effective_target_frame_pointer_for_non_leaf { } {\n   return 0\n }\n \n+# Return 1 if the target can perform tail-call optimizations of the\n+# most trivial type.\n+proc check_effective_target_tail_call { } {\n+    return [check_no_messages_and_pattern tail_call \",SIBCALL\" rtl-expand {\n+\t__attribute__((__noipa__)) void foo (void) { }\n+\t__attribute__((__noipa__)) void bar (void) { foo(); }\n+    } {-O2 -fdump-rtl-expand-all}] ;# The \"SIBCALL\" note requires a detailed dump.\n+}\n+\n # Return 1 if the target's calling sequence or its ABI\n # create implicit stack probes at or prior to function entry.\n proc check_effective_target_caller_implicit_probes { } {"}]}