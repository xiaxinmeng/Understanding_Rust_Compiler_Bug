{"sha": "0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY5ZDJjMWEzMThlZDMwYTY2Yjc1YmQ2YjdmYTNkYzM2MzBlMzYyZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-07T15:00:39Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-07T15:00:39Z"}, "message": "aarch64: Support conditional unpacked integer unary arithmetic on SVE\n\nThis patch extends the conditional unary integer operations\nfrom SVE_FULL_I to SVE_I.  In each case the type suffix is\ntaken from the element size rather than the container size:\nthis matters for ABS and NEG, but doesn't matter for NOT.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (@cond_<SVE_INT_UNARY:optab><mode>)\n\t(*cond_<SVE_INT_UNARY:optab><mode>_2): Extend from SVE_FULL_I to SVE_I.\n\t(*cond_<SVE_INT_UNARY:optab><mode>_any): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_unary_5.c: New test.\n\t* gcc.target/aarch64/sve/cond_unary_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_6_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_7.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_7_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_8.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_8_run.c: Likewise.", "tree": {"sha": "10206feddad15219254c439a27ca213cf056b0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10206feddad15219254c439a27ca213cf056b0ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298e76e6562bb79ed42cb4bc88aca817e6e58417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298e76e6562bb79ed42cb4bc88aca817e6e58417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298e76e6562bb79ed42cb4bc88aca817e6e58417"}], "stats": {"total": 335, "additions": 321, "deletions": 14}, "files": [{"sha": "2ec9acbf38d6d223a7520b9d6310c1b974412f58", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "patch": "@@ -2940,23 +2940,23 @@\n \n ;; Predicated integer unary arithmetic with merging.\n (define_expand \"@cond_<optab><mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\")\n-\t   (SVE_INT_UNARY:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\"))\n-\t   (match_operand:SVE_FULL_I 3 \"aarch64_simd_reg_or_zero\")]\n+\t   (SVE_INT_UNARY:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\"))\n+\t   (match_operand:SVE_I 3 \"aarch64_simd_reg_or_zero\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n )\n \n ;; Predicated integer unary arithmetic, merging with the first input.\n (define_insn \"*cond_<optab><mode>_2\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (SVE_INT_UNARY:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\"))\n+\t   (SVE_INT_UNARY:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w\"))\n \t   (match_dup 2)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -2974,12 +2974,12 @@\n ;; as earlyclobber helps to make the instruction more regular to the\n ;; register allocator.\n (define_insn \"*cond_<optab><mode>_any\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (SVE_INT_UNARY:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w, w\"))\n-\t   (match_operand:SVE_FULL_I 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t   (SVE_INT_UNARY:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"w, w, w\"))\n+\t   (match_operand:SVE_I 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE && !rtx_equal_p (operands[2], operands[3])\"\n   \"@"}, {"sha": "17b3f86c8c616def898a995cb30d6a4b4c54c35c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_5.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_5.c?ref=0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abs(A) ((A) < 0 ? -(A) : (A))\n+#define neg(A) (-(A))\n+#define not(A) (~(A))\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT, OP)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##OP (TYPE2 *__restrict r,\t\t\\\n+\t\t\t\t TYPE2 *__restrict a,\t\t\\\n+\t\t\t\t TYPE1 *__restrict pred)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = pred[i] ? OP (a[i]) : a[i];\t\t\t\\\n+  }\n+\n+#define TEST_TYPES(T, TYPE1, TYPE2, COUNT) \\\n+  T (TYPE1, TYPE2, COUNT, abs) \\\n+  T (TYPE1, TYPE2, COUNT, neg) \\\n+  T (TYPE1, TYPE2, COUNT, not)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPES (T, int16_t, int8_t, 7) \\\n+  TEST_TYPES (T, int32_t, int8_t, 3) \\\n+  TEST_TYPES (T, int32_t, int16_t, 3) \\\n+  TEST_TYPES (T, int64_t, int8_t, 5) \\\n+  TEST_TYPES (T, int64_t, int16_t, 5) \\\n+  TEST_TYPES (T, int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "d6d55261097503e9a75d4e9ac1ef9623df409291", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_5_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_5_run.c?ref=0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_unary_5.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, N, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 pred[N];\t\t\t\t\t\t\\\n+    TYPE2 r[N], a[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tpred[i] = (i % 4 < 2);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2##_##OP (r, a, pred);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? OP (a[i]) : a[i]))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "1bd342b65d415d5d5cf37a491bc86fc4ad225497", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_6.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_6.c?ref=0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abs(A) ((A) < 0 ? -(A) : (A))\n+#define neg(A) (-(A))\n+#define not(A) (~(A))\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT, OP)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##OP (TYPE2 *__restrict r,\t\t\\\n+\t\t\t\t TYPE2 *__restrict a,\t\t\\\n+\t\t\t\t TYPE2 *__restrict b,\t\t\\\n+\t\t\t\t TYPE1 *__restrict pred)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE2 bi = b[i];\t\t\t\t\t\\\n+\tr[i] = pred[i] ? OP (a[i]) : bi;\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPES(T, TYPE1, TYPE2, COUNT) \\\n+  T (TYPE1, TYPE2, COUNT, abs) \\\n+  T (TYPE1, TYPE2, COUNT, neg) \\\n+  T (TYPE1, TYPE2, COUNT, not)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPES (T, int16_t, int8_t, 7) \\\n+  TEST_TYPES (T, int32_t, int8_t, 3) \\\n+  TEST_TYPES (T, int32_t, int16_t, 3) \\\n+  TEST_TYPES (T, int64_t, int8_t, 5) \\\n+  TEST_TYPES (T, int64_t, int16_t, 5) \\\n+  TEST_TYPES (T, int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "04e4bd159e3251541022e6ece0559e5d598be3bf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_6_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_6_run.c?ref=0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_unary_6.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, N, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 pred[N];\t\t\t\t\t\t\\\n+    TYPE2 r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tb[i] = (i % 5) * (i % 6 + 3);\t\t\t\t\\\n+\tpred[i] = (i % 4 < 2);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2##_##OP (r, a, b, pred);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? OP (a[i]) : b[i]))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "0e1182155e80d3cd9eb25e2cf068eae6283a05a1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_7.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_7.c?ref=0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abs(A) ((A) < 0 ? -(A) : (A))\n+#define neg(A) (-(A))\n+#define not(A) (~(A))\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT, OP)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##OP (TYPE2 *__restrict r,\t\t\\\n+\t\t\t\t TYPE2 *__restrict a,\t\t\\\n+\t\t\t\t TYPE1 *__restrict pred)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = pred[i] ? OP (a[i]) : 5;\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPES(T, TYPE1, TYPE2, COUNT) \\\n+  T (TYPE1, TYPE2, COUNT, abs) \\\n+  T (TYPE1, TYPE2, COUNT, neg) \\\n+  T (TYPE1, TYPE2, COUNT, not)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPES (T, int16_t, int8_t, 7) \\\n+  TEST_TYPES (T, int32_t, int8_t, 3) \\\n+  TEST_TYPES (T, int32_t, int16_t, 3) \\\n+  TEST_TYPES (T, int64_t, int8_t, 5) \\\n+  TEST_TYPES (T, int64_t, int16_t, 5) \\\n+  TEST_TYPES (T, int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "4460a79c1e85cbbd12a3737797074a61aa6f4eb0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_7_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_7_run.c?ref=0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_unary_7.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, N, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 pred[N];\t\t\t\t\t\t\\\n+    TYPE2 r[N], a[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tpred[i] = (i % 4 < 2);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2##_##OP (r, a, pred);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? OP (a[i]) : 5))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "96c53b7491d7dc9c0422e36b05f132379dd38982", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_8.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_8.c?ref=0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abs(A) ((A) < 0 ? -(A) : (A))\n+#define neg(A) (-(A))\n+#define not(A) (~(A))\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT, OP)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##OP (TYPE2 *__restrict r,\t\t\\\n+\t\t\t\t TYPE2 *__restrict a,\t\t\\\n+\t\t\t\t TYPE1 *__restrict pred)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = pred[i] ? OP (a[i]) : 0;\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPES(T, TYPE1, TYPE2, COUNT) \\\n+  T (TYPE1, TYPE2, COUNT, abs) \\\n+  T (TYPE1, TYPE2, COUNT, neg) \\\n+  T (TYPE1, TYPE2, COUNT, not)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPES (T, int16_t, int8_t, 7) \\\n+  TEST_TYPES (T, int32_t, int8_t, 3) \\\n+  TEST_TYPES (T, int32_t, int16_t, 3) \\\n+  TEST_TYPES (T, int64_t, int8_t, 5) \\\n+  TEST_TYPES (T, int64_t, int16_t, 5) \\\n+  TEST_TYPES (T, int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\tz[^,]*, p[0-7]/z} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "55676d672ebfbc06e4319a068622e8f457d42584", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_8_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_8_run.c?ref=0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_unary_8.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE1, TYPE2, N, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 pred[N];\t\t\t\t\t\t\\\n+    TYPE2 r[N], a[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tpred[i] = (i % 4 < 2);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2##_##OP (r, a, pred);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? OP (a[i]) : 0))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}