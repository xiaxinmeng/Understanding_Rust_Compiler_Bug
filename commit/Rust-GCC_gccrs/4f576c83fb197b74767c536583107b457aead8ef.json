{"sha": "4f576c83fb197b74767c536583107b457aead8ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY1NzZjODNmYjE5N2I3NDc2N2M1MzY1ODMxMDdiNDU3YWVhZDhlZg==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2015-04-30T20:44:03Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-04-30T20:44:03Z"}, "message": "compiler: Use backend interface for stack allocation.\n\nStack allocation was being done by making a temporary variable and\ntaking its address.  This does not work when allocating in a loop\nbecause every allocated variable will refer to the same address.\nThe backend now provides a way to safely allocate in a loop.\n\n\t* go-gcc.cc (Gcc_backend::stack_allocation_expression): New\n\tmethod.\n\nFrom-SVN: r222657", "tree": {"sha": "ea4d7673e4669f048a90928ef154e42a4227260d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea4d7673e4669f048a90928ef154e42a4227260d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f576c83fb197b74767c536583107b457aead8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f576c83fb197b74767c536583107b457aead8ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f576c83fb197b74767c536583107b457aead8ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f576c83fb197b74767c536583107b457aead8ef/comments", "author": null, "committer": null, "parents": [{"sha": "6d158d9a6bc15a0b1bf97cc434b64c7d72f524ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d158d9a6bc15a0b1bf97cc434b64c7d72f524ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d158d9a6bc15a0b1bf97cc434b64c7d72f524ff"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "da6c9ef7c2e1299a734309a9468216300d8ed31a", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f576c83fb197b74767c536583107b457aead8ef/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f576c83fb197b74767c536583107b457aead8ef/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=4f576c83fb197b74767c536583107b457aead8ef", "patch": "@@ -1,3 +1,8 @@\n+2015-04-30  Chris Manghane  <cmang@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::stack_allocation_expression): New\n+\tmethod.\n+\n 2015-04-27  Jim Wilson  <jim.wilson@linaro.org>\n \n \t* Make-lang.in (go.mostlyclean): Remove gccgo, gccgo-cross, and go1."}, {"sha": "82ce3ee6d2eef7acaaf86ccdb662b5d55b697858", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f576c83fb197b74767c536583107b457aead8ef/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f576c83fb197b74767c536583107b457aead8ef/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=4f576c83fb197b74767c536583107b457aead8ef", "patch": "@@ -324,6 +324,9 @@ class Gcc_backend : public Backend\n   call_expression(Bexpression* fn, const std::vector<Bexpression*>& args,\n                   Bexpression* static_chain, Location);\n \n+  Bexpression*\n+  stack_allocation_expression(int64_t size, Location);\n+\n   // Statements.\n \n   Bstatement*\n@@ -1884,6 +1887,17 @@ Gcc_backend::call_expression(Bexpression* fn_expr,\n   return this->make_expression(ret);\n }\n \n+// Return an expression that allocates SIZE bytes on the stack.\n+\n+Bexpression*\n+Gcc_backend::stack_allocation_expression(int64_t size, Location location)\n+{\n+  tree alloca = builtin_decl_explicit(BUILT_IN_ALLOCA);\n+  tree size_tree = build_int_cst(integer_type_node, size);\n+  tree ret = build_call_expr_loc(location.gcc_location(), alloca, 1, size_tree);\n+  return this->make_expression(ret);\n+}\n+\n // An expression as a statement.\n \n Bstatement*"}, {"sha": "01540b0d6a9b177a97c1664615c45f7ac55c8334", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f576c83fb197b74767c536583107b457aead8ef/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f576c83fb197b74767c536583107b457aead8ef/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=4f576c83fb197b74767c536583107b457aead8ef", "patch": "@@ -377,6 +377,10 @@ class Backend\n   call_expression(Bexpression* fn, const std::vector<Bexpression*>& args,\n \t\t  Bexpression* static_chain, Location) = 0;\n \n+  // Return an expression that allocates SIZE bytes on the stack.\n+  virtual Bexpression*\n+  stack_allocation_expression(int64_t size, Location) = 0;\n+\n   // Statements.\n \n   // Create an error statement.  This is used for cases which should"}, {"sha": "379bed47e9102065bd567e1ad77a16431bbb47d8", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f576c83fb197b74767c536583107b457aead8ef/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f576c83fb197b74767c536583107b457aead8ef/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=4f576c83fb197b74767c536583107b457aead8ef", "patch": "@@ -11428,20 +11428,6 @@ Allocation_expression::do_copy()\n   return alloc;\n }\n \n-Expression*\n-Allocation_expression::do_flatten(Gogo*, Named_object*,\n-\t\t\t\t  Statement_inserter* inserter)\n-{\n-  if (this->allocate_on_stack_)\n-    {\n-      this->stack_temp_ = Statement::make_temporary(this->type_, NULL,\n-\t\t\t\t\t\t    this->location());\n-      this->stack_temp_->set_is_address_taken();\n-      inserter->insert(this->stack_temp_);\n-    }\n-  return this;\n-}\n-\n // Return the backend representation for an allocation expression.\n \n Bexpression*\n@@ -11450,17 +11436,16 @@ Allocation_expression::do_get_backend(Translate_context* context)\n   Gogo* gogo = context->gogo();\n   Location loc = this->location();\n \n-  if (this->stack_temp_ != NULL)\n+  Btype* btype = this->type_->get_backend(gogo);\n+  if (this->allocate_on_stack_)\n     {\n-      Expression* ref =\n-\tExpression::make_temporary_reference(this->stack_temp_, loc);\n-      ref = Expression::make_unary(OPERATOR_AND, ref, loc);\n-      return ref->get_backend(context);\n+      int64_t size = gogo->backend()->type_size(btype);\n+      return gogo->backend()->stack_allocation_expression(size, loc);\n     }\n \n   Bexpression* space = \n     gogo->allocate_memory(this->type_, loc)->get_backend(context);\n-  Btype* pbtype = gogo->backend()->pointer_type(this->type_->get_backend(gogo));\n+  Btype* pbtype = gogo->backend()->pointer_type(btype);\n   return gogo->backend()->convert_expression(pbtype, space, loc);\n }\n "}, {"sha": "0c4ea6ba454b64b5b522d11834a06704f77a5232", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f576c83fb197b74767c536583107b457aead8ef/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f576c83fb197b74767c536583107b457aead8ef/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=4f576c83fb197b74767c536583107b457aead8ef", "patch": "@@ -2786,7 +2786,7 @@ class Allocation_expression : public Expression\n  public:\n   Allocation_expression(Type* type, Location location)\n     : Expression(EXPRESSION_ALLOCATION, location),\n-      type_(type), allocate_on_stack_(false), stack_temp_(NULL)\n+      type_(type), allocate_on_stack_(false)\n   { }\n \n   void\n@@ -2807,9 +2807,6 @@ class Allocation_expression : public Expression\n   Expression*\n   do_copy();\n \n-  Expression*\n-  do_flatten(Gogo*, Named_object*, Statement_inserter*);\n-\n   Bexpression*\n   do_get_backend(Translate_context*);\n \n@@ -2821,9 +2818,6 @@ class Allocation_expression : public Expression\n   Type* type_;\n   // Whether or not this is a stack allocation.\n   bool allocate_on_stack_;\n-  // If this memory is stack allocated, it will use the address of STACK_TEMP.\n-  // Otherwise, STACK_TEMP is NULL.\n-  Temporary_statement* stack_temp_;\n };\n \n // Construct a struct."}]}