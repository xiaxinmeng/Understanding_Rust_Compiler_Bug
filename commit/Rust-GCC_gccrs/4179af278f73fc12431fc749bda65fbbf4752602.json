{"sha": "4179af278f73fc12431fc749bda65fbbf4752602", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3OWFmMjc4ZjczZmMxMjQzMWZjNzQ5YmRhNjVmYmJmNDc1MjYwMg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2016-04-18T10:22:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T10:22:13Z"}, "message": "contracts.adb (Analyze_Object_Contract): Update references to SPARK RM.\n\n2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* contracts.adb (Analyze_Object_Contract): Update references to\n\tSPARK RM.\n\t* freeze.adb (Freeze_Entity): Update references to SPARK RM.\n\t* ghost.adb Add with and use clauses for Sem_Disp.\n\t(Check_Ghost_Derivation): Removed.\n\t(Check_Ghost_Overriding):\n\tReimplemented.\t(Check_Ghost_Policy): Update references to SPARK RM.\n\t(Check_Ghost_Primitive): New routine.\n\t(Check_Ghost_Refinement): New routine.\t(Is_OK_Ghost_Context):\n\tUpdate references to SPARK RM.\t(Is_OK_Pragma): Update references\n\tto SPARK RM. Predicates are now a valid context for references\n\tto Ghost entities.\n\t* ghost.ads (Check_Ghost_Derivation): Removed.\n\t(Check_Ghost_Overriding): Update the comment on usage.\n\t(Check_Ghost_Primitive): New routine.\n\t(Check_Ghost_Refinement): New routine.\n\t(Remove_Ignored_Ghost_Code): Update references to SPARK RM.\n\t* sem_ch3.adb (Process_Full_View): Remove the now obsolete check\n\trelated to Ghost derivations\n\t* sem_ch6.adb (Check_Conformance): Remove now obsolete check\n\trelated to the convention-like behavior of pragma Ghost.\n\t(Check_For_Primitive_Subprogram): Verify that the Ghost policy\n\tof a tagged type and its primitive agree.\n\t* sem_prag.adb (Analyze_Pragma): Update references to SPARK\n\tRM. Move the verification of pragma Assertion_Policy Ghost\n\tto the proper place. Remove the now obsolete check related\n\tto Ghost derivations.\n\t(Collect_Constituent): Add a call to Check_Ghost_Refinement.\n\t* sem_res.adb (Resolve_Actuals): Update references to SPARK RM.\n\nFrom-SVN: r235115", "tree": {"sha": "7566a13a97e3bb5ff33f633ae4c1ca3bb2f3b018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7566a13a97e3bb5ff33f633ae4c1ca3bb2f3b018"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4179af278f73fc12431fc749bda65fbbf4752602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4179af278f73fc12431fc749bda65fbbf4752602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4179af278f73fc12431fc749bda65fbbf4752602", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4179af278f73fc12431fc749bda65fbbf4752602/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d6014fad7a26ba4cbfc27acaa3ec977c457c0ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6014fad7a26ba4cbfc27acaa3ec977c457c0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d6014fad7a26ba4cbfc27acaa3ec977c457c0ae"}], "stats": {"total": 518, "additions": 326, "deletions": 192}, "files": [{"sha": "969143318baee438acbf2c3136f2bb633acca69d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4179af278f73fc12431fc749bda65fbbf4752602", "patch": "@@ -1,3 +1,35 @@\n+2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* contracts.adb (Analyze_Object_Contract): Update references to\n+\tSPARK RM.\n+\t* freeze.adb (Freeze_Entity): Update references to SPARK RM.\n+\t* ghost.adb Add with and use clauses for Sem_Disp.\n+\t(Check_Ghost_Derivation): Removed.\n+\t(Check_Ghost_Overriding):\n+\tReimplemented.\t(Check_Ghost_Policy): Update references to SPARK RM.\n+\t(Check_Ghost_Primitive): New routine.\n+\t(Check_Ghost_Refinement): New routine.\t(Is_OK_Ghost_Context):\n+\tUpdate references to SPARK RM.\t(Is_OK_Pragma): Update references\n+\tto SPARK RM. Predicates are now a valid context for references\n+\tto Ghost entities.\n+\t* ghost.ads (Check_Ghost_Derivation): Removed.\n+\t(Check_Ghost_Overriding): Update the comment on usage.\n+\t(Check_Ghost_Primitive): New routine.\n+\t(Check_Ghost_Refinement): New routine.\n+\t(Remove_Ignored_Ghost_Code): Update references to SPARK RM.\n+\t* sem_ch3.adb (Process_Full_View): Remove the now obsolete check\n+\trelated to Ghost derivations\n+\t* sem_ch6.adb (Check_Conformance): Remove now obsolete check\n+\trelated to the convention-like behavior of pragma Ghost.\n+\t(Check_For_Primitive_Subprogram): Verify that the Ghost policy\n+\tof a tagged type and its primitive agree.\n+\t* sem_prag.adb (Analyze_Pragma): Update references to SPARK\n+\tRM. Move the verification of pragma Assertion_Policy Ghost\n+\tto the proper place. Remove the now obsolete check related\n+\tto Ghost derivations.\n+\t(Collect_Constituent): Add a call to Check_Ghost_Refinement.\n+\t* sem_res.adb (Resolve_Actuals): Update references to SPARK RM.\n+\n 2016-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* layout.adb: Fix more minor typos in comments."}, {"sha": "35a9fd0d1fc7af76cf30a1ddfaadcf3bdca7ecaa", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=4179af278f73fc12431fc749bda65fbbf4752602", "patch": "@@ -907,13 +907,13 @@ package body Contracts is\n          if Yields_Synchronized_Object (Obj_Typ) then\n             Error_Msg_N (\"ghost object & cannot be synchronized\", Obj_Id);\n \n-         --  A Ghost object cannot be effectively volatile (SPARK RM 6.9(8) and\n+         --  A Ghost object cannot be effectively volatile (SPARK RM 6.9(7) and\n          --  SPARK RM 6.9(19)).\n \n          elsif Is_Effectively_Volatile (Obj_Id) then\n             Error_Msg_N (\"ghost object & cannot be volatile\", Obj_Id);\n \n-         --  A Ghost object cannot be imported or exported (SPARK RM 6.9(8)).\n+         --  A Ghost object cannot be imported or exported (SPARK RM 6.9(7)).\n          --  One exception to this is the object that represents the dispatch\n          --  table of a Ghost tagged type, as the symbol needs to be exported.\n "}, {"sha": "556c23adbd4c56bc940b886b5a7b19995f34564c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4179af278f73fc12431fc749bda65fbbf4752602", "patch": "@@ -3466,8 +3466,8 @@ package body Freeze is\n \n            and then Convention (E) /= Convention_Intrinsic\n \n-            --  Assume that ASM interface knows what it is doing. This deals\n-            --  with unsigned.ads in the AAMP back end.\n+           --  Assume that ASM interface knows what it is doing. This deals\n+           --  with unsigned.ads in the AAMP back end.\n \n            and then Convention (E) /= Convention_Assembler\n          then\n@@ -5213,7 +5213,7 @@ package body Freeze is\n             if Is_Concurrent_Type (E) then\n                Error_Msg_N (\"ghost type & cannot be concurrent\", E);\n \n-            --  A Ghost type cannot be effectively volatile (SPARK RM 6.9(8))\n+            --  A Ghost type cannot be effectively volatile (SPARK RM 6.9(7))\n \n             elsif Is_Effectively_Volatile (E) then\n                Error_Msg_N (\"ghost type & cannot be volatile\", E);"}, {"sha": "9d01b6dce140755ee13528c4cce9f4d6d921f700", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 216, "deletions": 74, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=4179af278f73fc12431fc749bda65fbbf4752602", "patch": "@@ -36,6 +36,7 @@ with Nmake;    use Nmake;\n with Opt;      use Opt;\n with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n+with Sem_Disp; use Sem_Disp;\n with Sem_Eval; use Sem_Eval;\n with Sem_Prag; use Sem_Prag;\n with Sem_Res;  use Sem_Res;\n@@ -154,7 +155,7 @@ package body Ghost is\n \n       function Is_OK_Ghost_Context (Context : Node_Id) return Boolean;\n       --  Determine whether node Context denotes a Ghost-friendly context where\n-      --  a Ghost entity can safely reside.\n+      --  a Ghost entity can safely reside (SPARK RM 6.9(10)).\n \n       -------------------------\n       -- Is_OK_Ghost_Context --\n@@ -334,30 +335,19 @@ package body Ghost is\n                   return True;\n \n                --  An assertion expression pragma is Ghost when it contains a\n-               --  reference to a Ghost entity (SPARK RM 6.9(11)).\n+               --  reference to a Ghost entity (SPARK RM 6.9(10)).\n \n                elsif Assertion_Expression_Pragma (Prag_Id) then\n \n-                  --  Predicates are excluded from this category when they do\n-                  --  not apply to a Ghost subtype (SPARK RM 6.9(11)).\n+                  --  Ensure that the assertion policy and the Ghost policy are\n+                  --  compatible (SPARK RM 6.9(18)).\n \n-                  if Nam_In (Prag_Nam, Name_Dynamic_Predicate,\n-                                       Name_Predicate,\n-                                       Name_Static_Predicate)\n-                  then\n-                     return False;\n-\n-                  --  Otherwise ensure that the assertion policy and the Ghost\n-                  --  policy are compatible (SPARK RM 6.9(18)).\n-\n-                  else\n-                     Check_Policies (Prag_Nam);\n-                     return True;\n-                  end if;\n+                  Check_Policies (Prag_Nam);\n+                  return True;\n \n                --  Several pragmas that may apply to a non-Ghost entity are\n                --  treated as Ghost when they contain a reference to a Ghost\n-               --  entity (SPARK RM 6.9(12)).\n+               --  entity (SPARK RM 6.9(11)).\n \n                elsif Nam_In (Prag_Nam, Name_Global,\n                                        Name_Depends,\n@@ -455,7 +445,7 @@ package body Ghost is\n                   return True;\n \n                --  A reference to a Ghost entity can appear within an aspect\n-               --  specification (SPARK RM 6.9(11)).\n+               --  specification (SPARK RM 6.9(10)).\n \n                elsif Nkind (Par) = N_Aspect_Specification then\n                   return True;\n@@ -504,7 +494,7 @@ package body Ghost is\n \n       begin\n          --  The Ghost policy in effect a the point of declaration and at the\n-         --  point of use must match (SPARK RM 6.9(14)).\n+         --  point of use must match (SPARK RM 6.9(13)).\n \n          if Is_Checked_Ghost_Entity (Id) and then Policy = Name_Ignore then\n             Error_Msg_Sloc := Sloc (Err_N);\n@@ -540,48 +530,6 @@ package body Ghost is\n       end if;\n    end Check_Ghost_Context;\n \n-   ----------------------------\n-   -- Check_Ghost_Derivation --\n-   ----------------------------\n-\n-   procedure Check_Ghost_Derivation (Typ : Entity_Id) is\n-      Parent_Typ : constant Entity_Id := Etype (Typ);\n-      Iface      : Entity_Id;\n-      Iface_Elmt : Elmt_Id;\n-\n-   begin\n-      --  Allow untagged derivations from predefined types such as Integer as\n-      --  those are not Ghost by definition.\n-\n-      if Is_Scalar_Type (Typ) and then Parent_Typ = Base_Type (Typ) then\n-         null;\n-\n-      --  The parent type of a Ghost type extension must be Ghost\n-\n-      elsif not Is_Ghost_Entity (Parent_Typ) then\n-         Error_Msg_N  (\"type extension & cannot be ghost\", Typ);\n-         Error_Msg_NE (\"\\parent type & is not ghost\", Typ, Parent_Typ);\n-         return;\n-      end if;\n-\n-      --  All progenitors (if any) must be Ghost as well\n-\n-      if Is_Tagged_Type (Typ) and then Present (Interfaces (Typ)) then\n-         Iface_Elmt := First_Elmt (Interfaces (Typ));\n-         while Present (Iface_Elmt) loop\n-            Iface := Node (Iface_Elmt);\n-\n-            if not Is_Ghost_Entity (Iface) then\n-               Error_Msg_N  (\"type extension & cannot be ghost\", Typ);\n-               Error_Msg_NE (\"\\interface type & is not ghost\",   Typ, Iface);\n-               return;\n-            end if;\n-\n-            Next_Elmt (Iface_Elmt);\n-         end loop;\n-      end if;\n-   end Check_Ghost_Derivation;\n-\n    ----------------------------\n    -- Check_Ghost_Overriding --\n    ----------------------------\n@@ -590,40 +538,234 @@ package body Ghost is\n      (Subp            : Entity_Id;\n       Overridden_Subp : Entity_Id)\n    is\n+      Deriv_Typ : Entity_Id;\n       Over_Subp : Entity_Id;\n \n    begin\n       if Present (Subp) and then Present (Overridden_Subp) then\n          Over_Subp := Ultimate_Alias (Overridden_Subp);\n+         Deriv_Typ := Find_Dispatching_Type (Subp);\n \n-         --  The Ghost policy in effect at the point of declaration of a parent\n-         --  and an overriding subprogram must match (SPARK RM 6.9(17)).\n+         --  A Ghost primitive of a non-Ghost type extension cannot override an\n+         --  inherited non-Ghost primitive (SPARK RM 6.9(8)).\n \n-         if Is_Checked_Ghost_Entity (Over_Subp)\n-           and then Is_Ignored_Ghost_Entity (Subp)\n+         if Is_Ghost_Entity (Subp)\n+           and then Present (Deriv_Typ)\n+           and then not Is_Ghost_Entity (Deriv_Typ)\n+           and then not Is_Ghost_Entity (Over_Subp)\n          then\n-            Error_Msg_N (\"incompatible ghost policies in effect\",    Subp);\n+            Error_Msg_N (\"incompatible overriding in effect\", Subp);\n \n             Error_Msg_Sloc := Sloc (Over_Subp);\n-            Error_Msg_N (\"\\& declared # with ghost policy `Check`\",  Subp);\n+            Error_Msg_N (\"\\& declared # as non-ghost subprogram\", Subp);\n \n             Error_Msg_Sloc := Sloc (Subp);\n-            Error_Msg_N (\"\\overridden # with ghost policy `Ignore`\", Subp);\n+            Error_Msg_N (\"\\overridden # with ghost subprogram\", Subp);\n+         end if;\n+\n+         --  A non-Ghost primitive of a type extension cannot override an\n+         --  inherited Ghost primitive (SPARK RM 6.9(8)).\n \n-         elsif Is_Ignored_Ghost_Entity (Over_Subp)\n-           and then Is_Checked_Ghost_Entity (Subp)\n+         if not Is_Ghost_Entity (Subp)\n+           and then Is_Ghost_Entity (Over_Subp)\n          then\n-            Error_Msg_N (\"incompatible ghost policies in effect\",    Subp);\n+            Error_Msg_N (\"incompatible overriding in effect\", Subp);\n \n             Error_Msg_Sloc := Sloc (Over_Subp);\n-            Error_Msg_N (\"\\& declared # with ghost policy `Ignore`\", Subp);\n+            Error_Msg_N (\"\\& declared # as ghost subprogram\", Subp);\n \n             Error_Msg_Sloc := Sloc (Subp);\n-            Error_Msg_N (\"\\overridden # with ghost policy `Check`\",  Subp);\n+            Error_Msg_N (\"\\overridden # with non-ghost subprogram\", Subp);\n+         end if;\n+\n+         if Present (Deriv_Typ)\n+           and then not Is_Ignored_Ghost_Entity (Deriv_Typ)\n+         then\n+            --  When a tagged type is either non-Ghost or checked Ghost and\n+            --  one of its primitives overrides an inherited operation, the\n+            --  overridden operation of the ancestor type must be ignored Ghost\n+            --  if the primitive is ignored Ghost (SPARK RM 6.9(17)).\n+\n+            if Is_Ignored_Ghost_Entity (Subp) then\n+\n+               --  Both the parent subprogram and overriding subprogram are\n+               --  ignored Ghost.\n+\n+               if Is_Ignored_Ghost_Entity (Over_Subp) then\n+                  null;\n+\n+               --  The parent subprogram carries policy Check\n+\n+               elsif Is_Checked_Ghost_Entity (Over_Subp) then\n+                  Error_Msg_N\n+                    (\"incompatible ghost policies in effect\", Subp);\n+\n+                  Error_Msg_Sloc := Sloc (Over_Subp);\n+                  Error_Msg_N\n+                    (\"\\& declared # with ghost policy `Check`\", Subp);\n+\n+                  Error_Msg_Sloc := Sloc (Subp);\n+                  Error_Msg_N\n+                    (\"\\overridden # with ghost policy `Ignore`\", Subp);\n+\n+               --  The parent subprogram is non-Ghost\n+\n+               else\n+                  Error_Msg_N\n+                    (\"incompatible ghost policies in effect\", Subp);\n+\n+                  Error_Msg_Sloc := Sloc (Over_Subp);\n+                  Error_Msg_N (\"\\& declared # as non-ghost subprogram\", Subp);\n+\n+                  Error_Msg_Sloc := Sloc (Subp);\n+                  Error_Msg_N\n+                    (\"\\overridden # with ghost policy `Ignore`\", Subp);\n+               end if;\n+\n+            --  When a tagged type is either non-Ghost or checked Ghost and\n+            --  one of its primitives overrides an inherited operation, the\n+            --  the primitive of the tagged type must be ignored Ghost if the\n+            --  overridden operation is ignored Ghost (SPARK RM 6.9(17)).\n+\n+            elsif Is_Ignored_Ghost_Entity (Over_Subp) then\n+\n+               --  Both the parent subprogram and the overriding subprogram are\n+               --  ignored Ghost.\n+\n+               if Is_Ignored_Ghost_Entity (Subp) then\n+                  null;\n+\n+               --  The overriding subprogram carries policy Check\n+\n+               elsif Is_Checked_Ghost_Entity (Subp) then\n+                  Error_Msg_N\n+                    (\"incompatible ghost policies in effect\", Subp);\n+\n+                  Error_Msg_Sloc := Sloc (Over_Subp);\n+                  Error_Msg_N\n+                    (\"\\& declared # with ghost policy `Ignore`\", Subp);\n+\n+                  Error_Msg_Sloc := Sloc (Subp);\n+                  Error_Msg_N\n+                    (\"\\overridden # with Ghost policy `Check`\", Subp);\n+\n+               --  The overriding subprogram is non-Ghost\n+\n+               else\n+                  Error_Msg_N\n+                    (\"incompatible ghost policies in effect\", Subp);\n+\n+                  Error_Msg_Sloc := Sloc (Over_Subp);\n+                  Error_Msg_N\n+                    (\"\\& declared # with ghost policy `Ignore`\", Subp);\n+\n+                  Error_Msg_Sloc := Sloc (Subp);\n+                  Error_Msg_N\n+                    (\"\\overridden # with non-ghost subprogram\", Subp);\n+               end if;\n+            end if;\n          end if;\n       end if;\n    end Check_Ghost_Overriding;\n \n+   ---------------------------\n+   -- Check_Ghost_Primitive --\n+   ---------------------------\n+\n+   procedure Check_Ghost_Primitive (Prim : Entity_Id; Typ : Entity_Id) is\n+   begin\n+      --  The Ghost policy in effect at the point of declaration of a primitive\n+      --  operation and a tagged type must match (SPARK RM 6.9(16)).\n+\n+      if Is_Tagged_Type (Typ) then\n+         if Is_Checked_Ghost_Entity (Prim)\n+           and then Is_Ignored_Ghost_Entity (Typ)\n+         then\n+            Error_Msg_N (\"incompatible ghost policies in effect\", Prim);\n+\n+            Error_Msg_Sloc := Sloc (Typ);\n+            Error_Msg_NE\n+              (\"\\tagged type & declared # with ghost policy `Ignore`\",\n+               Prim, Typ);\n+\n+            Error_Msg_Sloc := Sloc (Prim);\n+            Error_Msg_N\n+              (\"\\primitive subprogram & declared # with ghost policy `Check`\",\n+               Prim);\n+\n+         elsif Is_Ignored_Ghost_Entity (Prim)\n+           and then Is_Checked_Ghost_Entity (Typ)\n+         then\n+            Error_Msg_N (\"incompatible ghost policies in effect\", Prim);\n+\n+            Error_Msg_Sloc := Sloc (Typ);\n+            Error_Msg_NE\n+              (\"\\tagged type & declared # with ghost policy `Check`\",\n+               Prim, Typ);\n+\n+            Error_Msg_Sloc := Sloc (Prim);\n+            Error_Msg_N\n+              (\"\\primitive subprogram & declared # with ghost policy `Ignore`\",\n+               Prim);\n+         end if;\n+      end if;\n+   end Check_Ghost_Primitive;\n+\n+   ----------------------------\n+   -- Check_Ghost_Refinement --\n+   ----------------------------\n+\n+   procedure Check_Ghost_Refinement\n+     (State      : Node_Id;\n+      State_Id   : Entity_Id;\n+      Constit    : Node_Id;\n+      Constit_Id : Entity_Id)\n+   is\n+   begin\n+      if Is_Ghost_Entity (State_Id) then\n+         if Is_Ghost_Entity (Constit_Id) then\n+\n+            --  The Ghost policy in effect at the point of abstract state\n+            --  declaration and constituent must match (SPARK RM 6.9(15)).\n+\n+            if Is_Checked_Ghost_Entity (State_Id)\n+              and then Is_Ignored_Ghost_Entity (Constit_Id)\n+            then\n+               Error_Msg_Sloc := Sloc (Constit);\n+               SPARK_Msg_N (\"incompatible ghost policies in effect\", State);\n+\n+               SPARK_Msg_NE\n+                 (\"\\abstract state & declared with ghost policy `Check`\",\n+                  State, State_Id);\n+               SPARK_Msg_NE\n+                 (\"\\constituent & declared # with ghost policy `Ignore`\",\n+                  State, Constit_Id);\n+\n+            elsif Is_Ignored_Ghost_Entity (State_Id)\n+              and then Is_Checked_Ghost_Entity (Constit_Id)\n+            then\n+               Error_Msg_Sloc := Sloc (Constit);\n+               SPARK_Msg_N (\"incompatible ghost policies in effect\", State);\n+\n+               SPARK_Msg_NE\n+                 (\"\\abstract state & declared with ghost policy `Ignore`\",\n+                  State, State_Id);\n+               SPARK_Msg_NE\n+                 (\"\\constituent & declared # with ghost policy `Check`\",\n+                  State, Constit_Id);\n+            end if;\n+\n+            --  A constituent of a Ghost abstract state must be a Ghost entity\n+            --  (SPARK RM 7.2.2(12)).\n+\n+         else\n+            SPARK_Msg_NE\n+              (\"constituent of ghost state & must be ghost\",\n+               Constit, State_Id);\n+         end if;\n+      end if;\n+   end Check_Ghost_Refinement;\n+\n    ------------------\n    -- Ghost_Entity --\n    ------------------"}, {"sha": "7a0aec3906c60407e48d305a179212facd5275e6", "filename": "gcc/ada/ghost.ads", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fghost.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fghost.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.ads?ref=4179af278f73fc12431fc749bda65fbbf4752602", "patch": "@@ -45,16 +45,25 @@ package Ghost is\n    --  Determine whether node Ghost_Ref appears within a Ghost-friendly context\n    --  where Ghost entity Ghost_Id can safely reside.\n \n-   procedure Check_Ghost_Derivation (Typ : Entity_Id);\n-   --  Verify that the parent type and all progenitors of derived type or type\n-   --  extension Typ are Ghost. If this is not the case, issue an error.\n-\n    procedure Check_Ghost_Overriding\n      (Subp            : Entity_Id;\n       Overridden_Subp : Entity_Id);\n-   --  Verify that the Ghost policy of parent subprogram Overridden_Subp is the\n-   --  same as the Ghost policy of overriding subprogram Subp. Emit an error if\n-   --  this is not the case.\n+   --  Verify that the Ghost policy of parent subprogram Overridden_Subp is\n+   --  compatible with the Ghost policy of overriding subprogram Subp. Emit\n+   --  an error if this is not the case.\n+\n+   procedure Check_Ghost_Primitive (Prim : Entity_Id; Typ : Entity_Id);\n+   --  Verify that the Ghost policy of primitive operation Prim is the same as\n+   --  the Ghost policy of tagged type Typ. Emit an error if this is not the\n+   --  case.\n+\n+   procedure Check_Ghost_Refinement\n+     (State      : Node_Id;\n+      State_Id   : Entity_Id;\n+      Constit    : Node_Id;\n+      Constit_Id : Entity_Id);\n+   --  Verify that the Ghost policy of constituent Constit_Id is compatible\n+   --  with the Ghost policy of abstract state State_I.\n \n    function Implements_Ghost_Interface (Typ : Entity_Id) return Boolean;\n    --  Determine whether type Typ implements at least one Ghost interface\n@@ -85,7 +94,7 @@ package Ghost is\n \n    procedure Remove_Ignored_Ghost_Code;\n    --  Remove all code marked as ignored Ghost from the trees of all qualifying\n-   --  units.\n+   --  units (SPARK RM 6.9(4)).\n    --\n    --  WARNING: this is a separate front end pass, care should be taken to keep\n    --  it optimized."}, {"sha": "d401bd181a3dfb3eaf433a44de9414007d53d252", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4179af278f73fc12431fc749bda65fbbf4752602", "patch": "@@ -14649,8 +14649,8 @@ package body Sem_Ch3 is\n       then\n          Set_Derived_Name;\n \n-      --  Otherwise, the type is inheriting a private operation, so enter\n-      --  it with a special name so it can't be overridden.\n+      --  Otherwise, the type is inheriting a private operation, so enter it\n+      --  with a special name so it can't be overridden.\n \n       else\n          Set_Chars (New_Subp, New_External_Name (Chars (Parent_Subp), 'P'));\n@@ -19956,14 +19956,6 @@ package body Sem_Ch3 is\n \n          Check_Ghost_Completion (Priv_T, Full_T);\n \n-         --  In the case where the private view of a tagged type lacks a parent\n-         --  type and is subject to pragma Ghost, ensure that the parent type\n-         --  specified by the full view is also Ghost (SPARK RM 6.9(9)).\n-\n-         if Is_Derived_Type (Full_T) then\n-            Check_Ghost_Derivation (Full_T);\n-         end if;\n-\n          --  Propagate the attributes related to pragma Ghost from the private\n          --  to the full view.\n "}, {"sha": "17c26238fcace91fc760566590c117d87314be63", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4179af278f73fc12431fc749bda65fbbf4752602", "patch": "@@ -4701,18 +4701,6 @@ package body Sem_Ch6 is\n          then\n             Conformance_Error (\"\\formal subprograms not allowed!\");\n             return;\n-\n-         --  Pragma Ghost behaves as a convention in the context of subtype\n-         --  conformance (SPARK RM 6.9(5)). Do not check internally generated\n-         --  subprograms as their spec may reside in a Ghost region and their\n-         --  body not, or vice versa.\n-\n-         elsif Comes_From_Source (Old_Id)\n-           and then Comes_From_Source (New_Id)\n-           and then Is_Ghost_Entity (Old_Id) /= Is_Ghost_Entity (New_Id)\n-         then\n-            Conformance_Error (\"\\ghost modes do not match!\");\n-            return;\n          end if;\n       end if;\n \n@@ -9014,6 +9002,12 @@ package body Sem_Ch6 is\n                   Set_Has_Primitive_Operations (B_Typ);\n                   Set_Is_Primitive (S);\n                   Check_Private_Overriding (B_Typ);\n+\n+                  --  The Ghost policy in effect at the point of declaration of\n+                  --  a tagged type and a primitive operation must match\n+                  --  (SPARK RM 6.9(16)).\n+\n+                  Check_Ghost_Primitive (S, B_Typ);\n                end if;\n             end if;\n \n@@ -9041,6 +9035,12 @@ package body Sem_Ch6 is\n                   Set_Is_Primitive (S);\n                   Set_Has_Primitive_Operations (B_Typ);\n                   Check_Private_Overriding (B_Typ);\n+\n+                  --  The Ghost policy in effect at the point of declaration of\n+                  --  a tagged type and a primitive operation must match\n+                  --  (SPARK RM 6.9(16)).\n+\n+                  Check_Ghost_Primitive (S, B_Typ);\n                end if;\n \n                Next_Formal (Formal);\n@@ -9068,6 +9068,12 @@ package body Sem_Ch6 is\n                Set_Is_Primitive (S);\n                Set_Has_Primitive_Operations (B_Typ);\n                Check_Private_Overriding (B_Typ);\n+\n+               --  The Ghost policy in effect at the point of declaration of a\n+               --  tagged type and a primitive operation must match\n+               --  (SPARK RM 6.9(16)).\n+\n+               Check_Ghost_Primitive (S, B_Typ);\n             end if;\n          end if;\n       end Check_For_Primitive_Subprogram;"}, {"sha": "e951804cd6220260e127c9b3618b00058e522558", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 35, "deletions": 82, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=4179af278f73fc12431fc749bda65fbbf4752602", "patch": "@@ -11585,7 +11585,8 @@ package body Sem_Prag is\n \n                   --  Check Kind and Policy have allowed forms\n \n-                  Kind := Chars (Arg);\n+                  Kind   := Chars (Arg);\n+                  Policy := Get_Pragma_Arg (Arg);\n \n                   if not Is_Valid_Assertion_Kind (Kind) then\n                      Error_Pragma_Arg\n@@ -11595,6 +11596,30 @@ package body Sem_Prag is\n                   Check_Arg_Is_One_Of\n                     (Arg, Name_Check, Name_Disable, Name_Ignore);\n \n+                  if Kind = Name_Ghost then\n+\n+                     --  The Ghost policy must be either Check or Ignore\n+                     --  (SPARK RM 6.9(6)).\n+\n+                     if not Nam_In (Chars (Policy), Name_Check,\n+                                                    Name_Ignore)\n+                     then\n+                        Error_Pragma_Arg\n+                          (\"argument of pragma % Ghost must be Check or \"\n+                           & \"Ignore\", Policy);\n+                     end if;\n+\n+                     --  Pragma Assertion_Policy specifying a Ghost policy\n+                     --  cannot occur within a Ghost subprogram or package\n+                     --  (SPARK RM 6.9(14)).\n+\n+                     if Ghost_Mode > None then\n+                        Error_Pragma\n+                          (\"pragma % cannot appear within ghost subprogram or \"\n+                           & \"package\");\n+                     end if;\n+                  end if;\n+\n                   --  Rewrite the Assertion_Policy pragma as a series of\n                   --  Check_Policy pragmas of the form:\n \n@@ -11612,7 +11637,7 @@ package body Sem_Prag is\n                          Make_Pragma_Argument_Association (LocP,\n                            Expression => Make_Identifier (LocP, Kind)),\n                          Make_Pragma_Argument_Association (LocP,\n-                           Expression => Get_Pragma_Arg (Arg)))));\n+                           Expression => Policy))));\n \n                   Arg := Next (Arg);\n                end loop;\n@@ -12371,8 +12396,7 @@ package body Sem_Prag is\n          --  new form syntax.\n \n          when Pragma_Check_Policy => Check_Policy : declare\n-            Ident : Node_Id;\n-            Kind  : Node_Id;\n+            Kind : Node_Id;\n \n          begin\n             GNAT_Pragma;\n@@ -12416,29 +12440,6 @@ package body Sem_Prag is\n                Check_Arg_Is_One_Of\n                  (Arg2,\n                   Name_On, Name_Off, Name_Check, Name_Disable, Name_Ignore);\n-               Ident := Get_Pragma_Arg (Arg2);\n-\n-               if Chars (Kind) = Name_Ghost then\n-\n-                  --  Pragma Check_Policy specifying a Ghost policy cannot\n-                  --  occur within a ghost subprogram or package.\n-\n-                  if Ghost_Mode > None then\n-                     Error_Pragma\n-                       (\"pragma % cannot appear within ghost subprogram or \"\n-                        & \"package\");\n-\n-                  --  The policy identifier of pragma Ghost must be either\n-                  --  Check or Ignore (SPARK RM 6.9(7)).\n-\n-                  elsif not Nam_In (Chars (Ident), Name_Check,\n-                                                   Name_Ignore)\n-                  then\n-                     Error_Pragma_Arg\n-                       (\"argument of pragma % Ghost must be Check or Ignore\",\n-                        Arg2);\n-                  end if;\n-               end if;\n \n                --  And chain pragma on the Check_Policy_List for search\n \n@@ -15021,14 +15022,6 @@ package body Sem_Prag is\n                return;\n             end if;\n \n-            --  A derived type or type extension cannot be subject to pragma\n-            --  Ghost if either the parent type or one of the progenitor types\n-            --  is not Ghost (SPARK RM 6.9(9)).\n-\n-            if Is_Derived_Type (Id) then\n-               Check_Ghost_Derivation (Id);\n-            end if;\n-\n             --  Handle completions of types and constants that are subject to\n             --  pragma Ghost.\n \n@@ -15040,7 +15033,7 @@ package body Sem_Prag is\n \n                   --  The full declaration of a deferred constant cannot be\n                   --  subject to pragma Ghost unless the deferred declaration\n-                  --  is also Ghost (SPARK RM 6.9(10)).\n+                  --  is also Ghost (SPARK RM 6.9(9)).\n \n                   if Ekind (Prev_Id) = E_Constant then\n                      Error_Msg_Name_1 := Pname;\n@@ -15058,7 +15051,7 @@ package body Sem_Prag is\n \n                   --  The full declaration of a type cannot be subject to\n                   --  pragma Ghost unless the partial view is also Ghost\n-                  --  (SPARK RM 6.9(10)).\n+                  --  (SPARK RM 6.9(9)).\n \n                   else\n                      Error_Msg_NE (Fix_Error\n@@ -15092,7 +15085,7 @@ package body Sem_Prag is\n                if Is_OK_Static_Expression (Expr) then\n \n                   --  \"Ghostness\" cannot be turned off once enabled within a\n-                  --  region (SPARK RM 6.9(7)).\n+                  --  region (SPARK RM 6.9(6)).\n \n                   if Is_False (Expr_Value (Expr))\n                     and then Ghost_Mode > None\n@@ -25230,51 +25223,11 @@ package body Sem_Prag is\n \n                procedure Collect_Constituent is\n                begin\n-                  if Is_Ghost_Entity (State_Id) then\n-                     if Is_Ghost_Entity (Constit_Id) then\n-\n-                        --  The Ghost policy in effect at the point of abstract\n-                        --  state declaration and constituent must match\n-                        --  (SPARK RM 6.9(16)).\n-\n-                        if Is_Checked_Ghost_Entity (State_Id)\n-                          and then Is_Ignored_Ghost_Entity (Constit_Id)\n-                        then\n-                           Error_Msg_Sloc := Sloc (Constit);\n-\n-                           SPARK_Msg_N\n-                             (\"incompatible ghost policies in effect\", State);\n-                           SPARK_Msg_NE\n-                             (\"\\abstract state & declared with ghost policy \"\n-                              & \"Check\", State, State_Id);\n-                           SPARK_Msg_NE\n-                             (\"\\constituent & declared # with ghost policy \"\n-                              & \"Ignore\", State, Constit_Id);\n-\n-                        elsif Is_Ignored_Ghost_Entity (State_Id)\n-                          and then Is_Checked_Ghost_Entity (Constit_Id)\n-                        then\n-                           Error_Msg_Sloc := Sloc (Constit);\n-\n-                           SPARK_Msg_N\n-                             (\"incompatible ghost policies in effect\", State);\n-                           SPARK_Msg_NE\n-                             (\"\\abstract state & declared with ghost policy \"\n-                              & \"Ignore\", State, State_Id);\n-                           SPARK_Msg_NE\n-                             (\"\\constituent & declared # with ghost policy \"\n-                              & \"Check\", State, Constit_Id);\n-                        end if;\n+                  --  The Ghost policy in effect at the point of abstract state\n+                  --  declaration and constituent must match (SPARK RM 6.9(15))\n \n-                     --  A constituent of a Ghost abstract state must be a\n-                     --  Ghost entity (SPARK RM 7.2.2(12)).\n-\n-                     else\n-                        SPARK_Msg_NE\n-                          (\"constituent of ghost state & must be ghost\",\n-                           Constit, State_Id);\n-                     end if;\n-                  end if;\n+                  Check_Ghost_Refinement\n+                    (State, State_Id, Constit, Constit_Id);\n \n                   --  A synchronized state must be refined by a synchronized\n                   --  object or another synchronized state (SPARK RM 9.6)."}, {"sha": "18794c83a505c516972bb5d97b0c1d6a04a322b6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179af278f73fc12431fc749bda65fbbf4752602/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4179af278f73fc12431fc749bda65fbbf4752602", "patch": "@@ -4528,7 +4528,7 @@ package body Sem_Res is\n             end if;\n \n             --  The actual parameter of a Ghost subprogram whose formal is of\n-            --  mode IN OUT or OUT must be a Ghost variable (SPARK RM 6.9(13)).\n+            --  mode IN OUT or OUT must be a Ghost variable (SPARK RM 6.9(12)).\n \n             if Comes_From_Source (Nam)\n               and then Is_Ghost_Entity (Nam)"}]}