{"sha": "e09abfa408597ec644621b6318d735eb0a2d299d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA5YWJmYTQwODU5N2VjNjQ0NjIxYjYzMThkNzM1ZWIwYTJkMjk5ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-07-01T12:50:50Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-07-01T12:50:50Z"}, "message": "PR jit/66700: set TREE_ADDRESSABLE when building an ADDR_EXPR\n\ngcc/jit/ChangeLog:\n\tPR jit/66700\n\t* jit-playback.c (jit_mark_addressable): New function.\n\t(gcc::jit::playback::lvalue::get_address): Call\n\tjit_mark_addressable on the underlying tree.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/66700\n\t* jit.dg/all-non-failing-tests.h: Add\n\ttest-pr66700-observing-write-through-ptr.c.\n\t* jit.dg/test-pr66700-observing-write-through-ptr.c: New testcase.\n\nFrom-SVN: r225248", "tree": {"sha": "c3c7765d81997c4efc52f8fad6f56a8d17eb693c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3c7765d81997c4efc52f8fad6f56a8d17eb693c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e09abfa408597ec644621b6318d735eb0a2d299d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09abfa408597ec644621b6318d735eb0a2d299d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09abfa408597ec644621b6318d735eb0a2d299d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09abfa408597ec644621b6318d735eb0a2d299d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e807aeaae32697a203928a7900426d011c98dedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e807aeaae32697a203928a7900426d011c98dedc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e807aeaae32697a203928a7900426d011c98dedc"}], "stats": {"total": 175, "additions": 175, "deletions": 0}, "files": [{"sha": "baa7b832b6f4d32fcc22ed7a1bdf94ef5a0d4c91", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09abfa408597ec644621b6318d735eb0a2d299d/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09abfa408597ec644621b6318d735eb0a2d299d/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=e09abfa408597ec644621b6318d735eb0a2d299d", "patch": "@@ -1,3 +1,10 @@\n+2015-07-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66700\n+\t* jit-playback.c (jit_mark_addressable): New function.\n+\t(gcc::jit::playback::lvalue::get_address): Call\n+\tjit_mark_addressable on the underlying tree.\n+\n 2015-07-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* docs/topics/types.rst (gcc_jit_context_new_union_type): Add"}, {"sha": "1fe1091f7d32e2f0797d84fea583b593b72184a6", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09abfa408597ec644621b6318d735eb0a2d299d/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09abfa408597ec644621b6318d735eb0a2d299d/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=e09abfa408597ec644621b6318d735eb0a2d299d", "patch": "@@ -1164,6 +1164,47 @@ dereference (location *loc)\n   return new lvalue (get_context (), datum);\n }\n \n+/* Mark EXP saying that we need to be able to take the\n+   address of it; it should not be allocated in a register.\n+   Compare with e.g. c/c-typeck.c: c_mark_addressable.  */\n+\n+static void\n+jit_mark_addressable (tree exp)\n+{\n+  tree x = exp;\n+\n+  while (1)\n+    switch (TREE_CODE (x))\n+      {\n+      case COMPONENT_REF:\n+\t/* (we don't yet support bitfields)  */\n+\t/* fallthrough */\n+      case ADDR_EXPR:\n+      case ARRAY_REF:\n+      case REALPART_EXPR:\n+      case IMAGPART_EXPR:\n+\tx = TREE_OPERAND (x, 0);\n+\tbreak;\n+\n+      case COMPOUND_LITERAL_EXPR:\n+      case CONSTRUCTOR:\n+\tTREE_ADDRESSABLE (x) = 1;\n+\treturn;\n+\n+      case VAR_DECL:\n+      case CONST_DECL:\n+      case PARM_DECL:\n+      case RESULT_DECL:\n+\t/* (we don't have a concept of a \"register\" declaration) */\n+\t/* fallthrough */\n+      case FUNCTION_DECL:\n+\tTREE_ADDRESSABLE (x) = 1;\n+\t/* fallthrough */\n+      default:\n+\treturn;\n+      }\n+}\n+\n /* Construct a playback::rvalue instance (wrapping a tree) for an\n    address-lookup.  */\n \n@@ -1177,6 +1218,7 @@ get_address (location *loc)\n   tree ptr = build1 (ADDR_EXPR, t_ptrtype, t_lvalue);\n   if (loc)\n     get_context ()->set_tree_location (ptr, loc);\n+  jit_mark_addressable (t_lvalue);\n   return new rvalue (get_context (), ptr);\n }\n "}, {"sha": "1ff34ca961d278d9518d851ae0029f0a14f12f2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09abfa408597ec644621b6318d735eb0a2d299d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09abfa408597ec644621b6318d735eb0a2d299d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e09abfa408597ec644621b6318d735eb0a2d299d", "patch": "@@ -1,3 +1,10 @@\n+2015-07-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66700\n+\t* jit.dg/all-non-failing-tests.h: Add\n+\ttest-pr66700-observing-write-through-ptr.c.\n+\t* jit.dg/test-pr66700-observing-write-through-ptr.c: New testcase.\n+\n 2015-07-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/test-accessing-union.c: Add comments for use by"}, {"sha": "21ff428177d29392afb37d52f3bb0bae3443ae14", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09abfa408597ec644621b6318d735eb0a2d299d/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09abfa408597ec644621b6318d735eb0a2d299d/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=e09abfa408597ec644621b6318d735eb0a2d299d", "patch": "@@ -154,6 +154,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-pr66700-observing-write-through-ptr.c */\n+#define create_code create_code_pr66700_observing_write_through_ptr\n+#define verify_code verify_code_pr66700_observing_write_through_ptr\n+#include \"test-pr66700-observing-write-through-ptr.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-reading-struct.c */\n #define create_code create_code_reading_struct\n #define verify_code verify_code_reading_struct\n@@ -279,6 +286,9 @@ const struct testcase testcases[] = {\n   {\"nested_loop\",\n    create_code_nested_loop,\n    verify_code_nested_loop},\n+  {\"pr66700_observing_write_through_ptr\",\n+   create_code_pr66700_observing_write_through_ptr,\n+   verify_code_pr66700_observing_write_through_ptr},\n   {\"reading_struct \",\n    create_code_reading_struct ,\n    verify_code_reading_struct },"}, {"sha": "4ffbfacc09d11aef0023eb3518e77274d8f2ca70", "filename": "gcc/testsuite/jit.dg/test-pr66700-observing-write-through-ptr.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09abfa408597ec644621b6318d735eb0a2d299d/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr66700-observing-write-through-ptr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09abfa408597ec644621b6318d735eb0a2d299d/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr66700-observing-write-through-ptr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr66700-observing-write-through-ptr.c?ref=e09abfa408597ec644621b6318d735eb0a2d299d", "patch": "@@ -0,0 +1,109 @@\n+/* Test of PR jit/66700.  */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+  extern void\n+  write_back_through_ptr (double *d);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+\n+     double\n+     test_caller_of_write_back_through_ptr (void)\n+     {\n+       double d;\n+       d = 4.0;\n+       write_back_through_ptr (&d);\n+       return d;\n+     }\n+  */\n+  gcc_jit_type *t_void =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *t_double =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_DOUBLE);\n+  gcc_jit_type *t_ptr_to_double =\n+    gcc_jit_type_get_pointer (t_double);\n+\n+  /* Declare the imported function.  */\n+  gcc_jit_param *params[1];\n+  params[0] =\n+    gcc_jit_context_new_param (ctxt, NULL, t_ptr_to_double, \"d\");\n+  gcc_jit_function *called_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_IMPORTED,\n+\t\t\t\t  t_void,\n+\t\t\t\t  \"write_back_through_ptr\",\n+\t\t\t\t  1, params,\n+\t\t\t\t  0);\n+\n+  /* Build the test_fn.  */\n+  gcc_jit_function *test_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  t_double,\n+\t\t\t\t  \"test_caller_of_write_back_through_ptr\",\n+\t\t\t\t  0, NULL,\n+\t\t\t\t  0);\n+  gcc_jit_lvalue *d =\n+    gcc_jit_function_new_local (test_fn, NULL, t_double, \"d\");\n+\n+  gcc_jit_block *block = gcc_jit_function_new_block (test_fn, NULL);\n+\n+  /* \"d = 0.0\" */\n+  gcc_jit_block_add_assignment (\n+    block, NULL, d,\n+    gcc_jit_context_new_rvalue_from_int (ctxt, t_double, 4));\n+\n+  /* \"write_back_through_ptr (&d);\" */\n+  gcc_jit_rvalue *args[1];\n+  args[0] = gcc_jit_lvalue_get_address (d, NULL);\n+  gcc_jit_block_add_eval (\n+    block, NULL,\n+    gcc_jit_context_new_call (ctxt,\n+\t\t\t      NULL,\n+\t\t\t      called_fn,\n+\t\t\t      1, args));\n+  gcc_jit_block_end_with_return (block,\n+\t\t\t\t NULL,\n+\t\t\t\t gcc_jit_lvalue_as_rvalue (d));\n+}\n+\n+extern void\n+write_back_through_ptr (double *d)\n+{\n+  *d = 5.600000;\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef double (*fn_type) (void);\n+  CHECK_NON_NULL (result);\n+\n+  fn_type test_caller_of_write_back_through_ptr =\n+    (fn_type)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_caller_of_write_back_through_ptr\");\n+  CHECK_NON_NULL (test_caller_of_write_back_through_ptr);\n+\n+  /* Call the JIT-generated function.  */\n+  double d = test_caller_of_write_back_through_ptr ();\n+\n+  /* Verify that it correctly called \"write_back_through_ptr\".  */\n+  CHECK_VALUE (d, 5.600000);\n+}\n+"}]}