{"sha": "9ea659ac82ee639346acbf3c6ba2dff18d63c514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVhNjU5YWM4MmVlNjM5MzQ2YWNiZjNjNmJhMmRmZjE4ZDYzYzUxNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-22T04:58:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-22T04:58:45Z"}, "message": "std_cstring.h (memchr): Define \"C\" functions to __glibcpp_memchr.\n\n\n2001-05-21  Stephen M. Webb  <stephen@bregmasoft.com>\n\n\t* include/c_std/bits/std_cstring.h (memchr): Define \"C\" functions to\n\t__glibcpp_memchr.\n\t(strchr): Same, but to __glibcpp_strchr.\n\t(strpbrk): Same.\n\t(strrchr): Same.\n\t(strstr): Same.\n\t* include/c_std/bits/std_cwchar.h (wcschr): Same.\n\t(wcsbrk): Same.\n\t(wcsrchr): Same.\n\t(wcsstr): Same.\n\t(wmemchr): Same.\n\nFrom-SVN: r42421", "tree": {"sha": "6dd4188c2950851f31a672cd6c3106a05203b43f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dd4188c2950851f31a672cd6c3106a05203b43f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ea659ac82ee639346acbf3c6ba2dff18d63c514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea659ac82ee639346acbf3c6ba2dff18d63c514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea659ac82ee639346acbf3c6ba2dff18d63c514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea659ac82ee639346acbf3c6ba2dff18d63c514/comments", "author": null, "committer": null, "parents": [{"sha": "d4fae8b1f00a33a5a3081d0ec7259ed95b74d806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fae8b1f00a33a5a3081d0ec7259ed95b74d806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4fae8b1f00a33a5a3081d0ec7259ed95b74d806"}], "stats": {"total": 140, "additions": 73, "deletions": 67}, "files": [{"sha": "af79841e9be187d952d7d95aa6d8469b89b5eefd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea659ac82ee639346acbf3c6ba2dff18d63c514/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea659ac82ee639346acbf3c6ba2dff18d63c514/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9ea659ac82ee639346acbf3c6ba2dff18d63c514", "patch": "@@ -1,3 +1,21 @@\n+2001-05-21  Stephen M. Webb  <stephen@bregmasoft.com>\n+\n+\t* include/c_std/bits/std_cstring.h (memchr): Define \"C\" functions to\n+\t__glibcpp_memchr.\n+\t(strchr): Same, but to __glibcpp_strchr.\n+\t(strpbrk): Same.\n+\t(strrchr): Same.\n+\t(strstr): Same.  \n+\t* include/c_std/bits/std_cwchar.h (wcschr): Same.\n+\t(wcsbrk): Same.\n+\t(wcsrchr): Same.\n+\t(wcsstr): Same.\n+\t(wmemchr): Same.\n+\n+2001-05-21  Benjamin Kosnik  <bkoz@kredhat.com>\n+\n+\t* testsuite/21_strings/c_strings.cc (main): Fix.\n+\n 2001-05-19  Phil Edwards  <pme@sources.redhat.com>\n \n \t* acinclude.m4:  Fix --help spacing, correct comments."}, {"sha": "02b7cda872269c0999975b2343eefcfae7a0f991", "filename": "libstdc++-v3/include/c_std/bits/std_cstring.h", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea659ac82ee639346acbf3c6ba2dff18d63c514/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea659ac82ee639346acbf3c6ba2dff18d63c514/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h?ref=9ea659ac82ee639346acbf3c6ba2dff18d63c514", "patch": "@@ -39,6 +39,14 @@\n #include <bits/c++config.h>\n #include <bits/std_cstddef.h>\n \n+\n+// Need to mangle these \"C\" functions because C++ modifies their signature.\n+#define memchr  __glibcpp_memchr\n+#define strchr  __glibcpp_strchr\n+#define strpbrk __glibcpp_strpbrk\n+#define strrchr __glibcpp_strrchr\n+#define strstr  __glibcpp_strstr\n+\n #pragma GCC system_header\n #include <string.h>\n \n@@ -79,51 +87,38 @@ namespace std\n   extern \"C\" int strcoll(const char*, const char*); \n   extern \"C\" int strncmp(const char*, const char*, size_t); \n   extern \"C\" size_t strxfrm(char*, const char*, size_t); \n-\n-  inline const void*\n-  memchr(const void* __p, int __c, size_t __n)\n-  { return const_cast<const void*>(::memchr(__p, __c, __n)); }\n-\n+  extern \"C\" const void* memchr(const void*, int, size_t); \n   inline void*\n   memchr(void* __p, int __c, size_t __n)\n-  { return ::memchr(const_cast<const void*>(__p), __c, __n); }\n-\n-  inline const char*\n-  strchr(const char* __s1, int __n)\n-  { return const_cast<const char*>(::strchr(__s1, __n)); }\n-\n+  {\n+    return const_cast<void*>(memchr(const_cast<const void*>(__p), __c, __n));\n+  }\n+  extern \"C\" const char* strchr(const char*, int); \n   inline char*\n   strchr(char* __s1, int __n)\n-  { return ::strchr(const_cast<const char*>(__s1), __n); }\n-\n+  {\n+    return const_cast<char*>(strchr(const_cast<const char*>(__s1), __n));\n+  }\n   extern \"C\" size_t strcspn(const char*, const char*); \n-\n-  inline const char*\n-  strpbrk(const char* __s1, const char* __s2)\n-  { return const_cast<char*>(::strpbrk(__s1, __s2)); }\n-\n+  extern \"C\" const char* strpbrk(const char*, const char*); \n   inline char*\n   strpbrk(char* __s1, const char* __s2)\n-  { return ::strpbrk(const_cast<const char*>(__s1), __s2); }\n-\n-  inline const char*\n-  strrchr(const char* __s1, int __n)\n-  { return const_cast<char*>(::strrchr(__s1, __n)); }\n-\n+  {\n+    return const_cast<char*>(strpbrk(const_cast<const char*>(__s1), __s2));\n+  }\n+  extern \"C\" const char* strrchr(const char*, int); \n   inline char*\n   strrchr(char* __s1, int __n)\n-  { return ::strrchr(const_cast<const char*>(__s1), __n); }\n-\n+  {\n+    return const_cast<char*>(strrchr(const_cast<const char*>(__s1), __n));\n+  }\n   extern \"C\" size_t strspn(const char*, const char*); \n-\n-  inline const char*\n-  strstr(const char* __s1, const char* __s2)\n-  { return const_cast<char*>(::strstr(__s1, __s2)); }\n-\n+  extern \"C\" const char* strstr(const char*, const char*); \n   inline char*\n   strstr(char* __s1, const char* __s2)\n-  { return ::strstr(const_cast<const char*>(__s1), __s2); }\n-\n+  {\n+    return const_cast<char*>(strstr(const_cast<const char*>(__s1), __s2));\n+  }\n   extern \"C\" char* strtok(char*, const char*); \n   extern \"C\" void* memset(void*, int, size_t); \n   extern \"C\" char* strerror(int); "}, {"sha": "d3fe012b7b862fd73e13a6d1dca98b83c628036a", "filename": "libstdc++-v3/include/c_std/bits/std_cwchar.h", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea659ac82ee639346acbf3c6ba2dff18d63c514/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea659ac82ee639346acbf3c6ba2dff18d63c514/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h?ref=9ea659ac82ee639346acbf3c6ba2dff18d63c514", "patch": "@@ -42,6 +42,13 @@\n #include <bits/std_cstdarg.h>\n \n #if _GLIBCPP_HAVE_WCHAR_H\n+// Need to mangle these \"C\" functions because C++ modifies their signature.\n+#define wcschr  __glibcpp_wcschr\n+#define wcsbrk  __glibcpp_wcspbrk\n+#define wcsrchr  __glibcpp_wcsrchr\n+#define wcsstr  __glibcpp_wcsstr\n+#define wmemchr  __glibcpp_wmemchr\n+\n #pragma GCC system_header\n #include <wchar.h>\n #endif\n@@ -156,54 +163,40 @@ namespace std\n   extern \"C\" int wcscoll(const wchar_t*, const wchar_t*); \n   extern \"C\" int wcsncmp(const wchar_t*, const wchar_t*, size_t); \n   extern \"C\" size_t wcsxfrm(wchar_t*, const wchar_t*, size_t); \n-\n-  inline const wchar_t*\n-  wcschr(const wchar_t* __p, wchar_t __c)\n-  { return const_cast<const wchar_t*>(::wcschr(__p, __c)); }\n-\n+  extern \"C\" const wchar_t* wcschr(const wchar_t*, wchar_t); \n   inline wchar_t*\n   wcschr(wchar_t* __p, wchar_t __c)\n-  { return ::wcschr(const_cast<const wchar_t*>(__p), __c); }\n-\n+  {\n+    return const_cast<wchar_t*>(wcschr(const_cast<const wchar_t*>(__p), __c));\n+  }\n   extern \"C\" size_t wcscspn(const wchar_t*, const wchar_t*); \n   extern \"C\" size_t wcslen(const wchar_t*); \n-\n-  inline const wchar_t*\n-  wcspbrk(const wchar_t* __s1, wchar_t* __s2)\n-  { return const_cast<const wchar_t*>(::wcspbrk(__s1, __s2)); }\n-\n+  extern \"C\" const wchar_t* wcspbrk(const wchar_t*, const wchar_t*); \n   inline wchar_t*\n   wcspbrk(wchar_t* __s1, wchar_t* __s2)\n-  { return ::wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }\n-\n-  inline const wchar_t*\n-  wcsrchr(const wchar_t* __p, wchar_t __c)\n-  { return const_cast<const wchar_t*>(::wcsrchr(__p, __c)); }\n-\n+  {\n+    return const_cast<wchar_t*>(wcspbrk(const_cast<const wchar_t*>(__s1), __s2));\n+  }\n+  extern \"C\" const wchar_t* wcsrchr(const wchar_t*, wchar_t); \n   inline wchar_t*\n   wcsrchr(wchar_t* __p, wchar_t __c)\n-  { return ::wcsrchr(const_cast<const wchar_t*>(__p), __c); }\n-\n+  {\n+    return const_cast<wchar_t*>(wcsrchr(const_cast<const wchar_t*>(__p), __c));\n+  }\n   extern \"C\" size_t wcsspn(const wchar_t*, const wchar_t*); \n-\n-  inline const wchar_t*\n-  wcsstr(const wchar_t* __s1, wchar_t* __s2)\n-  { return const_cast<const wchar_t*>(::wcsstr(__s1, __s2)); }\n-\n+  extern \"C\" const wchar_t* wcsstr(const wchar_t*, const wchar_t*); \n   inline wchar_t*\n   wcsstr(wchar_t* __s1, wchar_t* __s2)\n-  { return ::wcsstr(const_cast<const wchar_t*>(__s1), __s2); }\n-\n+  {\n+    return const_cast<wchar_t*>(wcsstr(const_cast<const wchar_t*>(__s1), __s2));\n+  }\n   extern \"C\" wchar_t* wcstok(wchar_t*, const wchar_t*, wchar_t**); \n-\n-  inline const wchar_t*\n-  wmemchr(const wchar_t* __p, wchar_t __c, size_t __n)\n-  { return const_cast<wchar_t*>(::wmemchr(__p, __c, __n)); }\n-\n+  extern \"C\" const wchar_t* wmemchr(const wchar_t*, wchar_t, size_t);\n   inline wchar_t*\n   wmemchr(wchar_t* __p, wchar_t __c, size_t __n)\n-  { return ::wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }\n-\n+  {\n+    return const_cast<wchar_t*>(wmemchr(const_cast<const wchar_t*>(__p), __c, __n));\n+  }\n   extern \"C\" int wmemcmp(const wchar_t*, const wchar_t*, size_t); \n   extern \"C\" wchar_t* wmemcpy(wchar_t*, const wchar_t*, size_t); \n   extern \"C\" wchar_t* wmemmove(wchar_t*, const wchar_t*, size_t); "}]}