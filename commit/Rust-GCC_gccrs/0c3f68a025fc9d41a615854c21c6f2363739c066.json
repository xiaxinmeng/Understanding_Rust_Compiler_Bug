{"sha": "0c3f68a025fc9d41a615854c21c6f2363739c066", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMzZjY4YTAyNWZjOWQ0MWE2MTU4NTRjMjFjNmYyMzYzNzM5YzA2Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-04-08T18:09:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-04-08T18:09:35Z"}, "message": "re PR c++/56871 ([c++11] Specialization of constexpr Templated Function)\n\n/cp\n2013-04-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/56871\n\t* decl.c (validate_constexpr_redeclaration): Allow an explicit\n\tspecialization to be different wrt the constexpr specifier.\n\n/testsuite\n2013-04-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/56871\n\t* g++.dg/cpp0x/constexpr-specialization.C: New.\n\nFrom-SVN: r197597", "tree": {"sha": "92fdcb27459923ecf6448b366a65496e139d9866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92fdcb27459923ecf6448b366a65496e139d9866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c3f68a025fc9d41a615854c21c6f2363739c066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3f68a025fc9d41a615854c21c6f2363739c066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3f68a025fc9d41a615854c21c6f2363739c066", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3f68a025fc9d41a615854c21c6f2363739c066/comments", "author": null, "committer": null, "parents": [{"sha": "8ddb5a296eea999c6376f43a643b2baf79cf886a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ddb5a296eea999c6376f43a643b2baf79cf886a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ddb5a296eea999c6376f43a643b2baf79cf886a"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "8b9bf350c0733fa435623f6686828505c43d4050", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3f68a025fc9d41a615854c21c6f2363739c066/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3f68a025fc9d41a615854c21c6f2363739c066/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c3f68a025fc9d41a615854c21c6f2363739c066", "patch": "@@ -1,3 +1,9 @@\n+2013-04-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/56871\n+\t* decl.c (validate_constexpr_redeclaration): Allow an explicit\n+\tspecialization to be different wrt the constexpr specifier.\n+\n 2013-04-06  Jason Merrill  <jason@redhat.com>\n \n \t* parser.c (cp_parser_std_attribute): Treat [[noreturn]] like GNU"}, {"sha": "01804d2cf682391e8824e58a4032467a87db3721", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3f68a025fc9d41a615854c21c6f2363739c066/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3f68a025fc9d41a615854c21c6f2363739c066/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0c3f68a025fc9d41a615854c21c6f2363739c066", "patch": "@@ -1196,12 +1196,21 @@ validate_constexpr_redeclaration (tree old_decl, tree new_decl)\n   if (DECL_DECLARED_CONSTEXPR_P (old_decl)\n       == DECL_DECLARED_CONSTEXPR_P (new_decl))\n     return true;\n-  if (TREE_CODE (old_decl) == FUNCTION_DECL && DECL_BUILT_IN (old_decl))\n+  if (TREE_CODE (old_decl) == FUNCTION_DECL)\n     {\n-      /* Hide a built-in declaration.  */\n-      DECL_DECLARED_CONSTEXPR_P (old_decl)\n-\t= DECL_DECLARED_CONSTEXPR_P (new_decl);\n-      return true;\n+      if (DECL_BUILT_IN (old_decl))\n+\t{\n+\t  /* Hide a built-in declaration.  */\n+\t  DECL_DECLARED_CONSTEXPR_P (old_decl)\n+\t    = DECL_DECLARED_CONSTEXPR_P (new_decl);\n+\t  return true;\n+\t}\n+      /* 7.1.5 [dcl.constexpr]\n+\t Note: An explicit specialization can differ from the template\n+\t declaration with respect to the constexpr specifier.  */\n+      if (! DECL_TEMPLATE_SPECIALIZATION (old_decl)\n+\t  && DECL_TEMPLATE_SPECIALIZATION (new_decl))\n+\treturn true;\n     }\n   error (\"redeclaration %qD differs in %<constexpr%>\", new_decl);\n   error (\"from previous declaration %q+D\", old_decl);"}, {"sha": "9fdbdfc0ba18201c6d616efe4c2ee0645418889e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3f68a025fc9d41a615854c21c6f2363739c066/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3f68a025fc9d41a615854c21c6f2363739c066/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c3f68a025fc9d41a615854c21c6f2363739c066", "patch": "@@ -1,3 +1,8 @@\n+2013-04-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/56871\n+\t* g++.dg/cpp0x/constexpr-specialization.C: New.\n+\n 2013-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/pr56837.c: New test."}, {"sha": "8003ed9e1332f6bb5f9a4dd9aa991f3242f494e3", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-specialization.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3f68a025fc9d41a615854c21c6f2363739c066/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-specialization.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3f68a025fc9d41a615854c21c6f2363739c066/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-specialization.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-specialization.C?ref=0c3f68a025fc9d41a615854c21c6f2363739c066", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/56871\n+// { dg-options \"-std=c++11\" }\n+\n+template<typename T> constexpr int foo(T);\n+template<> int foo(int);\n+template<> int foo(int);            // { dg-error \"previous\" }\n+template<> constexpr int foo(int);  // { dg-error \"redeclaration\" }\n+\n+template<typename T> int bar(T);\n+template<> constexpr int bar(int);\n+template<> constexpr int bar(int);  // { dg-error \"previous\" }\n+template<> int bar(int);            // { dg-error \"redeclaration\" }"}]}