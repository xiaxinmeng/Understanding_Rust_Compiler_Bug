{"sha": "e95b1e6a2ed1031b5ac054f4e457d001a981d726", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1YjFlNmEyZWQxMDMxYjVhYzA1NGY0ZTQ1N2QwMDFhOTgxZDcyNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-06-09T14:31:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-06-09T14:31:54Z"}, "message": "configure.in: Check whether gas supports -relax.\n\n\t* configure.in: Check whether gas supports -relax.\n\t* configure, config.in: Rebuilt.\n\t* config/sparc/sparc.h (ASM_RELAX_SPEC): Define.\n\t(EXTRA_SPECS): Add asm_relax.\n\t(ASM_SPEC): Add %(asm_relax).\n\t(TARGET_SWITCHES): Add -mrelax and -mno-relax.\n\t* config/sparc/linux64.h (LINK_ARCH_SPEC): Rename to LINK_SPEC.\n\t(LINK_SPEC): Pass -relax to linker unless -mno-relax or -r.\n\t(ASM_SPEC): Add %(asm_relax).\n\t* config/sparc/linux.h (LINK_SPEC, ASM_SPEC): Likewise.\n\t* config/sparc/sparc.c (output_sibcall): If HAVE_AS_RELAX_OPTION,\n\tnever use sethi/jmpl for leaf tail calls.  Use or with rs2 %g0\n\tinstead of mov, so that gas can further optimize it.\n\nFrom-SVN: r34466", "tree": {"sha": "7149b8de2f1865dbf6ad01309fa17d61e3392647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7149b8de2f1865dbf6ad01309fa17d61e3392647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e95b1e6a2ed1031b5ac054f4e457d001a981d726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95b1e6a2ed1031b5ac054f4e457d001a981d726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e95b1e6a2ed1031b5ac054f4e457d001a981d726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95b1e6a2ed1031b5ac054f4e457d001a981d726/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dba1acea53d877f27d60ff12cb99f2ff442aa358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba1acea53d877f27d60ff12cb99f2ff442aa358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba1acea53d877f27d60ff12cb99f2ff442aa358"}], "stats": {"total": 113, "additions": 100, "deletions": 13}, "files": [{"sha": "f09a3bbcd0610722c8c8c46dca4ae926cf828cf2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e95b1e6a2ed1031b5ac054f4e457d001a981d726", "patch": "@@ -1,3 +1,19 @@\n+2000-06-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.in: Check whether gas supports -relax.\n+\t* configure, config.in: Rebuilt.\n+\t* config/sparc/sparc.h (ASM_RELAX_SPEC): Define.\n+\t(EXTRA_SPECS): Add asm_relax.\n+\t(ASM_SPEC): Add %(asm_relax).\n+\t(TARGET_SWITCHES): Add -mrelax and -mno-relax.\n+\t* config/sparc/linux64.h (LINK_ARCH_SPEC): Rename to LINK_SPEC.\n+\t(LINK_SPEC): Pass -relax to linker unless -mno-relax or -r.\n+\t(ASM_SPEC): Add %(asm_relax).\n+\t* config/sparc/linux.h (LINK_SPEC, ASM_SPEC): Likewise.\n+\t* config/sparc/sparc.c (output_sibcall): If HAVE_AS_RELAX_OPTION,\n+\tnever use sethi/jmpl for leaf tail calls.  Use or with rs2 %g0\n+\tinstead of mov, so that gas can further optimize it.\n+\n 2000-06-08  James E. Wilson  <wilson@bletchleypark.cygnus.com>\n \n \t* dwarf2out.c (size_of_die, case dw_val_class_const): Use"}, {"sha": "6521a6e255b6661d990ccd4f1a0860574f309ad6", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=e95b1e6a2ed1031b5ac054f4e457d001a981d726", "patch": "@@ -426,6 +426,9 @@\n /* Define if your assembler supports .register. */\n #undef HAVE_AS_REGISTER_PSEUDO_OP\n \n+/* Define if your assembler supports -relax option. */\n+#undef HAVE_AS_RELAX_OPTION\n+\n /* Define if the assembler supports 64bit sparc. */\n #undef AS_SPARC64_FLAG\n "}, {"sha": "b92ecd576312d51f308df6c8b871c2c589f91d5e", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=e95b1e6a2ed1031b5ac054f4e457d001a981d726", "patch": "@@ -179,6 +179,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #else\n #define LINK_SPEC \"-m elf32_sparc -Y P,/usr/lib %{shared:-shared} \\\n+  %{!mno-relax:%{!r:-relax}} \\\n   %{!shared: \\\n     %{!ibcs: \\\n       %{!static: \\\n@@ -191,7 +192,8 @@ Boston, MA 02111-1307, USA.  */\n    It's safe to pass -s always, even if -g is not used. */\n #undef ASM_SPEC\n #define ASM_SPEC \\\n-  \"%{V} %{v:%{!V:-V}} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s %{fpic:-K PIC} %{fPIC:-K PIC}\"\n+  \"%{V} %{v:%{!V:-V}} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s %{fpic:-K PIC} \\\n+   %{fPIC:-K PIC} %(asm_relax)\"\n \n /* Same as sparc.h */\n #undef DBX_REGISTER_NUMBER"}, {"sha": "0f87b2cfc0651ecb6aece527329bbe374988ba06", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=e95b1e6a2ed1031b5ac054f4e457d001a981d726", "patch": "@@ -246,6 +246,7 @@ Boston, MA 02111-1307, USA.  */\n #define LINK_SPEC \"\\\n %(link_arch) \\\n %{mlittle-endian:-EL} \\\n+%{!mno-relax:%{!r:-relax}} \\\n \"\n \n #undef\tCC1_SPEC\n@@ -283,14 +284,15 @@ Boston, MA 02111-1307, USA.  */\n #else /* !SPARC_BI_ARCH */\n \n #undef LINK_SPEC\n-#define LINK_ARCH_SPEC \"-m elf64_sparc -Y P,/usr/lib64 %{shared:-shared} \\\n+#define LINK_SPEC \"-m elf64_sparc -Y P,/usr/lib64 %{shared:-shared} \\\n   %{!shared: \\\n     %{!ibcs: \\\n       %{!static: \\\n         %{rdynamic:-export-dynamic} \\\n         %{!dynamic-linker:-dynamic-linker /lib64/ld-linux.so.2}} \\\n         %{static:-static}}} \\\n %{mlittle-endian:-EL} \\\n+%{!mno-relax:%{!r:-relax}} \\\n \"\n \n #endif /* !SPARC_BI_ARCH */\n@@ -308,8 +310,7 @@ Boston, MA 02111-1307, USA.  */\n %{Wa,*:%*} \\\n -s %{fpic:-K PIC} %{fPIC:-K PIC} \\\n %{mlittle-endian:-EL} \\\n-%(asm_cpu) %(asm_arch) \\\n-\"\n+%(asm_cpu) %(asm_arch) %(asm_relax)\"\n \n /* Same as sparc.h */\n #undef DBX_REGISTER_NUMBER"}, {"sha": "2b44d2f1bc14e5f432547602743120e37c572383", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e95b1e6a2ed1031b5ac054f4e457d001a981d726", "patch": "@@ -3737,7 +3737,15 @@ output_sibcall (insn, call_operand)\n \n   if (leaf_regs)\n     {\n+#ifdef HAVE_AS_RELAX_OPTION\n+      /* If as and ld are relaxing tail call insns into branch always,\n+\t use or %o7,%g0,X; call Y; or X,%g0,%o7 always, so that it can\n+\t be optimized.  With sethi/jmpl as nor ld has no easy way how to\n+\t find out if somebody does not branch between the sethi and jmpl.  */\n+      int spare_slot = 0;\n+#else\n       int spare_slot = ((TARGET_ARCH32 || TARGET_CM_MEDLOW) && ! flag_pic);\n+#endif\n       int size = 0;\n \n       if ((actual_fsize || ! spare_slot) && delay_slot)\n@@ -3786,9 +3794,11 @@ output_sibcall (insn, call_operand)\n \t{\n \t  if (size)\n \t    fprintf (asm_out_file, \"\\tsub\\t%%sp, -%d, %%sp\\n\", size);\n-\t  output_asm_insn (\"mov\\t%%o7, %%g1\", operands);\n+\t  /* Use or with rs2 %%g0 instead of mov, so that as/ld can optimize\n+\t     it into branch if possible.  */\n+\t  output_asm_insn (\"or\\t%%o7, %%g0, %%g1\", operands);\n \t  output_asm_insn (\"call\\t%a0, 0\", operands);\n-\t  output_asm_insn (\" mov\\t%%g1, %%o7\", operands);\n+\t  output_asm_insn (\" or\\t%%g1, %%g0, %%o7\", operands);\n \t}\n       return \"\";\n     }"}, {"sha": "1a584cda69bee2ac67e60b97413075035830ac7a", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=e95b1e6a2ed1031b5ac054f4e457d001a981d726", "patch": "@@ -324,12 +324,17 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n %{!m32:%{!m64:%(asm_arch_default)}} \\\n \"\n \n+#ifdef HAVE_AS_RELAX_OPTION\n+#define ASM_RELAX_SPEC \"%{!mno-relax:-relax}\"\n+#else\n+#define ASM_RELAX_SPEC \"\"\n+#endif\n+\n /* Special flags to the Sun-4 assembler when using pipe for input.  */\n \n #define ASM_SPEC \"\\\n %| %{R} %{!pg:%{!p:%{fpic:-k} %{fPIC:-k}}} %{keep-local-as-symbols:-L} \\\n-%(asm_cpu) \\\n-\"\n+%(asm_cpu) %(asm_relax)\"\n \n #define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} %{g:-lg}}\"\n \n@@ -362,6 +367,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n   { \"asm_cpu_default\",\tASM_CPU_DEFAULT_SPEC },\t\\\n   { \"asm_arch32\",\tASM_ARCH32_SPEC },\t\\\n   { \"asm_arch64\",\tASM_ARCH64_SPEC },\t\\\n+  { \"asm_relax\",\tASM_RELAX_SPEC },\t\\\n   { \"asm_arch_default\",\tASM_ARCH_DEFAULT_SPEC },\\\n   { \"asm_arch\",\t\tASM_ARCH_SPEC },\t\\\n   SUBTARGET_EXTRA_SPECS\n@@ -606,6 +612,8 @@ extern int target_flags;\n     {\"no-stack-bias\", -MASK_STACK_BIAS,\t\t\t\"Do not use stack bias\" }, \\\n     {\"faster-structs\", MASK_FASTER_STRUCTS,\t\t\t\"Use structs on stronger alignment for double-word copies\" }, \\\n     {\"no-faster-structs\", -MASK_FASTER_STRUCTS,\t\t\"Do not use structs on stronger alignment for double-word copies\" }, \\\n+    {\"relax\", 0,\t\t\t\t\t\"Optimize tail call instructions in assembler and linker\" }, \\\n+    {\"no-relax\", 0,\t\t\t\t\t\"Do not optimize tail call instructions in assembler or linker\" }, \\\n     SUBTARGET_SWITCHES\t\t\t\\\n     { \"\", TARGET_DEFAULT, \"\"}}\n "}, {"sha": "5dda2dbfd35226e42c4848efcc4155f0b74b2fa8", "filename": "gcc/configure", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e95b1e6a2ed1031b5ac054f4e457d001a981d726", "patch": "@@ -8916,10 +8916,38 @@ EOF\n \n     fi\n \n+    echo $ac_n \"checking assembler supports -relax\"\"... $ac_c\" 1>&6\n+echo \"configure:8921: checking assembler supports -relax\" >&5\n+if eval \"test \\\"`echo '$''{'gcc_cv_as_relax_opt'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  \n+\tgcc_cv_as_relax_opt=unknown\n+\tif test x$gcc_cv_as != x; then\n+\t    # Check if gas supports -relax\n+\t    echo \".text\" > conftest.s\n+\t    if $gcc_cv_as -relax -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tgcc_cv_as_relax_opt=yes\n+\t    else\n+\t\tgcc_cv_as_relax_opt=no\n+\t    fi\n+\t    rm -f conftest.s conftest.o\n+\tfi\n+    \n+fi\n+\n+echo \"$ac_t\"\"$gcc_cv_as_relax_opt\" 1>&6\n+    if test \"x$gcc_cv_as_relax_opt\" = xyes; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_AS_RELAX_OPTION 1\n+EOF\n+\n+    fi\n+\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:8923: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n+echo \"configure:8951: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -8964,7 +8992,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:8968: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:8996: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -9003,7 +9031,7 @@ EOF\n \n   i[34567]86-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:9007: checking assembler instructions\" >&5\n+echo \"configure:9035: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_as != x; then\n \tset \"filds fists\" \"filds mem; fists mem\"\n@@ -9133,7 +9161,7 @@ fi\n \n # Build a new-libstdc++ system (ie libstdc++-v3)\n echo $ac_n \"checking for libstdc++ to install\"\"... $ac_c\" 1>&6\n-echo \"configure:9137: checking for libstdc++ to install\" >&5\n+echo \"configure:9165: checking for libstdc++ to install\" >&5\n # Check whether --enable-libstdcxx-v3 or --disable-libstdcxx-v3 was given.\n if test \"${enable_libstdcxx_v3+set}\" = set; then\n   enableval=\"$enable_libstdcxx_v3\"\n@@ -9157,7 +9185,7 @@ EOF\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:9161: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:9189: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "90540547db1c03032243ffeb00a2e2cf9981cc48", "filename": "gcc/configure.in", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95b1e6a2ed1031b5ac054f4e457d001a981d726/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=e95b1e6a2ed1031b5ac054f4e457d001a981d726", "patch": "@@ -4550,6 +4550,25 @@ case \"$target\" in\n \t\t[Define if your assembler supports .register.])\n     fi\n \n+    AC_CACHE_CHECK([assembler supports -relax],\n+\tgcc_cv_as_relax_opt, [\n+\tgcc_cv_as_relax_opt=unknown\n+\tif test x$gcc_cv_as != x; then\n+\t    # Check if gas supports -relax\n+\t    echo \".text\" > conftest.s\n+\t    if $gcc_cv_as -relax -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tgcc_cv_as_relax_opt=yes\n+\t    else\n+\t\tgcc_cv_as_relax_opt=no\n+\t    fi\n+\t    rm -f conftest.s conftest.o\n+\tfi\n+    ])\n+    if test \"x$gcc_cv_as_relax_opt\" = xyes; then\n+\tAC_DEFINE(HAVE_AS_RELAX_OPTION, 1,\n+\t\t[Define if your assembler supports -relax option.])\n+    fi\n+\n     case \"$tm_file\" in\n     *64*)\n \tAC_CACHE_CHECK([for 64 bit support in assembler ($gcc_cv_as)],"}]}