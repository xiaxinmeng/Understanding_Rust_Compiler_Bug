{"sha": "bf3428d0b60d92b52699e4def461ad33f5ae0ce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzNDI4ZDBiNjBkOTJiNTI2OTllNGRlZjQ2MWFkMzNmNWFlMGNlNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-06-16T15:35:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-06-16T15:35:10Z"}, "message": "cp-tree.h (finish_mem_initializers): Declare.\n\n\t* cp-tree.h (finish_mem_initializers): Declare.\n\t(count_trees): Likewise.\n\t* parse.y (base_init): Use finish_mem_initializers.\n\t* semantics.c (finish_mem_initializers): New function.\n\n\t* tree.c (count_trees_r): Prototype.  Use DATA parameter to store\n\tthe number of trees.\n\t(n_trees): Remove.\n\t(count_trees): Don't use it.\n\nFrom-SVN: r34574", "tree": {"sha": "20ff6c673647b5b53fc1f7c318e25ca02c88d2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20ff6c673647b5b53fc1f7c318e25ca02c88d2d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf3428d0b60d92b52699e4def461ad33f5ae0ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3428d0b60d92b52699e4def461ad33f5ae0ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3428d0b60d92b52699e4def461ad33f5ae0ce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/comments", "author": null, "committer": null, "parents": [{"sha": "22c40c28b39c88652b3f25a51dfbf6b044f157d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c40c28b39c88652b3f25a51dfbf6b044f157d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c40c28b39c88652b3f25a51dfbf6b044f157d6"}], "stats": {"total": 1524, "additions": 769, "deletions": 755}, "files": [{"sha": "72e017261f241af05b8585da55cca82d9885fd4a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf3428d0b60d92b52699e4def461ad33f5ae0ce6", "patch": "@@ -1,3 +1,15 @@\n+2000-06-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (finish_mem_initializers): Declare.\n+\t(count_trees): Likewise.\n+\t* parse.y (base_init): Use finish_mem_initializers.\n+\t* semantics.c (finish_mem_initializers): New function.\n+\n+\t* tree.c (count_trees_r): Prototype.  Use DATA parameter to store\n+\tthe number of trees.\n+\t(n_trees): Remove.\n+\t(count_trees): Don't use it.\n+\t\n 2000-06-15  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (count_trees): New debugging function."}, {"sha": "b73e8737500519614cd01ebc73af81fcb1f30b9d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bf3428d0b60d92b52699e4def461ad33f5ae0ce6", "patch": "@@ -4479,6 +4479,7 @@ extern void prep_stmt                           PARAMS ((tree));\n extern tree add_scope_stmt                      PARAMS ((int, int));\n extern void do_pushlevel                        PARAMS ((void));\n extern tree do_poplevel                         PARAMS ((void));\n+extern void finish_mem_initializers             PARAMS ((tree));\n \n /* in spew.c */\n extern void init_spew\t\t\t\tPARAMS ((void));\n@@ -4556,6 +4557,7 @@ extern void remap_save_expr                     PARAMS ((tree *, splay_tree, tre\n   cp_build_qualified_type_real ((TYPE), (QUALS), /*complain=*/1)\n extern tree build_shared_int_cst                PARAMS ((int));\n extern special_function_kind special_function_p PARAMS ((tree));\n+extern int count_trees                          PARAMS ((tree));\n \n /* in typeck.c */\n extern int string_conv_p\t\t\tPARAMS ((tree, tree, int));"}, {"sha": "b9f5fb18f49797175228a4c394f82e19b4ecd381", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 689, "deletions": 719, "changes": 1408, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=bf3428d0b60d92b52699e4def461ad33f5ae0ce6"}, {"sha": "183def85a31edfaf7185eb0d40481907cd0e611f", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=bf3428d0b60d92b52699e4def461ad33f5ae0ce6", "patch": "@@ -854,40 +854,10 @@ return_init:\n base_init:\n \t  ':' .set_base_init member_init_list\n \t\t{\n-\t\t  tree member_init_list = NULL_TREE;\n-\t\t  tree base_init_list = NULL_TREE;\n-\t\t  tree init;\n-\t\t  tree next;\n-\t\t  int seen_member_init_p;\n-\n \t\t  if ($3.new_type_flag == 0)\n \t\t    error (\"no base or member initializers given following ':'\");\n-\t\t  \n-\t\t  seen_member_init_p = 0;\n-\t\t  for (init = $3.t; init; init = next)\n-\t\t    {\n-\t\t      next = TREE_CHAIN (init);\n-\t\t      if (TREE_CODE (TREE_PURPOSE (init)) == FIELD_DECL)\n-\t\t\t{\n-\t\t\t  TREE_CHAIN (init) = member_init_list;\n-\t\t\t  member_init_list = init;\n-\t\t\t  seen_member_init_p = 1;\n-\t\t\t}\n-\t\t      else\n-\t\t\t{\n-\t\t\t  if (warn_reorder && seen_member_init_p)\n-\t\t\t    {\n-\t\t\t      cp_warning (\"base initializer for `%T'\",\n-\t\t\t\t\t  TREE_PURPOSE (init));\n-\t\t\t      warning (\"   will be re-ordered to precede member initializations\");\n-\t\t\t    }\n-\t\t\t    \n-\t\t\t  TREE_CHAIN (init) = base_init_list;\n-\t\t\t  base_init_list = init;\n-\t\t\t}\n-\t\t    }\n \n-\t\t  setup_vtbl_ptr (member_init_list, base_init_list);\n+\t\t  finish_mem_initializers ($3.t);\n \t\t}\n \t;\n "}, {"sha": "45a8fe37f7d6cfede8caff1f28d75a2fb21c1f67", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=bf3428d0b60d92b52699e4def461ad33f5ae0ce6", "patch": "@@ -1230,6 +1230,65 @@ finish_named_return_value (return_id, init)\n   DECL_UNINLINABLE (current_function_decl) = 1;\n }\n \n+/* The INIT_LIST is a list of mem-initializers, in the order they were\n+   written by the user.  The TREE_VALUE of each node is a list of\n+   initializers for a particular subobject.  The TREE_PURPOSE is a\n+   FIELD_DECL is the initializer is for a non-static data member, and\n+   a class type if the initializer is for a base class.  */\n+\n+void\n+finish_mem_initializers (init_list)\n+     tree init_list;\n+{\n+  tree member_init_list;\n+  tree base_init_list;\n+  tree last_base_warned_about;\n+  tree next; \n+  tree init;\n+\n+  member_init_list = NULL_TREE;\n+  base_init_list = NULL_TREE;\n+  last_base_warned_about = NULL_TREE;\n+\n+  for (init = init_list; init; init = next)\n+    {\n+      next = TREE_CHAIN (init);\n+      if (TREE_CODE (TREE_PURPOSE (init)) == FIELD_DECL)\n+\t{\n+\t  TREE_CHAIN (init) = member_init_list;\n+\t  member_init_list = init;\n+\n+\t  /* We're running through the initializers from right to left\n+\t     as we process them here.  So, if we see a data member\n+\t     initializer after we see a base initializer, that\n+\t     actually means that the base initializer preceeded the\n+\t     data member initializer.  */\n+\t  if (warn_reorder && last_base_warned_about != base_init_list)\n+\t    {\n+\t      tree base;\n+\n+\t      for (base = base_init_list; \n+\t\t   base != last_base_warned_about; \n+\t\t   base = TREE_CHAIN (base))\n+\t\t{\n+\t\t  cp_warning (\"base initializer for `%T'\",\n+\t\t\t      TREE_PURPOSE (base));\n+\t\t  warning (\"   will be re-ordered to precede member initializations\");\n+\t\t}\n+\n+\t      last_base_warned_about = base_init_list;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  TREE_CHAIN (init) = base_init_list;\n+\t  base_init_list = init;\n+\t}\n+    }\n+\n+  setup_vtbl_ptr (member_init_list, base_init_list);\n+}\n+\n /* Cache the value of this class's main virtual function table pointer\n    in a register variable.  This will save one indirection if a\n    more than one virtual function call is made this function.  */"}, {"sha": "cdf0c13efeaa381de537f8dfa90b45aa7df74724", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3428d0b60d92b52699e4def461ad33f5ae0ce6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=bf3428d0b60d92b52699e4def461ad33f5ae0ce6", "patch": "@@ -47,6 +47,7 @@ static tree mark_local_for_remap_r PARAMS ((tree *, int *, void *));\n static tree cp_unsave_r PARAMS ((tree *, int *, void *));\n static void cp_unsave PARAMS ((tree *));\n static tree build_target_expr PARAMS ((tree, tree));\n+static tree count_trees_r PARAMS ((tree *, int *, void *));\n \n /* If REF is an lvalue, returns the kind of lvalue that REF is.\n    Otherwise, returns clk_none.  If TREAT_CLASS_RVALUES_AS_LVALUES is\n@@ -1396,15 +1397,15 @@ walk_tree (tp, func, data)\n #undef WALK_SUBTREE\n }\n \n-int n_trees;\n+/* Called from count_trees via walk_tree.  */\n \n static tree\n count_trees_r (tp, walk_subtrees, data)\n      tree *tp ATTRIBUTE_UNUSED;\n      int *walk_subtrees ATTRIBUTE_UNUSED;\n-     void *data ATTRIBUTE_UNUSED;\n+     void *data;\n {\n-  ++n_trees;\n+  ++ *((int*) data);\n   return NULL_TREE;\n }\n \n@@ -1415,8 +1416,8 @@ int\n count_trees (t)\n      tree t;\n {\n-  n_trees = 0;\n-  walk_tree (&t, count_trees_r, NULL);\n+  int n_trees = 0;\n+  walk_tree (&t, count_trees_r, &n_trees);\n   return n_trees;\n }  \n "}]}