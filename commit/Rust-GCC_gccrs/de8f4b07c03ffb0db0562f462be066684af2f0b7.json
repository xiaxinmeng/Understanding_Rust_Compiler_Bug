{"sha": "de8f4b07c03ffb0db0562f462be066684af2f0b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU4ZjRiMDdjMDNmZmIwZGIwNTYyZjQ2MmJlMDY2Njg0YWYyZjBiNw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-06-27T11:40:42Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-06-27T11:40:42Z"}, "message": "target.h (struct gcc_target): Add register_move_cost field.\n\n\t* target.h (struct gcc_target): Add register_move_cost field.\n\t* target-def.h (TARGET_REGISTER_MOVE_COST): New.\n\t(TARGET_INITIALIZER): Use TARGET_REGISTER_MOVE_COST.\n\t* targhooks.c (default_register_move_cost): New function.\n\t* targhooks.h (default_register_move_cost): Declare function.\n\t* defaults.h (REGISTER_MOVE_COST): Delete.\n\t* ira-int.h (ira_register_move_cost): Update comment.\n\t* ira.c: (ira_register_move_cost): Update comment.\n\t* reload.h (register_move_cost): Declare.\n\t* reginfo.c (register_move_cost): New function.\n\t(move_cost): Update comment.\n\t(init_move_cost, memory_move_secondary_cost): Replace\n\tREGISTER_MOVE_COST with register_move_cost.\n\t* postreload.c (reload_cse_simplify_set): (Ditto.).\n\t* reload.c (find_valid_class, find_reloads): (Ditto.).\n\t* reload1.c (choose_reload_regs): (Ditto.).\n\t* doc/tm.texi (TARGET_REGISTER_MOVE_COST): New.\n\t(REGISTER_MOVE_COST, TARGET_MEMORY_MOVE_COST): Update documentation.\n\t* doc/md.texi (can_create_pseudo_p): Update documentation.\n\n\t* config/i386/i386.h (MEMORY_MOVE_COST): Remove macro.\n\t* config/i386/i386-protos.h (int ix86_memory_move_cost): Remove.\n\t* config/i386/i386.h (ix86_memory_move_cost): Make static.\n\t(TARGET_MEMORY_MOVE_COST): Define.\n\n\t* config/ia64/ia64.h (MEMORY_MOVE_COST): Remove macro.\n\t* config/ia64/ia64-protos.h (int ia64_memory_move_cost): Remove.\n\t* config/ia64/ia64.h (ia64_memory_move_cost): Make static.\n\t(TARGET_MEMORY_MOVE_COST): Define.\n\nFrom-SVN: r161470", "tree": {"sha": "851a7e8964d45a63937f1e17d192d74a42b4e143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/851a7e8964d45a63937f1e17d192d74a42b4e143"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de8f4b07c03ffb0db0562f462be066684af2f0b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8f4b07c03ffb0db0562f462be066684af2f0b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de8f4b07c03ffb0db0562f462be066684af2f0b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8f4b07c03ffb0db0562f462be066684af2f0b7/comments", "author": null, "committer": null, "parents": [{"sha": "533e50f6ac9ee21fe5bcb223e8d6693466836d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533e50f6ac9ee21fe5bcb223e8d6693466836d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/533e50f6ac9ee21fe5bcb223e8d6693466836d80"}], "stats": {"total": 164, "additions": 122, "deletions": 42}, "files": [{"sha": "4a1fe90f44d41f7f4b92825491249da2e02245f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -1,3 +1,35 @@\n+2010-06-27  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* target.h (struct gcc_target): Add register_move_cost field.\n+\t* target-def.h (TARGET_REGISTER_MOVE_COST): New.\n+\t(TARGET_INITIALIZER): Use TARGET_REGISTER_MOVE_COST.\n+\t* targhooks.c (default_register_move_cost): New function.\n+\t* targhooks.h (default_register_move_cost): Declare function.\n+\t* defaults.h (REGISTER_MOVE_COST): Delete.\n+\t* ira-int.h (ira_register_move_cost): Update comment.\n+\t* ira.c: (ira_register_move_cost): Update comment.\n+\t* reload.h (register_move_cost): Declare.\n+\t* reginfo.c (register_move_cost): New function.\n+\t(move_cost): Update comment.\n+\t(init_move_cost, memory_move_secondary_cost): Replace\n+\tREGISTER_MOVE_COST with register_move_cost.\n+\t* postreload.c (reload_cse_simplify_set): (Ditto.).\n+\t* reload.c (find_valid_class, find_reloads): (Ditto.).\n+\t* reload1.c (choose_reload_regs): (Ditto.).\n+\t* doc/tm.texi (TARGET_REGISTER_MOVE_COST): New.\n+\t(REGISTER_MOVE_COST, TARGET_MEMORY_MOVE_COST): Update documentation.\n+\t* doc/md.texi (can_create_pseudo_p): Update documentation.\n+\n+\t* config/i386/i386.h (MEMORY_MOVE_COST): Remove macro.\n+\t* config/i386/i386-protos.h (int ix86_memory_move_cost): Remove.\n+\t* config/i386/i386.h (ix86_memory_move_cost): Make static.\n+\t(TARGET_MEMORY_MOVE_COST): Define.\n+\n+\t* config/ia64/ia64.h (MEMORY_MOVE_COST): Remove macro.\n+\t* config/ia64/ia64-protos.h (int ia64_memory_move_cost): Remove.\n+\t* config/ia64/ia64.h (ia64_memory_move_cost): Make static.\n+\t(TARGET_MEMORY_MOVE_COST): Define.\n+\n 2010-06-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44683"}, {"sha": "308f9eef5e830ee8e559b094b35d00014b0d7ffe", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -149,8 +149,6 @@ extern void ix86_split_fp_branch (enum rtx_code code, rtx, rtx,\n \t\t\t\t  rtx, rtx, rtx, rtx);\n extern bool ix86_hard_regno_mode_ok (int, enum machine_mode);\n extern bool ix86_modes_tieable_p (enum machine_mode, enum machine_mode);\n-extern int ix86_register_move_cost (enum machine_mode, enum reg_class,\n-\t\t\t\t    enum reg_class);\n extern int ix86_secondary_memory_needed (enum reg_class, enum reg_class,\n \t\t\t\t\t enum machine_mode, int);\n extern bool ix86_cannot_change_mode_class (enum machine_mode,"}, {"sha": "bd1cc05cfbd39fbe31900414a5fd20bef03786b5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -25656,7 +25656,7 @@ ix86_memory_move_cost (enum machine_mode mode, enum reg_class regclass,\n    on some machines it is expensive to move between registers if they are not\n    general registers.  */\n \n-int\n+static int\n ix86_register_move_cost (enum machine_mode mode, enum reg_class class1,\n \t\t\t enum reg_class class2)\n {\n@@ -30828,6 +30828,8 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION ix86_handle_option\n \n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST ix86_register_move_cost\n #undef TARGET_MEMORY_MOVE_COST\n #define TARGET_MEMORY_MOVE_COST ix86_memory_move_cost\n #undef TARGET_RTX_COSTS"}, {"sha": "67f1f60f3a1873860484553af4a7ae2e3deb3fdf", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -1891,17 +1891,6 @@ do {\t\t\t\t\t\t\t\\\n    so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE QImode\n \f\n-/* A C expression for the cost of moving data from a register in class FROM to\n-   one in class TO.  The classes are expressed using the enumeration values\n-   such as `GENERAL_REGS'.  A value of 2 is the default; other values are\n-   interpreted relative to that.\n-\n-   It is not required that the cost always equal 2 when FROM is the same as TO;\n-   on some machines it is expensive to move between registers if they are not\n-   general registers.  */\n-\n-#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) \\\n-   ix86_register_move_cost ((MODE), (CLASS1), (CLASS2))\n \n /* A C expression for the cost of a branch instruction.  A value of 1\n    is the default; other values are interpreted relative to that.  */"}, {"sha": "a5914b1a5ac749dc4ac192c25f0ee689019fd792", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -82,8 +82,6 @@ extern void ia64_vms_elf_asm_named_section (const char *, unsigned int, tree);\n extern void ia64_start_function (FILE *, const char *, tree);\n #endif /* TREE_CODE */\n \n-extern int ia64_register_move_cost (enum machine_mode, enum reg_class,\n-\t\t\t\t    enum reg_class);\n extern int ia64_epilogue_uses (int);\n extern int ia64_eh_uses (int);\n extern void emit_safe_across_calls (void);"}, {"sha": "d40747a7f1cbeed15d6eebe46cd76148524688e8", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -210,6 +210,8 @@ static bool ia64_return_in_memory (const_tree, const_tree);\n static rtx ia64_function_value (const_tree, const_tree, bool);\n static rtx ia64_libcall_value (enum machine_mode, const_rtx);\n static bool ia64_function_value_regno_p (const unsigned int);\n+static int ia64_register_move_cost (enum machine_mode, enum reg_class,\n+                                    enum reg_class);\n static bool ia64_rtx_costs (rtx, int, int, int *, bool);\n static int ia64_unspec_may_trap_p (const_rtx, unsigned);\n static void fix_range (const char *);\n@@ -454,6 +456,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_ASM_GLOBALIZE_DECL_NAME\n #define TARGET_ASM_GLOBALIZE_DECL_NAME ia64_globalize_decl_name\n \n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST ia64_register_move_cost\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ia64_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -5202,7 +5206,7 @@ ia64_rtx_costs (rtx x, int code, int outer_code, int *total,\n /* Calculate the cost of moving data from a register in class FROM to\n    one in class TO, using MODE.  */\n \n-int\n+static int\n ia64_register_move_cost (enum machine_mode mode, enum reg_class from,\n \t\t\t enum reg_class to)\n {"}, {"sha": "bf24f73f04e63d64555dafbc0f20f332ebc25cc1", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -1310,11 +1310,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Describing Relative Costs of Operations */\n \n-/* A C expression for the cost of moving data from a register in class FROM to\n-   one in class TO, using MODE.  */\n-\n-#define REGISTER_MOVE_COST  ia64_register_move_cost\n-\n /* A C expression for the cost of moving data of mode M between a\n    register and memory.  */\n #define MEMORY_MOVE_COST(MODE,CLASS,IN) \\"}, {"sha": "eb74033657b362cc0822d4a4073476f7f3d7f02d", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -981,10 +981,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #endif /* old constraint mechanism in use */\n \n-#ifndef REGISTER_MOVE_COST\n-#define REGISTER_MOVE_COST(m, x, y) 2\n-#endif\n-\n /* Determine whether the entire c99 runtime\n    is present in the runtime library.  */\n #ifndef TARGET_C99_FUNCTIONS"}, {"sha": "211fdcb8635829fad8f7f0631a484a6dcaed10f1", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -3763,7 +3763,8 @@ it is unsafe to call @code{gen_reg_rtx} to allocate a new pseudo.\n The constraints on a @samp{mov@var{m}} must permit moving any hard\n register to any other hard register provided that\n @code{HARD_REGNO_MODE_OK} permits mode @var{m} in both registers and\n-@code{REGISTER_MOVE_COST} applied to their classes returns a value of 2.\n+@code{TARGET_REGISTER_MOVE_COST} applied to their classes returns a value\n+of 2.\n \n It is obligatory to support floating point @samp{mov@var{m}}\n instructions into and out of any registers that can hold fixed point"}, {"sha": "637dd50444dc5a2a80baed44277a54531bb7ae28", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -6116,8 +6116,32 @@ classes returns a value of 2, reload does not check to ensure that the\n constraints of the insn are met.  Setting a cost of other than 2 will\n allow reload to verify that the constraints are met.  You should do this\n if the @samp{mov@var{m}} pattern's constraints do not allow such copying.\n+\n+These macros are obsolete, new ports should use the target hook\n+@code{TARGET_REGISTER_MOVE_COST} instead.\n @end defmac\n \n+@deftypefn {Target Hook} int TARGET_REGISTER_MOVE_COST (enum machine_mode @var{mode}, enum reg_class @var{from}, enum reg_class @var{to})\n+This target hook should return the cost of moving data of mode @var{mode}\n+from a register in class @var{from} to one in class @var{to}.  The classes\n+are expressed using the enumeration values such as @code{GENERAL_REGS}.\n+A value of 2 is the default; other values are interpreted relative to\n+that.\n+\n+It is not required that the cost always equal 2 when @var{from} is the\n+same as @var{to}; on some machines it is expensive to move between\n+registers if they are not general registers.\n+\n+If reload sees an insn consisting of a single @code{set} between two\n+hard registers, and if @code{TARGET_REGISTER_MOVE_COST} applied to their\n+classes returns a value of 2, reload does not check to ensure that the\n+constraints of the insn are met.  Setting a cost of other than 2 will\n+allow reload to verify that the constraints are met.  You should do this\n+if the @samp{mov@var{m}} pattern's constraints do not allow such copying.\n+\n+The default version of this function returns 2.\n+@end deftypefn\n+\n @defmac MEMORY_MOVE_COST (@var{mode}, @var{class}, @var{in})\n A C expression for the cost of moving data of mode @var{mode} between a\n register of class @var{class} and memory; @var{in} is zero if the value\n@@ -6149,9 +6173,9 @@ These macros are obsolete, new ports should use the target hook\n This target hook should return the cost of moving data of mode @var{mode}\n between a register of class @var{class} and memory; @var{in} is @code{false}\n if the value is to be written to memory, @code{true} if it is to be read in.\n-This cost is relative to those in @code{REGISTER_MOVE_COST}.  If moving\n-between registers and memory is more expensive than between two registers,\n-you should add this target hook to express the relative cost.\n+This cost is relative to those in @code{TARGET_REGISTER_MOVE_COST}.\n+If moving between registers and memory is more expensive than between two\n+registers, you should add this target hook to express the relative cost.\n \n If you do not add this target hook, GCC uses a default cost of 4 plus\n the cost of copying via a secondary reload register, if one is"}, {"sha": "1da087cecdb5db2c305c61ea6855de6a5b40f6ac", "filename": "gcc/ira-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -724,7 +724,7 @@ minmax_set_iter_next (minmax_set_iterator *i)\n extern HARD_REG_SET ira_reg_mode_hard_regset\n                     [FIRST_PSEUDO_REGISTER][NUM_MACHINE_MODES];\n \n-/* Array analogous to macro REGISTER_MOVE_COST.  Don't use\n+/* Array based on TARGET_REGISTER_MOVE_COST.  Don't use\n    ira_register_move_cost directly.  Use function of\n    ira_get_may_move_cost instead.  */\n extern move_table *ira_register_move_cost[MAX_MACHINE_MODE];"}, {"sha": "7f4c8d8c72d901da4a642d6fa579987010daeafe", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -358,7 +358,7 @@ HARD_REG_SET ira_reg_mode_hard_regset[FIRST_PSEUDO_REGISTER][NUM_MACHINE_MODES];\n /* Array analogous to target hook TARGET_MEMORY_MOVE_COST.  */\n short int ira_memory_move_cost[MAX_MACHINE_MODE][N_REG_CLASSES][2];\n \n-/* Array analogous to macro REGISTER_MOVE_COST.  */\n+/* Array based on TARGET_REGISTER_MOVE_COST.  */\n move_table *ira_register_move_cost[MAX_MACHINE_MODE];\n \n /* Similar to may_move_in_cost but it is calculated in IRA instead of"}, {"sha": "3882719ccd3d4d95c002a4e5aa177f70849a2a0c", "filename": "gcc/postreload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -264,7 +264,7 @@ reload_cse_simplify_set (rtx set, rtx insn)\n   if (MEM_P (src))\n     old_cost = memory_move_cost (GET_MODE (src), dclass, true);\n   else if (REG_P (src))\n-    old_cost = REGISTER_MOVE_COST (GET_MODE (src),\n+    old_cost = register_move_cost (GET_MODE (src),\n \t\t\t\t   REGNO_REG_CLASS (REGNO (src)), dclass);\n   else\n     old_cost = rtx_cost (src, SET, speed);\n@@ -314,7 +314,7 @@ reload_cse_simplify_set (rtx set, rtx insn)\n \t    }\n \t  else\n #endif\n-\t    this_cost = REGISTER_MOVE_COST (GET_MODE (this_rtx),\n+\t    this_cost = register_move_cost (GET_MODE (this_rtx),\n \t\t\t\t\t    REGNO_REG_CLASS (REGNO (this_rtx)),\n \t\t\t\t\t    dclass);\n \t}"}, {"sha": "b868c37fda8aae251e57c749af1de5b80442dae9", "filename": "gcc/reginfo.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -183,7 +183,7 @@ bool have_regs_of_mode [MAX_MACHINE_MODE];\n char contains_reg_of_mode [N_REG_CLASSES] [MAX_MACHINE_MODE];\n \n /* Maximum cost of moving from a register in one class to a register in\n-   another class.  Based on REGISTER_MOVE_COST.  */\n+   another class.  Based on TARGET_REGISTER_MOVE_COST.  */\n move_table *move_cost[MAX_MACHINE_MODE];\n \n /* Similar, but here we don't have to move if the first index is a subset\n@@ -274,7 +274,7 @@ init_move_cost (enum machine_mode m)\n \t    cost = 65535;\n \t  else\n \t    {\n-\t      cost = REGISTER_MOVE_COST (m, (enum reg_class) i,\n+\t      cost = register_move_cost (m, (enum reg_class) i,\n \t\t\t\t\t (enum reg_class) j);\n \t      gcc_assert (cost < 65535);\n \t    }\n@@ -681,6 +681,17 @@ init_fake_stack_mems (void)\n     top_of_stack[i] = gen_rtx_MEM ((enum machine_mode) i, stack_pointer_rtx);\n }\n \n+\n+/* Compute cost of moving data from a register of class FROM to one of\n+   TO, using MODE.  */\n+\n+int\n+register_move_cost (enum machine_mode mode, enum reg_class from,\n+                    enum reg_class to)\n+{\n+  return targetm.register_move_cost (mode, from, to);\n+}\n+\n /* Compute cost of moving registers to/from memory.  */\n int\n memory_move_cost (enum machine_mode mode, enum reg_class rclass, bool in)\n@@ -706,9 +717,9 @@ memory_move_secondary_cost (enum machine_mode mode, enum reg_class rclass,\n     return 0;\n \n   if (in)\n-    partial_cost = REGISTER_MOVE_COST (mode, altclass, rclass);\n+    partial_cost = register_move_cost (mode, altclass, rclass);\n   else\n-    partial_cost = REGISTER_MOVE_COST (mode, rclass, altclass);\n+    partial_cost = register_move_cost (mode, rclass, altclass);\n \n   if (rclass == altclass)\n     /* This isn't simply a copy-to-temporary situation.  Can't guess"}, {"sha": "30bee6db83dd7812fbd9b88a372b774410f6d942", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -688,15 +688,15 @@ find_valid_class (enum machine_mode outer ATTRIBUTE_UNUSED,\n \n       if (bad || !good)\n \tcontinue;\n-      cost = REGISTER_MOVE_COST (outer, (enum reg_class) rclass, dest_class);\n+      cost = register_move_cost (outer, (enum reg_class) rclass, dest_class);\n \n       if ((reg_class_size[rclass] > best_size\n \t   && (best_cost < 0 || best_cost >= cost))\n \t  || best_cost > cost)\n \t{\n \t  best_class = (enum reg_class) rclass;\n \t  best_size = reg_class_size[rclass];\n-\t  best_cost = REGISTER_MOVE_COST (outer, (enum reg_class) rclass,\n+\t  best_cost = register_move_cost (outer, (enum reg_class) rclass,\n \t\t\t\t\t  dest_class);\n \t}\n     }\n@@ -2651,7 +2651,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n       && REGNO (SET_DEST (body)) < FIRST_PSEUDO_REGISTER\n       && REG_P (SET_SRC (body))\n       && REGNO (SET_SRC (body)) < FIRST_PSEUDO_REGISTER\n-      && REGISTER_MOVE_COST (GET_MODE (SET_SRC (body)),\n+      && register_move_cost (GET_MODE (SET_SRC (body)),\n \t\t\t     REGNO_REG_CLASS (REGNO (SET_SRC (body))),\n \t\t\t     REGNO_REG_CLASS (REGNO (SET_DEST (body)))) == 2)\n     return 0;"}, {"sha": "a3c1f07bd9f404095cde89e33e267810892163f6", "filename": "gcc/reload.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -30,6 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n   SECONDARY_RELOAD_CLASS (CLASS, MODE, X)\n #endif\n \n+extern int register_move_cost (enum machine_mode, enum reg_class,\n+\t\t\t       enum reg_class);\n extern int memory_move_cost (enum machine_mode, enum reg_class, bool);\n extern int memory_move_secondary_cost (enum machine_mode, enum reg_class,\n \t\t\t\t       bool);"}, {"sha": "a0b61f5b92620eb87e5b2fc75ddc8a9fef74125a", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -6496,7 +6496,7 @@ choose_reload_regs (struct insn_chain *chain)\n \t\t\t     register, we might use it for reload_override_in,\n \t\t\t     if copying it to the desired class is cheap\n \t\t\t     enough.  */\n-\t\t\t  || ((REGISTER_MOVE_COST (mode, last_class, rclass)\n+\t\t\t  || ((register_move_cost (mode, last_class, rclass)\n \t\t\t       < memory_move_cost (mode, rclass, true))\n \t\t\t      && (secondary_reload_class (1, rclass, mode,\n \t\t\t\t\t\t\t  last_reg)"}, {"sha": "27b7fa8e041dc1a9bcc6456edc30b6ae5deb2b0d", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -474,6 +474,10 @@\n #define TARGET_ADDRESS_COST default_address_cost\n #define TARGET_CONST_ANCHOR 0\n \n+#ifndef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST default_register_move_cost\n+#endif\n+\n #ifndef TARGET_MEMORY_MOVE_COST\n #define TARGET_MEMORY_MOVE_COST default_memory_move_cost\n #endif\n@@ -1027,6 +1031,7 @@\n   TARGET_ADDR_SPACE_HOOKS,\t\t\t\\\n   TARGET_SCALAR_MODE_SUPPORTED_P,\t\t\\\n   TARGET_VECTOR_MODE_SUPPORTED_P,               \\\n+  TARGET_REGISTER_MOVE_COST,\t\t\t\\\n   TARGET_MEMORY_MOVE_COST, \t\t\t\\\n   TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P,\t\\\n   TARGET_RTX_COSTS,\t\t\t\t\\"}, {"sha": "5a857d7edf7cf2fcd0949bf4a4f1edd48ba5f89f", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -812,6 +812,11 @@ struct gcc_target\n      for further details.  */\n   bool (* vector_mode_supported_p) (enum machine_mode mode);\n \n+  /* Compute cost of moving data from a register of class FROM to one of\n+     TO, using MODE.  */\n+  int (* register_move_cost) (enum machine_mode, enum reg_class,\n+\t\t\t      enum reg_class);\n+\n   /* Compute cost of moving registers to/from memory.  */\n   int (* memory_move_cost) (enum machine_mode, enum reg_class, bool);\n "}, {"sha": "62e357729bb203d37b5c428bed2f0d1c2668f187", "filename": "gcc/targhooks.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -1127,4 +1127,19 @@ default_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n #endif\n }\n \n+/* Compute cost of moving data from a register of class FROM to one of\n+   TO, using MODE.  */\n+\n+int\n+default_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n+                            enum reg_class from ATTRIBUTE_UNUSED,\n+                            enum reg_class to ATTRIBUTE_UNUSED)\n+{\n+#ifndef REGISTER_MOVE_COST\n+  return 2;\n+#else\n+  return REGISTER_MOVE_COST (mode, from, to);\n+#endif\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "fdd0e4a3c75ddf0d34efb64502826e9d5f317135", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8f4b07c03ffb0db0562f462be066684af2f0b7/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=de8f4b07c03ffb0db0562f462be066684af2f0b7", "patch": "@@ -140,3 +140,6 @@ extern rtx default_addr_space_convert (rtx, tree, tree);\n extern unsigned int default_case_values_threshold (void);\n extern bool default_have_conditional_execution (void);\n extern int default_memory_move_cost (enum machine_mode, enum reg_class, bool);\n+extern int default_register_move_cost (enum machine_mode, enum reg_class,\n+\t\t\t\t       enum reg_class);\n+"}]}