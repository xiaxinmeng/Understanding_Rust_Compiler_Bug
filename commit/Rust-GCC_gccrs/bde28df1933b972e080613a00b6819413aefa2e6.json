{"sha": "bde28df1933b972e080613a00b6819413aefa2e6", "node_id": "C_kwDOANBUbNoAKGJkZTI4ZGYxOTMzYjk3MmUwODA2MTNhMDBiNjgxOTQxM2FlZmEyZTY", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2022-07-04T12:19:29Z"}, "committer": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2022-08-29T09:15:09Z"}, "message": "s390: Implement vec_extract via vec_select.\n\nvec_select can handle dynamic/runtime masks nowadays.  Therefore we can\nget rid of the UNSPEC_VEC_EXTRACT that was preventing further\noptimizations like combining instructions with vec_extract patterns.\n\ngcc/ChangeLog:\n\n\t* config/s390/s390.md: Remove UNSPEC_VEC_EXTRACT.\n\t* config/s390/vector.md: Rewrite patterns to use vec_select.\n\t* config/s390/vx-builtins.md (vec_scatter_element<V_HW_2:mode>_SI):\n\tLikewise.", "tree": {"sha": "32ad01ac177dc82ca6b677ff71da1f94d9b50b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32ad01ac177dc82ca6b677ff71da1f94d9b50b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bde28df1933b972e080613a00b6819413aefa2e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde28df1933b972e080613a00b6819413aefa2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde28df1933b972e080613a00b6819413aefa2e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde28df1933b972e080613a00b6819413aefa2e6/comments", "author": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cdebe087619329facf19ba849d4d489a9a933e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cdebe087619329facf19ba849d4d489a9a933e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cdebe087619329facf19ba849d4d489a9a933e2"}], "stats": {"total": 114, "additions": 61, "deletions": 53}, "files": [{"sha": "962927c31126b3dfade6a9314bb54e24f1df5ead", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde28df1933b972e080613a00b6819413aefa2e6/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde28df1933b972e080613a00b6819413aefa2e6/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=bde28df1933b972e080613a00b6819413aefa2e6", "patch": "@@ -153,7 +153,6 @@\n    UNSPEC_VEC_VMALO\n \n    UNSPEC_VEC_GATHER\n-   UNSPEC_VEC_EXTRACT\n    UNSPEC_VEC_INSERT_AND_ZERO\n    UNSPEC_VEC_LOAD_BNDRY\n    UNSPEC_VEC_LOAD_LEN\n@@ -1744,8 +1743,8 @@\n    && GENERAL_REG_P (operands[0])\n    && VECTOR_REG_P (operands[1])\"\n   [(set (match_dup 2) (match_dup 4))\n-   (set (match_dup 3) (unspec:DI [(match_dup 5) (const_int 1)]\n-\t\t\t\t UNSPEC_VEC_EXTRACT))]\n+   (set (match_dup 3) (vec_select:DI (match_dup 5)\n+\t\t       (parallel [(const_int 1)])))]\n {\n   operands[2] = operand_subword (operands[0], 0, 0, TImode);\n   operands[3] = operand_subword (operands[0], 1, 0, TImode);"}, {"sha": "dde74afc869e4a4e0f54a7c3bb1247d6a4ccd957", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde28df1933b972e080613a00b6819413aefa2e6/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde28df1933b972e080613a00b6819413aefa2e6/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=bde28df1933b972e080613a00b6819413aefa2e6", "patch": "@@ -270,11 +270,13 @@\n \t(match_operand:V_128 1 \"register_operand\" \"\"))]\n   \"TARGET_VX && GENERAL_REG_P (operands[0]) && VECTOR_REG_P (operands[1])\"\n   [(set (match_dup 2)\n-\t(unspec:DI [(subreg:V2DI (match_dup 1) 0)\n-\t\t    (const_int 0)] UNSPEC_VEC_EXTRACT))\n+       (vec_select:DI\n+         (subreg:V2DI (match_dup 1) 0)\n+           (parallel [(const_int 0)])))\n    (set (match_dup 3)\n-\t(unspec:DI [(subreg:V2DI (match_dup 1) 0)\n-\t\t    (const_int 1)] UNSPEC_VEC_EXTRACT))]\n+       (vec_select:DI\n+         (subreg:V2DI (match_dup 1) 0)\n+           (parallel [(const_int 1)])))]\n {\n   operands[2] = operand_subword (operands[0], 0, 0, <MODE>mode);\n   operands[3] = operand_subword (operands[0], 1, 0, <MODE>mode);\n@@ -511,22 +513,24 @@\n   [(set_attr \"op_type\" \"VRS\")])\n \n \n-; FIXME: Support also vector mode operands for 0\n-; FIXME: This should be (vec_select ..) or something but it does only allow constant selectors :(\n-; This is used via RTL standard name as well as for expanding the builtin\n+;; FIXME: Support also vector mode operands for 0\n+;; This is used via RTL standard name as well as for expanding the builtin\n (define_expand \"vec_extract<mode><non_vec_l>\"\n-  [(set (match_operand:<non_vec> 0 \"nonimmediate_operand\" \"\")\n-\t(unspec:<non_vec> [(match_operand:V  1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"\")]\n-\t\t\t  UNSPEC_VEC_EXTRACT))]\n-  \"TARGET_VX\")\n+  [(set (match_operand:<non_vec>    0 \"nonimmediate_operand\" \"\")\n+       (vec_select:<non_vec>\n+         (match_operand:V           1 \"register_operand\" \"\")\n+         (parallel\n+          [(match_operand:SI        2 \"nonmemory_operand\" \"\")])))]\n+  \"TARGET_VX\"\n+)\n \n ; vlgvb, vlgvh, vlgvf, vlgvg, vsteb, vsteh, vstef, vsteg\n (define_insn \"*vec_extract<mode>\"\n-  [(set (match_operand:<non_vec> 0 \"nonimmediate_operand\"          \"=d,R\")\n-\t(unspec:<non_vec> [(match_operand:V  1 \"register_operand\"   \"v,v\")\n-\t\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"an,I\")]\n-\t\t\t  UNSPEC_VEC_EXTRACT))]\n+  [(set (match_operand:<non_vec> 0 \"nonimmediate_operand\" \"=d,R\")\n+       (vec_select:<non_vec>\n+         (match_operand:V        1 \"nonmemory_operand\"  \"v,v\")\n+         (parallel\n+          [(match_operand:SI     2 \"nonmemory_operand\" \"an,I\")])))]\n   \"TARGET_VX\n    && (!CONST_INT_P (operands[2])\n        || UINTVAL (operands[2]) < GET_MODE_NUNITS (<V:MODE>mode))\"\n@@ -537,11 +541,11 @@\n \n ; vlgvb, vlgvh, vlgvf, vlgvg\n (define_insn \"*vec_extract<mode>_plus\"\n-  [(set (match_operand:<non_vec>                      0 \"nonimmediate_operand\" \"=d\")\n-\t(unspec:<non_vec> [(match_operand:V           1 \"register_operand\"      \"v\")\n-\t\t\t   (plus:SI (match_operand:SI 2 \"nonmemory_operand\"     \"a\")\n-\t\t\t\t    (match_operand:SI 3 \"const_int_operand\"     \"n\"))]\n-\t\t\t   UNSPEC_VEC_EXTRACT))]\n+  [(set (match_operand:<non_vec>       0 \"nonimmediate_operand\" \"=d\")\n+\t(vec_select:<non_vec>\n+\t (match_operand:V              1 \"register_operand\"      \"v\")\n+\t (plus:SI (match_operand:SI    2 \"nonmemory_operand\"     \"a\")\n+\t  (parallel [(match_operand:SI 3 \"const_int_operand\"     \"n\")]))))]\n   \"TARGET_VX\"\n   \"vlgv<bhfgq>\\t%0,%v1,%Y3(%2)\"\n   [(set_attr \"op_type\" \"VRS\")])"}, {"sha": "d20771dbe8a8e3ec5b01013ab6738c56ef747c5c", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde28df1933b972e080613a00b6819413aefa2e6/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde28df1933b972e080613a00b6819413aefa2e6/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=bde28df1933b972e080613a00b6819413aefa2e6", "patch": "@@ -440,12 +440,13 @@\n (define_insn \"vec_scatter_element<V_HW_4:mode>_DI\"\n   [(set (mem:<non_vec>\n \t (plus:DI (zero_extend:DI\n-\t\t   (unspec:SI [(match_operand:V4SI 1 \"register_operand\"   \"v\")\n-\t\t\t       (match_operand:QI   3 \"const_mask_operand\" \"C\")]\n-\t\t\t      UNSPEC_VEC_EXTRACT))\n-\t\t  (match_operand:SI                2 \"address_operand\"   \"ZQ\")))\n-\t(unspec:<non_vec> [(match_operand:V_HW_4          0 \"register_operand\"   \"v\")\n-\t\t\t   (match_dup 3)] UNSPEC_VEC_EXTRACT))]\n+\t\t   (vec_select:SI\n+\t\t    (match_operand:V4SI           1 \"register_operand\"   \"v\")\n+\t\t    (parallel [(match_operand:QI  3 \"const_mask_operand\" \"C\")])))\n+\t  (match_operand:SI                       2 \"address_operand\"    \"ZQ\")))\n+\t(vec_select:<non_vec>\n+\t (match_operand:V_HW_4                    0 \"register_operand\"   \"v\")\n+\t (parallel [(match_dup 3)])))]\n   \"TARGET_VX && TARGET_64BIT && UINTVAL (operands[3]) < 4\"\n   \"vscef\\t%v0,%O2(%v1,%R2),%3\"\n   [(set_attr \"op_type\" \"VRV\")])\n@@ -455,12 +456,13 @@\n (define_insn \"vec_scatter_element<V_HW_2:mode>_SI\"\n   [(set (mem:<non_vec>\n \t (plus:SI (subreg:SI\n-\t\t   (unspec:<non_vec_int> [(match_operand:V_HW_2 1 \"register_operand\"   \"v\")\n-\t\t\t\t\t  (match_operand:QI     3 \"const_mask_operand\" \"C\")]\n-\t\t\t\t\t UNSPEC_VEC_EXTRACT) 4)\n-\t\t  (match_operand:SI                             2 \"address_operand\"   \"ZQ\")))\n-\t(unspec:<non_vec> [(match_operand:V_HW_2                0 \"register_operand\"   \"v\")\n-\t\t\t   (match_dup 3)] UNSPEC_VEC_EXTRACT))]\n+\t\t   (vec_select:<non_vec_int>\n+\t\t    (match_operand:<TOINTVEC>     1 \"register_operand\"   \"v\")\n+\t\t    (parallel [(match_operand:QI  3 \"const_mask_operand\" \"C\")])) 4)\n+\t  (match_operand:SI                       2 \"address_operand\"    \"ZQ\")))\n+    (vec_select:<non_vec>\n+     (match_operand:V_HW_2                        0 \"register_operand\"   \"v\")\n+     (parallel [(match_dup 3)])))]\n   \"TARGET_VX && !TARGET_64BIT && UINTVAL (operands[3]) < GET_MODE_NUNITS (<V_HW_2:MODE>mode)\"\n   \"vsce<V_HW_2:bhfgq>\\t%v0,%O2(%v1,%R2),%3\"\n   [(set_attr \"op_type\" \"VRV\")])\n@@ -469,13 +471,14 @@\n ; vscef, vsceg\n (define_insn \"vec_scatter_element<mode>_<non_vec_int>\"\n   [(set (mem:<non_vec>\n-\t (plus:<non_vec_int> (unspec:<non_vec_int>\n-\t\t\t      [(match_operand:<TOINTVEC> 1 \"register_operand\"   \"v\")\n-\t\t\t       (match_operand:QI         3 \"const_mask_operand\" \"C\")]\n-\t\t\t      UNSPEC_VEC_EXTRACT)\n-\t\t\t     (match_operand:DI           2 \"address_operand\"   \"ZQ\")))\n-\t(unspec:<non_vec> [(match_operand:V_HW_32_64     0 \"register_operand\"   \"v\")\n-\t\t\t   (match_dup 3)] UNSPEC_VEC_EXTRACT))]\n+\t (plus:<non_vec_int>\n+\t  (vec_select:<non_vec_int>\n+\t   (match_operand:<TOINTVEC>      1 \"register_operand\"   \"v\")\n+\t    (parallel [(match_operand:QI  3 \"const_mask_operand\" \"C\")]))\n+\t  (match_operand:DI               2 \"address_operand\"   \"ZQ\")))\n+\t(vec_select:<non_vec>\n+\t (match_operand:V_HW_32_64        0 \"register_operand\"   \"v\")\n+\t (parallel [(match_dup 3)])))]\n   \"TARGET_VX && UINTVAL (operands[3]) < GET_MODE_NUNITS (<V_HW_32_64:MODE>mode)\"\n   \"vsce<bhfgq>\\t%v0,%O2(%v1,%R2),%3\"\n   [(set_attr \"op_type\" \"VRV\")])\n@@ -1889,9 +1892,11 @@\n \t\t      (const_int VEC_RND_CURRENT)]\n \t\t     UNSPEC_VEC_VFLR))\n    (set (match_operand:SF 1 \"memory_operand\" \"\")\n-\t(unspec:SF [(match_dup 2) (const_int 0)] UNSPEC_VEC_EXTRACT))\n+\t(vec_select:SF (match_dup 2)\n+\t (parallel [(const_int 0)])))\n    (set (match_dup 3)\n-\t(unspec:SF [(match_dup 2) (const_int 2)] UNSPEC_VEC_EXTRACT))]\n+\t(vec_select:SF (match_dup 2)\n+\t (parallel [(const_int 2)])))]\n   \"TARGET_VX\"\n {\n   operands[2] = gen_reg_rtx (V4SFmode);\n@@ -2300,10 +2305,10 @@\n ; *a = vec_revb (b)[1];                            get-element-bswap-4.c\n ; vstebrh, vstebrf, vstebrg\n (define_insn \"*vec_extract_bswap_vec<mode>\"\n-  [(set (match_operand:<non_vec>                                    0 \"memory_operand\"   \"=R\")\n-\t(unspec:<non_vec> [(bswap:V_HW_HSD (match_operand:V_HW_HSD  1 \"register_operand\"  \"v\"))\n-\t\t\t   (match_operand:SI                        2 \"const_int_operand\" \"C\")]\n-\t\t\t   UNSPEC_VEC_EXTRACT))]\n+  [(set (match_operand:<non_vec>                  0 \"memory_operand\"   \"=R\")\n+\t(vec_select:<non_vec>\n+\t (bswap:V_HW_HSD (match_operand:V_HW_HSD  1 \"register_operand\"  \"v\"))\n+\t (parallel [(match_operand:SI             2 \"const_int_operand\" \"C\")])))]\n   \"TARGET_VXE2 && UINTVAL (operands[2]) < GET_MODE_NUNITS (<V_HW_HSD:MODE>mode)\"\n   \"vstebr<bhfgq>\\t%v1,%0,%2\"\n   [(set_attr \"op_type\" \"VRX\")])\n@@ -2312,11 +2317,11 @@\n ; *a = __builtin_bswap32 (b[1]);                   get-element-bswap-2.c\n ; vstebrh, vstebrf, vstebrg\n (define_insn \"*vec_extract_bswap_elem<mode>\"\n-  [(set (match_operand:<non_vec>                     0 \"memory_operand\"   \"=R\")\n+  [(set (match_operand:<non_vec>                  0 \"memory_operand\"   \"=R\")\n \t(bswap:<non_vec>\n-\t (unspec:<non_vec> [(match_operand:V_HW_HSD  1 \"register_operand\"  \"v\")\n-\t\t\t    (match_operand:SI        2 \"const_int_operand\" \"C\")]\n-\t\t\t   UNSPEC_VEC_EXTRACT)))]\n+\t (vec_select:<non_vec>\n+\t  (match_operand:V_HW_HSD                 1 \"register_operand\"  \"v\")\n+\t  (parallel [(match_operand:SI            2 \"const_int_operand\" \"C\")]))))]\n   \"TARGET_VXE2 && UINTVAL (operands[2]) < GET_MODE_NUNITS (<V_HW_HSD:MODE>mode)\"\n   \"vstebr<bhfgq>\\t%v1,%0,%2\"\n   [(set_attr \"op_type\" \"VRX\")])"}]}