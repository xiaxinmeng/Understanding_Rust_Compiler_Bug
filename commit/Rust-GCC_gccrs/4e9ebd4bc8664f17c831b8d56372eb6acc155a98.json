{"sha": "4e9ebd4bc8664f17c831b8d56372eb6acc155a98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5ZWJkNGJjODY2NGYxN2M4MzFiOGQ1NjM3MmViNmFjYzE1NWE5OA==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2003-08-07T20:53:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-08-07T20:53:57Z"}, "message": "re PR libstdc++/11784 (atomic __exchange_and_add() broken for ColdFire and 68000 targets.)\n\n\n2003-08-07  Bernardo Innocenti  <bernie@develer.com>\n\n\tPR libstdc++/11784\n\t* libstdc++-v3/config/cpu/m68k/atomicity.h (__exchange_and_add):\n\tReplace variants with new BSET-based version.\n\nFrom-SVN: r70230", "tree": {"sha": "401da9ef2cb5a83ea2cf38b84ee54fa77dde6928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/401da9ef2cb5a83ea2cf38b84ee54fa77dde6928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e9ebd4bc8664f17c831b8d56372eb6acc155a98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9ebd4bc8664f17c831b8d56372eb6acc155a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9ebd4bc8664f17c831b8d56372eb6acc155a98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9ebd4bc8664f17c831b8d56372eb6acc155a98/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9ebaa2b6d3d3c0b6a35c575a390a0dadb229461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ebaa2b6d3d3c0b6a35c575a390a0dadb229461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ebaa2b6d3d3c0b6a35c575a390a0dadb229461"}], "stats": {"total": 77, "additions": 31, "deletions": 46}, "files": [{"sha": "bae9e3dc3afe1dc57a8ee213f2c955d70c6cc21a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ebd4bc8664f17c831b8d56372eb6acc155a98/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ebd4bc8664f17c831b8d56372eb6acc155a98/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4e9ebd4bc8664f17c831b8d56372eb6acc155a98", "patch": "@@ -1,3 +1,9 @@\n+2003-08-07  Bernardo Innocenti  <bernie@develer.com>\n+\n+\tPR libstdc++/11784\n+\t* libstdc++-v3/config/cpu/m68k/atomicity.h (__exchange_and_add):\n+\tReplace variants with new BSET-based version.\n+\t\n 2003-08-07  Carlo Wood  <carlo@alinoe.com>\n \n         * include/bits/demangle.h: Do not use cctype functions that depend"}, {"sha": "9605c19e14297ee4942c2b7fc8b14fe8e31cbc7d", "filename": "libstdc++-v3/config/cpu/m68k/atomicity.h", "status": "modified", "additions": 25, "deletions": 46, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ebd4bc8664f17c831b8d56372eb6acc155a98/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ebd4bc8664f17c831b8d56372eb6acc155a98/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h?ref=4e9ebd4bc8664f17c831b8d56372eb6acc155a98", "patch": "@@ -32,8 +32,9 @@\n \n typedef int _Atomic_word;\n \n-#if defined(__mc68020__) || defined(__mc68030__) \\\n-    || defined(__mc68040__) || defined(__mc68060__)\n+#if ( defined(__mc68020__) || defined(__mc68030__) \\\n+      || defined(__mc68040__) || defined(__mc68060__) ) \\\n+    && !defined(__mcpu32__)\n // These variants support compare-and-swap.\n \n static inline _Atomic_word \n@@ -74,8 +75,7 @@ __exchange_and_add (volatile _Atomic_word *__mem, int __val)\n   return __result;\n }\n \n-#elif !defined(__mcf5200__) && !defined(__mcf5300__)\n-// 68000, 68010, cpu32 and 5400 support test-and-set.\n+#else\n \n template <int __inst>\n struct __Atomicity_lock\n@@ -94,9 +94,26 @@ __exchange_and_add (volatile _Atomic_word *__mem, int __val)\n {\n   _Atomic_word __result;\n \n+// bset with no immediate addressing\n+#if defined(__mcf5200__) || defined(__mcf5300__) || defined(__mcf5400__)\n+  __asm__ __volatile__(\"1: bset.b #7,%0@\\n\\tjbne 1b\"\n+\t\t       : /* no outputs */\n+\t\t       : \"a\"(&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t       : \"cc\", \"memory\");\n+\n+// bset with immediate addressing\n+#elif defined(__mc68000__)\n+  __asm__ __volatile__(\"1: bset.b #7,%0\\n\\tjbne 1b\"\n+\t\t       : \"+m\"(__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t       : /* none */\n+\t\t       : \"cc\");\n+\n+#else // 680x0, cpu32, 5400 support test-and-set.\n   __asm__ __volatile__(\"1: tas %0\\n\\tjbne 1b\"\n-\t\t       : \"=m\"(__Atomicity_lock<0>::_S_atomicity_lock)\n-\t\t       : \"m\"(__Atomicity_lock<0>::_S_atomicity_lock));\n+\t\t       : \"+m\"(__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t       : /* none */\n+\t\t       : \"cc\");\n+#endif\n \n   __result = *__mem;\n   *__mem = __result + __val;\n@@ -106,45 +123,7 @@ __exchange_and_add (volatile _Atomic_word *__mem, int __val)\n   return __result;\n }\n \n-#elif defined(__vxWorks__) || defined(__embedded__)\n-// The best we can hope for is to disable interrupts, which we\n-// can only do from supervisor mode.\n-\n-static inline _Atomic_word \n-__attribute__ ((__unused__))\n-__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n-{\n-  _Atomic_word __result;\n-  short __level, __tmpsr;\n-  __asm__ __volatile__ (\"move%.w %%sr,%0\\n\\tor%.l %0,%1\\n\\tmove%.w %1,%%sr\"\n-\t\t  \t: \"=d\"(__level), \"=d\"(__tmpsr) : \"1\"(0x700));\n-\n-  __result = *__mem;\n-  *__mem = __result + __val;\n-\n-  __asm__ __volatile__ (\"move%.w %0,%%sr\" : : \"d\"(__level));\n-\n-  return __result;\n-}\n-\n-#else\n-// These variants do not support any atomic operations at all.\n-\n-#warning \"__exchange_and_add is not atomic for this target\"\n-\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n-{\n-  _Atomic_word __result;\n-\n-  __result = *__mem;\n-  *__mem = __result + __val;\n-\n-  return __result;\n-}\n-\n-#endif /* CAS / IRQ / TAS */\n+#endif /* TAS / BSET */\n \n static inline void\n __attribute__ ((__unused__))\n@@ -155,4 +134,4 @@ __atomic_add (volatile _Atomic_word* __mem, int __val)\n   (void) __exchange_and_add (__mem, __val);\n }\n \n-#endif /* atomicity.h */\n+#endif /* !_GLIBCXX_ATOMICITY_H */"}]}