{"sha": "2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmViMzc0NWE3YmNkN2YzMjZiNDRmNzg0ZDJmMGNhNmEyZmQ0MDgwZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-09-20T19:33:05Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-09-20T19:33:05Z"}, "message": "gfortran.h (gfc_str_startswith): New macro.\n\n2018-09-20  Janus Weil  <janus@gcc.gnu.org>\n\n\t* gfortran.h (gfc_str_startswith): New macro.\n\t* decl.c (variable_decl, gfc_match_end): Use it.\n\t* iresolve.c (is_trig_resolved): Ditto.\n\t* module.c (load_omp_udrs, read_module): Ditto.\n\t* options.c (gfc_handle_runtime_check_option): Ditto.\n\t* primary.c (match_arg_list_function): Ditto.\n\t* trans-decl.c (gfc_get_symbol_decl): Ditto.\n\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n\t* interface.c (dtio_op): Replace strncmp by strcmp.\n\t* resolve.c (resolve_actual_arglist, resolve_function): Ditto.\n\t* trans-expr.c (conv_arglist_function): Ditto.\n\t* trans-intrinsic.c (gfc_conv_ieee_arithmetic_function): Replace macro\n\tSTARTS_WITH by gfc_str_startswith.\n\nFrom-SVN: r264448", "tree": {"sha": "230e5d690dc909163e13b97662b3920ae08ffa7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/230e5d690dc909163e13b97662b3920ae08ffa7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5596651acde99a5826a6ebf63afaf1a9fabc36e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5596651acde99a5826a6ebf63afaf1a9fabc36e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5596651acde99a5826a6ebf63afaf1a9fabc36e7"}], "stats": {"total": 89, "additions": 52, "deletions": 37}, "files": [{"sha": "7cbda093eee8488e9a7a4088ed5b7d0996264459", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -1,3 +1,19 @@\n+2018-09-20  Janus Weil  <janus@gcc.gnu.org>\n+\n+\t* gfortran.h (gfc_str_startswith): New macro.\n+\t* decl.c (variable_decl, gfc_match_end): Use it.\n+\t* iresolve.c (is_trig_resolved): Ditto.\n+\t* module.c (load_omp_udrs, read_module): Ditto.\n+\t* options.c (gfc_handle_runtime_check_option): Ditto.\n+\t* primary.c (match_arg_list_function): Ditto.\n+\t* trans-decl.c (gfc_get_symbol_decl): Ditto.\n+\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n+\t* interface.c (dtio_op): Replace strncmp by strcmp.\n+\t* resolve.c (resolve_actual_arglist, resolve_function): Ditto.\n+\t* trans-expr.c (conv_arglist_function): Ditto.\n+\t* trans-intrinsic.c (gfc_conv_ieee_arithmetic_function): Replace macro\n+\tSTARTS_WITH by gfc_str_startswith.\n+\n 2018-09-20  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* dump-parse-tree.c (show_omp_clauses): Add missing omp list_types"}, {"sha": "91a1f34d7f1dd6b1f343a70ca52d5d108780de41", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -2529,7 +2529,7 @@ variable_decl (int elem)\n     }\n \n   /* %FILL components may not have initializers.  */\n-  if (strncmp (name, \"%FILL\", 5) == 0 && gfc_match_eos () != MATCH_YES)\n+  if (gfc_str_startswith (name, \"%FILL\") && gfc_match_eos () != MATCH_YES)\n     {\n       gfc_error (\"%qs entity cannot have an initializer at %C\", \"%FILL\");\n       m = MATCH_ERROR;\n@@ -7811,7 +7811,7 @@ gfc_match_end (gfc_statement *st)\n     {\n     case COMP_ASSOCIATE:\n     case COMP_BLOCK:\n-      if (!strncmp (block_name, \"block@\", strlen(\"block@\")))\n+      if (gfc_str_startswith (block_name, \"block@\"))\n \tblock_name = NULL;\n       break;\n "}, {"sha": "b0518e228e9a98aca64acd30d36876b006933302", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -3310,6 +3310,9 @@ bool gfc_is_compile_time_shape (gfc_array_spec *);\n bool gfc_ref_dimen_size (gfc_array_ref *, int dimen, mpz_t *, mpz_t *);\n \n \n+#define gfc_str_startswith(str, pref) \\\n+\t(strncmp ((str), (pref), strlen (pref)) == 0)\n+\n /* interface.c -- FIXME: some of these should be in symbol.c */\n void gfc_free_interface (gfc_interface *);\n bool gfc_compare_derived_types (gfc_symbol *, gfc_symbol *);"}, {"sha": "ff6b2bb7ece2099f72de47969dcd6b28fe4cbecb", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -122,9 +122,9 @@ fold_unary_intrinsic (gfc_intrinsic_op op)\n static gfc_intrinsic_op\n dtio_op (char* mode)\n {\n-  if (strncmp (mode, \"formatted\", 9) == 0)\n+  if (strcmp (mode, \"formatted\") == 0)\n     return INTRINSIC_FORMATTED;\n-  if (strncmp (mode, \"unformatted\", 9) == 0)\n+  if (strcmp (mode, \"unformatted\") == 0)\n     return INTRINSIC_UNFORMATTED;\n   return INTRINSIC_NONE;\n }"}, {"sha": "f2d6bbaec5cea5faa52f8622825c007cbeaf1cd3", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -698,7 +698,7 @@ is_trig_resolved (gfc_expr *f)\n   /* We know we've already resolved the function if we see the lib call\n      starting with '__'.  */\n   return (f->value.function.name != NULL\n-\t  && strncmp (\"__\", f->value.function.name, 2) == 0);\n+\t  && gfc_str_startswith (f->value.function.name, \"__\"));\n }\n \n /* Return a shallow copy of the function expression f.  The original expression"}, {"sha": "7b8e863ca0a0e1b98f62e7a4795d53c70ce91aee", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -4791,7 +4791,7 @@ load_omp_udrs (void)\n       mio_pool_string (&name);\n       gfc_clear_ts (&ts);\n       mio_typespec (&ts);\n-      if (strncmp (name, \"operator \", sizeof (\"operator \") - 1) == 0)\n+      if (gfc_str_startswith (name, \"operator \"))\n \t{\n \t  const char *p = name + sizeof (\"operator \") - 1;\n \t  if (strcmp (p, \"+\") == 0)\n@@ -5233,8 +5233,8 @@ read_module (void)\n \n \t  /* Exception: Always import vtabs & vtypes.  */\n \t  if (p == NULL && name[0] == '_'\n-\t      && (strncmp (name, \"__vtab_\", 5) == 0\n-\t\t  || strncmp (name, \"__vtype_\", 6) == 0))\n+\t      && (gfc_str_startswith (name, \"__vtab_\")\n+\t\t  || gfc_str_startswith (name, \"__vtype_\")))\n \t    p = name;\n \n \t  /* Skip symtree nodes not in an ONLY clause, unless there\n@@ -5319,8 +5319,8 @@ read_module (void)\n \t\tsym->attr.use_rename = 1;\n \n \t      if (name[0] != '_'\n-\t\t  || (strncmp (name, \"__vtab_\", 5) != 0\n-\t\t      && strncmp (name, \"__vtype_\", 6) != 0))\n+\t\t  || (!gfc_str_startswith (name, \"__vtab_\")\n+\t\t      && !gfc_str_startswith (name, \"__vtype_\")))\n \t\tsym->attr.use_only = only_flag;\n \n \t      /* Store the symtree pointing to this symbol.  */"}, {"sha": "73f5389361d9b1d1e9bc2888cb2516574cde4049", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -565,7 +565,7 @@ gfc_handle_runtime_check_option (const char *arg)\n \t      result = 1;\n \t      break;\n \t    }\n-\t  else if (optname[n] && pos > 3 && strncmp (\"no-\", arg, 3) == 0\n+\t  else if (optname[n] && pos > 3 && gfc_str_startswith (arg, \"no-\")\n \t\t   && strncmp (optname[n], arg+3, pos-3) == 0)\n \t    {\n \t      gfc_option.rtcheck &= ~optmask[n];"}, {"sha": "6f45afa86ea36a65c3e56a8e76bac6a15d69601c", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -1713,21 +1713,21 @@ match_arg_list_function (gfc_actual_arglist *result)\n       switch (name[0])\n \t{\n \tcase 'l':\n-\t  if (strncmp (name, \"loc\", 3) == 0)\n+\t  if (gfc_str_startswith (name, \"loc\"))\n \t    {\n \t      result->name = \"%LOC\";\n \t      break;\n \t    }\n \t  /* FALLTHRU */\n \tcase 'r':\n-\t  if (strncmp (name, \"ref\", 3) == 0)\n+\t  if (gfc_str_startswith (name, \"ref\"))\n \t    {\n \t      result->name = \"%REF\";\n \t      break;\n \t    }\n \t  /* FALLTHRU */\n \tcase 'v':\n-\t  if (strncmp (name, \"val\", 3) == 0)\n+\t  if (gfc_str_startswith (name, \"val\"))\n \t    {\n \t      result->name = \"%VAL\";\n \t      break;"}, {"sha": "a2beb7fc90a8f8abb2be8262655f528f7fb0b555", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -2061,7 +2061,7 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,\n \t nothing to do for %REF.  */\n       if (arg->name && arg->name[0] == '%')\n \t{\n-\t  if (strncmp (\"%VAL\", arg->name, 4) == 0)\n+\t  if (strcmp (\"%VAL\", arg->name) == 0)\n \t    {\n \t      if (e->ts.type == BT_CHARACTER || e->ts.type == BT_DERIVED)\n \t\t{\n@@ -2093,7 +2093,7 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,\n \t    }\n \n \t  /* Statement functions have already been excluded above.  */\n-\t  else if (strncmp (\"%LOC\", arg->name, 4) == 0\n+\t  else if (strcmp (\"%LOC\", arg->name) == 0\n \t\t   && e->ts.type == BT_PROCEDURE)\n \t    {\n \t      if (e->symtree->n.sym->attr.proc == PROC_INTERNAL)\n@@ -3265,7 +3265,7 @@ resolve_function (gfc_expr *expr)\n \t      if (arg->next->expr->expr_type != EXPR_CONSTANT)\n \t\tbreak;\n \n-\t      if (arg->next->name && strncmp (arg->next->name, \"kind\", 4) == 0)\n+\t      if (arg->next->name && strcmp (arg->next->name, \"kind\") == 0)\n \t\tbreak;\n \n \t      if ((int)mpz_get_si (arg->next->expr->value.integer)"}, {"sha": "159c3dbbc6b45634a9f1fa1138e4abd8862424b3", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -1828,7 +1828,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n     GFC_DECL_ASSOCIATE_VAR_P (decl) = 1;\n \n   if (sym->attr.vtab\n-      || (sym->name[0] == '_' && strncmp (\"__def_init\", sym->name, 10) == 0))\n+      || (sym->name[0] == '_' && gfc_str_startswith (sym->name, \"__def_init\")))\n     TREE_READONLY (decl) = 1;\n \n   return decl;"}, {"sha": "5a7cdb8f51972deba8579123cab2c6fdc0c51e45", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -4705,14 +4705,14 @@ conv_arglist_function (gfc_se *se, gfc_expr *expr, const char *name)\n      indirectly for %LOC, else by reference.  Thus %REF\n      is a \"do-nothing\" and %LOC is the same as an F95\n      pointer.  */\n-  if (strncmp (name, \"%VAL\", 4) == 0)\n+  if (strcmp (name, \"%VAL\") == 0)\n     gfc_conv_expr (se, expr);\n-  else if (strncmp (name, \"%LOC\", 4) == 0)\n+  else if (strcmp (name, \"%LOC\") == 0)\n     {\n       gfc_conv_expr_reference (se, expr);\n       se->expr = gfc_build_addr_expr (NULL, se->expr);\n     }\n-  else if (strncmp (name, \"%REF\", 4) == 0)\n+  else if (strcmp (name, \"%REF\") == 0)\n     gfc_conv_expr_reference (se, expr);\n   else\n     gfc_error (\"Unknown argument list function at %L\", &expr->where);\n@@ -5869,7 +5869,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n       /* When calling __copy for character expressions to unlimited\n \t polymorphic entities, the dst argument needs a string length.  */\n       if (sym->name[0] == '_' && e && e->ts.type == BT_CHARACTER\n-\t  && strncmp (sym->name, \"__vtab_CHARACTER\", 16) == 0\n+\t  && gfc_str_startswith (sym->name, \"__vtab_CHARACTER\")\n \t  && arg->next && arg->next->expr\n \t  && (arg->next->expr->ts.type == BT_DERIVED\n \t      || arg->next->expr->ts.type == BT_CLASS)"}, {"sha": "d068e011f25c52a6d4e05a871f8ad4e3e31fa089", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "patch": "@@ -8938,37 +8938,33 @@ gfc_conv_ieee_arithmetic_function (gfc_se * se, gfc_expr * expr)\n {\n   const char *name = expr->value.function.name;\n \n-#define STARTS_WITH(A,B) (strncmp((A), (B), strlen(B)) == 0)\n-\n-  if (STARTS_WITH (name, \"_gfortran_ieee_is_nan\"))\n+  if (gfc_str_startswith (name, \"_gfortran_ieee_is_nan\"))\n     conv_intrinsic_ieee_builtin (se, expr, BUILT_IN_ISNAN, 1);\n-  else if (STARTS_WITH (name, \"_gfortran_ieee_is_finite\"))\n+  else if (gfc_str_startswith (name, \"_gfortran_ieee_is_finite\"))\n     conv_intrinsic_ieee_builtin (se, expr, BUILT_IN_ISFINITE, 1);\n-  else if (STARTS_WITH (name, \"_gfortran_ieee_unordered\"))\n+  else if (gfc_str_startswith (name, \"_gfortran_ieee_unordered\"))\n     conv_intrinsic_ieee_builtin (se, expr, BUILT_IN_ISUNORDERED, 2);\n-  else if (STARTS_WITH (name, \"_gfortran_ieee_is_normal\"))\n+  else if (gfc_str_startswith (name, \"_gfortran_ieee_is_normal\"))\n     conv_intrinsic_ieee_is_normal (se, expr);\n-  else if (STARTS_WITH (name, \"_gfortran_ieee_is_negative\"))\n+  else if (gfc_str_startswith (name, \"_gfortran_ieee_is_negative\"))\n     conv_intrinsic_ieee_is_negative (se, expr);\n-  else if (STARTS_WITH (name, \"_gfortran_ieee_copy_sign\"))\n+  else if (gfc_str_startswith (name, \"_gfortran_ieee_copy_sign\"))\n     conv_intrinsic_ieee_copy_sign (se, expr);\n-  else if (STARTS_WITH (name, \"_gfortran_ieee_scalb\"))\n+  else if (gfc_str_startswith (name, \"_gfortran_ieee_scalb\"))\n     conv_intrinsic_ieee_scalb (se, expr);\n-  else if (STARTS_WITH (name, \"_gfortran_ieee_next_after\"))\n+  else if (gfc_str_startswith (name, \"_gfortran_ieee_next_after\"))\n     conv_intrinsic_ieee_next_after (se, expr);\n-  else if (STARTS_WITH (name, \"_gfortran_ieee_rem\"))\n+  else if (gfc_str_startswith (name, \"_gfortran_ieee_rem\"))\n     conv_intrinsic_ieee_rem (se, expr);\n-  else if (STARTS_WITH (name, \"_gfortran_ieee_logb\"))\n+  else if (gfc_str_startswith (name, \"_gfortran_ieee_logb\"))\n     conv_intrinsic_ieee_logb_rint (se, expr, BUILT_IN_LOGB);\n-  else if (STARTS_WITH (name, \"_gfortran_ieee_rint\"))\n+  else if (gfc_str_startswith (name, \"_gfortran_ieee_rint\"))\n     conv_intrinsic_ieee_logb_rint (se, expr, BUILT_IN_RINT);\n   else\n     /* It is not among the functions we translate directly.  We return\n        false, so a library function call is emitted.  */\n     return false;\n \n-#undef STARTS_WITH\n-\n   return true;\n }\n "}]}