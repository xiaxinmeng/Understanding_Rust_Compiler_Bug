{"sha": "fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwMjdhNDIzNTdhZDBhNjViNmQwZmNjMzlkMDc1ZTA0MWFkYThkZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-24T08:29:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-24T08:29:42Z"}, "message": "i386.c (ix86_fold_builtin): Handle IX86_BUILTIN_BEXTR{,I}{32,64}...\n\n\t* config/i386/i386.c (ix86_fold_builtin): Handle\n\tIX86_BUILTIN_BEXTR{,I}{32,64}, IX86_BUILTIN_BZHI{32,64},\n\tIX86_BUILTIN_PDEP{32,64} and IX86_BUILTIN_PEXT{32,64}.\n\t(ix86_gimple_fold_builtin): Handle IX86_BUILTIN_BZHI{32,64},\n\tIX86_BUILTIN_PDEP{32,64} and IX86_BUILTIN_PEXT{32,64}.\n\n\t* gcc.target/i386/bmi2-pext-1.c: New test.\n\t* gcc.target/i386/bmi2-pdep-1.c: New test.\n\t* gcc.target/i386/bmi2-bzhi-3.c: New test.\n\t* gcc.target/i386/tbm-bextri-1.c: New test.\n\t* gcc.target/i386/bmi-bextr-6.c: New test.\n\nFrom-SVN: r241465", "tree": {"sha": "af2a2bddd7cbdf6b35123529fb27a889c23feb99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af2a2bddd7cbdf6b35123529fb27a889c23feb99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e10302e3f67cad4f4dbf294d260fac49d97cf36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e10302e3f67cad4f4dbf294d260fac49d97cf36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e10302e3f67cad4f4dbf294d260fac49d97cf36"}], "stats": {"total": 368, "additions": 367, "deletions": 1}, "files": [{"sha": "dae5108fd13b51cd7a389c34efda53a544b56f13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "patch": "@@ -1,3 +1,11 @@\n+2016-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_fold_builtin): Handle\n+\tIX86_BUILTIN_BEXTR{,I}{32,64}, IX86_BUILTIN_BZHI{32,64},\n+\tIX86_BUILTIN_PDEP{32,64} and IX86_BUILTIN_PEXT{32,64}.\n+\t(ix86_gimple_fold_builtin): Handle IX86_BUILTIN_BZHI{32,64},\n+\tIX86_BUILTIN_PDEP{32,64} and IX86_BUILTIN_PEXT{32,64}.\n+\n 2016-10-24  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/77966"}, {"sha": "b4899a198d4f709d012acc1f1bde3129b6030318", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 118, "deletions": 1, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "patch": "@@ -33369,6 +33369,88 @@ ix86_fold_builtin (tree fndecl, int n_args,\n \t    }\n \t  break;\n \n+\tcase IX86_BUILTIN_BEXTR32:\n+\tcase IX86_BUILTIN_BEXTR64:\n+\tcase IX86_BUILTIN_BEXTRI32:\n+\tcase IX86_BUILTIN_BEXTRI64:\n+\t  gcc_assert (n_args == 2);\n+\t  if (tree_fits_uhwi_p (args[1]))\n+\t    {\n+\t      unsigned HOST_WIDE_INT res = 0;\n+\t      unsigned int prec = TYPE_PRECISION (TREE_TYPE (args[0]));\n+\t      unsigned int start = tree_to_uhwi (args[1]);\n+\t      unsigned int len = (start & 0xff00) >> 8;\n+\t      start &= 0xff;\n+\t      if (start >= prec || len == 0)\n+\t\tres = 0;\n+\t      else if (!tree_fits_uhwi_p (args[0]))\n+\t\tbreak;\n+\t      else\n+\t\tres = tree_to_uhwi (args[0]) >> start;\n+\t      if (len > prec)\n+\t\tlen = prec;\n+\t      if (len < HOST_BITS_PER_WIDE_INT)\n+\t\tres &= (HOST_WIDE_INT_1U << len) - 1;\n+\t      return build_int_cstu (TREE_TYPE (TREE_TYPE (fndecl)), res);\n+\t    }\n+\t  break;\n+\n+\tcase IX86_BUILTIN_BZHI32:\n+\tcase IX86_BUILTIN_BZHI64:\n+\t  gcc_assert (n_args == 2);\n+\t  if (tree_fits_uhwi_p (args[1]))\n+\t    {\n+\t      unsigned int idx = tree_to_uhwi (args[1]) & 0xff;\n+\t      if (idx >= TYPE_PRECISION (TREE_TYPE (args[0])))\n+\t\treturn args[0];\n+\t      if (!tree_fits_uhwi_p (args[0]))\n+\t\tbreak;\n+\t      unsigned HOST_WIDE_INT res = tree_to_uhwi (args[0]);\n+\t      res &= ~(HOST_WIDE_INT_M1U << idx);\n+\t      return build_int_cstu (TREE_TYPE (TREE_TYPE (fndecl)), res);\n+\t    }\n+\t  break;\n+\n+\tcase IX86_BUILTIN_PDEP32:\n+\tcase IX86_BUILTIN_PDEP64:\n+\t  gcc_assert (n_args == 2);\n+\t  if (tree_fits_uhwi_p (args[0]) && tree_fits_uhwi_p (args[1]))\n+\t    {\n+\t      unsigned HOST_WIDE_INT src = tree_to_uhwi (args[0]);\n+\t      unsigned HOST_WIDE_INT mask = tree_to_uhwi (args[1]);\n+\t      unsigned HOST_WIDE_INT res = 0;\n+\t      unsigned HOST_WIDE_INT m, k = 1;\n+\t      for (m = 1; m; m <<= 1)\n+\t\tif ((mask & m) != 0)\n+\t\t  {\n+\t\t    if ((src & k) != 0)\n+\t\t      res |= m;\n+\t\t    k <<= 1;\n+\t\t  }\n+\t      return build_int_cstu (TREE_TYPE (TREE_TYPE (fndecl)), res);\n+\t    }\n+\t  break;\n+\n+\tcase IX86_BUILTIN_PEXT32:\n+\tcase IX86_BUILTIN_PEXT64:\n+\t  gcc_assert (n_args == 2);\n+\t  if (tree_fits_uhwi_p (args[0]) && tree_fits_uhwi_p (args[1]))\n+\t    {\n+\t      unsigned HOST_WIDE_INT src = tree_to_uhwi (args[0]);\n+\t      unsigned HOST_WIDE_INT mask = tree_to_uhwi (args[1]);\n+\t      unsigned HOST_WIDE_INT res = 0;\n+\t      unsigned HOST_WIDE_INT m, k = 1;\n+\t      for (m = 1; m; m <<= 1)\n+\t\tif ((mask & m) != 0)\n+\t\t  {\n+\t\t    if ((src & m) != 0)\n+\t\t      res |= k;\n+\t\t    k <<= 1;\n+\t\t  }\n+\t      return build_int_cstu (TREE_TYPE (TREE_TYPE (fndecl)), res);\n+\t    }\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -33393,7 +33475,7 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   int n_args = gimple_call_num_args (stmt);\n   enum ix86_builtins fn_code = (enum ix86_builtins) DECL_FUNCTION_CODE (fndecl);\n   tree decl = NULL_TREE;\n-  tree arg0;\n+  tree arg0, arg1;\n \n   switch (fn_code)\n     {\n@@ -33438,6 +33520,41 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t}\n       break;\n \n+    case IX86_BUILTIN_BZHI32:\n+    case IX86_BUILTIN_BZHI64:\n+      gcc_assert (n_args == 2);\n+      arg1 = gimple_call_arg (stmt, 1);\n+      if (tree_fits_uhwi_p (arg1) && gimple_call_lhs (stmt))\n+\t{\n+\t  unsigned int idx = tree_to_uhwi (arg1) & 0xff;\n+\t  arg0 = gimple_call_arg (stmt, 0);\n+\t  if (idx < TYPE_PRECISION (TREE_TYPE (arg0)))\n+\t    break;\n+\t  location_t loc = gimple_location (stmt);\n+\t  gimple *g = gimple_build_assign (gimple_call_lhs (stmt), arg0);\n+\t  gimple_set_location (g, loc);\n+\t  gsi_replace (gsi, g, true);\n+\t  return true;\n+\t}\n+      break;\n+\n+    case IX86_BUILTIN_PDEP32:\n+    case IX86_BUILTIN_PDEP64:\n+    case IX86_BUILTIN_PEXT32:\n+    case IX86_BUILTIN_PEXT64:\n+      gcc_assert (n_args == 2);\n+      arg1 = gimple_call_arg (stmt, 1);\n+      if (integer_all_onesp (arg1) && gimple_call_lhs (stmt))\n+\t{\n+\t  location_t loc = gimple_location (stmt);\n+\t  arg0 = gimple_call_arg (stmt, 0);\n+\t  gimple *g = gimple_build_assign (gimple_call_lhs (stmt), arg0);\n+\t  gimple_set_location (g, loc);\n+\t  gsi_replace (gsi, g, true);\n+\t  return true;\n+\t}\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "ea015f153da276a14848910bc8efcfb03cc58067", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "patch": "@@ -1,3 +1,11 @@\n+2016-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/bmi2-pext-1.c: New test.\n+\t* gcc.target/i386/bmi2-pdep-1.c: New test.\n+\t* gcc.target/i386/bmi2-bzhi-3.c: New test.\n+\t* gcc.target/i386/tbm-bextri-1.c: New test.\n+\t* gcc.target/i386/bmi-bextr-6.c: New test.\n+\n 2016-10-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/77483"}, {"sha": "589596744558db94004a4ee787dba2528333155b", "filename": "gcc/testsuite/gcc.target/i386/bmi-bextr-6.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-6.c?ref=fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"optimized\" } } */\n+\n+#include <x86intrin.h>\n+\n+extern void link_error (void);\n+\n+volatile unsigned int a;\n+volatile unsigned long long b;\n+\n+int\n+main ()\n+{\n+  if (__bextr_u32 (0xffffffffU, 0 | (0 << 8)) != 0\n+      || __bextr_u32 (0xffffffffU, 64 | (16 << 8)) != 0\n+      || __bextr_u32 (0x12345678U, 4 | (10 << 8)) != 0x167\n+      || __bextr_u32 (0xffffffffU, 2 | (255 << 8)) != 0x3fffffff\n+      || __bextr_u32 (0xdeadbeefU, 2 | (64 << 8)) != 0x37ab6fbb\n+      || __bextr_u32 (0xdeadbeefU, 0 | (64 << 8)) != 0xdeadbeefU\n+      || __bextr_u32 (a, 0 | (0 << 8)) != 0\n+      || __bextr_u32 (a, 32 | (16 << 8)) != 0)\n+    link_error ();\n+  if (_bextr_u32 (0xffffffffU, 0, 0) != 0\n+      || _bextr_u32 (0xffffffffU, 64, 16) != 0\n+      || _bextr_u32 (0x12345678U, 4, 10) != 0x167\n+      || _bextr_u32 (0xffffffffU, 2, 255) != 0x3fffffff\n+      || _bextr_u32 (0xdeadbeefU, 2, 64) != 0x37ab6fbb\n+      || _bextr_u32 (0xdeadbeefU, 0, 64) != 0xdeadbeefU\n+      || _bextr_u32 (a, 0, 0) != 0\n+      || _bextr_u32 (a, 32, 16) != 0)\n+    link_error ();\n+#ifdef __x86_64__\n+  if (__bextr_u64 (0xffffffffffffffffUL, 0 | (0 << 8)) != 0\n+      || __bextr_u64 (0xffffffffffffffffUL, 128 | (16 << 8)) != 0\n+      || __bextr_u64 (0x123456789abcdef0UL, 5 | (37 << 8)) != 0x13c4d5e6f7UL\n+      || __bextr_u64 (0xffffffffffffffffUL, 2 | (255 << 8)) != 0x3fffffffffffffffUL\n+      || __bextr_u64 (0xdeadbeefbeefdeadU, 2 | (64 << 8)) != 0x37ab6fbbefbbf7abUL\n+      || __bextr_u64 (0xdeadbeefbeefdeadU, 0 | (64 << 8)) != 0xdeadbeefbeefdeadUL\n+      || __bextr_u64 (b, 0 | (0 << 8)) != 0\n+      || __bextr_u64 (b, 64 | (16 << 8)) != 0)\n+    link_error ();\n+  if (_bextr_u64 (0xffffffffffffffffUL, 0, 0) != 0\n+      || _bextr_u64 (0xffffffffffffffffUL, 128, 16) != 0\n+      || _bextr_u64 (0x123456789abcdef0UL, 5, 37) != 0x13c4d5e6f7UL\n+      || _bextr_u64 (0xffffffffffffffffUL, 2, 255) != 0x3fffffffffffffffUL\n+      || _bextr_u64 (0xdeadbeefbeefdeadUL, 2, 64) != 0x37ab6fbbefbbf7abUL\n+      || _bextr_u64 (0xdeadbeefbeefdeadUL, 0, 64) != 0xdeadbeefbeefdeadUL\n+      || _bextr_u64 (b, 0, 0) != 0\n+      || _bextr_u64 (b, 64, 16) != 0)\n+    link_error ();\n+#endif\n+  return 0;\n+}"}, {"sha": "cc334eba1ba3df14ea3bc9802a7236e23d05d4f0", "filename": "gcc/testsuite/gcc.target/i386/bmi2-bzhi-3.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi-3.c?ref=fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"optimized\" } } */\n+\n+#include <x86intrin.h>\n+\n+extern void link_error (void);\n+unsigned int a;\n+unsigned long long b;\n+\n+static inline unsigned int f1 (void) { return _bzhi_u32 (a, 0); }\n+static inline unsigned int f2 (unsigned int x) { return _bzhi_u32 (x, 0); }\n+static inline unsigned int f3 (void) { return _bzhi_u32 (a, 5); }\n+static inline unsigned int f4 (unsigned int x) { return _bzhi_u32 (x, 5); }\n+static inline unsigned int f5 (void) { return _bzhi_u32 (a, 31); }\n+static inline unsigned int f6 (unsigned int x) { return _bzhi_u32 (x, 31); }\n+static inline unsigned int f7 (void) { return _bzhi_u32 (a, 32); }\n+static inline unsigned int f8 (unsigned int x) { return _bzhi_u32 (x, 32); }\n+static inline unsigned int f9 (void) { return _bzhi_u32 (a, 37); }\n+static inline unsigned int f10 (unsigned int x) { return _bzhi_u32 (x, 37); }\n+static inline unsigned int f11 (void) { return _bzhi_u32 (a, 257); }\n+static inline unsigned int f12 (unsigned int x) { return _bzhi_u32 (x, 257); }\n+static inline unsigned int f13 (void) { return _bzhi_u32 (a, 289); }\n+static inline unsigned int f14 (unsigned int x) { return _bzhi_u32 (x, 289); }\n+#ifdef __x86_64__\n+static inline unsigned long long f21 (void) { return _bzhi_u64 (b, 0); }\n+static inline unsigned long long f22 (unsigned long long x) { return _bzhi_u64 (x, 0); }\n+static inline unsigned long long f23 (void) { return _bzhi_u64 (b, 5); }\n+static inline unsigned long long f24 (unsigned long long x) { return _bzhi_u64 (x, 5); }\n+static inline unsigned long long f25 (void) { return _bzhi_u64 (b, 63); }\n+static inline unsigned long long f26 (unsigned long long x) { return _bzhi_u64 (x, 63); }\n+static inline unsigned long long f27 (void) { return _bzhi_u64 (b, 64); }\n+static inline unsigned long long f28 (unsigned long long x) { return _bzhi_u64 (x, 64); }\n+static inline unsigned long long f29 (void) { return _bzhi_u64 (b, 69); }\n+static inline unsigned long long f30 (unsigned long long x) { return _bzhi_u64 (x, 69); }\n+static inline unsigned long long f31 (void) { return _bzhi_u64 (b, 257); }\n+static inline unsigned long long f32 (unsigned long long x) { return _bzhi_u64 (x, 257); }\n+static inline unsigned long long f33 (void) { return _bzhi_u64 (b, 321); }\n+static inline unsigned long long f34 (unsigned long long x) { return _bzhi_u64 (x, 321); }\n+#endif\n+\n+unsigned int c;\n+unsigned long long d;\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : \"g\" (&c), \"g\" (&d) : \"memory\");\n+  a = -1U;\n+  b = -1ULL;\n+  if (f1 () != 0 || f2 (-1U) != 0\n+      || f3 () != 0x1f || f4 (-1U) != 0x1f\n+      || f5 () != 0x7fffffffU || f6 (-1U) != 0x7fffffffU\n+      || f7 () != -1U || f8 (-1U) != -1U\n+      || f9 () != -1U || f10 (-1U) != -1U\n+      || f11 () != 1 || f12 (-1U) != 1\n+      || f13 () != -1U || f14 (-1U) != -1U)\n+    link_error ();\n+  if (_bzhi_u32 (c, 32) != c\n+      || _bzhi_u32 (c, 64) != c\n+      || _bzhi_u32 (c, 255) != c)\n+    link_error ();\n+#ifdef __x86_64__\n+  if (f21 () != 0 || f22 (-1ULL) != 0\n+      || f23 () != 0x1f || f24 (-1ULL) != 0x1f\n+      || f25 () != 0x7fffffffffffffffULL || f26 (-1ULL) != 0x7fffffffffffffffULL\n+      || f27 () != -1ULL || f28 (-1ULL) != -1ULL\n+      || f29 () != -1ULL || f30 (-1ULL) != -1ULL\n+      || f31 () != 1 || f32 (-1ULL) != 1\n+      || f33 () != -1ULL || f34 (-1ULL) != -1ULL)\n+    link_error ();\n+  if (_bzhi_u64 (d, 64) != d\n+      || _bzhi_u64 (d, 255) != d)\n+    link_error ();\n+#endif\n+  return 0;\n+}"}, {"sha": "c8cf90ba8883377149207bc032466379a82cea25", "filename": "gcc/testsuite/gcc.target/i386/bmi2-pdep-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep-1.c?ref=fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"optimized\" } } */\n+\n+#include <x86intrin.h>\n+\n+extern void link_error (void);\n+\n+unsigned int a;\n+unsigned long long b;\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : \"g\" (&a), \"g\" (&b) : \"memory\");\n+  if (_pdep_u32 (0xabcdef98, 0xffff0000) != 0xef980000\n+      || _pdep_u32 (0xabcdef98, 0xffffff00) != 0xcdef9800\n+      || _pdep_u32 (0xabcdef98, 0x0f0f0f0f) != 0x0e0f0908\n+      || _pdep_u32 (0xabcdef98, 0xff0fff0f) != 0xcd0ef908\n+      || _pdep_u32 (0xabcdef98, 0x000fffff) != 0xdef98\n+      || _pdep_u32 (a, 0xffffffff) != a)\n+    link_error ();\n+#ifdef __x86_64__\n+  if (_pdep_u64 (0xabcdef9876543210UL, 0xffffffff00000000UL) != 0x7654321000000000UL\n+      || _pdep_u64 (0xabcdef9876543210UL, 0xffffffffffffff00UL) != 0xcdef987654321000UL\n+      || _pdep_u64 (0xabcdef9876543210UL, 0x0f0f0f0f0f0f0f0fUL) != 0x0706050403020100UL\n+      || _pdep_u64 (0xabcdef9876543210UL, 0xff0fff0fff0fff0fUL) != 0xef09870654032100UL\n+      || _pdep_u64 (0xabcdef9876543210UL, 0x00000000000fffffUL) != 0x43210UL\n+      || _pdep_u64 (b, 0xffffffffffffffffUL) != b)\n+    link_error ();\n+#endif\n+  return 0;\n+}"}, {"sha": "e0f9bf9f652b909b350c9bcb2a8bfbaa88ed4452", "filename": "gcc/testsuite/gcc.target/i386/bmi2-pext-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext-1.c?ref=fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"optimized\" } } */\n+\n+#include <x86intrin.h>\n+\n+extern void link_error (void);\n+\n+unsigned int a;\n+unsigned long long b;\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : \"g\" (&a), \"g\" (&b) : \"memory\");\n+  if (_pext_u32 (0xabcdef98, 0xffff0000) != 0xabcd\n+      || _pext_u32 (0xabcdef98, 0xffffff00) != 0xabcdef\n+      || _pext_u32 (0xabcdef98, 0x0f0f0f0f) != 0xbdf8\n+      || _pext_u32 (0xabcdef98, 0xff0fff0f) != 0xabdef8\n+      || _pext_u32 (0xabcdef98, 0x000fffff) != 0xdef98\n+      || _pext_u32 (a, 0xffffffff) != a)\n+    link_error ();\n+#ifdef __x86_64__\n+  if (_pext_u64 (0xabcdef9876543210UL, 0xffffffff00000000UL) != 0xabcdef98UL\n+      || _pext_u64 (0xabcdef9876543210UL, 0xffffffffffffff00UL) != 0xabcdef98765432UL\n+      || _pext_u64 (0xabcdef9876543210UL, 0x0f0f0f0f0f0f0f0fUL) != 0xbdf86420UL\n+      || _pext_u64 (0xabcdef9876543210UL, 0xff0fff0fff0fff0fUL) != 0xabdef8764320UL\n+      || _pext_u64 (0xabcdef9876543210UL, 0x00000000000fffffUL) != 0x43210UL\n+      || _pext_u64 (b, 0xffffffffffffffffUL) != b)\n+    link_error ();\n+#endif\n+  return 0;\n+}"}, {"sha": "3d6b2e0b506d317b0c4c6e7950b46b82ea9e22fd", "filename": "gcc/testsuite/gcc.target/i386/tbm-bextri-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftbm-bextri-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb027a42357ad0a65b6d0fcc39d075e041ada8dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftbm-bextri-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftbm-bextri-1.c?ref=fb027a42357ad0a65b6d0fcc39d075e041ada8dd", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtbm -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"optimized\" } } */\n+\n+#include <x86intrin.h>\n+\n+extern void link_error (void);\n+\n+volatile unsigned int a;\n+volatile unsigned long long b;\n+\n+int\n+main ()\n+{\n+  if (__bextri_u32 (0xffffffffU, 0 | (0 << 8)) != 0\n+      || __bextri_u32 (0xffffffffU, 64 | (16 << 8)) != 0\n+      || __bextri_u32 (0x12345678U, 4 | (10 << 8)) != 0x167\n+      || __bextri_u32 (0xffffffffU, 2 | (255 << 8)) != 0x3fffffff\n+      || __bextri_u32 (0xdeadbeefU, 2 | (64 << 8)) != 0x37ab6fbb\n+      || __bextri_u32 (0xdeadbeefU, 0 | (64 << 8)) != 0xdeadbeefU\n+      || __bextri_u32 (a, 0 | (0 << 8)) != 0\n+      || __bextri_u32 (a, 32 | (16 << 8)) != 0)\n+    link_error ();\n+#ifdef __x86_64__\n+  if (__bextri_u64 (0xffffffffffffffffUL, 0 | (0 << 8)) != 0\n+      || __bextri_u64 (0xffffffffffffffffUL, 128 | (16 << 8)) != 0\n+      || __bextri_u64 (0x123456789abcdef0UL, 5 | (37 << 8)) != 0x13c4d5e6f7UL\n+      || __bextri_u64 (0xffffffffffffffffUL, 2 | (255 << 8)) != 0x3fffffffffffffffUL\n+      || __bextri_u64 (0xdeadbeefbeefdeadU, 2 | (64 << 8)) != 0x37ab6fbbefbbf7abUL\n+      || __bextri_u64 (0xdeadbeefbeefdeadU, 0 | (64 << 8)) != 0xdeadbeefbeefdeadUL\n+      || __bextri_u64 (b, 0 | (0 << 8)) != 0\n+      || __bextri_u64 (b, 64 | (16 << 8)) != 0)\n+    link_error ();\n+#endif\n+  return 0;\n+}"}]}