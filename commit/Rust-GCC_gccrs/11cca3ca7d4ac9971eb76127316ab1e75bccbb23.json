{"sha": "11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFjY2EzY2E3ZDRhYzk5NzFlYjc2MTI3MzE2YWIxZTc1YmNjYmIyMw==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-11-23T20:57:50Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-11-23T20:57:50Z"}, "message": "Enable VBMI2 support [2/7]\n\ngcc/\n\tconfig.gcc (avx512vbmi2intrin.h, avx512vbmi2vlintrin): New headers.\n\tconfig/i386/avx512vbmi2intrin.h (_mm512_mask_compress_epi8,\n\t_mm512_maskz_compress_epi8, _mm512_mask_compressstoreu_epi8,\n\t_mm512_mask_compress_epi16, _mm512_maskz_compress_epi16,\n\t_mm512_mask_compressstoreu_epi16): New.\n\tconfig/i386/avx512vbmi2vlintrin.h (_mm_mask_compress_epi8,\n\t_mm_maskz_compress_epi8, _mm256_mask_compressstoreu_epi16,\n\t_mm_mask_compress_epi16, _mm_maskz_compress_epi16,\n\t_mm256_mask_compress_epi16, _mm256_maskz_compress_epi16,\n\t_mm_mask_compressstoreu_epi8, _mm_mask_compressstoreu_epi16,\n\t_mm256_mask_compress_epi8, _mm256_maskz_compress_epi8,\n\t_mm256_mask_compressstoreu_epi8): New.\n\tconfig/i386/i386-builtin-types.def (VOID_FTYPE_PV64QI_V64QI_UDI,\n\tVOID_FTYPE_PV32HI_V32HI_USI, VOID_FTYPE_PV32QI_V32QI_USI,\n\tVOID_FTYPE_PV16QI_V16QI_UHI, VOID_FTYPE_PV16HI_V16HI_UHI,\n\tVOID_FTYPE_PV8HI_V8HI_UQI): New types.\n\tconfig/i386/i386-builtin.def (__builtin_ia32_compressqi512_mask,\n\t__builtin_ia32_compresshi512_mask, __builtin_ia32_compressqi256_mask,\n\t__builtin_ia32_compressqi128_mask, __builtin_ia32_compresshi256_mask,\n\t__builtin_ia32_compresshi128_mask,\n\t__builtin_ia32_compressstoreuqi512_mask,\n\t__builtin_ia32_compressstoreuhi512_mask,\n\t__builtin_ia32_compressstoreuqi256_mask,\n\t__builtin_ia32_compressstoreuqi128_mask,\n\t__builtin_ia32_compressstoreuhi256_mask,\n\t__builtin_ia32_compressstoreuhi128_mask): New builtins.\n\tconfig/i386/i386.c (ix86_init_mmx_sse_builtins): Create special args\n\tarray for flags2.\n\t(ix86_expand_special_args_builtin): Handle new types.\n\t(s4fma_expand): Handle new builtin array.\n\tconfig/i386/immintrin.h: Include new headers.\n\tconfig/i386/sse.md (VI12_AVX512VLBW): New iterator.\n\t(compress<mode>_mask, compressstore<mode>_mask): New patterns.\n\ngcc/testsuite/\n\tgcc.target/i386/avx512-check.h: Handle AVX512VBMI2 bit.\n\tgcc.target/i386/avx512f-vpcompressb-1.c: New test.\n\tgcc.target/i386/avx512f-vpcompressb-2.c: Ditto.\n\tgcc.target/i386/avx512f-vpcompressw-1.c: Ditto.\n\tgcc.target/i386/avx512f-vpcompressw-2.c: Ditto.\n\tgcc.target/i386/avx512vl-vpcompressb-1.c: Ditto.\n\tgcc.target/i386/avx512vl-vpcompressb-2.c: Ditto.\n\tgcc.target/i386/avx512vl-vpcompressw-1.c: Ditto.\n\tgcc.target/i386/avx512vl-vpcompressw-2.c: Ditto.\n\tgcc.target/i386/i386.exp (check_effective_target_avx512vbmi2): New.\n\nFrom-SVN: r255119", "tree": {"sha": "89104eba88b3b1180b4fb6fe5a68df09b898cb51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89104eba88b3b1180b4fb6fe5a68df09b898cb51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd761692cbbaa21d141866df06be53c7af5435b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd761692cbbaa21d141866df06be53c7af5435b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd761692cbbaa21d141866df06be53c7af5435b5"}], "stats": {"total": 646, "additions": 645, "deletions": 1}, "files": [{"sha": "c25ee4b9f81f4cdfe6d58e2aa0c811c0cd72c830", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -1,3 +1,39 @@\n+2017-11-23  Julia Koval  <julia.koval@intel.com>\n+\n+\tconfig.gcc (avx512vbmi2intrin.h, avx512vbmi2vlintrin): New headers.\n+\tconfig/i386/avx512vbmi2intrin.h (_mm512_mask_compress_epi8,\n+\t_mm512_maskz_compress_epi8, _mm512_mask_compressstoreu_epi8,\n+\t_mm512_mask_compress_epi16, _mm512_maskz_compress_epi16,\n+\t_mm512_mask_compressstoreu_epi16): New.\n+\tconfig/i386/avx512vbmi2vlintrin.h (_mm_mask_compress_epi8,\n+\t_mm_maskz_compress_epi8, _mm256_mask_compressstoreu_epi16,\n+\t_mm_mask_compress_epi16, _mm_maskz_compress_epi16,\n+\t_mm256_mask_compress_epi16, _mm256_maskz_compress_epi16,\n+\t_mm_mask_compressstoreu_epi8, _mm_mask_compressstoreu_epi16,\n+\t_mm256_mask_compress_epi8, _mm256_maskz_compress_epi8,\n+\t_mm256_mask_compressstoreu_epi8): New.\n+\tconfig/i386/i386-builtin-types.def (VOID_FTYPE_PV64QI_V64QI_UDI,\n+\tVOID_FTYPE_PV32HI_V32HI_USI, VOID_FTYPE_PV32QI_V32QI_USI,\n+\tVOID_FTYPE_PV16QI_V16QI_UHI, VOID_FTYPE_PV16HI_V16HI_UHI,\n+\tVOID_FTYPE_PV8HI_V8HI_UQI): New types.\n+\tconfig/i386/i386-builtin.def (__builtin_ia32_compressqi512_mask,\n+\t__builtin_ia32_compresshi512_mask, __builtin_ia32_compressqi256_mask,\n+\t__builtin_ia32_compressqi128_mask, __builtin_ia32_compresshi256_mask,\n+\t__builtin_ia32_compresshi128_mask,\n+\t__builtin_ia32_compressstoreuqi512_mask,\n+\t__builtin_ia32_compressstoreuhi512_mask,\n+\t__builtin_ia32_compressstoreuqi256_mask,\n+\t__builtin_ia32_compressstoreuqi128_mask,\n+\t__builtin_ia32_compressstoreuhi256_mask,\n+\t__builtin_ia32_compressstoreuhi128_mask): New builtins.\n+\tconfig/i386/i386.c (ix86_init_mmx_sse_builtins): Create special args\n+\tarray for flags2.\n+\t(ix86_expand_special_args_builtin): Handle new types.\n+\t(s4fma_expand): Handle new builtin array.\n+\tconfig/i386/immintrin.h: Include new headers.\n+\tconfig/i386/sse.md (VI12_AVX512VLBW): New iterator.\n+\t(compress<mode>_mask, compressstore<mode>_mask): New patterns.\n+\n 2017-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Formatting"}, {"sha": "70c3257342a728b2a927214f3562f909cf1e7358", "filename": "gcc/config/i386/avx512vbmi2intrin.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -0,0 +1,92 @@\n+/* Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512vbmi2intrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef __AVX512VBMI2INTRIN_H_INCLUDED\n+#define __AVX512VBMI2INTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VBMI2__) || !defined(__AVX512BW__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vbmi2,avx512bw\")\n+#define __DISABLE_AVX512VBMI2BW__\n+#endif /* __AVX512VBMI2BW__ */\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_compress_epi8 (__m512i __A, __mmask64 __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_compressqi512_mask ((__v64qi)__C,\n+\t\t\t\t\t\t(__v64qi)__A, (__mmask64)__B);\n+}\n+\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_compress_epi8 (__mmask64 __A, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_compressqi512_mask ((__v64qi)__B,\n+\t\t\t(__v64qi)_mm512_setzero_si512 (), (__mmask64)__A);\n+}\n+\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_compressstoreu_epi8 (void * __A, __mmask64 __B, __m512i __C)\n+{\n+  __builtin_ia32_compressstoreuqi512_mask ((__v64qi *) __A, (__v64qi) __C,\n+\t\t\t\t\t\t\t(__mmask64) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_compress_epi16 (__m512i __A, __mmask32 __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_compresshi512_mask ((__v32hi)__C,\n+\t\t\t\t\t\t(__v32hi)__A, (__mmask32)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_compress_epi16 (__mmask32 __A, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_compresshi512_mask ((__v32hi)__B,\n+\t\t\t(__v32hi)_mm512_setzero_si512 (), (__mmask32)__A);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_compressstoreu_epi16 (void * __A, __mmask32 __B, __m512i __C)\n+{\n+  __builtin_ia32_compressstoreuhi512_mask ((__v32hi *) __A, (__v32hi) __C,\n+\t\t\t\t\t\t\t(__mmask32) __B);\n+}\n+#ifdef __DISABLE_AVX512VBMI2BW__\n+#undef __DISABLE_AVX512VBMI2BW__\n+\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VBMI2BW__ */\n+\n+#endif /* __AVX512VBMI2INTRIN_H_INCLUDED */"}, {"sha": "6d8bbb628583632a5f942c41a10d95b7a711ad65", "filename": "gcc/config/i386/avx512vbmi2vlintrin.h", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -0,0 +1,150 @@\n+/* Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512vbmi2vlintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512VBMI2VLINTRIN_H_INCLUDED\n+#define _AVX512VBMI2VLINTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VL__) || !defined(__AVX512VBMI2__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vbmi2,avx512vl\")\n+#define __DISABLE_AVX512VBMI2VL__\n+#endif /* __AVX512VBMIVL__ */\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_compress_epi8 (__m128i __A, __mmask16 __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_compressqi128_mask ((__v16qi)__C,\n+\t\t\t\t\t\t(__v16qi)__A, (__mmask16)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_compress_epi8 (__mmask16 __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_compressqi128_mask ((__v16qi) __B,\n+\t\t\t(__v16qi) _mm_setzero_si128 (), (__mmask16) __A);\n+}\n+\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_compressstoreu_epi16 (void * __A, __mmask16 __B, __m256i __C)\n+{\n+  __builtin_ia32_compressstoreuhi256_mask ((__v16hi *) __A, (__v16hi) __C,\n+\t\t\t\t\t\t\t(__mmask16) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_compress_epi16 (__m128i __A, __mmask8 __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_compresshi128_mask ((__v8hi)__C, (__v8hi)__A,\n+\t\t\t\t\t\t\t\t(__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_compress_epi16 (__mmask8 __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_compresshi128_mask ((__v8hi) __B,\n+\t\t\t\t(__v8hi) _mm_setzero_si128 (), (__mmask8) __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_compress_epi16 (__m256i __A, __mmask16 __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_compresshi256_mask ((__v16hi)__C,\n+\t\t\t\t\t\t(__v16hi)__A, (__mmask16)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_compress_epi16 (__mmask16 __A, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_compresshi256_mask ((__v16hi) __B,\n+\t\t\t(__v16hi) _mm256_setzero_si256 (), (__mmask16) __A);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_compressstoreu_epi8 (void * __A, __mmask16 __B, __m128i __C)\n+{\n+  __builtin_ia32_compressstoreuqi128_mask ((__v16qi *) __A, (__v16qi) __C,\n+\t\t\t\t\t\t\t(__mmask16) __B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_compressstoreu_epi16 (void * __A, __mmask8 __B, __m128i __C)\n+{\n+  __builtin_ia32_compressstoreuhi128_mask ((__v8hi *) __A, (__v8hi) __C,\n+\t\t\t\t\t\t\t(__mmask8) __B);\n+}\n+#ifdef __DISABLE_AVX512VBMI2VL__\n+#undef __DISABLE_AVX512VBMI2VL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VBMIVL__ */\n+\n+#if !defined(__AVX512VL__) || !defined(__AVX512VBMI2__) || \\\n+    !defined(__AVX512BW__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vbmi2,avx512vl,avx512bw\")\n+#define __DISABLE_AVX512VBMI2VLBW__\n+#endif /* __AVX512VBMIVLBW__ */\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_compress_epi8 (__m256i __A, __mmask32 __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_compressqi256_mask ((__v32qi)__C,\n+\t\t\t\t\t\t(__v32qi)__A, (__mmask32)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_compress_epi8 (__mmask32 __A, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_compressqi256_mask ((__v32qi) __B,\n+\t\t\t(__v32qi) _mm256_setzero_si256 (), (__mmask32) __A);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_compressstoreu_epi8 (void * __A, __mmask32 __B, __m256i __C)\n+{\n+  __builtin_ia32_compressstoreuqi256_mask ((__v32qi *) __A, (__v32qi) __C,\n+\t\t\t\t\t\t\t(__mmask32) __B);\n+}\n+\n+#ifdef __DISABLE_AVX512VBMI2VLBW__\n+#undef __DISABLE_AVX512VBMI2VLBW__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VBMIVLBW__ */\n+\n+#endif /* _AVX512VBMIVLINTRIN_H_INCLUDED */"}, {"sha": "0e00351a3c72b63e88a6f8a5369f0c5bbc0fb847", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -30162,8 +30162,10 @@ BDESC_VERIFYS (IX86_BUILTIN__BDESC_ROUND_ARGS_FIRST,\n \t       IX86_BUILTIN__BDESC_ARGS_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_ARGS2_FIRST,\n \t       IX86_BUILTIN__BDESC_ROUND_ARGS_LAST, 1);\n-BDESC_VERIFYS (IX86_BUILTIN__BDESC_MPX_FIRST,\n+BDESC_VERIFYS (IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST,\n \t       IX86_BUILTIN__BDESC_ARGS2_LAST, 1);\n+BDESC_VERIFYS (IX86_BUILTIN__BDESC_MPX_FIRST,\n+\t       IX86_BUILTIN__BDESC_SPECIAL_ARGS2_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_MPX_CONST_FIRST,\n \t       IX86_BUILTIN__BDESC_MPX_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_MULTI_ARG_FIRST,\n@@ -30223,12 +30225,31 @@ ix86_init_mmx_sse_builtins (void)\n        i < ARRAY_SIZE (bdesc_args2);\n        i++, d++)\n     {\n+      BDESC_VERIFY (d->code, IX86_BUILTIN__BDESC_ARGS2_FIRST, i);\n       if (d->name == 0)\n \tcontinue;\n \n       ftype = (enum ix86_builtin_func_type) d->flag;\n       def_builtin_const2 (d->mask, d->name, ftype, d->code);\n     }\n+  BDESC_VERIFYS (IX86_BUILTIN__BDESC_ARGS2_LAST,\n+\t\t IX86_BUILTIN__BDESC_ARGS2_FIRST,\n+\t\t ARRAY_SIZE (bdesc_args2) - 1);\n+  \n+  for (i = 0, d = bdesc_special_args2;\n+       i < ARRAY_SIZE (bdesc_special_args2);\n+       i++, d++)\n+    {\n+      BDESC_VERIFY (d->code, IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST, i);\n+       if (d->name == 0)\n+\t continue;\n+\n+\tftype = (enum ix86_builtin_func_type) d->flag;\n+\tdef_builtin2 (d->mask, d->name, ftype, d->code);\n+    }\n+  BDESC_VERIFYS (IX86_BUILTIN__BDESC_SPECIAL_ARGS2_LAST,\n+\t\t IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST,\n+\t\t ARRAY_SIZE (bdesc_special_args2) - 1);\n \n   /* Add all builtins with rounding.  */\n   for (i = 0, d = bdesc_round_args;\n@@ -34804,6 +34825,12 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case VOID_FTYPE_PV16SI_V16SI_UHI:\n     case VOID_FTYPE_PV8SI_V8SI_UQI:\n     case VOID_FTYPE_PV4SI_V4SI_UQI:\n+    case VOID_FTYPE_PV64QI_V64QI_UDI:\n+    case VOID_FTYPE_PV32HI_V32HI_USI:\n+    case VOID_FTYPE_PV32QI_V32QI_USI:\n+    case VOID_FTYPE_PV16QI_V16QI_UHI:\n+    case VOID_FTYPE_PV16HI_V16HI_UHI:\n+    case VOID_FTYPE_PV8HI_V8HI_UQI:\n       switch (icode)\n \t{\n \t/* These builtins and instructions require the memory\n@@ -37403,6 +37430,14 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t  }\n     }\n \n+  if (fcode >= IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST\n+      && fcode <= IX86_BUILTIN__BDESC_SPECIAL_ARGS2_LAST)\n+    {\n+      i = fcode - IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST;\n+      return ix86_expand_special_args_builtin (bdesc_special_args2 + i, exp,\n+\t\t\t\t\t       target);\n+    }\n+\n   if (fcode >= IX86_BUILTIN__BDESC_COMI_FIRST\n       && fcode <= IX86_BUILTIN__BDESC_COMI_LAST)\n     {"}, {"sha": "2cafd7561d9827d94715a9c0602840aa19700983", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -74,6 +74,10 @@\n \n #include <avx512vpopcntdqintrin.h>\n \n+#include <avx512vbmi2intrin.h>\n+\n+#include <avx512vbmi2vlintrin.h>\n+\n #include <shaintrin.h>\n \n #include <lzcntintrin.h>"}, {"sha": "5e67ea5fe38e9a9a785f84ee2a80b19222981eb9", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -194,6 +194,12 @@\n   [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")\n    V32HI (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")])\n \n+;; Same iterator, but without supposed TARGET_AVX512BW\n+(define_mode_iterator VI12_AVX512VLBW\n+  [(V64QI \"TARGET_AVX512BW\") (V16QI \"TARGET_AVX512VL\")\n+   (V32QI \"TARGET_AVX512VL && TARGET_AVX512BW\") (V32HI \"TARGET_AVX512BW\")\n+   (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")])\n+\n (define_mode_iterator VI1_AVX512VL\n   [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")])\n \n@@ -19298,6 +19304,19 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"compress<mode>_mask\"\n+  [(set (match_operand:VI12_AVX512VLBW 0 \"register_operand\" \"=v\")\n+\t(unspec:VI12_AVX512VLBW\n+\t  [(match_operand:VI12_AVX512VLBW 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI12_AVX512VLBW 2 \"vector_move_operand\" \"0C\")\n+\t   (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")]\n+\t  UNSPEC_COMPRESS))]\n+  \"TARGET_AVX512VBMI2\"\n+  \"vpcompress<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<avx512>_compressstore<mode>_mask\"\n   [(set (match_operand:VI48F 0 \"memory_operand\" \"=m\")\n \t(unspec:VI48F\n@@ -19312,6 +19331,20 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"compressstore<mode>_mask\"\n+  [(set (match_operand:VI12_AVX512VLBW 0 \"memory_operand\" \"=m\")\n+\t(unspec:VI12_AVX512VLBW\n+\t  [(match_operand:VI12_AVX512VLBW 1 \"register_operand\" \"x\")\n+\t   (match_dup 0)\n+\t   (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")]\n+\t  UNSPEC_COMPRESS_STORE))]\n+  \"TARGET_AVX512VBMI2\"\n+  \"vpcompress<ssemodesuffix>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"memory\" \"store\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"<avx512>_expand<mode>_maskz\"\n   [(set (match_operand:VI48F 0 \"register_operand\")\n \t(unspec:VI48F"}, {"sha": "89f180b52ecc0e84ac424d5db4d07ca5c1992d20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -1,3 +1,16 @@\n+2017-11-16  Julia Koval  <julia.koval@intel.com>\n+\n+\tgcc.target/i386/avx512-check.h: Handle AVX512VBMI2 bit.\n+\tgcc.target/i386/avx512f-vpcompressb-1.c: New test.\n+\tgcc.target/i386/avx512f-vpcompressb-2.c: Ditto.\n+\tgcc.target/i386/avx512f-vpcompressw-1.c: Ditto.\n+\tgcc.target/i386/avx512f-vpcompressw-2.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpcompressb-1.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpcompressb-2.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpcompressw-1.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpcompressw-2.c: Ditto.\n+\tgcc.target/i386/i386.exp (check_effective_target_avx512vbmi2): New.\n+\n 2017-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/gomp/declare-simd-1.c (f9): Remove."}, {"sha": "5456dd50deadd02b9cc31e60eb463623d9a30147", "filename": "gcc/testsuite/gcc.target/i386/avx512-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -77,6 +77,9 @@ main ()\n #endif\n #ifdef GFNI\n       && (ecx & bit_GFNI)\n+#endif\n+#ifdef AVX512VBMI2\n+      && (ecx & bit_AVX512VBMI2)\n #endif\n       && avx512f_os_support ())\n     {"}, {"sha": "c449d9536b9f71ed90cc42739260716c8616362c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcompressb-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressb-1.c?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mavx512vbmi2 -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcompressb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+int *p;\n+volatile __m512i x;\n+volatile __mmask64 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_mask_compress_epi8 (x, m, x);\n+  x = _mm512_maskz_compress_epi8 (m, x);\n+\n+  _mm512_mask_compressstoreu_epi8 (p, m, x);\n+}"}, {"sha": "bd1fb451413c3ec9c3701eff848f611ffd34bb13", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcompressb-2.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressb-2.c?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+#include <x86intrin.h>\n+\n+static void\n+CALC (char *s, char *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & ((long long)1 << i))\n+\tr[k++] = s[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) s, res1, res2;\n+  char res3[SIZE];\n+  MASK_TYPE compressed_mask, mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+  long long i, mask_bit_count, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 12345 * (i + 200) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_compress_epi8) (res1.x, mask, s.x);\n+  res2.x = INTRINSIC (_maskz_compress_epi8) (mask, s.x);\n+  INTRINSIC (_mask_compressstoreu_epi8) (res3, mask, s.x);\n+\n+  // Swt\n+  if (AVX512F_LEN == 512)\n+    mask_bit_count = __popcntq(mask);\n+  else\n+    mask_bit_count = __popcntd(mask);\n+  compressed_mask = ((long long)1 << mask_bit_count) - 1;\n+  CALC (s.a, res_ref, mask);\n+\n+  MASK_MERGE (i_b) (res_ref, compressed_mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, compressed_mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, compressed_mask, SIZE);\n+  if (checkVc (res3, res_ref, SIZE))\n+    abort ();\n+}"}, {"sha": "2da92a4758bc45ec8025185ecf1e4b80e8c2f57b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcompressw-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressw-1.c?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mavx512vbmi2 -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcompressw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+int *p;\n+volatile __m512i x;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_mask_compress_epi16 (x, m, x);\n+  x = _mm512_maskz_compress_epi16 (m, x);\n+\n+  _mm512_mask_compressstoreu_epi16 (p, m, x);\n+}"}, {"sha": "20da53944fbb86bcc39dd36496f866c1f22e5815", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcompressw-2.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcompressw-2.c?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+#include <x86intrin.h>\n+\n+static void\n+CALC (short *s, short *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & ((long long)1 << i))\n+\tr[k++] = s[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s, res1, res2;\n+  short res3[SIZE];\n+  MASK_TYPE compressed_mask, mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+  int i, mask_bit_count, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 12345 * (i + 200) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_compress_epi16) (res1.x, mask, s.x);\n+  res2.x = INTRINSIC (_maskz_compress_epi16) (mask, s.x);\n+  INTRINSIC (_mask_compressstoreu_epi16) (res3, mask, s.x);\n+\n+  mask_bit_count = __popcntd (mask);\n+  compressed_mask = ((long long)1 << mask_bit_count) - 1;\n+  CALC (s.a, res_ref, mask);\n+\n+  MASK_MERGE (i_w) (res_ref, compressed_mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, compressed_mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, compressed_mask, SIZE);\n+  if (checkVs (res3, res_ref, SIZE))\n+    abort ();\n+}"}, {"sha": "7e3aef9c782f7ec06dab208aa37c986e1d8899ce", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcompressb-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressb-1.c?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512vbmi2 -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcompressb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+int *p;\n+volatile __m256i x1;\n+volatile __m128i x2;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  x1 = _mm256_mask_compress_epi8 (x1, m32, x1);\n+  x2 = _mm_mask_compress_epi8 (x2, m16, x2);\n+\n+  x1 = _mm256_maskz_compress_epi8 (m32, x1);\n+  x2 = _mm_maskz_compress_epi8 (m16, x2);\n+\n+  _mm256_mask_compressstoreu_epi8 (p, m32, x1);\n+  _mm_mask_compressstoreu_epi8 (p, m16, x2);\n+}"}, {"sha": "e6207721cbdce565626d82469eab5b6995460238", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcompressb-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressb-2.c?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcompressb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcompressb-2.c\""}, {"sha": "8e819ba85bc65eab9c97d59fa033a8769cbb55b6", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcompressw-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressw-1.c?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512vbmi2 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcompressw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcompressw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+int *p;\n+volatile __m256i x1;\n+volatile __m128i x2;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  x1 = _mm256_mask_compress_epi16 (x1, m16, x1);\n+  x2 = _mm_mask_compress_epi16 (x2, m8, x2);\n+\n+  x1 = _mm256_maskz_compress_epi16 (m16, x1);\n+  x2 = _mm_maskz_compress_epi16 (m8, x2);\n+\n+  _mm256_mask_compressstoreu_epi16 (p, m16, x1);\n+  _mm_mask_compressstoreu_epi16 (p, m8, x2);\n+}"}, {"sha": "012ac10393d7da19607b49a7488236567a5cc984", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcompressw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcompressw-2.c?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcompressw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcompressw-2.c\""}, {"sha": "877de0a83e820abe06837137e867207bdd23717b", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cca3ca7d4ac9971eb76127316ab1e75bccbb23/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "patch": "@@ -436,6 +436,23 @@ proc check_effective_target_gfni { } {\n     } \"-mgfni\" ]\n }\n \n+# Return 1 if avx512vbmi2 instructions can be compiled.\n+proc check_effective_target_avx512vbmi2 { } {\n+    return [check_no_compiler_messages avx512vbmi2 object {\n+        typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n+\ttypedef unsigned long long __mmask16;\n+\n+\t__v16qi\n+\t_mm_mask_compress_epi8 (__v16qi __A, __mmask16 __B, __v16qi __C)\n+\t{\n+  \t\treturn (__v16qi) __builtin_ia32_compressqi128_mask((__v16qi)__C,\n+\t\t\t\t\t\t\t\t   (__v16qi)__A,\n+\t\t\t\t\t\t\t\t   (__mmask16)__B);\n+\t}\n+    } \"-mavx512vbmi2 -mavx512vl\" ]\n+}\n+\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}]}