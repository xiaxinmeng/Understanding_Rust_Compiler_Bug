{"sha": "fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5ZGQ4M2I0MTM0NmZhNjY3YzY5M2U1ZGQxMGRjOWZlODBlOTNiMw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-14T20:38:35Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-19T14:36:37Z"}, "message": "ProjectionType this is a special TyTy initial boiler plate\n\nThis is a special type in the rust implementation which contains all the\ninfo to generate the relevant declarations to compile trait items which\nmight be fully optional.", "tree": {"sha": "713b4c1681cc29a49ad43935b597d05629fc6e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/713b4c1681cc29a49ad43935b597d05629fc6e40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e74f08c141eca935005d45840f2b77acbf63531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e74f08c141eca935005d45840f2b77acbf63531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e74f08c141eca935005d45840f2b77acbf63531"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "8a3d413f3bf89a0c90aaab8463980b0742facd5d", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -338,6 +338,8 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::ProjectionType &) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ParamType &param) override\n   {\n     param.resolve ()->accept_vis (*this);"}, {"sha": "1a5747ae61c82828e027a4bed758af8b3e76d205", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -50,6 +50,8 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::ProjectionType &) override { gcc_unreachable (); }\n+\n   void visit (TyTy::TupleType &type) override\n   {\n     if (type.num_fields () == 0)"}, {"sha": "9e0450e8882f1ee390448686354fd54d6a9e5a81", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -55,6 +55,8 @@ class ConstFoldType : public TyTy::TyVisitor\n \n   void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::ProjectionType &) override { gcc_unreachable (); }\n+\n   void visit (TyTy::TupleType &type) override\n   {\n     if (type.num_fields () == 0)"}, {"sha": "c7ea029a68fc1b08e4b2fd9a22d6e0735dc2e94a", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -108,6 +108,7 @@ class SubstMapper : public TyTy::TyVisitor\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n   void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n+  void visit (TyTy::ProjectionType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapper (HirId ref, HIR::GenericArgs *generics, Location locus)\n@@ -191,6 +192,7 @@ class SubstMapperInternal : public TyTy::TyVisitor\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n   void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n+  void visit (TyTy::ProjectionType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapperInternal (HirId ref, TyTy::SubstitutionArgumentMappings &mappings)\n@@ -248,6 +250,7 @@ class SubstMapperFromExisting : public TyTy::TyVisitor\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n   void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n+  void visit (TyTy::ProjectionType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapperFromExisting (TyTy::BaseType *concrete, TyTy::BaseType *receiver)\n@@ -298,6 +301,7 @@ class GetUsedSubstArgs : public TyTy::TyVisitor\n   void visit (TyTy::StrType &) override {}\n   void visit (TyTy::NeverType &) override {}\n   void visit (TyTy::PlaceholderType &) override {}\n+  void visit (TyTy::ProjectionType &) override {}\n \n private:\n   GetUsedSubstArgs () : args (TyTy::SubstitutionArgumentMappings::error ()) {}"}, {"sha": "4e74e598905068151dc5aa1fa10d9a58f31d66f0", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -56,6 +56,7 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (StrType &) override { gcc_unreachable (); }\n   void visit (NeverType &) override { gcc_unreachable (); }\n   void visit (PlaceholderType &) override { gcc_unreachable (); }\n+  void visit (ProjectionType &) override { gcc_unreachable (); }\n \n   // tuple-structs\n   void visit (ADTType &type) override;\n@@ -106,6 +107,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n   void visit (StrType &) override { gcc_unreachable (); }\n   void visit (NeverType &) override { gcc_unreachable (); }\n   void visit (PlaceholderType &) override { gcc_unreachable (); }\n+  void visit (ProjectionType &) override { gcc_unreachable (); }\n \n   // FIXME\n   void visit (FnPtr &type) override { gcc_unreachable (); }"}, {"sha": "51c97912b48c0e2021f60ad4bf0be1bdefd94bc7", "filename": "gcc/rust/typecheck/rust-tyty-cast.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -307,6 +307,17 @@ class BaseCastRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (ProjectionType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"invalid cast [%s] to [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseCastRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),"}, {"sha": "680108410c30ef9fef3dd7e8f301326e42ee1f64", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -337,6 +337,22 @@ class BaseCmp : public TyConstVisitor\n       }\n   }\n \n+  virtual void visit (const ProjectionType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n+\n   virtual void visit (const PlaceholderType &type) override\n   {\n     // it is ok for types to can eq to a placeholder"}, {"sha": "d30be7fd612af633396b83d56b07ba75d39f725f", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -307,6 +307,17 @@ class BaseCoercionRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (ProjectionType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseCoercionRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),"}, {"sha": "ca4849b87ef567ceabfb9841932aa915b8cc271c", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -329,6 +329,17 @@ class BaseRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (ProjectionType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),"}, {"sha": "0e9a58bdfbbe2651d12e6d01c5611ebb2ca8808b", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -47,6 +47,7 @@ class TyVisitor\n   virtual void visit (StrType &type) = 0;\n   virtual void visit (NeverType &type) = 0;\n   virtual void visit (PlaceholderType &type) = 0;\n+  virtual void visit (ProjectionType &type) = 0;\n };\n \n class TyConstVisitor\n@@ -72,6 +73,7 @@ class TyConstVisitor\n   virtual void visit (const StrType &type) = 0;\n   virtual void visit (const NeverType &type) = 0;\n   virtual void visit (const PlaceholderType &type) = 0;\n+  virtual void visit (const ProjectionType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "ca4b3b890ca03fc0145cebd1a0287c6fd97f9620", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -2015,6 +2015,8 @@ NeverType::clone () const\n   return new NeverType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n+// placeholder type\n+\n void\n PlaceholderType::accept_vis (TyVisitor &vis)\n {\n@@ -2067,6 +2069,61 @@ PlaceholderType::clone () const\n   return new PlaceholderType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n+// Projection type\n+\n+void\n+ProjectionType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ProjectionType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+ProjectionType::as_string () const\n+{\n+  return \"<Projection>\";\n+}\n+\n+BaseType *\n+ProjectionType::unify (BaseType *other)\n+{\n+  gcc_unreachable ();\n+  return nullptr;\n+}\n+\n+BaseType *\n+ProjectionType::coerce (BaseType *other)\n+{\n+  gcc_unreachable ();\n+  return nullptr;\n+}\n+\n+BaseType *\n+ProjectionType::cast (BaseType *other)\n+{\n+  gcc_unreachable ();\n+  return nullptr;\n+}\n+\n+bool\n+ProjectionType::can_eq (const BaseType *other, bool emit_errors) const\n+{\n+  gcc_unreachable ();\n+  return false;\n+}\n+\n+BaseType *\n+ProjectionType::clone () const\n+{\n+  return new ProjectionType (get_ref (), get_ty_ref (), base, trait, item,\n+\t\t\t     get_combined_refs ());\n+}\n+\n // rust-tyty-call.h\n \n void"}, {"sha": "f01d6f8c74813ec9ddff6108bf3bd17e1cc9bb75", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9dd83b41346fa667c693e5dd10dc9fe80e93b3/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=fe9dd83b41346fa667c693e5dd10dc9fe80e93b3", "patch": "@@ -54,6 +54,7 @@ enum TypeKind\n   ISIZE,\n   NEVER,\n   PLACEHOLDER,\n+  PROJECTION,\n   // there are more to add...\n   ERROR\n };\n@@ -122,6 +123,9 @@ class TypeKindFormat\n       case TypeKind::PLACEHOLDER:\n \treturn \"Placeholder\";\n \n+      case TypeKind::PROJECTION:\n+\treturn \"Projection\";\n+\n       case TypeKind::ERROR:\n \treturn \"ERROR\";\n       }\n@@ -1705,6 +1709,44 @@ class PlaceholderType : public BaseType\n   bool is_unit () const override { return true; }\n };\n \n+class ProjectionType : public BaseType\n+{\n+public:\n+  ProjectionType (HirId ref, TyVar base, Resolver::TraitReference *trait,\n+\t\t  DefId item, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::PROJECTION, refs), base (base),\n+      trait (trait), item (item)\n+  {}\n+\n+  ProjectionType (HirId ref, HirId ty_ref, TyVar base,\n+\t\t  Resolver::TraitReference *trait, DefId item,\n+\t\t  std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::PROJECTION, refs), base (base),\n+      trait (trait), item (item)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n+\n+  std::string as_string () const override;\n+\n+  BaseType *unify (BaseType *other) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  BaseType *coerce (BaseType *other) override;\n+  BaseType *cast (BaseType *other) override;\n+\n+  BaseType *clone () const final override;\n+\n+  std::string get_name () const override final { return as_string (); }\n+\n+  bool is_unit () const override { return false; }\n+\n+private:\n+  TyVar base;\n+  Resolver::TraitReference *trait;\n+  DefId item;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}]}