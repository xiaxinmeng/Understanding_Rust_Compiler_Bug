{"sha": "fe0134355812ffb0ec6db616ab941665d44271a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwMTM0MzU1ODEyZmZiMGVjNmRiNjE2YWI5NDE2NjVkNDQyNzFhNA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-10-13T12:48:03Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-10-13T12:48:03Z"}, "message": "arm-protos.h (arm_load_pic_register): Update prototype.\n\n\t* config/arm/arm-protos.h (arm_load_pic_register): Update prototype.\n\t* config/arm/arm.c (thumb_find_work_register): Update comments.\n\t(arm_load_pic_register): Add argument for scratch register.\n\t(arm_expand_prologue, thumb_expand_prologue): Pass extra argument.\n\t* config/arm/arm.md (builtin_setjmp_receiver): Ditto.\n\nFrom-SVN: r88982", "tree": {"sha": "9e1ec55997d4c7d59de1381ab1cb751f01a7c79d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e1ec55997d4c7d59de1381ab1cb751f01a7c79d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe0134355812ffb0ec6db616ab941665d44271a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0134355812ffb0ec6db616ab941665d44271a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0134355812ffb0ec6db616ab941665d44271a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0134355812ffb0ec6db616ab941665d44271a4/comments", "author": null, "committer": null, "parents": [{"sha": "f0ec2b9a2955ef7e8009aaef727600cd28b6fc12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ec2b9a2955ef7e8009aaef727600cd28b6fc12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ec2b9a2955ef7e8009aaef727600cd28b6fc12"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "57bdab3da2e7182dab9e3db6281915aa08e263ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0134355812ffb0ec6db616ab941665d44271a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0134355812ffb0ec6db616ab941665d44271a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe0134355812ffb0ec6db616ab941665d44271a4", "patch": "@@ -1,3 +1,11 @@\n+2004-10-13  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/arm-protos.h (arm_load_pic_register): Update prototype.\n+\t* config/arm/arm.c (thumb_find_work_register): Update comments.\n+\t(arm_load_pic_register): Add argument for scratch register.\n+\t(arm_expand_prologue, thumb_expand_prologue): Pass extra argument.\n+\t* config/arm/arm.md (builtin_setjmp_receiver): Ditto.\n+\n 2004-10-13  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-data-ref.c: Fix comment typos.\n@@ -30,7 +38,7 @@\n \t* gcse.c (remove_reachable_equiv_notes): Use ei_container().\n \n 2004-10-11  Sebastian Pop  <pop@cri.ensmp.fr>\n- \n+\n \t* Makefile.in (tree-ssa-loop-niter.o): Depends on tree-data-ref.h.\n \t* cfgloop.c (initialize_loops_parallel_p): New.\n \t(flow_loops_find): Initialize the parallel_p field to true for all "}, {"sha": "44a259fd12a01a83439c7fe91bb32c6c9a890b70", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0134355812ffb0ec6db616ab941665d44271a4/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0134355812ffb0ec6db616ab941665d44271a4/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=fe0134355812ffb0ec6db616ab941665d44271a4", "patch": "@@ -27,7 +27,7 @@\n extern void arm_override_options (void);\n extern int use_return_insn (int, rtx);\n extern int arm_regno_class (int);\n-extern void arm_load_pic_register (void);\n+extern void arm_load_pic_register (unsigned int);\n extern int arm_volatile_func (void);\n extern const char *arm_output_epilogue (rtx);\n extern void arm_expand_prologue (void);"}, {"sha": "02ee7cad19d2688f250adacba3203668bccd8de8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0134355812ffb0ec6db616ab941665d44271a4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0134355812ffb0ec6db616ab941665d44271a4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=fe0134355812ffb0ec6db616ab941665d44271a4", "patch": "@@ -3023,7 +3023,8 @@ thumb_find_work_register (int live_regs_mask)\n   if (!regs_ever_live[LAST_ARG_REGNUM])\n     return LAST_ARG_REGNUM;\n \n-  /* Look for a pushed register.  */\n+  /* Look for a pushed register.  This is used before the frame pointer is\n+     setup, so r7 is a candidate.  */\n   for (reg = LAST_LO_REGNUM; reg >=0; reg--)\n     if (live_regs_mask & (1 << reg))\n       return reg;\n@@ -3033,10 +3034,11 @@ thumb_find_work_register (int live_regs_mask)\n }\n \n \n-/* Generate code to load the PIC register.  */\n+/* Generate code to load the PIC register.  In thumb mode SCRATCH is a\n+   low register.  */\n \n void\n-arm_load_pic_register (void)\n+arm_load_pic_register (unsigned int scratch)\n {\n #ifndef AOF_ASSEMBLER\n   rtx l1, pic_tmp, pic_tmp2, pic_rtx;\n@@ -3071,12 +3073,9 @@ arm_load_pic_register (void)\n     {\n       if (REGNO (pic_offset_table_rtx) > LAST_LO_REGNUM)\n \t{\n-\t  int reg;\n-\n \t  /* We will have pushed the pic register, so should always be\n \t     able to find a work register.  */\n-\t  reg = thumb_find_work_register (thumb_compute_save_reg_mask ());\n-\t  pic_tmp = gen_rtx_REG (SImode, reg);\n+\t  pic_tmp = gen_rtx_REG (SImode, scratch);\n \t  emit_insn (gen_pic_load_addr_thumb (pic_tmp, pic_rtx));\n \t  emit_insn (gen_movsi (pic_offset_table_rtx, pic_tmp));\n \t}\n@@ -10237,7 +10236,7 @@ arm_expand_prologue (void)\n \n \n   if (flag_pic)\n-    arm_load_pic_register ();\n+    arm_load_pic_register (INVALID_REGNUM);\n \n   /* If we are profiling, make sure no instructions are scheduled before\n      the call to mcount.  Similarly if the user has requested no\n@@ -12964,10 +12963,11 @@ thumb_expand_prologue (void)\n       return;\n     }\n \n+  live_regs_mask = thumb_compute_save_reg_mask ();\n   /* Load the pic register before setting the frame pointer, so we can use r7\n      as a temporary work register.  */\n   if (flag_pic)\n-    arm_load_pic_register ();\n+    arm_load_pic_register (thumb_find_work_register (live_regs_mask));\n \n   offsets = arm_get_frame_offsets ();\n \n@@ -12978,7 +12978,6 @@ thumb_expand_prologue (void)\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n-  live_regs_mask = thumb_compute_save_reg_mask ();\n   amount = offsets->outgoing_args - offsets->saved_regs;\n   if (amount)\n     {"}, {"sha": "6c07a85488363e8fa7e973c25326b7dff5293a42", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0134355812ffb0ec6db616ab941665d44271a4/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0134355812ffb0ec6db616ab941665d44271a4/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=fe0134355812ffb0ec6db616ab941665d44271a4", "patch": "@@ -4459,7 +4459,9 @@\n   \"flag_pic\"\n   \"\n {\n-  arm_load_pic_register ();\n+  /* r3 is clobbered by set/longjmp, so we can use it as a scratch\n+     register.  */\n+  arm_load_pic_register (3);\n   DONE;\n }\")\n "}]}