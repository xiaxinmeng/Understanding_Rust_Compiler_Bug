{"sha": "2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZiZDhhYzc0ZTVkMzA4Y2VjYmUyN2EwYzNjZTVhMDVmMjg3NzBhMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-10-01T17:03:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-10-01T17:03:46Z"}, "message": "pa.c (emit_move_sequence): When making a reference to the data space before reload...\n\n\t* pa.c (emit_move_sequence): When making a reference to the data\n\tspace before reload, emit an insn sequence which is much more\n\tlikely to create \"addil\" instructions rather than \"ldil; add\"\n\tsequences.  Doing so greatly reduces the chance of running into a\n\tHPUX linker bug when compiling kernels.\n\nFrom-SVN: r2296", "tree": {"sha": "509a9826c6be89b48856fb639d1c7a592ea28d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/509a9826c6be89b48856fb639d1c7a592ea28d83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0/comments", "author": null, "committer": null, "parents": [{"sha": "e4e13a012ed49f893fe33cd81266d42b52c03b48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e13a012ed49f893fe33cd81266d42b52c03b48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4e13a012ed49f893fe33cd81266d42b52c03b48"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "7f34d807c544ed99b6be93951387ba277ee95f8c", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0", "patch": "@@ -665,10 +665,12 @@ emit_move_sequence (operands, mode)\n \t\t}\n \t      else\n \t\t{\n-\t\t  rtx temp1 = gen_reg_rtx (mode), temp2 = gen_reg_rtx (mode);\n+\t\t  rtx temp1, temp2 = gen_reg_rtx (mode);\n \n-\t\t  emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t\t      temp1, gen_rtx (HIGH, mode, operand1)));\n+\t\t  /* For 2.4 we could set RTX_UNCHANGING and add a \n+\t\t     REG_EQUAL note for the first insn.  This would \n+\t\t     allow the first insn to be moved out of loops.  */\n+\t\t  temp1 = gen_rtx (HIGH, mode, operand1);\n \t\t  emit_insn (gen_rtx (SET, VOIDmode,\n \t\t\t\t      temp2,\n \t\t\t\t      gen_rtx (PLUS, mode,"}]}