{"sha": "4cdffe3d10fe694b87a4bf6c7dd9cad501df9129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNkZmZlM2QxMGZlNjk0Yjg3YTRiZjZjN2RkOWNhZDUwMWRmOTEyOQ==", "commit": {"author": {"name": "Dirk Mueller", "email": "mueller@gcc.gnu.org", "date": "2007-03-10T17:38:42Z"}, "committer": {"name": "Dirk Mueller", "email": "mueller@gcc.gnu.org", "date": "2007-03-10T17:38:42Z"}, "message": "Wlogical-op-1.c: Remove duplicated part.\n\n2007-03-10  Dirk Mueller  <dmueller@suse.de>\n\n       * gcc.dg/Wlogical-op-1.c: Remove duplicated part.\n       * g++.dg/warn/Wlogical-op-1.C: Remove duplicated part.\n\nFrom-SVN: r122799", "tree": {"sha": "97db729de18f4522ea6a2b666d84483228ed2dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97db729de18f4522ea6a2b666d84483228ed2dbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cdffe3d10fe694b87a4bf6c7dd9cad501df9129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdffe3d10fe694b87a4bf6c7dd9cad501df9129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cdffe3d10fe694b87a4bf6c7dd9cad501df9129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdffe3d10fe694b87a4bf6c7dd9cad501df9129/comments", "author": null, "committer": null, "parents": [{"sha": "36be7cc9af01244799ed682304952b135e4dbbad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36be7cc9af01244799ed682304952b135e4dbbad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36be7cc9af01244799ed682304952b135e4dbbad"}], "stats": {"total": 112, "additions": 10, "deletions": 102}, "files": [{"sha": "f67ab89f86714f5fda974f4daae7984f9d666f96", "filename": "gcc/testsuite/g++.dg/warn/Wlogical-op-1.C", "status": "modified", "additions": 6, "deletions": 51, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdffe3d10fe694b87a4bf6c7dd9cad501df9129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdffe3d10fe694b87a4bf6c7dd9cad501df9129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-1.C?ref=4cdffe3d10fe694b87a4bf6c7dd9cad501df9129", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile}\n // { dg-options \"-Wlogical-op\" }\n \n-enum { a, b };\n+enum { a, b1, b2 };\n \n enum testenum { t1, t2};\n \n@@ -28,65 +28,20 @@ extern testenum testa();\n \n void foo()\n {\n-    if ( f && b )             // { dg-warning \"always evaluate as\" }\n+    if ( f && b2 )            // { dg-warning \"always evaluate as\" }\n           do_something(1);\n-    if ( c && b )             // { dg-warning \"always evaluate as\" }\n+    if ( c && b2 )            // { dg-warning \"always evaluate as\" }\n           do_something(2);\n \n-    if ( b && c == a )        // { dg-bogus \"always evaluate as\" }\n+    if ( b2 && c == a )       // { dg-bogus \"always evaluate as\" }\n           do_something(101);\n     if ( 1 && c )\n           do_something(102);  // { dg-bogus \"always evaluate as\" }\n-    if ( t2 && b )            // { dg-bogus \"always evaluate as\" }\n+    if ( t2 && b2 )           // { dg-bogus \"always evaluate as\" }\n           do_something(103);\n     if ( true && c == a )     // { dg-bogus \"always evaluate as\" }\n           do_something(104);\n-    if ( b && true )          // { dg-bogus \"always evaluate as\" }\n+    if ( b2 && true )         // { dg-bogus \"always evaluate as\" }\n           do_something(105);\n }\n-// { dg-do compile}\n-// { dg-options \"-Winvariant-expr\" }\n-\n-enum { a, b };\n-\n-enum testenum { t1, t2};\n-\n-extern int c;\n-extern bool bool_a, bool_b;\n-\n-template<typename Enum>\n-class QFlags\n-{\n-public:\n-    typedef void **Zero;\n-    int i;\n-    inline QFlags(Enum f) : i(f) {}\n-\n-    inline operator int() const\n-    { return i;}\n-\n-};\n-\n-QFlags<testenum> f(t2);\n-extern void do_something(int);\n-\n-extern testenum testa();\n \n-void foo()\n-{\n-    if ( f && b )             // { dg-warning \"always evaluate as\" }\n-          do_something(1);\n-    if ( c && b )             // { dg-warning \"always evaluate as\" }\n-          do_something(2);\n-\n-    if ( b && c == a )        // { dg-bogus \"always evaluate as\" }\n-          do_something(101);\n-    if ( 1 && c )\n-          do_something(102);  // { dg-bogus \"always evaluate as\" }\n-    if ( t2 && b )            // { dg-bogus \"always evaluate as\" }\n-          do_something(103);\n-    if ( true && c == a )     // { dg-bogus \"always evaluate as\" }\n-          do_something(104);\n-    if ( b && true )          // { dg-bogus \"always evaluate as\" }\n-          do_something(105);\n-}"}, {"sha": "d9687bf09a21fd18d732c93e2b24a7af1fabfaad", "filename": "gcc/testsuite/gcc.dg/Wlogical-op-1.c", "status": "modified", "additions": 4, "deletions": 51, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdffe3d10fe694b87a4bf6c7dd9cad501df9129/gcc%2Ftestsuite%2Fgcc.dg%2FWlogical-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdffe3d10fe694b87a4bf6c7dd9cad501df9129/gcc%2Ftestsuite%2Fgcc.dg%2FWlogical-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWlogical-op-1.c?ref=4cdffe3d10fe694b87a4bf6c7dd9cad501df9129", "patch": "@@ -33,62 +33,15 @@ void foo()\n     if ( b && c == a )      /* { dg-bogus \"always evaluate as\" } */\n           (void)testa();\n \n-    if ( 1 && c )           /* { dg-warning \"always evaluate as\" } */\n+    if ( 1 && c )           /* { dg-bogus \"always evaluate as\" } */\n          (void)testa();\n \n-    if ( t2 && b )          /* { dg-warning \"always evaluate as\" } */\n+    if ( t2 && b )          /* { dg-bogus \"always evaluate as\" } */\n           (void)testa();\n \n-    if ( 0 && c == a )      /* { dg-warning \"always evaluate as\" } */\n+    if ( 0 && c == a )      /* { dg-bogus \"always evaluate as\" } */\n           (void)testa();\n \n-    if ( b && 1 )           /* { dg-warning \"always evaluate as\" } */\n-          (void)testa();\n-}\n-/*\n-   { dg-do compile}\n-   { dg-options \"-Winvariant-expr\" }\n-*/\n-\n-enum { a, ba, b };\n-\n-enum testenum { t1, t2};\n-\n-extern int c;\n-extern char bool_a, bool_b;\n-\n-extern int testa();\n-\n-void foo()\n-{\n-    if ( testa() && b )     /* { dg-warning \"always evaluate as\" } */\n-         (void)testa();\n-\n-    if ( c && b )           /* { dg-warning \"always evaluate as\" } */\n-\t(void)testa();\n-\n-    if ( c && 0x42 )        /* { dg-warning \"always evaluate as\" } */\n-\t(void)testa();\n-\n-    if ( c && 0x42 )        /* { dg-warning \"always evaluate as\" } */\n-\t(void) testa();\n-\n-    if ( c && 0x80 >>6)     /* { dg-warning \"always evaluate as\" } */\n-\t(void)testa();\n-\n-\n-    if ( b && c == a )      /* { dg-bogus \"always evaluate as\" } */\n-          (void)testa();\n-\n-    if ( 1 && c )           /* { dg-warning \"always evaluate as\" } */\n-         (void)testa();\n-\n-    if ( t2 && b )          /* { dg-warning \"always evaluate as\" } */\n-          (void)testa();\n-\n-    if ( 0 && c == a )      /* { dg-warning \"always evaluate as\" } */\n-          (void)testa();\n-\n-    if ( b && 1 )           /* { dg-warning \"always evaluate as\" } */\n+    if ( b && 1 )           /* { dg-bogus \"always evaluate as\" } */\n           (void)testa();\n }"}]}