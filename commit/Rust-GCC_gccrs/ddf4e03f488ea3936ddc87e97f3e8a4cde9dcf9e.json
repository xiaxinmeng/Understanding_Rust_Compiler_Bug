{"sha": "ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmNGUwM2Y0ODhlYTM5MzZkZGM4N2U5N2YzZThhNGNkZTlkY2Y5ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-02T22:23:08Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-02T22:23:08Z"}, "message": "expr.c (write_complex_part): Use simplify_gen_subreg when the submode is at least as large as a word.\n\n        * expr.c (write_complex_part): Use simplify_gen_subreg when the\n        submode is at least as large as a word.\n        (read_complex_part): Likewise.\n\nFrom-SVN: r91664", "tree": {"sha": "34661c965cd2f7f4836dd21e2abf24265c20627b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34661c965cd2f7f4836dd21e2abf24265c20627b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e/comments", "author": null, "committer": null, "parents": [{"sha": "0cb4334ee9bae97eb674ffd6bb26088fe7f25865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb4334ee9bae97eb674ffd6bb26088fe7f25865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb4334ee9bae97eb674ffd6bb26088fe7f25865"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "3bfaa0eead24bad532a2f8b98874fab36cc89eae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e", "patch": "@@ -1,3 +1,9 @@\n+2004-12-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.c (write_complex_part): Use simplify_gen_subreg when the\n+\tsubmode is at least as large as a word.\n+\t(read_complex_part): Likewise.\n+\n 2004-12-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/18532"}, {"sha": "ec25713c5e91ee1a32f5d9c33e3d578fb2cfbea4", "filename": "gcc/expr.c", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ddf4e03f488ea3936ddc87e97f3e8a4cde9dcf9e", "patch": "@@ -2580,16 +2580,32 @@ clear_storage_libcall_fn (int for_call)\n static void\n write_complex_part (rtx cplx, rtx val, bool imag_p)\n {\n+  enum machine_mode cmode;\n+  enum machine_mode imode;\n+  unsigned ibitsize;\n+\n   if (GET_CODE (cplx) == CONCAT)\n-    emit_move_insn (XEXP (cplx, imag_p), val);\n-  else\n     {\n-      enum machine_mode cmode = GET_MODE (cplx);\n-      enum machine_mode imode = GET_MODE_INNER (cmode);\n-      unsigned ibitsize = GET_MODE_BITSIZE (imode);\n+      emit_move_insn (XEXP (cplx, imag_p), val);\n+      return;\n+    }\n \n-      store_bit_field (cplx, ibitsize, imag_p ? ibitsize : 0, imode, val);\n+  cmode = GET_MODE (cplx);\n+  imode = GET_MODE_INNER (cmode);\n+  ibitsize = GET_MODE_BITSIZE (imode);\n+\n+  /* If the sub-object is at least word sized, then we know that subregging\n+     will work.  This special case is important, since store_bit_field\n+     wants to operate on integer modes, and there's rarely an OImode to\n+     correspond to TCmode.  */\n+  if (ibitsize >= BITS_PER_WORD)\n+    {\n+      rtx part = simplify_gen_subreg (imode, cplx, cmode,\n+\t\t\t\t      imag_p ? GET_MODE_SIZE (imode) : 0);\n+      emit_move_insn (part, val);\n     }\n+  else\n+    store_bit_field (cplx, ibitsize, imag_p ? ibitsize : 0, imode, val);\n }\n \n /* Extract one of the components of the complex value CPLX.  Extract the\n@@ -2620,6 +2636,18 @@ read_complex_part (rtx cplx, bool imag_p)\n \t}\n     }\n \n+  /* If the sub-object is at least word sized, then we know that subregging\n+     will work.  This special case is important, since extract_bit_field\n+     wants to operate on integer modes, and there's rarely an OImode to\n+     correspond to TCmode.  */\n+  if (ibitsize >= BITS_PER_WORD)\n+    {\n+      rtx ret = simplify_gen_subreg (imode, cplx, cmode,\n+\t\t\t\t     imag_p ? GET_MODE_SIZE (imode) : 0);\n+      gcc_assert (ret != NULL);\n+      return ret;\n+    }\n+\n   return extract_bit_field (cplx, ibitsize, imag_p ? ibitsize : 0,\n \t\t\t    true, NULL_RTX, imode, imode);\n }"}]}