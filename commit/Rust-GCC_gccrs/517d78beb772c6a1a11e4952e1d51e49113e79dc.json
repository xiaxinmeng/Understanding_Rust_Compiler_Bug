{"sha": "517d78beb772c6a1a11e4952e1d51e49113e79dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE3ZDc4YmViNzcyYzZhMWExMWU0OTUyZTFkNTFlNDkxMTNlNzlkYw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2015-01-11T22:00:06Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2015-01-11T22:00:06Z"}, "message": "re PR fortran/63733 ([OOP]  wrong resolution for OPERATOR generics)\n\n2015-01-11  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/63733\n\t* interface.c (gfc_extend_expr): Look for type-bound operators before\n\tnon-typebound ones.\n\n2015-01-11  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/63733\n\t* gfortran.dg/typebound_operator_20.f90: New.\n\nFrom-SVN: r219440", "tree": {"sha": "fde48c9c70d6e157f37c7edee1084a3f26a10b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fde48c9c70d6e157f37c7edee1084a3f26a10b8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/517d78beb772c6a1a11e4952e1d51e49113e79dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517d78beb772c6a1a11e4952e1d51e49113e79dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/517d78beb772c6a1a11e4952e1d51e49113e79dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517d78beb772c6a1a11e4952e1d51e49113e79dc/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34d453f05d09ff166db25491a6901a7a40fba5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34d453f05d09ff166db25491a6901a7a40fba5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34d453f05d09ff166db25491a6901a7a40fba5b"}], "stats": {"total": 157, "additions": 108, "deletions": 49}, "files": [{"sha": "5af89b9752edc786f874920b6f6dba2a1f6ce12d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517d78beb772c6a1a11e4952e1d51e49113e79dc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517d78beb772c6a1a11e4952e1d51e49113e79dc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=517d78beb772c6a1a11e4952e1d51e49113e79dc", "patch": "@@ -1,3 +1,9 @@\n+2015-01-11  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/63733\n+\t* interface.c (gfc_extend_expr): Look for type-bound operators before\n+\tnon-typebound ones.\n+\n 2015-01-11  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/58023"}, {"sha": "dd3ad2a0cd217976da13f27209fdd7e983aa7243", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 44, "deletions": 49, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517d78beb772c6a1a11e4952e1d51e49113e79dc/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517d78beb772c6a1a11e4952e1d51e49113e79dc/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=517d78beb772c6a1a11e4952e1d51e49113e79dc", "patch": "@@ -3720,6 +3720,8 @@ gfc_extend_expr (gfc_expr *e)\n   gfc_user_op *uop;\n   gfc_intrinsic_op i;\n   const char *gname;\n+  gfc_typebound_proc* tbo;\n+  gfc_expr* tb_base;\n \n   sym = NULL;\n \n@@ -3736,6 +3738,48 @@ gfc_extend_expr (gfc_expr *e)\n \n   i = fold_unary_intrinsic (e->value.op.op);\n \n+  /* See if we find a matching type-bound operator.  */\n+  if (i == INTRINSIC_USER)\n+    tbo = matching_typebound_op (&tb_base, actual,\n+\t\t\t\t  i, e->value.op.uop->name, &gname);\n+  else\n+    switch (i)\n+      {\n+#define CHECK_OS_COMPARISON(comp) \\\n+  case INTRINSIC_##comp: \\\n+  case INTRINSIC_##comp##_OS: \\\n+    tbo = matching_typebound_op (&tb_base, actual, \\\n+\t\t\t\t INTRINSIC_##comp, NULL, &gname); \\\n+    if (!tbo) \\\n+      tbo = matching_typebound_op (&tb_base, actual, \\\n+\t\t\t\t   INTRINSIC_##comp##_OS, NULL, &gname); \\\n+    break;\n+\tCHECK_OS_COMPARISON(EQ)\n+\tCHECK_OS_COMPARISON(NE)\n+\tCHECK_OS_COMPARISON(GT)\n+\tCHECK_OS_COMPARISON(GE)\n+\tCHECK_OS_COMPARISON(LT)\n+\tCHECK_OS_COMPARISON(LE)\n+#undef CHECK_OS_COMPARISON\n+\n+\tdefault:\n+\t  tbo = matching_typebound_op (&tb_base, actual, i, NULL, &gname);\n+\t  break;\n+      }\n+\n+  /* If there is a matching typebound-operator, replace the expression with\n+      a call to it and succeed.  */\n+  if (tbo)\n+    {\n+      gcc_assert (tb_base);\n+      build_compcall_for_operator (e, actual, tb_base, tbo, gname);\n+\n+      if (!gfc_resolve_expr (e))\n+\treturn MATCH_ERROR;\n+      else\n+\treturn MATCH_YES;\n+    }\n+ \n   if (i == INTRINSIC_USER)\n     {\n       for (ns = gfc_current_ns; ns; ns = ns->parent)\n@@ -3786,58 +3830,9 @@ gfc_extend_expr (gfc_expr *e)\n \n   if (sym == NULL)\n     {\n-      gfc_typebound_proc* tbo;\n-      gfc_expr* tb_base;\n-\n-      /* See if we find a matching type-bound operator.  */\n-      if (i == INTRINSIC_USER)\n-\ttbo = matching_typebound_op (&tb_base, actual,\n-\t\t\t\t     i, e->value.op.uop->name, &gname);\n-      else\n-\tswitch (i)\n-\t  {\n-#define CHECK_OS_COMPARISON(comp) \\\n-  case INTRINSIC_##comp: \\\n-  case INTRINSIC_##comp##_OS: \\\n-    tbo = matching_typebound_op (&tb_base, actual, \\\n-\t\t\t\t INTRINSIC_##comp, NULL, &gname); \\\n-    if (!tbo) \\\n-      tbo = matching_typebound_op (&tb_base, actual, \\\n-\t\t\t\t   INTRINSIC_##comp##_OS, NULL, &gname); \\\n-    break;\n-\t    CHECK_OS_COMPARISON(EQ)\n-\t    CHECK_OS_COMPARISON(NE)\n-\t    CHECK_OS_COMPARISON(GT)\n-\t    CHECK_OS_COMPARISON(GE)\n-\t    CHECK_OS_COMPARISON(LT)\n-\t    CHECK_OS_COMPARISON(LE)\n-#undef CHECK_OS_COMPARISON\n-\n-\t    default:\n-\t      tbo = matching_typebound_op (&tb_base, actual, i, NULL, &gname);\n-\t      break;\n-\t  }\n-\n-      /* If there is a matching typebound-operator, replace the expression with\n-\t a call to it and succeed.  */\n-      if (tbo)\n-\t{\n-\t  bool result;\n-\n-\t  gcc_assert (tb_base);\n-\t  build_compcall_for_operator (e, actual, tb_base, tbo, gname);\n-\n-\t  result = gfc_resolve_expr (e);\n-\t  if (!result)\n-\t    return MATCH_ERROR;\n-\n-\t  return MATCH_YES;\n-\t}\n-\n       /* Don't use gfc_free_actual_arglist().  */\n       free (actual->next);\n       free (actual);\n-\n       return MATCH_NO;\n     }\n "}, {"sha": "b3b6b59091d2f8950823206f38a2350e85dac14c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517d78beb772c6a1a11e4952e1d51e49113e79dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517d78beb772c6a1a11e4952e1d51e49113e79dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=517d78beb772c6a1a11e4952e1d51e49113e79dc", "patch": "@@ -1,3 +1,8 @@\n+2015-01-11  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/63733\n+\t* gfortran.dg/typebound_operator_20.f90: New.\n+\n 2015-01-11  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/58023"}, {"sha": "26c49a188eb1a5a58ac4486b14981d92dbdbf72c", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_20.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517d78beb772c6a1a11e4952e1d51e49113e79dc/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517d78beb772c6a1a11e4952e1d51e49113e79dc/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_20.f90?ref=517d78beb772c6a1a11e4952e1d51e49113e79dc", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do run }\n+!\n+! PR 63733: [4.8/4.9/5 Regression] [OOP] wrong resolution for OPERATOR generics\n+!\n+! Original test case from Alberto F. Mart\u00edn Huertas <amartin@cimne.upc.edu>\n+! Slightly modified by Salvatore Filippone <sfilippone@uniroma2.it>\n+! Further modified by Janus Weil <janus@gcc.gnu.org>\n+\n+module overwrite\n+  type parent\n+   contains\n+     procedure :: sum => sum_parent\n+     generic   :: operator(+) => sum\n+  end type\n+\n+  type, extends(parent) ::  child\n+  contains\n+    procedure :: sum => sum_child\n+  end type\n+\n+contains\n+\n+  integer function sum_parent(op1,op2)\n+    implicit none\n+    class(parent), intent(in) :: op1, op2\n+    sum_parent = 0\n+  end function\n+\n+  integer function sum_child(op1,op2)\n+    implicit none\n+    class(child) , intent(in) :: op1\n+    class(parent), intent(in) :: op2\n+    sum_child = 1\n+  end function\n+\n+end module\n+\n+program drive\n+  use overwrite\n+  implicit none\n+\n+  type(parent) :: m1, m2\n+  class(parent), pointer :: mres\n+  type(child)  :: h1, h2\n+  class(parent), pointer :: hres\n+\n+  if (m1 + m2 /= 0) call abort()\n+  if (h1 + m2 /= 1) call abort()\n+  if (h1%sum(h2) /= 1) call abort()\n+\n+end\n+\n+! { dg-final { cleanup-modules \"overwrite\" } }"}]}