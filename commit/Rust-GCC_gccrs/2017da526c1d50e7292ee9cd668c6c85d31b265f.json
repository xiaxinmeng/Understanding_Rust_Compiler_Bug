{"sha": "2017da526c1d50e7292ee9cd668c6c85d31b265f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxN2RhNTI2YzFkNTBlNzI5MmVlOWNkNjY4YzZjODVkMzFiMjY1Zg==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-06-28T11:24:05Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-06-28T11:24:05Z"}, "message": "Gnu.java: New file.\n\n\t* gnu/java/security/provider/Gnu.java: New file.\n\t* gnu/java/security/provider/SHA.java: New file.\n\t* gnu/java/security/provider/SHA1PRNG.java: New file.\n\t* Makefile.am: Added the above files.\n\t* Makefile.in: Rebuilt.\n\n\t* java/io/ObjectStreamClass.java (setUID): Use Gnu SHA instead of SHS.\n\nFrom-SVN: r34753", "tree": {"sha": "d2cb962ad028c8e94c09b7d745e311b65c24f738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2cb962ad028c8e94c09b7d745e311b65c24f738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2017da526c1d50e7292ee9cd668c6c85d31b265f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2017da526c1d50e7292ee9cd668c6c85d31b265f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2017da526c1d50e7292ee9cd668c6c85d31b265f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2017da526c1d50e7292ee9cd668c6c85d31b265f/comments", "author": null, "committer": null, "parents": [{"sha": "0e4aca88306e31f59b6e63552cb32963d8dc6586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4aca88306e31f59b6e63552cb32963d8dc6586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e4aca88306e31f59b6e63552cb32963d8dc6586"}], "stats": {"total": 452, "additions": 444, "deletions": 8}, "files": [{"sha": "6c6bea8bf0a42c301624afd13a8c88b8855ad374", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2017da526c1d50e7292ee9cd668c6c85d31b265f", "patch": "@@ -1,3 +1,13 @@\n+2000-06-28  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* gnu/java/security/provider/Gnu.java: New file.\n+\t* gnu/java/security/provider/SHA.java: New file.\n+\t* gnu/java/security/provider/SHA1PRNG.java: New file.\n+\t* Makefile.am: Added the above files.\n+\t* Makefile.in: Rebuilt.\n+\n+\t* java/io/ObjectStreamClass.java (setUID): Use Gnu SHA instead of SHS.\n+\n 2000-06-28  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* ThreadGroup.java: Added synchronized flag to many methods."}, {"sha": "01f7604fea443a07c2f9d12d23e7d84d8ebf0107", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=2017da526c1d50e7292ee9cd668c6c85d31b265f", "patch": "@@ -615,6 +615,9 @@ gnu/java/io/ObjectIdentityWrapper.java \\\n gnu/java/lang/reflect/TypeSignature.java \\\n gnu/java/lang/ArrayHelper.java \\\n gnu/java/lang/ClassHelper.java \\\n+gnu/java/security/provider/Gnu.java \\\n+gnu/java/security/provider/SHA.java \\\n+gnu/java/security/provider/SHA1PRNG.java \\\n java/io/BufferedInputStream.java \\\n java/io/BufferedOutputStream.java \\\n java/io/BufferedReader.java \\"}, {"sha": "d7b7dc5621d21d69eb9828baa61c757a4bee22d5", "filename": "libjava/Makefile.in", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=2017da526c1d50e7292ee9cd668c6c85d31b265f", "patch": "@@ -385,6 +385,9 @@ gnu/java/io/ObjectIdentityWrapper.java \\\n gnu/java/lang/reflect/TypeSignature.java \\\n gnu/java/lang/ArrayHelper.java \\\n gnu/java/lang/ClassHelper.java \\\n+gnu/java/security/provider/Gnu.java \\\n+gnu/java/security/provider/SHA.java \\\n+gnu/java/security/provider/SHA1PRNG.java \\\n java/io/BufferedInputStream.java \\\n java/io/BufferedOutputStream.java \\\n java/io/BufferedReader.java \\\n@@ -963,7 +966,10 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/io/NullOutputStream.P \\\n .deps/gnu/java/io/ObjectIdentityWrapper.P \\\n .deps/gnu/java/lang/ArrayHelper.P .deps/gnu/java/lang/ClassHelper.P \\\n-.deps/gnu/java/lang/reflect/TypeSignature.P .deps/interpret.P \\\n+.deps/gnu/java/lang/reflect/TypeSignature.P \\\n+.deps/gnu/java/security/provider/Gnu.P \\\n+.deps/gnu/java/security/provider/SHA.P \\\n+.deps/gnu/java/security/provider/SHA1PRNG.P .deps/interpret.P \\\n .deps/java/awt/AWTError.P .deps/java/awt/AWTEvent.P \\\n .deps/java/awt/AWTException.P .deps/java/awt/ActiveEvent.P \\\n .deps/java/awt/Adjustable.P .deps/java/awt/BorderLayout.P \\"}, {"sha": "f215bcd6a5c476b409344f30b650f4b49ed8b0c8", "filename": "libjava/gnu/java/security/provider/Gnu.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FGnu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FGnu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FGnu.java?ref=2017da526c1d50e7292ee9cd668c6c85d31b265f", "patch": "@@ -0,0 +1,79 @@\n+/* Gnu.java --- Gnu provider main class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package gnu.java.security.provider;\n+import java.security.Provider;\n+\n+public final class Gnu extends Provider\n+{\n+  public Gnu()\n+  {\n+    super( \"GNU\", 1.0, \"GNU provider v1.0 implementing SHA-1, MD5, DSA\");\n+\n+    // Signature\n+    put(\"Signature.SHA1withDSA\", \"gnu.java.security.provider.DSASignature\");\n+\n+    put(\"Alg.Alias.Signature.DSS\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.DSA\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.SHAwithDSA\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.DSAwithSHA\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.DSAwithSHA1\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.SHA/DSA\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.SHA-1/DSA\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.SHA1/DSA\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.OID.1.2.840.10040.4.3\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.1.2.840.10040.4.3\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.1.3.14.3.2.13\", \"SHA1withDSA\");\n+    put(\"Alg.Alias.Signature.1.3.14.3.2.27\", \"SHA1withDSA\");\n+\n+    // Key Pair Generator\n+    put(\"KeyPairGenerator.DSA\", \"gnu.java.security.provider.DSAKeyPairGenerator\");\n+\n+    put(\"Alg.Alias.KeyPairGenerator.OID.1.2.840.10040.4.1\", \"DSA\");\n+    put(\"Alg.Alias.KeyPairGenerator.1.2.840.10040.4.1\", \"DSA\");\n+    put(\"Alg.Alias.KeyPairGenerator.1.3.14.3.2.12\", \"DSA\");\n+\n+    // Message Digests\n+    put(\"MessageDigest.SHA\", \"gnu.java.security.provider.SHA\");\n+    put(\"MessageDigest.MD5\", \"gnu.java.security.provider.MD5\");\n+\n+    // Format \"Alias\", \"Actual Name\"\n+    put(\"Alg.Alias.MessageDigest.SHA1\", \"SHA\");\n+    put(\"Alg.Alias.MessageDigest.SHA-1\", \"SHA\");\n+\n+    // Algorithm Parameters\n+    put(\"AlgorithmParameters.DSA\", \"gnu.java.security.provider.DSAAlgorithmParameters\");\n+\n+    // Algorithm Parameter Generator\n+    put(\"AlgorithmParameterGenerator.DSA\", \"gnu.java.security.provider.DSAAlgorithmParameterGenerator\");\n+\n+    // SecureRandom\n+    put(\"SecureRandom.SHA1PRNG\", \"gnu.java.security.provider.SHA1PRNG\");\n+\n+\n+  }\n+}"}, {"sha": "cb3d3bf5d09152e05bd7ddcdb9168d89c3dd7b9c", "filename": "libjava/gnu/java/security/provider/SHA.java", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA.java?ref=2017da526c1d50e7292ee9cd668c6c85d31b265f", "patch": "@@ -0,0 +1,227 @@\n+/* SHA.java -- Class implementing the SHA-1 algorithm as specified in [1].\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+  \n+package gnu.java.security.provider;\n+\n+import java.security.MessageDigest;\n+\n+/**\n+   This class implements the SHA-1 algorithm as described in [1].\n+\n+   [1] Federal Information Processing Standards Publication 180-1.\n+   Specifications for the Secure Hash Standard.  April 17, 1995.\n+\n+   @see java.security.MessageDigest\n+*/\n+public class SHA extends MessageDigest implements Cloneable\n+{\n+  public SHA ()\n+  {\n+    super(\"SHA\");\n+    engineReset ();\n+  }\n+\n+  public int engineGetDigestLength()\n+  {\n+    return 16;\n+  }\n+\n+  public void engineUpdate (byte b)\n+  {\n+    int i = (int)bytecount % 64;\n+    int shift = (3 - i % 4) * 8;\n+    int idx = i / 4;\n+\n+    // if you could index ints, this would be: W[idx][shift/8] = b\n+    W[idx] = (W[idx] & ~(0xff << shift)) | ((b & 0xff) << shift);\n+\n+    // if we've filled up a block, then process it\n+    if ((++ bytecount) % 64 == 0)\n+      munch ();\n+  }\n+\n+  // This could be optimized.\n+  public void engineUpdate (byte bytes[], int off, int len)\n+  {\n+    if (len < 0)\n+      throw new ArrayIndexOutOfBoundsException ();\n+\n+    int end = off + len;\n+    while (off < end)\n+      engineUpdate (bytes[off++]);\n+  }\n+\n+  public void engineReset ()\n+  {\n+    bytecount = 0;\n+    // magic numbers from [1] p. 10.\n+    H0 = 0x67452301;\n+    H1 = 0xefcdab89;\n+    H2 = 0x98badcfe;\n+    H3 = 0x10325476;\n+    H4 = 0xc3d2e1f0;\n+  }\n+\n+  public byte[] engineDigest ()\n+  {\n+    long bitcount = bytecount * 8;\n+    engineUpdate ((byte)0x80); // 10000000 in binary; the start of the padding\n+\n+    // add the rest of the padding to fill this block out, but leave 8\n+    // bytes to put in the original bytecount\n+    while ((int)bytecount % 64 != 56)\n+      engineUpdate ((byte)0);\n+\n+    // add the length of the original, unpadded block to the end of\n+    // the padding\n+    W[14] = (int)(bitcount >>> 32);\n+    W[15] = (int)bitcount;\n+    bytecount += 8;\n+\n+    // digest the fully padded block\n+    munch ();\n+\n+    byte[] result\n+      = new byte[] {(byte)(H0 >>> 24), (byte)(H0 >>> 16),\n+\t\t    (byte)(H0 >>> 8), (byte)H0,\n+\t\t    (byte)(H1 >>> 24), (byte)(H1 >>> 16),\n+\t\t    (byte)(H1 >>> 8), (byte)H1,\n+\t\t    (byte)(H2 >>> 24), (byte)(H2 >>> 16),\n+\t\t    (byte)(H2 >>> 8), (byte)H2,\n+\t\t    (byte)(H3 >>> 24), (byte)(H3 >>> 16),\n+\t\t    (byte)(H3 >>> 8), (byte)H3,\n+\t\t    (byte)(H4 >>> 24), (byte)(H4 >>> 16),\n+\t\t    (byte)(H4 >>> 8), (byte)H4};\n+    \n+    engineReset ();\n+    return result;\n+  }\n+\n+  // Process a single block.  This is pretty much copied verbatim from\n+  // [1] pp. 9, 10.\n+  private void munch ()\n+  {\n+    for (int t = 16; t < 80; ++ t)\n+      {\n+\tint Wt = W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16];\n+\tW[t] = Wt << 1 | Wt >>> 31;\n+      }\n+\n+    int A = H0;\n+    int B = H1;\n+    int C = H2;\n+    int D = H3;\n+    int E = H4;\n+\n+    for (int t = 0; t < 20; ++ t)\n+      {\n+\tint TEMP = (A << 5 | A >>> 27) // S^5(A)\n+\t  + ((B & C) | (~B & D))       // f_t(B,C,D)\n+\t  + E + W[t]\n+\t  + 0x5a827999;                // K_t\n+\n+\tE = D;\n+\tD = C;\n+\tC = B << 30 | B >>> 2;         // S^30(B)\n+\tB = A;\n+\tA = TEMP;\n+      }\n+\n+    for (int t = 20; t < 40; ++ t)\n+      {\n+\tint TEMP = (A << 5 | A >>> 27) // S^5(A)\n+\t  + (B ^ C ^ D)                // f_t(B,C,D)\n+\t  + E + W[t]                   \n+\t  + 0x6ed9eba1;                // K_t\n+\n+\tE = D;\n+\tD = C;\n+\tC = B << 30 | B >>> 2;         // S^30(B)\n+\tB = A;\n+\tA = TEMP;\n+      }\n+\n+    for (int t = 40; t < 60; ++ t)\n+      {\n+\tint TEMP = (A << 5 | A >>> 27) // S^5(A)\n+\t  + (B & C | B & D | C & D)    // f_t(B,C,D)\n+\t  + E + W[t]\n+\t  + 0x8f1bbcdc;                // K_t\n+\n+\tE = D;\n+\tD = C;\n+\tC = B << 30 | B >>> 2;         // S^30(B)\n+\tB = A;\n+\tA = TEMP;\n+      }\n+\n+    for (int t = 60; t < 80; ++ t)\n+      {\n+\tint TEMP = (A << 5 | A >>> 27) // S^5(A)\n+\t  + (B ^ C ^ D)                // f_t(B,C,D)\n+\t  + E + W[t]\n+\t  + 0xca62c1d6;                // K_t\n+\n+\tE = D;\n+\tD = C;\n+\tC = B << 30 | B >>> 2;         // S^30(B)\n+\tB = A;\n+\tA = TEMP;\n+      }\n+\n+    H0 += A;\n+    H1 += B;\n+    H2 += C;\n+    H3 += D;\n+    H4 += E;\n+  }\n+  \n+  public Object clone ()\n+  {\n+    return new SHA (this);\n+  }\n+\n+  private SHA (SHA copy)\n+  {\n+    this ();\n+    bytecount = copy.bytecount;\n+    H0 = copy.H0;\n+    H1 = copy.H1;\n+    H2 = copy.H2;\n+    H3 = copy.H3;\n+    H4 = copy.H4;\n+    System.arraycopy (copy.W, 0, W, 0, 80);\n+  }\n+  \n+  private final int W[] = new int[80];\n+  private long bytecount;\n+  private int H0;\n+  private int H1;\n+  private int H2;\n+  private int H3;\n+  private int H4;\n+}"}, {"sha": "3aaf652bb46ba9e5b7ffbd67a5bab481d53cd616", "filename": "libjava/gnu/java/security/provider/SHA1PRNG.java", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA1PRNG.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA1PRNG.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA1PRNG.java?ref=2017da526c1d50e7292ee9cd668c6c85d31b265f", "patch": "@@ -0,0 +1,109 @@\n+/* SHA1PRNG.java --- Secure Random SPI SHA1PRNG\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package gnu.java.security.provider;\n+\n+import java.util.Random;\n+// import java.security.SecureRandomSpi;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.io.Serializable;\n+\n+// public class SHA1PRNG extends SecureRandomSpi implements Serializable\n+public class SHA1PRNG implements Serializable\n+{\n+  MessageDigest digest;\n+  byte seed[];\n+  byte data[];\n+  int seedpos;\n+  int datapos;\n+\n+  public SHA1PRNG()\n+  {\n+    try {\n+      digest = MessageDigest.getInstance(\"SHA\");\n+    } catch ( NoSuchAlgorithmException nsae) {\n+      System.out.println(\"Failed to find SHA Message Digest: \" + nsae);\n+      nsae.printStackTrace();\n+    }\n+\n+    seed = new byte[20];\n+    seedpos = 0;\n+    data = new byte[40];\n+    datapos = 0;\n+\n+    new Random().nextBytes(seed);\n+\n+    byte digestdata[];\n+    digestdata = digest.digest( data );\n+    System.arraycopy( digestdata, 0, data, 0, 20);\n+\n+  }\n+\n+  public void engineSetSeed(byte[] seed)\n+  {\n+    for(int i = 0; i < seed.length; i++)\n+      this.seed[seedpos++ % 20] ^= seed[i];\n+    seedpos %= 20;\n+\n+  }\n+\n+  public void engineNextBytes(byte[] bytes)\n+  {\n+\n+    if( bytes.length < (20 - datapos) ) {\n+      System.arraycopy( bytes, 0, data, datapos, bytes.length);\n+      datapos += bytes.length;\n+      return;\n+    }\n+\n+    int i, blen = bytes.length, bpos = 0;\n+    byte digestdata[];\n+    while( bpos < blen ) {\n+      i = 20 - datapos;\n+      System.arraycopy( bytes, bpos, data, datapos, i);\n+      bpos += i;\n+      datapos += i;\n+      if( datapos >= 20) {\n+\t//System.out.println( (0 + 20) + \"\\n\" + (20 + 20) );\n+\tSystem.arraycopy( seed, 0, data, 20, 20);\n+\tdigestdata = digest.digest( data );\n+\tSystem.arraycopy( digestdata, 0, data, 0, 20);\n+\tdatapos = 0;\n+      }\n+    }\n+\n+  }\n+\n+  public byte[] engineGenerateSeed(int numBytes)\n+  {\n+    byte tmp[] = new byte[numBytes];\n+\t\n+    engineNextBytes( tmp );\n+    return tmp;\n+  }\n+}"}, {"sha": "c43112d7a616e5fc27225d6960dc85d1c75fbd24", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017da526c1d50e7292ee9cd668c6c85d31b265f/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=2017da526c1d50e7292ee9cd668c6c85d31b265f", "patch": "@@ -36,13 +36,14 @@\n import java.security.DigestOutputStream;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n+import java.security.Security;\n import java.util.Arrays;\n import java.util.Comparator;\n import java.util.Hashtable;\n import java.util.Vector;\n import gnu.java.io.NullOutputStream;\n import gnu.java.lang.reflect.TypeSignature;\n-import gnu.gcj.io.SimpleSHSStream;\n+import gnu.java.security.provider.Gnu;\n \n \n public class ObjectStreamClass implements Serializable\n@@ -420,20 +421,21 @@ private void setUID (Class cl)\n       MessageDigest md = null;\n       DigestOutputStream digest_out = null;\n       DataOutputStream data_out = null;\n-      SimpleSHSStream simple = null;\n \n       try \n \t{\n \t  md = MessageDigest.getInstance (\"SHA\");\n-\t  digest_out = new DigestOutputStream (nullOutputStream, md);\n-\t  data_out = new DataOutputStream (digest_out);\t  \n \t}\n       catch (NoSuchAlgorithmException e)\n \t{\n-\t  simple = new SimpleSHSStream (nullOutputStream);\n-\t  data_out = new DataOutputStream (simple);\n+\t  // If a provider already provides SHA, use it; otherwise, use this.\n+\t  Gnu gnuProvider = new Gnu();\n+\t  Security.addProvider(gnuProvider);\n+\t  md = MessageDigest.getInstance (\"SHA\");\n \t}\n \n+      digest_out = new DigestOutputStream (nullOutputStream, md);\n+      data_out = new DataOutputStream (digest_out);\n       data_out.writeUTF (cl.getName ());\n \n       int modifiers = cl.getModifiers ();\n@@ -522,7 +524,7 @@ private void setUID (Class cl)\n       }\n \n       data_out.close ();\n-      byte[] sha = md != null ? md.digest () : simple.digest ();\n+      byte[] sha = md.digest ();\n       long result = 0;\n       int len = sha.length < 8 ? sha.length : 8;\n       for (int i=0; i < len; i++)"}]}