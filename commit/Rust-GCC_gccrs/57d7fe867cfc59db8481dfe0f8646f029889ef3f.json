{"sha": "57d7fe867cfc59db8481dfe0f8646f029889ef3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkN2ZlODY3Y2ZjNTlkYjg0ODFkZmUwZjg2NDZmMDI5ODg5ZWYzZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-11-18T21:52:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-11-18T21:52:32Z"}, "message": "re PR target/25112 ([m68k] Suboptimal equality comparisons with small integers)\n\n\tPR target/25112\n\t* config/m68k/m68k.c (moveq feeding equality comparison): New\n\tpeepholes.\n\t* config/m68k/predicates.md (addq_subq_operand): New predicate.\n\t(equality_comparison_operator): Likewise.\n\n\tPR target/25112\n\t* gcc.target/m68k/pr25112: New test.\n\nFrom-SVN: r242605", "tree": {"sha": "9985d818e7b6cf2ddc5531b04e2a1537e4997fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9985d818e7b6cf2ddc5531b04e2a1537e4997fd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57d7fe867cfc59db8481dfe0f8646f029889ef3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d7fe867cfc59db8481dfe0f8646f029889ef3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d7fe867cfc59db8481dfe0f8646f029889ef3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d7fe867cfc59db8481dfe0f8646f029889ef3f/comments", "author": null, "committer": null, "parents": [{"sha": "0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bdc4c1ce9470d4b5b926d2d62ba3ed243775d9e"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "534ef4ba2be04b180de886d938e728f3fcc335b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d7fe867cfc59db8481dfe0f8646f029889ef3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d7fe867cfc59db8481dfe0f8646f029889ef3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57d7fe867cfc59db8481dfe0f8646f029889ef3f", "patch": "@@ -1,3 +1,11 @@\n+2016-11-18  Jeff Law  <law@redhat.com>\n+\n+\tPR target/25112\n+\t* config/m68k/m68k.c (moveq feeding equality comparison): New\n+\tpeepholes.\n+\t* config/m68k/predicates.md (addq_subq_operand): New predicate.\n+\t(equality_comparison_operator): Likewise.\n+\n 2016-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* rtlanal.c (load_extend_op): Move to..."}, {"sha": "7b7f3731f0716411af24eb7b92b0f51c2b4325da", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d7fe867cfc59db8481dfe0f8646f029889ef3f/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d7fe867cfc59db8481dfe0f8646f029889ef3f/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=57d7fe867cfc59db8481dfe0f8646f029889ef3f", "patch": "@@ -7641,6 +7641,46 @@\n \t(const_int 0))]\n   \"operands[5] = (operands[0] == operands[3]) ? operands[4] : operands[3];\")\n \n+;; We want to turn\n+;;   moveq const,dX\n+;;   cmp.l dX,dY\n+;;   je/jne\n+;;\n+;; into\n+;;   addq/subq -const,dY\n+;;   cmp.l dY, 0\n+;;   je/jne\n+;;\n+;; dX and dY must both be dead at the end of the sequence and the constant\n+;; must be valid for addq/subq.\n+;;\n+;; Essentially we're making it trivial for final to realize the comparison\n+;; is not needed\n+;;\n+;; Testing has shown a variant where the operands are reversed in the\n+;; comparison never hits, so I have not included that variant.\n+;;\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(match_operand:SI 1 \"addq_subq_operand\" \"\"))\n+   (set (cc0) (compare (match_operand:SI 2 \"register_operand\" \"\")\n+\t\t       (match_dup 0)))\n+   (set (pc) (if_then_else (match_operator 5 \"equality_comparison_operator\"\n+\t\t\t    [(cc0) (const_int 0)])\n+\t\t\t   (match_operand 3 \"pc_or_label_operand\")\n+\t\t\t   (match_operand 4 \"pc_or_label_operand\")))]\n+  \"peep2_reg_dead_p (2, operands[0])\n+   && peep2_reg_dead_p (2, operands[2])\n+   && (operands[3] == pc_rtx || operands[4] == pc_rtx)\n+   && DATA_REG_P (operands[2])\"\n+  [(set (match_dup 2) (plus:SI (match_dup 2) (match_dup 6)))\n+   (set (cc0) (compare (match_dup 2) (const_int 0)))\n+   (set (pc) (if_then_else (match_op_dup 5 [(cc0) (const_int 0)])\n+\t\t\t   (match_dup 3)\n+\t\t\t   (match_dup 4)))]\n+  \"operands[6] = GEN_INT (-INTVAL (operands[1]));\")\n+\n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operand:SI 1 \"pow2_m1_operand\" \"\"))"}, {"sha": "bfb548ab86ff39b64d219ff7e02fd89cf59d8018", "filename": "gcc/config/m68k/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d7fe867cfc59db8481dfe0f8646f029889ef3f/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d7fe867cfc59db8481dfe0f8646f029889ef3f/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fpredicates.md?ref=57d7fe867cfc59db8481dfe0f8646f029889ef3f", "patch": "@@ -245,6 +245,18 @@\n \t\t || reload_completed));\n })\n \n+;; Used to detect constants that are valid for addq/subq instructions\n+(define_predicate \"addq_subq_operand\"\n+  (match_code \"const_int\")\n+{\n+  return ((INTVAL (op) <= 8 && INTVAL (op) > 0)\n+\t  || (INTVAL (op) >= -8 && INTVAL (op) < 0));\n+})\n+\n+;; Used to detect equality and non-equality operators\n+(define_predicate \"equality_comparison_operator\"\n+  (match_code \"eq,ne\"))\n+\n ;; Used to detect when an operand is either a register\n ;; or a constant that is all ones in its lower bits.\n ;; Used by insv pattern to help detect when we're initializing"}, {"sha": "729c2e980e0ca60d4a2d0dba04bdc0db499d3d81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d7fe867cfc59db8481dfe0f8646f029889ef3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d7fe867cfc59db8481dfe0f8646f029889ef3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57d7fe867cfc59db8481dfe0f8646f029889ef3f", "patch": "@@ -1,3 +1,8 @@\n+2016-11-18  Jeff Law  <law@redhat.com>\n+\n+\tPR target/25112\n+\t* gcc.target/m68k/pr25112: New test.\n+\n 2016-11-18  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.dg/tree-ssa/pr71179.c: Prune ABI message."}, {"sha": "0633cc105649f101bb226fb51edfe44e9964504c", "filename": "gcc/testsuite/gcc.target/m68k/pr25112.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d7fe867cfc59db8481dfe0f8646f029889ef3f/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr25112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d7fe867cfc59db8481dfe0f8646f029889ef3f/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr25112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr25112.c?ref=57d7fe867cfc59db8481dfe0f8646f029889ef3f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* { dg-final { scan-assembler-times \"addq\" 16 } } */\n+/* { dg-final { scan-assembler-times \"subq\" 16 } } */\n+/* { dg-final { scan-assembler-times \"moveq\" 4 } } */\n+extern int bar (void);\n+\n+#define FOO(x) \\\n+  void foo##x (void) { int a = bar (); if (a == x) bar (); } \\\n+  void bar##x (void) { int a = bar (); if (a == -x) bar (); } \\\n+  void foon##x (void) { int a = bar (); if (a != x) bar (); } \\\n+  void barn##x (void) { int a = bar (); if (a != -x) bar (); } \\\n+  \n+\n+FOO (1)\n+FOO (2)\n+FOO (3)\n+FOO (4)\n+FOO (5)\n+FOO (6)\n+FOO (7)\n+FOO (8)\n+FOO (9)\n+\n+"}]}