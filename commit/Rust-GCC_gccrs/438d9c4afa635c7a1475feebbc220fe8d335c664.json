{"sha": "438d9c4afa635c7a1475feebbc220fe8d335c664", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM4ZDljNGFmYTYzNWM3YTE0NzVmZWViYmMyMjBmZThkMzM1YzY2NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-29T09:18:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-29T09:18:48Z"}, "message": "re PR tree-optimization/92715 (error: position plus size exceeds size of referenced object in  \u2018bit_field_ref\u2019)\n\n2019-11-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92715\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Bail\n\tout for uniform vectors and source vectors with less elements\n\tthan the destination.\n\n\t* gcc.dg/torture/pr92715.c: New testcase.\n\nFrom-SVN: r278833", "tree": {"sha": "b64ff536de838c4039de3c593cb9221c80eb74f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b64ff536de838c4039de3c593cb9221c80eb74f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/438d9c4afa635c7a1475feebbc220fe8d335c664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438d9c4afa635c7a1475feebbc220fe8d335c664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/438d9c4afa635c7a1475feebbc220fe8d335c664", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438d9c4afa635c7a1475feebbc220fe8d335c664/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52702016ad1b45888ddd37e95e3eb093181fd4d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52702016ad1b45888ddd37e95e3eb093181fd4d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52702016ad1b45888ddd37e95e3eb093181fd4d3"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "3eaa9acf7433691c803a541c26c2fcdaf157726b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438d9c4afa635c7a1475feebbc220fe8d335c664/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438d9c4afa635c7a1475feebbc220fe8d335c664/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=438d9c4afa635c7a1475feebbc220fe8d335c664", "patch": "@@ -1,3 +1,10 @@\n+2019-11-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92715\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Bail\n+\tout for uniform vectors and source vectors with less elements\n+\tthan the destination.\n+\n 2019-11-29  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/91574"}, {"sha": "5d323652dbacd005d7b4f8a90badd844773ae4fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438d9c4afa635c7a1475feebbc220fe8d335c664/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438d9c4afa635c7a1475feebbc220fe8d335c664/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=438d9c4afa635c7a1475feebbc220fe8d335c664", "patch": "@@ -1,3 +1,8 @@\n+2019-11-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92715\n+\t* gcc.dg/torture/pr92715.c: New testcase.\n+\n 2019-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/60228"}, {"sha": "170179c203252a16d4f4a73fb89ad0fa18c3f9eb", "filename": "gcc/testsuite/gcc.dg/torture/pr92715.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438d9c4afa635c7a1475feebbc220fe8d335c664/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92715.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438d9c4afa635c7a1475feebbc220fe8d335c664/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92715.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92715.c?ref=438d9c4afa635c7a1475feebbc220fe8d335c664", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mavx2\" { target x86_64-*-* i?86-*-* } } */\n+\n+typedef double v4si __attribute__((vector_size(32)));\n+typedef double v2si __attribute__((vector_size(16)));\n+\n+void foo (v4si *dstp, v2si *srcp)\n+{\n+  v2si src = *srcp;\n+  *dstp = (v4si) { src[0], src[1], src[0], src[1] };\n+}\n+\n+void bar (v4si *dstp, v2si *srcp)\n+{\n+  v2si src = *srcp;\n+  *dstp = (v4si) { src[0], src[0], src[0], src[0] };\n+}"}, {"sha": "36e6267cf557bea14b6360e9e686811ac28e059c", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438d9c4afa635c7a1475feebbc220fe8d335c664/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438d9c4afa635c7a1475feebbc220fe8d335c664/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=438d9c4afa635c7a1475feebbc220fe8d335c664", "patch": "@@ -2038,13 +2038,13 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n   constructor_elt *elt;\n   bool maybe_ident;\n \n-  gcc_checking_assert (gimple_assign_rhs_code (stmt) == CONSTRUCTOR);\n-\n   op = gimple_assign_rhs1 (stmt);\n   type = TREE_TYPE (op);\n-  gcc_checking_assert (TREE_CODE (type) == VECTOR_TYPE);\n+  gcc_checking_assert (TREE_CODE (op) == CONSTRUCTOR\n+\t\t       && TREE_CODE (type) == VECTOR_TYPE);\n \n-  if (!TYPE_VECTOR_SUBPARTS (type).is_constant (&nelts))\n+  if (!TYPE_VECTOR_SUBPARTS (type).is_constant (&nelts)\n+      || uniform_vector_p (op))\n     return false;\n   elem_type = TREE_TYPE (type);\n   elem_size = TREE_INT_CST_LOW (TYPE_SIZE (elem_type));\n@@ -2136,6 +2136,9 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n       || ! VECTOR_TYPE_P (TREE_TYPE (orig[0])))\n     return false;\n   refnelts = TYPE_VECTOR_SUBPARTS (TREE_TYPE (orig[0])).to_constant ();\n+  /* We currently do not handle larger destination vectors.  */\n+  if (refnelts < nelts)\n+    return false;\n \n   if (maybe_ident)\n     {"}]}