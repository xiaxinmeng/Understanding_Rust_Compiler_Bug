{"sha": "4a8841c0413d52261a8d024577381582d07a866a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE4ODQxYzA0MTNkNTIyNjFhOGQwMjQ1NzczODE1ODJkMDdhODY2YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-09T13:36:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-09T13:36:33Z"}, "message": "tree-vect-loop.c (vect_is_simple_reduction): Simplify and allow stmts other than GIMPLE_ASSIGN in nested cycles.\n\n2019-10-09  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (vect_is_simple_reduction): Simplify and\n\tallow stmts other than GIMPLE_ASSIGN in nested cycles.\n\n\t* gcc.dg/vect/vect-outer-call-1.c: New testcase.\n\nFrom-SVN: r276760", "tree": {"sha": "3712adea8ae16b2dc23efff0acb676db8d75eb98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3712adea8ae16b2dc23efff0acb676db8d75eb98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a8841c0413d52261a8d024577381582d07a866a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8841c0413d52261a8d024577381582d07a866a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8841c0413d52261a8d024577381582d07a866a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8841c0413d52261a8d024577381582d07a866a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "531b0a3172ed423175d7ebbf317cd79f4613735e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/531b0a3172ed423175d7ebbf317cd79f4613735e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/531b0a3172ed423175d7ebbf317cd79f4613735e"}], "stats": {"total": 120, "additions": 59, "deletions": 61}, "files": [{"sha": "330e13b23829282526f6448d22fe730d48828655", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8841c0413d52261a8d024577381582d07a866a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8841c0413d52261a8d024577381582d07a866a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a8841c0413d52261a8d024577381582d07a866a", "patch": "@@ -1,3 +1,8 @@\n+2019-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_is_simple_reduction): Simplify and\n+\tallow stmts other than GIMPLE_ASSIGN in nested cycles.\n+\n 2019-10-08  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (_stmt_vec_info::reduc_vectype_in): New."}, {"sha": "4c7dfe71a47c2c7e2dfcf060b84acad2d697e439", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8841c0413d52261a8d024577381582d07a866a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8841c0413d52261a8d024577381582d07a866a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a8841c0413d52261a8d024577381582d07a866a", "patch": "@@ -1,3 +1,7 @@\n+2019-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-outer-call-1.c: New testcase.\n+\n 2019-10-08  Alexandre Oliva <oliva@adacore.com>\n \n \t* gcc.target/i386/20060512-1.c (sse2_test): Use a"}, {"sha": "f26d422053206730c63a2f2d214ad249fcd822f0", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-call-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8841c0413d52261a8d024577381582d07a866a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-call-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8841c0413d52261a8d024577381582d07a866a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-call-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-call-1.c?ref=4a8841c0413d52261a8d024577381582d07a866a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-additional-options \"-fno-math-errno\" } */\n+\n+void\n+foo (float * __restrict x, float *y, int n, int m)\n+{\n+  if (m > 0)\n+    for (int i = 0; i < n; ++i)\n+      {\n+\tfloat tem = x[i], tem1;\n+\tfor (int j = 0; j < m; ++j)\n+\t  {\n+\t    tem += y[j];\n+\t    tem1 = tem;\n+\t    tem = __builtin_sqrtf (tem);\n+\t  }\n+\tx[i] = tem - tem1;\n+      }\n+}\n+\n+/* { dg-final { scan-tree-dump \"OUTER LOOP VECTORIZED\" \"vect\" { target { vect_call_sqrtf } } } } */"}, {"sha": "14352102f54f06a49b0285e4baa47743b2b376c2", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 28, "deletions": 61, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8841c0413d52261a8d024577381582d07a866a/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8841c0413d52261a8d024577381582d07a866a/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=4a8841c0413d52261a8d024577381582d07a866a", "patch": "@@ -2756,10 +2756,8 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n   enum tree_code orig_code, code;\n   tree op1, op2, op3 = NULL_TREE, op4 = NULL_TREE;\n   tree type;\n-  tree name;\n   imm_use_iterator imm_iter;\n   use_operand_p use_p;\n-  bool phi_def;\n \n   *double_reduc = false;\n   STMT_VINFO_REDUC_TYPE (phi_info) = TREE_CODE_REDUCTION;\n@@ -2791,44 +2789,24 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n       phi_use_stmt = use_stmt;\n     }\n \n-  edge latch_e = loop_latch_edge (loop);\n-  tree loop_arg = PHI_ARG_DEF_FROM_EDGE (phi, latch_e);\n-  if (TREE_CODE (loop_arg) != SSA_NAME)\n+  tree latch_def = PHI_ARG_DEF_FROM_EDGE (phi, loop_latch_edge (loop));\n+  if (TREE_CODE (latch_def) != SSA_NAME)\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"reduction: not ssa_name: %T\\n\", loop_arg);\n+\t\t\t \"reduction: not ssa_name: %T\\n\", latch_def);\n       return NULL;\n     }\n \n-  stmt_vec_info def_stmt_info = loop_info->lookup_def (loop_arg);\n+  stmt_vec_info def_stmt_info = loop_info->lookup_def (latch_def);\n   if (!def_stmt_info\n       || !flow_bb_inside_loop_p (loop, gimple_bb (def_stmt_info->stmt)))\n     return NULL;\n \n-  if (gassign *def_stmt = dyn_cast <gassign *> (def_stmt_info->stmt))\n-    {\n-      name = gimple_assign_lhs (def_stmt);\n-      phi_def = false;\n-    }\n-  else if (gphi *def_stmt = dyn_cast <gphi *> (def_stmt_info->stmt))\n-    {\n-      name = PHI_RESULT (def_stmt);\n-      phi_def = true;\n-    }\n-  else\n-    {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"reduction: unhandled reduction operation: %G\",\n-\t\t\t def_stmt_info->stmt);\n-      return NULL;\n-    }\n-\n   unsigned nlatch_def_loop_uses = 0;\n   auto_vec<gphi *, 3> lcphis;\n   bool inner_loop_of_double_reduc = false;\n-  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, name)\n+  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, latch_def)\n     {\n       gimple *use_stmt = USE_STMT (use_p);\n       if (is_gimple_debug (use_stmt))\n@@ -2846,11 +2824,21 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \t}\n     }\n \n+  /* If we are vectorizing an inner reduction we are executing that\n+     in the original order only in case we are not dealing with a\n+     double reduction.  */\n+  if (nested_in_vect_loop && !inner_loop_of_double_reduc)\n+    {\n+      if (dump_enabled_p ())\n+\treport_vect_op (MSG_NOTE, def_stmt_info->stmt,\n+\t\t\t\"detected nested cycle: \");\n+      return def_stmt_info;\n+    }\n+\n   /* If this isn't a nested cycle or if the nested cycle reduction value\n      is used ouside of the inner loop we cannot handle uses of the reduction\n      value.  */\n-  if ((!nested_in_vect_loop || inner_loop_of_double_reduc)\n-      && (nlatch_def_loop_uses > 1 || nphi_def_loop_uses > 1))\n+  if (nlatch_def_loop_uses > 1 || nphi_def_loop_uses > 1)\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -2860,9 +2848,8 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \n   /* If DEF_STMT is a phi node itself, we expect it to have a single argument\n      defined in the inner loop.  */\n-  if (phi_def)\n+  if (gphi *def_stmt = dyn_cast <gphi *> (def_stmt_info->stmt))\n     {\n-      gphi *def_stmt = as_a <gphi *> (def_stmt_info->stmt);\n       op1 = PHI_ARG_DEF (def_stmt, 0);\n \n       if (gimple_phi_num_args (def_stmt) != 1\n@@ -2895,35 +2882,16 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n       return NULL;\n     }\n \n-  /* If we are vectorizing an inner reduction we are executing that\n-     in the original order only in case we are not dealing with a\n-     double reduction.  */\n-  bool check_reduction = true;\n-  if (flow_loop_nested_p (vect_loop, loop))\n-    {\n-      gphi *lcphi;\n-      unsigned i;\n-      check_reduction = false;\n-      FOR_EACH_VEC_ELT (lcphis, i, lcphi)\n-\tFOR_EACH_IMM_USE_FAST (use_p, imm_iter, gimple_phi_result (lcphi))\n-\t  {\n-\t    gimple *use_stmt = USE_STMT (use_p);\n-\t    if (is_gimple_debug (use_stmt))\n-\t      continue;\n-\t    if (! flow_bb_inside_loop_p (vect_loop, gimple_bb (use_stmt)))\n-\t      check_reduction = true;\n-\t  }\n-    }\n-\n-  gassign *def_stmt = as_a <gassign *> (def_stmt_info->stmt);\n-  code = orig_code = gimple_assign_rhs_code (def_stmt);\n-\n-  if (nested_in_vect_loop && !check_reduction)\n+  gassign *def_stmt = dyn_cast <gassign *> (def_stmt_info->stmt);\n+  if (!def_stmt)\n     {\n       if (dump_enabled_p ())\n-\treport_vect_op (MSG_NOTE, def_stmt, \"detected nested cycle: \");\n-      return def_stmt_info;\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"reduction: unhandled reduction operation: %G\",\n+\t\t\t def_stmt_info->stmt);\n+      return NULL;\n     }\n+  code = orig_code = gimple_assign_rhs_code (def_stmt);\n \n   /* We can handle \"res -= x[i]\", which is non-associative by\n      simply rewriting this into \"res += -x[i]\".  Avoid changing\n@@ -3018,8 +2986,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n      vectorizing an outer-loop: the inner-loop is executed sequentially,\n      and therefore vectorizing reductions in the inner-loop during\n      outer-loop vectorization is safe.  */\n-  if (check_reduction\n-      && STMT_VINFO_REDUC_TYPE (phi_info) == TREE_CODE_REDUCTION\n+  if (STMT_VINFO_REDUC_TYPE (phi_info) == TREE_CODE_REDUCTION\n       && needs_fold_left_reduction_p (type, code))\n     STMT_VINFO_REDUC_TYPE (phi_info) = FOLD_LEFT_REDUCTION;\n \n@@ -3066,9 +3033,9 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n       return def_stmt_info;\n     }\n \n-  /* Look for the expression computing loop_arg from loop PHI result.  */\n+  /* Look for the expression computing latch_def from loop PHI result.  */\n   auto_vec<std::pair<ssa_op_iter, use_operand_p> > path;\n-  if (check_reduction_path (vect_location, loop, phi, loop_arg, code,\n+  if (check_reduction_path (vect_location, loop, phi, latch_def, code,\n \t\t\t    path))\n     {\n       /* Try building an SLP reduction chain for which the additional"}]}