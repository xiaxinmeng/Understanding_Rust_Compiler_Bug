{"sha": "d0e51dca2dedf32d1d0a48d560f89e2952aee063", "node_id": "C_kwDOANBUbNoAKGQwZTUxZGNhMmRlZGYzMmQxZDBhNDhkNTYwZjg5ZTI5NTJhZWUwNjM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-25T13:06:28Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-25T13:37:52Z"}, "message": "Make TyTy::BaseType::contains_type_parameters non-virtual\n\nThis is a second cleanup to the generic interfaces in the type system. The\nhelper for contains type parameters is akin to asking if a type is concrete\nor not. If a type is not concrete ie: contains type parameters then this\ncan be leveraged instead of adding more complexity.\n\nThe TyTy::BaseType::is_concrete is already an abstract method forcing\nall types to implement it, this makes it much safer and fixes some bad\ninfinite recursion bugs if we asked if a type contained type-parameters\nwhich in turn somtimes aksed if it was concrete or not which in turn\nagain called contains_type_parameters. This cleans it all up. More\ncleanup to these interfaces can be done over time.", "tree": {"sha": "bcca3014e9e70ac0fdcd475b0f191e90d8c6b74e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcca3014e9e70ac0fdcd475b0f191e90d8c6b74e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e51dca2dedf32d1d0a48d560f89e2952aee063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e51dca2dedf32d1d0a48d560f89e2952aee063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e51dca2dedf32d1d0a48d560f89e2952aee063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e51dca2dedf32d1d0a48d560f89e2952aee063/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "717b6da459b26ace9a3c303cfa5e485ff8935709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717b6da459b26ace9a3c303cfa5e485ff8935709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/717b6da459b26ace9a3c303cfa5e485ff8935709"}], "stats": {"total": 63, "additions": 12, "deletions": 51}, "files": [{"sha": "b2fefbbfa3620f85b3a077fc6a3423098df930c0", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 12, "deletions": 51, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e51dca2dedf32d1d0a48d560f89e2952aee063/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e51dca2dedf32d1d0a48d560f89e2952aee063/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=d0e51dca2dedf32d1d0a48d560f89e2952aee063", "patch": "@@ -368,7 +368,7 @@ class BaseType : public TypeBoundsMappings\n \n   virtual bool needs_generic_substitutions () const { return false; }\n \n-  virtual bool contains_type_parameters () const { return false; }\n+  bool contains_type_parameters () const { return !is_concrete (); }\n \n   std::string mappings_str () const\n   {\n@@ -555,19 +555,13 @@ class ParamType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n-  bool contains_type_parameters () const override final\n-  {\n-    if (can_resolve ())\n-      {\n-\tauto r = resolve ();\n-\treturn r->contains_type_parameters ();\n-      }\n-    return true;\n-  }\n-\n   bool is_concrete () const override final\n   {\n-    return !contains_type_parameters ();\n+    if (!can_resolve ())\n+      return false;\n+\n+    auto r = resolve ();\n+    return r->is_concrete ();\n   }\n \n   ParamType *handle_substitions (SubstitutionArgumentMappings mappings);\n@@ -659,16 +653,6 @@ class TupleType : public BaseType\n \n   std::string get_name () const override final { return as_string (); }\n \n-  bool contains_type_parameters () const override final\n-  {\n-    for (auto &f : fields)\n-      {\n-\tif (f.get_tyty ()->contains_type_parameters ())\n-\t  return true;\n-      }\n-    return false;\n-  }\n-\n   TupleType *handle_substitions (SubstitutionArgumentMappings mappings);\n \n private:\n@@ -1909,14 +1893,9 @@ class ReferenceType : public BaseType\n \n   BaseType *clone () const final override;\n \n-  bool contains_type_parameters () const override final\n-  {\n-    return get_base ()->contains_type_parameters ();\n-  }\n-\n   bool is_concrete () const override final\n   {\n-    return !contains_type_parameters ();\n+    return get_base ()->is_concrete ();\n   }\n \n   ReferenceType *handle_substitions (SubstitutionArgumentMappings mappings);\n@@ -1962,14 +1941,9 @@ class PointerType : public BaseType\n \n   BaseType *clone () const final override;\n \n-  bool contains_type_parameters () const override final\n-  {\n-    return get_base ()->contains_type_parameters ();\n-  }\n-\n   bool is_concrete () const override final\n   {\n-    return !contains_type_parameters ();\n+    return get_base ()->is_concrete ();\n   }\n \n   PointerType *handle_substitions (SubstitutionArgumentMappings mappings);\n@@ -2104,17 +2078,12 @@ class PlaceholderType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n-  bool contains_type_parameters () const override\n+  bool is_concrete () const override final\n   {\n     if (!can_resolve ())\n-      return false;\n-\n-    return resolve ()->contains_type_parameters ();\n-  }\n+      return true;\n \n-  bool is_concrete () const override final\n-  {\n-    return !contains_type_parameters ();\n+    return resolve ()->is_concrete ();\n   }\n \n private:\n@@ -2177,15 +2146,7 @@ class ProjectionType : public BaseType, public SubstitutionRef\n   const BaseType *get () const { return base; }\n   BaseType *get () { return base; }\n \n-  bool contains_type_parameters () const override\n-  {\n-    return base->contains_type_parameters ();\n-  }\n-\n-  bool is_concrete () const override final\n-  {\n-    return !contains_type_parameters ();\n-  }\n+  bool is_concrete () const override final { return base->is_concrete (); }\n \n   ProjectionType *\n   handle_substitions (SubstitutionArgumentMappings mappings) override final;"}]}