{"sha": "6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "node_id": "C_kwDOANBUbNoAKDZkZjNlYzBlN2UwNzBmZWMwOWUwY2QxZjgwNjQzMDBjYjNhMWQ0MDI", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-11-18T08:10:02Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-02T16:26:19Z"}, "message": "[Ada] Proof of Boolean'Image and Boolean'Value\n\ngcc/ada/\n\n\t* libgnat/s-imgboo.adb: Mark in SPARK.\n\t* libgnat/s-imgboo.ads: Mark in SPARK. Change from Pure to\n\tPreelaborate unit in order to be able to depend on\n\tSystem.Val_Bool.\n\t(Image_Boolean): Functionally specify the result of the\n\tprocedure by calling System.Val_Bool.Value_Boolean on the\n\tresult.\n\t* libgnat/s-valboo.adb: Mark in SPARK.\n\t(First_Non_Space_Ghost): New ghost function.\n\t(Value_Boolean): Change type of L and F to avoid possible range\n\tcheck failure on empty Str.\n\t* libgnat/s-valboo.ads: Mark in SPARK. Duplicate with-clause\n\tfrom body in the spec to be able to call\n\tSystem.Val_Util.Only_Space_Ghost in the contract.\n\t(First_Non_Space_Ghost): New ghost function computing the first\n\tnon-space character in a string.\n\t(Is_Boolean_Image_Ghost): New ghost function computing whether a\n\tstring is the image of a boolean value.\n\t(Value_Boolean): Add in precondition the conditions to avoid\n\traising Constraint_Error. This precondition is never executed,\n\tand only used in proof, thanks to the use of pragma\n\tAssertion_Policy. Given that precondition, the postcondition can\n\tsimply check the first non-space character to decide whether\n\tTrue or False is read.\n\t* libgnat/s-valuti.adb: Mark in SPARK, but use SPARK_Mode Off on\n\tall subprograms not yet proved.\n\t(Bad_Value): Annotate expected exception.\n\t(Normalize_String): Rewrite to avoid possible overflow when\n\tincrementing F in the first loop. Add loop invariants.\n\t* libgnat/s-valuti.ads: Mark in SPARK.\n\t(Bad_Value): Add Depends contract to avoid warning on unused S.\n\t(Only_Space_Ghost): New ghost function to query if string has\n\tonly space in the specified range.\n\t(Normalize_String): Add functional contract.\n\t(Scan_Exponent): Mark spec as not in SPARK as this function has\n\tside-effects.", "tree": {"sha": "4ce5ed79fe2de1a2e7b62f0f52f743b8d239cd04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ce5ed79fe2de1a2e7b62f0f52f743b8d239cd04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "261d367a1019ed98f078709a762cea28f330d289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261d367a1019ed98f078709a762cea28f330d289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261d367a1019ed98f078709a762cea28f330d289"}], "stats": {"total": 236, "additions": 217, "deletions": 19}, "files": [{"sha": "4c1f7c9503f041ded8822d93dce393097b705ee3", "filename": "gcc/ada/libgnat/s-imgboo.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-imgboo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-imgboo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imgboo.adb?ref=6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "patch": "@@ -29,7 +29,17 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package body System.Img_Bool is\n+--  Ghost code, loop invariants and assertions in this unit are meant for\n+--  analysis only, not for run-time checking, as it would be too costly\n+--  otherwise. This is enforced by setting the assertion policy to Ignore.\n+\n+pragma Assertion_Policy (Ghost          => Ignore,\n+                         Loop_Invariant => Ignore,\n+                         Assert         => Ignore);\n+\n+package body System.Img_Bool\n+  with SPARK_Mode\n+is\n \n    -------------------\n    -- Image_Boolean --"}, {"sha": "35de7efd5c4b8f0070f30e6e548bc1ca6470ee53", "filename": "gcc/ada/libgnat/s-imgboo.ads", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-imgboo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-imgboo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imgboo.ads?ref=6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "patch": "@@ -31,13 +31,33 @@\n \n --  Boolean'Image\n \n-package System.Img_Bool is\n-   pragma Pure;\n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n+with System.Val_Bool;\n+\n+package System.Img_Bool\n+  with SPARK_Mode, Preelaborate\n+is\n \n    procedure Image_Boolean\n      (V : Boolean;\n       S : in out String;\n-      P : out Natural);\n+      P : out Natural)\n+   with\n+     Pre  => S'First = 1\n+       and then (if V then S'Length >= 4 else S'Length >= 5),\n+     Post => (if V then P = 4 else P = 5)\n+       and then System.Val_Bool.Is_Boolean_Image_Ghost (S (1 .. P))\n+       and then System.Val_Bool.Value_Boolean (S (1 .. P)) = V;\n    --  Computes Boolean'Image (V) and stores the result in S (1 .. P)\n    --  setting the resulting value of P. The caller guarantees that S\n    --  is long enough to hold the result, and that S'First is 1."}, {"sha": "edfa09af2d1d8abb93cf43ffdde7693af2728487", "filename": "gcc/ada/libgnat/s-valboo.adb", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-valboo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-valboo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valboo.adb?ref=6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "patch": "@@ -29,22 +29,47 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Ghost code, loop invariants and assertions in this unit are meant for\n+--  analysis only, not for run-time checking, as it would be too costly\n+--  otherwise. This is enforced by setting the assertion policy to Ignore.\n+\n+pragma Assertion_Policy (Ghost          => Ignore,\n+                         Loop_Invariant => Ignore,\n+                         Assert         => Ignore);\n+\n with System.Val_Util; use System.Val_Util;\n \n-package body System.Val_Bool is\n+package body System.Val_Bool\n+  with SPARK_Mode\n+is\n+\n+   function First_Non_Space_Ghost (S : String) return Positive is\n+   begin\n+      for J in S'Range loop\n+         if S (J) /= ' ' then\n+            return J;\n+         end if;\n+\n+         pragma Loop_Invariant (for all K in S'First .. J => S (K) = ' ');\n+      end loop;\n+\n+      raise Program_Error;\n+   end First_Non_Space_Ghost;\n \n    -------------------\n    -- Value_Boolean --\n    -------------------\n \n    function Value_Boolean (Str : String) return Boolean is\n-      F : Natural;\n-      L : Natural;\n+      F : Integer;\n+      L : Integer;\n       S : String (Str'Range) := Str;\n \n    begin\n       Normalize_String (S, F, L);\n \n+      pragma Assert (F = First_Non_Space_Ghost (S));\n+\n       if S (F .. L) = \"TRUE\" then\n          return True;\n "}, {"sha": "d8bed1a3f89fbee74a25da5df75817b107654fe5", "filename": "gcc/ada/libgnat/s-valboo.ads", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-valboo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-valboo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valboo.ads?ref=6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "patch": "@@ -29,10 +29,70 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package System.Val_Bool is\n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n+with System.Val_Util;\n+\n+package System.Val_Bool\n+  with SPARK_Mode\n+is\n    pragma Preelaborate;\n \n-   function Value_Boolean (Str : String) return Boolean;\n+   function First_Non_Space_Ghost (S : String) return Positive\n+   with\n+     Ghost,\n+     Pre  => not System.Val_Util.Only_Space_Ghost (S, S'First, S'Last),\n+     Post => First_Non_Space_Ghost'Result in S'Range\n+       and then S (First_Non_Space_Ghost'Result) /= ' '\n+       and then System.Val_Util.Only_Space_Ghost\n+         (S, S'First, First_Non_Space_Ghost'Result - 1);\n+   --  Ghost function that returns the index of the first non-space character\n+   --  in S, which necessarily exists given the precondition on S.\n+\n+   function Is_Boolean_Image_Ghost (Str : String) return Boolean is\n+     (not System.Val_Util.Only_Space_Ghost (Str, Str'First, Str'Last)\n+        and then\n+      (declare\n+         F : constant Positive := First_Non_Space_Ghost (Str);\n+       begin\n+         (F <= Str'Last - 3\n+          and then Str (F)     in 't' | 'T'\n+          and then Str (F + 1) in 'r' | 'R'\n+          and then Str (F + 2) in 'u' | 'U'\n+          and then Str (F + 3) in 'e' | 'E'\n+          and then\n+            (if F + 3 < Str'Last then\n+               System.Val_Util.Only_Space_Ghost (Str, F + 4, Str'Last)))\n+           or else\n+         (F <= Str'Last - 4\n+          and then Str (F)     in 'f' | 'F'\n+          and then Str (F + 1) in 'a' | 'A'\n+          and then Str (F + 2) in 'l' | 'L'\n+          and then Str (F + 3) in 's' | 'S'\n+          and then Str (F + 4) in 'e' | 'E'\n+          and then\n+            (if F + 4 < Str'Last then\n+               System.Val_Util.Only_Space_Ghost (Str, F + 5, Str'Last)))))\n+   with\n+     Ghost;\n+   --  Ghost function that returns True iff Str is the image of a boolean, that\n+   --  is \"true\" or \"false\" in any capitalization, possibly surounded by space\n+   --  characters.\n+\n+   function Value_Boolean (Str : String) return Boolean\n+   with\n+     Pre  => Is_Boolean_Image_Ghost (Str),\n+     Post =>\n+       Value_Boolean'Result = (Str (First_Non_Space_Ghost (Str)) in 't' | 'T');\n    --  Computes Boolean'Value (Str)\n \n end System.Val_Bool;"}, {"sha": "e2ae9e3564672f33ea8d6f090a8b27feef2bb620", "filename": "gcc/ada/libgnat/s-valuti.adb", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-valuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-valuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuti.adb?ref=6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "patch": "@@ -29,15 +29,27 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Ghost code, loop invariants and assertions in this unit are meant for\n+--  analysis only, not for run-time checking, as it would be too costly\n+--  otherwise. This is enforced by setting the assertion policy to Ignore.\n+\n+pragma Assertion_Policy (Ghost          => Ignore,\n+                         Loop_Invariant => Ignore,\n+                         Assert         => Ignore);\n+\n with System.Case_Util; use System.Case_Util;\n \n-package body System.Val_Util is\n+package body System.Val_Util\n+  with SPARK_Mode\n+is\n \n    ---------------\n    -- Bad_Value --\n    ---------------\n \n    procedure Bad_Value (S : String) is\n+      pragma Annotate (GNATprove, Intentional, \"exception might be raised\",\n+                       \"Intentional exception from Bad_Value\");\n    begin\n       --  Bad_Value might be called with very long strings allocated on the\n       --  heap. Limit the size of the message so that we avoid creating a\n@@ -62,21 +74,33 @@ package body System.Val_Util is\n       F := S'First;\n       L := S'Last;\n \n+      --  Case of empty string\n+\n+      if F > L then\n+         return;\n+      end if;\n+\n       --  Scan for leading spaces\n \n-      while F <= L and then S (F) = ' ' loop\n+      while F < L and then S (F) = ' ' loop\n+         pragma Loop_Invariant (F in S'First .. L - 1);\n+         pragma Loop_Invariant (for all J in S'First .. F => S (J) = ' ');\n          F := F + 1;\n       end loop;\n \n-      --  Case of no nonspace characters found\n+      --  Case of no nonspace characters found. Decrease L to ensure L < F\n+      --  without risking an overflow if F is Integer'Last.\n \n-      if F > L then\n+      if S (F) = ' ' then\n+         L := L - 1;\n          return;\n       end if;\n \n       --  Scan for trailing spaces\n \n       while S (L) = ' ' loop\n+         pragma Loop_Invariant (L in F + 1 .. S'Last);\n+         pragma Loop_Invariant (for all J in L .. S'Last => S (J) = ' ');\n          L := L - 1;\n       end loop;\n \n@@ -85,6 +109,8 @@ package body System.Val_Util is\n       if S (F) /= ''' then\n          for J in F .. L loop\n             S (J) := To_Upper (S (J));\n+            pragma Loop_Invariant\n+              (for all K in F .. J => S (K) = To_Upper (S'Loop_Entry (K)));\n          end loop;\n       end if;\n    end Normalize_String;\n@@ -98,6 +124,8 @@ package body System.Val_Util is\n       Ptr  : not null access Integer;\n       Max  : Integer;\n       Real : Boolean := False) return Integer\n+   with\n+     SPARK_Mode => Off  --  Function with side-effect through Ptr\n    is\n       P : Natural := Ptr.all;\n       M : Boolean;\n@@ -181,6 +209,8 @@ package body System.Val_Util is\n       Ptr   : not null access Integer;\n       Max   : Integer;\n       Start : out Positive)\n+   with\n+     SPARK_Mode => Off  --  Not proved yet\n    is\n       P : Natural := Ptr.all;\n \n@@ -226,6 +256,8 @@ package body System.Val_Util is\n       Max   : Integer;\n       Minus : out Boolean;\n       Start : out Positive)\n+   with\n+     SPARK_Mode => Off  --  Not proved yet\n    is\n       P : Natural := Ptr.all;\n \n@@ -283,7 +315,10 @@ package body System.Val_Util is\n    -- Scan_Trailing_Blanks --\n    --------------------------\n \n-   procedure Scan_Trailing_Blanks (Str : String; P : Positive) is\n+   procedure Scan_Trailing_Blanks (Str : String; P : Positive)\n+   with\n+     SPARK_Mode => Off  --  Not proved yet\n+   is\n    begin\n       for J in P .. Str'Last loop\n          if Str (J) /= ' ' then\n@@ -302,6 +337,8 @@ package body System.Val_Util is\n       Ptr : not null access Integer;\n       Max : Integer;\n       Ext : Boolean)\n+   with\n+     SPARK_Mode => Off  --  Not proved yet\n    is\n       C : Character;\n "}, {"sha": "3223707d5e1e1679200c677354523a9189f2e9b7", "filename": "gcc/ada/libgnat/s-valuti.ads", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-valuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402/gcc%2Fada%2Flibgnat%2Fs-valuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuti.ads?ref=6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "patch": "@@ -31,16 +31,60 @@\n \n --  This package provides some common utilities used by the s-valxxx files\n \n-package System.Val_Util is\n-   pragma Pure;\n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n \n-   procedure Bad_Value (S : String);\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n+with System.Case_Util;\n+\n+package System.Val_Util\n+  with SPARK_Mode, Pure\n+is\n+\n+   procedure Bad_Value (S : String)\n+   with\n+     Depends => (null => S);\n    pragma No_Return (Bad_Value);\n    --  Raises constraint error with message: bad input for 'Value: \"xxx\"\n \n+   function Only_Space_Ghost (S : String; From, To : Integer) return Boolean is\n+      (for all J in From .. To => S (J) = ' ')\n+   with\n+     Ghost,\n+     Pre => From > To or else (From >= S'First and then To <= S'Last);\n+   --  Ghost function that returns True if S has only space characters from\n+   --  index From to index To.\n+\n    procedure Normalize_String\n      (S    : in out String;\n-      F, L : out Integer);\n+      F, L : out Integer)\n+   with\n+     Post => (if Only_Space_Ghost (S'Old, S'First, S'Last) then\n+                F > L\n+              else\n+                F >= S'First\n+                  and then L <= S'Last\n+                  and then F <= L\n+                  and then Only_Space_Ghost (S'Old, S'First, F - 1)\n+                  and then S'Old (F) /= ' '\n+                  and then S'Old (L) /= ' '\n+                  and then\n+                    (if L < S'Last then\n+                      Only_Space_Ghost (S'Old, L + 1, S'Last))\n+                  and then\n+                    (if S'Old (F) /= ''' then\n+                      (for all J in S'Range =>\n+                        (if J in F .. L then\n+                           S (J) = System.Case_Util.To_Upper (S'Old (J))\n+                         else\n+                           S (J) = S'Old (J)))));\n    --  This procedure scans the string S setting F to be the index of the first\n    --  non-blank character of S and L to be the index of the last non-blank\n    --  character of S. Any lower case characters present in S will be folded to\n@@ -85,7 +129,9 @@ package System.Val_Util is\n      (Str  : String;\n       Ptr  : not null access Integer;\n       Max  : Integer;\n-      Real : Boolean := False) return Integer;\n+      Real : Boolean := False) return Integer\n+   with\n+     SPARK_Mode => Off;  --  Function with side-effect through Ptr\n    --  Called to scan a possible exponent. Str, Ptr, Max are as described above\n    --  for Scan_Sign. If Ptr.all < Max and Str (Ptr.all) = 'E' or 'e', then an\n    --  exponent is scanned out, with the exponent value returned in Exp, and"}]}