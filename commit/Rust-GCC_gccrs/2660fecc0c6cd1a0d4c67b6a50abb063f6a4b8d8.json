{"sha": "2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY2MGZlY2MwYzZjZDFhMGQ0YzY3YjZhNTBhYmIwNjNmNmE0YjhkOA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-09-28T21:50:34Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-09-28T21:50:34Z"}, "message": "rs6000: Delete HAVE_AS_LWSYNC and TARGET_LWSYNC_INSTRUCTION\n\nAll supported assemblers know lwsync, so we never need to generate this\ninstruction using the .long escape hatch.\n\n\n\t* config.in (HAVE_AS_LWSYNC): Delete.\n\t* config/powerpcspe/powerpcspe.h (TARGET_LWSYNC_INSTRUCTION): Delete.\n\t* config/powerpcspe/sync.md (*lwsync): Always generate lwsync, never\n\tdo it as a .long .\n\t* config/rs6000/rs6000.h (TARGET_LWSYNC_INSTRUCTION): Delete.\n\t* config/rs6000/sync.md (*lwsync): Always generate lwsync, never do it\n\tas a .long .\n\t* configure.ac: Delete HAVE_AS_LWSYNC.\n\t* configure: Regenerate.\n\nFrom-SVN: r264702", "tree": {"sha": "71f007e45e647332caa2228e9bbe2ca75abf9136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71f007e45e647332caa2228e9bbe2ca75abf9136"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44662f681e8be6b3b7eafcec4afa0ecb8cc587cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44662f681e8be6b3b7eafcec4afa0ecb8cc587cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44662f681e8be6b3b7eafcec4afa0ecb8cc587cd"}], "stats": {"total": 100, "additions": 14, "deletions": 86}, "files": [{"sha": "cf52864503cecb46e8584eb4ec0e9f7b2c29e129", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "patch": "@@ -1,3 +1,15 @@\n+2018-09-28  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config.in (HAVE_AS_LWSYNC): Delete.\n+\t* config/powerpcspe/powerpcspe.h (TARGET_LWSYNC_INSTRUCTION): Delete.\n+\t* config/powerpcspe/sync.md (*lwsync): Always generate lwsync, never\n+\tdo it as a .long .\n+\t* config/rs6000/rs6000.h (TARGET_LWSYNC_INSTRUCTION): Delete.\n+\t* config/rs6000/sync.md (*lwsync): Always generate lwsync, never do it\n+\tas a .long .\n+\t* configure.ac: Delete HAVE_AS_LWSYNC.\n+\t* configure: Regenerate.\n+\n 2018-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n             Pierre-Marie de Rodat  <derodat@adacore.com>\n "}, {"sha": "1242326ad98dbb174057adf940f283ed37d4011b", "filename": "gcc/config.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "patch": "@@ -528,12 +528,6 @@\n #endif\n \n \n-/* Define if your assembler supports LWSYNC instructions. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_AS_LWSYNC\n-#endif\n-\n-\n /* Define if your assembler supports the -mabi option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_MABI_OPTION"}, {"sha": "2bb32c7f7acf6a521f67cf0a6efed7ab406a3cff", "filename": "gcc/config/powerpcspe/powerpcspe.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h?ref=2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "patch": "@@ -216,14 +216,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define TARGET_MFCRF 0\n #endif\n \n-/* Define TARGET_LWSYNC_INSTRUCTION if the assembler knows about lwsync.  If\n-   not, generate the lwsync code as an integer constant.  */\n-#ifdef HAVE_AS_LWSYNC\n-#define TARGET_LWSYNC_INSTRUCTION 1\n-#else\n-#define TARGET_LWSYNC_INSTRUCTION 0\n-#endif\n-\n /* Define TARGET_TLS_MARKERS if the target assembler does not support\n    arg markers for __tls_get_addr calls.  */\n #ifndef HAVE_AS_TLS_MARKERS"}, {"sha": "dff3932e63a50a5be7a31aecffab14b524f72346", "filename": "gcc/config/powerpcspe/sync.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfig%2Fpowerpcspe%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfig%2Fpowerpcspe%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fsync.md?ref=2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "patch": "@@ -91,13 +91,10 @@\n \t(unspec:BLK [(match_dup 0)] UNSPEC_LWSYNC))]\n   \"\"\n {\n-  /* Some AIX assemblers don't accept lwsync, so we use a .long.  */\n   if (TARGET_NO_LWSYNC)\n     return \"sync\";\n-  else if (TARGET_LWSYNC_INSTRUCTION)\n-    return \"lwsync\";\n   else\n-    return \".long 0x7c2004ac\";\n+    return \"lwsync\";\n }\n   [(set_attr \"type\" \"sync\")])\n "}, {"sha": "d2fe795fd8aac7527a8485419fd50add0fe1c014", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "patch": "@@ -219,14 +219,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define TARGET_MFCRF 0\n #endif\n \n-/* Define TARGET_LWSYNC_INSTRUCTION if the assembler knows about lwsync.  If\n-   not, generate the lwsync code as an integer constant.  */\n-#ifdef HAVE_AS_LWSYNC\n-#define TARGET_LWSYNC_INSTRUCTION 1\n-#else\n-#define TARGET_LWSYNC_INSTRUCTION 0\n-#endif\n-\n /* Define TARGET_TLS_MARKERS if the target assembler does not support\n    arg markers for __tls_get_addr calls.  */\n #ifndef HAVE_AS_TLS_MARKERS"}, {"sha": "f18b6b77280148f9bed0fc9183367070949785fa", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "patch": "@@ -91,13 +91,10 @@\n \t(unspec:BLK [(match_dup 0)] UNSPEC_LWSYNC))]\n   \"\"\n {\n-  /* Some AIX assemblers don't accept lwsync, so we use a .long.  */\n   if (TARGET_NO_LWSYNC)\n     return \"sync\";\n-  else if (TARGET_LWSYNC_INSTRUCTION)\n-    return \"lwsync\";\n   else\n-    return \".long 0x7c2004ac\";\n+    return \"lwsync\";\n }\n   [(set_attr \"type\" \"sync\")])\n "}, {"sha": "5d2fd184a2361e943f853793783b8b78e190f6a6", "filename": "gcc/configure", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "patch": "@@ -26719,49 +26719,6 @@ if test $gcc_cv_as_powerpc_vsx = yes; then\n \n $as_echo \"#define HAVE_AS_VSX 1\" >>confdefs.h\n \n-fi\n-\n-\n-    case $target in\n-      *-*-aix*) conftest_s='\t.csect .text[PR]\n-\tlwsync';;\n-      *) conftest_s='\t.text\n-\tlwsync';;\n-    esac\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for lwsync support\" >&5\n-$as_echo_n \"checking assembler for lwsync support... \" >&6; }\n-if test \"${gcc_cv_as_powerpc_lwsync+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_powerpc_lwsync=no\n-    if test $in_tree_gas = yes; then\n-    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 19 \\) \\* 1000 + 2`\n-  then gcc_cv_as_powerpc_lwsync=yes\n-fi\n-  elif test x$gcc_cv_as != x; then\n-    $as_echo \"$conftest_s\" > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -a32 -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgcc_cv_as_powerpc_lwsync=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_powerpc_lwsync\" >&5\n-$as_echo \"$gcc_cv_as_powerpc_lwsync\" >&6; }\n-if test $gcc_cv_as_powerpc_lwsync = yes; then\n-\n-$as_echo \"#define HAVE_AS_LWSYNC 1\" >>confdefs.h\n-\n fi\n \n "}, {"sha": "3c1e0ad27c34fc24f7bbc3f287f8289099eecc64", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2660fecc0c6cd1a0d4c67b6a50abb063f6a4b8d8", "patch": "@@ -4557,19 +4557,6 @@ LCF0:\n       [AC_DEFINE(HAVE_AS_VSX, 1,\n \t  [Define if your assembler supports VSX instructions.])])\n \n-    case $target in\n-      *-*-aix*) conftest_s='\t.csect .text[[PR]]\n-\tlwsync';;\n-      *) conftest_s='\t.text\n-\tlwsync';;\n-    esac\n-\n-    gcc_GAS_CHECK_FEATURE([lwsync support],\n-      gcc_cv_as_powerpc_lwsync, [2,19,2], -a32,\n-      [$conftest_s],,\n-      [AC_DEFINE(HAVE_AS_LWSYNC, 1,\n-\t  [Define if your assembler supports LWSYNC instructions.])])\n-\n     case $target in\n       *-*-aix*) conftest_s='\t.machine \"476\"\n \t.csect .text[[PR]]"}]}