{"sha": "fa75faedb19f0e7a4487a7ed1eeb080b590a0e73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE3NWZhZWRiMTlmMGU3YTQ0ODdhN2VkMWVlYjA4MGI1OTBhMGU3Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-04-05T08:25:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-16T13:07:12Z"}, "message": "[Ada] Fix small fallout of freezing change for expression functions\n\n2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* freeze.adb (In_Expanded_Body): Remove unreachable code.\n\t(Freeze_Expression): Rename a couple of local variables.\n\tIn the case of an expanded body, also freeze locally the\n\tentities declared in a nested block.", "tree": {"sha": "37d7bdb4224bbb181b7792e397ae8861afe33b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37d7bdb4224bbb181b7792e397ae8861afe33b80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa75faedb19f0e7a4487a7ed1eeb080b590a0e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa75faedb19f0e7a4487a7ed1eeb080b590a0e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa75faedb19f0e7a4487a7ed1eeb080b590a0e73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa75faedb19f0e7a4487a7ed1eeb080b590a0e73/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba5e7464b6c75945624dceb5e4193b36b9aeaad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba5e7464b6c75945624dceb5e4193b36b9aeaad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ba5e7464b6c75945624dceb5e4193b36b9aeaad"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "8723af33edf9502997157451eecd34ad8a781c3d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 49, "deletions": 41, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa75faedb19f0e7a4487a7ed1eeb080b590a0e73/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa75faedb19f0e7a4487a7ed1eeb080b590a0e73/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=fa75faedb19f0e7a4487a7ed1eeb080b590a0e73", "patch": "@@ -7114,22 +7114,15 @@ package body Freeze is\n       ----------------------\n \n       function In_Expanded_Body (N : Node_Id) return Boolean is\n-         P  : Node_Id;\n+         P  : constant Node_Id := Parent (N);\n          Id : Entity_Id;\n \n       begin\n-         if Nkind (N) = N_Subprogram_Body then\n-            P := N;\n-         else\n-            P := Parent (N);\n-         end if;\n-\n          if Nkind (P) /= N_Subprogram_Body then\n             return False;\n \n-         --  AI12-0152 : an expression function that is a completion\n-         --  is a freeze point. If the body is the result of expansion\n-         --  it is not.\n+         --  AI12-0157: An expression function that is a completion is a freeze\n+         --  point. If the body is the result of expansion, it is not.\n \n          elsif Was_Expression_Function (P) then\n             return not Comes_From_Source (P);\n@@ -7146,9 +7139,8 @@ package body Freeze is\n                          or else Is_TSS (Id, TSS_Stream_Output)\n                          or else Is_TSS (Id, TSS_Stream_Read)\n                          or else Is_TSS (Id, TSS_Stream_Write)\n-                         or else Nkind_In (Original_Node (P),\n-                                           N_Subprogram_Renaming_Declaration,\n-                                           N_Expression_Function))\n+                         or else Nkind (Original_Node (P)) =\n+                                             N_Subprogram_Renaming_Declaration)\n             then\n                return True;\n             else\n@@ -7518,45 +7510,61 @@ package body Freeze is\n \n                   if In_Expanded_Body (Parent_P) then\n                      declare\n-                        Subp : constant Node_Id := Parent (Parent_P);\n-                        Spec : Entity_Id;\n+                        Subp_Body : constant Node_Id := Parent (Parent_P);\n+                        Spec_Id   : Entity_Id;\n \n                      begin\n                         --  Freeze the entity only when it is declared inside\n-                        --  the body of the expander generated procedure.\n-                        --  This case is recognized by the scope of the entity\n-                        --  or its type, which is either the spec for some\n-                        --  enclosing body, or (in the case of init_procs,\n-                        --  for which there are no separate specs) the current\n-                        --  scope.\n-\n-                        if Nkind (Subp) = N_Subprogram_Body then\n-                           Spec := Corresponding_Spec (Subp);\n-\n-                           if (Present (Typ) and then Scope (Typ) = Spec)\n-                                or else\n-                              (Present (Nam) and then Scope (Nam) = Spec)\n-                           then\n-                              exit;\n+                        --  the body of the expander generated procedure. This\n+                        --  case is recognized by the subprogram scope of the\n+                        --  entity or its type, which is either the spec of an\n+                        --  enclosing body, or (in the case of init_procs for\n+                        --  which there is no separate spec) the current scope.\n+\n+                        if Nkind (Subp_Body) = N_Subprogram_Body then\n+                           declare\n+                              S : Entity_Id;\n+\n+                           begin\n+                              Spec_Id := Corresponding_Spec (Subp_Body);\n+\n+                              if Present (Typ) then\n+                                 S := Scope (Typ);\n+                              elsif Present (Nam) then\n+                                 S := Scope (Nam);\n+                              else\n+                                 S := Standard_Standard;\n+                              end if;\n \n-                           elsif Present (Typ)\n-                             and then Scope (Typ) = Current_Scope\n-                             and then Defining_Entity (Subp) = Current_Scope\n-                           then\n-                              exit;\n-                           end if;\n+                              while S /= Standard_Standard\n+                                and then not Is_Subprogram (S)\n+                              loop\n+                                 S := Scope (S);\n+                              end loop;\n+\n+                              if S = Spec_Id then\n+                                 exit;\n+\n+                              elsif Present (Typ)\n+                                and then Scope (Typ) = Current_Scope\n+                                and then\n+                                  Defining_Entity (Subp_Body) = Current_Scope\n+                              then\n+                                 exit;\n+                              end if;\n+                           end;\n                         end if;\n \n                         --  If the entity is not frozen by an expression\n-                        --  function that is a completion, continue climing\n-                        --  the tree.\n+                        --  function that is not a completion, continue\n+                        --  climbing the tree.\n \n-                        if Nkind (Subp) = N_Subprogram_Body\n-                          and then Was_Expression_Function (Subp)\n+                        if Nkind (Subp_Body) = N_Subprogram_Body\n+                          and then Was_Expression_Function (Subp_Body)\n                         then\n                            null;\n \n-                           --  Freeze outside the body\n+                        --  Freeze outside the body\n \n                         else\n                            Parent_P := Parent (Parent_P);"}]}