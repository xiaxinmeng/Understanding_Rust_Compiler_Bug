{"sha": "fe7cc34fd5186cce3771e2bce2f4aacb81b9058c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3Y2MzNGZkNTE4NmNjZTM3NzFlMmJjZTJmNGFhY2I4MWI5MDU4Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-13T10:02:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-13T13:22:48Z"}, "message": "libstdc++: Ensure root-dir converted to forward slash (PR93244)\n\n\tPR libstdc++/93244\n\t* include/bits/fs_path.h (path::generic_string<C,A>)\n\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Convert root-dir to forward-slash.\n\t* testsuite/27_io/filesystem/path/generic/generic_string.cc: Check\n\troot-dir is converted to forward slash in generic pathname.\n\t* testsuite/27_io/filesystem/path/generic/utf.cc: New test.\n\t* testsuite/27_io/filesystem/path/generic/wchar_t.cc: New test.", "tree": {"sha": "dbae02d79d7687a0835641f25dd1c7cb15032368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbae02d79d7687a0835641f25dd1c7cb15032368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4379a931d140a71b36eaecceace319837fda321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4379a931d140a71b36eaecceace319837fda321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4379a931d140a71b36eaecceace319837fda321"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "626f59c65646c82fa9f247565d8182c1257b726e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fe7cc34fd5186cce3771e2bce2f4aacb81b9058c", "patch": "@@ -1,5 +1,13 @@\n 2020-01-13  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/93244\n+\t* include/bits/fs_path.h (path::generic_string<C,A>)\n+\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Convert root-dir to forward-slash.\n+\t* testsuite/27_io/filesystem/path/generic/generic_string.cc: Check\n+\troot-dir is converted to forward slash in generic pathname.\n+\t* testsuite/27_io/filesystem/path/generic/utf.cc: New test.\n+\t* testsuite/27_io/filesystem/path/generic/wchar_t.cc: New test.\n+\n \tPR libstdc++/58605\n \t* include/bits/atomic_base.h (__cpp_lib_atomic_value_initialization):\n \tDefine."}, {"sha": "bf1f09929c366ee5bbf6d552fbb5944a6f68f01e", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=fe7cc34fd5186cce3771e2bce2f4aacb81b9058c", "patch": "@@ -1136,6 +1136,13 @@ namespace __detail\n \t  bool __add_slash = false;\n \t  for (auto& __elem : *this)\n \t    {\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+\t      if (__elem._M_type() == _Type::_Root_dir)\n+\t\t{\n+\t\t  __str += __slash;\n+\t\t  continue;\n+\t\t}\n+#endif\n \t      if (__add_slash)\n \t\t__str += __slash;\n \t      __str += __elem._M_pathname;"}, {"sha": "677f5f5d1c4ab879718829c09e6c720ca204e809", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generic/generic_string.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc?ref=fe7cc34fd5186cce3771e2bce2f4aacb81b9058c", "patch": "@@ -46,8 +46,19 @@ test01()\n   VERIFY( path(\"/a//b//.\").generic_string() == \"/a/b/.\" );\n }\n \n+void\n+test02()\n+{\n+  // PR libstdc++/93244\n+  path p(\"C:\");\n+  p += path::preferred_separator;\n+  p += \"foo/bar\";\n+  VERIFY( p.generic_string() == \"C:/foo/bar\" );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}, {"sha": "9a2f579ebabd5b6dca25ddee352eeafb83312269", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generic/utf.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Futf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Futf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Futf.cc?ref=fe7cc34fd5186cce3771e2bce2f4aacb81b9058c", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+// Copyright (C) 2017-2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++17 30.10.7.4.7 path generic format observers [fs.path.generic.obs]\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+using std::filesystem::path;\n+\n+void\n+test01()\n+{\n+  VERIFY( path().generic_u32string() == U\"\" );\n+  VERIFY( path(\"/\").generic_u32string() == U\"/\" );\n+  VERIFY( path(\"////\").generic_u32string() == U\"/\" );\n+#ifdef __CYGWIN__\n+  VERIFY( path(\"//a\").generic_u32string() == U\"//a\" );\n+  VERIFY( path(\"//a/\").generic_u32string() == U\"//a/\" );\n+  VERIFY( path(\"//a/b\").generic_u32string() == U\"//a/b\" );\n+#else\n+  VERIFY( path(\"//a\").generic_u32string() == U\"/a\" );\n+  VERIFY( path(\"//a/\").generic_u32string() == U\"/a/\" );\n+  VERIFY( path(\"//a/b\").generic_u32string() == U\"/a/b\" );\n+#endif\n+  VERIFY( path(\"/a//b\").generic_u32string() == U\"/a/b\" );\n+  VERIFY( path(\"/a//b/\").generic_u32string() == U\"/a/b/\" );\n+  VERIFY( path(\"/a//b//\").generic_u32string() == U\"/a/b/\" );\n+  VERIFY( path(\"/a//b//.\").generic_u32string() == U\"/a/b/.\" );\n+}\n+\n+void\n+test02()\n+{\n+  // PR libstdc++/93244\n+  path p(\"C:\");\n+  p += path::preferred_separator;\n+  p += \"foo/bar\";\n+  VERIFY( p.generic_u32string() == U\"C:/foo/bar\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "5dacedc7de4266cd06ea2b29dc7f49fe8f4ec17f", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generic/wchar_t.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fwchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7cc34fd5186cce3771e2bce2f4aacb81b9058c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fwchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fwchar_t.cc?ref=fe7cc34fd5186cce3771e2bce2f4aacb81b9058c", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+// Copyright (C) 2017-2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++17 30.10.7.4.7 path generic format observers [fs.path.generic.obs]\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+using std::filesystem::path;\n+\n+void\n+test01()\n+{\n+  VERIFY( path().generic_wstring() == L\"\" );\n+  VERIFY( path(\"/\").generic_wstring() == L\"/\" );\n+  VERIFY( path(\"////\").generic_wstring() == L\"/\" );\n+#ifdef __CYGWIN__\n+  VERIFY( path(\"//a\").generic_wstring() == L\"//a\" );\n+  VERIFY( path(\"//a/\").generic_wstring() == L\"//a/\" );\n+  VERIFY( path(\"//a/b\").generic_wstring() == L\"//a/b\" );\n+#else\n+  VERIFY( path(\"//a\").generic_wstring() == L\"/a\" );\n+  VERIFY( path(\"//a/\").generic_wstring() == L\"/a/\" );\n+  VERIFY( path(\"//a/b\").generic_wstring() == L\"/a/b\" );\n+#endif\n+  VERIFY( path(\"/a//b\").generic_wstring() == L\"/a/b\" );\n+  VERIFY( path(\"/a//b/\").generic_wstring() == L\"/a/b/\" );\n+  VERIFY( path(\"/a//b//\").generic_wstring() == L\"/a/b/\" );\n+  VERIFY( path(\"/a//b//.\").generic_wstring() == L\"/a/b/.\" );\n+}\n+\n+void\n+test02()\n+{\n+  // PR libstdc++/93244\n+  path p(\"C:\");\n+  p += path::preferred_separator;\n+  p += \"foo/bar\";\n+  VERIFY( p.generic_wstring() == L\"C:/foo/bar\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}