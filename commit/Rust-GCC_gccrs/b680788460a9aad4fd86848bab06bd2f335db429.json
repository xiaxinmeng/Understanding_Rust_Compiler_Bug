{"sha": "b680788460a9aad4fd86848bab06bd2f335db429", "node_id": "C_kwDOANBUbNoAKGI2ODA3ODg0NjBhOWFhZDRmZDg2ODQ4YmFiMDZiZDJmMzM1ZGI0Mjk", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-09-01T10:55:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-04T08:45:10Z"}, "message": "[Ada] Remove repeated calls to Prefix in resolution of array accesses\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Indexed_Component, Resolve_Slice): Rename\n\tthe local constant Name to Pref; remove repeated calls to\n\tPrefix.", "tree": {"sha": "7ef672c353b31cf752518b50ff56e8df85feb2a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ef672c353b31cf752518b50ff56e8df85feb2a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b680788460a9aad4fd86848bab06bd2f335db429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b680788460a9aad4fd86848bab06bd2f335db429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b680788460a9aad4fd86848bab06bd2f335db429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b680788460a9aad4fd86848bab06bd2f335db429/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a6f30ed5da68be1fbc53a801093f31615db619b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a6f30ed5da68be1fbc53a801093f31615db619b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a6f30ed5da68be1fbc53a801093f31615db619b"}], "stats": {"total": 83, "additions": 40, "deletions": 43}, "files": [{"sha": "9b8c622d25614be743447651401e42210265f5d4", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 40, "deletions": 43, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b680788460a9aad4fd86848bab06bd2f335db429/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b680788460a9aad4fd86848bab06bd2f335db429/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b680788460a9aad4fd86848bab06bd2f335db429", "patch": "@@ -9253,7 +9253,7 @@ package body Sem_Res is\n    -------------------------------\n \n    procedure Resolve_Indexed_Component (N : Node_Id; Typ : Entity_Id) is\n-      Name       : constant Node_Id := Prefix (N);\n+      Pref       : constant Node_Id := Prefix (N);\n       Expr       : Node_Id;\n       Array_Type : Entity_Id := Empty; -- to prevent junk warning\n       Index      : Node_Id;\n@@ -9264,7 +9264,7 @@ package body Sem_Res is\n          return;\n       end if;\n \n-      if Is_Overloaded (Name) then\n+      if Is_Overloaded (Pref) then\n \n          --  Use the context type to select the prefix that yields the correct\n          --  component type.\n@@ -9273,11 +9273,10 @@ package body Sem_Res is\n             I     : Interp_Index;\n             It    : Interp;\n             I1    : Interp_Index := 0;\n-            P     : constant Node_Id := Prefix (N);\n             Found : Boolean := False;\n \n          begin\n-            Get_First_Interp (P, I, It);\n+            Get_First_Interp (Pref, I, It);\n             while Present (It.Typ) loop\n                if (Is_Array_Type (It.Typ)\n                      and then Covers (Typ, Component_Type (It.Typ)))\n@@ -9289,7 +9288,7 @@ package body Sem_Res is\n                                  Component_Type (Designated_Type (It.Typ))))\n                then\n                   if Found then\n-                     It := Disambiguate (P, I1, I, Any_Type);\n+                     It := Disambiguate (Pref, I1, I, Any_Type);\n \n                      if It = No_Interp then\n                         Error_Msg_N (\"ambiguous prefix for indexing\",  N);\n@@ -9314,11 +9313,11 @@ package body Sem_Res is\n          end;\n \n       else\n-         Array_Type := Etype (Name);\n+         Array_Type := Etype (Pref);\n       end if;\n \n-      Resolve (Name, Array_Type);\n-      Array_Type := Get_Actual_Subtype_If_Available (Name);\n+      Resolve (Pref, Array_Type);\n+      Array_Type := Get_Actual_Subtype_If_Available (Pref);\n \n       --  If the prefix's type is an access type, get to the real array type.\n       --  Note: we do not apply an access check because an explicit dereference\n@@ -9361,19 +9360,18 @@ package body Sem_Res is\n          end loop;\n       end if;\n \n-      Resolve_Implicit_Dereference (Prefix (N));\n+      Resolve_Implicit_Dereference (Pref);\n       Analyze_Dimension (N);\n \n       --  Do not generate the warning on suspicious index if we are analyzing\n       --  package Ada.Tags; otherwise we will report the warning with the\n       --  Prims_Ptr field of the dispatch table.\n \n-      if Scope (Etype (Prefix (N))) = Standard_Standard\n+      if Scope (Etype (Pref)) = Standard_Standard\n         or else not\n-          Is_RTU (Cunit_Entity (Get_Source_Unit (Etype (Prefix (N)))),\n-                  Ada_Tags)\n+          Is_RTU (Cunit_Entity (Get_Source_Unit (Etype (Pref))), Ada_Tags)\n       then\n-         Warn_On_Suspicious_Index (Name, First (Expressions (N)));\n+         Warn_On_Suspicious_Index (Pref, First (Expressions (N)));\n          Eval_Indexed_Component (N);\n       end if;\n \n@@ -9385,16 +9383,16 @@ package body Sem_Res is\n       if Nkind (N) = N_Indexed_Component\n         and then Is_Atomic_Ref_With_Address (N)\n         and then not (Has_Atomic_Components (Array_Type)\n-                       or else (Is_Entity_Name (Prefix (N))\n+                       or else (Is_Entity_Name (Pref)\n                                  and then Has_Atomic_Components\n-                                            (Entity (Prefix (N)))))\n+                                            (Entity (Pref))))\n         and then not Is_Atomic (Component_Type (Array_Type))\n         and then Ada_Version < Ada_2022\n       then\n          Error_Msg_N\n-           (\"??access to non-atomic component of atomic array\", Prefix (N));\n+           (\"??access to non-atomic component of atomic array\", Pref);\n          Error_Msg_N\n-           (\"??\\may cause unexpected accesses to atomic object\", Prefix (N));\n+           (\"??\\may cause unexpected accesses to atomic object\", Pref);\n       end if;\n    end Resolve_Indexed_Component;\n \n@@ -11202,13 +11200,13 @@ package body Sem_Res is\n \n    procedure Resolve_Slice (N : Node_Id; Typ : Entity_Id) is\n       Drange     : constant Node_Id := Discrete_Range (N);\n-      Name       : constant Node_Id := Prefix (N);\n+      Pref       : constant Node_Id := Prefix (N);\n       Array_Type : Entity_Id        := Empty;\n       Dexpr      : Node_Id          := Empty;\n       Index_Type : Entity_Id;\n \n    begin\n-      if Is_Overloaded (Name) then\n+      if Is_Overloaded (Pref) then\n \n          --  Use the context type to select the prefix that yields the correct\n          --  array type.\n@@ -11217,11 +11215,10 @@ package body Sem_Res is\n             I      : Interp_Index;\n             I1     : Interp_Index := 0;\n             It     : Interp;\n-            P      : constant Node_Id := Prefix (N);\n             Found  : Boolean := False;\n \n          begin\n-            Get_First_Interp (P, I,  It);\n+            Get_First_Interp (Pref, I,  It);\n             while Present (It.Typ) loop\n                if (Is_Array_Type (It.Typ)\n                     and then Covers (Typ,  It.Typ))\n@@ -11230,7 +11227,7 @@ package body Sem_Res is\n                            and then Covers (Typ, Designated_Type (It.Typ)))\n                then\n                   if Found then\n-                     It := Disambiguate (P, I1, I, Any_Type);\n+                     It := Disambiguate (Pref, I1, I, Any_Type);\n \n                      if It = No_Interp then\n                         Error_Msg_N (\"ambiguous prefix for slicing\",  N);\n@@ -11253,10 +11250,10 @@ package body Sem_Res is\n          end;\n \n       else\n-         Array_Type := Etype (Name);\n+         Array_Type := Etype (Pref);\n       end if;\n \n-      Resolve (Name, Array_Type);\n+      Resolve (Pref, Array_Type);\n \n       --  If the prefix's type is an access type, get to the real array type.\n       --  Note: we do not apply an access check because an explicit dereference\n@@ -11272,12 +11269,12 @@ package body Sem_Res is\n          --  subtype.\n \n          if not Is_Constrained (Array_Type) then\n-            Remove_Side_Effects (Prefix (N));\n+            Remove_Side_Effects (Pref);\n \n             declare\n                Obj : constant Node_Id :=\n                        Make_Explicit_Dereference (Sloc (N),\n-                         Prefix => New_Copy_Tree (Prefix (N)));\n+                         Prefix => New_Copy_Tree (Pref));\n             begin\n                Set_Etype (Obj, Array_Type);\n                Set_Parent (Obj, Parent (N));\n@@ -11290,30 +11287,30 @@ package body Sem_Res is\n       --  returning an unconstrained string. Same for the Wide variants of\n       --  attribute Image.\n \n-      elsif Is_Entity_Name (Name)\n-        or else Nkind (Name) = N_Explicit_Dereference\n-        or else (Nkind (Name) = N_Function_Call\n-                  and then not Is_Constrained (Etype (Name)))\n+      elsif Is_Entity_Name (Pref)\n+        or else Nkind (Pref) = N_Explicit_Dereference\n+        or else (Nkind (Pref) = N_Function_Call\n+                  and then not Is_Constrained (Etype (Pref)))\n         or else (CodePeer_Mode\n-                  and then Nkind (Name) = N_Attribute_Reference\n-                  and then Attribute_Name (Name) in Name_Image\n+                  and then Nkind (Pref) = N_Attribute_Reference\n+                  and then Attribute_Name (Pref) in Name_Image\n                                                   | Name_Wide_Image\n                                                   | Name_Wide_Wide_Image)\n       then\n-         Array_Type := Get_Actual_Subtype (Name);\n+         Array_Type := Get_Actual_Subtype (Pref);\n \n       --  If the name is a selected component that depends on discriminants,\n       --  build an actual subtype for it. This can happen only when the name\n       --  itself is overloaded; otherwise the actual subtype is created when\n       --  the selected component is analyzed.\n \n-      elsif Nkind (Name) = N_Selected_Component\n+      elsif Nkind (Pref) = N_Selected_Component\n         and then Full_Analysis\n         and then Depends_On_Discriminant (First_Index (Array_Type))\n       then\n          declare\n             Act_Decl : constant Node_Id :=\n-                         Build_Actual_Subtype_Of_Component (Array_Type, Name);\n+                         Build_Actual_Subtype_Of_Component (Array_Type, Pref);\n          begin\n             Insert_Action (N, Act_Decl);\n             Array_Type := Defining_Identifier (Act_Decl);\n@@ -11326,8 +11323,8 @@ package body Sem_Res is\n       --  check applied below (the range check won't get done if the\n       --  unconstrained subtype of the 'Image is used).\n \n-      elsif Nkind (Name) = N_Slice then\n-         Array_Type := Etype (Name);\n+      elsif Nkind (Pref) = N_Slice then\n+         Array_Type := Etype (Pref);\n       end if;\n \n       --  Obtain the type of the array index\n@@ -11350,9 +11347,9 @@ package body Sem_Res is\n \n       if Tagged_Type_Expansion\n         and then RTU_Loaded (Ada_Tags)\n-        and then Nkind (Prefix (N)) = N_Selected_Component\n-        and then Present (Entity (Selector_Name (Prefix (N))))\n-        and then Entity (Selector_Name (Prefix (N))) =\n+        and then Nkind (Pref) = N_Selected_Component\n+        and then Present (Entity (Selector_Name (Pref)))\n+        and then Entity (Selector_Name (Pref)) =\n                    RTE_Record_Component (RE_Prims_Ptr)\n       then\n          null;\n@@ -11418,11 +11415,11 @@ package body Sem_Res is\n       --  Otherwise here is where we check suspicious indexes\n \n       if Nkind (Drange) = N_Range then\n-         Warn_On_Suspicious_Index (Name, Low_Bound  (Drange));\n-         Warn_On_Suspicious_Index (Name, High_Bound (Drange));\n+         Warn_On_Suspicious_Index (Pref, Low_Bound  (Drange));\n+         Warn_On_Suspicious_Index (Pref, High_Bound (Drange));\n       end if;\n \n-      Resolve_Implicit_Dereference (Prefix (N));\n+      Resolve_Implicit_Dereference (Pref);\n       Analyze_Dimension (N);\n       Eval_Slice (N);\n    end Resolve_Slice;"}]}