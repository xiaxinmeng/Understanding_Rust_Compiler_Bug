{"sha": "862a58ed83c681efd2724db2b71294fc71196b73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYyYTU4ZWQ4M2M2ODFlZmQyNzI0ZGIyYjcxMjk0ZmM3MTE5NmI3Mw==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-07-28T13:13:54Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-07-28T13:13:54Z"}, "message": "nvptx: Support 16-bit shifts and extendqihi2\n\nAdd support for 16-bits shifts and for sign extension from 8 bits to\n16 bits.\n\nThis patch has been tested on nvptx-none with no new regressions.\n\n2020-07-28  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Tom de Vries  <tdevries@suse.de>\n\ngcc/ChangeLog:\n\n\t* config/nvptx/nvptx.md (extendqihi2): New instruction.\n\t(ashl<mode>3, ashr<mode>3, lshr<mode>3): Support HImode.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/nvptx/cvt.c: New test.\n\t* gcc.target/nvptx/shift16.c: New test.", "tree": {"sha": "70be495c5a7627e93fea0122eb13fac9d544d595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70be495c5a7627e93fea0122eb13fac9d544d595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/862a58ed83c681efd2724db2b71294fc71196b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862a58ed83c681efd2724db2b71294fc71196b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862a58ed83c681efd2724db2b71294fc71196b73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862a58ed83c681efd2724db2b71294fc71196b73/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "134051f16bd490ada9febb7511a202b34b1821f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134051f16bd490ada9febb7511a202b34b1821f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134051f16bd490ada9febb7511a202b34b1821f3"}], "stats": {"total": 68, "additions": 59, "deletions": 9}, "files": [{"sha": "0538e834a4c263a75c9201724d5a71e0f5494192", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862a58ed83c681efd2724db2b71294fc71196b73/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862a58ed83c681efd2724db2b71294fc71196b73/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=862a58ed83c681efd2724db2b71294fc71196b73", "patch": "@@ -319,6 +319,13 @@\n    %.\\\\tld%A1%u1\\\\t%0, %1;\"\n   [(set_attr \"subregs_ok\" \"true\")])\n \n+(define_insn \"extendqihi2\"\n+  [(set (match_operand:HI 0 \"nvptx_register_operand\" \"=R\")\n+\t(sign_extend:HI (match_operand:QI 1 \"nvptx_register_operand\" \"R\")))]\n+  \"\"\n+  \"%.\\\\tcvt.s16.s8\\\\t%0, %1;\"\n+  [(set_attr \"subregs_ok\" \"true\")])\n+\n (define_insn \"extend<mode>si2\"\n   [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R,R\")\n \t(sign_extend:SI (match_operand:QHIM 1 \"nvptx_nonimmediate_operand\" \"R,m\")))]\n@@ -556,23 +563,23 @@\n ;; Shifts\n \n (define_insn \"ashl<mode>3\"\n-  [(set (match_operand:SDIM 0 \"nvptx_register_operand\" \"=R\")\n-\t(ashift:SDIM (match_operand:SDIM 1 \"nvptx_register_operand\" \"R\")\n-\t\t     (match_operand:SI 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(ashift:HSDIM (match_operand:HSDIM 1 \"nvptx_register_operand\" \"R\")\n+\t\t      (match_operand:SI 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n   \"\"\n   \"%.\\\\tshl.b%T0\\\\t%0, %1, %2;\")\n \n (define_insn \"ashr<mode>3\"\n-  [(set (match_operand:SDIM 0 \"nvptx_register_operand\" \"=R\")\n-\t(ashiftrt:SDIM (match_operand:SDIM 1 \"nvptx_register_operand\" \"R\")\n-\t\t       (match_operand:SI 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(ashiftrt:HSDIM (match_operand:HSDIM 1 \"nvptx_register_operand\" \"R\")\n+\t\t\t(match_operand:SI 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n   \"\"\n   \"%.\\\\tshr.s%T0\\\\t%0, %1, %2;\")\n \n (define_insn \"lshr<mode>3\"\n-  [(set (match_operand:SDIM 0 \"nvptx_register_operand\" \"=R\")\n-\t(lshiftrt:SDIM (match_operand:SDIM 1 \"nvptx_register_operand\" \"R\")\n-\t\t       (match_operand:SI 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(lshiftrt:HSDIM (match_operand:HSDIM 1 \"nvptx_register_operand\" \"R\")\n+\t\t\t(match_operand:SI 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n   \"\"\n   \"%.\\\\tshr.u%T0\\\\t%0, %1, %2;\")\n "}, {"sha": "279ec16b14c4b841a6987c678b65c7df21976a1a", "filename": "gcc/testsuite/gcc.target/nvptx/cvt.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862a58ed83c681efd2724db2b71294fc71196b73/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862a58ed83c681efd2724db2b71294fc71196b73/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fcvt.c?ref=862a58ed83c681efd2724db2b71294fc71196b73", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+signed short s;\n+signed char c;\n+\n+void\n+foo (void)\n+{\n+  s = c;\n+}\n+\n+/* { dg-final { scan-assembler \"(?n)cvt\\\\.s16\\\\.s8.*%r\" } } */"}, {"sha": "185aa62fa9a4e0ed3e98896f603f733ff984a98f", "filename": "gcc/testsuite/gcc.target/nvptx/shift16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862a58ed83c681efd2724db2b71294fc71196b73/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fshift16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862a58ed83c681efd2724db2b71294fc71196b73/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fshift16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fshift16.c?ref=862a58ed83c681efd2724db2b71294fc71196b73", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+void\n+foo (unsigned short u)\n+{\n+  volatile unsigned short u2 = u << 5;\n+}\n+\n+void\n+foo2 (short s)\n+{\n+  volatile unsigned short s2 = s << 5;\n+}\n+\n+void\n+foo3 (unsigned short u)\n+{\n+  volatile unsigned short u2 = u >> 5;\n+}\n+\n+void\n+foo4 (signed short s)\n+{\n+  volatile signed short s2 = s >> 5;\n+}\n+\n+/* { dg-final { scan-assembler-times \"(?n)shl\\\\.b16.*%r\" 2 } } */\n+/* { dg-final { scan-assembler \"(?n)shr\\\\.u16.*%r\" } } */\n+/* { dg-final { scan-assembler \"(?n)shr\\\\.s16.*%r\" } } */"}]}