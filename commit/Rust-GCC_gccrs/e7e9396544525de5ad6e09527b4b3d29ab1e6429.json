{"sha": "e7e9396544525de5ad6e09527b4b3d29ab1e6429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdlOTM5NjU0NDUyNWRlNWFkNmUwOTUyN2I0YjNkMjlhYjFlNjQyOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-02-07T11:11:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-02-07T11:11:30Z"}, "message": "re PR c++/9737 ([DR150] Partial template specialisation selection failure involving template parameter defaults)\n\n\tPR c++/9737\n\t* pt.c (coerce_template_template_parms): Do not templates with\n\texcess default arguments to match template template parameters\n\twith fewer parameters.\n\t(coerce_template_parms): Add use_default_args parameter; use\n\tdefault arguments only when true.\n\t(lookup_template_class): Adjust call to coerce_template_parms.\n\t(fn_type_unification): Likewise.\n\t(unify): Likewise.\n\t(get_bindings): Likewise.\n\t(dependent_type_p): Add assertions.\n\n\tPR c++/9737\n\t* g++.dg/template/ttp15.C: New test.\n\t* g++.dg/template/ttp16.C: Likewise.\n\t* g++.dg/template/ttp17.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp36.C: Remove.\n\t* g++.old-deja/g++.pt/ttp19.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp37.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp38.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp39.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp9.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp40.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp51.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp26.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp36.C: Likewise.\n\n\t* testsuite/testsuite_tr1.h (test_property): New function.\n\t* testsuite/tr1/4_metaprogramming/type_properties/extent/extent.cc \n\t(test01)\n\nFrom-SVN: r110693", "tree": {"sha": "b84246452027309b78b972cb94e51976cb9d0314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b84246452027309b78b972cb94e51976cb9d0314"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7e9396544525de5ad6e09527b4b3d29ab1e6429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e9396544525de5ad6e09527b4b3d29ab1e6429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e9396544525de5ad6e09527b4b3d29ab1e6429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e9396544525de5ad6e09527b4b3d29ab1e6429/comments", "author": null, "committer": null, "parents": [{"sha": "369681318051ea25a6933cf21f32e98919b1c680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369681318051ea25a6933cf21f32e98919b1c680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/369681318051ea25a6933cf21f32e98919b1c680"}], "stats": {"total": 477, "additions": 167, "deletions": 310}, "files": [{"sha": "cdfeaf33d1e3446ff18289da598cb56bd31d7b7d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e7e9396544525de5ad6e09527b4b3d29ab1e6429", "patch": "@@ -1,3 +1,17 @@\n+2006-02-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9737\n+\t* pt.c (coerce_template_template_parms): Do not templates with\n+\texcess default arguments to match template template parameters\n+\twith fewer parameters.\n+\t(coerce_template_parms): Add use_default_args parameter; use\n+\tdefault arguments only when true.\n+\t(lookup_template_class): Adjust call to coerce_template_parms.\n+\t(fn_type_unification): Likewise.\n+\t(unify): Likewise.\n+\t(get_bindings): Likewise.\n+\t(dependent_type_p): Add assertions.\n+\n 2006-02-06  Roger Sayle  <roger@eyesopen.com>\n \n \t* decl.c (grokdeclarator): Don't bother checking for CHAR_TYPE."}, {"sha": "b1da4af144c638159d552b24462a535b61ee46f5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 73, "deletions": 38, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e7e9396544525de5ad6e09527b4b3d29ab1e6429", "patch": "@@ -102,7 +102,8 @@ static tree classtype_mangled_name (tree);\n static char* mangle_class_name_for_template (const char *, tree, tree);\n static tree tsubst_initializer_list (tree, tree);\n static tree get_class_bindings (tree, tree, tree);\n-static tree coerce_template_parms (tree, tree, tree, tsubst_flags_t, int);\n+static tree coerce_template_parms (tree, tree, tree, tsubst_flags_t, \n+\t\t\t\t   bool, bool);\n static void tsubst_enum\t(tree, tree, tree);\n static tree add_to_template_args (tree, tree);\n static tree add_outermost_template_args (tree, tree);\n@@ -3718,17 +3719,12 @@ convert_nontype_argument (tree type, tree expr)\n    vectors of TREE_LIST nodes containing TYPE_DECL, TEMPLATE_DECL\n    or PARM_DECL.\n \n-   ARG_PARMS may contain more parameters than PARM_PARMS.  If this is\n-   the case, then extra parameters must have default arguments.\n-\n    Consider the example:\n-     template <class T, class Allocator = allocator> class vector;\n-     template<template <class U> class TT> class C;\n+     template <class T> class A;\n+     template<template <class U> class TT> class B;\n \n-   C<vector> is a valid instantiation.  PARM_PARMS for the above code\n-   contains a TYPE_DECL (for U),  ARG_PARMS contains two TYPE_DECLs (for\n-   T and Allocator) and OUTER_ARGS contains the argument that is used to\n-   substitute the TT parameter.  */\n+   For B<A>, PARM_PARMS are the parameters to TT, while ARG_PARMS are\n+   the parameters to A, and OUTER_ARGS contains A.  */\n \n static int\n coerce_template_template_parms (tree parm_parms,\n@@ -3746,10 +3742,7 @@ coerce_template_template_parms (tree parm_parms,\n   nparms = TREE_VEC_LENGTH (parm_parms);\n   nargs = TREE_VEC_LENGTH (arg_parms);\n \n-  /* The rule here is opposite of coerce_template_parms.  */\n-  if (nargs < nparms\n-      || (nargs > nparms\n-\t  && TREE_PURPOSE (TREE_VEC_ELT (arg_parms, nparms)) == NULL_TREE))\n+  if (nargs != nparms)\n     return 0;\n \n   for (i = 0; i < nparms; ++i)\n@@ -3988,17 +3981,20 @@ convert_template_argument (tree parm,\n    arguments.  If any error occurs, return error_mark_node. Error and\n    warning messages are issued under control of COMPLAIN.\n \n-   If REQUIRE_ALL_ARGUMENTS is nonzero, all arguments must be\n-   provided in ARGLIST, or else trailing parameters must have default\n-   values.  If REQUIRE_ALL_ARGUMENTS is zero, we will attempt argument\n-   deduction for any unspecified trailing arguments.  */\n+   If REQUIRE_ALL_ARGS is false, argument deduction will be performed\n+   for arugments not specified in ARGS.  Otherwise, if\n+   USE_DEFAULT_ARGS is true, default arguments will be used to fill in\n+   unspecified arguments.  If REQUIRE_ALL_ARGS is true, but\n+   USE_DEFAULT_ARGS is false, then all arguments must be specified in\n+   ARGS.  */\n \n static tree\n coerce_template_parms (tree parms,\n \t\t       tree args,\n \t\t       tree in_decl,\n \t\t       tsubst_flags_t complain,\n-\t\t       int require_all_arguments)\n+\t\t       bool require_all_args,\n+\t\t       bool use_default_args)\n {\n   int nparms, nargs, i, lost = 0;\n   tree inner_args;\n@@ -4011,8 +4007,9 @@ coerce_template_parms (tree parms,\n \n   if (nargs > nparms\n       || (nargs < nparms\n-\t  && require_all_arguments\n-\t  && TREE_PURPOSE (TREE_VEC_ELT (parms, nargs)) == NULL_TREE))\n+\t  && require_all_args\n+\t  && (!use_default_args\n+\t      || !TREE_PURPOSE (TREE_VEC_ELT (parms, nargs)))))\n     {\n       if (complain & tf_error)\n \t{\n@@ -4039,7 +4036,7 @@ coerce_template_parms (tree parms,\n       /* Calculate the Ith argument.  */\n       if (i < nargs)\n \targ = TREE_VEC_ELT (inner_args, i);\n-      else if (require_all_arguments)\n+      else if (require_all_args)\n \t/* There must be a default arg in this case.  */\n \targ = tsubst_template_arg (TREE_PURPOSE (parm), new_args,\n \t\t\t\t   complain, in_decl);\n@@ -4444,7 +4441,9 @@ lookup_template_class (tree d1,\n \targlist = add_to_template_args (current_template_args (), arglist);\n \n       arglist2 = coerce_template_parms (parmlist, arglist, template,\n-\t\t\t\t\tcomplain, /*require_all_args=*/1);\n+\t\t\t\t\tcomplain, \n+\t\t\t\t\t/*require_all_args=*/true,\n+\t\t\t\t\t/*use_default_args=*/true);\n       if (arglist2 == error_mark_node\n \t  || (!uses_template_parms (arglist2)\n \t      && check_instantiated_args (template, arglist2, complain)))\n@@ -4513,7 +4512,9 @@ lookup_template_class (tree d1,\n \t    {\n \t      tree a = coerce_template_parms (TREE_VALUE (t),\n \t\t\t\t\t      arglist, template,\n-\t\t\t\t\t      complain, /*require_all_args=*/1);\n+\t\t\t\t\t      complain, \n+\t\t\t\t\t      /*require_all_args=*/true,\n+\t\t\t\t\t      /*use_default_args=*/true);\n \n \t      /* Don't process further if one of the levels fails.  */\n \t      if (a == error_mark_node)\n@@ -4542,7 +4543,9 @@ lookup_template_class (tree d1,\n \t  = coerce_template_parms (INNERMOST_TEMPLATE_PARMS (parmlist),\n \t\t\t\t   INNERMOST_TEMPLATE_ARGS (arglist),\n \t\t\t\t   template,\n-\t\t\t\t   complain, /*require_all_args=*/1);\n+\t\t\t\t   complain, \n+\t\t\t\t   /*require_all_args=*/true,\n+\t\t\t\t   /*use_default_args=*/true);\n \n       if (arglist == error_mark_node)\n \t/* We were unable to bind the arguments.  */\n@@ -9237,7 +9240,8 @@ fn_type_unification (tree fn,\n       converted_args\n \t= (coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (fn),\n \t\t\t\t  explicit_targs, NULL_TREE, tf_none,\n-\t\t\t\t  /*require_all_arguments=*/0));\n+\t\t\t\t  /*require_all_args=*/false,\n+\t\t\t\t  /*use_default_args=*/false));\n       if (converted_args == error_mark_node)\n \treturn 1;\n \n@@ -10003,21 +10007,44 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t    return 1;\n \n \t  {\n-\t    tree parmtmpl = TYPE_TI_TEMPLATE (parm);\n \t    tree parmvec = TYPE_TI_ARGS (parm);\n \t    tree argvec = INNERMOST_TEMPLATE_ARGS (TYPE_TI_ARGS (arg));\n \t    tree argtmplvec\n \t      = DECL_INNERMOST_TEMPLATE_PARMS (TYPE_TI_TEMPLATE (arg));\n \t    int i;\n \n-\t    /* The parameter and argument roles have to be switched here\n-\t       in order to handle default arguments properly.  For example,\n-\t       template<template <class> class TT> void f(TT<int>)\n-\t       should be able to accept vector<int> which comes from\n-\t       template <class T, class Allocator = allocator>\n-\t       class vector.  */\n+\t    /* The resolution to DR150 makes clear that default\n+\t       arguments for an N-argument may not be used to bind T\n+\t       to a template template parameter with fewer than N\n+\t       parameters.  It is not safe to permit the binding of\n+\t       default arguments as an extension, as that may change\n+\t       the meaning of a conforming program.  Consider:\n+\n+\t\t  struct Dense { static const unsigned int dim = 1; };\n+\n+\t\t  template <template <typename> class View,\n+\t\t\t    typename Block>\n+\t\t  void operator+(float, View<Block> const&);\n+\n+\t\t  template <typename Block, \n+\t\t            unsigned int Dim = Block::dim>\n+\t\t  struct Lvalue_proxy { operator float() const; };\n+\n+\t\t  void\n+\t\t  test_1d (void) {\n+\t\t    Lvalue_proxy<Dense> p;\n+\t\t    float b;\n+\t\t    b + p;\n+\t\t  }\n \n-\t    if (coerce_template_parms (argtmplvec, parmvec, parmtmpl, 0, 1)\n+\t      Here, if Lvalue_proxy is permitted to bind to View, then\n+\t      the global operator+ will be used; if they are not, the\n+\t      Lvalue_proxy will be converted to float.  */\t  \n+\t    if (coerce_template_parms (argtmplvec, parmvec, \n+\t\t\t\t       TYPE_TI_TEMPLATE (parm),\n+\t\t\t\t       tf_none,\n+\t\t\t\t       /*require_all_args=*/true,\n+\t\t\t\t       /*use_default_args=*/false)\n \t\t== error_mark_node)\n \t      return 1;\n \n@@ -10733,9 +10760,11 @@ get_bindings (tree fn, tree decl, tree explicit_args, bool check_rettype)\n \treturn NULL_TREE;\n \n       converted_args\n-\t= (coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (tmpl),\n-\t\t\t\t  explicit_args, NULL_TREE,\n-\t\t\t\t  tf_none, /*require_all_arguments=*/0));\n+\t= coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (tmpl),\n+\t\t\t\t explicit_args, NULL_TREE,\n+\t\t\t\t tf_none, \n+\t\t\t\t /*require_all_args=*/false,\n+\t\t\t\t /*use_default_args=*/false);\n       if (converted_args == error_mark_node)\n \treturn NULL_TREE;\n \n@@ -12215,7 +12244,13 @@ dependent_type_p (tree type)\n   /* If there are no template parameters in scope, then there can't be\n      any dependent types.  */\n   if (!processing_template_decl)\n-    return false;\n+    {\n+      /* If we are not processing a template, then nobody should be\n+\t providing us with a dependent type.  */\n+      gcc_assert (type);\n+      gcc_assert (TREE_CODE (type) != TEMPLATE_TYPE_PARM);\n+      return false;\n+    }\n \n   /* If the type is NULL, we have not computed a type for the entity\n      in question; in that case, the type is dependent.  */"}, {"sha": "dd2fdab292106c104fc54441a7c4fd98e24ce546", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7e9396544525de5ad6e09527b4b3d29ab1e6429", "patch": "@@ -1,3 +1,20 @@\n+2006-02-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9737\n+\t* g++.dg/template/ttp15.C: New test.\n+\t* g++.dg/template/ttp16.C: Likewise.\n+\t* g++.dg/template/ttp17.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp36.C: Remove.\n+\t* g++.old-deja/g++.pt/ttp19.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp37.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp38.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp39.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp9.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp40.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp51.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp26.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp36.C: Likewise.\n+\n 2005-02-06  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/23815"}, {"sha": "5bb285eb556c052b1b7b1ac07929d7da3233045d", "filename": "gcc/testsuite/g++.dg/template/ttp15.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp15.C?ref=e7e9396544525de5ad6e09527b4b3d29ab1e6429", "patch": "@@ -0,0 +1,21 @@\n+struct Dense {\n+  static const unsigned int dim = 1;\n+};\n+\n+template <template <typename> class View,\n+\t  typename Block>\n+void operator+(float, View<Block> const&);\n+\n+template <typename Block,\n+\t  unsigned int Dim = Block::dim>\n+struct Lvalue_proxy {\n+  operator float() const;\n+};\n+\n+void\n+test_1d (void)\n+{\n+  Lvalue_proxy<Dense> p;\n+  float b;\n+  b + p;\n+}"}, {"sha": "c556c7d98a440c50c99c6779dd614986355d5403", "filename": "gcc/testsuite/g++.dg/template/ttp16.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp16.C?ref=e7e9396544525de5ad6e09527b4b3d29ab1e6429", "patch": "@@ -0,0 +1,7 @@\n+template <template <typename> class C>\n+void f() {}\n+\n+template <typename T, typename U = int>\n+struct S {};\n+\n+template void f<S>(); // { dg-error \"match\" }"}, {"sha": "f1ddeb12ef3be4ae4cd27cb7cdfb14be62c0aa6d", "filename": "gcc/testsuite/g++.dg/template/ttp17.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9396544525de5ad6e09527b4b3d29ab1e6429/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp17.C?ref=e7e9396544525de5ad6e09527b4b3d29ab1e6429", "patch": "@@ -0,0 +1,7 @@\n+template <template <typename> class C>\n+void f(C<double>) {}\n+\n+template <typename T, typename U = int>\n+struct S {};\n+\n+template void f(S<double>); // { dg-error \"match\" }"}, {"sha": "76ff60105a672c007ebbe9ac20ff89131d16e8b2", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp19.C", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp19.C?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,25 +0,0 @@\n-// { dg-do run  }\n-#include <vector>\n-\n-template<template<class> class D,class E> class C\n-{\n-\t\tD<E> d;\n-\tpublic:\n-\t\tint size() { return d.size(); }\n-};\n-\n-template<template<class> class D,class E> int size(D<E> &d1)\n-{\n-\td1.size();\n-\tC<D,E> d2;\n-\td2.size();\n-\treturn 0;\n-}\n-\n-int main()\n-{\n-\tstd::vector<int> c1;\n-\tstd::vector<char> c2;\n-\tsize(c1);\n-\tsize(c2);\n-}"}, {"sha": "0be2c4468c88368684a9a5548c61f5205f74c825", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp26.C", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp26.C?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,34 +0,0 @@\n-// { dg-do run  }\n-template<class T, class U = int> class D\n-{\n-\tpublic:\n-\t\tint f();\n-};\n-\n-template<class T, class U> int D<T,U>::f()\n-{\n-\treturn sizeof(T)+sizeof(U);\n-}\n-\n-template<template<class> class D,class E> class C\n-{\n-\t\tD<E> d;\n-\tpublic:\n-\t\tint f() { return d.f(); }\n-};\n-\n-template<template<class> class D,class E> int f(D<E> &d1)\n-{\n-\td1.f();\n-\tC<D,E> d2;\n-\td2.f();\n-\treturn 0;\n-}\n-\n-int main()\n-{\n-\tD<int> c1;\n-\tD<char> c2;\n-\tf(c1);\n-\tf(c2);\n-}"}, {"sha": "4e02a95c5bb233821a073b6de545ee719339b08e", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp35.C", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp35.C?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,36 +0,0 @@\n-// { dg-do run  }\n-template<int T, class U = int> class D\n-{\n-\tpublic:\n-\t\tint f();\n-};\n-\n-template<int T, class U> int D<T,U>::f()\n-{\n-\treturn T+sizeof(U);\n-}\n-\n-template<template<int> class D,class E> class C\n-{\n-\t\tD<1> d;\n-\tpublic:\n-\t\tint f() { return d.f(); }\n-};\n-\n-template<template<int> class D> int f(D<2> &d1)\n-{\n-\td1.f();\n-\treturn 0;\n-}\n-\n-template<template<int> class D> int f(D<1> &d1)\n-{\n-\td1.f();\n-\treturn 0;\n-}\n-\n-int main()\n-{\n-\tD<1> c1;\n-\tf(c1);\n-}"}, {"sha": "2836e8abeabd1073b2b926aec9511b01ecbea1f7", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp36.C", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp36.C?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,30 +0,0 @@\n-// { dg-do run  }\n-template<int T, class U = int> class D\n-{\n-\tpublic:\n-\t\tint f();\n-};\n-\n-template<int T, class U> int D<T,U>::f()\n-{\n-\treturn T+sizeof(U);\n-}\n-\n-template<template<int> class D,class E> class C\n-{\n-\t\tD<1> d;\n-\tpublic:\n-\t\tint f() { return d.f(); }\n-};\n-\n-template<template<int> class D> int f(D<1> &d1)\n-{\n-\td1.f();\n-\treturn 0;\n-}\n-\n-int main()\n-{\n-\tD<1> c1;\n-\tf(c1);\n-}"}, {"sha": "4ef30dd0dd7e3114de3b8123dc554efb15da474b", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp37.C", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp37.C?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,30 +0,0 @@\n-// { dg-do run  }\n-template<int T, class U = int> class D\n-{\n-\tpublic:\n-\t\tint f();\n-};\n-\n-template<int T, class U> int D<T,U>::f()\n-{\n-\treturn T+sizeof(U);\n-}\n-\n-template<template<int> class D,class E> class C\n-{\n-\t\tD<1> d;\n-\tpublic:\n-\t\tint f() { return d.f(); }\n-};\n-\n-template<template<int> class D, int T> int f(D<T> &d1)\n-{\n-\td1.f();\n-\treturn T;\n-}\n-\n-int main()\n-{\n-\tD<1> c1;\n-\tf(c1);\n-}"}, {"sha": "be4bca949a5da21146ffb5166a8c8a5c610b4948", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp38.C", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp38.C?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,30 +0,0 @@\n-// { dg-do run  }\n-template<class T, class U = int> class D\n-{\n-\tpublic:\n-\t\tint f();\n-};\n-\n-template<class T, class U> int D<T,U>::f()\n-{\n-\treturn sizeof(T)+sizeof(U);\n-}\n-\n-template<template<class> class D,class E> class C\n-{\n-\t\tD<E> d;\n-\tpublic:\n-\t\tint f() { return d.f(); }\n-};\n-\n-template<template<class> class D> int f(D<int> &d1)\n-{\n-\td1.f();\n-\treturn 0;\n-}\n-\n-int main()\n-{\n-\tD<int> c1;\n-\tf(c1);\n-}"}, {"sha": "a9620045fc0d433a418aa72e6b1f0a8e7c5c8a9a", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp39.C", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp39.C?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,30 +0,0 @@\n-// { dg-do run  }\n-template<class T, class U = T> class D\n-{\n-\tpublic:\n-\t\tint f();\n-};\n-\n-template<class T, class U> int D<T,U>::f()\n-{\n-\treturn sizeof(T)+sizeof(U);\n-}\n-\n-template<template<class> class D,class E> class C\n-{\n-\t\tD<E> d;\n-\tpublic:\n-\t\tint f() { return d.f(); }\n-};\n-\n-template<template<class> class D> int f(D<int> &d1)\n-{\n-\td1.f();\n-\treturn 0;\n-}\n-\n-int main()\n-{\n-\tD<int> c1;\n-\tf(c1);\n-}"}, {"sha": "49d39e163a75c2b6ca9ea6f0f1a14e9c2c4906e8", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp40.C", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp40.C?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,21 +0,0 @@\n-// { dg-do run  }\n-#include <vector>\n-\n-template<class E,template<class> class DD = std::vector> class C\n-{\n-\t\tDD<E> d;\n-\tpublic:\n-\t\tint f();\n-};\n-\n-template<class E,template<class> class DD> int C<E,DD>::f()\n-{\n-\tDD<E> d2;\n-\treturn d2.size();\n-}\n-\n-int main()\n-{\n-\tC<int> c;\n-\tc.f();\n-}"}, {"sha": "db833497e60c384e8252d46ec8dca51675676e77", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp51.C", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp51.C?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,14 +0,0 @@\n-// { dg-do run  }\n-template<class E, int i, class F, class G=int, int j=i, class H=E> class D\n-{\n-};\n-\n-template<template<class,int,class,class> class D,class E> class C\n-{\n-\tD<E,2,char,bool>\td;\n-};\n-\n-int main()\n-{\n-\tC<D,int> c;\n-}"}, {"sha": "7ca9a9a4432e2aecd5eb750985be1f8bba492a1b", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp9.C", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp9.C?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,14 +0,0 @@\n-// { dg-do run  }\n-template<class E,class F=int> class D\n-{\n-};\n-\n-template<template<class> class D,class E> class C\n-{\n-\tD<E>\td;\n-};\n-\n-int main()\n-{\n-\tC<D,int> c;\n-}"}, {"sha": "520bbe2e4eb450aadb8e7609a645e1386916904e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9396544525de5ad6e09527b4b3d29ab1e6429/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9396544525de5ad6e09527b4b3d29ab1e6429/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e7e9396544525de5ad6e09527b4b3d29ab1e6429", "patch": "@@ -1,3 +1,9 @@\n+2006-02-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* testsuite/testsuite_tr1.h (test_property): New function.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/extent/extent.cc \n+\t(test01) \n+\n 2006-02-05  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/cstdio: New."}, {"sha": "439d435ee8bf4f65e3d4e63d3c913fb40f71b05e", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9396544525de5ad6e09527b4b3d29ab1e6429/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9396544525de5ad6e09527b4b3d29ab1e6429/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=e7e9396544525de5ad6e09527b4b3d29ab1e6429", "patch": "@@ -64,6 +64,20 @@ namespace __gnu_test\n       return ret;\n     }\n \n+  // For testing tr1/type_traits/extent, which has a second template\n+  // parameter.\n+  template<template<typename, unsigned> class Property,\n+           typename Type,\n+\t   unsigned Uint>\n+    bool\n+    test_property(typename Property<Type, Uint>::value_type value)\n+    {\n+      bool ret = true;\n+      ret &= Property<Type, Uint>::value == value;\n+      ret &= Property<Type, Uint>::type::value == value;\n+      return ret;\n+    }\n+\n   template<template<typename, typename> class Relationship,\n            typename Type1, typename Type2>\n     bool"}, {"sha": "6ccecacc06b83924c9e14346c3c74252a169389e", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/extent/extent.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e9396544525de5ad6e09527b4b3d29ab1e6429/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fextent%2Fextent.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e9396544525de5ad6e09527b4b3d29ab1e6429/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fextent%2Fextent.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fextent%2Fextent.cc?ref=e7e9396544525de5ad6e09527b4b3d29ab1e6429", "patch": "@@ -30,19 +30,19 @@ void test01()\n   using std::tr1::extent;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_property<extent, int>(0)) );\n-  VERIFY( (test_property<extent, int[2]>(2)) );\n-  VERIFY( (test_property<extent, int[2][4]>(2)) );\n-  VERIFY( (test_property<extent, int[][4]>(0)) );\n+  VERIFY( (test_property<extent, int, 0>(0)) );\n+  VERIFY( (test_property<extent, int[2], 0>(2)) );\n+  VERIFY( (test_property<extent, int[2][4], 0>(2)) );\n+  VERIFY( (test_property<extent, int[][4], 0>(0)) );\n   VERIFY( (extent<int, 1>::value == 0) );\n   VERIFY( (extent<int[2], 1>::value == 0) );\n   VERIFY( (extent<int[2][4], 1>::value == 4) );\n   VERIFY( (extent<int[][4], 1>::value == 4) );\n   VERIFY( (extent<int[10][4][6][8][12][2], 4>::value == 12) );\n-  VERIFY( (test_property<extent, ClassType>(0)) );\n-  VERIFY( (test_property<extent, ClassType[2]>(2)) );\n-  VERIFY( (test_property<extent, ClassType[2][4]>(2)) );\n-  VERIFY( (test_property<extent, ClassType[][4]>(0)) );\n+  VERIFY( (test_property<extent, ClassType, 0>(0)) );\n+  VERIFY( (test_property<extent, ClassType[2], 0>(2)) );\n+  VERIFY( (test_property<extent, ClassType[2][4], 0>(2)) );\n+  VERIFY( (test_property<extent, ClassType[][4], 0>(0)) );\n   VERIFY( (extent<ClassType, 1>::value == 0) );\n   VERIFY( (extent<ClassType[2], 1>::value == 0) );\n   VERIFY( (extent<ClassType[2][4], 1>::value == 4) );"}]}