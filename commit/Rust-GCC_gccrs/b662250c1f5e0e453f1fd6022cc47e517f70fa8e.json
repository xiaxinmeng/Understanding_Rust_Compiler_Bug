{"sha": "b662250c1f5e0e453f1fd6022cc47e517f70fa8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2MjI1MGMxZjVlMGU0NTNmMWZkNjAyMmNjNDdlNTE3ZjcwZmE4ZQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2021-07-28T09:50:59Z"}, "committer": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2021-07-28T09:50:59Z"}, "message": "AArch64: use stable sorting in generating ldp/stp\n\nIn some corner cases, we have code as below:\n  [base + 0x310] = A\n  [base + 0x320] = B\n  [base + 0x330] = C\n  [base + 0x320] = D\nunstable sorting could result in wrong value in offset 0x320.  The\npatch fixes it by using gcc_stablesort.\n\n2021-07-28  Bin Cheng  <bin.cheng@linux.alibaba.com>\n\n\t* config/aarch64/aarch64.c (aarch64_gen_adjusted_ldpstp): use\n\tgcc_stablesort.", "tree": {"sha": "9a846383080e6e786aa9a9c2aa13d72ebd702ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a846383080e6e786aa9a9c2aa13d72ebd702ae3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b662250c1f5e0e453f1fd6022cc47e517f70fa8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b662250c1f5e0e453f1fd6022cc47e517f70fa8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b662250c1f5e0e453f1fd6022cc47e517f70fa8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b662250c1f5e0e453f1fd6022cc47e517f70fa8e/comments", "author": null, "committer": null, "parents": [{"sha": "0f95c6b2f7dae35ec8c9f211d63edc42baa1d2b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f95c6b2f7dae35ec8c9f211d63edc42baa1d2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f95c6b2f7dae35ec8c9f211d63edc42baa1d2b7"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "e2114605901b0d8d60f46a0a0bd908f86bac828c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b662250c1f5e0e453f1fd6022cc47e517f70fa8e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b662250c1f5e0e453f1fd6022cc47e517f70fa8e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b662250c1f5e0e453f1fd6022cc47e517f70fa8e", "patch": "@@ -24441,8 +24441,16 @@ aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n   for (int i = 0; i < 8; i ++)\n     temp_operands[i] = operands[i];\n \n-  /* Sort the operands.  */\n-  qsort (temp_operands, 4, 2 * sizeof (rtx *), aarch64_ldrstr_offset_compare);\n+  /* Sort the operands.  Note for cases as below:\n+       [base + 0x310] = A\n+       [base + 0x320] = B\n+       [base + 0x330] = C\n+       [base + 0x320] = D\n+     We need stable sorting otherwise wrong data may be store to offset 0x320.\n+     Also note the dead store in above case should be optimized away, but no\n+     guarantees here.  */\n+  gcc_stablesort(temp_operands, 4, 2 * sizeof (rtx *),\n+\t\t aarch64_ldrstr_offset_compare);\n \n   /* Copy the memory operands so that if we have to bail for some\n      reason the original addresses are unchanged.  */"}]}