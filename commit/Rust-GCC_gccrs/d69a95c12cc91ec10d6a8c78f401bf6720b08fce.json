{"sha": "d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "node_id": "C_kwDOANBUbNoAKGQ2OWE5NWMxMmNjOTFlYzEwZDZhOGM3OGY0MDFiZjY3MjBiMDhmY2U", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:42Z"}, "message": "analyzer: fix wording of 'number of bad bytes' note [PR106626]\n\nConsider -fanalyzer on:\n\n#include <stdint.h>\n\nint32_t arr[10];\n\nvoid int_arr_write_element_after_end_far(int32_t x)\n{\n  arr[100] = x;\n}\n\nTrunk x86_64: https://godbolt.org/z/7GqEcYGq6\n\nCurrently we emit:\n\n<source>: In function 'int_arr_write_element_after_end_far':\n<source>:7:12: warning: buffer overflow [CWE-787] [-Wanalyzer-out-of-bounds]\n    7 |   arr[100] = x;\n      |   ~~~~~~~~~^~~\n  event 1\n    |\n    |    3 | int32_t arr[10];\n    |      |         ^~~\n    |      |         |\n    |      |         (1) capacity is 40 bytes\n    |\n    +--> 'int_arr_write_element_after_end_far': events 2-3\n           |\n           |    5 | void int_arr_write_element_after_end_far(int32_t x)\n           |      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n           |      |      |\n           |      |      (2) entry to 'int_arr_write_element_after_end_far'\n           |    6 | {\n           |    7 |   arr[100] = x;\n           |      |   ~~~~~~~~~~~~\n           |      |            |\n           |      |            (3) out-of-bounds write from byte 400 till byte 403 but 'arr' ends at byte 40\n           |\n<source>:7:12: note: write is 4 bytes past the end of 'arr'\n    7 |   arr[100] = x;\n      |   ~~~~~~~~~^~~\n\nThe wording of the final note:\n  \"write is 4 bytes past the end of 'arr'\"\nreads to me as if the \"4 bytes past\" is describing where the access\noccurs, which seems wrong, as the write is far beyond the end of the\narray.  Looking at the implementation, it's actually describing the\nnumber of bytes within the access that are beyond the bounds of the\nbuffer.\n\nThis patch updates the wording so that the final note reads\n  \"write of 4 bytes to beyond the end of 'arr'\"\nwhich more clearly expresses that it's the size of the access\nbeing described.\n\nThe patch also uses inform_n to avoid emitting \"1 bytes\".\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106626\n\t* bounds-checking.cc (buffer_overflow::emit): Use inform_n.\n\tUpdate wording to clarify that we're talking about the size of\n\tthe bad access, rather than its position.\n\t(buffer_overread::emit): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106626\n\t* gcc.dg/analyzer/out-of-bounds-read-char-arr.c: Update for\n\tchanges to expected wording.\n\t* gcc.dg/analyzer/out-of-bounds-read-int-arr.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-write-char-arr.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-write-int-arr.c: Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "c20bdcdbaa6f713c8a66766b272bf0926c53189a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c20bdcdbaa6f713c8a66766b272bf0926c53189a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b82b361af888a112c1717b3725e836184c6bdedd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82b361af888a112c1717b3725e836184c6bdedd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b82b361af888a112c1717b3725e836184c6bdedd"}], "stats": {"total": 104, "additions": 56, "deletions": 48}, "files": [{"sha": "ad7f431ea2f0189b5b901b501d31fa49f105e238", "filename": "gcc/analyzer/bounds-checking.cc", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/gcc%2Fanalyzer%2Fbounds-checking.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/gcc%2Fanalyzer%2Fbounds-checking.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fbounds-checking.cc?ref=d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "patch": "@@ -143,17 +143,28 @@ class buffer_overflow : public past_the_end\n \n     if (warned)\n       {\n-\tchar num_bytes_past_buf[WIDE_INT_PRINT_BUFFER_SIZE];\n-\tprint_dec (m_out_of_bounds_range.m_size_in_bytes,\n-\t\t   num_bytes_past_buf, UNSIGNED);\n-\tif (m_diag_arg)\n-\t  inform (rich_loc->get_loc (), \"write is %s bytes past the end\"\n-\t\t\t\t\t\" of %qE\", num_bytes_past_buf,\n-\t\t\t\t\t\t   m_diag_arg);\n-\telse\n-\t  inform (rich_loc->get_loc (), \"write is %s bytes past the end\"\n-\t\t\t\t\t\"of the region\",\n-\t\t\t\t\tnum_bytes_past_buf);\n+\tif (wi::fits_uhwi_p (m_out_of_bounds_range.m_size_in_bytes))\n+\t  {\n+\t    unsigned HOST_WIDE_INT num_bad_bytes\n+\t      = m_out_of_bounds_range.m_size_in_bytes.to_uhwi ();\n+\t    if (m_diag_arg)\n+\t      inform_n (rich_loc->get_loc (),\n+\t\t\tnum_bad_bytes,\n+\t\t\t\"write of %wu byte to beyond the end of %qE\",\n+\t\t\t\"write of %wu bytes to beyond the end of %qE\",\n+\t\t\tnum_bad_bytes,\n+\t\t\tm_diag_arg);\n+\t    else\n+\t      inform_n (rich_loc->get_loc (),\n+\t\t\tnum_bad_bytes,\n+\t\t\t\"write of %wu byte to beyond the end of the region\",\n+\t\t\t\"write of %wu bytes to beyond the end of the region\",\n+\t\t\tnum_bad_bytes);\n+\t  }\n+\telse if (m_diag_arg)\n+\t  inform (rich_loc->get_loc (),\n+\t\t  \"write to beyond the end of %qE\",\n+\t\t  m_diag_arg);\n       }\n \n     return warned;\n@@ -212,17 +223,28 @@ class buffer_overread : public past_the_end\n \n     if (warned)\n       {\n-\tchar num_bytes_past_buf[WIDE_INT_PRINT_BUFFER_SIZE];\n-\tprint_dec (m_out_of_bounds_range.m_size_in_bytes,\n-\t\t   num_bytes_past_buf, UNSIGNED);\n-\tif (m_diag_arg)\n-\t  inform (rich_loc->get_loc (), \"read is %s bytes past the end\"\n-\t\t\t\t\t\" of %qE\", num_bytes_past_buf,\n-\t\t\t\t\t\t    m_diag_arg);\n-\telse\n-\t  inform (rich_loc->get_loc (), \"read is %s bytes past the end\"\n-\t\t\t\t\t\"of the region\",\n-\t\t\t\t\tnum_bytes_past_buf);\n+\tif (wi::fits_uhwi_p (m_out_of_bounds_range.m_size_in_bytes))\n+\t  {\n+\t    unsigned HOST_WIDE_INT num_bad_bytes\n+\t      = m_out_of_bounds_range.m_size_in_bytes.to_uhwi ();\n+\t    if (m_diag_arg)\n+\t      inform_n (rich_loc->get_loc (),\n+\t\t\tnum_bad_bytes,\n+\t\t\t\"read of %wu byte from after the end of %qE\",\n+\t\t\t\"read of %wu bytes from after the end of %qE\",\n+\t\t\tnum_bad_bytes,\n+\t\t\tm_diag_arg);\n+\t    else\n+\t      inform_n (rich_loc->get_loc (),\n+\t\t\tnum_bad_bytes,\n+\t\t\t\"read of %wu byte from after the end of the region\",\n+\t\t\t\"read of %wu bytes from after the end of the region\",\n+\t\t\tnum_bad_bytes);\n+\t  }\n+\telse if (m_diag_arg)\n+\t  inform (rich_loc->get_loc (),\n+\t\t  \"read from after the end of %qE\",\n+\t\t  m_diag_arg);\n       }\n \n     return warned;"}, {"sha": "2b43000f8334871a3f4463bb5187fb73aa05c143", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-read-char-arr.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c?ref=d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "patch": "@@ -32,24 +32,19 @@ char int_arr_read_element_after_end_off_by_one(void)\n {\n   return arr[10]; /* { dg-warning \"buffer overread\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read at byte 10 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"read is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n-  // FIXME(PR 106626): \"1 bytes\"\n+  /* { dg-message \"read of 1 byte from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }\n \n char int_arr_read_element_after_end_near(void)\n {\n   return arr[11]; /* { dg-warning \"buffer overread\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read at byte 11 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"read is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n-  // FIXME(PR 106626): is the note correct?\n-  // FIXME(PR 106626): \"1 bytes\"\n+  /* { dg-message \"read of 1 byte from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }\n \n char int_arr_read_element_after_end_far(void)\n {\n   return arr[100]; /* { dg-warning \"buffer overread\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read at byte 100 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"read is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n-  // FIXME(PR 106626): the note seems incorrect (size of access is 1 byte, but magnitude beyond boundary is 90)\n-  // FIXME(PR 106626): \"1 bytes\"\n+  /* { dg-message \"read of 1 byte from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }"}, {"sha": "0dc95563620c1b487f3473b7e7f06aa0d0b94267", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-read-int-arr.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c?ref=d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "patch": "@@ -34,21 +34,19 @@ int32_t int_arr_read_element_after_end_off_by_one(void)\n {\n   return arr[10]; /* { dg-warning \"buffer overread\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read from byte 40 till byte 43 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"read is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"read of 4 bytes from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }\n \n int32_t int_arr_read_element_after_end_near(void)\n {\n   return arr[11]; /* { dg-warning \"buffer overread\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read from byte 44 till byte 47 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"read is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n-  // FIXME(PR 106626): is the note correct?\n+  /* { dg-message \"read of 4 bytes from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }\n \n int32_t int_arr_read_element_after_end_far(void)\n {\n   return arr[100]; /* { dg-warning \"buffer overread\" \"warning\" } */\n   /* { dg-message \"out-of-bounds read from byte 400 till byte 403 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"read is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n-  // FIXME(PR 106626): the note seems incorrect (size of access is 4 bytes, but magnitude beyond boundary is 390-393)\n+  /* { dg-message \"read of 4 bytes from after the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }"}, {"sha": "3564476c322b95be3b021483a4583e81b69f7e59", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-char-arr.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c?ref=d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "patch": "@@ -32,24 +32,19 @@ void int_arr_write_element_after_end_off_by_one(char x)\n {\n   arr[10] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte 10 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"write is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n-  // FIXME(PR 106626): \"1 bytes\"\n+  /* { dg-message \"write of 1 byte to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_after_end_near(char x)\n {\n   arr[11] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte 11 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"write is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n-  // FIXME(PR 106626): is the note correct?\n-  // FIXME(PR 106626): \"1 bytes\"\n+  /* { dg-message \"write of 1 byte to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_after_end_far(char x)\n {\n   arr[100] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte 100 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"write is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n-  // FIXME(PR 106626): the note seems incorrect (size of access is 1 byte, but magnitude beyond boundary is 90)\n-  // FIXME(PR 106626): \"1 bytes\"\n+  /* { dg-message \"write of 1 byte to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }"}, {"sha": "24a9a6bfa18cac1d5c80a7f1ae7f4e80dd2bf116", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-int-arr.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69a95c12cc91ec10d6a8c78f401bf6720b08fce/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c?ref=d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "patch": "@@ -34,21 +34,19 @@ void int_arr_write_element_after_end_off_by_one(int32_t x)\n {\n   arr[10] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte 40 till byte 43 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"write is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"write of 4 bytes to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_after_end_near(int32_t x)\n {\n   arr[11] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte 44 till byte 47 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"write is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n-  // FIXME(PR 106626): is the note correct?\n+  /* { dg-message \"write of 4 bytes to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_after_end_far(int32_t x)\n {\n   arr[100] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte 400 till byte 403 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n-  /* { dg-message \"write is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n-  // FIXME(PR 106626): the note seems incorrect (size of access is 4 bytes, but magnitude beyond boundary is 390-393)\n+  /* { dg-message \"write of 4 bytes to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n }"}]}