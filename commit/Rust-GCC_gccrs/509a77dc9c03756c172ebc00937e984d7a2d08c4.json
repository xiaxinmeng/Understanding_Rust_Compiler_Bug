{"sha": "509a77dc9c03756c172ebc00937e984d7a2d08c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA5YTc3ZGM5YzAzNzU2YzE3MmViYzAwOTM3ZTk4NGQ3YTJkMDhjNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2006-10-21T15:49:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-10-21T15:49:41Z"}, "message": "i386.md (extendsfdf2, [...]): Do not force operand1 to register if both operands are memory operands.\n\n        * config/i386/i386.md (extendsfdf2, extendsfxf2, extenddfxf2): Do not\n        force operand1 to register if both operands are memory operands.\n        (*extendsfdf2_mixed, *extendsfdf2_sse, *extendsfdf2_i387)\n        (*extendsfxf2_i387, *extenddfxf2_i387): Do not disable pattern\n        if both operands are memory operands.\n        (truncdfsf2): Do not force operand1 to register if both operands\n        are memory operands.\n\nFrom-SVN: r117934", "tree": {"sha": "77e6abec824072816c4226a20206af10e5d967cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77e6abec824072816c4226a20206af10e5d967cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/509a77dc9c03756c172ebc00937e984d7a2d08c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509a77dc9c03756c172ebc00937e984d7a2d08c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/509a77dc9c03756c172ebc00937e984d7a2d08c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509a77dc9c03756c172ebc00937e984d7a2d08c4/comments", "author": null, "committer": null, "parents": [{"sha": "70ec446fab065664c4152f3af5a31a21d9538aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ec446fab065664c4152f3af5a31a21d9538aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ec446fab065664c4152f3af5a31a21d9538aa7"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "953dd25cd43823be3140e863b49340a5fe509e47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509a77dc9c03756c172ebc00937e984d7a2d08c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509a77dc9c03756c172ebc00937e984d7a2d08c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=509a77dc9c03756c172ebc00937e984d7a2d08c4", "patch": "@@ -1,3 +1,13 @@\n+2006-10-21  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* config/i386/i386.md (extendsfdf2, extendsfxf2, extenddfxf2): Do not\n+\tforce operand1 to register if both operands are memory operands.\n+\t(*extendsfdf2_mixed, *extendsfdf2_sse, *extendsfdf2_i387)\n+\t(*extendsfxf2_i387, *extenddfxf2_i387): Do not disable pattern\n+\tif both operands are memory operands.\n+\t(truncdfsf2): Do not force operand1 to register if both operands\n+\tare memory operands.\n+\n 2006-10-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (LIBS): Add $(GMPLIBS)."}, {"sha": "91596dd0c8883db70a147dbf9caf10c78972d7d3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509a77dc9c03756c172ebc00937e984d7a2d08c4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509a77dc9c03756c172ebc00937e984d7a2d08c4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=509a77dc9c03756c172ebc00937e984d7a2d08c4", "patch": "@@ -3533,15 +3533,12 @@\n \t}\n       operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));\n     }\n-  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n-    operands[1] = force_reg (SFmode, operands[1]);\n })\n \n (define_insn \"*extendsfdf2_mixed\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m,Y\")\n         (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f,mY\")))]\n-  \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"TARGET_SSE2 && TARGET_MIX_SSE_I387\"\n {\n   switch (which_alternative)\n     {\n@@ -3567,17 +3564,15 @@\n (define_insn \"*extendsfdf2_sse\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y\")\n         (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"mY\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n   \"cvtss2sd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*extendsfdf2_i387\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"TARGET_80387\"\n {\n   switch (which_alternative)\n     {\n@@ -3615,15 +3610,12 @@\n \t}\n       operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));\n     }\n-  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n-    operands[1] = force_reg (SFmode, operands[1]);\n })\n \n (define_insn \"*extendsfxf2_i387\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"TARGET_80387\"\n {\n   switch (which_alternative)\n     {\n@@ -3663,15 +3655,12 @@\n \t}\n       operands[1] = validize_mem (force_const_mem (DFmode, operands[1]));\n     }\n-  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n-    operands[1] = force_reg (DFmode, operands[1]);\n })\n \n (define_insn \"*extenddfxf2_i387\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"TARGET_80387\"\n {\n   switch (which_alternative)\n     {\n@@ -3707,9 +3696,6 @@\n \t  (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n {\n-  if (MEM_P (operands[0]) && MEM_P (operands[1]))\n-    operands[1] = force_reg (DFmode, operands[1]);\n-\n   if (TARGET_SSE2 && TARGET_SSE_MATH && !TARGET_MIX_SSE_I387)\n     ;\n   else if (flag_unsafe_math_optimizations)"}]}