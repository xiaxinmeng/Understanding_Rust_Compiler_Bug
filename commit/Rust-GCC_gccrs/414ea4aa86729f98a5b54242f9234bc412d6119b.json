{"sha": "414ea4aa86729f98a5b54242f9234bc412d6119b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0ZWE0YWE4NjcyOWY5OGE1YjU0MjQyZjkyMzRiYzQxMmQ2MTE5Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-12-29T06:08:00Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-12-29T06:08:00Z"}, "message": "pt.c (register_local_specialization): Don't return a value.\n\n\t* pt.c (register_local_specialization): Don't return a value.\n\t(lookup_template_class): Use move-to-front heuristic when looking\n\tup template instantiations.\n\t(instantiate_decl): Only push_to_top_level when we're actually\n\tgoing to instantiate the template.\n\nFrom-SVN: r38524", "tree": {"sha": "7dacee04582443a2aab3c27e754e8e1b50433700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dacee04582443a2aab3c27e754e8e1b50433700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/414ea4aa86729f98a5b54242f9234bc412d6119b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414ea4aa86729f98a5b54242f9234bc412d6119b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/414ea4aa86729f98a5b54242f9234bc412d6119b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414ea4aa86729f98a5b54242f9234bc412d6119b/comments", "author": null, "committer": null, "parents": [{"sha": "6b5273c31e6d2ad38193c25dd3aa83164bfe1b82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b5273c31e6d2ad38193c25dd3aa83164bfe1b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b5273c31e6d2ad38193c25dd3aa83164bfe1b82"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "2000fc225a66becd3e5bad21960c2c82a96230b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414ea4aa86729f98a5b54242f9234bc412d6119b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414ea4aa86729f98a5b54242f9234bc412d6119b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=414ea4aa86729f98a5b54242f9234bc412d6119b", "patch": "@@ -1,3 +1,11 @@\n+2000-12-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* pt.c (register_local_specialization): Don't return a value.\n+\t(lookup_template_class): Use move-to-front heuristic when looking\n+\tup template instantiations.\n+\t(instantiate_decl): Only push_to_top_level when we're actually\n+\tgoing to instantiate the template.\n+\n 2000-12-29  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* search.c (binfo_for_vtable): Return least derived class, not"}, {"sha": "29047d7306bb106d0115eb8fd00513d67f278d50", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414ea4aa86729f98a5b54242f9234bc412d6119b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414ea4aa86729f98a5b54242f9234bc412d6119b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=414ea4aa86729f98a5b54242f9234bc412d6119b", "patch": "@@ -128,7 +128,7 @@ static void push_inline_template_parms_recursive PARAMS ((tree, int));\n static tree retrieve_specialization PARAMS ((tree, tree));\n static tree retrieve_local_specialization PARAMS ((tree));\n static tree register_specialization PARAMS ((tree, tree, tree));\n-static tree register_local_specialization PARAMS ((tree, tree));\n+static void register_local_specialization PARAMS ((tree, tree));\n static int unregister_specialization PARAMS ((tree, tree));\n static tree reduce_template_parm_level PARAMS ((tree, tree, int));\n static tree build_template_decl PARAMS ((tree, tree));\n@@ -923,7 +923,7 @@ unregister_specialization (spec, tmpl)\n /* Like register_specialization, but for local declarations.  We are\n    registering SPEC, an instantiation of TMPL.  */\n \n-static tree\n+static void\n register_local_specialization (spec, tmpl)\n      tree spec;\n      tree tmpl;\n@@ -932,8 +932,6 @@ register_local_specialization (spec, tmpl)\n \n   slot = htab_find_slot (local_specializations, tmpl, INSERT);\n   *slot = spec;\n-\n-  return spec;\n }\n \n /* Print the list of candidate FNS in an error message.  */\n@@ -3842,6 +3840,7 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n       tree gen_tmpl;\n       tree type_decl;\n       tree found = NULL_TREE;\n+      tree *tp;\n       int arg_depth;\n       int parm_depth;\n       int is_partial_instantiation;\n@@ -3956,11 +3955,19 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \t}\n       if (found)\n         return found;\n-      \n-      for (found = DECL_TEMPLATE_INSTANTIATIONS (template);\n-\t   found; found = TREE_CHAIN (found))\n-\tif (comp_template_args (TREE_PURPOSE (found), arglist))\n-\t   return TREE_VALUE (found);\n+\n+      for (tp = &DECL_TEMPLATE_INSTANTIATIONS (template);\n+\t   *tp;\n+\t   tp = &TREE_CHAIN (*tp))\n+\tif (comp_template_args (TREE_PURPOSE (*tp), arglist))\n+\t  {\n+\t    found = *tp;\n+\t    *tp = TREE_CHAIN (*tp);\n+\t    TREE_CHAIN (found) \n+\t      = DECL_TEMPLATE_INSTANTIATIONS (template);\n+\t    DECL_TEMPLATE_INSTANTIATIONS (template) = found;\n+\t    return TREE_VALUE (found);\n+\t  }\n \n       /* This type is a \"partial instantiation\" if any of the template\n \t arguments still involve template parameters.  Note that we set\n@@ -9702,7 +9709,6 @@ instantiate_decl (d, defer_ok)\n   else\n     pattern_defined = ! DECL_IN_AGGR_P (code_pattern);\n \n-  push_to_top_level ();\n   lineno = DECL_SOURCE_LINE (d);\n   input_filename = DECL_SOURCE_FILE (d);\n \n@@ -9766,6 +9772,8 @@ instantiate_decl (d, defer_ok)\n       goto out;\n     }\n \n+  push_to_top_level ();\n+\n   /* We're now committed to instantiating this template.  Mark it as\n      instantiated so that recursive calls to instantiate_decl do not\n      try to instantiate it again.  */\n@@ -9828,11 +9836,12 @@ instantiate_decl (d, defer_ok)\n   /* We're not deferring instantiation any more.  */\n   TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (d)) = 0;\n \n+  pop_from_top_level ();\n+\n out:\n   lineno = line;\n   input_filename = file;\n \n-  pop_from_top_level ();\n   pop_tinst_level ();\n \n   timevar_pop (TV_PARSE);"}]}