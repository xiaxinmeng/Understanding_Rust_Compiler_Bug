{"sha": "c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf", "node_id": "C_kwDOANBUbNoAKGMzN2VkMzhhZGE3ODhhZTQxMGM0OGVjNmQ4YzliNWQ5ZjMyYWI4Y2Y", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-03T22:49:37Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-03T22:49:37Z"}, "message": "c++: ICE with loopy var tmpl auto deduction [PR109300]\n\nNow that we resolve non-dependent variable template-ids ahead of time,\ncp_finish_decl needs to handle a new invalid situation: we can end up\ntrying to instantiate a variable template with deduced type before we\nfully parsed its initializer.\n\n\tPR c++/109300\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (cp_finish_decl): Diagnose ordinary auto deduction\n\twith no initializer, instead of asserting.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/var-templ79.C: New test.", "tree": {"sha": "ed086842ddfca1e4354f5fb116ce07e04e67c423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed086842ddfca1e4354f5fb116ce07e04e67c423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf/comments", "author": null, "committer": null, "parents": [{"sha": "78b8eda0a93f6ab254e18008bc4d1094fe4ae606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b8eda0a93f6ab254e18008bc4d1094fe4ae606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b8eda0a93f6ab254e18008bc4d1094fe4ae606"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "5369714f9b3d23a76195149155a105a7dc112246", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf", "patch": "@@ -8276,7 +8276,20 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t      return;\n \t    }\n \n-\t  gcc_assert (CLASS_PLACEHOLDER_TEMPLATE (auto_node));\n+\t  if (CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n+\t    /* Class deduction with no initializer is OK.  */;\n+\t  else\n+\t    {\n+\t      /* Ordinary auto deduction without an initializer, a situation\n+\t\t which grokdeclarator already detects and rejects for the most\n+\t\t part.  But we can still get here if we're instantiating a\n+\t\t variable template before we've fully parsed (and attached) its\n+\t\t initializer, e.g. template<class> auto x = x<int>;  */\n+\t      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t\"declaration of %q#D has no initializer\", decl);\n+\t      TREE_TYPE (decl) = error_mark_node;\n+\t      return;\n+\t    }\n \t}\n       d_init = init;\n       if (d_init)"}, {"sha": "3c0d276153ab9f042b7fc23ca8d9fa78bfb89e71", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ79.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ79.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ79.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ79.C?ref=c37ed38ada788ae410c48ec6d8c9b5d9f32ab8cf", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/109300\n+// { dg-do compile { target c++14 } }\n+\n+template<class>\n+auto x = x<int>; // { dg-error \"\" }"}]}