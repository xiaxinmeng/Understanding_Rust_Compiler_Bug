{"sha": "d0f6dd47fd7744835f6f2dde4394a5c7a41fe895", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBmNmRkNDdmZDc3NDQ4MzVmNmYyZGRlNDM5NGE1YzdhNDFmZTg5NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-05-30T18:04:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-15T13:42:47Z"}, "message": "[Ada] ACATS 4.1P [BDB4001] - 13.11.4(22-23/3) not enforced\n\ngcc/ada/\n\n\t* exp_ch3.adb (Freeze_Type): Remove warning in expander,\n\treplaced by a corresponding error in sem_ch13.adb. Replace\n\tRTE_Available by RTU_Loaded to avoid adding unnecessary\n\tdependencies.\n\t* sem_ch13.adb (Associate_Storage_Pool): New procedure.\n\t(Analyze_Attribute_Definition_Clause\n\t[Attribute_Simple_Storage_Pool| Attribute_Storage_Pool]): Call\n\tAssociate_Storage_Pool to add proper legality checks on\n\tsubpools.", "tree": {"sha": "83f31a6fb2c734a09f071efa02b193c95e7784a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83f31a6fb2c734a09f071efa02b193c95e7784a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0f6dd47fd7744835f6f2dde4394a5c7a41fe895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f6dd47fd7744835f6f2dde4394a5c7a41fe895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0f6dd47fd7744835f6f2dde4394a5c7a41fe895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f6dd47fd7744835f6f2dde4394a5c7a41fe895/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3221be144431dae561be518c1411849fa65ac486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3221be144431dae561be518c1411849fa65ac486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3221be144431dae561be518c1411849fa65ac486"}], "stats": {"total": 176, "additions": 137, "deletions": 39}, "files": [{"sha": "d90bbadd7c705d8d1e03c4c0365604d4eb94b5d0", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f6dd47fd7744835f6f2dde4394a5c7a41fe895/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f6dd47fd7744835f6f2dde4394a5c7a41fe895/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=d0f6dd47fd7744835f6f2dde4394a5c7a41fe895", "patch": "@@ -8148,61 +8148,44 @@ package body Exp_Ch3 is\n \n             elsif Ada_Version >= Ada_2012\n               and then Present (Associated_Storage_Pool (Def_Id))\n-\n-              --  Omit this check for the case of a configurable run-time that\n-              --  does not provide package System.Storage_Pools.Subpools.\n-\n-              and then RTE_Available (RE_Root_Storage_Pool_With_Subpools)\n+              and then RTU_Loaded (System_Storage_Pools_Subpools)\n             then\n                declare\n                   Loc   : constant Source_Ptr := Sloc (Def_Id);\n                   Pool  : constant Entity_Id :=\n                             Associated_Storage_Pool (Def_Id);\n-                  RSPWS : constant Entity_Id :=\n-                            RTE (RE_Root_Storage_Pool_With_Subpools);\n \n                begin\n                   --  It is known that the accessibility level of the access\n                   --  type is deeper than that of the pool.\n \n                   if Type_Access_Level (Def_Id) > Object_Access_Level (Pool)\n+                    and then Is_Class_Wide_Type (Etype (Pool))\n                     and then not Accessibility_Checks_Suppressed (Def_Id)\n                     and then not Accessibility_Checks_Suppressed (Pool)\n                   then\n-                     --  Static case: the pool is known to be a descendant of\n-                     --  Root_Storage_Pool_With_Subpools.\n-\n-                     if Is_Ancestor (RSPWS, Etype (Pool)) then\n-                        Error_Msg_N\n-                          (\"??subpool access type has deeper accessibility \"\n-                           & \"level than pool\", Def_Id);\n-\n-                        Append_Freeze_Action (Def_Id,\n-                          Make_Raise_Program_Error (Loc,\n-                            Reason => PE_Accessibility_Check_Failed));\n-\n-                     --  Dynamic case: when the pool is of a class-wide type,\n-                     --  it may or may not support subpools depending on the\n-                     --  path of derivation. Generate:\n+                     --  When the pool is of a class-wide type, it may or may\n+                     --  not support subpools depending on the path of\n+                     --  derivation. Generate:\n \n                      --    if Def_Id in RSPWS'Class then\n                      --       raise Program_Error;\n                      --    end if;\n \n-                     elsif Is_Class_Wide_Type (Etype (Pool)) then\n-                        Append_Freeze_Action (Def_Id,\n-                          Make_If_Statement (Loc,\n-                            Condition       =>\n-                              Make_In (Loc,\n-                                Left_Opnd  => New_Occurrence_Of (Pool, Loc),\n-                                Right_Opnd =>\n-                                  New_Occurrence_Of\n-                                    (Class_Wide_Type (RSPWS), Loc)),\n-\n-                            Then_Statements => New_List (\n-                              Make_Raise_Program_Error (Loc,\n-                                Reason => PE_Accessibility_Check_Failed))));\n-                     end if;\n+                     Append_Freeze_Action (Def_Id,\n+                       Make_If_Statement (Loc,\n+                         Condition       =>\n+                           Make_In (Loc,\n+                             Left_Opnd  => New_Occurrence_Of (Pool, Loc),\n+                             Right_Opnd =>\n+                               New_Occurrence_Of\n+                                 (Class_Wide_Type\n+                                   (RTE\n+                                     (RE_Root_Storage_Pool_With_Subpools)),\n+                                  Loc)),\n+                         Then_Statements => New_List (\n+                           Make_Raise_Program_Error (Loc,\n+                             Reason => PE_Accessibility_Check_Failed))));\n                   end if;\n                end;\n             end if;"}, {"sha": "744553614120f71d1fb2a7b11fc06f6c7f65d883", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 118, "deletions": 3, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f6dd47fd7744835f6f2dde4394a5c7a41fe895/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f6dd47fd7744835f6f2dde4394a5c7a41fe895/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d0f6dd47fd7744835f6f2dde4394a5c7a41fe895", "patch": "@@ -7044,6 +7044,121 @@ package body Sem_Ch13 is\n             Pool : Entity_Id;\n             T    : Entity_Id;\n \n+            procedure Associate_Storage_Pool\n+              (Ent : Entity_Id; Pool : Entity_Id);\n+            --  Associate Pool to Ent and perform legality checks on subpools\n+\n+            ----------------------------\n+            -- Associate_Storage_Pool --\n+            ----------------------------\n+\n+            procedure Associate_Storage_Pool\n+              (Ent : Entity_Id; Pool : Entity_Id)\n+            is\n+               function Object_From (Pool : Entity_Id) return Entity_Id;\n+               --  Return the entity of which Pool is a part of\n+\n+               -----------------\n+               -- Object_From --\n+               -----------------\n+\n+               function Object_From\n+                 (Pool : Entity_Id) return Entity_Id\n+               is\n+                  N : Node_Id := Pool;\n+               begin\n+                  if Present (Renamed_Object (Pool)) then\n+                     N := Renamed_Object (Pool);\n+                  end if;\n+\n+                  while Present (N) loop\n+                     case Nkind (N) is\n+                        when N_Defining_Identifier =>\n+                           return N;\n+\n+                        when N_Identifier | N_Expanded_Name =>\n+                           return Entity (N);\n+\n+                        when N_Indexed_Component | N_Selected_Component |\n+                             N_Explicit_Dereference\n+                        =>\n+                           N := Prefix (N);\n+\n+                        when N_Type_Conversion =>\n+                           N := Expression (N);\n+\n+                        when others =>\n+                           --  ??? we probably should handle more cases but\n+                           --  this is good enough in practice for this check\n+                           --  on a corner case.\n+\n+                           return Empty;\n+                     end case;\n+                  end loop;\n+\n+                  return Empty;\n+               end Object_From;\n+\n+               Obj : Entity_Id;\n+\n+            begin\n+               Set_Associated_Storage_Pool (Ent, Pool);\n+\n+               --  Check RM 13.11.4(22-23/3): a specification of a storage pool\n+               --  is illegal if the storage pool supports subpools and:\n+               --  (A) The access type is a general access type.\n+               --  (B) The access type is statically deeper than the storage\n+               --      pool object;\n+               --  (C) The storage pool object is a part of a formal parameter;\n+               --  (D) The storage pool object is a part of the dereference of\n+               --      a non-library level general access type;\n+\n+               if Ada_Version >= Ada_2012\n+                 and then RTU_Loaded (System_Storage_Pools_Subpools)\n+                 and then\n+                   Is_Ancestor (RTE (RE_Root_Storage_Pool_With_Subpools),\n+                                Etype (Pool))\n+               then\n+                  --  check (A)\n+\n+                  if Ekind (Etype (Ent)) = E_General_Access_Type then\n+                     Error_Msg_N\n+                       (\"subpool cannot be used on general access type\", Ent);\n+                  end if;\n+\n+                  --  check (B)\n+\n+                  if Type_Access_Level (Ent) > Object_Access_Level (Pool) then\n+                     Error_Msg_N\n+                       (\"subpool access type has deeper accessibility \"\n+                        & \"level than pool\", Ent);\n+                     return;\n+                  end if;\n+\n+                  Obj := Object_From (Pool);\n+\n+                  --  check (C)\n+\n+                  if Present (Obj) and then Ekind (Obj) in Formal_Kind then\n+                     Error_Msg_N\n+                       (\"subpool cannot be part of a parameter\", Ent);\n+                     return;\n+                  end if;\n+\n+                  --  check (D)\n+\n+                  if Present (Obj)\n+                    and then Ekind (Etype (Obj)) = E_General_Access_Type\n+                    and then not Is_Library_Level_Entity (Etype (Obj))\n+                  then\n+                     Error_Msg_N\n+                       (\"subpool cannot be part of the dereference of a \" &\n+                        \"nested general access type\", Ent);\n+                     return;\n+                  end if;\n+               end if;\n+            end Associate_Storage_Pool;\n+\n          begin\n             if Ekind (U_Ent) = E_Access_Subprogram_Type then\n                Error_Msg_N\n@@ -7167,7 +7282,7 @@ package body Sem_Ch13 is\n                   end if;\n \n                   Analyze (Rnode);\n-                  Set_Associated_Storage_Pool (U_Ent, Pool);\n+                  Associate_Storage_Pool (U_Ent, Pool);\n                end;\n \n             elsif Is_Entity_Name (Expr) then\n@@ -7189,14 +7304,14 @@ package body Sem_Ch13 is\n                   Pool := Entity (Expression (Renamed_Object (Pool)));\n                end if;\n \n-               Set_Associated_Storage_Pool (U_Ent, Pool);\n+               Associate_Storage_Pool (U_Ent, Pool);\n \n             elsif Nkind (Expr) = N_Type_Conversion\n               and then Is_Entity_Name (Expression (Expr))\n               and then Nkind (Original_Node (Expr)) = N_Attribute_Reference\n             then\n                Pool := Entity (Expression (Expr));\n-               Set_Associated_Storage_Pool (U_Ent, Pool);\n+               Associate_Storage_Pool (U_Ent, Pool);\n \n             else\n                Error_Msg_N (\"incorrect reference to a Storage Pool\", Expr);"}]}