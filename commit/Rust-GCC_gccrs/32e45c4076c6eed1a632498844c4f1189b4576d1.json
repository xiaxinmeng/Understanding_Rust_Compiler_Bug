{"sha": "32e45c4076c6eed1a632498844c4f1189b4576d1", "node_id": "C_kwDOANBUbNoAKDMyZTQ1YzQwNzZjNmVlZDFhNjMyNDk4ODQ0YzRmMTE4OWI0NTc2ZDE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-06T13:46:17Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-12T11:27:45Z"}, "message": "Support type resolution on super traits on dyn objects\n\nWhen checking if specified bounds satisfy other bounds we must lookup the\nsuper traits. To finish the support for super traits we need to redo the\ncomputation of method addresses to support super traits.\n\nAddresses #914", "tree": {"sha": "19a1e7416ec7dd9966deb04de518dbddc668ebdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a1e7416ec7dd9966deb04de518dbddc668ebdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32e45c4076c6eed1a632498844c4f1189b4576d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e45c4076c6eed1a632498844c4f1189b4576d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e45c4076c6eed1a632498844c4f1189b4576d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e45c4076c6eed1a632498844c4f1189b4576d1/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7320510e7bb774295ecbd8089a9f51d6475959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7320510e7bb774295ecbd8089a9f51d6475959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7320510e7bb774295ecbd8089a9f51d6475959"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "0c72a167a70f3e22944fb30900ddf170230516fe", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e45c4076c6eed1a632498844c4f1189b4576d1/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e45c4076c6eed1a632498844c4f1189b4576d1/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=32e45c4076c6eed1a632498844c4f1189b4576d1", "patch": "@@ -247,6 +247,8 @@ HIRCompileBase::compute_address_for_trait_item (\n   // Algo:\n   // check if there is an impl-item for this trait-item-ref first\n   // else assert that the trait-item-ref has an implementation\n+  //\n+  // FIXME this does not support super traits\n \n   TyTy::TypeBoundPredicateItem predicate_item\n     = predicate->lookup_associated_item (ref->get_identifier ());"}, {"sha": "d0814f60eafdf55b8bfe29df3efea7f08b47564d", "filename": "gcc/rust/typecheck/rust-hir-trait-ref.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e45c4076c6eed1a632498844c4f1189b4576d1/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e45c4076c6eed1a632498844c4f1189b4576d1/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h?ref=32e45c4076c6eed1a632498844c4f1189b4576d1", "patch": "@@ -380,6 +380,16 @@ class TraitReference\n     return item_refs;\n   }\n \n+  void get_trait_items_and_supers (\n+    std::vector<const TraitItemReference *> &result) const\n+  {\n+    for (const auto &item : item_refs)\n+      result.push_back (&item);\n+\n+    for (const auto &super_trait : super_traits)\n+      super_trait->get_trait_items_and_supers (result);\n+  }\n+\n   void on_resolved ()\n   {\n     for (auto &item : item_refs)\n@@ -451,6 +461,20 @@ class TraitReference\n     return trait_substs;\n   }\n \n+  bool satisfies_bound (const TraitReference &reference) const\n+  {\n+    if (is_equal (reference))\n+      return true;\n+\n+    for (const auto &super_trait : super_traits)\n+      {\n+\tif (super_trait->satisfies_bound (reference))\n+\t  return true;\n+      }\n+\n+    return false;\n+  }\n+\n private:\n   const HIR::Trait *hir_trait_ref;\n   std::vector<TraitItemReference> item_refs;"}, {"sha": "65b9f816004ae97a20cda1e831121ed7cb68c370", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e45c4076c6eed1a632498844c4f1189b4576d1/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e45c4076c6eed1a632498844c4f1189b4576d1/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=32e45c4076c6eed1a632498844c4f1189b4576d1", "patch": "@@ -136,22 +136,18 @@ bool\n BaseType::satisfies_bound (const TypeBoundPredicate &predicate) const\n {\n   const Resolver::TraitReference *query = predicate.get ();\n-  for (auto &bound : specified_bounds)\n+  for (const auto &bound : specified_bounds)\n     {\n       const Resolver::TraitReference *item = bound.get ();\n-      bool found = item->get_mappings ().get_defid ()\n-\t\t   == query->get_mappings ().get_defid ();\n-      if (found)\n+      if (item->satisfies_bound (*query))\n \treturn true;\n     }\n \n   auto probed = Resolver::TypeBoundsProbe::Probe (this);\n-  for (auto &b : probed)\n+  for (const auto &b : probed)\n     {\n       const Resolver::TraitReference *bound = b.first;\n-      bool found = bound->get_mappings ().get_defid ()\n-\t\t   == query->get_mappings ().get_defid ();\n-      if (found)\n+      if (bound->satisfies_bound (*query))\n \treturn true;\n     }\n \n@@ -191,7 +187,6 @@ BaseType::bounds_compatible (const BaseType &other, Location locus,\n \t  rust_error_at (r,\n \t\t\t \"bounds not satisfied for %s %<%s%> is not satisfied\",\n \t\t\t other.get_name ().c_str (), missing_preds.c_str ());\n-\t  // rust_assert (!emit_error);\n \t}\n     }\n \n@@ -2956,23 +2951,15 @@ DynamicObjectType::get_object_items () const\n   for (auto &bound : get_specified_bounds ())\n     {\n       const Resolver::TraitReference *trait = bound.get ();\n-      for (auto &item : trait->get_trait_items ())\n-\t{\n-\t  if (item.get_trait_item_type ()\n-\t\t== Resolver::TraitItemReference::TraitItemType::FN\n-\t      && item.is_object_safe ())\n-\t    items.push_back ({&item, &bound});\n-\t}\n+      std::vector<const Resolver::TraitItemReference *> trait_items;\n+      trait->get_trait_items_and_supers (trait_items);\n \n-      for (auto &super_trait : trait->get_super_traits ())\n+      for (auto &item : trait_items)\n \t{\n-\t  for (auto &item : super_trait->get_trait_items ())\n-\t    {\n-\t      if (item.get_trait_item_type ()\n-\t\t    == Resolver::TraitItemReference::TraitItemType::FN\n-\t\t  && item.is_object_safe ())\n-\t\titems.push_back ({&item, &bound});\n-\t    }\n+\t  if (item->get_trait_item_type ()\n+\t\t== Resolver::TraitItemReference::TraitItemType::FN\n+\t      && item->is_object_safe ())\n+\t    items.push_back ({item, &bound});\n \t}\n     }\n   return items;"}]}