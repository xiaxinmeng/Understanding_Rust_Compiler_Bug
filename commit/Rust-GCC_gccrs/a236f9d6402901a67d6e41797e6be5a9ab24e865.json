{"sha": "a236f9d6402901a67d6e41797e6be5a9ab24e865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIzNmY5ZDY0MDI5MDFhNjdkNmU0MTc5N2U2YmU1YTlhYjI0ZTg2NQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2018-09-09T18:05:48Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2018-09-09T18:05:48Z"}, "message": "re PR target/85666 (gcc-8.0.1 fails to build mmix target: gcc/libgcc/libgcc2.h:203:20: internal compiler error: in leaf_function_p, at final.c:4488)\n\n\tPR target/85666\n\t* config/mmix/mmix.c (MMIX_CFUN_NEEDS_SAVED_EH_RETURN_ADDRESS): Don't\n\tcall leaf_function_p, instead use has_hard_reg_initial_val.\n\nFrom-SVN: r264182", "tree": {"sha": "4a07e45e1969fadbfcf83dd1676f4ee397d97deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a07e45e1969fadbfcf83dd1676f4ee397d97deb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a236f9d6402901a67d6e41797e6be5a9ab24e865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a236f9d6402901a67d6e41797e6be5a9ab24e865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a236f9d6402901a67d6e41797e6be5a9ab24e865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a236f9d6402901a67d6e41797e6be5a9ab24e865/comments", "author": null, "committer": null, "parents": [{"sha": "b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "270c67e37b232d9548cff9f90ca7b268742551ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a236f9d6402901a67d6e41797e6be5a9ab24e865/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a236f9d6402901a67d6e41797e6be5a9ab24e865/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a236f9d6402901a67d6e41797e6be5a9ab24e865", "patch": "@@ -1,3 +1,9 @@\n+2018-09-09  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\tPR target/85666\n+\t* config/mmix/mmix.c (MMIX_CFUN_NEEDS_SAVED_EH_RETURN_ADDRESS): Don't\n+\tcall leaf_function_p, instead use has_hard_reg_initial_val.\n+\n 2018-09-09  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.h (pfatal_with_name): Don't declare here."}, {"sha": "5ee9930620c32eea6c5761f01dc729027b3c46a2", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a236f9d6402901a67d6e41797e6be5a9ab24e865/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a236f9d6402901a67d6e41797e6be5a9ab24e865/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a236f9d6402901a67d6e41797e6be5a9ab24e865", "patch": "@@ -60,19 +60,16 @@ along with GCC; see the file COPYING3.  If not see\n \n /* We have no means to tell DWARF 2 about the register stack, so we need\n    to store the return address on the stack if an exception can get into\n-   this function.  FIXME: Narrow condition.  Before any whole-function\n-   analysis, df_regs_ever_live_p () isn't initialized.  We know it's up-to-date\n-   after reload_completed; it may contain incorrect information some time\n-   before that.  Within a RTL sequence (after a call to start_sequence,\n-   such as in RTL expanders), leaf_function_p doesn't see all insns\n-   (perhaps any insn).  But regs_ever_live is up-to-date when\n-   leaf_function_p () isn't, so we \"or\" them together to get accurate\n-   information.  FIXME: Some tweak to leaf_function_p might be\n-   preferable.  */\n+   this function.  We'll have an \"initial value\" recorded for the\n+   return-register if we've seen a call instruction emitted.  This note\n+   will be inaccurate before instructions are emitted, but the only caller\n+   at that time is looking for modulo from stack-boundary, to which the\n+   return-address does not contribute, and which is always 0 for MMIX\n+   anyway.  Beware of calling leaf_function_p here, as it'll abort if\n+   called within a sequence.  */\n #define MMIX_CFUN_NEEDS_SAVED_EH_RETURN_ADDRESS\t\t\t\\\n  (flag_exceptions\t\t\t\t\t\t\\\n-  && ((reload_completed && df_regs_ever_live_p (MMIX_rJ_REGNUM))\t\\\n-      || !leaf_function_p ()))\n+  && has_hard_reg_initial_val (Pmode, MMIX_INCOMING_RETURN_ADDRESS_REGNUM))\n \n #define IS_MMIX_EH_RETURN_DATA_REG(REGNO)\t\\\n  (crtl->calls_eh_return\t\t\\"}]}