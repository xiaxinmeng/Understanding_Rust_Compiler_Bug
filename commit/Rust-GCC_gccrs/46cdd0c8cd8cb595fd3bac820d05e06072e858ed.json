{"sha": "46cdd0c8cd8cb595fd3bac820d05e06072e858ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjZGQwYzhjZDhjYjU5NWZkM2JhYzgyMGQwNWUwNjA3MmU4NThlZA==", "commit": {"author": {"name": "Mircea Namolaru", "email": "mircea.namolaru@inria.fr", "date": "2014-11-17T22:59:07Z"}, "committer": {"name": "Mircea Namolaru", "email": "mircea@gcc.gnu.org", "date": "2014-11-17T22:59:07Z"}, "message": "Support for unroll and jam optimization.\n\nFrom-SVN: r217682", "tree": {"sha": "f9c6e2277ba485f304e2cbb5382a7d770ed56beb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9c6e2277ba485f304e2cbb5382a7d770ed56beb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46cdd0c8cd8cb595fd3bac820d05e06072e858ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cdd0c8cd8cb595fd3bac820d05e06072e858ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46cdd0c8cd8cb595fd3bac820d05e06072e858ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cdd0c8cd8cb595fd3bac820d05e06072e858ed/comments", "author": null, "committer": null, "parents": [{"sha": "d6f1bcb23dc5edba2f4035829a9055645d4c21a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f1bcb23dc5edba2f4035829a9055645d4c21a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f1bcb23dc5edba2f4035829a9055645d4c21a0"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "a04b10a35759a1b5f6b544d36ebde5ff4fa31217", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cdd0c8cd8cb595fd3bac820d05e06072e858ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cdd0c8cd8cb595fd3bac820d05e06072e858ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46cdd0c8cd8cb595fd3bac820d05e06072e858ed", "patch": "@@ -1,3 +1,11 @@\n+2014-11-17  Mircea Namolaru  <mircea.namolaru@inria.fr>\n+\n+\t* doc/invoke.texi (floop-unroll-and-jam): Document\n+\t(loop-unroll-jam-size): Likewise.\n+\t(loop-unroll-jam-depth): Likewise.\n+\t* graphite-optimize-isl.c (getPrevectorMap_full): Modify comment.\n+\t(getScheduleForBandList): Replaced unsafe union_map reuse.\n+\n 2014-11-17  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/aarch64/thunderx.md: Remove copyright which should not"}, {"sha": "89edddb4712baa6c508eb3986fb3f7ead621a6b4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cdd0c8cd8cb595fd3bac820d05e06072e858ed/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cdd0c8cd8cb595fd3bac820d05e06072e858ed/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=46cdd0c8cd8cb595fd3bac820d05e06072e858ed", "patch": "@@ -391,7 +391,8 @@ Objective-C and Objective-C++ Dialects}.\n -fno-ira-share-spill-slots -fira-verbose=@var{n} @gol\n -fisolate-erroneous-paths-dereference -fisolate-erroneous-paths-attribute @gol\n -fivopts -fkeep-inline-functions -fkeep-static-consts -flive-range-shrinkage @gol\n--floop-block -floop-interchange -floop-strip-mine -floop-nest-optimize @gol\n+-floop-block -floop-interchange -floop-strip-mine @gol  \n+-floop-unroll-and-jam -floop-nest-optimize @gol\n -floop-parallelize-all -flra-remat -flto -flto-compression-level @gol\n -flto-partition=@var{alg} -flto-report -flto-report-wpa -fmerge-all-constants @gol\n -fmerge-constants -fmodulo-sched -fmodulo-sched-allow-regmoves @gol\n@@ -8352,6 +8353,13 @@ optimizer based on the Pluto optimization algorithms.  It calculates a loop\n structure optimized for data-locality and parallelism.  This option\n is experimental.\n \n+@item -floop-unroll-and-jam\n+@opindex floop-unroll-and-jam\n+Enable unroll and jam for the ISL based loop nest optimizer.  The unroll \n+factor can be changed using the @option{loop-unroll-jam-size} parameter.\n+The unrolled dimension (counting from the most inner one) can be changed \n+using the @option{loop-unroll-jam-depth} parameter.                 .\n+\n @item -floop-parallelize-all\n @opindex floop-parallelize-all\n Use the Graphite data dependence analysis to identify loops that can\n@@ -10469,6 +10477,14 @@ loop in the loop nest by a given number of iterations.  The strip\n length can be changed using the @option{loop-block-tile-size}\n parameter.  The default value is 51 iterations.\n \n+@item loop-unroll-jam-size\n+Specify the unroll factor for the @option{-floop-unroll-and-jam}.  The \n+default value is 4.\n+\n+@item loop-unroll-jam-depth\n+Specify the dimension to be unrolled (counting from the most inner loop)\n+for the  @option{-floop-unroll-and-jam}.  The default value is 2.\n+\n @item ipa-cp-value-list-size\n IPA-CP attempts to track all possible values and types passed to a function's\n parameter in order to propagate them and perform devirtualization."}, {"sha": "195101a35727adda22f44ccaa0558ea86018633b", "filename": "gcc/graphite-optimize-isl.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cdd0c8cd8cb595fd3bac820d05e06072e858ed/gcc%2Fgraphite-optimize-isl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cdd0c8cd8cb595fd3bac820d05e06072e858ed/gcc%2Fgraphite-optimize-isl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-optimize-isl.c?ref=46cdd0c8cd8cb595fd3bac820d05e06072e858ed", "patch": "@@ -320,7 +320,7 @@ getPrevectorMap (isl_ctx *ctx, int DimToVectorize,\n                         ip >= 0\n \n    The image of this map is the separation class. The range of this map includes\n-   all the i that are multiple of 4 in the domain beside the greater one. \n+   all the i multiple of 4 in the domain such as i + 3 is in the domain too.\n     \n  */ \n static isl_map *\n@@ -486,20 +486,25 @@ getScheduleForBandList (isl_band_list *BandList, isl_union_map **map_sepcl)\n \t\t}\t\n \t    }\n \t}\n-      Schedule = isl_union_map_union (Schedule, PartialSchedule);\n+      Schedule = isl_union_map_union (Schedule, \n+                                      isl_union_map_copy(PartialSchedule));\n \n       isl_band_free (Band);\n       isl_space_free (Space);\n \n       if (!flag_loop_unroll_jam)\n-\tcontinue;\n+\t{\n+          isl_union_map_free (PartialSchedule);\n+          continue;\n+\t}\n \n       if (PartialSchedule_f)\n-\t*map_sepcl = isl_union_map_union (*map_sepcl, \n-\t\t\t\t\t  PartialSchedule_f);\n+\t{\n+\t  *map_sepcl = isl_union_map_union (*map_sepcl, PartialSchedule_f);\n+          isl_union_map_free (PartialSchedule);\n+\t}\n       else\n-        *map_sepcl = isl_union_map_union (*map_sepcl, \n-         \t\t\t\t  isl_union_map_copy (PartialSchedule));\n+        *map_sepcl = isl_union_map_union (*map_sepcl, PartialSchedule);\n     }\n \n   return Schedule;"}]}