{"sha": "2ddd2871085a3bf35e2429390272301d8c6ab851", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkZDI4NzEwODVhM2JmMzVlMjQyOTM5MDI3MjMwMWQ4YzZhYjg1MQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2008-01-22T16:43:20Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2008-01-22T16:43:20Z"}, "message": "re PR fortran/34907 (valgrind error indication from testsuite trans-types.c: gfc_typenode_for_spec)\n\n2008-01-22  Tobias Burnus  <burnus@net-b.de>\n\n       PR fortran/34907\n       * parse.c (parse_spec): Change = into ==.\n\nFrom-SVN: r131728", "tree": {"sha": "ca0a65d2720d8b3c120439027ee1c31495d93fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca0a65d2720d8b3c120439027ee1c31495d93fb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ddd2871085a3bf35e2429390272301d8c6ab851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddd2871085a3bf35e2429390272301d8c6ab851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ddd2871085a3bf35e2429390272301d8c6ab851", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddd2871085a3bf35e2429390272301d8c6ab851/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e94384dbd64042460a3f03dd50b8a835409ec7f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94384dbd64042460a3f03dd50b8a835409ec7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e94384dbd64042460a3f03dd50b8a835409ec7f7"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "fd6efa3dbba9bf179338e8248834ae8cfffb22a3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd2871085a3bf35e2429390272301d8c6ab851/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd2871085a3bf35e2429390272301d8c6ab851/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2ddd2871085a3bf35e2429390272301d8c6ab851", "patch": "@@ -1,3 +1,8 @@\n+2008-01-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34907\n+\t* parse.c (parse_spec): Change = into ==.\n+\n 2008-01-22  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/34915"}, {"sha": "64d8c332917196bc9dd10d62428dc8d57688f61d", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd2871085a3bf35e2429390272301d8c6ab851/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd2871085a3bf35e2429390272301d8c6ab851/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=2ddd2871085a3bf35e2429390272301d8c6ab851", "patch": "@@ -2189,7 +2189,7 @@ parse_spec (gfc_statement st)\n \n       gfc_current_block ()->ts.kind = 0;\n       /* Keep the derived type; if it's bad, it will be discovered later.  */\n-      if (!(ts->type = BT_DERIVED && ts->derived))\n+      if (!(ts->type == BT_DERIVED && ts->derived))\n         ts->type = BT_UNKNOWN;\n     }\n "}]}