{"sha": "a1092b4889d054ba1f979e8a3e1672465610300c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEwOTJiNDg4OWQwNTRiYTFmOTc5ZThhM2UxNjcyNDY1NjEwMzAwYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-23T11:00:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-23T11:00:29Z"}, "message": "[multiple changes]\n\n2011-11-23  Pascal Obry  <obry@adacore.com>\n\n\t* sem_prag.adb (Process_Convention): Better error message for\n\tstdcall convention on dispatching calls.\n\n2011-11-23  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch4.adb, sem_ch13.adb: Minor reformatting.\n\n2011-11-23  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch6.adb (Expand_Simple_Function_Return): Add missing\n\timplicit type conversion when the returned object is allocated\n\tin the secondary stack and the type of the returned object is\n\tan interface. Done to force generation of displacement of the\n\t\"this\" pointer.\n\nFrom-SVN: r181657", "tree": {"sha": "4c4d8cdcce08a1fcbe4b22eb752fa9e347b7db72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c4d8cdcce08a1fcbe4b22eb752fa9e347b7db72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1092b4889d054ba1f979e8a3e1672465610300c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1092b4889d054ba1f979e8a3e1672465610300c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1092b4889d054ba1f979e8a3e1672465610300c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1092b4889d054ba1f979e8a3e1672465610300c/comments", "author": null, "committer": null, "parents": [{"sha": "3d0c15cf4fb4f967e487d7562e60a021744bd918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d0c15cf4fb4f967e487d7562e60a021744bd918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d0c15cf4fb4f967e487d7562e60a021744bd918"}], "stats": {"total": 117, "additions": 74, "deletions": 43}, "files": [{"sha": "c9169fa626277f4fd7e76c08760a4a21be31cf5f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1092b4889d054ba1f979e8a3e1672465610300c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1092b4889d054ba1f979e8a3e1672465610300c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a1092b4889d054ba1f979e8a3e1672465610300c", "patch": "@@ -1,3 +1,20 @@\n+2011-11-23  Pascal Obry  <obry@adacore.com>\n+\n+\t* sem_prag.adb (Process_Convention): Better error message for\n+\tstdcall convention on dispatching calls.\n+\n+2011-11-23  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb, sem_ch13.adb: Minor reformatting.\n+\n+2011-11-23  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Add missing\n+\timplicit type conversion when the returned object is allocated\n+\tin the secondary stack and the type of the returned object is\n+\tan interface. Done to force generation of displacement of the\n+\t\"this\" pointer.\n+\n 2011-11-23  Pascal Obry  <obry@adacore.com>\n \n \t* impunit.adb: Add g-exptty and g-tty units."}, {"sha": "4c9460438d36f94b2b768bee2fed5ef2a2e84189", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1092b4889d054ba1f979e8a3e1672465610300c/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1092b4889d054ba1f979e8a3e1672465610300c/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a1092b4889d054ba1f979e8a3e1672465610300c", "patch": "@@ -6700,6 +6700,14 @@ package body Exp_Ch6 is\n                  Make_Explicit_Dereference (Loc,\n                  Prefix => New_Reference_To (Temp, Loc)));\n \n+               --  Ada 2005 (AI-251): If the type of the returned object is\n+               --  an interface then add an implicit type conversion to force\n+               --  displacement of the \"this\" pointer.\n+\n+               if Is_Interface (R_Type) then\n+                  Rewrite (Exp, Convert_To (R_Type, Relocate_Node (Exp)));\n+               end if;\n+\n                Analyze_And_Resolve (Exp, R_Type);\n             end;\n "}, {"sha": "7de3c164ede44696ca37bcdcfab905ed5b2c7b76", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1092b4889d054ba1f979e8a3e1672465610300c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1092b4889d054ba1f979e8a3e1672465610300c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a1092b4889d054ba1f979e8a3e1672465610300c", "patch": "@@ -161,15 +161,15 @@ package body Sem_Ch13 is\n    ----------------------------------------------\n \n    --  The following table collects unchecked conversions for validation.\n-   --  Entries are made by Validate_Unchecked_Conversion and then the\n-   --  call to Validate_Unchecked_Conversions does the actual error\n-   --  checking and posting of warnings. The reason for this delayed\n-   --  processing is to take advantage of back-annotations of size and\n-   --  alignment values performed by the back end.\n+   --  Entries are made by Validate_Unchecked_Conversion and then the call\n+   --  to Validate_Unchecked_Conversions does the actual error checking and\n+   --  posting of warnings. The reason for this delayed processing is to take\n+   --  advantage of back-annotations of size and alignment values performed by\n+   --  the back end.\n \n-   --  Note: the reason we store a Source_Ptr value instead of a Node_Id\n-   --  is that by the time Validate_Unchecked_Conversions is called, Sprint\n-   --  will already have modified all Sloc values if the -gnatD option is set.\n+   --  Note: the reason we store a Source_Ptr value instead of a Node_Id is\n+   --  that by the time Validate_Unchecked_Conversions is called, Sprint will\n+   --  already have modified all Sloc values if the -gnatD option is set.\n \n    type UC_Entry is record\n       Eloc   : Source_Ptr; -- node used for posting warnings\n@@ -193,13 +193,13 @@ package body Sem_Ch13 is\n \n    --    for X'Address use Expr\n \n-   --  where Expr is of the form Y'Address or recursively is a reference\n-   --  to a constant of either of these forms, and X and Y are entities of\n-   --  objects, then if Y has a smaller alignment than X, that merits a\n-   --  warning about possible bad alignment. The following table collects\n-   --  address clauses of this kind. We put these in a table so that they\n-   --  can be checked after the back end has completed annotation of the\n-   --  alignments of objects, since we can catch more cases that way.\n+   --  where Expr is of the form Y'Address or recursively is a reference to a\n+   --  constant of either of these forms, and X and Y are entities of objects,\n+   --  then if Y has a smaller alignment than X, that merits a warning about\n+   --  possible bad alignment. The following table collects address clauses of\n+   --  this kind. We put these in a table so that they can be checked after the\n+   --  back end has completed annotation of the alignments of objects, since we\n+   --  can catch more cases that way.\n \n    type Address_Clause_Check_Record is record\n       N : Node_Id;\n@@ -8618,8 +8618,8 @@ package body Sem_Ch13 is\n       Target := Ancestor_Subtype (Etype (Act_Unit));\n \n       --  If either type is generic, the instantiation happens within a generic\n-      --  unit, and there is nothing to check. The proper check\n-      --  will happen when the enclosing generic is instantiated.\n+      --  unit, and there is nothing to check. The proper check will happen\n+      --  when the enclosing generic is instantiated.\n \n       if Is_Generic_Type (Source) or else Is_Generic_Type (Target) then\n          return;\n@@ -8717,21 +8717,20 @@ package body Sem_Ch13 is\n       end if;\n \n       --  If unchecked conversion to access type, and access type is declared\n-      --  in the same unit as the unchecked conversion, then set the\n-      --  No_Strict_Aliasing flag (no strict aliasing is implicit in this\n-      --  situation).\n+      --  in the same unit as the unchecked conversion, then set the flag\n+      --  No_Strict_Aliasing (no strict aliasing is implicit here)\n \n       if Is_Access_Type (Target) and then\n         In_Same_Source_Unit (Target, N)\n       then\n          Set_No_Strict_Aliasing (Implementation_Base_Type (Target));\n       end if;\n \n-      --  Generate N_Validate_Unchecked_Conversion node for back end in\n-      --  case the back end needs to perform special validation checks.\n+      --  Generate N_Validate_Unchecked_Conversion node for back end in case\n+      --  the back end needs to perform special validation checks.\n \n-      --  Shouldn't this be in Exp_Ch13, since the check only gets done\n-      --  if we have full expansion and the back end is called ???\n+      --  Shouldn't this be in Exp_Ch13, since the check only gets done if we\n+      --  have full expansion and the back end is called ???\n \n       Vnode :=\n         Make_Validate_Unchecked_Conversion (Sloc (N));"}, {"sha": "0f918c06b4c6847650d24dd816e10701716223a1", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1092b4889d054ba1f979e8a3e1672465610300c/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1092b4889d054ba1f979e8a3e1672465610300c/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=a1092b4889d054ba1f979e8a3e1672465610300c", "patch": "@@ -3432,8 +3432,8 @@ package body Sem_Ch4 is\n       --  of the high bound.\n \n       procedure Check_Universal_Expression (N : Node_Id);\n-      --  In Ada83, reject bounds of a universal range that are not literals or\n-      --  entity names.\n+      --  In Ada 83, reject bounds of a universal range that are not literals\n+      --  or entity names.\n \n       -----------------------\n       -- Check_Common_Type --"}, {"sha": "c63e9da9eb440ea4e9f55fea70ad5d31549efa3a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1092b4889d054ba1f979e8a3e1672465610300c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1092b4889d054ba1f979e8a3e1672465610300c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a1092b4889d054ba1f979e8a3e1672465610300c", "patch": "@@ -3526,30 +3526,37 @@ package body Sem_Prag is\n \n          --  Stdcall case\n \n-         if C = Convention_Stdcall\n+         if C = Convention_Stdcall then\n+\n+            --  A dispatching call is not allowed. A dispatching subprogram\n+            --  cannot be used to interface to the Win32 API, so in fact this\n+            --  check does not impose any effective restriction.\n+\n+            if Is_Dispatching_Operation (E) then\n+\n+               Error_Pragma\n+                 (\"dispatching subprograms cannot use Stdcall convention\");\n \n             --  Subprogram is allowed, but not a generic subprogram, and not a\n-            --  dispatching operation. A dispatching subprogram cannot be used\n-            --  to interface to the Win32 API, so in fact this check does not\n-            --  impose any effective restriction.\n+            --  dispatching operation.\n \n-           and then\n-             ((not Is_Subprogram (E) and then not Is_Generic_Subprogram (E))\n-                or else Is_Dispatching_Operation (E))\n+            elsif not Is_Subprogram (E)\n+              and then not Is_Generic_Subprogram (E)\n \n-            --  A variable is OK\n+              --  A variable is OK\n \n-           and then Ekind (E) /= E_Variable\n+              and then Ekind (E) /= E_Variable\n \n-           --  An access to subprogram is also allowed\n+              --  An access to subprogram is also allowed\n \n-           and then not\n-             (Is_Access_Type (E)\n-               and then Ekind (Designated_Type (E)) = E_Subprogram_Type)\n-         then\n-            Error_Pragma_Arg\n-              (\"second argument of pragma% must be subprogram (type)\",\n-               Arg2);\n+              and then not\n+                (Is_Access_Type (E)\n+                  and then Ekind (Designated_Type (E)) = E_Subprogram_Type)\n+            then\n+               Error_Pragma_Arg\n+                 (\"second argument of pragma% must be subprogram (type)\",\n+                  Arg2);\n+            end if;\n          end if;\n \n          if not Is_Subprogram (E)"}]}