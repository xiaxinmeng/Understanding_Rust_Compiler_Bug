{"sha": "968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY4YTc1NjJhNjNiZmRkZWIzYTJmZjdiZjg5NjU2ZGNiM2IyZTU0Yg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-07-27T21:41:23Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-27T21:41:23Z"}, "message": "libgcc2.c: Change all conditionals testing LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96 to == 80.\n\n\t* libgcc2.c: Change all conditionals testing\n\tLIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96 to == 80.\n\t* libgcc2.h: Likewise.\n\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Set\n\tTYPE_PRECISION of float80_type to 80.\n\t* config/ia64/ia64.c (ia64_init_builtins): Set TYPE_PRECISION\n\tof fpreg_type and float80_type to 80.\n\t* config/i386/i386.h, config/ia64/ia64.h, config/m68k/m68k.h\n\t* config/m68k/netbsd-elf.h:\n\tChange LONG_DOUBLE_TYPE_SIZE and possibly LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n\tto evaluate to 80 whenever they would formerly have evaluated to 96.\n\t* config/i386/sco5.h: Remove unnecessary redefinition of\n\tLONG_DOUBLE_TYPE_SIZE.\n\t* doc/rtl.texi: Clarify uses of XFmode and TFmode.\n\t* config/i386/i386-modes.def: Use FRACTIONAL_FLOAT_MODE for\n\tXFmode, with a bitsize of 80.  Update commentary.\n\t* config/ia64/ia64-modes.def: Likewise.\n\t* config/m68k/m68k-modes.def: Likewise.\n\nFrom-SVN: r85232", "tree": {"sha": "433666cc87179f827d77692faceeb4590690a580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/433666cc87179f827d77692faceeb4590690a580"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/comments", "author": null, "committer": null, "parents": [{"sha": "706aa09b357196d83285da3809289b7d7d4f49a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/706aa09b357196d83285da3809289b7d7d4f49a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/706aa09b357196d83285da3809289b7d7d4f49a2"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "5d180c89b20a7a2973e38bc3dc73b6e9e2517e39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -1,3 +1,24 @@\n+2004-07-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* libgcc2.c: Change all conditionals testing\n+\tLIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96 to == 80.\n+\t* libgcc2.h: Likewise.\n+\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Set\n+\tTYPE_PRECISION of float80_type to 80.\n+\t* config/ia64/ia64.c (ia64_init_builtins): Set TYPE_PRECISION\n+\tof fpreg_type and float80_type to 80.\n+\t* config/i386/i386.h, config/ia64/ia64.h, config/m68k/m68k.h\n+\t* config/m68k/netbsd-elf.h:\n+\tChange LONG_DOUBLE_TYPE_SIZE and possibly LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n+\tto evaluate to 80 whenever they would formerly have evaluated to 96.\n+\t* config/i386/sco5.h: Remove unnecessary redefinition of\n+\tLONG_DOUBLE_TYPE_SIZE.\n+\t* doc/rtl.texi: Clarify uses of XFmode and TFmode.\n+\t* config/i386/i386-modes.def: Use FRACTIONAL_FLOAT_MODE for\n+\tXFmode, with a bitsize of 80.  Update commentary.\n+\t* config/ia64/ia64-modes.def: Likewise.\n+\t* config/m68k/m68k-modes.def: Likewise.\n+\n 2004-07-27  Steven Bosscher  <stevenb@suse.de>\n \n \t* cfgexpand.c (tree_expand_cfg): Fix comment."}, {"sha": "ee36637bea7f70507fdc08cd7e564be7e3e15722", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -18,21 +18,20 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* x86_64 ABI specifies both XF and TF modes.\n+/* The x86_64 ABI specifies both XF and TF modes.\n    XFmode is __float80 is IEEE extended; TFmode is __float128\n-   is IEEE quad.\n+   is IEEE quad.  */\n \n-   IEEE extended is 128 bits wide, except in ILP32 mode, but we\n-   have to say it's 12 bytes so that the bitsize and wider_mode\n-   tables are correctly set up.  We correct its size below.  */\n+FRACTIONAL_FLOAT_MODE (XF, 80, 12, ieee_extended_intel_96_format);\n+FLOAT_MODE (TF, 16, ieee_quad_format);\n \n-FLOAT_MODE (XF, 12, ieee_extended_intel_96_format);\n+/* In ILP32 mode, XFmode has size 12 and alignment 4.\n+   In LP64 mode, XFmode has size and alignment 16.  */\n ADJUST_FLOAT_FORMAT (XF, (TARGET_128BIT_LONG_DOUBLE\n \t\t\t  ? &ieee_extended_intel_128_format\n \t\t\t  : &ieee_extended_intel_96_format));\n ADJUST_BYTESIZE  (XF, TARGET_128BIT_LONG_DOUBLE ? 16 : 12);\n ADJUST_ALIGNMENT (XF, TARGET_128BIT_LONG_DOUBLE ? 16 : 4);\n-FLOAT_MODE (TF, 16, ieee_quad_format);\n \n /* Add any extra modes needed to represent the condition code.\n "}, {"sha": "5b37ea8aeb83e759f96726c206ea468b641a65d8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -13401,7 +13401,7 @@ ix86_init_mmx_sse_builtins (void)\n     {\n       /* The __float80 type.  */\n       float80_type = make_node (REAL_TYPE);\n-      TYPE_PRECISION (float80_type) = 96;\n+      TYPE_PRECISION (float80_type) = 80;\n       layout_type (float80_type);\n       (*lang_hooks.types.register_builtin_type) (float80_type, \"__float80\");\n     }"}, {"sha": "f998fdbf1e0addb118c922cb997ce5000eb02ae1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -736,7 +736,7 @@ extern int x86_prefetch_sse;\n \f\n /* target machine storage layout */\n \n-#define LONG_DOUBLE_TYPE_SIZE 96\n+#define LONG_DOUBLE_TYPE_SIZE 80\n \n /* Set the value of FLT_EVAL_METHOD in float.h.  When using only the\n    FPU, assume that the fpcw is set to extended precision; when using"}, {"sha": "7dbc9c77c0a0281d2ba2e25d10772ddb110f85c3", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -96,13 +96,11 @@ Boston, MA 02111-1307, USA.  */\n #undef WCHAR_TYPE\n #undef WCHAR_TYPE_SIZE\n #undef WINT_TYPE\n-#undef LONG_DOUBLE_TYPE_SIZE\n #define SIZE_TYPE\t\t\"unsigned int\"\n #define PTRDIFF_TYPE\t\t\"int\"\n #define WCHAR_TYPE\t\t\"long int\"\n #define WCHAR_TYPE_SIZE\t\tBITS_PER_WORD\n #define WINT_TYPE\t\t\"long int\"\n-#define LONG_DOUBLE_TYPE_SIZE \t96\n \n /*\n  * New for multilib support. Set the default switches for multilib,"}, {"sha": "1cb59ad021de99d2aa50dc39e54c4efe87405446", "filename": "gcc/config/ia64/ia64-modes.def", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fia64%2Fia64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fia64%2Fia64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-modes.def?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -22,35 +22,35 @@ Boston, MA 02111-1307, USA.  */\n \n /* IA64 requires both XF and TF modes.\n    XFmode is __float80 is IEEE extended; TFmode is __float128\n-   is IEEE quad.\n+   is IEEE quad.  Both these modes occupy 16 bytes, but XFmode\n+   only has 80 significant bits.  */\n \n-   IEEE extended is 128 bits wide, except in ILP32 mode, but we\n-   have to say it's 12 bytes so that the bitsize and wider_mode\n-   tables are correctly set up.  We correct its size below.  */\n-\n-FLOAT_MODE (XF, 12, ieee_extended_intel_128_format);\n+FRACTIONAL_FLOAT_MODE (XF, 80, 16, ieee_extended_intel_128_format);\n FLOAT_MODE (TF, 16, ieee_quad_format);\n \n /* The above produces:\n \n    mode\t  ILP32 size/align\tLP64 size/align\n-   XF\t  12/4\t\t\t12/4\n+   XF\t  16/16\t\t\t16/16\n    TF\t  16/16\t\t\t16/16\n \n    psABI expectations:\n \n    mode   ILP32 size/align\tLP64 size/align\n-   XF\t  -\t\t\t16/16\n+   XF\t  12/4\t\t\t-\n    TF\t  -\t\t\t-\n \n    HPUX expectations:\n \n    mode\t  ILP32 size/align\tLP64 size/align\n-   XF\t  16/16\t\t\t16/16\n+   XF\t  -\t\t\t-\n    TF\t  16/8\t\t\t-\n \n    We fix this up here.  */\n \n+ADJUST_FLOAT_FORMAT (XF, (TARGET_ILP32 && !TARGET_HPUX)\n+\t\t\t ? &ieee_extended_intel_96_format\n+\t\t\t : &ieee_extended_intel_128_format);\n ADJUST_BYTESIZE  (XF, (TARGET_ILP32 && !TARGET_HPUX) ? 12 : 16);\n ADJUST_ALIGNMENT (XF, (TARGET_ILP32 && !TARGET_HPUX) ?  4 : 16);\n "}, {"sha": "2899c0f611f00f4e84f6cf4798c74f5a453394de", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -8138,13 +8138,13 @@ ia64_init_builtins (void)\n   fpreg_type = make_node (REAL_TYPE);\n   /* ??? The back end should know to load/save __fpreg variables using\n      the ldf.fill and stf.spill instructions.  */\n-  TYPE_PRECISION (fpreg_type) = 96;\n+  TYPE_PRECISION (fpreg_type) = 80;\n   layout_type (fpreg_type);\n   (*lang_hooks.types.register_builtin_type) (fpreg_type, \"__fpreg\");\n \n   /* The __float80 type.  */\n   float80_type = make_node (REAL_TYPE);\n-  TYPE_PRECISION (float80_type) = 96;\n+  TYPE_PRECISION (float80_type) = 80;\n   layout_type (float80_type);\n   (*lang_hooks.types.register_builtin_type) (float80_type, \"__float80\");\n "}, {"sha": "8bc4e3ba3b76eff3949ed200af5107f54a9ccbcd", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -448,10 +448,10 @@ while (0)\n #define DOUBLE_TYPE_SIZE 64\n \n /* long double is XFmode normally, TFmode for HPUX.  */\n-#define LONG_DOUBLE_TYPE_SIZE (TARGET_HPUX ? 128 : 96)\n+#define LONG_DOUBLE_TYPE_SIZE (TARGET_HPUX ? 128 : 80)\n \n /* We always want the XFmode operations from libgcc2.c.  */\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 96\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 80\n \n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "51919b3a0d12fb3ece4fb54daee2caeb53b40360", "filename": "gcc/config/m68k/m68k-modes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fm68k%2Fm68k-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fm68k%2Fm68k-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-modes.def?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -19,4 +19,4 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* 80-bit floating point (IEEE extended, in a 96-bit field) */\n-FLOAT_MODE (XF, 12, ieee_extended_motorola_format);\n+FRACTIONAL_FLOAT_MODE (XF, 80, 12, ieee_extended_motorola_format);"}, {"sha": "14a8b9bb8ae7bb8fb0bc6a67b4f0d35bafe87f9a", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -354,7 +354,7 @@ extern int target_flags;\n \f\n /* target machine storage layout */\n \n-#define LONG_DOUBLE_TYPE_SIZE 96\n+#define LONG_DOUBLE_TYPE_SIZE 80\n \n /* Set the value of FLT_EVAL_METHOD in float.h.  When using 68040 fp\n    instructions, we get proper intermediate rounding, otherwise we"}, {"sha": "97eb89ce3cba955bb183dce956283c47d4c12715", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -43,12 +43,12 @@ Boston, MA 02111-1307, USA.  */\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE\t\t\t\\\n   ((TARGET_68020 || TARGET_68040 || TARGET_68040_ONLY || \\\n-    TARGET_68060) ? 96 : 64)\n+    TARGET_68060) ? 80 : 64)\n \n #ifdef __mc68010__\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n #else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 96\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 80\n #endif\n \n #define EXTRA_SPECS \\"}, {"sha": "210e1823dbf1abe1ce9b8e84af4aaaa362f7a80a", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -1100,15 +1100,16 @@ this is a double-precision IEEE floating point number.\n \n @findex XFmode\n @item XFmode\n-``Extended Floating'' mode represents a twelve byte floating point\n-number.  This mode is used for IEEE extended floating point.  On some\n-systems not all bits within these bytes will actually be used.\n+``Extended Floating'' mode represents an IEEE extended floating point\n+number.  This mode only has 80 meaningful bits (ten bytes).  Some\n+processors require such numbers to be padded to twelve bytes, others\n+to sixteen; this mode is used for either.\n \n @findex TFmode\n @item TFmode\n-``Tetra Floating'' mode represents a sixteen byte floating point number.\n-This gets used for both the 96-bit extended IEEE floating-point types\n-padded to 128 bits, and true 128-bit extended IEEE floating-point types.\n+``Tetra Floating'' mode represents a sixteen byte floating point number\n+all 128 of whose bits are meaningful.  One common use is the\n+IEEE quad-precision format.\n \n @findex CCmode\n @item CCmode"}, {"sha": "2da20e3090384f5586742e9a7d7f35cba11daeda", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -1137,7 +1137,7 @@ __fixtfdi (TFtype a)\n }\n #endif\n \n-#if defined(L_fixunsxfdi) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96)\n+#if defined(L_fixunsxfdi) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80)\n #define WORD_SIZE (sizeof (Wtype) * BITS_PER_UNIT)\n #define HIGH_WORD_COEFF (((UDWtype) 1) << WORD_SIZE)\n \n@@ -1166,7 +1166,7 @@ __fixunsxfDI (XFtype a)\n }\n #endif\n \n-#if defined(L_fixxfdi) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96)\n+#if defined(L_fixxfdi) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80)\n DWtype\n __fixxfdi (XFtype a)\n {\n@@ -1245,7 +1245,7 @@ __fixsfdi (SFtype a)\n }\n #endif\n \n-#if defined(L_floatdixf) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96)\n+#if defined(L_floatdixf) && (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80)\n #define WORD_SIZE (sizeof (Wtype) * BITS_PER_UNIT)\n #define HIGH_HALFWORD_COEFF (((UDWtype) 1) << (WORD_SIZE / 2))\n #define HIGH_WORD_COEFF (((UDWtype) 1) << WORD_SIZE)\n@@ -1340,7 +1340,7 @@ __floatdisf (DWtype u)\n }\n #endif\n \n-#if defined(L_fixunsxfsi) && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96\n+#if defined(L_fixunsxfsi) && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80\n /* Reenable the normal types, in case limits.h needs them.  */\n #undef char\n #undef short"}, {"sha": "9ca0b505113628342803fbc6318b348830e9cb58", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=968a7562a63bfddeb3a2ff7bf89656dcb3b2e54b", "patch": "@@ -89,7 +89,7 @@ typedef unsigned int UTItype\t__attribute__ ((mode (TI)));\n typedef \tfloat SFtype\t__attribute__ ((mode (SF)));\n typedef\t\tfloat DFtype\t__attribute__ ((mode (DF)));\n \n-#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96\n+#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80\n typedef\t\tfloat XFtype\t__attribute__ ((mode (XF)));\n #endif\n #if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128\n@@ -272,7 +272,7 @@ extern UWtype __fixunssfSI (SFtype);\n extern DWtype __fixunsdfDI (DFtype);\n extern DWtype __fixunssfDI (SFtype);\n \n-#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96\n+#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80\n extern DWtype __fixxfdi (XFtype);\n extern DWtype __fixunsxfDI (XFtype);\n extern XFtype __floatdixf (DWtype);"}]}