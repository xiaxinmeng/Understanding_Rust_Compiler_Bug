{"sha": "f83e226207d9458396a3a5cf9a1eb2a0092497bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgzZTIyNjIwN2Q5NDU4Mzk2YTNhNWNmOWExZWIyYTAwOTI0OTdiYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-11T16:17:47Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-11T16:17:47Z"}, "message": "alpha-protos.h (print_operand): Remove.\n\n\t* config/alpha/alpha-protos.h (print_operand): Remove.\n\t(print_operand_address): Remove.\n\t* config/alpha/alpha.h (PRINT_OPERAND): Remove.\n\t(PRINT_OPERAND_ADDRESS): Remove.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Remove.\n\t* config/alpha/alpha.c (TARGET_PRINT_OPERAND): New hook define.\n\t(TARGET_PRINT_OPERAND_ADDRESS): New hook define.\n\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): New hook define.\n\t(print_operand_address): Rename to...\n\t(alpha_print_operand_address): ...this and make static.\n\t(print_operand): Rename to...\n\t(alpha_print_operand): ...this and make static.\n\t(alpha_print_operand_punct_valid_p): New static function.\n\nFrom-SVN: r230181", "tree": {"sha": "f55ea3a67b366747ee5c85e9ea62a5aac1c494a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f55ea3a67b366747ee5c85e9ea62a5aac1c494a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f83e226207d9458396a3a5cf9a1eb2a0092497bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83e226207d9458396a3a5cf9a1eb2a0092497bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83e226207d9458396a3a5cf9a1eb2a0092497bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83e226207d9458396a3a5cf9a1eb2a0092497bb/comments", "author": null, "committer": null, "parents": [{"sha": "e3907f12a5082e6bd7eda92cf165e3accd07f67a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3907f12a5082e6bd7eda92cf165e3accd07f67a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3907f12a5082e6bd7eda92cf165e3accd07f67a"}], "stats": {"total": 89, "additions": 47, "deletions": 42}, "files": [{"sha": "c37cf78627a92397cd223d08b0424ee211095ed4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83e226207d9458396a3a5cf9a1eb2a0092497bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83e226207d9458396a3a5cf9a1eb2a0092497bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f83e226207d9458396a3a5cf9a1eb2a0092497bb", "patch": "@@ -1,3 +1,19 @@\n+2015-11-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha-protos.h (print_operand): Remove.\n+\t(print_operand_address): Remove.\n+\t* config/alpha/alpha.h (PRINT_OPERAND): Remove.\n+\t(PRINT_OPERAND_ADDRESS): Remove.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Remove.\n+\t* config/alpha/alpha.c (TARGET_PRINT_OPERAND): New hook define.\n+\t(TARGET_PRINT_OPERAND_ADDRESS): New hook define.\n+\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): New hook define.\n+\t(print_operand_address): Rename to...\n+\t(alpha_print_operand_address): ...this and make static.\n+\t(print_operand): Rename to...\n+\t(alpha_print_operand): ...this and make static.\n+\t(alpha_print_operand_punct_valid_p): New static function.\n+\n 2015-11-11  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (vect_slp_analyze_and_verify_instance_alignment):\n@@ -23,7 +39,6 @@\n 2015-11-11  Nathan Sidwell  <nathan@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n \n-\tgcc/\n \t* gcc/gimplify.c (enum  omp_region_type): Add ORT_ACC,\n \tORT_ACC_DATA, ORT_ACC_PARALLEL, ORT_ACC_KERNELS.  Adjust ORT_NONE.\n \t(gimple_add_tmp_var): Add ORT_ACC checks.\n@@ -68,7 +83,7 @@\n 2015-11-11  Simon Dardis  <simon.dardis@imgtec.com>\n \n \t* config/mips/mips.c (mips_breakable_sequence_p): New function.\n-\t(mips_break_sequence): New function. \n+\t(mips_break_sequence): New function.\n \t(mips_reorg_process_insns): Use them. Use compact branches in selected\n \tsituations.\n "}, {"sha": "7d4579167e81bdb50e2272eebbb5434abd4eeeca", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83e226207d9458396a3a5cf9a1eb2a0092497bb/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83e226207d9458396a3a5cf9a1eb2a0092497bb/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=f83e226207d9458396a3a5cf9a1eb2a0092497bb", "patch": "@@ -65,8 +65,6 @@ extern void alpha_expand_builtin_revert_vms_condition_handler (rtx);\n \n extern rtx alpha_return_addr (int, rtx);\n extern rtx alpha_gp_save_rtx (void);\n-extern void print_operand (FILE *, rtx, int);\n-extern void print_operand_address (FILE *, rtx);\n extern void alpha_initialize_trampoline (rtx, rtx, rtx, int, int, int);\n \n extern rtx alpha_va_arg (tree, tree);"}, {"sha": "4e284dca3823f8283ee7ee2b629eab31bb8bea11", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83e226207d9458396a3a5cf9a1eb2a0092497bb/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83e226207d9458396a3a5cf9a1eb2a0092497bb/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f83e226207d9458396a3a5cf9a1eb2a0092497bb", "patch": "@@ -5041,10 +5041,20 @@ get_round_mode_suffix (void)\n   gcc_unreachable ();\n }\n \n-/* Print an operand.  Recognize special options, documented below.  */\n+/* Implement TARGET_PRINT_OPERAND_PUNCT_VALID_P.  */\n \n-void\n-print_operand (FILE *file, rtx x, int code)\n+static bool\n+alpha_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return (code == '/' || code == ',' || code == '-' || code == '~'\n+\t  || code == '#' || code == '*' || code == '&');\n+}\n+\n+/* Implement TARGET_PRINT_OPERAND.  The alpha-specific\n+   operand codes are documented below.  */\n+\n+static void\n+alpha_print_operand (FILE *file, rtx x, int code)\n {\n   int i;\n \n@@ -5064,6 +5074,8 @@ print_operand (FILE *file, rtx x, int code)\n       break;\n \n     case '/':\n+      /* Generates the instruction suffix.  The TRAP_SUFFIX and ROUND_SUFFIX\n+\t attributes are examined to determine what is appropriate.  */\n       {\n \tconst char *trap = get_trap_mode_suffix ();\n \tconst char *round = get_round_mode_suffix ();\n@@ -5074,12 +5086,14 @@ print_operand (FILE *file, rtx x, int code)\n       }\n \n     case ',':\n-      /* Generates single precision instruction suffix.  */\n+      /* Generates single precision suffix for floating point\n+\t instructions (s for IEEE, f for VAX).  */\n       fputc ((TARGET_FLOAT_VAX ? 'f' : 's'), file);\n       break;\n \n     case '-':\n-      /* Generates double precision instruction suffix.  */\n+      /* Generates double precision suffix for floating point\n+\t instructions (t for IEEE, g for VAX).  */\n       fputc ((TARGET_FLOAT_VAX ? 'g' : 't'), file);\n       break;\n \n@@ -5350,8 +5364,10 @@ print_operand (FILE *file, rtx x, int code)\n     }\n }\n \n-void\n-print_operand_address (FILE *file, rtx addr)\n+/* Implement TARGET_PRINT_OPERAND_ADDRESS.  */\n+\n+static void\n+alpha_print_operand_address (FILE *file, machine_mode /*mode*/, rtx addr)\n {\n   int basereg = 31;\n   HOST_WIDE_INT offset = 0;\n@@ -9877,6 +9893,13 @@ alpha_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n #define TARGET_STDARG_OPTIMIZE_HOOK alpha_stdarg_optimize_hook\n #endif\n \n+#undef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND alpha_print_operand\n+#undef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS alpha_print_operand_address\n+#undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P alpha_print_operand_punct_valid_p\n+\n /* Use 16-bits anchor.  */\n #undef TARGET_MIN_ANCHOR_OFFSET\n #define TARGET_MIN_ANCHOR_OFFSET -0x7fff - 1"}, {"sha": "52581552fea2f6b392c4bbb54505c8911009a87a", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83e226207d9458396a3a5cf9a1eb2a0092497bb/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83e226207d9458396a3a5cf9a1eb2a0092497bb/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=f83e226207d9458396a3a5cf9a1eb2a0092497bb", "patch": "@@ -1005,37 +1005,6 @@ do {\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n   fprintf (FILE, \"\\t.gprel32 $L%d\\n\", (VALUE))\n \f\n-\n-/* Print operand X (an rtx) in assembler syntax to file FILE.\n-   CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n-   For `%' followed by punctuation, CODE is the punctuation and X is null.  */\n-\n-#define PRINT_OPERAND(FILE, X, CODE)  print_operand (FILE, X, CODE)\n-\n-/* Determine which codes are valid without a following integer.  These must\n-   not be alphabetic.\n-\n-   ~    Generates the name of the current function.\n-\n-   /\tGenerates the instruction suffix.  The TRAP_SUFFIX and ROUND_SUFFIX\n-\tattributes are examined to determine what is appropriate.\n-\n-   ,    Generates single precision suffix for floating point\n-\tinstructions (s for IEEE, f for VAX)\n-\n-   -\tGenerates double precision suffix for floating point\n-\tinstructions (t for IEEE, g for VAX)\n-   */\n-\n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE) \\\n-  ((CODE) == '/' || (CODE) == ',' || (CODE) == '-' || (CODE) == '~' \\\n-   || (CODE) == '#' || (CODE) == '*' || (CODE) == '&')\n-\n-/* Print a memory address as an operand to reference that memory location.  */\n-\n-#define PRINT_OPERAND_ADDRESS(FILE, ADDR) \\\n-  print_operand_address((FILE), (ADDR))\n-\f\n /* If we use NM, pass -g to it so it only lists globals.  */\n #define NM_FLAGS \"-pg\"\n "}]}