{"sha": "2ca6672b2713bed413a3a21e0468db1723de41cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNhNjY3MmIyNzEzYmVkNDEzYTNhMjFlMDQ2OGRiMTcyM2RlNDFjYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-03-06T19:34:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-03-06T19:34:36Z"}, "message": "toplev.c (rest_of_compilation): Do jump threading before SSA path...\n\n\t* toplev.c (rest_of_compilation): Do jump threading before SSA path;\n\tconsistently call delete_trivially_dead_insns after CSE and GCSE;\n\tfix DFI_life dumping; do jump threading after liveness; do crossjumping\n\tafter liveness2; update comment in last crossjumping.\n\t* cfgcleanup.c (try_crossjump_to_edge): Dirtify block.\n\nFrom-SVN: r50373", "tree": {"sha": "1f1d32f26b4675b6497ee473cc04e606b49810e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f1d32f26b4675b6497ee473cc04e606b49810e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ca6672b2713bed413a3a21e0468db1723de41cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca6672b2713bed413a3a21e0468db1723de41cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ca6672b2713bed413a3a21e0468db1723de41cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca6672b2713bed413a3a21e0468db1723de41cb/comments", "author": null, "committer": null, "parents": [{"sha": "31d0dd4fa30cbe7fc65d3e27461833c0bcca757a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d0dd4fa30cbe7fc65d3e27461833c0bcca757a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31d0dd4fa30cbe7fc65d3e27461833c0bcca757a"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "2a5c8c6203bcb0e766866403540b4077eb9c9a63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca6672b2713bed413a3a21e0468db1723de41cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca6672b2713bed413a3a21e0468db1723de41cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ca6672b2713bed413a3a21e0468db1723de41cb", "patch": "@@ -1,3 +1,11 @@\n+Wed Mar  6 20:32:09 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* toplev.c (rest_of_compilation): Do jump threading before SSA path;\n+\tconsistently call delete_trivially_dead_insns after CSE and GCSE;\n+\tfix DFI_life dumping; do jump threading after liveness; do crossjumping\n+\tafter liveness2; update comment in last crossjumping.\n+\t* cfgcleanup.c (try_crossjump_to_edge): Dirtify block.\n+\n Wed Mar  6 12:27:10 2002  Jeffrey A Law  (law@redhat.com)\n \n \t* m68k.h (CONST_COSTS): Lower cost of 0.0 when used inside a"}, {"sha": "27337267eedc710e72f66f5656a3f35222f52e1c", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca6672b2713bed413a3a21e0468db1723de41cb/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca6672b2713bed413a3a21e0468db1723de41cb/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=2ca6672b2713bed413a3a21e0468db1723de41cb", "patch": "@@ -1353,6 +1353,8 @@ try_crossjump_to_edge (mode, e1, e2)\n \n   redirect_to->count += src1->count;\n   redirect_to->frequency += src1->frequency;\n+  /* We may have some registers visible trought the block.  */\n+  redirect_to->flags |= BB_DIRTY;\n \n   /* Recompute the frequencies and counts of outgoing edges.  */\n   for (s = redirect_to->succ; s; s = s->succ_next)"}, {"sha": "bd25b41baed54128a4ab481c42fa72c1c89c88ea", "filename": "gcc/toplev.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca6672b2713bed413a3a21e0468db1723de41cb/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca6672b2713bed413a3a21e0468db1723de41cb/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2ca6672b2713bed413a3a21e0468db1723de41cb", "patch": "@@ -2629,7 +2629,8 @@ rest_of_compilation (decl)\n   find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n   if (rtl_dump_file)\n     dump_flow_info (rtl_dump_file);\n-  cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0) | CLEANUP_PRE_LOOP);\n+  cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0) | CLEANUP_PRE_LOOP\n+\t       | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n \n   /* CFG is no longer maintained up-to-date.  */\n   free_bb_for_insn ();\n@@ -2722,8 +2723,7 @@ rest_of_compilation (decl)\n       find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n       if (rtl_dump_file)\n \tdump_flow_info (rtl_dump_file);\n-      cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP\n- \t\t   | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n+      cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n \n       /* Try to identify useless null pointer tests and delete them.  */\n       if (flag_delete_null_pointer_checks)\n@@ -2769,25 +2769,19 @@ rest_of_compilation (decl)\n \trebuild_jump_labels (insns);\n       purge_all_dead_edges (0);\n \n+      delete_trivially_dead_insns (insns, max_reg_num ());\n+\n       /* If we are not running more CSE passes, then we are no longer\n \t expecting CSE to be run.  But always rerun it in a cheap mode.  */\n       cse_not_expected = !flag_rerun_cse_after_loop && !flag_gcse;\n \n       if (tem || optimize > 1)\n \tcleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n-\n-      /* Run this after jump optmizations remove all the unreachable code\n-\t so that unreachable code will not keep values live.  */\n-      delete_trivially_dead_insns (insns, max_reg_num ());\n-\n       /* Try to identify useless null pointer tests and delete them.  */\n       if (flag_delete_null_pointer_checks || flag_thread_jumps)\n \t{\n \t  timevar_push (TV_JUMP);\n \n-\t  cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP\n-\t\t       | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n-\n \t  if (flag_delete_null_pointer_checks)\n \t    delete_null_pointer_checks (insns);\n \t  /* CFG is no longer maintained up-to-date.  */\n@@ -2827,6 +2821,7 @@ rest_of_compilation (decl)\n       cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n       tem = gcse_main (insns, rtl_dump_file);\n       rebuild_jump_labels (insns);\n+      delete_trivially_dead_insns (insns, max_reg_num ());\n \n       save_csb = flag_cse_skip_blocks;\n       save_cfj = flag_cse_follow_jumps;\n@@ -2840,6 +2835,7 @@ rest_of_compilation (decl)\n \t  reg_scan (insns, max_reg_num (), 1);\n \t  tem2 = cse_main (insns, max_reg_num (), 0, rtl_dump_file);\n \t  purge_all_dead_edges (0);\n+\t  delete_trivially_dead_insns (insns, max_reg_num ());\n \t  timevar_pop (TV_CSE);\n \t  cse_not_expected = !flag_rerun_cse_after_loop;\n \t}\n@@ -2851,7 +2847,6 @@ rest_of_compilation (decl)\n \t  tem = tem2 = 0;\n \t  timevar_push (TV_JUMP);\n \t  rebuild_jump_labels (insns);\n-\t  delete_trivially_dead_insns (insns, max_reg_num ());\n \t  cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n \t  timevar_pop (TV_JUMP);\n \n@@ -2861,6 +2856,7 @@ rest_of_compilation (decl)\n \t      reg_scan (insns, max_reg_num (), 1);\n \t      tem2 = cse_main (insns, max_reg_num (), 0, rtl_dump_file);\n \t      purge_all_dead_edges (0);\n+\t      delete_trivially_dead_insns (insns, max_reg_num ());\n \t      timevar_pop (TV_CSE);\n \t    }\n \t}\n@@ -2991,6 +2987,7 @@ rest_of_compilation (decl)\n \t  reg_scan (insns, max_reg_num (), 0);\n \t  tem = cse_main (insns, max_reg_num (), 1, rtl_dump_file);\n \t  purge_all_dead_edges (0);\n+\t  delete_trivially_dead_insns (insns, max_reg_num ());\n \n \t  if (tem)\n \t    {\n@@ -3009,7 +3006,7 @@ rest_of_compilation (decl)\n \n   cse_not_expected = 1;\n \n-  close_dump_file (DFI_life, print_rtl_with_bb, insns);\n+  open_dump_file (DFI_life, decl);\n   regclass_init ();\n \n   check_function_return_warnings ();\n@@ -3277,8 +3274,8 @@ rest_of_compilation (decl)\n \n   if (optimize)\n     {\n-      cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_CROSSJUMP);\n       life_analysis (insns, rtl_dump_file, PROP_FINAL);\n+      cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_CROSSJUMP | CLEANUP_UPDATE_LIFE);\n \n       /* This is kind of a heuristic.  We need to run combine_stack_adjustments\n          even for machines with possibly nonzero RETURN_POPS_ARGS\n@@ -3380,8 +3377,9 @@ rest_of_compilation (decl)\n       timevar_push (TV_REORDER_BLOCKS);\n       open_dump_file (DFI_bbro, decl);\n \n-      /* Last attempt to optimize CFG, as life analyzis possibly removed\n-\t some instructions.  */\n+      /* Last attempt to optimize CFG, as scheduling, peepholing\n+\t and insn splitting possibly introduced more crossjumping\n+\t oppurtuntities.  */\n       cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_POST_REGSTACK\n \t\t   | CLEANUP_CROSSJUMP);\n       if (flag_reorder_blocks)"}]}