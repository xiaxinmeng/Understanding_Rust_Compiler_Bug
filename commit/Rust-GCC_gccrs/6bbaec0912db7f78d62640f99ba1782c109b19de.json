{"sha": "6bbaec0912db7f78d62640f99ba1782c109b19de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJiYWVjMDkxMmRiN2Y3OGQ2MjY0MGY5OWJhMTc4MmMxMDliMTlkZQ==", "commit": {"author": {"name": "Andy Hutchinson", "email": "HutchinsonAndy@netscape.net", "date": "2005-03-13T10:09:53Z"}, "committer": {"name": "Marek Michalkiewicz", "email": "marekm@gcc.gnu.org", "date": "2005-03-13T10:09:53Z"}, "message": "re PR target/18251 (unable to find a register to spill in class `POINTER_REGS')\n\n\tPR target/18251\n\t* config/avr/avr.md (movmemhi): Rewrite as RTL loop.\n\t(*movmemqi_insn): Delete.\n\t(*movmemhi): Delete.\n\nFrom-SVN: r96365", "tree": {"sha": "3a42ef5aa4f2e57a92cb11c763a7f92c678c0f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a42ef5aa4f2e57a92cb11c763a7f92c678c0f63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bbaec0912db7f78d62640f99ba1782c109b19de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbaec0912db7f78d62640f99ba1782c109b19de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bbaec0912db7f78d62640f99ba1782c109b19de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbaec0912db7f78d62640f99ba1782c109b19de/comments", "author": null, "committer": null, "parents": [{"sha": "5cb08bab242cda0413a68140b5752309500d8b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb08bab242cda0413a68140b5752309500d8b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb08bab242cda0413a68140b5752309500d8b57"}], "stats": {"total": 117, "additions": 59, "deletions": 58}, "files": [{"sha": "6c0d36c34ea057e5f6143d12156c46f69355f281", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbaec0912db7f78d62640f99ba1782c109b19de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbaec0912db7f78d62640f99ba1782c109b19de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bbaec0912db7f78d62640f99ba1782c109b19de", "patch": "@@ -1,3 +1,10 @@\n+2005-03-13  Andy Hutchinson  <HutchinsonAndy@netscape.net>\n+\n+\tPR target/18251\n+\t* config/avr/avr.md (movmemhi): Rewrite as RTL loop.\n+\t(*movmemqi_insn): Delete.\n+\t(*movmemhi): Delete.\n+\n 2005-03-13  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* builtins.c (fold_builtin_classify): Take decomposed"}, {"sha": "b6fb1796f0ec96255cc3deae0cc032aa56befb66", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 52, "deletions": 58, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbaec0912db7f78d62640f99ba1782c109b19de/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbaec0912db7f78d62640f99ba1782c109b19de/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=6bbaec0912db7f78d62640f99ba1782c109b19de", "patch": "@@ -346,75 +346,69 @@\n \n ;;=========================================================================\n ;; move string (like memcpy)\n+;; implement as RTL loop\n \n (define_expand \"movmemhi\"\n   [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n-\t\t   (match_operand:BLK 1 \"memory_operand\" \"\"))\n-\t      (use (match_operand:HI 2 \"const_int_operand\" \"\"))\n-\t      (use (match_operand:HI 3 \"const_int_operand\" \"\"))\n-\t      (clobber (match_scratch:HI 4 \"\"))\n-\t      (clobber (match_scratch:HI 5 \"\"))\n-\t      (clobber (match_dup 6))])]\n+          (match_operand:BLK 1 \"memory_operand\" \"\"))\n+          (use (match_operand:HI 2 \"const_int_operand\" \"\"))\n+          (use (match_operand:HI 3 \"const_int_operand\" \"\"))])]\n   \"\"\n   \"{\n-  rtx addr0, addr1;\n-  int cnt8;\n+  int prob;\n+  HOST_WIDE_INT count;\n   enum machine_mode mode;\n+  rtx label = gen_label_rtx ();\n+  rtx loop_reg;\n+  rtx jump;\n+\n+  /* Copy pointers into new psuedos - they will be changed.  */\n+  rtx addr0 = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n+  rtx addr1 = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n+\n+  /* Create rtx for tmp register - we use this as scratch.  */\n+  rtx tmp_reg_rtx  = gen_rtx_REG (QImode, TMP_REGNO);\n \n   if (GET_CODE (operands[2]) != CONST_INT)\n     FAIL;\n-  cnt8 = byte_immediate_operand (operands[2], GET_MODE (operands[2]));\n-  mode = cnt8 ? QImode : HImode;\n-  operands[6] = gen_rtx_SCRATCH (mode);\n-  operands[2] = copy_to_mode_reg (mode,\n-                                  gen_int_mode (INTVAL (operands[2]), mode));\n-  addr0 = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n-  addr1 = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n \n-  operands[0] = gen_rtx_MEM (BLKmode, addr0);\n-  operands[1] = gen_rtx_MEM (BLKmode, addr1);\n-}\")\n-\n-(define_insn \"*movmemqi_insn\"\n-  [(set (mem:BLK (match_operand:HI 0 \"register_operand\" \"e\"))\n-\t(mem:BLK (match_operand:HI 1 \"register_operand\" \"e\")))\n-   (use (match_operand:QI 2 \"register_operand\" \"r\"))\n-   (use (match_operand:QI 3 \"const_int_operand\" \"i\"))\n-   (clobber (match_scratch:HI 4 \"=0\"))\n-   (clobber (match_scratch:HI 5 \"=1\"))\n-   (clobber (match_scratch:QI 6 \"=2\"))]\n-  \"\"\n-  \"ld __tmp_reg__,%a1+\n-\tst %a0+,__tmp_reg__\n-\tdec %2\n-\tbrne .-8\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"clobber\")])\n+  count = INTVAL (operands[2]);\n+  if (count <= 0)\n+    FAIL;\n \n-(define_insn \"*movmemhi\"\n-  [(set (mem:BLK (match_operand:HI 0 \"register_operand\" \"e,e\"))\n-\t(mem:BLK (match_operand:HI 1 \"register_operand\" \"e,e\")))\n-   (use (match_operand:HI 2 \"register_operand\" \"!w,d\"))\n-   (use (match_operand:HI 3 \"const_int_operand\" \"\"))\n-   (clobber (match_scratch:HI 4 \"=0,0\"))\n-   (clobber (match_scratch:HI 5 \"=1,1\"))\n-   (clobber (match_scratch:HI 6 \"=2,2\"))]\n-  \"\"\n-  \"*{\n-     if (which_alternative==0)\n-       return (AS2 (ld,__tmp_reg__,%a1+) CR_TAB\n-\t       AS2 (st,%a0+,__tmp_reg__)  CR_TAB\n-\t       AS2 (sbiw,%A2,1) CR_TAB\n-\t       AS1 (brne,.-8));\n-     else\n-       return (AS2 (ld,__tmp_reg__,%a1+) CR_TAB\n-\t       AS2 (st,%a0+,__tmp_reg__)  CR_TAB\n-\t       AS2 (subi,%A2,1) CR_TAB\n-\t       AS2 (sbci,%B2,0) CR_TAB\n-\t       AS1 (brne,.-10));\n-}\"\n-  [(set_attr \"length\" \"4,5\")\n-   (set_attr \"cc\" \"clobber,clobber\")])\n+  /* Work out branch probability for latter use.  */\n+  prob = REG_BR_PROB_BASE - REG_BR_PROB_BASE / count;\n+\n+  /* See if constant fit 8 bits.  */\n+  mode = (count < 0x100) ? QImode : HImode;\n+  /* Create loop counter register.  */\n+  loop_reg = copy_to_mode_reg (mode, gen_int_mode (count, mode));\n+\n+  /* Now create RTL code for move loop.  */\n+  /* Label at top of loop.  */\n+  emit_label (label);\n+\n+  /* Move one byte into scratch and inc pointer.  */\n+  emit_move_insn (tmp_reg_rtx, gen_rtx_MEM (QImode, addr1));\n+  emit_move_insn (addr1, gen_rtx_PLUS (Pmode, addr1, const1_rtx));\n+\n+  /* Move to mem and inc pointer.  */\n+  emit_move_insn (gen_rtx_MEM (QImode, addr0), tmp_reg_rtx);\n+  emit_move_insn (addr0, gen_rtx_PLUS (Pmode, addr0, const1_rtx));\n+\n+  /* Decrement count.  */\n+  emit_move_insn (loop_reg, gen_rtx_PLUS (mode, loop_reg, constm1_rtx));\n+\n+  /* Compare with zero and jump if not equal. */\n+  emit_cmp_and_jump_insns (loop_reg, const0_rtx, NE, NULL_RTX, mode, 1,\n+                           label);\n+  /* Set jump probability based on loop count.  */\n+  jump = get_last_insn ();\n+  REG_NOTES (jump) = gen_rtx_EXPR_LIST (REG_BR_PROB,\n+                    GEN_INT (prob),\n+                    REG_NOTES (jump));\n+  DONE;\n+}\")\n \n ;; =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0 =0\n ;; memset (%0, 0, %1)"}]}