{"sha": "ee811cfdfaa9b3dee676e33fcf5853864255a04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU4MTFjZmRmYWE5YjNkZWU2NzZlMzNmY2Y1ODUzODY0MjU1YTA0YQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-10T07:51:11Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-10T07:51:11Z"}, "message": "c-lang.c (lang_hooks): Update.\n\n        * c-lang.c (lang_hooks): Update.\n        (lang_decode_option): Remove.\n        (lang_init_options): Rename c_init_options.\n        * toplev.c (main): Use lang_hooks for lang_init_options\n        and lang_decode_option.\n        * toplev.h (lang_hooks): Add 2 new hooks.\n        * tree.h: Remove lang_init_options and lang_decode_option.\n        * cp/cp-tree.h (lang_decode_option): Rename cxx_decode_option.\n        * cp/decl2.c: Similarly.\n        * cp/lex.c (lang_init_options): Rename cxx_init_options.\n        (lang_hooks): Update.\n        * f/com.c (f_init, f_finish): Rename ffe_init, ffe_finish\n        for consistency.\n        (lang_init_options): Rename ffe_init_options.\n        (lang_hooks): Update.\n        (lang_decode_option): Remove.\n        * java/lang.c (lang_init_options): Rename java_init_options.\n        (lang_decode_option): Rename java_decode_option.\n        (lang_hooks): Update.\n        * objc/objc-act.c (lang_init_options): Rename objc_init_options.\n        (lang_decode_option): Rename objc_decode_option.\n        (lang_hooks): Update.\n\nFrom-SVN: r38856", "tree": {"sha": "9722a0d53a90eb7c3efcda64249217ac59a4b20b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9722a0d53a90eb7c3efcda64249217ac59a4b20b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee811cfdfaa9b3dee676e33fcf5853864255a04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee811cfdfaa9b3dee676e33fcf5853864255a04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee811cfdfaa9b3dee676e33fcf5853864255a04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee811cfdfaa9b3dee676e33fcf5853864255a04a/comments", "author": null, "committer": null, "parents": [{"sha": "8541c24be9cdf2943f93bea51a3227647978556c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8541c24be9cdf2943f93bea51a3227647978556c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8541c24be9cdf2943f93bea51a3227647978556c"}], "stats": {"total": 133, "additions": 80, "deletions": 53}, "files": [{"sha": "8686ddfe09c678f0a6b8a2309abf5a94d143df8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -1,3 +1,28 @@\n+2001-01-10  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * c-lang.c (lang_hooks): Update.\n+        (lang_decode_option): Remove.\n+        (lang_init_options): Rename c_init_options.\n+        * toplev.c (main): Use lang_hooks for lang_init_options\n+        and lang_decode_option.\n+        * toplev.h (lang_hooks): Add 2 new hooks.\n+        * tree.h: Remove lang_init_options and lang_decode_option.\n+        * cp/cp-tree.h (lang_decode_option): Rename cxx_decode_option.\n+        * cp/decl2.c: Similarly.\n+        * cp/lex.c (lang_init_options): Rename cxx_init_options.\n+        (lang_hooks): Update.   \n+        * f/com.c (f_init, f_finish): Rename ffe_init, ffe_finish\n+        for consistency.\n+        (lang_init_options): Rename ffe_init_options.\n+        (lang_hooks): Update.\n+        (lang_decode_option): Remove.\n+        * java/lang.c (lang_init_options): Rename java_init_options.\n+        (lang_decode_option): Rename java_decode_option.\n+        (lang_hooks): Update.\n+        * objc/objc-act.c (lang_init_options): Rename objc_init_options.\n+        (lang_decode_option): Rename objc_decode_option.\n+        (lang_hooks): Update.\n+\n 2001-01-09  Nick Clifton  <nickc@redhat.com>\n \n \t* config/d30v/d30v.c (d30v_eh_epilogue_sp_ofs): Delete."}, {"sha": "dfd772fdbf58aad4ee938b09aa6c7a5e45508c35", "filename": "gcc/c-lang.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -39,11 +39,14 @@ Boston, MA 02111-1307, USA.  */\n static int c_tree_printer PARAMS ((output_buffer *));\n static int c_missing_noreturn_ok_p PARAMS ((tree));\n static void c_init PARAMS ((void));\n+static void c_init_options PARAMS ((void));\n static void c_post_options PARAMS ((void));\n \n /* Each front end provides its own.  */\n struct lang_hooks lang_hooks = {c_init,\n \t\t\t\tNULL, /* c_finish */\n+\t\t\t\tc_init_options,\n+\t\t\t\tc_decode_option,\n \t\t\t\tc_post_options};\n \n /* Post-switch processing.  */\n@@ -53,18 +56,8 @@ c_post_options ()\n   cpp_post_options (parse_in);\n }\n \n-/* Each of the functions defined here\n-   is an alternative to a function in objc-actions.c.  */\n-int\n-lang_decode_option (argc, argv)\n-     int argc;\n-     char **argv;\n-{\n-  return c_decode_option (argc, argv);\n-}\n-\n-void\n-lang_init_options ()\n+static void\n+c_init_options ()\n {\n   parse_in = cpp_create_reader (CLK_GNUC89);\n "}, {"sha": "d0664b1e7901afe24b3c5f94abae316a701807b7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -3913,7 +3913,7 @@ extern tmpl_spec_kind current_tmpl_spec_kind    PARAMS ((int));\n /* in decl2.c */\n extern void init_decl2\t\t\t\tPARAMS ((void));\n extern int check_java_method\t\t\tPARAMS ((tree));\n-extern int lang_decode_option\t\t\tPARAMS ((int, char **));\n+extern int cxx_decode_option\t\t\tPARAMS ((int, char **));\n extern int grok_method_quals\t\t\tPARAMS ((tree, tree, tree));\n extern void warn_if_unknown_interface\t\tPARAMS ((tree));\n extern void grok_x_components\t\t\tPARAMS ((tree));"}, {"sha": "f051a45247cf3cb6a76a02bf32a8fc46db22e6a8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -560,7 +560,7 @@ compare_options (p1, p2)\n    recognise the option.  */\n \n int   \n-lang_decode_option (argc, argv)\n+cxx_decode_option (argc, argv)\n      int argc;\n      char **argv;\n {"}, {"sha": "f295e7ca1925e47d87fc967cc26fc0e1c479c4c0", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -63,6 +63,7 @@ static void handle_pragma_interface PARAMS ((cpp_reader *));\n static void handle_pragma_implementation PARAMS ((cpp_reader *));\n static void cxx_init PARAMS ((void));\n static void cxx_finish PARAMS ((void));\n+static void cxx_init_options PARAMS ((void));\n static void cxx_post_options PARAMS ((void));\n \n #ifdef GATHER_STATISTICS\n@@ -246,6 +247,8 @@ static const char *cplus_tree_code_name[] = {\n /* Each front end provides its own hooks, for toplev.c.  */\n struct lang_hooks lang_hooks = {cxx_init,\n \t\t\t\tcxx_finish,\n+\t\t\t\tcxx_init_options,\n+\t\t\t\tcxx_decode_option,\n \t\t\t\tcxx_post_options};\n \n /* Post-switch processing.  */\n@@ -255,8 +258,8 @@ cxx_post_options ()\n   cpp_post_options (parse_in);\n }\n \n-void\n-lang_init_options ()\n+static void\n+cxx_init_options ()\n {\n   parse_in = cpp_create_reader (CLK_GNUCXX);\n "}, {"sha": "3e6646760f711f259f3c1d88e38c5845cf748def", "filename": "gcc/f/com.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -14677,21 +14677,16 @@ insert_block (block)\n }\n \n /* Each front end provides its own.  */\n-static void f_init PARAMS ((void));\n-static void f_finish PARAMS ((void));\n-\n-struct lang_hooks lang_hooks = {f_init,\n-\t\t\t\tf_finish,\n+static void ffe_init PARAMS ((void));\n+static void ffe_finish PARAMS ((void));\n+static void ffe_init_options PARAMS ((void));\n+\n+struct lang_hooks lang_hooks = {ffe_init,\n+\t\t\t\tffe_finish,\n+\t\t\t\tffe_init_options,\n+\t\t\t\tffe_decode_option,\n \t\t\t\tNULL /* post_options */};\n \n-int\n-lang_decode_option (argc, argv)\n-     int argc;\n-     char **argv;\n-{\n-  return ffe_decode_option (argc, argv);\n-}\n-\n /* used by print-tree.c */\n \n void\n@@ -14703,7 +14698,7 @@ lang_print_xnode (file, node, indent)\n }\n \n static void\n-f_finish ()\n+ffe_finish ()\n {\n   ffe_terminate_0 ();\n \n@@ -14732,8 +14727,8 @@ lang_get_alias_set (t)\n   return 0;\n }\n \n-void\n-lang_init_options ()\n+static void\n+ffe_init_options ()\n {\n   /* Set default options for Fortran.  */\n   flag_move_all_movables = 1;\n@@ -14744,7 +14739,7 @@ lang_init_options ()\n }\n \n static void\n-f_init ()\n+ffe_init ()\n {\n   /* If the file is output from cpp, it should contain a first line\n      `# 1 \"real-filename\"', and the current design of gcc (toplev.c"}, {"sha": "a88203c149133722e1f2e1711c99b3111ba26b99", "filename": "gcc/java/lang.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -46,6 +46,8 @@ struct string_option\n };\n \n static void java_init PARAMS ((void));\n+static void java_init_options PARAMS ((void));\n+static int java_decode_option PARAMS ((int, char **));\n static void put_decl_string PARAMS ((const char *, int));\n static void put_decl_node PARAMS ((tree));\n static void java_dummy_print PARAMS ((const char *));\n@@ -190,6 +192,8 @@ static int dependency_tracking = 0;\n /* Each front end provides its own.  */\n struct lang_hooks lang_hooks = {java_init,\n \t\t\t\tNULL, /* java_finish */\n+\t\t\t\tjava_init_options,\n+\t\t\t\tjava_decode_option,\n \t\t\t\tNULL /* post_options */};\n \n /* Process an option that can accept a `no-' form.\n@@ -224,8 +228,8 @@ process_option_with_no (p, table, table_size)\n  * process java-specific compiler command-line options\n  * return 0, but do not complain if the option is not recognised.\n  */\n-int\n-lang_decode_option (argc, argv)\n+static int\n+java_decode_option (argc, argv)\n      int argc __attribute__ ((__unused__));\n      char **argv;\n {\n@@ -678,8 +682,8 @@ void lang_init_source (level)\n     print_error_function = lang_print_error;\n }\n \n-void\n-lang_init_options ()\n+static void\n+java_init_options ()\n {\n   flag_new_exceptions = 1;\n   flag_bounds_check = 1;"}, {"sha": "12af8f94c2754e80d3feb82307d73d9419d4e6f0", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -148,8 +148,10 @@ char *util_firstobj;\n \n static void init_objc\t\t\t\tPARAMS ((void));\n static void finish_objc\t\t\t\tPARAMS ((void));\n-static void objc_post_options\t\t\tPARAMS ((void));\n static void objc_init\t\t\t\tPARAMS ((void));\n+static void objc_init_options\t\t\tPARAMS ((void));\n+static int objc_decode_option\t\t\tPARAMS ((int, char **));\n+static void objc_post_options\t\t\tPARAMS ((void));\n \n /* Code generation.  */\n \n@@ -631,6 +633,8 @@ static int print_struct_values = 0;\n /* Each front end provides its own.  */\n struct lang_hooks lang_hooks = {objc_init,\n \t\t\t\tNULL, /* objc_finish */\n+\t\t\t\tobjc_init_options,\n+\t\t\t\tobjc_decode_option,\n \t\t\t\tobjc_post_options};\n \n /* Post-switch processing.  */\n@@ -703,8 +707,8 @@ generate_struct_by_value_array ()\n   exit (0);\n }\n \n-void\n-lang_init_options ()\n+static void\n+objc_init_options ()\n {\n   parse_in = cpp_create_reader (CLK_OBJC);\n   c_language = clk_objective_c;\n@@ -774,8 +778,8 @@ lang_identify ()\n   return \"objc\";\n }\n \n-int\n-lang_decode_option (argc, argv)\n+static int\n+objc_decode_option (argc, argv)\n      int argc;\n      char **argv;\n {"}, {"sha": "e9ca07122fac979a010963693325cb7fa2452c95", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -4590,7 +4590,8 @@ main (argc, argv)\n   initialize_diagnostics ();\n \n   /* Perform language-specific options intialization.  */\n-  lang_init_options ();\n+  if (lang_hooks.init_options)\n+    (*lang_hooks.init_options) ();\n \n   /* Scan to see what optimization level has been specified.  That will\n      determine the default value of many flags.  */\n@@ -4700,7 +4701,7 @@ main (argc, argv)\n       unsigned int indep_processed;\n \n       /* Give the language a chance to decode the option for itself.  */\n-      lang_processed = lang_decode_option (argc - i, argv + i);\n+      lang_processed = (*lang_hooks.decode_option) (argc - i, argv + i);\n \n       /* Now see if the option also has a language independent meaning.\n \t Some options are both language specific and language independent,\n@@ -4770,7 +4771,7 @@ main (argc, argv)\n       flag_no_inline = 1;\n       warn_inline = 0;\n \n-      /* The c_decode_option and lang_decode_option functions set\n+      /* The c_decode_option function and decode_option hook set\n \t this to `2' if -Wall is used, so we can avoid giving out\n \t lots of errors for people who don't realize what -Wall does.  */\n       if (warn_uninitialized == 1)"}, {"sha": "97134d98aaced2aba175c3128c134a2690a76205", "filename": "gcc/toplev.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -142,6 +142,16 @@ struct lang_hooks\n   /* Called last, as a finalizer.  */\n   void (*finish) PARAMS ((void));\n \n+  /* Called to initialize options, before any calls to decode_option.  */\n+  void (*init_options) PARAMS ((void));\n+\n+  /* Function called with an option vector as argument, to decode a\n+     single option (typically starting with -f or -W or +).  It should\n+     return the number of command-line arguments it uses if it handles\n+     the option, or 0 and not complain if it does not recognise the\n+     option.  This hook cannot be NULL.  */\n+  int (*decode_option) PARAMS ((int, char **));\n+\n   /* Called when all command line options have been processed.  */\n   void (*post_options) PARAMS ((void));\n };"}, {"sha": "d77336fede0130c134a276de649a9ede2cc77896", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee811cfdfaa9b3dee676e33fcf5853864255a04a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ee811cfdfaa9b3dee676e33fcf5853864255a04a", "patch": "@@ -2563,9 +2563,6 @@ extern tree fold_builtin\t\tPARAMS ((tree));\n \f\n /* The language front-end must define these functions.  */\n \n-/* Function of no arguments for initializing options.  */\n-extern void lang_init_options\t\t\tPARAMS ((void));\n-\n /* Function of no arguments for initializing lexical scanning.  */\n extern void init_lex\t\t\t\tPARAMS ((void));\n /* Function of no arguments for initializing the symbol table.  */\n@@ -2583,11 +2580,6 @@ extern void copy_lang_decl\t\t\tPARAMS ((tree));\n \n /* Function called with no arguments to parse and compile the input.  */\n extern int yyparse\t\t\t\tPARAMS ((void));\n-/* Function called with option as argument\n-   to decode options starting with -f or -W or +.\n-   It should return nonzero if it handles the option.  */\n-extern int lang_decode_option\t\t\tPARAMS ((int, char **));\n-\n /* Functions for processing symbol declarations.  */\n /* Function to enter a new lexical scope.\n    Takes one argument: always zero when called from outside the front end.  */"}]}