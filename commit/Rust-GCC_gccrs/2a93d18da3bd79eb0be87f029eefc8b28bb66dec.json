{"sha": "2a93d18da3bd79eb0be87f029eefc8b28bb66dec", "node_id": "C_kwDOANBUbNoAKDJhOTNkMThkYTNiZDc5ZWIwYmU4N2YwMjllZWZjOGIyOGJiNjZkZWM", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-01T18:02:23Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-01T18:03:25Z"}, "message": "Add/update libgomp.fortran/alloc-*.f90\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/alloc-10.f90: Fix alignment check.\n\t* testsuite/libgomp.fortran/alloc-7.f90: Fix array access.\n\t* testsuite/libgomp.fortran/alloc-8.f90: Likewise.\n\t* testsuite/libgomp.fortran/alloc-11.f90: New test for omp_realloc,\n\tbased on libgomp.c-c++-common/alloc-9.c.", "tree": {"sha": "1a841a17e5bab56cd00043f4c3c720e27071897a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a841a17e5bab56cd00043f4c3c720e27071897a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a93d18da3bd79eb0be87f029eefc8b28bb66dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a93d18da3bd79eb0be87f029eefc8b28bb66dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a93d18da3bd79eb0be87f029eefc8b28bb66dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a93d18da3bd79eb0be87f029eefc8b28bb66dec/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dc7ce6fb3917958d1a6036d8acf2953b9c1b868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc7ce6fb3917958d1a6036d8acf2953b9c1b868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc7ce6fb3917958d1a6036d8acf2953b9c1b868"}], "stats": {"total": 321, "additions": 311, "deletions": 10}, "files": [{"sha": "3eab8598deca2f6b742170321775b73963124268", "filename": "libgomp/testsuite/libgomp.fortran/alloc-10.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a93d18da3bd79eb0be87f029eefc8b28bb66dec/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a93d18da3bd79eb0be87f029eefc8b28bb66dec/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-10.f90?ref=2a93d18da3bd79eb0be87f029eefc8b28bb66dec", "patch": "@@ -134,7 +134,7 @@ program main\n   ip(420 / c_sizeof (0)) = 6\n   q = omp_aligned_calloc (8_c_size_t, 24_c_size_t, 32_c_size_t, a2)\n   call c_f_pointer (q, iq, [768 / c_sizeof (0)])\n-  if (mod (TRANSFER (p, iptr), 16) /= 0) &\n+  if (mod (TRANSFER (q, iptr), 16) /= 0) &\n     stop 18\n   do i = 1, 768 / c_sizeof (0)\n     if (iq(i) /= 0) &\n@@ -144,7 +144,7 @@ program main\n   iq(768 / c_sizeof (0)) = 8\n   r = omp_aligned_calloc (8_c_size_t, 64_c_size_t, 8_c_size_t, a2)\n   call c_f_pointer (r, ir, [512 / c_sizeof (0)])\n-  if (mod (TRANSFER (p, iptr), 8) /= 0) &\n+  if (mod (TRANSFER (r, iptr), 8) /= 0) &\n     stop 20\n   do i = 1, 512 / c_sizeof (0)\n     if (ir(i) /= 0) &"}, {"sha": "22b4f92a336a358eb240151671ece354527e8adb", "filename": "libgomp/testsuite/libgomp.fortran/alloc-11.f90", "status": "added", "additions": 301, "deletions": 0, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a93d18da3bd79eb0be87f029eefc8b28bb66dec/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a93d18da3bd79eb0be87f029eefc8b28bb66dec/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-11.f90?ref=2a93d18da3bd79eb0be87f029eefc8b28bb66dec", "patch": "@@ -0,0 +1,301 @@\n+! { dg-additional-sources alloc-7.c }\n+! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n+module m\n+  use omp_lib\n+  use iso_c_binding\n+  implicit none\n+\n+  type (omp_alloctrait), parameter :: traits2(*) &\n+    = [ omp_alloctrait (omp_atk_alignment, 16), &\n+        omp_alloctrait (omp_atk_sync_hint, omp_atv_default), &\n+        omp_alloctrait (omp_atk_access, omp_atv_default), &\n+        omp_alloctrait (omp_atk_pool_size, 1024), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_default_mem_fb), &\n+        omp_alloctrait (omp_atk_partition, omp_atv_environment)]\n+  type (omp_alloctrait) :: traits3(7) &\n+    = [ omp_alloctrait (omp_atk_sync_hint, omp_atv_uncontended), &\n+        omp_alloctrait (omp_atk_alignment, 32), &\n+        omp_alloctrait (omp_atk_access, omp_atv_all), &\n+        omp_alloctrait (omp_atk_pool_size, 512), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_allocator_fb), &\n+        omp_alloctrait (omp_atk_fb_data, 0), &\n+        omp_alloctrait (omp_atk_partition, omp_atv_default)]\n+\n+  type (omp_alloctrait), parameter :: traits4(*) &\n+    = [ omp_alloctrait (omp_atk_alignment, 128), &\n+        omp_alloctrait (omp_atk_pool_size, 1024), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_null_fb)]\n+\n+  interface\n+    integer(c_int) function get__alignof_int () bind(C)\n+      import :: c_int\n+    end\n+  end interface\n+end module m\n+\n+program main\n+  use m\n+  implicit none (external, type)\n+  type(c_ptr) :: p, q, r\n+  integer, pointer, contiguous :: ip(:), iq(:), ir(:)\n+  type (omp_alloctrait) :: traits(3)\n+  type (omp_alloctrait) :: traits5(2)\n+  integer (omp_allocator_handle_kind) :: a, a2\n+  integer (c_ptrdiff_t) :: iptr\n+\n+  traits = [ omp_alloctrait (omp_atk_alignment, 64), &\n+             omp_alloctrait (omp_atk_fallback, omp_atv_null_fb), &\n+             omp_alloctrait (omp_atk_pool_size, 4096)]\n+  traits5 = [ omp_alloctrait (omp_atk_fallback, omp_atv_null_fb), &\n+              omp_alloctrait (omp_atk_pool_size, 4096)]\n+\n+  p = omp_alloc (3 * c_sizeof (0), omp_default_mem_alloc)\n+  call c_f_pointer (p, ip, [3])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0) &\n+    stop 1\n+  ip(1) = 1\n+  ip(2) = 2\n+  ip(3) = 3\n+  p = omp_realloc (p, 4 * c_sizeof (0), omp_default_mem_alloc, omp_default_mem_alloc)\n+  call c_f_pointer (p, ip, [4])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0 &\n+      .or. ip(1) /= 1 .or. ip(2) /= 2 .or. ip(3) /= 3) &\n+    stop 2\n+  ip(1) = 4\n+  ip(2) = 5\n+  ip(3) = 6\n+  ip(4) = 7\n+  p = omp_realloc (p, 2 * c_sizeof (0), omp_default_mem_alloc, omp_default_mem_alloc)\n+  call c_f_pointer (p, ip, [2])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0 &\n+      .or. ip(1) /= 4 .or. ip(2) /= 5) &\n+    stop 3\n+  ip(1) = 8\n+  ip(2) = 9\n+  if (c_associated (omp_realloc (p, 0_c_size_t, omp_null_allocator, omp_default_mem_alloc))) &\n+    stop 4\n+  p = omp_realloc (c_null_ptr, 2 * c_sizeof (0), omp_default_mem_alloc, omp_null_allocator)\n+  call c_f_pointer (p, ip, [2])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0) &\n+    stop 5\n+  ip(1) = 1\n+  ip(2) = 2\n+  p = omp_realloc (p, 5 * c_sizeof (0), omp_default_mem_alloc, omp_default_mem_alloc)\n+  call c_f_pointer (p, ip, [5])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0 &\n+      .or. ip(1) /= 1 .or. ip(2) /= 2) &\n+    stop 6\n+  ip(1) = 3\n+  ip(2) = 4\n+  ip(3) = 5\n+  ip(4) = 6\n+  ip(5) = 7\n+  call omp_free (p, omp_null_allocator)\n+  call omp_set_default_allocator (omp_default_mem_alloc)\n+  if (c_associated (omp_realloc (c_null_ptr, 0_c_size_t, omp_null_allocator, omp_null_allocator))) &\n+    stop 7\n+  p = omp_alloc (c_sizeof (0), omp_null_allocator)\n+  call c_f_pointer (p, ip, [1])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0) &\n+    stop 8\n+  ip(1) = 3\n+  p = omp_realloc (p, 3 * c_sizeof (0), omp_null_allocator, omp_null_allocator)\n+  call c_f_pointer (p, ip, [3])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0 &\n+      .or. ip(1) /= 3) &\n+    stop 9\n+  ip(1) = 4\n+  ip(2) = 5\n+  ip(3) = 6\n+  if (c_associated (omp_realloc (p, 0_c_size_t, omp_null_allocator, omp_get_default_allocator ()))) &\n+    stop 10\n+  a = omp_init_allocator (omp_default_mem_space, 3, traits)\n+  if (a == omp_null_allocator) &\n+    stop 11\n+  p = omp_alloc (c_sizeof (0), a)\n+  call c_f_pointer (p, ip, [1])\n+  if (mod (TRANSFER (p, iptr), 64) /= 0) &\n+    stop 12\n+  ip(1) = 7\n+  p = omp_realloc (p, 3072_c_size_t, a, a)\n+  call c_f_pointer (p, ip, [3072 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 64) /= 0 &\n+      .or. ip(1) /= 7) &\n+    stop 13\n+  ip(1) = 1\n+  ip(3072 / c_sizeof (0)) = 2\n+  q = omp_alloc (c_sizeof (0), a)\n+  call c_f_pointer (q, iq, [1])\n+  if (mod (TRANSFER (q, iptr), 64) /= 0) &\n+    stop 14\n+  iq(1) = 8\n+  if (c_associated (omp_realloc (q, 3072_c_size_t, a, a))) &\n+    stop 15\n+  call omp_free (p, a)\n+  call omp_free (q, a)\n+  p = omp_alloc (c_sizeof (0), a)\n+  call c_f_pointer (p, ip, [1])\n+  ip(1) = 42\n+  p = omp_realloc (p, 3072_c_size_t, a, a)\n+  call c_f_pointer (p, ip, [3072 / c_sizeof (0)])\n+  if (ip(1) /= 42) &\n+    stop 16\n+  ip(1) = 3\n+  ip(3072 / c_sizeof (0)) = 4\n+  ! ignore return value\n+  r = omp_realloc (p, 0_c_size_t, omp_null_allocator, omp_null_allocator)\n+  call omp_set_default_allocator (a)\n+  if (omp_get_default_allocator () /= a) &\n+    stop 17\n+  p = omp_alloc (31_c_size_t, omp_null_allocator)\n+  if (.not. c_associated (p)) &\n+    stop 18\n+  p = omp_realloc (p, 3072_c_size_t, omp_null_allocator, omp_null_allocator)\n+  if (.not. c_associated (p)) &\n+    stop 19\n+  q = omp_alloc (c_sizeof (0), omp_null_allocator)\n+  if (.not. c_associated (q)) &\n+    stop 20\n+  if (c_associated (omp_realloc (q, 3072_c_size_t, omp_null_allocator, omp_null_allocator))) &\n+    stop 21\n+  call omp_free (p, a)\n+  call omp_free (q, a)\n+  call omp_destroy_allocator (a)\n+\n+  a = omp_init_allocator (omp_default_mem_space, 2, traits5)\n+  if (a == omp_null_allocator) &\n+    stop 22\n+  call omp_set_default_allocator (a)\n+  if (omp_get_default_allocator () /= a) &\n+    stop 23\n+  p = omp_alloc (3071_c_size_t, omp_null_allocator)\n+  if (.not. c_associated (p)) &\n+    stop 24\n+  p = omp_realloc (p, 3072_c_size_t, omp_null_allocator, omp_null_allocator)\n+  if (.not. c_associated (p)) &\n+    stop 25\n+  q = omp_alloc (c_sizeof (0), omp_null_allocator)\n+  if (.not. c_associated (q)) &\n+    stop 26\n+  if (c_associated (omp_realloc (q, 3072_c_size_t, omp_null_allocator, omp_null_allocator))) &\n+    stop 27\n+  call omp_free (p, a)\n+  call omp_free (q, a)\n+  call omp_destroy_allocator (a)\n+\n+  a = omp_init_allocator (omp_default_mem_space, size (traits2), traits2)\n+  if (a == omp_null_allocator) &\n+    stop 28\n+  if (traits3(6)%key /= omp_atk_fb_data) &\n+    stop 29\n+  traits3(6)%value = a\n+  a2 = omp_init_allocator (omp_default_mem_space, size (traits3), traits3)\n+  if (a2 == omp_null_allocator) &\n+    stop 30\n+  p = omp_alloc (c_sizeof (0), a2)\n+  call c_f_pointer (p, ip, [1])\n+  if (mod (TRANSFER (p, iptr), 32) /= 0) &\n+    stop 31\n+  ip(1) = 84\n+  p = omp_realloc (p, 380_c_size_t, a2, a2)\n+  call c_f_pointer (p, ip, [380 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 32) /= 0 &\n+      .or. ip(1) /= 84) &\n+    stop 32\n+  ip(1) = 5\n+  ip(380 / c_sizeof (0)) = 6\n+  q = omp_alloc (c_sizeof (0), a2)\n+  call c_f_pointer (q, iq, [1])\n+  if (mod (TRANSFER (q, iptr), 32) /= 0) &\n+    stop 33\n+  iq(1) = 42\n+  q = omp_realloc (q, 768_c_size_t, a2, a2)\n+  call c_f_pointer (q, iq, [768 / c_sizeof (0)])\n+  if (mod (TRANSFER (q, iptr), 16) /= 0 &\n+      .or. iq(1) /= 42) &\n+    stop 34\n+  iq(1) = 7\n+  iq(768 / c_sizeof (0)) = 8\n+  r = omp_realloc (c_null_ptr, 512_c_size_t, a2, omp_null_allocator)\n+  call c_f_pointer (r, ir, [512 / c_sizeof (0)])\n+  if (mod (TRANSFER (r, iptr), get__alignof_int ()) /= 0) &\n+    stop 35\n+  ir(1) = 9\n+  ir(512 / c_sizeof (0)) = 10\n+  call omp_free (p, omp_null_allocator)\n+  call omp_free (q, a2)\n+  call omp_free (r, omp_null_allocator)\n+  p = omp_alloc (c_sizeof (0), a2)\n+  call c_f_pointer (p, ip, [1])\n+  if (mod (TRANSFER (p, iptr), 32) /= 0) &\n+    stop 36\n+  ip(1) = 85\n+  p = omp_realloc (p, 420_c_size_t, a, a2)\n+  call c_f_pointer (p, ip, [420 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 16) /= 0 &\n+      .or. ip(1) /= 85) &\n+    stop 37\n+  ip(1) = 5\n+  ip(420 / c_sizeof (0)) = 6\n+  q = omp_alloc (c_sizeof (0), a)\n+  call c_f_pointer (q, iq, [1])\n+  if (mod (TRANSFER (q, iptr), 16) /= 0) &\n+    stop 38\n+  iq(1) = 43\n+  q = omp_realloc (q, 420_c_size_t, a2, a)\n+  call c_f_pointer (q, iq, [420 / c_sizeof (0)])\n+  if (mod (TRANSFER (q, iptr), 32) /= 0 &\n+      .or. iq(1) /= 43) &\n+    stop 39\n+  iq(1) = 44\n+  iq(420 / c_sizeof (0)) = 8\n+  q = omp_realloc (q, 768_c_size_t, a2, a2)\n+  call c_f_pointer (q, iq, [768 / c_sizeof (0)])\n+  if (mod (TRANSFER (q, iptr), 16) /= 0 &\n+      .or. iq(1) /= 44) &\n+    stop 40\n+  iq(1) = 7\n+  iq(768 / c_sizeof (0)) = 8\n+  call omp_free (p, omp_null_allocator)\n+  call omp_free (q, a2)\n+  call omp_destroy_allocator (a2)\n+  call omp_destroy_allocator (a)\n+\n+  a = omp_init_allocator (omp_default_mem_space, size (traits4), traits4)\n+  if (a == omp_null_allocator) &\n+    stop 41\n+  if (traits3(6)%key /= omp_atk_fb_data) &\n+    stop 1\n+  traits3(6)%value = a\n+  a2 = omp_init_allocator (omp_default_mem_space, size (traits3), traits3)\n+  if (a2 == omp_null_allocator) &\n+    stop 42\n+  call omp_set_default_allocator (a2)\n+  p = omp_realloc (c_null_ptr, 420_c_size_t, omp_null_allocator, omp_null_allocator)\n+  call c_f_pointer (p, ip, [420 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 32) /= 0) &\n+    stop 43\n+  ip(1) = 5\n+  ip(420 / c_sizeof (0)) = 6\n+  q = omp_realloc (c_null_ptr, c_sizeof (0), omp_null_allocator, omp_null_allocator)\n+  call c_f_pointer (q, iq, [1])\n+  if (mod (TRANSFER (q, iptr), 32) /= 0) &\n+    stop 44\n+  iq(1) = 99\n+  q = omp_realloc (q, 700_c_size_t, omp_null_allocator, omp_null_allocator)\n+  call c_f_pointer (q, iq, [700 / c_sizeof (0)])\n+  if (mod (TRANSFER (q, iptr), 128) /= 0 &\n+      .or. iq(1) /= 99) &\n+    stop 45\n+  iq(1) = 7\n+  iq(700 / c_sizeof (0)) = 8\n+  if (c_associated (omp_realloc (c_null_ptr, 768_c_size_t, omp_null_allocator, omp_null_allocator))) &\n+    stop 46\n+  call omp_free (p, omp_null_allocator)\n+  if (c_associated (omp_realloc (q, 0_c_size_t, omp_null_allocator, omp_null_allocator))) &\n+    stop 47\n+  call omp_free (c_null_ptr, omp_null_allocator)\n+  call omp_free (c_null_ptr, omp_null_allocator)\n+  call omp_destroy_allocator (a2)\n+  call omp_destroy_allocator (a)\n+end program main"}, {"sha": "57ecd839c2665bcc64103c62c3fde4ca8cc8ce91", "filename": "libgomp/testsuite/libgomp.fortran/alloc-7.f90", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a93d18da3bd79eb0be87f029eefc8b28bb66dec/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a93d18da3bd79eb0be87f029eefc8b28bb66dec/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-7.f90?ref=2a93d18da3bd79eb0be87f029eefc8b28bb66dec", "patch": "@@ -50,25 +50,25 @@ program main\n   call c_f_pointer (p, ip, [3])\n   if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0) &\n     stop 1\n-  ip(0) = 1\n-  ip(1) = 2\n-  ip(2) = 3\n+  ip(1) = 1\n+  ip(2) = 2\n+  ip(3) = 3\n   call omp_free (p, omp_default_mem_alloc)\n \n   p = omp_aligned_alloc (2 * c_sizeof (0), 2 * c_sizeof (0), omp_default_mem_alloc)\n   call c_f_pointer (p, ip, [2])\n   if (mod (TRANSFER (p, iptr), 2 * c_sizeof (0)) /= 0) &\n     stop 2\n-  ip(0) = 1\n-  ip(1) = 2\n+  ip(1) = 1\n+  ip(2) = 2\n   call omp_free (p, omp_null_allocator)\n \n   call omp_set_default_allocator (omp_default_mem_alloc)\n   p = omp_aligned_alloc (1_c_size_t, 2 * c_sizeof (0), omp_null_allocator)\n   call c_f_pointer (p, ip, [2])\n   if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0) &\n     stop 3\n-  ip(0) = 3\n+  ip(1) = 3\n   call omp_free (p, omp_get_default_allocator ())\n \n   a = omp_init_allocator (omp_default_mem_space, 3, traits)\n@@ -155,7 +155,7 @@ program main\n   call c_f_pointer (p, ip, [420/c_sizeof (0)])\n   if (mod (TRANSFER (p, iptr), 32) /= 0) &\n     stop 18\n-  ip(0) = 5\n+  ip(1) = 5\n   ip(420 / c_sizeof (0)) = 6\n \n   q = omp_aligned_alloc (64_c_size_t, 768_c_size_t, omp_null_allocator)"}, {"sha": "059c368781eeb91863473ff11a71bb2d9f4849a3", "filename": "libgomp/testsuite/libgomp.fortran/alloc-8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a93d18da3bd79eb0be87f029eefc8b28bb66dec/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a93d18da3bd79eb0be87f029eefc8b28bb66dec/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-8.f90?ref=2a93d18da3bd79eb0be87f029eefc8b28bb66dec", "patch": "@@ -41,7 +41,7 @@ program main\n   call omp_free (p, a)\n   large_sz = NOT (0_c_size_t)\n   large_sz = ISHFT (large_sz, -1)\n-  large_sz = large_sz + 1\n+  large_sz = large_sz + 1  ! signed integer overflow\n   if (c_associated (omp_calloc (2_c_size_t, large_sz, a))) &\n     stop 7\n   if (c_associated (omp_calloc (large_sz, 1024_c_size_t, a))) &"}]}