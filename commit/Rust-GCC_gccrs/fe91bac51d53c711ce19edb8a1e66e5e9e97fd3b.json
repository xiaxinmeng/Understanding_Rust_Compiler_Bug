{"sha": "fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5MWJhYzUxZDUzYzcxMWNlMTllZGI4YTFlNjZlNWU5ZTk3ZmQzYg==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2003-03-16T21:26:04Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2003-03-16T21:26:04Z"}, "message": "m68hc11.c (print_operand): Handle 'b' modifier for D register to specify the low part of it, aka B.\n\n\t* config/m68hc11/m68hc11.c (print_operand): Handle 'b' modifier\n\tfor D register to specify the low part of it, aka B.\n\t(m68hc11_gen_movhi): Use REG_WAS_0 note and increment or decrement\n\tthe register if we are loading 1 or -1 to it; avoid using temp\n\tregister when moving X/Y to Y/X.\n\t(m68hc11_gen_movqi): Likewise.\n\t(m68hc11_check_z_replacement): Fix last insn setting for compare case.\n\nFrom-SVN: r64447", "tree": {"sha": "173d737559cdd50359b14aae379463178964234d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/173d737559cdd50359b14aae379463178964234d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b/comments", "author": null, "committer": null, "parents": [{"sha": "ddc67067146f2783f386e61f880d6fe87fb324a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc67067146f2783f386e61f880d6fe87fb324a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc67067146f2783f386e61f880d6fe87fb324a3"}], "stats": {"total": 71, "additions": 67, "deletions": 4}, "files": [{"sha": "49069bdc7cb40657cfcd62bb8ddf2b3fd66f96c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b", "patch": "@@ -1,3 +1,13 @@\n+2003-03-16  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.c (print_operand): Handle 'b' modifier\n+\tfor D register to specify the low part of it, aka B.\n+\t(m68hc11_gen_movhi): Use REG_WAS_0 note and increment or decrement\n+\tthe register if we are loading 1 or -1 to it; avoid using temp\n+\tregister when moving X/Y to Y/X.\n+\t(m68hc11_gen_movqi): Likewise.\n+\t(m68hc11_check_z_replacement): Fix last insn setting for compare case.\n+\n 2003-03-14  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR optimization/9016"}, {"sha": "0794a3e5e6578544ee4271212b0733e305fd2979", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=fe91bac51d53c711ce19edb8a1e66e5e9e97fd3b", "patch": "@@ -2154,6 +2154,10 @@ print_operand (file, op, letter)\n \t  asm_print_register (file, REGNO (op));\n \t  fprintf (file, \"+1\");\n \t}\n+      else if (letter == 'b' && D_REG_P (op))\n+\t{\n+\t  asm_print_register (file, HARD_B_REGNUM);\n+\t}\n       else\n \t{\n \t  asm_print_register (file, REGNO (op));\n@@ -3205,6 +3209,16 @@ m68hc11_gen_movhi (insn, operands)\n \t{\n \t  if (SP_REG_P (operands[0]))\n \t    output_asm_insn (\"lds\\t%1\", operands);\n+\t  else if (!D_REG_P (operands[0])\n+                   && GET_CODE (operands[1]) == CONST_INT\n+                   && (INTVAL (operands[1]) == 1 || INTVAL (operands[1]) == -1)\n+                   && find_reg_note (insn, REG_WAS_0, 0))\n+            {\n+              if (INTVAL (operands[1]) == 1)\n+                output_asm_insn (\"in%0\", operands);\n+              else\n+                output_asm_insn (\"de%0\", operands);\n+            }\n \t  else\n \t    output_asm_insn (\"ld%0\\t%1\", operands);\n \t}\n@@ -3370,18 +3384,33 @@ m68hc11_gen_movhi (insn, operands)\n                   output_asm_insn (\"xgdx\", operands);\n                   CC_STATUS_INIT;\n                 }\n-              else\n+              else if (!optimize_size)\n                 {\n                   output_asm_insn (\"sty\\t%t1\", operands);\n                   output_asm_insn (\"ldx\\t%t1\", operands);\n                 }\n+              else\n+                {\n+                  CC_STATUS_INIT;\n+                  output_asm_insn (\"pshy\", operands);\n+                  output_asm_insn (\"pulx\", operands);\n+                }\n \t    }\n \t  else if (SP_REG_P (operands[1]))\n \t    {\n \t      /* tsx, tsy preserve the flags */\n \t      cc_status = cc_prev_status;\n \t      output_asm_insn (\"tsx\", operands);\n \t    }\n+\t  else if (GET_CODE (operands[1]) == CONST_INT\n+                   && (INTVAL (operands[1]) == 1 || INTVAL (operands[1]) == -1)\n+                   && find_reg_note (insn, REG_WAS_0, 0))\n+            {\n+              if (INTVAL (operands[1]) == 1)\n+                output_asm_insn (\"in%0\", operands);\n+              else\n+                output_asm_insn (\"de%0\", operands);\n+            }\n \t  else\n \t    {\n \t      output_asm_insn (\"ldx\\t%1\", operands);\n@@ -3412,19 +3441,34 @@ m68hc11_gen_movhi (insn, operands)\n                   output_asm_insn (\"xgdy\", operands);\n                   CC_STATUS_INIT;\n                 }\n-              else\n+              else if (!optimize_size)\n                 {\n                   output_asm_insn (\"stx\\t%t1\", operands);\n                   output_asm_insn (\"ldy\\t%t1\", operands);\n                 }\n+              else\n+                {\n+                  CC_STATUS_INIT;\n+                  output_asm_insn (\"pshx\", operands);\n+                  output_asm_insn (\"puly\", operands);\n+                }\n \t    }\n \t  else if (SP_REG_P (operands[1]))\n \t    {\n \t      /* tsx, tsy preserve the flags */\n \t      cc_status = cc_prev_status;\n \t      output_asm_insn (\"tsy\", operands);\n \t    }\n-\t  else\n+\t  else if (GET_CODE (operands[1]) == CONST_INT\n+                   && (INTVAL (operands[1]) == 1 || INTVAL (operands[1]) == -1)\n+                   && find_reg_note (insn, REG_WAS_0, 0))\n+            {\n+              if (INTVAL (operands[1]) == 1)\n+                output_asm_insn (\"in%0\", operands);\n+              else\n+                output_asm_insn (\"de%0\", operands);\n+            }\n+          else\n \t    {\n \t      output_asm_insn (\"ldy\\t%1\", operands);\n \t    }\n@@ -3664,6 +3708,15 @@ m68hc11_gen_movqi (insn, operands)\n \t\t  output_asm_insn (\"ldab\\t%T0\", operands);\n \t\t}\n \t    }\n+\t  else if (GET_CODE (operands[1]) == CONST_INT\n+                   && (INTVAL (operands[1]) == 1 || INTVAL (operands[1]) == -1)\n+                   && find_reg_note (insn, REG_WAS_0, 0))\n+            {\n+              if (INTVAL (operands[1]) == 1)\n+                output_asm_insn (\"inc%b0\", operands);\n+              else\n+                output_asm_insn (\"dec%b0\", operands);\n+            }          \n \t  else if (!DB_REG_P (operands[1]) && !D_REG_P (operands[1])\n \t\t   && !DA_REG_P (operands[1]))\n \t    {\n@@ -4191,7 +4244,7 @@ m68hc11_check_z_replacement (insn, info)\n \t\t  info->need_save_z = 0;\n \t\t  info->found_call = 1;\n \t\t  info->regno = SOFT_Z_REGNUM;\n-\t\t  info->last = insn;\n+\t\t  info->last = NEXT_INSN (insn);\n \t\t}\n \t      return 0;\n \t    }"}]}