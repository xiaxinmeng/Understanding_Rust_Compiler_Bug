{"sha": "0a2ed1f101ae61e97e3e652dde6a537ecb4a267c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEyZWQxZjEwMWFlNjFlOTdlM2U2NTJkZGU2YTUzN2VjYjRhMjY3Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-03-22T11:11:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-03-22T11:11:21Z"}, "message": "cfgcleanup.c (outgoing_edges_math): Fix condition; relax frequencies match; avoid match on different loop depths.\n\n\t* cfgcleanup.c (outgoing_edges_math): Fix condition; relax\n\tfrequencies match; avoid match on different loop depths.\n\t(try_crossjump_to_bb): Kill tests that no longer brings time\n\tsavings.\n\t* cfgrtl.c (force_nonfallthru_and_redirect): Fix loop_depth\n\tupdating code.\n\t(split_edge): Likewise.\n\n\t* flow.c (update_life_info_in_dirty_blocks): Fix uninitialized\n\tvariable.\n\n\t* Makefile.in (cfgrtl): Add insn-config.h depenendency.\n\t* cfgrtl.c: Include insn-config.h\n\t(split_block) Dirtify block in presence of conditional execution\n\nFrom-SVN: r51168", "tree": {"sha": "c1fc98111346b8e70b39c4624897463b590685e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1fc98111346b8e70b39c4624897463b590685e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/comments", "author": null, "committer": null, "parents": [{"sha": "4d72536eeccbed73b276fb236a89228c34d5f50f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d72536eeccbed73b276fb236a89228c34d5f50f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d72536eeccbed73b276fb236a89228c34d5f50f"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "8a3de753a4d116a3a8a469c19ccb493438c07d60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a2ed1f101ae61e97e3e652dde6a537ecb4a267c", "patch": "@@ -1,3 +1,20 @@\n+Fri Mar 22 12:08:36 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgcleanup.c (outgoing_edges_math): Fix condition; relax\n+\tfrequencies match; avoid match on different loop depths.\n+\t(try_crossjump_to_bb): Kill tests that no longer brings time\n+\tsavings.\n+\t* cfgrtl.c (force_nonfallthru_and_redirect): Fix loop_depth\n+\tupdating code.\n+\t(split_edge): Likewise.\n+\n+\t* flow.c (update_life_info_in_dirty_blocks): Fix uninitialized\n+\tvariable.\n+\n+\t* Makefile.in (cfgrtl): Add insn-config.h depenendency.\n+\t* cfgrtl.c: Include insn-config.h\n+\t(split_block) Dirtify block in presence of conditional execution\n+\n 2002-03-22  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/abi64.h (SETUP_INCOMING_VARARGS): Undefine."}, {"sha": "462e20e4c682af2ab919c8dff53032227c6e6280", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0a2ed1f101ae61e97e3e652dde6a537ecb4a267c", "patch": "@@ -1494,7 +1494,7 @@ cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h insn-config.h \\\n    function.h except.h $(GGC_H) $(TM_P_H)\n cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n-   function.h except.h $(GGC_H) $(TM_P_H)\n+   function.h except.h $(GGC_H) $(TM_P_H) insn-config.h\n cfganal.o : cfganal.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(BASIC_BLOCK_H) \\\n    hard-reg-set.h insn-config.h $(RECOG_H) $(GGC_H) $(TM_P_H)\n cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h insn-config.h \\"}, {"sha": "bc637e4ee4829e1050f7a4c6ea9f715c4eca3cb0", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=0a2ed1f101ae61e97e3e652dde6a537ecb4a267c", "patch": "@@ -1116,9 +1116,20 @@ outgoing_edges_match (mode, bb1, bb2)\n \n       if (!bb2->succ\n           || !bb2->succ->succ_next\n-\t  || bb1->succ->succ_next->succ_next\n+\t  || bb2->succ->succ_next->succ_next\n \t  || !any_condjump_p (bb2->end)\n-\t  || !onlyjump_p (bb1->end))\n+\t  || !onlyjump_p (bb2->end))\n+\treturn false;\n+\n+      /* Do not crossjump across loop boundaries.  This is a temporary\n+\t workaround for the common scenario in which crossjumping results\n+\t in killing the duplicated loop condition, making bb-reorder rotate\n+\t the loop incorectly, leaving an extra unconditional jump inside\n+\t the loop.\n+\n+\t This check should go away once bb-reorder knows how to duplicate\n+\t code in this case or rotate the loops to avoid this scenario.  */\n+      if (bb1->loop_depth != bb2->loop_depth)\n \treturn false;\n \n       b1 = BRANCH_EDGE (bb1);\n@@ -1194,9 +1205,10 @@ outgoing_edges_match (mode, bb1, bb2)\n \t    /* Do not use f2 probability as f2 may be forwarded.  */\n \t    prob2 = REG_BR_PROB_BASE - b2->probability;\n \n-\t  /* Fail if the difference in probabilities is\n-\t     greater than 5%.  */\n-\t  if (abs (b1->probability - prob2) > REG_BR_PROB_BASE / 20)\n+\t  /* Fail if the difference in probabilities is greater than 50%.\n+\t     This rules out two well-predicted branches with opposite\n+\t     outcomes.  */\n+\t  if (abs (b1->probability - prob2) > REG_BR_PROB_BASE / 5)\n \t    {\n \t      if (rtl_dump_file)\n \t\tfprintf (rtl_dump_file,"}, {"sha": "a4f7006d392f96299f0d932abeba6b09329d0a6f", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=0a2ed1f101ae61e97e3e652dde6a537ecb4a267c", "patch": "@@ -56,6 +56,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"obstack.h\"\n+#include \"insn-config.h\"\n \n /* Stubs in case we don't have a return insn.  */\n #ifndef HAVE_return\n@@ -546,6 +547,15 @@ split_block (bb, insn)\n       propagate_block (new_bb, new_bb->global_live_at_start, NULL, NULL, 0);\n       COPY_REG_SET (bb->global_live_at_end,\n \t\t    new_bb->global_live_at_start);\n+#ifdef HAVE_conditional_execution\n+      /* In the presence of conditional execution we are not able to update\n+\t liveness precisely.  */\n+      if (reload_completed)\n+\t{\n+\t  bb->flags |= BB_DIRTY;\n+\t  new_bb->flags |= BB_DIRTY;\n+\t}\n+#endif\n     }\n \n   return new_edge;"}, {"sha": "71ed939da63ee13152d7838cebec713299fd3af8", "filename": "gcc/flow.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2ed1f101ae61e97e3e652dde6a537ecb4a267c/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=0a2ed1f101ae61e97e3e652dde6a537ecb4a267c", "patch": "@@ -764,7 +764,7 @@ update_life_info_in_dirty_blocks (extent, prop_flags)\n   sbitmap update_life_blocks = sbitmap_alloc (n_basic_blocks);\n   int block_num;\n   int n = 0;\n-  int ndead;\n+  int retval = 0;\n \n   sbitmap_zero (update_life_blocks);\n   for (block_num = 0; block_num < n_basic_blocks; block_num++)\n@@ -775,10 +775,10 @@ update_life_info_in_dirty_blocks (extent, prop_flags)\n       }\n \n   if (n)\n-    ndead = update_life_info (update_life_blocks, extent, prop_flags);\n+    retval = update_life_info (update_life_blocks, extent, prop_flags);\n \n   sbitmap_free (update_life_blocks);\n-  return ndead;\n+  return retval;\n }\n \n /* Free the variables allocated by find_basic_blocks."}]}