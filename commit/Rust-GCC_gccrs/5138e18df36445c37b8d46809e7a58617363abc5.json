{"sha": "5138e18df36445c37b8d46809e7a58617363abc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEzOGUxOGRmMzY0NDVjMzdiOGQ0NjgwOWU3YTU4NjE3MzYzYWJjNQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-04-08T15:57:20Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-04-08T15:57:20Z"}, "message": "epiphany.md (logical_op): New code iterator.\n\n        * config/epiphany/epiphany.md (logical_op): New code iterator.\n        (op_mnc): New code attribute.\n        (<op_mnc>_f, mov_f, cstoresi4): New patterns.\n        (mov_f+1, mov_f+2): New peephole2 patterns.\n\nFrom-SVN: r197589", "tree": {"sha": "c7e40b70525a1c3fe8aeae5ebb2d5572a3bf0535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7e40b70525a1c3fe8aeae5ebb2d5572a3bf0535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5138e18df36445c37b8d46809e7a58617363abc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5138e18df36445c37b8d46809e7a58617363abc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5138e18df36445c37b8d46809e7a58617363abc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5138e18df36445c37b8d46809e7a58617363abc5/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa7707d6e757b2a61aef76f42b05fead6e5b29ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7707d6e757b2a61aef76f42b05fead6e5b29ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa7707d6e757b2a61aef76f42b05fead6e5b29ab"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "cad07ad79ad87e69d4d41900cd0d1cbd026fbf4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5138e18df36445c37b8d46809e7a58617363abc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5138e18df36445c37b8d46809e7a58617363abc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5138e18df36445c37b8d46809e7a58617363abc5", "patch": "@@ -20,6 +20,11 @@\n \t* config/epiphany/epiphany.md (addsi3_i): Add r/r/CnL alternative.\n \t* config/epiphany/predicates.md (add_operand): Allow 1024.\n \n+\t* config/epiphany/epiphany.md (logical_op): New code iterator.\n+\t(op_mnc): New code attribute.\n+\t(<op_mnc>_f, mov_f, cstoresi4): New patterns.\n+\t(mov_f+1, mov_f+2): New peephole2 patterns.\n+\n 2013-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34949"}, {"sha": "1908fedf7e54468c5dd4e182555eea244f53ec62", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5138e18df36445c37b8d46809e7a58617363abc5/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5138e18df36445c37b8d46809e7a58617363abc5/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=5138e18df36445c37b8d46809e7a58617363abc5", "patch": "@@ -1721,6 +1721,110 @@\n   \"sub %0,%1,%2\"\n   [(set_attr \"type\" \"compare\")])\n \n+(define_code_iterator logical_op\n+  [and ior xor])\n+\n+(define_code_attr op_mnc\n+  [(plus \"add\") (minus \"sub\") (and \"and\") (ior \"orr\") (xor \"eor\")])\n+\n+(define_insn \"*<op_mnc>_f\"\n+  [(set (reg:CC CC_REGNUM)\n+        (compare:CC (logical_op:SI (match_operand:SI 1 \"gpr_operand\" \"%r\")\n+\t\t\t\t   (match_operand:SI 2 \"gpr_operand\"  \"r\"))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n+        (logical_op:SI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"<op_mnc> %0,%1,%2\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn_and_split \"*mov_f\"\n+  [(set (reg:CC CC_REGNUM)\n+        (compare:CC (match_operand:SI 1 \"gpr_operand\"  \"r\") (const_int 0)))\n+   (set (match_operand:SI 0 \"gpr_operand\" \"=r\") (match_dup 1))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel\n+    [(set (reg:CC CC_REGNUM)\n+\t  (compare:CC (and:SI (match_dup 1) (match_dup 1)) (const_int 0)))\n+     (set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n+\t  (and:SI (match_dup 1) (match_dup 1)))])]\n+  \"\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_peephole2\n+  [(parallel\n+    [(set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n+\t  (logical_op:SI (match_operand:SI 1 \"gpr_operand\"  \"r\")\n+\t\t\t (match_operand:SI 2 \"gpr_operand\" \"%r\")))\n+     (clobber (reg:CC CC_REGNUM))])\n+   (parallel\n+    [(set (reg:CC CC_REGNUM)\n+\t  (compare:CC (and:SI (match_dup 0) (match_dup 0)) (const_int 0)))\n+     (set (match_operand:SI 3 \"gpr_operand\" \"=r\")\n+\t  (and:SI (match_dup 0) (match_dup 0)))])]\n+  \"peep2_reg_dead_p (2, operands[0])\"\n+  [(parallel\n+    [(set (reg:CC CC_REGNUM)\n+\t  (compare:CC (logical_op:SI (match_dup 1) (match_dup 2))\n+\t\t      (const_int 0)))\n+     (set (match_dup 3) (logical_op:SI (match_dup 1) (match_dup 2)))])])\n+\n+(define_peephole2\n+  [(parallel\n+    [(set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n+\t  (logical_op:SI (match_operand:SI 1 \"gpr_operand\"  \"r\")\n+\t\t\t (match_operand:SI 2 \"gpr_operand\" \"%r\")))\n+     (clobber (reg:CC CC_REGNUM))])\n+   (parallel\n+    [(set (reg:CC CC_REGNUM)\n+\t  (compare:CC (and:SI (match_dup 0) (match_dup 0)) (const_int 0)))\n+     (set (match_operand:SI 3 \"gpr_operand\" \"=r\")\n+\t  (and:SI (match_dup 0) (match_dup 0)))])]\n+  \"peep2_reg_dead_p (2, operands[3])\"\n+  [(parallel\n+    [(set (reg:CC CC_REGNUM)\n+\t  (compare:CC (logical_op:SI (match_dup 1) (match_dup 2))\n+\t\t      (const_int 0)))\n+     (set (match_dup 0) (logical_op:SI (match_dup 1) (match_dup 2)))])])\n+\n+(define_expand \"cstoresi4\"\n+  [(parallel\n+    [(set (reg:CC CC_REGNUM)\n+          (match_operand:SI 1 \"comparison_operator\"))\n+     (set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n+\t  (match_operand:SI 2 \"\" \"\"))])\n+   (set (match_dup 0) (match_operand:SI 3 \"arith_operand\" \"\"))\n+   (set (match_dup 0)\n+\t(if_then_else:SI (match_dup 4) (match_dup 5) (match_dup 0)))]\n+  \"\"\n+{\n+  enum rtx_code o2_code = GET_CODE (operands[2]);\n+  enum rtx_code cmp_code = GET_CODE (operands[1]);\n+\n+  if ((o2_code == AND || o2_code == IOR || o2_code == XOR)\n+      && operands[3] == const0_rtx)\n+    {\n+      operands[2] = copy_rtx(operands[2]);\n+      XEXP (operands[2], 0) = force_reg (SImode, XEXP (operands[2], 0));\n+      XEXP (operands[2], 1) = force_reg (SImode, XEXP (operands[2], 1));\n+    }\n+  else\n+    operands[2] = force_reg (SImode, operands[2]);\n+  operands[1] = gen_rtx_COMPARE (CCmode, operands[2], operands[3]);\n+  if (operands[3] != const0_rtx)\n+    operands[2] = gen_rtx_MINUS (SImode, operands[2], operands[3]);\n+  if (cmp_code != NE || operands[3] != const0_rtx)\n+    operands[3] = const0_rtx;\n+  else\n+    operands[3] = operands[0];\n+  operands[4] = gen_rtx_fmt_ee (cmp_code, SImode,\n+\t\t\t\tgen_rtx_REG (CCmode, CC_REGNUM), const0_rtx);\n+  operands[5] = force_reg (SImode, GEN_INT (STORE_FLAG_VALUE));\n+})\n+\n+\n ; floating point comparisons\n \n (define_insn \"*cmpsf_cc_insn\""}]}