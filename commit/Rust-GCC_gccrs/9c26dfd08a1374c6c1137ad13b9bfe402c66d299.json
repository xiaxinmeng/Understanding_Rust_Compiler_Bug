{"sha": "9c26dfd08a1374c6c1137ad13b9bfe402c66d299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMyNmRmZDA4YTEzNzRjNmMxMTM3YWQxM2I5YmZlNDAyYzY2ZDI5OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-03T22:46:06Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-03T22:46:06Z"}, "message": "gotest: multiple +build lines must all be true\n    \n    The code that handled +build lines did not correctly require them to all\n    be true.  While looking into this I discovered that multiple +build\n    lines were mishandled in a different way, because the shell does not\n    preseve line breaks in backquoted data.  Look for the +build token to\n    tell us when we are switching from one +build line to another.\n    \n    Reviewed-on: https://go-review.googlesource.com/25460\n\nFrom-SVN: r239100", "tree": {"sha": "38f3f1c3dbee66f77aa716bd1022a2c9a6b1781d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38f3f1c3dbee66f77aa716bd1022a2c9a6b1781d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c26dfd08a1374c6c1137ad13b9bfe402c66d299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c26dfd08a1374c6c1137ad13b9bfe402c66d299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c26dfd08a1374c6c1137ad13b9bfe402c66d299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c26dfd08a1374c6c1137ad13b9bfe402c66d299/comments", "author": null, "committer": null, "parents": [{"sha": "ac2c96ab1233e1c3dcd29a4854ae4eb7d0f68199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2c96ab1233e1c3dcd29a4854ae4eb7d0f68199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2c96ab1233e1c3dcd29a4854ae4eb7d0f68199"}], "stats": {"total": 96, "additions": 50, "deletions": 46}, "files": [{"sha": "58066bd6d318bfea37036e4472a8e40b4c0301f0", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c26dfd08a1374c6c1137ad13b9bfe402c66d299/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c26dfd08a1374c6c1137ad13b9bfe402c66d299/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=9c26dfd08a1374c6c1137ad13b9bfe402c66d299", "patch": "@@ -1,4 +1,4 @@\n-0fb416a7bed076bdfef168480789bb2994a58de3\n+3096ac81185edacbf800783f0f803d1c419dccdd\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "1f19bb5809c61afe1236fca007012f53d56c1809", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 49, "deletions": 45, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c26dfd08a1374c6c1137ad13b9bfe402c66d299/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c26dfd08a1374c6c1137ad13b9bfe402c66d299/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=9c26dfd08a1374c6c1137ad13b9bfe402c66d299", "patch": "@@ -313,56 +313,60 @@ x)\n \t    esac\n \n \t    if test x$tag1 != xnonmatchingtag -a x$tag2 != xnonmatchingtag; then\n-\t\ttaglines=`sed '/^package /q' < $f | fgrep '// +build '`\n-\t\tif test \"$taglines\" = \"\"; then\n-\t\t    omatch=true\n-\t\telse\n-\t\t    omatch=false\n-\t\tfi\n-\t\tfor tags in $taglines; do\n-\t\t    match=false\n-\t\t    for tag in $tags; do\n-\t\t\treverse=false\n-\t\t\tcase $tag in\n-\t\t\t\"!\"*)\n-\t\t\t    reverse=true\n-\t\t\t    tag=`echo $tag | sed -e 's/^!//'`\n-\t\t\t    ;;\n-\t\t\tesac\n-\n-\t\t\tcase $tag in\n-\t\t\t\"//\" | \"+build\")\n-\t\t\t    ;;\n-\t\t\t$goos | $goarch | cgo)\n-\t\t\t    match=true\n-\t\t\t    ;;\n-\t\t\t*,*)\n-\t\t\t    match=true\n-\t\t\t    for ctag in `echo $tag | sed -e 's/,/ /g'`; do\n-\t\t\t\tcase $ctag in\n-\t\t\t\t$goos | $goarch | cgo)\n-\t\t\t\t    ;;\n-\t\t\t\t*)\n-\t\t\t\t    match=false\n-\t\t\t\t    ;;\n-\t\t\t\tesac\n-\t\t\t    done\n-\t\t\t    ;;\n-\t\t\tesac\n-\n-\t\t\tif test \"$reverse\" = true; then\n-\t\t\t    if test \"$match\" = true; then\n+\t\ttags=`sed '/^package /q' < $f | fgrep '// +build '`\n+\t\tomatch=true\n+\t\tfirst=true\n+\t\tmatch=false\n+\t\tfor tag in $tags; do\n+\t\t    reverse=false\n+\t\t    case $tag in\n+\t\t    \"!\"*)\n+\t\t\treverse=true\n+\t\t\ttag=`echo $tag | sed -e 's/^!//'`\n+\t\t\t;;\n+\t\t    esac\n+\n+\t\t    case $tag in\n+\t\t    \"//\")\n+\t\t\t;;\n+\t\t    \"+build\")\n+\t\t\tif test \"$first\" = \"true\"; then\n+\t\t\t    first=false\n+\t\t\telif test \"$match\" = \"false\"; then\n+\t\t\t    omatch=false\n+\t\t\tfi\n+\t\t\tmatch=false\n+\t\t\t;;\n+\t\t    $goos | $goarch | cgo)\n+\t\t\tmatch=true\n+\t\t\t;;\n+\t\t    *,*)\n+\t\t\tmatch=true\n+\t\t\tfor ctag in `echo $tag | sed -e 's/,/ /g'`; do\n+\t\t\t    case $ctag in\n+\t\t\t    $goos | $goarch | cgo)\n+\t\t\t\t;;\n+\t\t\t    *)\n \t\t\t\tmatch=false\n-\t\t\t    else\n-\t\t\t\tmatch=true\n-\t\t\t    fi\n+\t\t\t\t;;\n+\t\t\t    esac\n+\t\t\tdone\n+\t\t\t;;\n+\t\t    esac\n+\n+\t\t    if test \"$reverse\" = true; then\n+\t\t\tif test \"$match\" = true; then\n+\t\t\t    match=false\n+\t\t\telse\n+\t\t\t    match=true\n \t\t\tfi\n-\t\t    done\n-\t\t    if test \"$match\" = \"true\"; then\n-\t\t\tomatch=true\n \t\t    fi\n \t\tdone\n \n+\t\tif test \"$match\" = \"false\" -a \"$first\" = \"false\"; then\n+\t\t    omatch=false\n+\t\tfi\n+\n \t\tif test \"$omatch\" = \"true\"; then\n \t\t    gofiles=\"$gofiles $f\"\n \t\tfi"}]}