{"sha": "7ac205673caade367552a567a98e27940f17cf35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FjMjA1NjczY2FhZGUzNjc1NTJhNTY3YTk4ZTI3OTQwZjE3Y2YzNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-03-26T15:28:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-03-26T15:28:48Z"}, "message": "PR libstdc++/85965 delay static assertions until types are complete\n\nThe static assertions added for PR libstdc++/48101 were at class scope\nand so were evaluated too eagerly, when it might not be possible to\ndetermine whether the function objects are invocable with the key types.\nThe problematic cases are where the key type is not known to be\nconvertible to the argument type(s) of the function object until later,\nafter a type has been completed. Specifically, if the key type is a\npointer to a derived class and the function object's argument type is a\npointer to a base class, then the derived-to-base conversion is only\nvalid once the derived type is complete.\n\nBy moving the static assertions to the destructor they will only be\nevaluated when the destructor is instantiated, at which point whether\nthe key type can be passed to the function object should be knowable.\nThe ideal place to do the checks would be only when the function objects\nare actually invoked, but that would mean adding the checks in numerous\nplaces, so the destructor is used instead.\n\nThe tests need to be adjusted because the \"required from here\" line is\nnow the location of the destructor, not the point of instantiation in\nthe test file. For the map and multimap tests which check two\nspecializations, the dg-error matching the assertion text matches both\ncases. Also check the diagnostic output for the template arguments, to\nensure both specializations trigger the assertion.\n\n\tPR libstdc++/85965\n\t* include/bits/hashtable.h (_Hashtable): Move static assertions to\n\tdestructor so they are not evaluated until the _Key type is complete.\n\t* include/bits/stl_tree.h (_Rb_tree): Likewise.\n\t* testsuite/23_containers/set/85965.cc: New test.\n\t* testsuite/23_containers/unordered_set/85965.cc: New test.\n\t* testsuite/23_containers/map/48101_neg.cc: Replace \"here\" errors\n\twith regexp matching the corresponding _Rb_tree specialization.\n\t* testsuite/23_containers/multimap/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/multiset/48101_neg.cc: Remove \"here\" error.\n\t* testsuite/23_containers/set/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/48101_neg.cc: Likewise.\n\nFrom-SVN: r269949", "tree": {"sha": "b21f5b213dae138df7639a8dd1f8820504c7d73f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b21f5b213dae138df7639a8dd1f8820504c7d73f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ac205673caade367552a567a98e27940f17cf35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac205673caade367552a567a98e27940f17cf35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac205673caade367552a567a98e27940f17cf35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac205673caade367552a567a98e27940f17cf35/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da83a168fdca32fec2d6bf8280670d05514c4c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da83a168fdca32fec2d6bf8280670d05514c4c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da83a168fdca32fec2d6bf8280670d05514c4c4"}], "stats": {"total": 138, "additions": 111, "deletions": 27}, "files": [{"sha": "b15d12d3d8c78bf4cbba83b370273a28f3454395", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -1,3 +1,21 @@\n+2019-03-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/85965\n+\t* include/bits/hashtable.h (_Hashtable): Move static assertions to\n+\tdestructor so they are not evaluated until the _Key type is complete.\n+\t* include/bits/stl_tree.h (_Rb_tree): Likewise.\n+\t* testsuite/23_containers/set/85965.cc: New test.\n+\t* testsuite/23_containers/unordered_set/85965.cc: New test.\n+\t* testsuite/23_containers/map/48101_neg.cc: Replace \"here\" errors\n+\twith regexp matching the corresponding _Rb_tree specialization.\n+\t* testsuite/23_containers/multimap/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/multiset/48101_neg.cc: Remove \"here\" error.\n+\t* testsuite/23_containers/set/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/48101_neg.cc: Likewise.\n+\n 2019-03-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/89825"}, {"sha": "da78c68434f77f4f4ed296b8c22d959fd45da5df", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -192,11 +192,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(is_same<typename _Alloc::value_type, _Value>{},\n \t  \"unordered container must have the same value_type as its allocator\");\n #endif\n-      static_assert(__is_invocable<const _H1&, const _Key&>{},\n-\t  \"hash function must be invocable with an argument of key type\");\n-      static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},\n-\t  \"key equality predicate must be invocable with two arguments of \"\n-\t  \"key type\");\n \n       using __traits_type = _Traits;\n       using __hash_cached = typename __traits_type::__hash_cached;\n@@ -1356,6 +1351,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       clear();\n       _M_deallocate_buckets();\n+\n+      static_assert(__is_invocable<const _H1&, const _Key&>{},\n+\t  \"hash function must be invocable with an argument of key type\");\n+      static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},\n+\t  \"key equality predicate must be invocable with two arguments of \"\n+\t  \"key type\");\n     }\n \n   template<typename _Key, typename _Value,"}, {"sha": "7545ade3f7bc178527047989e96db769d3805b13", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -440,17 +440,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;\n \n-#if __cplusplus >= 201103L\n-      static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},\n-\t  \"comparison object must be invocable with two arguments of key type\");\n-# if __cplusplus >= 201703L\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 2542. Missing const requirements for associative containers\n-      static_assert(is_invocable_v<const _Compare&, const _Key&, const _Key&>,\n-\t  \"comparison object must be invocable as const\");\n-# endif // C++17\n-#endif // C++11\n-\n     protected:\n       typedef _Rb_tree_node_base* \t\t_Base_ptr;\n       typedef const _Rb_tree_node_base* \t_Const_Base_ptr;\n@@ -985,7 +974,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       ~_Rb_tree() _GLIBCXX_NOEXCEPT\n-      { _M_erase(_M_begin()); }\n+      {\n+\t_M_erase(_M_begin());\n+\n+#if __cplusplus >= 201103L\n+\tstatic_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},\n+\t\t      \"comparison object must be invocable \"\n+\t\t      \"with two arguments of key type\");\n+# if __cplusplus >= 201703L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2542. Missing const requirements for associative containers\n+\tstatic_assert(is_invocable_v<const _Compare&, const _Key&, const _Key&>,\n+\t\t      \"comparison object must be invocable as const\");\n+# endif // C++17\n+#endif // C++11\n+      }\n \n       _Rb_tree&\n       operator=(const _Rb_tree& __x);"}, {"sha": "355222058ffd533a21dd89c3310ec6d0043057ee", "filename": "libstdc++-v3/testsuite/23_containers/map/48101_neg.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101_neg.cc?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -23,8 +23,10 @@\n void\n test01()\n {\n-  std::map<int, int, std::less<int*>> c;      // { dg-error \"here\" }\n-  std::map<int, int, std::allocator<int>> c2; // { dg-error \"here\" }\n+  std::map<int, int, std::less<int*>> c;\n+  std::map<int, int, std::allocator<int>> c2;\n }\n \n+// { dg-error \"_Compare = std::less<int.>\" \"\" { target *-*-* } 0 }\n+// { dg-error \"_Compare = std::allocator<int>\" \"\" { target *-*-* } 0 }\n // { dg-error \"comparison object must be invocable\" \"\" { target *-*-* } 0 }"}, {"sha": "5f53ccee168ec943dc90b75e64a63e03709e43ee", "filename": "libstdc++-v3/testsuite/23_containers/multimap/48101_neg.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101_neg.cc?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -23,8 +23,10 @@\n void\n test01()\n {\n-  std::multimap<int, int, std::less<int*>> c;      // { dg-error \"here\" }\n-  std::multimap<int, int, std::allocator<int>> c2; // { dg-error \"here\" }\n+  std::multimap<int, int, std::less<int*>> c;\n+  std::multimap<int, int, std::allocator<int>> c2;\n }\n \n+// { dg-error \"_Compare = std::less<int.>\" \"\" { target *-*-* } 0 }\n+// { dg-error \"_Compare = std::allocator<int>\" \"\" { target *-*-* } 0 }\n // { dg-error \"comparison object must be invocable\" \"\" { target *-*-* } 0 }"}, {"sha": "71b90e80951c64cf8323515f37834bba4a805511", "filename": "libstdc++-v3/testsuite/23_containers/multiset/48101_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101_neg.cc?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -23,7 +23,7 @@ void\n test01()\n {\n   std::multiset<const int> c;\t\t   // { dg-error \"here\" }\n-  std::multiset<int, std::less<long*>> c2; // { dg-error \"here\" }\n+  std::multiset<int, std::less<long*>> c2;\n }\n \n // { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }"}, {"sha": "e58c0627eb89b9bf90e1b0ac88be15c152c65911", "filename": "libstdc++-v3/testsuite/23_containers/set/48101_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101_neg.cc?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -23,7 +23,7 @@ void\n test01()\n {\n   std::set<const int> c;\t      // { dg-error \"here\" }\n-  std::set<int, std::less<long*>> c2; // { dg-error \"here\" }\n+  std::set<int, std::less<long*>> c2;\n }\n \n // { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }"}, {"sha": "54d501f6c4fe4d4c1f011f98bc0fd3a48cdbf3d3", "filename": "libstdc++-v3/testsuite/23_containers/set/85965.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F85965.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F85965.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F85965.cc?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <set>\n+\n+struct Base { };\n+struct Derived; // derives from Base, but incomplete at this point\n+\n+struct Foo\n+{\n+  // PR libstdc++/85965\n+  std::set<Derived*, std::less<Base*>> s;\n+};"}, {"sha": "6c3092554f3dc9e498627a7926b61eb6bed310cf", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/48101_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101_neg.cc?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -23,7 +23,7 @@ void\n test01()\n {\n   using namespace std;\n-  unordered_map<int, int, equal_to<int>, hash<int>> c2;  // { dg-error \"here\" }\n+  unordered_map<int, int, equal_to<int>, hash<int>> c2;\n }\n \n // { dg-error \"hash function must be invocable\" \"\" { target *-*-* } 0 }"}, {"sha": "f5de313a8f172edbe54a834a2431838a24f21a1b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/48101_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101_neg.cc?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -23,7 +23,7 @@ void\n test01()\n {\n   using namespace std;\n-  unordered_multimap<int, int, equal_to<int>, hash<int>> c2; // { dg-error \"here\" }\n+  unordered_multimap<int, int, equal_to<int>, hash<int>> c2;\n }\n \n // { dg-error \"hash function must be invocable\" \"\" { target *-*-* } 0 }"}, {"sha": "d4e479aaf974d7e6ed25053f2de229ea57683808", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/48101_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -24,7 +24,7 @@ test01()\n {\n   using namespace std;\n   unordered_multiset<const int, hash<int>> c;\t\t// { dg-error \"here\" }\n-  unordered_multiset<int, equal_to<int>, hash<int>> c2; // { dg-error \"here\" }\n+  unordered_multiset<int, equal_to<int>, hash<int>> c2;\n }\n \n // { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }"}, {"sha": "c7e27c536905ba60d1c5f280b79c42d6c7fc69f3", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/48101_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -24,7 +24,7 @@ test01()\n {\n   using namespace std;\n   unordered_set<const int, hash<int>> c;\t    // { dg-error \"here\" }\n-  unordered_set<int, equal_to<int>, hash<int>> c2;  // { dg-error \"here\" }\n+  unordered_set<int, equal_to<int>, hash<int>> c2;\n }\n \n // { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }"}, {"sha": "8b90b369901357879739719f1b8a060fbb30b4e5", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/85965.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F85965.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac205673caade367552a567a98e27940f17cf35/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F85965.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F85965.cc?ref=7ac205673caade367552a567a98e27940f17cf35", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <unordered_set>\n+\n+struct Base { };\n+struct Derived; // derives from Base, but incomplete at this point\n+\n+struct Foo\n+{\n+  // PR libstdc++/85965\n+  std::unordered_set<Derived*, std::equal_to<Base*>, std::hash<Base*>> u;\n+};"}]}