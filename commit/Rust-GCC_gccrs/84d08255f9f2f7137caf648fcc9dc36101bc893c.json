{"sha": "84d08255f9f2f7137caf648fcc9dc36101bc893c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRkMDgyNTVmOWYyZjcxMzdjYWY2NDhmY2M5ZGMzNjEwMWJjODkzYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-09T14:48:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-09T16:27:25Z"}, "message": "tree-optimization/98213 - cache PHI walking result in SM\n\nThis avoids exponential work when walking PHIs in loop store motion.\nFails are quickly propagated and thus need no caching.\n\n2020-12-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98213\n\t* tree-ssa-loop-im.c (sm_seq_valid_bb): Cache successfully\n\tprocessed PHIs.\n\t(hoist_memory_references): Adjust.\n\n\t* g++.dg/pr98213.C: New testcase.", "tree": {"sha": "235f02b67a891ab9b3a1cfb2a85ad32dd4ba8b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/235f02b67a891ab9b3a1cfb2a85ad32dd4ba8b38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84d08255f9f2f7137caf648fcc9dc36101bc893c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d08255f9f2f7137caf648fcc9dc36101bc893c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d08255f9f2f7137caf648fcc9dc36101bc893c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d08255f9f2f7137caf648fcc9dc36101bc893c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b37233152b55fb256d7537d7e76067edc52cb88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b37233152b55fb256d7537d7e76067edc52cb88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b37233152b55fb256d7537d7e76067edc52cb88"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "1a744eb2a3eb24f9df235e5e380098c433070c30", "filename": "gcc/testsuite/g++.dg/pr98213.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d08255f9f2f7137caf648fcc9dc36101bc893c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98213.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d08255f9f2f7137caf648fcc9dc36101bc893c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98213.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98213.C?ref=84d08255f9f2f7137caf648fcc9dc36101bc893c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <algorithm>\n+\n+long var_23;\n+int var_24, test_var_8;\n+extern bool arr_20[][13];\n+char arr_21_0_0_0_0_0;\n+int *test_arr_0;\n+void test(unsigned long long var_1)\n+{\n+  int arr_16;\n+  for (int i_0 = 0;;)\n+    for (int i_5; i_5;) {\n+      for (int i_6 = 0; i_6 < 19; i_6 += 4)\n+        for (long i_7(test_var_8); i_7; i_7 += 2) {\n+          arr_20[0][i_7] = arr_21_0_0_0_0_0 = 0;\n+          var_23 = test_arr_0[0];\n+        }\n+      var_24 = std::max((unsigned long long)arr_16,\n+                        std::min((unsigned long long)5, var_1));\n+    }\n+}"}, {"sha": "fe48d02242d546f8035b3d62242550faabbc84ff", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d08255f9f2f7137caf648fcc9dc36101bc893c/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d08255f9f2f7137caf648fcc9dc36101bc893c/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=84d08255f9f2f7137caf648fcc9dc36101bc893c", "patch": "@@ -2254,7 +2254,8 @@ sm_seq_push_down (vec<seq_entry> &seq, unsigned ptr, unsigned *at)\n static int\n sm_seq_valid_bb (class loop *loop, basic_block bb, tree vdef,\n \t\t vec<seq_entry> &seq, bitmap refs_not_in_seq,\n-\t\t bitmap refs_not_supported, bool forked)\n+\t\t bitmap refs_not_supported, bool forked,\n+\t\t bitmap fully_visited)\n {\n   if (!vdef)\n     for (gimple_stmt_iterator gsi = gsi_last_bb (bb); !gsi_end_p (gsi);\n@@ -2276,7 +2277,7 @@ sm_seq_valid_bb (class loop *loop, basic_block bb, tree vdef,\n \t/* This handles the perfect nest case.  */\n \treturn sm_seq_valid_bb (loop, single_pred (bb), vdef,\n \t\t\t\tseq, refs_not_in_seq, refs_not_supported,\n-\t\t\t\tforked);\n+\t\t\t\tforked, fully_visited);\n       return 0;\n     }\n   do\n@@ -2314,7 +2315,10 @@ sm_seq_valid_bb (class loop *loop, basic_block bb, tree vdef,\n \t    return sm_seq_valid_bb (loop, gimple_phi_arg_edge (phi, 0)->src,\n \t\t\t\t    gimple_phi_arg_def (phi, 0), seq,\n \t\t\t\t    refs_not_in_seq, refs_not_supported,\n-\t\t\t\t    false);\n+\t\t\t\t    false, fully_visited);\n+\t  if (bitmap_bit_p (fully_visited,\n+\t\t\t    SSA_NAME_VERSION (gimple_phi_result (phi))))\n+\t    return 1;\n \t  auto_vec<seq_entry> first_edge_seq;\n \t  auto_bitmap tem_refs_not_in_seq (&lim_bitmap_obstack);\n \t  int eret;\n@@ -2323,7 +2327,7 @@ sm_seq_valid_bb (class loop *loop, basic_block bb, tree vdef,\n \t\t\t\t  gimple_phi_arg_def (phi, 0),\n \t\t\t\t  first_edge_seq,\n \t\t\t\t  tem_refs_not_in_seq, refs_not_supported,\n-\t\t\t\t  true);\n+\t\t\t\t  true, fully_visited);\n \t  if (eret != 1)\n \t    return -1;\n \t  /* Simplify our lives by pruning the sequence of !sm_ord.  */\n@@ -2338,7 +2342,7 @@ sm_seq_valid_bb (class loop *loop, basic_block bb, tree vdef,\n \t      bitmap_copy (tem_refs_not_in_seq, refs_not_in_seq);\n \t      eret = sm_seq_valid_bb (loop, e->src, vuse, edge_seq,\n \t\t\t\t      tem_refs_not_in_seq, refs_not_supported,\n-\t\t\t\t      true);\n+\t\t\t\t      true, fully_visited);\n \t      if (eret != 1)\n \t\treturn -1;\n \t      /* Simplify our lives by pruning the sequence of !sm_ord.  */\n@@ -2419,6 +2423,8 @@ sm_seq_valid_bb (class loop *loop, basic_block bb, tree vdef,\n \t\t  seq[new_idx].from = NULL_TREE;\n \t\t}\n \t    }\n+\t  bitmap_set_bit (fully_visited,\n+\t\t\t  SSA_NAME_VERSION (gimple_phi_result (phi)));\n \t  return 1;\n \t}\n       lim_aux_data *data = get_lim_data (def);\n@@ -2494,9 +2500,11 @@ hoist_memory_references (class loop *loop, bitmap mem_refs,\n       seq.create (4);\n       auto_bitmap refs_not_in_seq (&lim_bitmap_obstack);\n       bitmap_copy (refs_not_in_seq, mem_refs);\n+      auto_bitmap fully_visited;\n       int res = sm_seq_valid_bb (loop, e->src, NULL_TREE,\n \t\t\t\t seq, refs_not_in_seq,\n-\t\t\t\t refs_not_supported, false);\n+\t\t\t\t refs_not_supported, false,\n+\t\t\t\t fully_visited);\n       if (res != 1)\n \t{\n \t  bitmap_copy (refs_not_supported, mem_refs);"}]}