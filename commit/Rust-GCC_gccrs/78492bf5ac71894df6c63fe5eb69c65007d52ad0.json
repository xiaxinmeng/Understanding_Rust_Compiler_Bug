{"sha": "78492bf5ac71894df6c63fe5eb69c65007d52ad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg0OTJiZjVhYzcxODk0ZGY2YzYzZmU1ZWI2OWM2NTAwN2Q1MmFkMA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-09-28T20:31:16Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-09-28T20:31:16Z"}, "message": "Makefile.in (tree-ssa-propagate.o): Depend on vec.h.\n\n\t* Makefile.in (tree-ssa-propagate.o): Depend on vec.h.\n\t* tree-ssa-propagate.c: Include vec.h.\n\t(interesting_ssa_edges, varying_ssa_edges): Make these VECs\n\tinstead of varrays.\n\t(cfg_blocks_add): Assert the block is not already in the worklist.\n\tUpdate uses of interesting_ssa_edges and varying_ssa_edges.\n\t(process_ssa_edge_worklist, ssa_prop_init, ssa_prop_fini,\n\tssa_propagate): Likewise.\n\nFrom-SVN: r88249", "tree": {"sha": "5d399914cbab0c2ba3f40a1b1790952a822bf7e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d399914cbab0c2ba3f40a1b1790952a822bf7e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78492bf5ac71894df6c63fe5eb69c65007d52ad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78492bf5ac71894df6c63fe5eb69c65007d52ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78492bf5ac71894df6c63fe5eb69c65007d52ad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78492bf5ac71894df6c63fe5eb69c65007d52ad0/comments", "author": null, "committer": null, "parents": [{"sha": "ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "11506d88db57da735d1a6691fb9fcb246de6cc2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78492bf5ac71894df6c63fe5eb69c65007d52ad0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78492bf5ac71894df6c63fe5eb69c65007d52ad0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78492bf5ac71894df6c63fe5eb69c65007d52ad0", "patch": "@@ -1,3 +1,14 @@\n+2004-09-28  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* Makefile.in (tree-ssa-propagate.o): Depend on vec.h.\n+\t* tree-ssa-propagate.c: Include vec.h.\n+\t(interesting_ssa_edges, varying_ssa_edges): Make these VECs\n+\tinstead of varrays.\n+\t(cfg_blocks_add): Assert the block is not already in the worklist.\n+\tUpdate uses of interesting_ssa_edges and varying_ssa_edges.\n+\t(process_ssa_edge_worklist, ssa_prop_init, ssa_prop_fini,\n+\tssa_propagate): Likewise.\n+\n 2004-09-28  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/16409"}, {"sha": "ec4af54889a40fc40d53ca97a947073680f64499", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78492bf5ac71894df6c63fe5eb69c65007d52ad0/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78492bf5ac71894df6c63fe5eb69c65007d52ad0/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=78492bf5ac71894df6c63fe5eb69c65007d52ad0", "patch": "@@ -1635,7 +1635,7 @@ tree-ssa-propagate.o : tree-ssa-propagate.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) output.h \\\n    diagnostic.h errors.h function.h $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) $(BASIC_BLOCK_H) tree-pass.h langhooks.h \\\n-   tree-ssa-propagate.h\n+   tree-ssa-propagate.h vec.h\n tree-ssa-dom.o : tree-ssa-dom.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) output.h diagnostic.h \\\n    errors.h function.h $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\"}, {"sha": "6fab4f46242caae3f6cef12d0924e2b3c24fda47", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78492bf5ac71894df6c63fe5eb69c65007d52ad0/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78492bf5ac71894df6c63fe5eb69c65007d52ad0/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=78492bf5ac71894df6c63fe5eb69c65007d52ad0", "patch": "@@ -40,7 +40,8 @@\n #include \"tree-pass.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"langhooks.h\"\n-\n+#include \"varray.h\"\n+#include \"vec.h\"\n \n /* This file implements a generic value propagation engine based on\n    the same propagation used by the SSA-CCP algorithm [1].\n@@ -142,7 +143,7 @@ static sbitmap bb_in_list;\n    definition has changed.  SSA edges are def-use edges in the SSA\n    web.  For each D-U edge, we store the target statement or PHI node\n    U.  */\n-static GTY(()) varray_type interesting_ssa_edges;\n+static GTY(()) VEC(tree) *interesting_ssa_edges;\n \n /* Identical to INTERESTING_SSA_EDGES.  For performance reasons, the\n    list of SSA edges is split into two.  One contains all SSA edges\n@@ -158,7 +159,7 @@ static GTY(()) varray_type interesting_ssa_edges;\n    don't use a separate worklist for VARYING edges, we end up with\n    situations where lattice values move from\n    UNDEFINED->INTERESTING->VARYING instead of UNDEFINED->VARYING.  */\n-static GTY(()) varray_type varying_ssa_edges;\n+static GTY(()) VEC(tree) *varying_ssa_edges;\n \n \n /* Return true if the block worklist empty.  */\n@@ -170,16 +171,16 @@ cfg_blocks_empty_p (void)\n }\n \n \n-/* Add a basic block to the worklist.  */\n+/* Add a basic block to the worklist.  The block must not be already\n+   in the worklist.  */\n \n static void \n cfg_blocks_add (basic_block bb)\n {\n   if (bb == ENTRY_BLOCK_PTR || bb == EXIT_BLOCK_PTR)\n     return;\n \n-  if (TEST_BIT (bb_in_list, bb->index))\n-    return;\n+  gcc_assert (!TEST_BIT (bb_in_list, bb->index));\n \n   if (cfg_blocks_empty_p ())\n     {\n@@ -247,9 +248,9 @@ add_ssa_edge (tree var, bool is_varying)\n \t{\n \t  STMT_IN_SSA_EDGE_WORKLIST (use_stmt) = 1;\n \t  if (is_varying)\n-\t    VARRAY_PUSH_TREE (varying_ssa_edges, use_stmt);\n+\t    VEC_safe_push (tree, varying_ssa_edges, use_stmt);\n \t  else\n-\t    VARRAY_PUSH_TREE (interesting_ssa_edges, use_stmt);\n+\t    VEC_safe_push (tree, interesting_ssa_edges, use_stmt);\n \t}\n     }\n }\n@@ -340,19 +341,20 @@ simulate_stmt (tree stmt)\n \n /* Process an SSA edge worklist.  WORKLIST is the SSA edge worklist to\n    drain.  This pops statements off the given WORKLIST and processes\n-   them until there are no more statements on WORKLIST.  */\n+   them until there are no more statements on WORKLIST.\n+   We take a pointer to WORKLIST because it may be reallocated when an\n+   SSA edge is added to it in simulate_stmt.  */\n \n static void\n-process_ssa_edge_worklist (varray_type *worklist)\n+process_ssa_edge_worklist (VEC(tree) **worklist)\n {\n   /* Drain the entire worklist.  */\n-  while (VARRAY_ACTIVE_SIZE (*worklist) > 0)\n+  while (VEC_length (tree, *worklist) > 0)\n     {\n       basic_block bb;\n \n       /* Pull the statement to simulate off the worklist.  */\n-      tree stmt = VARRAY_TOP_TREE (*worklist);\n-      VARRAY_POP (*worklist);\n+      tree stmt = VEC_pop (tree, *worklist);\n \n       /* If this statement was already visited by simulate_block, then\n \t we don't need to visit it again here.  */\n@@ -463,8 +465,8 @@ ssa_prop_init (void)\n   basic_block bb;\n \n   /* Worklists of SSA edges.  */\n-  VARRAY_TREE_INIT (interesting_ssa_edges, 20, \"interesting_ssa_edges\");\n-  VARRAY_TREE_INIT (varying_ssa_edges, 20, \"varying_ssa_edges\");\n+  interesting_ssa_edges = VEC_alloc (tree, 20);\n+  varying_ssa_edges = VEC_alloc (tree, 20);\n \n   executable_blocks = sbitmap_alloc (last_basic_block);\n   sbitmap_zero (executable_blocks);\n@@ -507,8 +509,8 @@ ssa_prop_init (void)\n static void\n ssa_prop_fini (void)\n {\n-  interesting_ssa_edges = NULL;\n-  varying_ssa_edges = NULL;\n+  VEC_free (tree, interesting_ssa_edges);\n+  VEC_free (tree, varying_ssa_edges);\n   cfg_blocks = NULL;\n   sbitmap_free (bb_in_list);\n   sbitmap_free (executable_blocks);\n@@ -653,8 +655,8 @@ ssa_propagate (ssa_prop_visit_stmt_fn visit_stmt,\n \n   /* Iterate until the worklists are empty.  */\n   while (!cfg_blocks_empty_p () \n-\t || VARRAY_ACTIVE_SIZE (interesting_ssa_edges) > 0\n-\t || VARRAY_ACTIVE_SIZE (varying_ssa_edges) > 0)\n+\t || VEC_length (tree, interesting_ssa_edges) > 0\n+\t || VEC_length (tree, varying_ssa_edges) > 0)\n     {\n       if (!cfg_blocks_empty_p ())\n \t{"}]}