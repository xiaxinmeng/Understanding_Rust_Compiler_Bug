{"sha": "a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVjNzZlZTZlMmM2MTNhYzRjM2UzMDllNTYyZDUxYmVhMTM3YzczYQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-05-11T16:25:05Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-05-11T16:25:05Z"}, "message": "rs6000.c (rs6000_default_long_calls, [...]): New.\n\n\t* config/rs6000/rs6000.c (rs6000_default_long_calls,\n\trs6000_longcall_switch, rs6000_set_default_type_attributes): New.\n\t(TARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Set it.\n\t(rs6000_override_options): Handle -m(no-)longcall.\n\t(init_cumulative_args, output_mi_thunk): Check for both\n\tlongcall and shortcall attributes on the function.\n\t(rs6000_attribute_table): Add \"shortcall\".\n\t(rs6000_handle_longcall_attribute): Update comment.\n\t(altivec_expand_unop_builtin, altivec_expand_binop_builtin,\n\taltivec_expand_ternop_builtin): Add default clauses to switches\n\tto silence warnings.\n\n\t* config/rs6000/rs6000.h: Declare rs6000_longcall_switch and\n\trs6000_default_long_calls.  Define REGISTER_TARGET_PRAGMAS.\n\t(TARGET_OPTIONS): Add longcall and no-longcall.\n\n\t* config/rs6000/rs6000.md (call_nonlocal_sysv,\n\tcall_value_nonlocal_sysv): Split by alternatives.  One pair\n\taccepts only SYMBOL_REFs and rejects if CALL_LONG is set in\n\tthe call cookie.  The other pair accepts only LR/CTR and has\n\tno restriction.\n\n\t* config.gcc (rs6000-*-* | powerpc*-*-* trailer stanza):\n\tSet c_target_objs, cxx_target_objs; add t-rs6000-c-rule to\n\ttmake_file.\n\t* config/rs6000/rs6000-c.c: New file.\n\t* config/rs6000/t-rs6000-c-rule: New file.\n\t* config/rs6000/rs6000-protos.c: Add multiple-include guard.\n\tPrototype rs6000_pragma_longcall.\n\n\t* doc/extend.texi: Document shortcall attribute.\n\t* doc/invoke.texi: Document -mlongcall, -mno-longcall.\n\nFrom-SVN: r53382", "tree": {"sha": "965a5479e4bfdccd120057916613030f604465fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/965a5479e4bfdccd120057916613030f604465fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/comments", "author": null, "committer": null, "parents": [{"sha": "4c476cf33a7c259d3b2ac991bbd3a6bc176b93c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c476cf33a7c259d3b2ac991bbd3a6bc176b93c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c476cf33a7c259d3b2ac991bbd3a6bc176b93c9"}], "stats": {"total": 422, "additions": 336, "deletions": 86}, "files": [{"sha": "093d96947e7a073228476de2aac3308395b00253", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 30, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "patch": "@@ -1,3 +1,38 @@\n+2002-05-11  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_default_long_calls,\n+\trs6000_longcall_switch, rs6000_set_default_type_attributes): New.\n+\t(TARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Set it.\n+\t(rs6000_override_options): Handle -m(no-)longcall.\n+\t(init_cumulative_args, output_mi_thunk): Check for both\n+\tlongcall and shortcall attributes on the function.\n+\t(rs6000_attribute_table): Add \"shortcall\".\n+\t(rs6000_handle_longcall_attribute): Update comment.\n+\t(altivec_expand_unop_builtin, altivec_expand_binop_builtin,\n+\taltivec_expand_ternop_builtin): Add default clauses to switches\n+\tto silence warnings.\n+\n+\t* config/rs6000/rs6000.h: Declare rs6000_longcall_switch and\n+\trs6000_default_long_calls.  Define REGISTER_TARGET_PRAGMAS.\n+\t(TARGET_OPTIONS): Add longcall and no-longcall.\n+\n+\t* config/rs6000/rs6000.md (call_nonlocal_sysv,\n+\tcall_value_nonlocal_sysv): Split by alternatives.  One pair\n+\taccepts only SYMBOL_REFs and rejects if CALL_LONG is set in\n+\tthe call cookie.  The other pair accepts only LR/CTR and has\n+\tno restriction.\n+\n+\t* config.gcc (rs6000-*-* | powerpc*-*-* trailer stanza):\n+\tSet c_target_objs, cxx_target_objs; add t-rs6000-c-rule to\n+\ttmake_file.\n+\t* config/rs6000/rs6000-c.c: New file.\n+\t* config/rs6000/t-rs6000-c-rule: New file.\n+\t* config/rs6000/rs6000-protos.c: Add multiple-include guard.\n+\tPrototype rs6000_pragma_longcall.\n+\n+\t* doc/extend.texi: Document shortcall attribute.\n+\t* doc/invoke.texi: Document -mlongcall, -mno-longcall.\n+\n 2002-05-12  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n \n \t* config/avr/avr.c (avr_mcu_types): Update supported devices.\n@@ -205,38 +240,38 @@ Thu May  9 14:52:45 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t* final.c (end_final): Use C trees to output data structures for profiling.\n \n \t* Makefile.in (LIBGCC_DEPS): Added missing dependency on gcov-io.h\n-        (profile.o): New dependency profile.h\n-        (final.o): New dependency profile.h\n-        * profile.h: New file. New global structure profile_info.\n-        * final.h (count_edges_instrumented_now): Declare.\n-        (current_function_cfg_checksum): Declare.\n-        (function_list): New structure.\n-        (functions_head, functions_tail): New static variables.\n-        (end_final): Emits more data, removed some -ax stuff.\n-        (final): Stores function names and chcksums.\n-        * gcov-io.h (__write_gcov_string): New function.\n-        (__read_gcov_string): New function.\n-        * gcov.c (read_profile): New function.\n-        (create_program_flow_graph): Uses read_profile instead of reading\n+\t(profile.o): New dependency profile.h\n+\t(final.o): New dependency profile.h\n+\t* profile.h: New file. New global structure profile_info.\n+\t* final.h (count_edges_instrumented_now): Declare.\n+\t(current_function_cfg_checksum): Declare.\n+\t(function_list): New structure.\n+\t(functions_head, functions_tail): New static variables.\n+\t(end_final): Emits more data, removed some -ax stuff.\n+\t(final): Stores function names and chcksums.\n+\t* gcov-io.h (__write_gcov_string): New function.\n+\t(__read_gcov_string): New function.\n+\t* gcov.c (read_profile): New function.\n+\t(create_program_flow_graph): Uses read_profile instead of reading\n \tda_file.\n-        (read_files): Removed da_file checking, it's done by read_profile now.\n-        * libgcc2.c (bb_function_info): New structure.\n-        (bb): New field in structure, removed some -ax stuff.\n-        (__bb_exit_func): Changed structure of da_file.\n-        * profile.c (count_edges_instrumented_now): New global variable.\n-        (current_function_cfg_checksum): New global variable.\n-        (max_counter_in_program): New global variable.\n-        (get_exec_counts): New function.\n-        (compute_checksum): New function.\n-        (instrument_edges): Sets count_edges_instrumented_now.\n-        (compute_branch_probabilities): Uses get_exec_counts instead of\n+\t(read_files): Removed da_file checking, it's done by read_profile now.\n+\t* libgcc2.c (bb_function_info): New structure.\n+\t(bb): New field in structure, removed some -ax stuff.\n+\t(__bb_exit_func): Changed structure of da_file.\n+\t* profile.c (count_edges_instrumented_now): New global variable.\n+\t(current_function_cfg_checksum): New global variable.\n+\t(max_counter_in_program): New global variable.\n+\t(get_exec_counts): New function.\n+\t(compute_checksum): New function.\n+\t(instrument_edges): Sets count_edges_instrumented_now.\n+\t(compute_branch_probabilities): Uses get_exec_counts instead of\n \treading da_file.\n-        (branch_prob): Calls compute_checksum and writes extra data to bbg_file.\n-        (init_branch_prob): Removed da_file checking, done in get_exec_counts\n+\t(branch_prob): Calls compute_checksum and writes extra data to bbg_file.\n+\t(init_branch_prob): Removed da_file checking, done in get_exec_counts\n \tnow.\n-        (end_branch_prob): Removed da_file checking, done in get_exec_counts\n+\t(end_branch_prob): Removed da_file checking, done in get_exec_counts\n \tnow.\n-        * gcov.texi: Updated information about gcov file format.\n+\t* gcov.texi: Updated information about gcov file format.\n \n 2002-05-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n@@ -347,7 +382,7 @@ doc:\n \n \t* config/arm/t-arm-elf (MULTILIB): Do not allow big-endian/\n \tlittle-endian multilibs to override arm/thumb multilibs.\n-        Do not build hardware floating point multilibs, nor apcs-26\n+\tDo not build hardware floating point multilibs, nor apcs-26\n \tmultilibs for the Thumb.\n \n 2002-05-08  Mark Mitchell  <mark@codesourcery.com>\n@@ -496,7 +531,7 @@ Tue May  7 10:06:22 2002  Jeffrey A Law  (law@redhat.com)\n \n 2002-05-07  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c (bdesc_2arg): Fix vmax typos.\n+\t* config/rs6000/rs6000.c (bdesc_2arg): Fix vmax typos.\n \n 2002-05-06  David S. Miller  <davem@redhat.com>\n "}, {"sha": "e6c268c1aec3bad545f752c6d7780b41c911553f", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "patch": "@@ -3650,6 +3650,9 @@ powerpc*-*-* | rs6000-*-*)\n \t\t\tfi\n \t\t\t;;\n \tesac\n+\tc_target_objs=\"rs6000-c.o\"\n+\tcxx_target_objs=\"rs6000-c.o\"\n+\ttmake_file=\"${tmake_file} rs6000/t-rs6000-c-rule\"\n \t;;\n sparc*-*-*)\n \tcase \".$with_cpu\" in"}, {"sha": "33ce2a1420d47673e57339de9ac21609e5a065e2", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "patch": "@@ -0,0 +1,71 @@\n+/* Subroutines for the C front end on the POWER and PowerPC architectures.\n+   Copyright (C) 2002\n+   Free Software Foundation, Inc.\n+\n+   Contributed by Zack Weinberg <zack@codesourcery.com>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"cpplib.h\"\n+#include \"tree.h\"\n+#include \"c-lex.h\"\n+#include \"errors.h\"\n+#include \"tm_p.h\"\n+\n+/* Handle the machine specific pragma longcall.  Its syntax is\n+\n+   # pragma longcall ( TOGGLE )\n+\n+   where TOGGLE is either 0 or 1.\n+\n+   rs6000_default_long_calls is set to the value of TOGGLE, changing\n+   whether or not new function declarations receive a longcall\n+   attribute by default.  */\n+\n+#define SYNTAX_ERROR(msgid) do {\t\t\t\t\t\\\n+  warning (msgid);\t\t\t\t\t\\\n+  warning (\"ignoring malformed #pragma longcall\");\t\\\n+  return;\t\t\t\t\t\t\\\n+} while (0)\n+\n+void\n+rs6000_pragma_longcall (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  tree x, n;\n+\n+  /* If we get here, generic code has already scanned the directive\n+     leader and the word \"longcall\".  */\n+\n+  if (c_lex (&x) != CPP_OPEN_PAREN)\n+    SYNTAX_ERROR (\"missing open paren\");\n+  if (c_lex (&n) != CPP_NUMBER)\n+    SYNTAX_ERROR (\"missing number\");\n+  if (c_lex (&x) != CPP_CLOSE_PAREN)\n+    SYNTAX_ERROR (\"missing close paren\");\n+\n+  if (n != integer_zero_node && n != integer_one_node)\n+    SYNTAX_ERROR (\"number must be 0 or 1\");\n+\n+  if (c_lex (&x) != CPP_EOF)\n+    warning (\"junk at end of #pragma longcall\");\n+\n+  rs6000_default_long_calls = (n == integer_one_node);\n+}"}, {"sha": "26bb1e6cd1353f3962c901fdec93a44a040a168d", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "patch": "@@ -19,6 +19,9 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#ifndef GCC_RS6000_PROTOS_H\n+#define GCC_RS6000_PROTOS_H\n+\n /* Declare functions in rs6000.c */\n \n #ifdef RTX_CODE\n@@ -186,3 +189,9 @@ extern void rs6000_emit_epilogue PARAMS ((int));\n extern void debug_stack_info PARAMS ((rs6000_stack_t *));\n \n extern void machopic_output_stub PARAMS ((FILE *, const char *, const char *));\n+\n+#ifdef GCC_CPPLIB_H\n+extern void rs6000_pragma_longcall PARAMS ((cpp_reader *));\n+#endif\n+\n+#endif  /* rs6000-protos.h */"}, {"sha": "c6b703bcc8aca17990a8b27b026d69e5685c7776", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 60, "deletions": 8, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "patch": "@@ -124,6 +124,13 @@ char toc_label_name[10];\n /* Alias set for saves and restores from the rs6000 stack.  */\n static int rs6000_sr_alias_set;\n \n+/* Call distance, overridden by -mlongcall and #pragma longcall(1).\n+   The only place that looks at this is rs6000_set_default_type_attributes;\n+   everywhere else should rely on the presence or absence of a longcall\n+   attribute on the function declaration.  */\n+int rs6000_default_long_calls;\n+const char *rs6000_longcall_switch;\n+\n static void rs6000_add_gc_roots PARAMS ((void));\n static int num_insns_constant_wide PARAMS ((HOST_WIDE_INT));\n static rtx expand_block_move_mem PARAMS ((enum machine_mode, rtx, rtx));\n@@ -146,6 +153,7 @@ static bool rs6000_assemble_integer PARAMS ((rtx, unsigned int, int));\n static int rs6000_ra_ever_killed PARAMS ((void));\n static tree rs6000_handle_longcall_attribute PARAMS ((tree *, tree, tree, int, bool *));\n const struct attribute_spec rs6000_attribute_table[];\n+static void rs6000_set_default_type_attributes PARAMS ((tree));\n static void rs6000_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void rs6000_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static rtx rs6000_emit_set_long_const PARAMS ((rtx,\n@@ -235,6 +243,8 @@ static const char alt_reg_names[][8] =\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE rs6000_attribute_table\n+#undef TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n+#define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES rs6000_set_default_type_attributes\n \n #undef TARGET_ASM_ALIGNED_DI_OP\n #define TARGET_ASM_ALIGNED_DI_OP DOUBLE_INT_ASM_OP\n@@ -546,6 +556,22 @@ rs6000_override_options (default_cpu)\n   /* Handle -mvrsave= option.  */\n   rs6000_parse_vrsave_option ();\n \n+  /* Handle -m(no-)longcall option.  This is a bit of a cheap hack,\n+     using TARGET_OPTIONS to handle a toggle switch, but we're out of\n+     bits in target_flags so TARGET_SWITCHES cannot be used.\n+     Assumption here is that rs6000_longcall_switch points into the\n+     text of the complete option, rather than being a copy, so we can\n+     scan back for the presence or absence of the no- modifier.  */\n+  if (rs6000_longcall_switch)\n+    {\n+      const char *base = rs6000_longcall_switch;\n+      while (base[-1] != 'm') base--;\n+\n+      if (*rs6000_longcall_switch != '\\0')\n+\terror (\"invalid option `%s'\", base);\n+      rs6000_default_long_calls = (base[0] != 'n');\n+    }\n+\n #ifdef TARGET_REGNAMES\n   /* If the user desires alternate register names, copy in the\n      alternate names now.  */\n@@ -2541,8 +2567,10 @@ init_cumulative_args (cum, fntype, libname, incoming)\n \n   cum->orig_nargs = cum->nargs_prototype;\n \n-  /* Check for longcall's */\n-  if (fntype && lookup_attribute (\"longcall\", TYPE_ATTRIBUTES (fntype)))\n+  /* Check for a longcall attribute.  */\n+  if (fntype\n+      && lookup_attribute (\"longcall\", TYPE_ATTRIBUTES (fntype))\n+      && !lookup_attribute (\"shortcall\", TYPE_ATTRIBUTES (fntype)))\n     cum->call_cookie = CALL_LONG;\n \n   if (TARGET_DEBUG_ARG)\n@@ -3565,6 +3593,8 @@ altivec_expand_unop_builtin (icode, arglist, target)\n \t  return NULL_RTX;\n \t}\n       break;\n+    default:\n+      break;\n     }\n \n   if (target == 0\n@@ -3654,6 +3684,8 @@ altivec_expand_binop_builtin (icode, arglist, target)\n \t  return NULL_RTX;\n \t}\n       break;\n+    default:\n+      break;\n     }\n \n   if (target == 0\n@@ -3828,6 +3860,8 @@ altivec_expand_ternop_builtin (icode, arglist, target)\n \t  return NULL_RTX;\n \t}\n       break;\n+    default:\n+      break;\n     }\n \n   if (target == 0\n@@ -9871,8 +9905,11 @@ output_mi_thunk (file, thunk_fndecl, delta, function)\n   fname = XSTR (XEXP (DECL_RTL (function), 0), 0);\n \n   if (current_file_function_operand (XEXP (DECL_RTL (function), 0), VOIDmode)\n-      && ! lookup_attribute (\"longcall\",\n-\t\t\t     TYPE_ATTRIBUTES (TREE_TYPE (function))))\n+      && (! lookup_attribute (\"longcall\",\n+\t\t\t      TYPE_ATTRIBUTES (TREE_TYPE (function)))\n+\t  || lookup_attribute (\"shortcall\",\n+\t\t\t       TYPE_ATTRIBUTES (TREE_TYPE (function)))))\n+\n     {\n       fprintf (file, \"\\tb %s\", prefix);\n       assemble_name (file, fname);\n@@ -10852,12 +10889,13 @@ rs6000_initialize_trampoline (addr, fnaddr, cxt)\n const struct attribute_spec rs6000_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"longcall\", 0, 0, false, true,  true,  rs6000_handle_longcall_attribute },\n-  { NULL,       0, 0, false, false, false, NULL }\n+  { \"longcall\",  0, 0, false, true,  true,  rs6000_handle_longcall_attribute },\n+  { \"shortcall\", 0, 0, false, true,  true,  rs6000_handle_longcall_attribute },\n+  { NULL,        0, 0, false, false, false, NULL }\n };\n \n-/* Handle a \"longcall\" attribute; arguments as in struct\n-   attribute_spec.handler.  */\n+/* Handle a \"longcall\" or \"shortcall\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n \n static tree\n rs6000_handle_longcall_attribute (node, name, args, flags, no_add_attrs)\n@@ -10879,6 +10917,20 @@ rs6000_handle_longcall_attribute (node, name, args, flags, no_add_attrs)\n   return NULL_TREE;\n }\n \n+/* Set longcall attributes on all functions declared when\n+   rs6000_default_long_calls is true.  */\n+static void\n+rs6000_set_default_type_attributes (type)\n+     tree type;\n+{\n+  if (rs6000_default_long_calls\n+      && (TREE_CODE (type) == FUNCTION_TYPE\n+\t  || TREE_CODE (type) == METHOD_TYPE))\n+    TYPE_ATTRIBUTES (type) = tree_cons (get_identifier (\"longcall\"),\n+\t\t\t\t\tNULL_TREE,\n+\t\t\t\t\tTYPE_ATTRIBUTES (type));\n+}\n+\n /* Return a reference suitable for calling a function with the\n    longcall attribute.  */\n "}, {"sha": "91627a289b08329f44c94b2e0a63140ba3dabe45", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "patch": "@@ -432,6 +432,9 @@ extern enum processor_type rs6000_cpu;\n     N_(\"Specify size of long double (64 or 128 bits)\") },\t\t\\\n    {\"vrsave=\", &rs6000_altivec_vrsave_string,                         \\\n     N_(\"Specify yes/no if VRSAVE instructions should be generated for AltiVec\") }, \\\n+   {\"longcall\", &rs6000_longcall_switch,\t\t\t\t\\\n+    N_(\"Avoid all range limits on call instructions\") },\t\t\\\n+   {\"no-longcall\", &rs6000_longcall_switch, \"\" },\t\t\t\\\n    SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n \n@@ -462,6 +465,8 @@ extern int rs6000_long_double_type_size;\n extern int rs6000_altivec_abi;\n extern const char *rs6000_altivec_vrsave_string;\n extern int rs6000_altivec_vrsave;\n+extern const char *rs6000_longcall_switch;\n+extern int rs6000_default_long_calls;\n \n #define TARGET_LONG_DOUBLE_128 (rs6000_long_double_type_size == 128)\n #define TARGET_ALTIVEC_ABI rs6000_altivec_abi\n@@ -483,6 +488,11 @@ extern int rs6000_altivec_vrsave;\n /* Define this to change the optimizations performed by default.  */\n #define OPTIMIZATION_OPTIONS(LEVEL,SIZE) optimization_options(LEVEL,SIZE)\n \n+/* Target pragma.  */\n+#define REGISTER_TARGET_PRAGMAS(PFILE) do { \\\n+  cpp_register_pragma (PFILE, 0, \"longcall\", rs6000_pragma_longcall); \\\n+} while (0)\n+\n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n \f"}, {"sha": "6b66c42e088eda2122b63fbcf938c738cfdd082e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 65, "deletions": 44, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "patch": "@@ -10036,68 +10036,89 @@\n ;; operands[2] is the value FUNCTION_ARG returns for the VOID argument\n ;; which indicates how to set cr1\n \n-(define_insn \"*call_nonlocal_sysv\"\n-  [(call (mem:SI (match_operand:SI 0 \"call_operand\" \"cl,cl,s,s\"))\n-\t (match_operand 1 \"\" \"g,g,g,g\"))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"O,n,O,n\"))\n-   (clobber (match_scratch:SI 3 \"=l,l,l,l\"))]\n+(define_insn \"*call_indirect_nonlocal_sysv\"\n+  [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"cl,cl\"))\n+\t (match_operand 1 \"\" \"g,g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n+   (clobber (match_scratch:SI 3 \"=l,l\"))]\n   \"DEFAULT_ABI == ABI_AIX_NODESC\n    || DEFAULT_ABI == ABI_V4\n    || DEFAULT_ABI == ABI_DARWIN\"\n-  \"*\n {\n   if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n-    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+    output_asm_insn (\"crxor 6,6,6\", operands);\n \n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n-    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n+    output_asm_insn (\"creqv 6,6,6\", operands);\n \n-  switch (which_alternative)\n-    {\n-    default:\n-      abort ();\n-    case 0:\n-    case 1:\n-      return \\\"b%T0l\\\";\n-    case 2:\n-    case 3:\n-      return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \\\"bl %z0@plt\\\" : \\\"bl %z0\\\";\n-    }\n-}\"\n-  [(set_attr \"type\" \"jmpreg,jmpreg,branch,branch\")\n-   (set_attr \"length\" \"4,8,4,8\")])\n+  return \"b%T0l\";\n+}\n+  [(set_attr \"type\" \"jmpreg,jmpreg\")\n+   (set_attr \"length\" \"4,8\")])\n \n-(define_insn \"*call_value_nonlocal_sysv\"\n+(define_insn \"*call_nonlocal_sysv\"\n+  [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"s,s\"))\n+\t (match_operand 1 \"\" \"g,g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n+   (clobber (match_scratch:SI 3 \"=l,l\"))]\n+  \"(DEFAULT_ABI == ABI_AIX_NODESC\n+    || DEFAULT_ABI == ABI_V4\n+    || DEFAULT_ABI == ABI_DARWIN)\n+   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n+{\n+  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\"crxor 6,6,6\", operands);\n+\n+  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\"creqv 6,6,6\", operands);\n+\n+  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \"bl %z0@plt\" : \"bl %z0\";\n+}\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*call_value_indirect_nonlocal_sysv\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:SI 1 \"call_operand\" \"cl,cl,s,s\"))\n-\t      (match_operand 2 \"\" \"g,g,g,g\")))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"O,n,O,n\"))\n-   (clobber (match_scratch:SI 4 \"=l,l,l,l\"))]\n+\t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"cl,cl\"))\n+\t      (match_operand 2 \"\" \"g,g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n+   (clobber (match_scratch:SI 4 \"=l,l\"))]\n   \"DEFAULT_ABI == ABI_AIX_NODESC\n    || DEFAULT_ABI == ABI_V4\n    || DEFAULT_ABI == ABI_DARWIN\"\n-  \"*\n {\n   if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n-    output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n+    output_asm_insn (\"crxor 6,6,6\", operands);\n \n   else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n-    output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n+    output_asm_insn (\"creqv 6,6,6\", operands);\n \n-  switch (which_alternative)\n-    {\n-    default:\n-      abort ();\n-    case 0:\n-    case 1:\n-      return \\\"b%T1l\\\";\n-    case 2:\n-    case 3:\n-      return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \\\"bl %z1@plt\\\" : \\\"bl %z1\\\";\n-    }\n-}\"\n-  [(set_attr \"type\" \"jmpreg,jmpreg,branch,branch\")\n-   (set_attr \"length\" \"4,8,4,8\")])\n+  return \"b%T1l\";\n+}\n+  [(set_attr \"type\" \"jmpreg,jmpreg\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*call_value_nonlocal_sysv\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"s,s\"))\n+\t      (match_operand 2 \"\" \"g,g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n+   (clobber (match_scratch:SI 4 \"=l,l\"))]\n+  \"(DEFAULT_ABI == ABI_AIX_NODESC\n+    || DEFAULT_ABI == ABI_V4\n+    || DEFAULT_ABI == ABI_DARWIN)\n+   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n+{\n+  if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\"crxor 6,6,6\", operands);\n+\n+  else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\"creqv 6,6,6\", operands);\n+\n+  return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \"bl %z1@plt\" : \"bl %z1\";\n+}\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n \n ;; Call subroutine returning any type.\n (define_expand \"untyped_call\""}, {"sha": "3be9d67304db68689b16e2b82c106add21d69283", "filename": "gcc/config/rs6000/t-rs6000-c-rule", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Ft-rs6000-c-rule", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fconfig%2Frs6000%2Ft-rs6000-c-rule", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000-c-rule?ref=a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "patch": "@@ -0,0 +1,4 @@\n+rs6000-c.o: $(srcdir)/config/rs6000/rs6000-c.c \\\n+    $(srcdir)/config/rs6000/rs6000-protos.h \\\n+    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(CPPLIB_H) $(TM_P_H) c-lex.h errors.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)"}, {"sha": "b27bec4c3bffb36bf3b21f7d4b00a4ac230873a0", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "patch": "@@ -2273,12 +2273,17 @@ useful to override the effects of the @option{-mrtd} switch.\n The PowerPC compiler for Windows NT currently ignores the @code{cdecl}\n attribute.\n \n-@item longcall\n+@item longcall/shortcall\n @cindex functions called via pointer on the RS/6000 and PowerPC\n On the RS/6000 and PowerPC, the @code{longcall} attribute causes the\n-compiler to always call the function via a pointer, so that functions\n-which reside further than 64 megabytes (67,108,864 bytes) from the\n-current location can be called.\n+compiler to always call this function via a pointer, just as it would if\n+the @option{-mlongcall} option had been specified.  The @code{shortcall}\n+attribute causes the compiler not to do this.  These attributes override\n+both the @option{-mlongcall} switch and the @code{#pragma longcall}\n+setting.\n+\n+@xref{RS/6000 and PowerPC Options}, for more information on when long\n+calls are and are not necessary.\n \n @item long_call/short_call\n @cindex indirect calls on ARM\n@@ -5992,6 +5997,7 @@ for further explanation.\n \n @menu\n * ARM Pragmas::\n+* RS/6000 and PowerPC Pragmas::\n * Darwin Pragmas::\n * Solaris Pragmas::\n * Tru64 Pragmas::\n@@ -6020,6 +6026,27 @@ Do not affect the @code{long_call} or @code{short_call} attributes of\n subsequent functions.\n @end table\n \n+@node RS/6000 and PowerPC Pragmas\n+@subsection RS/6000 and PowerPC Pragmas\n+\n+The RS/6000 and PowerPC targets define one pragma for controlling\n+whether or not the @code{longcall} attribute is added to function\n+declarations by default.  This pragma overrides the @option{-mlongcall}\n+option, but not the @code{longcall} and @code{shortcall} attributes.  \n+@xref{RS/6000 and PowerPC Options}, for more information about when long\n+calls are and are not necessary.\n+\n+@table @code\n+@item longcall (1)\n+@cindex pragma, longcall\n+Apply the @code{longcall} attribute to all subsequent function\n+declarations.\n+\n+@item longcall (0)\n+Do not apply the @code{longcall} attribute to subsequent function\n+declarations.\n+@end table\n+\n @c Describe c4x pragmas here.\n @c Describe h8300 pragmas here.\n @c Describe i370 pragmas here."}, {"sha": "68b888fca940003245290afb5b30148fa2d8c694", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c76ee6e2c613ac4c3e309e562d51bea137c73a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a5c76ee6e2c613ac4c3e309e562d51bea137c73a", "patch": "@@ -6817,6 +6817,24 @@ All modules should be compiled with the same @option{-G @var{num}} value.\n On System V.4 and embedded PowerPC systems do (do not) emit register\n names in the assembly language output using symbolic forms.\n \n+@item -mlongcall\n+@itemx -mno-longcall\n+@opindex mlongcall\n+@opindex mno-longcall\n+Default to making all function calls via pointers, so that functions\n+which reside further than 64 megabytes (67,108,864 bytes) from the\n+current location can be called.  This setting can be overridden by the\n+@code{shortcall} function attribute, or by @code{#pragma longcall(0)}.\n+\n+Some linkers are capable of detecting out-of-range calls and generating\n+glue code on the fly.  On these systems, long calls are unnecessary and\n+generate slower code.  As of this writing, the AIX linker can do this,\n+as can the GNU linker for PowerPC/64.  It is planned to add this feature\n+to the GNU linker for 32-bit PowerPC systems as well.\n+\n+In the future, we may cause GCC to ignore all longcall specifications\n+when the linker is known to generate glue.\n+\n @item -pthread\n @opindex pthread\n Adds support for multithreading with the @dfn{pthreads} library."}]}