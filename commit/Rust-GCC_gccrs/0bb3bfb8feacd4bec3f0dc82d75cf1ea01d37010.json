{"sha": "0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJiM2JmYjhmZWFjZDRiZWMzZjBkYzgyZDc1Y2YxZWEwMWQzNzAxMA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2011-08-31T09:02:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T09:02:37Z"}, "message": "exp_ch5.adb (Expand_N_Assignment_Statement): When a discriminant check is needed for a left-hand side that is a dereference...\n\n2011-08-31  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): When a discriminant\n\tcheck is needed for a left-hand side that is a dereference, and the\n\tbase type is private without discriminants (whereas the full type does\n\thave discriminants), an extra retrieval of the underlying type may be\n\tneeded in the case where the subtype is a record subtype whose base\n\ttype is private. Update comments.\n\nFrom-SVN: r178362", "tree": {"sha": "b537d5ed4f210cfdb6718b2d5e485201860cb3ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b537d5ed4f210cfdb6718b2d5e485201860cb3ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11fa950bd42cde0cd1c7c30b499250d145765561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11fa950bd42cde0cd1c7c30b499250d145765561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11fa950bd42cde0cd1c7c30b499250d145765561"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "bcb79fce61e042545bad72e554e100c5d539274d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010", "patch": "@@ -1,3 +1,12 @@\n+2011-08-31  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): When a discriminant\n+\tcheck is needed for a left-hand side that is a dereference, and the\n+\tbase type is private without discriminants (whereas the full type does\n+\thave discriminants), an extra retrieval of the underlying type may be\n+\tneeded in the case where the subtype is a record subtype whose base\n+\ttype is private. Update comments.\n+\n 2011-08-31  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch4.adb (Try_Object_Operation): When a dispatching primitive is"}, {"sha": "329f7791d2c1ed274d765f4eeea2f35a400c2121", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=0bb3bfb8feacd4bec3f0dc82d75cf1ea01d37010", "patch": "@@ -1788,9 +1788,8 @@ package body Exp_Ch5 is\n \n       --  If the type is private without discriminants, and the full type\n       --  has discriminants (necessarily with defaults) a check may still be\n-      --  necessary if the Lhs is aliased. The private determinants must be\n+      --  necessary if the Lhs is aliased. The private discriminants must be\n       --  visible to build the discriminant constraints.\n-      --  What is a \"determinant\"???\n \n       --  Only an explicit dereference that comes from source indicates\n       --  aliasing. Access to formals of protected operations and entries\n@@ -1802,11 +1801,28 @@ package body Exp_Ch5 is\n         and then Comes_From_Source (Lhs)\n       then\n          declare\n-            Lt : constant Entity_Id := Etype (Lhs);\n+            Lt  : constant Entity_Id := Etype (Lhs);\n+            Ubt : Entity_Id          := Base_Type (Typ);\n+\n          begin\n-            Set_Etype (Lhs, Typ);\n-            Rewrite (Rhs, OK_Convert_To (Base_Type (Typ), Rhs));\n-            Apply_Discriminant_Check (Rhs, Typ, Lhs);\n+            --  In the case of an expander-generated record subtype whose base\n+            --  type still appears private, Typ will have been set to that\n+            --  private type rather than the underlying record type (because\n+            --  Underlying type will have returned the record subtype), so it's\n+            --  necessary to apply Underlying_Type again to the base type to\n+            --  get the record type we need for the discriminant check. Such\n+            --  subtypes can be created for assignments in certain cases, such\n+            --  as within an instantiation passed this kind of private type.\n+            --  It would be good to avoid this special test, but making changes\n+            --  to prevent this odd form of record subtype seems difficult. ???\n+\n+            if Is_Private_Type (Ubt) then\n+               Ubt := Underlying_Type (Ubt);\n+            end if;\n+\n+            Set_Etype (Lhs, Ubt);\n+            Rewrite (Rhs, OK_Convert_To (Base_Type (Ubt), Rhs));\n+            Apply_Discriminant_Check (Rhs, Ubt, Lhs);\n             Set_Etype (Lhs, Lt);\n          end;\n "}]}