{"sha": "819f8bd7670aeb497164349aad000a52a08815d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE5ZjhiZDc2NzBhZWI0OTcxNjQzNDlhYWQwMDBhNTJhMDg4MTVkNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-12-19T10:51:46Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-12-19T10:51:46Z"}, "message": "mt.md (decrement_and_branch_until_zero): Add another scratch.\n\n\t* config/mt/mt.md (decrement_and_branch_until_zero): Add another\n\tscratch.  Correct its reload split. Adjust its peephole.\n\t(doloop_end): Add additional scratch.\n\t(nop): Use 'nop'.\n\t* config/mt/mt.c (MT_INT_ARG_FIRST): Remove.\n\t(mt_asm_output_opcode, mt_print_operand): Use 'nop'.\n\t(mt_function_arg_slotno): Use FIRST_ARG_REGNUM.\n\t(mt_builtin_saveregs): Replace with ...\n\t(mt_setup_incoming_varargs): ... here.  Save just the varadic\n\targs.\n\t(mt_va_start): Remove.\n\t(mt_reorg_hazard): Ignore USE insns.  Don't call set_noop_p.\n\t(mt_machine_reorg): Split all insns here.\n\t(TARGET_SETUP_INCOMING_VARARGS): Override.\n\t* config/mt/mt.h (TARGET_CPU_CPP_BUILTINS): Define __mt__ only.\n\tSet to CPU type.\n\t(EXPAND_BUILTIN_VA_START): Remove.\n\nFrom-SVN: r108787", "tree": {"sha": "dba1d3e9167f12f5cfa4b0fa73f032e96e8b4388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dba1d3e9167f12f5cfa4b0fa73f032e96e8b4388"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/819f8bd7670aeb497164349aad000a52a08815d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/819f8bd7670aeb497164349aad000a52a08815d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/819f8bd7670aeb497164349aad000a52a08815d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/819f8bd7670aeb497164349aad000a52a08815d4/comments", "author": null, "committer": null, "parents": [{"sha": "2803e9970df940bf450c41e68cb15238382f4db2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2803e9970df940bf450c41e68cb15238382f4db2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2803e9970df940bf450c41e68cb15238382f4db2"}], "stats": {"total": 133, "additions": 73, "deletions": 60}, "files": [{"sha": "a86156df09464c7ece609fab1455defaf85e77bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/819f8bd7670aeb497164349aad000a52a08815d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/819f8bd7670aeb497164349aad000a52a08815d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=819f8bd7670aeb497164349aad000a52a08815d4", "patch": "@@ -1,3 +1,23 @@\n+2005-12-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/mt/mt.md (decrement_and_branch_until_zero): Add another\n+\tscratch.  Correct its reload split. Adjust its peephole.\n+\t(doloop_end): Add additional scratch.\n+\t(nop): Use 'nop'.\n+\t* config/mt/mt.c (MT_INT_ARG_FIRST): Remove.\n+\t(mt_asm_output_opcode, mt_print_operand): Use 'nop'.\n+\t(mt_function_arg_slotno): Use FIRST_ARG_REGNUM.\n+\t(mt_builtin_saveregs): Replace with ...\n+\t(mt_setup_incoming_varargs): ... here.  Save just the varadic\n+\targs.\n+\t(mt_va_start): Remove.\n+\t(mt_reorg_hazard): Ignore USE insns.  Don't call set_noop_p.\n+\t(mt_machine_reorg): Split all insns here.\n+\t(TARGET_SETUP_INCOMING_VARARGS): Override.\n+\t* config/mt/mt.h (TARGET_CPU_CPP_BUILTINS): Define __mt__ only.\n+\tSet to CPU type.\n+\t(EXPAND_BUILTIN_VA_START): Remove.\n+\n 2005-12-17  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n         * flow.c (update_life_info, count_or_remove_death_notes): Fixed\n@@ -906,9 +926,6 @@\n \n 2005-12-13  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* sim/common/sim-signal.c (sim_signal_to_target): Add missing ':'.\n-\t* sim/common/sim-signal.h (sim_signal_to_target): Return an int.\n-\n \t* config/mt/t-mt (crti.o, crtn.o): Add multilib options.\n \t(EXTRA_MULTILIB_PARTS): Define.\n \n@@ -1222,8 +1239,8 @@\n \n 2005-12-09  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/ms1/t-ms1 (MULTILIB_OPTIONS): Define.\n-        (MULTILIB_DIRNAMES): Define.\n+\t* config/ms1/t-ms1 (MULTILIB_OPTIONS): Define.\n+\t(MULTILIB_DIRNAMES): Define.\n \n 2005-12-09  Ulrich Weigand  <uweigand@de.ibm.com>\n "}, {"sha": "6ee7ce90b2eb9608022c64950622c4e6aee228ca", "filename": "gcc/config/mt/mt.c", "status": "modified", "additions": 40, "deletions": 45, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/819f8bd7670aeb497164349aad000a52a08815d4/gcc%2Fconfig%2Fmt%2Fmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/819f8bd7670aeb497164349aad000a52a08815d4/gcc%2Fconfig%2Fmt%2Fmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt.c?ref=819f8bd7670aeb497164349aad000a52a08815d4", "patch": "@@ -55,9 +55,6 @@\n /* Link register mask.  */\n #define LINK_MASK\t \t (1 << (GPR_LINK))\n \n-/* First GPR.  */\n-#define MT_INT_ARG_FIRST 1\n-\n /* Given a SIZE in bytes, advance to the next word.  */\n #define ROUND_ADVANCE(SIZE) (((SIZE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n@@ -122,7 +119,7 @@ mt_asm_output_opcode (FILE *f ATTRIBUTE_UNUSED, const char *ptr)\n   \n   while (mt_nops_required)\n     {\n-      fprintf (f, \"or r0, r0, r0\\n\\t\");\n+      fprintf (f, \"nop\\n\\t\");\n       -- mt_nops_required;\n     }\n   \n@@ -421,7 +418,7 @@ mt_print_operand (FILE * file, rtx x, int code)\n     case '#':\n       /* Output a nop if there's nothing for the delay slot.  */\n       if (dbr_sequence_length () == 0)\n-\tfputs (\"\\n\\tor r0, r0, r0\", file);\n+\tfputs (\"\\n\\tnop\", file);\n       return;\n       \n     case 'H': \n@@ -538,7 +535,7 @@ mt_function_arg_slotno (const CUMULATIVE_ARGS * cum,\n \t\t\tint incoming_p ATTRIBUTE_UNUSED,\n \t\t\tint * pregno)\n {\n-  int regbase = MT_INT_ARG_FIRST;\n+  int regbase = FIRST_ARG_REGNUM;\n   int slotno  = * cum;\n \n   if (mode == VOIDmode || targetm.calls.must_pass_in_stack (mode, type))\n@@ -827,35 +824,29 @@ mt_override_options (void)\n    to determine if stdarg or varargs is used and return the address of the\n    first unnamed parameter.  */\n \n-static rtx\n-mt_builtin_saveregs (void)\n+static void\n+mt_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n+\t\t\t   enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t   tree type ATTRIBUTE_UNUSED,\n+\t\t\t   int *pretend_size, int no_rtl)\n {\n-  int first_reg = 0;\n-  rtx address;\n   int regno;\n-\n-  for (regno = first_reg; regno < MT_NUM_ARG_REGS; regno ++)\n-    emit_move_insn\n-      (gen_rtx_MEM (word_mode,\n-\t\t    gen_rtx_PLUS (Pmode,\n-\t\t\t\t  gen_rtx_REG (SImode, ARG_POINTER_REGNUM),\n-\t\t\t\t  GEN_INT (UNITS_PER_WORD * regno))),\n-       gen_rtx_REG (word_mode,\n-\t\t    MT_INT_ARG_FIRST + regno));\n-\n-  address = gen_rtx_PLUS (Pmode,\n-\t\t\t  gen_rtx_REG (SImode, ARG_POINTER_REGNUM),\n-\t\t\t  GEN_INT (UNITS_PER_WORD * first_reg));\n-  return address;\n-}\n-\n-/* Implement `va_start'.  */\n-\n-void\n-mt_va_start (tree valist, rtx nextarg)\n-{\n-  mt_builtin_saveregs ();\n-  std_expand_builtin_va_start (valist, nextarg);\n+  int regs = MT_NUM_ARG_REGS - *cum;\n+  \n+  *pretend_size = regs < 0 ? 0 : GET_MODE_SIZE (SImode) * regs;\n+  \n+  if (no_rtl)\n+    return;\n+  \n+  for (regno = *cum; regno < MT_NUM_ARG_REGS; regno++)\n+    {\n+      rtx reg = gen_rtx_REG (SImode, FIRST_ARG_REGNUM + regno);\n+      rtx slot = gen_rtx_PLUS (Pmode,\n+\t\t\t       gen_rtx_REG (SImode, ARG_POINTER_REGNUM),\n+\t\t\t       GEN_INT (UNITS_PER_WORD * regno));\n+      \n+      emit_move_insn (gen_rtx_MEM (SImode, slot), reg);\n+    }\n }\n \n /* Returns the number of bytes offset between the frame pointer and the stack\n@@ -2312,9 +2303,14 @@ mt_reorg_hazard (void)\n       \n       gcc_assert (INSN_P (insn) && !INSN_DELETED_P (insn));\n       for (next = NEXT_INSN (insn);\n-\t   next && !INSN_P (next);\n+\t   next;\n \t   next = NEXT_INSN (next))\n-\tcontinue;\n+\t{\n+\t  if (!INSN_P (next))\n+\t    continue;\n+\t  if (GET_CODE (PATTERN (next)) != USE)\n+\t    break;\n+\t}\n \n       jmp = insn;\n       if (GET_CODE (PATTERN (insn)) == SEQUENCE)\n@@ -2390,7 +2386,7 @@ mt_reorg_hazard (void)\n \t\t      }\n \t\t  continue;\n \t\t}\n-\t      if (!INSN_P (prev))\n+\t      if (!INSN_P (prev) || GET_CODE (PATTERN (prev)) == USE)\n \t\tcontinue;\n \t      \n \t      if (GET_CODE (PATTERN (prev)) == SEQUENCE)\n@@ -2421,14 +2417,7 @@ mt_reorg_hazard (void)\n \t\t}\n \n \t      if (INSN_CODE (prev) >= 0)\n-\t\t{\n-\t\t  rtx set = single_set (prev);\n-\n-\t\t  /* A noop set will get deleted in a later split pass,\n-\t     \t     so we can't count on it for hazard avoidance.  */\n-\t\t  if (!set || !set_noop_p (set))\n-\t\t    count--;\n-\t\t}\n+\t\tcount--;\n \t    }\n \n \t  if (rescan)\n@@ -2470,7 +2459,11 @@ mt_machine_reorg (void)\n     dbr_schedule (get_insns (), dump_file);\n   \n   if (TARGET_MS2)\n-    mt_reorg_hazard ();\n+    {\n+      /* Force all instructions to be split into their final form.  */\n+      split_all_insns_noflow ();\n+      mt_reorg_hazard ();\n+    }\n }\n \f\n /* Initialize the GCC target structure.  */\n@@ -2488,6 +2481,8 @@ const struct attribute_spec mt_attribute_table[];\n #define TARGET_MUST_PASS_IN_STACK       mt_pass_in_stack\n #undef  TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES\tmt_arg_partial_bytes\n+#undef  TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS \tmt_setup_incoming_varargs\n #undef  TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG  mt_machine_reorg\n "}, {"sha": "3b5bb6a04ead79e2c9c417fa5c314c76d0f1d6e2", "filename": "gcc/config/mt/mt.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/819f8bd7670aeb497164349aad000a52a08815d4/gcc%2Fconfig%2Fmt%2Fmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/819f8bd7670aeb497164349aad000a52a08815d4/gcc%2Fconfig%2Fmt%2Fmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt.h?ref=819f8bd7670aeb497164349aad000a52a08815d4", "patch": "@@ -79,7 +79,7 @@ march=ms2:exit-ms2.o%s; \\\n #define TARGET_CPU_CPP_BUILTINS() \t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      builtin_define_std (\"mt\");\t\t\\\n+      builtin_define_with_int_value (\"__mt__\", mt_cpu);\t\\\n       builtin_assert (\"machine=mt\");\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n@@ -600,9 +600,6 @@ extern struct mt_frame_info current_frame_info;\n \n #define FUNCTION_PROFILER(FILE, LABELNO) gcc_unreachable ()\n \n-#define EXPAND_BUILTIN_VA_START(VALIST, NEXTARG)\t\t\\\n-  mt_va_start (VALIST, NEXTARG)\n-\n /* Trampolines are not implemented.  */\n #define TRAMPOLINE_SIZE 0\n "}, {"sha": "fd244386ccd4584e38ae495e4be2109eb37c33e1", "filename": "gcc/config/mt/mt.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/819f8bd7670aeb497164349aad000a52a08815d4/gcc%2Fconfig%2Fmt%2Fmt.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/819f8bd7670aeb497164349aad000a52a08815d4/gcc%2Fconfig%2Fmt%2Fmt.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt.md?ref=819f8bd7670aeb497164349aad000a52a08815d4", "patch": "@@ -89,7 +89,8 @@\n     (set (match_dup 0)\n \t (plus:SI (match_dup 0)\n \t\t  (const_int -1)))\n-    (clobber (match_scratch:SI 2 \"=X,&r\"))]\n+    (clobber (match_scratch:SI 2 \"=X,&r\"))\n+    (clobber (match_scratch:SI 3 \"=X,&r\"))]\n   \"TARGET_MS1_16_003 || TARGET_MS2\"\n   \"@\n    dbnz\\t%0, %l1%#\n@@ -110,11 +111,12 @@\n     (set (match_dup 0)\n \t (plus:SI (match_dup 0)\n \t\t  (const_int -1)))\n-    (clobber (match_scratch:SI 2 \"\"))]\n+    (clobber (match_scratch:SI 2 \"\"))\n+    (clobber (match_scratch:SI 3 \"\"))]\n   \"TARGET_MS1_16_003 || TARGET_MS2\"\n   [(set (match_dup 2) (match_dup 0))\n-   (set (match_dup 2) (plus:SI (match_dup 2) (const_int -1)))\n-   (set (match_dup 0) (match_dup 2))\n+   (set (match_dup 3) (plus:SI (match_dup 2) (const_int -1)))\n+   (set (match_dup 0) (match_dup 3))\n    (set (pc)\n \t(if_then_else\n \t (ne (match_dup 2)\n@@ -145,6 +147,7 @@\n \t              (pc)))\n               (set (match_dup 0)\n \t           (plus:SI (match_dup 0) (const_int -1)))\n+\t      (clobber (reg:SI 0))\n \t      (clobber (reg:SI 0))])]\n   \"\")\n \n@@ -197,7 +200,8 @@\n \t      (set (match_dup 0)\n \t\t   (plus:SI (match_dup 0)\n \t\t\t    (const_int -1)))\n-\t      (clobber (match_scratch:SI 5 \"\"))])]\n+\t      (clobber (match_scratch:SI 5 \"\"))\n+\t      (clobber (match_scratch:SI 6 \"\"))])]\n   \"TARGET_MS1_16_003 || TARGET_MS2\"\n   {mt_add_loop ();})\n \f\n@@ -1436,7 +1440,7 @@\n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\"\n-  \"or\tr0,r0,r0\"\n+  \"nop\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"arith\")])\n "}]}