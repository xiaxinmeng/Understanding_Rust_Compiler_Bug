{"sha": "2cc980567a3bf9b714295e88392798dd347fa156", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjOTgwNTY3YTNiZjliNzE0Mjk1ZTg4MzkyNzk4ZGQzNDdmYTE1Ng==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-07-19T08:13:58Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-07-19T08:13:58Z"}, "message": "common.opt: Document --param.\n\n\t* common.opt:  Document --param.\n\t* opts.c (columns, undocumented_msg): New.\n\t(print_help): Get number of columns from environment.  Print\n\t--param help.  Tweak newline handling.\n\t(print_param_help): New.\n\t(print_filtered_help): Better handling of duplicates.  Complain\n\tabout undocumented switches.\n\t(print_switch): New.\n\t(wrap_help): Improve wrapping, use COLUMNS.\n\t* opts.sh: Ignore comments in records.\n\t* params.def: Fix typos and remove trailing periods.\n\t* toplev.c (display_help): Don't dump --param help.\n\t* doc/sourcebuild.texi: Update.\njava:\n\t* lang.opt: Don't show -MD_ and -MDD_.\n\nFrom-SVN: r69581", "tree": {"sha": "ae5bf4d199d0acf49a83e157935222fef432ee5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae5bf4d199d0acf49a83e157935222fef432ee5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc980567a3bf9b714295e88392798dd347fa156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc980567a3bf9b714295e88392798dd347fa156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc980567a3bf9b714295e88392798dd347fa156", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc980567a3bf9b714295e88392798dd347fa156/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e38b30b193cdae472d72486eefc5b206f6a03ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e38b30b193cdae472d72486eefc5b206f6a03ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e38b30b193cdae472d72486eefc5b206f6a03ad"}], "stats": {"total": 210, "additions": 163, "deletions": 47}, "files": [{"sha": "98200dd51c030ae07b5ca79756778e40a7c2f5fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cc980567a3bf9b714295e88392798dd347fa156", "patch": "@@ -1,3 +1,19 @@\n+2003-07-19  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* common.opt:  Document --param.\n+\t* opts.c (columns, undocumented_msg): New.\n+\t(print_help): Get number of columns from environment.  Print\n+\t--param help.  Tweak newline handling.\n+\t(print_param_help): New.\n+\t(print_filtered_help): Better handling of duplicates.  Complain\n+\tabout undocumented switches.\n+\t(print_switch): New.\n+\t(wrap_help): Improve wrapping, use COLUMNS.\n+\t* opts.sh: Ignore comments in records.\n+\t* params.def: Fix typos and remove trailing periods.\n+\t* toplev.c (display_help): Don't dump --param help.\n+\t* doc/sourcebuild.texi: Update.\n+\n 2003-07-18  Richard Henderson  <rth@redhat.com>\n \n \tPR target/11556"}, {"sha": "65341d1b33cf509ddaa6cb6e3d512d7e431099ef", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2cc980567a3bf9b714295e88392798dd347fa156", "patch": "@@ -28,6 +28,7 @@ Display this information\n \n -param\n Common Separate\n+--param <param>=<value>\tSet paramter <param> to value.  See below for a complete list of parameters\n \n -target-help\n Common"}, {"sha": "59ab3eb85971ec5c8fb68af36c01265872c1c61f", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=2cc980567a3bf9b714295e88392798dd347fa156", "patch": "@@ -601,12 +601,9 @@ Move to the stage directory files not included in @code{stagestuff} in\n \n @item lang.opt\n This file registers the set of switches that the front end accepts on\n-the command line.  The file format is documented in the file\n-@file{c.opt}.  These files are processed by the script @file{opts.sh}.\n-@item lang-options.h\n-This file provides entries for @code{documented_lang_options} in\n-@file{toplev.c} describing command-line options the front end accepts\n-for @option{--help} output.\n+the command line, and their --help text.  The file format is\n+documented in the file @file{c.opt}.  These files are processed by the\n+script @file{opts.sh}.\n @item lang-specs.h\n This file provides entries for @code{default_compilers} in\n @file{gcc.c} which override the default of giving an error that a"}, {"sha": "df76ce6ba9de9112daabd8147e686151aaef4943", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2cc980567a3bf9b714295e88392798dd347fa156", "patch": "@@ -1,3 +1,7 @@\n+2003-07-19  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang.opt: Don't show -MD_ and -MDD_.\n+\n 2003-07-18  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* lang-options.h: Remove."}, {"sha": "987eb82e444147415ab379d3598266fb4a1fb0db", "filename": "gcc/java/lang.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=2cc980567a3bf9b714295e88392798dd347fa156", "patch": "@@ -34,7 +34,7 @@ Java\n ; Documented for C\n \n MD_\n-Java\n+Java Undocumented\n ; Documented for C\n \n MF\n@@ -46,7 +46,7 @@ Java\n ; Documented for C\n \n MMD_\n-Java\n+Java Undocumented\n ; Documented for C\n \n MP"}, {"sha": "5659d2add6cb0635b28a9a903323b7035d44221b", "filename": "gcc/opts.c", "status": "modified", "additions": 127, "deletions": 17, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2cc980567a3bf9b714295e88392798dd347fa156", "patch": "@@ -128,6 +128,12 @@ bool warn_unused_value;\n /* Hack for cooperation between set_Wunused and set_Wextra.  */\n static bool maybe_warn_unused_parameter;\n \n+/* Columns of --help display.  */\n+static unsigned int columns = 80;\n+\n+/* What to print when a switch has no documentation.  */\n+static const char undocumented_msg[] = N_(\"This switch lacks documentation\");\n+\n static size_t find_opt (const char *, int);\n static int common_handle_option (size_t scode, const char *arg, int value);\n static void handle_param (const char *);\n@@ -137,9 +143,11 @@ static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const char *, const struct cl_option *,\n \t\t\t\t unsigned int lang_mask);\n static void handle_options (unsigned int, const char **, unsigned int);\n-static void wrap_help (const char *help, const char *item, int item_width);\n+static void wrap_help (const char *help, const char *item, unsigned int);\n static void print_help (void);\n+static void print_param_help (void);\n static void print_filtered_help (unsigned int flag);\n+static unsigned int print_switch (const char *text, unsigned int indent);\n \n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and N_OPTS\n@@ -1487,50 +1495,120 @@ static void\n print_help (void)\n {\n   size_t i;\n+  const char *p;\n+\n+  GET_ENVIRONMENT (p, \"COLUMNS\");\n+  if (p)\n+    {\n+      int value = atoi (p);\n+      if (value > 0)\n+\tcolumns = value;\n+    }\n \n   puts (_(\"The following options are language-independent:\\n\"));\n \n   print_filtered_help (CL_COMMON);\n+  print_param_help ();\n \n   for (i = 0; lang_names[i]; i++)\n     {\n-      printf (_(\"\\nThe %s front end recognizes the following options:\\n\"),\n+      printf (_(\"The %s front end recognizes the following options:\\n\\n\"),\n \t      lang_names[i]);\n       print_filtered_help (1U << i);\n     }\n \n-  puts ( \"\\n\" );\n   display_help ();\n }\n \n+/* Print the help for --param.  */\n+static void\n+print_param_help (void)\n+{\n+  size_t i;\n+\n+  puts (_(\"The --param option recognizes the following as parameters:\\n\"));\n+\n+  for (i = 0; i < LAST_PARAM; i++)\n+    {\n+      const char *help = compiler_params[i].help;\n+      const char *param = compiler_params[i].option;\n+\n+      if (help == NULL || *help == '\\0')\n+\thelp = undocumented_msg;\n+\n+      /* Get the translation.  */\n+      help = _(help);\n+\n+      wrap_help (help, param, strlen (param));\n+    }\n+\n+  putchar ('\\n');\n+}\n+\n /* Print help for a specific front-end, etc.  */\n static void\n print_filtered_help (unsigned int flag)\n {\n-  size_t i, len;\n-  unsigned int filter;\n+  unsigned int i, len, filter, indent = 0;\n+  bool duplicates = false;\n+  const char *help, *opt, *tab;\n+  static char *printed;\n+\n+  if (flag == CL_COMMON)\n+    {\n+      filter = flag;\n+      if (!printed)\n+\tprinted = xmalloc (cl_options_count);\n+      memset (printed, 0, cl_options_count);\n+    }\n+  else\n+    {\n+      /* Don't print COMMON options twice.  */\n+      filter = flag | CL_COMMON;\n \n-  /* Don't print COMMON options twice.  */\n-  filter = flag;\n-  if (flag != CL_COMMON)\n-    filter |= CL_COMMON;\n+      for (i = 0; i < cl_options_count; i++)\n+\t{\n+\t  if ((cl_options[i].flags & filter) != flag)\n+\t    continue;\n+\n+\t  /* Skip help for internal switches.  */\n+\t  if (cl_options[i].flags & CL_UNDOCUMENTED)\n+\t    continue;\n+\n+\t  /* Skip switches that have already been printed, mark them to be\n+\t     listed later.  */\n+\t  if (printed[i])\n+\t    {\n+\t      duplicates = true;\n+\t      indent = print_switch (cl_options[i].opt_text, indent);\n+\t    }\n+\t}\n+\n+      if (duplicates)\n+\t{\n+\t  putchar ('\\n');\n+\t  putchar ('\\n');\n+\t}\n+    }\n \n   for (i = 0; i < cl_options_count; i++)\n     {\n-      const char *help;\n-      const char *opt, *tab;\n-\n       if ((cl_options[i].flags & filter) != flag)\n \tcontinue;\n \n       /* Skip help for internal switches.  */\n       if (cl_options[i].flags & CL_UNDOCUMENTED)\n \tcontinue;\n \n-      /* During transition, ignore switches with no help.  */\n+      /* Skip switches that have already been printed.  */\n+      if (printed[i])\n+\tcontinue;\n+\n+      printed[i] = true;\n+\n       help = cl_options[i].help;\n       if (!help)\n-\tcontinue;\n+\thelp = undocumented_msg;\n \n       /* Get the translation.  */\n       help = _(help);\n@@ -1550,21 +1628,51 @@ print_filtered_help (unsigned int flag)\n \n       wrap_help (help, opt, len);\n     }\n+\n+  putchar ('\\n');\n+}\n+\n+/* Output ITEM, of length ITEM_WIDTH, in the left column, followed by\n+   word-wrapped HELP in a second column.  */\n+static unsigned int\n+print_switch (const char *text, unsigned int indent)\n+{\n+  unsigned int len = strlen (text) + 1; /* trailing comma */\n+\n+  if (indent)\n+    {\n+      putchar (',');\n+      if (indent + len > columns)\n+\t{\n+\t  putchar ('\\n');\n+\t  putchar (' ');\n+\t  indent = 1;\n+\t}\n+    }\n+  else\n+    putchar (' ');\n+\n+  putchar (' ');\n+  fputs (text, stdout);\n+\n+  return indent + len + 1;\n }\n \n /* Output ITEM, of length ITEM_WIDTH, in the left column, followed by\n    word-wrapped HELP in a second column.  */\n static void\n-wrap_help (const char *help, const char *item, int item_width)\n+wrap_help (const char *help, const char *item, unsigned int item_width)\n {\n-  const int columns = 80, col_width = 27;\n+  unsigned int col_width = 27;\n   unsigned int remaining, room, len;\n \n   remaining = strlen (help);\n \n   do\n     {\n       room = columns - 3 - MAX (col_width, item_width);\n+      if (room > columns)\n+\troom = 0;\n       len = remaining;\n \n       if (room < len)\n@@ -1577,7 +1685,9 @@ wrap_help (const char *help, const char *item, int item_width)\n \t\tbreak;\n \t      if (help[i] == ' ')\n \t\tlen = i;\n-\t      else if (help[i] == '-')\n+\t      else if ((help[i] == '-' || help[i] == '/')\n+\t\t       && help[i + 1] != ' '\n+\t\t       && ISALPHA (help[i - 1]))\n \t\tlen = i + 1;\n \t    }\n \t}"}, {"sha": "871c8554211500147f12653eea525bbe1efd51cf", "filename": "gcc/opts.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fopts.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fopts.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.sh?ref=2cc980567a3bf9b714295e88392798dd347fa156", "patch": "@@ -42,7 +42,7 @@ ${AWK} '\n \t# Note that RS=\"\" falls foul of gawk 3.1.2 bugs\n \t/^[^ \\t]/       { record = $0\n \t\t\t  do { getline tmp;\n-\t\t\t       if (tmp != \"\" )\n+\t\t\t       if (!(tmp ~ \"^[ \\t]*(;|$)\"))\n \t\t\t          record = record \"\\034\" tmp\n \t\t\t  } while (tmp != \"\")\n \t\t\t  print record"}, {"sha": "1d50e2b1a04d1d9538dc0cb4b95750cf45992b74", "filename": "gcc/params.def", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=2cc980567a3bf9b714295e88392798dd347fa156", "patch": "@@ -158,11 +158,11 @@ DEFPARAM(PARAM_LARGE_FUNCTION_INSNS,\n \t 10000)\n DEFPARAM(PARAM_LARGE_FUNCTION_GROWTH,\n \t \"large-function-growth\",\n-\t \"Maximal growth due to inlining of large function (in percents)\",\n+\t \"Maximal growth due to inlining of large function (in percent)\",\n \t 100)\n DEFPARAM(PARAM_INLINE_UNIT_GROWTH,\n \t \"inline-unit-growth\",\n-\t \"how much can given compilation unit grow because of the inlining (in percents)\",\n+\t \"how much can given compilation unit grow because of the inlining (in percent)\",\n \t 50)\n \n /* The GCSE optimization will be disabled if it would require\n@@ -253,22 +253,22 @@ must be covered by trace formation. Used when profile feedback is not available\"\n \t 75)\n DEFPARAM(TRACER_MAX_CODE_GROWTH,\n \t \"tracer-max-code-growth\",\n-\t \"Maximal code growth caused by tail duplication (in percents)\",\n+\t \"Maximal code growth caused by tail duplication (in percent)\",\n \t 100)\n DEFPARAM(TRACER_MIN_BRANCH_RATIO,\n \t \"tracer-min-branch-ratio\",\n \t \"Stop reverse growth if the reverse probability of best edge is less \\\n-than this threshold (in percents)\",\n+than this threshold (in percent)\",\n \t 10)\n DEFPARAM(TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK,\n \t \"tracer-min-branch-probability-feedback\",\n \t \"Stop forward growth if the probability of best edge is less than \\\n-this threshold (in percents). Used when profile feedback is available\",\n+this threshold (in percent). Used when profile feedback is available\",\n \t 80)\n DEFPARAM(TRACER_MIN_BRANCH_PROBABILITY,\n \t \"tracer-min-branch-probability\",\n \t \"Stop forward growth if the probability of best edge is less than \\\n-this threshold (in percents). Used when profile feedback is not available\",\n+this threshold (in percent). Used when profile feedback is not available\",\n \t 50)\n \n /* The maximum number of incoming edges to consider for crossjumping.  */\n@@ -280,7 +280,7 @@ DEFPARAM(PARAM_MAX_CROSSJUMP_EDGES,\n /* The maximum length of path considered in cse.  */\n DEFPARAM(PARAM_MAX_CSE_PATH_LENGTH,\n \t \"max-cse-path-length\",\n-\t \"The maximum length of path considered in cse.\",\n+\t \"The maximum length of path considered in cse\",\n \t 10)\n \n #ifdef ENABLE_GC_ALWAYS_COLLECT\n@@ -294,12 +294,12 @@ DEFPARAM(PARAM_MAX_CSE_PATH_LENGTH,\n DEFPARAM(GGC_MIN_EXPAND,\n \t \"ggc-min-expand\",\n \t \"Minimum heap expansion to trigger garbage collection, as \\\n-a percentage of the total size of the heap.\",\n+a percentage of the total size of the heap\",\n \t GGC_MIN_EXPAND_DEFAULT)\n \n DEFPARAM(GGC_MIN_HEAPSIZE,\n \t \"ggc-min-heapsize\",\n-\t \"Minimum heap size before we start collecting garbage, in kilobytes.\",\n+\t \"Minimum heap size before we start collecting garbage, in kilobytes\",\n \t GGC_MIN_HEAPSIZE_DEFAULT)\n \n #undef GGC_MIN_EXPAND_DEFAULT"}, {"sha": "3bf601113a9cb6eb710fba6ffe710f293585addd", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc980567a3bf9b714295e88392798dd347fa156/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2cc980567a3bf9b714295e88392798dd347fa156", "patch": "@@ -3591,18 +3591,6 @@ display_help (void)\n {\n   unsigned long i;\n \n-  for (i = LAST_PARAM; i--;)\n-    {\n-      const char *description = compiler_params[i].help;\n-      const int length = 21 - strlen (compiler_params[i].option);\n-\n-      if (description != NULL && *description != 0)\n-\tprintf (\"  --param %s=<value>%.*s%s\\n\",\n-\t\tcompiler_params[i].option,\n-\t\tlength > 0 ? length : 1, \"                     \",\n-\t\t_(description));\n-    }\n-\n   for (i = ARRAY_SIZE (debug_args); i--;)\n     {\n       if (debug_args[i].description != NULL)"}]}