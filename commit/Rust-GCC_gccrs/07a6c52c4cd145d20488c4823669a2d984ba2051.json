{"sha": "07a6c52c4cd145d20488c4823669a2d984ba2051", "node_id": "C_kwDOANBUbNoAKDA3YTZjNTJjNGNkMTQ1ZDIwNDg4YzQ4MjM2NjlhMmQ5ODRiYTIwNTE", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-02-01T23:00:10Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-02-02T00:20:06Z"}, "message": "cris: Reload using special-regs before general-regs\n\nOn code where reload has an effect (i.e. quite rarely, just enough to be\nnoticeable), this change gets code quality back to the situation prior\nto \"Remove CRIS v32 ACR artefacts\".  We had from IRA a pseudoregister\nmarked to be reloaded from a union of all allocatable registers (here:\nSPEC_GENNONACR_REGS) but where the register-class corresponding to the\nconstraint for the register-type alternative (here: GENERAL_REGS) was\n*not* a subset of that class: SPEC_GENNONACR_REGS (and GENNONACR_REGS)\nhad a one-register \"hole\" for the ACR register, a register present in\nGENERAL_REGS.\n\nCode in reload.cc:find_reloads adds 4 to the cost of a register-type\nalternative that is neither a subset of the preferred register class nor\nvice versa and thus reload thinks it can't use.  It would be preferable\nto look for a non-empty intersection of the two, and use that\nintersection for that alternative, something that can't be expressed\nbecause a register class can't be formed from a random register set.\n\nThe effect was here that the GENERAL_REGS to/from memory alternatives\n(\"r\") had their cost raised such that the SPECIAL_REGS alternatives\n(\"x\") looked better.  This happened to improve code quality just a\nlittle bit compared to GENERAL_REGS being chosen.\n\nAnyway, with the improved CRIS register-class topology, the\nsubset-checking code no longer has the GENERAL_REGS-demoting effect.\nTo get the same quality, we have to adjust the port such that\nSPECIAL_REGS are specifically preferred when possible and advisible,\ni.e. when there's at least two of those registers as for the CPU variant\nwith multiplication (which happens to be the variant maintained for\nperformance).\n\nFor the move-pattern, the obvious method may seem to simply \"curse\" the\nconstraints of some alternatives (by prepending one of the \"?!^$\"\ncharacters) but that method can't be used, because we want the effect to\nbe conditional on the CPU variant.  It'd also be a shame to split the\n\"*movsi_internal<setcc><setnz><setnzvc>\" into two CPU-variants (with\ndifferent cursing).  Iterators would help, but it still seems unwieldy.\nInstead, add copies of the GENERAL_REGS variants (to the SPECIAL_REGS\nalternatives) on the \"other\" side, and make use of the \"enabled\"\nattribute to activate just the desired order of alternatives.\n\ngcc:\n\n\t* config/cris/cris.cc (cris_preferred_reload_class): Reject\n\t\"eliminated\" registers and small-enough constants unless\n\treloaded into a class that is a subset of GENERAL_REGS.\n\t* config/cris/cris.md (attribute \"cpu_variant\"): New.\n\t(attribute \"enabled\"): Conditionalize on a matching attribute\n\tcpu_variant, if specified.\n\t(\"*movsi_internal<setcc><setnz><setnzvc>\"): For moves to and from\n\tmemory, add cpu-variant-enabled variants for \"r\" alternatives on\n\tthe far side of the \"x\" alternatives, preferring the \"x\" ones\n\tonly for variants where MOF is present (in addition to SRP).", "tree": {"sha": "738efbfcf64ffdc163f94675428c6ab008c46c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/738efbfcf64ffdc163f94675428c6ab008c46c7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07a6c52c4cd145d20488c4823669a2d984ba2051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a6c52c4cd145d20488c4823669a2d984ba2051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07a6c52c4cd145d20488c4823669a2d984ba2051", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a6c52c4cd145d20488c4823669a2d984ba2051/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7f14ef9b6b287d99b8240cdb43e8fe089ea9b3"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "f0017d630229313501ffc7db0bf7b5e6982fa81c", "filename": "gcc/config/cris/cris.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a6c52c4cd145d20488c4823669a2d984ba2051/gcc%2Fconfig%2Fcris%2Fcris.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a6c52c4cd145d20488c4823669a2d984ba2051/gcc%2Fconfig%2Fcris%2Fcris.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.cc?ref=07a6c52c4cd145d20488c4823669a2d984ba2051", "patch": "@@ -1661,7 +1661,7 @@ cris_reload_address_legitimized (rtx x,\n    a bug.  */\n \n static reg_class_t\n-cris_preferred_reload_class (rtx x ATTRIBUTE_UNUSED, reg_class_t rclass)\n+cris_preferred_reload_class (rtx x, reg_class_t rclass)\n {\n   if (rclass != MOF_REGS\n       && rclass != MOF_SRP_REGS\n@@ -1670,6 +1670,17 @@ cris_preferred_reload_class (rtx x ATTRIBUTE_UNUSED, reg_class_t rclass)\n       && rclass != SPECIAL_REGS)\n     return GENERAL_REGS;\n \n+  /* We can't make use of something that's not a general register when\n+     reloading an \"eliminated\" register (i.e. something that has turned into\n+     e.g. sp + const_int).  */\n+  if (GET_CODE (x) == PLUS && !reg_class_subset_p (rclass, GENERAL_REGS))\n+    return NO_REGS;\n+\n+  /* Avoid putting constants into a special register, where the instruction is\n+     shorter if loaded into a general register.  */\n+  if (satisfies_constraint_P (x) && !reg_class_subset_p (rclass, GENERAL_REGS))\n+    return NO_REGS;\n+\n   return rclass;\n }\n "}, {"sha": "dd7094163784ffc88f94eeb6541e8c23fe02f6f0", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a6c52c4cd145d20488c4823669a2d984ba2051/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a6c52c4cd145d20488c4823669a2d984ba2051/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=07a6c52c4cd145d20488c4823669a2d984ba2051", "patch": "@@ -153,9 +153,20 @@\n \t(not (match_test \"dead_or_set_regno_p (insn, CRIS_SRP_REGNUM)\")))\n    (nil) (nil)])\n \n+;; Enable choosing particular instructions.  The discriminator choice\n+;; \"v0\" stands for \"pre-v10\", for brevity.\n+(define_attr \"cpu_variant\" \"default,v0,v10\" (const_string \"default\"))\n+\n (define_attr \"enabled\" \"no,yes\"\n   (if_then_else\n-   (eq_attr \"cc_enabled\" \"normal\")\n+   (and\n+    (eq_attr \"cc_enabled\" \"normal\")\n+    (ior\n+     (eq_attr \"cpu_variant\" \"default\")\n+     (and (eq_attr \"cpu_variant\" \"v10\")\n+\t  (match_test \"TARGET_HAS_MUL_INSNS\"))\n+     (and (eq_attr \"cpu_variant\" \"v0\")\n+\t  (not (match_test \"TARGET_HAS_MUL_INSNS\")))))\n    (const_string \"yes\")\n    (const_string \"no\")))\n \f\n@@ -578,9 +589,9 @@\n (define_insn \"*movsi_internal<setcc><setnz><setnzvc>\"\n   [(set\n     (match_operand:SI 0 \"nonimmediate_operand\"\n-\t\t      \"=r,r, r,Q>,r,Q>,g,r,r,g,rQ>,x,  m,x\")\n+\t\t      \"=r,r, r,Q>,r,Q>,g,r,r,g,rQ>,x,  m,x, Q>,r,g\")\n     (match_operand:SI 1 \"general_operand\"\n-\t\t       \"r,Q>,M,M, I,r, M,n,g,r,x,  rQ>,x,gi\"))\n+\t\t       \"r,Q>,M,M, I,r, M,n,g,r,x,  rQ>,x,gi,r, g,r\"))\n    (clobber (reg:CC CRIS_CC0_REGNUM))]\n   ;; Avoid matching insns we know must be reloaded.  Without one\n   ;; operand being a (pseudo-)register, reload chooses\n@@ -597,6 +608,9 @@\n     case 5:\n     case 8:\n     case 9:\n+    case 14:\n+    case 15:\n+    case 16:\n       return \"move.d %1,%0\";\n \n     case 10:\n@@ -634,9 +648,10 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"slottable\" \"yes,yes,yes,yes,yes,yes,no,no,no,no,yes,yes,no,no\")\n+  [(set_attr \"cpu_variant\" \"*,*,*,*,*,v0,*,*,v0,v0,*,*,*,*,v10,v10,v10\")\n+   (set_attr \"slottable\" \"yes,yes,yes,yes,yes,yes,no,no,no,no,yes,yes,no,no,yes,no,no\")\n    (set_attr \"cc<cccc><ccnz><ccnzvc>\"\n-\t     \"*,*,none,none,*,none,none,*,*,none,none,none,none,none\")])\n+\t     \"*,*,none,none,*,none,none,*,*,none,none,none,none,none,none,*,none\")])\n \f\n ;; FIXME: See movsi.\n "}]}