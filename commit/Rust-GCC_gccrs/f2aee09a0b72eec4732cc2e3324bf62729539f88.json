{"sha": "f2aee09a0b72eec4732cc2e3324bf62729539f88", "node_id": "C_kwDOANBUbNoAKGYyYWVlMDlhMGI3MmVlYzQ3MzJjYzJlMzMyNGJmNjI3Mjk1MzlmODg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-11T08:34:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-11T08:34:05Z"}, "message": "Merge #1240 #1243\n\n1240: Change Artihmetic Operation to be a cast type operation r=philberty a=philberty\n\nArithmetic operations like this need a cast to support the range of integer\r\ntypes which are allow here.\r\n\r\nFixes #1234\r\n\n\n1243: Allow cast of integers to pointers r=philberty a=philberty\n\nThis adds the cast rules of integer types and integer inference variables\r\nto pointers. The code-generation needed to remove the bad assertion that\r\nall integer literals were always going to be of type integer. This also\r\nneeded a tweak to a bad port from the cp/constexpr.cc code which assumed\r\nthat all integer_cst of pointer types would be a zero pointer which was\r\nused to detect cases of bad method pointers in CPP which we does not apply\r\nhere.\r\n\r\nsee gcc/cp/constexpr.cc:6564-6488\r\n\r\nFixes #1226\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "f836b3d44d860aa64049dda2493ca47c21232e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f836b3d44d860aa64049dda2493ca47c21232e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2aee09a0b72eec4732cc2e3324bf62729539f88", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJie3T9CRBK7hj4Ov3rIwAAPk0IAF8QrjFAIGFmRj7jT6J54SA9\nJmqU9Cc7lwZKpUN//hAClxonRY0DOwgmZnQU71rIIJ8oY5WM+4zczmzK1K1kTiiO\nbYsNXYverkJgVg4XNDHpO1/8FyKCCY6J7s4VK9krZt6O66Q68JSvbOXThrgVvV8s\n58Mtxn3uEE+conq4eT3c6DmcJysuAQeYQpwk+QlKj9DfiN23yzrSgIna+yIrDjo+\nsu/QM4TWUKpHdAO4YKjqY9kOjRc6Q0EbDh5WntyvkfsNy+U6l07pFK9G+iVmZouP\no45OHoA427Or/rOKjVTKRme0DKcFG/9NgIgPPeyJBqFTfSfjYCmnUaMxJfuI0Ac=\n=QFPn\n-----END PGP SIGNATURE-----\n", "payload": "tree f836b3d44d860aa64049dda2493ca47c21232e94\nparent c1ff79996acfba45a50f181f9d3be1625cdef8f6\nparent d2dcac6a0bfe6a1ae66b584d231b74bd38fe48fc\nparent 2e65c14bef940fa2f7dff4f407178af21488b76e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1652258045 +0000\ncommitter GitHub <noreply@github.com> 1652258045 +0000\n\nMerge #1240 #1243\n\n1240: Change Artihmetic Operation to be a cast type operation r=philberty a=philberty\n\nArithmetic operations like this need a cast to support the range of integer\r\ntypes which are allow here.\r\n\r\nFixes #1234\r\n\n\n1243: Allow cast of integers to pointers r=philberty a=philberty\n\nThis adds the cast rules of integer types and integer inference variables\r\nto pointers. The code-generation needed to remove the bad assertion that\r\nall integer literals were always going to be of type integer. This also\r\nneeded a tweak to a bad port from the cp/constexpr.cc code which assumed\r\nthat all integer_cst of pointer types would be a zero pointer which was\r\nused to detect cases of bad method pointers in CPP which we does not apply\r\nhere.\r\n\r\nsee gcc/cp/constexpr.cc:6564-6488\r\n\r\nFixes #1226\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2aee09a0b72eec4732cc2e3324bf62729539f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2aee09a0b72eec4732cc2e3324bf62729539f88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2aee09a0b72eec4732cc2e3324bf62729539f88/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1ff79996acfba45a50f181f9d3be1625cdef8f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ff79996acfba45a50f181f9d3be1625cdef8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ff79996acfba45a50f181f9d3be1625cdef8f6"}, {"sha": "d2dcac6a0bfe6a1ae66b584d231b74bd38fe48fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2dcac6a0bfe6a1ae66b584d231b74bd38fe48fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2dcac6a0bfe6a1ae66b584d231b74bd38fe48fc"}, {"sha": "2e65c14bef940fa2f7dff4f407178af21488b76e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e65c14bef940fa2f7dff4f407178af21488b76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e65c14bef940fa2f7dff4f407178af21488b76e"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "0307df10f1f435821ed03c6f642a9f84bccbcf25", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=f2aee09a0b72eec4732cc2e3324bf62729539f88", "patch": "@@ -903,7 +903,6 @@ CompileExpr::compile_integer_literal (const HIR::LiteralExpr &expr,\n   const auto literal_value = expr.get_literal ();\n \n   tree type = TyTyResolveCompile::compile (ctx, tyty);\n-  rust_assert (TREE_CODE (type) == INTEGER_TYPE);\n \n   mpz_t ival;\n   if (mpz_init_set_str (ival, literal_value.as_string ().c_str (), 10) != 0)"}, {"sha": "aee41e43c0a2f35dd0b21f0bb4e304c5d3158420", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=f2aee09a0b72eec4732cc2e3324bf62729539f88", "patch": "@@ -59,17 +59,7 @@ ConstCtx::constexpr_expression (tree t)\n     {\n       if (TREE_OVERFLOW (t))\n \t{\n-\t  rust_error_at (Location (loc), \"overflow in constant expression\");\n-\t  return t;\n-\t}\n-\n-      if (TREE_CODE (t) == INTEGER_CST && TYPE_PTR_P (TREE_TYPE (t))\n-\t  && !integer_zerop (t))\n-\t{\n-\t  // FIXME check does this actually work to print out tree types\n-\t  rust_error_at (Location (loc),\n-\t\t\t \"value %qE of type %qT is not a constant expression\",\n-\t\t\t t, TREE_TYPE (t));\n+\t  error_at (loc, \"overflow in constant expression\");\n \t  return t;\n \t}\n "}, {"sha": "b20a048865df22f3f9388a42d9e44d63a4f601c3", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=f2aee09a0b72eec4732cc2e3324bf62729539f88", "patch": "@@ -555,7 +555,17 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    infered = lhs->unify (rhs);\n+    switch (expr.get_expr_type ())\n+      {\n+      case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n+      case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+\tinfered = rhs->cast (lhs);\n+\tbreak;\n+\n+      default:\n+\tinfered = lhs->unify (rhs);\n+\tbreak;\n+      }\n   }\n \n   void visit (HIR::ComparisonExpr &expr) override"}, {"sha": "5ca68d07aa2d8f215f1a9e448598e39a7b589425", "filename": "gcc/rust/typecheck/rust-tyty-cast.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h?ref=f2aee09a0b72eec4732cc2e3324bf62729539f88", "patch": "@@ -588,8 +588,11 @@ class InferCastRules : public BaseCastRules\n \n   void visit (PointerType &type) override\n   {\n-    bool is_valid\n-      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    bool is_general_infer_var\n+      = base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL;\n+    bool is_integral_infer_var\n+      = base->get_infer_kind () == TyTy::InferType::InferTypeKind::INTEGRAL;\n+    bool is_valid = is_general_infer_var || is_integral_infer_var;\n     if (is_valid)\n       {\n \tresolved = type.clone ();\n@@ -939,6 +942,8 @@ class IntCastRules : public BaseCastRules\n \n   void visit (ISizeType &type) override { resolved = type.clone (); }\n \n+  void visit (PointerType &type) override { resolved = type.clone (); }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -975,6 +980,8 @@ class UintCastRules : public BaseCastRules\n \n   void visit (ISizeType &type) override { resolved = type.clone (); }\n \n+  void visit (PointerType &type) override { resolved = type.clone (); }\n+\n   void visit (CharType &type) override\n   {\n     // error[E0604]: only `u8` can be cast as `char`, not `i32`"}, {"sha": "f5f9e5ff08d329a6e4c92a5d5273d7df3446835e", "filename": "gcc/testsuite/rust/compile/issue-1226.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1226.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1226.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1226.rs?ref=f2aee09a0b72eec4732cc2e3324bf62729539f88", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options \"-w\" }\n+const TEST: *mut u8 = 123 as *mut u8;\n+\n+fn test() {\n+    let a = TEST;\n+}"}, {"sha": "c6d5932c0041ea37c66655557a1c956e22d5ec5f", "filename": "gcc/testsuite/rust/compile/issue-1234.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1234.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2aee09a0b72eec4732cc2e3324bf62729539f88/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1234.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1234.rs?ref=f2aee09a0b72eec4732cc2e3324bf62729539f88", "patch": "@@ -0,0 +1,4 @@\n+fn foo() -> u8 {\n+    // { dg-warning \"function is never used\" \"\" { target *-*-* } .-1 }\n+    1u8 << 2u32\n+}"}]}