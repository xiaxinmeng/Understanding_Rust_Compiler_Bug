{"sha": "acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf", "node_id": "C_kwDOANBUbNoAKGFjYmI1ZWYwNmVlOTc4NDllY2Q1NDEyYWI1NmMxZGZmMGYwZDJmY2Y", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-10-11T13:50:11Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-18T20:15:24Z"}, "message": "RISC-V: Optimize branches testing a bit-range or a shifted immediate\n\ngcc/ChangeLog:\n\n\t* config/riscv/predicates.md (shifted_const_arith_operand): New predicate.\n\t(uimm_extra_bit_operand): New predicate.\n\t* config/riscv/riscv.md (*branch<ANYI:mode>_shiftedarith_equals_zero):\n\tNew pattern.\n\t(*branch<ANYI:mode>_shiftedmask_equals_zero): New pattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/branch-1.c: New test.", "tree": {"sha": "58f171c628c42a4bea78af23ae988faabe0bf90b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58f171c628c42a4bea78af23ae988faabe0bf90b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23d9f62c50d935462ecda5516746037a474c25cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d9f62c50d935462ecda5516746037a474c25cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d9f62c50d935462ecda5516746037a474c25cd"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "d5c097e259f937a0b8231bc3a0415b752e4e11c1", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf", "patch": "@@ -290,3 +290,26 @@\n (define_predicate \"const_nottwobits_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"popcount_hwi (~UINTVAL (op)) == 2\")))\n+\n+;; A CONST_INT operand that consists of a single run of 32 consecutive\n+;; set bits.\n+(define_predicate \"consecutive_bits32_operand\"\n+  (and (match_operand 0 \"consecutive_bits_operand\")\n+       (match_test \"popcount_hwi (UINTVAL (op)) == 32\")))\n+\n+;; A CONST_INT operand that, if shifted down to start with its least\n+;; significant non-zero bit, is a SMALL_OPERAND (suitable as an\n+;; immediate to logical and arithmetic instructions).\n+(define_predicate \"shifted_const_arith_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ctz_hwi (INTVAL (op)) > 0\")\n+       (match_test \"SMALL_OPERAND (INTVAL (op) >> ctz_hwi (INTVAL (op)))\")))\n+\n+;; A CONST_INT operand that fits into the unsigned half of a\n+;; signed-immediate after the top bit has been cleared.\n+(define_predicate \"uimm_extra_bit_operand\"\n+  (and (match_code \"const_int\")\n+       (not (and (match_test \"SMALL_OPERAND (INTVAL (op))\")\n+\t\t (match_test \"INTVAL (op) > 0\")))\n+       (ior (match_test \"SMALL_OPERAND (UINTVAL (op) & ~(HOST_WIDE_INT_1U << floor_log2 (UINTVAL (op))))\")\n+\t    (match_test \"popcount_hwi (UINTVAL (op)) == 2\"))))"}, {"sha": "b7bb338ac043b6359740a89b6d3e805e220f30fa", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf", "patch": "@@ -2216,6 +2216,57 @@\n \n ;; Conditional branches\n \n+(define_insn_and_split \"*branch<ANYI:mode>_shiftedarith_equals_zero\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 1 \"equality_operator\"\n+\t\t       [(and:ANYI (match_operand:ANYI 2 \"register_operand\" \"r\")\n+\t\t\t\t  (match_operand 3 \"shifted_const_arith_operand\" \"i\"))\n+\t\t\t(const_int 0)])\n+\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (pc)))\n+   (clobber (match_scratch:ANYI 4 \"=&r\"))]\n+  \"INTVAL (operands[3]) >= 0 || !partial_subreg_p (operands[2])\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4) (lshiftrt:ANYI (match_dup 2) (match_dup 6)))\n+   (set (match_dup 4) (and:ANYI (match_dup 4) (match_dup 7)))\n+   (set (pc) (if_then_else (match_op_dup 1 [(match_dup 4) (const_int 0)])\n+\t\t\t   (label_ref (match_dup 0)) (pc)))]\n+{\n+\tHOST_WIDE_INT mask = INTVAL (operands[3]);\n+\tint trailing = ctz_hwi (mask);\n+\n+\toperands[6] = GEN_INT (trailing);\n+\toperands[7] = GEN_INT (mask >> trailing);\n+})\n+\n+(define_insn_and_split \"*branch<ANYI:mode>_shiftedmask_equals_zero\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 1 \"equality_operator\"\n+\t\t       [(and:ANYI (match_operand:ANYI 2 \"register_operand\" \"r\")\n+\t\t\t\t  (match_operand 3 \"consecutive_bits_operand\" \"i\"))\n+\t\t\t(const_int 0)])\n+\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (pc)))\n+   (clobber (match_scratch:X 4 \"=&r\"))]\n+  \"(INTVAL (operands[3]) >= 0 || !partial_subreg_p (operands[2]))\n+    && popcount_hwi (INTVAL (operands[3])) > 1\n+    && !SMALL_OPERAND (INTVAL (operands[3]))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4) (ashift:X (subreg:X (match_dup 2) 0) (match_dup 6)))\n+   (set (match_dup 4) (lshiftrt:X (match_dup 4) (match_dup 7)))\n+   (set (pc) (if_then_else (match_op_dup 1 [(match_dup 4) (const_int 0)])\n+\t\t\t   (label_ref (match_dup 0)) (pc)))]\n+{\n+\tunsigned HOST_WIDE_INT mask = INTVAL (operands[3]);\n+\tint leading  = clz_hwi (mask);\n+\tint trailing = ctz_hwi (mask);\n+\n+\toperands[6] = GEN_INT (leading);\n+\toperands[7] = GEN_INT (leading + trailing);\n+})\n+\n (define_insn \"*branch<mode>\"\n   [(set (pc)\n \t(if_then_else"}, {"sha": "b4a3a946379ade83d9207cb1a2975194adafdf96", "filename": "gcc/testsuite/gcc.target/riscv/branch-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fbranch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fbranch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fbranch-1.c?ref=acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" \"-O1\" } } */\n+\n+void g();\n+\n+void f(long long a) \n+{\n+  if (a & 0xff00)\n+    g();\n+}\n+\n+void f2(long long a) \n+{\n+  if (a & (-4ull << 3))\n+    g();\n+}\n+\n+void f3(long long a) \n+{\n+  if (a & 0xffff00)\n+    g();\n+}\n+\n+void f4(long long a)\n+{\n+  if (a & 0x7ff800)\n+    g();\n+}\n+\n+/* { dg-final { scan-assembler-times \"slli\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"srli\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"andi\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tli\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"addi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"and\\t\" } } */\n+"}]}