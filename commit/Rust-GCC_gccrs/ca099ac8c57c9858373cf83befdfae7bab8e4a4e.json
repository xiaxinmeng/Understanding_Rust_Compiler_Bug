{"sha": "ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwOTlhYzhjNTdjOTg1ODM3M2NmODNiZWZkZmFlN2JhYjhlNGE0ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-02-24T07:43:23Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-02-24T07:43:23Z"}, "message": "re PR c++/5333 (ICE on nested template classes using other nested template classes)\n\n\tPR c++/5333\n\t* cp-tree.h (CLASSTYPE_PRIMARY_TEMPLATE): New macro.\n\t* parser.c (cp_parser_diagnose_invalid_type_name): Use it.\n\t* pt.c (instantiate_class_template): Don't try to instantiate\n\tdependent types.\n\t(resolve_typename_type): Use CLASSTYPE_PRIMARY_TEMPLATE.\n\n\tPR c++/5333\n\t* g++.dg/parse/fused-params1.C: Adjust error messages.\n\t* g++.dg/template/nested3.C: New test.\n\nFrom-SVN: r63354", "tree": {"sha": "85612b52e4377cb1291b4fccdef603a8f787b9cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85612b52e4377cb1291b4fccdef603a8f787b9cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/comments", "author": null, "committer": null, "parents": [{"sha": "463f02cd037fbf3af66cdbfff526fcb48d2ba746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463f02cd037fbf3af66cdbfff526fcb48d2ba746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/463f02cd037fbf3af66cdbfff526fcb48d2ba746"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "20e1f22aabe1b1ed0b96a377bee7d65d37ef362c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "patch": "@@ -1,3 +1,12 @@\n+2003-02-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/5333\n+\t* cp-tree.h (CLASSTYPE_PRIMARY_TEMPLATE): New macro.\n+\t* parser.c (cp_parser_diagnose_invalid_type_name): Use it.\n+\t* pt.c (instantiate_class_template): Don't try to instantiate\n+\tdependent types.\n+\t(resolve_typename_type): Use CLASSTYPE_PRIMARY_TEMPLATE.\n+\t\n 2003-02-21  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9749"}, {"sha": "919e5291f1ab6c21e7058ee217e21d7d2573c3d0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "patch": "@@ -2316,6 +2316,12 @@ struct lang_decl GTY(())\n #define ENUM_TI_ARGS(NODE)\t\t\t\\\n   TI_ARGS (ENUM_TEMPLATE_INFO (NODE))\n \n+/* For a template instantiation TYPE, returns the TYPE corresponding\n+   to the primary template.  */\n+#define CLASSTYPE_PRIMARY_TEMPLATE_TYPE(TYPE)\t\t\t\t\\\n+  TREE_TYPE (DECL_TEMPLATE_RESULT (DECL_PRIMARY_TEMPLATE\t\t\\\n+\t\t\t\t   (CLASSTYPE_TI_TEMPLATE ((TYPE)))))\n+\n /* Like DECL_TI_TEMPLATE, but for an ENUMERAL_, RECORD_, or UNION_TYPE.  */\n #define TYPE_TI_TEMPLATE(NODE)\t\t\t\\\n   (TI_TEMPLATE (TYPE_TEMPLATE_INFO (NODE)))"}, {"sha": "0688cdcc86cbe1187595d0f3f3973719fab36de3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "patch": "@@ -1954,10 +1954,7 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser)\n \t\t     template (which will have an empty TYPE_FIELDs),\n \t\t     to the main version.  */\n \t\t  if (CLASSTYPE_USE_TEMPLATE (base_type))\n-\t\t    base_type = (TREE_TYPE\n-\t\t\t\t (DECL_TEMPLATE_RESULT \n-\t\t\t\t  (DECL_PRIMARY_TEMPLATE\n-\t\t\t\t   (CLASSTYPE_TI_TEMPLATE (base_type)))));\n+\t\t    base_type = CLASSTYPE_PRIMARY_TEMPLATE_TYPE (base_type);\n \t\t  for (field = TYPE_FIELDS (base_type);\n \t\t       field;\n \t\t       field = TREE_CHAIN (field))\n@@ -4526,6 +4523,7 @@ cp_parser_unary_operator (cp_token* token)\n \n /* Parse a new-expression.\n \n+   new-expression:\n      :: [opt] new new-placement [opt] new-type-id new-initializer [opt]\n      :: [opt] new new-placement [opt] ( type-id ) new-initializer [opt]\n "}, {"sha": "36ae04d14d9e95ad0673d9102466c65359b691f0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "patch": "@@ -5151,7 +5151,9 @@ instantiate_class_template (type)\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  if (TYPE_BEING_DEFINED (type) || COMPLETE_TYPE_P (type))\n+  if (TYPE_BEING_DEFINED (type) \n+      || COMPLETE_TYPE_P (type)\n+      || dependent_type_p (type))\n     return type;\n \n   /* Figure out which template is being instantiated.  */\n@@ -11526,6 +11528,10 @@ resolve_typename_type (tree type, bool only_current_p)\n      to look inside it.  */\n   if (only_current_p && !currently_open_class (scope))\n     return error_mark_node;\n+  /* If SCOPE is a partial instantiation, it will not have a valid\n+     TYPE_FIELDS list, so use the original template.  */\n+  if (CLASSTYPE_USE_TEMPLATE (scope))\n+    scope = CLASSTYPE_PRIMARY_TEMPLATE_TYPE (scope);\n   /* Enter the SCOPE so that name lookup will be resolved as if we\n      were in the class definition.  In particular, SCOPE will no\n      longer be considered a dependent type.  */"}, {"sha": "3dad6fde31bf310ff2ca93db98ceb896a502ec20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "patch": "@@ -1,3 +1,9 @@\n+2003-02-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/5333\n+\t* g++.dg/parse/fused-params1.C: Adjust error messages.\n+\t* g++.dg/template/nested3.C: New test.\n+\t\n 2003-02-24  Alan Modra  <amodra@bigpond.net.au>\n \n \t* g++.dg/abi/param1.C: New test."}, {"sha": "adb47a0522ae9f248678a2fc60a9ca208a373361", "filename": "gcc/testsuite/g++.dg/parse/fused-params1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffused-params1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffused-params1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffused-params1.C?ref=ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "patch": "@@ -3,9 +3,9 @@\n // { dg-do compile }\n \n template <int N,typename T> struct A\n-{\n+{ //  { dg-error \"\" } \n     typedef T X;\n-    template <int M> void foo (const A<M,X>&); // { dg-error \"candidate\" }\n+    template <int M> void foo (const A<M,X>&);\n };\n \n template <int N,int M,typename T>"}, {"sha": "1c45d645290b953d4745127b8b162be1cee4f94f", "filename": "gcc/testsuite/g++.dg/template/nested3.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca099ac8c57c9858373cf83befdfae7bab8e4a4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C?ref=ca099ac8c57c9858373cf83befdfae7bab8e4a4e", "patch": "@@ -0,0 +1,28 @@\n+template <class T1, class T2>\n+class A {\n+  template <class S>\n+  class SubA {\n+    int _k;\n+  };\n+  T1 _t1;\n+  T2 _t2;\n+};\n+\n+template <class U>\n+class B {\n+  class SubB1 {\n+    B _i;\n+  };\n+\n+  class SubB2 {\n+    int _j;\n+  };\n+  A<U,SubB1>::SubA<SubB2> _a; // { dg-error \"\" }\n+};\n+\n+\n+int main() {\n+  B<char> objB;\n+\n+  return 0;\n+}"}]}