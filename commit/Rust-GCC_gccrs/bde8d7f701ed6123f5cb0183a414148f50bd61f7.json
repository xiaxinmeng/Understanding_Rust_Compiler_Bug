{"sha": "bde8d7f701ed6123f5cb0183a414148f50bd61f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRlOGQ3ZjcwMWVkNjEyM2Y1Y2IwMTgzYTQxNDE0OGY1MGJkNjFmNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-02-17T01:24:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-02-17T01:24:37Z"}, "message": "re PR libstdc++/47773 (Versatile string lacks a default hash function)\n\n2011-02-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/47773\n\t* include/ext/vstring.h (hash<__gnu_cxx::__vstring>,\n\thash<__gnu_cxx::__wvstring>, hash<__gnu_cxx::__u16vstring>,\n\thash<__gnu_cxx::__u32vstring>): Add.\n\t* testsuite/ext/vstring/hash/char/1.cc: New.\n\t* testsuite/ext/vstring/hash/wchar_t/1.cc: Likewise.\n\nFrom-SVN: r170235", "tree": {"sha": "6de2ec713ac4218c2b5da837f86a5c1ff8bae243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6de2ec713ac4218c2b5da837f86a5c1ff8bae243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bde8d7f701ed6123f5cb0183a414148f50bd61f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde8d7f701ed6123f5cb0183a414148f50bd61f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde8d7f701ed6123f5cb0183a414148f50bd61f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde8d7f701ed6123f5cb0183a414148f50bd61f7/comments", "author": null, "committer": null, "parents": [{"sha": "a3daf81795ff37e2f8882e9cae302710ddbb3ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3daf81795ff37e2f8882e9cae302710ddbb3ad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3daf81795ff37e2f8882e9cae302710ddbb3ad1"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "a72c1bfe34056e79a76ad9cefc31928446f76da0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde8d7f701ed6123f5cb0183a414148f50bd61f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde8d7f701ed6123f5cb0183a414148f50bd61f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bde8d7f701ed6123f5cb0183a414148f50bd61f7", "patch": "@@ -1,3 +1,12 @@\n+2011-02-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/47773\n+\t* include/ext/vstring.h (hash<__gnu_cxx::__vstring>,\n+\thash<__gnu_cxx::__wvstring>, hash<__gnu_cxx::__u16vstring>,\n+\thash<__gnu_cxx::__u32vstring>): Add.\n+\t* testsuite/ext/vstring/hash/char/1.cc: New.\n+\t* testsuite/ext/vstring/hash/wchar_t/1.cc: Likewise.\n+\n 2011-02-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/regex.h (match_results::format): Use char_traits."}, {"sha": "6e43e2b08186042e41e81911d04b8dd7de598020", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde8d7f701ed6123f5cb0183a414148f50bd61f7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde8d7f701ed6123f5cb0183a414148f50bd61f7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=bde8d7f701ed6123f5cb0183a414148f50bd61f7", "patch": "@@ -2731,6 +2731,66 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\n+#include <bits/functional_hash.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /// std::hash specialization for __vstring.\n+  template<>\n+    struct hash<__gnu_cxx::__vstring>\n+    : public __hash_base<size_t, __gnu_cxx::__vstring>\n+    {\n+      size_t\n+      operator()(const __gnu_cxx::__vstring& __s) const\n+      { return std::_Hash_impl::hash(__s.data(), __s.length()); }\n+    };\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  /// std::hash specialization for __wvstring.\n+  template<>\n+    struct hash<__gnu_cxx::__wvstring>\n+    : public __hash_base<size_t, __gnu_cxx::__wvstring>\n+    {\n+      size_t\n+      operator()(const __gnu_cxx::__wvstring& __s) const\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(wchar_t)); }\n+    };\n+#endif\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  /// std::hash specialization for __u16vstring.\n+  template<>\n+    struct hash<__gnu_cxx::__u16vstring>\n+    : public __hash_base<size_t, __gnu_cxx::__u16vstring>\n+    {\n+      size_t\n+      operator()(const __gnu_cxx::__u16vstring& __s) const\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(char16_t)); }\n+    };\n+\n+  /// std::hash specialization for __u32vstring.\n+  template<>\n+    struct hash<__gnu_cxx::__u32vstring>\n+    : public __hash_base<size_t, __gnu_cxx::__u32vstring>\n+    {\n+      size_t\n+      operator()(const __gnu_cxx::__u32vstring& __s) const\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(char32_t)); }\n+    };\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#endif /* __GXX_EXPERIMENTAL_CXX0X__ */\n+\n #include \"vstring.tcc\" \n \n #endif /* _VSTRING_H */"}, {"sha": "52140fc83db986621c3483b6ade0b7ce540070c7", "filename": "libstdc++-v3/testsuite/ext/vstring/hash/char/1.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde8d7f701ed6123f5cb0183a414148f50bd61f7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fhash%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde8d7f701ed6123f5cb0183a414148f50bd61f7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fhash%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fhash%2Fchar%2F1.cc?ref=bde8d7f701ed6123f5cb0183a414148f50bd61f7", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/vstring.h>\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/47773\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef __gnu_cxx::__vstring vstring_t;\n+  typedef std::unordered_map<vstring_t, int> map_t;\n+\n+  map_t mymap;\n+\n+  mymap.insert(std::make_pair(\"hello\", 10));\n+  mymap.insert(std::make_pair(\"hi\", 20));\n+\n+  VERIFY( mymap.size() == 2 );\n+\n+  map_t::const_iterator imap = mymap.begin();\n+ \n+  VERIFY( vstring_t(imap->first.c_str()) == \"hi\" );\n+  VERIFY( imap->second == 20 );\n+\n+  ++imap;\n+\n+  VERIFY( vstring_t(imap->first.c_str()) == \"hello\" );\n+  VERIFY( imap->second == 10 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a5339d1d758c05bca3e728c951bfe2ec5c922c17", "filename": "libstdc++-v3/testsuite/ext/vstring/hash/wchar_t/1.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde8d7f701ed6123f5cb0183a414148f50bd61f7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fhash%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde8d7f701ed6123f5cb0183a414148f50bd61f7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fhash%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fhash%2Fwchar_t%2F1.cc?ref=bde8d7f701ed6123f5cb0183a414148f50bd61f7", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/vstring.h>\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/47773\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef __gnu_cxx::__wvstring vstring_t;\n+  typedef std::unordered_map<vstring_t, int> map_t;\n+\n+  map_t mymap;\n+\n+  mymap.insert(std::make_pair(L\"hello\", 10));\n+  mymap.insert(std::make_pair(L\"hi\", 20));\n+\n+  VERIFY( mymap.size() == 2 );\n+\n+  map_t::const_iterator imap = mymap.begin();\n+ \n+  VERIFY( vstring_t(imap->first.c_str()) == L\"hi\" );\n+  VERIFY( imap->second == 20 );\n+\n+  ++imap;\n+\n+  VERIFY( vstring_t(imap->first.c_str()) == L\"hello\" );\n+  VERIFY( imap->second == 10 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}