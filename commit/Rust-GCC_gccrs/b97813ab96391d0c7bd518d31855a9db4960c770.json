{"sha": "b97813ab96391d0c7bd518d31855a9db4960c770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3ODEzYWI5NjM5MWQwYzdiZDUxOGQzMTg1NWE5ZGI0OTYwYzc3MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-02-28T11:46:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-09T08:09:03Z"}, "message": "[Ada] Propagate DIC, Invariant and Predicate attributes to views\n\n2020-06-09  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb (Apply_Predicate_Check): Extend trick used for\n\taggregates to qualified aggregates and object declarations\n\t* einfo.ads (Has_Own_DIC): Mention the underlying full view.\n\t(Has_Own_Invariants): Likewise.\n\t(Has_Predicates): Likewise.\n\t* exp_util.adb (Build_DIC_Procedure_Declaration): Do not deal\n\twith base types explicitly but with underlying full views.\n\t(Build_Invariant_Procedure_Declaration): Likewise.\n\t* sem_ch13.adb (Build_Predicate_Functions): Do not deal with\n\tthe full view manually but call Propagate_Predicate_Attributes\n\tto propagate attributes to views.\n\t(Build_Predicate_Function_Declaration): Likewise.\n\t* sem_ch3.adb (Build_Assertion_Bodies_For_Type): Build bodies\n\tfor private full views with an underlying full view.\n\t(Build_Derived_Private_Type): Small comment tweak.\n\t(Complete_Private_Subtype): Call Propagate_Predicate_Attributes.\n\t(Process_Full_View): Do not deal with base types explicitly for\n\tDIC and Invariant attributes.  Deal with underlying full views\n\tfor them.  Call Propagate_Predicate_Attributes and deal with\n\tunderlying full views for them.\n\t* sem_ch7.adb (Preserve_Full_Attributes): Do not cross propagate\n\tDIC and Invariant attributes between full type and its base type.\n\tPropagate Predicate attributes from the full to the private view.\n\t* sem_ch9.adb (Analyze_Protected_Type_Declaration): Likewise.\n\t(Analyze_Task_Type_Declaration): Likewise.\n\t* sem_util.ads (Get_Views): Remove Full_Base parameter and add\n\tUFull_Typ parameter.\n\t(Propagate_Predicate_Attributes): New procedure.\n\t* sem_util.adb (Get_Views): Remove Full_Base parameter and add\n\tUFull_Typ parameter.  Retrieve the Corresponding_Record_Type\n\tfrom the underlying full view, if any.\n\t(Propagate_DIC_Attributes): Remove useless tests.\n\t(Propagate_Invariant_Attributes): Likewise.\n\t(Propagate_Predicate_Attributes): New procedure.", "tree": {"sha": "44f6a96e02e628cd342219f823215641b3e2fe36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44f6a96e02e628cd342219f823215641b3e2fe36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b97813ab96391d0c7bd518d31855a9db4960c770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97813ab96391d0c7bd518d31855a9db4960c770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97813ab96391d0c7bd518d31855a9db4960c770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97813ab96391d0c7bd518d31855a9db4960c770/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf2480e2fbf29772f8acca9d184f18dbfb6d00bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf2480e2fbf29772f8acca9d184f18dbfb6d00bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf2480e2fbf29772f8acca9d184f18dbfb6d00bc"}], "stats": {"total": 350, "additions": 230, "deletions": 120}, "files": [{"sha": "ae62a9d6aaec5e4082b4f20af59c7d844a3388e5", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=b97813ab96391d0c7bd518d31855a9db4960c770", "patch": "@@ -2711,7 +2711,8 @@ package body Checks is\n       Typ : Entity_Id;\n       Fun : Entity_Id := Empty)\n    is\n-      S : Entity_Id;\n+      Par : Node_Id;\n+      S   : Entity_Id;\n \n    begin\n       if Predicate_Checks_Suppressed (Empty) then\n@@ -2807,6 +2808,11 @@ package body Checks is\n                return;\n             end if;\n \n+            Par := Parent (N);\n+            if Nkind (Par) = N_Qualified_Expression then\n+               Par := Parent (Par);\n+            end if;\n+\n             --  For an entity of the type, generate a call to the predicate\n             --  function, unless its type is an actual subtype, which is not\n             --  visible outside of the enclosing subprogram.\n@@ -2818,24 +2824,36 @@ package body Checks is\n                  Make_Predicate_Check\n                    (Typ, New_Occurrence_Of (Entity (N), Sloc (N))));\n \n-            --  If the expression is not an entity it may have side effects,\n-            --  and the following call will create an object declaration for\n-            --  it. We disable checks during its analysis, to prevent an\n-            --  infinite recursion.\n-\n-            --  If the prefix is an aggregate in an assignment, apply the\n-            --  check to the LHS after assignment, rather than create a\n+            --  If the expression is an aggregate in an assignment, apply the\n+            --  check to the LHS after the assignment, rather than create a\n             --  redundant temporary. This is only necessary in rare cases\n             --  of array types (including strings) initialized with an\n             --  aggregate with an \"others\" clause, either coming from source\n             --  or generated by an Initialize_Scalars pragma.\n \n-            elsif Nkind (N) = N_Aggregate\n-              and then Nkind (Parent (N)) = N_Assignment_Statement\n+            elsif Nkind_In (N, N_Aggregate, N_Extension_Aggregate)\n+              and then Nkind (Par) = N_Assignment_Statement\n             then\n-               Insert_Action_After (Parent (N),\n+               Insert_Action_After (Par,\n                  Make_Predicate_Check\n-                   (Typ, Duplicate_Subexpr (Name (Parent (N)))));\n+                   (Typ, Duplicate_Subexpr (Name (Par))));\n+\n+            --  Similarly, if the expression is an aggregate in an object\n+            --  declaration, apply it to the object after the declaration.\n+            --  This is only necessary in rare cases of tagged extensions\n+            --  initialized with an aggregate with an \"others => <>\" clause.\n+\n+            elsif Nkind_In (N, N_Aggregate, N_Extension_Aggregate)\n+              and then Nkind (Par) = N_Object_Declaration\n+            then\n+               Insert_Action_After (Par,\n+                 Make_Predicate_Check (Typ,\n+                   New_Occurrence_Of (Defining_Identifier (Par), Sloc (N))));\n+\n+            --  If the expression is not an entity it may have side effects,\n+            --  and the following call will create an object declaration for\n+            --  it. We disable checks during its analysis, to prevent an\n+            --  infinite recursion.\n \n             else\n                Insert_Action (N,"}, {"sha": "97d1d64454681ca37bb4cc58f6ffdcb7e50566c9", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=b97813ab96391d0c7bd518d31855a9db4960c770", "patch": "@@ -1848,12 +1848,16 @@ package Einfo is\n \n --    Has_Own_DIC (Flag3) [base type only]\n --       Defined in all type entities. Set for a private type and its full view\n---       when the type is subject to pragma Default_Initial_Condition.\n+--       (and its underlying full view, if the full view is itsef private) when\n+--       the type is subject to pragma Default_Initial_Condition.\n \n --    Has_Own_Invariants (Flag232) [base type only]\n --       Defined in all type entities. Set on any type that defines at least\n---       one invariant of its own. The flag is also set on the full view of a\n---       private type for completeness.\n+--       one invariant of its own.\n+\n+--       Note: this flag is set on both partial and full view of types to which\n+--       an Invariant pragma or aspect applies, and on the underlying full view\n+--       if the full view is private.\n \n --    Has_Partial_Visible_Refinement (Flag296)\n --       Defined in E_Abstract_State entities. Set when a state has at least\n@@ -1973,7 +1977,8 @@ package Einfo is\n --       Predicate aspect from its parent or progenitor types.\n --\n --       Note: this flag is set on both partial and full view of types to which\n---       a Predicate pragma or aspect applies.\n+--       a Predicate pragma or aspect applies, and on the underlying full view\n+--       if the full view is private.\n \n --    Has_Primitive_Operations (Flag120) [base type only]\n --       Defined in all type entities. Set if at least one primitive operation"}, {"sha": "87abe9a683054452a3881a86beb07b8d36e8d7c2", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=b97813ab96391d0c7bd518d31855a9db4960c770", "patch": "@@ -1961,9 +1961,6 @@ package body Exp_Util is\n       CRec_Typ : Entity_Id;\n       --  The corresponding record type of Full_Typ\n \n-      Full_Base : Entity_Id;\n-      --  The base type of Full_Typ\n-\n       Full_Typ : Entity_Id;\n       --  The full view of working type\n \n@@ -1973,6 +1970,9 @@ package body Exp_Util is\n       Priv_Typ : Entity_Id;\n       --  The partial view of working type\n \n+      UFull_Typ : Entity_Id;\n+      --  The underlying full view of Full_Typ\n+\n       Work_Typ : Entity_Id;\n       --  The working type\n \n@@ -2063,13 +2063,13 @@ package body Exp_Util is\n \n       --  Obtain all views of the input type\n \n-      Get_Views (Work_Typ, Priv_Typ, Full_Typ, Full_Base, CRec_Typ);\n+      Get_Views (Work_Typ, Priv_Typ, Full_Typ, UFull_Typ, CRec_Typ);\n \n-      --  Associate the DIC procedure and various relevant flags with all views\n+      --  Associate the DIC procedure and various flags with all views\n \n       Propagate_DIC_Attributes (Priv_Typ,  From_Typ => Work_Typ);\n       Propagate_DIC_Attributes (Full_Typ,  From_Typ => Work_Typ);\n-      Propagate_DIC_Attributes (Full_Base, From_Typ => Work_Typ);\n+      Propagate_DIC_Attributes (UFull_Typ, From_Typ => Work_Typ);\n       Propagate_DIC_Attributes (CRec_Typ,  From_Typ => Work_Typ);\n \n       --  The declaration of the DIC procedure must be inserted after the\n@@ -3087,11 +3087,18 @@ package body Exp_Util is\n    begin\n       Work_Typ := Typ;\n \n+      --  Do not process the underlying full view of a private type. There is\n+      --  no way to get back to the partial view, plus the body will be built\n+      --  by the full view or the base type.\n+\n+      if Is_Underlying_Full_View (Work_Typ) then\n+         return;\n+\n       --  The input type denotes the implementation base type of a constrained\n       --  array type. Work with the first subtype as all invariant pragmas are\n       --  on its rep item chain.\n \n-      if Ekind (Work_Typ) = E_Array_Type and then Is_Itype (Work_Typ) then\n+      elsif Ekind (Work_Typ) = E_Array_Type and then Is_Itype (Work_Typ) then\n          Work_Typ := First_Subtype (Work_Typ);\n \n       --  The input type denotes the corresponding record type of a protected\n@@ -3420,9 +3427,6 @@ package body Exp_Util is\n       CRec_Typ : Entity_Id;\n       --  The corresponding record type of Full_Typ\n \n-      Full_Base : Entity_Id;\n-      --  The base type of Full_Typ\n-\n       Full_Typ : Entity_Id;\n       --  The full view of working type\n \n@@ -3435,6 +3439,9 @@ package body Exp_Util is\n       Priv_Typ : Entity_Id;\n       --  The partial view of working type\n \n+      UFull_Typ : Entity_Id;\n+      --  The underlying full view of Full_Typ\n+\n       Work_Typ : Entity_Id;\n       --  The working type\n \n@@ -3520,13 +3527,13 @@ package body Exp_Util is\n \n       --  Obtain all views of the input type\n \n-      Get_Views (Work_Typ, Priv_Typ, Full_Typ, Full_Base, CRec_Typ);\n+      Get_Views (Work_Typ, Priv_Typ, Full_Typ, UFull_Typ, CRec_Typ);\n \n-      --  Associate the invariant procedure with all views\n+      --  Associate the invariant procedure and various flags with all views\n \n       Propagate_Invariant_Attributes (Priv_Typ,  From_Typ => Work_Typ);\n       Propagate_Invariant_Attributes (Full_Typ,  From_Typ => Work_Typ);\n-      Propagate_Invariant_Attributes (Full_Base, From_Typ => Work_Typ);\n+      Propagate_Invariant_Attributes (UFull_Typ, From_Typ => Work_Typ);\n       Propagate_Invariant_Attributes (CRec_Typ,  From_Typ => Work_Typ);\n \n       --  The declaration of the invariant procedure is inserted after the"}, {"sha": "fda31776eb0a18a791142b2bfbc836bb90fd9fff", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=b97813ab96391d0c7bd518d31855a9db4960c770", "patch": "@@ -9077,12 +9077,6 @@ package body Sem_Ch13 is\n             Set_Ekind (SIdB, E_Function);\n             Set_Is_Predicate_Function (SIdB);\n \n-            --  The predicate function is shared between views of a type\n-\n-            if Is_Private_Type (Typ) and then Present (Full_View (Typ)) then\n-               Set_Predicate_Function (Full_View (Typ), SId);\n-            end if;\n-\n             --  Build function body\n \n             Spec :=\n@@ -9196,6 +9190,18 @@ package body Sem_Ch13 is\n                FDecl : Node_Id;\n                BTemp : Entity_Id;\n \n+               CRec_Typ : Entity_Id;\n+               --  The corresponding record type of Full_Typ\n+\n+               Full_Typ : Entity_Id;\n+               --  The full view of Typ\n+\n+               Priv_Typ : Entity_Id;\n+               --  The partial view of Typ\n+\n+               UFull_Typ : Entity_Id;\n+               --  The underlying full view of Full_Typ\n+\n             begin\n                --  Mark any raise expressions for special expansion\n \n@@ -9207,11 +9213,16 @@ package body Sem_Ch13 is\n                Set_Is_Predicate_Function_M (SId);\n                Set_Predicate_Function_M (Typ, SId);\n \n-               --  The predicate function is shared between views of a type\n+               --  Obtain all views of the input type\n \n-               if Is_Private_Type (Typ) and then Present (Full_View (Typ)) then\n-                  Set_Predicate_Function_M (Full_View (Typ), SId);\n-               end if;\n+               Get_Views (Typ, Priv_Typ, Full_Typ, UFull_Typ, CRec_Typ);\n+\n+               --  Associate the predicate function with all views\n+\n+               Propagate_Predicate_Attributes (Priv_Typ,  From_Typ => Typ);\n+               Propagate_Predicate_Attributes (Full_Typ,  From_Typ => Typ);\n+               Propagate_Predicate_Attributes (UFull_Typ, From_Typ => Typ);\n+               Propagate_Predicate_Attributes (CRec_Typ,  From_Typ => Typ);\n \n                Spec :=\n                  Make_Function_Specification (Loc,\n@@ -9391,6 +9402,18 @@ package body Sem_Ch13 is\n       Func_Id   : Entity_Id;\n       Spec      : Node_Id;\n \n+      CRec_Typ : Entity_Id;\n+      --  The corresponding record type of Full_Typ\n+\n+      Full_Typ : Entity_Id;\n+      --  The full view of Typ\n+\n+      Priv_Typ : Entity_Id;\n+      --  The partial view of Typ\n+\n+      UFull_Typ : Entity_Id;\n+      --  The underlying full view of Full_Typ\n+\n    begin\n       --  The related type may be subject to pragma Ghost. Set the mode now to\n       --  ensure that the predicate functions are properly marked as Ghost.\n@@ -9401,13 +9424,30 @@ package body Sem_Ch13 is\n         Make_Defining_Identifier (Loc,\n           Chars => New_External_Name (Chars (Typ), \"Predicate\"));\n \n+      Set_Ekind (Func_Id, E_Function);\n+      Set_Etype (Func_Id, Standard_Boolean);\n+      Set_Is_Internal (Func_Id);\n+      Set_Is_Predicate_Function (Func_Id);\n+      Set_Predicate_Function (Typ, Func_Id);\n+\n       --  The predicate function requires debug info when the predicates are\n       --  subject to Source Coverage Obligations.\n \n       if Opt.Generate_SCO then\n          Set_Debug_Info_Needed (Func_Id);\n       end if;\n \n+      --  Obtain all views of the input type\n+\n+      Get_Views (Typ, Priv_Typ, Full_Typ, UFull_Typ, CRec_Typ);\n+\n+      --  Associate the predicate function and various flags with all views\n+\n+      Propagate_Predicate_Attributes (Priv_Typ,  From_Typ => Typ);\n+      Propagate_Predicate_Attributes (Full_Typ,  From_Typ => Typ);\n+      Propagate_Predicate_Attributes (UFull_Typ, From_Typ => Typ);\n+      Propagate_Predicate_Attributes (CRec_Typ,  From_Typ => Typ);\n+\n       Spec :=\n         Make_Function_Specification (Loc,\n           Defining_Unit_Name       => Func_Id,\n@@ -9420,12 +9460,6 @@ package body Sem_Ch13 is\n \n       Func_Decl := Make_Subprogram_Declaration (Loc, Specification => Spec);\n \n-      Set_Ekind (Func_Id, E_Function);\n-      Set_Etype (Func_Id, Standard_Boolean);\n-      Set_Is_Internal (Func_Id);\n-      Set_Is_Predicate_Function (Func_Id);\n-      Set_Predicate_Function (Typ, Func_Id);\n-\n       Insert_After (Parent (Typ), Func_Decl);\n       Analyze (Func_Decl);\n "}, {"sha": "83393c880c948818fa37d95be25b3d3c0149ebb5", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b97813ab96391d0c7bd518d31855a9db4960c770", "patch": "@@ -2332,7 +2332,8 @@ package body Sem_Ch3 is\n                --  potential errors.\n \n                elsif Decls = Private_Declarations (Context)\n-                 and then not Is_Private_Type (Typ)\n+                 and then (not Is_Private_Type (Typ)\n+                            or else Present (Underlying_Full_View (Typ)))\n                  and then Has_Private_Declaration (Typ)\n                  and then Has_Invariants (Typ)\n                then\n@@ -7929,7 +7930,7 @@ package body Sem_Ch3 is\n          --  completion, the derived private type being built is a full view\n          --  and the full derivation can only be its underlying full view.\n \n-         --  ??? If the parent is untagged private and its completion is\n+         --  ??? If the parent type is untagged private and its completion is\n          --  tagged, this mechanism will not work because we cannot derive from\n          --  the tagged full view unless we have an extension.\n \n@@ -12346,15 +12347,7 @@ package body Sem_Ch3 is\n \n          --  Propagate predicates\n \n-         if Has_Predicates (Full_Base) then\n-            Set_Has_Predicates (Full);\n-\n-            if Present (Predicate_Function (Full_Base))\n-              and then No (Predicate_Function (Full))\n-            then\n-               Set_Predicate_Function (Full, Predicate_Function (Full_Base));\n-            end if;\n-         end if;\n+         Propagate_Predicate_Attributes (Full, Full_Base);\n       end if;\n \n       --  It is unsafe to share the bounds of a scalar type, because the Itype\n@@ -12499,15 +12492,7 @@ package body Sem_Ch3 is\n       --  of the type or at the end of the visible part, and we must avoid\n       --  generating them twice.\n \n-      if Has_Predicates (Priv) then\n-         Set_Has_Predicates (Full);\n-\n-         if Present (Predicate_Function (Priv))\n-           and then No (Predicate_Function (Full))\n-         then\n-            Set_Predicate_Function (Full, Predicate_Function (Priv));\n-         end if;\n-      end if;\n+      Propagate_Predicate_Attributes (Full, Priv);\n \n       if Has_Delayed_Aspects (Priv) then\n          Set_Has_Delayed_Aspects (Full);\n@@ -20801,16 +20786,32 @@ package body Sem_Ch3 is\n       end if;\n \n       --  Propagate Default_Initial_Condition-related attributes from the\n-      --  partial view to the full view and its base type.\n+      --  partial view to the full view.\n \n       Propagate_DIC_Attributes (Full_T, From_Typ => Priv_T);\n-      Propagate_DIC_Attributes (Base_Type (Full_T), From_Typ => Priv_T);\n+\n+      --  And to the underlying full view, if any\n+\n+      if Is_Private_Type (Full_T)\n+        and then Present (Underlying_Full_View (Full_T))\n+      then\n+         Propagate_DIC_Attributes\n+           (Underlying_Full_View (Full_T), From_Typ => Priv_T);\n+      end if;\n \n       --  Propagate invariant-related attributes from the partial view to the\n-      --  full view and its base type.\n+      --  full view.\n \n       Propagate_Invariant_Attributes (Full_T, From_Typ => Priv_T);\n-      Propagate_Invariant_Attributes (Base_Type (Full_T), From_Typ => Priv_T);\n+\n+      --  And to the underlying full view, if any\n+\n+      if Is_Private_Type (Full_T)\n+        and then Present (Underlying_Full_View (Full_T))\n+      then\n+         Propagate_Invariant_Attributes\n+           (Underlying_Full_View (Full_T), From_Typ => Priv_T);\n+      end if;\n \n       --  AI12-0041: Detect an attempt to inherit a class-wide type invariant\n       --  in the full view without advertising the inheritance in the partial\n@@ -20841,12 +20842,13 @@ package body Sem_Ch3 is\n       --  view cannot be frozen yet, and the predicate function has not been\n       --  built. Still it is a cheap check and seems safer to make it.\n \n-      if Has_Predicates (Priv_T) then\n-         Set_Has_Predicates (Full_T);\n+      Propagate_Predicate_Attributes (Full_T, Priv_T);\n \n-         if Present (Predicate_Function (Priv_T)) then\n-            Set_Predicate_Function (Full_T, Predicate_Function (Priv_T));\n-         end if;\n+      if Is_Private_Type (Full_T)\n+        and then Present (Underlying_Full_View (Full_T))\n+      then\n+         Propagate_Predicate_Attributes\n+           (Underlying_Full_View (Full_T), Priv_T);\n       end if;\n \n    <<Leave>>"}, {"sha": "869d014250992be4474b5a0cbb19faa82acd774c", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=b97813ab96391d0c7bd518d31855a9db4960c770", "patch": "@@ -2738,35 +2738,21 @@ package body Sem_Ch7 is\n \n          Set_Freeze_Node (Priv, Freeze_Node (Full));\n \n-         --  Propagate Default_Initial_Condition-related attributes from the\n-         --  base type of the full view to the full view and vice versa. This\n-         --  may seem strange, but is necessary depending on which type\n-         --  triggered the generation of the DIC procedure body. As a result,\n-         --  both the full view and its base type carry the same DIC-related\n-         --  information.\n-\n-         Propagate_DIC_Attributes (Full, From_Typ => Full_Base);\n-         Propagate_DIC_Attributes (Full_Base, From_Typ => Full);\n-\n          --  Propagate Default_Initial_Condition-related attributes from the\n          --  full view to the private view.\n \n          Propagate_DIC_Attributes (Priv, From_Typ => Full);\n \n-         --  Propagate invariant-related attributes from the base type of the\n-         --  full view to the full view and vice versa. This may seem strange,\n-         --  but is necessary depending on which type triggered the generation\n-         --  of the invariant procedure body. As a result, both the full view\n-         --  and its base type carry the same invariant-related information.\n-\n-         Propagate_Invariant_Attributes (Full, From_Typ => Full_Base);\n-         Propagate_Invariant_Attributes (Full_Base, From_Typ => Full);\n-\n          --  Propagate invariant-related attributes from the full view to the\n          --  private view.\n \n          Propagate_Invariant_Attributes (Priv, From_Typ => Full);\n \n+         --  Propagate predicate-related attributes from the full view to the\n+         --  private view.\n+\n+         Propagate_Predicate_Attributes (Priv, From_Typ => Full);\n+\n          if Is_Tagged_Type (Priv)\n            and then Is_Tagged_Type (Full)\n            and then not Error_Posted (Full)"}, {"sha": "8991df31087f1b8cdc3faf0df0328e83c2a654aa", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=b97813ab96391d0c7bd518d31855a9db4960c770", "patch": "@@ -2250,6 +2250,11 @@ package body Sem_Ch9 is\n \n          Propagate_Invariant_Attributes (T, From_Typ => Def_Id);\n \n+         --  Propagate predicate-related attributes from the private type to\n+         --  the protected type.\n+\n+         Propagate_Predicate_Attributes (T, From_Typ => Def_Id);\n+\n          --  Create corresponding record now, because some private dependents\n          --  may be subtypes of the partial view.\n \n@@ -3246,6 +3251,11 @@ package body Sem_Ch9 is\n \n          Propagate_Invariant_Attributes (T, From_Typ => Def_Id);\n \n+         --  Propagate predicate-related attributes from the private type to\n+         --  task type.\n+\n+         Propagate_Predicate_Attributes (T, From_Typ => Def_Id);\n+\n          --  Create corresponding record now, because some private dependents\n          --  may be subtypes of the partial view.\n "}, {"sha": "ff52378d56090457b7ba39d1827dd9595747e70e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 64, "deletions": 22, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b97813ab96391d0c7bd518d31855a9db4960c770", "patch": "@@ -10289,7 +10289,7 @@ package body Sem_Util is\n      (Typ       : Entity_Id;\n       Priv_Typ  : out Entity_Id;\n       Full_Typ  : out Entity_Id;\n-      Full_Base : out Entity_Id;\n+      UFull_Typ : out Entity_Id;\n       CRec_Typ  : out Entity_Id)\n    is\n       IP_View : Entity_Id;\n@@ -10299,7 +10299,7 @@ package body Sem_Util is\n \n       Priv_Typ  := Empty;\n       Full_Typ  := Empty;\n-      Full_Base := Empty;\n+      UFull_Typ := Empty;\n       CRec_Typ  := Empty;\n \n       --  The input type is the corresponding record type of a protected or a\n@@ -10308,10 +10308,9 @@ package body Sem_Util is\n       if Ekind (Typ) = E_Record_Type\n         and then Is_Concurrent_Record_Type (Typ)\n       then\n-         CRec_Typ  := Typ;\n-         Full_Typ  := Corresponding_Concurrent_Type (CRec_Typ);\n-         Full_Base := Base_Type (Full_Typ);\n-         Priv_Typ  := Incomplete_Or_Partial_View (Full_Typ);\n+         CRec_Typ := Typ;\n+         Full_Typ := Corresponding_Concurrent_Type (CRec_Typ);\n+         Priv_Typ := Incomplete_Or_Partial_View (Full_Typ);\n \n       --  Otherwise the input type denotes an arbitrary type\n \n@@ -10336,10 +10335,19 @@ package body Sem_Util is\n             Full_Typ := Typ;\n          end if;\n \n-         if Present (Full_Typ) then\n-            Full_Base := Base_Type (Full_Typ);\n+         if Present (Full_Typ) and then Is_Private_Type (Full_Typ) then\n+            UFull_Typ := Underlying_Full_View (Full_Typ);\n \n-            if Ekind_In (Full_Typ, E_Protected_Type, E_Task_Type) then\n+            if Present (UFull_Typ)\n+              and then Ekind_In (UFull_Typ, E_Protected_Type, E_Task_Type)\n+            then\n+               CRec_Typ := Corresponding_Record_Type (UFull_Typ);\n+            end if;\n+\n+         else\n+            if Present (Full_Typ)\n+              and then Ekind_In (Full_Typ, E_Protected_Type, E_Task_Type)\n+            then\n                CRec_Typ := Corresponding_Record_Type (Full_Typ);\n             end if;\n          end if;\n@@ -23927,13 +23935,11 @@ package body Sem_Util is\n          --  The setting of the attributes is intentionally conservative. This\n          --  prevents accidental clobbering of enabled attributes.\n \n-         if Has_Inherited_DIC (From_Typ)\n-           and then not Has_Inherited_DIC (Typ)\n-         then\n+         if Has_Inherited_DIC (From_Typ) then\n             Set_Has_Inherited_DIC (Typ);\n          end if;\n \n-         if Has_Own_DIC (From_Typ) and then not Has_Own_DIC (Typ) then\n+         if Has_Own_DIC (From_Typ) then\n             Set_Has_Own_DIC (Typ);\n          end if;\n \n@@ -23971,21 +23977,15 @@ package body Sem_Util is\n          --  The setting of the attributes is intentionally conservative. This\n          --  prevents accidental clobbering of enabled attributes.\n \n-         if Has_Inheritable_Invariants (From_Typ)\n-           and then not Has_Inheritable_Invariants (Typ)\n-         then\n+         if Has_Inheritable_Invariants (From_Typ) then\n             Set_Has_Inheritable_Invariants (Typ);\n          end if;\n \n-         if Has_Inherited_Invariants (From_Typ)\n-           and then not Has_Inherited_Invariants (Typ)\n-         then\n+         if Has_Inherited_Invariants (From_Typ) then\n             Set_Has_Inherited_Invariants (Typ);\n          end if;\n \n-         if Has_Own_Invariants (From_Typ)\n-           and then not Has_Own_Invariants (Typ)\n-         then\n+         if Has_Own_Invariants (From_Typ) then\n             Set_Has_Own_Invariants (Typ);\n          end if;\n \n@@ -24000,6 +24000,48 @@ package body Sem_Util is\n       end if;\n    end Propagate_Invariant_Attributes;\n \n+   ------------------------------------\n+   -- Propagate_Predicate_Attributes --\n+   ------------------------------------\n+\n+   procedure Propagate_Predicate_Attributes\n+     (Typ      : Entity_Id;\n+      From_Typ : Entity_Id)\n+   is\n+      Pred_Func   : Entity_Id;\n+      Pred_Func_M : Entity_Id;\n+\n+   begin\n+      if Present (Typ) and then Present (From_Typ) then\n+         pragma Assert (Is_Type (Typ) and then Is_Type (From_Typ));\n+\n+         --  Nothing to do if both the source and the destination denote the\n+         --  same type.\n+\n+         if From_Typ = Typ then\n+            return;\n+         end if;\n+\n+         Pred_Func   := Predicate_Function (From_Typ);\n+         Pred_Func_M := Predicate_Function_M (From_Typ);\n+\n+         --  The setting of the attributes is intentionally conservative. This\n+         --  prevents accidental clobbering of enabled attributes.\n+\n+         if Has_Predicates (From_Typ) then\n+            Set_Has_Predicates (Typ);\n+         end if;\n+\n+         if Present (Pred_Func) and then No (Predicate_Function (Typ)) then\n+            Set_Predicate_Function (Typ, Pred_Func);\n+         end if;\n+\n+         if Present (Pred_Func_M) and then No (Predicate_Function_M (Typ)) then\n+            Set_Predicate_Function_M (Typ, Pred_Func_M);\n+         end if;\n+      end if;\n+   end Propagate_Predicate_Attributes;\n+\n    ---------------------------------------\n    -- Record_Possible_Part_Of_Reference --\n    ---------------------------------------"}, {"sha": "03fcfe4421f46ccfc9de74360966b300125d26e7", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97813ab96391d0c7bd518d31855a9db4960c770/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=b97813ab96391d0c7bd518d31855a9db4960c770", "patch": "@@ -1171,15 +1171,15 @@ package Sem_Util is\n      (Typ       : Entity_Id;\n       Priv_Typ  : out Entity_Id;\n       Full_Typ  : out Entity_Id;\n-      Full_Base : out Entity_Id;\n+      UFull_Typ : out Entity_Id;\n       CRec_Typ  : out Entity_Id);\n-   --  Obtain the partial and full view of type Typ and in addition any extra\n-   --  types the full view may have. The return entities are as follows:\n+   --  Obtain the partial and full views of type Typ and in addition any extra\n+   --  types the full views may have. The return entities are as follows:\n    --\n    --    Priv_Typ  - the partial view (a private type)\n    --    Full_Typ  - the full view\n-   --    Full_Base - the base type of the full view\n-   --    CRec_Typ  - the corresponding record type of the full view\n+   --    UFull_Typ - the underlying full view, if the full view is private\n+   --    CRec_Typ  - the corresponding record type of the full views\n \n    function Has_Access_Values (T : Entity_Id) return Boolean;\n    --  Returns true if type or subtype T is an access type, or has a component\n@@ -2547,6 +2547,12 @@ package Sem_Util is\n    --  Inherit all invariant-related attributes form type From_Typ. Typ is the\n    --  destination type.\n \n+   procedure Propagate_Predicate_Attributes\n+     (Typ      : Entity_Id;\n+      From_Typ : Entity_Id);\n+   --  Inherit some predicate-related attributes form type From_Typ. Typ is the\n+   --  destination type. Probably to be completed with more attributes???\n+\n    procedure Record_Possible_Part_Of_Reference\n      (Var_Id : Entity_Id;\n       Ref    : Node_Id);"}]}