{"sha": "08af8e094f5a13d5e80823f2b6c239c68533bb53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhhZjhlMDk0ZjVhMTNkNWU4MDgyM2YyYjZjMjM5YzY4NTMzYmI1Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-24T23:14:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-24T23:14:43Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1279", "tree": {"sha": "a6699d9d404221460e98ab50b0e63df35b1f46b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6699d9d404221460e98ab50b0e63df35b1f46b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08af8e094f5a13d5e80823f2b6c239c68533bb53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08af8e094f5a13d5e80823f2b6c239c68533bb53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08af8e094f5a13d5e80823f2b6c239c68533bb53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08af8e094f5a13d5e80823f2b6c239c68533bb53/comments", "author": null, "committer": null, "parents": [{"sha": "5959a6cddfe1a70d79dcd5de0fe4da1cc2efd059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5959a6cddfe1a70d79dcd5de0fe4da1cc2efd059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5959a6cddfe1a70d79dcd5de0fe4da1cc2efd059"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "f869b58c9de255e243bffc72c5202db3392c170b", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af8e094f5a13d5e80823f2b6c239c68533bb53/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af8e094f5a13d5e80823f2b6c239c68533bb53/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=08af8e094f5a13d5e80823f2b6c239c68533bb53", "patch": "@@ -5927,11 +5927,14 @@ do_jump (exp, if_false_label, if_true_label)\n \t combine can't do this for us because it can't know whether a\n \t ZERO_EXTRACT or a compare in a smaller mode exists, but we do.  */\n \n-      if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST\n+      if (! SLOW_BYTE_ACCESS\n+\t  && TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST\n \t  && TYPE_PRECISION (TREE_TYPE (exp)) <= HOST_BITS_PER_INT\n \t  && (i = floor_log2 (TREE_INT_CST_LOW (TREE_OPERAND (exp, 1)))) >= 0\n \t  && (type = type_for_size (i + 1, 1)) != 0\n-\t  && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (exp)))\n+\t  && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (exp))\n+\t  && (cmp_optab->handlers[(int) TYPE_MODE (type)].insn_code\n+\t      != CODE_FOR_nothing))\n \t{\n \t  do_jump (convert (type, exp), if_false_label, if_true_label);\n \t  break;\n@@ -5980,8 +5983,11 @@ do_jump (exp, if_false_label, if_true_label)\n \t\t\t     &mode, &unsignedp, &volatilep);\n \n \ttype = type_for_size (bitsize, unsignedp);\n-\tif (type != 0 && bitsize >= 0\n-\t    && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (exp)))\n+\tif (! SLOW_BYTE_ACCESS\n+\t    && type != 0 && bitsize >= 0\n+\t    && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (exp))\n+\t    && (cmp_optab->handlers[(int) TYPE_MODE (type)].insn_code\n+\t\t!= CODE_FOR_nothing))\n \t  {\n \t    do_jump (convert (type, exp), if_false_label, if_true_label);\n \t    break;"}]}