{"sha": "cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4NWEyZjNiZDhiMWQ5MmJjMjJjYWY2ZDdmZmQxOTk4MTE4OWY3Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-04-21T02:24:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-04-21T02:24:02Z"}, "message": "sparc.h (MACHINE_STATE_SAVE, [...]): Rewrite to not be so gross, and to properly function with PIC.\n\n* sparc.h (MACHINE_STATE_SAVE, MACHINE_STATE_RESTORE): Rewrite\nto not be so gross, and to properly function with PIC.\n\nFrom-SVN: r19352", "tree": {"sha": "f6fa7ef434b7eaebed559b48cbe7a52fe884ff0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6fa7ef434b7eaebed559b48cbe7a52fe884ff0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73/comments", "author": null, "committer": null, "parents": [{"sha": "99b13ed3fd4f9304c397ead468f7238bafc7518b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b13ed3fd4f9304c397ead468f7238bafc7518b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b13ed3fd4f9304c397ead468f7238bafc7518b"}], "stats": {"total": 163, "additions": 82, "deletions": 81}, "files": [{"sha": "49770dda66a4fb3842e3693fa25190d0b49d8c27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73", "patch": "@@ -1,3 +1,8 @@\n+Tue Apr 21 02:15:36 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* sparc.h (MACHINE_STATE_SAVE, MACHINE_STATE_RESTORE): Rewrite\n+\tto not be so gross, and to properly function with PIC.\n+\n Mon Apr 20 20:44:25 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* frame.c (heapsort): Rename to frame_heapsort."}, {"sha": "26a82313cdc03bbf44d0c38de75c5c1c7688f148", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 77, "deletions": 81, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=cb85a2f3bd8b1d92bc22caf6d7ffd19981189f73", "patch": "@@ -1955,19 +1955,24 @@ while(0)\n    so we read only the condition codes by using branch instructions\n    and hope that this is enough. */\n \n-#define MACHINE_STATE_SAVE(ID) \\\n-  asm (\"\tmov %g0,%l0\");\\\n-  asm (\"\tbe,a LFLGNZ\" ID);\\\n-  asm (\"\tor %l0,4,%l0\");\\\n-  asm (\"LFLGNZ\" ID \":  bcs,a LFLGNC\" ID);\\\n-  asm (\"\tor %l0,1,%l0\");\\\n-  asm (\"LFLGNC\" ID \":  bvs,a LFLGNV\" ID);\\\n-  asm (\"\tor %l0,2,%l0\");\\\n-  asm (\"LFLGNV\" ID \":  bneg,a LFLGNN\" ID);\\\n-  asm (\"\tor %l0,8,%l0\");\\\n-  asm (\"LFLGNN\" ID \": sethi %hi(LFLAGS\" ID \"),%l1\");\\\n-  asm (\"\tst %l0,[%l1+%lo(LFLAGS\" ID \")]\"); \\\n-  asm (\"\tst %g2,[%l1+%lo(LSAVRET\" ID \")]\");\n+#define MACHINE_STATE_SAVE(ID)\t\t\t\\\n+  int ms_flags, ms_saveret;\t\t\t\\\n+  asm volatile(\t\t\t\t\t\\\n+\t\"mov %%g0,%0\\n\\\n+\tbe,a LFLGNZ\"ID\"\\n\\\n+\tor %0,4,%0\\n\\\n+LFLGNZ\"ID\":\\n\\\n+\tbcs,a LFLGNC\"ID\"\\n\\\n+\tor %0,1,%0\\n\\\n+LFLGNC\"ID\":\\n\\\n+\tbvs,a LFLGNV\"ID\"\\n\\\n+\tor %0,2,%0\\n\\\n+LFLGNV\"ID\":\\n\\\n+\tbneg,a LFLGNN\"ID\"\\n\\\n+\tor %0,8,%0\\n\\\n+LFLGNN\"ID\":\\n\\\n+\tmov %%g2,%1\"\t\t\t\t\\\n+\t: \"=r\"(ms_flags), \"=r\"(ms_saveret));\n \n /* On sparc MACHINE_STATE_RESTORE restores the psw register from memory.\n    The psw register can be written in supervisor mode only,\n@@ -1977,74 +1982,65 @@ while(0)\n    be generated in this way. If this happens an unimplemented\n    instruction will be executed to abort the program. */\n \n-#define MACHINE_STATE_RESTORE(ID) \\\n-  asm (\"\tsethi %hi(LFLGTAB\" ID \"),%l1\");\\\n-  asm (\"\tld [%l1+%lo(LFLGTAB\" ID \"-(LFLGTAB\" ID \"-LFLAGS\" ID \"))],%l0\");\\\n-  asm (\"\tld [%l1+%lo(LFLGTAB\" ID \"-(LFLGTAB\" ID \"-LSAVRET\" ID \"))],%g2\");\\\n-  asm (\"\tsll %l0,2,%l0\");\\\n-  asm (\"\tadd %l0,%l1,%l0\");\\\n-  asm (\"\tld [%l0+%lo(LFLGTAB\" ID \")],%l1\");\\\n-  asm (\"\tjmp %l1\");\\\n-  asm (\" nop\");\\\n-  asm (\".data\");\\\n-  asm (\"\t.align 4\");\\\n-  asm (\"LFLAGS\" ID \":\");\\\n-  asm (\"\t.word 0\");\\\n-  asm (\"LSAVRET\" ID \":\");\\\n-  asm (\" .word 0\");\\\n-  asm (\"LFLGTAB\" ID \": \");\\\n-  asm (\"\t.word LSFLG0\" ID);\\\n-  asm (\"\t.word LSFLGC\" ID);\\\n-  asm (\"\t.word LSFLGV\" ID);\\\n-  asm (\"\t.word LSFLGVC\" ID);\\\n-  asm (\"\t.word LSFLGZ\" ID);\\\n-  asm (\"\t.word LSFLGZC\" ID);\\\n-  asm (\"\t.word LSFLGZV\" ID);\\\n-  asm (\"\t.word LSFLGZVC\" ID);\\\n-  asm (\"\t.word LSFLGN\" ID);\\\n-  asm (\"\t.word LSFLGNC\" ID);\\\n-  asm (\"\t.word LSFLGNV\" ID);\\\n-  asm (\"\t.word LSFLGNVC\" ID);\\\n-  asm (\"\t.word LSFLGNZ\" ID);\\\n-  asm (\"\t.word LSFLGNZC\" ID);\\\n-  asm (\"\t.word LSFLGNZV\" ID);\\\n-  asm (\"\t.word LSFLGNZVC\" ID);\\\n-  asm (\".text\");\\\n-  asm (\"LSFLGVC\" ID \": mov -1,%l0\");\\\n-  asm (\"\taddcc 2,%l0,%g0\");\\\n-  asm (\"\tsethi %hi(0x80000000),%l0\");\\\n-  asm (\"\tmov %l0,%l1\");\\\n-  asm (\"\tba LFLGRET\" ID);\\\n-  asm (\"\taddxcc %l0,%l1,%l0\");\\\n-  asm (\"LSFLGC\" ID \":\tmov -1,%l0\");\\\n-  asm (\"\tba LFLGRET\" ID);\\\n-  asm (\"\taddcc 2,%l0,%g0\");\\\n-  asm (\"LSFLGZC\" ID \": mov -1,%l0\");\\\n-  asm (\"\tba LFLGRET\" ID);\\\n-  asm (\"\taddcc 1,%l0,%l0\");\\\n-  asm (\"LSFLGZVC\" ID \": sethi %hi(0x80000000),%l0\");\\\n-  asm (\"\tmov %l0,%l1\");\\\n-  asm (\"\tba LFLGRET\" ID);\\\n-  asm (\"\taddcc %l0,%l1,%l0\");\\\n-  asm (\"LSFLGZ\" ID \":\tba LFLGRET\" ID);\\\n-  asm (\"\tsubcc %g0,%g0,%g0\");\\\n-  asm (\"LSFLGNC\" ID \": add %g0,1,%l0\");\\\n-  asm (\"\tba LFLGRET\" ID);\\\n-  asm (\"\tsubcc %g0,%l0,%g0\");\\\n-  asm (\"LSFLG0\" ID \":\tba LFLGRET\" ID);\\\n-  asm (\"\torcc 1,%g0,%g0\");\\\n-  asm (\"LSFLGN\" ID \":\tba LFLGRET\" ID);\\\n-  asm (\" orcc -1,%g0,%g0\");\\\n-  asm (\"LSFLGV\" ID \":\");\\\n-  asm (\"LSFLGZV\" ID \":\");\\\n-  asm (\"LSFLGNV\" ID \":\");\\\n-  asm (\"LSFLGNVC\" ID \":\");\\\n-  asm (\"LSFLGNZ\" ID \":\");\\\n-  asm (\"LSFLGNZC\" ID \":\");\\\n-  asm (\"LSFLGNZV\" ID \":\");\\\n-  asm (\"LSFLGNZVC\" ID \":\");\\\n-  asm (\"\tunimp\");\\\n-  asm (\"LFLGRET\" ID \":\");\n+#define MACHINE_STATE_RESTORE(ID)\t\t\t\t\\\n+{ extern char flgtab[] __asm__(\"LFLGTAB\"ID);\t\t\t\\\n+  int scratch;\t\t\t\t\t\t\t\\\n+  asm volatile (\t\t\t\t\t\t\\\n+\t\"jmpl %2+%1,%%g0\\n\\\n+    ! Do part of VC in the delay slot here, as it needs 3 insns.\\n\\\n+\t addcc 2,%3,%%g0\\n\\\n+LFLGTAB\" ID \":\\n\\\n+    ! 0\\n\\\n+\tba LFLGRET\"ID\"\\n\\\n+\t orcc 1,%%g0,%%g0\\n\\\n+    ! C\\n\\\n+\tba LFLGRET\"ID\"\\n\\\n+\t addcc 2,%3,%%g0\\n\\\n+    ! V\\n\\\n+\tunimp\\n\\\n+\tnop\\n\\\n+    ! VC\\n\\\n+\tba LFLGRET\"ID\"\\n\\\n+\t addxcc %4,%4,%0\\n\\\n+    ! Z\\n\\\n+\tba LFLGRET\"ID\"\\n\\\n+\t subcc %%g0,%%g0,%%g0\\n\\\n+    ! ZC\\n\\\n+\tba LFLGRET\"ID\"\\n\\\n+\t addcc 1,%3,%0\\n\\\n+    ! ZVC\\n\\\n+\tba LFLGRET\"ID\"\\n\\\n+\t addcc %4,%4,%0\\n\\\n+    ! N\\n\\\n+\tba LFLGRET\"ID\"\\n\\\n+\t orcc %%g0,-1,%%g0\\n\\\n+    ! NC\\n\\\n+\tba LFLGRET\"ID\"\\n\\\n+\t addcc %%g0,%3,%%g0\\n\\\n+    ! NV\\n\\\n+\tunimp\\n\\\n+\tnop\\n\\\n+    ! NVC\\n\\\n+\tunimp\\n\\\n+\tnop\\n\\\n+    ! NZ\\n\\\n+\tunimp\\n\\\n+\tnop\\n\\\n+    ! NZC\\n\\\n+\tunimp\\n\\\n+\tnop\\n\\\n+    ! NZV\\n\\\n+\tunimp\\n\\\n+\tnop\\n\\\n+    ! NZVC\\n\\\n+\tunimp\\n\\\n+\tnop\\n\\\n+LFLGRET\"ID\":\\n\\\n+\tmov %5,%%g2\"\t\t\t\t\t\t\\\n+\t: \"=r\"(scratch)\t\t\t\t\t\t\\\n+\t: \"r\"(ms_flags*8), \"r\"(flgtab), \"r\"(-1),\t\t\\\n+\t  \"r\"(0x80000000), \"r\"(ms_saveret)\t\t\t\\\n+\t: \"cc\", \"%g2\"); }\n \f\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in"}]}