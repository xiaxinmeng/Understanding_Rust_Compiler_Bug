{"sha": "98b779ae494df7c615787a95774e41a99654ad39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThiNzc5YWU0OTRkZjdjNjE1Nzg3YTk1Nzc0ZTQxYTk5NjU0YWQzOQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-09T19:59:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-09T19:59:11Z"}, "message": "[multiple changes]\n\n2017-10-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb (Make_Predicate_Call): If the type of the expression to\n\twhich the predicate check applies is tagged, convert the expression to\n\tthat type. This is in most cases a no-op, but is relevant if the\n\texpression is clas-swide, because the predicate function being invoked\n\tis not a primitive of the type and cannot take a class-wide actual.\n\n2017-10-09  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_disp.adb: Minor reformatting.\n\n2017-10-09  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_warn.adb (Warn_On_Unreferenced_Entity): Fix typo.\n\n2017-10-09  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_elab.adb (Install_ABE_Check): Do not generate an ABE check for\n\tGNATprove.\n\t(Install_ABE_Failure): Do not generate an ABE failure for GNATprove.\n\n2017-10-09  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch6.adb: (Make_Build_In_Place_Call_In_Object_Declaration): Return\n\timmediately if the call has already been processed (by a previous call\n\tto Make_Build_In_Place_Call_In_Anonymous_Context).\n\t* sem_elab.adb: Minor typo fixes.\n\n2017-10-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Replace_Type_Ref): In the expression for a dynamic\n\tpredicate, do not replace an identifier that matches the type if the\n\tidentifier is a selector in a selected component, because this\n\tindicates a reference to some homograph of the type itself, and  not to\n\tthe current occurence in the predicate.\n\n2017-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* repinfo.adb (List_Record_Layout): Tweak formatting.\n\t(Write_Val): Remove superfluous spaces in back-end layout mode.\n\n2017-10-09  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* sem_res.adb (Property_Error): Remove.\n\t(Resolve_Actuals): check for SPARK RM 7.1.3(10) rewritten to match the\n\tcurrent wording of the rule.\n\n2017-10-09  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Declarations): Add check for ghost packages\n\tbefore analyzing a given scope due to an expression function.\n\t(Uses_Unseen_Lib_Unit_Priv): Rename to Uses_Unseen_Priv.\n\nFrom-SVN: r253563", "tree": {"sha": "d4d2f6f87b49d1b4747309660ad63c422fe5e6f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4d2f6f87b49d1b4747309660ad63c422fe5e6f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98b779ae494df7c615787a95774e41a99654ad39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b779ae494df7c615787a95774e41a99654ad39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b779ae494df7c615787a95774e41a99654ad39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b779ae494df7c615787a95774e41a99654ad39/comments", "author": null, "committer": null, "parents": [{"sha": "94105f5c8a20973e49579064e7ae3ac2013117e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94105f5c8a20973e49579064e7ae3ac2013117e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94105f5c8a20973e49579064e7ae3ac2013117e8"}], "stats": {"total": 253, "additions": 157, "deletions": 96}, "files": [{"sha": "31b6dc0e3da825a3c0a0a79596777fa6771cdd5e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=98b779ae494df7c615787a95774e41a99654ad39", "patch": "@@ -1,3 +1,57 @@\n+2017-10-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Make_Predicate_Call): If the type of the expression to\n+\twhich the predicate check applies is tagged, convert the expression to\n+\tthat type. This is in most cases a no-op, but is relevant if the\n+\texpression is clas-swide, because the predicate function being invoked\n+\tis not a primitive of the type and cannot take a class-wide actual.\n+\n+2017-10-09  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_disp.adb: Minor reformatting.\n+\n+2017-10-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Unreferenced_Entity): Fix typo.\n+\n+2017-10-09  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_elab.adb (Install_ABE_Check): Do not generate an ABE check for\n+\tGNATprove.\n+\t(Install_ABE_Failure): Do not generate an ABE failure for GNATprove.\n+\n+2017-10-09  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb: (Make_Build_In_Place_Call_In_Object_Declaration): Return\n+\timmediately if the call has already been processed (by a previous call\n+\tto Make_Build_In_Place_Call_In_Anonymous_Context).\n+\t* sem_elab.adb: Minor typo fixes.\n+\n+2017-10-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Replace_Type_Ref): In the expression for a dynamic\n+\tpredicate, do not replace an identifier that matches the type if the\n+\tidentifier is a selector in a selected component, because this\n+\tindicates a reference to some homograph of the type itself, and  not to\n+\tthe current occurence in the predicate.\n+\n+2017-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo.adb (List_Record_Layout): Tweak formatting.\n+\t(Write_Val): Remove superfluous spaces in back-end layout mode.\n+\n+2017-10-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Property_Error): Remove.\n+\t(Resolve_Actuals): check for SPARK RM 7.1.3(10) rewritten to match the\n+\tcurrent wording of the rule.\n+\n+2017-10-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations): Add check for ghost packages\n+\tbefore analyzing a given scope due to an expression function.\n+\t(Uses_Unseen_Lib_Unit_Priv): Rename to Uses_Unseen_Priv.\n+\n 2017-10-09  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration): Use"}, {"sha": "c9ec0da045458dcaae67c6f19b73957757f56d4a", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=98b779ae494df7c615787a95774e41a99654ad39", "patch": "@@ -8248,12 +8248,20 @@ package body Exp_Ch6 is\n       --  Caller_Known_Size (specific) tagged type, we treat it as\n       --  indefinite, because the code for the Definite case below sets the\n       --  initialization expression of the object to Empty, which would be\n-      --  illegal Ada, and would cause gigi to mis-allocate X.\n+      --  illegal Ada, and would cause gigi to misallocate X.\n+\n+   --  Start of processing for Make_Build_In_Place_Call_In_Object_Declaration\n \n    begin\n+      --  If the call has already been processed to add build-in-place actuals\n+      --  then return.\n+\n+      if Is_Expanded_Build_In_Place_Call (Func_Call) then\n+         return;\n+      end if;\n+\n       --  Mark the call as processed as a build-in-place call\n \n-      pragma Assert (not Is_Expanded_Build_In_Place_Call (Func_Call));\n       Set_Is_Expanded_Build_In_Place_Call (Func_Call);\n \n       --  Create an access type designating the function's result subtype."}, {"sha": "69d296543e246e331f11d504a4f0b42db82717f3", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=98b779ae494df7c615787a95774e41a99654ad39", "patch": "@@ -738,10 +738,10 @@ package body Exp_Disp is\n                            Set_Etype (N, Etype (F));\n \n                         --  Conversely, if this is a controlling argument\n-                        --  (in a dispatching call in the condition)\n-                        --  that is a dereference, the source is an access to\n-                        --  classwide type, so preserve the dispatching nature\n-                        --  of the call in the rewritten condition.\n+                        --  (in a dispatching call in the condition) that is a\n+                        --  dereference, the source is an access-to-class-wide\n+                        --  type, so preserve the dispatching nature of the\n+                        --  call in the rewritten condition.\n \n                         elsif Nkind (Parent (N)) = N_Explicit_Dereference\n                           and then Is_Controlling_Actual (Parent (N))"}, {"sha": "6fa8d211919f0fd82c30102fc2c0b6d0e48c58ae", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=98b779ae494df7c615787a95774e41a99654ad39", "patch": "@@ -9305,10 +9305,22 @@ package body Exp_Util is\n \n       --  Case of calling normal predicate function\n \n-      Call :=\n-        Make_Function_Call (Loc,\n-          Name                   => New_Occurrence_Of (Func_Id, Loc),\n-          Parameter_Associations => New_List (Relocate_Node (Expr)));\n+      --  If the type is tagged, the expression may be class-wide, in which\n+      --  case it has to be converted to its root type, given that the\n+      --  generated predicate function is not dispatching.\n+\n+      if Is_Tagged_Type (Typ) then\n+         Call :=\n+           Make_Function_Call (Loc,\n+             Name                   => New_Occurrence_Of (Func_Id, Loc),\n+             Parameter_Associations =>\n+               New_List (Convert_To (Typ, Relocate_Node (Expr))));\n+      else\n+         Call :=\n+           Make_Function_Call (Loc,\n+             Name                   => New_Occurrence_Of (Func_Id, Loc),\n+             Parameter_Associations => New_List (Relocate_Node (Expr)));\n+      end if;\n \n       Restore_Ghost_Mode (Saved_GM);\n "}, {"sha": "464b1b234d1f30d1f002ee25f29c8de6d5abf464", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=98b779ae494df7c615787a95774e41a99654ad39", "patch": "@@ -1051,14 +1051,13 @@ package body Repinfo is\n                  and then List_Representation_Info = 3\n                then\n                   Spaces (Max_Spos_Length - 2);\n-                  Write_Str (\"bit offset\");\n+                  Write_Str (\"bit offset \");\n \n                   if Starting_Position /= Uint_0\n                     or else Starting_First_Bit /= Uint_0\n                   then\n-                     Write_Char (' ');\n                      UI_Write (Starting_Position * SSU + Starting_First_Bit);\n-                     Write_Str (\" +\");\n+                     Write_Str (\" + \");\n                   end if;\n \n                   Write_Val (Bofs, Paren => True);\n@@ -1686,27 +1685,18 @@ package body Repinfo is\n             Write_Str (\"??\");\n \n          else\n-            if Back_End_Layout then\n-               Write_Char (' ');\n-\n-               if Paren then\n-                  Write_Char ('(');\n-                  List_GCC_Expression (Val);\n-                  Write_Char (')');\n-               else\n-                  List_GCC_Expression (Val);\n-               end if;\n-\n-               Write_Char (' ');\n+            if Paren then\n+               Write_Char ('(');\n+            end if;\n \n+            if Back_End_Layout then\n+               List_GCC_Expression (Val);\n             else\n-               if Paren then\n-                  Write_Char ('(');\n-                  Write_Name_Decoded (Chars (Get_Dynamic_SO_Entity (Val)));\n-                  Write_Char (')');\n-               else\n-                  Write_Name_Decoded (Chars (Get_Dynamic_SO_Entity (Val)));\n-               end if;\n+               Write_Name_Decoded (Chars (Get_Dynamic_SO_Entity (Val)));\n+            end if;\n+\n+            if Paren then\n+               Write_Char (')');\n             end if;\n          end if;\n "}, {"sha": "5220e5df457c4fd838391e2d32f0966ee711587a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=98b779ae494df7c615787a95774e41a99654ad39", "patch": "@@ -4415,15 +4415,6 @@ package body Sem_Ch13 is\n \n             if Present (Default_Element) then\n                Analyze (Default_Element);\n-\n-               if Is_Entity_Name (Default_Element)\n-                 and then not Covers (Entity (Default_Element), Ret_Type)\n-                 and then False\n-               then\n-                  Illegal_Indexing\n-                    (\"wrong return type for indexing function\");\n-                  return;\n-               end if;\n             end if;\n \n             --  For variable_indexing the return type must be a reference type\n@@ -12670,10 +12661,18 @@ package body Sem_Ch13 is\n \n                return Skip;\n \n-            --  Otherwise do the replacement and we are done with this node\n+            --  Otherwise do the replacement if this is not a qualified\n+            --  reference to a homograph of the type itself. Note that the\n+            --  current instance could not appear in such a context, e.g.\n+            --  the prefix of a type conversion.\n \n             else\n-               Replace_Type_Reference (N);\n+               if Nkind (Parent (N)) /= N_Selected_Component\n+                 or else N /= Selector_Name (Parent (N))\n+               then\n+                  Replace_Type_Reference (N);\n+               end if;\n+\n                return Skip;\n             end if;\n \n@@ -12682,7 +12681,7 @@ package body Sem_Ch13 is\n \n          elsif Nkind (N) = N_Selected_Component then\n \n-            --  If selector name is not our type, keeping going (we might still\n+            --  If selector name is not our type, keep going (we might still\n             --  have an occurrence of the type in the prefix).\n \n             if Nkind (Selector_Name (N)) /= N_Identifier"}, {"sha": "7f54daaee92f3de0bd48f4810516e72bae5c319f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=98b779ae494df7c615787a95774e41a99654ad39", "patch": "@@ -2233,9 +2233,11 @@ package body Sem_Ch3 is\n       --  Utility to resolve the expressions of aspects at the end of a list of\n       --  declarations.\n \n-      function Uses_Unseen_Lib_Unit_Priv (Pkg : Entity_Id) return Boolean;\n-      --  Check if an inner package has entities within it that rely on library\n-      --  level private types where the full view has not been seen.\n+      function Uses_Unseen_Priv (Pkg : Entity_Id) return Boolean;\n+      --  Check if a nested package has entities within it that rely on library\n+      --  level private types where the full view has not been seen for the\n+      --  purposes of checking if it is acceptable to freeze an expression\n+      --  function at the point of declaration.\n \n       -----------------\n       -- Adjust_Decl --\n@@ -2540,11 +2542,11 @@ package body Sem_Ch3 is\n          end loop;\n       end Resolve_Aspects;\n \n-      -------------------------------\n-      -- Uses_Unseen_Lib_Unit_Priv --\n-      -------------------------------\n+      ----------------------\n+      -- Uses_Unseen_Priv --\n+      ----------------------\n \n-      function Uses_Unseen_Lib_Unit_Priv (Pkg : Entity_Id) return Boolean is\n+      function Uses_Unseen_Priv (Pkg : Entity_Id) return Boolean is\n          Curr : Entity_Id;\n \n       begin\n@@ -2572,7 +2574,7 @@ package body Sem_Ch3 is\n          end if;\n \n          return False;\n-      end Uses_Unseen_Lib_Unit_Priv;\n+      end Uses_Unseen_Priv;\n \n       --  Local variables\n \n@@ -2753,8 +2755,9 @@ package body Sem_Ch3 is\n \n          elsif not Analyzed (Next_Decl) and then Is_Body (Next_Decl)\n            and then ((Nkind (Next_Decl) /= N_Subprogram_Body\n-                      or else not Was_Expression_Function (Next_Decl))\n-                     or else not Uses_Unseen_Lib_Unit_Priv (Current_Scope))\n+                       or else not Was_Expression_Function (Next_Decl))\n+                      or else (not Is_Ignored_Ghost_Entity (Current_Scope)\n+                                and then not Uses_Unseen_Priv (Current_Scope)))\n          then\n             --  When a controlled type is frozen, the expander generates stream\n             --  and controlled-type support routines. If the freeze is caused"}, {"sha": "e1ef3f8c3fa88f7024679fdd27a5c0b4695ca6d5", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=98b779ae494df7c615787a95774e41a99654ad39", "patch": "@@ -4199,9 +4199,15 @@ package body Sem_Elab is\n       Scop_Id : Entity_Id;\n \n    begin\n+      --  Nothing to do when compiling for GNATprove because raise statements\n+      --  are not supported.\n+\n+      if GNATprove_Mode then\n+         return;\n+\n       --  Nothing to do when the compilation will not produce an executable\n \n-      if Serious_Errors_Detected > 0 then\n+      elsif Serious_Errors_Detected > 0 then\n          return;\n \n       --  Nothing to do for a compilation unit because there is no executable\n@@ -4325,9 +4331,15 @@ package body Sem_Elab is\n    --  Start for processing for Install_ABE_Check\n \n    begin\n+      --  Nothing to do when compiling for GNATprove because raise statements\n+      --  are not supported.\n+\n+      if GNATprove_Mode then\n+         return;\n+\n       --  Nothing to do when the compilation will not produce an executable\n \n-      if Serious_Errors_Detected > 0 then\n+      elsif Serious_Errors_Detected > 0 then\n          return;\n \n       --  Nothing to do when the target is a protected subprogram because the\n@@ -4381,9 +4393,15 @@ package body Sem_Elab is\n       Scop_Id : Entity_Id;\n \n    begin\n+      --  Nothing to do when compiling for GNATprove because raise statements\n+      --  are not supported.\n+\n+      if GNATprove_Mode then\n+         return;\n+\n       --  Nothing to do when the compilation will not produce an executable\n \n-      if Serious_Errors_Detected > 0 then\n+      elsif Serious_Errors_Detected > 0 then\n          return;\n \n       --  Do not install an ABE check for a compilation unit because there is"}, {"sha": "3ef0b7b066d23821d11b2c7ad9b6f0665f8d52e5", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 15, "deletions": 38, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=98b779ae494df7c615787a95774e41a99654ad39", "patch": "@@ -3178,14 +3178,6 @@ package body Sem_Res is\n       --  an instance of the default expression. The insertion is always\n       --  a named association.\n \n-      procedure Property_Error\n-        (Var      : Node_Id;\n-         Var_Id   : Entity_Id;\n-         Prop_Nam : Name_Id);\n-      --  Emit an error concerning variable Var with entity Var_Id that has\n-      --  enabled property Prop_Nam when it acts as an actual parameter in a\n-      --  call and the corresponding formal parameter is of mode IN.\n-\n       function Same_Ancestor (T1, T2 : Entity_Id) return Boolean;\n       --  Check whether T1 and T2, or their full views, are derived from a\n       --  common type. Used to enforce the restrictions on array conversions\n@@ -3634,23 +3626,6 @@ package body Sem_Res is\n          Prev := Actval;\n       end Insert_Default;\n \n-      --------------------\n-      -- Property_Error --\n-      --------------------\n-\n-      procedure Property_Error\n-        (Var      : Node_Id;\n-         Var_Id   : Entity_Id;\n-         Prop_Nam : Name_Id)\n-      is\n-      begin\n-         Error_Msg_Name_1 := Prop_Nam;\n-         Error_Msg_NE\n-           (\"external variable & with enabled property % cannot appear as \"\n-            & \"actual in procedure call (SPARK RM 7.1.3(10))\", Var, Var_Id);\n-         Error_Msg_N (\"\\\\corresponding formal parameter has mode In\", Var);\n-      end Property_Error;\n-\n       -------------------\n       -- Same_Ancestor --\n       -------------------\n@@ -4659,26 +4634,28 @@ package body Sem_Res is\n                   Flag_Effectively_Volatile_Objects (A);\n                end if;\n \n-               --  Detect an external variable with an enabled property that\n-               --  does not match the mode of the corresponding formal in a\n-               --  procedure call. Functions are not considered because they\n-               --  cannot have effectively volatile formal parameters in the\n-               --  first place.\n+               --  An effectively volatile variable cannot act as an actual\n+               --  parameter in a procedure call when the variable has enabled\n+               --  property Effective_Reads and the corresponding formal is of\n+               --  mode IN (SPARK RM 7.1.3(10)).\n \n                if Ekind (Nam) = E_Procedure\n                  and then Ekind (F) = E_In_Parameter\n                  and then Is_Entity_Name (A)\n-                 and then Present (Entity (A))\n-                 and then Ekind (Entity (A)) = E_Variable\n                then\n                   A_Id := Entity (A);\n \n-                  if Async_Readers_Enabled (A_Id) then\n-                     Property_Error (A, A_Id, Name_Async_Readers);\n-                  elsif Effective_Reads_Enabled (A_Id) then\n-                     Property_Error (A, A_Id, Name_Effective_Reads);\n-                  elsif Effective_Writes_Enabled (A_Id) then\n-                     Property_Error (A, A_Id, Name_Effective_Writes);\n+                  if Ekind (A_Id) = E_Variable\n+                    and then Is_Effectively_Volatile (Etype (A_Id))\n+                    and then Effective_Reads_Enabled (A_Id)\n+                  then\n+                     Error_Msg_NE\n+                       (\"effectively volatile variable & cannot appear as \"\n+                        & \"actual in procedure call\", A, A_Id);\n+\n+                     Error_Msg_Name_1 := Name_Effective_Reads;\n+                     Error_Msg_N (\"\\\\variable has enabled property %\", A);\n+                     Error_Msg_N (\"\\\\corresponding formal has mode IN\", A);\n                   end if;\n                end if;\n             end if;"}, {"sha": "91f430a29f5848fda8444ad2eef7bcc656103faf", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b779ae494df7c615787a95774e41a99654ad39/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=98b779ae494df7c615787a95774e41a99654ad39", "patch": "@@ -4285,7 +4285,7 @@ package body Sem_Warn is\n                   then\n                      if not Has_Pragma_Unmodified_Check_Spec (E) then\n                         Error_Msg_N -- CODEFIX\n-                          (\"?u?variable & is assigned but never read!\", E);\n+                          (\"?m?variable & is assigned but never read!\", E);\n                      end if;\n \n                      Set_Last_Assignment (E, Empty);"}]}