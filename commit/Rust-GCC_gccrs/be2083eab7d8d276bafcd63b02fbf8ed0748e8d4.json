{"sha": "be2083eab7d8d276bafcd63b02fbf8ed0748e8d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUyMDgzZWFiN2Q4ZDI3NmJhZmNkNjNiMDJmYmY4ZWQwNzQ4ZThkNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-02-05T22:05:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-02-05T22:05:17Z"}, "message": "re PR middle-end/69643 (Address space discarded)\n\nPR c/69643\n\n  * tree.c (tree_nop_conversion_p): Do not strip casts into or\n  out of non-standard address spaces.\ntestsuite/\n  * gcc.target/i386/addr-space-4.c: New.\n  * gcc.target/i386/addr-space-5.c: New.\n\nFrom-SVN: r233189", "tree": {"sha": "9256eb829d4d9384df1f7ec1343fb1516759dc3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9256eb829d4d9384df1f7ec1343fb1516759dc3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/comments", "author": null, "committer": null, "parents": [{"sha": "711d7c231fc6a5a04f65568cf17a47c270527a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711d7c231fc6a5a04f65568cf17a47c270527a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/711d7c231fc6a5a04f65568cf17a47c270527a09"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "9e61921fc060cd79f072b7c868a1b2851951dc81", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be2083eab7d8d276bafcd63b02fbf8ed0748e8d4", "patch": "@@ -1,3 +1,9 @@\n+2016-02-06  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c/69643\n+\t* tree.c (tree_nop_conversion_p): Do not strip casts into or\n+\tout of non-standard address spaces.\n+\n 2016-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/69691"}, {"sha": "d8f088d1bd7dd21ecb5080a29346952af42294cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be2083eab7d8d276bafcd63b02fbf8ed0748e8d4", "patch": "@@ -1,3 +1,9 @@\n+2016-02-06  Richard HEnderson  <rth@redhat.com>\n+\n+\tPR c/69643\n+\t* gcc.target/i386/addr-space-4.c: New.\n+\t* gcc.target/i386/addr-space-5.c: New.\n+\n 2016-02-05  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/66089"}, {"sha": "3e0966db69a33312b28731d9d6279ae053c44302", "filename": "gcc/testsuite/gcc.target/i386/addr-space-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-4.c?ref=be2083eab7d8d276bafcd63b02fbf8ed0748e8d4", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-final { scan-assembler \"gs:\" } } */\n+\n+#define uintptr_t __SIZE_TYPE__\n+\n+struct S { int a, b, c; };\n+\n+extern struct S __seg_gs s;\n+\n+int foo (void)\n+{\n+  int r;\n+  r = s.c;\n+  return r;\n+}"}, {"sha": "4f73f95aa3f25ac56edea812e2484d41c7bb874d", "filename": "gcc/testsuite/gcc.target/i386/addr-space-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-5.c?ref=be2083eab7d8d276bafcd63b02fbf8ed0748e8d4", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-final { scan-assembler \"gs:\" } } */\n+\n+#define uintptr_t __SIZE_TYPE__\n+\n+struct S { int a, b, c; };\n+\n+extern struct S s;\n+\n+int ct_state3 (void)\n+{\n+  int r;\n+  r = *((int __seg_gs *) (uintptr_t) &s.c);\n+  return r;\n+}"}, {"sha": "07cb9d9765ca91806d5e987527fb1a3bd38b77bc", "filename": "gcc/tree.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2083eab7d8d276bafcd63b02fbf8ed0748e8d4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=be2083eab7d8d276bafcd63b02fbf8ed0748e8d4", "patch": "@@ -12219,6 +12219,23 @@ block_ultimate_origin (const_tree block)\n bool\n tree_nop_conversion_p (const_tree outer_type, const_tree inner_type)\n {\n+  /* Do not strip casts into or out of differing address spaces.  */\n+  if (POINTER_TYPE_P (outer_type)\n+      && TYPE_ADDR_SPACE (TREE_TYPE (outer_type)) != ADDR_SPACE_GENERIC)\n+    {\n+      if (!POINTER_TYPE_P (inner_type)\n+\t  || (TYPE_ADDR_SPACE (TREE_TYPE (outer_type))\n+\t      != TYPE_ADDR_SPACE (TREE_TYPE (inner_type))))\n+\treturn false;\n+    }\n+  else if (POINTER_TYPE_P (inner_type)\n+\t   && TYPE_ADDR_SPACE (TREE_TYPE (inner_type)) != ADDR_SPACE_GENERIC)\n+    {\n+      /* We already know that outer_type is not a pointer with\n+\t a non-generic address space.  */\n+      return false;\n+    }\n+\n   /* Use precision rather then machine mode when we can, which gives\n      the correct answer even for submode (bit-field) types.  */\n   if ((INTEGRAL_TYPE_P (outer_type)"}]}