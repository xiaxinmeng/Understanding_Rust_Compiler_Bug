{"sha": "cd41085a37b8288dbdfe0f81027ce04b978578f1", "node_id": "C_kwDOANBUbNoAKGNkNDEwODVhMzdiODI4OGRiZGZlMGY4MTAyN2NlMDRiOTc4NTc4ZjE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-02-02T14:53:34Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-02-02T14:53:34Z"}, "message": "rtl-ssa: Extend m_num_defs to a full unsigned int [PR108086]\n\ninsn_info tried to save space by storing the number of\ndefinitions in a 16-bit bitfield.  The justification was:\n\n  // ...  FIRST_PSEUDO_REGISTER + 1\n  // is the maximum number of accesses to hard registers and memory, and\n  // MAX_RECOG_OPERANDS is the maximum number of pseudos that can be\n  // defined by an instruction, so the number of definitions should fit\n  // easily in 16 bits.\n\nBut while that reasoning holds (I think) for real instructions,\nit doesn't hold for artificial instructions.  I don't think there's\nany sensible higher limit we can use, so this patch goes for a full\nunsigned int.\n\ngcc/\n\tPR rtl-optimization/108086\n\t* rtl-ssa/insns.h (insn_info): Make m_num_defs a full unsigned int.\n\tAdjust size-related commentary accordingly.", "tree": {"sha": "5058c4bfdb1d448a45b7c0f84a06aaca79423a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5058c4bfdb1d448a45b7c0f84a06aaca79423a74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd41085a37b8288dbdfe0f81027ce04b978578f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd41085a37b8288dbdfe0f81027ce04b978578f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd41085a37b8288dbdfe0f81027ce04b978578f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd41085a37b8288dbdfe0f81027ce04b978578f1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e1b46618ef3bd7933992ab79f663ab9112bb80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e1b46618ef3bd7933992ab79f663ab9112bb80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e1b46618ef3bd7933992ab79f663ab9112bb80"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "a604fe295cd194e6d729524d36b6388e39f69bc9", "filename": "gcc/rtl-ssa/insns.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd41085a37b8288dbdfe0f81027ce04b978578f1/gcc%2Frtl-ssa%2Finsns.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd41085a37b8288dbdfe0f81027ce04b978578f1/gcc%2Frtl-ssa%2Finsns.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-ssa%2Finsns.h?ref=cd41085a37b8288dbdfe0f81027ce04b978578f1", "patch": "@@ -141,7 +141,7 @@ using insn_call_clobbers_tree = default_splay_tree<insn_call_clobbers_note *>;\n // of \"notes\", a bit like REG_NOTES for the underlying RTL insns.\n class insn_info\n {\n-  // Size: 8 LP64 words.\n+  // Size: 9 LP64 words.\n   friend class ebb_info;\n   friend class function_info;\n \n@@ -401,10 +401,11 @@ class insn_info\n   // The number of definitions and the number uses.  FIRST_PSEUDO_REGISTER + 1\n   // is the maximum number of accesses to hard registers and memory, and\n   // MAX_RECOG_OPERANDS is the maximum number of pseudos that can be\n-  // defined by an instruction, so the number of definitions should fit\n-  // easily in 16 bits.\n+  // defined by an instruction, so the number of definitions in a real\n+  // instruction should fit easily in 16 bits.  However, there are no\n+  // limits on the number of definitions in artifical instructions.\n   unsigned int m_num_uses;\n-  unsigned int m_num_defs : 16;\n+  unsigned int m_num_defs;\n \n   // Flags returned by the accessors above.\n   unsigned int m_is_debug_insn : 1;\n@@ -414,7 +415,7 @@ class insn_info\n   unsigned int m_has_volatile_refs : 1;\n \n   // For future expansion.\n-  unsigned int m_spare : 11;\n+  unsigned int m_spare : 27;\n \n   // The program point at which the instruction occurs.\n   //\n@@ -431,6 +432,9 @@ class insn_info\n   // instruction.\n   mutable int m_cost_or_uid;\n \n+  // On LP64 systems, there's a gap here that could be used for future\n+  // expansion.\n+\n   // The list of notes that have been attached to the instruction.\n   insn_note *m_first_note;\n };"}]}