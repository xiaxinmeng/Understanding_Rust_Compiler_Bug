{"sha": "55ace4d14637866466498ed43e02d6f95af98f10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVhY2U0ZDE0NjM3ODY2NDY2NDk4ZWQ0M2UwMmQ2Zjk1YWY5OGYxMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-03-05T21:01:30Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-03-05T21:01:30Z"}, "message": "Fix location maybe_diag_overlap passes to diagnostics so that diagnostic pragmas work better.\n\n\tPR tree-optimization/91890\n\t* gimple-ssa-warn-restrict.c (maybe_diag_overlap): Remove LOC argument.\n\tUse gimple_or_expr_nonartificial_location.\n\t(check_bounds_overlap): Drop LOC argument to maybe_diag_access_bounds.\n\tUse gimple_or_expr_nonartificial_location.\n\t* gimple.c (gimple_or_expr_nonartificial_location): New function.\n\t* gimple.h (gimple_or_expr_nonartificial_location): Declare it.\n\t* tree-ssa-strlen.c (maybe_warn_overflow): Use\n\tgimple_or_expr_nonartificial_location.\n\t(maybe_diag_stxncpy_trunc, handle_builtin_stxncpy_strncat): Likewise.\n\t(maybe_warn_pointless_strcmp): Likewise.\n\n\t* gcc.dg/pragma-diag-8.c: New test.", "tree": {"sha": "0bcdec4218fa6088b63ee2eb78903424aeb38f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bcdec4218fa6088b63ee2eb78903424aeb38f58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55ace4d14637866466498ed43e02d6f95af98f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ace4d14637866466498ed43e02d6f95af98f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55ace4d14637866466498ed43e02d6f95af98f10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ace4d14637866466498ed43e02d6f95af98f10/comments", "author": null, "committer": null, "parents": [{"sha": "3a0e583bf17240e55fee7b490e13753cca52bfe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0e583bf17240e55fee7b490e13753cca52bfe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0e583bf17240e55fee7b490e13753cca52bfe1"}], "stats": {"total": 93, "additions": 63, "deletions": 30}, "files": [{"sha": "14e90fbd8b7961950364f2528b9a1991f37c3d16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55ace4d14637866466498ed43e02d6f95af98f10", "patch": "@@ -1,3 +1,17 @@\n+2020-03-05  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/91890\n+\t* gimple-ssa-warn-restrict.c (maybe_diag_overlap): Remove LOC argument.\n+\tUse gimple_or_expr_nonartificial_location.\n+\t(check_bounds_overlap): Drop LOC argument to maybe_diag_access_bounds.\n+\tUse gimple_or_expr_nonartificial_location.\n+\t* gimple.c (gimple_or_expr_nonartificial_location): New function.\n+\t* gimple.h (gimple_or_expr_nonartificial_location): Declare it.\n+\t* tree-ssa-strlen.c (maybe_warn_overflow): Use\n+\tgimple_or_expr_nonartificial_location.\n+\t(maybe_diag_stxncpy_trunc, handle_builtin_stxncpy_strncat): Likewise.\n+\t(maybe_warn_pointless_strcmp): Likewise.\n+\n 2020-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94046"}, {"sha": "5e7e5d41dbb44a5b26551dd92acbf808857b2429", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=55ace4d14637866466498ed43e02d6f95af98f10", "patch": "@@ -1692,10 +1692,11 @@ maybe_diag_overlap (location_t loc, gimple *call, builtin_access &acs)\n    has been issued, or would have been issued if DO_WARN had been true.  */\n \n static bool\n-maybe_diag_access_bounds (location_t loc, gimple *call, tree func, int strict,\n+maybe_diag_access_bounds (gimple *call, tree func, int strict,\n \t\t\t  const builtin_memref &ref, offset_int wroff,\n \t\t\t  bool do_warn)\n {\n+  location_t loc = gimple_or_expr_nonartificial_location (call, ref.ptr);\n   const offset_int maxobjsize = ref.maxobjsize;\n \n   /* Check for excessive size first and regardless of warning options\n@@ -1711,11 +1712,6 @@ maybe_diag_access_bounds (location_t loc, gimple *call, tree func, int strict,\n \n       if (warn_stringop_overflow)\n \t{\n-\t  if (EXPR_HAS_LOCATION (ref.ptr))\n-\t    loc = EXPR_LOCATION (ref.ptr);\n-\n-\t  loc = expansion_point_location_if_in_system_header (loc);\n-\n \t  if (ref.sizrange[0] == ref.sizrange[1])\n \t    return warning_at (loc, OPT_Wstringop_overflow_,\n \t\t\t       \"%G%qD specified bound %wu \"\n@@ -1754,11 +1750,6 @@ maybe_diag_access_bounds (location_t loc, gimple *call, tree func, int strict,\n       || (ref.ref && TREE_NO_WARNING (ref.ref)))\n     return false;\n \n-  if (EXPR_HAS_LOCATION (ref.ptr))\n-    loc = EXPR_LOCATION (ref.ptr);\n-\n-  loc = expansion_point_location_if_in_system_header (loc);\n-\n   char rangestr[2][64];\n   if (ooboff[0] == ooboff[1]\n       || (ooboff[0] != ref.offrange[0]\n@@ -2018,9 +2009,6 @@ check_bounds_or_overlap (gimple *call, tree dst, tree src, tree dstsize,\n \t\t\t tree srcsize, bool bounds_only /* = false */,\n \t\t\t bool do_warn /* = true */)\n {\n-  location_t loc = gimple_nonartificial_location (call);\n-  loc = expansion_point_location_if_in_system_header (loc);\n-\n   tree func = gimple_call_fndecl (call);\n \n   builtin_memref dstref (dst, dstsize);\n@@ -2041,8 +2029,8 @@ check_bounds_or_overlap (gimple *call, tree dst, tree src, tree dstsize,\n   /* Validate offsets to each reference before the access first to make\n      sure they are within the bounds of the destination object if its\n      size is known, or PTRDIFF_MAX otherwise.  */\n-  if (maybe_diag_access_bounds (loc, call, func, strict, dstref, wroff, do_warn)\n-      || maybe_diag_access_bounds (loc, call, func, strict, srcref, 0, do_warn))\n+  if (maybe_diag_access_bounds (call, func, strict, dstref, wroff, do_warn)\n+      || maybe_diag_access_bounds (call, func, strict, srcref, 0, do_warn))\n     {\n       if (do_warn)\n \tgimple_set_no_warning (call, true);\n@@ -2066,6 +2054,7 @@ check_bounds_or_overlap (gimple *call, tree dst, tree src, tree dstsize,\n \t}\n     }\n \n+  location_t loc = gimple_or_expr_nonartificial_location (call, dst);\n   if (operand_equal_p (dst, src, 0))\n     {\n       /* Issue -Wrestrict unless the pointers are null (those do"}, {"sha": "92c6e6425897c06f33c83795b10207cd92dfd15c", "filename": "gcc/gimple.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=55ace4d14637866466498ed43e02d6f95af98f10", "patch": "@@ -3285,6 +3285,19 @@ gimple_inexpensive_call_p (gcall *stmt)\n   return false;\n }\n \n+/* Return a non-artificial location for STMT.  If STMT does not have\n+   location information, get the location from EXPR.  */\n+\n+location_t\n+gimple_or_expr_nonartificial_location (gimple *stmt, tree)\n+{\n+  location_t loc = gimple_nonartificial_location (stmt);\n+  if (loc == UNKNOWN_LOCATION && EXPR_HAS_LOCATION (expr))\n+    loc = tree_nonartificial_location (expr);\n+  return expansion_point_location_if_in_system_header (loc);\n+}\n+\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "0420d6d2251f7df02c45e5296a93fcc28b2629e9", "filename": "gcc/gimple.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=55ace4d14637866466498ed43e02d6f95af98f10", "patch": "@@ -1633,6 +1633,8 @@ extern void gimple_seq_discard (gimple_seq);\n extern void maybe_remove_unused_call_args (struct function *, gimple *);\n extern bool gimple_inexpensive_call_p (gcall *);\n extern bool stmt_can_terminate_bb_p (gimple *);\n+extern location_t gimple_or_expr_nonartificial_location (gimple *, tree);\n+\n \n /* Formal (expression) temporary table handling: multiple occurrences of\n    the same scalar expression are evaluated into the same temporary.  */"}, {"sha": "36c87d68e5671215031cf5aada40e62ff052ba27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55ace4d14637866466498ed43e02d6f95af98f10", "patch": "@@ -1,3 +1,8 @@\n+2020-03-05  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/91890\n+\t* gcc.dg/pragma-diag-8.c: New test.\n+\n 2020-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94046"}, {"sha": "00780606e9bfb01ed11fc3ac3cf66bcc46c50740", "filename": "gcc/testsuite/gcc.dg/pragma-diag-8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-8.c?ref=55ace4d14637866466498ed43e02d6f95af98f10", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+\n+char one[50];\n+char two[50];\n+\n+void\n+test_strncat (void)\n+{\n+  (void) __builtin_strcpy (one, \"gh\");\n+  (void) __builtin_strcpy (two, \"ef\");\n+ \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wstringop-overflow=\"\n+#pragma GCC diagnostic ignored \"-Warray-bounds\"\n+  (void) __builtin_strncat (one, two, 99); \n+#pragma GCC diagnostic pop\n+}\n+"}, {"sha": "8815cdbc9ca3c644a600d16a2406e14d861e0866", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ace4d14637866466498ed43e02d6f95af98f10/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=55ace4d14637866466498ed43e02d6f95af98f10", "patch": "@@ -2129,11 +2129,7 @@ maybe_warn_overflow (gimple *stmt, tree len,\n \t  || !si || !is_strlen_related_p (si->ptr, len)))\n     return;\n \n-  location_t loc = gimple_nonartificial_location (stmt);\n-  if (loc == UNKNOWN_LOCATION && dest && EXPR_HAS_LOCATION (dest))\n-    loc = tree_nonartificial_location (dest);\n-  loc = expansion_point_location_if_in_system_header (loc);\n-\n+  location_t loc = gimple_or_expr_nonartificial_location (stmt, dest);\n   bool warned = false;\n   if (wi::leu_p (lenrng[0], spcrng[1]))\n     {\n@@ -3189,9 +3185,7 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t}\n     }\n \n-  location_t callloc = gimple_nonartificial_location (stmt);\n-  callloc = expansion_point_location_if_in_system_header (callloc);\n-\n+  location_t callloc = gimple_or_expr_nonartificial_location (stmt, dst);\n   tree func = gimple_call_fndecl (stmt);\n \n   if (lenrange[0] != 0 || !wi::neg_p (lenrange[1]))\n@@ -3403,8 +3397,7 @@ handle_builtin_stxncpy_strncat (bool append_p, gimple_stmt_iterator *gsi)\n      to strlen(S)).  */\n   strinfo *silen = get_strinfo (pss->first);\n \n-  location_t callloc = gimple_nonartificial_location (stmt);\n-  callloc = expansion_point_location_if_in_system_header (callloc);\n+  location_t callloc = gimple_or_expr_nonartificial_location (stmt, dst);\n \n   tree func = gimple_call_fndecl (stmt);\n \n@@ -4331,10 +4324,7 @@ maybe_warn_pointless_strcmp (gimple *stmt, HOST_WIDE_INT bound,\n \n   /* FIXME: Include a note pointing to the declaration of the smaller\n      array.  */\n-  location_t stmt_loc = gimple_nonartificial_location (stmt);\n-  if (stmt_loc == UNKNOWN_LOCATION && EXPR_HAS_LOCATION (lhs))\n-    stmt_loc = tree_nonartificial_location (lhs);\n-  stmt_loc = expansion_point_location_if_in_system_header (stmt_loc);\n+  location_t stmt_loc = gimple_or_expr_nonartificial_location (stmt, lhs);\n \n   tree callee = gimple_call_fndecl (stmt);\n   bool warned = false;"}]}