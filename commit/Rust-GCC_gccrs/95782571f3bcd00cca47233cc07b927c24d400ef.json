{"sha": "95782571f3bcd00cca47233cc07b927c24d400ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3ODI1NzFmM2JjZDAwY2NhNDcyMzNjYzA3YjkyN2MyNGQ0MDBlZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-05-02T17:43:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-05-02T17:43:40Z"}, "message": "gimplify.c (gimplify_adjust_omp_clauses_1): Handle GOVD_FIRSTPRIVATE | GOVD_LASTPRIVATE.\n\n\t* gimplify.c (gimplify_adjust_omp_clauses_1): Handle\n\tGOVD_FIRSTPRIVATE | GOVD_LASTPRIVATE.\n\t(gimplify_adjust_omp_clauses): Simd region is never\n\tdirectly nested in combined parallel.  Instead, for linear\n\twith copyin/copyout, if in combined for simd loop, make decl\n\tfirstprivate/lastprivate on OMP_FOR.\n\t* omp-low.c (expand_omp_for_generic, expand_omp_for_static_nochunk,\n\texpand_omp_for_static_chunk): When setting endvar, also set\n\tfd->loop.v to the same value.\nlibgomp/\n\t* testsuite/libgomp.c/simd-10.c: New test.\n\t* testsuite/libgomp.c/simd-11.c: New test.\n\t* testsuite/libgomp.c/simd-12.c: New test.\n\t* testsuite/libgomp.c/simd-13.c: New test.\n\nFrom-SVN: r210009", "tree": {"sha": "af453d4b9541da0c90d1c0689ff569fa7c986574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af453d4b9541da0c90d1c0689ff569fa7c986574"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95782571f3bcd00cca47233cc07b927c24d400ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95782571f3bcd00cca47233cc07b927c24d400ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95782571f3bcd00cca47233cc07b927c24d400ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95782571f3bcd00cca47233cc07b927c24d400ef/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "047f1cec7fe69c13ed55fcdd005ace93397f0a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047f1cec7fe69c13ed55fcdd005ace93397f0a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047f1cec7fe69c13ed55fcdd005ace93397f0a95"}], "stats": {"total": 148, "additions": 141, "deletions": 7}, "files": [{"sha": "959780580130d1c6990a8e08fca71cbb5b1b50f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95782571f3bcd00cca47233cc07b927c24d400ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95782571f3bcd00cca47233cc07b927c24d400ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95782571f3bcd00cca47233cc07b927c24d400ef", "patch": "@@ -1,3 +1,15 @@\n+2014-05-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.c (gimplify_adjust_omp_clauses_1): Handle\n+\tGOVD_FIRSTPRIVATE | GOVD_LASTPRIVATE.\n+\t(gimplify_adjust_omp_clauses): Simd region is never\n+\tdirectly nested in combined parallel.  Instead, for linear\n+\twith copyin/copyout, if in combined for simd loop, make decl\n+\tfirstprivate/lastprivate on OMP_FOR.\n+\t* omp-low.c (expand_omp_for_generic, expand_omp_for_static_nochunk,\n+\texpand_omp_for_static_chunk): When setting endvar, also set\n+\tfd->loop.v to the same value.\n+\n 2014-05-02  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n \n \t* hwint.h (zext_hwi): Fix signed overflow for prec == 63."}, {"sha": "37c3778624f2f1bd1cd386325450820b14c104cf", "filename": "gcc/gimplify.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95782571f3bcd00cca47233cc07b927c24d400ef/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95782571f3bcd00cca47233cc07b927c24d400ef/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=95782571f3bcd00cca47233cc07b927c24d400ef", "patch": "@@ -6273,9 +6273,17 @@ gimplify_adjust_omp_clauses_1 (splay_tree_node n, void *data)\n \t  OMP_CLAUSE_CHAIN (clause) = nc;\n \t}\n     }\n+  if (code == OMP_CLAUSE_FIRSTPRIVATE && (flags & GOVD_LASTPRIVATE) != 0)\n+    {\n+      tree nc = build_omp_clause (input_location, OMP_CLAUSE_LASTPRIVATE);\n+      OMP_CLAUSE_DECL (nc) = decl;\n+      OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE (nc) = 1;\n+      OMP_CLAUSE_CHAIN (nc) = *list_p;\n+      OMP_CLAUSE_CHAIN (clause) = nc;\n+      lang_hooks.decls.omp_finish_clause (nc);\n+    }\n   *list_p = clause;\n   lang_hooks.decls.omp_finish_clause (clause);\n-\n   return 0;\n }\n \n@@ -6314,26 +6322,25 @@ gimplify_adjust_omp_clauses (tree *list_p)\n \t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINEAR\n \t\t  && ctx->outer_context\n \t\t  && !(OMP_CLAUSE_LINEAR_NO_COPYIN (c)\n-\t\t       && OMP_CLAUSE_LINEAR_NO_COPYOUT (c))\n-\t\t  && !is_global_var (decl))\n+\t\t       && OMP_CLAUSE_LINEAR_NO_COPYOUT (c)))\n \t\t{\n-\t\t  if (ctx->outer_context->region_type == ORT_COMBINED_PARALLEL)\n+\t\t  if (ctx->outer_context->combined_loop\n+\t\t      && !OMP_CLAUSE_LINEAR_NO_COPYIN (c))\n \t\t    {\n \t\t      n = splay_tree_lookup (ctx->outer_context->variables,\n \t\t\t\t\t     (splay_tree_key) decl);\n \t\t      if (n == NULL\n \t\t\t  || (n->value & GOVD_DATA_SHARE_CLASS) == 0)\n \t\t\t{\n-\t\t\t  int flags = OMP_CLAUSE_LINEAR_NO_COPYIN (c)\n-\t\t\t\t      ? GOVD_LASTPRIVATE : GOVD_SHARED;\n+\t\t\t  int flags = GOVD_FIRSTPRIVATE | GOVD_LASTPRIVATE;\n \t\t\t  if (n == NULL)\n \t\t\t    omp_add_variable (ctx->outer_context, decl,\n \t\t\t\t\t      flags | GOVD_SEEN);\n \t\t\t  else\n \t\t\t    n->value |= flags | GOVD_SEEN;\n \t\t\t}\n \t\t    }\n-\t\t  else\n+\t\t  else if (!is_global_var (decl))\n \t\t    omp_notice_variable (ctx->outer_context, decl, true);\n \t\t}\n \t    }"}, {"sha": "453bd294fd4fb769f948917b600d9cdfac84f84d", "filename": "gcc/omp-low.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95782571f3bcd00cca47233cc07b927c24d400ef/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95782571f3bcd00cca47233cc07b927c24d400ef/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=95782571f3bcd00cca47233cc07b927c24d400ef", "patch": "@@ -5584,6 +5584,12 @@ expand_omp_for_generic (struct omp_region *region,\n     {\n       stmt = gimple_build_assign (endvar, iend);\n       gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n+      if (useless_type_conversion_p (TREE_TYPE (fd->loop.v), TREE_TYPE (iend)))\n+\tstmt = gimple_build_assign (fd->loop.v, iend);\n+      else\n+\tstmt = gimple_build_assign_with_ops (NOP_EXPR, fd->loop.v, iend,\n+\t\t\t\t\t     NULL_TREE);\n+      gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n     }\n   if (fd->collapse > 1)\n     expand_omp_for_init_vars (fd, &gsi, counts, inner_stmt, startvar);\n@@ -6000,6 +6006,12 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n     {\n       stmt = gimple_build_assign (endvar, e);\n       gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n+      if (useless_type_conversion_p (TREE_TYPE (fd->loop.v), TREE_TYPE (e)))\n+\tstmt = gimple_build_assign (fd->loop.v, e);\n+      else\n+\tstmt = gimple_build_assign_with_ops (NOP_EXPR, fd->loop.v, e,\n+\t\t\t\t\t     NULL_TREE);\n+      gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n     }\n   if (fd->collapse > 1)\n     expand_omp_for_init_vars (fd, &gsi, counts, inner_stmt, startvar);\n@@ -6385,6 +6397,12 @@ expand_omp_for_static_chunk (struct omp_region *region,\n     {\n       stmt = gimple_build_assign (endvar, e);\n       gsi_insert_after (&si, stmt, GSI_CONTINUE_LINKING);\n+      if (useless_type_conversion_p (TREE_TYPE (fd->loop.v), TREE_TYPE (e)))\n+\tstmt = gimple_build_assign (fd->loop.v, e);\n+      else\n+\tstmt = gimple_build_assign_with_ops (NOP_EXPR, fd->loop.v, e,\n+\t\t\t\t\t     NULL_TREE);\n+      gsi_insert_after (&si, stmt, GSI_CONTINUE_LINKING);\n     }\n   if (fd->collapse > 1)\n     expand_omp_for_init_vars (fd, &si, counts, inner_stmt, startvar);"}, {"sha": "c73e60ba2da1bedf6a0846b833579400fae81abe", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95782571f3bcd00cca47233cc07b927c24d400ef/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95782571f3bcd00cca47233cc07b927c24d400ef/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=95782571f3bcd00cca47233cc07b927c24d400ef", "patch": "@@ -1,3 +1,10 @@\n+2014-05-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/simd-10.c: New test.\n+\t* testsuite/libgomp.c/simd-11.c: New test.\n+\t* testsuite/libgomp.c/simd-12.c: New test.\n+\t* testsuite/libgomp.c/simd-13.c: New test.\n+\n 2014-04-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c++/atomic-14.C: Allow seq_cst and"}, {"sha": "70cd9f0156d111fcb62e153e224e624eebcf37f4", "filename": "libgomp/testsuite/libgomp.c/simd-10.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95782571f3bcd00cca47233cc07b927c24d400ef/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95782571f3bcd00cca47233cc07b927c24d400ef/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-10.c?ref=95782571f3bcd00cca47233cc07b927c24d400ef", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-msse2\" { target sse2_runtime } } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+int s = 0, i, u;\n+\n+void\n+foo ()\n+{\n+  #pragma omp for simd schedule(static, 32) reduction(+:s) lastprivate(u)\n+  for (i = 0; i < 128; i++)\n+    {\n+      s++;\n+      u = i;\n+    }\n+  if (i != 128 || s != 128 || u != 127)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "b09f0dde8edc0bdf02f25de737ef065f4e3e65e5", "filename": "libgomp/testsuite/libgomp.c/simd-11.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95782571f3bcd00cca47233cc07b927c24d400ef/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95782571f3bcd00cca47233cc07b927c24d400ef/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-11.c?ref=95782571f3bcd00cca47233cc07b927c24d400ef", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-msse2\" { target sse2_runtime } } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+int s = 0, i, j, u;\n+\n+void\n+foo ()\n+{\n+  #pragma omp for simd schedule(static, 32) reduction(+:s) lastprivate(u) collapse(2)\n+  for (i = 0; i < 16; i++)\n+    for (j = 0; j < 16; j++)\n+      {\n+\ts++;\n+\tu = i + j;\n+      }\n+  if (i != 16 || j != 16 || s != 256 || u != 30)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "6685111a06ea1307ad9ebc8c8f9a5266bff11bc3", "filename": "libgomp/testsuite/libgomp.c/simd-12.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95782571f3bcd00cca47233cc07b927c24d400ef/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95782571f3bcd00cca47233cc07b927c24d400ef/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-12.c?ref=95782571f3bcd00cca47233cc07b927c24d400ef", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-msse2\" { target sse2_runtime } } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+int\n+main ()\n+{\n+  int k = 0, i, s = 0;\n+  #pragma omp parallel\n+  #pragma omp for simd linear(k : 3) reduction(+: s) schedule (static, 16)\n+  for (i = 0; i < 128; i++)\n+    {\n+      k = k + 3;\n+      s = s + k;\n+    }\n+  if (s != 128 * 129 / 2 * 3) __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "7c817b793dbe01ffb5a28dc258dabdd3d16bf0d1", "filename": "libgomp/testsuite/libgomp.c/simd-13.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95782571f3bcd00cca47233cc07b927c24d400ef/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95782571f3bcd00cca47233cc07b927c24d400ef/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fsimd-13.c?ref=95782571f3bcd00cca47233cc07b927c24d400ef", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-msse2\" { target sse2_runtime } } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+\n+int\n+main ()\n+{\n+  int k = 0, i, s = 0;\n+  #pragma omp parallel for simd linear(k : 3) reduction(+: s) schedule (static, 16)\n+  for (i = 0; i < 128; i++)\n+    {\n+      k = k + 3;\n+      s = s + k;\n+    }\n+  if (s != 128 * 129 / 2 * 3) __builtin_abort ();\n+  return 0;\n+}"}]}