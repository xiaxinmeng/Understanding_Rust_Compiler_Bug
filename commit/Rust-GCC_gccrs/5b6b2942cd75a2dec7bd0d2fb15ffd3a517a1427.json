{"sha": "5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI2YjI5NDJjZDc1YTJkZWM3YmQwZDJmYjE1ZmZkM2E1MTdhMTQyNw==", "commit": {"author": {"name": "Mikael Pettersson", "email": "mikpe@it.uu.se", "date": "2011-10-18T11:31:45Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-10-18T11:31:45Z"}, "message": "In gcc/objc/: 2011-10-18 Mikael Pettersson <mikpe@it.uu.se>\n\nIn gcc/objc/:\n2011-10-18  Mikael Pettersson  <mikpe@it.uu.se>\n\n\tPR objc/50743\n\t* objc-act.c (check_duplicates): Cast TREE_VEC_LENGTH result to\n\tsize_t to avoid signed/unsigned\n\tcomparison.\n\t(insert_method_into_method_map): Likewise.\n\nFrom-SVN: r180132", "tree": {"sha": "a007dc3e24a758f2beca55df5f6e350610e459a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a007dc3e24a758f2beca55df5f6e350610e459a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427/comments", "author": null, "committer": null, "parents": [{"sha": "6cc4833a49bcde8810c49d65445fc416073fd0fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc4833a49bcde8810c49d65445fc416073fd0fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc4833a49bcde8810c49d65445fc416073fd0fe"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "6e32f5f4b8a0738b2aea7d5e74e69bc19961314c", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427", "patch": "@@ -1,3 +1,11 @@\n+2011-10-18  Mikael Pettersson  <mikpe@it.uu.se>\n+\n+\tPR objc/50743\n+\t* objc-act.c (check_duplicates): Cast TREE_VEC_LENGTH result to\n+\tsize_t to avoid signed/unsigned\n+\tcomparison.\n+\t(insert_method_into_method_map): Likewise.\n+\n 2011-10-14  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-map.h: New file."}, {"sha": "9690113862e6deac77f9e164ebbde0f0e4d6c4b4", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=5b6b2942cd75a2dec7bd0d2fb15ffd3a517a1427", "patch": "@@ -5070,7 +5070,7 @@ check_duplicates (tree method, int methods, int is_class)\n      alignment.  */\n   if (!warn_strict_selector_match)\n     {\n-      for (i = 0; i < TREE_VEC_LENGTH (method); i++)\n+      for (i = 0; i < (size_t) TREE_VEC_LENGTH (method); i++)\n \tif (!comp_proto_with_proto (first_method, TREE_VEC_ELT (method, i), 0))\n \t  goto issue_warning;\n       \n@@ -5103,7 +5103,7 @@ check_duplicates (tree method, int methods, int is_class)\n \t      identifier_to_locale (gen_method_decl (first_method)));\n     }\n   \n-  for (i = 0; i < TREE_VEC_LENGTH (method); i++)\n+  for (i = 0; i < (size_t) TREE_VEC_LENGTH (method); i++)\n     {\n       bool type = TREE_CODE (TREE_VEC_ELT (method, i)) == INSTANCE_METHOD_DECL;\n       \n@@ -5825,7 +5825,7 @@ insert_method_into_method_map (bool class_method, tree method)\n \t  /* Check all the existing prototypes.  If any matches the\n \t     one we need to add, there is nothing to do because it's\n \t     already there.  */\n-\t  for (i = 0; i < TREE_VEC_LENGTH (existing_entry); i++)\n+\t  for (i = 0; i < (size_t) TREE_VEC_LENGTH (existing_entry); i++)\n \t    if (comp_proto_with_proto (method, TREE_VEC_ELT (existing_entry, i), 1))\n \t      return;\n \n@@ -5837,7 +5837,7 @@ insert_method_into_method_map (bool class_method, tree method)\n \t  new_entry = make_tree_vec (TREE_VEC_LENGTH (existing_entry) + 1);\n \t  \n \t  /* Copy the methods from the existing vector.  */\n-\t  for (i = 0; i < TREE_VEC_LENGTH (existing_entry); i++)\n+\t  for (i = 0; i < (size_t) TREE_VEC_LENGTH (existing_entry); i++)\n \t    TREE_VEC_ELT (new_entry, i) = TREE_VEC_ELT (existing_entry, i);\n \t  \n \t  /* Add the new method at the end.  */"}]}