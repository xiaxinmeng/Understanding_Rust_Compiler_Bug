{"sha": "3764d512d514c5011bf6473075444d49de284e05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc2NGQ1MTJkNTE0YzUwMTFiZjY0NzMwNzU0NDRkNDlkZTI4NGUwNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-04-25T13:32:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-25T13:32:43Z"}, "message": "re PR bootstrap/39645 (uninitialized variable in genattrtab.c)\n\n\tPR bootstrap/39645\n\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Set TREE_ADDRESSABLE\n\ton the destination of memcpy.\n\nFrom-SVN: r146772", "tree": {"sha": "67df10f61f8cbcb8ffd8de4de015cba97f6bb04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67df10f61f8cbcb8ffd8de4de015cba97f6bb04a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3764d512d514c5011bf6473075444d49de284e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3764d512d514c5011bf6473075444d49de284e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3764d512d514c5011bf6473075444d49de284e05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3764d512d514c5011bf6473075444d49de284e05/comments", "author": null, "committer": null, "parents": [{"sha": "a687f83c5ae302e0e1abff0af5992eeb02f510a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a687f83c5ae302e0e1abff0af5992eeb02f510a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a687f83c5ae302e0e1abff0af5992eeb02f510a7"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "6d2ae2296a3e2048dad47d37585362d951307462", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3764d512d514c5011bf6473075444d49de284e05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3764d512d514c5011bf6473075444d49de284e05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3764d512d514c5011bf6473075444d49de284e05", "patch": "@@ -1,3 +1,9 @@\n+2009-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR bootstrap/39645\n+\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Set TREE_ADDRESSABLE\n+\ton the destination of memcpy.\n+\n 2009-04-25  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* doc/tm.texi (REGNO_OK_FOR_BASE_P, REGNO_MODE_OK_FOR_BASE_P,"}, {"sha": "61c5700fa1b95ca0989553c83b56cf674286f38f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3764d512d514c5011bf6473075444d49de284e05/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3764d512d514c5011bf6473075444d49de284e05/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3764d512d514c5011bf6473075444d49de284e05", "patch": "@@ -5740,7 +5740,7 @@ sparc_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n       size = int_size_in_bytes (type);\n       rsize = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;\n       align = 0;\n-    \n+\n       if (TARGET_ARCH64)\n \t{\n \t  /* For SPARC64, objects requiring 16-byte alignment get it.  */\n@@ -5782,28 +5782,25 @@ sparc_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n       addr = fold_convert (build_pointer_type (ptrtype), addr);\n       addr = build_va_arg_indirect_ref (addr);\n     }\n-  /* If the address isn't aligned properly for the type,\n-     we may need to copy to a temporary.  \n-     FIXME: This is inefficient.  Usually we can do this\n-     in registers.  */\n-  else if (align == 0\n-\t   && TYPE_ALIGN (type) > BITS_PER_WORD)\n+\n+  /* If the address isn't aligned properly for the type, we need a temporary.\n+     FIXME: This is inefficient, usually we can do this in registers.  */\n+  else if (align == 0 && TYPE_ALIGN (type) > BITS_PER_WORD)\n     {\n       tree tmp = create_tmp_var (type, \"va_arg_tmp\");\n       tree dest_addr = build_fold_addr_expr (tmp);\n-\n-      tree copy = build_call_expr (implicit_built_in_decls[BUILT_IN_MEMCPY], 3,\n-\t\t\t\t   dest_addr,\n-\t\t\t\t   addr,\n-\t\t\t\t   size_int (rsize));\n-\n+      tree copy = build_call_expr (implicit_built_in_decls[BUILT_IN_MEMCPY],\n+\t\t\t\t   3, dest_addr, addr, size_int (rsize));\n+      TREE_ADDRESSABLE (tmp) = 1;\n       gimplify_and_add (copy, pre_p);\n       addr = dest_addr;\n     }\n+\n   else\n     addr = fold_convert (ptrtype, addr);\n \n-  incr = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, incr, size_int (rsize));\n+  incr\n+    = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node, incr, size_int (rsize));\n   gimplify_assign (valist, incr, post_p);\n \n   return build_va_arg_indirect_ref (addr);"}]}