{"sha": "f2a54683c6700df37ba3c0c99d7142fae89d59b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhNTQ2ODNjNjcwMGRmMzdiYTNjMGM5OWQ3MTQyZmFlODlkNTliMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:46:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:46:05Z"}, "message": "[multiple changes]\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n\tUse Source_Index (Current_Sem_Unit) to find the correct casing.\n\t* exp_prag.adb (Expand_Pragma_Check): Use Source_Index\n\t(Current_Sem_Unit) to find the correct casing.\n\t* par.adb (Par): Null out Current_Source_File, to ensure that\n\tthe above bugs won't rear their ugly heads again.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Find_Type): For an attribute reference\n\t'Class, if prefix type is synchronized and previous errors\n\thave suppressed the creation of the corresponding record type,\n\tcreate a spurious class-wide for the synchonized type itself,\n\tto catch other misuses of the attribute\n\n2017-04-25  Steve Baird  <baird@adacore.com>\n\n\t* exp_ch6.adb (Expand_Simple_Function_Return): if CodePeer_Mode\n\tis True, then don't generate the accessibility check for the\n\ttag of a tagged result.\n\t* exp_intr.adb (Expand_Dispatching_Constructor_Call):\n\tif CodePeer_Mode is True, then don't generate the\n\ttag checks for the result of call to an instance of\n\tAda.Tags.Generic_Dispatching_Constructor (i.e., both the \"is a\n\tdescendant of\" check and the accessibility check).\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb: Code cleanups.\n\t* a-strbou.ads: minor whitespace fix in Trim for bounded strings.\n\t* sem_ch8.ads: Minor comment fix.\n\nFrom-SVN: r247168", "tree": {"sha": "7727a03334efb8986c0dca51a91c3a5e9c4a17e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7727a03334efb8986c0dca51a91c3a5e9c4a17e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2a54683c6700df37ba3c0c99d7142fae89d59b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a54683c6700df37ba3c0c99d7142fae89d59b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a54683c6700df37ba3c0c99d7142fae89d59b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a54683c6700df37ba3c0c99d7142fae89d59b1/comments", "author": null, "committer": null, "parents": [{"sha": "2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba"}], "stats": {"total": 145, "additions": 100, "deletions": 45}, "files": [{"sha": "e108648cf6b706771fd94b3467dba1566f9f7f29", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f2a54683c6700df37ba3c0c99d7142fae89d59b1", "patch": "@@ -1,3 +1,37 @@\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tUse Source_Index (Current_Sem_Unit) to find the correct casing.\n+\t* exp_prag.adb (Expand_Pragma_Check): Use Source_Index\n+\t(Current_Sem_Unit) to find the correct casing.\n+\t* par.adb (Par): Null out Current_Source_File, to ensure that\n+\tthe above bugs won't rear their ugly heads again.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Type): For an attribute reference\n+\t'Class, if prefix type is synchronized and previous errors\n+\thave suppressed the creation of the corresponding record type,\n+\tcreate a spurious class-wide for the synchonized type itself,\n+\tto catch other misuses of the attribute\n+\n+2017-04-25  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): if CodePeer_Mode\n+\tis True, then don't generate the accessibility check for the\n+\ttag of a tagged result.\n+\t* exp_intr.adb (Expand_Dispatching_Constructor_Call):\n+\tif CodePeer_Mode is True, then don't generate the\n+\ttag checks for the result of call to an instance of\n+\tAda.Tags.Generic_Dispatching_Constructor (i.e., both the \"is a\n+\tdescendant of\" check and the accessibility check).\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb: Code cleanups.\n+\t* a-strbou.ads: minor whitespace fix in Trim for bounded strings.\n+\t* sem_ch8.ads: Minor comment fix.\n+\n 2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch4.adb (Library_Level_Target): New function."}, {"sha": "5e7a9c71d151dc6d4102d1026e62c7840aaaa3cc", "filename": "gcc/ada/a-strbou.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fa-strbou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fa-strbou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strbou.ads?ref=f2a54683c6700df37ba3c0c99d7142fae89d59b1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -391,8 +391,8 @@ package Ada.Strings.Bounded is\n \n       function Trim\n         (Source : Bounded_String;\n-          Left  : Maps.Character_Set;\n-          Right : Maps.Character_Set) return Bounded_String;\n+         Left   : Maps.Character_Set;\n+         Right  : Maps.Character_Set) return Bounded_String;\n \n       procedure Trim\n         (Source : in out Bounded_String;"}, {"sha": "8c4868d7eb324806f1a5d201abfa29a24f1aa8b6", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f2a54683c6700df37ba3c0c99d7142fae89d59b1", "patch": "@@ -6635,15 +6635,20 @@ package body Exp_Ch6 is\n                    Attribute_Name => Name_Tag);\n             end if;\n \n-            Insert_Action (Exp,\n-              Make_Raise_Program_Error (Loc,\n-                Condition =>\n-                  Make_Op_Gt (Loc,\n-                    Left_Opnd  => Build_Get_Access_Level (Loc, Tag_Node),\n-                    Right_Opnd =>\n-                      Make_Integer_Literal (Loc,\n-                        Scope_Depth (Enclosing_Dynamic_Scope (Scope_Id)))),\n-                Reason => PE_Accessibility_Check_Failed));\n+            if not CodePeer_Mode then\n+               --  CodePeer doesn't do anything useful with\n+               --  Ada.Tags.Type_Specific_Data components\n+\n+               Insert_Action (Exp,\n+                 Make_Raise_Program_Error (Loc,\n+                   Condition =>\n+                     Make_Op_Gt (Loc,\n+                       Left_Opnd  => Build_Get_Access_Level (Loc, Tag_Node),\n+                       Right_Opnd =>\n+                         Make_Integer_Literal (Loc,\n+                           Scope_Depth (Enclosing_Dynamic_Scope (Scope_Id)))),\n+                   Reason => PE_Accessibility_Check_Failed));\n+            end if;\n          end;\n \n       --  AI05-0073: If function has a controlling access result, check that"}, {"sha": "fde0617aa834cbe8ba6b1f8afaf5d61d7fbbdd8a", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=f2a54683c6700df37ba3c0c99d7142fae89d59b1", "patch": "@@ -421,20 +421,22 @@ package body Exp_Intr is\n       Result_Typ := Class_Wide_Type (Etype (Act_Constr));\n \n       --  Check that the accessibility level of the tag is no deeper than that\n-      --  of the constructor function.\n+      --  of the constructor function (unless CodePeer_Mode)\n \n-      Insert_Action (N,\n-        Make_Implicit_If_Statement (N,\n-          Condition       =>\n-            Make_Op_Gt (Loc,\n-              Left_Opnd  =>\n-                Build_Get_Access_Level (Loc, New_Copy_Tree (Tag_Arg)),\n-              Right_Opnd =>\n-                Make_Integer_Literal (Loc, Scope_Depth (Act_Constr))),\n-\n-          Then_Statements => New_List (\n-            Make_Raise_Statement (Loc,\n-              New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n+      if not CodePeer_Mode then\n+         Insert_Action (N,\n+           Make_Implicit_If_Statement (N,\n+             Condition       =>\n+               Make_Op_Gt (Loc,\n+                 Left_Opnd  =>\n+                   Build_Get_Access_Level (Loc, New_Copy_Tree (Tag_Arg)),\n+                 Right_Opnd =>\n+                   Make_Integer_Literal (Loc, Scope_Depth (Act_Constr))),\n+\n+             Then_Statements => New_List (\n+               Make_Raise_Statement (Loc,\n+                 New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n+      end if;\n \n       if Is_Interface (Etype (Act_Constr)) then\n \n@@ -505,10 +507,11 @@ package body Exp_Intr is\n \n       --  Do not generate a run-time check on the built object if tag\n       --  checks are suppressed for the result type or tagged type expansion\n-      --  is disabled.\n+      --  is disabled or if CodePeer_Mode.\n \n       if Tag_Checks_Suppressed (Etype (Result_Typ))\n         or else not Tagged_Type_Expansion\n+        or else CodePeer_Mode\n       then\n          null;\n "}, {"sha": "da6a4c3ab8b01dca559276f39d0d2b051bfff15d", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=f2a54683c6700df37ba3c0c99d7142fae89d59b1", "patch": "@@ -33,6 +33,7 @@ with Exp_Ch11; use Exp_Ch11;\n with Exp_Util; use Exp_Util;\n with Expander; use Expander;\n with Inline;   use Inline;\n+with Lib;      use Lib;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -432,11 +433,12 @@ package body Exp_Prag is\n                   Add_Str_To_Name_Buffer (\"failed invariant from \");\n \n                --  For all other checks, the string is \"xxx failed at yyy\"\n-               --  where xxx is the check name with current source file casing.\n+               --  where xxx is the check name with appropriate casing.\n \n                else\n                   Get_Name_String (Nam);\n-                  Set_Casing (Identifier_Casing (Current_Source_File));\n+                  Set_Casing\n+                    (Identifier_Casing (Source_Index (Current_Sem_Unit)));\n                   Add_Str_To_Name_Buffer (\" failed at \");\n                end if;\n "}, {"sha": "863149b0cdd1a1140526324665477791083c1fc2", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=f2a54683c6700df37ba3c0c99d7142fae89d59b1", "patch": "@@ -1457,6 +1457,8 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n    procedure Labl is separate;\n    procedure Load is separate;\n \n+   Result : List_Id := Empty_List;\n+\n --  Start of processing for Par\n \n begin\n@@ -1472,13 +1474,13 @@ begin\n       begin\n          loop\n             if Token = Tok_EOF then\n-               Compiler_State := Analyzing;\n-               return Pragmas;\n+               Result := Pragmas;\n+               exit;\n \n             elsif Token /= Tok_Pragma then\n                Error_Msg_SC (\"only pragmas allowed in configuration file\");\n-               Compiler_State := Analyzing;\n-               return Error_List;\n+               Result := Error_List;\n+               exit;\n \n             else\n                P_Node := P_Pragma;\n@@ -1690,7 +1692,9 @@ begin\n \n       Restore_Opt_Config_Switches (Save_Config_Switches);\n       Set_Comes_From_Source_Default (False);\n-      Compiler_State := Analyzing;\n-      return Empty_List;\n    end if;\n+\n+   Compiler_State      := Analyzing;\n+   Current_Source_File := No_Source_File;\n+   return Result;\n end Par;"}, {"sha": "14d71af07468f3a3b7ca51511a5e75e534f0d314", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f2a54683c6700df37ba3c0c99d7142fae89d59b1", "patch": "@@ -1680,7 +1680,7 @@ package body Sem_Ch13 is\n                end if;\n \n                --  A variable is most likely modified from the outside. Take\n-               --  Take the optimistic approach to avoid spurious errors.\n+               --  the optimistic approach to avoid spurious errors.\n \n                if Ekind (E) = E_Variable then\n                   Set_Never_Set_In_Source (E, False);\n@@ -3208,13 +3208,15 @@ package body Sem_Ch13 is\n                   end if;\n \n                   --  Check that the class-wide predicate cannot be applied to\n-                  --  an operation of a synchronized type that is not a tagged\n-                  --  type. Other legality checks are performed when analyzing\n-                  --  the contract of the operation.\n+                  --  an operation of a synchronized type. AI12-0182 forbids\n+                  --  these altogether, while earlier language semantics made\n+                  --  them legal on tagged synchronized types.\n+\n+                  --  Other legality checks are performed when analyzing the\n+                  --  contract of the operation.\n \n                   if Class_Present (Aspect)\n                     and then Is_Concurrent_Type (Current_Scope)\n-                    and then not Is_Tagged_Type (Current_Scope)\n                     and then Ekind_In (E, E_Entry, E_Function, E_Procedure)\n                   then\n                      Error_Msg_Name_1 := Original_Aspect_Pragma_Name (Aspect);"}, {"sha": "a3d8f40a9ae5b511eaf7034fa3ef9b28c14aafbb", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=f2a54683c6700df37ba3c0c99d7142fae89d59b1", "patch": "@@ -7345,10 +7345,14 @@ package body Sem_Ch8 is\n                if Is_Concurrent_Type (T) then\n                   if No (Corresponding_Record_Type (Entity (Prefix (N)))) then\n \n-                     --  Previous error. Use current type, which at least\n-                     --  provides some operations.\n+                     --  Previous error. Create a class-wide type for the\n+                     --  synchronized type itself, with minimal semantic\n+                     --  attributes, to catch other errors in some ACATS tests.\n \n-                     C := Entity (Prefix (N));\n+                     pragma Assert (Serious_Errors_Detected > 0);\n+                     Make_Class_Wide_Type (T);\n+                     C := Class_Wide_Type (T);\n+                     Set_First_Entity (C, First_Entity (T));\n \n                   else\n                      C := Class_Wide_Type"}, {"sha": "ae63e172ceeba61deb7854b866e01154cb866c29", "filename": "gcc/ada/sem_ch8.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fsem_ch8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fsem_ch8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.ads?ref=f2a54683c6700df37ba3c0c99d7142fae89d59b1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -171,7 +171,7 @@ package Sem_Ch8 is\n \n    procedure Set_Use (L : List_Id);\n    --  Find use clauses that are declarative items in a package declaration\n-   --  and  set the potentially use-visible flags of imported entities before\n+   --  and set the potentially use-visible flags of imported entities before\n    --  analyzing the corresponding package body.\n \n    procedure ws;"}, {"sha": "77fc34b47c49acf5838c38accc1d3175701b8456", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a54683c6700df37ba3c0c99d7142fae89d59b1/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f2a54683c6700df37ba3c0c99d7142fae89d59b1", "patch": "@@ -9416,7 +9416,8 @@ package body Sem_Prag is\n \n                         if Is_Bad_Spelling_Of (Chars (Expr), Name_Enter) then\n                            Set_Casing\n-                             (Identifier_Casing (Current_Source_File));\n+                             (Identifier_Casing\n+                               (Source_Index (Current_Sem_Unit)));\n                            Error_Msg_String (1 .. Rnm'Length) :=\n                              Name_Buffer (1 .. Name_Len);\n                            Error_Msg_Strlen := Rnm'Length;"}]}