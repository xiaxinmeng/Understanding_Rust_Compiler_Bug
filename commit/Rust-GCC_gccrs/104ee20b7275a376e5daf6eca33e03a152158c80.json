{"sha": "104ee20b7275a376e5daf6eca33e03a152158c80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA0ZWUyMGI3Mjc1YTM3NmU1ZGFmNmVjYTMzZTAzYTE1MjE1OGM4MA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-11-24T22:06:31Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-11-24T22:06:31Z"}, "message": "sh.h (GENERAL_REGISTER_P, [...]): New macros.\n\n* config/sh/sh.h (GENERAL_REGISTER_P,\nGENERAL_OR_AP_REGISTER_P, FP_REGISTER_P, XD_REGISTER_P,\nFP_OR_XD_REGISTER_P, FP_ANY_REGISTER_P): New macros.  Use them\nall over.\n(SPECIAL_REG): Renamed to SPECIAL_REGISTER_P.\n* config/sh/sh.c: Use new macros.\n* config/sh/sh.md: Likewise.\n\nFrom-SVN: r37721", "tree": {"sha": "c366b2f80b609f961470bfb025f4028aabcd043d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c366b2f80b609f961470bfb025f4028aabcd043d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/104ee20b7275a376e5daf6eca33e03a152158c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104ee20b7275a376e5daf6eca33e03a152158c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/104ee20b7275a376e5daf6eca33e03a152158c80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104ee20b7275a376e5daf6eca33e03a152158c80/comments", "author": null, "committer": null, "parents": [{"sha": "5d00b10a56164d0c04194fd7f51c415f8e8cb794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d00b10a56164d0c04194fd7f51c415f8e8cb794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d00b10a56164d0c04194fd7f51c415f8e8cb794"}], "stats": {"total": 106, "additions": 65, "deletions": 41}, "files": [{"sha": "d3dbbbcc7fb044632711bbdff9150ed66af7635d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104ee20b7275a376e5daf6eca33e03a152158c80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104ee20b7275a376e5daf6eca33e03a152158c80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=104ee20b7275a376e5daf6eca33e03a152158c80", "patch": "@@ -1,3 +1,13 @@\n+Fri Nov 24 19:54:36 2000  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/sh/sh.h (GENERAL_REGISTER_P,\n+\tGENERAL_OR_AP_REGISTER_P, FP_REGISTER_P, XD_REGISTER_P,\n+\tFP_OR_XD_REGISTER_P, FP_ANY_REGISTER_P): New macros.  Use them\n+\tall over.\n+\t(SPECIAL_REG): Renamed to SPECIAL_REGISTER_P.\n+\t* config/sh/sh.c: Use new macros.\n+\t* config/sh/sh.md: Likewise.\n+\n Fri Nov 24 19:46:16 2000  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.md: Clobber MACH_REG and MACL_REG in SImode,"}, {"sha": "87601c6d6af15bdb4b8ce50ae71596131cadf245", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104ee20b7275a376e5daf6eca33e03a152158c80/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104ee20b7275a376e5daf6eca33e03a152158c80/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=104ee20b7275a376e5daf6eca33e03a152158c80", "patch": "@@ -302,7 +302,7 @@ print_operand (stream, x, code)\n       switch (GET_CODE (x))\n \t{\n \tcase REG:\n-\t  if (REGNO (x) >= FIRST_FP_REG && REGNO (x) <= LAST_FP_REG\n+\t  if (FP_REGISTER_P (REGNO (x))\n \t      && GET_MODE_SIZE (GET_MODE (x)) > 4)\n \t    fprintf ((stream), \"d%s\", reg_names[REGNO (x)]+1);\n \t  else\n@@ -2084,8 +2084,7 @@ broken_move (insn)\n \t\t   know the current setting of fpscr, so disable fldi.  */\n \t\t&& (! TARGET_SH4 || TARGET_FMOVD)\n \t\t&& GET_CODE (SET_DEST (pat)) == REG\n-\t\t&& REGNO (SET_DEST (pat)) >= FIRST_FP_REG\n-\t\t&& REGNO (SET_DEST (pat)) <= LAST_FP_REG)\n+\t\t&& FP_REGISTER_P (REGNO (SET_DEST (pat))))\n \t  && (GET_CODE (SET_SRC (pat)) != CONST_INT\n \t      || ! CONST_OK_FOR_I (INTVAL (SET_SRC (pat)))))\n \treturn 1;\n@@ -2211,10 +2210,7 @@ find_barrier (num_mova, mova, from)\n \n \t  /* See the code in machine_dependent_reorg, which has a similar if\n \t     statement that generates a new mova insn in many cases.  */\n-\t  if (GET_CODE (dst) == REG\n-\t      && ((REGNO (dst) >= FIRST_FP_REG\n-\t\t   && REGNO (dst) <= LAST_XD_REG)\n-\t\t  || REGNO (dst) == FPUL_REG))\n+\t  if (GET_CODE (dst) == REG && FP_ANY_REGISTER_P (REGNO (dst)))\n \t    inc += 2;\n \t}\n \n@@ -3237,10 +3233,7 @@ machine_dependent_reorg (first)\n \t\t      dst = gen_rtx_REG (HImode, REGNO (dst) + offset);\n \t\t    }\n \n-\t\t  if (GET_CODE (dst) == REG\n-\t\t      && ((REGNO (dst) >= FIRST_FP_REG\n-\t\t\t   && REGNO (dst) <= LAST_XD_REG)\n-\t\t\t  || REGNO (dst) == FPUL_REG))\n+\t\t  if (GET_CODE (dst) == REG && FP_ANY_REGISTER_P (REGNO (dst)))\n \t\t    {\n \t\t      /* This must be an insn that clobbers r0.  */\n \t\t      rtx clobber = XVECEXP (PATTERN (scan), 0,\n@@ -3747,13 +3740,13 @@ push (rn)\n   if (rn == FPUL_REG)\n     x = gen_push_fpul ();\n   else if (TARGET_SH4 && TARGET_FMOVD && ! TARGET_FPU_SINGLE\n-\t   && rn >= FIRST_FP_REG && rn <= LAST_XD_REG)\n+\t   && FP_OR_XD_REGISTER_P (rn))\n     {\n-      if ((rn - FIRST_FP_REG) & 1 && rn <= LAST_FP_REG)\n+      if (FP_REGISTER_P (rn) && (rn - FIRST_FP_REG) & 1)\n \treturn;\n       x = gen_push_4 (gen_rtx_REG (DFmode, rn));\n     }\n-  else if (TARGET_SH3E && rn >= FIRST_FP_REG && rn <= LAST_FP_REG)\n+  else if (TARGET_SH3E && FP_REGISTER_P (rn))\n     x = gen_push_e (gen_rtx_REG (SFmode, rn));\n   else\n     x = gen_push (gen_rtx_REG (SImode, rn));\n@@ -3774,13 +3767,13 @@ pop (rn)\n   if (rn == FPUL_REG)\n     x = gen_pop_fpul ();\n   else if (TARGET_SH4 && TARGET_FMOVD && ! TARGET_FPU_SINGLE\n-\t   && rn >= FIRST_FP_REG && rn <= LAST_XD_REG)\n+\t   && FP_OR_XD_REGISTER_P (rn))\n     {\n-      if ((rn - FIRST_FP_REG) & 1 && rn <= LAST_FP_REG)\n+      if (FP_REGISTER_P (rn) && (rn - FIRST_FP_REG) & 1)\n \treturn;\n       x = gen_pop_4 (gen_rtx_REG (DFmode, rn));\n     }\n-  else if (TARGET_SH3E && rn >= FIRST_FP_REG && rn <= LAST_FP_REG)\n+  else if (TARGET_SH3E && FP_REGISTER_P (rn))\n     x = gen_pop_e (gen_rtx_REG (SFmode, rn));\n   else\n     x = gen_pop (gen_rtx_REG (SImode, rn));\n@@ -3867,9 +3860,9 @@ calc_live_regs (count_ptr, live_regs_mask2)\n \t  else\n \t    live_regs_mask |= 1 << reg;\n \t  count++;\n-\t  if (TARGET_SH4 && TARGET_FMOVD && reg >= FIRST_FP_REG)\n+\t  if (TARGET_SH4 && TARGET_FMOVD && FP_OR_XD_REGISTER_P (reg))\n \t    {\n-\t      if (reg <= LAST_FP_REG)\n+\t      if (FP_REGISTER_P (reg))\n \t\t{\n \t\t  if (! TARGET_FPU_SINGLE && ! regs_ever_live[reg ^ 1])\n \t\t    {\n@@ -3880,7 +3873,7 @@ calc_live_regs (count_ptr, live_regs_mask2)\n \t\t      count++;\n \t\t    }\n \t\t}\n-\t      else if (reg <= LAST_XD_REG)\n+\t      else /* if (XD_REGISTER_P (reg)) */\n \t\t{\n \t\t  /* Must switch to double mode to access these registers.  */\n \t\t  target_flags &= ~FPU_SINGLE_BIT;\n@@ -4705,7 +4698,7 @@ fp_arith_reg_operand (op, mode)\n \treturn 1;\n \n       return (regno >= FIRST_PSEUDO_REGISTER\n-\t      || (regno >= FIRST_FP_REG && regno <= LAST_FP_REG));\n+\t      || FP_REGISTER_P (regno));\n     }\n   return 0;\n }"}, {"sha": "618f98cd265b4be69322998a0ae26130bc50372c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104ee20b7275a376e5daf6eca33e03a152158c80/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104ee20b7275a376e5daf6eca33e03a152158c80/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=104ee20b7275a376e5daf6eca33e03a152158c80", "patch": "@@ -441,7 +441,25 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define FIRST_XD_REG XD0_REG\n #define LAST_XD_REG  (FIRST_XD_REG + 7)\n \n-#define SPECIAL_REG(REGNO) \\\n+#define GENERAL_REGISTER_P(REGNO) \\\n+  ((REGNO) >= FIRST_GENERAL_REG && (REGNO) <= LAST_GENERAL_REG)\n+\n+#define GENERAL_OR_AP_REGISTER_P(REGNO) \\\n+  (GENERAL_REGISTER_P (REGNO) || ((REGNO) == AP_REG))\n+\n+#define FP_REGISTER_P(REGNO) \\\n+  ((REGNO) >= FIRST_FP_REG && (REGNO) <= LAST_FP_REG)\n+\n+#define XD_REGISTER_P(REGNO) \\\n+  ((REGNO) >= FIRST_XD_REG && (REGNO) <= LAST_XD_REG)\n+\n+#define FP_OR_XD_REGISTER_P(REGNO) \\\n+  (FP_REGISTER_P (REGNO) || XD_REGISTER_P (REGNO))\n+\n+#define FP_ANY_REGISTER_P(REGNO) \\\n+  (FP_REGISTER_P (REGNO) || XD_REGISTER_P (REGNO) || (REGNO) == FPUL_REG)\n+\n+#define SPECIAL_REGISTER_P(REGNO) \\\n   ((REGNO) == GBR_REG || (REGNO) == T_REG \\\n    || (REGNO) == MACH_REG || (REGNO) == MACL_REG)\n \n@@ -500,7 +518,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    On the SH all but the XD regs are UNITS_PER_WORD bits wide.  */\n \n #define HARD_REGNO_NREGS(REGNO, MODE) \\\n-   ((REGNO) >= FIRST_XD_REG && (REGNO) <= LAST_XD_REG \\\n+   (XD_REGISTER_P (REGNO) \\\n     ? (GET_MODE_SIZE (MODE) / (2 * UNITS_PER_WORD)) \\\n     : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)) \\\n \n@@ -517,16 +535,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n    and a secondary reload to reload from / to general regs; that\n    seems to be a loosing proposition.  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE)\t\t\\\n-  (SPECIAL_REG (REGNO) ? (MODE) == SImode\t\\\n+  (SPECIAL_REGISTER_P (REGNO) ? (MODE) == SImode \\\n    : (REGNO) == FPUL_REG ? (MODE) == SImode || (MODE) == SFmode\t\\\n-   : (REGNO) >= FIRST_FP_REG && (REGNO) <= LAST_FP_REG && (MODE) == SFmode \\\n+   : FP_REGISTER_P (REGNO) && (MODE) == SFmode \\\n    ? 1 \\\n-   : (REGNO) >= FIRST_FP_REG && (REGNO) <= LAST_FP_REG \\\n+   : FP_REGISTER_P (REGNO) \\\n    ? ((MODE) == SFmode \\\n       || (TARGET_SH3E && (MODE) == SCmode) \\\n       || (((TARGET_SH4 && (MODE) == DFmode) || (MODE) == DCmode) \\\n \t  && (((REGNO) - FIRST_FP_REG) & 1) == 0)) \\\n-   : (REGNO) >= FIRST_XD_REG && (REGNO) <= LAST_XD_REG \\\n+   : XD_REGISTER_P (REGNO) \\\n    ? (MODE) == DFmode \\\n    : (REGNO) == PR_REG ? 0\t\t\t\\\n    : (REGNO) == FPSCR_REG ? (MODE) == PSImode \\\n@@ -815,10 +833,10 @@ extern enum reg_class reg_class_from_letter[];\n #define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS,MODE,X) \\\n   ((((((CLASS) == FP_REGS || (CLASS) == FP0_REGS\t\t\t\\\n \t|| (CLASS) == DF_REGS)\t\t\t\t\t\t\\\n-      && (GET_CODE (X) == REG && REGNO (X) <= AP_REG))\t\t\t\\\n+      && (GET_CODE (X) == REG && GENERAL_OR_AP_REGISTER_P (REGNO (X))))\t\\\n      || (((CLASS) == GENERAL_REGS || (CLASS) == R0_REGS)\t\t\\\n \t && GET_CODE (X) == REG\t\t\t\t\t\t\\\n-\t && REGNO (X) >= FIRST_FP_REG && REGNO (X) <= LAST_FP_REG))\t\\\n+\t && FP_REGISTER_P (REGNO (X))))\t\t\t\t\t\\\n     && MODE == SFmode)\t\t\t\t\t\t\t\\\n    ? FPUL_REGS\t\t\t\t\t\t\t\t\\\n    : ((CLASS) == FPUL_REGS\t\t\t\t\t\t\\\n@@ -829,7 +847,7 @@ extern enum reg_class reg_class_from_letter[];\n \t\t  || system_reg_operand (X, VOIDmode)))))\t\t\\\n    ? GENERAL_REGS\t\t\t\t\t\t\t\\\n    : (((CLASS) == MAC_REGS || (CLASS) == PR_REGS)\t\t\t\\\n-      && GET_CODE (X) == REG && REGNO (X) > SP_REG\t\t\t\\\n+      && GET_CODE (X) == REG && ! GENERAL_REGISTER_P (REGNO (X))\t\\\n       && (CLASS) != REGNO_REG_CLASS (REGNO (X)))\t\t\t\\\n    ? GENERAL_REGS : NO_REGS)\n \n@@ -1265,7 +1283,8 @@ extern int current_function_anonymous_args;\n    has been allocated, which happens in local-alloc.c.  */\n \n #define REGNO_OK_FOR_BASE_P(REGNO) \\\n-  ((REGNO) < PR_REG || (unsigned) reg_renumber[(REGNO)] < PR_REG)\n+  (GENERAL_OR_AP_REGISTER_P (REGNO) \\\n+   || GENERAL_OR_AP_REGISTER_P (reg_renumber[(REGNO)]))\n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n   ((REGNO) == R0_REG || (unsigned) reg_renumber[(REGNO)] == R0_REG)\n \n@@ -1297,7 +1316,7 @@ extern int current_function_anonymous_args;\n /* Nonzero if X is a hard reg that can be used as a base reg\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_BASE_P(X) \\\n-  (REGNO (X) <= AP_REG || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n+  (GENERAL_OR_AP_REGISTER_P (REGNO (X)) || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n \n /* Nonzero if X is a hard reg that can be used as an index\n    or if it is a pseudo reg.  */"}, {"sha": "c3a93946ef0ef61a7051577b15f689ae6ced0b5f", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104ee20b7275a376e5daf6eca33e03a152158c80/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104ee20b7275a376e5daf6eca33e03a152158c80/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=104ee20b7275a376e5daf6eca33e03a152158c80", "patch": "@@ -2794,8 +2794,8 @@\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n    (clobber (match_scratch:SI 3 \"X\"))]\n   \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n-   && true_regnum (operands[0]) >= FIRST_FP_REG\n-   && true_regnum (operands[1]) >= FIRST_FP_REG\"\n+   && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\n+   && FP_OR_XD_REGISTER_P (true_regnum (operands[1]))\"\n   [(const_int 0)]\n   \"\n {\n@@ -2813,7 +2813,7 @@\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n    (clobber (match_scratch:SI 3 \"X\"))]\n   \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n-   && true_regnum (operands[0]) >= FIRST_FP_REG\n+   && FP_OR_XD_REGISTER_P (operands[0])\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[1]))\"\n   [(const_int 0)]\n   \"\n@@ -2839,7 +2839,7 @@\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n    (clobber (match_scratch:SI 3 \"X\"))]\n   \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n-   && true_regnum (operands[0]) >= FIRST_FP_REG\"\n+   && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\"\n   [(const_int 0)]\n   \"\n {\n@@ -2880,7 +2880,7 @@\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n    (clobber (match_scratch:SI 3 \"X\"))]\n   \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n-   && true_regnum (operands[1]) >= FIRST_FP_REG\"\n+   && FP_OR_XD_REGISTER_P (true_regnum (operands[1]))\"\n   [(const_int 0)]\n   \"\n {\n@@ -4967,9 +4967,10 @@\n    (set (mem:SF (match_dup 0))\n \t(match_operand:SF 2 \"general_movsrc_operand\" \"\"))]\n   \"REGNO (operands[0]) == 0\n-   && ((GET_CODE (operands[2]) == REG && REGNO (operands[2]) >= FIRST_FP_REG)\n+   && ((GET_CODE (operands[2]) == REG\n+        && FP_OR_XD_REGISTER_P (REGNO (operands[2])))\n        || (GET_CODE (operands[2]) == SUBREG\n-\t   && REGNO (SUBREG_REG (operands[2])) >= FIRST_FP_REG))\n+\t   && FP_OR_XD_REGISTER_P (REGNO (SUBREG_REG (operands[2])))))\n    && reg_unused_after (operands[0], insn)\"\n   \"fmov{.s|}\t%2,@(%0,%1)\")\n \n@@ -4980,9 +4981,10 @@\n \n \t(mem:SF (match_dup 0)))]\n   \"REGNO (operands[0]) == 0\n-   && ((GET_CODE (operands[2]) == REG && REGNO (operands[2]) >= FIRST_FP_REG)\n+   && ((GET_CODE (operands[2]) == REG\n+\t&& FP_OR_XD_REGISTER_P (REGNO (operands[2])))\n        || (GET_CODE (operands[2]) == SUBREG\n-\t   && REGNO (SUBREG_REG (operands[2])) >= FIRST_FP_REG))\n+\t   && FP_OR_XD_REGISTER_P (REGNO (SUBREG_REG (operands[2])))))\n    && reg_unused_after (operands[0], insn)\"\n   \"fmov{.s|}\t@(%0,%1),%2\")\n "}]}