{"sha": "0c235d7e400af767f7d148951717d3e2bd4d792a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMyMzVkN2U0MDBhZjc2N2Y3ZDE0ODk1MTcxN2QzZTJiZDRkNzkyYQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-03-22T21:22:57Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-03-22T21:22:57Z"}, "message": "(singlemove_string): Handle SFmode constants again.  Simplify.\n\n(zdepi_cint_p): Make some variables HOST_WIDE_INT.\n(lhs_lshift_cint_operand): Likewise.\n(output_and): Likewise.\n(output_ior): Likewise.\n\nFrom-SVN: r9222", "tree": {"sha": "d78184734f188d38b57e2eebbf26c98f977436a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d78184734f188d38b57e2eebbf26c98f977436a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c235d7e400af767f7d148951717d3e2bd4d792a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c235d7e400af767f7d148951717d3e2bd4d792a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c235d7e400af767f7d148951717d3e2bd4d792a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c235d7e400af767f7d148951717d3e2bd4d792a/comments", "author": null, "committer": null, "parents": [{"sha": "1d306530f70ea17fbf1fb0aee4f66e428e326cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d306530f70ea17fbf1fb0aee4f66e428e326cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d306530f70ea17fbf1fb0aee4f66e428e326cdb"}], "stats": {"total": 81, "additions": 28, "deletions": 53}, "files": [{"sha": "a164cd0b8d4e8381ffdb8349f0b0fd069dd4bbae", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 28, "deletions": 53, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c235d7e400af767f7d148951717d3e2bd4d792a/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c235d7e400af767f7d148951717d3e2bd4d792a/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=0c235d7e400af767f7d148951717d3e2bd4d792a", "patch": "@@ -403,7 +403,7 @@ int\n zdepi_cint_p (x)\n      unsigned HOST_WIDE_INT x;\n {\n-  unsigned lsb_mask, t;\n+  unsigned HOST_WIDE_INT lsb_mask, t;\n \n   /* This might not be obvious, but it's at least fast.\n      This function is critcal; we don't have the time loops would take.  */\n@@ -471,7 +471,7 @@ lhs_lshift_cint_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  unsigned x;\n+  unsigned HOST_WIDE_INT x;\n   if (GET_CODE (op) != CONST_INT)\n     return 0;\n   x = INTVAL (op) >> 4;\n@@ -1037,63 +1037,38 @@ char *\n singlemove_string (operands)\n      rtx *operands;\n {\n+  HOST_WIDE_INT intval;\n+\n   if (GET_CODE (operands[0]) == MEM)\n     return \"stw %r1,%0\";\n-  else if (GET_CODE (operands[1]) == MEM)\n+  if (GET_CODE (operands[1]) == MEM)\n     return \"ldw %1,%0\";\n-  else if (GET_CODE (operands[1]) == CONST_DOUBLE\n-\t   && GET_MODE (operands[1]) == SFmode)\n+  if (GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n-      abort ();\n-#if 0\n-      /* Switched off since it is wrong, and should never really be used\n-\t anyway.  If we want to switch this on again, we have to make it use\n-\t the REAL_ARITHMETIC stuff.  */\n-      int i;\n-      union real_extract u;\n-      union float_extract { float f; int i; } v;\n+      long i;\n+      REAL_VALUE_TYPE d;\n \n-      bcopy (&CONST_DOUBLE_LOW (operands[1]), &u, sizeof u);\n-      v.f = REAL_VALUE_TRUNCATE (SFmode, u.d);\n-      i = v.i;\n+      if (GET_MODE (operands[1]) != SFmode)\n+\tabort ();\n \n-      operands[1] = GEN_INT (i);\n+      /* Translate the CONST_DOUBLE to a CONST_INT with the same target\n+\t bit pattern.  */\n+      REAL_VALUE_FROM_CONST_DOUBLE (d, operands[1]);\n+      REAL_VALUE_TO_TARGET_SINGLE (d, i);\n \n-      /* See if we can handle this constant in a single instruction.  */\n-      if (cint_ok_for_move (INTVAL (operands[1])))\n-\t{\n-\t   HOST_WIDE_INT intval = INTVAL (operands[1]);\n-\n-\t   if (intval == 0)\n-\t     return \"copy 0,%0\";\n-\t   else if (VAL_14_BITS_P (intval))\n-\t     return \"ldi %1,%0\";\n-\t   else if ((intval & 0x7ff) == 0)\n-\t     return \"ldil L'%1,%0\";\n-\t   else if (zdepi_cint_p (intval))\n-\t     return \"zdepi %Z1,%0\";\n-\t}\n-      else\n-\treturn \"ldil L'%1,%0\\n\\tldo R'%1(%0),%0\";\n-#endif\n+      operands[1] = GEN_INT (i);\n+      /* Fall through to CONST_INT case.  */\n     }\n-\n-  else if (GET_CODE (operands[1]) == CONST_INT)\n+  if (GET_CODE (operands[1]) == CONST_INT)\n     {\n-      /* See if we can handle this in a single instruction.  */\n-      if (cint_ok_for_move (INTVAL (operands[1])))\n-\t{\n-\t   int intval = INTVAL (operands[1]);\n-\n-\t   if (intval == 0)\n-\t     return \"copy 0,%0\";\n-\t   else if (VAL_14_BITS_P (intval))\n-\t     return \"ldi %1,%0\";\n-\t   else if ((intval & 0x7ff) == 0)\n-\t     return \"ldil L'%1,%0\";\n-\t   else if (zdepi_cint_p (intval))\n-\t     return \"zdepi %Z1,%0\";\n-\t}\n+      intval = INTVAL (operands[1]);\n+\n+      if (VAL_14_BITS_P (intval))\n+\treturn \"ldi %1,%0\";\n+      else if ((intval & 0x7ff) == 0)\n+\treturn \"ldil L'%1,%0\";\n+      else if (zdepi_cint_p (intval))\n+\treturn \"zdepi %Z1,%0\";\n       else\n \treturn \"ldil L'%1,%0\\n\\tldo R'%1(%0),%0\";\n     }\n@@ -1731,7 +1706,7 @@ output_and (operands)\n {\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) != 0)\n     {\n-      unsigned mask = INTVAL (operands[2]);\n+      unsigned HOST_WIDE_INT mask = INTVAL (operands[2]);\n       int ls0, ls1, ms0, p, len;\n \n       for (ls0 = 0; ls0 < 32; ls0++)\n@@ -1780,7 +1755,7 @@ char *\n output_ior (operands)\n      rtx *operands;\n {\n-  unsigned mask = INTVAL (operands[2]);\n+  unsigned HOST_WIDE_INT mask = INTVAL (operands[2]);\n   int bs0, bs1, p, len;\n \n   if (INTVAL (operands[2]) == 0)\n@@ -1794,7 +1769,7 @@ output_ior (operands)\n     if ((mask & (1 << bs1)) == 0)\n       break;\n \n-  if (bs1 != 32 && ((unsigned) 1 << bs1) <= mask)\n+  if (bs1 != 32 && ((unsigned HOST_WIDE_INT) 1 << bs1) <= mask)\n     abort();\n \n   p = 31 - bs0;"}]}