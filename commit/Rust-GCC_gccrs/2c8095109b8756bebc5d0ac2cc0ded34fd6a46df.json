{"sha": "2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "node_id": "C_kwDOANBUbNoAKDJjODA5NTEwOWI4NzU2YmViYzVkMGFjMmNjMGRlZDM0ZmQ2YTQ2ZGY", "commit": {"author": {"name": "Liao Shihua", "email": "shihua@iscas.ac.cn", "date": "2023-02-20T07:01:22Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-05T17:04:56Z"}, "message": "RISC-V: Implement ZBKB, ZBKC and ZBKX extensions\n\nThis patch supports Zkbk, Zbkc and Zkbx extension.\nIt includes instruction's machine description and built-in funtions.\nIt is worth mentioning that this patch only adds instructions in Zbkb but no\nlonger in Zbb.\nIf any instructions both in Zbb and Zbkb, they will be generated by code\ngenerator instead of built-in functions.\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md: Add ZBKB's instructions.\n\t* config/riscv/riscv-builtins.cc (AVAIL): Add new.\n\t* config/riscv/riscv.md: Add new type for crypto instructions.\n\t* config/riscv/crypto.md: Add Scalar Cryptography extension's machine\n\tdescription file.\n\t* config/riscv/riscv-scalar-crypto.def: Add Scalar Cryptography\n\textension's built-in function file.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbkb32.c: New test.\n\t* gcc.target/riscv/zbkb64.c: New test.\n\t* gcc.target/riscv/zbkc32.c: New test.\n\t* gcc.target/riscv/zbkc64.c: New test.\n\t* gcc.target/riscv/zbkx32.c: New test.\n\t* gcc.target/riscv/zbkx64.c: New test.\n\nCo-Authored-By: SiYu Wu <siyu@isrc.iscas.ac.cn>", "tree": {"sha": "4205274555b9dedac6f766446b2e178ea284d4f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4205274555b9dedac6f766446b2e178ea284d4f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/comments", "author": {"login": "Liaoshihua", "id": 43035022, "node_id": "MDQ6VXNlcjQzMDM1MDIy", "avatar_url": "https://avatars.githubusercontent.com/u/43035022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Liaoshihua", "html_url": "https://github.com/Liaoshihua", "followers_url": "https://api.github.com/users/Liaoshihua/followers", "following_url": "https://api.github.com/users/Liaoshihua/following{/other_user}", "gists_url": "https://api.github.com/users/Liaoshihua/gists{/gist_id}", "starred_url": "https://api.github.com/users/Liaoshihua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Liaoshihua/subscriptions", "organizations_url": "https://api.github.com/users/Liaoshihua/orgs", "repos_url": "https://api.github.com/users/Liaoshihua/repos", "events_url": "https://api.github.com/users/Liaoshihua/events{/privacy}", "received_events_url": "https://api.github.com/users/Liaoshihua/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89456334473c6b1ea1713740fb5f5191cd0b2235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89456334473c6b1ea1713740fb5f5191cd0b2235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89456334473c6b1ea1713740fb5f5191cd0b2235"}], "stats": {"total": 338, "additions": 327, "deletions": 11}, "files": [{"sha": "ff9ecb433e4df08cce09184c3ed37071851f4bcb", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -189,7 +189,7 @@\n   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n         (bitmanip_bitwise:X (not:X (match_operand:X 1 \"register_operand\" \"r\"))\n                             (match_operand:X 2 \"register_operand\" \"r\")))]\n-  \"TARGET_ZBB\"\n+  \"TARGET_ZBB || TARGET_ZBKB\"\n   \"<insn>n\\t%0,%2,%1\"\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<X:MODE>\")])\n@@ -203,15 +203,15 @@\n \t\t\t       (const_int 0)))\n \t\t(match_operand:DI 2 \"register_operand\")))\n    (clobber (match_operand:DI 3 \"register_operand\"))]\n-  \"TARGET_ZBB\"\n+  \"TARGET_ZBB || TARGET_ZBKB\"\n   [(set (match_dup 3) (ashiftrt:DI (match_dup 1) (const_int 63)))\n    (set (match_dup 0) (and:DI (not:DI (match_dup 3)) (match_dup 2)))])\n \n (define_insn \"*xor_not<mode>\"\n   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n         (not:X (xor:X (match_operand:X 1 \"register_operand\" \"r\")\n                       (match_operand:X 2 \"register_operand\" \"r\"))))]\n-  \"TARGET_ZBB\"\n+  \"TARGET_ZBB || TARGET_ZBKB\"\n   \"xnor\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<X:MODE>\")])\n@@ -277,47 +277,47 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:QI 2 \"arith_operand\" \"rI\")))]\n-  \"TARGET_ZBB\"\n+  \"TARGET_ZBB || TARGET_ZBKB\"\n   \"ror%i2%~\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n (define_insn \"rotrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(rotatert:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:QI 2 \"arith_operand\" \"rI\")))]\n-  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"TARGET_64BIT && (TARGET_ZBB || TARGET_ZBKB)\"\n   \"ror%i2\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n (define_insn \"rotrsi3_sext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\"))))]\n-  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"TARGET_64BIT && (TARGET_ZBB || TARGET_ZBKB)\"\n   \"rorw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n (define_insn \"rotlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(rotate:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:QI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_ZBB\"\n+  \"TARGET_ZBB || TARGET_ZBKB\"\n   \"rol%~\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n (define_insn \"rotldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(rotate:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:QI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"TARGET_64BIT && (TARGET_ZBB || TARGET_ZBKB)\"\n   \"rol\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n (define_insn \"rotlsi3_sext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (rotate:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t   (match_operand:QI 2 \"register_operand\" \"r\"))))]\n-  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"TARGET_64BIT && (TARGET_ZBB || TARGET_ZBKB)\"\n   \"rolw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n@@ -332,7 +332,7 @@\n (define_insn \"bswap<mode>2\"\n   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n         (bswap:X (match_operand:X 1 \"register_operand\" \"r\")))]\n-  \"TARGET_ZBB\"\n+  \"TARGET_ZBB || TARGET_ZBKB\"\n   \"rev8\\t%0,%1\"\n   [(set_attr \"type\" \"bitmanip\")])\n "}, {"sha": "a270036e39b1794878e3e3c25554c789e2e862eb", "filename": "gcc/config/riscv/crypto.md", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Fconfig%2Friscv%2Fcrypto.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Fconfig%2Friscv%2Fcrypto.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fcrypto.md?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -0,0 +1,128 @@\n+;; Machine description for RISC-V Scalar Cryptography extensions.\n+;; Copyright (C) 2023 Free Software Foundation, Inc.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_c_enum \"unspec\" [\n+    ;; Zbkb unspecs\n+    UNSPEC_BREV8\n+    UNSPEC_ZIP\n+    UNSPEC_UNZIP\n+    UNSPEC_PACK\n+    UNSPEC_PACKH\n+    UNSPEC_PACKW\n+\n+    ;; Zbkc unspecs\n+    UNSPEC_CLMUL\n+    UNSPEC_CLMULH\n+\n+    ;; Zbkx unspecs\n+    UNSPEC_XPERM8\n+    UNSPEC_XPERM4\n+])\n+\n+;; ZBKB extension\n+(define_insn \"riscv_brev8_<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:X 1 \"register_operand\" \"r\")]\n+                  UNSPEC_BREV8))]\n+  \"TARGET_ZBKB\"\n+  \"brev8\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_zip\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")]\n+                  UNSPEC_ZIP))]\n+  \"TARGET_ZBKB && !TARGET_64BIT\"\n+  \"zip\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_unzip\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")]\n+                  UNSPEC_UNZIP))]\n+  \"TARGET_ZBKB && !TARGET_64BIT\"\n+  \"unzip\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_pack_<X:mode><HISI:mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:HISI 1 \"register_operand\" \"r\")\n+                  (match_operand:HISI 2 \"register_operand\" \"r\")]\n+                  UNSPEC_PACK))]\n+  \"TARGET_ZBKB\"\n+  \"pack\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_packh_<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:QI 1 \"register_operand\" \"r\")\n+                  (match_operand:QI 2 \"register_operand\" \"r\")]\n+                  UNSPEC_PACKH))]\n+  \"TARGET_ZBKB\"\n+  \"packh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_packw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:HI 1 \"register_operand\" \"r\")\n+                  (match_operand:HI 2 \"register_operand\" \"r\")]\n+                  UNSPEC_PACKW))]\n+  \"TARGET_ZBKB && TARGET_64BIT\"\n+  \"packw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+;; ZBKC extension\n+\n+(define_insn \"riscv_clmul_<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:X 1 \"register_operand\" \"r\")\n+                  (match_operand:X 2 \"register_operand\" \"r\")]\n+                  UNSPEC_CLMUL))]\n+  \"TARGET_ZBKC\"\n+  \"clmul\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_clmulh_<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:X 1 \"register_operand\" \"r\")\n+                  (match_operand:X 2 \"register_operand\" \"r\")]\n+                  UNSPEC_CLMULH))]\n+  \"TARGET_ZBKC\"\n+  \"clmulh\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+;; ZBKX extension\n+\n+(define_insn \"riscv_xperm4_<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:X 1 \"register_operand\" \"r\")\n+                  (match_operand:X 2 \"register_operand\" \"r\")]\n+                  UNSPEC_XPERM4))]\n+  \"TARGET_ZBKX\"\n+  \"xperm4\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_xperm8_<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:X 1 \"register_operand\" \"r\")\n+                  (match_operand:X 2 \"register_operand\" \"r\")]\n+                  UNSPEC_XPERM8))]\n+  \"TARGET_ZBKX\"\n+  \"xperm8\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])"}, {"sha": "f0d60709c7de8b2a1b262ffaab674917558e4ecb", "filename": "gcc/config/riscv/riscv-builtins.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -100,6 +100,12 @@ AVAIL (zero32,  TARGET_ZICBOZ && !TARGET_64BIT)\n AVAIL (zero64,  TARGET_ZICBOZ && TARGET_64BIT)\n AVAIL (prefetchi32, TARGET_ZICBOP && !TARGET_64BIT)\n AVAIL (prefetchi64, TARGET_ZICBOP && TARGET_64BIT)\n+AVAIL (crypto_zbkb32, TARGET_ZBKB && !TARGET_64BIT)\n+AVAIL (crypto_zbkb64, TARGET_ZBKB && TARGET_64BIT)\n+AVAIL (crypto_zbkc32, TARGET_ZBKC && !TARGET_64BIT)\n+AVAIL (crypto_zbkc64, TARGET_ZBKC && TARGET_64BIT)\n+AVAIL (crypto_zbkx32, TARGET_ZBKX && !TARGET_64BIT)\n+AVAIL (crypto_zbkx64, TARGET_ZBKX && TARGET_64BIT)\n AVAIL (always,     (!0))\n \n /* Construct a riscv_builtin_description from the given arguments.\n@@ -153,6 +159,7 @@ AVAIL (always,     (!0))\n \n static const struct riscv_builtin_description riscv_builtins[] = {\n   #include \"riscv-cmo.def\"\n+  #include \"riscv-scalar-crypto.def\"\n \n   DIRECT_BUILTIN (frflags, RISCV_USI_FTYPE, hard_float),\n   DIRECT_NO_TARGET_BUILTIN (fsflags, RISCV_VOID_FTYPE_USI, hard_float),"}, {"sha": "e4c97acbc054ae47b52f371851c9d29fbf1bd2f6", "filename": "gcc/config/riscv/riscv-scalar-crypto.def", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Fconfig%2Friscv%2Friscv-scalar-crypto.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Fconfig%2Friscv%2Friscv-scalar-crypto.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-scalar-crypto.def?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -0,0 +1,45 @@\n+/* Builtin functions for RISC-V Scalar Cryptography extensions.\n+   Copyright (C) 2023 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+// ZBKB\n+RISCV_BUILTIN (pack_sihi, \"pack\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_HI_HI, crypto_zbkb32),\n+RISCV_BUILTIN (pack_disi, \"pack\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_SI_SI, crypto_zbkb64),\n+\n+RISCV_BUILTIN (packh_si, \"packh\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_QI_QI, crypto_zbkb32),\n+RISCV_BUILTIN (packh_di, \"packh\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_QI_QI, crypto_zbkb64),\n+\n+RISCV_BUILTIN (packw, \"packw\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_HI_HI, crypto_zbkb64),\n+\n+RISCV_BUILTIN (zip, \"zip\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI, crypto_zbkb32),\n+RISCV_BUILTIN (unzip, \"unzip\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI, crypto_zbkb32),\n+\n+RISCV_BUILTIN (brev8_si, \"brev8\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI, crypto_zbkb32),\n+RISCV_BUILTIN (brev8_di, \"brev8\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI, crypto_zbkb64),\n+\n+// ZBKC\n+RISCV_BUILTIN (clmul_si, \"clmul\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI_SI, crypto_zbkc32),\n+RISCV_BUILTIN (clmul_di, \"clmul\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI_DI, crypto_zbkc64),\n+RISCV_BUILTIN (clmulh_si, \"clmulh\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI_SI, crypto_zbkc32),\n+RISCV_BUILTIN (clmulh_di, \"clmulh\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI_DI, crypto_zbkc64),\n+\n+// ZBKX\n+RISCV_BUILTIN (xperm4_si, \"xperm4\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI_SI, crypto_zbkx32),\n+RISCV_BUILTIN (xperm4_di, \"xperm4\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI_DI, crypto_zbkx64),\n+RISCV_BUILTIN (xperm8_si, \"xperm8\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI_SI, crypto_zbkx32),\n+RISCV_BUILTIN (xperm8_di, \"xperm8\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI_DI, crypto_zbkx64),"}, {"sha": "6c3176042fbd1702a6bb1911a6bf7f093fc5c7a2", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -242,6 +242,7 @@\n ;; bitmanip\tbit manipulation instructions\n ;; rotate   rotation instructions\n ;; atomic   atomic instructions\n+;; crypto cryptography instructions\n ;; Classification of RVV instructions which will be added to each RVV .md pattern and used by scheduler.\n ;; rdvlenb     vector byte length vlenb csrr read\n ;; rdvl        vector length vl csrr read\n@@ -338,7 +339,7 @@\n   \"unknown,branch,jump,call,load,fpload,store,fpstore,\n    mtc,mfc,const,arith,logical,shift,slt,imul,idiv,move,fmove,fadd,fmul,\n    fmadd,fdiv,fcmp,fcvt,fsqrt,multi,auipc,sfb_alu,nop,ghost,bitmanip,rotate,\n-   atomic,rdvlenb,rdvl,vsetvl,vlde,vste,vldm,vstm,vlds,vsts,\n+   atomic,crypto,rdvlenb,rdvl,vsetvl,vlde,vste,vldm,vstm,vlds,vsts,\n    vldux,vldox,vstux,vstox,vldff,vldr,vstr,\n    vialu,viwalu,vext,vicalu,vshift,vnshift,vicmp,viminmax,\n    vimul,vidiv,viwmul,vimuladd,viwmuladd,vimerge,vimov,\n@@ -3092,6 +3093,7 @@\n )\n \n (include \"bitmanip.md\")\n+(include \"crypto.md\")\n (include \"sync.md\")\n (include \"peephole.md\")\n (include \"pic.md\")"}, {"sha": "dd45b8b9dc72844f8b39d09766e738b7e4462fef", "filename": "gcc/testsuite/gcc.target/riscv/zbkb32.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkb32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkb32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkb32.c?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32gc_zbkb -mabi=ilp32\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+\n+#include <stdint-gcc.h>\n+\n+int32_t foo1(int16_t rs1, int16_t rs2)\n+{\n+    return __builtin_riscv_pack(rs1, rs2);\n+}\n+\n+int32_t foo2(int8_t rs1, int8_t rs2)\n+{\n+    return __builtin_riscv_packh(rs1, rs2);\n+}\n+\n+int32_t foo3(int32_t rs1)\n+{\n+    return __builtin_riscv_brev8(rs1);\n+}\n+\n+int32_t foo4(int32_t rs1)\n+{\n+    return __builtin_riscv_zip(rs1);\n+}\n+\n+int32_t foo5(int32_t rs1)\n+{\n+    return __builtin_riscv_unzip(rs1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"pack\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"packh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"brev8\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tzip\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"unzip\" 1 } } */"}, {"sha": "960a2ae30ed6d02e35c597168e4f06407dfd881b", "filename": "gcc/testsuite/gcc.target/riscv/zbkb64.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkb64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkb64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkb64.c?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64gc_zbkb -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+#include <stdint-gcc.h>\n+\n+int64_t foo1(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_pack(rs1, rs2);\n+}\n+\n+int64_t foo2(int8_t rs1, int8_t rs2)\n+{\n+    return __builtin_riscv_packh(rs1, rs2);\n+}\n+\n+int64_t foo3(int16_t rs1, int16_t rs2)\n+{\n+    return __builtin_riscv_packw(rs1, rs2);\n+}\n+\n+int64_t foo4(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_brev8(rs1);\n+}\n+/* { dg-final { scan-assembler-times \"pack\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"packh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"packw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"brev8\" 1 } } */"}, {"sha": "a8e29200250be66612761479e98de417edb5d166", "filename": "gcc/testsuite/gcc.target/riscv/zbkc32.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkc32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkc32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkc32.c?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32gc_zbkc -mabi=ilp32\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+#include <stdint-gcc.h>\n+\n+int32_t foo1(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_clmul(rs1, rs2);\n+}\n+\n+int32_t foo2(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_clmulh(rs1, rs2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"clmul\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"clmulh\" 1 } } */"}, {"sha": "728f8baf099db3c2b377faa7174fe18127287ced", "filename": "gcc/testsuite/gcc.target/riscv/zbkc64.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkc64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkc64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkc64.c?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64gc_zbkc -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+#include <stdint-gcc.h>\n+\n+int64_t foo1(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_clmul(rs1, rs2);\n+}\n+\n+int64_t foo2(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_clmulh(rs1, rs2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"clmul\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"clmulh\" 1 } } */"}, {"sha": "bd95524f548b3047d5c608b1df732fe7da5487c2", "filename": "gcc/testsuite/gcc.target/riscv/zbkx32.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkx32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkx32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkx32.c?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32gc_zbkx -mabi=ilp32\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+\n+#include <stdint-gcc.h>\n+\n+int32_t foo3(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_xperm8(rs1, rs2);\n+}\n+\n+int32_t foo4(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_xperm4(rs1, rs2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xperm8\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xperm4\" 1 } } */"}, {"sha": "2a04a94b86c4d8c10eaf359d383e58e6d22ad22d", "filename": "gcc/testsuite/gcc.target/riscv/zbkx64.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkx64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8095109b8756bebc5d0ac2cc0ded34fd6a46df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkx64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbkx64.c?ref=2c8095109b8756bebc5d0ac2cc0ded34fd6a46df", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64gc_zbkx -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+\n+#include <stdint-gcc.h>\n+\n+int64_t foo1(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_xperm8(rs1, rs2);\n+}\n+\n+int64_t foo2(int64_t rs1, int64_t rs2)\n+{\n+    return __builtin_riscv_xperm4(rs1, rs2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xperm8\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xperm4\" 1 } } */"}]}