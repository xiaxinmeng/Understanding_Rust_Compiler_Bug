{"sha": "7d6051b12507a69c82e21fbea867dd8b0eda22c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2MDUxYjEyNTA3YTY5YzgyZTIxZmJlYTg2N2RkOGIwZWRhMjJjOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2018-04-18T11:29:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-04-18T11:29:26Z"}, "message": "re PR lto/85391 (ICE in add_type_duplicate, at ipa-devirt.c:1887)\n\n\n\tPR lto/85391\n\t* lto.c (lto_read_decls): Do not test TYPE_CANONICAL before registering odr\n\ttypes.\n\t* g++.dg/lto/pr83121_0.C: Update template.\n\t* g++.dg/lto/pr83121_1.C: Update template.\n\t* g++.dg/lto/pr84805_0.C: Update template.\n\t* g++.dg/lto/pr84805_1.C: Update template.\n\t* g++.dg/lto/pr84805_2.C: Update template.\n\nCo-Authored-By: Martin Liska <mliska@suse.cz>\n\nFrom-SVN: r259464", "tree": {"sha": "e66fcfbcc312f6190043bde8bc8cfb232ac73f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e66fcfbcc312f6190043bde8bc8cfb232ac73f7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d6051b12507a69c82e21fbea867dd8b0eda22c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6051b12507a69c82e21fbea867dd8b0eda22c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6051b12507a69c82e21fbea867dd8b0eda22c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6051b12507a69c82e21fbea867dd8b0eda22c8/comments", "author": null, "committer": null, "parents": [{"sha": "8cc8789fb4063eda4dcd5efd02a0b1cd255874c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc8789fb4063eda4dcd5efd02a0b1cd255874c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cc8789fb4063eda4dcd5efd02a0b1cd255874c8"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "fc0ecb7945052dcc67a40373a424d89af3238931", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=7d6051b12507a69c82e21fbea867dd8b0eda22c8", "patch": "@@ -1,3 +1,10 @@\n+2018-04-18  Jan Hubicka  <jh@suse.cz>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/85391\n+\t* lto.c (lto_read_decls): Do not test TYPE_CANONICAL before registering odr\n+\ttypes.\n+\n 2018-04-11  Martin Liska  <mliska@suse.cz>\n \n \t* lto-symtab.c (lto_symtab_merge_p): Use attribute_value_equal"}, {"sha": "0099398ece905fc4696aa551fcc0bcaaf198a28d", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=7d6051b12507a69c82e21fbea867dd8b0eda22c8", "patch": "@@ -1772,12 +1772,13 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n \t\t  seen_type = true;\n \t\t  num_prevailing_types++;\n \t\t  lto_fixup_prevailing_type (t);\n-\t\t}\n-\t      /* Compute the canonical type of all types.\n-\t\t ???  Should be able to assert that !TYPE_CANONICAL.  */\n-\t      if (TYPE_P (t) && !TYPE_CANONICAL (t))\n-\t\t{\n-\t\t  gimple_register_canonical_type (t);\n+\n+\t          /* Compute the canonical type of all types.\n+\t\t     Because SCC components ar estreame in random (hash) order\n+\t\t     we may have enountered the type before while registering\n+\t\t     type canonical of a derived type in the same SCC.  */\n+\t\t  if (!TYPE_CANONICAL (t))\n+\t\t    gimple_register_canonical_type (t);\n \t\t  if (odr_type_p (t))\n \t\t    register_odr_type (t);\n \t\t}"}, {"sha": "179b4422ecf4451a85c585d238b63398fa50aa93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d6051b12507a69c82e21fbea867dd8b0eda22c8", "patch": "@@ -1,3 +1,12 @@\n+2018-04-18  Jan Hubicka  <jh@suse.cz>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/lto/pr83121_0.C: Update template.\n+\t* g++.dg/lto/pr83121_1.C: Update template.\n+\t* g++.dg/lto/pr84805_0.C: Update template.\n+\t* g++.dg/lto/pr84805_1.C: Update template.\n+\t* g++.dg/lto/pr84805_2.C: Update template.\n+\n 2018-04-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84630"}, {"sha": "358b55b8fbdd196ab2617770cc7091f6a6bdbb89", "filename": "gcc/testsuite/g++.dg/lto/pr83121_0.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_0.C?ref=7d6051b12507a69c82e21fbea867dd8b0eda22c8", "patch": "@@ -4,8 +4,8 @@\n    from being optimized away.  */\n \n struct Environment { // { dg-lto-warning \"8: type 'struct Environment' violates the C\\\\+\\\\+ One Definition Rule\" }\n-  struct AsyncHooks {\n-    int providers_[2]; // { dg-lto-message \"a field of same name but different type is defined in another translation unit\" }\n+  struct AsyncHooks { // { dg-lto-warning \"10: type 'struct AsyncHooks' violates the C\\\\+\\\\+ One Definition Rule\" }\n+    int providers_[2]; // { dg-lto-message \"the first difference of corresponding definitions is field 'providers_'\" }\n   };\n   AsyncHooks async_hooks_;\n };"}, {"sha": "01b05f4e7622df74a26ee5dacf2b2cd3889c5fd2", "filename": "gcc/testsuite/g++.dg/lto/pr83121_1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_1.C?ref=7d6051b12507a69c82e21fbea867dd8b0eda22c8", "patch": "@@ -1,8 +1,8 @@\n struct Environment {\n-  struct AsyncHooks { // { dg-lto-warning \"10: type 'struct AsyncHooks' violates the C\\\\+\\\\+ One Definition Rule\" }\n-    int providers_[1]; // { dg-lto-message \"the first difference of corresponding definitions is field 'providers_'\" }\n+  struct AsyncHooks {\n+    int providers_[1];\n   };\n-  AsyncHooks async_hooks_;\n+  AsyncHooks async_hooks_; // { dg-lto-message \"a field of same name but different type is defined in another translation unit\" }\n };\n void fn1() { Environment a; }\n int main ()"}, {"sha": "34828043d2e67707371ac2e468a32599a65f0ff3", "filename": "gcc/testsuite/g++.dg/lto/pr84805_0.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C?ref=7d6051b12507a69c82e21fbea867dd8b0eda22c8", "patch": "@@ -1,5 +1,5 @@\n // { dg-lto-do link }\n-// { dg-lto-options {{-O2 -fPIC -shared -flto}} }\n+// { dg-lto-options {{-O0 -fPIC -shared -flto}} }\n \n template < typename _Tp, _Tp __v > struct integral_constant {\n   static constexpr _Tp value = __v;\n@@ -9,7 +9,7 @@ struct __is_void_helper : false_type {};\n struct is_void : __is_void_helper {};\n template < typename > struct is_array : false_type {};\n namespace __gnu_cxx {\n-enum _Lock_policy { _S_single, _S_mutex, _S_atomic };\n+enum _Lock_policy { _S_single, _S_mutex, _S_atomic }; // { dg-lto-warning \"6: type '_Lock_policy' violates the C\\\\+\\\\+ One Definition Rule\" }\n const _Lock_policy __default_lock_policy = _S_atomic;\n } namespace std {\n using __gnu_cxx::_Lock_policy;\n@@ -21,7 +21,7 @@ template < typename _Tp, _Lock_policy, bool = is_array< _Tp >::value,\n            bool = is_void::value >\n class __shared_ptr_access {};\n template < typename _Tp, _Lock_policy _Lp >\n-class __shared_ptr : __shared_ptr_access< _Tp, _Lp > {\n+class __shared_ptr : __shared_ptr_access< _Tp, _Lp > { // { dg-lto-warning \"7: type 'struct __shared_ptr' violates the C\\\\+\\\\+ One Definition Rule\" }\n   using element_type = _Tp;\n   element_type *_M_ptr;\n   __shared_count< _Lp > _M_refcount;\n@@ -88,7 +88,7 @@ class ExtNameBuff;\n class ExtSheetBuffer;\n class ExcelToSc;\n class XclImpColRowSettings;\n-struct RootData {\n+struct RootData { // { dg-lto-warning \"8: type 'struct RootData' violates the C\\\\+\\\\+ One Definition Rule\" }\n   BiffTyp eDateiTyp;\n   ExtSheetBuffer *pExtSheetBuff;\n   SharedFormulaBuffer *pShrfmlaBuff;"}, {"sha": "2d8a45c001a8521bb81e9419184e997104d8e6fc", "filename": "gcc/testsuite/g++.dg/lto/pr84805_1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_1.C?ref=7d6051b12507a69c82e21fbea867dd8b0eda22c8", "patch": "@@ -3,7 +3,7 @@ public:\n   virtual ~XclRoot();\n };\n class XclImpRoot : XclRoot {};\n-struct RootData { // { dg-lto-warning \"8: type 'struct RootData' violates the C\\\\+\\\\+ One Definition Rule\" }\n+struct RootData {\n   XclImpRoot pIR;\n };\n class ExcRoot {"}, {"sha": "a1c1a6a890154e057298dfbbec9408ff957062bb", "filename": "gcc/testsuite/g++.dg/lto/pr84805_2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6051b12507a69c82e21fbea867dd8b0eda22c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_2.C?ref=7d6051b12507a69c82e21fbea867dd8b0eda22c8", "patch": "@@ -15,7 +15,7 @@ template < _Lock_policy > class __shared_count { _Sp_counted_base<> *_M_pi; };\n template < typename a, _Lock_policy, bool = g< a >::d, bool = t::d >\n class __shared_ptr_access {};\n template < typename a, _Lock_policy l >\n-class __shared_ptr : __shared_ptr_access< a, l > { // { dg-lto-warning \"7: type 'struct __shared_ptr' violates the C\\\\+\\\\+ One Definition Rule\" }\n+class __shared_ptr : __shared_ptr_access< a, l > {\n   using m = a;\n   m *_M_ptr;\n   __shared_count< l > _M_refcount;"}]}