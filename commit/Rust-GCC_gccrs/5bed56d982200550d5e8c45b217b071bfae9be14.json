{"sha": "5bed56d982200550d5e8c45b217b071bfae9be14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlZDU2ZDk4MjIwMDU1MGQ1ZThjNDViMjE3YjA3MWJmYWU5YmUxNA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-10-17T21:15:41Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-10-17T21:15:41Z"}, "message": "argv.c, [...]: Improve manual formatting.\n\n* argv.c, asprintf.c, choose-temp.c, concat.c, cplus-dem.c,\nffs.c, fnmatch.txh, getruntime.c, make-temp-file.c,\nmkstemps.c, pexecute.c, random.c, strsitnal.c, vasprintf.c:\nImprove manual formatting.\n* functions.texi: Regenerate.\n\nFrom-SVN: r46323", "tree": {"sha": "e2ffc65e72b8e65621fcec4349bc96ac9591f224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2ffc65e72b8e65621fcec4349bc96ac9591f224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bed56d982200550d5e8c45b217b071bfae9be14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bed56d982200550d5e8c45b217b071bfae9be14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bed56d982200550d5e8c45b217b071bfae9be14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bed56d982200550d5e8c45b217b071bfae9be14/comments", "author": null, "committer": null, "parents": [{"sha": "51fabca55a83f4e2efad3cdccd6d312b06540c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51fabca55a83f4e2efad3cdccd6d312b06540c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51fabca55a83f4e2efad3cdccd6d312b06540c76"}], "stats": {"total": 122, "additions": 65, "deletions": 57}, "files": [{"sha": "20c08f95daa62f6ec5b42e2f97b85c0ed563af98", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -1,3 +1,11 @@\n+2001-10-17  DJ Delorie  <dj@redhat.com>\n+\n+\t* argv.c, asprintf.c, choose-temp.c, concat.c, cplus-dem.c,\n+\tffs.c, fnmatch.txh, getruntime.c, make-temp-file.c,\n+\tmkstemps.c, pexecute.c, random.c, strsitnal.c, vasprintf.c:\n+\tImprove manual formatting.\n+\t* functions.texi: Regenerate.\n+\n 2001-10-15  DJ Delorie  <dj@redhat.com>\n \n \t* Makefile.in (TEXIFILES): Add fnmatch.txh."}, {"sha": "4205579a576530089f432ca737e4fb10b43e85cb", "filename": "libiberty/argv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -66,7 +66,7 @@ extern char *strdup ();\t\t/* Duplicate a string */\n \n Duplicate an argument vector.  Simply scans through @var{vector},\n duplicating each argument until the terminating @code{NULL} is found.\n-Returns a pointer to the argument vector if successful. Returns\n+Returns a pointer to the argument vector if successful.  Returns\n @code{NULL} if there is insufficient memory to complete building the\n argument vector.\n \n@@ -150,7 +150,7 @@ is obtained from @code{malloc}.  All of the memory can be returned to the\n system with the single function call @code{freeargv}, which takes the\n returned result of @code{buildargv}, as it's argument.\n \n-Returns a pointer to the argument vector if successful. Returns\n+Returns a pointer to the argument vector if successful.  Returns\n @code{NULL} if @var{sp} is @code{NULL} or if there is insufficient\n memory to complete building the argument vector.\n "}, {"sha": "5de775616d0fef3fdf5fea18b640408cc5b3e8ca", "filename": "libiberty/asprintf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fasprintf.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n \n /*\n \n-@deftypefn Extension int asprintf (char **@var{resptr}, char *@var{format}, ...)\n+@deftypefn Extension int asprintf (char **@var{resptr}, const char *@var{format}, ...)\n \n Like @code{sprintf}, but instead of passing a pointer to a buffer, you\n pass a pointer to a pointer.  This function will compute the size of"}, {"sha": "5c2c6140dbf52bb4fcd04be5380f426ebb19fa37", "filename": "libiberty/choose-temp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fchoose-temp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fchoose-temp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fchoose-temp.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -39,7 +39,7 @@ extern char *choose_tmpdir PARAMS ((void));\n \n /*\n \n-@deftypefn Extension char* choose_temp_base ()\n+@deftypefn Extension char* choose_temp_base (void)\n \n Return a prefix for temporary file names or @code{NULL} if unable to\n find one.  The current directory is chosen if all else fails so the"}, {"sha": "98b20e16a11a49174717e9e8d88c035a42c54c97", "filename": "libiberty/concat.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fconcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fconcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconcat.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -21,10 +21,10 @@ Boston, MA 02111-1307, USA.  */\n \n /*\n \n-@deftypefn Extension char* concat (char *@var{s1}, char *@var{s2}, ..., @code{NULL})\n+@deftypefn Extension char* concat (const char *@var{s1}, const char *@var{s2}, @dots{}, @code{NULL})\n \n Concatenate zero or more of strings and return the result in freshly\n-xmalloc'd memory.  Returns @code{NULL} if insufficient memory is\n+@code{xmalloc}ed memory.  Returns @code{NULL} if insufficient memory is\n available.  The argument list is terminated by the first @code{NULL}\n pointer encountered.  Pointers to empty strings are ignored.\n \n@@ -174,7 +174,7 @@ concat VPARAMS ((const char *first, ...))\n \n /*\n \n-@deftypefn Extension char* reconcat (char *@var{optr}, char *@var{s1}, ..., @code{NULL})\n+@deftypefn Extension char* reconcat (char *@var{optr}, const char *@var{s1}, @dots{}, @code{NULL})\n \n Same as @code{concat}, except that if @var{optr} is not @code{NULL} it\n is freed after the string is created.  This is intended to be useful"}, {"sha": "e19340c5ada10ed84df8c48af21a86bdab0dd6cd", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -877,7 +877,7 @@ cplus_demangle_name_to_style (name)\n /* char *cplus_demangle (const char *mangled, int options)\n \n    If MANGLED is a mangled function name produced by GNU C++, then\n-   a pointer to a malloced string giving a C++ representation\n+   a pointer to a @code{malloc}ed string giving a C++ representation\n    of the name will be returned; otherwise NULL will be returned.\n    It is the caller's responsibility to free the string which\n    is returned."}, {"sha": "de047e217eb30502b1cd5edc20d506294716543d", "filename": "libiberty/ffs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fffs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fffs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fffs.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -2,7 +2,7 @@\n \n @deftypefn Supplemental int ffs (int @var{valu})\n \n-Find the first (least significant) bit set in @var{valu}. Bits are\n+Find the first (least significant) bit set in @var{valu}.  Bits are\n numbered from right to left, starting with bit 1 (corresponding to the\n value 1).  If @var{valu} is zero, zero is returned.\n "}, {"sha": "92e11bcb388ddf47838a025b652a55aaaf92a995", "filename": "libiberty/fnmatch.txh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Ffnmatch.txh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Ffnmatch.txh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffnmatch.txh?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -6,7 +6,7 @@ wildcards @code{?} to match any one character, @code{*} to match any\n zero or more characters, or a set of alternate characters in square\n brackets, like @samp{[a-gt8]}, which match one character (@code{a}\n through @code{g}, or @code{t}, or @code{8}, in this example) if that one\n-character is in the set.  A set may be inverted (i.e. match anything\n+character is in the set.  A set may be inverted (i.e., match anything\n except what's in the set) by giving @code{^} or @code{!} as the first\n character in the set.  To include those characters in the set, list them\n as anything other than the first character of the set.  To include a\n@@ -17,7 +17,7 @@ backslash, use @samp{\\\\}.\n \n @code{flags} controls various aspects of the matching process, and is a\n boolean OR of zero or more of the following values (defined in\n-@code{<fnmatch.h>}:\n+@code{<fnmatch.h>}):\n \n @table @code\n "}, {"sha": "af7760d89bef135059a058ce84eb940897dd45c4", "filename": "libiberty/functions.texi", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -22,7 +22,7 @@ the possibility of a GCC built-in function.\n @end deftypefn\n \n @c asprintf.c:33\n-@deftypefn Extension int asprintf (char **@var{resptr}, char *@var{format}, ...)\n+@deftypefn Extension int asprintf (char **@var{resptr}, const char *@var{format}, ...)\n \n Like @code{sprintf}, but instead of passing a pointer to a buffer, you\n pass a pointer to a pointer.  This function will compute the size of\n@@ -97,7 +97,7 @@ is obtained from @code{malloc}.  All of the memory can be returned to the\n system with the single function call @code{freeargv}, which takes the\n returned result of @code{buildargv}, as it's argument.\n \n-Returns a pointer to the argument vector if successful. Returns\n+Returns a pointer to the argument vector if successful.  Returns\n @code{NULL} if @var{sp} is @code{NULL} or if there is insufficient\n memory to complete building the argument vector.\n \n@@ -124,7 +124,7 @@ Uses @code{malloc} to allocate storage for @var{nelem} objects of\n @end deftypefn\n \n @c choose-temp.c:42\n-@deftypefn Extension char* choose_temp_base ()\n+@deftypefn Extension char* choose_temp_base (void)\n \n Return a prefix for temporary file names or @code{NULL} if unable to\n find one.  The current directory is chosen if all else fails so the\n@@ -154,10 +154,10 @@ number of seconds used.\n @end deftypefn\n \n @c concat.c:24\n-@deftypefn Extension char* concat (char *@var{s1}, char *@var{s2}, ..., @code{NULL})\n+@deftypefn Extension char* concat (const char *@var{s1}, const char *@var{s2}, @dots{}, @code{NULL})\n \n Concatenate zero or more of strings and return the result in freshly\n-xmalloc'd memory.  Returns @code{NULL} if insufficient memory is\n+@code{xmalloc}ed memory.  Returns @code{NULL} if insufficient memory is\n available.  The argument list is terminated by the first @code{NULL}\n pointer encountered.  Pointers to empty strings are ignored.\n \n@@ -168,7 +168,7 @@ pointer encountered.  Pointers to empty strings are ignored.\n \n Duplicate an argument vector.  Simply scans through @var{vector},\n duplicating each argument until the terminating @code{NULL} is found.\n-Returns a pointer to the argument vector if successful. Returns\n+Returns a pointer to the argument vector if successful.  Returns\n @code{NULL} if there is insufficient memory to complete building the\n argument vector.\n \n@@ -210,7 +210,7 @@ and inode numbers.\n @c ffs.c:3\n @deftypefn Supplemental int ffs (int @var{valu})\n \n-Find the first (least significant) bit set in @var{valu}. Bits are\n+Find the first (least significant) bit set in @var{valu}.  Bits are\n numbered from right to left, starting with bit 1 (corresponding to the\n value 1).  If @var{valu} is zero, zero is returned.\n \n@@ -225,7 +225,7 @@ wildcards @code{?} to match any one character, @code{*} to match any\n zero or more characters, or a set of alternate characters in square\n brackets, like @samp{[a-gt8]}, which match one character (@code{a}\n through @code{g}, or @code{t}, or @code{8}, in this example) if that one\n-character is in the set.  A set may be inverted (i.e. match anything\n+character is in the set.  A set may be inverted (i.e., match anything\n except what's in the set) by giving @code{^} or @code{!} as the first\n character in the set.  To include those characters in the set, list them\n as anything other than the first character of the set.  To include a\n@@ -236,7 +236,7 @@ backslash, use @samp{\\\\}.\n \n @code{flags} controls various aspects of the matching process, and is a\n boolean OR of zero or more of the following values (defined in\n-@code{<fnmatch.h>}:\n+@code{<fnmatch.h>}):\n \n @table @code\n \n@@ -277,7 +277,7 @@ itself.\n @end deftypefn\n \n @c getruntime.c:78\n-@deftypefn Replacement long get_run_time ()\n+@deftypefn Replacement long get_run_time (void)\n \n Returns the time used so far, in microseconds.  If possible, this is\n the time used by this process, else it is the elapsed time since the\n@@ -368,7 +368,7 @@ and a path ending in @code{/} returns the empty string after it.\n \n Return a temporary file name (as a string) or @code{NULL} if unable to\n create one.  @var{suffix} is a suffix to append to the file name.  The\n-string is malloced, and the temporary file has been created.\n+string is @code{malloc}ed, and the temporary file has been created.\n \n @end deftypefn\n \n@@ -427,12 +427,12 @@ Generate a unique temporary file name from @var{template}.\n @var{template} has the form:\n \n @example\n-   <path>/ccXXXXXX<suffix>\n+   @var{path}/ccXXXXXX@var{suffix}\n @end example\n \n-@var{suffix_len} tells us how long <suffix> is (it can be zero\n-length).  The last six characters of @var{template} before <suffix>\n-must be @code{XXXXXX}; they are replaced with a string that makes the\n+@var{suffix_len} tells us how long @var{suffix} is (it can be zero\n+length).  The last six characters of @var{template} before @var{suffix}\n+must be @samp{XXXXXX}; they are replaced with a string that makes the\n filename unique.  Returns a file descriptor open on the file for\n reading and writing.\n \n@@ -446,17 +446,17 @@ Executes a program.\n @var{program} and @var{argv} are the arguments to\n @code{execv}/@code{execvp}.\n \n-@var{this_pname} is name of the calling program (i.e. @code{argv[0]}).\n+@var{this_pname} is name of the calling program (i.e., @code{argv[0]}).\n \n @var{temp_base} is the path name, sans suffix, of a temporary file to\n use if needed.  This is currently only needed for MS-DOS ports that\n don't use @code{go32} (do any still exist?).  Ports that don't need it\n can pass @code{NULL}.\n \n-(@var{flags} & @code{PEXECUTE_SEARCH}) is non-zero if @code{$PATH} should be searched\n-(??? It's not clear that GCC passes this flag correctly). (@var{flags} &\n-@code{PEXECUTE_FIRST}) is nonzero for the first process in chain.\n-(@var{flags} & @code{PEXECUTE_FIRST}) is nonzero for the last process\n+(@code{@var{flags} & PEXECUTE_SEARCH}) is non-zero if @env{PATH} should be searched\n+(??? It's not clear that GCC passes this flag correctly).  (@code{@var{flags} &\n+PEXECUTE_FIRST}) is nonzero for the first process in chain.\n+(@code{@var{flags} & PEXECUTE_FIRST}) is nonzero for the last process\n in chain.  The first/last flags could be simplified to only mark the\n last of a chain of processes but that requires the caller to always\n mark the last one (and not give up early if some error occurs).\n@@ -466,12 +466,12 @@ The result is the pid on systems like Unix where we\n @code{fork}/@code{exec} and on systems like WIN32 and OS/2 where we\n use @code{spawn}.  It is up to the caller to wait for the child.\n \n-The result is the WEXITSTATUS on systems like MS-DOS where we\n+The result is the @code{WEXITSTATUS} on systems like MS-DOS where we\n @code{spawn} and wait for the child here.\n \n Upon failure, @var{errmsg_fmt} and @var{errmsg_arg} are set to the\n text of the error message with an optional argument (if not needed,\n-@var{errmsg_arg} is set to @code{NULL}), and -1 is returned.\n+@var{errmsg_arg} is set to @code{NULL}), and @minus{}1 is returned.\n @code{errno} is available to the caller to use.\n \n @end deftypefn\n@@ -514,22 +514,22 @@ is just a mechanism to provide a consistent interface for the caller.\n @end deftypefn\n \n @c random.c:39\n-@deftypefn Supplement {long int} random ()\n+@deftypefn Supplement {long int} random (void)\n @deftypefnx Supplement void srandom (unsigned int @var{seed})\n @deftypefnx Supplement void* initstate (unsigned int @var{seed}, void *@var{arg_state}, unsigned long @var{n})\n @deftypefnx Supplement void* setstate (void *@var{arg_state})\n \n Random number functions.  @code{random} returns a random number in the\n-range @code{0..LONG_MAX}.  @code{srandom} initializes the random\n+range 0 to @code{LONG_MAX}.  @code{srandom} initializes the random\n number generator to some starting point determined by @var{seed}\n (else, the values returned by @code{random} are always the same for each\n-run of the program).  @code{initstate} and @code{setstate} allow fine-grain\n+run of the program).  @code{initstate} and @code{setstate} allow fine-grained\n control over the state of the random number generator.\n \n @end deftypefn\n \n @c concat.c:177\n-@deftypefn Extension char* reconcat (char *@var{optr}, char *@var{s1}, ..., @code{NULL})\n+@deftypefn Extension char* reconcat (char *@var{optr}, const char *@var{s1}, @dots{}, @code{NULL})\n \n Same as @code{concat}, except that if @var{optr} is not @code{NULL} it\n is freed after the string is created.  This is intended to be useful\n@@ -572,7 +572,7 @@ environment.  This implementation is not safe for multithreaded code.\n @end deftypefn\n \n @c strsignal.c:353\n-@deftypefn Extension int signo_max ()\n+@deftypefn Extension int signo_max (void)\n \n Returns the maximum signal value for which a corresponding symbolic\n name or message is available.  Note that in the case where we use the\n@@ -803,7 +803,7 @@ not be used in new projects.  Use @code{mkstemp} instead.\n @end deftypefn\n \n @c vasprintf.c:48\n-@deftypefn Extension int vasprintf (char **@var{resptr}, char *@var{format}, va_list @var{args})\n+@deftypefn Extension int vasprintf (char **@var{resptr}, const char *@var{format}, va_list @var{args})\n \n Like @code{vsprintf}, but instead of passing a pointer to a buffer,\n you pass a pointer to a pointer.  This function will compute the size"}, {"sha": "9301deb773e7f8933212c7a719a4fa26cc002874", "filename": "libiberty/getruntime.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fgetruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fgetruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetruntime.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -75,7 +75,7 @@ Boston, MA 02111-1307, USA.  */\n \n /*\n \n-@deftypefn Replacement long get_run_time ()\n+@deftypefn Replacement long get_run_time (void)\n \n Returns the time used so far, in microseconds.  If possible, this is\n the time used by this process, else it is the elapsed time since the"}, {"sha": "883350479fce9aaac8e9fcfde50bc424fdde37d7", "filename": "libiberty/make-temp-file.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fmake-temp-file.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fmake-temp-file.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmake-temp-file.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -139,7 +139,7 @@ choose_tmpdir ()\n \n Return a temporary file name (as a string) or @code{NULL} if unable to\n create one.  @var{suffix} is a suffix to append to the file name.  The\n-string is malloced, and the temporary file has been created.\n+string is @code{malloc}ed, and the temporary file has been created.\n \n @end deftypefn\n "}, {"sha": "8fe5784f1897791dfce6c682dc8edb170027b332", "filename": "libiberty/mkstemps.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fmkstemps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fmkstemps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmkstemps.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -57,12 +57,12 @@ Generate a unique temporary file name from @var{template}.\n @var{template} has the form:\n \n @example\n-   <path>/ccXXXXXX<suffix>\n+   @var{path}/ccXXXXXX@var{suffix}\n @end example\n \n-@var{suffix_len} tells us how long <suffix> is (it can be zero\n-length).  The last six characters of @var{template} before <suffix>\n-must be @code{XXXXXX}; they are replaced with a string that makes the\n+@var{suffix_len} tells us how long @var{suffix} is (it can be zero\n+length).  The last six characters of @var{template} before @var{suffix}\n+must be @samp{XXXXXX}; they are replaced with a string that makes the\n filename unique.  Returns a file descriptor open on the file for\n reading and writing.\n "}, {"sha": "347c4db10924737cfebd0cd52c6c37982be4b4d4", "filename": "libiberty/pexecute.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpexecute.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -71,17 +71,17 @@ Executes a program.\n @var{program} and @var{argv} are the arguments to\n @code{execv}/@code{execvp}.\n \n-@var{this_pname} is name of the calling program (i.e. @code{argv[0]}).\n+@var{this_pname} is name of the calling program (i.e., @code{argv[0]}).\n \n @var{temp_base} is the path name, sans suffix, of a temporary file to\n use if needed.  This is currently only needed for MS-DOS ports that\n don't use @code{go32} (do any still exist?).  Ports that don't need it\n can pass @code{NULL}.\n \n-(@var{flags} & @code{PEXECUTE_SEARCH}) is non-zero if @code{$PATH} should be searched\n-(??? It's not clear that GCC passes this flag correctly). (@var{flags} &\n-@code{PEXECUTE_FIRST}) is nonzero for the first process in chain.\n-(@var{flags} & @code{PEXECUTE_FIRST}) is nonzero for the last process\n+(@code{@var{flags} & PEXECUTE_SEARCH}) is non-zero if @env{PATH} should be searched\n+(??? It's not clear that GCC passes this flag correctly).  (@code{@var{flags} &\n+PEXECUTE_FIRST}) is nonzero for the first process in chain.\n+(@code{@var{flags} & PEXECUTE_FIRST}) is nonzero for the last process\n in chain.  The first/last flags could be simplified to only mark the\n last of a chain of processes but that requires the caller to always\n mark the last one (and not give up early if some error occurs).\n@@ -91,12 +91,12 @@ The result is the pid on systems like Unix where we\n @code{fork}/@code{exec} and on systems like WIN32 and OS/2 where we\n use @code{spawn}.  It is up to the caller to wait for the child.\n \n-The result is the WEXITSTATUS on systems like MS-DOS where we\n+The result is the @code{WEXITSTATUS} on systems like MS-DOS where we\n @code{spawn} and wait for the child here.\n \n Upon failure, @var{errmsg_fmt} and @var{errmsg_arg} are set to the\n text of the error message with an optional argument (if not needed,\n-@var{errmsg_arg} is set to @code{NULL}), and -1 is returned.\n+@var{errmsg_arg} is set to @code{NULL}), and @minus{}1 is returned.\n @code{errno} is available to the caller to use.\n \n @end deftypefn"}, {"sha": "48035f0821f25957df86d2cc573a27b3e0cf448c", "filename": "libiberty/random.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frandom.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -36,16 +36,16 @@\n \n /*\n \n-@deftypefn Supplement {long int} random ()\n+@deftypefn Supplement {long int} random (void)\n @deftypefnx Supplement void srandom (unsigned int @var{seed})\n @deftypefnx Supplement void* initstate (unsigned int @var{seed}, void *@var{arg_state}, unsigned long @var{n})\n @deftypefnx Supplement void* setstate (void *@var{arg_state})\n \n Random number functions.  @code{random} returns a random number in the\n-range @code{0..LONG_MAX}.  @code{srandom} initializes the random\n+range 0 to @code{LONG_MAX}.  @code{srandom} initializes the random\n number generator to some starting point determined by @var{seed}\n (else, the values returned by @code{random} are always the same for each\n-run of the program).  @code{initstate} and @code{setstate} allow fine-grain\n+run of the program).  @code{initstate} and @code{setstate} allow fine-grained\n control over the state of the random number generator.\n \n @end deftypefn"}, {"sha": "86c8aca5b499d0cfbac0852463b822f13e8c28f7", "filename": "libiberty/strsignal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fstrsignal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fstrsignal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrsignal.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -350,7 +350,7 @@ init_signal_tables ()\n \n /*\n \n-@deftypefn Extension int signo_max ()\n+@deftypefn Extension int signo_max (void)\n \n Returns the maximum signal value for which a corresponding symbolic\n name or message is available.  Note that in the case where we use the"}, {"sha": "d438225fc1e4bc65d2bdb74bdd9ef41a209d44fb", "filename": "libiberty/vasprintf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fvasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed56d982200550d5e8c45b217b071bfae9be14/libiberty%2Fvasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvasprintf.c?ref=5bed56d982200550d5e8c45b217b071bfae9be14", "patch": "@@ -45,7 +45,7 @@ int global_total_width;\n \n /*\n \n-@deftypefn Extension int vasprintf (char **@var{resptr}, char *@var{format}, va_list @var{args})\n+@deftypefn Extension int vasprintf (char **@var{resptr}, const char *@var{format}, va_list @var{args})\n \n Like @code{vsprintf}, but instead of passing a pointer to a buffer,\n you pass a pointer to a pointer.  This function will compute the size"}]}