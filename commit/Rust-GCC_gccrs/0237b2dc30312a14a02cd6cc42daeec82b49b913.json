{"sha": "0237b2dc30312a14a02cd6cc42daeec82b49b913", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzN2IyZGMzMDMxMmExNGEwMmNkNmNjNDJkYWVlYzgyYjQ5YjkxMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-02-10T19:12:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-02-10T19:12:34Z"}, "message": "gjavah.c: Include \"intl.h\".\n\n\t* gjavah.c: Include \"intl.h\".\n\t(error): New function.\n\t(main): Call gcc_init_libintl.\n\t(get_field_name, throwable_p, print_c_decl, print_full_cxx_name,\n\tprint_stub_or_jni, process_file, main): Use error rather than\n\tfprintf.\n\t(print_method_info, usage, help, version, main): Mark strings for\n\ttranslation with _.  Avoid splitting up sentences.  Send\n\tinformation messages to stdout.\n\t* jcf-dump.c: Include \"intl.h\".\n\t(main): Call gcc_init_libintl.\n\t(process_class, usage, help, version, main, CHECK_PC_IN_RANGE):\n\tMark error, usage and version messages for translation with _.\n\tAvoid splitting up sentences.\n\t* jv-scan.c: Include \"intl.h\".\n\t(fatal_error, warning): Change parameter s to msgid.  Translate\n\tmessages.\n\t(main): Call gcc_init_libintl.\n\t(usage, help, version): Mark error, usage and version messages for\n\ttranslation with _.  Avoid splitting up sentences.\n\t* jvgenmain.c: Include \"intl.h\".\n\t(main): Call gcc_init_libintl.\n\t(usage, main): Mark error messages for translation with _.\n\t* Make-lang.in (GCJH_OBJS, JVSCAN_OBJS, JCFDUMP_OBJS,\n\tJVGENMAIN_OBJS): Add intl.o.\n\t(java/jcf-dump.o, java/gjavah.o, java/jv-scan.o,\n\tjava/jvgenmain.o): Update dependencies.\n\nFrom-SVN: r77614", "tree": {"sha": "5164f4a96fabe5e2f67cebaaee4cba2f0cdec4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5164f4a96fabe5e2f67cebaaee4cba2f0cdec4b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0237b2dc30312a14a02cd6cc42daeec82b49b913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0237b2dc30312a14a02cd6cc42daeec82b49b913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0237b2dc30312a14a02cd6cc42daeec82b49b913", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0237b2dc30312a14a02cd6cc42daeec82b49b913/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b38bcac645a40e200bcb270f8857ac7cf73a717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b38bcac645a40e200bcb270f8857ac7cf73a717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b38bcac645a40e200bcb270f8857ac7cf73a717"}], "stats": {"total": 316, "additions": 183, "deletions": 133}, "files": [{"sha": "8b8a3f8509901d87ad5d06793d557ca5427300d4", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0237b2dc30312a14a02cd6cc42daeec82b49b913", "patch": "@@ -1,3 +1,33 @@\n+2004-02-10  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gjavah.c: Include \"intl.h\".\n+\t(error): New function.\n+\t(main): Call gcc_init_libintl.\n+\t(get_field_name, throwable_p, print_c_decl, print_full_cxx_name,\n+\tprint_stub_or_jni, process_file, main): Use error rather than\n+\tfprintf.\n+\t(print_method_info, usage, help, version, main): Mark strings for\n+\ttranslation with _.  Avoid splitting up sentences.  Send\n+\tinformation messages to stdout.\n+\t* jcf-dump.c: Include \"intl.h\".\n+\t(main): Call gcc_init_libintl.\n+\t(process_class, usage, help, version, main, CHECK_PC_IN_RANGE):\n+\tMark error, usage and version messages for translation with _.\n+\tAvoid splitting up sentences.\n+\t* jv-scan.c: Include \"intl.h\".\n+\t(fatal_error, warning): Change parameter s to msgid.  Translate\n+\tmessages.\n+\t(main): Call gcc_init_libintl.\n+\t(usage, help, version): Mark error, usage and version messages for\n+\ttranslation with _.  Avoid splitting up sentences.\n+\t* jvgenmain.c: Include \"intl.h\".\n+\t(main): Call gcc_init_libintl.\n+\t(usage, main): Mark error messages for translation with _.\n+\t* Make-lang.in (GCJH_OBJS, JVSCAN_OBJS, JCFDUMP_OBJS,\n+\tJVGENMAIN_OBJS): Add intl.o.\n+\t(java/jcf-dump.o, java/gjavah.o, java/jv-scan.o,\n+\tjava/jvgenmain.o): Update dependencies.\n+\n 2004-02-08  Per Bothner  <per@bothner.com>\n \n \t* parse.y (resolve_qualified_expression_name):  In case of inaccessible"}, {"sha": "1a20362f58a5762c21aeb63953edca5282f39e7a", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=0237b2dc30312a14a02cd6cc42daeec82b49b913", "patch": "@@ -1,6 +1,6 @@\n # Top level -*- makefile -*- fragment for the GNU compiler for the Java(TM)\n # language.\n-#   Copyright (C) 1996, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+#   Copyright (C) 1996, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -108,14 +108,15 @@ JAVA_OBJS = java/parse.o java/class.o java/decl.o java/expr.o \\\n   java/jcf-path.o java/xref.o java/boehm.o java/java-tree-inline.o mkdeps.o\n \n GCJH_OBJS = java/gjavah.o java/jcf-io.o java/jcf-depend.o java/jcf-path.o \\\n-  java/win32-host.o java/zextract.o version.o mkdeps.o errors.o ggc-none.o\n+  java/win32-host.o java/zextract.o version.o mkdeps.o errors.o ggc-none.o \\\n+  intl.o\n \n-JVSCAN_OBJS = java/parse-scan.o java/jv-scan.o version.o\n+JVSCAN_OBJS = java/parse-scan.o java/jv-scan.o version.o intl.o\n \n JCFDUMP_OBJS = java/jcf-dump.o java/jcf-io.o java/jcf-depend.o java/jcf-path.o \\\n-\t\tjava/win32-host.o java/zextract.o errors.o version.o mkdeps.o ggc-none.o\n+\t\tjava/win32-host.o java/zextract.o errors.o version.o mkdeps.o ggc-none.o intl.o\n \n-JVGENMAIN_OBJS = java/jvgenmain.o java/mangle_name.o errors.o\n+JVGENMAIN_OBJS = java/jvgenmain.o java/mangle_name.o errors.o intl.o\n \n # Use loose warnings for this front end.\n java-warn = $(WERROR)\n@@ -272,9 +273,10 @@ JAVA_LEX_C = java/lex.c java/keyword.h java/chartables.h\n \n java/jcf-dump.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(JAVA_TREE_H) \\\n   java/jcf-dump.c java/jcf-reader.c java/jcf.h java/javaop.h java/javaop.def \\\n-  version.h $(GGC_H)\n+  version.h $(GGC_H) intl.h\n java/gjavah.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(JAVA_TREE_H) \\\n-  java/gjavah.c java/jcf-reader.c java/jcf.h java/javaop.h version.h $(GGC_H)\n+  java/gjavah.c java/jcf-reader.c java/jcf.h java/javaop.h version.h $(GGC_H) \\\n+  intl.h\n java/boehm.o: java/boehm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(TREE_H) $(JAVA_TREE_H) java/parse.h toplev.h\n java/buffer.o: java/buffer.c $(CONFIG_H) java/buffer.h $(SYSTEM_H) coretypes.h \\\n@@ -308,9 +310,9 @@ java/jcf-write.o: java/jcf-write.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   $(RTL_H) java/java-opcodes.h java/parse.h java/buffer.h $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(GGC_H) gt-java-jcf-write.h $(TM_P_H)\n java/jv-scan.o: java/jv-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  version.h\n+  version.h intl.h\n java/jvgenmain.o: java/jvgenmain.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H) \\\n-  coretypes.h $(TM_H)\n+  coretypes.h $(TM_H) intl.h\n java/lang.o: java/lang.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h input.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(EXPR_H) diagnostic.h \\\n   langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h options.h"}, {"sha": "4afa14959551f247ad0d3e7741464d9bf4d19a9c", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 70, "deletions": 62, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=0237b2dc30312a14a02cd6cc42daeec82b49b913", "patch": "@@ -1,7 +1,7 @@\n /* Program to write C++-suitable header files from a Java(TM) .class\n    file.  This is similar to SUN's javah.\n \n-Copyright (C) 1996, 1998, 1999, 2000, 2001, 2002, 2003\n+Copyright (C) 1996, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -40,6 +40,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"java-opcodes.h\"\n #include \"ggc.h\"\n #include \"hashtab.h\"\n+#include \"intl.h\"\n \n #include <getopt.h>\n \n@@ -150,6 +151,7 @@ static const unsigned char *\n   decode_signature_piece (FILE *, const unsigned char *,\n \t\t\t  const unsigned char *, int *);\n static void print_class_decls (FILE *, JCF *, int);\n+static void error (const char *msgid, ...);\n static void usage (void) ATTRIBUTE_NORETURN;\n static void help (void) ATTRIBUTE_NORETURN;\n static void version (void) ATTRIBUTE_NORETURN;\n@@ -251,6 +253,21 @@ static int decompiled = 0;\n \n #include \"jcf-reader.c\"\n \n+/* Print an error message and set found_error.  */\n+static void\n+error (const char *msgid, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, msgid);\n+\n+  fprintf (stderr, \"gcjh: \");\n+  vfprintf (stderr, _(msgid), ap);\n+  va_end (ap);\n+  fprintf (stderr, \"\\n\");\n+  found_error = 1;\n+}\n+\n /* Print a single-precision float, suitable for parsing by g++.  */\n static void\n jni_print_float (FILE *stream, jfloat f)\n@@ -652,8 +669,7 @@ get_field_name (JCF *jcf, int name_index, JCF_u2 flags)\n \t trouble.  */\n       if ((flags & ACC_STATIC))\n \t{\n-\t  fprintf (stderr, \"static field has same name as method\\n\");\n-\t  found_error = 1;\n+\t  error (\"static field has same name as method\");\n \t  return NULL;\n \t}\n \n@@ -812,9 +828,9 @@ print_method_info (FILE *stream, JCF* jcf, int name_index, int sig_index,\n \t{\n \t  /* FIXME: i18n bug here.  Order of prints should not be\n \t     fixed.  */\n-\t  fprintf (stderr, \"ignored method `\");\n+\t  fprintf (stderr, _(\"ignored method `\"));\n \t  jcf_print_utf8 (stderr, str, length);\n-\t  fprintf (stderr, \"' marked virtual\\n\");\n+\t  fprintf (stderr, _(\"' marked virtual\\n\"));\n \t  found_error = 1;\n \t  return;\n \t}\n@@ -1161,16 +1177,14 @@ throwable_p (const unsigned char *clname)\n \n       if (! classfile_name)\n \t{\n-\t  fprintf (stderr, \"couldn't find class %s\\n\", current);\n-\t  found_error = 1;\n+\t  error (\"couldn't find class %s\", current);\n \t  return 0;\n \t}\n       if (jcf_parse_preamble (&jcf) != 0\n \t  || jcf_parse_constant_pool (&jcf) != 0\n \t  || verify_constant_pool (&jcf) > 0)\n \t{\n-\t  fprintf (stderr, \"parse error while reading %s\\n\", classfile_name);\n-\t  found_error = 1;\n+\t  error (\"parse error while reading %s\", classfile_name);\n \t  return 0;\n \t}\n       jcf_parse_class (&jcf);\n@@ -1396,8 +1410,7 @@ print_c_decl (FILE* stream, JCF* jcf, int name_index, int signature_index,\n \t  next = decode_signature_piece (stream, str, limit, &need_space);\n \t  if (! next)\n \t    {\n-\t      fprintf (stderr, \"unparseable signature: `%s'\\n\", str0);\n-\t      found_error = 1;\n+\t      error (\"unparseable signature: `%s'\", str0);\n \t      return;\n \t    }\n \t}\n@@ -1499,8 +1512,7 @@ print_full_cxx_name (FILE* stream, JCF* jcf, int name_index,\n \t  next = decode_signature_piece (stream, str, limit, &need_space);\n \t  if (! next)\n \t    {\n-\t      fprintf (stderr, \"unparseable signature: `%s'\\n\", str0);\n-\t      found_error = 1;\n+\t      error (\"unparseable signature: `%s'\", str0);\n \t      return;\n \t    }\n \t  \n@@ -1575,8 +1587,7 @@ print_stub_or_jni (FILE* stream, JCF* jcf, int name_index,\n \t  next = decode_signature_piece (stream, str, limit, &need_space);\n \t  if (! next)\n \t    {\n-\t      fprintf (stderr, \"unparseable signature: `%s'\\n\", str0);\n-\t      found_error = 1;\n+\t      error (\"unparseable signature: `%s'\", str0);\n \t      return;\n \t    }\n \t}\n@@ -1966,24 +1977,21 @@ process_file (JCF *jcf, FILE *out)\n \n   if (jcf_parse_preamble (jcf) != 0)\n     {\n-      fprintf (stderr, \"Not a valid Java .class file.\\n\");\n-      found_error = 1;\n+      error (\"Not a valid Java .class file.\");\n       return;\n     }\n \n   /* Parse and possibly print constant pool */\n   code = jcf_parse_constant_pool (jcf);\n   if (code != 0)\n     {\n-      fprintf (stderr, \"error while parsing constant pool\\n\");\n-      found_error = 1;\n+      error (\"error while parsing constant pool\");\n       return;\n     }\n   code = verify_constant_pool (jcf);\n   if (code > 0)\n     {\n-      fprintf (stderr, \"error in constant pool entry #%d\\n\", code);\n-      found_error = 1;\n+      error (\"error in constant pool entry #%d\", code);\n       return;\n     }\n \n@@ -2126,17 +2134,15 @@ process_file (JCF *jcf, FILE *out)\n \t  if (! print_cxx_classname (out, \"class \", jcf,\n \t\t\t\t     jcf->this_class, 0))\n \t    {\n-\t      fprintf (stderr, \"class is of array type\\n\");\n-\t      found_error = 1;\n+\t      error (\"class is of array type\\n\");\n \t      return;\n \t    }\n \t  if (jcf->super_class)\n \t    {\n \t      if (! print_cxx_classname (out, \" : public \", \n \t\t\t\t\t jcf, jcf->super_class, 1))\n \t\t{\n-\t\t  fprintf (stderr, \"base class is of array type\\n\");\n-\t\t  found_error = 1;\n+\t\t  error (\"base class is of array type\");\n \t\t  return;\n \t\t}\n \t    }\n@@ -2252,55 +2258,55 @@ static const struct option options[] =\n static void\n usage (void)\n {\n-  fprintf (stderr, \"Try `gcjh --help' for more information.\\n\");\n+  fprintf (stderr, _(\"Try `gcjh --help' for more information.\\n\"));\n   exit (1);\n }\n \n static void\n help (void)\n {\n-  printf (\"Usage: gcjh [OPTION]... CLASS...\\n\\n\");\n-  printf (\"Generate C++ header files from .class files\\n\\n\");\n-  printf (\"  -stubs                  Generate an implementation stub file\\n\");\n-  printf (\"  -jni                    Generate a JNI header or stub\\n\");\n+  printf (_(\"Usage: gcjh [OPTION]... CLASS...\\n\\n\"));\n+  printf (_(\"Generate C++ header files from .class files\\n\\n\"));\n+  printf (_(\"  -stubs                  Generate an implementation stub file\\n\"));\n+  printf (_(\"  -jni                    Generate a JNI header or stub\\n\"));\n   printf (\"\\n\");\n-  printf (\"  -add TEXT               Insert TEXT into class body\\n\");\n-  printf (\"  -append TEXT            Insert TEXT after class declaration\\n\");\n-  printf (\"  -friend TEXT            Insert TEXT as `friend' declaration\\n\");\n-  printf (\"  -prepend TEXT           Insert TEXT before start of class\\n\");\n+  printf (_(\"  -add TEXT               Insert TEXT into class body\\n\"));\n+  printf (_(\"  -append TEXT            Insert TEXT after class declaration\\n\"));\n+  printf (_(\"  -friend TEXT            Insert TEXT as `friend' declaration\\n\"));\n+  printf (_(\"  -prepend TEXT           Insert TEXT before start of class\\n\"));\n   printf (\"\\n\");\n-  printf (\"  --classpath PATH        Set path to find .class files\\n\");\n-  printf (\"  -IDIR                   Append directory to class path\\n\");\n-  printf (\"  --bootclasspath PATH    Override built-in class path\\n\");\n-  printf (\"  --extdirs PATH          Set extensions directory path\\n\");\n-  printf (\"  -d DIRECTORY            Set output directory name\\n\");\n-  printf (\"  -o FILE                 Set output file name\\n\");\n-  printf (\"  -td DIRECTORY           Set temporary directory name\\n\");\n+  printf (_(\"  --classpath PATH        Set path to find .class files\\n\"));\n+  printf (_(\"  -IDIR                   Append directory to class path\\n\"));\n+  printf (_(\"  --bootclasspath PATH    Override built-in class path\\n\"));\n+  printf (_(\"  --extdirs PATH          Set extensions directory path\\n\"));\n+  printf (_(\"  -d DIRECTORY            Set output directory name\\n\"));\n+  printf (_(\"  -o FILE                 Set output file name\\n\"));\n+  printf (_(\"  -td DIRECTORY           Set temporary directory name\\n\"));\n   printf (\"\\n\");\n-  printf (\"  --help                  Print this help, then exit\\n\");\n-  printf (\"  --version               Print version number, then exit\\n\");\n-  printf (\"  -v, --verbose           Print extra information while running\\n\");\n+  printf (_(\"  --help                  Print this help, then exit\\n\"));\n+  printf (_(\"  --version               Print version number, then exit\\n\"));\n+  printf (_(\"  -v, --verbose           Print extra information while running\\n\"));\n   printf (\"\\n\");\n-  printf (\"  -M                      Print all dependencies to stdout;\\n\");\n-  printf (\"                             suppress ordinary output\\n\");\n-  printf (\"  -MM                     Print non-system dependencies to stdout;\\n\");\n-  printf (\"                             suppress ordinary output\\n\");\n-  printf (\"  -MD                     Print all dependencies to stdout\\n\");\n-  printf (\"  -MMD                    Print non-system dependencies to stdout\\n\");\n+  printf (_(\"  -M                      Print all dependencies to stdout;\\n\"\n+\t    \"                             suppress ordinary output\\n\"));\n+  printf (_(\"  -MM                     Print non-system dependencies to stdout;\\n\"\n+\t    \"                             suppress ordinary output\\n\"));\n+  printf (_(\"  -MD                     Print all dependencies to stdout\\n\"));\n+  printf (_(\"  -MMD                    Print non-system dependencies to stdout\\n\"));\n   /* We omit -MG until it is implemented.  */\n   printf (\"\\n\");\n-  printf (\"For bug reporting instructions, please see:\\n\");\n-  printf (\"%s.\\n\", bug_report_url);\n+  printf (_(\"For bug reporting instructions, please see:\\n\"\n+\t    \"%s.\\n\"), bug_report_url);\n   exit (0);\n }\n \n static void\n version (void)\n {\n   printf (\"gcjh (GCC) %s\\n\\n\", version_string);\n-  printf (\"Copyright (C) 2002 Free Software Foundation, Inc.\\n\");\n-  printf (\"This is free software; see the source for copying conditions.  There is NO\\n\");\n-  printf (\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\");\n+  printf (\"Copyright %s 2004 Free Software Foundation, Inc.\\n\", _(\"(C)\"));\n+  printf (_(\"This is free software; see the source for copying conditions.  There is NO\\n\"\n+\t    \"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"));\n   exit (0);\n }\n \n@@ -2313,9 +2319,11 @@ main (int argc, char** argv)\n   int emit_dependencies = 0, suppress_output = 0;\n   int opt;\n \n+  gcc_init_libintl ();\n+\n   if (argc <= 1)\n     {\n-      fprintf (stderr, \"gcjh: no classes specified\\n\");\n+      error (\"no classes specified\");\n       usage ();\n     }\n \n@@ -2408,7 +2416,7 @@ main (int argc, char** argv)\n \t  break;\n \n \tcase OPT_MG:\n-\t  fprintf (stderr, \"gcjh: `-MG' option is unimplemented\\n\");\n+\t  error (\"`-MG' option is unimplemented\");\n \t  exit (1);\n \n \tcase OPT_MD:\n@@ -2429,15 +2437,15 @@ main (int argc, char** argv)\n \n   if (optind == argc)\n     {\n-      fprintf (stderr, \"gcjh: no classes specified\\n\");\n+      error (\"no classes specified\");\n       usage ();\n     }\n \n   jcf_path_seal (verbose);\n \n   if (output_file && emit_dependencies)\n     {\n-      fprintf (stderr, \"gcjh: can't specify both -o and -MD\\n\");\n+      error (\"can't specify both -o and -MD\");\n       exit (1);\n     }\n \n@@ -2448,17 +2456,17 @@ main (int argc, char** argv)\n       const char *classfile_name;\n \n       if (verbose)\n-\tfprintf (stderr, \"Processing %s\\n\", classname);\n+\tprintf (_(\"Processing %s\\n\"), classname);\n       if (! output_file)\n \tjcf_dependency_reset ();\n       classfile_name = find_class (classname, strlen (classname), &jcf, 0);\n       if (classfile_name == NULL)\n \t{\n-\t  fprintf (stderr, \"%s: no such class\\n\", classname);\n+\t  error (\"%s: no such class\", classname);\n \t  exit (1);\n \t}\n       if (verbose)\n-\tfprintf (stderr, \"Found in %s\\n\", classfile_name);\n+\tprintf (_(\"Found in %s\\n\"), classfile_name);\n       if (output_file)\n \t{\n \t  if (strcmp (output_file, \"-\") == 0)"}, {"sha": "0776629a81e57eaf2d182e620eafbe68102c66de", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=0237b2dc30312a14a02cd6cc42daeec82b49b913", "patch": "@@ -1,7 +1,7 @@\n /* Program to dump out a Java(TM) .class file.\n    Functionally similar to Sun's javap.\n \n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -54,6 +54,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"ggc.h\"\n+#include \"intl.h\"\n \n #include \"jcf.h\"\n #include \"tree.h\"\n@@ -795,19 +796,19 @@ process_class (JCF *jcf)\n {\n   int code;\n   if (jcf_parse_preamble (jcf) != 0)\n-    fprintf (stderr, \"Not a valid Java .class file.\\n\");    \n+    fprintf (stderr, _(\"Not a valid Java .class file.\\n\"));    \n \n   /* Parse and possibly print constant pool */\n   code = jcf_parse_constant_pool (jcf);\n   if (code != 0)\n     {\n-      fprintf (stderr, \"error while parsing constant pool\\n\");\n+      fprintf (stderr, _(\"error while parsing constant pool\\n\"));\n       exit (FATAL_EXIT_CODE);\n     }\n   code = verify_constant_pool (jcf);\n   if (code > 0)\n     {\n-      fprintf (stderr, \"error in constant pool entry #%d\\n\", code);\n+      fprintf (stderr, _(\"error in constant pool entry #%d\\n\"), code);\n       exit (FATAL_EXIT_CODE);\n     }\n   if (flag_print_constant_pool)\n@@ -817,19 +818,19 @@ process_class (JCF *jcf)\n   code = jcf_parse_fields (jcf);\n   if (code != 0)\n     {\n-      fprintf (stderr, \"error while parsing fields\\n\");\n+      fprintf (stderr, _(\"error while parsing fields\\n\"));\n       exit (FATAL_EXIT_CODE);\n     }\n   code = jcf_parse_methods (jcf);\n   if (code != 0)\n     {\n-      fprintf (stderr, \"error while parsing methods\\n\");\n+      fprintf (stderr, _(\"error while parsing methods\\n\"));\n       exit (FATAL_EXIT_CODE);\n     }\n   code = jcf_parse_final_attributes (jcf);\n   if (code != 0)\n     {\n-      fprintf (stderr, \"error while parsing final attributes\\n\");\n+      fprintf (stderr, _(\"error while parsing final attributes\\n\"));\n       exit (FATAL_EXIT_CODE);\n     }\n   jcf->filename = NULL;\n@@ -865,40 +866,40 @@ static const struct option options[] =\n static void\n usage (void)\n {\n-  fprintf (stderr, \"Try `jcf-dump --help' for more information.\\n\");\n+  fprintf (stderr, _(\"Try `jcf-dump --help' for more information.\\n\"));\n   exit (1);\n }\n \n static void\n help (void)\n {\n-  printf (\"Usage: jcf-dump [OPTION]... CLASS...\\n\\n\");\n-  printf (\"Display contents of a class file in readable form.\\n\\n\");\n-  printf (\"  -c                      Disassemble method bodies\\n\");\n-  printf (\"  --javap                 Generate output in `javap' format\\n\");\n+  printf (_(\"Usage: jcf-dump [OPTION]... CLASS...\\n\\n\"));\n+  printf (_(\"Display contents of a class file in readable form.\\n\\n\"));\n+  printf (_(\"  -c                      Disassemble method bodies\\n\"));\n+  printf (_(\"  --javap                 Generate output in `javap' format\\n\"));\n   printf (\"\\n\");\n-  printf (\"  --classpath PATH        Set path to find .class files\\n\");\n-  printf (\"  -IDIR                   Append directory to class path\\n\");\n-  printf (\"  --bootclasspath PATH    Override built-in class path\\n\");\n-  printf (\"  --extdirs PATH          Set extensions directory path\\n\");\n-  printf (\"  -o FILE                 Set output file name\\n\");\n+  printf (_(\"  --classpath PATH        Set path to find .class files\\n\"));\n+  printf (_(\"  -IDIR                   Append directory to class path\\n\"));\n+  printf (_(\"  --bootclasspath PATH    Override built-in class path\\n\"));\n+  printf (_(\"  --extdirs PATH          Set extensions directory path\\n\"));\n+  printf (_(\"  -o FILE                 Set output file name\\n\"));\n   printf (\"\\n\");\n-  printf (\"  --help                  Print this help, then exit\\n\");\n-  printf (\"  --version               Print version number, then exit\\n\");\n-  printf (\"  -v, --verbose           Print extra information while running\\n\");\n+  printf (_(\"  --help                  Print this help, then exit\\n\"));\n+  printf (_(\"  --version               Print version number, then exit\\n\"));\n+  printf (_(\"  -v, --verbose           Print extra information while running\\n\"));\n   printf (\"\\n\");\n-  printf (\"For bug reporting instructions, please see:\\n\");\n-  printf (\"%s.\\n\", bug_report_url);\n+  printf (_(\"For bug reporting instructions, please see:\\n\"\n+\t    \"%s.\\n\"), bug_report_url);\n   exit (0);\n }\n \n static void\n version (void)\n {\n   printf (\"jcf-dump (GCC) %s\\n\\n\", version_string);\n-  printf (\"Copyright (C) 2002 Free Software Foundation, Inc.\\n\");\n-  printf (\"This is free software; see the source for copying conditions.  There is NO\\n\");\n-  printf (\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\");\n+  printf (\"Copyright %s 2004 Free Software Foundation, Inc.\\n\", _(\"(C)\"));\n+  printf (_(\"This is free software; see the source for copying conditions.  There is NO\\n\"\n+\t    \"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"));\n   exit (0);\n }\n \n@@ -908,9 +909,11 @@ main (int argc, char** argv)\n   JCF jcf[1];\n   int argi, opt;\n \n+  gcc_init_libintl ();\n+\n   if (argc <= 1)\n     {\n-      fprintf (stderr, \"jcf-dump: no classes specified\\n\");\n+      fprintf (stderr, _(\"jcf-dump: no classes specified\\n\"));\n       usage ();\n     }\n \n@@ -975,7 +978,7 @@ main (int argc, char** argv)\n \n   if (optind == argc)\n     {\n-      fprintf (stderr, \"jcf-dump: no classes specified\\n\");\n+      fprintf (stderr, _(\"jcf-dump: no classes specified\\n\"));\n       usage ();\n     }\n \n@@ -995,7 +998,7 @@ main (int argc, char** argv)\n       out = fopen (output_file, \"w\");\n       if (! out)\n \t{\n-\t  fprintf (stderr, \"Cannot open '%s' for output.\\n\", output_file);\n+\t  fprintf (stderr, _(\"Cannot open '%s' for output.\\n\"), output_file);\n \t  return FATAL_EXIT_CODE;\n \t}\n     }\n@@ -1041,7 +1044,7 @@ main (int argc, char** argv)\n \t\t    break;  /* got to central directory */\n \t\t  if (magic != 0x04034b50) /* ZIPMAGIC (little-endian) */\n \t\t    {\n-\t\t      fprintf (stderr, \"bad format of .zip/.jar archive\\n\");\n+\t\t      fprintf (stderr, _(\"bad format of .zip/.jar archive\\n\"));\n \t\t      return FATAL_EXIT_CODE;\n \t\t    }\n \t\t  JCF_FILL (jcf, 26);\n@@ -1159,7 +1162,7 @@ disassemble_method (JCF* jcf, const unsigned char *byte_ops, int len)\n #define VAR_INDEX_2 (saw_index = 1, IMMEDIATE_u2)\n \n #define CHECK_PC_IN_RANGE(PC) (PC < 0 || PC > len ? \\\n-  (fprintf(stderr, \"Bad byte codes.\\n\"), exit(-1)) : 1)\n+  (fprintf(stderr, _(\"Bad byte codes.\\n\")), exit(-1)) : 1)\n \n /* Print out operand (if not implied by the opcode) for PUSCH opcodes.\n    These all push a constant onto the opcode stack. */"}, {"sha": "1e9490b0aa0f33ef6c49d0ce04f9b807834b3734", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=0237b2dc30312a14a02cd6cc42daeec82b49b913", "patch": "@@ -1,5 +1,5 @@\n /* Main for jv-scan\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n \n@@ -24,6 +24,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"intl.h\"\n \n #include \"obstack.h\"\t\t/* We use obstacks in lex.c */\n \n@@ -39,9 +40,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include <getopt.h>\n \n-extern void fatal_error (const char *s, ...)\n+extern void fatal_error (const char *msgid, ...)\n      ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void warning (const char *s, ...) ATTRIBUTE_PRINTF_1;\n+void warning (const char *msgid, ...) ATTRIBUTE_PRINTF_1;\n void report (void);\n \n static void usage (void) ATTRIBUTE_NORETURN;\n@@ -93,38 +94,38 @@ static const struct option options[] =\n static void\n usage (void)\n {\n-  fprintf (stderr, \"Try `jv-scan --help' for more information.\\n\");\n+  fprintf (stderr, _(\"Try `jv-scan --help' for more information.\\n\"));\n   exit (1);\n }\n \n static void\n help (void)\n {\n-  printf (\"Usage: jv-scan [OPTION]... FILE...\\n\\n\");\n-  printf (\"Print useful information read from Java source files.\\n\\n\");\n-  printf (\"  --no-assert             Don't recognize the assert keyword\\n\");\n-  printf (\"  --complexity            Print cyclomatic complexity of input file\\n\");\n-  printf (\"  --encoding NAME         Specify encoding of input file\\n\");\n-  printf (\"  --print-main            Print name of class containing `main'\\n\");\n-  printf (\"  --list-class            List all classes defined in file\\n\");\n-  printf (\"  --list-filename         Print input filename when listing class names\\n\");\n-  printf (\"  -o FILE                 Set output file name\\n\");\n+  printf (_(\"Usage: jv-scan [OPTION]... FILE...\\n\\n\"));\n+  printf (_(\"Print useful information read from Java source files.\\n\\n\"));\n+  printf (_(\"  --no-assert             Don't recognize the assert keyword\\n\"));\n+  printf (_(\"  --complexity            Print cyclomatic complexity of input file\\n\"));\n+  printf (_(\"  --encoding NAME         Specify encoding of input file\\n\"));\n+  printf (_(\"  --print-main            Print name of class containing `main'\\n\"));\n+  printf (_(\"  --list-class            List all classes defined in file\\n\"));\n+  printf (_(\"  --list-filename         Print input filename when listing class names\\n\"));\n+  printf (_(\"  -o FILE                 Set output file name\\n\"));\n   printf (\"\\n\");\n-  printf (\"  --help                  Print this help, then exit\\n\");\n-  printf (\"  --version               Print version number, then exit\\n\");\n+  printf (_(\"  --help                  Print this help, then exit\\n\"));\n+  printf (_(\"  --version               Print version number, then exit\\n\"));\n   printf (\"\\n\");\n-  printf (\"For bug reporting instructions, please see:\\n\");\n-  printf (\"%s.\\n\", bug_report_url);\n+  printf (_(\"For bug reporting instructions, please see:\\n\"\n+\t    \"%s.\\n\"), bug_report_url);\n   exit (0);\n }\n \n static void\n version (void)\n {\n   printf (\"jv-scan (GCC) %s\\n\\n\", version_string);\n-  printf (\"Copyright (C) 2002 Free Software Foundation, Inc.\\n\");\n-  printf (\"This is free software; see the source for copying conditions.  There is NO\\n\");\n-  printf (\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\");\n+  printf (\"Copyright %s 2004 Free Software Foundation, Inc.\\n\", _(\"(C)\"));\n+  printf (_(\"This is free software; see the source for copying conditions.  There is NO\\n\"\n+\t    \"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"));\n   exit (0);\n }\n \n@@ -143,6 +144,8 @@ main (int argc, char **argv)\n   /* Default for output */\n   out = stdout;\n \n+  gcc_init_libintl ();\n+\n   /* Process options first.  We use getopt_long and not\n      getopt_long_only because we only support `--' long options here.  */\n   while ((opt = getopt_long (argc, argv, \"o:\", options, NULL)) != -1)\n@@ -237,24 +240,24 @@ main (int argc, char **argv)\n    functions */\n \n void\n-fatal_error (const char *s, ...)\n+fatal_error (const char *msgid, ...)\n {\n   va_list ap;\n-  va_start (ap, s);\n-  fprintf (stderr, \"%s: error: \", exec_name);\n-  vfprintf (stderr, s, ap);\n+  va_start (ap, msgid);\n+  fprintf (stderr, _(\"%s: error: \"), exec_name);\n+  vfprintf (stderr, _(msgid), ap);\n   fputc ('\\n', stderr);\n   va_end (ap);\n   exit (1);\n }\n \n void\n-warning (const char *s, ...)\n+warning (const char *msgid, ...)\n {\n   va_list ap;\n-  va_start (ap, s);\n-  fprintf (stderr, \"%s: warning: \", exec_name);\n-  vfprintf (stderr, s, ap);\n+  va_start (ap, msgid);\n+  fprintf (stderr, _(\"%s: warning: \"), exec_name);\n+  vfprintf (stderr, _(msgid), ap);\n   fputc ('\\n', stderr);\n   va_end (ap);\n }"}, {"sha": "1e228a16191d17b0b0eb51136de2b892d5b64c0d", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0237b2dc30312a14a02cd6cc42daeec82b49b913/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=0237b2dc30312a14a02cd6cc42daeec82b49b913", "patch": "@@ -1,5 +1,5 @@\n /* Program to generate \"main\" a Java(TM) class containing a main method.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -33,6 +33,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"jcf.h\"\n #include \"tree.h\"\n #include \"java-tree.h\"\n+#include \"intl.h\"\n \n static char * do_mangle_classname (const char *string);\n \n@@ -44,7 +45,8 @@ static void usage (const char *) ATTRIBUTE_NORETURN;\n static void\n usage (const char *name)\n {\n-  fprintf (stderr, \"Usage: %s [OPTIONS]... CLASSNAMEmain [OUTFILE]\\n\", name);\n+  fprintf (stderr, _(\"Usage: %s [OPTIONS]... CLASSNAMEmain [OUTFILE]\\n\"),\n+\t   name);\n   exit (1);\n }\n \n@@ -56,6 +58,8 @@ main (int argc, char **argv)\n   const char *mangled_classname;\n   int i, last_arg;\n \n+  gcc_init_libintl ();\n+\n   if (argc < 2)\n     usage (argv[0]);\n \n@@ -91,7 +95,7 @@ main (int argc, char **argv)\n       stream = fopen (outfile, \"w\");\n       if (stream == NULL)\n \t{\n-\t  fprintf (stderr, \"%s: Cannot open output file: %s\\n\",\n+\t  fprintf (stderr, _(\"%s: Cannot open output file: %s\\n\"),\n \t\t   argv[0], outfile);\n \t  exit (1);\n \t}\n@@ -128,7 +132,7 @@ main (int argc, char **argv)\n   fprintf (stream, \"}\\n\");\n   if (stream != stdout && fclose (stream) != 0)\n     {\n-      fprintf (stderr, \"%s: Failed to close output file %s\\n\",\n+      fprintf (stderr, _(\"%s: Failed to close output file %s\\n\"),\n \t       argv[0], argv[2]);\n       exit (1);\n     }"}]}