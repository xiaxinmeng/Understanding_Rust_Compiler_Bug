{"sha": "f82bf003cebb8a296312d32882db03e52945dac3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgyYmYwMDNjZWJiOGEyOTYzMTJkMzI4ODJkYjAzZTUyOTQ1ZGFjMw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-19T17:08:42Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-19T18:38:29Z"}, "message": "Add comment to can_eq", "tree": {"sha": "cd1cc3c779ea8c5e3ea9ff8b113306768e60ea3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd1cc3c779ea8c5e3ea9ff8b113306768e60ea3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f82bf003cebb8a296312d32882db03e52945dac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82bf003cebb8a296312d32882db03e52945dac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82bf003cebb8a296312d32882db03e52945dac3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82bf003cebb8a296312d32882db03e52945dac3/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a966c3b7f22c2d31306de6f93f1cc5aebe81b8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a966c3b7f22c2d31306de6f93f1cc5aebe81b8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a966c3b7f22c2d31306de6f93f1cc5aebe81b8b"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "680e43f36657ff10ac88c481e3e73fae34d4a24c", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f82bf003cebb8a296312d32882db03e52945dac3/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f82bf003cebb8a296312d32882db03e52945dac3/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=f82bf003cebb8a296312d32882db03e52945dac3", "patch": "@@ -156,7 +156,15 @@ class BaseType\n   virtual BaseType *unify (BaseType *other) = 0;\n \n   // similar to unify but does not actually perform type unification but\n-  // determines whether they are compatible\n+  // determines whether they are compatible. Consider the following\n+  //\n+  // fn foo<T>() -> T { ... }\n+  // fn foo() -> i32 { ... }\n+  //\n+  // when the function has been substituted they can be considered equal.\n+  //\n+  // It can also be used to optional emit errors for trait item compatibility\n+  // checks\n   virtual bool can_eq (const BaseType *other, bool emit_errors) const = 0;\n \n   // Check value equality between two ty. Type inference rules are ignored. Two"}]}