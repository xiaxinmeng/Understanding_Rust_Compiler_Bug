{"sha": "6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM3ZDg2ZWM1ZTg5MWNkZDhjZTFjOGNmZDFkMjhmZTQ4NGUyMWU2Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-12-22T15:06:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-22T15:06:55Z"}, "message": "expr.c (expand_expr, [...]): Handling taking address of SAVE_EXPR.\n\n\t* expr.c (expand_expr, case ADDR_EXPR): Handling taking address of\n\tSAVE_EXPR.\n\t* function.c (gen_mem_addressof): Add missing tests for SAVE_EXPR.\n\t(put_addressof_into_stack): Clarify code in setting of used_p.\n\nFrom-SVN: r48268", "tree": {"sha": "aeee74a86e08dd9c07d45510c1f95eee0a186bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeee74a86e08dd9c07d45510c1f95eee0a186bf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b/comments", "author": null, "committer": null, "parents": [{"sha": "b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "9f1b924f2aeb7159c935ca7dd32b5a571ab8333d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b", "patch": "@@ -1,5 +1,10 @@\n Sat Dec 22 08:59:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* expr.c (expand_expr, case ADDR_EXPR): Handling taking address of\n+\tSAVE_EXPR.\n+\t* function.c (gen_mem_addressof): Add missing tests for SAVE_EXPR.\n+\t(put_addressof_into_stack): Clarify code in setting of used_p.\n+\n \t* calls.c (flags_from_decl_or_type): Move ECF_SP_DEPRESSED here.\n \t(expand_call): Delete from here.\n \tDo pending stack adjustments if ECF_SP_DEPRESSED."}, {"sha": "92a01dc26c3d5723922cf555e483da4ebcd3ed61", "filename": "gcc/expr.c", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b", "patch": "@@ -8481,21 +8481,33 @@ expand_expr (exp, target, tmode, modifier)\n \t\t   || GET_CODE (op0) == CONCAT || GET_CODE (op0) == ADDRESSOF\n \t\t   || GET_CODE (op0) == PARALLEL)\n \t    {\n-\t      /* If this object is in a register, it must can't be BLKmode.  */\n-\t      tree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n-\t      tree nt = build_qualified_type (inner_type,\n-\t\t\t\t\t      (TYPE_QUALS (inner_type)\n-\t\t\t\t\t       | TYPE_QUAL_CONST));\n-\t      rtx memloc = assign_temp (nt, 1, 1, 1);\n-\n-\t      if (GET_CODE (op0) == PARALLEL)\n-\t\t/* Handle calls that pass values in multiple non-contiguous\n-\t\t   locations.  The Irix 6 ABI has examples of this.  */\n-\t\temit_group_store (memloc, op0, int_size_in_bytes (inner_type));\n+\t      /* If the operand is a SAVE_EXPR, we can deal with this by\n+\t\t forcing the SAVE_EXPR into memory.  */\n+\t      if (TREE_CODE (TREE_OPERAND (exp, 0)) == SAVE_EXPR)\n+\t\t{\n+\t\t  put_var_into_stack (TREE_OPERAND (exp, 0));\n+\t\t  op0 = SAVE_EXPR_RTL (TREE_OPERAND (exp, 0));\n+\t\t}\n \t      else\n-\t\temit_move_insn (memloc, op0);\n-\n-\t      op0 = memloc;\n+\t\t{\n+\t\t  /* If this object is in a register, it can't be BLKmode.  */\n+\t\t  tree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n+\t\t  tree nt = build_qualified_type (inner_type,\n+\t\t\t\t\t\t  (TYPE_QUALS (inner_type)\n+\t\t\t\t\t\t   | TYPE_QUAL_CONST));\n+\t\t  rtx memloc = assign_temp (nt, 1, 1, 1);\n+\n+\t\t  if (GET_CODE (op0) == PARALLEL)\n+\t\t    /* Handle calls that pass values in multiple\n+\t\t       non-contiguous locations.  The Irix 6 ABI has examples\n+\t\t       of this.  */\n+\t\t    emit_group_store (memloc, op0, \n+\t\t\t\t      int_size_in_bytes (inner_type));\n+\t\t  else\n+\t\t    emit_move_insn (memloc, op0);\n+\t\t  \n+\t\t  op0 = memloc;\n+\t\t}\n \t    }\n \n \t  if (GET_CODE (op0) != MEM)"}, {"sha": "b84fc1e544f848b794955f005344d20624643262", "filename": "gcc/function.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6c7d86ec5e891cdd8ce1c8cfd1d28fe484e21e6b", "patch": "@@ -2813,10 +2813,10 @@ static int cfa_offset;\n #define ARG_POINTER_CFA_OFFSET(FNDECL) FIRST_PARM_OFFSET (FNDECL)\n #endif\n \n-/* Build up a (MEM (ADDRESSOF (REG))) rtx for a register REG that just had\n-   its address taken.  DECL is the decl for the object stored in the\n-   register, for later use if we do need to force REG into the stack.\n-   REG is overwritten by the MEM like in put_reg_into_stack.  */\n+/* Build up a (MEM (ADDRESSOF (REG))) rtx for a register REG that just had its\n+   address taken.  DECL is the decl or SAVE_EXPR for the object stored in the\n+   register, for later use if we do need to force REG into the stack.  REG is\n+   overwritten by the MEM like in put_reg_into_stack.  */\n \n rtx\n gen_mem_addressof (reg, decl)\n@@ -2842,24 +2842,24 @@ gen_mem_addressof (reg, decl)\n     {\n       tree type = TREE_TYPE (decl);\n       enum machine_mode decl_mode\n-\t= (TREE_CODE (decl) == SAVE_EXPR ? TYPE_MODE (TREE_TYPE (decl))\n-\t   : DECL_MODE (decl));\n-      rtx decl_rtl = decl ? DECL_RTL_IF_SET (decl) : 0;\n+\t= (DECL_P (decl) ? DECL_MODE (decl) : TYPE_MODE (TREE_TYPE (decl)));\n+      rtx decl_rtl = (TREE_CODE (decl) == SAVE_EXPR ? SAVE_EXPR_RTL (decl)\n+\t\t      : DECL_RTL_IF_SET (decl));\n \n       PUT_MODE (reg, decl_mode);\n \n       /* Clear DECL_RTL momentarily so functions below will work\n \t properly, then set it again.  */\n-      if (decl_rtl == reg)\n+      if (DECL_P (decl) && decl_rtl == reg)\n \tSET_DECL_RTL (decl, 0);\n \n       set_mem_attributes (reg, decl, 1);\n       set_mem_alias_set (reg, set);\n \n-      if (decl_rtl == reg)\n+      if (DECL_P (decl) && decl_rtl == reg)\n \tSET_DECL_RTL (decl, reg);\n \n-      if (TREE_USED (decl) || DECL_INITIAL (decl) != 0)\n+      if (TREE_USED (decl) || (DECL_P (decl) && DECL_INITIAL (decl) != 0))\n \tfixup_var_refs (reg, GET_MODE (reg), TREE_UNSIGNED (type), 0);\n     }\n   else\n@@ -2904,8 +2904,7 @@ put_addressof_into_stack (r, ht)\n       volatile_p = (TREE_CODE (decl) != SAVE_EXPR\n \t\t    && TREE_THIS_VOLATILE (decl));\n       used_p = (TREE_USED (decl)\n-\t\t|| (TREE_CODE (decl) != SAVE_EXPR\n-\t\t    && DECL_INITIAL (decl) != 0));\n+\t\t|| (DECL_P (decl) && DECL_INITIAL (decl) != 0));\n     }\n   else\n     {"}]}