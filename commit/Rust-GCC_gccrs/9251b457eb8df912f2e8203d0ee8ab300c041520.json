{"sha": "9251b457eb8df912f2e8203d0ee8ab300c041520", "node_id": "C_kwDOANBUbNoAKDkyNTFiNDU3ZWI4ZGY5MTJmMmU4MjAzZDBlZThhYjMwMGMwNDE1MjA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-24T14:29:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-24T14:29:02Z"}, "message": "sccvn: Fix visit_reference_op_call value numbering of vdefs [PR104601]\n\nThe following testcase is miscompiled, because -fipa-pure-const discovers\nthat bar is const, but when sccvn during fre3 sees\n  # .MEM_140 = VDEF <.MEM_96>\n  *__pred$__d_43 = _50 (_49);\nwhere _50 value numbers to &bar, it value numbers .MEM_140 to\nvuse_ssa_val (gimple_vuse (stmt)).  For const/pure calls that return\na SSA_NAME (or don't have lhs) that is fine, those calls don't store\nanything, but if the lhs is present and not an SSA_NAME, value numbering\nthe vdef to anything but itself means that e.g. walk_non_aliased_vuses\nwon't consider the call, but the call acts as a store to its lhs.\nWhen it is ignored, sccvn will return whatever has been stored to the\nlhs earlier.\n\nI've bootstrapped/regtested an earlier version of this patch, which did the\nif (!lhs && gimple_call_lhs (stmt))\n  changed |= set_ssa_val_to (vdef, vdef);\npart before else if (vnresult->result_vdef), and that regressed\n+FAIL: gcc.dg/pr51879-16.c scan-tree-dump-times pre \"foo \\\\\\\\(\" 1\n+FAIL: gcc.dg/pr51879-16.c scan-tree-dump-times pre \"foo2 \\\\\\\\(\" 1\nso this updated patch uses result_vdef there as before and only otherwise\n(which I think must be the const/pure case) decides based on whether the\nlhs is non-SSA_NAME.\n\n2022-02-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/104601\n\t* tree-ssa-sccvn.cc (visit_reference_op_call): For calls with\n\tnon-SSA_NAME lhs value number vdef to itself instead of e.g. the\n\tvuse value number.\n\n\t* g++.dg/torture/pr104601.C: New test.", "tree": {"sha": "1602930786b7dee9958d5ee7f14c129a15826e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1602930786b7dee9958d5ee7f14c129a15826e96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9251b457eb8df912f2e8203d0ee8ab300c041520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9251b457eb8df912f2e8203d0ee8ab300c041520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9251b457eb8df912f2e8203d0ee8ab300c041520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9251b457eb8df912f2e8203d0ee8ab300c041520/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59b8ade88774b4dcf1691a8f650cdbb86cc30862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b8ade88774b4dcf1691a8f650cdbb86cc30862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b8ade88774b4dcf1691a8f650cdbb86cc30862"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "bb56479c74595e65cd78a490e2b664527b843c62", "filename": "gcc/testsuite/g++.dg/torture/pr104601.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9251b457eb8df912f2e8203d0ee8ab300c041520/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr104601.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9251b457eb8df912f2e8203d0ee8ab300c041520/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr104601.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr104601.C?ref=9251b457eb8df912f2e8203d0ee8ab300c041520", "patch": "@@ -0,0 +1,32 @@\n+// PR tree-optimization/104601\n+// { dg-do run }\n+// { dg-options \"-std=c++17\" }\n+\n+#include <algorithm>\n+#include <optional>\n+\n+inline std::optional<int>\n+foo (std::vector<int>::iterator b, std::vector<int>::iterator c,\n+     std::optional<int> h (int))\n+{\n+  std::optional<int> d;\n+  find_if (b, c, [&](auto e) { d = h(e); return d; });\n+  return d;\n+}\n+\n+std::optional<int>\n+bar (int)\n+{\n+  return 1;\n+}\n+\n+int\n+main ()\n+{\n+  std::vector<int> g(10);\n+  auto b = g.begin ();\n+  auto c = g.end ();\n+  auto e = foo (b, c, bar);\n+  if (!e)\n+    __builtin_abort ();\n+}"}, {"sha": "1701861faedc0f5708a07f77ff067e4141428154", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9251b457eb8df912f2e8203d0ee8ab300c041520/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9251b457eb8df912f2e8203d0ee8ab300c041520/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=9251b457eb8df912f2e8203d0ee8ab300c041520", "patch": "@@ -5218,12 +5218,20 @@ visit_reference_op_call (tree lhs, gcall *stmt)\n \n   if (vnresult)\n     {\n-      if (vnresult->result_vdef && vdef)\n-\tchanged |= set_ssa_val_to (vdef, vnresult->result_vdef);\n-      else if (vdef)\n-\t/* If the call was discovered to be pure or const reflect\n-\t   that as far as possible.  */\n-\tchanged |= set_ssa_val_to (vdef, vuse_ssa_val (gimple_vuse (stmt)));\n+      if (vdef)\n+\t{\n+\t  if (vnresult->result_vdef)\n+\t    changed |= set_ssa_val_to (vdef, vnresult->result_vdef);\n+\t  else if (!lhs && gimple_call_lhs (stmt))\n+\t    /* If stmt has non-SSA_NAME lhs, value number the vdef to itself,\n+\t       as the call still acts as a lhs store.  */\n+\t    changed |= set_ssa_val_to (vdef, vdef);\n+\t  else\n+\t    /* If the call was discovered to be pure or const reflect\n+\t       that as far as possible.  */\n+\t    changed |= set_ssa_val_to (vdef,\n+\t\t\t\t       vuse_ssa_val (gimple_vuse (stmt)));\n+\t}\n \n       if (!vnresult->result && lhs)\n \tvnresult->result = lhs;\n@@ -5248,7 +5256,11 @@ visit_reference_op_call (tree lhs, gcall *stmt)\n \t      if (TREE_CODE (fn) == ADDR_EXPR\n \t\t  && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL\n \t\t  && (flags_from_decl_or_type (TREE_OPERAND (fn, 0))\n-\t\t      & (ECF_CONST | ECF_PURE)))\n+\t\t      & (ECF_CONST | ECF_PURE))\n+\t\t  /* If stmt has non-SSA_NAME lhs, value number the\n+\t\t     vdef to itself, as the call still acts as a lhs\n+\t\t     store.  */\n+\t\t  && (lhs || gimple_call_lhs (stmt) == NULL_TREE))\n \t\tvdef_val = vuse_ssa_val (gimple_vuse (stmt));\n \t    }\n \t  changed |= set_ssa_val_to (vdef, vdef_val);"}]}