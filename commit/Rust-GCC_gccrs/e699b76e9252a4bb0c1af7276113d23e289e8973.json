{"sha": "e699b76e9252a4bb0c1af7276113d23e289e8973", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY5OWI3NmU5MjUyYTRiYjBjMWFmNzI3NjExM2QyM2UyODllODk3Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-23T10:39:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-23T10:39:50Z"}, "message": "[multiple changes]\n\n2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Expression_Function): Simplify analysis\n\tin generic context, and generate body in this case as well,\n\tto simplify ASIS traversals on the construct.\n\n2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Complete_Object_Operation): Indicate that the\n\tscope of the operation (s) is referenced, to prevent spurious\n\twarnings about unused units.\n\n2014-10-23  Johannes Kanig  <kanig@adacore.com>\n\n\t* errout.adb (Error_Msg_Internal): Copy check flag, increment\n\tcheck msg count.\n\t* erroutc.adb (Delete_Msg) adjust check msg count.\n\t(Output_Msg_Text) handle check msg case (do nothing).\n\t(Prescan_Message) recognize check messages with severity prefixes.\n\t* errutil.adb (Error_Msg) handle check flag, adjust counter.\n\n2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_eval.adb (Subtypes_Statically_Match): For a generic actual\n\ttype, check for the presence of discriminants in its parent type,\n\tagainst the presence of discriminants in the context type.\n\n2014-10-23  Tristan Gingold  <gingold@adacore.com>\n\n\t* adaint.c: __gnat_get_file_names_case_sensitive: Default is\n\ttrue on arm-darwin.\n\n2014-10-23  Arnaud Charlet  <charlet@adacore.com>\n\n\t* pprint.adb (Expression_Image): Add handling of quantifiers.\n\n2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_pakd.adb (Expand_Packed_Element_Reference): If the\n\tprefix is a source entity, generate a reference to it before\n\ttransformation, because rewritten node might not generate a\n\tproper reference, leading to spurious warnings.\n\n2014-10-23  Tristan Gingold  <gingold@adacore.com>\n\n\t* init.c: Fix thinko in previous patch.\n\n2014-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb (Decimal_Fixed_Point_Type_Declaration):\n\tInherit the rep chain of the implicit base type.\n\t(Floating_Point_Type_Declaration): Inherit the rep chain of the\n\timplicit base type.\n\t(Ordinary_Fixed_Point_Type_Declaration): Inherit the rep chain of the\n\timplicit base type.\n\t(Signed_Integer_Type_Declaration): Inherit the rep chain of the\n\timplicit base type.\n\t* sem_util.ads, sem_util.adb (Inherit_Rep_Item_Chain): New routine.\n\n2014-10-23  Pascal Obry  <obry@adacore.com>\n\n\t* g-regist.adb, g-regist.ads: Add support for reading 32bit or 64bit\n\tview of the registry.\n\n2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): If type is abstract,\n\treturn without expanding expression, to prevent subsequent crash.\n\t* freeze.adb: better error message for illegal declaration.\n\nFrom-SVN: r216587", "tree": {"sha": "6ba17dad441e2217039dece502d5a11a963ee1ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ba17dad441e2217039dece502d5a11a963ee1ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e699b76e9252a4bb0c1af7276113d23e289e8973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e699b76e9252a4bb0c1af7276113d23e289e8973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e699b76e9252a4bb0c1af7276113d23e289e8973", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e699b76e9252a4bb0c1af7276113d23e289e8973/comments", "author": null, "committer": null, "parents": [{"sha": "e776d44161b0e8e5d1248db4f0ccecff1b01914c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e776d44161b0e8e5d1248db4f0ccecff1b01914c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e776d44161b0e8e5d1248db4f0ccecff1b01914c"}], "stats": {"total": 359, "additions": 286, "deletions": 73}, "files": [{"sha": "353d0a5f1be0cc637f83d9e4148d5f655726fb40", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -1,3 +1,73 @@\n+2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Simplify analysis\n+\tin generic context, and generate body in this case as well,\n+\tto simplify ASIS traversals on the construct.\n+\n+2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Complete_Object_Operation): Indicate that the\n+\tscope of the operation (s) is referenced, to prevent spurious\n+\twarnings about unused units.\n+\n+2014-10-23  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* errout.adb (Error_Msg_Internal): Copy check flag, increment\n+\tcheck msg count.\n+\t* erroutc.adb (Delete_Msg) adjust check msg count.\n+\t(Output_Msg_Text) handle check msg case (do nothing).\n+\t(Prescan_Message) recognize check messages with severity prefixes.\n+\t* errutil.adb (Error_Msg) handle check flag, adjust counter.\n+\n+2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_eval.adb (Subtypes_Statically_Match): For a generic actual\n+\ttype, check for the presence of discriminants in its parent type,\n+\tagainst the presence of discriminants in the context type.\n+\n+2014-10-23  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* adaint.c: __gnat_get_file_names_case_sensitive: Default is\n+\ttrue on arm-darwin.\n+\n+2014-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* pprint.adb (Expression_Image): Add handling of quantifiers.\n+\n+2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_pakd.adb (Expand_Packed_Element_Reference): If the\n+\tprefix is a source entity, generate a reference to it before\n+\ttransformation, because rewritten node might not generate a\n+\tproper reference, leading to spurious warnings.\n+\n+2014-10-23  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* init.c: Fix thinko in previous patch.\n+\n+2014-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb (Decimal_Fixed_Point_Type_Declaration):\n+\tInherit the rep chain of the implicit base type.\n+\t(Floating_Point_Type_Declaration): Inherit the rep chain of the\n+\timplicit base type.\n+\t(Ordinary_Fixed_Point_Type_Declaration): Inherit the rep chain of the\n+\timplicit base type.\n+\t(Signed_Integer_Type_Declaration): Inherit the rep chain of the\n+\timplicit base type.\n+\t* sem_util.ads, sem_util.adb (Inherit_Rep_Item_Chain): New routine.\n+\n+2014-10-23  Pascal Obry  <obry@adacore.com>\n+\n+\t* g-regist.adb, g-regist.ads: Add support for reading 32bit or 64bit\n+\tview of the registry.\n+\n+2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): If type is abstract,\n+\treturn without expanding expression, to prevent subsequent crash.\n+\t* freeze.adb: better error message for illegal declaration.\n+\n 2014-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sysdep.c (__gnat_localtime_tzoff): Properly delimit the"}, {"sha": "0acaa74d3ab4971806b286cc3cce7629c9dfda7a", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -547,11 +547,15 @@ __gnat_get_file_names_case_sensitive (void)\n           && sensitive[1] == '\\0')\n         file_names_case_sensitive_cache = sensitive[0] - '0';\n       else\n-#if defined (WINNT) || defined (__APPLE__)\n-        file_names_case_sensitive_cache = 0;\n+\t{\n+\t  /* By default, we suppose filesystems aren't case sensitive on\n+\t     Windows and Darwin (but they are on arm-darwin).  */\n+#if defined (WINNT) || (defined (__APPLE__) && !defined (__arm__))\n+\t  file_names_case_sensitive_cache = 0;\n #else\n-        file_names_case_sensitive_cache = 1;\n+\t  file_names_case_sensitive_cache = 1;\n #endif\n+\t}\n     }\n   return file_names_case_sensitive_cache;\n }"}, {"sha": "3bc71f5974d6bf3e0d065d6edc14ca61fe67c491", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -320,6 +320,10 @@ package Atree is\n    --  Number of info messages generated. Info messages are neved treated as\n    --  errors (whether from use of the pragma, or the compiler switch -gnatwe).\n \n+   Check_Messages : Nat := 0;\n+   --  Number of check messages generated. Check messages are neither warnings\n+   --  nor errors.\n+\n    Warnings_Treated_As_Errors : Nat := 0;\n    --  Number of warnings changed into errors as a result of matching a pattern\n    --  given in a Warning_As_Error configuration pragma."}, {"sha": "911820c0363f446b2dddbe47696a7f5176a74d32", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -982,6 +982,7 @@ package body Errout is\n           Col      => Get_Column_Number (Sptr),\n           Warn     => Is_Warning_Msg,\n           Info     => Is_Info_Msg,\n+          Check    => Is_Check_Msg,\n           Warn_Err => False, -- reset below\n           Warn_Chr => Warning_Msg_Char,\n           Style    => Is_Style_Msg,\n@@ -1140,6 +1141,9 @@ package body Errout is\n             Info_Messages := Info_Messages + 1;\n          end if;\n \n+      elsif Errors.Table (Cur_Msg).Check then\n+         Check_Messages := Check_Messages + 1;\n+\n       else\n          Total_Errors_Detected := Total_Errors_Detected + 1;\n "}, {"sha": "6ca45497fdef75a9d7940217e317a0357d82b164", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -413,6 +413,13 @@ package Errout is\n    --      are continuations that are not printed using the -gnatj switch they\n    --      will also have this prefix.\n \n+   --    Insertion sequence \"low: \" or \"medium: \" or \"high: \" (check message)\n+   --      This appears only at the start of the message (and not any of its\n+   --      continuations, if any), and indicates that the message is a check\n+   --      message. The message will be output with this prefix. Check\n+   --      messages are not fatal (so are like info messages in that respect)\n+   --      and are not controlled by pragma Warnings.\n+\n    -----------------------------------------------------\n    -- Global Values Used for Error Message Insertions --\n    -----------------------------------------------------"}, {"sha": "32d9bbc786594b946dee5de58c06e2fbdf9476b8", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -145,6 +145,9 @@ package body Erroutc is\n                --  because this only gets incremented if we actually output the\n                --  message, which we won't do if we are deleting it here!\n \n+            elsif Errors.Table (D).Check then\n+               Check_Messages := Check_Messages - 1;\n+\n             else\n                Total_Errors_Detected := Total_Errors_Detected - 1;\n \n@@ -653,6 +656,11 @@ package body Erroutc is\n          elsif Errors.Table (E).Style then\n             null;\n \n+            --  No prefix needed for check message, severity is there already\n+\n+         elsif Errors.Table (E).Check then\n+            null;\n+\n             --  All other cases, add \"error: \" if unique error tag set\n \n          elsif Opt.Unique_Error_Tag then\n@@ -765,6 +773,15 @@ package body Erroutc is\n       Is_Info_Msg :=\n         Msg'Length > 6 and then Msg (Msg'First .. Msg'First + 5) = \"info: \";\n \n+      --  Check check message\n+\n+      Is_Check_Msg :=\n+        (Msg'Length > 8 and then Msg (Msg'First .. Msg'First + 7) = \"medium: \")\n+        or else\n+          (Msg'Length > 6 and then Msg (Msg'First .. Msg'First + 5) = \"high: \")\n+        or else\n+          (Msg'Length > 5 and then Msg (Msg'First .. Msg'First + 4) = \"low: \");\n+\n       --  Loop through message looking for relevant insertion sequences\n \n       J := Msg'First;\n@@ -833,7 +850,7 @@ package body Erroutc is\n          end if;\n       end loop;\n \n-      if Is_Warning_Msg or Is_Style_Msg then\n+      if Is_Warning_Msg or Is_Style_Msg or Is_Check_Msg then\n          Is_Serious_Error := False;\n       end if;\n    end Prescan_Message;"}, {"sha": "cb69f17f8b9daba0aa7f10cb665e3293cce9dccc", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -68,6 +68,10 @@ package Erroutc is\n    --  \"info: \" and is to be treated as an information message. This string\n    --  will be prepended to the message and all its continuations.\n \n+   Is_Check_Msg : Boolean := False;\n+   --  Set True to indicate that the current message starts with one of\n+   --  \"high: \", \"medium: \", \"low: \" and is to be treated as a check message.\n+\n    Warning_Msg_Char : Character;\n    --  Warning character, valid only if Is_Warning_Msg is True\n    --    ' '      -- ?   or <   appeared on its own in message\n@@ -208,6 +212,9 @@ package Erroutc is\n       Info : Boolean;\n       --  True if info message\n \n+      Check : Boolean;\n+      --  True if check message\n+\n       Warn_Err : Boolean;\n       --  True if this is a warning message which is to be treated as an error\n       --  as a result of a match with a Warning_As_Error pragma."}, {"sha": "9fd67e16a741f9128b6bbedf514f0dd387af538a", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -213,6 +213,7 @@ package body Errutil is\n             Col      => Get_Column_Number (Sptr),\n             Warn     => Is_Warning_Msg,\n             Info     => Is_Info_Msg,\n+            Check    => Is_Check_Msg,\n             Warn_Err => Warning_Mode = Treat_As_Error,\n             Warn_Chr => Warning_Msg_Char,\n             Style    => Is_Style_Msg,\n@@ -313,6 +314,9 @@ package body Errutil is\n             Info_Messages := Info_Messages + 1;\n          end if;\n \n+      elsif Errors.Table (Cur_Msg).Check then\n+         Check_Messages := Check_Messages + 1;\n+\n       else\n          Total_Errors_Detected := Total_Errors_Detected + 1;\n "}, {"sha": "1480c0fa5258eba9139d996921aa7870e03ce558", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -5346,6 +5346,14 @@ package body Exp_Ch3 is\n          return;\n       end if;\n \n+      --  The type of the object cannot be abstract. This is diagnosed at the\n+      --  point the object is frozen, which happens after the declaration is\n+      --  fully expanded, so simply return now.\n+\n+      if Is_Abstract_Type (Typ) then\n+         return;\n+      end if;\n+\n       --  First we do special processing for objects of a tagged type where\n       --  this is the point at which the type is frozen. The creation of the\n       --  dispatch table and the initialization procedure have to be deferred"}, {"sha": "e6bcb9998690d6dca56085909180e343a1710253", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -30,6 +30,7 @@ with Errout;   use Errout;\n with Exp_Dbug; use Exp_Dbug;\n with Exp_Util; use Exp_Util;\n with Layout;   use Layout;\n+with Lib.Xref; use Lib.Xref;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -1682,6 +1683,16 @@ package body Exp_Pakd is\n          Expand_Packed_Element_Reference (Prefix (N));\n       end if;\n \n+      --  The prefix may be rewritten below as a conversion. If it is a source\n+      --  entity generate reference to it now, to prevent spurious warnings\n+      --  about unused entities.\n+\n+      if Is_Entity_Name (Prefix (N))\n+        and then Comes_From_Source (Prefix (N))\n+      then\n+         Generate_Reference (Entity (Prefix (N)), Prefix (N), 'r');\n+      end if;\n+\n       --  If not bit packed, we have the enumeration case, which is easily\n       --  dealt with (just adjust the subscripts of the indexed component)\n "}, {"sha": "44921d0243c7c4a103b97f6f19a0a880de12e23a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -4498,6 +4498,11 @@ package body Freeze is\n                      Error_Msg_NE\n                        (\"\\} may need a cpp_constructor\",\n                        Object_Definition (Parent (E)), Etype (E));\n+\n+                  elsif Present (Expression (Parent (E))) then\n+                     Error_Msg_N --  CODEFIX\n+                       (\"\\maybe a class-wide type was meant\",\n+                         Object_Definition (Parent (E)));\n                   end if;\n                end if;\n "}, {"sha": "4d989630151157f647d66a052e794bf011bf7bad", "filename": "gcc/ada/g-regist.adb", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fg-regist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fg-regist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-regist.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2001-2009, Free Software Foundation, Inc.        --\n+--           Copyright (C) 2001-2014, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -529,16 +529,24 @@ package body GNAT.Registry is\n    function To_C_Mode (Mode : Key_Mode) return REGSAM is\n       use type REGSAM;\n \n-      KEY_READ  : constant :=  16#20019#;\n-      KEY_WRITE : constant :=  16#20006#;\n+      KEY_READ        : constant := 16#20019#;\n+      KEY_WRITE       : constant := 16#20006#;\n+      KEY_WOW64_64KEY : constant := 16#00100#;\n+      KEY_WOW64_32KEY : constant := 16#00200#;\n \n    begin\n       case Mode is\n          when Read_Only =>\n-            return KEY_READ;\n+            return KEY_READ + KEY_WOW64_32KEY;\n \n          when Read_Write =>\n-            return KEY_READ + KEY_WRITE;\n+            return KEY_READ + KEY_WRITE + KEY_WOW64_32KEY;\n+\n+         when Read_Only_64 =>\n+            return KEY_READ + KEY_WOW64_64KEY;\n+\n+         when Read_Write_64 =>\n+            return KEY_READ + KEY_WRITE + KEY_WOW64_64KEY;\n       end case;\n    end To_C_Mode;\n "}, {"sha": "0222a1079ef2c6f1e4a828752460b043b453d6d5", "filename": "gcc/ada/g-regist.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fg-regist.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fg-regist.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-regist.ads?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -54,8 +54,12 @@ package GNAT.Registry is\n    HKEY_USERS            : constant HKEY;\n    HKEY_PERFORMANCE_DATA : constant HKEY;\n \n-   type Key_Mode is (Read_Only, Read_Write);\n-   --  Access mode for the registry key\n+   type Key_Mode is\n+      (Read_Only, Read_Write,        -- operates on 32bit view of the registry\n+       Read_Only_64, Read_Write_64); -- operates on 64bit view of the registry\n+   --  Access mode for the registry key. The *_64 are only meaningful on\n+   --  Windows 64bit and ignored on Windows 32bit where _64 are equivalent to\n+   --  the non 64bit versions.\n \n    Registry_Error : exception;\n    --  Registry_Error is raises by all routines below if a problem occurs"}, {"sha": "8a33966d62ba9efac5d919ce929712b8be5a255e", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -2238,7 +2238,7 @@ __gnat_is_stack_guard (mach_vm_address_t addr)\n   return 0;\n #else\n   /* Pagezero for arm.  */\n-  return addr < 4096;\n+  return addr >= 4096;\n #endif\n }\n "}, {"sha": "f726b644bad93ae475b52b704df03c7c172b0bab", "filename": "gcc/ada/pprint.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fpprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fpprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpprint.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -623,6 +623,9 @@ package body Pprint is\n                   exit;\n                end if;\n \n+            when N_Quantified_Expression =>\n+               Right := Original_Node (Condition (Right));\n+\n             --  For all other items, quit the loop\n \n             when others =>"}, {"sha": "27c228647d8130979e5a9516becd0c08f5eebca6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 56, "deletions": 51, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -13914,17 +13914,19 @@ package body Sem_Ch3 is\n          Set_Fixed_Range (T, Loc, -Bound_Val, Bound_Val);\n       end if;\n \n-      --  Complete entity for first subtype\n-\n-      Set_Ekind          (T, E_Decimal_Fixed_Point_Subtype);\n-      Set_Etype          (T, Implicit_Base);\n-      Set_Size_Info      (T, Implicit_Base);\n-      Set_First_Rep_Item (T, First_Rep_Item (Implicit_Base));\n-      Set_Digits_Value   (T, Digs_Val);\n-      Set_Delta_Value    (T, Delta_Val);\n-      Set_Small_Value    (T, Delta_Val);\n-      Set_Scale_Value    (T, Scale_Val);\n-      Set_Is_Constrained (T);\n+      --  Complete entity for first subtype. The inheritance of the rep item\n+      --  chain ensures that SPARK-related pragmas are not clobbered when the\n+      --  decimal fixed point type acts as a full view of a private type.\n+\n+      Set_Ekind              (T, E_Decimal_Fixed_Point_Subtype);\n+      Set_Etype              (T, Implicit_Base);\n+      Set_Size_Info          (T, Implicit_Base);\n+      Inherit_Rep_Item_Chain (T, Implicit_Base);\n+      Set_Digits_Value       (T, Digs_Val);\n+      Set_Delta_Value        (T, Delta_Val);\n+      Set_Small_Value        (T, Delta_Val);\n+      Set_Scale_Value        (T, Scale_Val);\n+      Set_Is_Constrained     (T);\n    end Decimal_Fixed_Point_Type_Declaration;\n \n    -----------------------------------\n@@ -16725,24 +16727,25 @@ package body Sem_Ch3 is\n          Set_Scalar_Range (T, Scalar_Range (Base_Typ));\n       end if;\n \n-      --  Complete definition of implicit base and declared first subtype\n-\n-      Set_Etype          (Implicit_Base, Base_Typ);\n-\n-      Set_Scalar_Range   (Implicit_Base, Scalar_Range   (Base_Typ));\n-      Set_Size_Info      (Implicit_Base,                (Base_Typ));\n-      Set_RM_Size        (Implicit_Base, RM_Size        (Base_Typ));\n-      Set_First_Rep_Item (Implicit_Base, First_Rep_Item (Base_Typ));\n-      Set_Digits_Value   (Implicit_Base, Digits_Value   (Base_Typ));\n-      Set_Float_Rep      (Implicit_Base, Float_Rep      (Base_Typ));\n-\n-      Set_Ekind          (T, E_Floating_Point_Subtype);\n-      Set_Etype          (T, Implicit_Base);\n-\n-      Set_Size_Info      (T,                (Implicit_Base));\n-      Set_RM_Size        (T, RM_Size        (Implicit_Base));\n-      Set_First_Rep_Item (T, First_Rep_Item (Implicit_Base));\n-      Set_Digits_Value   (T, Digs_Val);\n+      --  Complete definition of implicit base and declared first subtype. The\n+      --  inheritance of the rep item chain ensures that SPARK-related pragmas\n+      --  are not clobbered when the floating point type acts as a full view of\n+      --  a private type.\n+\n+      Set_Etype              (Implicit_Base,                 Base_Typ);\n+      Set_Scalar_Range       (Implicit_Base, Scalar_Range   (Base_Typ));\n+      Set_Size_Info          (Implicit_Base,                 Base_Typ);\n+      Set_RM_Size            (Implicit_Base, RM_Size        (Base_Typ));\n+      Set_First_Rep_Item     (Implicit_Base, First_Rep_Item (Base_Typ));\n+      Set_Digits_Value       (Implicit_Base, Digits_Value   (Base_Typ));\n+      Set_Float_Rep          (Implicit_Base, Float_Rep      (Base_Typ));\n+\n+      Set_Ekind              (T, E_Floating_Point_Subtype);\n+      Set_Etype              (T,          Implicit_Base);\n+      Set_Size_Info          (T,          Implicit_Base);\n+      Set_RM_Size            (T, RM_Size (Implicit_Base));\n+      Inherit_Rep_Item_Chain (T,          Implicit_Base);\n+      Set_Digits_Value       (T, Digs_Val);\n    end Floating_Point_Type_Declaration;\n \n    ----------------------------\n@@ -18436,15 +18439,17 @@ package body Sem_Ch3 is\n       Set_Fixed_Range (Implicit_Base, Loc, Low_Val, High_Val);\n       Set_Fixed_Range (T, Loc, Low_Val, High_Val);\n \n-      --  Complete definition of first subtype\n-\n-      Set_Ekind          (T, E_Ordinary_Fixed_Point_Subtype);\n-      Set_Etype          (T, Implicit_Base);\n-      Init_Size_Align    (T);\n-      Set_First_Rep_Item (T, First_Rep_Item (Implicit_Base));\n-      Set_Small_Value    (T, Small_Val);\n-      Set_Delta_Value    (T, Delta_Val);\n-      Set_Is_Constrained (T);\n+      --  Complete definition of first subtype. The inheritance of the rep item\n+      --  chain ensures that SPARK-related pragmas are not clobbered when the\n+      --  ordinary fixed point type acts as a full view of a private type.\n+\n+      Set_Ekind              (T, E_Ordinary_Fixed_Point_Subtype);\n+      Set_Etype              (T, Implicit_Base);\n+      Init_Size_Align        (T);\n+      Inherit_Rep_Item_Chain (T, Implicit_Base);\n+      Set_Small_Value        (T, Small_Val);\n+      Set_Delta_Value        (T, Delta_Val);\n+      Set_Is_Constrained     (T);\n    end Ordinary_Fixed_Point_Type_Declaration;\n \n    ----------------------------------\n@@ -19090,7 +19095,6 @@ package body Sem_Ch3 is\n          --  ELSE.\n \n          else\n-\n             --  In formal mode, when completing a private extension the type\n             --  named in the private part must be exactly the same as that\n             --  named in the visible part.\n@@ -21215,23 +21219,24 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n-      --  Complete both implicit base and declared first subtype entities\n+      --  Complete both implicit base and declared first subtype entities. The\n+      --  inheritance of the rep item chain ensures that SPARK-related pragmas\n+      --  are not clobbered when the signed integer type acts as a full view of\n+      --  a private type.\n \n       Set_Etype          (Implicit_Base,                 Base_Typ);\n-      Set_Size_Info      (Implicit_Base,                (Base_Typ));\n+      Set_Size_Info      (Implicit_Base,                 Base_Typ);\n       Set_RM_Size        (Implicit_Base, RM_Size        (Base_Typ));\n       Set_First_Rep_Item (Implicit_Base, First_Rep_Item (Base_Typ));\n+      Set_Scalar_Range   (Implicit_Base, Scalar_Range   (Base_Typ));\n \n-      Set_Ekind          (T, E_Signed_Integer_Subtype);\n-      Set_Etype          (T, Implicit_Base);\n-\n-      Set_Scalar_Range (Implicit_Base, Scalar_Range (Base_Typ));\n-\n-      Set_Size_Info      (T,                (Implicit_Base));\n-      Set_First_Rep_Item (T, First_Rep_Item (Implicit_Base));\n-      Set_Scalar_Range   (T, Def);\n-      Set_RM_Size        (T, UI_From_Int (Minimum_Size (T)));\n-      Set_Is_Constrained (T);\n+      Set_Ekind              (T, E_Signed_Integer_Subtype);\n+      Set_Etype              (T, Implicit_Base);\n+      Set_Size_Info          (T, Implicit_Base);\n+      Inherit_Rep_Item_Chain (T, Implicit_Base);\n+      Set_Scalar_Range       (T, Def);\n+      Set_RM_Size            (T, UI_From_Int (Minimum_Size (T)));\n+      Set_Is_Constrained     (T);\n    end Signed_Integer_Type_Declaration;\n \n end Sem_Ch3;"}, {"sha": "7914fe1e11bcb2335a5bd5738f5dbe0366ecab9c", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -7617,6 +7617,17 @@ package body Sem_Ch4 is\n             Rewrite (First_Actual, Obj);\n          end if;\n \n+         --  The operation is obtained from the dispatch table and not by\n+         --  visibility, and may be declared in a unit that is not explicitly\n+         --  referenced in the source, but is nevertheless required in the\n+         --  context of the current unit. Indicate that operation and its scope\n+         --  are referenced, to prevent spurious and misleading warnings. If\n+         --  the operation is overloaded, all primitives are in the same scope\n+         --  and we can use any of them.\n+\n+         Set_Referenced (Entity (Subprog), True);\n+         Set_Referenced (Scope (Entity (Subprog)), True);\n+\n          Rewrite (Node_To_Replace, Call_Node);\n \n          --  Propagate the interpretations collected in subprog to the new"}, {"sha": "2466e87cbba12e0c7e29bd6e25e45762561fa593", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -454,24 +454,20 @@ package body Sem_Ch6 is\n \n          Analyze (N);\n \n-         --  Within a generic we only need to analyze the expression. The body\n-         --  only needs to be constructed when generating code.\n+         --  Within a generic pre-analyze the original expression for name\n+         --  capture. The body is also generated but plays no role in\n+         --  this because it is not part of the original source.\n \n          if Inside_A_Generic then\n             declare\n                Id : constant Entity_Id := Defining_Entity (N);\n-               Save_In_Spec_Expression : constant Boolean\n-                  := In_Spec_Expression;\n \n             begin\n                Set_Has_Completion (Id);\n-               In_Spec_Expression := True;\n                Push_Scope (Id);\n                Install_Formals (Id);\n-               Preanalyze_And_Resolve (Expr, Etype (Id));\n+               Preanalyze_Spec_Expression (Expr, Etype (Id));\n                End_Scope;\n-               In_Spec_Expression := Save_In_Spec_Expression;\n-               return;\n             end;\n          end if;\n "}, {"sha": "1922d5eca9c3eba249703ae0fcbd8a2b77278d05", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -5737,7 +5737,17 @@ package body Sem_Eval is\n          --  same base type.\n \n          if Has_Discriminants (T1) /= Has_Discriminants (T2) then\n-            if In_Instance then\n+            --  A generic actual type is declared through a subtype declaration\n+            --  and may have an inconsistent indication of the presence of\n+            --  discriminants, so check the type it renames.\n+\n+            if Is_Generic_Actual_Type (T1)\n+              and then not Has_Discriminants (Etype (T1))\n+              and then not Has_Discriminants (T2)\n+            then\n+               return True;\n+\n+            elsif In_Instance then\n                if Is_Private_Type (T2)\n                  and then Present (Full_View (T2))\n                  and then Has_Discriminants (Full_View (T2))"}, {"sha": "09f80949c4c5341daef37f2cf28f497c0f75f167", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -9290,6 +9290,37 @@ package body Sem_Util is\n       end if;\n    end Inherit_Default_Init_Cond_Procedure;\n \n+   ----------------------------\n+   -- Inherit_Rep_Item_Chain --\n+   ----------------------------\n+\n+   procedure Inherit_Rep_Item_Chain (Typ : Entity_Id; From_Typ : Entity_Id) is\n+      From_Item : constant Node_Id := First_Rep_Item (From_Typ);\n+      Item      : Node_Id;\n+\n+   begin\n+      --  Reach the end of the destination type's chain (if any). The traversal\n+      --  ensures that we do not go past the last item.\n+\n+      Item := First_Rep_Item (Typ);\n+      while Present (Item) and then Present (Next_Rep_Item (Item)) loop\n+         Item := Next_Rep_Item (Item);\n+      end loop;\n+\n+      --  When the destination type has a rep item chain, the chain of the\n+      --  source type is appended to it.\n+\n+      if Present (Item) then\n+         Set_Next_Rep_Item (Item, From_Item);\n+\n+      --  Otherwise the destination type directly inherits the rep item chain\n+      --  of the source type.\n+\n+      else\n+         Set_First_Rep_Item (Typ, From_Item);\n+      end if;\n+   end Inherit_Rep_Item_Chain;\n+\n    ---------------------------------\n    -- Insert_Explicit_Dereference --\n    ---------------------------------"}, {"sha": "4ddbe615762dfd34a6ad0555002488c4e8d4f9bb", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e699b76e9252a4bb0c1af7276113d23e289e8973/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=e699b76e9252a4bb0c1af7276113d23e289e8973", "patch": "@@ -1083,6 +1083,10 @@ package Sem_Util is\n    --  Inherit the default initial condition procedure from the parent type of\n    --  derived type Typ.\n \n+   procedure Inherit_Rep_Item_Chain (Typ : Entity_Id; From_Typ : Entity_Id);\n+   --  Inherit the rep item chain of type From_Typ without clobbering any\n+   --  existing rep items on Typ's chain. Typ is the destination type.\n+\n    procedure Insert_Explicit_Dereference (N : Node_Id);\n    --  In a context that requires a composite or subprogram type and where a\n    --  prefix is an access type, rewrite the access type node N (which is the"}]}