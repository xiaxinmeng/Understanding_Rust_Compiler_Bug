{"sha": "dd1bd863187095f63709320f6a30d97fe0ee40ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQxYmQ4NjMxODcwOTVmNjM3MDkzMjBmNmEzMGQ5N2ZlMGVlNDBhYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-01-05T06:55:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-01-05T06:55:02Z"}, "message": "cse.c (cse_insn): Missing cast added.\n\n\t* cse.c (cse_insn): Missing cast added.\n\t* loop.c (loop_reg_used_before_p): Ditto.\n\t* gcse.c (Pre_gcse, hoist_code): Ditto.\n\t* varasm.c (decode_rtx_const): Ditto.\n\t* except.c (push_ehqueue): Ditto.\n\t* cccp.c (index0): Ditto.\n\t* toplev.c (main): Useless `&' removed before function name.\n\nFrom-SVN: r31229", "tree": {"sha": "3b3c08aae28d90b998b0682832af59be16e48f95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b3c08aae28d90b998b0682832af59be16e48f95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd1bd863187095f63709320f6a30d97fe0ee40ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1bd863187095f63709320f6a30d97fe0ee40ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd1bd863187095f63709320f6a30d97fe0ee40ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1bd863187095f63709320f6a30d97fe0ee40ab/comments", "author": null, "committer": null, "parents": [{"sha": "e9b8009ef8d9615d74d1587b9bb06766a42b6aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b8009ef8d9615d74d1587b9bb06766a42b6aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b8009ef8d9615d74d1587b9bb06766a42b6aa3"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "e1320613a8fe9e6abcd0261d7800926d085304e9", "filename": "gcc/cccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=dd1bd863187095f63709320f6a30d97fe0ee40ab", "patch": "@@ -1,5 +1,5 @@\n /* C Compatible Compiler Preprocessor (CCCP)\n-   Copyright (C) 1986, 87, 89, 92-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1986, 87, 89, 92-99, 2000 Free Software Foundation, Inc.\n    Written by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n \n@@ -2274,7 +2274,7 @@ index0 (s, c, n)\n   for (;;) {\n     const char *q = index (p, c);\n     if (q)\n-      return q;\n+      return (const U_CHAR *) q;\n     else {\n       size_t l = strlen (p);\n       if (l == n)"}, {"sha": "ff007ff80b186dad07129405e1be3ea89d677ff4", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=dd1bd863187095f63709320f6a30d97fe0ee40ab", "patch": "@@ -1,5 +1,5 @@\n /* Common subexpression elimination for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 92-7, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -4437,7 +4437,7 @@ cse_insn (insn, libcall_insn)\n   int src_eqv_in_memory = 0;\n   unsigned src_eqv_hash = 0;\n \n-  struct set *sets = NULL_PTR;\n+  struct set *sets = (struct set *) NULL_PTR;\n \n   this_insn = insn;\n "}, {"sha": "b93f9bf3f5a8b2c8b99fb7cf36b1c012defc8755", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=dd1bd863187095f63709320f6a30d97fe0ee40ab", "patch": "@@ -1,5 +1,5 @@\n /* Implements exception handling.\n-   Copyright (C) 1989, 1992-1999 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1992-1999, 2000 Free Software Foundation, Inc.\n    Contributed by Mike Stump <mrs@cygnus.com>.\n \n This file is part of GNU CC.\n@@ -1793,7 +1793,7 @@ void\n push_ehqueue ()\n {\n   struct eh_queue *q;\n-  q = xcalloc (1, sizeof (struct eh_queue));\n+  q = (struct eh_queue *) xcalloc (1, sizeof (struct eh_queue));\n   q->next = ehqueue;\n   ehqueue = q;\n }"}, {"sha": "254cd067a224c0139f94a966aca02d7837c7b802", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=dd1bd863187095f63709320f6a30d97fe0ee40ab", "patch": "@@ -1,6 +1,6 @@\n /* Global common subexpression elimination/Partial redundancy elimination\n    and global constant/copy propagation for GNU compiler.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -4824,7 +4824,7 @@ pre_gcse ()\n   /* Compute a mapping from expression number (`bitmap_index') to\n      hash table entry.  */\n \n-  index_map = xcalloc (n_exprs, sizeof (struct expr *));\n+  index_map = (struct expr **) xcalloc (n_exprs, sizeof (struct expr *));\n   for (i = 0; i < expr_hash_table_size; i++)\n     {\n       struct expr *expr;\n@@ -5468,7 +5468,7 @@ hoist_code ()\n   /* Compute a mapping from expression number (`bitmap_index') to\n      hash table entry.  */\n \n-  index_map = xcalloc (n_exprs, sizeof (struct expr *));\n+  index_map = (struct expr **) xcalloc (n_exprs, sizeof (struct expr *));\n   for (i = 0; i < expr_hash_table_size; i++)\n     {\n       struct expr *expr;"}, {"sha": "8d4917ea18e8e4ca3fb3b85252828319148b24d0", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=dd1bd863187095f63709320f6a30d97fe0ee40ab", "patch": "@@ -4198,7 +4198,7 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\tfprintf (loop_dump_stream, \"is giv of biv %d\\n\", bl2->regno);\n \t      /* Let this giv be discovered by the generic code.  */\n \t      REG_IV_TYPE (bl->regno) = UNKNOWN_INDUCT;\n-\t      reg_biv_class[bl->regno] = NULL_PTR;\n+\t      reg_biv_class[bl->regno] = (struct iv_class *) NULL_PTR;\n \t      /* We can get better optimization if we can move the giv setting\n \t\t before the first giv use.  */\n \t      if (dominator"}, {"sha": "c70482a2e5f563599d840c1e3b6da599f48890e8", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=dd1bd863187095f63709320f6a30d97fe0ee40ab", "patch": "@@ -4533,7 +4533,7 @@ main (argc, argv)\n   /* Initialize the garbage-collector.  */\n   init_ggc ();\n   ggc_add_root (&input_file_stack, 1, sizeof input_file_stack,\n-\t\t&mark_file_stack);\n+\t\tmark_file_stack);\n   ggc_add_rtx_root (&stack_limit_rtx, 1);\n \n   /* Perform language-specific options intialization.  */"}, {"sha": "6087c7bad19d9b542a6a8c09745b52eae9efde04", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1bd863187095f63709320f6a30d97fe0ee40ab/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=dd1bd863187095f63709320f6a30d97fe0ee40ab", "patch": "@@ -3408,7 +3408,7 @@ decode_rtx_const (mode, x, value)\n       case SYMBOL_REF:\n \t/* Use the string's address, not the SYMBOL_REF's address,\n \t   for the sake of addresses of library routines.  */\n-\tvalue->un.addr.base = XSTR (value->un.addr.base, 0);\n+\tvalue->un.addr.base = (rtx) XSTR (value->un.addr.base, 0);\n \tbreak;\n \n       case LABEL_REF:"}]}