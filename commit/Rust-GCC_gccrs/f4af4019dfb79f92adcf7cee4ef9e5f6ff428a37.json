{"sha": "f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRhZjQwMTlkZmI3OWY5MmFkY2Y3Y2VlNGVmOWU1ZjZmZjQyOGEzNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2019-06-24T21:13:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-06-24T21:13:12Z"}, "message": "ipa-utils.h (type_with_linkage_p): Verify that type is CXX_ODR_P.\n\n\n\t* ipa-utils.h (type_with_linkage_p): Verify that type is\n\tCXX_ODR_P.\n\t(odr_type_p): Remove extra return.\n\t* lto-streamer-out.c (hash_tree): Hash TYPE_CXX_ODR_P;\n\thash STRING_FLAG only for arrays and integers.\n\t* tree-stremaer-in.c (unpack_ts_type_common_value_fields):\n\tUpdate analogously.\n\t* tree-streamer-out.c (pack_ts_type_common_value_fields):\n\tLikewise.\n\t* print-tree.c (print_node): Print cxx-odr-p\n\tand string-flag.\n\t* tree.c (need_assembler_name_p): Also check that type\n\tis CXX_ODR_TYPE_P\n\t(verify_type_variant): Update verification of SRING_FLAG;\n\talso check CXX_ODR_P.\n\t* tree.h (ARRAY_OR_INTEGER_TYPE_CHECK): New macro.\n\t(TYPE_STRING_FLAG): Use it.\n\t(TYPE_CXX_ODR_P): New macro.\n\n\t* lto-common.c (compare_tree_sccs_1): Compare CXX_ODR_P;\n\tcompare STRING_FLAG only for arrays and integers.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Check that\n\ttype is array or integer prior checking string flag.\n\t* gcc-interface/gigi.h (gnat_signed_type_for,\n\tmaybe_character_value): Likewise.\n\n\t* c-common.c (braced_lists_to_strings): Check that\n\ttype is array or integer prior checking string flag.\n\n\t* lex.c (cxx_make_type): Set TYPE_CXX_ODR_P.\n\n\t* dwarf2out.c (gen_array_type_die): First check that type\n\tis an array and then test string flag.\n\n\t* trans-expr.c (gfc_conv_substring): Check that\n\ttype is array or integer prior checking string flag.\n\t(gfc_conv_string_parameter): Likewise.\n\t* trans-openmp.c (gfc_omp_scalar_p): Likewise.\n\t* trans.c (gfc_build_array_ref): Likewise.\n\nFrom-SVN: r272628", "tree": {"sha": "2344514a98c3312cba34b09afe63f6f1962da351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2344514a98c3312cba34b09afe63f6f1962da351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/comments", "author": null, "committer": null, "parents": [{"sha": "cd57f4d81bdefeca6133dc52db8b7832a867686b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd57f4d81bdefeca6133dc52db8b7832a867686b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd57f4d81bdefeca6133dc52db8b7832a867686b"}], "stats": {"total": 138, "additions": 115, "deletions": 23}, "files": [{"sha": "b18833b4367ea2534a5229c5bd14ba438e3b1607", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1,3 +1,26 @@\n+2019-06-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-utils.h (type_with_linkage_p): Verify that type is\n+\tCXX_ODR_P.\n+\t(odr_type_p): Remove extra return.\n+\t* lto-streamer-out.c (hash_tree): Hash TYPE_CXX_ODR_P;\n+\thash STRING_FLAG only for arrays and integers.\n+\t* tree-stremaer-in.c (unpack_ts_type_common_value_fields):\n+\tUpdate analogously.\n+\t* tree-streamer-out.c (pack_ts_type_common_value_fields):\n+\tLikewise.\n+\t* print-tree.c (print_node): Print cxx-odr-p\n+\tand string-flag.\n+\t* tree.c (need_assembler_name_p): Also check that type\n+\tis CXX_ODR_TYPE_P\n+\t(verify_type_variant): Update verification of SRING_FLAG;\n+\talso check CXX_ODR_P.\n+\t* tree.h (ARRAY_OR_INTEGER_TYPE_CHECK): New macro.\n+\t(TYPE_STRING_FLAG): Use it.\n+\t(TYPE_CXX_ODR_P): New macro.\n+\t* dwarf2out.c (gen_array_type_die): First check that type\n+\tis an array and then test string flag.\n+\n 2019-06-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90972"}, {"sha": "7237daca90b8ca0afe8f108664ba7a72243041d0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1,3 +1,10 @@\n+2019-06-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Check that\n+\ttype is array or integer prior checking string flag.\n+\t* gcc-interface/gigi.h (gnat_signed_type_for,\n+\tmaybe_character_value): Likewise.\n+\n 2019-06-24  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc-interface/utils.c (handle_nonnull_attribute): Quote attribute"}, {"sha": "df405434b5c88b334019f2f3f429ddff529ec28e", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1855,7 +1855,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  = Has_Biased_Representation (gnat_entity);\n \n       /* Do the same processing for Character subtypes as for types.  */\n-      if (TYPE_STRING_FLAG (TREE_TYPE (gnu_type)))\n+      if ((TREE_CODE (TREE_TYPE (gnu_type)) == INTEGER_TYPE\n+\t   || TREE_CODE (TREE_TYPE (gnu_type)) == ARRAY_TYPE)\n+\t  && TYPE_STRING_FLAG (TREE_TYPE (gnu_type)))\n \t{\n \t  TYPE_NAME (gnu_type) = gnu_entity_name;\n \t  TYPE_STRING_FLAG (gnu_type) = 1;"}, {"sha": "7254a161c7bb770a8e789395ef54f3bb92aadacd", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1138,7 +1138,8 @@ gnat_signed_type_for (tree type_node)\n static inline tree\n maybe_character_type (tree type)\n {\n-  if (TYPE_STRING_FLAG (type) && !TYPE_UNSIGNED (type))\n+  if (TREE_CODE (type) == INTEGER_TYPE\n+      && TYPE_STRING_FLAG (type) && !TYPE_UNSIGNED (type))\n     type = gnat_unsigned_type_for (type);\n \n   return type;\n@@ -1151,7 +1152,8 @@ maybe_character_value (tree expr)\n {\n   tree type = TREE_TYPE (expr);\n \n-  if (TYPE_STRING_FLAG (type) && !TYPE_UNSIGNED (type))\n+  if (TREE_CODE (type) == INTEGER_TYPE\n+      && TYPE_STRING_FLAG (type) && !TYPE_UNSIGNED (type))\n     {\n       type = gnat_unsigned_type_for (type);\n       expr = convert (type, expr);"}, {"sha": "d093e203ffbd4cf12905ad3d5cd3bf2026ee4d22", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1,3 +1,8 @@\n+2019-06-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* c-common.c (braced_lists_to_strings): Check that\n+\ttype is array or integer prior checking string flag.\n+\n 2019-06-21  Matthew Beliveau  <mbelivea@redhat.com>\n \n \tPR c++/90875 - added -Wswitch-outside-range option"}, {"sha": "6013fcaa280e08f826801bd5ff7cb22624092eec", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -8847,7 +8847,8 @@ braced_lists_to_strings (tree type, tree ctor)\n   else\n     return ctor;\n \n-  if (TYPE_STRING_FLAG (ttp))\n+  if ((TREE_CODE (ttp) == ARRAY_TYPE || TREE_CODE (ttp) == INTEGER_TYPE)\n+      && TYPE_STRING_FLAG (ttp))\n     return braced_list_to_string (type, ctor);\n \n   code = TREE_CODE (ttp);"}, {"sha": "3459ad7718b276175cd337dce1449d3e080af38f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1,3 +1,7 @@\n+2019-06-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lex.c (cxx_make_type): Set TYPE_CXX_ODR_P.\n+\n 2019-06-24  Jason Merrill  <jason@redhat.com>\n \n \t* class.c (layout_class_type): Don't use a separate"}, {"sha": "4a4325f13cf37903e590d152b831d46171611104", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -884,6 +884,9 @@ cxx_make_type (enum tree_code code MEM_STAT_DECL)\n       CLASSTYPE_INTERFACE_ONLY (t) = finfo->interface_only;\n     }\n \n+  if (code == RECORD_TYPE || code == UNION_TYPE)\n+    TYPE_CXX_ODR_P (t) = 1;\n+\n   return t;\n }\n "}, {"sha": "7fa8b05fe5cdf724fcd6d6f4d49712375ea8417c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -21850,8 +21850,8 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n \n   /* Emit DW_TAG_string_type for Fortran character types (with kind 1 only, as\n      DW_TAG_string_type doesn't have DW_AT_type attribute).  */\n-  if (TYPE_STRING_FLAG (type)\n-      && TREE_CODE (type) == ARRAY_TYPE\n+  if (TREE_CODE (type) == ARRAY_TYPE\n+      && TYPE_STRING_FLAG (type)\n       && is_fortran ()\n       && TYPE_MODE (TREE_TYPE (type)) == TYPE_MODE (char_type_node))\n     {"}, {"sha": "f70aaa61040227830bc2c914ec71b07fb46e89aa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1,3 +1,11 @@\n+2019-06-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* trans-expr.c (gfc_conv_substring): Check that\n+\ttype is array or integer prior checking string flag.\n+\t(gfc_conv_string_parameter): Likewise.\n+\t* trans-openmp.c (gfc_omp_scalar_p): Likewise.\n+\t* trans.c (gfc_build_array_ref): Likewise.\n+\n 2019-06-22  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/89782"}, {"sha": "074568ab596d181b10bc16fd753e20d94b312d31", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -2309,7 +2309,9 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n \tstart.expr = gfc_evaluate_now (start.expr, &se->pre);\n \n       /* Change the start of the string.  */\n-      if (TYPE_STRING_FLAG (TREE_TYPE (se->expr)))\n+      if ((TREE_CODE (TREE_TYPE (se->expr)) == ARRAY_TYPE\n+\t   || TREE_CODE (TREE_TYPE (se->expr)) == INTEGER_TYPE)\n+\t  && TYPE_STRING_FLAG (TREE_TYPE (se->expr)))\n \ttmp = se->expr;\n       else\n \ttmp = build_fold_indirect_ref_loc (input_location,\n@@ -9479,7 +9481,9 @@ gfc_conv_string_parameter (gfc_se * se)\n       return;\n     }\n \n-  if (TYPE_STRING_FLAG (TREE_TYPE (se->expr)))\n+  if ((TREE_CODE (TREE_TYPE (se->expr)) == ARRAY_TYPE\n+       || TREE_CODE (TREE_TYPE (se->expr)) == INTEGER_TYPE)\n+      && TYPE_STRING_FLAG (TREE_TYPE (se->expr)))\n     {\n       if (TREE_CODE (se->expr) != INDIRECT_REF)\n \t{"}, {"sha": "394cbc2a929a8ee9cde0620de2584fe5051a8ba6", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1222,7 +1222,8 @@ gfc_omp_scalar_p (tree decl)\n \t  || GFC_CLASS_TYPE_P (type))\n \treturn false;\n     }\n-  if (TYPE_STRING_FLAG (type))\n+  if ((TREE_CODE (type) == ARRAY_TYPE || TREE_CODE (type) == INTEGER_TYPE)\n+      && TYPE_STRING_FLAG (type))\n     return false;\n   if (INTEGRAL_TYPE_P (type)\n       || SCALAR_FLOAT_TYPE_P (type)"}, {"sha": "0d786d9cf99f5d83fbf99362305d7cd89ef4a372", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -418,7 +418,8 @@ gfc_build_array_ref (tree base, tree offset, tree decl, tree vptr)\n       tmp = gfc_build_addr_expr (pvoid_type_node, base);\n       tmp = fold_build_pointer_plus_loc (input_location, tmp, offset);\n       tmp = fold_convert (build_pointer_type (type), tmp);\n-      if (!TYPE_STRING_FLAG (type))\n+      if ((TREE_CODE (type) != INTEGER_TYPE && TREE_CODE (type) != ARRAY_TYPE)\n+\t  || !TYPE_STRING_FLAG (type))\n \ttmp = build_fold_indirect_ref_loc (input_location, tmp);\n       return tmp;\n     }"}, {"sha": "64974beb6d4040fd492b313afca65682cd092536", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -205,6 +205,8 @@ type_with_linkage_p (const_tree t)\n   if (!TYPE_CONTEXT (t))\n     return false;\n \n+  gcc_checking_assert (TREE_CODE (t) == ENUMERAL_TYPE || TYPE_CXX_ODR_P (t));\n+\n   return true;\n }\n "}, {"sha": "294771d4ba82249e26b632545b1682b734640c91", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1143,7 +1143,6 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))\n     {\n       hstate.add_hwi (TYPE_MODE (t));\n-      hstate.add_flag (TYPE_STRING_FLAG (t));\n       /* TYPE_NO_FORCE_BLK is private to stor-layout and need\n  \t no streaming.  */\n       hstate.add_flag (TYPE_PACKED (t));\n@@ -1154,9 +1153,12 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n \t{\n \t  hstate.add_flag (TYPE_TRANSPARENT_AGGR (t));\n \t  hstate.add_flag (TYPE_FINAL_P (t));\n+          hstate.add_flag (TYPE_CXX_ODR_P (t));\n \t}\n       else if (code == ARRAY_TYPE)\n \thstate.add_flag (TYPE_NONALIASED_COMPONENT (t));\n+      if (code == ARRAY_TYPE || code == INTEGER_TYPE)\n+        hstate.add_flag (TYPE_STRING_FLAG (t));\n       if (AGGREGATE_TYPE_P (t))\n \thstate.add_flag (TYPE_TYPELESS_STORAGE (t));\n       hstate.commit_flag ();"}, {"sha": "95b98ab86643ac938d200c7307ece833661430fb", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1,3 +1,8 @@\n+2019-06-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-common.c (compare_tree_sccs_1): Compare CXX_ODR_P;\n+\tcompare STRING_FLAG only for arrays and integers.\n+\n 2019-06-05  Martin Sebor  <msebor@redhat.com>\n \n \t* lto-common.c (lto_file_finalize): Adjust quoting and hyphenation."}, {"sha": "0d38ee6b57b31f367a0cd29ff80bdba0c4f4048c", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1124,15 +1124,17 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))\n     {\n       compare_values (TYPE_MODE);\n-      compare_values (TYPE_STRING_FLAG);\n       compare_values (TYPE_NEEDS_CONSTRUCTING);\n       if (RECORD_OR_UNION_TYPE_P (t1))\n \t{\n \t  compare_values (TYPE_TRANSPARENT_AGGR);\n \t  compare_values (TYPE_FINAL_P);\n+          compare_values (TYPE_CXX_ODR_P);\n \t}\n       else if (code == ARRAY_TYPE)\n \tcompare_values (TYPE_NONALIASED_COMPONENT);\n+      if (code == ARRAY_TYPE || code == INTEGER_TYPE)\n+        compare_values (TYPE_STRING_FLAG);\n       if (AGGREGATE_TYPE_P (t1))\n \tcompare_values (TYPE_TYPELESS_STORAGE);\n       compare_values (TYPE_EMPTY_P);"}, {"sha": "debea2b739da8d229998cbf125b61a9fff6a2f8d", "filename": "gcc/print-tree.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -601,7 +601,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n       if (TYPE_NO_FORCE_BLK (node))\n \tfputs (\" no-force-blk\", file);\n \n-      if (TYPE_STRING_FLAG (node))\n+      if (code == ARRAY_TYPE && TYPE_STRING_FLAG (node))\n \tfputs (\" string-flag\", file);\n \n       if (TYPE_NEEDS_CONSTRUCTING (node))\n@@ -614,6 +614,11 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t  && TYPE_REVERSE_STORAGE_ORDER (node))\n \tfputs (\" reverse-storage-order\", file);\n \n+      if ((code == RECORD_TYPE\n+\t   || code == UNION_TYPE)\n+\t  && TYPE_CXX_ODR_P (node))\n+\tfputs (\" cxx-odr-p\", file);\n+\n       /* The transparent-union flag is used for different things in\n \t different nodes.  */\n       if ((code == UNION_TYPE || code == RECORD_TYPE)"}, {"sha": "23f8f01317e68f11aad55e3759df5d7f2176a2c8", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -1574,6 +1574,8 @@ struct GTY(()) tree_type_common {\n \n   ENUM_BITFIELD(machine_mode) mode : 8;\n \n+  /* TYPE_STRING_FLAG for INTEGER_TYPE and ARRAY_TYPE.\n+     TYPE_CXX_ODR_P for RECORD_TYPE and UNION_TYPE.  */\n   unsigned string_flag : 1;\n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;"}, {"sha": "35b3e9874d597116c4429077274b00aa4259b5c8", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -372,7 +372,6 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n \n   mode = bp_unpack_machine_mode (bp);\n   SET_TYPE_MODE (expr, mode);\n-  TYPE_STRING_FLAG (expr) = (unsigned) bp_unpack_value (bp, 1);\n   /* TYPE_NO_FORCE_BLK is private to stor-layout and need\n      no streaming.  */\n   TYPE_PACKED (expr) = (unsigned) bp_unpack_value (bp, 1);\n@@ -383,9 +382,12 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n     {\n       TYPE_TRANSPARENT_AGGR (expr) = (unsigned) bp_unpack_value (bp, 1);\n       TYPE_FINAL_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n+      TYPE_CXX_ODR_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n     }\n   else if (TREE_CODE (expr) == ARRAY_TYPE)\n     TYPE_NONALIASED_COMPONENT (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  if (TREE_CODE (expr) == ARRAY_TYPE || TREE_CODE (expr) == INTEGER_TYPE)\n+    TYPE_STRING_FLAG (expr) = (unsigned) bp_unpack_value (bp, 1);\n   if (AGGREGATE_TYPE_P (expr))\n     TYPE_TYPELESS_STORAGE (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_EMPTY_P (expr) = (unsigned) bp_unpack_value (bp, 1);"}, {"sha": "a83057ec277acad2bd7a10ea563be3a48f54f398", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -319,7 +319,6 @@ pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n      not necessary valid in a global context.\n      Use the raw value previously set by layout_type.  */\n   bp_pack_machine_mode (bp, TYPE_MODE_RAW (expr));\n-  bp_pack_value (bp, TYPE_STRING_FLAG (expr), 1);\n   /* TYPE_NO_FORCE_BLK is private to stor-layout and need\n      no streaming.  */\n   bp_pack_value (bp, TYPE_PACKED (expr), 1);\n@@ -333,9 +332,12 @@ pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n     {\n       bp_pack_value (bp, TYPE_TRANSPARENT_AGGR (expr), 1);\n       bp_pack_value (bp, TYPE_FINAL_P (expr), 1);\n+      bp_pack_value (bp, TYPE_CXX_ODR_P (expr), 1);\n     }\n   else if (TREE_CODE (expr) == ARRAY_TYPE)\n     bp_pack_value (bp, TYPE_NONALIASED_COMPONENT (expr), 1);\n+  if (TREE_CODE (expr) == ARRAY_TYPE || TREE_CODE (expr) == INTEGER_TYPE)\n+    bp_pack_value (bp, TYPE_STRING_FLAG (expr), 1);\n   if (AGGREGATE_TYPE_P (expr))\n     bp_pack_value (bp, TYPE_TYPELESS_STORAGE (expr), 1);\n   bp_pack_value (bp, TYPE_EMPTY_P (expr), 1);"}, {"sha": "7ecf407e5face3472e6e725ee53f0d81809981c7", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -5598,6 +5598,9 @@ need_assembler_name_p (tree decl)\n \t  && decl == TYPE_NAME (TREE_TYPE (decl))\n \t  && TYPE_MAIN_VARIANT (TREE_TYPE (decl)) == TREE_TYPE (decl)\n \t  && !TYPE_ARTIFICIAL (TREE_TYPE (decl))\n+\t  && ((TREE_CODE (TREE_TYPE (decl)) != RECORD_TYPE\n+\t       && TREE_CODE (TREE_TYPE (decl)) != UNION_TYPE)\n+\t      || TYPE_CXX_ODR_P (TREE_TYPE (decl)))\n \t  && (type_with_linkage_p (TREE_TYPE (decl))\n \t      || TREE_CODE (TREE_TYPE (decl)) == INTEGER_TYPE)\n \t  && !variably_modified_type_p (TREE_TYPE (decl), NULL_TREE))\n@@ -13881,7 +13884,10 @@ verify_type_variant (const_tree t, tree tv)\n      Ada also builds variants of types with different TYPE_CONTEXT.   */\n   if ((!in_lto_p || !TYPE_FILE_SCOPE_P (t)) && 0)\n     verify_variant_match (TYPE_CONTEXT);\n-  verify_variant_match (TYPE_STRING_FLAG);\n+  if (TREE_CODE (t) == ARRAY_TYPE || TREE_CODE (t) == INTEGER_TYPE)\n+    verify_variant_match (TYPE_STRING_FLAG);\n+  if (TREE_CODE (t) == RECORD_TYPE || TREE_CODE (t) == UNION_TYPE)\n+    verify_variant_match (TYPE_CXX_ODR_P);\n   if (TYPE_ALIAS_SET_KNOWN_P (t))\n     {\n       error (\"type variant with %<TYPE_ALIAS_SET_KNOWN_P%>\");\n@@ -14627,12 +14633,6 @@ verify_type (const_tree t)\n       error (\"%<TYPE_CACHED_VALUES_P%> is set while it should not be\");\n       error_found = true;\n     }\n-  if (TYPE_STRING_FLAG (t)\n-      && TREE_CODE (t) != ARRAY_TYPE && TREE_CODE (t) != INTEGER_TYPE)\n-    {\n-      error (\"%<TYPE_STRING_FLAG%> is set on wrong type code\");\n-      error_found = true;\n-    }\n   \n   /* ipa-devirt makes an assumption that TYPE_METHOD_BASETYPE is always\n      TYPE_MAIN_VARIANT and it would be odd to add methods only to variatns"}, {"sha": "1a43e6b7ff8516199acbd0f57816f9d211ae8788", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f4af4019dfb79f92adcf7cee4ef9e5f6ff428a37", "patch": "@@ -439,6 +439,8 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n   TREE_CHECK3 (T, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE)\n #define NOT_RECORD_OR_UNION_CHECK(T) \\\n   TREE_NOT_CHECK3 (T, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE)\n+#define ARRAY_OR_INTEGER_TYPE_CHECK(T)\t\\\n+  TREE_CHECK2 (T, ARRAY_TYPE, INTEGER_TYPE)\n \n #define NUMERICAL_TYPE_CHECK(T)\t\t\t\t\t\\\n   TREE_CHECK5 (T, INTEGER_TYPE, ENUMERAL_TYPE, BOOLEAN_TYPE, REAL_TYPE,\t\\\n@@ -2118,7 +2120,14 @@ extern machine_mode vector_type_mode (const_tree);\n /* If set in an ARRAY_TYPE, indicates a string type (for languages\n    that distinguish string from array of char).\n    If set in a INTEGER_TYPE, indicates a character type.  */\n-#define TYPE_STRING_FLAG(NODE) (TYPE_CHECK (NODE)->type_common.string_flag)\n+#define TYPE_STRING_FLAG(NODE) \\\n+\t(ARRAY_OR_INTEGER_TYPE_CHECK (NODE)->type_common.string_flag)\n+\n+/* If set for RECORD_TYPE or UNION_TYPE it indicates that the type conforms\n+   to the C++ one definition rule.  This is used for LTO canonical type\n+   computation.  */\n+#define TYPE_CXX_ODR_P(NODE) \\\n+\t(RECORD_OR_UNION_CHECK (NODE)->type_common.string_flag)\n \n /* Nonzero in a VECTOR_TYPE if the frontends should not emit warnings\n    about missing conversions to other vector types of the same size.  */"}]}