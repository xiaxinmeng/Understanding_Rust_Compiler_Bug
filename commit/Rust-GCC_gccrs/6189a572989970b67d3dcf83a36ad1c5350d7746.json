{"sha": "6189a572989970b67d3dcf83a36ad1c5350d7746", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4OWE1NzI5ODk5NzBiNjdkM2RjZjgzYTM2YWQxYzUzNTBkNzc0Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-14T21:35:58Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-14T21:35:58Z"}, "message": "i386.c (ix86_cmodel_string, [...]): Define.\n\n\t* i386.c (ix86_cmodel_string, ix86_cmodel): Define.\n\t(override_options): Parse cmodel string.\n\t(x86_64_sign_extended_value, x86_64_zero_extended_value): New.\n\t* i386.h (TARGET_OPTIONS): Add \"cmodel\".\n\t(EXTRA_CONSTRAINT): Recognize 'e' and 'Z'.\n\t(enum cmodel): New.\n\t(ix86_cmodel_string, ix86_cmodel): Declare.\n\n\n\tSpot by Matt Kraai:\n\t* i386.h (GENERAL_REG_P): Add missing REG_P.\n\nFrom-SVN: r40474", "tree": {"sha": "7fb32f8734e4ba273578ac0731a291d839c09bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fb32f8734e4ba273578ac0731a291d839c09bf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6189a572989970b67d3dcf83a36ad1c5350d7746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6189a572989970b67d3dcf83a36ad1c5350d7746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6189a572989970b67d3dcf83a36ad1c5350d7746", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6189a572989970b67d3dcf83a36ad1c5350d7746/comments", "author": null, "committer": null, "parents": [{"sha": "4cf6b384acaa1d0d9bdbfb2ac21f2ba5bdca846a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf6b384acaa1d0d9bdbfb2ac21f2ba5bdca846a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf6b384acaa1d0d9bdbfb2ac21f2ba5bdca846a"}], "stats": {"total": 260, "additions": 259, "deletions": 1}, "files": [{"sha": "d4997cb2af59f3a9a71844360e33862f92bb0908", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6189a572989970b67d3dcf83a36ad1c5350d7746/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6189a572989970b67d3dcf83a36ad1c5350d7746/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6189a572989970b67d3dcf83a36ad1c5350d7746", "patch": "@@ -1,3 +1,18 @@\n+Wed Mar 14 22:26:10 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (ix86_cmodel_string, ix86_cmodel): Define.\n+\t(override_options): Parse cmodel string.\n+\t(x86_64_sign_extended_value, x86_64_zero_extended_value): New.\n+\t* i386.h (TARGET_OPTIONS): Add \"cmodel\".\n+\t(EXTRA_CONSTRAINT): Recognize 'e' and 'Z'.\n+\t(enum cmodel): New.\n+\t(ix86_cmodel_string, ix86_cmodel): Declare.\n+\n+Wed Mar 14 22:26:54 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\tSpot by Matt Kraai:\n+\t* i386.h (GENERAL_REG_P): Add missing REG_P.\n+\n 2001-03-14  Laurynas Biveinis  <lauras@softhome.net>\n \n \t* configure.in: Use $gcc_cv_as instead of $as."}, {"sha": "16dfe454b3976f59ea11432c211ff49ee033d21e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6189a572989970b67d3dcf83a36ad1c5350d7746/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6189a572989970b67d3dcf83a36ad1c5350d7746/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6189a572989970b67d3dcf83a36ad1c5350d7746", "patch": "@@ -487,6 +487,11 @@ struct ix86_frame\n   HOST_WIDE_INT stack_pointer_offset;\n };\n \n+/* Code model option as passed by user.  */\n+const char *ix86_cmodel_string;\n+/* Parsed value.  */\n+enum cmodel ix86_cmodel;\n+\n /* which cpu are we scheduling for */\n enum processor_type ix86_cpu;\n \n@@ -659,6 +664,35 @@ override_options ()\n   ix86_arch = PROCESSOR_I386;\n   ix86_cpu = (enum processor_type) TARGET_CPU_DEFAULT;\n \n+  if (ix86_cmodel_string != 0)\n+    {\n+      if (!strcmp (ix86_cmodel_string, \"small\"))\n+\tix86_cmodel = flag_pic ? CM_SMALL_PIC : CM_SMALL;\n+      else if (flag_pic)\n+\tsorry (\"Code model %s not supported in PIC mode\", ix86_cmodel_string);\n+      else if (!strcmp (ix86_cmodel_string, \"32\"))\n+\tix86_cmodel = CM_32;\n+      else if (!strcmp (ix86_cmodel_string, \"kernel\") && !flag_pic)\n+\tix86_cmodel = CM_KERNEL;\n+      else if (!strcmp (ix86_cmodel_string, \"medium\") && !flag_pic)\n+\tix86_cmodel = CM_MEDIUM;\n+      else if (!strcmp (ix86_cmodel_string, \"large\") && !flag_pic)\n+\tix86_cmodel = CM_LARGE;\n+      else\n+\terror (\"bad value (%s) for -mcmodel= switch\", ix86_cmodel_string);\n+    }\n+  else\n+    {\n+      ix86_cmodel = CM_32;\n+      if (TARGET_64BIT)\n+\tix86_cmodel = flag_pic ? CM_SMALL_PIC : CM_SMALL;\n+    }\n+  if ((TARGET_64BIT == 0) != (ix86_cmodel == CM_32))\n+    error (\"Code model `%s' not supported in the %s bit mode.\",\n+\t   ix86_cmodel_string, TARGET_64BIT ? \"64\" : \"32\");\n+  if (ix86_cmodel == CM_LARGE)\n+    sorry (\"Code model `large' not supported yet.\");\n+\n   if (ix86_arch_string != 0)\n     {\n       for (i = 0; i < pta_size; i++)\n@@ -1793,6 +1827,171 @@ ix86_can_use_return_insn_p ()\n   ix86_compute_frame_layout (&frame);\n   return frame.to_allocate == 0 && frame.nregs == 0;\n }\n+\f\n+/* Return 1 if VALUE can be stored in the sign extended immediate field.  */\n+int\n+x86_64_sign_extended_value (value)\n+     rtx value;\n+{\n+  switch (GET_CODE (value))\n+    {\n+      /* CONST_DOUBLES never match, since HOST_BITS_PER_WIDE_INT is known\n+         to be at least 32 and this all acceptable constants are\n+\t represented as CONST_INT.  */\n+      case CONST_INT:\n+\tif (HOST_BITS_PER_WIDE_INT == 32)\n+\t  return 1;\n+\telse\n+\t  {\n+\t    HOST_WIDE_INT val = trunc_int_for_mode (INTVAL (value), DImode);\n+\t    return (HOST_WIDE_INT)(int)val == val;\n+\t  }\n+\tbreak;\n+\n+      /* For certain code models, the symbolic references are known to fit.  */\n+      case SYMBOL_REF:\n+\treturn ix86_cmodel == CM_SMALL || ix86_cmodel == CM_KERNEL;\n+\n+      /* For certain code models, the code is near as well.  */\n+      case LABEL_REF:\n+\treturn ix86_cmodel != CM_LARGE && ix86_cmodel != CM_SMALL_PIC;\n+\n+      /* We also may accept the offsetted memory references in certain special\n+         cases.  */\n+      case CONST:\n+\tif (GET_CODE (XEXP (value, 0)) == UNSPEC\n+\t    && XVECLEN (XEXP (value, 0), 0) == 1\n+\t    && XINT (XEXP (value, 0), 1) ==  15)\n+\t  return 1;\n+\telse if (GET_CODE (XEXP (value, 0)) == PLUS)\n+\t  {\n+\t    rtx op1 = XEXP (XEXP (value, 0), 0);\n+\t    rtx op2 = XEXP (XEXP (value, 0), 1);\n+\t    HOST_WIDE_INT offset;\n+\n+\t    if (ix86_cmodel == CM_LARGE)\n+\t      return 0;\n+\t    if (GET_CODE (op2) != CONST_INT)\n+\t      return 0;\n+\t    offset = trunc_int_for_mode (INTVAL (op2), DImode);\n+\t    switch (GET_CODE (op1))\n+\t      {\n+\t\tcase SYMBOL_REF:\n+\t\t  /* For CM_SMALL assume that latest object is 1MB before\n+\t\t     end of 31bits boundary.  We may also accept pretty\n+\t\t     large negative constants knowing that all objects are\n+\t\t     in the positive half of address space.  */\n+\t\t  if (ix86_cmodel == CM_SMALL\n+\t\t      && offset < 1024*1024*1024\n+\t\t      && trunc_int_for_mode (offset, SImode) == offset)\n+\t\t    return 1;\n+\t\t  /* For CM_KERNEL we know that all object resist in the\n+\t\t     negative half of 32bits address space.  We may not\n+\t\t     accept negative offsets, since they may be just off\n+\t\t     and we may accept pretty large possitive ones.  */\n+\t\t  if (ix86_cmodel == CM_KERNEL\n+\t\t      && offset > 0\n+\t\t      && trunc_int_for_mode (offset, SImode) == offset)\n+\t\t    return 1;\n+\t\t  break;\n+\t\tcase LABEL_REF:\n+\t\t  /* These conditions are similar to SYMBOL_REF ones, just the\n+\t\t     constraints for code models differ.  */\n+\t\t  if ((ix86_cmodel == CM_SMALL || ix86_cmodel == CM_MEDIUM)\n+\t\t      && offset < 1024*1024*1024\n+\t\t      && trunc_int_for_mode (offset, SImode) == offset)\n+\t\t    return 1;\n+\t\t  if (ix86_cmodel == CM_KERNEL\n+\t\t      && offset > 0\n+\t\t      && trunc_int_for_mode (offset, SImode) == offset)\n+\t\t    return 1;\n+\t\t  break;\n+\t\tdefault:\n+\t\t  return 0;\n+\t      }\n+\t  }\n+\treturn 0;\n+      default:\n+\treturn 0;\n+    }\n+}\n+\n+/* Return 1 if VALUE can be stored in the zero extended immediate field.  */\n+int\n+x86_64_zero_extended_value (value)\n+     rtx value;\n+{\n+  switch (GET_CODE (value))\n+    {\n+      case CONST_DOUBLE:\n+\tif (HOST_BITS_PER_WIDE_INT == 32)\n+\t  return  (GET_MODE (value) == VOIDmode\n+\t\t   && !CONST_DOUBLE_HIGH (value));\n+\telse\n+\t  return 0;\n+      case CONST_INT:\n+\tif (HOST_BITS_PER_WIDE_INT == 32)\n+\t  return INTVAL (value) >= 0;\n+\telse\n+\t  return !(INTVAL (value) & ~(HOST_WIDE_INT)0xffffffff);\n+\tbreak;\n+\n+      /* For certain code models, the symbolic references are known to fit.  */\n+      case SYMBOL_REF:\n+\treturn ix86_cmodel == CM_SMALL;\n+\n+      /* For certain code models, the code is near as well.  */\n+      case LABEL_REF:\n+\treturn ix86_cmodel == CM_SMALL || ix86_cmodel == CM_MEDIUM;\n+\n+      /* We also may accept the offsetted memory references in certain special\n+         cases.  */\n+      case CONST:\n+\tif (GET_CODE (XEXP (value, 0)) == PLUS)\n+\t  {\n+\t    rtx op1 = XEXP (XEXP (value, 0), 0);\n+\t    rtx op2 = XEXP (XEXP (value, 0), 1);\n+\n+\t    if (ix86_cmodel == CM_LARGE)\n+\t      return 0;\n+\t    switch (GET_CODE (op1))\n+\t      {\n+\t\tcase SYMBOL_REF:\n+\t\t    return 0;\n+\t\t  /* For small code model we may accept pretty large possitive\n+\t\t     offsets, since one bit is available for free.  Negative\n+\t\t     offsets are limited by the size of NULL pointer area\n+\t\t     specified by the ABI.  */\n+\t\t  if (ix86_cmodel == CM_SMALL\n+\t\t      && GET_CODE (op2) == CONST_INT\n+\t\t      && trunc_int_for_mode (INTVAL (op2), DImode) > -0x10000\n+\t\t      && (trunc_int_for_mode (INTVAL (op2), SImode)\n+\t\t\t  == INTVAL (op2)))\n+\t\t    return 1;\n+\t          /* ??? For the kernel, we may accept adjustment of\n+\t\t     -0x10000000, since we know that it will just convert\n+\t\t     negative address space to possitive, but perhaps this\n+\t\t     is not worthwhile.  */\n+\t\t  break;\n+\t\tcase LABEL_REF:\n+\t\t  /* These conditions are similar to SYMBOL_REF ones, just the\n+\t\t     constraints for code models differ.  */\n+\t\t  if ((ix86_cmodel == CM_SMALL || ix86_cmodel == CM_MEDIUM)\n+\t\t      && GET_CODE (op2) == CONST_INT\n+\t\t      && trunc_int_for_mode (INTVAL (op2), DImode) > -0x10000\n+\t\t      && (trunc_int_for_mode (INTVAL (op2), SImode)\n+\t\t\t  == INTVAL (op2)))\n+\t\t    return 1;\n+\t\t  break;\n+\t\tdefault:\n+\t\t  return 0;\n+\t      }\n+\t  }\n+\treturn 0;\n+      default:\n+\treturn 0;\n+    }\n+}\n \n /* Value should be nonzero if functions must have frame pointers.\n    Zero means the frame pointer need not be set up (and parms may"}, {"sha": "02c6e2a03cc1fb62774aa9cbd5f334f71957eb66", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6189a572989970b67d3dcf83a36ad1c5350d7746/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6189a572989970b67d3dcf83a36ad1c5350d7746/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6189a572989970b67d3dcf83a36ad1c5350d7746", "patch": "@@ -393,6 +393,8 @@ extern int ix86_arch;\n     N_(\"Attempt to keep stack aligned to this power of 2\") },\t\\\n   { \"branch-cost=\",\t&ix86_branch_cost_string,\t\t\\\n     N_(\"Branches are this expensive (1-5, arbitrary units)\") },\t\\\n+  { \"cmodel=\", &ix86_cmodel_string,\t\t\t\t\\\n+    N_(\"Use given x86-64 code model\") },\t\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\\\n }\n \n@@ -1138,7 +1140,7 @@ enum reg_class\n   ((n) < 8 || REX_INT_REGNO_P (n))\n \n #define GENERAL_REG_P(X) \\\n-  (REG_P (X) && GENERAL_REGNO_P (X))\n+  (REG_P (X) && GENERAL_REGNO_P (REGNO (X)))\n \n #define ANY_QI_REG_P(X) (TARGET_64BIT ? GENERAL_REG_P(X) : QI_REG_P (X))\n \n@@ -1247,6 +1249,23 @@ enum reg_class\n   ((C) == 'G' ? standard_80387_constant_p (VALUE) \\\n    : ((C) == 'H' ? standard_sse_constant_p (VALUE) : 0))\n \n+/* A C expression that defines the optional machine-dependent\n+   constraint letters that can be used to segregate specific types of\n+   operands, usually memory references, for the target machine.  Any\n+   letter that is not elsewhere defined and not matched by\n+   `REG_CLASS_FROM_LETTER' may be used.  Normally this macro will not\n+   be defined.\n+\n+   If it is required for a particular target machine, it should\n+   return 1 if VALUE corresponds to the operand type represented by\n+   the constraint letter C.  If C is not defined as an extra\n+   constraint, the value returned should be 0 regardless of VALUE.  */\n+\n+#define EXTRA_CONSTRAINT(VALUE, C)\t\t\t\t\\\n+  ((C) == 'e' ? x86_64_sign_extended_value (VALUE)\t\t\\\n+   : (C) == 'Z' ? x86_64_zero_extended_value (VALUE)\t\t\\\n+   : 0)\n+\n /* Place additional restrictions on the register class to use when it\n    is necessary to be able to hold a value of mode MODE in a reload\n    register for which class CLASS would ordinarily be used. */\n@@ -3051,6 +3070,31 @@ do { long l;\t\t\t\t\t\t\\\n #define SPECIAL_MODE_PREDICATES \\\n   \"ext_register_operand\",\n \f\n+/* CM_32 is used by 32bit ABI\n+   CM_SMALL is small model assuming that all code and data fits in the first\n+   31bits of address space.\n+   CM_KERNEL is model assuming that all code and data fits in the negative\n+   31bits of address space.\n+   CM_MEDIUM is model assuming that code fits in the first 31bits of address\n+   space.  Size of data is unlimited.\n+   CM_LARGE is model making no assumptions about size of particular sections.\n+  \n+   CM_SMALL_PIC is model for PIC libraries assuming that code+data+got/plt\n+   tables first in 31bits of address space.\n+ */\n+enum cmodel {\n+  CM_32,\n+  CM_SMALL,\n+  CM_KERNEL,\n+  CM_MEDIUM,\n+  CM_LARGE,\n+  CM_SMALL_PIC\n+};\n+\n+/* Valud of -mcmodel specified by user.  */\n+extern const char *ix86_cmodel_string;\n+extern enum cmodel ix86_cmodel;\n+\f\n /* Variables in i386.c */\n extern const char *ix86_cpu_string;\t\t/* for -mcpu=<xxx> */\n extern const char *ix86_arch_string;\t\t/* for -march=<xxx> */"}]}