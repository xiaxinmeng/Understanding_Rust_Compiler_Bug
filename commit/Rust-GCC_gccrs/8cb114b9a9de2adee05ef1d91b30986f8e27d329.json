{"sha": "8cb114b9a9de2adee05ef1d91b30986f8e27d329", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNiMTE0YjlhOWRlMmFkZWUwNWVmMWQ5MWIzMDk4NmY4ZTI3ZDMyOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-01-08T16:33:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-01-08T16:33:57Z"}, "message": "re PR tree-optimization/46469 (ICE: verify_cgraph_node failed: inline clone is needed at -O)\n\n\tPR tree-optmization/46469\n\t* ipa.c (function_and_variable_visibility): Clear needed flags on\n\tnodes with external decls; handle weakrefs merging correctly.\n\n\t* g++.dg/torture/pr46469.C: New testcase.\n\nFrom-SVN: r168598", "tree": {"sha": "4928e7afc4c094955e19fca3ef23c8bed38d3360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4928e7afc4c094955e19fca3ef23c8bed38d3360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cb114b9a9de2adee05ef1d91b30986f8e27d329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb114b9a9de2adee05ef1d91b30986f8e27d329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb114b9a9de2adee05ef1d91b30986f8e27d329", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb114b9a9de2adee05ef1d91b30986f8e27d329/comments", "author": null, "committer": null, "parents": [{"sha": "d5dc93f4464d315c1ee2f5d72377381529b88208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dc93f4464d315c1ee2f5d72377381529b88208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5dc93f4464d315c1ee2f5d72377381529b88208"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "aec3bbe491895f361ec91cd30282957782123f0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb114b9a9de2adee05ef1d91b30986f8e27d329/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb114b9a9de2adee05ef1d91b30986f8e27d329/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cb114b9a9de2adee05ef1d91b30986f8e27d329", "patch": "@@ -1,3 +1,9 @@\n+2011-01-07  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optmization/46469\n+\t* ipa.c (function_and_variable_visibility): Clear needed flags on\n+\tnodes with external decls; handle weakrefs merging correctly.\n+\n 2011-01-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* opts.c (finish_options): Set opts->x_flag_opts_finished to true,"}, {"sha": "fa39f92925d2f14edc99fa385bc3fd2f3721a84c", "filename": "gcc/ipa.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb114b9a9de2adee05ef1d91b30986f8e27d329/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb114b9a9de2adee05ef1d91b30986f8e27d329/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=8cb114b9a9de2adee05ef1d91b30986f8e27d329", "patch": "@@ -844,16 +844,32 @@ function_and_variable_visibility (bool whole_program)\n \t\tIDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (p->decl)),\n \t\tIDENTIFIER_POINTER (p->target));\n \t\t\n-      if ((node = cgraph_node_for_asm (p->target)) != NULL)\n+      if ((node = cgraph_node_for_asm (p->target)) != NULL\n+\t  && !DECL_EXTERNAL (node->decl))\n         {\n+\t  /* Weakrefs alias symbols from other compilation unit.  In the case\n+\t     the destination of weakref became available because of LTO, we must\n+\t     mark it as needed.  */\n+\t  if (in_lto_p\n+\t      && lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl))\n+\t      && !node->needed)\n+\t    cgraph_mark_needed_node (node);\n \t  gcc_assert (node->needed);\n \t  pointer_set_insert (aliased_nodes, node);\n \t  if (dump_file)\n \t    fprintf (dump_file, \"  node %s/%i\",\n \t\t     cgraph_node_name (node), node->uid);\n         }\n-      else if ((vnode = varpool_node_for_asm (p->target)) != NULL)\n+      else if ((vnode = varpool_node_for_asm (p->target)) != NULL\n+\t       && !DECL_EXTERNAL (vnode->decl))\n         {\n+\t  /* Weakrefs alias symbols from other compilation unit.  In the case\n+\t     the destination of weakref became available because of LTO, we must\n+\t     mark it as needed.  */\n+\t  if (in_lto_p\n+\t      && lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl))\n+\t      && !vnode->needed)\n+\t    varpool_mark_needed_node (vnode);\n \t  gcc_assert (vnode->needed);\n \t  pointer_set_insert (aliased_vnodes, vnode);\n \t  if (dump_file)\n@@ -867,6 +883,8 @@ function_and_variable_visibility (bool whole_program)\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n       int flags = flags_from_decl_or_type (node->decl);\n+\n+      /* Optimize away PURE and CONST constructors and destructors.  */\n       if (optimize\n \t  && (flags & (ECF_CONST | ECF_PURE))\n \t  && !(flags & ECF_LOOPING_CONST_OR_PURE))\n@@ -875,6 +893,13 @@ function_and_variable_visibility (bool whole_program)\n \t  DECL_STATIC_DESTRUCTOR (node->decl) = 0;\n \t}\n \n+      /* Frontends and alias code marks nodes as needed before parsing is finished.\n+\t We may end up marking as node external nodes where this flag is meaningless\n+\t strip it.  */\n+      if (node->needed\n+\t  && (DECL_EXTERNAL (node->decl) || !node->analyzed))\n+\tnode->needed = 0;\n+\n       /* C++ FE on lack of COMDAT support create local COMDAT functions\n \t (that ought to be shared but can not due to object format\n \t limitations).  It is neccesary to keep the flag to make rest of C++ FE"}, {"sha": "09ae61f3e710e605eacf04890bcc4f610abd0ae2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb114b9a9de2adee05ef1d91b30986f8e27d329/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb114b9a9de2adee05ef1d91b30986f8e27d329/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8cb114b9a9de2adee05ef1d91b30986f8e27d329", "patch": "@@ -1,3 +1,8 @@\n+2011-01-08  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optmization/46469\n+\t* g++.dg/torture/pr46469.C: New testcase.\n+\n 2011-01-08  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* objc-obj-c++-shared/next-mapping.h: Move code and definitions for"}, {"sha": "8212ea4f9e2b8a8e090c1a88235bbcbebdf5cad4", "filename": "gcc/testsuite/g++.dg/torture/pr46469.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb114b9a9de2adee05ef1d91b30986f8e27d329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46469.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb114b9a9de2adee05ef1d91b30986f8e27d329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46469.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46469.C?ref=8cb114b9a9de2adee05ef1d91b30986f8e27d329", "patch": "@@ -0,0 +1,13 @@\n+extern \"C\"  __inline __attribute__ ((__gnu_inline__)) int pthread_equal ()\n+  {\n+  }\n+\n+static\n+  __typeof\n+  (pthread_equal)\n+  __gthrw_pthread_equal __attribute__ ((__weakref__ (\"pthread_equal\")));\n+\n+int identifierByPthreadHandle ()\n+{\n+  pthread_equal ();\n+}"}]}