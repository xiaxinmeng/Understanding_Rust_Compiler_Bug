{"sha": "27f41cfea599bae1acce055104ccefd715f71c9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmNDFjZmVhNTk5YmFlMWFjY2UwNTUxMDRjY2VmZDcxNWY3MWM5ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2009-06-24T07:06:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-06-24T07:06:17Z"}, "message": "re PR libstdc++/40297 ([C++0x] debug mode vs atomics)\n\n2009-06-24  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/40297\n\t* include/bits/atomic_0.h: Reverse debug assertions.\n\t* include/bits/atomic_2.h: Likewise.\n\nFrom-SVN: r148893", "tree": {"sha": "3fc355db48ed7c447465433669872b14a3efdb7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fc355db48ed7c447465433669872b14a3efdb7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27f41cfea599bae1acce055104ccefd715f71c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f41cfea599bae1acce055104ccefd715f71c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f41cfea599bae1acce055104ccefd715f71c9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f41cfea599bae1acce055104ccefd715f71c9d/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb6234e0f88b9623472927b15277da9f3c54518e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6234e0f88b9623472927b15277da9f3c54518e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb6234e0f88b9623472927b15277da9f3c54518e"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "db7c50f34e632586e4111c6bb3f0c5fd7e95f8dc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f41cfea599bae1acce055104ccefd715f71c9d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f41cfea599bae1acce055104ccefd715f71c9d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=27f41cfea599bae1acce055104ccefd715f71c9d", "patch": "@@ -1,3 +1,9 @@\n+2009-06-24  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/40297\n+\t* include/bits/atomic_0.h: Reverse debug assertions.\n+\t* include/bits/atomic_2.h: Likewise.\n+\n 2009-06-23  DJ Delorie  <dj@redhat.com>\n \n \tAdd MeP port."}, {"sha": "a493ea66af972160c0f927fb1b52eae6fcc0c6a7", "filename": "libstdc++-v3/include/bits/atomic_0.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f41cfea599bae1acce055104ccefd715f71c9d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f41cfea599bae1acce055104ccefd715f71c9d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h?ref=27f41cfea599bae1acce055104ccefd715f71c9d", "patch": "@@ -119,17 +119,17 @@ namespace __atomic0\n     void\n     store(void* __v, memory_order __m = memory_order_seq_cst) volatile\n     {\n-      __glibcxx_assert(__m == memory_order_acquire);\n-      __glibcxx_assert(__m == memory_order_acq_rel);\n-      __glibcxx_assert(__m == memory_order_consume);\n+      __glibcxx_assert(__m != memory_order_acquire);\n+      __glibcxx_assert(__m != memory_order_acq_rel);\n+      __glibcxx_assert(__m != memory_order_consume);\n       _ATOMIC_STORE_(this, __v, __m);\n     }\n \n     void*\n     load(memory_order __m = memory_order_seq_cst) const volatile\n     {\n-      __glibcxx_assert(__m == memory_order_release);\n-      __glibcxx_assert(__m == memory_order_acq_rel);\n+      __glibcxx_assert(__m != memory_order_release);\n+      __glibcxx_assert(__m != memory_order_acq_rel);\n       return _ATOMIC_LOAD_(this, __m);\n     }\n \n@@ -141,8 +141,8 @@ namespace __atomic0\n     compare_exchange_weak(void*& __v1, void* __v2, memory_order __m1,\n \t\t\t  memory_order __m2) volatile\n     {\n-      __glibcxx_assert(__m2 == memory_order_release);\n-      __glibcxx_assert(__m2 == memory_order_acq_rel);\n+      __glibcxx_assert(__m2 != memory_order_release);\n+      __glibcxx_assert(__m2 != memory_order_acq_rel);\n       __glibcxx_assert(__m2 <= __m1);\n       return _ATOMIC_CMPEXCHNG_(this, &__v1, __v2, __m1);\n     }\n@@ -159,8 +159,8 @@ namespace __atomic0\n     compare_exchange_strong(void*& __v1, void* __v2, memory_order __m1,\n \t\t\t    memory_order __m2) volatile\n     {\n-      __glibcxx_assert(__m2 == memory_order_release);\n-      __glibcxx_assert(__m2 == memory_order_acq_rel);\n+      __glibcxx_assert(__m2 != memory_order_release);\n+      __glibcxx_assert(__m2 != memory_order_acq_rel);\n       __glibcxx_assert(__m2 <= __m1);\n       return _ATOMIC_CMPEXCHNG_(this, &__v1, __v2, __m1);\n     }\n@@ -310,17 +310,17 @@ namespace __atomic0\n       store(__integral_type __i,\n \t    memory_order __m = memory_order_seq_cst) volatile\n       {\n-\t__glibcxx_assert(__m == memory_order_acquire);\n-\t__glibcxx_assert(__m == memory_order_acq_rel);\n-\t__glibcxx_assert(__m == memory_order_consume);\n+\t__glibcxx_assert(__m != memory_order_acquire);\n+\t__glibcxx_assert(__m != memory_order_acq_rel);\n+\t__glibcxx_assert(__m != memory_order_consume);\n \t_ATOMIC_STORE_(this, __i, __m);\n       }\n \n       __integral_type\n       load(memory_order __m = memory_order_seq_cst) const volatile\n       {\n-\t__glibcxx_assert(__m == memory_order_release);\n-\t__glibcxx_assert(__m == memory_order_acq_rel);\n+\t__glibcxx_assert(__m != memory_order_release);\n+\t__glibcxx_assert(__m != memory_order_acq_rel);\n \treturn _ATOMIC_LOAD_(this, __m);\n       }\n \n@@ -333,8 +333,8 @@ namespace __atomic0\n       compare_exchange_weak(__integral_type& __i1, __integral_type __i2,\n \t\t\t    memory_order __m1, memory_order __m2) volatile\n       {\n-\t__glibcxx_assert(__m2 == memory_order_release);\n-\t__glibcxx_assert(__m2 == memory_order_acq_rel);\n+\t__glibcxx_assert(__m2 != memory_order_release);\n+\t__glibcxx_assert(__m2 != memory_order_acq_rel);\n \t__glibcxx_assert(__m2 <= __m1);\n \treturn _ATOMIC_CMPEXCHNG_(this, &__i1, __i2, __m1);\n       }\n@@ -351,8 +351,8 @@ namespace __atomic0\n       compare_exchange_strong(__integral_type& __i1, __integral_type __i2,\n \t\t\t      memory_order __m1, memory_order __m2) volatile\n       {\n-\t__glibcxx_assert(__m2 == memory_order_release);\n-\t__glibcxx_assert(__m2 == memory_order_acq_rel);\n+\t__glibcxx_assert(__m2 != memory_order_release);\n+\t__glibcxx_assert(__m2 != memory_order_acq_rel);\n \t__glibcxx_assert(__m2 <= __m1);\n \treturn _ATOMIC_CMPEXCHNG_(this, &__i1, __i2, __m1);\n       }"}, {"sha": "8e8e7ff16f8cc8667e18b92d1016cb63daa16699", "filename": "libstdc++-v3/include/bits/atomic_2.h", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f41cfea599bae1acce055104ccefd715f71c9d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f41cfea599bae1acce055104ccefd715f71c9d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h?ref=27f41cfea599bae1acce055104ccefd715f71c9d", "patch": "@@ -65,6 +65,10 @@ namespace __atomic2\n     void\n     clear(memory_order __m = memory_order_seq_cst) volatile\n     {\n+      __glibcxx_assert(__m != memory_order_consume);\n+      __glibcxx_assert(__m != memory_order_acquire);\n+      __glibcxx_assert(__m != memory_order_acq_rel);\n+\n       __sync_lock_release(&_M_i);\n       if (__m != memory_order_acquire && __m != memory_order_acq_rel)\n \t__sync_synchronize();\n@@ -93,9 +97,9 @@ namespace __atomic2\n     void\n     store(void* __v, memory_order __m = memory_order_seq_cst) volatile\n     {\n-      __glibcxx_assert(__m == memory_order_acquire);\n-      __glibcxx_assert(__m == memory_order_acq_rel);\n-      __glibcxx_assert(__m == memory_order_consume);\n+      __glibcxx_assert(__m != memory_order_acquire);\n+      __glibcxx_assert(__m != memory_order_acq_rel);\n+      __glibcxx_assert(__m != memory_order_consume);\n \n       if (__m == memory_order_relaxed)\n \t_M_i = __v;\n@@ -111,8 +115,8 @@ namespace __atomic2\n     void*\n     load(memory_order __m = memory_order_seq_cst) const volatile\n     {\n-      __glibcxx_assert(__m == memory_order_release);\n-      __glibcxx_assert(__m == memory_order_acq_rel);\n+      __glibcxx_assert(__m != memory_order_release);\n+      __glibcxx_assert(__m != memory_order_acq_rel);\n \n       __sync_synchronize();\n       void* __ret = _M_i;\n@@ -144,8 +148,8 @@ namespace __atomic2\n     compare_exchange_strong(void*& __v1, void* __v2, memory_order __m1,\n \t\t\t    memory_order __m2) volatile\n     {\n-      __glibcxx_assert(__m2 == memory_order_release);\n-      __glibcxx_assert(__m2 == memory_order_acq_rel);\n+      __glibcxx_assert(__m2 != memory_order_release);\n+      __glibcxx_assert(__m2 != memory_order_acq_rel);\n       __glibcxx_assert(__m2 <= __m1);\n \n       void* __v1o = __v1;\n@@ -284,9 +288,9 @@ namespace __atomic2\n       store(__integral_type __i,\n \t    memory_order __m = memory_order_seq_cst) volatile\n       {\n-\t__glibcxx_assert(__m == memory_order_acquire);\n-\t__glibcxx_assert(__m == memory_order_acq_rel);\n-\t__glibcxx_assert(__m == memory_order_consume);\n+\t__glibcxx_assert(__m != memory_order_acquire);\n+\t__glibcxx_assert(__m != memory_order_acq_rel);\n+\t__glibcxx_assert(__m != memory_order_consume);\n \n \tif (__m == memory_order_relaxed)\n \t  _M_i = __i;\n@@ -302,8 +306,8 @@ namespace __atomic2\n       __integral_type\n       load(memory_order __m = memory_order_seq_cst) const volatile\n       {\n-\t__glibcxx_assert(__m == memory_order_release);\n-\t__glibcxx_assert(__m == memory_order_acq_rel);\n+\t__glibcxx_assert(__m != memory_order_release);\n+\t__glibcxx_assert(__m != memory_order_acq_rel);\n \n \t__sync_synchronize();\n \t__integral_type __ret = _M_i;\n@@ -336,8 +340,8 @@ namespace __atomic2\n       compare_exchange_strong(__integral_type& __i1, __integral_type __i2,\n \t\t\t      memory_order __m1, memory_order __m2) volatile\n       {\n-\t__glibcxx_assert(__m2 == memory_order_release);\n-\t__glibcxx_assert(__m2 == memory_order_acq_rel);\n+\t__glibcxx_assert(__m2 != memory_order_release);\n+\t__glibcxx_assert(__m2 != memory_order_acq_rel);\n \t__glibcxx_assert(__m2 <= __m1);\n \n \t__integral_type __i1o = __i1;"}]}