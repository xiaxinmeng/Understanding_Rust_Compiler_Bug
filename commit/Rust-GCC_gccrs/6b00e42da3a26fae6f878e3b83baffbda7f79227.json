{"sha": "6b00e42da3a26fae6f878e3b83baffbda7f79227", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIwMGU0MmRhM2EyNmZhZTZmODc4ZTNiODNiYWZmYmRhN2Y3OTIyNw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-08-21T01:15:33Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-08-21T01:15:33Z"}, "message": "add default for CONSTANT_ALIGNMENT\n\ngcc/ChangeLog:\n\n2015-08-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* defaults.h (CONSTANT_ALIGNMENT): New macro definition.\n\t* builtins.c (get_object_alignment_2): Adjust.\n\t* varasm.c (align_variable): Likewise.\n\t(get_variable_align): Likewise.\n\t(build_constant_desc): Likewise.\n\t(force_const_mem): Likewise.\n\t* doc/tm.texi.in: Likewise.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r227052", "tree": {"sha": "622d454a1868dda05940920cea5067868cc30c82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/622d454a1868dda05940920cea5067868cc30c82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b00e42da3a26fae6f878e3b83baffbda7f79227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b00e42da3a26fae6f878e3b83baffbda7f79227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b00e42da3a26fae6f878e3b83baffbda7f79227", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b00e42da3a26fae6f878e3b83baffbda7f79227/comments", "author": null, "committer": null, "parents": [{"sha": "70b0dcce28f993b2d6fcf7851bc8aadc7b60c38d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b0dcce28f993b2d6fcf7851bc8aadc7b60c38d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b0dcce28f993b2d6fcf7851bc8aadc7b60c38d"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "20638852b9f78552d576e0ce001073e7815891c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b00e42da3a26fae6f878e3b83baffbda7f79227", "patch": "@@ -1,3 +1,14 @@\n+2015-08-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* defaults.h (CONSTANT_ALIGNMENT): New macro definition.\n+\t* builtins.c (get_object_alignment_2): Adjust.\n+\t* varasm.c (align_variable): Likewise.\n+\t(get_variable_align): Likewise.\n+\t(build_constant_desc): Likewise.\n+\t(force_const_mem): Likewise.\n+\t* doc/tm.texi.in: Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\n 2015-08-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* genconfig.c (main): Always define HAVE_cc0."}, {"sha": "635ba54413367d25c3900f7df6ee1c2a3c00be6a", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6b00e42da3a26fae6f878e3b83baffbda7f79227", "patch": "@@ -314,10 +314,9 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n       /* The alignment of a CONST_DECL is determined by its initializer.  */\n       exp = DECL_INITIAL (exp);\n       align = TYPE_ALIGN (TREE_TYPE (exp));\n-#ifdef CONSTANT_ALIGNMENT\n       if (CONSTANT_CLASS_P (exp))\n \talign = (unsigned) CONSTANT_ALIGNMENT (exp, align);\n-#endif\n+\n       known_alignment = true;\n     }\n   else if (DECL_P (exp))\n@@ -393,10 +392,9 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n       /* STRING_CST are the only constant objects we allow to be not\n          wrapped inside a CONST_DECL.  */\n       align = TYPE_ALIGN (TREE_TYPE (exp));\n-#ifdef CONSTANT_ALIGNMENT\n       if (CONSTANT_CLASS_P (exp))\n \talign = (unsigned) CONSTANT_ALIGNMENT (exp, align);\n-#endif\n+\n       known_alignment = true;\n     }\n "}, {"sha": "d4d3a565c17314bcdba5c12b9b892b9bb09975e2", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=6b00e42da3a26fae6f878e3b83baffbda7f79227", "patch": "@@ -1273,6 +1273,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define WORD_REGISTER_OPERATIONS 0\n #endif\n \n+#ifndef CONSTANT_ALIGNMENT\n+#define CONSTANT_ALIGNMENT(EXP, ALIGN) ALIGN\n+#endif\n+\n #ifdef GCC_INSN_FLAGS_H\n /* Dependent default target macro definitions\n "}, {"sha": "f5a1f84793e50e3e38528047111fd696a462b56f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6b00e42da3a26fae6f878e3b83baffbda7f79227", "patch": "@@ -1098,7 +1098,7 @@ that is being placed in memory.  @var{constant} is the constant and\n have.  The value of this macro is used instead of that alignment to\n align the object.\n \n-If this macro is not defined, then @var{basic-align} is used.\n+The default definition just returns @var{basic-align}.\n \n The typical use of this macro is to increase alignment for string\n constants to be word aligned so that @code{strcpy} calls that copy"}, {"sha": "9d5ac0a10e49444d24459b23834b59626036561c", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=6b00e42da3a26fae6f878e3b83baffbda7f79227", "patch": "@@ -1048,7 +1048,7 @@ that is being placed in memory.  @var{constant} is the constant and\n have.  The value of this macro is used instead of that alignment to\n align the object.\n \n-If this macro is not defined, then @var{basic-align} is used.\n+The default definition just returns @var{basic-align}.\n \n The typical use of this macro is to increase alignment for string\n constants to be word aligned so that @code{strcpy} calls that copy"}, {"sha": "7fa2e7be8e41f91358a548675fdf35d8c83011e7", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b00e42da3a26fae6f878e3b83baffbda7f79227/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6b00e42da3a26fae6f878e3b83baffbda7f79227", "patch": "@@ -1043,7 +1043,6 @@ align_variable (tree decl, bool dont_output_data)\n \t  if (! DECL_THREAD_LOCAL_P (decl) || data_align <= BITS_PER_WORD)\n \t    align = data_align;\n #endif\n-#ifdef CONSTANT_ALIGNMENT\n \t  if (DECL_INITIAL (decl) != 0\n \t      /* In LTO we have no errors in program; error_mark_node is used\n \t\t to mark offlined constructors.  */\n@@ -1056,7 +1055,6 @@ align_variable (tree decl, bool dont_output_data)\n \t      if (! DECL_THREAD_LOCAL_P (decl) || const_align <= BITS_PER_WORD)\n \t\talign = const_align;\n \t    }\n-#endif\n \t}\n     }\n \n@@ -1097,7 +1095,6 @@ get_variable_align (tree decl)\n       if (! DECL_THREAD_LOCAL_P (decl) || data_align <= BITS_PER_WORD)\n \talign = data_align;\n #endif\n-#ifdef CONSTANT_ALIGNMENT\n       if (DECL_INITIAL (decl) != 0\n \t  /* In LTO we have no errors in program; error_mark_node is used\n \t     to mark offlined constructors.  */\n@@ -1110,7 +1107,6 @@ get_variable_align (tree decl)\n \t  if (! DECL_THREAD_LOCAL_P (decl) || const_align <= BITS_PER_WORD)\n \t    align = const_align;\n \t}\n-#endif\n     }\n \n   return align;\n@@ -3286,9 +3282,7 @@ build_constant_desc (tree exp)\n      architectures so use DATA_ALIGNMENT as well, except for strings.  */\n   if (TREE_CODE (exp) == STRING_CST)\n     {\n-#ifdef CONSTANT_ALIGNMENT\n       DECL_ALIGN (decl) = CONSTANT_ALIGNMENT (exp, DECL_ALIGN (decl));\n-#endif\n     }\n   else\n     align_variable (decl, 0);\n@@ -3743,13 +3737,10 @@ force_const_mem (machine_mode mode, rtx x)\n \n   /* Align the location counter as required by EXP's data type.  */\n   align = GET_MODE_ALIGNMENT (mode == VOIDmode ? word_mode : mode);\n-#ifdef CONSTANT_ALIGNMENT\n-  {\n-    tree type = lang_hooks.types.type_for_mode (mode, 0);\n-    if (type != NULL_TREE)\n-      align = CONSTANT_ALIGNMENT (make_tree (type, x), align);\n-  }\n-#endif\n+\n+  tree type = lang_hooks.types.type_for_mode (mode, 0);\n+  if (type != NULL_TREE)\n+    align = CONSTANT_ALIGNMENT (make_tree (type, x), align);\n \n   pool->offset += (align / BITS_PER_UNIT) - 1;\n   pool->offset &= ~ ((align / BITS_PER_UNIT) - 1);"}]}