{"sha": "76b308af7e69f5b50fee96ba4b3584935e621259", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZiMzA4YWY3ZTY5ZjViNTBmZWU5NmJhNGIzNTg0OTM1ZTYyMTI1OQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-19T14:47:01Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-20T10:02:14Z"}, "message": "ComparisonExprs and LazyBoolExprs are bools\n\nThis fixes the expression type resolution to coerce these into bools. For\nLazyBoolExprs && and || the lhs and rhs are bools.", "tree": {"sha": "2c98289d813b6fc133c989ae2e0de6b7a25348f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c98289d813b6fc133c989ae2e0de6b7a25348f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76b308af7e69f5b50fee96ba4b3584935e621259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b308af7e69f5b50fee96ba4b3584935e621259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76b308af7e69f5b50fee96ba4b3584935e621259", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b308af7e69f5b50fee96ba4b3584935e621259/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23edde6fef4321d30f9f2f8c75e6cbfd59b75ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23edde6fef4321d30f9f2f8c75e6cbfd59b75ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23edde6fef4321d30f9f2f8c75e6cbfd59b75ca4"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "c47e0ec8d47c15da42ba5eb285238f4b78f19b8f", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b308af7e69f5b50fee96ba4b3584935e621259/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b308af7e69f5b50fee96ba4b3584935e621259/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=76b308af7e69f5b50fee96ba4b3584935e621259", "patch": "@@ -376,16 +376,31 @@ class TypeCheckExpr : public TypeCheckBase\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n \n-    infered = lhs->combine (rhs);\n+    auto result = lhs->combine (rhs);\n+    if (result == nullptr || result->get_kind () == TyTy::TypeKind::ERROR)\n+      return;\n+\n+    // we expect this to be\n+    infered = new TyTy::BoolType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::LazyBooleanExpr &expr)\n   {\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n \n+    // we expect the lhs and rhs must be bools at this point\n+    TyTy::BoolType elhs (expr.get_mappings ().get_hirid ());\n+    lhs = elhs.combine (lhs);\n+    if (lhs == nullptr || lhs->get_kind () == TyTy::TypeKind::ERROR)\n+      return;\n+\n+    TyTy::BoolType rlhs (expr.get_mappings ().get_hirid ());\n+    rhs = elhs.combine (rhs);\n+    if (lhs == nullptr || lhs->get_kind () == TyTy::TypeKind::ERROR)\n+      return;\n+\n     infered = lhs->combine (rhs);\n-    // FIXME this will need to turn into bool\n   }\n \n   void visit (HIR::IfExpr &expr)"}, {"sha": "d3c5263854d52c6fd37fae36ca847023cc40ea5f", "filename": "gcc/testsuite/rust.test/compilable/comparison_expr1.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b308af7e69f5b50fee96ba4b3584935e621259/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fcomparison_expr1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b308af7e69f5b50fee96ba4b3584935e621259/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fcomparison_expr1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fcomparison_expr1.rs?ref=76b308af7e69f5b50fee96ba4b3584935e621259", "patch": "@@ -0,0 +1,34 @@\n+fn is_zero(x: i32) -> bool {\n+    x == 0\n+}\n+\n+fn is_not_zero(x: i32) -> bool {\n+    x != 0\n+}\n+\n+fn is_positive(x: i32) -> bool {\n+    x > 0\n+}\n+\n+fn is_negative(x: i32) -> bool {\n+    x < 0\n+}\n+\n+fn is_positive_or_zero(x: i32) -> bool {\n+    x >= 0\n+}\n+\n+fn is_negative_or_zero(x: i32) -> bool {\n+    x <= 0\n+}\n+\n+fn main() {\n+    let a: bool = is_zero(1);\n+    let b: bool = is_not_zero(2);\n+    let c: bool = is_positive(3);\n+    let d: bool = is_negative(4);\n+    let e: bool = is_positive_or_zero(5);\n+    let f: bool = is_negative_or_zero(6);\n+    let g: bool = a || b;\n+    let h: bool = c && d;\n+}"}]}