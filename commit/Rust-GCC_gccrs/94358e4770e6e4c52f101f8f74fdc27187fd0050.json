{"sha": "94358e4770e6e4c52f101f8f74fdc27187fd0050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzNThlNDc3MGU2ZTRjNTJmMTAxZjhmNzRmZGMyNzE4N2ZkMDA1MA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-01T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-01T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "59e19112d4962687ef25c9cee8492e055113bc69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59e19112d4962687ef25c9cee8492e055113bc69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94358e4770e6e4c52f101f8f74fdc27187fd0050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94358e4770e6e4c52f101f8f74fdc27187fd0050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94358e4770e6e4c52f101f8f74fdc27187fd0050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94358e4770e6e4c52f101f8f74fdc27187fd0050/comments", "author": null, "committer": null, "parents": [{"sha": "c1c6750f8d3d88708e4fe9994124e7afa089d939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c6750f8d3d88708e4fe9994124e7afa089d939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c6750f8d3d88708e4fe9994124e7afa089d939"}], "stats": {"total": 676, "additions": 675, "deletions": 1}, "files": [{"sha": "431753d85f6570ba530584b48d3497ecca5c36cd", "filename": "contrib/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94358e4770e6e4c52f101f8f74fdc27187fd0050/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94358e4770e6e4c52f101f8f74fdc27187fd0050/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=94358e4770e6e4c52f101f8f74fdc27187fd0050", "patch": "@@ -1,3 +1,25 @@\n+2020-11-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Suggest close file for\n+\t'unchanged file mentioned in a ChangeLog' error.\n+\t* gcc-changelog/test_email.py: Test it.\n+\n+2020-11-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Allow sub-directory wildcard\n+\tchangelog entry. Fix a typo caused by apostrophe escaping.\n+\t* gcc-changelog/test_email.py: Test it.\n+\t* gcc-changelog/test_patches.txt: Likewise.\n+\n+2020-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* gcc-changelog/git_commit.py (wildcard_prefixes): Add libstdc++\n+\ttestsuite directory.\n+\n+2020-11-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Allow wildcard pattern only.\n+\n 2020-11-27  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Use regex for cherry pick prefix."}, {"sha": "539130d2132b8ddd42d711d80d2bf0f0768e72c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94358e4770e6e4c52f101f8f74fdc27187fd0050", "patch": "@@ -1,3 +1,114 @@\n+2020-11-30  Jeff Law  <law@redhat.com>\n+\n+\t* symtab.c (set_section_for_node): Add function comment.\n+\t(set_section_from_node): Likewise.\n+\n+2020-11-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/plugins.texi (Plugin callbacks): Add PLUGIN_ANALYZER_INIT.\n+\t* plugin.c (register_callback): Likewise.\n+\t(invoke_plugin_callbacks_full): Likewise.\n+\t* plugin.def (PLUGIN_ANALYZER_INIT): New event.\n+\n+2020-11-30  Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/bitfield.md: Remove \"cc\" attribute on any\n+\tinsns where it remained.\n+\t* config/h8300/combiner.md: Likewise.\n+\t* config/h8300/jumpcall.md: Likewise.\n+\t* config/h8300/logical.md: Likewise.\n+\t* config/h8300/testcompare.md: Likewise.\n+\t* config/h8300/h8300.md (old_cc attr): Renamed from cc attr.\n+\t* config/h8300/h8300.c (notice_update_cc): Remove.\n+\t(compute_plussi_cc): Change references to CC_* to OLD_CC_.\n+\t(compute_logical_op_cc): Likewise.\n+\t(shift_one, shift_two): Likewise.\n+\t(compute_a_shift_cc): Likewise.\n+\t(get_shift_alg): Likewise.\n+\t(struct shift_insn): Change type of cc_valid field.\n+\t(struct shift_info): Likewise.\n+\t* config/h8300/save.md: Remove accidentially created file.\n+\n+2020-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/98037\n+\t* dse.c (find_shift_sequence): Iterate over all integers and\n+\tskip modes that are too small.\n+\n+2020-11-30  Eugene Rozenfeld  <Eugene.Rozenfeld@microsoft.com>\n+\n+\tPR tree-optimization/96679\n+\t* match.pd (((b | c) & a) | b -> (a & c) | b): New pattern.\n+\n+2020-11-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* passes.c (emergency_dump_function): Dump symtab when\n+\twe are in an IPA pass.\n+\n+2020-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98064\n+\t* tree-vect-loop.c (vectorizable_live_operation): Avoid\n+\tbreaking LC SSA for BB vectorization.\n+\n+2020-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/sourcebuild.texi (Directives): Fix description of\n+\tdg-require-effective-target to include \"target\" in selector.\n+\n+2020-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98048\n+\t* tree-vect-generic.c (expand_vector_operations_1): Use the\n+\tcorrect type for the scalar LHS replacement.\n+\n+2020-11-30  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/98066\n+\t* gimple-isel.cc (gimple_expand_vec_exprs): Return when\n+\tgimple_expand_vec_exprs replaces last stmt.\n+\n+2020-11-30  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* cfgrtl.c (rtl_bb_info_initialized_p): New function.\n+\t(rtl_dump_bb): Use rtl_bb_info_initialized_p before accessing bb\n+\tinsns.\n+\n+2020-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/87818\n+\t* config.gcc (*-*-freebsd*): Add freebsd-d.o and t-freebsd.\n+\t* config/freebsd-d.c: New file.\n+\t* config/t-freebsd: New file.\n+\n+2020-11-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/97459\n+\t* internal-fn.h (expand_addsub_overflow): Declare.\n+\t* internal-fn.c (expand_addsub_overflow): No longer static.\n+\t* optabs.c (expand_doubleword_mod): New function.\n+\t(expand_binop): Optimize double-word mod with constant divisor.\n+\n+2020-11-30  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config.gcc (riscv*-*-*): Add TARGET_RISCV_DEFAULT_ABI and\n+\tTARGET_RISCV_DEFAULT_ARCH to tm_defines.\n+\tRemove including riscv/withmultilib.h for --with-multilib-list.\n+\t* config/riscv/riscv.h (STRINGIZING): New.\n+\t(__STRINGIZING): Ditto.\n+\t(MULTILIB_DEFAULTS): Ditto.\n+\t* config/riscv/withmultilib.h: Remove.\n+\n+2020-11-30  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.c (print_multilib_info): Check default arguments not\n+\tappeared in multi-lib option list with '!'\n+\n+2020-11-30  Jeff Law  <law@redhat.com>\n+\n+\t* config/ft32/ft32.md (umulsidi3): Do not allow constants as\n+\targuments.\n+\n 2020-11-29  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-modref.c (ipa_merge_modref_summary_after_inlining): Fix"}, {"sha": "91326ab1d8fdbb4b2cf02574a80abb479e7e361d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=94358e4770e6e4c52f101f8f74fdc27187fd0050", "patch": "@@ -1 +1 @@\n-20201130\n+20201201"}, {"sha": "5631a0100ffc351290c9bd601f994373efe0cb4f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 417, "deletions": 0, "changes": 417, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=94358e4770e6e4c52f101f8f74fdc27187fd0050", "patch": "@@ -1,3 +1,420 @@\n+2020-11-30  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* libgnat/s-trasym.ads: Update the list of supported platforms.\n+\n+2020-11-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gcc-interface/Makefile.in, gcc-interface/trans.c: Remove ^L\n+\tcharacters.\n+\n+2020-11-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gcc-interface/Makefile.in (GNATLIBFLAGS): Enable checks by\n+\tdefault.\n+\t* libgnat/s-bitfie.ads: Suppress alignment checks.\n+\t* libgnat/s-bituti.adb: Minor reformatting.\n+\t* libgnat/s-secsta.adb (SS_Allocate): Support Size = 0.\n+\n+2020-11-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch3.adb (Replace_Discr_Ref): Removed, no longer needed.\n+\n+2020-11-30  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Process_Statements): Replace low-level membership\n+\ttest with a high-level wrapper.\n+\n+2020-11-30  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Set_Assignment_Type): Combine calls to Ekind\n+\tusing membership test.\n+\t(Should_Transform_BIP_Assignment): Replace assignment to a\n+\t\"Result\" variable with simple return statements; avoid repeated\n+\tcalls to Unqual_Conv by declaring a local constant.\n+\n+2020-11-30  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): Fix reference to\n+\tAnalyze_Assignment.\n+\t* sem_ch5.adb (Diagnose_Non_Variable_Lhs): Reuse existing\n+\tutility function.\n+\n+2020-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* contracts.adb (Check_Type_Or_Object_External_Properties): Make\n+\tsure to exclude all return objects from the SPARK legality rule\n+\ton effectively volatile variables.\n+\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Use the fast\n+\ttrack only when the declaration of the return object can be\n+\tdropped.\n+\n+2020-11-30  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* einfo.ads (Is_Partial_DIC_Procedure): New function.\n+\t(Partial_DIC_Procedure): New procedure.\n+\t* einfo.adb (Is_Partial_DIC_Procedure): New function to return\n+\twhether a subprogram is a partial Default_Initial_Condition\n+\tprocedure by checking the name (to avoid adding a new field).\n+\t(DIC_Procedure): Add a test that excludes partial DIC procedures\n+\tfrom being returned.\n+\t(Partial_DIC_Procedure): New procedure to return the partial DIC\n+\tprocedure of a type, if it has one (otherwise returns Empty).\n+\t(Set_DIC_Procedure): Remove check for duplicate DIC procedures.\n+\t* exp_aggr.adb (Gen_Assign): Generate a call to the type's DIC\n+\tprocedure in the case where an array component is default\n+\tinitialized (due to an association with a box).\n+\t(Build_Record_Aggr_Code): For an extension aggregate, generate a\n+\tcall to the ancestor type's DIC procedure (if any) when the\n+\tancestor part is a subtype mark. For a record component\n+\tassociation that was specified with a box (tested for by\n+\tchecking the new flag Was_Default_Init_Box_Association),\n+\tgenerate a call to the component type's DIC procedure (if it has\n+\tone).\n+\t* exp_ch4.adb (Expand_N_Allocator): When the allocated object is\n+\tdefault initialized and the designated type has a DIC aspect,\n+\tgenerate a call to the DIC procedure.\n+\t* exp_util.ads (Build_DIC_Call): Change the formal Obj_Id to\n+\tname Obj_Name, and change its type from Entity_Id to Node_Id\n+\t(and update comment).\n+\t(Build_DIC_Procedure_Body): Add formal Partial_DIC, remove\n+\tformal For_Freeze, and update comment accordingly.\n+\t(Build_DIC_Procedure_Declaration): Add formal Partial_DIC and\n+\tupdate comment.\n+\t* exp_util.adb\n+\t(Build_DIC_Call): Revised to use its Obj_Name (formerly Obj_Id)\n+\tformal directly rather than calling New_Occurrence_Of on it, to\n+\tallow arbitrary names to be passed rather than being limited to\n+\tEntity_Ids.\n+\t(Build_DIC_Procedure_Body): Call Add_Parent_DICs to generate\n+\tchecks for DICs associated with any parent types, implementing\n+\tthe required \"additive\" semantics for DICs. When building a DIC\n+\tprocedure body for a partial view (when Partial_DIC is True),\n+\tcall Add_Own_DIC when the type has its own DIC.  In the case of\n+\t\"full\" DIC procedures, a call is generated to any partial DIC\n+\tprocedure of the type (unless the procedure has a null body),\n+\talong with checks for any DICs inherited by the full view.\n+\t(Build_DIC_Procedure_Declaration): Add handling for partial DIC\n+\tprocedures.  For the suffix of a regular DIC procedure's name,\n+\tuse \"DIC\" (instead of \"Default_Initial_Condition\"), and for the\n+\tsuffix of a partial DIC procedure's name, use \"Partial_DIC\".\n+\t(Add_DIC_Check): Add the DIC pragma to the list of seen pragmas\n+\t(Pragmas_Seen).\n+\t(Add_Inherited_Tagged_DIC): Remove the formals Par_Typ,\n+\tDeriv_Typ, and Obj_Id, and add formal Expr, which denotes DIC's\n+\texpression. Remove the call to Replace_References (which is now\n+\tdone in Add_Inherited_DICs).\n+\t(Add_Inherited_DICs): New procedure to locate a DIC pragma\n+\tassociated with a parent type, replace its references\n+\tappropriately (such as any current instance references), and add\n+\ta check for the DIC.\n+\t(Add_Own_DIC): Add an Obj_Id formal to allow caller to pass the\n+\t_init formal of the generated DIC procedure.\n+\t(Add_Parent_DICs): New procedure to traverse a type's parents,\n+\tlooking for DICs associated with those and calling\n+\tAdd_Inherited_DICs to apply the appropriate DIC checks.\n+\t(Is_Verifiable_DIC_Pragma): Treat pragmas that have an Empty\n+\tfirst argument the same as a pragma without any arguments\n+\t(returning False for that case).\n+\t* exp_ch3.adb (Init_One_Dimension): Generate calls to the\n+\tcomponent's DIC procedure when needed.\n+\t(Possible_DIC_Call): New function nested in Init_One_Dimension\n+\tto build a call to the array component type's DIC-checking\n+\tfunction when appropriate.\n+\t(Build_Array_Init_Proc): The presence of a DIC on the component\n+\ttype is an additional condition for generating an init proc for\n+\tan array type.\n+\t(Build_Init_Statements): When the record component's type has a\n+\tDIC, and the component declaration does not have an\n+\tinitialization expression, generate a call to the component\n+\ttype's DIC procedure.\n+\t(Expand_N_Object_Declaration): Modify the call to Build_DIC_Call\n+\tto pass a new occurrence of the object's defining id rather than\n+\tthe id itself.\n+\t(Freeze_Type): Only build a type's DIC procedure (if it has one)\n+\tfor types that are not interfaces.\n+\t* exp_spark.adb (Expand_SPARK_N_Freeze_Type): Remove From_Freeze\n+\tactual and add a ??? comment.\n+\t(Expand_SPARK_N_Object_Declaration): Modify call to\n+\tBuild_DIC_Call to pass a new occurrence of the object id rather\n+\tthan the object id itself.\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): Declare local flag\n+\tIs_Box_Init_By_Default and set it in cases where the component\n+\tassociation has a box and the component is being initialized by\n+\tdefault (as opposed to initialized by an initialization\n+\texpression associated with the component's declaration).\n+\t(Add_Association): If the association has a box for a component\n+\tinitialized by default, the flag\n+\tWas_Default_Init_Box_Association is set on the new component\n+\tassociation (for later testing during expansion).\n+\t(Get_Value): Reset Is_Box_Init_By_Default to False.\n+\t* sem_ch3.adb (Build_Assertion_Bodies_For_Type): Rearrange code\n+\tto build DIC procedure bodies for a (noninterface) type that\n+\tHas_Own_DIC (for partial type views) or Has_DIC (for full type\n+\tviews) as appropriate.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications,\n+\tAspect_Default_Initial_Condition): Add an extra argument to the\n+\tDIC pragma to denote the type associated with the pragma (for\n+\tuse in Build_DIC_Procedure_Body).\n+\t* sem_prag.adb (Analyze_Pragma): Allow two arguments for pragma\n+\tDefault_Initial_Condition.  If not already present, add an extra\n+\targument denoting the type that the pragma is associated with.\n+\t* sem_util.adb (Propagate_DIC_Attributes): Retrieve any partial\n+\tDIC procedure associated with the type and add it to the type's\n+\tlist of subprograms (Subprograms_For_Type).\n+\t* sinfo.ads (Was_Default_Init_Box_Association): New flag on\n+\tN_Component_Association nodes.  Add subprograms to get and set\n+\tflag, as well as updating the documentation.\n+\t* sinfo.adb (Was_Default_Init_Box_Association): New function to\n+\tretrieve the corresponding flag (Flag14).\n+\t(Set_Was_Default_Init_Box_Association): New procedure to set the\n+\tcorresponding flag (Flag14).\n+\n+2020-11-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* par-ch6.adb (P_Formal_Part): Remove extra call to Scan.\n+\t* par-tchk.adb: Minor reformatting.\n+\n+2020-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-nbnbre.adb (Float_Conversions): Instantiate Conv\n+\tpackage only once in the body.\n+\t(Fixed_Conversions.Float_Aux): New instance.\n+\t(Fixed_Conversions.Conv_I): Likewise.\n+\t(Fixed_Conversions.Conv_U): Likewise.\n+\t(Fixed_Conversions.LLLI): New subtype.\n+\t(Fixed_Conversions.LLLU): Likewise.\n+\t(Fixed_Conversions.Too_Large): New constant.\n+\t(Fixed_Conversions.To_Big_Real): Reimplement.\n+\t(Fixed_Conversions.From_Big_Real): Likewise.\n+\n+2020-11-30  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Avoid crash in case\n+\tof conditional expression.\n+\n+2020-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst (Pool_Address):\n+\tFix pasto.\n+\t(Small_Denominator): New entry.\n+\t(Small_Numerator): Likewise.\n+\t* doc/gnat_rm/implementation_defined_characteristics.rst (3.5.9):\n+\tRelax conditions on 128-bit smalls and integer-only implementation.\n+\t* gnat_rm.texi: Regenerate.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_Fore>:\n+\tRelax conditions on integer implementation for ordinary fixed-point\n+\ttypes and pass a third parameter to the routine.\n+\t<Attribute_Small_Denominator>: Raise Program_Error.\n+\t<Attribute_Small_Numerator>: Likewise.\n+\t* exp_fixd.adb (Expand_Convert_Fixed_To_Fixed): Use a scaled divide\n+\tif the numerator and denominator of the small ratio are sufficiently\n+\tsmall integers.\n+\t(Expand_Convert_Fixed_To_Integer): Use a scaled divide if numerator\n+\tand denominator of the small value are sufficiently small integers.\n+\t(Expand_Convert_Integer_To_Fixed): Likewise.\n+\t* exp_imgv.adb (Expand_Image_Attribute): Relax the conditions on the\n+\tinteger implementation for ordinary fixed-point types.\n+\t(Expand_Value_Attribute): Likewise.\n+\t* freeze.adb (Freeze_Fixed_Point_Type): Relax conditions on 128-bit\n+\tsmalls.\n+\t* sem_attr.adb (Analyze_Attribute) <Attribute_Small_Denominator>:\n+\tCheck no arguments, fixed-point and set type to Universal_Integer.\n+\t<Attribute_Small_Numerator>: Likewise.\n+\t(Eval_Attribute) <Attribute_Small_Denominator>: Fold statically.\n+\t<Attribute_Small_Numerator>: Likewise.\n+\t* snames.ads-tmpl (Name_Small_Denominator): New attribute name.\n+\t(Name_Small_Numerator): Likewise.\n+\t(Attribute_Id): Add Attribute_Small_{Denominator,Numerator}.\n+\t* libgnat/a-tifiio.adb (Exact): Delete.\n+\t(Need_64): Likewise.\n+\t(OK_Get_32): New boolean constant.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise.\n+\t(E): Adjust.\n+\t(Get procedures): Likewise.\n+\t(Put procedures): Likewise.\n+\t* libgnat/a-tifiio__128.adb (Exact): Delete.\n+\t(Need_64): Likewise.\n+\t(Need_128): Likewise.\n+\t(OK_Get_32): New boolean constant.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise.\n+\t(OK_Get_128): Likewise.\n+\t(OK_Put_128): Likewise.\n+\t(E): Adjust.\n+\t(Get procedures): Likewise.\n+\t(Put procedures): Likewise.\n+\t* libgnat/a-wtfiio.adb (Exact): Delete.\n+\t(Need_64): Likewise.\n+\t(OK_Get_32): New boolean constant.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise.\n+\t(E): Adjust.\n+\t(Get procedures): Likewise.\n+\t(Put procedures): Likewise.\n+\t* libgnat/a-wtfiio__128.adb (Exact): Delete.\n+\t(Need_64): Likewise.\n+\t(Need_128): Likewise.\n+\t(OK_Get_32): New boolean constant.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise.\n+\t(OK_Get_128): Likewise.\n+\t(OK_Put_128): Likewise.\n+\t(E): Adjust.\n+\t(Get procedures): Likewise.\n+\t(Put procedures): Likewise.\n+\t* libgnat/a-ztfiio.adb (Exact): Delete.\n+\t(Need_64): Likewise.\n+\t(OK_Get_32): New boolean constant.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise.\n+\t(E): Adjust.\n+\t(Get procedures): Likewise.\n+\t(Put procedures): Likewise.\n+\t* libgnat/a-ztfiio__128.adb (Exact): Delete.\n+\t(Need_64): Likewise.\n+\t(Need_128): Likewise.\n+\t(OK_Get_32): New boolean constant.\n+\t(OK_Put_32): Likewise.\n+\t(OK_Get_64): Likewise.\n+\t(OK_Put_64): Likewise.\n+\t(OK_Get_128): Likewise.\n+\t(OK_Put_128): Likewise.\n+\t(E): Adjust.\n+\t(Get procedures): Likewise.\n+\t(Put procedures): Likewise.\n+\t* libgnat/s-fore_f.ads (Fore_Fixed): Adjust signature.\n+\t* libgnat/s-fore_f.adb (Fore_Fixed): Reimplement.\n+\t* libgnat/s-fofi32.ads (Fore_Fixed32): Adjust signature.\n+\t* libgnat/s-fofi64.ads (Fore_Fixed64): Likewise.\n+\t* libgnat/s-fofi128.ads (Fore_Fixed128): Likewise.\n+\t* libgnat/s-imagef.ads: Adjust description.\n+\t* libgnat/s-imagef.adb (Maxdigs): Move around.\n+\t(Set_Image_Integer): Remove assertion.\n+\t* libgnat/s-valuef.ads: Adjust description.\n+\t* libgnat/s-valuef.adb (Integer_To_Fixed): Minor tweak.\n+\n+2020-11-30  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tDescribe -gnateb switch.\n+\t* doc/gnat_ugn/the_gnat_compilation_model.rst: Mention -gnateb\n+\tswitch in configuration pragma files section.\n+\t* gnat_ugn.texi: Regenerate.\n+\t* lib-writ.adb (Write_ALI): Strip directories from configuration\n+\tfiles path if needed.\n+\t* opt.ads: Declare Config_Files_Store_Basename option.\n+\t* par.adb (Par): Save configuration file checksum.\n+\t* switch-c.adb (Scan_Front_End_Switches): Set\n+\tConfig_Files_Store_Basename true if -gnateb is present.\n+\n+2020-11-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_dist.adb (RCI_Cache): Initialize.\n+\n+2020-11-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* terminals.c (allocate_pty_desc): Copy one less byte since the\n+\tlast byte will always be set to 0.\n+\n+2020-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst (-xdr):\n+\tDocument that XDR is not supported for 128-bit integer types.\n+\t* gnat_ugn.texi: Regenerate.\n+\t* exp_strm.adb (Build_Elementary_Input_Call): Deal with types\n+\tlarger than Long_Long_Integer.\n+\t(Build_Elementary_Write_Call): Likewise.\n+\t* rtsfind.ads (RE_Id): Add RE_I_LLL{I,U] and RE_W_LLL{I,U}.\n+\t(RE_Unit_Table): Add entries for them.\n+\t* libgnat/s-stratt.ads (I_LLLI): New inline function.\n+\t(I_LLLU): Likewise.\n+\t(W_LLLI): New inline procedure.\n+\t(W_LLLU): Likewise.\n+\t* libgnat/s-stratt.adb (S_LLLI): New subtype of SEA.\n+\t(S_LLLU): Likewise.\n+\t(From_LLLI): New instance of Unchecked_Conversion.\n+\t(From_LLLU): Likewise.\n+\t(To_LLLI): Likewise.\n+\t(To_LLLU): Likewise.\n+\t(I_LLLI): Implement.\n+\t(I_LLLU): Likewise.\n+\t(W_LLLI): Likewise.\n+\t(W_LLLU): Likewise.\n+\n+2020-11-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Container): Check the\n+\tsignature of the private operation Get_Element_Access to prevent\n+\taccidental use of a user-defined homonym subprogram.\n+\n+2020-11-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* spark_xrefs.ads: Add comment for Heap that it may remain\n+\tEmpty.\n+\n+2020-11-30  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-sercom__linux.adb (Set): Fix control flags of the\n+\tserial port setting.\n+\n+2020-11-30  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-sercom__linux.adb: Minor style fixes.\n+\n+2020-11-30  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Get_Current_Value_Condition): Don't use current\n+\tvalue tracking in GNATprove mode.\n+\t* sem_res.adb (Resolve_Comparison_Op): Remove incomplete\n+\tspecial-casing for folding in GNATprove mode.\n+\n+2020-11-30  Bob Duff  <duff@adacore.com>\n+\n+\t* errout.adb (Error_Msg_NEL): Do not call Set_Posted if errors\n+\tare being ignored.\n+\t(Error_Msg): Change Errors_Must_Be_Ignored to use the getter.\n+\t* sem_ch8.adb (Find_Direct_Name): Do not skip all the error\n+\tchecks when ignoring errors, but instead do not add an entry to\n+\tthe Urefs table if errors are being ignored.\n+\t* exp_ch5.adb: Minor comment fix.\n+\n+2020-11-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Improve error message.\n+\n+2020-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valuef.adb (Integer_To_Fixed): Do not modify numerator\n+\tor denominator in order to reduce the exponent.\n+\n+2020-11-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* ali-util.adb (Get_File_Checksum): Remove dead code.\n+\t* exp_ch4.adb (Expand_Boolean_Operator, Expand_N_Op_Not,\n+\tMake_Boolean_Array_Op): Take Transform_Function_Array into\n+\taccount.\n+\t* exp_ch6.adb (Expand_Call_Helper): Update comment. Code\n+\tcleanup.\n+\t* exp_util.adb (Build_Procedure_Form): Use new predefined name\n+\tName_UP_RESULT.\n+\t* snames.ads-tmpl (Name_UP_RESULT): New predefined name.  Code\n+\tcleanup: remove unused names from the project parser, moved to\n+\tgprbuild sources.\n+\t* xsnamest.adb: Add support for uppercase names.\n+\n+2020-11-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Enter_Name): When an inherited operation for a\n+\tlocal derived type is hidden by an explicit declaration of a\n+\tnon-overloadable entity in the same scope, make the inherited\n+\toperation non-visible to prevent its accidental use elsewhere.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR ada/97504"}, {"sha": "971ed47a70f4aa47db3f4eb026ac4b7aac63b7c2", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=94358e4770e6e4c52f101f8f74fdc27187fd0050", "patch": "@@ -1,3 +1,30 @@\n+2020-11-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer-pass.cc: Include \"analyzer/analyzer.h\" for the\n+\tdeclaration of sorry_no_analyzer; include \"tree.h\" and\n+\t\"function.h\" as these are needed by it.\n+\n+2020-11-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer-pass.cc (pass_analyzer::execute): Move sorry call to...\n+\t(sorry_no_analyzer): New.\n+\t* analyzer.h (class state_machine): New forward decl.\n+\t(class logger): New forward decl.\n+\t(class plugin_analyzer_init_iface): New.\n+\t(sorry_no_analyzer): New decl.\n+\t* checker-path.cc (checker_path::fixup_locations): New.\n+\t* checker-path.h (checker_event::set_location): New.\n+\t(checker_path::fixup_locations): New decl.\n+\t* diagnostic-manager.cc\n+\t(diagnostic_manager::emit_saved_diagnostic): Call\n+\tchecker_path::fixup_locations, and call fixup_location\n+\ton the primary location.\n+\t* engine.cc: Include \"plugin.h\".\n+\t(class plugin_analyzer_init_impl): New.\n+\t(impl_run_checkers): Invoke PLUGIN_ANALYZER_INIT callbacks.\n+\t* pending-diagnostic.h (pending_diagnostic::fixup_location): New\n+\tvfunc.\n+\n 2020-11-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97893"}, {"sha": "a8e8bbb1dad7e54c52484dcb1621d80d539c02a4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=94358e4770e6e4c52f101f8f74fdc27187fd0050", "patch": "@@ -1,3 +1,22 @@\n+2020-11-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/98011\n+\t* scanner.c (skip_free_comments, skip_fixed_comments): If only\n+\t-fopenacc but not -fopenmp is used, ignore OpenMP's conditional\n+\tcompilation sentinels. Fix indentation, use 'else if' for readability.\n+\n+2020-11-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/98010\n+\tPR fortran/98013\n+\t* options.c (gfc_post_options): Also imply recursive with\n+\t-fopenacc.\n+\t* trans-decl.c (gfc_generate_function_code): Simplify condition.\n+\n+2020-11-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_expr): Use '==' not '=' for '.eq.'.\n+\n 2020-11-29  Harald Anlauf  <anlauf@gmx.de>\n \n \t* expr.c (simplify_parameter_variable): Fix up character length"}, {"sha": "b5652ff7a847ec00e417b56180894d6d742836eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94358e4770e6e4c52f101f8f74fdc27187fd0050/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94358e4770e6e4c52f101f8f74fdc27187fd0050", "patch": "@@ -1,3 +1,54 @@\n+2020-11-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/analyzer_gil_plugin.c: New test.\n+\t* gcc.dg/plugin/gil-1.c: New test.\n+\t* gcc.dg/plugin/gil.h: New header.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the new plugin\n+\tand test.\n+\n+2020-11-30  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* lib/profopt.exp: Unset testname_with_flags if create_gcov\n+\tfails.\n+\n+2020-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/98037\n+\t* gcc.target/aarch64/sve/acle/general/pr98037.c: New test.\n+\n+2020-11-30  Jeff Law  <law@redhat.com>\n+\n+\t* g++.dg/warn/Wnonnull5.C: Fix non-unique testnames.\n+\t* g++.dg/warn/Wplacement-new-size-8.C: Likewise.\n+\n+2020-11-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/98011\n+\t* gfortran.dg/goacc/sentinel-free-form.f95:\n+\t* gfortran.dg/goacc-gomp/fixed-1.f: New test.\n+\t* gfortran.dg/goacc-gomp/free-1.f90: New test.\n+\t* gfortran.dg/goacc/fixed-5.f: New test.\n+\n+2020-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98064\n+\t* g++.dg/vect/pr98064.cc: New testcase.\n+\n+2020-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98048\n+\t* gcc.dg/vect/pr98048.c: New testcase.\n+\n+2020-11-30  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* gcc.target/arm/pr91816.c: New test.\n+\n+2020-11-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/97459\n+\t* gcc.dg/pr97459-1.c: New test.\n+\t* gcc.dg/pr97459-2.c: New test.\n+\n 2020-11-29  Harald Anlauf  <anlauf@gmx.de>\n \n \t* gfortran.dg/pr98017.f90: New test."}, {"sha": "20b77fd2b6c382a37ea1e621988a8902b596521a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94358e4770e6e4c52f101f8f74fdc27187fd0050/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94358e4770e6e4c52f101f8f74fdc27187fd0050/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=94358e4770e6e4c52f101f8f74fdc27187fd0050", "patch": "@@ -1,3 +1,7 @@\n+2020-11-30  Stefan Kanthak  <stefan.kanthak@nexgo.de>\n+\n+\t* libgcc2.c (bswapsi2): Make constants unsigned.\n+\n 2020-11-25  Stefan Kanthak  <stefan.kanthak@nexgo.de>\n \n \t* libgcc2.c (absvSI2): Simplify/improve implementation by using"}, {"sha": "2596478c146f384835ac15d3dea8f36bba79c758", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94358e4770e6e4c52f101f8f74fdc27187fd0050/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94358e4770e6e4c52f101f8f74fdc27187fd0050/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=94358e4770e6e4c52f101f8f74fdc27187fd0050", "patch": "@@ -1,3 +1,9 @@\n+2020-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/87818\n+\t* configure.tgt: Add x86_64-*-freebsd* and i?86-*-freebsd* as\n+\tsupported targets.\n+\n 2020-11-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/98025"}, {"sha": "54d5301bd60f23b0c2f5ab2ef8fbf059ca604d0b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94358e4770e6e4c52f101f8f74fdc27187fd0050/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94358e4770e6e4c52f101f8f74fdc27187fd0050/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=94358e4770e6e4c52f101f8f74fdc27187fd0050", "patch": "@@ -1,3 +1,20 @@\n+2020-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (INPUT): Add <latch> and <semaphore>.\n+\n+2020-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp (libstdc++_init): Reduce\n+\tdefault tool_timeout to 360.\n+\n+2020-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/specialized_algorithms/pstl/*: Add\n+\tdg-timeout-factor.\n+\t* testsuite/25_algorithms/pstl/*: Likewise.\n+\t* testsuite/26_numerics/pstl/*: Likewise.\n+\t* testsuite/28_regex/*: Likewise.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}]}