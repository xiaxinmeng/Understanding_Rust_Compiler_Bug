{"sha": "375550c647d112d5ae064401074507ff14092ddd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1NTUwYzY0N2QxMTJkNWFlMDY0NDAxMDc0NTA3ZmYxNDA5MmRkZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-12-19T19:28:57Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-12-19T19:28:57Z"}, "message": "re PR fortran/64209 ([OOP] runtime segfault with CLASS(*), INTENT(OUT) dummy argument)\n\n2014-12-19  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/64209\n\t* trans-expr.c (gfc_trans_class_array_init_assign): Check if _def_init\n\tcomponent is non-NULL.\n\t(gfc_trans_class_init_assign): Ditto.\n\n2014-12-19  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/64209\n\t* gfortran.dg/unlimited_polymorphic_19.f90: New.\n\nFrom-SVN: r218968", "tree": {"sha": "fe4c60e1b5da3e023b7a86f3e47851150ce8ddf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe4c60e1b5da3e023b7a86f3e47851150ce8ddf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/375550c647d112d5ae064401074507ff14092ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375550c647d112d5ae064401074507ff14092ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375550c647d112d5ae064401074507ff14092ddd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375550c647d112d5ae064401074507ff14092ddd/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a2b7558b37707a17e1f2ba5298f94a88807492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a2b7558b37707a17e1f2ba5298f94a88807492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a2b7558b37707a17e1f2ba5298f94a88807492"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "de2d2a91e2696cb71af1c5c39fd60ddfdc7c5436", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375550c647d112d5ae064401074507ff14092ddd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375550c647d112d5ae064401074507ff14092ddd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=375550c647d112d5ae064401074507ff14092ddd", "patch": "@@ -1,3 +1,10 @@\n+2014-12-19  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/64209\n+\t* trans-expr.c (gfc_trans_class_array_init_assign): Check if _def_init\n+\tcomponent is non-NULL.\n+\t(gfc_trans_class_init_assign): Ditto.\n+\n 2014-12-17  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/64173"}, {"sha": "3793cfb0d92763fee240f5a36e3bab3c535be8da", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375550c647d112d5ae064401074507ff14092ddd/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375550c647d112d5ae064401074507ff14092ddd/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=375550c647d112d5ae064401074507ff14092ddd", "patch": "@@ -932,6 +932,21 @@ gfc_trans_class_array_init_assign (gfc_expr *rhs, gfc_expr *lhs, gfc_expr *obj)\n      of arrays in gfc_trans_call.  */\n   res = gfc_trans_call (ppc_code, false, NULL, NULL, false);\n   gfc_free_statements (ppc_code);\n+\n+  if (UNLIMITED_POLY(obj))\n+    {\n+      /* Check if rhs is non-NULL. */\n+      gfc_se src;\n+      gfc_init_se (&src, NULL);\n+      gfc_conv_expr (&src, rhs);\n+      src.expr = gfc_build_addr_expr (NULL_TREE, src.expr);\n+      tree cond = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n+\t\t\t\t   src.expr, fold_convert (TREE_TYPE (src.expr),\n+\t\t\t\t\t\t\t   null_pointer_node));\n+      res = build3_loc (input_location, COND_EXPR, TREE_TYPE (res), cond, res,\n+\t\t\tbuild_empty_stmt (input_location));\n+    }\n+\n   return res;\n }\n \n@@ -980,6 +995,17 @@ gfc_trans_class_init_assign (gfc_code *code)\n       src.expr = gfc_build_addr_expr (NULL_TREE, src.expr);\n \n       tmp = gfc_build_memcpy_call (dst.expr, src.expr, memsz.expr);\n+\n+      if (UNLIMITED_POLY(code->expr1))\n+\t{\n+\t  /* Check if _def_init is non-NULL. */\n+\t  tree cond = fold_build2_loc (input_location, NE_EXPR,\n+\t\t\t\t       boolean_type_node, src.expr,\n+\t\t\t\t       fold_convert (TREE_TYPE (src.expr),\n+\t\t\t\t\t\t     null_pointer_node));\n+\t  tmp = build3_loc (input_location, COND_EXPR, TREE_TYPE (tmp), cond,\n+\t\t\t    tmp, build_empty_stmt (input_location));\n+\t}\n     }\n \n   if (code->expr1->symtree->n.sym->attr.optional"}, {"sha": "15096fdc3f341a7a328c00138017594f1d395f4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375550c647d112d5ae064401074507ff14092ddd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375550c647d112d5ae064401074507ff14092ddd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=375550c647d112d5ae064401074507ff14092ddd", "patch": "@@ -1,3 +1,8 @@\n+2014-12-19  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/64209\n+\t* gfortran.dg/unlimited_polymorphic_19.f90: New.\n+\n 2014-12-19  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/eon_1.c: New test."}, {"sha": "a2dbaef2e4d6776d6802a434671a492848fe1580", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375550c647d112d5ae064401074507ff14092ddd/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375550c647d112d5ae064401074507ff14092ddd/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_19.f90?ref=375550c647d112d5ae064401074507ff14092ddd", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do run }\n+!\n+! PR 64209: [OOP] runtime segfault with CLASS(*), INTENT(OUT) dummy argument\n+!\n+! Contributed by Miha Polajnar <polajnar.miha@gmail.com>\n+\n+MODULE m\n+  IMPLICIT NONE\n+  TYPE :: t\n+    CLASS(*), ALLOCATABLE :: x(:)\n+  CONTAINS\n+    PROCEDURE :: copy\n+  END TYPE t\n+  INTERFACE \n+    PURE SUBROUTINE copy_proc_intr(a,b)\n+      CLASS(*), INTENT(IN) :: a\n+      CLASS(*), INTENT(OUT) :: b\n+    END SUBROUTINE copy_proc_intr\n+  END INTERFACE \n+CONTAINS\n+  SUBROUTINE copy(self,cp,a)\n+    CLASS(t), INTENT(IN) :: self\n+    PROCEDURE(copy_proc_intr) :: cp\n+    CLASS(*), INTENT(OUT) :: a(:)\n+    INTEGER :: i\n+    IF( .not.same_type_as(self%x(1),a(1)) ) STOP -1\n+    DO i = 1, size(self%x)\n+      CALL cp(self%x(i),a(i))\n+    END DO\n+  END SUBROUTINE copy\n+END MODULE m\n+\n+PROGRAM main\n+  USE m\n+  IMPLICIT NONE\n+  INTEGER, PARAMETER :: n = 3, x(n) = [ 1, 2, 3 ] \n+  INTEGER :: copy_x(n)\n+  TYPE(t) :: test\n+  ALLOCATE(test%x(n),SOURCE=x)\n+  CALL test%copy(copy_int,copy_x)\n+!   PRINT '(*(I0,:2X))', copy_x\n+CONTAINS\n+  PURE SUBROUTINE copy_int(a,b)\n+    CLASS(*), INTENT(IN) :: a\n+    CLASS(*), INTENT(OUT) :: b\n+    SELECT TYPE(a); TYPE IS(integer) \n+    SELECT TYPE(b); TYPE IS(integer)\n+      b = a\n+    END SELECT; END SELECT\n+  END SUBROUTINE copy_int \n+END PROGRAM main\n+\n+! { dg-final { cleanup-modules \"m\" } }"}]}