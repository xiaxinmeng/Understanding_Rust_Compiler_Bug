{"sha": "d9b054d56b052fb01c9a667c95f80c783f0cf0c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDliMDU0ZDU2YjA1MmZiMDFjOWE2NjdjOTVmODBjNzgzZjBjZjBjNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-10T15:40:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-10T15:40:08Z"}, "message": "arm: Fix up arm_override_options_after_change_1\n\nLooking further at arm_override_options_after_change_1, it also seems to be\nincorrect, rather than testing\n!opts->x_str_align_functions\nit should be really testing\n!opts_set->x_str_align_functions\nand get &global_options_set or similar passed to it as additional opts_set\nargument.  That is because otherwise the decision will be sticky, while it\nshould be done whenever use provided -falign-functions but didn't provide\n-falign-functions= (either on the command line, or through optimize\nattribute or pragma).\n\nHere is a fix for that (incremental change on top of the previous patch).\n\n2020-09-10  Jakub Jelinek  <jakub@redhat.com>\n\n\t* config/arm/arm.c (arm_override_options_after_change_1): Add opts_set\n\targument, test opts_set->x_str_align_functions rather than\n\topts->x_str_align_functions.\n\t(arm_override_options_after_change, arm_option_override_internal,\n\tarm_set_current_function): Adjust callers.", "tree": {"sha": "146ad6b2e3d1b2e26cf9531b2c4bde2acd9d0fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/146ad6b2e3d1b2e26cf9531b2c4bde2acd9d0fd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9b054d56b052fb01c9a667c95f80c783f0cf0c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b054d56b052fb01c9a667c95f80c783f0cf0c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b054d56b052fb01c9a667c95f80c783f0cf0c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b054d56b052fb01c9a667c95f80c783f0cf0c7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e113cf7c94a682c29566cb3e0e85955904fd35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e113cf7c94a682c29566cb3e0e85955904fd35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e113cf7c94a682c29566cb3e0e85955904fd35"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "bae8791dd9a6e6c5d2c7bdd42415769436983d9b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b054d56b052fb01c9a667c95f80c783f0cf0c7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b054d56b052fb01c9a667c95f80c783f0cf0c7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d9b054d56b052fb01c9a667c95f80c783f0cf0c7", "patch": "@@ -3024,10 +3024,11 @@ static GTY(()) bool thumb_flipper;\n static GTY(()) tree init_optimize;\n \n static void\n-arm_override_options_after_change_1 (struct gcc_options *opts)\n+arm_override_options_after_change_1 (struct gcc_options *opts,\n+\t\t\t\t     struct gcc_options *opts_set)\n {\n   /* -falign-functions without argument: supply one.  */\n-  if (opts->x_flag_align_functions && !opts->x_str_align_functions)\n+  if (opts->x_flag_align_functions && !opts_set->x_str_align_functions)\n     opts->x_str_align_functions = TARGET_THUMB_P (opts->x_target_flags)\n       && opts->x_optimize_size ? \"2\" : \"4\";\n }\n@@ -3037,7 +3038,7 @@ arm_override_options_after_change_1 (struct gcc_options *opts)\n static void\n arm_override_options_after_change (void)\n {\n-  arm_override_options_after_change_1 (&global_options);\n+  arm_override_options_after_change_1 (&global_options, &global_options_set);\n }\n \n /* Implement TARGET_OPTION_SAVE.  */\n@@ -3065,7 +3066,7 @@ static void\n arm_option_override_internal (struct gcc_options *opts,\n \t\t\t      struct gcc_options *opts_set)\n {\n-  arm_override_options_after_change_1 (opts);\n+  arm_override_options_after_change_1 (opts, opts_set);\n \n   if (TARGET_INTERWORK && !bitmap_bit_p (arm_active_target.isa, isa_bit_thumb))\n     {\n@@ -32335,7 +32336,7 @@ arm_set_current_function (tree fndecl)\n \n   save_restore_target_globals (new_tree);\n \n-  arm_override_options_after_change_1 (&global_options);\n+  arm_override_options_after_change_1 (&global_options, &global_options_set);\n }\n \n /* Implement TARGET_OPTION_PRINT.  */"}]}