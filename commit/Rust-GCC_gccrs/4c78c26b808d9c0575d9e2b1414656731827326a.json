{"sha": "4c78c26b808d9c0575d9e2b1414656731827326a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3OGMyNmI4MDhkOWMwNTc1ZDllMmIxNDE0NjU2NzMxODI3MzI2YQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-06-27T14:50:00Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-06-27T14:50:00Z"}, "message": "df-problems.c (df_set_seen, [...]): Delete.\n\n2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n\n        * df-problems.c (df_set_seen, df_unset_seen): Delete.\n        (df_rd_local_compute, df_md_local_compute): Inline them.\n\n        (df_md_scratch): New.\n        (df_md_alloc, df_md_free): Allocate/free it.\n        (df_md_local_compute): Only include live registers in init.\n        (df_md_transfer_function): Prune the in-set computed by\n        the confluence function, and the gen-set too.\n\nFrom-SVN: r149011", "tree": {"sha": "d8b6c5900cf4fdbd39cd4305251a70dafb469448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b6c5900cf4fdbd39cd4305251a70dafb469448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c78c26b808d9c0575d9e2b1414656731827326a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c78c26b808d9c0575d9e2b1414656731827326a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c78c26b808d9c0575d9e2b1414656731827326a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c78c26b808d9c0575d9e2b1414656731827326a/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6741572cfd4b2ad9c262ec00e152cbf1ea8eb51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6741572cfd4b2ad9c262ec00e152cbf1ea8eb51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6741572cfd4b2ad9c262ec00e152cbf1ea8eb51"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "d048f27e92a735a9c4f7cdf6a87d02d0a0e9c2e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c78c26b808d9c0575d9e2b1414656731827326a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c78c26b808d9c0575d9e2b1414656731827326a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c78c26b808d9c0575d9e2b1414656731827326a", "patch": "@@ -1,4 +1,15 @@\n-2009-06-07  Paolo Bonzini  <bonzini@gnu.org>\n+2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * df-problems.c (df_set_seen, df_unset_seen): Delete.\n+        (df_rd_local_compute, df_md_local_compute): Inline them.\n+\n+        (df_md_scratch): New.\n+        (df_md_alloc, df_md_free): Allocate/free it.\n+        (df_md_local_compute): Only include live registers in init.\n+        (df_md_transfer_function): Prune the in-set computed by\n+        the confluence function, and the gen-set too.\n+\n+2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR rtl-optimization/26854\n         * timevar.def: Remove TV_DF_RU, add TV_DF_MD."}, {"sha": "e19a51ee4b952c6086a9c4a51be5534cd1df43d8", "filename": "gcc/df-problems.c", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c78c26b808d9c0575d9e2b1414656731827326a/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c78c26b808d9c0575d9e2b1414656731827326a/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=4c78c26b808d9c0575d9e2b1414656731827326a", "patch": "@@ -157,27 +157,6 @@ df_print_bb_index (basic_block bb, FILE *file)\n   fprintf (file, \")\\n\");\n }\n \n-\n-\n-/* Make sure that the seen_in_insn and seen_in_block sbitmaps are set\n-   up correctly. */\n-\n-static void\n-df_set_seen (void)\n-{\n-  seen_in_block = BITMAP_ALLOC (&df_bitmap_obstack);\n-  seen_in_insn = BITMAP_ALLOC (&df_bitmap_obstack);\n-}\n-\n-\n-static void\n-df_unset_seen (void)\n-{\n-  BITMAP_FREE (seen_in_block);\n-  BITMAP_FREE (seen_in_insn);\n-}\n-\n-\n \f\n /*----------------------------------------------------------------------------\n    REACHING DEFINITIONS\n@@ -487,7 +466,8 @@ df_rd_local_compute (bitmap all_blocks)\n   bitmap sparse_invalidated = problem_data->sparse_invalidated_by_call;\n   bitmap dense_invalidated = problem_data->dense_invalidated_by_call;\n \n-  df_set_seen ();\n+  seen_in_block = BITMAP_ALLOC (&df_bitmap_obstack);\n+  seen_in_insn = BITMAP_ALLOC (&df_bitmap_obstack);\n \n   df_maybe_reorganize_def_refs (DF_REF_ORDER_BY_REG);\n \n@@ -506,7 +486,9 @@ df_rd_local_compute (bitmap all_blocks)\n \t\t\t  DF_DEFS_BEGIN (regno), \n \t\t\t  DF_DEFS_COUNT (regno));\n     }\n-  df_unset_seen ();\n+\n+  BITMAP_FREE (seen_in_block);\n+  BITMAP_FREE (seen_in_insn);\n }\n \n \n@@ -4001,6 +3983,10 @@ df_simulate_finalize_forwards (basic_block bb, bitmap live)\n     propagating the information to BB3's successors. \n    ---------------------------------------------------------------------------*/\n \n+/* Scratch var used by transfer functions.  This is used to do md analysis\n+   only for live registers.  */\n+static bitmap df_md_scratch;\n+\n /* Set basic block info.  */\n \n static void\n@@ -4044,6 +4030,7 @@ df_md_alloc (bitmap all_blocks)\n                                            sizeof (struct df_md_bb_info), 50);\n \n   df_grow_bb_info (df_md);\n+  df_md_scratch = BITMAP_ALLOC (NULL);\n \n   EXECUTE_IF_SET_IN_BITMAP (all_blocks, 0, bb_index, bi)\n     {\n@@ -4198,14 +4185,14 @@ df_md_local_compute (bitmap all_blocks)\n   basic_block bb;\n   bitmap *frontiers;\n \n-  df_set_seen ();\n+  seen_in_insn = BITMAP_ALLOC (NULL);\n \n   EXECUTE_IF_SET_IN_BITMAP (all_blocks, 0, bb_index, bi1)\n     {\n       df_md_bb_local_compute (bb_index);\n     }\n   \n-  df_unset_seen ();\n+  BITMAP_FREE (seen_in_insn);\n \n   frontiers = XNEWVEC (bitmap, last_basic_block);\n   FOR_ALL_BB (bb)\n@@ -4219,8 +4206,10 @@ df_md_local_compute (bitmap all_blocks)\n       bitmap kill = df_md_get_bb_info (bb_index)->kill;\n       EXECUTE_IF_SET_IN_BITMAP (frontiers[bb_index], 0, df_bb_index, bi2)\n \t{\n+\t  basic_block bb = BASIC_BLOCK (df_bb_index);\n \t  if (bitmap_bit_p (all_blocks, df_bb_index))\n-\t    bitmap_ior_into (df_md_get_bb_info (df_bb_index)->init, kill);\n+\t    bitmap_ior_and_into (df_md_get_bb_info (df_bb_index)->init, kill,\n+\t\t\t\t df_get_live_in (bb));\n \t}\n     }\n \n@@ -4250,13 +4239,24 @@ df_md_reset (bitmap all_blocks)\n static bool\n df_md_transfer_function (int bb_index)\n {\n+  basic_block bb = BASIC_BLOCK (bb_index);\n   struct df_md_bb_info *bb_info = df_md_get_bb_info (bb_index);\n   bitmap in = bb_info->in;\n   bitmap out = bb_info->out;\n   bitmap gen = bb_info->gen;\n   bitmap kill = bb_info->kill;\n \n-  return bitmap_ior_and_compl (out, gen, in, kill);\n+  /* We need to use a scratch set here so that the value returned from\n+     this function invocation properly reflects if the sets changed in\n+     a significant way; i.e. not just because the live set was anded\n+     in.  */\n+  bitmap_and (df_md_scratch, gen, df_get_live_out (bb));\n+\n+  /* Multiple definitions of a register are not relevant if it is not\n+     used.  Thus we trim the result to the places where it is live.  */\n+  bitmap_and_into (in, df_get_live_in (bb));\n+\n+  return bitmap_ior_and_compl (out, df_md_scratch, in, kill);\n }\n \n /* Initialize the solution bit vectors for problem.  */\n@@ -4319,6 +4319,7 @@ df_md_free (void)\n \t}\n     }\n \n+  BITMAP_FREE (df_md_scratch);\n   free_alloc_pool (df_md->block_pool);\n \n   df_md->block_info_size = 0;"}]}