{"sha": "4b7cb39e6230d7e1ae25d013c64714d7fe62f46d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3Y2IzOWU2MjMwZDdlMWFlMjVkMDEzYzY0NzE0ZDdmZTYyZjQ2ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-19T19:47:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-19T19:47:55Z"}, "message": "(expand_inline_function): Convert actual to formal's mode (in case formal\nwas promoted).\n\nFrom-SVN: r2177", "tree": {"sha": "2573bf6f586bec94e0ac435472fb0294ab8eb8ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2573bf6f586bec94e0ac435472fb0294ab8eb8ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b7cb39e6230d7e1ae25d013c64714d7fe62f46d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7cb39e6230d7e1ae25d013c64714d7fe62f46d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7cb39e6230d7e1ae25d013c64714d7fe62f46d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7cb39e6230d7e1ae25d013c64714d7fe62f46d/comments", "author": null, "committer": null, "parents": [{"sha": "c56d91f8e71a1ae7d8bb3ad59d83dd3a621b8298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56d91f8e71a1ae7d8bb3ad59d83dd3a621b8298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c56d91f8e71a1ae7d8bb3ad59d83dd3a621b8298"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "965bc9f133416376dffc2dc7d90b08d7c45f6c8a", "filename": "gcc/integrate.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7cb39e6230d7e1ae25d013c64714d7fe62f46d/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7cb39e6230d7e1ae25d013c64714d7fe62f46d/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=4b7cb39e6230d7e1ae25d013c64714d7fe62f46d", "patch": "@@ -1224,15 +1224,21 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n       if (GET_CODE (loc) == MEM && GET_CODE (XEXP (loc, 0)) == REG\n \t  && REGNO (XEXP (loc, 0)) > LAST_VIRTUAL_REGISTER)\n \t{\n-\t  enum machine_mode mode = TYPE_MODE (TREE_TYPE (arg));\n-\t  rtx stack_slot = assign_stack_temp (mode, int_size_in_bytes (TREE_TYPE (arg)), 1);\n+\t  rtx stack_slot\n+\t    = assign_stack_temp (TYPE_MODE (TREE_TYPE (arg)),\n+\t\t\t\t int_size_in_bytes (TREE_TYPE (arg)), 1);\n \n \t  store_expr (arg, stack_slot, 0);\n \n \t  arg_vals[i] = XEXP (stack_slot, 0);\n \t}\n       else if (GET_CODE (loc) != MEM)\n-\targ_vals[i] = expand_expr (arg, NULL_RTX, mode, EXPAND_SUM);\n+\t/* The mode if LOC and ARG can differ if LOC was a variable\n+\t   that had its mode promoted via PROMOTED_MODE.  */\n+\targ_vals[i] = convert_to_mode (GET_MODE (loc),\n+\t\t\t\t       expand_expr (arg, NULL_RTX, mode,\n+\t\t\t\t\t\t    EXPAND_SUM),\n+\t\t\t\t       TREE_UNSIGNED (TREE_TYPE (formal)));\n       else\n \targ_vals[i] = 0;\n \n@@ -1250,7 +1256,7 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n \t\t      || GET_CODE (arg_vals[i]) == SUBREG\n \t\t      || GET_CODE (arg_vals[i]) == MEM)\n \t\t  && reg_overlap_mentioned_p (arg_vals[i], target))))\n-\targ_vals[i] = copy_to_mode_reg (mode, arg_vals[i]);\n+\targ_vals[i] = copy_to_mode_reg (GET_MODE (loc), arg_vals[i]);\n     }\n \t\n   /* Allocate the structures we use to remap things.  */"}]}