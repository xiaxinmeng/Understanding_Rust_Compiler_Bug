{"sha": "b17d542637d69e2e0ea09434a7892706a335dc28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3ZDU0MjYzN2Q2OWUyZTBlYTA5NDM0YTc4OTI3MDZhMzM1ZGMyOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-30T20:55:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-30T20:55:30Z"}, "message": "i386.md (*movxf_internal): Penalize FYx*r->o alternative to prevent partial memory stalls.\n\n\t* config/i386/i386.md (*movxf_internal): Penalize FYx*r->o alternative\n\tto prevent partial memory stalls.  Do not move CONST_DOUBLEs directly\n\tto memory for !TARGET_MEMORY_MISMATCH_STALL.\n\t(*movdf_internal_rex64): Do not penalize F->r alternative.\n\t(*movdf_internal):  Penalize FYd*r->o alternative to prevent partial\n\tmemory stalls.  Generate SSE and x87 CONST_DOUBLE immediates only\n\twhen optimizing function for size.  Do not move CONST_DOUBLEs\n\tdirectly to memory for !TARGET_MEMORY_MISMATCH_STALL.\n\t(FP move splitters): Merge {TF,XF,DF}mode move splitters.  Do not\n\thandle SUBREGs.  Do not check for MEM_P operands in the insn condition,\n\tcheck for ANY_FP_REGNO_P instead.\n\t* config/i386/constraints.md (Yd): Enable GENERAL_REGS for\n\tTARGET_64BIT and for TARGET_INTEGER_DFMODE_MOVES when optimizing\n\tfunction for speed.\n\t* config/i386/i386.c (ix86_option_override_internal): Do not\n\tset TARGET_INTEGER_DFMODE_MOVES here.\n\nFrom-SVN: r174453", "tree": {"sha": "6866f2f327a649175a244f2051b7b017833804ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6866f2f327a649175a244f2051b7b017833804ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b17d542637d69e2e0ea09434a7892706a335dc28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17d542637d69e2e0ea09434a7892706a335dc28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17d542637d69e2e0ea09434a7892706a335dc28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17d542637d69e2e0ea09434a7892706a335dc28/comments", "author": null, "committer": null, "parents": [{"sha": "a0cd843f4d76e778d03509bd3aa80a3880ab717f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0cd843f4d76e778d03509bd3aa80a3880ab717f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0cd843f4d76e778d03509bd3aa80a3880ab717f"}], "stats": {"total": 165, "additions": 66, "deletions": 99}, "files": [{"sha": "20a3938ceaad50061008de76961d31995ace498a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17d542637d69e2e0ea09434a7892706a335dc28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17d542637d69e2e0ea09434a7892706a335dc28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b17d542637d69e2e0ea09434a7892706a335dc28", "patch": "@@ -1,3 +1,22 @@\n+2011-05-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movxf_internal): Penalize FYx*r->o alternative\n+\tto prevent partial memory stalls.  Do not move CONST_DOUBLEs directly\n+\tto memory for !TARGET_MEMORY_MISMATCH_STALL.\n+\t(*movdf_internal_rex64): Do not penalize F->r alternative.\n+\t(*movdf_internal):  Penalize FYd*r->o alternative to prevent partial\n+\tmemory stalls.  Generate SSE and x87 CONST_DOUBLE immediates only\n+\twhen optimizing function for size.  Do not move CONST_DOUBLEs\n+\tdirectly to memory for !TARGET_MEMORY_MISMATCH_STALL.\n+\t(FP move splitters): Merge {TF,XF,DF}mode move splitters.  Do not\n+\thandle SUBREGs.  Do not check for MEM_P operands in the insn condition,\n+\tcheck for ANY_FP_REGNO_P instead.\n+\t* config/i386/constraints.md (Yd): Enable GENERAL_REGS for\n+\tTARGET_64BIT and for TARGET_INTEGER_DFMODE_MOVES when optimizing\n+\tfunction for speed.\n+\t* config/i386/i386.c (ix86_option_override_internal): Do not\n+\tset TARGET_INTEGER_DFMODE_MOVES here.\n+\n 2011-05-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/49168\n@@ -18,7 +37,7 @@\n \t(gimple_expand_builtin_pow): Reorder args for\n \tbuild_and_insert_call; use build_and_insert_binop; add more\n \toptimizations for fractional exponents.\n-\t\n+\n 2011-05-30  Nathan Froyd  <froydnj@gcc.gnu.org>\n \n \tPR bootstrap/49190\n@@ -86,8 +105,7 @@\n \n \tPR tree-optimization/49199\n \t* tree-vect-loop.c (vect_is_slp_reduction): Check that the\n-\tnon-reduction operands are either defined in the loop or\n-\tby induction.\n+\tnon-reduction operands are either defined in the loop or by induction.\n \n 2011-05-29  Xinliang David Li  <davidxl@google.com>\n "}, {"sha": "3197ba26c66c36a2a34cf200f7ed3afe7690364b", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17d542637d69e2e0ea09434a7892706a335dc28/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17d542637d69e2e0ea09434a7892706a335dc28/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=b17d542637d69e2e0ea09434a7892706a335dc28", "patch": "@@ -108,7 +108,9 @@\n  \"@internal Any MMX register, when inter-unit moves are enabled.\")\n \n (define_register_constraint \"Yd\"\n- \"TARGET_INTEGER_DFMODE_MOVES ? GENERAL_REGS : NO_REGS\"\n+ \"(TARGET_64BIT\n+   || (TARGET_INTEGER_DFMODE_MOVES && optimize_function_for_speed_p (cfun)))\n+  ? GENERAL_REGS : NO_REGS\"\n  \"@internal Any integer register when integer DFmode moves are enabled.\")\n \n (define_register_constraint \"Yx\""}, {"sha": "85d145a94282e7cc7f84efcb8b4dac31c44b9084", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17d542637d69e2e0ea09434a7892706a335dc28/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17d542637d69e2e0ea09434a7892706a335dc28/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b17d542637d69e2e0ea09434a7892706a335dc28", "patch": "@@ -3947,13 +3947,6 @@ ix86_option_override_internal (bool main_args_p)\n   if (!TARGET_80387)\n     target_flags |= MASK_NO_FANCY_MATH_387;\n \n-  /* On 32bit targets, avoid moving DFmode values in\n-     integer registers when optimizing for size.  */\n-  if (TARGET_64BIT)\n-    target_flags |= TARGET_INTEGER_DFMODE_MOVES;\n-  else if (optimize_size)\n-    target_flags &= ~TARGET_INTEGER_DFMODE_MOVES;\n-\n   /* Turn on MMX builtins for -msse.  */\n   if (TARGET_SSE)\n     {"}, {"sha": "cf1e883d44be24d04eb2b6159ffa8d454d2a8aa5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 42, "deletions": 88, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17d542637d69e2e0ea09434a7892706a335dc28/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17d542637d69e2e0ea09434a7892706a335dc28/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b17d542637d69e2e0ea09434a7892706a335dc28", "patch": "@@ -2833,8 +2833,8 @@\n   \"ix86_expand_move (<MODE>mode, operands); DONE;\")\n \n (define_insn \"*movtf_internal\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=x,m,x,?r,?o\")\n-\t(match_operand:TF 1 \"general_operand\" \"xm,x,C,roF,Fr\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=x,m,x,?r ,?o\")\n+\t(match_operand:TF 1 \"general_operand\"\t   \"xm,x,C,roF,Fr\"))]\n   \"TARGET_SSE2\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n@@ -2890,24 +2890,19 @@\n \t\t   (const_string \"TI\"))]\n \t       (const_string \"DI\")))])\n \n-(define_split\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:TF 1 \"general_operand\" \"\"))]\n-  \"reload_completed\n-   && !(SSE_REG_P (operands[0]) || SSE_REG_P (operands[1]))\"\n-  [(const_int 0)]\n-  \"ix86_split_long_move (operands); DONE;\")\n-\n+;; Possible store forwarding (partial memory) stall in alternative 4.\n (define_insn \"*movxf_internal\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,Yx*r  ,o\")\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,Yx*r  ,!o\")\n \t(match_operand:XF 1 \"general_operand\"\t   \"fm,f,G,Yx*roF,FYx*r\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || (optimize_function_for_size_p (cfun)\n-\t   && standard_80387_constant_p (operands[1]) > 0)\n-       || memory_operand (operands[0], XFmode))\"\n+\t   && standard_80387_constant_p (operands[1]) > 0\n+\t   && !memory_operand (operands[0], XFmode))\n+       || (!TARGET_MEMORY_MISMATCH_STALL\n+\t   && memory_operand (operands[0], XFmode)))\"\n {\n   switch (which_alternative)\n     {\n@@ -2918,34 +2913,22 @@\n     case 2:\n       return standard_80387_constant_opcode (operands[1]);\n \n-    case 3: case 4:\n+    case 3:\n+    case 4:\n       return \"#\";\n+\n     default:\n       gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi\")\n    (set_attr \"mode\" \"XF,XF,XF,SI,SI\")])\n \n-(define_split\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:XF 1 \"general_operand\" \"\"))]\n-  \"reload_completed\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && ! (FP_REG_P (operands[0]) ||\n-\t (GET_CODE (operands[0]) == SUBREG\n-\t  && FP_REG_P (SUBREG_REG (operands[0]))))\n-   && ! (FP_REG_P (operands[1]) ||\n-\t (GET_CODE (operands[1]) == SUBREG\n-\t  && FP_REG_P (SUBREG_REG (operands[1]))))\"\n-  [(const_int 0)]\n-  \"ix86_split_long_move (operands); DONE;\")\n-\n (define_insn \"*movdf_internal_rex64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=f,m,f,r ,m,!r,!m,Y2*x,Y2*x,Y2*x,m   ,Yi,r \")\n+\t\t\"=f,m,f,r ,m,r,!m,Y2*x,Y2*x,Y2*x,m   ,Yi,r \")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\"fm,f,G,rm,r,F ,F ,C   ,Y2*x,m   ,Y2*x,r ,Yi\"))]\n+\t\t\"fm,f,G,rm,r,F,F ,C   ,Y2*x,m   ,Y2*x,r ,Yi\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3093,21 +3076,20 @@\n ;; Possible store forwarding (partial memory) stall in alternative 4.\n (define_insn \"*movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=f,m,f,Yd*r  ,o    ,Y2*x,Y2*x,Y2*x,m  \")\n+\t\t\"=f,m,f,Yd*r  ,!o   ,Y2*x,Y2*x,Y2*x,m  \")\n \t(match_operand:DF 1 \"general_operand\"\n \t\t\"fm,f,G,Yd*roF,FYd*r,C   ,Y2*x,m   ,Y2*x\"))]\n   \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n-       || (!TARGET_INTEGER_DFMODE_MOVES\n+       || (optimize_function_for_size_p (cfun)\n \t   && ((!(TARGET_SSE2 && TARGET_SSE_MATH)\n \t\t&& standard_80387_constant_p (operands[1]) > 0)\n \t       || (TARGET_SSE2 && TARGET_SSE_MATH\n \t\t   && standard_sse_constant_p (operands[1])))\n \t   && !memory_operand (operands[0], DFmode))\n-       || ((TARGET_INTEGER_DFMODE_MOVES\n-\t    || !TARGET_MEMORY_MISMATCH_STALL)\n+       || (!TARGET_MEMORY_MISMATCH_STALL\n \t   && memory_operand (operands[0], DFmode)))\"\n {\n   switch (which_alternative)\n@@ -3228,20 +3210,6 @@\n \t      ]\n \t      (const_string \"DF\")))])\n \n-(define_split\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:DF 1 \"general_operand\" \"\"))]\n-  \"reload_completed\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && ! (ANY_FP_REG_P (operands[0]) ||\n-\t (GET_CODE (operands[0]) == SUBREG\n-\t  && ANY_FP_REG_P (SUBREG_REG (operands[0]))))\n-   && ! (ANY_FP_REG_P (operands[1]) ||\n-\t (GET_CODE (operands[1]) == SUBREG\n-\t  && ANY_FP_REG_P (SUBREG_REG (operands[1]))))\"\n-  [(const_int 0)]\n-  \"ix86_split_long_move (operands); DONE;\")\n-\n (define_insn \"*movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n \t  \"=f,m,f,r  ,m ,x,x,x ,m,!*y,!m,!*y,?Yi,?r,!*Ym,!r\")\n@@ -3344,63 +3312,38 @@\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(match_operand 1 \"memory_operand\" \"\"))]\n   \"reload_completed\n-   && MEM_P (operands[1])\n    && (GET_MODE (operands[0]) == TFmode\n        || GET_MODE (operands[0]) == XFmode\n        || GET_MODE (operands[0]) == DFmode\n        || GET_MODE (operands[0]) == SFmode)\n+   && ANY_FP_REGNO_P (REGNO (operands[0]))\n    && (operands[2] = find_constant_src (insn))\"\n   [(set (match_dup 0) (match_dup 2))]\n {\n   rtx c = operands[2];\n-  rtx r = operands[0];\n-\n-  if (GET_CODE (r) == SUBREG)\n-    r = SUBREG_REG (r);\n+  int r = REGNO (operands[0]);\n \n-  if (SSE_REG_P (r))\n-    {\n-      if (!standard_sse_constant_p (c))\n-\tFAIL;\n-    }\n-  else if (FP_REG_P (r))\n-    {\n-      if (standard_80387_constant_p (c) < 1)\n-\tFAIL;\n-    }\n-  else if (MMX_REG_P (r))\n+  if ((SSE_REGNO_P (r) && !standard_sse_constant_p (c))\n+      || (FP_REGNO_P (r) && standard_80387_constant_p (c) < 1))\n     FAIL;\n })\n \n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(float_extend (match_operand 1 \"memory_operand\" \"\")))]\n   \"reload_completed\n-   && MEM_P (operands[1])\n    && (GET_MODE (operands[0]) == TFmode\n        || GET_MODE (operands[0]) == XFmode\n-       || GET_MODE (operands[0]) == DFmode\n-       || GET_MODE (operands[0]) == SFmode)\n+       || GET_MODE (operands[0]) == DFmode)\n+   && ANY_FP_REGNO_P (REGNO (operands[0]))\n    && (operands[2] = find_constant_src (insn))\"\n   [(set (match_dup 0) (match_dup 2))]\n {\n   rtx c = operands[2];\n-  rtx r = operands[0];\n-\n-  if (GET_CODE (r) == SUBREG)\n-    r = SUBREG_REG (r);\n+  int r = REGNO (operands[0]);\n \n-  if (SSE_REG_P (r))\n-    {\n-      if (!standard_sse_constant_p (c))\n-\tFAIL;\n-    }\n-  else if (FP_REG_P (r))\n-    {\n-      if (standard_80387_constant_p (c) < 1)\n-\tFAIL;\n-    }\n-  else if (MMX_REG_P (r))\n+  if ((SSE_REGNO_P (r) && !standard_sse_constant_p (c))\n+      || (FP_REGNO_P (r) && standard_80387_constant_p (c) < 1))\n     FAIL;\n })\n \n@@ -3424,6 +3367,17 @@\n     operands[1] = CONST1_RTX (<MODE>mode);\n })\n \n+(define_split\n+  [(set (match_operand 0 \"nonimmediate_operand\" \"\")\n+        (match_operand 1 \"general_operand\" \"\"))]\n+  \"reload_completed\n+   && (GET_MODE (operands[0]) == TFmode\n+       || GET_MODE (operands[0]) == XFmode\n+       || GET_MODE (operands[0]) == DFmode)\n+   && !(ANY_FP_REG_P (operands[0]) || ANY_FP_REG_P (operands[1]))\"\n+  [(const_int 0)]\n+  \"ix86_split_long_move (operands); DONE;\")\n+\n (define_insn \"swapxf\"\n   [(set (match_operand:XF 0 \"register_operand\" \"+f\")\n \t(match_operand:XF 1 \"register_operand\" \"+f\"))\n@@ -16663,7 +16617,7 @@\n   [(set (match_operand:SWI 0 \"push_operand\" \"\")\n \t(match_operand:SWI 1 \"memory_operand\" \"\"))\n    (match_scratch:SWI 2 \"<r>\")]\n-  \"optimize_insn_for_speed_p () && !TARGET_PUSH_MEMORY\n+  \"!(TARGET_PUSH_MEMORY || optimize_insn_for_size_p ())\n    && !RTX_FRAME_RELATED_P (peep2_next_insn (0))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))])\n@@ -16674,7 +16628,7 @@\n   [(set (match_operand:SF 0 \"push_operand\" \"\")\n \t(match_operand:SF 1 \"memory_operand\" \"\"))\n    (match_scratch:SF 2 \"r\")]\n-  \"optimize_insn_for_speed_p () && !TARGET_PUSH_MEMORY\n+  \"!(TARGET_PUSH_MEMORY || optimize_insn_for_size_p ())\n    && !RTX_FRAME_RELATED_P (peep2_next_insn (0))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))])\n@@ -16826,7 +16780,7 @@\n                      [(match_dup 0)\n                       (match_operand:SI 1 \"memory_operand\" \"\")]))\n               (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_insn_for_speed_p () && ! TARGET_READ_MODIFY\"\n+  \"!(TARGET_READ_MODIFY || optimize_insn_for_size_p ())\"\n   [(set (match_dup 2) (match_dup 1))\n    (parallel [(set (match_dup 0)\n                    (match_op_dup 3 [(match_dup 0) (match_dup 2)]))\n@@ -16839,7 +16793,7 @@\n                      [(match_operand:SI 1 \"memory_operand\" \"\")\n                       (match_dup 0)]))\n               (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_insn_for_speed_p () && ! TARGET_READ_MODIFY\"\n+  \"!(TARGET_READ_MODIFY || optimize_insn_for_size_p ())\"\n   [(set (match_dup 2) (match_dup 1))\n    (parallel [(set (match_dup 0)\n                    (match_op_dup 3 [(match_dup 2) (match_dup 0)]))\n@@ -16892,7 +16846,7 @@\n                      [(match_dup 0)\n                       (match_operand:SI 1 \"nonmemory_operand\" \"\")]))\n               (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_insn_for_speed_p () && ! TARGET_READ_MODIFY_WRITE\n+  \"!(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n    /* Do not split stack checking probes.  */\n    && GET_CODE (operands[3]) != IOR && operands[1] != const0_rtx\"\n   [(set (match_dup 2) (match_dup 0))\n@@ -16908,7 +16862,7 @@\n                      [(match_operand:SI 1 \"nonmemory_operand\" \"\")\n                       (match_dup 0)]))\n               (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_insn_for_speed_p () && ! TARGET_READ_MODIFY_WRITE\n+  \"!(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n    /* Do not split stack checking probes.  */\n    && GET_CODE (operands[3]) != IOR && operands[1] != const0_rtx\"\n   [(set (match_dup 2) (match_dup 0))"}]}