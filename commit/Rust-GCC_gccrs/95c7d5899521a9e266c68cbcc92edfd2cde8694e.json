{"sha": "95c7d5899521a9e266c68cbcc92edfd2cde8694e", "node_id": "C_kwDOANBUbNoAKDk1YzdkNTg5OTUyMWE5ZTI2NmM2OGNiY2M5MmVkZmQyY2RlODY5NGU", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-09-07T13:33:26Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-09-08T12:20:29Z"}, "message": "pch: Fix the reconstruction of adhoc data hash table\n\nThe function rebuild_location_adhoc_htab() was meant to reconstruct the\nadhoc location hash map after restoring a line_maps instance from a\nPCH. However, the function has never performed as intended because it\nmissed the last step of adding the data into the newly reconstructed hash\nmap. This patch fixes that.\n\nIt does not seem possible to construct a test case such that the current\nincorrect behavior is observable as a compiler issue. It would be\nobservable, if it were possible for a precompiled header to contain an\nadhoc location with a non-zero custom data pointer. But currently, such\ndata pointers are used only by the middle end to track inlining\ninformation, and this happens later, too late to show up in a PCH.\n\nI also noted that location_adhoc_data_update, which updates the hash map\npointers in a different scenario, was relying on undefined pointer\narithmetic behavior. I'm not aware of this having caused any issue in\npractice, but in this patch I have also changed it to use defined pointer\noperations instead.\n\nlibcpp/ChangeLog:\n\n\t* line-map.cc (location_adhoc_data_update): Remove reliance on\n\tundefined behavior.\n\t(get_combined_adhoc_loc): Likewise.\n\t(rebuild_location_adhoc_htab): Fix issue where the htab was not\n\tproperly updated.", "tree": {"sha": "192d1b178bce8740d99ed7cb237c0810797d9b94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/192d1b178bce8740d99ed7cb237c0810797d9b94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95c7d5899521a9e266c68cbcc92edfd2cde8694e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c7d5899521a9e266c68cbcc92edfd2cde8694e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c7d5899521a9e266c68cbcc92edfd2cde8694e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c7d5899521a9e266c68cbcc92edfd2cde8694e/comments", "author": null, "committer": null, "parents": [{"sha": "f25a6767ec28780a3e3b6d38f5e54e1122a26fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25a6767ec28780a3e3b6d38f5e54e1122a26fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25a6767ec28780a3e3b6d38f5e54e1122a26fd6"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "391f1d4bbc1a63a5bfe94dcc08b150fee942f766", "filename": "libcpp/line-map.cc", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c7d5899521a9e266c68cbcc92edfd2cde8694e/libcpp%2Fline-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c7d5899521a9e266c68cbcc92edfd2cde8694e/libcpp%2Fline-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.cc?ref=95c7d5899521a9e266c68cbcc92edfd2cde8694e", "patch": "@@ -85,27 +85,38 @@ location_adhoc_data_eq (const void *l1, const void *l2)\n \t  && lb1->data == lb2->data);\n }\n \n-/* Update the hashtable when location_adhoc_data is reallocated.  */\n+/* Update the hashtable when location_adhoc_data_map::data is reallocated.\n+   The param is an array of two pointers, the previous value of the data\n+   pointer, and then the new value.  The pointers stored in the hash map\n+   are then rebased to be relative to the new data pointer instead of the\n+   old one.  */\n \n static int\n-location_adhoc_data_update (void **slot, void *data)\n+location_adhoc_data_update (void **slot_v, void *param_v)\n {\n-  *((char **) slot)\n-    = (char *) ((uintptr_t) *((char **) slot) + *((ptrdiff_t *) data));\n+  const auto slot = reinterpret_cast<location_adhoc_data **> (slot_v);\n+  const auto param = static_cast<location_adhoc_data **> (param_v);\n+  *slot = (*slot - param[0]) + param[1];\n   return 1;\n }\n \n-/* Rebuild the hash table from the location adhoc data.  */\n+/* The adhoc data hash table is not part of the GGC infrastructure, so it was\n+   not initialized when SET was reconstructed from PCH; take care of that by\n+   rebuilding it from scratch.  */\n \n void\n rebuild_location_adhoc_htab (line_maps *set)\n {\n-  unsigned i;\n   set->location_adhoc_data_map.htab =\n       htab_create (100, location_adhoc_data_hash, location_adhoc_data_eq, NULL);\n-  for (i = 0; i < set->location_adhoc_data_map.curr_loc; i++)\n-    htab_find_slot (set->location_adhoc_data_map.htab,\n-\t\t    set->location_adhoc_data_map.data + i, INSERT);\n+  for (auto p = set->location_adhoc_data_map.data,\n+\t    end = p + set->location_adhoc_data_map.curr_loc;\n+      p != end; ++p)\n+    {\n+      const auto slot = reinterpret_cast<location_adhoc_data **>\n+\t(htab_find_slot (set->location_adhoc_data_map.htab, p, INSERT));\n+      *slot = p;\n+    }\n }\n \n /* Helper function for get_combined_adhoc_loc.\n@@ -211,8 +222,7 @@ get_combined_adhoc_loc (line_maps *set,\n       if (set->location_adhoc_data_map.curr_loc >=\n \t  set->location_adhoc_data_map.allocated)\n \t{\n-\t  char *orig_data = (char *) set->location_adhoc_data_map.data;\n-\t  ptrdiff_t offset;\n+\t  const auto orig_data = set->location_adhoc_data_map.data;\n \t  /* Cast away extern \"C\" from the type of xrealloc.  */\n \t  line_map_realloc reallocator = (set->reallocator\n \t\t\t\t\t  ? set->reallocator\n@@ -226,10 +236,13 @@ get_combined_adhoc_loc (line_maps *set,\n \t      reallocator (set->location_adhoc_data_map.data,\n \t\t\t   set->location_adhoc_data_map.allocated\n \t\t\t   * sizeof (struct location_adhoc_data));\n-\t  offset = (char *) (set->location_adhoc_data_map.data) - orig_data;\n \t  if (set->location_adhoc_data_map.allocated > 128)\n-\t    htab_traverse (set->location_adhoc_data_map.htab,\n-\t\t\t   location_adhoc_data_update, &offset);\n+\t    {\n+\t      location_adhoc_data *param[2]\n+\t\t= {orig_data, set->location_adhoc_data_map.data};\n+\t      htab_traverse (set->location_adhoc_data_map.htab,\n+\t\t\t     location_adhoc_data_update, param);\n+\t    }\n \t}\n       *slot = set->location_adhoc_data_map.data\n \t      + set->location_adhoc_data_map.curr_loc;"}]}