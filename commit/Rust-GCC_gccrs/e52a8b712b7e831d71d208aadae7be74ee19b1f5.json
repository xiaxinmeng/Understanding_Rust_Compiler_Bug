{"sha": "e52a8b712b7e831d71d208aadae7be74ee19b1f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUyYThiNzEyYjdlODMxZDcxZDIwOGFhZGFlN2JlNzRlZTE5YjFmNQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2013-01-17T17:14:53Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-01-17T17:14:53Z"}, "message": "builtins.def (DEF_BUILTIN): Factor out \"__builtin_avr_\" from NAME, turn NAME to an uppercase identifier.\n\n\t* config/avr/builtins.def (DEF_BUILTIN): Factor out\n\t\"__builtin_avr_\" from NAME, turn NAME to an uppercase identifier.\n\tFactor out 'CODE_FOR_' from ICODE, use 'nothing' instead of '-1'.\n\tRemove ID.  Adjust comments.\n\t* config/avr/avr-c.c (avr_builtin_name): Remove.\n\t(avr_cpu_cpp_builtins): Use DEF_BUILTIN instead of for-loop.\n\t* config/avr/avr.c (avr_tolower): New static function.\n\t(DEF_BUILTIN): Remove parameter ID.  Prefix ICODE by 'CODE_FOR_'.\n\tStringify NAME, prefix it with \"__builtin_avr_\" and lowercase it.\n\t(avr_expand_builtin): Assert insn_code != CODE_FOR_nothing for\n\tdefault expansion.\n\nFrom-SVN: r195276", "tree": {"sha": "a9ef2351cc3cafdba3f141d533b81f32fb43e490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9ef2351cc3cafdba3f141d533b81f32fb43e490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e52a8b712b7e831d71d208aadae7be74ee19b1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52a8b712b7e831d71d208aadae7be74ee19b1f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52a8b712b7e831d71d208aadae7be74ee19b1f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52a8b712b7e831d71d208aadae7be74ee19b1f5/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610fb637256be2bd904fac22a683b45d2d9294da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610fb637256be2bd904fac22a683b45d2d9294da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/610fb637256be2bd904fac22a683b45d2d9294da"}], "stats": {"total": 124, "additions": 75, "deletions": 49}, "files": [{"sha": "d7816844a51d67ed00d37d709c9c4832d87be770", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52a8b712b7e831d71d208aadae7be74ee19b1f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52a8b712b7e831d71d208aadae7be74ee19b1f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e52a8b712b7e831d71d208aadae7be74ee19b1f5", "patch": "@@ -1,3 +1,17 @@\n+2013-01-17  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/builtins.def (DEF_BUILTIN): Factor out\n+\t\"__builtin_avr_\" from NAME, turn NAME to an uppercase identifier.\n+\tFactor out 'CODE_FOR_' from ICODE, use 'nothing' instead of '-1'.\n+\tRemove ID.  Adjust comments.\n+\t* config/avr/avr-c.c (avr_builtin_name): Remove.\n+\t(avr_cpu_cpp_builtins): Use DEF_BUILTIN instead of for-loop.\n+\t* config/avr/avr.c (avr_tolower): New static function.\n+\t(DEF_BUILTIN): Remove parameter ID.  Prefix ICODE by 'CODE_FOR_'.\n+\tStringify NAME, prefix it with \"__builtin_avr_\" and lowercase it.\n+\t(avr_expand_builtin): Assert insn_code != CODE_FOR_nothing for\n+\tdefault expansion.\n+\n 2013-01-17  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/55273"}, {"sha": "075d9ef791b6ec91cd1892a106600ba777d5ec1c", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52a8b712b7e831d71d208aadae7be74ee19b1f5/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52a8b712b7e831d71d208aadae7be74ee19b1f5/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=e52a8b712b7e831d71d208aadae7be74ee19b1f5", "patch": "@@ -70,14 +70,6 @@ avr_toupper (char *up, const char *lo)\n \n /* Worker function for TARGET_CPU_CPP_BUILTINS.  */\n \n-static const char *const avr_builtin_name[] =\n-  {\n-#define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, CODE) NAME,\n-#include \"builtins.def\"\n-#undef DEF_BUILTIN\n-    NULL\n-  };\n-\n void\n avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n {\n@@ -176,13 +168,10 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n   /* Define builtin macros so that the user can easily query whether or\n      not a specific builtin is available. */\n \n-  for (i = 0; avr_builtin_name[i]; i++)\n-    {\n-      const char *name = avr_builtin_name[i];\n-      char *Name = (char*) alloca (1 + strlen (name));\n-\n-      cpp_define (pfile, avr_toupper (Name, name));\n-    }\n+#define DEF_BUILTIN(NAME, N_ARGS, TYPE, CODE)   \\\n+  cpp_define (pfile, \"__BUILTIN_AVR_\" #NAME);\n+#include \"builtins.def\"\n+#undef DEF_BUILTIN\n \n   /* Builtin macros for the __int24 and __uint24 type.  */\n "}, {"sha": "9c7f00aaae70ce3a6914570354040b5d5b6ab2c0", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52a8b712b7e831d71d208aadae7be74ee19b1f5/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52a8b712b7e831d71d208aadae7be74ee19b1f5/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=e52a8b712b7e831d71d208aadae7be74ee19b1f5", "patch": "@@ -205,6 +205,22 @@ bool avr_need_clear_bss_p = false;\n bool avr_need_copy_data_p = false;\n \n \f\n+/* Transform UP into lowercase and write the result to LO.\n+   You must provide enough space for LO.  Return LO.  */\n+\n+static char*\n+avr_tolower (char *lo, const char *up)\n+{\n+  char *lo0 = lo;\n+\n+  for (; *up; up++, lo++)\n+    *lo = TOLOWER (*up);\n+\n+  *lo = '\\0';\n+\n+  return lo0;\n+}\n+\n \n /* Custom function to count number of set bits.  */\n \n@@ -11368,7 +11384,8 @@ avr_out_insert_bits (rtx *op, int *plen)\n \n enum avr_builtin_id\n   {\n-#define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, CODE) ID,\n+#define DEF_BUILTIN(NAME, N_ARGS, TYPE, CODE)   \\\n+    AVR_BUILTIN_ ## NAME,\n #include \"builtins.def\"\n #undef DEF_BUILTIN\n \n@@ -11378,7 +11395,6 @@ enum avr_builtin_id\n struct GTY(()) avr_builtin_description\n {\n   enum insn_code icode;\n-  const char *name;\n   int n_args;\n   tree fndecl;\n };\n@@ -11391,9 +11407,8 @@ struct GTY(()) avr_builtin_description\n static GTY(()) struct avr_builtin_description\n avr_bdesc[AVR_BUILTIN_COUNT] =\n   {\n-\n-#define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, ICODE)      \\\n-    { (enum insn_code) ICODE, NAME, N_ARGS, NULL_TREE },\n+#define DEF_BUILTIN(NAME, N_ARGS, TYPE, ICODE)                  \\\n+    { (enum insn_code) CODE_FOR_ ## ICODE, N_ARGS, NULL_TREE },\n #include \"builtins.def\"\n #undef DEF_BUILTIN\n   };\n@@ -11462,22 +11477,29 @@ avr_init_builtins (void)\n                                 NULL_TREE);\n \n   tree const_memx_void_node\n-      = build_qualified_type (void_type_node,\n-                              TYPE_QUAL_CONST\n-                              | ENCODE_QUAL_ADDR_SPACE (ADDR_SPACE_MEMX));\n+    = build_qualified_type (void_type_node,\n+                            TYPE_QUAL_CONST\n+                            | ENCODE_QUAL_ADDR_SPACE (ADDR_SPACE_MEMX));\n \n   tree const_memx_ptr_type_node\n-      = build_pointer_type_for_mode (const_memx_void_node, PSImode, false);\n+    = build_pointer_type_for_mode (const_memx_void_node, PSImode, false);\n \n   tree char_ftype_const_memx_ptr\n-      = build_function_type_list (char_type_node,\n-                                  const_memx_ptr_type_node,\n-                                  NULL);\n-\n-#define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, CODE)                       \\\n-  gcc_assert (ID < AVR_BUILTIN_COUNT);                                  \\\n-  avr_bdesc[ID].fndecl                                                  \\\n-    = add_builtin_function (NAME, TYPE, ID, BUILT_IN_MD, NULL, NULL_TREE);\n+    = build_function_type_list (char_type_node,\n+                                const_memx_ptr_type_node,\n+                                NULL);\n+\n+#define DEF_BUILTIN(NAME, N_ARGS, TYPE, CODE)                           \\\n+  {                                                                     \\\n+    int id = AVR_BUILTIN_ ## NAME;                                      \\\n+    const char *Name = \"__builtin_avr_\" #NAME;                          \\\n+    char *name = (char*) alloca (1 + strlen (Name));                    \\\n+                                                                        \\\n+    gcc_assert (id < AVR_BUILTIN_COUNT);                                \\\n+    avr_bdesc[id].fndecl                                                \\\n+      = add_builtin_function (avr_tolower (name, Name), TYPE, id,       \\\n+                              BUILT_IN_MD, NULL, NULL_TREE);            \\\n+  }\n #include \"builtins.def\"\n #undef DEF_BUILTIN\n \n@@ -11604,6 +11626,7 @@ avr_expand_builtin (tree exp, rtx target,\n \n   /* No special treatment needed: vanilla expand.  */\n \n+  gcc_assert (d->icode != CODE_FOR_nothing);\n   gcc_assert (d->n_args == call_expr_nargs (exp));\n \n   if (d->n_args == 0)"}, {"sha": "c8314acc7670c8b963f1b0eb8f0f6b5b406f74ea", "filename": "gcc/config/avr/builtins.def", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52a8b712b7e831d71d208aadae7be74ee19b1f5/gcc%2Fconfig%2Favr%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52a8b712b7e831d71d208aadae7be74ee19b1f5/gcc%2Fconfig%2Favr%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fbuiltins.def?ref=e52a8b712b7e831d71d208aadae7be74ee19b1f5", "patch": "@@ -20,35 +20,35 @@\n    builtins defined in the AVR part of the GNU compiler.\n    Befor including this file, define a macro\n \n-   DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, ICODE)\n+   DEF_BUILTIN(NAME, N_ARGS, TYPE, ICODE)\n \n-   NAME:   The name as visible by the user as a C string.\n+   NAME:   `__builtin_avr_name' will be the user-level name of the builtin.\n+           `AVR_BUILTIN_NAME' will be the internal builtin's id.\n    N_ARGS: Number of input arguments.  If special treatment is needed,\n            set to -1 and handle it by hand, see avr.c:avr_expand_builtin().\n-   ID:     An integer to identify the built-in.\n    TYPE:   A tree node describing the prototype of the built-in.\n-   ICODE:  Insn code number for the insn attached to the built-in.\n-           If special treatment is needed to expand the built-in, set to -1.\n+   ICODE:  Name of attached insn or expander.  If special treatment in avr.c\n+           is needed to expand the built-in, use `nothing'.\n */\n \n /* Mapped to respective instruction.  */\n \n-DEF_BUILTIN (\"__builtin_avr_nop\",  -1, AVR_BUILTIN_NOP, void_ftype_void, -1)\n-DEF_BUILTIN (\"__builtin_avr_sei\",   0, AVR_BUILTIN_SEI, void_ftype_void, CODE_FOR_enable_interrupt)\n-DEF_BUILTIN (\"__builtin_avr_cli\",   0, AVR_BUILTIN_CLI, void_ftype_void, CODE_FOR_disable_interrupt)\n-DEF_BUILTIN (\"__builtin_avr_wdr\",   0, AVR_BUILTIN_WDR,   void_ftype_void, CODE_FOR_wdr)\n-DEF_BUILTIN (\"__builtin_avr_sleep\", 0, AVR_BUILTIN_SLEEP, void_ftype_void, CODE_FOR_sleep)\n+DEF_BUILTIN (NOP,  -1, void_ftype_void, nothing)\n+DEF_BUILTIN (SEI,   0, void_ftype_void, enable_interrupt)\n+DEF_BUILTIN (CLI,   0, void_ftype_void, disable_interrupt)\n+DEF_BUILTIN (WDR,   0, void_ftype_void, wdr)\n+DEF_BUILTIN (SLEEP, 0, void_ftype_void, sleep)\n \n /* Mapped to respective instruction but might also be folded away\n    or emit as libgcc call if ISA does not provide the instruction.  */\n \n-DEF_BUILTIN (\"__builtin_avr_swap\",   1, AVR_BUILTIN_SWAP,   uchar_ftype_uchar,      CODE_FOR_rotlqi3_4)\n-DEF_BUILTIN (\"__builtin_avr_fmul\",   2, AVR_BUILTIN_FMUL,   uint_ftype_uchar_uchar, CODE_FOR_fmul)\n-DEF_BUILTIN (\"__builtin_avr_fmuls\",  2, AVR_BUILTIN_FMULS,  int_ftype_char_char,    CODE_FOR_fmuls)\n-DEF_BUILTIN (\"__builtin_avr_fmulsu\", 2, AVR_BUILTIN_FMULSU, int_ftype_char_uchar,   CODE_FOR_fmulsu)\n+DEF_BUILTIN (SWAP,   1, uchar_ftype_uchar,      rotlqi3_4)\n+DEF_BUILTIN (FMUL,   2, uint_ftype_uchar_uchar, fmul)\n+DEF_BUILTIN (FMULS,  2, int_ftype_char_char,    fmuls)\n+DEF_BUILTIN (FMULSU, 2, int_ftype_char_uchar,   fmulsu)\n \n /* More complex stuff that cannot be mapped 1:1 to an instruction.  */\n \n-DEF_BUILTIN (\"__builtin_avr_delay_cycles\", -1, AVR_BUILTIN_DELAY_CYCLES, void_ftype_ulong, -1)\n-DEF_BUILTIN (\"__builtin_avr_insert_bits\", 3, AVR_BUILTIN_INSERT_BITS, uchar_ftype_ulong_uchar_uchar, CODE_FOR_insert_bits)\n-DEF_BUILTIN (\"__builtin_avr_flash_segment\", 1, AVR_BUILTIN_FLASH_SEGMENT, char_ftype_const_memx_ptr, CODE_FOR_flash_segment)\n+DEF_BUILTIN (DELAY_CYCLES, -1, void_ftype_ulong, nothing)\n+DEF_BUILTIN (INSERT_BITS, 3, uchar_ftype_ulong_uchar_uchar, insert_bits)\n+DEF_BUILTIN (FLASH_SEGMENT, 1, char_ftype_const_memx_ptr, flash_segment)"}]}