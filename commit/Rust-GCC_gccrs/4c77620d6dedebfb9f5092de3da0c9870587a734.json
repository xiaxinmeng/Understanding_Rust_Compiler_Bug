{"sha": "4c77620d6dedebfb9f5092de3da0c9870587a734", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3NzYyMGQ2ZGVkZWJmYjlmNTA5MmRlM2RhMGM5ODcwNTg3YTczNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-06-23T10:41:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-06-23T10:41:42Z"}, "message": "params.c: Include common/common-target.h.\n\n\t* params.c: Include common/common-target.h.  Don't include tm.h.\n\t(lang_independent_params): Move from toplev.c.\n\t(global_init_params): New.\n\t* params.h (global_init_params): Declare.\n\t* target.def (default_params): Move to common-target.def.\n\t* toplev.c (lang_independent_options): Remove.\n\t(lang_independent_params): Move to params.c.\n\t(general_init): Use global_init_params.\n\t* common/common-target.def (option_default_params): Move from\n\ttarget.def.\n\t* common/config/ia64/ia64-common.c: Include params.h.\n\t(ia64_option_default_params, TARGET_OPTION_DEFAULT_PARAMS): Move\n\tfrom ia64.c.\n\t* common/config/rs6000/rs6000-common.c: Include params.h.\n\t(rs6000_option_default_params, TARGET_OPTION_DEFAULT_PARAMS): Move\n\tfrom rs6000.c.\n\t* common/config/sh/sh-common.c: Include params.h.\n\t(sh_option_default_params, TARGET_OPTION_DEFAULT_PARAMS): Move\n\tfrom sh.c.\n\t* common/config/spu/spu-common.c: Include params.h.\n\t(spu_option_default_params, TARGET_OPTION_DEFAULT_PARAMS): Move\n\tfrom spu.c.\n\t* config/ia64/ia64.c (ia64_option_default_params,\n\tTARGET_OPTION_DEFAULT_PARAMS): Move to ia64-common.c.\n\t* config/rs6000/rs6000.c (rs6000_option_default_params,\n\tTARGET_OPTION_DEFAULT_PARAMS): Move to rs6000-common.c.\n\t* config/sh/sh.c (sh_option_default_params,\n\tTARGET_OPTION_DEFAULT_PARAMS): Move to sh-common.c.\n\t* config/spu/spu.c (spu_option_default_params,\n\tTARGET_OPTION_DEFAULT_PARAMS): Move to spu-common.c.\n\t* Makefile.in (OBJS): Remove params.o.\n\t(OBJS-libcommon-target): Add params.o.\n\t(params.o, $(common_out_object_file)): Update dependencies.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r175330", "tree": {"sha": "7b93802244815ada4c0d9017f18aa9c00fd3c497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b93802244815ada4c0d9017f18aa9c00fd3c497"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c77620d6dedebfb9f5092de3da0c9870587a734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c77620d6dedebfb9f5092de3da0c9870587a734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c77620d6dedebfb9f5092de3da0c9870587a734", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c77620d6dedebfb9f5092de3da0c9870587a734/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f20ac347a219ef84e43bfdc11c010a6e79adc7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f20ac347a219ef84e43bfdc11c010a6e79adc7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f20ac347a219ef84e43bfdc11c010a6e79adc7b"}], "stats": {"total": 221, "additions": 132, "deletions": 89}, "files": [{"sha": "b298d5fbd785a2bdab3364045b9a7078f69eb0c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -1,3 +1,40 @@\n+2011-06-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* params.c: Include common/common-target.h.  Don't include tm.h.\n+\t(lang_independent_params): Move from toplev.c.\n+\t(global_init_params): New.\n+\t* params.h (global_init_params): Declare.\n+\t* target.def (default_params): Move to common-target.def.\n+\t* toplev.c (lang_independent_options): Remove.\n+\t(lang_independent_params): Move to params.c.\n+\t(general_init): Use global_init_params.\n+\t* common/common-target.def (option_default_params): Move from\n+\ttarget.def.\n+\t* common/config/ia64/ia64-common.c: Include params.h.\n+\t(ia64_option_default_params, TARGET_OPTION_DEFAULT_PARAMS): Move\n+\tfrom ia64.c.\n+\t* common/config/rs6000/rs6000-common.c: Include params.h.\n+\t(rs6000_option_default_params, TARGET_OPTION_DEFAULT_PARAMS): Move\n+\tfrom rs6000.c.\n+\t* common/config/sh/sh-common.c: Include params.h.\n+\t(sh_option_default_params, TARGET_OPTION_DEFAULT_PARAMS): Move\n+\tfrom sh.c.\n+\t* common/config/spu/spu-common.c: Include params.h.\n+\t(spu_option_default_params, TARGET_OPTION_DEFAULT_PARAMS): Move\n+\tfrom spu.c.\n+\t* config/ia64/ia64.c (ia64_option_default_params,\n+\tTARGET_OPTION_DEFAULT_PARAMS): Move to ia64-common.c.\n+\t* config/rs6000/rs6000.c (rs6000_option_default_params,\n+\tTARGET_OPTION_DEFAULT_PARAMS): Move to rs6000-common.c.\n+\t* config/sh/sh.c (sh_option_default_params,\n+\tTARGET_OPTION_DEFAULT_PARAMS): Move to sh-common.c.\n+\t* config/spu/spu.c (spu_option_default_params,\n+\tTARGET_OPTION_DEFAULT_PARAMS): Move to spu-common.c.\n+\t* Makefile.in (OBJS): Remove params.o.\n+\t(OBJS-libcommon-target): Add params.o.\n+\t(params.o, $(common_out_object_file)): Update dependencies.\n+\t* doc/tm.texi: Regenerate.\n+\n 2011-06-23  Alan Modra  <amodra@gmail.com>\n \n \tPR bootstrap/49383"}, {"sha": "968588016b74431575041edd2bfeb3287ed63ffb", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -1355,7 +1355,6 @@ OBJS = \\\n \toptions-save.o \\\n \topts-global.o \\\n \topts.o \\\n-\tparams.o \\\n \tpasses.o \\\n \tplugin.o \\\n \tpointer-set.o \\\n@@ -1504,8 +1503,8 @@ OBJS-libcommon = diagnostic.o pretty-print.o intl.o input.o version.o\n \n # Objects in libcommon-target.a, used by drivers and by the core\n # compiler and containing target-dependent code.\n-OBJS-libcommon-target = $(common_out_object_file) prefix.o opts-common.o \\\n-\toptions.o vec.o hooks.o common/common-targhooks.o\n+OBJS-libcommon-target = $(common_out_object_file) prefix.o params.o \\\n+\topts-common.o options.o vec.o hooks.o common/common-targhooks.o\n \n # This lists all host objects for the front ends.\n ALL_HOST_FRONTEND_OBJS = $(C_OBJS) \\\n@@ -3538,8 +3537,8 @@ ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TARGET_H) $(BASIC_BLOCK_H) $(EXPR_H) output.h $(EXCEPT_H) $(TM_P_H) \\\n    $(OPTABS_H) $(CFGLOOP_H) hard-reg-set.h $(TIMEVAR_H) \\\n    $(TREE_PASS_H) $(DF_H) $(DBGCNT_H)\n-params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) \\\n-   $(DIAGNOSTIC_CORE_H)\n+params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(COMMON_TARGET_H) \\\n+   $(PARAMS_H) $(DIAGNOSTIC_CORE_H)\n pointer-set.o: pointer-set.c pointer-set.h $(CONFIG_H) $(SYSTEM_H)\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n pretty-print.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h $(PRETTY_PRINT_H)\n@@ -3564,7 +3563,7 @@ $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t\t$(out_file) $(OUTPUT_OPTION)\n \n $(common_out_object_file): $(common_out_file) $(CONFIG_H) $(SYSTEM_H) \\\n-    coretypes.h $(COMMON_TARGET_H) $(COMMON_TARGET_DEF_H) \\\n+    coretypes.h $(COMMON_TARGET_H) $(COMMON_TARGET_DEF_H) $(PARAMS_H) \\\n     $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(OPTS_H) $(TM_H) $(TM_P_H) $(MACHMODE_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t  $< $(OUTPUT_OPTION)"}, {"sha": "d8ede82e5b6bbc95f5214a6981d3045556ff4530", "filename": "gcc/common/common-target.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fcommon%2Fcommon-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fcommon%2Fcommon-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target.def?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -50,6 +50,13 @@ DEFHOOKPOD\n  \"\",\n  const struct default_options *, empty_optimization_table)\n \n+DEFHOOK\n+(option_default_params,\n+\"Set target-dependent default values for @option{--param} settings, using\\\n+ calls to @code{set_default_param_value}.\",\n+ void, (void),\n+ hook_void_void)\n+\n /* The initial value of target_flags.  */\n DEFHOOKPOD\n (default_target_flags,"}, {"sha": "11682532704600f031f0c0e55baa53c52ee9fb03", "filename": "gcc/common/config/ia64/ia64-common.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"common/common-target-def.h\"\n #include \"opts.h\"\n #include \"flags.h\"\n+#include \"params.h\"\n \n /* Implement overriding of the optimization options.  */\n static const struct default_options ia64_option_optimization_table[] =\n@@ -83,8 +84,25 @@ ia64_except_unwind_info (struct gcc_options *opts)\n   return UI_TARGET;\n }\n \n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+\n+static void\n+ia64_option_default_params (void)\n+{\n+  /* Let the scheduler form additional regions.  */\n+  set_default_param_value (PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS, 2);\n+\n+  /* Set the default values for cache-related parameters.  */\n+  set_default_param_value (PARAM_SIMULTANEOUS_PREFETCHES, 6);\n+  set_default_param_value (PARAM_L1_CACHE_LINE_SIZE, 32);\n+\n+  set_default_param_value (PARAM_SCHED_MEM_TRUE_DEP_COST, 4);\n+}\n+\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE ia64_option_optimization_table\n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS ia64_option_default_params\n \n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO  ia64_except_unwind_info"}, {"sha": "683240f27ba6278cfa2677a8101ceee60c08a1ad", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -28,6 +28,7 @@\n #include \"common/common-target-def.h\"\n #include \"opts.h\"\n #include \"flags.h\"\n+#include \"params.h\"\n \n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options rs6000_option_optimization_table[] =\n@@ -51,6 +52,15 @@ rs6000_option_init_struct (struct gcc_options *opts)\n     opts->x_flag_section_anchors = 1;\n }\n \n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+\n+static void\n+rs6000_option_default_params (void)\n+{\n+  /* Double growth factor to counter reduced min jump length.  */\n+  set_default_param_value (PARAM_MAX_GROW_COPY_BB_INSNS, 16);\n+}\n+\n /* If not otherwise specified by a target, make 'long double' equivalent to\n    'double'.  */\n \n@@ -316,6 +326,9 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT rs6000_option_init_struct\n \n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS rs6000_option_default_params\n+\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE rs6000_option_optimization_table\n "}, {"sha": "5a0c062e7093b7f23ec9b60645fa0372ba034f89", "filename": "gcc/common/config/sh/sh-common.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"common/common-target-def.h\"\n #include \"opts.h\"\n #include \"flags.h\"\n+#include \"params.h\"\n \n /* Set default optimization options.  */\n static const struct default_options sh_option_optimization_table[] =\n@@ -196,10 +197,19 @@ sh_option_init_struct (struct gcc_options *opts)\n   opts->x_flag_finite_math_only = 2;\n }\n \n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+static void\n+sh_option_default_params (void)\n+{\n+  set_default_param_value (PARAM_SIMULTANEOUS_PREFETCHES, 2);\n+}\n+\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE sh_option_optimization_table\n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT sh_option_init_struct\n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS sh_option_default_params\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n #undef TARGET_HANDLE_OPTION"}, {"sha": "421de7e847eff1596f23695385ef01f4e27047c6", "filename": "gcc/common/config/spu/spu-common.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fcommon%2Fconfig%2Fspu%2Fspu-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fcommon%2Fconfig%2Fspu%2Fspu-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fspu%2Fspu-common.c?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -24,6 +24,7 @@\n #include \"common/common-target-def.h\"\n #include \"opts.h\"\n #include \"flags.h\"\n+#include \"params.h\"\n \n static void\n spu_option_init_struct (struct gcc_options *opts)\n@@ -32,12 +33,24 @@ spu_option_init_struct (struct gcc_options *opts)\n   opts->x_flag_rename_registers = 1;\n }\n \n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+static void\n+spu_option_default_params (void)\n+{\n+  /* Override some of the default param values.  With so many registers\n+     larger values are better for these params.  */\n+  set_default_param_value (PARAM_MAX_PENDING_LIST_LENGTH, 128);\n+}\n+\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT)\n \n #undef TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT spu_option_init_struct\n \n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS spu_option_default_params\n+\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO  sjlj_except_unwind_info\n "}, {"sha": "901481358b3e31d16e4986e23d0d405f11f36ffb", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -192,7 +192,6 @@ static rtx gen_fr_spill_x (rtx, rtx, rtx);\n static rtx gen_fr_restore_x (rtx, rtx, rtx);\n \n static void ia64_option_override (void);\n-static void ia64_option_default_params (void);\n static bool ia64_can_eliminate (const int, const int);\n static enum machine_mode hfa_element_mode (const_tree, bool);\n static void ia64_setup_incoming_varargs (cumulative_args_t, enum machine_mode,\n@@ -377,8 +376,6 @@ static const struct attribute_spec ia64_attribute_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE ia64_option_override\n-#undef TARGET_OPTION_DEFAULT_PARAMS\n-#define TARGET_OPTION_DEFAULT_PARAMS ia64_option_default_params\n \n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE ia64_output_function_prologue\n@@ -10859,20 +10856,6 @@ ia64_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1, const_tree ty\n   return NULL;\n }\n \n-/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n-static void\n-ia64_option_default_params (void)\n-{\n-  /* Let the scheduler form additional regions.  */\n-  set_default_param_value (PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS, 2);\n-\n-  /* Set the default values for cache-related parameters.  */\n-  set_default_param_value (PARAM_SIMULTANEOUS_PREFETCHES, 6);\n-  set_default_param_value (PARAM_L1_CACHE_LINE_SIZE, 32);\n-\n-  set_default_param_value (PARAM_SCHED_MEM_TRUE_DEP_COST, 4);\n-}\n-\n /* HP-UX version_id attribute.\n    For object foo, if the version_id is set to 1234 put out an alias\n    of '.alias foo \"foo{1234}\"  We can't use \"foo{1234}\" in anything"}, {"sha": "a87280c8ec49c20aa6507d3b0c3ce826435cc76b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -1045,7 +1045,6 @@ static rtx altivec_expand_vec_set_builtin (tree);\n static rtx altivec_expand_vec_ext_builtin (tree, rtx);\n static int get_element_number (tree, tree);\n static void rs6000_option_override (void);\n-static void rs6000_option_default_params (void);\n static int rs6000_loop_align_max_skip (rtx);\n static int first_altivec_reg_to_save (void);\n static unsigned int compute_vrsave_mask (void);\n@@ -1528,9 +1527,6 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE rs6000_option_override\n \n-#undef TARGET_OPTION_DEFAULT_PARAMS\n-#define TARGET_OPTION_DEFAULT_PARAMS rs6000_option_default_params\n-\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n   rs6000_builtin_vectorized_function\n@@ -3678,15 +3674,6 @@ rs6000_preferred_simd_mode (enum machine_mode mode)\n   return word_mode;\n }\n \n-/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n-\n-static void\n-rs6000_option_default_params (void)\n-{\n-  /* Double growth factor to counter reduced min jump length.  */\n-  set_default_param_value (PARAM_MAX_GROW_COPY_BB_INSNS, 16);\n-}\n-\n /* Handler for the Mathematical Acceleration Subsystem (mass) interface to a\n    library with vectorized intrinsics.  */\n "}, {"sha": "d945156ee86e2298acca8c46ad4ea28d3d0f2eee", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -182,7 +182,6 @@ static int noncall_uses_reg (rtx, rtx, rtx *);\n static rtx gen_block_redirect (rtx, int, int);\n static void sh_reorg (void);\n static void sh_option_override (void);\n-static void sh_option_default_params (void);\n static void output_stack_adjust (int, rtx, int, HARD_REG_SET *, bool);\n static rtx frame_insn (rtx);\n static rtx push (int);\n@@ -345,8 +344,6 @@ static const struct attribute_spec sh_attribute_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE sh_option_override\n-#undef TARGET_OPTION_DEFAULT_PARAMS\n-#define TARGET_OPTION_DEFAULT_PARAMS sh_option_default_params\n \n #undef TARGET_PRINT_OPERAND\n #define TARGET_PRINT_OPERAND sh_print_operand\n@@ -578,14 +575,6 @@ static const struct attribute_spec sh_attribute_table[] =\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-\f\n-/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n-static void\n-sh_option_default_params (void)\n-{\n-  set_default_param_value (PARAM_SIMULTANEOUS_PREFETCHES, 2);\n-}\n-\n /* Implement TARGET_OPTION_OVERRIDE macro.  Validate and override \n    various options, and do some machine dependent initialization.  */\n static void"}, {"sha": "63985e1a76244d1099fef7a1fbec0d78bf5aa75e", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -149,7 +149,6 @@ char regs_ever_allocated[FIRST_PSEUDO_REGISTER];\n \n /*  Prototypes and external defs.  */\n static void spu_option_override (void);\n-static void spu_option_default_params (void);\n static void spu_init_builtins (void);\n static tree spu_builtin_decl (unsigned, bool);\n static bool spu_scalar_mode_supported_p (enum machine_mode mode);\n@@ -487,9 +486,6 @@ static void spu_setup_incoming_varargs (cumulative_args_t cum,\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE spu_option_override\n \n-#undef TARGET_OPTION_DEFAULT_PARAMS\n-#define TARGET_OPTION_DEFAULT_PARAMS spu_option_default_params\n-\n #undef TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE spu_conditional_register_usage\n \n@@ -508,15 +504,6 @@ static void spu_setup_incoming_varargs (cumulative_args_t cum,\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n-/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n-static void\n-spu_option_default_params (void)\n-{\n-  /* Override some of the default param values.  With so many registers\n-     larger values are better for these params.  */\n-  set_default_param_value (PARAM_MAX_PENDING_LIST_LENGTH, 128);\n-}\n-\n /* Implement TARGET_OPTION_OVERRIDE.  */\n static void\n spu_option_override (void)"}, {"sha": "341628bb3ea70196330446bcc148e829de656c07", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -762,7 +762,7 @@ options are changed via @code{#pragma GCC optimize} or by using the\n Set target-dependent initial values of fields in @var{opts}.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_OPTION_DEFAULT_PARAMS (void)\n+@deftypefn {Common Target Hook} void TARGET_OPTION_DEFAULT_PARAMS (void)\n Set target-dependent default values for @option{--param} settings, using calls to @code{set_default_param_value}.\n @end deftypefn\n "}, {"sha": "793ddef924173e3057b2ade463dc14957953b6bf", "filename": "gcc/params.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.c?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -1,5 +1,5 @@\n /* params.c - Run-time parameters.\n-   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>.\n \n@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n+#include \"common/common-target.h\"\n #include \"params.h\"\n #include \"diagnostic-core.h\"\n \n@@ -38,6 +38,14 @@ static size_t num_compiler_params;\n    default values determined.  */\n static bool params_finished;\n \n+static const param_info lang_independent_params[] = {\n+#define DEFPARAM(ENUM, OPTION, HELP, DEFAULT, MIN, MAX) \\\n+  { OPTION, DEFAULT, MIN, MAX, HELP },\n+#include \"params.def\"\n+#undef DEFPARAM\n+  { NULL, 0, 0, 0, NULL }\n+};\n+\n /* Add the N PARAMS to the current list of compiler parameters.  */\n \n void\n@@ -56,6 +64,16 @@ add_params (const param_info params[], size_t n)\n   num_compiler_params += n;\n }\n \n+/* Add all parameters and default values that can be set in both the\n+   driver and the compiler proper.  */\n+\n+void\n+global_init_params (void)\n+{\n+  add_params (lang_independent_params, LAST_PARAM);\n+  targetm_common.option_default_params ();\n+}\n+\n /* Note that all parameters have been added and all default values\n    set.  */\n "}, {"sha": "364029df532c155377983f6c476e06b526956080", "filename": "gcc/params.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -105,6 +105,11 @@ extern void maybe_set_param_value (compiler_param num, int value,\n \n extern void set_default_param_value (compiler_param num, int value);\n \n+/* Add all parameters and default values that can be set in both the\n+   driver and the compiler proper.  */\n+\n+extern void global_init_params (void);\n+\n /* Note that all parameters have been added and all default values\n    set.  */\n extern void finish_params (void);"}, {"sha": "c67f0bacf7f82c45f9dd677b27540fbfeaac5e06", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -2545,13 +2545,6 @@ DEFHOOK\n  void, (void),\n  hook_void_void)\n \n-DEFHOOK\n-(default_params,\n-\"Set target-dependent default values for @option{--param} settings, using\\\n- calls to @code{set_default_param_value}.\",\n- void, (void),\n- hook_void_void)\n-\n /* Function to determine if one function can inline another function.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\""}, {"sha": "8b02b382d60b9736577767fc6c506253b9beba33", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c77620d6dedebfb9f5092de3da0c9870587a734/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4c77620d6dedebfb9f5092de3da0c9870587a734", "patch": "@@ -183,25 +183,9 @@ struct target_flag_state *this_target_flag_state = &default_target_flag_state;\n #define this_target_flag_state (&default_target_flag_state)\n #endif\n \n-typedef struct\n-{\n-  const char *const string;\n-  int *const variable;\n-  const int on_value;\n-}\n-lang_independent_options;\n-\n /* The user symbol prefix after having resolved same.  */\n const char *user_label_prefix;\n \n-static const param_info lang_independent_params[] = {\n-#define DEFPARAM(ENUM, OPTION, HELP, DEFAULT, MIN, MAX) \\\n-  { OPTION, DEFAULT, MIN, MAX, HELP },\n-#include \"params.def\"\n-#undef DEFPARAM\n-  { NULL, 0, 0, 0, NULL }\n-};\n-\n /* Output files for assembler code (real compiler output)\n    and debugging dumps.  */\n \n@@ -1213,10 +1197,10 @@ general_init (const char *argv0)\n   init_reg_sets ();\n \n   /* Register the language-independent parameters.  */\n-  add_params (lang_independent_params, LAST_PARAM);\n-  targetm.target_option.default_params ();\n+  global_init_params ();\n \n-  /* This must be done after add_params but before argument processing.  */\n+  /* This must be done after global_init_params but before argument\n+     processing.  */\n   init_ggc_heuristics();\n   init_optimization_passes ();\n   statistics_early_init ();"}]}