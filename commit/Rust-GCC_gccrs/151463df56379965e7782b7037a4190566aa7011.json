{"sha": "151463df56379965e7782b7037a4190566aa7011", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUxNDYzZGY1NjM3OTk2NWU3NzgyYjcwMzdhNDE5MDU2NmFhNzAxMQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-04-08T06:47:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:47:27Z"}, "message": "2008-04-08  Robert Dewar  <dewar@adacore.com>\n\n\t* a-except-2005.ads, a-except-2005.adb, a-except.ads, a-except.adb\n\t(Raise_Exception): In accordance with AI-446, raise CE for Null_Id\n\t(Raise_Exception_Always): Fix documentation accordingly\n\nFrom-SVN: r134018", "tree": {"sha": "80d6e6738d21140c587d6d5aaa1425eb64b67d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80d6e6738d21140c587d6d5aaa1425eb64b67d18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/151463df56379965e7782b7037a4190566aa7011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151463df56379965e7782b7037a4190566aa7011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151463df56379965e7782b7037a4190566aa7011", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151463df56379965e7782b7037a4190566aa7011/comments", "author": null, "committer": null, "parents": [{"sha": "9392454c583167937227f1fc90892791e712d570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9392454c583167937227f1fc90892791e712d570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9392454c583167937227f1fc90892791e712d570"}], "stats": {"total": 97, "additions": 46, "deletions": 51}, "files": [{"sha": "14624cb81785284710826718bd7171fa8692dc96", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151463df56379965e7782b7037a4190566aa7011/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151463df56379965e7782b7037a4190566aa7011/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=151463df56379965e7782b7037a4190566aa7011", "patch": "@@ -420,11 +420,11 @@ package body Ada.Exceptions is\n    -- Run-Time Check Routines --\n    -----------------------------\n \n-   --  These routines are called from the runtime to raise a specific\n-   --  exception with a reason message attached. The parameters are\n-   --  the file name and line number in each case. The names are keyed\n-   --  to the codes defined in Types.ads and a-types.h (for example,\n-   --  the name Rcheck_05 refers to the Reason whose Pos code is 5).\n+   --  These routines raise a specific exception with a reason message\n+   --  attached. The parameters are the file name and line number in each\n+   --  case. The names are keyed to the codes defined in types.ads and\n+   --  a-types.h (for example, the name Rcheck_05 refers to the Reason\n+   --  RT_Exception_Code'Val (5)).\n \n    procedure Rcheck_00 (File : System.Address; Line : Integer);\n    procedure Rcheck_01 (File : System.Address; Line : Integer);\n@@ -838,20 +838,20 @@ package body Ada.Exceptions is\n      (E       : Exception_Id;\n       Message : String := \"\")\n    is\n+      EF : Exception_Id := E;\n+\n    begin\n-      if E /= null then\n-         Exception_Data.Set_Exception_Msg (E, Message);\n-         Abort_Defer.all;\n-         Raise_Current_Excep (E);\n+      --  Raise CE if E = Null_ID (AI-446)\n+\n+      if E = null then\n+         EF := Constraint_Error'Identity;\n       end if;\n \n-      --  Note: if E is null, then we simply return, which is correct Ada 95\n-      --  semantics. If we are operating in Ada 2005 mode, then the expander\n-      --  generates a raise Constraint_Error immediately following the call\n-      --  to provide the required Ada 2005 semantics (see AI-329). We do it\n-      --  this way to avoid having run time dependencies on the Ada version.\n+      --  Go ahead and raise appropriate exception\n \n-      return;\n+      Exception_Data.Set_Exception_Msg (EF, Message);\n+      Abort_Defer.all;\n+      Raise_Current_Excep (EF);\n    end Raise_Exception;\n \n    ----------------------------"}, {"sha": "79e25123076d157c3e5b24f553a53eed91745c41", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151463df56379965e7782b7037a4190566aa7011/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151463df56379965e7782b7037a4190566aa7011/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=151463df56379965e7782b7037a4190566aa7011", "patch": "@@ -93,12 +93,8 @@ package Ada.Exceptions is\n    pragma Ada_05 (Wide_Wide_Exception_Name);\n \n    procedure Raise_Exception (E : Exception_Id; Message : String := \"\");\n-   --  Note: it would be really nice to give a pragma No_Return for this\n-   --  procedure, but it would be wrong, since Raise_Exception does return\n-   --  if given the null exception. However we do special case the name in\n-   --  the test in the compiler for issuing a warning for a missing return\n-   --  after this call. Program_Error seems reasonable enough in such a case.\n-   --  See also the routine Raise_Exception_Always in the private part.\n+   pragma No_Return (Raise_Exception);\n+   --  Note: In accordance with AI-466, CE is raised if E = Null_Id\n \n    function Exception_Message (X : Exception_Occurrence) return String;\n \n@@ -135,11 +131,10 @@ package Ada.Exceptions is\n      (Source : Exception_Occurrence)\n       return   Exception_Occurrence_Access;\n \n-   --  Ada 2005 (AI-438): The language revision introduces the\n-   --  following subprograms and attribute definitions. We do not\n-   --  provide them explicitly; instead, the corresponding stream\n-   --  attributes are made available through a pragma Stream_Convert\n-   --  in the private part of this package.\n+   --  Ada 2005 (AI-438): The language revision introduces the following\n+   --  subprograms and attribute definitions. We do not provide them\n+   --  explicitly. instead, the corresponding stream attributes are made\n+   --  available through a pragma Stream_Convert in the private part.\n \n    --  procedure Read_Exception_Occurrence\n    --    (Stream : not null access Ada.Streams.Root_Stream_Type'Class;\n@@ -209,10 +204,10 @@ private\n    pragma No_Return (Raise_Exception_Always);\n    pragma Export (Ada, Raise_Exception_Always, \"__gnat_raise_exception\");\n    --  This differs from Raise_Exception only in that the caller has determined\n-   --  that for sure the parameter E is not null, and that therefore the call\n-   --  to this procedure cannot return. The expander converts Raise_Exception\n-   --  calls to Raise_Exception_Always if it can determine this is the case.\n-   --  The Export allows this routine to be accessed from Pure units.\n+   --  that for sure the parameter E is not null, and that therefore no check\n+   --  for Null_Id is required. The expander converts Raise_Exception calls to\n+   --  Raise_Exception_Always if it can determine this is the case. The Export\n+   --  allows this routine to be accessed from Pure units.\n \n    procedure Raise_From_Signal_Handler\n      (E : Exception_Id;"}, {"sha": "7168d48dbfdd9209141f990d4749b8b5b1b5ff21", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151463df56379965e7782b7037a4190566aa7011/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151463df56379965e7782b7037a4190566aa7011/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=151463df56379965e7782b7037a4190566aa7011", "patch": "@@ -377,11 +377,11 @@ package body Ada.Exceptions is\n    -- Run-Time Check Routines --\n    -----------------------------\n \n-   --  These routines are called from the runtime to raise a specific\n-   --  exception with a reason message attached. The parameters are\n-   --  the file name and line number in each case. The names are keyed\n-   --  to the codes defined in Types.ads and a-types.h (for example,\n-   --  the name Rcheck_05 refers to the Reason whose Pos code is 5).\n+   --  These routines raise a specific exception with a reason message\n+   --  attached. The parameters are the file name and line number in each\n+   --  case. The names are keyed to the codes defined in types.ads and\n+   --  a-types.h (for example, the name Rcheck_05 refers to the Reason\n+   --  RT_Exception_Code'Val (5)).\n \n    procedure Rcheck_00 (File : System.Address; Line : Integer);\n    procedure Rcheck_01 (File : System.Address; Line : Integer);\n@@ -807,16 +807,20 @@ package body Ada.Exceptions is\n      (E       : Exception_Id;\n       Message : String := \"\")\n    is\n+      EF : Exception_Id := E;\n+\n    begin\n-      if E /= null then\n-         Exception_Data.Set_Exception_Msg (E, Message);\n-         Abort_Defer.all;\n-         Raise_Current_Excep (E);\n+      --  Raise CE if E = Null_ID (AI-446)\n+\n+      if E = null then\n+         EF := Constraint_Error'Identity;\n       end if;\n \n-      --  Note: if E is null then just return (Ada 95 semantics)\n+      --  Go ahead and raise appropriate exception\n \n-      return;\n+      Exception_Data.Set_Exception_Msg (EF, Message);\n+      Abort_Defer.all;\n+      Raise_Current_Excep (EF);\n    end Raise_Exception;\n \n    ----------------------------"}, {"sha": "e9f5ecd687e257a526d4182a88f6254f433f4d99", "filename": "gcc/ada/a-except.ads", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151463df56379965e7782b7037a4190566aa7011/gcc%2Fada%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151463df56379965e7782b7037a4190566aa7011/gcc%2Fada%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.ads?ref=151463df56379965e7782b7037a4190566aa7011", "patch": "@@ -84,12 +84,8 @@ package Ada.Exceptions is\n    function Exception_Name (Id : Exception_Id) return String;\n \n    procedure Raise_Exception (E : Exception_Id; Message : String := \"\");\n-   --  Note: it would be really nice to give a pragma No_Return for this\n-   --  procedure, but it would be wrong, since Raise_Exception does return if\n-   --  given the null exception in Ada 95 mode. However we do special case the\n-   --  name in the test in the compiler for issuing a warning for a missing\n-   --  return after this call. Program_Error seems reasonable enough in such a\n-   --  case. See also the routine Raise_Exception_Always in the private part.\n+   pragma No_Return (Raise_Exception);\n+   --  Note: In accordance with AI-466, CE is raised if E = Null_Id\n \n    function Exception_Message (X : Exception_Occurrence) return String;\n \n@@ -183,10 +179,10 @@ private\n    pragma No_Return (Raise_Exception_Always);\n    pragma Export (Ada, Raise_Exception_Always, \"__gnat_raise_exception\");\n    --  This differs from Raise_Exception only in that the caller has determined\n-   --  that for sure the parameter E is not null, and that therefore the call\n-   --  to this procedure cannot return. The expander converts Raise_Exception\n-   --  calls to Raise_Exception_Always if it can determine this is the case.\n-   --  The Export allows this routine to be accessed from Pure units.\n+   --  that for sure the parameter E is not null, and that therefore no check\n+   --  for Null_Id is required. The expander converts Raise_Exception calls to\n+   --  Raise_Exception_Always if it can determine this is the case. The Export\n+   --  allows this routine to be accessed from Pure units.\n \n    procedure Raise_From_Signal_Handler\n      (E : Exception_Id;"}]}