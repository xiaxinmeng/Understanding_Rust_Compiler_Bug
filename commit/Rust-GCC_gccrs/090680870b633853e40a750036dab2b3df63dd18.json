{"sha": "090680870b633853e40a750036dab2b3df63dd18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkwNjgwODcwYjYzMzg1M2U0MGE3NTAwMzZkYWIyYjNkZjYzZGQxOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-08T07:16:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-08T07:16:28Z"}, "message": "re PR middle-end/63155 (memory hog)\n\n2018-10-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/63155\n\t* tree-ssa-propagate.c (add_ssa_edge): Do cheap check first.\n\t(ssa_propagation_engine::ssa_propagate): Remove redundant\n\tbitmap bit clearing.\n\nFrom-SVN: r264912", "tree": {"sha": "89927edef4170d368dbd423a021c0b8a43465ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89927edef4170d368dbd423a021c0b8a43465ad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/090680870b633853e40a750036dab2b3df63dd18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090680870b633853e40a750036dab2b3df63dd18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/090680870b633853e40a750036dab2b3df63dd18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090680870b633853e40a750036dab2b3df63dd18/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edec2bad9a076e0360ab2e364a20e5ea66825474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edec2bad9a076e0360ab2e364a20e5ea66825474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edec2bad9a076e0360ab2e364a20e5ea66825474"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "e53b7956644fd20601412755f3aeed91e9b3e319", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090680870b633853e40a750036dab2b3df63dd18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090680870b633853e40a750036dab2b3df63dd18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=090680870b633853e40a750036dab2b3df63dd18", "patch": "@@ -1,3 +1,10 @@\n+2018-10-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/63155\n+\t* tree-ssa-propagate.c (add_ssa_edge): Do cheap check first.\n+\t(ssa_propagation_engine::ssa_propagate): Remove redundant\n+\tbitmap bit clearing.\n+\n 2018-10-05  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR rtl-optimization/86939"}, {"sha": "b1bfdd5c0169e78465aa6c786ce67b356e51b85e", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090680870b633853e40a750036dab2b3df63dd18/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090680870b633853e40a750036dab2b3df63dd18/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=090680870b633853e40a750036dab2b3df63dd18", "patch": "@@ -143,10 +143,12 @@ add_ssa_edge (tree var)\n   FOR_EACH_IMM_USE_FAST (use_p, iter, var)\n     {\n       gimple *use_stmt = USE_STMT (use_p);\n-      basic_block use_bb = gimple_bb (use_stmt);\n+      if (!prop_simulate_again_p (use_stmt))\n+\tcontinue;\n \n       /* If we did not yet simulate the block wait for this to happen\n          and do not add the stmt to the SSA edge worklist.  */\n+      basic_block use_bb = gimple_bb (use_stmt);\n       if (! (use_bb->flags & BB_VISITED))\n \tcontinue;\n \n@@ -157,9 +159,6 @@ add_ssa_edge (tree var)\n \t       & EDGE_EXECUTABLE))\n \tcontinue;\n \n-      if (!prop_simulate_again_p (use_stmt))\n-\tcontinue;\n-\n       bitmap worklist;\n       if (bb_to_cfg_order[gimple_bb (use_stmt)->index] < curr_order)\n \tworklist = ssa_edge_worklist_back;\n@@ -804,7 +803,6 @@ ssa_propagation_engine::ssa_propagate (void)\n       else\n \t{\n \t  curr_order = next_stmt_bb_order;\n-\t  bitmap_clear_bit (ssa_edge_worklist, next_stmt_uid);\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"\\nSimulating statement: \");"}]}