{"sha": "df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYxYTk4YWVjYWQ3NzE2OWI0YzdkY2FkOWIzYmFiN2M1ZDlmMWYyNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-01-22T22:27:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-01-22T22:27:47Z"}, "message": "re PR rtl-optimization/34628 (problems with inlining on ARM)\n\n\tPR rtl-optimization/34628\n\t* combine.c (try_combine): Stop and undo after the first combination\n\tif an autoincrement side-effect on the first insn has effectively\n\tbeen lost.\n\nFrom-SVN: r131744", "tree": {"sha": "f6cd942ff09ad36a0c1afc80f243cd5ceb433923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6cd942ff09ad36a0c1afc80f243cd5ceb433923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24/comments", "author": null, "committer": null, "parents": [{"sha": "ec46053bfa418579cf557fa34b140ddd25f1717b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec46053bfa418579cf557fa34b140ddd25f1717b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec46053bfa418579cf557fa34b140ddd25f1717b"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "b59acd5b85bad887a6cbb5b982f7d890ea1fce58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24", "patch": "@@ -1,3 +1,10 @@\n+2008-01-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/34628\n+\t* combine.c (try_combine): Stop and undo after the first combination\n+\tif an autoincrement side-effect on the first insn has effectively\n+\tbeen lost.\n+\n 2008-01-22  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR target/34529"}, {"sha": "5cfa3051b0d92e1dc3aa8b0807a186efa3d95b38", "filename": "gcc/combine.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24", "patch": "@@ -2751,12 +2751,17 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \n   if (i1 && GET_CODE (newpat) != CLOBBER)\n     {\n-      /* Before we can do this substitution, we must redo the test done\n-\t above (see detailed comments there) that ensures  that I1DEST\n-\t isn't mentioned in any SETs in NEWPAT that are field assignments.  */\n-\n-      if (! combinable_i3pat (NULL_RTX, &newpat, i1dest, NULL_RTX,\n-\t\t\t      0, (rtx*) 0))\n+      /* Check that an autoincrement side-effect on I1 has not been lost.\n+\t This happens if I1DEST is mentioned in I2 and dies there, and\n+\t has disappeared from the new pattern.  */\n+      if ((FIND_REG_INC_NOTE (i1, NULL_RTX) != 0\n+\t   && !i1_feeds_i3\n+\t   && dead_or_set_p (i2, i1dest)\n+\t   && !reg_overlap_mentioned_p (i1dest, newpat))\n+\t  /* Before we can do this substitution, we must redo the test done\n+\t     above (see detailed comments there) that ensures  that I1DEST\n+\t     isn't mentioned in any SETs in NEWPAT that are field assignments.  */\n+          || !combinable_i3pat (NULL_RTX, &newpat, i1dest, NULL_RTX, 0, 0))\n \t{\n \t  undo_all ();\n \t  return 0;"}, {"sha": "4ae4df9dd3c3a64ce591b5079755b6c41aab7adf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24", "patch": "@@ -1,3 +1,7 @@\n+2008-01-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20080122-1.c: New test.\n+\n 2008-01-22  Tom Tromey  <tromey@redhat.com>\n \n \tPR c++/34859:"}, {"sha": "a2f7fed87e0d8e7f7fc7e974566e7f01f2dc7d5c", "filename": "gcc/testsuite/gcc.c-torture/execute/20080122-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20080122-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20080122-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20080122-1.c?ref=df1a98aecad77169b4c7dcad9b3bab7c5d9f1f24", "patch": "@@ -0,0 +1,35 @@\n+/* PR rtl-optimization/34628 */\n+/* Origin: Martin Michlmayr <tbm@cyrius.com> */\n+\n+typedef unsigned short u16;\n+typedef unsigned char u8;\n+\n+static void\n+do_segfault(u8 in_buf[], const u8 out_buf[], const int len)\n+{\n+  int i;\n+\n+  for (i = 0; i < len; i++) {\n+    asm(\"\");\n+\n+    in_buf[2*i] = (   out_buf[2*i] | out_buf[(2*i)+1]<<8  ) & 0xFF;\n+\n+    asm(\"\");\n+\n+    in_buf[(2*i)+1] =  ( out_buf[2*i] | out_buf[(2*i)+1]<<8 ) >> 8;\n+\n+    asm(\"\");\n+  }\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+  u8 outbuf[32] = \"buffer     \";\n+  u8 inbuf[32] = \"\\f\";\n+\n+  asm(\"\");\n+  do_segfault(inbuf, outbuf, 12);\n+  asm(\"\");\n+\n+  return 0;\n+}"}]}