{"sha": "49ddab16992f33d251e22ec575b936a98e276a0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkZGFiMTY5OTJmMzNkMjUxZTIyZWM1NzViOTM2YTk4ZTI3NmEwZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-06-10T20:41:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-06-10T20:41:40Z"}, "message": "local-alloc.c (update_equiv_regs): Ignore insns that read or write registers that are likely to be spilled.\n\n        * local-alloc.c (update_equiv_regs): Ignore insns that read or\n        write registers that are likely to be spilled.\n\nFrom-SVN: r12272", "tree": {"sha": "c3cff8ed8db4190cdb3b9dce571c98c8ea5b914f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3cff8ed8db4190cdb3b9dce571c98c8ea5b914f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49ddab16992f33d251e22ec575b936a98e276a0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ddab16992f33d251e22ec575b936a98e276a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ddab16992f33d251e22ec575b936a98e276a0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ddab16992f33d251e22ec575b936a98e276a0e/comments", "author": null, "committer": null, "parents": [{"sha": "d7ff155ff0a8cf3a291a4b1d8360b6f2b5e302dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ff155ff0a8cf3a291a4b1d8360b6f2b5e302dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ff155ff0a8cf3a291a4b1d8360b6f2b5e302dd"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "b8b8b9abd7cbd442234f1709b51bf39faaf04941", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddab16992f33d251e22ec575b936a98e276a0e/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddab16992f33d251e22ec575b936a98e276a0e/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=49ddab16992f33d251e22ec575b936a98e276a0e", "patch": "@@ -973,7 +973,7 @@ update_equiv_regs ()\n     {\n       rtx note;\n       rtx set = single_set (insn);\n-      rtx dest;\n+      rtx dest, src;\n       int regno;\n \n       if (GET_CODE (insn) == NOTE)\n@@ -989,6 +989,7 @@ update_equiv_regs ()\n \tcontinue;\n \n       dest = SET_DEST (set);\n+      src = SET_SRC (set);\n \n       /* If this sets a MEM to the contents of a REG that is only used\n \t in a single basic block, see if the register is always equivalent\n@@ -1024,10 +1025,15 @@ update_equiv_regs ()\n \toptimize_reg_copy_2 (insn, dest, SET_SRC (set));\n \n       /* Otherwise, we only handle the case of a pseudo register being set\n-\t once.  */\n+\t once and only if neither the source nor the destination are\n+\t in a register class that's likely to be spilled.  */\n       if (GET_CODE (dest) != REG\n \t  || (regno = REGNO (dest)) < FIRST_PSEUDO_REGISTER\n-\t  || reg_n_sets[regno] != 1)\n+\t  || reg_n_sets[regno] != 1\n+\t  || CLASS_LIKELY_SPILLED_P (reg_preferred_class (REGNO (dest)))\n+\t  || (GET_CODE (src) == REG\n+\t      && REGNO (src) >= FIRST_PSEUDO_REGISTER\n+\t      && CLASS_LIKELY_SPILLED_P (reg_preferred_class (REGNO (src)))))\n \tcontinue;\n \n       note = find_reg_note (insn, REG_EQUAL, NULL_RTX);"}]}