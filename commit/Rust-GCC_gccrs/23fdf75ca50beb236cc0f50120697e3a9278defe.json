{"sha": "23fdf75ca50beb236cc0f50120697e3a9278defe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmZGY3NWNhNTBiZWIyMzZjYzBmNTAxMjA2OTdlM2E5Mjc4ZGVmZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-10-19T08:25:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-10-19T08:25:12Z"}, "message": "mips.c (mips16_fp_args): Remove the FILE argument and use asm_out_file instead.\n\ngcc/\n\t* config/mips/mips.c (mips16_fp_args): Remove the FILE argument and\n\tuse asm_out_file instead.\n\t(build_mips16_function_stub): Likewise.\n\t(build_mips16_call_stub, mips_output_function_prologue): Update\n\taccordingly.\n\nFrom-SVN: r129474", "tree": {"sha": "9539c25606b9d4534b8a0b9d295a2f20886550f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9539c25606b9d4534b8a0b9d295a2f20886550f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23fdf75ca50beb236cc0f50120697e3a9278defe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fdf75ca50beb236cc0f50120697e3a9278defe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23fdf75ca50beb236cc0f50120697e3a9278defe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fdf75ca50beb236cc0f50120697e3a9278defe/comments", "author": null, "committer": null, "parents": [{"sha": "9eeaed6ec41bb97d84e38fc81339e36b0598a442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eeaed6ec41bb97d84e38fc81339e36b0598a442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eeaed6ec41bb97d84e38fc81339e36b0598a442"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "a113b56f05aa1c3b6633a243cb3f076613717803", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fdf75ca50beb236cc0f50120697e3a9278defe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fdf75ca50beb236cc0f50120697e3a9278defe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23fdf75ca50beb236cc0f50120697e3a9278defe", "patch": "@@ -1,3 +1,11 @@\n+2007-10-19  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* config/mips/mips.c (mips16_fp_args): Remove the FILE argument and\n+\tuse asm_out_file instead.\n+\t(build_mips16_function_stub): Likewise.\n+\t(build_mips16_call_stub, mips_output_function_prologue): Update\n+\taccordingly.\n+\n 2007-10-18  David S. Miller  <davem@davemloft.net>\n \n \tAdd Niagara-2 support."}, {"sha": "23a318a8ca3c3172b17c96b9671ad6528ebcfc5b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fdf75ca50beb236cc0f50120697e3a9278defe/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fdf75ca50beb236cc0f50120697e3a9278defe/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=23fdf75ca50beb236cc0f50120697e3a9278defe", "patch": "@@ -5068,13 +5068,13 @@ mips16_call_stub_mode_suffix (enum machine_mode mode)\n }\n \n /* Write out code to move floating point arguments in or out of\n-   general registers.  Output the instructions to FILE.  FP_CODE is\n-   the code describing which arguments are present (see the comment at\n-   the definition of CUMULATIVE_ARGS in mips.h).  FROM_FP_P is nonzero if\n-   we are copying from the floating point registers.  */\n+   general registers.  FP_CODE is the code describing which arguments\n+   are present (see the comment at the definition of CUMULATIVE_ARGS in\n+   mips.h).  FROM_FP_P is nonzero if we are copying from the floating\n+   point registers.  */\n \n static void\n-mips16_fp_args (FILE *file, int fp_code, int from_fp_p)\n+mips16_fp_args (int fp_code, int from_fp_p)\n {\n   const char *s;\n   int gparg, fparg;\n@@ -5108,26 +5108,26 @@ mips16_fp_args (FILE *file, int fp_code, int from_fp_p)\n       fparg = mips_arg_regno (&info, true);\n \n       if (mode == SFmode)\n-\tfprintf (file, \"\\t%s\\t%s,%s\\n\", s,\n+\tfprintf (asm_out_file, \"\\t%s\\t%s,%s\\n\", s,\n \t\t reg_names[gparg], reg_names[fparg]);\n       else if (TARGET_64BIT)\n-\tfprintf (file, \"\\td%s\\t%s,%s\\n\", s,\n+\tfprintf (asm_out_file, \"\\td%s\\t%s,%s\\n\", s,\n \t\t reg_names[gparg], reg_names[fparg]);\n       else if (ISA_HAS_MXHC1)\n \t/* -mips32r2 -mfp64 */\n-\tfprintf (file, \"\\t%s\\t%s,%s\\n\\t%s\\t%s,%s\\n\",\n+\tfprintf (asm_out_file, \"\\t%s\\t%s,%s\\n\\t%s\\t%s,%s\\n\",\n \t\t s,\n \t\t reg_names[gparg + (WORDS_BIG_ENDIAN ? 1 : 0)],\n \t\t reg_names[fparg],\n \t\t from_fp_p ? \"mfhc1\" : \"mthc1\",\n \t\t reg_names[gparg + (WORDS_BIG_ENDIAN ? 0 : 1)],\n \t\t reg_names[fparg]);\n       else if (TARGET_BIG_ENDIAN)\n-\tfprintf (file, \"\\t%s\\t%s,%s\\n\\t%s\\t%s,%s\\n\", s,\n+\tfprintf (asm_out_file, \"\\t%s\\t%s,%s\\n\\t%s\\t%s,%s\\n\", s,\n \t\t reg_names[gparg], reg_names[fparg + 1], s,\n \t\t reg_names[gparg + 1], reg_names[fparg]);\n       else\n-\tfprintf (file, \"\\t%s\\t%s,%s\\n\\t%s\\t%s,%s\\n\", s,\n+\tfprintf (asm_out_file, \"\\t%s\\t%s,%s\\n\\t%s\\t%s,%s\\n\", s,\n \t\t reg_names[gparg], reg_names[fparg], s,\n \t\t reg_names[gparg + 1], reg_names[fparg + 1]);\n \n@@ -5141,7 +5141,7 @@ mips16_fp_args (FILE *file, int fp_code, int from_fp_p)\n    then jumps to the 16-bit code.  */\n \n static void\n-build_mips16_function_stub (FILE *file)\n+build_mips16_function_stub (void)\n {\n   const char *fnname;\n   char *secname, *stubname;\n@@ -5161,42 +5161,44 @@ build_mips16_function_stub (FILE *file)\n   DECL_SECTION_NAME (stubdecl) = build_string (strlen (secname), secname);\n   DECL_RESULT (stubdecl) = build_decl (RESULT_DECL, NULL_TREE, void_type_node);\n \n-  fprintf (file, \"\\t# Stub function for %s (\", current_function_name ());\n+  fprintf (asm_out_file, \"\\t# Stub function for %s (\",\n+\t   current_function_name ());\n   need_comma = 0;\n   for (f = (unsigned int) current_function_args_info.fp_code; f != 0; f >>= 2)\n     {\n-      fprintf (file, \"%s%s\",\n+      fprintf (asm_out_file, \"%s%s\",\n \t       need_comma ? \", \" : \"\",\n \t       (f & 3) == 1 ? \"float\" : \"double\");\n       need_comma = 1;\n     }\n-  fprintf (file, \")\\n\");\n+  fprintf (asm_out_file, \")\\n\");\n \n-  fprintf (file, \"\\t.set\\tnomips16\\n\");\n+  fprintf (asm_out_file, \"\\t.set\\tnomips16\\n\");\n   switch_to_section (function_section (stubdecl));\n-  ASM_OUTPUT_ALIGN (file, floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT));\n+  ASM_OUTPUT_ALIGN (asm_out_file,\n+\t\t    floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT));\n \n   /* ??? If FUNCTION_NAME_ALREADY_DECLARED is defined, then we are\n      within a .ent, and we cannot emit another .ent.  */\n   if (!FUNCTION_NAME_ALREADY_DECLARED)\n     {\n-      fputs (\"\\t.ent\\t\", file);\n-      assemble_name (file, stubname);\n-      fputs (\"\\n\", file);\n+      fputs (\"\\t.ent\\t\", asm_out_file);\n+      assemble_name (asm_out_file, stubname);\n+      fputs (\"\\n\", asm_out_file);\n     }\n \n-  assemble_name (file, stubname);\n-  fputs (\":\\n\", file);\n+  assemble_name (asm_out_file, stubname);\n+  fputs (\":\\n\", asm_out_file);\n \n   /* We don't want the assembler to insert any nops here.  */\n-  fprintf (file, \"\\t.set\\tnoreorder\\n\");\n+  fprintf (asm_out_file, \"\\t.set\\tnoreorder\\n\");\n \n-  mips16_fp_args (file, current_function_args_info.fp_code, 1);\n+  mips16_fp_args (current_function_args_info.fp_code, 1);\n \n   fprintf (asm_out_file, \"\\t.set\\tnoat\\n\");\n   fprintf (asm_out_file, \"\\tla\\t%s,\", reg_names[GP_REG_FIRST + 1]);\n-  assemble_name (file, fnname);\n-  fprintf (file, \"\\n\");\n+  assemble_name (asm_out_file, fnname);\n+  fprintf (asm_out_file, \"\\n\");\n   fprintf (asm_out_file, \"\\tjr\\t%s\\n\", reg_names[GP_REG_FIRST + 1]);\n   fprintf (asm_out_file, \"\\t.set\\tat\\n\");\n \n@@ -5205,15 +5207,15 @@ build_mips16_function_stub (FILE *file)\n      available for one instruction, so if the very first instruction\n      in the function refers to the register, it will see the wrong\n      value.  */\n-  fprintf (file, \"\\tnop\\n\");\n+  fprintf (asm_out_file, \"\\tnop\\n\");\n \n-  fprintf (file, \"\\t.set\\treorder\\n\");\n+  fprintf (asm_out_file, \"\\t.set\\treorder\\n\");\n \n   if (!FUNCTION_NAME_ALREADY_DECLARED)\n     {\n-      fputs (\"\\t.end\\t\", file);\n-      assemble_name (file, stubname);\n-      fputs (\"\\n\", file);\n+      fputs (\"\\t.end\\t\", asm_out_file);\n+      assemble_name (asm_out_file, stubname);\n+      fputs (\"\\n\", asm_out_file);\n     }\n \n   switch_to_section (function_section (current_function_decl));\n@@ -5450,7 +5452,7 @@ build_mips16_call_stub (rtx retval, rtx fn, rtx arg_size, int fp_code)\n       /* We don't want the assembler to insert any nops here.  */\n       fprintf (asm_out_file, \"\\t.set\\tnoreorder\\n\");\n \n-      mips16_fp_args (asm_out_file, fp_code, 0);\n+      mips16_fp_args (fp_code, 0);\n \n       if (! fpret)\n \t{\n@@ -8223,7 +8225,7 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n   if (TARGET_MIPS16\n       && TARGET_HARD_FLOAT_ABI\n       && current_function_args_info.fp_code != 0)\n-    build_mips16_function_stub (file);\n+    build_mips16_function_stub ();\n \n   /* Select the mips16 mode for this function.  */\n   if (TARGET_MIPS16)"}]}