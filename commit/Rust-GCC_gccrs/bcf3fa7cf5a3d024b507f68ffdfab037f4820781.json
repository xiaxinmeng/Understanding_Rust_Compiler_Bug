{"sha": "bcf3fa7cf5a3d024b507f68ffdfab037f4820781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmM2ZhN2NmNWEzZDAyNGI1MDdmNjhmZmRmYWIwMzdmNDgyMDc4MQ==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-01-29T14:23:22Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-01-29T14:25:55Z"}, "message": "IRA: Revert 11b8091fb to fix PR 93221\n\nA previous change to simplify LRA introduced in 11b809 (From-SVN: r279550)\ndisabled hard register splitting for -O0. This causes a problem on aarch64 in\ncases where parameters are passed in multiple registers (in the bug report an OI\npassed in 2 V4SI registers). This is mandated by the AAPCS.\n\ngcc/ChangeLog:\n2020-01-29  Joel Hutton  <Joel.Hutton@arm.com>\n\n\tPR target/93221\n\t* ira.c (ira): Revert use of simplified LRA algorithm.\n\ngcc/testsuite/ChangeLog:\n2020-01-29  Joel Hutton  <Joel.Hutton@arm.com>\n\n\tPR target/93221\n\t* gcc.target/aarch64/pr93221.c: New test.", "tree": {"sha": "e92cd8b81a79f2c5f85d526e9d970b9ea862089f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e92cd8b81a79f2c5f85d526e9d970b9ea862089f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcf3fa7cf5a3d024b507f68ffdfab037f4820781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf3fa7cf5a3d024b507f68ffdfab037f4820781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf3fa7cf5a3d024b507f68ffdfab037f4820781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f214ffb336d582a66149068a2a96b7fcf395b5de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f214ffb336d582a66149068a2a96b7fcf395b5de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f214ffb336d582a66149068a2a96b7fcf395b5de"}], "stats": {"total": 72, "additions": 49, "deletions": 23}, "files": [{"sha": "67d24c74c3d5c7f2d9c009ae0c3f6fddf01296f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcf3fa7cf5a3d024b507f68ffdfab037f4820781", "patch": "@@ -1,3 +1,8 @@\n+2020-01-29  Joel Hutton  <Joel.Hutton@arm.com>\n+\n+\tPR target/93221\n+\t* ira.c (ira): Revert use of simplified LRA algorithm.\n+\n 2020-01-29  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/92706"}, {"sha": "c8b5f869da121506f0414901271eae9810689316", "filename": "gcc/ira.c", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=bcf3fa7cf5a3d024b507f68ffdfab037f4820781", "patch": "@@ -5205,35 +5205,27 @@ ira (FILE *f)\n   /* Perform target specific PIC register initialization.  */\n   targetm.init_pic_reg ();\n \n-  if (optimize)\n-    {\n-      ira_conflicts_p = true;\n-\n-      /* Determine the number of pseudos actually requiring coloring.  */\n-      unsigned int num_used_regs = 0;\n-      for (unsigned int i = FIRST_PSEUDO_REGISTER; i < DF_REG_SIZE (df); i++)\n-\tif (DF_REG_DEF_COUNT (i) || DF_REG_USE_COUNT (i))\n-\t  num_used_regs++;\n-\n-      /* If there are too many pseudos and/or basic blocks (e.g. 10K\n-\t pseudos and 10K blocks or 100K pseudos and 1K blocks), we will\n-\t use simplified and faster algorithms in LRA.  */\n-      lra_simple_p\n-\t= ira_use_lra_p\n-\t  && num_used_regs >= (1U << 26) / last_basic_block_for_fn (cfun);\n-    }\n-  else\n-    {\n-      ira_conflicts_p = false;\n-      lra_simple_p = ira_use_lra_p;\n-    }\n+  ira_conflicts_p = optimize > 0;\n+\n+  /* Determine the number of pseudos actually requiring coloring.  */\n+  unsigned int num_used_regs = 0;\n+  for (unsigned int i = FIRST_PSEUDO_REGISTER; i < DF_REG_SIZE (df); i++)\n+    if (DF_REG_DEF_COUNT (i) || DF_REG_USE_COUNT (i))\n+      num_used_regs++;\n+\n+  /* If there are too many pseudos and/or basic blocks (e.g. 10K\n+     pseudos and 10K blocks or 100K pseudos and 1K blocks), we will\n+     use simplified and faster algorithms in LRA.  */\n+  lra_simple_p\n+    = ira_use_lra_p\n+      && num_used_regs >= (1U << 26) / last_basic_block_for_fn (cfun);\n \n   if (lra_simple_p)\n     {\n       /* It permits to skip live range splitting in LRA.  */\n       flag_caller_saves = false;\n       /* There is no sense to do regional allocation when we use\n-\t simplified LRA.  */\n+\tsimplified LRA.  */\n       flag_ira_region = IRA_REGION_ONE;\n       ira_conflicts_p = false;\n     }"}, {"sha": "7b369d5734e361534cdfb6d4b8b45c8ac7773e1f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcf3fa7cf5a3d024b507f68ffdfab037f4820781", "patch": "@@ -1,3 +1,8 @@\n+2020-01-29  Joel Hutton  <Joel.Hutton@arm.com>\n+\n+\tPR target/93221\n+\t* gcc.target/aarch64/pr93221.c: New test.\n+\n 2020-01-29  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/92706"}, {"sha": "7885cd6e4c2639f553a68edcbd70203d1b7b13bb", "filename": "gcc/testsuite/gcc.dg/vect/pr92429.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr92429.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr92429.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr92429.c?ref=bcf3fa7cf5a3d024b507f68ffdfab037f4820781", "patch": "@@ -0,0 +1,14 @@\n+/* PR92429 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O1 -fno-tree-fre\" } */\n+/* { dg-additional-options \"-mavx2\" { target { x86_64-*-* i?86-*-* } } } */\n+\n+void\n+as (int *gl, int k1)\n+{\n+  while (k1 < 1)\n+    {\n+      gl[k1] = gl[k1] * gl[k1] / 2;\n+      ++k1;\n+    }\n+}"}, {"sha": "4dc2c3d0149423dd3d666f7428277ffa9eb765c4", "filename": "gcc/testsuite/gcc.target/aarch64/pr93221.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93221.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf3fa7cf5a3d024b507f68ffdfab037f4820781/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93221.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93221.c?ref=bcf3fa7cf5a3d024b507f68ffdfab037f4820781", "patch": "@@ -0,0 +1,10 @@\n+/* PR target/93221 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mno-omit-leaf-frame-pointer\" } */\n+\n+struct S { __Int32x4_t b[2]; };\n+\n+void\n+foo (struct S x)\n+{\n+}"}]}