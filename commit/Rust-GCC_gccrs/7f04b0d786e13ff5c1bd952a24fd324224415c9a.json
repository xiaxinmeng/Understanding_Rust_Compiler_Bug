{"sha": "7f04b0d786e13ff5c1bd952a24fd324224415c9a", "node_id": "C_kwDOANBUbNoAKDdmMDRiMGQ3ODZlMTNmZjVjMWJkOTUyYTI0ZmQzMjQyMjQ0MTVjOWE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-11T09:53:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-11T12:34:30Z"}, "message": "Implement some of fold_binary_op_with_conditional_arg in match.pd\n\nThe following allows (c != 0 ? 0 : 100) != 0 to be simplified as\nc != 0 as fold_binary_op_with_conditional_arg would have done\nvia forwprop and GENERIC folding.  Likewise it allows to combine\n(a != 0) != 0 directly via match.pd instead of only via\nforwprop and again fold_binary_op_with_conditional_arg.\n\nThe patterns do not fully implement all cases of\nfold_binary_op_with_conditional_arg, some aspects like\n\"any of the operands simplify\" cannot currently be expressed.\n\n2022-05-11  Richard Biener  <rguenther@suse.de>\n\n\t* generic-match-head.cc: Include tree-eh.h.\n\t* match.pd ((cond ...) cmp X): New simplification inspired\n\tby fold_binary_op_with_conditional_arg.\n\t(eq/ne (cmp ...) true/false): Likewise.\n\n\t* gcc.dg/tree-ssa/pr61839_1.c: Adjust.\n\t* gcc.dg/tree-ssa/vrp24.c: Likewise.", "tree": {"sha": "1d4fceaf86289ad02d0c2cc2385346569de8e74d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d4fceaf86289ad02d0c2cc2385346569de8e74d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f04b0d786e13ff5c1bd952a24fd324224415c9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f04b0d786e13ff5c1bd952a24fd324224415c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f04b0d786e13ff5c1bd952a24fd324224415c9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f04b0d786e13ff5c1bd952a24fd324224415c9a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876ac21b7e796f9efb859dfb46ae2a4126b0b782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876ac21b7e796f9efb859dfb46ae2a4126b0b782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/876ac21b7e796f9efb859dfb46ae2a4126b0b782"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "cb0fbd32fa6fbea7b3c96462bf54abe891396fd6", "filename": "gcc/generic-match-head.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f04b0d786e13ff5c1bd952a24fd324224415c9a/gcc%2Fgeneric-match-head.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f04b0d786e13ff5c1bd952a24fd324224415c9a/gcc%2Fgeneric-match-head.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgeneric-match-head.cc?ref=7f04b0d786e13ff5c1bd952a24fd324224415c9a", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs-tree.h\"\n #include \"dbgcnt.h\"\n #include \"tm.h\"\n+#include \"tree-eh.h\"\n \n /* Routine to determine if the types T1 and T2 are effectively\n    the same for GENERIC.  If T1 or T2 is not a type, the test"}, {"sha": "f5efa77560c5b606317c0841b657fe044243d305", "filename": "gcc/match.pd", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f04b0d786e13ff5c1bd952a24fd324224415c9a/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f04b0d786e13ff5c1bd952a24fd324224415c9a/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=7f04b0d786e13ff5c1bd952a24fd324224415c9a", "patch": "@@ -4656,7 +4656,34 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (if (ic == icmp)\n     (icmp @0 @1)\n     (if (ic == ncmp)\n-     (ncmp @0 @1))))))\n+     (ncmp @0 @1)))))\n+ /* The following bits are handled by fold_binary_op_with_conditional_arg.  */\n+ (simplify\n+  (ne (cmp@2 @0 @1) integer_zerop)\n+  (if (types_match (type, TREE_TYPE (@2)))\n+   (cmp @0 @1)))\n+ (simplify\n+  (eq (cmp@2 @0 @1) integer_truep)\n+  (if (types_match (type, TREE_TYPE (@2)))\n+   (cmp @0 @1)))\n+ (simplify\n+  (ne (cmp@2 @0 @1) integer_truep)\n+  (if (types_match (type, TREE_TYPE (@2)))\n+   (with { enum tree_code ic = invert_tree_comparison\n+\t     (cmp, HONOR_NANS (@0)); }\n+    (if (ic == icmp)\n+     (icmp @0 @1)\n+     (if (ic == ncmp)\n+      (ncmp @0 @1))))))\n+ (simplify\n+  (eq (cmp@2 @0 @1) integer_zerop)\n+  (if (types_match (type, TREE_TYPE (@2)))\n+   (with { enum tree_code ic = invert_tree_comparison\n+\t     (cmp, HONOR_NANS (@0)); }\n+    (if (ic == icmp)\n+     (icmp @0 @1)\n+     (if (ic == ncmp)\n+      (ncmp @0 @1)))))))\n \n /* Transform comparisons of the form X - Y CMP 0 to X CMP Y.\n    ??? The transformation is valid for the other operators if overflow\n@@ -5486,6 +5513,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp (bit_and@2 @0 integer_pow2p@1) @1)\n   (icmp @2 { build_zero_cst (TREE_TYPE (@0)); })))\n \n+/* From fold_binary_op_with_conditional_arg handle the case of\n+   rewriting (a ? b : c) > d to a ? (b > d) : (c > d) when the\n+   compares simplify.  */\n+(for cmp (simple_comparison)\n+ (simplify\n+  (cmp:c (cond @0 @1 @2) @3)\n+  /* Do not move possibly trapping operations into the conditional as this\n+     pessimizes code and causes gimplification issues when applied late.  */\n+  (if (!FLOAT_TYPE_P (TREE_TYPE (@3))\n+       || operation_could_trap_p (cmp, true, false, @3))\n+   (cond @0 (cmp! @1 @3) (cmp! @2 @3)))))\n+\n (for cmp (ge lt)\n /* x < 0 ? ~y : y into (x >> (prec-1)) ^ y. */\n /* x >= 0 ? ~y : y into ~((x >> (prec-1)) ^ y). */"}, {"sha": "d41256736a2d056780774ebdfc16e3f19d76a73a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f04b0d786e13ff5c1bd952a24fd324224415c9a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f04b0d786e13ff5c1bd952a24fd324224415c9a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c?ref=7f04b0d786e13ff5c1bd952a24fd324224415c9a", "patch": "@@ -38,7 +38,7 @@ int main ()\n }\n \n /* Scan for c = 972195717) >> [0, 1] in function foo.  */\n-/* { dg-final { scan-tree-dump-times \"486097858 : 972195717\" 1  \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"972195717 : 486097858\" 1  \"vrp1\" } } */\n \n /* Previously we were checking for two ?: with constant PHI arguments,\n    but now we collapse them into one.  */"}, {"sha": "c28ca473fc6c2083b8427f3315b7b5530eceadba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp24.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f04b0d786e13ff5c1bd952a24fd324224415c9a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f04b0d786e13ff5c1bd952a24fd324224415c9a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c?ref=7f04b0d786e13ff5c1bd952a24fd324224415c9a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-forwprop -fdump-tree-evrp-details -fdump-tree-optimized -fno-tree-ccp\" } */\n+/* { dg-options \"-O2 -fno-tree-forwprop -fdump-tree-evrp-details -fdump-tree-optimized -fno-tree-ccp --param logical-op-non-short-circuit=1\" } */\n \n \n struct rtx_def;\n@@ -89,5 +89,5 @@ sss (rtx insn, int code1, int code2, int code3)\n    boolean operation.  */\n \n /* { dg-final { scan-tree-dump-times \"Simplified relational\" 2 \"evrp\" } } */\n-/* { dg-final { scan-tree-dump-times \"if \" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 3 \"optimized\" } } */\n "}]}