{"sha": "1e466f0496649db71f5e62881feea8ee59e09874", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU0NjZmMDQ5NjY0OWRiNzFmNWU2Mjg4MWZlZWE4ZWU1OWUwOTg3NA==", "commit": {"author": {"name": "Graham Markall", "email": "graham.markall@embecosm.com", "date": "2017-05-31T13:15:33Z"}, "committer": {"name": "Andrew Burgess", "email": "aburgess@gcc.gnu.org", "date": "2017-05-31T13:15:33Z"}, "message": "[ARC] Recognise add_n and sub_n in combine again\n\nSince the combine pass canonicalises shift-add insns using plus and\nashift (as opposed to plus and mult which it previously used to do), it\nno longer creates *add_n or *sub_n insns, as the patterns match plus and\nmult only. The outcome of this is that some opportunities to generate\nadd{1,2,3} and sub{1,2,3} instructions are missed.\n\nThis change adds additional *add_n and *sub_n insns that match the\nplus-ashift pattern. The original *add_n and *sub_n insns are still left\nin, as they are sometimes generated later on by constant propagation.\nThe idea of adding these insns is modelled on the changes in:\n\n  https://gcc.gnu.org/ml/gcc-patches/2015-05/msg01882.html\n\nwhich addresses a similar issue for the PA target.\n\nFor the small test cases that are added, even if the combine pass misses\nthe opportunity to generate addN or subN, constant propagation manages\nto do so, so the rtl of the combine pass is checked.\n\ngcc/ChangeLog:\n\n        * config/arc/arc.c (arc_print_operand): Handle constant operands.\n        (arc_rtx_costs): Add costs for new patterns.\n        * config/arc/arc.md: Additional *add_n and *sub_n patterns.\n        * config/arc/predicates.md: Add _1_2_3_operand predicate.\n\ngcc/testsuite/ChangeLog:\n\n        * gcc.target/arc/add_n-combine.c: New test.\n        * gcc.target/arc/sub_n-combine.c: New test.\n\nFrom-SVN: r248735", "tree": {"sha": "c71ae273ffc9110bb43e8ae1947315de87e1e4f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c71ae273ffc9110bb43e8ae1947315de87e1e4f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e466f0496649db71f5e62881feea8ee59e09874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e466f0496649db71f5e62881feea8ee59e09874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e466f0496649db71f5e62881feea8ee59e09874", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e466f0496649db71f5e62881feea8ee59e09874/comments", "author": {"login": "gmarkall", "id": 535640, "node_id": "MDQ6VXNlcjUzNTY0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/535640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmarkall", "html_url": "https://github.com/gmarkall", "followers_url": "https://api.github.com/users/gmarkall/followers", "following_url": "https://api.github.com/users/gmarkall/following{/other_user}", "gists_url": "https://api.github.com/users/gmarkall/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmarkall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmarkall/subscriptions", "organizations_url": "https://api.github.com/users/gmarkall/orgs", "repos_url": "https://api.github.com/users/gmarkall/repos", "events_url": "https://api.github.com/users/gmarkall/events{/privacy}", "received_events_url": "https://api.github.com/users/gmarkall/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "046a84762b7954d43d14aa8b7e48bf07b8117270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046a84762b7954d43d14aa8b7e48bf07b8117270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046a84762b7954d43d14aa8b7e48bf07b8117270"}], "stats": {"total": 132, "additions": 128, "deletions": 4}, "files": [{"sha": "f42b287413ba21c80589c3dbdf7559661ed3139c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e466f0496649db71f5e62881feea8ee59e09874", "patch": "@@ -1,3 +1,10 @@\n+2017-05-31  Graham Markall  <graham.markall@embecosm.com>\n+\n+\t* config/arc/arc.c (arc_print_operand): Handle constant operands.\n+\t(arc_rtx_costs): Add costs for new patterns.\n+\t* config/arc/arc.md: Additional *add_n and *sub_n patterns.\n+\t* config/arc/predicates.md: Add _1_2_3_operand predicate.\n+\n 2017-05-31  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-ssa-strlen.c (get_next_strinfo): New function."}, {"sha": "42730d55d8049584473cd6fb690e1fe6be757f1a", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=1e466f0496649db71f5e62881feea8ee59e09874", "patch": "@@ -3483,6 +3483,14 @@ arc_print_operand (FILE *file, rtx x, int code)\n \n       return;\n \n+    case 'c':\n+      if (GET_CODE (x) == CONST_INT)\n+        fprintf (file, \"%d\", INTVAL (x) );\n+      else\n+        output_operand_lossage (\"invalid operands to %%c code\");\n+\n+      return;\n+\n     case 'M':\n       if (GET_CODE (x) == CONST_INT)\n \tfprintf (file, \"%d\",exact_log2(~INTVAL (x)) );\n@@ -4895,17 +4903,21 @@ arc_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \t*total = COSTS_N_INSNS (2);\n       return false;\n     case PLUS:\n-      if (GET_CODE (XEXP (x, 0)) == MULT\n-\t  && _2_4_8_operand (XEXP (XEXP (x, 0), 1), VOIDmode))\n+      if ((GET_CODE (XEXP (x, 0)) == ASHIFT\n+\t   && _1_2_3_operand (XEXP (XEXP (x, 0), 1), VOIDmode))\n+          || (GET_CODE (XEXP (x, 0)) == MULT\n+              && _2_4_8_operand (XEXP (XEXP (x, 0), 1), VOIDmode)))\n \t{\n \t  *total += (rtx_cost (XEXP (x, 1), mode, PLUS, 0, speed)\n \t\t     + rtx_cost (XEXP (XEXP (x, 0), 0), mode, PLUS, 1, speed));\n \t  return true;\n \t}\n       return false;\n     case MINUS:\n-      if (GET_CODE (XEXP (x, 1)) == MULT\n-\t  && _2_4_8_operand (XEXP (XEXP (x, 1), 1), VOIDmode))\n+      if ((GET_CODE (XEXP (x, 1)) == ASHIFT\n+\t   && _1_2_3_operand (XEXP (XEXP (x, 1), 1), VOIDmode))\n+          || (GET_CODE (XEXP (x, 1)) == MULT\n+              && _2_4_8_operand (XEXP (XEXP (x, 1), 1), VOIDmode)))\n \t{\n \t  *total += (rtx_cost (XEXP (x, 0), mode, PLUS, 0, speed)\n \t\t     + rtx_cost (XEXP (XEXP (x, 1), 0), mode, PLUS, 1, speed));"}, {"sha": "ec783a047f22001f951d0ef698e45b1dd5654623", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=1e466f0496649db71f5e62881feea8ee59e09874", "patch": "@@ -2993,6 +2993,19 @@\n       (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n    (set (match_dup 3) (match_dup 4))])\n \n+(define_insn \"*add_n\"\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,Rcw,W,W,w,w\")\n+\t(plus:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"Rcqq,c,c,c,c,c\")\n+\t                    (match_operand:SI 2 \"_1_2_3_operand\" \"\"))\n+\t\t (match_operand:SI 3 \"nonmemory_operand\" \"0,0,c,?Cal,?c,??Cal\")))]\n+  \"\"\n+  \"add%c2%? %0,%3,%1%&\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"*,4,4,8,4,8\")\n+   (set_attr \"predicable\" \"yes,yes,no,no,no,no\")\n+   (set_attr \"cond\" \"canuse,canuse,nocond,nocond,nocond,nocond\")\n+   (set_attr \"iscompact\" \"maybe,false,false,false,false,false\")])\n+\n (define_insn \"*add_n\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,Rcw,W,W,w,w\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"Rcqq,c,c,c,c,c\")\n@@ -3008,6 +3021,19 @@\n \n ;; N.B. sub[123] has the operands of the MINUS in the opposite order from\n ;; what synth_mult likes.\n+(define_insn \"*sub_n\"\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcw,w,w\")\n+\t(minus:SI (match_operand:SI 1 \"nonmemory_operand\" \"0,c,?Cal\")\n+\t\t  (ashift:SI (match_operand:SI 2 \"register_operand\" \"c,c,c\")\n+\t\t\t     (match_operand:SI 3 \"_1_2_3_operand\" \"\"))))]\n+  \"\"\n+  \"sub%c3%? %0,%1,%2\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"4,4,8\")\n+   (set_attr \"predicable\" \"yes,no,no\")\n+   (set_attr \"cond\" \"canuse,nocond,nocond\")\n+   (set_attr \"iscompact\" \"false\")])\n+\n (define_insn \"*sub_n\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcw,w,w\")\n \t(minus:SI (match_operand:SI 1 \"nonmemory_operand\" \"0,c,?Cal\")"}, {"sha": "1f6643853c583bfa66b8126976c3c94c9233aa96", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=1e466f0496649db71f5e62881feea8ee59e09874", "patch": "@@ -615,6 +615,11 @@\n \t    (match_test \"TARGET_ARC700 || TARGET_EA_SET\")))\n )\n \n+(define_predicate \"_1_2_3_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) == 1 || INTVAL (op) == 2 || INTVAL (op) == 3\"))\n+)\n+\n (define_predicate \"_2_4_8_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) == 2 || INTVAL (op) == 4 || INTVAL (op) == 8\"))"}, {"sha": "fa0bbef93a7bc868b142a20671b63c31d182e793", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e466f0496649db71f5e62881feea8ee59e09874", "patch": "@@ -1,3 +1,8 @@\n+2017-05-31  Graham Markall  <graham.markall@embecosm.com>\n+\n+\t* gcc.target/arc/add_n-combine.c: New test.\n+\t* gcc.target/arc/sub_n-combine.c: New test.\n+\n 2017-05-31  Richard Biener  <rguenther@suse.de>\n \n \tPR target/80880"}, {"sha": "db6454f1462cd0eedffefec861aefe3198932fec", "filename": "gcc/testsuite/gcc.target/arc/add_n-combine.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fadd_n-combine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fadd_n-combine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fadd_n-combine.c?ref=1e466f0496649db71f5e62881feea8ee59e09874", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -fdump-rtl-combine\" }  */\n+\n+struct b1 {\n+      char c;\n+      char bg;\n+};\n+\n+struct bj1 {\n+  char bk;\n+  struct b1 bn[];\n+};\n+\n+struct b2 {\n+      short c;\n+      char bg;\n+};\n+\n+struct bj2 {\n+  short bk;\n+  struct b2 bn[];\n+};\n+\n+struct b3 {\n+      int c;\n+      char bg;\n+};\n+\n+struct bj3 {\n+  int bk;\n+  struct b3 bn[];\n+};\n+\n+\n+struct bj1 at1;\n+struct bj2 at2;\n+struct bj3 at3;\n+\n+int bu;\n+void a();\n+\n+void f() {\n+  a(at1.bn[bu]);\n+  a(at2.bn[bu]);\n+  a(at3.bn[bu]);\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"\\\\*add_n\" 3 \"combine\" } } */"}, {"sha": "4e227e41fb962d21a1508b6475753174b7afcb89", "filename": "gcc/testsuite/gcc.target/arc/sub_n-combine.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsub_n-combine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e466f0496649db71f5e62881feea8ee59e09874/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsub_n-combine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsub_n-combine.c?ref=1e466f0496649db71f5e62881feea8ee59e09874", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -fdump-rtl-combine\" }  */\n+\n+int a;\n+\n+double b1() {\n+  int c = a << 1;\n+  return 1 - c;\n+}\n+\n+double b2() {\n+  int c = a << 2;\n+  return 1 - c;\n+}\n+\n+double b3() {\n+  int c = a << 3;\n+  return 1 - c;\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"\\\\*sub_n\" 3 \"combine\" } } */"}]}