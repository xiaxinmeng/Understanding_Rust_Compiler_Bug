{"sha": "e08838ac57e85f427c39d953399d2cff3490ba2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4ODM4YWM1N2U4NWY0MjdjMzlkOTUzMzk5ZDJjZmYzNDkwYmEyZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-03-01T00:37:18Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-03-01T00:37:18Z"}, "message": "c++config (__GLIBCPP__): Bump number in anticipation of 2.92.\n\n\n2001-02-28  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/2103\n\t* include/bits/c++config (__GLIBCPP__): Bump number in\n\tanticipation of 2.92.\n\n\t* include/bits/codecvt.h: Fix typo.\n\t* include/bits/basic_file.h (__basic_file): Don't use _M_wfile for\n\tstdio model.\n\t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Enable wchar_t\n\tinstantiations for stdio model.\n\nFrom-SVN: r40140", "tree": {"sha": "5ccb5ca50ad6136fb783924feb908d6c96eb7e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ccb5ca50ad6136fb783924feb908d6c96eb7e2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e08838ac57e85f427c39d953399d2cff3490ba2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08838ac57e85f427c39d953399d2cff3490ba2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08838ac57e85f427c39d953399d2cff3490ba2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08838ac57e85f427c39d953399d2cff3490ba2f/comments", "author": null, "committer": null, "parents": [{"sha": "f04885d3c87a4de8164ce5a019e82f52ae455590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f04885d3c87a4de8164ce5a019e82f52ae455590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f04885d3c87a4de8164ce5a019e82f52ae455590"}], "stats": {"total": 1997, "additions": 896, "deletions": 1101}, "files": [{"sha": "8036866608abfabe83b1fe34013b645a3a45eeae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -1,3 +1,15 @@\n+2001-02-28  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tlibstdc++/2103\n+\t* include/bits/c++config (__GLIBCPP__): Bump number in\n+\tanticipation of 2.92.\n+\n+\t* include/bits/codecvt.h: Fix typo.\n+\t* include/bits/basic_file.h (__basic_file): Don't use _M_wfile for\n+\tstdio model.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Enable wchar_t\n+\tinstantiations for stdio model.\n+\n 2001-02-28  Phil Edwards  <pme@sources.redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CONFIGURE):  Remove GLIBCPP_CFLAGS"}, {"sha": "648929d78a4ca8c5a2b94a1bb02681592e0da274", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -135,48 +135,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"EXPECT=$(EXPECT)\" \\\n-\t\"RUNTEST=$(RUNTEST)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"CC=$(CC)\" \\\n-\t\"CXX=$(CXX)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h"}, {"sha": "5c5d99e41d5aa8c51f9318d771d2acb9740d57fd", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -1163,8 +1163,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       # We're not using stdio.\n       need_libio=no\n       need_wlibio=no\n-      # Wide characters are not supported with this package.\n-      enable_c_mbchar=no\n       ;;\n     *)\n       echo \"$enable_cstdio is an unknown io package\" 1>&2"}, {"sha": "775a451b0b4c59d5436c1dcbec12944940c9bd85", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -1175,8 +1175,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       # We're not using stdio.\n       need_libio=no\n       need_wlibio=no\n-      # Wide characters are not supported with this package.\n-      enable_c_mbchar=no\n       ;;\n     *)\n       echo \"$enable_cstdio is an unknown io package\" 1>&2"}, {"sha": "51ec25c6890141464cfe1d10cd1862e43692ba51", "filename": "libstdc++-v3/config/basic_file_libio.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.h?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -287,10 +287,3 @@ namespace std\n     void \n     __basic_file<_CharT>::imbue(void* /*__v*/) { }\n }  // namespace std\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "d0ac9f4b826b76c454106e6517c5bb1c0b3e07d1", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 801, "deletions": 814, "changes": 1615, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=e08838ac57e85f427c39d953399d2cff3490ba2f"}, {"sha": "a4964bfc14f517502bdf3a28142a79e40104ed72", "filename": "libstdc++-v3/include/bits/basic_file.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -114,7 +114,7 @@ namespace std\n   // Also note that the order and number of virtual functions has to precisely\n   // match the order and number in the _IO_jump_t struct defined in libioP.h.\n   template<typename _CharT>\n-#if _GLIBCPP_BASIC_FILE_INHERITANCE\n+#ifdef _GLIBCPP_BASIC_FILE_INHERITANCE\n     class __basic_file: public __basic_file_base<_CharT>\n #else\n     class __basic_file\n@@ -123,10 +123,11 @@ namespace std\n #if _GLIBCPP_BASIC_FILE_ENCAPSULATION\n       int \t\t_M_fileno;\n       __c_file_type* \t_M_cfile;\n-#endif\n-#ifdef _GLIBCPP_USE_WCHAR_T\n+#else\n+# ifdef _GLIBCPP_USE_WCHAR_T\n       __c_wfile_type\t_M_wfile;\n-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n+# endif\n+#endif \n \n     public:\n       __basic_file(__c_lock* __lock = 0);"}, {"sha": "a6401ebe2d60fbcd44ce4a38249e0b4e974beec6", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -34,7 +34,7 @@\n #include <bits/os_defines.h>\n \n // The current version of the C++ library in compressed ISO date format.\n-#define __GLIBCPP__ 20010102\n+#define __GLIBCPP__ 20010301\n \n // This is necessary until GCC supports separate template\n // compilation.  \n@@ -53,7 +53,7 @@\n //#define _GLIBCPP_DEPRECATED 1\n \n // Use corrected code from the committee library group's issues list.\n-# define _GLIBCPP_RESOLVE_LIB_DEFECTS 1\n+#define _GLIBCPP_RESOLVE_LIB_DEFECTS 1\n \n \n // From SGI's stl_config.h; generic settings and user hooks (_NOTHREADS)."}, {"sha": "7f5df9666e06bfebf349a437c7b7fca393681f10", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -524,7 +524,7 @@\n \t  if (__ext_bom)\n \t    {\t  \n \t      size_t __size = __from_end - __from;\n-\t      extern_type* __cfixed = (sizeof(extern_type) * (__size + 1));\n+\t      extern_type* __cfixed =  static_cast<extern_type*>(__builtin_alloca(sizeof(extern_type) * (__size + 1)));\n \t      __cfixed[0] = static_cast<extern_type>(__ext_bom);\n \t      char_traits<extern_type>::copy(__cfixed + 1, __from, __size);\n \t      __cfrom = reinterpret_cast<char*>(__cfixed);"}, {"sha": "fd11e1130eb6fb1e04c820af58f9cd3f7658341d", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -111,7 +111,7 @@ toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -123,21 +123,14 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers = \\\n-        libio.h libioP.h iolibio.h\n+libio_headers =          libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n-@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "64c2ed9c6efc60446efb2fbb89bf806fe1faf73c", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -114,24 +114,18 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes = \\\n-\thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n \n \n-EXTRA_DIST = \\\n-\thypot.c hypotf.c atan2f.c expf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST =  \thypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD = \\\n-\t@LIBMATHOBJS@ \\\n-\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES = \\\n-\tsignbit.c signbitf.c\n+libmath_la_SOURCES =  \tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -145,9 +139,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n-\t$(TOPLEVEL_INCLUDES) \n+INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "ef3473bd870518eacc6fbef1d583f8e53d99321a", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 8, "deletions": 36, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -128,13 +128,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -146,31 +144,13 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t $(LIBSUPCXX_INCLUDES)\n+INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n \n \n-headers = \\\n-\texception new typeinfo cxxabi.h exception_defines.h \n+headers =  \texception new typeinfo cxxabi.h exception_defines.h \n \n \n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\texception_support.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception_support.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -188,12 +168,7 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -217,17 +192,14 @@ AM_CXXFLAGS = \\\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-               --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "0d7ef0f1f9738b68b2896fd4458bff9a32ba8651", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.74 2001/02/26 21:48:01 pme Exp $\n+## $Id: Makefile.am,v 1.75 2001/02/28 03:20:36 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -34,7 +34,6 @@ toolexeclibdir = @glibcpp_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n-\n # Compile flags that should be constant throughout the build, both for\n # SUBDIRS and for libstdc++-v3 in general.\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n@@ -179,9 +178,6 @@ VPATH += $(top_srcdir) $(top_srcdir)/src\n VPATH += $(GLIBCPP_INCLUDE_DIR) \n VPATH += $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n-# Actual sources for the distro, but don't build these.\n-#EXTRA_sources = string-inst.cc \n-\n libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n@@ -196,6 +192,20 @@ libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n \n \n+# Use special rules for the deprecated source files so that they find\n+# deprecated include files.\n+strstream.lo: strstream.cc\n+\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+strstream.o: strstream.cc\n+\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+\n+# Make wstring-inst.cc from string-inst.cc\n+wstring-inst.o: string-inst.cc\n+\t$(CXXCOMPILE) -c -DC=wchar_t $< -o $@\n+wstring-inst.lo: string-inst.cc\n+\t$(LTCXXCOMPILE) -c -DC=wchar_t $< -o $@\n+\n+\n # Make sure cshadow headers are built first.\n if GLIBCPP_USE_CSHADOW\n CSHADOW_H = $(top_builddir)/stamp-cshadow\n@@ -281,20 +291,6 @@ myinstallheaders:\n \tfi;\n \n \n-# Use special rules for the deprecated source files so that they find\n-# deprecated include files.\n-strstream.lo: strstream.cc\n-\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n-strstream.o: strstream.cc\n-\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n-\n-# Make wstring-inst.cc from string-inst.cc\n-wstring-inst.o: string-inst.cc\n-\t$(CXXCOMPILE) -c -DC=wchar_t $< -o $@\n-wstring-inst.lo: string-inst.cc\n-\t$(LTCXXCOMPILE) -c -DC=wchar_t $< -o $@\n-\n-\n # Alexandre put this in here for some libtool-related reason.\n all: libstdc++.INC\n libstdc++.INC: Makefile"}, {"sha": "c07de9e29855e23279880a58b3ec00b32621addd", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 41, "deletions": 143, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -122,13 +122,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -140,142 +138,49 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n-\t$(TOPLEVEL_INCLUDES)\t\n-\n-\n-base_headers = \\\n-\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n-\tbits/basic_string.tcc \\\n-\tbits/generic_shadow.h bits/std_utility.h \\\n-\tbits/std_complex.h \\\n-\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n-\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n-\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/std_fstream.h bits/std_iomanip.h \\\n-\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n-\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n-\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n-\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n-\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n-\tbits/streambuf.tcc bits/basic_file.h \\\n-\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n-\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n-\tbits/stl_threads.h bits/stl_iterator_base.h \\\n-\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n-\tbits/std_iterator.h bits/std_list.h \\\n-\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n-\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n-\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n-\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n-\tbits/stl_deque.h bits/stl_function.h \\\n-\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n-\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n-\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n-\tbits/stl_relops.h bits/stl_set.h \\\n-\tbits/stl_stack.h bits/stl_tempbuf.h \\\n-\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n-\tbits/type_traits.h bits/std_algorithm.h \\\n-\tbits/concept_checks.h bits/container_concepts.h \\\n-\tbits/sequence_concepts.h bits/stl_construct.h\n-\n-\n-backward_headers = \\\n-\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n-\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n-\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n-\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n-\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n-\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n-\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n-\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n-\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n-\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n-\tbackward/fstream.h backward/strstream.h backward/strstream\n-\n-\n-ext_headers = \\\n-\text/ropeimpl.h ext/stl_rope.h \\\n-\text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \\\n-\text/hash_map ext/hash_set ext/rope ext/slist \\\n-\text/tree ext/bvector \n-\n-\n-c_base_headers = \\\n-\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n-\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n-\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n-\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n-\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n-\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n+INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\t\n+\n+\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_construct.h\n+\n+\n+backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream\n+\n+\n+ext_headers =  \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n+\n+\n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers = \\\n-\talgorithm bitset complex deque fstream functional \\\n-\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n-\tmap memory numeric ostream queue set sstream stack stdexcept \\\n-\tstreambuf string utility valarray vector \\\n-\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n-\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n-\tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers = \\\n-\tbits/std_limits.h \\\n-\tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \\\n-\tbits/basic_file_model.h \\\n-\tbits/atomicity.h bits/os_defines.h \\\n-\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources = \\\n-\tlimitsMEMBERS.cc \\\n-\tstdexcept.cc functexcept.cc bitset.cc \\\n-        globals.cc \\\n-\tbasic_file.cc ios.cc complex_io.cc strstream.cc \\\n-\tc++locale.cc locale.cc localename.cc codecvt.cc \\\n-\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources =  \tlimitsMEMBERS.cc \tstdexcept.cc functexcept.cc bitset.cc         globals.cc \tbasic_file.cc ios.cc complex_io.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n-wstring_sources = \\\n-\twstring-inst.cc\n+wstring_sources =  \twstring-inst.cc\n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n-# Actual sources for the distro, but don't build these.\n-#EXTRA_sources = string-inst.cc \n-\n libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n-libstdc___la_LIBADD = \\\n-\t../libmath/libmath.la @libio_la@ \\\n-\t../libsupc++/libsupc++convenience.la \\\n-\t@libinst_wstring_la@\n+libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # Check for various configure bits that change where the headers get installed.\n@@ -294,12 +199,7 @@ c_incdir = @C_INCLUDE_DIR@\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -320,16 +220,14 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -589,6 +487,19 @@ distclean-generic clean-generic maintainer-clean-generic clean \\\n mostlyclean distclean maintainer-clean\n \n \n+# Use special rules for the deprecated source files so that they find\n+# deprecated include files.\n+strstream.lo: strstream.cc\n+\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+strstream.o: strstream.cc\n+\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+\n+# Make wstring-inst.cc from string-inst.cc\n+wstring-inst.o: string-inst.cc\n+\t$(CXXCOMPILE) -c -DC=wchar_t $< -o $@\n+wstring-inst.lo: string-inst.cc\n+\t$(LTCXXCOMPILE) -c -DC=wchar_t $< -o $@\n+\n # Specify that all *.o's depend on this.\n $(libstdc___la_OBJECTS): $(CSHADOW_H)\n \n@@ -654,19 +565,6 @@ myinstallheaders:\n \tdone; \\\n \tfi;\n \n-# Use special rules for the deprecated source files so that they find\n-# deprecated include files.\n-strstream.lo: strstream.cc\n-\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n-strstream.o: strstream.cc\n-\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n-\n-# Make wstring-inst.cc from string-inst.cc\n-wstring-inst.o: string-inst.cc\n-\t$(CXXCOMPILE) -c -DC=wchar_t $< -o $@\n-wstring-inst.lo: string-inst.cc\n-\t$(LTCXXCOMPILE) -c -DC=wchar_t $< -o $@\n-\n # Alexandre put this in here for some libtool-related reason.\n all: libstdc++.INC\n libstdc++.INC: Makefile"}, {"sha": "dfdd5952d86253e71d2ff80e85adeafc9d5a8ff0", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08838ac57e85f427c39d953399d2cff3490ba2f/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=e08838ac57e85f427c39d953399d2cff3490ba2f", "patch": "@@ -100,7 +100,3 @@ namespace std\n     void\n     __destroy_aux<S*>(S*, S*, _Bool<false>);\n } // namespace std\n-\n-\n-\n-"}]}