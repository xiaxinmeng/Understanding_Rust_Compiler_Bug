{"sha": "f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEzOTVkNGE2ZTBlYTk4YjFmYTNiNzJkNDBmMDJmY2JhOTgwMTUwMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-08-21T08:13:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-08-21T08:13:27Z"}, "message": "lto-cgraph.c (lto_output_edge): Use gimple_has_body_p instead of flag_wpa.\n\n\n\t* lto-cgraph.c (lto_output_edge): Use gimple_has_body_p instead of flag_wpa.\n\t* lto-streamer-out.c (lto_output): Likewise.\n\t* passes.c (ipa_write_optimization_summaries): Initialize statement uids.\n\t\n\t* lto.c (lto_1_to_1_map): Be prepared for node to have no file data.\n\t(lto_wpa_write_files): Update comments.\n\nFrom-SVN: r163438", "tree": {"sha": "ac13290a08f4ac5331c1427478989a701ad10615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac13290a08f4ac5331c1427478989a701ad10615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/comments", "author": null, "committer": null, "parents": [{"sha": "12523de0996e56c7f3094825ea9197b53ca7b445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12523de0996e56c7f3094825ea9197b53ca7b445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12523de0996e56c7f3094825ea9197b53ca7b445"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "56fef865fa524b95f6e08a0bee8a34915da4cef9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "patch": "@@ -1,3 +1,9 @@\n+2010-08-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-cgraph.c (lto_output_edge): Use gimple_has_body_p instead of flag_wpa.\n+\t* lto-streamer-out.c (lto_output): Likewise.\n+\t* passes.c (ipa_write_optimization_summaries): Initialize statement uids.\n+\n 2010-08-20  Olivier Hainque  <hainque@adacore.com>\n \n \t* tree.h (alias_diag_flags): New enum."}, {"sha": "22b491610677072f83e0ad3750b6c4e44e6adc28", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "patch": "@@ -281,7 +281,8 @@ lto_output_edge (struct lto_simple_output_block *ob, struct cgraph_edge *edge,\n   lto_output_sleb128_stream (ob->main_stream, edge->count);\n \n   bp = bitpack_create (ob->main_stream);\n-  uid = flag_wpa ? edge->lto_stmt_uid : gimple_uid (edge->call_stmt);\n+  uid = (!gimple_has_body_p (edge->caller->decl)\n+\t ? edge->lto_stmt_uid : gimple_uid (edge->call_stmt));\n   bp_pack_value (&bp, uid, HOST_BITS_PER_INT);\n   bp_pack_value (&bp, edge->inline_failed, HOST_BITS_PER_INT);\n   bp_pack_value (&bp, edge->frequency, HOST_BITS_PER_INT);"}, {"sha": "dde86b94595f91d85a0f5625064e6e919b05884c", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "patch": "@@ -2122,7 +2122,7 @@ lto_output (cgraph_node_set set, varpool_node_set vset)\n #endif\n \t  decl_state = lto_new_out_decl_state ();\n \t  lto_push_out_decl_state (decl_state);\n-\t  if (!flag_wpa)\n+\t  if (gimple_has_body_p (node->decl))\n \t    output_function (node);\n \t  else\n \t    copy_function (node);"}, {"sha": "590435f55fab32039415fcc49f24d316547b0a52", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "patch": "@@ -1,3 +1,8 @@\n+2010-08-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto.c (lto_1_to_1_map): Be prepared for node to have no file data.\n+\t(lto_wpa_write_files): Update comments.\n+\n 2010-08-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/45357"}, {"sha": "0b885a7f192ccc45af6104b9cc1a34b265695d8e", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "patch": "@@ -835,15 +835,28 @@ lto_1_to_1_map (void)\n \tcontinue;\n \n       file_data = node->local.lto_file_data;\n-      gcc_assert (!node->same_body_alias && file_data);\n+      gcc_assert (!node->same_body_alias);\n \n-      slot = pointer_map_contains (pmap, file_data);\n-      if (slot)\n-\tpartition = (ltrans_partition) *slot;\n+      if (file_data)\n+\t{\n+          slot = pointer_map_contains (pmap, file_data);\n+          if (slot)\n+\t    partition = (ltrans_partition) *slot;\n+\t  else\n+\t    {\n+\t      partition = new_partition (file_data->file_name);\n+\t      slot = pointer_map_insert (pmap, file_data);\n+\t      *slot = partition;\n+\t      npartitions++;\n+\t    }\n+\t}\n+      else if (!file_data\n+\t       && VEC_length (ltrans_partition, ltrans_partitions))\n+\tpartition = VEC_index (ltrans_partition, ltrans_partitions, 0);\n       else\n \t{\n-\t  partition = new_partition (file_data->file_name);\n-\t  slot = pointer_map_insert (pmap, file_data);\n+\t  partition = new_partition (\"\");\n+\t  slot = pointer_map_insert (pmap, NULL);\n \t  *slot = partition;\n \t  npartitions++;\n \t}\n@@ -1089,16 +1102,13 @@ lto_wpa_write_files (void)\n \n   timevar_push (TV_WHOPR_WPA);\n \n-  /* Include all inlined functions and determine what sets need to be\n-     compiled by LTRANS.  After this loop, only those sets that\n-     contain callgraph nodes from more than one file will need to be\n-     compiled by LTRANS.  */\n   FOR_EACH_VEC_ELT (ltrans_partition, ltrans_partitions, i, part)\n     lto_stats.num_output_cgraph_nodes += VEC_length (cgraph_node_ptr,\n \t\t\t\t\t\t     part->cgraph_set->nodes);\n \n-  /* After adding all inlinees, find out statics that need to be promoted\n-     to globals because of cross-file inlining.  */\n+  /* Find out statics that need to be promoted\n+     to globals with hidden visibility because they are accessed from multiple\n+     partitions.  */\n   lto_promote_cross_file_statics ();\n \n   timevar_pop (TV_WHOPR_WPA);"}, {"sha": "1b98e99eef9ed63798bd9da58f1decdebda5bc45", "filename": "gcc/passes.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1395d4a6e0ea98b1fa3b72d40f02fcba9801500/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=f1395d4a6e0ea98b1fa3b72d40f02fcba9801500", "patch": "@@ -1792,9 +1792,26 @@ void\n ipa_write_optimization_summaries (cgraph_node_set set, varpool_node_set vset)\n {\n   struct lto_out_decl_state *state = lto_new_out_decl_state ();\n+  cgraph_node_set_iterator csi;\n   compute_ltrans_boundary (state, set, vset);\n \n   lto_push_out_decl_state (state);\n+  for (csi = csi_start (set); !csi_end_p (csi); csi_next (&csi))\n+    {\n+      struct cgraph_node *node = csi_node (csi);\n+      /* When streaming out references to statements as part of some IPA\n+\t pass summary, the statements need to have uids assigned.\n+\n+\t For functions newly born at WPA stage we need to initialize\n+\t the uids here.  */\n+      if (node->analyzed\n+\t  && gimple_has_body_p (node->decl))\n+\t{\n+\t  push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n+\t  renumber_gimple_stmt_uids ();\n+\t  pop_cfun ();\n+\t}\n+    }\n \n   gcc_assert (flag_wpa);\n   ipa_write_optimization_summaries_1 (all_regular_ipa_passes, set, vset, state);"}]}