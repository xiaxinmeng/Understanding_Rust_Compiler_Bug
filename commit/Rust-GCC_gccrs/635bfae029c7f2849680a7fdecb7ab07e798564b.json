{"sha": "635bfae029c7f2849680a7fdecb7ab07e798564b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM1YmZhZTAyOWM3ZjI4NDk2ODBhN2ZkZWNiN2FiMDdlNzk4NTY0Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-11-26T15:14:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-11-26T15:14:52Z"}, "message": "re PR tree-optimization/59245 (ICE on valid code at -O3 on x86_64-linux-gnu in set_value_range, at tree-vrp.c:443)\n\n2013-11-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/59245\n\t* tree-vrp.c (set_value_range): Assert that we don't have\n\toverflowed constants (but our infinities).\n\t(set_value_range_to_value): Drop all overflow flags.\n\t(vrp_visit_phi_node): Likewise.\n\t(vrp_visit_assignment_or_call): Use set_value_range_to_value\n\tto set a constant range.\n\n\t* gcc.dg/torture/pr59245.c: New testcase.\n\nFrom-SVN: r205395", "tree": {"sha": "a18efccf1d3300e4c9b27e6e22290bc25247ee31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a18efccf1d3300e4c9b27e6e22290bc25247ee31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/635bfae029c7f2849680a7fdecb7ab07e798564b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635bfae029c7f2849680a7fdecb7ab07e798564b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635bfae029c7f2849680a7fdecb7ab07e798564b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635bfae029c7f2849680a7fdecb7ab07e798564b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a866fa46ea86c6843bd14be5393e945b76a80334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a866fa46ea86c6843bd14be5393e945b76a80334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a866fa46ea86c6843bd14be5393e945b76a80334"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "75ad19c9e34aa312685fe310d91f3f45743c3534", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635bfae029c7f2849680a7fdecb7ab07e798564b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635bfae029c7f2849680a7fdecb7ab07e798564b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=635bfae029c7f2849680a7fdecb7ab07e798564b", "patch": "@@ -1,3 +1,13 @@\n+2013-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59245\n+\t* tree-vrp.c (set_value_range): Assert that we don't have\n+\toverflowed constants (but our infinities).\n+\t(set_value_range_to_value): Drop all overflow flags.\n+\t(vrp_visit_phi_node): Likewise.\n+\t(vrp_visit_assignment_or_call): Use set_value_range_to_value\n+\tto set a constant range.\n+\n 2013-11-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/59290"}, {"sha": "23113f3009de0e28557e1734f2d6ae2967553eb8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635bfae029c7f2849680a7fdecb7ab07e798564b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635bfae029c7f2849680a7fdecb7ab07e798564b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=635bfae029c7f2849680a7fdecb7ab07e798564b", "patch": "@@ -1,3 +1,8 @@\n+2013-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59245\n+\t* gcc.dg/torture/pr59245.c: New testcase.\n+\n 2013-11-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/59290"}, {"sha": "e5b9a0fb4872775c12485c58ede49dddd2d67fc9", "filename": "gcc/testsuite/gcc.dg/torture/pr59245.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635bfae029c7f2849680a7fdecb7ab07e798564b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59245.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635bfae029c7f2849680a7fdecb7ab07e798564b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59245.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59245.c?ref=635bfae029c7f2849680a7fdecb7ab07e798564b", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+\n+int a, b, c, e, g;\n+char d[5], f;\n+\n+int\n+fn1 ()\n+{\n+  if (b)\n+    {\n+      g = 0;\n+      return 0;\n+    }\n+  for (f = 0; f != 1; f--)\n+    ;\n+  return 0;\n+}\n+\n+void\n+fn2 ()\n+{\n+  d[4] = -1;\n+  for (a = 4; a; a--)\n+    {\n+      fn1 ();\n+      e = c < -2147483647 - 1 - d[a] ? c : 0;\n+    }\n+}"}, {"sha": "171a0f56255e698454bca1247f1eece6e11dab09", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635bfae029c7f2849680a7fdecb7ab07e798564b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635bfae029c7f2849680a7fdecb7ab07e798564b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=635bfae029c7f2849680a7fdecb7ab07e798564b", "patch": "@@ -441,6 +441,9 @@ set_value_range (value_range_t *vr, enum value_range_type t, tree min,\n \n       gcc_assert (min && max);\n \n+      gcc_assert ((!TREE_OVERFLOW_P (min) || is_overflow_infinity (min))\n+\t\t  && (!TREE_OVERFLOW_P (max) || is_overflow_infinity (max)));\n+\n       if (INTEGRAL_TYPE_P (TREE_TYPE (min)) && t == VR_ANTI_RANGE)\n \tgcc_assert (!vrp_val_is_min (min) || !vrp_val_is_max (max));\n \n@@ -616,7 +619,8 @@ static inline void\n set_value_range_to_value (value_range_t *vr, tree val, bitmap equiv)\n {\n   gcc_assert (is_gimple_min_invariant (val));\n-  val = avoid_overflow_infinity (val);\n+  if (TREE_OVERFLOW_P (val))\n+    val = drop_tree_overflow (val);\n   set_value_range (vr, VR_RANGE, val, val, equiv);\n }\n \n@@ -6738,8 +6742,8 @@ vrp_visit_assignment_or_call (gimple stmt, tree *output_p)\n \n       /* Try folding the statement to a constant first.  */\n       tree tem = gimple_fold_stmt_to_constant (stmt, vrp_valueize);\n-      if (tem && !is_overflow_infinity (tem))\n-\tset_value_range (&new_vr, VR_RANGE, tem, tem, NULL);\n+      if (tem)\n+\tset_value_range_to_value (&new_vr, tem, NULL);\n       /* Then dispatch to value-range extracting functions.  */\n       else if (code == GIMPLE_CALL)\n \textract_range_basic (&new_vr, stmt);\n@@ -8336,7 +8340,7 @@ vrp_visit_phi_node (gimple phi)\n \t    }\n \t  else\n \t    {\n-\t      if (is_overflow_infinity (arg))\n+\t      if (TREE_OVERFLOW_P (arg))\n \t\targ = drop_tree_overflow (arg);\n \n \t      vr_arg.type = VR_RANGE;"}]}