{"sha": "486e40770d3273c7ab557c879ba39917dbd26cf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2ZTQwNzcwZDMyNzNjN2FiNTU3Yzg3OWJhMzk5MTdkYmQyNmNmMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-10-14T20:23:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-10-14T20:23:45Z"}, "message": "pt.c (lookup_template_class): Add comment.\n\n\t* pt.c (lookup_template_class): Add comment.\n\t(instantiate_class_template): Don't mark the _TYPE node for\n\tmember class templates as an instantiation.\n\nFrom-SVN: r23092", "tree": {"sha": "09d42cfe8eb3dcab500f5eccf86ca247c14168ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09d42cfe8eb3dcab500f5eccf86ca247c14168ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/486e40770d3273c7ab557c879ba39917dbd26cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486e40770d3273c7ab557c879ba39917dbd26cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486e40770d3273c7ab557c879ba39917dbd26cf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486e40770d3273c7ab557c879ba39917dbd26cf0/comments", "author": null, "committer": null, "parents": [{"sha": "bd748f743d05218b191ce5f45caa4452c6b37d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd748f743d05218b191ce5f45caa4452c6b37d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd748f743d05218b191ce5f45caa4452c6b37d40"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "0e5b319822e2550bb3eb943fbca3d40d959e03cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486e40770d3273c7ab557c879ba39917dbd26cf0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486e40770d3273c7ab557c879ba39917dbd26cf0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=486e40770d3273c7ab557c879ba39917dbd26cf0", "patch": "@@ -1,3 +1,9 @@\n+1998-10-14  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* pt.c (lookup_template_class): Add comment.\n+\t(instantiate_class_template): Don't mark the _TYPE node for\n+\tmember class templates as an instantiation.\n+\n 1998-10-14  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (grokfndecl): Fix my thinko."}, {"sha": "c836fbd450560239ea144ec402a02058a4f4f6f1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486e40770d3273c7ab557c879ba39917dbd26cf0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486e40770d3273c7ab557c879ba39917dbd26cf0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=486e40770d3273c7ab557c879ba39917dbd26cf0", "patch": "@@ -3547,7 +3547,9 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n       push_obstacks (&permanent_obstack, &permanent_obstack);\n       \n       /* This type is a \"partial instantiation\" if any of the template\n-\t arguments still inolve template parameters.  */\n+\t arguments still inolve template parameters.  Note that we set\n+\t IS_PARTIAL_INSTANTIATION for partial specializations as\n+\t well.  */\n       is_partial_instantiation = uses_template_parms (arglist);\n \n       /* Create the type.  */\n@@ -4519,6 +4521,17 @@ instantiate_class_template (type)\n       newtag = tsubst (tag, args, NULL_TREE);\n       if (TREE_CODE (newtag) != ENUMERAL_TYPE)\n \t{\n+\t  if (TYPE_LANG_SPECIFIC (tag) && CLASSTYPE_IS_TEMPLATE (tag))\n+\t    /* Unfortunately, lookup_template_class sets\n+\t       CLASSTYPE_IMPLICIT_INSTANTIATION for a partial\n+\t       instantiation (i.e., for the type of a member template\n+\t       class nested within a template class.)  This behavior is\n+\t       required for maybe_process_partial_specialization to work\n+\t       correctly, but is not accurate in this case; the TAG is not\n+\t       an instantiation of anything.  (The corresponding\n+\t       TEMPLATE_DECL is an instantiation, but the TYPE is not.) */\n+\t    CLASSTYPE_USE_TEMPLATE (newtag) = 0;\n+\n \t  /* Now, we call pushtag to put this NEWTAG into the scope of\n \t     TYPE.  We first set up the IDENTIFIER_TYPE_VALUE to avoid\n \t     pushtag calling push_template_decl.  We don't have to do"}]}