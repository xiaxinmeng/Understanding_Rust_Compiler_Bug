{"sha": "008e32c018844741b221de0aa8c910f72fe8e1e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA4ZTMyYzAxODg0NDc0MWIyMjFkZTBhYThjOTEwZjcyZmU4ZTFlOA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2013-11-14T18:36:48Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2013-11-14T18:36:48Z"}, "message": "rs6000.c (rs6000_option_override_internal): Replace \"DEFAULT_ABI != ABI_AIX\" test by testing for ABI_V4 or ABI_DARWIN.\n\n2013-11-14  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Replace\n\t\"DEFAULT_ABI != ABI_AIX\" test by testing for ABI_V4 or ABI_DARWIN.\n\t(rs6000_savres_strategy): Likewise.\n\t(rs6000_return_addr): Likewise.\n\t(rs6000_emit_load_toc_table): Replace \"DEFAULT_ABI != ABI_AIX\" by\n\ttesting for ABI_V4 (since ABI_DARWIN is impossible here).\n\t(rs6000_emit_prologue): Likewise.\n\t(legitimate_lo_sum_address_p): Simplify DEFAULT_ABI test.\n\t(rs6000_elf_declare_function_name): Remove duplicated test.\n\t* config/rs6000/rs6000.md (\"load_toc_v4_PIC_1\"): Explicitly test\n\tfor ABI_V4 (instead of \"DEFAULT_ABI != ABI_AIX\" test).\n\t(\"load_toc_v4_PIC_1_normal\"): Likewise.\n\t(\"load_toc_v4_PIC_1_476\"): Likewise.\n\t(\"load_toc_v4_PIC_1b\"): Likewise.\n\t(\"load_toc_v4_PIC_1b_normal\"): Likewise.\n\t(\"load_toc_v4_PIC_1b_476\"): Likewise.\n\t(\"load_toc_v4_PIC_2\"): Likewise.\n\t(\"load_toc_v4_PIC_3b\"): Likewise.\n\t(\"load_toc_v4_PIC_3c\"): Likewise.\n\t* config/rs6000/rs6000.h (RS6000_REG_SAVE): Simplify DEFAULT_ABI test.\n\t(RS6000_SAVE_AREA): Likewise.\n\t(FP_ARG_MAX_REG): Likewise.\n\t(RETURN_ADDRESS_OFFSET): Likewise.\n\t* config/rs6000/sysv.h (TARGET_TOC): Test for ABI_V4 instead\n\tof ABI_AIX.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n\t(MINIMAL_TOC_SECTION_ASM_OP): Likewise.\n\nFrom-SVN: r204804", "tree": {"sha": "a5d397d505018a6b01fe93efc51ee350fdfd61da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5d397d505018a6b01fe93efc51ee350fdfd61da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/008e32c018844741b221de0aa8c910f72fe8e1e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008e32c018844741b221de0aa8c910f72fe8e1e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/008e32c018844741b221de0aa8c910f72fe8e1e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008e32c018844741b221de0aa8c910f72fe8e1e8/comments", "author": null, "committer": null, "parents": [{"sha": "f90f960ca83c76fd82d45dccf91f5c2db4741d5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90f960ca83c76fd82d45dccf91f5c2db4741d5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90f960ca83c76fd82d45dccf91f5c2db4741d5e"}], "stats": {"total": 100, "additions": 62, "deletions": 38}, "files": [{"sha": "db09713c8c9c3f13dba0f30740ce5603b26cb8a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008e32c018844741b221de0aa8c910f72fe8e1e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008e32c018844741b221de0aa8c910f72fe8e1e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=008e32c018844741b221de0aa8c910f72fe8e1e8", "patch": "@@ -1,3 +1,33 @@\n+2013-11-14  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Replace\n+\t\"DEFAULT_ABI != ABI_AIX\" test by testing for ABI_V4 or ABI_DARWIN.\n+\t(rs6000_savres_strategy): Likewise.\n+\t(rs6000_return_addr): Likewise.\n+\t(rs6000_emit_load_toc_table): Replace \"DEFAULT_ABI != ABI_AIX\" by\n+\ttesting for ABI_V4 (since ABI_DARWIN is impossible here).\n+\t(rs6000_emit_prologue): Likewise.\n+\t(legitimate_lo_sum_address_p): Simplify DEFAULT_ABI test.\n+\t(rs6000_elf_declare_function_name): Remove duplicated test.\n+\t* config/rs6000/rs6000.md (\"load_toc_v4_PIC_1\"): Explicitly test\n+\tfor ABI_V4 (instead of \"DEFAULT_ABI != ABI_AIX\" test).\n+\t(\"load_toc_v4_PIC_1_normal\"): Likewise.\n+\t(\"load_toc_v4_PIC_1_476\"): Likewise.\n+\t(\"load_toc_v4_PIC_1b\"): Likewise.\n+\t(\"load_toc_v4_PIC_1b_normal\"): Likewise.\n+\t(\"load_toc_v4_PIC_1b_476\"): Likewise.\n+\t(\"load_toc_v4_PIC_2\"): Likewise.\n+\t(\"load_toc_v4_PIC_3b\"): Likewise.\n+\t(\"load_toc_v4_PIC_3c\"): Likewise.\n+\t* config/rs6000/rs6000.h (RS6000_REG_SAVE): Simplify DEFAULT_ABI test.\n+\t(RS6000_SAVE_AREA): Likewise.\n+\t(FP_ARG_MAX_REG): Likewise.\n+\t(RETURN_ADDRESS_OFFSET): Likewise.\n+\t* config/rs6000/sysv.h (TARGET_TOC): Test for ABI_V4 instead\n+\tof ABI_AIX.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t(MINIMAL_TOC_SECTION_ASM_OP): Likewise.\n+\n 2013-11-14  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_call_indirect_aix): Rename to ..."}, {"sha": "b959931844f1a39a17123685598414a1e8dcdd01", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008e32c018844741b221de0aa8c910f72fe8e1e8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008e32c018844741b221de0aa8c910f72fe8e1e8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=008e32c018844741b221de0aa8c910f72fe8e1e8", "patch": "@@ -3674,7 +3674,7 @@ rs6000_option_override_internal (bool global_init_p)\n \n       /* We should always be splitting complex arguments, but we can't break\n \t Linux and Darwin ABIs at the moment.  For now, only AIX is fixed.  */\n-      if (DEFAULT_ABI != ABI_AIX)\n+      if (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_DARWIN)\n \ttargetm.calls.split_complex_arg = NULL;\n     }\n \n@@ -6389,7 +6389,7 @@ legitimate_lo_sum_address_p (enum machine_mode mode, rtx x, int strict)\n     {\n       bool large_toc_ok;\n \n-      if (DEFAULT_ABI != ABI_AIX && DEFAULT_ABI != ABI_DARWIN && flag_pic)\n+      if (DEFAULT_ABI == ABI_V4 && flag_pic)\n \treturn false;\n       /* LRA don't use LEGITIMIZE_RELOAD_ADDRESS as it usually calls\n \t push_reload from reload pass code.  LEGITIMIZE_RELOAD_ADDRESS\n@@ -19610,7 +19610,8 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n      by the static chain.  It would require too much fiddling and the\n      static chain is rarely used anyway.  FPRs are saved w.r.t the stack\n      pointer on Darwin, and AIX uses r1 or r12.  */\n-  if (using_static_chain_p && DEFAULT_ABI != ABI_AIX)\n+  if (using_static_chain_p\n+      && (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_DARWIN))\n     strategy |= ((DEFAULT_ABI == ABI_DARWIN ? 0 : SAVE_INLINE_FPRS)\n \t\t | SAVE_INLINE_GPRS\n \t\t | SAVE_INLINE_VRS | REST_INLINE_VRS);\n@@ -20306,7 +20307,8 @@ rs6000_return_addr (int count, rtx frame)\n   /* Currently we don't optimize very well between prolog and body\n      code and for PIC code the code can be actually quite bad, so\n      don't try to be too clever here.  */\n-  if (count != 0 || (DEFAULT_ABI != ABI_AIX && flag_pic))\n+  if (count != 0\n+      || ((DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_DARWIN) && flag_pic))\n     {\n       cfun->machine->ra_needs_full_frame = 1;\n \n@@ -20454,7 +20456,7 @@ rs6000_emit_load_toc_table (int fromprolog)\n   rtx dest;\n   dest = gen_rtx_REG (Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n \n-  if (TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI != ABI_AIX && flag_pic)\n+  if (TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI == ABI_V4 && flag_pic)\n     {\n       char buf[30];\n       rtx lab, tmp1, tmp2, got;\n@@ -20482,7 +20484,7 @@ rs6000_emit_load_toc_table (int fromprolog)\n       emit_insn (gen_load_toc_v4_pic_si ());\n       emit_move_insn (dest, gen_rtx_REG (Pmode, LR_REGNO));\n     }\n-  else if (TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2)\n+  else if (TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 2)\n     {\n       char buf[30];\n       rtx temp0 = (fromprolog\n@@ -22312,7 +22314,7 @@ rs6000_emit_prologue (void)\n \t can use register 0.  This allows us to use a plain 'blr' to return\n \t from the procedure more often.  */\n       int save_LR_around_toc_setup = (TARGET_ELF\n-\t\t\t\t      && DEFAULT_ABI != ABI_AIX\n+\t\t\t\t      && DEFAULT_ABI == ABI_V4\n \t\t\t\t      && flag_pic\n \t\t\t\t      && ! info->lr_save_p\n \t\t\t\t      && EDGE_COUNT (EXIT_BLOCK_PTR->preds) > 0);\n@@ -27620,8 +27622,7 @@ rs6000_elf_declare_function_name (FILE *file, const char *name, tree decl)\n       fprintf (file, \"%s:\\n\", desc_name);\n       fprintf (file, \"\\t.long %s\\n\", orig_name);\n       fputs (\"\\t.long _GLOBAL_OFFSET_TABLE_\\n\", file);\n-      if (DEFAULT_ABI == ABI_AIX)\n-\tfputs (\"\\t.long 0\\n\", file);\n+      fputs (\"\\t.long 0\\n\", file);\n       fprintf (file, \"\\t.previous\\n\");\n     }\n   ASM_OUTPUT_LABEL (file, name);"}, {"sha": "6dd0bcbf4c6bffbddeea7a76400049ccfc762610", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008e32c018844741b221de0aa8c910f72fe8e1e8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008e32c018844741b221de0aa8c910f72fe8e1e8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=008e32c018844741b221de0aa8c910f72fe8e1e8", "patch": "@@ -1528,15 +1528,12 @@ extern enum reg_class rs6000_constraints[RS6000_CONSTRAINT_MAX];\n \t\t\t      || (flag_sanitize & SANITIZE_ADDRESS) != 0)\n \n /* Size of the outgoing register save area */\n-#define RS6000_REG_SAVE ((DEFAULT_ABI == ABI_AIX\t\t\t\\\n-\t\t\t  || DEFAULT_ABI == ABI_DARWIN)\t\t\t\\\n-\t\t\t ? (TARGET_64BIT ? 64 : 32)\t\t\t\\\n-\t\t\t : 0)\n+#define RS6000_REG_SAVE \\\n+  ((DEFAULT_ABI == ABI_V4 ? 0 : 32) << (TARGET_64BIT ? 1 : 0))\n \n /* Size of the fixed area on the stack */\n #define RS6000_SAVE_AREA \\\n-  (((DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN) ? 24 : 8)\t\\\n-   << (TARGET_64BIT ? 1 : 0))\n+  ((DEFAULT_ABI == ABI_V4 ? 8 : 24) << (TARGET_64BIT ? 1 : 0))\n \n /* MEM representing address to save the TOC register */\n #define RS6000_SAVE_TOC gen_rtx_MEM (Pmode, \\\n@@ -1635,9 +1632,8 @@ extern enum reg_class rs6000_constraints[RS6000_CONSTRAINT_MAX];\n #define FP_ARG_MIN_REG 33\n #define\tFP_ARG_AIX_MAX_REG 45\n #define\tFP_ARG_V4_MAX_REG  40\n-#define\tFP_ARG_MAX_REG ((DEFAULT_ABI == ABI_AIX\t\t\t\t\\\n-\t\t\t || DEFAULT_ABI == ABI_DARWIN)\t\t\t\\\n-\t\t\t? FP_ARG_AIX_MAX_REG : FP_ARG_V4_MAX_REG)\n+#define\tFP_ARG_MAX_REG (DEFAULT_ABI == ABI_V4\t\t\t\t\\\n+\t\t\t? FP_ARG_V4_MAX_REG : FP_ARG_AIX_MAX_REG)\n #define FP_ARG_NUM_REG (FP_ARG_MAX_REG - FP_ARG_MIN_REG + 1)\n \n /* Minimum and maximum AltiVec registers used to hold arguments.  */\n@@ -1793,11 +1789,8 @@ typedef struct rs6000_args\n /* Number of bytes into the frame return addresses can be found.  See\n    rs6000_stack_info in rs6000.c for more information on how the different\n    abi's store the return address.  */\n-#define RETURN_ADDRESS_OFFSET\t\t\t\t\t\t\\\n- ((DEFAULT_ABI == ABI_AIX\t\t\t\t\t\t\\\n-   || DEFAULT_ABI == ABI_DARWIN)\t? (TARGET_32BIT ? 8 : 16) :\t\\\n-  (DEFAULT_ABI == ABI_V4)\t\t? 4 :\t\t\t\t\\\n-  (internal_error (\"RETURN_ADDRESS_OFFSET not supported\"), 0))\n+#define RETURN_ADDRESS_OFFSET \\\n+  ((DEFAULT_ABI == ABI_V4 ? 4 : 8) << (TARGET_64BIT ? 1 : 0))\n \n /* The current return address is in link register (65).  The return address\n    of anything farther back is accessed normally at an offset of 8 from the"}, {"sha": "7a2fcfd5b2dfc739ac72bfb64526009029760e17", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008e32c018844741b221de0aa8c910f72fe8e1e8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008e32c018844741b221de0aa8c910f72fe8e1e8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=008e32c018844741b221de0aa8c910f72fe8e1e8", "patch": "@@ -11845,15 +11845,15 @@\n   [(parallel [(set (reg:SI LR_REGNO)\n \t\t   (match_operand:SI 0 \"immediate_operand\" \"s\"))\n \t      (use (unspec [(match_dup 0)] UNSPEC_TOC))])]\n-  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX\n+  \"TARGET_ELF && DEFAULT_ABI == ABI_V4\n    && (flag_pic == 2 || (flag_pic && TARGET_SECURE_PLT))\"\n   \"\")\n \n (define_insn \"load_toc_v4_PIC_1_normal\"\n   [(set (reg:SI LR_REGNO)\n \t(match_operand:SI 0 \"immediate_operand\" \"s\"))\n    (use (unspec [(match_dup 0)] UNSPEC_TOC))]\n-  \"!TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI != ABI_AIX\n+  \"!TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI == ABI_V4\n    && (flag_pic == 2 || (flag_pic && TARGET_SECURE_PLT))\"\n   \"bcl 20,31,%0\\\\n%0:\"\n   [(set_attr \"type\" \"branch\")\n@@ -11863,7 +11863,7 @@\n   [(set (reg:SI LR_REGNO)\n \t(match_operand:SI 0 \"immediate_operand\" \"s\"))\n    (use (unspec [(match_dup 0)] UNSPEC_TOC))]\n-  \"TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI != ABI_AIX\n+  \"TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI == ABI_V4\n    && (flag_pic == 2 || (flag_pic && TARGET_SECURE_PLT))\"\n   \"*\n {\n@@ -11883,7 +11883,7 @@\n \t\t\t       (label_ref (match_operand 1 \"\" \"\"))]\n \t\t           UNSPEC_TOCPTR))\n \t      (match_dup 1)])]\n-  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n+  \"TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 2\"\n   \"\")\n \n (define_insn \"load_toc_v4_PIC_1b_normal\"\n@@ -11892,7 +11892,7 @@\n \t\t    (label_ref (match_operand 1 \"\" \"\"))]\n \t\tUNSPEC_TOCPTR))\n    (match_dup 1)]\n-  \"!TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n+  \"!TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 2\"\n   \"bcl 20,31,$+8\\;.long %0-$\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n@@ -11903,7 +11903,7 @@\n \t\t    (label_ref (match_operand 1 \"\" \"\"))]\n \t\tUNSPEC_TOCPTR))\n    (match_dup 1)]\n-  \"TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n+  \"TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 2\"\n   \"*\n {\n   char name[32];\n@@ -11921,7 +11921,7 @@\n \t(mem:SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n \t\t   (minus:SI (match_operand:SI 2 \"immediate_operand\" \"s\")\n \t\t\t     (match_operand:SI 3 \"immediate_operand\" \"s\")))))]\n-  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n+  \"TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 2\"\n   \"lwz %0,%2-%3(%1)\"\n   [(set_attr \"type\" \"load\")])\n \n@@ -11931,15 +11931,15 @@\n \t\t (high:SI\n \t\t   (minus:SI (match_operand:SI 2 \"symbol_ref_operand\" \"s\")\n \t\t\t     (match_operand:SI 3 \"symbol_ref_operand\" \"s\")))))]\n-  \"TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI != ABI_AIX && flag_pic\"\n+  \"TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI == ABI_V4 && flag_pic\"\n   \"addis %0,%1,%2-%3@ha\")\n \n (define_insn \"load_toc_v4_PIC_3c\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n \t\t   (minus:SI (match_operand:SI 2 \"symbol_ref_operand\" \"s\")\n \t\t\t     (match_operand:SI 3 \"symbol_ref_operand\" \"s\"))))]\n-  \"TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI != ABI_AIX && flag_pic\"\n+  \"TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI == ABI_V4 && flag_pic\"\n   \"addi %0,%1,%2-%3@l\")\n \n ;; If the TOC is shared over a translation unit, as happens with all"}, {"sha": "ba4ceb3ff2e1450bc3e4eb48185d371bb693298a", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008e32c018844741b221de0aa8c910f72fe8e1e8/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008e32c018844741b221de0aa8c910f72fe8e1e8/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=008e32c018844741b221de0aa8c910f72fe8e1e8", "patch": "@@ -45,7 +45,7 @@\n \t\t\t\t      & (OPTION_MASK_RELOCATABLE\t\\\n \t\t\t\t\t | OPTION_MASK_MINIMAL_TOC))\t\\\n \t\t\t\t     && flag_pic > 1)\t\t\t\\\n-\t\t\t\t || DEFAULT_ABI == ABI_AIX)\n+\t\t\t\t || DEFAULT_ABI != ABI_V4)\n \n #define\tTARGET_BITFIELD_TYPE\t(! TARGET_NO_BITFIELD_TYPE)\n #define\tTARGET_BIG_ENDIAN\t(! TARGET_LITTLE_ENDIAN)\n@@ -147,7 +147,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t     rs6000_sdata_name);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  else if (flag_pic && DEFAULT_ABI != ABI_AIX\t\t\t\t\\\n+  else if (flag_pic && DEFAULT_ABI == ABI_V4\t\t\t\t\\\n \t   && (rs6000_sdata == SDATA_EABI\t\t\t\t\\\n \t       || rs6000_sdata == SDATA_SYSV))\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -173,14 +173,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n       error (\"-mrelocatable and -mno-minimal-toc are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_RELOCATABLE && rs6000_current_abi == ABI_AIX)\t\t\\\n+  if (TARGET_RELOCATABLE && rs6000_current_abi != ABI_V4)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\t\t\t\\\n       error (\"-mrelocatable and -mcall-%s are incompatible\",\t\t\\\n \t     rs6000_abi_name);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (!TARGET_64BIT && flag_pic > 1 && rs6000_current_abi == ABI_AIX)\t\\\n+  if (!TARGET_64BIT && flag_pic > 1 && rs6000_current_abi != ABI_V4)\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       flag_pic = 0;\t\t\t\t\t\t\t\\\n       error (\"-fPIC and -mcall-%s are incompatible\",\t\t\t\\\n@@ -193,7 +193,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   /* Treat -fPIC the same as -mrelocatable.  */\t\t\t\t\\\n-  if (flag_pic > 1 && DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n+  if (flag_pic > 1 && DEFAULT_ABI == ABI_V4)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_isa_flags |= OPTION_MASK_RELOCATABLE | OPTION_MASK_MINIMAL_TOC; \\\n       TARGET_NO_FP_IN_TOC = 1;\t\t\t\t\t\t\\\n@@ -317,7 +317,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Put PC relative got entries in .got2.  */\n #define\tMINIMAL_TOC_SECTION_ASM_OP \\\n-  (TARGET_RELOCATABLE || (flag_pic && DEFAULT_ABI != ABI_AIX)\t\t\\\n+  (TARGET_RELOCATABLE || (flag_pic && DEFAULT_ABI == ABI_V4)\t\t\\\n    ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\" : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\")\n \n #define\tSDATA_SECTION_ASM_OP \"\\t.section\\t\\\".sdata\\\",\\\"aw\\\"\""}]}