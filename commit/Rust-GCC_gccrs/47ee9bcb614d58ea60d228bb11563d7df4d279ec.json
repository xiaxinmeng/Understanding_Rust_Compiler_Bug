{"sha": "47ee9bcb614d58ea60d228bb11563d7df4d279ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlZTliY2I2MTRkNThlYTYwZDIyOGJiMTE1NjNkN2RmNGQyNzllYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-02-21T23:27:01Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-02-21T23:27:01Z"}, "message": "defaults.h (ASM_OUTPUT_ASCII): Constify a char*.\n\n\t* defaults.h (ASM_OUTPUT_ASCII): Constify a char*.\n\n\t* flow.c (get_common_dest, chain_reorder_blocks, make_reorder_chain,\n\tfixup_reorder_chain, skip_insns_between_block): Add static prototypes.\n\t(life_analysis): Wrap variable `i' with macro ELIMINABLE_REGS.\n\n\t* haifa-sched.c (rank_for_schedule): Don't cast away const-ness.\n\n\t* integrate.c (compare_blocks, find_block): Likewise.\n\n\t* rtl.c (fatal_with_file_and_line): Add ATTRIBUTE_PRINTF_2.\n\n\t* rtl.h (set_file_and_line_for_stmt): Constify a char*.\n\n\t* stmt.c (stmt_status, set_file_and_line_for_stmt,\n\texpand_asm_operands): Likewise.\n\nFrom-SVN: r32094", "tree": {"sha": "ab68a041c8b2cd79695b0babfdcf3e374beeb39a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab68a041c8b2cd79695b0babfdcf3e374beeb39a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ee9bcb614d58ea60d228bb11563d7df4d279ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ee9bcb614d58ea60d228bb11563d7df4d279ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ee9bcb614d58ea60d228bb11563d7df4d279ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ee9bcb614d58ea60d228bb11563d7df4d279ec/comments", "author": null, "committer": null, "parents": [{"sha": "24c3bf687d847ec0fadeae8157e01eb09453d94d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c3bf687d847ec0fadeae8157e01eb09453d94d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c3bf687d847ec0fadeae8157e01eb09453d94d"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "8ad693acac64cccc6dc8b001bcb36f8d194b29ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47ee9bcb614d58ea60d228bb11563d7df4d279ec", "patch": "@@ -1,3 +1,22 @@\n+2000-02-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* defaults.h (ASM_OUTPUT_ASCII): Constify a char*.\n+\n+\t* flow.c (get_common_dest, chain_reorder_blocks, make_reorder_chain,\n+\tfixup_reorder_chain, skip_insns_between_block): Add static prototypes.\n+\t(life_analysis): Wrap variable `i' with macro ELIMINABLE_REGS.\n+\n+\t* haifa-sched.c (rank_for_schedule): Don't cast away const-ness.\n+\n+\t* integrate.c (compare_blocks, find_block): Likewise.\n+\n+\t* rtl.c (fatal_with_file_and_line): Add ATTRIBUTE_PRINTF_2.\n+\n+\t* rtl.h (set_file_and_line_for_stmt): Constify a char*.\n+\n+\t* stmt.c (stmt_status, set_file_and_line_for_stmt,\n+\texpand_asm_operands): Likewise.\n+\n Mon Feb 21 17:06:27 2000  Jason Eckhardt  <jle@cygnus.com>\n \n \t* predict.c (estimate_probability): Added the pointer heuristic to"}, {"sha": "e421e1295a24b11208a2dbf68821e71c0cc8e076", "filename": "gcc/defaults.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=47ee9bcb614d58ea60d228bb11563d7df4d279ec", "patch": "@@ -66,11 +66,11 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n #define ASM_OUTPUT_ASCII(MYFILE, MYSTRING, MYLENGTH) \\\n   do {\t\t\t\t\t\t\t\t\t      \\\n     FILE *_hide_asm_out_file = (MYFILE);\t\t\t\t      \\\n-    unsigned char *_hide_p = (unsigned char *) (MYSTRING);\t\t      \\\n+    const unsigned char *_hide_p = (const unsigned char *) (MYSTRING);\t      \\\n     int _hide_thissize = (MYLENGTH);\t\t\t\t\t      \\\n     {\t\t\t\t\t\t\t\t\t      \\\n       FILE *asm_out_file = _hide_asm_out_file;\t\t\t\t      \\\n-      unsigned char *p = _hide_p;\t\t\t\t\t      \\\n+      const unsigned char *p = _hide_p;\t\t\t\t\t      \\\n       int thissize = _hide_thissize;\t\t\t\t\t      \\\n       int i;\t\t\t\t\t\t\t\t      \\\n       fprintf (asm_out_file, \"\\t.ascii \\\"\");\t\t\t\t      \\"}, {"sha": "a7217dbf486ff246e9e5b24b9b4b399311e3d7af", "filename": "gcc/flow.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=47ee9bcb614d58ea60d228bb11563d7df4d279ec", "patch": "@@ -351,6 +351,10 @@ static void flow_loop_tree_node_add\tPARAMS ((struct loop *, struct loop *));\n static void flow_loops_tree_build\tPARAMS ((struct loops *));\n static int flow_loop_level_compute\tPARAMS ((struct loop *, int));\n static int flow_loops_level_compute\tPARAMS ((struct loops *));\n+static basic_block get_common_dest\tPARAMS ((basic_block, basic_block));\n+static basic_block chain_reorder_blocks\tPARAMS ((edge, basic_block));\n+static void make_reorder_chain\t\tPARAMS ((basic_block));\n+static void fixup_reorder_chain\t\tPARAMS ((void));\n \n /* This function is always defined so it can be called from the\n    debugger, and it is declared extern so we don't get warnings about\n@@ -2454,8 +2458,8 @@ life_analysis (f, nregs, file, remove_dead_code)\n      FILE *file;\n      int remove_dead_code;\n {\n-  register int i;\n #ifdef ELIMINABLE_REGS\n+  register int i;\n   static struct {int from, to; } eliminables[] = ELIMINABLE_REGS;\n #endif\n   int flags;\n@@ -7075,6 +7079,9 @@ static basic_block reorder_last_visited;\n enum reorder_skip_type {REORDER_SKIP_BEFORE, REORDER_SKIP_AFTER,\n \t\t\tREORDER_SKIP_BLOCK_END};\n \n+static rtx skip_insns_between_block\tPARAMS ((basic_block,\n+\t\t\t\t\t\t enum reorder_skip_type));\n+\n /* Skip over insns BEFORE or AFTER BB which are typically associated with\n    basic block BB.  */\n "}, {"sha": "939ddab2715e1cc69b9773e1d6fbc7ebe67edb2c", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=47ee9bcb614d58ea60d228bb11563d7df4d279ec", "patch": "@@ -3978,8 +3978,8 @@ rank_for_schedule (x, y)\n      const PTR x;\n      const PTR y;\n {\n-  rtx tmp = *(rtx *)y;\n-  rtx tmp2 = *(rtx *)x;\n+  rtx tmp = *(const rtx *)y;\n+  rtx tmp2 = *(const rtx *)x;\n   rtx link;\n   int tmp_class, tmp2_class, depend_count1, depend_count2;\n   int val, priority_val, spec_val, prob_val, weight_val;"}, {"sha": "b3a22a90a166e23e4cefc09ad6b8ab574da9ec88", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=47ee9bcb614d58ea60d228bb11563d7df4d279ec", "patch": "@@ -521,8 +521,8 @@ compare_blocks (v1, v2)\n      const PTR v1;\n      const PTR v2;\n {\n-  tree b1 = *((tree *) v1);\n-  tree b2 = *((tree *) v2);\n+  tree b1 = *((const tree *) v1);\n+  tree b2 = *((const tree *) v2);\n \n   return ((char *) BLOCK_ABSTRACT_ORIGIN (b1) \n \t  - (char *) BLOCK_ABSTRACT_ORIGIN (b2));\n@@ -536,10 +536,10 @@ find_block (v1, v2)\n      const PTR v1;\n      const PTR v2;\n {\n-  tree b1 = (tree) v1;\n-  tree b2 = *((tree *) v2);\n+  const union tree_node *b1 = (const union tree_node *) v1;\n+  tree b2 = *((const tree *) v2);\n \n-  return ((char *) b1 - (char *) BLOCK_ABSTRACT_ORIGIN (b2));\n+  return ((const char *) b1 - (char *) BLOCK_ABSTRACT_ORIGIN (b2));\n }\n \n /* Integrate the procedure defined by FNDECL.  Note that this function"}, {"sha": "242db5bb83b2c1f3c317ad12113c8fd4fc2cd6a3", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=47ee9bcb614d58ea60d228bb11563d7df4d279ec", "patch": "@@ -258,7 +258,7 @@ const char * const reg_note_name[] = { \"\", \"REG_DEAD\", \"REG_INC\", \"REG_EQUIV\", \"\n \t\t\t  \"REG_EH_RETHROW\", \"REG_SAVE_NOTE\" };\n \n static void fatal_with_file_and_line PARAMS ((FILE *, const char *, ...))\n-  ATTRIBUTE_NORETURN;\n+  ATTRIBUTE_PRINTF_2 ATTRIBUTE_NORETURN;\n static void fatal_expected_char PARAMS ((FILE *, int, int)) ATTRIBUTE_NORETURN;\n static void read_name\t\tPARAMS ((char *, FILE *));\n static const char *trim_filename PARAMS ((const char *));"}, {"sha": "d3ca9b06fc9e8b6674fc91bf5597d449c6d3e6bf", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=47ee9bcb614d58ea60d228bb11563d7df4d279ec", "patch": "@@ -1517,7 +1517,7 @@ extern int operands_match_p\t\tPARAMS ((rtx, rtx));\n extern int safe_from_earlyclobber\tPARAMS ((rtx, rtx));\n \n /* In stmt.c */\n-extern void set_file_and_line_for_stmt\tPARAMS ((char *, int));\n+extern void set_file_and_line_for_stmt\tPARAMS ((const char *, int));\n extern void expand_null_return\t\tPARAMS ((void));\n extern void emit_jump\t\t\tPARAMS ((rtx));\n extern int preserve_subexpressions_p\tPARAMS ((void));"}, {"sha": "7c4c563127d0b0f9fb86f85951cb90d0b99b0f34", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee9bcb614d58ea60d228bb11563d7df4d279ec/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=47ee9bcb614d58ea60d228bb11563d7df4d279ec", "patch": "@@ -373,7 +373,7 @@ struct stmt_status\n \n   /* Filename and line number of last line-number note,\n      whether we actually emitted it or not.  */\n-  char *x_emit_filename;\n+  const char *x_emit_filename;\n   int x_emit_lineno;\n \n   struct goto_fixup *x_goto_fixup_chain;\n@@ -639,7 +639,7 @@ in_control_zone_p ()\n /* Record the current file and line.  Called from emit_line_note.  */\n void\n set_file_and_line_for_stmt (file, line)\n-     char *file;\n+     const char *file;\n      int line;\n {\n   /* If we're outputting an inline function, and we add a line note,\n@@ -1351,7 +1351,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   nclobbers = 0;\n   for (tail = clobbers; tail; tail = TREE_CHAIN (tail))\n     {\n-      char *regname = TREE_STRING_POINTER (TREE_VALUE (tail));\n+      const char *regname = TREE_STRING_POINTER (TREE_VALUE (tail));\n \n       i = decode_reg_name (regname);\n       if (i >= 0 || i == -4)\n@@ -1379,7 +1379,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n       tmp = outputs;\n       while (tmp)\n \t{\n-\t  char *constraint = TREE_STRING_POINTER (TREE_PURPOSE (tmp));\n+\t  const char *constraint = TREE_STRING_POINTER (TREE_PURPOSE (tmp));\n \n \t  if (n_occurrences (',', constraint) != nalternatives)\n \t    {\n@@ -1797,7 +1797,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n       for (tail = clobbers; tail; tail = TREE_CHAIN (tail))\n \t{\n-\t  char *regname = TREE_STRING_POINTER (TREE_VALUE (tail));\n+\t  const char *regname = TREE_STRING_POINTER (TREE_VALUE (tail));\n \t  int j = decode_reg_name (regname);\n \n \t  if (j < 0)"}]}