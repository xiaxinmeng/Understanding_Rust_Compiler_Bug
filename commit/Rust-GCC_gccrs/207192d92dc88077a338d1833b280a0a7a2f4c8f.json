{"sha": "207192d92dc88077a338d1833b280a0a7a2f4c8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3MTkyZDkyZGM4ODA3N2EzMzhkMTgzM2IyODBhMGE3YTJmNGM4Zg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@dcc.unicamp.br", "date": "1998-09-11T21:44:37Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gcc.gnu.org", "date": "1998-09-11T21:44:37Z"}, "message": "typedef5.C: check whether typedefs can be redefined to the same non-trivial type\n\n\t* g++.old-deja/g++.other/typedef5.C: check whether typedefs can be\n \tredefined to the same non-trivial type\n\t* g++.old-deja/g++.pt/explicit73.C: test for proper\n \tnamespace-qualification of template specializations declared in\n \tother namespaces\n\t* g++.old-deja/g++.other/friend4.C: check whether it is possible\n\tto declare a subset of the specializations of a template function\n\tas friends of specializations of a template class\n\t* g++.old-deja/g++.pt/explicit71.C: make sure specializations of\n \tmember templates that do not fully specialize the enclosing\n \ttemplate class are rejected\n\nFrom-SVN: r22392", "tree": {"sha": "9a1245952c787cc24cd94846142d71070e840b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a1245952c787cc24cd94846142d71070e840b72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/207192d92dc88077a338d1833b280a0a7a2f4c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207192d92dc88077a338d1833b280a0a7a2f4c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207192d92dc88077a338d1833b280a0a7a2f4c8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207192d92dc88077a338d1833b280a0a7a2f4c8f/comments", "author": null, "committer": null, "parents": [{"sha": "4525948204e961668798eac88db22247ece8df65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4525948204e961668798eac88db22247ece8df65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4525948204e961668798eac88db22247ece8df65"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "2e0d430a5b0c4c5a7cb2a671e95d70967f787514", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207192d92dc88077a338d1833b280a0a7a2f4c8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207192d92dc88077a338d1833b280a0a7a2f4c8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=207192d92dc88077a338d1833b280a0a7a2f4c8f", "patch": "@@ -1,3 +1,20 @@\n+1998-09-12  Alexandre Oliva  <oliva@dcc.unicamp.br>\n+\n+\t* g++.old-deja/g++.other/typedef5.C: check whether typedefs can be\n+ \tredefined to the same non-trivial type\n+\n+\t* g++.old-deja/g++.pt/explicit73.C: test for proper\n+ \tnamespace-qualification of template specializations declared in\n+ \tother namespaces\n+\n+\t* g++.old-deja/g++.other/friend4.C: check whether it is possible\n+\tto declare a subset of the specializations of a template function\n+\tas friends of specializations of a template class\n+\n+\t* g++.old-deja/g++.pt/explicit71.C: make sure specializations of\n+ \tmember templates that do not fully specialize the enclosing\n+ \ttemplate class are rejected\n+\n 1998-09-11  Dave Love  <d.love@dl.ac.uk>\n \n \t* g77.f-torture/execute/u77-test.f: Fix bad consistency checks."}, {"sha": "a208f5fe307f77f778ecdc9e1bce9431a4cba276", "filename": "gcc/testsuite/g++.old-deja/g++.other/friend4.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207192d92dc88077a338d1833b280a0a7a2f4c8f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207192d92dc88077a338d1833b280a0a7a2f4c8f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend4.C?ref=207192d92dc88077a338d1833b280a0a7a2f4c8f", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link:\n+\n+// by Alexandre Oliva <oliva@dcc.unicamp.br>\n+\n+// I'm not 100% sure this program is correct, but g++ shouldn't just\n+// crash.\n+\n+// The idea is to give privileged access to bar<A> only to\n+// specializations foo<A,B>, for all B.\n+\n+template <class A, class B> void foo();\n+template <class C> class bar {\n+  int i;\n+  template <class B> friend void foo<C,B>();\n+};\n+template <class A, class B> void foo() {\n+  bar<A> baz; baz.i = 1;\n+  bar<int> buz; buz.i = 1; // ERROR - foo<void,void> cannot access bar<int>::i - XFAIL *-*-*\n+}\n+int main() {\n+  foo<void,void>();\n+  foo<int,void>();\n+}"}, {"sha": "c382088ef6e9e6cb2f059fd40035e7c570e75c23", "filename": "gcc/testsuite/g++.old-deja/g++.other/typedef5.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207192d92dc88077a338d1833b280a0a7a2f4c8f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207192d92dc88077a338d1833b280a0a7a2f4c8f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef5.C?ref=207192d92dc88077a338d1833b280a0a7a2f4c8f", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link:\n+\n+// by Alexandre Oliva <oliva@dcc.unicamp.br>\n+\n+typedef int t;\n+typedef t* u;\n+typedef int t;\n+typedef t* u;"}, {"sha": "3da4c61dc3fd0df893e369d84dc9d892807f7f41", "filename": "gcc/testsuite/g++.old-deja/g++.pt/explicit71.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207192d92dc88077a338d1833b280a0a7a2f4c8f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit71.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207192d92dc88077a338d1833b280a0a7a2f4c8f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit71.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit71.C?ref=207192d92dc88077a338d1833b280a0a7a2f4c8f", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link:\n+// by Alexandre Oliva <oliva@dcc.unicamp.br>\n+// Based on a testcase by Reid M. Pinchback <reidmp@MIT.EDU>\n+// According to the C++ Standard [temp.expl.spec]/17-18, explicit\n+// specializations are only valid if all enclosing template classes\n+// of the specialized template are fully specialized too\n+\n+template <class X> \n+class bug {\n+  template <class Y> \n+  class a {}; \n+};\n+template <class X> \n+template <> \n+class bug<X>::a<char> {}; // ERROR - invalid specialization"}, {"sha": "106f573c6253b8c9da52595a396cc73ef3936f07", "filename": "gcc/testsuite/g++.old-deja/g++.pt/explicit73.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207192d92dc88077a338d1833b280a0a7a2f4c8f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit73.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207192d92dc88077a338d1833b280a0a7a2f4c8f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit73.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit73.C?ref=207192d92dc88077a338d1833b280a0a7a2f4c8f", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link:\n+\n+// by Alexandre Oliva <oliva@dcc.unicamp.br>\n+\n+// According to [temp.expl.spec]/2, a template explicit specialization\n+// must be declared in the namespace that contains the declaration of\n+// the template\n+\n+namespace N {\n+  template <class T> class foo;\n+}\n+\n+using namespace N;\n+\n+template <> class foo<void>; // ERROR - invalid specialization - XFAIL *-*-*"}]}