{"sha": "3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VjMDkyMmI4NjRjNjNiY2Q5ZTVjYTQ1MjJiNmMzYmZjNjQ4ODFkOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-10-21T14:14:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-10-21T14:14:06Z"}, "message": "parser.c (cp_parser_unary_expression): Add default arguments.\n\n2014-10-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* parser.c (cp_parser_unary_expression): Add default arguments.\n\t(cp_parser_cast_expression, cp_parser_sizeof_operand,\n\tcp_parser_omp_atomic): Adjust.\n\nFrom-SVN: r216516", "tree": {"sha": "de1192d8e09e1f12b7e9e502a20b2a4b0a347a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de1192d8e09e1f12b7e9e502a20b2a4b0a347a00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9/comments", "author": null, "committer": null, "parents": [{"sha": "6b17203a20c907fd7736f3f5c8bfe34731e8efba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b17203a20c907fd7736f3f5c8bfe34731e8efba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b17203a20c907fd7736f3f5c8bfe34731e8efba"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "e5667506b6ac97fe44669152b153e1ca7cebba88", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9", "patch": "@@ -1,3 +1,9 @@\n+2014-10-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* parser.c (cp_parser_unary_expression): Add default arguments.\n+\t(cp_parser_cast_expression, cp_parser_sizeof_operand,\n+\tcp_parser_omp_atomic): Adjust.\n+\n 2014-10-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/63601"}, {"sha": "62a815eb42cf3d272a1b7ee4b325337b09a964dd", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3ec0922b864c63bcd9e5ca4522b6c3bfc64881d9", "patch": "@@ -1968,7 +1968,7 @@ enum { non_attr = 0, normal_attr = 1, id_attr = 2 };\n static void cp_parser_pseudo_destructor_name\n   (cp_parser *, tree, tree *, tree *);\n static tree cp_parser_unary_expression\n-  (cp_parser *, bool, bool, cp_id_kind *);\n+  (cp_parser *, cp_id_kind * = NULL, bool = false, bool = false, bool = false);\n static enum tree_code cp_parser_unary_operator\n   (cp_token *);\n static tree cp_parser_new_expression\n@@ -7104,8 +7104,8 @@ cp_parser_pseudo_destructor_name (cp_parser* parser,\n    Returns a representation of the expression.  */\n \n static tree\n-cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p,\n-\t\t\t    bool decltype_p, cp_id_kind * pidk)\n+cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n+\t\t\t    bool address_p, bool cast_p, bool decltype_p)\n {\n   cp_token *token;\n   enum tree_code unary_operator;\n@@ -7381,14 +7381,6 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t\t\t       pidk);\n }\n \n-static inline tree\n-cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p,\n-\t\t\t    cp_id_kind * pidk)\n-{\n-  return cp_parser_unary_expression (parser, address_p, cast_p,\n-\t\t\t\t     /*decltype*/false, pidk);\n-}\n-\n /* Returns ERROR_MARK if TOKEN is not a unary-operator.  If TOKEN is a\n    unary-operator, the corresponding tree code is returned.  */\n \n@@ -8018,8 +8010,8 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p,\n \n   /* If we get here, then it's not a cast, so it must be a\n      unary-expression.  */\n-  return cp_parser_unary_expression (parser, address_p, cast_p,\n-\t\t\t\t     decltype_p, pidk);\n+  return cp_parser_unary_expression (parser, pidk, address_p,\n+\t\t\t\t     cast_p, decltype_p);\n }\n \n /* Parse a binary expression of the general form:\n@@ -24374,8 +24366,7 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n   /* If the type-id production did not work out, then we must be\n      looking at the unary-expression production.  */\n   if (!expr)\n-    expr = cp_parser_unary_expression (parser, /*address_p=*/false,\n-\t\t\t\t       /*cast_p=*/false, NULL);\n+    expr = cp_parser_unary_expression (parser);\n \n   /* Go back to evaluating expressions.  */\n   --cp_unevaluated_operand;\n@@ -29039,17 +29030,15 @@ cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok)\n     {\n     case OMP_ATOMIC_READ:\n     case NOP_EXPR: /* atomic write */\n-      v = cp_parser_unary_expression (parser, /*address_p=*/false,\n-\t\t\t\t      /*cast_p=*/false, NULL);\n+      v = cp_parser_unary_expression (parser);\n       if (v == error_mark_node)\n \tgoto saw_error;\n       if (!cp_parser_require (parser, CPP_EQ, RT_EQ))\n \tgoto saw_error;\n       if (code == NOP_EXPR)\n \tlhs = cp_parser_expression (parser);\n       else\n-\tlhs = cp_parser_unary_expression (parser, /*address_p=*/false,\n-\t\t\t\t\t  /*cast_p=*/false, NULL);\n+\tlhs = cp_parser_unary_expression (parser);\n       if (lhs == error_mark_node)\n \tgoto saw_error;\n       if (code == NOP_EXPR)\n@@ -29070,8 +29059,7 @@ cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok)\n \t}\n       else\n \t{\n-\t  v = cp_parser_unary_expression (parser, /*address_p=*/false,\n-\t\t\t\t\t  /*cast_p=*/false, NULL);\n+\t  v = cp_parser_unary_expression (parser);\n \t  if (v == error_mark_node)\n \t    goto saw_error;\n \t  if (!cp_parser_require (parser, CPP_EQ, RT_EQ))\n@@ -29082,8 +29070,7 @@ cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok)\n     }\n \n restart:\n-  lhs = cp_parser_unary_expression (parser, /*address_p=*/false,\n-\t\t\t\t    /*cast_p=*/false, NULL);\n+  lhs = cp_parser_unary_expression (parser);\n   orig_lhs = lhs;\n   switch (TREE_CODE (lhs))\n     {\n@@ -29322,14 +29309,12 @@ cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok)\n     {\n       if (!cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON))\n \tgoto saw_error;\n-      v = cp_parser_unary_expression (parser, /*address_p=*/false,\n-\t\t\t\t      /*cast_p=*/false, NULL);\n+      v = cp_parser_unary_expression (parser);\n       if (v == error_mark_node)\n \tgoto saw_error;\n       if (!cp_parser_require (parser, CPP_EQ, RT_EQ))\n \tgoto saw_error;\n-      lhs1 = cp_parser_unary_expression (parser, /*address_p=*/false,\n-\t\t\t\t\t /*cast_p=*/false, NULL);\n+      lhs1 = cp_parser_unary_expression (parser);\n       if (lhs1 == error_mark_node)\n \tgoto saw_error;\n     }"}]}