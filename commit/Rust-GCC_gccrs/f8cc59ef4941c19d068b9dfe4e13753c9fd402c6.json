{"sha": "f8cc59ef4941c19d068b9dfe4e13753c9fd402c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjYzU5ZWY0OTQxYzE5ZDA2OGI5ZGZlNGUxMzc1M2M5ZmQ0MDJjNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-11-05T15:00:17Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-11-05T15:00:17Z"}, "message": "diagnostic paths: loosen coupling between path-printing and path_summary\n\nDoing this makes followup work to add HTML path-printing cleaner.\n\ngcc/ChangeLog:\n\t* tree-diagnostic-path.cc (struct path_summary::event_range): Move\n\tout of path_summary to...\n\t(struct event_range): ...here.\n\t(class path_summary): Convert to...\n\t(struct path_summary): ...this.\n\t(path_summary::m_ranges): Drop \"private\".\n\t(path_summary::print): Convert to...\n\t(print_path_summary_as_text): ...this, passing in the path_summary\n\texplicitly.\n\t(default_tree_diagnostic_path_printer): Update for above change.\n\t(selftest::test_empty_path): Likewise.\n\t(selftest::test_intraprocedural_path): Likewise.\n\t(selftest::test_interprocedural_path_1): Likewise.\n\t(selftest::test_interprocedural_path_2): Likewise.\n\t(selftest::test_recursion): Likewise.", "tree": {"sha": "457d89db427b03c5bf6ba4b2677c0b38101cc451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/457d89db427b03c5bf6ba4b2677c0b38101cc451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8cc59ef4941c19d068b9dfe4e13753c9fd402c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8cc59ef4941c19d068b9dfe4e13753c9fd402c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8cc59ef4941c19d068b9dfe4e13753c9fd402c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8cc59ef4941c19d068b9dfe4e13753c9fd402c6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc32e81cdbb7696cd571bdb5ffe52f228f125df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc32e81cdbb7696cd571bdb5ffe52f228f125df5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc32e81cdbb7696cd571bdb5ffe52f228f125df5"}], "stats": {"total": 204, "additions": 100, "deletions": 104}, "files": [{"sha": "164df86037e32985de10c3552eb77e8e38a94289", "filename": "gcc/tree-diagnostic-path.cc", "status": "modified", "additions": 100, "deletions": 104, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8cc59ef4941c19d068b9dfe4e13753c9fd402c6/gcc%2Ftree-diagnostic-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8cc59ef4941c19d068b9dfe4e13753c9fd402c6/gcc%2Ftree-diagnostic-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic-path.cc?ref=f8cc59ef4941c19d068b9dfe4e13753c9fd402c6", "patch": "@@ -110,112 +110,108 @@ can_consolidate_events (const diagnostic_event &e1,\n   return true;\n }\n \n-/* A class for grouing together the events in a diagnostic_path into\n-   ranges of events, partitioned by stack frame (i.e. by fndecl and\n-   stack depth).  */\n-\n-class path_summary\n+/* A range of consecutive events within a diagnostic_path,\n+   all with the same fndecl and stack_depth, and which are suitable\n+   to print with a single call to diagnostic_show_locus.  */\n+struct event_range\n {\n-  /* A range of consecutive events within a diagnostic_path,\n-     all with the same fndecl and stack_depth, and which are suitable\n-     to print with a single call to diagnostic_show_locus.  */\n-  struct event_range\n+  event_range (const diagnostic_path *path, unsigned start_idx,\n+\t       const diagnostic_event &initial_event)\n+  : m_path (path),\n+    m_initial_event (initial_event),\n+    m_fndecl (initial_event.get_fndecl ()),\n+    m_stack_depth (initial_event.get_stack_depth ()),\n+    m_start_idx (start_idx), m_end_idx (start_idx),\n+    m_path_label (path, start_idx),\n+    m_richloc (initial_event.get_location (), &m_path_label)\n+  {}\n+\n+  bool maybe_add_event (const diagnostic_event &new_ev, unsigned idx,\n+\t\t\tbool check_rich_locations)\n   {\n-    event_range (const diagnostic_path *path, unsigned start_idx,\n-\t\t const diagnostic_event &initial_event)\n-    : m_path (path),\n-      m_initial_event (initial_event),\n-      m_fndecl (initial_event.get_fndecl ()),\n-      m_stack_depth (initial_event.get_stack_depth ()),\n-      m_start_idx (start_idx), m_end_idx (start_idx),\n-      m_path_label (path, start_idx),\n-      m_richloc (initial_event.get_location (), &m_path_label)\n-    {}\n-\n-    bool maybe_add_event (const diagnostic_event &new_ev, unsigned idx,\n-\t\t\t  bool check_rich_locations)\n-    {\n-      if (!can_consolidate_events (m_initial_event, new_ev,\n-\t\t\t\t   check_rich_locations))\n+    if (!can_consolidate_events (m_initial_event, new_ev,\n+\t\t\t\t check_rich_locations))\n+      return false;\n+    if (check_rich_locations)\n+      if (!m_richloc.add_location_if_nearby (new_ev.get_location (),\n+\t\t\t\t\t     false, &m_path_label))\n \treturn false;\n-      if (check_rich_locations)\n-\tif (!m_richloc.add_location_if_nearby (new_ev.get_location (),\n-\t\t\t\t\t       false, &m_path_label))\n-\t  return false;\n-      m_end_idx = idx;\n-      return true;\n-    }\n+    m_end_idx = idx;\n+    return true;\n+  }\n \n-    /* Print the events in this range to DC, typically as a single\n-       call to the printer's diagnostic_show_locus.  */\n+  /* Print the events in this range to DC, typically as a single\n+     call to the printer's diagnostic_show_locus.  */\n \n-    void print (diagnostic_context *dc)\n-    {\n-      location_t initial_loc = m_initial_event.get_location ();\n+  void print (diagnostic_context *dc)\n+  {\n+    location_t initial_loc = m_initial_event.get_location ();\n \n-      /* Emit a span indicating the filename (and line/column) if the\n-\t line has changed relative to the last call to\n-\t diagnostic_show_locus.  */\n-      if (dc->show_caret)\n-\t{\n-\t  expanded_location exploc\n-\t    = linemap_client_expand_location_to_spelling_point\n-\t    (initial_loc, LOCATION_ASPECT_CARET);\n-\t  if (exploc.file != LOCATION_FILE (dc->last_location))\n-\t    dc->start_span (dc, exploc);\n-\t}\n+    /* Emit a span indicating the filename (and line/column) if the\n+       line has changed relative to the last call to\n+       diagnostic_show_locus.  */\n+    if (dc->show_caret)\n+      {\n+\texpanded_location exploc\n+\t  = linemap_client_expand_location_to_spelling_point\n+\t  (initial_loc, LOCATION_ASPECT_CARET);\n+\tif (exploc.file != LOCATION_FILE (dc->last_location))\n+\t  dc->start_span (dc, exploc);\n+      }\n \n-      /* If we have an UNKNOWN_LOCATION (or BUILTINS_LOCATION) as the\n-\t primary location for an event, diagnostic_show_locus won't print\n-\t anything.\n+    /* If we have an UNKNOWN_LOCATION (or BUILTINS_LOCATION) as the\n+       primary location for an event, diagnostic_show_locus won't print\n+       anything.\n \n-\t In particular the label for the event won't get printed.\n-\t Fail more gracefully in this case by showing the event\n-\t index and text, at no particular location.  */\n-      if (get_pure_location (initial_loc) <= BUILTINS_LOCATION)\n-\t{\n-\t  for (unsigned i = m_start_idx; i <= m_end_idx; i++)\n-\t    {\n-\t      const diagnostic_event &iter_event = m_path->get_event (i);\n-\t      diagnostic_event_id_t event_id (i);\n-\t      label_text event_text (iter_event.get_desc (true));\n-\t      pretty_printer *pp = dc->printer;\n-\t      pp_printf (pp, \" %@: %s\", &event_id, event_text.m_buffer);\n-\t      pp_newline (pp);\n-\t      event_text.maybe_free ();\n-\t    }\n-\t  return;\n-\t}\n+       In particular the label for the event won't get printed.\n+       Fail more gracefully in this case by showing the event\n+       index and text, at no particular location.  */\n+    if (get_pure_location (initial_loc) <= BUILTINS_LOCATION)\n+      {\n+\tfor (unsigned i = m_start_idx; i <= m_end_idx; i++)\n+\t  {\n+\t    const diagnostic_event &iter_event = m_path->get_event (i);\n+\t    diagnostic_event_id_t event_id (i);\n+\t    label_text event_text (iter_event.get_desc (true));\n+\t    pretty_printer *pp = dc->printer;\n+\t    pp_printf (pp, \" %@: %s\", &event_id, event_text.m_buffer);\n+\t    pp_newline (pp);\n+\t    event_text.maybe_free ();\n+\t  }\n+\treturn;\n+      }\n \n-      /* Call diagnostic_show_locus to show the events using labels.  */\n-      diagnostic_show_locus (dc, &m_richloc, DK_DIAGNOSTIC_PATH);\n+    /* Call diagnostic_show_locus to show the events using labels.  */\n+    diagnostic_show_locus (dc, &m_richloc, DK_DIAGNOSTIC_PATH);\n \n-      /* If we have a macro expansion, show the expansion to the user.  */\n-      if (linemap_location_from_macro_expansion_p (line_table, initial_loc))\n-\t{\n-\t  gcc_assert (m_start_idx == m_end_idx);\n-\t  maybe_unwind_expanded_macro_loc (dc, initial_loc);\n-\t}\n-    }\n+    /* If we have a macro expansion, show the expansion to the user.  */\n+    if (linemap_location_from_macro_expansion_p (line_table, initial_loc))\n+      {\n+\tgcc_assert (m_start_idx == m_end_idx);\n+\tmaybe_unwind_expanded_macro_loc (dc, initial_loc);\n+      }\n+  }\n \n-    const diagnostic_path *m_path;\n-    const diagnostic_event &m_initial_event;\n-    tree m_fndecl;\n-    int m_stack_depth;\n-    unsigned m_start_idx;\n-    unsigned m_end_idx;\n-    path_label m_path_label;\n-    gcc_rich_location m_richloc;\n-  };\n+  const diagnostic_path *m_path;\n+  const diagnostic_event &m_initial_event;\n+  tree m_fndecl;\n+  int m_stack_depth;\n+  unsigned m_start_idx;\n+  unsigned m_end_idx;\n+  path_label m_path_label;\n+  gcc_rich_location m_richloc;\n+};\n \n- public:\n-  path_summary (const diagnostic_path &path, bool check_rich_locations);\n+/* A struct for grouping together the events in a diagnostic_path into\n+   ranges of events, partitioned by stack frame (i.e. by fndecl and\n+   stack depth).  */\n \n-  void print (diagnostic_context *dc, bool show_depths) const;\n+struct path_summary\n+{\n+  path_summary (const diagnostic_path &path, bool check_rich_locations);\n \n   unsigned get_num_ranges () const { return m_ranges.length (); }\n \n- private:\n   auto_delete_vec <event_range> m_ranges;\n };\n \n@@ -265,7 +261,7 @@ print_fndecl (pretty_printer *pp, tree fndecl, bool quoted)\n     pp_string (pp, n);\n }\n \n-/* Print this path_summary to DC, giving an overview of the interprocedural\n+/* Print path_summary PS to DC, giving an overview of the interprocedural\n    calls and returns.\n \n    Print the event descriptions in a nested form, printing the event\n@@ -299,7 +295,8 @@ print_fndecl (pretty_printer *pp, tree fndecl, bool quoted)\n    For events with UNKNOWN_LOCATION, print a summary of each the event.  */\n \n void\n-path_summary::print (diagnostic_context *dc, bool show_depths) const\n+print_path_summary_as_text (const path_summary *ps, diagnostic_context *dc,\n+\t\t\t    bool show_depths)\n {\n   pretty_printer *pp = dc->printer;\n \n@@ -322,13 +319,12 @@ path_summary::print (diagnostic_context *dc, bool show_depths) const\n   int cur_indent = base_indent;\n   unsigned i;\n   event_range *range;\n-  FOR_EACH_VEC_ELT (m_ranges, i, range)\n+  FOR_EACH_VEC_ELT (ps->m_ranges, i, range)\n     {\n       write_indent (pp, cur_indent);\n       if (i > 0)\n \t{\n-\t  const path_summary::event_range *prev_range\n-\t    = m_ranges[i - 1];\n+\t  const event_range *prev_range = ps->m_ranges[i - 1];\n \t  if (range->m_stack_depth > prev_range->m_stack_depth)\n \t    {\n \t      /* Show pushed stack frame(s).  */\n@@ -384,10 +380,9 @@ path_summary::print (diagnostic_context *dc, bool show_depths) const\n \tpp_newline (pp);\n       }\n \n-      if (i < m_ranges.length () - 1)\n+      if (i < ps->m_ranges.length () - 1)\n \t{\n-\t  const path_summary::event_range *next_range\n-\t    = m_ranges[i + 1];\n+\t  const event_range *next_range = ps->m_ranges[i + 1];\n \n \t  if (range->m_stack_depth > next_range->m_stack_depth)\n \t    {\n@@ -481,7 +476,8 @@ default_tree_diagnostic_path_printer (diagnostic_context *context,\n \tpath_summary summary (*path, true);\n \tchar *saved_prefix = pp_take_prefix (context->printer);\n \tpp_set_prefix (context->printer, NULL);\n-\tsummary.print (context, context->show_path_depths);\n+\tprint_path_summary_as_text (&summary, context,\n+\t\t\t\t    context->show_path_depths);\n \tpp_flush (context->printer);\n \tpp_set_prefix (context->printer, saved_prefix);\n       }\n@@ -569,7 +565,7 @@ test_empty_path (pretty_printer *event_pp)\n   ASSERT_EQ (summary.get_num_ranges (), 0);\n \n   test_diagnostic_context dc;\n-  summary.print (&dc, true);\n+  print_path_summary_as_text (&summary, &dc, true);\n   ASSERT_STREQ (\"\",\n \t\tpp_formatted_text (dc.printer));\n }\n@@ -593,7 +589,7 @@ test_intraprocedural_path (pretty_printer *event_pp)\n   ASSERT_EQ (summary.get_num_ranges (), 1);\n \n   test_diagnostic_context dc;\n-  summary.print (&dc, true);\n+  print_path_summary_as_text (&summary, &dc, true);\n   ASSERT_STREQ (\"  `foo': events 1-2 (depth 0)\\n\"\n \t\t\"    |\\n\"\n \t\t\"    | (1): first `free'\\n\"\n@@ -642,7 +638,7 @@ test_interprocedural_path_1 (pretty_printer *event_pp)\n   ASSERT_EQ (summary.get_num_ranges (), 9);\n \n   test_diagnostic_context dc;\n-  summary.print (&dc, true);\n+  print_path_summary_as_text (&summary, &dc, true);\n   ASSERT_STREQ\n     (\"  `test': events 1-2 (depth 0)\\n\"\n      \"    |\\n\"\n@@ -724,7 +720,7 @@ test_interprocedural_path_2 (pretty_printer *event_pp)\n   ASSERT_EQ (summary.get_num_ranges (), 5);\n \n   test_diagnostic_context dc;\n-  summary.print (&dc, true);\n+  print_path_summary_as_text (&summary, &dc, true);\n   ASSERT_STREQ\n     (\"  `foo': events 1-2 (depth 0)\\n\"\n      \"    |\\n\"\n@@ -776,7 +772,7 @@ test_recursion (pretty_printer *event_pp)\n   ASSERT_EQ (summary.get_num_ranges (), 4);\n \n   test_diagnostic_context dc;\n-  summary.print (&dc, true);\n+  print_path_summary_as_text (&summary, &dc, true);\n   ASSERT_STREQ\n     (\"  `factorial': events 1-2 (depth 0)\\n\"\n      \"    |\\n\""}]}