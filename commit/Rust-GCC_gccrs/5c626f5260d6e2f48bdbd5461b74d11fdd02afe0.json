{"sha": "5c626f5260d6e2f48bdbd5461b74d11fdd02afe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2MjZmNTI2MGQ2ZTJmNDhiZGJkNTQ2MWI3NGQxMWZkZDAyYWZlMA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-06-04T17:50:18Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-06-04T17:50:18Z"}, "message": "re PR libstdc++/3034 (DR 214)\n\n2001-06-04  Phil Edwards  <pme@sources.redhat.com>\n\n\tPR libstdc++/3034\n\t* include/bits/stl_multiset.h (find, lower_bound, upper_bound,\n\tequal_range):  Add const overloads as per LWG DR 214.\n\t* include/bits/stl_set.h:  Likewise.\n\nFrom-SVN: r42862", "tree": {"sha": "b3c5662662e3592113b56894d8eb0722dfc09dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3c5662662e3592113b56894d8eb0722dfc09dbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c626f5260d6e2f48bdbd5461b74d11fdd02afe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c626f5260d6e2f48bdbd5461b74d11fdd02afe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c626f5260d6e2f48bdbd5461b74d11fdd02afe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c626f5260d6e2f48bdbd5461b74d11fdd02afe0/comments", "author": null, "committer": null, "parents": [{"sha": "84b9f762bba065535f93a034820ab348e63eee49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b9f762bba065535f93a034820ab348e63eee49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84b9f762bba065535f93a034820ab348e63eee49"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "8203b2e08cd7f6428d51542a6a367af2123f712d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c626f5260d6e2f48bdbd5461b74d11fdd02afe0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c626f5260d6e2f48bdbd5461b74d11fdd02afe0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5c626f5260d6e2f48bdbd5461b74d11fdd02afe0", "patch": "@@ -1,6 +1,14 @@\n+2001-06-04  Phil Edwards  <pme@sources.redhat.com>\n+\n+\tPR libstdc++/3034\n+\t* include/bits/stl_multiset.h (find, lower_bound, upper_bound,\n+\tequal_range):  Add const overloads as per LWG DR 214.\n+\t* include/bits/stl_set.h:  Likewise.\n+\n 2001-06-04  Brendan Kehoe  <brendan@zen.org>\n             Phil Edwards  <pme@sources.redhat.com>\n \n+\tPR libstdc++/3018\n \t* include/bits/std_bitset.h (bitset::test):  Fix __pos >= _Nb\n \tcomparison; all positions must be < _Nb.\n \t* testsuite/23_containers/bitset_members.cc:  New file."}, {"sha": "2d16985f95636edffa29bde549fc7a888ef97dc4", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c626f5260d6e2f48bdbd5461b74d11fdd02afe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c626f5260d6e2f48bdbd5461b74d11fdd02afe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=5c626f5260d6e2f48bdbd5461b74d11fdd02afe0", "patch": "@@ -151,8 +151,32 @@ class multiset\n \n   // multiset operations:\n \n-  iterator find(const key_type& __x) const { return _M_t.find(__x); }\n   size_type count(const key_type& __x) const { return _M_t.count(__x); }\n+\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+//214.  set::find() missing const overload\n+  iterator find(const key_type& __x) { return _M_t.find(__x); }\n+  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }\n+  iterator lower_bound(const key_type& __x) {\n+    return _M_t.lower_bound(__x);\n+  }\n+  const_iterator lower_bound(const key_type& __x) const {\n+    return _M_t.lower_bound(__x);\n+  }\n+  iterator upper_bound(const key_type& __x) {\n+    return _M_t.upper_bound(__x);\n+  }\n+  const_iterator upper_bound(const key_type& __x) const {\n+    return _M_t.upper_bound(__x);\n+  }\n+  pair<iterator,iterator> equal_range(const key_type& __x) {\n+    return _M_t.equal_range(__x);\n+  }\n+  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {\n+    return _M_t.equal_range(__x);\n+  }\n+#else\n+  iterator find(const key_type& __x) const { return _M_t.find(__x); }\n   iterator lower_bound(const key_type& __x) const {\n     return _M_t.lower_bound(__x);\n   }\n@@ -162,6 +186,7 @@ class multiset\n   pair<iterator,iterator> equal_range(const key_type& __x) const {\n     return _M_t.equal_range(__x);\n   }\n+#endif\n \n   template <class _K1, class _C1, class _A1>\n   friend bool operator== (const multiset<_K1,_C1,_A1>&,"}, {"sha": "13dca9f324ba9a9730805748d0280c0bb12666ec", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c626f5260d6e2f48bdbd5461b74d11fdd02afe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c626f5260d6e2f48bdbd5461b74d11fdd02afe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=5c626f5260d6e2f48bdbd5461b74d11fdd02afe0", "patch": "@@ -148,10 +148,34 @@ class set\n \n   // set operations:\n \n-  iterator find(const key_type& __x) const { return _M_t.find(__x); }\n   size_type count(const key_type& __x) const {\n     return _M_t.find(__x) == _M_t.end() ? 0 : 1;\n   }\n+\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+//214.  set::find() missing const overload\n+  iterator find(const key_type& __x) { return _M_t.find(__x); }\n+  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }\n+  iterator lower_bound(const key_type& __x) {\n+    return _M_t.lower_bound(__x);\n+  }\n+  const_iterator lower_bound(const key_type& __x) const {\n+    return _M_t.lower_bound(__x);\n+  }\n+  iterator upper_bound(const key_type& __x) {\n+    return _M_t.upper_bound(__x); \n+  }\n+  const_iterator upper_bound(const key_type& __x) const {\n+    return _M_t.upper_bound(__x); \n+  }\n+  pair<iterator,iterator> equal_range(const key_type& __x) {\n+    return _M_t.equal_range(__x);\n+  }\n+  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {\n+    return _M_t.equal_range(__x);\n+  }\n+#else\n+  iterator find(const key_type& __x) const { return _M_t.find(__x); }\n   iterator lower_bound(const key_type& __x) const {\n     return _M_t.lower_bound(__x);\n   }\n@@ -161,6 +185,7 @@ class set\n   pair<iterator,iterator> equal_range(const key_type& __x) const {\n     return _M_t.equal_range(__x);\n   }\n+#endif\n \n   template <class _K1, class _C1, class _A1>\n   friend bool operator== (const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&);"}]}