{"sha": "15c671a79ca66df5b1de70dd1a0b78414fe003ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjNjcxYTc5Y2E2NmRmNWIxZGU3MGRkMWEwYjc4NDE0ZmUwMDNlZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-05-20T19:12:49Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-05-20T19:12:49Z"}, "message": "jit: implement gcc_jit_rvalue_set_bool_require_tail_call\n\nThis implements the libgccjit support for must-tail-call via\na new:\n  gcc_jit_rvalue_set_bool_require_tail_call\nAPI entrypoint.\n\n(I didn't implement a wrapper for this within the C++ bindings)\n\ngcc/jit/ChangeLog:\n\t* docs/topics/compatibility.rst: Add LIBGCCJIT_ABI_6.\n\t* docs/topics/expressions.rst (Function calls): Add documentation\n\tof gcc_jit_rvalue_set_bool_require_tail_call.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* jit-common.h (gcc::jit::recording::base_call): Add forward decl.\n\t* jit-playback.c: Within namespace gcc::jit::playback...\n\t(context::build_call) Add \"require_tail_call\" param and use it\n\tto set CALL_EXPR_MUST_TAIL_CALL.\n\t(context::new_call): Add \"require_tail_call\" param.\n\t(context::new_call_through_ptr): Likewise.\n\t* jit-playback.h: Within namespace gcc::jit::playback...\n\t(context::new_call: Add \"require_tail_call\" param.\n\t(context::new_call_through_ptr): Likewise.\n\t(context::build_call): Likewise.\n\t* jit-recording.c: Within namespace gcc::jit::recording...\n\t(base_call::base_call): New constructor.\n\t(base_call::write_reproducer_tail_call): New method.\n\t(call::call): Update for inheritance from base_call.\n\t(call::replay_into): Provide m_require_tail_call to call\n\tto new_call.\n\t(call::write_reproducer): Call write_reproducer_tail_call.\n\t(call_through_ptr::call_through_ptr): Update for inheritance from\n\tbase_call.\n\t(call_through_ptr::replay_into): Provide m_require_tail_call to call\n\tto new_call_through_ptr.\n\t(recording::call_through_ptr::write_reproducer): Call\n\twrite_reproducer_tail_call.\n\t* jit-recording.h: Within namespace gcc::jit::recording...\n\t(rvalue::dyn_cast_base_call): New virtual function.\n\t(class base_call): New subclass of class rvalue.\n\t(class call): Inherit from base_call rather than directly from\n\trvalue, moving get_precedence and m_args to base_call.\n\t(class call_through_ptr): Likewise.\n\t* libgccjit.c (gcc_jit_rvalue_set_bool_require_tail_call): New\n\tfunction.\n\t* libgccjit.h\n\t(LIBGCCJIT_HAVE_gcc_jit_rvalue_set_bool_require_tail_call): New\n\tmacro.\n\t(gcc_jit_rvalue_set_bool_require_tail_call): New function.\n\t* libgccjit.map (LIBGCCJIT_ABI_6): New.\n\t(gcc_jit_rvalue_set_bool_require_tail_call): Add.\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/all-non-failing-tests.h: Add\n\ttest-factorial-must-tail-call.c.\n\t* jit.dg/test-error-impossible-must-tail-call.c: New test case.\n\t* jit.dg/test-factorial-must-tail-call.c: New test case.\n\nFrom-SVN: r236531", "tree": {"sha": "f210624d9cf8816cc56a0800f0429cd6e558a371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f210624d9cf8816cc56a0800f0429cd6e558a371"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c671a79ca66df5b1de70dd1a0b78414fe003ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c671a79ca66df5b1de70dd1a0b78414fe003ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c671a79ca66df5b1de70dd1a0b78414fe003ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c671a79ca66df5b1de70dd1a0b78414fe003ef/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfbdde160f9970aea0bfc6c9d2005d911de6b593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbdde160f9970aea0bfc6c9d2005d911de6b593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbdde160f9970aea0bfc6c9d2005d911de6b593"}], "stats": {"total": 471, "additions": 433, "deletions": 38}, "files": [{"sha": "1c3e1fc8f213f12c40fab39bcdfb4293da0b8aa6", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -1,3 +1,47 @@\n+2016-05-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/topics/compatibility.rst: Add LIBGCCJIT_ABI_6.\n+\t* docs/topics/expressions.rst (Function calls): Add documentation\n+\tof gcc_jit_rvalue_set_bool_require_tail_call.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-common.h (gcc::jit::recording::base_call): Add forward decl.\n+\t* jit-playback.c: Within namespace gcc::jit::playback...\n+\t(context::build_call) Add \"require_tail_call\" param and use it\n+\tto set CALL_EXPR_MUST_TAIL_CALL.\n+\t(context::new_call): Add \"require_tail_call\" param.\n+\t(context::new_call_through_ptr): Likewise.\n+\t* jit-playback.h: Within namespace gcc::jit::playback...\n+\t(context::new_call: Add \"require_tail_call\" param.\n+\t(context::new_call_through_ptr): Likewise.\n+\t(context::build_call): Likewise.\n+\t* jit-recording.c: Within namespace gcc::jit::recording...\n+\t(base_call::base_call): New constructor.\n+\t(base_call::write_reproducer_tail_call): New method.\n+\t(call::call): Update for inheritance from base_call.\n+\t(call::replay_into): Provide m_require_tail_call to call\n+\tto new_call.\n+\t(call::write_reproducer): Call write_reproducer_tail_call.\n+\t(call_through_ptr::call_through_ptr): Update for inheritance from\n+\tbase_call.\n+\t(call_through_ptr::replay_into): Provide m_require_tail_call to call\n+\tto new_call_through_ptr.\n+\t(recording::call_through_ptr::write_reproducer): Call\n+\twrite_reproducer_tail_call.\n+\t* jit-recording.h: Within namespace gcc::jit::recording...\n+\t(rvalue::dyn_cast_base_call): New virtual function.\n+\t(class base_call): New subclass of class rvalue.\n+\t(class call): Inherit from base_call rather than directly from\n+\trvalue, moving get_precedence and m_args to base_call.\n+\t(class call_through_ptr): Likewise.\n+\t* libgccjit.c (gcc_jit_rvalue_set_bool_require_tail_call): New\n+\tfunction.\n+\t* libgccjit.h\n+\t(LIBGCCJIT_HAVE_gcc_jit_rvalue_set_bool_require_tail_call): New\n+\tmacro.\n+\t(gcc_jit_rvalue_set_bool_require_tail_call): New function.\n+\t* libgccjit.map (LIBGCCJIT_ABI_6): New.\n+\t(gcc_jit_rvalue_set_bool_require_tail_call): Add.\n+\n 2016-05-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* dummy-frontend.c: Include diagnostic.h."}, {"sha": "7abd0508e20c08451aba75cb5a124a9705d7d29d", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -135,3 +135,10 @@ entrypoints:\n -------------------\n ``LIBGCCJIT_ABI_5`` covers the addition of\n :func:`gcc_jit_context_set_bool_use_external_driver`\n+\n+.. _LIBGCCJIT_ABI_6:\n+\n+``LIBGCCJIT_ABI_6``\n+-------------------\n+``LIBGCCJIT_ABI_6`` covers the addition of\n+:func:`gcc_jit_rvalue_set_bool_require_tail_call`"}, {"sha": "261483c78b0e4eb1424f513607721854dd4836aa", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -424,6 +424,30 @@ Function calls\n \n       The same caveat as for :c:func:`gcc_jit_context_new_call` applies.\n \n+.. function:: void\\\n+              gcc_jit_rvalue_set_bool_require_tail_call (gcc_jit_rvalue *call,\\\n+                                                         int require_tail_call)\n+\n+   Given an :c:type:`gcc_jit_rvalue *` for a call created through\n+   :c:func:`gcc_jit_context_new_call` or\n+   :c:func:`gcc_jit_context_new_call_through_ptr`, mark/clear the\n+   call as needing tail-call optimization.  The optimizer will\n+   attempt to optimize the call into a jump instruction; if it is\n+   unable to do do, an error will be emitted.\n+\n+   This may be useful when implementing functions that use the\n+   continuation-passing style (e.g. for functional programming\n+   languages), in which every function \"returns\" by calling a\n+   \"continuation\" function pointer.  This call must be\n+   guaranteed to be implemented as a jump, otherwise the program\n+   could consume an arbitrary amount of stack space as it executed.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_6`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_rvalue_set_bool_require_tail_call\n \n Type-coercion\n *************"}, {"sha": "b48ea0db69d1fff37631bdba115d8a983bafee96", "filename": "gcc/jit/jit-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fjit-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fjit-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-common.h?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -126,6 +126,7 @@ namespace recording {\n         class local;\n \tclass global;\n         class param;\n+      class base_call;\n     class statement;\n     class case_;\n "}, {"sha": "c9f40848be073cb128b1c23b7699614bc7b01a05", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -854,7 +854,8 @@ playback::rvalue *\n playback::context::\n build_call (location *loc,\n \t    tree fn_ptr,\n-\t    const auto_vec<rvalue *> *args)\n+\t    const auto_vec<rvalue *> *args,\n+\t    bool require_tail_call)\n {\n   vec<tree, va_gc> *tree_args;\n   vec_alloc (tree_args, args->length ());\n@@ -868,9 +869,13 @@ build_call (location *loc,\n   tree fn_type = TREE_TYPE (fn);\n   tree return_type = TREE_TYPE (fn_type);\n \n-  return new rvalue (this,\n-\t\t     build_call_vec (return_type,\n-\t\t\t\t     fn_ptr, tree_args));\n+  tree call = build_call_vec (return_type,\n+\t\t\t      fn_ptr, tree_args);\n+\n+  if (require_tail_call)\n+    CALL_EXPR_MUST_TAIL_CALL (call) = 1;\n+\n+  return new rvalue (this, call);\n \n   /* see c-typeck.c: build_function_call\n      which calls build_function_call_vec\n@@ -890,7 +895,8 @@ playback::rvalue *\n playback::context::\n new_call (location *loc,\n \t  function *func,\n-\t  const auto_vec<rvalue *> *args)\n+\t  const auto_vec<rvalue *> *args,\n+\t  bool require_tail_call)\n {\n   tree fndecl;\n \n@@ -902,7 +908,7 @@ new_call (location *loc,\n \n   tree fn = build1 (ADDR_EXPR, build_pointer_type (fntype), fndecl);\n \n-  return build_call (loc, fn, args);\n+  return build_call (loc, fn, args, require_tail_call);\n }\n \n /* Construct a playback::rvalue instance (wrapping a tree) for a\n@@ -912,12 +918,13 @@ playback::rvalue *\n playback::context::\n new_call_through_ptr (location *loc,\n \t\t      rvalue *fn_ptr,\n-\t\t      const auto_vec<rvalue *> *args)\n+\t\t      const auto_vec<rvalue *> *args,\n+\t\t      bool require_tail_call)\n {\n   gcc_assert (fn_ptr);\n   tree t_fn_ptr = fn_ptr->as_tree ();\n \n-  return build_call (loc, t_fn_ptr, args);\n+  return build_call (loc, t_fn_ptr, args, require_tail_call);\n }\n \n /* Construct a tree for a cast.  */"}, {"sha": "c00c25820af42be01a54b83c5c590179963be944", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -133,12 +133,14 @@ class context : public log_user\n   rvalue *\n   new_call (location *loc,\n \t    function *func,\n-\t    const auto_vec<rvalue *> *args);\n+\t    const auto_vec<rvalue *> *args,\n+\t    bool require_tail_call);\n \n   rvalue *\n   new_call_through_ptr (location *loc,\n \t\t\trvalue *fn_ptr,\n-\t\t\tconst auto_vec<rvalue *> *args);\n+\t\t\tconst auto_vec<rvalue *> *args,\n+\t\t\tbool require_tail_call);\n \n   rvalue *\n   new_cast (location *loc,\n@@ -236,7 +238,8 @@ class context : public log_user\n   rvalue *\n   build_call (location *loc,\n \t      tree fn_ptr,\n-\t      const auto_vec<rvalue *> *args);\n+\t      const auto_vec<rvalue *> *args,\n+\t      bool require_tail_call);\n \n   tree\n   build_cast (location *loc,"}, {"sha": "937634207d652e187f0ff9fc0555d23ddec01174", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -4681,6 +4681,39 @@ recording::cast::write_reproducer (reproducer &r)\n \t   r.get_identifier_as_type (get_type ()));\n }\n \n+/* The implementation of class gcc::jit::recording::base_call.  */\n+\n+/* The constructor for gcc::jit::recording::base_call.  */\n+\n+recording::base_call::base_call (context *ctxt,\n+\t\t\t\t location *loc,\n+\t\t\t\t type *type_,\n+\t\t\t\t int numargs,\n+\t\t\t\t rvalue **args)\n+: rvalue (ctxt, loc, type_),\n+  m_args (),\n+  m_require_tail_call (0)\n+{\n+  for (int i = 0; i< numargs; i++)\n+    m_args.safe_push (args[i]);\n+}\n+\n+/* Subroutine for use by call and call_though_ptr's write_reproducer\n+   methods.  */\n+\n+void\n+recording::base_call::write_reproducer_tail_call (reproducer &r,\n+\t\t\t\t\t\t  const char *id)\n+{\n+  if (m_require_tail_call)\n+    {\n+      r.write (\"  gcc_jit_rvalue_set_bool_require_tail_call (%s,  /* gcc_jit_rvalue *call*/\\n\"\n+\t       \"                                             %i); /* int require_tail_call*/\\n\",\n+\t       id,\n+\t       1);\n+    }\n+}\n+\n /* The implementation of class gcc::jit::recording::call.  */\n \n /* The constructor for gcc::jit::recording::call.  */\n@@ -4690,12 +4723,9 @@ recording::call::call (recording::context *ctxt,\n \t\t       recording::function *func,\n \t\t       int numargs,\n \t\t       rvalue **args)\n-: rvalue (ctxt, loc, func->get_return_type ()),\n-  m_func (func),\n-  m_args ()\n+: base_call (ctxt, loc, func->get_return_type (), numargs, args),\n+  m_func (func)\n {\n-  for (int i = 0; i< numargs; i++)\n-    m_args.safe_push (args[i]);\n }\n \n /* Implementation of pure virtual hook recording::memento::replay_into\n@@ -4711,7 +4741,8 @@ recording::call::replay_into (replayer *r)\n \n   set_playback_obj (r->new_call (playback_location (r, m_loc),\n \t\t\t\t m_func->playback_function (),\n-\t\t\t\t &playback_args));\n+\t\t\t\t &playback_args,\n+\t\t\t\t m_require_tail_call));\n }\n \n /* Implementation of pure virtual hook recording::rvalue::visit_children\n@@ -4790,6 +4821,7 @@ recording::call::write_reproducer (reproducer &r)\n \t   r.get_identifier (m_func),\n \t   m_args.length (),\n \t   args_id);\n+  write_reproducer_tail_call (r, id);\n }\n \n /* The implementation of class gcc::jit::recording::call_through_ptr.  */\n@@ -4801,14 +4833,12 @@ recording::call_through_ptr::call_through_ptr (recording::context *ctxt,\n \t\t\t\t\t       recording::rvalue *fn_ptr,\n \t\t\t\t\t       int numargs,\n \t\t\t\t\t       rvalue **args)\n-: rvalue (ctxt, loc,\n-\t  fn_ptr->get_type ()->dereference ()\n-\t    ->as_a_function_type ()->get_return_type ()),\n-  m_fn_ptr (fn_ptr),\n-  m_args ()\n+: base_call (ctxt, loc,\n+\t     fn_ptr->get_type ()->dereference ()\n+\t       ->as_a_function_type ()->get_return_type (),\n+\t     numargs, args),\n+  m_fn_ptr (fn_ptr)\n {\n-  for (int i = 0; i< numargs; i++)\n-    m_args.safe_push (args[i]);\n }\n \n /* Implementation of pure virtual hook recording::memento::replay_into\n@@ -4824,7 +4854,8 @@ recording::call_through_ptr::replay_into (replayer *r)\n \n   set_playback_obj (r->new_call_through_ptr (playback_location (r, m_loc),\n \t\t\t\t\t     m_fn_ptr->playback_rvalue (),\n-\t\t\t\t\t     &playback_args));\n+\t\t\t\t\t     &playback_args,\n+\t\t\t\t\t     m_require_tail_call));\n }\n \n /* Implementation of pure virtual hook recording::rvalue::visit_children\n@@ -4907,6 +4938,7 @@ recording::call_through_ptr::write_reproducer (reproducer &r)\n \t   r.get_identifier_as_rvalue (m_fn_ptr),\n \t   m_args.length (),\n \t   args_id);\n+  write_reproducer_tail_call (r, id);\n }\n \n /* The implementation of class gcc::jit::recording::array_access.  */"}, {"sha": "0e3511c6a1cf2ae65181019ab0977ca31ce969b1", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -960,8 +960,9 @@ class rvalue : public memento\n   void set_scope (function *scope);\n   function *get_scope () const { return m_scope; }\n \n-  /* Dynamic cast.  */\n+  /* Dynamic casts.  */\n   virtual param *dyn_cast_param () { return NULL; }\n+  virtual base_call *dyn_cast_base_call () { return NULL; }\n \n   virtual const char *access_as_rvalue (reproducer &r);\n \n@@ -1418,7 +1419,36 @@ class cast : public rvalue\n   rvalue *m_rvalue;\n };\n \n-class call : public rvalue\n+class base_call : public rvalue\n+{\n+ public:\n+  base_call (context *ctxt,\n+\t     location *loc,\n+\t     type *type_,\n+\t     int numargs,\n+\t     rvalue **args);\n+\n+  enum precedence get_precedence () const FINAL OVERRIDE\n+  {\n+    return PRECEDENCE_POSTFIX;\n+  }\n+\n+  base_call *dyn_cast_base_call () FINAL OVERRIDE { return this; }\n+\n+  void set_require_tail_call (bool require_tail_call)\n+  {\n+    m_require_tail_call = require_tail_call;\n+  }\n+\n+ protected:\n+  void write_reproducer_tail_call (reproducer &r, const char *id);\n+\n+ protected:\n+  auto_vec<rvalue *> m_args;\n+  bool m_require_tail_call;\n+};\n+\n+class call : public base_call\n {\n public:\n   call (context *ctxt,\n@@ -1434,17 +1464,12 @@ class call : public rvalue\n private:\n   string * make_debug_string () FINAL OVERRIDE;\n   void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n-  {\n-    return PRECEDENCE_POSTFIX;\n-  }\n \n private:\n   function *m_func;\n-  auto_vec<rvalue *> m_args;\n };\n \n-class call_through_ptr : public rvalue\n+class call_through_ptr : public base_call\n {\n public:\n   call_through_ptr (context *ctxt,\n@@ -1460,14 +1485,9 @@ class call_through_ptr : public rvalue\n private:\n   string * make_debug_string () FINAL OVERRIDE;\n   void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n-  {\n-    return PRECEDENCE_POSTFIX;\n-  }\n \n private:\n   rvalue *m_fn_ptr;\n-  auto_vec<rvalue *> m_args;\n };\n \n class array_access : public lvalue"}, {"sha": "c2c6aeb5bfb68c21bb372e20cd8a6ca9b8d24b5a", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -2950,3 +2950,23 @@ gcc_jit_timer_print (gcc_jit_timer *timer,\n   timer->start (TV_TOTAL);\n   timer->push (TV_JIT_CLIENT_CODE);\n }\n+\n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is effectively done by the\n+   gcc::jit::base_call::set_require_tail_call setter in jit-recording.h.  */\n+\n+void\n+gcc_jit_rvalue_set_bool_require_tail_call (gcc_jit_rvalue *rvalue,\n+\t\t\t\t\t   int require_tail_call)\n+{\n+  RETURN_IF_FAIL (rvalue, NULL, NULL, \"NULL call\");\n+  JIT_LOG_FUNC (rvalue->get_context ()->get_logger ());\n+\n+  /* Verify that it's a call.  */\n+  gcc::jit::recording::base_call *call = rvalue->dyn_cast_base_call ();\n+  RETURN_IF_FAIL_PRINTF1 (call, NULL, NULL, \"not a call: %s\",\n+\t\t\t  rvalue->get_debug_string ());\n+\n+  call->set_require_tail_call (require_tail_call);\n+}"}, {"sha": "175cc16c01d4d5377d987de5448ee8ce1a4425cf", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -1374,6 +1374,19 @@ extern void\n gcc_jit_timer_print (gcc_jit_timer *timer,\n \t\t     FILE *f_out);\n \n+\n+#define LIBGCCJIT_HAVE_gcc_jit_rvalue_set_bool_require_tail_call\n+\n+/* Mark/clear a call as needing tail-call optimization.\n+\n+   This API entrypoint was added in LIBGCCJIT_ABI_6; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_gcc_jit_rvalue_set_bool_require_tail_call\n+*/\n+extern void\n+gcc_jit_rvalue_set_bool_require_tail_call (gcc_jit_rvalue *call,\n+\t\t\t\t\t   int require_tail_call);\n+\n #ifdef __cplusplus\n }\n #endif /* __cplusplus */"}, {"sha": "545b192b64ca237e8bb5cfa7f843d1ff21798a4d", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -145,3 +145,8 @@ LIBGCCJIT_ABI_5 {\n   global:\n     gcc_jit_context_set_bool_use_external_driver;\n } LIBGCCJIT_ABI_4;\n+\n+LIBGCCJIT_ABI_6 {\n+  global:\n+    gcc_jit_rvalue_set_bool_require_tail_call;\n+} LIBGCCJIT_ABI_5;"}, {"sha": "0391ce5e1815c649a2dbd3220e4a4561e9b70bbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -1,3 +1,10 @@\n+2016-05-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/all-non-failing-tests.h: Add\n+\ttest-factorial-must-tail-call.c.\n+\t* jit.dg/test-error-impossible-must-tail-call.c: New test case.\n+\t* jit.dg/test-factorial-must-tail-call.c: New test case.\n+\n 2016-05-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/71204"}, {"sha": "3e2b3b910fc468f76339b157e469ab59241af7ec", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -105,6 +105,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-factorial-must-tail-call.c */\n+#define create_code create_code_factorial_must_tail_call\n+#define verify_code verify_code_factorial_must_tail_call\n+#include \"test-factorial-must-tail-call.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-fibonacci.c */\n #define create_code create_code_fibonacci\n #define verify_code verify_code_fibonacci\n@@ -272,6 +279,9 @@ const struct testcase testcases[] = {\n   {\"factorial\",\n    create_code_factorial,\n    verify_code_factorial},\n+  {\"factorial_must_tail_call\",\n+   create_code_factorial_must_tail_call,\n+   verify_code_factorial_must_tail_call},\n   {\"fibonacci\",\n    create_code_fibonacci,\n    verify_code_fibonacci},"}, {"sha": "8848d3015a9a4b8a8ce45e7f4c74f7943f29946f", "filename": "gcc/testsuite/jit.dg/test-error-impossible-must-tail-call.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-impossible-must-tail-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-impossible-must-tail-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-impossible-must-tail-call.c?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -0,0 +1,93 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+  struct box { char dummy[64]; int i; };\n+\n+  extern struct box\n+  returns_struct (int i);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+\n+       int test (int i)\n+       {\n+         return [MUST TAIL CALL] returns_struct (i).i;\n+       }\n+\n+     and verify that we get a sane error when the tail call\n+     optimization can't be done.  */\n+\n+  gcc_jit_type *char_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_CHAR);\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+\n+  /* Declare \"struct box.  */\n+  gcc_jit_type *array_type =\n+    gcc_jit_context_new_array_type (ctxt, NULL, char_type, 64);\n+  gcc_jit_field *field_dummy =\n+    gcc_jit_context_new_field (ctxt, NULL, array_type, \"dummy\");\n+  gcc_jit_field *field_i =\n+    gcc_jit_context_new_field (ctxt, NULL, int_type, \"i\");\n+  gcc_jit_field *fields[2] = {field_dummy, field_i};\n+  gcc_jit_struct *struct_box =\n+    gcc_jit_context_new_struct_type (ctxt, NULL, \"box\", 2, fields);\n+\n+  /* Declare the imported function.  */\n+  gcc_jit_param *called_fn_param_i =\n+    gcc_jit_context_new_param (ctxt, NULL, int_type, \"i\");\n+  gcc_jit_function *called_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+                                  GCC_JIT_FUNCTION_IMPORTED,\n+                                  gcc_jit_struct_as_type (struct_box),\n+                                  \"called_function\",\n+                                  1, &called_fn_param_i,\n+                                  0);\n+\n+  /* Build the test_fn.  */\n+  gcc_jit_param *caller_param_i =\n+    gcc_jit_context_new_param (ctxt, NULL, int_type, \"i\");\n+  gcc_jit_function *test_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+                                  GCC_JIT_FUNCTION_EXPORTED,\n+                                  int_type,\n+                                  \"test_caller\",\n+                                  1, &caller_param_i,\n+                                  0);\n+  gcc_jit_rvalue *arg = gcc_jit_param_as_rvalue (caller_param_i);\n+\n+  gcc_jit_rvalue *call =\n+    gcc_jit_context_new_call (ctxt, NULL,\n+                              called_fn,\n+                              1, &arg);\n+\n+  /* Mark the call as requiring tail-call optimization.  */\n+  gcc_jit_rvalue_set_bool_require_tail_call (call, 1);\n+\n+  gcc_jit_block *block = gcc_jit_function_new_block (test_fn, NULL);\n+  gcc_jit_block_end_with_return (block, NULL,\n+    gcc_jit_rvalue_access_field (call, NULL, field_i));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"cannot tail-call: callee returns a structure\");\n+}"}, {"sha": "c8626115708edad5b68faa3ea0ea546de126bb59", "filename": "gcc/testsuite/jit.dg/test-factorial-must-tail-call.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Ftestsuite%2Fjit.dg%2Ftest-factorial-must-tail-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c671a79ca66df5b1de70dd1a0b78414fe003ef/gcc%2Ftestsuite%2Fjit.dg%2Ftest-factorial-must-tail-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-factorial-must-tail-call.c?ref=15c671a79ca66df5b1de70dd1a0b78414fe003ef", "patch": "@@ -0,0 +1,109 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+\n+      int\n+      my_factorial_must_tail_call (int x)\n+      {\n+        if (x < 2)\n+          return x;\n+        else\n+          return x * my_factorial_must_tail_call (x - 1);\n+      }\n+\n+     and mark the call as requiring tail-call-optimization.\n+   */\n+  gcc_jit_type *the_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *return_type = the_type;\n+\n+  gcc_jit_param *x =\n+    gcc_jit_context_new_param (ctxt, NULL, the_type, \"x\");\n+  gcc_jit_param *params[1] = {x};\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  return_type,\n+\t\t\t\t  \"my_factorial_must_tail_call\",\n+\t\t\t\t  1, params, 0);\n+\n+  gcc_jit_block *initial =\n+    gcc_jit_function_new_block (func, \"initial\");\n+  gcc_jit_block *on_true =\n+    gcc_jit_function_new_block (func, \"on_true\");\n+  gcc_jit_block *on_false =\n+    gcc_jit_function_new_block (func, \"on_false\");\n+\n+ /* if (x < 2) */\n+  gcc_jit_block_end_with_conditional (\n+    initial, NULL,\n+    gcc_jit_context_new_comparison (\n+      ctxt, NULL,\n+      GCC_JIT_COMPARISON_LT,\n+      gcc_jit_param_as_rvalue (x),\n+      gcc_jit_context_new_rvalue_from_int (\n+\tctxt,\n+\tthe_type,\n+\t2)),\n+    on_true,\n+    on_false);\n+\n+  /* true branch: */\n+  /* return x */\n+  gcc_jit_block_end_with_return (\n+    on_true,\n+    NULL,\n+    gcc_jit_param_as_rvalue (x));\n+\n+  /* false branch: */\n+  gcc_jit_rvalue *x_minus_1 =\n+    gcc_jit_context_new_binary_op (\n+      ctxt, NULL,\n+      GCC_JIT_BINARY_OP_MINUS, the_type,\n+      gcc_jit_param_as_rvalue (x),\n+      gcc_jit_context_new_rvalue_from_int (\n+\tctxt,\n+\tthe_type,\n+\t1));\n+  /* my_factorial_must_tail_call (x - 1) */\n+  gcc_jit_rvalue *call =\n+      gcc_jit_context_new_call (\n+        ctxt, NULL,\n+        func,\n+        1, &x_minus_1);\n+\n+  /* Mark the call as requiring tail-call optimization.  */\n+  gcc_jit_rvalue_set_bool_require_tail_call (call, 1);\n+\n+  gcc_jit_block_end_with_return (\n+    on_false,\n+    NULL,\n+    gcc_jit_context_new_binary_op (\n+      ctxt, NULL,\n+      GCC_JIT_BINARY_OP_MULT, the_type,\n+      gcc_jit_param_as_rvalue (x),\n+      call));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef int (*my_factorial_fn_type) (int);\n+  CHECK_NON_NULL (result);\n+  my_factorial_fn_type my_factorial_must_tail_call =\n+    (my_factorial_fn_type)gcc_jit_result_get_code (result, \"my_factorial_must_tail_call\");\n+  CHECK_NON_NULL (my_factorial_must_tail_call);\n+  int val = my_factorial_must_tail_call (10);\n+  note (\"my_factorial_must_tail_call returned: %d\", val);\n+  CHECK_VALUE (val, 3628800);\n+}\n+"}]}