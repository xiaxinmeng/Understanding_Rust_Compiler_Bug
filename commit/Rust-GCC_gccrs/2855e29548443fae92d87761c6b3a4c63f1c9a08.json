{"sha": "2855e29548443fae92d87761c6b3a4c63f1c9a08", "node_id": "C_kwDOANBUbNoAKDI4NTVlMjk1NDg0NDNmYWU5MmQ4Nzc2MWM2YjNhNGM2M2YxYzlhMDg", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-03T23:22:40Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T02:59:12Z"}, "message": "RISC-V: Add vnot.v C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vnot_v-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vnot_v_tumu-3.c: New test.", "tree": {"sha": "d991f7ffa85d63285761b54c9ce1a53b533b16ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d991f7ffa85d63285761b54c9ce1a53b533b16ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2855e29548443fae92d87761c6b3a4c63f1c9a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2855e29548443fae92d87761c6b3a4c63f1c9a08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2855e29548443fae92d87761c6b3a4c63f1c9a08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2855e29548443fae92d87761c6b3a4c63f1c9a08/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f8c79a57e667cfc7888784457c4a0e6f2bdcda"}], "stats": {"total": 2880, "additions": 2880, "deletions": 0}, "files": [{"sha": "82bd70e5fda08fccb175866525d71930916154bf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-1.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8(vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8(op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4(vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4(op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2(vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2(op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1(vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1(op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2(vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2(op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4(vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4(op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8(vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8(op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4(vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4(op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2(vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2(op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1(vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1(op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2(vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2(op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4(vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4(op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8(vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8(op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2(vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2(op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1(vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1(op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2(vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2(op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4(vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4(op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8(vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8(op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1(vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1(op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2(vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2(op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4(vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4(op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8(vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8(op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "cc6aea7dcfc1e6922e31c2379a3737136b41b5c6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-2.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8(vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8(op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4(vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4(op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2(vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2(op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1(vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1(op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2(vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2(op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4(vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4(op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8(vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8(op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4(vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4(op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2(vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2(op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1(vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1(op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2(vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2(op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4(vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4(op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8(vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8(op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2(vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2(op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1(vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1(op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2(vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2(op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4(vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4(op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8(vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8(op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1(vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1(op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2(vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2(op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4(vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4(op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8(vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8(op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "e18ff42a03af057729a64a890dbba381ce7c47b3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-3.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8(vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8(op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4(vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4(op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2(vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2(op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1(vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1(op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2(vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2(op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4(vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4(op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8(vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8(op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4(vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4(op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2(vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2(op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1(vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1(op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2(vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2(op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4(vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4(op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8(vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8(op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2(vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2(op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1(vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1(op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2(vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2(op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4(vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4(op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8(vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8(op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1(vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1(op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2(vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2(op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4(vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4(op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8(vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8(op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "87e187aaaf39c906dac29f1c634c5267d82cae82", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_m-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_m-1.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_m(vbool64_t mask,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_m(mask,op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_m(vbool32_t mask,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_m(mask,op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_m(vbool16_t mask,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_m(mask,op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_m(vbool8_t mask,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_m(mask,op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_m(vbool4_t mask,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_m(mask,op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_m(vbool2_t mask,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_m(mask,op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_m(vbool1_t mask,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_m(mask,op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_m(vbool64_t mask,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_m(mask,op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_m(vbool32_t mask,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_m(mask,op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_m(vbool16_t mask,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_m(mask,op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_m(vbool8_t mask,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_m(mask,op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_m(vbool4_t mask,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_m(mask,op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_m(vbool2_t mask,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_m(mask,op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_m(vbool64_t mask,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_m(mask,op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_m(vbool32_t mask,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_m(mask,op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_m(vbool16_t mask,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_m(mask,op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_m(vbool8_t mask,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_m(mask,op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_m(vbool4_t mask,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_m(mask,op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_m(vbool64_t mask,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_m(mask,op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_m(vbool32_t mask,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_m(mask,op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_m(vbool16_t mask,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_m(mask,op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_m(vbool8_t mask,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_m(mask,op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "52d1a886a470fc3fe75dd9ba43dd1a355956ddce", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_m-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_m-2.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_m(vbool64_t mask,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_m(mask,op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_m(vbool32_t mask,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_m(mask,op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_m(vbool16_t mask,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_m(mask,op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_m(vbool8_t mask,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_m(mask,op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_m(vbool4_t mask,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_m(mask,op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_m(vbool2_t mask,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_m(mask,op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_m(vbool1_t mask,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_m(mask,op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_m(vbool64_t mask,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_m(mask,op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_m(vbool32_t mask,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_m(mask,op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_m(vbool16_t mask,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_m(mask,op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_m(vbool8_t mask,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_m(mask,op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_m(vbool4_t mask,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_m(mask,op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_m(vbool2_t mask,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_m(mask,op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_m(vbool64_t mask,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_m(mask,op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_m(vbool32_t mask,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_m(mask,op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_m(vbool16_t mask,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_m(mask,op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_m(vbool8_t mask,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_m(mask,op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_m(vbool4_t mask,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_m(mask,op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_m(vbool64_t mask,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_m(mask,op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_m(vbool32_t mask,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_m(mask,op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_m(vbool16_t mask,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_m(mask,op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_m(vbool8_t mask,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_m(mask,op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "53098d58014f435f39c5c7ba111f8b94a80186b7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_m-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_m-3.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_m(vbool64_t mask,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_m(mask,op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_m(vbool32_t mask,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_m(mask,op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_m(vbool16_t mask,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_m(mask,op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_m(vbool8_t mask,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_m(mask,op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_m(vbool4_t mask,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_m(mask,op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_m(vbool2_t mask,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_m(mask,op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_m(vbool1_t mask,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_m(mask,op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_m(vbool64_t mask,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_m(mask,op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_m(vbool32_t mask,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_m(mask,op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_m(vbool16_t mask,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_m(mask,op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_m(vbool8_t mask,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_m(mask,op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_m(vbool4_t mask,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_m(mask,op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_m(vbool2_t mask,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_m(mask,op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_m(vbool64_t mask,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_m(mask,op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_m(vbool32_t mask,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_m(mask,op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_m(vbool16_t mask,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_m(mask,op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_m(vbool8_t mask,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_m(mask,op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_m(vbool4_t mask,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_m(mask,op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_m(vbool64_t mask,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_m(mask,op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_m(vbool32_t mask,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_m(mask,op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_m(vbool16_t mask,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_m(mask,op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_m(vbool8_t mask,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_m(mask,op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "6ca088f7e7a187667c645694f4897ebec33c2a38", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_mu-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-1.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_mu(mask,merge,op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "bbd9e2f11f281b333f88292b985edac41f1ef8f7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_mu-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-2.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_mu(mask,merge,op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "7325d5299cdd354ade90ca4cf327a8cb21eefdd1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_mu-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-3.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_mu(mask,merge,op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "35e8981c3b251e1a51217b1bef069485f8550cc1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_tu-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-1.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_tu(merge,op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_tu(merge,op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_tu(merge,op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_tu(vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_tu(merge,op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_tu(vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_tu(merge,op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_tu(vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_tu(merge,op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_tu(vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_tu(merge,op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_tu(merge,op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_tu(merge,op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_tu(vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_tu(merge,op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_tu(vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_tu(merge,op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_tu(vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_tu(merge,op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_tu(vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_tu(merge,op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_tu(merge,op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_tu(vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_tu(merge,op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_tu(vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_tu(merge,op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_tu(vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_tu(merge,op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_tu(vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_tu(merge,op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_tu(vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_tu(merge,op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_tu(vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_tu(merge,op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_tu(vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_tu(merge,op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_tu(vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_tu(merge,op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "7a28ef0829e7e6f8bd6778c91bef3266a6a08a38", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_tu-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-2.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_tu(merge,op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_tu(merge,op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_tu(merge,op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_tu(vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_tu(merge,op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_tu(vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_tu(merge,op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_tu(vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_tu(merge,op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_tu(vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_tu(merge,op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_tu(merge,op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_tu(merge,op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_tu(vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_tu(merge,op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_tu(vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_tu(merge,op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_tu(vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_tu(merge,op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_tu(vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_tu(merge,op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_tu(merge,op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_tu(vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_tu(merge,op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_tu(vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_tu(merge,op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_tu(vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_tu(merge,op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_tu(vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_tu(merge,op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_tu(vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_tu(merge,op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_tu(vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_tu(merge,op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_tu(vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_tu(merge,op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_tu(vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_tu(merge,op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "204b0884ab5f586afc7dcd2c7fabaabbf6829c55", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_tu-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-3.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_tu(merge,op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_tu(merge,op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_tu(merge,op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_tu(vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_tu(merge,op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_tu(vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_tu(merge,op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_tu(vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_tu(merge,op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_tu(vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_tu(merge,op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_tu(merge,op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_tu(merge,op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_tu(vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_tu(merge,op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_tu(vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_tu(merge,op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_tu(vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_tu(merge,op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_tu(vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_tu(merge,op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_tu(merge,op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_tu(vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_tu(merge,op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_tu(vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_tu(merge,op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_tu(vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_tu(merge,op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_tu(vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_tu(merge,op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_tu(vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_tu(merge,op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_tu(vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_tu(merge,op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_tu(vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_tu(merge,op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_tu(vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_tu(merge,op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "8cd42b2c118113d893916b3a9a890718ff913007", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_tum-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-1.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_tum(mask,merge,op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "2cfd9b0f0755f775d099974f3c0c98425f5cbd7f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_tum-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-2.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_tum(mask,merge,op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "a374c3932ff0ee6b6a3af01da7419e5ff0fb1ffc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_tum-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-3.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_tum(mask,merge,op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "bd118dd974447907e50240b2f9245e7a4cbdf509", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_tumu-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-1.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "a18406a9c880ce3a75b439b0cab1c6c926101da6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_tumu-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-2.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_tumu(mask,merge,op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "7418913af0a28924c7ed91ae4437f2d037f560a3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vnot_v_tumu-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855e29548443fae92d87761c6b3a4c63f1c9a08/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-3.c?ref=2855e29548443fae92d87761c6b3a4c63f1c9a08", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf8_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf4_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8mf2_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m1_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_v_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m2_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_v_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m4_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_v_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i8m8_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf4_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16mf2_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m1_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m2_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_v_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m4_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_v_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i16m8_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32mf2_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m1_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m2_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m4_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_v_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i32m8_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m1_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m2_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m4_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_v_i64m8_tumu(mask,merge,op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}]}