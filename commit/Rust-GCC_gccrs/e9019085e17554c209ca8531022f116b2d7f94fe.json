{"sha": "e9019085e17554c209ca8531022f116b2d7f94fe", "node_id": "C_kwDOANBUbNoAKGU5MDE5MDg1ZTE3NTU0YzIwOWNhODUzMTAyMmYxMTZiMmQ3Zjk0ZmU", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-06-11T17:37:10Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-09-26T14:06:01Z"}, "message": "nvptx: Allow '--with-arch' to override the default '-misa'\n\n\tgcc/\n\t* config.gcc (with_arch) [nvptx]: Allow '--with-arch' to override\n\tthe default.\n\t* config/nvptx/gen-multilib-matches.sh: New.\n\t* config/nvptx/t-nvptx (MULTILIB_OPTIONS, MULTILIB_MATCHES)\n\t(MULTILIB_EXCEPTIONS): Handle this.\n\t* doc/install.texi (Specific) <nvptx-*-none>: Document this.\n\t* doc/invoke.texi (Nvidia PTX Options): Likewise.", "tree": {"sha": "68c359083dc7834f58ec7a049af5224c1da039d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c359083dc7834f58ec7a049af5224c1da039d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9019085e17554c209ca8531022f116b2d7f94fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9019085e17554c209ca8531022f116b2d7f94fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9019085e17554c209ca8531022f116b2d7f94fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9019085e17554c209ca8531022f116b2d7f94fe/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d94582e0dcbf5fed9d61213715bfff877bf5ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d94582e0dcbf5fed9d61213715bfff877bf5ecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d94582e0dcbf5fed9d61213715bfff877bf5ecf"}], "stats": {"total": 99, "additions": 93, "deletions": 6}, "files": [{"sha": "c1b1215e98b474bfee97559b813efcfe800c796c", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9019085e17554c209ca8531022f116b2d7f94fe/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9019085e17554c209ca8531022f116b2d7f94fe/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e9019085e17554c209ca8531022f116b2d7f94fe", "patch": "@@ -5299,10 +5299,15 @@ case \"${target}\" in\n \tnvptx-*)\n \t\tsupported_defaults=arch\n \t\tTM_MULTILIB_CONFIG=$with_arch\n+\t\t#TODO 'sm_[...]' list per 'nvptx-sm.def'.\n \t\tcase $with_arch in\n \t\t\tsm_30 )\n \t\t\t\t# OK; default.\n \t\t\t\t;;\n+\t\t\tsm_35 | sm_53 | sm_70 | sm_75 | sm_80 )\n+\t\t\t\t# OK, but we'd like 'sm_30', too.\n+\t\t\t\tTM_MULTILIB_CONFIG=\"$TM_MULTILIB_CONFIG sm_30\"\n+\t\t\t\t;;\n \t\t\t* )\n \t\t\t\techo \"Unknown arch used in --with-arch=$with_arch\" 1>&2\n \t\t\t\texit 1"}, {"sha": "9a5878e855ba0a704ca791692bfab39408151601", "filename": "gcc/config/nvptx/gen-multilib-matches.sh", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9019085e17554c209ca8531022f116b2d7f94fe/gcc%2Fconfig%2Fnvptx%2Fgen-multilib-matches.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9019085e17554c209ca8531022f116b2d7f94fe/gcc%2Fconfig%2Fnvptx%2Fgen-multilib-matches.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fgen-multilib-matches.sh?ref=e9019085e17554c209ca8531022f116b2d7f94fe", "patch": "@@ -0,0 +1,60 @@\n+#!/bin/sh\n+\n+# Print nvptx 'MULTILIB_MATCHES'\n+\n+# Copyright (C) 2022 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+set -e\n+\n+nvptx_sm_def=\"$1/nvptx-sm.def\"\n+multilib_options_isa_default=$2\n+multilib_options_isa_list=$3\n+\n+sms=$(grep ^NVPTX_SM $nvptx_sm_def | sed 's/.*(//;s/,.*//')\n+\n+# Every variant in 'sms' has to either be remapped to the default variant\n+# ('.', which is always built), or does get built as non-default variant\n+# ('misa=sm_SM'; thus not remapped), or has to be remapped to the \"next lower\"\n+# variant that does get built.\n+\n+# The \"lowest\" variant has to be built.\n+sm_next_lower=INVALID\n+\n+for sm in $sms; do\n+    if [ x\"sm_$sm\" = x\"$multilib_options_isa_default\" ]; then\n+\tsm_map=.\n+    elif expr \" $multilib_options_isa_list \" : \".* sm_$sm \" > /dev/null; then\n+\tsm_map=\n+    else\n+\tsm_map=$sm_next_lower\n+    fi\n+\n+    if [ x\"$sm_map\" = x ]; then\n+\tsm_next_lower=$sm\n+    else\n+\t# Output format as required for 'MULTILIB_MATCHES'.\n+\tif [ x\"$sm_map\" = x. ]; then\n+\t    echo \".=misa?sm_$sm\"\n+\telse\n+\t    echo \"misa?sm_$sm_map=misa?sm_$sm\"\n+\tfi\n+\n+\tsm_next_lower=$sm_map\n+    fi\n+done"}, {"sha": "9c5cbda0070749fe47b79d245aca664e37f94fc8", "filename": "gcc/config/nvptx/t-nvptx", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9019085e17554c209ca8531022f116b2d7f94fe/gcc%2Fconfig%2Fnvptx%2Ft-nvptx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9019085e17554c209ca8531022f116b2d7f94fe/gcc%2Fconfig%2Fnvptx%2Ft-nvptx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Ft-nvptx?ref=e9019085e17554c209ca8531022f116b2d7f94fe", "patch": "@@ -42,11 +42,22 @@ MULTILIB_OPTIONS += mgomp\n \n multilib_options_isa_list := $(TM_MULTILIB_CONFIG)\n multilib_options_isa_default := $(word 1,$(multilib_options_isa_list))\n-# Add the default '-misa' as a multilib option:\n-MULTILIB_OPTIONS += misa=$(multilib_options_isa_default)\n-# ..., but don't handle it specially (remap to default):\n-MULTILIB_MATCHES += .=misa?$(multilib_options_isa_default)\n-# ..., and don't actually build it:\n+multilib_options_misa_list := $(addprefix misa=,$(multilib_options_isa_list))\n+# Add the requested '-misa' variants as a multilib option ('misa=VAR1/misa=VAR2/misa=VAR3' etc.):\n+empty :=\n+space := $(empty) $(empty)\n+MULTILIB_OPTIONS += $(subst $(space),/,$(multilib_options_misa_list))\n+# ..., and remap '-misa' variants as appropriate:\n+multilib_matches := $(shell $(srcdir)/config/nvptx/gen-multilib-matches.sh $(srcdir)/config/nvptx $(multilib_options_isa_default) \"$(multilib_options_isa_list)\")\n+MULTILIB_MATCHES += $(multilib_matches)\n+# ..., and don't actually build what's the default '-misa':\n MULTILIB_EXCEPTIONS += *misa=$(multilib_options_isa_default)*\n \n MULTILIB_OPTIONS += mptx=3.1\n+# Filter out invalid '-misa'/'-mptx=3.1' combinations; per 'nvptx-sm.def',\n+# 'nvptx.opt:ptx_version', 'nvptx.cc:first_ptx_version_supporting_sm'\n+# (that is, '-mptx=3.1' only for sm_30, sm_35 variants):\n+MULTILIB_EXCEPTIONS += $(foreach misa,$(filter-out %=sm_30 %=sm_35,$(multilib_options_misa_list)),*$(misa)/mptx=3.1)\n+# ..., and special care has to be taken if '-mptx=3.1' is invalid for the\n+# default variant:\n+MULTILIB_EXCEPTIONS += $(if $(filter-out sm_30 sm_35,$(multilib_options_isa_default)),mgomp/mptx=3.1 mptx=3.1)"}, {"sha": "cc01c691dc18d89536312e9681a0fc83572af4ab", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9019085e17554c209ca8531022f116b2d7f94fe/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9019085e17554c209ca8531022f116b2d7f94fe/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e9019085e17554c209ca8531022f116b2d7f94fe", "patch": "@@ -4598,6 +4598,15 @@ the GCC sources.\n Use the @option{--disable-sjlj-exceptions} and\n @option{--enable-newlib-io-long-long} options when configuring.\n \n+The @option{--with-arch} option may be specified to override the\n+default value for the @option{-march} option, and to also build\n+corresponding target libraries.\n+The default is @option{--with-arch=sm_30}.\n+\n+For example, if @option{--with-arch=sm_70} is specified,\n+@option{-march=sm_30} and @option{-march=sm_70} target libraries are\n+built, and code generation defaults to @option{-march=sm_70}.\n+\n @html\n <hr />\n @end html"}, {"sha": "d2e4abd3484fb99f244737ddb5d3e3ae2b232505", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9019085e17554c209ca8531022f116b2d7f94fe/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9019085e17554c209ca8531022f116b2d7f94fe/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e9019085e17554c209ca8531022f116b2d7f94fe", "patch": "@@ -28058,7 +28058,9 @@ supported.\n Generate code for the specified PTX ISA target architecture\n (e.g.@: @samp{sm_35}).  Valid architecture strings are @samp{sm_30},\n @samp{sm_35}, @samp{sm_53}, @samp{sm_70}, @samp{sm_75} and\n-@samp{sm_80}.  The default target architecture is sm_30.\n+@samp{sm_80}.\n+The default depends on how the compiler has been configured, see\n+@option{--with-arch}.\n \n This option sets the value of the preprocessor macro\n @code{__PTX_SM__}; for instance, for @samp{sm_35}, it has the value"}]}