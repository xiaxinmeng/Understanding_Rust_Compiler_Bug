{"sha": "74f41f0282714b0485d4ffcaf0d6b9f92133db7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRmNDFmMDI4MjcxNGIwNDg1ZDRmZmNhZjBkNmI5ZjkyMTMzZGI3Zg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-08T13:22:00Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-08T13:22:00Z"}, "message": "bfin-protos.h (function_arg, [...]): Delete.\n\n\t* config/bfin/bfin-protos.h (function_arg, function_arg_advance):\n\tDelete.\n\t* config/bfin/bfin.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/bfin/bfin.c (function_arg_advance): Rename to...\n\t(bfin_function_arg_advance): ...this.  Make static.  Take const_tree\n\tand bool arguments.\n\t(function_arg): Rename to...\n\t(bfin_function_arg): ...this.  Make static.  Take const_tree and bool\n\targuments.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r165182", "tree": {"sha": "9a2ef0de3520ed28a6ebf583406dbe8acde72ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a2ef0de3520ed28a6ebf583406dbe8acde72ac9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74f41f0282714b0485d4ffcaf0d6b9f92133db7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f41f0282714b0485d4ffcaf0d6b9f92133db7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74f41f0282714b0485d4ffcaf0d6b9f92133db7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f41f0282714b0485d4ffcaf0d6b9f92133db7f/comments", "author": null, "committer": null, "parents": [{"sha": "3a2bd2f4650f6d4703febd0756d4819359213eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2bd2f4650f6d4703febd0756d4819359213eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2bd2f4650f6d4703febd0756d4819359213eed"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "7a1e1fcb49c141923c41838d94890149138e9d74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f41f0282714b0485d4ffcaf0d6b9f92133db7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f41f0282714b0485d4ffcaf0d6b9f92133db7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74f41f0282714b0485d4ffcaf0d6b9f92133db7f", "patch": "@@ -1,3 +1,16 @@\n+2010-10-08  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/bfin/bfin-protos.h (function_arg, function_arg_advance):\n+\tDelete.\n+\t* config/bfin/bfin.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/bfin/bfin.c (function_arg_advance): Rename to...\n+\t(bfin_function_arg_advance): ...this.  Make static.  Take const_tree\n+\tand bool arguments.\n+\t(function_arg): Rename to...\n+\t(bfin_function_arg): ...this.  Make static.  Take const_tree and bool\n+\targuments.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/score/score-protos.h (score_function_arg): Delete."}, {"sha": "d713ae57dc93e8c869166d55869ccd9439ec10dd", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f41f0282714b0485d4ffcaf0d6b9f92133db7f/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f41f0282714b0485d4ffcaf0d6b9f92133db7f/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=74f41f0282714b0485d4ffcaf0d6b9f92133db7f", "patch": "@@ -65,8 +65,6 @@\n \n #define Mmode enum machine_mode\n \n-extern rtx function_arg (CUMULATIVE_ARGS *, Mmode, tree, int);\n-extern void function_arg_advance (CUMULATIVE_ARGS *, Mmode, tree, int);\n extern bool function_arg_regno_p (int);\n \n extern const char *output_load_immediate (rtx *);"}, {"sha": "1ef311b625b49d638b841eb5435b5b9ccd3c7775", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f41f0282714b0485d4ffcaf0d6b9f92133db7f/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f41f0282714b0485d4ffcaf0d6b9f92133db7f/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=74f41f0282714b0485d4ffcaf0d6b9f92133db7f", "patch": "@@ -1907,9 +1907,9 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n    of mode MODE and data type TYPE.\n    (TYPE is null for libcalls where that information may not be available.)  */\n \n-void\n-function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n-\t\t      int named ATTRIBUTE_UNUSED)\n+static void\n+bfin_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t   const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   int count, bytes, words;\n \n@@ -1946,9 +1946,9 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n    NAMED is nonzero if this argument is a named parameter\n     (otherwise it is an extra parameter matching an ellipsis).  */\n \n-struct rtx_def *\n-function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n-\t      int named ATTRIBUTE_UNUSED)\n+static rtx\n+bfin_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t   const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   int bytes\n     = (mode == BLKmode) ? int_size_in_bytes (type) : GET_MODE_SIZE (mode);\n@@ -6634,6 +6634,12 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES bfin_arg_partial_bytes\n \n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG bfin_function_arg\n+\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE bfin_function_arg_advance\n+\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE bfin_pass_by_reference\n "}, {"sha": "70ed6dcb56117ea92719de3a3c42f641d492b16a", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f41f0282714b0485d4ffcaf0d6b9f92133db7f/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f41f0282714b0485d4ffcaf0d6b9f92133db7f/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=74f41f0282714b0485d4ffcaf0d6b9f92133db7f", "patch": "@@ -815,22 +815,6 @@ typedef struct {\n   int call_cookie;\t\t/* Do special things for this call */\n } CUMULATIVE_ARGS;\n \n-/* Define where to put the arguments to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n-\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  (function_arg (&CUM, MODE, TYPE, NAMED))\n-\n #define FUNCTION_ARG_REGNO_P(REGNO) function_arg_regno_p (REGNO)\n \n \n@@ -840,12 +824,6 @@ typedef struct {\n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT, N_NAMED_ARGS)\t\\\n   (init_cumulative_args (&CUM, FNTYPE, LIBNAME))\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n-  (function_arg_advance (&CUM, MODE, TYPE, NAMED))\n-\n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;"}]}