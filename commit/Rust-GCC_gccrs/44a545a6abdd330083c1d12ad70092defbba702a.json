{"sha": "44a545a6abdd330083c1d12ad70092defbba702a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhNTQ1YTZhYmRkMzMwMDgzYzFkMTJhZDcwMDkyZGVmYmJhNzAyYQ==", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2021-08-09T03:37:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-27T05:19:43Z"}, "message": "i386: Fix wrong optimization for consecutive masked scatters [PR 101472]\n\ngcc/ChangeLog:\n\n\tPR target/101472\n\t* config/i386/sse.md: (<avx512>scattersi<mode>): Add mask operand to\n\tUNSPEC_VSIBADDR.\n\t(<avx512>scattersi<mode>): Likewise.\n\t(*avx512f_scattersi<VI48F:mode>): Merge mask operand to set_dest.\n\t(*avx512f_scatterdi<VI48F:mode>): Likewise\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/101472\n\t* gcc.target/i386/avx512f-pr101472.c: New test.\n\t* gcc.target/i386/avx512vl-pr101472.c: New test.", "tree": {"sha": "eae8bab81eb094ab3bbe6953f73dc151108f860f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eae8bab81eb094ab3bbe6953f73dc151108f860f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44a545a6abdd330083c1d12ad70092defbba702a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a545a6abdd330083c1d12ad70092defbba702a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a545a6abdd330083c1d12ad70092defbba702a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a545a6abdd330083c1d12ad70092defbba702a/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f5ea5e141cf1e40289dbc73ac21e85ad39fa57"}], "stats": {"total": 148, "additions": 140, "deletions": 8}, "files": [{"sha": "ac0c46328f20736ceacb444cf76ecb2f92c0a151", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a545a6abdd330083c1d12ad70092defbba702a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a545a6abdd330083c1d12ad70092defbba702a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=44a545a6abdd330083c1d12ad70092defbba702a", "patch": "@@ -24205,19 +24205,21 @@\n   \"TARGET_AVX512F\"\n {\n   operands[5]\n-    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[0], operands[2],\n-\t\t\t\t\toperands[4]), UNSPEC_VSIBADDR);\n+    = gen_rtx_UNSPEC (Pmode, gen_rtvec (4, operands[0], operands[2],\n+\t\t\t\t\toperands[4], operands[1]),\n+\t\t\t\t\tUNSPEC_VSIBADDR);\n })\n \n (define_insn \"*avx512f_scattersi<VI48F:mode>\"\n   [(set (match_operator:VI48F 5 \"vsib_mem_operator\"\n \t  [(unspec:P\n \t     [(match_operand:P 0 \"vsib_address_operand\" \"Tv\")\n \t      (match_operand:<VEC_GATHER_IDXSI> 2 \"register_operand\" \"v\")\n-\t      (match_operand:SI 4 \"const1248_operand\" \"n\")]\n+\t      (match_operand:SI 4 \"const1248_operand\" \"n\")\n+\t      (match_operand:<avx512fmaskmode> 6 \"register_operand\" \"1\")]\n \t     UNSPEC_VSIBADDR)])\n \t(unspec:VI48F\n-\t  [(match_operand:<avx512fmaskmode> 6 \"register_operand\" \"1\")\n+\t  [(match_dup 6)\n \t   (match_operand:VI48F 3 \"register_operand\" \"v\")]\n \t  UNSPEC_SCATTER))\n    (clobber (match_scratch:<avx512fmaskmode> 1 \"=&Yk\"))]\n@@ -24243,19 +24245,21 @@\n   \"TARGET_AVX512F\"\n {\n   operands[5]\n-    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[0], operands[2],\n-\t\t\t\t\toperands[4]), UNSPEC_VSIBADDR);\n+    = gen_rtx_UNSPEC (Pmode, gen_rtvec (4, operands[0], operands[2],\n+\t\t\t\t\toperands[4], operands[1]),\n+\t\t\t\t\tUNSPEC_VSIBADDR);\n })\n \n (define_insn \"*avx512f_scatterdi<VI48F:mode>\"\n   [(set (match_operator:VI48F 5 \"vsib_mem_operator\"\n \t  [(unspec:P\n \t     [(match_operand:P 0 \"vsib_address_operand\" \"Tv\")\n \t      (match_operand:<VEC_GATHER_IDXDI> 2 \"register_operand\" \"v\")\n-\t      (match_operand:SI 4 \"const1248_operand\" \"n\")]\n+\t      (match_operand:SI 4 \"const1248_operand\" \"n\")\n+\t      (match_operand:QI 6 \"register_operand\" \"1\")]\n \t     UNSPEC_VSIBADDR)])\n \t(unspec:VI48F\n-\t  [(match_operand:QI 6 \"register_operand\" \"1\")\n+\t  [(match_dup 6)\n \t   (match_operand:<VEC_GATHER_SRCDI> 3 \"register_operand\" \"v\")]\n \t  UNSPEC_SCATTER))\n    (clobber (match_scratch:QI 1 \"=&Yk\"))]"}, {"sha": "89c6603c2ff4b3287f0327d626a6a717d7ddf6b4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr101472.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a545a6abdd330083c1d12ad70092defbba702a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr101472.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a545a6abdd330083c1d12ad70092defbba702a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr101472.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr101472.c?ref=44a545a6abdd330083c1d12ad70092defbba702a", "patch": "@@ -0,0 +1,49 @@\n+/* PR target/101472 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpscatterqd\\[ \\\\t\\]+\\[^\\{\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpscatterdd\\[ \\\\t\\]+\\[^\\{\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpscatterqq\\[ \\\\t\\]+\\[^\\{\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpscatterdq\\[ \\\\t\\]+\\[^\\{\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterqps\\[ \\\\t\\]+\\[^\\{\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterdps\\[ \\\\t\\]+\\[^\\{\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterqpd\\[ \\\\t\\]+\\[^\\{\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterdpd\\[ \\\\t\\]+\\[^\\{\\n\\]*zmm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+void two_scatters_epi32(void* addr, __mmask8 k1, __mmask8 k2, __m512i vindex, \n+\t\t\t __m256i a, __m512i b)\n+{\n+    _mm512_mask_i64scatter_epi32(addr, k1, vindex, a, 1);\n+    _mm512_mask_i64scatter_epi32(addr, k2, vindex, a, 1);\n+    _mm512_mask_i32scatter_epi32(addr, k1, vindex, b, 1);\n+    _mm512_mask_i32scatter_epi32(addr, k2, vindex, b, 1);\n+}\n+\n+void two_scatters_epi64(void* addr, __mmask8 k1, __mmask8 k2, __m512i vindex, \n+\t\t\t __m256i idx, __m512i a)\n+{\n+    _mm512_mask_i64scatter_epi64(addr, k1, vindex, a, 1);\n+    _mm512_mask_i64scatter_epi64(addr, k2, vindex, a, 1);\n+    _mm512_mask_i32scatter_epi64(addr, k1, idx, a, 1);\n+    _mm512_mask_i32scatter_epi64(addr, k2, idx, a, 1);\n+}\n+\n+void two_scatters_ps(void* addr, __mmask8 k1, __mmask8 k2, __m512i vindex, \n+\t\t      __m256 a, __m512 b)\n+{\n+    _mm512_mask_i64scatter_ps(addr, k1, vindex, a, 1);\n+    _mm512_mask_i64scatter_ps(addr, k2, vindex, a, 1);\n+    _mm512_mask_i32scatter_ps(addr, k1, vindex, b, 1);\n+    _mm512_mask_i32scatter_ps(addr, k2, vindex, b, 1);\n+}\n+\n+void two_scatters_pd(void* addr, __mmask8 k1, __mmask8 k2, __m512i vindex, \n+\t\t      __m256i idx, __m512d a)\n+{\n+    _mm512_mask_i64scatter_pd(addr, k1, vindex, a, 1);\n+    _mm512_mask_i64scatter_pd(addr, k2, vindex, a, 1);\n+    _mm512_mask_i32scatter_pd(addr, k1, idx, a, 1);\n+    _mm512_mask_i32scatter_pd(addr, k2, idx, a, 1);\n+}"}, {"sha": "6df59a2eb7f9273477b5322ee925b7018179bbf9", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr101472.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a545a6abdd330083c1d12ad70092defbba702a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr101472.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a545a6abdd330083c1d12ad70092defbba702a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr101472.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr101472.c?ref=44a545a6abdd330083c1d12ad70092defbba702a", "patch": "@@ -0,0 +1,79 @@\n+/* PR target/101472 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpscatterqd\\[ \\\\t\\]+\\[^\\{\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpscatterqd\\[ \\\\t\\]+\\[^\\{\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpscatterdd\\[ \\\\t\\]+\\[^\\{\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpscatterdd\\[ \\\\t\\]+\\[^\\{\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpscatterqq\\[ \\\\t\\]+\\[^\\{\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpscatterqq\\[ \\\\t\\]+\\[^\\{\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpscatterdq\\[ \\\\t\\]+\\[^\\{\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpscatterdq\\[ \\\\t\\]+\\[^\\{\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterqps\\[ \\\\t\\]+\\[^\\{\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterqps\\[ \\\\t\\]+\\[^\\{\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterdps\\[ \\\\t\\]+\\[^\\{\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterdps\\[ \\\\t\\]+\\[^\\{\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterqpd\\[ \\\\t\\]+\\[^\\{\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterqpd\\[ \\\\t\\]+\\[^\\{\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterdpd\\[ \\\\t\\]+\\[^\\{\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterdpd\\[ \\\\t\\]+\\[^\\{\\n\\]*ymm\\[0-9\\]\\[^\\n\\]*xmm\\[0-9\\]\\[^\\n\\]*{%k\\[1-7\\]}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+\n+#include <immintrin.h>\n+\n+void two_scatters_epi32(void* addr, __mmask8 k1, __mmask8 k2, __m128i vindex1, \n+\t\t\t __m256i vindex2, __m128i src_epi32, \n+\t\t         __m256i src_i32_epi32)\n+{\n+    _mm_mask_i64scatter_epi32(addr, k1, vindex1, src_epi32, 1);\n+    _mm_mask_i64scatter_epi32(addr, k2, vindex1, src_epi32, 1);\n+    _mm256_mask_i64scatter_epi32(addr, k1, vindex2, src_epi32, 1);\n+    _mm256_mask_i64scatter_epi32(addr, k2, vindex2, src_epi32, 1);\n+\n+    _mm_mask_i32scatter_epi32(addr, k1, vindex1, src_epi32, 1);\n+    _mm_mask_i32scatter_epi32(addr, k2, vindex1, src_epi32, 1);\n+    _mm256_mask_i32scatter_epi32(addr, k1, vindex2, src_i32_epi32, 1);\n+    _mm256_mask_i32scatter_epi32(addr, k2, vindex2, src_i32_epi32, 1);\n+}\n+\n+void two_scatters_epi64(void* addr, __mmask8 k1, __mmask8 k2, __m128i vindex1, \n+\t\t         __m256i vindex2, __m128i src_epi64_mm, \n+\t\t\t __m256i src_epi64)\n+{\n+    _mm_mask_i64scatter_epi64(addr, k1, vindex1, src_epi64_mm, 1);\n+    _mm_mask_i64scatter_epi64(addr, k2, vindex1, src_epi64_mm, 1);\n+    _mm256_mask_i64scatter_epi64(addr, k1, vindex2, src_epi64, 1);\n+    _mm256_mask_i64scatter_epi64(addr, k2, vindex2, src_epi64, 1);\n+\n+    _mm_mask_i32scatter_epi64(addr, k1, vindex1, src_epi64_mm, 8);\n+    _mm_mask_i32scatter_epi64(addr, k2, vindex1, src_epi64_mm, 8);\n+    _mm256_mask_i32scatter_epi64(addr, k1, vindex1, src_epi64, 1);\n+    _mm256_mask_i32scatter_epi64(addr, k2, vindex1, src_epi64, 1);\n+}\n+void two_scatters_ps(void* addr, __mmask8 k1, __mmask8 k2, __m128i vindex1, \n+\t\t      __m256i vindex2, __m128 src_ps, __m256 src_i32_ps)\n+{\n+    _mm_mask_i64scatter_ps(addr, k1, vindex1, src_ps, 1);\n+    _mm_mask_i64scatter_ps(addr, k2, vindex1, src_ps, 1);\n+    _mm256_mask_i64scatter_ps(addr, k1, vindex2, src_ps, 1);\n+    _mm256_mask_i64scatter_ps(addr, k2, vindex2, src_ps, 1);\n+\n+    _mm_mask_i32scatter_ps(addr, k1, vindex1, src_ps, 8);\n+    _mm_mask_i32scatter_ps(addr, k2, vindex1, src_ps, 8);\n+    _mm256_mask_i32scatter_ps(addr, k1, vindex2, src_i32_ps, 1);\n+    _mm256_mask_i32scatter_ps(addr, k2, vindex2, src_i32_ps, 1);\n+}\n+\n+void two_scatters_pd(void* addr, __mmask8 k1, __mmask8 k2,  __m128i vindex1,\n+\t\t      __m256i vindex2, __m128d src_pd_mm, __m256d src_pd)\n+{\n+    _mm_mask_i64scatter_pd(addr, k1, vindex1, src_pd_mm, 1);\n+    _mm_mask_i64scatter_pd(addr, k2, vindex1, src_pd_mm, 1);\n+    _mm256_mask_i64scatter_pd(addr, k1, vindex2, src_pd, 1);\n+    _mm256_mask_i64scatter_pd(addr, k2, vindex2, src_pd, 1);\n+\n+    _mm_mask_i32scatter_pd(addr, k1, vindex1, src_pd_mm, 8);\n+    _mm_mask_i32scatter_pd(addr, k2, vindex1, src_pd_mm, 8);\n+    _mm256_mask_i32scatter_pd(addr, k1, vindex1, src_pd, 1);\n+    _mm256_mask_i32scatter_pd(addr, k2, vindex1, src_pd, 1);\n+}"}]}