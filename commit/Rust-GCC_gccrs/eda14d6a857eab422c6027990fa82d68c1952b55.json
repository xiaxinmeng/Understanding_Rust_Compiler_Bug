{"sha": "eda14d6a857eab422c6027990fa82d68c1952b55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhMTRkNmE4NTdlYWI0MjJjNjAyNzk5MGZhODJkNjhjMTk1MmI1NQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-10-29T13:15:48Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-10-29T13:15:48Z"}, "message": "re PR tree-optimization/58689 ([meta-bug] __attribute__((returns_nonnull)) enhancements)\n\n2013-10-29  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/58689\ninclude/\n\t* ansidecl.h (ATTRIBUTE_RETURNS_NONNULL): New macro.\n\t* libiberty.h (basename, lbasename, dos_lbasename, unix_lbasename,\n\tconcat_copy): Mark with attributes nonnull(1) and returns_nonnull.\n\t(concat, reconcat, concat_copy2, choose_temp_base, xstrerror,\n\txmalloc, xrealloc, xcalloc, xstrdup, xstrndup, xmemdup, pex_init):\n\tMark with attribute returns_nonnull.\n\nlibiberty/\n\t* concat.c: Remove note about xmalloc.\n\nFrom-SVN: r204159", "tree": {"sha": "ae5bceba5953af2ac60c5b4a8c14448cf256bb34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae5bceba5953af2ac60c5b4a8c14448cf256bb34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eda14d6a857eab422c6027990fa82d68c1952b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda14d6a857eab422c6027990fa82d68c1952b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eda14d6a857eab422c6027990fa82d68c1952b55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda14d6a857eab422c6027990fa82d68c1952b55/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e9055ae62248333310395e2e9fad6f3cc9e24d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9055ae62248333310395e2e9fad6f3cc9e24d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9055ae62248333310395e2e9fad6f3cc9e24d7"}], "stats": {"total": 74, "additions": 43, "deletions": 31}, "files": [{"sha": "a43d36758d61d574bead89d3aef5fa8d76de8ace", "filename": "include/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda14d6a857eab422c6027990fa82d68c1952b55/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda14d6a857eab422c6027990fa82d68c1952b55/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=eda14d6a857eab422c6027990fa82d68c1952b55", "patch": "@@ -1,3 +1,13 @@\n+2013-10-29  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/58689\n+\t* ansidecl.h (ATTRIBUTE_RETURNS_NONNULL): New macro.\n+\t* libiberty.h (basename, lbasename, dos_lbasename, unix_lbasename,\n+\tconcat_copy): Mark with attributes nonnull(1) and returns_nonnull.\n+\t(concat, reconcat, concat_copy2, choose_temp_base, xstrerror,\n+\txmalloc, xrealloc, xcalloc, xstrdup, xstrndup, xmemdup, pex_init):\n+\tMark with attribute returns_nonnull.\n+\n 2013-10-22  Sterling Augustine  <saugustine@google.com>\n \n \t* gdb/gdb-index.h: Merge from gdb tree."}, {"sha": "5cd03a7d760ea2c3ae30ed0200979707ddac4639", "filename": "include/ansidecl.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda14d6a857eab422c6027990fa82d68c1952b55/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda14d6a857eab422c6027990fa82d68c1952b55/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=eda14d6a857eab422c6027990fa82d68c1952b55", "patch": "@@ -311,6 +311,15 @@ So instead we use the macro below and test it against specific values.  */\n # endif /* GNUC >= 3.3 */\n #endif /* ATTRIBUTE_NONNULL */\n \n+/* Attribute `returns_nonnull' was valid as of gcc 4.9.  */\n+#ifndef ATTRIBUTE_RETURNS_NONNULL\n+# if (GCC_VERSION >= 4009)\n+#  define ATTRIBUTE_RETURNS_NONNULL __attribute__ ((__returns_nonnull__))\n+# else\n+#  define ATTRIBUTE_RETURNS_NONNULL\n+# endif /* GNUC >= 4.9 */\n+#endif /* ATTRIBUTE_RETURNS_NONNULL */\n+\n /* Attribute `pure' was valid as of gcc 3.0.  */\n #ifndef ATTRIBUTE_PURE\n # if (GCC_VERSION >= 3000)"}, {"sha": "f2cf573d1b69ff129f47b4d824e3811788ca44a9", "filename": "include/libiberty.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda14d6a857eab422c6027990fa82d68c1952b55/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda14d6a857eab422c6027990fa82d68c1952b55/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=eda14d6a857eab422c6027990fa82d68c1952b55", "patch": "@@ -107,7 +107,7 @@ extern int countargv (char**);\n    is 1, we found it so don't provide any declaration at all.  */\n #if !HAVE_DECL_BASENAME\n #if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined(__NetBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (__MINGW32__) || defined (HAVE_DECL_BASENAME)\n-extern char *basename (const char *);\n+extern char *basename (const char *) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1);\n #else\n /* Do not allow basename to be used if there is no prototype seen.  We\n    either need to use the above prototype or have one from\n@@ -118,18 +118,18 @@ extern char *basename (const char *);\n \n /* A well-defined basename () that is always compiled in.  */\n \n-extern const char *lbasename (const char *);\n+extern const char *lbasename (const char *) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1);\n \n /* Same, but assumes DOS semantics (drive name, backslash is also a\n    dir separator) regardless of host.  */\n \n-extern const char *dos_lbasename (const char *);\n+extern const char *dos_lbasename (const char *) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1);\n \n /* Same, but assumes Unix semantics (absolute paths always start with\n    a slash, only forward slash is accepted as dir separator)\n    regardless of host.  */\n \n-extern const char *unix_lbasename (const char *);\n+extern const char *unix_lbasename (const char *) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1);\n \n /* A well-defined realpath () that is always compiled in.  */\n \n@@ -139,7 +139,7 @@ extern char *lrealpath (const char *);\n    the last argument of this function, to terminate the list of\n    strings.  Allocates memory using xmalloc.  */\n \n-extern char *concat (const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;\n+extern char *concat (const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_SENTINEL;\n \n /* Concatenate an arbitrary number of strings.  You must pass NULL as\n    the last argument of this function, to terminate the list of\n@@ -148,7 +148,7 @@ extern char *concat (const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;\n    pointer to be freed after the new string is created, similar to the\n    way xrealloc works.  */\n \n-extern char *reconcat (char *, const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_SENTINEL;\n+extern char *reconcat (char *, const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_SENTINEL;\n \n /* Determine the length of concatenating an arbitrary number of\n    strings.  You must pass NULL as the last argument of this function,\n@@ -161,14 +161,14 @@ extern unsigned long concat_length (const char *, ...) ATTRIBUTE_SENTINEL;\n    to terminate the list of strings.  The supplied memory is assumed\n    to be large enough.  */\n \n-extern char *concat_copy (char *, const char *, ...) ATTRIBUTE_SENTINEL;\n+extern char *concat_copy (char *, const char *, ...) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1) ATTRIBUTE_SENTINEL;\n \n /* Concatenate an arbitrary number of strings into a GLOBAL area of\n    memory.  You must pass NULL as the last argument of this function,\n    to terminate the list of strings.  The supplied memory is assumed\n    to be large enough.  */\n \n-extern char *concat_copy2 (const char *, ...) ATTRIBUTE_SENTINEL;\n+extern char *concat_copy2 (const char *, ...) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_SENTINEL;\n \n /* This is the global area used by concat_copy2.  */\n \n@@ -226,7 +226,7 @@ extern char *make_relative_prefix_ignore_links (const char *, const char *,\n \n /* Choose a temporary directory to use for scratch files.  */\n \n-extern char *choose_temp_base (void) ATTRIBUTE_MALLOC;\n+extern char *choose_temp_base (void) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n \n /* Return a temporary file name or NULL if unable to create one.  */\n \n@@ -256,7 +256,7 @@ extern int strtoerrno (const char *);\n \n /* ANSI's strerror(), but more robust.  */\n \n-extern char *xstrerror (int);\n+extern char *xstrerror (int) ATTRIBUTE_RETURNS_NONNULL;\n \n /* Return the maximum signal number for which strsignal will return a\n    string.  */\n@@ -298,30 +298,30 @@ extern void xmalloc_failed (size_t) ATTRIBUTE_NORETURN;\n    message to stderr (using the name set by xmalloc_set_program_name,\n    if any) and then call xexit.  */\n \n-extern void *xmalloc (size_t) ATTRIBUTE_MALLOC;\n+extern void *xmalloc (size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n \n /* Reallocate memory without fail.  This works like xmalloc.  Note,\n    realloc type functions are not suitable for attribute malloc since\n    they may return the same address across multiple calls. */\n \n-extern void *xrealloc (void *, size_t);\n+extern void *xrealloc (void *, size_t) ATTRIBUTE_RETURNS_NONNULL;\n \n /* Allocate memory without fail and set it to zero.  This works like\n    xmalloc.  */\n \n-extern void *xcalloc (size_t, size_t) ATTRIBUTE_MALLOC;\n+extern void *xcalloc (size_t, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n \n /* Copy a string into a memory buffer without fail.  */\n \n-extern char *xstrdup (const char *) ATTRIBUTE_MALLOC;\n+extern char *xstrdup (const char *) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n \n /* Copy at most N characters from string into a buffer without fail.  */\n \n-extern char *xstrndup (const char *, size_t) ATTRIBUTE_MALLOC;\n+extern char *xstrndup (const char *, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n \n /* Copy an existing memory buffer to a new memory buffer without fail.  */\n \n-extern void *xmemdup (const void *, size_t, size_t) ATTRIBUTE_MALLOC;\n+extern void *xmemdup (const void *, size_t, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n \n /* Physical memory routines.  Return values are in BYTES.  */\n extern double physmem_total (void);\n@@ -399,7 +399,7 @@ extern void hex_init (void);\n    Returns NULL on error.  */\n \n extern struct pex_obj *pex_init (int flags, const char *pname,\n-\t\t\t\t const char *tempbase);\n+\t\t\t\t const char *tempbase) ATTRIBUTE_RETURNS_NONNULL;\n \n /* Flags for pex_run.  These are bits to be or'ed together.  */\n "}, {"sha": "cda181e1066d36d82bf778a1b820b77cd37c0323", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda14d6a857eab422c6027990fa82d68c1952b55/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda14d6a857eab422c6027990fa82d68c1952b55/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=eda14d6a857eab422c6027990fa82d68c1952b55", "patch": "@@ -1,3 +1,8 @@\n+2013-10-29  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/58689\n+\t* concat.c: Remove note about xmalloc.\n+\n 2013-10-27  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* testsuite/test-demangle.c: Include unistd.h."}, {"sha": "4144d8305ccdc7b52d4fe90221623f31f846a008", "filename": "libiberty/concat.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda14d6a857eab422c6027990fa82d68c1952b55/libiberty%2Fconcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda14d6a857eab422c6027990fa82d68c1952b55/libiberty%2Fconcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconcat.c?ref=eda14d6a857eab422c6027990fa82d68c1952b55", "patch": "@@ -25,23 +25,11 @@ Boston, MA 02110-1301, USA.  */\n   @dots{}, @code{NULL})\n \n Concatenate zero or more of strings and return the result in freshly\n-@code{xmalloc}ed memory.  Returns @code{NULL} if insufficient memory is\n-available.  The argument list is terminated by the first @code{NULL}\n-pointer encountered.  Pointers to empty strings are ignored.\n+@code{xmalloc}ed memory.  The argument list is terminated by the first\n+@code{NULL} pointer encountered.  Pointers to empty strings are ignored.\n \n @end deftypefn\n \n-NOTES\n-\n-\tThis function uses xmalloc() which is expected to be a front end\n-\tfunction to malloc() that deals with low memory situations.  In\n-\ttypical use, if malloc() returns NULL then xmalloc() diverts to an\n-\terror handler routine which never returns, and thus xmalloc will\n-\tnever return a NULL pointer.  If the client application wishes to\n-\tdeal with low memory situations itself, it should supply an xmalloc\n-\tthat just directly invokes malloc and blindly returns whatever\n-\tmalloc returns.\n-\n */\n \n "}]}