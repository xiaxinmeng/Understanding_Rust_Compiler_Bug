{"sha": "f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJjNGE3ODUxNWViZmNiNDNjZDc5NWUzZDQzOGY1YmRmNzJkM2YwNw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-05-05T11:30:57Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-05-05T11:30:57Z"}, "message": "re PR c/43772 (Errant -Wlogical-op warning when testing limits)\n\n2012-05-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/43772\nc-family/\n\t* c-common.c (warn_logical_operator): Do not warn if either side\n\tis already true or false.\ntestsuite/\n\t* c-c++-common/pr43772.c: New.\n\nFrom-SVN: r187194", "tree": {"sha": "20d0c64546a01ae4f6d3632809e6072d97f540a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20d0c64546a01ae4f6d3632809e6072d97f540a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07/comments", "author": null, "committer": null, "parents": [{"sha": "8f75db9fd35e5bd43305c37896d143b7947455a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f75db9fd35e5bd43305c37896d143b7947455a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f75db9fd35e5bd43305c37896d143b7947455a5"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "accb9850074cebf3d427fa85409227585d18399e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07", "patch": "@@ -1,3 +1,9 @@\n+2012-05-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/43772\n+\t* c-common.c (warn_logical_operator): Do not warn if either side\n+\tis already true or false.\n+\n 2012-05-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/51712"}, {"sha": "04a265f97db00aa901cdf04a62a95ef618926130", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07", "patch": "@@ -1612,31 +1612,50 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n \t   || INTEGRAL_TYPE_P (TREE_TYPE (op_right))))\n     return;\n \n-  lhs = make_range (op_left, &in0_p, &low0, &high0, &strict_overflow_p);\n-  rhs = make_range (op_right, &in1_p, &low1, &high1, &strict_overflow_p);\n \n-  if (lhs && TREE_CODE (lhs) == C_MAYBE_CONST_EXPR)\n+  /* We first test whether either side separately is trivially true\n+     (with OR) or trivially false (with AND).  If so, do not warn.\n+     This is a common idiom for testing ranges of data types in\n+     portable code.  */\n+  lhs = make_range (op_left, &in0_p, &low0, &high0, &strict_overflow_p);\n+  if (!lhs)\n+    return;\n+  if (TREE_CODE (lhs) == C_MAYBE_CONST_EXPR)\n     lhs = C_MAYBE_CONST_EXPR_EXPR (lhs);\n \n-  if (rhs && TREE_CODE (rhs) == C_MAYBE_CONST_EXPR)\n+  /* If this is an OR operation, invert both sides; now, the result\n+     should be always false to get a warning.  */\n+  if (or_op)\n+    in0_p = !in0_p;\n+\n+  tem = build_range_check (UNKNOWN_LOCATION, type, lhs, in0_p, low0, high0);\n+  if (integer_zerop (tem))\n+    return;\n+\n+  rhs = make_range (op_right, &in1_p, &low1, &high1, &strict_overflow_p);\n+  if (!rhs)\n+    return;\n+  if (TREE_CODE (rhs) == C_MAYBE_CONST_EXPR)\n     rhs = C_MAYBE_CONST_EXPR_EXPR (rhs);\n \n-  /* If this is an OR operation, invert both sides; we will invert\n-     again at the end.  */\n+  /* If this is an OR operation, invert both sides; now, the result\n+     should be always false to get a warning.  */\n   if (or_op)\n-    in0_p = !in0_p, in1_p = !in1_p;\n+    in1_p = !in1_p;\n \n-  /* If both expressions are the same, if we can merge the ranges, and we\n-     can build the range test, return it or it inverted.  */\n-  if (lhs && rhs && operand_equal_p (lhs, rhs, 0)\n+  tem = build_range_check (UNKNOWN_LOCATION, type, rhs, in1_p, low1, high1);\n+  if (integer_zerop (tem))\n+    return;\n+\n+  /* If both expressions have the same operand, if we can merge the\n+     ranges, and if the range test is always false, then warn.  */\n+  if (operand_equal_p (lhs, rhs, 0)\n       && merge_ranges (&in_p, &low, &high, in0_p, low0, high0,\n \t\t       in1_p, low1, high1)\n       && 0 != (tem = build_range_check (UNKNOWN_LOCATION,\n-\t\t\t\t\ttype, lhs, in_p, low, high)))\n+\t\t\t\t\ttype, lhs, in_p, low, high))\n+      && integer_zerop (tem))\n     {\n-      if (TREE_CODE (tem) != INTEGER_CST)\n-\treturn;\n-\n       if (or_op)\n         warning_at (location, OPT_Wlogical_op,\n                     \"logical %<or%> \""}, {"sha": "d5176b847e1677c7db12c16196cd86b4b2e60ace", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2c4a78515ebfcb43cd795e3d438f5bdf72d3f07", "patch": "@@ -1,3 +1,8 @@\n+2012-05-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/43772\n+\t* c-c++-common/pr43772.c: New.\n+\n 2012-05-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/41600"}]}