{"sha": "14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiMTc2MGNhN2VkYmU3MmYyZWQ0M2RmNWZiNGYxYmM2ZWE1NjdlNQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2014-07-01T14:04:37Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2014-07-01T14:04:37Z"}, "message": "Revert \"PR preprocessor/60723 - missing system-ness marks for macro tokens\"\n\nThis reverts commit 747e04f26ac3fb775bfc9af61e9170b9461b6cfc.\n\nFrom-SVN: r212199", "tree": {"sha": "c3f76dfe139d79bf3bed36d7436be8c62743df23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3f76dfe139d79bf3bed36d7436be8c62743df23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5/comments", "author": null, "committer": null, "parents": [{"sha": "08eedf75a2ddc851a0c46864b8f4ab71b5a456a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08eedf75a2ddc851a0c46864b8f4ab71b5a456a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08eedf75a2ddc851a0c46864b8f4ab71b5a456a6"}], "stats": {"total": 148, "additions": 24, "deletions": 124}, "files": [{"sha": "672c4e8c80c9eaac9091da0c241d2f19ac5f8c41", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5", "patch": "@@ -1,18 +1,3 @@\n-2014-07-01  Dodji Seketeli  <dodji@redhat.com>\n-\n-\tPR preprocessor/60723\n-\t* c-ppoutput.c (struct print::prev_was_system_token): New data\n-\tmember.\n-\t(init_pp_output): Initialize it.\n-\t(maybe_print_line_1, maybe_print_line, print_line_1, print_line)\n-\t(do_line_change): Return a flag saying if a line marker was\n-\temitted or not.\n-\t(scan_translation_unit): Detect if the system-ness of the token we\n-\tare about to emit is different from the one of the previously\n-\temitted token.  If so, emit a line marker.  Avoid emitting useless\n-\tadjacent line markers.\n-\t(scan_translation_unit_directives_only): Adjust.\n-\n 2014-07-01  Marek Polacek  <polacek@redhat.com>\n \n \t* c.opt (Wint-conversion): New option."}, {"sha": "f3b5fa4487db4089e58aea08b9163bd3c601ac28", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 24, "deletions": 52, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5", "patch": "@@ -36,8 +36,6 @@ static struct\n   unsigned char printed;\t/* Nonzero if something output at line.  */\n   bool first_time;\t\t/* pp_file_change hasn't been called yet.  */\n   const char *src_file;\t\t/* Current source file.  */\n-  bool prev_was_system_token;\t/* True if the previous token was a\n-\t\t\t\t   system token.*/\n } print;\n \n /* Defined and undefined macros being queued for output with -dU at\n@@ -60,11 +58,11 @@ static void account_for_newlines (const unsigned char *, size_t);\n static int dump_macro (cpp_reader *, cpp_hashnode *, void *);\n static void dump_queued_macros (cpp_reader *);\n \n-static bool print_line_1 (source_location, const char*, FILE *);\n-static bool print_line (source_location, const char *);\n-static bool maybe_print_line_1 (source_location, FILE *);\n-static bool maybe_print_line (source_location);\n-static bool do_line_change (cpp_reader *, const cpp_token *,\n+static void print_line_1 (source_location, const char*, FILE *);\n+static void print_line (source_location, const char *);\n+static void maybe_print_line_1 (source_location, FILE *);\n+static void maybe_print_line (source_location);\n+static void do_line_change (cpp_reader *, const cpp_token *,\n \t\t\t    source_location, int);\n \n /* Callback routines for the parser.   Most of these are active only\n@@ -158,7 +156,6 @@ init_pp_output (FILE *out_stream)\n   print.outf = out_stream;\n   print.first_time = 1;\n   print.src_file = \"\";\n-  print.prev_was_system_token = false;\n }\n \n /* Writes out the preprocessed file, handling spacing and paste\n@@ -171,7 +168,6 @@ scan_translation_unit (cpp_reader *pfile)\n     = cpp_get_options (parse_in)->lang != CLK_ASM\n       && !flag_no_line_commands;\n   bool in_pragma = false;\n-  bool line_marker_emitted = false;\n \n   print.source = NULL;\n   for (;;)\n@@ -204,7 +200,7 @@ scan_translation_unit (cpp_reader *pfile)\n \t      && do_line_adjustments\n \t      && !in_pragma)\n \t    {\n-\t      line_marker_emitted = do_line_change (pfile, token, loc, false);\n+\t      do_line_change (pfile, token, loc, false);\n \t      putc (' ', print.outf);\n \t    }\n \t  else if (print.source->flags & PREV_WHITE\n@@ -220,7 +216,7 @@ scan_translation_unit (cpp_reader *pfile)\n \t  if (src_line != print.src_line\n \t      && do_line_adjustments\n \t      && !in_pragma)\n-\t    line_marker_emitted = do_line_change (pfile, token, loc, false);\n+\t    do_line_change (pfile, token, loc, false);\n \t  putc (' ', print.outf);\n \t}\n \n@@ -232,7 +228,7 @@ scan_translation_unit (cpp_reader *pfile)\n \t  const char *space;\n \t  const char *name;\n \n-\t  line_marker_emitted = maybe_print_line (token->src_loc);\n+\t  maybe_print_line (token->src_loc);\n \t  fputs (\"#pragma \", print.outf);\n \t  c_pp_lookup_pragma (token->val.pragma, &space, &name);\n \t  if (space)\n@@ -252,18 +248,9 @@ scan_translation_unit (cpp_reader *pfile)\n \t  if (cpp_get_options (parse_in)->debug)\n \t      linemap_dump_location (line_table, token->src_loc,\n \t\t\t\t     print.outf);\n-\n-\t  if (!line_marker_emitted\n-\t      && print.prev_was_system_token != !!in_system_header_at(loc))\n-\t    /* The system-ness of this token is different from the one\n-\t       of the previous token.  Let's emit a line change to\n-\t       mark the new system-ness before we emit the token.  */\n-\t    line_marker_emitted = do_line_change (pfile, token, loc, false);\n \t  cpp_output_token (token, print.outf);\n-\t  line_marker_emitted = false;\n \t}\n \n-      print.prev_was_system_token = !!in_system_header_at(loc);\n       /* CPP_COMMENT tokens and raw-string literal tokens can\n \t have embedded new-line characters.  Rather than enumerating\n \t all the possible token types just check if token uses\n@@ -288,7 +275,7 @@ scan_translation_unit_directives_only (cpp_reader *pfile)\n   struct _cpp_dir_only_callbacks cb;\n \n   cb.print_lines = print_lines_directives_only;\n-  cb.maybe_print_line = (void (*) (source_location)) maybe_print_line;\n+  cb.maybe_print_line = maybe_print_line;\n \n   _cpp_preprocess_dir_only (pfile, &cb);\n }\n@@ -319,13 +306,11 @@ scan_translation_unit_trad (cpp_reader *pfile)\n \n /* If the token read on logical line LINE needs to be output on a\n    different line to the current one, output the required newlines or\n-   a line marker.  If a line marker was emitted, return TRUE otherwise\n-   return FALSE.  */\n+   a line marker, and return 1.  Otherwise return 0.  */\n \n-static bool\n+static void\n maybe_print_line_1 (source_location src_loc, FILE *stream)\n {\n-  bool emitted_line_marker = false;\n   int src_line = LOCATION_LINE (src_loc);\n   const char *src_file = LOCATION_FILE (src_loc);\n \n@@ -349,34 +334,29 @@ maybe_print_line_1 (source_location src_loc, FILE *stream)\n \t}\n     }\n   else\n-    emitted_line_marker = print_line_1 (src_loc, \"\", stream);\n+    print_line_1 (src_loc, \"\", stream);\n \n-  return emitted_line_marker;\n }\n \n /* If the token read on logical line LINE needs to be output on a\n    different line to the current one, output the required newlines or\n-   a line marker.  If a line marker was emitted, return TRUE otherwise\n-   return FALSE.  */\n+   a line marker, and return 1.  Otherwise return 0.  */\n \n-static bool\n+static void\n maybe_print_line (source_location src_loc)\n {\n   if (cpp_get_options (parse_in)->debug)\n     linemap_dump_location (line_table, src_loc,\n \t\t\t   print.outf);\n-  return maybe_print_line_1 (src_loc, print.outf);\n+  maybe_print_line_1 (src_loc, print.outf);\n }\n \n /* Output a line marker for logical line LINE.  Special flags are \"1\"\n-   or \"2\" indicating entering or leaving a file.  If the line marker\n-   was effectively emitted, return TRUE otherwise return FALSE.  */\n+   or \"2\" indicating entering or leaving a file.  */\n \n-static bool\n+static void\n print_line_1 (source_location src_loc, const char *special_flags, FILE *stream)\n {\n-  bool emitted_line_marker = false;\n-\n   /* End any previous line of text.  */\n   if (print.printed)\n     putc ('\\n', stream);\n@@ -411,39 +391,33 @@ print_line_1 (source_location src_loc, const char *special_flags, FILE *stream)\n \tfputs (\" 3\", stream);\n \n       putc ('\\n', stream);\n-      emitted_line_marker = true;\n     }\n-\n-  return emitted_line_marker;\n }\n \n /* Output a line marker for logical line LINE.  Special flags are \"1\"\n-   or \"2\" indicating entering or leaving a file.  Return TRUE if a\n-   line marker was effectively emitted, FALSE otherwise.  */\n+   or \"2\" indicating entering or leaving a file.  */\n \n-static bool\n+static void\n print_line (source_location src_loc, const char *special_flags)\n {\n     if (cpp_get_options (parse_in)->debug)\n       linemap_dump_location (line_table, src_loc,\n \t\t\t     print.outf);\n-    return print_line_1 (src_loc, special_flags, print.outf);\n+    print_line_1 (src_loc, special_flags, print.outf);\n }\n \n-/* Helper function for cb_line_change and scan_translation_unit.\n-   Return TRUE if a line marker is emitted, FALSE otherwise.  */\n-static bool\n+/* Helper function for cb_line_change and scan_translation_unit.  */\n+static void\n do_line_change (cpp_reader *pfile, const cpp_token *token,\n \t\tsource_location src_loc, int parsing_args)\n {\n-  bool emitted_line_marker = false;\n   if (define_queue || undef_queue)\n     dump_queued_macros (pfile);\n \n   if (token->type == CPP_EOF || parsing_args)\n-    return false;\n+    return;\n \n-  emitted_line_marker = maybe_print_line (src_loc);\n+  maybe_print_line (src_loc);\n   print.prev = 0;\n   print.source = 0;\n \n@@ -460,8 +434,6 @@ do_line_change (cpp_reader *pfile, const cpp_token *token,\n       while (-- spaces >= 0)\n \tputc (' ', print.outf);\n     }\n-\n-  return emitted_line_marker;\n }\n \n /* Called when a line of output is started.  TOKEN is the first token"}, {"sha": "e0133116b91c65febb8672a27f7250a2c3c2c571", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14b1760ca7edbe72f2ed43df5fb4f1bc6ea567e5", "patch": "@@ -13,11 +13,6 @@\n \n \t* g++.dg/cpp1y/pr59867.C: Fix target selector.\n \n-2014-07-01  Dodji Seketeli  <dodji@redhat.com>\n-\n-\tPR preprocessor/60723\n-\t* gcc.dg/cpp/syshdr{4,5}.{c,h}: New test files.\n-\n 2014-07-01  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/Wint-conversion.c: New test."}, {"sha": "fe001d2ed0ea8234177e30b850e62179979e1693", "filename": "gcc/testsuite/gcc.dg/cpp/syshdr4.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08eedf75a2ddc851a0c46864b8f4ab71b5a456a6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08eedf75a2ddc851a0c46864b8f4ab71b5a456a6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.c?ref=08eedf75a2ddc851a0c46864b8f4ab71b5a456a6", "patch": "@@ -1,24 +0,0 @@\n-/* Contributed by Nicholas Ormrod */\n-/* Origin: PR preprocessor/60723 */\n-\n-/* This tests that multi-line macro callsites, which are defined\n-   in system headers and whose expansion contains a builtin followed\n-   by a non-builtin token, do not generate a line directive that\n-   mark the current file as being a system file, when performing\n-   non-integrated preprocessing. */\n-/* System files suppress div-by-zero warnings, so the presence of\n-   such indicates the lack of the bug.\n-\n-   { dg-do compile }\n-   { dg-options -no-integrated-cpp }  */\n-\n-#include \"syshdr4.h\"\n-FOO(\n-)\n-\n-int\n-foo()\n-{\n-  return 1 / 0; /* { dg-warning \"div-by-zero\" } */\n-  return 0;\n-}"}, {"sha": "c464f6e702a6ae84af3efac171920d916581a1d2", "filename": "gcc/testsuite/gcc.dg/cpp/syshdr4.h", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08eedf75a2ddc851a0c46864b8f4ab71b5a456a6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08eedf75a2ddc851a0c46864b8f4ab71b5a456a6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr4.h?ref=08eedf75a2ddc851a0c46864b8f4ab71b5a456a6", "patch": "@@ -1,8 +0,0 @@\n-/* Contributed by Nicholas Ormrod\n-   Origin: PR preprocessor/60723.\n-\n-   This file is to be included by the syshdr4.c file.  */\n-\n-#pragma GCC system_header\n-\n-#define FOO() int line = __LINE__ ;"}, {"sha": "42c62638d99b113c62e2d394b8e9126191234d53", "filename": "gcc/testsuite/gcc.dg/cpp/syshdr5.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08eedf75a2ddc851a0c46864b8f4ab71b5a456a6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08eedf75a2ddc851a0c46864b8f4ab71b5a456a6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.c?ref=08eedf75a2ddc851a0c46864b8f4ab71b5a456a6", "patch": "@@ -1,14 +0,0 @@\n-/* Origin: PR preprocessor/60723\n-\n-   { dg-do compile }\n-   { dg-options -no-integrated-cpp }  */\n-\n-#include \"syshdr5.h\"\n-\n-int\n-main()\n-{\n-  FOO(1/0 /*  { dg-warning \"division by zero\" }  */\n-      );\n-  return 0;\n-}"}, {"sha": "300d6c36a0399720f17f28a2f7c9b240cd42a62c", "filename": "gcc/testsuite/gcc.dg/cpp/syshdr5.h", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08eedf75a2ddc851a0c46864b8f4ab71b5a456a6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08eedf75a2ddc851a0c46864b8f4ab71b5a456a6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr5.h?ref=08eedf75a2ddc851a0c46864b8f4ab71b5a456a6", "patch": "@@ -1,6 +0,0 @@\n-/* Origin: PR preprocessor/60723\n-\n-   This header file is to be included by the syshdr5.c file.  */\n-\n-#pragma GCC system_header\n-#define FOO(A)do {int line = __LINE__ ; A;} while(0)"}]}