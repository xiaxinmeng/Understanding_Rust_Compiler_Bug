{"sha": "61a43de58cb6de7212a622060500ad0a0fd94fae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFhNDNkZTU4Y2I2ZGU3MjEyYTYyMjA2MDUwMGFkMGEwZmQ5NGZhZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-13T22:49:11Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-14T20:38:25Z"}, "message": "analyzer: fix ICE on globals with unknown size [PR93388]\n\nThis patch fixes an ICE seen when attempting to build various existing\ntests in our testsuite with -fanalyzer, including\ngcc.c-torture/compile/980816-1.c.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93388\n\t* region-model.cc (region_model::get_initial_value_for_global):\n\tFall back to returning an initial_svalue if\n\tdecl_region::get_svalue_for_initializer fails.\n\t* region.cc (decl_region::get_svalue_for_initializer): Don't\n\tattempt to create a compound_svalue if the region has an unknown\n\tsize.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93388\n\t* gcc.dg/analyzer/data-model-21.c: New test.", "tree": {"sha": "b4e27b67acbfab4227c1a16fd00460db4c98910d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4e27b67acbfab4227c1a16fd00460db4c98910d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61a43de58cb6de7212a622060500ad0a0fd94fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a43de58cb6de7212a622060500ad0a0fd94fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61a43de58cb6de7212a622060500ad0a0fd94fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a43de58cb6de7212a622060500ad0a0fd94fae/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b267cc606a48a2fef809189c35573c4a51d3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b267cc606a48a2fef809189c35573c4a51d3a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b267cc606a48a2fef809189c35573c4a51d3a5"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "06c0c8668ace29d82664d64aeebcf771978c820f", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61a43de58cb6de7212a622060500ad0a0fd94fae/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61a43de58cb6de7212a622060500ad0a0fd94fae/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=61a43de58cb6de7212a622060500ad0a0fd94fae", "patch": "@@ -1345,26 +1345,27 @@ region_model::get_initial_value_for_global (const region *reg) const\n   if ((called_from_main_p () && !DECL_EXTERNAL (decl))\n       || TREE_READONLY (decl))\n     {\n-      /* Get the initializer value for base_reg.  */\n-      const svalue *base_reg_init\n-\t= base_reg->get_svalue_for_initializer (m_mgr);\n-      gcc_assert (base_reg_init);\n-      if (reg == base_reg)\n-\treturn base_reg_init;\n-      else\n+      /* Attempt to get the initializer value for base_reg.  */\n+      if (const svalue *base_reg_init\n+\t    = base_reg->get_svalue_for_initializer (m_mgr))\n \t{\n-\t  /* Get the value for REG within base_reg_init.  */\n-\t  binding_cluster c (base_reg);\n-\t  c.bind (m_mgr->get_store_manager (), base_reg, base_reg_init,\n-\t\t  BK_direct);\n-\t  const svalue *sval\n-\t    = c.get_any_binding (m_mgr->get_store_manager (), reg);\n-\t  if (sval)\n+\t  if (reg == base_reg)\n+\t    return base_reg_init;\n+\t  else\n \t    {\n-\t      if (reg->get_type ())\n-\t\tsval = m_mgr->get_or_create_cast (reg->get_type (),\n-\t\t\t\t\t\t  sval);\n-\t      return sval;\n+\t      /* Get the value for REG within base_reg_init.  */\n+\t      binding_cluster c (base_reg);\n+\t      c.bind (m_mgr->get_store_manager (), base_reg, base_reg_init,\n+\t\t      BK_direct);\n+\t      const svalue *sval\n+\t\t= c.get_any_binding (m_mgr->get_store_manager (), reg);\n+\t      if (sval)\n+\t\t{\n+\t\t  if (reg->get_type ())\n+\t\t    sval = m_mgr->get_or_create_cast (reg->get_type (),\n+\t\t\t\t\t\t      sval);\n+\t\t  return sval;\n+\t\t}\n \t    }\n \t}\n     }"}, {"sha": "adf0e2c3ce35bbde99c9a8f73ab5b4b23ce9af4c", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61a43de58cb6de7212a622060500ad0a0fd94fae/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61a43de58cb6de7212a622060500ad0a0fd94fae/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=61a43de58cb6de7212a622060500ad0a0fd94fae", "patch": "@@ -927,20 +927,30 @@ decl_region::get_svalue_for_constructor (tree ctor,\n \n    Get an svalue for the initial value of this region at entry to\n    \"main\" (either based on DECL_INITIAL, or implicit initialization to\n-   zero.  */\n+   zero.\n+\n+   Return NULL if there is a problem.  */\n \n const svalue *\n decl_region::get_svalue_for_initializer (region_model_manager *mgr) const\n {\n   tree init = DECL_INITIAL (m_decl);\n   if (!init)\n     {\n-      /* Implicit initialization to zero; use a compound_svalue for it.  */\n+      /* Implicit initialization to zero; use a compound_svalue for it.\n+\t Doing so requires that we have a concrete binding for this region,\n+\t which can fail if we have a region with unknown size\n+\t (e.g. \"extern const char arr[];\").  */\n+      const binding_key *binding\n+\t= binding_key::make (mgr->get_store_manager (), this, BK_direct);\n+      if (binding->symbolic_p ())\n+\treturn NULL;\n+\n       binding_cluster c (this);\n       c.zero_fill_region (mgr->get_store_manager (), this);\n       return mgr->get_or_create_compound_svalue (TREE_TYPE (m_decl),\n \t\t\t\t\t\t c.get_map ());\n-     }\n+    }\n \n   if (TREE_CODE (init) == CONSTRUCTOR)\n     return get_svalue_for_constructor (init, mgr);"}, {"sha": "b952bcb9748b417b5c180d59eae7800e5d7d2130", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-21.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61a43de58cb6de7212a622060500ad0a0fd94fae/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61a43de58cb6de7212a622060500ad0a0fd94fae/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-21.c?ref=61a43de58cb6de7212a622060500ad0a0fd94fae", "patch": "@@ -0,0 +1,8 @@\n+extern const char XtStrings[];\n+\n+void unknown_fn (void *);\n+\n+void test (void)\n+{\n+  unknown_fn ((char*)&XtStrings[429]);\n+}"}]}