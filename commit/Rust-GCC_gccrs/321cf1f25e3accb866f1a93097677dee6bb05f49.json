{"sha": "321cf1f25e3accb866f1a93097677dee6bb05f49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIxY2YxZjI1ZTNhY2NiODY2ZjFhOTMwOTc2NzdkZWU2YmIwNWY0OQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-02-28T18:18:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-02-28T18:18:26Z"}, "message": "calls.c (emit_call_1): Don't use REG_ALWAYS_RETURN.\n\n\t* calls.c (emit_call_1): Don't use  REG_ALWAYS_RETURN.\n\t(emit_library_call_value_1): Don't use LCT_ALWAYS_RETURN and\n\tREG_ALWAYS_RETURN.\n\t* cfgrtl.c (need_fake_edge_p): Likewise.\n\t* combine.c (distribute_notes): Likewise.\n\t* emit-rtl.c (try_split): Likewise.\n\t* recog.c (peephole2_opimize): Likewise.\n\t* reg-notes.def (ALWAYS_RETURN): Remove.\n\t* rtl.h (LCT_ALWAYS_RETURN): Remove.\n\t* tree-cfg.c (need_fake_edge_p): Don't use ECF_ALWAYS_RETURN.\n\t* tree.h (ECF_ALWAYS_RETURN): Remove.\n\nFrom-SVN: r95690", "tree": {"sha": "6c92c8ce1deb768b15d63c2cbd9a0e5c3d96f660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c92c8ce1deb768b15d63c2cbd9a0e5c3d96f660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/321cf1f25e3accb866f1a93097677dee6bb05f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321cf1f25e3accb866f1a93097677dee6bb05f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/321cf1f25e3accb866f1a93097677dee6bb05f49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321cf1f25e3accb866f1a93097677dee6bb05f49/comments", "author": null, "committer": null, "parents": [{"sha": "ac5205bd7d71d1b9b5931ab9be3289da57d5507b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5205bd7d71d1b9b5931ab9be3289da57d5507b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5205bd7d71d1b9b5931ab9be3289da57d5507b"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "3df549439f8cbb18ce352040727d8d81a75bd02d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=321cf1f25e3accb866f1a93097677dee6bb05f49", "patch": "@@ -1,3 +1,17 @@\n+2005-02-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* calls.c (emit_call_1): Don't use  REG_ALWAYS_RETURN.\n+\t(emit_library_call_value_1): Don't use LCT_ALWAYS_RETURN and\n+\tREG_ALWAYS_RETURN.\n+\t* cfgrtl.c (need_fake_edge_p): Likewise.\n+\t* combine.c (distribute_notes): Likewise.\n+\t* emit-rtl.c (try_split): Likewise.\n+\t* recog.c (peephole2_opimize): Likewise.\n+\t* reg-notes.def (ALWAYS_RETURN): Remove.\n+\t* rtl.h (LCT_ALWAYS_RETURN): Remove.\n+\t* tree-cfg.c (need_fake_edge_p): Don't use ECF_ALWAYS_RETURN.\n+\t* tree.h (ECF_ALWAYS_RETURN): Remove.\n+\n 2005-02-28  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/19874"}, {"sha": "c84c903c3326f6b4620a18ac07a08768887d860d", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=321cf1f25e3accb866f1a93097677dee6bb05f49", "patch": "@@ -395,9 +395,6 @@ emit_call_1 (rtx funexp, tree fntree, tree fndecl ATTRIBUTE_UNUSED,\n   if (ecf_flags & ECF_NORETURN)\n     REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_NORETURN, const0_rtx,\n \t\t\t\t\t       REG_NOTES (call_insn));\n-  if (ecf_flags & ECF_ALWAYS_RETURN)\n-    REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_ALWAYS_RETURN, const0_rtx,\n-\t\t\t\t\t       REG_NOTES (call_insn));\n \n   if (ecf_flags & ECF_RETURNS_TWICE)\n     {\n@@ -3234,9 +3231,6 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n     case LCT_THROW:\n       flags = ECF_NORETURN;\n       break;\n-    case LCT_ALWAYS_RETURN:\n-      flags = ECF_ALWAYS_RETURN;\n-      break;\n     case LCT_RETURNS_TWICE:\n       flags = ECF_RETURNS_TWICE;\n       break;"}, {"sha": "1b4eb45417f4fd1c664f9bce4da2333198964ae1", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=321cf1f25e3accb866f1a93097677dee6bb05f49", "patch": "@@ -2892,7 +2892,6 @@ need_fake_edge_p (rtx insn)\n   if ((CALL_P (insn)\n        && !SIBLING_CALL_P (insn)\n        && !find_reg_note (insn, REG_NORETURN, NULL)\n-       && !find_reg_note (insn, REG_ALWAYS_RETURN, NULL)\n        && !CONST_OR_PURE_CALL_P (insn)))\n     return true;\n "}, {"sha": "5d34dfa83f5c34ef30f7729858579d1cf48ac966", "filename": "gcc/combine.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=321cf1f25e3accb866f1a93097677dee6bb05f49", "patch": "@@ -11886,7 +11886,6 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2)\n \t    }\n \t  break;\n \n-\tcase REG_ALWAYS_RETURN:\n \tcase REG_NORETURN:\n \tcase REG_SETJMP:\n \t  /* These notes must remain with the call.  It should not be"}, {"sha": "137f0b7d383594fc272e0211309d6cf7f1efa2a1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=321cf1f25e3accb866f1a93097677dee6bb05f49", "patch": "@@ -3206,7 +3206,6 @@ try_split (rtx pat, rtx trial, int last)\n \n \tcase REG_NORETURN:\n \tcase REG_SETJMP:\n-\tcase REG_ALWAYS_RETURN:\n \t  insn = insn_last;\n \t  while (insn != NULL_RTX)\n \t    {"}, {"sha": "1c0e27e27b348de72cd3977cc4784cdab377b764", "filename": "gcc/recog.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=321cf1f25e3accb866f1a93097677dee6bb05f49", "patch": "@@ -3070,7 +3070,6 @@ peephole2_optimize (FILE *dump_file ATTRIBUTE_UNUSED)\n \t\t\t  {\n \t\t\t  case REG_NORETURN:\n \t\t\t  case REG_SETJMP:\n-\t\t\t  case REG_ALWAYS_RETURN:\n \t\t\t    REG_NOTES (new_insn)\n \t\t\t      = gen_rtx_EXPR_LIST (REG_NOTE_KIND (note),\n \t\t\t\t\t\t   XEXP (note, 0),"}, {"sha": "16124be7795ec1e31e27eea3a92520a9e59bec76", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=321cf1f25e3accb866f1a93097677dee6bb05f49", "patch": "@@ -167,6 +167,3 @@ REG_NOTE (CROSSING_JUMP)\n /* This kind of note is generated at each to `setjmp', and similar\n    functions that can return twice.  */\n REG_NOTE (SETJMP)\n-\n-/* Indicate calls that always returns.  */\n-REG_NOTE (ALWAYS_RETURN)"}, {"sha": "9042e03729f83980deb2e78b16f9d7c44e93b325", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=321cf1f25e3accb866f1a93097677dee6bb05f49", "patch": "@@ -2099,8 +2099,7 @@ enum libcall_type\n   LCT_PURE_MAKE_BLOCK = 4,\n   LCT_NORETURN = 5,\n   LCT_THROW = 6,\n-  LCT_ALWAYS_RETURN = 7,\n-  LCT_RETURNS_TWICE = 8\n+  LCT_RETURNS_TWICE = 7\n };\n \n extern void emit_library_call (rtx, enum libcall_type, enum machine_mode, int,"}, {"sha": "2ebc595624ed7f693a419e507d318dfcfba17a22", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=321cf1f25e3accb866f1a93097677dee6bb05f49", "patch": "@@ -5327,15 +5327,15 @@ need_fake_edge_p (tree t)\n   tree call;\n \n   /* NORETURN and LONGJMP calls already have an edge to exit.\n-     CONST, PURE and ALWAYS_RETURN calls do not need one.\n+     CONST and PURE calls do not need one.\n      We don't currently check for CONST and PURE here, although\n      it would be a good idea, because those attributes are\n      figured out from the RTL in mark_constant_function, and\n      the counter incrementation code from -fprofile-arcs\n      leads to different results from -fbranch-probabilities.  */\n   call = get_call_expr_in (t);\n   if (call\n-      && !(call_expr_flags (call) & (ECF_NORETURN | ECF_ALWAYS_RETURN)))\n+      && !(call_expr_flags (call) & ECF_NORETURN))\n     return true;\n \n   if (TREE_CODE (t) == ASM_EXPR"}, {"sha": "cb807eba4be7feef879ea26a6cf55f5920a9dce7", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321cf1f25e3accb866f1a93097677dee6bb05f49/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=321cf1f25e3accb866f1a93097677dee6bb05f49", "patch": "@@ -3688,10 +3688,8 @@ extern rtx emit_line_note (location_t);\n /* Nonzero if this is a call to a function that returns with the stack\n    pointer depressed.  */\n #define ECF_SP_DEPRESSED\t256\n-/* Nonzero if this call is known to always return.  */\n-#define ECF_ALWAYS_RETURN\t512\n /* Create libcall block around the call.  */\n-#define ECF_LIBCALL_BLOCK\t1024\n+#define ECF_LIBCALL_BLOCK\t512\n \n extern int flags_from_decl_or_type (tree);\n extern int call_expr_flags (tree);"}]}