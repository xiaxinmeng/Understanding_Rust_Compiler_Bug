{"sha": "53756e1a01c7ac93e8467f577f50c491ca4b2525", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM3NTZlMWEwMWM3YWM5M2U4NDY3ZjU3N2Y1MGM0OTFjYTRiMjUyNQ==", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-08-07T11:15:18Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-08-12T14:52:22Z"}, "message": "lexer: Add function to get original filename\n\nWhen parsing an external module, it is important to be able to access\nthe original \"including\" file in order to resolve the path of the\ndesired module. Take the following example\n\n```rust\n// /project/src/foo.rs\nmod bar; /* External module */\n```\n\nThe file which contains the `bar` module could be located at\n`/project/src/bar.rs`, or at `/project/src/foo/bar.rs` (careful, this isn't an exhaustive list\nof all possible cases). We must therefore be able to access the\n`/project/src` directory in order to find valid candidates for `mod\nbar`", "tree": {"sha": "6258a77e9c1b17f8bc7a3a8705a1918ac2850ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6258a77e9c1b17f8bc7a3a8705a1918ac2850ce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53756e1a01c7ac93e8467f577f50c491ca4b2525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53756e1a01c7ac93e8467f577f50c491ca4b2525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53756e1a01c7ac93e8467f577f50c491ca4b2525", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53756e1a01c7ac93e8467f577f50c491ca4b2525/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7be0232c686a75f98b2ca3c27f7de3139b8999c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be0232c686a75f98b2ca3c27f7de3139b8999c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be0232c686a75f98b2ca3c27f7de3139b8999c6"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "9e57f5a8e3a64fdff2e075b13a9f6a9890c51a98", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53756e1a01c7ac93e8467f577f50c491ca4b2525/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53756e1a01c7ac93e8467f577f50c491ca4b2525/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=53756e1a01c7ac93e8467f577f50c491ca4b2525", "patch": "@@ -977,6 +977,8 @@ class Module : public VisItem\n   Location locus;\n   ModuleKind kind;\n \n+  // Name of the file including the module\n+  std::string outer_filename;\n   // bool has_inner_attrs;\n   std::vector<Attribute> inner_attrs;\n   // bool has_items;\n@@ -998,10 +1000,11 @@ class Module : public VisItem\n \n   // Unloaded module constructor\n   Module (Identifier module_name, Visibility visibility,\n-\t  std::vector<Attribute> outer_attrs, Location locus)\n+\t  std::vector<Attribute> outer_attrs, Location locus,\n+\t  std::string outer_filename)\n     : VisItem (std::move (visibility), std::move (outer_attrs)),\n       module_name (module_name), locus (locus), kind (ModuleKind::UNLOADED),\n-      inner_attrs (std::vector<Attribute> ()),\n+      outer_filename (outer_filename), inner_attrs (std::vector<Attribute> ()),\n       items (std::vector<std::unique_ptr<Item>> ())\n   {}\n \n@@ -1013,7 +1016,8 @@ class Module : public VisItem\n \t  std::vector<Attribute> outer_attrs = std::vector<Attribute> ())\n     : VisItem (std::move (visibility), std::move (outer_attrs)),\n       module_name (name), locus (locus), kind (ModuleKind::LOADED),\n-      inner_attrs (std::move (inner_attrs)), items (std::move (items))\n+      outer_filename (std::string ()), inner_attrs (std::move (inner_attrs)),\n+      items (std::move (items))\n   {}\n \n   // Copy constructor with vector clone"}, {"sha": "1b37a9c4705d4b788477a5a41b4f1bc4daac11d6", "filename": "gcc/rust/lex/rust-lex.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53756e1a01c7ac93e8467f577f50c491ca4b2525/gcc%2Frust%2Flex%2Frust-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53756e1a01c7ac93e8467f577f50c491ca4b2525/gcc%2Frust%2Flex%2Frust-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.h?ref=53756e1a01c7ac93e8467f577f50c491ca4b2525", "patch": "@@ -14,6 +14,7 @@ struct RAIIFile\n {\n private:\n   FILE *file;\n+  const char *filename;\n \n   void close ()\n   {\n@@ -22,7 +23,7 @@ struct RAIIFile\n   }\n \n public:\n-  RAIIFile (const char *filename)\n+  RAIIFile (const char *filename) : filename (filename)\n   {\n     if (strcmp (filename, \"-\") == 0)\n       file = stdin;\n@@ -47,6 +48,7 @@ struct RAIIFile\n   ~RAIIFile () { close (); }\n \n   FILE *get_raw () { return file; }\n+  const char *get_filename () { return filename; }\n };\n \n class Lexer\n@@ -136,6 +138,7 @@ class Lexer\n   void split_current_token (TokenId new_left, TokenId new_right);\n \n   Linemap *get_line_map () { return line_map; }\n+  std::string get_filename () { return std::string (input.get_filename ()); }\n \n private:\n   // File for use as input."}, {"sha": "0e50168ebda88b9e7b4f6c6357c8c3d880a664f1", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53756e1a01c7ac93e8467f577f50c491ca4b2525/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53756e1a01c7ac93e8467f577f50c491ca4b2525/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=53756e1a01c7ac93e8467f577f50c491ca4b2525", "patch": "@@ -2103,8 +2103,8 @@ Parser<ManagedTokenSource>::parse_module (AST::Visibility vis,\n \n       return std::unique_ptr<AST::Module> (\n \tnew AST::Module (std::move (name), std::move (vis),\n-\t\t\t std::move (outer_attrs),\n-\t\t\t locus)); // module name?\n+\t\t\t std::move (outer_attrs), locus,\n+\t\t\t lexer.get_filename ()));\n       case LEFT_CURLY: {\n \tlexer.skip_token ();\n "}]}