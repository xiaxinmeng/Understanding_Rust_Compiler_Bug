{"sha": "e4394af56897939d2f47827330f75838fe038b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzOTRhZjU2ODk3OTM5ZDJmNDc4MjczMzBmNzU4MzhmZTAzOGIyMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-09-07T20:17:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-09-07T20:17:43Z"}, "message": "pt.c (num_template_headers_for_class): Rework per the code inline in cp_parser_check_declarator_template_parameters.\n\n2012-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* pt.c (num_template_headers_for_class): Rework per the code\n\tinline in cp_parser_check_declarator_template_parameters.\n\t* parser.c (cp_parser_check_declarator_template_parameters):\n\tUse num_template_headers_for_class.\n\nFrom-SVN: r191082", "tree": {"sha": "e9060a220ebee364879e45a50e48228fa0c33ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9060a220ebee364879e45a50e48228fa0c33ab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4394af56897939d2f47827330f75838fe038b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4394af56897939d2f47827330f75838fe038b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4394af56897939d2f47827330f75838fe038b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4394af56897939d2f47827330f75838fe038b23/comments", "author": null, "committer": null, "parents": [{"sha": "c294eb47b25bcf24bacfbcdecedda5651124f54c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c294eb47b25bcf24bacfbcdecedda5651124f54c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c294eb47b25bcf24bacfbcdecedda5651124f54c"}], "stats": {"total": 90, "additions": 33, "deletions": 57}, "files": [{"sha": "0fea1a664d3aa2751469dd73ccb943f7564bd65d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4394af56897939d2f47827330f75838fe038b23/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4394af56897939d2f47827330f75838fe038b23/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e4394af56897939d2f47827330f75838fe038b23", "patch": "@@ -1,3 +1,10 @@\n+2012-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* pt.c (num_template_headers_for_class): Rework per the code\n+\tinline in cp_parser_check_declarator_template_parameters.\n+\t* parser.c (cp_parser_check_declarator_template_parameters):\n+\tUse num_template_headers_for_class.\n+\n 2012-09-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/54341"}, {"sha": "327ad0b2c7db1310f285897759cf7ec594de1520", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 43, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4394af56897939d2f47827330f75838fe038b23/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4394af56897939d2f47827330f75838fe038b23/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e4394af56897939d2f47827330f75838fe038b23", "patch": "@@ -20670,54 +20670,24 @@ cp_parser_check_declarator_template_parameters (cp_parser* parser,\n \t\t\t\t\t\tcp_declarator *declarator,\n \t\t\t\t\t\tlocation_t declarator_location)\n {\n-  unsigned num_templates;\n-\n-  /* We haven't seen any classes that involve template parameters yet.  */\n-  num_templates = 0;\n-\n   switch (declarator->kind)\n     {\n     case cdk_id:\n-      if (declarator->u.id.qualifying_scope)\n-\t{\n-\t  tree scope;\n-\n-\t  scope = declarator->u.id.qualifying_scope;\n-\n-\t  while (scope && CLASS_TYPE_P (scope))\n-\t    {\n-\t      /* You're supposed to have one `template <...>'\n-\t\t for every template class, but you don't need one\n-\t\t for a full specialization.  For example:\n-\n-\t\t template <class T> struct S{};\n-\t\t template <> struct S<int> { void f(); };\n-\t\t void S<int>::f () {}\n-\n-\t\t is correct; there shouldn't be a `template <>' for\n-\t\t the definition of `S<int>::f'.  */\n-\t      if (!CLASSTYPE_TEMPLATE_INFO (scope))\n-\t\t/* If SCOPE does not have template information of any\n-\t\t   kind, then it is not a template, nor is it nested\n-\t\t   within a template.  */\n-\t\tbreak;\n-\t      if (explicit_class_specialization_p (scope))\n-\t\tbreak;\n-\t      if (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (scope)))\n-\t\t++num_templates;\n-\n-\t      scope = TYPE_CONTEXT (scope);\n-\t    }\n-\t}\n-      else if (TREE_CODE (declarator->u.id.unqualified_name)\n-\t       == TEMPLATE_ID_EXPR)\n-\t/* If the DECLARATOR has the form `X<y>' then it uses one\n-\t   additional level of template parameters.  */\n-\t++num_templates;\n+      {\n+\tunsigned num_templates = 0;\n+\ttree scope = declarator->u.id.qualifying_scope;\n \n-      return cp_parser_check_template_parameters \n-\t(parser, num_templates, declarator_location, declarator);\n+\tif (scope)\n+\t  num_templates = num_template_headers_for_class (scope);\n+\telse if (TREE_CODE (declarator->u.id.unqualified_name)\n+\t\t == TEMPLATE_ID_EXPR)\n+\t  /* If the DECLARATOR has the form `X<y>' then it uses one\n+\t     additional level of template parameters.  */\n+\t  ++num_templates;\n \n+\treturn cp_parser_check_template_parameters \n+\t  (parser, num_templates, declarator_location, declarator);\n+      }\n \n     case cdk_function:\n     case cdk_array:"}, {"sha": "cde83f2d9539e99b3311d53c67619bdce0824325", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4394af56897939d2f47827330f75838fe038b23/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4394af56897939d2f47827330f75838fe038b23/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e4394af56897939d2f47827330f75838fe038b23", "patch": "@@ -2214,9 +2214,9 @@ copy_default_args_to_explicit_spec (tree decl)\n int\n num_template_headers_for_class (tree ctype)\n {\n-  int template_count = 0;\n-  tree t = ctype;\n-  while (t != NULL_TREE && CLASS_TYPE_P (t))\n+  int num_templates = 0;\n+\n+  while (ctype && CLASS_TYPE_P (ctype))\n     {\n       /* You're supposed to have one `template <...>' for every\n \t template class, but you don't need one for a full\n@@ -2228,21 +2228,20 @@ num_template_headers_for_class (tree ctype)\n \n \t is correct; there shouldn't be a `template <>' for the\n \t definition of `S<int>::f'.  */\n-      if (CLASSTYPE_TEMPLATE_SPECIALIZATION (t)\n-\t  && !any_dependent_template_arguments_p (CLASSTYPE_TI_ARGS (t)))\n-\t/* T is an explicit (not partial) specialization.  All\n-\t   containing classes must therefore also be explicitly\n-\t   specialized.  */\n+      if (!CLASSTYPE_TEMPLATE_INFO (ctype))\n+\t/* If CTYPE does not have template information of any\n+\t   kind,  then it is not a template, nor is it nested\n+\t   within a template.  */\n+\tbreak;\n+      if (explicit_class_specialization_p (ctype))\n \tbreak;\n-      if ((CLASSTYPE_USE_TEMPLATE (t) || CLASSTYPE_IS_TEMPLATE (t))\n-\t  && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (t)))\n-\ttemplate_count += 1;\n+      if (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (ctype)))\n+\t++num_templates;\n \n-      t = TYPE_MAIN_DECL (t);\n-      t = DECL_CONTEXT (t);\n+      ctype = TYPE_CONTEXT (ctype);\n     }\n \n-  return template_count;\n+  return num_templates;\n }\n \n /* Do a simple sanity check on the template headers that precede the"}]}