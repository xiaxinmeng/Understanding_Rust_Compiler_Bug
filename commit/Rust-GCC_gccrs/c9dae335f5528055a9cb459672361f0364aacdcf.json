{"sha": "c9dae335f5528055a9cb459672361f0364aacdcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlkYWUzMzVmNTUyODA1NWE5Y2I0NTk2NzIzNjFmMDM2NGFhY2RjZg==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2014-06-18T15:40:31Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2014-06-18T15:40:31Z"}, "message": "bpabi.S (__aeabi_uldivmod): Optimise stack pointer manipulation.\n\n2014-06-18  Charles Baylis  <charles.baylis@linaro.org>\n\n\t* config/arm/bpabi.S (__aeabi_uldivmod): Optimise stack pointer\n\tmanipulation.\n\nFrom-SVN: r211791", "tree": {"sha": "675a28f7e4eabbb26e68bd7489d41df322cb6bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/675a28f7e4eabbb26e68bd7489d41df322cb6bb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9dae335f5528055a9cb459672361f0364aacdcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9dae335f5528055a9cb459672361f0364aacdcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9dae335f5528055a9cb459672361f0364aacdcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9dae335f5528055a9cb459672361f0364aacdcf/comments", "author": null, "committer": null, "parents": [{"sha": "6857b807c29c22acd987c33fae21aa88d7aa19db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6857b807c29c22acd987c33fae21aa88d7aa19db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6857b807c29c22acd987c33fae21aa88d7aa19db"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "bc9c6a97ec43f557d9f2fcb294a458b699e482d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9dae335f5528055a9cb459672361f0364aacdcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9dae335f5528055a9cb459672361f0364aacdcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9dae335f5528055a9cb459672361f0364aacdcf", "patch": "@@ -1,3 +1,8 @@\n+2014-06-18  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\t* config/arm/bpabi.S (__aeabi_uldivmod): Optimise stack pointer\n+\tmanipulation.\n+\n 2014-06-18  Charles Baylis  <charles.baylis@linaro.org>\n \n \t* config/arm/bpabi.S (__aeabi_uldivmod, __aeabi_ldivmod): Add comment"}, {"sha": "67246b0f095beefda7f06360f1e64fd3ee0caaf9", "filename": "libgcc/config/arm/bpabi.S", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9dae335f5528055a9cb459672361f0364aacdcf/libgcc%2Fconfig%2Farm%2Fbpabi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9dae335f5528055a9cb459672361f0364aacdcf/libgcc%2Fconfig%2Farm%2Fbpabi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fbpabi.S?ref=c9dae335f5528055a9cb459672361f0364aacdcf", "patch": "@@ -120,6 +120,46 @@ ARM_FUNC_START aeabi_ulcmp\n #endif\n .endm\n \n+/* we can use STRD/LDRD on v5TE and later, and any Thumb-2 architecture. */\n+#if (defined(__ARM_EABI__)                                            \\\n+     && (defined(__thumb2__)                                          \\\n+         || (__ARM_ARCH >= 5 && defined(__TARGET_FEATURE_DSP))))\n+#define CAN_USE_LDRD 1\n+#else\n+#define CAN_USE_LDRD 0\n+#endif\n+\n+/* set up stack from for call to __udivmoddi4. At the end of the macro the\n+   stack is arranged as follows:\n+\t\tsp+12\t/ space for remainder\n+\t\tsp+8\t\\ (written by __udivmoddi4)\n+\t\tsp+4\tlr\n+\t\tsp+0\tsp+8 [rp (remainder pointer) argument for __udivmoddi4]\n+\n+ */\n+.macro push_for_divide fname\n+#if defined(__thumb2__) && CAN_USE_LDRD\n+\tsub\tip, sp, #8\n+\tstrd\tip, lr, [sp, #-16]!\n+#else\n+\tsub\tsp, sp, #8\n+\tdo_push\t{sp, lr}\n+#endif\n+98:\tcfi_push\t98b - \\fname, 0xe, -0xc, 0x10\n+.endm\n+\n+/* restore stack */\n+.macro pop_for_divide\n+\tldr\tlr, [sp, #4]\n+#if CAN_USE_LDRD\n+\tldrd\tr2, r3, [sp, #8]\n+\tadd\tsp, sp, #16\n+#else\n+\tadd\tsp, sp, #8\n+\tdo_pop\t{r2, r3}\n+#endif\n+.endm\n+\n #ifdef L_aeabi_ldivmod\n \n /* Perform 64 bit signed division.\n@@ -165,18 +205,10 @@ ARM_FUNC_START aeabi_uldivmod\n \tcfi_start\t__aeabi_uldivmod, LSYM(Lend_aeabi_uldivmod)\n \ttest_div_by_zero\tunsigned\n \n-\tsub\tsp, sp, #8\n-#if defined(__thumb2__)\n-\tmov\tip, sp\n-\tpush\t{ip, lr}\n-#else\n-\tdo_push\t{sp, lr}\n-#endif\n-98:\tcfi_push 98b - __aeabi_uldivmod, 0xe, -0xc, 0x10\n+\tpush_for_divide\t__aeabi_uldivmod\n+\t/* arguments in (r0:r1), (r2:r3) and *sp */\n \tbl\tSYM(__gnu_uldivmod_helper) __PLT__\n-\tldr\tlr, [sp, #4]\n-\tadd\tsp, sp, #8\n-\tdo_pop\t{r2, r3}\n+\tpop_for_divide\n \tRET\n \tcfi_end\tLSYM(Lend_aeabi_uldivmod)\n "}]}