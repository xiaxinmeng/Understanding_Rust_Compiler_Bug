{"sha": "36051875168db600c103277499b092acb4755eab", "node_id": "C_kwDOANBUbNoAKDM2MDUxODc1MTY4ZGI2MDBjMTAzMjc3NDk5YjA5MmFjYjQ3NTVlYWI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-10-23T09:06:06Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-10-23T09:06:06Z"}, "message": "x86_64: Add insn patterns for V1TI mode logic operations.\n\nOn x86_64, V1TI mode holds a 128-bit integer value in a (vector) SSE\nregister (where regular TI mode uses a pair of 64-bit general purpose\nscalar registers).  This patch improves the implementation of AND, IOR,\nXOR and NOT on these values.\n\nThe benefit is demonstrated by the following simple test program:\n\ntypedef unsigned __int128 v1ti __attribute__ ((__vector_size__ (16)));\nv1ti and(v1ti x, v1ti y) { return x & y; }\nv1ti ior(v1ti x, v1ti y) { return x | y; }\nv1ti xor(v1ti x, v1ti y) { return x ^ y; }\nv1ti not(v1ti x) { return ~x; }\n\nFor which GCC currently generates the rather large:\n\nand:    movdqa  %xmm0, %xmm2\n        movq    %xmm1, %rdx\n        movq    %xmm0, %rax\n        andq    %rdx, %rax\n        movhlps %xmm2, %xmm3\n        movhlps %xmm1, %xmm4\n        movq    %rax, %xmm0\n        movq    %xmm4, %rdx\n        movq    %xmm3, %rax\n        andq    %rdx, %rax\n        movq    %rax, %xmm5\n        punpcklqdq      %xmm5, %xmm0\n        ret\n\nior:\tmovdqa  %xmm0, %xmm2\n        movq    %xmm1, %rdx\n        movq    %xmm0, %rax\n        orq     %rdx, %rax\n        movhlps %xmm2, %xmm3\n        movhlps %xmm1, %xmm4\n        movq    %rax, %xmm0\n        movq    %xmm4, %rdx\n        movq    %xmm3, %rax\n        orq     %rdx, %rax\n        movq    %rax, %xmm5\n        punpcklqdq      %xmm5, %xmm0\n        ret\n\nxor:\tmovdqa  %xmm0, %xmm2\n        movq    %xmm1, %rdx\n        movq    %xmm0, %rax\n        xorq    %rdx, %rax\n        movhlps %xmm2, %xmm3\n        movhlps %xmm1, %xmm4\n        movq    %rax, %xmm0\n        movq    %xmm4, %rdx\n        movq    %xmm3, %rax\n        xorq    %rdx, %rax\n        movq    %rax, %xmm5\n        punpcklqdq      %xmm5, %xmm0\n        ret\n\nnot:\tmovdqa  %xmm0, %xmm1\n        movq    %xmm0, %rax\n        notq    %rax\n        movhlps %xmm1, %xmm2\n        movq    %rax, %xmm0\n        movq    %xmm2, %rax\n        notq    %rax\n        movq    %rax, %xmm3\n        punpcklqdq      %xmm3, %xmm0\n        ret\n\nwith this patch we now generate the much more efficient:\n\nand:\tpand    %xmm1, %xmm0\n        ret\n\nior:\tpor     %xmm1, %xmm0\n        ret\n\nxor:\tpxor    %xmm1, %xmm0\n        ret\n\nnot:\tpcmpeqd %xmm1, %xmm1\n        pxor    %xmm1, %xmm0\n        ret\n\nFor my first few attempts at this patch I tried adding V1TI to the\nexisting VI and VI12_AVX_512F mode iterators, but these then have\ndependencies on other iterators (and attributes), and so on until\neverything ties itself into a knot, as V1TI mode isn't really a\nfirst-class vector mode on x86_64.  Hence I ultimately opted to use\nsimple stand-alone patterns (as used by the existing TF mode support).\n\n2021-10-23  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/sse.md (<any_logic>v1ti3): New define_insn to\n\timplement V1TImode AND, IOR and XOR on TARGET_SSE2 (and above).\n\t(one_cmplv1ti2): New define expand.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/sse2-v1ti-logic.c: New test case.\n\t* gcc.target/i386/sse2-v1ti-logic-2.c: New test case.", "tree": {"sha": "08a72b36ed6a93d8119c805f51bfa5393607eafe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08a72b36ed6a93d8119c805f51bfa5393607eafe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36051875168db600c103277499b092acb4755eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36051875168db600c103277499b092acb4755eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36051875168db600c103277499b092acb4755eab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36051875168db600c103277499b092acb4755eab/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "693abdb66aba25f3fb25c3cd8d65dbb64ecd37a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693abdb66aba25f3fb25c3cd8d65dbb64ecd37a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693abdb66aba25f3fb25c3cd8d65dbb64ecd37a0"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "f37c5c0e7062151843c44084e51a3e452d299d9c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36051875168db600c103277499b092acb4755eab/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36051875168db600c103277499b092acb4755eab/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=36051875168db600c103277499b092acb4755eab", "patch": "@@ -16268,6 +16268,31 @@\n \t      ]\n \t      (const_string \"<sseinsnmode>\")))])\n \n+(define_insn \"<code>v1ti3\"\n+  [(set (match_operand:V1TI 0 \"register_operand\" \"=x,x,v\")\n+\t(any_logic:V1TI\n+\t  (match_operand:V1TI 1 \"register_operand\" \"%0,x,v\")\n+\t  (match_operand:V1TI 2 \"vector_operand\" \"xBm,xm,vm\")))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   p<logic>\\t{%2, %0|%0, %2}\n+   vp<logic>\\t{%2, %1, %0|%0, %1, %2}\n+   vp<logic>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx,avx\")\n+   (set_attr \"prefix\" \"orig,vex,evex\")\n+   (set_attr \"prefix_data16\" \"1,*,*\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_expand \"one_cmplv1ti2\"\n+  [(set (match_operand:V1TI 0 \"register_operand\")\n+\t(xor:V1TI (match_operand:V1TI 1 \"register_operand\")\n+\t\t  (match_dup 2)))]\n+  \"TARGET_SSE2\"\n+{\n+  operands[2] = force_reg (V1TImode, CONSTM1_RTX (V1TImode));\n+})\n+\n (define_mode_iterator AVX512ZEXTMASK\n   [(DI \"TARGET_AVX512BW\") (SI \"TARGET_AVX512BW\") HI])\n "}, {"sha": "3ec645553342e4978f1e896c0524e24538cf1132", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-logic-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36051875168db600c103277499b092acb4755eab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-logic-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36051875168db600c103277499b092acb4755eab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-logic-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-logic-2.c?ref=36051875168db600c103277499b092acb4755eab", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned __int128 v1ti __attribute__ ((__vector_size__ (16)));\n+\n+v1ti x;\n+v1ti y;\n+v1ti z;\n+\n+void and2()\n+{\n+  x &= y;\n+}\n+\n+void and3()\n+{\n+  x = y & z;\n+}\n+\n+void ior2()\n+{\n+  x |= y;\n+}\n+\n+void ior3()\n+{\n+  x = y | z;\n+}\n+\n+\n+void xor2()\n+{\n+  x ^= y;\n+}\n+\n+void xor3()\n+{\n+  x =  y ^ z;\n+}\n+\n+void not1()\n+{\n+  x = ~x;\n+}\n+\n+void not2()\n+{\n+  x = ~y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pand\" 2 } } */\n+/* { dg-final { scan-assembler-times \"por\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pxor\" 4 } } */"}, {"sha": "130a89b91c99a8562708cbd117270e856283a23e", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-logic.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36051875168db600c103277499b092acb4755eab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-logic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36051875168db600c103277499b092acb4755eab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-logic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-logic.c?ref=36051875168db600c103277499b092acb4755eab", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned __int128 v1ti __attribute__ ((__vector_size__ (16)));\n+\n+v1ti and(v1ti x, v1ti y)\n+{\n+  return x & y;\n+}\n+\n+v1ti ior(v1ti x, v1ti y)\n+{\n+  return x | y;\n+}\n+\n+v1ti xor(v1ti x, v1ti y)\n+{\n+  return x ^ y;\n+}\n+\n+v1ti not(v1ti x)\n+{\n+  return ~x;\n+}\n+\n+/* { dg-final { scan-assembler \"pand\" } } */\n+/* { dg-final { scan-assembler \"por\" } } */\n+/* { dg-final { scan-assembler-times \"pxor\" 2 } } */"}]}