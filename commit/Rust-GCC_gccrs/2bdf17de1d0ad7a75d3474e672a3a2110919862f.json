{"sha": "2bdf17de1d0ad7a75d3474e672a3a2110919862f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJkZjE3ZGUxZDBhZDdhNzVkMzQ3NGU2NzJhM2EyMTEwOTE5ODYyZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2021-08-12T07:30:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2021-08-12T07:33:31Z"}, "message": "Make -no-pie option work for native Windows\n\nBinutils 2.36/2.37 generate PIE executables by default on native Windows\n(because --dynamicbase is the default) so it makes sense to have a simple\nway to counter that and -no-pie seems appropriate, all the more so that\nit is automatically passed when building the compiler itself.\n\ngcc/\n\t* configure.ac (PE linker --disable-dynamicbase support): New check.\n\t* configure: Regenerate.\n\t* config.in: Likewise.\n\t* config/i386/mingw32.h (LINK_SPEC_DISABLE_DYNAMICBASE): New define.\n\t(LINK_SPEC): Use it.\n\t* config/i386/mingw-w64.h (LINK_SPEC_DISABLE_DYNAMICBASE): Likewise.\n\t(LINK_SPEC): Likewise.", "tree": {"sha": "b83d823081328b71715a0191454e0c5d5ed7552a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b83d823081328b71715a0191454e0c5d5ed7552a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bdf17de1d0ad7a75d3474e672a3a2110919862f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdf17de1d0ad7a75d3474e672a3a2110919862f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bdf17de1d0ad7a75d3474e672a3a2110919862f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdf17de1d0ad7a75d3474e672a3a2110919862f/comments", "author": null, "committer": null, "parents": [{"sha": "95e1eca43d106d821720744ac6ff1f5df41a1e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e1eca43d106d821720744ac6ff1f5df41a1e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e1eca43d106d821720744ac6ff1f5df41a1e78"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "7f5b01fad760b2f67094de49994a0f1d0da7af0a", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf17de1d0ad7a75d3474e672a3a2110919862f/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf17de1d0ad7a75d3474e672a3a2110919862f/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=2bdf17de1d0ad7a75d3474e672a3a2110919862f", "patch": "@@ -1695,6 +1695,12 @@\n #endif\n \n \n+/* Define if the PE linker supports --disable-dynamicbase option. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_LD_PE_DISABLE_DYNAMICBASE\n+#endif\n+\n+\n /* Define if your linker supports PIE option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_LD_PIE"}, {"sha": "6cc7ac54fdda967c71cd617e9a7e1dd1445a859b", "filename": "gcc/config/i386/mingw-w64.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf17de1d0ad7a75d3474e672a3a2110919862f/gcc%2Fconfig%2Fi386%2Fmingw-w64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf17de1d0ad7a75d3474e672a3a2110919862f/gcc%2Fconfig%2Fi386%2Fmingw-w64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw-w64.h?ref=2bdf17de1d0ad7a75d3474e672a3a2110919862f", "patch": "@@ -89,6 +89,14 @@ along with GCC; see the file COPYING3.  If not see\n # define LINK_SPEC_LARGE_ADDR_AWARE \"\"\n #endif\n \n+#undef LINK_SPEC_DISABLE_DYNAMICBASE\n+#if HAVE_LD_PE_DISABLE_DYNAMICBASE\n+# define LINK_SPEC_DISABLE_DYNAMICBASE \\\n+  \"%{!shared:%{!mdll:%{no-pie:--disable-dynamicbase}}}\"\n+#else\n+# define LINK_SPEC_DISABLE_DYNAMICBASE \"\"\n+#endif\n+\n #undef LINK_SPEC\n #define LINK_SPEC SUB_LINK_SPEC \" %{mwindows:--subsystem windows} \\\n   %{mconsole:--subsystem console} \\\n@@ -97,6 +105,7 @@ along with GCC; see the file COPYING3.  If not see\n   %{static:-Bstatic} %{!static:-Bdynamic} \\\n   %{shared|mdll: \" SUB_LINK_ENTRY \" --enable-auto-image-base} \\\n   \" LINK_SPEC_LARGE_ADDR_AWARE \"\\\n+  \" LINK_SPEC_DISABLE_DYNAMICBASE \"\\\n   %(shared_libgcc_undefs)\"\n \n /* Enable sincos optimization, overriding cygming.h.  sincos, sincosf"}, {"sha": "779c9335711a4d3a12c1f51562c2b87de059c26f", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf17de1d0ad7a75d3474e672a3a2110919862f/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf17de1d0ad7a75d3474e672a3a2110919862f/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=2bdf17de1d0ad7a75d3474e672a3a2110919862f", "patch": "@@ -148,13 +148,21 @@ along with GCC; see the file COPYING3.  If not see\n   \"%{!shared:%{!mdll:%{!m64:--large-address-aware}}}\"\n #endif\n \n+#if HAVE_LD_PE_DISABLE_DYNAMICBASE\n+# define LINK_SPEC_DISABLE_DYNAMICBASE \\\n+  \"%{!shared:%{!mdll:%{no-pie:--disable-dynamicbase}}}\"\n+#else\n+# define LINK_SPEC_DISABLE_DYNAMICBASE \"\"\n+#endif\n+\n #define LINK_SPEC \"%{mwindows:--subsystem windows} \\\n   %{mconsole:--subsystem console} \\\n   %{shared: %{mdll: %eshared and mdll are not compatible}} \\\n   %{shared: --shared} %{mdll:--dll} \\\n   %{static:-Bstatic} %{!static:-Bdynamic} \\\n   %{shared|mdll: \" SUB_LINK_ENTRY \" --enable-auto-image-base} \\\n   \" LINK_SPEC_LARGE_ADDR_AWARE \"\\\n+  \" LINK_SPEC_DISABLE_DYNAMICBASE \"\\\n   %(shared_libgcc_undefs)\"\n \n /* Include in the mingw32 libraries with libgcc */"}, {"sha": "08c286764e0844514a34cf10c3390492b0dff6df", "filename": "gcc/configure", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf17de1d0ad7a75d3474e672a3a2110919862f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf17de1d0ad7a75d3474e672a3a2110919862f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2bdf17de1d0ad7a75d3474e672a3a2110919862f", "patch": "@@ -30613,6 +30613,26 @@ $as_echo \"#define HAVE_LD_BROKEN_PE_DWARF5 1\" >>confdefs.h\n     fi\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_broken_pe_dwarf5\" >&5\n $as_echo \"$gcc_cv_ld_broken_pe_dwarf5\" >&6; }\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking PE linker --disable-dynamicbase support\" >&5\n+$as_echo_n \"checking PE linker --disable-dynamicbase support... \" >&6; }\n+    gcc_cv_ld_disable_dynamicbase=no\n+    if test $in_tree_ld = yes; then\n+      if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 36 -o \"$gcc_cv_gld_major_version\" -gt 2; then \\\n+        gcc_cv_ld_disable_dynamicbase=yes\n+      fi\n+    else\n+      if $gcc_cv_ld --help 2>&1 | grep -q 'disable\\-]dynamicbase' > /dev/null; then\n+        gcc_cv_ld_disable_dynamicbase=yes\n+      fi\n+    fi\n+    if test x\"$gcc_cv_ld_disable_dynamicbase\" = xyes; then\n+\n+$as_echo \"#define HAVE_LD_PE_DISABLE_DYNAMICBASE 1\" >>confdefs.h\n+\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_disable_dynamicbase\" >&5\n+$as_echo \"$gcc_cv_ld_disable_dynamicbase\" >&6; }\n     ;;\n esac\n "}, {"sha": "653a1cc561d491bc7fcd9623e87019802397477e", "filename": "gcc/configure.ac", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf17de1d0ad7a75d3474e672a3a2110919862f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf17de1d0ad7a75d3474e672a3a2110919862f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2bdf17de1d0ad7a75d3474e672a3a2110919862f", "patch": "@@ -6383,6 +6383,23 @@ case $target_os in\n \t        [Define if the PE linker has broken DWARF 5 support.])\n     fi\n     AC_MSG_RESULT($gcc_cv_ld_broken_pe_dwarf5)\n+\n+    AC_MSG_CHECKING(PE linker --disable-dynamicbase support)\n+    gcc_cv_ld_disable_dynamicbase=no\n+    if test $in_tree_ld = yes; then\n+      if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 36 -o \"$gcc_cv_gld_major_version\" -gt 2; then \\\n+        gcc_cv_ld_disable_dynamicbase=yes\n+      fi\n+    else\n+      if $gcc_cv_ld --help 2>&1 | grep -q 'disable\\-]dynamicbase' > /dev/null; then\n+        gcc_cv_ld_disable_dynamicbase=yes\n+      fi\n+    fi\n+    if test x\"$gcc_cv_ld_disable_dynamicbase\" = xyes; then\n+      AC_DEFINE(HAVE_LD_PE_DISABLE_DYNAMICBASE, 1,\n+                [Define if the PE linker supports --disable-dynamicbase option.])\n+    fi\n+    AC_MSG_RESULT($gcc_cv_ld_disable_dynamicbase)\n     ;;\n esac\n "}]}