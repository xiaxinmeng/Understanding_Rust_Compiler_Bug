{"sha": "c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAyNzczN2ZkOTYwNGVhNGI1OGIzYmY5ZWRhMWY3YWMwYmM5OWNlMA==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2016-04-27T15:03:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2016-04-27T15:03:40Z"}, "message": "DWARF: turn dw_loc_descr_node field into hash map for frame offset check\n\nAs discussed on\n<https://gcc.gnu.org/ml/gcc-patches/2016-02/msg01708.html>, this change\nremoves a field in the dw_loc_descr_node structure so we can get rid of\nthe CHECKING_P macro usage.\n\nThis field was used to perform consistency checks for frame offset in\nDWARF procedures. As a replacement, this commit turns the \"visited\nnodes\" set in resolve_args_picking_1 into a map that remembers for each\ndw_loc_descr_node the frame offset associated to it, so that the\nconsistency check is still operational.\n\nBoostrapped and regtested on x86_64-linux.\n\n2016-04-27  Pierre-Marie de Rodat  <derodat@adacore.com>\n\n\t* dwarf2out.h (struct dw_loc_descr_node): Remove the\n\tdw_loc_frame_offset field.\n\t* dwarf2out.c (new_loc_descr): Likewise.\n\t(resolve_args_picking_1): Turn the VISITED hash set into a\n\tFRAME_OFFSET hash map. Use it to associate a frame offset to\n\tvisited nodes. Remove uses of the CHECKING_P macro.\n\t(resolve_args_picking): Update call to resolve_args_picking_1.\n\nFrom-SVN: r235515", "tree": {"sha": "571e8338b1d1265dfd5d55f4b9b02250c6713fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/571e8338b1d1265dfd5d55f4b9b02250c6713fe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53f2382df4de916f8918881f9ef382c410cb1c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f2382df4de916f8918881f9ef382c410cb1c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f2382df4de916f8918881f9ef382c410cb1c6a"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "9f068ce974cb085b76d357de89fe48fa0f1d1db0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0", "patch": "@@ -1,3 +1,13 @@\n+2016-04-27  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* dwarf2out.h (struct dw_loc_descr_node): Remove the\n+\tdw_loc_frame_offset field.\n+\t* dwarf2out.c (new_loc_descr): Likewise.\n+\t(resolve_args_picking_1): Turn the VISITED hash set into a\n+\tFRAME_OFFSET hash map. Use it to associate a frame offset to\n+\tvisited nodes. Remove uses of the CHECKING_P macro.\n+\t(resolve_args_picking): Update call to resolve_args_picking_1.\n+\n 2016-04-27  Martin Liska  <mliska@suse.cz>\n \n \t* tree-ssa-loop-ivopts.c (iv_ca_dump): Fix level of indentation."}, {"sha": "463863dc381dd1240bd8745a46fa674476755b42", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0", "patch": "@@ -1325,9 +1325,6 @@ new_loc_descr (enum dwarf_location_atom op, unsigned HOST_WIDE_INT oprnd1,\n   dw_loc_descr_ref descr = ggc_cleared_alloc<dw_loc_descr_node> ();\n \n   descr->dw_loc_opc = op;\n-#if CHECKING_P\n-  descr->dw_loc_frame_offset = -1;\n-#endif\n   descr->dw_loc_oprnd1.val_class = dw_val_class_unsigned_const;\n   descr->dw_loc_oprnd1.val_entry = NULL;\n   descr->dw_loc_oprnd1.v.val_unsigned = oprnd1;\n@@ -15353,32 +15350,33 @@ is_handled_procedure_type (tree type)\n \t  && int_size_in_bytes (type) <= DWARF2_ADDR_SIZE);\n }\n \n-/* Helper for resolve_args_picking.  Stop when coming across VISITED nodes.  */\n+/* Helper for resolve_args_picking: do the same but stop when coming across\n+   visited nodes.  For each node we visit, register in FRAME_OFFSETS the frame\n+   offset *before* evaluating the corresponding operation.  */\n \n static bool\n resolve_args_picking_1 (dw_loc_descr_ref loc, unsigned initial_frame_offset,\n \t\t\tstruct dwarf_procedure_info *dpi,\n-\t\t\thash_set<dw_loc_descr_ref> &visited)\n+\t\t\thash_map<dw_loc_descr_ref, unsigned> &frame_offsets)\n {\n   /* The \"frame_offset\" identifier is already used to name a macro... */\n   unsigned frame_offset_ = initial_frame_offset;\n   dw_loc_descr_ref l;\n \n   for (l = loc; l != NULL;)\n     {\n+      bool existed;\n+      unsigned &l_frame_offset = frame_offsets.get_or_insert (l, &existed);\n+\n       /* If we already met this node, there is nothing to compute anymore.  */\n-      if (visited.add (l))\n+      if (existed)\n \t{\n-#if CHECKING_P\n \t  /* Make sure that the stack size is consistent wherever the execution\n \t     flow comes from.  */\n-\t  gcc_assert ((unsigned) l->dw_loc_frame_offset == frame_offset_);\n-#endif\n+\t  gcc_assert ((unsigned) l_frame_offset == frame_offset_);\n \t  break;\n \t}\n-#if CHECKING_P\n-      l->dw_loc_frame_offset = frame_offset_;\n-#endif\n+      l_frame_offset = frame_offset_;\n \n       /* If needed, relocate the picking offset with respect to the frame\n \t offset. */\n@@ -15601,7 +15599,7 @@ resolve_args_picking_1 (dw_loc_descr_ref loc, unsigned initial_frame_offset,\n \t{\n \tcase DW_OP_bra:\n \t  if (!resolve_args_picking_1 (l->dw_loc_next, frame_offset_, dpi,\n-\t\t\t\t       visited))\n+\t\t\t\t       frame_offsets))\n \t    return false;\n \t  /* Fall through... */\n \n@@ -15623,17 +15621,20 @@ resolve_args_picking_1 (dw_loc_descr_ref loc, unsigned initial_frame_offset,\n \n /* Make a DFS over operations reachable through LOC (i.e. follow branch\n    operations) in order to resolve the operand of DW_OP_pick operations that\n-   target DWARF procedure arguments (DPI).  Stop at already visited nodes.\n-   INITIAL_FRAME_OFFSET is the frame offset *before* LOC is executed.  Return\n-   if all relocations were successful.  */\n+   target DWARF procedure arguments (DPI).  INITIAL_FRAME_OFFSET is the frame\n+   offset *before* LOC is executed.  Return if all relocations were\n+   successful.  */\n \n static bool\n resolve_args_picking (dw_loc_descr_ref loc, unsigned initial_frame_offset,\n \t\t      struct dwarf_procedure_info *dpi)\n {\n-  hash_set<dw_loc_descr_ref> visited;\n+  /* Associate to all visited operations the frame offset *before* evaluating\n+     this operation.  */\n+  hash_map<dw_loc_descr_ref, unsigned> frame_offsets;\n \n-  return resolve_args_picking_1 (loc, initial_frame_offset, dpi, visited);\n+  return resolve_args_picking_1 (loc, initial_frame_offset, dpi,\n+\t\t\t\t frame_offsets);\n }\n \n /* Try to generate a DWARF procedure that computes the same result as FNDECL."}, {"sha": "abf0550590062be83410c32ecd35b925e7d4077d", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=c027737fd9604ea4b58b3bf9eda1f7ac0bc99ce0", "patch": "@@ -239,12 +239,6 @@ struct GTY((chain_next (\"%h.dw_loc_next\"))) dw_loc_descr_node {\n      frame offset.  */\n   unsigned int frame_offset_rel : 1;\n   int dw_loc_addr;\n-#if CHECKING_P\n-  /* When translating a function into a DWARF procedure, contains the frame\n-     offset *before* evaluating this operation.  It is -1 when not yet\n-     initialized.  */\n-  int dw_loc_frame_offset;\n-#endif\n   dw_val_node dw_loc_oprnd1;\n   dw_val_node dw_loc_oprnd2;\n };"}]}