{"sha": "1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzMzZhMDk5ZDZjN2Y5N2U0ZmUxZWVjMDBkMzkwNmFiZjNkYzYxNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-10-06T01:49:32Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-10-06T01:49:32Z"}, "message": "natField.cc (BooleanClass): Don't define.\n\n\t* java/lang/reflect/natField.cc (BooleanClass): Don't define.\n\t* java/lang/reflect/natArray.cc (BooleanClass): Don't define.\n\t* java/lang/Class.h (Object): Added `class$' field.\n\t* java/lang/Object.h (Object): Added `class$' field.\n\t* defineclass.cc (ClassClass): Use `class$' form.\n\t(ClassObject): Likewise.\n\t* resolve.cc (ClassObject): Use `class$' form.\n\t(ObjectClass): Likewise.\n\t* interpret.cc (ClassError): Removed.\n\t* java/net/natPlainDatagramSocketImpl.cc (BooleanClass): Use\n\t`class$' form.\n\t(IntegerClass): Likewise.\n\t* java/net/natPlainSocketImpl.cc (BooleanClass): Use `class$'\n\tform.\n\t* java/lang/natClassLoader.cc (CloneableClass): Use `class$' form.\n\t(ObjectClass, ClassClass, VMClassLoaderClass, ClassLoaderClass,\n\tSerializableClass): Likewise.\n\tInclude Serializable.h, Cloneable.h.\n\t* java/lang/natSystem.cc (SystemClass): Removed.\n\t(init_properties): Use `class$' form.\n\t* java/lang/natObject.cc (CloneableClass): Removed.\n\t(clone): Use `class$' form.\n\t* java/lang/natClass.cc (CloneableClass): Use `class$' form.\n\t(ObjectClass, ErrorClass, ClassClass, MethodClass, FieldClass,\n\tConstructorClass): Likewise.\n\t* java/lang/reflect/natMethod.cc (ObjectClass): Use `class$' form.\n\t(ClassClass, VoidClass, ByteClass, ShortClass, CharacterClass,\n\tIntegerClass, LongClass, FloatClass, DoubleClass): Likewise.\n\t* java/io/natObjectInputStream.cc (ObjectClass): Use `class$'\n\tform.\n\t(ClassClass): Likewise.\n\t* include/jvm.h (StringClass): Use `class$' form.\n\t* prims.cc (ObjectClass): Removed.\n\t(_Jv_RunMain): Use `class$' form.\n\t(_Jv_AllocObject): Likewise.\n\t* jni.cc (ClassClass): Use `class$' form.\n\t(ThrowableClass): Likewise.\n\t(ObjectClass): Likewise.\n\t(MethodClass): Likewise.\n\t(ThreadGroupClass): Likewise.\n\t(NativeThreadClass): Likewise.\n\t* boehm.cc (ObjectClass): Removed.\n\t(ClassClass): Removed.\n\t(_Jv_MarkObj): Use `class$' form.\n\t* gcj/field.h (JvFieldIsRef): Use `class$' form.\n\tInclude RawData.h.\n\nFrom-SVN: r36740", "tree": {"sha": "92945f2a30eaa7e0f3d79dd9f1dac801adf8bbf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92945f2a30eaa7e0f3d79dd9f1dac801adf8bbf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/comments", "author": null, "committer": null, "parents": [{"sha": "331fe257d6f76701c2a2304cf95392026933bd67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331fe257d6f76701c2a2304cf95392026933bd67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/331fe257d6f76701c2a2304cf95392026933bd67"}], "stats": {"total": 236, "additions": 116, "deletions": 120}, "files": [{"sha": "b93bb7ddaf62cc024f24fa14bcd9ee3fab84d3af", "filename": "libjava/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -1,3 +1,52 @@\n+2000-10-05  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/lang/reflect/natField.cc (BooleanClass): Don't define.\n+\t* java/lang/reflect/natArray.cc (BooleanClass): Don't define.\n+\t* java/lang/Class.h (Object): Added `class$' field.\n+\t* java/lang/Object.h (Object): Added `class$' field.\n+\t* defineclass.cc (ClassClass): Use `class$' form.\n+\t(ClassObject): Likewise.\n+\t* resolve.cc (ClassObject): Use `class$' form.\n+\t(ObjectClass): Likewise.\n+\t* interpret.cc (ClassError): Removed.\n+\t* java/net/natPlainDatagramSocketImpl.cc (BooleanClass): Use\n+\t`class$' form.\n+\t(IntegerClass): Likewise.\n+\t* java/net/natPlainSocketImpl.cc (BooleanClass): Use `class$'\n+\tform.\n+\t* java/lang/natClassLoader.cc (CloneableClass): Use `class$' form.\n+\t(ObjectClass, ClassClass, VMClassLoaderClass, ClassLoaderClass,\n+\tSerializableClass): Likewise.\n+\tInclude Serializable.h, Cloneable.h.\n+\t* java/lang/natSystem.cc (SystemClass): Removed.\n+\t(init_properties): Use `class$' form.\n+\t* java/lang/natObject.cc (CloneableClass): Removed.\n+\t(clone): Use `class$' form.\n+\t* java/lang/natClass.cc (CloneableClass): Use `class$' form.\n+\t(ObjectClass, ErrorClass, ClassClass, MethodClass, FieldClass,\n+\tConstructorClass): Likewise.\n+\t* java/lang/reflect/natMethod.cc (ObjectClass): Use `class$' form.\n+\t(ClassClass, VoidClass, ByteClass, ShortClass, CharacterClass,\n+\tIntegerClass, LongClass, FloatClass, DoubleClass): Likewise.\n+\t* java/io/natObjectInputStream.cc (ObjectClass): Use `class$'\n+\tform.\n+\t(ClassClass): Likewise.\n+\t* include/jvm.h (StringClass): Use `class$' form.\n+\t* prims.cc (ObjectClass): Removed.\n+\t(_Jv_RunMain): Use `class$' form.\n+\t(_Jv_AllocObject): Likewise.\n+\t* jni.cc (ClassClass): Use `class$' form.\n+\t(ThrowableClass): Likewise.\n+\t(ObjectClass): Likewise.\n+\t(MethodClass): Likewise.\n+\t(ThreadGroupClass): Likewise.\n+\t(NativeThreadClass): Likewise.\n+\t* boehm.cc (ObjectClass): Removed.\n+\t(ClassClass): Removed.\n+\t(_Jv_MarkObj): Use `class$' form.\n+\t* gcj/field.h (JvFieldIsRef): Use `class$' form.\n+\tInclude RawData.h.\n+\n 2000-10-05  Warren Levy  <warrenl@cygnus.com>\n \n \t* Makefile.am: Removed java/io/Replaceable.java and"}, {"sha": "877d97c9d9c8eed1c255d739193e54f81cb05626", "filename": "libjava/boehm.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -49,11 +49,6 @@ extern \"C\"\n \t  && (ptr_t) (Obj) <= GC_greatest_plausible_heap_addr) \\\n         PUSH_CONTENTS (Obj, Top, Limit, Source, Exit)\n \n-#define ObjectClass _CL_Q34java4lang6Object\n-extern java::lang::Class ObjectClass;\n-#define ClassClass _CL_Q34java4lang5Class\n-extern java::lang::Class ClassClass;\n-\n \f\n \n // Nonzero if this module has been initialized.\n@@ -110,7 +105,7 @@ _Jv_MarkObj (void *addr, void *msp, void *msl, void * /* env */)\n   p = (ptr_t) klass;\n   MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, obj, o2label);\n \n-  if (__builtin_expect (klass == &ClassClass, false))\n+  if (__builtin_expect (klass == &java::lang::Class::class$, false))\n     {\n       // Currently we allocate some of the memory referenced from class objects\n       // as pointerfree memory, and then mark it more intelligently here.\n@@ -263,7 +258,7 @@ _Jv_MarkObj (void *addr, void *msp, void *msl, void * /* env */)\n       // Note: occasionally `klass' can be null.  For instance, this\n       // can happen if a GC occurs between the point where an object\n       // is allocated and where the vtbl slot is set.\n-      while (klass && klass != &ObjectClass)\n+      while (klass && klass != &java::lang::Object::class$)\n \t{\n \t  jfieldID field = JvGetFirstInstanceField (klass);\n \t  jint max = JvNumInstanceFields (klass);"}, {"sha": "06ca16274ea24d7936dbd9fc41f043538ba3deaa", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -43,11 +43,6 @@ details.  */\n #include <java/lang/IncompatibleClassChangeError.h>\n #include <java/lang/reflect/Modifier.h>\n \n-#define ClassClass _CL_Q34java4lang5Class\n-extern java::lang::Class ClassClass;\n-#define ClassObject _CL_Q34java4lang6Object\n-extern java::lang::Class ClassObject;\n-\n // we don't verify method names that match these.\n static _Jv_Utf8Const *clinit_name = _Jv_makeUtf8Const (\"<clinit>\", 8);\n static _Jv_Utf8Const *init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n@@ -864,11 +859,12 @@ _Jv_ClassReader::handleClassBegin\n       // interfaces have java.lang.Object as super.\n       if (access_flags & Modifier::INTERFACE)\n \t{\n-\t  def->superclass = (jclass)&ClassObject;\n+\t  def->superclass = (jclass)&java::lang::Class::class$;\n \t}\n \n       // FIXME: Consider this carefully!  \n-      else if (!_Jv_equalUtf8Consts (def->name, ClassObject.name))\n+      else if (!_Jv_equalUtf8Consts (def->name,\n+\t\t\t\t     java::lang::Class::class$.name))\n \t{\n \t  throw_no_class_def_found_error (\"loading java.lang.Object\");\n \t}"}, {"sha": "9279c832964a166f3c9c4bff763bc794d6346a17", "filename": "libjava/gcj/field.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fgcj%2Ffield.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fgcj%2Ffield.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Ffield.h?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -14,6 +14,7 @@ details.  */\n #include <java/lang/Class.h>\n #include <java/lang/reflect/Field.h>\n #include <java/lang/reflect/Modifier.h>\n+#include <gnu/gcj/RawData.h>\n \n #define _Jv_FIELD_UNRESOLVED_FLAG\t0x8000\n #define\t_Jv_FIELD_CONSTANT_VALUE\t0x4000\n@@ -179,9 +180,7 @@ JvNumStaticFields (jclass klass)\n extern inline jboolean\n JvFieldIsRef (jfieldID field)\n {\n-  // gnu.gcj.RawData.class is  _CL_Q33gnu3gcj7RawData\n-  extern java::lang::Class _CL_Q33gnu3gcj7RawData;\n-  return field->isRef () && field->type != &_CL_Q33gnu3gcj7RawData;\n+  return field->isRef () && field->type != &gnu::gcj::RawData::class$;\n }\n \n extern inline jobject"}, {"sha": "f453c9c351d18fb352b306951932f5353dc08d1f", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -102,8 +102,8 @@ extern jboolean _Jv_equalUtf8Consts (_Jv_Utf8Const *, _Jv_Utf8Const *);\n extern jboolean _Jv_equal (_Jv_Utf8Const *, jstring, jint);\n extern jboolean _Jv_equaln (_Jv_Utf8Const *, jstring, jint);\n \n-#define StringClass _CL_Q34java4lang6String\n-extern java::lang::Class StringClass;\n+// FIXME: remove this define.\n+#define StringClass java::lang::String::class$\n \n /* Type of pointer used as finalizer.  */\n typedef void _Jv_FinalizerFunc (jobject);"}, {"sha": "7f2ad62ae806e069743523bd9e7202e0b7b100a6", "filename": "libjava/interpret.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -39,9 +39,6 @@ details.  */\n #include <alloca.h>\n #endif\n \n-#define ClassError _CL_Q34java4lang5Error\n-extern java::lang::Class ClassError;\n-\n static _Jv_Utf8Const *init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n \n static void throw_internal_error (char *msg)"}, {"sha": "8b5151d04d9e0f2bd1a969b40694df9a0e44fad8", "filename": "libjava/java/io/natObjectInputStream.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Fio%2FnatObjectInputStream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Fio%2FnatObjectInputStream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatObjectInputStream.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -1,6 +1,6 @@\n // natObjectInputStream.cc - Native part of ObjectInputStream class.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This ObjectInputStream is part of libgcj.\n \n@@ -46,10 +46,8 @@ java::io::ObjectInputStream::allocateObject (jclass klass)\n }\n \n \n-#define ObjectClass _CL_Q34java4lang6Object\n-extern java::lang::Class ObjectClass;\n-#define ClassClass _CL_Q34java4lang5Class\n-extern java::lang::Class ClassClass;\n+#define ObjectClass java::lang::Object::class$\n+#define ClassClass java::lang::Class::class$\n \n void \n java::io::ObjectInputStream::callConstructor (jclass klass, jobject obj)"}, {"sha": "0f26c54a8a9d6edccb5c8c803b564bd177ff00e9", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -190,6 +190,8 @@ class java::lang::Class : public java::lang::Object\n   // finalization\n   void finalize ();\n \n+  static java::lang::Class class$;\n+\n private:   \n \n   void checkMemberAccess (jint flags);"}, {"sha": "21e8fb0918f0ca39b46394556f3e4aedf6f22919", "filename": "libjava/java/lang/Object.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FObject.h?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -57,6 +57,8 @@ class java::lang::Object : public _JvObjectPrefix\n   friend JV_MARKARRAY_DECL;\n #endif\n \n+  static java::lang::Class class$;\n+\n protected:\n   virtual jobject clone (void);\n   virtual void finalize (void);"}, {"sha": "e3d4785dc33ff48d1d13b6b32907eb641748d49b", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -51,20 +51,14 @@ details.  */\n \n \f\n \n-#define CloneableClass _CL_Q34java4lang9Cloneable\n-extern java::lang::Class CloneableClass;\n-#define ObjectClass _CL_Q34java4lang6Object\n-extern java::lang::Class ObjectClass;\n-#define ErrorClass _CL_Q34java4lang5Error\n-extern java::lang::Class ErrorClass;\n-#define ClassClass _CL_Q34java4lang5Class\n-extern java::lang::Class ClassClass;\n-#define MethodClass _CL_Q44java4lang7reflect6Method\n-extern java::lang::Class MethodClass;\n-#define FieldClass _CL_Q44java4lang7reflect5Field\n-extern java::lang::Class FieldClass;\n-#define ConstructorClass _CL_Q44java4lang7reflect11Constructor\n-extern java::lang::Class ConstructorClass;\n+// FIXME: remove these.\n+#define CloneableClass java::lang::Cloneable::class$\n+#define ObjectClass java::lang::Object::class$\n+#define ErrorClass java::lang::Error::class$\n+#define ClassClass java::lang::Class::class$\n+#define MethodClass java::lang::reflect::Method::class$\n+#define FieldClass java::lang::reflect::Field::class$\n+#define ConstructorClass java::lang::reflect::Constructor::class$\n \n // Some constants we use to look up the class initializer.\n static _Jv_Utf8Const *void_signature = _Jv_makeUtf8Const (\"()V\", 3);"}, {"sha": "f1704edd9aa0091dce630bc37a84b5cf0639df0f", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -35,19 +35,17 @@ details.  */\n #include <java/lang/IncompatibleClassChangeError.h>\n #include <java/lang/reflect/Modifier.h>\n #include <java/lang/Runtime.h>\n+#include <java/io/Serializable.h>\n+#include <java/lang/Cloneable.h>\n+\n+// FIXME: remove these.\n+#define CloneableClass java::lang::Cloneable::class$\n+#define ObjectClass java::lang::Object::class$\n+#define ClassClass java::lang::Class::class$\n+#define VMClassLoaderClass gnu::gcj::runtime::VMClassLoader::class$\n+#define ClassLoaderClass java::lang::ClassLoader::class$\n+#define SerializableClass java::io::Serializable::class$\n \n-#define CloneableClass _CL_Q34java4lang9Cloneable\n-extern java::lang::Class CloneableClass;\n-#define ObjectClass _CL_Q34java4lang6Object\n-extern java::lang::Class ObjectClass;\n-#define ClassClass _CL_Q34java4lang5Class\n-extern java::lang::Class ClassClass;\n-#define VMClassLoaderClass _CL_Q34java4lang17VMClassLoader\n-extern java::lang::Class VMClassLoader;\n-#define ClassLoaderClass _CL_Q34java4lang11ClassLoader\n-extern java::lang::Class ClassLoaderClass;\n-#define SerializableClass _CL_Q34java2io12Serializable\n-extern java::lang::Class SerializableClass;\n /////////// java.lang.ClassLoader native methods ////////////\n \n java::lang::ClassLoader *"}, {"sha": "43201f64d869cd7972028624f9548030e6b43206", "filename": "libjava/java/lang/natObject.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FnatObject.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FnatObject.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatObject.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -28,9 +28,6 @@ details.  */\n #include <java/lang/Cloneable.h>\n #include <java/lang/Thread.h>\n \n-#define CloneableClass _CL_Q34java4lang9Cloneable\n-extern java::lang::Class CloneableClass;\n-\n \f\n \n // This is used to represent synchronization information.\n@@ -92,7 +89,7 @@ java::lang::Object::clone (void)\n     }\n   else\n     {\n-      if (! CloneableClass.isAssignableFrom(klass))\n+      if (! java::lang::Cloneable::class$.isAssignableFrom(klass))\n \tJvThrow (new CloneNotSupportedException);\n \n       size = klass->size();"}, {"sha": "35198fb968014f0ec2ca86f4cb7821d50daf0716", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -41,9 +41,6 @@ details.  */\n #include <java/io/PrintStream.h>\n #include <java/io/InputStream.h>\n \n-#define SystemClass _CL_Q34java4lang6System\n-extern java::lang::Class SystemClass;\n-\n \f\n \n void\n@@ -222,7 +219,7 @@ java::lang::System::init_properties (void)\n {\n   {\n     // We only need to synchronize around this gatekeeper.\n-    JvSynchronize sync (&SystemClass);\n+    JvSynchronize sync (&java::lang::System::class$);\n     if (prop_init)\n       return;\n     prop_init = true;"}, {"sha": "b5a2124fb6d387d231818dfdf0de4ad96e0cc9a9", "filename": "libjava/java/lang/reflect/natArray.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2Freflect%2FnatArray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2Freflect%2FnatArray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatArray.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -25,9 +25,6 @@ details.  */\n #include <java/lang/Boolean.h>\n #include <java/lang/Character.h>\n \n-#define BooleanClass _CL_Q34java4lang7Boolean\n-extern java::lang::Class BooleanClass;\n-\n jobject\n java::lang::reflect::Array::newInstance (jclass componentType, jint length)\n {\n@@ -215,7 +212,7 @@ java::lang::reflect::Array::get (jobject array, jint index)\n     return new java::lang::Character (elements ((jcharArray) array) [index]);\n   if (elementType == JvPrimClass (boolean))\n     {\n-      _Jv_InitClass (&BooleanClass);\n+      _Jv_InitClass (&java::lang::Boolean::class$);\n       if (elements ((jbooleanArray) array) [index])\n \treturn java::lang::Boolean::TRUE;\n       else"}, {"sha": "57421d690b4b046a6f0dec9342af74e006d7a8f7", "filename": "libjava/java/lang/reflect/natField.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -1,6 +1,6 @@\n // natField.cc - Implementation of java.lang.reflect.Field native methods.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -26,9 +26,6 @@ details.  */\n #include <java/lang/Boolean.h>\n #include <java/lang/Character.h>\n \n-#define BooleanClass _CL_Q34java4lang7Boolean\n-extern java::lang::Class BooleanClass;\n-\n jint\n java::lang::reflect::Field::getModifiers ()\n {\n@@ -255,7 +252,7 @@ java::lang::reflect::Field::get (jclass caller, jobject obj)\n     return new java::lang::Character (* (jchar*) addr);\n   if (fld->type == JvPrimClass (boolean))\n     {\n-      _Jv_InitClass (&BooleanClass);\n+      _Jv_InitClass (&java::lang::Boolean::class$);\n       if (* (jboolean*) addr)\n \treturn java::lang::Boolean::TRUE;\n       else"}, {"sha": "0e83e0d2511d0be5c828c9c54dc547ae8d385811", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -38,31 +38,23 @@ details.  */\n #include <gcj/method.h>\n #include <gnu/gcj/RawData.h>\n \n-#define ObjectClass _CL_Q34java4lang6Object\n-extern java::lang::Class ObjectClass;\n-#define ClassClass _CL_Q34java4lang5Class\n-extern java::lang::Class ClassClass;\n+// FIXME: remove these\n+#define ObjectClass java::lang::Object::class$\n+#define ClassClass java::lang::Class::class$\n \n #include <stdlib.h>\n \n #include <ffi.h>\n \n-#define VoidClass _CL_Q34java4lang4Void\n-extern java::lang::Class VoidClass;\n-#define ByteClass _CL_Q34java4lang4Byte\n-extern java::lang::Class ByteClass;\n-#define ShortClass _CL_Q34java4lang5Short\n-extern java::lang::Class ShortClass;\n-#define CharacterClass _CL_Q34java4lang9Character\n-extern java::lang::Class CharacterClass;\n-#define IntegerClass _CL_Q34java4lang7Integer\n-extern java::lang::Class IntegerClass;\n-#define LongClass _CL_Q34java4lang4Long\n-extern java::lang::Class LongClass;\n-#define FloatClass _CL_Q34java4lang5Float\n-extern java::lang::Class FloatClass;\n-#define DoubleClass _CL_Q34java4lang6Double\n-extern java::lang::Class DoubleClass;\n+// FIXME: remove these.\n+#define VoidClass java::lang::Void::class$\n+#define ByteClass java::lang::Byte::class$\n+#define ShortClass java::lang::Short::class$\n+#define CharacterClass java::lang::Character::class$\n+#define IntegerClass java::lang::Integer::class$\n+#define LongClass java::lang::Long::class$\n+#define FloatClass java::lang::Float::class$\n+#define DoubleClass java::lang::Double::class$\n \n struct cpair\n {"}, {"sha": "6934f090b82906c3c7eac7276ad888a9e597ff4c", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -50,10 +50,9 @@ details.  */\n #include <java/lang/Boolean.h>\n #include <java/lang/Integer.h>\n \n-#define BooleanClass _CL_Q34java4lang7Boolean\n-extern java::lang::Class BooleanClass;\n-#define IntegerClass _CL_Q34java4lang7Integer\n-extern java::lang::Class IntegerClass;\n+// FIXME: remove these\n+#define BooleanClass java::lang::Boolean::class$\n+#define IntegerClass java::lang::Integer::class$\n \n #ifdef DISABLE_JAVA_NET\n "}, {"sha": "3c6bc393429593fe831867adcd53501239ea5b00", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -49,8 +49,7 @@ details.  */\n #include <java/lang/Class.h>\n #include <java/lang/Integer.h>\n \n-#define BooleanClass _CL_Q34java4lang7Boolean\n-extern java::lang::Class BooleanClass;\n+#define BooleanClass java::lang::Boolean::class$\n \n #ifdef DISABLE_JAVA_NET\n "}, {"sha": "d4040b2b6ee9ca11d11dd73ffe9a72a0ace15342", "filename": "libjava/jni.cc", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -46,19 +46,13 @@ details.  */\n \n #include <java-interp.h>\n \n-#define ClassClass _CL_Q34java4lang5Class\n-extern java::lang::Class ClassClass;\n-#define ObjectClass _CL_Q34java4lang6Object\n-extern java::lang::Class ObjectClass;\n-\n-#define ThrowableClass _CL_Q34java4lang9Throwable\n-extern java::lang::Class ThrowableClass;\n-#define MethodClass _CL_Q44java4lang7reflect6Method\n-extern java::lang::Class MethodClass;\n-#define ThreadGroupClass _CL_Q34java4lang11ThreadGroup\n-extern java::lang::Class ThreadGroupClass;\n-#define NativeThreadClass _CL_Q43gnu3gcj3jni12NativeThread\n-extern java::lang::Class ThreadGroupClass;\n+// FIXME: remove these defines.\n+#define ClassClass java::lang::Class::class$\n+#define ObjectClass java::lang::Object::class$\n+#define ThrowableClass java::lang::Throwable::class$\n+#define MethodClass java::lang::reflect::Method::class$\n+#define ThreadGroupClass java::lang::ThreadGroup::class$\n+#define NativeThreadClass gnu::gcj::jni::NativeThread::class$\n \n // This enum is used to select different template instantiations in\n // the invocation code."}, {"sha": "8ca05da3905506f3de3398e2bdd3bd8644b9d86b", "filename": "libjava/prims.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -67,9 +67,6 @@ details.  */\n #include <ltdl.h>\n #endif\n \n-#define ObjectClass _CL_Q34java4lang6Object\n-extern java::lang::Class ObjectClass;\n-\n // We allocate a single OutOfMemoryError exception which we keep\n // around for use if we run out of memory.\n static java::lang::OutOfMemoryError *no_memory;\n@@ -358,7 +355,8 @@ _Jv_AllocObject (jclass klass, jint size)\n   // implementation would look for Object.finalize in Object's method\n   // table at startup, and then use that information to find the\n   // appropriate index in the method vector.\n-  if (klass->vtable->get_finalizer() != ObjectClass.vtable->get_finalizer())\n+  if (klass->vtable->get_finalizer()\n+      != java::lang::Object::class$.vtable->get_finalizer())\n     _Jv_RegisterFinalizer (obj, _Jv_FinalizeObject);\n \n #ifdef ENABLE_JVMPI\n@@ -915,7 +913,7 @@ _Jv_RunMain (const char *name, int argc, const char **argv, bool is_jar)\n       arg_vec = JvConvertArgv (1, &_Jv_Jar_Class_Path);\n \n       main_thread = \n-\tnew gnu::gcj::runtime::FirstThread (&_CL_Q43gnu3gcj7runtime11FirstThread,\n+\tnew gnu::gcj::runtime::FirstThread (&gnu::gcj::runtime::FirstThread::class$,\n \t\t\t\t\t    arg_vec);\n       main_thread->start();\n       _Jv_ThreadWait ();"}, {"sha": "4a37365c94a2d7507c7261916983e071124de036", "filename": "libjava/resolve.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d336a099d6c7f97e4fe1eec00d3906abf3dc617/libjava%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fresolve.cc?ref=1d336a099d6c7f97e4fe1eec00d3906abf3dc617", "patch": "@@ -41,11 +41,6 @@ static void throw_class_format_error (jstring msg)\n static void throw_class_format_error (char *msg)\n \t__attribute__ ((__noreturn__));\n \n-#define ClassObject _CL_Q34java4lang6Object\n-extern java::lang::Class ClassObject;\n-#define ObjectClass _CL_Q34java4lang6Object\n-extern java::lang::Class ObjectClass;\n-\n // Exceptional return values for _Jv_DetermineVTableIndex\n #define METHOD_NOT_THERE (-2)\n #define METHOD_INACCESSIBLE (-1)\n@@ -809,7 +804,8 @@ _Jv_InitField (jobject obj, jclass klass, int index)\n       /* fall through */\n \n     case JV_CONSTANT_ResolvedString:\n-      if (! (field->type == &StringClass || field->type == &ObjectClass))\n+      if (! (field->type == &StringClass\n+ \t     || field->type == &java::lang::Class::class$))\n \tthrow_class_format_error (\"string initialiser to non-string field\");\n \n       *(jstring*)addr = pool->data[init].string;"}]}