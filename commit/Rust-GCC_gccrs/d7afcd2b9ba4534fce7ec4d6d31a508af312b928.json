{"sha": "d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhZmNkMmI5YmE0NTM0ZmNlN2VjNGQ2ZDMxYTUwOGFmMzEyYjkyOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-02-07T21:56:55Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-07T21:56:55Z"}, "message": "thread (thread::id): Move definition inside thread.\n\n2009-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/thread (thread::id): Move definition inside thread.\n\tUse native_handle_type. Remove this_thread::get_id friend.\n\tChange __thread_data_ptr to __shared_base_ptr.\n\t(thread::id::id(native_handle_type): Make public. Still explicit.\n\tUse native_handle_type. Change _M_thread_id to _M_thread.\n\t(thread::__thread_data_base): Rename to _Impl_base. Use id, change\n\t_M_thread_handle to _M_id.\n\t(thread::__thread_data): Rename to _Impl.\n\tFixup for renames.\n\t(thread::_M_make_thread_data): Return derived type.\n\t(thread::hardware_concurrency): Add definition for default case.\n\t(thread::get_id): Now can define inline.\n\t(thread): Change _M_thread_data to _M_data.\n\t(this_thread::get_id): Now can define inline.\n\t* src/thread.cc (__thread_proxy): Rename to\n\texecute_native_thread_routine.\n\tFixup for other renames.\n\t* testsuite/30_threads/thread/cons/assign_neg.cc: New.\n\t* testsuite/30_threads/thread/cons/copy_neg.cc: New.\n\t* testsuite/30_threads/thread/algorithm: Move to..\n\t* testsuite/30_threads/thread/swap: ...this.\n\t* testsuite/30_threads/thread/member/hardware_concurrency.cc: Add.\n\t* testsuite/30_threads/thread/id/operators.cc: New.\n\nFrom-SVN: r144007", "tree": {"sha": "ab7a64f83b4f9ff2ad08ff622a70bd0a6957bf87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab7a64f83b4f9ff2ad08ff622a70bd0a6957bf87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/comments", "author": null, "committer": null, "parents": [{"sha": "5a7e237c637967eed5edff0a889c643ced174b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7e237c637967eed5edff0a889c643ced174b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a7e237c637967eed5edff0a889c643ced174b33"}], "stats": {"total": 499, "additions": 329, "deletions": 170}, "files": [{"sha": "d6bbe50c425d14a139430eea4de42c929a74c88b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "patch": "@@ -1,3 +1,29 @@\n+2009-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/thread (thread::id): Move definition inside thread.\n+\tUse native_handle_type. Remove this_thread::get_id friend.\n+\tChange __thread_data_ptr to __shared_base_ptr.\n+\t(thread::id::id(native_handle_type): Make public. Still explicit.\n+\tUse native_handle_type. Change _M_thread_id to _M_thread.\n+\t(thread::__thread_data_base): Rename to _Impl_base. Use id, change\n+\t_M_thread_handle to _M_id.\n+\t(thread::__thread_data): Rename to _Impl.\n+\tFixup for renames.\n+\t(thread::_M_make_thread_data): Return derived type.\n+\t(thread::hardware_concurrency): Add definition for default case.\n+\t(thread::get_id): Now can define inline.\n+\t(thread): Change _M_thread_data to _M_data.\n+\t(this_thread::get_id): Now can define inline.\n+\t* src/thread.cc (__thread_proxy): Rename to\n+\texecute_native_thread_routine.\n+\tFixup for other renames.\n+\t* testsuite/30_threads/thread/cons/assign_neg.cc: New.\n+\t* testsuite/30_threads/thread/cons/copy_neg.cc: New.\n+\t* testsuite/30_threads/thread/algorithm: Move to..\n+\t* testsuite/30_threads/thread/swap: ...this.\n+\t* testsuite/30_threads/thread/member/hardware_concurrency.cc: Add.\n+\t* testsuite/30_threads/thread/id/operators.cc: New.\n+\n 2009-02-05  Chris Fairles  <cfairles@gcc.gnu.org>\n \n \t* include/std/tuple (_Head_base<>::_Head_base(_UHead&&)): Formatting.\n@@ -7,13 +33,13 @@\n \n 2009-02-05  Chris Fairles  <cfairles@gcc.gnu.org>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n-\t\n+\n \t* include/std/thread (__thread_data_base): Nest class in std::thread.\n \t(__thread_data): Likewise.\n \t(__thread_data_ptr): Nest typedef in std::thread.\n \t* src/thread.cc (__thread_proxy): Qualify the above names.\n \t* config/abi/pre/gnu.ver: Remove unused exports.\n-\t\n+\n 2009-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/unique_ptr.h: Remove private __this_type typedef."}, {"sha": "9ce5fdd584c43922d5f4d63c54a543ada878e39b", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 124, "deletions": 136, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "patch": "@@ -53,115 +53,149 @@\n \n namespace std\n {\n+  /// thread\n   class thread\n   {\n   public:\n-    class __thread_data_base;\n-    \n-    typedef shared_ptr<__thread_data_base> __thread_data_ptr;\n-    \n-    class __thread_data_base\n+    typedef __gthread_t \t \tnative_handle_type;\n+\n+    /// thread::id\n+    class id\n     {\n+      native_handle_type \t_M_thread;\n+\n     public:\n-      __thread_data_base() = default;\n-      virtual ~__thread_data_base() = default;\n-      \n-      virtual void _M_run() = 0;\n-      \n-      __gthread_t \t_M_thread_handle;\n-      __thread_data_ptr \t_M_this_ptr;\n+      id() : _M_thread() { }\n+\n+      explicit\n+      id(native_handle_type __id) : _M_thread(__id) { }\n+\n+    private:\n+      friend class thread;\n+\n+      friend bool\n+      operator==(thread::id __x, thread::id __y)\n+      { return __gthread_equal(__x._M_thread, __y._M_thread); }\n+\n+      friend bool\n+      operator<(thread::id __x, thread::id __y)\n+      { return __x._M_thread < __y._M_thread; }\n+\n+      template<class _CharT, class _Traits>\n+\tfriend basic_ostream<_CharT, _Traits>&\n+\toperator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id);\n+    };\n+\n+    struct _Impl_base;\n+    typedef shared_ptr<_Impl_base>\t__shared_base_type;\n+\n+    struct _Impl_base\n+    {\n+      id\t\t\t_M_id;\n+\t__shared_base_type\t_M_this_ptr;\n+\n+      _Impl_base() = default;\n+\n+      virtual ~_Impl_base() = default;\n+\n+      virtual void \n+      _M_run() = 0;\n     };\n-    \n-    // types\n-    class id;\n-    typedef __gthread_t native_handle_type;\n \n-    // cons\n+    template<typename _Callable>\n+      class _Impl : public _Impl_base\n+      {\n+\t_Callable \t\t_M_func;\n+\n+      public:\n+\t_Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))\n+\t{ }\n+\n+\tvoid \n+\t_M_run() { _M_func(); }\n+      };\n+\n+  private:\n+    // NB: Store the base type here.\n+    __shared_base_type \t\t_M_data;\n+\n+  public:\n     thread() = default;\n-    \n+    thread(const thread&) = delete;\n+\n+    thread(thread&& __t)\n+    { swap(__t); }\n+\n     template<typename _Callable>\n       explicit thread(_Callable __f)\n-      : _M_thread_data(_M_make_thread_data(__f))\n+      : _M_data(_M_make_shared_data(__f))\n       { _M_start_thread(); }\n \n     template<typename _Callable, typename... _Args>\n       thread(_Callable&& __f, _Args&&... __args)\n-      : _M_thread_data(_M_make_thread_data(std::bind(__f, __args...)))\n+      : _M_data(_M_make_shared_data(std::bind(__f, __args...)))\n       { _M_start_thread(); }\n \n     ~thread()\n     {\n       if (joinable())\n-        detach();\n+\tdetach();\n     }\n \n-    thread(const thread&) = delete;\n-    thread(thread&& __t)\n-    { swap(__t); }\n-\n     thread& operator=(const thread&) = delete;\n+\n     thread& operator=(thread&& __t)\n     {\n       if (joinable())\n-        detach();\n+\tdetach();\n       swap(__t);\n       return *this;\n     }\n \n-    // members\n-    void \n+    void\n     swap(thread&& __t)\n-    { std::swap(_M_thread_data, __t._M_thread_data); }\n+    { std::swap(_M_data, __t._M_data); }\n \n-    bool \n+    bool\n     joinable() const\n-    { return _M_thread_data; }\n+    { return _M_data; }\n \n-    void \n+    void\n     join();\n \n-    void \n+    void\n     detach();\n \n     thread::id\n-    get_id() const;\n+    get_id() const\n+    {\n+      if (_M_data)\n+\treturn thread::id(_M_data->_M_id._M_thread);\n+      else\n+\treturn thread::id();\n+    }\n \n     /** @pre thread is joinable\n      */\n-    native_handle_type \n+    native_handle_type\n     native_handle()\n-    { return _M_thread_data->_M_thread_handle; }\n+    { return _M_data->_M_id._M_thread; }\n \n-    // static members\n-    static unsigned hardware_concurrency();\n+    // Returns a value that hints at the number of hardware thread contexts.\n+    static unsigned int\n+    hardware_concurrency()\n+    { return 0; }\n \n   private:\n     template<typename _Callable>\n-      class __thread_data : public __thread_data_base\n+      shared_ptr<_Impl<_Callable>>\n+      _M_make_shared_data(_Callable&& __f)\n       {\n-      public:\n-\t__thread_data(_Callable&& __f)\n-\t  : _M_func(std::forward<_Callable>(__f))\n-\t{ }\n-\t\n-\tvoid _M_run()\n-\t{ _M_func(); }\n-\t\n-      private:\n-\t_Callable _M_func;\n-      };\n-\n-    template<typename _Callable>\n-      __thread_data_ptr \n-      _M_make_thread_data(_Callable&& __f)\n-      { \n-\treturn make_shared<__thread_data<_Callable>>(\n-            std::forward<_Callable>(__f));\n+\t// Create and allocate full data structure, not base.\n+\treturn make_shared<_Impl<_Callable>>(std::forward<_Callable>(__f));\n       }\n-    \n-    void _M_start_thread();\n \n-    __thread_data_ptr \t_M_thread_data;\n+    void _M_start_thread();\n   };\n \n   inline void\n@@ -171,15 +205,42 @@ namespace std\n   inline void\n   swap(thread&& __x, thread& __y)\n   { __x.swap(__y); }\n-  \n+\n   inline void\n   swap(thread& __x, thread&& __y)\n   { __x.swap(__y); }\n \n+  inline bool\n+  operator!=(thread::id __x, thread::id __y)\n+  { return !(__x == __y); }\n+\n+  inline bool\n+  operator<=(thread::id __x, thread::id __y)\n+  { return !(__y < __x); }\n+\n+  inline bool\n+  operator>(thread::id __x, thread::id __y)\n+  { return __y < __x; }\n+\n+  inline bool\n+  operator>=(thread::id __x, thread::id __y)\n+  { return !(__x < __y); }\n+\n+  template<class _CharT, class _Traits>\n+    inline basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id)\n+    {\n+      if (__id == thread::id())\n+\treturn __out << \"thread::id of a non-executing thread\";\n+      else\n+\treturn __out << __id._M_thread;\n+    }\n+\n+  // 30.2.2 Namespace this_thread.\n   namespace this_thread\n   {\n     thread::id\n-    get_id();\n+    get_id() { return thread::id(__gthread_self()); }\n \n #ifdef _GLIBCXX_USE_SCHED_YIELD\n     inline void\n@@ -203,7 +264,7 @@ namespace std\n \tchrono::nanoseconds __ns =\n \t  chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);\n \n-\t__gthread_time_t __ts = \n+\t__gthread_time_t __ts =\n \t  {\n \t    static_cast<std::time_t>(__s.count()),\n \t    static_cast<long>(__ns.count())\n@@ -213,79 +274,6 @@ namespace std\n       }\n #endif\n   }\n-\n-  /// thread::id\n-  class thread::id\n-  {\n-  public:\n-    id() : _M_thread_id() { }\n-\n-  private:\n-    friend class thread;\n-\n-    friend thread::id this_thread::get_id();\n-\n-    friend bool \n-    operator==(thread::id __x, thread::id __y)\n-    { return __gthread_equal(__x._M_thread_id, __y._M_thread_id); }\n-\n-    friend bool\n-    operator<(thread::id __x, thread::id __y)\n-    { return __x._M_thread_id < __y._M_thread_id; }\n-\n-    template<class _CharT, class _Traits>\n-      friend basic_ostream<_CharT, _Traits>&\n-      operator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id); \n-\n-    explicit \n-    id(__gthread_t __id)\n-    : _M_thread_id(__id)\n-    { }\n-      \n-    __gthread_t _M_thread_id;\n-  };\n-\n-  inline bool\n-  operator!=(thread::id __x, thread::id __y)\n-  { return !(__x == __y); }\n-  \n-  inline bool\n-  operator<=(thread::id __x, thread::id __y)\n-  { return !(__y < __x); }\n-  \n-  inline bool\n-  operator>(thread::id __x, thread::id __y)\n-  { return __y < __x; }\n-  \n-  inline bool\n-  operator>=(thread::id __x, thread::id __y)\n-  { return !(__x < __y); }\n-  \n-  template<class _CharT, class _Traits>\n-    inline basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id)\n-    {\n-      if(__id == thread::id())\n-\treturn __out << \"non-executing thread\";\n-      else\n-\treturn __out << __id._M_thread_id;\n-    }  \n-\n-  inline thread::id\n-  thread::get_id() const\n-  {\n-    if(_M_thread_data)\n-      return thread::id(_M_thread_data->_M_thread_handle);\n-    else\n-      return thread::id();\n-  }\n-\n-  namespace this_thread\n-  {\n-    inline thread::id\n-    get_id()\n-    { return thread::id(__gthread_self()); }\n-  }\n }\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "bc302834fe56bdf1427b158a21c004a5f84d80a6", "filename": "libstdc++-v3/src/thread.cc", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc?ref=d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "patch": "@@ -34,28 +34,25 @@\n \n namespace std\n {\n-  namespace \n+  namespace\n   {\n-    extern \"C\"\n+    extern \"C\" void*\n+    execute_native_thread_routine(void* __p)\n     {\n-      void* __thread_proxy(void* __p)\n-      {\n-\tthread::__thread_data_base* __t = \n-\t  static_cast<thread::__thread_data_base*>(__p);\n-\tthread::__thread_data_ptr __local_thread_data;\n-\t__local_thread_data.swap(__t->_M_this_ptr);\n-\n-\t__try\n-\t  {\n-\t    __local_thread_data->_M_run();\n-\t  }\n-\t__catch(...)\n-\t  {\n-\t    std::terminate();\n-\t  }\n-\n-\treturn 0;\n-      }\n+      thread::_Impl_base* __t = static_cast<thread::_Impl_base*>(__p);\n+      thread::__shared_base_type __local;\n+      __local.swap(__t->_M_this_ptr);\n+\n+      __try\n+\t{\n+\t  __local->_M_run();\n+\t}\n+      __catch(...)\n+\t{\n+\t  std::terminate();\n+\t}\n+\n+      return 0;\n     }\n   }\n \n@@ -64,41 +61,42 @@ namespace std\n   {\n     int __e = EINVAL;\n \n-    if (_M_thread_data)\n+    if (_M_data)\n     {\n       void* __r = 0;\n-      __e = __gthread_join(_M_thread_data->_M_thread_handle, &__r);\n+      __e = __gthread_join(_M_data->_M_id._M_thread, &__r);\n     }\n \n     if (__e)\n       __throw_system_error(__e);\n \n-    _M_thread_data.reset();\n+    _M_data.reset();\n   }\n \n   void\n   thread::detach()\n-  {    \n+  {\n     int __e = EINVAL;\n \n-    if (_M_thread_data)\n-      __e = __gthread_detach(_M_thread_data->_M_thread_handle);\n+    if (_M_data)\n+      __e = __gthread_detach(_M_data->_M_id._M_thread);\n \n     if (__e)\n       __throw_system_error(__e);\n \n-    _M_thread_data.reset();\n+    _M_data.reset();\n   }\n \n-  void \n+  void\n   thread::_M_start_thread()\n   {\n-    _M_thread_data->_M_this_ptr = _M_thread_data;\n-    int __e = __gthread_create(&_M_thread_data->_M_thread_handle, \n-\t\t\t       &__thread_proxy, _M_thread_data.get());\n+    // _M_data->_M_this_ptr = _M_data;\n+    _M_data->_M_this_ptr = _M_data;\n+    int __e = __gthread_create(&_M_data->_M_id._M_thread,\n+\t\t\t       &execute_native_thread_routine, _M_data.get());\n     if (__e)\n     {\n-      _M_thread_data->_M_this_ptr.reset();\n+      _M_data->_M_this_ptr.reset();\n       __throw_system_error(__e);\n     }\n   }"}, {"sha": "1428661b4e9a83f5a70a970702902e552f091678", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/assign_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc?ref=d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::thread test_type;\n+  test_type t1;\n+  test_type t2;\n+  t1 = t2;\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 32 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 145 }"}, {"sha": "090db1546398b59a164b94287bd32d5dca6a4bc4", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/copy_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc?ref=d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread>\n+\n+void test01()\n+{\n+  // copy\n+  typedef std::thread test_type;\n+  test_type t1;\n+  test_type t2(t1);\n+}\n+\n+// { dg-error \"here\" \"\" { target *-*-* } 31 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 124 }\n+// { dg-excess-errors \"In file included from\" }"}, {"sha": "889cf195d6ca50af354ff6854857a6e47db80a20", "filename": "libstdc++-v3/testsuite/30_threads/thread/id/operators.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Foperators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Foperators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Foperators.cc?ref=d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread>\n+\n+void test01()\n+{\n+  // thread::id operators\n+  std::thread::id id1;\n+  std::thread::id id2;\n+\n+  id1 == id2;\n+  id1 != id2;\n+  id1 < id2;\n+  id1 > id2;\n+  id1 >= id2;\n+  id1 <= id2;\n+}"}, {"sha": "625953ca37ed133c1ae4d03a6822807c5652d617", "filename": "libstdc++-v3/testsuite/30_threads/thread/member/hardware_concurrency.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2Fhardware_concurrency.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2Fhardware_concurrency.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2Fhardware_concurrency.cc?ref=d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // Current implementation punts on this.\n+  VERIFY( std::thread::hardware_concurrency() == 0 );\n+\n+  return 0;\n+}"}, {"sha": "e70bbbbe6128fa4b7f54fa8ed6282778c65f7192", "filename": "libstdc++-v3/testsuite/30_threads/thread/swap/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F1.cc?ref=d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "previous_filename": "libstdc++-v3/testsuite/30_threads/thread/algorithm/1.cc"}, {"sha": "5dfce5366c8b47178f94cf1d8965dadbf917d4d7", "filename": "libstdc++-v3/testsuite/30_threads/thread/swap/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afcd2b9ba4534fce7ec4d6d31a508af312b928/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F2.cc?ref=d7afcd2b9ba4534fce7ec4d6d31a508af312b928", "previous_filename": "libstdc++-v3/testsuite/30_threads/thread/algorithm/2.cc"}]}