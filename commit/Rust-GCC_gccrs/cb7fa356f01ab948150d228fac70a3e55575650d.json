{"sha": "cb7fa356f01ab948150d228fac70a3e55575650d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I3ZmEzNTZmMDFhYjk0ODE1MGQyMjhmYWM3MGEzZTU1NTc1NjUwZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T09:55:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T09:55:51Z"}, "message": "[multiple changes]\n\n2011-08-02  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-osinte-linux.ads: Minor comment update and reformatting.\n\t* i-cexten.ads: Make this unit pure, as for its parent.\n\tWill allow its usage in more contexts if needed.\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* s-utf_32.ads: Minor comment fix.\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Actuals): if the subprogram is a primitive\n\toperation of a tagged synchronized type, handle the case where the\n\tcontrolling argument is overloaded.\n\n2011-08-02  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_rm.texi, opt.ads, sem_prag.adb, snames.ads-tmpl:\n\tReplace pragma SPARK_95 with pragma Restrictions (SPARK)\n\t* par-prag.adb (Process_Restrictions_Or_Restriction_Warnings): set\n\tSPARK mode and formal verification mode on processing SPARK restriction\n\t* s-rident.ads (Restriction_Id): add SPARK restriction in those not\n\trequiring consistency checking.\n\nFrom-SVN: r177117", "tree": {"sha": "0dd193e8acf66a39a36fd7fc2383ffc0c01249d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dd193e8acf66a39a36fd7fc2383ffc0c01249d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb7fa356f01ab948150d228fac70a3e55575650d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7fa356f01ab948150d228fac70a3e55575650d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb7fa356f01ab948150d228fac70a3e55575650d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7fa356f01ab948150d228fac70a3e55575650d/comments", "author": null, "committer": null, "parents": [{"sha": "1089a00a2f73a9137562844e774c9c3db4314b79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1089a00a2f73a9137562844e774c9c3db4314b79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1089a00a2f73a9137562844e774c9c3db4314b79"}], "stats": {"total": 262, "additions": 136, "deletions": 126}, "files": [{"sha": "c10bc0abb12b5c47f09827c5015ae6fb46837d72", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -1,3 +1,28 @@\n+2011-08-02  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-osinte-linux.ads: Minor comment update and reformatting.\n+\t* i-cexten.ads: Make this unit pure, as for its parent.\n+\tWill allow its usage in more contexts if needed.\n+\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-utf_32.ads: Minor comment fix.\n+\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): if the subprogram is a primitive\n+\toperation of a tagged synchronized type, handle the case where the\n+\tcontrolling argument is overloaded.\n+\n+2011-08-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_rm.texi, opt.ads, sem_prag.adb, snames.ads-tmpl:\n+\tReplace pragma SPARK_95 with pragma Restrictions (SPARK)\n+\t* par-prag.adb (Process_Restrictions_Or_Restriction_Warnings): set\n+\tSPARK mode and formal verification mode on processing SPARK restriction\n+\t* s-rident.ads (Restriction_Id): add SPARK restriction in those not\n+\trequiring consistency checking.\n+\n 2011-08-02  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_res.adb: Minor reformatting."}, {"sha": "4ead06e0d30ff5ee82ea5414388408ec1f9985ba", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -192,7 +192,6 @@ Implementation Defined Pragmas\n * Pragma Source_File_Name::\n * Pragma Source_File_Name_Project::\n * Pragma Source_Reference::\n-* Pragma SPARK_95::\n * Pragma Static_Elaboration_Desired::\n * Pragma Stream_Convert::\n * Pragma Style_Checks::\n@@ -825,7 +824,6 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Source_File_Name::\n * Pragma Source_File_Name_Project::\n * Pragma Source_Reference::\n-* Pragma SPARK_95::\n * Pragma Static_Elaboration_Desired::\n * Pragma Stream_Convert::\n * Pragma Style_Checks::\n@@ -4609,38 +4607,6 @@ The second argument must be a string literal, it cannot be a static\n string expression other than a string literal.  This is because its value\n is needed for error messages issued by all phases of the compiler.\n \n-@node Pragma SPARK_95\n-@unnumberedsec Pragma SPARK_95\n-@findex SPARK_95\n-@noindent\n-Syntax:\n-@smallexample @c ada\n-pragma SPARK_95;\n-@end smallexample\n-\n-@noindent\n-This is a configuration pragma that establishes SPARK 95 mode\n-for the unit to which\n-it applies, regardless of the mode set by the command line switches.\n-In this mode, the compiler rejects constructs not permitted by SPARK 95.\n-Error messages related to SPARK restrictions have the form:\n-\n-@code{(spark) error message}.\n-\n-This is not a replacement for the semantic checks performed by the\n-SPARK Examiner tool, as the compiler only deals currently with code,\n-not at all with SPARK annotations and does not guarantee catching all\n-cases of constructs forbidden by SPARK 95.\n-\n-Thus it may well be the case that code which\n-passes the compiler in SPARK 95 mode is rejected by the SPARK Examiner,\n-e.g. due to the different visibility rules of the Examiner based on\n-SPARK @code{inherit} annotations.\n-\n-SPARK 95 mode can be useful in providing an initial filter for\n-code developed using SPARK 95, or in examining legacy code to see how far\n-it is from meeting SPARK 95 restrictions.\n-\n @node Pragma Static_Elaboration_Desired\n @unnumberedsec Pragma Static_Elaboration_Desired\n @findex Static_Elaboration_Desired\n@@ -9085,6 +9051,30 @@ appear, and that no wide or wide wide string or character literals\n appear in the program (that is literals representing characters not in\n type @code{Character}.\n \n+@item SPARK\n+@findex SPARK\n+This restriction checks at compile time that some constructs forbidden in\n+SPARK are not present. The SPARK version used as a reference is the same as\n+the Ada mode for the unit, so a unit compiled in Ada 95 mode with SPARK\n+restrictions will be checked for constructs forbidden in SPARK 95.\n+Error messages related to SPARK restriction have the form:\n+\n+@code{(spark) error message}.\n+\n+This is not a replacement for the semantic checks performed by the\n+SPARK Examiner tool, as the compiler only deals currently with code,\n+not at all with SPARK annotations and does not guarantee catching all\n+cases of constructs forbidden by SPARK.\n+\n+Thus it may well be the case that code which\n+passes the compiler in SPARK mode is rejected by the SPARK Examiner,\n+e.g. due to the different visibility rules of the Examiner based on\n+SPARK @code{inherit} annotations.\n+\n+SPARK restriction can be useful in providing an initial filter for\n+code developed using SPARK, or in examining legacy code to see how far\n+it is from meeting SPARK restrictions.\n+\n @end table\n \n @sp 1"}, {"sha": "95fb4559cef7dce5da4783497aac1a8b9329d1b3", "filename": "gcc/ada/i-cexten.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fi-cexten.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fi-cexten.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cexten.ads?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -35,6 +35,7 @@\n with System;\n \n package Interfaces.C.Extensions is\n+   pragma Pure;\n \n    --  Definitions for C \"void\" and \"void *\" types\n \n@@ -45,11 +46,13 @@ package Interfaces.C.Extensions is\n \n    subtype opaque_structure_def is System.Address;\n    type opaque_structure_def_ptr is access opaque_structure_def;\n+   for opaque_structure_def_ptr'Storage_Size use 0;\n \n    --  Definitions for C++ incomplete/unknown classes\n \n    subtype incomplete_class_def is System.Address;\n    type incomplete_class_def_ptr is access incomplete_class_def;\n+   for incomplete_class_def_ptr'Storage_Size use 0;\n \n    --  C bool\n "}, {"sha": "61fc1f1e3f3b6047e3f02f6469259f3444f360a2", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -1167,22 +1167,6 @@ package Opt is\n    --  GNAT\n    --  Set True if a pragma Short_Descriptors applies to the current unit.\n \n-   type SPARK_Version_Type is (SPARK_None, SPARK_95);\n-   pragma Ordered (SPARK_Version_Type);\n-   --  Versions of SPARK for SPARK_Version below. Note that these are ordered,\n-   --  so that tests like SPARK_Version >= SPARK_95 are legitimate and useful.\n-   --  Think twice before using \"=\"; SPARK_Version >= SPARK_95 is more likely\n-   --  what you want, because it will apply to future versions of the language.\n-\n-   SPARK_Version_Default : constant SPARK_Version_Type := SPARK_None;\n-   --  GNAT\n-   --  Default SPARK version if no switch given\n-\n-   SPARK_Version : SPARK_Version_Type := SPARK_Version_Default;\n-   --  GNAT\n-   --  Current SPARK version for compiler, as set by configuration pragmas or\n-   --  compiler switches.\n-\n    Sprint_Line_Limit : Nat := 72;\n    --  GNAT\n    --  Limit values for chopping long lines in Sprint output, can be reset"}, {"sha": "d3959b74d0b00e47c16c397f317ada1419d84ecc", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -89,9 +89,9 @@ function Prag (Pragma_Node : Node_Id; Semi : Source_Ptr) return Node_Id is\n \n    procedure Process_Restrictions_Or_Restriction_Warnings;\n    --  Common processing for Restrictions and Restriction_Warnings pragmas.\n-   --  This routine only processes the case of No_Obsolescent_Features,\n-   --  which is the only restriction that has syntactic effects. No general\n-   --  error checking is done, since this will be done in Sem_Prag. The\n+   --  This routine only processes the cases of No_Obsolescent_Features and\n+   --  SPARK, which are the only restrictions that have syntactic effects. No\n+   --  general error checking is done, since this will be done in Sem_Prag. The\n    --  other case processed is pragma Restrictions No_Dependence, since\n    --  otherwise this is done too late.\n \n@@ -224,11 +224,19 @@ function Prag (Pragma_Node : Node_Id; Semi : Source_Ptr) return Node_Id is\n \n          if Id = No_Name\n            and then Nkind (Expr) = N_Identifier\n-           and then Get_Restriction_Id (Chars (Expr)) = No_Obsolescent_Features\n          then\n-            Set_Restriction (No_Obsolescent_Features, Pragma_Node);\n-            Restriction_Warnings (No_Obsolescent_Features) :=\n-              Prag_Id = Pragma_Restriction_Warnings;\n+            case Get_Restriction_Id (Chars (Expr)) is\n+               when No_Obsolescent_Features =>\n+                  Set_Restriction (No_Obsolescent_Features, Pragma_Node);\n+                  Restriction_Warnings (No_Obsolescent_Features) :=\n+                    Prag_Id = Pragma_Restriction_Warnings;\n+               when SPARK =>\n+                  SPARK_Mode := True;\n+                  Set_Error_Msg_Lang (\"spark\");\n+                  Formal_Verification_Mode := True;\n+               when others =>\n+                  null;\n+            end case;\n \n          elsif Id = Name_No_Dependence then\n             Set_Restriction_No_Dependence\n@@ -889,20 +897,6 @@ begin\n          end if;\n       end Source_Reference;\n \n-      --------------\n-      -- SPARK_95 --\n-      --------------\n-\n-      --  This pragma must be processed at parse time, since we want to set the\n-      --  SPARK version properly at parse time to recognize the appropriate\n-      --  SPARK version syntax.\n-\n-      when Pragma_SPARK_95 =>\n-         SPARK_Version := SPARK_95;\n-         SPARK_Mode := True;\n-         Set_Error_Msg_Lang (\"spark\");\n-         Formal_Verification_Mode := True;\n-\n       -------------------------\n       -- Style_Checks (GNAT) --\n       -------------------------"}, {"sha": "02213086b128a3f076c452fd2af98805232e55a7", "filename": "gcc/ada/s-osinte-linux.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fs-osinte-linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fs-osinte-linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux.ads?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -553,7 +553,7 @@ private\n    type pthread_mutex_t is new System.Linux.pthread_mutex_t;\n \n    type unsigned_long_long_t is mod 2 ** 64;\n-   --  Interfaces.C.Extensions isn't preelaborated so cannot be with'ed\n+   --  Local type only used to get it's 'Alignment below\n \n    type pthread_cond_t is array (0 .. 47) of unsigned_char;\n    pragma Convention (C, pthread_cond_t);"}, {"sha": "2f0a2f30ff1a212983417e648def2ef4f3f450f9", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -131,6 +131,7 @@ package System.Rident is\n       No_Elaboration_Code,                     -- GNAT\n       No_Obsolescent_Features,                 -- Ada 2005 AI-368\n       No_Wide_Characters,                      -- GNAT\n+      SPARK,                                   -- GNAT\n \n       --  The following cases require a parameter value\n \n@@ -180,7 +181,7 @@ package System.Rident is\n    --  All restrictions (excluding only Not_A_Restriction_Id)\n \n    subtype All_Boolean_Restrictions is Restriction_Id range\n-     Simple_Barriers .. No_Wide_Characters;\n+     Simple_Barriers .. SPARK;\n    --  All restrictions which do not take a parameter\n \n    subtype Partition_Boolean_Restrictions is All_Boolean_Restrictions range\n@@ -191,7 +192,7 @@ package System.Rident is\n    --  case of Boolean restrictions.\n \n    subtype Cunit_Boolean_Restrictions is All_Boolean_Restrictions range\n-     Immediate_Reclamation .. No_Wide_Characters;\n+     Immediate_Reclamation .. SPARK;\n    --  Boolean restrictions that are not checked for partition consistency\n    --  and that thus apply only to the current unit. Note that for these\n    --  restrictions, the compiler does not apply restrictions found in"}, {"sha": "4cdbf95279e76cfbdd568f5b88dc482ac455c1e5", "filename": "gcc/ada/s-utf_32.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fs-utf_32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fs-utf_32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-utf_32.ads?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -120,7 +120,7 @@ package System.UTF_32 is\n    function Is_UTF_32_Line_Terminator (U : UTF_32) return Boolean;\n    pragma Inline (Is_UTF_32_Line_Terminator);\n    --  Returns true iff U is an allowed line terminator for source programs,\n-   --  if U is in the category Zp (Separator, Paragraph), or Zs (Separator,\n+   --  if U is in the category Zp (Separator, Paragraph), or Zl (Separator,\n    --  Line), or if U is a conventional line terminator (CR, LF, VT, FF).\n    --  There is no category version for this function, since the set of\n    --  characters does not correspond to a set of Unicode categories."}, {"sha": "d416bd93264af5177dcdd0bd5a100c374014e5ee", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -12387,24 +12387,6 @@ package body Sem_Prag is\n          when Pragma_Source_Reference =>\n             GNAT_Pragma;\n \n-         --------------\n-         -- SPARK_95 --\n-         --------------\n-\n-         --  pragma SPARK_95;\n-\n-         --  Note: this pragma also has some specific processing in Par.Prag\n-         --  because we want to set the SPARK 95 version mode during parsing.\n-\n-         when Pragma_SPARK_95 =>\n-            GNAT_Pragma;\n-            Check_Arg_Count (0);\n-            Check_Valid_Configuration_Pragma;\n-            SPARK_Version := SPARK_95;\n-            SPARK_Mode := True;\n-            Formal_Verification_Mode := True;\n-            Set_Error_Msg_Lang (\"spark\");\n-\n          --------------------------------\n          -- Static_Elaboration_Desired --\n          --------------------------------\n@@ -14154,7 +14136,6 @@ package body Sem_Prag is\n       Pragma_Source_File_Name              => -1,\n       Pragma_Source_File_Name_Project      => -1,\n       Pragma_Source_Reference              => -1,\n-      Pragma_SPARK_95                      => -1,\n       Pragma_Storage_Size                  => -1,\n       Pragma_Storage_Unit                  => -1,\n       Pragma_Static_Elaboration_Desired    => -1,"}, {"sha": "a2dc20613765f7764ba6df763c9273b7d8be32ce", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 64, "deletions": 30, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -3503,48 +3503,82 @@ package body Sem_Res is\n                --   or because it is a generic actual, so use base type to\n                --   locate concurrent type.\n \n-               A_Typ := Base_Type (Etype (A));\n                F_Typ := Base_Type (Etype (F));\n \n-               declare\n-                  Full_A_Typ : Entity_Id;\n+               if Is_Tagged_Type (F_Typ)\n+                 and then (Is_Concurrent_Type (F_Typ)\n+                             or else Is_Concurrent_Record_Type (F_Typ))\n+               then\n+                  --  If the actual is overloaded, look for an interpretation\n+                  --  that has a synchronized type.\n+\n+                  if not Is_Overloaded (A) then\n+                     A_Typ := Base_Type (Etype (A));\n \n-               begin\n-                  if Present (Full_View (A_Typ)) then\n-                     Full_A_Typ := Base_Type (Full_View (A_Typ));\n                   else\n-                     Full_A_Typ := A_Typ;\n+                     declare\n+                        Index : Interp_Index;\n+                        It    : Interp;\n+                     begin\n+                        Get_First_Interp (A, Index, It);\n+                        while Present (It.Typ) loop\n+                           if Is_Concurrent_Type (It.Typ)\n+                             or else Is_Concurrent_Record_Type (It.Typ)\n+                           then\n+                              A_Typ := Base_Type (It.Typ);\n+                              exit;\n+                           end if;\n+\n+                           Get_Next_Interp (Index, It);\n+                        end loop;\n+                     end;\n                   end if;\n \n-                  --  Tagged synchronized type (case 1): the actual is a\n-                  --  concurrent type.\n+                  declare\n+                     Full_A_Typ : Entity_Id;\n \n-                  if Is_Concurrent_Type (A_Typ)\n-                    and then Corresponding_Record_Type (A_Typ) = F_Typ\n-                  then\n-                     Rewrite (A,\n-                       Unchecked_Convert_To\n-                         (Corresponding_Record_Type (A_Typ), A));\n-                     Resolve (A, Etype (F));\n+                  begin\n+                     if Present (Full_View (A_Typ)) then\n+                        Full_A_Typ := Base_Type (Full_View (A_Typ));\n+                     else\n+                        Full_A_Typ := A_Typ;\n+                     end if;\n+\n+                     --  Tagged synchronized type (case 1): the actual is a\n+                     --  concurrent type.\n+\n+                     if Is_Concurrent_Type (A_Typ)\n+                       and then Corresponding_Record_Type (A_Typ) = F_Typ\n+                     then\n+                        Rewrite (A,\n+                          Unchecked_Convert_To\n+                            (Corresponding_Record_Type (A_Typ), A));\n+                        Resolve (A, Etype (F));\n \n-                  --  Tagged synchronized type (case 2): the formal is a\n-                  --  concurrent type.\n+                     --  Tagged synchronized type (case 2): the formal is a\n+                     --  concurrent type.\n \n-                  elsif Ekind (Full_A_Typ) = E_Record_Type\n-                    and then Present\n+                     elsif Ekind (Full_A_Typ) = E_Record_Type\n+                       and then Present\n                                (Corresponding_Concurrent_Type (Full_A_Typ))\n-                    and then Is_Concurrent_Type (F_Typ)\n-                    and then Present (Corresponding_Record_Type (F_Typ))\n-                    and then Full_A_Typ = Corresponding_Record_Type (F_Typ)\n-                  then\n-                     Resolve (A, Corresponding_Record_Type (F_Typ));\n+                       and then Is_Concurrent_Type (F_Typ)\n+                       and then Present (Corresponding_Record_Type (F_Typ))\n+                       and then Full_A_Typ = Corresponding_Record_Type (F_Typ)\n+                     then\n+                        Resolve (A, Corresponding_Record_Type (F_Typ));\n \n-                  --  Common case\n+                     --  Common case\n \n-                  else\n-                     Resolve (A, Etype (F));\n-                  end if;\n-               end;\n+                     else\n+                        Resolve (A, Etype (F));\n+                     end if;\n+                  end;\n+               else\n+\n+                  --  not a synchronized operation.\n+\n+                  Resolve (A, Etype (F));\n+               end if;\n             end if;\n \n             A_Typ := Etype (A);"}, {"sha": "f10aefaddf9a482d6e4d9dc7f0943bc3b18b6bdf", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7fa356f01ab948150d228fac70a3e55575650d/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=cb7fa356f01ab948150d228fac70a3e55575650d", "patch": "@@ -404,7 +404,6 @@ package Snames is\n    Name_Short_Descriptors              : constant Name_Id := N + $; -- GNAT\n    Name_Source_File_Name               : constant Name_Id := N + $; -- GNAT\n    Name_Source_File_Name_Project       : constant Name_Id := N + $; -- GNAT\n-   Name_SPARK_95                       : constant Name_Id := N + $; -- GNAT\n    Name_Style_Checks                   : constant Name_Id := N + $; -- GNAT\n    Name_Suppress                       : constant Name_Id := N + $;\n    Name_Suppress_Exception_Locations   : constant Name_Id := N + $; -- GNAT\n@@ -1520,7 +1519,6 @@ package Snames is\n       Pragma_Short_Descriptors,\n       Pragma_Source_File_Name,\n       Pragma_Source_File_Name_Project,\n-      Pragma_SPARK_95,\n       Pragma_Style_Checks,\n       Pragma_Suppress,\n       Pragma_Suppress_Exception_Locations,"}]}