{"sha": "8ff035ddc55079161d24941785114aa0f5056260", "node_id": "C_kwDOANBUbNoAKDhmZjAzNWRkYzU1MDc5MTYxZDI0OTQxNzg1MTE0YWEwZjUwNTYyNjA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-09-30T15:02:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-30T15:02:32Z"}, "message": "Merge #1551\n\n1551: Add catch for recusive type queries r=philberty a=philberty\n\nWhen we have a type query where by generic substitution occurs we can hit the case where we need to Probe the bounds of the substited item to determine whether the the bounds are compatible this can cause us to end up querying the same type recursively.\r\n\r\nFixes #1550\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "0589da7b5ad57afa7743056e05a94404ad9364ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0589da7b5ad57afa7743056e05a94404ad9364ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ff035ddc55079161d24941785114aa0f5056260", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjNwUICRBK7hj4Ov3rIwAAx7IIACuTciSgqcmS7BsXFmluU5O0\njLoOUA/MaHsEzlfKJe/7ZvDjqfXIH1zwzcz8ySpqb1il8YRKnWuq10RPJ4I70NhY\n63ndj/wm3yV26G3GT5sur/SwQif3fvrgGqSP0+BgFFml75GEO0GcHZpCJpqx7q0v\nN0K+EOD2xPzDpPmKzLUBhisT//EaflnrGzN2qpQ5jXVm+N28r3tkW4NwnqipOx6F\nNYnxu5kE3+0rVul/Z+r2nDXjenT+G5Kx4rE6HXYP9phcqt+n2Z1MyqsXcf5o06RA\nzD9mfp+16NXKo/R1yERJzARYBmpQmiNyyyGzApsve32Wt2JhuchxZGOxW+SEPqs=\n=H2Va\n-----END PGP SIGNATURE-----\n", "payload": "tree 0589da7b5ad57afa7743056e05a94404ad9364ce\nparent 9b1ba11b0b2f873b85dfc7643fe778e974e874b8\nparent d1069815fa6238712f51a23dfd43d2ae6cd7c5e8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1664550152 +0000\ncommitter GitHub <noreply@github.com> 1664550152 +0000\n\nMerge #1551\n\n1551: Add catch for recusive type queries r=philberty a=philberty\n\nWhen we have a type query where by generic substitution occurs we can hit the case where we need to Probe the bounds of the substited item to determine whether the the bounds are compatible this can cause us to end up querying the same type recursively.\r\n\r\nFixes #1550\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff035ddc55079161d24941785114aa0f5056260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff035ddc55079161d24941785114aa0f5056260", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff035ddc55079161d24941785114aa0f5056260/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b1ba11b0b2f873b85dfc7643fe778e974e874b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b1ba11b0b2f873b85dfc7643fe778e974e874b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b1ba11b0b2f873b85dfc7643fe778e974e874b8"}, {"sha": "d1069815fa6238712f51a23dfd43d2ae6cd7c5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "8107ef5a092d71eca35a03e5f3f16f8f2de1dc0d", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff035ddc55079161d24941785114aa0f5056260/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff035ddc55079161d24941785114aa0f5056260/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=8ff035ddc55079161d24941785114aa0f5056260", "patch": "@@ -495,14 +495,20 @@ TypeCheckBase::resolve_generic_params (\n bool\n TypeCheckBase::query_type (HirId reference, TyTy::BaseType **result)\n {\n+  if (context->query_in_progress (reference))\n+    return false;\n+\n   if (context->lookup_type (reference, result))\n     return true;\n \n+  context->insert_query (reference);\n+\n   HIR::Item *item = mappings->lookup_hir_item (reference);\n   if (item != nullptr)\n     {\n       rust_debug_loc (item->get_locus (), \"resolved item {%u} to\", reference);\n       *result = TypeCheckItem::Resolve (*item);\n+      context->query_completed (reference);\n       return true;\n     }\n \n@@ -520,6 +526,7 @@ TypeCheckBase::query_type (HirId reference, TyTy::BaseType **result)\n \t\t      reference);\n \n       *result = TypeCheckItem::ResolveImplItem (*impl_block, *impl_item);\n+      context->query_completed (reference);\n       return true;\n     }\n \n@@ -530,6 +537,7 @@ TypeCheckBase::query_type (HirId reference, TyTy::BaseType **result)\n   if (found_impl_block_type)\n     {\n       *result = TypeCheckItem::ResolveImplBlockSelf (*impl_block_by_type);\n+      context->query_completed (reference);\n       return true;\n     }\n \n@@ -544,13 +552,15 @@ TypeCheckBase::query_type (HirId reference, TyTy::BaseType **result)\n       rust_assert (block != nullptr);\n \n       *result = TypeCheckTopLevelExternItem::Resolve (extern_item, *block);\n+      context->query_completed (reference);\n       return true;\n     }\n \n   // more?\n   Location possible_locus = mappings->lookup_location (reference);\n   rust_debug_loc (possible_locus, \"query system failed to resolve: [%u]\",\n \t\t  reference);\n+  context->query_completed (reference);\n \n   return false;\n }"}, {"sha": "f85585bccf63ed73c08a6c9df61d71b9c67156f9", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff035ddc55079161d24941785114aa0f5056260/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff035ddc55079161d24941785114aa0f5056260/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=8ff035ddc55079161d24941785114aa0f5056260", "patch": "@@ -372,6 +372,15 @@ class TypeCheckContext\n     return true;\n   }\n \n+  void insert_query (HirId id) { querys_in_progress.insert (id); }\n+\n+  void query_completed (HirId id) { querys_in_progress.erase (id); }\n+\n+  bool query_in_progress (HirId id) const\n+  {\n+    return querys_in_progress.find (id) != querys_in_progress.end ();\n+  }\n+\n private:\n   TypeCheckContext ();\n \n@@ -406,6 +415,9 @@ class TypeCheckContext\n \n   // predicates\n   std::map<HirId, TyTy::TypeBoundPredicate> predicates;\n+\n+  // query context lookups\n+  std::set<HirId> querys_in_progress;\n };\n \n class TypeResolution"}, {"sha": "d7647b75f7a21b3dc79b0fc176330082c9eab682", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff035ddc55079161d24941785114aa0f5056260/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff035ddc55079161d24941785114aa0f5056260/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=8ff035ddc55079161d24941785114aa0f5056260", "patch": "@@ -34,8 +34,9 @@ TypeBoundsProbe::scan ()\n       if (!impl->has_trait_ref ())\n \treturn true;\n \n-      TyTy::BaseType *impl_type = TypeCheckItem::ResolveImplBlockSelf (*impl);\n-      if (impl_type->get_kind () == TyTy::TypeKind::ERROR)\n+      HirId impl_ty_id = impl->get_type ()->get_mappings ().get_hirid ();\n+      TyTy::BaseType *impl_type = nullptr;\n+      if (!query_type (impl_ty_id, &impl_type))\n \treturn true;\n \n       if (!receiver->can_eq (impl_type, false))"}]}