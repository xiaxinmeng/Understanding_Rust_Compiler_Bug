{"sha": "182da14a6284aab605f6eace40c80325802b2b15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgyZGExNGE2Mjg0YWFiNjA1ZjZlYWNlNDBjODAzMjU4MDJiMmIxNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2009-05-12T21:08:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-05-12T21:08:00Z"}, "message": "exception: Include nested_exception.h in C++0x mode.\n\n2009-05-12  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* libsupc++/exception: Include nested_exception.h in C++0x mode.\n\t* libsupc++/nested_exception.h: New.\n\t* libsupc++/Makefile.am: Add new header.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* testsuite/18_support/nested_exception/rethrow_nested.cc: New.\n\t* testsuite/18_support/nested_exception/throw_with_nested.cc: New.\n\t* testsuite/18_support/nested_exception/cons.cc: New.\n\t* testsuite/18_support/nested_exception/nested_ptr.cc: New.\n\t* testsuite/18_support/nested_exception/rethrow_if_nested.cc: New.\n\t* doc/xml/manual/status_cxx200x.xml: Adjust.\n\nFrom-SVN: r147446", "tree": {"sha": "6d3c52a09911d5143b7a7fe3511fbe5e9ec350b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d3c52a09911d5143b7a7fe3511fbe5e9ec350b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/182da14a6284aab605f6eace40c80325802b2b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182da14a6284aab605f6eace40c80325802b2b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/182da14a6284aab605f6eace40c80325802b2b15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182da14a6284aab605f6eace40c80325802b2b15/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704bf7c8ae47f7d609d5236d4d61e588bd595dee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704bf7c8ae47f7d609d5236d4d61e588bd595dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/704bf7c8ae47f7d609d5236d4d61e588bd595dee"}], "stats": {"total": 564, "additions": 560, "deletions": 4}, "files": [{"sha": "0a73df255582c6bf5c08fa56306e8b430bdc9af8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -1,3 +1,16 @@\n+2009-05-12  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* libsupc++/exception: Include nested_exception.h in C++0x mode.\n+\t* libsupc++/nested_exception.h: New.\n+\t* libsupc++/Makefile.am: Add new header.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* testsuite/18_support/nested_exception/rethrow_nested.cc: New.\n+\t* testsuite/18_support/nested_exception/throw_with_nested.cc: New.\n+\t* testsuite/18_support/nested_exception/cons.cc: New.\n+\t* testsuite/18_support/nested_exception/nested_ptr.cc: New.\n+\t* testsuite/18_support/nested_exception/rethrow_if_nested.cc: New.\n+\t* doc/xml/manual/status_cxx200x.xml: Adjust.\n+\n 2009-05-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/ext/throw_allocator.h: Remove redundante include."}, {"sha": "d240c994327bd456c5d75e343285c9edcf878c76", "filename": "libstdc++-v3/doc/xml/manual/status_cxx200x.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -235,10 +235,9 @@ particular release.\n       <entry></entry>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?> \n       <entry>18.8.6</entry>\n       <entry>Class <code>nested_exception</code></entry>\n-      <entry>N</entry>\n+      <entry>Y</entry>\n       <entry></entry>\n     </row>\n     <row>"}, {"sha": "b84b5e4672899e08557db13dc906e01ba3b8d688", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -33,7 +33,7 @@ noinst_LTLIBRARIES = libsupc++convenience.la\n \n headers = \\\n \texception new typeinfo cxxabi.h cxxabi-forced.h exception_defines.h \\\n-\tinitializer_list exception_ptr.h\n+\tinitializer_list exception_ptr.h nested_exception.h\n \n if GLIBCXX_HOSTED\n   c_sources = \\"}, {"sha": "50ede6abf64f80c9d78889ce56ca80a25d14e367", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -367,7 +367,7 @@ toolexeclib_LTLIBRARIES = libsupc++.la\n noinst_LTLIBRARIES = libsupc++convenience.la\n headers = \\\n \texception new typeinfo cxxabi.h cxxabi-forced.h exception_defines.h \\\n-\tinitializer_list exception_ptr.h\n+\tinitializer_list exception_ptr.h nested_exception.h\n \n @GLIBCXX_HOSTED_TRUE@c_sources = \\\n @GLIBCXX_HOSTED_TRUE@\tcp-demangle.c "}, {"sha": "be7dec69ab73869e55db7f286932e70720612683", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -146,6 +146,7 @@ _GLIBCXX_END_NAMESPACE\n #if (defined(__GXX_EXPERIMENTAL_CXX0X__) \\\n      && defined(_GLIBCXX_ATOMIC_BUILTINS_4))\n #include <exception_ptr.h>\n+#include <nested_exception.h>\n #endif\n \n #endif"}, {"sha": "752c595b49bf7fcbd82610afcd93c5ea438ab693", "filename": "libstdc++-v3/libsupc++/nested_exception.h", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -0,0 +1,177 @@\n+// Nested Exception support header (nested_exception class) for -*- C++ -*-\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file nested_exception.h\n+ *  This is an internal header file, included by other headers and the\n+ *  implementation. You should not attempt to use it directly.\n+ */\n+\n+#ifndef _GLIBCXX_NESTED_EXCEPTION_H\n+#define _GLIBCXX_NESTED_EXCEPTION_H 1\n+\n+#pragma GCC visibility push(default)\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <c++0x_warning.h>\n+#else\n+\n+#include <bits/c++config.h>\n+\n+#if !defined(_GLIBCXX_ATOMIC_BUILTINS_4)\n+#  error This platform does not support exception propagation.\n+#endif\n+\n+extern \"C++\" {\n+\n+namespace std\n+{\n+  /**\n+   * @addtogroup exceptions\n+   * @{\n+   */\n+\n+  /// nested_exception\n+  class nested_exception\n+  {\n+  public:\n+    nested_exception() throw() : _M_ptr(current_exception()) { }\n+\n+    nested_exception(const nested_exception&) throw() = default;\n+\n+    nested_exception& operator=(const nested_exception&) throw() = default;\n+\n+    virtual ~nested_exception() = default;\n+\n+    void\n+    rethrow_nested() const __attribute__ ((__noreturn__))\n+    { rethrow_exception(_M_ptr); }\n+\n+    exception_ptr\n+    nested_ptr() const\n+    { return _M_ptr; }\n+\n+  private:\n+    exception_ptr _M_ptr;\n+  };\n+\n+  template<typename _Except>\n+    struct _Nested_exception : public _Except, public nested_exception\n+    {\n+      explicit\n+      _Nested_exception(_Except&& __ex)\n+      : _Except(static_cast<_Except&&>(__ex))\n+      { }\n+    };\n+\n+  template<typename _Ex>\n+    struct __get_nested_helper\n+    {\n+      static const nested_exception*\n+      _S_get(const _Ex& __ex)\n+      {\n+        return dynamic_cast<const nested_exception*>(&__ex);\n+      }\n+    };\n+\n+  template<typename _Ex>\n+    struct __get_nested_helper<_Ex*>\n+    {\n+      static const nested_exception*\n+      _S_get(const _Ex* __ex)\n+      {\n+        return dynamic_cast<const nested_exception*>(__ex);\n+      }\n+    };\n+\n+  template<typename _Ex>\n+    inline const nested_exception*\n+    __get_nested_exception(const _Ex& __ex)\n+    {\n+      return __get_nested_helper<_Ex>::_S_get(__ex);\n+    }\n+\n+  template<typename _Ex>\n+    void\n+    __throw_with_nested(_Ex&&, const nested_exception* = 0)\n+    __attribute__ ((__noreturn__));\n+\n+  template<typename _Ex>\n+    void\n+    __throw_with_nested(_Ex&&, ...) __attribute__ ((__noreturn__));\n+\n+  // This function should never be called, but is needed to avoid a warning\n+  // about ambiguous base classes when instantiating throw_with_nested<_Ex>()\n+  // with a type that has an accessible nested_exception base.\n+  template<typename _Ex>\n+    inline void\n+    __throw_with_nested(_Ex&& __ex, const nested_exception* = 0)\n+    {\n+      throw __ex;\n+    }\n+\n+  template<typename _Ex>\n+    inline void\n+    __throw_with_nested(_Ex&& __ex, ...)\n+    {\n+      throw _Nested_exception<_Ex>(static_cast<_Ex&&>(__ex));\n+    }\n+  \n+  template<typename _Ex>\n+    void\n+    throw_with_nested(_Ex __ex) __attribute__ ((__noreturn__));\n+\n+  template<typename _Ex>\n+    inline void\n+    throw_with_nested(_Ex __ex)\n+    {\n+      if (__get_nested_exception(__ex))\n+        throw __ex;\n+      __throw_with_nested(static_cast<_Ex&&>(__ex), &__ex);\n+    }\n+\n+  template<typename _Ex>\n+    inline void\n+    rethrow_if_nested(const _Ex& __ex)\n+    {\n+      if (const nested_exception* __nested = __get_nested_exception(__ex))\n+        __nested->rethrow_nested();\n+    }\n+\n+  // see n2619\n+  inline void\n+  rethrow_if_nested(const nested_exception& __ex)\n+  {\n+    __ex.rethrow_nested();\n+  }\n+\n+  // @} group exceptions\n+} // namespace std\n+\n+} // extern \"C++\"\n+\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n+#pragma GCC visibility pop\n+\n+#endif // _GLIBCXX_NESTED_EXCEPTION_H"}, {"sha": "dcbd36ec7e29c6aa1507a34af2accc8d4d6a233c", "filename": "libstdc++-v3/testsuite/18_support/nested_exception/cons.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fcons.cc?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+void test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::nested_exception e;\n+\n+  VERIFY( !e.nested_ptr() );\n+}\n+\n+void test02() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+  {\n+    throw 42;\n+  }\n+  catch (...)\n+  {\n+    std::nested_exception e;\n+    VERIFY( e.nested_ptr() == std::current_exception() );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "5a3ab62070e0a08f03b9421ef791627ecde991e4", "filename": "libstdc++-v3/testsuite/18_support/nested_exception/nested_ptr.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fnested_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fnested_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fnested_ptr.cc?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+void test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+  {\n+    throw std::nested_exception();\n+  }\n+  catch (const std::nested_exception& e)\n+  {\n+    VERIFY( !e.nested_ptr() );\n+  }\n+}\n+\n+void test02() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+  {\n+    throw 42;\n+  }\n+  catch (...)\n+  {\n+    try\n+    {\n+      throw std::nested_exception();\n+    }\n+    catch (const std::nested_exception& e)\n+    {\n+      try\n+      {\n+\tstd::rethrow_exception( e.nested_ptr() );\n+      }\n+      catch(const int& i)\n+      {\n+\tVERIFY( i == 42 );\n+      }\n+    }\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "37d1d80f8e89ded53e87b16d866ee8d8b0393cde", "filename": "libstdc++-v3/testsuite/18_support/nested_exception/rethrow_if_nested.cc", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_if_nested.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_if_nested.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_if_nested.cc?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -0,0 +1,110 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+struct derived : std::nested_exception { };\n+\n+struct base { virtual ~base() = default; };\n+\n+struct derived2 : base, std::nested_exception { };\n+\n+void test01() \n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  try\n+  {\n+    throw 42;\n+  }\n+  catch (...)\n+  {\n+    derived d;\n+    try\n+    {\n+      std::rethrow_if_nested(d);\n+    }\n+    catch (const int& i)\n+    {\n+      test = true;\n+      VERIFY( i == 42 );\n+    }\n+  }\n+\n+  VERIFY( test );\n+}\n+\n+void test02() \n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  try\n+  {\n+    throw base();\n+  }\n+  catch (const base& b)\n+  {\n+    std::rethrow_if_nested(b);\n+    test = true;\n+  }\n+\n+  VERIFY( test );\n+}\n+\n+void test03() \n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  try\n+  {\n+    throw 42;\n+  }\n+  catch (...)\n+  {\n+    try\n+    {\n+      throw derived2();\n+    }\n+    catch (const base& b)\n+    {\n+      try\n+      {\n+        std::rethrow_if_nested(b);\n+      }\n+      catch (const int& i)\n+      {\n+        VERIFY( i == 42 );\n+        test = true;\n+      }\n+    }\n+  }\n+\n+  VERIFY( test );\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "fca9c4c8038707a9fcbe258c8da52fbb040e82ec", "filename": "libstdc++-v3/testsuite/18_support/nested_exception/rethrow_nested.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_nested.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_nested.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_nested.cc?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+void test01() \n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  try\n+  {\n+    try\n+    {\n+      throw 42;\n+    }\n+    catch (...)\n+    {\n+      std::nested_exception e;\n+      e.rethrow_nested();\n+    }\n+  }\n+  catch(const int& i)\n+  {\n+    test = true;\n+    VERIFY( i == 42 );\n+  }\n+\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a4f05f09f305d46c28a29db4cc5848a0c747b649", "filename": "libstdc++-v3/testsuite/18_support/nested_exception/throw_with_nested.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fthrow_with_nested.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182da14a6284aab605f6eace40c80325802b2b15/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fthrow_with_nested.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Fthrow_with_nested.cc?ref=182da14a6284aab605f6eace40c80325802b2b15", "patch": "@@ -0,0 +1,79 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+struct derived : std::nested_exception { };\n+\n+struct not_derived { virtual ~not_derived() = default; };\n+\n+void test01() \n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  try\n+  {\n+    std::throw_with_nested(derived());\n+  }\n+  catch (const std::nested_exception& e)\n+  {\n+    VERIFY( !e.nested_ptr() );\n+    try\n+    {\n+      throw;\n+    }\n+    catch (const derived&)\n+    {\n+      test = true;\n+    }\n+  }\n+  VERIFY( test );\n+}\n+\n+void test02() \n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  try\n+  {\n+    std::throw_with_nested(not_derived());\n+  }\n+  catch (const std::nested_exception& e)\n+  {\n+    VERIFY( !e.nested_ptr() );\n+    try\n+    {\n+      throw;\n+    }\n+    catch (const not_derived&)\n+    {\n+      test = true;\n+    }\n+  }\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}