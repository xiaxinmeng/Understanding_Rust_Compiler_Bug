{"sha": "9a9286af3ce28d8231fb27e5f345d9f89f4332d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE5Mjg2YWYzY2UyOGQ4MjMxZmIyN2U1ZjM0NWQ5Zjg5ZjQzMzJkNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-13T10:27:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-13T10:27:46Z"}, "message": "Makefile.in (insn-preds.o): Depend on REGS_H.\n\n        * Makefile.in (insn-preds.o): Depend on REGS_H.\n        * genpreds.c (write_insn_preds_c): Include regs.h.\n        * config/i386/predicates.md (index_register_operand): Use\n        REG_OK_FOR_INDEX_STRICT_P and REG_OK_FOR_INDEX_NONSTRICT_P.\n\n        * config/i386/i386.h (REG_CLASS_FROM_LETTER): Add 'l'.\n        * config/i386/i386.md (lea_general_1, lea_general_1_zext,\n        lea_general_2, lea_general_2_zext, lea_general_3, lea_general_3_zext,\n        adddi_1_rex64, addsi_1, addsi_1_zext, addhi_1_lea, addqi_1_lea,\n        ashldi3_1_rex64, ashlsi3_1, ashlsi3_1_zext, ashlhi3_1_lea,\n        ashlqi3_1_lea): Use 'l' for index register operand.\n        (ashldi3_1_rex64 splitter): Use index_register_operand.\n        (ashlsi3_1 splitter): Be more careful with modes.\n\nFrom-SVN: r92080", "tree": {"sha": "6fb4c6cae8b04ae0fce348340e79e59f328881fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fb4c6cae8b04ae0fce348340e79e59f328881fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a9286af3ce28d8231fb27e5f345d9f89f4332d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9286af3ce28d8231fb27e5f345d9f89f4332d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9286af3ce28d8231fb27e5f345d9f89f4332d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/comments", "author": null, "committer": null, "parents": [{"sha": "eb536e6bffacdfc4026218e4ae48c95a6219f1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb536e6bffacdfc4026218e4ae48c95a6219f1f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb536e6bffacdfc4026218e4ae48c95a6219f1f7"}], "stats": {"total": 89, "additions": 60, "deletions": 29}, "files": [{"sha": "191f2275950bf9a89282efc288274f26aa578906", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a9286af3ce28d8231fb27e5f345d9f89f4332d7", "patch": "@@ -1,3 +1,19 @@\n+2004-12-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* Makefile.in (insn-preds.o): Depend on REGS_H.\n+\t* genpreds.c (write_insn_preds_c): Include regs.h.\n+\t* config/i386/predicates.md (index_register_operand): Use\n+\tREG_OK_FOR_INDEX_STRICT_P and REG_OK_FOR_INDEX_NONSTRICT_P.\n+\n+\t* config/i386/i386.h (REG_CLASS_FROM_LETTER): Add 'l'.\n+\t* config/i386/i386.md (lea_general_1, lea_general_1_zext,\n+\tlea_general_2, lea_general_2_zext, lea_general_3, lea_general_3_zext,\n+\tadddi_1_rex64, addsi_1, addsi_1_zext, addhi_1_lea, addqi_1_lea,\n+\tashldi3_1_rex64, ashlsi3_1, ashlsi3_1_zext, ashlhi3_1_lea,\n+\tashlqi3_1_lea): Use 'l' for index register operand.\n+\t(ashldi3_1_rex64 splitter): Use index_register_operand.\n+\t(ashlsi3_1 splitter): Be more careful with modes.\n+\n 2004-12-13  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR target/18459"}, {"sha": "b0f779c8cc4b3aab217e4fdec6c0460168393fef", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9a9286af3ce28d8231fb27e5f345d9f89f4332d7", "patch": "@@ -2397,7 +2397,8 @@ s-preds: $(md_file) build/genpreds$(build_exeext)\n \n insn-preds.o : insn-preds.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) insn-config.h $(RECOG_H) real.h output.h $(FLAGS_H) \\\n-  function.h hard-reg-set.h $(RESOURCE_H) $(TM_P_H) toplev.h reload.h\n+  function.h hard-reg-set.h $(RESOURCE_H) $(TM_P_H) toplev.h reload.h \\\n+  $(REGS_H)\n \n GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(CPP_ID_DATA_H) $(host_xm_file_list) \\"}, {"sha": "813dfcf85fbaba49a61672383801f3d5727728f7", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9a9286af3ce28d8231fb27e5f345d9f89f4332d7", "patch": "@@ -1445,6 +1445,11 @@ enum reg_class\n #define INDEX_REG_CLASS INDEX_REGS\n #define BASE_REG_CLASS GENERAL_REGS\n \n+/* Unused letters:\n+    B                 TU W   \n+          h jk          vw  z\n+*/\n+\n /* Get reg_class from a letter such as appears in the machine description.  */\n \n #define REG_CLASS_FROM_LETTER(C)\t\\\n@@ -1470,7 +1475,9 @@ enum reg_class\n    (C) == 'y' ? TARGET_MMX ? MMX_REGS : NO_REGS :\t\t\\\n    (C) == 'A' ? AD_REGS :\t\t\t\t\t\\\n    (C) == 'D' ? DIREG :\t\t\t\t\t\t\\\n-   (C) == 'S' ? SIREG : NO_REGS)\n+   (C) == 'S' ? SIREG :\t\t\t\t\t\t\\\n+   (C) == 'l' ? INDEX_REGS :\t\t\t\t\t\\\n+   NO_REGS)\n \n /* The letters I, J, K, L and M in a register constraint string\n    can be used to stand for particular ranges of immediate operands."}, {"sha": "6ce6ffd3e950f9ecff40634f7e6ffbc18435dfff", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9a9286af3ce28d8231fb27e5f345d9f89f4332d7", "patch": "@@ -5077,7 +5077,7 @@\n \n (define_insn_and_split \"*lea_general_1\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(plus (plus (match_operand 1 \"index_register_operand\" \"r\")\n+\t(plus (plus (match_operand 1 \"index_register_operand\" \"l\")\n \t\t    (match_operand 2 \"register_operand\" \"r\"))\n \t      (match_operand 3 \"immediate_operand\" \"i\")))]\n   \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode\n@@ -5109,7 +5109,7 @@\n (define_insn_and_split \"*lea_general_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (plus:SI (plus:SI (match_operand:SI 1 \"index_register_operand\" \"r\")\n+\t  (plus:SI (plus:SI (match_operand:SI 1 \"index_register_operand\" \"l\")\n \t\t\t    (match_operand:SI 2 \"register_operand\" \"r\"))\n \t\t   (match_operand:SI 3 \"immediate_operand\" \"i\"))))]\n   \"TARGET_64BIT\"\n@@ -5129,7 +5129,7 @@\n \n (define_insn_and_split \"*lea_general_2\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(plus (mult (match_operand 1 \"index_register_operand\" \"r\")\n+\t(plus (mult (match_operand 1 \"index_register_operand\" \"l\")\n \t\t    (match_operand 2 \"const248_operand\" \"i\"))\n \t      (match_operand 3 \"nonmemory_operand\" \"ri\")))]\n   \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode\n@@ -5159,7 +5159,7 @@\n (define_insn_and_split \"*lea_general_2_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (plus:SI (mult:SI (match_operand:SI 1 \"index_register_operand\" \"r\")\n+\t  (plus:SI (mult:SI (match_operand:SI 1 \"index_register_operand\" \"l\")\n \t\t\t    (match_operand:SI 2 \"const248_operand\" \"n\"))\n \t\t   (match_operand:SI 3 \"nonmemory_operand\" \"ri\"))))]\n   \"TARGET_64BIT\"\n@@ -5178,7 +5178,7 @@\n \n (define_insn_and_split \"*lea_general_3\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(plus (plus (mult (match_operand 1 \"index_register_operand\" \"r\")\n+\t(plus (plus (mult (match_operand 1 \"index_register_operand\" \"l\")\n \t\t\t  (match_operand 2 \"const248_operand\" \"i\"))\n \t\t    (match_operand 3 \"register_operand\" \"r\"))\n \t      (match_operand 4 \"immediate_operand\" \"i\")))]\n@@ -5212,8 +5212,9 @@\n (define_insn_and_split \"*lea_general_3_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"index_register_operand\" \"r\")\n-\t\t\t\t     (match_operand:SI 2 \"const248_operand\" \"n\"))\n+\t  (plus:SI (plus:SI (mult:SI\n+\t\t\t      (match_operand:SI 1 \"index_register_operand\" \"l\")\n+\t\t\t      (match_operand:SI 2 \"const248_operand\" \"n\"))\n \t\t\t    (match_operand:SI 3 \"register_operand\" \"r\"))\n \t\t   (match_operand:SI 4 \"immediate_operand\" \"i\"))))]\n   \"TARGET_64BIT\"\n@@ -5235,7 +5236,7 @@\n (define_insn \"*adddi_1_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n \t(plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,r\")\n-\t\t (match_operand:DI 2 \"x86_64_general_operand\" \"rme,re,re\")))\n+\t\t (match_operand:DI 2 \"x86_64_general_operand\" \"rme,re,le\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, DImode, operands)\"\n {\n@@ -5503,7 +5504,7 @@\n (define_insn \"*addsi_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n \t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,r\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"rmni,rni,rni\")))\n+\t\t (match_operand:SI 2 \"general_operand\" \"rmni,rni,lni\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, SImode, operands)\"\n {\n@@ -5588,7 +5589,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,r\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"rmni,rni\"))))\n+\t\t   (match_operand:SI 2 \"general_operand\" \"rmni,lni\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, SImode, operands)\"\n {\n@@ -5937,7 +5938,7 @@\n (define_insn \"*addhi_1_lea\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,r\")\n \t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,r\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"ri,rm,rni\")))\n+\t\t (match_operand:HI 2 \"general_operand\" \"ri,rm,lni\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL\n    && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n@@ -6179,7 +6180,7 @@\n (define_insn \"*addqi_1_lea\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,r\")\n \t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,r\")\n-\t\t (match_operand:QI 2 \"general_operand\" \"qn,qmn,rn,rn\")))\n+\t\t (match_operand:QI 2 \"general_operand\" \"qn,qmn,rn,ln\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL\n    && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n@@ -10581,7 +10582,7 @@\n \n (define_insn \"*ashldi3_1_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(ashift:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,r\")\n+\t(ashift:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,l\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cJ,M\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFT, DImode, operands)\"\n@@ -10628,7 +10629,7 @@\n ;; Convert lea to the lea pattern to avoid flags dependency.\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t(ashift:DI (match_operand:DI 1 \"index_register_operand\" \"\")\n \t\t   (match_operand:QI 2 \"immediate_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && reload_completed\n@@ -10782,7 +10783,7 @@\n \n (define_insn \"*ashlsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,r\")\n+\t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,l\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,M\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n@@ -10828,13 +10829,19 @@\n                 (match_operand:QI 2 \"const_int_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n+   && true_regnum (operands[0]) != true_regnum (operands[1])\n+   && GET_MODE_SIZE (GET_MODE (operands[0])) <= 4\"\n   [(const_int 0)]\n {\n   rtx pat;\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[1] = gen_lowpart (Pmode, operands[1]);\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+\n+  if (GET_MODE_SIZE (mode) < 4)\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+  if (mode != Pmode)\n+    operands[1] = gen_lowpart (Pmode, operands[1]);\n   operands[2] = gen_int_mode (1 << INTVAL (operands[2]), Pmode);\n+\n   pat = gen_rtx_MULT (Pmode, operands[1], operands[2]);\n   if (Pmode != SImode)\n     pat = gen_rtx_SUBREG (SImode, pat, 0);\n@@ -10864,7 +10871,7 @@\n \n (define_insn \"*ashlsi3_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0,r\")\n+\t(zero_extend:DI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0,l\")\n \t\t\t(match_operand:QI 2 \"nonmemory_operand\" \"cI,M\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n@@ -11004,7 +11011,7 @@\n \n (define_insn \"*ashlhi3_1_lea\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,r\")\n+\t(ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,l\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,M\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL\n@@ -11129,7 +11136,7 @@\n \n (define_insn \"*ashlqi3_1_lea\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,r\")\n-\t(ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,r\")\n+\t(ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,l\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,cI,M\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL"}, {"sha": "3a8eee2152c56764739d06dbf5a857f76f29a3b3", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=9a9286af3ce28d8231fb27e5f345d9f89f4332d7", "patch": "@@ -474,11 +474,10 @@\n {\n   if (GET_CODE (op) == SUBREG)\n     op = SUBREG_REG (op);\n-  return !(op == stack_pointer_rtx\n-\t   || op == arg_pointer_rtx\n-\t   || op == frame_pointer_rtx\n-\t   || (REGNO (op) >= FIRST_PSEUDO_REGISTER\n-\t       && REGNO (op) <= LAST_VIRTUAL_REGISTER));\n+  if (reload_in_progress || reload_completed)\n+    return REG_OK_FOR_INDEX_STRICT_P (op);\n+  else\n+    return REG_OK_FOR_INDEX_NONSTRICT_P (op);\n })\n \n ;; Return false if this is any eliminable register.  Otherwise general_operand."}, {"sha": "874925de998bebea4df423a6d43a13310802929c", "filename": "gcc/genpreds.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9286af3ce28d8231fb27e5f345d9f89f4332d7/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=9a9286af3ce28d8231fb27e5f345d9f89f4332d7", "patch": "@@ -437,7 +437,8 @@ write_insn_preds_c (void)\n #include \\\"hard-reg-set.h\\\"\\n\\\n #include \\\"resource.h\\\"\\n\\\n #include \\\"toplev.h\\\"\\n\\\n-#include \\\"reload.h\\\"\\n\");\n+#include \\\"reload.h\\\"\\n\\\n+#include \\\"regs.h\\\"\\n\");\n \n   FOR_ALL_PREDICATES (p)\n     write_one_predicate_function (p);"}]}