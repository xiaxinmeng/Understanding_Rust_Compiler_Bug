{"sha": "83a4f4f746dd8db00bbec21f9e31f72b160bc24c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhNGY0Zjc0NmRkOGRiMDBiYmVjMjFmOWUzMWY3MmIxNjBiYzI0Yw==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-09-19T23:28:29Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-09-19T23:28:29Z"}, "message": "* testsuite/libjava.jvmti/jvmti.exp: New file.\n\nFrom-SVN: r117065", "tree": {"sha": "998d3799d25291b60f5bab09380d30f7fa49a05a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/998d3799d25291b60f5bab09380d30f7fa49a05a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83a4f4f746dd8db00bbec21f9e31f72b160bc24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a4f4f746dd8db00bbec21f9e31f72b160bc24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a4f4f746dd8db00bbec21f9e31f72b160bc24c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a4f4f746dd8db00bbec21f9e31f72b160bc24c/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af91f02dbac7c3a2dc4e35b30f3166f319fdbcde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af91f02dbac7c3a2dc4e35b30f3166f319fdbcde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af91f02dbac7c3a2dc4e35b30f3166f319fdbcde"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "222fc79f0e785060f6eacf5d4bb8676126bd38e5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a4f4f746dd8db00bbec21f9e31f72b160bc24c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a4f4f746dd8db00bbec21f9e31f72b160bc24c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=83a4f4f746dd8db00bbec21f9e31f72b160bc24c", "patch": "@@ -1,3 +1,7 @@\n+2006-09-19  Keith Seitz  <keiths@redhat.com>\n+\n+\t* testsuite/libjava.jvmti/jvmti.exp: New file.\n+\n 2006-09-19  Keith Seitz  <keiths@redhat.com>\n \n \t* jvmti.cc (THREAD_DEFAULT_TO_CURRENT): Clarify parameter list."}, {"sha": "18be872741b4a9cc20c41bbe88c7e21280b75e4c", "filename": "libjava/testsuite/libjava.jvmti/jvmti.exp", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a4f4f746dd8db00bbec21f9e31f72b160bc24c/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a4f4f746dd8db00bbec21f9e31f72b160bc24c/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti.exp?ref=83a4f4f746dd8db00bbec21f9e31f72b160bc24c", "patch": "@@ -0,0 +1,122 @@\n+# Tests for JVMTI code.\n+\n+# Compile a single C++ file and produce a .o file.  OPTIONS is a list\n+# of options to pass to the compiler.  Returns 0 on failure, 1 on\n+# success.\n+proc gcj_jvmti_compile_cxx_to_o {file {options {}}} {\n+  global srcdir\n+  global objdir\n+\n+  set name [file rootname [file tail $file]]\n+  set oname ${name}.o\n+\n+  # Find the generated header.\n+  lappend options \"additional_flags=-g -I. -I..\"\n+  # Find libgcj headers.\n+  lappend options \"additional_flags=-I$srcdir/..\"\n+  # Find jvmti.h, jvmti_md.h, jvmti-int.h, jvm.h requirements\n+  lappend options \"additional_flags=-I$srcdir/../include -I$srcdir/../classpath/include -I$objdir/../include -I$objdir/../../boehm-gc/include\"\n+\n+  set x [libjava_prune_warnings \\\n+\t   [target_compile $file $oname object $options]]\n+  if {$x != \"\"} {\n+    verbose \"target_compile failed: $x\" 2\n+    fail \"[file tail $file] compilation\"\n+    return 0\n+  }\n+\n+  pass \"[file tail $file] compilation\"\n+  return 1\n+}\n+\n+# Build header files given name of .java file.  Return 0 on failure.\n+proc gcj_jvmti_build_headers {file} {\n+  set gcjh [find_gcjh]\n+  set jvscan [find_jvscan]\n+\n+  set class_out [string trim \\\n+\t\t   [libjava_prune_warnings \\\n+\t\t      [lindex [local_exec \"$jvscan --encoding=UTF-8 $file --list-class\" \"\" \"\" 300] 1]]]\n+  if {[string match \"*parse error*\" $class_out]} {\n+    fail \"$file header generation\"\n+    return 0\n+  }\n+\n+  foreach file [split $class_out] {\n+    set x [string trim [libjava_prune_warnings \\\n+\t\t\t  [lindex [local_exec \"$gcjh $file\" \"\" \"\" 300] 1]]]\n+    if {$x != \"\"} {\n+      verbose \"local_exec failed: $x\" 2\n+      fail \"$file header generation\"\n+      return 0\n+    }\n+  }\n+\n+  pass \"$file header generation\"\n+  return 1\n+}\n+\n+# Do all the work for a single JVMTI test.  Return 0 on failure.\n+proc gcj_jvmti_test_one {file} {\n+  global runtests\n+\n+  # The base name.  We use it for several purposes.\n+  set main [file rootname [file tail $file]]\n+  if {! [runtest_file_p $runtests $main]} {\n+    # Simply skip it.\n+    return 1\n+  }\n+\n+  if {! [bytecompile_file $file [pwd]]} {\n+    fail \"bytecompile $file\"\n+    # FIXME - should use `untested' on all remaining tests.\n+    # But that is hard.\n+    return 0\n+  }\n+  pass \"bytecompile $file\"\n+\n+  if {! [gcj_jvmti_build_headers $file]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  set cfile [file join [file dirname $file] nat$main.cc]\n+  if {! [gcj_jvmti_compile_cxx_to_o $cfile]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  if {! [gcj_link $main $main [list $file nat$main.o]]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  if {! [gcj_invoke $main [file rootname $file].out {}]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  # When we succeed we remove all our clutter.\n+  eval gcj_cleanup [glob -nocomplain -- ${main}.*] [list $main nat$main.o]\n+\n+  return 1\n+}\n+\n+# Run the JVMTI tests.\n+proc gcj_jvmti_run {} {\n+  global srcdir subdir\n+  global build_triplet host_triplet\n+\n+  # For now we only test JVMTI on native builds.\n+  if {$build_triplet == $host_triplet} {\n+    catch { lsort [glob -nocomplain ${srcdir}/${subdir}/*.java] } srcfiles\n+\n+    foreach x $srcfiles {\n+      gcj_jvmti_test_one $x\n+    }\n+  } else {\n+    verbose \"JVMTI tests not run in cross-compilation environment\"\n+  }\n+}\n+\n+gcj_jvmti_run"}]}