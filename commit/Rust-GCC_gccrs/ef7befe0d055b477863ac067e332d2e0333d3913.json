{"sha": "ef7befe0d055b477863ac067e332d2e0333d3913", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3YmVmZTBkMDU1YjQ3Nzg2M2FjMDY3ZTMzMmQyZTAzMzNkMzkxMw==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2006-01-17T23:43:27Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-01-17T23:43:27Z"}, "message": "expr.c (emit_move_change_mode): Always adjust addresses, not just during reload.\n\n\t* expr.c (emit_move_change_mode): Always adjust addresses, not\n\tjust during reload.  Copy replacements only during reload.\n\t(emit_move_insn_1): Move MODE_DECIMAL_FLOAT modes by invoking\n\temit_move_via_integer.\n\nFrom-SVN: r109845", "tree": {"sha": "cddc3a305014cd329dadb015ef160bba34772209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cddc3a305014cd329dadb015ef160bba34772209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef7befe0d055b477863ac067e332d2e0333d3913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7befe0d055b477863ac067e332d2e0333d3913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7befe0d055b477863ac067e332d2e0333d3913", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7befe0d055b477863ac067e332d2e0333d3913/comments", "author": null, "committer": null, "parents": [{"sha": "96c6b0e22a1fbb1a3a8983b5765df57311cea3b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c6b0e22a1fbb1a3a8983b5765df57311cea3b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96c6b0e22a1fbb1a3a8983b5765df57311cea3b6"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "2ac7d8bad71b01583202ea2fa92da6f4415e6c3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7befe0d055b477863ac067e332d2e0333d3913/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7befe0d055b477863ac067e332d2e0333d3913/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef7befe0d055b477863ac067e332d2e0333d3913", "patch": "@@ -1,3 +1,10 @@\n+2006-01-18  Ben Elliston  <bje@au.ibm.com>\t\n+\n+\t* expr.c (emit_move_change_mode): Always adjust addresses, not\n+\tjust during reload.  Copy replacements only during reload.\n+\t(emit_move_insn_1): Move MODE_DECIMAL_FLOAT modes by invoking\n+\temit_move_via_integer.\n+\n 2006-01-17  Shantonu Sen  <ssen@opendarwin.org>\n \n \t* Makefile.in (check-%, check-consistency): Use $${srcdir}"}, {"sha": "92048ff7304320f09ada9204c090e42ff7052077", "filename": "gcc/expr.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7befe0d055b477863ac067e332d2e0333d3913/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7befe0d055b477863ac067e332d2e0333d3913/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ef7befe0d055b477863ac067e332d2e0333d3913", "patch": "@@ -1,6 +1,7 @@\n /* Convert tree expression to rtl instructions, for GNU compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation,\n+   Inc.\n \n This file is part of GCC.\n \n@@ -2783,17 +2784,19 @@ emit_move_change_mode (enum machine_mode new_mode,\n {\n   rtx ret;\n \n-  if (reload_in_progress && MEM_P (x))\n+  if (MEM_P (x))\n     {\n-      /* We can't use gen_lowpart here because it may call change_address\n-\t which is not appropriate if we were called when a reload was in\n-\t progress.  We don't have to worry about changing the address since\n-\t the size in bytes is supposed to be the same.  Copy the MEM to\n-\t change the mode and move any substitutions from the old MEM to\n-\t the new one.  */\n-\n-      ret = adjust_address_nv (x, new_mode, 0);\n-      copy_replacements (x, ret);\n+      /* We don't have to worry about changing the address since the\n+\t size in bytes is supposed to be the same.  */\n+      if (reload_in_progress)\n+\t{\n+\t  /* Copy the MEM to change the mode and move any\n+\t     substitutions from the old MEM to the new one.  */\n+\t  ret = adjust_address_nv (x, new_mode, 0);\n+\t  copy_replacements (x, ret);\n+\t}\n+      else\n+\tret = adjust_address (x, new_mode, 0);\n     }\n   else\n     {\n@@ -3128,6 +3131,17 @@ emit_move_insn_1 (rtx x, rtx y)\n   if (COMPLEX_MODE_P (mode))\n     return emit_move_complex (mode, x, y);\n \n+  if (GET_MODE_CLASS (mode) == MODE_DECIMAL_FLOAT)\n+    {\n+      rtx result = emit_move_via_integer (mode, x, y, true);\n+\n+      /* If we can't find an integer mode, use multi words.  */\n+      if (result)\n+\treturn result;\n+      else\n+\treturn emit_move_multi_word (mode, x, y);\n+    }\n+\n   if (GET_MODE_CLASS (mode) == MODE_CC)\n     return emit_move_ccmode (mode, x, y);\n "}]}