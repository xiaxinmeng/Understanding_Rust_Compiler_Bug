{"sha": "2020066973e9d47be54ddf1efc77c8fdc368a785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAyMDA2Njk3M2U5ZDQ3YmU1NGRkZjFlZmM3N2M4ZmRjMzY4YTc4NQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2012-11-03T21:36:48Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-11-03T21:36:48Z"}, "message": "Add check_effective_target_maybe_x32\n\n\t* lib/target-supports.exp (check_effective_target_maybe_x32): New\n\tproc.\n\t* gcc.target/i386/pr54457.c: Use dg-require-effective-target\n\tmaybe_x32.\n\t* gcc.target/i386/pr53249.c: Likewise.\n\nCo-Authored-By: Jack Howarth <howarth@bromo.med.uc.edu>\n\nFrom-SVN: r193126", "tree": {"sha": "1b50dcae133a30237faaa13e6a44696e247d43a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b50dcae133a30237faaa13e6a44696e247d43a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2020066973e9d47be54ddf1efc77c8fdc368a785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2020066973e9d47be54ddf1efc77c8fdc368a785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2020066973e9d47be54ddf1efc77c8fdc368a785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2020066973e9d47be54ddf1efc77c8fdc368a785/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd7a7ec8fa019741ed0ca18d948d226489eec132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7a7ec8fa019741ed0ca18d948d226489eec132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7a7ec8fa019741ed0ca18d948d226489eec132"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "1dcecbf9d0a3390c0b121a380403f90dde5641d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2020066973e9d47be54ddf1efc77c8fdc368a785/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2020066973e9d47be54ddf1efc77c8fdc368a785/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2020066973e9d47be54ddf1efc77c8fdc368a785", "patch": "@@ -1,3 +1,12 @@\n+2012-11-03  H.J. Lu  <hjl.tools@gmail.com>\n+\t    Jack Howarth  <howarth@bromo.med.uc.edu>\n+\n+\t* lib/target-supports.exp (check_effective_target_maybe_x32): New\n+\tproc.\n+\t* gcc.target/i386/pr54457.c: Use dg-require-effective-target\n+\tmaybe_x32.\n+\t* gcc.target/i386/pr53249.c: Likewise.\n+\n 2012-11-03  Andrew Pinski  <apinski@cavium.com>\n \n \t * gcc.target/mips/octeon-bbit-3.c: Change the second call to abort to"}, {"sha": "c41d3e9ededd278920eb4a87988ab84a28047bee", "filename": "gcc/testsuite/gcc.target/i386/pr53249.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2020066973e9d47be54ddf1efc77c8fdc368a785/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53249.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2020066973e9d47be54ddf1efc77c8fdc368a785/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53249.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr53249.c?ref=2020066973e9d47be54ddf1efc77c8fdc368a785", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n /* { dg-options \"-O2 -mx32 -ftls-model=initial-exec -maddress-mode=short\" } */\n \n struct gomp_task"}, {"sha": "9abfbd32025ffa69e6090ced00e0c8b67a272d54", "filename": "gcc/testsuite/gcc.target/i386/pr54457.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2020066973e9d47be54ddf1efc77c8fdc368a785/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54457.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2020066973e9d47be54ddf1efc77c8fdc368a785/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54457.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54457.c?ref=2020066973e9d47be54ddf1efc77c8fdc368a785", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n /* { dg-options \"-O2 -mx32 -maddress-mode=short\" } */\n \n extern char array[40];"}, {"sha": "86ac8a975bd4c8a352f8b414da08800a0569c8a3", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2020066973e9d47be54ddf1efc77c8fdc368a785/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2020066973e9d47be54ddf1efc77c8fdc368a785/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=2020066973e9d47be54ddf1efc77c8fdc368a785", "patch": "@@ -4608,6 +4608,14 @@ proc check_effective_target_lto { } {\n     return [info exists ENABLE_LTO]\n }\n \n+# Return 1 if -mx32 -maddress-mode=short can compile, 0 otherwise.\n+\n+proc check_effective_target_maybe_x32 { } {\n+    return [check_no_compiler_messages maybe_x32 object {\n+        void foo (void) {}\n+    } \"-mx32 -maddress-mode=short\"]\n+}\n+\n # Return 1 if this target supports the -fsplit-stack option, 0\n # otherwise.\n "}]}