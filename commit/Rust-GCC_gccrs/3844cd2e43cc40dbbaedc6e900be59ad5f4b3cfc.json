{"sha": "3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg0NGNkMmU0M2NjNDBkYmJhZWRjNmU5MDBiZTU5YWQ1ZjRiM2NmYw==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-02-22T15:41:49Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-02-22T15:41:49Z"}, "message": "* extend.texi (C++ Attributes): Fix typo.\n\nFrom-SVN: r39982", "tree": {"sha": "7e9a5344dc1e1b3c89fc92de77a0c0b9adf24747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e9a5344dc1e1b3c89fc92de77a0c0b9adf24747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc/comments", "author": null, "committer": null, "parents": [{"sha": "9c96f3f85ed80d33f75191db9209ee7a7870e16e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c96f3f85ed80d33f75191db9209ee7a7870e16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c96f3f85ed80d33f75191db9209ee7a7870e16e"}], "stats": {"total": 70, "additions": 37, "deletions": 33}, "files": [{"sha": "f98086131da2f7c7a2fc720b025d035c06fb1d00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc", "patch": "@@ -1,3 +1,7 @@\n+2001-02-22  Andreas Jaeger  <aj@suse.de>\n+\n+\t* extend.texi (C++ Attributes): Fix typo.\n+\n 2001-02-21  David Mosberger  <davidm@hpl.hp.com>\n \n \t* config/ia64/ia64.c (ia64_epilogue_uses): For syscall_linkage\n@@ -75,7 +79,7 @@ Wed Feb 21 17:35:24 CET 2001  Jan Hubicka  <jh@suse.cz>\n \t* c-decl.c (duplicate_decls): Set it.\n \t* integrate.c (function_cannot_inline_p): Check it.\n \n-\t* dwarf2out.c (add_name_and_src_coords_attributes): Don't add \n+\t* dwarf2out.c (add_name_and_src_coords_attributes): Don't add\n \tDW_AT_MIPS_linkage_name to abstract methods.\n \t(dwarf2out_abstract_function): Emit class context before calling\n \tset_decl_abstract_flags.  Don't clear DECL_ABSTRACT.\n@@ -93,7 +97,7 @@ Wed Feb 21 17:35:24 CET 2001  Jan Hubicka  <jh@suse.cz>\n 2001-02-21  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* flow.c (mark_set_1): Make not_dead unsigned long.  For\n-\tnon-pseudos, use it as a bitmask of the hard regs that \n+\tnon-pseudos, use it as a bitmask of the hard regs that\n \tdon't die.\n \n 2001-02-21  Neil Booth  <neil@daikokuya.demon.co.uk>\n@@ -111,7 +115,7 @@ Wed Feb 21 17:35:24 CET 2001  Jan Hubicka  <jh@suse.cz>\n         (yyparse): Update.\n \n 2001-02-20  Will Cohen  <wcohen@redhat.com>\n- \n+\n \t* config/pa/quadlib.c (_U_Qfcnvfxt_quad_to_usgl): New function.\n \t* config/pa/long_double.h (FIXUNS_TRUNCTFSI2_LIBCALL): Added.\n \t(INIT_TARGET_OPTABS): Use FIXUNS_TRUNCTFSI2_LIBCALL for\n@@ -255,7 +259,7 @@ Sun Feb 18 15:45:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-02-18  Shane Nay  <shane@agendacomputing.com>\n \n-\t* mips.c (mips_expand_prologue) Add REG_MAYBE_DEAD to \n+\t* mips.c (mips_expand_prologue) Add REG_MAYBE_DEAD to\n \tstructure shift insns.\n \n 2001-02-18  Mark Mitchell  <mark@codesourcery.com>\n@@ -298,15 +302,15 @@ Sun Feb 18 09:30:09 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-02-18  Alan Modra <alan@linuxcare.com.au>\n \n- \t* pa.c (hppa_expand_prologue): Simplify code storing return\n- \tpointer.  For large (>=8k) frames with a post_store, adjust stack\n- \tpointer by 8k-64 first rather than by 64.  When testing with\n- \tVAL_14_BITS_P, always use the actual value rather than the value\n- \tnegated.  Add blockage to prevent scheduling of spills before\n- \tstack frame has been created.\n- \t(hppa_expand_epilogue): Simplify code loading return pointer.\n- \tAllow a slightly larger range for merge_sp_adjust_with_load case.\n- \tWhen testing with VAL_14_BITS_P, always use the actual value.\n+\t* pa.c (hppa_expand_prologue): Simplify code storing return\n+\tpointer.  For large (>=8k) frames with a post_store, adjust stack\n+\tpointer by 8k-64 first rather than by 64.  When testing with\n+\tVAL_14_BITS_P, always use the actual value rather than the value\n+\tnegated.  Add blockage to prevent scheduling of spills before\n+\tstack frame has been created.\n+\t(hppa_expand_epilogue): Simplify code loading return pointer.\n+\tAllow a slightly larger range for merge_sp_adjust_with_load case.\n+\tWhen testing with VAL_14_BITS_P, always use the actual value.\n \n \t* pa.c (pa_adjust_insn_length): Check that block move\n \tpattern is a set before looking at operands.\n@@ -394,7 +398,7 @@ Fri Feb 16 12:41:30 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* dwarf2out.c (add_bound_info): Don't crash if SAVE_EXPR_RTL is\n \tNULL.\n-\t(gen_subprogram_die): Don't abort on seeing a second definition if \n+\t(gen_subprogram_die): Don't abort on seeing a second definition if\n \tthe previous one was abstract.  Don't replace an abstract instance\n \tin the lookup table.\n \n@@ -412,7 +416,7 @@ Fri Feb 16 12:41:30 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-02-16  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* .gdbinit: Rename to gdbinit.in.\n-\t* gdbinit.in: New file, \n+\t* gdbinit.in: New file,\n \t* configure.in: Generate .gdbinit from gdbinit.in.\n \t* configure: Regenerated.\n \t* Makefile.in (distclean): Always remove .gdbinit.\n@@ -522,7 +526,7 @@ Wed Feb 14 10:08:26 CET 2001  Jan Hubicka  <jh@suse.cz>\n \t* params.def: Likewise.\n \t* toplev.c: Include params.h.\n \t(lang_independent_params): New variable.\n-\t(decode_f_option): Use the param machinery instead of setting \n+\t(decode_f_option): Use the param machinery instead of setting\n \tmax_inline_insns.\n \t(independent_decode_option): Handle \"--param name=value\".\n \t(main): Register language-independent parameters.\n@@ -908,7 +912,7 @@ Fri Feb  9 15:05:27 2001  Christopher Faylor <cgf@cygnus.com>\n \t* config/rs6000/aix.h (ASM_OUTPUT_SYMBOL_REF): ... to here.\n \t* config/rs6000/aix51.h (CPLUSCPLUS_CPP_SPEC): Define it.\n \t(__WCHAR_TYPE__): Correct macro name.\n-\t\n+\n 2001-02-08  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_frame_pointer_required): New.\n@@ -966,11 +970,11 @@ Thu Feb  8 11:21:28 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* defaults.h (CPLUSPLUS_CPP_SPEC): New macro.\n \t* gcc.c (struct compiler): Add cpp_spec field.\n \t(input_file_compiler): New variable.\n-\t(do_spec_1): Allow a particular compiler to handle `%C' \n+\t(do_spec_1): Allow a particular compiler to handle `%C'\n \tspecially.\n \t(main): Store the current compiler in input_file_compiler.\n \t* tm.texi (CPLUSPLUS_CPP_SPEC): Document.\n-\t\n+\n 2001-02-07  Zack Weinberg  <zack@wolery.stanford.edu>\n \n \t* cpphash.h (struct spec_nodes): Add n_true and n_false.\n@@ -1039,7 +1043,7 @@ Thu Feb  8 11:21:28 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* config/rs6000/rs6000.c (VTABLE_NAME_P): New macro.\n \t(rs6000_output_symbol_ref): New function.\n \t(output_toc): Use VTABLE_NAME_P.\n-\t\n+\n Tue Feb  6 07:54:51 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* print-tree.c (print_node, case PARM_DECL):\n@@ -1105,7 +1109,7 @@ Mon Feb  5 21:56:16 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-02-05  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \t    David Edelsohn  <edelsohn@gnu.org>\n \n-\t* config/rs6000/rs6000.c (rs6000_return_addr): Use PIC \n+\t* config/rs6000/rs6000.c (rs6000_return_addr): Use PIC\n \tcode for AIX, even without flag_pic.\n \n 2001-02-05  Jakub Jelinek  <jakub@redhat.com>\n@@ -1137,7 +1141,7 @@ Mon Feb  5 11:23:16 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(protoize.o): Likewise.\n \t(unprotoize.o): Likewise.\n \t* configure.in: Recognize --enable-multilib.\n-\t\n+\n 2001-02-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (DRIVER_DEFINES): Fix quoting.\n@@ -1174,7 +1178,7 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* config/mips/mips.c (save_restore_insns): Likewise.\n \n \t* except.c (duplicate_eh_handlers): Call abort instead of fatal.\n-\t* flow.c (verify_flow_info): Likewise.\t\n+\t* flow.c (verify_flow_info): Likewise.\n \t* config/arm/arm.c (thumb_load_double_from_address): Likewise.\n \t* config/avr/avr.c (pttreg_to_str, unique_section): Likewise.\n \t(avr_normalize_condition): Likewise.\n@@ -1195,9 +1199,9 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* graph.c (clean_graph_dump_file): Likewise.\n \t* profile.c (init_branch_prob): Likewise.\n \t* objc/objc-act.c (objc_init): Likewise.\n-\t\n+\n \t* config/arm/arm.c (arm_override_options): Make errors non-fatal.\n-\t* config/avr/avr.c (avr_override_options): Likewise.\t\n+\t* config/avr/avr.c (avr_override_options): Likewise.\n \t* config/c4x/c4x.c (c4x_expand_prologue): Likewise.\n \t* config/dsp16xx/dsp16xx.c (function_prologue): Likewise.\n \t* config/h8300/h8300.c (h8300_init_once): Likewise.\n@@ -1245,12 +1249,12 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-02-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpphash.h: Rename _ALIGN POOL_ALIGN.\n-\t* cpplex.c (new_chunk, _cpp_pool_reserve): Update.  \n+\t* cpplex.c (new_chunk, _cpp_pool_reserve): Update.\n \n 2001-02-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpphash.h: Rename ALIGN _ALIGN.\n-\t* cpplex.c (new_chunk, _cpp_pool_reserve): Update.  \n+\t* cpplex.c (new_chunk, _cpp_pool_reserve): Update.\n \n Fri Feb  2 23:15:29 2001  Christopher Faylor <cgf@cygnus.com>\n \n@@ -1316,14 +1320,14 @@ Fri Feb  2 20:03:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-02-02  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* gcc.c (init_gcc_specs): New function.  Make -shared-libgcc \n+\t* gcc.c (init_gcc_specs): New function.  Make -shared-libgcc\n \tthe default when building a shared object.\n \t(init_spec): Use it.\n \t* testsuite/lib/g++.exp: Include the directory where libgcc\n \tis located to the LD_LIBRARY_PATH list.\n \t* invoke.texi (-shared-libgcc): Document the cases in which\n \tGCC defaults to using the shared libgcc.\n-\t\n+\n 2001-02-02  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/fp-bit.h (MAX_USI_INT, MAX_SI_INT): Don't assume\n@@ -1455,7 +1459,7 @@ Thu Feb  1 07:22:41 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* cpphash.h (struct cpp_reader): New saved_flags.\n \t* cppmacro.c (cpp_get_token): Use saved_flags to remember\n \tto avoid a paste after a pasted token.\n-\t  \n+\n 2001-01-31  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* libgcc2.h (Wtype_MAX, Wtype_MIN): Define.\n@@ -1597,7 +1601,7 @@ Mon Jan 29 20:38:19 2001  Christopher Faylor <cgf@cygnus.com>\n \n \t* cpphash.c (_cpp_cleanup_hashtable, _cpp_lookup_with_hash)\n \t: Don't set fe_value.\n-\t* cpplib.h (AVOID_LPASTE): New flag. \n+\t* cpplib.h (AVOID_LPASTE): New flag.\n \t(struct cpp_hashnode): Remove fe_value.\n \t* cpplex.c (cpp_avoid_paste): Don't paste '.' with a number.\n \t* cppmacro.c (builtin_macro): Don't set flags here.\n@@ -1753,7 +1757,7 @@ Fri Jan 26 11:37:26 2001  Jeffrey A Law  (law@cygnus.com)\n \t(move_movables): Replace emit_call_insn_before with\n \tloop_call_insn_hoist.\n \t* loop.h (loop_insn_emit_before): Add.\n-\t* unroll.c (copy_loop_body): Replace emit_insn_before with \n+\t* unroll.c (copy_loop_body): Replace emit_insn_before with\n \tloop_insn_emit_before.\n \n 2001-01-25  Neil Booth  <neil@daikokuya.demon.co.uk>"}, {"sha": "3319cca923560a6c3578ca9ee909603600f2ee94", "filename": "gcc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=3844cd2e43cc40dbbaedc6e900be59ad5f4b3cfc", "patch": "@@ -4321,7 +4321,7 @@ In Standard C++, objects defined at namespace scope are guaranteed to be\n initialized in an order in strict accordance with that of their definitions\n @emph{in a given translation unit}.  No guarantee is made for initializations\n across translation units.  However, GNU C++ allows users to control the\n-order of initialization of objects defined at namespace socpe with the\n+order of initialization of objects defined at namespace scope with the\n @code{init_priority} attribute by specifying a relative @var{priority},\n a constant integral expression currently bounded between 101 and 65535\n inclusive.  Lower numbers indicate a higher priority."}]}