{"sha": "e8de1a820f28cfdd7b8a588dd28277cc8db25ce3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkZTFhODIwZjI4Y2ZkZDdiOGE1ODhkZDI4Mjc3Y2M4ZGIyNWNlMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-07T13:45:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-07T13:45:22Z"}, "message": "[multiple changes]\n\n2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_fixd.adb (Expand_Multiply_Fixed_By_Fixed_Giving_Integer):\n\tIf the restriction No_Floating_Point is in effect, and the\n\toperands have the same type, introduce a temporary to hold\n\tthe fixed point result, to prevent the use of floating-point\n\toperations at run-time.\n\n2014-11-07  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb (Check_Address_Clause): Minor reformatting\n\t(Find_Constant): Minor reformatting.\n\t(Freeze_Array_Type): Modify check for packed declarations.\n\t(Freeze_Entity): Minor reformatting.\n\nFrom-SVN: r217223", "tree": {"sha": "efb7cfc5a3b612c85aaf481f0c8b3bb486f2024c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efb7cfc5a3b612c85aaf481f0c8b3bb486f2024c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3/comments", "author": null, "committer": null, "parents": [{"sha": "d862b3439d1996c99a532476a181b6f3c0c69257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d862b3439d1996c99a532476a181b6f3c0c69257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d862b3439d1996c99a532476a181b6f3c0c69257"}], "stats": {"total": 112, "additions": 86, "deletions": 26}, "files": [{"sha": "e7fedaa586bc37accae6593951731322323de5b8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e8de1a820f28cfdd7b8a588dd28277cc8db25ce3", "patch": "@@ -1,3 +1,18 @@\n+2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_fixd.adb (Expand_Multiply_Fixed_By_Fixed_Giving_Integer):\n+\tIf the restriction No_Floating_Point is in effect, and the\n+\toperands have the same type, introduce a temporary to hold\n+\tthe fixed point result, to prevent the use of floating-point\n+\toperations at run-time.\n+\n+2014-11-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb (Check_Address_Clause): Minor reformatting\n+\t(Find_Constant): Minor reformatting.\n+\t(Freeze_Array_Type): Modify check for packed declarations.\n+\t(Freeze_Entity): Minor reformatting.\n+\n 2014-11-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnatvsn.ads (Library_Version): Bump to 5.0."}, {"sha": "564c527927c0b432768895e00c2d9c3b07ee8f28", "filename": "gcc/ada/exp_fixd.adb", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3/gcc%2Fada%2Fexp_fixd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3/gcc%2Fada%2Fexp_fixd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_fixd.adb?ref=e8de1a820f28cfdd7b8a588dd28277cc8db25ce3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,6 +29,8 @@ with Einfo;    use Einfo;\n with Exp_Util; use Exp_Util;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n+with Restrict; use Restrict;\n+with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Eval; use Sem_Eval;\n@@ -2214,13 +2216,41 @@ package body Exp_Fixd is\n    ---------------------------------------------------\n \n    procedure Expand_Multiply_Fixed_By_Fixed_Giving_Integer (N : Node_Id) is\n-      Left  : constant Node_Id := Left_Opnd (N);\n-      Right : constant Node_Id := Right_Opnd (N);\n+      Loc   : constant Source_Ptr := Sloc (N);\n+      Left  : constant Node_Id    := Left_Opnd (N);\n+      Right : constant Node_Id    := Right_Opnd (N);\n+\n    begin\n       if Etype (Left) = Universal_Real then\n          Do_Multiply_Fixed_Universal (N, Left => Right, Right => Left);\n+\n       elsif Etype (Right) = Universal_Real then\n          Do_Multiply_Fixed_Universal (N, Left, Right);\n+\n+      --  If both types are equal and we need to avoid floating point\n+      --  instructions, it's worth introducing a temporary with the\n+      --  common type, because it may be evaluated more simply without\n+      --  the need for run-time use of floating point.\n+\n+      elsif Etype (Right) = Etype (Left)\n+        and then Restriction_Active (No_Floating_Point)\n+      then\n+         declare\n+            Temp : constant Entity_Id := Make_Temporary (Loc, 'F');\n+            Mult : constant Node_Id   := Make_Op_Multiply (Loc, Left, Right);\n+            Decl : constant Node_Id   :=\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Temp,\n+                Object_Definition   => New_Occurrence_Of (Etype (Right), Loc),\n+                Expression          => Mult);\n+\n+         begin\n+            Insert_Action (N, Decl);\n+            Rewrite (N,\n+              OK_Convert_To (Etype (N), New_Occurrence_Of (Temp, Loc)));\n+            Analyze_And_Resolve (N, Standard_Integer);\n+         end;\n+\n       else\n          Do_Multiply_Fixed_Fixed (N);\n       end if;"}, {"sha": "d98645c0cab127eb4b1fffbbff78036a54624b50", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e8de1a820f28cfdd7b8a588dd28277cc8db25ce3", "patch": "@@ -111,7 +111,7 @@ package body Freeze is\n    --  itself is frozen. Check that the expression does not include references\n    --  to deferred constants without completion. We report this at the freeze\n    --  point of the function, to provide a better error message.\n-\n+   --\n    --  In most cases the expression itself is frozen by the time the function\n    --  itself is frozen, because the formals will be frozen by then. However,\n    --  Attribute references to outer types are freeze points for those types;\n@@ -664,7 +664,6 @@ package body Freeze is\n             if Present (Tag_Assign) then\n                Append_Freeze_Action (E, Tag_Assign);\n             end if;\n-\n          end if;\n       end if;\n    end Check_Address_Clause;\n@@ -1295,6 +1294,7 @@ package body Freeze is\n \n          elsif Nkind (Nod) = N_Attribute_Reference then\n             Analyze (Prefix (Nod));\n+\n             if Is_Entity_Name (Prefix (Nod))\n               and then Is_Type (Entity (Prefix (Nod)))\n             then\n@@ -2398,24 +2398,6 @@ package body Freeze is\n                         Set_Has_Non_Standard_Rep (Base_Type (Arr), True);\n                         Set_Is_Bit_Packed_Array  (Base_Type (Arr), True);\n                         Set_Is_Packed            (Base_Type (Arr), True);\n-\n-                        --  Make sure that we have the necessary routines to\n-                        --  implement the packing, and complain now if not.\n-\n-                        declare\n-                           CS : constant Int   := UI_To_Int (Csiz);\n-                           RE : constant RE_Id := Get_Id (CS);\n-\n-                        begin\n-                           if RE /= RE_Null\n-                             and then not RTE_Available (RE)\n-                           then\n-                              Error_Msg_CRT\n-                                (\"packing of \" & UI_Image (Csiz)\n-                                 & \"-bit components\",\n-                                 First_Subtype (Etype (Arr)));\n-                           end if;\n-                        end;\n                      end if;\n                   end;\n                end if;\n@@ -2668,6 +2650,37 @@ package body Freeze is\n             Create_Packed_Array_Impl_Type (Arr);\n             Freeze_And_Append (Packed_Array_Impl_Type (Arr), N, Result);\n \n+            --  Make sure that we have the necessary routines to implement the\n+            --  packing, and complain now if not. Note that we only test this\n+            --  for constrained array types.\n+\n+            if Is_Constrained (Arr)\n+              and then Is_Bit_Packed_Array (Arr)\n+              and then Present (Packed_Array_Impl_Type (Arr))\n+              and then Is_Array_Type (Packed_Array_Impl_Type (Arr))\n+            then\n+               declare\n+                  CS : constant Uint  := Component_Size (Arr);\n+                  RE : constant RE_Id := Get_Id (UI_To_Int (CS));\n+\n+               begin\n+                  if RE /= RE_Null\n+                    and then not RTE_Available (RE)\n+                  then\n+                     Error_Msg_CRT\n+                       (\"packing of \" & UI_Image (CS) & \"-bit components\",\n+                        First_Subtype (Etype (Arr)));\n+\n+                     --  Cancel the packing\n+\n+                     Set_Is_Packed (Base_Type (Arr), False);\n+                     Set_Is_Bit_Packed_Array (Base_Type (Arr), False);\n+                     Set_Packed_Array_Impl_Type (Arr, Empty);\n+                     goto Skip_Packed;\n+                  end if;\n+               end;\n+            end if;\n+\n             --  Size information of packed array type is copied to the array\n             --  type, since this is really the representation. But do not\n             --  override explicit existing size values. If the ancestor subtype\n@@ -2689,6 +2702,8 @@ package body Freeze is\n             end if;\n          end if;\n \n+         <<Skip_Packed>>\n+\n          --  For non-packed arrays set the alignment of the array to the\n          --  alignment of the component type if it is unknown. Skip this\n          --  in atomic case (atomic arrays may need larger alignments).\n@@ -4561,12 +4576,12 @@ package body Freeze is\n                   if Is_CPP_Class (Etype (E)) then\n                      Error_Msg_NE\n                        (\"\\} may need a cpp_constructor\",\n-                       Object_Definition (Parent (E)), Etype (E));\n+                        Object_Definition (Parent (E)), Etype (E));\n \n                   elsif Present (Expression (Parent (E))) then\n                      Error_Msg_N --  CODEFIX\n                        (\"\\maybe a class-wide type was meant\",\n-                         Object_Definition (Parent (E)));\n+                        Object_Definition (Parent (E)));\n                   end if;\n                end if;\n \n@@ -5432,7 +5447,7 @@ package body Freeze is\n                Check_Suspicious_Modulus (E);\n             end if;\n \n-         --  the pool applies to named and anonymous access types, but not\n+         --  The pool applies to named and anonymous access types, but not\n          --  to subprogram and to  internal types generated for 'Access\n          --  references.\n "}]}