{"sha": "b7ca416f49abaa58b45bad5be31b9e58cf306481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdjYTQxNmY0OWFiYWE1OGI0NWJhZDViZTMxYjllNThjZjMwNjQ4MQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-11-25T23:10:27Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-11-25T23:10:27Z"}, "message": "parts of PR rtl-opt/18463, rtl-opt/17647\n\n2004-11-25  Andrew Pinski <pinskia@physics.uc.edu>\n\n        parts of PR rtl-opt/18463, rtl-opt/17647\n        * cse.c (canon_for_address): New function.\n        (find_best_addr): Call canon_for_address before getting the\n        address's cost when checking if we should take that address.\n\nFrom-SVN: r91308", "tree": {"sha": "cf03c67c70949b50f401104d29aba73b079b217f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf03c67c70949b50f401104d29aba73b079b217f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7ca416f49abaa58b45bad5be31b9e58cf306481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ca416f49abaa58b45bad5be31b9e58cf306481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ca416f49abaa58b45bad5be31b9e58cf306481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ca416f49abaa58b45bad5be31b9e58cf306481/comments", "author": null, "committer": null, "parents": [{"sha": "d2e398dfc83188c4a94e191d51689ab56e0991a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e398dfc83188c4a94e191d51689ab56e0991a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2e398dfc83188c4a94e191d51689ab56e0991a0"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "54fe27c5da37008c02df6b294f02ea85bd848257", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ca416f49abaa58b45bad5be31b9e58cf306481/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ca416f49abaa58b45bad5be31b9e58cf306481/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7ca416f49abaa58b45bad5be31b9e58cf306481", "patch": "@@ -1,3 +1,10 @@\n+2004-11-25  Andrew Pinski <pinskia@physics.uc.edu>\n+\n+\tparts of PR rtl-opt/18463, rtl-opt/17647\n+\t* cse.c (canon_for_address): New function.\n+\t(find_best_addr): Call canon_for_address before getting the\n+\taddress's cost when checking if we should take that address.\n+\n 2004-11-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-phinodes.c (add_phi_arg): Take \"tree\" instead of"}, {"sha": "9ea5297caaff86697a5941d3830f64576e3949a6", "filename": "gcc/cse.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ca416f49abaa58b45bad5be31b9e58cf306481/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ca416f49abaa58b45bad5be31b9e58cf306481/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=b7ca416f49abaa58b45bad5be31b9e58cf306481", "patch": "@@ -761,6 +761,57 @@ approx_reg_cost (rtx x)\n   return cost;\n }\n \n+/* Returns a canonical version of X for the address, from the point of view,\n+   that all multiplications are repesented as MULT instead of the multiply\n+   by a power of 2 being repesented as ASHIFT.  */\n+\n+static rtx\n+canon_for_address (rtx x)\n+{\n+  enum rtx_code code;\n+  enum machine_mode mode;\n+  rtx new = 0;\n+  int i;\n+  const char *fmt;\n+  \n+  if (!x)\n+    return x;\n+  \n+  code = GET_CODE (x);\n+  mode = GET_MODE (x);\n+  \n+  switch (code)\n+    {\n+    case ASHIFT:\n+      if (GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t  && INTVAL (XEXP (x, 1)) < GET_MODE_BITSIZE (mode)\n+\t  && INTVAL (XEXP (x, 1)) >= 0)\n+        {\n+\t  new = canon_for_address (XEXP (x, 0));\n+\t  new = gen_rtx_MULT (mode, new,\n+\t\t\t      gen_int_mode ((HOST_WIDE_INT) 1\n+\t\t\t\t            << INTVAL (XEXP (x, 1)),\n+\t\t\t\t\t    mode));\n+\t}\n+      break;\n+    default:\n+      break;\n+      \n+    }\n+  if (new)\n+    return new;\n+  \n+  /* Now recursively process each operand of this operation.  */\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = 0; i < GET_RTX_LENGTH (code); i++)\n+    if (fmt[i] == 'e')\n+      {\n+\tnew = canon_for_address (XEXP (x, i));\n+\tXEXP (x, i) = new;\n+      }\n+  return x;\n+}\n+\n /* Return a negative value if an rtx A, whose costs are given by COST_A\n    and REGCOST_A, is more desirable than an rtx B.\n    Return a positive value if A is less desirable, or 0 if the two are\n@@ -2933,6 +2984,11 @@ find_best_addr (rtx insn, rtx *loc, enum machine_mode mode)\n \t\trtx new = simplify_gen_binary (GET_CODE (*loc), Pmode,\n \t\t\t\t\t       p->exp, op1);\n \t\tint new_cost;\n+\t\t\n+\t\t/* Get the canonical version of the address so we can accept\n+\t\t   more. */\n+\t\tnew = canon_for_address (new);\n+\t\t\n \t\tnew_cost = address_cost (new, mode);\n \n \t\tif (new_cost < best_addr_cost"}]}