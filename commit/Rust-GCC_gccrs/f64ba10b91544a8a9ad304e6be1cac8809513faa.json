{"sha": "f64ba10b91544a8a9ad304e6be1cac8809513faa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0YmExMGI5MTU0NGE4YTlhZDMwNGU2YmUxY2FjODgwOTUxM2ZhYQ==", "commit": {"author": {"name": "Senthil Kumar Selvaraj", "email": "senthil_kumar.selvaraj@atmel.com", "date": "2015-10-28T17:35:27Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2015-10-28T17:35:27Z"}, "message": "re PR target/67839 (Bit addressable instructions generated for invalid memory address)\n\ngcc/ChangeLog\n\n\tPR target/67839\n\t* config/avr/predicates.md (low_io_address_operand): Don't\n\tconsider MODE when computing upper bound.\n\t(io_address_operand): Likewise.\n\ngcc/testsuite/ChangeLog\n\n\tPR target/67839\n\t* gcc.target/avr/pr67839.c: New test.\n\nFrom-SVN: r229495", "tree": {"sha": "a95df8b1a41358fb5dd2000d81813deb758900bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a95df8b1a41358fb5dd2000d81813deb758900bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f64ba10b91544a8a9ad304e6be1cac8809513faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64ba10b91544a8a9ad304e6be1cac8809513faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64ba10b91544a8a9ad304e6be1cac8809513faa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64ba10b91544a8a9ad304e6be1cac8809513faa/comments", "author": null, "committer": null, "parents": [{"sha": "c5ab2fd47817b89703839f11c458ccba966cfd65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ab2fd47817b89703839f11c458ccba966cfd65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ab2fd47817b89703839f11c458ccba966cfd65"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "791aaf8fb65e6018604e8b5ddc08801fd67f07fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ba10b91544a8a9ad304e6be1cac8809513faa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ba10b91544a8a9ad304e6be1cac8809513faa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f64ba10b91544a8a9ad304e6be1cac8809513faa", "patch": "@@ -1,3 +1,10 @@\n+2015-10-05  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\tPR target/67839\n+\t* config/avr/predicates.md (low_io_address_operand): Don't\n+\tconsider MODE when computing upper bound.\n+\t(io_address_operand): Likewise.\n+\n 2015-10-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* fold-const.c (operand_equal_p): Do not verify that types are"}, {"sha": "622bc0b0831a8bd9cd093db3f7419a9542a506de", "filename": "gcc/config/avr/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ba10b91544a8a9ad304e6be1cac8809513faa/gcc%2Fconfig%2Favr%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ba10b91544a8a9ad304e6be1cac8809513faa/gcc%2Fconfig%2Favr%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fpredicates.md?ref=f64ba10b91544a8a9ad304e6be1cac8809513faa", "patch": "@@ -46,7 +46,7 @@\n (define_special_predicate \"low_io_address_operand\"\n   (ior (and (match_code \"const_int\")\n \t    (match_test \"IN_RANGE (INTVAL (op) - avr_arch->sfr_offset,\n-\t\t\t\t   0, 0x20 - GET_MODE_SIZE (mode))\"))\n+\t\t\t\t   0, 0x1F)\"))\n        (and (match_code \"symbol_ref\")\n \t    (match_test \"SYMBOL_REF_FLAGS (op) & SYMBOL_FLAG_IO_LOW\"))))\n \n@@ -60,7 +60,7 @@\n (define_special_predicate \"io_address_operand\"\n   (ior (and (match_code \"const_int\")\n \t    (match_test \"IN_RANGE (INTVAL (op) - avr_arch->sfr_offset,\n-\t\t\t\t   0, 0x40 - GET_MODE_SIZE (mode))\"))\n+\t\t\t\t   0, 0x3F)\"))\n        (and (match_code \"symbol_ref\")\n \t    (match_test \"SYMBOL_REF_FLAGS (op) & SYMBOL_FLAG_IO\"))))\n "}, {"sha": "cc04c43bfef508879d8062d0ccc416a44cdcaaeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ba10b91544a8a9ad304e6be1cac8809513faa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ba10b91544a8a9ad304e6be1cac8809513faa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f64ba10b91544a8a9ad304e6be1cac8809513faa", "patch": "@@ -1,3 +1,8 @@\n+2015-10-05  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\tPR target/67839\n+\t* gcc.target/avr/pr67839.c: New test.\n+\n 2015-10-28  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/operand-equal-2.c: Adjust."}, {"sha": "604ab4b7592faa17b5cc8a1b6f15a9ff1993770c", "filename": "gcc/testsuite/gcc.target/avr/pr67839.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ba10b91544a8a9ad304e6be1cac8809513faa/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr67839.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ba10b91544a8a9ad304e6be1cac8809513faa/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr67839.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr67839.c?ref=f64ba10b91544a8a9ad304e6be1cac8809513faa", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+/* { dg-final { scan-assembler \"sbi 0x1f,0\" } } */\n+/* { dg-final { scan-assembler \"cbi 0x1f,0\" } } */\n+/* { dg-final { scan-assembler-not \"sbi 0x20,0\" } } */\n+/* { dg-final { scan-assembler-not \"cbi 0x20,0\" } } */\n+/* { dg-final { scan-assembler \"in r\\\\d+,__SREG__\" } } */\n+/* { dg-final { scan-assembler \"out __SREG__,r\\\\d+\" } } */\n+/* { dg-final { scan-assembler-not \"in r\\\\d+,0x40\" } } */\n+/* { dg-final { scan-assembler-not \"out 0x40, r\\\\d+\" } } */\n+\n+/* This testcase verifies that SBI/CBI/SBIS/SBIC\n+   and IN/OUT instructions are not generated for\n+   an IO addresses outside the valid range.\n+*/\n+#define IO_ADDR(x) (*((volatile char *)x + __AVR_SFR_OFFSET__))\n+int main ()\n+{\n+  IO_ADDR(0x1f) |= 1;\n+  IO_ADDR(0x1f) &= 0xFE;\n+\n+  IO_ADDR(0x20) |= 1;\n+  IO_ADDR(0x20) &= 0xFE;\n+\n+  IO_ADDR(0x3f) = IO_ADDR(0x3f);\n+\n+  IO_ADDR(0x40) = IO_ADDR(0x40);\n+  return 0;\n+}"}]}