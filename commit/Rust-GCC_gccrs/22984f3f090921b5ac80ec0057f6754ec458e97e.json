{"sha": "22984f3f090921b5ac80ec0057f6754ec458e97e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5ODRmM2YwOTA5MjFiNWFjODBlYzAwNTdmNjc1NGVjNDU4ZTk3ZQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-11-05T18:59:45Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-11-05T20:26:49Z"}, "message": "Pass multi-range from range_query::value_*  routines\n\nfix range-ops equal/not_equal to not reuse the result range as intermediary.\nvalue_query::value routines should pasa multi-range in as some other rangeop\nroutines build into this result, so we may need better precision.\n\n\tgcc/\n\tPR tree-optimization/97725\n\t* range-op.cc (operator_equal::fold_range): Use new tmp value.\n\t(operator_not_equal::fold_range): Ditto.\n\t* value-query.cc (range_query::value_of_expr): Use int_range_max\n\tnot a value_range.\n\t(range_query::value_on_edge): Ditto.\n\t(range_query::value_of_stmt): Ditto.\n\tgcc/testsuite/\n\t* gcc.dg/pr97725.c: New.", "tree": {"sha": "02c1c6045d4f6a5235b1b589932c87069da77fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02c1c6045d4f6a5235b1b589932c87069da77fcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22984f3f090921b5ac80ec0057f6754ec458e97e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22984f3f090921b5ac80ec0057f6754ec458e97e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22984f3f090921b5ac80ec0057f6754ec458e97e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22984f3f090921b5ac80ec0057f6754ec458e97e/comments", "author": null, "committer": null, "parents": [{"sha": "d16d45655d77d58e3f8430b9cf386b04759e01c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16d45655d77d58e3f8430b9cf386b04759e01c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16d45655d77d58e3f8430b9cf386b04759e01c7"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "f38f02e8d27479d3223c9b8ac7b478a62169a20b", "filename": "gcc/range-op.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22984f3f090921b5ac80ec0057f6754ec458e97e/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22984f3f090921b5ac80ec0057f6754ec458e97e/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=22984f3f090921b5ac80ec0057f6754ec458e97e", "patch": "@@ -428,9 +428,9 @@ operator_equal::fold_range (irange &r, tree type,\n     {\n       // If ranges do not intersect, we know the range is not equal,\n       // otherwise we don't know anything for sure.\n-      r = op1;\n-      r.intersect (op2);\n-      if (r.undefined_p ())\n+      int_range_max tmp = op1;\n+      tmp.intersect (op2);\n+      if (tmp.undefined_p ())\n \tr = range_false (type);\n       else\n \tr = range_true_and_false (type);\n@@ -513,9 +513,9 @@ operator_not_equal::fold_range (irange &r, tree type,\n     {\n       // If ranges do not intersect, we know the range is not equal,\n       // otherwise we don't know anything for sure.\n-      r = op1;\n-      r.intersect (op2);\n-      if (r.undefined_p ())\n+      int_range_max tmp = op1;\n+      tmp.intersect (op2);\n+      if (tmp.undefined_p ())\n \tr = range_true (type);\n       else\n \tr = range_true_and_false (type);"}, {"sha": "2fcb12cc3016ee21f04bb7e312eb3356deae83af", "filename": "gcc/testsuite/gcc.dg/pr97725.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22984f3f090921b5ac80ec0057f6754ec458e97e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97725.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22984f3f090921b5ac80ec0057f6754ec458e97e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97725.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97725.c?ref=22984f3f090921b5ac80ec0057f6754ec458e97e", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int a;\n+unsigned b;\n+\n+int main() {\n+  if (a) {\n+    goto L1;\n+    while (1)\n+      while (1) {\n+        long e = -1L, g;\n+        int f, h, i;\n+      L1:\n+        a = f;\n+      L2:\n+        g = e;\n+        f = h || g;\n+        e = ~(f & b);\n+        if (i || g < -1L) {\n+          ~(g || 0);\n+          break;\n+        }\n+        goto L2;\n+      }\n+  }\n+  return 0;\n+}"}, {"sha": "f9a948f3c6c411cd52cfbf90e8c78108cb808de8", "filename": "gcc/value-query.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22984f3f090921b5ac80ec0057f6754ec458e97e/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22984f3f090921b5ac80ec0057f6754ec458e97e/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=22984f3f090921b5ac80ec0057f6754ec458e97e", "patch": "@@ -78,7 +78,7 @@ tree\n range_query::value_of_expr (tree name, gimple *stmt)\n {\n   tree t;\n-  value_range r;\n+  int_range_max r;\n \n   if (!irange::supports_type_p (TREE_TYPE (name)))\n     return NULL_TREE;\n@@ -99,7 +99,7 @@ tree\n range_query::value_on_edge (edge e, tree name)\n {\n   tree t;\n-  value_range r;\n+  int_range_max r;\n \n   if (!irange::supports_type_p (TREE_TYPE (name)))\n     return NULL_TREE;\n@@ -120,7 +120,7 @@ tree\n range_query::value_of_stmt (gimple *stmt, tree name)\n {\n   tree t;\n-  value_range r;\n+  int_range_max r;\n \n   if (!name)\n     name = gimple_get_lhs (stmt);"}]}