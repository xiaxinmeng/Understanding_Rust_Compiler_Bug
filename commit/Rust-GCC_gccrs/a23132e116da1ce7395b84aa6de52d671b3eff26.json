{"sha": "a23132e116da1ce7395b84aa6de52d671b3eff26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIzMTMyZTExNmRhMWNlNzM5NWI4NGFhNmRlNTJkNjcxYjNlZmYyNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-02-13T14:03:03Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-02-13T14:03:03Z"}, "message": "* config/i386/i386.md (cmpdi_ccno_1_rex64, *cmpsi_ccno_1,\n\n\t*cmphi_ccno_1, *cmpqi_ccno_1, *movsi_xor, *movstricthi_xor,\n\t*movstrictqi_xor, *movdi_xor_rex64, *ashldi3_1_rex64,\n\t*ashldi3_cmp_rex64, *ashldi3_cconly_rex64, ashlsi3, *ashlsi3_1_zext,\n\t*ashlsi3_cmp, *ashlsi3_cconly, *ashlsi3_cmp_zext, *ashlhi3_1_lea,\n\t*ashlhi3_1, *ashlhi3_cmp, *ashlhi3_cconly, *ashlqi3_1_lea,\n\t*ashlqi3_1, *ashlqi3_cmp, *ashlqi3_cconly): Remove equivalent\n\tassembler dialect choice from asm templates.\n\nFrom-SVN: r121883", "tree": {"sha": "46a90365a378fa31b8b461d6e5d24290a5c90582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46a90365a378fa31b8b461d6e5d24290a5c90582"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a23132e116da1ce7395b84aa6de52d671b3eff26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23132e116da1ce7395b84aa6de52d671b3eff26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23132e116da1ce7395b84aa6de52d671b3eff26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23132e116da1ce7395b84aa6de52d671b3eff26/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3a86da9a8f6327d45be69d1927aede5453da58e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a86da9a8f6327d45be69d1927aede5453da58e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a86da9a8f6327d45be69d1927aede5453da58e"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "77028165963f003ae69049f0b6d71a45ad3cc72f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23132e116da1ce7395b84aa6de52d671b3eff26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23132e116da1ce7395b84aa6de52d671b3eff26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a23132e116da1ce7395b84aa6de52d671b3eff26", "patch": "@@ -1,3 +1,14 @@\n+2007-02-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (cmpdi_ccno_1_rex64, *cmpsi_ccno_1,\n+\t*cmphi_ccno_1, *cmpqi_ccno_1, *movsi_xor, *movstricthi_xor,\n+\t*movstrictqi_xor, *movdi_xor_rex64, *ashldi3_1_rex64,\n+\t*ashldi3_cmp_rex64, *ashldi3_cconly_rex64, ashlsi3, *ashlsi3_1_zext,\n+\t*ashlsi3_cmp, *ashlsi3_cconly, *ashlsi3_cmp_zext, *ashlhi3_1_lea,\n+\t*ashlhi3_1, *ashlhi3_cmp, *ashlhi3_cconly, *ashlqi3_1_lea,\n+\t*ashlqi3_1, *ashlqi3_cmp, *ashlqi3_cconly): Remove equivalent\n+\tassembler dialect choice from asm templates.\n+\n 2007-02-12  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.md (fixuns_trunc<SSEMODEF>si_1): New insn."}, {"sha": "488005b4bc3fcbf9abf3ad14b8e94d25d9625dd4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23132e116da1ce7395b84aa6de52d671b3eff26/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23132e116da1ce7395b84aa6de52d671b3eff26/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a23132e116da1ce7395b84aa6de52d671b3eff26", "patch": "@@ -584,7 +584,7 @@\n \t\t (match_operand:DI 1 \"const0_operand\" \"n,n\")))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n-   test{q}\\t{%0, %0|%0, %0}\n+   test{q}\\t%0, %0\n    cmp{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test,icmp\")\n    (set_attr \"length_immediate\" \"0,1\")\n@@ -623,7 +623,7 @@\n \t\t (match_operand:SI 1 \"const0_operand\" \"n,n\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n-   test{l}\\t{%0, %0|%0, %0}\n+   test{l}\\t%0, %0\n    cmp{l}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test,icmp\")\n    (set_attr \"length_immediate\" \"0,1\")\n@@ -662,7 +662,7 @@\n \t\t (match_operand:HI 1 \"const0_operand\" \"n,n\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n-   test{w}\\t{%0, %0|%0, %0}\n+   test{w}\\t%0, %0\n    cmp{w}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test,icmp\")\n    (set_attr \"length_immediate\" \"0,1\")\n@@ -694,7 +694,7 @@\n \t\t (match_operand:QI 1 \"const0_operand\" \"n,n\")))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n-   test{b}\\t{%0, %0|%0, %0}\n+   test{b}\\t%0, %0\n    cmp{b}\\t{$0, %0|%0, 0}\"\n   [(set_attr \"type\" \"test,icmp\")\n    (set_attr \"length_immediate\" \"0,1\")\n@@ -1168,7 +1168,7 @@\n \t(match_operand:SI 1 \"const0_operand\" \"i\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed && (!TARGET_USE_MOV0 || optimize_size)\"\n-  \"xor{l}\\t{%0, %0|%0, %0}\"\n+  \"xor{l}\\t%0, %0\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"length_immediate\" \"0\")])\n@@ -1460,7 +1460,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\n    && ((!TARGET_USE_MOV0 && !TARGET_PARTIAL_REG_STALL) || optimize_size)\"\n-  \"xor{w}\\t{%0, %0|%0, %0}\"\n+  \"xor{w}\\t%0, %0\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"HI\")\n    (set_attr \"length_immediate\" \"0\")])\n@@ -1635,7 +1635,7 @@\n \t(match_operand:QI 1 \"const0_operand\" \"i\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed && (!TARGET_USE_MOV0 || optimize_size)\"\n-  \"xor{b}\\t{%0, %0|%0, %0}\"\n+  \"xor{b}\\t%0, %0\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"length_immediate\" \"0\")])\n@@ -1962,7 +1962,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (!TARGET_USE_MOV0 || optimize_size)\n    && reload_completed\"\n-  \"xor{l}\\t{%k0, %k0|%k0, %k0}\"\n+  \"xor{l}\\t%k0, %k0\";\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"length_immediate\" \"0\")])\n@@ -10716,7 +10716,7 @@\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      return \"add{q}\\t{%0, %0|%0, %0}\";\n+      return \"add{q}\\t%0, %0\";\n \n     case TYPE_LEA:\n       gcc_assert (CONST_INT_P (operands[2]));\n@@ -10783,7 +10783,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{q}\\t{%0, %0|%0, %0}\";\n+      return \"add{q}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -10824,7 +10824,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{q}\\t{%0, %0|%0, %0}\";\n+      return \"add{q}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -10961,7 +10961,7 @@\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      return \"add{l}\\t{%0, %0|%0, %0}\";\n+      return \"add{l}\\t%0, %0\";\n \n     case TYPE_LEA:\n       return \"#\";\n@@ -11046,7 +11046,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{l}\\t{%k0, %k0|%k0, %k0}\";\n+      return \"add{l}\\t%k0, %k0\";\n \n     case TYPE_LEA:\n       return \"#\";\n@@ -11111,7 +11111,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{l}\\t{%0, %0|%0, %0}\";\n+      return \"add{l}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -11152,7 +11152,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{l}\\t{%0, %0|%0, %0}\";\n+      return \"add{l}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -11194,7 +11194,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{l}\\t{%k0, %k0|%k0, %k0}\";\n+      return \"add{l}\\t%k0, %k0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -11237,7 +11237,7 @@\n       return \"#\";\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{w}\\t{%0, %0|%0, %0}\";\n+      return \"add{w}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -11273,7 +11273,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{w}\\t{%0, %0|%0, %0}\";\n+      return \"add{w}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -11318,7 +11318,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{w}\\t{%0, %0|%0, %0}\";\n+      return \"add{w}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -11359,7 +11359,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{w}\\t{%0, %0|%0, %0}\";\n+      return \"add{w}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -11406,9 +11406,9 @@\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n       if (REG_P (operands[1]) && !ANY_QI_REG_P (operands[1]))\n-        return \"add{l}\\t{%k0, %k0|%k0, %k0}\";\n+        return \"add{l}\\t%k0, %k0\";\n       else\n-        return \"add{b}\\t{%0, %0|%0, %0}\";\n+        return \"add{b}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -11460,9 +11460,9 @@\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n       if (REG_P (operands[1]) && !ANY_QI_REG_P (operands[1]))\n-        return \"add{l}\\t{%k0, %k0|%k0, %k0}\";\n+        return \"add{l}\\t%k0, %k0\";\n       else\n-        return \"add{b}\\t{%0, %0|%0, %0}\";\n+        return \"add{b}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -11522,7 +11522,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{b}\\t{%0, %0|%0, %0}\";\n+      return \"add{b}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -11563,7 +11563,7 @@\n     {\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n-      return \"add{b}\\t{%0, %0|%0, %0}\";\n+      return \"add{b}\\t%0, %0\";\n \n     default:\n       if (REG_P (operands[2]))"}]}