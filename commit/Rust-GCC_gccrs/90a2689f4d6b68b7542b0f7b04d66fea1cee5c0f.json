{"sha": "90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBhMjY4OWY0ZDZiNjhiNzU0MmIwZjdiMDRkNjZmZWExY2VlNWMwZg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-11T18:17:19Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-11T18:17:19Z"}, "message": "In libobjc/: 2010-10-11 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-10-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * class.c (objc_getClassList): New.\n        (objc_getRequiredClass): New.\n        (objc_getMetaClass): New.\n        (objc_lookupClass): New.\n        (objc_getClass): New.\n        (__objc_get_unknown_class_handler): New.\n        (objc_setGetUnknownClassHandler): New.\n        (objc_get_class): Use __objc_get_unknown_class_handler.\n        (objc_lookup_class): Call objc_getClass.\n        * objc/objc-api.h: Updated comment and copyright notice.\n        * objc/runtime.h: Updated comments.\n        (objc_getClass): New.\n        (objc_lookupClass): New.\n        (objc_getMetaClass): New.\n        (objc_getRequiredClass): New.\n        (objc_getClassList): New.\n        (objc_setGetUnknownClassHandler): New.\n        (objc_get_unknown_class_handler): New.\n        * objc-private/runtime.h: Use __objc_private_runtime_INCLUDE_GNU\n        instead of __objc_runtime_INCLUDE_GNU as include guard.\n        * objc-private/error.h (_objc_abort): Mark as noreturn.\n\nFrom-SVN: r165326", "tree": {"sha": "10e40b8bd1fa671cf3389ef739344e4e40b99999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10e40b8bd1fa671cf3389ef739344e4e40b99999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c0098673b7e6e47c026b9827ce3e0d6ccc149db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0098673b7e6e47c026b9827ce3e0d6ccc149db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0098673b7e6e47c026b9827ce3e0d6ccc149db"}], "stats": {"total": 256, "additions": 232, "deletions": 24}, "files": [{"sha": "e2d93108abf87ecf8f1675c28c83c71831bc3493", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f", "patch": "@@ -1,3 +1,27 @@\n+2010-10-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* class.c (objc_getClassList): New.\n+\t(objc_getRequiredClass): New.\n+\t(objc_getMetaClass): New.\n+\t(objc_lookupClass): New.\n+\t(objc_getClass): New.\n+\t(__objc_get_unknown_class_handler): New.\n+\t(objc_setGetUnknownClassHandler): New.\n+\t(objc_get_class): Use __objc_get_unknown_class_handler.\n+\t(objc_lookup_class): Call objc_getClass.\n+\t* objc/objc-api.h: Updated comment and copyright notice.\n+\t* objc/runtime.h: Updated comments.\n+\t(objc_getClass): New.\n+\t(objc_lookupClass): New.\n+\t(objc_getMetaClass): New.\n+\t(objc_getRequiredClass): New.\n+\t(objc_getClassList): New.\n+\t(objc_setGetUnknownClassHandler): New.\n+\t(objc_get_unknown_class_handler): New.\n+\t* objc-private/runtime.h: Use __objc_private_runtime_INCLUDE_GNU\n+\tinstead of __objc_runtime_INCLUDE_GNU as include guard.\n+\t* objc-private/error.h (_objc_abort): Mark as noreturn.\n+\t\n 2010-10-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* Makefile.in (C_SOURCE_FILES): Added ivars.c."}, {"sha": "216d6ace0dc6f8fbd7205262832370f8297ffb17", "filename": "libobjc/class.c", "status": "modified", "additions": 119, "deletions": 9, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f", "patch": "@@ -408,9 +408,36 @@ class_table_print_histogram (void)\n \n /* This is a hook which is called by objc_get_class and\n    objc_lookup_class if the runtime is not able to find the class.  \n-   This may e.g. try to load in the class using dynamic loading.  */\n+   This may e.g. try to load in the class using dynamic loading.\n+\n+   This hook was a public, global variable in the Traditional GNU\n+   Objective-C Runtime API (objc/objc-api.h).  The modern GNU\n+   Objective-C Runtime API (objc/runtime.h) provides the\n+   objc_setGetUnknownClassHandler() function instead.\n+*/\n Class (*_objc_lookup_class) (const char *name) = 0;      /* !T:SAFE */\n \n+/* Temporarily while we still include objc/objc-api.h instead of objc/runtime.h.  */\n+#ifndef __objc_runtime_INCLUDE_GNU\n+typedef Class (*objc_get_unknown_class_handler)(const char *class_name);\n+#endif\n+\n+/* The handler currently in use.  PS: if both\n+   __obj_get_unknown_class_handler and _objc_lookup_class are defined,\n+   __objc_get_unknown_class_handler is called first.  */\n+static objc_get_unknown_class_handler\n+__objc_get_unknown_class_handler = NULL;\n+\n+objc_get_unknown_class_handler\n+objc_setGetUnknownClassHandler (objc_get_unknown_class_handler \n+\t\t\t\tnew_handler)\n+{\n+  objc_get_unknown_class_handler old_handler \n+    = __objc_get_unknown_class_handler;\n+  __objc_get_unknown_class_handler = new_handler;\n+  return old_handler;\n+}\n+\n \n /* True when class links has been resolved.  */     \n BOOL __objc_class_links_resolved = NO;                  /* !T:UNUSED */\n@@ -464,25 +491,106 @@ __objc_add_class_to_hash (Class class)\n   objc_mutex_unlock (__objc_runtime_mutex);\n }\n \n-/* Get the class object for the class named NAME.  If NAME does not\n-   identify a known class, the hook _objc_lookup_class is called.  If\n-   this fails, nil is returned.  */\n Class\n-objc_lookup_class (const char *name)\n+objc_getClass (const char *name)\n {\n   Class class;\n \n-  class = class_table_get_safe (name);\n+  if (name == NULL)\n+    return Nil;\n \n+  class = class_table_get_safe (name);\n+  \n   if (class)\n     return class;\n+  \n+  if (__objc_get_unknown_class_handler)\n+    return (*__objc_get_unknown_class_handler) (name);\n \n   if (_objc_lookup_class)\n     return (*_objc_lookup_class) (name);\n+\n+  return Nil;\n+}\n+\n+Class\n+objc_lookupClass (const char *name)\n+{\n+  if (name == NULL)\n+    return Nil;\n+  else\n+    return class_table_get_safe (name);\n+}\n+\n+Class\n+objc_getMetaClass (const char *name)\n+{\n+  Class class = objc_getClass (name);\n+\n+  if (class)\n+    return class->class_pointer;\n   else\n-    return 0;\n+    return Nil;\n }\n \n+Class\n+objc_getRequiredClass (const char *name)\n+{\n+  Class class = objc_getClass (name);\n+\n+  if (class)\n+    return class;\n+  else\n+    _objc_abort (\"objc_getRequiredClass ('%s') failed: class not found\\n\", name);\n+}\n+\n+int\n+objc_getClassList (Class *returnValue, int maxNumberOfClassesToReturn)\n+{\n+  /* Iterate over all entries in the table.  */\n+  int hash, count = 0;\n+\n+  objc_mutex_lock (__class_table_lock); \n+\n+  for (hash = 0; hash < CLASS_TABLE_SIZE; hash++)\n+    {\n+      class_node_ptr node = class_table_array[hash];\n+      \n+      while (node != NULL)\n+\t{\n+\t  if (returnValue)\n+\t    {\n+\t      if (count < maxNumberOfClassesToReturn)\n+\t\treturnValue[count] = node->pointer;\n+\t      else\n+\t\t{\n+\t\t  objc_mutex_unlock (__class_table_lock);\n+\t\t  return count;\n+\t\t}\n+\t    }\n+\t  count++;\n+\t  node = node->next;\n+\t}\n+    }\n+  \n+  objc_mutex_unlock (__class_table_lock);\n+  return count;\n+}\n+\n+/* Traditional GNU Objective-C Runtime API.  */\n+/* Get the class object for the class named NAME.  If NAME does not\n+   identify a known class, the hook _objc_lookup_class is called.  If\n+   this fails, nil is returned.  */\n+Class\n+objc_lookup_class (const char *name)\n+{\n+  return objc_getClass (name);\n+}\n+\n+/* Traditional GNU Objective-C Runtime API.  Important: this method is\n+   called automatically by the compiler while messaging (if using the\n+   traditional ABI), so it is worth keeping it fast; don't make it\n+   just a wrapper around objc_getClass().  */\n /* Get the class object for the class named NAME.  If NAME does not\n    identify a known class, the hook _objc_lookup_class is called.  If\n    this fails, an error message is issued and the system aborts.  */\n@@ -496,13 +604,15 @@ objc_get_class (const char *name)\n   if (class)\n     return class;\n \n-  if (_objc_lookup_class)\n+  if (__objc_get_unknown_class_handler)\n+    class = (*__objc_get_unknown_class_handler) (name);\n+\n+  if ((!class)  &&  _objc_lookup_class)\n     class = (*_objc_lookup_class) (name);\n \n   if (class)\n     return class;\n   \n-  /* FIXME: Should we abort the program here ?  */\n   _objc_abort (\"objc runtime: cannot find class %s\\n\", name);\n \n   return 0;"}, {"sha": "e8673f722ed51ab991d30e53eb2796c1ecaa010b", "filename": "libobjc/objc-private/error.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2Fobjc-private%2Ferror.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2Fobjc-private%2Ferror.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Ferror.h?ref=90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f", "patch": "@@ -29,9 +29,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    This should only be used for errors that really are unrecorevable:\n    failure to allocate memory, and failure to load an Objective-C\n    module.  All other usages of this function should be converted into\n-   some milder type of error.\n+   some milder type of error (unless aborting is explicitly required\n+   by the documentation/API).\n */\n void\n-_objc_abort (const char *fmt, ...);\n+_objc_abort (const char *fmt, ...) __attribute__ ((noreturn));\n \n #endif /* __objc_private_error_INCLUDE_GNU */"}, {"sha": "690427ed5a3207ceefb93b3043c6c4e17784a4e8", "filename": "libobjc/objc-private/runtime.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2Fobjc-private%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2Fobjc-private%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fruntime.h?ref=90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f", "patch": "@@ -36,8 +36,8 @@ but can almost certainly be shrinked down.\n \n */\n \n-#ifndef __objc_runtime_INCLUDE_GNU\n-#define __objc_runtime_INCLUDE_GNU\n+#ifndef __objc_private_runtime_INCLUDE_GNU\n+#define __objc_private_runtime_INCLUDE_GNU\n \n #include <stdarg.h>\t\t/* for varargs and va_list's */\n \n@@ -98,4 +98,4 @@ extern void __objc_generate_gc_type_description (Class);\n }\n #endif /* __cplusplus */\n \n-#endif /* not __objc_runtime_INCLUDE_GNU */\n+#endif /* not __objc_private_runtime_INCLUDE_GNU */"}, {"sha": "d31e13f6bf3d553dc9cfa3822e704a9bfefba991", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f", "patch": "@@ -1,6 +1,6 @@\n-/* GNU Objective-C Runtime API.\n+/* GNU Objective-C Runtime API - Traditional API\n    Copyright (C) 1993, 1995, 1996, 1997, 2001, 2002, 2003, 2004, 2005,\n-   2007, 2009 Free Software Foundation, Inc.\n+   2007, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n "}, {"sha": "b15c522235d422613c396684f32b90a0adbb972c", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 81, "deletions": 8, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=90a2689f4d6b68b7542b0f7b04d66fea1cee5c0f", "patch": "@@ -1,4 +1,4 @@\n-/* GNU Objective-C Runtime API.\n+/* GNU Objective-C Runtime API - Modern API\n    Copyright (C) 2010 Free Software Foundation, Inc.\n    Contributed by Nicola Pero <nicola.pero@meta-innovation.com>\n \n@@ -146,14 +146,16 @@ struct objc_method_description\n #define _F_GCINVISIBLE\t0x20\n \n \n-/** Internals: defined inline.  */\n+/** Implementation: the following functions are defined inline.  */\n \n /* Return the class of 'object', or Nil if the object is nil.  If\n    'object' is a class, the meta class is returned; if 'object' is a\n    meta class, the root meta class is returned (note that this is\n    different from the traditional GNU Objective-C Runtime API function\n    object_get_class(), which for a meta class would return the meta\n-   class itself).  */\n+   class itself).  This function is inline, so it is really fast and\n+   should be used instead of accessing object->class_pointer\n+   directly.  */\n static inline Class\n object_getClass (id object)\n {\n@@ -164,7 +166,7 @@ object_getClass (id object)\n }\n \n \n-/** Internals: the following functions are in selector.c.  */\n+/** Implementation: the following functions are in selector.c.  */\n \n /* Return the name of a given selector.  */\n objc_EXPORT const char *sel_getName (SEL selector);\n@@ -198,7 +200,7 @@ objc_EXPORT SEL set_registerTypedName (const char *name, const char *type);\n objc_EXPORT BOOL sel_isEqual (SEL first_selector, SEL second_selector);\n \n \n-/** Internals: the following functions are in objects.c.  */\n+/** Implementation: the following functions are in objects.c.  */\n \n /* Create an instance of class 'class_', adding extraBytes to the size\n    of the returned object.  This method allocates the appropriate\n@@ -228,7 +230,7 @@ objc_EXPORT const char * object_getClassName (id object);\n objc_EXPORT Class object_setClass (id object, Class class_);\n \n \n-/** Internals: the following functions are in ivars.c.  */\n+/** Implementation: the following functions are in ivars.c.  */\n \n /* Return an instance variable given the class and the instance\n    variable name.  This is an expensive function to call, so try to\n@@ -283,10 +285,81 @@ objc_EXPORT ptrdiff_t ivar_getOffset (Ivar variable);\n objc_EXPORT const char * ivar_getTypeEncoding (Ivar variable);\n \n \n+/** Implementation: the following functions are in class.c.  */\n+\n+/* Compatibility Note: The Apple/NeXT runtime does not have\n+   objc_get_unknown_class_handler and\n+   objc_setGetUnknownClassHandler().  They provide functionality that\n+   the traditional GNU Objective-C Runtime API used to provide via the\n+   _objc_lookup_class hook.  */\n+\n+/* An 'objc_get_unknown_class_handler' function is used by\n+   objc_getClass() to get a class that is currently unknown to the\n+   compiler.  You could use it for example to have the class loaded by\n+   dynamically loading a library.  'class_name' is the name of the\n+   class.  The function should return the Class object if it manages to\n+   load the class, and Nil if not.  */\n+typedef Class (*objc_get_unknown_class_handler)(const char *class_name);\n+\n+/* Sets a new handler function for getting unknown classes (to be used\n+   by objc_getClass () and related), and returns the previous one.\n+   This function is not safe to call in a multi-threaded environment\n+   because other threads may be trying to use the get unknown class\n+   handler while you change it!  */\n+objc_get_unknown_class_handler\n+objc_setGetUnknownClassHandler (objc_get_unknown_class_handler new_handler);\n+\n+\n+/* Return the class with name 'name', if it is already registered with\n+   the runtime.  If it is not registered, and\n+   objc_setGetUnknownClassHandler() has been called to set a handler\n+   for unknown classes, the handler is called to give it a chance to\n+   load the class in some other way.  If the class is not known to the\n+   runtime and the handler is not set or returns Nil, objc_getClass()\n+   returns Nil.  */\n+objc_EXPORT Class objc_getClass (const char *name);\n+\n+/* Return the class with name 'name', if it is already registered with\n+   the runtime.  Return Nil if not.  This function does not call the\n+   objc_get_unknown_class_handler function if the class is not\n+   found.  */\n+objc_EXPORT Class objc_lookupClass (const char *name);\n+\n+/* Return the meta class associated to the class with name 'name', if\n+   it is already registered with the runtime.  First, it finds the\n+   class using objc_getClass().  Then, it returns the associated meta\n+   class.  If the class could not be found using objc_getClass(),\n+   returns Nil.  */\n+objc_EXPORT Class objc_getMetaClass (const char *name);\n+\n+/* This is identical to objc_getClass(), but if the class is not found,\n+   it aborts the process instead of returning Nil.  */\n+objc_EXPORT Class objc_getRequiredClass (const char *name);\n+\n+/* If 'returnValue' is NULL, 'objc_getClassList' returns the number of\n+   classes currently registered with the runtime.  If 'returnValue' is\n+   not NULL, it should be a (Class *) pointer to an area of memory\n+   which can contain up to 'maxNumberOfClassesToReturn' Class records.\n+   'objc_getClassList' will fill the area pointed to by 'returnValue'\n+   with all the Classes registered with the runtime (or up to\n+   maxNumberOfClassesToReturn if there are more than\n+   maxNumberOfClassesToReturn).  The function return value is the\n+   number of classes actually returned in 'returnValue'.  */\n+objc_EXPORT int objc_getClassList (Class *returnValue, int maxNumberOfClassesToReturn); \n+\n+/* Compatibility Note: The Apple/NeXT runtime also has\n+\n+    Class objc_getFutureClass (const char *name);\n+    void objc_setFutureClass (Class class_, const char *name);\n+\n+   the documentation is unclear on what they are supposed to do, and\n+   the GNU Objective-C Runtime currently does not provide them.  */\n+\n+\n /* TODO: Add all the other functions in the API.  */\n \n \n-/** Internals: the following functions are in objc-foreach.c.  */\n+/** Implementation: the following functions are in objc-foreach.c.  */\n \n /* 'objc_enumerationMutation()' is called when a collection is\n    mutated while being \"fast enumerated\".  That is a hard error, and\n@@ -337,7 +410,7 @@ struct __objcFastEnumerationState\n */\n \n \n-/** Internals: the following functions are implemented in encoding.c.  */\n+/** Implementation: the following functions are in encoding.c.  */\n \n /* Traditional GNU Objective-C Runtime functions that are currently\n    used to implement method forwarding."}]}