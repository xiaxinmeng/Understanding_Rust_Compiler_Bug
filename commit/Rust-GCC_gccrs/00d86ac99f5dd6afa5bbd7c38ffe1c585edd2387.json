{"sha": "00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkODZhYzk5ZjVkZDZhZmE1YmJkN2MzOGZmZTFjNTg1ZWRkMjM4Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-19T08:53:52Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-19T08:53:52Z"}, "message": "libgo: Update to Go 1.3 release.\n\nFrom-SVN: r212837", "tree": {"sha": "b988e32ea14a3dc1b4718b1fdfa47bab087ae96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b988e32ea14a3dc1b4718b1fdfa47bab087ae96c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/comments", "author": null, "committer": null, "parents": [{"sha": "bcf2fc6ee0a7edbe7de4299f28b66527c07bb0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf2fc6ee0a7edbe7de4299f28b66527c07bb0a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf2fc6ee0a7edbe7de4299f28b66527c07bb0a2"}], "stats": {"total": 20100, "additions": 15264, "deletions": 4836}, "files": [{"sha": "b7e1968e24f6a6d2d0810ee8d17061ac8c51fc4f", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -1,4 +1,4 @@\n-63484e8b6b76\n+9895f9e36435\n \n The first line of this file holds the Mercurial revision number of the\n last merge done from the master library sources."}, {"sha": "ab15e90b7bdbcafe577c0d319f606e16dc485633", "filename": "libgo/Makefile.am", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -196,7 +196,6 @@ toolexeclibgodebugdir = $(toolexeclibgodir)/debug\n toolexeclibgodebug_DATA = \\\n \tdebug/dwarf.gox \\\n \tdebug/elf.gox \\\n-\tdebug/goobj.gox \\\n \tdebug/gosym.gox \\\n \tdebug/macho.gox \\\n \tdebug/pe.gox \\\n@@ -492,6 +491,7 @@ runtime_files = \\\n \truntime/go-unwind.c \\\n \truntime/go-varargs.c \\\n \truntime/env_posix.c \\\n+\truntime/heapdump.c \\\n \t$(runtime_lock_files) \\\n \truntime/mcache.c \\\n \truntime/mcentral.c \\\n@@ -689,8 +689,8 @@ else\n if LIBGO_IS_SOLARIS\n go_net_cgo_file = go/net/cgo_linux.go\n go_net_sock_file = go/net/sock_solaris.go\n-go_net_sockopt_file = go/net/sockopt_bsd.go\n-go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_posix.go\n+go_net_sockopt_file = go/net/sockopt_solaris.go\n+go_net_sockoptip_file = go/net/sockoptip_stub.go\n else\n if LIBGO_IS_FREEBSD\n go_net_cgo_file = go/net/cgo_bsd.go\n@@ -755,9 +755,13 @@ if LIBGO_IS_DARWIN\n go_net_tcpsockopt_file = go/net/tcpsockopt_darwin.go\n else\n if LIBGO_IS_SOLARIS\n-go_net_tcpsockopt_file = go/net/tcpsockopt_darwin.go\n+go_net_tcpsockopt_file = go/net/tcpsockopt_solaris.go\n+else\n+if LIBGO_IS_DRAGONFLY\n+go_net_tcpsockopt_file = go/net/tcpsockopt_dragonfly.go\n else\n-go_net_tcpsockopt_file =  go/net/tcpsockopt_unix.go\n+go_net_tcpsockopt_file = go/net/tcpsockopt_unix.go\n+endif\n endif\n endif\n endif\n@@ -850,6 +854,16 @@ endif\n endif\n endif\n \n+if LIBGO_IS_FREEBSD\n+go_os_cloexec_file = go/os/sys_freebsd.go\n+else\n+if LIBGO_IS_DARWIN\n+go_os_cloexec_file = go/os/sys_darwin.go\n+else\n+go_os_cloexec_file = go/os/sys_unix.go\n+endif\n+endif\n+\n if LIBGO_IS_SOLARIS\n go_os_stat_file = go/os/stat_solaris.go\n else\n@@ -908,6 +922,7 @@ go_os_files = \\\n \t$(go_os_stat_file) \\\n \tgo/os/str.go \\\n \t$(go_os_sys_file) \\\n+\t$(go_os_cloexec_file) \\\n \tgo/os/types.go \\\n \tgo/os/types_notwin.go\n \n@@ -942,6 +957,7 @@ go_reflect_files = \\\n \n go_regexp_files = \\\n \tgo/regexp/exec.go \\\n+\tgo/regexp/onepass.go \\\n \tgo/regexp/regexp.go\n \n go_net_rpc_files = \\\n@@ -1214,8 +1230,6 @@ go_debug_dwarf_files = \\\n go_debug_elf_files = \\\n \tgo/debug/elf/elf.go \\\n \tgo/debug/elf/file.go\n-go_debug_goobj_files = \\\n-\tgo/debug/goobj/read.go\n go_debug_gosym_files = \\\n \tgo/debug/gosym/pclntab.go \\\n \tgo/debug/gosym/symtab.go\n@@ -1744,7 +1758,9 @@ go_syscall_c_files = \\\n \n go_syscall_test_files = \\\n \t$(syscall_creds_test_file) \\\n-\tgo/syscall/passfd_test.go\n+\tgo/syscall/mmap_unix_test.go \\\n+\tgo/syscall/syscall_test.go \\\n+\tgo/syscall/syscall_unix_test.go\n \n libcalls.go: s-libcalls; @true\n s-libcalls: libcalls-list go/syscall/mksyscall.awk $(go_base_syscall_files)\n@@ -1879,7 +1895,6 @@ libgo_go_objs = \\\n \tdatabase/sql/driver.lo \\\n \tdebug/dwarf.lo \\\n \tdebug/elf.lo \\\n-\tdebug/goobj.lo \\\n \tdebug/gosym.lo \\\n \tdebug/macho.lo \\\n \tdebug/pe.lo \\\n@@ -2611,15 +2626,6 @@ debug/elf/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: debug/elf/check\n \n-@go_include@ debug/goobj.lo.dep\n-debug/goobj.lo.dep: $(go_debug_goobj_files)\n-\t$(BUILDDEPS)\n-debug/goobj.lo: $(go_debug_goobj_files)\n-\t$(BUILDPACKAGE)\n-debug/goobj/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: debug/goobj/check\n-\n @go_include@ debug/gosym.lo.dep\n debug/gosym.lo.dep: $(go_debug_gosym_files)\n \t$(BUILDDEPS)\n@@ -3447,8 +3453,6 @@ debug/dwarf.gox: debug/dwarf.lo\n \t$(BUILDGOX)\n debug/elf.gox: debug/elf.lo\n \t$(BUILDGOX)\n-debug/goobj.gox: debug/goobj.lo\n-\t$(BUILDGOX)\n debug/gosym.gox: debug/gosym.lo\n \t$(BUILDGOX)\n debug/macho.gox: debug/macho.lo"}, {"sha": "f11adca45226b7d95c59ad69744181c9213d8651", "filename": "libgo/Makefile.in", "status": "modified", "additions": 46, "deletions": 44, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -147,22 +147,22 @@ am__DEPENDENCIES_2 = bufio.lo bytes.lo bytes/index.lo crypto.lo \\\n \tcrypto/rc4.lo crypto/rsa.lo crypto/sha1.lo crypto/sha256.lo \\\n \tcrypto/sha512.lo crypto/subtle.lo crypto/tls.lo crypto/x509.lo \\\n \tcrypto/x509/pkix.lo database/sql.lo database/sql/driver.lo \\\n-\tdebug/dwarf.lo debug/elf.lo debug/goobj.lo debug/gosym.lo \\\n-\tdebug/macho.lo debug/pe.lo debug/plan9obj.lo \\\n-\tencoding/ascii85.lo encoding/asn1.lo encoding/base32.lo \\\n-\tencoding/base64.lo encoding/binary.lo encoding/csv.lo \\\n-\tencoding/gob.lo encoding/hex.lo encoding/json.lo \\\n-\tencoding/pem.lo encoding/xml.lo exp/proxy.lo exp/terminal.lo \\\n-\thtml/template.lo go/ast.lo go/build.lo go/doc.lo go/format.lo \\\n-\tgo/parser.lo go/printer.lo go/scanner.lo go/token.lo \\\n-\thash/adler32.lo hash/crc32.lo hash/crc64.lo hash/fnv.lo \\\n-\tnet/http/cgi.lo net/http/cookiejar.lo net/http/fcgi.lo \\\n-\tnet/http/httptest.lo net/http/httputil.lo net/http/pprof.lo \\\n-\timage/color.lo image/color/palette.lo image/draw.lo \\\n-\timage/gif.lo image/jpeg.lo image/png.lo index/suffixarray.lo \\\n-\tio/ioutil.lo log/syslog.lo log/syslog/syslog_c.lo math/big.lo \\\n-\tmath/cmplx.lo math/rand.lo mime/multipart.lo net/http.lo \\\n-\tnet/mail.lo net/rpc.lo net/smtp.lo net/textproto.lo net/url.lo \\\n+\tdebug/dwarf.lo debug/elf.lo debug/gosym.lo debug/macho.lo \\\n+\tdebug/pe.lo debug/plan9obj.lo encoding/ascii85.lo \\\n+\tencoding/asn1.lo encoding/base32.lo encoding/base64.lo \\\n+\tencoding/binary.lo encoding/csv.lo encoding/gob.lo \\\n+\tencoding/hex.lo encoding/json.lo encoding/pem.lo \\\n+\tencoding/xml.lo exp/proxy.lo exp/terminal.lo html/template.lo \\\n+\tgo/ast.lo go/build.lo go/doc.lo go/format.lo go/parser.lo \\\n+\tgo/printer.lo go/scanner.lo go/token.lo hash/adler32.lo \\\n+\thash/crc32.lo hash/crc64.lo hash/fnv.lo net/http/cgi.lo \\\n+\tnet/http/cookiejar.lo net/http/fcgi.lo net/http/httptest.lo \\\n+\tnet/http/httputil.lo net/http/pprof.lo image/color.lo \\\n+\timage/color/palette.lo image/draw.lo image/gif.lo \\\n+\timage/jpeg.lo image/png.lo index/suffixarray.lo io/ioutil.lo \\\n+\tlog/syslog.lo log/syslog/syslog_c.lo math/big.lo math/cmplx.lo \\\n+\tmath/rand.lo mime/multipart.lo net/http.lo net/mail.lo \\\n+\tnet/rpc.lo net/smtp.lo net/textproto.lo net/url.lo \\\n \told/regexp.lo old/template.lo os/exec.lo $(am__DEPENDENCIES_1) \\\n \tos/signal.lo os/user.lo path/filepath.lo regexp/syntax.lo \\\n \tnet/rpc/jsonrpc.lo runtime/debug.lo runtime/pprof.lo \\\n@@ -211,13 +211,14 @@ am__objects_6 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-type-float.lo go-type-identity.lo go-type-interface.lo \\\n \tgo-type-string.lo go-typedesc-equal.lo go-unsafe-new.lo \\\n \tgo-unsafe-newarray.lo go-unsafe-pointer.lo go-unwind.lo \\\n-\tgo-varargs.lo env_posix.lo $(am__objects_1) mcache.lo \\\n-\tmcentral.lo $(am__objects_2) mfixalloc.lo mgc0.lo mheap.lo \\\n-\tmsize.lo $(am__objects_3) panic.lo parfor.lo print.lo proc.lo \\\n-\truntime.lo signal_unix.lo thread.lo yield.lo $(am__objects_4) \\\n-\tchan.lo cpuprof.lo go-iface.lo lfstack.lo malloc.lo map.lo \\\n-\tmprof.lo netpoll.lo rdebug.lo reflect.lo runtime1.lo sema.lo \\\n-\tsigqueue.lo string.lo time.lo $(am__objects_5)\n+\tgo-varargs.lo env_posix.lo heapdump.lo $(am__objects_1) \\\n+\tmcache.lo mcentral.lo $(am__objects_2) mfixalloc.lo mgc0.lo \\\n+\tmheap.lo msize.lo $(am__objects_3) panic.lo parfor.lo print.lo \\\n+\tproc.lo runtime.lo signal_unix.lo thread.lo yield.lo \\\n+\t$(am__objects_4) chan.lo cpuprof.lo go-iface.lo lfstack.lo \\\n+\tmalloc.lo map.lo mprof.lo netpoll.lo rdebug.lo reflect.lo \\\n+\truntime1.lo sema.lo sigqueue.lo string.lo time.lo \\\n+\t$(am__objects_5)\n am_libgo_la_OBJECTS = $(am__objects_6)\n libgo_la_OBJECTS = $(am_libgo_la_OBJECTS)\n libgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n@@ -587,7 +588,6 @@ toolexeclibgodebugdir = $(toolexeclibgodir)/debug\n toolexeclibgodebug_DATA = \\\n \tdebug/dwarf.gox \\\n \tdebug/elf.gox \\\n-\tdebug/goobj.gox \\\n \tdebug/gosym.gox \\\n \tdebug/macho.gox \\\n \tdebug/pe.gox \\\n@@ -820,6 +820,7 @@ runtime_files = \\\n \truntime/go-unwind.c \\\n \truntime/go-varargs.c \\\n \truntime/env_posix.c \\\n+\truntime/heapdump.c \\\n \t$(runtime_lock_files) \\\n \truntime/mcache.c \\\n \truntime/mcentral.c \\\n@@ -976,13 +977,13 @@ go_mime_files = \\\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockopt_file = go/net/sockopt_bsd.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockopt_file = go/net/sockopt_bsd.go\n @LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockopt_file = go/net/sockopt_bsd.go\n-@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sockopt_file = go/net/sockopt_bsd.go\n+@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sockopt_file = go/net/sockopt_solaris.go\n @LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@go_net_sockopt_file = go/net/sockopt_linux.go\n @LIBGO_IS_LINUX_TRUE@go_net_sockopt_file = go/net/sockopt_linux.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_posix.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_posix.go\n @LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_posix.go\n-@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_posix.go\n+@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sockoptip_file = go/net/sockoptip_stub.go\n @LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@go_net_sockoptip_file = go/net/sockoptip_linux.go go/net/sockoptip_posix.go\n @LIBGO_IS_LINUX_TRUE@go_net_sockoptip_file = go/net/sockoptip_linux.go go/net/sockoptip_posix.go\n @LIBGO_IS_DRAGONFLY_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_LINUX_FALSE@go_net_sendfile_file = go/net/sendfile_stub.go\n@@ -995,8 +996,9 @@ go_mime_files = \\\n @LIBGO_IS_LINUX_TRUE@go_net_interface_file = go/net/interface_linux.go\n @LIBGO_IS_LINUX_FALSE@go_net_cloexec_file = go/net/sys_cloexec.go\n @LIBGO_IS_LINUX_TRUE@go_net_cloexec_file = go/net/sock_cloexec.go\n-@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_tcpsockopt_file = go/net/tcpsockopt_unix.go\n-@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_tcpsockopt_file = go/net/tcpsockopt_darwin.go\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_DRAGONFLY_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_tcpsockopt_file = go/net/tcpsockopt_unix.go\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_DRAGONFLY_TRUE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_tcpsockopt_file = go/net/tcpsockopt_dragonfly.go\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_tcpsockopt_file = go/net/tcpsockopt_solaris.go\n @LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_OPENBSD_FALSE@go_net_tcpsockopt_file = go/net/tcpsockopt_darwin.go\n @LIBGO_IS_OPENBSD_TRUE@go_net_tcpsockopt_file = go/net/tcpsockopt_openbsd.go\n go_net_files = \\\n@@ -1057,6 +1059,9 @@ go_net_files = \\\n @LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_sys_file = go/os/sys_uname.go\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_os_sys_file = go/os/sys_uname.go\n @LIBGO_IS_LINUX_TRUE@go_os_sys_file = go/os/sys_linux.go\n+@LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_FALSE@go_os_cloexec_file = go/os/sys_unix.go\n+@LIBGO_IS_DARWIN_TRUE@@LIBGO_IS_FREEBSD_FALSE@go_os_cloexec_file = go/os/sys_darwin.go\n+@LIBGO_IS_FREEBSD_TRUE@go_os_cloexec_file = go/os/sys_freebsd.go\n @LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_DRAGONFLY_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_stat_file = go/os/stat.go\n @LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_DRAGONFLY_TRUE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_stat_file = go/os/stat_dragonfly.go\n @LIBGO_IS_DARWIN_FALSE@@LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_OPENBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_stat_file = go/os/stat_atimespec.go\n@@ -1089,6 +1094,7 @@ go_os_files = \\\n \t$(go_os_stat_file) \\\n \tgo/os/str.go \\\n \t$(go_os_sys_file) \\\n+\t$(go_os_cloexec_file) \\\n \tgo/os/types.go \\\n \tgo/os/types_notwin.go\n \n@@ -1121,6 +1127,7 @@ go_reflect_files = \\\n \n go_regexp_files = \\\n \tgo/regexp/exec.go \\\n+\tgo/regexp/onepass.go \\\n \tgo/regexp/regexp.go\n \n go_net_rpc_files = \\\n@@ -1382,9 +1389,6 @@ go_debug_elf_files = \\\n \tgo/debug/elf/elf.go \\\n \tgo/debug/elf/file.go\n \n-go_debug_goobj_files = \\\n-\tgo/debug/goobj/read.go\n-\n go_debug_gosym_files = \\\n \tgo/debug/gosym/pclntab.go \\\n \tgo/debug/gosym/symtab.go\n@@ -1876,7 +1880,9 @@ go_syscall_c_files = \\\n \n go_syscall_test_files = \\\n \t$(syscall_creds_test_file) \\\n-\tgo/syscall/passfd_test.go\n+\tgo/syscall/mmap_unix_test.go \\\n+\tgo/syscall/syscall_test.go \\\n+\tgo/syscall/syscall_unix_test.go\n \n @LIBGO_IS_LINUX_FALSE@os_lib_inotify_lo = \n \n@@ -1950,7 +1956,6 @@ libgo_go_objs = \\\n \tdatabase/sql/driver.lo \\\n \tdebug/dwarf.lo \\\n \tdebug/elf.lo \\\n-\tdebug/goobj.lo \\\n \tdebug/gosym.lo \\\n \tdebug/macho.lo \\\n \tdebug/pe.lo \\\n@@ -2473,6 +2478,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-unsafe-pointer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-unwind.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-varargs.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/heapdump.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lfstack.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lock_futex.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lock_sema.Plo@am__quote@\n@@ -3000,6 +3006,13 @@ env_posix.lo: runtime/env_posix.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o env_posix.lo `test -f 'runtime/env_posix.c' || echo '$(srcdir)/'`runtime/env_posix.c\n \n+heapdump.lo: runtime/heapdump.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT heapdump.lo -MD -MP -MF $(DEPDIR)/heapdump.Tpo -c -o heapdump.lo `test -f 'runtime/heapdump.c' || echo '$(srcdir)/'`runtime/heapdump.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/heapdump.Tpo $(DEPDIR)/heapdump.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/heapdump.c' object='heapdump.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o heapdump.lo `test -f 'runtime/heapdump.c' || echo '$(srcdir)/'`runtime/heapdump.c\n+\n lock_sema.lo: runtime/lock_sema.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lock_sema.lo -MD -MP -MF $(DEPDIR)/lock_sema.Tpo -c -o lock_sema.lo `test -f 'runtime/lock_sema.c' || echo '$(srcdir)/'`runtime/lock_sema.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/lock_sema.Tpo $(DEPDIR)/lock_sema.Plo\n@@ -4946,15 +4959,6 @@ debug/elf/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: debug/elf/check\n \n-@go_include@ debug/goobj.lo.dep\n-debug/goobj.lo.dep: $(go_debug_goobj_files)\n-\t$(BUILDDEPS)\n-debug/goobj.lo: $(go_debug_goobj_files)\n-\t$(BUILDPACKAGE)\n-debug/goobj/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: debug/goobj/check\n-\n @go_include@ debug/gosym.lo.dep\n debug/gosym.lo.dep: $(go_debug_gosym_files)\n \t$(BUILDDEPS)\n@@ -5774,8 +5778,6 @@ debug/dwarf.gox: debug/dwarf.lo\n \t$(BUILDGOX)\n debug/elf.gox: debug/elf.lo\n \t$(BUILDGOX)\n-debug/goobj.gox: debug/goobj.lo\n-\t$(BUILDGOX)\n debug/gosym.gox: debug/gosym.lo\n \t$(BUILDGOX)\n debug/macho.gox: debug/macho.lo"}, {"sha": "e363aa793e0f32410366a702b46c75ec621b2059", "filename": "libgo/go/archive/tar/common.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Fcommon.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Fcommon.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Fcommon.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -38,6 +38,7 @@ const (\n \tTypeXGlobalHeader = 'g'    // global extended header\n \tTypeGNULongName   = 'L'    // Next file has a long name\n \tTypeGNULongLink   = 'K'    // Next file symlinks to a file w/ a long name\n+\tTypeGNUSparse     = 'S'    // sparse file\n )\n \n // A Header represents a single header in a tar archive."}, {"sha": "920a9b08f902032b37fb37ca523079cb78caab4f", "filename": "libgo/go/archive/tar/reader.go", "status": "modified", "additions": 436, "deletions": 21, "changes": 457, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Freader.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -29,12 +29,57 @@ const maxNanoSecondIntSize = 9\n // The Next method advances to the next file in the archive (including the first),\n // and then it can be treated as an io.Reader to access the file's data.\n type Reader struct {\n-\tr   io.Reader\n-\terr error\n-\tnb  int64 // number of unread bytes for current file entry\n-\tpad int64 // amount of padding (ignored) after current file entry\n+\tr    io.Reader\n+\terr  error\n+\tpad  int64          // amount of padding (ignored) after current file entry\n+\tcurr numBytesReader // reader for current file entry\n }\n \n+// A numBytesReader is an io.Reader with a numBytes method, returning the number\n+// of bytes remaining in the underlying encoded data.\n+type numBytesReader interface {\n+\tio.Reader\n+\tnumBytes() int64\n+}\n+\n+// A regFileReader is a numBytesReader for reading file data from a tar archive.\n+type regFileReader struct {\n+\tr  io.Reader // underlying reader\n+\tnb int64     // number of unread bytes for current file entry\n+}\n+\n+// A sparseFileReader is a numBytesReader for reading sparse file data from a tar archive.\n+type sparseFileReader struct {\n+\trfr *regFileReader // reads the sparse-encoded file data\n+\tsp  []sparseEntry  // the sparse map for the file\n+\tpos int64          // keeps track of file position\n+\ttot int64          // total size of the file\n+}\n+\n+// Keywords for GNU sparse files in a PAX extended header\n+const (\n+\tpaxGNUSparseNumBlocks = \"GNU.sparse.numblocks\"\n+\tpaxGNUSparseOffset    = \"GNU.sparse.offset\"\n+\tpaxGNUSparseNumBytes  = \"GNU.sparse.numbytes\"\n+\tpaxGNUSparseMap       = \"GNU.sparse.map\"\n+\tpaxGNUSparseName      = \"GNU.sparse.name\"\n+\tpaxGNUSparseMajor     = \"GNU.sparse.major\"\n+\tpaxGNUSparseMinor     = \"GNU.sparse.minor\"\n+\tpaxGNUSparseSize      = \"GNU.sparse.size\"\n+\tpaxGNUSparseRealSize  = \"GNU.sparse.realsize\"\n+)\n+\n+// Keywords for old GNU sparse headers\n+const (\n+\toldGNUSparseMainHeaderOffset               = 386\n+\toldGNUSparseMainHeaderIsExtendedOffset     = 482\n+\toldGNUSparseMainHeaderNumEntries           = 4\n+\toldGNUSparseExtendedHeaderIsExtendedOffset = 504\n+\toldGNUSparseExtendedHeaderNumEntries       = 21\n+\toldGNUSparseOffsetSize                     = 12\n+\toldGNUSparseNumBytesSize                   = 12\n+)\n+\n // NewReader creates a new Reader reading from r.\n func NewReader(r io.Reader) *Reader { return &Reader{r: r} }\n \n@@ -64,6 +109,18 @@ func (tr *Reader) Next() (*Header, error) {\n \t\ttr.skipUnread()\n \t\thdr = tr.readHeader()\n \t\tmergePAX(hdr, headers)\n+\n+\t\t// Check for a PAX format sparse file\n+\t\tsp, err := tr.checkForGNUSparsePAXHeaders(hdr, headers)\n+\t\tif err != nil {\n+\t\t\ttr.err = err\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif sp != nil {\n+\t\t\t// Current file is a PAX format GNU sparse file.\n+\t\t\t// Set the current file reader to a sparse file reader.\n+\t\t\ttr.curr = &sparseFileReader{rfr: tr.curr.(*regFileReader), sp: sp, tot: hdr.Size}\n+\t\t}\n \t\treturn hdr, nil\n \tcase TypeGNULongName:\n \t\t// We have a GNU long name header. Its contents are the real file name.\n@@ -87,6 +144,67 @@ func (tr *Reader) Next() (*Header, error) {\n \treturn hdr, tr.err\n }\n \n+// checkForGNUSparsePAXHeaders checks the PAX headers for GNU sparse headers. If they are found, then\n+// this function reads the sparse map and returns it. Unknown sparse formats are ignored, causing the file to\n+// be treated as a regular file.\n+func (tr *Reader) checkForGNUSparsePAXHeaders(hdr *Header, headers map[string]string) ([]sparseEntry, error) {\n+\tvar sparseFormat string\n+\n+\t// Check for sparse format indicators\n+\tmajor, majorOk := headers[paxGNUSparseMajor]\n+\tminor, minorOk := headers[paxGNUSparseMinor]\n+\tsparseName, sparseNameOk := headers[paxGNUSparseName]\n+\t_, sparseMapOk := headers[paxGNUSparseMap]\n+\tsparseSize, sparseSizeOk := headers[paxGNUSparseSize]\n+\tsparseRealSize, sparseRealSizeOk := headers[paxGNUSparseRealSize]\n+\n+\t// Identify which, if any, sparse format applies from which PAX headers are set\n+\tif majorOk && minorOk {\n+\t\tsparseFormat = major + \".\" + minor\n+\t} else if sparseNameOk && sparseMapOk {\n+\t\tsparseFormat = \"0.1\"\n+\t} else if sparseSizeOk {\n+\t\tsparseFormat = \"0.0\"\n+\t} else {\n+\t\t// Not a PAX format GNU sparse file.\n+\t\treturn nil, nil\n+\t}\n+\n+\t// Check for unknown sparse format\n+\tif sparseFormat != \"0.0\" && sparseFormat != \"0.1\" && sparseFormat != \"1.0\" {\n+\t\treturn nil, nil\n+\t}\n+\n+\t// Update hdr from GNU sparse PAX headers\n+\tif sparseNameOk {\n+\t\thdr.Name = sparseName\n+\t}\n+\tif sparseSizeOk {\n+\t\trealSize, err := strconv.ParseInt(sparseSize, 10, 0)\n+\t\tif err != nil {\n+\t\t\treturn nil, ErrHeader\n+\t\t}\n+\t\thdr.Size = realSize\n+\t} else if sparseRealSizeOk {\n+\t\trealSize, err := strconv.ParseInt(sparseRealSize, 10, 0)\n+\t\tif err != nil {\n+\t\t\treturn nil, ErrHeader\n+\t\t}\n+\t\thdr.Size = realSize\n+\t}\n+\n+\t// Set up the sparse map, according to the particular sparse format in use\n+\tvar sp []sparseEntry\n+\tvar err error\n+\tswitch sparseFormat {\n+\tcase \"0.0\", \"0.1\":\n+\t\tsp, err = readGNUSparseMap0x1(headers)\n+\tcase \"1.0\":\n+\t\tsp, err = readGNUSparseMap1x0(tr.curr)\n+\t}\n+\treturn sp, err\n+}\n+\n // mergePAX merges well known headers according to PAX standard.\n // In general headers with the same name as those found\n // in the header struct overwrite those found in the header\n@@ -194,6 +312,11 @@ func parsePAX(r io.Reader) (map[string]string, error) {\n \tif err != nil {\n \t\treturn nil, err\n \t}\n+\n+\t// For GNU PAX sparse format 0.0 support.\n+\t// This function transforms the sparse format 0.0 headers into sparse format 0.1 headers.\n+\tvar sparseMap bytes.Buffer\n+\n \theaders := make(map[string]string)\n \t// Each record is constructed as\n \t//     \"%d %s=%s\\n\", length, keyword, value\n@@ -211,7 +334,7 @@ func parsePAX(r io.Reader) (map[string]string, error) {\n \t\t\treturn nil, ErrHeader\n \t\t}\n \t\t// Extract everything between the decimal and the n -1 on the\n-\t\t// beginning to to eat the ' ', -1 on the end to skip the newline.\n+\t\t// beginning to eat the ' ', -1 on the end to skip the newline.\n \t\tvar record []byte\n \t\trecord, buf = buf[sp+1:n-1], buf[n:]\n \t\t// The first equals is guaranteed to mark the end of the key.\n@@ -221,7 +344,21 @@ func parsePAX(r io.Reader) (map[string]string, error) {\n \t\t\treturn nil, ErrHeader\n \t\t}\n \t\tkey, value := record[:eq], record[eq+1:]\n-\t\theaders[string(key)] = string(value)\n+\n+\t\tkeyStr := string(key)\n+\t\tif keyStr == paxGNUSparseOffset || keyStr == paxGNUSparseNumBytes {\n+\t\t\t// GNU sparse format 0.0 special key. Write to sparseMap instead of using the headers map.\n+\t\t\tsparseMap.Write(value)\n+\t\t\tsparseMap.Write([]byte{','})\n+\t\t} else {\n+\t\t\t// Normal key. Set the value in the headers map.\n+\t\t\theaders[keyStr] = string(value)\n+\t\t}\n+\t}\n+\tif sparseMap.Len() != 0 {\n+\t\t// Add sparse info to headers, chopping off the extra comma\n+\t\tsparseMap.Truncate(sparseMap.Len() - 1)\n+\t\theaders[paxGNUSparseMap] = sparseMap.String()\n \t}\n \treturn headers, nil\n }\n@@ -268,8 +405,8 @@ func (tr *Reader) octal(b []byte) int64 {\n \n // skipUnread skips any unread bytes in the existing file entry, as well as any alignment padding.\n func (tr *Reader) skipUnread() {\n-\tnr := tr.nb + tr.pad // number of bytes to skip\n-\ttr.nb, tr.pad = 0, 0\n+\tnr := tr.numBytes() + tr.pad // number of bytes to skip\n+\ttr.curr, tr.pad = nil, 0\n \tif sr, ok := tr.r.(io.Seeker); ok {\n \t\tif _, err := sr.Seek(nr, os.SEEK_CUR); err == nil {\n \t\t\treturn\n@@ -331,14 +468,14 @@ func (tr *Reader) readHeader() *Header {\n \t// so its magic bytes, like the rest of the block, are NULs.\n \tmagic := string(s.next(8)) // contains version field as well.\n \tvar format string\n-\tswitch magic {\n-\tcase \"ustar\\x0000\": // POSIX tar (1003.1-1988)\n+\tswitch {\n+\tcase magic[:6] == \"ustar\\x00\": // POSIX tar (1003.1-1988)\n \t\tif string(header[508:512]) == \"tar\\x00\" {\n \t\t\tformat = \"star\"\n \t\t} else {\n \t\t\tformat = \"posix\"\n \t\t}\n-\tcase \"ustar  \\x00\": // old GNU tar\n+\tcase magic == \"ustar  \\x00\": // old GNU tar\n \t\tformat = \"gnu\"\n \t}\n \n@@ -373,30 +510,308 @@ func (tr *Reader) readHeader() *Header {\n \n \t// Maximum value of hdr.Size is 64 GB (12 octal digits),\n \t// so there's no risk of int64 overflowing.\n-\ttr.nb = int64(hdr.Size)\n-\ttr.pad = -tr.nb & (blockSize - 1) // blockSize is a power of two\n+\tnb := int64(hdr.Size)\n+\ttr.pad = -nb & (blockSize - 1) // blockSize is a power of two\n+\n+\t// Set the current file reader.\n+\ttr.curr = &regFileReader{r: tr.r, nb: nb}\n+\n+\t// Check for old GNU sparse format entry.\n+\tif hdr.Typeflag == TypeGNUSparse {\n+\t\t// Get the real size of the file.\n+\t\thdr.Size = tr.octal(header[483:495])\n+\n+\t\t// Read the sparse map.\n+\t\tsp := tr.readOldGNUSparseMap(header)\n+\t\tif tr.err != nil {\n+\t\t\treturn nil\n+\t\t}\n+\t\t// Current file is a GNU sparse file. Update the current file reader.\n+\t\ttr.curr = &sparseFileReader{rfr: tr.curr.(*regFileReader), sp: sp, tot: hdr.Size}\n+\t}\n \n \treturn hdr\n }\n \n+// A sparseEntry holds a single entry in a sparse file's sparse map.\n+// A sparse entry indicates the offset and size in a sparse file of a\n+// block of data.\n+type sparseEntry struct {\n+\toffset   int64\n+\tnumBytes int64\n+}\n+\n+// readOldGNUSparseMap reads the sparse map as stored in the old GNU sparse format.\n+// The sparse map is stored in the tar header if it's small enough. If it's larger than four entries,\n+// then one or more extension headers are used to store the rest of the sparse map.\n+func (tr *Reader) readOldGNUSparseMap(header []byte) []sparseEntry {\n+\tisExtended := header[oldGNUSparseMainHeaderIsExtendedOffset] != 0\n+\tspCap := oldGNUSparseMainHeaderNumEntries\n+\tif isExtended {\n+\t\tspCap += oldGNUSparseExtendedHeaderNumEntries\n+\t}\n+\tsp := make([]sparseEntry, 0, spCap)\n+\ts := slicer(header[oldGNUSparseMainHeaderOffset:])\n+\n+\t// Read the four entries from the main tar header\n+\tfor i := 0; i < oldGNUSparseMainHeaderNumEntries; i++ {\n+\t\toffset := tr.octal(s.next(oldGNUSparseOffsetSize))\n+\t\tnumBytes := tr.octal(s.next(oldGNUSparseNumBytesSize))\n+\t\tif tr.err != nil {\n+\t\t\ttr.err = ErrHeader\n+\t\t\treturn nil\n+\t\t}\n+\t\tif offset == 0 && numBytes == 0 {\n+\t\t\tbreak\n+\t\t}\n+\t\tsp = append(sp, sparseEntry{offset: offset, numBytes: numBytes})\n+\t}\n+\n+\tfor isExtended {\n+\t\t// There are more entries. Read an extension header and parse its entries.\n+\t\tsparseHeader := make([]byte, blockSize)\n+\t\tif _, tr.err = io.ReadFull(tr.r, sparseHeader); tr.err != nil {\n+\t\t\treturn nil\n+\t\t}\n+\t\tisExtended = sparseHeader[oldGNUSparseExtendedHeaderIsExtendedOffset] != 0\n+\t\ts = slicer(sparseHeader)\n+\t\tfor i := 0; i < oldGNUSparseExtendedHeaderNumEntries; i++ {\n+\t\t\toffset := tr.octal(s.next(oldGNUSparseOffsetSize))\n+\t\t\tnumBytes := tr.octal(s.next(oldGNUSparseNumBytesSize))\n+\t\t\tif tr.err != nil {\n+\t\t\t\ttr.err = ErrHeader\n+\t\t\t\treturn nil\n+\t\t\t}\n+\t\t\tif offset == 0 && numBytes == 0 {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tsp = append(sp, sparseEntry{offset: offset, numBytes: numBytes})\n+\t\t}\n+\t}\n+\treturn sp\n+}\n+\n+// readGNUSparseMap1x0 reads the sparse map as stored in GNU's PAX sparse format version 1.0.\n+// The sparse map is stored just before the file data and padded out to the nearest block boundary.\n+func readGNUSparseMap1x0(r io.Reader) ([]sparseEntry, error) {\n+\tbuf := make([]byte, 2*blockSize)\n+\tsparseHeader := buf[:blockSize]\n+\n+\t// readDecimal is a helper function to read a decimal integer from the sparse map\n+\t// while making sure to read from the file in blocks of size blockSize\n+\treadDecimal := func() (int64, error) {\n+\t\t// Look for newline\n+\t\tnl := bytes.IndexByte(sparseHeader, '\\n')\n+\t\tif nl == -1 {\n+\t\t\tif len(sparseHeader) >= blockSize {\n+\t\t\t\t// This is an error\n+\t\t\t\treturn 0, ErrHeader\n+\t\t\t}\n+\t\t\toldLen := len(sparseHeader)\n+\t\t\tnewLen := oldLen + blockSize\n+\t\t\tif cap(sparseHeader) < newLen {\n+\t\t\t\t// There's more header, but we need to make room for the next block\n+\t\t\t\tcopy(buf, sparseHeader)\n+\t\t\t\tsparseHeader = buf[:newLen]\n+\t\t\t} else {\n+\t\t\t\t// There's more header, and we can just reslice\n+\t\t\t\tsparseHeader = sparseHeader[:newLen]\n+\t\t\t}\n+\n+\t\t\t// Now that sparseHeader is large enough, read next block\n+\t\t\tif _, err := io.ReadFull(r, sparseHeader[oldLen:newLen]); err != nil {\n+\t\t\t\treturn 0, err\n+\t\t\t}\n+\n+\t\t\t// Look for a newline in the new data\n+\t\t\tnl = bytes.IndexByte(sparseHeader[oldLen:newLen], '\\n')\n+\t\t\tif nl == -1 {\n+\t\t\t\t// This is an error\n+\t\t\t\treturn 0, ErrHeader\n+\t\t\t}\n+\t\t\tnl += oldLen // We want the position from the beginning\n+\t\t}\n+\t\t// Now that we've found a newline, read a number\n+\t\tn, err := strconv.ParseInt(string(sparseHeader[:nl]), 10, 0)\n+\t\tif err != nil {\n+\t\t\treturn 0, ErrHeader\n+\t\t}\n+\n+\t\t// Update sparseHeader to consume this number\n+\t\tsparseHeader = sparseHeader[nl+1:]\n+\t\treturn n, nil\n+\t}\n+\n+\t// Read the first block\n+\tif _, err := io.ReadFull(r, sparseHeader); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\t// The first line contains the number of entries\n+\tnumEntries, err := readDecimal()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\t// Read all the entries\n+\tsp := make([]sparseEntry, 0, numEntries)\n+\tfor i := int64(0); i < numEntries; i++ {\n+\t\t// Read the offset\n+\t\toffset, err := readDecimal()\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\t// Read numBytes\n+\t\tnumBytes, err := readDecimal()\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\n+\t\tsp = append(sp, sparseEntry{offset: offset, numBytes: numBytes})\n+\t}\n+\n+\treturn sp, nil\n+}\n+\n+// readGNUSparseMap0x1 reads the sparse map as stored in GNU's PAX sparse format version 0.1.\n+// The sparse map is stored in the PAX headers.\n+func readGNUSparseMap0x1(headers map[string]string) ([]sparseEntry, error) {\n+\t// Get number of entries\n+\tnumEntriesStr, ok := headers[paxGNUSparseNumBlocks]\n+\tif !ok {\n+\t\treturn nil, ErrHeader\n+\t}\n+\tnumEntries, err := strconv.ParseInt(numEntriesStr, 10, 0)\n+\tif err != nil {\n+\t\treturn nil, ErrHeader\n+\t}\n+\n+\tsparseMap := strings.Split(headers[paxGNUSparseMap], \",\")\n+\n+\t// There should be two numbers in sparseMap for each entry\n+\tif int64(len(sparseMap)) != 2*numEntries {\n+\t\treturn nil, ErrHeader\n+\t}\n+\n+\t// Loop through the entries in the sparse map\n+\tsp := make([]sparseEntry, 0, numEntries)\n+\tfor i := int64(0); i < numEntries; i++ {\n+\t\toffset, err := strconv.ParseInt(sparseMap[2*i], 10, 0)\n+\t\tif err != nil {\n+\t\t\treturn nil, ErrHeader\n+\t\t}\n+\t\tnumBytes, err := strconv.ParseInt(sparseMap[2*i+1], 10, 0)\n+\t\tif err != nil {\n+\t\t\treturn nil, ErrHeader\n+\t\t}\n+\t\tsp = append(sp, sparseEntry{offset: offset, numBytes: numBytes})\n+\t}\n+\n+\treturn sp, nil\n+}\n+\n+// numBytes returns the number of bytes left to read in the current file's entry\n+// in the tar archive, or 0 if there is no current file.\n+func (tr *Reader) numBytes() int64 {\n+\tif tr.curr == nil {\n+\t\t// No current file, so no bytes\n+\t\treturn 0\n+\t}\n+\treturn tr.curr.numBytes()\n+}\n+\n // Read reads from the current entry in the tar archive.\n // It returns 0, io.EOF when it reaches the end of that entry,\n // until Next is called to advance to the next entry.\n func (tr *Reader) Read(b []byte) (n int, err error) {\n-\tif tr.nb == 0 {\n-\t\t// file consumed\n+\tif tr.curr == nil {\n \t\treturn 0, io.EOF\n \t}\n+\tn, err = tr.curr.Read(b)\n+\tif err != nil && err != io.EOF {\n+\t\ttr.err = err\n+\t}\n+\treturn\n+}\n \n-\tif int64(len(b)) > tr.nb {\n-\t\tb = b[0:tr.nb]\n+func (rfr *regFileReader) Read(b []byte) (n int, err error) {\n+\tif rfr.nb == 0 {\n+\t\t// file consumed\n+\t\treturn 0, io.EOF\n \t}\n-\tn, err = tr.r.Read(b)\n-\ttr.nb -= int64(n)\n+\tif int64(len(b)) > rfr.nb {\n+\t\tb = b[0:rfr.nb]\n+\t}\n+\tn, err = rfr.r.Read(b)\n+\trfr.nb -= int64(n)\n \n-\tif err == io.EOF && tr.nb > 0 {\n+\tif err == io.EOF && rfr.nb > 0 {\n \t\terr = io.ErrUnexpectedEOF\n \t}\n-\ttr.err = err\n \treturn\n }\n+\n+// numBytes returns the number of bytes left to read in the file's data in the tar archive.\n+func (rfr *regFileReader) numBytes() int64 {\n+\treturn rfr.nb\n+}\n+\n+// readHole reads a sparse file hole ending at offset toOffset\n+func (sfr *sparseFileReader) readHole(b []byte, toOffset int64) int {\n+\tn64 := toOffset - sfr.pos\n+\tif n64 > int64(len(b)) {\n+\t\tn64 = int64(len(b))\n+\t}\n+\tn := int(n64)\n+\tfor i := 0; i < n; i++ {\n+\t\tb[i] = 0\n+\t}\n+\tsfr.pos += n64\n+\treturn n\n+}\n+\n+// Read reads the sparse file data in expanded form.\n+func (sfr *sparseFileReader) Read(b []byte) (n int, err error) {\n+\tif len(sfr.sp) == 0 {\n+\t\t// No more data fragments to read from.\n+\t\tif sfr.pos < sfr.tot {\n+\t\t\t// We're in the last hole\n+\t\t\tn = sfr.readHole(b, sfr.tot)\n+\t\t\treturn\n+\t\t}\n+\t\t// Otherwise, we're at the end of the file\n+\t\treturn 0, io.EOF\n+\t}\n+\tif sfr.pos < sfr.sp[0].offset {\n+\t\t// We're in a hole\n+\t\tn = sfr.readHole(b, sfr.sp[0].offset)\n+\t\treturn\n+\t}\n+\n+\t// We're not in a hole, so we'll read from the next data fragment\n+\tposInFragment := sfr.pos - sfr.sp[0].offset\n+\tbytesLeft := sfr.sp[0].numBytes - posInFragment\n+\tif int64(len(b)) > bytesLeft {\n+\t\tb = b[0:bytesLeft]\n+\t}\n+\n+\tn, err = sfr.rfr.Read(b)\n+\tsfr.pos += int64(n)\n+\n+\tif int64(n) == bytesLeft {\n+\t\t// We're done with this fragment\n+\t\tsfr.sp = sfr.sp[1:]\n+\t}\n+\n+\tif err == io.EOF && sfr.pos < sfr.tot {\n+\t\t// We reached the end of the last fragment's data, but there's a final hole\n+\t\terr = nil\n+\t}\n+\treturn\n+}\n+\n+// numBytes returns the number of bytes left to read in the sparse file's\n+// sparse-encoded data in the tar archive.\n+func (sfr *sparseFileReader) numBytes() int64 {\n+\treturn sfr.rfr.nb\n+}"}, {"sha": "9601ffe459767b2b0a585331b1008eab0b747829", "filename": "libgo/go/archive/tar/reader_test.go", "status": "modified", "additions": 319, "deletions": 1, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Freader_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -9,6 +9,7 @@ import (\n \t\"crypto/md5\"\n \t\"fmt\"\n \t\"io\"\n+\t\"io/ioutil\"\n \t\"os\"\n \t\"reflect\"\n \t\"strings\"\n@@ -54,8 +55,92 @@ var gnuTarTest = &untarTest{\n \t},\n }\n \n+var sparseTarTest = &untarTest{\n+\tfile: \"testdata/sparse-formats.tar\",\n+\theaders: []*Header{\n+\t\t{\n+\t\t\tName:     \"sparse-gnu\",\n+\t\t\tMode:     420,\n+\t\t\tUid:      1000,\n+\t\t\tGid:      1000,\n+\t\t\tSize:     200,\n+\t\t\tModTime:  time.Unix(1392395740, 0),\n+\t\t\tTypeflag: 0x53,\n+\t\t\tLinkname: \"\",\n+\t\t\tUname:    \"david\",\n+\t\t\tGname:    \"david\",\n+\t\t\tDevmajor: 0,\n+\t\t\tDevminor: 0,\n+\t\t},\n+\t\t{\n+\t\t\tName:     \"sparse-posix-0.0\",\n+\t\t\tMode:     420,\n+\t\t\tUid:      1000,\n+\t\t\tGid:      1000,\n+\t\t\tSize:     200,\n+\t\t\tModTime:  time.Unix(1392342187, 0),\n+\t\t\tTypeflag: 0x30,\n+\t\t\tLinkname: \"\",\n+\t\t\tUname:    \"david\",\n+\t\t\tGname:    \"david\",\n+\t\t\tDevmajor: 0,\n+\t\t\tDevminor: 0,\n+\t\t},\n+\t\t{\n+\t\t\tName:     \"sparse-posix-0.1\",\n+\t\t\tMode:     420,\n+\t\t\tUid:      1000,\n+\t\t\tGid:      1000,\n+\t\t\tSize:     200,\n+\t\t\tModTime:  time.Unix(1392340456, 0),\n+\t\t\tTypeflag: 0x30,\n+\t\t\tLinkname: \"\",\n+\t\t\tUname:    \"david\",\n+\t\t\tGname:    \"david\",\n+\t\t\tDevmajor: 0,\n+\t\t\tDevminor: 0,\n+\t\t},\n+\t\t{\n+\t\t\tName:     \"sparse-posix-1.0\",\n+\t\t\tMode:     420,\n+\t\t\tUid:      1000,\n+\t\t\tGid:      1000,\n+\t\t\tSize:     200,\n+\t\t\tModTime:  time.Unix(1392337404, 0),\n+\t\t\tTypeflag: 0x30,\n+\t\t\tLinkname: \"\",\n+\t\t\tUname:    \"david\",\n+\t\t\tGname:    \"david\",\n+\t\t\tDevmajor: 0,\n+\t\t\tDevminor: 0,\n+\t\t},\n+\t\t{\n+\t\t\tName:     \"end\",\n+\t\t\tMode:     420,\n+\t\t\tUid:      1000,\n+\t\t\tGid:      1000,\n+\t\t\tSize:     4,\n+\t\t\tModTime:  time.Unix(1392398319, 0),\n+\t\t\tTypeflag: 0x30,\n+\t\t\tLinkname: \"\",\n+\t\t\tUname:    \"david\",\n+\t\t\tGname:    \"david\",\n+\t\t\tDevmajor: 0,\n+\t\t\tDevminor: 0,\n+\t\t},\n+\t},\n+\tcksums: []string{\n+\t\t\"6f53234398c2449fe67c1812d993012f\",\n+\t\t\"6f53234398c2449fe67c1812d993012f\",\n+\t\t\"6f53234398c2449fe67c1812d993012f\",\n+\t\t\"6f53234398c2449fe67c1812d993012f\",\n+\t\t\"b0061974914468de549a2af8ced10316\",\n+\t},\n+}\n+\n var untarTests = []*untarTest{\n \tgnuTarTest,\n+\tsparseTarTest,\n \t{\n \t\tfile: \"testdata/star.tar\",\n \t\theaders: []*Header{\n@@ -386,7 +471,7 @@ func TestParsePAXHeader(t *testing.T) {\n func TestParsePAXTime(t *testing.T) {\n \t// Some valid PAX time values\n \ttimestamps := map[string]time.Time{\n-\t\t\"1350244992.023960108\":  time.Unix(1350244992, 23960108), // The commoon case\n+\t\t\"1350244992.023960108\":  time.Unix(1350244992, 23960108), // The common case\n \t\t\"1350244992.02396010\":   time.Unix(1350244992, 23960100), // Lower precision value\n \t\t\"1350244992.0239601089\": time.Unix(1350244992, 23960108), // Higher precision value\n \t\t\"1350244992\":            time.Unix(1350244992, 0),        // Low precision value\n@@ -423,3 +508,236 @@ func TestMergePAX(t *testing.T) {\n \t\tt.Errorf(\"incorrect merge: got %+v, want %+v\", hdr, want)\n \t}\n }\n+\n+func TestSparseEndToEnd(t *testing.T) {\n+\ttest := sparseTarTest\n+\tf, err := os.Open(test.file)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Unexpected error: %v\", err)\n+\t}\n+\tdefer f.Close()\n+\n+\ttr := NewReader(f)\n+\n+\theaders := test.headers\n+\tcksums := test.cksums\n+\tnread := 0\n+\n+\t// loop over all files\n+\tfor ; ; nread++ {\n+\t\thdr, err := tr.Next()\n+\t\tif hdr == nil || err == io.EOF {\n+\t\t\tbreak\n+\t\t}\n+\n+\t\t// check the header\n+\t\tif !reflect.DeepEqual(*hdr, *headers[nread]) {\n+\t\t\tt.Errorf(\"Incorrect header:\\nhave %+v\\nwant %+v\",\n+\t\t\t\t*hdr, headers[nread])\n+\t\t}\n+\n+\t\t// read and checksum the file data\n+\t\th := md5.New()\n+\t\t_, err = io.Copy(h, tr)\n+\t\tif err != nil {\n+\t\t\tt.Fatalf(\"Unexpected error: %v\", err)\n+\t\t}\n+\n+\t\t// verify checksum\n+\t\thave := fmt.Sprintf(\"%x\", h.Sum(nil))\n+\t\twant := cksums[nread]\n+\t\tif want != have {\n+\t\t\tt.Errorf(\"Bad checksum on file %s:\\nhave %+v\\nwant %+v\", hdr.Name, have, want)\n+\t\t}\n+\t}\n+\tif nread != len(headers) {\n+\t\tt.Errorf(\"Didn't process all files\\nexpected: %d\\nprocessed %d\\n\", len(headers), nread)\n+\t}\n+}\n+\n+type sparseFileReadTest struct {\n+\tsparseData []byte\n+\tsparseMap  []sparseEntry\n+\trealSize   int64\n+\texpected   []byte\n+}\n+\n+var sparseFileReadTests = []sparseFileReadTest{\n+\t{\n+\t\tsparseData: []byte(\"abcde\"),\n+\t\tsparseMap: []sparseEntry{\n+\t\t\t{offset: 0, numBytes: 2},\n+\t\t\t{offset: 5, numBytes: 3},\n+\t\t},\n+\t\trealSize: 8,\n+\t\texpected: []byte(\"ab\\x00\\x00\\x00cde\"),\n+\t},\n+\t{\n+\t\tsparseData: []byte(\"abcde\"),\n+\t\tsparseMap: []sparseEntry{\n+\t\t\t{offset: 0, numBytes: 2},\n+\t\t\t{offset: 5, numBytes: 3},\n+\t\t},\n+\t\trealSize: 10,\n+\t\texpected: []byte(\"ab\\x00\\x00\\x00cde\\x00\\x00\"),\n+\t},\n+\t{\n+\t\tsparseData: []byte(\"abcde\"),\n+\t\tsparseMap: []sparseEntry{\n+\t\t\t{offset: 1, numBytes: 3},\n+\t\t\t{offset: 6, numBytes: 2},\n+\t\t},\n+\t\trealSize: 8,\n+\t\texpected: []byte(\"\\x00abc\\x00\\x00de\"),\n+\t},\n+\t{\n+\t\tsparseData: []byte(\"abcde\"),\n+\t\tsparseMap: []sparseEntry{\n+\t\t\t{offset: 1, numBytes: 3},\n+\t\t\t{offset: 6, numBytes: 2},\n+\t\t},\n+\t\trealSize: 10,\n+\t\texpected: []byte(\"\\x00abc\\x00\\x00de\\x00\\x00\"),\n+\t},\n+\t{\n+\t\tsparseData: []byte(\"\"),\n+\t\tsparseMap:  nil,\n+\t\trealSize:   2,\n+\t\texpected:   []byte(\"\\x00\\x00\"),\n+\t},\n+}\n+\n+func TestSparseFileReader(t *testing.T) {\n+\tfor i, test := range sparseFileReadTests {\n+\t\tr := bytes.NewReader(test.sparseData)\n+\t\tnb := int64(r.Len())\n+\t\tsfr := &sparseFileReader{\n+\t\t\trfr: &regFileReader{r: r, nb: nb},\n+\t\t\tsp:  test.sparseMap,\n+\t\t\tpos: 0,\n+\t\t\ttot: test.realSize,\n+\t\t}\n+\t\tif sfr.numBytes() != nb {\n+\t\t\tt.Errorf(\"test %d: Before reading, sfr.numBytes() = %d, want %d\", i, sfr.numBytes(), nb)\n+\t\t}\n+\t\tbuf, err := ioutil.ReadAll(sfr)\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"test %d: Unexpected error: %v\", i, err)\n+\t\t}\n+\t\tif e := test.expected; !bytes.Equal(buf, e) {\n+\t\t\tt.Errorf(\"test %d: Contents = %v, want %v\", i, buf, e)\n+\t\t}\n+\t\tif sfr.numBytes() != 0 {\n+\t\t\tt.Errorf(\"test %d: After draining the reader, numBytes() was nonzero\", i)\n+\t\t}\n+\t}\n+}\n+\n+func TestSparseIncrementalRead(t *testing.T) {\n+\tsparseMap := []sparseEntry{{10, 2}}\n+\tsparseData := []byte(\"Go\")\n+\texpected := \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00Go\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+\n+\tr := bytes.NewReader(sparseData)\n+\tnb := int64(r.Len())\n+\tsfr := &sparseFileReader{\n+\t\trfr: &regFileReader{r: r, nb: nb},\n+\t\tsp:  sparseMap,\n+\t\tpos: 0,\n+\t\ttot: int64(len(expected)),\n+\t}\n+\n+\t// We'll read the data 6 bytes at a time, with a hole of size 10 at\n+\t// the beginning and one of size 8 at the end.\n+\tvar outputBuf bytes.Buffer\n+\tbuf := make([]byte, 6)\n+\tfor {\n+\t\tn, err := sfr.Read(buf)\n+\t\tif err == io.EOF {\n+\t\t\tbreak\n+\t\t}\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"Read: unexpected error %v\\n\", err)\n+\t\t}\n+\t\tif n > 0 {\n+\t\t\t_, err := outputBuf.Write(buf[:n])\n+\t\t\tif err != nil {\n+\t\t\t\tt.Errorf(\"Write: unexpected error %v\\n\", err)\n+\t\t\t}\n+\t\t}\n+\t}\n+\tgot := outputBuf.String()\n+\tif got != expected {\n+\t\tt.Errorf(\"Contents = %v, want %v\", got, expected)\n+\t}\n+}\n+\n+func TestReadGNUSparseMap0x1(t *testing.T) {\n+\theaders := map[string]string{\n+\t\tpaxGNUSparseNumBlocks: \"4\",\n+\t\tpaxGNUSparseMap:       \"0,5,10,5,20,5,30,5\",\n+\t}\n+\texpected := []sparseEntry{\n+\t\t{offset: 0, numBytes: 5},\n+\t\t{offset: 10, numBytes: 5},\n+\t\t{offset: 20, numBytes: 5},\n+\t\t{offset: 30, numBytes: 5},\n+\t}\n+\n+\tsp, err := readGNUSparseMap0x1(headers)\n+\tif err != nil {\n+\t\tt.Errorf(\"Unexpected error: %v\", err)\n+\t}\n+\tif !reflect.DeepEqual(sp, expected) {\n+\t\tt.Errorf(\"Incorrect sparse map: got %v, wanted %v\", sp, expected)\n+\t}\n+}\n+\n+func TestReadGNUSparseMap1x0(t *testing.T) {\n+\t// This test uses lots of holes so the sparse header takes up more than two blocks\n+\tnumEntries := 100\n+\texpected := make([]sparseEntry, 0, numEntries)\n+\tsparseMap := new(bytes.Buffer)\n+\n+\tfmt.Fprintf(sparseMap, \"%d\\n\", numEntries)\n+\tfor i := 0; i < numEntries; i++ {\n+\t\toffset := int64(2048 * i)\n+\t\tnumBytes := int64(1024)\n+\t\texpected = append(expected, sparseEntry{offset: offset, numBytes: numBytes})\n+\t\tfmt.Fprintf(sparseMap, \"%d\\n%d\\n\", offset, numBytes)\n+\t}\n+\n+\t// Make the header the smallest multiple of blockSize that fits the sparseMap\n+\theaderBlocks := (sparseMap.Len() + blockSize - 1) / blockSize\n+\tbufLen := blockSize * headerBlocks\n+\tbuf := make([]byte, bufLen)\n+\tcopy(buf, sparseMap.Bytes())\n+\n+\t// Get an reader to read the sparse map\n+\tr := bytes.NewReader(buf)\n+\n+\t// Read the sparse map\n+\tsp, err := readGNUSparseMap1x0(r)\n+\tif err != nil {\n+\t\tt.Errorf(\"Unexpected error: %v\", err)\n+\t}\n+\tif !reflect.DeepEqual(sp, expected) {\n+\t\tt.Errorf(\"Incorrect sparse map: got %v, wanted %v\", sp, expected)\n+\t}\n+}\n+\n+func TestUninitializedRead(t *testing.T) {\n+\ttest := gnuTarTest\n+\tf, err := os.Open(test.file)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Unexpected error: %v\", err)\n+\t}\n+\tdefer f.Close()\n+\n+\ttr := NewReader(f)\n+\t_, err = tr.Read([]byte{})\n+\tif err == nil || err != io.EOF {\n+\t\tt.Errorf(\"Unexpected error: %v, wanted %v\", err, io.EOF)\n+\t}\n+\n+}"}, {"sha": "8bd4e74d50f9c8961f80a887ab7d6449e032048b", "filename": "libgo/go/archive/tar/testdata/sparse-formats.tar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fsparse-formats.tar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fsparse-formats.tar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fsparse-formats.tar?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387"}, {"sha": "5960ee824784ffeacb976a9c648be41b0281508b", "filename": "libgo/go/archive/tar/testdata/writer-big-long.tar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fwriter-big-long.tar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fwriter-big-long.tar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Ftestdata%2Fwriter-big-long.tar?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387"}, {"sha": "6eff6f6f84d8eaa903b87c135ec4f5f6684b4667", "filename": "libgo/go/archive/tar/writer.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Fwriter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Fwriter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Fwriter.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -218,8 +218,8 @@ func (tw *Writer) writeHeader(hdr *Header, allowPax bool) error {\n \t\t\t\ttw.cString(prefixHeaderBytes, prefix, false, paxNone, nil)\n \n \t\t\t\t// Use the ustar magic if we used ustar long names.\n-\t\t\t\tif len(prefix) > 0 {\n-\t\t\t\t\tcopy(header[257:265], []byte(\"ustar\\000\"))\n+\t\t\t\tif len(prefix) > 0 && !tw.usedBinary {\n+\t\t\t\t\tcopy(header[257:265], []byte(\"ustar\\x00\"))\n \t\t\t\t}\n \t\t\t}\n \t\t}"}, {"sha": "512fab1a6f1c18496f7ca834dff08347c814f0cf", "filename": "libgo/go/archive/tar/writer_test.go", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Fwriter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Ftar%2Fwriter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Fwriter_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -103,6 +103,29 @@ var writerTests = []*writerTest{\n \t\t\t},\n \t\t},\n \t},\n+\t// The truncated test file was produced using these commands:\n+\t//   dd if=/dev/zero bs=1048576 count=16384 > (longname/)*15 /16gig.txt\n+\t//   tar -b 1 -c -f- (longname/)*15 /16gig.txt | dd bs=512 count=8 > writer-big-long.tar\n+\t{\n+\t\tfile: \"testdata/writer-big-long.tar\",\n+\t\tentries: []*writerTestEntry{\n+\t\t\t{\n+\t\t\t\theader: &Header{\n+\t\t\t\t\tName:     strings.Repeat(\"longname/\", 15) + \"16gig.txt\",\n+\t\t\t\t\tMode:     0644,\n+\t\t\t\t\tUid:      1000,\n+\t\t\t\t\tGid:      1000,\n+\t\t\t\t\tSize:     16 << 30,\n+\t\t\t\t\tModTime:  time.Unix(1399583047, 0),\n+\t\t\t\t\tTypeflag: '0',\n+\t\t\t\t\tUname:    \"guillaume\",\n+\t\t\t\t\tGname:    \"guillaume\",\n+\t\t\t\t},\n+\t\t\t\t// fake contents\n+\t\t\t\tcontents: strings.Repeat(\"\\x00\", 4<<10),\n+\t\t\t},\n+\t\t},\n+\t},\n \t// This file was produced using gnu tar 1.17\n \t// gnutar  -b 4 --format=ustar (longname/)*15 + file.txt\n \t{"}, {"sha": "cb28e8324235544fa89130fd3a96f2af1a3837e1", "filename": "libgo/go/archive/zip/struct.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Fzip%2Fstruct.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Farchive%2Fzip%2Fstruct.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Fstruct.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -174,13 +174,13 @@ func timeToMsDosTime(t time.Time) (fDate uint16, fTime uint16) {\n \treturn\n }\n \n-// ModTime returns the modification time.\n+// ModTime returns the modification time in UTC.\n // The resolution is 2s.\n func (h *FileHeader) ModTime() time.Time {\n \treturn msDosTimeToTime(h.ModifiedDate, h.ModifiedTime)\n }\n \n-// SetModTime sets the ModifiedTime and ModifiedDate fields to the given time.\n+// SetModTime sets the ModifiedTime and ModifiedDate fields to the given time in UTC.\n // The resolution is 2s.\n func (h *FileHeader) SetModTime(t time.Time) {\n \th.ModifiedDate, h.ModifiedTime = timeToMsDosTime(t)"}, {"sha": "61ef26191008e74c1d4ba0cde5885f825bb8791c", "filename": "libgo/go/bufio/bufio.go", "status": "modified", "additions": 95, "deletions": 52, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbufio%2Fbufio.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbufio%2Fbufio.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fbufio.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -38,6 +38,7 @@ type Reader struct {\n }\n \n const minReadBufferSize = 16\n+const maxConsecutiveEmptyReads = 100\n \n // NewReaderSize returns a new Reader whose buffer has at least the specified\n // size. If the argument io.Reader is already a Reader with large enough\n@@ -87,15 +88,26 @@ func (b *Reader) fill() {\n \t\tb.r = 0\n \t}\n \n-\t// Read new data.\n-\tn, err := b.rd.Read(b.buf[b.w:])\n-\tif n < 0 {\n-\t\tpanic(errNegativeRead)\n+\tif b.w >= len(b.buf) {\n+\t\tpanic(\"bufio: tried to fill full buffer\")\n \t}\n-\tb.w += n\n-\tif err != nil {\n-\t\tb.err = err\n+\n+\t// Read new data: try a limited number of times.\n+\tfor i := maxConsecutiveEmptyReads; i > 0; i-- {\n+\t\tn, err := b.rd.Read(b.buf[b.w:])\n+\t\tif n < 0 {\n+\t\t\tpanic(errNegativeRead)\n+\t\t}\n+\t\tb.w += n\n+\t\tif err != nil {\n+\t\t\tb.err = err\n+\t\t\treturn\n+\t\t}\n+\t\tif n > 0 {\n+\t\t\treturn\n+\t\t}\n \t}\n+\tb.err = io.ErrNoProgress\n }\n \n func (b *Reader) readErr() error {\n@@ -115,8 +127,9 @@ func (b *Reader) Peek(n int) ([]byte, error) {\n \tif n > len(b.buf) {\n \t\treturn nil, ErrBufferFull\n \t}\n+\t// 0 <= n <= len(b.buf)\n \tfor b.w-b.r < n && b.err == nil {\n-\t\tb.fill()\n+\t\tb.fill() // b.w-b.r < len(b.buf) => buffer is not full\n \t}\n \tm := b.w - b.r\n \tif m > n {\n@@ -142,21 +155,24 @@ func (b *Reader) Read(p []byte) (n int, err error) {\n \tif n == 0 {\n \t\treturn 0, b.readErr()\n \t}\n-\tif b.w == b.r {\n+\tif b.r == b.w {\n \t\tif b.err != nil {\n \t\t\treturn 0, b.readErr()\n \t\t}\n \t\tif len(p) >= len(b.buf) {\n \t\t\t// Large read, empty buffer.\n \t\t\t// Read directly into p to avoid copy.\n \t\t\tn, b.err = b.rd.Read(p)\n+\t\t\tif n < 0 {\n+\t\t\t\tpanic(errNegativeRead)\n+\t\t\t}\n \t\t\tif n > 0 {\n \t\t\t\tb.lastByte = int(p[n-1])\n \t\t\t\tb.lastRuneSize = -1\n \t\t\t}\n \t\t\treturn n, b.readErr()\n \t\t}\n-\t\tb.fill()\n+\t\tb.fill() // buffer is empty\n \t\tif b.w == b.r {\n \t\t\treturn 0, b.readErr()\n \t\t}\n@@ -176,11 +192,11 @@ func (b *Reader) Read(p []byte) (n int, err error) {\n // If no byte is available, returns an error.\n func (b *Reader) ReadByte() (c byte, err error) {\n \tb.lastRuneSize = -1\n-\tfor b.w == b.r {\n+\tfor b.r == b.w {\n \t\tif b.err != nil {\n \t\t\treturn 0, b.readErr()\n \t\t}\n-\t\tb.fill()\n+\t\tb.fill() // buffer is empty\n \t}\n \tc = b.buf[b.r]\n \tb.r++\n@@ -190,28 +206,28 @@ func (b *Reader) ReadByte() (c byte, err error) {\n \n // UnreadByte unreads the last byte.  Only the most recently read byte can be unread.\n func (b *Reader) UnreadByte() error {\n-\tb.lastRuneSize = -1\n-\tif b.r == b.w && b.lastByte >= 0 {\n-\t\tb.w = 1\n-\t\tb.r = 0\n-\t\tb.buf[0] = byte(b.lastByte)\n-\t\tb.lastByte = -1\n-\t\treturn nil\n-\t}\n-\tif b.r <= 0 {\n+\tif b.lastByte < 0 || b.r == 0 && b.w > 0 {\n \t\treturn ErrInvalidUnreadByte\n \t}\n-\tb.r--\n+\t// b.r > 0 || b.w == 0\n+\tif b.r > 0 {\n+\t\tb.r--\n+\t} else {\n+\t\t// b.r == 0 && b.w == 0\n+\t\tb.w = 1\n+\t}\n+\tb.buf[b.r] = byte(b.lastByte)\n \tb.lastByte = -1\n+\tb.lastRuneSize = -1\n \treturn nil\n }\n \n // ReadRune reads a single UTF-8 encoded Unicode character and returns the\n // rune and its size in bytes. If the encoded rune is invalid, it consumes one byte\n // and returns unicode.ReplacementChar (U+FFFD) with a size of 1.\n func (b *Reader) ReadRune() (r rune, size int, err error) {\n-\tfor b.r+utf8.UTFMax > b.w && !utf8.FullRune(b.buf[b.r:b.w]) && b.err == nil {\n-\t\tb.fill()\n+\tfor b.r+utf8.UTFMax > b.w && !utf8.FullRune(b.buf[b.r:b.w]) && b.err == nil && b.w-b.r < len(b.buf) {\n+\t\tb.fill() // b.w-b.r < len(buf) => buffer is not full\n \t}\n \tb.lastRuneSize = -1\n \tif b.r == b.w {\n@@ -232,7 +248,7 @@ func (b *Reader) ReadRune() (r rune, size int, err error) {\n // regard it is stricter than UnreadByte, which will unread the last byte\n // from any read operation.)\n func (b *Reader) UnreadRune() error {\n-\tif b.lastRuneSize < 0 || b.r == 0 {\n+\tif b.lastRuneSize < 0 || b.r < b.lastRuneSize {\n \t\treturn ErrInvalidUnreadRune\n \t}\n \tb.r -= b.lastRuneSize\n@@ -255,37 +271,39 @@ func (b *Reader) Buffered() int { return b.w - b.r }\n // ReadBytes or ReadString instead.\n // ReadSlice returns err != nil if and only if line does not end in delim.\n func (b *Reader) ReadSlice(delim byte) (line []byte, err error) {\n-\t// Look in buffer.\n-\tif i := bytes.IndexByte(b.buf[b.r:b.w], delim); i >= 0 {\n-\t\tline1 := b.buf[b.r : b.r+i+1]\n-\t\tb.r += i + 1\n-\t\treturn line1, nil\n-\t}\n-\n-\t// Read more into buffer, until buffer fills or we find delim.\n \tfor {\n-\t\tif b.err != nil {\n-\t\t\tline := b.buf[b.r:b.w]\n-\t\t\tb.r = b.w\n-\t\t\treturn line, b.readErr()\n+\t\t// Search buffer.\n+\t\tif i := bytes.IndexByte(b.buf[b.r:b.w], delim); i >= 0 {\n+\t\t\tline = b.buf[b.r : b.r+i+1]\n+\t\t\tb.r += i + 1\n+\t\t\tbreak\n \t\t}\n \n-\t\tn := b.Buffered()\n-\t\tb.fill()\n-\n-\t\t// Search new part of buffer\n-\t\tif i := bytes.IndexByte(b.buf[n:b.w], delim); i >= 0 {\n-\t\t\tline := b.buf[0 : n+i+1]\n-\t\t\tb.r = n + i + 1\n-\t\t\treturn line, nil\n+\t\t// Pending error?\n+\t\tif b.err != nil {\n+\t\t\tline = b.buf[b.r:b.w]\n+\t\t\tb.r = b.w\n+\t\t\terr = b.readErr()\n+\t\t\tbreak\n \t\t}\n \n-\t\t// Buffer is full?\n-\t\tif b.Buffered() >= len(b.buf) {\n+\t\t// Buffer full?\n+\t\tif n := b.Buffered(); n >= len(b.buf) {\n \t\t\tb.r = b.w\n-\t\t\treturn b.buf, ErrBufferFull\n+\t\t\tline = b.buf\n+\t\t\terr = ErrBufferFull\n+\t\t\tbreak\n \t\t}\n+\n+\t\tb.fill() // buffer is not full\n \t}\n+\n+\t// Handle last byte, if any.\n+\tif i := len(line) - 1; i >= 0 {\n+\t\tb.lastByte = int(line[i])\n+\t}\n+\n+\treturn\n }\n \n // ReadLine is a low-level line-reading primitive. Most callers should use\n@@ -301,6 +319,9 @@ func (b *Reader) ReadSlice(delim byte) (line []byte, err error) {\n //\n // The text returned from ReadLine does not include the line end (\"\\r\\n\" or \"\\n\").\n // No indication or error is given if the input ends without a final line end.\n+// Calling UnreadByte after ReadLine will always unread the last byte read\n+// (possibly a character belonging to the line end) even if that byte is not\n+// part of the line returned by ReadLine.\n func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error) {\n \tline, err = b.ReadSlice('\\n')\n \tif err == ErrBufferFull {\n@@ -410,12 +431,24 @@ func (b *Reader) WriteTo(w io.Writer) (n int64, err error) {\n \t\treturn n, err\n \t}\n \n-\tfor b.fill(); b.r < b.w; b.fill() {\n+\tif w, ok := w.(io.ReaderFrom); ok {\n+\t\tm, err := w.ReadFrom(b.rd)\n+\t\tn += m\n+\t\treturn n, err\n+\t}\n+\n+\tif b.w-b.r < len(b.buf) {\n+\t\tb.fill() // buffer not full\n+\t}\n+\n+\tfor b.r < b.w {\n+\t\t// b.r < b.w => buffer is not empty\n \t\tm, err := b.writeBuf(w)\n \t\tn += m\n \t\tif err != nil {\n \t\t\treturn n, err\n \t\t}\n+\t\tb.fill() // buffer is empty\n \t}\n \n \tif b.err == io.EOF {\n@@ -428,6 +461,9 @@ func (b *Reader) WriteTo(w io.Writer) (n int64, err error) {\n // writeBuf writes the Reader's buffer to the writer.\n func (b *Reader) writeBuf(w io.Writer) (int64, error) {\n \tn, err := w.Write(b.buf[b.r:b.w])\n+\tif n < b.r-b.w {\n+\t\tpanic(errors.New(\"bufio: writer did not write all data\"))\n+\t}\n \tb.r += n\n \treturn int64(n), err\n }\n@@ -619,9 +655,16 @@ func (b *Writer) ReadFrom(r io.Reader) (n int64, err error) {\n \t\t\t\treturn n, err1\n \t\t\t}\n \t\t}\n-\t\tm, err = r.Read(b.buf[b.n:])\n-\t\tif m == 0 {\n-\t\t\tbreak\n+\t\tnr := 0\n+\t\tfor nr < maxConsecutiveEmptyReads {\n+\t\t\tm, err = r.Read(b.buf[b.n:])\n+\t\t\tif m != 0 || err != nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tnr++\n+\t\t}\n+\t\tif nr == maxConsecutiveEmptyReads {\n+\t\t\treturn n, io.ErrNoProgress\n \t\t}\n \t\tb.n += m\n \t\tn += int64(m)"}, {"sha": "76d3c8eade814264adf5b46ed2f0ae48f838b28f", "filename": "libgo/go/bufio/bufio_test.go", "status": "modified", "additions": 208, "deletions": 28, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbufio%2Fbufio_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbufio%2Fbufio_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fbufio_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -14,6 +14,7 @@ import (\n \t\"strings\"\n \t\"testing\"\n \t\"testing/iotest\"\n+\t\"time\"\n \t\"unicode/utf8\"\n )\n \n@@ -174,6 +175,34 @@ func TestReader(t *testing.T) {\n \t}\n }\n \n+type zeroReader struct{}\n+\n+func (zeroReader) Read(p []byte) (int, error) {\n+\treturn 0, nil\n+}\n+\n+func TestZeroReader(t *testing.T) {\n+\tvar z zeroReader\n+\tr := NewReader(z)\n+\n+\tc := make(chan error)\n+\tgo func() {\n+\t\t_, err := r.ReadByte()\n+\t\tc <- err\n+\t}()\n+\n+\tselect {\n+\tcase err := <-c:\n+\t\tif err == nil {\n+\t\t\tt.Error(\"error expected\")\n+\t\t} else if err != io.ErrNoProgress {\n+\t\t\tt.Error(\"unexpected error:\", err)\n+\t\t}\n+\tcase <-time.After(time.Second):\n+\t\tt.Error(\"test timed out (endless loop in ReadByte?)\")\n+\t}\n+}\n+\n // A StringReader delivers its data one string segment at a time via Read.\n type StringReader struct {\n \tdata []string\n@@ -228,66 +257,150 @@ func TestReadRune(t *testing.T) {\n }\n \n func TestUnreadRune(t *testing.T) {\n-\tgot := \"\"\n \tsegments := []string{\"Hello, world:\", \"\u65e5\u672c\u8a9e\"}\n-\tdata := strings.Join(segments, \"\")\n \tr := NewReader(&StringReader{data: segments})\n+\tgot := \"\"\n+\twant := strings.Join(segments, \"\")\n \t// Normal execution.\n \tfor {\n \t\tr1, _, err := r.ReadRune()\n \t\tif err != nil {\n \t\t\tif err != io.EOF {\n-\t\t\t\tt.Error(\"unexpected EOF\")\n+\t\t\t\tt.Error(\"unexpected error on ReadRune:\", err)\n \t\t\t}\n \t\t\tbreak\n \t\t}\n \t\tgot += string(r1)\n-\t\t// Put it back and read it again\n+\t\t// Put it back and read it again.\n \t\tif err = r.UnreadRune(); err != nil {\n-\t\t\tt.Error(\"unexpected error on UnreadRune:\", err)\n+\t\t\tt.Fatal(\"unexpected error on UnreadRune:\", err)\n \t\t}\n \t\tr2, _, err := r.ReadRune()\n \t\tif err != nil {\n-\t\t\tt.Error(\"unexpected error reading after unreading:\", err)\n+\t\t\tt.Fatal(\"unexpected error reading after unreading:\", err)\n \t\t}\n \t\tif r1 != r2 {\n-\t\t\tt.Errorf(\"incorrect rune after unread: got %c wanted %c\", r1, r2)\n+\t\t\tt.Fatalf(\"incorrect rune after unread: got %c, want %c\", r1, r2)\n \t\t}\n \t}\n-\tif got != data {\n-\t\tt.Errorf(\"want=%q got=%q\", data, got)\n+\tif got != want {\n+\t\tt.Errorf(\"got %q, want %q\", got, want)\n \t}\n }\n \n func TestUnreadByte(t *testing.T) {\n-\twant := \"Hello, world\"\n-\tgot := \"\"\n \tsegments := []string{\"Hello, \", \"world\"}\n \tr := NewReader(&StringReader{data: segments})\n+\tgot := \"\"\n+\twant := strings.Join(segments, \"\")\n \t// Normal execution.\n \tfor {\n \t\tb1, err := r.ReadByte()\n \t\tif err != nil {\n \t\t\tif err != io.EOF {\n-\t\t\t\tt.Fatal(\"unexpected EOF\")\n+\t\t\t\tt.Error(\"unexpected error on ReadByte:\", err)\n \t\t\t}\n \t\t\tbreak\n \t\t}\n \t\tgot += string(b1)\n-\t\t// Put it back and read it again\n+\t\t// Put it back and read it again.\n \t\tif err = r.UnreadByte(); err != nil {\n-\t\t\tt.Fatalf(\"unexpected error on UnreadByte: %v\", err)\n+\t\t\tt.Fatal(\"unexpected error on UnreadByte:\", err)\n \t\t}\n \t\tb2, err := r.ReadByte()\n \t\tif err != nil {\n-\t\t\tt.Fatalf(\"unexpected error reading after unreading: %v\", err)\n+\t\t\tt.Fatal(\"unexpected error reading after unreading:\", err)\n \t\t}\n \t\tif b1 != b2 {\n-\t\t\tt.Fatalf(\"incorrect byte after unread: got %c wanted %c\", b1, b2)\n+\t\t\tt.Fatalf(\"incorrect byte after unread: got %q, want %q\", b1, b2)\n \t\t}\n \t}\n \tif got != want {\n-\t\tt.Errorf(\"got=%q want=%q\", got, want)\n+\t\tt.Errorf(\"got %q, want %q\", got, want)\n+\t}\n+}\n+\n+func TestUnreadByteMultiple(t *testing.T) {\n+\tsegments := []string{\"Hello, \", \"world\"}\n+\tdata := strings.Join(segments, \"\")\n+\tfor n := 0; n <= len(data); n++ {\n+\t\tr := NewReader(&StringReader{data: segments})\n+\t\t// Read n bytes.\n+\t\tfor i := 0; i < n; i++ {\n+\t\t\tb, err := r.ReadByte()\n+\t\t\tif err != nil {\n+\t\t\t\tt.Fatalf(\"n = %d: unexpected error on ReadByte: %v\", n, err)\n+\t\t\t}\n+\t\t\tif b != data[i] {\n+\t\t\t\tt.Fatalf(\"n = %d: incorrect byte returned from ReadByte: got %q, want %q\", n, b, data[i])\n+\t\t\t}\n+\t\t}\n+\t\t// Unread one byte if there is one.\n+\t\tif n > 0 {\n+\t\t\tif err := r.UnreadByte(); err != nil {\n+\t\t\t\tt.Errorf(\"n = %d: unexpected error on UnreadByte: %v\", n, err)\n+\t\t\t}\n+\t\t}\n+\t\t// Test that we cannot unread any further.\n+\t\tif err := r.UnreadByte(); err == nil {\n+\t\t\tt.Errorf(\"n = %d: expected error on UnreadByte\", n)\n+\t\t}\n+\t}\n+}\n+\n+func TestUnreadByteOthers(t *testing.T) {\n+\t// A list of readers to use in conjunction with UnreadByte.\n+\tvar readers = []func(*Reader, byte) ([]byte, error){\n+\t\t(*Reader).ReadBytes,\n+\t\t(*Reader).ReadSlice,\n+\t\tfunc(r *Reader, delim byte) ([]byte, error) {\n+\t\t\tdata, err := r.ReadString(delim)\n+\t\t\treturn []byte(data), err\n+\t\t},\n+\t\t// ReadLine doesn't fit the data/pattern easily\n+\t\t// so we leave it out. It should be covered via\n+\t\t// the ReadSlice test since ReadLine simply calls\n+\t\t// ReadSlice, and it's that function that handles\n+\t\t// the last byte.\n+\t}\n+\n+\t// Try all readers with UnreadByte.\n+\tfor rno, read := range readers {\n+\t\t// Some input data that is longer than the minimum reader buffer size.\n+\t\tconst n = 10\n+\t\tvar buf bytes.Buffer\n+\t\tfor i := 0; i < n; i++ {\n+\t\t\tbuf.WriteString(\"abcdefg\")\n+\t\t}\n+\n+\t\tr := NewReaderSize(&buf, minReadBufferSize)\n+\t\treadTo := func(delim byte, want string) {\n+\t\t\tdata, err := read(r, delim)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Fatalf(\"#%d: unexpected error reading to %c: %v\", rno, delim, err)\n+\t\t\t}\n+\t\t\tif got := string(data); got != want {\n+\t\t\t\tt.Fatalf(\"#%d: got %q, want %q\", rno, got, want)\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Read the data with occasional UnreadByte calls.\n+\t\tfor i := 0; i < n; i++ {\n+\t\t\treadTo('d', \"abcd\")\n+\t\t\tfor j := 0; j < 3; j++ {\n+\t\t\t\tif err := r.UnreadByte(); err != nil {\n+\t\t\t\t\tt.Fatalf(\"#%d: unexpected error on UnreadByte: %v\", rno, err)\n+\t\t\t\t}\n+\t\t\t\treadTo('d', \"d\")\n+\t\t\t}\n+\t\t\treadTo('g', \"efg\")\n+\t\t}\n+\n+\t\t// All data should have been read.\n+\t\t_, err := r.ReadByte()\n+\t\tif err != io.EOF {\n+\t\t\tt.Errorf(\"#%d: got error %v; want EOF\", rno, err)\n+\t\t}\n \t}\n }\n \n@@ -1056,7 +1169,61 @@ func TestWriterReadFromWhileFull(t *testing.T) {\n \t// Use ReadFrom to read in some data.\n \tn2, err := w.ReadFrom(strings.NewReader(\"abcdef\"))\n \tif n2 != 6 || err != nil {\n-\t\tt.Fatalf(\"ReadFrom returned (%v, %v), want (6, nil)\", n, err)\n+\t\tt.Fatalf(\"ReadFrom returned (%v, %v), want (6, nil)\", n2, err)\n+\t}\n+}\n+\n+type emptyThenNonEmptyReader struct {\n+\tr io.Reader\n+\tn int\n+}\n+\n+func (r *emptyThenNonEmptyReader) Read(p []byte) (int, error) {\n+\tif r.n <= 0 {\n+\t\treturn r.r.Read(p)\n+\t}\n+\tr.n--\n+\treturn 0, nil\n+}\n+\n+// Test for golang.org/issue/7611\n+func TestWriterReadFromUntilEOF(t *testing.T) {\n+\tbuf := new(bytes.Buffer)\n+\tw := NewWriterSize(buf, 5)\n+\n+\t// Partially fill buffer\n+\tn, err := w.Write([]byte(\"0123\"))\n+\tif n != 4 || err != nil {\n+\t\tt.Fatalf(\"Write returned (%v, %v), want (4, nil)\", n, err)\n+\t}\n+\n+\t// Use ReadFrom to read in some data.\n+\tr := &emptyThenNonEmptyReader{r: strings.NewReader(\"abcd\"), n: 3}\n+\tn2, err := w.ReadFrom(r)\n+\tif n2 != 4 || err != nil {\n+\t\tt.Fatalf(\"ReadFrom returned (%v, %v), want (4, nil)\", n2, err)\n+\t}\n+\tw.Flush()\n+\tif got, want := string(buf.Bytes()), \"0123abcd\"; got != want {\n+\t\tt.Fatalf(\"buf.Bytes() returned %q, want %q\", got, want)\n+\t}\n+}\n+\n+func TestWriterReadFromErrNoProgress(t *testing.T) {\n+\tbuf := new(bytes.Buffer)\n+\tw := NewWriterSize(buf, 5)\n+\n+\t// Partially fill buffer\n+\tn, err := w.Write([]byte(\"0123\"))\n+\tif n != 4 || err != nil {\n+\t\tt.Fatalf(\"Write returned (%v, %v), want (4, nil)\", n, err)\n+\t}\n+\n+\t// Use ReadFrom to read in some data.\n+\tr := &emptyThenNonEmptyReader{r: strings.NewReader(\"abcd\"), n: 100}\n+\tn2, err := w.ReadFrom(r)\n+\tif n2 != 0 || err != io.ErrNoProgress {\n+\t\tt.Fatalf(\"buf.Bytes() returned (%v, %v), want (0, io.ErrNoProgress)\", n2, err)\n \t}\n }\n \n@@ -1094,20 +1261,12 @@ func TestWriterReset(t *testing.T) {\n \n // An onlyReader only implements io.Reader, no matter what other methods the underlying implementation may have.\n type onlyReader struct {\n-\tr io.Reader\n-}\n-\n-func (r onlyReader) Read(b []byte) (int, error) {\n-\treturn r.r.Read(b)\n+\tio.Reader\n }\n \n // An onlyWriter only implements io.Writer, no matter what other methods the underlying implementation may have.\n type onlyWriter struct {\n-\tw io.Writer\n-}\n-\n-func (w onlyWriter) Write(b []byte) (int, error) {\n-\treturn w.w.Write(b)\n+\tio.Writer\n }\n \n func BenchmarkReaderCopyOptimal(b *testing.B) {\n@@ -1152,6 +1311,27 @@ func BenchmarkReaderCopyNoWriteTo(b *testing.B) {\n \t}\n }\n \n+func BenchmarkReaderWriteToOptimal(b *testing.B) {\n+\tconst bufSize = 16 << 10\n+\tbuf := make([]byte, bufSize)\n+\tr := bytes.NewReader(buf)\n+\tsrcReader := NewReaderSize(onlyReader{r}, 1<<10)\n+\tif _, ok := ioutil.Discard.(io.ReaderFrom); !ok {\n+\t\tb.Fatal(\"ioutil.Discard doesn't support ReaderFrom\")\n+\t}\n+\tfor i := 0; i < b.N; i++ {\n+\t\tr.Seek(0, 0)\n+\t\tsrcReader.Reset(onlyReader{r})\n+\t\tn, err := srcReader.WriteTo(ioutil.Discard)\n+\t\tif err != nil {\n+\t\t\tb.Fatal(err)\n+\t\t}\n+\t\tif n != bufSize {\n+\t\t\tb.Fatalf(\"n = %d; want %d\", n, bufSize)\n+\t\t}\n+\t}\n+}\n+\n func BenchmarkWriterCopyOptimal(b *testing.B) {\n \t// Optimal case is where the underlying writer implements io.ReaderFrom\n \tsrcBuf := bytes.NewBuffer(make([]byte, 8192))"}, {"sha": "715ce071e3bb8113595620067ae11ee7a8834b99", "filename": "libgo/go/bufio/scan.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbufio%2Fscan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbufio%2Fscan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fscan.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -135,7 +135,7 @@ func (s *Scanner) Scan() bool {\n \t\t}\n \t\t// Must read more data.\n \t\t// First, shift data to beginning of buffer if there's lots of empty space\n-\t\t// or space is neded.\n+\t\t// or space is needed.\n \t\tif s.start > 0 && (s.end == len(s.buf) || s.start > len(s.buf)/2) {\n \t\t\tcopy(s.buf, s.buf[s.start:s.end])\n \t\t\ts.end -= s.start\n@@ -172,7 +172,7 @@ func (s *Scanner) Scan() bool {\n \t\t\t\tbreak\n \t\t\t}\n \t\t\tloop++\n-\t\t\tif loop > 100 {\n+\t\t\tif loop > maxConsecutiveEmptyReads {\n \t\t\t\ts.setErr(io.ErrNoProgress)\n \t\t\t\tbreak\n \t\t\t}"}, {"sha": "0db7cad2047545926756ac573a6720d5e37b275b", "filename": "libgo/go/bufio/scan_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbufio%2Fscan_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbufio%2Fscan_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fscan_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -277,7 +277,7 @@ func TestScanLineNoNewline(t *testing.T) {\n \ttestNoNewline(text, lines, t)\n }\n \n-// Test that the line splitter handles a final line with a carriage return but nonewline.\n+// Test that the line splitter handles a final line with a carriage return but no newline.\n func TestScanLineReturnButNoNewline(t *testing.T) {\n \tconst text = \"abcdefghijklmn\\nopqrstuvwxyz\\r\"\n \tlines := []string{"}, {"sha": "0c53e4c0b71262b7dc015cb185ce1d486d8dd841", "filename": "libgo/go/bytes/bytes.go", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbytes%2Fbytes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbytes%2Fbytes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbytes.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -356,7 +356,11 @@ func Map(mapping func(r rune) rune, s []byte) []byte {\n \t\t}\n \t\tr = mapping(r)\n \t\tif r >= 0 {\n-\t\t\tif nbytes+utf8.RuneLen(r) > maxbytes {\n+\t\t\trl := utf8.RuneLen(r)\n+\t\t\tif rl < 0 {\n+\t\t\t\trl = len(string(utf8.RuneError))\n+\t\t\t}\n+\t\t\tif nbytes+rl > maxbytes {\n \t\t\t\t// Grow the buffer.\n \t\t\t\tmaxbytes = maxbytes*2 + utf8.UTFMax\n \t\t\t\tnb := make([]byte, maxbytes)"}, {"sha": "394dd7a443d93b29dbd6b491abd94863a28f1666", "filename": "libgo/go/bytes/bytes_test.go", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbytes%2Fbytes_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbytes%2Fbytes_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbytes_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -785,6 +785,16 @@ func TestMap(t *testing.T) {\n \tif string(m) != expect {\n \t\tt.Errorf(\"drop: expected %q got %q\", expect, m)\n \t}\n+\n+\t// 6. Invalid rune\n+\tinvalidRune := func(r rune) rune {\n+\t\treturn utf8.MaxRune + 1\n+\t}\n+\tm = Map(invalidRune, []byte(\"x\"))\n+\texpect = \"\\uFFFD\"\n+\tif string(m) != expect {\n+\t\tt.Errorf(\"invalidRune: expected %q got %q\", expect, m)\n+\t}\n }\n \n func TestToUpper(t *testing.T) { runStringTests(t, ToUpper, \"ToUpper\", upperTests) }\n@@ -1134,7 +1144,7 @@ func TestEqualFold(t *testing.T) {\n func TestBufferGrowNegative(t *testing.T) {\n \tdefer func() {\n \t\tif err := recover(); err == nil {\n-\t\t\tt.Fatal(\"Grow(-1) should have paniced\")\n+\t\t\tt.Fatal(\"Grow(-1) should have panicked\")\n \t\t}\n \t}()\n \tvar b Buffer\n@@ -1144,7 +1154,7 @@ func TestBufferGrowNegative(t *testing.T) {\n func TestBufferTruncateNegative(t *testing.T) {\n \tdefer func() {\n \t\tif err := recover(); err == nil {\n-\t\t\tt.Fatal(\"Truncate(-1) should have paniced\")\n+\t\t\tt.Fatal(\"Truncate(-1) should have panicked\")\n \t\t}\n \t}()\n \tvar b Buffer\n@@ -1154,7 +1164,7 @@ func TestBufferTruncateNegative(t *testing.T) {\n func TestBufferTruncateOutOfRange(t *testing.T) {\n \tdefer func() {\n \t\tif err := recover(); err == nil {\n-\t\t\tt.Fatal(\"Truncate(20) should have paniced\")\n+\t\t\tt.Fatal(\"Truncate(20) should have panicked\")\n \t\t}\n \t}()\n \tvar b Buffer"}, {"sha": "d2d40fa7ca1470faf3186ee731fe824ce329b2f4", "filename": "libgo/go/bytes/reader.go", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbytes%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbytes%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Freader.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -16,90 +16,93 @@ import (\n // Unlike a Buffer, a Reader is read-only and supports seeking.\n type Reader struct {\n \ts        []byte\n-\ti        int // current reading index\n-\tprevRune int // index of previous rune; or < 0\n+\ti        int64 // current reading index\n+\tprevRune int   // index of previous rune; or < 0\n }\n \n // Len returns the number of bytes of the unread portion of the\n // slice.\n func (r *Reader) Len() int {\n-\tif r.i >= len(r.s) {\n+\tif r.i >= int64(len(r.s)) {\n \t\treturn 0\n \t}\n-\treturn len(r.s) - r.i\n+\treturn int(int64(len(r.s)) - r.i)\n }\n \n func (r *Reader) Read(b []byte) (n int, err error) {\n \tif len(b) == 0 {\n \t\treturn 0, nil\n \t}\n-\tif r.i >= len(r.s) {\n+\tif r.i >= int64(len(r.s)) {\n \t\treturn 0, io.EOF\n \t}\n-\tn = copy(b, r.s[r.i:])\n-\tr.i += n\n \tr.prevRune = -1\n+\tn = copy(b, r.s[r.i:])\n+\tr.i += int64(n)\n \treturn\n }\n \n func (r *Reader) ReadAt(b []byte, off int64) (n int, err error) {\n+\t// cannot modify state - see io.ReaderAt\n \tif off < 0 {\n-\t\treturn 0, errors.New(\"bytes: invalid offset\")\n+\t\treturn 0, errors.New(\"bytes.Reader.ReadAt: negative offset\")\n \t}\n \tif off >= int64(len(r.s)) {\n \t\treturn 0, io.EOF\n \t}\n-\tn = copy(b, r.s[int(off):])\n+\tn = copy(b, r.s[off:])\n \tif n < len(b) {\n \t\terr = io.EOF\n \t}\n \treturn\n }\n \n func (r *Reader) ReadByte() (b byte, err error) {\n-\tif r.i >= len(r.s) {\n+\tr.prevRune = -1\n+\tif r.i >= int64(len(r.s)) {\n \t\treturn 0, io.EOF\n \t}\n \tb = r.s[r.i]\n \tr.i++\n-\tr.prevRune = -1\n \treturn\n }\n \n func (r *Reader) UnreadByte() error {\n+\tr.prevRune = -1\n \tif r.i <= 0 {\n-\t\treturn errors.New(\"bytes.Reader: at beginning of slice\")\n+\t\treturn errors.New(\"bytes.Reader.UnreadByte: at beginning of slice\")\n \t}\n \tr.i--\n-\tr.prevRune = -1\n \treturn nil\n }\n \n func (r *Reader) ReadRune() (ch rune, size int, err error) {\n-\tif r.i >= len(r.s) {\n+\tif r.i >= int64(len(r.s)) {\n+\t\tr.prevRune = -1\n \t\treturn 0, 0, io.EOF\n \t}\n-\tr.prevRune = r.i\n+\tr.prevRune = int(r.i)\n \tif c := r.s[r.i]; c < utf8.RuneSelf {\n \t\tr.i++\n \t\treturn rune(c), 1, nil\n \t}\n \tch, size = utf8.DecodeRune(r.s[r.i:])\n-\tr.i += size\n+\tr.i += int64(size)\n \treturn\n }\n \n func (r *Reader) UnreadRune() error {\n \tif r.prevRune < 0 {\n-\t\treturn errors.New(\"bytes.Reader: previous operation was not ReadRune\")\n+\t\treturn errors.New(\"bytes.Reader.UnreadRune: previous operation was not ReadRune\")\n \t}\n-\tr.i = r.prevRune\n+\tr.i = int64(r.prevRune)\n \tr.prevRune = -1\n \treturn nil\n }\n \n // Seek implements the io.Seeker interface.\n func (r *Reader) Seek(offset int64, whence int) (int64, error) {\n+\tr.prevRune = -1\n \tvar abs int64\n \tswitch whence {\n \tcase 0:\n@@ -109,30 +112,27 @@ func (r *Reader) Seek(offset int64, whence int) (int64, error) {\n \tcase 2:\n \t\tabs = int64(len(r.s)) + offset\n \tdefault:\n-\t\treturn 0, errors.New(\"bytes: invalid whence\")\n+\t\treturn 0, errors.New(\"bytes.Reader.Seek: invalid whence\")\n \t}\n \tif abs < 0 {\n-\t\treturn 0, errors.New(\"bytes: negative position\")\n-\t}\n-\tif abs >= 1<<31 {\n-\t\treturn 0, errors.New(\"bytes: position out of range\")\n+\t\treturn 0, errors.New(\"bytes.Reader.Seek: negative position\")\n \t}\n-\tr.i = int(abs)\n+\tr.i = abs\n \treturn abs, nil\n }\n \n // WriteTo implements the io.WriterTo interface.\n func (r *Reader) WriteTo(w io.Writer) (n int64, err error) {\n \tr.prevRune = -1\n-\tif r.i >= len(r.s) {\n+\tif r.i >= int64(len(r.s)) {\n \t\treturn 0, nil\n \t}\n \tb := r.s[r.i:]\n \tm, err := w.Write(b)\n \tif m > len(b) {\n \t\tpanic(\"bytes.Reader.WriteTo: invalid Write count\")\n \t}\n-\tr.i += m\n+\tr.i += int64(m)\n \tn = int64(m)\n \tif m != len(b) && err == nil {\n \t\terr = io.ErrShortWrite"}, {"sha": "d3dce53499eda631ea145a49f69113895c3a7d89", "filename": "libgo/go/bytes/reader_test.go", "status": "modified", "additions": 78, "deletions": 4, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbytes%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fbytes%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Freader_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -10,6 +10,7 @@ import (\n \t\"io\"\n \t\"io/ioutil\"\n \t\"os\"\n+\t\"sync\"\n \t\"testing\"\n )\n \n@@ -26,9 +27,9 @@ func TestReader(t *testing.T) {\n \t\t{seek: os.SEEK_SET, off: 0, n: 20, want: \"0123456789\"},\n \t\t{seek: os.SEEK_SET, off: 1, n: 1, want: \"1\"},\n \t\t{seek: os.SEEK_CUR, off: 1, wantpos: 3, n: 2, want: \"34\"},\n-\t\t{seek: os.SEEK_SET, off: -1, seekerr: \"bytes: negative position\"},\n-\t\t{seek: os.SEEK_SET, off: 1<<31 - 1},\n-\t\t{seek: os.SEEK_CUR, off: 1, seekerr: \"bytes: position out of range\"},\n+\t\t{seek: os.SEEK_SET, off: -1, seekerr: \"bytes.Reader.Seek: negative position\"},\n+\t\t{seek: os.SEEK_SET, off: 1 << 33, wantpos: 1 << 33},\n+\t\t{seek: os.SEEK_CUR, off: 1, wantpos: 1<<33 + 1},\n \t\t{seek: os.SEEK_SET, n: 5, want: \"01234\"},\n \t\t{seek: os.SEEK_CUR, n: 5, want: \"56789\"},\n \t\t{seek: os.SEEK_END, off: -1, n: 1, wantpos: 9, want: \"9\"},\n@@ -60,6 +61,16 @@ func TestReader(t *testing.T) {\n \t}\n }\n \n+func TestReadAfterBigSeek(t *testing.T) {\n+\tr := NewReader([]byte(\"0123456789\"))\n+\tif _, err := r.Seek(1<<31+5, os.SEEK_SET); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif n, err := r.Read(make([]byte, 10)); n != 0 || err != io.EOF {\n+\t\tt.Errorf(\"Read = %d, %v; want 0, EOF\", n, err)\n+\t}\n+}\n+\n func TestReaderAt(t *testing.T) {\n \tr := NewReader([]byte(\"0123456789\"))\n \ttests := []struct {\n@@ -73,7 +84,7 @@ func TestReaderAt(t *testing.T) {\n \t\t{1, 9, \"123456789\", nil},\n \t\t{11, 10, \"\", io.EOF},\n \t\t{0, 0, \"\", nil},\n-\t\t{-1, 0, \"\", \"bytes: invalid offset\"},\n+\t\t{-1, 0, \"\", \"bytes.Reader.ReadAt: negative offset\"},\n \t}\n \tfor i, tt := range tests {\n \t\tb := make([]byte, tt.n)\n@@ -88,6 +99,43 @@ func TestReaderAt(t *testing.T) {\n \t}\n }\n \n+func TestReaderAtConcurrent(t *testing.T) {\n+\t// Test for the race detector, to verify ReadAt doesn't mutate\n+\t// any state.\n+\tr := NewReader([]byte(\"0123456789\"))\n+\tvar wg sync.WaitGroup\n+\tfor i := 0; i < 5; i++ {\n+\t\twg.Add(1)\n+\t\tgo func(i int) {\n+\t\t\tdefer wg.Done()\n+\t\t\tvar buf [1]byte\n+\t\t\tr.ReadAt(buf[:], int64(i))\n+\t\t}(i)\n+\t}\n+\twg.Wait()\n+}\n+\n+func TestEmptyReaderConcurrent(t *testing.T) {\n+\t// Test for the race detector, to verify a Read that doesn't yield any bytes\n+\t// is okay to use from multiple goroutines. This was our historic behavior.\n+\t// See golang.org/issue/7856\n+\tr := NewReader([]byte{})\n+\tvar wg sync.WaitGroup\n+\tfor i := 0; i < 5; i++ {\n+\t\twg.Add(2)\n+\t\tgo func() {\n+\t\t\tdefer wg.Done()\n+\t\t\tvar buf [1]byte\n+\t\t\tr.Read(buf[:])\n+\t\t}()\n+\t\tgo func() {\n+\t\t\tdefer wg.Done()\n+\t\t\tr.Read(nil)\n+\t\t}()\n+\t}\n+\twg.Wait()\n+}\n+\n func TestReaderWriteTo(t *testing.T) {\n \tfor i := 0; i < 30; i += 3 {\n \t\tvar l int\n@@ -133,6 +181,32 @@ func TestReaderLen(t *testing.T) {\n \t}\n }\n \n+var UnreadRuneErrorTests = []struct {\n+\tname string\n+\tf    func(*Reader)\n+}{\n+\t{\"Read\", func(r *Reader) { r.Read([]byte{0}) }},\n+\t{\"ReadByte\", func(r *Reader) { r.ReadByte() }},\n+\t{\"UnreadRune\", func(r *Reader) { r.UnreadRune() }},\n+\t{\"Seek\", func(r *Reader) { r.Seek(0, 1) }},\n+\t{\"WriteTo\", func(r *Reader) { r.WriteTo(&Buffer{}) }},\n+}\n+\n+func TestUnreadRuneError(t *testing.T) {\n+\tfor _, tt := range UnreadRuneErrorTests {\n+\t\treader := NewReader([]byte(\"0123456789\"))\n+\t\tif _, _, err := reader.ReadRune(); err != nil {\n+\t\t\t// should not happen\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\ttt.f(reader)\n+\t\terr := reader.UnreadRune()\n+\t\tif err == nil {\n+\t\t\tt.Errorf(\"Unreading after %s: expected error\", tt.name)\n+\t\t}\n+\t}\n+}\n+\n func TestReaderDoubleUnreadRune(t *testing.T) {\n \tbuf := NewBuffer([]byte(\"groucho\"))\n \tif _, _, err := buf.ReadRune(); err != nil {"}, {"sha": "727249dc46254cd5960efc6e9aeacf1c96b09fef", "filename": "libgo/go/compress/bzip2/bzip2_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbzip2_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbzip2_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbzip2_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -177,7 +177,7 @@ const (\n \n var testfiles = []string{\n \t// Digits is the digits of the irrational number e. Its decimal representation\n-\t// does not repeat, but there are only 10 posible digits, so it should be\n+\t// does not repeat, but there are only 10 possible digits, so it should be\n \t// reasonably compressible.\n \tdigits: \"testdata/e.txt.bz2\",\n \t// Twain is Project Gutenberg's edition of Mark Twain's classic English novel."}, {"sha": "ce4923eca3738f6a00ed0ce99439534dafe0bf14", "filename": "libgo/go/compress/flate/inflate.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fflate%2Finflate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fflate%2Finflate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fflate%2Finflate.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -54,7 +54,7 @@ func (e *WriteError) Error() string {\n \treturn \"flate: write error at offset \" + strconv.FormatInt(e.Offset, 10) + \": \" + e.Err.Error()\n }\n \n-// Note that much of the implemenation of huffmanDecoder is also copied\n+// Note that much of the implementation of huffmanDecoder is also copied\n // into gen.go (in package main) for the purpose of precomputing the\n // fixed huffman tables so they can be included statically.\n "}, {"sha": "a62ef741df336161397cc132cc4bec2ca656cfc1", "filename": "libgo/go/compress/flate/reader_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fflate%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fflate%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fflate%2Freader_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -29,7 +29,7 @@ const (\n \n var testfiles = []string{\n \t// Digits is the digits of the irrational number e. Its decimal representation\n-\t// does not repeat, but there are only 10 posible digits, so it should be\n+\t// does not repeat, but there are only 10 possible digits, so it should be\n \t// reasonably compressible.\n \tdigits: \"../testdata/e.txt\",\n \t// Twain is Project Gutenberg's edition of Mark Twain's classic English novel."}, {"sha": "4f398b194a06b3fd96146696cf1d10c7849c96cf", "filename": "libgo/go/compress/gzip/gunzip.go", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -89,6 +89,21 @@ func NewReader(r io.Reader) (*Reader, error) {\n \treturn z, nil\n }\n \n+// Reset discards the Reader z's state and makes it equivalent to the\n+// result of its original state from NewReader, but reading from r instead.\n+// This permits reusing a Reader rather than allocating a new one.\n+func (z *Reader) Reset(r io.Reader) error {\n+\tz.r = makeReader(r)\n+\tif z.digest == nil {\n+\t\tz.digest = crc32.NewIEEE()\n+\t} else {\n+\t\tz.digest.Reset()\n+\t}\n+\tz.size = 0\n+\tz.err = nil\n+\treturn z.readHeader(true)\n+}\n+\n // GZIP (RFC 1952) is little-endian, unlike ZLIB (RFC 1950).\n func get4(p []byte) uint32 {\n \treturn uint32(p[0]) | uint32(p[1])<<8 | uint32(p[2])<<16 | uint32(p[3])<<24"}, {"sha": "2471038f53690476f06db1ce68c62e805e7a67d7", "filename": "libgo/go/compress/gzip/gunzip_test.go", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -303,6 +303,26 @@ func TestDecompressor(t *testing.T) {\n \t\tif s != tt.raw {\n \t\t\tt.Errorf(\"%s: got %d-byte %q want %d-byte %q\", tt.name, n, s, len(tt.raw), tt.raw)\n \t\t}\n+\n+\t\t// Test Reader Reset.\n+\t\tin = bytes.NewReader(tt.gzip)\n+\t\terr = gzip.Reset(in)\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"%s: Reset: %s\", tt.name, err)\n+\t\t\tcontinue\n+\t\t}\n+\t\tif tt.name != gzip.Name {\n+\t\t\tt.Errorf(\"%s: got name %s\", tt.name, gzip.Name)\n+\t\t}\n+\t\tb.Reset()\n+\t\tn, err = io.Copy(b, gzip)\n+\t\tif err != tt.err {\n+\t\t\tt.Errorf(\"%s: io.Copy: %v want %v\", tt.name, err, tt.err)\n+\t\t}\n+\t\ts = b.String()\n+\t\tif s != tt.raw {\n+\t\t\tt.Errorf(\"%s: got %d-byte %q want %d-byte %q\", tt.name, n, s, len(tt.raw), tt.raw)\n+\t\t}\n \t}\n }\n \n@@ -333,3 +353,17 @@ func TestIssue6550(t *testing.T) {\n \t\t// ok\n \t}\n }\n+\n+func TestInitialReset(t *testing.T) {\n+\tvar r Reader\n+\tif err := r.Reset(bytes.NewReader(gunzipTests[1].gzip)); err != nil {\n+\t\tt.Error(err)\n+\t}\n+\tvar buf bytes.Buffer\n+\tif _, err := io.Copy(&buf, &r); err != nil {\n+\t\tt.Error(err)\n+\t}\n+\tif s := buf.String(); s != gunzipTests[1].raw {\n+\t\tt.Errorf(\"got %q want %q\", s, gunzipTests[1].raw)\n+\t}\n+}"}, {"sha": "3a0bf54e1b978bf789713536a032d2b76a65275d", "filename": "libgo/go/compress/gzip/gzip.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -22,8 +22,8 @@ const (\n \tDefaultCompression = flate.DefaultCompression\n )\n \n-// A Writer is an io.WriteCloser that satisfies writes by compressing data written\n-// to its wrapped io.Writer.\n+// A Writer is an io.WriteCloser.\n+// Writes to a Writer are compressed and written to w.\n type Writer struct {\n \tHeader\n \tw           io.Writer\n@@ -37,8 +37,8 @@ type Writer struct {\n \terr         error\n }\n \n-// NewWriter creates a new Writer that satisfies writes by compressing data\n-// written to w.\n+// NewWriter returns a new Writer.\n+// Writes to the returned writer are compressed and written to w.\n //\n // It is the caller's responsibility to call Close on the WriteCloser when done.\n // Writes may be buffered and not flushed until Close."}, {"sha": "ef596991032f4bb14ed0b7cd60e58e53078d5480", "filename": "libgo/go/compress/lzw/reader.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Flzw%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Flzw%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Flzw%2Freader.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -216,8 +216,8 @@ func (d *decoder) Close() error {\n \treturn nil\n }\n \n-// NewReader creates a new io.ReadCloser that satisfies reads by decompressing\n-// the data read from r.\n+// NewReader creates a new io.ReadCloser.\n+// Reads from the returned io.ReadCloser read and decompress data from r.\n // It is the caller's responsibility to call Close on the ReadCloser when\n // finished reading.\n // The number of bits to use for literal codes, litWidth, must be in the"}, {"sha": "961b25f94f5fa6d03bcbdd549534548d69486fcb", "filename": "libgo/go/compress/lzw/writer.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Flzw%2Fwriter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Flzw%2Fwriter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Flzw%2Fwriter.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -225,8 +225,8 @@ func (e *encoder) Close() error {\n \treturn e.w.Flush()\n }\n \n-// NewWriter creates a new io.WriteCloser that satisfies writes by compressing\n-// the data and writing it to w.\n+// NewWriter creates a new io.WriteCloser.\n+// Writes to the returned io.WriteCloser are compressed and written to w.\n // It is the caller's responsibility to call Close on the WriteCloser when\n // finished writing.\n // The number of bits to use for literal codes, litWidth, must be in the"}, {"sha": "9e1aafda9b61e4a9a7a6a4a1d458fc3871275937", "filename": "libgo/go/compress/zlib/reader.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fzlib%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fzlib%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fzlib%2Freader.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -51,7 +51,8 @@ type reader struct {\n \tscratch      [4]byte\n }\n \n-// NewReader creates a new io.ReadCloser that satisfies reads by decompressing data read from r.\n+// NewReader creates a new io.ReadCloser.\n+// Reads from the returned io.ReadCloser read and decompress data from r.\n // The implementation buffers input and may read more data than necessary from r.\n // It is the caller's responsibility to call Close on the ReadCloser when done.\n func NewReader(r io.Reader) (io.ReadCloser, error) {"}, {"sha": "fac7e15a7e3a04a3f8f33a0e6976a806fa31cd76", "filename": "libgo/go/compress/zlib/writer.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fzlib%2Fwriter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fzlib%2Fwriter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fzlib%2Fwriter.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -34,8 +34,8 @@ type Writer struct {\n \twroteHeader bool\n }\n \n-// NewWriter creates a new Writer that satisfies writes by compressing data\n-// written to w.\n+// NewWriter creates a new Writer.\n+// Writes to the returned Writer are compressed and written to w.\n //\n // It is the caller's responsibility to call Close on the WriteCloser when done.\n // Writes may be buffered and not flushed until Close."}, {"sha": "71ba81aaa764b5a471ae06a9b903692b4f3c1a1f", "filename": "libgo/go/compress/zlib/writer_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fzlib%2Fwriter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcompress%2Fzlib%2Fwriter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fzlib%2Fwriter_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -120,7 +120,7 @@ func testFileLevelDictReset(t *testing.T, fn string, level int, dict []byte) {\n \t}\n \tout := buf.String()\n \n-\t// Reset and comprses again.\n+\t// Reset and compress again.\n \tbuf2 := new(bytes.Buffer)\n \tzlibw.Reset(buf2)\n \t_, err = zlibw.Write(b0)"}, {"sha": "c467a11910c9f5e395d30c75c7078fbdcf53c574", "filename": "libgo/go/container/heap/heap.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -78,7 +78,7 @@ func Remove(h Interface, i int) interface{} {\n \treturn h.Pop()\n }\n \n-// Fix reestablishes the heap ordering after the element at index i has changed its value.\n+// Fix re-establishes the heap ordering after the element at index i has changed its value.\n // Changing the value of the element at index i and then calling Fix is equivalent to,\n // but less expensive than, calling Remove(h, i) followed by a Push of the new value.\n // The complexity is O(log(n)) where n = h.Len()."}, {"sha": "363180931c77182c73e620bcc51557d3881066d8", "filename": "libgo/go/crypto/aes/aes_test.go", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Faes%2Faes_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Faes%2Faes_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Faes%2Faes_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -354,6 +354,34 @@ func TestCipherDecrypt(t *testing.T) {\n \t}\n }\n \n+// Test short input/output.\n+// Assembly used to not notice.\n+// See issue 7928.\n+func TestShortBlocks(t *testing.T) {\n+\tbytes := func(n int) []byte { return make([]byte, n) }\n+\n+\tc, _ := NewCipher(bytes(16))\n+\n+\tmustPanic(t, \"crypto/aes: input not full block\", func() { c.Encrypt(bytes(1), bytes(1)) })\n+\tmustPanic(t, \"crypto/aes: input not full block\", func() { c.Decrypt(bytes(1), bytes(1)) })\n+\tmustPanic(t, \"crypto/aes: input not full block\", func() { c.Encrypt(bytes(100), bytes(1)) })\n+\tmustPanic(t, \"crypto/aes: input not full block\", func() { c.Decrypt(bytes(100), bytes(1)) })\n+\tmustPanic(t, \"crypto/aes: output not full block\", func() { c.Encrypt(bytes(1), bytes(100)) })\n+\tmustPanic(t, \"crypto/aes: output not full block\", func() { c.Decrypt(bytes(1), bytes(100)) })\n+}\n+\n+func mustPanic(t *testing.T, msg string, f func()) {\n+\tdefer func() {\n+\t\terr := recover()\n+\t\tif err == nil {\n+\t\t\tt.Errorf(\"function did not panic, wanted %q\", msg)\n+\t\t} else if err != msg {\n+\t\t\tt.Errorf(\"got panic %v, wanted %q\", err, msg)\n+\t\t}\n+\t}()\n+\tf()\n+}\n+\n func BenchmarkEncrypt(b *testing.B) {\n \ttt := encryptTests[0]\n \tc, err := NewCipher(tt.key)"}, {"sha": "2c6bb0a89c7b753359f862081c0f858879b7c99b", "filename": "libgo/go/crypto/aes/cipher.go", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Faes%2Fcipher.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Faes%2Fcipher.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Faes%2Fcipher.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -46,9 +46,21 @@ func NewCipher(key []byte) (cipher.Block, error) {\n func (c *aesCipher) BlockSize() int { return BlockSize }\n \n func (c *aesCipher) Encrypt(dst, src []byte) {\n+\tif len(src) < BlockSize {\n+\t\tpanic(\"crypto/aes: input not full block\")\n+\t}\n+\tif len(dst) < BlockSize {\n+\t\tpanic(\"crypto/aes: output not full block\")\n+\t}\n \tencryptBlock(c.enc, dst, src)\n }\n \n func (c *aesCipher) Decrypt(dst, src []byte) {\n+\tif len(src) < BlockSize {\n+\t\tpanic(\"crypto/aes: input not full block\")\n+\t}\n+\tif len(dst) < BlockSize {\n+\t\tpanic(\"crypto/aes: output not full block\")\n+\t}\n \tdecryptBlock(c.dec, dst, src)\n }"}, {"sha": "964eaaa6f886f9f474be72e1832fa5a7c95d7e1f", "filename": "libgo/go/crypto/aes/cipher_asm.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Faes%2Fcipher_asm.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Faes%2Fcipher_asm.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Faes%2Fcipher_asm.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -21,13 +21,15 @@ func encryptBlock(xk []uint32, dst, src []byte) {\n \t\tencryptBlockGo(xk, dst, src)\n \t}\n }\n+\n func decryptBlock(xk []uint32, dst, src []byte) {\n \tif useAsm {\n \t\tdecryptBlockAsm(len(xk)/4-1, &xk[0], &dst[0], &src[0])\n \t} else {\n \t\tdecryptBlockGo(xk, dst, src)\n \t}\n }\n+\n func expandKey(key []byte, enc, dec []uint32) {\n \tif useAsm {\n \t\trounds := 10"}, {"sha": "027b24851055080af962b010609e510d7c7c8b36", "filename": "libgo/go/crypto/cipher/benchmark_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fcipher%2Fbenchmark_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fcipher%2Fbenchmark_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fcipher%2Fbenchmark_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -47,7 +47,7 @@ func BenchmarkAESGCMOpen1K(b *testing.B) {\n }\n \n // If we test exactly 1K blocks, we would generate exact multiples of\n-// the cipher's block size, and and the cipher stream fragments would\n+// the cipher's block size, and the cipher stream fragments would\n // always be wordsize aligned, whereas non-aligned is a more typical\n // use-case.\n const almost1K = 1024 - 5"}, {"sha": "bdafd85fc30db2f7afbdb9a919d7af39cd3037b3", "filename": "libgo/go/crypto/cipher/gcm.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fcipher%2Fgcm.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fcipher%2Fgcm.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fcipher%2Fgcm.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -30,9 +30,9 @@ type AEAD interface {\n \n \t// Open decrypts and authenticates ciphertext, authenticates the\n \t// additional data and, if successful, appends the resulting plaintext\n-\t// to dst, returning the updated slice and true. On error, nil and\n-\t// false is returned. The nonce must be NonceSize() bytes long and both\n-\t// it and the additional data must match the value passed to Seal.\n+\t// to dst, returning the updated slice. The nonce must be NonceSize()\n+\t// bytes long and both it and the additional data must match the\n+\t// value passed to Seal.\n \t//\n \t// The ciphertext and dst may alias exactly or not at all.\n \tOpen(dst, nonce, ciphertext, data []byte) ([]byte, error)"}, {"sha": "b7565a61b0293899a9fd8e722f6d66fafb3471eb", "filename": "libgo/go/crypto/dsa/dsa.go", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -173,6 +173,16 @@ func GenerateKey(priv *PrivateKey, rand io.Reader) error {\n \treturn nil\n }\n \n+// fermatInverse calculates the inverse of k in GF(P) using Fermat's method.\n+// This has better constant-time properties than Euclid's method (implemented\n+// in math/big.Int.ModInverse) although math/big itself isn't strictly\n+// constant-time so it's not perfect.\n+func fermatInverse(k, P *big.Int) *big.Int {\n+\ttwo := big.NewInt(2)\n+\tpMinus2 := new(big.Int).Sub(P, two)\n+\treturn new(big.Int).Exp(k, pMinus2, P)\n+}\n+\n // Sign signs an arbitrary length hash (which should be the result of hashing a\n // larger message) using the private key, priv. It returns the signature as a\n // pair of integers. The security of the private key depends on the entropy of\n@@ -205,7 +215,7 @@ func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err err\n \t\t\t}\n \t\t}\n \n-\t\tkInv := new(big.Int).ModInverse(k, priv.Q)\n+\t\tkInv := fermatInverse(k, priv.Q)\n \n \t\tr = new(big.Int).Exp(priv.G, k, priv.P)\n \t\tr.Mod(r, priv.Q)"}, {"sha": "1bec7437a5368d1a3bf61a5c888dce95e012fbe2", "filename": "libgo/go/crypto/ecdsa/ecdsa.go", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -84,6 +84,16 @@ func hashToInt(hash []byte, c elliptic.Curve) *big.Int {\n \treturn ret\n }\n \n+// fermatInverse calculates the inverse of k in GF(P) using Fermat's method.\n+// This has better constant-time properties than Euclid's method (implemented\n+// in math/big.Int.ModInverse) although math/big itself isn't strictly\n+// constant-time so it's not perfect.\n+func fermatInverse(k, N *big.Int) *big.Int {\n+\ttwo := big.NewInt(2)\n+\tnMinus2 := new(big.Int).Sub(N, two)\n+\treturn new(big.Int).Exp(k, nMinus2, N)\n+}\n+\n // Sign signs an arbitrary length hash (which should be the result of hashing a\n // larger message) using the private key, priv. It returns the signature as a\n // pair of integers. The security of the private key depends on the entropy of\n@@ -102,7 +112,7 @@ func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err err\n \t\t\t\treturn\n \t\t\t}\n \n-\t\t\tkInv = new(big.Int).ModInverse(k, N)\n+\t\t\tkInv = fermatInverse(k, N)\n \t\t\tr, _ = priv.Curve.ScalarBaseMult(k.Bytes())\n \t\t\tr.Mod(r, N)\n \t\t\tif r.Sign() != 0 {"}, {"sha": "d7956a6d203ee753bd3197650cc6a1aab9b0bde7", "filename": "libgo/go/crypto/md5/md5block_decl.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block_decl.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build amd64 386 arm\n+// +build amd64 amd64p32 386 arm\n \n package md5\n "}, {"sha": "263463e51cdc9cc538287e94e07474da5867ac82", "filename": "libgo/go/crypto/md5/md5block_generic.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block_generic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block_generic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fmd5%2Fmd5block_generic.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build !amd64,!386,!arm\n+// +build !amd64,!amd64p32,!386,!arm\n \n package md5\n "}, {"sha": "1e741fda193b111eaa421f200291677538560439", "filename": "libgo/go/crypto/rand/rand_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frand%2Frand_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frand%2Frand_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frand%2Frand_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd plan9 solaris\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd plan9 solaris\n \n // Unix cryptographically secure pseudorandom number\n // generator."}, {"sha": "fc71b9a6fa2f50199eb95a4f3e361b500a82f009", "filename": "libgo/go/crypto/rc4/rc4_asm.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_asm.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_asm.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_asm.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build amd64 arm 386\n+// +build amd64 amd64p32 arm 386\n \n package rc4\n "}, {"sha": "1ecce1a7fbcd457ed0a0be54bc39536937debebb", "filename": "libgo/go/crypto/rc4/rc4_ref.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_ref.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_ref.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frc4%2Frc4_ref.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build !amd64,!arm,!386\n+// +build !amd64,!amd64p32,!arm,!386\n \n package rc4\n "}, {"sha": "d9957aec1d64f0f8b3ed72aeb1ae4f012124f325", "filename": "libgo/go/crypto/rsa/pkcs1v15.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frsa%2Fpkcs1v15.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frsa%2Fpkcs1v15.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frsa%2Fpkcs1v15.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -214,7 +214,7 @@ func SignPKCS1v15(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []b\n // hashed is the result of hashing the input message using the given hash\n // function and sig is the signature. A valid signature is indicated by\n // returning a nil error. If hash is zero then hashed is used directly. This\n-// isn't advisable except for interopability.\n+// isn't advisable except for interoperability.\n func VerifyPKCS1v15(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte) (err error) {\n \thashLen, prefix, err := pkcs1v15HashInfo(hash, len(hashed))\n \tif err != nil {"}, {"sha": "18eafbc05f7cf547b4339fbe1f1840d0ae7613c8", "filename": "libgo/go/crypto/rsa/pss.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frsa%2Fpss.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frsa%2Fpss.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frsa%2Fpss.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -4,7 +4,7 @@\n \n package rsa\n \n-// This file implementes the PSS signature scheme [1].\n+// This file implements the PSS signature scheme [1].\n //\n // [1] http://www.rsa.com/rsalabs/pkcs/files/h11300-wp-pkcs-1v2-2-rsa-cryptography-standard.pdf\n \n@@ -189,7 +189,7 @@ func emsaPSSVerify(mHash, em []byte, emBits, sLen int, hash hash.Hash) error {\n \n // signPSSWithSalt calculates the signature of hashed using PSS [1] with specified salt.\n // Note that hashed must be the result of hashing the input message using the\n-// given hash funcion. salt is a random sequence of bytes whose length will be\n+// given hash function. salt is a random sequence of bytes whose length will be\n // later used to verify the signature.\n func signPSSWithSalt(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed, salt []byte) (s []byte, err error) {\n \tnBits := priv.N.BitLen()\n@@ -233,7 +233,7 @@ func (opts *PSSOptions) saltLength() int {\n \n // SignPSS calculates the signature of hashed using RSASSA-PSS [1].\n // Note that hashed must be the result of hashing the input message using the\n-// given hash funcion. The opts argument may be nil, in which case sensible\n+// given hash function. The opts argument may be nil, in which case sensible\n // defaults are used.\n func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, opts *PSSOptions) (s []byte, err error) {\n \tsaltLength := opts.saltLength()"}, {"sha": "bce6ba4eba31121edfb394f6112b23500461ac14", "filename": "libgo/go/crypto/rsa/rsa.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -60,7 +60,7 @@ type PrivateKey struct {\n \n type PrecomputedValues struct {\n \tDp, Dq *big.Int // D mod (P-1) (or mod Q-1)\n-\tQinv   *big.Int // Q^-1 mod Q\n+\tQinv   *big.Int // Q^-1 mod P\n \n \t// CRTValues is used for the 3rd and subsequent primes. Due to a\n \t// historical accident, the CRT for the first two primes is handled"}, {"sha": "24e521af1fcbcf0278be93a0226cd10a90dbf16f", "filename": "libgo/go/crypto/sha1/sha1block_decl.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block_decl.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build amd64 386 arm\n+// +build amd64 amd64p32 arm 386\n \n package sha1\n "}, {"sha": "696e26b6257fdfa411f7bc7fc8dd50cc1f10f604", "filename": "libgo/go/crypto/sha1/sha1block_generic.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block_generic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block_generic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fsha1%2Fsha1block_generic.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build !amd64,!386,!arm\n+// +build !amd64,!amd64p32,!386,!arm\n \n package sha1\n "}, {"sha": "fca98bdd11c05e55de68cf482ecdda4696c28f78", "filename": "libgo/go/crypto/tls/common.go", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fcommon.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fcommon.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fcommon.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -82,12 +82,14 @@ const (\n \tscsvRenegotiation uint16 = 0x00ff\n )\n \n-// TLS Elliptic Curves\n+// CurveID is the type of a TLS identifier for an elliptic curve. See\n // http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8\n+type CurveID uint16\n+\n const (\n-\tcurveP256 uint16 = 23\n-\tcurveP384 uint16 = 24\n-\tcurveP521 uint16 = 25\n+\tCurveP256 CurveID = 23\n+\tCurveP384 CurveID = 24\n+\tCurveP521 CurveID = 25\n )\n \n // TLS Elliptic Curve Point Formats\n@@ -153,6 +155,7 @@ var supportedClientCertSignatureAlgorithms = []signatureAndHash{\n \n // ConnectionState records basic TLS details about the connection.\n type ConnectionState struct {\n+\tVersion                    uint16                // TLS version used by the connection (e.g. VersionTLS12)\n \tHandshakeComplete          bool                  // TLS handshake is complete\n \tDidResume                  bool                  // connection resumes a previous TLS connection\n \tCipherSuite                uint16                // cipher suite in use (TLS_RSA_WITH_RC4_128_SHA, ...)\n@@ -198,12 +201,15 @@ type ClientSessionCache interface {\n \tPut(sessionKey string, cs *ClientSessionState)\n }\n \n-// A Config structure is used to configure a TLS client or server. After one\n-// has been passed to a TLS function it must not be modified.\n+// A Config structure is used to configure a TLS client or server.\n+// After one has been passed to a TLS function it must not be\n+// modified. A Config may be reused; the tls package will also not\n+// modify it.\n type Config struct {\n \t// Rand provides the source of entropy for nonces and RSA blinding.\n \t// If Rand is nil, TLS uses the cryptographic random reader in package\n \t// crypto/rand.\n+\t// The Reader must be safe for use by multiple goroutines.\n \tRand io.Reader\n \n \t// Time returns the current time as the number of seconds since the epoch.\n@@ -290,6 +296,11 @@ type Config struct {\n \t// which is currently TLS 1.2.\n \tMaxVersion uint16\n \n+\t// CurvePreferences contains the elliptic curves that will be used in\n+\t// an ECDHE handshake, in preference order. If empty, the default will\n+\t// be used.\n+\tCurvePreferences []CurveID\n+\n \tserverInitOnce sync.Once // guards calling (*Config).serverInit\n }\n \n@@ -348,6 +359,15 @@ func (c *Config) maxVersion() uint16 {\n \treturn c.MaxVersion\n }\n \n+var defaultCurvePreferences = []CurveID{CurveP256, CurveP384, CurveP521}\n+\n+func (c *Config) curvePreferences() []CurveID {\n+\tif c == nil || len(c.CurvePreferences) == 0 {\n+\t\treturn defaultCurvePreferences\n+\t}\n+\treturn c.CurvePreferences\n+}\n+\n // mutualVersion returns the protocol version to use given the advertised\n // version of the peer.\n func (c *Config) mutualVersion(vers uint16) (uint16, bool) {"}, {"sha": "8f7d2c144ff23a9a56735ff88728b51494c07522", "filename": "libgo/go/crypto/tls/conn.go", "status": "modified", "additions": 87, "deletions": 69, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fconn.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fconn.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fconn.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -28,6 +28,7 @@ type Conn struct {\n \n \t// constant after handshake; protected by handshakeMutex\n \thandshakeMutex    sync.Mutex // handshakeMutex < in.Mutex, out.Mutex, errMutex\n+\thandshakeErr      error      // error resulting from handshake\n \tvers              uint16     // TLS version\n \thaveVers          bool       // version has been negotiated\n \tconfig            *Config    // configuration passed to constructor\n@@ -45,9 +46,6 @@ type Conn struct {\n \tclientProtocol         string\n \tclientProtocolFallback bool\n \n-\t// first permanent error\n-\tconnErr\n-\n \t// input/output\n \tin, out  halfConn     // in.Mutex < out.Mutex\n \trawInput *block       // raw input, right off the wire\n@@ -57,27 +55,6 @@ type Conn struct {\n \ttmp [16]byte\n }\n \n-type connErr struct {\n-\tmu    sync.Mutex\n-\tvalue error\n-}\n-\n-func (e *connErr) setError(err error) error {\n-\te.mu.Lock()\n-\tdefer e.mu.Unlock()\n-\n-\tif e.value == nil {\n-\t\te.value = err\n-\t}\n-\treturn err\n-}\n-\n-func (e *connErr) error() error {\n-\te.mu.Lock()\n-\tdefer e.mu.Unlock()\n-\treturn e.value\n-}\n-\n // Access to net.Conn methods.\n // Cannot just embed net.Conn because that would\n // export the struct field too.\n@@ -105,7 +82,7 @@ func (c *Conn) SetReadDeadline(t time.Time) error {\n \treturn c.conn.SetReadDeadline(t)\n }\n \n-// SetWriteDeadline sets the write deadline on the underlying conneciton.\n+// SetWriteDeadline sets the write deadline on the underlying connection.\n // A zero value for t means Write will not time out.\n // After a Write has timed out, the TLS state is corrupt and all future writes will return the same error.\n func (c *Conn) SetWriteDeadline(t time.Time) error {\n@@ -116,6 +93,8 @@ func (c *Conn) SetWriteDeadline(t time.Time) error {\n // connection, either sending or receiving.\n type halfConn struct {\n \tsync.Mutex\n+\n+\terr     error       // first permanent error\n \tversion uint16      // protocol version\n \tcipher  interface{} // cipher algorithm\n \tmac     macFunction\n@@ -129,6 +108,18 @@ type halfConn struct {\n \tinDigestBuf, outDigestBuf []byte\n }\n \n+func (hc *halfConn) setErrorLocked(err error) error {\n+\thc.err = err\n+\treturn err\n+}\n+\n+func (hc *halfConn) error() error {\n+\thc.Lock()\n+\terr := hc.err\n+\thc.Unlock()\n+\treturn err\n+}\n+\n // prepareCipherSpec sets the encryption and MAC states\n // that a subsequent changeCipherSpec will use.\n func (hc *halfConn) prepareCipherSpec(version uint16, cipher interface{}, mac macFunction) {\n@@ -460,6 +451,8 @@ func (b *block) readFromUntil(r io.Reader, n int) error {\n \t\tm, err := r.Read(b.data[len(b.data):cap(b.data)])\n \t\tb.data = b.data[0 : len(b.data)+m]\n \t\tif len(b.data) >= n {\n+\t\t\t// TODO(bradfitz,agl): slightly suspicious\n+\t\t\t// that we're throwing away r.Read's err here.\n \t\t\tbreak\n \t\t}\n \t\tif err != nil {\n@@ -520,16 +513,16 @@ func (c *Conn) readRecord(want recordType) error {\n \tswitch want {\n \tdefault:\n \t\tc.sendAlert(alertInternalError)\n-\t\treturn errors.New(\"tls: unknown record type requested\")\n+\t\treturn c.in.setErrorLocked(errors.New(\"tls: unknown record type requested\"))\n \tcase recordTypeHandshake, recordTypeChangeCipherSpec:\n \t\tif c.handshakeComplete {\n \t\t\tc.sendAlert(alertInternalError)\n-\t\t\treturn errors.New(\"tls: handshake or ChangeCipherSpec requested after handshake complete\")\n+\t\t\treturn c.in.setErrorLocked(errors.New(\"tls: handshake or ChangeCipherSpec requested after handshake complete\"))\n \t\t}\n \tcase recordTypeApplicationData:\n \t\tif !c.handshakeComplete {\n \t\t\tc.sendAlert(alertInternalError)\n-\t\t\treturn errors.New(\"tls: application data record requested before handshake complete\")\n+\t\t\treturn c.in.setErrorLocked(errors.New(\"tls: application data record requested before handshake complete\"))\n \t\t}\n \t}\n \n@@ -548,7 +541,7 @@ Again:\n \t\t// \terr = io.ErrUnexpectedEOF\n \t\t// }\n \t\tif e, ok := err.(net.Error); !ok || !e.Temporary() {\n-\t\t\tc.setError(err)\n+\t\t\tc.in.setErrorLocked(err)\n \t\t}\n \t\treturn err\n \t}\n@@ -560,18 +553,18 @@ Again:\n \t// an SSLv2 client.\n \tif want == recordTypeHandshake && typ == 0x80 {\n \t\tc.sendAlert(alertProtocolVersion)\n-\t\treturn errors.New(\"tls: unsupported SSLv2 handshake received\")\n+\t\treturn c.in.setErrorLocked(errors.New(\"tls: unsupported SSLv2 handshake received\"))\n \t}\n \n \tvers := uint16(b.data[1])<<8 | uint16(b.data[2])\n \tn := int(b.data[3])<<8 | int(b.data[4])\n \tif c.haveVers && vers != c.vers {\n \t\tc.sendAlert(alertProtocolVersion)\n-\t\treturn fmt.Errorf(\"tls: received record with version %x when expecting version %x\", vers, c.vers)\n+\t\treturn c.in.setErrorLocked(fmt.Errorf(\"tls: received record with version %x when expecting version %x\", vers, c.vers))\n \t}\n \tif n > maxCiphertext {\n \t\tc.sendAlert(alertRecordOverflow)\n-\t\treturn fmt.Errorf(\"tls: oversized record received with length %d\", n)\n+\t\treturn c.in.setErrorLocked(fmt.Errorf(\"tls: oversized record received with length %d\", n))\n \t}\n \tif !c.haveVers {\n \t\t// First message, be extra suspicious:\n@@ -584,15 +577,15 @@ Again:\n \t\t// it's probably not real.\n \t\tif (typ != recordTypeAlert && typ != want) || vers >= 0x1000 || n >= 0x3000 {\n \t\t\tc.sendAlert(alertUnexpectedMessage)\n-\t\t\treturn fmt.Errorf(\"tls: first record does not look like a TLS handshake\")\n+\t\t\treturn c.in.setErrorLocked(fmt.Errorf(\"tls: first record does not look like a TLS handshake\"))\n \t\t}\n \t}\n \tif err := b.readFromUntil(c.conn, recordHeaderLen+n); err != nil {\n \t\tif err == io.EOF {\n \t\t\terr = io.ErrUnexpectedEOF\n \t\t}\n \t\tif e, ok := err.(net.Error); !ok || !e.Temporary() {\n-\t\t\tc.setError(err)\n+\t\t\tc.in.setErrorLocked(err)\n \t\t}\n \t\treturn err\n \t}\n@@ -601,27 +594,27 @@ Again:\n \tb, c.rawInput = c.in.splitBlock(b, recordHeaderLen+n)\n \tok, off, err := c.in.decrypt(b)\n \tif !ok {\n-\t\treturn c.sendAlert(err)\n+\t\tc.in.setErrorLocked(c.sendAlert(err))\n \t}\n \tb.off = off\n \tdata := b.data[b.off:]\n \tif len(data) > maxPlaintext {\n-\t\tc.sendAlert(alertRecordOverflow)\n+\t\terr := c.sendAlert(alertRecordOverflow)\n \t\tc.in.freeBlock(b)\n-\t\treturn c.error()\n+\t\treturn c.in.setErrorLocked(err)\n \t}\n \n \tswitch typ {\n \tdefault:\n-\t\tc.sendAlert(alertUnexpectedMessage)\n+\t\tc.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))\n \n \tcase recordTypeAlert:\n \t\tif len(data) != 2 {\n-\t\t\tc.sendAlert(alertUnexpectedMessage)\n+\t\t\tc.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))\n \t\t\tbreak\n \t\t}\n \t\tif alert(data[1]) == alertCloseNotify {\n-\t\t\tc.setError(io.EOF)\n+\t\t\tc.in.setErrorLocked(io.EOF)\n \t\t\tbreak\n \t\t}\n \t\tswitch data[0] {\n@@ -630,24 +623,24 @@ Again:\n \t\t\tc.in.freeBlock(b)\n \t\t\tgoto Again\n \t\tcase alertLevelError:\n-\t\t\tc.setError(&net.OpError{Op: \"remote error\", Err: alert(data[1])})\n+\t\t\tc.in.setErrorLocked(&net.OpError{Op: \"remote error\", Err: alert(data[1])})\n \t\tdefault:\n-\t\t\tc.sendAlert(alertUnexpectedMessage)\n+\t\t\tc.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))\n \t\t}\n \n \tcase recordTypeChangeCipherSpec:\n \t\tif typ != want || len(data) != 1 || data[0] != 1 {\n-\t\t\tc.sendAlert(alertUnexpectedMessage)\n+\t\t\tc.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))\n \t\t\tbreak\n \t\t}\n \t\terr := c.in.changeCipherSpec()\n \t\tif err != nil {\n-\t\t\tc.sendAlert(err.(alert))\n+\t\t\tc.in.setErrorLocked(c.sendAlert(err.(alert)))\n \t\t}\n \n \tcase recordTypeApplicationData:\n \t\tif typ != want {\n-\t\t\tc.sendAlert(alertUnexpectedMessage)\n+\t\t\tc.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))\n \t\t\tbreak\n \t\t}\n \t\tc.input = b\n@@ -656,15 +649,15 @@ Again:\n \tcase recordTypeHandshake:\n \t\t// TODO(rsc): Should at least pick off connection close.\n \t\tif typ != want {\n-\t\t\treturn c.sendAlert(alertNoRenegotiation)\n+\t\t\treturn c.in.setErrorLocked(c.sendAlert(alertNoRenegotiation))\n \t\t}\n \t\tc.hand.Write(data)\n \t}\n \n \tif b != nil {\n \t\tc.in.freeBlock(b)\n \t}\n-\treturn c.error()\n+\treturn c.in.err\n }\n \n // sendAlert sends a TLS alert message.\n@@ -680,7 +673,7 @@ func (c *Conn) sendAlertLocked(err alert) error {\n \tc.writeRecord(recordTypeAlert, c.tmp[0:2])\n \t// closeNotify is a special case in that it isn't an error:\n \tif err != alertCloseNotify {\n-\t\treturn c.setError(&net.OpError{Op: \"local error\", Err: err})\n+\t\treturn c.out.setErrorLocked(&net.OpError{Op: \"local error\", Err: err})\n \t}\n \treturn nil\n }\n@@ -766,7 +759,7 @@ func (c *Conn) writeRecord(typ recordType, data []byte) (n int, err error) {\n \t\t\tc.tmp[0] = alertLevelError\n \t\t\tc.tmp[1] = byte(err.(alert))\n \t\t\tc.writeRecord(recordTypeAlert, c.tmp[0:2])\n-\t\t\treturn n, c.setError(&net.OpError{Op: \"local error\", Err: err})\n+\t\t\treturn n, c.out.setErrorLocked(&net.OpError{Op: \"local error\", Err: err})\n \t\t}\n \t}\n \treturn\n@@ -777,7 +770,7 @@ func (c *Conn) writeRecord(typ recordType, data []byte) (n int, err error) {\n // c.in.Mutex < L; c.out.Mutex < L.\n func (c *Conn) readHandshake() (interface{}, error) {\n \tfor c.hand.Len() < 4 {\n-\t\tif err := c.error(); err != nil {\n+\t\tif err := c.in.err; err != nil {\n \t\t\treturn nil, err\n \t\t}\n \t\tif err := c.readRecord(recordTypeHandshake); err != nil {\n@@ -788,11 +781,10 @@ func (c *Conn) readHandshake() (interface{}, error) {\n \tdata := c.hand.Bytes()\n \tn := int(data[1])<<16 | int(data[2])<<8 | int(data[3])\n \tif n > maxHandshake {\n-\t\tc.sendAlert(alertInternalError)\n-\t\treturn nil, c.error()\n+\t\treturn nil, c.in.setErrorLocked(c.sendAlert(alertInternalError))\n \t}\n \tfor c.hand.Len() < 4+n {\n-\t\tif err := c.error(); err != nil {\n+\t\tif err := c.in.err; err != nil {\n \t\t\treturn nil, err\n \t\t}\n \t\tif err := c.readRecord(recordTypeHandshake); err != nil {\n@@ -831,8 +823,7 @@ func (c *Conn) readHandshake() (interface{}, error) {\n \tcase typeFinished:\n \t\tm = new(finishedMsg)\n \tdefault:\n-\t\tc.sendAlert(alertUnexpectedMessage)\n-\t\treturn nil, alertUnexpectedMessage\n+\t\treturn nil, c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))\n \t}\n \n \t// The handshake message unmarshallers\n@@ -841,25 +832,24 @@ func (c *Conn) readHandshake() (interface{}, error) {\n \tdata = append([]byte(nil), data...)\n \n \tif !m.unmarshal(data) {\n-\t\tc.sendAlert(alertUnexpectedMessage)\n-\t\treturn nil, alertUnexpectedMessage\n+\t\treturn nil, c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))\n \t}\n \treturn m, nil\n }\n \n // Write writes data to the connection.\n func (c *Conn) Write(b []byte) (int, error) {\n-\tif err := c.error(); err != nil {\n-\t\treturn 0, err\n-\t}\n-\n \tif err := c.Handshake(); err != nil {\n-\t\treturn 0, c.setError(err)\n+\t\treturn 0, err\n \t}\n \n \tc.out.Lock()\n \tdefer c.out.Unlock()\n \n+\tif err := c.out.err; err != nil {\n+\t\treturn 0, err\n+\t}\n+\n \tif !c.handshakeComplete {\n \t\treturn 0, alertInternalError\n \t}\n@@ -878,14 +868,14 @@ func (c *Conn) Write(b []byte) (int, error) {\n \t\tif _, ok := c.out.cipher.(cipher.BlockMode); ok {\n \t\t\tn, err := c.writeRecord(recordTypeApplicationData, b[:1])\n \t\t\tif err != nil {\n-\t\t\t\treturn n, c.setError(err)\n+\t\t\t\treturn n, c.out.setErrorLocked(err)\n \t\t\t}\n \t\t\tm, b = 1, b[1:]\n \t\t}\n \t}\n \n \tn, err := c.writeRecord(recordTypeApplicationData, b)\n-\treturn n + m, c.setError(err)\n+\treturn n + m, c.out.setErrorLocked(err)\n }\n \n // Read can be made to time out and return a net.Error with Timeout() == true\n@@ -894,6 +884,11 @@ func (c *Conn) Read(b []byte) (n int, err error) {\n \tif err = c.Handshake(); err != nil {\n \t\treturn\n \t}\n+\tif len(b) == 0 {\n+\t\t// Put this after Handshake, in case people were calling\n+\t\t// Read(nil) for the side effect of the Handshake.\n+\t\treturn\n+\t}\n \n \tc.in.Lock()\n \tdefer c.in.Unlock()\n@@ -902,13 +897,13 @@ func (c *Conn) Read(b []byte) (n int, err error) {\n \t// CBC IV. So this loop ignores a limited number of empty records.\n \tconst maxConsecutiveEmptyRecords = 100\n \tfor emptyRecordCount := 0; emptyRecordCount <= maxConsecutiveEmptyRecords; emptyRecordCount++ {\n-\t\tfor c.input == nil && c.error() == nil {\n+\t\tfor c.input == nil && c.in.err == nil {\n \t\t\tif err := c.readRecord(recordTypeApplicationData); err != nil {\n \t\t\t\t// Soft error, like EAGAIN\n \t\t\t\treturn 0, err\n \t\t\t}\n \t\t}\n-\t\tif err := c.error(); err != nil {\n+\t\tif err := c.in.err; err != nil {\n \t\t\treturn 0, err\n \t\t}\n \n@@ -918,6 +913,25 @@ func (c *Conn) Read(b []byte) (n int, err error) {\n \t\t\tc.input = nil\n \t\t}\n \n+\t\t// If a close-notify alert is waiting, read it so that\n+\t\t// we can return (n, EOF) instead of (n, nil), to signal\n+\t\t// to the HTTP response reading goroutine that the\n+\t\t// connection is now closed. This eliminates a race\n+\t\t// where the HTTP response reading goroutine would\n+\t\t// otherwise not observe the EOF until its next read,\n+\t\t// by which time a client goroutine might have already\n+\t\t// tried to reuse the HTTP connection for a new\n+\t\t// request.\n+\t\t// See https://codereview.appspot.com/76400046\n+\t\t// and http://golang.org/issue/3514\n+\t\tif ri := c.rawInput; ri != nil &&\n+\t\t\tn != 0 && err == nil &&\n+\t\t\tc.input == nil && len(ri.data) > 0 && recordType(ri.data[0]) == recordTypeAlert {\n+\t\t\tif recErr := c.readRecord(recordTypeApplicationData); recErr != nil {\n+\t\t\t\terr = recErr // will be io.EOF on closeNotify\n+\t\t\t}\n+\t\t}\n+\n \t\tif n != 0 || err != nil {\n \t\t\treturn n, err\n \t\t}\n@@ -949,16 +963,19 @@ func (c *Conn) Close() error {\n func (c *Conn) Handshake() error {\n \tc.handshakeMutex.Lock()\n \tdefer c.handshakeMutex.Unlock()\n-\tif err := c.error(); err != nil {\n+\tif err := c.handshakeErr; err != nil {\n \t\treturn err\n \t}\n \tif c.handshakeComplete {\n \t\treturn nil\n \t}\n+\n \tif c.isClient {\n-\t\treturn c.clientHandshake()\n+\t\tc.handshakeErr = c.clientHandshake()\n+\t} else {\n+\t\tc.handshakeErr = c.serverHandshake()\n \t}\n-\treturn c.serverHandshake()\n+\treturn c.handshakeErr\n }\n \n // ConnectionState returns basic TLS details about the connection.\n@@ -969,6 +986,7 @@ func (c *Conn) ConnectionState() ConnectionState {\n \tvar state ConnectionState\n \tstate.HandshakeComplete = c.handshakeComplete\n \tif c.handshakeComplete {\n+\t\tstate.Version = c.vers\n \t\tstate.NegotiatedProtocol = c.clientProtocol\n \t\tstate.DidResume = c.didResume\n \t\tstate.NegotiatedProtocolIsMutual = !c.clientProtocolFallback"}, {"sha": "5c6d8396d5208ea7a998718b2f154d3e688291b0", "filename": "libgo/go/crypto/tls/generate_cert.go", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fgenerate_cert.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fgenerate_cert.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fgenerate_cert.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -58,12 +58,6 @@ func main() {\n \n \tnotAfter := notBefore.Add(*validFor)\n \n-\t// end of ASN.1 time\n-\tendOfTime := time.Date(2049, 12, 31, 23, 59, 59, 0, time.UTC)\n-\tif notAfter.After(endOfTime) {\n-\t\tnotAfter = endOfTime\n-\t}\n-\n \tserialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)\n \tserialNumber, err := rand.Int(rand.Reader, serialNumberLimit)\n \tif err != nil {"}, {"sha": "a320fde1bc7cb82c2f91f76cbf089b783179bc9c", "filename": "libgo/go/crypto/tls/handshake_client.go", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_client.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_client.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_client.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -33,13 +33,17 @@ func (c *Conn) clientHandshake() error {\n \t\tc.config = defaultConfig()\n \t}\n \n+\tif len(c.config.ServerName) == 0 && !c.config.InsecureSkipVerify {\n+\t\treturn errors.New(\"tls: either ServerName or InsecureSkipVerify must be specified in the tls.Config\")\n+\t}\n+\n \thello := &clientHelloMsg{\n \t\tvers:                c.config.maxVersion(),\n \t\tcompressionMethods:  []uint8{compressionNone},\n \t\trandom:              make([]byte, 32),\n \t\tocspStapling:        true,\n \t\tserverName:          c.config.ServerName,\n-\t\tsupportedCurves:     []uint16{curveP256, curveP384, curveP521},\n+\t\tsupportedCurves:     c.config.curvePreferences(),\n \t\tsupportedPoints:     []uint8{pointFormatUncompressed},\n \t\tnextProtoNeg:        len(c.config.NextProtos) > 0,\n \t\tsecureRenegotiation: true,\n@@ -497,7 +501,7 @@ func (hs *clientHandshakeState) readFinished() error {\n \tc := hs.c\n \n \tc.readRecord(recordTypeChangeCipherSpec)\n-\tif err := c.error(); err != nil {\n+\tif err := c.in.error(); err != nil {\n \t\treturn err\n \t}\n "}, {"sha": "7bcaa5eb9292977d2403a11f53102df64d161a24", "filename": "libgo/go/crypto/tls/handshake_messages.go", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_messages.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_messages.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_messages.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -16,7 +16,7 @@ type clientHelloMsg struct {\n \tnextProtoNeg        bool\n \tserverName          string\n \tocspStapling        bool\n-\tsupportedCurves     []uint16\n+\tsupportedCurves     []CurveID\n \tsupportedPoints     []uint8\n \tticketSupported     bool\n \tsessionTicket       []uint8\n@@ -39,7 +39,7 @@ func (m *clientHelloMsg) equal(i interface{}) bool {\n \t\tm.nextProtoNeg == m1.nextProtoNeg &&\n \t\tm.serverName == m1.serverName &&\n \t\tm.ocspStapling == m1.ocspStapling &&\n-\t\teqUint16s(m.supportedCurves, m1.supportedCurves) &&\n+\t\teqCurveIDs(m.supportedCurves, m1.supportedCurves) &&\n \t\tbytes.Equal(m.supportedPoints, m1.supportedPoints) &&\n \t\tm.ticketSupported == m1.ticketSupported &&\n \t\tbytes.Equal(m.sessionTicket, m1.sessionTicket) &&\n@@ -357,10 +357,10 @@ func (m *clientHelloMsg) unmarshal(data []byte) bool {\n \t\t\t\treturn false\n \t\t\t}\n \t\t\tnumCurves := l / 2\n-\t\t\tm.supportedCurves = make([]uint16, numCurves)\n+\t\t\tm.supportedCurves = make([]CurveID, numCurves)\n \t\t\td := data[2:]\n \t\t\tfor i := 0; i < numCurves; i++ {\n-\t\t\t\tm.supportedCurves[i] = uint16(d[0])<<8 | uint16(d[1])\n+\t\t\t\tm.supportedCurves[i] = CurveID(d[0])<<8 | CurveID(d[1])\n \t\t\t\td = d[2:]\n \t\t\t}\n \t\tcase extensionSupportedPoints:\n@@ -1294,6 +1294,18 @@ func eqUint16s(x, y []uint16) bool {\n \treturn true\n }\n \n+func eqCurveIDs(x, y []CurveID) bool {\n+\tif len(x) != len(y) {\n+\t\treturn false\n+\t}\n+\tfor i, v := range x {\n+\t\tif y[i] != v {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\n+\n func eqStrings(x, y []string) bool {\n \tif len(x) != len(y) {\n \t\treturn false"}, {"sha": "f46aabdfd5f2445bb1b4e54e58da09903e3ed1a6", "filename": "libgo/go/crypto/tls/handshake_messages_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_messages_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_messages_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_messages_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -125,9 +125,9 @@ func (*clientHelloMsg) Generate(rand *rand.Rand, size int) reflect.Value {\n \t}\n \tm.ocspStapling = rand.Intn(10) > 5\n \tm.supportedPoints = randomBytes(rand.Intn(5)+1, rand)\n-\tm.supportedCurves = make([]uint16, rand.Intn(5)+1)\n+\tm.supportedCurves = make([]CurveID, rand.Intn(5)+1)\n \tfor i := range m.supportedCurves {\n-\t\tm.supportedCurves[i] = uint16(rand.Intn(30000))\n+\t\tm.supportedCurves[i] = CurveID(rand.Intn(30000))\n \t}\n \tif rand.Intn(10) > 5 {\n \t\tm.ticketSupported = true"}, {"sha": "75111eba0042f54c2cd42b59bd1f82161c957c84", "filename": "libgo/go/crypto/tls/handshake_server.go", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -117,12 +117,14 @@ func (hs *serverHandshakeState) readClientHello() (isResume bool, err error) {\n \ths.hello = new(serverHelloMsg)\n \n \tsupportedCurve := false\n+\tpreferredCurves := config.curvePreferences()\n Curves:\n \tfor _, curve := range hs.clientHello.supportedCurves {\n-\t\tswitch curve {\n-\t\tcase curveP256, curveP384, curveP521:\n-\t\t\tsupportedCurve = true\n-\t\t\tbreak Curves\n+\t\tfor _, supported := range preferredCurves {\n+\t\t\tif supported == curve {\n+\t\t\t\tsupportedCurve = true\n+\t\t\t\tbreak Curves\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -468,7 +470,7 @@ func (hs *serverHandshakeState) readFinished() error {\n \tc := hs.c\n \n \tc.readRecord(recordTypeChangeCipherSpec)\n-\tif err := c.error(); err != nil {\n+\tif err := c.in.error(); err != nil {\n \t\treturn err\n \t}\n "}, {"sha": "c3e36785b5d0fff4a0413d934b91372d12e73ab7", "filename": "libgo/go/crypto/tls/handshake_server_test.go", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -121,7 +121,7 @@ func TestTLS12OnlyCipherSuites(t *testing.T) {\n \t\t\tTLS_RSA_WITH_RC4_128_SHA,\n \t\t},\n \t\tcompressionMethods: []uint8{compressionNone},\n-\t\tsupportedCurves:    []uint16{curveP256, curveP384, curveP521},\n+\t\tsupportedCurves:    []CurveID{CurveP256, CurveP384, CurveP521},\n \t\tsupportedPoints:    []uint8{pointFormatUncompressed},\n \t}\n \n@@ -195,6 +195,23 @@ func testHandshake(clientConfig, serverConfig *Config) (state ConnectionState, e\n \treturn\n }\n \n+func TestVersion(t *testing.T) {\n+\tserverConfig := &Config{\n+\t\tCertificates: testConfig.Certificates,\n+\t\tMaxVersion:   VersionTLS11,\n+\t}\n+\tclientConfig := &Config{\n+\t\tInsecureSkipVerify: true,\n+\t}\n+\tstate, err := testHandshake(clientConfig, serverConfig)\n+\tif err != nil {\n+\t\tt.Fatalf(\"handshake failed: %s\", err)\n+\t}\n+\tif state.Version != VersionTLS11 {\n+\t\tt.Fatalf(\"Incorrect version %x, should be %x\", state.Version, VersionTLS11)\n+\t}\n+}\n+\n func TestCipherSuitePreference(t *testing.T) {\n \tserverConfig := &Config{\n \t\tCipherSuites: []uint16{TLS_RSA_WITH_RC4_128_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_RC4_128_SHA},"}, {"sha": "f38b701f1bab5a6a8fbb64d2a2375f9ccd404930", "filename": "libgo/go/crypto/tls/key_agreement.go", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fkey_agreement.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Fkey_agreement.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fkey_agreement.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -141,7 +141,7 @@ func hashForServerKeyExchange(sigType, hashFunc uint8, version uint16, slices ..\n \n // pickTLS12HashForSignature returns a TLS 1.2 hash identifier for signing a\n // ServerKeyExchange given the signature type being used and the client's\n-// advertized list of supported signature and hash combinations.\n+// advertised list of supported signature and hash combinations.\n func pickTLS12HashForSignature(sigType uint8, clientSignatureAndHashes []signatureAndHash) (uint8, error) {\n \tif len(clientSignatureAndHashes) == 0 {\n \t\t// If the client didn't specify any signature_algorithms\n@@ -163,6 +163,20 @@ func pickTLS12HashForSignature(sigType uint8, clientSignatureAndHashes []signatu\n \treturn 0, errors.New(\"tls: client doesn't support any common hash functions\")\n }\n \n+func curveForCurveID(id CurveID) (elliptic.Curve, bool) {\n+\tswitch id {\n+\tcase CurveP256:\n+\t\treturn elliptic.P256(), true\n+\tcase CurveP384:\n+\t\treturn elliptic.P384(), true\n+\tcase CurveP521:\n+\t\treturn elliptic.P521(), true\n+\tdefault:\n+\t\treturn nil, false\n+\t}\n+\n+}\n+\n // ecdheRSAKeyAgreement implements a TLS key agreement where the server\n // generates a ephemeral EC public/private key pair and signs it. The\n // pre-master secret is then calculated using ECDH. The signature may\n@@ -176,30 +190,28 @@ type ecdheKeyAgreement struct {\n }\n \n func (ka *ecdheKeyAgreement) generateServerKeyExchange(config *Config, cert *Certificate, clientHello *clientHelloMsg, hello *serverHelloMsg) (*serverKeyExchangeMsg, error) {\n-\tvar curveid uint16\n-\n-Curve:\n-\tfor _, c := range clientHello.supportedCurves {\n-\t\tswitch c {\n-\t\tcase curveP256:\n-\t\t\tka.curve = elliptic.P256()\n-\t\t\tcurveid = c\n-\t\t\tbreak Curve\n-\t\tcase curveP384:\n-\t\t\tka.curve = elliptic.P384()\n-\t\t\tcurveid = c\n-\t\t\tbreak Curve\n-\t\tcase curveP521:\n-\t\t\tka.curve = elliptic.P521()\n-\t\t\tcurveid = c\n-\t\t\tbreak Curve\n+\tvar curveid CurveID\n+\tpreferredCurves := config.curvePreferences()\n+\n+NextCandidate:\n+\tfor _, candidate := range preferredCurves {\n+\t\tfor _, c := range clientHello.supportedCurves {\n+\t\t\tif candidate == c {\n+\t\t\t\tcurveid = c\n+\t\t\t\tbreak NextCandidate\n+\t\t\t}\n \t\t}\n \t}\n \n \tif curveid == 0 {\n \t\treturn nil, errors.New(\"tls: no supported elliptic curves offered\")\n \t}\n \n+\tvar ok bool\n+\tif ka.curve, ok = curveForCurveID(curveid); !ok {\n+\t\treturn nil, errors.New(\"tls: preferredCurves includes unsupported curve\")\n+\t}\n+\n \tvar x, y *big.Int\n \tvar err error\n \tka.privateKey, x, y, err = elliptic.GenerateKey(ka.curve, config.rand())\n@@ -293,19 +305,13 @@ func (ka *ecdheKeyAgreement) processServerKeyExchange(config *Config, clientHell\n \t\treturn errServerKeyExchange\n \t}\n \tif skx.key[0] != 3 { // named curve\n-\t\treturn errors.New(\"server selected unsupported curve\")\n+\t\treturn errors.New(\"tls: server selected unsupported curve\")\n \t}\n-\tcurveid := uint16(skx.key[1])<<8 | uint16(skx.key[2])\n+\tcurveid := CurveID(skx.key[1])<<8 | CurveID(skx.key[2])\n \n-\tswitch curveid {\n-\tcase curveP256:\n-\t\tka.curve = elliptic.P256()\n-\tcase curveP384:\n-\t\tka.curve = elliptic.P384()\n-\tcase curveP521:\n-\t\tka.curve = elliptic.P521()\n-\tdefault:\n-\t\treturn errors.New(\"server selected unsupported curve\")\n+\tvar ok bool\n+\tif ka.curve, ok = curveForCurveID(curveid); !ok {\n+\t\treturn errors.New(\"tls: server selected unsupported curve\")\n \t}\n \n \tpublicLen := int(skx.key[3])"}, {"sha": "00722cba945f875effd1353c2f1eebb6011c38fa", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv10-ClientCert-ECDSA-ECDSA", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-ECDSA-ECDSA", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-ECDSA-ECDSA", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-ECDSA-ECDSA?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 01 00 59 02 00 00  55 03 01 52 cc 57 59 e6  |....Y...U..R.WY.|\n-00000010  12 4c 15 38 e6 b7 2c 9e  b5 82 bb b5 9d f5 71 4a  |.L.8..,.......qJ|\n-00000020  66 21 30 c2 44 69 ec 7c  8a 37 8b 20 1e 9c 78 3a  |f!0.Di.|.7. ..x:|\n-00000030  bf d0 e0 37 6b 88 5c 8f  90 a8 92 c3 f6 b7 ad fc  |...7k.\\.........|\n-00000040  56 4a 50 34 ce 8f 08 e5  08 40 71 9b c0 09 00 00  |VJP4.....@q.....|\n+00000000  16 03 01 00 59 02 00 00  55 03 01 53 04 f1 03 46  |....Y...U..S...F|\n+00000010  0f 84 c4 cb 55 ef 85 f6  4f d7 0e e1 4b 10 d4 bb  |....U...O...K...|\n+00000020  35 87 2d f3 d7 18 ec 4e  95 4b f4 20 28 82 94 d9  |5.-....N.K. (...|\n+00000030  df c4 fc ee 21 23 c1 e2  76 3e 7b 09 af 2c 39 23  |....!#..v>{..,9#|\n+00000040  f8 46 6c 31 88 42 f0 79  de 37 2b 00 c0 09 00 00  |.Fl1.B.y.7+.....|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  01 02 0e 0b 00 02 0a 00  02 07 00 02 04 30 82 02  |.............0..|\n 00000070  00 30 82 01 62 02 09 00  b8 bf 2d 47 a0 d2 eb f4  |.0..b.....-G....|\n@@ -47,20 +47,20 @@\n 00000240  13 83 0d 94 06 bb d4 37  7a f6 ec 7a c9 86 2e dd  |.......7z..z....|\n 00000250  d7 11 69 7f 85 7c 56 de  fb 31 78 2b e4 c7 78 0d  |..i..|V..1x+..x.|\n 00000260  ae cb be 9e 4e 36 24 31  7b 6a 0f 39 95 12 07 8f  |....N6$1{j.9....|\n-00000270  2a 16 03 01 00 d5 0c 00  00 d1 03 00 17 41 04 00  |*............A..|\n-00000280  3d 87 12 2c c5 fd db 6e  ab 0c 7c 54 85 fc d3 13  |=..,...n..|T....|\n-00000290  34 1e 13 83 2c 60 05 67  83 f0 3a cc c6 27 84 63  |4...,`.g..:..'.c|\n-000002a0  90 4e 25 26 0f 03 ca f3  ae 7e 44 c6 94 0d e4 1b  |.N%&.....~D.....|\n-000002b0  4a 53 e2 d7 f0 5c 83 64  37 c0 0f d1 9e 86 de 00  |JS...\\.d7.......|\n-000002c0  8a 30 81 87 02 41 4f 85  6d 11 af d1 27 9c de 21  |.0...AO.m...'..!|\n-000002d0  d7 e5 96 ad 4f 6a a1 5c  2b 63 22 0e 4f 22 77 16  |....Oj.\\+c\".O\"w.|\n-000002e0  ec 6e db 38 1a df 28 4e  ee 9e a4 c1 e7 d3 02 74  |.n.8..(N.......t|\n-000002f0  07 3f 58 7f 82 51 2d 9e  78 6b bd 28 77 20 c1 40  |.?X..Q-.xk.(w .@|\n-00000300  09 71 ba b9 23 c7 82 02  42 01 13 1b 64 c4 1f c6  |.q..#...B...d...|\n-00000310  1f f3 f4 51 8c 64 92 37  5e f0 5c 11 c9 ee 43 55  |...Q.d.7^.\\...CU|\n-00000320  a0 83 52 8b d9 2d d1 22  2c 2e 2c e0 04 a6 59 b3  |..R..-.\",.,...Y.|\n-00000330  f9 33 d8 e4 9a 0b 2b 95  c6 41 5d 60 a3 d1 9f 31  |.3....+..A]`...1|\n-00000340  14 5d a3 31 6e 70 f1 e7  35 5a f9 16 03 01 00 0e  |.].1np..5Z......|\n+00000270  2a 16 03 01 00 d5 0c 00  00 d1 03 00 17 41 04 4f  |*............A.O|\n+00000280  47 16 72 98 9e 9f 2e 8e  78 e9 0f fe 95 83 7b aa  |G.r.....x.....{.|\n+00000290  e5 3d c0 7d cf 83 bd 22  0b fd 48 f1 a7 49 a5 7d  |.=.}...\"..H..I.}|\n+000002a0  8e 0c 83 7f e1 2d 71 03  cc 90 09 ab f7 35 81 48  |.....-q......5.H|\n+000002b0  a4 1e 7d 87 21 23 12 58  2c 47 f3 af c7 6c 71 00  |..}.!#.X,G...lq.|\n+000002c0  8a 30 81 87 02 42 00 b4  03 38 60 43 d9 32 ef 64  |.0...B...8`C.2.d|\n+000002d0  5a 9c 91 95 0d 10 21 53  c7 78 f8 bf 50 ed 13 5d  |Z.....!S.x..P..]|\n+000002e0  c3 e7 71 d6 11 04 f1 e4  9d ce 17 99 8d 1a 87 1f  |..q.............|\n+000002f0  cb dd f8 1b ae cd bc 4a  77 ab 7c 50 bf 73 c3 ea  |.......Jw.|P.s..|\n+00000300  d6 df 88 56 f6 b1 03 83  02 41 66 3d fb 4e 7e af  |...V.....Af=.N~.|\n+00000310  4e c1 60 fe 09 fa 7e 74  99 66 7f de b4 b2 74 89  |N.`...~t.f....t.|\n+00000320  1c a4 cf 74 1a 55 a5 be  74 f9 36 21 3d ae c8 c3  |...t.U..t.6!=...|\n+00000330  24 8e ad db a3 26 67 8f  98 27 e3 93 ee d9 5c fb  |$....&g..'....\\.|\n+00000340  85 82 e2 13 c3 50 ab e9  f6 39 2b 16 03 01 00 0e  |.....P...9+.....|\n 00000350  0d 00 00 06 03 01 02 40  00 00 0e 00 00 00        |.......@......|\n >>> Flow 3 (client to server)\n 00000000  16 03 01 02 0a 0b 00 02  06 00 02 03 00 02 00 30  |...............0|\n@@ -108,22 +108,22 @@\n 000002a0  85 6a 42 9b f9 7e 7e 31  c2 e5 bd 66 02 41 4b 49  |.jB..~~1...f.AKI|\n 000002b0  c6 cd 02 e3 83 f7 03 50  18 6d b4 c9 51 02 c0 ab  |.......P.m..Q...|\n 000002c0  87 bc e0 3e 4b 89 53 3a  e2 65 89 97 02 c1 87 f1  |...>K.S:.e......|\n-000002d0  67 d0 f2 06 28 4e 51 4e  fd f0 01 c1 1f 1d 1c 32  |g...(NQN.......2|\n-000002e0  1f 91 5d 06 f5 44 1b a0  1b 61 43 6b de 81 bd 14  |..]..D...aCk....|\n-000002f0  03 01 00 01 01 16 03 01  00 30 fe bb 82 52 2d 8a  |.........0...R-.|\n-00000300  81 87 ba 2c 18 5b 93 07  78 30 85 f3 5f 4f df 3f  |...,.[..x0.._O.?|\n-00000310  1a fc 01 b9 a5 32 99 d3  40 0b ef c5 b8 32 f4 7e  |.....2..@....2.~|\n-00000320  d2 93 0f 19 24 87 c5 18  e2 8b                    |....$.....|\n+000002d0  67 d0 f2 06 28 4e 51 4e  fd f0 01 be 41 3c 52 42  |g...(NQN....A<RB|\n+000002e0  10 44 73 88 3e 44 24 bb  2e 77 01 77 6f a8 ac 14  |.Ds.>D$..w.wo...|\n+000002f0  03 01 00 01 01 16 03 01  00 30 a3 da 45 22 96 83  |.........0..E\"..|\n+00000300  59 90 e9 6b ec 3b 77 50  05 89 e6 0c 61 d1 1d 2b  |Y..k.;wP....a..+|\n+00000310  da d4 49 bf b9 c6 dd ad  c3 9c 82 bd 53 62 e8 57  |..I.........Sb.W|\n+00000320  a4 6a e7 9f b1 d5 39 77  88 6d                    |.j....9w.m|\n >>> Flow 4 (server to client)\n-00000000  14 03 01 00 01 01 16 03  01 00 30 84 a0 90 cb 8b  |..........0.....|\n-00000010  43 ad 66 06 ef f1 4b 5c  85 cc 4e 12 60 44 b4 be  |C.f...K\\..N.`D..|\n-00000020  ed 94 23 69 bf 7a cc e9  a7 17 db 9a ec d5 9b 15  |..#i.z..........|\n-00000030  92 62 5e bb ac db 78 50  d1 b2 0c                 |.b^...xP...|\n+00000000  14 03 01 00 01 01 16 03  01 00 30 a4 45 dd 99 df  |..........0.E...|\n+00000010  66 ae f5 c7 bd 1a eb 6a  ff ac a6 38 14 81 b5 07  |f......j...8....|\n+00000020  86 24 80 f1 09 59 ad 33  3d 43 ed 9e 43 b1 1e 9f  |.$...Y.3=C..C...|\n+00000030  bd 8c b3 e0 41 83 a1 34  91 c5 a1                 |....A..4...|\n >>> Flow 5 (client to server)\n-00000000  17 03 01 00 20 b4 fd 9e  0a 69 49 16 72 52 8b 81  |.... ....iI.rR..|\n-00000010  50 87 07 77 d4 9a 07 06  88 e0 43 43 32 a0 7c f9  |P..w......CC2.|.|\n-00000020  13 88 3f 87 36 17 03 01  00 20 6e 96 f6 4c f8 8d  |..?.6.... n..L..|\n-00000030  1b 15 ff 3e 7c 5e fc f0  81 6e 5e 26 3c 42 96 dc  |...>|^...n^&<B..|\n-00000040  69 79 b8 73 9c 1d eb 31  5d 94 15 03 01 00 20 b4  |iy.s...1]..... .|\n-00000050  68 2c 4d 74 ed a5 bc f4  e3 56 bd 3e 19 78 fc 8a  |h,Mt.....V.>.x..|\n-00000060  1e f0 4c 7e f9 11 de e1  15 38 9b ed 6f 9b 34     |..L~.....8..o.4|\n+00000000  17 03 01 00 20 ae e3 ae  7f 2d e3 a2 f7 1b 4e 69  |.... ....-....Ni|\n+00000010  cb 18 c6 68 42 f8 de 61  92 4c fa d6 19 7c 8c 09  |...hB..a.L...|..|\n+00000020  82 e2 f2 32 19 17 03 01  00 20 2a 77 65 1f c1 fd  |...2..... *we...|\n+00000030  5e 37 b7 15 f6 1f 4c 7f  5f 89 52 b4 32 27 4d 17  |^7....L._.R.2'M.|\n+00000040  33 c6 e8 50 ac 70 c8 b9  2d 0a 15 03 01 00 20 e0  |3..P.p..-..... .|\n+00000050  cb ce 07 80 55 a0 46 ca  a7 25 4c 5f 9d 7c 73 37  |....U.F..%L_.|s7|\n+00000060  de 72 6d 36 a8 e4 be fd  2a e7 f8 8d 14 80 b7     |.rm6....*......|"}, {"sha": "c0be82491e250c453a659cc65e06a0506c251267", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv10-ClientCert-ECDSA-RSA", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-ECDSA-RSA", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-ECDSA-RSA", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-ECDSA-RSA?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 01 00 51 02 00 00  4d 03 01 52 cc 57 59 78  |....Q...M..R.WYx|\n-00000010  63 f8 d6 ea 32 6f 22 7c  7b fb ab 48 c8 3b d9 ed  |c...2o\"|{..H.;..|\n-00000020  5b 01 e0 0a 36 d8 26 57  56 dd e4 20 ed c9 d8 e5  |[...6.&WV.. ....|\n-00000030  5c 2a 1b b6 d2 bd 32 5d  42 fe 4b d1 89 4c 1f b0  |\\*....2]B.K..L..|\n-00000040  5d fc 1f d4 4a f3 ef 06  28 1a d3 09 00 05 00 00  |]...J...(.......|\n+00000000  16 03 01 00 51 02 00 00  4d 03 01 53 04 f1 02 ed  |....Q...M..S....|\n+00000010  86 9c 56 84 5a d3 7d d7  f3 4e 6f 2c 69 0d f0 59  |..V.Z.}..No,i..Y|\n+00000020  a5 d1 de 2d 03 2f dd 63  c3 ab fa 20 30 d6 5a 24  |...-./.c... 0.Z$|\n+00000030  5c 31 67 36 8d 4c 43 e1  64 c4 8a 2c a5 fd 39 92  |\\1g6.LC.d..,..9.|\n+00000040  c5 6f 58 47 a3 fe 63 14  98 92 11 90 00 05 00 00  |.oXG..c.........|\n 00000050  05 ff 01 00 01 00 16 03  01 02 be 0b 00 02 ba 00  |................|\n 00000060  02 b7 00 02 b4 30 82 02  b0 30 82 02 19 a0 03 02  |.....0...0......|\n 00000070  01 02 02 09 00 85 b0 bb  a4 8a 7f b8 ca 30 0d 06  |.............0..|\n@@ -109,17 +109,17 @@\n 000002e0  85 6a 42 9b f9 7e 7e 31  c2 e5 bd 66 02 41 4b 49  |.jB..~~1...f.AKI|\n 000002f0  c6 cd 02 e3 83 f7 03 50  18 6d b4 c9 51 02 c0 ab  |.......P.m..Q...|\n 00000300  87 bc e0 3e 4b 89 53 3a  e2 65 89 97 02 c1 87 f1  |...>K.S:.e......|\n-00000310  67 d0 f2 06 28 4e 51 4e  fd f0 01 65 a4 80 ad 7e  |g...(NQN...e...~|\n-00000320  a3 bc 1d 1a 83 3a db 30  c7 67 96 cf e7 aa dc 14  |.....:.0.g......|\n-00000330  03 01 00 01 01 16 03 01  00 24 d9 38 91 04 a4 ac  |.........$.8....|\n-00000340  eb d7 4c 7a c6 07 25 72  a0 f7 3f 6d 37 cc db 40  |..Lz..%r..?m7..@|\n-00000350  c0 26 9b be 03 55 2d 24  c5 b3 4f 6d 56 c4        |.&...U-$..OmV.|\n+00000310  67 d0 f2 06 28 4e 51 4e  fd f0 01 47 e7 c9 d9 23  |g...(NQN...G...#|\n+00000320  21 6b 87 d2 55 e3 c9 f7  eb 86 d5 1e 50 df d5 14  |!k..U.......P...|\n+00000330  03 01 00 01 01 16 03 01  00 24 95 62 42 be 90 39  |.........$.bB..9|\n+00000340  68 ae f5 77 47 21 14 b9  ac ee 81 2d e3 9e c7 34  |h..wG!.....-...4|\n+00000350  3a 00 5c c9 12 1d c0 5a  7c e7 ef e0 cd fd        |:.\\....Z|.....|\n >>> Flow 4 (server to client)\n-00000000  14 03 01 00 01 01 16 03  01 00 24 b8 8d b1 db 80  |..........$.....|\n-00000010  1d 26 9e 41 d0 48 40 0d  6a 94 e6 42 93 60 58 d1  |.&.A.H@.j..B.`X.|\n-00000020  b2 13 7c 6f ec 1c f5 2a  1e 82 14 6f 0f 13 a7     |..|o...*...o...|\n+00000000  14 03 01 00 01 01 16 03  01 00 24 ea 98 c0 fb 86  |..........$.....|\n+00000010  87 7a 2e e1 c7 68 61 3e  5b cc da 1f d6 7b ab 5a  |.z...ha>[....{.Z|\n+00000020  a0 ae a2 cf d0 54 44 19  12 db 75 2b 8c 73 8c     |.....TD...u+.s.|\n >>> Flow 5 (client to server)\n-00000000  17 03 01 00 1a ea f3 99  a3 b1 7e 9a 29 ad 31 18  |..........~.).1.|\n-00000010  1b 5b 7c 71 ae 5b c6 ba  8e 8e 36 f6 ab 2c dd 15  |.[|q.[....6..,..|\n-00000020  03 01 00 16 82 cf f4 83  05 4c 86 e2 47 cc 6f 2c  |.........L..G.o,|\n-00000030  6d 50 c6 09 3b fd a8 5e  12 3c                    |mP..;..^.<|\n+00000000  17 03 01 00 1a f3 28 77  31 33 4c b3 7c 4b 75 61  |......(w13L.|Kua|\n+00000010  38 69 6b ae c9 36 ab 2e  56 16 29 6a 9a 00 2f 15  |8ik..6..V.)j../.|\n+00000020  03 01 00 16 6b ed 68 18  ed ff 44 39 9b 4a e4 a2  |....k.h...D9.J..|\n+00000030  cd 79 ef 2a 3e 5a 4d b1  5d 56                    |.y.*>ZM.]V|"}, {"sha": "3e6dbc271a963c1856a9097a8a0feb32b2a94927", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv10-ClientCert-RSA-ECDSA", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-RSA-ECDSA", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-RSA-ECDSA", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-RSA-ECDSA?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 01 00 59 02 00 00  55 03 01 52 cc 57 58 fc  |....Y...U..R.WX.|\n-00000010  46 e4 45 fc 07 cb ec 16  cc ce 87 96 0e f6 d9 c7  |F.E.............|\n-00000020  49 2e ec 53 30 07 cd 01  1d 49 2e 20 2b bc 5c 11  |I..S0....I. +.\\.|\n-00000030  90 55 88 3f ec e4 30 b3  58 e7 d2 82 32 15 dd b4  |.U.?..0.X...2...|\n-00000040  1f e2 4c 1d 08 f9 a0 8d  75 8b 63 c2 c0 09 00 00  |..L.....u.c.....|\n+00000000  16 03 01 00 59 02 00 00  55 03 01 53 04 f1 02 4f  |....Y...U..S...O|\n+00000010  73 06 2d 72 41 36 a1 b2  d3 50 97 55 8c c5 f1 43  |s.-rA6...P.U...C|\n+00000020  37 1f 1a 2a fe 51 70 0b  2f 25 9e 20 50 61 86 80  |7..*.Qp./%. Pa..|\n+00000030  9a 9c 6d 6f c9 ea 5c ce  0c b7 7c ce e3 be d0 e5  |..mo..\\...|.....|\n+00000040  be d0 c4 80 78 c3 c7 17  0c 2d 8e c8 c0 09 00 00  |....x....-......|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  01 02 0e 0b 00 02 0a 00  02 07 00 02 04 30 82 02  |.............0..|\n 00000070  00 30 82 01 62 02 09 00  b8 bf 2d 47 a0 d2 eb f4  |.0..b.....-G....|\n@@ -47,21 +47,21 @@\n 00000240  13 83 0d 94 06 bb d4 37  7a f6 ec 7a c9 86 2e dd  |.......7z..z....|\n 00000250  d7 11 69 7f 85 7c 56 de  fb 31 78 2b e4 c7 78 0d  |..i..|V..1x+..x.|\n 00000260  ae cb be 9e 4e 36 24 31  7b 6a 0f 39 95 12 07 8f  |....N6$1{j.9....|\n-00000270  2a 16 03 01 00 d5 0c 00  00 d1 03 00 17 41 04 5e  |*............A.^|\n-00000280  6d f1 9c b6 ec 5b c9 fc  16 b2 75 63 90 82 23 8f  |m....[....uc..#.|\n-00000290  14 6f 53 b1 23 06 fa c7  b9 b4 d2 59 3d 4f 94 a2  |.oS.#......Y=O..|\n-000002a0  02 af 0a 1e 94 f7 4d 31  c1 b3 a7 c4 67 89 67 da  |......M1....g.g.|\n-000002b0  71 de 5a 1d ca 79 b8 f3  9e 6a 42 f8 60 8b 2a 00  |q.Z..y...jB.`.*.|\n-000002c0  8a 30 81 87 02 42 00 85  32 00 54 ab af 7a 95 32  |.0...B..2.T..z.2|\n-000002d0  f9 c7 e3 34 23 ed 1c 5d  7b a2 78 bf f1 a3 3f 53  |...4#..]{.x...?S|\n-000002e0  ad c4 56 1f f6 98 9e 29  66 ef 52 21 80 d6 21 e7  |..V....)f.R!..!.|\n-000002f0  61 fd 75 90 37 ec 13 0a  f4 c2 47 a4 a7 41 87 24  |a.u.7.....G..A.$|\n-00000300  0c c6 c0 09 f0 54 c4 df  02 41 30 3e a5 6c a2 5d  |.....T...A0>.l.]|\n-00000310  76 66 fb a2 f5 2d ef ee  63 63 b4 9a db 84 23 db  |vf...-..cc....#.|\n-00000320  e9 0d 5f 43 cc 6b ef 4a  7f a2 1d 6b 6c 7f 1f ba  |.._C.k.J...kl...|\n-00000330  52 5f 6c 3f cc 77 54 ef  75 1f c2 1e da 6f d3 07  |R_l?.wT.u....o..|\n-00000340  23 7d 54 6d 40 88 0d 6e  72 90 8e 16 03 01 00 0e  |#}Tm@..nr.......|\n-00000350  0d 00 00 06 03 01 02 40  00 00 0e 00 00 00        |.......@......|\n+00000270  2a 16 03 01 00 d6 0c 00  00 d2 03 00 17 41 04 b1  |*............A..|\n+00000280  0f 0f 4a 18 ed 25 32 b3  a3 19 ed 4b 61 b6 eb e4  |..J..%2....Ka...|\n+00000290  d3 f7 77 13 ac 9f 60 c7  8d 6d cb f1 ee 99 1a 71  |..w...`..m.....q|\n+000002a0  68 aa d3 a7 70 7f 38 d0  f6 23 ab 9a f6 dd 19 4f  |h...p.8..#.....O|\n+000002b0  ce 10 ef d5 cf 64 85 2f  75 f6 20 06 4b f0 b9 00  |.....d./u. .K...|\n+000002c0  8b 30 81 88 02 42 01 00  b9 6b 80 91 59 0a 48 3f  |.0...B...k..Y.H?|\n+000002d0  72 16 96 8f 21 2c 28 e4  6d 03 74 66 35 16 7d ec  |r...!,(.m.tf5.}.|\n+000002e0  c7 08 9b 52 b5 05 d9 38  d8 b7 51 42 a7 4a 9f 9b  |...R...8..QB.J..|\n+000002f0  1a 37 14 de c5 f5 16 96  83 81 58 d3 a6 1e ce 8a  |.7........X.....|\n+00000300  bc 19 47 30 fe c5 85 55  02 42 01 4f 61 59 68 85  |..G0...U.B.OaYh.|\n+00000310  c7 64 23 22 f6 83 53 cc  58 38 25 b5 ce 74 c1 68  |.d#\"..S.X8%..t.h|\n+00000320  9f 32 72 33 ea c9 62 e0  26 63 92 e3 5f 34 10 0b  |.2r3..b.&c.._4..|\n+00000330  3c d5 83 fe 9f 67 69 ef  33 6b 19 c1 ec d6 6c 35  |<....gi.3k....l5|\n+00000340  89 33 17 d3 9d 93 e2 e5  6e 89 9a a1 16 03 01 00  |.3......n.......|\n+00000350  0e 0d 00 00 06 03 01 02  40 00 00 0e 00 00 00     |........@......|\n >>> Flow 3 (client to server)\n 00000000  16 03 01 01 fb 0b 00 01  f7 00 01 f4 00 01 f1 30  |...............0|\n 00000010  82 01 ed 30 82 01 58 a0  03 02 01 02 02 01 00 30  |...0..X........0|\n@@ -100,29 +100,29 @@\n 00000220  a7 24 20 3e b2 56 1c ce  97 28 5e f8 2b 2d 4f 9e  |.$ >.V...(^.+-O.|\n 00000230  f1 07 9f 6c 4b 5b 83 56  e2 32 42 e9 58 b6 d7 49  |...lK[.V.2B.X..I|\n 00000240  a6 b5 68 1a 41 03 56 6b  dc 5a 89 16 03 01 00 86  |..h.A.Vk.Z......|\n-00000250  0f 00 00 82 00 80 0d cf  9a c6 5e 57 60 b9 a4 87  |..........^W`...|\n-00000260  ae 83 25 4a d5 af 02 69  4d a1 0b ac 0c 97 58 30  |..%J...iM.....X0|\n-00000270  cc 9d 45 6a eb e3 a5 b1  f9 63 9c 05 04 8f 55 b3  |..Ej.....c....U.|\n-00000280  5b 7c 5b f6 36 2d b1 89  84 21 ce a6 ce be 66 c6  |[|[.6-...!....f.|\n-00000290  06 4a 07 8a a0 13 ee f1  52 ea 65 71 b7 49 b7 49  |.J......R.eq.I.I|\n-000002a0  dc 0a d0 c6 c3 69 ef 67  97 6b d8 41 e0 d1 a4 66  |.....i.g.k.A...f|\n-000002b0  cc 3c ba 4a 63 46 af e1  7f 16 2e 73 5c 69 17 45  |.<.JcF.....s\\i.E|\n-000002c0  b3 2d e2 7c 92 4c de 02  c6 97 d3 9c e0 d5 9c 22  |.-.|.L.........\"|\n-000002d0  30 21 11 5e 1c 1a 14 03  01 00 01 01 16 03 01 00  |0!.^............|\n-000002e0  30 db d7 9e 46 3e 5a 60  5d 21 22 34 ca 9a 3b 3c  |0...F>Z`]!\"4..;<|\n-000002f0  a6 41 12 42 b9 78 d7 39  4b 51 d0 d0 3e 7e ba 4c  |.A.B.x.9KQ..>~.L|\n-00000300  7c 8d 4b 03 e5 fe 4c 59  a6 9f a1 5d 46 54 56 61  ||.K...LY...]FTVa|\n-00000310  33                                                |3|\n+00000250  0f 00 00 82 00 80 20 2c  5a 08 3a 00 33 50 19 b2  |...... ,Z.:.3P..|\n+00000260  0f ba 6c 76 7f 5c 92 e2  78 55 3e 32 32 bb 33 bc  |..lv.\\..xU>22.3.|\n+00000270  ab a9 34 e0 83 cf 82 cd  9e 6b 3f 9d e6 49 61 29  |..4......k?..Ia)|\n+00000280  8b b4 ed e8 12 cd a9 52  86 11 48 64 08 61 72 8d  |.......R..Hd.ar.|\n+00000290  d6 6a ac 42 cc e4 07 5f  08 56 9f 2f c5 35 d3 9b  |.j.B..._.V./.5..|\n+000002a0  e9 0d 91 82 c0 e9 bb 9f  a9 8f df 96 85 08 9a 69  |...............i|\n+000002b0  a4 93 b3 72 37 ba f9 b1  a4 0b b0 9f 43 6a 15 ec  |...r7.......Cj..|\n+000002c0  79 b8 fd 9c 1f 5f 0d 2c  56 33 c7 15 d5 4a b7 82  |y...._.,V3...J..|\n+000002d0  ea 44 80 20 c5 80 14 03  01 00 01 01 16 03 01 00  |.D. ............|\n+000002e0  30 c9 c0 7c d7 57 d3 00  ab 87 eb 78 56 6b a1 69  |0..|.W.....xVk.i|\n+000002f0  1d fa ec ae 38 f3 ef 5d  49 19 0d 4b f0 73 63 af  |....8..]I..K.sc.|\n+00000300  89 b6 cb 76 cf fb b9 c1  99 98 06 0a 54 67 a0 6e  |...v........Tg.n|\n+00000310  e7                                                |.|\n >>> Flow 4 (server to client)\n-00000000  14 03 01 00 01 01 16 03  01 00 30 72 c2 59 5a f3  |..........0r.YZ.|\n-00000010  6f db 45 d0 4b 8c b9 49  25 25 cd eb 00 c7 99 6c  |o.E.K..I%%.....l|\n-00000020  a7 4d 5a 4c f3 05 7d b0  fb 97 1a 40 0d 42 ca ad  |.MZL..}....@.B..|\n-00000030  df 57 6c 47 40 13 49 47  09 7c 2e                 |.WlG@.IG.|.|\n+00000000  14 03 01 00 01 01 16 03  01 00 30 20 db fd ed ed  |..........0 ....|\n+00000010  7c d5 bf 8f 06 3b 86 1b  c1 60 7d a4 74 e9 a6 c9  ||....;...`}.t...|\n+00000020  f5 7c c7 f4 65 91 06 d5  53 88 d7 57 a4 22 b6 1f  |.|..e...S..W.\"..|\n+00000030  f1 02 e9 79 36 e6 a1 22  51 3a 4c                 |...y6..\"Q:L|\n >>> Flow 5 (client to server)\n-00000000  17 03 01 00 20 c5 99 ba  cc 39 bb db 07 27 3c 05  |.... ....9...'<.|\n-00000010  fb 79 ce bd ec 8c 67 20  c8 46 3b ad bf 8c 66 fc  |.y....g .F;...f.|\n-00000020  55 de 73 0f 71 17 03 01  00 20 7b 3e 2b 60 c0 df  |U.s.q.... {>+`..|\n-00000030  ca b1 c4 19 28 de 3e 8e  20 8b 4a 4a 07 52 5f 8c  |....(.>. .JJ.R_.|\n-00000040  1b 4f 54 15 69 31 f7 46  03 94 15 03 01 00 20 fc  |.OT.i1.F...... .|\n-00000050  b9 06 b4 6d 60 28 3f 4f  b2 9a e8 1c 74 d3 15 a6  |...m`(?O....t...|\n-00000060  7b 49 85 d0 2f 83 bf 4d  7f 60 6e 18 bf c7 34     |{I../..M.`n...4|\n+00000000  17 03 01 00 20 00 66 51  6a 14 ca ea e2 21 48 74  |.... .fQj....!Ht|\n+00000010  c4 c1 6e b9 8b 23 af 7c  33 c9 00 f8 0b ec ab 35  |..n..#.|3......5|\n+00000020  e7 42 0a d1 ae 17 03 01  00 20 00 1c 6d 60 75 5d  |.B....... ..m`u]|\n+00000030  b3 fb 40 2e e0 b7 0d 48  f4 87 ac d4 bf ea 01 0d  |..@....H........|\n+00000040  fe 10 0d 05 04 43 6b 19  ed f2 15 03 01 00 20 f8  |.....Ck....... .|\n+00000050  03 ac 62 4b 1f db 2e d2  4e 00 c3 a4 57 3c 0a 62  |..bK....N...W<.b|\n+00000060  05 a0 ef bd 2b 9b 9a 63  27 72 d7 d8 f1 8d 84     |....+..c'r.....|"}, {"sha": "94e686004f99d3b86261d90a3cbbc97463be5643", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv10-ClientCert-RSA-RSA", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-RSA-RSA", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-RSA-RSA", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ClientCert-RSA-RSA?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 01 00 51 02 00 00  4d 03 01 52 cc 57 58 bd  |....Q...M..R.WX.|\n-00000010  25 74 73 5e 31 99 73 f1  c6 a1 9b f0 07 09 97 d7  |%ts^1.s.........|\n-00000020  b6 b9 65 a3 08 16 0b 4c  4a 06 00 20 ef 0b 97 cb  |..e....LJ.. ....|\n-00000030  3c cf 05 b6 fe 62 d7 15  29 cf c8 56 e0 7e d7 92  |<....b..)..V.~..|\n-00000040  11 86 86 49 a0 b1 12 2f  dc 15 f7 67 00 05 00 00  |...I.../...g....|\n+00000000  16 03 01 00 51 02 00 00  4d 03 01 53 04 f1 02 73  |....Q...M..S...s|\n+00000010  ee 5f 70 a4 aa 0d be d7  46 a3 25 3f e3 5d ef 7b  |._p.....F.%?.].{|\n+00000020  73 49 7c b6 82 4d 99 2f  31 fc 8b 20 2d a3 33 7c  |sI|..M./1.. -.3||\n+00000030  a5 c3 85 86 ba 61 4d 05  b0 5e d3 5e 88 6e c3 4b  |.....aM..^.^.n.K|\n+00000040  95 d3 e9 67 f1 96 24 58  7a 6f e6 c5 00 05 00 00  |...g..$Xzo......|\n 00000050  05 ff 01 00 01 00 16 03  01 02 be 0b 00 02 ba 00  |................|\n 00000060  02 b7 00 02 b4 30 82 02  b0 30 82 02 19 a0 03 02  |.....0...0......|\n 00000070  01 02 02 09 00 85 b0 bb  a4 8a 7f b8 ca 30 0d 06  |.............0..|\n@@ -101,24 +101,24 @@\n 00000260  e6 bd 77 82 6f 23 b6 e0  bd a2 92 b7 3a ac e8 56  |..w.o#......:..V|\n 00000270  f1 af 54 5e 46 87 e9 3b  33 e7 b8 28 b7 d6 c8 90  |..T^F..;3..(....|\n 00000280  35 d4 1c 43 d1 30 6f 55  4e 0a 70 16 03 01 00 86  |5..C.0oUN.p.....|\n-00000290  0f 00 00 82 00 80 41 42  bb be 9d a4 d3 e9 24 f2  |......AB......$.|\n-000002a0  6c 7d b0 68 10 7a 88 e3  41 5d 24 f9 b2 a6 4c 31  |l}.h.z..A]$...L1|\n-000002b0  2b 90 51 49 65 3d d4 4b  1f 69 93 91 c0 a2 ec 2c  |+.QIe=.K.i.....,|\n-000002c0  d0 48 e1 64 7f ef 8b da  be 8c 0a 19 8b ff c7 37  |.H.d...........7|\n-000002d0  3d b8 8c 6d 2f 28 bd ba  96 6e c5 ed fa 29 c5 42  |=..m/(...n...).B|\n-000002e0  f2 24 b9 b5 55 1e 12 46  a5 bb 7c 41 2a b0 02 44  |.$..U..F..|A*..D|\n-000002f0  68 89 e9 92 e3 ad 50 44  f1 18 e7 e4 ee 2c 74 40  |h.....PD.....,t@|\n-00000300  82 39 a3 cf 30 54 fb 53  42 f1 18 28 8a f4 ef 65  |.9..0T.SB..(...e|\n-00000310  f2 33 6a e7 2a 48 14 03  01 00 01 01 16 03 01 00  |.3j.*H..........|\n-00000320  24 d8 a8 6d 1c 31 f7 cc  06 57 ef cf 7e 9b ac d3  |$..m.1...W..~...|\n-00000330  6b 50 b2 d8 c6 41 a2 c8  a6 f5 53 b3 d4 af e8 71  |kP...A....S....q|\n-00000340  88 9e 7e d9 57                                    |..~.W|\n+00000290  0f 00 00 82 00 80 0f 4c  d2 b2 f0 94 6d 61 d1 2c  |.......L....ma.,|\n+000002a0  db 6f 79 03 bd 40 b2 d2  1d 61 ef 83 1b 4a 0c 7b  |.oy..@...a...J.{|\n+000002b0  c5 73 1e 1a 81 e7 67 0a  d6 aa 2d 04 04 cc 0e 4b  |.s....g...-....K|\n+000002c0  2e da 96 7f 15 6c 05 ee  c4 53 7e 33 89 28 7d db  |.....l...S~3.(}.|\n+000002d0  a1 77 43 ba a3 51 a9 1c  b9 f5 ec 9a 8d eb 2c 46  |.wC..Q........,F|\n+000002e0  5c 33 59 6b 16 af de f4  9b 80 76 a3 22 30 5d bb  |\\3Yk......v.\"0].|\n+000002f0  02 b9 77 96 8a db 36 9f  54 95 00 d8 58 e1 aa 04  |..w...6.T...X...|\n+00000300  98 c9 0c 32 ae 62 81 12  0c f6 1b 76 c6 58 a7 8c  |...2.b.....v.X..|\n+00000310  0e d8 b7 8e ed 0f 14 03  01 00 01 01 16 03 01 00  |................|\n+00000320  24 1d c0 20 02 2d da 69  54 29 8c ff af 5c 56 a8  |$.. .-.iT)...\\V.|\n+00000330  eb d0 09 95 29 8f 52 8c  e2 7b 9f 36 3e 47 a0 33  |....).R..{.6>G.3|\n+00000340  2e 63 a2 24 93                                    |.c.$.|\n >>> Flow 4 (server to client)\n-00000000  14 03 01 00 01 01 16 03  01 00 24 71 90 c8 76 87  |..........$q..v.|\n-00000010  7f 07 da de 41 93 59 f4  e9 64 73 49 d3 15 b0 7d  |....A.Y..dsI...}|\n-00000020  d7 86 06 85 62 71 9f 57  db 1a 81 82 ed 9b df     |....bq.W.......|\n+00000000  14 03 01 00 01 01 16 03  01 00 24 99 e8 fb 65 f4  |..........$...e.|\n+00000010  95 ae 8b 71 cc 5d a4 95  a7 27 98 fd 16 3f 7a 1a  |...q.]...'...?z.|\n+00000020  b6 bd bf 0a 58 72 77 97  1f 8e b1 dd 4b 12 12     |....Xrw.....K..|\n >>> Flow 5 (client to server)\n-00000000  17 03 01 00 1a 35 83 3e  0a 4d 7b 58 4d 6b 9e d7  |.....5.>.M{XMk..|\n-00000010  77 32 dd b0 93 25 d1 fc  e2 08 ad 2c 91 fd ce 15  |w2...%.....,....|\n-00000020  03 01 00 16 56 9c d9 6e  45 4c 95 8a 2d 75 7e 52  |....V..nEL..-u~R|\n-00000030  0a 75 0a f0 a1 52 91 c4  d2 b4                    |.u...R....|\n+00000000  17 03 01 00 1a 42 70 c0  89 78 12 5c 91 7e 88 2d  |.....Bp..x.\\.~.-|\n+00000010  2f 8f be f2 f2 12 9d 81  ae 78 08 38 5e 6d 1b 15  |/........x.8^m..|\n+00000020  03 01 00 16 1a 64 b1 6f  8a ff d3 63 6a c7 b8 95  |.....d.o...cj...|\n+00000030  3d b0 87 bc 62 e9 88 5b  26 bd                    |=...b..[&.|"}, {"sha": "30c4c6b831af9000b001cba1c8526aa6a28fa1c0", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv10-ECDHE-ECDSA-AES", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ECDHE-ECDSA-AES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ECDHE-ECDSA-AES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ECDHE-ECDSA-AES?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 01 00 59 02 00 00  55 03 01 52 cc 57 58 a5  |....Y...U..R.WX.|\n-00000010  0d f3 9c e1 2f 44 99 dc  f2 26 bc c2 44 4a 0f ab  |..../D...&..DJ..|\n-00000020  6d 40 3b 5a 98 21 43 9e  c0 39 03 20 03 46 6f c2  |m@;Z.!C..9. .Fo.|\n-00000030  bd 1f bc cc 2d b2 eb 22  91 23 df 20 28 c5 df ea  |....-..\".#. (...|\n-00000040  70 1a dc 07 b9 19 a1 d0  03 74 81 a8 c0 09 00 00  |p........t......|\n+00000000  16 03 01 00 59 02 00 00  55 03 01 53 04 f1 02 b2  |....Y...U..S....|\n+00000010  e0 f6 f6 b5 c9 5b 28 d0  5d 58 1b 6f 4e 2b 9d 05  |.....[(.]X.oN+..|\n+00000020  2a b9 b4 da 45 cf f3 10  b2 23 44 20 f8 4d 59 05  |*...E....#D .MY.|\n+00000030  ad 27 f2 a0 ee 7f ec cc  20 dc e7 a2 1b 07 b3 a5  |.'...... .......|\n+00000040  37 7e 61 3d d6 5c 03 cf  cc f5 9b ca c0 09 00 00  |7~a=.\\..........|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  01 02 0e 0b 00 02 0a 00  02 07 00 02 04 30 82 02  |.............0..|\n 00000070  00 30 82 01 62 02 09 00  b8 bf 2d 47 a0 d2 eb f4  |.0..b.....-G....|\n@@ -47,41 +47,41 @@\n 00000240  13 83 0d 94 06 bb d4 37  7a f6 ec 7a c9 86 2e dd  |.......7z..z....|\n 00000250  d7 11 69 7f 85 7c 56 de  fb 31 78 2b e4 c7 78 0d  |..i..|V..1x+..x.|\n 00000260  ae cb be 9e 4e 36 24 31  7b 6a 0f 39 95 12 07 8f  |....N6$1{j.9....|\n-00000270  2a 16 03 01 00 d5 0c 00  00 d1 03 00 17 41 04 3c  |*............A.<|\n-00000280  f8 33 94 22 ad fb 45 01  10 5c 8e b1 09 19 da de  |.3.\"..E..\\......|\n-00000290  21 0a 09 72 af 25 6f 2f  63 4d 8c 6b b6 a6 00 02  |!..r.%o/cM.k....|\n-000002a0  4d 6c fe 71 9e 45 74 13  db b5 7a a1 74 f0 16 35  |Ml.q.Et...z.t..5|\n-000002b0  50 fd ab 45 4c 64 9f 4d  80 a9 5c 85 ee 20 33 00  |P..ELd.M..\\.. 3.|\n-000002c0  8a 30 81 87 02 42 01 73  bc ac 1a 30 11 5f 93 95  |.0...B.s...0._..|\n-000002d0  00 03 ba d6 f3 02 cd c9  a0 15 bf 9a 1a 59 24 1e  |.............Y$.|\n-000002e0  3e 99 6b da b1 81 e1 eb  da fd 8e 73 d6 94 1e ce  |>.k........s....|\n-000002f0  04 cf 41 33 cd e5 8d f0  e2 50 b9 9b 49 df bc 51  |..A3.....P..I..Q|\n-00000300  2d 5c 12 5c b3 8b 81 73  02 41 3c bf 11 5c 10 be  |-\\.\\...s.A<..\\..|\n-00000310  f2 e7 59 2f 9a d7 0e 49  a3 17 7d 20 cc bc 17 1f  |..Y/...I..} ....|\n-00000320  2d 1b 19 90 52 c5 16 08  b3 3c b0 33 9d 03 45 75  |-...R....<.3..Eu|\n-00000330  0c 3f ac 7b 0b b2 69 f4  a5 7c fc 49 a6 54 55 84  |.?.{..i..|.I.TU.|\n-00000340  2f 19 f1 de 1b 92 3d fb  68 5d ea 16 03 01 00 04  |/.....=.h]......|\n+00000270  2a 16 03 01 00 d5 0c 00  00 d1 03 00 17 41 04 da  |*............A..|\n+00000280  5a fd 09 e5 d6 c0 70 41  5e 3a 87 eb df 0c ad 90  |Z.....pA^:......|\n+00000290  22 8a 2f 90 81 0c 24 00  68 92 f3 d5 95 2f 93 43  |\"./...$.h..../.C|\n+000002a0  e9 58 2d 18 28 62 ee 33  5b 21 2e 49 87 21 4d 32  |.X-.(b.3[!.I.!M2|\n+000002b0  32 19 b3 ba fe 2d 9a 85  12 0e a1 77 08 06 75 00  |2....-.....w..u.|\n+000002c0  8a 30 81 87 02 42 01 91  14 fc 68 74 95 10 4b d4  |.0...B....ht..K.|\n+000002d0  67 60 12 46 bb b0 f6 98  77 a3 41 b8 01 5c 49 54  |g`.F....w.A..\\IT|\n+000002e0  9e 3e 81 e7 97 a3 b9 73  6e 15 74 67 be e5 d9 eb  |.>.....sn.tg....|\n+000002f0  8b 87 c5 22 ab ab 58 28  4f d1 b6 80 94 1b f5 f7  |...\"..X(O.......|\n+00000300  12 43 ef 0a c7 3e 1a 76  02 41 7a 00 49 cb 9f 3b  |.C...>.v.Az.I..;|\n+00000310  91 6e 38 58 0a d3 d0 d1  ee 67 f0 b6 5d cd fa 23  |.n8X.....g..]..#|\n+00000320  b6 98 43 af 9c 71 90 1e  1d 50 a2 6e 61 5b f2 92  |..C..q...P.na[..|\n+00000330  b4 69 73 f2 3b 54 bf 1c  9d 05 19 97 e4 4e 41 9e  |.is.;T.......NA.|\n+00000340  f2 9a 76 77 9a 86 43 1f  1f 30 a2 16 03 01 00 04  |..vw..C..0......|\n 00000350  0e 00 00 00                                       |....|\n >>> Flow 3 (client to server)\n 00000000  16 03 01 00 46 10 00 00  42 41 04 1e 18 37 ef 0d  |....F...BA...7..|\n 00000010  19 51 88 35 75 71 b5 e5  54 5b 12 2e 8f 09 67 fd  |.Q.5uq..T[....g.|\n 00000020  a7 24 20 3e b2 56 1c ce  97 28 5e f8 2b 2d 4f 9e  |.$ >.V...(^.+-O.|\n 00000030  f1 07 9f 6c 4b 5b 83 56  e2 32 42 e9 58 b6 d7 49  |...lK[.V.2B.X..I|\n 00000040  a6 b5 68 1a 41 03 56 6b  dc 5a 89 14 03 01 00 01  |..h.A.Vk.Z......|\n-00000050  01 16 03 01 00 30 c7 cf  21 f8 0c 94 5b 11 ef ee  |.....0..!...[...|\n-00000060  d0 d3 3a d5 ba 2d 19 8b  5b 53 68 94 f1 49 8b 19  |..:..-..[Sh..I..|\n-00000070  f3 80 d5 55 52 7d 72 af  38 73 35 df 6e 04 4b ca  |...UR}r.8s5.n.K.|\n-00000080  64 b7 ff c3 e1 eb                                 |d.....|\n+00000050  01 16 03 01 00 30 88 60  65 b2 d7 51 1f ad 96 56  |.....0.`e..Q...V|\n+00000060  4e 0a 20 eb b5 b0 1a dd  4c f6 1a cf d4 5c 47 c4  |N. .....L....\\G.|\n+00000070  9c 7c a0 36 dd d1 1b 96  91 99 c0 a7 2d 9a 7c 42  |.|.6........-.|B|\n+00000080  51 d1 de 87 2b a4                                 |Q...+.|\n >>> Flow 4 (server to client)\n-00000000  14 03 01 00 01 01 16 03  01 00 30 59 2c 4c 03 7f  |..........0Y,L..|\n-00000010  aa a8 ca d8 2a b0 35 71  ea 3a 2b d4 b1 9f 13 f9  |....*.5q.:+.....|\n-00000020  c2 7b fb 21 52 15 73 e6  71 d4 65 8e 21 25 1a 63  |.{.!R.s.q.e.!%.c|\n-00000030  03 d3 a5 6b 17 0e e7 18  84 17 d8                 |...k.......|\n+00000000  14 03 01 00 01 01 16 03  01 00 30 86 6c b5 94 69  |..........0.l..i|\n+00000010  2e e0 55 a2 4d a8 63 f2  5b 1f ae 34 21 c8 21 6a  |..U.M.c.[..4!.!j|\n+00000020  00 b6 56 ed 4e 2a b0 ff  01 2f da ce a1 c0 41 03  |..V.N*.../....A.|\n+00000030  a9 1b 6e 2e e1 88 50 ba  62 14 88                 |..n...P.b..|\n >>> Flow 5 (client to server)\n-00000000  17 03 01 00 20 8d 73 59  92 ce 93 78 e6 63 cf 9d  |.... .sY...x.c..|\n-00000010  bc 44 40 76 c7 66 3f 15  3a 0a 91 9b 94 49 ec cc  |.D@v.f?.:....I..|\n-00000020  7c 1a 6c b2 85 17 03 01  00 20 2e 6a dd 85 be 12  ||.l...... .j....|\n-00000030  c1 45 e4 04 bf 46 70 19  12 d1 1a 28 f6 22 30 a2  |.E...Fp....(.\"0.|\n-00000040  fe 98 a8 11 c2 c4 19 46  c6 7e 15 03 01 00 20 a7  |.......F.~.... .|\n-00000050  71 3d 87 94 9d 6c c5 dd  de 44 54 47 d5 06 37 82  |q=...l...DTG..7.|\n-00000060  36 e0 c2 e5 91 74 a8 88  28 2f 87 7d a1 a7 e3     |6....t..(/.}...|\n+00000000  17 03 01 00 20 a6 63 0a  2f a5 dc e1 fb cb 7b 1f  |.... .c./.....{.|\n+00000010  f2 da 74 c3 ff e9 f5 8b  9c 5f 0c d3 f7 1f 44 e6  |..t......_....D.|\n+00000020  90 13 5c 48 50 17 03 01  00 20 c7 75 b5 ff bc 09  |..\\HP.... .u....|\n+00000030  34 f2 45 db 0d 22 08 8e  f1 35 cd b6 0f b0 eb 2a  |4.E..\"...5.....*|\n+00000040  b7 1a d0 8e 14 a4 54 84  f9 dc 15 03 01 00 20 e0  |......T....... .|\n+00000050  36 3d aa b3 a9 b4 20 23  ca 9e 8c 5d fc a8 c8 b7  |6=.... #...]....|\n+00000060  f5 c2 b6 d0 5a e2 ce a5  7b 68 a0 48 86 95 6a     |....Z...{h.H..j|"}, {"sha": "868f0ceb0e5ec00eac528b31abd27607633420a7", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv10-ECDHE-RSA-AES", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ECDHE-RSA-AES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ECDHE-RSA-AES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-ECDHE-RSA-AES?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 01 00 59 02 00 00  55 03 01 52 cc 57 58 f3  |....Y...U..R.WX.|\n-00000010  e4 e3 02 40 35 40 24 91  0a 0b 54 1b 46 0d c1 46  |...@5@$...T.F..F|\n-00000020  7f 9c dd 08 ec 9c 63 73  13 cd e8 20 3c c2 72 a5  |......cs... <.r.|\n-00000030  8d 4e 66 14 83 b1 27 c9  51 7e a6 46 7c 38 e1 66  |.Nf...'.Q~.F|8.f|\n-00000040  3f f6 9c e2 8d e0 51 29  fc 76 ee d0 c0 13 00 00  |?.....Q).v......|\n+00000000  16 03 01 00 59 02 00 00  55 03 01 53 04 f1 02 21  |....Y...U..S...!|\n+00000010  67 b5 2b 34 fb 62 d7 36  4f cf 68 2e 29 39 d0 28  |g.+4.b.6O.h.)9.(|\n+00000020  3a 02 32 82 8f 95 de 62  d6 03 77 20 e6 98 56 cd  |:.2....b..w ..V.|\n+00000030  96 24 d1 b9 4d eb 51 19  bb b7 71 f4 9c 29 32 d4  |.$..M.Q...q..)2.|\n+00000040  e5 c6 0a 54 e0 4a 20 29  3e bd 06 0d c0 13 00 00  |...T.J )>.......|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  01 02 be 0b 00 02 ba 00  02 b7 00 02 b4 30 82 02  |.............0..|\n 00000070  b0 30 82 02 19 a0 03 02  01 02 02 09 00 85 b0 bb  |.0..............|\n@@ -58,40 +58,40 @@\n 000002f0  5f 33 c4 b6 d8 c9 75 90  96 8c 0f 52 98 b5 cd 98  |_3....u....R....|\n 00000300  1f 89 20 5f f2 a0 1c a3  1b 96 94 dd a9 fd 57 e9  |.. _..........W.|\n 00000310  70 e8 26 6d 71 99 9b 26  6e 38 50 29 6c 90 a7 bd  |p.&mq..&n8P)l...|\n-00000320  d9 16 03 01 00 cb 0c 00  00 c7 03 00 17 41 04 30  |.............A.0|\n-00000330  a3 31 3d 66 ce 80 2a fb  1d 11 66 f6 35 cb c9 d2  |.1=f..*...f.5...|\n-00000340  53 fd 18 37 84 75 7e 00  55 92 0c 6d e5 40 46 77  |S..7.u~.U..m.@Fw|\n-00000350  d8 17 d4 81 13 74 90 e0  7c 4b 58 25 65 99 8e 18  |.....t..|KX%e...|\n-00000360  9f d7 af e0 70 f8 c6 99  13 2d 0e 28 32 02 40 00  |....p....-.(2.@.|\n-00000370  80 b3 34 d4 4a d7 c1 8e  1d f6 23 ef 04 0c d6 bb  |..4.J.....#.....|\n-00000380  40 8c 85 0f ce a6 8e d2  29 3d 81 0f 47 ce 59 dc  |@.......)=..G.Y.|\n-00000390  dc 56 68 b1 11 af 98 3a  07 4b 7a d9 6e 08 c5 ff  |.Vh....:.Kz.n...|\n-000003a0  b2 54 06 72 f3 d2 19 22  df ee 90 fc 8a 4d 76 c1  |.T.r...\".....Mv.|\n-000003b0  c2 d4 af d7 77 82 79 3d  12 0f 9c 56 28 a6 43 ea  |....w.y=...V(.C.|\n-000003c0  a3 71 c2 af bf 52 40 4a  fa c7 3e d3 ae 8e 84 42  |.q...R@J..>....B|\n-000003d0  5f fd 9f a7 0f 94 8c fa  15 86 23 28 be 2b 3a 32  |_.........#(.+:2|\n-000003e0  cb e5 18 5c 2d d6 d9 94  5f a4 b7 05 d0 a0 ab aa  |...\\-..._.......|\n-000003f0  c3 16 03 01 00 04 0e 00  00 00                    |..........|\n+00000320  d9 16 03 01 00 cb 0c 00  00 c7 03 00 17 41 04 05  |.............A..|\n+00000330  45 33 f8 4b e9 96 0e 4a  fd ec 54 76 21 9b 24 8a  |E3.K...J..Tv!.$.|\n+00000340  75 0b 80 84 c7 30 2b 22  f0 85 57 a4 a9 79 d6 f6  |u....0+\"..W..y..|\n+00000350  6d 80 b0 71 d9 66 c9 6c  dd 76 fc 32 d0 c6 bc 52  |m..q.f.l.v.2...R|\n+00000360  2f f1 c9 62 17 53 76 ec  be a6 1c 93 f2 b4 5d 00  |/..b.Sv.......].|\n+00000370  80 72 d9 20 52 70 7c 03  b1 33 fa 51 23 cd 05 97  |.r. Rp|..3.Q#...|\n+00000380  6f d6 89 2f 8d 2e 3a 17  32 eb f2 ff 6b 39 70 5e  |o../..:.2...k9p^|\n+00000390  21 41 8d 69 02 c8 9a 17  19 e4 48 9b 51 c3 7f 9b  |!A.i......H.Q...|\n+000003a0  8d 4a 83 97 07 0e 30 f1  8b 6b e9 92 12 01 d6 96  |.J....0..k......|\n+000003b0  f2 1a a2 10 7f 59 87 16  1a fb 55 67 68 fc 78 c6  |.....Y....Ugh.x.|\n+000003c0  57 ac 05 dd f3 6f 77 84  eb ae b0 33 2d 19 2c ba  |W....ow....3-.,.|\n+000003d0  b8 ae 9f 95 69 85 95 45  5e 37 f4 17 17 9b 03 c1  |....i..E^7......|\n+000003e0  50 b1 36 42 bd 60 5c 8b  d8 b6 f3 c8 34 c8 9d 9d  |P.6B.`\\.....4...|\n+000003f0  75 16 03 01 00 04 0e 00  00 00                    |u.........|\n >>> Flow 3 (client to server)\n 00000000  16 03 01 00 46 10 00 00  42 41 04 1e 18 37 ef 0d  |....F...BA...7..|\n 00000010  19 51 88 35 75 71 b5 e5  54 5b 12 2e 8f 09 67 fd  |.Q.5uq..T[....g.|\n 00000020  a7 24 20 3e b2 56 1c ce  97 28 5e f8 2b 2d 4f 9e  |.$ >.V...(^.+-O.|\n 00000030  f1 07 9f 6c 4b 5b 83 56  e2 32 42 e9 58 b6 d7 49  |...lK[.V.2B.X..I|\n 00000040  a6 b5 68 1a 41 03 56 6b  dc 5a 89 14 03 01 00 01  |..h.A.Vk.Z......|\n-00000050  01 16 03 01 00 30 34 e6  9a 20 8c 33 d7 85 ae 83  |.....04.. .3....|\n-00000060  f1 8f 46 68 63 3f a3 23  88 f8 00 9b 01 a7 80 c6  |..Fhc?.#........|\n-00000070  8b 45 6e 5a c1 2f 62 5f  70 b6 20 1e 58 18 53 6b  |.EnZ./b_p. .X.Sk|\n-00000080  e2 cb ce 2c 97 7c                                 |...,.||\n+00000050  01 16 03 01 00 30 ca d1  1b 08 27 9b 44 e7 e9 b4  |.....0....'.D...|\n+00000060  90 16 4d 30 4e 65 5c 0d  47 ba 46 86 cf c9 80 e7  |..M0Ne\\.G.F.....|\n+00000070  64 31 f5 a1 9e dc 39 15  d3 be 16 4f c7 90 b6 62  |d1....9....O...b|\n+00000080  5d 6d 7f 41 4e 3e                                 |]m.AN>|\n >>> Flow 4 (server to client)\n-00000000  14 03 01 00 01 01 16 03  01 00 30 ff 81 ba a6 cc  |..........0.....|\n-00000010  c5 25 83 eb 65 99 39 4d  19 39 c1 8c cf b5 30 58  |.%..e.9M.9....0X|\n-00000020  aa 6f e1 f4 f7 da 88 14  39 c0 1b 5a f3 05 bd 8c  |.o......9..Z....|\n-00000030  6b af 52 32 0f 1e 87 0c  7a 39 3a                 |k.R2....z9:|\n+00000000  14 03 01 00 01 01 16 03  01 00 30 98 81 24 8e cd  |..........0..$..|\n+00000010  b6 48 2f 80 de 8e 24 3c  cd 02 67 80 34 97 d7 92  |.H/...$<..g.4...|\n+00000020  78 c2 44 3d 5d 05 eb 88  76 79 46 7a c3 fa ca 73  |x.D=]...vyFz...s|\n+00000030  45 82 ad c1 81 00 ca 40  c1 2f 13                 |E......@./.|\n >>> Flow 5 (client to server)\n-00000000  17 03 01 00 20 72 b0 d7  a5 88 02 64 29 65 4b d5  |.... r.....d)eK.|\n-00000010  f7 0b 74 bd df af ce 2d  02 6b 01 37 fb 44 80 e6  |..t....-.k.7.D..|\n-00000020  f4 e1 17 e6 7f 17 03 01  00 20 18 8a 94 81 86 56  |......... .....V|\n-00000030  eb 7e 77 48 03 ce b4 8c  2b 75 b8 06 eb 66 5f 77  |.~wH....+u...f_w|\n-00000040  df 98 1f cd 6d bd 39 38  06 fc 15 03 01 00 20 d1  |....m.98...... .|\n-00000050  bd 74 3b eb a2 f6 be ad  ab df 5f 99 c2 92 fd 9b  |.t;......._.....|\n-00000060  e7 9a 03 a5 f4 00 99 8c  f8 85 34 2d 15 a0 30     |..........4-..0|\n+00000000  17 03 01 00 20 ee 19 59  67 67 a9 8b db 99 87 50  |.... ..Ygg.....P|\n+00000010  01 e2 02 c1 d5 6d 36 79  af aa ec 1b 80 0e b6 5e  |.....m6y.......^|\n+00000020  5f fa 03 01 cc 17 03 01  00 20 ec e2 04 b7 3b a5  |_........ ....;.|\n+00000030  f2 e0 13 1f 17 48 e7 6e  d3 eb f0 fa 36 ef 6e 2e  |.....H.n....6.n.|\n+00000040  fb ea c8 39 c4 5f 4b 28  d4 50 15 03 01 00 20 c7  |...9._K(.P.... .|\n+00000050  45 ff fb c7 07 0c d8 0e  35 a3 c5 31 47 b7 03 0e  |E.......5..1G...|\n+00000060  14 c8 29 fd 53 70 5f 15  ac d2 1c 4c 69 fb d6     |..).Sp_....Li..|"}, {"sha": "395d53bbabb0fb1e4b09974a1abba3c6506df36d", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv10-RSA-RC4", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-RSA-RC4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-RSA-RC4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv10-RSA-RC4?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 01 00 51 02 00 00  4d 03 01 52 cc 57 58 d1  |....Q...M..R.WX.|\n-00000010  c7 22 72 55 68 fb 69 12  2d 85 02 b7 66 93 40 d1  |.\"rUh.i.-...f.@.|\n-00000020  2d 32 57 a8 f2 06 62 93  a0 39 b6 20 08 37 44 11  |-2W...b..9. .7D.|\n-00000030  73 db 68 79 6d 98 30 f7  bf a2 9b a3 cb c0 03 cb  |s.hym.0.........|\n-00000040  7f 79 e9 31 08 ce 93 17  25 6d c3 c4 00 05 00 00  |.y.1....%m......|\n+00000000  16 03 01 00 51 02 00 00  4d 03 01 53 04 f1 02 76  |....Q...M..S...v|\n+00000010  e8 45 7f 57 f3 42 4b 33  0b 06 fa a6 fa c4 3d 84  |.E.W.BK3......=.|\n+00000020  5a 45 dc 93 41 a5 8d 79  6e 8f 11 20 e7 c6 29 2b  |ZE..A..yn.. ..)+|\n+00000030  ff 4a 6e 63 67 a6 10 cb  49 19 46 1e 5e 0a d5 70  |.Jncg...I.F.^..p|\n+00000040  96 88 9a 32 48 ef c3 4a  45 4c 6d e0 00 05 00 00  |...2H..JELm.....|\n 00000050  05 ff 01 00 01 00 16 03  01 02 be 0b 00 02 ba 00  |................|\n 00000060  02 b7 00 02 b4 30 82 02  b0 30 82 02 19 a0 03 02  |.....0...0......|\n 00000070  01 02 02 09 00 85 b0 bb  a4 8a 7f b8 ca 30 0d 06  |.............0..|\n@@ -69,15 +69,15 @@\n 00000060  e6 bd 77 82 6f 23 b6 e0  bd a2 92 b7 3a ac e8 56  |..w.o#......:..V|\n 00000070  f1 af 54 5e 46 87 e9 3b  33 e7 b8 28 b7 d6 c8 90  |..T^F..;3..(....|\n 00000080  35 d4 1c 43 d1 30 6f 55  4e 0a 70 14 03 01 00 01  |5..C.0oUN.p.....|\n-00000090  01 16 03 01 00 24 54 26  aa 7d 70 99 51 f1 bc d6  |.....$T&.}p.Q...|\n-000000a0  e9 0b 4b c7 b2 02 8c ed  36 c9 7f b8 f7 82 29 3a  |..K.....6.....):|\n-000000b0  0b 6a c0 b4 ef 38 3f e8  8a bf                    |.j...8?...|\n+00000090  01 16 03 01 00 24 cd c0  68 dc 2e 69 cc c7 5b c5  |.....$..h..i..[.|\n+000000a0  3f bd 40 cf a0 0f 41 34  ce 16 37 10 26 c8 3f d1  |?.@...A4..7.&.?.|\n+000000b0  46 3b ad 7b b0 31 f3 c5  36 e7                    |F;.{.1..6.|\n >>> Flow 4 (server to client)\n-00000000  14 03 01 00 01 01 16 03  01 00 24 9a 52 2f b1 3c  |..........$.R/.<|\n-00000010  71 92 5c 81 68 a8 27 4c  b8 a9 4e 69 81 41 01 a2  |q.\\.h.'L..Ni.A..|\n-00000020  99 d4 0c dc 15 7b 52 b5  ee be a6 6f 70 88 91     |.....{R....op..|\n+00000000  14 03 01 00 01 01 16 03  01 00 24 ea 77 6f 3c 42  |..........$.wo<B|\n+00000010  12 16 51 de e8 b6 f9 85  06 d9 6d 05 75 50 2b 27  |..Q.......m.uP+'|\n+00000020  93 b7 6b 65 e9 14 99 48  53 3e be e4 be 03 5d     |..ke...HS>....]|\n >>> Flow 5 (client to server)\n-00000000  17 03 01 00 1a b5 06 d1  18 a6 4b 26 21 47 be 14  |..........K&!G..|\n-00000010  79 2e 63 49 84 1e 83 31  3b cb 97 14 94 5b 09 15  |y.cI...1;....[..|\n-00000020  03 01 00 16 9d d6 d0 2a  65 f2 7e 31 20 e6 63 89  |.......*e.~1 .c.|\n-00000030  b3 76 92 20 db b8 e6 25  54 1b                    |.v. ...%T.|\n+00000000  17 03 01 00 1a 9e ae ca  55 df c4 d9 47 04 55 dd  |........U...G.U.|\n+00000010  3b 33 e1 a6 16 6f a1 94  b1 9b 4d 0d cb 6c 3b 15  |;3...o....M..l;.|\n+00000020  03 01 00 16 92 5d 76 07  e9 b7 31 29 09 c5 b1 09  |.....]v...1)....|\n+00000030  2d 64 3d 85 8d f1 d1 40  54 b8                    |-d=....@T.|"}, {"sha": "9f941f8ef18578130f61081153c3b7a461a64c72", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv11-ECDHE-ECDSA-AES", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv11-ECDHE-ECDSA-AES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv11-ECDHE-ECDSA-AES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv11-ECDHE-ECDSA-AES?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 02 00 59 02 00 00  55 03 02 52 cc 57 58 b6  |....Y...U..R.WX.|\n-00000010  e0 47 f9 28 99 af 27 4c  21 20 d6 b1 ae 4e d4 62  |.G.(..'L! ...N.b|\n-00000020  8a 24 f4 62 47 77 a5 78  4b d0 09 20 5b 17 6b 88  |.$.bGw.xK.. [.k.|\n-00000030  8a ab 8c 0b 63 d9 c3 06  6d 13 e3 27 22 38 ee 69  |....c...m..'\"8.i|\n-00000040  88 7d e1 18 f8 ef 93 62  f4 06 1f ab c0 09 00 00  |.}.....b........|\n+00000000  16 03 02 00 59 02 00 00  55 03 02 53 04 f1 02 1c  |....Y...U..S....|\n+00000010  d1 1c 6a 5f 7a 5c 26 69  92 cd ee c3 57 ed 96 90  |..j_z\\&i....W...|\n+00000020  e3 c5 f1 ee 8b ee 99 5f  46 2c e6 20 c8 50 6a a4  |......._F,. .Pj.|\n+00000030  4b 93 e6 da ba 6d d4 87  f6 75 a8 9d 44 db b5 43  |K....m...u..D..C|\n+00000040  df 12 57 de a4 f1 bc fb  b8 7a 3f 6a c0 09 00 00  |..W......z?j....|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  02 02 0e 0b 00 02 0a 00  02 07 00 02 04 30 82 02  |.............0..|\n 00000070  00 30 82 01 62 02 09 00  b8 bf 2d 47 a0 d2 eb f4  |.0..b.....-G....|\n@@ -47,43 +47,43 @@\n 00000240  13 83 0d 94 06 bb d4 37  7a f6 ec 7a c9 86 2e dd  |.......7z..z....|\n 00000250  d7 11 69 7f 85 7c 56 de  fb 31 78 2b e4 c7 78 0d  |..i..|V..1x+..x.|\n 00000260  ae cb be 9e 4e 36 24 31  7b 6a 0f 39 95 12 07 8f  |....N6$1{j.9....|\n-00000270  2a 16 03 02 00 d6 0c 00  00 d2 03 00 17 41 04 79  |*............A.y|\n-00000280  48 bb 4c 30 4f 5c fe 5e  37 65 dc 65 90 d4 4a 7f  |H.L0O\\.^7e.e..J.|\n-00000290  8c fc 45 b6 4f fb 11 2b  7c 20 cf 94 83 79 f6 cc  |..E.O..+| ...y..|\n-000002a0  c6 d6 44 0c ad ae 5c fc  fd 87 0f b9 51 03 dc 38  |..D...\\.....Q..8|\n-000002b0  d8 44 a8 75 18 7e d1 c6  3e 9e 0a 45 85 92 4b 00  |.D.u.~..>..E..K.|\n-000002c0  8b 30 81 88 02 42 01 dd  a7 0b d6 69 3c b5 fc 06  |.0...B.....i<...|\n-000002d0  8b c3 37 1d 12 be 0d 80  4a e4 d5 4e df c0 5c 7d  |..7.....J..N..\\}|\n-000002e0  ca 61 f2 3c 87 83 e0 de  22 0f 25 78 f0 21 ec ca  |.a.<....\".%x.!..|\n-000002f0  8e 62 28 24 10 3e d9 7d  30 d7 f1 bd dc c6 98 a9  |.b($.>.}0.......|\n-00000300  c4 3f 85 8f 47 8c 8e b7  02 42 01 3c 61 1e ee e9  |.?..G....B.<a...|\n-00000310  44 2d ae 57 d1 2f 04 59  16 f0 80 03 3e a1 fe 1f  |D-.W./.Y....>...|\n-00000320  5f 54 b2 e1 b2 c0 07 3c  ad d9 9f 95 8d 79 7d 9b  |_T.....<.....y}.|\n-00000330  8e 68 cc b9 7f 08 b3 c9  24 1f a9 37 18 60 52 54  |.h......$..7.`RT|\n-00000340  5e 55 9c 36 1c 06 29 6b  7b 95 3e 73 16 03 02 00  |^U.6..)k{.>s....|\n-00000350  04 0e 00 00 00                                    |.....|\n+00000270  2a 16 03 02 00 d4 0c 00  00 d0 03 00 17 41 04 7b  |*............A.{|\n+00000280  c4 00 37 35 51 de c3 f2  a4 95 2c 19 21 3e a6 94  |..75Q.....,.!>..|\n+00000290  7b fd 04 d7 b7 1c 56 e6  af 3c ee 36 cb 55 e6 f0  |{.....V..<.6.U..|\n+000002a0  e6 24 34 6b 8a 02 66 71  f9 e2 f5 a6 c9 d7 6c dc  |.$4k..fq......l.|\n+000002b0  65 59 ff 1c c9 ec a9 8b  07 d6 52 2c 01 3c c3 00  |eY........R,.<..|\n+000002c0  89 30 81 86 02 41 74 89  1a 31 72 e6 8b c0 4a ce  |.0...At..1r...J.|\n+000002d0  8f 5a 49 a7 52 2d 6d b9  8b 50 17 62 2a 99 d6 3b  |.ZI.R-m..P.b*..;|\n+000002e0  02 85 41 4d 34 53 b5 09  bd e3 ac 16 c1 9b e9 83  |..AM4S..........|\n+000002f0  cc 83 e3 9c 23 34 67 71  72 d4 05 a2 34 f7 08 29  |....#4gqr...4..)|\n+00000300  62 43 2e cc bc 08 01 02  41 59 de 5a d0 dd d7 6b  |bC......AY.Z...k|\n+00000310  db 9c 35 29 79 f8 96 91  56 74 1f 18 7b ee 25 83  |..5)y...Vt..{.%.|\n+00000320  f2 37 0e 77 ab 38 fb 5e  04 0b 09 d9 b4 1f 3f be  |.7.w.8.^......?.|\n+00000330  2e e3 60 e3 96 f3 29 c1  6d 8f 56 1b fd 62 14 48  |..`...).m.V..b.H|\n+00000340  e3 d9 2a ea 2f be 93 d0  8b 31 16 03 02 00 04 0e  |..*./....1......|\n+00000350  00 00 00                                          |...|\n >>> Flow 3 (client to server)\n 00000000  16 03 02 00 46 10 00 00  42 41 04 1e 18 37 ef 0d  |....F...BA...7..|\n 00000010  19 51 88 35 75 71 b5 e5  54 5b 12 2e 8f 09 67 fd  |.Q.5uq..T[....g.|\n 00000020  a7 24 20 3e b2 56 1c ce  97 28 5e f8 2b 2d 4f 9e  |.$ >.V...(^.+-O.|\n 00000030  f1 07 9f 6c 4b 5b 83 56  e2 32 42 e9 58 b6 d7 49  |...lK[.V.2B.X..I|\n 00000040  a6 b5 68 1a 41 03 56 6b  dc 5a 89 14 03 02 00 01  |..h.A.Vk.Z......|\n 00000050  01 16 03 02 00 40 00 00  00 00 00 00 00 00 00 00  |.....@..........|\n-00000060  00 00 00 00 00 00 42 9f  9d 29 fc 0e e3 9d 6d 89  |......B..)....m.|\n-00000070  38 c3 6f d8 0f 0f 41 69  24 b8 44 a8 81 28 56 80  |8.o...Ai$.D..(V.|\n-00000080  c2 a2 cd b8 27 84 4d f1  f0 5c dc df 94 a7 a4 05  |....'.M..\\......|\n-00000090  84 b9 f6 5c b4 50                                 |...\\.P|\n+00000060  00 00 00 00 00 00 b6 98  a2 a9 48 34 12 6b 0a 94  |..........H4.k..|\n+00000070  89 fc 38 04 63 5a 6f 63  36 3e d9 35 12 64 8c 28  |..8.cZoc6>.5.d.(|\n+00000080  99 a6 cf 2e 57 e3 14 6d  0a 8a ab f0 a6 58 37 7c  |....W..m.....X7||\n+00000090  96 04 d3 71 bc d4                                 |...q..|\n >>> Flow 4 (server to client)\n-00000000  14 03 02 00 01 01 16 03  02 00 40 5f 24 a7 68 9c  |..........@_$.h.|\n-00000010  cc 93 4c fc a1 25 3d 71  43 88 d9 17 9b c9 99 6b  |..L..%=qC......k|\n-00000020  01 00 24 a8 ca b3 52 3e  cf 2f f5 3e 80 16 c9 cb  |..$...R>./.>....|\n-00000030  52 20 c3 f5 e0 8f a2 d9  f9 3d 86 c5 44 f6 52 31  |R .......=..D.R1|\n-00000040  82 3a f9 fb d1 f6 43 5b  b8 28 bc                 |.:....C[.(.|\n+00000000  14 03 02 00 01 01 16 03  02 00 40 c5 01 c9 0a b0  |..........@.....|\n+00000010  d8 ca 5e c1 19 dc 37 6c  2e a0 b3 11 a8 87 65 5a  |..^...7l......eZ|\n+00000020  09 41 b9 fe 53 c4 c9 76  97 6d 7f ac c0 be d2 07  |.A..S..v.m......|\n+00000030  84 e5 5b 78 37 34 ee da  3b cb 3e 82 52 79 91 44  |..[x74..;.>.Ry.D|\n+00000040  b4 e4 1c ec 3a c0 c0 9d  cd ff 13                 |....:......|\n >>> Flow 5 (client to server)\n 00000000  17 03 02 00 30 00 00 00  00 00 00 00 00 00 00 00  |....0...........|\n-00000010  00 00 00 00 00 18 60 dd  b8 15 76 04 ae 8c e9 09  |......`...v.....|\n-00000020  84 8c c2 04 38 b2 45 3d  cb ea 9b cf 11 1a 38 67  |....8.E=......8g|\n-00000030  cd ff 89 4c 8c 15 03 02  00 30 00 00 00 00 00 00  |...L.....0......|\n-00000040  00 00 00 00 00 00 00 00  00 00 f3 b4 a0 68 1b 3b  |.............h.;|\n-00000050  5c c7 e7 70 32 5f 19 4f  a4 bf 0a 57 bc a0 7d be  |\\..p2_.O...W..}.|\n-00000060  91 46 5a 8e 02 25 67 20  d0 c2                    |.FZ..%g ..|\n+00000010  00 00 00 00 00 46 60 13  39 2b 2f 72 95 ed 0e aa  |.....F`.9+/r....|\n+00000020  69 6e b4 64 3e 83 43 d0  f9 7f 37 7c 1d b9 ce 11  |in.d>.C...7|....|\n+00000030  d9 41 66 60 6d 15 03 02  00 30 00 00 00 00 00 00  |.Af`m....0......|\n+00000040  00 00 00 00 00 00 00 00  00 00 b1 26 d0 5d 08 98  |...........&.]..|\n+00000050  eb 28 42 74 31 58 42 95  c5 ad 1a 92 0a f5 5f ed  |.(Bt1XB......._.|\n+00000060  45 98 e0 90 e5 a3 b6 8b  8d 18                    |E.........|"}, {"sha": "fc723396a4f746d72d1c390331a0b22e50dcb24c", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv11-ECDHE-RSA-AES", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv11-ECDHE-RSA-AES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv11-ECDHE-RSA-AES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv11-ECDHE-RSA-AES?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 02 00 59 02 00 00  55 03 02 52 cc 57 58 39  |....Y...U..R.WX9|\n-00000010  f8 48 dc e0 ba ad e3 f6  6e bf 6b 9e e0 34 53 4f  |.H......n.k..4SO|\n-00000020  cd 16 7a 31 ac 23 de 31  3c 4b 0d 20 41 92 79 b5  |..z1.#.1<K. A.y.|\n-00000030  e0 f6 1c 25 da db 35 3b  58 61 04 52 7f ac da 64  |...%..5;Xa.R...d|\n-00000040  0d 31 f0 52 55 5d ec 37  94 21 aa 6f c0 13 00 00  |.1.RU].7.!.o....|\n+00000000  16 03 02 00 59 02 00 00  55 03 02 53 04 f1 02 fe  |....Y...U..S....|\n+00000010  17 8b 79 ad 93 2e d3 89  66 9b 5d 9b b4 03 3e ba  |..y.....f.]...>.|\n+00000020  65 2a f1 55 f9 3c 33 de  2c a7 47 20 fa 4f 82 11  |e*.U.<3.,.G .O..|\n+00000030  96 81 d0 70 2e 65 b3 68  2e 3a 6d d7 6c 74 22 33  |...p.e.h.:m.lt\"3|\n+00000040  d4 ae 6c aa c8 f0 c7 20  8b 10 21 e7 c0 13 00 00  |..l.... ..!.....|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  02 02 be 0b 00 02 ba 00  02 b7 00 02 b4 30 82 02  |.............0..|\n 00000070  b0 30 82 02 19 a0 03 02  01 02 02 09 00 85 b0 bb  |.0..............|\n@@ -58,42 +58,42 @@\n 000002f0  5f 33 c4 b6 d8 c9 75 90  96 8c 0f 52 98 b5 cd 98  |_3....u....R....|\n 00000300  1f 89 20 5f f2 a0 1c a3  1b 96 94 dd a9 fd 57 e9  |.. _..........W.|\n 00000310  70 e8 26 6d 71 99 9b 26  6e 38 50 29 6c 90 a7 bd  |p.&mq..&n8P)l...|\n-00000320  d9 16 03 02 00 cb 0c 00  00 c7 03 00 17 41 04 0a  |.............A..|\n-00000330  be f8 00 24 e0 50 bf 90  12 25 b9 26 3b 7f 4a a2  |...$.P...%.&;.J.|\n-00000340  b3 4b b1 76 db 53 0d 83  9b 35 57 2f 64 ad 03 d1  |.K.v.S...5W/d...|\n-00000350  f9 1b ef cf 48 8a a8 a9  4c df d3 7b 7d e8 a0 68  |....H...L..{}..h|\n-00000360  2b 20 b4 4f 1c e3 11 1d  bf a9 bd 58 e4 4a 3e 00  |+ .O.......X.J>.|\n-00000370  80 2a 64 fb 5f 8f f5 bb  6d 48 2c 7d a6 c0 f6 b2  |.*d._...mH,}....|\n-00000380  3d 2b 75 83 07 fd b8 9d  50 a1 ec 1c 09 85 69 4f  |=+u.....P.....iO|\n-00000390  a3 39 8e 2f b4 94 76 b1  8d 03 3f 76 01 7e 22 90  |.9./..v...?v.~\".|\n-000003a0  08 58 40 0d d7 65 c1 49  d5 7e 0d 28 62 ec b6 58  |.X@..e.I.~.(b..X|\n-000003b0  6f ff 83 21 65 e7 8b f5  51 32 5f 39 e8 9e 85 d4  |o..!e...Q2_9....|\n-000003c0  65 1c a8 a8 70 82 5e db  d7 c6 4a 2d 2e ef c3 b3  |e...p.^...J-....|\n-000003d0  73 ca 13 5b 99 19 e3 4d  cb 4a 9f 42 3c b7 79 fb  |s..[...M.J.B<.y.|\n-000003e0  70 33 f7 a7 59 cb 76 a7  7c f3 8a 9a 5d fd 12 74  |p3..Y.v.|...]..t|\n-000003f0  5a 16 03 02 00 04 0e 00  00 00                    |Z.........|\n+00000320  d9 16 03 02 00 cb 0c 00  00 c7 03 00 17 41 04 26  |.............A.&|\n+00000330  56 18 02 e5 66 d4 aa 24  7e ae 39 e5 ca 78 6c c1  |V...f..$~.9..xl.|\n+00000340  90 02 c3 c4 ad 79 2c 47  a8 bf 54 e2 8a 22 b6 ef  |.....y,G..T..\"..|\n+00000350  99 d4 7a 7f 8f 78 6a 78  4e 14 2a 16 0d bb 54 38  |..z..xjxN.*...T8|\n+00000360  59 1f 7a 53 1b c7 73 10  89 4b de c3 66 39 7a 00  |Y.zS..s..K..f9z.|\n+00000370  80 3a 88 38 c8 15 07 ab  2f 0f 0d cb 19 07 84 ac  |.:.8..../.......|\n+00000380  24 fd 8b d2 9d 05 45 c6  11 c3 d6 84 58 95 5a 08  |$.....E.....X.Z.|\n+00000390  b9 a4 2c c0 41 4e 34 e0  b2 24 98 94 b7 67 27 50  |..,.AN4..$...g'P|\n+000003a0  ba 82 35 28 a9 bf 16 ee  e3 7b 49 9c 4c 81 80 69  |..5(.....{I.L..i|\n+000003b0  d7 aa ed 46 ea 9a 68 c4  97 b7 11 d4 35 91 74 5e  |...F..h.....5.t^|\n+000003c0  54 10 34 83 cd c4 06 18  49 7d 7a 28 c9 53 06 73  |T.4.....I}z(.S.s|\n+000003d0  00 7b 04 b6 d8 36 a7 4b  67 7f 81 30 94 de 40 4d  |.{...6.Kg..0..@M|\n+000003e0  18 f8 c4 b7 02 00 44 8e  bc 72 06 24 53 15 74 72  |......D..r.$S.tr|\n+000003f0  8d 16 03 02 00 04 0e 00  00 00                    |..........|\n >>> Flow 3 (client to server)\n 00000000  16 03 02 00 46 10 00 00  42 41 04 1e 18 37 ef 0d  |....F...BA...7..|\n 00000010  19 51 88 35 75 71 b5 e5  54 5b 12 2e 8f 09 67 fd  |.Q.5uq..T[....g.|\n 00000020  a7 24 20 3e b2 56 1c ce  97 28 5e f8 2b 2d 4f 9e  |.$ >.V...(^.+-O.|\n 00000030  f1 07 9f 6c 4b 5b 83 56  e2 32 42 e9 58 b6 d7 49  |...lK[.V.2B.X..I|\n 00000040  a6 b5 68 1a 41 03 56 6b  dc 5a 89 14 03 02 00 01  |..h.A.Vk.Z......|\n 00000050  01 16 03 02 00 40 00 00  00 00 00 00 00 00 00 00  |.....@..........|\n-00000060  00 00 00 00 00 00 9a 7d  f8 d5 af e5 5d 16 a2 39  |.......}....]..9|\n-00000070  94 a5 de f6 ae 71 ba b7  b5 6e 9e a7 05 37 ed ff  |.....q...n...7..|\n-00000080  b4 c3 d9 4e d5 d5 3c 84  7e 3f a4 68 23 3b 52 ab  |...N..<.~?.h#;R.|\n-00000090  d7 30 3b 63 ed b1                                 |.0;c..|\n+00000060  00 00 00 00 00 00 8a 87  81 38 35 c0 4c bb f8 12  |.........85.L...|\n+00000070  fa 75 04 cd 1e 3a 61 96  93 c8 fb 07 d1 6d b4 55  |.u...:a......m.U|\n+00000080  0f b5 0f 07 35 0a 96 ce  5c 6f 24 62 d3 68 e4 b0  |....5...\\o$b.h..|\n+00000090  5d be 81 37 c2 9c                                 |]..7..|\n >>> Flow 4 (server to client)\n-00000000  14 03 02 00 01 01 16 03  02 00 40 df 38 36 f9 ee  |..........@.86..|\n-00000010  03 f3 92 e1 3b 81 21 60  3a 46 3a 2c fc 2f 6a 01  |....;.!`:F:,./j.|\n-00000020  a4 04 a6 f4 09 f9 bf 1f  73 a6 c6 04 83 8a ae 39  |........s......9|\n-00000030  43 d7 8d 88 8e 6c f2 da  0d a9 82 b5 4e b0 41 c9  |C....l......N.A.|\n-00000040  5a 00 93 9b 8c 60 3c 08  fa aa 91                 |Z....`<....|\n+00000000  14 03 02 00 01 01 16 03  02 00 40 66 36 8d f8 8c  |..........@f6...|\n+00000010  7f db 38 e8 39 df f8 2f  cb 88 9c 14 d9 89 10 b4  |..8.9../........|\n+00000020  be 59 88 d7 f3 73 62 af  a3 42 66 6e 74 38 64 9f  |.Y...sb..Bfnt8d.|\n+00000030  16 79 09 d7 14 7e 91 8a  70 73 63 28 30 58 fe cc  |.y...~..psc(0X..|\n+00000040  42 45 d6 37 fb 9e 8c c1  01 af 34                 |BE.7......4|\n >>> Flow 5 (client to server)\n 00000000  17 03 02 00 30 00 00 00  00 00 00 00 00 00 00 00  |....0...........|\n-00000010  00 00 00 00 00 85 20 30  5e 6e e6 ab a0 2c 66 7a  |...... 0^n...,fz|\n-00000020  f9 88 3b ee c9 5b 5c 0b  a3 7a 94 f0 8a ab 61 e0  |..;..[\\..z....a.|\n-00000030  7f 93 78 79 61 15 03 02  00 30 00 00 00 00 00 00  |..xya....0......|\n-00000040  00 00 00 00 00 00 00 00  00 00 e0 de 16 23 01 0a  |.............#..|\n-00000050  cf 90 1b 96 6a 14 f2 c9  af e2 20 49 ce b4 82 bf  |....j..... I....|\n-00000060  bf ed 7a 28 e1 ed 8e e7  18 c6                    |..z(......|\n+00000010  00 00 00 00 00 31 0b e3  9d 2a 05 83 19 7d 10 36  |.....1...*...}.6|\n+00000020  23 dc da fe 00 ab d3 aa  8f ce 28 5f 08 fd b7 59  |#.........(_...Y|\n+00000030  1e 00 2e 25 5a 15 03 02  00 30 00 00 00 00 00 00  |...%Z....0......|\n+00000040  00 00 00 00 00 00 00 00  00 00 10 91 fd fa 59 07  |..............Y.|\n+00000050  df 2c 92 25 15 7b 7c 83  44 89 0d 4f 65 43 99 2e  |.,.%.{|.D..OeC..|\n+00000060  41 5d 51 c9 09 89 ed 02  08 bc                    |A]Q.......|"}, {"sha": "f7be3f7e93ac838ddd0a4227b63d03279d0da8f6", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv11-RSA-RC4", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv11-RSA-RC4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv11-RSA-RC4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv11-RSA-RC4?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 02 00 51 02 00 00  4d 03 02 52 cc 57 58 d2  |....Q...M..R.WX.|\n-00000010  3e 7a 93 49 2a f2 3f f8  fe 58 6b 88 d2 87 66 71  |>z.I*.?..Xk...fq|\n-00000020  69 bd d2 98 03 4b 17 b1  5d 5b a5 20 c6 5d a6 c7  |i....K..][. .]..|\n-00000030  40 53 b8 4f 68 74 12 70  64 58 4f 78 fa d1 a9 5c  |@S.Oht.pdXOx...\\|\n-00000040  f0 ce 5e 78 fd 66 30 98  8e ac 94 37 00 05 00 00  |..^x.f0....7....|\n+00000000  16 03 02 00 51 02 00 00  4d 03 02 53 04 f1 02 d4  |....Q...M..S....|\n+00000010  69 65 aa 96 3d 42 96 eb  9e 7d 8a 18 af 4c 7c 5d  |ie..=B...}...L|]|\n+00000020  fb 97 5f da 94 62 13 69  1f 66 06 20 aa 52 e3 08  |.._..b.i.f. .R..|\n+00000030  35 0a 87 d5 ef 93 49 ab  1a 74 dd 90 bd 69 70 d1  |5.....I..t...ip.|\n+00000040  e9 f1 44 17 3a dc 33 98  f5 e5 ab 93 00 05 00 00  |..D.:.3.........|\n 00000050  05 ff 01 00 01 00 16 03  02 02 be 0b 00 02 ba 00  |................|\n 00000060  02 b7 00 02 b4 30 82 02  b0 30 82 02 19 a0 03 02  |.....0...0......|\n 00000070  01 02 02 09 00 85 b0 bb  a4 8a 7f b8 ca 30 0d 06  |.............0..|\n@@ -69,15 +69,15 @@\n 00000060  e6 bd 77 82 6f 23 b6 e0  bd a2 92 b7 3a ac e8 56  |..w.o#......:..V|\n 00000070  f1 af 54 5e 46 87 e9 3b  33 e7 b8 28 b7 d6 c8 90  |..T^F..;3..(....|\n 00000080  35 d4 1c 43 d1 30 6f 55  4e 0a 70 14 03 02 00 01  |5..C.0oUN.p.....|\n-00000090  01 16 03 02 00 24 6c 69  1d 96 27 2b f5 0b 6e d5  |.....$li..'+..n.|\n-000000a0  f7 97 96 c6 9f 5e 59 92  9f 3a 0e e5 d0 36 e4 af  |.....^Y..:...6..|\n-000000b0  bc 17 bf 95 ab f7 0c 19  a6 86                    |..........|\n+00000090  01 16 03 02 00 24 07 9f  dc df 2d c3 a6 88 06 28  |.....$....-....(|\n+000000a0  21 e0 e0 d3 31 99 fc 89  b8 82 6e 95 f4 4b 9e e2  |!...1.....n..K..|\n+000000b0  d9 36 5c 14 ce d7 db e2  78 4e                    |.6\\.....xN|\n >>> Flow 4 (server to client)\n-00000000  14 03 02 00 01 01 16 03  02 00 24 dd 9f e5 d3 53  |..........$....S|\n-00000010  ae af f2 41 bf eb 53 33  71 d0 f3 84 ac b0 88 72  |...A..S3q......r|\n-00000020  2d de 14 5b 59 9d f3 4c  9f ab a1 aa f4 f3 af     |-..[Y..L.......|\n+00000000  14 03 02 00 01 01 16 03  02 00 24 81 72 75 80 d4  |..........$.ru..|\n+00000010  1b 1a 32 00 89 bf 9e 79  30 b9 6b 67 e0 8e c7 eb  |..2....y0.kg....|\n+00000020  73 f2 e4 93 51 65 9b 5f  91 b1 b4 b1 f7 44 76     |s...Qe._.....Dv|\n >>> Flow 5 (client to server)\n-00000000  17 03 02 00 1a 24 4d 6b  23 8a 36 07 80 49 1a e5  |.....$Mk#.6..I..|\n-00000010  da 85 7c a0 cb f3 82 e5  23 d7 b9 46 82 cb bc 15  |..|.....#..F....|\n-00000020  03 02 00 16 f3 f1 5b f2  40 0f 3f 88 ea f2 4e 28  |......[.@.?...N(|\n-00000030  52 aa c6 3a 6c 88 e3 30  21 0f                    |R..:l..0!.|\n+00000000  17 03 02 00 1a b2 91 39  63 c0 38 3c 4d 25 fd 14  |.......9c.8<M%..|\n+00000010  b9 b6 e1 23 21 b4 8d 17  9e 1f d8 33 92 69 c2 15  |...#!......3.i..|\n+00000020  03 02 00 16 4b 10 25 4d  9d 09 c2 11 96 be f7 5b  |....K.%M.......[|\n+00000030  c2 9b 99 fd 1f 8e af 0f  2c 51                    |........,Q|"}, {"sha": "20732703647551c4f5aca8d99d663ba0a24220dc", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv12-ClientCert-ECDSA-ECDSA", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-ECDSA-ECDSA", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-ECDSA-ECDSA", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-ECDSA-ECDSA?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 03 00 59 02 00 00  55 03 03 52 cc 57 59 76  |....Y...U..R.WYv|\n-00000010  bc 07 88 2c 89 e3 aa 41  69 76 d1 0b 5f c0 7a b1  |...,...Aiv.._.z.|\n-00000020  c3 c4 f8 12 6e 73 7f 5b  25 41 8e 20 b4 2d 8d a9  |....ns.[%A. .-..|\n-00000030  80 95 44 d4 d7 47 8c a1  f1 de 36 57 cf 54 dd ee  |..D..G....6W.T..|\n-00000040  a7 d8 ba cf ca b7 68 0e  9e b4 a3 7b c0 09 00 00  |......h....{....|\n+00000000  16 03 03 00 59 02 00 00  55 03 03 53 04 f1 03 6f  |....Y...U..S...o|\n+00000010  c6 4b 55 27 fe e8 fe 4d  7c 0e d4 20 98 b8 7c 81  |.KU'...M|.. ..|.|\n+00000020  3d 31 f8 35 66 2f 0a 0b  f1 2c e3 20 86 4d 12 32  |=1.5f/...,. .M.2|\n+00000030  73 e3 ba be 25 50 a4 a2  a1 7b f1 9a 76 7a 75 fb  |s...%P...{..vzu.|\n+00000040  e2 64 a2 12 ec f3 e7 9d  9a 24 6e 94 c0 09 00 00  |.d.......$n.....|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  03 02 0e 0b 00 02 0a 00  02 07 00 02 04 30 82 02  |.............0..|\n 00000070  00 30 82 01 62 02 09 00  b8 bf 2d 47 a0 d2 eb f4  |.0..b.....-G....|\n@@ -47,24 +47,24 @@\n 00000240  13 83 0d 94 06 bb d4 37  7a f6 ec 7a c9 86 2e dd  |.......7z..z....|\n 00000250  d7 11 69 7f 85 7c 56 de  fb 31 78 2b e4 c7 78 0d  |..i..|V..1x+..x.|\n 00000260  ae cb be 9e 4e 36 24 31  7b 6a 0f 39 95 12 07 8f  |....N6$1{j.9....|\n-00000270  2a 16 03 03 00 d8 0c 00  00 d4 03 00 17 41 04 3a  |*............A.:|\n-00000280  16 95 9a af 75 ff 51 27  76 6e 82 c7 db a2 3d 62  |....u.Q'vn....=b|\n-00000290  b4 65 d1 97 26 38 55 68  29 68 2c fc 4b 69 2c f9  |.e..&8Uh)h,.Ki,.|\n-000002a0  01 00 4b 1e ee cf 88 54  a7 f3 49 a5 04 98 bd 12  |..K....T..I.....|\n-000002b0  74 b1 cb 95 4c 49 c2 1a  31 e6 95 9f f5 0a f5 04  |t...LI..1.......|\n-000002c0  03 00 8b 30 81 88 02 42  01 e7 72 2b 54 9e e0 97  |...0...B..r+T...|\n-000002d0  79 e6 23 52 f7 2e 08 36  d5 dc 31 21 9d f2 13 ae  |y.#R...6..1!....|\n-000002e0  30 86 1c df d2 be 52 e0  e7 8b f5 dd fa 09 f2 f3  |0.....R.........|\n-000002f0  97 5d f7 48 37 83 9b aa  6c ef 87 95 de f4 50 19  |.].H7...l.....P.|\n-00000300  b2 9b d6 27 4c 4d 67 6a  27 be 02 42 01 d8 86 63  |...'LMgj'..B...c|\n-00000310  dc f1 9f 32 a3 25 6f 55  b3 67 7b 64 7e 24 38 25  |...2.%oU.g{d~$8%|\n-00000320  96 bb 7b b1 9b ef 73 c3  6c d1 69 83 7d bc c5 30  |..{...s.l.i.}..0|\n-00000330  fe 9a 21 0d 29 c4 d6 1a  51 a5 dd 6e a0 80 c8 9c  |..!.)...Q..n....|\n-00000340  54 49 34 22 f7 5e cf 28  ae 2f cd 46 b1 71 16 03  |TI4\".^.(./.F.q..|\n-00000350  03 00 30 0d 00 00 28 03  01 02 40 00 20 06 01 06  |..0...(...@. ...|\n-00000360  02 06 03 05 01 05 02 05  03 04 01 04 02 04 03 03  |................|\n-00000370  01 03 02 03 03 02 01 02  02 02 03 01 01 00 00 0e  |................|\n-00000380  00 00 00                                          |...|\n+00000270  2a 16 03 03 00 d7 0c 00  00 d3 03 00 17 41 04 a3  |*............A..|\n+00000280  03 8c de d2 b0 68 c8 25  0e 85 ea d7 ae 13 0d 79  |.....h.%.......y|\n+00000290  ec 59 0d b5 4d 51 96 d9  7f 64 36 fb 4c d5 6a 26  |.Y..MQ...d6.L.j&|\n+000002a0  ae 0e 48 61 df 5c 2b d4  ff 09 41 15 c4 14 8e 1b  |..Ha.\\+...A.....|\n+000002b0  84 a8 c8 cd ef 10 97 95  66 67 85 dd fd dc 2a 04  |........fg....*.|\n+000002c0  03 00 8a 30 81 87 02 41  11 75 5d bc bd 08 28 d4  |...0...A.u]...(.|\n+000002d0  5b 1b 45 7f 9c d3 8d 0b  91 fa f6 82 ba 59 bd 3e  |[.E..........Y.>|\n+000002e0  96 01 c6 1d 38 db fe 08  e7 56 89 fc 10 b0 37 6a  |....8....V....7j|\n+000002f0  3d d6 c9 50 16 53 f7 c2  a2 60 67 82 1f 74 b8 d5  |=..P.S...`g..t..|\n+00000300  bc 02 ec 96 db 82 18 8c  87 02 42 01 0d df f7 b7  |..........B.....|\n+00000310  05 3c 8c 56 f0 1d 33 18  cf c5 4c 80 7e 0b d9 f9  |.<.V..3...L.~...|\n+00000320  f0 51 69 fe 5d b8 0b 64  c0 c7 0d f4 75 65 ae 07  |.Qi.]..d....ue..|\n+00000330  9d cf f4 4b ad 52 f6 b8  10 26 18 bd d6 e2 0d a8  |...K.R...&......|\n+00000340  80 10 50 34 15 cd 72 0b  7d a9 94 de 4c 16 03 03  |..P4..r.}...L...|\n+00000350  00 30 0d 00 00 28 03 01  02 40 00 20 06 01 06 02  |.0...(...@. ....|\n+00000360  06 03 05 01 05 02 05 03  04 01 04 02 04 03 03 01  |................|\n+00000370  03 02 03 03 02 01 02 02  02 03 01 01 00 00 0e 00  |................|\n+00000380  00 00                                             |..|\n >>> Flow 3 (client to server)\n 00000000  16 03 03 02 0a 0b 00 02  06 00 02 03 00 02 00 30  |...............0|\n 00000010  82 01 fc 30 82 01 5e 02  09 00 9a 30 84 6c 26 35  |...0..^....0.l&5|\n@@ -111,24 +111,24 @@\n 000002a0  b3 c1 85 6a 42 9b f9 7e  7e 31 c2 e5 bd 66 02 41  |...jB..~~1...f.A|\n 000002b0  4b 49 c6 cd 02 e3 83 f7  03 50 18 6d b4 c9 51 02  |KI.......P.m..Q.|\n 000002c0  c0 ab 87 bc e0 3e 4b 89  53 3a e2 65 89 97 02 c1  |.....>K.S:.e....|\n-000002d0  88 a6 56 bf d0 53 0b a9  7e 82 7d 4d fc 66 78 8f  |..V..S..~.}M.fx.|\n-000002e0  57 dc 5e 62 54 70 cc 32  0c 1c b5 62 fc 6a 76 7e  |W.^bTp.2...b.jv~|\n-000002f0  3f 14 03 03 00 01 01 16  03 03 00 40 00 00 00 00  |?..........@....|\n-00000300  00 00 00 00 00 00 00 00  00 00 00 00 62 a7 74 42  |............b.tB|\n-00000310  ab 04 f8 f9 5a 86 3e 35  94 ce 4b 79 77 a1 a0 6a  |....Z.>5..Kyw..j|\n-00000320  cf 2b 3a 62 fc 3b 50 2b  51 5e d7 6a d1 d0 65 b4  |.+:b.;P+Q^.j..e.|\n-00000330  5d 15 99 11 10 d3 6b a3  97 d2 30 08              |].....k...0.|\n+000002d0  88 0d 64 db 8e 4f 73 4e  ea 29 0b ed a0 f5 ce 3d  |..d..OsN.).....=|\n+000002e0  5f cc 20 ef 0a 22 02 82  f2 14 2a b7 42 68 bd c7  |_. ..\"....*.Bh..|\n+000002f0  4d 14 03 03 00 01 01 16  03 03 00 40 00 00 00 00  |M..........@....|\n+00000300  00 00 00 00 00 00 00 00  00 00 00 00 f0 cc 4f c7  |..............O.|\n+00000310  b6 0f c9 38 4d 4b 97 2c  4f be 53 08 4c d6 5b 4e  |...8MK.,O.S.L.[N|\n+00000320  24 70 30 81 82 3a 7f 62  95 03 4d fc 54 78 ec 13  |$p0..:.b..M.Tx..|\n+00000330  b2 a1 00 85 2b 04 e4 1d  7b 6e 87 60              |....+...{n.`|\n >>> Flow 4 (server to client)\n-00000000  14 03 03 00 01 01 16 03  03 00 40 fa 8c c0 6f 59  |..........@...oY|\n-00000010  8f af a8 21 c8 aa 4c 00  db 6a a5 98 09 52 1a 27  |...!..L..j...R.'|\n-00000020  77 af 6d 13 c2 54 f8 90  31 37 5c 86 3b 66 de d8  |w.m..T..17\\.;f..|\n-00000030  41 96 8b 84 d9 75 c0 00  b5 5f 99 3e a9 19 fa 6b  |A....u..._.>...k|\n-00000040  be e2 78 43 30 41 94 39  ce 87 67                 |..xC0A.9..g|\n+00000000  14 03 03 00 01 01 16 03  03 00 40 d5 2a 76 79 1c  |..........@.*vy.|\n+00000010  e7 d5 b1 5c 65 6b d1 45  73 53 4c 05 3a 6c 5d 81  |...\\ek.EsSL.:l].|\n+00000020  dd 2f f0 74 62 e4 8e f8  ed 21 99 c7 4f d6 28 40  |./.tb....!..O.(@|\n+00000030  63 d9 6d e5 b0 04 73 27  7a 1d 08 19 31 10 da ef  |c.m...s'z...1...|\n+00000040  79 26 33 fb 45 23 be a4  7c 03 66                 |y&3.E#..|.f|\n >>> Flow 5 (client to server)\n 00000000  17 03 03 00 30 00 00 00  00 00 00 00 00 00 00 00  |....0...........|\n-00000010  00 00 00 00 00 76 8b 21  f2 c9 fe b7 c4 60 e6 91  |.....v.!.....`..|\n-00000020  00 ca 3e 54 25 5e f4 20  f8 df 58 41 03 b0 d0 fb  |..>T%^. ..XA....|\n-00000030  e7 59 4d 6a 34 15 03 03  00 30 00 00 00 00 00 00  |.YMj4....0......|\n-00000040  00 00 00 00 00 00 00 00  00 00 0f 0f e5 7a a2 86  |.............z..|\n-00000050  8c 31 53 05 be 22 fb 53  51 e6 26 0a a5 c5 09 ca  |.1S..\".SQ.&.....|\n-00000060  f3 46 0f 67 50 d8 83 35  7b f3                    |.F.gP..5{.|\n+00000010  00 00 00 00 00 e2 53 bd  c0 ef 9e e6 44 94 ea 5d  |......S.....D..]|\n+00000020  f5 c5 a9 4b ed eb 1c 49  9f 79 44 f9 cd d7 de 02  |...K...I.yD.....|\n+00000030  51 10 ae 87 7d 15 03 03  00 30 00 00 00 00 00 00  |Q...}....0......|\n+00000040  00 00 00 00 00 00 00 00  00 00 d3 95 13 7f 5f 58  |.............._X|\n+00000050  ab d6 17 ea 01 2c 2a ea  5d 7c 44 61 4a 27 97 52  |.....,*.]|DaJ'.R|\n+00000060  cc 9b 86 f6 37 42 2b 94  01 49                    |....7B+..I|"}, {"sha": "c3b753a7b44dd8028631c20b30a1bd9c005e3583", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv12-ClientCert-ECDSA-RSA", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-ECDSA-RSA", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-ECDSA-RSA", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-ECDSA-RSA?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 03 00 51 02 00 00  4d 03 03 52 cc 57 59 85  |....Q...M..R.WY.|\n-00000010  0f 00 df b8 0d ef c4 98  ba e3 bd 71 4c 98 e5 80  |...........qL...|\n-00000020  af 77 c7 d8 5f c1 36 62  1c ef 89 20 b6 01 c3 3b  |.w.._.6b... ...;|\n-00000030  9e 93 27 04 05 7b 73 b3  02 7b c3 89 f5 ac 51 24  |..'..{s..{....Q$|\n-00000040  7c e5 6d f3 34 d0 99 71  5e ae 30 ea 00 05 00 00  ||.m.4..q^.0.....|\n+00000000  16 03 03 00 51 02 00 00  4d 03 03 53 04 f1 03 b0  |....Q...M..S....|\n+00000010  43 00 97 24 a7 a8 ea b2  24 fe 96 24 a1 49 64 fd  |C..$....$..$.Id.|\n+00000020  1c a3 30 35 2d 85 a7 40  42 86 6b 20 af 27 7f ac  |..05-..@B.k .'..|\n+00000030  8b 16 89 6c 78 b7 f5 29  02 58 a6 8b 61 43 c2 b0  |...lx..).X..aC..|\n+00000040  e0 a8 96 c8 fa 2b 26 ad  9a 5f 2d d6 00 05 00 00  |.....+&.._-.....|\n 00000050  05 ff 01 00 01 00 16 03  03 02 be 0b 00 02 ba 00  |................|\n 00000060  02 b7 00 02 b4 30 82 02  b0 30 82 02 19 a0 03 02  |.....0...0......|\n 00000070  01 02 02 09 00 85 b0 bb  a4 8a 7f b8 ca 30 0d 06  |.............0..|\n@@ -111,17 +111,17 @@\n 000002e0  b3 c1 85 6a 42 9b f9 7e  7e 31 c2 e5 bd 66 02 41  |...jB..~~1...f.A|\n 000002f0  4b 49 c6 cd 02 e3 83 f7  03 50 18 6d b4 c9 51 02  |KI.......P.m..Q.|\n 00000300  c0 ab 87 bc e0 3e 4b 89  53 3a e2 65 89 97 02 c1  |.....>K.S:.e....|\n-00000310  88 d6 42 09 8f e0 57 a7  e6 9e 65 3d fd 82 45 9d  |..B...W...e=..E.|\n-00000320  3e 69 cc ad 17 72 c7 98  8d 3a ca f0 05 63 43 40  |>i...r...:...cC@|\n-00000330  7a 14 03 03 00 01 01 16  03 03 00 24 a8 45 b8 6e  |z..........$.E.n|\n-00000340  21 28 b3 6d 94 0d 7b c4  af 24 0e ca 51 ec 85 3c  |!(.m..{..$..Q..<|\n-00000350  87 43 fd 36 e4 3d 1a f4  28 df 90 19 b6 05 d0 c9  |.C.6.=..(.......|\n+00000310  88 5a 97 82 3e 55 6b 7c  d8 db b8 cc 1b 30 84 0a  |.Z..>Uk|.....0..|\n+00000320  7a 97 71 e4 10 bb a4 39  8c 2a cf f5 88 c7 d1 95  |z.q....9.*......|\n+00000330  73 14 03 03 00 01 01 16  03 03 00 24 9f 1e f0 72  |s..........$...r|\n+00000340  92 ea dc f7 56 96 37 e4  69 db db 66 1d f6 94 c4  |....V.7.i..f....|\n+00000350  18 31 4f d0 5d c5 f4 53  21 aa 98 b1 dc 08 94 94  |.1O.]..S!.......|\n >>> Flow 4 (server to client)\n-00000000  14 03 03 00 01 01 16 03  03 00 24 ae 0d d7 72 4f  |..........$...rO|\n-00000010  70 d9 16 20 da 70 dd 04  d5 5a 96 32 80 8c 14 db  |p.. .p...Z.2....|\n-00000020  4d 10 31 47 1e 26 78 f1  95 25 0c fe 24 2f 6f     |M.1G.&x..%..$/o|\n+00000000  14 03 03 00 01 01 16 03  03 00 24 ee 68 c1 87 9f  |..........$.h...|\n+00000010  d7 90 94 f1 3b 6d 26 0b  3d 89 7a 45 3b 52 5d 3c  |....;m&.=.zE;R]<|\n+00000020  dd 7c c1 4e 57 3e a9 ee  91 be cf 2b a3 98 9d     |.|.NW>.....+...|\n >>> Flow 5 (client to server)\n-00000000  17 03 03 00 1a d4 7d c7  83 f7 98 3b 77 91 4b e6  |......}....;w.K.|\n-00000010  68 fa e2 22 37 24 93 20  fa e2 67 18 03 41 90 15  |h..\"7$. ..g..A..|\n-00000020  03 03 00 16 0b ff 73 1c  e5 81 5f 28 52 72 49 39  |......s..._(RrI9|\n-00000030  ca 42 fb 57 8a 3a 80 75  2b ac                    |.B.W.:.u+.|\n+00000000  17 03 03 00 1a 88 33 3e  2b 22 6b 92 d0 bb 8a 1e  |......3>+\"k.....|\n+00000010  9b f4 9e aa 91 8b 2b 95  ea 53 c8 03 0a 93 58 15  |......+..S....X.|\n+00000020  03 03 00 16 c4 67 79 ba  ec cf 90 b1 f9 ac ec 64  |.....gy........d|\n+00000030  72 01 08 8f 3a 98 aa 66  25 00                    |r...:..f%.|"}, {"sha": "0037af61a03a9af5717cf6229db657120b6e1225", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv12-ClientCert-RSA-ECDSA", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-RSA-ECDSA", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-RSA-ECDSA", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-RSA-ECDSA?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 03 00 59 02 00 00  55 03 03 52 cc 57 58 6a  |....Y...U..R.WXj|\n-00000010  f6 51 de a7 6b b0 94 bb  98 24 ab e2 c0 02 e4 8c  |.Q..k....$......|\n-00000020  ac a8 48 5d 41 82 eb c0  de 5a 1e 20 70 29 82 6c  |..H]A....Z. p).l|\n-00000030  01 cf 4e 21 52 18 98 8c  0a 31 14 26 6c a4 44 11  |..N!R....1.&l.D.|\n-00000040  6c 5b d6 5c cb a4 b1 91  52 13 b5 77 c0 09 00 00  |l[.\\....R..w....|\n+00000000  16 03 03 00 59 02 00 00  55 03 03 53 04 f1 02 fd  |....Y...U..S....|\n+00000010  41 bd ef ee f3 da fc 1a  31 8c 77 f2 e9 66 54 a0  |A.......1.w..fT.|\n+00000020  f4 15 b1 1c 84 0d 6d 74  87 ac 7d 20 78 17 8b 08  |......mt..} x...|\n+00000030  10 20 c9 44 e4 8a 43 af  4a c7 b8 3d 99 f2 f7 af  |. .D..C.J..=....|\n+00000040  bb a3 21 2f 40 cc ed b6  da a8 a1 d5 c0 09 00 00  |..!/@...........|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  03 02 0e 0b 00 02 0a 00  02 07 00 02 04 30 82 02  |.............0..|\n 00000070  00 30 82 01 62 02 09 00  b8 bf 2d 47 a0 d2 eb f4  |.0..b.....-G....|\n@@ -47,20 +47,20 @@\n 00000240  13 83 0d 94 06 bb d4 37  7a f6 ec 7a c9 86 2e dd  |.......7z..z....|\n 00000250  d7 11 69 7f 85 7c 56 de  fb 31 78 2b e4 c7 78 0d  |..i..|V..1x+..x.|\n 00000260  ae cb be 9e 4e 36 24 31  7b 6a 0f 39 95 12 07 8f  |....N6$1{j.9....|\n-00000270  2a 16 03 03 00 d8 0c 00  00 d4 03 00 17 41 04 de  |*............A..|\n-00000280  c7 75 51 96 25 63 8e c0  da 9c c0 8e d1 76 ca 08  |.uQ.%c.......v..|\n-00000290  4c f5 a0 13 75 01 ab cf  12 09 ae cd 13 53 84 1e  |L...u........S..|\n-000002a0  a4 f8 46 0f 15 08 18 48  65 d9 75 85 80 38 79 b7  |..F....He.u..8y.|\n-000002b0  fc 51 a2 7c 7a ac ab b9  67 8a d7 16 af 75 df 04  |.Q.|z...g....u..|\n-000002c0  03 00 8b 30 81 88 02 42  00 fe 19 74 a9 a1 27 05  |...0...B...t..'.|\n-000002d0  92 78 a4 c8 9d c8 a5 de  67 cd 1f a3 1b c7 ba 7e  |.x......g......~|\n-000002e0  75 68 15 29 16 e7 91 f9  b9 7b d7 e4 e9 c0 2a 7f  |uh.).....{....*.|\n-000002f0  1a ce 71 5a b9 c1 64 dd  26 59 24 e8 34 21 24 8a  |..qZ..d.&Y$.4!$.|\n-00000300  b0 19 06 d4 46 0c 05 46  dc 5f 02 42 00 a8 05 71  |....F..F._.B...q|\n-00000310  59 ef 60 fa cf 06 ec 18  5f be 53 b7 95 07 05 5b  |Y.`....._.S....[|\n-00000320  70 87 ac da f4 61 94 41  60 c8 ab 7b 26 5a 32 4d  |p....a.A`..{&Z2M|\n-00000330  0d 53 00 0e 8e b3 b2 16  c7 4e 3a 15 14 76 bc dc  |.S.......N:..v..|\n-00000340  ff b6 60 eb 62 b6 15 34  53 4f 2a 42 48 2c 16 03  |..`.b..4SO*BH,..|\n+00000270  2a 16 03 03 00 d8 0c 00  00 d4 03 00 17 41 04 a9  |*............A..|\n+00000280  19 8b d9 9b 5c 7c 6a 7d  85 d2 70 4e 89 7e 0b 5b  |....\\|j}..pN.~.[|\n+00000290  dd 5e a1 63 8d 15 bc 0b  0c 47 3d 4d e8 a7 56 88  |.^.c.....G=M..V.|\n+000002a0  2e f6 7f e2 4d fc ed cc  03 ed a1 2d ac ae 81 a5  |....M......-....|\n+000002b0  e2 6d 7f 9f a3 93 e9 10  c1 0e 48 1b f3 f4 38 04  |.m........H...8.|\n+000002c0  03 00 8b 30 81 88 02 42  00 87 fe 7e 63 82 14 57  |...0...B...~c..W|\n+000002d0  dc 7d e2 0f cc 97 2d ba  3c a7 56 4a 17 a8 09 6a  |.}....-.<.VJ...j|\n+000002e0  28 2e f2 66 1a 3f 2d 48  2b 6f 79 a1 60 cd 5e 10  |(..f.?-H+oy.`.^.|\n+000002f0  0b 0a 28 f2 5f e4 3f 4f  f9 c9 91 34 d9 dc bc fc  |..(._.?O...4....|\n+00000300  98 ea 77 0b 99 f8 a2 11  c4 bd 02 42 01 a0 b0 dc  |..w........B....|\n+00000310  db 5b c2 09 99 bd ee a0  b9 aa 31 b9 10 84 22 be  |.[........1...\".|\n+00000320  5a 63 12 5a 43 00 8e c1  33 cc 91 bb c2 70 7a 63  |Zc.ZC...3....pzc|\n+00000330  19 82 c0 74 48 a1 c7 3d  1f f1 6f 4a 6f 6a 8c 3f  |...tH..=..oJoj.?|\n+00000340  28 31 a8 0c 65 19 26 62  4b 7a 7c 4b ea 1a 16 03  |(1..e.&bKz|K....|\n 00000350  03 00 30 0d 00 00 28 03  01 02 40 00 20 06 01 06  |..0...(...@. ...|\n 00000360  02 06 03 05 01 05 02 05  03 04 01 04 02 04 03 03  |................|\n 00000370  01 03 02 03 03 02 01 02  02 02 03 01 01 00 00 0e  |................|\n@@ -103,31 +103,31 @@\n 00000220  a7 24 20 3e b2 56 1c ce  97 28 5e f8 2b 2d 4f 9e  |.$ >.V...(^.+-O.|\n 00000230  f1 07 9f 6c 4b 5b 83 56  e2 32 42 e9 58 b6 d7 49  |...lK[.V.2B.X..I|\n 00000240  a6 b5 68 1a 41 03 56 6b  dc 5a 89 16 03 03 00 88  |..h.A.Vk.Z......|\n-00000250  0f 00 00 84 04 01 00 80  42 bd a6 a2 1f 49 ea 57  |........B....I.W|\n-00000260  43 59 a0 b6 9f 1d b3 3c  35 a7 fa c7 57 02 fa f0  |CY.....<5...W...|\n-00000270  9f 7d a2 77 1a a4 e1 13  c0 78 a3 9e 59 1a f2 c6  |.}.w.....x..Y...|\n-00000280  2b dd 8d bc 5d f1 99 e8  db ac a2 9c 6e d8 b5 6a  |+...].......n..j|\n-00000290  a5 04 aa 6c 48 b8 7a 06  55 81 1a e0 41 69 28 42  |...lH.z.U...Ai(B|\n-000002a0  53 fa f0 63 a9 b5 c1 2f  69 60 cf 02 da d2 eb c8  |S..c.../i`......|\n-000002b0  e8 a1 5c 7b b1 05 c3 b8  66 34 fe 21 8a 7a 84 10  |..\\{....f4.!.z..|\n-000002c0  f1 4d bd b1 68 97 85 11  10 bf be 96 cf 37 e9 68  |.M..h........7.h|\n-000002d0  20 ab d2 f8 d2 20 65 90  14 03 03 00 01 01 16 03  | .... e.........|\n+00000250  0f 00 00 84 04 01 00 80  38 f2 16 e5 b5 86 16 62  |........8......b|\n+00000260  86 e1 7d 01 f1 a8 e1 f7  e7 85 b1 a0 17 ee 84 25  |..}............%|\n+00000270  cb 3c 46 61 1a 78 7b 1e  ee 32 bc d9 6c fa 6b 76  |.<Fa.x{..2..l.kv|\n+00000280  67 a7 9e c8 7a 4c e8 79  0d 22 27 ad e7 98 6a 98  |g...zL.y.\"'...j.|\n+00000290  89 88 8b a9 69 5b 6f c6  00 48 9a 21 77 a9 7c 15  |....i[o..H.!w.|.|\n+000002a0  ba 47 16 74 8d 6c 67 dc  6d f1 98 b6 61 e8 bc 08  |.G.t.lg.m...a...|\n+000002b0  18 53 a6 93 bf fc 27 5e  b7 4d d2 eb 68 e9 23 ee  |.S....'^.M..h.#.|\n+000002c0  d2 70 d2 55 2c c7 99 7d  c0 66 b5 1c ea 38 71 5c  |.p.U,..}.f...8q\\|\n+000002d0  a6 57 1f 52 e4 8e e8 51  14 03 03 00 01 01 16 03  |.W.R...Q........|\n 000002e0  03 00 40 00 00 00 00 00  00 00 00 00 00 00 00 00  |..@.............|\n-000002f0  00 00 00 a1 73 35 05 15  f3 87 00 58 06 54 f7 44  |....s5.....X.T.D|\n-00000300  25 71 3f a6 16 3c e9 95  0a de 14 9d d0 78 73 35  |%q?..<.......xs5|\n-00000310  a4 84 dc 9e bf 94 4e fe  07 89 33 d0 81 ef 9f 49  |......N...3....I|\n-00000320  17 0a 64                                          |..d|\n+000002f0  00 00 00 5e e7 6e 1c a2  02 24 34 f0 a6 b6 27 ea  |...^.n...$4...'.|\n+00000300  69 d5 0e 2e a8 ad 5c ad  6c 06 78 68 39 92 27 f1  |i.....\\.l.xh9.'.|\n+00000310  e8 35 49 67 4d fb 5d 8a  31 2e 4e 3f 19 ed ea 30  |.5IgM.].1.N?...0|\n+00000320  20 60 e1                                          | `.|\n >>> Flow 4 (server to client)\n-00000000  14 03 03 00 01 01 16 03  03 00 40 19 b8 9d de 48  |..........@....H|\n-00000010  86 1e be b4 62 54 57 12  fc f0 ad fd 70 b7 69 48  |....bTW.....p.iH|\n-00000020  58 66 8e 68 1c fd 73 62  da bd 6d 8f 83 8c 09 91  |Xf.h..sb..m.....|\n-00000030  de 53 83 20 2b 81 f1 30  3f 0b 6b 7d c1 59 47 dc  |.S. +..0?.k}.YG.|\n-00000040  e1 f4 95 85 d5 0b 09 45  4e a7 2f                 |.......EN./|\n+00000000  14 03 03 00 01 01 16 03  03 00 40 ee a8 82 bc 3f  |..........@....?|\n+00000010  bf ab a6 e4 30 e0 3d f1  2f 19 a2 ac 7a 81 57 f1  |....0.=./...z.W.|\n+00000020  ee 67 3f 55 2b 30 fa 72  b5 10 03 ec 8d 0a 8f bb  |.g?U+0.r........|\n+00000030  24 f5 45 f5 4e 53 4b 93  a5 0d 42 6c 46 69 98 fb  |$.E.NSK...BlFi..|\n+00000040  63 c5 9f 95 65 d1 b6 f0  a4 15 bd                 |c...e......|\n >>> Flow 5 (client to server)\n 00000000  17 03 03 00 30 00 00 00  00 00 00 00 00 00 00 00  |....0...........|\n-00000010  00 00 00 00 00 69 73 64  71 d8 dc 9b a5 ce 9a 1e  |.....isdq.......|\n-00000020  65 82 01 94 45 12 e7 13  4e 3e 59 7b 19 2b 41 a7  |e...E...N>Y{.+A.|\n-00000030  49 aa 70 1d ce 15 03 03  00 30 00 00 00 00 00 00  |I.p......0......|\n-00000040  00 00 00 00 00 00 00 00  00 00 5f 67 8d e3 77 5e  |.........._g..w^|\n-00000050  32 c4 83 91 2b e6 37 76  18 11 8d 9f e5 c2 20 43  |2...+.7v...... C|\n-00000060  c1 68 83 f9 e6 0b 07 95  ef b6                    |.h........|\n+00000010  00 00 00 00 00 cb 4e bc  d1 a9 58 ef c8 39 a9 36  |......N...X..9.6|\n+00000020  f4 35 05 96 8e a4 50 bc  f4 15 06 f9 fd 41 6d 1e  |.5....P......Am.|\n+00000030  5e 7c 82 63 94 15 03 03  00 30 00 00 00 00 00 00  |^|.c.....0......|\n+00000040  00 00 00 00 00 00 00 00  00 00 bd 77 87 a5 5a d4  |...........w..Z.|\n+00000050  b8 59 e6 6b 0f dd ea f9  ed 18 b2 9f a9 61 b4 3a  |.Y.k.........a.:|\n+00000060  47 15 15 3b 83 ef e1 6d  db a8                    |G..;...m..|"}, {"sha": "df3eaa4406e1e2ad8cc8e220b5935d7e601354f3", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv12-ClientCert-RSA-RSA", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-RSA-RSA", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-RSA-RSA", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ClientCert-RSA-RSA?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 03 00 51 02 00 00  4d 03 03 52 cc 57 58 8f  |....Q...M..R.WX.|\n-00000010  4b 2e 8c 90 dd 88 33 43  44 02 90 c0 b5 ae b3 b2  |K.....3CD.......|\n-00000020  c9 2c cd c4 53 8e 7e 5c  de 08 fe 20 ee 4e 7b b1  |.,..S.~\\... .N{.|\n-00000030  7e a2 eb b0 21 e3 b2 1e  b5 18 ff b3 43 c8 a7 a3  |~...!.......C...|\n-00000040  2f ef 82 11 ae 66 be c5  64 5d 15 59 00 05 00 00  |/....f..d].Y....|\n+00000000  16 03 03 00 51 02 00 00  4d 03 03 53 04 f1 02 1d  |....Q...M..S....|\n+00000010  0e dc 86 e5 a9 07 71 46  15 34 af 47 15 3f 03 9c  |......qF.4.G.?..|\n+00000020  fc d6 fd 44 7c f4 f1 c7  8d 6f f8 20 28 ea 3c dc  |...D|....o. (.<.|\n+00000030  b2 4c b7 ba 20 88 c4 db  a5 73 ea 93 ab 3a 85 a6  |.L.. ....s...:..|\n+00000040  8f 59 49 d9 a9 31 14 d5  a6 2b 4f d1 00 05 00 00  |.YI..1...+O.....|\n 00000050  05 ff 01 00 01 00 16 03  03 02 be 0b 00 02 ba 00  |................|\n 00000060  02 b7 00 02 b4 30 82 02  b0 30 82 02 19 a0 03 02  |.....0...0......|\n 00000070  01 02 02 09 00 85 b0 bb  a4 8a 7f b8 ca 30 0d 06  |.............0..|\n@@ -103,24 +103,24 @@\n 00000260  e6 bd 77 82 6f 23 b6 e0  bd a2 92 b7 3a ac e8 56  |..w.o#......:..V|\n 00000270  f1 af 54 5e 46 87 e9 3b  33 e7 b8 28 b7 d6 c8 90  |..T^F..;3..(....|\n 00000280  35 d4 1c 43 d1 30 6f 55  4e 0a 70 16 03 03 00 88  |5..C.0oUN.p.....|\n-00000290  0f 00 00 84 04 01 00 80  0a eb 78 3e 77 c5 9c 8e  |..........x>w...|\n-000002a0  05 67 4e 06 bd ec c8 7c  b2 16 13 7d c5 5d e1 1a  |.gN....|...}.]..|\n-000002b0  4d 2e f4 b1 78 2c 94 1b  47 e4 3e 2f 7e 74 cc 03  |M...x,..G.>/~t..|\n-000002c0  1d eb e2 56 99 0e 92 27  79 e4 7e a7 12 86 88 91  |...V...'y.~.....|\n-000002d0  a4 99 db 1d 50 62 88 41  cc a6 b7 90 d0 51 66 47  |....Pb.A.....QfG|\n-000002e0  92 39 a0 2b 4c 8d 50 a6  af f4 72 2d 16 3b 6b b8  |.9.+L.P...r-.;k.|\n-000002f0  82 d2 9a d8 cd 7b b9 aa  82 a5 31 12 9e bb 19 23  |.....{....1....#|\n-00000300  15 5d ad a5 b1 65 c1 de  01 7d e3 d3 16 73 28 d6  |.]...e...}...s(.|\n-00000310  75 02 32 68 5a e0 b1 bb  14 03 03 00 01 01 16 03  |u.2hZ...........|\n-00000320  03 00 24 cd c6 25 df 1c  0b b3 a7 2a 46 99 b8 10  |..$..%.....*F...|\n-00000330  37 78 40 2a aa 66 7a 3a  34 8e 87 bf 85 4c e2 de  |7x@*.fz:4....L..|\n-00000340  36 62 4a 9e 7f e8 e8                              |6bJ....|\n+00000290  0f 00 00 84 04 01 00 80  2a 1f ae 48 9f 86 16 dc  |........*..H....|\n+000002a0  c2 55 1f 5f 95 81 ed 56  00 5d 35 46 e5 b6 57 d5  |.U._...V.]5F..W.|\n+000002b0  a6 3e 32 38 8b e2 c6 1c  b9 b1 38 b2 da 66 45 ed  |.>28......8..fE.|\n+000002c0  58 6a 7f 43 41 93 a5 09  da b9 04 ce 3f 13 8a 19  |Xj.CA.......?...|\n+000002d0  13 e9 2c 1f c5 e7 35 b4  2d ea 7c 81 90 33 c0 66  |..,...5.-.|..3.f|\n+000002e0  dc 41 8b 23 08 8f 69 d4  d6 a2 5f c1 bd 26 e6 2e  |.A.#..i..._..&..|\n+000002f0  7f c8 7c a8 2d d4 08 95  ce 6e 58 54 04 a2 a6 63  |..|.-....nXT...c|\n+00000300  54 72 67 f2 7f 61 0a 6b  58 46 d4 88 95 38 37 f2  |Trg..a.kXF...87.|\n+00000310  93 95 48 56 14 a7 b9 7c  14 03 03 00 01 01 16 03  |..HV...|........|\n+00000320  03 00 24 64 bb 41 3a cb  a2 2f 95 53 5c 2f f7 83  |..$d.A:../.S\\/..|\n+00000330  a2 35 18 f6 d0 8d 6f e2  54 ed 2f 07 10 f4 36 e2  |.5....o.T./...6.|\n+00000340  3d e5 30 1d e3 63 01                              |=.0..c.|\n >>> Flow 4 (server to client)\n-00000000  14 03 03 00 01 01 16 03  03 00 24 20 68 ec 6b 11  |..........$ h.k.|\n-00000010  e5 d6 eb c7 4f 7f e0 d0  c4 36 d4 c2 46 06 1d 92  |....O....6..F...|\n-00000020  83 b4 77 e2 58 b6 cb 06  74 0a 5c f8 c6 06 83     |..w.X...t.\\....|\n+00000000  14 03 03 00 01 01 16 03  03 00 24 0a 22 b6 bc da  |..........$.\"...|\n+00000010  34 38 53 8e 80 e2 25 7b  31 2f 70 8e 3a db e8 a3  |48S...%{1/p.:...|\n+00000020  70 0e 88 22 b4 a8 be d4  a3 e3 cc 13 94 ef 47     |p..\"..........G|\n >>> Flow 5 (client to server)\n-00000000  17 03 03 00 1a bb d6 71  f3 e0 2f c3 d6 0d 70 85  |.......q../...p.|\n-00000010  25 df 6f ba b1 37 dd 49  42 79 5c b3 c1 85 7e 15  |%.o..7.IBy\\...~.|\n-00000020  03 03 00 16 8c 93 50 30  45 38 da e2 bf c6 df d8  |......P0E8......|\n-00000030  41 e1 63 ca 28 82 d1 ae  30 76                    |A.c.(...0v|\n+00000000  17 03 03 00 1a b4 9c b1  57 ea 01 03 fe 01 e7 1e  |........W.......|\n+00000010  c4 a7 0f 25 14 99 00 4f  88 51 c1 98 6e 99 01 15  |...%...O.Q..n...|\n+00000020  03 03 00 16 2e c4 11 8b  1a fc 37 81 18 33 e4 9f  |..........7..3..|\n+00000030  48 a3 29 e3 ad 9b 9b ec  9f 99                    |H.).......|"}, {"sha": "76445903bac0ba846ae084e9b10236c710ba5616", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv12-ECDHE-ECDSA-AES", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ECDHE-ECDSA-AES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ECDHE-ECDSA-AES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ECDHE-ECDSA-AES?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 03 00 59 02 00 00  55 03 03 52 cc 57 58 4e  |....Y...U..R.WXN|\n-00000010  9d 88 aa 42 ea 19 04 55  fe e8 13 0c db 2d a9 70  |...B...U.....-.p|\n-00000020  93 85 12 08 d2 15 f6 61  25 84 b7 20 55 a3 15 3b  |.......a%.. U..;|\n-00000030  27 48 55 53 d1 23 c5 e8  f4 83 ce 44 db 2c 47 b8  |'HUS.#.....D.,G.|\n-00000040  2b 4a 3e be 29 3d 73 76  dc 79 6b 75 c0 09 00 00  |+J>.)=sv.yku....|\n+00000000  16 03 03 00 59 02 00 00  55 03 03 53 04 f1 02 a0  |....Y...U..S....|\n+00000010  5f bd a4 8d 98 93 b8 da  08 86 9f b2 be 9a a4 91  |_...............|\n+00000020  2b 3c 1f 18 f0 75 7c a9  a8 a0 f7 20 4a 89 9a d2  |+<...u|.... J...|\n+00000030  34 3b d9 b1 c2 fd 61 bd  97 19 22 ce b9 d1 5b a7  |4;....a...\"...[.|\n+00000040  83 80 9c 19 d0 f5 a0 aa  4c ac 06 20 c0 09 00 00  |........L.. ....|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  03 02 0e 0b 00 02 0a 00  02 07 00 02 04 30 82 02  |.............0..|\n 00000070  00 30 82 01 62 02 09 00  b8 bf 2d 47 a0 d2 eb f4  |.0..b.....-G....|\n@@ -47,43 +47,43 @@\n 00000240  13 83 0d 94 06 bb d4 37  7a f6 ec 7a c9 86 2e dd  |.......7z..z....|\n 00000250  d7 11 69 7f 85 7c 56 de  fb 31 78 2b e4 c7 78 0d  |..i..|V..1x+..x.|\n 00000260  ae cb be 9e 4e 36 24 31  7b 6a 0f 39 95 12 07 8f  |....N6$1{j.9....|\n-00000270  2a 16 03 03 00 d8 0c 00  00 d4 03 00 17 41 04 67  |*............A.g|\n-00000280  9e b0 72 cf 69 da 56 8c  d2 8f fb 80 64 bb d2 ec  |..r.i.V.....d...|\n-00000290  57 2d 8c 77 b7 5a b5 bc  ae bb 1f de db e7 64 5c  |W-.w.Z........d\\|\n-000002a0  36 2a 9b cb 92 a7 f1 db  93 76 8c 10 b5 74 ad b5  |6*.......v...t..|\n-000002b0  8f c5 79 18 18 e7 92 6f  22 3b 92 47 dc 60 cf 04  |..y....o\";.G.`..|\n-000002c0  03 00 8b 30 81 88 02 42  01 c9 0b bf 07 18 e3 7d  |...0...B.......}|\n-000002d0  26 b0 17 94 70 1d dc e8  6c 9e 45 4f d5 e0 79 00  |&...p...l.EO..y.|\n-000002e0  2b 03 90 bb 7a aa 23 01  43 53 a1 d8 9f 81 1f 18  |+...z.#.CS......|\n-000002f0  a2 5f 54 fa 7c c3 3a 15  d4 18 38 80 7e de f0 70  |._T.|.:...8.~..p|\n-00000300  42 5d 2a 22 74 d1 6c 75  f5 18 02 42 00 a8 0a 3c  |B]*\"t.lu...B...<|\n-00000310  44 38 fa 3f b7 fc 00 1e  80 30 0d e5 55 87 99 53  |D8.?.....0..U..S|\n-00000320  0a ab cd ad dd 1b 72 7f  49 bf 2f 89 74 72 11 3c  |......r.I./.tr.<|\n-00000330  6e 49 5e 31 3c 6c f1 bc  90 fc e9 75 95 78 7b 95  |nI^1<l.....u.x{.|\n-00000340  6a 8d 4d 51 0f e1 2f d1  9e 7b b7 c1 aa 62 16 03  |j.MQ../..{...b..|\n-00000350  03 00 04 0e 00 00 00                              |.......|\n+00000270  2a 16 03 03 00 d7 0c 00  00 d3 03 00 17 41 04 3c  |*............A.<|\n+00000280  8f 35 1e 47 5d 7b ad 13  0c e9 5c c0 97 c7 83 06  |.5.G]{....\\.....|\n+00000290  49 0f 6c cf e5 4d 3b ed  f7 1b c6 96 8d ba 54 35  |I.l..M;.......T5|\n+000002a0  7f df 35 e3 6e 28 e9 71  f2 24 b5 ab 17 2b 4b 2b  |..5.n(.q.$...+K+|\n+000002b0  0c 8f 9f 48 89 73 8f 09  69 84 af 7f ec 43 7a 04  |...H.s..i....Cz.|\n+000002c0  03 00 8a 30 81 87 02 41  79 84 43 0c 78 fa 7e e2  |...0...Ay.C.x.~.|\n+000002d0  c5 51 c1 60 88 c4 4a 59  7d 02 fa dc 19 68 33 ed  |.Q.`..JY}....h3.|\n+000002e0  19 ef a1 df ef 6b 21 a6  98 aa ba a9 13 70 91 0f  |.....k!......p..|\n+000002f0  cc 6c 5c 1e 99 53 1b 42  51 6c 06 a7 3c c4 04 22  |.l\\..S.BQl..<..\"|\n+00000300  5d 0d c1 30 ab e3 ec b4  54 02 42 01 15 15 1a 6e  |]..0....T.B....n|\n+00000310  6f f1 c6 b1 10 84 2c c8  04 de 2b 52 d5 b4 f7 c9  |o.....,...+R....|\n+00000320  4f 6d 0e 0e 26 45 1d 7a  28 59 2b 8b f6 92 3a 23  |Om..&E.z(Y+...:#|\n+00000330  7a 39 9c d5 4e cc 5d c5  45 92 9c d0 5f 33 12 e3  |z9..N.].E..._3..|\n+00000340  2b 29 39 52 bb 16 aa e1  72 9e b5 fe 99 16 03 03  |+)9R....r.......|\n+00000350  00 04 0e 00 00 00                                 |......|\n >>> Flow 3 (client to server)\n 00000000  16 03 03 00 46 10 00 00  42 41 04 1e 18 37 ef 0d  |....F...BA...7..|\n 00000010  19 51 88 35 75 71 b5 e5  54 5b 12 2e 8f 09 67 fd  |.Q.5uq..T[....g.|\n 00000020  a7 24 20 3e b2 56 1c ce  97 28 5e f8 2b 2d 4f 9e  |.$ >.V...(^.+-O.|\n 00000030  f1 07 9f 6c 4b 5b 83 56  e2 32 42 e9 58 b6 d7 49  |...lK[.V.2B.X..I|\n 00000040  a6 b5 68 1a 41 03 56 6b  dc 5a 89 14 03 03 00 01  |..h.A.Vk.Z......|\n 00000050  01 16 03 03 00 40 00 00  00 00 00 00 00 00 00 00  |.....@..........|\n-00000060  00 00 00 00 00 00 ea 9c  f3 e5 4d 7c 48 a5 48 9b  |..........M|H.H.|\n-00000070  87 43 2a 6b 74 e4 8e ca  e4 1c c9 87 46 c2 d7 ef  |.C*kt.......F...|\n-00000080  5e 8f c8 60 a9 1c 5f 68  c6 a9 7d 39 a5 8d 13 7c  |^..`.._h..}9...||\n-00000090  bd 31 6e 19 8d 95                                 |.1n...|\n+00000060  00 00 00 00 00 00 20 a3  f8 5a e2 ea f3 09 19 3e  |...... ..Z.....>|\n+00000070  4a 54 69 70 06 5b 17 35  0f ed e7 30 3b 6f eb a1  |JTip.[.5...0;o..|\n+00000080  cb 9c 35 81 10 2e 34 f7  12 a5 e4 63 20 b2 65 31  |..5...4....c .e1|\n+00000090  19 da 30 43 39 59                                 |..0C9Y|\n >>> Flow 4 (server to client)\n-00000000  14 03 03 00 01 01 16 03  03 00 40 b1 d2 81 e7 2c  |..........@....,|\n-00000010  ae 4a 72 98 91 5a 36 ae  8b 62 4b 58 55 f0 65 30  |.Jr..Z6..bKXU.e0|\n-00000020  9a 8d ca 73 13 9f 90 c0  18 fb 10 07 c9 fa 9c aa  |...s............|\n-00000030  67 2a 42 90 11 e5 38 7f  2f 35 ac d7 c7 75 cc 84  |g*B...8./5...u..|\n-00000040  a4 73 dd 9c f5 0d 3e 5d  25 76 c6                 |.s....>]%v.|\n+00000000  14 03 03 00 01 01 16 03  03 00 40 8d 4d 31 07 df  |..........@.M1..|\n+00000010  ab 41 f5 19 9c 1a 57 fc  33 ab 5f e6 bd 45 b9 fa  |.A....W.3._..E..|\n+00000020  7f db c0 df 72 f2 3b ef  aa d4 5e 34 e6 3d 44 7c  |....r.;...^4.=D||\n+00000030  12 05 c7 57 da 54 b1 e3  66 f0 0a ab cd 15 a5 bf  |...W.T..f.......|\n+00000040  c5 c2 07 a9 d9 a7 2e 5e  29 da da                 |.......^)..|\n >>> Flow 5 (client to server)\n 00000000  17 03 03 00 30 00 00 00  00 00 00 00 00 00 00 00  |....0...........|\n-00000010  00 00 00 00 00 5c f6 d4  35 91 79 5d 47 e6 7d eb  |.....\\..5.y]G.}.|\n-00000020  a4 ba d8 94 ee 89 71 60  ba 67 e6 58 79 d7 52 38  |......q`.g.Xy.R8|\n-00000030  35 07 0a 90 e4 15 03 03  00 30 00 00 00 00 00 00  |5........0......|\n-00000040  00 00 00 00 00 00 00 00  00 00 73 92 bf 53 22 d7  |..........s..S\".|\n-00000050  80 54 7a 1c 77 d9 a5 16  05 68 c7 c7 5b ce 05 41  |.Tz.w....h..[..A|\n-00000060  51 d2 a6 2b b9 ba 34 ef  93 5e                    |Q..+..4..^|\n+00000010  00 00 00 00 00 dc 03 7b  29 2c 49 64 58 2d dc f7  |.......{),IdX-..|\n+00000020  26 a1 3b ec 2d e8 30 c4  6c a3 ff e2 bc b5 a4 a6  |&.;.-.0.l.......|\n+00000030  93 ce 14 bd da 15 03 03  00 30 00 00 00 00 00 00  |.........0......|\n+00000040  00 00 00 00 00 00 00 00  00 00 a6 77 10 30 15 eb  |...........w.0..|\n+00000050  ed cf 73 5b 74 5d 09 52  4a 5b e2 f0 e4 67 f8 7a  |..s[t].RJ[...g.z|\n+00000060  5e 5e fc ba 7f 80 0a d2  f4 fb                    |^^........|"}, {"sha": "fb5af17f0c4392762de38a5633dc8ff98d29b6c2", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv12-ECDHE-ECDSA-AES-GCM", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ECDHE-ECDSA-AES-GCM", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ECDHE-ECDSA-AES-GCM", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ECDHE-ECDSA-AES-GCM?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 03 00 59 02 00 00  55 03 03 52 cc 57 58 95  |....Y...U..R.WX.|\n-00000010  a0 c0 f9 1d 34 16 31 f5  a5 08 dd 3d 6a 4c c9 96  |....4.1....=jL..|\n-00000020  aa 8b 7f f3 1e 0c 59 4c  06 c1 2b 20 22 f5 fb 09  |......YL..+ \"...|\n-00000030  f2 7a c3 22 85 2f 16 b6  81 2d 2b d6 12 c2 4d 84  |.z.\"./...-+...M.|\n-00000040  7e a9 3f 18 f2 1c f7 44  6c 66 3f 7f c0 2b 00 00  |~.?....Dlf?..+..|\n+00000000  16 03 03 00 59 02 00 00  55 03 03 53 04 f1 02 48  |....Y...U..S...H|\n+00000010  03 36 01 05 56 6f f0 54  d2 c3 d3 41 c2 e2 69 7b  |.6..Vo.T...A..i{|\n+00000020  50 f8 03 ef 3f 5d 7c e6  9c cb fe 20 82 a0 81 fd  |P...?]|.... ....|\n+00000030  72 4b b8 e6 29 76 3b 0f  1d 0a b7 82 9d 0b cf a0  |rK..)v;.........|\n+00000040  65 b1 56 53 c9 d5 58 7b  f0 b6 2d cf c0 2b 00 00  |e.VS..X{..-..+..|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  03 02 0e 0b 00 02 0a 00  02 07 00 02 04 30 82 02  |.............0..|\n 00000070  00 30 82 01 62 02 09 00  b8 bf 2d 47 a0 d2 eb f4  |.0..b.....-G....|\n@@ -47,38 +47,38 @@\n 00000240  13 83 0d 94 06 bb d4 37  7a f6 ec 7a c9 86 2e dd  |.......7z..z....|\n 00000250  d7 11 69 7f 85 7c 56 de  fb 31 78 2b e4 c7 78 0d  |..i..|V..1x+..x.|\n 00000260  ae cb be 9e 4e 36 24 31  7b 6a 0f 39 95 12 07 8f  |....N6$1{j.9....|\n-00000270  2a 16 03 03 00 d8 0c 00  00 d4 03 00 17 41 04 dd  |*............A..|\n-00000280  b5 88 3a be 12 a5 fe 0e  19 f5 76 4f 71 90 93 ca  |..:.......vOq...|\n-00000290  0e b3 62 a2 b0 c0 f2 78  95 90 cb 10 f9 e8 c8 8e  |..b....x........|\n-000002a0  a6 5e 48 ae 8e 96 3d 60  3f 0a b0 73 e8 ea 42 42  |.^H...=`?..s..BB|\n-000002b0  6e 19 fe e3 ab 30 ff 01  cc ae c1 90 3a 10 85 04  |n....0......:...|\n-000002c0  03 00 8b 30 81 88 02 42  01 6e b2 79 a1 c1 45 7d  |...0...B.n.y..E}|\n-000002d0  a3 44 45 75 e0 05 b6 68  ee e3 bb 80 2d 88 23 0c  |.DEu...h....-.#.|\n-000002e0  40 ad 68 95 59 0f 49 5b  e5 67 2a 5a 9b 29 32 38  |@.h.Y.I[.g*Z.)28|\n-000002f0  13 a0 f1 6c 11 3f 23 b9  1b 4b 0c 1f 2d 61 5e b3  |...l.?#..K..-a^.|\n-00000300  de 14 b7 b8 a6 fb 7b 23  1f f3 02 42 01 30 39 22  |......{#...B.09\"|\n-00000310  01 6f d7 a2 83 2a fd 8a  6f f0 c2 d6 1b 0f b4 17  |.o...*..o.......|\n-00000320  d3 50 f7 de 59 20 6a 5c  a1 93 65 ed aa fa 8f 6f  |.P..Y j\\..e....o|\n-00000330  75 3a b6 ab 33 b6 68 26  0b 8f d5 b2 ca eb 86 27  |u:..3.h&.......'|\n-00000340  27 72 68 ed ee 42 37 1a  ff 8a 68 c3 32 91 16 03  |'rh..B7...h.2...|\n-00000350  03 00 04 0e 00 00 00                              |.......|\n+00000270  2a 16 03 03 00 d7 0c 00  00 d3 03 00 17 41 04 86  |*............A..|\n+00000280  36 b4 78 76 87 70 ed ae  0d 34 70 3d 16 e5 a4 db  |6.xv.p...4p=....|\n+00000290  ae 28 58 4c 01 5a 56 73  a7 0d 34 59 a7 04 75 69  |.(XL.ZVs..4Y..ui|\n+000002a0  f2 55 24 40 b0 33 c6 93  ff ae e0 14 f5 4b ce a8  |.U$@.3.......K..|\n+000002b0  e2 e6 9a 67 1d 66 fb 8f  fd 56 59 e7 73 f2 2c 04  |...g.f...VY.s.,.|\n+000002c0  03 00 8a 30 81 87 02 41  73 ab a8 3c 64 17 69 9f  |...0...As..<d.i.|\n+000002d0  4d b2 9b 55 12 60 33 94  cf f3 83 40 2b 7b 1b af  |M..U.`3....@+{..|\n+000002e0  5c f4 cd 02 66 fb 83 04  35 fd ab 74 98 1a 7d f6  |\\...f...5..t..}.|\n+000002f0  9e 50 98 c3 98 e8 56 9c  f2 2a b0 30 9d 05 14 58  |.P....V..*.0...X|\n+00000300  68 6a 88 04 49 07 78 bf  3a 02 42 01 be b2 05 9e  |hj..I.x.:.B.....|\n+00000310  67 da 1e e9 5a 36 98 52  21 9f 43 75 43 ba bb 9a  |g...Z6.R!.CuC...|\n+00000320  e6 e2 65 f4 e0 44 45 08  5a 1e 54 06 dd 5f 60 2e  |..e..DE.Z.T.._`.|\n+00000330  7d e7 55 08 d3 7b 4e 0a  c7 da d4 27 34 d4 bd b0  |}.U..{N....'4...|\n+00000340  12 2f 41 7a ed 71 32 ef  ee 12 74 66 00 16 03 03  |./Az.q2...tf....|\n+00000350  00 04 0e 00 00 00                                 |......|\n >>> Flow 3 (client to server)\n 00000000  16 03 03 00 46 10 00 00  42 41 04 1e 18 37 ef 0d  |....F...BA...7..|\n 00000010  19 51 88 35 75 71 b5 e5  54 5b 12 2e 8f 09 67 fd  |.Q.5uq..T[....g.|\n 00000020  a7 24 20 3e b2 56 1c ce  97 28 5e f8 2b 2d 4f 9e  |.$ >.V...(^.+-O.|\n 00000030  f1 07 9f 6c 4b 5b 83 56  e2 32 42 e9 58 b6 d7 49  |...lK[.V.2B.X..I|\n 00000040  a6 b5 68 1a 41 03 56 6b  dc 5a 89 14 03 03 00 01  |..h.A.Vk.Z......|\n-00000050  01 16 03 03 00 28 00 00  00 00 00 00 00 00 8c c6  |.....(..........|\n-00000060  b4 4f c9 4b f0 81 05 aa  aa 88 79 b0 76 fb 56 8a  |.O.K......y.v.V.|\n-00000070  d3 8f 14 ff e2 9b a3 f6  92 77 aa cf f3 4e        |.........w...N|\n+00000050  01 16 03 03 00 28 00 00  00 00 00 00 00 00 87 7a  |.....(.........z|\n+00000060  82 d7 46 25 1d a6 bb c2  a8 a8 4e a5 d1 f8 02 db  |..F%......N.....|\n+00000070  33 33 ca 78 b6 d3 bd 77  8a 33 23 a7 95 fb        |33.x...w.3#...|\n >>> Flow 4 (server to client)\n-00000000  14 03 03 00 01 01 16 03  03 00 28 ca a5 27 78 fb  |..........(..'x.|\n-00000010  e9 66 83 4d 71 62 d4 37  2f 01 5c 8b 67 52 98 5d  |.f.Mqb.7/.\\.gR.]|\n-00000020  0d a0 94 53 c1 b5 25 00  e2 42 ab 37 67 2e 12 eb  |...S..%..B.7g...|\n-00000030  35 a3 9a                                          |5..|\n+00000000  14 03 03 00 01 01 16 03  03 00 28 ce a1 9d 01 c0  |..........(.....|\n+00000010  31 e5 d5 57 16 e1 a6 b3  8b 25 58 0f fa 2a de 3e  |1..W.....%X..*.>|\n+00000020  0c d9 06 11 a6 b0 d7 b0  33 ad 31 73 5b 26 b4 d2  |........3.1s[&..|\n+00000030  12 56 c8                                          |.V.|\n >>> Flow 5 (client to server)\n-00000000  17 03 03 00 1e 00 00 00  00 00 00 00 01 e0 be 1e  |................|\n-00000010  a7 0f 73 a6 25 ca 9e d3  0a ad 6b e7 e9 db 21 a1  |..s.%.....k...!.|\n-00000020  70 5f c1 15 03 03 00 1a  00 00 00 00 00 00 00 02  |p_..............|\n-00000030  c3 af f9 8c 63 94 cb e4  99 6d b7 32 80 22 f7 1f  |....c....m.2.\"..|\n-00000040  02 87                                             |..|\n+00000000  17 03 03 00 1e 00 00 00  00 00 00 00 01 d5 04 4c  |...............L|\n+00000010  7b 35 b4 d7 90 ae fe 00  d2 f2 4b 76 f1 36 5e 24  |{5........Kv.6^$|\n+00000020  4a aa 94 15 03 03 00 1a  00 00 00 00 00 00 00 02  |J...............|\n+00000030  d3 1c 41 37 ab f6 17 79  f0 01 a4 19 a5 75 7a 8e  |..A7...y.....uz.|\n+00000040  a3 b2                                             |..|"}, {"sha": "5336bbbad8f862751dbe474994181c3aef82a2ec", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv12-ECDHE-RSA-AES", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ECDHE-RSA-AES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ECDHE-RSA-AES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-ECDHE-RSA-AES?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 03 00 59 02 00 00  55 03 03 52 cc 57 58 64  |....Y...U..R.WXd|\n-00000010  28 c0 0d 0a be 3a aa 96  4e 92 8d 9d f2 19 ab de  |(....:..N.......|\n-00000020  b2 05 3a 61 13 78 60 7e  96 24 b2 20 a3 06 80 14  |..:a.x`~.$. ....|\n-00000030  15 52 89 1b d4 84 94 8b  ed 66 8d 75 63 8f dc 5a  |.R.......f.uc..Z|\n-00000040  a8 20 14 65 5d ce 7e 2f  4b 3e 1e 09 c0 13 00 00  |. .e].~/K>......|\n+00000000  16 03 03 00 59 02 00 00  55 03 03 53 04 f1 02 41  |....Y...U..S...A|\n+00000010  95 cc 56 30 65 46 24 75  d5 9e 3c a7 5b 6c 99 fe  |..V0eF$u..<.[l..|\n+00000020  86 35 23 42 3a 8f 4d 4c  b9 98 7d 20 a7 46 43 72  |.5#B:.ML..} .FCr|\n+00000030  66 bb b6 ad ff ad cf 63  37 fe 6b b4 78 94 08 49  |f......c7.k.x..I|\n+00000040  54 06 ed f4 85 73 38 4a  c6 fe b6 98 c0 13 00 00  |T....s8J........|\n 00000050  0d ff 01 00 01 00 00 0b  00 04 03 00 01 02 16 03  |................|\n 00000060  03 02 be 0b 00 02 ba 00  02 b7 00 02 b4 30 82 02  |.............0..|\n 00000070  b0 30 82 02 19 a0 03 02  01 02 02 09 00 85 b0 bb  |.0..............|\n@@ -58,42 +58,42 @@\n 000002f0  5f 33 c4 b6 d8 c9 75 90  96 8c 0f 52 98 b5 cd 98  |_3....u....R....|\n 00000300  1f 89 20 5f f2 a0 1c a3  1b 96 94 dd a9 fd 57 e9  |.. _..........W.|\n 00000310  70 e8 26 6d 71 99 9b 26  6e 38 50 29 6c 90 a7 bd  |p.&mq..&n8P)l...|\n-00000320  d9 16 03 03 00 cd 0c 00  00 c9 03 00 17 41 04 33  |.............A.3|\n-00000330  96 55 c1 5e 9d c4 a1 23  86 5b e8 df f9 7d d4 d0  |.U.^...#.[...}..|\n-00000340  5f 61 9a c6 24 be a6 4b  ce 08 6e 9f 8f ef 08 66  |_a..$..K..n....f|\n-00000350  9f a5 2e e7 04 c9 f2 d9  ab ef fa 62 28 a0 01 7a  |...........b(..z|\n-00000360  d9 d6 44 9b c3 25 dc 5e  a9 75 ea 8d 2f e8 63 04  |..D..%.^.u../.c.|\n-00000370  01 00 80 ba b3 36 74 0f  2c 3a c2 a3 2c ae 74 dc  |.....6t.,:..,.t.|\n-00000380  f8 90 ba 91 10 a3 c1 8e  2b bf 2c b4 05 78 12 ff  |........+.,..x..|\n-00000390  ec 62 b3 db f2 27 3d d0  0f bb 7d 1e f6 8f fd ee  |.b...'=...}.....|\n-000003a0  53 37 be 6a 9e d9 21 42  ea 20 1e d8 fc eb 3c 79  |S7.j..!B. ....<y|\n-000003b0  98 85 ab fe 9b 2d 63 77  cb 13 32 32 81 94 3e 53  |.....-cw..22..>S|\n-000003c0  4f a7 63 c4 78 2d a2 48  08 ea f6 2a 50 24 33 f4  |O.c.x-.H...*P$3.|\n-000003d0  9f 10 63 13 80 4e ec 5e  68 e3 18 f0 7b a4 2f 16  |..c..N.^h...{./.|\n-000003e0  db c0 aa 8c a0 ee 47 65  a9 57 f3 a5 ef 6a 45 f5  |......Ge.W...jE.|\n-000003f0  e2 54 cd 16 03 03 00 04  0e 00 00 00              |.T..........|\n+00000320  d9 16 03 03 00 cd 0c 00  00 c9 03 00 17 41 04 48  |.............A.H|\n+00000330  68 d8 8a 10 b4 bf eb 8d  d1 98 b0 a6 f4 47 5d 91  |h............G].|\n+00000340  61 da 50 d9 85 7b 5d 90  02 2c 38 c9 af 81 d3 55  |a.P..{]..,8....U|\n+00000350  07 62 b1 62 58 7f 39 94  d7 91 96 a8 1f 47 60 a5  |.b.bX.9......G`.|\n+00000360  c0 04 f2 fb cb 15 75 a6  16 3f 94 53 7c ff dd 04  |......u..?.S|...|\n+00000370  01 00 80 b9 82 fa 0b f8  8c 94 2c 6e 05 81 7d 80  |..........,n..}.|\n+00000380  5d 9a 77 78 af c8 33 5d  89 7e 2e 3c e5 72 66 a8  |].wx..3].~.<.rf.|\n+00000390  f1 5c 02 04 02 70 76 7b  45 ff 0d 29 a0 cb 0d db  |.\\...pv{E..)....|\n+000003a0  7a 4c c4 13 19 cd 47 b2  f1 c9 43 4f 95 d2 f1 c6  |zL....G...CO....|\n+000003b0  bc ae 31 4a 9d de 80 b2  a4 b7 b6 dd 8c 03 3e 2a  |..1J..........>*|\n+000003c0  46 5e d1 e7 5b c5 9e 06  58 f3 55 b2 77 09 f3 98  |F^..[...X.U.w...|\n+000003d0  d5 7f 5a 74 64 7e 48 22  8f 7d a8 68 b6 1d 90 df  |..Ztd~H\".}.h....|\n+000003e0  2c 91 d7 c5 07 3d d1 6f  e9 c1 91 03 3c 23 5a 56  |,....=.o....<#ZV|\n+000003f0  3b b2 c2 16 03 03 00 04  0e 00 00 00              |;...........|\n >>> Flow 3 (client to server)\n 00000000  16 03 03 00 46 10 00 00  42 41 04 1e 18 37 ef 0d  |....F...BA...7..|\n 00000010  19 51 88 35 75 71 b5 e5  54 5b 12 2e 8f 09 67 fd  |.Q.5uq..T[....g.|\n 00000020  a7 24 20 3e b2 56 1c ce  97 28 5e f8 2b 2d 4f 9e  |.$ >.V...(^.+-O.|\n 00000030  f1 07 9f 6c 4b 5b 83 56  e2 32 42 e9 58 b6 d7 49  |...lK[.V.2B.X..I|\n 00000040  a6 b5 68 1a 41 03 56 6b  dc 5a 89 14 03 03 00 01  |..h.A.Vk.Z......|\n 00000050  01 16 03 03 00 40 00 00  00 00 00 00 00 00 00 00  |.....@..........|\n-00000060  00 00 00 00 00 00 73 06  31 ab 8e cc e0 db 1a fe  |......s.1.......|\n-00000070  7e d1 5b 2b 96 93 ee 2d  76 54 17 f9 c2 73 e8 62  |~.[+...-vT...s.b|\n-00000080  f0 39 31 02 72 e9 ae 08  75 2d f1 f3 82 06 17 57  |.91.r...u-.....W|\n-00000090  b7 aa c2 79 9f 8e                                 |...y..|\n+00000060  00 00 00 00 00 00 59 e6  92 05 27 ec 09 2c b0 a5  |......Y...'..,..|\n+00000070  2a fb 7e f1 03 53 16 63  68 a1 86 13 bb da 98 27  |*.~..S.ch......'|\n+00000080  6d 42 08 35 6a ec 58 61  2a 4d 44 ec ae c5 b9 d2  |mB.5j.Xa*MD.....|\n+00000090  76 57 1f 75 9f 8d                                 |vW.u..|\n >>> Flow 4 (server to client)\n-00000000  14 03 03 00 01 01 16 03  03 00 40 dc c3 03 17 76  |..........@....v|\n-00000010  d0 a5 61 9e 47 6a 1a 01  d0 21 92 c5 d5 f9 69 ba  |..a.Gj...!....i.|\n-00000020  5e 82 2e d3 fc 4b a4 af  78 9d 47 6e b8 33 dc 8b  |^....K..x.Gn.3..|\n-00000030  a0 94 b5 72 ea 4a 7d fc  ea f5 6e b6 c9 00 73 d1  |...r.J}...n...s.|\n-00000040  3e cb 44 ef 0c fc fc ff  1e 87 8e                 |>.D........|\n+00000000  14 03 03 00 01 01 16 03  03 00 40 6e 03 d0 e6 98  |..........@n....|\n+00000010  1f f5 39 7b 06 9f 95 f0  7a 88 35 7c 55 db c3 2f  |..9{....z.5|U../|\n+00000020  00 ef 5b d3 62 87 a2 94  da 2f f6 4a 89 c9 a8 3d  |..[.b..../.J...=|\n+00000030  3a 92 db 77 35 92 01 4b  f5 c5 6b 95 09 9f cd 79  |:..w5..K..k....y|\n+00000040  3c af 37 5b 27 bf 93 3e  04 55 71                 |<.7['..>.Uq|\n >>> Flow 5 (client to server)\n 00000000  17 03 03 00 30 00 00 00  00 00 00 00 00 00 00 00  |....0...........|\n-00000010  00 00 00 00 00 de 2e e3  8e d3 a5 e5 64 8e 22 f7  |............d.\".|\n-00000020  09 00 15 06 cb e9 d3 c5  3c 17 41 2f 5b a8 ce 09  |........<.A/[...|\n-00000030  70 59 47 24 22 15 03 03  00 30 00 00 00 00 00 00  |pYG$\"....0......|\n-00000040  00 00 00 00 00 00 00 00  00 00 6a af 3f c1 54 6b  |..........j.?.Tk|\n-00000050  14 64 23 c4 94 79 82 fd  78 84 ef 04 6f 64 fd 3e  |.d#..y..x...od.>|\n-00000060  20 ff a0 11 ed fb d1 fb  ff 07                    | .........|\n+00000010  00 00 00 00 00 bc c9 d0  8e 80 14 de 32 18 49 e8  |............2.I.|\n+00000020  20 dc 5e 6c e4 6d 14 00  df 51 71 fb 86 95 16 4c  | .^l.m...Qq....L|\n+00000030  04 8e 71 e1 48 15 03 03  00 30 00 00 00 00 00 00  |..q.H....0......|\n+00000040  00 00 00 00 00 00 00 00  00 00 b7 6d 30 72 61 53  |...........m0raS|\n+00000050  d8 0a d4 1d ae e5 d4 22  46 c9 d5 4e 4a 86 f5 ac  |.......\"F..NJ...|\n+00000060  72 98 c6 db 38 29 97 2c  84 0b                    |r...8).,..|"}, {"sha": "0377f052ae60c0de239dd0b82c32a635e2bb4381", "filename": "libgo/go/crypto/tls/testdata/Client-TLSv12-RSA-RC4", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-RSA-RC4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-RSA-RC4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FClient-TLSv12-RSA-RC4?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,11 @@\n 00000060  19 00 0b 00 02 01 00 00  0d 00 0a 00 08 04 01 04  |................|\n 00000070  03 02 01 02 03 ff 01 00  01 00                    |..........|\n >>> Flow 2 (server to client)\n-00000000  16 03 03 00 51 02 00 00  4d 03 03 52 cc 57 58 70  |....Q...M..R.WXp|\n-00000010  03 50 58 32 ec de bc ae  18 e7 24 15 2b 4d cc d5  |.PX2......$.+M..|\n-00000020  1f 40 db 80 5b 19 d9 3f  48 4b 06 20 87 fe d3 d4  |.@..[..?HK. ....|\n-00000030  51 42 74 9c cf 9d fd 31  c3 53 28 f1 a4 21 16 d6  |QBt....1.S(..!..|\n-00000040  4f 5a 22 09 9d 99 89 7c  f9 e7 5b 49 00 05 00 00  |OZ\"....|..[I....|\n+00000000  16 03 03 00 51 02 00 00  4d 03 03 53 04 f1 02 9d  |....Q...M..S....|\n+00000010  2e 4e d9 17 4a 35 fa 9d  94 f6 45 0a f6 6b 5d 1c  |.N..J5....E..k].|\n+00000020  1e 15 19 8d 6d 94 cc 90  d9 39 94 20 8b 4b de 76  |....m....9. .K.v|\n+00000030  d5 64 5d b7 19 df e7 eb  7e a0 22 c4 09 38 a0 12  |.d].....~.\"..8..|\n+00000040  d5 59 10 c8 31 06 dc fc  e4 9d d1 80 00 05 00 00  |.Y..1...........|\n 00000050  05 ff 01 00 01 00 16 03  03 02 be 0b 00 02 ba 00  |................|\n 00000060  02 b7 00 02 b4 30 82 02  b0 30 82 02 19 a0 03 02  |.....0...0......|\n 00000070  01 02 02 09 00 85 b0 bb  a4 8a 7f b8 ca 30 0d 06  |.............0..|\n@@ -69,15 +69,15 @@\n 00000060  e6 bd 77 82 6f 23 b6 e0  bd a2 92 b7 3a ac e8 56  |..w.o#......:..V|\n 00000070  f1 af 54 5e 46 87 e9 3b  33 e7 b8 28 b7 d6 c8 90  |..T^F..;3..(....|\n 00000080  35 d4 1c 43 d1 30 6f 55  4e 0a 70 14 03 03 00 01  |5..C.0oUN.p.....|\n-00000090  01 16 03 03 00 24 fb 2b  2f c5 19 90 a6 bc 81 c0  |.....$.+/.......|\n-000000a0  ac 6b e6 1f e2 af be 10  b4 a0 c7 31 aa d8 cc a2  |.k.........1....|\n-000000b0  ce 51 1e 8e d6 00 76 27  72 53                    |.Q....v'rS|\n+00000090  01 16 03 03 00 24 37 14  b2 97 7b b5 f0 9a 38 05  |.....$7...{...8.|\n+000000a0  22 35 69 9c 95 2f 86 4b  37 98 22 db 4e 9a 46 9c  |\"5i../.K7.\".N.F.|\n+000000b0  b9 81 74 72 58 18 53 0c  5c 3c                    |..trX.S.\\<|\n >>> Flow 4 (server to client)\n-00000000  14 03 03 00 01 01 16 03  03 00 24 d4 c8 b3 8a 87  |..........$.....|\n-00000010  b5 0d 01 80 fc 2c df 18  ca 17 fd 06 ad 31 29 13  |.....,.......1).|\n-00000020  5f f9 b4 75 ad 49 c8 de  ec 1a ee 57 6b 1a 81     |_..u.I.....Wk..|\n+00000000  14 03 03 00 01 01 16 03  03 00 24 3c b3 e7 77 5a  |..........$<..wZ|\n+00000010  7c 36 5a 74 74 26 8d 5b  5a 09 96 60 e8 24 45 2f  ||6Ztt&.[Z..`.$E/|\n+00000020  c2 39 14 5e db 58 12 49  ad a8 b6 ea ef 58 16     |.9.^.X.I.....X.|\n >>> Flow 5 (client to server)\n-00000000  17 03 03 00 1a 8b ce be  7d c7 06 42 d0 9b 65 6c  |........}..B..el|\n-00000010  23 0e 84 ef e0 a3 ec 42  4e 70 14 65 78 ad 52 15  |#......BNp.ex.R.|\n-00000020  03 03 00 16 49 5f f2 e2  e0 8f d3 54 68 2a d6 ab  |....I_.....Th*..|\n-00000030  28 be 50 3d 62 8b 1a b3  5b e5                    |(.P=b...[.|\n+00000000  17 03 03 00 1a 6d 29 d7  ba 2f 85 02 b6 f0 82 64  |.....m)../.....d|\n+00000010  6c 55 ae ab f6 fd 14 ff  b8 38 f0 f8 a6 ea cc 15  |lU.......8......|\n+00000020  03 03 00 16 10 c5 d9 41  7b e2 89 67 dc 29 8e f8  |.......A{..g.)..|\n+00000030  b5 ab 32 91 44 2c 27 84  49 f7                    |..2.D,'.I.|"}, {"sha": "9b8cb4d9b62912047640a95afa52dade7405e9c6", "filename": "libgo/go/crypto/tls/testdata/Server-TLSv10-ECDHE-ECDSA-AES", "status": "modified", "additions": 39, "deletions": 48, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv10-ECDHE-ECDSA-AES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv10-ECDHE-ECDSA-AES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv10-ECDHE-ECDSA-AES?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -1,7 +1,7 @@\n >>> Flow 1 (client to server)\n-00000000  16 03 01 00 76 01 00 00  72 03 01 52 cc 57 59 19  |....v...r..R.WY.|\n-00000010  3d b7 7c 4b 54 8d ca 3a  b1 4c 4e a9 78 86 d9 74  |=.|KT..:.LN.x..t|\n-00000020  87 2f f3 86 bf ac cc f4  11 75 b7 00 00 04 c0 0a  |./.......u......|\n+00000000  16 03 01 00 76 01 00 00  72 03 01 53 04 f0 f9 4b  |....v...r..S...K|\n+00000010  30 a8 68 d0 79 13 14 69  ee 3b 5d 05 cb 71 63 43  |0.h.y..i.;]..qcC|\n+00000020  4a 55 6b 05 25 53 19 ba  e0 2f b1 00 00 04 c0 0a  |JUk.%S.../......|\n 00000030  00 ff 01 00 00 45 00 0b  00 04 03 00 01 02 00 0a  |.....E..........|\n 00000040  00 34 00 32 00 0e 00 0d  00 19 00 0b 00 0c 00 18  |.4.2............|\n 00000050  00 09 00 0a 00 16 00 17  00 08 00 06 00 07 00 14  |................|\n@@ -44,50 +44,41 @@\n 00000210  0e bd 3f a3 8c 25 c1 33  13 83 0d 94 06 bb d4 37  |..?..%.3.......7|\n 00000220  7a f6 ec 7a c9 86 2e dd  d7 11 69 7f 85 7c 56 de  |z..z......i..|V.|\n 00000230  fb 31 78 2b e4 c7 78 0d  ae cb be 9e 4e 36 24 31  |.1x+..x.....N6$1|\n-00000240  7b 6a 0f 39 95 12 07 8f  2a 16 03 01 01 1a 0c 00  |{j.9....*.......|\n-00000250  01 16 03 00 19 85 04 01  39 dc ee 44 17 5e db d7  |........9..D.^..|\n-00000260  27 af b6 56 d9 b4 43 5a  99 cf aa 31 37 0c 6f 3a  |'..V..CZ...17.o:|\n-00000270  a0 f8 53 c4 74 d1 91 0a  46 f5 38 3b 5c 09 d8 97  |..S.t...F.8;\\...|\n-00000280  dc 4b aa 70 26 48 f2 d6  0b 31 c9 f8 d4 98 43 e1  |.K.p&H...1....C.|\n-00000290  6c d5 c7 b2 8e 0b 01 e6  b6 00 28 80 7b fc 96 8f  |l.........(.{...|\n-000002a0  0d a2 4f b0 79 af dc 61  28 63 33 78 f6 31 39 fd  |..O.y..a(c3x.19.|\n-000002b0  8a f4 15 18 11 fe db d5  07 da 2c ed 49 a0 23 bf  |..........,.I.#.|\n-000002c0  d0 3a 38 1d 54 ae 1c 7b  ea 29 ee d0 38 c1 76 a7  |.:8.T..{.)..8.v.|\n-000002d0  7f 2a f4 ce 1e ac cc 94  79 90 33 00 8b 30 81 88  |.*......y.3..0..|\n-000002e0  02 42 00 c6 85 8e 06 b7  04 04 e9 cd 9e 3e cb 66  |.B...........>.f|\n-000002f0  23 95 b4 42 9c 64 81 39  05 3f b5 21 f8 28 af 60  |#..B.d.9.?.!.(.`|\n-00000300  6b 4d 3d ba a1 4b 5e 77  ef e7 59 28 fe 1d c1 27  |kM=..K^w..Y(...'|\n-00000310  a2 ff a8 de 33 48 b3 c1  85 6a 42 9b f9 7e 7e 31  |....3H...jB..~~1|\n-00000320  c2 e5 bd 66 02 42 00 ad  7d 06 35 ab ec 8d ac d4  |...f.B..}.5.....|\n-00000330  ba 1b 49 5e 05 5f f0 97  93 82 b8 2b 8d 91 98 63  |..I^._.....+...c|\n-00000340  8e b4 14 62 db 1e c9 2b  30 f8 41 9b a6 e6 bc de  |...b...+0.A.....|\n-00000350  0e 68 30 21 e4 33 62 b4  3c 00 12 33 3c d2 bb 9e  |.h0!.3b.<..3<...|\n-00000360  a9 db ef 22 41 ed 2b 1a  16 03 01 00 04 0e 00 00  |...\"A.+.........|\n-00000370  00                                                |.|\n+00000240  7b 6a 0f 39 95 12 07 8f  2a 16 03 01 00 d6 0c 00  |{j.9....*.......|\n+00000250  00 d2 03 00 17 41 04 1e  18 37 ef 0d 19 51 88 35  |.....A...7...Q.5|\n+00000260  75 71 b5 e5 54 5b 12 2e  8f 09 67 fd a7 24 20 3e  |uq..T[....g..$ >|\n+00000270  b2 56 1c ce 97 28 5e f8  2b 2d 4f 9e f1 07 9f 6c  |.V...(^.+-O....l|\n+00000280  4b 5b 83 56 e2 32 42 e9  58 b6 d7 49 a6 b5 68 1a  |K[.V.2B.X..I..h.|\n+00000290  41 03 56 6b dc 5a 89 00  8b 30 81 88 02 42 00 c6  |A.Vk.Z...0...B..|\n+000002a0  85 8e 06 b7 04 04 e9 cd  9e 3e cb 66 23 95 b4 42  |.........>.f#..B|\n+000002b0  9c 64 81 39 05 3f b5 21  f8 28 af 60 6b 4d 3d ba  |.d.9.?.!.(.`kM=.|\n+000002c0  a1 4b 5e 77 ef e7 59 28  fe 1d c1 27 a2 ff a8 de  |.K^w..Y(...'....|\n+000002d0  33 48 b3 c1 85 6a 42 9b  f9 7e 7e 31 c2 e5 bd 66  |3H...jB..~~1...f|\n+000002e0  02 42 00 ad 7d 06 35 ab  ec 8d ac d4 ba 1b 49 5e  |.B..}.5.......I^|\n+000002f0  05 5f f0 97 93 82 b8 2b  8d 91 98 63 8e b4 14 62  |._.....+...c...b|\n+00000300  db 1e c9 2b 30 f8 41 9b  a6 e6 bc de 0e 68 30 21  |...+0.A......h0!|\n+00000310  d8 ef 2f 05 42 da f2 e0  2c 06 33 1d 0d 9a 1a 75  |../.B...,.3....u|\n+00000320  59 a7 3a bc 16 03 01 00  04 0e 00 00 00           |Y.:..........|\n >>> Flow 3 (client to server)\n-00000000  16 03 01 00 8a 10 00 00  86 85 04 00 be 44 15 9d  |.............D..|\n-00000010  89 bc 13 e7 55 cf 7a f9  b1 dc 2b 22 f2 7b a6 33  |....U.z...+\".{.3|\n-00000020  b6 46 de 7d c2 08 a6 67  15 7d 3e c2 02 d4 30 dc  |.F.}...g.}>...0.|\n-00000030  35 37 7e ee fb 12 8c 74  c0 bf ea db 72 06 cd 52  |57~....t....r..R|\n-00000040  1a e9 36 2e c5 5d 22 9e  56 e5 8d 9f a5 01 e2 e6  |..6..]\".V.......|\n-00000050  f5 77 64 05 80 c0 e3 54  9a 89 76 f9 73 64 7d 0e  |.wd....T..v.sd}.|\n-00000060  bf d7 b3 57 a2 6c 4a 34  80 53 96 90 61 56 34 ad  |...W.lJ4.S..aV4.|\n-00000070  75 44 54 79 dd 71 16 fe  4f 27 4f d0 0c d0 1e b6  |uDTy.q..O'O.....|\n-00000080  82 c4 b2 e9 a1 87 fd a7  2a 6a 5d 79 b8 f1 4e 14  |........*j]y..N.|\n-00000090  03 01 00 01 01 16 03 01  00 30 db c5 5f 9b 03 77  |.........0.._..w|\n-000000a0  c9 aa 5e 74 fd 0c f7 28  fe 40 8b 0e 2d 85 1e 25  |..^t...(.@..-..%|\n-000000b0  96 23 79 48 2c 3f 5d 9b  57 f0 34 8d 87 81 13 d9  |.#yH,?].W.4.....|\n-000000c0  ed 72 f6 51 bf d7 6e 8b  61 3d                    |.r.Q..n.a=|\n+00000000  16 03 01 00 46 10 00 00  42 41 04 08 28 cf bd 3c  |....F...BA..(..<|\n+00000010  3c cc 98 9e 73 3f 92 a7  cb 22 83 3b c7 61 46 0e  |<...s?...\".;.aF.|\n+00000020  4d 7c 30 b5 06 85 2f 01  be b5 40 e2 64 1e 45 c1  |M|0.../...@.d.E.|\n+00000030  9d 73 95 d5 65 92 0b 9b  e7 6f c6 91 ab b6 fa be  |.s..e....o......|\n+00000040  61 83 a7 f2 eb f5 65 31  fe 24 7b 14 03 01 00 01  |a.....e1.${.....|\n+00000050  01 16 03 01 00 30 15 d1  c4 ca 0b 01 84 13 5a ba  |.....0........Z.|\n+00000060  89 04 87 73 7c bb d8 89  7e 10 27 ba 6f 5d dc d3  |...s|...~.'.o]..|\n+00000070  b5 ef 32 86 58 cc fb eb  5c 32 9e 95 ef 01 1c ac  |..2.X...\\2......|\n+00000080  dc 8e df 7f fe 0a                                 |......|\n >>> Flow 4 (server to client)\n-00000000  14 03 01 00 01 01 16 03  01 00 30 95 b6 20 60 88  |..........0.. `.|\n-00000010  5f 23 11 06 83 f5 20 2d  42 77 36 c2 84 1b 70 90  |_#.... -Bw6...p.|\n-00000020  12 af d3 5e fa b0 59 6b  1e 91 0a c3 e0 37 40 94  |...^..Yk.....7@.|\n-00000030  07 c0 2b 84 74 41 fa fd  7c 41 59 17 03 01 00 20  |..+.tA..|AY.... |\n-00000040  de a7 ea 4e f8 88 22 6d  cb 3d d5 ed 60 7c b9 a0  |...N..\"m.=..`|..|\n-00000050  ba c5 19 14 86 3a 98 ea  d3 73 68 1e d4 f8 0e 12  |.....:...sh.....|\n-00000060  17 03 01 00 30 30 50 48  84 2e b0 15 0a 5f 64 3c  |....00PH....._d<|\n-00000070  fc 19 aa 89 7d 6e ba 84  56 56 66 15 6e d4 b9 35  |....}n..VVf.n..5|\n-00000080  20 ac 98 0d 8d 09 e1 80  8d 32 c8 99 d2 70 41 3a  | ........2...pA:|\n-00000090  9b 62 d6 48 b1 15 03 01  00 20 9a 16 01 aa d0 6f  |.b.H..... .....o|\n-000000a0  d4 d3 bb 5d 57 c0 7c d1  a8 d4 67 5d 5e 1d be 7d  |...]W.|...g]^..}|\n-000000b0  d2 78 4a 33 93 ae 53 cc  fb a0                    |.xJ3..S...|\n+00000000  14 03 01 00 01 01 16 03  01 00 30 e8 48 86 81 3c  |..........0.H..<|\n+00000010  f5 25 5c 94 a9 06 c4 5c  71 62 b1 43 76 ec 2c 44  |.%\\....\\qb.Cv.,D|\n+00000020  95 b5 8c 95 d2 ff 82 92  b6 fc 52 75 03 c6 a1 f0  |..........Ru....|\n+00000030  99 6d b1 ed ec 68 6c d7  9f 18 50 17 03 01 00 20  |.m...hl...P.... |\n+00000040  32 d9 26 8a 81 b8 9d a5  7b fd d5 4e 7a db 2e 29  |2.&.....{..Nz..)|\n+00000050  58 9a 4f 6a 27 18 bc dc  c2 49 b8 65 cb 8e 16 5a  |X.Oj'....I.e...Z|\n+00000060  17 03 01 00 30 c4 56 0a  ad 9a 82 cb 3e 32 f1 7c  |....0.V.....>2.||\n+00000070  95 6e dd cd e9 4d f0 e5  2d c9 a3 f7 de bb d7 fd  |.n...M..-.......|\n+00000080  84 bb df 34 8c 64 1f 03  58 64 19 4a 5b 7a a8 81  |...4.d..Xd.J[z..|\n+00000090  52 bb 51 0a 43 15 03 01  00 20 89 18 7a 40 ec 49  |R.Q.C.... ..z@.I|\n+000000a0  52 d5 d3 20 ac 07 eb e9  4a 78 23 cf e7 21 32 74  |R.. ....Jx#..!2t|\n+000000b0  ec 40 8d a8 f4 33 1c ae  93 cf                    |.@...3....|"}, {"sha": "0ab8b8d74c56d40fdabfac023cc11a29b84b9145", "filename": "libgo/go/crypto/tls/testdata/Server-TLSv12-CipherSuiteCertPreferenceECDSA", "status": "modified", "additions": 38, "deletions": 46, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-CipherSuiteCertPreferenceECDSA", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-CipherSuiteCertPreferenceECDSA", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-CipherSuiteCertPreferenceECDSA?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -1,7 +1,7 @@\n >>> Flow 1 (client to server)\n-00000000  16 03 01 00 ca 01 00 00  c6 03 03 52 cc 5e 7f 49  |...........R.^.I|\n-00000010  8a 7a 88 c0 85 24 6b 3d  95 ff 0f 9e 91 32 c2 a4  |.z...$k=.....2..|\n-00000020  6b 4c 53 e4 b4 4c 40 72  e4 54 27 00 00 32 c0 30  |kLS..L@r.T'..2.0|\n+00000000  16 03 01 00 ca 01 00 00  c6 03 03 53 04 f1 3f 5f  |...........S..?_|\n+00000010  f4 ef 1f b3 41 0b 54 e4  4d 56 0a 31 22 b8 5c 73  |....A.T.MV.1\".\\s|\n+00000020  a3 cb b5 b2 9d 43 f1 83  bc d3 bd 00 00 32 c0 30  |.....C.......2.0|\n 00000030  c0 2c c0 28 c0 24 c0 14  c0 0a c0 22 c0 21 00 a3  |.,.(.$.....\".!..|\n 00000040  00 9f 00 6b 00 6a 00 39  00 38 00 88 00 87 c0 32  |...k.j.9.8.....2|\n 00000050  c0 2e c0 2a c0 26 c0 0f  c0 05 00 9d 00 3d 00 35  |...*.&.......=.5|\n@@ -49,51 +49,43 @@\n 00000210  33 13 83 0d 94 06 bb d4  37 7a f6 ec 7a c9 86 2e  |3.......7z..z...|\n 00000220  dd d7 11 69 7f 85 7c 56  de fb 31 78 2b e4 c7 78  |...i..|V..1x+..x|\n 00000230  0d ae cb be 9e 4e 36 24  31 7b 6a 0f 39 95 12 07  |.....N6$1{j.9...|\n-00000240  8f 2a 16 03 03 01 1c 0c  00 01 18 03 00 19 85 04  |.*..............|\n-00000250  01 39 dc ee 44 17 5e db  d7 27 af b6 56 d9 b4 43  |.9..D.^..'..V..C|\n-00000260  5a 99 cf aa 31 37 0c 6f  3a a0 f8 53 c4 74 d1 91  |Z...17.o:..S.t..|\n-00000270  0a 46 f5 38 3b 5c 09 d8  97 dc 4b aa 70 26 48 f2  |.F.8;\\....K.p&H.|\n-00000280  d6 0b 31 c9 f8 d4 98 43  e1 6c d5 c7 b2 8e 0b 01  |..1....C.l......|\n-00000290  e6 b6 00 28 80 7b fc 96  8f 0d a2 4f b0 79 af dc  |...(.{.....O.y..|\n-000002a0  61 28 63 33 78 f6 31 39  fd 8a f4 15 18 11 fe db  |a(c3x.19........|\n-000002b0  d5 07 da 2c ed 49 a0 23  bf d0 3a 38 1d 54 ae 1c  |...,.I.#..:8.T..|\n-000002c0  7b ea 29 ee d0 38 c1 76  a7 7f 2a f4 ce 1e ac cc  |{.)..8.v..*.....|\n-000002d0  94 79 90 33 04 03 00 8b  30 81 88 02 42 00 c6 85  |.y.3....0...B...|\n-000002e0  8e 06 b7 04 04 e9 cd 9e  3e cb 66 23 95 b4 42 9c  |........>.f#..B.|\n-000002f0  64 81 39 05 3f b5 21 f8  28 af 60 6b 4d 3d ba a1  |d.9.?.!.(.`kM=..|\n-00000300  4b 5e 77 ef e7 59 28 fe  1d c1 27 a2 ff a8 de 33  |K^w..Y(...'....3|\n-00000310  48 b3 c1 85 6a 42 9b f9  7e 7e 31 c2 e5 bd 66 02  |H...jB..~~1...f.|\n-00000320  42 00 ad 7d 06 35 ab ec  8d ac d4 ba 1b 49 5e 05  |B..}.5.......I^.|\n-00000330  5f f0 97 93 82 b8 2b 8d  91 98 63 8e b4 14 62 db  |_.....+...c...b.|\n-00000340  1e c9 2b ca fe c9 88 b7  3d 46 d2 5b 55 de bc 9a  |..+.....=F.[U...|\n-00000350  66 c9 cf b7 3d e8 c8 62  24 93 d8 db 12 77 2a 6c  |f...=..b$....w*l|\n-00000360  08 66 48 16 03 03 00 04  0e 00 00 00              |.fH.........|\n+00000240  8f 2a 16 03 03 00 d8 0c  00 00 d4 03 00 17 41 04  |.*............A.|\n+00000250  1e 18 37 ef 0d 19 51 88  35 75 71 b5 e5 54 5b 12  |..7...Q.5uq..T[.|\n+00000260  2e 8f 09 67 fd a7 24 20  3e b2 56 1c ce 97 28 5e  |...g..$ >.V...(^|\n+00000270  f8 2b 2d 4f 9e f1 07 9f  6c 4b 5b 83 56 e2 32 42  |.+-O....lK[.V.2B|\n+00000280  e9 58 b6 d7 49 a6 b5 68  1a 41 03 56 6b dc 5a 89  |.X..I..h.A.Vk.Z.|\n+00000290  04 03 00 8b 30 81 88 02  42 00 c6 85 8e 06 b7 04  |....0...B.......|\n+000002a0  04 e9 cd 9e 3e cb 66 23  95 b4 42 9c 64 81 39 05  |....>.f#..B.d.9.|\n+000002b0  3f b5 21 f8 28 af 60 6b  4d 3d ba a1 4b 5e 77 ef  |?.!.(.`kM=..K^w.|\n+000002c0  e7 59 28 fe 1d c1 27 a2  ff a8 de 33 48 b3 c1 85  |.Y(...'....3H...|\n+000002d0  6a 42 9b f9 7e 7e 31 c2  e5 bd 66 02 42 00 ad 7d  |jB..~~1...f.B..}|\n+000002e0  06 35 ab ec 8d ac d4 ba  1b 49 5e 05 5f f0 97 93  |.5.......I^._...|\n+000002f0  82 b8 2b 8d 91 98 63 8e  b4 14 62 db 1e c9 2b 64  |..+...c...b...+d|\n+00000300  e9 e6 bf 15 5b 67 c2 40  90 c6 1f b7 92 db 4b f6  |....[g.@......K.|\n+00000310  f4 db ae 82 f1 4f 02 75  52 40 38 10 ff 35 f0 16  |.....O.uR@8..5..|\n+00000320  03 03 00 04 0e 00 00 00                           |........|\n >>> Flow 3 (client to server)\n-00000000  16 03 03 00 8a 10 00 00  86 85 04 01 fd 02 a1 b1  |................|\n-00000010  56 3c 37 37 da 78 37 d9  07 ee 09 35 4f ff 3e db  |V<77.x7....5O.>.|\n-00000020  da da 23 12 2c 40 12 dd  73 e7 2c c5 2e fb 37 24  |..#.,@..s.,...7$|\n-00000030  2f 97 95 b4 6c 1e 56 6c  4e 49 d5 89 21 8b ca 74  |/...l.VlNI..!..t|\n-00000040  85 1b 24 96 fb 28 cc 64  70 59 fc be 18 00 00 98  |..$..(.dpY......|\n-00000050  9a f6 c9 26 26 6d ce 48  7b 3b 62 ea dd da 73 8b  |...&&m.H{;b...s.|\n-00000060  71 48 18 71 52 2d 22 1d  7c 67 55 1b 6b fa 44 40  |qH.qR-\".|gU.k.D@|\n-00000070  be 87 0f 52 21 4b 86 b4  f0 6d 1b dd e7 0f f8 ef  |...R!K...m......|\n-00000080  1a 09 8b 66 b9 60 38 da  6f 9d 9d 74 58 d9 35 14  |...f.`8.o..tX.5.|\n-00000090  03 03 00 01 01 16 03 03  00 40 5b 98 11 9d d4 83  |.........@[.....|\n-000000a0  13 b6 28 4b 85 61 0b e1  bf 36 3f 43 c0 95 3d 7e  |..(K.a...6?C..=~|\n-000000b0  95 ea 84 14 e6 6d 1a e0  20 50 b4 02 d0 b2 e9 5f  |.....m.. P....._|\n-000000c0  07 82 a8 6a 1e 7c 1e f7  6c b5 be 1b 20 2e 98 4e  |...j.|..l... ..N|\n-000000d0  ab 8d 1e f2 56 88 ed ef  aa 39                    |....V....9|\n+00000000  16 03 03 00 46 10 00 00  42 41 04 d8 94 c4 05 26  |....F...BA.....&|\n+00000010  76 29 2d 0e ec 47 b6 50  d5 a3 da 2a ba 02 11 37  |v)-..G.P...*...7|\n+00000020  3d ef e6 2a db d0 47 47  a7 9a 5f 43 2d 98 78 26  |=..*..GG.._C-.x&|\n+00000030  81 e2 f1 ba fe f7 66 c6  61 cb c1 b7 60 62 34 a5  |......f.a...`b4.|\n+00000040  78 67 50 3d 9a 0e 4a 8c  8f d7 10 14 03 03 00 01  |xgP=..J.........|\n+00000050  01 16 03 03 00 40 5e 46  b0 5d 30 f6 da 8f 9e 67  |.....@^F.]0....g|\n+00000060  f5 3e bd fe c9 b8 53 b2  10 d5 7c 0e 34 e3 93 6d  |.>....S...|.4..m|\n+00000070  0e 8e 8a 2b df fb 9a 0f  a5 23 55 e7 0a 4b e2 d3  |...+.....#U..K..|\n+00000080  db 15 e8 52 74 26 78 b3  b0 56 65 63 ac ae 1e c0  |...Rt&x..Vec....|\n+00000090  0b f4 92 56 a9 04                                 |...V..|\n >>> Flow 4 (server to client)\n 00000000  14 03 03 00 01 01 16 03  03 00 40 00 00 00 00 00  |..........@.....|\n-00000010  00 00 00 00 00 00 00 00  00 00 00 7e f1 fc 1d 0c  |...........~....|\n-00000020  f5 a2 c6 35 de 78 97 62  72 3f 05 6c a3 a8 0e cb  |...5.x.br?.l....|\n-00000030  10 7e c0 3d 28 c7 d9 4e  71 f4 18 d7 14 42 09 5c  |.~.=(..Nq....B.\\|\n-00000040  22 26 04 1f 04 12 9f 88  3d 4a 4a 17 03 03 00 40  |\"&......=JJ....@|\n+00000010  00 00 00 00 00 00 00 00  00 00 00 16 a9 63 0a 99  |.............c..|\n+00000020  21 8a fc 5c b3 ee 05 71  4e 75 c0 d9 40 54 0d 3e  |!..\\...qNu..@T.>|\n+00000030  4e 5d 44 b7 4b 5d a9 e7  5a 30 ed b6 d5 08 50 b1  |N]D.K]..Z0....P.|\n+00000040  e8 8c 54 eb 1b 39 7a f9  3b ac 2e 17 03 03 00 40  |..T..9z.;......@|\n 00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n-00000060  0f 35 50 38 be 3a c7 4e  c4 de 36 63 85 c1 7a 78  |.5P8.:.N..6c..zx|\n-00000070  c6 7f 65 8c d1 44 c5 7e  45 32 60 88 93 bf 10 82  |..e..D.~E2`.....|\n-00000080  4b 1a 46 9a 60 54 c5 ee  2a c1 86 02 a7 b6 d5 ea  |K.F.`T..*.......|\n+00000060  96 03 20 2b 20 c4 c1 9a  76 7b f3 96 bd 33 ed e6  |.. + ...v{...3..|\n+00000070  38 48 ea 53 d5 e0 62 b5  7e 1a 36 a8 dd 9f 2d 4b  |8H.S..b.~.6...-K|\n+00000080  06 0d ae f6 bc 99 14 b3  93 14 27 63 e2 a0 c8 76  |..........'c...v|\n 00000090  15 03 03 00 30 00 00 00  00 00 00 00 00 00 00 00  |....0...........|\n-000000a0  00 00 00 00 00 78 6c 41  05 2f 6f c2 d7 70 54 24  |.....xlA./o..pT$|\n-000000b0  66 01 2c 1e 71 43 05 3a  1b 9e 86 ff b4 c5 65 b2  |f.,.qC.:......e.|\n-000000c0  f0 f8 ef 6b 25                                    |...k%|\n+000000a0  00 00 00 00 00 48 af e1  e4 11 e1 b7 03 19 b0 e3  |.....H..........|\n+000000b0  e6 a9 66 d8 ac af aa 03  f6 0d 51 df 9a 27 78 3a  |..f.......Q..'x:|\n+000000c0  56 5a 03 1a 4c                                    |VZ..L|"}, {"sha": "88abb15a7e6c83c67c14f6f553e72fefc1116eb1", "filename": "libgo/go/crypto/tls/testdata/Server-TLSv12-CipherSuiteCertPreferenceRSA", "status": "modified", "additions": 37, "deletions": 46, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-CipherSuiteCertPreferenceRSA", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-CipherSuiteCertPreferenceRSA", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-CipherSuiteCertPreferenceRSA?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -1,7 +1,7 @@\n >>> Flow 1 (client to server)\n-00000000  16 03 01 00 ca 01 00 00  c6 03 03 52 cc 5e 7f ec  |...........R.^..|\n-00000010  d7 b4 0c ac 92 e8 d1 6e  df c1 e6 ee f5 84 5e 1a  |.......n......^.|\n-00000020  1d 05 bf 2d 3f 71 91 d1  cc b7 f8 00 00 32 c0 30  |...-?q.......2.0|\n+00000000  16 03 01 00 ca 01 00 00  c6 03 03 53 04 f1 3f cc  |...........S..?.|\n+00000010  41 74 00 07 cb ae 3b 30  79 48 51 60 41 a3 8c ab  |At....;0yHQ`A...|\n+00000020  dc 76 f9 74 52 1e c5 fb  a9 69 c2 00 00 32 c0 30  |.v.tR....i...2.0|\n 00000030  c0 2c c0 28 c0 24 c0 14  c0 0a c0 22 c0 21 00 a3  |.,.(.$.....\".!..|\n 00000040  00 9f 00 6b 00 6a 00 39  00 38 00 88 00 87 c0 32  |...k.j.9.8.....2|\n 00000050  c0 2e c0 2a c0 26 c0 0f  c0 05 00 9d 00 3d 00 35  |...*.&.......=.5|\n@@ -60,51 +60,42 @@\n 000002c0  5a 5f 33 c4 b6 d8 c9 75  90 96 8c 0f 52 98 b5 cd  |Z_3....u....R...|\n 000002d0  98 1f 89 20 5f f2 a0 1c  a3 1b 96 94 dd a9 fd 57  |... _..........W|\n 000002e0  e9 70 e8 26 6d 71 99 9b  26 6e 38 50 29 6c 90 a7  |.p.&mq..&n8P)l..|\n-000002f0  bd d9 16 03 03 01 11 0c  00 01 0d 03 00 19 85 04  |................|\n-00000300  01 39 dc ee 44 17 5e db  d7 27 af b6 56 d9 b4 43  |.9..D.^..'..V..C|\n-00000310  5a 99 cf aa 31 37 0c 6f  3a a0 f8 53 c4 74 d1 91  |Z...17.o:..S.t..|\n-00000320  0a 46 f5 38 3b 5c 09 d8  97 dc 4b aa 70 26 48 f2  |.F.8;\\....K.p&H.|\n-00000330  d6 0b 31 c9 f8 d4 98 43  e1 6c d5 c7 b2 8e 0b 01  |..1....C.l......|\n-00000340  e6 b6 00 28 80 7b fc 96  8f 0d a2 4f b0 79 af dc  |...(.{.....O.y..|\n-00000350  61 28 63 33 78 f6 31 39  fd 8a f4 15 18 11 fe db  |a(c3x.19........|\n-00000360  d5 07 da 2c ed 49 a0 23  bf d0 3a 38 1d 54 ae 1c  |...,.I.#..:8.T..|\n-00000370  7b ea 29 ee d0 38 c1 76  a7 7f 2a f4 ce 1e ac cc  |{.)..8.v..*.....|\n-00000380  94 79 90 33 04 01 00 80  ad 89 a5 bf 16 74 a1 14  |.y.3.........t..|\n-00000390  c4 a1 09 31 95 69 e4 b4  e3 8d df 99 73 cd e6 94  |...1.i......s...|\n-000003a0  eb ca 07 7f f4 36 ca 31  1c 29 f0 f0 d8 40 6b 19  |.....6.1.)...@k.|\n-000003b0  f2 15 be f1 76 22 b3 82  f7 bf 2b 09 0f cd 31 c8  |....v\"....+...1.|\n-000003c0  69 7b 7b 1a ed a1 f7 85  6e 04 5c fa a5 20 c0 ef  |i{{.....n.\\.. ..|\n-000003d0  c6 45 6d 05 25 37 ec f6  94 91 32 f3 c8 d1 f0 13  |.Em.%7....2.....|\n-000003e0  81 1e 26 bb 4c 47 91 79  ad cf 7e 61 85 54 eb 13  |..&.LG.y..~a.T..|\n-000003f0  6b b1 15 36 72 bf d1 ad  07 3e 6d bd 44 1a 30 ac  |k..6r....>m.D.0.|\n-00000400  41 39 ad 75 14 bb 11 dc  16 03 03 00 04 0e 00 00  |A9.u............|\n-00000410  00                                                |.|\n+000002f0  bd d9 16 03 03 00 cd 0c  00 00 c9 03 00 17 41 04  |..............A.|\n+00000300  1e 18 37 ef 0d 19 51 88  35 75 71 b5 e5 54 5b 12  |..7...Q.5uq..T[.|\n+00000310  2e 8f 09 67 fd a7 24 20  3e b2 56 1c ce 97 28 5e  |...g..$ >.V...(^|\n+00000320  f8 2b 2d 4f 9e f1 07 9f  6c 4b 5b 83 56 e2 32 42  |.+-O....lK[.V.2B|\n+00000330  e9 58 b6 d7 49 a6 b5 68  1a 41 03 56 6b dc 5a 89  |.X..I..h.A.Vk.Z.|\n+00000340  04 01 00 80 9d 84 09 35  73 fb f6 ea 94 7b 49 fb  |.......5s....{I.|\n+00000350  c2 70 b1 11 64 5b 93 9f  d9 8c f5 56 98 f6 d3 66  |.p..d[.....V...f|\n+00000360  a6 1d 18 56 88 87 71 3f  b0 38 9d 44 1f ad 2c 0d  |...V..q?.8.D..,.|\n+00000370  3a a7 e8 d4 3e 33 3c 41  20 f3 3f 5c e5 fb e3 23  |:...>3<A .?\\...#|\n+00000380  12 48 ff d2 c4 30 7c 8a  51 3f 9f 19 6e 34 d7 60  |.H...0|.Q?..n4.`|\n+00000390  7d 12 8a aa 90 0f 50 d9  0b 9a b2 d7 66 b1 c6 84  |}.....P.....f...|\n+000003a0  af 5c e2 5e 16 3e 36 61  73 84 64 89 b3 c1 6d 50  |.\\.^.>6as.d...mP|\n+000003b0  33 55 c7 e1 c5 a5 4c 32  5c 95 dc 07 43 60 49 11  |3U....L2\\...C`I.|\n+000003c0  e9 98 cc ba 16 03 03 00  04 0e 00 00 00           |.............|\n >>> Flow 3 (client to server)\n-00000000  16 03 03 00 8a 10 00 00  86 85 04 01 fb 77 96 9a  |.............w..|\n-00000010  82 26 4f 44 b5 2f 32 28  0a dd 51 f5 a4 84 46 a1  |.&OD./2(..Q...F.|\n-00000020  ba 58 e6 9a 96 1b 85 9f  ae 3a 8b db a8 93 81 00  |.X.......:......|\n-00000030  17 be 24 26 17 fd b8 7c  fe 93 7f af 5f 4d c6 47  |..$&...|...._M.G|\n-00000040  8b 72 5b 23 89 03 d5 a6  fb 6f de 59 15 00 bb 36  |.r[#.....o.Y...6|\n-00000050  6d 72 03 47 61 b7 7e d4  46 43 b3 e9 9d 2f 61 6a  |mr.Ga.~.FC.../aj|\n-00000060  08 1b 04 70 ac 95 ad bf  18 e5 09 b6 b3 0d 6a bb  |...p..........j.|\n-00000070  e8 77 09 fa 81 2e 8a e1  61 7e 9f 38 d0 67 f5 11  |.w......a~.8.g..|\n-00000080  f1 62 7f a4 69 4a 42 7a  f8 9e 05 26 66 34 6e 14  |.b..iJBz...&f4n.|\n-00000090  03 03 00 01 01 16 03 03  00 40 2c a1 a8 3a 34 18  |.........@,..:4.|\n-000000a0  ea a1 d4 28 0b 1a ac ab  51 b1 c5 48 f2 56 8d c7  |...(....Q..H.V..|\n-000000b0  83 7b 70 44 40 7d 15 1c  00 19 ed 53 21 fe 9d c1  |.{pD@}.....S!...|\n-000000c0  a2 13 8f a0 0c 51 f5 13  67 1f bf 07 da bc 2d ca  |.....Q..g.....-.|\n-000000d0  7c 0f 53 4b 4a 02 bb 0f  72 c6                    ||.SKJ...r.|\n+00000000  16 03 03 00 46 10 00 00  42 41 04 28 02 84 d5 b4  |....F...BA.(....|\n+00000010  58 07 47 d5 a0 d6 0b 1d  37 91 e6 34 a4 ad 0b ad  |X.G.....7..4....|\n+00000020  22 01 82 77 a7 32 86 78  83 3a da 75 2f e5 68 7a  |\"..w.2.x.:.u/.hz|\n+00000030  de e4 05 e0 02 47 40 4e  38 d2 2c c3 7b da 53 73  |.....G@N8.,.{.Ss|\n+00000040  19 cb 8b 73 34 72 4d 33  71 39 c8 14 03 03 00 01  |...s4rM3q9......|\n+00000050  01 16 03 03 00 40 10 63  43 76 83 bd 36 e4 1e 4d  |.....@.cCv..6..M|\n+00000060  7e 13 b0 ac aa c8 ec 90  31 df 84 46 49 68 39 5a  |~.......1..FIh9Z|\n+00000070  05 8b 73 32 86 15 3a 18  57 d8 e2 2c 2d 05 89 93  |..s2..:.W..,-...|\n+00000080  37 b8 dd 73 33 92 ff a7  b2 53 27 94 b7 25 56 64  |7..s3....S'..%Vd|\n+00000090  a1 d3 2c f7 6b 71                                 |..,.kq|\n >>> Flow 4 (server to client)\n 00000000  14 03 03 00 01 01 16 03  03 00 40 00 00 00 00 00  |..........@.....|\n-00000010  00 00 00 00 00 00 00 00  00 00 00 82 f6 03 51 7f  |..............Q.|\n-00000020  37 19 ec 26 20 db e2 5b  8e 5e 22 29 1a 88 ca f1  |7..& ..[.^\")....|\n-00000030  ad 55 1c 3c 07 1d 05 b6  c4 88 58 84 a0 5d 33 41  |.U.<......X..]3A|\n-00000040  7a 65 bc ba a1 71 a4 71  df 6c 9d 17 03 03 00 40  |ze...q.q.l.....@|\n+00000010  00 00 00 00 00 00 00 00  00 00 00 21 5c 31 b1 4b  |...........!\\1.K|\n+00000020  96 96 30 8f 79 35 3a 3a  2d 26 67 d0 70 48 be 30  |..0.y5::-&g.pH.0|\n+00000030  f8 3e e8 c1 cb 1d d5 89  f6 9c 72 bb 1c f9 4d 90  |.>........r...M.|\n+00000040  9c d7 c6 fa 40 76 a5 61  46 61 24 17 03 03 00 40  |....@v.aFa$....@|\n 00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n-00000060  8d ca 51 a1 4a b1 23 dc  e3 ef 63 5f b0 e8 7a c6  |..Q.J.#...c_..z.|\n-00000070  97 d7 18 6a 4b 80 3e 5c  7b 79 86 93 60 2c 8b f1  |...jK.>\\{y..`,..|\n-00000080  4e 46 c5 5e 64 0c 98 81  10 6d c5 08 22 f1 02 1d  |NF.^d....m..\"...|\n+00000060  94 8a 14 04 06 b9 30 a0  67 fd b2 4c 84 f4 10 93  |......0.g..L....|\n+00000070  7d d4 2b 23 f0 e9 62 93  c2 20 a2 f2 7c 07 21 4b  |}.+#..b.. ..|.!K|\n+00000080  94 ba 7b 7d cb 77 da 85  93 bd 53 ee ca db 9b 3e  |..{}.w....S....>|\n 00000090  15 03 03 00 30 00 00 00  00 00 00 00 00 00 00 00  |....0...........|\n-000000a0  00 00 00 00 00 51 19 c4  67 b7 14 6b 5c 49 ac 1d  |.....Q..g..k\\I..|\n-000000b0  b3 97 88 42 29 cb f5 06  54 f4 c6 38 9a 47 41 78  |...B)...T..8.GAx|\n-000000c0  0f 33 21 ac c5                                    |.3!..|\n+000000a0  00 00 00 00 00 17 3f 53  8d b3 35 b4 84 ed bb 12  |......?S..5.....|\n+000000b0  cf 73 25 25 7c c3 d3 bb  1f 5a 6b 73 9a 8a b1 a2  |.s%%|....Zks....|\n+000000c0  ba 99 f8 0e 43                                    |....C|"}, {"sha": "aacbb86705a07a1cbd5c6dddc62bff957d3c1cd0", "filename": "libgo/go/crypto/tls/testdata/Server-TLSv12-ECDHE-ECDSA-AES", "status": "modified", "additions": 38, "deletions": 47, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-ECDHE-ECDSA-AES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-ECDHE-ECDSA-AES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-ECDHE-ECDSA-AES?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -1,7 +1,7 @@\n >>> Flow 1 (client to server)\n-00000000  16 03 01 00 9c 01 00 00  98 03 03 52 cc 57 59 54  |...........R.WYT|\n-00000010  0b ba f3 ec 2c 33 3e 3e  ac b8 c1 d5 d5 ff e3 d3  |....,3>>........|\n-00000020  63 d0 29 16 aa 5d 96 37  89 90 c4 00 00 04 c0 0a  |c.)..].7........|\n+00000000  16 03 01 00 9c 01 00 00  98 03 03 53 04 f0 f9 09  |...........S....|\n+00000010  13 56 01 37 84 b1 32 59  4c 73 b1 8e bb 02 1a 32  |.V.7..2YLs.....2|\n+00000020  db ab 8c e6 ed ad 7f 52  9a 59 39 00 00 04 c0 0a  |.......R.Y9.....|\n 00000030  00 ff 01 00 00 6b 00 0b  00 04 03 00 01 02 00 0a  |.....k..........|\n 00000040  00 34 00 32 00 0e 00 0d  00 19 00 0b 00 0c 00 18  |.4.2............|\n 00000050  00 09 00 0a 00 16 00 17  00 08 00 06 00 07 00 14  |................|\n@@ -47,52 +47,43 @@\n 00000210  0e bd 3f a3 8c 25 c1 33  13 83 0d 94 06 bb d4 37  |..?..%.3.......7|\n 00000220  7a f6 ec 7a c9 86 2e dd  d7 11 69 7f 85 7c 56 de  |z..z......i..|V.|\n 00000230  fb 31 78 2b e4 c7 78 0d  ae cb be 9e 4e 36 24 31  |.1x+..x.....N6$1|\n-00000240  7b 6a 0f 39 95 12 07 8f  2a 16 03 03 01 1c 0c 00  |{j.9....*.......|\n-00000250  01 18 03 00 19 85 04 01  39 dc ee 44 17 5e db d7  |........9..D.^..|\n-00000260  27 af b6 56 d9 b4 43 5a  99 cf aa 31 37 0c 6f 3a  |'..V..CZ...17.o:|\n-00000270  a0 f8 53 c4 74 d1 91 0a  46 f5 38 3b 5c 09 d8 97  |..S.t...F.8;\\...|\n-00000280  dc 4b aa 70 26 48 f2 d6  0b 31 c9 f8 d4 98 43 e1  |.K.p&H...1....C.|\n-00000290  6c d5 c7 b2 8e 0b 01 e6  b6 00 28 80 7b fc 96 8f  |l.........(.{...|\n-000002a0  0d a2 4f b0 79 af dc 61  28 63 33 78 f6 31 39 fd  |..O.y..a(c3x.19.|\n-000002b0  8a f4 15 18 11 fe db d5  07 da 2c ed 49 a0 23 bf  |..........,.I.#.|\n-000002c0  d0 3a 38 1d 54 ae 1c 7b  ea 29 ee d0 38 c1 76 a7  |.:8.T..{.)..8.v.|\n-000002d0  7f 2a f4 ce 1e ac cc 94  79 90 33 04 03 00 8b 30  |.*......y.3....0|\n-000002e0  81 88 02 42 00 c6 85 8e  06 b7 04 04 e9 cd 9e 3e  |...B...........>|\n-000002f0  cb 66 23 95 b4 42 9c 64  81 39 05 3f b5 21 f8 28  |.f#..B.d.9.?.!.(|\n-00000300  af 60 6b 4d 3d ba a1 4b  5e 77 ef e7 59 28 fe 1d  |.`kM=..K^w..Y(..|\n-00000310  c1 27 a2 ff a8 de 33 48  b3 c1 85 6a 42 9b f9 7e  |.'....3H...jB..~|\n-00000320  7e 31 c2 e5 bd 66 02 42  00 ad 7d 06 35 ab ec 8d  |~1...f.B..}.5...|\n-00000330  ac d4 ba 1b 49 5e 05 5f  f0 97 93 82 b8 2b 8d 91  |....I^._.....+..|\n-00000340  98 63 8e b4 14 62 db 1e  c9 2b eb 95 36 9b 44 c6  |.c...b...+..6.D.|\n-00000350  a6 89 58 50 f9 30 94 89  ef 0f 71 ed c0 42 59 11  |..XP.0....q..BY.|\n-00000360  68 e7 ac 52 2c 1e ed 70  b1 f8 16 03 03 00 04 0e  |h..R,..p........|\n-00000370  00 00 00                                          |...|\n+00000240  7b 6a 0f 39 95 12 07 8f  2a 16 03 03 00 d8 0c 00  |{j.9....*.......|\n+00000250  00 d4 03 00 17 41 04 1e  18 37 ef 0d 19 51 88 35  |.....A...7...Q.5|\n+00000260  75 71 b5 e5 54 5b 12 2e  8f 09 67 fd a7 24 20 3e  |uq..T[....g..$ >|\n+00000270  b2 56 1c ce 97 28 5e f8  2b 2d 4f 9e f1 07 9f 6c  |.V...(^.+-O....l|\n+00000280  4b 5b 83 56 e2 32 42 e9  58 b6 d7 49 a6 b5 68 1a  |K[.V.2B.X..I..h.|\n+00000290  41 03 56 6b dc 5a 89 04  03 00 8b 30 81 88 02 42  |A.Vk.Z.....0...B|\n+000002a0  00 c6 85 8e 06 b7 04 04  e9 cd 9e 3e cb 66 23 95  |...........>.f#.|\n+000002b0  b4 42 9c 64 81 39 05 3f  b5 21 f8 28 af 60 6b 4d  |.B.d.9.?.!.(.`kM|\n+000002c0  3d ba a1 4b 5e 77 ef e7  59 28 fe 1d c1 27 a2 ff  |=..K^w..Y(...'..|\n+000002d0  a8 de 33 48 b3 c1 85 6a  42 9b f9 7e 7e 31 c2 e5  |..3H...jB..~~1..|\n+000002e0  bd 66 02 42 00 ad 7d 06  35 ab ec 8d ac d4 ba 1b  |.f.B..}.5.......|\n+000002f0  49 5e 05 5f f0 97 93 82  b8 2b 8d 91 98 63 8e b4  |I^._.....+...c..|\n+00000300  14 62 db 1e c9 2c 13 ae  b7 d3 17 38 23 2f f6 7f  |.b...,.....8#/..|\n+00000310  0c 4d d3 33 d2 79 d1 77  ee cb b1 c2 fc 34 b8 69  |.M.3.y.w.....4.i|\n+00000320  f9 10 8b 61 89 85 16 03  03 00 04 0e 00 00 00     |...a...........|\n >>> Flow 3 (client to server)\n-00000000  16 03 03 00 8a 10 00 00  86 85 04 01 7d 90 e6 a1  |............}...|\n-00000010  06 d6 a9 32 e9 ba 42 d5  05 11 e7 69 7c 5e 6e b6  |...2..B....i|^n.|\n-00000020  ad 51 bc 25 12 89 93 e0  bf 3c 2f ce a8 83 29 0e  |.Q.%.....</...).|\n-00000030  eb 06 89 10 f4 de ce d9  16 6c 95 dc 61 66 84 87  |.........l..af..|\n-00000040  84 6b 47 77 01 55 79 a2  0d e0 e8 d0 bd 00 7e d7  |.kGw.Uy.......~.|\n-00000050  34 a4 75 e4 c8 ac e4 a3  4b df 27 52 7a f7 1b 0f  |4.u.....K.'Rz...|\n-00000060  73 af 26 66 2c c9 29 56  b9 e2 1b b8 02 21 80 74  |s.&f,.)V.....!.t|\n-00000070  db c8 d4 99 31 8f 6c 41  a6 b2 ac 60 82 13 85 08  |....1.lA...`....|\n-00000080  4d 34 f2 77 ba 22 ec 05  92 9c 9b ca 2d 8e dc 14  |M4.w.\"......-...|\n-00000090  03 03 00 01 01 16 03 03  00 40 19 4c 60 51 51 ed  |.........@.L`QQ.|\n-000000a0  03 16 fe 05 a4 88 17 91  f0 0a 50 0d e4 a8 82 9a  |..........P.....|\n-000000b0  4d 4b ef 2a 3d 57 29 60  e7 36 70 9c 41 e2 93 89  |MK.*=W)`.6p.A...|\n-000000c0  b7 b0 f6 76 fc 19 93 7b  ac 8e 39 d1 7c 90 73 62  |...v...{..9.|.sb|\n-000000d0  88 bf 0b 20 f9 fd 49 b4  d9 3c                    |... ..I..<|\n+00000000  16 03 03 00 46 10 00 00  42 41 04 dd 22 68 a1 4e  |....F...BA..\"h.N|\n+00000010  04 1b 47 f9 c5 7d 04 1d  d8 fe 84 fa be 31 2e a7  |..G..}.......1..|\n+00000020  f8 e5 b8 14 92 44 99 11  0e 34 97 fc e5 b1 91 cf  |.....D...4......|\n+00000030  a4 d1 3f b4 71 94 c6 06  16 f0 98 c0 3e 05 f9 2f  |..?.q.......>../|\n+00000040  0a 97 78 3d ef dc fa a2  d7 ee 7d 14 03 03 00 01  |..x=......}.....|\n+00000050  01 16 03 03 00 40 90 bf  7f e9 c9 6e d1 80 f5 12  |.....@.....n....|\n+00000060  6d c5 b7 c5 15 4b 18 a5  d3 18 1e f8 8c 4d 7e 6d  |m....K.......M~m|\n+00000070  03 60 29 7c 45 7c b2 ca  8c 07 71 70 aa 23 fa 6e  |.`)|E|....qp.#.n|\n+00000080  d9 0b 0a 32 4c 9e e5 00  f9 19 9b b6 8d dc d3 67  |...2L..........g|\n+00000090  3d 0f bb b8 4b 9e                                 |=...K.|\n >>> Flow 4 (server to client)\n 00000000  14 03 03 00 01 01 16 03  03 00 40 00 00 00 00 00  |..........@.....|\n-00000010  00 00 00 00 00 00 00 00  00 00 00 f1 df 07 dd 3f  |...............?|\n-00000020  92 27 96 9a 5c 98 4a 3b  39 0b 5d 2e 5f 12 55 11  |.'..\\.J;9.]._.U.|\n-00000030  32 4d 14 39 31 02 1b 02  ee b0 ae 2c 19 8d c2 31  |2M.91......,...1|\n-00000040  52 cc e9 c3 d6 34 ac 4d  7f e6 6e 17 03 03 00 40  |R....4.M..n....@|\n+00000010  00 00 00 00 00 00 00 00  00 00 00 a1 6e e5 d1 ca  |............n...|\n+00000020  03 f4 77 dc ec ee 5d f0  22 5e 7f 55 1a 8d ad 45  |..w...].\"^.U...E|\n+00000030  09 f1 3b b2 61 36 dc 3d  2a 1e 1f e5 a7 84 76 a9  |..;.a6.=*.....v.|\n+00000040  41 5b 86 03 ac 22 18 20  9b a9 29 17 03 03 00 40  |A[...\". ..)....@|\n 00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n-00000060  6b 1e 9a b5 a8 89 3c d0  05 08 cf 81 a7 02 b4 ed  |k.....<.........|\n-00000070  fa 21 e2 15 87 d0 78 ac  4b 8e fc d0 c5 0e b2 5c  |.!....x.K......\\|\n-00000080  bb c6 49 2a 80 00 67 93  37 4c a6 38 a7 24 f3 05  |..I*..g.7L.8.$..|\n+00000060  f5 cb 28 1e b5 bc 82 7f  82 38 54 14 e8 b9 6d 3b  |..(......8T...m;|\n+00000070  bc 99 d6 0e f9 00 96 99  a8 92 2e 86 9d 62 4e 90  |.............bN.|\n+00000080  27 52 58 45 20 93 90 a1  f3 a8 89 2b e7 21 24 16  |'RXE ......+.!$.|\n 00000090  15 03 03 00 30 00 00 00  00 00 00 00 00 00 00 00  |....0...........|\n-000000a0  00 00 00 00 00 50 ea de  de b1 ba e4 da b1 d2 3e  |.....P.........>|\n-000000b0  b3 ed 03 2f 8e 30 d5 20  f8 2a 65 d4 4c 1c b9 7f  |.../.0. .*e.L...|\n-000000c0  4c 0c 8f cf 5a                                    |L...Z|\n+000000a0  00 00 00 00 00 a8 2a ab  8f b0 ce 49 8b fd a5 c9  |......*....I....|\n+000000b0  11 b2 04 83 18 f3 1d 6c  82 34 1d df dd 2f 45 3b  |.......l.4.../E;|\n+000000c0  27 8a 0f 16 69                                    |'...i|"}, {"sha": "0ddfe022f22ea822dfdadca39d756235df52c74d", "filename": "libgo/go/crypto/tls/testdata/Server-TLSv12-RSA-AES-GCM", "status": "modified", "additions": 33, "deletions": 42, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-RSA-AES-GCM", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-RSA-AES-GCM", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftestdata%2FServer-TLSv12-RSA-AES-GCM?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -1,7 +1,7 @@\n >>> Flow 1 (client to server)\n-00000000  16 03 01 00 9c 01 00 00  98 03 03 52 cc 57 59 d3  |...........R.WY.|\n-00000010  91 67 1b de 52 be 25 1d  61 3b 45 29 43 aa 8a e9  |.g..R.%.a;E)C...|\n-00000020  fc 29 19 d5 59 aa 48 0d  21 8a eb 00 00 04 c0 2f  |.)..Y.H.!....../|\n+00000000  16 03 01 00 9c 01 00 00  98 03 03 53 04 f1 30 73  |...........S..0s|\n+00000010  a1 ea 8c d2 90 1c c6 d6  0d 3c af 58 21 65 90 25  |.........<.X!e.%|\n+00000020  5e fa f4 27 22 65 c9 68  90 b9 04 00 00 04 c0 2f  |^..'\"e.h......./|\n 00000030  00 ff 01 00 00 6b 00 0b  00 04 03 00 01 02 00 0a  |.....k..........|\n 00000040  00 34 00 32 00 0e 00 0d  00 19 00 0b 00 0c 00 18  |.4.2............|\n 00000050  00 09 00 0a 00 16 00 17  00 08 00 06 00 07 00 14  |................|\n@@ -58,45 +58,36 @@\n 000002c0  50 56 5c d5 82 5a 2d 5a  5f 33 c4 b6 d8 c9 75 90  |PV\\..Z-Z_3....u.|\n 000002d0  96 8c 0f 52 98 b5 cd 98  1f 89 20 5f f2 a0 1c a3  |...R...... _....|\n 000002e0  1b 96 94 dd a9 fd 57 e9  70 e8 26 6d 71 99 9b 26  |......W.p.&mq..&|\n-000002f0  6e 38 50 29 6c 90 a7 bd  d9 16 03 03 01 11 0c 00  |n8P)l...........|\n-00000300  01 0d 03 00 19 85 04 01  39 dc ee 44 17 5e db d7  |........9..D.^..|\n-00000310  27 af b6 56 d9 b4 43 5a  99 cf aa 31 37 0c 6f 3a  |'..V..CZ...17.o:|\n-00000320  a0 f8 53 c4 74 d1 91 0a  46 f5 38 3b 5c 09 d8 97  |..S.t...F.8;\\...|\n-00000330  dc 4b aa 70 26 48 f2 d6  0b 31 c9 f8 d4 98 43 e1  |.K.p&H...1....C.|\n-00000340  6c d5 c7 b2 8e 0b 01 e6  b6 00 28 80 7b fc 96 8f  |l.........(.{...|\n-00000350  0d a2 4f b0 79 af dc 61  28 63 33 78 f6 31 39 fd  |..O.y..a(c3x.19.|\n-00000360  8a f4 15 18 11 fe db d5  07 da 2c ed 49 a0 23 bf  |..........,.I.#.|\n-00000370  d0 3a 38 1d 54 ae 1c 7b  ea 29 ee d0 38 c1 76 a7  |.:8.T..{.)..8.v.|\n-00000380  7f 2a f4 ce 1e ac cc 94  79 90 33 04 01 00 80 5f  |.*......y.3...._|\n-00000390  c6 9e 6d 87 97 04 b5 c2  12 73 75 ff a5 40 d0 0f  |..m......su..@..|\n-000003a0  39 74 98 e5 1f 62 4c e8  9a af a0 d4 08 61 d4 53  |9t...bL......a.S|\n-000003b0  67 ee f6 27 45 1a ee 52  35 7a 5f 5b 54 4a de 9b  |g..'E..R5z_[TJ..|\n-000003c0  fb 9a a2 61 e1 db be b0  08 5d 4f fc b5 5d d3 bc  |...a.....]O..]..|\n-000003d0  c9 49 e2 b9 d8 52 52 79  d1 a3 8e da 7d 35 12 19  |.I...RRy....}5..|\n-000003e0  45 30 fb fd e7 e2 f4 00  43 78 64 ca 2b 6c 65 28  |E0......Cxd.+le(|\n-000003f0  8a 8d 83 4f cf 44 9a 19  89 4d 08 d8 85 b3 65 95  |...O.D...M....e.|\n-00000400  e8 47 4d 86 25 48 09 5c  77 7d 73 0c 6b 22 22 16  |.GM.%H.\\w}s.k\"\".|\n-00000410  03 03 00 04 0e 00 00 00                           |........|\n+000002f0  6e 38 50 29 6c 90 a7 bd  d9 16 03 03 00 cd 0c 00  |n8P)l...........|\n+00000300  00 c9 03 00 17 41 04 1e  18 37 ef 0d 19 51 88 35  |.....A...7...Q.5|\n+00000310  75 71 b5 e5 54 5b 12 2e  8f 09 67 fd a7 24 20 3e  |uq..T[....g..$ >|\n+00000320  b2 56 1c ce 97 28 5e f8  2b 2d 4f 9e f1 07 9f 6c  |.V...(^.+-O....l|\n+00000330  4b 5b 83 56 e2 32 42 e9  58 b6 d7 49 a6 b5 68 1a  |K[.V.2B.X..I..h.|\n+00000340  41 03 56 6b dc 5a 89 04  01 00 80 a2 54 61 84 29  |A.Vk.Z......Ta.)|\n+00000350  3e 97 4b 97 9a 9f 5c c0  49 6d 86 d2 79 8e 95 a1  |>.K...\\.Im..y...|\n+00000360  0a 5a 36 73 34 bb 05 73  35 47 e1 2b 5d f3 ef 36  |.Z6s4..s5G.+]..6|\n+00000370  a8 32 e2 7e ef aa 3f 1f  b3 64 60 d4 06 2e 98 e3  |.2.~..?..d`.....|\n+00000380  11 e2 60 3c d6 20 17 63  b2 6f a0 cd 21 01 2b 4e  |..`<. .c.o..!.+N|\n+00000390  b2 a8 55 04 39 37 5c 6c  71 66 4d a3 eb 1b 83 67  |..U.97\\lqfM....g|\n+000003a0  6b 15 a0 56 9a f1 a2 79  92 29 ce 58 3c 10 4d 65  |k..V...y.).X<.Me|\n+000003b0  1f 22 e3 ea d8 74 aa 01  7e ca f3 89 23 41 4d bd  |.\"...t..~...#AM.|\n+000003c0  df 77 4e 59 54 97 74 ad  07 ea c0 16 03 03 00 04  |.wNYT.t.........|\n+000003d0  0e 00 00 00                                       |....|\n >>> Flow 3 (client to server)\n-00000000  16 03 03 00 8a 10 00 00  86 85 04 01 4e f2 1d 1f  |............N...|\n-00000010  c0 23 cf 00 58 0b 25 ee  6b e1 5f 50 7b c9 15 9d  |.#..X.%.k._P{...|\n-00000020  d9 2f 8a f1 b8 7b 62 d2  6d d0 46 b8 6f 3f 2d 6f  |./...{b.m.F.o?-o|\n-00000030  ba 68 74 7e a3 b5 12 1c  93 d1 0a 13 e1 50 d7 82  |.ht~.........P..|\n-00000040  1b 4c 54 b5 73 a9 9e 72  80 4e bc 75 17 00 e1 f3  |.LT.s..r.N.u....|\n-00000050  70 03 80 1f d3 1f 2a 53  52 6a ee 4e 93 f4 10 1c  |p.....*SRj.N....|\n-00000060  2d ff 5f 6c a4 3b fa a1  7f 87 93 5d 76 b3 35 62  |-._l.;.....]v.5b|\n-00000070  0b 48 41 42 f9 57 65 4a  42 9e 53 7d 2c 09 37 02  |.HAB.WeJB.S},.7.|\n-00000080  55 bd 6f 0e 4d 05 17 8d  c5 df ff 54 da 94 d6 14  |U.o.M......T....|\n-00000090  03 03 00 01 01 16 03 03  00 28 38 e3 ad 08 8e e3  |.........(8.....|\n-000000a0  b8 bc 6d a2 15 35 b1 b2  28 47 82 63 30 9e b6 5c  |..m..5..(G.c0..\\|\n-000000b0  26 47 38 20 a0 77 e3 b2  38 8f 8b c4 96 ac f4 5c  |&G8 .w..8......\\|\n-000000c0  10 9f                                             |..|\n+00000000  16 03 03 00 46 10 00 00  42 41 04 45 65 ce f7 b9  |....F...BA.Ee...|\n+00000010  52 e3 fb 13 db 91 f2 65  43 84 57 f5 1a 19 a0 e6  |R......eC.W.....|\n+00000020  89 2d bb 2c 83 6b 62 f6  6f 1f 26 ae 59 67 bd dc  |.-.,.kb.o.&.Yg..|\n+00000030  c4 9e 0b dc 7d 6e f8 6b  95 8c 61 47 3d cd d1 df  |....}n.k..aG=...|\n+00000040  82 45 30 81 c3 a3 49 5d  85 59 70 14 03 03 00 01  |.E0...I].Yp.....|\n+00000050  01 16 03 03 00 28 3f aa  85 33 f9 c6 95 a0 56 ff  |.....(?..3....V.|\n+00000060  1c f1 5a ba 6e 41 50 0c  ab 92 e1 e2 8e 89 1c f1  |..Z.nAP.........|\n+00000070  fa 54 1b f1 f5 00 01 12  6d c4 96 78 b6 87        |.T......m..x..|\n >>> Flow 4 (server to client)\n 00000000  14 03 03 00 01 01 16 03  03 00 28 00 00 00 00 00  |..........(.....|\n-00000010  00 00 00 30 ae 4d 36 49  d1 d6 4d 1a 71 87 eb ed  |...0.M6I..M.q...|\n-00000020  d2 6f 66 3f 25 03 a5 69  04 5d ca e6 71 eb c2 06  |.of?%..i.]..q...|\n-00000030  b4 15 b7 17 03 03 00 25  00 00 00 00 00 00 00 01  |.......%........|\n-00000040  8d a6 27 08 34 77 a2 a7  f5 e6 c3 ca 49 25 db 9a  |..'.4w......I%..|\n-00000050  19 44 42 d1 0b c1 3a d6  73 b2 11 df 52 15 03 03  |.DB...:.s...R...|\n-00000060  00 1a 00 00 00 00 00 00  00 02 42 63 43 f7 98 69  |..........BcC..i|\n-00000070  d9 2b 38 6b 88 9d bf a2  8a 31 5d 54              |.+8k.....1]T|\n+00000010  00 00 00 94 5c be 46 05  d6 d0 b0 3a 56 dc 2c 10  |....\\.F....:V.,.|\n+00000020  0f 6f 5d 33 33 7f a5 4e  74 84 bf 63 87 c4 f4 49  |.o]33..Nt..c...I|\n+00000030  bc 6b ab 17 03 03 00 25  00 00 00 00 00 00 00 01  |.k.....%........|\n+00000040  7e 4f f9 ae ae fe 6b a0  4a f8 0f 0b b4 b6 65 b6  |~O....k.J.....e.|\n+00000050  be 24 5f 94 6d d1 db 54  11 07 b9 ce 01 15 03 03  |.$_.m..T........|\n+00000060  00 1a 00 00 00 00 00 00  00 02 a8 1c d6 62 ac fd  |.............b..|\n+00000070  77 ba 23 92 5d 34 f1 17  c7 e1 1c 99              |w.#.]4......|"}, {"sha": "d50e1202924a600ffeb2fd369661f319938d1127", "filename": "libgo/go/crypto/tls/tls.go", "status": "modified", "additions": 67, "deletions": 16, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftls.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftls.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftls.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -15,6 +15,7 @@ import (\n \t\"io/ioutil\"\n \t\"net\"\n \t\"strings\"\n+\t\"time\"\n )\n \n // Server returns a new TLS server side connection\n@@ -27,7 +28,7 @@ func Server(conn net.Conn, config *Config) *Conn {\n \n // Client returns a new TLS client side connection\n // using conn as the underlying transport.\n-// The config cannot be nil: users must set either ServerHostname or\n+// The config cannot be nil: users must set either ServerName or\n // InsecureSkipVerify in the config.\n func Client(conn net.Conn, config *Config) *Conn {\n \treturn &Conn{conn: conn, config: config, isClient: true}\n@@ -76,24 +77,51 @@ func Listen(network, laddr string, config *Config) (net.Listener, error) {\n \treturn NewListener(l, config), nil\n }\n \n-// Dial connects to the given network address using net.Dial\n-// and then initiates a TLS handshake, returning the resulting\n-// TLS connection.\n-// Dial interprets a nil configuration as equivalent to\n-// the zero configuration; see the documentation of Config\n-// for the defaults.\n-func Dial(network, addr string, config *Config) (*Conn, error) {\n-\traddr := addr\n-\tc, err := net.Dial(network, raddr)\n+type timeoutError struct{}\n+\n+func (timeoutError) Error() string   { return \"tls: DialWithDialer timed out\" }\n+func (timeoutError) Timeout() bool   { return true }\n+func (timeoutError) Temporary() bool { return true }\n+\n+// DialWithDialer connects to the given network address using dialer.Dial and\n+// then initiates a TLS handshake, returning the resulting TLS connection. Any\n+// timeout or deadline given in the dialer apply to connection and TLS\n+// handshake as a whole.\n+//\n+// DialWithDialer interprets a nil configuration as equivalent to the zero\n+// configuration; see the documentation of Config for the defaults.\n+func DialWithDialer(dialer *net.Dialer, network, addr string, config *Config) (*Conn, error) {\n+\t// We want the Timeout and Deadline values from dialer to cover the\n+\t// whole process: TCP connection and TLS handshake. This means that we\n+\t// also need to start our own timers now.\n+\ttimeout := dialer.Timeout\n+\n+\tif !dialer.Deadline.IsZero() {\n+\t\tdeadlineTimeout := dialer.Deadline.Sub(time.Now())\n+\t\tif timeout == 0 || deadlineTimeout < timeout {\n+\t\t\ttimeout = deadlineTimeout\n+\t\t}\n+\t}\n+\n+\tvar errChannel chan error\n+\n+\tif timeout != 0 {\n+\t\terrChannel = make(chan error, 2)\n+\t\ttime.AfterFunc(timeout, func() {\n+\t\t\terrChannel <- timeoutError{}\n+\t\t})\n+\t}\n+\n+\trawConn, err := dialer.Dial(network, addr)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \n-\tcolonPos := strings.LastIndex(raddr, \":\")\n+\tcolonPos := strings.LastIndex(addr, \":\")\n \tif colonPos == -1 {\n-\t\tcolonPos = len(raddr)\n+\t\tcolonPos = len(addr)\n \t}\n-\thostname := raddr[:colonPos]\n+\thostname := addr[:colonPos]\n \n \tif config == nil {\n \t\tconfig = defaultConfig()\n@@ -106,14 +134,37 @@ func Dial(network, addr string, config *Config) (*Conn, error) {\n \t\tc.ServerName = hostname\n \t\tconfig = &c\n \t}\n-\tconn := Client(c, config)\n-\tif err = conn.Handshake(); err != nil {\n-\t\tc.Close()\n+\n+\tconn := Client(rawConn, config)\n+\n+\tif timeout == 0 {\n+\t\terr = conn.Handshake()\n+\t} else {\n+\t\tgo func() {\n+\t\t\terrChannel <- conn.Handshake()\n+\t\t}()\n+\n+\t\terr = <-errChannel\n+\t}\n+\n+\tif err != nil {\n+\t\trawConn.Close()\n \t\treturn nil, err\n \t}\n+\n \treturn conn, nil\n }\n \n+// Dial connects to the given network address using net.Dial\n+// and then initiates a TLS handshake, returning the resulting\n+// TLS connection.\n+// Dial interprets a nil configuration as equivalent to\n+// the zero configuration; see the documentation of Config\n+// for the defaults.\n+func Dial(network, addr string, config *Config) (*Conn, error) {\n+\treturn DialWithDialer(new(net.Dialer), network, addr, config)\n+}\n+\n // LoadX509KeyPair reads and parses a public/private key pair from a pair of\n // files. The files must contain PEM encoded data.\n func LoadX509KeyPair(certFile, keyFile string) (cert Certificate, err error) {"}, {"sha": "f8c94ff35d4735553915ed64d50eb176cff2a04d", "filename": "libgo/go/crypto/tls/tls_test.go", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftls_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Ftls%2Ftls_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftls_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -5,7 +5,12 @@\n package tls\n \n import (\n+\t\"fmt\"\n+\t\"io\"\n+\t\"net\"\n+\t\"strings\"\n \t\"testing\"\n+\t\"time\"\n )\n \n var rsaCertPEM = `-----BEGIN CERTIFICATE-----\n@@ -105,3 +110,128 @@ func TestX509MixedKeyPair(t *testing.T) {\n \t\tt.Error(\"Load of ECDSA certificate succeeded with RSA private key\")\n \t}\n }\n+\n+func newLocalListener(t *testing.T) net.Listener {\n+\tln, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\n+\tif err != nil {\n+\t\tln, err = net.Listen(\"tcp6\", \"[::1]:0\")\n+\t}\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\treturn ln\n+}\n+\n+func TestDialTimeout(t *testing.T) {\n+\tif testing.Short() {\n+\t\tt.Skip(\"skipping in short mode\")\n+\t}\n+\tlistener := newLocalListener(t)\n+\n+\taddr := listener.Addr().String()\n+\tdefer listener.Close()\n+\n+\tcomplete := make(chan bool)\n+\tdefer close(complete)\n+\n+\tgo func() {\n+\t\tconn, err := listener.Accept()\n+\t\tif err != nil {\n+\t\t\tt.Error(err)\n+\t\t\treturn\n+\t\t}\n+\t\t<-complete\n+\t\tconn.Close()\n+\t}()\n+\n+\tdialer := &net.Dialer{\n+\t\tTimeout: 10 * time.Millisecond,\n+\t}\n+\n+\tvar err error\n+\tif _, err = DialWithDialer(dialer, \"tcp\", addr, nil); err == nil {\n+\t\tt.Fatal(\"DialWithTimeout completed successfully\")\n+\t}\n+\n+\tif !strings.Contains(err.Error(), \"timed out\") {\n+\t\tt.Errorf(\"resulting error not a timeout: %s\", err)\n+\t}\n+}\n+\n+// tests that Conn.Read returns (non-zero, io.EOF) instead of\n+// (non-zero, nil) when a Close (alertCloseNotify) is sitting right\n+// behind the application data in the buffer.\n+func TestConnReadNonzeroAndEOF(t *testing.T) {\n+\t// This test is racy: it assumes that after a write to a\n+\t// localhost TCP connection, the peer TCP connection can\n+\t// immediately read it.  Because it's racy, we skip this test\n+\t// in short mode, and then retry it several times with an\n+\t// increasing sleep in between our final write (via srv.Close\n+\t// below) and the following read.\n+\tif testing.Short() {\n+\t\tt.Skip(\"skipping in short mode\")\n+\t}\n+\tvar err error\n+\tfor delay := time.Millisecond; delay <= 64*time.Millisecond; delay *= 2 {\n+\t\tif err = testConnReadNonzeroAndEOF(t, delay); err == nil {\n+\t\t\treturn\n+\t\t}\n+\t}\n+\tt.Error(err)\n+}\n+\n+func testConnReadNonzeroAndEOF(t *testing.T, delay time.Duration) error {\n+\tln := newLocalListener(t)\n+\tdefer ln.Close()\n+\n+\tsrvCh := make(chan *Conn, 1)\n+\tvar serr error\n+\tgo func() {\n+\t\tsconn, err := ln.Accept()\n+\t\tif err != nil {\n+\t\t\tserr = err\n+\t\t\tsrvCh <- nil\n+\t\t\treturn\n+\t\t}\n+\t\tserverConfig := *testConfig\n+\t\tsrv := Server(sconn, &serverConfig)\n+\t\tif err := srv.Handshake(); err != nil {\n+\t\t\tserr = fmt.Errorf(\"handshake: %v\", err)\n+\t\t\tsrvCh <- nil\n+\t\t\treturn\n+\t\t}\n+\t\tsrvCh <- srv\n+\t}()\n+\n+\tclientConfig := *testConfig\n+\tconn, err := Dial(\"tcp\", ln.Addr().String(), &clientConfig)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer conn.Close()\n+\n+\tsrv := <-srvCh\n+\tif srv == nil {\n+\t\treturn serr\n+\t}\n+\n+\tbuf := make([]byte, 6)\n+\n+\tsrv.Write([]byte(\"foobar\"))\n+\tn, err := conn.Read(buf)\n+\tif n != 6 || err != nil || string(buf) != \"foobar\" {\n+\t\treturn fmt.Errorf(\"Read = %d, %v, data %q; want 6, nil, foobar\", n, err, buf)\n+\t}\n+\n+\tsrv.Write([]byte(\"abcdef\"))\n+\tsrv.Close()\n+\ttime.Sleep(delay)\n+\tn, err = conn.Read(buf)\n+\tif n != 6 || string(buf) != \"abcdef\" {\n+\t\treturn fmt.Errorf(\"Read = %d, buf= %q; want 6, abcdef\", n, buf)\n+\t}\n+\tif err != io.EOF {\n+\t\treturn fmt.Errorf(\"Second Read error = %v; want io.EOF\", err)\n+\t}\n+\treturn nil\n+}"}, {"sha": "11ad3c440d20468f8f6a9cba43fdde9f839a7809", "filename": "libgo/go/crypto/x509/root_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fx509%2Froot_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fx509%2Froot_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Froot_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build dragonfly freebsd linux openbsd netbsd solaris\n+// +build dragonfly freebsd linux nacl netbsd openbsd solaris\n \n package x509\n "}, {"sha": "96b9d9b420b09147b9f3ac80b85718c5cb733789", "filename": "libgo/go/crypto/x509/verify_test.go", "status": "modified", "additions": 276, "deletions": 91, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fx509%2Fverify_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fx509%2Fverify_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fverify_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -31,8 +31,8 @@ type verifyTest struct {\n var verifyTests = []verifyTest{\n \t{\n \t\tleaf:                 googleLeaf,\n-\t\tintermediates:        []string{thawteIntermediate},\n-\t\tcurrentTime:          1302726541,\n+\t\tintermediates:        []string{giag2Intermediate},\n+\t\tcurrentTime:          1395785200,\n \t\tdnsName:              \"www.google.com\",\n \t\ttestSystemRootsError: true,\n \n@@ -42,48 +42,48 @@ var verifyTests = []verifyTest{\n \t},\n \t{\n \t\tleaf:          googleLeaf,\n-\t\tintermediates: []string{thawteIntermediate},\n-\t\troots:         []string{verisignRoot},\n-\t\tcurrentTime:   1302726541,\n+\t\tintermediates: []string{giag2Intermediate},\n+\t\troots:         []string{geoTrustRoot},\n+\t\tcurrentTime:   1395785200,\n \t\tdnsName:       \"www.google.com\",\n \n \t\texpectedChains: [][]string{\n-\t\t\t{\"Google\", \"Thawte\", \"VeriSign\"},\n+\t\t\t{\"Google\", \"Google Internet Authority\", \"GeoTrust\"},\n \t\t},\n \t},\n \t{\n \t\tleaf:          googleLeaf,\n-\t\tintermediates: []string{thawteIntermediate},\n-\t\troots:         []string{verisignRoot},\n-\t\tcurrentTime:   1302726541,\n+\t\tintermediates: []string{giag2Intermediate},\n+\t\troots:         []string{geoTrustRoot},\n+\t\tcurrentTime:   1395785200,\n \t\tdnsName:       \"WwW.GooGLE.coM\",\n \n \t\texpectedChains: [][]string{\n-\t\t\t{\"Google\", \"Thawte\", \"VeriSign\"},\n+\t\t\t{\"Google\", \"Google Internet Authority\", \"GeoTrust\"},\n \t\t},\n \t},\n \t{\n \t\tleaf:          googleLeaf,\n-\t\tintermediates: []string{thawteIntermediate},\n-\t\troots:         []string{verisignRoot},\n-\t\tcurrentTime:   1302726541,\n+\t\tintermediates: []string{giag2Intermediate},\n+\t\troots:         []string{geoTrustRoot},\n+\t\tcurrentTime:   1395785200,\n \t\tdnsName:       \"www.example.com\",\n \n \t\terrorCallback: expectHostnameError,\n \t},\n \t{\n \t\tleaf:          googleLeaf,\n-\t\tintermediates: []string{thawteIntermediate},\n-\t\troots:         []string{verisignRoot},\n+\t\tintermediates: []string{giag2Intermediate},\n+\t\troots:         []string{geoTrustRoot},\n \t\tcurrentTime:   1,\n \t\tdnsName:       \"www.example.com\",\n \n \t\terrorCallback: expectExpired,\n \t},\n \t{\n \t\tleaf:        googleLeaf,\n-\t\troots:       []string{verisignRoot},\n-\t\tcurrentTime: 1302726541,\n+\t\troots:       []string{geoTrustRoot},\n+\t\tcurrentTime: 1395785200,\n \t\tdnsName:     \"www.google.com\",\n \n \t\t// Skip when using systemVerify, since Windows\n@@ -93,14 +93,22 @@ var verifyTests = []verifyTest{\n \t},\n \t{\n \t\tleaf:          googleLeaf,\n-\t\tintermediates: []string{verisignRoot, thawteIntermediate},\n-\t\troots:         []string{verisignRoot},\n-\t\tcurrentTime:   1302726541,\n+\t\tintermediates: []string{geoTrustRoot, giag2Intermediate},\n+\t\troots:         []string{geoTrustRoot},\n+\t\tcurrentTime:   1395785200,\n \t\tdnsName:       \"www.google.com\",\n \n \t\texpectedChains: [][]string{\n-\t\t\t{\"Google\", \"Thawte\", \"VeriSign\"},\n+\t\t\t{\"Google\", \"Google Internet Authority\", \"GeoTrust\"},\n+\t\t\t// TODO(agl): this is ok, but it would be nice if the\n+\t\t\t//            chain building didn't visit the same SPKI\n+\t\t\t//            twice.\n+\t\t\t{\"Google\", \"Google Internet Authority\", \"GeoTrust\", \"GeoTrust\"},\n \t\t},\n+\t\t// CAPI doesn't build the chain with the duplicated GeoTrust\n+\t\t// entry so the results don't match. Thus we skip this test\n+\t\t// until that's fixed.\n+\t\tsystemSkip: true,\n \t},\n \t{\n \t\tleaf:          dnssecExpLeaf,\n@@ -128,9 +136,9 @@ var verifyTests = []verifyTest{\n \t},\n \t{\n \t\tleaf:          googleLeafWithInvalidHash,\n-\t\tintermediates: []string{thawteIntermediate},\n-\t\troots:         []string{verisignRoot},\n-\t\tcurrentTime:   1302726541,\n+\t\tintermediates: []string{giag2Intermediate},\n+\t\troots:         []string{geoTrustRoot},\n+\t\tcurrentTime:   1395785200,\n \t\tdnsName:       \"www.google.com\",\n \n \t\t// The specific error message may not occur when using system\n@@ -201,6 +209,24 @@ var verifyTests = []verifyTest{\n \t\t\t},\n \t\t},\n \t},\n+\t{\n+\t\t// Check that SHA-384 intermediates (which are popping up)\n+\t\t// work.\n+\t\tleaf:          moipLeafCert,\n+\t\tintermediates: []string{comodoIntermediateSHA384, comodoRSAAuthority},\n+\t\troots:         []string{addTrustRoot},\n+\t\tcurrentTime:   1397502195,\n+\t\tdnsName:       \"api.moip.com.br\",\n+\n+\t\texpectedChains: [][]string{\n+\t\t\t{\n+\t\t\t\t\"api.moip.com.br\",\n+\t\t\t\t\"COMODO RSA Extended Validation Secure Server CA\",\n+\t\t\t\t\"COMODO RSA Certification Authority\",\n+\t\t\t\t\"AddTrust External CA Root\",\n+\t\t\t},\n+\t\t},\n+\t},\n }\n \n func expectHostnameError(t *testing.T, i int, err error) (ok bool) {\n@@ -385,84 +411,111 @@ func nameToKey(name *pkix.Name) string {\n \treturn strings.Join(name.Country, \",\") + \"/\" + strings.Join(name.Organization, \",\") + \"/\" + strings.Join(name.OrganizationalUnit, \",\") + \"/\" + name.CommonName\n }\n \n-const verisignRoot = `-----BEGIN CERTIFICATE-----\n-MIICPDCCAaUCEHC65B0Q2Sk0tjjKewPMur8wDQYJKoZIhvcNAQECBQAwXzELMAkG\n-A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz\n-cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2\n-MDEyOTAwMDAwMFoXDTI4MDgwMTIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV\n-BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt\n-YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN\n-ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE\n-BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is\n-I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G\n-CSqGSIb3DQEBAgUAA4GBALtMEivPLCYATxQT3ab7/AoRhIzzKBxnki98tsX63/Do\n-lbwdj2wsqFHMc9ikwFPwTtYmwHYBV4GSXiHx0bH/59AhWM1pF+NEHJwZRDmJXNyc\n-AA9WjQKZ7aKQRUzkuxCkPfAyAw7xzvjoyVGM5mKf5p/AfbdynMk2OmufTqj/ZA1k\n+const geoTrustRoot = `-----BEGIN CERTIFICATE-----\n+MIIDVDCCAjygAwIBAgIDAjRWMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT\n+MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i\n+YWwgQ0EwHhcNMDIwNTIxMDQwMDAwWhcNMjIwNTIxMDQwMDAwWjBCMQswCQYDVQQG\n+EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMSR2VvVHJ1c3Qg\n+R2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2swYYzD9\n+9BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9mOSm9BXiLnTjoBbdq\n+fnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIuT8rxh0PBFpVXLVDv\n+iS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6cJmTM386DGXHKTubU\n+1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmRCw7+OC7RHQWa9k0+\n+bw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5aszPeE4uwc2hGKceeoW\n+MPRfwCvocWvk+QIDAQABo1MwUTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTA\n+ephojYn7qwVkDBF9qn1luMrMTjAfBgNVHSMEGDAWgBTAephojYn7qwVkDBF9qn1l\n+uMrMTjANBgkqhkiG9w0BAQUFAAOCAQEANeMpauUvXVSOKVCUn5kaFOSPeCpilKIn\n+Z57QzxpeR+nBsqTP3UEaBU6bS+5Kb1VSsyShNwrrZHYqLizz/Tt1kL/6cdjHPTfS\n+tQWVYrmm3ok9Nns4d0iXrKYgjy6myQzCsplFAMfOEVEiIuCl6rYVSAlk6l5PdPcF\n+PseKUgzbFbS9bZvlxrFUaKnjaZC2mqUPuLk/IH2uSrW4nOQdtqvmlKXBx4Ot2/Un\n+hw4EbNX/3aBd7YdStysVAq45pmp06drE57xNNB6pXE0zX5IJL4hmXXeXxx12E6nV\n+5fEWCRE11azbJHFwLJhWC9kXtNHjUStedejV0NxPNO3CBWaAocvmMw==\n -----END CERTIFICATE-----\n `\n \n-const thawteIntermediate = `-----BEGIN CERTIFICATE-----\n-MIIDIzCCAoygAwIBAgIEMAAAAjANBgkqhkiG9w0BAQUFADBfMQswCQYDVQQGEwJV\n-UzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xNzA1BgNVBAsTLkNsYXNzIDMgUHVi\n-bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQwNTEzMDAw\n-MDAwWhcNMTQwNTEyMjM1OTU5WjBMMQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhh\n-d3RlIENvbnN1bHRpbmcgKFB0eSkgTHRkLjEWMBQGA1UEAxMNVGhhd3RlIFNHQyBD\n-QTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA1NNn0I0Vf67NMf59HZGhPwtx\n-PKzMyGT7Y/wySweUvW+Aui/hBJPAM/wJMyPpC3QrccQDxtLN4i/1CWPN/0ilAL/g\n-5/OIty0y3pg25gqtAHvEZEo7hHUD8nCSfQ5i9SGraTaEMXWQ+L/HbIgbBpV8yeWo\n-3nWhLHpo39XKHIdYYBkCAwEAAaOB/jCB+zASBgNVHRMBAf8ECDAGAQH/AgEAMAsG\n-A1UdDwQEAwIBBjARBglghkgBhvhCAQEEBAMCAQYwKAYDVR0RBCEwH6QdMBsxGTAX\n-BgNVBAMTEFByaXZhdGVMYWJlbDMtMTUwMQYDVR0fBCowKDAmoCSgIoYgaHR0cDov\n-L2NybC52ZXJpc2lnbi5jb20vcGNhMy5jcmwwMgYIKwYBBQUHAQEEJjAkMCIGCCsG\n-AQUFBzABhhZodHRwOi8vb2NzcC50aGF3dGUuY29tMDQGA1UdJQQtMCsGCCsGAQUF\n-BwMBBggrBgEFBQcDAgYJYIZIAYb4QgQBBgpghkgBhvhFAQgBMA0GCSqGSIb3DQEB\n-BQUAA4GBAFWsY+reod3SkF+fC852vhNRj5PZBSvIG3dLrWlQoe7e3P3bB+noOZTc\n-q3J5Lwa/q4FwxKjt6lM07e8eU9kGx1Yr0Vz00YqOtCuxN5BICEIlxT6Ky3/rbwTR\n-bcV0oveifHtgPHfNDs5IAn8BL7abN+AqKjbc1YXWrOU/VG+WHgWv\n+const giag2Intermediate = `-----BEGIN CERTIFICATE-----\n+MIIEBDCCAuygAwIBAgIDAjppMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT\n+MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i\n+YWwgQ0EwHhcNMTMwNDA1MTUxNTU1WhcNMTUwNDA0MTUxNTU1WjBJMQswCQYDVQQG\n+EwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzElMCMGA1UEAxMcR29vZ2xlIEludGVy\n+bmV0IEF1dGhvcml0eSBHMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\n+AJwqBHdc2FCROgajguDYUEi8iT/xGXAaiEZ+4I/F8YnOIe5a/mENtzJEiaB0C1NP\n+VaTOgmKV7utZX8bhBYASxF6UP7xbSDj0U/ck5vuR6RXEz/RTDfRK/J9U3n2+oGtv\n+h8DQUB8oMANA2ghzUWx//zo8pzcGjr1LEQTrfSTe5vn8MXH7lNVg8y5Kr0LSy+rE\n+ahqyzFPdFUuLH8gZYR/Nnag+YyuENWllhMgZxUYi+FOVvuOAShDGKuy6lyARxzmZ\n+EASg8GF6lSWMTlJ14rbtCMoU/M4iarNOz0YDl5cDfsCx3nuvRTPPuj5xt970JSXC\n+DTWJnZ37DhF5iR43xa+OcmkCAwEAAaOB+zCB+DAfBgNVHSMEGDAWgBTAephojYn7\n+qwVkDBF9qn1luMrMTjAdBgNVHQ4EFgQUSt0GFhu89mi1dvWBtrtiGrpagS8wEgYD\n+VR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAQYwOgYDVR0fBDMwMTAvoC2g\n+K4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20vY3Jscy9ndGdsb2JhbC5jcmwwPQYI\n+KwYBBQUHAQEEMTAvMC0GCCsGAQUFBzABhiFodHRwOi8vZ3RnbG9iYWwtb2NzcC5n\n+ZW90cnVzdC5jb20wFwYDVR0gBBAwDjAMBgorBgEEAdZ5AgUBMA0GCSqGSIb3DQEB\n+BQUAA4IBAQA21waAESetKhSbOHezI6B1WLuxfoNCunLaHtiONgaX4PCVOzf9G0JY\n+/iLIa704XtE7JW4S615ndkZAkNoUyHgN7ZVm2o6Gb4ChulYylYbc3GrKBIxbf/a/\n+zG+FA1jDaFETzf3I93k9mTXwVqO94FntT0QJo544evZG0R0SnU++0ED8Vf4GXjza\n+HFa9llF7b1cq26KqltyMdMKVvvBulRP/F/A8rLIQjcxz++iPAsbw+zOzlTvjwsto\n+WHPbqCRiOwY1nQ2pM714A5AuTHhdUDqB1O6gyHA43LL5Z/qHQF1hwFGPa4NrzQU6\n+yuGnBXj8ytqU0CwIPX4WecigUCAkVDNx\n -----END CERTIFICATE-----\n `\n \n const googleLeaf = `-----BEGIN CERTIFICATE-----\n-MIIDITCCAoqgAwIBAgIQL9+89q6RUm0PmqPfQDQ+mjANBgkqhkiG9w0BAQUFADBM\n-MQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhhd3RlIENvbnN1bHRpbmcgKFB0eSkg\n-THRkLjEWMBQGA1UEAxMNVGhhd3RlIFNHQyBDQTAeFw0wOTEyMTgwMDAwMDBaFw0x\n-MTEyMTgyMzU5NTlaMGgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlh\n-MRYwFAYDVQQHFA1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKFApHb29nbGUgSW5jMRcw\n-FQYDVQQDFA53d3cuZ29vZ2xlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkC\n-gYEA6PmGD5D6htffvXImttdEAoN4c9kCKO+IRTn7EOh8rqk41XXGOOsKFQebg+jN\n-gtXj9xVoRaELGYW84u+E593y17iYwqG7tcFR39SDAqc9BkJb4SLD3muFXxzW2k6L\n-05vuuWciKh0R73mkszeK9P4Y/bz5RiNQl/Os/CRGK1w7t0UCAwEAAaOB5zCB5DAM\n-BgNVHRMBAf8EAjAAMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwudGhhd3Rl\n-LmNvbS9UaGF3dGVTR0NDQS5jcmwwKAYDVR0lBCEwHwYIKwYBBQUHAwEGCCsGAQUF\n-BwMCBglghkgBhvhCBAEwcgYIKwYBBQUHAQEEZjBkMCIGCCsGAQUFBzABhhZodHRw\n-Oi8vb2NzcC50aGF3dGUuY29tMD4GCCsGAQUFBzAChjJodHRwOi8vd3d3LnRoYXd0\n-ZS5jb20vcmVwb3NpdG9yeS9UaGF3dGVfU0dDX0NBLmNydDANBgkqhkiG9w0BAQUF\n-AAOBgQCfQ89bxFApsb/isJr/aiEdLRLDLE5a+RLizrmCUi3nHX4adpaQedEkUjh5\n-u2ONgJd8IyAPkU0Wueru9G2Jysa9zCRo1kNbzipYvzwY4OA8Ys+WAi0oR1A04Se6\n-z5nRUP8pJcA2NhUzUnC+MY+f6H/nEQyNv4SgQhqAibAxWEEHXw==\n------END CERTIFICATE-----`\n+MIIEdjCCA16gAwIBAgIIcR5k4dkoe04wDQYJKoZIhvcNAQEFBQAwSTELMAkGA1UE\n+BhMCVVMxEzARBgNVBAoTCkdvb2dsZSBJbmMxJTAjBgNVBAMTHEdvb2dsZSBJbnRl\n+cm5ldCBBdXRob3JpdHkgRzIwHhcNMTQwMzEyMDkzODMwWhcNMTQwNjEwMDAwMDAw\n+WjBoMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwN\n+TW91bnRhaW4gVmlldzETMBEGA1UECgwKR29vZ2xlIEluYzEXMBUGA1UEAwwOd3d3\n+Lmdvb2dsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC4zYCe\n+m0oUBhwE0EwBr65eBOcgcQO2PaSIAB2dEP/c1EMX2tOy0ov8rk83ePhJ+MWdT1z6\n+jge9X4zQQI8ZyA9qIiwrKBZOi8DNUvrqNZC7fJAVRrb9aX/99uYOJCypIbpmWG1q\n+fhbHjJewhwf8xYPj71eU4rLG80a+DapWmphtfq3h52lDQIBzLVf1yYbyrTaELaz4\n+NXF7HXb5YkId/gxIsSzM0aFUVu2o8sJcLYAsJqwfFKBKOMxUcn545nlspf0mTcWZ\n+0APlbwsKznNs4/xCDwIxxWjjqgHrYAFl6y07i1gzbAOqdNEyR24p+3JWI8WZBlBI\n+dk2KGj0W1fIfsvyxAgMBAAGjggFBMIIBPTAdBgNVHSUEFjAUBggrBgEFBQcDAQYI\n+KwYBBQUHAwIwGQYDVR0RBBIwEIIOd3d3Lmdvb2dsZS5jb20waAYIKwYBBQUHAQEE\n+XDBaMCsGCCsGAQUFBzAChh9odHRwOi8vcGtpLmdvb2dsZS5jb20vR0lBRzIuY3J0\n+MCsGCCsGAQUFBzABhh9odHRwOi8vY2xpZW50czEuZ29vZ2xlLmNvbS9vY3NwMB0G\n+A1UdDgQWBBTXD5Bx6iqT+dmEhbFL4OUoHyZn8zAMBgNVHRMBAf8EAjAAMB8GA1Ud\n+IwQYMBaAFErdBhYbvPZotXb1gba7Yhq6WoEvMBcGA1UdIAQQMA4wDAYKKwYBBAHW\n+eQIFATAwBgNVHR8EKTAnMCWgI6Ahhh9odHRwOi8vcGtpLmdvb2dsZS5jb20vR0lB\n+RzIuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCR3RJtHzgDh33b/MI1ugiki+nl8Ikj\n+5larbJRE/rcA5oite+QJyAr6SU1gJJ/rRrK3ItVEHr9L621BCM7GSdoNMjB9MMcf\n+tJAW0kYGJ+wqKm53wG/JaOADTnnq2Mt/j6F2uvjgN/ouns1nRHufIvd370N0LeH+\n+orKqTuAPzXK7imQk6+OycYABbqCtC/9qmwRd8wwn7sF97DtYfK8WuNHtFalCAwyi\n+8LxJJYJCLWoMhZ+V8GZm+FOex5qkQAjnZrtNlbQJ8ro4r+rpKXtmMFFhfa+7L+PA\n+Kom08eUK8skxAzfDDijZPh10VtJ66uBoiDPdT+uCBehcBIcmSTrKjFGX\n+-----END CERTIFICATE-----\n+`\n \n // googleLeafWithInvalidHash is the same as googleLeaf, but the signature\n // algorithm in the certificate contains a nonsense OID.\n const googleLeafWithInvalidHash = `-----BEGIN CERTIFICATE-----\n-MIIDITCCAoqgAwIBAgIQL9+89q6RUm0PmqPfQDQ+mjANBgkqhkiG9w0BATIFADBM\n-MQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhhd3RlIENvbnN1bHRpbmcgKFB0eSkg\n-THRkLjEWMBQGA1UEAxMNVGhhd3RlIFNHQyBDQTAeFw0wOTEyMTgwMDAwMDBaFw0x\n-MTEyMTgyMzU5NTlaMGgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlh\n-MRYwFAYDVQQHFA1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKFApHb29nbGUgSW5jMRcw\n-FQYDVQQDFA53d3cuZ29vZ2xlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkC\n-gYEA6PmGD5D6htffvXImttdEAoN4c9kCKO+IRTn7EOh8rqk41XXGOOsKFQebg+jN\n-gtXj9xVoRaELGYW84u+E593y17iYwqG7tcFR39SDAqc9BkJb4SLD3muFXxzW2k6L\n-05vuuWciKh0R73mkszeK9P4Y/bz5RiNQl/Os/CRGK1w7t0UCAwEAAaOB5zCB5DAM\n-BgNVHRMBAf8EAjAAMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwudGhhd3Rl\n-LmNvbS9UaGF3dGVTR0NDQS5jcmwwKAYDVR0lBCEwHwYIKwYBBQUHAwEGCCsGAQUF\n-BwMCBglghkgBhvhCBAEwcgYIKwYBBQUHAQEEZjBkMCIGCCsGAQUFBzABhhZodHRw\n-Oi8vb2NzcC50aGF3dGUuY29tMD4GCCsGAQUFBzAChjJodHRwOi8vd3d3LnRoYXd0\n-ZS5jb20vcmVwb3NpdG9yeS9UaGF3dGVfU0dDX0NBLmNydDANBgkqhkiG9w0BAVAF\n-AAOBgQCfQ89bxFApsb/isJr/aiEdLRLDLE5a+RLizrmCUi3nHX4adpaQedEkUjh5\n-u2ONgJd8IyAPkU0Wueru9G2Jysa9zCRo1kNbzipYvzwY4OA8Ys+WAi0oR1A04Se6\n-z5nRUP8pJcA2NhUzUnC+MY+f6H/nEQyNv4SgQhqAibAxWEEHXw==\n------END CERTIFICATE-----`\n+MIIEdjCCA16gAwIBAgIIcR5k4dkoe04wDQYJKoZIhvcNAWAFBQAwSTELMAkGA1UE\n+BhMCVVMxEzARBgNVBAoTCkdvb2dsZSBJbmMxJTAjBgNVBAMTHEdvb2dsZSBJbnRl\n+cm5ldCBBdXRob3JpdHkgRzIwHhcNMTQwMzEyMDkzODMwWhcNMTQwNjEwMDAwMDAw\n+WjBoMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwN\n+TW91bnRhaW4gVmlldzETMBEGA1UECgwKR29vZ2xlIEluYzEXMBUGA1UEAwwOd3d3\n+Lmdvb2dsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC4zYCe\n+m0oUBhwE0EwBr65eBOcgcQO2PaSIAB2dEP/c1EMX2tOy0ov8rk83ePhJ+MWdT1z6\n+jge9X4zQQI8ZyA9qIiwrKBZOi8DNUvrqNZC7fJAVRrb9aX/99uYOJCypIbpmWG1q\n+fhbHjJewhwf8xYPj71eU4rLG80a+DapWmphtfq3h52lDQIBzLVf1yYbyrTaELaz4\n+NXF7HXb5YkId/gxIsSzM0aFUVu2o8sJcLYAsJqwfFKBKOMxUcn545nlspf0mTcWZ\n+0APlbwsKznNs4/xCDwIxxWjjqgHrYAFl6y07i1gzbAOqdNEyR24p+3JWI8WZBlBI\n+dk2KGj0W1fIfsvyxAgMBAAGjggFBMIIBPTAdBgNVHSUEFjAUBggrBgEFBQcDAQYI\n+KwYBBQUHAwIwGQYDVR0RBBIwEIIOd3d3Lmdvb2dsZS5jb20waAYIKwYBBQUHAQEE\n+XDBaMCsGCCsGAQUFBzAChh9odHRwOi8vcGtpLmdvb2dsZS5jb20vR0lBRzIuY3J0\n+MCsGCCsGAQUFBzABhh9odHRwOi8vY2xpZW50czEuZ29vZ2xlLmNvbS9vY3NwMB0G\n+A1UdDgQWBBTXD5Bx6iqT+dmEhbFL4OUoHyZn8zAMBgNVHRMBAf8EAjAAMB8GA1Ud\n+IwQYMBaAFErdBhYbvPZotXb1gba7Yhq6WoEvMBcGA1UdIAQQMA4wDAYKKwYBBAHW\n+eQIFATAwBgNVHR8EKTAnMCWgI6Ahhh9odHRwOi8vcGtpLmdvb2dsZS5jb20vR0lB\n+RzIuY3JsMA0GCSqGSIb3DQFgBQUAA4IBAQCR3RJtHzgDh33b/MI1ugiki+nl8Ikj\n+5larbJRE/rcA5oite+QJyAr6SU1gJJ/rRrK3ItVEHr9L621BCM7GSdoNMjB9MMcf\n+tJAW0kYGJ+wqKm53wG/JaOADTnnq2Mt/j6F2uvjgN/ouns1nRHufIvd370N0LeH+\n+orKqTuAPzXK7imQk6+OycYABbqCtC/9qmwRd8wwn7sF97DtYfK8WuNHtFalCAwyi\n+8LxJJYJCLWoMhZ+V8GZm+FOex5qkQAjnZrtNlbQJ8ro4r+rpKXtmMFFhfa+7L+PA\n+Kom08eUK8skxAzfDDijZPh10VtJ66uBoiDPdT+uCBehcBIcmSTrKjFGX\n+-----END CERTIFICATE-----\n+`\n \n const dnssecExpLeaf = `-----BEGIN CERTIFICATE-----\n MIIGzTCCBbWgAwIBAgIDAdD6MA0GCSqGSIb3DQEBBQUAMIGMMQswCQYDVQQGEwJJ\n@@ -936,3 +989,135 @@ AbEVtQwdpf5pLGkkeB6zpxxxYu7KyJesF12KwvhHhm4qxFYxldBniYUr+WymXUad\n DKqC5JlR3XC321Y9YeRq4VzW9v493kHMB65jUr9TU/Qr6cf9tveCX4XSQRjbgbME\n HMUfpIBvFSDJ3gyICh3WZlXi/EjJKSZp4A==\n -----END CERTIFICATE-----`\n+\n+var moipLeafCert = `-----BEGIN CERTIFICATE-----\n+MIIGQDCCBSigAwIBAgIRAPe/cwh7CUWizo8mYSDavLIwDQYJKoZIhvcNAQELBQAw\n+gZIxCzAJBgNVBAYTAkdCMRswGQYDVQQIExJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAO\n+BgNVBAcTB1NhbGZvcmQxGjAYBgNVBAoTEUNPTU9ETyBDQSBMaW1pdGVkMTgwNgYD\n+VQQDEy9DT01PRE8gUlNBIEV4dGVuZGVkIFZhbGlkYXRpb24gU2VjdXJlIFNlcnZl\n+ciBDQTAeFw0xMzA4MTUwMDAwMDBaFw0xNDA4MTUyMzU5NTlaMIIBQjEXMBUGA1UE\n+BRMOMDg3MTg0MzEwMDAxMDgxEzARBgsrBgEEAYI3PAIBAxMCQlIxGjAYBgsrBgEE\n+AYI3PAIBAhMJU2FvIFBhdWxvMR0wGwYDVQQPExRQcml2YXRlIE9yZ2FuaXphdGlv\n+bjELMAkGA1UEBhMCQlIxETAPBgNVBBETCDAxNDUyMDAwMRIwEAYDVQQIEwlTYW8g\n+UGF1bG8xEjAQBgNVBAcTCVNhbyBQYXVsbzEtMCsGA1UECRMkQXZlbmlkYSBCcmln\n+YWRlaXJvIEZhcmlhIExpbWEgLCAyOTI3MR0wGwYDVQQKExRNb2lwIFBhZ2FtZW50\n+b3MgUy5BLjENMAsGA1UECxMETU9JUDEYMBYGA1UECxMPU1NMIEJsaW5kYWRvIEVW\n+MRgwFgYDVQQDEw9hcGkubW9pcC5jb20uYnIwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQDN0b9x6TrXXA9hPCF8/NjqGJ++2D4LO4ZiMFTjs0VwpXy2Y1Oe\n+s74/HuiLGnAHxTmAtV7IpZMibiOcTxcnDYp9oEWkf+gR+hZvwFZwyOBC7wyb3SR3\n+UvV0N1ZbEVRYpN9kuX/3vjDghjDmzzBwu8a/T+y5JTym5uiJlngVAWyh/RjtIvYi\n++NVkQMbyVlPGkoCe6c30pH8DKYuUCZU6DHjUsPTX3jAskqbhDSAnclX9iX0p2bmw\n+KVBc+5Vh/2geyzDuquF0w+mNIYdU5h7uXvlmJnf3d2Cext5dxdL8/jezD3U0dAqI\n+pYSKERbyxSkJWxdvRlhdpM9YXMJcpc88xNp1AgMBAAGjggHcMIIB2DAfBgNVHSME\n+GDAWgBQ52v/KKBSKqHQTCLnkDqnS+n6daTAdBgNVHQ4EFgQU/lXuOa7DMExzZjRj\n+LQWcMWGZY7swDgYDVR0PAQH/BAQDAgWgMAwGA1UdEwEB/wQCMAAwHQYDVR0lBBYw\n+FAYIKwYBBQUHAwEGCCsGAQUFBwMCMEYGA1UdIAQ/MD0wOwYMKwYBBAGyMQECAQUB\n+MCswKQYIKwYBBQUHAgEWHWh0dHBzOi8vc2VjdXJlLmNvbW9kby5jb20vQ1BTMFYG\n+A1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwuY29tb2RvY2EuY29tL0NPTU9ET1JT\n+QUV4dGVuZGVkVmFsaWRhdGlvblNlY3VyZVNlcnZlckNBLmNybDCBhwYIKwYBBQUH\n+AQEEezB5MFEGCCsGAQUFBzAChkVodHRwOi8vY3J0LmNvbW9kb2NhLmNvbS9DT01P\n+RE9SU0FFeHRlbmRlZFZhbGlkYXRpb25TZWN1cmVTZXJ2ZXJDQS5jcnQwJAYIKwYB\n+BQUHMAGGGGh0dHA6Ly9vY3NwLmNvbW9kb2NhLmNvbTAvBgNVHREEKDAmgg9hcGku\n+bW9pcC5jb20uYnKCE3d3dy5hcGkubW9pcC5jb20uYnIwDQYJKoZIhvcNAQELBQAD\n+ggEBAFoTmPlaDcf+nudhjXHwud8g7/LRyA8ucb+3/vfmgbn7FUc1eprF5sJS1mA+\n+pbiTyXw4IxcJq2KUj0Nw3IPOe9k84mzh+XMmdCKH+QK3NWkE9Udz+VpBOBc0dlqC\n+1RH5umStYDmuZg/8/r652eeQ5kUDcJyADfpKWBgDPYaGtwzKVT4h3Aok9SLXRHx6\n+z/gOaMjEDMarMCMw4VUIG1pvNraZrG5oTaALPaIXXpd8VqbQYPudYJ6fR5eY3FeW\n+H/ofbYFdRcuD26MfBFWE9VGGral9Fgo8sEHffho+UWhgApuQV4/l5fMzxB5YBXyQ\n+jhuy8PqqZS9OuLilTeLu4a8z2JI=\n+-----END CERTIFICATE-----`\n+\n+var comodoIntermediateSHA384 = `-----BEGIN CERTIFICATE-----\n+MIIGDjCCA/agAwIBAgIQBqdDgNTr/tQ1taP34Wq92DANBgkqhkiG9w0BAQwFADCB\n+hTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n+A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV\n+BAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTIwMjEy\n+MDAwMDAwWhcNMjcwMjExMjM1OTU5WjCBkjELMAkGA1UEBhMCR0IxGzAZBgNVBAgT\n+EkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMR\n+Q09NT0RPIENBIExpbWl0ZWQxODA2BgNVBAMTL0NPTU9ETyBSU0EgRXh0ZW5kZWQg\n+VmFsaWRhdGlvbiBTZWN1cmUgU2VydmVyIENBMIIBIjANBgkqhkiG9w0BAQEFAAOC\n+AQ8AMIIBCgKCAQEAlVbeVLTf1QJJe9FbXKKyHo+cK2JMK40SKPMalaPGEP0p3uGf\n+CzhAk9HvbpUQ/OGQF3cs7nU+e2PsYZJuTzurgElr3wDqAwB/L3XVKC/sVmePgIOj\n+vdwDmZOLlJFWW6G4ajo/Br0OksxgnP214J9mMF/b5pTwlWqvyIqvgNnmiDkBfBzA\n+xSr3e5Wg8narbZtyOTDr0VdVAZ1YEZ18bYSPSeidCfw8/QpKdhQhXBZzQCMZdMO6\n+WAqmli7eNuWf0MLw4eDBYuPCGEUZUaoXHugjddTI0JYT/8ck0YwLJ66eetw6YWNg\n+iJctXQUL5Tvrrs46R3N2qPos3cCHF+msMJn4HwIDAQABo4IBaTCCAWUwHwYDVR0j\n+BBgwFoAUu69+Aj36pvE8hI6t7jiY7NkyMtQwHQYDVR0OBBYEFDna/8ooFIqodBMI\n+ueQOqdL6fp1pMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgEAMD4G\n+A1UdIAQ3MDUwMwYEVR0gADArMCkGCCsGAQUFBwIBFh1odHRwczovL3NlY3VyZS5j\n+b21vZG8uY29tL0NQUzBMBgNVHR8ERTBDMEGgP6A9hjtodHRwOi8vY3JsLmNvbW9k\n+b2NhLmNvbS9DT01PRE9SU0FDZXJ0aWZpY2F0aW9uQXV0aG9yaXR5LmNybDBxBggr\n+BgEFBQcBAQRlMGMwOwYIKwYBBQUHMAKGL2h0dHA6Ly9jcnQuY29tb2RvY2EuY29t\n+L0NPTU9ET1JTQUFkZFRydXN0Q0EuY3J0MCQGCCsGAQUFBzABhhhodHRwOi8vb2Nz\n+cC5jb21vZG9jYS5jb20wDQYJKoZIhvcNAQEMBQADggIBAERCnUFRK0iIXZebeV4R\n+AUpSGXtBLMeJPNBy3IX6WK/VJeQT+FhlZ58N/1eLqYVeyqZLsKeyLeCMIs37/3mk\n+jCuN/gI9JN6pXV/kD0fQ22YlPodHDK4ixVAihNftSlka9pOlk7DgG4HyVsTIEFPk\n+1Hax0VtpS3ey4E/EhOfUoFDuPPpE/NBXueEoU/1Tzdy5H3pAvTA/2GzS8+cHnx8i\n+teoiccsq8FZ8/qyo0QYPFBRSTP5kKwxpKrgNUG4+BAe/eiCL+O5lCeHHSQgyPQ0o\n+fkkdt0rvAucNgBfIXOBhYsvss2B5JdoaZXOcOBCgJjqwyBZ9kzEi7nQLiMBciUEA\n+KKlHMd99SUWa9eanRRrSjhMQ34Ovmw2tfn6dNVA0BM7pINae253UqNpktNEvWS5e\n+ojZh1CSggjMziqHRbO9haKPl0latxf1eYusVqHQSTC8xjOnB3xBLAer2VBvNfzu9\n+XJ/B288ByvK6YBIhMe2pZLiySVgXbVrXzYxtvp5/4gJYp9vDLVj2dAZqmvZh+fYA\n+tmnYOosxWd2R5nwnI4fdAw+PKowegwFOAWEMUnNt/AiiuSpm5HZNMaBWm9lTjaK2\n+jwLI5jqmBNFI+8NKAnb9L9K8E7bobTQk+p0pisehKxTxlgBzuRPpwLk6R1YCcYAn\n+pLwltum95OmYdBbxN4SBB7SC\n+-----END CERTIFICATE-----`\n+\n+const comodoRSAAuthority = `-----BEGIN CERTIFICATE-----\n+MIIFdDCCBFygAwIBAgIQJ2buVutJ846r13Ci/ITeIjANBgkqhkiG9w0BAQwFADBv\n+MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFk\n+ZFRydXN0IEV4dGVybmFsIFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBF\n+eHRlcm5hbCBDQSBSb290MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFow\n+gYUxCzAJBgNVBAYTAkdCMRswGQYDVQQIExJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAO\n+BgNVBAcTB1NhbGZvcmQxGjAYBgNVBAoTEUNPTU9ETyBDQSBMaW1pdGVkMSswKQYD\n+VQQDEyJDT01PRE8gUlNBIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIICIjANBgkq\n+hkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAkehUktIKVrGsDSTdxc9EZ3SZKzejfSNw\n+AHG8U9/E+ioSj0t/EFa9n3Byt2F/yUsPF6c947AEYe7/EZfH9IY+Cvo+XPmT5jR6\n+2RRr55yzhaCCenavcZDX7P0N+pxs+t+wgvQUfvm+xKYvT3+Zf7X8Z0NyvQwA1onr\n+ayzT7Y+YHBSrfuXjbvzYqOSSJNpDa2K4Vf3qwbxstovzDo2a5JtsaZn4eEgwRdWt\n+4Q08RWD8MpZRJ7xnw8outmvqRsfHIKCxH2XeSAi6pE6p8oNGN4Tr6MyBSENnTnIq\n+m1y9TBsoilwie7SrmNnu4FGDwwlGTm0+mfqVF9p8M1dBPI1R7Qu2XK8sYxrfV8g/\n+vOldxJuvRZnio1oktLqpVj3Pb6r/SVi+8Kj/9Lit6Tf7urj0Czr56ENCHonYhMsT\n+8dm74YlguIwoVqwUHZwK53Hrzw7dPamWoUi9PPevtQ0iTMARgexWO/bTouJbt7IE\n+IlKVgJNp6I5MZfGRAy1wdALqi2cVKWlSArvX31BqVUa/oKMoYX9w0MOiqiwhqkfO\n+KJwGRXa/ghgntNWutMtQ5mv0TIZxMOmm3xaG4Nj/QN370EKIf6MzOi5cHkERgWPO\n+GHFrK+ymircxXDpqR+DDeVnWIBqv8mqYqnK8V0rSS527EPywTEHl7R09XiidnMy/\n+s1Hap0flhFMCAwEAAaOB9DCB8TAfBgNVHSMEGDAWgBStvZh6NLQm9/rEJlTvA73g\n+JMtUGjAdBgNVHQ4EFgQUu69+Aj36pvE8hI6t7jiY7NkyMtQwDgYDVR0PAQH/BAQD\n+AgGGMA8GA1UdEwEB/wQFMAMBAf8wEQYDVR0gBAowCDAGBgRVHSAAMEQGA1UdHwQ9\n+MDswOaA3oDWGM2h0dHA6Ly9jcmwudXNlcnRydXN0LmNvbS9BZGRUcnVzdEV4dGVy\n+bmFsQ0FSb290LmNybDA1BggrBgEFBQcBAQQpMCcwJQYIKwYBBQUHMAGGGWh0dHA6\n+Ly9vY3NwLnVzZXJ0cnVzdC5jb20wDQYJKoZIhvcNAQEMBQADggEBAGS/g/FfmoXQ\n+zbihKVcN6Fr30ek+8nYEbvFScLsePP9NDXRqzIGCJdPDoCpdTPW6i6FtxFQJdcfj\n+Jw5dhHk3QBN39bSsHNA7qxcS1u80GH4r6XnTq1dFDK8o+tDb5VCViLvfhVdpfZLY\n+Uspzgb8c8+a4bmYRBbMelC1/kZWSWfFMzqORcUx8Rww7Cxn2obFshj5cqsQugsv5\n+B5a6SE2Q8pTIqXOi6wZ7I53eovNNVZ96YUWYGGjHXkBrI/V5eu+MtWuLt29G9Hvx\n+PUsE2JOAWVrgQSQdso8VYFhH2+9uRv0V9dlfmrPb2LjkQLPNlzmuhbsdjrzch5vR\n+pu/xO28QOG8=\n+-----END CERTIFICATE-----`\n+\n+const addTrustRoot = `-----BEGIN CERTIFICATE-----\n+MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU\n+MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs\n+IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290\n+MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux\n+FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h\n+bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v\n+dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt\n+H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9\n+uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX\n+mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX\n+a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN\n+E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0\n+WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD\n+VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0\n+Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU\n+cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx\n+IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN\n+AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH\n+YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5\n+6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC\n+Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX\n+c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a\n+mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ=\n+-----END CERTIFICATE-----`"}, {"sha": "c347fb384dc73f5b63b39911cf1121a3c3d5e53e", "filename": "libgo/go/crypto/x509/x509.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -14,6 +14,7 @@ import (\n \t\"crypto/rsa\"\n \t\"crypto/sha1\"\n \t_ \"crypto/sha256\"\n+\t_ \"crypto/sha512\"\n \t\"crypto/x509/pkix\"\n \t\"encoding/asn1\"\n \t\"encoding/pem\""}, {"sha": "41d186b5b64cf04a6cb3e10cdf7b87b340cf8f68", "filename": "libgo/go/crypto/x509/x509_test.go", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -22,6 +22,7 @@ import (\n \t\"net\"\n \t\"os/exec\"\n \t\"reflect\"\n+\t\"runtime\"\n \t\"testing\"\n \t\"time\"\n )\n@@ -395,7 +396,7 @@ func TestCreateSelfSignedCertificate(t *testing.T) {\n \t\t}\n \n \t\tif cert.SignatureAlgorithm != test.sigAlgo {\n-\t\t\tt.Errorf(\"%s: SignatureAlgorithm wasn't copied from template. Got %s, want %s\", test.name, cert.SignatureAlgorithm, test.sigAlgo)\n+\t\t\tt.Errorf(\"%s: SignatureAlgorithm wasn't copied from template. Got %v, want %v\", test.name, cert.SignatureAlgorithm, test.sigAlgo)\n \t\t}\n \n \t\tif !reflect.DeepEqual(cert.ExtKeyUsage, testExtKeyUsage) {\n@@ -728,6 +729,10 @@ func TestParsePEMCRL(t *testing.T) {\n \n func TestImports(t *testing.T) {\n \tt.Skip(\"gccgo does not have a go command\")\n+\tif runtime.GOOS == \"nacl\" {\n+\t\tt.Skip(\"skipping on nacl\")\n+\t}\n+\n \tif err := exec.Command(\"go\", \"run\", \"x509_test_import.go\").Run(); err != nil {\n \t\tt.Errorf(\"failed to run x509_test_import.go: %s\", err)\n \t}"}, {"sha": "eca25f29a0aa125dbdd5537b4d7708b0b16f6d63", "filename": "libgo/go/database/sql/driver/driver.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdatabase%2Fsql%2Fdriver%2Fdriver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdatabase%2Fsql%2Fdriver%2Fdriver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fdriver%2Fdriver.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -134,7 +134,7 @@ type Stmt interface {\n \t// as an INSERT or UPDATE.\n \tExec(args []Value) (Result, error)\n \n-\t// Exec executes a query that may return rows, such as a\n+\t// Query executes a query that may return rows, such as a\n \t// SELECT.\n \tQuery(args []Value) (Rows, error)\n }"}, {"sha": "765b80c60a20fe5004d53202a8f20245d7bfd1ab", "filename": "libgo/go/database/sql/sql.go", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -181,7 +181,8 @@ type Scanner interface {\n // defers this error until a Scan.\n var ErrNoRows = errors.New(\"sql: no rows in result set\")\n \n-// DB is a database handle. It's safe for concurrent use by multiple\n+// DB is a database handle representing a pool of zero or more\n+// underlying connections. It's safe for concurrent use by multiple\n // goroutines.\n //\n // The sql package creates and frees connections automatically; it\n@@ -405,7 +406,7 @@ func (db *DB) removeDepLocked(x finalCloser, dep interface{}) func() error {\n // This value should be larger than the maximum typical value\n // used for db.maxOpen. If maxOpen is significantly larger than\n // connectionRequestQueueSize then it is possible for ALL calls into the *DB\n-// to block until the connectionOpener can satify the backlog of requests.\n+// to block until the connectionOpener can satisfy the backlog of requests.\n var connectionRequestQueueSize = 1000000\n \n // Open opens a database specified by its database driver name and a\n@@ -420,6 +421,11 @@ var connectionRequestQueueSize = 1000000\n // Open may just validate its arguments without creating a connection\n // to the database. To verify that the data source name is valid, call\n // Ping.\n+//\n+// The returned DB is safe for concurrent use by multiple goroutines\n+// and maintains its own pool of idle connections. Thus, the Open\n+// function should be called just once. It is rarely necessary to\n+// close a DB.\n func Open(driverName, dataSourceName string) (*DB, error) {\n \tdriveri, ok := drivers[driverName]\n \tif !ok {\n@@ -452,6 +458,9 @@ func (db *DB) Ping() error {\n }\n \n // Close closes the database, releasing any open resources.\n+//\n+// It is rare to Close a DB, as the DB handle is meant to be\n+// long-lived and shared between many goroutines.\n func (db *DB) Close() error {\n \tdb.mu.Lock()\n \tif db.closed { // Make DB.Close idempotent\n@@ -652,13 +661,16 @@ func (db *DB) conn() (*driverConn, error) {\n \t\treturn conn, nil\n \t}\n \n+\tdb.numOpen++ // optimistically\n \tdb.mu.Unlock()\n \tci, err := db.driver.Open(db.dsn)\n \tif err != nil {\n+\t\tdb.mu.Lock()\n+\t\tdb.numOpen-- // correct for earlier optimism\n+\t\tdb.mu.Unlock()\n \t\treturn nil, err\n \t}\n \tdb.mu.Lock()\n-\tdb.numOpen++\n \tdc := &driverConn{\n \t\tdb: db,\n \t\tci: ci,\n@@ -778,7 +790,7 @@ func (db *DB) putConn(dc *driverConn, err error) {\n // connection limit will not be exceeded.\n // If err != nil, the value of dc is ignored.\n // If err == nil, then dc must not equal nil.\n-// If a connRequest was fullfilled or the *driverConn was placed in the\n+// If a connRequest was fulfilled or the *driverConn was placed in the\n // freeConn list, then true is returned, otherwise false is returned.\n func (db *DB) putConnDBLocked(dc *driverConn, err error) bool {\n \tif db.connRequests.Len() > 0 {\n@@ -1494,6 +1506,7 @@ func (s *Stmt) finalClose() error {\n //\n //     rows, err := db.Query(\"SELECT ...\")\n //     ...\n+//     defer rows.Close()\n //     for rows.Next() {\n //         var id int\n //         var name string"}, {"sha": "7971f149174391cf23ddf63b48ed4d988f644c47", "filename": "libgo/go/database/sql/sql_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdatabase%2Fsql%2Fsql_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -461,7 +461,7 @@ func TestTxStmt(t *testing.T) {\n }\n \n // Issue: http://golang.org/issue/2784\n-// This test didn't fail before because we got luckly with the fakedb driver.\n+// This test didn't fail before because we got lucky with the fakedb driver.\n // It was failing, and now not, in github.com/bradfitz/go-sql-test\n func TestTxQuery(t *testing.T) {\n \tdb := newTestDB(t, \"\")"}, {"sha": "6cc6bc937a51f0e2f4a4e7000e4d6893d81b52bb", "filename": "libgo/go/debug/dwarf/const.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fdwarf%2Fconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fdwarf%2Fconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fconst.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -212,6 +212,10 @@ const (\n \tformExprloc     format = 0x18\n \tformFlagPresent format = 0x19\n \tformRefSig8     format = 0x20\n+\t// Extensions for multi-file compression (.dwz)\n+\t// http://www.dwarfstd.org/ShowIssue.php?issue=120604.1\n+\tformGnuRefAlt  format = 0x1f20\n+\tformGnuStrpAlt format = 0x1f21\n )\n \n // A Tag is the classification (the type) of an Entry."}, {"sha": "b6ba8c0d1c333fa29e741238c4eac827d059fc58", "filename": "libgo/go/debug/dwarf/entry.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -241,10 +241,10 @@ func (b *buf) entry(atab abbrevTable, ubase Offset) *Entry {\n \t\t// lineptr, loclistptr, macptr, rangelistptr\n \t\t// New in DWARF 4, but clang can generate them with -gdwarf-2.\n \t\t// Section reference, replacing use of formData4 and formData8.\n-\t\tcase formSecOffset:\n+\t\tcase formSecOffset, formGnuRefAlt, formGnuStrpAlt:\n \t\t\tis64, known := b.format.dwarf64()\n \t\t\tif !known {\n-\t\t\t\tb.error(\"unknown size for DW_FORM_sec_offset\")\n+\t\t\t\tb.error(\"unknown size for form 0x\" + strconv.FormatInt(int64(fmt), 16))\n \t\t\t} else if is64 {\n \t\t\t\tval = int64(b.uint64())\n \t\t\t} else {"}, {"sha": "d622dae2af7984efac16c6994895809f99c7f74f", "filename": "libgo/go/debug/elf/elf.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Felf%2Felf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Felf%2Felf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Felf.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -517,7 +517,7 @@ const (\n \tDT_INIT_ARRAY   DynTag = 25 /* Address of the array of pointers to initialization functions */\n \tDT_FINI_ARRAY   DynTag = 26 /* Address of the array of pointers to termination functions */\n \tDT_INIT_ARRAYSZ DynTag = 27 /* Size in bytes of the array of initialization functions. */\n-\tDT_FINI_ARRAYSZ DynTag = 28 /* Size in bytes of the array of terminationfunctions. */\n+\tDT_FINI_ARRAYSZ DynTag = 28 /* Size in bytes of the array of termination functions. */\n \tDT_RUNPATH      DynTag = 29 /* String table offset of a null-terminated library search path string. */\n \tDT_FLAGS        DynTag = 30 /* Object specific flag values. */\n \tDT_ENCODING     DynTag = 32 /* Values greater than or equal to DT_ENCODING"}, {"sha": "38269aaf4ab34598645ee753687ef772d94cd0a7", "filename": "libgo/go/debug/elf/file.go", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -522,13 +522,17 @@ func (f *File) applyRelocations(dst []byte, rels []byte) error {\n \tif f.Class == ELFCLASS64 && f.Machine == EM_X86_64 {\n \t\treturn f.applyRelocationsAMD64(dst, rels)\n \t}\n+\tif f.Class == ELFCLASS32 && f.Machine == EM_386 {\n+\t\treturn f.applyRelocations386(dst, rels)\n+\t}\n \n \treturn errors.New(\"not implemented\")\n }\n \n func (f *File) applyRelocationsAMD64(dst []byte, rels []byte) error {\n-\tif len(rels)%Sym64Size != 0 {\n-\t\treturn errors.New(\"length of relocation section is not a multiple of Sym64Size\")\n+\t// 24 is the size of Rela64.\n+\tif len(rels)%24 != 0 {\n+\t\treturn errors.New(\"length of relocation section is not a multiple of 24\")\n \t}\n \n \tsymbols, _, err := f.getSymbols(SHT_SYMTAB)\n@@ -570,6 +574,43 @@ func (f *File) applyRelocationsAMD64(dst []byte, rels []byte) error {\n \treturn nil\n }\n \n+func (f *File) applyRelocations386(dst []byte, rels []byte) error {\n+\t// 8 is the size of Rel32.\n+\tif len(rels)%8 != 0 {\n+\t\treturn errors.New(\"length of relocation section is not a multiple of 8\")\n+\t}\n+\n+\tsymbols, _, err := f.getSymbols(SHT_SYMTAB)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tb := bytes.NewReader(rels)\n+\tvar rel Rel32\n+\n+\tfor b.Len() > 0 {\n+\t\tbinary.Read(b, f.ByteOrder, &rel)\n+\t\tsymNo := rel.Info >> 8\n+\t\tt := R_386(rel.Info & 0xff)\n+\n+\t\tif symNo == 0 || symNo > uint32(len(symbols)) {\n+\t\t\tcontinue\n+\t\t}\n+\t\tsym := &symbols[symNo-1]\n+\n+\t\tif t == R_386_32 {\n+\t\t\tif rel.Off+4 >= uint32(len(dst)) {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tval := f.ByteOrder.Uint32(dst[rel.Off : rel.Off+4])\n+\t\t\tval += uint32(sym.Value)\n+\t\t\tf.ByteOrder.PutUint32(dst[rel.Off:rel.Off+4], val)\n+\t\t}\n+\t}\n+\n+\treturn nil\n+}\n+\n func (f *File) DWARF() (*dwarf.Data, error) {\n \t// There are many other DWARF sections, but these\n \t// are the required ones, and the debug/dwarf package\n@@ -603,6 +644,19 @@ func (f *File) DWARF() (*dwarf.Data, error) {\n \t\t}\n \t}\n \n+\t// When using clang we need to process relocations even for 386.\n+\trel := f.Section(\".rel.debug_info\")\n+\tif rel != nil && rel.Type == SHT_REL && f.Machine == EM_386 {\n+\t\tdata, err := rel.Data()\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\terr = f.applyRelocations(dat[1], data)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\n \tabbrev, info, line, ranges, str := dat[0], dat[1], dat[2], dat[3], dat[4]\n \td, err := dwarf.New(abbrev, nil, nil, info, line, nil, ranges, str)\n \tif err != nil {"}, {"sha": "7f88a54bcd6dec74359f46bddd29cd219f665d64", "filename": "libgo/go/debug/elf/file_test.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Felf%2Ffile_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Felf%2Ffile_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Ffile_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -260,6 +260,12 @@ var relocationTests = []relocationTest{\n \t\t\t{0, &dwarf.Entry{Offset: 0xb, Tag: dwarf.TagCompileUnit, Children: true, Field: []dwarf.Field{{Attr: dwarf.AttrProducer, Val: \"GNU C 4.2.4 (Ubuntu 4.2.4-1ubuntu4)\"}, {Attr: dwarf.AttrLanguage, Val: int64(1)}, {Attr: dwarf.AttrName, Val: \"go-relocation-test-gcc424.c\"}, {Attr: dwarf.AttrCompDir, Val: \"/tmp\"}, {Attr: dwarf.AttrLowpc, Val: uint64(0x0)}, {Attr: dwarf.AttrHighpc, Val: uint64(0x6)}, {Attr: dwarf.AttrStmtList, Val: int64(0)}}}},\n \t\t},\n \t},\n+\t{\n+\t\t\"testdata/go-relocation-test-clang-x86.obj\",\n+\t\t[]relocationTestEntry{\n+\t\t\t{0, &dwarf.Entry{Offset: 0xb, Tag: dwarf.TagCompileUnit, Children: true, Field: []dwarf.Field{{Attr: dwarf.AttrProducer, Val: \"clang version google3-trunk (trunk r209387)\"}, {Attr: dwarf.AttrLanguage, Val: int64(12)}, {Attr: dwarf.AttrName, Val: \"go-relocation-test-clang.c\"}, {Attr: dwarf.AttrStmtList, Val: int64(0)}, {Attr: dwarf.AttrCompDir, Val: \"/tmp\"}}}},\n+\t\t},\n+\t},\n \t{\n \t\t\"testdata/gcc-amd64-openbsd-debug-with-rela.obj\",\n \t\t[]relocationTestEntry{"}, {"sha": "e909cf4e6e19a63276f497b70a170492ade64156", "filename": "libgo/go/debug/elf/testdata/go-relocation-test-clang-x86.obj", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Felf%2Ftestdata%2Fgo-relocation-test-clang-x86.obj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Felf%2Ftestdata%2Fgo-relocation-test-clang-x86.obj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Ftestdata%2Fgo-relocation-test-clang-x86.obj?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387"}, {"sha": "f65abb6c27399e253c0612dd16c80c6a9a9a9b14", "filename": "libgo/go/debug/goobj/read.go", "status": "removed", "additions": 0, "deletions": 655, "changes": 655, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf2fc6ee0a7edbe7de4299f28b66527c07bb0a2/libgo%2Fgo%2Fdebug%2Fgoobj%2Fread.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf2fc6ee0a7edbe7de4299f28b66527c07bb0a2/libgo%2Fgo%2Fdebug%2Fgoobj%2Fread.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fgoobj%2Fread.go?ref=bcf2fc6ee0a7edbe7de4299f28b66527c07bb0a2", "patch": "@@ -1,655 +0,0 @@\n-// Copyright 2013 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// Package goobj implements reading of Go object files and archives.\n-//\n-// TODO(rsc): Decide where this package should live. (golang.org/issue/6932)\n-// TODO(rsc): Decide the appropriate integer types for various fields.\n-// TODO(rsc): Write tests. (File format still up in the air a little.)\n-package goobj\n-\n-import (\n-\t\"bufio\"\n-\t\"bytes\"\n-\t\"errors\"\n-\t\"fmt\"\n-\t\"io\"\n-\t\"strconv\"\n-\t\"strings\"\n-)\n-\n-// A SymKind describes the kind of memory represented by a symbol.\n-type SymKind int\n-\n-// This list is taken from include/link.h.\n-\n-// Defined SymKind values.\n-// TODO(rsc): Give idiomatic Go names.\n-// TODO(rsc): Reduce the number of symbol types in the object files.\n-const (\n-\t_ SymKind = iota\n-\n-\t// readonly, executable\n-\tSTEXT\n-\tSELFRXSECT\n-\n-\t// readonly, non-executable\n-\tSTYPE\n-\tSSTRING\n-\tSGOSTRING\n-\tSGOFUNC\n-\tSRODATA\n-\tSFUNCTAB\n-\tSTYPELINK\n-\tSSYMTAB // TODO: move to unmapped section\n-\tSPCLNTAB\n-\tSELFROSECT\n-\n-\t// writable, non-executable\n-\tSMACHOPLT\n-\tSELFSECT\n-\tSMACHO // Mach-O __nl_symbol_ptr\n-\tSMACHOGOT\n-\tSNOPTRDATA\n-\tSINITARR\n-\tSDATA\n-\tSWINDOWS\n-\tSBSS\n-\tSNOPTRBSS\n-\tSTLSBSS\n-\n-\t// not mapped\n-\tSXREF\n-\tSMACHOSYMSTR\n-\tSMACHOSYMTAB\n-\tSMACHOINDIRECTPLT\n-\tSMACHOINDIRECTGOT\n-\tSFILE\n-\tSFILEPATH\n-\tSCONST\n-\tSDYNIMPORT\n-\tSHOSTOBJ\n-)\n-\n-var symKindStrings = []string{\n-\tSBSS:              \"SBSS\",\n-\tSCONST:            \"SCONST\",\n-\tSDATA:             \"SDATA\",\n-\tSDYNIMPORT:        \"SDYNIMPORT\",\n-\tSELFROSECT:        \"SELFROSECT\",\n-\tSELFRXSECT:        \"SELFRXSECT\",\n-\tSELFSECT:          \"SELFSECT\",\n-\tSFILE:             \"SFILE\",\n-\tSFILEPATH:         \"SFILEPATH\",\n-\tSFUNCTAB:          \"SFUNCTAB\",\n-\tSGOFUNC:           \"SGOFUNC\",\n-\tSGOSTRING:         \"SGOSTRING\",\n-\tSHOSTOBJ:          \"SHOSTOBJ\",\n-\tSINITARR:          \"SINITARR\",\n-\tSMACHO:            \"SMACHO\",\n-\tSMACHOGOT:         \"SMACHOGOT\",\n-\tSMACHOINDIRECTGOT: \"SMACHOINDIRECTGOT\",\n-\tSMACHOINDIRECTPLT: \"SMACHOINDIRECTPLT\",\n-\tSMACHOPLT:         \"SMACHOPLT\",\n-\tSMACHOSYMSTR:      \"SMACHOSYMSTR\",\n-\tSMACHOSYMTAB:      \"SMACHOSYMTAB\",\n-\tSNOPTRBSS:         \"SNOPTRBSS\",\n-\tSNOPTRDATA:        \"SNOPTRDATA\",\n-\tSPCLNTAB:          \"SPCLNTAB\",\n-\tSRODATA:           \"SRODATA\",\n-\tSSTRING:           \"SSTRING\",\n-\tSSYMTAB:           \"SSYMTAB\",\n-\tSTEXT:             \"STEXT\",\n-\tSTLSBSS:           \"STLSBSS\",\n-\tSTYPE:             \"STYPE\",\n-\tSTYPELINK:         \"STYPELINK\",\n-\tSWINDOWS:          \"SWINDOWS\",\n-\tSXREF:             \"SXREF\",\n-}\n-\n-func (k SymKind) String() string {\n-\tif k < 0 || int(k) >= len(symKindStrings) {\n-\t\treturn fmt.Sprintf(\"SymKind(%d)\", k)\n-\t}\n-\treturn symKindStrings[k]\n-}\n-\n-// A Sym is a named symbol in an object file.\n-type Sym struct {\n-\tSymID         // symbol identifier (name and version)\n-\tKind  SymKind // kind of symbol\n-\tDupOK bool    // are duplicate definitions okay?\n-\tSize  int     // size of corresponding data\n-\tType  SymID   // symbol for Go type information\n-\tData  Data    // memory image of symbol\n-\tReloc []Reloc // relocations to apply to Data\n-\tFunc  *Func   // additional data for functions\n-}\n-\n-// A SymID - the combination of Name and Version - uniquely identifies\n-// a symbol within a package.\n-type SymID struct {\n-\t// Name is the name of a symbol.\n-\tName string\n-\n-\t// Version is zero for symbols with global visibility.\n-\t// Symbols with only file visibility (such as file-level static\n-\t// declarations in C) have a non-zero version distinguising\n-\t// a symbol in one file from a symbol of the same name\n-\t// in another file\n-\tVersion int\n-}\n-\n-func (s SymID) String() string {\n-\tif s.Version == 0 {\n-\t\treturn s.Name\n-\t}\n-\treturn fmt.Sprintf(\"%s<%d>\", s.Name, s.Version)\n-}\n-\n-// A Data is a reference to data stored in an object file.\n-// It records the offset and size of the data, so that a client can\n-// read the data only if necessary.\n-type Data struct {\n-\tOffset int64\n-\tSize   int64\n-}\n-\n-// A Reloc describes a relocation applied to a memory image to refer\n-// to an address within a particular symbol.\n-type Reloc struct {\n-\t// The bytes at [Offset, Offset+Size) within the memory image\n-\t// should be updated to refer to the address Add bytes after the start\n-\t// of the symbol Sym.\n-\tOffset int\n-\tSize   int\n-\tSym    SymID\n-\tAdd    int\n-\n-\t// The Type records the form of address expected in the bytes\n-\t// described by the previous fields: absolute, PC-relative, and so on.\n-\t// TODO(rsc): The interpretation of Type is not exposed by this package.\n-\tType int\n-}\n-\n-// A Var describes a variable in a function stack frame: a declared\n-// local variable, an input argument, or an output result.\n-type Var struct {\n-\t// The combination of Name, Kind, and Offset uniquely\n-\t// identifies a variable in a function stack frame.\n-\t// Using fewer of these - in particular, using only Name - does not.\n-\tName   string // Name of variable.\n-\tKind   int    // TODO(rsc): Define meaning.\n-\tOffset int    // Frame offset. TODO(rsc): Define meaning.\n-\n-\tType SymID // Go type for variable.\n-}\n-\n-// Func contains additional per-symbol information specific to functions.\n-type Func struct {\n-\tArgs     int        // size in bytes of of argument frame: inputs and outputs\n-\tFrame    int        // size in bytes of local variable frame\n-\tVar      []Var      // detail about local variables\n-\tPCSP     Data       // PC \u2192 SP offset map\n-\tPCFile   Data       // PC \u2192 file number map (index into File)\n-\tPCLine   Data       // PC \u2192 line number map\n-\tPCData   []Data     // PC \u2192 runtime support data map\n-\tFuncData []FuncData // non-PC-specific runtime support data\n-\tFile     []string   // paths indexed by PCFile\n-}\n-\n-// TODO: Add PCData []byte and PCDataIter (similar to liblink).\n-\n-// A FuncData is a single function-specific data value.\n-type FuncData struct {\n-\tSym    SymID // symbol holding data\n-\tOffset int64 // offset into symbol for funcdata pointer\n-}\n-\n-// A Package is a parsed Go object file or archive defining a Go package.\n-type Package struct {\n-\tImportPath string   // import path denoting this package\n-\tImports    []string // packages imported by this package\n-\tSyms       []*Sym   // symbols defined by this package\n-\tMaxVersion int      // maximum Version in any SymID in Syms\n-}\n-\n-var (\n-\tarchiveHeader = []byte(\"!<arch>\\n\")\n-\tarchiveMagic  = []byte(\"`\\n\")\n-\tgoobjHeader   = []byte(\"go objec\") // truncated to size of archiveHeader\n-\n-\terrCorruptArchive   = errors.New(\"corrupt archive\")\n-\terrTruncatedArchive = errors.New(\"truncated archive\")\n-\terrNotArchive       = errors.New(\"unrecognized archive format\")\n-\n-\terrCorruptObject   = errors.New(\"corrupt object file\")\n-\terrTruncatedObject = errors.New(\"truncated object file\")\n-\terrNotObject       = errors.New(\"unrecognized object file format\")\n-)\n-\n-// An objReader is an object file reader.\n-type objReader struct {\n-\tp         *Package\n-\tb         *bufio.Reader\n-\tf         io.ReadSeeker\n-\terr       error\n-\toffset    int64\n-\tlimit     int64\n-\ttmp       [256]byte\n-\tpkg       string\n-\tpkgprefix string\n-}\n-\n-// importPathToPrefix returns the prefix that will be used in the\n-// final symbol table for the given import path.\n-// We escape '%', '\"', all control characters and non-ASCII bytes,\n-// and any '.' after the final slash.\n-//\n-// See ../../../cmd/ld/lib.c:/^pathtoprefix and\n-// ../../../cmd/gc/subr.c:/^pathtoprefix.\n-func importPathToPrefix(s string) string {\n-\t// find index of last slash, if any, or else -1.\n-\t// used for determining whether an index is after the last slash.\n-\tslash := strings.LastIndex(s, \"/\")\n-\n-\t// check for chars that need escaping\n-\tn := 0\n-\tfor r := 0; r < len(s); r++ {\n-\t\tif c := s[r]; c <= ' ' || (c == '.' && r > slash) || c == '%' || c == '\"' || c >= 0x7F {\n-\t\t\tn++\n-\t\t}\n-\t}\n-\n-\t// quick exit\n-\tif n == 0 {\n-\t\treturn s\n-\t}\n-\n-\t// escape\n-\tconst hex = \"0123456789abcdef\"\n-\tp := make([]byte, 0, len(s)+2*n)\n-\tfor r := 0; r < len(s); r++ {\n-\t\tif c := s[r]; c <= ' ' || (c == '.' && r > slash) || c == '%' || c == '\"' || c >= 0x7F {\n-\t\t\tp = append(p, '%', hex[c>>4], hex[c&0xF])\n-\t\t} else {\n-\t\t\tp = append(p, c)\n-\t\t}\n-\t}\n-\n-\treturn string(p)\n-}\n-\n-// init initializes r to read package p from f.\n-func (r *objReader) init(f io.ReadSeeker, p *Package) {\n-\tr.f = f\n-\tr.p = p\n-\tr.offset, _ = f.Seek(0, 1)\n-\tr.limit, _ = f.Seek(0, 2)\n-\tf.Seek(r.offset, 0)\n-\tr.b = bufio.NewReader(f)\n-\tr.pkgprefix = importPathToPrefix(p.ImportPath) + \".\"\n-}\n-\n-// error records that an error occurred.\n-// It returns only the first error, so that an error\n-// caused by an earlier error does not discard information\n-// about the earlier error.\n-func (r *objReader) error(err error) error {\n-\tif r.err == nil {\n-\t\tif err == io.EOF {\n-\t\t\terr = io.ErrUnexpectedEOF\n-\t\t}\n-\t\tr.err = err\n-\t}\n-\t// panic(\"corrupt\") // useful for debugging\n-\treturn r.err\n-}\n-\n-// readByte reads and returns a byte from the input file.\n-// On I/O error or EOF, it records the error but returns byte 0.\n-// A sequence of 0 bytes will eventually terminate any\n-// parsing state in the object file. In particular, it ends the\n-// reading of a varint.\n-func (r *objReader) readByte() byte {\n-\tif r.err != nil {\n-\t\treturn 0\n-\t}\n-\tif r.offset >= r.limit {\n-\t\tr.error(io.ErrUnexpectedEOF)\n-\t\treturn 0\n-\t}\n-\tb, err := r.b.ReadByte()\n-\tif err != nil {\n-\t\tif err == io.EOF {\n-\t\t\terr = io.ErrUnexpectedEOF\n-\t\t}\n-\t\tr.error(err)\n-\t\tb = 0\n-\t} else {\n-\t\tr.offset++\n-\t}\n-\treturn b\n-}\n-\n-// read reads exactly len(b) bytes from the input file.\n-// If an error occurs, read returns the error but also\n-// records it, so it is safe for callers to ignore the result\n-// as long as delaying the report is not a problem.\n-func (r *objReader) readFull(b []byte) error {\n-\tif r.err != nil {\n-\t\treturn r.err\n-\t}\n-\tif r.offset+int64(len(b)) > r.limit {\n-\t\treturn r.error(io.ErrUnexpectedEOF)\n-\t}\n-\tn, err := io.ReadFull(r.b, b)\n-\tr.offset += int64(n)\n-\tif err != nil {\n-\t\treturn r.error(err)\n-\t}\n-\treturn nil\n-}\n-\n-// readInt reads a zigzag varint from the input file.\n-func (r *objReader) readInt() int {\n-\tvar u uint64\n-\n-\tfor shift := uint(0); ; shift += 7 {\n-\t\tif shift >= 64 {\n-\t\t\tr.error(errCorruptObject)\n-\t\t\treturn 0\n-\t\t}\n-\t\tc := r.readByte()\n-\t\tu |= uint64(c&0x7F) << shift\n-\t\tif c&0x80 == 0 {\n-\t\t\tbreak\n-\t\t}\n-\t}\n-\n-\tv := int64(u>>1) ^ (int64(u) << 63 >> 63)\n-\tif int64(int(v)) != v {\n-\t\tr.error(errCorruptObject) // TODO\n-\t\treturn 0\n-\t}\n-\treturn int(v)\n-}\n-\n-// readString reads a length-delimited string from the input file.\n-func (r *objReader) readString() string {\n-\tn := r.readInt()\n-\tbuf := make([]byte, n)\n-\tr.readFull(buf)\n-\treturn string(buf)\n-}\n-\n-// readSymID reads a SymID from the input file.\n-func (r *objReader) readSymID() SymID {\n-\tname, vers := r.readString(), r.readInt()\n-\n-\t// In a symbol name in an object file, \"\". denotes the\n-\t// prefix for the package in which the object file has been found.\n-\t// Expand it.\n-\tname = strings.Replace(name, `\"\".`, r.pkgprefix, -1)\n-\n-\t// An individual object file only records version 0 (extern) or 1 (static).\n-\t// To make static symbols unique across all files being read, we\n-\t// replace version 1 with the version corresponding to the current\n-\t// file number. The number is incremented on each call to parseObject.\n-\tif vers != 0 {\n-\t\tvers = r.p.MaxVersion\n-\t}\n-\n-\treturn SymID{name, vers}\n-}\n-\n-// readData reads a data reference from the input file.\n-func (r *objReader) readData() Data {\n-\tn := r.readInt()\n-\td := Data{Offset: r.offset, Size: int64(n)}\n-\tr.skip(int64(n))\n-\treturn d\n-}\n-\n-// skip skips n bytes in the input.\n-func (r *objReader) skip(n int64) {\n-\tif n < 0 {\n-\t\tr.error(fmt.Errorf(\"debug/goobj: internal error: misuse of skip\"))\n-\t}\n-\tif n < int64(len(r.tmp)) {\n-\t\t// Since the data is so small, a just reading from the buffered\n-\t\t// reader is better than flushing the buffer and seeking.\n-\t\tr.readFull(r.tmp[:n])\n-\t} else if n <= int64(r.b.Buffered()) {\n-\t\t// Even though the data is not small, it has already been read.\n-\t\t// Advance the buffer instead of seeking.\n-\t\tfor n > int64(len(r.tmp)) {\n-\t\t\tr.readFull(r.tmp[:])\n-\t\t\tn -= int64(len(r.tmp))\n-\t\t}\n-\t\tr.readFull(r.tmp[:n])\n-\t} else {\n-\t\t// Seek, giving up buffered data.\n-\t\t_, err := r.f.Seek(r.offset+n, 0)\n-\t\tif err != nil {\n-\t\t\tr.error(err)\n-\t\t}\n-\t\tr.offset += n\n-\t\tr.b.Reset(r.f)\n-\t}\n-}\n-\n-// Parse parses an object file or archive from r,\n-// assuming that its import path is pkgpath.\n-func Parse(r io.ReadSeeker, pkgpath string) (*Package, error) {\n-\tif pkgpath == \"\" {\n-\t\tpkgpath = `\"\"`\n-\t}\n-\tp := new(Package)\n-\tp.ImportPath = pkgpath\n-\n-\tvar rd objReader\n-\trd.init(r, p)\n-\terr := rd.readFull(rd.tmp[:8])\n-\tif err != nil {\n-\t\tif err == io.EOF {\n-\t\t\terr = io.ErrUnexpectedEOF\n-\t\t}\n-\t\treturn nil, err\n-\t}\n-\n-\tswitch {\n-\tdefault:\n-\t\treturn nil, errNotObject\n-\n-\tcase bytes.Equal(rd.tmp[:8], archiveHeader):\n-\t\tif err := rd.parseArchive(); err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\tcase bytes.Equal(rd.tmp[:8], goobjHeader):\n-\t\tif err := rd.parseObject(goobjHeader); err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t}\n-\n-\treturn p, nil\n-}\n-\n-// trimSpace removes trailing spaces from b and returns the corresponding string.\n-// This effectively parses the form used in archive headers.\n-func trimSpace(b []byte) string {\n-\treturn string(bytes.TrimRight(b, \" \"))\n-}\n-\n-// parseArchive parses a Unix archive of Go object files.\n-// TODO(rsc): Need to skip non-Go object files.\n-// TODO(rsc): Maybe record table of contents in r.p so that\n-// linker can avoid having code to parse archives too.\n-func (r *objReader) parseArchive() error {\n-\tfor r.offset < r.limit {\n-\t\tif err := r.readFull(r.tmp[:60]); err != nil {\n-\t\t\treturn err\n-\t\t}\n-\t\tdata := r.tmp[:60]\n-\n-\t\t// Each file is preceded by this text header (slice indices in first column):\n-\t\t//\t 0:16\tname\n-\t\t//\t16:28 date\n-\t\t//\t28:34 uid\n-\t\t//\t34:40 gid\n-\t\t//\t40:48 mode\n-\t\t//\t48:58 size\n-\t\t//\t58:60 magic - `\\n\n-\t\t// We only care about name, size, and magic.\n-\t\t// The fields are space-padded on the right.\n-\t\t// The size is in decimal.\n-\t\t// The file data - size bytes - follows the header.\n-\t\t// Headers are 2-byte aligned, so if size is odd, an extra padding\n-\t\t// byte sits between the file data and the next header.\n-\t\t// The file data that follows is padded to an even number of bytes:\n-\t\t// if size is odd, an extra padding byte is inserted betw the next header.\n-\t\tif len(data) < 60 {\n-\t\t\treturn errTruncatedArchive\n-\t\t}\n-\t\tif !bytes.Equal(data[58:60], archiveMagic) {\n-\t\t\treturn errCorruptArchive\n-\t\t}\n-\t\tname := trimSpace(data[0:16])\n-\t\tsize, err := strconv.ParseInt(trimSpace(data[48:58]), 10, 64)\n-\t\tif err != nil {\n-\t\t\treturn errCorruptArchive\n-\t\t}\n-\t\tdata = data[60:]\n-\t\tfsize := size + size&1\n-\t\tif fsize < 0 || fsize < size {\n-\t\t\treturn errCorruptArchive\n-\t\t}\n-\t\tswitch name {\n-\t\tcase \"__.SYMDEF\", \"__.GOSYMDEF\", \"__.PKGDEF\":\n-\t\t\tr.skip(size)\n-\t\tdefault:\n-\t\t\toldLimit := r.limit\n-\t\t\tr.limit = r.offset + size\n-\t\t\tif err := r.parseObject(nil); err != nil {\n-\t\t\t\treturn fmt.Errorf(\"parsing archive member %q: %v\", name, err)\n-\t\t\t}\n-\t\t\tr.skip(r.limit - r.offset)\n-\t\t\tr.limit = oldLimit\n-\t\t}\n-\t\tif size&1 != 0 {\n-\t\t\tr.skip(1)\n-\t\t}\n-\t}\n-\treturn nil\n-}\n-\n-// parseObject parses a single Go object file.\n-// The prefix is the bytes already read from the file,\n-// typically in order to detect that this is an object file.\n-// The object file consists of a textual header ending in \"\\n!\\n\"\n-// and then the part we want to parse begins.\n-// The format of that part is defined in a comment at the top\n-// of src/liblink/objfile.c.\n-func (r *objReader) parseObject(prefix []byte) error {\n-\t// TODO(rsc): Maybe use prefix and the initial input to\n-\t// record the header line from the file, which would\n-\t// give the architecture and other version information.\n-\n-\tr.p.MaxVersion++\n-\tvar c1, c2, c3 byte\n-\tfor {\n-\t\tc1, c2, c3 = c2, c3, r.readByte()\n-\t\tif c3 == 0 { // NUL or EOF, either is bad\n-\t\t\treturn errCorruptObject\n-\t\t}\n-\t\tif c1 == '\\n' && c2 == '!' && c3 == '\\n' {\n-\t\t\tbreak\n-\t\t}\n-\t}\n-\n-\tr.readFull(r.tmp[:8])\n-\tif !bytes.Equal(r.tmp[:8], []byte(\"\\x00\\x00go13ld\")) {\n-\t\treturn r.error(errCorruptObject)\n-\t}\n-\n-\t// Direct package dependencies.\n-\tfor {\n-\t\ts := r.readString()\n-\t\tif s == \"\" {\n-\t\t\tbreak\n-\t\t}\n-\t\tr.p.Imports = append(r.p.Imports, s)\n-\t}\n-\n-\t// Symbols.\n-\tfor {\n-\t\tif b := r.readByte(); b != 0xfe {\n-\t\t\tif b != 0xff {\n-\t\t\t\treturn r.error(errCorruptObject)\n-\t\t\t}\n-\t\t\tbreak\n-\t\t}\n-\n-\t\ttyp := r.readInt()\n-\t\ts := &Sym{SymID: r.readSymID()}\n-\t\tr.p.Syms = append(r.p.Syms, s)\n-\t\ts.Kind = SymKind(typ)\n-\t\ts.DupOK = r.readInt() != 0\n-\t\ts.Size = r.readInt()\n-\t\ts.Type = r.readSymID()\n-\t\ts.Data = r.readData()\n-\t\ts.Reloc = make([]Reloc, r.readInt())\n-\t\tfor i := range s.Reloc {\n-\t\t\trel := &s.Reloc[i]\n-\t\t\trel.Offset = r.readInt()\n-\t\t\trel.Size = r.readInt()\n-\t\t\trel.Type = r.readInt()\n-\t\t\trel.Add = r.readInt()\n-\t\t\tr.readInt() // Xadd - ignored\n-\t\t\trel.Sym = r.readSymID()\n-\t\t\tr.readSymID() // Xsym - ignored\n-\t\t}\n-\n-\t\tif s.Kind == STEXT {\n-\t\t\tf := new(Func)\n-\t\t\ts.Func = f\n-\t\t\tf.Args = r.readInt()\n-\t\t\tf.Frame = r.readInt()\n-\t\t\tf.Var = make([]Var, r.readInt())\n-\t\t\tfor i := range f.Var {\n-\t\t\t\tv := &f.Var[i]\n-\t\t\t\tv.Name = r.readSymID().Name\n-\t\t\t\tv.Offset = r.readInt()\n-\t\t\t\tv.Kind = r.readInt()\n-\t\t\t\tv.Type = r.readSymID()\n-\t\t\t}\n-\n-\t\t\tf.PCSP = r.readData()\n-\t\t\tf.PCFile = r.readData()\n-\t\t\tf.PCLine = r.readData()\n-\t\t\tf.PCData = make([]Data, r.readInt())\n-\t\t\tfor i := range f.PCData {\n-\t\t\t\tf.PCData[i] = r.readData()\n-\t\t\t}\n-\t\t\tf.FuncData = make([]FuncData, r.readInt())\n-\t\t\tfor i := range f.FuncData {\n-\t\t\t\tf.FuncData[i].Sym = r.readSymID()\n-\t\t\t}\n-\t\t\tfor i := range f.FuncData {\n-\t\t\t\tf.FuncData[i].Offset = int64(r.readInt()) // TODO\n-\t\t\t}\n-\t\t\tf.File = make([]string, r.readInt())\n-\t\t\tfor i := range f.File {\n-\t\t\t\tf.File[i] = r.readSymID().Name\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tr.readFull(r.tmp[:7])\n-\tif !bytes.Equal(r.tmp[:7], []byte(\"\\xffgo13ld\")) {\n-\t\treturn r.error(errCorruptObject)\n-\t}\n-\n-\treturn nil\n-}"}, {"sha": "dee140533c996c8bb232e786671eb96c0d4aaeff", "filename": "libgo/go/debug/goobj/read_test.go", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf2fc6ee0a7edbe7de4299f28b66527c07bb0a2/libgo%2Fgo%2Fdebug%2Fgoobj%2Fread_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf2fc6ee0a7edbe7de4299f28b66527c07bb0a2/libgo%2Fgo%2Fdebug%2Fgoobj%2Fread_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fgoobj%2Fread_test.go?ref=bcf2fc6ee0a7edbe7de4299f28b66527c07bb0a2", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2013 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package goobj\n-\n-import \"testing\"\n-\n-var importPathToPrefixTests = []struct {\n-\tin  string\n-\tout string\n-}{\n-\t{\"runtime\", \"runtime\"},\n-\t{\"sync/atomic\", \"sync/atomic\"},\n-\t{\"code.google.com/p/go.tools/godoc\", \"code.google.com/p/go.tools/godoc\"},\n-\t{\"foo.bar/baz.quux\", \"foo.bar/baz%2equux\"},\n-\t{\"\", \"\"},\n-\t{\"%foo%bar\", \"%25foo%25bar\"},\n-\t{\"\\x01\\x00\\x7F\u263a\", \"%01%00%7f%e2%98%ba\"},\n-}\n-\n-func TestImportPathToPrefix(t *testing.T) {\n-\tfor _, tt := range importPathToPrefixTests {\n-\t\tif out := importPathToPrefix(tt.in); out != tt.out {\n-\t\t\tt.Errorf(\"importPathToPrefix(%q) = %q, want %q\", tt.in, out, tt.out)\n-\t\t}\n-\t}\n-}"}, {"sha": "da13c510064fc8c2c58285f75c2aa00a5381da98", "filename": "libgo/go/debug/macho/file.go", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fmacho%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fmacho%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fmacho%2Ffile.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -11,7 +11,6 @@ import (\n \t\"bytes\"\n \t\"debug/dwarf\"\n \t\"encoding/binary\"\n-\t\"errors\"\n \t\"fmt\"\n \t\"io\"\n \t\"os\"\n@@ -481,7 +480,7 @@ func (f *File) DWARF() (*dwarf.Data, error) {\n \t\tname = \"__debug_\" + name\n \t\ts := f.Section(name)\n \t\tif s == nil {\n-\t\t\treturn nil, errors.New(\"missing Mach-O section \" + name)\n+\t\t\tcontinue\n \t\t}\n \t\tb, err := s.Data()\n \t\tif err != nil && uint64(len(b)) < s.Size {"}, {"sha": "4797780ce77918173d954c1c57ad4f8f59ba2f52", "filename": "libgo/go/debug/macho/file_test.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fmacho%2Ffile_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fmacho%2Ffile_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fmacho%2Ffile_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -184,7 +184,7 @@ func TestOpenFat(t *testing.T) {\n \t\tftArch := &fileTests[i]\n \n \t\tif arch.Cpu != ftArch.hdr.Cpu || arch.SubCpu != ftArch.hdr.SubCpu {\n-\t\t\tt.Error(\"OpenFat: architecture #%d got cpu=%#x subtype=%#x, expected cpu=%#x, subtype=%#x\", i, arch.Cpu, arch.SubCpu, ftArch.hdr.Cpu, ftArch.hdr.SubCpu)\n+\t\t\tt.Errorf(\"OpenFat: architecture #%d got cpu=%#x subtype=%#x, expected cpu=%#x, subtype=%#x\", i, arch.Cpu, arch.SubCpu, ftArch.hdr.Cpu, ftArch.hdr.SubCpu)\n \t\t}\n \n \t\tif !reflect.DeepEqual(arch.FileHeader, ftArch.hdr) {\n@@ -202,9 +202,9 @@ func TestOpenFatFailure(t *testing.T) {\n \tfilename = \"testdata/gcc-386-darwin-exec\" // not a fat Mach-O\n \tff, err := OpenFat(filename)\n \tif err != ErrNotFat {\n-\t\tt.Errorf(\"OpenFat %s: got %v, want ErrNotFat\", err)\n+\t\tt.Errorf(\"OpenFat %s: got %v, want ErrNotFat\", filename, err)\n \t}\n \tif ff != nil {\n-\t\tt.Errorf(\"OpenFat %s: got %v, want nil\", ff)\n+\t\tt.Errorf(\"OpenFat %s: got %v, want nil\", filename, ff)\n \t}\n }"}, {"sha": "d9678c8eda40887342c1aaa48043b36da597a45b", "filename": "libgo/go/debug/macho/macho.go", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fmacho%2Fmacho.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fmacho%2Fmacho.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fmacho%2Fmacho.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -44,14 +44,22 @@ const (\n // A Cpu is a Mach-O cpu type.\n type Cpu uint32\n \n+const cpuArch64 = 0x01000000\n+\n const (\n \tCpu386   Cpu = 7\n-\tCpuAmd64 Cpu = Cpu386 + 1<<24\n+\tCpuAmd64 Cpu = Cpu386 | cpuArch64\n+\tCpuArm   Cpu = 12\n+\tCpuPpc   Cpu = 18\n+\tCpuPpc64 Cpu = CpuPpc | cpuArch64\n )\n \n var cpuStrings = []intName{\n \t{uint32(Cpu386), \"Cpu386\"},\n \t{uint32(CpuAmd64), \"CpuAmd64\"},\n+\t{uint32(CpuArm), \"CpuArm\"},\n+\t{uint32(CpuPpc), \"CpuPpc\"},\n+\t{uint32(CpuPpc64), \"CpuPpc64\"},\n }\n \n func (i Cpu) String() string   { return stringName(uint32(i), cpuStrings, false) }"}, {"sha": "ce6f1408fe98f43e1c2afe516482b9c4dc098928", "filename": "libgo/go/debug/pe/file.go", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fpe%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fpe%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fpe%2Ffile.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -13,13 +13,15 @@ import (\n \t\"io\"\n \t\"os\"\n \t\"strconv\"\n+\t\"unsafe\"\n )\n \n // A File represents an open PE file.\n type File struct {\n \tFileHeader\n-\tSections []*Section\n-\tSymbols  []*Symbol\n+\tOptionalHeader interface{} // of type *OptionalHeader32 or *OptionalHeader64\n+\tSections       []*Section\n+\tSymbols        []*Symbol\n \n \tcloser io.Closer\n }\n@@ -196,10 +198,33 @@ func NewFile(r io.ReaderAt) (*File, error) {\n \t\t}\n \t}\n \n-\t// Process sections.\n+\t// Read optional header.\n \tsr.Seek(base, os.SEEK_SET)\n-\tbinary.Read(sr, binary.LittleEndian, &f.FileHeader)\n-\tsr.Seek(int64(f.FileHeader.SizeOfOptionalHeader), os.SEEK_CUR) //Skip OptionalHeader\n+\tif err := binary.Read(sr, binary.LittleEndian, &f.FileHeader); err != nil {\n+\t\treturn nil, err\n+\t}\n+\tvar oh32 OptionalHeader32\n+\tvar oh64 OptionalHeader64\n+\tswitch uintptr(f.FileHeader.SizeOfOptionalHeader) {\n+\tcase unsafe.Sizeof(oh32):\n+\t\tif err := binary.Read(sr, binary.LittleEndian, &oh32); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif oh32.Magic != 0x10b { // PE32\n+\t\t\treturn nil, fmt.Errorf(\"pe32 optional header has unexpected Magic of 0x%x\", oh32.Magic)\n+\t\t}\n+\t\tf.OptionalHeader = &oh32\n+\tcase unsafe.Sizeof(oh64):\n+\t\tif err := binary.Read(sr, binary.LittleEndian, &oh64); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif oh64.Magic != 0x20b { // PE32+\n+\t\t\treturn nil, fmt.Errorf(\"pe32+ optional header has unexpected Magic of 0x%x\", oh64.Magic)\n+\t\t}\n+\t\tf.OptionalHeader = &oh64\n+\t}\n+\n+\t// Process sections.\n \tf.Sections = make([]*Section, f.FileHeader.NumberOfSections)\n \tfor i := 0; i < int(f.FileHeader.NumberOfSections); i++ {\n \t\tsh := new(SectionHeader32)"}, {"sha": "ddbb271744146c8b052740e9fc251f1acfc29dd9", "filename": "libgo/go/debug/pe/file_test.go", "status": "modified", "additions": 124, "deletions": 15, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fpe%2Ffile_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fpe%2Ffile_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fpe%2Ffile_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -12,6 +12,7 @@ import (\n type fileTest struct {\n \tfile     string\n \thdr      FileHeader\n+\topthdr   interface{}\n \tsections []*SectionHeader\n \tsymbols  []*Symbol\n }\n@@ -20,6 +21,7 @@ var fileTests = []fileTest{\n \t{\n \t\t\"testdata/gcc-386-mingw-obj\",\n \t\tFileHeader{0x014c, 0x000c, 0x0, 0x64a, 0x1e, 0x0, 0x104},\n+\t\tnil,\n \t\t[]*SectionHeader{\n \t\t\t{\".text\", 0, 0, 36, 500, 1440, 0, 3, 0, 0x60300020},\n \t\t\t{\".data\", 0, 0, 0, 0, 0, 0, 0, 0, 3224371264},\n@@ -56,27 +58,130 @@ var fileTests = []fileTest{\n \t{\n \t\t\"testdata/gcc-386-mingw-exec\",\n \t\tFileHeader{0x014c, 0x000f, 0x4c6a1b60, 0x3c00, 0x282, 0xe0, 0x107},\n+\t\t&OptionalHeader32{\n+\t\t\t0x10b, 0x2, 0x38, 0xe00, 0x1a00, 0x200, 0x1160, 0x1000, 0x2000, 0x400000, 0x1000, 0x200, 0x4, 0x0, 0x1, 0x0, 0x4, 0x0, 0x0, 0x10000, 0x400, 0x14abb, 0x3, 0x0, 0x200000, 0x1000, 0x100000, 0x1000, 0x0, 0x10,\n+\t\t\t[16]DataDirectory{\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x5000, 0x3c8},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x7000, 0x18},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t},\n+\t\t},\n+\t\t[]*SectionHeader{\n+\t\t\t{\".text\", 0xcd8, 0x1000, 0xe00, 0x400, 0x0, 0x0, 0x0, 0x0, 0x60500060},\n+\t\t\t{\".data\", 0x10, 0x2000, 0x200, 0x1200, 0x0, 0x0, 0x0, 0x0, 0xc0300040},\n+\t\t\t{\".rdata\", 0x120, 0x3000, 0x200, 0x1400, 0x0, 0x0, 0x0, 0x0, 0x40300040},\n+\t\t\t{\".bss\", 0xdc, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0400080},\n+\t\t\t{\".idata\", 0x3c8, 0x5000, 0x400, 0x1600, 0x0, 0x0, 0x0, 0x0, 0xc0300040},\n+\t\t\t{\".CRT\", 0x18, 0x6000, 0x200, 0x1a00, 0x0, 0x0, 0x0, 0x0, 0xc0300040},\n+\t\t\t{\".tls\", 0x20, 0x7000, 0x200, 0x1c00, 0x0, 0x0, 0x0, 0x0, 0xc0300040},\n+\t\t\t{\".debug_aranges\", 0x20, 0x8000, 0x200, 0x1e00, 0x0, 0x0, 0x0, 0x0, 0x42100000},\n+\t\t\t{\".debug_pubnames\", 0x51, 0x9000, 0x200, 0x2000, 0x0, 0x0, 0x0, 0x0, 0x42100000},\n+\t\t\t{\".debug_pubtypes\", 0x91, 0xa000, 0x200, 0x2200, 0x0, 0x0, 0x0, 0x0, 0x42100000},\n+\t\t\t{\".debug_info\", 0xe22, 0xb000, 0x1000, 0x2400, 0x0, 0x0, 0x0, 0x0, 0x42100000},\n+\t\t\t{\".debug_abbrev\", 0x157, 0xc000, 0x200, 0x3400, 0x0, 0x0, 0x0, 0x0, 0x42100000},\n+\t\t\t{\".debug_line\", 0x144, 0xd000, 0x200, 0x3600, 0x0, 0x0, 0x0, 0x0, 0x42100000},\n+\t\t\t{\".debug_frame\", 0x34, 0xe000, 0x200, 0x3800, 0x0, 0x0, 0x0, 0x0, 0x42300000},\n+\t\t\t{\".debug_loc\", 0x38, 0xf000, 0x200, 0x3a00, 0x0, 0x0, 0x0, 0x0, 0x42100000},\n+\t\t},\n+\t\t[]*Symbol{},\n+\t},\n+\t{\n+\t\t\"testdata/gcc-amd64-mingw-obj\",\n+\t\tFileHeader{0x8664, 0x6, 0x0, 0x198, 0x12, 0x0, 0x4},\n+\t\tnil,\n+\t\t[]*SectionHeader{\n+\t\t\t{\".text\", 0x0, 0x0, 0x30, 0x104, 0x15c, 0x0, 0x3, 0x0, 0x60500020},\n+\t\t\t{\".data\", 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0500040},\n+\t\t\t{\".bss\", 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0500080},\n+\t\t\t{\".rdata\", 0x0, 0x0, 0x10, 0x134, 0x0, 0x0, 0x0, 0x0, 0x40500040},\n+\t\t\t{\".xdata\", 0x0, 0x0, 0xc, 0x144, 0x0, 0x0, 0x0, 0x0, 0x40300040},\n+\t\t\t{\".pdata\", 0x0, 0x0, 0xc, 0x150, 0x17a, 0x0, 0x3, 0x0, 0x40300040},\n+\t\t},\n+\t\t[]*Symbol{\n+\t\t\t{\".file\", 0x0, -2, 0x0, 0x67},\n+\t\t\t{\"main\", 0x0, 1, 0x20, 0x2},\n+\t\t\t{\".text\", 0x0, 1, 0x0, 0x3},\n+\t\t\t{\".data\", 0x0, 2, 0x0, 0x3},\n+\t\t\t{\".bss\", 0x0, 3, 0x0, 0x3},\n+\t\t\t{\".rdata\", 0x0, 4, 0x0, 0x3},\n+\t\t\t{\".xdata\", 0x0, 5, 0x0, 0x3},\n+\t\t\t{\".pdata\", 0x0, 6, 0x0, 0x3},\n+\t\t\t{\"__main\", 0x0, 0, 0x20, 0x2},\n+\t\t\t{\"puts\", 0x0, 0, 0x20, 0x2},\n+\t\t},\n+\t},\n+\t{\n+\t\t\"testdata/gcc-amd64-mingw-exec\",\n+\t\tFileHeader{0x8664, 0x9, 0x53472993, 0x0, 0x0, 0xf0, 0x22f},\n+\t\t&OptionalHeader64{\n+\t\t\t0x20b, 0x2, 0x16, 0x6a00, 0x2400, 0x1600, 0x14e0, 0x1000, 0x400000, 0x1000, 0x200, 0x4, 0x0, 0x0, 0x0, 0x5, 0x2, 0x0, 0x11000, 0x400, 0x1841e, 0x3, 0x0, 0x200000, 0x1000, 0x100000, 0x1000, 0x0, 0x10,\n+\t\t\t[16]DataDirectory{\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0xe000, 0x990},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0xa000, 0x498},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x10000, 0x28},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0xe254, 0x218},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t\t{0x0, 0x0},\n+\t\t\t},\n+\t\t},\n \t\t[]*SectionHeader{\n-\t\t\t{Name: \".text\", VirtualSize: 0xcd8, VirtualAddress: 0x1000, Size: 0xe00, Offset: 0x400, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0x60500060},\n-\t\t\t{Name: \".data\", VirtualSize: 0x10, VirtualAddress: 0x2000, Size: 0x200, Offset: 0x1200, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0xc0300040},\n-\t\t\t{Name: \".rdata\", VirtualSize: 0x120, VirtualAddress: 0x3000, Size: 0x200, Offset: 0x1400, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0x40300040},\n-\t\t\t{Name: \".bss\", VirtualSize: 0xdc, VirtualAddress: 0x4000, Size: 0x0, Offset: 0x0, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0xc0400080},\n-\t\t\t{Name: \".idata\", VirtualSize: 0x3c8, VirtualAddress: 0x5000, Size: 0x400, Offset: 0x1600, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0xc0300040},\n-\t\t\t{Name: \".CRT\", VirtualSize: 0x18, VirtualAddress: 0x6000, Size: 0x200, Offset: 0x1a00, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0xc0300040},\n-\t\t\t{Name: \".tls\", VirtualSize: 0x20, VirtualAddress: 0x7000, Size: 0x200, Offset: 0x1c00, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0xc0300040},\n-\t\t\t{Name: \".debug_aranges\", VirtualSize: 0x20, VirtualAddress: 0x8000, Size: 0x200, Offset: 0x1e00, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0x42100000},\n-\t\t\t{Name: \".debug_pubnames\", VirtualSize: 0x51, VirtualAddress: 0x9000, Size: 0x200, Offset: 0x2000, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0x42100000},\n-\t\t\t{Name: \".debug_pubtypes\", VirtualSize: 0x91, VirtualAddress: 0xa000, Size: 0x200, Offset: 0x2200, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0x42100000},\n-\t\t\t{Name: \".debug_info\", VirtualSize: 0xe22, VirtualAddress: 0xb000, Size: 0x1000, Offset: 0x2400, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0x42100000},\n-\t\t\t{Name: \".debug_abbrev\", VirtualSize: 0x157, VirtualAddress: 0xc000, Size: 0x200, Offset: 0x3400, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0x42100000},\n-\t\t\t{Name: \".debug_line\", VirtualSize: 0x144, VirtualAddress: 0xd000, Size: 0x200, Offset: 0x3600, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0x42100000},\n-\t\t\t{Name: \".debug_frame\", VirtualSize: 0x34, VirtualAddress: 0xe000, Size: 0x200, Offset: 0x3800, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0x42300000},\n-\t\t\t{Name: \".debug_loc\", VirtualSize: 0x38, VirtualAddress: 0xf000, Size: 0x200, Offset: 0x3a00, PointerToRelocations: 0x0, PointerToLineNumbers: 0x0, NumberOfRelocations: 0x0, NumberOfLineNumbers: 0x0, Characteristics: 0x42100000},\n+\t\t\t{\".text\", 0x6860, 0x1000, 0x6a00, 0x400, 0x0, 0x0, 0x0, 0x0, 0x60500020},\n+\t\t\t{\".data\", 0xe0, 0x8000, 0x200, 0x6e00, 0x0, 0x0, 0x0, 0x0, 0xc0500040},\n+\t\t\t{\".rdata\", 0x6b0, 0x9000, 0x800, 0x7000, 0x0, 0x0, 0x0, 0x0, 0x40600040},\n+\t\t\t{\".pdata\", 0x498, 0xa000, 0x600, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x40300040},\n+\t\t\t{\".xdata\", 0x488, 0xb000, 0x600, 0x7e00, 0x0, 0x0, 0x0, 0x0, 0x40300040},\n+\t\t\t{\".bss\", 0x1410, 0xc000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0600080},\n+\t\t\t{\".idata\", 0x990, 0xe000, 0xa00, 0x8400, 0x0, 0x0, 0x0, 0x0, 0xc0300040},\n+\t\t\t{\".CRT\", 0x68, 0xf000, 0x200, 0x8e00, 0x0, 0x0, 0x0, 0x0, 0xc0400040},\n+\t\t\t{\".tls\", 0x48, 0x10000, 0x200, 0x9000, 0x0, 0x0, 0x0, 0x0, 0xc0600040},\n \t\t},\n \t\t[]*Symbol{},\n \t},\n }\n \n+func isOptHdrEq(a, b interface{}) bool {\n+\tswitch va := a.(type) {\n+\tcase *OptionalHeader32:\n+\t\tvb, ok := b.(*OptionalHeader32)\n+\t\tif !ok {\n+\t\t\treturn false\n+\t\t}\n+\t\treturn *vb == *va\n+\tcase *OptionalHeader64:\n+\t\tvb, ok := b.(*OptionalHeader64)\n+\t\tif !ok {\n+\t\t\treturn false\n+\t\t}\n+\t\treturn *vb == *va\n+\tcase nil:\n+\t\treturn b == nil\n+\t}\n+\treturn false\n+}\n+\n func TestOpen(t *testing.T) {\n \tfor i := range fileTests {\n \t\ttt := &fileTests[i]\n@@ -90,6 +195,10 @@ func TestOpen(t *testing.T) {\n \t\t\tt.Errorf(\"open %s:\\n\\thave %#v\\n\\twant %#v\\n\", tt.file, f.FileHeader, tt.hdr)\n \t\t\tcontinue\n \t\t}\n+\t\tif !isOptHdrEq(tt.opthdr, f.OptionalHeader) {\n+\t\t\tt.Errorf(\"open %s:\\n\\thave %#v\\n\\twant %#v\\n\", tt.file, f.OptionalHeader, tt.opthdr)\n+\t\t\tcontinue\n+\t\t}\n \n \t\tfor i, sh := range f.Sections {\n \t\t\tif i >= len(tt.sections) {"}, {"sha": "8e90b1b513acb1b687eae99099fbdcb041e9b442", "filename": "libgo/go/debug/pe/pe.go", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fpe%2Fpe.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fpe%2Fpe.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fpe%2Fpe.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -14,6 +14,78 @@ type FileHeader struct {\n \tCharacteristics      uint16\n }\n \n+type DataDirectory struct {\n+\tVirtualAddress uint32\n+\tSize           uint32\n+}\n+\n+type OptionalHeader32 struct {\n+\tMagic                       uint16\n+\tMajorLinkerVersion          uint8\n+\tMinorLinkerVersion          uint8\n+\tSizeOfCode                  uint32\n+\tSizeOfInitializedData       uint32\n+\tSizeOfUninitializedData     uint32\n+\tAddressOfEntryPoint         uint32\n+\tBaseOfCode                  uint32\n+\tBaseOfData                  uint32\n+\tImageBase                   uint32\n+\tSectionAlignment            uint32\n+\tFileAlignment               uint32\n+\tMajorOperatingSystemVersion uint16\n+\tMinorOperatingSystemVersion uint16\n+\tMajorImageVersion           uint16\n+\tMinorImageVersion           uint16\n+\tMajorSubsystemVersion       uint16\n+\tMinorSubsystemVersion       uint16\n+\tWin32VersionValue           uint32\n+\tSizeOfImage                 uint32\n+\tSizeOfHeaders               uint32\n+\tCheckSum                    uint32\n+\tSubsystem                   uint16\n+\tDllCharacteristics          uint16\n+\tSizeOfStackReserve          uint32\n+\tSizeOfStackCommit           uint32\n+\tSizeOfHeapReserve           uint32\n+\tSizeOfHeapCommit            uint32\n+\tLoaderFlags                 uint32\n+\tNumberOfRvaAndSizes         uint32\n+\tDataDirectory               [16]DataDirectory\n+}\n+\n+type OptionalHeader64 struct {\n+\tMagic                       uint16\n+\tMajorLinkerVersion          uint8\n+\tMinorLinkerVersion          uint8\n+\tSizeOfCode                  uint32\n+\tSizeOfInitializedData       uint32\n+\tSizeOfUninitializedData     uint32\n+\tAddressOfEntryPoint         uint32\n+\tBaseOfCode                  uint32\n+\tImageBase                   uint64\n+\tSectionAlignment            uint32\n+\tFileAlignment               uint32\n+\tMajorOperatingSystemVersion uint16\n+\tMinorOperatingSystemVersion uint16\n+\tMajorImageVersion           uint16\n+\tMinorImageVersion           uint16\n+\tMajorSubsystemVersion       uint16\n+\tMinorSubsystemVersion       uint16\n+\tWin32VersionValue           uint32\n+\tSizeOfImage                 uint32\n+\tSizeOfHeaders               uint32\n+\tCheckSum                    uint32\n+\tSubsystem                   uint16\n+\tDllCharacteristics          uint16\n+\tSizeOfStackReserve          uint64\n+\tSizeOfStackCommit           uint64\n+\tSizeOfHeapReserve           uint64\n+\tSizeOfHeapCommit            uint64\n+\tLoaderFlags                 uint32\n+\tNumberOfRvaAndSizes         uint32\n+\tDataDirectory               [16]DataDirectory\n+}\n+\n type SectionHeader32 struct {\n \tName                 [8]uint8\n \tVirtualSize          uint32"}, {"sha": "78d4e5fed98b09866e047db6a670b9721c03badb", "filename": "libgo/go/debug/pe/testdata/gcc-amd64-mingw-exec", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fpe%2Ftestdata%2Fgcc-amd64-mingw-exec", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fpe%2Ftestdata%2Fgcc-amd64-mingw-exec", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fpe%2Ftestdata%2Fgcc-amd64-mingw-exec?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387"}, {"sha": "48ae7921f33e4ace83da05688ca7f0c09d8df1f8", "filename": "libgo/go/debug/pe/testdata/gcc-amd64-mingw-obj", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fpe%2Ftestdata%2Fgcc-amd64-mingw-obj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fpe%2Ftestdata%2Fgcc-amd64-mingw-obj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fpe%2Ftestdata%2Fgcc-amd64-mingw-obj?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387"}, {"sha": "60a5857193e9f2770124e18811b8834e497584e1", "filename": "libgo/go/debug/plan9obj/file.go", "status": "modified", "additions": 43, "deletions": 64, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fplan9obj%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fplan9obj%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fplan9obj%2Ffile.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -13,9 +13,12 @@ import (\n \t\"os\"\n )\n \n-// A FileHeader represents an Plan 9 a.out file header.\n+// A FileHeader represents a Plan 9 a.out file header.\n type FileHeader struct {\n-\tPtrsz int\n+\tMagic   uint32\n+\tBss     uint32\n+\tEntry   uint64\n+\tPtrSize int\n }\n \n // A File represents an open Plan 9 a.out file.\n@@ -25,13 +28,16 @@ type File struct {\n \tcloser   io.Closer\n }\n \n+// A SectionHeader represents a single Plan 9 a.out section header.\n+// This structure doesn't exist on-disk, but eases navigation\n+// through the object file.\n type SectionHeader struct {\n \tName   string\n \tSize   uint32\n \tOffset uint32\n }\n \n-// A Section represents a single section in an Plan 9 a.out file.\n+// A Section represents a single section in a Plan 9 a.out file.\n type Section struct {\n \tSectionHeader\n \n@@ -49,41 +55,15 @@ type Section struct {\n func (s *Section) Data() ([]byte, error) {\n \tdat := make([]byte, s.sr.Size())\n \tn, err := s.sr.ReadAt(dat, 0)\n+\tif n == len(dat) {\n+\t\terr = nil\n+\t}\n \treturn dat[0:n], err\n }\n \n // Open returns a new ReadSeeker reading the Plan 9 a.out section.\n func (s *Section) Open() io.ReadSeeker { return io.NewSectionReader(s.sr, 0, 1<<63-1) }\n \n-// A ProgHeader represents a single Plan 9 a.out program header.\n-type ProgHeader struct {\n-\tMagic uint32\n-\tText  uint32\n-\tData  uint32\n-\tBss   uint32\n-\tSyms  uint32\n-\tEntry uint64\n-\tSpsz  uint32\n-\tPcsz  uint32\n-}\n-\n-// A Prog represents the program header in an Plan 9 a.out binary.\n-type Prog struct {\n-\tProgHeader\n-\n-\t// Embed ReaderAt for ReadAt method.\n-\t// Do not embed SectionReader directly\n-\t// to avoid having Read and Seek.\n-\t// If a client wants Read and Seek it must use\n-\t// Open() to avoid fighting over the seek offset\n-\t// with other clients.\n-\tio.ReaderAt\n-\tsr *io.SectionReader\n-}\n-\n-// Open returns a new ReadSeeker reading the Plan 9 a.out program body.\n-func (p *Prog) Open() io.ReadSeeker { return io.NewSectionReader(p.sr, 0, 1<<63-1) }\n-\n // A Symbol represents an entry in a Plan 9 a.out symbol table section.\n type Sym struct {\n \tValue uint64\n@@ -95,13 +75,15 @@ type Sym struct {\n  * Plan 9 a.out reader\n  */\n \n-type FormatError struct {\n+// formatError is returned by some operations if the data does\n+// not have the correct format for an object file.\n+type formatError struct {\n \toff int\n \tmsg string\n \tval interface{}\n }\n \n-func (e *FormatError) Error() string {\n+func (e *formatError) Error() string {\n \tmsg := e.msg\n \tif e.val != nil {\n \t\tmsg += fmt.Sprintf(\" '%v'\", e.val)\n@@ -110,7 +92,7 @@ func (e *FormatError) Error() string {\n \treturn msg\n }\n \n-// Open opens the named file using os.Open and prepares it for use as an Plan 9 a.out binary.\n+// Open opens the named file using os.Open and prepares it for use as a Plan 9 a.out binary.\n func Open(name string) (*File, error) {\n \tf, err := os.Open(name)\n \tif err != nil {\n@@ -137,16 +119,16 @@ func (f *File) Close() error {\n \treturn err\n }\n \n-func parseMagic(magic [4]byte) (*ExecTable, error) {\n-\tfor _, e := range exectab {\n-\t\tif string(magic[:]) == e.Magic {\n-\t\t\treturn &e, nil\n-\t\t}\n+func parseMagic(magic []byte) (uint32, error) {\n+\tm := binary.BigEndian.Uint32(magic)\n+\tswitch m {\n+\tcase Magic386, MagicAMD64, MagicARM:\n+\t\treturn m, nil\n \t}\n-\treturn nil, &FormatError{0, \"bad magic number\", magic[:]}\n+\treturn 0, &formatError{0, \"bad magic number\", magic}\n }\n \n-// NewFile creates a new File for accessing an Plan 9 binary in an underlying reader.\n+// NewFile creates a new File for accessing a Plan 9 binary in an underlying reader.\n // The Plan 9 binary is expected to start at position 0 in the ReaderAt.\n func NewFile(r io.ReaderAt) (*File, error) {\n \tsr := io.NewSectionReader(r, 0, 1<<63-1)\n@@ -155,34 +137,31 @@ func NewFile(r io.ReaderAt) (*File, error) {\n \tif _, err := r.ReadAt(magic[:], 0); err != nil {\n \t\treturn nil, err\n \t}\n-\tmp, err := parseMagic(magic)\n+\t_, err := parseMagic(magic[:])\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \n-\tf := &File{FileHeader{mp.Ptrsz}, nil, nil}\n-\n \tph := new(prog)\n \tif err := binary.Read(sr, binary.BigEndian, ph); err != nil {\n \t\treturn nil, err\n \t}\n \n-\tp := new(Prog)\n-\tp.ProgHeader = ProgHeader{\n-\t\tMagic: ph.Magic,\n-\t\tText:  ph.Text,\n-\t\tData:  ph.Data,\n-\t\tBss:   ph.Bss,\n-\t\tSyms:  ph.Syms,\n-\t\tEntry: uint64(ph.Entry),\n-\t\tSpsz:  ph.Spsz,\n-\t\tPcsz:  ph.Pcsz,\n-\t}\n+\tf := &File{FileHeader: FileHeader{\n+\t\tMagic:   ph.Magic,\n+\t\tBss:     ph.Bss,\n+\t\tEntry:   uint64(ph.Entry),\n+\t\tPtrSize: 4,\n+\t}}\n+\n+\thdrSize := 4 * 8\n \n-\tif mp.Ptrsz == 8 {\n-\t\tif err := binary.Read(sr, binary.BigEndian, &p.Entry); err != nil {\n+\tif ph.Magic&Magic64 != 0 {\n+\t\tif err := binary.Read(sr, binary.BigEndian, &f.Entry); err != nil {\n \t\t\treturn nil, err\n \t\t}\n+\t\tf.PtrSize = 8\n+\t\thdrSize += 8\n \t}\n \n \tvar sects = []struct {\n@@ -198,7 +177,7 @@ func NewFile(r io.ReaderAt) (*File, error) {\n \n \tf.Sections = make([]*Section, 5)\n \n-\toff := mp.Hsize\n+\toff := uint32(hdrSize)\n \n \tfor i, sect := range sects {\n \t\ts := new(Section)\n@@ -208,7 +187,7 @@ func NewFile(r io.ReaderAt) (*File, error) {\n \t\t\tOffset: off,\n \t\t}\n \t\toff += sect.size\n-\t\ts.sr = io.NewSectionReader(r, int64(s.SectionHeader.Offset), int64(s.SectionHeader.Size))\n+\t\ts.sr = io.NewSectionReader(r, int64(s.Offset), int64(s.Size))\n \t\ts.ReaderAt = s.sr\n \t\tf.Sections[i] = s\n \t}\n@@ -223,7 +202,7 @@ func walksymtab(data []byte, ptrsz int, fn func(sym) error) error {\n \tfor len(p) >= 4 {\n \t\t// Symbol type, value.\n \t\tif len(p) < ptrsz {\n-\t\t\treturn &FormatError{len(data), \"unexpected EOF\", nil}\n+\t\t\treturn &formatError{len(data), \"unexpected EOF\", nil}\n \t\t}\n \t\t// fixed-width value\n \t\tif ptrsz == 8 {\n@@ -259,7 +238,7 @@ func walksymtab(data []byte, ptrsz int, fn func(sym) error) error {\n \t\t\t}\n \t\t}\n \t\tif len(p) < i+nnul {\n-\t\t\treturn &FormatError{len(data), \"unexpected EOF\", nil}\n+\t\t\treturn &formatError{len(data), \"unexpected EOF\", nil}\n \t\t}\n \t\ts.name = p[0:i]\n \t\ti += nnul\n@@ -298,7 +277,7 @@ func newTable(symtab []byte, ptrsz int) ([]Sym, error) {\n \t\t\t\teltIdx := binary.BigEndian.Uint16(s.name[i : i+2])\n \t\t\t\telt, ok := fname[eltIdx]\n \t\t\t\tif !ok {\n-\t\t\t\t\treturn &FormatError{-1, \"bad filename code\", eltIdx}\n+\t\t\t\t\treturn &formatError{-1, \"bad filename code\", eltIdx}\n \t\t\t\t}\n \t\t\t\tif n := len(ts.Name); n > 0 && ts.Name[n-1] != '/' {\n \t\t\t\t\tts.Name += \"/\"\n@@ -331,7 +310,7 @@ func (f *File) Symbols() ([]Sym, error) {\n \t\treturn nil, errors.New(\"cannot load symbol section\")\n \t}\n \n-\treturn newTable(symtab, f.Ptrsz)\n+\treturn newTable(symtab, f.PtrSize)\n }\n \n // Section returns a section with the given name, or nil if no such"}, {"sha": "96186d815651872c84d1c63f3bf863b9751ce46d", "filename": "libgo/go/debug/plan9obj/file_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fplan9obj%2Ffile_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fplan9obj%2Ffile_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fplan9obj%2Ffile_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -18,7 +18,7 @@ type fileTest struct {\n var fileTests = []fileTest{\n \t{\n \t\t\"testdata/386-plan9-exec\",\n-\t\tFileHeader{4},\n+\t\tFileHeader{Magic386, 0x324, 0x14, 4},\n \t\t[]*SectionHeader{\n \t\t\t{\"text\", 0x4c5f, 0x20},\n \t\t\t{\"data\", 0x94c, 0x4c7f},\n@@ -29,7 +29,7 @@ var fileTests = []fileTest{\n \t},\n \t{\n \t\t\"testdata/amd64-plan9-exec\",\n-\t\tFileHeader{8},\n+\t\tFileHeader{MagicAMD64, 0x618, 0x13, 8},\n \t\t[]*SectionHeader{\n \t\t\t{\"text\", 0x4213, 0x28},\n \t\t\t{\"data\", 0xa80, 0x423b},"}, {"sha": "af9858562f9e2b6d4ad51e9f3e0497bea2ff5aa7", "filename": "libgo/go/debug/plan9obj/plan9obj.go", "status": "modified", "additions": 4, "deletions": 59, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fplan9obj%2Fplan9obj.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fdebug%2Fplan9obj%2Fplan9obj.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fplan9obj%2Fplan9obj.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,11 +8,6 @@\n \n package plan9obj\n \n-import (\n-\t\"bytes\"\n-\t\"encoding/binary\"\n-)\n-\n // Plan 9 Program header.\n type prog struct {\n \tMagic uint32 /* magic number */\n@@ -33,59 +28,9 @@ type sym struct {\n }\n \n const (\n-\thsize      = 4 * 8\n-\t_HDR_MAGIC = 0x00008000 /* header expansion */\n-)\n-\n-func magic(f, b int) string {\n-\tbuf := new(bytes.Buffer)\n-\tvar i uint32 = uint32((f) | ((((4 * (b)) + 0) * (b)) + 7))\n-\tbinary.Write(buf, binary.BigEndian, i)\n-\treturn string(buf.Bytes())\n-}\n+\tMagic64 = 0x8000 // 64-bit expanded header\n \n-var (\n-\t_A_MAGIC = magic(0, 8)           /* 68020 (retired) */\n-\t_I_MAGIC = magic(0, 11)          /* intel 386 */\n-\t_J_MAGIC = magic(0, 12)          /* intel 960 (retired) */\n-\t_K_MAGIC = magic(0, 13)          /* sparc */\n-\t_V_MAGIC = magic(0, 16)          /* mips 3000 BE */\n-\t_X_MAGIC = magic(0, 17)          /* att dsp 3210 (retired) */\n-\t_M_MAGIC = magic(0, 18)          /* mips 4000 BE */\n-\t_D_MAGIC = magic(0, 19)          /* amd 29000 (retired) */\n-\t_E_MAGIC = magic(0, 20)          /* arm */\n-\t_Q_MAGIC = magic(0, 21)          /* powerpc */\n-\t_N_MAGIC = magic(0, 22)          /* mips 4000 LE */\n-\t_L_MAGIC = magic(0, 23)          /* dec alpha (retired) */\n-\t_P_MAGIC = magic(0, 24)          /* mips 3000 LE */\n-\t_U_MAGIC = magic(0, 25)          /* sparc64 (retired) */\n-\t_S_MAGIC = magic(_HDR_MAGIC, 26) /* amd64 */\n-\t_T_MAGIC = magic(_HDR_MAGIC, 27) /* powerpc64 */\n-\t_R_MAGIC = magic(_HDR_MAGIC, 28) /* arm64 */\n+\tMagic386   = (4*11+0)*11 + 7\n+\tMagicAMD64 = (4*26+0)*26 + 7 + Magic64\n+\tMagicARM   = (4*20+0)*20 + 7\n )\n-\n-type ExecTable struct {\n-\tMagic string\n-\tPtrsz int\n-\tHsize uint32\n-}\n-\n-var exectab = []ExecTable{\n-\t{_A_MAGIC, 4, hsize},\n-\t{_I_MAGIC, 4, hsize},\n-\t{_J_MAGIC, 4, hsize},\n-\t{_K_MAGIC, 4, hsize},\n-\t{_V_MAGIC, 4, hsize},\n-\t{_X_MAGIC, 4, hsize},\n-\t{_M_MAGIC, 4, hsize},\n-\t{_D_MAGIC, 4, hsize},\n-\t{_E_MAGIC, 4, hsize},\n-\t{_Q_MAGIC, 4, hsize},\n-\t{_N_MAGIC, 4, hsize},\n-\t{_L_MAGIC, 4, hsize},\n-\t{_P_MAGIC, 4, hsize},\n-\t{_U_MAGIC, 4, hsize},\n-\t{_S_MAGIC, 8, hsize + 8},\n-\t{_T_MAGIC, 8, hsize + 8},\n-\t{_R_MAGIC, 8, hsize + 8},\n-}"}, {"sha": "60da304b55e5e8330d7e870beba1ec61f5aaa135", "filename": "libgo/go/encoding/ascii85/ascii85.go", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -281,6 +281,18 @@ func (d *decoder) Read(p []byte) (n int, err error) {\n \t\t\t\td.nbuf = copy(d.buf[0:], d.buf[nsrc:d.nbuf])\n \t\t\t\tcontinue // copy out and return\n \t\t\t}\n+\t\t\tif ndst == 0 && d.err == nil {\n+\t\t\t\t// Special case: input buffer is mostly filled with non-data bytes.\n+\t\t\t\t// Filter out such bytes to make room for more input.\n+\t\t\t\toff := 0\n+\t\t\t\tfor i := 0; i < d.nbuf; i++ {\n+\t\t\t\t\tif d.buf[i] > ' ' {\n+\t\t\t\t\t\td.buf[off] = d.buf[i]\n+\t\t\t\t\t\toff++\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\td.nbuf = off\n+\t\t\t}\n \t\t}\n \n \t\t// Out of input, out of decoded output.  Check errors."}, {"sha": "aad199b4fad56be2fe05d8f089a5e0dfb002ac54", "filename": "libgo/go/encoding/ascii85/ascii85_test.go", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fascii85%2Fascii85_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -197,3 +197,14 @@ func TestBig(t *testing.T) {\n \t\tt.Errorf(\"Decode(Encode(%d-byte string)) failed at offset %d\", n, i)\n \t}\n }\n+\n+func TestDecoderInternalWhitespace(t *testing.T) {\n+\ts := strings.Repeat(\" \", 2048) + \"z\"\n+\tdecoded, err := ioutil.ReadAll(NewDecoder(strings.NewReader(s)))\n+\tif err != nil {\n+\t\tt.Errorf(\"Decode gave error %v\", err)\n+\t}\n+\tif want := []byte(\"\\000\\000\\000\\000\"); !bytes.Equal(want, decoded) {\n+\t\tt.Errorf(\"Decode failed: got %v, want %v\", decoded, want)\n+\t}\n+}"}, {"sha": "ec7f91c1bba5ebd8909aecabd24e7e6078b977a2", "filename": "libgo/go/encoding/asn1/asn1.go", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -465,11 +465,15 @@ func parseSequenceOf(bytes []byte, sliceType reflect.Type, elemType reflect.Type\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n-\t\t// We pretend that various other string types are PRINTABLE STRINGs\n-\t\t// so that a sequence of them can be parsed into a []string.\n \t\tswitch t.tag {\n \t\tcase tagIA5String, tagGeneralString, tagT61String, tagUTF8String:\n+\t\t\t// We pretend that various other string types are\n+\t\t\t// PRINTABLE STRINGs so that a sequence of them can be\n+\t\t\t// parsed into a []string.\n \t\t\tt.tag = tagPrintableString\n+\t\tcase tagGeneralizedTime, tagUTCTime:\n+\t\t\t// Likewise, both time types are treated the same.\n+\t\t\tt.tag = tagUTCTime\n \t\t}\n \n \t\tif t.class != classUniversal || t.isCompound != compoundType || t.tag != expectedTag {"}, {"sha": "e26fe59b305b29e1c8f81a06a61b150e3adb7ddb", "filename": "libgo/go/encoding/asn1/marshal.go", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -295,8 +295,23 @@ func marshalTwoDigits(out *forkableWriter, v int) (err error) {\n \treturn out.WriteByte(byte('0' + v%10))\n }\n \n+func marshalFourDigits(out *forkableWriter, v int) (err error) {\n+\tvar bytes [4]byte\n+\tfor i := range bytes {\n+\t\tbytes[3-i] = '0' + byte(v%10)\n+\t\tv /= 10\n+\t}\n+\t_, err = out.Write(bytes[:])\n+\treturn\n+}\n+\n+func outsideUTCRange(t time.Time) bool {\n+\tyear := t.Year()\n+\treturn year < 1950 || year >= 2050\n+}\n+\n func marshalUTCTime(out *forkableWriter, t time.Time) (err error) {\n-\tyear, month, day := t.Date()\n+\tyear := t.Year()\n \n \tswitch {\n \tcase 1950 <= year && year < 2000:\n@@ -310,6 +325,24 @@ func marshalUTCTime(out *forkableWriter, t time.Time) (err error) {\n \t\treturn\n \t}\n \n+\treturn marshalTimeCommon(out, t)\n+}\n+\n+func marshalGeneralizedTime(out *forkableWriter, t time.Time) (err error) {\n+\tyear := t.Year()\n+\tif year < 0 || year > 9999 {\n+\t\treturn StructuralError{\"cannot represent time as GeneralizedTime\"}\n+\t}\n+\tif err = marshalFourDigits(out, year); err != nil {\n+\t\treturn\n+\t}\n+\n+\treturn marshalTimeCommon(out, t)\n+}\n+\n+func marshalTimeCommon(out *forkableWriter, t time.Time) (err error) {\n+\t_, month, day := t.Date()\n+\n \terr = marshalTwoDigits(out, int(month))\n \tif err != nil {\n \t\treturn\n@@ -378,7 +411,12 @@ func stripTagAndLength(in []byte) []byte {\n func marshalBody(out *forkableWriter, value reflect.Value, params fieldParameters) (err error) {\n \tswitch value.Type() {\n \tcase timeType:\n-\t\treturn marshalUTCTime(out, value.Interface().(time.Time))\n+\t\tt := value.Interface().(time.Time)\n+\t\tif outsideUTCRange(t) {\n+\t\t\treturn marshalGeneralizedTime(out, t)\n+\t\t} else {\n+\t\t\treturn marshalUTCTime(out, t)\n+\t\t}\n \tcase bitStringType:\n \t\treturn marshalBitString(out, value.Interface().(BitString))\n \tcase objectIdentifierType:\n@@ -504,7 +542,8 @@ func marshalField(out *forkableWriter, v reflect.Value, params fieldParameters)\n \t\treturn StructuralError{\"explicit string type given to non-string member\"}\n \t}\n \n-\tif tag == tagPrintableString {\n+\tswitch tag {\n+\tcase tagPrintableString:\n \t\tif params.stringType == 0 {\n \t\t\t// This is a string without an explicit string type. We'll use\n \t\t\t// a PrintableString if the character set in the string is\n@@ -521,6 +560,10 @@ func marshalField(out *forkableWriter, v reflect.Value, params fieldParameters)\n \t\t} else {\n \t\t\ttag = params.stringType\n \t\t}\n+\tcase tagUTCTime:\n+\t\tif outsideUTCRange(v.Interface().(time.Time)) {\n+\t\t\ttag = tagGeneralizedTime\n+\t\t}\n \t}\n \n \tif params.set {"}, {"sha": "a15acbed012d15e4b74d47a261ffa289b22635d9", "filename": "libgo/go/encoding/asn1/marshal_test.go", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -67,6 +67,14 @@ type marshalTest struct {\n \tout string // hex encoded\n }\n \n+func farFuture() time.Time {\n+\tt, err := time.Parse(time.RFC3339, \"2100-04-05T12:01:01Z\")\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn t\n+}\n+\n var marshalTests = []marshalTest{\n \t{10, \"02010a\"},\n \t{127, \"02017f\"},\n@@ -83,6 +91,7 @@ var marshalTests = []marshalTest{\n \t{time.Unix(0, 0).UTC(), \"170d3730303130313030303030305a\"},\n \t{time.Unix(1258325776, 0).UTC(), \"170d3039313131353232353631365a\"},\n \t{time.Unix(1258325776, 0).In(PST), \"17113039313131353134353631362d30383030\"},\n+\t{farFuture(), \"180f32313030303430353132303130315a\"},\n \t{BitString{[]byte{0x80}, 1}, \"03020780\"},\n \t{BitString{[]byte{0x81, 0xf0}, 12}, \"03030481f0\"},\n \t{ObjectIdentifier([]int{1, 2, 3, 4}), \"06032a0304\"},"}, {"sha": "d770de3915fb09df4ca74e7895c864b6444380e7", "filename": "libgo/go/encoding/base32/base32.go", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fbase32%2Fbase32.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fbase32%2Fbase32.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbase32%2Fbase32.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -179,13 +179,11 @@ func (e *encoder) Write(p []byte) (n int, err error) {\n \t\tnn := len(e.out) / 8 * 5\n \t\tif nn > len(p) {\n \t\t\tnn = len(p)\n+\t\t\tnn -= nn % 5\n \t\t}\n-\t\tnn -= nn % 5\n-\t\tif nn > 0 {\n-\t\t\te.enc.Encode(e.out[0:], p[0:nn])\n-\t\t\tif _, e.err = e.w.Write(e.out[0 : nn/5*8]); e.err != nil {\n-\t\t\t\treturn n, e.err\n-\t\t\t}\n+\t\te.enc.Encode(e.out[0:], p[0:nn])\n+\t\tif _, e.err = e.w.Write(e.out[0 : nn/5*8]); e.err != nil {\n+\t\t\treturn n, e.err\n \t\t}\n \t\tn += nn\n \t\tp = p[nn:]\n@@ -268,7 +266,7 @@ func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {\n \t\t\t\t// 7, 5 and 2 are not valid padding lengths, and so 1, 3 and 6 are not\n \t\t\t\t// valid dlen values. See RFC 4648 Section 6 \"Base 32 Encoding\" listing\n \t\t\t\t// the five valid padding lengths, and Section 9 \"Illustrations and\n-\t\t\t\t// Examples\" for an illustration for how the the 1st, 3rd and 6th base32\n+\t\t\t\t// Examples\" for an illustration for how the 1st, 3rd and 6th base32\n \t\t\t\t// src bytes do not yield enough information to decode a dst byte.\n \t\t\t\tif dlen == 1 || dlen == 3 || dlen == 6 {\n \t\t\t\t\treturn n, false, CorruptInputError(olen - len(src) - 1)"}, {"sha": "e38c26d0ec73cc508306f8e200de26173b9e849f", "filename": "libgo/go/encoding/base64/base64.go", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -159,13 +159,11 @@ func (e *encoder) Write(p []byte) (n int, err error) {\n \t\tnn := len(e.out) / 4 * 3\n \t\tif nn > len(p) {\n \t\t\tnn = len(p)\n+\t\t\tnn -= nn % 3\n \t\t}\n-\t\tnn -= nn % 3\n-\t\tif nn > 0 {\n-\t\t\te.enc.Encode(e.out[0:], p[0:nn])\n-\t\t\tif _, e.err = e.w.Write(e.out[0 : nn/3*4]); e.err != nil {\n-\t\t\t\treturn n, e.err\n-\t\t\t}\n+\t\te.enc.Encode(e.out[0:], p[0:nn])\n+\t\tif _, e.err = e.w.Write(e.out[0 : nn/3*4]); e.err != nil {\n+\t\t\treturn n, e.err\n \t\t}\n \t\tn += nn\n \t\tp = p[nn:]\n@@ -226,21 +224,33 @@ func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {\n \t\tvar dbuf [4]byte\n \t\tdlen := 4\n \n-\t\tfor j := 0; j < 4; {\n+\t\tfor j := range dbuf {\n \t\t\tif len(src) == 0 {\n \t\t\t\treturn n, false, CorruptInputError(olen - len(src) - j)\n \t\t\t}\n \t\t\tin := src[0]\n \t\t\tsrc = src[1:]\n-\t\t\tif in == '=' && j >= 2 && len(src) < 4 {\n+\t\t\tif in == '=' {\n \t\t\t\t// We've reached the end and there's padding\n-\t\t\t\tif len(src)+j < 4-1 {\n-\t\t\t\t\t// not enough padding\n-\t\t\t\t\treturn n, false, CorruptInputError(olen)\n-\t\t\t\t}\n-\t\t\t\tif len(src) > 0 && src[0] != '=' {\n+\t\t\t\tswitch j {\n+\t\t\t\tcase 0, 1:\n \t\t\t\t\t// incorrect padding\n \t\t\t\t\treturn n, false, CorruptInputError(olen - len(src) - 1)\n+\t\t\t\tcase 2:\n+\t\t\t\t\t// \"==\" is expected, the first \"=\" is already consumed.\n+\t\t\t\t\tif len(src) == 0 {\n+\t\t\t\t\t\t// not enough padding\n+\t\t\t\t\t\treturn n, false, CorruptInputError(olen)\n+\t\t\t\t\t}\n+\t\t\t\t\tif src[0] != '=' {\n+\t\t\t\t\t\t// incorrect padding\n+\t\t\t\t\t\treturn n, false, CorruptInputError(olen - len(src) - 1)\n+\t\t\t\t\t}\n+\t\t\t\t\tsrc = src[1:]\n+\t\t\t\t}\n+\t\t\t\tif len(src) > 0 {\n+\t\t\t\t\t// trailing garbage\n+\t\t\t\t\terr = CorruptInputError(olen - len(src))\n \t\t\t\t}\n \t\t\t\tdlen, end = j, true\n \t\t\t\tbreak\n@@ -249,7 +259,6 @@ func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {\n \t\t\tif dbuf[j] == 0xFF {\n \t\t\t\treturn n, false, CorruptInputError(olen - len(src) - 1)\n \t\t\t}\n-\t\t\tj++\n \t\t}\n \n \t\t// Pack 4x 6-bit source blocks into 3 byte destination\n@@ -268,7 +277,7 @@ func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {\n \t\tn += dlen - 1\n \t}\n \n-\treturn n, end, nil\n+\treturn n, end, err\n }\n \n // Decode decodes src using the encoding enc.  It writes at most"}, {"sha": "a075194e03ef1345fb1e90bff49813b1ff25ea22", "filename": "libgo/go/encoding/base64/base64_test.go", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbase64%2Fbase64_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -9,6 +9,7 @@ import (\n \t\"errors\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"reflect\"\n \t\"strings\"\n \t\"testing\"\n \t\"time\"\n@@ -149,9 +150,13 @@ func TestDecodeCorrupt(t *testing.T) {\n \t}{\n \t\t{\"\", -1},\n \t\t{\"!!!!\", 0},\n+\t\t{\"====\", 0},\n \t\t{\"x===\", 1},\n+\t\t{\"=AAA\", 0},\n+\t\t{\"A=AA\", 1},\n \t\t{\"AA=A\", 2},\n-\t\t{\"AAA=AAAA\", 3},\n+\t\t{\"AA==A\", 4},\n+\t\t{\"AAA=AAAA\", 4},\n \t\t{\"AAAAA\", 4},\n \t\t{\"AAAAAA\", 4},\n \t\t{\"A=\", 1},\n@@ -161,6 +166,7 @@ func TestDecodeCorrupt(t *testing.T) {\n \t\t{\"AAA=\", -1},\n \t\t{\"AAAA\", -1},\n \t\t{\"AAAAAA=\", 7},\n+\t\t{\"YWJjZA=====\", 8},\n \t}\n \tfor _, tc := range testCases {\n \t\tdbuf := make([]byte, StdEncoding.DecodedLen(len(tc.input)))\n@@ -325,3 +331,14 @@ bqbPb06551Y4\n \t\tt.Error(\"Decoded results not equal\")\n \t}\n }\n+\n+func TestDecoderIssue7733(t *testing.T) {\n+\ts, err := StdEncoding.DecodeString(\"YWJjZA=====\")\n+\twant := CorruptInputError(8)\n+\tif !reflect.DeepEqual(want, err) {\n+\t\tt.Errorf(\"Error = %v; want CorruptInputError(8)\", err)\n+\t}\n+\tif string(s) != \"abcd\" {\n+\t\tt.Errorf(\"DecodeString = %q; want abcd\", s)\n+\t}\n+}"}, {"sha": "a5694876ac46eff5f80679c725cf3fd0699afaeb", "filename": "libgo/go/encoding/binary/binary.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -133,6 +133,7 @@ func (bigEndian) GoString() string { return \"binary.BigEndian\" }\n // When reading into structs, the field data for fields with\n // blank (_) field names is skipped; i.e., blank field names\n // may be used for padding.\n+// When reading into a struct, all non-blank fields must be exported.\n func Read(r io.Reader, order ByteOrder, data interface{}) error {\n \t// Fast path for basic types and slices.\n \tif n := intDataSize(data); n != 0 {"}, {"sha": "c80c90383afbeadb3cf30620f8e878cbfda4c293", "filename": "libgo/go/encoding/binary/binary_test.go", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -265,6 +265,30 @@ func TestBlankFields(t *testing.T) {\n \t}\n }\n \n+// An attempt to read into a struct with an unexported field will\n+// panic.  This is probably not the best choice, but at this point\n+// anything else would be an API change.\n+\n+type Unexported struct {\n+\ta int32\n+}\n+\n+func TestUnexportedRead(t *testing.T) {\n+\tvar buf bytes.Buffer\n+\tu1 := Unexported{a: 1}\n+\tif err := Write(&buf, LittleEndian, &u1); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tt.Fatal(\"did not panic\")\n+\t\t}\n+\t}()\n+\tvar u2 Unexported\n+\tRead(&buf, LittleEndian, &u2)\n+}\n+\n type byteSliceReader struct {\n \tremain []byte\n }"}, {"sha": "d8513148ec2d5bbe9b34c468abf1f718b4f7b1b1", "filename": "libgo/go/encoding/gob/decode.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -685,7 +685,7 @@ func (dec *Decoder) ignoreSlice(state *decoderState, elemOp decOp) {\n // but first it checks that the assignment will succeed.\n func setInterfaceValue(ivalue reflect.Value, value reflect.Value) {\n \tif !value.Type().AssignableTo(ivalue.Type()) {\n-\t\terrorf(\"cannot assign value of type %s to %s\", value.Type(), ivalue.Type())\n+\t\terrorf(\"%s is not assignable to type %s\", value.Type(), ivalue.Type())\n \t}\n \tivalue.Set(value)\n }"}, {"sha": "3a769ec1254ad15d080f6a61c8741eb343835352", "filename": "libgo/go/encoding/gob/decoder.go", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fgob%2Fdecoder.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fgob%2Fdecoder.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fdecoder.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -183,11 +183,13 @@ func (dec *Decoder) decodeTypeSequence(isInterface bool) typeId {\n \treturn -1\n }\n \n-// Decode reads the next value from the connection and stores\n+// Decode reads the next value from the input stream and stores\n // it in the data represented by the empty interface value.\n // If e is nil, the value will be discarded. Otherwise,\n // the value underlying e must be a pointer to the\n // correct type for the next data item received.\n+// If the input is at EOF, Decode returns io.EOF and\n+// does not modify e.\n func (dec *Decoder) Decode(e interface{}) error {\n \tif e == nil {\n \t\treturn dec.DecodeValue(reflect.Value{})\n@@ -202,10 +204,12 @@ func (dec *Decoder) Decode(e interface{}) error {\n \treturn dec.DecodeValue(value)\n }\n \n-// DecodeValue reads the next value from the connection.\n+// DecodeValue reads the next value from the input stream.\n // If v is the zero reflect.Value (v.Kind() == Invalid), DecodeValue discards the value.\n // Otherwise, it stores the value into v.  In that case, v must represent\n // a non-nil pointer to data or be an assignable reflect.Value (v.CanSet())\n+// If the input is at EOF, DecodeValue returns io.EOF and\n+// does not modify e.\n func (dec *Decoder) DecodeValue(v reflect.Value) error {\n \tif v.IsValid() {\n \t\tif v.Kind() == reflect.Ptr && !v.IsNil() {"}, {"sha": "7831c02d139a2e66c44af9ecd8477eeaa80fe99f", "filename": "libgo/go/encoding/gob/encode.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fgob%2Fencode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fgob%2Fencode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fencode.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -491,7 +491,7 @@ func isZero(val reflect.Value) bool {\n \t\treturn !val.Bool()\n \tcase reflect.Complex64, reflect.Complex128:\n \t\treturn val.Complex() == 0\n-\tcase reflect.Chan, reflect.Func, reflect.Ptr:\n+\tcase reflect.Chan, reflect.Func, reflect.Interface, reflect.Ptr:\n \t\treturn val.IsNil()\n \tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:\n \t\treturn val.Int() == 0"}, {"sha": "157b7723a75ff6774264b56882bc4bcdbe548431", "filename": "libgo/go/encoding/gob/gobencdec_test.go", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -705,13 +705,14 @@ func TestGobEncoderExtraIndirect(t *testing.T) {\n }\n \n // Another bug: this caused a crash with the new Go1 Time type.\n-// We throw in a gob-encoding array, to test another case of isZero\n-\n+// We throw in a gob-encoding array, to test another case of isZero,\n+// and a struct containing an nil interface, to test a third.\n type isZeroBug struct {\n \tT time.Time\n \tS string\n \tI int\n \tA isZeroBugArray\n+\tF isZeroBugInterface\n }\n \n type isZeroBugArray [2]uint8\n@@ -731,8 +732,20 @@ func (a *isZeroBugArray) GobDecode(data []byte) error {\n \treturn nil\n }\n \n+type isZeroBugInterface struct {\n+\tI interface{}\n+}\n+\n+func (i isZeroBugInterface) GobEncode() (b []byte, e error) {\n+\treturn []byte{}, nil\n+}\n+\n+func (i *isZeroBugInterface) GobDecode(data []byte) error {\n+\treturn nil\n+}\n+\n func TestGobEncodeIsZero(t *testing.T) {\n-\tx := isZeroBug{time.Now(), \"hello\", -55, isZeroBugArray{1, 2}}\n+\tx := isZeroBug{time.Now(), \"hello\", -55, isZeroBugArray{1, 2}, isZeroBugInterface{}}\n \tb := new(bytes.Buffer)\n \tenc := NewEncoder(b)\n \terr := enc.Encode(x)"}, {"sha": "d1fc7024a97fa24c0ea8b096dfb5a7d144550848", "filename": "libgo/go/encoding/hex/hex.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fhex%2Fhex.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fhex%2Fhex.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fhex%2Fhex.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -146,6 +146,9 @@ func (h *dumper) Write(data []byte) (n int, err error) {\n \t\t\th.buf[12] = ' '\n \t\t\th.buf[13] = ' '\n \t\t\t_, err = h.w.Write(h.buf[4:])\n+\t\t\tif err != nil {\n+\t\t\t\treturn\n+\t\t\t}\n \t\t}\n \t\tEncode(h.buf[:], data[i:i+1])\n \t\th.buf[2] = ' '"}, {"sha": "af1c908ad77d61f49d2aa6abded0a936480a867f", "filename": "libgo/go/encoding/json/decode.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -54,6 +54,11 @@ import (\n // If no more serious errors are encountered, Unmarshal returns\n // an UnmarshalTypeError describing the earliest such error.\n //\n+// The JSON null value unmarshals into an interface, map, pointer, or slice\n+// by setting that Go value to nil. Because null is often used in JSON to mean\n+// ``not present,'' unmarshaling a JSON null into any other Go type has no effect\n+// on the value and produces no error.\n+//\n // When unmarshaling quoted strings, invalid UTF-8 or\n // invalid UTF-16 surrogate pairs are not treated as an error.\n // Instead, they are replaced by the Unicode replacement"}, {"sha": "e1bacafd6b860e2e2d5bbf081b4bbd41b09ebcf4", "filename": "libgo/go/encoding/json/indent.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fjson%2Findent.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fjson%2Findent.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Findent.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -69,8 +69,9 @@ func newline(dst *bytes.Buffer, prefix, indent string, depth int) {\n // Each element in a JSON object or array begins on a new,\n // indented line beginning with prefix followed by one or more\n // copies of indent according to the indentation nesting.\n-// The data appended to dst has no trailing newline, to make it easier\n-// to embed inside other formatted JSON data.\n+// The data appended to dst does not begin with the prefix nor\n+// any indentation, and has no trailing newline, to make it\n+// easier to embed inside other formatted JSON data.\n func Indent(dst *bytes.Buffer, src []byte, prefix, indent string) error {\n \torigLen := dst.Len()\n \tvar scan scanner"}, {"sha": "1cb289fd84317679b7247a767a65e21cbd8ec76c", "filename": "libgo/go/encoding/json/stream.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fjson%2Fstream.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fjson%2Fstream.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fstream.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -148,7 +148,8 @@ func NewEncoder(w io.Writer) *Encoder {\n \treturn &Encoder{w: w}\n }\n \n-// Encode writes the JSON encoding of v to the stream.\n+// Encode writes the JSON encoding of v to the stream,\n+// followed by a newline character.\n //\n // See the documentation for Marshal for details about the\n // conversion of Go values to JSON."}, {"sha": "8c6342013d330484aca25b65f967d0b3f3c47658", "filename": "libgo/go/encoding/xml/marshal.go", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -184,10 +184,12 @@ var (\n // EncodeToken does not call Flush, because usually it is part of a larger operation\n // such as Encode or EncodeElement (or a custom Marshaler's MarshalXML invoked\n // during those), and those will call Flush when finished.\n-//\n // Callers that create an Encoder and then invoke EncodeToken directly, without\n // using Encode or EncodeElement, need to call Flush when finished to ensure\n // that the XML is written to the underlying writer.\n+//\n+// EncodeToken allows writing a ProcInst with Target set to \"xml\" only as the first token\n+// in the stream.\n func (enc *Encoder) EncodeToken(t Token) error {\n \tp := &enc.p\n \tswitch t := t.(type) {\n@@ -210,7 +212,12 @@ func (enc *Encoder) EncodeToken(t Token) error {\n \t\tp.WriteString(\"-->\")\n \t\treturn p.cachedWriteError()\n \tcase ProcInst:\n-\t\tif t.Target == \"xml\" || !isNameString(t.Target) {\n+\t\t// First token to be encoded which is also a ProcInst with target of xml\n+\t\t// is the xml declaration.  The only ProcInst where target of xml is allowed.\n+\t\tif t.Target == \"xml\" && p.Buffered() != 0 {\n+\t\t\treturn fmt.Errorf(\"xml: EncodeToken of ProcInst xml target only valid for xml declaration, first token encoded\")\n+\t\t}\n+\t\tif !isNameString(t.Target) {\n \t\t\treturn fmt.Errorf(\"xml: EncodeToken of ProcInst with invalid Target\")\n \t\t}\n \t\tif bytes.Contains(t.Inst, endProcInst) {"}, {"sha": "14f73a75d5fbd8f381461537b45177102d36b724", "filename": "libgo/go/encoding/xml/marshal_test.go", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -314,6 +314,31 @@ type MarshalerStruct struct {\n \tFoo MyMarshalerAttrTest `xml:\",attr\"`\n }\n \n+type InnerStruct struct {\n+\tXMLName Name `xml:\"testns outer\"`\n+}\n+\n+type OuterStruct struct {\n+\tInnerStruct\n+\tIntAttr int `xml:\"int,attr\"`\n+}\n+\n+type OuterNamedStruct struct {\n+\tInnerStruct\n+\tXMLName Name `xml:\"outerns test\"`\n+\tIntAttr int  `xml:\"int,attr\"`\n+}\n+\n+type OuterNamedOrderedStruct struct {\n+\tXMLName Name `xml:\"outerns test\"`\n+\tInnerStruct\n+\tIntAttr int `xml:\"int,attr\"`\n+}\n+\n+type OuterOuterStruct struct {\n+\tOuterStruct\n+}\n+\n func ifaceptr(x interface{}) interface{} {\n \treturn &x\n }\n@@ -883,6 +908,22 @@ var marshalTests = []struct {\n \t\tExpectXML: `<MarshalerStruct Foo=\"hello world\"></MarshalerStruct>`,\n \t\tValue:     &MarshalerStruct{},\n \t},\n+\t{\n+\t\tExpectXML: `<outer xmlns=\"testns\" int=\"10\"></outer>`,\n+\t\tValue:     &OuterStruct{IntAttr: 10},\n+\t},\n+\t{\n+\t\tExpectXML: `<test xmlns=\"outerns\" int=\"10\"></test>`,\n+\t\tValue:     &OuterNamedStruct{XMLName: Name{Space: \"outerns\", Local: \"test\"}, IntAttr: 10},\n+\t},\n+\t{\n+\t\tExpectXML: `<test xmlns=\"outerns\" int=\"10\"></test>`,\n+\t\tValue:     &OuterNamedOrderedStruct{XMLName: Name{Space: \"outerns\", Local: \"test\"}, IntAttr: 10},\n+\t},\n+\t{\n+\t\tExpectXML: `<outer xmlns=\"testns\" int=\"10\"></outer>`,\n+\t\tValue:     &OuterOuterStruct{OuterStruct{IntAttr: 10}},\n+\t},\n }\n \n func TestMarshal(t *testing.T) {\n@@ -1149,3 +1190,77 @@ func TestStructPointerMarshal(t *testing.T) {\n \t\tt.Fatal(err)\n \t}\n }\n+\n+var encodeTokenTests = []struct {\n+\ttok  Token\n+\twant string\n+\tok   bool\n+}{\n+\t{StartElement{Name{\"space\", \"local\"}, nil}, \"<local xmlns=\\\"space\\\">\", true},\n+\t{StartElement{Name{\"space\", \"\"}, nil}, \"\", false},\n+\t{EndElement{Name{\"space\", \"\"}}, \"\", false},\n+\t{CharData(\"foo\"), \"foo\", true},\n+\t{Comment(\"foo\"), \"<!--foo-->\", true},\n+\t{Comment(\"foo-->\"), \"\", false},\n+\t{ProcInst{\"Target\", []byte(\"Instruction\")}, \"<?Target Instruction?>\", true},\n+\t{ProcInst{\"\", []byte(\"Instruction\")}, \"\", false},\n+\t{ProcInst{\"Target\", []byte(\"Instruction?>\")}, \"\", false},\n+\t{Directive(\"foo\"), \"<!foo>\", true},\n+\t{Directive(\"foo>\"), \"\", false},\n+}\n+\n+func TestEncodeToken(t *testing.T) {\n+\tfor _, tt := range encodeTokenTests {\n+\t\tvar buf bytes.Buffer\n+\t\tenc := NewEncoder(&buf)\n+\t\terr := enc.EncodeToken(tt.tok)\n+\t\tswitch {\n+\t\tcase !tt.ok && err == nil:\n+\t\t\tt.Errorf(\"enc.EncodeToken(%#v): expected error; got none\", tt.tok)\n+\t\tcase tt.ok && err != nil:\n+\t\t\tt.Fatalf(\"enc.EncodeToken: %v\", err)\n+\t\tcase !tt.ok && err != nil:\n+\t\t\t// expected error, got one\n+\t\t}\n+\t\tif err := enc.Flush(); err != nil {\n+\t\t\tt.Fatalf(\"enc.EncodeToken: %v\", err)\n+\t\t}\n+\t\tif got := buf.String(); got != tt.want {\n+\t\t\tt.Errorf(\"enc.EncodeToken = %s; want: %s\", got, tt.want)\n+\t\t}\n+\t}\n+}\n+\n+func TestProcInstEncodeToken(t *testing.T) {\n+\tvar buf bytes.Buffer\n+\tenc := NewEncoder(&buf)\n+\n+\tif err := enc.EncodeToken(ProcInst{\"xml\", []byte(\"Instruction\")}); err != nil {\n+\t\tt.Fatalf(\"enc.EncodeToken: expected to be able to encode xml target ProcInst as first token, %s\", err)\n+\t}\n+\n+\tif err := enc.EncodeToken(ProcInst{\"Target\", []byte(\"Instruction\")}); err != nil {\n+\t\tt.Fatalf(\"enc.EncodeToken: expected to be able to add non-xml target ProcInst\")\n+\t}\n+\n+\tif err := enc.EncodeToken(ProcInst{\"xml\", []byte(\"Instruction\")}); err == nil {\n+\t\tt.Fatalf(\"enc.EncodeToken: expected to not be allowed to encode xml target ProcInst when not first token\")\n+\t}\n+}\n+\n+func TestDecodeEncode(t *testing.T) {\n+\tvar in, out bytes.Buffer\n+\tin.WriteString(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<?Target Instruction?>\n+<root>\n+</root>\t\n+`)\n+\tdec := NewDecoder(&in)\n+\tenc := NewEncoder(&out)\n+\tfor tok, err := dec.Token(); err == nil; tok, err = dec.Token() {\n+\t\terr = enc.EncodeToken(tok)\n+\t\tif err != nil {\n+\t\t\tt.Fatalf(\"enc.EncodeToken: Unable to encode token (%#v), %v\", tok, err)\n+\t\t}\n+\t}\n+}"}, {"sha": "75b9f2ba1b2ee44fad5e1a72e53058c988364db2", "filename": "libgo/go/encoding/xml/read.go", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -284,6 +284,15 @@ func (p *Decoder) unmarshal(val reflect.Value, start *StartElement) error {\n \t\t}\n \t}\n \n+\t// Load value from interface, but only if the result will be\n+\t// usefully addressable.\n+\tif val.Kind() == reflect.Interface && !val.IsNil() {\n+\t\te := val.Elem()\n+\t\tif e.Kind() == reflect.Ptr && !e.IsNil() {\n+\t\t\tval = e\n+\t\t}\n+\t}\n+\n \tif val.Kind() == reflect.Ptr {\n \t\tif val.IsNil() {\n \t\t\tval.Set(reflect.New(val.Type().Elem()))"}, {"sha": "01f55d0dd00cec4ae81876f3f5854678705655ae", "filename": "libgo/go/encoding/xml/read_test.go", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Fread_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Fread_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fread_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -685,3 +685,30 @@ func TestUnmarshaler(t *testing.T) {\n \t\tt.Errorf(\"m=%#+v\\n\", m)\n \t}\n }\n+\n+type Pea struct {\n+\tCotelydon string\n+}\n+\n+type Pod struct {\n+\tPea interface{} `xml:\"Pea\"`\n+}\n+\n+// https://code.google.com/p/go/issues/detail?id=6836\n+func TestUnmarshalIntoInterface(t *testing.T) {\n+\tpod := new(Pod)\n+\tpod.Pea = new(Pea)\n+\txml := `<Pod><Pea><Cotelydon>Green stuff</Cotelydon></Pea></Pod>`\n+\terr := Unmarshal([]byte(xml), pod)\n+\tif err != nil {\n+\t\tt.Fatalf(\"failed to unmarshal %q: %v\", xml, err)\n+\t}\n+\tpea, ok := pod.Pea.(*Pea)\n+\tif !ok {\n+\t\tt.Fatalf(\"unmarshalled into wrong type: have %T want *Pea\", pod.Pea)\n+\t}\n+\thave, want := pea.Cotelydon, \"Green stuff\"\n+\tif have != want {\n+\t\tt.Errorf(\"failed to unmarshal into interface, have %q want %q\", have, want)\n+\t}\n+}"}, {"sha": "22248d20a6d669e348c93f7d4b5feb558eee8e6d", "filename": "libgo/go/encoding/xml/typeinfo.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Ftypeinfo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Ftypeinfo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Ftypeinfo.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -75,6 +75,9 @@ func getTypeInfo(typ reflect.Type) (*typeInfo, error) {\n \t\t\t\t\tif err != nil {\n \t\t\t\t\t\treturn nil, err\n \t\t\t\t\t}\n+\t\t\t\t\tif tinfo.xmlname == nil {\n+\t\t\t\t\t\ttinfo.xmlname = inner.xmlname\n+\t\t\t\t\t}\n \t\t\t\t\tfor _, finfo := range inner.fields {\n \t\t\t\t\t\tfinfo.idx = append([]int{i}, finfo.idx...)\n \t\t\t\t\t\tif err := addFieldInfo(typ, tinfo, &finfo); err != nil {"}, {"sha": "b473cb845847447de8f3947197751a31c700ef20", "filename": "libgo/go/encoding/xml/xml.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -200,6 +200,8 @@ type Decoder struct {\n }\n \n // NewDecoder creates a new XML parser reading from r.\n+// If r does not implement io.ByteReader, NewDecoder will\n+// do its own buffering.\n func NewDecoder(r io.Reader) *Decoder {\n \td := &Decoder{\n \t\tns:       make(map[string]string),"}, {"sha": "9b6dab487cb6209e9b3e407dce9f90ce23bca372", "filename": "libgo/go/expvar/expvar.go", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fexpvar%2Fexpvar.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fexpvar%2Fexpvar.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexpvar%2Fexpvar.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -108,11 +108,11 @@ func (v *Map) String() string {\n \tvar b bytes.Buffer\n \tfmt.Fprintf(&b, \"{\")\n \tfirst := true\n-\tv.Do(func(kv KeyValue) {\n+\tv.doLocked(func(kv KeyValue) {\n \t\tif !first {\n \t\t\tfmt.Fprintf(&b, \", \")\n \t\t}\n-\t\tfmt.Fprintf(&b, \"\\\"%s\\\": %v\", kv.Key, kv.Value)\n+\t\tfmt.Fprintf(&b, \"%q: %v\", kv.Key, kv.Value)\n \t\tfirst = false\n \t})\n \tfmt.Fprintf(&b, \"}\")\n@@ -202,6 +202,12 @@ func (v *Map) AddFloat(key string, delta float64) {\n func (v *Map) Do(f func(KeyValue)) {\n \tv.mu.RLock()\n \tdefer v.mu.RUnlock()\n+\tv.doLocked(f)\n+}\n+\n+// doLocked calls f for each entry in the map.\n+// v.mu must be held for reads.\n+func (v *Map) doLocked(f func(KeyValue)) {\n \tfor _, k := range v.keys {\n \t\tf(KeyValue{k, v.m[k]})\n \t}"}, {"sha": "765e3b757e9a48a95ea216a34efc83baec8e836e", "filename": "libgo/go/expvar/expvar_test.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fexpvar%2Fexpvar_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fexpvar%2Fexpvar_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexpvar%2Fexpvar_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -97,15 +97,15 @@ func TestMapCounter(t *testing.T) {\n \tcolors.Add(\"red\", 1)\n \tcolors.Add(\"red\", 2)\n \tcolors.Add(\"blue\", 4)\n-\tcolors.AddFloat(\"green\", 4.125)\n+\tcolors.AddFloat(`green \"midori\"`, 4.125)\n \tif x := colors.m[\"red\"].(*Int).i; x != 3 {\n \t\tt.Errorf(\"colors.m[\\\"red\\\"] = %v, want 3\", x)\n \t}\n \tif x := colors.m[\"blue\"].(*Int).i; x != 4 {\n \t\tt.Errorf(\"colors.m[\\\"blue\\\"] = %v, want 4\", x)\n \t}\n-\tif x := colors.m[\"green\"].(*Float).f; x != 4.125 {\n-\t\tt.Errorf(\"colors.m[\\\"green\\\"] = %v, want 3.14\", x)\n+\tif x := colors.m[`green \"midori\"`].(*Float).f; x != 4.125 {\n+\t\tt.Errorf(\"colors.m[`green \\\"midori\\\"] = %v, want 3.14\", x)\n \t}\n \n \t// colors.String() should be '{\"red\":3, \"blue\":4}',"}, {"sha": "cd2a165be19f9ac529fbc589349ef4460ae9d993", "filename": "libgo/go/flag/flag.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fflag%2Fflag.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fflag%2Fflag.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fflag%2Fflag.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -50,7 +50,8 @@\n \t(\"-\" is a non-flag argument) or after the terminator \"--\".\n \n \tInteger flags accept 1234, 0664, 0x1234 and may be negative.\n-\tBoolean flags may be 1, 0, t, f, true, false, TRUE, FALSE, True, False.\n+\tBoolean flags may be:\n+\t\t1, 0, t, f, T, F, true, false, TRUE, FALSE, True, False\n \tDuration flags accept any input valid for time.ParseDuration.\n \n \tThe default set of command-line flags is controlled by\n@@ -754,7 +755,7 @@ func (f *FlagSet) parseOne() (bool, error) {\n \tif fv, ok := flag.Value.(boolFlag); ok && fv.IsBoolFlag() { // special case: doesn't need an arg\n \t\tif has_value {\n \t\t\tif err := fv.Set(value); err != nil {\n-\t\t\t\treturn false, f.failf(\"invalid boolean value %q for  -%s: %v\", value, name, err)\n+\t\t\t\treturn false, f.failf(\"invalid boolean value %q for -%s: %v\", value, name, err)\n \t\t\t}\n \t\t} else {\n \t\t\tfv.Set(\"true\")"}, {"sha": "02642d6ae775d6700e3448174cbf1d316893ec13", "filename": "libgo/go/fmt/doc.go", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Ffmt%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Ffmt%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fdoc.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -37,6 +37,7 @@\n \t\t%e\tscientific notation, e.g. -1234.456e+78\n \t\t%E\tscientific notation, e.g. -1234.456E+78\n \t\t%f\tdecimal point but no exponent, e.g. 123.456\n+\t\t%F\tsynonym for %f\n \t\t%g\twhichever of %e or %f produces more compact output\n \t\t%G\twhichever of %E or %f produces more compact output\n \tString and slice of bytes:\n@@ -50,23 +51,39 @@\n \tThere is no 'u' flag.  Integers are printed unsigned if they have unsigned type.\n \tSimilarly, there is no need to specify the size of the operand (int8, int64).\n \n-\tThe width and precision control formatting and are in units of Unicode\n-\tcode points.  (This differs from C's printf where the units are numbers\n+\tWidth is specified by an optional decimal number immediately following the verb.\n+\tIf absent, the width is whatever is necessary to represent the value.\n+\tPrecision is specified after the (optional) width by a period followed by a\n+\tdecimal number. If no period is present, a default precision is used.\n+\tA period with no following number specifies a precision of zero.\n+\tExamples:\n+\t\t%f:    default width, default precision\n+\t\t%9f    width 9, default precision\n+\t\t%.2f   default width, precision 2\n+\t\t%9.2f  width 9, precision 2\n+\t\t%9.f   width 9, precision 0\n+\n+\tWidth and precision are measured in units of Unicode code points.\n+\t(This differs from C's printf where the units are numbers\n \tof bytes.) Either or both of the flags may be replaced with the\n \tcharacter '*', causing their values to be obtained from the next\n \toperand, which must be of type int.\n \n-\tFor numeric values, width sets the minimum width of the field and\n+\tFor most values, width is the minimum number of characters to output,\n+\tpadding the formatted form with spaces if necessary.\n+\tFor strings, precision is the maximum number of characters to output,\n+\ttruncating if necessary.\n+\n+\tFor floating-point values, width sets the minimum width of the field and\n \tprecision sets the number of places after the decimal, if appropriate,\n \texcept that for %g/%G it sets the total number of digits. For example,\n \tgiven 123.45 the format %6.2f prints 123.45 while %.4g prints 123.5.\n \tThe default precision for %e and %f is 6; for %g it is the smallest\n \tnumber of digits necessary to identify the value uniquely.\n \n-\tFor most values, width is the minimum number of characters to output,\n-\tpadding the formatted form with spaces if necessary.\n-\tFor strings, precision is the maximum number of characters to output,\n-\ttruncating if necessary.\n+\tFor complex numbers, the width and precision apply to the two\n+\tcomponents independently and the result is parenthesized, so %f applied\n+\tto 1.2+3.4i produces (1.200000+3.400000i).\n \n \tOther flags:\n \t\t+\talways print a sign for numeric values;\n@@ -98,20 +115,33 @@\n \t\tfmt.Printf(\"%v\\n\", i)\n \twill print 23.\n \n-\tIf an operand implements interface Formatter, that interface\n-\tcan be used for fine control of formatting.\n+\tExcept when printed using the verbs %T and %p, special\n+\tformatting considerations apply for operands that implement\n+\tcertain interfaces. In order of application:\n+\n+\t1. If an operand implements the Formatter interface, it will\n+\tbe invoked. Formatter provides fine control of formatting.\n+\n+\t2. If the %v verb is used with the # flag (%#v) and the operand\n+\timplements the GoStringer interface, that will be invoked.\n \n \tIf the format (which is implicitly %v for Println etc.) is valid\n-\tfor a string (%s %q %v %x %X), the following two rules also apply:\n+\tfor a string (%s %q %v %x %X), the following two rules apply:\n \n-\t1. If an operand implements the error interface, the Error method\n-\twill be used to convert the object to a string, which will then\n+\t3. If an operand implements the error interface, the Error method\n+\twill be invoked to convert the object to a string, which will then\n \tbe formatted as required by the verb (if any).\n \n-\t2. If an operand implements method String() string, that method\n-\twill be used to convert the object to a string, which will then\n+\t4. If an operand implements method String() string, that method\n+\twill be invoked to convert the object to a string, which will then\n \tbe formatted as required by the verb (if any).\n \n+\tFor compound operands such as slices and structs, the format\n+\tapplies to the elements of each operand, recursively, not to the\n+\toperand as a whole. Thus %q will quote each element of a slice\n+\tof strings, and %6.2f will control formatting for each element\n+\tof a floating-point array.\n+\n \tTo avoid recursion in cases such as\n \t\ttype X string\n \t\tfunc (x X) String() string { return Sprintf(\"<%s>\", x) }"}, {"sha": "8e6923119de80ff72a401a6103756a44566a212b", "filename": "libgo/go/fmt/fmt_test.go", "status": "modified", "additions": 161, "deletions": 39, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Ffmt%2Ffmt_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Ffmt%2Ffmt_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Ffmt_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -11,7 +11,6 @@ import (\n \t\"math\"\n \t\"runtime\"\n \t\"strings\"\n-\t\"sync/atomic\"\n \t\"testing\"\n \t\"time\"\n \t\"unicode\"\n@@ -221,8 +220,12 @@ var fmtTests = []struct {\n \t{\"%+.3e\", 0.0, \"+0.000e+00\"},\n \t{\"%+.3e\", 1.0, \"+1.000e+00\"},\n \t{\"%+.3f\", -1.0, \"-1.000\"},\n+\t{\"%+.3F\", -1.0, \"-1.000\"},\n+\t{\"%+.3F\", float32(-1.0), \"-1.000\"},\n \t{\"%+07.2f\", 1.0, \"+001.00\"},\n \t{\"%+07.2f\", -1.0, \"-001.00\"},\n+\t{\"%+10.2f\", +1.0, \"     +1.00\"},\n+\t{\"%+10.2f\", -1.0, \"     -1.00\"},\n \t{\"% .3E\", -1.0, \"-1.000E+00\"},\n \t{\"% .3e\", 1.0, \" 1.000e+00\"},\n \t{\"%+.3g\", 0.0, \"+0\"},\n@@ -242,6 +245,8 @@ var fmtTests = []struct {\n \t{\"%+.3g\", 1 + 2i, \"(+1+2i)\"},\n \t{\"%.3e\", 0i, \"(0.000e+00+0.000e+00i)\"},\n \t{\"%.3f\", 0i, \"(0.000+0.000i)\"},\n+\t{\"%.3F\", 0i, \"(0.000+0.000i)\"},\n+\t{\"%.3F\", complex64(0i), \"(0.000+0.000i)\"},\n \t{\"%.3g\", 0i, \"(0+0i)\"},\n \t{\"%.3e\", 1 + 2i, \"(1.000e+00+2.000e+00i)\"},\n \t{\"%.3f\", 1 + 2i, \"(1.000+2.000i)\"},\n@@ -400,6 +405,8 @@ var fmtTests = []struct {\n \t{\"%#v\", \"foo\", `\"foo\"`},\n \t{\"%#v\", barray, `[5]fmt_test.renamedUint8{0x1, 0x2, 0x3, 0x4, 0x5}`},\n \t{\"%#v\", bslice, `[]fmt_test.renamedUint8{0x1, 0x2, 0x3, 0x4, 0x5}`},\n+\t{\"%#v\", []byte(nil), \"[]byte(nil)\"},\n+\t{\"%#v\", []int32(nil), \"[]int32(nil)\"},\n \n \t// slices with other formats\n \t{\"%#x\", []int{1, 2, 15}, `[0x1 0x2 0xf]`},\n@@ -506,9 +513,76 @@ var fmtTests = []struct {\n \t{\"%0.100f\", 1.0, zeroFill(\"1.\", 100, \"\")},\n \t{\"%0.100f\", -1.0, zeroFill(\"-1.\", 100, \"\")},\n \n-\t// Zero padding floats used to put the minus sign in the middle.\n-\t{\"%020f\", -1.0, \"-000000000001.000000\"},\n+\t// Comparison of padding rules with C printf.\n+\t/*\n+\t\tC program:\n+\t\t#include <stdio.h>\n+\n+\t\tchar *format[] = {\n+\t\t\t\"[%.2f]\",\n+\t\t\t\"[% .2f]\",\n+\t\t\t\"[%+.2f]\",\n+\t\t\t\"[%7.2f]\",\n+\t\t\t\"[% 7.2f]\",\n+\t\t\t\"[%+7.2f]\",\n+\t\t\t\"[%07.2f]\",\n+\t\t\t\"[% 07.2f]\",\n+\t\t\t\"[%+07.2f]\",\n+\t\t};\n+\n+\t\tint main(void) {\n+\t\t\tint i;\n+\t\t\tfor(i = 0; i < 9; i++) {\n+\t\t\t\tprintf(\"%s: \", format[i]);\n+\t\t\t\tprintf(format[i], 1.0);\n+\t\t\t\tprintf(\" \");\n+\t\t\t\tprintf(format[i], -1.0);\n+\t\t\t\tprintf(\"\\n\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tOutput:\n+\t\t\t[%.2f]: [1.00] [-1.00]\n+\t\t\t[% .2f]: [ 1.00] [-1.00]\n+\t\t\t[%+.2f]: [+1.00] [-1.00]\n+\t\t\t[%7.2f]: [   1.00] [  -1.00]\n+\t\t\t[% 7.2f]: [   1.00] [  -1.00]\n+\t\t\t[%+7.2f]: [  +1.00] [  -1.00]\n+\t\t\t[%07.2f]: [0001.00] [-001.00]\n+\t\t\t[% 07.2f]: [ 001.00] [-001.00]\n+\t\t\t[%+07.2f]: [+001.00] [-001.00]\n+\t*/\n+\t{\"%.2f\", 1.0, \"1.00\"},\n+\t{\"%.2f\", -1.0, \"-1.00\"},\n+\t{\"% .2f\", 1.0, \" 1.00\"},\n+\t{\"% .2f\", -1.0, \"-1.00\"},\n+\t{\"%+.2f\", 1.0, \"+1.00\"},\n+\t{\"%+.2f\", -1.0, \"-1.00\"},\n+\t{\"%7.2f\", 1.0, \"   1.00\"},\n+\t{\"%7.2f\", -1.0, \"  -1.00\"},\n+\t{\"% 7.2f\", 1.0, \"   1.00\"},\n+\t{\"% 7.2f\", -1.0, \"  -1.00\"},\n+\t{\"%+7.2f\", 1.0, \"  +1.00\"},\n+\t{\"%+7.2f\", -1.0, \"  -1.00\"},\n+\t{\"%07.2f\", 1.0, \"0001.00\"},\n+\t{\"%07.2f\", -1.0, \"-001.00\"},\n+\t{\"% 07.2f\", 1.0, \" 001.00\"},\n+\t{\"% 07.2f\", -1.0, \"-001.00\"},\n+\t{\"%+07.2f\", 1.0, \"+001.00\"},\n+\t{\"%+07.2f\", -1.0, \"-001.00\"},\n+\n+\t// Complex numbers: exhaustively tested in TestComplexFormatting.\n+\t{\"%7.2f\", 1 + 2i, \"(   1.00  +2.00i)\"},\n+\t{\"%+07.2f\", -1 - 2i, \"(-001.00-002.00i)\"},\n+\t// Zero padding does not apply to infinities.\n+\t{\"%020f\", math.Inf(-1), \"                -Inf\"},\n+\t{\"%020f\", math.Inf(+1), \"                +Inf\"},\n+\t{\"% 020f\", math.Inf(-1), \"                -Inf\"},\n+\t{\"% 020f\", math.Inf(+1), \"                 Inf\"},\n+\t{\"%+020f\", math.Inf(-1), \"                -Inf\"},\n+\t{\"%+020f\", math.Inf(+1), \"                +Inf\"},\n \t{\"%20f\", -1.0, \"           -1.000000\"},\n+\t// Make sure we can handle very large widths.\n \t{\"%0100f\", -1.0, zeroFill(\"-\", 99, \"1.000000\")},\n \n \t// Complex fmt used to leave the plus flag set for future entries in the array\n@@ -539,6 +613,16 @@ var fmtTests = []struct {\n \t{\"%#072o\", -1, zeroFill(\"-\", 71, \"1\")},\n \t{\"%#072d\", 1, zeroFill(\"\", 72, \"1\")},\n \t{\"%#072d\", -1, zeroFill(\"-\", 71, \"1\")},\n+\n+\t// Padding for complex numbers. Has been bad, then fixed, then bad again.\n+\t{\"%+10.2f\", +104.66 + 440.51i, \"(   +104.66   +440.51i)\"},\n+\t{\"%+10.2f\", -104.66 + 440.51i, \"(   -104.66   +440.51i)\"},\n+\t{\"%+10.2f\", +104.66 - 440.51i, \"(   +104.66   -440.51i)\"},\n+\t{\"%+10.2f\", -104.66 - 440.51i, \"(   -104.66   -440.51i)\"},\n+\t{\"%+010.2f\", +104.66 + 440.51i, \"(+000104.66+000440.51i)\"},\n+\t{\"%+010.2f\", -104.66 + 440.51i, \"(-000104.66+000440.51i)\"},\n+\t{\"%+010.2f\", +104.66 - 440.51i, \"(+000104.66-000440.51i)\"},\n+\t{\"%+010.2f\", -104.66 - 440.51i, \"(-000104.66-000440.51i)\"},\n }\n \n // zeroFill generates zero-filled strings of the specified width. The length\n@@ -584,6 +668,50 @@ func TestSprintf(t *testing.T) {\n \t}\n }\n \n+// TestComplexFormatting checks that a complex always formats to the same\n+// thing as if done by hand with two singleton prints.\n+func TestComplexFormatting(t *testing.T) {\n+\tvar yesNo = []bool{true, false}\n+\tvar signs = []float64{1, 0, -1}\n+\tfor _, plus := range yesNo {\n+\t\tfor _, zero := range yesNo {\n+\t\t\tfor _, space := range yesNo {\n+\t\t\t\tfor _, char := range \"fFeEgG\" {\n+\t\t\t\t\trealFmt := \"%\"\n+\t\t\t\t\tif zero {\n+\t\t\t\t\t\trealFmt += \"0\"\n+\t\t\t\t\t}\n+\t\t\t\t\tif space {\n+\t\t\t\t\t\trealFmt += \" \"\n+\t\t\t\t\t}\n+\t\t\t\t\tif plus {\n+\t\t\t\t\t\trealFmt += \"+\"\n+\t\t\t\t\t}\n+\t\t\t\t\trealFmt += \"10.2\"\n+\t\t\t\t\trealFmt += string(char)\n+\t\t\t\t\t// Imaginary part always has a sign, so force + and ignore space.\n+\t\t\t\t\timagFmt := \"%\"\n+\t\t\t\t\tif zero {\n+\t\t\t\t\t\timagFmt += \"0\"\n+\t\t\t\t\t}\n+\t\t\t\t\timagFmt += \"+\"\n+\t\t\t\t\timagFmt += \"10.2\"\n+\t\t\t\t\timagFmt += string(char)\n+\t\t\t\t\tfor _, realSign := range signs {\n+\t\t\t\t\t\tfor _, imagSign := range signs {\n+\t\t\t\t\t\t\tone := Sprintf(realFmt, complex(realSign, imagSign))\n+\t\t\t\t\t\t\ttwo := Sprintf(\"(\"+realFmt+imagFmt+\"i)\", realSign, imagSign)\n+\t\t\t\t\t\t\tif one != two {\n+\t\t\t\t\t\t\t\tt.Error(f, one, two)\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n type SE []interface{} // slice of empty; notational compactness.\n \n var reorderTests = []struct {\n@@ -634,69 +762,63 @@ func TestReorder(t *testing.T) {\n }\n \n func BenchmarkSprintfEmpty(b *testing.B) {\n-\tbenchmarkSprintf(b, func(buf *bytes.Buffer) {\n-\t\tSprintf(\"\")\n+\tb.RunParallel(func(pb *testing.PB) {\n+\t\tfor pb.Next() {\n+\t\t\tSprintf(\"\")\n+\t\t}\n \t})\n }\n \n func BenchmarkSprintfString(b *testing.B) {\n-\tbenchmarkSprintf(b, func(buf *bytes.Buffer) {\n-\t\tSprintf(\"%s\", \"hello\")\n+\tb.RunParallel(func(pb *testing.PB) {\n+\t\tfor pb.Next() {\n+\t\t\tSprintf(\"%s\", \"hello\")\n+\t\t}\n \t})\n }\n \n func BenchmarkSprintfInt(b *testing.B) {\n-\tbenchmarkSprintf(b, func(buf *bytes.Buffer) {\n-\t\tSprintf(\"%d\", 5)\n+\tb.RunParallel(func(pb *testing.PB) {\n+\t\tfor pb.Next() {\n+\t\t\tSprintf(\"%d\", 5)\n+\t\t}\n \t})\n }\n \n func BenchmarkSprintfIntInt(b *testing.B) {\n-\tbenchmarkSprintf(b, func(buf *bytes.Buffer) {\n-\t\tSprintf(\"%d %d\", 5, 6)\n+\tb.RunParallel(func(pb *testing.PB) {\n+\t\tfor pb.Next() {\n+\t\t\tSprintf(\"%d %d\", 5, 6)\n+\t\t}\n \t})\n }\n \n func BenchmarkSprintfPrefixedInt(b *testing.B) {\n-\tbenchmarkSprintf(b, func(buf *bytes.Buffer) {\n-\t\tSprintf(\"This is some meaningless prefix text that needs to be scanned %d\", 6)\n+\tb.RunParallel(func(pb *testing.PB) {\n+\t\tfor pb.Next() {\n+\t\t\tSprintf(\"This is some meaningless prefix text that needs to be scanned %d\", 6)\n+\t\t}\n \t})\n }\n \n func BenchmarkSprintfFloat(b *testing.B) {\n-\tbenchmarkSprintf(b, func(buf *bytes.Buffer) {\n-\t\tSprintf(\"%g\", 5.23184)\n+\tb.RunParallel(func(pb *testing.PB) {\n+\t\tfor pb.Next() {\n+\t\t\tSprintf(\"%g\", 5.23184)\n+\t\t}\n \t})\n }\n \n func BenchmarkManyArgs(b *testing.B) {\n-\tbenchmarkSprintf(b, func(buf *bytes.Buffer) {\n-\t\tbuf.Reset()\n-\t\tFprintf(buf, \"%2d/%2d/%2d %d:%d:%d %s %s\\n\", 3, 4, 5, 11, 12, 13, \"hello\", \"world\")\n+\tb.RunParallel(func(pb *testing.PB) {\n+\t\tvar buf bytes.Buffer\n+\t\tfor pb.Next() {\n+\t\t\tbuf.Reset()\n+\t\t\tFprintf(&buf, \"%2d/%2d/%2d %d:%d:%d %s %s\\n\", 3, 4, 5, 11, 12, 13, \"hello\", \"world\")\n+\t\t}\n \t})\n }\n \n-func benchmarkSprintf(b *testing.B, f func(buf *bytes.Buffer)) {\n-\tconst CallsPerSched = 1000\n-\tprocs := runtime.GOMAXPROCS(-1)\n-\tN := int32(b.N / CallsPerSched)\n-\tc := make(chan bool, procs)\n-\tfor p := 0; p < procs; p++ {\n-\t\tgo func() {\n-\t\t\tvar buf bytes.Buffer\n-\t\t\tfor atomic.AddInt32(&N, -1) >= 0 {\n-\t\t\t\tfor g := 0; g < CallsPerSched; g++ {\n-\t\t\t\t\tf(&buf)\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tc <- true\n-\t\t}()\n-\t}\n-\tfor p := 0; p < procs; p++ {\n-\t\t<-c\n-\t}\n-}\n-\n var mallocBuf bytes.Buffer\n \n // gccgo numbers are different because gccgo does not have escape"}, {"sha": "a89c542cfb553cec42e0ca132328375a7d91e129", "filename": "libgo/go/fmt/format.go", "status": "modified", "additions": 60, "deletions": 63, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Ffmt%2Fformat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Ffmt%2Fformat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fformat.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -5,6 +5,7 @@\n package fmt\n \n import (\n+\t\"math\"\n \t\"strconv\"\n \t\"unicode/utf8\"\n )\n@@ -360,38 +361,48 @@ func doPrec(f *fmt, def int) int {\n \n // formatFloat formats a float64; it is an efficient equivalent to  f.pad(strconv.FormatFloat()...).\n func (f *fmt) formatFloat(v float64, verb byte, prec, n int) {\n-\t// We leave one byte at the beginning of f.intbuf for a sign if needed,\n-\t// and make it a space, which we might be able to use.\n-\tf.intbuf[0] = ' '\n-\tslice := strconv.AppendFloat(f.intbuf[0:1], v, verb, prec, n)\n-\t// Add a plus sign or space to the floating-point string representation if missing and required.\n-\t// The formatted number starts at slice[1].\n-\tswitch slice[1] {\n-\tcase '-', '+':\n-\t\t// If we're zero padding, want the sign before the leading zeros.\n-\t\t// Achieve this by writing the sign out and padding the postive number.\n-\t\tif f.zero && f.widPresent && f.wid > len(slice) {\n-\t\t\tf.buf.WriteByte(slice[1])\n-\t\t\tf.wid--\n-\t\t\tf.pad(slice[2:])\n-\t\t\treturn\n+\t// Format number, reserving space for leading + sign if needed.\n+\tnum := strconv.AppendFloat(f.intbuf[0:1], v, verb, prec, n)\n+\tif num[1] == '-' || num[1] == '+' {\n+\t\tnum = num[1:]\n+\t} else {\n+\t\tnum[0] = '+'\n+\t}\n+\t// Special handling for infinity, which doesn't look like a number so shouldn't be padded with zeros.\n+\tif math.IsInf(v, 0) {\n+\t\tif f.zero {\n+\t\t\tdefer func() { f.zero = true }()\n+\t\t\tf.zero = false\n \t\t}\n-\t\t// We're set; drop the leading space.\n-\t\tslice = slice[1:]\n-\tdefault:\n-\t\t// There's no sign, but we might need one.\n-\t\tif f.plus {\n-\t\t\tf.buf.WriteByte('+')\n+\t}\n+\t// num is now a signed version of the number.\n+\t// If we're zero padding, want the sign before the leading zeros.\n+\t// Achieve this by writing the sign out and then padding the unsigned number.\n+\tif f.zero && f.widPresent && f.wid > len(num) {\n+\t\tif f.space && v >= 0 {\n+\t\t\tf.buf.WriteByte(' ') // This is what C does: even with zero, f.space means space.\n+\t\t\tf.wid--\n+\t\t} else if f.plus || v < 0 {\n+\t\t\tf.buf.WriteByte(num[0])\n \t\t\tf.wid--\n-\t\t\tf.pad(slice[1:])\n-\t\t\treturn\n-\t\t} else if f.space {\n-\t\t\t// space is already there\n-\t\t} else {\n-\t\t\tslice = slice[1:]\n \t\t}\n+\t\tf.pad(num[1:])\n+\t\treturn\n \t}\n-\tf.pad(slice)\n+\t// f.space says to replace a leading + with a space.\n+\tif f.space && num[0] == '+' {\n+\t\tnum[0] = ' '\n+\t\tf.pad(num)\n+\t\treturn\n+\t}\n+\t// Now we know the sign is attached directly to the number, if present at all.\n+\t// We want a sign if asked for, if it's negative, or if it's infinity (+Inf vs. -Inf).\n+\tif f.plus || num[0] == '-' || math.IsInf(v, 0) {\n+\t\tf.pad(num)\n+\t\treturn\n+\t}\n+\t// No sign to show and the number is positive; just print the unsigned number.\n+\tf.pad(num[1:])\n }\n \n // fmt_e64 formats a float64 in the form -1.23e+12.\n@@ -436,60 +447,46 @@ func (f *fmt) fmt_fb32(v float32) { f.formatFloat(float64(v), 'b', 0, 32) }\n \n // fmt_c64 formats a complex64 according to the verb.\n func (f *fmt) fmt_c64(v complex64, verb rune) {\n-\tf.buf.WriteByte('(')\n-\tr := real(v)\n-\toldPlus := f.plus\n-\tfor i := 0; ; i++ {\n-\t\tswitch verb {\n-\t\tcase 'b':\n-\t\t\tf.fmt_fb32(r)\n-\t\tcase 'e':\n-\t\t\tf.fmt_e32(r)\n-\t\tcase 'E':\n-\t\t\tf.fmt_E32(r)\n-\t\tcase 'f':\n-\t\t\tf.fmt_f32(r)\n-\t\tcase 'g':\n-\t\t\tf.fmt_g32(r)\n-\t\tcase 'G':\n-\t\t\tf.fmt_G32(r)\n-\t\t}\n-\t\tif i != 0 {\n-\t\t\tbreak\n-\t\t}\n-\t\tf.plus = true\n-\t\tr = imag(v)\n-\t}\n-\tf.plus = oldPlus\n-\tf.buf.Write(irparenBytes)\n+\tf.fmt_complex(float64(real(v)), float64(imag(v)), 32, verb)\n }\n \n // fmt_c128 formats a complex128 according to the verb.\n func (f *fmt) fmt_c128(v complex128, verb rune) {\n+\tf.fmt_complex(real(v), imag(v), 64, verb)\n+}\n+\n+// fmt_complex formats a complex number as (r+ji).\n+func (f *fmt) fmt_complex(r, j float64, size int, verb rune) {\n \tf.buf.WriteByte('(')\n-\tr := real(v)\n \toldPlus := f.plus\n+\toldSpace := f.space\n+\toldWid := f.wid\n \tfor i := 0; ; i++ {\n \t\tswitch verb {\n \t\tcase 'b':\n-\t\t\tf.fmt_fb64(r)\n+\t\t\tf.formatFloat(r, 'b', 0, size)\n \t\tcase 'e':\n-\t\t\tf.fmt_e64(r)\n+\t\t\tf.formatFloat(r, 'e', doPrec(f, 6), size)\n \t\tcase 'E':\n-\t\t\tf.fmt_E64(r)\n-\t\tcase 'f':\n-\t\t\tf.fmt_f64(r)\n+\t\t\tf.formatFloat(r, 'E', doPrec(f, 6), size)\n+\t\tcase 'f', 'F':\n+\t\t\tf.formatFloat(r, 'f', doPrec(f, 6), size)\n \t\tcase 'g':\n-\t\t\tf.fmt_g64(r)\n+\t\t\tf.formatFloat(r, 'g', doPrec(f, -1), size)\n \t\tcase 'G':\n-\t\t\tf.fmt_G64(r)\n+\t\t\tf.formatFloat(r, 'G', doPrec(f, -1), size)\n \t\t}\n \t\tif i != 0 {\n \t\t\tbreak\n \t\t}\n+\t\t// Imaginary part always has a sign.\n \t\tf.plus = true\n-\t\tr = imag(v)\n+\t\tf.space = false\n+\t\tf.wid = oldWid\n+\t\tr = j\n \t}\n+\tf.space = oldSpace\n \tf.plus = oldPlus\n+\tf.wid = oldWid\n \tf.buf.Write(irparenBytes)\n }"}, {"sha": "302661f4c85fc46285f7e1ccc5e490b5ea1f3355", "filename": "libgo/go/fmt/print.go", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Ffmt%2Fprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Ffmt%2Fprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fprint.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -447,7 +447,7 @@ func (p *pp) fmtFloat32(v float32, verb rune) {\n \t\tp.fmt.fmt_e32(v)\n \tcase 'E':\n \t\tp.fmt.fmt_E32(v)\n-\tcase 'f':\n+\tcase 'f', 'F':\n \t\tp.fmt.fmt_f32(v)\n \tcase 'g', 'v':\n \t\tp.fmt.fmt_g32(v)\n@@ -466,7 +466,7 @@ func (p *pp) fmtFloat64(v float64, verb rune) {\n \t\tp.fmt.fmt_e64(v)\n \tcase 'E':\n \t\tp.fmt.fmt_E64(v)\n-\tcase 'f':\n+\tcase 'f', 'F':\n \t\tp.fmt.fmt_f64(v)\n \tcase 'g', 'v':\n \t\tp.fmt.fmt_g64(v)\n@@ -523,6 +523,15 @@ func (p *pp) fmtString(v string, verb rune, goSyntax bool) {\n func (p *pp) fmtBytes(v []byte, verb rune, goSyntax bool, typ reflect.Type, depth int) {\n \tif verb == 'v' || verb == 'd' {\n \t\tif goSyntax {\n+\t\t\tif v == nil {\n+\t\t\t\tif typ == nil {\n+\t\t\t\t\tp.buf.WriteString(\"[]byte(nil)\")\n+\t\t\t\t} else {\n+\t\t\t\t\tp.buf.WriteString(typ.String())\n+\t\t\t\t\tp.buf.Write(nilParenBytes)\n+\t\t\t\t}\n+\t\t\t\treturn\n+\t\t\t}\n \t\t\tif typ == nil {\n \t\t\t\tp.buf.Write(bytesBytes)\n \t\t\t} else {"}, {"sha": "ac999d627cecbf739050e79a23ceaf40069dfa26", "filename": "libgo/go/go/ast/commentmap.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fast%2Fcommentmap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fast%2Fcommentmap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fast%2Fcommentmap.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -149,7 +149,7 @@ func NewCommentMap(fset *token.FileSet, node Node, comments []*CommentGroup) Com\n \n \t// set up comment reader r\n \ttmp := make([]*CommentGroup, len(comments))\n-\tcopy(tmp, comments) // don't change incomming comments\n+\tcopy(tmp, comments) // don't change incoming comments\n \tsortComments(tmp)\n \tr := commentListReader{fset: fset, list: tmp} // !r.eol() because len(comments) > 0\n \tr.next()"}, {"sha": "4df0b8983ac7719ed856ec73fa7acd925db1c344", "filename": "libgo/go/go/build/build.go", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -264,6 +264,7 @@ var cgoEnabled = map[string]bool{\n \t\"dragonfly/amd64\": true,\n \t\"freebsd/386\":     true,\n \t\"freebsd/amd64\":   true,\n+\t\"freebsd/arm\":     true,\n \t\"linux/386\":       true,\n \t\"linux/amd64\":     true,\n \t\"linux/arm\":       true,\n@@ -291,10 +292,10 @@ func defaultContext() Context {\n \t// say \"+build go1.x\", and code that should only be built before Go 1.x\n \t// (perhaps it is the stub to use in that case) should say \"+build !go1.x\".\n \t//\n-\t// When we reach Go 1.3 the line will read\n-\t//\tc.ReleaseTags = []string{\"go1.1\", \"go1.2\", \"go1.3\"}\n+\t// When we reach Go 1.4 the line will read\n+\t//\tc.ReleaseTags = []string{\"go1.1\", \"go1.2\", \"go1.3\", \"go1.4\"}\n \t// and so on.\n-\tc.ReleaseTags = []string{\"go1.1\", \"go1.2\"}\n+\tc.ReleaseTags = []string{\"go1.1\", \"go1.2\", \"go1.3\"}\n \n \tswitch os.Getenv(\"CGO_ENABLED\") {\n \tcase \"1\":\n@@ -1209,7 +1210,7 @@ func ArchChar(goarch string) (string, error) {\n \tswitch goarch {\n \tcase \"386\":\n \t\treturn \"8\", nil\n-\tcase \"amd64\":\n+\tcase \"amd64\", \"amd64p32\":\n \t\treturn \"6\", nil\n \tcase \"arm\":\n \t\treturn \"5\", nil"}, {"sha": "3a795fdcc4bbed23494d5c4bc3a2a1d177f78da0", "filename": "libgo/go/go/build/deps_test.go", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fdeps_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,6 +8,7 @@\n package build\n \n import (\n+\t\"runtime\"\n \t\"sort\"\n \t\"testing\"\n )\n@@ -359,7 +360,7 @@ func allowed(pkg string) map[string]bool {\n }\n \n var bools = []bool{false, true}\n-var geese = []string{\"darwin\", \"dragonfly\", \"freebsd\", \"linux\", \"netbsd\", \"openbsd\", \"plan9\", \"solaris\", \"windows\"}\n+var geese = []string{\"darwin\", \"dragonfly\", \"freebsd\", \"linux\", \"nacl\", \"netbsd\", \"openbsd\", \"plan9\", \"solaris\", \"windows\"}\n var goarches = []string{\"386\", \"amd64\", \"arm\", \"arm64\"}\n \n type osPkg struct {\n@@ -374,6 +375,11 @@ var allowedErrors = map[osPkg]bool{\n }\n \n func TestDependencies(t *testing.T) {\n+\tif runtime.GOOS == \"nacl\" {\n+\t\t// NaCl tests run in a limited file system and we do not\n+\t\t// provide access to every source file.\n+\t\tt.Skip(\"skipping on NaCl\")\n+\t}\n \tvar all []string\n \n \tfor k := range pkgDeps {\n@@ -387,6 +393,9 @@ func TestDependencies(t *testing.T) {\n \t\t\tif isMacro(pkg) {\n \t\t\t\tcontinue\n \t\t\t}\n+\t\t\tif pkg == \"runtime/cgo\" && !ctxt.CgoEnabled {\n+\t\t\t\tcontinue\n+\t\t\t}\n \t\t\tp, err := ctxt.Import(pkg, \"\", 0)\n \t\t\tif err != nil {\n \t\t\t\tif allowedErrors[osPkg{ctxt.GOOS, pkg}] {"}, {"sha": "f17f76ccc7bb0566bd134966eb2f28713267429b", "filename": "libgo/go/go/build/doc.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fbuild%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fbuild%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fdoc.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -99,6 +99,7 @@\n //\t- \"cgo\", if ctxt.CgoEnabled is true\n //\t- \"go1.1\", from Go version 1.1 onward\n //\t- \"go1.2\", from Go version 1.2 onward\n+//\t- \"go1.3\", from Go version 1.3 onward\n //\t- any additional words listed in ctxt.BuildTags\n //\n // If a file's name, after stripping the extension and a possible _test suffix,"}, {"sha": "b1d5bbe4f44f54ed0cdd24fbdf412d764f7e41b1", "filename": "libgo/go/go/build/syslist.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -4,5 +4,5 @@\n \n package build\n \n-const goosList = \"darwin dragonfly freebsd linux netbsd openbsd plan9 solaris windows \"\n-const goarchList = \"386 amd64 arm arm64 alpha m68k mipso32 mipsn32 mipsn64 mipso64 ppc ppc64 sparc sparc64 \"\n+const goosList = \"darwin dragonfly freebsd linux nacl netbsd openbsd plan9 solaris windows \"\n+const goarchList = \"386 amd64 amd64p32 arm arm64 alpha m68k mipso32 mipsn32 mipsn64 mipso64 ppc ppc64 sparc sparc64 \""}, {"sha": "f414ca4090e27dfbdb26774969eecb1853468045", "filename": "libgo/go/go/doc/comment.go", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -45,13 +45,13 @@ func commentEscape(w io.Writer, text string, nice bool) {\n \n const (\n \t// Regexp for Go identifiers\n-\tidentRx = `[a-zA-Z_][a-zA-Z_0-9]*` // TODO(gri) ASCII only for now - fix this\n+\tidentRx = `[\\pL_][\\pL_0-9]*`\n \n \t// Regexp for URLs\n-\tprotocol = `(https?|ftp|file|gopher|mailto|news|nntp|telnet|wais|prospero):`\n+\tprotocol = `https?|ftp|file|gopher|mailto|news|nntp|telnet|wais|prospero`\n \thostPart = `[a-zA-Z0-9_@\\-]+`\n-\tfilePart = `[a-zA-Z0-9_?%#~&/\\-+=]+`\n-\turlRx    = protocol + `//` + // http://\n+\tfilePart = `[a-zA-Z0-9_?%#~&/\\-+=()]+` // parentheses may not be matching; see pairedParensPrefixLen\n+\turlRx    = `(` + protocol + `)://` +   // http://\n \t\thostPart + `([.:]` + hostPart + `)*/?` + // //www.google.com:8080/\n \t\tfilePart + `([:.,]` + filePart + `)*`\n )\n@@ -73,6 +73,29 @@ var (\n \thtml_endh   = []byte(\"</h3>\\n\")\n )\n \n+// pairedParensPrefixLen returns the length of the longest prefix of s containing paired parentheses.\n+func pairedParensPrefixLen(s string) int {\n+\tparens := 0\n+\tl := len(s)\n+\tfor i, ch := range s {\n+\t\tswitch ch {\n+\t\tcase '(':\n+\t\t\tif parens == 0 {\n+\t\t\t\tl = i\n+\t\t\t}\n+\t\t\tparens++\n+\t\tcase ')':\n+\t\t\tparens--\n+\t\t\tif parens == 0 {\n+\t\t\t\tl = len(s)\n+\t\t\t} else if parens < 0 {\n+\t\t\t\treturn i\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn l\n+}\n+\n // Emphasize and escape a line of text for HTML. URLs are converted into links;\n // if the URL also appears in the words map, the link is taken from the map (if\n // the corresponding map value is the empty string, the URL is not converted\n@@ -92,18 +115,26 @@ func emphasize(w io.Writer, line string, words map[string]string, nice bool) {\n \t\t// write text before match\n \t\tcommentEscape(w, line[0:m[0]], nice)\n \n-\t\t// analyze match\n+\t\t// adjust match if necessary\n \t\tmatch := line[m[0]:m[1]]\n+\t\tif n := pairedParensPrefixLen(match); n < len(match) {\n+\t\t\t// match contains unpaired parentheses (rare);\n+\t\t\t// redo matching with shortened line for correct indices\n+\t\t\tm = matchRx.FindStringSubmatchIndex(line[:m[0]+n])\n+\t\t\tmatch = match[:n]\n+\t\t}\n+\n+\t\t// analyze match\n \t\turl := \"\"\n \t\titalics := false\n \t\tif words != nil {\n-\t\t\turl, italics = words[string(match)]\n+\t\t\turl, italics = words[match]\n \t\t}\n \t\tif m[2] >= 0 {\n \t\t\t// match against first parenthesized sub-regexp; must be match against urlRx\n \t\t\tif !italics {\n \t\t\t\t// no alternative URL in words list, use match instead\n-\t\t\t\turl = string(match)\n+\t\t\t\turl = match\n \t\t\t}\n \t\t\titalics = false // don't italicize URLs\n \t\t}\n@@ -392,7 +423,9 @@ func ToText(w io.Writer, text string, indent, preIndent string, width int) {\n \t\tcase opPre:\n \t\t\tw.Write(nl)\n \t\t\tfor _, line := range b.lines {\n-\t\t\t\tif !isBlank(line) {\n+\t\t\t\tif isBlank(line) {\n+\t\t\t\t\tw.Write([]byte(\"\\n\"))\n+\t\t\t\t} else {\n \t\t\t\t\tw.Write([]byte(preIndent))\n \t\t\t\t\tw.Write([]byte(line))\n \t\t\t\t}"}, {"sha": "ad65c2a27f8a09d22237f59287e0a06cd91c4a5c", "filename": "libgo/go/go/doc/comment_test.go", "status": "modified", "additions": 102, "deletions": 4, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -42,8 +42,9 @@ func TestIsHeading(t *testing.T) {\n }\n \n var blocksTests = []struct {\n-\tin  string\n-\tout []block\n+\tin   string\n+\tout  []block\n+\ttext string\n }{\n \t{\n \t\tin: `Para 1.\n@@ -59,6 +60,22 @@ Para 3.\n \tpre1\n \n Para 4.\n+\n+\tpre\n+\tpre1\n+\n+\tpre2\n+\n+Para 5.\n+\n+\n+\tpre\n+\n+\n+\tpre1\n+\tpre2\n+\n+Para 6.\n \tpre\n \tpre2\n `,\n@@ -69,8 +86,44 @@ Para 4.\n \t\t\t{opPara, []string{\"Para 3.\\n\"}},\n \t\t\t{opPre, []string{\"pre\\n\", \"pre1\\n\"}},\n \t\t\t{opPara, []string{\"Para 4.\\n\"}},\n+\t\t\t{opPre, []string{\"pre\\n\", \"pre1\\n\", \"\\n\", \"pre2\\n\"}},\n+\t\t\t{opPara, []string{\"Para 5.\\n\"}},\n+\t\t\t{opPre, []string{\"pre\\n\", \"\\n\", \"\\n\", \"pre1\\n\", \"pre2\\n\"}},\n+\t\t\t{opPara, []string{\"Para 6.\\n\"}},\n \t\t\t{opPre, []string{\"pre\\n\", \"pre2\\n\"}},\n \t\t},\n+\t\ttext: `.   Para 1. Para 1 line 2.\n+\n+.   Para 2.\n+\n+\n+.   Section\n+\n+.   Para 3.\n+\n+$\tpre\n+$\tpre1\n+\n+.   Para 4.\n+\n+$\tpre\n+$\tpre1\n+\n+$\tpre2\n+\n+.   Para 5.\n+\n+$\tpre\n+\n+\n+$\tpre1\n+$\tpre2\n+\n+.   Para 6.\n+\n+$\tpre\n+$\tpre2\n+`,\n \t},\n }\n \n@@ -83,14 +136,28 @@ func TestBlocks(t *testing.T) {\n \t}\n }\n \n+func TestToText(t *testing.T) {\n+\tvar buf bytes.Buffer\n+\tfor i, tt := range blocksTests {\n+\t\tToText(&buf, tt.in, \".   \", \"$\\t\", 40)\n+\t\tif have := buf.String(); have != tt.text {\n+\t\t\tt.Errorf(\"#%d: mismatch\\nhave: %s\\nwant: %s\\nhave vs want:\\n%q\\n%q\", i, have, tt.text, have, tt.text)\n+\t\t}\n+\t\tbuf.Reset()\n+\t}\n+}\n+\n var emphasizeTests = []struct {\n-\tin  string\n-\tout string\n+\tin, out string\n }{\n \t{\"http://www.google.com/\", `<a href=\"http://www.google.com/\">http://www.google.com/</a>`},\n \t{\"https://www.google.com/\", `<a href=\"https://www.google.com/\">https://www.google.com/</a>`},\n \t{\"http://www.google.com/path.\", `<a href=\"http://www.google.com/path\">http://www.google.com/path</a>.`},\n+\t{\"http://en.wikipedia.org/wiki/Camellia_(cipher)\", `<a href=\"http://en.wikipedia.org/wiki/Camellia_(cipher)\">http://en.wikipedia.org/wiki/Camellia_(cipher)</a>`},\n \t{\"(http://www.google.com/)\", `(<a href=\"http://www.google.com/\">http://www.google.com/</a>)`},\n+\t{\"http://gmail.com)\", `<a href=\"http://gmail.com\">http://gmail.com</a>)`},\n+\t{\"((http://gmail.com))\", `((<a href=\"http://gmail.com\">http://gmail.com</a>))`},\n+\t{\"http://gmail.com ((http://gmail.com)) ()\", `<a href=\"http://gmail.com\">http://gmail.com</a> ((<a href=\"http://gmail.com\">http://gmail.com</a>)) ()`},\n \t{\"Foo bar http://example.com/ quux!\", `Foo bar <a href=\"http://example.com/\">http://example.com/</a> quux!`},\n \t{\"Hello http://example.com/%2f/ /world.\", `Hello <a href=\"http://example.com/%2f/\">http://example.com/%2f/</a> /world.`},\n \t{\"Lorem http: ipsum //host/path\", \"Lorem http: ipsum //host/path\"},\n@@ -107,3 +174,34 @@ func TestEmphasize(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+var pairedParensPrefixLenTests = []struct {\n+\tin, out string\n+}{\n+\t{\"\", \"\"},\n+\t{\"foo\", \"foo\"},\n+\t{\"()\", \"()\"},\n+\t{\"foo()\", \"foo()\"},\n+\t{\"foo()()()\", \"foo()()()\"},\n+\t{\"foo()((()()))\", \"foo()((()()))\"},\n+\t{\"foo()((()()))bar\", \"foo()((()()))bar\"},\n+\t{\"foo)\", \"foo\"},\n+\t{\"foo))\", \"foo\"},\n+\t{\"foo)))))\", \"foo\"},\n+\t{\"(foo\", \"\"},\n+\t{\"((foo\", \"\"},\n+\t{\"(((((foo\", \"\"},\n+\t{\"(foo)\", \"(foo)\"},\n+\t{\"((((foo))))\", \"((((foo))))\"},\n+\t{\"foo()())\", \"foo()()\"},\n+\t{\"foo((()())\", \"foo\"},\n+\t{\"foo((()())) (() foo \", \"foo((()())) \"},\n+}\n+\n+func TestPairedParensPrefixLen(t *testing.T) {\n+\tfor i, tt := range pairedParensPrefixLenTests {\n+\t\tif out := tt.in[:pairedParensPrefixLen(tt.in)]; out != tt.out {\n+\t\t\tt.Errorf(\"#%d: mismatch\\nhave: %q\\nwant: %q\", i, out, tt.out)\n+\t\t}\n+\t}\n+}"}, {"sha": "c414e548ccd7524a1935d8b10d97418f3a28b025", "filename": "libgo/go/go/doc/example.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -255,7 +255,7 @@ func playExample(file *ast.File, body *ast.BlockStmt) *ast.File {\n \t\t}\n \t}\n \n-\t// Strip \"Output:\" commment and adjust body end position.\n+\t// Strip \"Output:\" comment and adjust body end position.\n \tbody, comments = stripOutputComment(body, comments)\n \n \t// Synthesize import declaration.\n@@ -318,7 +318,7 @@ func playExampleFile(file *ast.File) *ast.File {\n \treturn &f\n }\n \n-// stripOutputComment finds and removes an \"Output:\" commment from body\n+// stripOutputComment finds and removes an \"Output:\" comment from body\n // and comments, and adjusts the body block's end position.\n func stripOutputComment(body *ast.BlockStmt, comments []*ast.CommentGroup) (*ast.BlockStmt, []*ast.CommentGroup) {\n \t// Do nothing if no \"Output:\" comment found."}, {"sha": "8506077cee626d7464b0b8deb115fc0d1e39e12f", "filename": "libgo/go/go/parser/error_test.go", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fparser%2Ferror_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fparser%2Ferror_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Ferror_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -59,8 +59,11 @@ func getPos(filename string, offset int) token.Pos {\n \n // ERROR comments must be of the form /* ERROR \"rx\" */ and rx is\n // a regular expression that matches the expected error message.\n+// The special form /* ERROR HERE \"rx\" */ must be used for error\n+// messages that appear immediately after a token, rather than at\n+// a token's position.\n //\n-var errRx = regexp.MustCompile(`^/\\* *ERROR *\"([^\"]*)\" *\\*/$`)\n+var errRx = regexp.MustCompile(`^/\\* *ERROR *(HERE)? *\"([^\"]*)\" *\\*/$`)\n \n // expectedErrors collects the regular expressions of ERROR comments found\n // in files and returns them as a map of error positions to error messages.\n@@ -74,6 +77,7 @@ func expectedErrors(t *testing.T, filename string, src []byte) map[token.Pos]str\n \t// not match the position information collected by the parser\n \ts.Init(getFile(filename), src, nil, scanner.ScanComments)\n \tvar prev token.Pos // position of last non-comment, non-semicolon token\n+\tvar here token.Pos // position immediately after the token at position prev\n \n \tfor {\n \t\tpos, tok, lit := s.Scan()\n@@ -82,11 +86,22 @@ func expectedErrors(t *testing.T, filename string, src []byte) map[token.Pos]str\n \t\t\treturn errors\n \t\tcase token.COMMENT:\n \t\t\ts := errRx.FindStringSubmatch(lit)\n-\t\t\tif len(s) == 2 {\n-\t\t\t\terrors[prev] = string(s[1])\n+\t\t\tif len(s) == 3 {\n+\t\t\t\tpos := prev\n+\t\t\t\tif s[1] == \"HERE\" {\n+\t\t\t\t\tpos = here\n+\t\t\t\t}\n+\t\t\t\terrors[pos] = string(s[2])\n \t\t\t}\n \t\tdefault:\n \t\t\tprev = pos\n+\t\t\tvar l int // token length\n+\t\t\tif tok.IsLiteral() {\n+\t\t\t\tl = len(lit)\n+\t\t\t} else {\n+\t\t\t\tl = len(tok.String())\n+\t\t\t}\n+\t\t\there = prev + token.Pos(l)\n \t\t}\n \t}\n }"}, {"sha": "57da4ddcd9302352c168c005799cb75e4f75a677", "filename": "libgo/go/go/parser/interface.go", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fparser%2Finterface.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fparser%2Finterface.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Finterface.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -182,6 +182,13 @@ func ParseExpr(x string) (ast.Expr, error) {\n \tp.closeScope()\n \tassert(p.topScope == nil, \"unbalanced scopes\")\n \n+\t// If a semicolon was inserted, consume it;\n+\t// report an error if there's more tokens.\n+\tif p.tok == token.SEMICOLON {\n+\t\tp.next()\n+\t}\n+\tp.expect(token.EOF)\n+\n \tif p.errors.Len() > 0 {\n \t\tp.errors.Sort()\n \t\treturn nil, p.errors.Err()"}, {"sha": "00dd532b2395e86e45fb8f24f4563e455d561a4a", "filename": "libgo/go/go/parser/parser.go", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fparser%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fparser%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Fparser.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -492,6 +492,26 @@ func syncDecl(p *parser) {\n \t}\n }\n \n+// safePos returns a valid file position for a given position: If pos\n+// is valid to begin with, safePos returns pos. If pos is out-of-range,\n+// safePos returns the EOF position.\n+//\n+// This is hack to work around \"artificial\" end positions in the AST which\n+// are computed by adding 1 to (presumably valid) token positions. If the\n+// token positions are invalid due to parse errors, the resulting end position\n+// may be past the file's EOF position, which would lead to panics if used\n+// later on.\n+//\n+func (p *parser) safePos(pos token.Pos) (res token.Pos) {\n+\tdefer func() {\n+\t\tif recover() != nil {\n+\t\t\tres = token.Pos(p.file.Base() + p.file.Size()) // EOF position\n+\t\t}\n+\t}()\n+\t_ = p.file.Offset(pos) // trigger a panic if position is out-of-range\n+\treturn pos\n+}\n+\n // ----------------------------------------------------------------------------\n // Identifiers\n \n@@ -679,7 +699,7 @@ func (p *parser) parseFieldDecl(scope *ast.Scope) *ast.Field {\n \t\tif n := len(list); n > 1 || !isTypeName(deref(typ)) {\n \t\t\tpos := typ.Pos()\n \t\t\tp.errorExpected(pos, \"anonymous field\")\n-\t\t\ttyp = &ast.BadExpr{From: pos, To: list[n-1].End()}\n+\t\t\ttyp = &ast.BadExpr{From: pos, To: p.safePos(list[n-1].End())}\n \t\t}\n \t}\n \n@@ -1337,7 +1357,7 @@ func (p *parser) checkExpr(x ast.Expr) ast.Expr {\n \tdefault:\n \t\t// all other nodes are not proper expressions\n \t\tp.errorExpected(x.Pos(), \"expression\")\n-\t\tx = &ast.BadExpr{From: x.Pos(), To: x.End()}\n+\t\tx = &ast.BadExpr{From: x.Pos(), To: p.safePos(x.End())}\n \t}\n \treturn x\n }\n@@ -1400,7 +1420,7 @@ func (p *parser) checkExprOrType(x ast.Expr) ast.Expr {\n \tcase *ast.ArrayType:\n \t\tif len, isEllipsis := t.Len.(*ast.Ellipsis); isEllipsis {\n \t\t\tp.error(len.Pos(), \"expected array length, found '...'\")\n-\t\t\tx = &ast.BadExpr{From: x.Pos(), To: x.End()}\n+\t\t\tx = &ast.BadExpr{From: x.Pos(), To: p.safePos(x.End())}\n \t\t}\n \t}\n \n@@ -1686,14 +1706,14 @@ func (p *parser) parseSimpleStmt(mode int) (ast.Stmt, bool) {\n \treturn &ast.ExprStmt{X: x[0]}, false\n }\n \n-func (p *parser) parseCallExpr() *ast.CallExpr {\n+func (p *parser) parseCallExpr(callType string) *ast.CallExpr {\n \tx := p.parseRhsOrType() // could be a conversion: (some type)(x)\n \tif call, isCall := x.(*ast.CallExpr); isCall {\n \t\treturn call\n \t}\n \tif _, isBad := x.(*ast.BadExpr); !isBad {\n \t\t// only report error if it's a new one\n-\t\tp.errorExpected(x.Pos(), \"function/method call\")\n+\t\tp.error(p.safePos(x.End()), fmt.Sprintf(\"function must be invoked in %s statement\", callType))\n \t}\n \treturn nil\n }\n@@ -1704,7 +1724,7 @@ func (p *parser) parseGoStmt() ast.Stmt {\n \t}\n \n \tpos := p.expect(token.GO)\n-\tcall := p.parseCallExpr()\n+\tcall := p.parseCallExpr(\"go\")\n \tp.expectSemi()\n \tif call == nil {\n \t\treturn &ast.BadStmt{From: pos, To: pos + 2} // len(\"go\")\n@@ -1719,7 +1739,7 @@ func (p *parser) parseDeferStmt() ast.Stmt {\n \t}\n \n \tpos := p.expect(token.DEFER)\n-\tcall := p.parseCallExpr()\n+\tcall := p.parseCallExpr(\"defer\")\n \tp.expectSemi()\n \tif call == nil {\n \t\treturn &ast.BadStmt{From: pos, To: pos + 5} // len(\"defer\")\n@@ -1770,7 +1790,7 @@ func (p *parser) makeExpr(s ast.Stmt, kind string) ast.Expr {\n \t\treturn p.checkExpr(es.X)\n \t}\n \tp.error(s.Pos(), fmt.Sprintf(\"expected %s, found simple statement (missing parentheses around composite literal?)\", kind))\n-\treturn &ast.BadExpr{From: s.Pos(), To: s.End()}\n+\treturn &ast.BadExpr{From: s.Pos(), To: p.safePos(s.End())}\n }\n \n func (p *parser) parseIfStmt() *ast.IfStmt {\n@@ -2052,7 +2072,7 @@ func (p *parser) parseForStmt() ast.Stmt {\n \t\t\tkey = as.Lhs[0]\n \t\tdefault:\n \t\t\tp.errorExpected(as.Lhs[0].Pos(), \"1 or 2 expressions\")\n-\t\t\treturn &ast.BadStmt{From: pos, To: body.End()}\n+\t\t\treturn &ast.BadStmt{From: pos, To: p.safePos(body.End())}\n \t\t}\n \t\t// parseSimpleStmt returned a right-hand side that\n \t\t// is a single unary expression of the form \"range x\"\n@@ -2299,7 +2319,7 @@ func (p *parser) parseReceiver(scope *ast.Scope) *ast.FieldList {\n \t\t\tp.errorExpected(base.Pos(), \"(unqualified) identifier\")\n \t\t}\n \t\tpar.List = []*ast.Field{\n-\t\t\t{Type: &ast.BadExpr{From: recv.Pos(), To: recv.End()}},\n+\t\t\t{Type: &ast.BadExpr{From: recv.Pos(), To: p.safePos(recv.End())}},\n \t\t}\n \t}\n "}, {"sha": "2797ea518bd0e23c23aaf021444d242286da6865", "filename": "libgo/go/go/parser/parser_test.go", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fparser%2Fparser_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fparser%2Fparser_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Fparser_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -78,7 +78,7 @@ func TestParseExpr(t *testing.T) {\n \t}\n \t// sanity check\n \tif _, ok := x.(*ast.BinaryExpr); !ok {\n-\t\tt.Errorf(\"ParseExpr(%s): got %T, expected *ast.BinaryExpr\", src, x)\n+\t\tt.Errorf(\"ParseExpr(%s): got %T, want *ast.BinaryExpr\", src, x)\n \t}\n \n \t// a valid type expression\n@@ -89,17 +89,24 @@ func TestParseExpr(t *testing.T) {\n \t}\n \t// sanity check\n \tif _, ok := x.(*ast.StructType); !ok {\n-\t\tt.Errorf(\"ParseExpr(%s): got %T, expected *ast.StructType\", src, x)\n+\t\tt.Errorf(\"ParseExpr(%s): got %T, want *ast.StructType\", src, x)\n \t}\n \n \t// an invalid expression\n \tsrc = \"a + *\"\n \t_, err = ParseExpr(src)\n \tif err == nil {\n-\t\tt.Fatalf(\"ParseExpr(%s): %v\", src, err)\n+\t\tt.Fatalf(\"ParseExpr(%s): got no error\", src)\n+\t}\n+\n+\t// a valid expression followed by extra tokens is invalid\n+\tsrc = \"a[i] := x\"\n+\t_, err = ParseExpr(src)\n+\tif err == nil {\n+\t\tt.Fatalf(\"ParseExpr(%s): got no error\", src)\n \t}\n \n-\t// it must not crash\n+\t// ParseExpr must not crash\n \tfor _, src := range valids {\n \t\tParseExpr(src)\n \t}"}, {"sha": "b794060998f66de3d7b9ac639a06fcf0d101e3a1", "filename": "libgo/go/go/parser/short_test.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fparser%2Fshort_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fparser%2Fshort_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Fshort_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -86,6 +86,9 @@ var invalids = []string{\n \t`package p; func f() { for x /* ERROR \"boolean or range expression\" */ := []string {} }`,\n \t`package p; func f() { for i /* ERROR \"boolean or range expression\" */ , x = []string {} }`,\n \t`package p; func f() { for i /* ERROR \"boolean or range expression\" */ , x := []string {} }`,\n+\t`package p; func f() { go f /* ERROR HERE \"function must be invoked\" */ }`,\n+\t`package p; func f() { defer func() {} /* ERROR HERE \"function must be invoked\" */ }`,\n+\t`package p; func f() { go func() { func() { f(x func /* ERROR \"expected '\\)'\" */ (){}) } } }`,\n }\n \n func TestInvalid(t *testing.T) {"}, {"sha": "04b5f1a76a93eb1c7b9e09489e6646666776fd3b", "filename": "libgo/go/go/printer/nodes.go", "status": "modified", "additions": 44, "deletions": 28, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Fnodes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Fnodes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Fnodes.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -378,10 +378,6 @@ func (p *printer) setLineComment(text string) {\n \tp.setComment(&ast.CommentGroup{List: []*ast.Comment{{Slash: token.NoPos, Text: text}}})\n }\n \n-func (p *printer) isMultiLine(n ast.Node) bool {\n-\treturn p.lineFor(n.End())-p.lineFor(n.Pos()) > 0\n-}\n-\n func (p *printer) fieldList(fields *ast.FieldList, isStruct, isIncomplete bool) {\n \tlbrace := fields.Opening\n \tlist := fields.List\n@@ -428,13 +424,14 @@ func (p *printer) fieldList(fields *ast.FieldList, isStruct, isIncomplete bool)\n \t\tif len(list) == 1 {\n \t\t\tsep = blank\n \t\t}\n-\t\tnewSection := false\n+\t\tvar line int\n \t\tfor i, f := range list {\n \t\t\tif i > 0 {\n-\t\t\t\tp.linebreak(p.lineFor(f.Pos()), 1, ignore, newSection)\n+\t\t\t\tp.linebreak(p.lineFor(f.Pos()), 1, ignore, p.linesFrom(line) > 0)\n \t\t\t}\n \t\t\textraTabs := 0\n \t\t\tp.setComment(f.Doc)\n+\t\t\tp.recordLine(&line)\n \t\t\tif len(f.Names) > 0 {\n \t\t\t\t// named fields\n \t\t\t\tp.identList(f.Names, false)\n@@ -460,7 +457,6 @@ func (p *printer) fieldList(fields *ast.FieldList, isStruct, isIncomplete bool)\n \t\t\t\t}\n \t\t\t\tp.setComment(f.Comment)\n \t\t\t}\n-\t\t\tnewSection = p.isMultiLine(f)\n \t\t}\n \t\tif isIncomplete {\n \t\t\tif len(list) > 0 {\n@@ -472,12 +468,13 @@ func (p *printer) fieldList(fields *ast.FieldList, isStruct, isIncomplete bool)\n \n \t} else { // interface\n \n-\t\tnewSection := false\n+\t\tvar line int\n \t\tfor i, f := range list {\n \t\t\tif i > 0 {\n-\t\t\t\tp.linebreak(p.lineFor(f.Pos()), 1, ignore, newSection)\n+\t\t\t\tp.linebreak(p.lineFor(f.Pos()), 1, ignore, p.linesFrom(line) > 0)\n \t\t\t}\n \t\t\tp.setComment(f.Doc)\n+\t\t\tp.recordLine(&line)\n \t\t\tif ftyp, isFtyp := f.Type.(*ast.FuncType); isFtyp {\n \t\t\t\t// method\n \t\t\t\tp.expr(f.Names[0])\n@@ -487,7 +484,6 @@ func (p *printer) fieldList(fields *ast.FieldList, isStruct, isIncomplete bool)\n \t\t\t\tp.expr(f.Type)\n \t\t\t}\n \t\t\tp.setComment(f.Comment)\n-\t\t\tnewSection = p.isMultiLine(f)\n \t\t}\n \t\tif isIncomplete {\n \t\t\tif len(list) > 0 {\n@@ -826,10 +822,16 @@ func (p *printer) expr1(expr ast.Expr, prec1, depth int) {\n \t\t}\n \t\tp.print(x.Lbrace, token.LBRACE)\n \t\tp.exprList(x.Lbrace, x.Elts, 1, commaTerm, x.Rbrace)\n-\t\t// do not insert extra line breaks because of comments before\n-\t\t// the closing '}' as it might break the code if there is no\n-\t\t// trailing ','\n-\t\tp.print(noExtraLinebreak, x.Rbrace, token.RBRACE, noExtraLinebreak)\n+\t\t// do not insert extra line break following a /*-style comment\n+\t\t// before the closing '}' as it might break the code if there\n+\t\t// is no trailing ','\n+\t\tmode := noExtraLinebreak\n+\t\t// do not insert extra blank following a /*-style comment\n+\t\t// before the closing '}' unless the literal is empty\n+\t\tif len(x.Elts) > 0 {\n+\t\t\tmode |= noExtraBlank\n+\t\t}\n+\t\tp.print(mode, x.Rbrace, token.RBRACE, mode)\n \n \tcase *ast.Ellipsis:\n \t\tp.print(token.ELLIPSIS)\n@@ -901,20 +903,31 @@ func (p *printer) stmtList(list []ast.Stmt, nindent int, nextIsRBrace bool) {\n \tif nindent > 0 {\n \t\tp.print(indent)\n \t}\n-\tmultiLine := false\n+\tvar line int\n \ti := 0\n \tfor _, s := range list {\n \t\t// ignore empty statements (was issue 3466)\n \t\tif _, isEmpty := s.(*ast.EmptyStmt); !isEmpty {\n-\t\t\t// _indent == 0 only for lists of switch/select case clauses;\n+\t\t\t// nindent == 0 only for lists of switch/select case clauses;\n \t\t\t// in those cases each clause is a new section\n \t\t\tif len(p.output) > 0 {\n \t\t\t\t// only print line break if we are not at the beginning of the output\n \t\t\t\t// (i.e., we are not printing only a partial program)\n-\t\t\t\tp.linebreak(p.lineFor(s.Pos()), 1, ignore, i == 0 || nindent == 0 || multiLine)\n+\t\t\t\tp.linebreak(p.lineFor(s.Pos()), 1, ignore, i == 0 || nindent == 0 || p.linesFrom(line) > 0)\n \t\t\t}\n+\t\t\tp.recordLine(&line)\n \t\t\tp.stmt(s, nextIsRBrace && i == len(list)-1)\n-\t\t\tmultiLine = p.isMultiLine(s)\n+\t\t\t// labeled statements put labels on a separate line, but here\n+\t\t\t// we only care about the start line of the actual statement\n+\t\t\t// without label - correct line for each label\n+\t\t\tfor t := s; ; {\n+\t\t\t\tlt, _ := t.(*ast.LabeledStmt)\n+\t\t\t\tif lt == nil {\n+\t\t\t\t\tbreak\n+\t\t\t\t}\n+\t\t\t\tline++\n+\t\t\t\tt = lt.Stmt\n+\t\t\t}\n \t\t\ti++\n \t\t}\n \t}\n@@ -1375,22 +1388,22 @@ func (p *printer) genDecl(d *ast.GenDecl) {\n \t\t\t\t// two or more grouped const/var declarations:\n \t\t\t\t// determine if the type column must be kept\n \t\t\t\tkeepType := keepTypeColumn(d.Specs)\n-\t\t\t\tnewSection := false\n+\t\t\t\tvar line int\n \t\t\t\tfor i, s := range d.Specs {\n \t\t\t\t\tif i > 0 {\n-\t\t\t\t\t\tp.linebreak(p.lineFor(s.Pos()), 1, ignore, newSection)\n+\t\t\t\t\t\tp.linebreak(p.lineFor(s.Pos()), 1, ignore, p.linesFrom(line) > 0)\n \t\t\t\t\t}\n+\t\t\t\t\tp.recordLine(&line)\n \t\t\t\t\tp.valueSpec(s.(*ast.ValueSpec), keepType[i])\n-\t\t\t\t\tnewSection = p.isMultiLine(s)\n \t\t\t\t}\n \t\t\t} else {\n-\t\t\t\tnewSection := false\n+\t\t\t\tvar line int\n \t\t\t\tfor i, s := range d.Specs {\n \t\t\t\t\tif i > 0 {\n-\t\t\t\t\t\tp.linebreak(p.lineFor(s.Pos()), 1, ignore, newSection)\n+\t\t\t\t\t\tp.linebreak(p.lineFor(s.Pos()), 1, ignore, p.linesFrom(line) > 0)\n \t\t\t\t\t}\n+\t\t\t\t\tp.recordLine(&line)\n \t\t\t\t\tp.spec(s, n, false)\n-\t\t\t\t\tnewSection = p.isMultiLine(s)\n \t\t\t\t}\n \t\t\t}\n \t\t\tp.print(unindent, formfeed)\n@@ -1448,13 +1461,16 @@ func (p *printer) bodySize(b *ast.BlockStmt, maxSize int) int {\n \t\t// opening and closing brace are on different lines - don't make it a one-liner\n \t\treturn maxSize + 1\n \t}\n-\tif len(b.List) > 5 || p.commentBefore(p.posFor(pos2)) {\n-\t\t// too many statements or there is a comment inside - don't make it a one-liner\n+\tif len(b.List) > 5 {\n+\t\t// too many statements - don't make it a one-liner\n \t\treturn maxSize + 1\n \t}\n \t// otherwise, estimate body size\n-\tbodySize := 0\n+\tbodySize := p.commentSizeBefore(p.posFor(pos2))\n \tfor i, s := range b.List {\n+\t\tif bodySize > maxSize {\n+\t\t\tbreak // no need to continue\n+\t\t}\n \t\tif i > 0 {\n \t\t\tbodySize += 2 // space for a semicolon and blank\n \t\t}\n@@ -1488,7 +1504,7 @@ func (p *printer) adjBlock(headerSize int, sep whiteSpace, b *ast.BlockStmt) {\n \t\t\t}\n \t\t\tp.print(blank)\n \t\t}\n-\t\tp.print(b.Rbrace, token.RBRACE)\n+\t\tp.print(noExtraLinebreak, b.Rbrace, token.RBRACE, noExtraLinebreak)\n \t\treturn\n \t}\n "}, {"sha": "280c697a0dd7caced68425182c1c11a4da0c9074", "filename": "libgo/go/go/printer/printer.go", "status": "modified", "additions": 93, "deletions": 32, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -39,9 +39,17 @@ const (\n type pmode int\n \n const (\n-\tnoExtraLinebreak pmode = 1 << iota\n+\tnoExtraBlank     pmode = 1 << iota // disables extra blank after /*-style comment\n+\tnoExtraLinebreak                   // disables extra line break after /*-style comment\n )\n \n+type commentInfo struct {\n+\tcindex         int               // current comment index\n+\tcomment        *ast.CommentGroup // = printer.comments[cindex]; or nil\n+\tcommentOffset  int               // = printer.posFor(printer.comments[cindex].List[0].Pos()).Offset; or infinity\n+\tcommentNewline bool              // true if the comment group contains newlines\n+}\n+\n type printer struct {\n \t// Configuration (does not change after initialization)\n \tConfig\n@@ -52,7 +60,8 @@ type printer struct {\n \tindent      int          // current indentation\n \tmode        pmode        // current printer mode\n \timpliedSemi bool         // if set, a linebreak implies a semicolon\n-\tlastTok     token.Token  // the last token printed (token.ILLEGAL if it's whitespace)\n+\tlastTok     token.Token  // last token printed (token.ILLEGAL if it's whitespace)\n+\tprevOpen    token.Token  // previous non-brace \"open\" token (, [, or token.ILLEGAL\n \twsbuf       []whiteSpace // delayed white space\n \n \t// Positions\n@@ -61,19 +70,17 @@ type printer struct {\n \t// white space). If there's a difference and SourcePos is set in\n \t// ConfigMode, //line comments are used in the output to restore\n \t// original source positions for a reader.\n-\tpos  token.Position // current position in AST (source) space\n-\tout  token.Position // current position in output space\n-\tlast token.Position // value of pos after calling writeString\n+\tpos     token.Position // current position in AST (source) space\n+\tout     token.Position // current position in output space\n+\tlast    token.Position // value of pos after calling writeString\n+\tlinePtr *int           // if set, record out.Line for the next token in *linePtr\n \n \t// The list of all source comments, in order of appearance.\n \tcomments        []*ast.CommentGroup // may be nil\n-\tcindex          int                 // current comment index\n \tuseNodeComments bool                // if not set, ignore lead and line comments of nodes\n \n \t// Information about p.comments[p.cindex]; set up by nextComment.\n-\tcomment        *ast.CommentGroup // = p.comments[p.cindex]; or nil\n-\tcommentOffset  int               // = p.posFor(p.comments[p.cindex].List[0].Pos()).Offset; or infinity\n-\tcommentNewline bool              // true if the comment group contains newlines\n+\tcommentInfo\n \n \t// Cache of already computed node sizes.\n \tnodeSizes map[ast.Node]int\n@@ -93,6 +100,14 @@ func (p *printer) init(cfg *Config, fset *token.FileSet, nodeSizes map[ast.Node]\n \tp.cachedPos = -1\n }\n \n+func (p *printer) internalError(msg ...interface{}) {\n+\tif debug {\n+\t\tfmt.Print(p.pos.String() + \": \")\n+\t\tfmt.Println(msg...)\n+\t\tpanic(\"go/printer\")\n+\t}\n+}\n+\n // commentsHaveNewline reports whether a list of comments belonging to\n // an *ast.CommentGroup contains newlines. Because the position information\n // may only be partially correct, we also have to read the comment text.\n@@ -129,12 +144,49 @@ func (p *printer) nextComment() {\n \tp.commentOffset = infinity\n }\n \n-func (p *printer) internalError(msg ...interface{}) {\n-\tif debug {\n-\t\tfmt.Print(p.pos.String() + \": \")\n-\t\tfmt.Println(msg...)\n-\t\tpanic(\"go/printer\")\n+// commentBefore returns true iff the current comment group occurs\n+// before the next position in the source code and printing it does\n+// not introduce implicit semicolons.\n+//\n+func (p *printer) commentBefore(next token.Position) bool {\n+\treturn p.commentOffset < next.Offset && (!p.impliedSemi || !p.commentNewline)\n+}\n+\n+// commentSizeBefore returns the estimated size of the\n+// comments on the same line before the next position.\n+//\n+func (p *printer) commentSizeBefore(next token.Position) int {\n+\t// save/restore current p.commentInfo (p.nextComment() modifies it)\n+\tdefer func(info commentInfo) {\n+\t\tp.commentInfo = info\n+\t}(p.commentInfo)\n+\n+\tsize := 0\n+\tfor p.commentBefore(next) {\n+\t\tfor _, c := range p.comment.List {\n+\t\t\tsize += len(c.Text)\n+\t\t}\n+\t\tp.nextComment()\n \t}\n+\treturn size\n+}\n+\n+// recordLine records the output line number for the next non-whitespace\n+// token in *linePtr. It is used to compute an accurate line number for a\n+// formatted construct, independent of pending (not yet emitted) whitespace\n+// or comments.\n+//\n+func (p *printer) recordLine(linePtr *int) {\n+\tp.linePtr = linePtr\n+}\n+\n+// linesFrom returns the number of output lines between the current\n+// output line and the line argument, ignoring any pending (not yet\n+// emitted) whitespace or comments. It is used to compute an accurate\n+// size (in number of lines) for a formatted construct.\n+//\n+func (p *printer) linesFrom(line int) int {\n+\treturn p.out.Line - line\n }\n \n func (p *printer) posFor(pos token.Pos) token.Position {\n@@ -675,10 +727,14 @@ func (p *printer) intersperseComments(next token.Position, tok token.Token) (wro\n \n \tif last != nil {\n \t\t// if the last comment is a /*-style comment and the next item\n-\t\t// follows on the same line but is not a comma or a \"closing\"\n-\t\t// token, add an extra blank for separation\n-\t\tif last.Text[1] == '*' && p.lineFor(last.Pos()) == next.Line && tok != token.COMMA &&\n-\t\t\ttok != token.RPAREN && tok != token.RBRACK && tok != token.RBRACE {\n+\t\t// follows on the same line but is not a comma, and not a \"closing\"\n+\t\t// token immediately following its corresponding \"opening\" token,\n+\t\t// add an extra blank for separation unless explicitly disabled\n+\t\tif p.mode&noExtraBlank == 0 &&\n+\t\t\tlast.Text[1] == '*' && p.lineFor(last.Pos()) == next.Line &&\n+\t\t\ttok != token.COMMA &&\n+\t\t\t(tok != token.RPAREN || p.prevOpen == token.LPAREN) &&\n+\t\t\t(tok != token.RBRACK || p.prevOpen == token.LBRACK) {\n \t\t\tp.writeByte(' ', 1)\n \t\t}\n \t\t// ensure that there is a line break after a //-style comment,\n@@ -735,12 +791,8 @@ func (p *printer) writeWhitespace(n int) {\n \t}\n \n \t// shift remaining entries down\n-\ti := 0\n-\tfor ; n < len(p.wsbuf); n++ {\n-\t\tp.wsbuf[i] = p.wsbuf[n]\n-\t\ti++\n-\t}\n-\tp.wsbuf = p.wsbuf[0:i]\n+\tl := copy(p.wsbuf, p.wsbuf[n:])\n+\tp.wsbuf = p.wsbuf[:l]\n }\n \n // ----------------------------------------------------------------------------\n@@ -790,6 +842,17 @@ func (p *printer) print(args ...interface{}) {\n \t\tvar isLit bool\n \t\tvar impliedSemi bool // value for p.impliedSemi after this arg\n \n+\t\t// record previous opening token, if any\n+\t\tswitch p.lastTok {\n+\t\tcase token.ILLEGAL:\n+\t\t\t// ignore (white space)\n+\t\tcase token.LPAREN, token.LBRACK:\n+\t\t\tp.prevOpen = p.lastTok\n+\t\tdefault:\n+\t\t\t// other tokens followed any opening token\n+\t\t\tp.prevOpen = token.ILLEGAL\n+\t\t}\n+\n \t\tswitch x := arg.(type) {\n \t\tcase pmode:\n \t\t\t// toggle printer mode\n@@ -899,19 +962,17 @@ func (p *printer) print(args ...interface{}) {\n \t\t\t}\n \t\t}\n \n+\t\t// the next token starts now - record its line number if requested\n+\t\tif p.linePtr != nil {\n+\t\t\t*p.linePtr = p.out.Line\n+\t\t\tp.linePtr = nil\n+\t\t}\n+\n \t\tp.writeString(next, data, isLit)\n \t\tp.impliedSemi = impliedSemi\n \t}\n }\n \n-// commentBefore returns true iff the current comment group occurs\n-// before the next position in the source code and printing it does\n-// not introduce implicit semicolons.\n-//\n-func (p *printer) commentBefore(next token.Position) (result bool) {\n-\treturn p.commentOffset < next.Offset && (!p.impliedSemi || !p.commentNewline)\n-}\n-\n // flush prints any pending comments and whitespace occurring textually\n // before the position of the next token tok. The flush result indicates\n // if a newline was written or if a formfeed was dropped from the whitespace"}, {"sha": "306928a69a26af9691dc2bcbe281263ecd3f1760", "filename": "libgo/go/go/printer/printer_test.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -63,7 +63,7 @@ func format(src []byte, mode checkMode) ([]byte, error) {\n \t\treturn nil, fmt.Errorf(\"print: %s\", err)\n \t}\n \n-\t// make sure formated output is syntactically correct\n+\t// make sure formatted output is syntactically correct\n \tres := buf.Bytes()\n \tif _, err := parser.ParseFile(fset, \"\", res, 0); err != nil {\n \t\treturn nil, fmt.Errorf(\"re-parse: %s\\n%s\", err, buf.Bytes())\n@@ -179,7 +179,7 @@ func check(t *testing.T, source, golden string, mode checkMode) {\n \t\t// test running past time out\n \t\tt.Errorf(\"%s: running too slowly\", source)\n \tcase <-cc:\n-\t\t// test finished within alloted time margin\n+\t\t// test finished within allotted time margin\n \t}\n }\n \n@@ -212,7 +212,7 @@ func TestFiles(t *testing.T) {\n \t}\n }\n \n-// TestLineComments, using a simple test case, checks that consequtive line\n+// TestLineComments, using a simple test case, checks that consecutive line\n // comments are properly terminated with a newline even if the AST position\n // information is incorrect.\n //"}, {"sha": "b1af7958a96fd93e12ea9b3b181006011030dba5", "filename": "libgo/go/go/printer/testdata/comments.golden", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments.golden?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -494,16 +494,21 @@ func _() {\n func _( /* this */ x /* is */ /* an */ int) {\n }\n \n-func _( /* no params */)\t{}\n+func _( /* no params - extra blank before and after comment */ )\t{}\n+func _(a, b int /* params - no extra blank after comment */)\t\t{}\n+\n+func _()\t{ f( /* no args - extra blank before and after comment */ ) }\n+func _()\t{ f(a, b /* args - no extra blank after comment */) }\n \n func _() {\n-\tf( /* no args */)\n+\tf( /* no args - extra blank before and after comment */ )\n+\tf(a, b /* args - no extra blank after comment */)\n }\n \n func ( /* comment1 */ T /* comment2 */) _()\t{}\n \n-func _() { /* one-line functions with comments are formatted as multi-line functions */\n-}\n+func _()\t{ /* \"short-ish one-line functions with comments are formatted as multi-line functions */ }\n+func _()\t{ x := 0; /* comment */ y = x /* comment */ }\n \n func _() {\n \t_ = 0"}, {"sha": "983e2b2c97e25a54bd0b96ba1d7e7a05985ebeb0", "filename": "libgo/go/go/printer/testdata/comments.input", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments.input", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments.input", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments.input?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -500,15 +500,21 @@ func _() {\n func _(/* this */x/* is *//* an */ int) {\n }\n \n-func _(/* no params */) {}\n+func _(/* no params - extra blank before and after comment */) {}\n+func _(a, b int /* params - no extra blank after comment */) {}\n+\n+func _() { f(/* no args - extra blank before and after comment */) }\n+func _() { f(a, b /* args - no extra blank after comment */) }\n \n func _() {\n-\tf(/* no args */)\n+\tf(/* no args - extra blank before and after comment */)\n+\tf(a, b /* args - no extra blank after comment */)\n }\n \n func (/* comment1 */ T /* comment2 */) _() {}\n \n-func _() { /* one-line functions with comments are formatted as multi-line functions */ }\n+func _() { /* \"short-ish one-line functions with comments are formatted as multi-line functions */ }\n+func _() { x := 0; /* comment */ y = x /* comment */ }\n \n func _() {\n \t_ = 0"}, {"sha": "7676a26c1259eec0a56ca1a3c2930bc593f86de6", "filename": "libgo/go/go/printer/testdata/comments2.golden", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments2.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments2.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments2.golden?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -77,3 +77,29 @@ func main() {\n \t\tprintln(\"test\")\n \t}\n }\n+\n+func issue5623() {\n+L:\n+\t_ = yyyyyyyyyyyyyyyy\t\t\t// comment - should be aligned\n+\t_ = xxxxxxxxxxxxxxxxxxxxxxxxxxxx\t/* comment */\n+\n+\t_ = yyyyyyyyyyyyyyyy\t\t\t/* comment - should be aligned */\n+\t_ = xxxxxxxxxxxxxxxxxxxxxxxxxxxx\t// comment\n+\n+LLLLLLL:\n+\t_ = yyyyyyyyyyyyyyyy\t\t\t// comment - should be aligned\n+\t_ = xxxxxxxxxxxxxxxxxxxxxxxxxxxx\t// comment\n+\n+LL:\n+LLLLL:\n+\t_ = xxxxxxxxxxxxxxxxxxxxxxxxxxxx\t/* comment */\n+\t_ = yyyyyyyyyyyyyyyy\t\t\t/* comment - should be aligned */\n+\n+\t_ = xxxxxxxxxxxxxxxxxxxxxxxxxxxx\t// comment\n+\t_ = yyyyyyyyyyyyyyyy\t\t\t// comment - should be aligned\n+\n+\t// test case from issue\n+label:\n+\tmask := uint64(1)<<c - 1\t\t// Allocation mask\n+\tused := atomic.LoadUint64(&h.used)\t// Current allocations\n+}"}, {"sha": "4a055c82772886a0b2ea165d7b2abc987e458235", "filename": "libgo/go/go/printer/testdata/comments2.input", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments2.input", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments2.input", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fcomments2.input?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -76,4 +76,30 @@ prints test 5 times\n    for i := 0; i < 5; i++ {\n       println(\"test\")\n    }\n-}\n\\ No newline at end of file\n+}\n+\n+func issue5623() {\n+L:\n+   _ = yyyyyyyyyyyyyyyy // comment - should be aligned\n+   _ = xxxxxxxxxxxxxxxxxxxxxxxxxxxx /* comment */\n+\n+   _ = yyyyyyyyyyyyyyyy /* comment - should be aligned */\n+   _ = xxxxxxxxxxxxxxxxxxxxxxxxxxxx // comment\n+\n+LLLLLLL:\n+   _ = yyyyyyyyyyyyyyyy // comment - should be aligned\n+   _ = xxxxxxxxxxxxxxxxxxxxxxxxxxxx // comment\n+\n+LL:\n+LLLLL:\n+   _ = xxxxxxxxxxxxxxxxxxxxxxxxxxxx /* comment */\n+   _ = yyyyyyyyyyyyyyyy /* comment - should be aligned */\n+\n+   _ = xxxxxxxxxxxxxxxxxxxxxxxxxxxx // comment\n+   _ = yyyyyyyyyyyyyyyy // comment - should be aligned\n+\n+// test case from issue\n+label:\n+   mask := uint64(1)<<c - 1 // Allocation mask\n+   used := atomic.LoadUint64(&h.used) // Current allocations\n+}"}, {"sha": "a27f21fc8cef86f9ee788762d1f21cc52949ea19", "filename": "libgo/go/go/printer/testdata/declarations.golden", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.golden?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -397,6 +397,21 @@ func _() {\n \t}\n }\n \n+// use the formatted output rather than the input to decide when to align\n+// (was issue 4505)\n+const (\n+\tshort\t\t= 2 * (1 + 2)\n+\taMuchLongerName\t= 3\n+)\n+\n+var (\n+\tshort\t\t= X{}\n+\taMuchLongerName\t= X{}\n+\n+\tx1\t= X{}\t// foo\n+\tx2\t= X{}\t// foo\n+)\n+\n func _() {\n \ttype (\n \t\txxxxxx\tint\n@@ -723,7 +738,8 @@ func _() int {\n }\n \n // making function declarations safe for new semicolon rules\n-func _() { /* multi-line func because of comment */\n+func _()\t{ /* single-line function because of \"short-ish\" comment */ }\n+func _() { /* multi-line function because of \"long-ish\" comment - much more comment text is following here */ /* and more */\n }\n \n func _() {"}, {"sha": "d9951d3865fe4ccb7e42cf4855c7def9860303a3", "filename": "libgo/go/go/printer/testdata/declarations.input", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.input", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.input", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Ftestdata%2Fdeclarations.input?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -409,6 +409,24 @@ func _() {\n \t}\n }\n \n+// use the formatted output rather than the input to decide when to align\n+// (was issue 4505)\n+const (\n+\tshort = 2 * (\n+\t1 + 2)\n+\taMuchLongerName = 3\n+)\n+\n+var (\n+\tshort = X{\n+\t}\n+\taMuchLongerName = X{}\n+\n+\tx1 = X{} // foo\n+\tx2 = X{\n+\t} // foo\n+)\n+\n func _() {\n \ttype (\n \t\txxxxxx int\n@@ -737,7 +755,8 @@ func _() int {\n \n \n // making function declarations safe for new semicolon rules\n-func _() { /* multi-line func because of comment */ }\n+func _() { /* single-line function because of \"short-ish\" comment */ }\n+func _() { /* multi-line function because of \"long-ish\" comment - much more comment text is following here */ /* and more */ }\n \n func _() {\n /* multi-line func because block is on multiple lines */ }"}, {"sha": "cec82ea10efa52bde92a290062f57cfeb0418974", "filename": "libgo/go/go/scanner/scanner.go", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -148,11 +148,14 @@ func (s *Scanner) interpretLineComment(text []byte) {\n \t\t// get filename and line number, if any\n \t\tif i := bytes.LastIndex(text, []byte{':'}); i > 0 {\n \t\t\tif line, err := strconv.Atoi(string(text[i+1:])); err == nil && line > 0 {\n-\t\t\t\t// valid //line filename:line comment;\n-\t\t\t\tfilename := filepath.Clean(string(text[len(prefix):i]))\n-\t\t\t\tif !filepath.IsAbs(filename) {\n-\t\t\t\t\t// make filename relative to current directory\n-\t\t\t\t\tfilename = filepath.Join(s.dir, filename)\n+\t\t\t\t// valid //line filename:line comment\n+\t\t\t\tfilename := string(bytes.TrimSpace(text[len(prefix):i]))\n+\t\t\t\tif filename != \"\" {\n+\t\t\t\t\tfilename = filepath.Clean(filename)\n+\t\t\t\t\tif !filepath.IsAbs(filename) {\n+\t\t\t\t\t\t// make filename relative to current directory\n+\t\t\t\t\t\tfilename = filepath.Join(s.dir, filename)\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t// update scanner position\n \t\t\t\ts.file.AddLineInfo(s.lineOffset+len(text)+1, filename, line) // +len(text)+1 since comment applies to next line"}, {"sha": "fc450d8a6eb0db6dd854f116c3800d5ccfcc7ffa", "filename": "libgo/go/go/scanner/scanner_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -493,9 +493,9 @@ var segments = []segment{\n \t{\"\\nline3  //line File1.go:100\", filepath.Join(\"dir\", \"TestLineComments\"), 3}, // bad line comment, ignored\n \t{\"\\nline4\", filepath.Join(\"dir\", \"TestLineComments\"), 4},\n \t{\"\\n//line File1.go:100\\n  line100\", filepath.Join(\"dir\", \"File1.go\"), 100},\n+\t{\"\\n//line  \\t :42\\n  line1\", \"\", 42},\n \t{\"\\n//line File2.go:200\\n  line200\", filepath.Join(\"dir\", \"File2.go\"), 200},\n-\t{\"\\n//line :1\\n  line1\", \"dir\", 1},\n-\t{\"\\n//line foo:42\\n  line42\", filepath.Join(\"dir\", \"foo\"), 42},\n+\t{\"\\n//line foo\\t:42\\n  line42\", filepath.Join(\"dir\", \"foo\"), 42},\n \t{\"\\n //line foo:42\\n  line44\", filepath.Join(\"dir\", \"foo\"), 44},           // bad line comment, ignored\n \t{\"\\n//line foo 42\\n  line46\", filepath.Join(\"dir\", \"foo\"), 46},            // bad line comment, ignored\n \t{\"\\n//line foo:42 extra text\\n  line48\", filepath.Join(\"dir\", \"foo\"), 48}, // bad line comment, ignored"}, {"sha": "b7e359930a4ca59e2f3445f01a68bcad2cc984c7", "filename": "libgo/go/hash/crc32/crc32_amd64x.go", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhash%2Fcrc32%2Fcrc32_amd64x.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhash%2Fcrc32%2Fcrc32_amd64x.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhash%2Fcrc32%2Fcrc32_amd64x.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build amd64 amd64p32\n+\n package crc32\n \n // This file contains the code to call the SSE 4.2 version of the Castagnoli", "previous_filename": "libgo/go/hash/crc32/crc32_amd64.go"}, {"sha": "d65d340073d8291edeed12ad9e4c2fa4e6af7db1", "filename": "libgo/go/html/template/attr.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fattr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fattr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fattr.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -90,7 +90,7 @@ var attrTypeMap = map[string]contentType{\n \t\"name\":            contentTypePlain,\n \t\"novalidate\":      contentTypeUnsafe,\n \t// Skip handler names from\n-\t// http://www.w3.org/TR/html5/Overview.html#event-handlers-on-elements-document-objects-and-window-objects\n+\t// http://www.w3.org/TR/html5/webappapis.html#event-handlers-on-elements,-document-objects,-and-window-objects\n \t// since we have special handling in attrType.\n \t\"open\":        contentTypePlain,\n \t\"optimum\":     contentTypePlain,\n@@ -160,7 +160,7 @@ func attrType(name string) contentType {\n \n \t// Heuristics to prevent \"javascript:...\" injection in custom\n \t// data attributes and custom attributes like g:tweetUrl.\n-\t// http://www.w3.org/TR/html5/elements.html#embedding-custom-non-visible-data-with-the-data-attributes:\n+\t// http://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes\n \t// \"Custom data attributes are intended to store custom data\n \t//  private to the page or application, for which there are no\n \t//  more appropriate attributes or elements.\""}, {"sha": "3715ed5c93805f8dbb8222be2e5142154a3872a5", "filename": "libgo/go/html/template/content.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontent.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontent.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontent.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -16,7 +16,8 @@ type (\n \t//   2. The CSS3 rule production, such as `a[href=~\"https:\"].foo#bar`.\n \t//   3. CSS3 declaration productions, such as `color: red; margin: 2px`.\n \t//   4. The CSS3 value production, such as `rgba(0, 0, 255, 127)`.\n-\t// See http://www.w3.org/TR/css3-syntax/#style\n+\t// See http://www.w3.org/TR/css3-syntax/#parsing and\n+\t// https://web.archive.org/web/20090211114933/http://w3.org/TR/css3-syntax#style\n \tCSS string\n \n \t// HTML encapsulates a known safe HTML document fragment."}, {"sha": "59e794d6861f058cd6fa4a98e40c23b6c9657356", "filename": "libgo/go/html/template/context.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontext.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontext.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontext.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -13,7 +13,7 @@ import (\n //\n // The zero value of type context is the start context for a template that\n // produces an HTML fragment as defined at\n-// http://www.w3.org/TR/html5/the-end.html#parsing-html-fragments\n+// http://www.w3.org/TR/html5/syntax.html#the-end\n // where the context element is null.\n type context struct {\n \tstate   state\n@@ -96,7 +96,7 @@ const (\n \t// stateHTMLCmt occurs inside an <!-- HTML comment -->.\n \tstateHTMLCmt\n \t// stateRCDATA occurs inside an RCDATA element (<textarea> or <title>)\n-\t// as described at http://dev.w3.org/html5/spec/syntax.html#elements-0\n+\t// as described at http://www.w3.org/TR/html5/syntax.html#elements-0\n \tstateRCDATA\n \t// stateAttr occurs inside an HTML attribute whose content is text.\n \tstateAttr"}, {"sha": "4e379828d4c33b5cfd86083a4e5c2a85ddccaad5", "filename": "libgo/go/html/template/escape.go", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -40,10 +40,14 @@ func escapeTemplates(tmpl *Template, names ...string) error {\n \t\t\t}\n \t\t\treturn err\n \t\t}\n-\t\ttmpl.escaped = true\n-\t\ttmpl.Tree = tmpl.text.Tree\n \t}\n \te.commit()\n+\tfor _, name := range names {\n+\t\tif t := tmpl.set[name]; t != nil {\n+\t\t\tt.escaped = true\n+\t\t\tt.Tree = t.text.Tree\n+\t\t}\n+\t}\n \treturn nil\n }\n \n@@ -207,6 +211,18 @@ func (e *escaper) escapeAction(c context, n *parse.ActionNode) context {\n \treturn c\n }\n \n+// allIdents returns the names of the identifiers under the Ident field of the node,\n+// which might be a singleton (Identifier) or a slice (Field).\n+func allIdents(node parse.Node) []string {\n+\tswitch node := node.(type) {\n+\tcase *parse.IdentifierNode:\n+\t\treturn []string{node.Ident}\n+\tcase *parse.FieldNode:\n+\t\treturn node.Ident\n+\t}\n+\tpanic(\"unidentified node type in allIdents\")\n+}\n+\n // ensurePipelineContains ensures that the pipeline has commands with\n // the identifiers in s in order.\n // If the pipeline already has some of the sanitizers, do not interfere.\n@@ -229,27 +245,31 @@ func ensurePipelineContains(p *parse.PipeNode, s []string) {\n \t\tidents = p.Cmds[i+1:]\n \t}\n \tdups := 0\n-\tfor _, id := range idents {\n-\t\tif escFnsEq(s[dups], (id.Args[0].(*parse.IdentifierNode)).Ident) {\n-\t\t\tdups++\n-\t\t\tif dups == len(s) {\n-\t\t\t\treturn\n+\tfor _, idNode := range idents {\n+\t\tfor _, ident := range allIdents(idNode.Args[0]) {\n+\t\t\tif escFnsEq(s[dups], ident) {\n+\t\t\t\tdups++\n+\t\t\t\tif dups == len(s) {\n+\t\t\t\t\treturn\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n \tnewCmds := make([]*parse.CommandNode, n-len(idents), n+len(s)-dups)\n \tcopy(newCmds, p.Cmds)\n \t// Merge existing identifier commands with the sanitizers needed.\n-\tfor _, id := range idents {\n-\t\tpos := id.Args[0].Position()\n-\t\ti := indexOfStr((id.Args[0].(*parse.IdentifierNode)).Ident, s, escFnsEq)\n-\t\tif i != -1 {\n-\t\t\tfor _, name := range s[:i] {\n-\t\t\t\tnewCmds = appendCmd(newCmds, newIdentCmd(name, pos))\n+\tfor _, idNode := range idents {\n+\t\tpos := idNode.Args[0].Position()\n+\t\tfor _, ident := range allIdents(idNode.Args[0]) {\n+\t\t\ti := indexOfStr(ident, s, escFnsEq)\n+\t\t\tif i != -1 {\n+\t\t\t\tfor _, name := range s[:i] {\n+\t\t\t\t\tnewCmds = appendCmd(newCmds, newIdentCmd(name, pos))\n+\t\t\t\t}\n+\t\t\t\ts = s[i+1:]\n \t\t\t}\n-\t\t\ts = s[i+1:]\n \t\t}\n-\t\tnewCmds = appendCmd(newCmds, id)\n+\t\tnewCmds = appendCmd(newCmds, idNode)\n \t}\n \t// Create any remaining sanitizers.\n \tfor _, name := range s {\n@@ -664,7 +684,7 @@ func contextAfterText(c context, s []byte) (context, int) {\n \t\ti = len(s)\n \t}\n \tif c.delim == delimSpaceOrTagEnd {\n-\t\t// http://www.w3.org/TR/html5/tokenization.html#attribute-value-unquoted-state\n+\t\t// http://www.w3.org/TR/html5/syntax.html#attribute-value-(unquoted)-state\n \t\t// lists the runes below as error characters.\n \t\t// Error out because HTML parsers may differ on whether\n \t\t// \"<a id= onclick=f(\"     ends inside id's or onclick's value,"}, {"sha": "3ccf93ece01877a2563f47702ad83f7bb919eefc", "filename": "libgo/go/html/template/escape_test.go", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -1649,6 +1649,38 @@ func TestEmptyTemplate(t *testing.T) {\n \t}\n }\n \n+type Issue7379 int\n+\n+func (Issue7379) SomeMethod(x int) string {\n+\treturn fmt.Sprintf(\"<%d>\", x)\n+}\n+\n+// This is a test for issue 7379: type assertion error caused panic, and then\n+// the code to handle the panic breaks escaping. It's hard to see the second\n+// problem once the first is fixed, but its fix is trivial so we let that go. See\n+// the discussion for issue 7379.\n+func TestPipeToMethodIsEscaped(t *testing.T) {\n+\ttmpl := Must(New(\"x\").Parse(\"<html>{{0 | .SomeMethod}}</html>\\n\"))\n+\ttryExec := func() string {\n+\t\tdefer func() {\n+\t\t\tpanicValue := recover()\n+\t\t\tif panicValue != nil {\n+\t\t\t\tt.Errorf(\"panicked: %v\\n\", panicValue)\n+\t\t\t}\n+\t\t}()\n+\t\tvar b bytes.Buffer\n+\t\ttmpl.Execute(&b, Issue7379(0))\n+\t\treturn b.String()\n+\t}\n+\tfor i := 0; i < 3; i++ {\n+\t\tstr := tryExec()\n+\t\tconst expect = \"<html>&lt;0&gt;</html>\\n\"\n+\t\tif str != expect {\n+\t\t\tt.Errorf(\"expected %q got %q\", expect, str)\n+\t\t}\n+\t}\n+}\n+\n func BenchmarkEscapedExecute(b *testing.B) {\n \ttmpl := Must(New(\"t\").Parse(`<a onclick=\"alert('{{.}}')\">{{.}}</a>`))\n \tvar buf bytes.Buffer"}, {"sha": "9c069efd1d9a28393886eac1e2c284297643d0e5", "filename": "libgo/go/html/template/html.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fhtml.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fhtml.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fhtml.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -50,12 +50,12 @@ func htmlEscaper(args ...interface{}) string {\n // htmlReplacementTable contains the runes that need to be escaped\n // inside a quoted attribute value or in a text node.\n var htmlReplacementTable = []string{\n-\t// http://www.w3.org/TR/html5/tokenization.html#attribute-value-unquoted-state: \"\n+\t// http://www.w3.org/TR/html5/syntax.html#attribute-value-(unquoted)-state\n \t// U+0000 NULL Parse error. Append a U+FFFD REPLACEMENT\n \t// CHARACTER character to the current attribute's value.\n \t// \"\n \t// and similarly\n-\t// http://www.w3.org/TR/html5/tokenization.html#before-attribute-value-state\n+\t// http://www.w3.org/TR/html5/syntax.html#before-attribute-value-state\n \t0:    \"\\uFFFD\",\n \t'\"':  \"&#34;\",\n \t'&':  \"&amp;\","}, {"sha": "999a61ed078a30f74001c49ddb7727b5bd48c12c", "filename": "libgo/go/html/template/js.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fjs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Fjs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fjs.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -99,7 +99,7 @@ func nextJSCtx(s []byte, preceding jsCtx) jsCtx {\n \treturn jsCtxDivOp\n }\n \n-// regexPrecederKeywords is a set of reserved JS keywords that can precede a\n+// regexpPrecederKeywords is a set of reserved JS keywords that can precede a\n // regular expression in JS source.\n var regexpPrecederKeywords = map[string]bool{\n \t\"break\":      true,"}, {"sha": "d389658979aa4c045fa7a291c999340dd9a2aad3", "filename": "libgo/go/html/template/template.go", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftemplate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftemplate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftemplate.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -62,6 +62,10 @@ func (t *Template) escape() error {\n \n // Execute applies a parsed template to the specified data object,\n // writing the output to wr.\n+// If an error occurs executing the template or writing its output,\n+// execution stops, but partial results may already have been written to\n+// the output writer.\n+// A template may be executed safely in parallel.\n func (t *Template) Execute(wr io.Writer, data interface{}) error {\n \tif err := t.escape(); err != nil {\n \t\treturn err\n@@ -71,6 +75,10 @@ func (t *Template) Execute(wr io.Writer, data interface{}) error {\n \n // ExecuteTemplate applies the template associated with t that has the given\n // name to the specified data object and writes the output to wr.\n+// If an error occurs executing the template or writing its output,\n+// execution stops, but partial results may already have been written to\n+// the output writer.\n+// A template may be executed safely in parallel.\n func (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) error {\n \ttmpl, err := t.lookupAndEscapeTemplate(name)\n \tif err != nil {"}, {"sha": "f53d873a53876d880f151e53d899918ae637af89", "filename": "libgo/go/image/jpeg/huffman.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Fjpeg%2Fhuffman.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Fjpeg%2Fhuffman.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fjpeg%2Fhuffman.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -37,6 +37,9 @@ func (d *decoder) ensureNBits(n int) error {\n \tfor d.b.n < n {\n \t\tc, err := d.r.ReadByte()\n \t\tif err != nil {\n+\t\t\tif err == io.EOF {\n+\t\t\t\treturn FormatError(\"short Huffman data\")\n+\t\t\t}\n \t\t\treturn err\n \t\t}\n \t\td.b.a = d.b.a<<8 | uint32(c)\n@@ -50,6 +53,9 @@ func (d *decoder) ensureNBits(n int) error {\n \t\tif c == 0xff {\n \t\t\tc, err = d.r.ReadByte()\n \t\t\tif err != nil {\n+\t\t\t\tif err == io.EOF {\n+\t\t\t\t\treturn FormatError(\"short Huffman data\")\n+\t\t\t\t}\n \t\t\t\treturn err\n \t\t\t}\n \t\t\tif c != 0x00 {"}, {"sha": "926bb043448d2d9927aa099a8cee37aca8933cbd", "filename": "libgo/go/image/jpeg/reader_test.go", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Fjpeg%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Fjpeg%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fjpeg%2Freader_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -28,6 +28,7 @@ func TestDecodeProgressive(t *testing.T) {\n \t\t\"../testdata/video-001.q50.444\",\n \t\t\"../testdata/video-005.gray.q50\",\n \t\t\"../testdata/video-005.gray.q50.2x2\",\n+\t\t\"../testdata/video-001.separate.dc.progression\",\n \t}\n \tfor _, tc := range testCases {\n \t\tm0, err := decodeFile(tc + \".jpeg\")\n@@ -44,6 +45,12 @@ func TestDecodeProgressive(t *testing.T) {\n \t\t\tt.Errorf(\"%s: bounds differ: %v and %v\", tc, m0.Bounds(), m1.Bounds())\n \t\t\tcontinue\n \t\t}\n+\t\t// All of the video-*.jpeg files are 150x103.\n+\t\tif m0.Bounds() != image.Rect(0, 0, 150, 103) {\n+\t\t\tt.Errorf(\"%s: bad bounds: %v\", tc, m0.Bounds())\n+\t\t\tcontinue\n+\t\t}\n+\n \t\tswitch m0 := m0.(type) {\n \t\tcase *image.YCbCr:\n \t\t\tm1 := m1.(*image.YCbCr)\n@@ -84,18 +91,15 @@ func decodeFile(filename string) (image.Image, error) {\n \n // check checks that the two pix data are equal, within the given bounds.\n func check(bounds image.Rectangle, pix0, pix1 []byte, stride0, stride1 int) error {\n-\tif len(pix0) != len(pix1) {\n-\t\treturn fmt.Errorf(\"len(pix) %d and %d differ\", len(pix0), len(pix1))\n-\t}\n-\tif stride0 != stride1 {\n-\t\treturn fmt.Errorf(\"strides %d and %d differ\", stride0, stride1)\n+\tif stride0 <= 0 || stride0%8 != 0 {\n+\t\treturn fmt.Errorf(\"bad stride %d\", stride0)\n \t}\n-\tif stride0%8 != 0 {\n-\t\treturn fmt.Errorf(\"stride %d is not a multiple of 8\", stride0)\n+\tif stride1 <= 0 || stride1%8 != 0 {\n+\t\treturn fmt.Errorf(\"bad stride %d\", stride1)\n \t}\n \t// Compare the two pix data, one 8x8 block at a time.\n-\tfor y := 0; y < len(pix0)/stride0; y += 8 {\n-\t\tfor x := 0; x < stride0; x += 8 {\n+\tfor y := 0; y < len(pix0)/stride0 && y < len(pix1)/stride1; y += 8 {\n+\t\tfor x := 0; x < stride0 && x < stride1; x += 8 {\n \t\t\tif x >= bounds.Max.X || y >= bounds.Max.Y {\n \t\t\t\t// We don't care if the two pix data differ if the 8x8 block is\n \t\t\t\t// entirely outside of the image's bounds. For example, this can\n@@ -108,8 +112,9 @@ func check(bounds image.Rectangle, pix0, pix1 []byte, stride0, stride1 int) erro\n \n \t\t\tfor j := 0; j < 8; j++ {\n \t\t\t\tfor i := 0; i < 8; i++ {\n-\t\t\t\t\tindex := (y+j)*stride0 + (x + i)\n-\t\t\t\t\tif pix0[index] != pix1[index] {\n+\t\t\t\t\tindex0 := (y+j)*stride0 + (x + i)\n+\t\t\t\t\tindex1 := (y+j)*stride1 + (x + i)\n+\t\t\t\t\tif pix0[index0] != pix1[index1] {\n \t\t\t\t\t\treturn fmt.Errorf(\"blocks at (%d, %d) differ:\\n%sand\\n%s\", x, y,\n \t\t\t\t\t\t\tpixString(pix0, stride0, x, y),\n \t\t\t\t\t\t\tpixString(pix1, stride1, x, y),"}, {"sha": "559235d51272a3f0f93bc1cc1736ad6e9ebd9dfc", "filename": "libgo/go/image/jpeg/scan.go", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Fjpeg%2Fscan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Fjpeg%2Fscan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fjpeg%2Fscan.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -141,25 +141,30 @@ func (d *decoder) processSOS(n int) error {\n \t\t\t\tfor j := 0; j < d.comp[compIndex].h*d.comp[compIndex].v; j++ {\n \t\t\t\t\t// The blocks are traversed one MCU at a time. For 4:2:0 chroma\n \t\t\t\t\t// subsampling, there are four Y 8x8 blocks in every 16x16 MCU.\n+\t\t\t\t\t//\n \t\t\t\t\t// For a baseline 32x16 pixel image, the Y blocks visiting order is:\n \t\t\t\t\t//\t0 1 4 5\n \t\t\t\t\t//\t2 3 6 7\n \t\t\t\t\t//\n-\t\t\t\t\t// For progressive images, the DC data blocks (zigStart == 0) are traversed\n-\t\t\t\t\t// as above, but AC data blocks are traversed left to right, top to bottom:\n+\t\t\t\t\t// For progressive images, the interleaved scans (those with nComp > 1)\n+\t\t\t\t\t// are traversed as above, but non-interleaved scans are traversed left\n+\t\t\t\t\t// to right, top to bottom:\n \t\t\t\t\t//\t0 1 2 3\n \t\t\t\t\t//\t4 5 6 7\n+\t\t\t\t\t// Only DC scans (zigStart == 0) can be interleaved. AC scans must have\n+\t\t\t\t\t// only one component.\n \t\t\t\t\t//\n-\t\t\t\t\t// To further complicate matters, there is no AC data for any blocks that\n-\t\t\t\t\t// are inside the image at the MCU level but outside the image at the pixel\n-\t\t\t\t\t// level. For example, a 24x16 pixel 4:2:0 progressive image consists of\n-\t\t\t\t\t// two 16x16 MCUs. The earlier scans will process 8 Y blocks:\n+\t\t\t\t\t// To further complicate matters, for non-interleaved scans, there is no\n+\t\t\t\t\t// data for any blocks that are inside the image at the MCU level but\n+\t\t\t\t\t// outside the image at the pixel level. For example, a 24x16 pixel 4:2:0\n+\t\t\t\t\t// progressive image consists of two 16x16 MCUs. The interleaved scans\n+\t\t\t\t\t// will process 8 Y blocks:\n \t\t\t\t\t//\t0 1 4 5\n \t\t\t\t\t//\t2 3 6 7\n-\t\t\t\t\t// The later scans will process only 6 Y blocks:\n+\t\t\t\t\t// The non-interleaved scans will process only 6 Y blocks:\n \t\t\t\t\t//\t0 1 2\n \t\t\t\t\t//\t3 4 5\n-\t\t\t\t\tif zigStart == 0 {\n+\t\t\t\t\tif nComp != 1 {\n \t\t\t\t\t\tmx0, my0 = d.comp[compIndex].h*mx, d.comp[compIndex].v*my\n \t\t\t\t\t\tif h0 == 1 {\n \t\t\t\t\t\t\tmy0 += j"}, {"sha": "dfe2991024dce40327482a644c8a1070345c6c22", "filename": "libgo/go/image/png/reader.go", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Fpng%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Fpng%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Freader.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -505,8 +505,14 @@ func (d *decoder) decode() (image.Image, error) {\n \t}\n \n \t// Check for EOF, to verify the zlib checksum.\n-\tn, err := r.Read(pr[:1])\n-\tif err != io.EOF {\n+\tn := 0\n+\tfor i := 0; n == 0 && err == nil; i++ {\n+\t\tif i == 100 {\n+\t\t\treturn nil, io.ErrNoProgress\n+\t\t}\n+\t\tn, err = r.Read(pr[:1])\n+\t}\n+\tif err != nil && err != io.EOF {\n \t\treturn nil, FormatError(err.Error())\n \t}\n \tif n != 0 || d.idatLength != 0 {"}, {"sha": "107f0fa0cd25f5f4314eea453305db84db088b6f", "filename": "libgo/go/image/testdata/video-001.separate.dc.progression.jpeg", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Ftestdata%2Fvideo-001.separate.dc.progression.jpeg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Ftestdata%2Fvideo-001.separate.dc.progression.jpeg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Ftestdata%2Fvideo-001.separate.dc.progression.jpeg?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387"}, {"sha": "a1d493ef80980d72c08df0ca7b48a8a51b01e8f5", "filename": "libgo/go/image/testdata/video-001.separate.dc.progression.progressive.jpeg", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Ftestdata%2Fvideo-001.separate.dc.progression.progressive.jpeg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Ftestdata%2Fvideo-001.separate.dc.progression.progressive.jpeg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Ftestdata%2Fvideo-001.separate.dc.progression.progressive.jpeg?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387"}, {"sha": "23350d6dc127b6ddc775b3a80c19e134088488ba", "filename": "libgo/go/image/testdata/video-005.gray.gif", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Ftestdata%2Fvideo-005.gray.gif", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fimage%2Ftestdata%2Fvideo-005.gray.gif", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Ftestdata%2Fvideo-005.gray.gif?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387"}, {"sha": "022fdb676453949e197e7350824cb179ea114fdc", "filename": "libgo/go/io/io.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fio%2Fio.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fio%2Fio.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fio%2Fio.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -74,6 +74,7 @@ type Reader interface {\n // It returns the number of bytes written from p (0 <= n <= len(p))\n // and any error encountered that caused the write to stop early.\n // Write must return a non-nil error if it returns n < len(p).\n+// Write must not modify the slice data, even temporarily.\n type Writer interface {\n \tWrite(p []byte) (n int, err error)\n }"}, {"sha": "e26cc53e9eeb7cc8477a00247b177ffd9cea3a36", "filename": "libgo/go/io/multi.go", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fio%2Fmulti.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fio%2Fmulti.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fio%2Fmulti.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -29,7 +29,9 @@ func (mr *multiReader) Read(p []byte) (n int, err error) {\n // inputs have returned EOF, Read will return EOF.  If any of the readers\n // return a non-nil, non-EOF error, Read will return that error.\n func MultiReader(readers ...Reader) Reader {\n-\treturn &multiReader{readers}\n+\tr := make([]Reader, len(readers))\n+\tcopy(r, readers)\n+\treturn &multiReader{r}\n }\n \n type multiWriter struct {\n@@ -53,5 +55,7 @@ func (t *multiWriter) Write(p []byte) (n int, err error) {\n // MultiWriter creates a writer that duplicates its writes to all the\n // provided writers, similar to the Unix tee(1) command.\n func MultiWriter(writers ...Writer) Writer {\n-\treturn &multiWriter{writers}\n+\tw := make([]Writer, len(writers))\n+\tcopy(w, writers)\n+\treturn &multiWriter{w}\n }"}, {"sha": "56c6769a9eb598cc8e1671c88848eb5eb2f85245", "filename": "libgo/go/io/multi_test.go", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fio%2Fmulti_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fio%2Fmulti_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fio%2Fmulti_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -9,6 +9,7 @@ import (\n \t\"crypto/sha1\"\n \t\"fmt\"\n \t. \"io\"\n+\t\"io/ioutil\"\n \t\"strings\"\n \t\"testing\"\n )\n@@ -86,3 +87,29 @@ func TestMultiWriter(t *testing.T) {\n \t\tt.Errorf(\"expected %q; got %q\", sourceString, sink.String())\n \t}\n }\n+\n+// Test that MultiReader copies the input slice and is insulated from future modification.\n+func TestMultiReaderCopy(t *testing.T) {\n+\tslice := []Reader{strings.NewReader(\"hello world\")}\n+\tr := MultiReader(slice...)\n+\tslice[0] = nil\n+\tdata, err := ioutil.ReadAll(r)\n+\tif err != nil || string(data) != \"hello world\" {\n+\t\tt.Errorf(\"ReadAll() = %q, %v, want %q, nil\", data, err, \"hello world\")\n+\t}\n+}\n+\n+// Test that MultiWriter copies the input slice and is insulated from future modification.\n+func TestMultiWriterCopy(t *testing.T) {\n+\tvar buf bytes.Buffer\n+\tslice := []Writer{&buf}\n+\tw := MultiWriter(slice...)\n+\tslice[0] = nil\n+\tn, err := w.Write([]byte(\"hello world\"))\n+\tif err != nil || n != 11 {\n+\t\tt.Errorf(\"Write(`hello world`) = %d, %v, want 11, nil\", n, err)\n+\t}\n+\tif buf.String() != \"hello world\" {\n+\t\tt.Errorf(\"buf.String() = %q, want %q\", buf.String(), \"hello world\")\n+\t}\n+}"}, {"sha": "5e09599162693d51a7d80702b98250ca17b39598", "filename": "libgo/go/log/syslog/syslog.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build !windows,!plan9\n+// +build !windows,!nacl,!plan9\n \n // Package syslog provides a simple interface to the system log\n // service. It can send messages to the syslog daemon using UNIX\n@@ -115,9 +115,10 @@ func New(priority Priority, tag string) (w *Writer, err error) {\n }\n \n // Dial establishes a connection to a log daemon by connecting to\n-// address raddr on the network net.  Each write to the returned\n+// address raddr on the specified network.  Each write to the returned\n // writer sends a log message with the given facility, severity and\n // tag.\n+// If network is empty, Dial will connect to the local syslog server.\n func Dial(network, raddr string, priority Priority, tag string) (*Writer, error) {\n \tif priority < 0 || priority > LOG_LOCAL7|LOG_DEBUG {\n \t\treturn nil, errors.New(\"log/syslog: invalid priority\")"}, {"sha": "24a460f6d9eaaa0b33348e4a1a1c51e946a9d09a", "filename": "libgo/go/log/syslog/syslog_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build !windows,!plan9\n+// +build !windows,!nacl,!plan9\n \n package syslog\n "}, {"sha": "f6d2f1b7a399ef89a1958b985dd8be6d9fd1e38c", "filename": "libgo/go/log/syslog/syslog_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build !windows,!plan9\n+// +build !windows,!nacl,!plan9\n \n package syslog\n "}, {"sha": "269949d616070b5e45f5238a612e9e9b620b8db7", "filename": "libgo/go/math/big/int.go", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fbig%2Fint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fbig%2Fint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fint.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -576,21 +576,22 @@ func (x *Int) BitLen() int {\n }\n \n // Exp sets z = x**y mod |m| (i.e. the sign of m is ignored), and returns z.\n-// If y <= 0, the result is 1; if m == nil or m == 0, z = x**y.\n+// If y <= 0, the result is 1 mod |m|; if m == nil or m == 0, z = x**y.\n // See Knuth, volume 2, section 4.6.3.\n func (z *Int) Exp(x, y, m *Int) *Int {\n-\tif y.neg || len(y.abs) == 0 {\n-\t\treturn z.SetInt64(1)\n+\tvar yWords nat\n+\tif !y.neg {\n+\t\tyWords = y.abs\n \t}\n-\t// y > 0\n+\t// y >= 0\n \n \tvar mWords nat\n \tif m != nil {\n \t\tmWords = m.abs // m.abs may be nil for m == 0\n \t}\n \n-\tz.abs = z.abs.expNN(x.abs, y.abs, mWords)\n-\tz.neg = len(z.abs) > 0 && x.neg && y.abs[0]&1 == 1 // 0 has no sign\n+\tz.abs = z.abs.expNN(x.abs, yWords, mWords)\n+\tz.neg = len(z.abs) > 0 && x.neg && len(yWords) > 0 && yWords[0]&1 == 1 // 0 has no sign\n \treturn z\n }\n "}, {"sha": "299dc72fb1a2e4cdeca0448454df853ec8c01aa3", "filename": "libgo/go/math/big/int_test.go", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fbig%2Fint_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fbig%2Fint_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fint_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -768,6 +768,19 @@ var expTests = []struct {\n \tx, y, m string\n \tout     string\n }{\n+\t// y <= 0\n+\t{\"0\", \"0\", \"\", \"1\"},\n+\t{\"1\", \"0\", \"\", \"1\"},\n+\t{\"-10\", \"0\", \"\", \"1\"},\n+\t{\"1234\", \"-1\", \"\", \"1\"},\n+\n+\t// m == 1\n+\t{\"0\", \"0\", \"1\", \"0\"},\n+\t{\"1\", \"0\", \"1\", \"0\"},\n+\t{\"-10\", \"0\", \"1\", \"0\"},\n+\t{\"1234\", \"-1\", \"1\", \"0\"},\n+\n+\t// misc\n \t{\"5\", \"-7\", \"\", \"1\"},\n \t{\"-5\", \"-7\", \"\", \"1\"},\n \t{\"5\", \"0\", \"\", \"1\"},"}, {"sha": "16a87f5c537480efaeab5ecfe2a36ba26e9af2b4", "filename": "libgo/go/math/big/nat.go", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -1233,10 +1233,15 @@ func (z nat) expNN(x, y, m nat) nat {\n \t\tz = nil\n \t}\n \n+\t// x**y mod 1 == 0\n+\tif len(m) == 1 && m[0] == 1 {\n+\t\treturn z.setWord(0)\n+\t}\n+\t// m == 0 || m > 1\n+\n+\t// x**0 == 1\n \tif len(y) == 0 {\n-\t\tz = z.make(1)\n-\t\tz[0] = 1\n-\t\treturn z\n+\t\treturn z.setWord(1)\n \t}\n \t// y > 0\n "}, {"sha": "a2ae53385c91512a7ace41dcb511e48d6ac43b5b", "filename": "libgo/go/math/big/nat_test.go", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fbig%2Fnat_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fbig%2Fnat_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fnat_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -437,20 +437,11 @@ func BenchmarkStringPiParallel(b *testing.B) {\n \tif x.decimalString() != pi {\n \t\tpanic(\"benchmark incorrect: conversion failed\")\n \t}\n-\tn := runtime.GOMAXPROCS(0)\n-\tm := b.N / n // n*m <= b.N due to flooring, but the error is neglibible (n is not very large)\n-\tc := make(chan int, n)\n-\tfor i := 0; i < n; i++ {\n-\t\tgo func() {\n-\t\t\tfor j := 0; j < m; j++ {\n-\t\t\t\tx.decimalString()\n-\t\t\t}\n-\t\t\tc <- 0\n-\t\t}()\n-\t}\n-\tfor i := 0; i < n; i++ {\n-\t\t<-c\n-\t}\n+\tb.RunParallel(func(pb *testing.PB) {\n+\t\tfor pb.Next() {\n+\t\t\tx.decimalString()\n+\t\t}\n+\t})\n }\n \n func BenchmarkScan10Base2(b *testing.B)     { ScanHelper(b, 2, 10, 10) }\n@@ -723,6 +714,12 @@ var expNNTests = []struct {\n \tx, y, m string\n \tout     string\n }{\n+\t{\"0\", \"0\", \"0\", \"1\"},\n+\t{\"0\", \"0\", \"1\", \"0\"},\n+\t{\"1\", \"1\", \"1\", \"0\"},\n+\t{\"2\", \"1\", \"1\", \"0\"},\n+\t{\"2\", \"2\", \"1\", \"0\"},\n+\t{\"10\", \"100000000000\", \"1\", \"0\"},\n \t{\"0x8000000000000000\", \"2\", \"\", \"0x40000000000000000000000000000000\"},\n \t{\"0x8000000000000000\", \"2\", \"6719\", \"4944\"},\n \t{\"0x8000000000000000\", \"3\", \"6719\", \"5447\"},\n@@ -750,7 +747,7 @@ func TestExpNN(t *testing.T) {\n \n \t\tz := nat(nil).expNN(x, y, m)\n \t\tif z.cmp(out) != 0 {\n-\t\t\tt.Errorf(\"#%d got %v want %v\", i, z, out)\n+\t\t\tt.Errorf(\"#%d got %s want %s\", i, z.decimalString(), out.decimalString())\n \t\t}\n \t}\n }"}, {"sha": "f0973b3902f19a4f89c3bc6a55f83272d0f6ec14", "filename": "libgo/go/math/big/rat.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fbig%2Frat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fbig%2Frat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Frat.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -47,7 +47,7 @@ func (z *Rat) SetFloat64(f float64) *Rat {\n \n \tshift := 52 - exp\n \n-\t// Optimisation (?): partially pre-normalise.\n+\t// Optimization (?): partially pre-normalise.\n \tfor mantissa&1 == 0 && shift > 0 {\n \t\tmantissa >>= 1\n \t\tshift--\n@@ -477,7 +477,7 @@ func (z *Rat) SetString(s string) (*Rat, bool) {\n \treturn z, true\n }\n \n-// String returns a string representation of z in the form \"a/b\" (even if b == 1).\n+// String returns a string representation of x in the form \"a/b\" (even if b == 1).\n func (x *Rat) String() string {\n \ts := \"/1\"\n \tif len(x.b.abs) != 0 {\n@@ -486,7 +486,7 @@ func (x *Rat) String() string {\n \treturn x.a.String() + s\n }\n \n-// RatString returns a string representation of z in the form \"a/b\" if b != 1,\n+// RatString returns a string representation of x in the form \"a/b\" if b != 1,\n // and in the form \"a\" if b == 1.\n func (x *Rat) RatString() string {\n \tif x.IsInt() {\n@@ -495,7 +495,7 @@ func (x *Rat) RatString() string {\n \treturn x.String()\n }\n \n-// FloatString returns a string representation of z in decimal form with prec\n+// FloatString returns a string representation of x in decimal form with prec\n // digits of precision after the decimal point and the last digit rounded.\n func (x *Rat) FloatString(prec int) string {\n \tif x.IsInt() {"}, {"sha": "f285646af7a8b9318b9decab32f93bde7dd6081b", "filename": "libgo/go/math/cmplx/cmath_test.go", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fcmplx%2Fcmath_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fcmplx%2Fcmath_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fcmath_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -656,6 +656,19 @@ func TestPolar(t *testing.T) {\n \t}\n }\n func TestPow(t *testing.T) {\n+\t// Special cases for Pow(0, c).\n+\tvar zero = complex(0, 0)\n+\tzeroPowers := [][2]complex128{\n+\t\t{0, 1 + 0i},\n+\t\t{1.5, 0 + 0i},\n+\t\t{-1.5, complex(math.Inf(0), 0)},\n+\t\t{-1.5 + 1.5i, Inf()},\n+\t}\n+\tfor _, zp := range zeroPowers {\n+\t\tif f := Pow(zero, zp[0]); f != zp[1] {\n+\t\t\tt.Errorf(\"Pow(%g, %g) = %g, want %g\", zero, zp[0], f, zp[1])\n+\t\t}\n+\t}\n \tvar a = complex(3.0, 3.0)\n \tfor i := 0; i < len(vc); i++ {\n \t\tif f := Pow(a, vc[i]); !cSoclose(pow[i], f, 4e-15) {"}, {"sha": "1630b879b88b0dbc97c4d5ef16a1815f40c66953", "filename": "libgo/go/math/cmplx/pow.go", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fcmplx%2Fpow.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fcmplx%2Fpow.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fpow.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -43,7 +43,25 @@ import \"math\"\n //    IEEE      -10,+10     30000       9.4e-15     1.5e-15\n \n // Pow returns x**y, the base-x exponential of y.\n+// For generalized compatibility with math.Pow:\n+//\tPow(0, \u00b10) returns 1+0i\n+//\tPow(0, c) for real(c)<0 returns Inf+0i if imag(c) is zero, otherwise Inf+Inf i.\n func Pow(x, y complex128) complex128 {\n+\tif x == 0 { // Guaranteed also true for x == -0.\n+\t\tr, i := real(y), imag(y)\n+\t\tswitch {\n+\t\tcase r == 0:\n+\t\t\treturn 1\n+\t\tcase r < 0:\n+\t\t\tif i == 0 {\n+\t\t\t\treturn complex(math.Inf(1), 0)\n+\t\t\t}\n+\t\t\treturn Inf()\n+\t\tcase r > 0:\n+\t\t\treturn 0\n+\t\t}\n+\t\tpanic(\"not reached\")\n+\t}\n \tmodulus := Abs(x)\n \tif modulus == 0 {\n \t\treturn complex(0, 0)"}, {"sha": "4ef6807addc9e1feed74a8c5738d6a5bc1e4f608", "filename": "libgo/go/math/cmplx/sqrt.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fcmplx%2Fsqrt.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Fcmplx%2Fsqrt.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fsqrt.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -54,6 +54,7 @@ import \"math\"\n //    IEEE      -10,+10   1,000,000     2.9e-16     6.1e-17\n \n // Sqrt returns the square root of x.\n+// The result r is chosen so that real(r) \u2265 0 and imag(r) has the same sign as imag(x).\n func Sqrt(x complex128) complex128 {\n \tif imag(x) == 0 {\n \t\tif real(x) == 0 {"}, {"sha": "3ffb5c4e5c64d2062e448e028146028aed940693", "filename": "libgo/go/math/rand/rand.go", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Frand%2Frand.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Frand%2Frand.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Frand%2Frand.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -60,6 +60,9 @@ func (r *Rand) Int63n(n int64) int64 {\n \tif n <= 0 {\n \t\tpanic(\"invalid argument to Int63n\")\n \t}\n+\tif n&(n-1) == 0 { // n is power of two, can mask\n+\t\treturn r.Int63() & (n - 1)\n+\t}\n \tmax := int64((1 << 63) - 1 - (1<<63)%uint64(n))\n \tv := r.Int63()\n \tfor v > max {\n@@ -74,6 +77,9 @@ func (r *Rand) Int31n(n int32) int32 {\n \tif n <= 0 {\n \t\tpanic(\"invalid argument to Int31n\")\n \t}\n+\tif n&(n-1) == 0 { // n is power of two, can mask\n+\t\treturn r.Int31() & (n - 1)\n+\t}\n \tmax := int32((1 << 31) - 1 - (1<<31)%uint32(n))\n \tv := r.Int31()\n \tfor v > max {\n@@ -95,10 +101,46 @@ func (r *Rand) Intn(n int) int {\n }\n \n // Float64 returns, as a float64, a pseudo-random number in [0.0,1.0).\n-func (r *Rand) Float64() float64 { return float64(r.Int63n(1<<53)) / (1 << 53) }\n+func (r *Rand) Float64() float64 {\n+\t// A clearer, simpler implementation would be:\n+\t//\treturn float64(r.Int63n(1<<53)) / (1<<53)\n+\t// However, Go 1 shipped with\n+\t//\treturn float64(r.Int63()) / (1 << 63)\n+\t// and we want to preserve that value stream.\n+\t//\n+\t// There is one bug in the value stream: r.Int63() may be so close\n+\t// to 1<<63 that the division rounds up to 1.0, and we've guaranteed\n+\t// that the result is always less than 1.0. To fix that, we treat the\n+\t// range as cyclic and map 1 back to 0. This is justified by observing\n+\t// that while some of the values rounded down to 0, nothing was\n+\t// rounding up to 0, so 0 was underrepresented in the results.\n+\t// Mapping 1 back to zero restores some balance.\n+\t// (The balance is not perfect because the implementation\n+\t// returns denormalized numbers for very small r.Int63(),\n+\t// and those steal from what would normally be 0 results.)\n+\t// The remapping only happens 1/2\u2075\u00b3 of the time, so most clients\n+\t// will not observe it anyway.\n+\tf := float64(r.Int63()) / (1 << 63)\n+\tif f == 1 {\n+\t\tf = 0\n+\t}\n+\treturn f\n+}\n \n // Float32 returns, as a float32, a pseudo-random number in [0.0,1.0).\n-func (r *Rand) Float32() float32 { return float32(r.Int31n(1<<24)) / (1 << 24) }\n+func (r *Rand) Float32() float32 {\n+\t// Same rationale as in Float64: we want to preserve the Go 1 value\n+\t// stream except we want to fix it not to return 1.0\n+\t// There is a double rounding going on here, but the argument for\n+\t// mapping 1 to 0 still applies: 0 was underrepresented before,\n+\t// so mapping 1 to 0 doesn't cause too many 0s.\n+\t// This only happens 1/2\u00b2\u2074 of the time (plus the 1/2\u2075\u00b3 of the time in Float64).\n+\tf := float32(r.Float64())\n+\tif f == 1 {\n+\t\tf = 0\n+\t}\n+\treturn f\n+}\n \n // Perm returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n).\n func (r *Rand) Perm(n int) []int {"}, {"sha": "ab0dc49b41128a46b8976b77bc4be1c10ec97dc7", "filename": "libgo/go/math/rand/rand_test.go", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Frand%2Frand_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Frand%2Frand_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Frand%2Frand_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -376,6 +376,13 @@ func BenchmarkFloat32(b *testing.B) {\n \t}\n }\n \n+func BenchmarkFloat64(b *testing.B) {\n+\tr := New(NewSource(1))\n+\tfor n := b.N; n > 0; n-- {\n+\t\tr.Float64()\n+\t}\n+}\n+\n func BenchmarkPerm3(b *testing.B) {\n \tr := New(NewSource(1))\n \tfor n := b.N; n > 0; n-- {"}, {"sha": "2b012af893c7f1184088e9001e1591f5097e9fcf", "filename": "libgo/go/math/rand/regress_test.go", "status": "added", "additions": 355, "deletions": 0, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Frand%2Fregress_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmath%2Frand%2Fregress_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Frand%2Fregress_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -0,0 +1,355 @@\n+// Copyright 2014 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that random number sequences generated by a specific seed\n+// do not change from version to version.\n+//\n+// Do NOT make changes to the golden outputs. If bugs need to be fixed\n+// in the underlying code, find ways to fix them that do not affect the\n+// outputs.\n+\n+package rand_test\n+\n+import (\n+\t\"flag\"\n+\t\"fmt\"\n+\t. \"math/rand\"\n+\t\"reflect\"\n+\t\"testing\"\n+)\n+\n+var printgolden = flag.Bool(\"printgolden\", false, \"print golden results for regression test\")\n+\n+func TestRegress(t *testing.T) {\n+\tvar int32s = []int32{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1}\n+\tvar int64s = []int64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<63 - 2, 1<<63 - 1}\n+\tvar permSizes = []int{0, 1, 5, 8, 9, 10, 16}\n+\tr := New(NewSource(0))\n+\n+\trv := reflect.ValueOf(r)\n+\tn := rv.NumMethod()\n+\tp := 0\n+\tif *printgolden {\n+\t\tfmt.Printf(\"var regressGolden = []interface{}{\\n\")\n+\t}\n+\tfor i := 0; i < n; i++ {\n+\t\tm := rv.Type().Method(i)\n+\t\tmv := rv.Method(i)\n+\t\tmt := mv.Type()\n+\t\tif mt.NumOut() == 0 {\n+\t\t\tcontinue\n+\t\t}\n+\t\tif mt.NumOut() != 1 {\n+\t\t\tt.Fatalf(\"unexpected result count for r.%s\", m.Name)\n+\t\t}\n+\t\tr.Seed(0)\n+\t\tfor repeat := 0; repeat < 20; repeat++ {\n+\t\t\tvar args []reflect.Value\n+\t\t\tvar argstr string\n+\t\t\tif mt.NumIn() == 1 {\n+\t\t\t\tvar x interface{}\n+\t\t\t\tswitch mt.In(0).Kind() {\n+\t\t\t\tdefault:\n+\t\t\t\t\tt.Fatalf(\"unexpected argument type for r.%s\", m.Name)\n+\n+\t\t\t\tcase reflect.Int:\n+\t\t\t\t\tif m.Name == \"Perm\" {\n+\t\t\t\t\t\tx = permSizes[repeat%len(permSizes)]\n+\t\t\t\t\t\tbreak\n+\t\t\t\t\t}\n+\t\t\t\t\tbig := int64s[repeat%len(int64s)]\n+\t\t\t\t\tif int64(int(big)) != big {\n+\t\t\t\t\t\tr.Int63n(big) // what would happen on 64-bit machine, to keep stream in sync\n+\t\t\t\t\t\tif *printgolden {\n+\t\t\t\t\t\t\tfmt.Printf(\"\\tskipped, // must run printgolden on 64-bit machine\\n\")\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tp++\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tx = int(big)\n+\n+\t\t\t\tcase reflect.Int32:\n+\t\t\t\t\tx = int32s[repeat%len(int32s)]\n+\n+\t\t\t\tcase reflect.Int64:\n+\t\t\t\t\tx = int64s[repeat%len(int64s)]\n+\t\t\t\t}\n+\t\t\t\targstr = fmt.Sprint(x)\n+\t\t\t\targs = append(args, reflect.ValueOf(x))\n+\t\t\t}\n+\t\t\tout := mv.Call(args)[0].Interface()\n+\t\t\tif m.Name == \"Int\" || m.Name == \"Intn\" {\n+\t\t\t\tout = int64(out.(int))\n+\t\t\t}\n+\t\t\tif *printgolden {\n+\t\t\t\tvar val string\n+\t\t\t\tbig := int64(1 << 60)\n+\t\t\t\tif int64(int(big)) != big && (m.Name == \"Int\" || m.Name == \"Intn\") {\n+\t\t\t\t\t// 32-bit machine cannot print 64-bit results\n+\t\t\t\t\tval = \"truncated\"\n+\t\t\t\t} else if reflect.TypeOf(out).Kind() == reflect.Slice {\n+\t\t\t\t\tval = fmt.Sprintf(\"%#v\", out)\n+\t\t\t\t} else {\n+\t\t\t\t\tval = fmt.Sprintf(\"%T(%v)\", out, out)\n+\t\t\t\t}\n+\t\t\t\tfmt.Printf(\"\\t%s, // %s(%s)\\n\", val, m.Name, argstr)\n+\t\t\t} else {\n+\t\t\t\twant := regressGolden[p]\n+\t\t\t\tif m.Name == \"Int\" {\n+\t\t\t\t\twant = int64(int(uint(want.(int64)) << 1 >> 1))\n+\t\t\t\t}\n+\t\t\t\tif !reflect.DeepEqual(out, want) {\n+\t\t\t\t\tt.Errorf(\"r.%s(%s) = %v, want %v\", m.Name, argstr, out, want)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tp++\n+\t\t}\n+\t}\n+\tif *printgolden {\n+\t\tfmt.Printf(\"}\\n\")\n+\t}\n+}\n+\n+var regressGolden = []interface{}{\n+\tfloat64(4.668112973579268),    // ExpFloat64()\n+\tfloat64(0.1601593871172866),   // ExpFloat64()\n+\tfloat64(3.0465834105636),      // ExpFloat64()\n+\tfloat64(0.06385839451671879),  // ExpFloat64()\n+\tfloat64(1.8578917487258961),   // ExpFloat64()\n+\tfloat64(0.784676123472182),    // ExpFloat64()\n+\tfloat64(0.11225477361256932),  // ExpFloat64()\n+\tfloat64(0.20173283329802255),  // ExpFloat64()\n+\tfloat64(0.3468619496201105),   // ExpFloat64()\n+\tfloat64(0.35601103454384536),  // ExpFloat64()\n+\tfloat64(0.888376329507869),    // ExpFloat64()\n+\tfloat64(1.4081362450365698),   // ExpFloat64()\n+\tfloat64(1.0077753823151994),   // ExpFloat64()\n+\tfloat64(0.23594100766227588),  // ExpFloat64()\n+\tfloat64(2.777245612300007),    // ExpFloat64()\n+\tfloat64(0.5202997830662377),   // ExpFloat64()\n+\tfloat64(1.2842705247770294),   // ExpFloat64()\n+\tfloat64(0.030307408362776206), // ExpFloat64()\n+\tfloat64(2.204156824853721),    // ExpFloat64()\n+\tfloat64(2.09891923895058),     // ExpFloat64()\n+\tfloat32(0.94519615),           // Float32()\n+\tfloat32(0.24496509),           // Float32()\n+\tfloat32(0.65595627),           // Float32()\n+\tfloat32(0.05434384),           // Float32()\n+\tfloat32(0.3675872),            // Float32()\n+\tfloat32(0.28948045),           // Float32()\n+\tfloat32(0.1924386),            // Float32()\n+\tfloat32(0.65533215),           // Float32()\n+\tfloat32(0.8971697),            // Float32()\n+\tfloat32(0.16735445),           // Float32()\n+\tfloat32(0.28858566),           // Float32()\n+\tfloat32(0.9026048),            // Float32()\n+\tfloat32(0.84978026),           // Float32()\n+\tfloat32(0.2730468),            // Float32()\n+\tfloat32(0.6090802),            // Float32()\n+\tfloat32(0.253656),             // Float32()\n+\tfloat32(0.7746542),            // Float32()\n+\tfloat32(0.017480763),          // Float32()\n+\tfloat32(0.78707397),           // Float32()\n+\tfloat32(0.7993937),            // Float32()\n+\tfloat64(0.9451961492941164),   // Float64()\n+\tfloat64(0.24496508529377975),  // Float64()\n+\tfloat64(0.6559562651954052),   // Float64()\n+\tfloat64(0.05434383959970039),  // Float64()\n+\tfloat64(0.36758720663245853),  // Float64()\n+\tfloat64(0.2894804331565928),   // Float64()\n+\tfloat64(0.19243860967493215),  // Float64()\n+\tfloat64(0.6553321508148324),   // Float64()\n+\tfloat64(0.897169713149801),    // Float64()\n+\tfloat64(0.16735444255905835),  // Float64()\n+\tfloat64(0.2885856518054551),   // Float64()\n+\tfloat64(0.9026048462705047),   // Float64()\n+\tfloat64(0.8497802817628735),   // Float64()\n+\tfloat64(0.2730468047134829),   // Float64()\n+\tfloat64(0.6090801919903561),   // Float64()\n+\tfloat64(0.25365600644283687),  // Float64()\n+\tfloat64(0.7746542391859803),   // Float64()\n+\tfloat64(0.017480762156647272), // Float64()\n+\tfloat64(0.7870739563039942),   // Float64()\n+\tfloat64(0.7993936979594545),   // Float64()\n+\tint64(8717895732742165505),    // Int()\n+\tint64(2259404117704393152),    // Int()\n+\tint64(6050128673802995827),    // Int()\n+\tint64(501233450539197794),     // Int()\n+\tint64(3390393562759376202),    // Int()\n+\tint64(2669985732393126063),    // Int()\n+\tint64(1774932891286980153),    // Int()\n+\tint64(6044372234677422456),    // Int()\n+\tint64(8274930044578894929),    // Int()\n+\tint64(1543572285742637646),    // Int()\n+\tint64(2661732831099943416),    // Int()\n+\tint64(8325060299420976708),    // Int()\n+\tint64(7837839688282259259),    // Int()\n+\tint64(2518412263346885298),    // Int()\n+\tint64(5617773211005988520),    // Int()\n+\tint64(2339563716805116249),    // Int()\n+\tint64(7144924247938981575),    // Int()\n+\tint64(161231572858529631),     // Int()\n+\tint64(7259475919510918339),    // Int()\n+\tint64(7373105480197164748),    // Int()\n+\tint32(2029793274),             // Int31()\n+\tint32(526058514),              // Int31()\n+\tint32(1408655353),             // Int31()\n+\tint32(116702506),              // Int31()\n+\tint32(789387515),              // Int31()\n+\tint32(621654496),              // Int31()\n+\tint32(413258767),              // Int31()\n+\tint32(1407315077),             // Int31()\n+\tint32(1926657288),             // Int31()\n+\tint32(359390928),              // Int31()\n+\tint32(619732968),              // Int31()\n+\tint32(1938329147),             // Int31()\n+\tint32(1824889259),             // Int31()\n+\tint32(586363548),              // Int31()\n+\tint32(1307989752),             // Int31()\n+\tint32(544722126),              // Int31()\n+\tint32(1663557311),             // Int31()\n+\tint32(37539650),               // Int31()\n+\tint32(1690228450),             // Int31()\n+\tint32(1716684894),             // Int31()\n+\tint32(0),                      // Int31n(1)\n+\tint32(4),                      // Int31n(10)\n+\tint32(25),                     // Int31n(32)\n+\tint32(310570),                 // Int31n(1048576)\n+\tint32(857611),                 // Int31n(1048577)\n+\tint32(621654496),              // Int31n(1000000000)\n+\tint32(413258767),              // Int31n(1073741824)\n+\tint32(1407315077),             // Int31n(2147483646)\n+\tint32(1926657288),             // Int31n(2147483647)\n+\tint32(0),                      // Int31n(1)\n+\tint32(8),                      // Int31n(10)\n+\tint32(27),                     // Int31n(32)\n+\tint32(367019),                 // Int31n(1048576)\n+\tint32(209005),                 // Int31n(1048577)\n+\tint32(307989752),              // Int31n(1000000000)\n+\tint32(544722126),              // Int31n(1073741824)\n+\tint32(1663557311),             // Int31n(2147483646)\n+\tint32(37539650),               // Int31n(2147483647)\n+\tint32(0),                      // Int31n(1)\n+\tint32(4),                      // Int31n(10)\n+\tint64(8717895732742165505),    // Int63()\n+\tint64(2259404117704393152),    // Int63()\n+\tint64(6050128673802995827),    // Int63()\n+\tint64(501233450539197794),     // Int63()\n+\tint64(3390393562759376202),    // Int63()\n+\tint64(2669985732393126063),    // Int63()\n+\tint64(1774932891286980153),    // Int63()\n+\tint64(6044372234677422456),    // Int63()\n+\tint64(8274930044578894929),    // Int63()\n+\tint64(1543572285742637646),    // Int63()\n+\tint64(2661732831099943416),    // Int63()\n+\tint64(8325060299420976708),    // Int63()\n+\tint64(7837839688282259259),    // Int63()\n+\tint64(2518412263346885298),    // Int63()\n+\tint64(5617773211005988520),    // Int63()\n+\tint64(2339563716805116249),    // Int63()\n+\tint64(7144924247938981575),    // Int63()\n+\tint64(161231572858529631),     // Int63()\n+\tint64(7259475919510918339),    // Int63()\n+\tint64(7373105480197164748),    // Int63()\n+\tint64(0),                      // Int63n(1)\n+\tint64(2),                      // Int63n(10)\n+\tint64(19),                     // Int63n(32)\n+\tint64(959842),                 // Int63n(1048576)\n+\tint64(688912),                 // Int63n(1048577)\n+\tint64(393126063),              // Int63n(1000000000)\n+\tint64(89212473),               // Int63n(1073741824)\n+\tint64(834026388),              // Int63n(2147483646)\n+\tint64(1577188963),             // Int63n(2147483647)\n+\tint64(543572285742637646),     // Int63n(1000000000000000000)\n+\tint64(355889821886249464),     // Int63n(1152921504606846976)\n+\tint64(8325060299420976708),    // Int63n(9223372036854775806)\n+\tint64(7837839688282259259),    // Int63n(9223372036854775807)\n+\tint64(0),                      // Int63n(1)\n+\tint64(0),                      // Int63n(10)\n+\tint64(25),                     // Int63n(32)\n+\tint64(679623),                 // Int63n(1048576)\n+\tint64(882178),                 // Int63n(1048577)\n+\tint64(510918339),              // Int63n(1000000000)\n+\tint64(782454476),              // Int63n(1073741824)\n+\tint64(0),                      // Intn(1)\n+\tint64(4),                      // Intn(10)\n+\tint64(25),                     // Intn(32)\n+\tint64(310570),                 // Intn(1048576)\n+\tint64(857611),                 // Intn(1048577)\n+\tint64(621654496),              // Intn(1000000000)\n+\tint64(413258767),              // Intn(1073741824)\n+\tint64(1407315077),             // Intn(2147483646)\n+\tint64(1926657288),             // Intn(2147483647)\n+\tint64(543572285742637646),     // Intn(1000000000000000000)\n+\tint64(355889821886249464),     // Intn(1152921504606846976)\n+\tint64(8325060299420976708),    // Intn(9223372036854775806)\n+\tint64(7837839688282259259),    // Intn(9223372036854775807)\n+\tint64(0),                      // Intn(1)\n+\tint64(2),                      // Intn(10)\n+\tint64(14),                     // Intn(32)\n+\tint64(515775),                 // Intn(1048576)\n+\tint64(839455),                 // Intn(1048577)\n+\tint64(690228450),              // Intn(1000000000)\n+\tint64(642943070),              // Intn(1073741824)\n+\tfloat64(-0.28158587086436215), // NormFloat64()\n+\tfloat64(0.570933095808067),    // NormFloat64()\n+\tfloat64(-1.6920196326157044),  // NormFloat64()\n+\tfloat64(0.1996229111693099),   // NormFloat64()\n+\tfloat64(1.9195199291234621),   // NormFloat64()\n+\tfloat64(0.8954838794918353),   // NormFloat64()\n+\tfloat64(0.41457072128813166),  // NormFloat64()\n+\tfloat64(-0.48700161491544713), // NormFloat64()\n+\tfloat64(-0.1684059662402393),  // NormFloat64()\n+\tfloat64(0.37056410998929545),  // NormFloat64()\n+\tfloat64(1.0156889027029008),   // NormFloat64()\n+\tfloat64(-0.5174422210625114),  // NormFloat64()\n+\tfloat64(-0.5565834214413804),  // NormFloat64()\n+\tfloat64(0.778320596648391),    // NormFloat64()\n+\tfloat64(-1.8970718197702225),  // NormFloat64()\n+\tfloat64(0.5229525761688676),   // NormFloat64()\n+\tfloat64(-1.5515595563231523),  // NormFloat64()\n+\tfloat64(0.0182029289376123),   // NormFloat64()\n+\tfloat64(-0.6820951356608795),  // NormFloat64()\n+\tfloat64(-0.5987943422687668),  // NormFloat64()\n+\t[]int{},                                                     // Perm(0)\n+\t[]int{0},                                                    // Perm(1)\n+\t[]int{0, 4, 1, 3, 2},                                        // Perm(5)\n+\t[]int{3, 1, 0, 4, 7, 5, 2, 6},                               // Perm(8)\n+\t[]int{5, 0, 3, 6, 7, 4, 2, 1, 8},                            // Perm(9)\n+\t[]int{4, 5, 0, 2, 6, 9, 3, 1, 8, 7},                         // Perm(10)\n+\t[]int{14, 2, 0, 8, 3, 5, 13, 12, 1, 4, 6, 7, 11, 9, 15, 10}, // Perm(16)\n+\t[]int{},                                                     // Perm(0)\n+\t[]int{0},                                                    // Perm(1)\n+\t[]int{3, 0, 1, 2, 4},                                        // Perm(5)\n+\t[]int{5, 1, 2, 0, 4, 7, 3, 6},                               // Perm(8)\n+\t[]int{4, 0, 6, 8, 1, 5, 2, 7, 3},                            // Perm(9)\n+\t[]int{8, 6, 1, 7, 5, 4, 3, 2, 9, 0},                         // Perm(10)\n+\t[]int{0, 3, 13, 2, 15, 4, 10, 1, 8, 14, 7, 6, 12, 9, 5, 11}, // Perm(16)\n+\t[]int{},                             // Perm(0)\n+\t[]int{0},                            // Perm(1)\n+\t[]int{0, 4, 2, 1, 3},                // Perm(5)\n+\t[]int{2, 1, 7, 0, 6, 3, 4, 5},       // Perm(8)\n+\t[]int{8, 7, 5, 3, 4, 6, 0, 1, 2},    // Perm(9)\n+\t[]int{1, 0, 2, 5, 7, 6, 9, 8, 3, 4}, // Perm(10)\n+\tuint32(4059586549),                  // Uint32()\n+\tuint32(1052117029),                  // Uint32()\n+\tuint32(2817310706),                  // Uint32()\n+\tuint32(233405013),                   // Uint32()\n+\tuint32(1578775030),                  // Uint32()\n+\tuint32(1243308993),                  // Uint32()\n+\tuint32(826517535),                   // Uint32()\n+\tuint32(2814630155),                  // Uint32()\n+\tuint32(3853314576),                  // Uint32()\n+\tuint32(718781857),                   // Uint32()\n+\tuint32(1239465936),                  // Uint32()\n+\tuint32(3876658295),                  // Uint32()\n+\tuint32(3649778518),                  // Uint32()\n+\tuint32(1172727096),                  // Uint32()\n+\tuint32(2615979505),                  // Uint32()\n+\tuint32(1089444252),                  // Uint32()\n+\tuint32(3327114623),                  // Uint32()\n+\tuint32(75079301),                    // Uint32()\n+\tuint32(3380456901),                  // Uint32()\n+\tuint32(3433369789),                  // Uint32()\n+}"}, {"sha": "ad63f9bb98e9a4197070f99b82d512b9f3812eb0", "filename": "libgo/go/mime/mediatype.go", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmime%2Fmediatype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmime%2Fmediatype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmediatype.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,6 +8,7 @@ import (\n \t\"bytes\"\n \t\"errors\"\n \t\"fmt\"\n+\t\"sort\"\n \t\"strings\"\n \t\"unicode\"\n )\n@@ -31,7 +32,14 @@ func FormatMediaType(t string, param map[string]string) string {\n \tb.WriteByte('/')\n \tb.WriteString(strings.ToLower(sub))\n \n-\tfor attribute, value := range param {\n+\tattrs := make([]string, 0, len(param))\n+\tfor a := range param {\n+\t\tattrs = append(attrs, a)\n+\t}\n+\tsort.Strings(attrs)\n+\n+\tfor _, attribute := range attrs {\n+\t\tvalue := param[attribute]\n \t\tb.WriteByte(';')\n \t\tb.WriteByte(' ')\n \t\tif !isToken(attribute) {"}, {"sha": "026bfa4d73468117aeca38445aedaf31122b960d", "filename": "libgo/go/mime/mediatype_test.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmime%2Fmediatype_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmime%2Fmediatype_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmediatype_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -293,6 +293,7 @@ var formatTests = []formatTest{\n \t{\"foo/BAR\", map[string]string{\"\": \"empty attribute\"}, \"\"},\n \t{\"foo/BAR\", map[string]string{\"bad attribute\": \"baz\"}, \"\"},\n \t{\"foo/BAR\", map[string]string{\"nonascii\": \"not an ascii character: \u00e4\"}, \"\"},\n+\t{\"foo/bar\", map[string]string{\"a\": \"av\", \"b\": \"bv\", \"c\": \"cv\"}, \"foo/bar; a=av; b=bv; c=cv\"},\n }\n \n func TestFormatMediaType(t *testing.T) {"}, {"sha": "7382efab96723a66a87dadaf73e9a199fa4461c2", "filename": "libgo/go/mime/multipart/multipart.go", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -81,12 +81,16 @@ func (p *Part) parseContentDisposition() {\n \t}\n }\n \n-// NewReader creates a new multipart Reader reading from reader using the\n+// NewReader creates a new multipart Reader reading from r using the\n // given MIME boundary.\n-func NewReader(reader io.Reader, boundary string) *Reader {\n+//\n+// The boundary is usually obtained from the \"boundary\" parameter of\n+// the message's \"Content-Type\" header. Use mime.ParseMediaType to\n+// parse such headers.\n+func NewReader(r io.Reader, boundary string) *Reader {\n \tb := []byte(\"\\r\\n--\" + boundary + \"--\")\n \treturn &Reader{\n-\t\tbufReader: bufio.NewReader(reader),\n+\t\tbufReader: bufio.NewReader(r),\n \n \t\tnl:               b[:2],\n \t\tnlDashBoundary:   b[:len(b)-2],"}, {"sha": "c4de3eb756634e4b10ab683409f24cff0cc317b1", "filename": "libgo/go/mime/multipart/quotedprintable_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmime%2Fmultipart%2Fquotedprintable_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmime%2Fmultipart%2Fquotedprintable_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmultipart%2Fquotedprintable_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -131,7 +131,7 @@ func TestQPExhaustive(t *testing.T) {\n \t\t\t\t\treturn\n \t\t\t\t}\n \t\t\t\tif strings.HasSuffix(errStr, \"0x0a\") || strings.HasSuffix(errStr, \"0x0d\") {\n-\t\t\t\t\t// bunch of cases; since whitespace at the end of of a line before \\n is removed.\n+\t\t\t\t\t// bunch of cases; since whitespace at the end of a line before \\n is removed.\n \t\t\t\t\treturn\n \t\t\t\t}\n \t\t\t}"}, {"sha": "1d394315a49b0cafd80d0177340a6f6c1d983e55", "filename": "libgo/go/mime/type_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmime%2Ftype_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fmime%2Ftype_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Ftype_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd solaris\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n \n package mime\n "}, {"sha": "ce46f2e8c3aec98c0808654c327796c5986ee738", "filename": "libgo/go/net/cgo_bsd.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fcgo_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fcgo_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fcgo_bsd.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -3,7 +3,7 @@\n // license that can be found in the LICENSE file.\n \n // +build !netgo\n-// +build darwin dragonfly freebsd\n+// +build darwin dragonfly freebsd solaris\n \n package net\n "}, {"sha": "37bb4e2c0710ee7022a6168ba708d43a0dec8b0f", "filename": "libgo/go/net/conn_test.go", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fconn_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fconn_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fconn_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -16,11 +16,11 @@ import (\n \n var connTests = []struct {\n \tnet  string\n-\taddr func() string\n+\taddr string\n }{\n-\t{\"tcp\", func() string { return \"127.0.0.1:0\" }},\n-\t{\"unix\", testUnixAddr},\n-\t{\"unixpacket\", testUnixAddr},\n+\t{\"tcp\", \"127.0.0.1:0\"},\n+\t{\"unix\", testUnixAddr()},\n+\t{\"unixpacket\", testUnixAddr()},\n }\n \n // someTimeout is used just to test that net.Conn implementations\n@@ -31,18 +31,21 @@ const someTimeout = 10 * time.Second\n func TestConnAndListener(t *testing.T) {\n \tfor _, tt := range connTests {\n \t\tswitch tt.net {\n-\t\tcase \"unix\", \"unixpacket\":\n+\t\tcase \"unix\":\n \t\t\tswitch runtime.GOOS {\n-\t\t\tcase \"plan9\", \"windows\":\n+\t\t\tcase \"nacl\", \"plan9\", \"windows\":\n \t\t\t\tcontinue\n \t\t\t}\n-\t\t\tif tt.net == \"unixpacket\" && runtime.GOOS != \"linux\" {\n+\t\tcase \"unixpacket\":\n+\t\t\tswitch runtime.GOOS {\n+\t\t\tcase \"darwin\", \"nacl\", \"openbsd\", \"plan9\", \"windows\":\n+\t\t\t\tcontinue\n+\t\t\tcase \"freebsd\": // FreeBSD 8 doesn't support unixpacket\n \t\t\t\tcontinue\n \t\t\t}\n \t\t}\n \n-\t\taddr := tt.addr()\n-\t\tln, err := Listen(tt.net, addr)\n+\t\tln, err := Listen(tt.net, tt.addr)\n \t\tif err != nil {\n \t\t\tt.Fatalf(\"Listen failed: %v\", err)\n \t\t}\n@@ -52,7 +55,7 @@ func TestConnAndListener(t *testing.T) {\n \t\t\tcase \"unix\", \"unixpacket\":\n \t\t\t\tos.Remove(addr)\n \t\t\t}\n-\t\t}(ln, tt.net, addr)\n+\t\t}(ln, tt.net, tt.addr)\n \t\tif ln.Addr().Network() != tt.net {\n \t\t\tt.Fatalf(\"got %v; expected %v\", ln.Addr().Network(), tt.net)\n \t\t}"}, {"sha": "93569c253cdafefbd8f567a7c2ec5e58c6077e4a", "filename": "libgo/go/net/dial.go", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdial.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdial.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdial.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -44,6 +44,12 @@ type Dialer struct {\n \t// destination is a host name that has multiple address family\n \t// DNS records.\n \tDualStack bool\n+\n+\t// KeepAlive specifies the keep-alive period for an active\n+\t// network connection.\n+\t// If zero, keep-alives are not enabled. Network protocols\n+\t// that do not support keep-alives ignore this field.\n+\tKeepAlive time.Duration\n }\n \n // Return either now+Timeout or Deadline, whichever comes first.\n@@ -162,9 +168,19 @@ func (d *Dialer) Dial(network, address string) (Conn, error) {\n \t\t\treturn dialMulti(network, address, d.LocalAddr, ras, deadline)\n \t\t}\n \t}\n-\treturn dial(network, ra.toAddr(), dialer, d.deadline())\n+\tc, err := dial(network, ra.toAddr(), dialer, d.deadline())\n+\tif d.KeepAlive > 0 && err == nil {\n+\t\tif tc, ok := c.(*TCPConn); ok {\n+\t\t\ttc.SetKeepAlive(true)\n+\t\t\ttc.SetKeepAlivePeriod(d.KeepAlive)\n+\t\t\ttestHookSetKeepAlive()\n+\t\t}\n+\t}\n+\treturn c, err\n }\n \n+var testHookSetKeepAlive = func() {} // changed by dial_test.go\n+\n // dialMulti attempts to establish connections to each destination of\n // the list of addresses. It will return the first established\n // connection and close the other connections. Otherwise it returns"}, {"sha": "f9260fd281baa0870c6479edc1b6c549677d3067", "filename": "libgo/go/net/dial_test.go", "status": "modified", "additions": 33, "deletions": 54, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdial_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdial_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdial_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -425,60 +425,6 @@ func numFD() int {\n \tpanic(\"numFDs not implemented on \" + runtime.GOOS)\n }\n \n-// Assert that a failed Dial attempt does not leak\n-// runtime.PollDesc structures\n-func TestDialFailPDLeak(t *testing.T) {\n-\tif testing.Short() {\n-\t\tt.Skip(\"skipping test in short mode\")\n-\t}\n-\tif runtime.GOOS == \"windows\" && runtime.GOARCH == \"386\" {\n-\t\t// Just skip the test because it takes too long.\n-\t\tt.Skipf(\"skipping test on %q/%q\", runtime.GOOS, runtime.GOARCH)\n-\t}\n-\n-\tmaxprocs := runtime.GOMAXPROCS(0)\n-\tloops := 10 + maxprocs\n-\t// 500 is enough to turn over the chunk of pollcache.\n-\t// See allocPollDesc in runtime/netpoll.goc.\n-\tconst count = 500\n-\tvar old runtime.MemStats // used by sysdelta\n-\truntime.ReadMemStats(&old)\n-\tsysdelta := func() uint64 {\n-\t\tvar new runtime.MemStats\n-\t\truntime.ReadMemStats(&new)\n-\t\tdelta := old.Sys - new.Sys\n-\t\told = new\n-\t\treturn delta\n-\t}\n-\td := &Dialer{Timeout: time.Nanosecond} // don't bother TCP with handshaking\n-\tfailcount := 0\n-\tfor i := 0; i < loops; i++ {\n-\t\tvar wg sync.WaitGroup\n-\t\tfor i := 0; i < count; i++ {\n-\t\t\twg.Add(1)\n-\t\t\tgo func() {\n-\t\t\t\tdefer wg.Done()\n-\t\t\t\tif c, err := d.Dial(\"tcp\", \"127.0.0.1:1\"); err == nil {\n-\t\t\t\t\tt.Error(\"dial should not succeed\")\n-\t\t\t\t\tc.Close()\n-\t\t\t\t}\n-\t\t\t}()\n-\t\t}\n-\t\twg.Wait()\n-\t\tif t.Failed() {\n-\t\t\tt.FailNow()\n-\t\t}\n-\t\tif delta := sysdelta(); delta > 0 {\n-\t\t\tfailcount++\n-\t\t}\n-\t\t// there are always some allocations on the first loop\n-\t\tif failcount > maxprocs+2 {\n-\t\t\tt.Error(\"detected possible memory leak in runtime\")\n-\t\t\tt.FailNow()\n-\t\t}\n-\t}\n-}\n-\n func TestDialer(t *testing.T) {\n \tln, err := Listen(\"tcp4\", \"127.0.0.1:0\")\n \tif err != nil {\n@@ -555,3 +501,36 @@ func TestDialDualStackLocalhost(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+func TestDialerKeepAlive(t *testing.T) {\n+\tln := newLocalListener(t)\n+\tdefer ln.Close()\n+\tdefer func() {\n+\t\ttestHookSetKeepAlive = func() {}\n+\t}()\n+\tgo func() {\n+\t\tfor {\n+\t\t\tc, err := ln.Accept()\n+\t\t\tif err != nil {\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tc.Close()\n+\t\t}\n+\t}()\n+\tfor _, keepAlive := range []bool{false, true} {\n+\t\tgot := false\n+\t\ttestHookSetKeepAlive = func() { got = true }\n+\t\tvar d Dialer\n+\t\tif keepAlive {\n+\t\t\td.KeepAlive = 30 * time.Second\n+\t\t}\n+\t\tc, err := d.Dial(\"tcp\", ln.Addr().String())\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\tc.Close()\n+\t\tif got != keepAlive {\n+\t\t\tt.Errorf(\"Dialer.KeepAlive = %v: SetKeepAlive called = %v, want %v\", d.KeepAlive, got, !got)\n+\t\t}\n+\t}\n+}"}, {"sha": "9bffa11f9165df0a338cdd300fbd9c304225575a", "filename": "libgo/go/net/dnsclient.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsclient.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsclient.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdnsclient.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -191,10 +191,10 @@ func (addrs byPriorityWeight) shuffleByWeight() {\n \t}\n \tfor sum > 0 && len(addrs) > 1 {\n \t\ts := 0\n-\t\tn := rand.Intn(sum + 1)\n+\t\tn := rand.Intn(sum)\n \t\tfor i := range addrs {\n \t\t\ts += int(addrs[i].Weight)\n-\t\t\tif s >= n {\n+\t\t\tif s > n {\n \t\t\t\tif i > 0 {\n \t\t\t\t\tt := addrs[i]\n \t\t\t\t\tcopy(addrs[1:i+1], addrs[0:i])"}, {"sha": "435eb35506e142f604d996b2a1c1c2f81b52f49d", "filename": "libgo/go/net/dnsclient_test.go", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsclient_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsclient_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdnsclient_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package net\n+\n+import (\n+\t\"math/rand\"\n+\t\"testing\"\n+)\n+\n+func checkDistribution(t *testing.T, data []*SRV, margin float64) {\n+\tsum := 0\n+\tfor _, srv := range data {\n+\t\tsum += int(srv.Weight)\n+\t}\n+\n+\tresults := make(map[string]int)\n+\n+\tcount := 1000\n+\tfor j := 0; j < count; j++ {\n+\t\td := make([]*SRV, len(data))\n+\t\tcopy(d, data)\n+\t\tbyPriorityWeight(d).shuffleByWeight()\n+\t\tkey := d[0].Target\n+\t\tresults[key] = results[key] + 1\n+\t}\n+\n+\tactual := results[data[0].Target]\n+\texpected := float64(count) * float64(data[0].Weight) / float64(sum)\n+\tdiff := float64(actual) - expected\n+\tt.Logf(\"actual: %v diff: %v e: %v m: %v\", actual, diff, expected, margin)\n+\tif diff < 0 {\n+\t\tdiff = -diff\n+\t}\n+\tif diff > (expected * margin) {\n+\t\tt.Errorf(\"missed target weight: expected %v, %v\", expected, actual)\n+\t}\n+}\n+\n+func testUniformity(t *testing.T, size int, margin float64) {\n+\trand.Seed(1)\n+\tdata := make([]*SRV, size)\n+\tfor i := 0; i < size; i++ {\n+\t\tdata[i] = &SRV{Target: string('a' + i), Weight: 1}\n+\t}\n+\tcheckDistribution(t, data, margin)\n+}\n+\n+func TestUniformity(t *testing.T) {\n+\ttestUniformity(t, 2, 0.05)\n+\ttestUniformity(t, 3, 0.10)\n+\ttestUniformity(t, 10, 0.20)\n+\ttestWeighting(t, 0.05)\n+}\n+\n+func testWeighting(t *testing.T, margin float64) {\n+\trand.Seed(1)\n+\tdata := []*SRV{\n+\t\t{Target: \"a\", Weight: 60},\n+\t\t{Target: \"b\", Weight: 30},\n+\t\t{Target: \"c\", Weight: 10},\n+\t}\n+\tcheckDistribution(t, data, margin)\n+}\n+\n+func TestWeighting(t *testing.T) {\n+\ttestWeighting(t, 0.05)\n+}"}, {"sha": "3713efd0e3c9f27b3d95596d2ed3f00c0b82649c", "filename": "libgo/go/net/dnsclient_unix.go", "status": "modified", "additions": 72, "deletions": 30, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsclient_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsclient_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdnsclient_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,13 +2,12 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n \n // DNS client: see RFC 1035.\n // Has to be linked into package net for Dial.\n \n // TODO(rsc):\n-//\tCheck periodically whether /etc/resolv.conf has changed.\n //\tCould potentially handle many outstanding lookups faster.\n //\tCould have a small cache.\n //\tRandom UDP source port (net.Dial should do that for us).\n@@ -19,6 +18,7 @@ package net\n import (\n \t\"io\"\n \t\"math/rand\"\n+\t\"os\"\n \t\"sync\"\n \t\"time\"\n )\n@@ -156,33 +156,90 @@ func convertRR_AAAA(records []dnsRR) []IP {\n \treturn addrs\n }\n \n-var cfg *dnsConfig\n-var dnserr error\n+var cfg struct {\n+\tch        chan struct{}\n+\tmu        sync.RWMutex // protects dnsConfig and dnserr\n+\tdnsConfig *dnsConfig\n+\tdnserr    error\n+}\n+var onceLoadConfig sync.Once\n \n // Assume dns config file is /etc/resolv.conf here\n-func loadConfig() { cfg, dnserr = dnsReadConfig(\"/etc/resolv.conf\") }\n+func loadDefaultConfig() {\n+\tloadConfig(\"/etc/resolv.conf\", 5*time.Second, nil)\n+}\n \n-var onceLoadConfig sync.Once\n+func loadConfig(resolvConfPath string, reloadTime time.Duration, quit <-chan chan struct{}) {\n+\tvar mtime time.Time\n+\tcfg.ch = make(chan struct{}, 1)\n+\tif fi, err := os.Stat(resolvConfPath); err != nil {\n+\t\tcfg.dnserr = err\n+\t} else {\n+\t\tmtime = fi.ModTime()\n+\t\tcfg.dnsConfig, cfg.dnserr = dnsReadConfig(resolvConfPath)\n+\t}\n+\tgo func() {\n+\t\tfor {\n+\t\t\ttime.Sleep(reloadTime)\n+\t\t\tselect {\n+\t\t\tcase qresp := <-quit:\n+\t\t\t\tqresp <- struct{}{}\n+\t\t\t\treturn\n+\t\t\tcase <-cfg.ch:\n+\t\t\t}\n+\n+\t\t\t// In case of error, we keep the previous config\n+\t\t\tfi, err := os.Stat(resolvConfPath)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\t// If the resolv.conf mtime didn't change, do not reload\n+\t\t\tm := fi.ModTime()\n+\t\t\tif m.Equal(mtime) {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tmtime = m\n+\t\t\t// In case of error, we keep the previous config\n+\t\t\tncfg, err := dnsReadConfig(resolvConfPath)\n+\t\t\tif err != nil || len(ncfg.servers) == 0 {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tcfg.mu.Lock()\n+\t\t\tcfg.dnsConfig = ncfg\n+\t\t\tcfg.dnserr = nil\n+\t\t\tcfg.mu.Unlock()\n+\t\t}\n+\t}()\n+}\n \n func lookup(name string, qtype uint16) (cname string, addrs []dnsRR, err error) {\n \tif !isDomainName(name) {\n \t\treturn name, nil, &DNSError{Err: \"invalid domain name\", Name: name}\n \t}\n-\tonceLoadConfig.Do(loadConfig)\n-\tif dnserr != nil || cfg == nil {\n-\t\terr = dnserr\n+\tonceLoadConfig.Do(loadDefaultConfig)\n+\n+\tselect {\n+\tcase cfg.ch <- struct{}{}:\n+\tdefault:\n+\t}\n+\n+\tcfg.mu.RLock()\n+\tdefer cfg.mu.RUnlock()\n+\n+\tif cfg.dnserr != nil || cfg.dnsConfig == nil {\n+\t\terr = cfg.dnserr\n \t\treturn\n \t}\n \t// If name is rooted (trailing dot) or has enough dots,\n \t// try it by itself first.\n \trooted := len(name) > 0 && name[len(name)-1] == '.'\n-\tif rooted || count(name, '.') >= cfg.ndots {\n+\tif rooted || count(name, '.') >= cfg.dnsConfig.ndots {\n \t\trname := name\n \t\tif !rooted {\n \t\t\trname += \".\"\n \t\t}\n \t\t// Can try as ordinary name.\n-\t\tcname, addrs, err = tryOneName(cfg, rname, qtype)\n+\t\tcname, addrs, err = tryOneName(cfg.dnsConfig, rname, qtype)\n \t\tif err == nil {\n \t\t\treturn\n \t\t}\n@@ -192,12 +249,12 @@ func lookup(name string, qtype uint16) (cname string, addrs []dnsRR, err error)\n \t}\n \n \t// Otherwise, try suffixes.\n-\tfor i := 0; i < len(cfg.search); i++ {\n-\t\trname := name + \".\" + cfg.search[i]\n+\tfor i := 0; i < len(cfg.dnsConfig.search); i++ {\n+\t\trname := name + \".\" + cfg.dnsConfig.search[i]\n \t\tif rname[len(rname)-1] != '.' {\n \t\t\trname += \".\"\n \t\t}\n-\t\tcname, addrs, err = tryOneName(cfg, rname, qtype)\n+\t\tcname, addrs, err = tryOneName(cfg.dnsConfig, rname, qtype)\n \t\tif err == nil {\n \t\t\treturn\n \t\t}\n@@ -208,7 +265,7 @@ func lookup(name string, qtype uint16) (cname string, addrs []dnsRR, err error)\n \tif !rooted {\n \t\trname += \".\"\n \t}\n-\tcname, addrs, err = tryOneName(cfg, rname, qtype)\n+\tcname, addrs, err = tryOneName(cfg.dnsConfig, rname, qtype)\n \tif err == nil {\n \t\treturn\n \t}\n@@ -233,11 +290,6 @@ func goLookupHost(name string) (addrs []string, err error) {\n \tif len(addrs) > 0 {\n \t\treturn\n \t}\n-\tonceLoadConfig.Do(loadConfig)\n-\tif dnserr != nil || cfg == nil {\n-\t\terr = dnserr\n-\t\treturn\n-\t}\n \tips, err := goLookupIP(name)\n \tif err != nil {\n \t\treturn\n@@ -268,11 +320,6 @@ func goLookupIP(name string) (addrs []IP, err error) {\n \t\t\treturn\n \t\t}\n \t}\n-\tonceLoadConfig.Do(loadConfig)\n-\tif dnserr != nil || cfg == nil {\n-\t\terr = dnserr\n-\t\treturn\n-\t}\n \tvar records []dnsRR\n \tvar cname string\n \tvar err4, err6 error\n@@ -308,11 +355,6 @@ func goLookupIP(name string) (addrs []IP, err error) {\n // depending on our lookup code, so that Go and C get the same\n // answers.\n func goLookupCNAME(name string) (cname string, err error) {\n-\tonceLoadConfig.Do(loadConfig)\n-\tif dnserr != nil || cfg == nil {\n-\t\terr = dnserr\n-\t\treturn\n-\t}\n \t_, rr, err := lookup(name, dnsTypeCNAME)\n \tif err != nil {\n \t\treturn"}, {"sha": "2350142d61052e06f40644baa3200016df3bb27a", "filename": "libgo/go/net/dnsclient_unix_test.go", "status": "modified", "additions": 133, "deletions": 1, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsclient_unix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsclient_unix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdnsclient_unix_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,12 +2,18 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd\n+// +build darwin dragonfly freebsd linux netbsd openbsd solaris\n \n package net\n \n import (\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+\t\"reflect\"\n \t\"testing\"\n+\t\"time\"\n )\n \n func TestTCPLookup(t *testing.T) {\n@@ -25,3 +31,129 @@ func TestTCPLookup(t *testing.T) {\n \t\tt.Fatalf(\"exchange failed: %v\", err)\n \t}\n }\n+\n+type resolvConfTest struct {\n+\t*testing.T\n+\tdir     string\n+\tpath    string\n+\tstarted bool\n+\tquitc   chan chan struct{}\n+}\n+\n+func newResolvConfTest(t *testing.T) *resolvConfTest {\n+\tdir, err := ioutil.TempDir(\"\", \"resolvConfTest\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"could not create temp dir: %v\", err)\n+\t}\n+\n+\t// Disable the default loadConfig\n+\tonceLoadConfig.Do(func() {})\n+\n+\tr := &resolvConfTest{\n+\t\tT:     t,\n+\t\tdir:   dir,\n+\t\tpath:  path.Join(dir, \"resolv.conf\"),\n+\t\tquitc: make(chan chan struct{}),\n+\t}\n+\n+\treturn r\n+}\n+\n+func (r *resolvConfTest) Start() {\n+\tloadConfig(r.path, 100*time.Millisecond, r.quitc)\n+\tr.started = true\n+}\n+\n+func (r *resolvConfTest) SetConf(s string) {\n+\t// Make sure the file mtime will be different once we're done here,\n+\t// even on systems with coarse (1s) mtime resolution.\n+\ttime.Sleep(time.Second)\n+\n+\tf, err := os.OpenFile(r.path, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0600)\n+\tif err != nil {\n+\t\tr.Fatalf(\"failed to create temp file %s: %v\", r.path, err)\n+\t}\n+\tif _, err := io.WriteString(f, s); err != nil {\n+\t\tf.Close()\n+\t\tr.Fatalf(\"failed to write temp file: %v\", err)\n+\t}\n+\tf.Close()\n+\n+\tif r.started {\n+\t\tcfg.ch <- struct{}{} // fill buffer\n+\t\tcfg.ch <- struct{}{} // wait for reload to begin\n+\t\tcfg.ch <- struct{}{} // wait for reload to complete\n+\t}\n+}\n+\n+func (r *resolvConfTest) WantServers(want []string) {\n+\tcfg.mu.RLock()\n+\tdefer cfg.mu.RUnlock()\n+\tif got := cfg.dnsConfig.servers; !reflect.DeepEqual(got, want) {\n+\t\tr.Fatalf(\"Unexpected dns server loaded, got %v want %v\", got, want)\n+\t}\n+}\n+\n+func (r *resolvConfTest) Close() {\n+\tresp := make(chan struct{})\n+\tr.quitc <- resp\n+\t<-resp\n+\tif err := os.RemoveAll(r.dir); err != nil {\n+\t\tr.Logf(\"failed to remove temp dir %s: %v\", r.dir, err)\n+\t}\n+}\n+\n+func TestReloadResolvConfFail(t *testing.T) {\n+\tif testing.Short() || !*testExternal {\n+\t\tt.Skip(\"skipping test to avoid external network\")\n+\t}\n+\n+\tr := newResolvConfTest(t)\n+\tdefer r.Close()\n+\n+\t// resolv.conf.tmp does not exist yet\n+\tr.Start()\n+\tif _, err := goLookupIP(\"golang.org\"); err == nil {\n+\t\tt.Fatal(\"goLookupIP(missing) succeeded\")\n+\t}\n+\n+\tr.SetConf(\"nameserver 8.8.8.8\")\n+\tif _, err := goLookupIP(\"golang.org\"); err != nil {\n+\t\tt.Fatalf(\"goLookupIP(missing; good) failed: %v\", err)\n+\t}\n+\n+\t// Using a bad resolv.conf while we had a good\n+\t// one before should not update the config\n+\tr.SetConf(\"\")\n+\tif _, err := goLookupIP(\"golang.org\"); err != nil {\n+\t\tt.Fatalf(\"goLookupIP(missing; good; bad) failed: %v\", err)\n+\t}\n+}\n+\n+func TestReloadResolvConfChange(t *testing.T) {\n+\tif testing.Short() || !*testExternal {\n+\t\tt.Skip(\"skipping test to avoid external network\")\n+\t}\n+\n+\tr := newResolvConfTest(t)\n+\tdefer r.Close()\n+\n+\tr.SetConf(\"nameserver 8.8.8.8\")\n+\tr.Start()\n+\n+\tif _, err := goLookupIP(\"golang.org\"); err != nil {\n+\t\tt.Fatalf(\"goLookupIP(good) failed: %v\", err)\n+\t}\n+\tr.WantServers([]string{\"[8.8.8.8]\"})\n+\n+\t// Using a bad resolv.conf when we had a good one\n+\t// before should not update the config\n+\tr.SetConf(\"\")\n+\tif _, err := goLookupIP(\"golang.org\"); err != nil {\n+\t\tt.Fatalf(\"goLookupIP(good; bad) failed: %v\", err)\n+\t}\n+\n+\t// A new good config should get picked up\n+\tr.SetConf(\"nameserver 8.8.4.4\")\n+\tr.WantServers([]string{\"[8.8.4.4]\"})\n+}"}, {"sha": "af288253e09bacea861f751c779ae823c98035b2", "filename": "libgo/go/net/dnsconfig_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsconfig_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsconfig_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdnsconfig_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n \n // Read system DNS config from /etc/resolv.conf\n "}, {"sha": "37ed4931dbe70ac6ceb6528a312ec09d6692069d", "filename": "libgo/go/net/dnsconfig_unix_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsconfig_unix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fdnsconfig_unix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdnsconfig_unix_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd\n+// +build darwin dragonfly freebsd linux netbsd openbsd solaris\n \n package net\n "}, {"sha": "c34ec59b996371a6dc63ee919905f68baf3594d6", "filename": "libgo/go/net/fd_mutex_test.go", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_mutex_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_mutex_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_mutex_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -63,7 +63,8 @@ func TestMutexCloseUnblock(t *testing.T) {\n \tfor i := 0; i < 4; i++ {\n \t\tgo func() {\n \t\t\tif mu.RWLock(true) {\n-\t\t\t\tt.Fatal(\"broken\")\n+\t\t\t\tt.Error(\"broken\")\n+\t\t\t\treturn\n \t\t\t}\n \t\t\tc <- true\n \t\t}()\n@@ -138,36 +139,44 @@ func TestMutexStress(t *testing.T) {\n \t\t\t\tswitch r.Intn(3) {\n \t\t\t\tcase 0:\n \t\t\t\t\tif !mu.Incref() {\n-\t\t\t\t\t\tt.Fatal(\"broken\")\n+\t\t\t\t\t\tt.Error(\"broken\")\n+\t\t\t\t\t\treturn\n \t\t\t\t\t}\n \t\t\t\t\tif mu.Decref() {\n-\t\t\t\t\t\tt.Fatal(\"broken\")\n+\t\t\t\t\t\tt.Error(\"broken\")\n+\t\t\t\t\t\treturn\n \t\t\t\t\t}\n \t\t\t\tcase 1:\n \t\t\t\t\tif !mu.RWLock(true) {\n-\t\t\t\t\t\tt.Fatal(\"broken\")\n+\t\t\t\t\t\tt.Error(\"broken\")\n+\t\t\t\t\t\treturn\n \t\t\t\t\t}\n \t\t\t\t\t// Ensure that it provides mutual exclusion for readers.\n \t\t\t\t\tif readState[0] != readState[1] {\n-\t\t\t\t\t\tt.Fatal(\"broken\")\n+\t\t\t\t\t\tt.Error(\"broken\")\n+\t\t\t\t\t\treturn\n \t\t\t\t\t}\n \t\t\t\t\treadState[0]++\n \t\t\t\t\treadState[1]++\n \t\t\t\t\tif mu.RWUnlock(true) {\n-\t\t\t\t\t\tt.Fatal(\"broken\")\n+\t\t\t\t\t\tt.Error(\"broken\")\n+\t\t\t\t\t\treturn\n \t\t\t\t\t}\n \t\t\t\tcase 2:\n \t\t\t\t\tif !mu.RWLock(false) {\n-\t\t\t\t\t\tt.Fatal(\"broken\")\n+\t\t\t\t\t\tt.Error(\"broken\")\n+\t\t\t\t\t\treturn\n \t\t\t\t\t}\n \t\t\t\t\t// Ensure that it provides mutual exclusion for writers.\n \t\t\t\t\tif writeState[0] != writeState[1] {\n-\t\t\t\t\t\tt.Fatal(\"broken\")\n+\t\t\t\t\t\tt.Error(\"broken\")\n+\t\t\t\t\t\treturn\n \t\t\t\t\t}\n \t\t\t\t\twriteState[0]++\n \t\t\t\t\twriteState[1]++\n \t\t\t\t\tif mu.RWUnlock(false) {\n-\t\t\t\t\t\tt.Fatal(\"broken\")\n+\t\t\t\t\t\tt.Error(\"broken\")\n+\t\t\t\t\t\treturn\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}"}, {"sha": "5fe8effc2954dc3ebd7ebe965dd253f36aaf9c85", "filename": "libgo/go/net/fd_plan9.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_plan9.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -150,14 +150,14 @@ func (fd *netFD) Write(b []byte) (n int, err error) {\n \treturn fd.data.Write(b)\n }\n \n-func (fd *netFD) CloseRead() error {\n+func (fd *netFD) closeRead() error {\n \tif !fd.ok() {\n \t\treturn syscall.EINVAL\n \t}\n \treturn syscall.EPLAN9\n }\n \n-func (fd *netFD) CloseWrite() error {\n+func (fd *netFD) closeWrite() error {\n \tif !fd.ok() {\n \t\treturn syscall.EINVAL\n \t}"}, {"sha": "a3701f8764833fcee124e49119ef13d8bdc14737", "filename": "libgo/go/net/fd_poll_nacl.go", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_poll_nacl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_poll_nacl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_poll_nacl.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package net\n+\n+import (\n+\t\"syscall\"\n+\t\"time\"\n+)\n+\n+type pollDesc struct {\n+\tfd      *netFD\n+\tclosing bool\n+}\n+\n+func (pd *pollDesc) Init(fd *netFD) error { pd.fd = fd; return nil }\n+\n+func (pd *pollDesc) Close() {}\n+\n+func (pd *pollDesc) Lock() {}\n+\n+func (pd *pollDesc) Unlock() {}\n+\n+func (pd *pollDesc) Wakeup() {}\n+\n+func (pd *pollDesc) Evict() bool {\n+\tpd.closing = true\n+\tif pd.fd != nil {\n+\t\tsyscall.StopIO(pd.fd.sysfd)\n+\t}\n+\treturn false\n+}\n+\n+func (pd *pollDesc) Prepare(mode int) error {\n+\tif pd.closing {\n+\t\treturn errClosing\n+\t}\n+\treturn nil\n+}\n+\n+func (pd *pollDesc) PrepareRead() error { return pd.Prepare('r') }\n+\n+func (pd *pollDesc) PrepareWrite() error { return pd.Prepare('w') }\n+\n+func (pd *pollDesc) Wait(mode int) error {\n+\tif pd.closing {\n+\t\treturn errClosing\n+\t}\n+\treturn errTimeout\n+}\n+\n+func (pd *pollDesc) WaitRead() error { return pd.Wait('r') }\n+\n+func (pd *pollDesc) WaitWrite() error { return pd.Wait('w') }\n+\n+func (pd *pollDesc) WaitCanceled(mode int) {}\n+\n+func (pd *pollDesc) WaitCanceledRead() {}\n+\n+func (pd *pollDesc) WaitCanceledWrite() {}\n+\n+func (fd *netFD) setDeadline(t time.Time) error {\n+\treturn setDeadlineImpl(fd, t, 'r'+'w')\n+}\n+\n+func (fd *netFD) setReadDeadline(t time.Time) error {\n+\treturn setDeadlineImpl(fd, t, 'r')\n+}\n+\n+func (fd *netFD) setWriteDeadline(t time.Time) error {\n+\treturn setDeadlineImpl(fd, t, 'w')\n+}\n+\n+func setDeadlineImpl(fd *netFD, t time.Time, mode int) error {\n+\td := t.UnixNano()\n+\tif t.IsZero() {\n+\t\td = 0\n+\t}\n+\tif err := fd.incref(); err != nil {\n+\t\treturn err\n+\t}\n+\tswitch mode {\n+\tcase 'r':\n+\t\tsyscall.SetReadDeadline(fd.sysfd, d)\n+\tcase 'w':\n+\t\tsyscall.SetWriteDeadline(fd.sysfd, d)\n+\tcase 'r' + 'w':\n+\t\tsyscall.SetReadDeadline(fd.sysfd, d)\n+\t\tsyscall.SetWriteDeadline(fd.sysfd, d)\n+\t}\n+\tfd.decref()\n+\treturn nil\n+}"}, {"sha": "2bddc836c75a7af4492cbb5a748c74fc6a3ad991", "filename": "libgo/go/net/fd_poll_runtime.go", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_poll_runtime.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_poll_runtime.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_poll_runtime.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows\n+// +build darwin dragonfly freebsd linux netbsd openbsd windows solaris\n \n package net\n \n@@ -12,6 +12,9 @@ import (\n \t\"time\"\n )\n \n+// runtimeNano returns the current value of the runtime clock in nanoseconds.\n+func runtimeNano() int64\n+\n func runtime_pollServerInit()\n func runtime_pollOpen(fd uintptr) (uintptr, int)\n func runtime_pollClose(ctx uintptr)\n@@ -128,7 +131,7 @@ func (fd *netFD) setWriteDeadline(t time.Time) error {\n }\n \n func setDeadlineImpl(fd *netFD, t time.Time, mode int) error {\n-\td := t.UnixNano()\n+\td := runtimeNano() + int64(t.Sub(time.Now()))\n \tif t.IsZero() {\n \t\td = 0\n \t}"}, {"sha": "ca6aac3b42e3afafd72a3b01e8ec6ff06f49b5f3", "filename": "libgo/go/net/fd_unix.go", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n \n package net\n \n@@ -75,29 +75,47 @@ func (fd *netFD) connect(la, ra syscall.Sockaddr) error {\n \tif err := fd.pd.PrepareWrite(); err != nil {\n \t\treturn err\n \t}\n-\tfor {\n-\t\terr := syscall.Connect(fd.sysfd, ra)\n-\t\tif err == nil || err == syscall.EISCONN {\n-\t\t\tbreak\n-\t\t}\n-\n+\tswitch err := syscall.Connect(fd.sysfd, ra); err {\n+\tcase syscall.EINPROGRESS, syscall.EALREADY, syscall.EINTR:\n+\tcase nil, syscall.EISCONN:\n+\t\treturn nil\n+\tcase syscall.EINVAL:\n \t\t// On Solaris we can see EINVAL if the socket has\n \t\t// already been accepted and closed by the server.\n \t\t// Treat this as a successful connection--writes to\n \t\t// the socket will see EOF.  For details and a test\n \t\t// case in C see http://golang.org/issue/6828.\n-\t\tif runtime.GOOS == \"solaris\" && err == syscall.EINVAL {\n-\t\t\tbreak\n+\t\tif runtime.GOOS == \"solaris\" {\n+\t\t\treturn nil\n \t\t}\n-\n-\t\tif err != syscall.EINPROGRESS && err != syscall.EALREADY && err != syscall.EINTR {\n+\t\tfallthrough\n+\tdefault:\n+\t\treturn err\n+\t}\n+\tfor {\n+\t\t// Performing multiple connect system calls on a\n+\t\t// non-blocking socket under Unix variants does not\n+\t\t// necessarily result in earlier errors being\n+\t\t// returned. Instead, once runtime-integrated network\n+\t\t// poller tells us that the socket is ready, get the\n+\t\t// SO_ERROR socket option to see if the connection\n+\t\t// succeeded or failed. See issue 7474 for further\n+\t\t// details.\n+\t\tif err := fd.pd.WaitWrite(); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tif err = fd.pd.WaitWrite(); err != nil {\n+\t\tnerr, err := syscall.GetsockoptInt(fd.sysfd, syscall.SOL_SOCKET, syscall.SO_ERROR)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tswitch err := syscall.Errno(nerr); err {\n+\t\tcase syscall.EINPROGRESS, syscall.EALREADY, syscall.EINTR:\n+\t\tcase syscall.Errno(0), syscall.EISCONN:\n+\t\t\treturn nil\n+\t\tdefault:\n \t\t\treturn err\n \t\t}\n \t}\n-\treturn nil\n }\n \n func (fd *netFD) destroy() {\n@@ -190,11 +208,11 @@ func (fd *netFD) shutdown(how int) error {\n \treturn nil\n }\n \n-func (fd *netFD) CloseRead() error {\n+func (fd *netFD) closeRead() error {\n \treturn fd.shutdown(syscall.SHUT_RD)\n }\n \n-func (fd *netFD) CloseWrite() error {\n+func (fd *netFD) closeWrite() error {\n \treturn fd.shutdown(syscall.SHUT_WR)\n }\n \n@@ -225,7 +243,7 @@ func (fd *netFD) Read(p []byte) (n int, err error) {\n \treturn\n }\n \n-func (fd *netFD) ReadFrom(p []byte) (n int, sa syscall.Sockaddr, err error) {\n+func (fd *netFD) readFrom(p []byte) (n int, sa syscall.Sockaddr, err error) {\n \tif err := fd.readLock(); err != nil {\n \t\treturn 0, nil, err\n \t}\n@@ -252,7 +270,7 @@ func (fd *netFD) ReadFrom(p []byte) (n int, sa syscall.Sockaddr, err error) {\n \treturn\n }\n \n-func (fd *netFD) ReadMsg(p []byte, oob []byte) (n, oobn, flags int, sa syscall.Sockaddr, err error) {\n+func (fd *netFD) readMsg(p []byte, oob []byte) (n, oobn, flags int, sa syscall.Sockaddr, err error) {\n \tif err := fd.readLock(); err != nil {\n \t\treturn 0, 0, 0, nil, err\n \t}\n@@ -323,7 +341,7 @@ func (fd *netFD) Write(p []byte) (nn int, err error) {\n \treturn nn, err\n }\n \n-func (fd *netFD) WriteTo(p []byte, sa syscall.Sockaddr) (n int, err error) {\n+func (fd *netFD) writeTo(p []byte, sa syscall.Sockaddr) (n int, err error) {\n \tif err := fd.writeLock(); err != nil {\n \t\treturn 0, err\n \t}\n@@ -348,7 +366,7 @@ func (fd *netFD) WriteTo(p []byte, sa syscall.Sockaddr) (n int, err error) {\n \treturn\n }\n \n-func (fd *netFD) WriteMsg(p []byte, oob []byte, sa syscall.Sockaddr) (n int, oobn int, err error) {\n+func (fd *netFD) writeMsg(p []byte, oob []byte, sa syscall.Sockaddr) (n int, oobn int, err error) {\n \tif err := fd.writeLock(); err != nil {\n \t\treturn 0, 0, err\n \t}\n@@ -357,7 +375,7 @@ func (fd *netFD) WriteMsg(p []byte, oob []byte, sa syscall.Sockaddr) (n int, oob\n \t\treturn 0, 0, &OpError{\"write\", fd.net, fd.raddr, err}\n \t}\n \tfor {\n-\t\terr = syscall.Sendmsg(fd.sysfd, p, oob, sa, 0)\n+\t\tn, err = syscall.SendmsgN(fd.sysfd, p, oob, sa, 0)\n \t\tif err == syscall.EAGAIN {\n \t\t\tif err = fd.pd.WaitWrite(); err == nil {\n \t\t\t\tcontinue\n@@ -366,7 +384,6 @@ func (fd *netFD) WriteMsg(p []byte, oob []byte, sa syscall.Sockaddr) (n int, oob\n \t\tbreak\n \t}\n \tif err == nil {\n-\t\tn = len(p)\n \t\toobn = len(oob)\n \t} else {\n \t\terr = &OpError{\"write\", fd.net, fd.raddr, err}\n@@ -465,7 +482,6 @@ func dupCloseOnExecOld(fd int) (newfd int, err error) {\n func (fd *netFD) dup() (f *os.File, err error) {\n \tns, err := dupCloseOnExec(fd.sysfd)\n \tif err != nil {\n-\t\tsyscall.ForkLock.RUnlock()\n \t\treturn nil, &OpError{\"dup\", fd.net, fd.laddr, err}\n \t}\n "}, {"sha": "fe8e8ff6a88683c0e8ada5417717d236c2e26ad5", "filename": "libgo/go/net/fd_unix_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_unix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_unix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_unix_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd\n+// +build darwin dragonfly freebsd linux netbsd openbsd solaris\n \n package net\n "}, {"sha": "a1f6bc5f8148cb40fcbf45c7507da707dd5c89dd", "filename": "libgo/go/net/fd_windows.go", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffd_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_windows.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -431,11 +431,11 @@ func (fd *netFD) shutdown(how int) error {\n \treturn nil\n }\n \n-func (fd *netFD) CloseRead() error {\n+func (fd *netFD) closeRead() error {\n \treturn fd.shutdown(syscall.SHUT_RD)\n }\n \n-func (fd *netFD) CloseWrite() error {\n+func (fd *netFD) closeWrite() error {\n \treturn fd.shutdown(syscall.SHUT_WR)\n }\n \n@@ -458,7 +458,7 @@ func (fd *netFD) Read(buf []byte) (int, error) {\n \treturn n, err\n }\n \n-func (fd *netFD) ReadFrom(buf []byte) (n int, sa syscall.Sockaddr, err error) {\n+func (fd *netFD) readFrom(buf []byte) (n int, sa syscall.Sockaddr, err error) {\n \tif len(buf) == 0 {\n \t\treturn 0, nil, nil\n \t}\n@@ -497,7 +497,7 @@ func (fd *netFD) Write(buf []byte) (int, error) {\n \t})\n }\n \n-func (fd *netFD) WriteTo(buf []byte, sa syscall.Sockaddr) (int, error) {\n+func (fd *netFD) writeTo(buf []byte, sa syscall.Sockaddr) (int, error) {\n \tif len(buf) == 0 {\n \t\treturn 0, nil\n \t}\n@@ -628,10 +628,10 @@ func (fd *netFD) dup() (*os.File, error) {\n \n var errNoSupport = errors.New(\"address family not supported\")\n \n-func (fd *netFD) ReadMsg(p []byte, oob []byte) (n, oobn, flags int, sa syscall.Sockaddr, err error) {\n+func (fd *netFD) readMsg(p []byte, oob []byte) (n, oobn, flags int, sa syscall.Sockaddr, err error) {\n \treturn 0, 0, 0, nil, errNoSupport\n }\n \n-func (fd *netFD) WriteMsg(p []byte, oob []byte, sa syscall.Sockaddr) (n int, oobn int, err error) {\n+func (fd *netFD) writeMsg(p []byte, oob []byte, sa syscall.Sockaddr) (n int, oobn int, err error) {\n \treturn 0, 0, errNoSupport\n }"}, {"sha": "d81bca78249472e4b001924604c64b84f7d5813d", "filename": "libgo/go/net/file_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffile_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffile_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffile_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -181,7 +181,7 @@ var filePacketConnTests = []struct {\n \n func TestFilePacketConn(t *testing.T) {\n \tswitch runtime.GOOS {\n-\tcase \"plan9\", \"windows\":\n+\tcase \"nacl\", \"plan9\", \"windows\":\n \t\tt.Skipf(\"skipping test on %q\", runtime.GOOS)\n \t}\n "}, {"sha": "07b3ecf62637f44d726a674109f9fa01696974b6", "filename": "libgo/go/net/file_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffile_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ffile_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffile_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n \n package net\n "}, {"sha": "ec95a972c1a425b860c78d6456f320ec5d748d26", "filename": "libgo/go/net/http/cgi/host.go", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fhost.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fhost.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fhost.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -214,12 +214,17 @@ func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n \t\tinternalError(err)\n \t\treturn\n \t}\n+\tif hook := testHookStartProcess; hook != nil {\n+\t\thook(cmd.Process)\n+\t}\n \tdefer cmd.Wait()\n \tdefer stdoutRead.Close()\n \n \tlinebody := bufio.NewReaderSize(stdoutRead, 1024)\n \theaders := make(http.Header)\n \tstatusCode := 0\n+\theaderLines := 0\n+\tsawBlankLine := false\n \tfor {\n \t\tline, isPrefix, err := linebody.ReadLine()\n \t\tif isPrefix {\n@@ -236,8 +241,10 @@ func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n \t\t\treturn\n \t\t}\n \t\tif len(line) == 0 {\n+\t\t\tsawBlankLine = true\n \t\t\tbreak\n \t\t}\n+\t\theaderLines++\n \t\tparts := strings.SplitN(string(line), \":\", 2)\n \t\tif len(parts) < 2 {\n \t\t\th.printf(\"cgi: bogus header line: %s\", string(line))\n@@ -263,6 +270,11 @@ func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n \t\t\theaders.Add(header, val)\n \t\t}\n \t}\n+\tif headerLines == 0 || !sawBlankLine {\n+\t\trw.WriteHeader(http.StatusInternalServerError)\n+\t\th.printf(\"cgi: no headers\")\n+\t\treturn\n+\t}\n \n \tif loc := headers.Get(\"Location\"); loc != \"\" {\n \t\tif strings.HasPrefix(loc, \"/\") && h.PathLocationHandler != nil {\n@@ -274,6 +286,12 @@ func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n \t\t}\n \t}\n \n+\tif statusCode == 0 && headers.Get(\"Content-Type\") == \"\" {\n+\t\trw.WriteHeader(http.StatusInternalServerError)\n+\t\th.printf(\"cgi: missing required Content-Type in headers\")\n+\t\treturn\n+\t}\n+\n \tif statusCode == 0 {\n \t\tstatusCode = http.StatusOK\n \t}\n@@ -292,6 +310,13 @@ func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n \t_, err = io.Copy(rw, linebody)\n \tif err != nil {\n \t\th.printf(\"cgi: copy error: %v\", err)\n+\t\t// And kill the child CGI process so we don't hang on\n+\t\t// the deferred cmd.Wait above if the error was just\n+\t\t// the client (rw) going away. If it was a read error\n+\t\t// (because the child died itself), then the extra\n+\t\t// kill of an already-dead process is harmless (the PID\n+\t\t// won't be reused until the Wait above).\n+\t\tcmd.Process.Kill()\n \t}\n }\n \n@@ -348,3 +373,5 @@ func upperCaseAndUnderscore(r rune) rune {\n \t// TODO: other transformations in spec or practice?\n \treturn r\n }\n+\n+var testHookStartProcess func(*os.Process) // nil except for some tests"}, {"sha": "18c4803e71b55374881674429d8e49d4adef3a9b", "filename": "libgo/go/net/http/cgi/matryoshka_test.go", "status": "modified", "additions": 136, "deletions": 1, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fmatryoshka_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fmatryoshka_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fmatryoshka_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -9,15 +9,25 @@\n package cgi\n \n import (\n+\t\"bytes\"\n+\t\"errors\"\n \t\"fmt\"\n+\t\"io\"\n \t\"net/http\"\n+\t\"net/http/httptest\"\n \t\"os\"\n+\t\"runtime\"\n \t\"testing\"\n+\t\"time\"\n )\n \n // This test is a CGI host (testing host.go) that runs its own binary\n // as a child process testing the other half of CGI (child.go).\n func TestHostingOurselves(t *testing.T) {\n+\tif runtime.GOOS == \"nacl\" {\n+\t\tt.Skip(\"skipping on nacl\")\n+\t}\n+\n \th := &Handler{\n \t\tPath: os.Args[0],\n \t\tRoot: \"/test.go\",\n@@ -51,8 +61,88 @@ func TestHostingOurselves(t *testing.T) {\n \t}\n }\n \n-// Test that a child handler only writing headers works.\n+type customWriterRecorder struct {\n+\tw io.Writer\n+\t*httptest.ResponseRecorder\n+}\n+\n+func (r *customWriterRecorder) Write(p []byte) (n int, err error) {\n+\treturn r.w.Write(p)\n+}\n+\n+type limitWriter struct {\n+\tw io.Writer\n+\tn int\n+}\n+\n+func (w *limitWriter) Write(p []byte) (n int, err error) {\n+\tif len(p) > w.n {\n+\t\tp = p[:w.n]\n+\t}\n+\tif len(p) > 0 {\n+\t\tn, err = w.w.Write(p)\n+\t\tw.n -= n\n+\t}\n+\tif w.n == 0 {\n+\t\terr = errors.New(\"past write limit\")\n+\t}\n+\treturn\n+}\n+\n+// If there's an error copying the child's output to the parent, test\n+// that we kill the child.\n+func TestKillChildAfterCopyError(t *testing.T) {\n+\tif runtime.GOOS == \"nacl\" {\n+\t\tt.Skip(\"skipping on nacl\")\n+\t}\n+\n+\tdefer func() { testHookStartProcess = nil }()\n+\tproc := make(chan *os.Process, 1)\n+\ttestHookStartProcess = func(p *os.Process) {\n+\t\tproc <- p\n+\t}\n+\n+\th := &Handler{\n+\t\tPath: os.Args[0],\n+\t\tRoot: \"/test.go\",\n+\t\tArgs: []string{\"-test.run=TestBeChildCGIProcess\"},\n+\t}\n+\treq, _ := http.NewRequest(\"GET\", \"http://example.com/test.cgi?write-forever=1\", nil)\n+\trec := httptest.NewRecorder()\n+\tvar out bytes.Buffer\n+\tconst writeLen = 50 << 10\n+\trw := &customWriterRecorder{&limitWriter{&out, writeLen}, rec}\n+\n+\tdonec := make(chan bool, 1)\n+\tgo func() {\n+\t\th.ServeHTTP(rw, req)\n+\t\tdonec <- true\n+\t}()\n+\n+\tselect {\n+\tcase <-donec:\n+\t\tif out.Len() != writeLen || out.Bytes()[0] != 'a' {\n+\t\t\tt.Errorf(\"unexpected output: %q\", out.Bytes())\n+\t\t}\n+\tcase <-time.After(5 * time.Second):\n+\t\tt.Errorf(\"timeout. ServeHTTP hung and didn't kill the child process?\")\n+\t\tselect {\n+\t\tcase p := <-proc:\n+\t\t\tp.Kill()\n+\t\t\tt.Logf(\"killed process\")\n+\t\tdefault:\n+\t\t\tt.Logf(\"didn't kill process\")\n+\t\t}\n+\t}\n+}\n+\n+// Test that a child handler writing only headers works.\n+// golang.org/issue/7196\n func TestChildOnlyHeaders(t *testing.T) {\n+\tif runtime.GOOS == \"nacl\" {\n+\t\tt.Skip(\"skipping on nacl\")\n+\t}\n+\n \th := &Handler{\n \t\tPath: os.Args[0],\n \t\tRoot: \"/test.go\",\n@@ -67,18 +157,63 @@ func TestChildOnlyHeaders(t *testing.T) {\n \t}\n }\n \n+// golang.org/issue/7198\n+func Test500WithNoHeaders(t *testing.T)     { want500Test(t, \"/immediate-disconnect\") }\n+func Test500WithNoContentType(t *testing.T) { want500Test(t, \"/no-content-type\") }\n+func Test500WithEmptyHeaders(t *testing.T)  { want500Test(t, \"/empty-headers\") }\n+\n+func want500Test(t *testing.T, path string) {\n+\th := &Handler{\n+\t\tPath: os.Args[0],\n+\t\tRoot: \"/test.go\",\n+\t\tArgs: []string{\"-test.run=TestBeChildCGIProcess\"},\n+\t}\n+\texpectedMap := map[string]string{\n+\t\t\"_body\": \"\",\n+\t}\n+\treplay := runCgiTest(t, h, \"GET \"+path+\" HTTP/1.0\\nHost: example.com\\n\\n\", expectedMap)\n+\tif replay.Code != 500 {\n+\t\tt.Errorf(\"Got code %d; want 500\", replay.Code)\n+\t}\n+}\n+\n+type neverEnding byte\n+\n+func (b neverEnding) Read(p []byte) (n int, err error) {\n+\tfor i := range p {\n+\t\tp[i] = byte(b)\n+\t}\n+\treturn len(p), nil\n+}\n+\n // Note: not actually a test.\n func TestBeChildCGIProcess(t *testing.T) {\n \tif os.Getenv(\"REQUEST_METHOD\") == \"\" {\n \t\t// Not in a CGI environment; skipping test.\n \t\treturn\n \t}\n+\tswitch os.Getenv(\"REQUEST_URI\") {\n+\tcase \"/immediate-disconnect\":\n+\t\tos.Exit(0)\n+\tcase \"/no-content-type\":\n+\t\tfmt.Printf(\"Content-Length: 6\\n\\nHello\\n\")\n+\t\tos.Exit(0)\n+\tcase \"/empty-headers\":\n+\t\tfmt.Printf(\"\\nHello\")\n+\t\tos.Exit(0)\n+\t}\n \tServe(http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {\n \t\trw.Header().Set(\"X-Test-Header\", \"X-Test-Value\")\n \t\treq.ParseForm()\n \t\tif req.FormValue(\"no-body\") == \"1\" {\n \t\t\treturn\n \t\t}\n+\t\tif req.FormValue(\"write-forever\") == \"1\" {\n+\t\t\tio.Copy(rw, neverEnding('a'))\n+\t\t\tfor {\n+\t\t\t\ttime.Sleep(5 * time.Second) // hang forever, until killed\n+\t\t\t}\n+\t\t}\n \t\tfmt.Fprintf(rw, \"test=Hello CGI-in-CGI\\n\")\n \t\tfor k, vv := range req.Form {\n \t\t\tfor _, v := range vv {"}, {"sha": "a5a3abe6138a596fbae22bf7e64b50651b638add", "filename": "libgo/go/net/http/client.go", "status": "modified", "additions": 94, "deletions": 17, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fclient.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fclient.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fclient.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -14,9 +14,12 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n+\t\"io/ioutil\"\n \t\"log\"\n \t\"net/url\"\n \t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n )\n \n // A Client is an HTTP client. Its zero value (DefaultClient) is a\n@@ -52,6 +55,20 @@ type Client struct {\n \t// If Jar is nil, cookies are not sent in requests and ignored\n \t// in responses.\n \tJar CookieJar\n+\n+\t// Timeout specifies a time limit for requests made by this\n+\t// Client. The timeout includes connection time, any\n+\t// redirects, and reading the response body. The timer remains\n+\t// running after Get, Head, Post, or Do return and will\n+\t// interrupt reading of the Response.Body.\n+\t//\n+\t// A Timeout of zero means no timeout.\n+\t//\n+\t// The Client's Transport must support the CancelRequest\n+\t// method or Client will return errors when attempting to make\n+\t// a request with Get, Head, Post, or Do. Client's default\n+\t// Transport (DefaultTransport) supports CancelRequest.\n+\tTimeout time.Duration\n }\n \n // DefaultClient is the default Client and is used by Get, Head, and Post.\n@@ -74,8 +91,9 @@ type RoundTripper interface {\n \t// authentication, or cookies.\n \t//\n \t// RoundTrip should not modify the request, except for\n-\t// consuming and closing the Body. The request's URL and\n-\t// Header fields are guaranteed to be initialized.\n+\t// consuming and closing the Body, including on errors. The\n+\t// request's URL and Header fields are guaranteed to be\n+\t// initialized.\n \tRoundTrip(*Request) (*Response, error)\n }\n \n@@ -97,7 +115,7 @@ func (c *Client) send(req *Request) (*Response, error) {\n \t\t\treq.AddCookie(cookie)\n \t\t}\n \t}\n-\tresp, err := send(req, c.Transport)\n+\tresp, err := send(req, c.transport())\n \tif err != nil {\n \t\treturn nil, err\n \t}\n@@ -123,6 +141,9 @@ func (c *Client) send(req *Request) (*Response, error) {\n // (typically Transport) may not be able to re-use a persistent TCP\n // connection to the server for a subsequent \"keep-alive\" request.\n //\n+// The request Body, if non-nil, will be closed by the underlying\n+// Transport, even on errors.\n+//\n // Generally Get, Post, or PostForm will be used instead of Do.\n func (c *Client) Do(req *Request) (resp *Response, err error) {\n \tif req.Method == \"GET\" || req.Method == \"HEAD\" {\n@@ -134,22 +155,28 @@ func (c *Client) Do(req *Request) (resp *Response, err error) {\n \treturn c.send(req)\n }\n \n+func (c *Client) transport() RoundTripper {\n+\tif c.Transport != nil {\n+\t\treturn c.Transport\n+\t}\n+\treturn DefaultTransport\n+}\n+\n // send issues an HTTP request.\n // Caller should close resp.Body when done reading from it.\n func send(req *Request, t RoundTripper) (resp *Response, err error) {\n \tif t == nil {\n-\t\tt = DefaultTransport\n-\t\tif t == nil {\n-\t\t\terr = errors.New(\"http: no Client.Transport or DefaultTransport\")\n-\t\t\treturn\n-\t\t}\n+\t\treq.closeBody()\n+\t\treturn nil, errors.New(\"http: no Client.Transport or DefaultTransport\")\n \t}\n \n \tif req.URL == nil {\n+\t\treq.closeBody()\n \t\treturn nil, errors.New(\"http: nil Request.URL\")\n \t}\n \n \tif req.RequestURI != \"\" {\n+\t\treq.closeBody()\n \t\treturn nil, errors.New(\"http: Request.RequestURI can't be set in client requests.\")\n \t}\n \n@@ -257,37 +284,59 @@ func (c *Client) doFollowingRedirects(ireq *Request, shouldRedirect func(int) bo\n \tvar via []*Request\n \n \tif ireq.URL == nil {\n+\t\tireq.closeBody()\n \t\treturn nil, errors.New(\"http: nil Request.URL\")\n \t}\n \n+\tvar reqmu sync.Mutex // guards req\n \treq := ireq\n+\n+\tvar timer *time.Timer\n+\tif c.Timeout > 0 {\n+\t\ttype canceler interface {\n+\t\t\tCancelRequest(*Request)\n+\t\t}\n+\t\ttr, ok := c.transport().(canceler)\n+\t\tif !ok {\n+\t\t\treturn nil, fmt.Errorf(\"net/http: Client Transport of type %T doesn't support CancelRequest; Timeout not supported\", c.transport())\n+\t\t}\n+\t\ttimer = time.AfterFunc(c.Timeout, func() {\n+\t\t\treqmu.Lock()\n+\t\t\tdefer reqmu.Unlock()\n+\t\t\ttr.CancelRequest(req)\n+\t\t})\n+\t}\n+\n \turlStr := \"\" // next relative or absolute URL to fetch (after first request)\n \tredirectFailed := false\n \tfor redirect := 0; ; redirect++ {\n \t\tif redirect != 0 {\n-\t\t\treq = new(Request)\n-\t\t\treq.Method = ireq.Method\n+\t\t\tnreq := new(Request)\n+\t\t\tnreq.Method = ireq.Method\n \t\t\tif ireq.Method == \"POST\" || ireq.Method == \"PUT\" {\n-\t\t\t\treq.Method = \"GET\"\n+\t\t\t\tnreq.Method = \"GET\"\n \t\t\t}\n-\t\t\treq.Header = make(Header)\n-\t\t\treq.URL, err = base.Parse(urlStr)\n+\t\t\tnreq.Header = make(Header)\n+\t\t\tnreq.URL, err = base.Parse(urlStr)\n \t\t\tif err != nil {\n \t\t\t\tbreak\n \t\t\t}\n \t\t\tif len(via) > 0 {\n \t\t\t\t// Add the Referer header.\n \t\t\t\tlastReq := via[len(via)-1]\n \t\t\t\tif lastReq.URL.Scheme != \"https\" {\n-\t\t\t\t\treq.Header.Set(\"Referer\", lastReq.URL.String())\n+\t\t\t\t\tnreq.Header.Set(\"Referer\", lastReq.URL.String())\n \t\t\t\t}\n \n-\t\t\t\terr = redirectChecker(req, via)\n+\t\t\t\terr = redirectChecker(nreq, via)\n \t\t\t\tif err != nil {\n \t\t\t\t\tredirectFailed = true\n \t\t\t\t\tbreak\n \t\t\t\t}\n \t\t\t}\n+\t\t\treqmu.Lock()\n+\t\t\treq = nreq\n+\t\t\treqmu.Unlock()\n \t\t}\n \n \t\turlStr = req.URL.String()\n@@ -296,6 +345,12 @@ func (c *Client) doFollowingRedirects(ireq *Request, shouldRedirect func(int) bo\n \t\t}\n \n \t\tif shouldRedirect(resp.StatusCode) {\n+\t\t\t// Read the body if small so underlying TCP connection will be re-used.\n+\t\t\t// No need to check for errors: if it fails, Transport won't reuse it anyway.\n+\t\t\tconst maxBodySlurpSize = 2 << 10\n+\t\t\tif resp.ContentLength == -1 || resp.ContentLength <= maxBodySlurpSize {\n+\t\t\t\tio.CopyN(ioutil.Discard, resp.Body, maxBodySlurpSize)\n+\t\t\t}\n \t\t\tresp.Body.Close()\n \t\t\tif urlStr = resp.Header.Get(\"Location\"); urlStr == \"\" {\n \t\t\t\terr = errors.New(fmt.Sprintf(\"%d response missing Location header\", resp.StatusCode))\n@@ -305,7 +360,10 @@ func (c *Client) doFollowingRedirects(ireq *Request, shouldRedirect func(int) bo\n \t\t\tvia = append(via, req)\n \t\t\tcontinue\n \t\t}\n-\t\treturn\n+\t\tif timer != nil {\n+\t\t\tresp.Body = &cancelTimerBody{timer, resp.Body}\n+\t\t}\n+\t\treturn resp, nil\n \t}\n \n \tmethod := ireq.Method\n@@ -349,7 +407,7 @@ func Post(url string, bodyType string, body io.Reader) (resp *Response, err erro\n // Caller should close resp.Body when done reading from it.\n //\n // If the provided body is also an io.Closer, it is closed after the\n-// body is successfully written to the server.\n+// request.\n func (c *Client) Post(url string, bodyType string, body io.Reader) (resp *Response, err error) {\n \treq, err := NewRequest(\"POST\", url, body)\n \tif err != nil {\n@@ -408,3 +466,22 @@ func (c *Client) Head(url string) (resp *Response, err error) {\n \t}\n \treturn c.doFollowingRedirects(req, shouldRedirectGet)\n }\n+\n+type cancelTimerBody struct {\n+\tt  *time.Timer\n+\trc io.ReadCloser\n+}\n+\n+func (b *cancelTimerBody) Read(p []byte) (n int, err error) {\n+\tn, err = b.rc.Read(p)\n+\tif err == io.EOF {\n+\t\tb.t.Stop()\n+\t}\n+\treturn\n+}\n+\n+func (b *cancelTimerBody) Close() error {\n+\terr := b.rc.Close()\n+\tb.t.Stop()\n+\treturn err\n+}"}, {"sha": "6392c1baf39cdf83852a51e0aca8feb9cd9a1e23", "filename": "libgo/go/net/http/client_test.go", "status": "modified", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fclient_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fclient_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fclient_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -15,14 +15,18 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"log\"\n \t\"net\"\n \t. \"net/http\"\n \t\"net/http/httptest\"\n \t\"net/url\"\n+\t\"reflect\"\n+\t\"sort\"\n \t\"strconv\"\n \t\"strings\"\n \t\"sync\"\n \t\"testing\"\n+\t\"time\"\n )\n \n var robotsTxtHandler = HandlerFunc(func(w ResponseWriter, r *Request) {\n@@ -54,6 +58,13 @@ func pedanticReadAll(r io.Reader) (b []byte, err error) {\n \t}\n }\n \n+type chanWriter chan string\n+\n+func (w chanWriter) Write(p []byte) (n int, err error) {\n+\tw <- string(p)\n+\treturn len(p), nil\n+}\n+\n func TestClient(t *testing.T) {\n \tdefer afterTest(t)\n \tts := httptest.NewServer(robotsTxtHandler)\n@@ -564,6 +575,8 @@ func TestClientInsecureTransport(t *testing.T) {\n \tts := httptest.NewTLSServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n \t\tw.Write([]byte(\"Hello\"))\n \t}))\n+\terrc := make(chanWriter, 10) // but only expecting 1\n+\tts.Config.ErrorLog = log.New(errc, \"\", 0)\n \tdefer ts.Close()\n \n \t// TODO(bradfitz): add tests for skipping hostname checks too?\n@@ -585,6 +598,16 @@ func TestClientInsecureTransport(t *testing.T) {\n \t\t\tres.Body.Close()\n \t\t}\n \t}\n+\n+\tselect {\n+\tcase v := <-errc:\n+\t\tif !strings.Contains(v, \"TLS handshake error\") {\n+\t\t\tt.Errorf(\"expected an error log message containing 'TLS handshake error'; got %q\", v)\n+\t\t}\n+\tcase <-time.After(5 * time.Second):\n+\t\tt.Errorf(\"timeout waiting for logged error\")\n+\t}\n+\n }\n \n func TestClientErrorWithRequestURI(t *testing.T) {\n@@ -635,6 +658,8 @@ func TestClientWithIncorrectTLSServerName(t *testing.T) {\n \tdefer afterTest(t)\n \tts := httptest.NewTLSServer(HandlerFunc(func(w ResponseWriter, r *Request) {}))\n \tdefer ts.Close()\n+\terrc := make(chanWriter, 10) // but only expecting 1\n+\tts.Config.ErrorLog = log.New(errc, \"\", 0)\n \n \ttrans := newTLSTransport(t, ts)\n \ttrans.TLSClientConfig.ServerName = \"badserver\"\n@@ -646,6 +671,14 @@ func TestClientWithIncorrectTLSServerName(t *testing.T) {\n \tif !strings.Contains(err.Error(), \"127.0.0.1\") || !strings.Contains(err.Error(), \"badserver\") {\n \t\tt.Errorf(\"wanted error mentioning 127.0.0.1 and badserver; got error: %v\", err)\n \t}\n+\tselect {\n+\tcase v := <-errc:\n+\t\tif !strings.Contains(v, \"TLS handshake error\") {\n+\t\t\tt.Errorf(\"expected an error log message containing 'TLS handshake error'; got %q\", v)\n+\t\t}\n+\tcase <-time.After(5 * time.Second):\n+\t\tt.Errorf(\"timeout waiting for logged error\")\n+\t}\n }\n \n // Test for golang.org/issue/5829; the Transport should respect TLSClientConfig.ServerName\n@@ -678,6 +711,33 @@ func TestTransportUsesTLSConfigServerName(t *testing.T) {\n \tres.Body.Close()\n }\n \n+func TestResponseSetsTLSConnectionState(t *testing.T) {\n+\tdefer afterTest(t)\n+\tts := httptest.NewTLSServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tw.Write([]byte(\"Hello\"))\n+\t}))\n+\tdefer ts.Close()\n+\n+\ttr := newTLSTransport(t, ts)\n+\ttr.TLSClientConfig.CipherSuites = []uint16{tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA}\n+\ttr.Dial = func(netw, addr string) (net.Conn, error) {\n+\t\treturn net.Dial(netw, ts.Listener.Addr().String())\n+\t}\n+\tdefer tr.CloseIdleConnections()\n+\tc := &Client{Transport: tr}\n+\tres, err := c.Get(\"https://example.com/\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer res.Body.Close()\n+\tif res.TLS == nil {\n+\t\tt.Fatal(\"Response didn't set TLS Connection State.\")\n+\t}\n+\tif got, want := res.TLS.CipherSuite, tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA; got != want {\n+\t\tt.Errorf(\"TLS Cipher Suite = %d; want %d\", got, want)\n+\t}\n+}\n+\n // Verify Response.ContentLength is populated. http://golang.org/issue/4126\n func TestClientHeadContentLength(t *testing.T) {\n \tdefer afterTest(t)\n@@ -781,3 +841,198 @@ func TestBasicAuth(t *testing.T) {\n \t\tt.Errorf(\"Invalid auth %q\", auth)\n \t}\n }\n+\n+func TestClientTimeout(t *testing.T) {\n+\tif testing.Short() {\n+\t\tt.Skip(\"skipping in short mode\")\n+\t}\n+\tdefer afterTest(t)\n+\tsawRoot := make(chan bool, 1)\n+\tsawSlow := make(chan bool, 1)\n+\tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tif r.URL.Path == \"/\" {\n+\t\t\tsawRoot <- true\n+\t\t\tRedirect(w, r, \"/slow\", StatusFound)\n+\t\t\treturn\n+\t\t}\n+\t\tif r.URL.Path == \"/slow\" {\n+\t\t\tw.Write([]byte(\"Hello\"))\n+\t\t\tw.(Flusher).Flush()\n+\t\t\tsawSlow <- true\n+\t\t\ttime.Sleep(2 * time.Second)\n+\t\t\treturn\n+\t\t}\n+\t}))\n+\tdefer ts.Close()\n+\tconst timeout = 500 * time.Millisecond\n+\tc := &Client{\n+\t\tTimeout: timeout,\n+\t}\n+\n+\tres, err := c.Get(ts.URL)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tselect {\n+\tcase <-sawRoot:\n+\t\t// good.\n+\tdefault:\n+\t\tt.Fatal(\"handler never got / request\")\n+\t}\n+\n+\tselect {\n+\tcase <-sawSlow:\n+\t\t// good.\n+\tdefault:\n+\t\tt.Fatal(\"handler never got /slow request\")\n+\t}\n+\n+\terrc := make(chan error, 1)\n+\tgo func() {\n+\t\t_, err := ioutil.ReadAll(res.Body)\n+\t\terrc <- err\n+\t\tres.Body.Close()\n+\t}()\n+\n+\tconst failTime = timeout * 2\n+\tselect {\n+\tcase err := <-errc:\n+\t\tif err == nil {\n+\t\t\tt.Error(\"expected error from ReadAll\")\n+\t\t}\n+\t\t// Expected error.\n+\tcase <-time.After(failTime):\n+\t\tt.Errorf(\"timeout after %v waiting for timeout of %v\", failTime, timeout)\n+\t}\n+}\n+\n+func TestClientRedirectEatsBody(t *testing.T) {\n+\tdefer afterTest(t)\n+\tsaw := make(chan string, 2)\n+\tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tsaw <- r.RemoteAddr\n+\t\tif r.URL.Path == \"/\" {\n+\t\t\tRedirect(w, r, \"/foo\", StatusFound) // which includes a body\n+\t\t}\n+\t}))\n+\tdefer ts.Close()\n+\n+\tres, err := Get(ts.URL)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\t_, err = ioutil.ReadAll(res.Body)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tres.Body.Close()\n+\n+\tvar first string\n+\tselect {\n+\tcase first = <-saw:\n+\tdefault:\n+\t\tt.Fatal(\"server didn't see a request\")\n+\t}\n+\n+\tvar second string\n+\tselect {\n+\tcase second = <-saw:\n+\tdefault:\n+\t\tt.Fatal(\"server didn't see a second request\")\n+\t}\n+\n+\tif first != second {\n+\t\tt.Fatal(\"server saw different client ports before & after the redirect\")\n+\t}\n+}\n+\n+// eofReaderFunc is an io.Reader that runs itself, and then returns io.EOF.\n+type eofReaderFunc func()\n+\n+func (f eofReaderFunc) Read(p []byte) (n int, err error) {\n+\tf()\n+\treturn 0, io.EOF\n+}\n+\n+func TestClientTrailers(t *testing.T) {\n+\tdefer afterTest(t)\n+\tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tw.Header().Set(\"Connection\", \"close\")\n+\t\tw.Header().Set(\"Trailer\", \"Server-Trailer-A, Server-Trailer-B\")\n+\t\tw.Header().Add(\"Trailer\", \"Server-Trailer-C\")\n+\n+\t\tvar decl []string\n+\t\tfor k := range r.Trailer {\n+\t\t\tdecl = append(decl, k)\n+\t\t}\n+\t\tsort.Strings(decl)\n+\n+\t\tslurp, err := ioutil.ReadAll(r.Body)\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"Server reading request body: %v\", err)\n+\t\t}\n+\t\tif string(slurp) != \"foo\" {\n+\t\t\tt.Errorf(\"Server read request body %q; want foo\", slurp)\n+\t\t}\n+\t\tif r.Trailer == nil {\n+\t\t\tio.WriteString(w, \"nil Trailer\")\n+\t\t} else {\n+\t\t\tfmt.Fprintf(w, \"decl: %v, vals: %s, %s\",\n+\t\t\t\tdecl,\n+\t\t\t\tr.Trailer.Get(\"Client-Trailer-A\"),\n+\t\t\t\tr.Trailer.Get(\"Client-Trailer-B\"))\n+\t\t}\n+\n+\t\t// TODO: golang.org/issue/7759: there's no way yet for\n+\t\t// the server to set trailers without hijacking, so do\n+\t\t// that for now, just to test the client.  Later, in\n+\t\t// Go 1.4, it should be implicit that any mutations\n+\t\t// to w.Header() after the initial write are the\n+\t\t// trailers to be sent, if and only if they were\n+\t\t// previously declared with w.Header().Set(\"Trailer\",\n+\t\t// ..keys..)\n+\t\tw.(Flusher).Flush()\n+\t\tconn, buf, _ := w.(Hijacker).Hijack()\n+\t\tt := Header{}\n+\t\tt.Set(\"Server-Trailer-A\", \"valuea\")\n+\t\tt.Set(\"Server-Trailer-C\", \"valuec\") // skipping B\n+\t\tbuf.WriteString(\"0\\r\\n\")            // eof\n+\t\tt.Write(buf)\n+\t\tbuf.WriteString(\"\\r\\n\") // end of trailers\n+\t\tbuf.Flush()\n+\t\tconn.Close()\n+\t}))\n+\tdefer ts.Close()\n+\n+\tvar req *Request\n+\treq, _ = NewRequest(\"POST\", ts.URL, io.MultiReader(\n+\t\teofReaderFunc(func() {\n+\t\t\treq.Trailer[\"Client-Trailer-A\"] = []string{\"valuea\"}\n+\t\t}),\n+\t\tstrings.NewReader(\"foo\"),\n+\t\teofReaderFunc(func() {\n+\t\t\treq.Trailer[\"Client-Trailer-B\"] = []string{\"valueb\"}\n+\t\t}),\n+\t))\n+\treq.Trailer = Header{\n+\t\t\"Client-Trailer-A\": nil, //  to be set later\n+\t\t\"Client-Trailer-B\": nil, //  to be set later\n+\t}\n+\treq.ContentLength = -1\n+\tres, err := DefaultClient.Do(req)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif err := wantBody(res, err, \"decl: [Client-Trailer-A Client-Trailer-B], vals: valuea, valueb\"); err != nil {\n+\t\tt.Error(err)\n+\t}\n+\twant := Header{\n+\t\t\"Server-Trailer-A\": []string{\"valuea\"},\n+\t\t\"Server-Trailer-B\": nil,\n+\t\t\"Server-Trailer-C\": []string{\"valuec\"},\n+\t}\n+\tif !reflect.DeepEqual(res.Trailer, want) {\n+\t\tt.Errorf(\"Response trailers = %#v; want %#v\", res.Trailer, want)\n+\t}\n+}"}, {"sha": "dc60ba87f5f9bf8e19c1ccd769fb0540ace0ceb9", "filename": "libgo/go/net/http/cookie.go", "status": "modified", "additions": 19, "deletions": 37, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -76,11 +76,7 @@ func readSetCookies(h Header) []*Cookie {\n \t\t\t\tattr, val = attr[:j], attr[j+1:]\n \t\t\t}\n \t\t\tlowerAttr := strings.ToLower(attr)\n-\t\t\tparseCookieValueFn := parseCookieValue\n-\t\t\tif lowerAttr == \"expires\" {\n-\t\t\t\tparseCookieValueFn = parseCookieExpiresValue\n-\t\t\t}\n-\t\t\tval, success = parseCookieValueFn(val)\n+\t\t\tval, success = parseCookieValue(val)\n \t\t\tif !success {\n \t\t\t\tc.Unparsed = append(c.Unparsed, parts[i])\n \t\t\t\tcontinue\n@@ -298,12 +294,23 @@ func sanitizeCookieName(n string) string {\n //           ; US-ASCII characters excluding CTLs,\n //           ; whitespace DQUOTE, comma, semicolon,\n //           ; and backslash\n+// We loosen this as spaces and commas are common in cookie values\n+// but we produce a quoted cookie-value in when value starts or ends\n+// with a comma or space.\n+// See http://golang.org/issue/7243 for the discussion.\n func sanitizeCookieValue(v string) string {\n-\treturn sanitizeOrWarn(\"Cookie.Value\", validCookieValueByte, v)\n+\tv = sanitizeOrWarn(\"Cookie.Value\", validCookieValueByte, v)\n+\tif len(v) == 0 {\n+\t\treturn v\n+\t}\n+\tif v[0] == ' ' || v[0] == ',' || v[len(v)-1] == ' ' || v[len(v)-1] == ',' {\n+\t\treturn `\"` + v + `\"`\n+\t}\n+\treturn v\n }\n \n func validCookieValueByte(b byte) bool {\n-\treturn 0x20 < b && b < 0x7f && b != '\"' && b != ',' && b != ';' && b != '\\\\'\n+\treturn 0x20 <= b && b < 0x7f && b != '\"' && b != ';' && b != '\\\\'\n }\n \n // path-av           = \"Path=\" path-value\n@@ -338,38 +345,13 @@ func sanitizeOrWarn(fieldName string, valid func(byte) bool, v string) string {\n \treturn string(buf)\n }\n \n-func unquoteCookieValue(v string) string {\n-\tif len(v) > 1 && v[0] == '\"' && v[len(v)-1] == '\"' {\n-\t\treturn v[1 : len(v)-1]\n-\t}\n-\treturn v\n-}\n-\n-func isCookieByte(c byte) bool {\n-\tswitch {\n-\tcase c == 0x21, 0x23 <= c && c <= 0x2b, 0x2d <= c && c <= 0x3a,\n-\t\t0x3c <= c && c <= 0x5b, 0x5d <= c && c <= 0x7e:\n-\t\treturn true\n-\t}\n-\treturn false\n-}\n-\n-func isCookieExpiresByte(c byte) (ok bool) {\n-\treturn isCookieByte(c) || c == ',' || c == ' '\n-}\n-\n func parseCookieValue(raw string) (string, bool) {\n-\treturn parseCookieValueUsing(raw, isCookieByte)\n-}\n-\n-func parseCookieExpiresValue(raw string) (string, bool) {\n-\treturn parseCookieValueUsing(raw, isCookieExpiresByte)\n-}\n-\n-func parseCookieValueUsing(raw string, validByte func(byte) bool) (string, bool) {\n-\traw = unquoteCookieValue(raw)\n+\t// Strip the quotes, if present.\n+\tif len(raw) > 1 && raw[0] == '\"' && raw[len(raw)-1] == '\"' {\n+\t\traw = raw[1 : len(raw)-1]\n+\t}\n \tfor i := 0; i < len(raw); i++ {\n-\t\tif !validByte(raw[i]) {\n+\t\tif !validCookieValueByte(raw[i]) {\n \t\t\treturn \"\", false\n \t\t}\n \t}"}, {"sha": "f78f37299f4885ed0407a74fa131c32b3cacc646", "filename": "libgo/go/net/http/cookie_test.go", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -52,6 +52,44 @@ var writeSetCookiesTests = []struct {\n \t\t&Cookie{Name: \"cookie-8\", Value: \"eight\", Domain: \"::1\"},\n \t\t\"cookie-8=eight\",\n \t},\n+\t// The \"special\" cookies have values containing commas or spaces which\n+\t// are disallowed by RFC 6265 but are common in the wild.\n+\t{\n+\t\t&Cookie{Name: \"special-1\", Value: \"a z\"},\n+\t\t`special-1=a z`,\n+\t},\n+\t{\n+\t\t&Cookie{Name: \"special-2\", Value: \" z\"},\n+\t\t`special-2=\" z\"`,\n+\t},\n+\t{\n+\t\t&Cookie{Name: \"special-3\", Value: \"a \"},\n+\t\t`special-3=\"a \"`,\n+\t},\n+\t{\n+\t\t&Cookie{Name: \"special-4\", Value: \" \"},\n+\t\t`special-4=\" \"`,\n+\t},\n+\t{\n+\t\t&Cookie{Name: \"special-5\", Value: \"a,z\"},\n+\t\t`special-5=a,z`,\n+\t},\n+\t{\n+\t\t&Cookie{Name: \"special-6\", Value: \",z\"},\n+\t\t`special-6=\",z\"`,\n+\t},\n+\t{\n+\t\t&Cookie{Name: \"special-7\", Value: \"a,\"},\n+\t\t`special-7=\"a,\"`,\n+\t},\n+\t{\n+\t\t&Cookie{Name: \"special-8\", Value: \",\"},\n+\t\t`special-8=\",\"`,\n+\t},\n+\t{\n+\t\t&Cookie{Name: \"empty-value\", Value: \"\"},\n+\t\t`empty-value=`,\n+\t},\n }\n \n func TestWriteSetCookies(t *testing.T) {\n@@ -178,6 +216,40 @@ var readSetCookiesTests = []struct {\n \t\t\tRaw:      \"ASP.NET_SessionId=foo; path=/; HttpOnly\",\n \t\t}},\n \t},\n+\t// Make sure we can properly read back the Set-Cookie headers we create\n+\t// for values containing spaces or commas:\n+\t{\n+\t\tHeader{\"Set-Cookie\": {`special-1=a z`}},\n+\t\t[]*Cookie{{Name: \"special-1\", Value: \"a z\", Raw: `special-1=a z`}},\n+\t},\n+\t{\n+\t\tHeader{\"Set-Cookie\": {`special-2=\" z\"`}},\n+\t\t[]*Cookie{{Name: \"special-2\", Value: \" z\", Raw: `special-2=\" z\"`}},\n+\t},\n+\t{\n+\t\tHeader{\"Set-Cookie\": {`special-3=\"a \"`}},\n+\t\t[]*Cookie{{Name: \"special-3\", Value: \"a \", Raw: `special-3=\"a \"`}},\n+\t},\n+\t{\n+\t\tHeader{\"Set-Cookie\": {`special-4=\" \"`}},\n+\t\t[]*Cookie{{Name: \"special-4\", Value: \" \", Raw: `special-4=\" \"`}},\n+\t},\n+\t{\n+\t\tHeader{\"Set-Cookie\": {`special-5=a,z`}},\n+\t\t[]*Cookie{{Name: \"special-5\", Value: \"a,z\", Raw: `special-5=a,z`}},\n+\t},\n+\t{\n+\t\tHeader{\"Set-Cookie\": {`special-6=\",z\"`}},\n+\t\t[]*Cookie{{Name: \"special-6\", Value: \",z\", Raw: `special-6=\",z\"`}},\n+\t},\n+\t{\n+\t\tHeader{\"Set-Cookie\": {`special-7=a,`}},\n+\t\t[]*Cookie{{Name: \"special-7\", Value: \"a,\", Raw: `special-7=a,`}},\n+\t},\n+\t{\n+\t\tHeader{\"Set-Cookie\": {`special-8=\",\"`}},\n+\t\t[]*Cookie{{Name: \"special-8\", Value: \",\", Raw: `special-8=\",\"`}},\n+\t},\n \n \t// TODO(bradfitz): users have reported seeing this in the\n \t// wild, but do browsers handle it? RFC 6265 just says \"don't\n@@ -264,9 +336,14 @@ func TestCookieSanitizeValue(t *testing.T) {\n \t\tin, want string\n \t}{\n \t\t{\"foo\", \"foo\"},\n-\t\t{\"foo bar\", \"foobar\"},\n+\t\t{\"foo;bar\", \"foobar\"},\n+\t\t{\"foo\\\\bar\", \"foobar\"},\n+\t\t{\"foo\\\"bar\", \"foobar\"},\n \t\t{\"\\x00\\x7e\\x7f\\x80\", \"\\x7e\"},\n \t\t{`\"withquotes\"`, \"withquotes\"},\n+\t\t{\"a z\", \"a z\"},\n+\t\t{\" z\", `\" z\"`},\n+\t\t{\"a \", `\"a \"`},\n \t}\n \tfor _, tt := range tests {\n \t\tif got := sanitizeCookieValue(tt.in); got != tt.want {"}, {"sha": "960563b240945d9547cb4d4c6e87d9a09708b6ff", "filename": "libgo/go/net/http/export_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fexport_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -21,7 +21,7 @@ var ExportAppendTime = appendTime\n func (t *Transport) NumPendingRequestsForTesting() int {\n \tt.reqMu.Lock()\n \tdefer t.reqMu.Unlock()\n-\treturn len(t.reqConn)\n+\treturn len(t.reqCanceler)\n }\n \n func (t *Transport) IdleConnKeysForTesting() (keys []string) {"}, {"sha": "a3beaa33a8604cb35a7258078ef546021438cec6", "filename": "libgo/go/net/http/fcgi/child.go", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Fchild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Fchild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Fchild.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -16,6 +16,7 @@ import (\n \t\"net/http/cgi\"\n \t\"os\"\n \t\"strings\"\n+\t\"sync\"\n \t\"time\"\n )\n \n@@ -126,8 +127,10 @@ func (r *response) Close() error {\n }\n \n type child struct {\n-\tconn     *conn\n-\thandler  http.Handler\n+\tconn    *conn\n+\thandler http.Handler\n+\n+\tmu       sync.Mutex          // protects requests:\n \trequests map[uint16]*request // keyed by request ID\n }\n \n@@ -157,7 +160,9 @@ var errCloseConn = errors.New(\"fcgi: connection should be closed\")\n var emptyBody = ioutil.NopCloser(strings.NewReader(\"\"))\n \n func (c *child) handleRecord(rec *record) error {\n+\tc.mu.Lock()\n \treq, ok := c.requests[rec.h.Id]\n+\tc.mu.Unlock()\n \tif !ok && rec.h.Type != typeBeginRequest && rec.h.Type != typeGetValues {\n \t\t// The spec says to ignore unknown request IDs.\n \t\treturn nil\n@@ -179,7 +184,10 @@ func (c *child) handleRecord(rec *record) error {\n \t\t\tc.conn.writeEndRequest(rec.h.Id, 0, statusUnknownRole)\n \t\t\treturn nil\n \t\t}\n-\t\tc.requests[rec.h.Id] = newRequest(rec.h.Id, br.flags)\n+\t\treq = newRequest(rec.h.Id, br.flags)\n+\t\tc.mu.Lock()\n+\t\tc.requests[rec.h.Id] = req\n+\t\tc.mu.Unlock()\n \t\treturn nil\n \tcase typeParams:\n \t\t// NOTE(eds): Technically a key-value pair can straddle the boundary\n@@ -220,7 +228,9 @@ func (c *child) handleRecord(rec *record) error {\n \t\treturn nil\n \tcase typeAbortRequest:\n \t\tprintln(\"abort\")\n+\t\tc.mu.Lock()\n \t\tdelete(c.requests, rec.h.Id)\n+\t\tc.mu.Unlock()\n \t\tc.conn.writeEndRequest(rec.h.Id, 0, statusRequestComplete)\n \t\tif !req.keepConn {\n \t\t\t// connection will close upon return\n@@ -247,6 +257,9 @@ func (c *child) serveRequest(req *request, body io.ReadCloser) {\n \t\tc.handler.ServeHTTP(r, httpReq)\n \t}\n \tr.Close()\n+\tc.mu.Lock()\n+\tdelete(c.requests, req.reqId)\n+\tc.mu.Unlock()\n \tc.conn.writeEndRequest(req.reqId, 0, statusRequestComplete)\n \n \t// Consume the entire body, so the host isn't still writing to"}, {"sha": "8576cf844a3ca412e4e1a6e296ef90bdea95699a", "filename": "libgo/go/net/http/fs.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Ffs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Ffs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffs.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -527,7 +527,7 @@ func (w *countingWriter) Write(p []byte) (n int, err error) {\n \treturn len(p), nil\n }\n \n-// rangesMIMESize returns the nunber of bytes it takes to encode the\n+// rangesMIMESize returns the number of bytes it takes to encode the\n // provided ranges as a multipart response.\n func rangesMIMESize(ranges []httpRange, contentType string, contentSize int64) (encSize int64) {\n \tvar w countingWriter"}, {"sha": "153b94370f856fd8ce23b8c626468b2b89590ead", "filename": "libgo/go/net/http/header.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fheader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fheader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fheader.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -13,6 +13,8 @@ import (\n \t\"time\"\n )\n \n+var raceEnabled = false // set by race.go\n+\n // A Header represents the key-value pairs in an HTTP header.\n type Header map[string][]string\n "}, {"sha": "299576ba8cf66269c1f55cc11aeef0339164f075", "filename": "libgo/go/net/http/header_test.go", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fheader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fheader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fheader_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -192,9 +192,12 @@ func BenchmarkHeaderWriteSubset(b *testing.B) {\n \t}\n }\n \n-func TestHeaderWriteSubsetMallocs(t *testing.T) {\n+func TestHeaderWriteSubsetAllocs(t *testing.T) {\n \tif testing.Short() {\n-\t\tt.Skip(\"skipping malloc count in short mode\")\n+\t\tt.Skip(\"skipping alloc test in short mode\")\n+\t}\n+\tif raceEnabled {\n+\t\tt.Skip(\"skipping test under race detector\")\n \t}\n \tt.Skip(\"Skipping alloc count test on gccgo\")\n \tif runtime.GOMAXPROCS(0) > 1 {\n@@ -205,6 +208,6 @@ func TestHeaderWriteSubsetMallocs(t *testing.T) {\n \t\ttestHeader.WriteSubset(&buf, nil)\n \t})\n \tif n > 0 {\n-\t\tt.Errorf(\"mallocs = %g; want 0\", n)\n+\t\tt.Errorf(\"allocs = %g; want 0\", n)\n \t}\n }"}, {"sha": "501cc8a999562881be5fa81bd5e24857e418860f", "filename": "libgo/go/net/http/httptest/server_test.go", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fhttptest%2Fserver_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fhttptest%2Fserver_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttptest%2Fserver_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,6 +8,7 @@ import (\n \t\"io/ioutil\"\n \t\"net/http\"\n \t\"testing\"\n+\t\"time\"\n )\n \n func TestServer(t *testing.T) {\n@@ -27,3 +28,25 @@ func TestServer(t *testing.T) {\n \t\tt.Errorf(\"got %q, want hello\", string(got))\n \t}\n }\n+\n+func TestIssue7264(t *testing.T) {\n+\tfor i := 0; i < 1000; i++ {\n+\t\tfunc() {\n+\t\t\tinHandler := make(chan bool, 1)\n+\t\t\tts := NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\t\t\tinHandler <- true\n+\t\t\t}))\n+\t\t\tdefer ts.Close()\n+\t\t\ttr := &http.Transport{\n+\t\t\t\tResponseHeaderTimeout: time.Nanosecond,\n+\t\t\t}\n+\t\t\tdefer tr.CloseIdleConnections()\n+\t\t\tc := &http.Client{Transport: tr}\n+\t\t\tres, err := c.Get(ts.URL)\n+\t\t\t<-inHandler\n+\t\t\tif err == nil {\n+\t\t\t\tres.Body.Close()\n+\t\t\t}\n+\t\t}()\n+\t}\n+}"}, {"sha": "2a7a413d01a2d02ad6176e1f53e760799eed1290", "filename": "libgo/go/net/http/httputil/dump.go", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -7,6 +7,7 @@ package httputil\n import (\n \t\"bufio\"\n \t\"bytes\"\n+\t\"errors\"\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n@@ -106,6 +107,7 @@ func DumpRequestOut(req *http.Request, body bool) ([]byte, error) {\n \t\t\treturn &dumpConn{io.MultiWriter(&buf, pw), dr}, nil\n \t\t},\n \t}\n+\tdefer t.CloseIdleConnections()\n \n \t_, err := t.RoundTrip(reqSend)\n \n@@ -230,26 +232,45 @@ func DumpRequest(req *http.Request, body bool) (dump []byte, err error) {\n \treturn\n }\n \n+// errNoBody is a sentinel error value used by failureToReadBody so we can detect\n+// that the lack of body was intentional.\n+var errNoBody = errors.New(\"sentinel error value\")\n+\n+// failureToReadBody is a io.ReadCloser that just returns errNoBody on\n+// Read.  It's swapped in when we don't actually want to consume the\n+// body, but need a non-nil one, and want to distinguish the error\n+// from reading the dummy body.\n+type failureToReadBody struct{}\n+\n+func (failureToReadBody) Read([]byte) (int, error) { return 0, errNoBody }\n+func (failureToReadBody) Close() error             { return nil }\n+\n+var emptyBody = ioutil.NopCloser(strings.NewReader(\"\"))\n+\n // DumpResponse is like DumpRequest but dumps a response.\n func DumpResponse(resp *http.Response, body bool) (dump []byte, err error) {\n \tvar b bytes.Buffer\n \tsave := resp.Body\n \tsavecl := resp.ContentLength\n-\tif !body || resp.Body == nil {\n-\t\tresp.Body = nil\n-\t\tresp.ContentLength = 0\n+\n+\tif !body {\n+\t\tresp.Body = failureToReadBody{}\n+\t} else if resp.Body == nil {\n+\t\tresp.Body = emptyBody\n \t} else {\n \t\tsave, resp.Body, err = drainBody(resp.Body)\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n \t}\n \terr = resp.Write(&b)\n+\tif err == errNoBody {\n+\t\terr = nil\n+\t}\n \tresp.Body = save\n \tresp.ContentLength = savecl\n \tif err != nil {\n-\t\treturn\n+\t\treturn nil, err\n \t}\n-\tdump = b.Bytes()\n-\treturn\n+\treturn b.Bytes(), nil\n }"}, {"sha": "e1ffb3935ac036a0a422796b9bd91266f91bf901", "filename": "libgo/go/net/http/httputil/dump_test.go", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -11,6 +11,8 @@ import (\n \t\"io/ioutil\"\n \t\"net/http\"\n \t\"net/url\"\n+\t\"runtime\"\n+\t\"strings\"\n \t\"testing\"\n )\n \n@@ -112,6 +114,7 @@ var dumpTests = []dumpTest{\n }\n \n func TestDumpRequest(t *testing.T) {\n+\tnumg0 := runtime.NumGoroutine()\n \tfor i, tt := range dumpTests {\n \t\tsetBody := func() {\n \t\t\tif tt.Body == nil {\n@@ -155,6 +158,9 @@ func TestDumpRequest(t *testing.T) {\n \t\t\t}\n \t\t}\n \t}\n+\tif dg := runtime.NumGoroutine() - numg0; dg > 4 {\n+\t\tt.Errorf(\"Unexpectedly large number of new goroutines: %d new\", dg)\n+\t}\n }\n \n func chunk(s string) string {\n@@ -176,3 +182,82 @@ func mustNewRequest(method, url string, body io.Reader) *http.Request {\n \t}\n \treturn req\n }\n+\n+var dumpResTests = []struct {\n+\tres  *http.Response\n+\tbody bool\n+\twant string\n+}{\n+\t{\n+\t\tres: &http.Response{\n+\t\t\tStatus:        \"200 OK\",\n+\t\t\tStatusCode:    200,\n+\t\t\tProto:         \"HTTP/1.1\",\n+\t\t\tProtoMajor:    1,\n+\t\t\tProtoMinor:    1,\n+\t\t\tContentLength: 50,\n+\t\t\tHeader: http.Header{\n+\t\t\t\t\"Foo\": []string{\"Bar\"},\n+\t\t\t},\n+\t\t\tBody: ioutil.NopCloser(strings.NewReader(\"foo\")), // shouldn't be used\n+\t\t},\n+\t\tbody: false, // to verify we see 50, not empty or 3.\n+\t\twant: `HTTP/1.1 200 OK\n+Content-Length: 50\n+Foo: Bar`,\n+\t},\n+\n+\t{\n+\t\tres: &http.Response{\n+\t\t\tStatus:        \"200 OK\",\n+\t\t\tStatusCode:    200,\n+\t\t\tProto:         \"HTTP/1.1\",\n+\t\t\tProtoMajor:    1,\n+\t\t\tProtoMinor:    1,\n+\t\t\tContentLength: 3,\n+\t\t\tBody:          ioutil.NopCloser(strings.NewReader(\"foo\")),\n+\t\t},\n+\t\tbody: true,\n+\t\twant: `HTTP/1.1 200 OK\n+Content-Length: 3\n+\n+foo`,\n+\t},\n+\n+\t{\n+\t\tres: &http.Response{\n+\t\t\tStatus:           \"200 OK\",\n+\t\t\tStatusCode:       200,\n+\t\t\tProto:            \"HTTP/1.1\",\n+\t\t\tProtoMajor:       1,\n+\t\t\tProtoMinor:       1,\n+\t\t\tContentLength:    -1,\n+\t\t\tBody:             ioutil.NopCloser(strings.NewReader(\"foo\")),\n+\t\t\tTransferEncoding: []string{\"chunked\"},\n+\t\t},\n+\t\tbody: true,\n+\t\twant: `HTTP/1.1 200 OK\n+Transfer-Encoding: chunked\n+\n+3\n+foo\n+0`,\n+\t},\n+}\n+\n+func TestDumpResponse(t *testing.T) {\n+\tfor i, tt := range dumpResTests {\n+\t\tgotb, err := DumpResponse(tt.res, tt.body)\n+\t\tif err != nil {\n+\t\t\tt.Errorf(\"%d. DumpResponse = %v\", i, err)\n+\t\t\tcontinue\n+\t\t}\n+\t\tgot := string(gotb)\n+\t\tgot = strings.TrimSpace(got)\n+\t\tgot = strings.Replace(got, \"\\r\", \"\", -1)\n+\n+\t\tif got != tt.want {\n+\t\t\tt.Errorf(\"%d.\\nDumpResponse got:\\n%s\\n\\nWant:\\n%s\\n\", i, got, tt.want)\n+\t\t}\n+\t}\n+}"}, {"sha": "987bcc96ba1d16c8dd26ffd3296f287c1ddb1c74", "filename": "libgo/go/net/http/httputil/persist.go", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fpersist.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fpersist.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fpersist.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -31,8 +31,8 @@ var errClosed = errors.New(\"i/o operation on closed connection\")\n // i.e. requests can be read out of sync (but in the same order) while the\n // respective responses are sent.\n //\n-// ServerConn is low-level and should not be needed by most applications.\n-// See Server.\n+// ServerConn is low-level and old. Applications should instead use Server\n+// in the net/http package.\n type ServerConn struct {\n \tlk              sync.Mutex // read-write protects the following fields\n \tc               net.Conn\n@@ -45,8 +45,11 @@ type ServerConn struct {\n \tpipe textproto.Pipeline\n }\n \n-// NewServerConn returns a new ServerConn reading and writing c.  If r is not\n+// NewServerConn returns a new ServerConn reading and writing c. If r is not\n // nil, it is the buffer to use when reading c.\n+//\n+// ServerConn is low-level and old. Applications should instead use Server\n+// in the net/http package.\n func NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn {\n \tif r == nil {\n \t\tr = bufio.NewReader(c)\n@@ -221,8 +224,8 @@ func (sc *ServerConn) Write(req *http.Request, resp *http.Response) error {\n // supports hijacking the connection calling Hijack to\n // regain control of the underlying net.Conn and deal with it as desired.\n //\n-// ClientConn is low-level and should not be needed by most applications.\n-// See Client.\n+// ClientConn is low-level and old. Applications should instead use\n+// Client or Transport in the net/http package.\n type ClientConn struct {\n \tlk              sync.Mutex // read-write protects the following fields\n \tc               net.Conn\n@@ -238,6 +241,9 @@ type ClientConn struct {\n \n // NewClientConn returns a new ClientConn reading and writing c.  If r is not\n // nil, it is the buffer to use when reading c.\n+//\n+// ClientConn is low-level and old. Applications should use Client or\n+// Transport in the net/http package.\n func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn {\n \tif r == nil {\n \t\tr = bufio.NewReader(c)\n@@ -252,6 +258,9 @@ func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn {\n \n // NewProxyClientConn works like NewClientConn but writes Requests\n // using Request's WriteProxy method.\n+//\n+// New code should not use NewProxyClientConn. See Client or\n+// Transport in the net/http package instead.\n func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn {\n \tcc := NewClientConn(c, r)\n \tcc.writeReq = (*http.Request).WriteProxy"}, {"sha": "b6aed3792b63304555e7bc967d3fa00c86e331b5", "filename": "libgo/go/net/http/proxy_test.go", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fproxy_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fproxy_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fproxy_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -35,12 +35,8 @@ var UseProxyTests = []struct {\n }\n \n func TestUseProxy(t *testing.T) {\n-\toldenv := os.Getenv(\"NO_PROXY\")\n-\tdefer os.Setenv(\"NO_PROXY\", oldenv)\n-\n-\tno_proxy := \"foobar.com, .barbaz.net\"\n-\tos.Setenv(\"NO_PROXY\", no_proxy)\n-\n+\tResetProxyEnv()\n+\tos.Setenv(\"NO_PROXY\", \"foobar.com, .barbaz.net\")\n \tfor _, test := range UseProxyTests {\n \t\tif useProxy(test.host+\":80\") != test.match {\n \t\t\tt.Errorf(\"useProxy(%v) = %v, want %v\", test.host, !test.match, test.match)\n@@ -76,3 +72,10 @@ func TestCacheKeys(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+func ResetProxyEnv() {\n+\tfor _, v := range []string{\"HTTP_PROXY\", \"http_proxy\", \"NO_PROXY\", \"no_proxy\"} {\n+\t\tos.Setenv(v, \"\")\n+\t}\n+\tResetCachedEnvironment()\n+}"}, {"sha": "766503967c3c4954baf815855529f72c19fad06e", "filename": "libgo/go/net/http/race.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Frace.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Frace.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Frace.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build race\n+\n+package http\n+\n+func init() {\n+\traceEnabled = true\n+}"}, {"sha": "a67092066ad2045d23ea66a44f81b3e7d3d36292", "filename": "libgo/go/net/http/request.go", "status": "modified", "additions": 62, "deletions": 50, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Frequest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Frequest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Frequest.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -69,18 +69,31 @@ var reqWriteExcludeHeader = map[string]bool{\n \n // A Request represents an HTTP request received by a server\n // or to be sent by a client.\n+//\n+// The field semantics differ slightly between client and server\n+// usage. In addition to the notes on the fields below, see the\n+// documentation for Request.Write and RoundTripper.\n type Request struct {\n-\tMethod string // GET, POST, PUT, etc.\n+\t// Method specifies the HTTP method (GET, POST, PUT, etc.).\n+\t// For client requests an empty string means GET.\n+\tMethod string\n \n-\t// URL is created from the URI supplied on the Request-Line\n-\t// as stored in RequestURI.\n+\t// URL specifies either the URI being requested (for server\n+\t// requests) or the URL to access (for client requests).\n+\t//\n+\t// For server requests the URL is parsed from the URI\n+\t// supplied on the Request-Line as stored in RequestURI.  For\n+\t// most requests, fields other than Path and RawQuery will be\n+\t// empty. (See RFC 2616, Section 5.1.2)\n \t//\n-\t// For most requests, fields other than Path and RawQuery\n-\t// will be empty. (See RFC 2616, Section 5.1.2)\n+\t// For client requests, the URL's Host specifies the server to\n+\t// connect to, while the Request's Host field optionally\n+\t// specifies the Host header value to send in the HTTP\n+\t// request.\n \tURL *url.URL\n \n \t// The protocol version for incoming requests.\n-\t// Outgoing requests always use HTTP/1.1.\n+\t// Client requests always use HTTP/1.1.\n \tProto      string // \"HTTP/1.0\"\n \tProtoMajor int    // 1\n \tProtoMinor int    // 0\n@@ -104,15 +117,20 @@ type Request struct {\n \t// The request parser implements this by canonicalizing the\n \t// name, making the first character and any characters\n \t// following a hyphen uppercase and the rest lowercase.\n+\t//\n+\t// For client requests certain headers are automatically\n+\t// added and may override values in Header.\n+\t//\n+\t// See the documentation for the Request.Write method.\n \tHeader Header\n \n \t// Body is the request's body.\n \t//\n-\t// For client requests, a nil body means the request has no\n+\t// For client requests a nil body means the request has no\n \t// body, such as a GET request. The HTTP Client's Transport\n \t// is responsible for calling the Close method.\n \t//\n-\t// For server requests, the Request Body is always non-nil\n+\t// For server requests the Request Body is always non-nil\n \t// but will return EOF immediately when no body is present.\n \t// The Server will close the request body. The ServeHTTP\n \t// Handler does not need to.\n@@ -122,7 +140,7 @@ type Request struct {\n \t// The value -1 indicates that the length is unknown.\n \t// Values >= 0 indicate that the given number of bytes may\n \t// be read from Body.\n-\t// For outgoing requests, a value of 0 means unknown if Body is not nil.\n+\t// For client requests, a value of 0 means unknown if Body is not nil.\n \tContentLength int64\n \n \t// TransferEncoding lists the transfer encodings from outermost to\n@@ -133,13 +151,18 @@ type Request struct {\n \tTransferEncoding []string\n \n \t// Close indicates whether to close the connection after\n-\t// replying to this request.\n+\t// replying to this request (for servers) or after sending\n+\t// the request (for clients).\n \tClose bool\n \n-\t// The host on which the URL is sought.\n-\t// Per RFC 2616, this is either the value of the Host: header\n-\t// or the host name given in the URL itself.\n+\t// For server requests Host specifies the host on which the\n+\t// URL is sought. Per RFC 2616, this is either the value of\n+\t// the \"Host\" header or the host name given in the URL itself.\n \t// It may be of the form \"host:port\".\n+\t//\n+\t// For client requests Host optionally overrides the Host\n+\t// header to send. If empty, the Request.Write method uses\n+\t// the value of URL.Host.\n \tHost string\n \n \t// Form contains the parsed form data, including both the URL\n@@ -159,12 +182,24 @@ type Request struct {\n \t// The HTTP client ignores MultipartForm and uses Body instead.\n \tMultipartForm *multipart.Form\n \n-\t// Trailer maps trailer keys to values.  Like for Header, if the\n-\t// response has multiple trailer lines with the same key, they will be\n-\t// concatenated, delimited by commas.\n-\t// For server requests, Trailer is only populated after Body has been\n-\t// closed or fully consumed.\n-\t// Trailer support is only partially complete.\n+\t// Trailer specifies additional headers that are sent after the request\n+\t// body.\n+\t//\n+\t// For server requests the Trailer map initially contains only the\n+\t// trailer keys, with nil values. (The client declares which trailers it\n+\t// will later send.)  While the handler is reading from Body, it must\n+\t// not reference Trailer. After reading from Body returns EOF, Trailer\n+\t// can be read again and will contain non-nil values, if they were sent\n+\t// by the client.\n+\t//\n+\t// For client requests Trailer must be initialized to a map containing\n+\t// the trailer keys to later send. The values may be nil or their final\n+\t// values. The ContentLength must be 0 or -1, to send a chunked request.\n+\t// After the HTTP request is sent the map values can be updated while\n+\t// the request body is read. Once the body returns EOF, the caller must\n+\t// not mutate Trailer.\n+\t//\n+\t// Few HTTP clients, servers, or proxies support HTTP trailers.\n \tTrailer Header\n \n \t// RemoteAddr allows HTTP servers and other software to record\n@@ -382,7 +417,6 @@ func (req *Request) write(w io.Writer, usingProxy bool, extraHeaders Header) err\n \t\treturn err\n \t}\n \n-\t// TODO: split long values?  (If so, should share code with Conn.Write)\n \terr = req.Header.WriteSubset(w, reqWriteExcludeHeader)\n \tif err != nil {\n \t\treturn err\n@@ -584,32 +618,6 @@ func ReadRequest(b *bufio.Reader) (req *Request, err error) {\n \n \tfixPragmaCacheControl(req.Header)\n \n-\t// TODO: Parse specific header values:\n-\t//\tAccept\n-\t//\tAccept-Encoding\n-\t//\tAccept-Language\n-\t//\tAuthorization\n-\t//\tCache-Control\n-\t//\tConnection\n-\t//\tDate\n-\t//\tExpect\n-\t//\tFrom\n-\t//\tIf-Match\n-\t//\tIf-Modified-Since\n-\t//\tIf-None-Match\n-\t//\tIf-Range\n-\t//\tIf-Unmodified-Since\n-\t//\tMax-Forwards\n-\t//\tProxy-Authorization\n-\t//\tReferer [sic]\n-\t//\tTE (transfer-codings)\n-\t//\tTrailer\n-\t//\tTransfer-Encoding\n-\t//\tUpgrade\n-\t//\tUser-Agent\n-\t//\tVia\n-\t//\tWarning\n-\n \terr = readTransfer(req, b)\n \tif err != nil {\n \t\treturn nil, err\n@@ -728,7 +736,7 @@ func parsePostForm(r *Request) (vs url.Values, err error) {\n func (r *Request) ParseForm() error {\n \tvar err error\n \tif r.PostForm == nil {\n-\t\tif r.Method == \"POST\" || r.Method == \"PUT\" {\n+\t\tif r.Method == \"POST\" || r.Method == \"PUT\" || r.Method == \"PATCH\" {\n \t\t\tr.PostForm, err = parsePostForm(r)\n \t\t}\n \t\tif r.PostForm == nil {\n@@ -781,9 +789,7 @@ func (r *Request) ParseMultipartForm(maxMemory int64) error {\n \t}\n \n \tmr, err := r.multipartReader()\n-\tif err == ErrNotMultipart {\n-\t\treturn nil\n-\t} else if err != nil {\n+\tif err != nil {\n \t\treturn err\n \t}\n \n@@ -861,3 +867,9 @@ func (r *Request) wantsHttp10KeepAlive() bool {\n func (r *Request) wantsClose() bool {\n \treturn hasToken(r.Header.get(\"Connection\"), \"close\")\n }\n+\n+func (r *Request) closeBody() {\n+\tif r.Body != nil {\n+\t\tr.Body.Close()\n+\t}\n+}"}, {"sha": "b9fa3c2bfc4f68fae9fb4df302325971dd356355", "filename": "libgo/go/net/http/request_test.go", "status": "modified", "additions": 79, "deletions": 8, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Frequest_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Frequest_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Frequest_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -60,6 +60,37 @@ func TestPostQuery(t *testing.T) {\n \t}\n }\n \n+func TestPatchQuery(t *testing.T) {\n+\treq, _ := NewRequest(\"PATCH\", \"http://www.google.com/search?q=foo&q=bar&both=x&prio=1&empty=not\",\n+\t\tstrings.NewReader(\"z=post&both=y&prio=2&empty=\"))\n+\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded; param=value\")\n+\n+\tif q := req.FormValue(\"q\"); q != \"foo\" {\n+\t\tt.Errorf(`req.FormValue(\"q\") = %q, want \"foo\"`, q)\n+\t}\n+\tif z := req.FormValue(\"z\"); z != \"post\" {\n+\t\tt.Errorf(`req.FormValue(\"z\") = %q, want \"post\"`, z)\n+\t}\n+\tif bq, found := req.PostForm[\"q\"]; found {\n+\t\tt.Errorf(`req.PostForm[\"q\"] = %q, want no entry in map`, bq)\n+\t}\n+\tif bz := req.PostFormValue(\"z\"); bz != \"post\" {\n+\t\tt.Errorf(`req.PostFormValue(\"z\") = %q, want \"post\"`, bz)\n+\t}\n+\tif qs := req.Form[\"q\"]; !reflect.DeepEqual(qs, []string{\"foo\", \"bar\"}) {\n+\t\tt.Errorf(`req.Form[\"q\"] = %q, want [\"foo\", \"bar\"]`, qs)\n+\t}\n+\tif both := req.Form[\"both\"]; !reflect.DeepEqual(both, []string{\"y\", \"x\"}) {\n+\t\tt.Errorf(`req.Form[\"both\"] = %q, want [\"y\", \"x\"]`, both)\n+\t}\n+\tif prio := req.FormValue(\"prio\"); prio != \"2\" {\n+\t\tt.Errorf(`req.FormValue(\"prio\") = %q, want \"2\" (from body)`, prio)\n+\t}\n+\tif empty := req.FormValue(\"empty\"); empty != \"\" {\n+\t\tt.Errorf(`req.FormValue(\"empty\") = %q, want \"\" (from body)`, empty)\n+\t}\n+}\n+\n type stringMap map[string][]string\n type parseContentTypeTest struct {\n \tshouldError bool\n@@ -123,7 +154,25 @@ func TestMultipartReader(t *testing.T) {\n \treq.Header = Header{\"Content-Type\": {\"text/plain\"}}\n \tmultipart, err = req.MultipartReader()\n \tif multipart != nil {\n-\t\tt.Errorf(\"unexpected multipart for text/plain\")\n+\t\tt.Error(\"unexpected multipart for text/plain\")\n+\t}\n+}\n+\n+func TestParseMultipartForm(t *testing.T) {\n+\treq := &Request{\n+\t\tMethod: \"POST\",\n+\t\tHeader: Header{\"Content-Type\": {`multipart/form-data; boundary=\"foo123\"`}},\n+\t\tBody:   ioutil.NopCloser(new(bytes.Buffer)),\n+\t}\n+\terr := req.ParseMultipartForm(25)\n+\tif err == nil {\n+\t\tt.Error(\"expected multipart EOF, got nil\")\n+\t}\n+\n+\treq.Header = Header{\"Content-Type\": {\"text/plain\"}}\n+\terr = req.ParseMultipartForm(25)\n+\tif err != ErrNotMultipart {\n+\t\tt.Error(\"expected ErrNotMultipart for text/plain\")\n \t}\n }\n \n@@ -189,16 +238,38 @@ func TestMultipartRequestAuto(t *testing.T) {\n \tvalidateTestMultipartContents(t, req, true)\n }\n \n-func TestEmptyMultipartRequest(t *testing.T) {\n-\t// Test that FormValue and FormFile automatically invoke\n-\t// ParseMultipartForm and return the right values.\n-\treq, err := NewRequest(\"GET\", \"/\", nil)\n-\tif err != nil {\n-\t\tt.Errorf(\"NewRequest err = %q\", err)\n-\t}\n+func TestMissingFileMultipartRequest(t *testing.T) {\n+\t// Test that FormFile returns an error if\n+\t// the named file is missing.\n+\treq := newTestMultipartRequest(t)\n \ttestMissingFile(t, req)\n }\n \n+// Test that FormValue invokes ParseMultipartForm.\n+func TestFormValueCallsParseMultipartForm(t *testing.T) {\n+\treq, _ := NewRequest(\"POST\", \"http://www.google.com/\", strings.NewReader(\"z=post\"))\n+\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded; param=value\")\n+\tif req.Form != nil {\n+\t\tt.Fatal(\"Unexpected request Form, want nil\")\n+\t}\n+\treq.FormValue(\"z\")\n+\tif req.Form == nil {\n+\t\tt.Fatal(\"ParseMultipartForm not called by FormValue\")\n+\t}\n+}\n+\n+// Test that FormFile invokes ParseMultipartForm.\n+func TestFormFileCallsParseMultipartForm(t *testing.T) {\n+\treq := newTestMultipartRequest(t)\n+\tif req.Form != nil {\n+\t\tt.Fatal(\"Unexpected request Form, want nil\")\n+\t}\n+\treq.FormFile(\"\")\n+\tif req.Form == nil {\n+\t\tt.Fatal(\"ParseMultipartForm not called by FormFile\")\n+\t}\n+}\n+\n // Test that ParseMultipartForm errors if called\n // after MultipartReader on the same request.\n func TestParseMultipartFormOrder(t *testing.T) {"}, {"sha": "dc0e204cac98c7c2d86686ff76c438604513e8dc", "filename": "libgo/go/net/http/requestwrite_test.go", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Frequestwrite_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Frequestwrite_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Frequestwrite_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -310,6 +310,46 @@ var reqWriteTests = []reqWriteTest{\n \t\tWantError: errors.New(\"http: Request.ContentLength=5 with nil Body\"),\n \t},\n \n+\t// Request with a 0 ContentLength and a body with 1 byte content and an error.\n+\t{\n+\t\tReq: Request{\n+\t\t\tMethod:        \"POST\",\n+\t\t\tURL:           mustParseURL(\"/\"),\n+\t\t\tHost:          \"example.com\",\n+\t\t\tProtoMajor:    1,\n+\t\t\tProtoMinor:    1,\n+\t\t\tContentLength: 0, // as if unset by user\n+\t\t},\n+\n+\t\tBody: func() io.ReadCloser {\n+\t\t\terr := errors.New(\"Custom reader error\")\n+\t\t\terrReader := &errorReader{err}\n+\t\t\treturn ioutil.NopCloser(io.MultiReader(strings.NewReader(\"x\"), errReader))\n+\t\t},\n+\n+\t\tWantError: errors.New(\"Custom reader error\"),\n+\t},\n+\n+\t// Request with a 0 ContentLength and a body without content and an error.\n+\t{\n+\t\tReq: Request{\n+\t\t\tMethod:        \"POST\",\n+\t\t\tURL:           mustParseURL(\"/\"),\n+\t\t\tHost:          \"example.com\",\n+\t\t\tProtoMajor:    1,\n+\t\t\tProtoMinor:    1,\n+\t\t\tContentLength: 0, // as if unset by user\n+\t\t},\n+\n+\t\tBody: func() io.ReadCloser {\n+\t\t\terr := errors.New(\"Custom reader error\")\n+\t\t\terrReader := &errorReader{err}\n+\t\t\treturn ioutil.NopCloser(errReader)\n+\t\t},\n+\n+\t\tWantError: errors.New(\"Custom reader error\"),\n+\t},\n+\n \t// Verify that DumpRequest preserves the HTTP version number, doesn't add a Host,\n \t// and doesn't add a User-Agent.\n \t{"}, {"sha": "5d2c39080e4b9176b10c69e8f50a27431107e494", "filename": "libgo/go/net/http/response.go", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,6 +8,8 @@ package http\n \n import (\n \t\"bufio\"\n+\t\"bytes\"\n+\t\"crypto/tls\"\n \t\"errors\"\n \t\"io\"\n \t\"net/textproto\"\n@@ -45,7 +47,8 @@ type Response struct {\n \t//\n \t// The http Client and Transport guarantee that Body is always\n \t// non-nil, even on responses without a body or responses with\n-\t// a zero-lengthed body.\n+\t// a zero-length body. It is the caller's responsibility to\n+\t// close Body.\n \t//\n \t// The Body is automatically dechunked if the server replied\n \t// with a \"chunked\" Transfer-Encoding.\n@@ -74,6 +77,12 @@ type Response struct {\n \t// Request's Body is nil (having already been consumed).\n \t// This is only populated for Client requests.\n \tRequest *Request\n+\n+\t// TLS contains information about the TLS connection on which the\n+\t// response was received. It is nil for unencrypted responses.\n+\t// The pointer is shared between responses and should not be\n+\t// modified.\n+\tTLS *tls.ConnectionState\n }\n \n // Cookies parses and returns the cookies set in the Set-Cookie headers.\n@@ -192,7 +201,6 @@ func (r *Response) ProtoAtLeast(major, minor int) bool {\n //\n // Body is closed after it is sent.\n func (r *Response) Write(w io.Writer) error {\n-\n \t// Status line\n \ttext := r.Status\n \tif text == \"\" {\n@@ -205,10 +213,45 @@ func (r *Response) Write(w io.Writer) error {\n \tprotoMajor, protoMinor := strconv.Itoa(r.ProtoMajor), strconv.Itoa(r.ProtoMinor)\n \tstatusCode := strconv.Itoa(r.StatusCode) + \" \"\n \ttext = strings.TrimPrefix(text, statusCode)\n-\tio.WriteString(w, \"HTTP/\"+protoMajor+\".\"+protoMinor+\" \"+statusCode+text+\"\\r\\n\")\n+\tif _, err := io.WriteString(w, \"HTTP/\"+protoMajor+\".\"+protoMinor+\" \"+statusCode+text+\"\\r\\n\"); err != nil {\n+\t\treturn err\n+\t}\n+\n+\t// Clone it, so we can modify r1 as needed.\n+\tr1 := new(Response)\n+\t*r1 = *r\n+\tif r1.ContentLength == 0 && r1.Body != nil {\n+\t\t// Is it actually 0 length? Or just unknown?\n+\t\tvar buf [1]byte\n+\t\tn, err := r1.Body.Read(buf[:])\n+\t\tif err != nil && err != io.EOF {\n+\t\t\treturn err\n+\t\t}\n+\t\tif n == 0 {\n+\t\t\t// Reset it to a known zero reader, in case underlying one\n+\t\t\t// is unhappy being read repeatedly.\n+\t\t\tr1.Body = eofReader\n+\t\t} else {\n+\t\t\tr1.ContentLength = -1\n+\t\t\tr1.Body = struct {\n+\t\t\t\tio.Reader\n+\t\t\t\tio.Closer\n+\t\t\t}{\n+\t\t\t\tio.MultiReader(bytes.NewReader(buf[:1]), r.Body),\n+\t\t\t\tr.Body,\n+\t\t\t}\n+\t\t}\n+\t}\n+\t// If we're sending a non-chunked HTTP/1.1 response without a\n+\t// content-length, the only way to do that is the old HTTP/1.0\n+\t// way, by noting the EOF with a connection close, so we need\n+\t// to set Close.\n+\tif r1.ContentLength == -1 && !r1.Close && r1.ProtoAtLeast(1, 1) && !chunked(r1.TransferEncoding) {\n+\t\tr1.Close = true\n+\t}\n \n \t// Process Body,ContentLength,Close,Trailer\n-\ttw, err := newTransferWriter(r)\n+\ttw, err := newTransferWriter(r1)\n \tif err != nil {\n \t\treturn err\n \t}\n@@ -223,8 +266,19 @@ func (r *Response) Write(w io.Writer) error {\n \t\treturn err\n \t}\n \n+\t// contentLengthAlreadySent may have been already sent for\n+\t// POST/PUT requests, even if zero length. See Issue 8180.\n+\tcontentLengthAlreadySent := tw.shouldSendContentLength()\n+\tif r1.ContentLength == 0 && !chunked(r1.TransferEncoding) && !contentLengthAlreadySent {\n+\t\tif _, err := io.WriteString(w, \"Content-Length: 0\\r\\n\"); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t}\n+\n \t// End-of-header\n-\tio.WriteString(w, \"\\r\\n\")\n+\tif _, err := io.WriteString(w, \"\\r\\n\"); err != nil {\n+\t\treturn err\n+\t}\n \n \t// Write body and trailer\n \terr = tw.WriteBody(w)"}, {"sha": "4b8946f7ae4821e59b280f692d69e3e9799af464", "filename": "libgo/go/net/http/response_test.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -29,6 +29,10 @@ func dummyReq(method string) *Request {\n \treturn &Request{Method: method}\n }\n \n+func dummyReq11(method string) *Request {\n+\treturn &Request{Method: method, Proto: \"HTTP/1.1\", ProtoMajor: 1, ProtoMinor: 1}\n+}\n+\n var respTests = []respTest{\n \t// Unchunked response without Content-Length.\n \t{"}, {"sha": "585b13b8504191f2c4db333f39712e54cfca9f53", "filename": "libgo/go/net/http/responsewrite_test.go", "status": "modified", "additions": 117, "deletions": 1, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fresponsewrite_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fresponsewrite_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fresponsewrite_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -26,7 +26,7 @@ func TestResponseWrite(t *testing.T) {\n \t\t\t\tProtoMinor:    0,\n \t\t\t\tRequest:       dummyReq(\"GET\"),\n \t\t\t\tHeader:        Header{},\n-\t\t\t\tBody:          ioutil.NopCloser(bytes.NewBufferString(\"abcdef\")),\n+\t\t\t\tBody:          ioutil.NopCloser(strings.NewReader(\"abcdef\")),\n \t\t\t\tContentLength: 6,\n \t\t\t},\n \n@@ -49,6 +49,106 @@ func TestResponseWrite(t *testing.T) {\n \t\t\t\t\"\\r\\n\" +\n \t\t\t\t\"abcdef\",\n \t\t},\n+\t\t// HTTP/1.1 response with unknown length and Connection: close\n+\t\t{\n+\t\t\tResponse{\n+\t\t\t\tStatusCode:    200,\n+\t\t\t\tProtoMajor:    1,\n+\t\t\t\tProtoMinor:    1,\n+\t\t\t\tRequest:       dummyReq(\"GET\"),\n+\t\t\t\tHeader:        Header{},\n+\t\t\t\tBody:          ioutil.NopCloser(strings.NewReader(\"abcdef\")),\n+\t\t\t\tContentLength: -1,\n+\t\t\t\tClose:         true,\n+\t\t\t},\n+\t\t\t\"HTTP/1.1 200 OK\\r\\n\" +\n+\t\t\t\t\"Connection: close\\r\\n\" +\n+\t\t\t\t\"\\r\\n\" +\n+\t\t\t\t\"abcdef\",\n+\t\t},\n+\t\t// HTTP/1.1 response with unknown length and not setting connection: close\n+\t\t{\n+\t\t\tResponse{\n+\t\t\t\tStatusCode:    200,\n+\t\t\t\tProtoMajor:    1,\n+\t\t\t\tProtoMinor:    1,\n+\t\t\t\tRequest:       dummyReq11(\"GET\"),\n+\t\t\t\tHeader:        Header{},\n+\t\t\t\tBody:          ioutil.NopCloser(strings.NewReader(\"abcdef\")),\n+\t\t\t\tContentLength: -1,\n+\t\t\t\tClose:         false,\n+\t\t\t},\n+\t\t\t\"HTTP/1.1 200 OK\\r\\n\" +\n+\t\t\t\t\"Connection: close\\r\\n\" +\n+\t\t\t\t\"\\r\\n\" +\n+\t\t\t\t\"abcdef\",\n+\t\t},\n+\t\t// HTTP/1.1 response with unknown length and not setting connection: close, but\n+\t\t// setting chunked.\n+\t\t{\n+\t\t\tResponse{\n+\t\t\t\tStatusCode:       200,\n+\t\t\t\tProtoMajor:       1,\n+\t\t\t\tProtoMinor:       1,\n+\t\t\t\tRequest:          dummyReq11(\"GET\"),\n+\t\t\t\tHeader:           Header{},\n+\t\t\t\tBody:             ioutil.NopCloser(strings.NewReader(\"abcdef\")),\n+\t\t\t\tContentLength:    -1,\n+\t\t\t\tTransferEncoding: []string{\"chunked\"},\n+\t\t\t\tClose:            false,\n+\t\t\t},\n+\t\t\t\"HTTP/1.1 200 OK\\r\\n\" +\n+\t\t\t\t\"Transfer-Encoding: chunked\\r\\n\\r\\n\" +\n+\t\t\t\t\"6\\r\\nabcdef\\r\\n0\\r\\n\\r\\n\",\n+\t\t},\n+\t\t// HTTP/1.1 response 0 content-length, and nil body\n+\t\t{\n+\t\t\tResponse{\n+\t\t\t\tStatusCode:    200,\n+\t\t\t\tProtoMajor:    1,\n+\t\t\t\tProtoMinor:    1,\n+\t\t\t\tRequest:       dummyReq11(\"GET\"),\n+\t\t\t\tHeader:        Header{},\n+\t\t\t\tBody:          nil,\n+\t\t\t\tContentLength: 0,\n+\t\t\t\tClose:         false,\n+\t\t\t},\n+\t\t\t\"HTTP/1.1 200 OK\\r\\n\" +\n+\t\t\t\t\"Content-Length: 0\\r\\n\" +\n+\t\t\t\t\"\\r\\n\",\n+\t\t},\n+\t\t// HTTP/1.1 response 0 content-length, and non-nil empty body\n+\t\t{\n+\t\t\tResponse{\n+\t\t\t\tStatusCode:    200,\n+\t\t\t\tProtoMajor:    1,\n+\t\t\t\tProtoMinor:    1,\n+\t\t\t\tRequest:       dummyReq11(\"GET\"),\n+\t\t\t\tHeader:        Header{},\n+\t\t\t\tBody:          ioutil.NopCloser(strings.NewReader(\"\")),\n+\t\t\t\tContentLength: 0,\n+\t\t\t\tClose:         false,\n+\t\t\t},\n+\t\t\t\"HTTP/1.1 200 OK\\r\\n\" +\n+\t\t\t\t\"Content-Length: 0\\r\\n\" +\n+\t\t\t\t\"\\r\\n\",\n+\t\t},\n+\t\t// HTTP/1.1 response 0 content-length, and non-nil non-empty body\n+\t\t{\n+\t\t\tResponse{\n+\t\t\t\tStatusCode:    200,\n+\t\t\t\tProtoMajor:    1,\n+\t\t\t\tProtoMinor:    1,\n+\t\t\t\tRequest:       dummyReq11(\"GET\"),\n+\t\t\t\tHeader:        Header{},\n+\t\t\t\tBody:          ioutil.NopCloser(strings.NewReader(\"foo\")),\n+\t\t\t\tContentLength: 0,\n+\t\t\t\tClose:         false,\n+\t\t\t},\n+\t\t\t\"HTTP/1.1 200 OK\\r\\n\" +\n+\t\t\t\t\"Connection: close\\r\\n\" +\n+\t\t\t\t\"\\r\\nfoo\",\n+\t\t},\n \t\t// HTTP/1.1, chunked coding; empty trailer; close\n \t\t{\n \t\t\tResponse{\n@@ -91,6 +191,22 @@ func TestResponseWrite(t *testing.T) {\n \t\t\t\t\"Foo: Bar Baz\\r\\n\" +\n \t\t\t\t\"\\r\\n\",\n \t\t},\n+\n+\t\t// Want a single Content-Length header. Fixing issue 8180 where\n+\t\t// there were two.\n+\t\t{\n+\t\t\tResponse{\n+\t\t\t\tStatusCode:       StatusOK,\n+\t\t\t\tProtoMajor:       1,\n+\t\t\t\tProtoMinor:       1,\n+\t\t\t\tRequest:          &Request{Method: \"POST\"},\n+\t\t\t\tHeader:           Header{},\n+\t\t\t\tContentLength:    0,\n+\t\t\t\tTransferEncoding: nil,\n+\t\t\t\tBody:             nil,\n+\t\t\t},\n+\t\t\t\"HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\\r\\n\",\n+\t\t},\n \t}\n \n \tfor i := range respWriteTests {"}, {"sha": "8371dd82f584eaddc677479098ba7e381e7e3717", "filename": "libgo/go/net/http/serve_test.go", "status": "modified", "additions": 323, "deletions": 47, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -851,7 +851,9 @@ func TestTLSHandshakeTimeout(t *testing.T) {\n \t}\n \tdefer afterTest(t)\n \tts := httptest.NewUnstartedServer(HandlerFunc(func(w ResponseWriter, r *Request) {}))\n+\terrc := make(chanWriter, 10) // but only expecting 1\n \tts.Config.ReadTimeout = 250 * time.Millisecond\n+\tts.Config.ErrorLog = log.New(errc, \"\", 0)\n \tts.StartTLS()\n \tdefer ts.Close()\n \tconn, err := net.Dial(\"tcp\", ts.Listener.Addr().String())\n@@ -866,6 +868,14 @@ func TestTLSHandshakeTimeout(t *testing.T) {\n \t\t\tt.Errorf(\"Read = %d, %v; want an error and no bytes\", n, err)\n \t\t}\n \t})\n+\tselect {\n+\tcase v := <-errc:\n+\t\tif !strings.Contains(v, \"timeout\") && !strings.Contains(v, \"TLS handshake\") {\n+\t\t\tt.Errorf(\"expected a TLS handshake timeout error; got %q\", v)\n+\t\t}\n+\tcase <-time.After(5 * time.Second):\n+\t\tt.Errorf(\"timeout waiting for logged error\")\n+\t}\n }\n \n func TestTLSServer(t *testing.T) {\n@@ -878,6 +888,7 @@ func TestTLSServer(t *testing.T) {\n \t\t\t}\n \t\t}\n \t}))\n+\tts.Config.ErrorLog = log.New(ioutil.Discard, \"\", 0)\n \tdefer ts.Close()\n \n \t// Connect an idle TCP connection to this server before we run\n@@ -922,31 +933,50 @@ func TestTLSServer(t *testing.T) {\n }\n \n type serverExpectTest struct {\n-\tcontentLength    int    // of request body\n+\tcontentLength    int // of request body\n+\tchunked          bool\n \texpectation      string // e.g. \"100-continue\"\n \treadBody         bool   // whether handler should read the body (if false, sends StatusUnauthorized)\n \texpectedResponse string // expected substring in first line of http response\n }\n \n+func expectTest(contentLength int, expectation string, readBody bool, expectedResponse string) serverExpectTest {\n+\treturn serverExpectTest{\n+\t\tcontentLength:    contentLength,\n+\t\texpectation:      expectation,\n+\t\treadBody:         readBody,\n+\t\texpectedResponse: expectedResponse,\n+\t}\n+}\n+\n var serverExpectTests = []serverExpectTest{\n \t// Normal 100-continues, case-insensitive.\n-\t{100, \"100-continue\", true, \"100 Continue\"},\n-\t{100, \"100-cOntInUE\", true, \"100 Continue\"},\n+\texpectTest(100, \"100-continue\", true, \"100 Continue\"),\n+\texpectTest(100, \"100-cOntInUE\", true, \"100 Continue\"),\n \n \t// No 100-continue.\n-\t{100, \"\", true, \"200 OK\"},\n+\texpectTest(100, \"\", true, \"200 OK\"),\n \n \t// 100-continue but requesting client to deny us,\n \t// so it never reads the body.\n-\t{100, \"100-continue\", false, \"401 Unauthorized\"},\n+\texpectTest(100, \"100-continue\", false, \"401 Unauthorized\"),\n \t// Likewise without 100-continue:\n-\t{100, \"\", false, \"401 Unauthorized\"},\n+\texpectTest(100, \"\", false, \"401 Unauthorized\"),\n \n \t// Non-standard expectations are failures\n-\t{0, \"a-pony\", false, \"417 Expectation Failed\"},\n+\texpectTest(0, \"a-pony\", false, \"417 Expectation Failed\"),\n \n-\t// Expect-100 requested but no body\n-\t{0, \"100-continue\", true, \"400 Bad Request\"},\n+\t// Expect-100 requested but no body (is apparently okay: Issue 7625)\n+\texpectTest(0, \"100-continue\", true, \"200 OK\"),\n+\t// Expect-100 requested but handler doesn't read the body\n+\texpectTest(0, \"100-continue\", false, \"401 Unauthorized\"),\n+\t// Expect-100 continue with no body, but a chunked body.\n+\t{\n+\t\texpectation:      \"100-continue\",\n+\t\treadBody:         true,\n+\t\tchunked:          true,\n+\t\texpectedResponse: \"100 Continue\",\n+\t},\n }\n \n // Tests that the server responds to the \"Expect\" request header\n@@ -975,21 +1005,38 @@ func TestServerExpect(t *testing.T) {\n \n \t\t// Only send the body immediately if we're acting like an HTTP client\n \t\t// that doesn't send 100-continue expectations.\n-\t\twriteBody := test.contentLength > 0 && strings.ToLower(test.expectation) != \"100-continue\"\n+\t\twriteBody := test.contentLength != 0 && strings.ToLower(test.expectation) != \"100-continue\"\n \n \t\tgo func() {\n+\t\t\tcontentLen := fmt.Sprintf(\"Content-Length: %d\", test.contentLength)\n+\t\t\tif test.chunked {\n+\t\t\t\tcontentLen = \"Transfer-Encoding: chunked\"\n+\t\t\t}\n \t\t\t_, err := fmt.Fprintf(conn, \"POST /?readbody=%v HTTP/1.1\\r\\n\"+\n \t\t\t\t\"Connection: close\\r\\n\"+\n-\t\t\t\t\"Content-Length: %d\\r\\n\"+\n+\t\t\t\t\"%s\\r\\n\"+\n \t\t\t\t\"Expect: %s\\r\\nHost: foo\\r\\n\\r\\n\",\n-\t\t\t\ttest.readBody, test.contentLength, test.expectation)\n+\t\t\t\ttest.readBody, contentLen, test.expectation)\n \t\t\tif err != nil {\n \t\t\t\tt.Errorf(\"On test %#v, error writing request headers: %v\", test, err)\n \t\t\t\treturn\n \t\t\t}\n \t\t\tif writeBody {\n+\t\t\t\tvar targ io.WriteCloser = struct {\n+\t\t\t\t\tio.Writer\n+\t\t\t\t\tio.Closer\n+\t\t\t\t}{\n+\t\t\t\t\tconn,\n+\t\t\t\t\tioutil.NopCloser(nil),\n+\t\t\t\t}\n+\t\t\t\tif test.chunked {\n+\t\t\t\t\ttarg = httputil.NewChunkedWriter(conn)\n+\t\t\t\t}\n \t\t\t\tbody := strings.Repeat(\"A\", test.contentLength)\n-\t\t\t\t_, err = fmt.Fprint(conn, body)\n+\t\t\t\t_, err = fmt.Fprint(targ, body)\n+\t\t\t\tif err == nil {\n+\t\t\t\t\terr = targ.Close()\n+\t\t\t\t}\n \t\t\t\tif err != nil {\n \t\t\t\t\tif !test.readBody {\n \t\t\t\t\t\t// Server likely already hung up on us.\n@@ -2097,7 +2144,7 @@ func TestCodesPreventingContentTypeAndBody(t *testing.T) {\n \t\t\tgot := ht.rawResponse(req)\n \t\t\twantStatus := fmt.Sprintf(\"%d %s\", code, StatusText(code))\n \t\t\tif !strings.Contains(got, wantStatus) {\n-\t\t\t\tt.Errorf(\"Code %d: Wanted %q Modified for %q: %s\", code, req, got)\n+\t\t\t\tt.Errorf(\"Code %d: Wanted %q Modified for %q: %s\", code, wantStatus, req, got)\n \t\t\t} else if strings.Contains(got, \"Content-Length\") {\n \t\t\t\tt.Errorf(\"Code %d: Got a Content-Length from %q: %s\", code, req, got)\n \t\t\t} else if strings.Contains(got, \"stuff\") {\n@@ -2107,6 +2154,21 @@ func TestCodesPreventingContentTypeAndBody(t *testing.T) {\n \t}\n }\n \n+func TestContentTypeOkayOn204(t *testing.T) {\n+\tht := newHandlerTest(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tw.Header().Set(\"Content-Length\", \"123\") // suppressed\n+\t\tw.Header().Set(\"Content-Type\", \"foo/bar\")\n+\t\tw.WriteHeader(204)\n+\t}))\n+\tgot := ht.rawResponse(\"GET / HTTP/1.1\")\n+\tif !strings.Contains(got, \"Content-Type: foo/bar\") {\n+\t\tt.Errorf(\"Response = %q; want Content-Type: foo/bar\", got)\n+\t}\n+\tif strings.Contains(got, \"Content-Length: 123\") {\n+\t\tt.Errorf(\"Response = %q; don't want a Content-Length\", got)\n+\t}\n+}\n+\n // Issue 6995\n // A server Handler can receive a Request, and then turn around and\n // give a copy of that Request.Body out to the Transport (e.g. any\n@@ -2225,8 +2287,8 @@ func TestResponseWriterWriteStringAllocs(t *testing.T) {\n \t\t\tw.Write([]byte(\"Hello world\"))\n \t\t}\n \t}))\n-\tbefore := testing.AllocsPerRun(25, func() { ht.rawResponse(\"GET / HTTP/1.0\") })\n-\tafter := testing.AllocsPerRun(25, func() { ht.rawResponse(\"GET /s HTTP/1.0\") })\n+\tbefore := testing.AllocsPerRun(50, func() { ht.rawResponse(\"GET / HTTP/1.0\") })\n+\tafter := testing.AllocsPerRun(50, func() { ht.rawResponse(\"GET /s HTTP/1.0\") })\n \tif int(after) >= int(before) {\n \t\tt.Errorf(\"WriteString allocs of %v >= Write allocs of %v\", after, before)\n \t}\n@@ -2245,6 +2307,230 @@ func TestAppendTime(t *testing.T) {\n \t}\n }\n \n+func TestServerConnState(t *testing.T) {\n+\tdefer afterTest(t)\n+\thandler := map[string]func(w ResponseWriter, r *Request){\n+\t\t\"/\": func(w ResponseWriter, r *Request) {\n+\t\t\tfmt.Fprintf(w, \"Hello.\")\n+\t\t},\n+\t\t\"/close\": func(w ResponseWriter, r *Request) {\n+\t\t\tw.Header().Set(\"Connection\", \"close\")\n+\t\t\tfmt.Fprintf(w, \"Hello.\")\n+\t\t},\n+\t\t\"/hijack\": func(w ResponseWriter, r *Request) {\n+\t\t\tc, _, _ := w.(Hijacker).Hijack()\n+\t\t\tc.Write([]byte(\"HTTP/1.0 200 OK\\r\\nConnection: close\\r\\n\\r\\nHello.\"))\n+\t\t\tc.Close()\n+\t\t},\n+\t\t\"/hijack-panic\": func(w ResponseWriter, r *Request) {\n+\t\t\tc, _, _ := w.(Hijacker).Hijack()\n+\t\t\tc.Write([]byte(\"HTTP/1.0 200 OK\\r\\nConnection: close\\r\\n\\r\\nHello.\"))\n+\t\t\tc.Close()\n+\t\t\tpanic(\"intentional panic\")\n+\t\t},\n+\t}\n+\tts := httptest.NewUnstartedServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\thandler[r.URL.Path](w, r)\n+\t}))\n+\tdefer ts.Close()\n+\n+\tvar mu sync.Mutex // guard stateLog and connID\n+\tvar stateLog = map[int][]ConnState{}\n+\tvar connID = map[net.Conn]int{}\n+\n+\tts.Config.ErrorLog = log.New(ioutil.Discard, \"\", 0)\n+\tts.Config.ConnState = func(c net.Conn, state ConnState) {\n+\t\tif c == nil {\n+\t\t\tt.Errorf(\"nil conn seen in state %s\", state)\n+\t\t\treturn\n+\t\t}\n+\t\tmu.Lock()\n+\t\tdefer mu.Unlock()\n+\t\tid, ok := connID[c]\n+\t\tif !ok {\n+\t\t\tid = len(connID) + 1\n+\t\t\tconnID[c] = id\n+\t\t}\n+\t\tstateLog[id] = append(stateLog[id], state)\n+\t}\n+\tts.Start()\n+\n+\tmustGet(t, ts.URL+\"/\")\n+\tmustGet(t, ts.URL+\"/close\")\n+\n+\tmustGet(t, ts.URL+\"/\")\n+\tmustGet(t, ts.URL+\"/\", \"Connection\", \"close\")\n+\n+\tmustGet(t, ts.URL+\"/hijack\")\n+\tmustGet(t, ts.URL+\"/hijack-panic\")\n+\n+\t// New->Closed\n+\t{\n+\t\tc, err := net.Dial(\"tcp\", ts.Listener.Addr().String())\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\tc.Close()\n+\t}\n+\n+\t// New->Active->Closed\n+\t{\n+\t\tc, err := net.Dial(\"tcp\", ts.Listener.Addr().String())\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\tif _, err := io.WriteString(c, \"BOGUS REQUEST\\r\\n\\r\\n\"); err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\tc.Close()\n+\t}\n+\n+\t// New->Idle->Closed\n+\t{\n+\t\tc, err := net.Dial(\"tcp\", ts.Listener.Addr().String())\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\tif _, err := io.WriteString(c, \"GET / HTTP/1.1\\r\\nHost: foo\\r\\n\\r\\n\"); err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\tres, err := ReadResponse(bufio.NewReader(c), nil)\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\tif _, err := io.Copy(ioutil.Discard, res.Body); err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\tc.Close()\n+\t}\n+\n+\twant := map[int][]ConnState{\n+\t\t1: []ConnState{StateNew, StateActive, StateIdle, StateActive, StateClosed},\n+\t\t2: []ConnState{StateNew, StateActive, StateIdle, StateActive, StateClosed},\n+\t\t3: []ConnState{StateNew, StateActive, StateHijacked},\n+\t\t4: []ConnState{StateNew, StateActive, StateHijacked},\n+\t\t5: []ConnState{StateNew, StateClosed},\n+\t\t6: []ConnState{StateNew, StateActive, StateClosed},\n+\t\t7: []ConnState{StateNew, StateActive, StateIdle, StateClosed},\n+\t}\n+\tlogString := func(m map[int][]ConnState) string {\n+\t\tvar b bytes.Buffer\n+\t\tfor id, l := range m {\n+\t\t\tfmt.Fprintf(&b, \"Conn %d: \", id)\n+\t\t\tfor _, s := range l {\n+\t\t\t\tfmt.Fprintf(&b, \"%s \", s)\n+\t\t\t}\n+\t\t\tb.WriteString(\"\\n\")\n+\t\t}\n+\t\treturn b.String()\n+\t}\n+\n+\tfor i := 0; i < 5; i++ {\n+\t\ttime.Sleep(time.Duration(i) * 50 * time.Millisecond)\n+\t\tmu.Lock()\n+\t\tmatch := reflect.DeepEqual(stateLog, want)\n+\t\tmu.Unlock()\n+\t\tif match {\n+\t\t\treturn\n+\t\t}\n+\t}\n+\n+\tmu.Lock()\n+\tt.Errorf(\"Unexpected events.\\nGot log: %s\\n   Want: %s\\n\", logString(stateLog), logString(want))\n+\tmu.Unlock()\n+}\n+\n+func mustGet(t *testing.T, url string, headers ...string) {\n+\treq, err := NewRequest(\"GET\", url, nil)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tfor len(headers) > 0 {\n+\t\treq.Header.Add(headers[0], headers[1])\n+\t\theaders = headers[2:]\n+\t}\n+\tres, err := DefaultClient.Do(req)\n+\tif err != nil {\n+\t\tt.Errorf(\"Error fetching %s: %v\", url, err)\n+\t\treturn\n+\t}\n+\t_, err = ioutil.ReadAll(res.Body)\n+\tdefer res.Body.Close()\n+\tif err != nil {\n+\t\tt.Errorf(\"Error reading %s: %v\", url, err)\n+\t}\n+}\n+\n+func TestServerKeepAlivesEnabled(t *testing.T) {\n+\tdefer afterTest(t)\n+\tts := httptest.NewUnstartedServer(HandlerFunc(func(w ResponseWriter, r *Request) {}))\n+\tts.Config.SetKeepAlivesEnabled(false)\n+\tts.Start()\n+\tdefer ts.Close()\n+\tres, err := Get(ts.URL)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer res.Body.Close()\n+\tif !res.Close {\n+\t\tt.Errorf(\"Body.Close == false; want true\")\n+\t}\n+}\n+\n+// golang.org/issue/7856\n+func TestServerEmptyBodyRace(t *testing.T) {\n+\tdefer afterTest(t)\n+\tvar n int32\n+\tts := httptest.NewServer(HandlerFunc(func(rw ResponseWriter, req *Request) {\n+\t\tatomic.AddInt32(&n, 1)\n+\t}))\n+\tdefer ts.Close()\n+\tvar wg sync.WaitGroup\n+\tconst reqs = 20\n+\tfor i := 0; i < reqs; i++ {\n+\t\twg.Add(1)\n+\t\tgo func() {\n+\t\t\tdefer wg.Done()\n+\t\t\tres, err := Get(ts.URL)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Error(err)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tdefer res.Body.Close()\n+\t\t\t_, err = io.Copy(ioutil.Discard, res.Body)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Error(err)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}()\n+\t}\n+\twg.Wait()\n+\tif got := atomic.LoadInt32(&n); got != reqs {\n+\t\tt.Errorf(\"handler ran %d times; want %d\", got, reqs)\n+\t}\n+}\n+\n+func TestServerConnStateNew(t *testing.T) {\n+\tsawNew := false // if the test is buggy, we'll race on this variable.\n+\tsrv := &Server{\n+\t\tConnState: func(c net.Conn, state ConnState) {\n+\t\t\tif state == StateNew {\n+\t\t\t\tsawNew = true // testing that this write isn't racy\n+\t\t\t}\n+\t\t},\n+\t\tHandler: HandlerFunc(func(w ResponseWriter, r *Request) {}), // irrelevant\n+\t}\n+\tsrv.Serve(&oneConnListener{\n+\t\tconn: &rwTestConn{\n+\t\t\tReader: strings.NewReader(\"GET / HTTP/1.1\\r\\nHost: foo\\r\\n\\r\\n\"),\n+\t\t\tWriter: ioutil.Discard,\n+\t\t},\n+\t})\n+\tif !sawNew { // testing that this read isn't racy\n+\t\tt.Error(\"StateNew not seen\")\n+\t}\n+}\n+\n func BenchmarkClientServer(b *testing.B) {\n \tb.ReportAllocs()\n \tb.StopTimer()\n@@ -2259,7 +2545,6 @@ func BenchmarkClientServer(b *testing.B) {\n \t\tif err != nil {\n \t\t\tb.Fatal(\"Get:\", err)\n \t\t}\n-\t\tdefer res.Body.Close()\n \t\tall, err := ioutil.ReadAll(res.Body)\n \t\tres.Body.Close()\n \t\tif err != nil {\n@@ -2282,42 +2567,33 @@ func BenchmarkClientServerParallel64(b *testing.B) {\n \tbenchmarkClientServerParallel(b, 64)\n }\n \n-func benchmarkClientServerParallel(b *testing.B, conc int) {\n+func benchmarkClientServerParallel(b *testing.B, parallelism int) {\n \tb.ReportAllocs()\n-\tb.StopTimer()\n \tts := httptest.NewServer(HandlerFunc(func(rw ResponseWriter, r *Request) {\n \t\tfmt.Fprintf(rw, \"Hello world.\\n\")\n \t}))\n \tdefer ts.Close()\n-\tb.StartTimer()\n-\n-\tnumProcs := runtime.GOMAXPROCS(-1) * conc\n-\tvar wg sync.WaitGroup\n-\twg.Add(numProcs)\n-\tn := int32(b.N)\n-\tfor p := 0; p < numProcs; p++ {\n-\t\tgo func() {\n-\t\t\tfor atomic.AddInt32(&n, -1) >= 0 {\n-\t\t\t\tres, err := Get(ts.URL)\n-\t\t\t\tif err != nil {\n-\t\t\t\t\tb.Logf(\"Get: %v\", err)\n-\t\t\t\t\tcontinue\n-\t\t\t\t}\n-\t\t\t\tall, err := ioutil.ReadAll(res.Body)\n-\t\t\t\tres.Body.Close()\n-\t\t\t\tif err != nil {\n-\t\t\t\t\tb.Logf(\"ReadAll: %v\", err)\n-\t\t\t\t\tcontinue\n-\t\t\t\t}\n-\t\t\t\tbody := string(all)\n-\t\t\t\tif body != \"Hello world.\\n\" {\n-\t\t\t\t\tpanic(\"Got body: \" + body)\n-\t\t\t\t}\n+\tb.ResetTimer()\n+\tb.SetParallelism(parallelism)\n+\tb.RunParallel(func(pb *testing.PB) {\n+\t\tfor pb.Next() {\n+\t\t\tres, err := Get(ts.URL)\n+\t\t\tif err != nil {\n+\t\t\t\tb.Logf(\"Get: %v\", err)\n+\t\t\t\tcontinue\n \t\t\t}\n-\t\t\twg.Done()\n-\t\t}()\n-\t}\n-\twg.Wait()\n+\t\t\tall, err := ioutil.ReadAll(res.Body)\n+\t\t\tres.Body.Close()\n+\t\t\tif err != nil {\n+\t\t\t\tb.Logf(\"ReadAll: %v\", err)\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tbody := string(all)\n+\t\t\tif body != \"Hello world.\\n\" {\n+\t\t\t\tpanic(\"Got body: \" + body)\n+\t\t\t}\n+\t\t}\n+\t})\n }\n \n // A benchmark for profiling the server without the HTTP client code."}, {"sha": "eae097eb8e91c1e6046dc8ddac0ab35941795296", "filename": "libgo/go/net/http/server.go", "status": "modified", "additions": 135, "deletions": 29, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -22,6 +22,7 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \t\"sync\"\n+\t\"sync/atomic\"\n \t\"time\"\n )\n \n@@ -138,6 +139,7 @@ func (c *conn) hijack() (rwc net.Conn, buf *bufio.ReadWriter, err error) {\n \tbuf = c.buf\n \tc.rwc = nil\n \tc.buf = nil\n+\tc.setState(rwc, StateHijacked)\n \treturn\n }\n \n@@ -496,6 +498,10 @@ func (srv *Server) maxHeaderBytes() int {\n \treturn DefaultMaxHeaderBytes\n }\n \n+func (srv *Server) initialLimitedReaderSize() int64 {\n+\treturn int64(srv.maxHeaderBytes()) + 4096 // bufio slop\n+}\n+\n // wrapper around io.ReaderCloser which on first read, sends an\n // HTTP/1.1 100 Continue header\n type expectContinueReader struct {\n@@ -566,7 +572,7 @@ func (c *conn) readRequest() (w *response, err error) {\n \t\t}()\n \t}\n \n-\tc.lr.N = int64(c.server.maxHeaderBytes()) + 4096 /* bufio slop */\n+\tc.lr.N = c.server.initialLimitedReaderSize()\n \tvar req *Request\n \tif req, err = ReadRequest(c.buf.Reader); err != nil {\n \t\tif c.lr.N == 0 {\n@@ -614,11 +620,11 @@ const maxPostHandlerReadBytes = 256 << 10\n \n func (w *response) WriteHeader(code int) {\n \tif w.conn.hijacked() {\n-\t\tlog.Print(\"http: response.WriteHeader on hijacked connection\")\n+\t\tw.conn.server.logf(\"http: response.WriteHeader on hijacked connection\")\n \t\treturn\n \t}\n \tif w.wroteHeader {\n-\t\tlog.Print(\"http: multiple response.WriteHeader calls\")\n+\t\tw.conn.server.logf(\"http: multiple response.WriteHeader calls\")\n \t\treturn\n \t}\n \tw.wroteHeader = true\n@@ -633,7 +639,7 @@ func (w *response) WriteHeader(code int) {\n \t\tif err == nil && v >= 0 {\n \t\t\tw.contentLength = v\n \t\t} else {\n-\t\t\tlog.Printf(\"http: invalid Content-Length of %q\", cl)\n+\t\t\tw.conn.server.logf(\"http: invalid Content-Length of %q\", cl)\n \t\t\tw.handlerHeader.Del(\"Content-Length\")\n \t\t}\n \t}\n@@ -703,6 +709,7 @@ func (cw *chunkWriter) writeHeader(p []byte) {\n \tcw.wroteHeader = true\n \n \tw := cw.res\n+\tkeepAlivesEnabled := w.conn.server.doKeepAlives()\n \tisHEAD := w.req.Method == \"HEAD\"\n \n \t// header is written out to w.conn.buf below. Depending on the\n@@ -750,7 +757,7 @@ func (cw *chunkWriter) writeHeader(p []byte) {\n \n \t// If this was an HTTP/1.0 request with keep-alive and we sent a\n \t// Content-Length back, we can make this a keep-alive response ...\n-\tif w.req.wantsHttp10KeepAlive() {\n+\tif w.req.wantsHttp10KeepAlive() && keepAlivesEnabled {\n \t\tsentLength := header.get(\"Content-Length\") != \"\"\n \t\tif sentLength && header.get(\"Connection\") == \"keep-alive\" {\n \t\t\tw.closeAfterReply = false\n@@ -769,7 +776,7 @@ func (cw *chunkWriter) writeHeader(p []byte) {\n \t\tw.closeAfterReply = true\n \t}\n \n-\tif header.get(\"Connection\") == \"close\" {\n+\tif header.get(\"Connection\") == \"close\" || !keepAlivesEnabled {\n \t\tw.closeAfterReply = true\n \t}\n \n@@ -792,18 +799,16 @@ func (cw *chunkWriter) writeHeader(p []byte) {\n \t}\n \n \tcode := w.status\n-\tif !bodyAllowedForStatus(code) {\n-\t\t// Must not have body.\n-\t\t// RFC 2616 section 10.3.5: \"the response MUST NOT include other entity-headers\"\n-\t\tfor _, k := range []string{\"Content-Type\", \"Content-Length\", \"Transfer-Encoding\"} {\n-\t\t\tdelHeader(k)\n-\t\t}\n-\t} else {\n+\tif bodyAllowedForStatus(code) {\n \t\t// If no content type, apply sniffing algorithm to body.\n \t\t_, haveType := header[\"Content-Type\"]\n \t\tif !haveType {\n \t\t\tsetHeader.contentType = DetectContentType(p)\n \t\t}\n+\t} else {\n+\t\tfor _, k := range suppressedHeaders(code) {\n+\t\t\tdelHeader(k)\n+\t\t}\n \t}\n \n \tif _, ok := header[\"Date\"]; !ok {\n@@ -815,7 +820,7 @@ func (cw *chunkWriter) writeHeader(p []byte) {\n \tif hasCL && hasTE && te != \"identity\" {\n \t\t// TODO: return an error if WriteHeader gets a return parameter\n \t\t// For now just ignore the Content-Length.\n-\t\tlog.Printf(\"http: WriteHeader called with both Transfer-Encoding of %q and a Content-Length of %d\",\n+\t\tw.conn.server.logf(\"http: WriteHeader called with both Transfer-Encoding of %q and a Content-Length of %d\",\n \t\t\tte, w.contentLength)\n \t\tdelHeader(\"Content-Length\")\n \t\thasCL = false\n@@ -851,7 +856,7 @@ func (cw *chunkWriter) writeHeader(p []byte) {\n \t\treturn\n \t}\n \n-\tif w.closeAfterReply && !hasToken(cw.header.get(\"Connection\"), \"close\") {\n+\tif w.closeAfterReply && (!keepAlivesEnabled || !hasToken(cw.header.get(\"Connection\"), \"close\")) {\n \t\tdelHeader(\"Connection\")\n \t\tif w.req.ProtoAtLeast(1, 1) {\n \t\t\tsetHeader.connection = \"close\"\n@@ -961,7 +966,7 @@ func (w *response) WriteString(data string) (n int, err error) {\n // either dataB or dataS is non-zero.\n func (w *response) write(lenData int, dataB []byte, dataS string) (n int, err error) {\n \tif w.conn.hijacked() {\n-\t\tlog.Print(\"http: response.Write on hijacked connection\")\n+\t\tw.conn.server.logf(\"http: response.Write on hijacked connection\")\n \t\treturn 0, ErrHijacked\n \t}\n \tif !w.wroteHeader {\n@@ -1079,17 +1084,25 @@ func validNPN(proto string) bool {\n \treturn true\n }\n \n+func (c *conn) setState(nc net.Conn, state ConnState) {\n+\tif hook := c.server.ConnState; hook != nil {\n+\t\thook(nc, state)\n+\t}\n+}\n+\n // Serve a new connection.\n func (c *conn) serve() {\n+\torigConn := c.rwc // copy it before it's set nil on Close or Hijack\n \tdefer func() {\n \t\tif err := recover(); err != nil {\n \t\t\tconst size = 64 << 10\n \t\t\tbuf := make([]byte, size)\n \t\t\tbuf = buf[:runtime.Stack(buf, false)]\n-\t\t\tlog.Printf(\"http: panic serving %v: %v\\n%s\", c.remoteAddr, err, buf)\n+\t\t\tc.server.logf(\"http: panic serving %v: %v\\n%s\", c.remoteAddr, err, buf)\n \t\t}\n \t\tif !c.hijacked() {\n \t\t\tc.close()\n+\t\t\tc.setState(origConn, StateClosed)\n \t\t}\n \t}()\n \n@@ -1101,6 +1114,7 @@ func (c *conn) serve() {\n \t\t\tc.rwc.SetWriteDeadline(time.Now().Add(d))\n \t\t}\n \t\tif err := tlsConn.Handshake(); err != nil {\n+\t\t\tc.server.logf(\"http: TLS handshake error from %s: %v\", c.rwc.RemoteAddr(), err)\n \t\t\treturn\n \t\t}\n \t\tc.tlsState = new(tls.ConnectionState)\n@@ -1116,6 +1130,10 @@ func (c *conn) serve() {\n \n \tfor {\n \t\tw, err := c.readRequest()\n+\t\tif c.lr.N != c.server.initialLimitedReaderSize() {\n+\t\t\t// If we read any bytes off the wire, we're active.\n+\t\t\tc.setState(c.rwc, StateActive)\n+\t\t}\n \t\tif err != nil {\n \t\t\tif err == errTooLarge {\n \t\t\t\t// Their HTTP client may or may not be\n@@ -1138,16 +1156,10 @@ func (c *conn) serve() {\n \t\t// Expect 100 Continue support\n \t\treq := w.req\n \t\tif req.expectsContinue() {\n-\t\t\tif req.ProtoAtLeast(1, 1) {\n+\t\t\tif req.ProtoAtLeast(1, 1) && req.ContentLength != 0 {\n \t\t\t\t// Wrap the Body reader with one that replies on the connection\n \t\t\t\treq.Body = &expectContinueReader{readCloser: req.Body, resp: w}\n \t\t\t}\n-\t\t\tif req.ContentLength == 0 {\n-\t\t\t\tw.Header().Set(\"Connection\", \"close\")\n-\t\t\t\tw.WriteHeader(StatusBadRequest)\n-\t\t\t\tw.finishRequest()\n-\t\t\t\tbreak\n-\t\t\t}\n \t\t\treq.Header.Del(\"Expect\")\n \t\t} else if req.Header.get(\"Expect\") != \"\" {\n \t\t\tw.sendExpectationFailed()\n@@ -1170,6 +1182,7 @@ func (c *conn) serve() {\n \t\t\t}\n \t\t\tbreak\n \t\t}\n+\t\tc.setState(c.rwc, StateIdle)\n \t}\n }\n \n@@ -1564,6 +1577,7 @@ func Serve(l net.Listener, handler Handler) error {\n }\n \n // A Server defines parameters for running an HTTP server.\n+// The zero value for Server is a valid configuration.\n type Server struct {\n \tAddr           string        // TCP address to listen on, \":http\" if empty\n \tHandler        Handler       // handler to invoke, http.DefaultServeMux if nil\n@@ -1580,6 +1594,66 @@ type Server struct {\n \t// and RemoteAddr if not already set.  The connection is\n \t// automatically closed when the function returns.\n \tTLSNextProto map[string]func(*Server, *tls.Conn, Handler)\n+\n+\t// ConnState specifies an optional callback function that is\n+\t// called when a client connection changes state. See the\n+\t// ConnState type and associated constants for details.\n+\tConnState func(net.Conn, ConnState)\n+\n+\t// ErrorLog specifies an optional logger for errors accepting\n+\t// connections and unexpected behavior from handlers.\n+\t// If nil, logging goes to os.Stderr via the log package's\n+\t// standard logger.\n+\tErrorLog *log.Logger\n+\n+\tdisableKeepAlives int32 // accessed atomically.\n+}\n+\n+// A ConnState represents the state of a client connection to a server.\n+// It's used by the optional Server.ConnState hook.\n+type ConnState int\n+\n+const (\n+\t// StateNew represents a new connection that is expected to\n+\t// send a request immediately. Connections begin at this\n+\t// state and then transition to either StateActive or\n+\t// StateClosed.\n+\tStateNew ConnState = iota\n+\n+\t// StateActive represents a connection that has read 1 or more\n+\t// bytes of a request. The Server.ConnState hook for\n+\t// StateActive fires before the request has entered a handler\n+\t// and doesn't fire again until the request has been\n+\t// handled. After the request is handled, the state\n+\t// transitions to StateClosed, StateHijacked, or StateIdle.\n+\tStateActive\n+\n+\t// StateIdle represents a connection that has finished\n+\t// handling a request and is in the keep-alive state, waiting\n+\t// for a new request. Connections transition from StateIdle\n+\t// to either StateActive or StateClosed.\n+\tStateIdle\n+\n+\t// StateHijacked represents a hijacked connection.\n+\t// This is a terminal state. It does not transition to StateClosed.\n+\tStateHijacked\n+\n+\t// StateClosed represents a closed connection.\n+\t// This is a terminal state. Hijacked connections do not\n+\t// transition to StateClosed.\n+\tStateClosed\n+)\n+\n+var stateName = map[ConnState]string{\n+\tStateNew:      \"new\",\n+\tStateActive:   \"active\",\n+\tStateIdle:     \"idle\",\n+\tStateHijacked: \"hijacked\",\n+\tStateClosed:   \"closed\",\n+}\n+\n+func (c ConnState) String() string {\n+\treturn stateName[c]\n }\n \n // serverHandler delegates to either the server's Handler or\n@@ -1632,7 +1706,7 @@ func (srv *Server) Serve(l net.Listener) error {\n \t\t\t\tif max := 1 * time.Second; tempDelay > max {\n \t\t\t\t\ttempDelay = max\n \t\t\t\t}\n-\t\t\t\tlog.Printf(\"http: Accept error: %v; retrying in %v\", e, tempDelay)\n+\t\t\t\tsrv.logf(\"http: Accept error: %v; retrying in %v\", e, tempDelay)\n \t\t\t\ttime.Sleep(tempDelay)\n \t\t\t\tcontinue\n \t\t\t}\n@@ -1643,10 +1717,35 @@ func (srv *Server) Serve(l net.Listener) error {\n \t\tif err != nil {\n \t\t\tcontinue\n \t\t}\n+\t\tc.setState(c.rwc, StateNew) // before Serve can return\n \t\tgo c.serve()\n \t}\n }\n \n+func (s *Server) doKeepAlives() bool {\n+\treturn atomic.LoadInt32(&s.disableKeepAlives) == 0\n+}\n+\n+// SetKeepAlivesEnabled controls whether HTTP keep-alives are enabled.\n+// By default, keep-alives are always enabled. Only very\n+// resource-constrained environments or servers in the process of\n+// shutting down should disable them.\n+func (s *Server) SetKeepAlivesEnabled(v bool) {\n+\tif v {\n+\t\tatomic.StoreInt32(&s.disableKeepAlives, 0)\n+\t} else {\n+\t\tatomic.StoreInt32(&s.disableKeepAlives, 1)\n+\t}\n+}\n+\n+func (s *Server) logf(format string, args ...interface{}) {\n+\tif s.ErrorLog != nil {\n+\t\ts.ErrorLog.Printf(format, args...)\n+\t} else {\n+\t\tlog.Printf(format, args...)\n+\t}\n+}\n+\n // ListenAndServe listens on the TCP network address addr\n // and then calls Serve with handler to handle requests\n // on incoming connections.  Handler is typically nil,\n@@ -1870,17 +1969,24 @@ func (globalOptionsHandler) ServeHTTP(w ResponseWriter, r *Request) {\n \t}\n }\n \n+type eofReaderWithWriteTo struct{}\n+\n+func (eofReaderWithWriteTo) WriteTo(io.Writer) (int64, error) { return 0, nil }\n+func (eofReaderWithWriteTo) Read([]byte) (int, error)         { return 0, io.EOF }\n+\n // eofReader is a non-nil io.ReadCloser that always returns EOF.\n-// It embeds a *strings.Reader so it still has a WriteTo method\n-// and io.Copy won't need a buffer.\n+// It has a WriteTo method so io.Copy won't need a buffer.\n var eofReader = &struct {\n-\t*strings.Reader\n+\teofReaderWithWriteTo\n \tio.Closer\n }{\n-\tstrings.NewReader(\"\"),\n+\teofReaderWithWriteTo{},\n \tioutil.NopCloser(nil),\n }\n \n+// Verify that an io.Copy from an eofReader won't require a buffer.\n+var _ io.WriterTo = eofReader\n+\n // initNPNRequest is an HTTP handler that initializes certain\n // uninitialized fields in its *Request. Such partially-initialized\n // Requests come from NPN protocol handlers."}, {"sha": "7f63686528aae75edca37ffbf3cdde4745e63b6c", "filename": "libgo/go/net/http/transfer.go", "status": "modified", "additions": 72, "deletions": 29, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Ftransfer.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Ftransfer.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftransfer.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -12,11 +12,20 @@ import (\n \t\"io\"\n \t\"io/ioutil\"\n \t\"net/textproto\"\n+\t\"sort\"\n \t\"strconv\"\n \t\"strings\"\n \t\"sync\"\n )\n \n+type errorReader struct {\n+\terr error\n+}\n+\n+func (r *errorReader) Read(p []byte) (n int, err error) {\n+\treturn 0, r.err\n+}\n+\n // transferWriter inspects the fields of a user-supplied Request or Response,\n // sanitizes them without changing the user object and provides methods for\n // writing the respective header, body and trailer in wire format.\n@@ -53,8 +62,11 @@ func newTransferWriter(r interface{}) (t *transferWriter, err error) {\n \t\t\tif t.ContentLength == 0 {\n \t\t\t\t// Test to see if it's actually zero or just unset.\n \t\t\t\tvar buf [1]byte\n-\t\t\t\tn, _ := io.ReadFull(t.Body, buf[:])\n-\t\t\t\tif n == 1 {\n+\t\t\t\tn, rerr := io.ReadFull(t.Body, buf[:])\n+\t\t\t\tif rerr != nil && rerr != io.EOF {\n+\t\t\t\t\tt.ContentLength = -1\n+\t\t\t\t\tt.Body = &errorReader{rerr}\n+\t\t\t\t} else if n == 1 {\n \t\t\t\t\t// Oh, guess there is data in this Body Reader after all.\n \t\t\t\t\t// The ContentLength field just wasn't set.\n \t\t\t\t\t// Stich the Body back together again, re-attaching our\n@@ -132,55 +144,55 @@ func (t *transferWriter) shouldSendContentLength() bool {\n \treturn false\n }\n \n-func (t *transferWriter) WriteHeader(w io.Writer) (err error) {\n+func (t *transferWriter) WriteHeader(w io.Writer) error {\n \tif t.Close {\n-\t\t_, err = io.WriteString(w, \"Connection: close\\r\\n\")\n-\t\tif err != nil {\n-\t\t\treturn\n+\t\tif _, err := io.WriteString(w, \"Connection: close\\r\\n\"); err != nil {\n+\t\t\treturn err\n \t\t}\n \t}\n \n \t// Write Content-Length and/or Transfer-Encoding whose values are a\n \t// function of the sanitized field triple (Body, ContentLength,\n \t// TransferEncoding)\n \tif t.shouldSendContentLength() {\n-\t\tio.WriteString(w, \"Content-Length: \")\n-\t\t_, err = io.WriteString(w, strconv.FormatInt(t.ContentLength, 10)+\"\\r\\n\")\n-\t\tif err != nil {\n-\t\t\treturn\n+\t\tif _, err := io.WriteString(w, \"Content-Length: \"); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif _, err := io.WriteString(w, strconv.FormatInt(t.ContentLength, 10)+\"\\r\\n\"); err != nil {\n+\t\t\treturn err\n \t\t}\n \t} else if chunked(t.TransferEncoding) {\n-\t\t_, err = io.WriteString(w, \"Transfer-Encoding: chunked\\r\\n\")\n-\t\tif err != nil {\n-\t\t\treturn\n+\t\tif _, err := io.WriteString(w, \"Transfer-Encoding: chunked\\r\\n\"); err != nil {\n+\t\t\treturn err\n \t\t}\n \t}\n \n \t// Write Trailer header\n \tif t.Trailer != nil {\n-\t\t// TODO: At some point, there should be a generic mechanism for\n-\t\t// writing long headers, using HTTP line splitting\n-\t\tio.WriteString(w, \"Trailer: \")\n-\t\tneedComma := false\n+\t\tkeys := make([]string, 0, len(t.Trailer))\n \t\tfor k := range t.Trailer {\n \t\t\tk = CanonicalHeaderKey(k)\n \t\t\tswitch k {\n \t\t\tcase \"Transfer-Encoding\", \"Trailer\", \"Content-Length\":\n \t\t\t\treturn &badStringError{\"invalid Trailer key\", k}\n \t\t\t}\n-\t\t\tif needComma {\n-\t\t\t\tio.WriteString(w, \",\")\n+\t\t\tkeys = append(keys, k)\n+\t\t}\n+\t\tif len(keys) > 0 {\n+\t\t\tsort.Strings(keys)\n+\t\t\t// TODO: could do better allocation-wise here, but trailers are rare,\n+\t\t\t// so being lazy for now.\n+\t\t\tif _, err := io.WriteString(w, \"Trailer: \"+strings.Join(keys, \",\")+\"\\r\\n\"); err != nil {\n+\t\t\t\treturn err\n \t\t\t}\n-\t\t\tio.WriteString(w, k)\n-\t\t\tneedComma = true\n \t\t}\n-\t\t_, err = io.WriteString(w, \"\\r\\n\")\n \t}\n \n-\treturn\n+\treturn nil\n }\n \n-func (t *transferWriter) WriteBody(w io.Writer) (err error) {\n+func (t *transferWriter) WriteBody(w io.Writer) error {\n+\tvar err error\n \tvar ncopy int64\n \n \t// Write body\n@@ -217,11 +229,16 @@ func (t *transferWriter) WriteBody(w io.Writer) (err error) {\n \n \t// TODO(petar): Place trailer writer code here.\n \tif chunked(t.TransferEncoding) {\n+\t\t// Write Trailer header\n+\t\tif t.Trailer != nil {\n+\t\t\tif err := t.Trailer.Write(w); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t}\n \t\t// Last chunk, empty trailer\n \t\t_, err = io.WriteString(w, \"\\r\\n\")\n \t}\n-\n-\treturn\n+\treturn err\n }\n \n type transferReader struct {\n@@ -253,6 +270,22 @@ func bodyAllowedForStatus(status int) bool {\n \treturn true\n }\n \n+var (\n+\tsuppressedHeaders304    = []string{\"Content-Type\", \"Content-Length\", \"Transfer-Encoding\"}\n+\tsuppressedHeadersNoBody = []string{\"Content-Length\", \"Transfer-Encoding\"}\n+)\n+\n+func suppressedHeaders(status int) []string {\n+\tswitch {\n+\tcase status == 304:\n+\t\t// RFC 2616 section 10.3.5: \"the response MUST NOT include other entity-headers\"\n+\t\treturn suppressedHeaders304\n+\tcase !bodyAllowedForStatus(status):\n+\t\treturn suppressedHeadersNoBody\n+\t}\n+\treturn nil\n+}\n+\n // msg is *Request or *Response.\n func readTransfer(msg interface{}, r *bufio.Reader) (err error) {\n \tt := &transferReader{RequestMethod: \"GET\"}\n@@ -499,7 +532,7 @@ func fixTrailer(header Header, te []string) (Header, error) {\n \t\tcase \"Transfer-Encoding\", \"Trailer\", \"Content-Length\":\n \t\t\treturn nil, &badStringError{\"bad trailer key\", key}\n \t\t}\n-\t\ttrailer.Del(key)\n+\t\ttrailer[key] = nil\n \t}\n \tif len(trailer) == 0 {\n \t\treturn nil, nil\n@@ -631,13 +664,23 @@ func (b *body) readTrailer() error {\n \t}\n \tswitch rr := b.hdr.(type) {\n \tcase *Request:\n-\t\trr.Trailer = Header(hdr)\n+\t\tmergeSetHeader(&rr.Trailer, Header(hdr))\n \tcase *Response:\n-\t\trr.Trailer = Header(hdr)\n+\t\tmergeSetHeader(&rr.Trailer, Header(hdr))\n \t}\n \treturn nil\n }\n \n+func mergeSetHeader(dst *Header, src Header) {\n+\tif *dst == nil {\n+\t\t*dst = src\n+\t\treturn\n+\t}\n+\tfor k, vv := range src {\n+\t\t(*dst)[k] = vv\n+\t}\n+}\n+\n func (b *body) Close() error {\n \tb.mu.Lock()\n \tdefer b.mu.Unlock()"}, {"sha": "b1cc632a782da8a76f5a567d08bb491310136229", "filename": "libgo/go/net/http/transport.go", "status": "modified", "additions": 203, "deletions": 75, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -30,7 +30,14 @@ import (\n // and caches them for reuse by subsequent calls. It uses HTTP proxies\n // as directed by the $HTTP_PROXY and $NO_PROXY (or $http_proxy and\n // $no_proxy) environment variables.\n-var DefaultTransport RoundTripper = &Transport{Proxy: ProxyFromEnvironment}\n+var DefaultTransport RoundTripper = &Transport{\n+\tProxy: ProxyFromEnvironment,\n+\tDial: (&net.Dialer{\n+\t\tTimeout:   30 * time.Second,\n+\t\tKeepAlive: 30 * time.Second,\n+\t}).Dial,\n+\tTLSHandshakeTimeout: 10 * time.Second,\n+}\n \n // DefaultMaxIdleConnsPerHost is the default value of Transport's\n // MaxIdleConnsPerHost.\n@@ -40,13 +47,13 @@ const DefaultMaxIdleConnsPerHost = 2\n // https, and http proxies (for either http or https with CONNECT).\n // Transport can also cache connections for future re-use.\n type Transport struct {\n-\tidleMu     sync.Mutex\n-\tidleConn   map[connectMethodKey][]*persistConn\n-\tidleConnCh map[connectMethodKey]chan *persistConn\n-\treqMu      sync.Mutex\n-\treqConn    map[*Request]*persistConn\n-\taltMu      sync.RWMutex\n-\taltProto   map[string]RoundTripper // nil or map of URI scheme => RoundTripper\n+\tidleMu      sync.Mutex\n+\tidleConn    map[connectMethodKey][]*persistConn\n+\tidleConnCh  map[connectMethodKey]chan *persistConn\n+\treqMu       sync.Mutex\n+\treqCanceler map[*Request]func()\n+\taltMu       sync.RWMutex\n+\taltProto    map[string]RoundTripper // nil or map of URI scheme => RoundTripper\n \n \t// Proxy specifies a function to return a proxy for a given\n \t// Request. If the function returns a non-nil error, the\n@@ -63,6 +70,10 @@ type Transport struct {\n \t// tls.Client. If nil, the default configuration is used.\n \tTLSClientConfig *tls.Config\n \n+\t// TLSHandshakeTimeout specifies the maximum amount of time waiting to\n+\t// wait for a TLS handshake. Zero means no timeout.\n+\tTLSHandshakeTimeout time.Duration\n+\n \t// DisableKeepAlives, if true, prevents re-use of TCP connections\n \t// between different HTTP requests.\n \tDisableKeepAlives bool\n@@ -98,6 +109,9 @@ type Transport struct {\n // An error is returned if the proxy environment is invalid.\n // A nil URL and nil error are returned if no proxy is defined in the\n // environment, or a proxy should not be used for the given request.\n+//\n+// As a special case, if req.URL.Host is \"localhost\" (with or without\n+// a port number), then a nil URL and nil error will be returned.\n func ProxyFromEnvironment(req *Request) (*url.URL, error) {\n \tproxy := httpProxyEnv.Get()\n \tif proxy == \"\" {\n@@ -149,9 +163,11 @@ func (tr *transportRequest) extraHeaders() Header {\n // and redirects), see Get, Post, and the Client type.\n func (t *Transport) RoundTrip(req *Request) (resp *Response, err error) {\n \tif req.URL == nil {\n+\t\treq.closeBody()\n \t\treturn nil, errors.New(\"http: nil Request.URL\")\n \t}\n \tif req.Header == nil {\n+\t\treq.closeBody()\n \t\treturn nil, errors.New(\"http: nil Request.Header\")\n \t}\n \tif req.URL.Scheme != \"http\" && req.URL.Scheme != \"https\" {\n@@ -162,25 +178,30 @@ func (t *Transport) RoundTrip(req *Request) (resp *Response, err error) {\n \t\t}\n \t\tt.altMu.RUnlock()\n \t\tif rt == nil {\n+\t\t\treq.closeBody()\n \t\t\treturn nil, &badStringError{\"unsupported protocol scheme\", req.URL.Scheme}\n \t\t}\n \t\treturn rt.RoundTrip(req)\n \t}\n \tif req.URL.Host == \"\" {\n+\t\treq.closeBody()\n \t\treturn nil, errors.New(\"http: no Host in request URL\")\n \t}\n \ttreq := &transportRequest{Request: req}\n \tcm, err := t.connectMethodForRequest(treq)\n \tif err != nil {\n+\t\treq.closeBody()\n \t\treturn nil, err\n \t}\n \n \t// Get the cached or newly-created connection to either the\n \t// host (for http or https), the http proxy, or the http proxy\n \t// pre-CONNECTed to https server.  In any case, we'll be ready\n \t// to send it requests.\n-\tpconn, err := t.getConn(cm)\n+\tpconn, err := t.getConn(req, cm)\n \tif err != nil {\n+\t\tt.setReqCanceler(req, nil)\n+\t\treq.closeBody()\n \t\treturn nil, err\n \t}\n \n@@ -218,9 +239,6 @@ func (t *Transport) CloseIdleConnections() {\n \tt.idleConn = nil\n \tt.idleConnCh = nil\n \tt.idleMu.Unlock()\n-\tif m == nil {\n-\t\treturn\n-\t}\n \tfor _, conns := range m {\n \t\tfor _, pconn := range conns {\n \t\t\tpconn.close()\n@@ -232,10 +250,10 @@ func (t *Transport) CloseIdleConnections() {\n // connection.\n func (t *Transport) CancelRequest(req *Request) {\n \tt.reqMu.Lock()\n-\tpc := t.reqConn[req]\n+\tcancel := t.reqCanceler[req]\n \tt.reqMu.Unlock()\n-\tif pc != nil {\n-\t\tpc.conn.Close()\n+\tif cancel != nil {\n+\t\tcancel()\n \t}\n }\n \n@@ -406,16 +424,16 @@ func (t *Transport) getIdleConn(cm connectMethod) (pconn *persistConn) {\n \t}\n }\n \n-func (t *Transport) setReqConn(r *Request, pc *persistConn) {\n+func (t *Transport) setReqCanceler(r *Request, fn func()) {\n \tt.reqMu.Lock()\n \tdefer t.reqMu.Unlock()\n-\tif t.reqConn == nil {\n-\t\tt.reqConn = make(map[*Request]*persistConn)\n+\tif t.reqCanceler == nil {\n+\t\tt.reqCanceler = make(map[*Request]func())\n \t}\n-\tif pc != nil {\n-\t\tt.reqConn[r] = pc\n+\tif fn != nil {\n+\t\tt.reqCanceler[r] = fn\n \t} else {\n-\t\tdelete(t.reqConn, r)\n+\t\tdelete(t.reqCanceler, r)\n \t}\n }\n \n@@ -430,7 +448,7 @@ func (t *Transport) dial(network, addr string) (c net.Conn, err error) {\n // specified in the connectMethod.  This includes doing a proxy CONNECT\n // and/or setting up TLS.  If this doesn't return an error, the persistConn\n // is ready to write requests to.\n-func (t *Transport) getConn(cm connectMethod) (*persistConn, error) {\n+func (t *Transport) getConn(req *Request, cm connectMethod) (*persistConn, error) {\n \tif pc := t.getIdleConn(cm); pc != nil {\n \t\treturn pc, nil\n \t}\n@@ -440,6 +458,16 @@ func (t *Transport) getConn(cm connectMethod) (*persistConn, error) {\n \t\terr error\n \t}\n \tdialc := make(chan dialRes)\n+\n+\thandlePendingDial := func() {\n+\t\tif v := <-dialc; v.err == nil {\n+\t\t\tt.putIdleConn(v.pc)\n+\t\t}\n+\t}\n+\n+\tcancelc := make(chan struct{})\n+\tt.setReqCanceler(req, func() { close(cancelc) })\n+\n \tgo func() {\n \t\tpc, err := t.dialConn(cm)\n \t\tdialc <- dialRes{pc, err}\n@@ -456,12 +484,11 @@ func (t *Transport) getConn(cm connectMethod) (*persistConn, error) {\n \t\t// else's dial that they didn't use.\n \t\t// But our dial is still going, so give it away\n \t\t// when it finishes:\n-\t\tgo func() {\n-\t\t\tif v := <-dialc; v.err == nil {\n-\t\t\t\tt.putIdleConn(v.pc)\n-\t\t\t}\n-\t\t}()\n+\t\tgo handlePendingDial()\n \t\treturn pc, nil\n+\tcase <-cancelc:\n+\t\tgo handlePendingDial()\n+\t\treturn nil, errors.New(\"net/http: request canceled while waiting for connection\")\n \t}\n }\n \n@@ -477,12 +504,13 @@ func (t *Transport) dialConn(cm connectMethod) (*persistConn, error) {\n \tpa := cm.proxyAuth()\n \n \tpconn := &persistConn{\n-\t\tt:        t,\n-\t\tcacheKey: cm.key(),\n-\t\tconn:     conn,\n-\t\treqch:    make(chan requestAndChan, 50),\n-\t\twritech:  make(chan writeRequest, 50),\n-\t\tclosech:  make(chan struct{}),\n+\t\tt:          t,\n+\t\tcacheKey:   cm.key(),\n+\t\tconn:       conn,\n+\t\treqch:      make(chan requestAndChan, 1),\n+\t\twritech:    make(chan writeRequest, 1),\n+\t\tclosech:    make(chan struct{}),\n+\t\twriteErrCh: make(chan error, 1),\n \t}\n \n \tswitch {\n@@ -536,19 +564,38 @@ func (t *Transport) dialConn(cm connectMethod) (*persistConn, error) {\n \t\t\t\tcfg = &clone\n \t\t\t}\n \t\t}\n-\t\tconn = tls.Client(conn, cfg)\n-\t\tif err = conn.(*tls.Conn).Handshake(); err != nil {\n+\t\tplainConn := conn\n+\t\ttlsConn := tls.Client(plainConn, cfg)\n+\t\terrc := make(chan error, 2)\n+\t\tvar timer *time.Timer // for canceling TLS handshake\n+\t\tif d := t.TLSHandshakeTimeout; d != 0 {\n+\t\t\ttimer = time.AfterFunc(d, func() {\n+\t\t\t\terrc <- tlsHandshakeTimeoutError{}\n+\t\t\t})\n+\t\t}\n+\t\tgo func() {\n+\t\t\terr := tlsConn.Handshake()\n+\t\t\tif timer != nil {\n+\t\t\t\ttimer.Stop()\n+\t\t\t}\n+\t\t\terrc <- err\n+\t\t}()\n+\t\tif err := <-errc; err != nil {\n+\t\t\tplainConn.Close()\n \t\t\treturn nil, err\n \t\t}\n \t\tif !cfg.InsecureSkipVerify {\n-\t\t\tif err = conn.(*tls.Conn).VerifyHostname(cfg.ServerName); err != nil {\n+\t\t\tif err := tlsConn.VerifyHostname(cfg.ServerName); err != nil {\n+\t\t\t\tplainConn.Close()\n \t\t\t\treturn nil, err\n \t\t\t}\n \t\t}\n-\t\tpconn.conn = conn\n+\t\tcs := tlsConn.ConnectionState()\n+\t\tpconn.tlsState = &cs\n+\t\tpconn.conn = tlsConn\n \t}\n \n-\tpconn.br = bufio.NewReader(pconn.conn)\n+\tpconn.br = bufio.NewReader(noteEOFReader{pconn.conn, &pconn.sawEOF})\n \tpconn.bw = bufio.NewWriter(pconn.conn)\n \tgo pconn.readLoop()\n \tgo pconn.writeLoop()\n@@ -615,8 +662,8 @@ func useProxy(addr string) bool {\n //\n // Cache key form                Description\n // -----------------             -------------------------\n-// ||http|foo.com                http directly to server, no proxy\n-// ||https|foo.com               https directly to server, no proxy\n+// |http|foo.com                 http directly to server, no proxy\n+// |https|foo.com                https directly to server, no proxy\n // http://proxy.com|https|foo.com  http to proxy, then CONNECT to foo.com\n // http://proxy.com|http           http to proxy, http to anywhere after that\n //\n@@ -680,30 +727,42 @@ type persistConn struct {\n \tt        *Transport\n \tcacheKey connectMethodKey\n \tconn     net.Conn\n-\tclosed   bool                // whether conn has been closed\n+\ttlsState *tls.ConnectionState\n \tbr       *bufio.Reader       // from conn\n+\tsawEOF   bool                // whether we've seen EOF from conn; owned by readLoop\n \tbw       *bufio.Writer       // to conn\n \treqch    chan requestAndChan // written by roundTrip; read by readLoop\n \twritech  chan writeRequest   // written by roundTrip; read by writeLoop\n-\tclosech  chan struct{}       // broadcast close when readLoop (TCP connection) closes\n+\tclosech  chan struct{}       // closed when conn closed\n \tisProxy  bool\n+\t// writeErrCh passes the request write error (usually nil)\n+\t// from the writeLoop goroutine to the readLoop which passes\n+\t// it off to the res.Body reader, which then uses it to decide\n+\t// whether or not a connection can be reused. Issue 7569.\n+\twriteErrCh chan error\n \n-\tlk                   sync.Mutex // guards following 3 fields\n+\tlk                   sync.Mutex // guards following fields\n \tnumExpectedResponses int\n+\tclosed               bool // whether conn has been closed\n \tbroken               bool // an error has happened on this connection; marked broken so it's not reused.\n \t// mutateHeaderFunc is an optional func to modify extra\n \t// headers on each outbound request before it's written. (the\n \t// original Request given to RoundTrip is not modified)\n \tmutateHeaderFunc func(Header)\n }\n \n+// isBroken reports whether this connection is in a known broken state.\n func (pc *persistConn) isBroken() bool {\n \tpc.lk.Lock()\n \tb := pc.broken\n \tpc.lk.Unlock()\n \treturn b\n }\n \n+func (pc *persistConn) cancelRequest() {\n+\tpc.conn.Close()\n+}\n+\n var remoteSideClosedFunc func(error) bool // or nil to use default\n \n func remoteSideClosed(err error) bool {\n@@ -717,20 +776,21 @@ func remoteSideClosed(err error) bool {\n }\n \n func (pc *persistConn) readLoop() {\n-\tdefer close(pc.closech)\n \talive := true\n \n \tfor alive {\n \t\tpb, err := pc.br.Peek(1)\n \n \t\tpc.lk.Lock()\n \t\tif pc.numExpectedResponses == 0 {\n-\t\t\tpc.closeLocked()\n-\t\t\tpc.lk.Unlock()\n-\t\t\tif len(pb) > 0 {\n-\t\t\t\tlog.Printf(\"Unsolicited response received on idle HTTP channel starting with %q; err=%v\",\n-\t\t\t\t\tstring(pb), err)\n+\t\t\tif !pc.closed {\n+\t\t\t\tpc.closeLocked()\n+\t\t\t\tif len(pb) > 0 {\n+\t\t\t\t\tlog.Printf(\"Unsolicited response received on idle HTTP channel starting with %q; err=%v\",\n+\t\t\t\t\t\tstring(pb), err)\n+\t\t\t\t}\n \t\t\t}\n+\t\t\tpc.lk.Unlock()\n \t\t\treturn\n \t\t}\n \t\tpc.lk.Unlock()\n@@ -749,6 +809,11 @@ func (pc *persistConn) readLoop() {\n \t\t\t\tresp, err = ReadResponse(pc.br, rc.req)\n \t\t\t}\n \t\t}\n+\n+\t\tif resp != nil {\n+\t\t\tresp.TLS = pc.tlsState\n+\t\t}\n+\n \t\thasBody := resp != nil && rc.req.Method != \"HEAD\" && resp.ContentLength != 0\n \n \t\tif err != nil {\n@@ -758,13 +823,7 @@ func (pc *persistConn) readLoop() {\n \t\t\t\tresp.Header.Del(\"Content-Encoding\")\n \t\t\t\tresp.Header.Del(\"Content-Length\")\n \t\t\t\tresp.ContentLength = -1\n-\t\t\t\tgzReader, zerr := gzip.NewReader(resp.Body)\n-\t\t\t\tif zerr != nil {\n-\t\t\t\t\tpc.close()\n-\t\t\t\t\terr = zerr\n-\t\t\t\t} else {\n-\t\t\t\t\tresp.Body = &readerAndCloser{gzReader, resp.Body}\n-\t\t\t\t}\n+\t\t\t\tresp.Body = &gzipReader{body: resp.Body}\n \t\t\t}\n \t\t\tresp.Body = &bodyEOFSignal{body: resp.Body}\n \t\t}\n@@ -787,35 +846,33 @@ func (pc *persistConn) readLoop() {\n \t\t\t\treturn nil\n \t\t\t}\n \t\t\tresp.Body.(*bodyEOFSignal).fn = func(err error) {\n-\t\t\t\talive1 := alive\n-\t\t\t\tif err != nil {\n-\t\t\t\t\talive1 = false\n-\t\t\t\t}\n-\t\t\t\tif alive1 && !pc.t.putIdleConn(pc) {\n-\t\t\t\t\talive1 = false\n-\t\t\t\t}\n-\t\t\t\tif !alive1 || pc.isBroken() {\n-\t\t\t\t\tpc.close()\n-\t\t\t\t}\n-\t\t\t\twaitForBodyRead <- alive1\n+\t\t\t\twaitForBodyRead <- alive &&\n+\t\t\t\t\terr == nil &&\n+\t\t\t\t\t!pc.sawEOF &&\n+\t\t\t\t\tpc.wroteRequest() &&\n+\t\t\t\t\tpc.t.putIdleConn(pc)\n \t\t\t}\n \t\t}\n \n \t\tif alive && !hasBody {\n-\t\t\tif !pc.t.putIdleConn(pc) {\n-\t\t\t\talive = false\n-\t\t\t}\n+\t\t\talive = !pc.sawEOF &&\n+\t\t\t\tpc.wroteRequest() &&\n+\t\t\t\tpc.t.putIdleConn(pc)\n \t\t}\n \n \t\trc.ch <- responseAndError{resp, err}\n \n \t\t// Wait for the just-returned response body to be fully consumed\n \t\t// before we race and peek on the underlying bufio reader.\n \t\tif waitForBodyRead != nil {\n-\t\t\talive = <-waitForBodyRead\n+\t\t\tselect {\n+\t\t\tcase alive = <-waitForBodyRead:\n+\t\t\tcase <-pc.closech:\n+\t\t\t\talive = false\n+\t\t\t}\n \t\t}\n \n-\t\tpc.t.setReqConn(rc.req, nil)\n+\t\tpc.t.setReqCanceler(rc.req, nil)\n \n \t\tif !alive {\n \t\t\tpc.close()\n@@ -837,14 +894,44 @@ func (pc *persistConn) writeLoop() {\n \t\t\t}\n \t\t\tif err != nil {\n \t\t\t\tpc.markBroken()\n+\t\t\t\twr.req.Request.closeBody()\n \t\t\t}\n-\t\t\twr.ch <- err\n+\t\t\tpc.writeErrCh <- err // to the body reader, which might recycle us\n+\t\t\twr.ch <- err         // to the roundTrip function\n \t\tcase <-pc.closech:\n \t\t\treturn\n \t\t}\n \t}\n }\n \n+// wroteRequest is a check before recycling a connection that the previous write\n+// (from writeLoop above) happened and was successful.\n+func (pc *persistConn) wroteRequest() bool {\n+\tselect {\n+\tcase err := <-pc.writeErrCh:\n+\t\t// Common case: the write happened well before the response, so\n+\t\t// avoid creating a timer.\n+\t\treturn err == nil\n+\tdefault:\n+\t\t// Rare case: the request was written in writeLoop above but\n+\t\t// before it could send to pc.writeErrCh, the reader read it\n+\t\t// all, processed it, and called us here. In this case, give the\n+\t\t// write goroutine a bit of time to finish its send.\n+\t\t//\n+\t\t// Less rare case: We also get here in the legitimate case of\n+\t\t// Issue 7569, where the writer is still writing (or stalled),\n+\t\t// but the server has already replied. In this case, we don't\n+\t\t// want to wait too long, and we want to return false so this\n+\t\t// connection isn't re-used.\n+\t\tselect {\n+\t\tcase err := <-pc.writeErrCh:\n+\t\t\treturn err == nil\n+\t\tcase <-time.After(50 * time.Millisecond):\n+\t\t\treturn false\n+\t\t}\n+\t}\n+}\n+\n type responseAndError struct {\n \tres *Response\n \terr error\n@@ -882,7 +969,7 @@ var errTimeout error = &httpError{err: \"net/http: timeout awaiting response head\n var errClosed error = &httpError{err: \"net/http: transport closed before response was received\"}\n \n func (pc *persistConn) roundTrip(req *transportRequest) (resp *Response, err error) {\n-\tpc.t.setReqConn(req.Request, pc)\n+\tpc.t.setReqCanceler(req.Request, pc.cancelRequest)\n \tpc.lk.Lock()\n \tpc.numExpectedResponses++\n \theaderFn := pc.mutateHeaderFunc\n@@ -967,7 +1054,7 @@ WaitResponse:\n \tpc.lk.Unlock()\n \n \tif re.err != nil {\n-\t\tpc.t.setReqConn(req.Request, nil)\n+\t\tpc.t.setReqCanceler(req.Request, nil)\n \t}\n \treturn re.res, re.err\n }\n@@ -992,6 +1079,7 @@ func (pc *persistConn) closeLocked() {\n \tif !pc.closed {\n \t\tpc.conn.Close()\n \t\tpc.closed = true\n+\t\tclose(pc.closech)\n \t}\n \tpc.mutateHeaderFunc = nil\n }\n@@ -1074,7 +1162,47 @@ func (es *bodyEOFSignal) condfn(err error) {\n \tes.fn = nil\n }\n \n+// gzipReader wraps a response body so it can lazily\n+// call gzip.NewReader on the first call to Read\n+type gzipReader struct {\n+\tbody io.ReadCloser // underlying Response.Body\n+\tzr   io.Reader     // lazily-initialized gzip reader\n+}\n+\n+func (gz *gzipReader) Read(p []byte) (n int, err error) {\n+\tif gz.zr == nil {\n+\t\tgz.zr, err = gzip.NewReader(gz.body)\n+\t\tif err != nil {\n+\t\t\treturn 0, err\n+\t\t}\n+\t}\n+\treturn gz.zr.Read(p)\n+}\n+\n+func (gz *gzipReader) Close() error {\n+\treturn gz.body.Close()\n+}\n+\n type readerAndCloser struct {\n \tio.Reader\n \tio.Closer\n }\n+\n+type tlsHandshakeTimeoutError struct{}\n+\n+func (tlsHandshakeTimeoutError) Timeout() bool   { return true }\n+func (tlsHandshakeTimeoutError) Temporary() bool { return true }\n+func (tlsHandshakeTimeoutError) Error() string   { return \"net/http: TLS handshake timeout\" }\n+\n+type noteEOFReader struct {\n+\tr      io.Reader\n+\tsawEOF *bool\n+}\n+\n+func (nr noteEOFReader) Read(p []byte) (n int, err error) {\n+\tn, err = nr.r.Read(p)\n+\tif err == io.EOF {\n+\t\t*nr.sawEOF = true\n+\t}\n+\treturn\n+}"}, {"sha": "964ca0fca5434ff06f536d94a203ab96bdc28b33", "filename": "libgo/go/net/http/transport_test.go", "status": "modified", "additions": 425, "deletions": 21, "changes": 446, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -11,9 +11,12 @@ import (\n \t\"bytes\"\n \t\"compress/gzip\"\n \t\"crypto/rand\"\n+\t\"crypto/tls\"\n+\t\"errors\"\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"log\"\n \t\"net\"\n \t\"net/http\"\n \t. \"net/http\"\n@@ -54,21 +57,21 @@ func (c *testCloseConn) Close() error {\n // been closed.\n type testConnSet struct {\n \tt      *testing.T\n+\tmu     sync.Mutex // guards closed and list\n \tclosed map[net.Conn]bool\n \tlist   []net.Conn // in order created\n-\tmutex  sync.Mutex\n }\n \n func (tcs *testConnSet) insert(c net.Conn) {\n-\ttcs.mutex.Lock()\n-\tdefer tcs.mutex.Unlock()\n+\ttcs.mu.Lock()\n+\tdefer tcs.mu.Unlock()\n \ttcs.closed[c] = false\n \ttcs.list = append(tcs.list, c)\n }\n \n func (tcs *testConnSet) remove(c net.Conn) {\n-\ttcs.mutex.Lock()\n-\tdefer tcs.mutex.Unlock()\n+\ttcs.mu.Lock()\n+\tdefer tcs.mu.Unlock()\n \ttcs.closed[c] = true\n }\n \n@@ -91,11 +94,19 @@ func makeTestDial(t *testing.T) (*testConnSet, func(n, addr string) (net.Conn, e\n }\n \n func (tcs *testConnSet) check(t *testing.T) {\n-\ttcs.mutex.Lock()\n-\tdefer tcs.mutex.Unlock()\n-\n-\tfor i, c := range tcs.list {\n-\t\tif !tcs.closed[c] {\n+\ttcs.mu.Lock()\n+\tdefer tcs.mu.Unlock()\n+\tfor i := 4; i >= 0; i-- {\n+\t\tfor i, c := range tcs.list {\n+\t\t\tif tcs.closed[c] {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif i != 0 {\n+\t\t\t\ttcs.mu.Unlock()\n+\t\t\t\ttime.Sleep(50 * time.Millisecond)\n+\t\t\t\ttcs.mu.Lock()\n+\t\t\t\tcontinue\n+\t\t\t}\n \t\t\tt.Errorf(\"TCP connection #%d, %p (of %d total) was not closed\", i+1, c, len(tcs.list))\n \t\t}\n \t}\n@@ -347,10 +358,11 @@ func TestTransportMaxPerHostIdleConns(t *testing.T) {\n \t\tresp, err := c.Get(ts.URL)\n \t\tif err != nil {\n \t\t\tt.Error(err)\n+\t\t\treturn\n \t\t}\n-\t\t_, err = ioutil.ReadAll(resp.Body)\n-\t\tif err != nil {\n-\t\t\tt.Fatalf(\"ReadAll: %v\", err)\n+\t\tif _, err := ioutil.ReadAll(resp.Body); err != nil {\n+\t\t\tt.Errorf(\"ReadAll: %v\", err)\n+\t\t\treturn\n \t\t}\n \t\tdonech <- true\n \t}\n@@ -791,6 +803,33 @@ func TestTransportGzipRecursive(t *testing.T) {\n \t}\n }\n \n+// golang.org/issue/7750: request fails when server replies with\n+// a short gzip body\n+func TestTransportGzipShort(t *testing.T) {\n+\tdefer afterTest(t)\n+\tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tw.Header().Set(\"Content-Encoding\", \"gzip\")\n+\t\tw.Write([]byte{0x1f, 0x8b})\n+\t}))\n+\tdefer ts.Close()\n+\n+\ttr := &Transport{}\n+\tdefer tr.CloseIdleConnections()\n+\tc := &Client{Transport: tr}\n+\tres, err := c.Get(ts.URL)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer res.Body.Close()\n+\t_, err = ioutil.ReadAll(res.Body)\n+\tif err == nil {\n+\t\tt.Fatal(\"Expect an error from reading a body.\")\n+\t}\n+\tif err != io.ErrUnexpectedEOF {\n+\t\tt.Errorf(\"ReadAll error = %v; want io.ErrUnexpectedEOF\", err)\n+\t}\n+}\n+\n // tests that persistent goroutine connections shut down when no longer desired.\n func TestTransportPersistConnLeak(t *testing.T) {\n \tif runtime.GOOS == \"plan9\" {\n@@ -1211,9 +1250,13 @@ func TestTransportResponseHeaderTimeout(t *testing.T) {\n \tif testing.Short() {\n \t\tt.Skip(\"skipping timeout test in -short mode\")\n \t}\n+\tinHandler := make(chan bool, 1)\n \tmux := NewServeMux()\n-\tmux.HandleFunc(\"/fast\", func(w ResponseWriter, r *Request) {})\n+\tmux.HandleFunc(\"/fast\", func(w ResponseWriter, r *Request) {\n+\t\tinHandler <- true\n+\t})\n \tmux.HandleFunc(\"/slow\", func(w ResponseWriter, r *Request) {\n+\t\tinHandler <- true\n \t\ttime.Sleep(2 * time.Second)\n \t})\n \tts := httptest.NewServer(mux)\n@@ -1236,6 +1279,12 @@ func TestTransportResponseHeaderTimeout(t *testing.T) {\n \t}\n \tfor i, tt := range tests {\n \t\tres, err := c.Get(ts.URL + tt.path)\n+\t\tselect {\n+\t\tcase <-inHandler:\n+\t\tcase <-time.After(5 * time.Second):\n+\t\t\tt.Errorf(\"never entered handler for test index %d, %s\", i, tt.path)\n+\t\t\tcontinue\n+\t\t}\n \t\tif err != nil {\n \t\t\tuerr, ok := err.(*url.Error)\n \t\t\tif !ok {\n@@ -1321,6 +1370,60 @@ func TestTransportCancelRequest(t *testing.T) {\n \t}\n }\n \n+func TestTransportCancelRequestInDial(t *testing.T) {\n+\tdefer afterTest(t)\n+\tif testing.Short() {\n+\t\tt.Skip(\"skipping test in -short mode\")\n+\t}\n+\tvar logbuf bytes.Buffer\n+\teventLog := log.New(&logbuf, \"\", 0)\n+\n+\tunblockDial := make(chan bool)\n+\tdefer close(unblockDial)\n+\n+\tinDial := make(chan bool)\n+\ttr := &Transport{\n+\t\tDial: func(network, addr string) (net.Conn, error) {\n+\t\t\teventLog.Println(\"dial: blocking\")\n+\t\t\tinDial <- true\n+\t\t\t<-unblockDial\n+\t\t\treturn nil, errors.New(\"nope\")\n+\t\t},\n+\t}\n+\tcl := &Client{Transport: tr}\n+\tgotres := make(chan bool)\n+\treq, _ := NewRequest(\"GET\", \"http://something.no-network.tld/\", nil)\n+\tgo func() {\n+\t\t_, err := cl.Do(req)\n+\t\teventLog.Printf(\"Get = %v\", err)\n+\t\tgotres <- true\n+\t}()\n+\n+\tselect {\n+\tcase <-inDial:\n+\tcase <-time.After(5 * time.Second):\n+\t\tt.Fatal(\"timeout; never saw blocking dial\")\n+\t}\n+\n+\teventLog.Printf(\"canceling\")\n+\ttr.CancelRequest(req)\n+\n+\tselect {\n+\tcase <-gotres:\n+\tcase <-time.After(5 * time.Second):\n+\t\tpanic(\"hang. events are: \" + logbuf.String())\n+\t}\n+\n+\tgot := logbuf.String()\n+\twant := `dial: blocking\n+canceling\n+Get = Get http://something.no-network.tld/: net/http: request canceled while waiting for connection\n+`\n+\tif got != want {\n+\t\tt.Errorf(\"Got events:\\n%s\\nWant:\\n%s\", got, want)\n+\t}\n+}\n+\n // golang.org/issue/3672 -- Client can't close HTTP stream\n // Calling Close on a Response.Body used to just read until EOF.\n // Now it actually closes the TCP connection.\n@@ -1450,8 +1553,10 @@ func TestTransportSocketLateBinding(t *testing.T) {\n \tdialGate := make(chan bool, 1)\n \ttr := &Transport{\n \t\tDial: func(n, addr string) (net.Conn, error) {\n-\t\t\t<-dialGate\n-\t\t\treturn net.Dial(n, addr)\n+\t\t\tif <-dialGate {\n+\t\t\t\treturn net.Dial(n, addr)\n+\t\t\t}\n+\t\t\treturn nil, errors.New(\"manually closed\")\n \t\t},\n \t\tDisableKeepAlives: false,\n \t}\n@@ -1486,7 +1591,7 @@ func TestTransportSocketLateBinding(t *testing.T) {\n \t\tt.Fatalf(\"/foo came from conn %q; /bar came from %q instead\", fooAddr, barAddr)\n \t}\n \tbarRes.Body.Close()\n-\tdialGate <- true\n+\tdialGate <- false\n }\n \n // Issue 2184\n@@ -1637,10 +1742,7 @@ var proxyFromEnvTests = []proxyFromEnvTest{\n }\n \n func TestProxyFromEnvironment(t *testing.T) {\n-\tos.Setenv(\"HTTP_PROXY\", \"\")\n-\tos.Setenv(\"http_proxy\", \"\")\n-\tos.Setenv(\"NO_PROXY\", \"\")\n-\tos.Setenv(\"no_proxy\", \"\")\n+\tResetProxyEnv()\n \tfor _, tt := range proxyFromEnvTests {\n \t\tos.Setenv(\"HTTP_PROXY\", tt.env)\n \t\tos.Setenv(\"NO_PROXY\", tt.noenv)\n@@ -1722,6 +1824,308 @@ func TestTransportClosesRequestBody(t *testing.T) {\n \t}\n }\n \n+func TestTransportTLSHandshakeTimeout(t *testing.T) {\n+\tdefer afterTest(t)\n+\tif testing.Short() {\n+\t\tt.Skip(\"skipping in short mode\")\n+\t}\n+\tln := newLocalListener(t)\n+\tdefer ln.Close()\n+\ttestdonec := make(chan struct{})\n+\tdefer close(testdonec)\n+\n+\tgo func() {\n+\t\tc, err := ln.Accept()\n+\t\tif err != nil {\n+\t\t\tt.Error(err)\n+\t\t\treturn\n+\t\t}\n+\t\t<-testdonec\n+\t\tc.Close()\n+\t}()\n+\n+\tgetdonec := make(chan struct{})\n+\tgo func() {\n+\t\tdefer close(getdonec)\n+\t\ttr := &Transport{\n+\t\t\tDial: func(_, _ string) (net.Conn, error) {\n+\t\t\t\treturn net.Dial(\"tcp\", ln.Addr().String())\n+\t\t\t},\n+\t\t\tTLSHandshakeTimeout: 250 * time.Millisecond,\n+\t\t}\n+\t\tcl := &Client{Transport: tr}\n+\t\t_, err := cl.Get(\"https://dummy.tld/\")\n+\t\tif err == nil {\n+\t\t\tt.Error(\"expected error\")\n+\t\t\treturn\n+\t\t}\n+\t\tue, ok := err.(*url.Error)\n+\t\tif !ok {\n+\t\t\tt.Errorf(\"expected url.Error; got %#v\", err)\n+\t\t\treturn\n+\t\t}\n+\t\tne, ok := ue.Err.(net.Error)\n+\t\tif !ok {\n+\t\t\tt.Errorf(\"expected net.Error; got %#v\", err)\n+\t\t\treturn\n+\t\t}\n+\t\tif !ne.Timeout() {\n+\t\t\tt.Errorf(\"expected timeout error; got %v\", err)\n+\t\t}\n+\t\tif !strings.Contains(err.Error(), \"handshake timeout\") {\n+\t\t\tt.Errorf(\"expected 'handshake timeout' in error; got %v\", err)\n+\t\t}\n+\t}()\n+\tselect {\n+\tcase <-getdonec:\n+\tcase <-time.After(5 * time.Second):\n+\t\tt.Error(\"test timeout; TLS handshake hung?\")\n+\t}\n+}\n+\n+// Trying to repro golang.org/issue/3514\n+func TestTLSServerClosesConnection(t *testing.T) {\n+\tdefer afterTest(t)\n+\tif runtime.GOOS == \"windows\" {\n+\t\tt.Skip(\"skipping flaky test on Windows; golang.org/issue/7634\")\n+\t}\n+\tclosedc := make(chan bool, 1)\n+\tts := httptest.NewTLSServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tif strings.Contains(r.URL.Path, \"/keep-alive-then-die\") {\n+\t\t\tconn, _, _ := w.(Hijacker).Hijack()\n+\t\t\tconn.Write([]byte(\"HTTP/1.1 200 OK\\r\\nContent-Length: 3\\r\\n\\r\\nfoo\"))\n+\t\t\tconn.Close()\n+\t\t\tclosedc <- true\n+\t\t\treturn\n+\t\t}\n+\t\tfmt.Fprintf(w, \"hello\")\n+\t}))\n+\tdefer ts.Close()\n+\ttr := &Transport{\n+\t\tTLSClientConfig: &tls.Config{\n+\t\t\tInsecureSkipVerify: true,\n+\t\t},\n+\t}\n+\tdefer tr.CloseIdleConnections()\n+\tclient := &Client{Transport: tr}\n+\n+\tvar nSuccess = 0\n+\tvar errs []error\n+\tconst trials = 20\n+\tfor i := 0; i < trials; i++ {\n+\t\ttr.CloseIdleConnections()\n+\t\tres, err := client.Get(ts.URL + \"/keep-alive-then-die\")\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\t<-closedc\n+\t\tslurp, err := ioutil.ReadAll(res.Body)\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}\n+\t\tif string(slurp) != \"foo\" {\n+\t\t\tt.Errorf(\"Got %q, want foo\", slurp)\n+\t\t}\n+\n+\t\t// Now try again and see if we successfully\n+\t\t// pick a new connection.\n+\t\tres, err = client.Get(ts.URL + \"/\")\n+\t\tif err != nil {\n+\t\t\terrs = append(errs, err)\n+\t\t\tcontinue\n+\t\t}\n+\t\tslurp, err = ioutil.ReadAll(res.Body)\n+\t\tif err != nil {\n+\t\t\terrs = append(errs, err)\n+\t\t\tcontinue\n+\t\t}\n+\t\tnSuccess++\n+\t}\n+\tif nSuccess > 0 {\n+\t\tt.Logf(\"successes = %d of %d\", nSuccess, trials)\n+\t} else {\n+\t\tt.Errorf(\"All runs failed:\")\n+\t}\n+\tfor _, err := range errs {\n+\t\tt.Logf(\"  err: %v\", err)\n+\t}\n+}\n+\n+// byteFromChanReader is an io.Reader that reads a single byte at a\n+// time from the channel.  When the channel is closed, the reader\n+// returns io.EOF.\n+type byteFromChanReader chan byte\n+\n+func (c byteFromChanReader) Read(p []byte) (n int, err error) {\n+\tif len(p) == 0 {\n+\t\treturn\n+\t}\n+\tb, ok := <-c\n+\tif !ok {\n+\t\treturn 0, io.EOF\n+\t}\n+\tp[0] = b\n+\treturn 1, nil\n+}\n+\n+// Verifies that the Transport doesn't reuse a connection in the case\n+// where the server replies before the request has been fully\n+// written. We still honor that reply (see TestIssue3595), but don't\n+// send future requests on the connection because it's then in a\n+// questionable state.\n+// golang.org/issue/7569\n+func TestTransportNoReuseAfterEarlyResponse(t *testing.T) {\n+\tdefer afterTest(t)\n+\tvar sconn struct {\n+\t\tsync.Mutex\n+\t\tc net.Conn\n+\t}\n+\tvar getOkay bool\n+\tcloseConn := func() {\n+\t\tsconn.Lock()\n+\t\tdefer sconn.Unlock()\n+\t\tif sconn.c != nil {\n+\t\t\tsconn.c.Close()\n+\t\t\tsconn.c = nil\n+\t\t\tif !getOkay {\n+\t\t\t\tt.Logf(\"Closed server connection\")\n+\t\t\t}\n+\t\t}\n+\t}\n+\tdefer closeConn()\n+\n+\tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tif r.Method == \"GET\" {\n+\t\t\tio.WriteString(w, \"bar\")\n+\t\t\treturn\n+\t\t}\n+\t\tconn, _, _ := w.(Hijacker).Hijack()\n+\t\tsconn.Lock()\n+\t\tsconn.c = conn\n+\t\tsconn.Unlock()\n+\t\tconn.Write([]byte(\"HTTP/1.1 200 OK\\r\\nContent-Length: 3\\r\\n\\r\\nfoo\")) // keep-alive\n+\t\tgo io.Copy(ioutil.Discard, conn)\n+\t}))\n+\tdefer ts.Close()\n+\ttr := &Transport{}\n+\tdefer tr.CloseIdleConnections()\n+\tclient := &Client{Transport: tr}\n+\n+\tconst bodySize = 256 << 10\n+\tfinalBit := make(byteFromChanReader, 1)\n+\treq, _ := NewRequest(\"POST\", ts.URL, io.MultiReader(io.LimitReader(neverEnding('x'), bodySize-1), finalBit))\n+\treq.ContentLength = bodySize\n+\tres, err := client.Do(req)\n+\tif err := wantBody(res, err, \"foo\"); err != nil {\n+\t\tt.Errorf(\"POST response: %v\", err)\n+\t}\n+\tdonec := make(chan bool)\n+\tgo func() {\n+\t\tdefer close(donec)\n+\t\tres, err = client.Get(ts.URL)\n+\t\tif err := wantBody(res, err, \"bar\"); err != nil {\n+\t\t\tt.Errorf(\"GET response: %v\", err)\n+\t\t\treturn\n+\t\t}\n+\t\tgetOkay = true // suppress test noise\n+\t}()\n+\ttime.AfterFunc(5*time.Second, closeConn)\n+\tselect {\n+\tcase <-donec:\n+\t\tfinalBit <- 'x' // unblock the writeloop of the first Post\n+\t\tclose(finalBit)\n+\tcase <-time.After(7 * time.Second):\n+\t\tt.Fatal(\"timeout waiting for GET request to finish\")\n+\t}\n+}\n+\n+type errorReader struct {\n+\terr error\n+}\n+\n+func (e errorReader) Read(p []byte) (int, error) { return 0, e.err }\n+\n+type closerFunc func() error\n+\n+func (f closerFunc) Close() error { return f() }\n+\n+// Issue 6981\n+func TestTransportClosesBodyOnError(t *testing.T) {\n+\tif runtime.GOOS == \"plan9\" {\n+\t\tt.Skip(\"skipping test; see http://golang.org/issue/7782\")\n+\t}\n+\tdefer afterTest(t)\n+\treadBody := make(chan error, 1)\n+\tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\t_, err := ioutil.ReadAll(r.Body)\n+\t\treadBody <- err\n+\t}))\n+\tdefer ts.Close()\n+\tfakeErr := errors.New(\"fake error\")\n+\tdidClose := make(chan bool, 1)\n+\treq, _ := NewRequest(\"POST\", ts.URL, struct {\n+\t\tio.Reader\n+\t\tio.Closer\n+\t}{\n+\t\tio.MultiReader(io.LimitReader(neverEnding('x'), 1<<20), errorReader{fakeErr}),\n+\t\tcloserFunc(func() error {\n+\t\t\tselect {\n+\t\t\tcase didClose <- true:\n+\t\t\tdefault:\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}),\n+\t})\n+\tres, err := DefaultClient.Do(req)\n+\tif res != nil {\n+\t\tdefer res.Body.Close()\n+\t}\n+\tif err == nil || !strings.Contains(err.Error(), fakeErr.Error()) {\n+\t\tt.Fatalf(\"Do error = %v; want something containing %q\", err, fakeErr.Error())\n+\t}\n+\tselect {\n+\tcase err := <-readBody:\n+\t\tif err == nil {\n+\t\t\tt.Errorf(\"Unexpected success reading request body from handler; want 'unexpected EOF reading trailer'\")\n+\t\t}\n+\tcase <-time.After(5 * time.Second):\n+\t\tt.Error(\"timeout waiting for server handler to complete\")\n+\t}\n+\tselect {\n+\tcase <-didClose:\n+\tdefault:\n+\t\tt.Errorf(\"didn't see Body.Close\")\n+\t}\n+}\n+\n+func wantBody(res *http.Response, err error, want string) error {\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tslurp, err := ioutil.ReadAll(res.Body)\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"error reading body: %v\", err)\n+\t}\n+\tif string(slurp) != want {\n+\t\treturn fmt.Errorf(\"body = %q; want %q\", slurp, want)\n+\t}\n+\tif err := res.Body.Close(); err != nil {\n+\t\treturn fmt.Errorf(\"body Close = %v\", err)\n+\t}\n+\treturn nil\n+}\n+\n+func newLocalListener(t *testing.T) net.Listener {\n+\tln, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\n+\tif err != nil {\n+\t\tln, err = net.Listen(\"tcp6\", \"[::1]:0\")\n+\t}\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\treturn ln\n+}\n+\n type countCloseReader struct {\n \tn *int\n \tio.Reader"}, {"sha": "2e9f1ebc6791f9ab7b4cbbab3b694ef4e43b4414", "filename": "libgo/go/net/interface.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Finterface.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Finterface.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Finterface.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -7,11 +7,11 @@ package net\n import \"errors\"\n \n var (\n-\terrInvalidInterface         = errors.New(\"net: invalid interface\")\n-\terrInvalidInterfaceIndex    = errors.New(\"net: invalid interface index\")\n-\terrInvalidInterfaceName     = errors.New(\"net: invalid interface name\")\n-\terrNoSuchInterface          = errors.New(\"net: no such interface\")\n-\terrNoSuchMulticastInterface = errors.New(\"net: no such multicast interface\")\n+\terrInvalidInterface         = errors.New(\"invalid network interface\")\n+\terrInvalidInterfaceIndex    = errors.New(\"invalid network interface index\")\n+\terrInvalidInterfaceName     = errors.New(\"invalid network interface name\")\n+\terrNoSuchInterface          = errors.New(\"no such network interface\")\n+\terrNoSuchMulticastInterface = errors.New(\"no such multicast network interface\")\n )\n \n // Interface represents a mapping between network interface name"}, {"sha": "c38fb7f7651d9f584de7e0a272dad1aeca79d98d", "filename": "libgo/go/net/interface_stub.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Finterface_stub.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Finterface_stub.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Finterface_stub.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build plan9\n+// +build nacl plan9 solaris\n \n package net\n "}, {"sha": "0632dafc65e642cfef1ab535386f224fb0600080", "filename": "libgo/go/net/ipraw_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fipraw_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fipraw_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fipraw_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -247,7 +247,7 @@ var ipConnLocalNameTests = []struct {\n \n func TestIPConnLocalName(t *testing.T) {\n \tswitch runtime.GOOS {\n-\tcase \"plan9\", \"windows\":\n+\tcase \"nacl\", \"plan9\", \"windows\":\n \t\tt.Skipf(\"skipping test on %q\", runtime.GOOS)\n \tdefault:\n \t\tif os.Getuid() != 0 {\n@@ -277,7 +277,7 @@ func TestIPConnRemoteName(t *testing.T) {\n \t\t}\n \t}\n \n-\traddr := &IPAddr{IP: IPv4(127, 0, 0, 10).To4()}\n+\traddr := &IPAddr{IP: IPv4(127, 0, 0, 1).To4()}\n \tc, err := DialIP(\"ip:tcp\", &IPAddr{IP: IPv4(127, 0, 0, 1)}, raddr)\n \tif err != nil {\n \t\tt.Fatalf(\"DialIP failed: %v\", err)"}, {"sha": "bbb3f3ed66c364948f86bd8ee2eb3632bf8e08ab", "filename": "libgo/go/net/iprawsock_posix.go", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fiprawsock_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fiprawsock_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fiprawsock_posix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n package net\n \n@@ -79,7 +79,7 @@ func (c *IPConn) ReadFromIP(b []byte) (int, *IPAddr, error) {\n \t// TODO(cw,rsc): consider using readv if we know the family\n \t// type to avoid the header trim/copy\n \tvar addr *IPAddr\n-\tn, sa, err := c.fd.ReadFrom(b)\n+\tn, sa, err := c.fd.readFrom(b)\n \tswitch sa := sa.(type) {\n \tcase *syscall.SockaddrInet4:\n \t\taddr = &IPAddr{IP: sa.Addr[0:]}\n@@ -112,7 +112,7 @@ func (c *IPConn) ReadMsgIP(b, oob []byte) (n, oobn, flags int, addr *IPAddr, err\n \t\treturn 0, 0, 0, nil, syscall.EINVAL\n \t}\n \tvar sa syscall.Sockaddr\n-\tn, oobn, flags, sa, err = c.fd.ReadMsg(b, oob)\n+\tn, oobn, flags, sa, err = c.fd.readMsg(b, oob)\n \tswitch sa := sa.(type) {\n \tcase *syscall.SockaddrInet4:\n \t\taddr = &IPAddr{IP: sa.Addr[0:]}\n@@ -133,14 +133,17 @@ func (c *IPConn) WriteToIP(b []byte, addr *IPAddr) (int, error) {\n \tif !c.ok() {\n \t\treturn 0, syscall.EINVAL\n \t}\n+\tif c.fd.isConnected {\n+\t\treturn 0, &OpError{Op: \"write\", Net: c.fd.net, Addr: addr, Err: ErrWriteToConnected}\n+\t}\n \tif addr == nil {\n \t\treturn 0, &OpError{Op: \"write\", Net: c.fd.net, Addr: nil, Err: errMissingAddress}\n \t}\n \tsa, err := addr.sockaddr(c.fd.family)\n \tif err != nil {\n \t\treturn 0, &OpError{\"write\", c.fd.net, addr, err}\n \t}\n-\treturn c.fd.WriteTo(b, sa)\n+\treturn c.fd.writeTo(b, sa)\n }\n \n // WriteTo implements the PacketConn WriteTo method.\n@@ -162,14 +165,17 @@ func (c *IPConn) WriteMsgIP(b, oob []byte, addr *IPAddr) (n, oobn int, err error\n \tif !c.ok() {\n \t\treturn 0, 0, syscall.EINVAL\n \t}\n+\tif c.fd.isConnected {\n+\t\treturn 0, 0, &OpError{Op: \"write\", Net: c.fd.net, Addr: addr, Err: ErrWriteToConnected}\n+\t}\n \tif addr == nil {\n \t\treturn 0, 0, &OpError{Op: \"write\", Net: c.fd.net, Addr: nil, Err: errMissingAddress}\n \t}\n \tsa, err := addr.sockaddr(c.fd.family)\n \tif err != nil {\n \t\treturn 0, 0, &OpError{\"write\", c.fd.net, addr, err}\n \t}\n-\treturn c.fd.WriteMsg(b, oob, sa)\n+\treturn c.fd.writeMsg(b, oob, sa)\n }\n \n // DialIP connects to the remote address raddr on the network protocol"}, {"sha": "dda857803082fae372c1297f084f7849c2e7b0a9", "filename": "libgo/go/net/ipsock.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fipsock.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fipsock.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fipsock.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -16,7 +16,7 @@ var (\n \t// networking functionality.\n \tsupportsIPv4 bool\n \n-\t// supportsIPv6 reports whether the platfrom supports IPv6\n+\t// supportsIPv6 reports whether the platform supports IPv6\n \t// networking functionality.\n \tsupportsIPv6 bool\n \n@@ -207,7 +207,7 @@ missingBrackets:\n }\n \n func splitHostZone(s string) (host, zone string) {\n-\t// The IPv6 scoped addressing zone identifer starts after the\n+\t// The IPv6 scoped addressing zone identifier starts after the\n \t// last percent sign.\n \tif i := last(s, '%'); i > 0 {\n \t\thost, zone = s[:i], s[i+1:]\n@@ -232,7 +232,7 @@ func JoinHostPort(host, port string) string {\n // address or a DNS name and returns an internet protocol family\n // address. It returns a list that contains a pair of different\n // address family addresses when addr is a DNS name and the name has\n-// mutiple address family records. The result contains at least one\n+// multiple address family records. The result contains at least one\n // address when error is nil.\n func resolveInternetAddr(net, addr string, deadline time.Time) (netaddr, error) {\n \tvar ("}, {"sha": "94ceea31b0350c645f524ed626f4f42d1f46ee74", "filename": "libgo/go/net/ipsock_plan9.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fipsock_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fipsock_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fipsock_plan9.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -60,12 +60,12 @@ func parsePlan9Addr(s string) (ip IP, iport int, err error) {\n \tif i >= 0 {\n \t\taddr = ParseIP(s[:i])\n \t\tif addr == nil {\n-\t\t\treturn nil, 0, errors.New(\"net: parsing IP failed\")\n+\t\t\treturn nil, 0, errors.New(\"parsing IP failed\")\n \t\t}\n \t}\n \tp, _, ok := dtoi(s[i+1:], 0)\n \tif !ok {\n-\t\treturn nil, 0, errors.New(\"net: parsing port failed\")\n+\t\treturn nil, 0, errors.New(\"parsing port failed\")\n \t}\n \tif p < 0 || p > 0xFFFF {\n \t\treturn nil, 0, &AddrError{\"invalid port\", string(p)}"}, {"sha": "2ba4c8efd530a393e424c5bc01fc12861de57714", "filename": "libgo/go/net/ipsock_posix.go", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fipsock_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fipsock_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fipsock_posix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n // Internet protocol family sockets for POSIX\n \n@@ -40,12 +40,13 @@ func probeIPv4Stack() bool {\n func probeIPv6Stack() (supportsIPv6, supportsIPv4map bool) {\n \tvar probes = []struct {\n \t\tladdr TCPAddr\n+\t\tvalue int\n \t\tok    bool\n \t}{\n \t\t// IPv6 communication capability\n-\t\t{TCPAddr{IP: ParseIP(\"::1\")}, false},\n+\t\t{laddr: TCPAddr{IP: ParseIP(\"::1\")}, value: 1},\n \t\t// IPv6 IPv4-mapped address communication capability\n-\t\t{TCPAddr{IP: IPv4(127, 0, 0, 1)}, false},\n+\t\t{laddr: TCPAddr{IP: IPv4(127, 0, 0, 1)}, value: 0},\n \t}\n \n \tfor i := range probes {\n@@ -54,7 +55,7 @@ func probeIPv6Stack() (supportsIPv6, supportsIPv4map bool) {\n \t\t\tcontinue\n \t\t}\n \t\tdefer closesocket(s)\n-\t\tsyscall.SetsockoptInt(s, syscall.IPPROTO_IPV6, syscall.IPV6_V6ONLY, 0)\n+\t\tsyscall.SetsockoptInt(s, syscall.IPPROTO_IPV6, syscall.IPV6_V6ONLY, probes[i].value)\n \t\tsa, err := probes[i].laddr.sockaddr(syscall.AF_INET6)\n \t\tif err != nil {\n \t\t\tcontinue"}, {"sha": "b80ac10e0d9d0ef155c123e11fc26a031f200873", "filename": "libgo/go/net/lookup_plan9.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Flookup_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Flookup_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Flookup_plan9.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -63,7 +63,7 @@ func queryCS1(net string, ip IP, port int) (clone, dest string, err error) {\n \t}\n \tf := getFields(lines[0])\n \tif len(f) < 2 {\n-\t\treturn \"\", \"\", errors.New(\"net: bad response from ndb/cs\")\n+\t\treturn \"\", \"\", errors.New(\"bad response from ndb/cs\")\n \t}\n \tclone, dest = f[0], f[1]\n \treturn\n@@ -199,7 +199,7 @@ func lookupCNAME(name string) (cname string, err error) {\n \t\t\treturn f[2] + \".\", nil\n \t\t}\n \t}\n-\treturn \"\", errors.New(\"net: bad response from ndb/dns\")\n+\treturn \"\", errors.New(\"bad response from ndb/dns\")\n }\n \n func lookupSRV(service, proto, name string) (cname string, addrs []*SRV, err error) {"}, {"sha": "b1d2f8f31a9e6eea37a9659464e970e12699e6ff", "filename": "libgo/go/net/lookup_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Flookup_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Flookup_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Flookup_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n \n package net\n "}, {"sha": "ba0778caa73af448b960f71557b239f9f2debfd4", "filename": "libgo/go/net/mail/message.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fmail%2Fmessage.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fmail%2Fmessage.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fmail%2Fmessage.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -363,7 +363,7 @@ func (p *addrParser) consumePhrase() (phrase string, err error) {\n \t// Ignore any error if we got at least one word.\n \tif err != nil && len(words) == 0 {\n \t\tdebug.Printf(\"consumePhrase: hit err: %v\", err)\n-\t\treturn \"\", errors.New(\"mail: missing word in phrase\")\n+\t\treturn \"\", fmt.Errorf(\"mail: missing word in phrase: %v\", err)\n \t}\n \tphrase = strings.Join(words, \" \")\n \treturn phrase, nil\n@@ -442,11 +442,11 @@ func (p *addrParser) len() int {\n func decodeRFC2047Word(s string) (string, error) {\n \tfields := strings.Split(s, \"?\")\n \tif len(fields) != 5 || fields[0] != \"=\" || fields[4] != \"=\" {\n-\t\treturn \"\", errors.New(\"mail: address not RFC 2047 encoded\")\n+\t\treturn \"\", errors.New(\"address not RFC 2047 encoded\")\n \t}\n \tcharset, enc := strings.ToLower(fields[1]), strings.ToLower(fields[2])\n \tif charset != \"iso-8859-1\" && charset != \"utf-8\" {\n-\t\treturn \"\", fmt.Errorf(\"mail: charset not supported: %q\", charset)\n+\t\treturn \"\", fmt.Errorf(\"charset not supported: %q\", charset)\n \t}\n \n \tin := bytes.NewBufferString(fields[3])\n@@ -457,7 +457,7 @@ func decodeRFC2047Word(s string) (string, error) {\n \tcase \"q\":\n \t\tr = qDecoder{r: in}\n \tdefault:\n-\t\treturn \"\", fmt.Errorf(\"mail: RFC 2047 encoding not supported: %q\", enc)\n+\t\treturn \"\", fmt.Errorf(\"RFC 2047 encoding not supported: %q\", enc)\n \t}\n \n \tdec, err := ioutil.ReadAll(r)"}, {"sha": "eb9c8cbdc9b61ccc09aabea0d7b2586c50067a4c", "filename": "libgo/go/net/mail/message_test.go", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fmail%2Fmessage_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fmail%2Fmessage_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fmail%2Fmessage_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -8,6 +8,7 @@ import (\n \t\"bytes\"\n \t\"io/ioutil\"\n \t\"reflect\"\n+\t\"strings\"\n \t\"testing\"\n \t\"time\"\n )\n@@ -116,6 +117,14 @@ func TestDateParsing(t *testing.T) {\n \t}\n }\n \n+func TestAddressParsingError(t *testing.T) {\n+\tconst txt = \"=?iso-8859-2?Q?Bogl=E1rka_Tak=E1cs?= <unknown@gmail.com>\"\n+\t_, err := ParseAddress(txt)\n+\tif err == nil || !strings.Contains(err.Error(), \"charset not supported\") {\n+\t\tt.Errorf(`mail.ParseAddress(%q) err: %q, want \".*charset not supported.*\"`, txt, err)\n+\t}\n+}\n+\n func TestAddressParsing(t *testing.T) {\n \ttests := []struct {\n \t\taddrsStr string"}, {"sha": "63dbce88e9a5550b18e1bba1dacba3befac90fd0", "filename": "libgo/go/net/multicast_test.go", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fmulticast_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fmulticast_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fmulticast_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -25,8 +25,10 @@ var ipv4MulticastListenerTests = []struct {\n // port.\n func TestIPv4MulticastListener(t *testing.T) {\n \tswitch runtime.GOOS {\n-\tcase \"plan9\":\n+\tcase \"nacl\", \"plan9\":\n \t\tt.Skipf(\"skipping test on %q\", runtime.GOOS)\n+\tcase \"solaris\":\n+\t\tt.Skipf(\"skipping test on solaris, see issue 7399\")\n \t}\n \n \tcloser := func(cs []*UDPConn) {\n@@ -93,8 +95,10 @@ var ipv6MulticastListenerTests = []struct {\n // port.\n func TestIPv6MulticastListener(t *testing.T) {\n \tswitch runtime.GOOS {\n-\tcase \"plan9\", \"solaris\":\n+\tcase \"plan9\":\n \t\tt.Skipf(\"skipping test on %q\", runtime.GOOS)\n+\tcase \"solaris\":\n+\t\tt.Skipf(\"skipping test on solaris, see issue 7399\")\n \t}\n \tif !supportsIPv6 {\n \t\tt.Skip(\"ipv6 is not supported\")"}, {"sha": "ca56af54fc6f899c4510934e7a3cb76177eecab5", "filename": "libgo/go/net/net.go", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fnet.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fnet.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fnet.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -275,7 +275,16 @@ type Listener interface {\n \tAddr() Addr\n }\n \n-var errMissingAddress = errors.New(\"missing address\")\n+// Various errors contained in OpError.\n+var (\n+\t// For connection setup and write operations.\n+\terrMissingAddress = errors.New(\"missing address\")\n+\n+\t// For both read and write operations.\n+\terrTimeout          error = &timeoutError{}\n+\terrClosing                = errors.New(\"use of closed network connection\")\n+\tErrWriteToConnected       = errors.New(\"use of WriteTo with pre-connected connection\")\n+)\n \n // OpError is the error type usually returned by functions in the net\n // package. It describes the operation, network type, and address of\n@@ -337,10 +346,6 @@ func (e *timeoutError) Error() string   { return \"i/o timeout\" }\n func (e *timeoutError) Timeout() bool   { return true }\n func (e *timeoutError) Temporary() bool { return true }\n \n-var errTimeout error = &timeoutError{}\n-\n-var errClosing = errors.New(\"use of closed network connection\")\n-\n type AddrError struct {\n \tErr  string\n \tAddr string"}, {"sha": "bfed4d657fdde064f741076c88f001d948620068", "filename": "libgo/go/net/net_test.go", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fnet_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fnet_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fnet_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -28,12 +28,14 @@ func TestShutdown(t *testing.T) {\n \t\tdefer ln.Close()\n \t\tc, err := ln.Accept()\n \t\tif err != nil {\n-\t\t\tt.Fatalf(\"Accept: %v\", err)\n+\t\t\tt.Errorf(\"Accept: %v\", err)\n+\t\t\treturn\n \t\t}\n \t\tvar buf [10]byte\n \t\tn, err := c.Read(buf[:])\n \t\tif n != 0 || err != io.EOF {\n-\t\t\tt.Fatalf(\"server Read = %d, %v; want 0, io.EOF\", n, err)\n+\t\t\tt.Errorf(\"server Read = %d, %v; want 0, io.EOF\", n, err)\n+\t\t\treturn\n \t\t}\n \t\tc.Write([]byte(\"response\"))\n \t\tc.Close()\n@@ -62,7 +64,7 @@ func TestShutdown(t *testing.T) {\n \n func TestShutdownUnix(t *testing.T) {\n \tswitch runtime.GOOS {\n-\tcase \"windows\", \"plan9\":\n+\tcase \"nacl\", \"plan9\", \"windows\":\n \t\tt.Skipf(\"skipping test on %q\", runtime.GOOS)\n \t}\n \tf, err := ioutil.TempFile(\"\", \"go_net_unixtest\")\n@@ -84,12 +86,14 @@ func TestShutdownUnix(t *testing.T) {\n \tgo func() {\n \t\tc, err := ln.Accept()\n \t\tif err != nil {\n-\t\t\tt.Fatalf(\"Accept: %v\", err)\n+\t\t\tt.Errorf(\"Accept: %v\", err)\n+\t\t\treturn\n \t\t}\n \t\tvar buf [10]byte\n \t\tn, err := c.Read(buf[:])\n \t\tif n != 0 || err != io.EOF {\n-\t\t\tt.Fatalf(\"server Read = %d, %v; want 0, io.EOF\", n, err)\n+\t\t\tt.Errorf(\"server Read = %d, %v; want 0, io.EOF\", n, err)\n+\t\t\treturn\n \t\t}\n \t\tc.Write([]byte(\"response\"))\n \t\tc.Close()\n@@ -196,7 +200,8 @@ func TestTCPClose(t *testing.T) {\n \tgo func() {\n \t\tc, err := Dial(\"tcp\", l.Addr().String())\n \t\tif err != nil {\n-\t\t\tt.Fatal(err)\n+\t\t\tt.Errorf(\"Dial: %v\", err)\n+\t\t\treturn\n \t\t}\n \n \t\tgo read(c)"}, {"sha": "b6e4e76f93045a9d70847c1d551d53d89193491b", "filename": "libgo/go/net/packetconn_test.go", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fpacketconn_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fpacketconn_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fpacketconn_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -15,12 +15,6 @@ import (\n \t\"time\"\n )\n \n-func strfunc(s string) func() string {\n-\treturn func() string {\n-\t\treturn s\n-\t}\n-}\n-\n func packetConnTestData(t *testing.T, net string, i int) ([]byte, func()) {\n \tswitch net {\n \tcase \"udp\":\n@@ -46,7 +40,7 @@ func packetConnTestData(t *testing.T, net string, i int) ([]byte, func()) {\n \t\treturn b, nil\n \tcase \"unixgram\":\n \t\tswitch runtime.GOOS {\n-\t\tcase \"plan9\", \"windows\":\n+\t\tcase \"nacl\", \"plan9\", \"windows\":\n \t\t\treturn nil, func() {\n \t\t\t\tt.Logf(\"skipping %q test on %q\", net, runtime.GOOS)\n \t\t\t}\n@@ -62,12 +56,12 @@ func packetConnTestData(t *testing.T, net string, i int) ([]byte, func()) {\n \n var packetConnTests = []struct {\n \tnet   string\n-\taddr1 func() string\n-\taddr2 func() string\n+\taddr1 string\n+\taddr2 string\n }{\n-\t{\"udp\", strfunc(\"127.0.0.1:0\"), strfunc(\"127.0.0.1:0\")},\n-\t{\"ip:icmp\", strfunc(\"127.0.0.1\"), strfunc(\"127.0.0.1\")},\n-\t{\"unixgram\", testUnixAddr, testUnixAddr},\n+\t{\"udp\", \"127.0.0.1:0\", \"127.0.0.1:0\"},\n+\t{\"ip:icmp\", \"127.0.0.1\", \"127.0.0.1\"},\n+\t{\"unixgram\", testUnixAddr(), testUnixAddr()},\n }\n \n func TestPacketConn(t *testing.T) {\n@@ -88,22 +82,21 @@ func TestPacketConn(t *testing.T) {\n \t\t\tcontinue\n \t\t}\n \n-\t\taddr1, addr2 := tt.addr1(), tt.addr2()\n-\t\tc1, err := ListenPacket(tt.net, addr1)\n+\t\tc1, err := ListenPacket(tt.net, tt.addr1)\n \t\tif err != nil {\n \t\t\tt.Fatalf(\"ListenPacket failed: %v\", err)\n \t\t}\n-\t\tdefer closer(c1, netstr[0], addr1, addr2)\n+\t\tdefer closer(c1, netstr[0], tt.addr1, tt.addr2)\n \t\tc1.LocalAddr()\n \t\tc1.SetDeadline(time.Now().Add(100 * time.Millisecond))\n \t\tc1.SetReadDeadline(time.Now().Add(100 * time.Millisecond))\n \t\tc1.SetWriteDeadline(time.Now().Add(100 * time.Millisecond))\n \n-\t\tc2, err := ListenPacket(tt.net, addr2)\n+\t\tc2, err := ListenPacket(tt.net, tt.addr2)\n \t\tif err != nil {\n \t\t\tt.Fatalf(\"ListenPacket failed: %v\", err)\n \t\t}\n-\t\tdefer closer(c2, netstr[0], addr1, addr2)\n+\t\tdefer closer(c2, netstr[0], tt.addr1, tt.addr2)\n \t\tc2.LocalAddr()\n \t\tc2.SetDeadline(time.Now().Add(100 * time.Millisecond))\n \t\tc2.SetReadDeadline(time.Now().Add(100 * time.Millisecond))\n@@ -145,12 +138,11 @@ func TestConnAndPacketConn(t *testing.T) {\n \t\t\tcontinue\n \t\t}\n \n-\t\taddr1, addr2 := tt.addr1(), tt.addr2()\n-\t\tc1, err := ListenPacket(tt.net, addr1)\n+\t\tc1, err := ListenPacket(tt.net, tt.addr1)\n \t\tif err != nil {\n \t\t\tt.Fatalf(\"ListenPacket failed: %v\", err)\n \t\t}\n-\t\tdefer closer(c1, netstr[0], addr1, addr2)\n+\t\tdefer closer(c1, netstr[0], tt.addr1, tt.addr2)\n \t\tc1.LocalAddr()\n \t\tc1.SetDeadline(time.Now().Add(100 * time.Millisecond))\n \t\tc1.SetReadDeadline(time.Now().Add(100 * time.Millisecond))"}, {"sha": "89558c1f029bc7221f6f54dad192a00e7c495ee4", "filename": "libgo/go/net/port_unix.go", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fport_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fport_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fport_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,20 +2,24 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n \n // Read system port mappings from /etc/services\n \n package net\n \n import \"sync\"\n \n-var services map[string]map[string]int\n+// services contains minimal mappings between services names and port\n+// numbers for platforms that don't have a complete list of port numbers\n+// (some Solaris distros).\n+var services = map[string]map[string]int{\n+\t\"tcp\": {\"http\": 80},\n+}\n var servicesError error\n var onceReadServices sync.Once\n \n func readServices() {\n-\tservices = make(map[string]map[string]int)\n \tvar file *file\n \tif file, servicesError = open(\"/etc/services\"); servicesError != nil {\n \t\treturn\n@@ -29,7 +33,7 @@ func readServices() {\n \t\tif len(f) < 2 {\n \t\t\tcontinue\n \t\t}\n-\t\tportnet := f[1] // \"tcp/80\"\n+\t\tportnet := f[1] // \"80/tcp\"\n \t\tport, j, ok := dtoi(portnet, 0)\n \t\tif !ok || port <= 0 || j >= len(portnet) || portnet[j] != '/' {\n \t\t\tcontinue"}, {"sha": "12856b6c311cf038a6988be5c5e8ea38787efd96", "filename": "libgo/go/net/protoconn_test.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fprotoconn_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fprotoconn_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fprotoconn_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -19,7 +19,7 @@ import (\n // also uses /tmp directory in case it is prohibited to create UNIX\n // sockets in TMPDIR.\n func testUnixAddr() string {\n-\tf, err := ioutil.TempFile(\"/tmp\", \"nettest\")\n+\tf, err := ioutil.TempFile(\"\", \"nettest\")\n \tif err != nil {\n \t\tpanic(err)\n \t}\n@@ -236,7 +236,7 @@ func TestIPConnSpecificMethods(t *testing.T) {\n \n func TestUnixListenerSpecificMethods(t *testing.T) {\n \tswitch runtime.GOOS {\n-\tcase \"plan9\", \"windows\":\n+\tcase \"nacl\", \"plan9\", \"windows\":\n \t\tt.Skipf(\"skipping test on %q\", runtime.GOOS)\n \t}\n \n@@ -278,7 +278,7 @@ func TestUnixListenerSpecificMethods(t *testing.T) {\n \n func TestUnixConnSpecificMethods(t *testing.T) {\n \tswitch runtime.GOOS {\n-\tcase \"plan9\", \"windows\":\n+\tcase \"nacl\", \"plan9\", \"windows\":\n \t\tt.Skipf(\"skipping test on %q\", runtime.GOOS)\n \t}\n "}, {"sha": "21f79b06844638e485f055b3a24c0407be310c64", "filename": "libgo/go/net/rpc/client.go", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Frpc%2Fclient.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Frpc%2Fclient.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fclient.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -39,14 +39,16 @@ type Call struct {\n // with a single Client, and a Client may be used by\n // multiple goroutines simultaneously.\n type Client struct {\n-\tmutex    sync.Mutex // protects pending, seq, request\n-\tsending  sync.Mutex\n+\tcodec ClientCodec\n+\n+\tsending sync.Mutex\n+\n+\tmutex    sync.Mutex // protects following\n \trequest  Request\n \tseq      uint64\n-\tcodec    ClientCodec\n \tpending  map[uint64]*Call\n-\tclosing  bool\n-\tshutdown bool\n+\tclosing  bool // user has called Close\n+\tshutdown bool // server has told us to stop\n }\n \n // A ClientCodec implements writing of RPC requests and\n@@ -274,7 +276,7 @@ func Dial(network, address string) (*Client, error) {\n \n func (client *Client) Close() error {\n \tclient.mutex.Lock()\n-\tif client.shutdown || client.closing {\n+\tif client.closing {\n \t\tclient.mutex.Unlock()\n \t\treturn ErrShutdown\n \t}"}, {"sha": "bbfc1ec3a3ec2851a97eb5b9c7ac6f601e2f9204", "filename": "libgo/go/net/rpc/client_test.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Frpc%2Fclient_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Frpc%2Fclient_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fclient_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package rpc\n+\n+import (\n+\t\"errors\"\n+\t\"testing\"\n+)\n+\n+type shutdownCodec struct {\n+\tresponded chan int\n+\tclosed    bool\n+}\n+\n+func (c *shutdownCodec) WriteRequest(*Request, interface{}) error { return nil }\n+func (c *shutdownCodec) ReadResponseBody(interface{}) error       { return nil }\n+func (c *shutdownCodec) ReadResponseHeader(*Response) error {\n+\tc.responded <- 1\n+\treturn errors.New(\"shutdownCodec ReadResponseHeader\")\n+}\n+func (c *shutdownCodec) Close() error {\n+\tc.closed = true\n+\treturn nil\n+}\n+\n+func TestCloseCodec(t *testing.T) {\n+\tcodec := &shutdownCodec{responded: make(chan int)}\n+\tclient := NewClientWithCodec(codec)\n+\t<-codec.responded\n+\tclient.Close()\n+\tif !codec.closed {\n+\t\tt.Error(\"client.Close did not close codec\")\n+\t}\n+}"}, {"sha": "a433a365e88849be9a6d1f41575ab26fddfc0635", "filename": "libgo/go/net/rpc/jsonrpc/all_test.go", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fall_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -5,13 +5,15 @@\n package jsonrpc\n \n import (\n+\t\"bytes\"\n \t\"encoding/json\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n \t\"net\"\n \t\"net/rpc\"\n+\t\"strings\"\n \t\"testing\"\n )\n \n@@ -202,6 +204,39 @@ func TestMalformedOutput(t *testing.T) {\n \t}\n }\n \n+func TestServerErrorHasNullResult(t *testing.T) {\n+\tvar out bytes.Buffer\n+\tsc := NewServerCodec(struct {\n+\t\tio.Reader\n+\t\tio.Writer\n+\t\tio.Closer\n+\t}{\n+\t\tReader: strings.NewReader(`{\"method\": \"Arith.Add\", \"id\": \"123\", \"params\": []}`),\n+\t\tWriter: &out,\n+\t\tCloser: ioutil.NopCloser(nil),\n+\t})\n+\tr := new(rpc.Request)\n+\tif err := sc.ReadRequestHeader(r); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tconst valueText = \"the value we don't want to see\"\n+\tconst errorText = \"some error\"\n+\terr := sc.WriteResponse(&rpc.Response{\n+\t\tServiceMethod: \"Method\",\n+\t\tSeq:           1,\n+\t\tError:         errorText,\n+\t}, valueText)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif !strings.Contains(out.String(), errorText) {\n+\t\tt.Fatalf(\"Response didn't contain expected error %q: %s\", errorText, &out)\n+\t}\n+\tif strings.Contains(out.String(), valueText) {\n+\t\tt.Errorf(\"Response contains both an error and value: %s\", &out)\n+\t}\n+}\n+\n func TestUnexpectedError(t *testing.T) {\n \tcli, srv := myPipe()\n \tgo cli.PipeWriter.CloseWithError(errors.New(\"unexpected error!\")) // reader will get this error"}, {"sha": "e6d37cfa64f3d72e4c51d4bf4b28ccee15430c27", "filename": "libgo/go/net/rpc/jsonrpc/server.go", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fserver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fserver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fserver.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -100,7 +100,6 @@ func (c *serverCodec) ReadRequestBody(x interface{}) error {\n var null = json.RawMessage([]byte(\"null\"))\n \n func (c *serverCodec) WriteResponse(r *rpc.Response, x interface{}) error {\n-\tvar resp serverResponse\n \tc.mutex.Lock()\n \tb, ok := c.pending[r.Seq]\n \tif !ok {\n@@ -114,10 +113,9 @@ func (c *serverCodec) WriteResponse(r *rpc.Response, x interface{}) error {\n \t\t// Invalid request so no id.  Use JSON null.\n \t\tb = &null\n \t}\n-\tresp.Id = b\n-\tresp.Result = x\n+\tresp := serverResponse{Id: b}\n \tif r.Error == \"\" {\n-\t\tresp.Error = nil\n+\t\tresp.Result = x\n \t} else {\n \t\tresp.Error = r.Error\n \t}"}, {"sha": "0dc4ddc2de01cb0e130b0f569e13f16e1c21646f", "filename": "libgo/go/net/rpc/server_test.go", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Frpc%2Fserver_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Frpc%2Fserver_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fserver_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -594,7 +594,6 @@ func TestErrorAfterClientClose(t *testing.T) {\n }\n \n func benchmarkEndToEnd(dial func() (*Client, error), b *testing.B) {\n-\tb.StopTimer()\n \tonce.Do(startServer)\n \tclient, err := dial()\n \tif err != nil {\n@@ -604,33 +603,24 @@ func benchmarkEndToEnd(dial func() (*Client, error), b *testing.B) {\n \n \t// Synchronous calls\n \targs := &Args{7, 8}\n-\tprocs := runtime.GOMAXPROCS(-1)\n-\tN := int32(b.N)\n-\tvar wg sync.WaitGroup\n-\twg.Add(procs)\n-\tb.StartTimer()\n-\n-\tfor p := 0; p < procs; p++ {\n-\t\tgo func() {\n-\t\t\treply := new(Reply)\n-\t\t\tfor atomic.AddInt32(&N, -1) >= 0 {\n-\t\t\t\terr := client.Call(\"Arith.Add\", args, reply)\n-\t\t\t\tif err != nil {\n-\t\t\t\t\tb.Fatalf(\"rpc error: Add: expected no error but got string %q\", err.Error())\n-\t\t\t\t}\n-\t\t\t\tif reply.C != args.A+args.B {\n-\t\t\t\t\tb.Fatalf(\"rpc error: Add: expected %d got %d\", reply.C, args.A+args.B)\n-\t\t\t\t}\n+\tb.ResetTimer()\n+\n+\tb.RunParallel(func(pb *testing.PB) {\n+\t\treply := new(Reply)\n+\t\tfor pb.Next() {\n+\t\t\terr := client.Call(\"Arith.Add\", args, reply)\n+\t\t\tif err != nil {\n+\t\t\t\tb.Fatalf(\"rpc error: Add: expected no error but got string %q\", err.Error())\n \t\t\t}\n-\t\t\twg.Done()\n-\t\t}()\n-\t}\n-\twg.Wait()\n+\t\t\tif reply.C != args.A+args.B {\n+\t\t\t\tb.Fatalf(\"rpc error: Add: expected %d got %d\", reply.C, args.A+args.B)\n+\t\t\t}\n+\t\t}\n+\t})\n }\n \n func benchmarkEndToEndAsync(dial func() (*Client, error), b *testing.B) {\n \tconst MaxConcurrentCalls = 100\n-\tb.StopTimer()\n \tonce.Do(startServer)\n \tclient, err := dial()\n \tif err != nil {\n@@ -647,7 +637,7 @@ func benchmarkEndToEndAsync(dial func() (*Client, error), b *testing.B) {\n \twg.Add(procs)\n \tgate := make(chan bool, MaxConcurrentCalls)\n \tres := make(chan *Call, MaxConcurrentCalls)\n-\tb.StartTimer()\n+\tb.ResetTimer()\n \n \tfor p := 0; p < procs; p++ {\n \t\tgo func() {"}, {"sha": "bc88fd3b907aa7fb7791f166ac065ce17ff6e637", "filename": "libgo/go/net/sendfile_dragonfly.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsendfile_dragonfly.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsendfile_dragonfly.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsendfile_dragonfly.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -23,7 +23,7 @@ const maxSendfileSize int = 4 << 20\n // if handled == false, sendFile performed no work.\n func sendFile(c *netFD, r io.Reader) (written int64, err error, handled bool) {\n \t// DragonFly uses 0 as the \"until EOF\" value. If you pass in more bytes than the\n-\t// file contains, it will loop back to the beginning ad nauseum until it's sent\n+\t// file contains, it will loop back to the beginning ad nauseam until it's sent\n \t// exactly the number of bytes told to. As such, we need to know exactly how many\n \t// bytes to send.\n \tvar remain int64 = 0"}, {"sha": "ffc147262a8def15b616f2b57e8a31ab73c31bc1", "filename": "libgo/go/net/sendfile_freebsd.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsendfile_freebsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsendfile_freebsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsendfile_freebsd.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -23,7 +23,7 @@ const maxSendfileSize int = 4 << 20\n // if handled == false, sendFile performed no work.\n func sendFile(c *netFD, r io.Reader) (written int64, err error, handled bool) {\n \t// FreeBSD uses 0 as the \"until EOF\" value. If you pass in more bytes than the\n-\t// file contains, it will loop back to the beginning ad nauseum until it's sent\n+\t// file contains, it will loop back to the beginning ad nauseam until it's sent\n \t// exactly the number of bytes told to. As such, we need to know exactly how many\n \t// bytes to send.\n \tvar remain int64 = 0"}, {"sha": "03426ef0df17897e9966d95b7c44b5cd08e3759d", "filename": "libgo/go/net/sendfile_stub.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsendfile_stub.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsendfile_stub.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsendfile_stub.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin netbsd openbsd\n+// +build darwin nacl netbsd openbsd solaris\n \n package net\n "}, {"sha": "6a2bb924329d37fd65653cb01bd7b9ef917e0502", "filename": "libgo/go/net/server_test.go", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fserver_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fserver_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fserver_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -9,21 +9,20 @@ import (\n \t\"io\"\n \t\"os\"\n \t\"runtime\"\n-\t\"strconv\"\n \t\"testing\"\n \t\"time\"\n )\n \n-func skipServerTest(net, unixsotype, addr string, ipv6, ipv4map, linuxonly bool) bool {\n+func skipServerTest(net, unixsotype, addr string, ipv6, ipv4map, linuxOnly bool) bool {\n \tswitch runtime.GOOS {\n \tcase \"linux\":\n-\tcase \"plan9\", \"windows\":\n+\tcase \"nacl\", \"plan9\", \"windows\":\n \t\t// \"unix\" sockets are not supported on Windows and Plan 9.\n \t\tif net == unixsotype {\n \t\t\treturn true\n \t\t}\n \tdefault:\n-\t\tif net == unixsotype && linuxonly {\n+\t\tif net == unixsotype && linuxOnly {\n \t\t\treturn true\n \t\t}\n \t}\n@@ -42,21 +41,15 @@ func skipServerTest(net, unixsotype, addr string, ipv6, ipv4map, linuxonly bool)\n \treturn false\n }\n \n-func tempfile(filename string) string {\n-\t// use /tmp in case it is prohibited to create\n-\t// UNIX sockets in TMPDIR\n-\treturn \"/tmp/\" + filename + \".\" + strconv.Itoa(os.Getpid())\n-}\n-\n var streamConnServerTests = []struct {\n-\tsnet    string // server side\n-\tsaddr   string\n-\tcnet    string // client side\n-\tcaddr   string\n-\tipv6    bool // test with underlying AF_INET6 socket\n-\tipv4map bool // test with IPv6 IPv4-mapping functionality\n-\tempty   bool // test with empty data\n-\tlinux   bool // test with abstract unix domain socket, a Linux-ism\n+\tsnet      string // server side\n+\tsaddr     string\n+\tcnet      string // client side\n+\tcaddr     string\n+\tipv6      bool // test with underlying AF_INET6 socket\n+\tipv4map   bool // test with IPv6 IPv4-mapping functionality\n+\tempty     bool // test with empty data\n+\tlinuxOnly bool // test with abstract unix domain socket, a Linux-ism\n }{\n \t{snet: \"tcp\", saddr: \"\", cnet: \"tcp\", caddr: \"127.0.0.1\"},\n \t{snet: \"tcp\", saddr: \"0.0.0.0\", cnet: \"tcp\", caddr: \"127.0.0.1\"},\n@@ -93,13 +86,13 @@ var streamConnServerTests = []struct {\n \n \t{snet: \"tcp6\", saddr: \"[::1]\", cnet: \"tcp6\", caddr: \"[::1]\", ipv6: true},\n \n-\t{snet: \"unix\", saddr: tempfile(\"gotest1.net\"), cnet: \"unix\", caddr: tempfile(\"gotest1.net.local\")},\n-\t{snet: \"unix\", saddr: \"@gotest2/net\", cnet: \"unix\", caddr: \"@gotest2/net.local\", linux: true},\n+\t{snet: \"unix\", saddr: testUnixAddr(), cnet: \"unix\", caddr: testUnixAddr()},\n+\t{snet: \"unix\", saddr: \"@gotest2/net\", cnet: \"unix\", caddr: \"@gotest2/net.local\", linuxOnly: true},\n }\n \n func TestStreamConnServer(t *testing.T) {\n \tfor _, tt := range streamConnServerTests {\n-\t\tif skipServerTest(tt.snet, \"unix\", tt.saddr, tt.ipv6, tt.ipv4map, tt.linux) {\n+\t\tif skipServerTest(tt.snet, \"unix\", tt.saddr, tt.ipv6, tt.ipv4map, tt.linuxOnly) {\n \t\t\tcontinue\n \t\t}\n \n@@ -137,21 +130,28 @@ func TestStreamConnServer(t *testing.T) {\n }\n \n var seqpacketConnServerTests = []struct {\n-\tnet   string\n-\tsaddr string // server address\n-\tcaddr string // client address\n-\tempty bool   // test with empty data\n+\tnet       string\n+\tsaddr     string // server address\n+\tcaddr     string // client address\n+\tempty     bool   // test with empty data\n+\tlinuxOnly bool   // test with abstract unix domain socket, a Linux-ism\n }{\n-\t{net: \"unixpacket\", saddr: tempfile(\"/gotest3.net\"), caddr: tempfile(\"gotest3.net.local\")},\n-\t{net: \"unixpacket\", saddr: \"@gotest4/net\", caddr: \"@gotest4/net.local\"},\n+\t{net: \"unixpacket\", saddr: testUnixAddr(), caddr: testUnixAddr()},\n+\t{net: \"unixpacket\", saddr: \"@gotest4/net\", caddr: \"@gotest4/net.local\", linuxOnly: true},\n }\n \n func TestSeqpacketConnServer(t *testing.T) {\n-\tif runtime.GOOS != \"linux\" {\n+\tswitch runtime.GOOS {\n+\tcase \"darwin\", \"nacl\", \"openbsd\", \"plan9\", \"windows\":\n+\t\tfallthrough\n+\tcase \"freebsd\": // FreeBSD 8 doesn't support unixpacket\n \t\tt.Skipf(\"skipping test on %q\", runtime.GOOS)\n \t}\n \n \tfor _, tt := range seqpacketConnServerTests {\n+\t\tif runtime.GOOS != \"linux\" && tt.linuxOnly {\n+\t\t\tcontinue\n+\t\t}\n \t\tlistening := make(chan string)\n \t\tdone := make(chan int)\n \t\tswitch tt.net {\n@@ -248,15 +248,15 @@ func runStreamConnClient(t *testing.T, net, taddr string, isEmpty bool) {\n var testDatagram = flag.Bool(\"datagram\", false, \"whether to test udp and unixgram\")\n \n var datagramPacketConnServerTests = []struct {\n-\tsnet    string // server side\n-\tsaddr   string\n-\tcnet    string // client side\n-\tcaddr   string\n-\tipv6    bool // test with underlying AF_INET6 socket\n-\tipv4map bool // test with IPv6 IPv4-mapping functionality\n-\tdial    bool // test with Dial or DialUnix\n-\tempty   bool // test with empty data\n-\tlinux   bool // test with abstract unix domain socket, a Linux-ism\n+\tsnet      string // server side\n+\tsaddr     string\n+\tcnet      string // client side\n+\tcaddr     string\n+\tipv6      bool // test with underlying AF_INET6 socket\n+\tipv4map   bool // test with IPv6 IPv4-mapping functionality\n+\tdial      bool // test with Dial or DialUnix\n+\tempty     bool // test with empty data\n+\tlinuxOnly bool // test with abstract unix domain socket, a Linux-ism\n }{\n \t{snet: \"udp\", saddr: \"\", cnet: \"udp\", caddr: \"127.0.0.1\"},\n \t{snet: \"udp\", saddr: \"0.0.0.0\", cnet: \"udp\", caddr: \"127.0.0.1\"},\n@@ -301,12 +301,12 @@ var datagramPacketConnServerTests = []struct {\n \t{snet: \"udp\", saddr: \"[::1]\", cnet: \"udp\", caddr: \"[::1]\", ipv6: true, empty: true},\n \t{snet: \"udp\", saddr: \"[::1]\", cnet: \"udp\", caddr: \"[::1]\", ipv6: true, dial: true, empty: true},\n \n-\t{snet: \"unixgram\", saddr: tempfile(\"gotest5.net\"), cnet: \"unixgram\", caddr: tempfile(\"gotest5.net.local\")},\n-\t{snet: \"unixgram\", saddr: tempfile(\"gotest5.net\"), cnet: \"unixgram\", caddr: tempfile(\"gotest5.net.local\"), dial: true},\n-\t{snet: \"unixgram\", saddr: tempfile(\"gotest5.net\"), cnet: \"unixgram\", caddr: tempfile(\"gotest5.net.local\"), empty: true},\n-\t{snet: \"unixgram\", saddr: tempfile(\"gotest5.net\"), cnet: \"unixgram\", caddr: tempfile(\"gotest5.net.local\"), dial: true, empty: true},\n+\t{snet: \"unixgram\", saddr: testUnixAddr(), cnet: \"unixgram\", caddr: testUnixAddr()},\n+\t{snet: \"unixgram\", saddr: testUnixAddr(), cnet: \"unixgram\", caddr: testUnixAddr(), dial: true},\n+\t{snet: \"unixgram\", saddr: testUnixAddr(), cnet: \"unixgram\", caddr: testUnixAddr(), empty: true},\n+\t{snet: \"unixgram\", saddr: testUnixAddr(), cnet: \"unixgram\", caddr: testUnixAddr(), dial: true, empty: true},\n \n-\t{snet: \"unixgram\", saddr: \"@gotest6/net\", cnet: \"unixgram\", caddr: \"@gotest6/net.local\", linux: true},\n+\t{snet: \"unixgram\", saddr: \"@gotest6/net\", cnet: \"unixgram\", caddr: \"@gotest6/net.local\", linuxOnly: true},\n }\n \n func TestDatagramPacketConnServer(t *testing.T) {\n@@ -315,7 +315,7 @@ func TestDatagramPacketConnServer(t *testing.T) {\n \t}\n \n \tfor _, tt := range datagramPacketConnServerTests {\n-\t\tif skipServerTest(tt.snet, \"unixgram\", tt.saddr, tt.ipv6, tt.ipv4map, tt.linux) {\n+\t\tif skipServerTest(tt.snet, \"unixgram\", tt.saddr, tt.ipv6, tt.ipv4map, tt.linuxOnly) {\n \t\t\tcontinue\n \t\t}\n "}, {"sha": "87dea442c46e1f7ae841290074aaa64f4e721874", "filename": "libgo/go/net/smtp/smtp.go", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsmtp%2Fsmtp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsmtp%2Fsmtp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsmtp%2Fsmtp.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -264,6 +264,8 @@ func (c *Client) Data() (io.WriteCloser, error) {\n \treturn &dataCloser{c, c.Text.DotWriter()}, nil\n }\n \n+var testHookStartTLS func(*tls.Config) // nil, except for tests\n+\n // SendMail connects to the server at addr, switches to TLS if\n // possible, authenticates with the optional mechanism a if possible,\n // and then sends an email from address from, to addresses to, with\n@@ -278,7 +280,11 @@ func SendMail(addr string, a Auth, from string, to []string, msg []byte) error {\n \t\treturn err\n \t}\n \tif ok, _ := c.Extension(\"STARTTLS\"); ok {\n-\t\tif err = c.StartTLS(nil); err != nil {\n+\t\tconfig := &tls.Config{ServerName: c.serverName}\n+\t\tif testHookStartTLS != nil {\n+\t\t\ttestHookStartTLS(config)\n+\t\t}\n+\t\tif err = c.StartTLS(config); err != nil {\n \t\t\treturn err\n \t\t}\n \t}"}, {"sha": "3fba1ea5ae35ebf80f97f1354b7712ae09e7316f", "filename": "libgo/go/net/smtp/smtp_test.go", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsmtp%2Fsmtp_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsmtp%2Fsmtp_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsmtp%2Fsmtp_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -7,6 +7,8 @@ package smtp\n import (\n \t\"bufio\"\n \t\"bytes\"\n+\t\"crypto/tls\"\n+\t\"crypto/x509\"\n \t\"io\"\n \t\"net\"\n \t\"net/textproto\"\n@@ -548,3 +550,145 @@ AUTH PLAIN AHVzZXIAcGFzcw==\n *\n QUIT\n `\n+\n+func TestTLSClient(t *testing.T) {\n+\tln := newLocalListener(t)\n+\tdefer ln.Close()\n+\terrc := make(chan error)\n+\tgo func() {\n+\t\terrc <- sendMail(ln.Addr().String())\n+\t}()\n+\tconn, err := ln.Accept()\n+\tif err != nil {\n+\t\tt.Fatalf(\"failed to accept connection: %v\", err)\n+\t}\n+\tdefer conn.Close()\n+\tif err := serverHandle(conn, t); err != nil {\n+\t\tt.Fatalf(\"failed to handle connection: %v\", err)\n+\t}\n+\tif err := <-errc; err != nil {\n+\t\tt.Fatalf(\"client error: %v\", err)\n+\t}\n+}\n+\n+func newLocalListener(t *testing.T) net.Listener {\n+\tln, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\n+\tif err != nil {\n+\t\tln, err = net.Listen(\"tcp6\", \"[::1]:0\")\n+\t}\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\treturn ln\n+}\n+\n+type smtpSender struct {\n+\tw io.Writer\n+}\n+\n+func (s smtpSender) send(f string) {\n+\ts.w.Write([]byte(f + \"\\r\\n\"))\n+}\n+\n+// smtp server, finely tailored to deal with our own client only!\n+func serverHandle(c net.Conn, t *testing.T) error {\n+\tsend := smtpSender{c}.send\n+\tsend(\"220 127.0.0.1 ESMTP service ready\")\n+\ts := bufio.NewScanner(c)\n+\tfor s.Scan() {\n+\t\tswitch s.Text() {\n+\t\tcase \"EHLO localhost\":\n+\t\t\tsend(\"250-127.0.0.1 ESMTP offers a warm hug of welcome\")\n+\t\t\tsend(\"250-STARTTLS\")\n+\t\t\tsend(\"250 Ok\")\n+\t\tcase \"STARTTLS\":\n+\t\t\tsend(\"220 Go ahead\")\n+\t\t\tkeypair, err := tls.X509KeyPair(localhostCert, localhostKey)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\tconfig := &tls.Config{Certificates: []tls.Certificate{keypair}}\n+\t\t\tc = tls.Server(c, config)\n+\t\t\tdefer c.Close()\n+\t\t\treturn serverHandleTLS(c, t)\n+\t\tdefault:\n+\t\t\tt.Fatalf(\"unrecognized command: %q\", s.Text())\n+\t\t}\n+\t}\n+\treturn s.Err()\n+}\n+\n+func serverHandleTLS(c net.Conn, t *testing.T) error {\n+\tsend := smtpSender{c}.send\n+\ts := bufio.NewScanner(c)\n+\tfor s.Scan() {\n+\t\tswitch s.Text() {\n+\t\tcase \"EHLO localhost\":\n+\t\t\tsend(\"250 Ok\")\n+\t\tcase \"MAIL FROM:<joe1@example.com>\":\n+\t\t\tsend(\"250 Ok\")\n+\t\tcase \"RCPT TO:<joe2@example.com>\":\n+\t\t\tsend(\"250 Ok\")\n+\t\tcase \"DATA\":\n+\t\t\tsend(\"354 send the mail data, end with .\")\n+\t\t\tsend(\"250 Ok\")\n+\t\tcase \"Subject: test\":\n+\t\tcase \"\":\n+\t\tcase \"howdy!\":\n+\t\tcase \".\":\n+\t\tcase \"QUIT\":\n+\t\t\tsend(\"221 127.0.0.1 Service closing transmission channel\")\n+\t\t\treturn nil\n+\t\tdefault:\n+\t\t\tt.Fatalf(\"unrecognized command during TLS: %q\", s.Text())\n+\t\t}\n+\t}\n+\treturn s.Err()\n+}\n+\n+func init() {\n+\ttestRootCAs := x509.NewCertPool()\n+\ttestRootCAs.AppendCertsFromPEM(localhostCert)\n+\ttestHookStartTLS = func(config *tls.Config) {\n+\t\tconfig.RootCAs = testRootCAs\n+\t}\n+}\n+\n+func sendMail(hostPort string) error {\n+\thost, _, err := net.SplitHostPort(hostPort)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tauth := PlainAuth(\"\", \"\", \"\", host)\n+\tfrom := \"joe1@example.com\"\n+\tto := []string{\"joe2@example.com\"}\n+\treturn SendMail(hostPort, auth, from, to, []byte(\"Subject: test\\n\\nhowdy!\"))\n+}\n+\n+// (copied from net/http/httptest)\n+// localhostCert is a PEM-encoded TLS cert with SAN IPs\n+// \"127.0.0.1\" and \"[::1]\", expiring at the last second of 2049 (the end\n+// of ASN.1 time).\n+// generated from src/pkg/crypto/tls:\n+// go run generate_cert.go  --rsa-bits 512 --host 127.0.0.1,::1,example.com --ca --start-date \"Jan 1 00:00:00 1970\" --duration=1000000h\n+var localhostCert = []byte(`-----BEGIN CERTIFICATE-----\n+MIIBdzCCASOgAwIBAgIBADALBgkqhkiG9w0BAQUwEjEQMA4GA1UEChMHQWNtZSBD\n+bzAeFw03MDAxMDEwMDAwMDBaFw00OTEyMzEyMzU5NTlaMBIxEDAOBgNVBAoTB0Fj\n+bWUgQ28wWjALBgkqhkiG9w0BAQEDSwAwSAJBAN55NcYKZeInyTuhcCwFMhDHCmwa\n+IUSdtXdcbItRB/yfXGBhiex00IaLXQnSU+QZPRZWYqeTEbFSgihqi1PUDy8CAwEA\n+AaNoMGYwDgYDVR0PAQH/BAQDAgCkMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA8GA1Ud\n+EwEB/wQFMAMBAf8wLgYDVR0RBCcwJYILZXhhbXBsZS5jb22HBH8AAAGHEAAAAAAA\n+AAAAAAAAAAAAAAEwCwYJKoZIhvcNAQEFA0EAAoQn/ytgqpiLcZu9XKbCJsJcvkgk\n+Se6AbGXgSlq+ZCEVo0qIwSgeBqmsJxUu7NCSOwVJLYNEBO2DtIxoYVk+MA==\n+-----END CERTIFICATE-----`)\n+\n+// localhostKey is the private key for localhostCert.\n+var localhostKey = []byte(`-----BEGIN RSA PRIVATE KEY-----\n+MIIBPAIBAAJBAN55NcYKZeInyTuhcCwFMhDHCmwaIUSdtXdcbItRB/yfXGBhiex0\n+0IaLXQnSU+QZPRZWYqeTEbFSgihqi1PUDy8CAwEAAQJBAQdUx66rfh8sYsgfdcvV\n+NoafYpnEcB5s4m/vSVe6SU7dCK6eYec9f9wpT353ljhDUHq3EbmE4foNzJngh35d\n+AekCIQDhRQG5Li0Wj8TM4obOnnXUXf1jRv0UkzE9AHWLG5q3AwIhAPzSjpYUDjVW\n+MCUXgckTpKCuGwbJk7424Nb8bLzf3kllAiA5mUBgjfr/WtFSJdWcPQ4Zt9KTMNKD\n+EUO0ukpTwEIl6wIhAMbGqZK3zAAFdq8DD2jPx+UJXnh0rnOkZBzDtJ6/iN69AiEA\n+1Aq8MJgTaYsDQWyU/hDq5YkDJc9e9DSCvUIzqxQWMQE=\n+-----END RSA PRIVATE KEY-----`)"}, {"sha": "48fb7852757c23687f3445f96ce46248bb7a1eb7", "filename": "libgo/go/net/sock_bsd.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsock_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsock_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsock_bsd.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd netbsd openbsd\n+// +build darwin dragonfly freebsd nacl netbsd openbsd\n \n package net\n "}, {"sha": "dec81855b689bf6678640e482d55d2cec2de58ac", "filename": "libgo/go/net/sock_cloexec.go", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsock_cloexec.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsock_cloexec.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsock_cloexec.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -5,26 +5,28 @@\n // This file implements sysSocket and accept for platforms that\n // provide a fast path for setting SetNonblock and CloseOnExec.\n \n-// +build linux\n+// +build freebsd linux\n \n package net\n \n import \"syscall\"\n \n // Wrapper around the socket system call that marks the returned file\n // descriptor as nonblocking and close-on-exec.\n-func sysSocket(f, t, p int) (int, error) {\n-\ts, err := syscall.Socket(f, t|syscall.SOCK_NONBLOCK|syscall.SOCK_CLOEXEC, p)\n-\t// The SOCK_NONBLOCK and SOCK_CLOEXEC flags were introduced in\n-\t// Linux 2.6.27.  If we get an EINVAL error, fall back to\n-\t// using socket without them.\n-\tif err == nil || err != syscall.EINVAL {\n+func sysSocket(family, sotype, proto int) (int, error) {\n+\ts, err := syscall.Socket(family, sotype|syscall.SOCK_NONBLOCK|syscall.SOCK_CLOEXEC, proto)\n+\t// On Linux the SOCK_NONBLOCK and SOCK_CLOEXEC flags were\n+\t// introduced in 2.6.27 kernel and on FreeBSD both flags were\n+\t// introduced in 10 kernel. If we get an EINVAL error on Linux\n+\t// or EPROTONOSUPPORT error on FreeBSD, fall back to using\n+\t// socket without them.\n+\tif err == nil || (err != syscall.EPROTONOSUPPORT && err != syscall.EINVAL) {\n \t\treturn s, err\n \t}\n \n \t// See ../syscall/exec_unix.go for description of ForkLock.\n \tsyscall.ForkLock.RLock()\n-\ts, err = syscall.Socket(f, t, p)\n+\ts, err = syscall.Socket(family, sotype, proto)\n \tif err == nil {\n \t\tsyscall.CloseOnExec(s)\n \t}\n@@ -41,29 +43,36 @@ func sysSocket(f, t, p int) (int, error) {\n \n // Wrapper around the accept system call that marks the returned file\n // descriptor as nonblocking and close-on-exec.\n-func accept(fd int) (int, syscall.Sockaddr, error) {\n-\tnfd, sa, err := syscall.Accept4(fd, syscall.SOCK_NONBLOCK|syscall.SOCK_CLOEXEC)\n-\t// The accept4 system call was introduced in Linux 2.6.28.  If\n-\t// we get an ENOSYS or EINVAL error, fall back to using accept.\n-\tif err == nil || (err != syscall.ENOSYS && err != syscall.EINVAL) {\n-\t\treturn nfd, sa, err\n+func accept(s int) (int, syscall.Sockaddr, error) {\n+\tns, sa, err := syscall.Accept4(s, syscall.SOCK_NONBLOCK|syscall.SOCK_CLOEXEC)\n+\t// On Linux the accept4 system call was introduced in 2.6.28\n+\t// kernel and on FreeBSD it was introduced in 10 kernel. If we\n+\t// get an ENOSYS error on both Linux and FreeBSD, or EINVAL\n+\t// error on Linux, fall back to using accept.\n+\tswitch err {\n+\tdefault: // nil and errors other than the ones listed\n+\t\treturn ns, sa, err\n+\tcase syscall.ENOSYS: // syscall missing\n+\tcase syscall.EINVAL: // some Linux use this instead of ENOSYS\n+\tcase syscall.EACCES: // some Linux use this instead of ENOSYS\n+\tcase syscall.EFAULT: // some Linux use this instead of ENOSYS\n \t}\n \n \t// See ../syscall/exec_unix.go for description of ForkLock.\n \t// It is probably okay to hold the lock across syscall.Accept\n \t// because we have put fd.sysfd into non-blocking mode.\n \t// However, a call to the File method will put it back into\n \t// blocking mode. We can't take that risk, so no use of ForkLock here.\n-\tnfd, sa, err = syscall.Accept(fd)\n+\tns, sa, err = syscall.Accept(s)\n \tif err == nil {\n-\t\tsyscall.CloseOnExec(nfd)\n+\t\tsyscall.CloseOnExec(ns)\n \t}\n \tif err != nil {\n \t\treturn -1, nil, err\n \t}\n-\tif err = syscall.SetNonblock(nfd, true); err != nil {\n-\t\tsyscall.Close(nfd)\n+\tif err = syscall.SetNonblock(ns, true); err != nil {\n+\t\tsyscall.Close(ns)\n \t\treturn -1, nil, err\n \t}\n-\treturn nfd, sa, nil\n+\treturn ns, sa, nil\n }"}, {"sha": "a6ef874c9fda0b3304dd503f2c1b836d2b5e200f", "filename": "libgo/go/net/sock_posix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsock_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsock_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsock_posix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n package net\n "}, {"sha": "90fe9de894cd0522937d65a4dd1cc561bcce6c2d", "filename": "libgo/go/net/sock_solaris.go", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsock_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsock_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsock_solaris.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -1,18 +1,13 @@\n-// Copyright 2012 The Go Authors.  All rights reserved.\n+// Copyright 2009 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build solaris\n-\n-// Sockets for Solaris\n-\n package net\n \n-import (\n-\t\"syscall\"\n-)\n+import \"syscall\"\n \n func maxListenerBacklog() int {\n-\t// The kernel does not track the limit.\n+\t// TODO: Implement this\n+\t// NOTE: Never return a number bigger than 1<<16 - 1. See issue 5030.\n \treturn syscall.SOMAXCONN\n }"}, {"sha": "2fa3b6f1d36f7d21e318acea8302d5fc9f994f2a", "filename": "libgo/go/net/sockopt_bsd.go", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockopt_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockopt_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsockopt_bsd.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,16 +2,29 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd netbsd openbsd\n+// +build darwin dragonfly freebsd nacl netbsd openbsd\n \n package net\n \n import (\n \t\"os\"\n+\t\"runtime\"\n \t\"syscall\"\n )\n \n func setDefaultSockopts(s, family, sotype int, ipv6only bool) error {\n+\tif runtime.GOOS == \"dragonfly\" && sotype != syscall.SOCK_RAW {\n+\t\t// On DragonFly BSD, we adjust the ephemeral port\n+\t\t// range because unlike other BSD systems its default\n+\t\t// port range doesn't conform to IANA recommendation\n+\t\t// as described in RFC 6355 and is pretty narrow.\n+\t\tswitch family {\n+\t\tcase syscall.AF_INET:\n+\t\t\tsyscall.SetsockoptInt(s, syscall.IPPROTO_IP, syscall.IP_PORTRANGE, syscall.IP_PORTRANGE_HIGH)\n+\t\tcase syscall.AF_INET6:\n+\t\t\tsyscall.SetsockoptInt(s, syscall.IPPROTO_IPV6, syscall.IPV6_PORTRANGE, syscall.IPV6_PORTRANGE_HIGH)\n+\t\t}\n+\t}\n \tif family == syscall.AF_INET6 && sotype != syscall.SOCK_RAW {\n \t\t// Allow both IP versions even if the OS default\n \t\t// is otherwise.  Note that some operating systems"}, {"sha": "921918c37f543b42dbb17569d82c3e2b2fcc45b5", "filename": "libgo/go/net/sockopt_posix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockopt_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockopt_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsockopt_posix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n package net\n "}, {"sha": "54c20b1409b1447aedf4135a25930fb01f58bd0a", "filename": "libgo/go/net/sockopt_solaris.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockopt_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockopt_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsockopt_solaris.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package net\n+\n+import (\n+\t\"os\"\n+\t\"syscall\"\n+)\n+\n+func setDefaultSockopts(s, family, sotype int, ipv6only bool) error {\n+\tif family == syscall.AF_INET6 && sotype != syscall.SOCK_RAW {\n+\t\t// Allow both IP versions even if the OS default\n+\t\t// is otherwise.  Note that some operating systems\n+\t\t// never admit this option.\n+\t\tsyscall.SetsockoptInt(s, syscall.IPPROTO_IPV6, syscall.IPV6_V6ONLY, boolint(ipv6only))\n+\t}\n+\t// Allow broadcast.\n+\treturn os.NewSyscallError(\"setsockopt\", syscall.SetsockoptInt(s, syscall.SOL_SOCKET, syscall.SO_BROADCAST, 1))\n+}\n+\n+func setDefaultListenerSockopts(s int) error {\n+\t// Allow reuse of recently-used addresses.\n+\treturn os.NewSyscallError(\"setsockopt\", syscall.SetsockoptInt(s, syscall.SOL_SOCKET, syscall.SO_REUSEADDR, 1))\n+}\n+\n+func setDefaultMulticastSockopts(s int) error {\n+\t// Allow multicast UDP and raw IP datagram sockets to listen\n+\t// concurrently across multiple listeners.\n+\treturn os.NewSyscallError(\"setsockopt\", syscall.SetsockoptInt(s, syscall.SOL_SOCKET, syscall.SO_REUSEADDR, 1))\n+}"}, {"sha": "87132f0f4610cc3ee9700d2896b48fdf40723c4c", "filename": "libgo/go/net/sockoptip_bsd.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockoptip_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockoptip_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsockoptip_bsd.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd netbsd openbsd\n+// +build darwin dragonfly freebsd nacl netbsd openbsd\n \n package net\n "}, {"sha": "b5c80e4490996609c002c1e6de86325d007fa5af", "filename": "libgo/go/net/sockoptip_posix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockoptip_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockoptip_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsockoptip_posix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd windows\n \n package net\n "}, {"sha": "dcd3a22b57deb60e34abac8c73ffe2df6d58c1bb", "filename": "libgo/go/net/sockoptip_stub.go", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockoptip_stub.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsockoptip_stub.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsockoptip_stub.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build solaris\n+\n+package net\n+\n+import \"syscall\"\n+\n+func setIPv4MulticastInterface(fd *netFD, ifi *Interface) error {\n+\t// See golang.org/issue/7399.\n+\treturn syscall.EINVAL\n+}\n+\n+func setIPv4MulticastLoopback(fd *netFD, v bool) error {\n+\t// See golang.org/issue/7399.\n+\treturn syscall.EINVAL\n+}\n+\n+func joinIPv4Group(fd *netFD, ifi *Interface, ip IP) error {\n+\t// See golang.org/issue/7399.\n+\treturn syscall.EINVAL\n+}\n+\n+func setIPv6MulticastInterface(fd *netFD, ifi *Interface) error {\n+\t// See golang.org/issue/7399.\n+\treturn syscall.EINVAL\n+}\n+\n+func setIPv6MulticastLoopback(fd *netFD, v bool) error {\n+\t// See golang.org/issue/7399.\n+\treturn syscall.EINVAL\n+}\n+\n+func joinIPv6Group(fd *netFD, ifi *Interface, ip IP) error {\n+\t// See golang.org/issue/7399.\n+\treturn syscall.EINVAL\n+}"}, {"sha": "898fb7c0c2c5545bfca54a423253a00a56a2c6b2", "filename": "libgo/go/net/sys_cloexec.go", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsys_cloexec.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fsys_cloexec.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsys_cloexec.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -5,18 +5,18 @@\n // This file implements sysSocket and accept for platforms that do not\n // provide a fast path for setting SetNonblock and CloseOnExec.\n \n-// +build darwin dragonfly freebsd netbsd openbsd\n+// +build darwin dragonfly nacl netbsd openbsd solaris\n \n package net\n \n import \"syscall\"\n \n // Wrapper around the socket system call that marks the returned file\n // descriptor as nonblocking and close-on-exec.\n-func sysSocket(f, t, p int) (int, error) {\n+func sysSocket(family, sotype, proto int) (int, error) {\n \t// See ../syscall/exec_unix.go for description of ForkLock.\n \tsyscall.ForkLock.RLock()\n-\ts, err := syscall.Socket(f, t, p)\n+\ts, err := syscall.Socket(family, sotype, proto)\n \tif err == nil {\n \t\tsyscall.CloseOnExec(s)\n \t}\n@@ -33,22 +33,22 @@ func sysSocket(f, t, p int) (int, error) {\n \n // Wrapper around the accept system call that marks the returned file\n // descriptor as nonblocking and close-on-exec.\n-func accept(fd int) (int, syscall.Sockaddr, error) {\n+func accept(s int) (int, syscall.Sockaddr, error) {\n \t// See ../syscall/exec_unix.go for description of ForkLock.\n \t// It is probably okay to hold the lock across syscall.Accept\n \t// because we have put fd.sysfd into non-blocking mode.\n \t// However, a call to the File method will put it back into\n \t// blocking mode. We can't take that risk, so no use of ForkLock here.\n-\tnfd, sa, err := syscall.Accept(fd)\n+\tns, sa, err := syscall.Accept(s)\n \tif err == nil {\n-\t\tsyscall.CloseOnExec(nfd)\n+\t\tsyscall.CloseOnExec(ns)\n \t}\n \tif err != nil {\n \t\treturn -1, nil, err\n \t}\n-\tif err = syscall.SetNonblock(nfd, true); err != nil {\n-\t\tsyscall.Close(nfd)\n+\tif err = syscall.SetNonblock(ns, true); err != nil {\n+\t\tsyscall.Close(ns)\n \t\treturn -1, nil, err\n \t}\n-\treturn nfd, sa, nil\n+\treturn ns, sa, nil\n }"}, {"sha": "c04198ea000b6f0b81196071f3f225b1d4dddb7c", "filename": "libgo/go/net/tcp_test.go", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcp_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcp_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftcp_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -97,16 +97,21 @@ func benchmarkTCP(b *testing.B, persistent, timeout bool, laddr string) {\n \t\tb.Fatalf(\"Listen failed: %v\", err)\n \t}\n \tdefer ln.Close()\n+\tserverSem := make(chan bool, numConcurrent)\n \t// Acceptor.\n \tgo func() {\n \t\tfor {\n \t\t\tc, err := ln.Accept()\n \t\t\tif err != nil {\n \t\t\t\tbreak\n \t\t\t}\n+\t\t\tserverSem <- true\n \t\t\t// Server connection.\n \t\t\tgo func(c Conn) {\n-\t\t\t\tdefer c.Close()\n+\t\t\t\tdefer func() {\n+\t\t\t\t\tc.Close()\n+\t\t\t\t\t<-serverSem\n+\t\t\t\t}()\n \t\t\t\tif timeout {\n \t\t\t\t\tc.SetDeadline(time.Now().Add(time.Hour)) // Not intended to fire.\n \t\t\t\t}\n@@ -119,13 +124,13 @@ func benchmarkTCP(b *testing.B, persistent, timeout bool, laddr string) {\n \t\t\t}(c)\n \t\t}\n \t}()\n-\tsem := make(chan bool, numConcurrent)\n+\tclientSem := make(chan bool, numConcurrent)\n \tfor i := 0; i < conns; i++ {\n-\t\tsem <- true\n+\t\tclientSem <- true\n \t\t// Client connection.\n \t\tgo func() {\n \t\t\tdefer func() {\n-\t\t\t\t<-sem\n+\t\t\t\t<-clientSem\n \t\t\t}()\n \t\t\tc, err := Dial(\"tcp\", ln.Addr().String())\n \t\t\tif err != nil {\n@@ -144,8 +149,9 @@ func benchmarkTCP(b *testing.B, persistent, timeout bool, laddr string) {\n \t\t\t}\n \t\t}()\n \t}\n-\tfor i := 0; i < cap(sem); i++ {\n-\t\tsem <- true\n+\tfor i := 0; i < numConcurrent; i++ {\n+\t\tclientSem <- true\n+\t\tserverSem <- true\n \t}\n }\n \n@@ -185,7 +191,8 @@ func benchmarkTCPConcurrentReadWrite(b *testing.B, laddr string) {\n \t\tfor p := 0; p < P; p++ {\n \t\t\ts, err := ln.Accept()\n \t\t\tif err != nil {\n-\t\t\t\tb.Fatalf(\"Accept failed: %v\", err)\n+\t\t\t\tb.Errorf(\"Accept failed: %v\", err)\n+\t\t\t\treturn\n \t\t\t}\n \t\t\tservers[p] = s\n \t\t}\n@@ -217,7 +224,8 @@ func benchmarkTCPConcurrentReadWrite(b *testing.B, laddr string) {\n \t\t\t\tbuf[0] = v\n \t\t\t\t_, err := c.Write(buf[:])\n \t\t\t\tif err != nil {\n-\t\t\t\t\tb.Fatalf(\"Write failed: %v\", err)\n+\t\t\t\t\tb.Errorf(\"Write failed: %v\", err)\n+\t\t\t\t\treturn\n \t\t\t\t}\n \t\t\t}\n \t\t}(clients[p])\n@@ -232,7 +240,8 @@ func benchmarkTCPConcurrentReadWrite(b *testing.B, laddr string) {\n \t\t\tfor i := 0; i < N; i++ {\n \t\t\t\t_, err := s.Read(buf[:])\n \t\t\t\tif err != nil {\n-\t\t\t\t\tb.Fatalf(\"Read failed: %v\", err)\n+\t\t\t\t\tb.Errorf(\"Read failed: %v\", err)\n+\t\t\t\t\treturn\n \t\t\t\t}\n \t\t\t\tpipe <- buf[0]\n \t\t\t}\n@@ -250,7 +259,8 @@ func benchmarkTCPConcurrentReadWrite(b *testing.B, laddr string) {\n \t\t\t\tbuf[0] = v\n \t\t\t\t_, err := s.Write(buf[:])\n \t\t\t\tif err != nil {\n-\t\t\t\t\tb.Fatalf(\"Write failed: %v\", err)\n+\t\t\t\t\tb.Errorf(\"Write failed: %v\", err)\n+\t\t\t\t\treturn\n \t\t\t\t}\n \t\t\t}\n \t\t\ts.Close()\n@@ -263,7 +273,8 @@ func benchmarkTCPConcurrentReadWrite(b *testing.B, laddr string) {\n \t\t\tfor i := 0; i < N; i++ {\n \t\t\t\t_, err := c.Read(buf[:])\n \t\t\t\tif err != nil {\n-\t\t\t\t\tb.Fatalf(\"Read failed: %v\", err)\n+\t\t\t\t\tb.Errorf(\"Read failed: %v\", err)\n+\t\t\t\t\treturn\n \t\t\t\t}\n \t\t\t}\n \t\t\tc.Close()\n@@ -388,7 +399,7 @@ func TestIPv6LinkLocalUnicastTCP(t *testing.T) {\n \t\t{\"tcp6\", \"[\" + laddr + \"%\" + ifi.Name + \"]:0\", false},\n \t}\n \tswitch runtime.GOOS {\n-\tcase \"darwin\", \"freebsd\", \"opensbd\", \"netbsd\":\n+\tcase \"darwin\", \"freebsd\", \"openbsd\", \"netbsd\":\n \t\ttests = append(tests, []test{\n \t\t\t{\"tcp\", \"[localhost%\" + ifi.Name + \"]:0\", true},\n \t\t\t{\"tcp6\", \"[localhost%\" + ifi.Name + \"]:0\", true},\n@@ -460,15 +471,25 @@ func TestTCPConcurrentAccept(t *testing.T) {\n \t\t\twg.Done()\n \t\t}()\n \t}\n-\tfor i := 0; i < 10*N; i++ {\n-\t\tc, err := Dial(\"tcp\", ln.Addr().String())\n+\tattempts := 10 * N\n+\tfails := 0\n+\td := &Dialer{Timeout: 200 * time.Millisecond}\n+\tfor i := 0; i < attempts; i++ {\n+\t\tc, err := d.Dial(\"tcp\", ln.Addr().String())\n \t\tif err != nil {\n-\t\t\tt.Fatalf(\"Dial failed: %v\", err)\n+\t\t\tfails++\n+\t\t} else {\n+\t\t\tc.Close()\n \t\t}\n-\t\tc.Close()\n \t}\n \tln.Close()\n \twg.Wait()\n+\tif fails > attempts/9 { // see issues 7400 and 7541\n+\t\tt.Fatalf(\"too many Dial failed: %v\", fails)\n+\t}\n+\tif fails > 0 {\n+\t\tt.Logf(\"# of failed Dials: %v\", fails)\n+\t}\n }\n \n func TestTCPReadWriteMallocs(t *testing.T) {"}, {"sha": "52019d7b4eb28e0522dac1f686742eb553ba70a6", "filename": "libgo/go/net/tcpsock_plan9.go", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsock_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsock_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftcpsock_plan9.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -32,7 +32,7 @@ func (c *TCPConn) CloseRead() error {\n \tif !c.ok() {\n \t\treturn syscall.EINVAL\n \t}\n-\treturn c.fd.CloseRead()\n+\treturn c.fd.closeRead()\n }\n \n // CloseWrite shuts down the writing side of the TCP connection.\n@@ -41,20 +41,21 @@ func (c *TCPConn) CloseWrite() error {\n \tif !c.ok() {\n \t\treturn syscall.EINVAL\n \t}\n-\treturn c.fd.CloseWrite()\n+\treturn c.fd.closeWrite()\n }\n \n-// SetLinger sets the behavior of Close() on a connection which still\n+// SetLinger sets the behavior of Close on a connection which still\n // has data waiting to be sent or to be acknowledged.\n //\n-// If sec < 0 (the default), Close returns immediately and the\n-// operating system finishes sending the data in the background.\n+// If sec < 0 (the default), the operating system finishes sending the\n+// data in the background.\n //\n-// If sec == 0, Close returns immediately and the operating system\n-// discards any unsent or unacknowledged data.\n+// If sec == 0, the operating system discards any unsent or\n+// unacknowledged data.\n //\n-// If sec > 0, Close blocks for at most sec seconds waiting for data\n-// to be sent and acknowledged.\n+// If sec > 0, the data is sent in the background as with sec < 0. On\n+// some operating systems after sec seconds have elapsed any remaining\n+// unsent data may be discarded.\n func (c *TCPConn) SetLinger(sec int) error {\n \treturn syscall.EPLAN9\n }"}, {"sha": "b79b115ca5b8d4e71b5ccc4d4bae544d358d7cd2", "filename": "libgo/go/net/tcpsock_posix.go", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsock_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsock_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftcpsock_posix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n package net\n \n@@ -78,7 +78,7 @@ func (c *TCPConn) CloseRead() error {\n \tif !c.ok() {\n \t\treturn syscall.EINVAL\n \t}\n-\treturn c.fd.CloseRead()\n+\treturn c.fd.closeRead()\n }\n \n // CloseWrite shuts down the writing side of the TCP connection.\n@@ -87,20 +87,21 @@ func (c *TCPConn) CloseWrite() error {\n \tif !c.ok() {\n \t\treturn syscall.EINVAL\n \t}\n-\treturn c.fd.CloseWrite()\n+\treturn c.fd.closeWrite()\n }\n \n-// SetLinger sets the behavior of Close() on a connection which still\n+// SetLinger sets the behavior of Close on a connection which still\n // has data waiting to be sent or to be acknowledged.\n //\n-// If sec < 0 (the default), Close returns immediately and the\n-// operating system finishes sending the data in the background.\n+// If sec < 0 (the default), the operating system finishes sending the\n+// data in the background.\n //\n-// If sec == 0, Close returns immediately and the operating system\n-// discards any unsent or unacknowledged data.\n+// If sec == 0, the operating system discards any unsent or\n+// unacknowledged data.\n //\n-// If sec > 0, Close blocks for at most sec seconds waiting for data\n-// to be sent and acknowledged.\n+// If sec > 0, the data is sent in the background as with sec < 0. On\n+// some operating systems after sec seconds have elapsed any remaining\n+// unsent data may be discarded.\n func (c *TCPConn) SetLinger(sec int) error {\n \tif !c.ok() {\n \t\treturn syscall.EINVAL"}, {"sha": "d10a77773d83eed8988bb779786e9a1ea618d8cb", "filename": "libgo/go/net/tcpsockopt_dragonfly.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsockopt_dragonfly.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsockopt_dragonfly.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftcpsockopt_dragonfly.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2009 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package net\n+\n+import (\n+\t\"os\"\n+\t\"syscall\"\n+\t\"time\"\n+)\n+\n+// Set keep alive period.\n+func setKeepAlivePeriod(fd *netFD, d time.Duration) error {\n+\tif err := fd.incref(); err != nil {\n+\t\treturn err\n+\t}\n+\tdefer fd.decref()\n+\n+\t// The kernel expects milliseconds so round to next highest millisecond.\n+\td += (time.Millisecond - time.Nanosecond)\n+\tmsecs := int(time.Duration(d.Nanoseconds()) / time.Millisecond)\n+\n+\terr := os.NewSyscallError(\"setsockopt\", syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_TCP, syscall.TCP_KEEPINTVL, msecs))\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn os.NewSyscallError(\"setsockopt\", syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_TCP, syscall.TCP_KEEPIDLE, msecs))\n+}"}, {"sha": "6484bad4b45d6f3a4856095cd8a0f42e8cc1a2e4", "filename": "libgo/go/net/tcpsockopt_posix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsockopt_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsockopt_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftcpsockopt_posix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n package net\n "}, {"sha": "eaab6b6787b524c62b336a3c43c124e2eeeb3a07", "filename": "libgo/go/net/tcpsockopt_solaris.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsockopt_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsockopt_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftcpsockopt_solaris.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// TCP socket options for solaris\n+\n+package net\n+\n+import (\n+\t\"os\"\n+\t\"syscall\"\n+\t\"time\"\n+)\n+\n+// Set keep alive period.\n+func setKeepAlivePeriod(fd *netFD, d time.Duration) error {\n+\tif err := fd.incref(); err != nil {\n+\t\treturn err\n+\t}\n+\tdefer fd.decref()\n+\n+\t// The kernel expects seconds so round to next highest second.\n+\td += (time.Second - time.Nanosecond)\n+\tsecs := int(d.Seconds())\n+\n+\treturn os.NewSyscallError(\"setsockopt\", syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_TCP, syscall.SO_KEEPALIVE, secs))\n+}"}, {"sha": "2693a541d209fa14af05ee4d4389b7299d7509de", "filename": "libgo/go/net/tcpsockopt_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsockopt_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftcpsockopt_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftcpsockopt_unix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build dragonfly freebsd linux netbsd\n+// +build freebsd linux nacl netbsd\n \n package net\n "}, {"sha": "eea9207f2521a60fdf897931365bfc1e791df1db", "filename": "libgo/go/net/textproto/reader.go", "status": "modified", "additions": 53, "deletions": 59, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftextproto%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftextproto%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftextproto%2Freader.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -562,19 +562,12 @@ const toLower = 'a' - 'A'\n // allowed to mutate the provided byte slice before returning the\n // string.\n func canonicalMIMEHeaderKey(a []byte) string {\n-\t// Look for it in commonHeaders , so that we can avoid an\n-\t// allocation by sharing the strings among all users\n-\t// of textproto. If we don't find it, a has been canonicalized\n-\t// so just return string(a).\n \tupper := true\n-\tlo := 0\n-\thi := len(commonHeaders)\n-\tfor i := 0; i < len(a); i++ {\n+\tfor i, c := range a {\n \t\t// Canonicalize: first letter upper case\n \t\t// and upper case after each dash.\n \t\t// (Host, User-Agent, If-Modified-Since).\n \t\t// MIME headers are ASCII only, so no Unicode issues.\n-\t\tc := a[i]\n \t\tif c == ' ' {\n \t\t\tc = '-'\n \t\t} else if upper && 'a' <= c && c <= 'z' {\n@@ -584,60 +577,61 @@ func canonicalMIMEHeaderKey(a []byte) string {\n \t\t}\n \t\ta[i] = c\n \t\tupper = c == '-' // for next time\n-\n-\t\tif lo < hi {\n-\t\t\tfor lo < hi && (len(commonHeaders[lo]) <= i || commonHeaders[lo][i] < c) {\n-\t\t\t\tlo++\n-\t\t\t}\n-\t\t\tfor hi > lo && commonHeaders[hi-1][i] > c {\n-\t\t\t\thi--\n-\t\t\t}\n-\t\t}\n \t}\n-\tif lo < hi && len(commonHeaders[lo]) == len(a) {\n-\t\treturn commonHeaders[lo]\n+\t// The compiler recognizes m[string(byteSlice)] as a special\n+\t// case, so a copy of a's bytes into a new string does not\n+\t// happen in this map lookup:\n+\tif v := commonHeader[string(a)]; v != \"\" {\n+\t\treturn v\n \t}\n \treturn string(a)\n }\n \n-var commonHeaders = []string{\n-\t\"Accept\",\n-\t\"Accept-Charset\",\n-\t\"Accept-Encoding\",\n-\t\"Accept-Language\",\n-\t\"Accept-Ranges\",\n-\t\"Cache-Control\",\n-\t\"Cc\",\n-\t\"Connection\",\n-\t\"Content-Id\",\n-\t\"Content-Language\",\n-\t\"Content-Length\",\n-\t\"Content-Transfer-Encoding\",\n-\t\"Content-Type\",\n-\t\"Cookie\",\n-\t\"Date\",\n-\t\"Dkim-Signature\",\n-\t\"Etag\",\n-\t\"Expires\",\n-\t\"From\",\n-\t\"Host\",\n-\t\"If-Modified-Since\",\n-\t\"If-None-Match\",\n-\t\"In-Reply-To\",\n-\t\"Last-Modified\",\n-\t\"Location\",\n-\t\"Message-Id\",\n-\t\"Mime-Version\",\n-\t\"Pragma\",\n-\t\"Received\",\n-\t\"Return-Path\",\n-\t\"Server\",\n-\t\"Set-Cookie\",\n-\t\"Subject\",\n-\t\"To\",\n-\t\"User-Agent\",\n-\t\"Via\",\n-\t\"X-Forwarded-For\",\n-\t\"X-Imforwards\",\n-\t\"X-Powered-By\",\n+// commonHeader interns common header strings.\n+var commonHeader = make(map[string]string)\n+\n+func init() {\n+\tfor _, v := range []string{\n+\t\t\"Accept\",\n+\t\t\"Accept-Charset\",\n+\t\t\"Accept-Encoding\",\n+\t\t\"Accept-Language\",\n+\t\t\"Accept-Ranges\",\n+\t\t\"Cache-Control\",\n+\t\t\"Cc\",\n+\t\t\"Connection\",\n+\t\t\"Content-Id\",\n+\t\t\"Content-Language\",\n+\t\t\"Content-Length\",\n+\t\t\"Content-Transfer-Encoding\",\n+\t\t\"Content-Type\",\n+\t\t\"Cookie\",\n+\t\t\"Date\",\n+\t\t\"Dkim-Signature\",\n+\t\t\"Etag\",\n+\t\t\"Expires\",\n+\t\t\"From\",\n+\t\t\"Host\",\n+\t\t\"If-Modified-Since\",\n+\t\t\"If-None-Match\",\n+\t\t\"In-Reply-To\",\n+\t\t\"Last-Modified\",\n+\t\t\"Location\",\n+\t\t\"Message-Id\",\n+\t\t\"Mime-Version\",\n+\t\t\"Pragma\",\n+\t\t\"Received\",\n+\t\t\"Return-Path\",\n+\t\t\"Server\",\n+\t\t\"Set-Cookie\",\n+\t\t\"Subject\",\n+\t\t\"To\",\n+\t\t\"User-Agent\",\n+\t\t\"Via\",\n+\t\t\"X-Forwarded-For\",\n+\t\t\"X-Imforwards\",\n+\t\t\"X-Powered-By\",\n+\t} {\n+\t\tcommonHeader[v] = v\n+\t}\n }"}, {"sha": "c89566635e12942112e5374daaa93f53aacb6e3c", "filename": "libgo/go/net/textproto/reader_test.go", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftextproto%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftextproto%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftextproto%2Freader_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -247,24 +247,21 @@ func TestRFC959Lines(t *testing.T) {\n }\n \n func TestCommonHeaders(t *testing.T) {\n-\t// need to disable the commonHeaders-based optimization\n-\t// during this check, or we'd not be testing anything\n-\toldch := commonHeaders\n-\tcommonHeaders = []string{}\n-\tdefer func() { commonHeaders = oldch }()\n-\n-\tlast := \"\"\n-\tfor _, h := range oldch {\n-\t\tif last > h {\n-\t\t\tt.Errorf(\"%v is out of order\", h)\n-\t\t}\n-\t\tif last == h {\n-\t\t\tt.Errorf(\"%v is duplicated\", h)\n+\tfor h := range commonHeader {\n+\t\tif h != CanonicalMIMEHeaderKey(h) {\n+\t\t\tt.Errorf(\"Non-canonical header %q in commonHeader\", h)\n \t\t}\n-\t\tif canon := CanonicalMIMEHeaderKey(h); h != canon {\n-\t\t\tt.Errorf(\"%v is not canonical\", h)\n+\t}\n+\tt.Skip(\"gccgo escape analysis\")\n+\tb := []byte(\"content-Length\")\n+\twant := \"Content-Length\"\n+\tn := testing.AllocsPerRun(200, func() {\n+\t\tif x := canonicalMIMEHeaderKey(b); x != want {\n+\t\t\tt.Fatalf(\"canonicalMIMEHeaderKey(%q) = %q; want %q\", b, x, want)\n \t\t}\n-\t\tlast = h\n+\t})\n+\tif n > 0 {\n+\t\tt.Errorf(\"canonicalMIMEHeaderKey allocs = %v; want 0\", n)\n \t}\n }\n "}, {"sha": "9ef0c4d15cc1f77fab13200f7dd241ae0ed20de3", "filename": "libgo/go/net/timeout_test.go", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftimeout_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Ftimeout_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftimeout_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -120,6 +120,9 @@ func TestReadTimeout(t *testing.T) {\n \t\t\tt.Fatalf(\"Read: expected err %v, got %v\", errClosing, err)\n \t\t}\n \tdefault:\n+\t\tif err == io.EOF && runtime.GOOS == \"nacl\" { // close enough; golang.org/issue/8044\n+\t\t\tbreak\n+\t\t}\n \t\tif err != errClosing {\n \t\t\tt.Fatalf(\"Read: expected err %v, got %v\", errClosing, err)\n \t\t}\n@@ -348,7 +351,8 @@ func TestReadWriteDeadline(t *testing.T) {\n \tgo func() {\n \t\tc, err := ln.Accept()\n \t\tif err != nil {\n-\t\t\tt.Fatalf(\"Accept: %v\", err)\n+\t\t\tt.Errorf(\"Accept: %v\", err)\n+\t\t\treturn\n \t\t}\n \t\tdefer c.Close()\n \t\tlnquit <- true\n@@ -493,10 +497,7 @@ func testVariousDeadlines(t *testing.T, maxProcs int) {\n \t\t\t\tclientc <- copyRes{n, err, d}\n \t\t\t}()\n \n-\t\t\ttooLong := 2 * time.Second\n-\t\t\tif runtime.GOOS == \"windows\" {\n-\t\t\t\ttooLong = 5 * time.Second\n-\t\t\t}\n+\t\t\ttooLong := 5 * time.Second\n \t\t\tselect {\n \t\t\tcase res := <-clientc:\n \t\t\t\tif isTimeout(res.err) {\n@@ -536,7 +537,8 @@ func TestReadDeadlineDataAvailable(t *testing.T) {\n \tgo func() {\n \t\tc, err := ln.Accept()\n \t\tif err != nil {\n-\t\t\tt.Fatalf(\"Accept: %v\", err)\n+\t\t\tt.Errorf(\"Accept: %v\", err)\n+\t\t\treturn\n \t\t}\n \t\tdefer c.Close()\n \t\tn, err := c.Write([]byte(msg))\n@@ -574,7 +576,8 @@ func TestWriteDeadlineBufferAvailable(t *testing.T) {\n \tgo func() {\n \t\tc, err := ln.Accept()\n \t\tif err != nil {\n-\t\t\tt.Fatalf(\"Accept: %v\", err)\n+\t\t\tt.Errorf(\"Accept: %v\", err)\n+\t\t\treturn\n \t\t}\n \t\tdefer c.Close()\n \t\tc.SetWriteDeadline(time.Now().Add(-5 * time.Second)) // in the past\n@@ -610,7 +613,8 @@ func TestAcceptDeadlineConnectionAvailable(t *testing.T) {\n \tgo func() {\n \t\tc, err := Dial(\"tcp\", ln.Addr().String())\n \t\tif err != nil {\n-\t\t\tt.Fatalf(\"Dial: %v\", err)\n+\t\t\tt.Errorf(\"Dial: %v\", err)\n+\t\t\treturn\n \t\t}\n \t\tdefer c.Close()\n \t\tvar buf [1]byte\n@@ -669,7 +673,8 @@ func TestProlongTimeout(t *testing.T) {\n \t\ts, err := ln.Accept()\n \t\tconnected <- true\n \t\tif err != nil {\n-\t\t\tt.Fatalf(\"ln.Accept: %v\", err)\n+\t\t\tt.Errorf(\"ln.Accept: %v\", err)\n+\t\t\treturn\n \t\t}\n \t\tdefer s.Close()\n \t\ts.SetDeadline(time.Now().Add(time.Hour))\n@@ -706,7 +711,7 @@ func TestProlongTimeout(t *testing.T) {\n \n func TestDeadlineRace(t *testing.T) {\n \tswitch runtime.GOOS {\n-\tcase \"plan9\":\n+\tcase \"nacl\", \"plan9\":\n \t\tt.Skipf(\"skipping test on %q\", runtime.GOOS)\n \t}\n "}, {"sha": "e1778779cf591f29bdfd294eb6216d04d869cc4c", "filename": "libgo/go/net/udp_test.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fudp_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fudp_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fudp_test.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -201,6 +201,10 @@ func TestIPv6LinkLocalUnicastUDP(t *testing.T) {\n \t\t{\"udp\", \"[\" + laddr + \"%\" + ifi.Name + \"]:0\", false},\n \t\t{\"udp6\", \"[\" + laddr + \"%\" + ifi.Name + \"]:0\", false},\n \t}\n+\t// The first udp test fails on DragonFly - see issue 7473.\n+\tif runtime.GOOS == \"dragonfly\" {\n+\t\ttests = tests[1:]\n+\t}\n \tswitch runtime.GOOS {\n \tcase \"darwin\", \"dragonfly\", \"freebsd\", \"openbsd\", \"netbsd\":\n \t\ttests = append(tests, []test{"}, {"sha": "4c99ae4af6837e8c01ae03dcec0ca2111b2f0ac2", "filename": "libgo/go/net/udpsock.go", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fudpsock.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fudpsock.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fudpsock.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -4,10 +4,6 @@\n \n package net\n \n-import \"errors\"\n-\n-var ErrWriteToConnected = errors.New(\"use of WriteTo with pre-connected UDP\")\n-\n // UDPAddr represents the address of a UDP end point.\n type UDPAddr struct {\n \tIP   IP"}, {"sha": "5dfba94e9a6d25f698f7977fee3ed9e8a54f9a2f", "filename": "libgo/go/net/udpsock_posix.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fudpsock_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387/libgo%2Fgo%2Fnet%2Fudpsock_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fudpsock_posix.go?ref=00d86ac99f5dd6afa5bbd7c38ffe1c585edd2387", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows\n+// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n package net\n \n@@ -64,7 +64,7 @@ func (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err error) {\n \tif !c.ok() {\n \t\treturn 0, nil, syscall.EINVAL\n \t}\n-\tn, sa, err := c.fd.ReadFrom(b)\n+\tn, sa, err := c.fd.readFrom(b)\n \tswitch sa := sa.(type) {\n \tcase *syscall.SockaddrInet4:\n \t\taddr = &UDPAddr{IP: sa.Addr[0:], Port: sa.Port}\n@@ -93,7 +93,7 @@ func (c *UDPConn) ReadMsgUDP(b, oob []byte) (n, oobn, flags int, addr *UDPAddr,\n \t\treturn 0, 0, 0, nil, syscall.EINVAL\n \t}\n \tvar sa syscall.Sockaddr\n-\tn, oobn, flags, sa, err = c.fd.ReadMsg(b, oob)\n+\tn, oobn, flags, sa, err = c.fd.readMsg(b, oob)\n \tswitch sa := sa.(type) {\n \tcase *syscall.SockaddrInet4:\n \t\taddr = &UDPAddr{IP: sa.Addr[0:], Port: sa.Port}\n@@ -124,7 +124,7 @@ func (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (int, error) {\n \tif err != nil {\n \t\treturn 0, &OpError{\"write\", c.fd.net, addr, err}\n \t}\n-\treturn c.fd.WriteTo(b, sa)\n+\treturn c.fd.writeTo(b, sa)\n }\n \n // WriteTo implements the PacketConn WriteTo method.\n@@ -156,7 +156,7 @@ func (c *UDPConn) WriteMsgUDP(b, oob []byte, addr *UDPAddr) (n, oobn int, err er\n \tif err != nil {\n \t\treturn 0, 0, &OpError{\"write\", c.fd.net, addr, err}\n \t}\n-\treturn c.fd.WriteMsg(b, oob, sa)\n+\treturn c.fd.writeMsg(b, oob, sa)\n }\n \n // DialUDP connects to the remote address raddr on the network net,"}]}