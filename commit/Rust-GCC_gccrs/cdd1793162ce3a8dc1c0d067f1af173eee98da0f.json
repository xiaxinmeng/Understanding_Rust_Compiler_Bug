{"sha": "cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkMTc5MzE2MmNlM2E4ZGMxYzBkMDY3ZjFhZjE3M2VlZTk4ZGEwZg==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2019-02-24T20:03:28Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gcc.gnu.org", "date": "2019-02-24T20:03:28Z"}, "message": "re PR fortran/89266 (ICE with TRANSFER of len=0 character array constructor)\n\n2019-02-24  Harald Anlauf  <anlauf@gmx.de>\n\n\tPR fortran/89266\n\tPR fortran/88326\n\t* target-memory.c (gfc_element_size): Return false if element size\n\tcannot be determined; element size is returned separately.\n\t(gfc_target_expr_size): Return false if expression size cannot be\n\tdetermined; expression size is returned separately.\n\t* target-memory.h: Adjust prototypes.\n\t* check.c (gfc_calculate_transfer_sizes): Adjust references to\n\tgfc_target_expr_size, gfc_element_size.\n\t* arith.c (hollerith2representation): Likewise.\n\t* class.c (find_intrinsic_vtab): Likewise.\n\t* simplify.c (gfc_simplify_sizeof): Likewise.\n\n\tPR fortran/89266\n\tPR fortran/88326\n\t* gfortran.dg/pr89266.f90: New test.\n\t* gfortran.dg/pr88326.f90: New test.\n\nFrom-SVN: r269177", "tree": {"sha": "f8023f584e66c89d7f50649bb609e9124f0aab15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8023f584e66c89d7f50649bb609e9124f0aab15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "953e25c44acc2458d854b1442d7775d997aaf187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953e25c44acc2458d854b1442d7775d997aaf187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953e25c44acc2458d854b1442d7775d997aaf187"}], "stats": {"total": 150, "additions": 116, "deletions": 34}, "files": [{"sha": "db151a884c73a7852c60f3f94fac25f21a16e34b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "patch": "@@ -1,3 +1,18 @@\n+2019-02-24  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/89266\n+\tPR fortran/88326\n+\t* target-memory.c (gfc_element_size): Return false if element size\n+\tcannot be determined; element size is returned separately.\n+\t(gfc_target_expr_size): Return false if expression size cannot be\n+\tdetermined; expression size is returned separately.\n+\t* target-memory.h: Adjust prototypes.\n+\t* check.c (gfc_calculate_transfer_sizes): Adjust references to\n+\tgfc_target_expr_size, gfc_element_size.\n+\t* arith.c (hollerith2representation): Likewise.\n+\t* class.c (find_intrinsic_vtab): Likewise.\n+\t* simplify.c (gfc_simplify_sizeof): Likewise.\n+\n 2019-02-23  Jerry DeLisle <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/84387"}, {"sha": "52d3a38b64658a896f0c0268fce0e2b9449a772a", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "patch": "@@ -2548,10 +2548,10 @@ gfc_character2character (gfc_expr *src, int kind)\n static void\n hollerith2representation (gfc_expr *result, gfc_expr *src)\n {\n-  int src_len, result_len;\n+  size_t src_len, result_len;\n \n   src_len = src->representation.length - src->ts.u.pad;\n-  result_len = gfc_target_expr_size (result);\n+  gfc_target_expr_size (result, &result_len);\n \n   if (src_len > result_len)\n     {"}, {"sha": "0367c92ed4b9d187017e23281c141f1797699d3e", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "patch": "@@ -5480,16 +5480,15 @@ gfc_calculate_transfer_sizes (gfc_expr *source, gfc_expr *mold, gfc_expr *size,\n     return false;\n \n   /* Calculate the size of the source.  */\n-  *source_size = gfc_target_expr_size (source);\n-  if (*source_size == 0)\n+  if (!gfc_target_expr_size (source, source_size))\n     return false;\n \n   /* Determine the size of the element.  */\n-  result_elt_size = gfc_element_size (mold);\n-  if (result_elt_size == 0)\n+  if (!gfc_element_size (mold, &result_elt_size))\n     return false;\n \n-  if (mold->expr_type == EXPR_ARRAY || mold->rank || size)\n+  if ((result_elt_size > 0 && (mold->expr_type == EXPR_ARRAY || mold->rank))\n+      || size)\n     {\n       int result_length;\n "}, {"sha": "3f23556e726bdb0ec6424d14e1a68e3b5b6269ad", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "patch": "@@ -2674,6 +2674,7 @@ find_intrinsic_vtab (gfc_typespec *ts)\n \t      gfc_namespace *sub_ns;\n \t      gfc_namespace *contained;\n \t      gfc_expr *e;\n+\t      size_t e_size;\n \n \t      gfc_get_symbol (name, ns, &vtype);\n \t      if (!gfc_add_flavor (&vtype->attr, FL_DERIVED, NULL,\n@@ -2708,11 +2709,13 @@ find_intrinsic_vtab (gfc_typespec *ts)\n \t      e = gfc_get_expr ();\n \t      e->ts = *ts;\n \t      e->expr_type = EXPR_VARIABLE;\n+\t      if (ts->type == BT_CHARACTER)\n+\t\te_size = ts->kind;\n+\t      else\n+\t\tgfc_element_size (e, &e_size);\n \t      c->initializer = gfc_get_int_expr (gfc_size_kind,\n \t\t\t\t\t\t NULL,\n-\t\t\t\t\t\t ts->type == BT_CHARACTER\n-\t\t\t\t\t\t ? ts->kind\n-\t\t\t\t\t\t : gfc_element_size (e));\n+\t\t\t\t\t\t e_size);\n \t      gfc_free_expr (e);\n \n \t      /* Add component _extends.  */"}, {"sha": "6c1f4bd4fce300c24b673925906f2bb0f0acc26c", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "patch": "@@ -7383,6 +7383,7 @@ gfc_simplify_sizeof (gfc_expr *x)\n {\n   gfc_expr *result = NULL;\n   mpz_t array_size;\n+  size_t res_size;\n \n   if (x->ts.type == BT_CLASS || x->ts.deferred)\n     return NULL;\n@@ -7398,7 +7399,8 @@ gfc_simplify_sizeof (gfc_expr *x)\n \n   result = gfc_get_constant_expr (BT_INTEGER, gfc_index_integer_kind,\n \t\t\t\t  &x->where);\n-  mpz_set_si (result->value.integer, gfc_target_expr_size (x));\n+  gfc_target_expr_size (x, &res_size);\n+  mpz_set_si (result->value.integer, res_size);\n \n   return result;\n }\n@@ -7412,6 +7414,7 @@ gfc_simplify_storage_size (gfc_expr *x,\n {\n   gfc_expr *result = NULL;\n   int k;\n+  size_t siz;\n \n   if (x->ts.type == BT_CLASS || x->ts.deferred)\n     return NULL;\n@@ -7427,7 +7430,8 @@ gfc_simplify_storage_size (gfc_expr *x,\n \n   result = gfc_get_constant_expr (BT_INTEGER, k, &x->where);\n \n-  mpz_set_si (result->value.integer, gfc_element_size (x));\n+  gfc_element_size (x, &siz);\n+  mpz_set_si (result->value.integer, siz);\n   mpz_mul_ui (result->value.integer, result->value.integer, BITS_PER_UNIT);\n \n   return range_check (result, \"STORAGE_SIZE\");"}, {"sha": "09af2a568182ce061dd321fa26338dc61ef1cdb1", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "patch": "@@ -73,40 +73,49 @@ size_character (gfc_charlen_t length, int kind)\n \n \n /* Return the size of a single element of the given expression.\n-   Identical to gfc_target_expr_size for scalars.  */\n+   Equivalent to gfc_target_expr_size for scalars.  */\n \n-size_t\n-gfc_element_size (gfc_expr *e)\n+bool\n+gfc_element_size (gfc_expr *e, size_t *siz)\n {\n   tree type;\n \n   switch (e->ts.type)\n     {\n     case BT_INTEGER:\n-      return size_integer (e->ts.kind);\n+      *siz = size_integer (e->ts.kind);\n+      return true;\n     case BT_REAL:\n-      return size_float (e->ts.kind);\n+      *siz = size_float (e->ts.kind);\n+      return true;\n     case BT_COMPLEX:\n-      return size_complex (e->ts.kind);\n+      *siz = size_complex (e->ts.kind);\n+      return true;\n     case BT_LOGICAL:\n-      return size_logical (e->ts.kind);\n+      *siz = size_logical (e->ts.kind);\n+      return true;\n     case BT_CHARACTER:\n       if (e->expr_type == EXPR_CONSTANT)\n-\treturn size_character (e->value.character.length, e->ts.kind);\n+\t*siz = size_character (e->value.character.length, e->ts.kind);\n       else if (e->ts.u.cl != NULL && e->ts.u.cl->length != NULL\n \t       && e->ts.u.cl->length->expr_type == EXPR_CONSTANT\n \t       && e->ts.u.cl->length->ts.type == BT_INTEGER)\n \t{\n \t  HOST_WIDE_INT length;\n \n \t  gfc_extract_hwi (e->ts.u.cl->length, &length);\n-\t  return size_character (length, e->ts.kind);\n+\t  *siz = size_character (length, e->ts.kind);\n \t}\n       else\n-\treturn 0;\n+\t{\n+\t  *siz = 0;\n+\t  return false;\n+\t}\n+      return true;\n \n     case BT_HOLLERITH:\n-      return e->representation.length;\n+      *siz = e->representation.length;\n+      return true;\n     case BT_DERIVED:\n     case BT_CLASS:\n     case BT_VOID:\n@@ -120,36 +129,43 @@ gfc_element_size (gfc_expr *e)\n \ttype = gfc_typenode_for_spec (&ts);\n \tsize = int_size_in_bytes (type);\n \tgcc_assert (size >= 0);\n-\treturn size;\n+\t*siz = size;\n       }\n+      return true;\n     default:\n       gfc_internal_error (\"Invalid expression in gfc_element_size.\");\n-      return 0;\n+      *siz = 0;\n+      return false;\n     }\n+  return true;\n }\n \n \n /* Return the size of an expression in its target representation.  */\n \n-size_t\n-gfc_target_expr_size (gfc_expr *e)\n+bool\n+gfc_target_expr_size (gfc_expr *e, size_t *size)\n {\n   mpz_t tmp;\n-  size_t asz;\n+  size_t asz, el_size;\n \n   gcc_assert (e != NULL);\n \n+  *size = 0;\n   if (e->rank)\n     {\n       if (gfc_array_size (e, &tmp))\n \tasz = mpz_get_ui (tmp);\n       else\n-\tasz = 0;\n+\treturn false;\n     }\n   else\n     asz = 1;\n \n-  return asz * gfc_element_size (e);\n+  if (!gfc_element_size (e, &el_size))\n+    return false;\n+  *size = asz * el_size;\n+  return true;\n }\n \n \n@@ -675,7 +691,7 @@ expr_to_char (gfc_expr *e, locus *loc,\n \n   /* Otherwise, use the target-memory machinery to write a bitwise image, appropriate\n      to the target, in a buffer and check off the initialized part of the buffer.  */\n-  len = gfc_target_expr_size (e);\n+  gfc_target_expr_size (e, &len);\n   buffer = (unsigned char*)alloca (len);\n   len = gfc_target_encode_expr (e, buffer, len);\n \n@@ -722,7 +738,9 @@ gfc_merge_initializers (gfc_typespec ts, gfc_expr *e, locus *loc,\n       for (c = gfc_constructor_first (e->value.constructor);\n \t   c; c = gfc_constructor_next (c))\n \t{\n-\t  size_t elt_size = gfc_target_expr_size (c->expr);\n+\t  size_t elt_size;\n+\n+\t  gfc_target_expr_size (c->expr, &elt_size);\n \n \t  if (mpz_cmp_si (c->offset, 0) != 0)\n \t    len = elt_size * (size_t)mpz_get_si (c->offset);"}, {"sha": "5e06c9ad8f11051d16a7de04f8e2a1124b315d7f", "filename": "gcc/fortran/target-memory.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Ftarget-memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ffortran%2Ftarget-memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.h?ref=cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "patch": "@@ -24,8 +24,8 @@ along with GCC; see the file COPYING3.  If not see\n /* Convert a BOZ to REAL or COMPLEX.  */\n bool gfc_convert_boz (gfc_expr *, gfc_typespec *);\n \n-size_t gfc_element_size (gfc_expr *);\n-size_t gfc_target_expr_size (gfc_expr *);\n+bool gfc_element_size (gfc_expr *, size_t *);\n+bool gfc_target_expr_size (gfc_expr *, size_t *);\n \n /* Write a constant expression in binary form to a target buffer.  */\n size_t gfc_encode_character (int, size_t, const gfc_char_t *, unsigned char *,"}, {"sha": "804cf456fe4b28ed7ff19fb7b4a5897beed65f12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "patch": "@@ -1,3 +1,10 @@\n+2019-02-24  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/89266\n+\tPR fortran/88326\n+\t* gfortran.dg/pr89266.f90: New test.\n+\t* gfortran.dg/pr88326.f90: New test.\n+\n 2019-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/89445"}, {"sha": "3cde68369f49650ea07f4cf9a29edc4482a8aa34", "filename": "gcc/testsuite/gfortran.dg/pr88326.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88326.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88326.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88326.f90?ref=cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+! PR fortran/88326 - ICE in gfc_conv_array_initializer\n+\n+program p\n+  character, parameter :: x(3) = ['a','b','c']\n+  character    :: y(1) = transfer('', x) ! { dg-error \"Different shape for array assignment\" }\n+  character(0) :: z(1) = transfer('', x) ! { dg-error \"Different shape for array assignment\" }\n+  character    :: u(0) = transfer('', x)\n+  print *, y, z, u\n+end"}, {"sha": "f078adeb4fcf8eaf8a6b3269d3b5b66c919a6da8", "filename": "gcc/testsuite/gfortran.dg/pr89266.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr89266.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1793162ce3a8dc1c0d067f1af173eee98da0f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr89266.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr89266.f90?ref=cdd1793162ce3a8dc1c0d067f1af173eee98da0f", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+!\n+! PR fortran/89266 - ICE with TRANSFER of len=0 character array constructor\n+\n+program test\n+  implicit none\n+  character(*), parameter :: n = ''\n+  character(*), parameter :: o = transfer ([''], n)\n+  character(*), parameter :: p = transfer ( n , n)\n+  character(*), parameter :: q = transfer ([n], n)\n+  character(6), save      :: r = transfer ([''], n)\n+  character(6), save      :: s = transfer ( n , n)\n+  character(6), save      :: t = transfer ([n], n)\n+  integer,      parameter :: a(0) = 0\n+  integer,      parameter :: b(0) = transfer (a, a)\n+  integer,      save      :: c(0) = transfer (a, a)\n+  if (len (o) /= 0) stop 1\n+  if (len (p) /= 0) stop 2\n+  if (len (q) /= 0) stop 3\n+  if (r /= \"\") stop 4\n+  if (s /= \"\") stop 5\n+  if (t /= \"\") stop 6\n+  if (size (b) /= 0 .or. any (b /= 0)) stop 7\n+  if (size (c) /= 0 .or. any (c /= 0)) stop 8\n+end program test"}]}