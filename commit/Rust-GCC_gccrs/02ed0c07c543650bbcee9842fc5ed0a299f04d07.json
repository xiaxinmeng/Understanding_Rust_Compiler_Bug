{"sha": "02ed0c07c543650bbcee9842fc5ed0a299f04d07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlZDBjMDdjNTQzNjUwYmJjZWU5ODQyZmM1ZWQwYTI5OWYwNGQwNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-26T14:49:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-26T14:49:56Z"}, "message": "(output_move_simode_const): New function.\n\n(singlemove_string): Call it.\n\nFrom-SVN: r11619", "tree": {"sha": "7e6a04f4b31c83427708f1bf62539653c67d3133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e6a04f4b31c83427708f1bf62539653c67d3133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ed0c07c543650bbcee9842fc5ed0a299f04d07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ed0c07c543650bbcee9842fc5ed0a299f04d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ed0c07c543650bbcee9842fc5ed0a299f04d07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ed0c07c543650bbcee9842fc5ed0a299f04d07/comments", "author": null, "committer": null, "parents": [{"sha": "cab70741feebc002179fff778cb6ac8ed4b26f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab70741feebc002179fff778cb6ac8ed4b26f2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab70741feebc002179fff778cb6ac8ed4b26f2e"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "8da249d88c14e667b7bece99b6dae02cf2a744dd", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ed0c07c543650bbcee9842fc5ed0a299f04d07/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ed0c07c543650bbcee9842fc5ed0a299f04d07/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=02ed0c07c543650bbcee9842fc5ed0a299f04d07", "patch": "@@ -1158,6 +1158,34 @@ output_move_const_into_data_reg (operands)\n     }\n }\n \n+char *\n+output_move_simode_const (operands)\n+     rtx *operands;\n+{\n+  if (operands[1] == const0_rtx\n+      && (DATA_REG_P (operands[0])\n+\t  || GET_CODE (operands[0]) == MEM)\n+      /* clr insns on 68000 read before writing.\n+\t This isn't so on the 68010, but we have no alternative for it.  */\n+      && (TARGET_68020\n+\t  || !(GET_CODE (operands[0]) == MEM\n+\t       && MEM_VOLATILE_P (operands[0]))))\n+    return \"clr%.l %0\";\n+  else if (DATA_REG_P (operands[0]))\n+    return output_move_const_into_data_reg (operands);\n+  else if (ADDRESS_REG_P (operands[0])\n+\t   && INTVAL (operands[1]) < 0x8000\n+\t   && INTVAL (operands[1]) >= -0x8000)\n+    return \"move%.w %1,%0\";\n+  else if (GET_CODE (operands[0]) == MEM\n+      && GET_CODE (XEXP (operands[0], 0)) == PRE_DEC\n+      && REGNO (XEXP (XEXP (operands[0], 0), 0)) == STACK_POINTER_REGNUM\n+\t   && INTVAL (operands[1]) < 0x8000\n+\t   && INTVAL (operands[1]) >= -0x8000)\n+    return \"pea %a1\";\n+  return \"move%.l %1,%0\";\n+}\n+\n /* Return the best assembler insn template\n    for moving operands[1] into operands[0] as a fullword.  */\n \n@@ -1169,14 +1197,9 @@ singlemove_string (operands)\n   if (FPA_REG_P (operands[0]) || FPA_REG_P (operands[1]))\n     return \"fpmoves %1,%0\";\n #endif\n-  if (DATA_REG_P (operands[0])\n-      && GET_CODE (operands[1]) == CONST_INT)\n-      return output_move_const_into_data_reg (operands);\n-  if (operands[1] != const0_rtx)\n-    return \"move%.l %1,%0\";\n-  if (! ADDRESS_REG_P (operands[0]))\n-    return \"clr%.l %0\";\n-  return \"sub%.l %0,%0\";\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+    return output_move_simode_const (operands);\n+  return \"move%.l %1,%0\";\n }\n \n "}]}