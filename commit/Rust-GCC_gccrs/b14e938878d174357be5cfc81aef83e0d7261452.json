{"sha": "b14e938878d174357be5cfc81aef83e0d7261452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE0ZTkzODg3OGQxNzQzNTdiZTVjZmM4MWFlZjgzZTBkNzI2MTQ1Mg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-06-20T09:31:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-06-20T09:31:23Z"}, "message": "re PR tree-optimization/40495 (libgomp.c++/task-4.C)\n\n2009-06-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/40495\n\t* tree-ssa-structalias.c (get_constraint_exp_for_temp): Remove.\n\t(new_scalar_tmp_constraint_exp): New function.\n\t(process_constraint): Do not create temporary decls.\n\t(process_all_all_constraints): Likewise.\n\t(handle_const_call): Likewise.\n\t(create_function_info_for): Do not set decl.\n\nFrom-SVN: r148742", "tree": {"sha": "b0845a58a4e99e40aed733c88668ac1693e5ebbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0845a58a4e99e40aed733c88668ac1693e5ebbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b14e938878d174357be5cfc81aef83e0d7261452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14e938878d174357be5cfc81aef83e0d7261452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b14e938878d174357be5cfc81aef83e0d7261452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14e938878d174357be5cfc81aef83e0d7261452/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c885ca89966739e14a789620a79aedccbc3d1edb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c885ca89966739e14a789620a79aedccbc3d1edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c885ca89966739e14a789620a79aedccbc3d1edb"}], "stats": {"total": 85, "additions": 37, "deletions": 48}, "files": [{"sha": "11db843e050ea8880f46fd34a299bb5d75517267", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14e938878d174357be5cfc81aef83e0d7261452/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14e938878d174357be5cfc81aef83e0d7261452/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b14e938878d174357be5cfc81aef83e0d7261452", "patch": "@@ -1,3 +1,13 @@\n+2009-06-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40495\n+\t* tree-ssa-structalias.c (get_constraint_exp_for_temp): Remove.\n+\t(new_scalar_tmp_constraint_exp): New function.\n+\t(process_constraint): Do not create temporary decls.\n+\t(process_all_all_constraints): Likewise.\n+\t(handle_const_call): Likewise.\n+\t(create_function_info_for): Do not set decl.\n+\n 2009-06-19  Ian Lance Taylor  <iant@google.com>\n \n \t* config/rs6000/rs6000.c (rs6000_explicit_options): Make static."}, {"sha": "09b87622836d78e2f1f4a621e4919604da779799", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 27, "deletions": 48, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14e938878d174357be5cfc81aef83e0d7261452/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14e938878d174357be5cfc81aef83e0d7261452/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=b14e938878d174357be5cfc81aef83e0d7261452", "patch": "@@ -2676,20 +2676,27 @@ get_vi_for_tree (tree t)\n   return (varinfo_t) *slot;\n }\n \n-/* Get a constraint expression for a new temporary variable.  */\n+/* Get a scalar constraint expression for a new temporary variable.  */\n \n static struct constraint_expr\n-get_constraint_exp_for_temp (tree t)\n+new_scalar_tmp_constraint_exp (const char *name)\n {\n-  struct constraint_expr cexpr;\n+  struct constraint_expr tmp;\n+  unsigned index = VEC_length (varinfo_t, varmap);\n+  varinfo_t vi;\n \n-  gcc_assert (SSA_VAR_P (t));\n+  vi = new_var_info (NULL_TREE, index, name);\n+  vi->offset = 0;\n+  vi->size = -1;\n+  vi->fullsize = -1;\n+  vi->is_full_var = 1;\n+  VEC_safe_push (varinfo_t, heap, varmap, vi);\n \n-  cexpr.type = SCALAR;\n-  cexpr.var = get_vi_for_tree (t)->id;\n-  cexpr.offset = 0;\n+  tmp.var = vi->id;\n+  tmp.type = SCALAR;\n+  tmp.offset = 0;\n \n-  return cexpr;\n+  return tmp;\n }\n \n /* Get a constraint expression vector from an SSA_VAR_P node.\n@@ -2768,23 +2775,16 @@ process_constraint (constraint_t t)\n   if (rhs.type == DEREF && lhs.type == DEREF && rhs.var != anything_id)\n     {\n       /* Split into tmp = *rhs, *lhs = tmp */\n-      tree rhsdecl = get_varinfo (rhs.var)->decl;\n-      tree pointertype = TREE_TYPE (rhsdecl);\n-      tree pointedtotype = TREE_TYPE (pointertype);\n-      tree tmpvar = create_tmp_var_raw (pointedtotype, \"doubledereftmp\");\n-      struct constraint_expr tmplhs = get_constraint_exp_for_temp (tmpvar);\n-\n+      struct constraint_expr tmplhs;\n+      tmplhs = new_scalar_tmp_constraint_exp (\"doubledereftmp\");\n       process_constraint (new_constraint (tmplhs, rhs));\n       process_constraint (new_constraint (lhs, tmplhs));\n     }\n   else if (rhs.type == ADDRESSOF && lhs.type == DEREF)\n     {\n       /* Split into tmp = &rhs, *lhs = tmp */\n-      tree rhsdecl = get_varinfo (rhs.var)->decl;\n-      tree pointertype = TREE_TYPE (rhsdecl);\n-      tree tmpvar = create_tmp_var_raw (pointertype, \"derefaddrtmp\");\n-      struct constraint_expr tmplhs = get_constraint_exp_for_temp (tmpvar);\n-\n+      struct constraint_expr tmplhs;\n+      tmplhs = new_scalar_tmp_constraint_exp (\"derefaddrtmp\");\n       process_constraint (new_constraint (tmplhs, rhs));\n       process_constraint (new_constraint (lhs, tmplhs));\n     }\n@@ -3091,8 +3091,8 @@ do_deref (VEC (ce_s, heap) **constraints)\n \tc->type = SCALAR;\n       else if (c->type == DEREF)\n \t{\n-\t  tree tmpvar = create_tmp_var_raw (ptr_type_node, \"dereftmp\");\n-\t  struct constraint_expr tmplhs = get_constraint_exp_for_temp (tmpvar);\n+\t  struct constraint_expr tmplhs;\n+\t  tmplhs = new_scalar_tmp_constraint_exp (\"dereftmp\");\n \t  process_constraint (new_constraint (tmplhs, *c));\n \t  c->var = tmplhs.var;\n \t}\n@@ -3261,10 +3261,7 @@ process_all_all_constraints (VEC (ce_s, heap) *lhsc, VEC (ce_s, heap) *rhsc)\n   else\n     {\n       struct constraint_expr tmp;\n-      tree tmpvar = create_tmp_var_raw (ptr_type_node, \"allallcopytmp\");\n-      tmp.var = get_vi_for_tree (tmpvar)->id;\n-      tmp.type = SCALAR;\n-      tmp.offset = 0;\n+      tmp = new_scalar_tmp_constraint_exp (\"allalltmp\");\n       for (i = 0; VEC_iterate (ce_s, rhsc, i, rhsp); ++i)\n \tprocess_constraint (new_constraint (tmp, *rhsp));\n       for (i = 0; VEC_iterate (ce_s, lhsc, i, lhsp); ++i)\n@@ -3472,8 +3469,7 @@ handle_lhs_call (tree lhs, int flags, VEC(ce_s, heap) *rhsc)\n static void\n handle_const_call (gimple stmt, VEC(ce_s, heap) **results)\n {\n-  struct constraint_expr rhsc, tmpc = {SCALAR, 0, 0};\n-  tree tmpvar = NULL_TREE;\n+  struct constraint_expr rhsc;\n   unsigned int k;\n \n   /* Treat nested const functions the same as pure functions as far\n@@ -3495,27 +3491,14 @@ handle_const_call (gimple stmt, VEC(ce_s, heap) **results)\n       if (could_have_pointers (arg))\n \t{\n \t  VEC(ce_s, heap) *argc = NULL;\n+\t  unsigned i;\n \t  struct constraint_expr *argp;\n-\t  int i;\n-\n-\t  /* We always use a temporary here, otherwise we end up with\n-\t     a quadratic amount of constraints for\n-\t       large_struct = const_call (large_struct);\n-\t     with field-sensitive PTA.  */\n-\t  if (tmpvar == NULL_TREE)\n-\t    {\n-\t      tmpvar = create_tmp_var_raw (ptr_type_node, \"consttmp\");\n-\t      tmpc = get_constraint_exp_for_temp (tmpvar);\n-\t    }\n-\n \t  get_constraint_for (arg, &argc);\n-\t  for (i = 0; VEC_iterate (ce_s, argc, i, argp); i++)\n-\t    process_constraint (new_constraint (tmpc, *argp));\n-\t  VEC_free (ce_s, heap, argc);\n+\t  for (i = 0; VEC_iterate (ce_s, argc, i, argp); ++i)\n+\t    VEC_safe_push (ce_s, heap, *results, argp);\n+\t  VEC_free(ce_s, heap, argc);\n \t}\n     }\n-  if (tmpvar != NULL_TREE)\n-    VEC_safe_push (ce_s, heap, *results, &tmpc);\n \n   /* May return addresses of globals.  */\n   rhsc.var = nonlocal_id;\n@@ -4280,7 +4263,6 @@ create_function_info_for (tree decl, const char *name)\n   /* Create the variable info.  */\n \n   vi = new_var_info (decl, index, name);\n-  vi->decl = decl;\n   vi->offset = 0;\n   vi->size = 1;\n   vi->fullsize = count_num_arguments (decl, &is_varargs) + 1;\n@@ -4320,7 +4302,6 @@ create_function_info_for (tree decl, const char *name)\n       free (tempname);\n \n       argvi = new_var_info (argdecl, newindex, newname);\n-      argvi->decl = argdecl;\n       VEC_safe_push (varinfo_t, heap, varmap, argvi);\n       argvi->offset = i;\n       argvi->size = 1;\n@@ -4356,7 +4337,6 @@ create_function_info_for (tree decl, const char *name)\n       free (tempname);\n \n       resultvi = new_var_info (resultdecl, newindex, newname);\n-      resultvi->decl = resultdecl;\n       VEC_safe_push (varinfo_t, heap, varmap, resultvi);\n       resultvi->offset = i;\n       resultvi->size = 1;\n@@ -4418,7 +4398,6 @@ create_variable_info_for (tree decl, const char *name)\n      sort the field list and create fake variables for all the\n      fields.  */\n   vi = new_var_info (decl, index, name);\n-  vi->decl = decl;\n   vi->offset = 0;\n   vi->may_have_pointers = could_have_pointers (decl);\n   if (!declsize"}]}