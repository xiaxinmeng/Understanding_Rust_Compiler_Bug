{"sha": "5998f1bbeb336d0b9aee86726291269fd8bb6a66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk5OGYxYmJlYjMzNmQwYjlhZWU4NjcyNjI5MTI2OWZkOGJiNmE2Ng==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-06-12T15:35:31Z"}, "committer": {"name": "Carl Love", "email": "carll@us.ibm.com", "date": "2020-08-05T04:17:58Z"}, "message": "rs6000 Add vector blend, permute builtin support\n\nGCC maintainers:\n\nThe following patch adds support for the vec_blendv and vec_permx\nbuiltins.\n\nThe patch has been compiled and tested on\n\n  powerpc64le-unknown-linux-gnu (Power 8 LE)\n  powerpc64le-unknown-linux-gnu (Power 9 LE)\n\nwith no regression errors.\n\nThe test cases were compiled on a Power 9 system and then tested on\nMambo.\n\n                         Carl Love\n\nrs6000 RFC2609 vector blend, permute instructions\n\ngcc/ChangeLog\n\n\t    2020-08-04  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_blendv, vec_permx): Add define.\n\t* config/rs6000/altivec.md (UNSPEC_XXBLEND, UNSPEC_XXPERMX.): New\n\tunspecs.\n\t(VM3): New define_mode.\n\t(VM3_char): New define_attr.\n\t(xxblend_<mode> mode VM3): New define_insn.\n\t(xxpermx): New define_expand.\n\t(xxpermx_inst): New define_insn.\n\t* config/rs6000/rs6000-builtin.def (VXXBLEND_V16QI, VXXBLEND_V8HI,\n\tVXXBLEND_V4SI, VXXBLEND_V2DI, VXXBLEND_V4SF, VXXBLEND_V2DF): New\n\tBU_P10V_3 definitions.\n\t(XXBLEND): New BU_P10_OVERLOAD_3 definition.\n\t(XXPERMX): New BU_P10_OVERLOAD_4 definition.\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n\t(P10_BUILTIN_VXXPERMX): Add if statement.\n\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VXXBLEND_V16QI,\n\tP10_BUILTIN_VXXBLEND_V8HI, P10_BUILTIN_VXXBLEND_V4SI,\n\tP10_BUILTIN_VXXBLEND_V2DI, P10_BUILTIN_VXXBLEND_V4SF,\n\tP10_BUILTIN_VXXBLEND_V2DF, P10_BUILTIN_VXXPERMX): Define\n\toverloaded arguments.\n\t(rs6000_expand_quaternop_builtin): Add if case for CODE_FOR_xxpermx.\n\t(builtin_quaternary_function_type): Add v16uqi_type and xxpermx_type\n\tvariables, add case statement for P10_BUILTIN_VXXPERMX.\n\t(builtin_function_type): Add case statements for\n\tP10_BUILTIN_VXXBLEND_V16QI, P10_BUILTIN_VXXBLEND_V8HI,\n\tP10_BUILTIN_VXXBLEND_V4SI, P10_BUILTIN_VXXBLEND_V2DI.\n\t* doc/extend.texi: Add documentation for vec_blendv and vec_permx.\n\ngcc/testsuite/ChangeLog\n\n\t    2020-08-04  Carl Love  <cel@us.ibm.com>\n\t* gcc.target/powerpc/vec-blend-runnable.c: New test.\n\t* gcc.target/powerpc/vec-permute-ext-runnable.c: New test.", "tree": {"sha": "705f6a4ceb74b2e2a21275ba5a76f7c3acfda49c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/705f6a4ceb74b2e2a21275ba5a76f7c3acfda49c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5998f1bbeb336d0b9aee86726291269fd8bb6a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5998f1bbeb336d0b9aee86726291269fd8bb6a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5998f1bbeb336d0b9aee86726291269fd8bb6a66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5998f1bbeb336d0b9aee86726291269fd8bb6a66/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c"}], "stats": {"total": 836, "additions": 830, "deletions": 6}, "files": [{"sha": "bf2240f16a255c07d374a455e25097cf236bb577", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=5998f1bbeb336d0b9aee86726291269fd8bb6a66", "patch": "@@ -712,6 +712,8 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_splati(a)  __builtin_vec_xxspltiw (a)\n #define vec_splatid(a) __builtin_vec_xxspltid (a)\n #define vec_splati_ins(a, b, c)        __builtin_vec_xxsplti32dx (a, b, c)\n+#define vec_blendv(a, b, c)    __builtin_vec_xxblend (a, b, c)\n+#define vec_permx(a, b, c, d)  __builtin_vec_xxpermx (a, b, c, d)\n \n #define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)\n #define vec_clrl(a, b)\t__builtin_vec_clrl (a, b)"}, {"sha": "0a2e634d6b016b8345969e67e1c647cfbcde569a", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=5998f1bbeb336d0b9aee86726291269fd8bb6a66", "patch": "@@ -178,6 +178,8 @@\n    UNSPEC_XXSPLTIW\n    UNSPEC_XXSPLTID\n    UNSPEC_XXSPLTI32DX\n+   UNSPEC_XXBLEND\n+   UNSPEC_XXPERMX\n ])\n \n (define_c_enum \"unspecv\"\n@@ -220,6 +222,21 @@\n \t\t\t   (KF \"FLOAT128_VECTOR_P (KFmode)\")\n \t\t\t   (TF \"FLOAT128_VECTOR_P (TFmode)\")])\n \n+;; Like VM2, just do char, short, int, long, float and double\n+(define_mode_iterator VM3 [V4SI\n+\t\t\t   V8HI\n+\t\t\t   V16QI\n+\t\t\t   V4SF\n+\t\t\t   V2DF\n+\t\t\t   V2DI])\n+\n+(define_mode_attr VM3_char [(V2DI \"d\")\n+\t\t\t   (V4SI \"w\")\n+\t\t\t   (V8HI \"h\")\n+\t\t\t   (V16QI \"b\")\n+\t\t\t   (V2DF  \"d\")\n+\t\t\t   (V4SF  \"w\")])\n+\n ;; Map the Vector convert single precision to double precision for integer\n ;; versus floating point\n (define_mode_attr VS_sxwsp [(V4SI \"sxw\") (V4SF \"sp\")])\n@@ -907,6 +924,60 @@\n   \"xxsplti32dx %x0,%2,%3\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"xxblend_<mode>\"\n+  [(set (match_operand:VM3 0 \"register_operand\" \"=wa\")\n+\t(unspec:VM3 [(match_operand:VM3 1 \"register_operand\" \"wa\")\n+\t\t     (match_operand:VM3 2 \"register_operand\" \"wa\")\n+\t\t     (match_operand:VM3 3 \"register_operand\" \"wa\")]\n+\t\t    UNSPEC_XXBLEND))]\n+  \"TARGET_POWER10\"\n+  \"xxblendv<VM3_char> %x0,%x1,%x2,%x3\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"xxpermx\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"+wa\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"wa\")\n+\t\t      (match_operand:V2DI 2 \"register_operand\" \"wa\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"wa\")\n+\t\t      (match_operand:QI 4 \"u8bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXPERMX))]\n+  \"TARGET_POWER10\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_xxpermx_inst (operands[0], operands[1],\n+\t\t\t\t operands[2], operands[3],\n+\t\t\t\t operands[4]));\n+  else\n+    {\n+      /* Reverse value of byte element indexes by XORing with 0xFF.\n+\t Reverse the 32-byte section identifier match by subracting bits [0:2]\n+\t of elemet from 7.  */\n+      int value = INTVAL (operands[4]);\n+      rtx vreg = gen_reg_rtx (V16QImode);\n+\n+      emit_insn (gen_xxspltib_v16qi (vreg, GEN_INT (-1)));\n+      emit_insn (gen_xorv16qi3 (operands[3], operands[3], vreg));\n+      value = 7 - value;\n+      emit_insn (gen_xxpermx_inst (operands[0], operands[2],\n+\t\t\t\t   operands[1], operands[3],\n+\t\t\t\t   GEN_INT (value)));\n+    }\n+\n+  DONE;\n+}\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"xxpermx_inst\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"+v\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V2DI 2 \"register_operand\" \"v\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v\")\n+\t\t      (match_operand:QI 4 \"u3bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXPERMX))]\n+  \"TARGET_POWER10\"\n+  \"xxpermx %x0,%x1,%x2,%x3,%4\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n (define_expand \"vstrir_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\")\n \t(unspec:VIshort [(match_operand:VIshort 1 \"altivec_register_operand\")]"}, {"sha": "f9f0fece5494d2a3d490d2ef5a03bf252ae21bd6", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=5998f1bbeb336d0b9aee86726291269fd8bb6a66", "patch": "@@ -2782,6 +2782,15 @@ BU_P10V_1 (VXXSPLTID, \"vxxspltidp\", CONST, xxspltidp_v2df)\n BU_P10V_3 (VXXSPLTI32DX_V4SI, \"vxxsplti32dx_v4si\", CONST, xxsplti32dx_v4si)\n BU_P10V_3 (VXXSPLTI32DX_V4SF, \"vxxsplti32dx_v4sf\", CONST, xxsplti32dx_v4sf)\n \n+BU_P10V_3 (VXXBLEND_V16QI, \"xxblend_v16qi\", CONST, xxblend_v16qi)\n+BU_P10V_3 (VXXBLEND_V8HI, \"xxblend_v8hi\", CONST, xxblend_v8hi)\n+BU_P10V_3 (VXXBLEND_V4SI, \"xxblend_v4si\", CONST, xxblend_v4si)\n+BU_P10V_3 (VXXBLEND_V2DI, \"xxblend_v2di\", CONST, xxblend_v2di)\n+BU_P10V_3 (VXXBLEND_V4SF, \"xxblend_v4sf\", CONST, xxblend_v4sf)\n+BU_P10V_3 (VXXBLEND_V2DF, \"xxblend_v2df\", CONST, xxblend_v2df)\n+\n+BU_P10V_4 (VXXPERMX, \"xxpermx\", CONST, xxpermx)\n+\n BU_P10V_1 (VSTRIBR, \"vstribr\", CONST, vstrir_v16qi)\n BU_P10V_1 (VSTRIHR, \"vstrihr\", CONST, vstrir_v8hi)\n BU_P10V_1 (VSTRIBL, \"vstribl\", CONST, vstril_v16qi)\n@@ -2852,6 +2861,8 @@ BU_P10_OVERLOAD_1 (VEXTRACTM, \"vextractm\")\n BU_P10_OVERLOAD_1 (XXSPLTIW, \"xxspltiw\")\n BU_P10_OVERLOAD_1 (XXSPLTID, \"xxspltid\")\n BU_P10_OVERLOAD_3 (XXSPLTI32DX, \"xxsplti32dx\")\n+BU_P10_OVERLOAD_3 (XXBLEND, \"xxblend\")\n+BU_P10_OVERLOAD_4 (XXPERMX, \"xxpermx\")\n \n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox_v2di)"}, {"sha": "2fad3d94706601c581e73f565e6f99b72e3183fa", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=5998f1bbeb336d0b9aee86726291269fd8bb6a66", "patch": "@@ -1800,22 +1800,34 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t      unsupported_builtin = true;\n \t  }\n       }\n-    else if (fcode == P10_BUILTIN_VEC_XXEVAL)\n+    else if ((fcode == P10_BUILTIN_VEC_XXEVAL)\n+\t    || (fcode == P10_BUILTIN_VXXPERMX))\n       {\n-\t/* Need to special case __builtin_vec_xxeval because this takes\n-\t   4 arguments, and the existing infrastructure handles no\n-\t   more than three.  */\n+\tsigned char op3_type;\n+\n+\t/* Need to special case P10_BUILTIN_VEC_XXEVAL and\n+\t   P10_BUILTIN_VXXPERMX because they take 4 arguments and the\n+\t   existing infrastructure only handles three.  */\n \tif (nargs != 4)\n \t  {\n-\t    error (\"builtin %qs requires 4 arguments\",\n-\t\t   \"__builtin_vec_xxeval\");\n+\t    const char *name = fcode == P10_BUILTIN_VEC_XXEVAL ?\n+\t      \"__builtin_vec_xxeval\":\"__builtin_vec_xxpermx\";\n+\n+\t    error (\"builtin %qs requires 4 arguments\", name);\n \t    return error_mark_node;\n \t  }\n+\n \tfor ( ; desc->code == fcode; desc++)\n \t  {\n+\t    if (fcode == P10_BUILTIN_VEC_XXEVAL)\n+\t      op3_type = desc->op3;\n+\t    else  /* P10_BUILTIN_VXXPERMX */\n+\t      op3_type = RS6000_BTI_V16QI;\n+\n \t    if (rs6000_builtin_type_compatible (types[0], desc->op1)\n \t\t&& rs6000_builtin_type_compatible (types[1], desc->op2)\n \t\t&& rs6000_builtin_type_compatible (types[2], desc->op3)\n+\t\t&& rs6000_builtin_type_compatible (types[2], op3_type)\n \t\t&& rs6000_builtin_type_compatible (types[3],\n \t\t\t\t\t\t   RS6000_BTI_UINTSI))\n \t      {"}, {"sha": "189497efb45bc1595ed575bae3b5b0f7a4f83125", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=5998f1bbeb336d0b9aee86726291269fd8bb6a66", "patch": "@@ -5569,6 +5569,39 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI },\n \n+  /* The overloaded XXPERMX definitions are handled specially because the\n+     fourth unsigned char operand is not encoded in this table.  */\n+  {  P10_BUILTIN_VEC_XXPERMX, P10_BUILTIN_VXXPERMX,\n+     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI,\n+     RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXPERMX, P10_BUILTIN_VXXPERMX,\n+     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXPERMX, P10_BUILTIN_VXXPERMX,\n+     RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI,\n+     RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXPERMX, P10_BUILTIN_VXXPERMX,\n+     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n+     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXPERMX, P10_BUILTIN_VXXPERMX,\n+     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI,\n+     RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXPERMX, P10_BUILTIN_VXXPERMX,\n+     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXPERMX, P10_BUILTIN_VXXPERMX,\n+     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI,\n+     RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXPERMX, P10_BUILTIN_VXXPERMX,\n+     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXPERMX, P10_BUILTIN_VXXPERMX,\n+     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF,\n+     RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXPERMX, P10_BUILTIN_VXXPERMX,\n+     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF,\n+     RS6000_BTI_unsigned_V16QI },\n+\n   { P10_BUILTIN_VEC_EXTRACTL, P10_BUILTIN_VEXTRACTBL,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI },\n@@ -5710,6 +5743,37 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P10_BUILTIN_VEC_XXSPLTI32DX, P10_BUILTIN_VXXSPLTI32DX_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_UINTQI, RS6000_BTI_float },\n \n+  {  P10_BUILTIN_VEC_XXBLEND, P10_BUILTIN_VXXBLEND_V16QI,\n+     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI,\n+     RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXBLEND, P10_BUILTIN_VXXBLEND_V16QI,\n+     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI },\n+  {  P10_BUILTIN_VEC_XXBLEND, P10_BUILTIN_VXXBLEND_V8HI,\n+     RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI,\n+     RS6000_BTI_unsigned_V8HI },\n+  {  P10_BUILTIN_VEC_XXBLEND, P10_BUILTIN_VXXBLEND_V8HI,\n+     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n+     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI },\n+  {  P10_BUILTIN_VEC_XXBLEND, P10_BUILTIN_VXXBLEND_V4SI,\n+     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI,\n+     RS6000_BTI_unsigned_V4SI },\n+  {  P10_BUILTIN_VEC_XXBLEND, P10_BUILTIN_VXXBLEND_V4SI,\n+     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI },\n+  {  P10_BUILTIN_VEC_XXBLEND, P10_BUILTIN_VXXBLEND_V2DI,\n+     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI,\n+     RS6000_BTI_unsigned_V2DI },\n+  {  P10_BUILTIN_VEC_XXBLEND, P10_BUILTIN_VXXBLEND_V2DI,\n+     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI },\n+  {  P10_BUILTIN_VEC_XXBLEND, P10_BUILTIN_VXXBLEND_V4SF,\n+     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF,\n+     RS6000_BTI_unsigned_V4SI },\n+  {  P10_BUILTIN_VEC_XXBLEND, P10_BUILTIN_VXXBLEND_V2DF,\n+     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF,\n+     RS6000_BTI_unsigned_V2DI },\n+\n   { P10_BUILTIN_VEC_SRDB, P10_BUILTIN_VSRDB_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_UINTQI },\n@@ -10162,6 +10226,19 @@ rs6000_expand_quaternop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  return CONST0_RTX (tmode);\n \t}\n     }\n+\n+  else if (icode == CODE_FOR_xxpermx)\n+    {\n+      /* Only allow 3-bit unsigned literals.  */\n+      STRIP_NOPS (arg3);\n+      if (TREE_CODE (arg3) != INTEGER_CST\n+\t  || TREE_INT_CST_LOW (arg3) & ~0x7)\n+\t{\n+\t  error (\"argument 4 must be a 3-bit unsigned literal\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+    }\n+\n   else if (icode == CODE_FOR_vreplace_elt_v4si\n \t   || icode == CODE_FOR_vreplace_elt_v4sf)\n    {\n@@ -13847,12 +13924,17 @@ builtin_quaternary_function_type (machine_mode mode_ret,\n   tree function_type = NULL;\n \n   static tree v2udi_type = builtin_mode_to_type[V2DImode][1];\n+  static tree v16uqi_type = builtin_mode_to_type[V16QImode][1];\n   static tree uchar_type = builtin_mode_to_type[QImode][1];\n \n   static tree xxeval_type =\n     build_function_type_list (v2udi_type, v2udi_type, v2udi_type,\n \t\t\t      v2udi_type, uchar_type, NULL_TREE);\n \n+  static tree xxpermx_type =\n+    build_function_type_list (v2udi_type, v2udi_type, v2udi_type,\n+\t\t\t      v16uqi_type, uchar_type, NULL_TREE);\n+\n   switch (builtin) {\n \n   case P10_BUILTIN_XXEVAL:\n@@ -13864,6 +13946,15 @@ builtin_quaternary_function_type (machine_mode mode_ret,\n     function_type = xxeval_type;\n     break;\n \n+  case P10_BUILTIN_VXXPERMX:\n+    gcc_assert ((mode_ret == V2DImode)\n+\t\t&& (mode_arg0 == V2DImode)\n+\t\t&& (mode_arg1 == V2DImode)\n+\t\t&& (mode_arg2 == V16QImode)\n+\t\t&& (mode_arg3 == QImode));\n+    function_type = xxpermx_type;\n+    break;\n+\n   default:\n     /* A case for each quaternary built-in must be provided above.  */\n     gcc_unreachable ();\n@@ -14059,6 +14150,10 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case P10_BUILTIN_VREPLACE_ELT_UV2DI:\n     case P10_BUILTIN_VREPLACE_UN_UV4SI:\n     case P10_BUILTIN_VREPLACE_UN_UV2DI:\n+    case P10_BUILTIN_VXXBLEND_V16QI:\n+    case P10_BUILTIN_VXXBLEND_V8HI:\n+    case P10_BUILTIN_VXXBLEND_V4SI:\n+    case P10_BUILTIN_VXXBLEND_V2DI:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;"}, {"sha": "37a675aa2a59b385cb92b7b685423397aa0d9798", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5998f1bbeb336d0b9aee86726291269fd8bb6a66", "patch": "@@ -21228,6 +21228,69 @@ result.  The other words of argument 1 are unchanged.\n \n @findex vec_splati_ins\n \n+Vector Blend Variable\n+\n+@smallexample\n+@exdent vector signed char vec_blendv (vector signed char, vector signed char,\n+vector unsigned char);\n+@exdent vector unsigned char vec_blendv (vector unsigned char,\n+vector unsigned char, vector unsigned char);\n+@exdent vector signed short vec_blendv (vector signed short,\n+vector signed short, vector unsigned short);\n+@exdent vector unsigned short vec_blendv (vector unsigned short,\n+vector unsigned short, vector unsigned short);\n+@exdent vector signed int vec_blendv (vector signed int, vector signed int,\n+vector unsigned int);\n+@exdent vector unsigned int vec_blendv (vector unsigned int,\n+vector unsigned int, vector unsigned int);\n+@exdent vector signed long long vec_blendv (vector signed long long,\n+vector signed long long, vector unsigned long long);\n+@exdent vector unsigned long long vec_blendv (vector unsigned long long,\n+vector unsigned long long, vector unsigned long long);\n+@exdent vector float vec_blendv (vector float, vector float,\n+vector unsigned int);\n+@exdent vector double vec_blendv (vector double, vector double,\n+vector unsigned long long);\n+@end smallexample\n+\n+Blend the first and second argument vectors according to the sign bits of the\n+corresponding elements of the third argument vector.  This is similar to the\n+@code{vsel} and @code{xxsel} instructions but for bigger elements.\n+\n+@findex vec_blendv\n+\n+Vector Permute Extended\n+\n+@smallexample\n+@exdent vector signed char vec_permx (vector signed char, vector signed char,\n+vector unsigned char, const int);\n+@exdent vector unsigned char vec_permx (vector unsigned char,\n+vector unsigned char, vector unsigned char, const int);\n+@exdent vector signed short vec_permx (vector signed short,\n+vector signed short, vector unsigned char, const int);\n+@exdent vector unsigned short vec_permx (vector unsigned short,\n+vector unsigned short, vector unsigned char, const int);\n+@exdent vector signed int vec_permx (vector signed int, vector signed int,\n+vector unsigned char, const int);\n+@exdent vector unsigned int vec_permx (vector unsigned int,\n+vector unsigned int, vector unsigned char, const int);\n+@exdent vector signed long long vec_permx (vector signed long long,\n+vector signed long long, vector unsigned char, const int);\n+@exdent vector unsigned long long vec_permx (vector unsigned long long,\n+vector unsigned long long, vector unsigned char, const int);\n+@exdent vector float (vector float, vector float, vector unsigned char,\n+const int);\n+@exdent vector double (vector double, vector double, vector unsigned char,\n+const int);\n+@end smallexample\n+\n+Perform a partial permute of the first two arguments, which form a 32-byte\n+section of an emulated vector up to 256 bytes wide, using the partial permute\n+control vector in the third argument.  The fourth argument (constrained to\n+values of 0-7) identifies which 32-byte section of the emulated vector is\n+contained in the first two arguments.\n+@findex vec_permx\n+\n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_pext (vector unsigned long long int, vector unsigned long long int)"}, {"sha": "0c3d47234eda3c2044367868dcca36fee7c3b5e4", "filename": "gcc/testsuite/gcc.target/powerpc/vec-blend-runnable.c", "status": "added", "additions": 276, "deletions": 0, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-blend-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-blend-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-blend-runnable.c?ref=5998f1bbeb336d0b9aee86726291269fd8bb6a66", "patch": "@@ -0,0 +1,276 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10\" } */\n+#include <altivec.h>\n+\n+#define DEBUG 0\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  int i;\n+  vector signed char vsrc_a_char, vsrc_b_char;\n+  vector signed char vresult_char;\n+  vector signed char expected_vresult_char;\n+\n+  vector unsigned char vsrc_a_uchar, vsrc_b_uchar, vsrc_c_uchar;\n+  vector unsigned char vresult_uchar;\n+  vector unsigned char expected_vresult_uchar;\n+\n+  vector signed short vsrc_a_short, vsrc_b_short, vsrc_c_short;\n+  vector signed short vresult_short;\n+  vector signed short expected_vresult_short;\n+\n+  vector unsigned short vsrc_a_ushort, vsrc_b_ushort, vsrc_c_ushort;\n+  vector unsigned short vresult_ushort;\n+  vector unsigned short expected_vresult_ushort;\n+\n+  vector int vsrc_a_int, vsrc_b_int, vsrc_c_int;\n+  vector int vresult_int;\n+  vector int expected_vresult_int;\n+\n+  vector unsigned int vsrc_a_uint, vsrc_b_uint, vsrc_c_uint;\n+  vector unsigned int vresult_uint;\n+  vector unsigned int expected_vresult_uint;\n+\n+  vector long long int vsrc_a_ll, vsrc_b_ll, vsrc_c_ll;\n+  vector long long int vresult_ll;\n+  vector long long int expected_vresult_ll;\n+\n+  vector unsigned long long int vsrc_a_ull,  vsrc_b_ull,  vsrc_c_ull;\n+  vector unsigned long long int vresult_ull;\n+  vector unsigned long long int expected_vresult_ull;\n+\n+  vector float vresult_f;\n+  vector float expected_vresult_f;\n+  vector float vsrc_a_f, vsrc_b_f;\n+\n+  vector double vsrc_a_d, vsrc_b_d;\n+  vector double vresult_d;\n+  vector double expected_vresult_d;\n+ \n+  /* Vector blend */\n+  vsrc_c_uchar = (vector unsigned char) { 0, 0x80, 0, 0x80, 0, 0x80, 0, 0x80,\n+\t\t\t\t\t  0, 0x80, 0, 0x80, 0, 0x80, 0, 0x80 };\n+\n+  vsrc_a_char = (vector signed char) { -1, 3, 5, 7, 9, 11, 13, 15,\n+                                       17, 19, 21, 23, 25, 27, 29 };\n+  vsrc_b_char = (vector signed char) { 2, -4, 6, 8, 10, 12, 14, 16,\n+\t\t\t\t       18, 20, 22, 24, 26, 28, 30, 32 };\n+  vsrc_c_uchar = (vector unsigned char) { 0, 0x80, 0, 0x80, 0, 0x80, 0, 0x80,\n+\t\t\t\t\t  0, 0x80, 0, 0x80, 0, 0x80, 0, 0x80 };\n+  vresult_char = (vector signed char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_char = (vector signed char) { -1, -4, 5, 8,\n+\t\t\t\t\t\t 9, 12, 13, 16,\n+\t\t\t\t\t\t 17, 20, 21, 24,\n+\t\t\t\t\t\t 25, 28, 29, 32 };\n+\t\t\t\t\t\t \n+  vresult_char = vec_blendv (vsrc_a_char, vsrc_b_char, vsrc_c_uchar);\n+\n+  if (!vec_all_eq (vresult_char,  expected_vresult_char)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_blendv (vsrc_a_char, vsrc_b_char, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_char[%d] = %d, expected_vresult_char[%d] = %d\\n\",\n+\t     i, vresult_char[i], i, expected_vresult_char[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_uchar = (vector unsigned char) { 1, 3, 5, 7, 9, 11, 13, 15,\n+\t\t\t\t\t  17, 19, 21, 23, 25, 27, 29 };\n+  vsrc_b_uchar = (vector unsigned char) { 2, 4, 6, 8, 10, 12, 14, 16,\n+\t\t\t\t\t  18, 20, 22, 24, 26, 28, 30, 32 };\n+  vsrc_c_uchar = (vector unsigned char) { 0, 0x80, 0, 0x80, 0, 0x80, 0, 0x80,\n+\t\t\t\t\t  0, 0x80, 0, 0x80, 0, 0x80, 0, 0x80 };\n+  vresult_uchar = (vector unsigned char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_uchar = (vector unsigned char) { 1, 4, 5, 8,\n+\t\t\t\t\t\t    9, 12, 13, 16,\n+\t\t\t\t\t\t    17, 20, 21, 24,\n+\t\t\t\t\t\t    25, 28, 29, 32 };\n+\t\t\t\t\t\t \n+  vresult_uchar = vec_blendv (vsrc_a_uchar, vsrc_b_uchar, vsrc_c_uchar);\n+\n+  if (!vec_all_eq (vresult_uchar,  expected_vresult_uchar)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_blendv (vsrc_a_uchar, vsrc_b_uchar, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_uchar[%d] = %d, expected_vresult_uchar[%d] = %d\\n\",\n+\t     i, vresult_uchar[i], i, expected_vresult_uchar[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_short = (vector signed short) { -1, 3, 5, 7, 9, 11, 13, 15 };\n+  vsrc_b_short = (vector signed short) { 2, -4, 6, 8, 10, 12, 14, 16 };\n+  vsrc_c_ushort = (vector unsigned short) { 0, 0x8000, 0, 0x8000,\n+\t\t\t\t\t    0, 0x8000, 0, 0x8000 };\n+  vresult_short = (vector signed short) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_short = (vector signed short) { -1, -4, 5, 8,\n+\t\t\t\t\t\t   9, 12, 13, 16 };\n+\n+  vresult_short = vec_blendv (vsrc_a_short, vsrc_b_short, vsrc_c_ushort);\n+\n+  if (!vec_all_eq (vresult_short,  expected_vresult_short)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_blendv (vsrc_a_short, vsrc_b_short, vsrc_c_ushort)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_short[%d] = %d, expected_vresult_short[%d] = %d\\n\",\n+\t     i, vresult_short[i], i, expected_vresult_short[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_ushort = (vector unsigned short) { 1, 3, 5, 7, 9, 11, 13, 15 };\n+  vsrc_b_ushort = (vector unsigned short) { 2, 4, 6, 8, 10, 12, 14, 16 };\n+  vsrc_c_ushort = (vector unsigned short) { 0, 0x8000, 0, 0x8000,\n+\t\t\t\t\t    0, 0x8000, 0, 0x8000 };\n+  vresult_ushort = (vector unsigned short) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_ushort = (vector unsigned short) { 1, 4, 5, 8,\n+\t\t\t\t\t\t      9, 12, 13, 16 };\n+\t\t\t\t\t\t \n+  vresult_ushort = vec_blendv (vsrc_a_ushort, vsrc_b_ushort, vsrc_c_ushort);\n+\n+  if (!vec_all_eq (vresult_ushort,  expected_vresult_ushort)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_blendv (vsrc_a_ushort, vsrc_b_ushort, vsrc_c_ushort)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_ushort[%d] = %d, expected_vresult_ushort[%d] = %d\\n\",\n+\t     i, vresult_ushort[i], i, expected_vresult_ushort[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_int = (vector signed int) { -1, -3, -5, -7 };\n+  vsrc_b_int = (vector signed int) { 2, 4, 6, 8 };\n+  vsrc_c_uint = (vector unsigned int) { 0, 0x80000000, 0, 0x80000000};\n+  vresult_int = (vector signed int) { 0, 0, 0, 0 };\n+  expected_vresult_int = (vector signed int) { -1, 4, -5, 8 };\n+\t\t\t\t\t\t \n+  vresult_int = vec_blendv (vsrc_a_int, vsrc_b_int, vsrc_c_uint);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_blendv (vsrc_a_int, vsrc_b_int, vsrc_c_uint)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_uint = (vector unsigned int) { 1, 3, 5, 7 };\n+  vsrc_b_uint = (vector unsigned int) { 2, 4, 6, 8 };\n+  vsrc_c_uint = (vector unsigned int) { 0, 0x80000000, 0, 0x80000000 };\n+  vresult_uint = (vector unsigned int) { 0, 0, 0, 0 };\n+  expected_vresult_uint = (vector unsigned int) { 1, 4, 5, 8 };\n+\t\t\t\t\t\t \n+  vresult_uint = vec_blendv (vsrc_a_uint, vsrc_b_uint, vsrc_c_uint);\n+\n+  if (!vec_all_eq (vresult_uint,  expected_vresult_uint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_blendv (vsrc_a_uint, vsrc_b_uint, vsrc_c_uint)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_uint[%d] = %d, expected_vresult_uint[%d] = %d\\n\",\n+\t     i, vresult_uint[i], i, expected_vresult_uint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_ll = (vector signed long long int) { -1, -3 };\n+  vsrc_b_ll = (vector signed long long int) { 2, 4,  };\n+  vsrc_c_ull = (vector unsigned long long int) { 0, 0x8000000000000000ULL };\n+  vresult_ll = (vector signed long long int) { 0, 0 };\n+  expected_vresult_ll = (vector signed long long int) { -1, 4 };\n+\t\t\t\t\t\t \n+  vresult_ll = vec_blendv (vsrc_a_ll, vsrc_b_ll, vsrc_c_ull);\n+\n+  if (!vec_all_eq (vresult_ll,  expected_vresult_ll)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_blendv (vsrc_a_ll, vsrc_b_ll, vsrc_c_ull)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_ll[%d] = %d, expected_vresult_ll[%d] = %d\\n\",\n+\t     i, vresult_ll[i], i, expected_vresult_ll[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_ull = (vector unsigned long long) { 1, 3 };\n+  vsrc_b_ull = (vector unsigned long long) { 2, 4 };\n+  vsrc_c_ull = (vector unsigned long long int) { 0, 0x8000000000000000ULL };\n+  vresult_ull = (vector unsigned long long) { 0, 0 };\n+  expected_vresult_ull = (vector unsigned long long) { 1, 4 };\n+\t\t\t\t\t\t \n+  vresult_ull = vec_blendv (vsrc_a_ull, vsrc_b_ull, vsrc_c_ull);\n+\n+  if (!vec_all_eq (vresult_ull,  expected_vresult_ull)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_blendv (vsrc_a_ull, vsrc_b_ull, vsrc_c_ull)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_ull[%d] = %d, expected_vresult_ull[%d] = %d\\n\",\n+\t     i, vresult_ull[i], i, expected_vresult_ull[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_f = (vector float) { -1.0, -3.0, -5.0, -7.0 };\n+  vsrc_b_f = (vector float) { 2.0, 4.0, 6.0, 8.0 };\n+  vsrc_c_uint = (vector unsigned int) { 0, 0x80000000, 0, 0x80000000};\n+  vresult_f = (vector float) { 0, 0, 0, 0 };\n+  expected_vresult_f = (vector float) { -1, 4, -5, 8 };\n+\t\t\t\t\t\t \n+  vresult_f = vec_blendv (vsrc_a_f, vsrc_b_f, vsrc_c_uint);\n+\n+  if (!vec_all_eq (vresult_f,  expected_vresult_f)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_blendv (vsrc_a_f, vsrc_b_f, vsrc_c_uint)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_f[%d] = %d, expected_vresult_f[%d] = %d\\n\",\n+\t     i, vresult_f[i], i, expected_vresult_f[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_d = (vector double) { -1.0, -3.0 };\n+  vsrc_b_d = (vector double) { 2.0, 4.0 };\n+  vsrc_c_ull = (vector unsigned long long int) { 0, 0x8000000000000000ULL };\n+  vresult_d = (vector double) { 0, 0 };\n+  expected_vresult_d = (vector double) { -1, 4 };\n+\t\t\t\t\t\t \n+  vresult_d = vec_blendv (vsrc_a_d, vsrc_b_d, vsrc_c_ull);\n+\n+  if (!vec_all_eq (vresult_d,  expected_vresult_d)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_blendv (vsrc_a_d, vsrc_b_d, vsrc_c_ull)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_d[%d] = %d, expected_vresult_d[%d] = %d\\n\",\n+\t     i, vresult_d[i], i, expected_vresult_d[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxxblendvb\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxxblendvh\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxxblendvw\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mxxblendvd\\M} 3 } } */"}, {"sha": "c2dcd48b4c57748d49ad0f4c9f4854a83fadb145", "filename": "gcc/testsuite/gcc.target/powerpc/vec-permute-ext-runnable.c", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-permute-ext-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5998f1bbeb336d0b9aee86726291269fd8bb6a66/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-permute-ext-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-permute-ext-runnable.c?ref=5998f1bbeb336d0b9aee86726291269fd8bb6a66", "patch": "@@ -0,0 +1,294 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10\" } */\n+#include <altivec.h>\n+\n+#define DEBUG 0\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  int i;\n+  vector signed char vsrc_a_char, vsrc_b_char;\n+  vector signed char vresult_char;\n+  vector signed char expected_vresult_char;\n+\n+  vector unsigned char vsrc_a_uchar, vsrc_b_uchar, vsrc_c_uchar;\n+  vector unsigned char vresult_uchar;\n+  vector unsigned char expected_vresult_uchar;\n+\n+  vector signed short vsrc_a_short, vsrc_b_short, vsrc_c_short;\n+  vector signed short vresult_short;\n+  vector signed short expected_vresult_short;\n+\n+  vector unsigned short vsrc_a_ushort, vsrc_b_ushort, vsrc_c_ushort;\n+  vector unsigned short vresult_ushort;\n+  vector unsigned short expected_vresult_ushort;\n+\n+  vector int vsrc_a_int, vsrc_b_int, vsrc_c_int;\n+  vector int vresult_int;\n+  vector int expected_vresult_int;\n+\n+  vector unsigned int vsrc_a_uint, vsrc_b_uint, vsrc_c_uint;\n+  vector unsigned int vresult_uint;\n+  vector unsigned int expected_vresult_uint;\n+\n+  vector long long int vsrc_a_ll, vsrc_b_ll, vsrc_c_ll;\n+  vector long long int vresult_ll;\n+  vector long long int expected_vresult_ll;\n+\n+  vector unsigned long long int vsrc_a_ull,  vsrc_b_ull,  vsrc_c_ull;\n+  vector unsigned long long int vresult_ull;\n+  vector unsigned long long int expected_vresult_ull;\n+\n+  vector float vresult_f;\n+  vector float expected_vresult_f;\n+  vector float vsrc_a_f, vsrc_b_f;\n+\n+  vector double vsrc_a_d, vsrc_b_d;\n+  vector double vresult_d;\n+  vector double expected_vresult_d;\n+ \n+  /* Vector permx */\n+  vsrc_a_char = (vector signed char) { -1, 3, 5, 7, 9, 11, 13, 15,\n+                                       17, 19, 21, 23, 25, 27, 29 };\n+  vsrc_b_char = (vector signed char) { 2, -4, 6, 8, 10, 12, 14, 16,\n+\t\t\t\t       18, 20, 22, 24, 26, 28, 30, 32 };\n+  vsrc_c_uchar = (vector unsigned char) { 0x0, 0x7, 0, 0x5, 0, 0x3, 0, 0x1,\n+\t\t\t\t\t  0, 0x2, 0, 0x4, 0, 0x6, 0, 0x0 };\n+  vresult_char = (vector signed char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_char = (vector signed char) { -1, 15, -1, 11,\n+\t\t\t\t\t\t -1, 7, -1, 3,\n+\t\t\t\t\t\t -1, 5, -1, 9,\n+\t\t\t\t\t\t -1, 13, -1, -1 };\n+\t\t\t\t\t\t \n+  vresult_char = vec_permx (vsrc_a_char, vsrc_b_char, vsrc_c_uchar, 0);\n+\n+  if (!vec_all_eq (vresult_char,  expected_vresult_char)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_permx (vsrc_a_char, vsrc_b_char, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_char[%d] = %d, expected_vresult_char[%d] = %d\\n\",\n+\t     i, vresult_char[i], i, expected_vresult_char[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_uchar = (vector unsigned char) { 1, 3, 5, 7, 9, 11, 13, 15,\n+\t\t\t\t\t  17, 19, 21, 23, 25, 27, 29 };\n+  vsrc_b_uchar = (vector unsigned char) { 2, 4, 6, 8, 10, 12, 14, 16,\n+\t\t\t\t\t  18, 20, 22, 24, 26, 28, 30, 32 };\n+  vsrc_c_uchar = (vector unsigned char) { 0x0, 0x7, 0, 0x5, 0, 0x3, 0, 0x1,\n+\t\t\t\t\t  0, 0x2, 0, 0x4, 0, 0x6, 0, 0x0 };\n+  vresult_uchar = (vector unsigned char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_uchar = (vector unsigned char) { 1, 15, 1, 11,\n+\t\t\t\t\t\t    1, 7, 1, 3,\n+\t\t\t\t\t\t    1, 5, 1, 9,\n+\t\t\t\t\t\t    1, 13, 1, 1 };\n+\t\t\t\t\t\t \n+  vresult_uchar = vec_permx (vsrc_a_uchar, vsrc_b_uchar, vsrc_c_uchar, 0);\n+\n+  if (!vec_all_eq (vresult_uchar,  expected_vresult_uchar)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_permx (vsrc_a_uchar, vsrc_b_uchar, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_uchar[%d] = %d, expected_vresult_uchar[%d] = %d\\n\",\n+\t     i, vresult_uchar[i], i, expected_vresult_uchar[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_short = (vector signed short int) { 1, -3, 5, 7, 9, 11, 13, 15 };\n+  vsrc_b_short = (vector signed short int) { 2, 4, -6, 8, 10, 12, 14, 16 };\n+  vsrc_c_uchar = (vector unsigned char) { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t  0x4, 0x5, 0x2, 0x3,\n+\t\t\t\t\t  0x8, 0x9, 0x2, 0x3,\n+\t\t\t\t\t  0x1E, 0x1F, 0x2, 0x3 };\n+  vresult_short = (vector signed short int) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_short = (vector signed short int) { 1, -3, 5, -3,\n+\t\t\t\t\t\t       9, -3, 16, -3 };\n+\t\t\t\t\t\t \n+  vresult_short = vec_permx (vsrc_a_short, vsrc_b_short, vsrc_c_uchar, 0);\n+\n+  if (!vec_all_eq (vresult_short,  expected_vresult_short)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_permx (vsrc_a_short, vsrc_b_short, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_short[%d] = %d, expected_vresult_short[%d] = %d\\n\",\n+\t     i, vresult_short[i], i, expected_vresult_short[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_ushort = (vector unsigned short int) { 1, 3, 5, 7, 9, 11, 13, 15 };\n+  vsrc_b_ushort = (vector unsigned short int) { 2, 4, 6, 8, 10, 12, 14, 16 };\n+  vsrc_c_uchar = (vector unsigned char) { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t  0x4, 0x5, 0x2, 0x3,\n+\t\t\t\t\t  0x8, 0x9, 0x2, 0x3,\n+\t\t\t\t\t  0x1E, 0x1F, 0x2, 0x3 };\n+  vresult_ushort = (vector unsigned short int) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_ushort = (vector unsigned short int) { 1, 3, 5, 3,\n+\t\t\t\t\t\t\t  9, 3, 16, 3 };\n+\t\t\t\t\t\t \n+  vresult_ushort = vec_permx (vsrc_a_ushort, vsrc_b_ushort, vsrc_c_uchar, 0);\n+\n+  if (!vec_all_eq (vresult_ushort,  expected_vresult_ushort)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_permx (vsrc_a_ushort, vsrc_b_ushort, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_ushort[%d] = %d, expected_vresult_ushort[%d] = %d\\n\",\n+\t     i, vresult_ushort[i], i, expected_vresult_ushort[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_int = (vector signed int) { 1, -3, 5, 7 };\n+  vsrc_b_int = (vector signed int) { 2, 4, -6, 8 };\n+  vsrc_c_uchar = (vector unsigned char) { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t  0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t  0x18, 0x19, 0x1A, 0x1B,\n+\t\t\t\t\t  0x1C, 0x1D, 0x1E, 0x1F };\n+  vresult_int = (vector signed int) { 0, 0, 0, 0 };\n+  expected_vresult_int = (vector signed int) { 1, -3, -6, 8 };\n+\t\t\t\t\t\t \n+  vresult_int = vec_permx (vsrc_a_int, vsrc_b_int, vsrc_c_uchar, 0);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_permx (vsrc_a_int, vsrc_b_int, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_uint = (vector unsigned int) { 1, 3, 5, 7 };\n+  vsrc_b_uint = (vector unsigned int) { 10, 12, 14, 16 };\n+  vsrc_c_uchar = (vector unsigned char) { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t  0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t  0x18, 0x19, 0x1A, 0x1B,\n+\t\t\t\t\t  0x1C, 0x1D, 0x1E, 0x1F };\n+  vresult_uint = (vector unsigned int) { 0, 0, 0, 0 };\n+  expected_vresult_uint = (vector unsigned int) { 1, 3, 14, 16 };\n+\t\t\t\t\t\t \n+  vresult_uint = vec_permx (vsrc_a_uint, vsrc_b_uint, vsrc_c_uchar, 0);\n+\n+  if (!vec_all_eq (vresult_uint,  expected_vresult_uint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_permx (vsrc_a_uint, vsrc_b_uint, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_uint[%d] = %d, expected_vresult_uint[%d] = %d\\n\",\n+\t     i, vresult_uint[i], i, expected_vresult_uint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_ll = (vector signed long long int) { 1, -3 };\n+  vsrc_b_ll = (vector signed long long int) { 2, -4 };\n+  vsrc_c_uchar = (vector unsigned char) { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t  0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t  0x18, 0x19, 0x1A, 0x1B,\n+\t\t\t\t\t  0x1C, 0x1D, 0x1E, 0x1F };\n+  vresult_ll = (vector signed long long int) { 0, 0};\n+  expected_vresult_ll = (vector signed long long int) { 1, -4 };\n+\t\t\t\t\t\t \n+  vresult_ll = vec_permx (vsrc_a_ll, vsrc_b_ll, vsrc_c_uchar, 0);\n+\n+  if (!vec_all_eq (vresult_ll,  expected_vresult_ll)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_permx (vsrc_a_ll, vsrc_b_ll, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_ll[%d] = %lld, expected_vresult_ll[%d] = %lld\\n\",\n+\t     i, vresult_ll[i], i, expected_vresult_ll[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_ull = (vector unsigned long long int) { 1, 3 };\n+  vsrc_b_ull = (vector unsigned long long int) { 10, 12 };\n+  vsrc_c_uchar = (vector unsigned char) { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t  0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t  0x18, 0x19, 0x1A, 0x1B,\n+\t\t\t\t\t  0x1C, 0x1D, 0x1E, 0x1F };\n+  vresult_ull = (vector unsigned long long int) { 0, 0 };\n+  expected_vresult_ull = (vector unsigned long long int) { 1, 12 };\n+\t\t\t\t\t\t \n+  vresult_ull = vec_permx (vsrc_a_ull, vsrc_b_ull, vsrc_c_uchar, 0);\n+\n+  if (!vec_all_eq (vresult_ull,  expected_vresult_ull)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_permx (vsrc_a_ull, vsrc_b_ull, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_ull[%d] = %d, expected_vresult_ull[%d] = %d\\n\",\n+\t     i, vresult_ull[i], i, expected_vresult_ull[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_f = (vector float) { -3.0, 5.0, 7.0, 9.0 };\n+  vsrc_b_f = (vector float) { 2.0,  4.0, 6.0, 8.0  };\n+  vsrc_c_uchar = (vector unsigned char) { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t  0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t  0x18, 0x19, 0x1A, 0x1B,\n+\t\t\t\t\t  0x1C, 0x1D, 0x1E, 0x1F };\n+  vresult_f = (vector float) { 0.0, 0.0, 0.0, 0.0 };\n+  expected_vresult_f = (vector float) { -3.0, 5.0, 6.0, 8.0 };\n+\t\t\t\t\t\t \n+  vresult_f = vec_permx (vsrc_a_f, vsrc_b_f, vsrc_c_uchar, 0);\n+\n+  if (!vec_all_eq (vresult_f,  expected_vresult_f)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_permx (vsrc_a_f, vsrc_b_f, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_f[%d] = %f, expected_vresult_f[%d] = %f\\n\",\n+\t     i, vresult_f[i], i, expected_vresult_f[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vsrc_a_d = (vector double) { 1.0, -3.0 };\n+  vsrc_b_d = (vector double) { 2.0, -4.0 };\n+  vsrc_c_uchar = (vector unsigned char) { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t  0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t  0x1A, 0x1B, 0x1C, 0x1B,\n+\t\t\t\t\t  0x1C, 0x1D, 0x1E, 0x1F };\n+  vresult_d = (vector double) { 0.0, 0.0 };\n+  expected_vresult_d = (vector double) { 1.0, -4.0 };\n+\t\t\t\t\t\t \n+  vresult_d = vec_permx (vsrc_a_d, vsrc_b_d, vsrc_c_uchar, 0);\n+\n+  if (!vec_all_eq (vresult_d,  expected_vresult_d)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_permx (vsrc_a_d, vsrc_b_d, vsrc_c_uchar)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_d[%d] = %f, expected_vresult_d[%d] = %f\\n\",\n+\t     i, vresult_d[i], i, expected_vresult_d[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxxpermx\\M} 10 } } */\n+\n+"}]}