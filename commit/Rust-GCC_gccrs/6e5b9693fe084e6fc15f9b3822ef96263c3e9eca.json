{"sha": "6e5b9693fe084e6fc15f9b3822ef96263c3e9eca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1Yjk2OTNmZTA4NGU2ZmMxNWY5YjM4MjJlZjk2MjYzYzNlOWVjYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-19T17:34:25Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-19T17:34:25Z"}, "message": "builtins.c (fold_builtin_memcpy): Take decomposed arguments of CALL_EXPR.\n\n\t* builtins.c (fold_builtin_memcpy): Take decomposed arguments\n\tof CALL_EXPR.\n\t(expand_builtin_memcpy, fold_builtin_1): Update calls to\n\tfold_builtin_memcpy.\n\nFrom-SVN: r96735", "tree": {"sha": "b0c700d3dec241bc8809a97e022a3d69affc3638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0c700d3dec241bc8809a97e022a3d69affc3638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e5b9693fe084e6fc15f9b3822ef96263c3e9eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5b9693fe084e6fc15f9b3822ef96263c3e9eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5b9693fe084e6fc15f9b3822ef96263c3e9eca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5b9693fe084e6fc15f9b3822ef96263c3e9eca/comments", "author": null, "committer": null, "parents": [{"sha": "6c6d9d33ef1cfdc73d836b4acb70210a824b035a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6d9d33ef1cfdc73d836b4acb70210a824b035a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6d9d33ef1cfdc73d836b4acb70210a824b035a"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "5f2f1096f6797df48c2107314f3a27827578c2f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5b9693fe084e6fc15f9b3822ef96263c3e9eca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5b9693fe084e6fc15f9b3822ef96263c3e9eca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e5b9693fe084e6fc15f9b3822ef96263c3e9eca", "patch": "@@ -1,3 +1,10 @@\n+2005-03-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* builtins.c (fold_builtin_memcpy): Take decomposed arguments\n+\tof CALL_EXPR.\n+\t(expand_builtin_memcpy, fold_builtin_1): Update calls to\n+\tfold_builtin_memcpy.\n+\n 2005-03-19  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR middle-end/20493"}, {"sha": "98a84f1ef3af9cdfc8369bc16b9b263063b75a3f", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5b9693fe084e6fc15f9b3822ef96263c3e9eca/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5b9693fe084e6fc15f9b3822ef96263c3e9eca/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6e5b9693fe084e6fc15f9b3822ef96263c3e9eca", "patch": "@@ -162,7 +162,7 @@ static tree fold_builtin_floor (tree);\n static tree fold_builtin_ceil (tree);\n static tree fold_builtin_round (tree);\n static tree fold_builtin_bitop (tree, tree);\n-static tree fold_builtin_memcpy (tree);\n+static tree fold_builtin_memcpy (tree, tree);\n static tree fold_builtin_mempcpy (tree, tree, int);\n static tree fold_builtin_memmove (tree, tree);\n static tree fold_builtin_strchr (tree, tree);\n@@ -2623,6 +2623,7 @@ builtin_memcpy_read_str (void *data, HOST_WIDE_INT offset,\n static rtx\n expand_builtin_memcpy (tree exp, rtx target, enum machine_mode mode)\n {\n+  tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   if (!validate_arglist (arglist,\n \t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n@@ -2637,7 +2638,7 @@ expand_builtin_memcpy (tree exp, rtx target, enum machine_mode mode)\n       unsigned int dest_align\n \t= get_pointer_alignment (dest, BIGGEST_ALIGNMENT);\n       rtx dest_mem, src_mem, dest_addr, len_rtx;\n-      tree result = fold_builtin_memcpy (exp);\n+      tree result = fold_builtin_memcpy (fndecl, arglist);\n \n       if (result)\n \treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n@@ -7162,10 +7163,8 @@ fold_builtin_exponent (tree fndecl, tree arglist,\n    NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_memcpy (tree exp)\n+fold_builtin_memcpy (tree fndecl, tree arglist)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree dest, src, len;\n \n   if (!validate_arglist (arglist,\n@@ -8235,7 +8234,7 @@ fold_builtin_1 (tree exp, bool ignore)\n       return fold_builtin_bitop (fndecl, arglist);\n \n     case BUILT_IN_MEMCPY:\n-      return fold_builtin_memcpy (exp);\n+      return fold_builtin_memcpy (fndecl, arglist);\n \n     case BUILT_IN_MEMPCPY:\n       return fold_builtin_mempcpy (arglist, type, /*endp=*/1);"}]}