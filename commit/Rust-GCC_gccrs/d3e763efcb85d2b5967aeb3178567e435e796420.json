{"sha": "d3e763efcb85d2b5967aeb3178567e435e796420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNlNzYzZWZjYjg1ZDJiNTk2N2FlYjMxNzg1NjdlNDM1ZTc5NjQyMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-11-25T06:56:57Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-11-25T06:56:57Z"}, "message": "changelog: fix parsing of a revert commit\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_commit.py: Use revert_regex instead\n\tof string prefix.  Convert sets to literals.", "tree": {"sha": "3155736bc22ba8e2ead857b2090b68269f322d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3155736bc22ba8e2ead857b2090b68269f322d8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3e763efcb85d2b5967aeb3178567e435e796420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e763efcb85d2b5967aeb3178567e435e796420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3e763efcb85d2b5967aeb3178567e435e796420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e763efcb85d2b5967aeb3178567e435e796420/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3313a2214a6253672ab4fa37a2dcf57fd0f8dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3313a2214a6253672ab4fa37a2dcf57fd0f8dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3313a2214a6253672ab4fa37a2dcf57fd0f8dce"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "5f856660bb3f9e2f17592aa3f6e21d8cb46f546a", "filename": "contrib/gcc-changelog/git_commit.py", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e763efcb85d2b5967aeb3178567e435e796420/contrib%2Fgcc-changelog%2Fgit_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e763efcb85d2b5967aeb3178567e435e796420/contrib%2Fgcc-changelog%2Fgit_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_commit.py?ref=d3e763efcb85d2b5967aeb3178567e435e796420", "patch": "@@ -19,7 +19,7 @@\n import os\n import re\n \n-changelog_locations = set([\n+changelog_locations = {\n     'config',\n     'contrib',\n     'contrib/header-tools',\n@@ -72,9 +72,9 @@\n     'libvtv',\n     'lto-plugin',\n     'maintainer-scripts',\n-    'zlib'])\n+    'zlib'}\n \n-bug_components = set([\n+bug_components = {\n     'ada',\n     'analyzer',\n     'boehm-gc',\n@@ -123,9 +123,9 @@\n     'testsuite',\n     'translation',\n     'tree-optimization',\n-    'web'])\n+    'web'}\n \n-ignored_prefixes = [\n+ignored_prefixes = {\n     'gcc/d/dmd/',\n     'gcc/go/gofrontend/',\n     'gcc/testsuite/gdc.test/',\n@@ -134,18 +134,18 @@\n     'libphobos/libdruntime/',\n     'libphobos/src/',\n     'libsanitizer/',\n-    ]\n+    }\n \n-wildcard_prefixes = [\n+wildcard_prefixes = {\n     'gcc/testsuite/',\n     'libstdc++-v3/doc/html/'\n-    ]\n+    }\n \n-misc_files = [\n+misc_files = {\n     'gcc/DATESTAMP',\n     'gcc/BASE-VER',\n     'gcc/DEV-PHASE'\n-    ]\n+    }\n \n author_line_regex = \\\n         re.compile(r'^(?P<datetime>\\d{4}-\\d{2}-\\d{2})\\ {2}(?P<name>.*  <.*>)')\n@@ -157,12 +157,12 @@\n end_of_location_regex = re.compile(r'[\\[<(:]')\n item_empty_regex = re.compile(r'\\t(\\* \\S+ )?\\(\\S+\\):\\s*$')\n item_parenthesis_regex = re.compile(r'\\t(\\*|\\(\\S+\\):)')\n+revert_regex = re.compile(r'This reverts commit (?P<hash>\\w+).$')\n \n LINE_LIMIT = 100\n TAB_WIDTH = 8\n CO_AUTHORED_BY_PREFIX = 'co-authored-by: '\n CHERRY_PICK_PREFIX = '(cherry picked from commit '\n-REVERT_PREFIX = 'This reverts commit '\n \n REVIEW_PREFIXES = ('reviewed-by: ', 'reviewed-on: ', 'signed-off-by: ',\n                    'acked-by: ', 'tested-by: ', 'reported-by: ',\n@@ -274,8 +274,9 @@ def __init__(self, info, strict=True, commit_to_info_hook=None):\n \n         # Identify first if the commit is a Revert commit\n         for line in self.info.lines:\n-            if line.startswith(REVERT_PREFIX):\n-                self.revert_commit = line[len(REVERT_PREFIX):].rstrip('.')\n+            m = revert_regex.match(line)\n+            if m:\n+                self.revert_commit = m.group('hash')\n                 break\n         if self.revert_commit:\n             self.info = self.commit_to_info_hook(self.revert_commit)"}]}