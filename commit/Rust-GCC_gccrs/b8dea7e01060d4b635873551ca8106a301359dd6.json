{"sha": "b8dea7e01060d4b635873551ca8106a301359dd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhkZWE3ZTAxMDYwZDRiNjM1ODczNTUxY2E4MTA2YTMwMTM1OWRkNg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-01-15T21:12:14Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-01-15T21:12:14Z"}, "message": "* gcc.texi (Makefile): Add documentation for Makefile targets.\n\nFrom-SVN: r39050", "tree": {"sha": "4c08aee734dcb6166c40c676dbf761f8bc586bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c08aee734dcb6166c40c676dbf761f8bc586bcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8dea7e01060d4b635873551ca8106a301359dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8dea7e01060d4b635873551ca8106a301359dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8dea7e01060d4b635873551ca8106a301359dd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8dea7e01060d4b635873551ca8106a301359dd6/comments", "author": null, "committer": null, "parents": [{"sha": "c1163e75d8241f72ed143392f8477f469fb29f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1163e75d8241f72ed143392f8477f469fb29f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1163e75d8241f72ed143392f8477f469fb29f90"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "c2e2c4cef5ca257a16ea2e3721e0cf24df65e7eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dea7e01060d4b635873551ca8106a301359dd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dea7e01060d4b635873551ca8106a301359dd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8dea7e01060d4b635873551ca8106a301359dd6", "patch": "@@ -1,3 +1,7 @@\n+2001-01-15  DJ Delorie  <dj@redhat.com>\n+\n+\t* gcc.texi (Makefile): Add documentation for Makefile targets.\n+\n 2001-01-15  Philip Blundell  <philb@gnu.org>\n \n \t* config/arm/arm.c (arm_finalize_pic): New arg \"prologue\"."}, {"sha": "742bb67c71c27e86833440d494fa7cd91fd1ca3c", "filename": "gcc/gcc.texi", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dea7e01060d4b635873551ca8106a301359dd6/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dea7e01060d4b635873551ca8106a301359dd6/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=b8dea7e01060d4b635873551ca8106a301359dd6", "patch": "@@ -242,6 +242,7 @@ bugs.  It corresponds to GCC version 2.97.\n * Service::         How to find suppliers of support for GCC.\n * Contributing::    How to contribute to testing and developing GCC.\n * VMS::             Using GCC on VMS.\n+* Makefile::        List of Makefile targets.\n @end ifset\n @ifset INTERNALS\n * Portability::     Goals of GCC's portability features.\n@@ -3345,6 +3346,105 @@ itself.  For example:\n \n These macro definitions can be placed in a header file to minimize the\n number of changes to your source code.\n+\n+@node Makefile\n+@chapter Makefile Targets\n+@cindex makefile targets\n+@cindex targets, makefile\n+\n+@table @code\n+@item all\n+This is the default target.  Depending on what your build/host/target\n+configuration is, it coordinates all the things that need to be built.\n+\n+@item doc\n+Produce info-formatted documentation.  Also, @code{make dvi} is\n+available for DVI-formatted documentation, and @code{make\n+generated-manpages} to generate man pages.\n+\n+@item mostlyclean\n+Delete the files made while building the compiler.\n+\n+@item clean\n+That, and all the other files built by @code{make all}.\n+\n+@item distclean\n+That, and all the files created by @code{configure}.\n+\n+@item extraclean\n+That, and any temporary or intermediate files, like emacs backup files.\n+\n+@item maintainer-clean\n+Distclean plus any file that can be generated from other files.  Note\n+that additional tools may be required beyond what is normally needed to\n+build gcc.\n+\n+@item install\n+Installs gcc.\n+\n+@item uninstall\n+Deletes installed files.\n+\n+@item check\n+Run the testsuite.  This creates a @file{testsuite} subdirectory that\n+has various @file{.sum} and @file{.log} files containing the results of\n+the testing.  You can run subsets with, for example, @code{make check-gcc}.\n+You can specify specific tests by setting RUNTESTFLAGS to be the name\n+of the @file{.exp} file, optionally followed by (for some tests) an equals\n+and a file wildcard, like:\n+\n+@example\n+make check-gcc RUNTESTFLAGS=\"execute.exp=19980413-*\"\n+@end example\n+\n+Note that running the testsuite may require additional tools be\n+installed, such as TCL or dejagnu.\n+\n+@item bootstrap\n+Builds gcc three times - once with the native compiler, once with the\n+native-built compiler it just built, and once with the compiler it built\n+the second time.  In theory, the last two should produce the same\n+results, which @code{make compare} can check.  Each step of this process\n+is called a \"stage\", and the results of each stage N (N=1..3) are copied\n+to a subdirectory @file{stageN/}.\n+\n+@item bootstrap-lean\n+Like @code{bootstrap}, except that the various stages are removed once\n+they're no longer needed.  This saves disk space.\n+\n+@item bubblestrap\n+Once bootstrapped, this incrementally rebuilds each of the three stages,\n+one at a time.  It does this by \"bubbling\" the stages up from their\n+stubdirectories, rebuilding them, and copying them back to their\n+subdirectories.  This will allow you to, for example, quickly rebuild a\n+bootstrapped compiler after changing the sources, without having to do a\n+full bootstrap.\n+\n+@item quickstrap\n+Rebuilds the most recently built stage.  Since each stage requires\n+special invocation, using this target means you don't have to keep track\n+of which stage you're on or what invocation that stage needs.\n+\n+@item cleanstrap\n+Removed everything (@code{make clean}) and rebuilds (@code{make bootstrap}).\n+\n+@item stageN (N=1..4)\n+For each stage, moves the appropriate files to the stageN subdirectory.\n+\n+@item unstageN (N=1..4)\n+Undoes the corresponding @code{stageN}.\n+\n+@item restageN (N=1..4)\n+Undoes the corresponding @code{stageN} and rebuilds it with the\n+appropriate flags.\n+\n+@item compare\n+Compares the results of stages 2 and 3.  This ensures that the compiler\n+is running properly, since it should produce the same object files\n+regardless of how it itself was compiled.\n+\n+@end table\n+\n @end ifset\n \n @ifset INTERNALS"}]}