{"sha": "d3f293348768667c07770e433ff00af51fee73a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNmMjkzMzQ4NzY4NjY3YzA3NzcwZTQzM2ZmMDBhZjUxZmVlNzNhMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-19T23:02:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-19T23:02:21Z"}, "message": "ranger: Improve a % b operand ranges [PR91029]\n\nAs mentioned in the PR, the previous PR91029 patch was testing\nop2 >= 0 which is unnecessary, even negative op2 values will work the same,\nfurthermore, from if a % b > 0 we can deduce a > 0 rather than just a >= 0\n(0 % b would be 0), and it actually valid even for other constants than 0,\na % b > 5 means a > 5 (a % b has the same sign as a and a in [0, 5] would\nresult in a % b in [0, 5].  Also, we can deduce a range for the other\noperand, if we know\na % b >= 20, then b must be (in absolute value for signed modulo) > 20,\nfor a % [0, 20] the result would be [0, 19].\n\n2020-11-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/91029\n\t* range-op.cc (operator_trunc_mod::op1_range): Don't require signed\n\ttypes, nor require that op2 >= 0.  Implement (a % b) >= x && x > 0\n\timplies a >= x and (a % b) <= x && x < 0 implies a <= x.\n\t(operator_trunc_mod::op2_range): New method.\n\n\t* gcc.dg/tree-ssa/pr91029-1.c: New test.\n\t* gcc.dg/tree-ssa/pr91029-2.c: New test.", "tree": {"sha": "e6772219b45c168901b54fe55de7384f1d27efbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6772219b45c168901b54fe55de7384f1d27efbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3f293348768667c07770e433ff00af51fee73a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3f293348768667c07770e433ff00af51fee73a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3f293348768667c07770e433ff00af51fee73a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3f293348768667c07770e433ff00af51fee73a2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d8b5d83614d8f0d0e40c0520d4f40ffa01f8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d8b5d83614d8f0d0e40c0520d4f40ffa01f8d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d8b5d83614d8f0d0e40c0520d4f40ffa01f8d9"}], "stats": {"total": 235, "additions": 219, "deletions": 16}, "files": [{"sha": "36f9fd66cb3e985996f2082f34bdbcbde0f4f928", "filename": "gcc/range-op.cc", "status": "modified", "additions": 53, "deletions": 16, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3f293348768667c07770e433ff00af51fee73a2/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3f293348768667c07770e433ff00af51fee73a2/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=d3f293348768667c07770e433ff00af51fee73a2", "patch": "@@ -2645,6 +2645,9 @@ class operator_trunc_mod : public range_operator\n   virtual bool op1_range (irange &r, tree type,\n \t\t\t  const irange &lhs,\n \t\t\t  const irange &op2) const;\n+  virtual bool op2_range (irange &r, tree type,\n+\t\t\t  const irange &lhs,\n+\t\t\t  const irange &op1) const;\n } op_trunc_mod;\n \n void\n@@ -2694,24 +2697,58 @@ operator_trunc_mod::wi_fold (irange &r, tree type,\n bool\n operator_trunc_mod::op1_range (irange &r, tree type,\n \t\t\t       const irange &lhs,\n-\t\t\t       const irange &op2) const\n+\t\t\t       const irange &) const\n {\n-  // PR 91029.  Check for signed truncation with op2 >= 0.\n-  if (TYPE_SIGN (type) == SIGNED && wi::ge_p (op2.lower_bound (), 0, SIGNED))\n+  // PR 91029.\n+  signop sign = TYPE_SIGN (type);\n+  unsigned prec = TYPE_PRECISION (type);\n+  // (a % b) >= x && x > 0 , then a >= x.\n+  if (wi::gt_p (lhs.lower_bound (), 0, sign))\n     {\n-      unsigned prec = TYPE_PRECISION (type);\n-      // if a % b > 0 , then a >= 0.\n-      if (wi::gt_p (lhs.lower_bound (), 0, SIGNED))\n-\t{\n-\t  r = value_range (type, wi::zero (prec), wi::max_value (prec, SIGNED));\n-\t  return true;\n-\t}\n-      // if a % b < 0 , then a <= 0.\n-      if (wi::lt_p (lhs.upper_bound (), 0, SIGNED))\n-\t{\n-\t  r = value_range (type, wi::min_value (prec, SIGNED), wi::zero (prec));\n-\t  return true;\n-\t}\n+      r = value_range (type, lhs.lower_bound (), wi::max_value (prec, sign));\n+      return true;\n+    }\n+  // (a % b) <= x && x < 0 , then a <= x.\n+  if (wi::lt_p (lhs.upper_bound (), 0, sign))\n+    {\n+      r = value_range (type, wi::min_value (prec, sign), lhs.upper_bound ());\n+      return true;\n+    }\n+  return false;\n+}\n+\n+bool\n+operator_trunc_mod::op2_range (irange &r, tree type,\n+\t\t\t       const irange &lhs,\n+\t\t\t       const irange &) const\n+{\n+  // PR 91029.\n+  signop sign = TYPE_SIGN (type);\n+  unsigned prec = TYPE_PRECISION (type);\n+  // (a % b) >= x && x > 0 , then b is in ~[-x, x] for signed\n+  //\t\t\t       or b > x for unsigned.\n+  if (wi::gt_p (lhs.lower_bound (), 0, sign))\n+    {\n+      if (sign == SIGNED)\n+\tr = value_range (type, wi::neg (lhs.lower_bound ()),\n+\t\t\t lhs.lower_bound (), VR_ANTI_RANGE);\n+      else if (wi::lt_p (lhs.lower_bound (), wi::max_value (prec, sign),\n+\t\t\t sign))\n+\tr = value_range (type, lhs.lower_bound () + 1,\n+\t\t\t wi::max_value (prec, sign));\n+      else\n+\treturn false;\n+      return true;\n+    }\n+  // (a % b) <= x && x < 0 , then b is in ~[x, -x].\n+  if (wi::lt_p (lhs.upper_bound (), 0, sign))\n+    {\n+      if (wi::gt_p (lhs.upper_bound (), wi::min_value (prec, sign), sign))\n+\tr = value_range (type, lhs.upper_bound (),\n+\t\t\t wi::neg (lhs.upper_bound ()), VR_ANTI_RANGE);\n+      else\n+\treturn false;\n+      return true;\n     }\n   return false;\n }"}, {"sha": "d52734b20f98d89def89d5c53812e21c52831e34", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr91029-1.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3f293348768667c07770e433ff00af51fee73a2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91029-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3f293348768667c07770e433ff00af51fee73a2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91029-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91029-1.c?ref=d3f293348768667c07770e433ff00af51fee73a2", "patch": "@@ -0,0 +1,68 @@\n+/* PR tree-optimization/91029 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+void kill (void);\n+int xx;\n+\n+void f1 (int i, int j)\n+{\n+  if ((i % j) == 3)\n+    {\n+      xx = (i < 3);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f2 (int i, int j)\n+{\n+  if ((i % j) > 0)\n+    {\n+      xx = (i <= 0);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f3 (int i, int j)\n+{\n+  if ((i % j) == -3)\n+    {\n+      xx = (i > -3);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f4 (int i, int j)\n+{\n+  if ((i % j) < 0)\n+    {\n+      xx = (i >= 0);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f5 (int i, int j)\n+{\n+  if ((i % j) > 42)\n+    {\n+      xx = (i <= 42);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f6 (int i, int j)\n+{\n+  if ((i % j) < -124)\n+    {\n+      xx = (i >= -124);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"kill\" \"evrp\" } }  */"}, {"sha": "ad9213a41b792dda3ad6680b7142d87acd8d689d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr91029-2.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3f293348768667c07770e433ff00af51fee73a2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91029-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3f293348768667c07770e433ff00af51fee73a2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91029-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91029-2.c?ref=d3f293348768667c07770e433ff00af51fee73a2", "patch": "@@ -0,0 +1,98 @@\n+/* PR tree-optimization/91029 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+void kill (void);\n+int xx;\n+\n+void f1 (int i, int j)\n+{\n+  if ((i % j) == 3)\n+    {\n+      xx = (j <= 3 && j >= -3);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f2 (int i, int j)\n+{\n+  if ((i % j) > 0)\n+    {\n+      xx = (j <= 1 && j >= -1);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f3 (int i, int j)\n+{\n+  if ((i % j) == -3)\n+    {\n+      xx = (j <= 3 && j >= -3);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f4 (int i, int j)\n+{\n+  if ((i % j) < 0)\n+    {\n+      xx = (j <= 1 && j >= -1);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f5 (int i, int j)\n+{\n+  if ((i % j) > 42)\n+    {\n+      xx = (j <= 43 && j >= -43);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f6 (int i, int j)\n+{\n+  if ((i % j) < -124)\n+    {\n+      xx = (j <= 125 && j >= -125);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f7 (unsigned int i, unsigned int j)\n+{\n+  if ((i % j) == 3)\n+    {\n+      xx = (j <= 3);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f8 (unsigned int i, unsigned int j)\n+{\n+  if ((i % j) > 0)\n+    {\n+      xx = (j <= 1);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f9 (unsigned int i, unsigned int j)\n+{\n+  if ((i % j) >= 124)\n+    {\n+      xx = (j <= 124);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"kill\" \"evrp\" } }  */"}]}