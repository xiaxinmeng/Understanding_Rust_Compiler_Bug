{"sha": "3d238248433054745e54777fc4c59d1bce67ee41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QyMzgyNDg0MzMwNTQ3NDVlNTQ3NzdmYzRjNTlkMWJjZTY3ZWU0MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-10-30T12:41:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-10-30T12:41:45Z"}, "message": "emit-rtl.c (set_unique_reg_note): Don't create REG_EQUAL or REG_EQUIV notes for ASM_OPERANDS.\n\n\t* emit-rtl.c (set_unique_reg_note): Don't create REG_EQUAL or\n\tREG_EQUIV notes for ASM_OPERANDS.  Return the new note (if any).\n\t* rtl.h (set_unique_reg_note): Change return value.\n\t* gcse.c (try_replace_reg): Use set_unique_reg_note.\n\t* cse.c (cse_insn): Likewise.\n\t* expr.c (emit_move_insn): Likewise.\n\t* explow.c (force_reg): Likewise.\n\t* local-alloc (update_equiv_regs): Likewise.\n\t* loop.c (move_moveables, load_mems): Likewise.\n\t* reload (find_reloads): Likewise.\n\n\t* gcc.dg/20011029-2.c: New test.\n\nFrom-SVN: r46636", "tree": {"sha": "bf284af1d2de346c28438607b4461f75a47c178a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf284af1d2de346c28438607b4461f75a47c178a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d238248433054745e54777fc4c59d1bce67ee41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d238248433054745e54777fc4c59d1bce67ee41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d238248433054745e54777fc4c59d1bce67ee41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d238248433054745e54777fc4c59d1bce67ee41/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e"}], "stats": {"total": 89, "additions": 46, "deletions": 43}, "files": [{"sha": "94976b36047385c2ed40f515180d666c54e06014", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -1,3 +1,16 @@\n+2001-10-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* emit-rtl.c (set_unique_reg_note): Don't create REG_EQUAL or\n+\tREG_EQUIV notes for ASM_OPERANDS.  Return the new note (if any).\n+\t* rtl.h (set_unique_reg_note): Change return value.\n+\t* gcse.c (try_replace_reg): Use set_unique_reg_note.\n+\t* cse.c (cse_insn): Likewise.\n+\t* expr.c (emit_move_insn): Likewise.\n+\t* explow.c (force_reg): Likewise.\n+\t* local-alloc (update_equiv_regs): Likewise.\n+\t* loop.c (move_moveables, load_mems): Likewise.\n+\t* reload (find_reloads): Likewise.\n+\n 2001-10-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \tLocalization fixes."}, {"sha": "ad6c62030fe33ba9716d94335675b4d8c3ce6358", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -5648,18 +5648,12 @@ cse_insn (insn, libcall_insn)\n \t\t&& GET_CODE (XEXP (XEXP (src_const, 0), 0)) == LABEL_REF\n \t\t&& GET_CODE (XEXP (XEXP (src_const, 0), 1)) == LABEL_REF))\n \t{\n-\t  tem = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n-\n \t  /* Make sure that the rtx is not shared with any other insn.  */\n \t  src_const = copy_rtx (src_const);\n \n \t  /* Record the actual constant value in a REG_EQUAL note, making\n \t     a new one if one does not already exist.  */\n-\t  if (tem)\n-\t    XEXP (tem, 0) = src_const;\n-\t  else\n-\t    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t\t\t  src_const, REG_NOTES (insn));\n+\t  set_unique_reg_note (insn, REG_EQUAL, src_const);\n \n           /* If storing a constant value in a register that\n \t     previously held the constant value 0,"}, {"sha": "992d6049781028304fc5d5b92bd8d40fa3b0def6", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -3960,19 +3960,28 @@ force_next_line_note ()\n /* Place a note of KIND on insn INSN with DATUM as the datum. If a\n    note of this type already exists, remove it first.  */\n \n-void\n+rtx\n set_unique_reg_note (insn, kind, datum)\n      rtx insn;\n      enum reg_note kind;\n      rtx datum;\n {\n   rtx note = find_reg_note (insn, kind, NULL_RTX);\n \n-  /* First remove the note if there already is one.  */\n+  /* Don't add ASM_OPERAND REG_EQUAL/REG_EQUIV notes.\n+     It serves no useful purpose and breaks eliminate_regs.  */\n+  if ((kind == REG_EQUAL || kind == REG_EQUIV)\n+      && GET_CODE (datum) == ASM_OPERANDS)\n+    return NULL_RTX;\n+\n   if (note)\n-    remove_note (insn, note);\n+    {\n+      XEXP (note, 0) = datum;\n+      return note;\n+    }\n \n   REG_NOTES (insn) = gen_rtx_EXPR_LIST (kind, datum, REG_NOTES (insn));\n+  return REG_NOTES (insn);\n }\n \f\n /* Return an indication of which type of insn should have X as a body."}, {"sha": "940a8395191b7c7cbb66855affe1aad9613cd643", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -743,14 +743,7 @@ force_reg (mode, x)\n   if (CONSTANT_P (x)\n       && (set = single_set (insn)) != 0\n       && SET_DEST (set) == temp)\n-    {\n-      rtx note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n-\n-      if (note)\n-\tXEXP (note, 0) = x;\n-      else\n-\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, x, REG_NOTES (insn));\n-    }\n+    set_unique_reg_note (insn, REG_EQUAL, x);\n   return temp;\n }\n "}, {"sha": "bf7ec926d7ea5904e1a942f90e84fca1228ccc88", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -2774,8 +2774,7 @@ emit_move_insn (x, y)\n   last_insn = emit_move_insn_1 (x, y);\n \n   if (y_cst && GET_CODE (x) == REG)\n-    REG_NOTES (last_insn)\n-      = gen_rtx_EXPR_LIST (REG_EQUAL, y_cst, REG_NOTES (last_insn));\n+    set_unique_reg_note (last_insn, REG_EQUAL, y_cst);\n \n   return last_insn;\n }"}, {"sha": "0bd96e02e4e5f2199c7c1091731d51125e6ed81f", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -3929,8 +3929,7 @@ try_replace_reg (from, to, insn)\n   /* If we've failed to do replacement, have a single SET, and don't already\n      have a note, add a REG_EQUAL note to not lose information.  */\n   if (!success && note == 0 && set != 0)\n-    note = REG_NOTES (insn)\n-      = gen_rtx_EXPR_LIST (REG_EQUAL, src, REG_NOTES (insn));\n+    note = set_unique_reg_note (insn, REG_EQUAL, src);\n \n   /* If there is already a NOTE, update the expression in it with our\n      replacement.  */"}, {"sha": "7cee3f5e4569cb8673715b155f61051ea6ef2757", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -927,13 +927,9 @@ update_equiv_regs ()\n \n \t  /* cse sometimes generates function invariants, but doesn't put a\n \t     REG_EQUAL note on the insn.  Since this note would be redundant,\n-\t     there's no point creating it earlier than here.  Don't do this\n-\t     for ASM_OPERANDS since eliminate_regs doesn't support it and\n-\t     it serves no useful purpose.  */\n-\t  if (! note && ! rtx_varies_p (src, 0)\n-\t      && GET_CODE (src) != ASM_OPERANDS)\n-\t    REG_NOTES (insn)\n-\t      = note = gen_rtx_EXPR_LIST (REG_EQUAL, src, REG_NOTES (insn));\n+\t     there's no point creating it earlier than here.  */\n+\t  if (! note && ! rtx_varies_p (src, 0))\n+\t    note = set_unique_reg_note (insn, REG_EQUAL, src);\n \n \t  /* Don't bother considering a REG_EQUAL note containing an EXPR_LIST\n \t     since it represents a function call */"}, {"sha": "8b2f8daf01374086f71ee55bace27bb4ed684751", "filename": "gcc/loop.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -1831,9 +1831,9 @@ move_movables (loop, movables, threshold, insn_count)\n \n \t\t  i1 = loop_insn_hoist (loop, seq);\n \t\t  if (! find_reg_note (i1, REG_EQUAL, NULL_RTX))\n-\t\t    REG_NOTES (i1)\n-\t\t      = gen_rtx_EXPR_LIST (m->is_equiv ? REG_EQUIV : REG_EQUAL,\n-\t\t\t\t\t   m->set_src, REG_NOTES (i1));\n+\t\t    set_unique_reg_note (i1,\n+\t\t\t\t\t m->is_equiv ? REG_EQUIV : REG_EQUAL,\n+\t\t\t\t\t m->set_src);\n \n \t\t  if (loop_dump_stream)\n \t\t    fprintf (loop_dump_stream, \" moved to %d\", INSN_UID (i1));\n@@ -1991,10 +1991,8 @@ move_movables (loop, movables, threshold, insn_count)\n \n \t\t\t  i1 = loop_insn_hoist (loop, seq);\n \t\t\t  if (! find_reg_note (i1, REG_EQUAL, NULL_RTX))\n-\t\t\t    REG_NOTES (i1)\n-\t\t\t      = gen_rtx_EXPR_LIST ((m->is_equiv ? REG_EQUIV\n-\t\t\t\t\t\t    : REG_EQUAL),\n-\t\t\t\t\t\t   m->set_src, REG_NOTES (i1));\n+\t\t\t    set_unique_reg_note (i1, m->is_equiv ? REG_EQUIV\n+\t\t\t\t\t\t     : REG_EQUAL, m->set_src);\n \t\t\t}\n \t\t      else\n \t\t\ti1 = loop_insn_hoist (loop, PATTERN (p));\n@@ -9136,9 +9134,7 @@ load_mems (loop)\n \t    }\n \n \t  if (const_equiv)\n-\t    REG_NOTES (set) = gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t\t\t copy_rtx (const_equiv->loc),\n-\t\t\t\t\t\t REG_NOTES (set));\n+\t    set_unique_reg_note (set, REG_EQUAL, copy_rtx (const_equiv->loc));\n \n \t  if (written)\n \t    {"}, {"sha": "9ed9cd09948ea1d80c68fbd603076070b7a5270c", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -2666,9 +2666,9 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t      && GET_CODE (reg) == REG\n \t      && (GET_MODE_SIZE (GET_MODE (reg))\n \t\t  >= GET_MODE_SIZE (GET_MODE (op))))\n-\t    REG_NOTES (emit_insn_before (gen_rtx_USE (VOIDmode, reg), insn))\n-\t      = gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t   reg_equiv_memory_loc[REGNO (reg)], NULL_RTX);\n+\t    set_unique_reg_note (emit_insn_before (gen_rtx_USE (VOIDmode, reg),\n+\t\t\t\t\t\t   insn),\n+\t\t\t\t REG_EQUAL, reg_equiv_memory_loc[REGNO (reg)]);\n \n \t  substed_operand[i] = recog_data.operand[i] = op;\n \t}"}, {"sha": "db1e913be4419e4308396bcd491bddfc2658717b", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -1409,7 +1409,7 @@ extern enum machine_mode choose_hard_reg_mode PARAMS ((unsigned int,\n \t\t\t\t\t\t       unsigned int));\n \n /* In emit-rtl.c  */\n-extern void set_unique_reg_note         PARAMS ((rtx, enum reg_note, rtx));\n+extern rtx set_unique_reg_note\t\tPARAMS ((rtx, enum reg_note, rtx));\n \n /* Functions in rtlanal.c */\n "}, {"sha": "d8f07d99732df0d7b345d5cec61c957f2b532184", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d238248433054745e54777fc4c59d1bce67ee41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d238248433054745e54777fc4c59d1bce67ee41", "patch": "@@ -1,3 +1,7 @@\n+2001-10-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20011029-2.c: New test.\n+\n Mon Oct 29 21:19:53 2001  Nicola Pero  <n.pero@mi.flashnet.it>\n \n \t* objc/execute/class_self-1.m: New test."}]}