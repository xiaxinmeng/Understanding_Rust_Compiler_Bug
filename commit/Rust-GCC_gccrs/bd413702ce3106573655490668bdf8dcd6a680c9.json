{"sha": "bd413702ce3106573655490668bdf8dcd6a680c9", "node_id": "C_kwDOANBUbNoAKGJkNDEzNzAyY2UzMTA2NTczNjU1NDkwNjY4YmRmOGRjZDZhNjgwYzk", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-07-08T17:26:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-21T15:25:02Z"}, "message": "[Ada] Add \"optional\" node subtypes that allow Empty\n\ngcc/ada/\n\n\t* gen_il-gen.adb (Put_Opt_Subtype): Print out subtypes of the\n\tform:\n\tsubtype Opt_N_Declaration is\n\tNode_Id with Predicate =>\n\tOpt_N_Declaration = Empty or else\n\tOpt_N_Declaration in N_Declaration_Id;\n\tOne for each node or entity type, with the predicate allowing\n\tEmpty.\n\t* atree.adb (Parent, Set_Parent): Remove unnecessary \"Atree.\".", "tree": {"sha": "3a48faf51478316110c194b1784009be50739715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a48faf51478316110c194b1784009be50739715"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd413702ce3106573655490668bdf8dcd6a680c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd413702ce3106573655490668bdf8dcd6a680c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd413702ce3106573655490668bdf8dcd6a680c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd413702ce3106573655490668bdf8dcd6a680c9/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0df911d9056437a79cf40fc643c49fced56574bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df911d9056437a79cf40fc643c49fced56574bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df911d9056437a79cf40fc643c49fced56574bd"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "540d4ff74af385840192f4a6f120e13161c82638", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd413702ce3106573655490668bdf8dcd6a680c9/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd413702ce3106573655490668bdf8dcd6a680c9/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=bd413702ce3106573655490668bdf8dcd6a680c9", "patch": "@@ -1828,7 +1828,7 @@ package body Atree is\n \n    function Parent (N : Node_Or_Entity_Id) return Node_Or_Entity_Id is\n    begin\n-      pragma Assert (Atree.Present (N));\n+      pragma Assert (Present (N));\n \n       if Is_List_Member (N) then\n          return Parent (List_Containing (N));\n@@ -2151,7 +2151,7 @@ package body Atree is\n \n    procedure Set_Parent (N : Node_Or_Entity_Id; Val : Node_Or_Entity_Id) is\n    begin\n-      pragma Assert (Atree.Present (N));\n+      pragma Assert (Present (N));\n       pragma Assert (not In_List (N));\n       Set_Link (N, Union_Id (Val));\n    end Set_Parent;"}, {"sha": "db2a5fc15b27d4bf0685162ac2386f684de60567", "filename": "gcc/ada/gen_il-gen.adb", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd413702ce3106573655490668bdf8dcd6a680c9/gcc%2Fada%2Fgen_il-gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd413702ce3106573655490668bdf8dcd6a680c9/gcc%2Fada%2Fgen_il-gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen.adb?ref=bd413702ce3106573655490668bdf8dcd6a680c9", "patch": "@@ -1405,6 +1405,10 @@ package body Gen_IL.Gen is\n          --  Print out a subtype (of type Node_Id or Entity_Id) for a given\n          --  nonroot abstract type.\n \n+         procedure Put_Opt_Subtype (T : Node_Or_Entity_Type);\n+         --  Print out an \"optional\" subtype; that is, one that allows\n+         --  Empty. Their names start with \"Opt_\".\n+\n          procedure Put_Enum_Type is\n             procedure Put_Enum_Lit (T : Node_Or_Entity_Type);\n             --  Print out one enumeration literal in the declaration of\n@@ -1496,6 +1500,29 @@ package body Gen_IL.Gen is\n             end if;\n          end Put_Id_Subtype;\n \n+         procedure Put_Opt_Subtype (T : Node_Or_Entity_Type) is\n+         begin\n+            if Type_Table (T).Parent /= No_Type then\n+               Put (S, \"subtype Opt_\" & Image (T) & \" is\" & LF);\n+               Increase_Indent (S, 2);\n+               Put (S, Id_Image (Root));\n+\n+               --  Assert that the Opt_XXX subtype is empty or in the XXX\n+               --  subtype.\n+\n+               if Enable_Assertions then\n+                  Put (S, \" with Predicate =>\" & LF);\n+                  Increase_Indent (S, 2);\n+                  Put (S, \"Opt_\" & Image (T) & \" = Empty or else\" & LF);\n+                  Put (S, \"Opt_\" & Image (T) & \" in \" & Id_Image (T));\n+                  Decrease_Indent (S, 2);\n+               end if;\n+\n+               Put (S, \";\" & LF);\n+               Decrease_Indent (S, 2);\n+            end if;\n+         end Put_Opt_Subtype;\n+\n       begin -- Put_Type_And_Subtypes\n          Put_Enum_Type;\n \n@@ -1544,7 +1571,20 @@ package body Gen_IL.Gen is\n             end if;\n          end loop;\n \n-         Put (S, \"subtype Flag is Boolean;\" & LF & LF);\n+         Put (S, LF & \"--  Optional subtypes of \" & Id_Image (Root) & \".\" &\n+              \" These allow Empty.\" & LF & LF);\n+\n+         Iterate_Types (Root, Pre => Put_Opt_Subtype'Access);\n+\n+         Put (S, LF & \"--  Optional union types:\" & LF & LF);\n+\n+         for T in First_Abstract (Root) .. Last_Abstract (Root) loop\n+            if Type_Table (T) /= null and then Type_Table (T).Is_Union then\n+               Put_Opt_Subtype (T);\n+            end if;\n+         end loop;\n+\n+         Put (S, LF & \"subtype Flag is Boolean;\" & LF & LF);\n       end Put_Type_And_Subtypes;\n \n       function Low_Level_Getter_Name (T : Type_Enum) return String is"}]}