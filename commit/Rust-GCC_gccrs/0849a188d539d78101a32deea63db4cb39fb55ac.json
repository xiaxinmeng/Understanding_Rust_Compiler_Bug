{"sha": "0849a188d539d78101a32deea63db4cb39fb55ac", "node_id": "C_kwDOANBUbNoAKDA4NDlhMTg4ZDUzOWQ3ODEwMWEzMmRlZWE2M2RiNGNiMzlmYjU1YWM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-24T22:02:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-24T22:02:08Z"}, "message": "go: Fix up go.test/test/fixedbugs/bug207.go failure [PR109258]\n\nThe PR109086 r13-6690 inline_string_cmp change to\n      if (diff != result)\n        emit_move_insn (result, diff);\nregressed\nFAIL: go.test/test/fixedbugs/bug207.go,  -O2 -g  (internal compiler error: in emit_move_insn, at expr.cc:4224)\nThe problem is the Go FE doesn't mark __builtin_memcmp as pure as other FEs,\nso we ended up with\n  __builtin_memcmp (whatever, whateverelse, somesize);\nin the IL before expansion and the expansion ICEd on it.\nAs the builtin calls a library function which is pure or is inline expanded\nas such, not marking it pure is an unnecessary pessimization from the FE\nside, keeping such dead calls in the IL if they aren't needed will not help\nanything.\n\nThe following patch fixes that.  Initially I've added just DECL_PURE_P to\nit, but that unfortunately broke bootstrap, for __builtin_memcmp there is\nalso __builtin_memcmp_eq registered by the middle-end code if not registered\nearlier and that one is registered with the usual flags (pure, nothrow,\nleaf), so if __builtin_memcmp from FE was just pure, it would appear in the\nIL as that it can raise exceptions and when folded into __builtin_memcmp_eq\nall of sudden it couldn't and we'd ICE in verification.\n\nI think tons of functions should have builtin_nothrow as well, but changing\nthat wasn't necessary for this fix.\n\n2023-03-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/109258\n\t* go-gcc.cc (Gcc_backend): Add new static data members builtin_pure\n\tand builtin_nothrow.\n\t(Gcc_backend::Gcc_backend): Pass builtin_pure | builtin_nothrow for\n\tBUILT_IN_MEMCMP.\n\t(Gcc_backend::define_builtin): Handle builtin_pure and builtin_nothrow\n\tin flags.", "tree": {"sha": "f3124f72fbe348293358512e3f617c7eaa12d062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3124f72fbe348293358512e3f617c7eaa12d062"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0849a188d539d78101a32deea63db4cb39fb55ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0849a188d539d78101a32deea63db4cb39fb55ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0849a188d539d78101a32deea63db4cb39fb55ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0849a188d539d78101a32deea63db4cb39fb55ac/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "833233a4aefc9981b671c1bda34676c20b76cc90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833233a4aefc9981b671c1bda34676c20b76cc90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833233a4aefc9981b671c1bda34676c20b76cc90"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "41ae9f8373102cfb394a053004d67216bfaf80e6", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0849a188d539d78101a32deea63db4cb39fb55ac/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0849a188d539d78101a32deea63db4cb39fb55ac/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=0849a188d539d78101a32deea63db4cb39fb55ac", "patch": "@@ -543,6 +543,8 @@ class Gcc_backend : public Backend\n   static const int builtin_const = 1 << 0;\n   static const int builtin_noreturn = 1 << 1;\n   static const int builtin_novops = 1 << 2;\n+  static const int builtin_pure = 1 << 3;\n+  static const int builtin_nothrow = 1 << 4;\n \n   void\n   define_builtin(built_in_function bcode, const char* name, const char* libname,\n@@ -601,7 +603,7 @@ Gcc_backend::Gcc_backend()\n \t\t\t\t\t\tconst_ptr_type_node,\n \t\t\t\t\t\tsize_type_node,\n \t\t\t\t\t\tNULL_TREE),\n-\t\t       0);\n+\t\t       builtin_pure | builtin_nothrow);\n \n   // We use __builtin_memmove for copying data.\n   this->define_builtin(BUILT_IN_MEMMOVE, \"__builtin_memmove\", \"memmove\",\n@@ -3596,6 +3598,10 @@ Gcc_backend::define_builtin(built_in_function bcode, const char* name,\n \t\t\t\t   libname, NULL_TREE);\n   if ((flags & builtin_const) != 0)\n     TREE_READONLY(decl) = 1;\n+  if ((flags & builtin_pure) != 0)\n+    DECL_PURE_P(decl) = 1;\n+  if ((flags & builtin_nothrow) != 0)\n+    TREE_NOTHROW (decl) = 1;\n   if ((flags & builtin_noreturn) != 0)\n     TREE_THIS_VOLATILE(decl) = 1;\n   if ((flags & builtin_novops) != 0)\n@@ -3608,6 +3614,10 @@ Gcc_backend::define_builtin(built_in_function bcode, const char* name,\n \t\t\t\t  NULL, NULL_TREE);\n       if ((flags & builtin_const) != 0)\n \tTREE_READONLY(decl) = 1;\n+      if ((flags & builtin_pure) != 0)\n+\tDECL_PURE_P(decl) = 1;\n+      if ((flags & builtin_nothrow) != 0)\n+\tTREE_NOTHROW (decl) = 1;\n       if ((flags & builtin_noreturn) != 0)\n \tTREE_THIS_VOLATILE(decl) = 1;\n       if ((flags & builtin_novops) != 0)"}]}