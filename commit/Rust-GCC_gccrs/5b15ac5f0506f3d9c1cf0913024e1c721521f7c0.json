{"sha": "5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIxNWFjNWYwNTA2ZjNkOWMxY2YwOTEzMDI0ZTFjNzIxNTIxZjdjMA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2019-08-13T08:08:27Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:08:27Z"}, "message": "[Ada] Wrong dispatching call in type with aspect Implicit_Dereference\n\nWhen a record type with an an access to class-wide type discriminant\nhas aspect Implicit_Dereference, and the discriminant is used as the\ncontrolling argument of a dispatching call, the compiler may generate\nwrong code to dispatch the call.\n\n2019-08-13  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Selected_Component): When the type of the\n\tcomponent is an access to a class-wide type and the type of the\n\tcontext is an access to a tagged type the relevant type is that\n\tof the component (since in such case we may need to generate\n\timplicit type conversions or dispatching calls).\n\ngcc/testsuite/\n\n\t* gnat.dg/tagged3.adb, gnat.dg/tagged3_pkg.adb,\n\tgnat.dg/tagged3_pkg.ads: New testcase.\n\nFrom-SVN: r274356", "tree": {"sha": "016e9d2753a59ec6aa29897d62c9cb658d79c36e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/016e9d2753a59ec6aa29897d62c9cb658d79c36e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5efb7125030aab3e2622be6de7fbbb18ddfadc8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efb7125030aab3e2622be6de7fbbb18ddfadc8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efb7125030aab3e2622be6de7fbbb18ddfadc8f"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "5e313305ed3c36798ae6abf830d53396519396e6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "patch": "@@ -1,3 +1,11 @@\n+2019-08-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Selected_Component): When the type of the\n+\tcomponent is an access to a class-wide type and the type of the\n+\tcontext is an access to a tagged type the relevant type is that\n+\tof the component (since in such case we may need to generate\n+\timplicit type conversions or dispatching calls).\n+\n 2019-08-13  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend):  Preanalyze"}, {"sha": "b27171f0be508eecd7f3d6fbb69acf839d80a4de", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "patch": "@@ -10598,6 +10598,10 @@ package body Sem_Res is\n \n          pragma Assert (Found);\n          Resolve (P, It1.Typ);\n+\n+         --  In general the expected type is the type of the context, not the\n+         --  type of the candidate selected component.\n+\n          Set_Etype (N, Typ);\n          Set_Entity_With_Checks (S, Comp1);\n \n@@ -10610,6 +10614,17 @@ package body Sem_Res is\n \n          if Ekind (Typ) = E_Anonymous_Access_Subprogram_Type then\n             Set_Etype (N, Etype (Comp1));\n+\n+         --  When the type of the component is an access to a class-wide type\n+         --  the relevant type is that of the component (since in such case we\n+         --  may need to generate implicit type conversions or dispatching\n+         --  calls).\n+\n+         elsif Is_Access_Type (Typ)\n+           and then not Is_Class_Wide_Type (Designated_Type (Typ))\n+           and then Is_Class_Wide_Type (Designated_Type (Etype (Comp1)))\n+         then\n+            Set_Etype (N, Etype (Comp1));\n          end if;\n \n       else"}, {"sha": "887b0c3c3e73d30230e62995939cf618adbc5aeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "patch": "@@ -1,3 +1,8 @@\n+2019-08-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* gnat.dg/tagged3.adb, gnat.dg/tagged3_pkg.adb,\n+\tgnat.dg/tagged3_pkg.ads: New testcase.\n+\n 2019-08-13  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/aggr27.adb: New testcase."}, {"sha": "1468ee2c03e902fda2d1908a9e9bbe281660f882", "filename": "gcc/testsuite/gnat.dg/tagged3.adb", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged3.adb?ref=5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "patch": "@@ -0,0 +1,42 @@\n+--  { dg-do run }\n+\n+with Tagged3_Pkg; use Tagged3_Pkg;\n+procedure Tagged3 is\n+   package SP is\n+      type Ref is tagged private;\n+\n+      procedure Set (Self : in out Ref'Class; Data : Parent'Class);\n+\n+      type Reference_Type (Element : access Parent'Class)\n+         is limited null record with Implicit_Dereference => Element;\n+\n+      function Get (Self : Ref'Class) return Reference_Type;\n+\n+   private\n+      type Element_Access is access all Parent'Class;\n+      type Ref is tagged record\n+         Data : Element_Access;\n+      end record;\n+   end;\n+\n+   package body SP is\n+      procedure Set (Self : in out Ref'Class; Data : Parent'Class) is\n+      begin\n+         Self.Data := new Parent'Class'(Data);\n+      end;\n+\n+      function Get (Self : Ref'Class) return Reference_Type is\n+      begin\n+         return Reference_Type'(Element => Self.Data);\n+      end;\n+   end;\n+\n+   DC : Child;\n+   RC : SP.Ref;\n+begin\n+   RC.Set (DC);\n+   Prim1 (RC.Get.Element); -- Test\n+   if not Tagged3_Pkg.Child_Prim1_Called then\n+     raise Program_Error;\n+   end if;\n+end;"}, {"sha": "c4629af8764f2f9e95048696ff25f102f32cce26", "filename": "gcc/testsuite/gnat.dg/tagged3_pkg.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged3_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged3_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged3_pkg.adb?ref=5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "patch": "@@ -0,0 +1,12 @@\n+with Ada.Text_IO; use Ada.Text_IO;\n+package body Tagged3_Pkg is\n+   procedure Prim1 (Self : access Parent) is\n+   begin\n+      raise Program_Error;\n+   end;\n+\n+   procedure Prim1 (Self : access Child) is\n+   begin\n+     Child_Prim1_Called := True;\n+   end;\n+end;"}, {"sha": "d32afe2ae11b3ef9f5646c81a25df7dd6a578eb9", "filename": "gcc/testsuite/gnat.dg/tagged3_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b15ac5f0506f3d9c1cf0913024e1c721521f7c0/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged3_pkg.ads?ref=5b15ac5f0506f3d9c1cf0913024e1c721521f7c0", "patch": "@@ -0,0 +1,9 @@\n+package Tagged3_Pkg is\n+   type Parent is tagged null record;\n+   procedure Prim1 (Self : access Parent);\n+\n+   type Child is new Parent with null record;\n+   procedure Prim1 (Self : access Child);\n+\n+   Child_Prim1_Called : Boolean := False;\n+end;"}]}