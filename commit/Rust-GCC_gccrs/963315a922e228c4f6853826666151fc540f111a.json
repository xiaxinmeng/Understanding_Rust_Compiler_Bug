{"sha": "963315a922e228c4f6853826666151fc540f111a", "node_id": "C_kwDOANBUbNoAKDk2MzMxNWE5MjJlMjI4YzRmNjg1MzgyNjY2NjE1MWZjNTQwZjExMWE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-31T09:12:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-31T09:12:19Z"}, "message": "i386: Fix up ix86_convert_const_wide_int_to_broadcast [PR108599]\n\nThe following testcase is miscompiled.  The problem is that during\nRTL DSE we see a V4DI register is being loaded { 16, 16, 0, 0 }\nvalue and DSE mostly works in terms of scalar modes, so it calls\nmovoi to set an OImode REG to (const_wide_int 0x100000000000000010)\nand ix86_convert_const_wide_int_to_broadcast thinks it can compute\nthat value by broadcasting DImode 0x10.  While it is true that\nfor TImode result the broadcast could be used, for OImode/XImode\nit can't be, because all but the lowest 2 HOST_WIDE_INTs aren't\npresent (so are 0 or -1 depending on sign), not 0x10 in this case.\nThe function checks if the least significant HOST_WIDE_INT elt\nof the CONST_WIDE_INT is broadcastable from QI/HI/SI/DImode and then\n  /* Check if OP can be broadcasted from VAL.  */\n  for (int i = 1; i < CONST_WIDE_INT_NUNITS (op); i++)\n    if (val != CONST_WIDE_INT_ELT (op, i))\n      return nullptr;\nThat is needed of course, but nothing checks that\nCONST_WIDE_INT_NUNITS (op) isn't too small for the mode in question.\nI think if op would be 0 or -1, it ought to be never CONST_WIDE_INT,\nbut CONST_INT and so we can just punt whenever the number of\nCONST_WIDE_INT elts is not the expected one.\n\n2023-01-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/108599\n\t* config/i386/i386-expand.cc\n\t(ix86_convert_const_wide_int_to_broadcast): Return nullptr if\n\tCONST_WIDE_INT_NUNITS (op) times HOST_BITS_PER_WIDE_INT isn't\n\tequal to bitsize of mode.\n\n\t* gcc.target/i386/avx2-pr108599.c: New test.", "tree": {"sha": "010e34bfbebe9d1793a3c020827c564be9a39fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/010e34bfbebe9d1793a3c020827c564be9a39fb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/963315a922e228c4f6853826666151fc540f111a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963315a922e228c4f6853826666151fc540f111a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/963315a922e228c4f6853826666151fc540f111a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963315a922e228c4f6853826666151fc540f111a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78d6489f736963a8a07c494294c72662c49e8e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d6489f736963a8a07c494294c72662c49e8e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78d6489f736963a8a07c494294c72662c49e8e63"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "e59c7b0150f9e6c834fa5d3dc7802941e193617b", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963315a922e228c4f6853826666151fc540f111a/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963315a922e228c4f6853826666151fc540f111a/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=963315a922e228c4f6853826666151fc540f111a", "patch": "@@ -291,7 +291,9 @@ ix86_convert_const_wide_int_to_broadcast (machine_mode mode, rtx op)\n      broadcast only if vector broadcast is available.  */\n   if (!TARGET_AVX\n       || !CONST_WIDE_INT_P (op)\n-      || standard_sse_constant_p (op, mode))\n+      || standard_sse_constant_p (op, mode)\n+      || (CONST_WIDE_INT_NUNITS (op) * HOST_BITS_PER_WIDE_INT\n+\t  != GET_MODE_BITSIZE (mode)))\n     return nullptr;\n \n   HOST_WIDE_INT val = CONST_WIDE_INT_ELT (op, 0);"}, {"sha": "d5ddab7609fb239269c01b97a7efb52fa75405e4", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr108599.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963315a922e228c4f6853826666151fc540f111a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr108599.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963315a922e228c4f6853826666151fc540f111a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr108599.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr108599.c?ref=963315a922e228c4f6853826666151fc540f111a", "patch": "@@ -0,0 +1,32 @@\n+/* PR target/108599 */\n+/* { dg-do run { target avx2 } } */\n+/* { dg-options \"-O2 -mavx2 -mtune=skylake-avx512\" } */\n+\n+#include \"avx2-check.h\"\n+\n+struct S { unsigned long long a, b, c, d; };\n+\n+__attribute__((noipa)) void\n+foo (unsigned long long x, unsigned long long y,\n+     unsigned long long z, unsigned long long w, const struct S s)\n+{\n+  if (s.a != x || s.b != y || s.c != z || s.d != w)\n+    abort ();\n+}\n+\n+typedef unsigned long long V __attribute__((may_alias, vector_size (4 * sizeof (unsigned long long))));\n+\n+static void\n+avx2_test (void)\n+{\n+  {\n+    struct S s;\n+    *(V *)&s = (V) { 16, 0, 0, 0 };\n+    foo (16, 0, 0, 0, s);\n+  }\n+  {\n+    struct S s;\n+    *(V *)&s = (V) { 16, 16, 0, 0 };\n+    foo (16, 16, 0, 0, s);\n+  }\n+}"}]}