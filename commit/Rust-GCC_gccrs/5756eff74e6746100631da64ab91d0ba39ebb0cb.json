{"sha": "5756eff74e6746100631da64ab91d0ba39ebb0cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1NmVmZjc0ZTY3NDYxMDA2MzFkYTY0YWI5MWQwYmEzOWViYjBjYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-16T07:42:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-16T07:42:19Z"}, "message": "i386-protos.h (ix86_emit_mode_set): Add third argument.\n\n\t* config/i386/i386-protos.h (ix86_emit_mode_set): Add third argument.\n\t* config/i386/i386.h (EMIT_MODE_SET): Update.\n\t* config/i386/i386.c (ix86_avx_emit_vzeroupper): New function.\n\t(ix86_emit_mode_set) <AVX_U128>: Call ix86_avx_emit_vzeroupper.\n\nFrom-SVN: r193550", "tree": {"sha": "36891de864d94bc037bbbfedfbf8c453c4fdcdce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36891de864d94bc037bbbfedfbf8c453c4fdcdce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5756eff74e6746100631da64ab91d0ba39ebb0cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5756eff74e6746100631da64ab91d0ba39ebb0cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5756eff74e6746100631da64ab91d0ba39ebb0cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5756eff74e6746100631da64ab91d0ba39ebb0cb/comments", "author": null, "committer": null, "parents": [{"sha": "4888636ee7db5e1702b7716f9e07f3d5c0e69c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4888636ee7db5e1702b7716f9e07f3d5c0e69c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4888636ee7db5e1702b7716f9e07f3d5c0e69c23"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "c784188a26726491caf689787586fef5664072d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5756eff74e6746100631da64ab91d0ba39ebb0cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5756eff74e6746100631da64ab91d0ba39ebb0cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5756eff74e6746100631da64ab91d0ba39ebb0cb", "patch": "@@ -1,3 +1,10 @@\n+2012-11-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-protos.h (ix86_emit_mode_set): Add third argument.\n+\t* config/i386/i386.h (EMIT_MODE_SET): Update.\n+\t* config/i386/i386.c (ix86_avx_emit_vzeroupper): New function.\n+\t(ix86_emit_mode_set) <AVX_U128>: Call ix86_avx_emit_vzeroupper.\n+\n 2012-11-16  Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n \tbdver3 Enablement\n@@ -7,11 +14,11 @@\n \t(case ${target}): Add bdver3.\n \t* config/i386/i386.h (TARGET_BDVER3): New definition.\n \t* config/i386/i386.md (define_attr \"cpu\"): Add bdver3.\n-\t* config/i386/sse.md (sseshuf): New type attribute.\n-\t* config/i386/athlon.md (sseshuf):Likewise.\n-\t* config/i386/atom.md (sseshuf):Likewise.\n-\t* config/i386/ppro.md (sseshuf):Likewise.\n-\t* config/i386/bdver1.md (sseshuf):Likewise.\n+\t* config/i386/sse.md (sseshuf, sseshuf1): New type attributes.\n+\t* config/i386/athlon.md: Handle sseshuf attribute.\n+\t* config/i386/atom.md: Likewise.\n+\t* config/i386/ppro.md: Likewise.\n+\t* config/i386/bdver1.md: Likewise.\n \t* config/i386/i386.opt (flag_dispatch_scheduler): Add bdver3.\n \t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n \tbdver3 def_and_undef\n@@ -25,8 +32,7 @@\n \t(static const char *const cpu_names): Add bdver3 entry.\n \t(software_prefetching_beneficial_p): Add bdver3.\n \t(ix86_option_override_internal): Add bdver3 instruction sets.\n-\t(ix86_option_override_internal): Remove XSAVEOPT for bdver1 \n-\tand bdver2.\n+\t(ix86_option_override_internal): Remove XSAVEOPT for bdver1 and bdver2.\n \t(ix86_issue_rate): Add bdver3.\n \t(ix86_adjust_cost): Add bdver3.\n \t(enum target_cpu_default): Add TARGET_CPU_DEFAULT_bdver3.\n@@ -37,8 +43,7 @@\n \n \t* expmed.c (expand_shift_1): Don't strip non-integral SUBREGs.\n \n-\t* configure.ac: Add check for assembler SPARC4 instruction\n-\tsupport.\n+\t* configure.ac: Add check for assembler SPARC4 instruction support.\n \t* configure: Rebuild.\n \t* config.in: Add HAVE_AS_SPARC4 section.\n \t* config/sparc/sparc.opt (mcbcond): New option.\n@@ -92,9 +97,8 @@\n \t* asan.c (report_error_func): Set DECL_IGNORED_P, don't touch\n \tDECL_ASSEMBLER_NAME.\n \t(asan_init_func): Likewise.\n-\t(asan_finish_file): Use void * instead of __asan_global * as\n-\ttype of __asan_{,un}register_globals.  Set DECL_IGNORED_P on\n-\tthe decls.\n+\t(asan_finish_file): Use void * instead of __asan_global * as type of\n+\t__asan_{,un}register_globals.  Set DECL_IGNORED_P on the decls.\n \n 2012-11-15  Matthias Klose  <doko@ubuntu.com>\n "}, {"sha": "4c23f5758fa27f0b35318fe22b160d68ab5cc0ad", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5756eff74e6746100631da64ab91d0ba39ebb0cb/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5756eff74e6746100631da64ab91d0ba39ebb0cb/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=5756eff74e6746100631da64ab91d0ba39ebb0cb", "patch": "@@ -172,7 +172,10 @@ extern int ix86_mode_needed (int, rtx);\n extern int ix86_mode_after (int, int, rtx);\n extern int ix86_mode_entry (int);\n extern int ix86_mode_exit (int);\n-extern void ix86_emit_mode_set (int, int);\n+\n+#ifdef HARD_CONST\n+extern void ix86_emit_mode_set (int, int, HARD_REG_SET);\n+#endif\n \n extern void x86_order_regs_for_local_alloc (void);\n extern void x86_function_profiler (FILE *, int);"}, {"sha": "b4e4e72f8fcab7cc12c5bbf5a5325438139a2306", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5756eff74e6746100631da64ab91d0ba39ebb0cb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5756eff74e6746100631da64ab91d0ba39ebb0cb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5756eff74e6746100631da64ab91d0ba39ebb0cb", "patch": "@@ -15477,16 +15477,38 @@ emit_i387_cw_initialization (int mode)\n   emit_move_insn (new_mode, reg);\n }\n \n+/* Emit vzeroupper.  */\n+\n+void\n+ix86_avx_emit_vzeroupper (HARD_REG_SET regs_live)\n+{\n+  int i;\n+\n+  /* Cancel automatic vzeroupper insertion if there are\n+     live call-saved SSE registers at the insertion point.  */\n+\n+  for (i = FIRST_SSE_REG; i <= LAST_SSE_REG; i++)\n+    if (TEST_HARD_REG_BIT (regs_live, i) && !call_used_regs[i])\n+      return;\n+\n+  if (TARGET_64BIT)\n+    for (i = FIRST_REX_SSE_REG; i <= LAST_REX_SSE_REG; i++)\n+      if (TEST_HARD_REG_BIT (regs_live, i) && !call_used_regs[i])\n+\treturn;\n+\n+  emit_insn (gen_avx_vzeroupper ());\n+}\n+\n /* Generate one or more insns to set ENTITY to MODE.  */\n \n void\n-ix86_emit_mode_set (int entity, int mode)\n+ix86_emit_mode_set (int entity, int mode, HARD_REG_SET regs_live)\n {\n   switch (entity)\n     {\n     case AVX_U128:\n       if (mode == AVX_U128_CLEAN)\n-\temit_insn (gen_avx_vzeroupper ());\n+\tix86_avx_emit_vzeroupper (regs_live);\n       break;\n     case I387_TRUNC:\n     case I387_FLOOR:"}, {"sha": "0cdbee1e862672714ba2d882f0100c4c1e14792e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5756eff74e6746100631da64ab91d0ba39ebb0cb/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5756eff74e6746100631da64ab91d0ba39ebb0cb/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5756eff74e6746100631da64ab91d0ba39ebb0cb", "patch": "@@ -2226,7 +2226,7 @@ enum avx_u128_state\n    are to be inserted.  */\n \n #define EMIT_MODE_SET(ENTITY, MODE, HARD_REGS_LIVE) \\\n-  ix86_emit_mode_set ((ENTITY), (MODE))\n+  ix86_emit_mode_set ((ENTITY), (MODE), (HARD_REGS_LIVE))\n \f\n /* Avoid renaming of stack registers, as doing so in combination with\n    scheduling just increases amount of live registers at time and in"}]}