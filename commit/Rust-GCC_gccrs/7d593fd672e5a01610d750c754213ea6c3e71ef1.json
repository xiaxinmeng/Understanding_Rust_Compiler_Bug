{"sha": "7d593fd672e5a01610d750c754213ea6c3e71ef1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1OTNmZDY3MmU1YTAxNjEwZDc1MGM3NTQyMTNlYTZjM2U3MWVmMQ==", "commit": {"author": {"name": "Frederik Harwath", "email": "frederik@codesourcery.com", "date": "2020-01-20T06:45:43Z"}, "committer": {"name": "Frederik Harwath", "email": "frederik@codesourcery.com", "date": "2020-01-21T06:41:45Z"}, "message": "Add runtime ISA check for amdgcn offloading\n\nThe HSA/ROCm runtime rejects binaries not built for the exact GPU device\npresent. So far, the libgomp amdgcn plugin does not verify that the GPU ISA\nand the ISA specified at compile time match before handing over the binary to\nthe runtime.  In case of a mismatch, the user is confronted with an unhelpful\nruntime error.\n\nThis commit implements a runtime ISA check. In case of an ISA mismatch, the\nexecution is aborted with a clear error message and a hint at the correct\ncompilation parameters for the GPU on which the execution has been attempted.\n\nlibgomp/\n\t* plugin/plugin-gcn.c (EF_AMDGPU_MACH): New enum.\n\t* (EF_AMDGPU_MACH_MASK): New constant.\n\t* (gcn_isa): New typedef.\n\t* (gcn_gfx801_s): New constant.\n\t* (gcn_gfx803_s): New constant.\n\t* (gcn_gfx900_s): New constant.\n\t* (gcn_gfx906_s): New constant.\n\t* (gcn_isa_name_len): New constant.\n\t* (elf_gcn_isa_field): New function.\n\t* (isa_hsa_name): New function.\n\t* (isa_gcc_name): New function.\n\t* (isa_code): New function.\n\t* (struct agent_info): Add field \"device_isa\" and remove field\n\t\"gfx900_p\".\n\t* (GOMP_OFFLOAD_init_device): Adapt agent init to \"agent_info\"\n\tfield changes, fail if device has unknown ISA.\n\t* (parse_target_attributes): Replace \"gfx900_p\" by \"device_isa\".\n\t* (isa_matches_agent): New function ...\n\t* (create_and_finalize_hsa_program): ... used from here to check\n\tthat the GPU ISA and the code-object ISA match.", "tree": {"sha": "07ec446c5c2b4c95404aa7be7318f97c26fc7a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07ec446c5c2b4c95404aa7be7318f97c26fc7a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d593fd672e5a01610d750c754213ea6c3e71ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d593fd672e5a01610d750c754213ea6c3e71ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d593fd672e5a01610d750c754213ea6c3e71ef1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d593fd672e5a01610d750c754213ea6c3e71ef1/comments", "author": {"login": "frederik-h", "id": 22046314, "node_id": "MDQ6VXNlcjIyMDQ2MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/22046314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederik-h", "html_url": "https://github.com/frederik-h", "followers_url": "https://api.github.com/users/frederik-h/followers", "following_url": "https://api.github.com/users/frederik-h/following{/other_user}", "gists_url": "https://api.github.com/users/frederik-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederik-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederik-h/subscriptions", "organizations_url": "https://api.github.com/users/frederik-h/orgs", "repos_url": "https://api.github.com/users/frederik-h/repos", "events_url": "https://api.github.com/users/frederik-h/events{/privacy}", "received_events_url": "https://api.github.com/users/frederik-h/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frederik-h", "id": 22046314, "node_id": "MDQ6VXNlcjIyMDQ2MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/22046314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederik-h", "html_url": "https://github.com/frederik-h", "followers_url": "https://api.github.com/users/frederik-h/followers", "following_url": "https://api.github.com/users/frederik-h/following{/other_user}", "gists_url": "https://api.github.com/users/frederik-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederik-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederik-h/subscriptions", "organizations_url": "https://api.github.com/users/frederik-h/orgs", "repos_url": "https://api.github.com/users/frederik-h/repos", "events_url": "https://api.github.com/users/frederik-h/events{/privacy}", "received_events_url": "https://api.github.com/users/frederik-h/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a"}], "stats": {"total": 131, "additions": 127, "deletions": 4}, "files": [{"sha": "de470a3dd33c554117529314263a3e05529292e9", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 127, "deletions": 4, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d593fd672e5a01610d750c754213ea6c3e71ef1/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d593fd672e5a01610d750c754213ea6c3e71ef1/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=7d593fd672e5a01610d750c754213ea6c3e71ef1", "patch": "@@ -396,6 +396,20 @@ struct gcn_image_desc\n   struct global_var_info *global_variables;\n };\n \n+/* This enum mirrors the corresponding LLVM enum's values for all ISAs that we\n+   support.\n+   See https://llvm.org/docs/AMDGPUUsage.html#amdgpu-ef-amdgpu-mach-table */\n+\n+typedef enum {\n+  EF_AMDGPU_MACH_AMDGCN_GFX801 = 0x028,\n+  EF_AMDGPU_MACH_AMDGCN_GFX803 = 0x02a,\n+  EF_AMDGPU_MACH_AMDGCN_GFX900 = 0x02c,\n+  EF_AMDGPU_MACH_AMDGCN_GFX906 = 0x02f,\n+} EF_AMDGPU_MACH;\n+\n+const static int EF_AMDGPU_MACH_MASK = 0x000000ff;\n+typedef EF_AMDGPU_MACH gcn_isa;\n+\n /* Description of an HSA GPU agent (device) and the program associated with\n    it.  */\n \n@@ -408,8 +422,9 @@ struct agent_info\n   /* Whether the agent has been initialized.  The fields below are usable only\n      if it has been.  */\n   bool initialized;\n-  /* Precomputed check for problem architectures.  */\n-  bool gfx900_p;\n+\n+  /* The instruction set architecture of the device. */\n+  gcn_isa device_isa;\n \n   /* Command queues of the agent.  */\n   hsa_queue_t *sync_queue;\n@@ -1232,7 +1247,8 @@ parse_target_attributes (void **input,\n \n   if (gcn_dims_found)\n     {\n-      if (agent->gfx900_p && gcn_threads == 0 && override_z_dim == 0)\n+      if (agent->device_isa == EF_AMDGPU_MACH_AMDGCN_GFX900\n+\t  && gcn_threads == 0 && override_z_dim == 0)\n \t{\n \t  gcn_threads = 4;\n \t  GCN_WARNING (\"VEGA BUG WORKAROUND: reducing default number of \"\n@@ -1578,6 +1594,74 @@ get_data_memory_region (hsa_region_t region, void *data)\n \t\t\t    HSA_REGION_GLOBAL_FLAG_COARSE_GRAINED);\n }\n \n+static int\n+elf_gcn_isa_field (Elf64_Ehdr *image)\n+{\n+  return image->e_flags & EF_AMDGPU_MACH_MASK;\n+}\n+\n+const static char *gcn_gfx801_s = \"gfx801\";\n+const static char *gcn_gfx803_s = \"gfx803\";\n+const static char *gcn_gfx900_s = \"gfx900\";\n+const static char *gcn_gfx906_s = \"gfx906\";\n+const static int gcn_isa_name_len = 6;\n+\n+/* Returns the name that the HSA runtime uses for the ISA or NULL if we do not\n+   support the ISA. */\n+\n+static const char*\n+isa_hsa_name (int isa) {\n+  switch(isa)\n+    {\n+    case EF_AMDGPU_MACH_AMDGCN_GFX801:\n+      return gcn_gfx801_s;\n+    case EF_AMDGPU_MACH_AMDGCN_GFX803:\n+      return gcn_gfx803_s;\n+    case EF_AMDGPU_MACH_AMDGCN_GFX900:\n+      return gcn_gfx900_s;\n+    case EF_AMDGPU_MACH_AMDGCN_GFX906:\n+      return gcn_gfx906_s;\n+    }\n+  return NULL;\n+}\n+\n+/* Returns the user-facing name that GCC uses to identify the architecture (e.g.\n+   with -march) or NULL if we do not support the ISA.\n+   Keep in sync with /gcc/config/gcn/gcn.{c,opt}.  */\n+\n+static const char*\n+isa_gcc_name (int isa) {\n+  switch(isa)\n+    {\n+    case EF_AMDGPU_MACH_AMDGCN_GFX801:\n+      return \"carrizo\";\n+    case EF_AMDGPU_MACH_AMDGCN_GFX803:\n+      return \"fiji\";\n+    default:\n+      return isa_hsa_name (isa);\n+    }\n+}\n+\n+/* Returns the code which is used in the GCN object code to identify the ISA with\n+   the given name (as used by the HSA runtime).  */\n+\n+static gcn_isa\n+isa_code(const char *isa) {\n+  if (!strncmp (isa, gcn_gfx801_s, gcn_isa_name_len))\n+    return EF_AMDGPU_MACH_AMDGCN_GFX801;\n+\n+  if (!strncmp (isa, gcn_gfx803_s, gcn_isa_name_len))\n+    return EF_AMDGPU_MACH_AMDGCN_GFX803;\n+\n+  if (!strncmp (isa, gcn_gfx900_s, gcn_isa_name_len))\n+    return EF_AMDGPU_MACH_AMDGCN_GFX900;\n+\n+  if (!strncmp (isa, gcn_gfx906_s, gcn_isa_name_len))\n+    return EF_AMDGPU_MACH_AMDGCN_GFX906;\n+\n+  return -1;\n+}\n+\n /* }}}  */\n /* {{{ Run  */\n \n@@ -2257,6 +2341,39 @@ find_load_offset (Elf64_Addr *load_offset, struct agent_info *agent,\n   return res;\n }\n \n+/* Check that the GCN ISA of the given image matches the ISA of the agent. */\n+\n+static bool\n+isa_matches_agent (struct agent_info *agent, Elf64_Ehdr *image)\n+{\n+  int isa_field = elf_gcn_isa_field (image);\n+  const char* isa_s = isa_hsa_name (isa_field);\n+  if (!isa_s)\n+    {\n+      hsa_error (\"Unsupported ISA in GCN code object.\", HSA_STATUS_ERROR);\n+      return false;\n+    }\n+\n+  if (isa_field != agent->device_isa)\n+    {\n+      char msg[120];\n+      const char *agent_isa_s = isa_hsa_name (agent->device_isa);\n+      const char *agent_isa_gcc_s = isa_gcc_name (agent->device_isa);\n+      assert (agent_isa_s);\n+      assert (agent_isa_gcc_s);\n+\n+      snprintf (msg, sizeof msg,\n+\t\t\"GCN code object ISA '%s' does not match GPU ISA '%s'.\\n\"\n+\t\t\"Try to recompile with '-foffload=-march=%s'.\\n\",\n+\t\tisa_s, agent_isa_s, agent_isa_gcc_s);\n+\n+      hsa_error (msg, HSA_STATUS_ERROR);\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n /* Create and finalize the program consisting of all loaded modules.  */\n \n static bool\n@@ -2289,6 +2406,9 @@ create_and_finalize_hsa_program (struct agent_info *agent)\n     {\n       Elf64_Ehdr *image = (Elf64_Ehdr *)module->image_desc->gcn_image->image;\n \n+      if (!isa_matches_agent (agent, image))\n+\tgoto fail;\n+\n       /* Hide relocations from the HSA runtime loader.\n \t Keep a copy of the unmodified section headers to use later.  */\n       Elf64_Shdr *image_sections = (Elf64_Shdr *)((char *)image\n@@ -3294,7 +3414,10 @@ GOMP_OFFLOAD_init_device (int n)\n \t\t\t\t\t  &buf);\n   if (status != HSA_STATUS_SUCCESS)\n     return hsa_error (\"Error querying the name of the agent\", status);\n-  agent->gfx900_p = (strncmp (buf, \"gfx900\", 6) == 0);\n+\n+  agent->device_isa = isa_code (buf);\n+  if (agent->device_isa < 0)\n+    return hsa_error (\"Unknown GCN agent architecture.\", HSA_STATUS_ERROR);\n \n   status = hsa_fns.hsa_queue_create_fn (agent->id, queue_size,\n \t\t\t\t\tHSA_QUEUE_TYPE_MULTI,"}]}