{"sha": "e0a14f483979aea48f7588656b4269e1b9dbee34", "node_id": "C_kwDOANBUbNoAKGUwYTE0ZjQ4Mzk3OWFlYTQ4Zjc1ODg2NTZiNDI2OWUxYjlkYmVlMzQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-08T16:04:03Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-08T16:08:01Z"}, "message": "ADT's and tuples are valid to be unified with inference variables\n\nThere is some dulication here which will eventually go away with the\ncoercion site refactor which is still a WIP. Here we update the type rules\nso that we allow ADT's and tuples to unify and thus fulfill the type\ninference rules.\n\nAddresses #1447", "tree": {"sha": "2ee0b9bb4e3f5d6d431740c5fb61936ed197828d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ee0b9bb4e3f5d6d431740c5fb61936ed197828d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0a14f483979aea48f7588656b4269e1b9dbee34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a14f483979aea48f7588656b4269e1b9dbee34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a14f483979aea48f7588656b4269e1b9dbee34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a14f483979aea48f7588656b4269e1b9dbee34/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8749b66879f3ef78182d7712e5da981cc55f747a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8749b66879f3ef78182d7712e5da981cc55f747a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8749b66879f3ef78182d7712e5da981cc55f747a"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "34267b30838376227332049756f2b895adfc16b8", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a14f483979aea48f7588656b4269e1b9dbee34/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a14f483979aea48f7588656b4269e1b9dbee34/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=e0a14f483979aea48f7588656b4269e1b9dbee34", "patch": "@@ -1133,6 +1133,18 @@ class ADTCoercionRules : public BaseCoercionRules\n     resolved = type.clone ();\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCoercionRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1172,6 +1184,18 @@ class TupleCoercionRules : public BaseCoercionRules\n \t\t\t\t    type.get_ident ().locus, fields);\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCoercionRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n "}, {"sha": "ad2d4b79b00c606dd048c42117cbf77d58e37066", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a14f483979aea48f7588656b4269e1b9dbee34/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a14f483979aea48f7588656b4269e1b9dbee34/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=e0a14f483979aea48f7588656b4269e1b9dbee34", "patch": "@@ -1131,6 +1131,18 @@ class ADTRules : public BaseRules\n     resolved = type.clone ();\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n "}]}