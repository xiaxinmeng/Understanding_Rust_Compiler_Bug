{"sha": "4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE4NTc4MGI3NTE0M2ZhMjhiYzI2Y2U1MDhlYWZhOTVjNWY1YjNlOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-11-19T16:55:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-19T16:55:25Z"}, "message": "re PR libstdc++/41622 ([DR 1245] [c++0x] std::hash<std::string>::operator() copies its argument)\n\n2009-11-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/41622\n\t* include/bits/functional_hash.h: Implement inline the various\n\tstd::hash specializations, using, when appropriate, pass by\n\tconst ref too, per DR 1245.\n\t* include/tr1_impl/functional_hash.h: Remove, move its contents...\n\t* include/tr1/functional_hash.h: ... here.\n\t* include/std/functional: Tweak includes.\n\t* src/hash_c++0x: Rename to...\n\t* src/compatibility-c++0x.cc: ... this, implementing compatibility\n\tstd::hash<>::operator() specializations.\n\t* src/hash.cc: Do not mark specializations as throw().\n\t* src/Makefile.am: Adjust.\n\t* include/Makefile.am: Likewise.\n\t* src/Makefile.in: Regenerate.\n\t* include/Makefile.in: Likewise.\n\t* testsuite/util/testsuite_api.h: Define a dummy hash for\n\tNonDefaultConstructible.\n\t* testsuite/23_containers/unordered_map/requirements/\n\texplicit_instantiation/2.cc: Use it.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\nFrom-SVN: r154335", "tree": {"sha": "c2be9169ddada0db0f1c418fab39fb8d3c3ea0a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2be9169ddada0db0f1c418fab39fb8d3c3ea0a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/comments", "author": null, "committer": null, "parents": [{"sha": "d95ba652abbbfda10f29ca8b80c2126825a65eeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95ba652abbbfda10f29ca8b80c2126825a65eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d95ba652abbbfda10f29ca8b80c2126825a65eeb"}], "stats": {"total": 725, "additions": 468, "deletions": 257}, "files": [{"sha": "380b6d58db96339b9b8364becc240e6130d863f5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -1,3 +1,31 @@\n+2009-11-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/41622\n+\t* include/bits/functional_hash.h: Implement inline the various\n+\tstd::hash specializations, using, when appropriate, pass by\n+\tconst ref too, per DR 1245.\n+\t* include/tr1_impl/functional_hash.h: Remove, move its contents...\n+\t* include/tr1/functional_hash.h: ... here.\n+\t* include/std/functional: Tweak includes.\n+\t* src/hash_c++0x: Rename to...\n+\t* src/compatibility-c++0x.cc: ... this, implementing compatibility\n+\tstd::hash<>::operator() specializations.\n+\t* src/hash.cc: Do not mark specializations as throw().\n+\t* src/Makefile.am: Adjust.\n+\t* include/Makefile.am: Likewise.\n+\t* src/Makefile.in: Regenerate.\n+\t* include/Makefile.in: Likewise.\n+\t* testsuite/util/testsuite_api.h: Define a dummy hash for\n+\tNonDefaultConstructible.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\texplicit_instantiation/2.cc: Use it.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\n 2009-11-19  Johannes Singler  <singler@kit.edu>\n \n         * include/parallel/partition.h (__parallel_partition): Correctly\n@@ -8,7 +36,7 @@\n 2009-11-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/profile/impl/profiler.h: Remove namespace markup.\n-\t\n+\n 2009-11-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/profile/bitset: Tweak doxygen markup."}, {"sha": "47253e681c9661b8140c256ff62ee5682668bf6c", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -610,7 +610,6 @@ tr1_impl_headers = \\\n \t${tr1_impl_srcdir}/cwchar \\\n \t${tr1_impl_srcdir}/cwctype \\\n \t${tr1_impl_srcdir}/functional \\\n-\t${tr1_impl_srcdir}/functional_hash.h \\\n \t${tr1_impl_srcdir}/hashtable \\\n \t${tr1_impl_srcdir}/hashtable_policy.h \\\n \t${tr1_impl_srcdir}/regex \\"}, {"sha": "71e7489be368a703305425ea4652079959556bf1", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -850,7 +850,6 @@ tr1_impl_headers = \\\n \t${tr1_impl_srcdir}/cwchar \\\n \t${tr1_impl_srcdir}/cwctype \\\n \t${tr1_impl_srcdir}/functional \\\n-\t${tr1_impl_srcdir}/functional_hash.h \\\n \t${tr1_impl_srcdir}/hashtable \\\n \t${tr1_impl_srcdir}/hashtable_policy.h \\\n \t${tr1_impl_srcdir}/regex \\"}, {"sha": "c045ba08434104fede1757db635757d095c7c344", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 219, "deletions": 20, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -36,33 +36,232 @@\n # include <c++0x_warning.h>\n #endif\n \n-#if defined(_GLIBCXX_INCLUDE_AS_TR1)\n-#  error C++0x header cannot be included from TR1 header\n+#include <string>\n+#include <system_error>\n+\n+namespace std\n+{\n+  /// Class template hash.\n+  template<typename _Tp>\n+    struct hash;\n+\n+  /// Partial specializations for pointer types.\n+  template<typename _Tp>\n+    struct hash<_Tp*> : public std::unary_function<_Tp*, size_t>\n+    {\n+      size_t\n+      operator()(_Tp* __p) const\n+      { return reinterpret_cast<size_t>(__p); }\n+    };\n+\n+  /// Explicit specializations for integer types.\n+#define _Cxx_hashtable_define_trivial_hash(_Tp) \t       \\\n+  template<>\t\t\t\t\t\t       \\\n+    struct hash<_Tp> : public std::unary_function<_Tp, size_t> \\\n+    {                                                          \\\n+      size_t                                                   \\\n+      operator()(_Tp __val) const\t\t               \\\n+      { return static_cast<size_t>(__val); }\t\t       \\\n+    };\n+\n+  _Cxx_hashtable_define_trivial_hash(bool);\n+  _Cxx_hashtable_define_trivial_hash(char);\n+  _Cxx_hashtable_define_trivial_hash(signed char);\n+  _Cxx_hashtable_define_trivial_hash(unsigned char);\n+  _Cxx_hashtable_define_trivial_hash(wchar_t);\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  _Cxx_hashtable_define_trivial_hash(char16_t);\n+  _Cxx_hashtable_define_trivial_hash(char32_t);\n #endif\n+  _Cxx_hashtable_define_trivial_hash(short);\n+  _Cxx_hashtable_define_trivial_hash(int);\n+  _Cxx_hashtable_define_trivial_hash(long);\n+  _Cxx_hashtable_define_trivial_hash(long long);\n+  _Cxx_hashtable_define_trivial_hash(unsigned short);\n+  _Cxx_hashtable_define_trivial_hash(unsigned int);\n+  _Cxx_hashtable_define_trivial_hash(unsigned long);\n+  _Cxx_hashtable_define_trivial_hash(unsigned long long);\n+\n+#undef _Cxx_hashtable_define_trivial_hash\n+\n+  // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n+  // (Used by the next specializations of std::tr1::hash.)\n+\n+  /// Dummy generic implementation (for sizeof(size_t) != 4, 8).\n+  template<size_t = sizeof(size_t)>\n+    struct _Fnv_hash\n+    {\n+      static size_t\n+      hash(const char* __first, size_t __length)\n+      {\n+\tsize_t __result = 0;\n+\tfor (; __length > 0; --__length)\n+\t  __result = (__result * 131) + *__first++;\n+\treturn __result;\n+      }\n+    };\n+\n+  template<>\n+    struct _Fnv_hash<4>\n+    {\n+      static size_t\n+      hash(const char* __first, size_t __length)\n+      {\n+\tsize_t __result = static_cast<size_t>(2166136261UL);\n+\tfor (; __length > 0; --__length)\n+\t  {\n+\t    __result ^= static_cast<size_t>(*__first++);\n+\t    __result *= static_cast<size_t>(16777619UL);\n+\t  }\n+\treturn __result;\n+      }\n+    };\n+  \n+  template<>\n+    struct _Fnv_hash<8>\n+    {\n+      static size_t\n+      hash(const char* __first, size_t __length)\n+      {\n+\tsize_t __result =\n+\t  static_cast<size_t>(14695981039346656037ULL);\n+\tfor (; __length > 0; --__length)\n+\t  {\n+\t    __result ^= static_cast<size_t>(*__first++);\n+\t    __result *= static_cast<size_t>(1099511628211ULL);\n+\t  }\n+\treturn __result;\n+      }\n+    };\n+\n+  /// Explicit specializations for float.\n+  template<>\n+    struct hash<float>\n+    : public std::unary_function<float, size_t>\n+    {\n+      size_t\n+      operator()(float __val) const\n+      {\n+\tsize_t __result = 0;\n+      \n+\t// 0 and -0 both hash to zero.\n+\tif (__val != 0.0f)\n+\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n+\t\t\t\t       sizeof(__val));\n+\treturn __result;\n+      }\n+    };\n+\n+  /// Explicit specializations for double.\n+  template<>\n+    struct hash<double>\n+    : public std::unary_function<double, size_t>\n+    {\n+      size_t\n+      operator()(double __val) const\n+      {\n+\tsize_t __result = 0;\n+\n+\t// 0 and -0 both hash to zero.\n+\tif (__val != 0.0)\n+\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n+\t\t\t\t       sizeof(__val));\n+\treturn __result;\n+      }\n+    };\n \n-#if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n-#  include <tr1_impl/functional_hash.h>\n-#else\n-#  define _GLIBCXX_INCLUDE_AS_CXX0X\n-#  define _GLIBCXX_BEGIN_NAMESPACE_TR1\n-#  define _GLIBCXX_END_NAMESPACE_TR1\n-#  define _GLIBCXX_TR1\n-#  include <tr1_impl/functional_hash.h>\n-#  undef _GLIBCXX_TR1\n-#  undef _GLIBCXX_END_NAMESPACE_TR1\n-#  undef _GLIBCXX_BEGIN_NAMESPACE_TR1\n-#  undef _GLIBCXX_INCLUDE_AS_CXX0X\n+  /// Explicit specializations for long double.\n+  template<>\n+    struct hash<long double>\n+    : public std::unary_function<long double, size_t>\n+    {\n+      size_t\n+      operator()(long double __val) const\n+      {\n+\tsize_t __result = 0;\n+\n+\tint __exponent;\n+\t__val = __builtin_frexpl(__val, &__exponent);\n+\t__val = __val < 0.0l ? -(__val + 0.5l) : __val;\n+\n+\tconst long double __mult =\n+\t  __gnu_cxx::__numeric_traits<size_t>::__max + 1.0l;\n+\t__val *= __mult;\n+\n+\t// Try to use all the bits of the mantissa (really necessary only\n+\t// on 32-bit targets, at least for 80-bit floating point formats).\n+\tconst size_t __hibits = (size_t)__val;\n+\t__val = (__val - (long double)__hibits) * __mult;\n+\n+\tconst size_t __coeff =\n+\t  __gnu_cxx::__numeric_traits<size_t>::__max / __LDBL_MAX_EXP__;\n+\n+\t__result = __hibits + (size_t)__val + __coeff * __exponent;\n+\n+\treturn __result;\n+      }\n+    };\n+\n+  template<>\n+    struct hash<string>\n+    : public std::unary_function<string, size_t>\n+    {\n+      size_t\n+      operator()(const string& __s) const\n+      { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n+    };\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    struct hash<wstring>\n+    : public std::unary_function<wstring, size_t>\n+    {\n+      size_t\n+      operator()(const wstring& __s) const\n+      {\n+\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n+\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));\n+      }\n+    };\n #endif\n \n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  template<>\n+    struct hash<u16string>\n+    : public std::unary_function<u16string, size_t>\n+    {\n+      size_t\n+      operator()(const u16string& __s) const\n+      {\n+\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n+\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(char16_t));\n+      }\n+    };\n \n-namespace std\n-{\n-  struct error_code;\n+  template<>\n+    struct hash<u32string>\n+    : public std::unary_function<u32string, size_t>\n+    {\n+      size_t\n+      operator()(const u32string& __s) const\n+      {\n+\tconst char* __p = reinterpret_cast<const char*>(__s.data());\n+\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(char32_t));\n+      }\n+    };\n+#endif\n \n   template<>\n-    _GLIBCXX_PURE size_t\n-    hash<error_code>::operator()(error_code) const;\n+    struct hash<error_code>\n+    : public std::unary_function<error_code, size_t>\n+    {\n+      size_t\n+      operator()(const error_code& __e) const\n+      {\n+\tconst char* __p = reinterpret_cast<const char*>(&__e);\n+\treturn _Fnv_hash<>::hash(__p, sizeof(__e));\n+      }\n+    };\n }\n \n #endif // _FUNCTIONAL_HASH_H\n-"}, {"sha": "e46a27df12af750cfcd55c7815bb10506445bbd7", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -57,7 +57,6 @@\n #  include <new>\n #  include <tuple>\n #  include <type_traits>\n-#  include <bits/stringfwd.h>\n #  include <bits/functional_hash.h>\n #  include <ext/type_traits.h>\n #  if defined(_GLIBCXX_INCLUDE_AS_CXX0X)"}, {"sha": "d6849300f4c23557759f0bcdbb88a3c33aaf7ae8", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "modified", "additions": 148, "deletions": 16, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -1,6 +1,6 @@\n // TR1 functional_hash.h header -*- C++ -*-\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,22 +32,154 @@\n \n #pragma GCC system_header\n \n-#if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n-#  error TR1 header cannot be included from C++0x header\n-#endif\n+namespace std\n+{\n+namespace tr1\n+{\n+  /// Class template hash.\n+  // Declaration of default hash functor std::tr1::hash.  The types for\n+  // which std::tr1::hash<T> is well-defined is in clause 6.3.3. of the PDTR.\n+  template<typename _Tp>\n+    struct hash : public std::unary_function<_Tp, size_t>\n+    {\n+      size_t\n+      operator()(_Tp __val) const;\n+    };\n+\n+  /// Partial specializations for pointer types.\n+  template<typename _Tp>\n+    struct hash<_Tp*> : public std::unary_function<_Tp*, size_t>\n+    {\n+      size_t\n+      operator()(_Tp* __p) const\n+      { return reinterpret_cast<size_t>(__p); }\n+    };\n+\n+  /// Explicit specializations for integer types.\n+#define _TR1_hashtable_define_trivial_hash(_Tp) \t\\\n+  template<>\t\t\t\t\t\t\\\n+    inline size_t\t\t\t\t\t\\\n+    hash<_Tp>::operator()(_Tp __val) const\t\t\\\n+    { return static_cast<size_t>(__val); }\n+\n+  _TR1_hashtable_define_trivial_hash(bool);\n+  _TR1_hashtable_define_trivial_hash(char);\n+  _TR1_hashtable_define_trivial_hash(signed char);\n+  _TR1_hashtable_define_trivial_hash(unsigned char);\n+  _TR1_hashtable_define_trivial_hash(wchar_t);\n+  _TR1_hashtable_define_trivial_hash(short);\n+  _TR1_hashtable_define_trivial_hash(int);\n+  _TR1_hashtable_define_trivial_hash(long);\n+  _TR1_hashtable_define_trivial_hash(long long);\n+  _TR1_hashtable_define_trivial_hash(unsigned short);\n+  _TR1_hashtable_define_trivial_hash(unsigned int);\n+  _TR1_hashtable_define_trivial_hash(unsigned long);\n+  _TR1_hashtable_define_trivial_hash(unsigned long long);\n+\n+#undef _TR1_hashtable_define_trivial_hash\n+\n+  // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n+  // (Used by the next specializations of std::tr1::hash.)\n+\n+  /// Dummy generic implementation (for sizeof(size_t) != 4, 8).\n+  template<size_t = sizeof(size_t)>\n+    struct _Fnv_hash\n+    {\n+      static size_t\n+      hash(const char* __first, size_t __length)\n+      {\n+\tsize_t __result = 0;\n+\tfor (; __length > 0; --__length)\n+\t  __result = (__result * 131) + *__first++;\n+\treturn __result;\n+      }\n+    };\n+\n+  template<>\n+    struct _Fnv_hash<4>\n+    {\n+      static size_t\n+      hash(const char* __first, size_t __length)\n+      {\n+\tsize_t __result = static_cast<size_t>(2166136261UL);\n+\tfor (; __length > 0; --__length)\n+\t  {\n+\t    __result ^= static_cast<size_t>(*__first++);\n+\t    __result *= static_cast<size_t>(16777619UL);\n+\t  }\n+\treturn __result;\n+      }\n+    };\n+  \n+  template<>\n+    struct _Fnv_hash<8>\n+    {\n+      static size_t\n+      hash(const char* __first, size_t __length)\n+      {\n+\tsize_t __result =\n+\t  static_cast<size_t>(14695981039346656037ULL);\n+\tfor (; __length > 0; --__length)\n+\t  {\n+\t    __result ^= static_cast<size_t>(*__first++);\n+\t    __result *= static_cast<size_t>(1099511628211ULL);\n+\t  }\n+\treturn __result;\n+      }\n+    };\n+\n+  /// Explicit specializations for float.\n+  template<>\n+    inline size_t\n+    hash<float>::operator()(float __val) const\n+    {\n+      size_t __result = 0;\n+      \n+      // 0 and -0 both hash to zero.\n+      if (__val != 0.0f)\n+\t__result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n+\t\t\t\t     sizeof(__val));\n+      return __result;\n+    };\n+\n+  /// Explicit specializations for double.\n+  template<>\n+    inline size_t\n+    hash<double>::operator()(double __val) const\n+    {\n+\tsize_t __result = 0;\n+\n+\t// 0 and -0 both hash to zero.\n+\tif (__val != 0.0)\n+\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n+\t\t\t\t       sizeof(__val));\n+\treturn __result;\n+    };\n+\n+  /// Explicit specializations for long double.\n+  template<>\n+    _GLIBCXX_PURE size_t\n+    hash<long double>::operator()(long double __val) const;\n+\n+  /// Explicit specialization of member operator for non-builtin types.\n+  template<>\n+    _GLIBCXX_PURE size_t\n+    hash<string>::operator()(string) const;\n+\n+  template<>\n+    _GLIBCXX_PURE size_t\n+    hash<const string&>::operator()(const string&) const;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    _GLIBCXX_PURE size_t\n+    hash<wstring>::operator()(wstring) const;\n \n-#if defined(_GLIBCXX_INCLUDE_AS_TR1)\n-#  include <tr1_impl/functional_hash.h>\n-#else\n-#  define _GLIBCXX_INCLUDE_AS_TR1\n-#  define _GLIBCXX_BEGIN_NAMESPACE_TR1 namespace tr1 {\n-#  define _GLIBCXX_END_NAMESPACE_TR1 }\n-#  define _GLIBCXX_TR1 tr1::\n-#  include <tr1_impl/functional_hash.h>\n-#  undef _GLIBCXX_TR1\n-#  undef _GLIBCXX_END_NAMESPACE_TR1\n-#  undef _GLIBCXX_BEGIN_NAMESPACE_TR1\n-#  undef _GLIBCXX_INCLUDE_AS_TR1\n+  template<>\n+    _GLIBCXX_PURE size_t\n+    hash<const wstring&>::operator()(const wstring&) const;\n #endif\n+}\n+}\n \n #endif // _GLIBCXX_TR1_FUNCTIONAL_HASH_H"}, {"sha": "0b963e00f17c2c4ceecb667c4739da5a46e22ae8", "filename": "libstdc++-v3/include/tr1_impl/functional_hash.h", "status": "removed", "additions": 0, "deletions": 183, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95ba652abbbfda10f29ca8b80c2126825a65eeb/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95ba652abbbfda10f29ca8b80c2126825a65eeb/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h?ref=d95ba652abbbfda10f29ca8b80c2126825a65eeb", "patch": "@@ -1,183 +0,0 @@\n-// TR1 functional -*- C++ -*-\n-\n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file tr1_impl/functional_hash.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-namespace std\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_TR1\n-\n-  /// Class template hash.\n-  // Declaration of default hash functor std::tr1::hash.  The types for\n-  // which std::tr1::hash<T> is well-defined is in clause 6.3.3. of the PDTR.\n-  template<typename _Tp>\n-    struct hash : public std::unary_function<_Tp, size_t>\n-    {\n-      size_t\n-      operator()(_Tp __val) const;\n-    };\n-\n-  /// Partial specializations for pointer types.\n-  template<typename _Tp>\n-    struct hash<_Tp*> : public std::unary_function<_Tp*, size_t>\n-    {\n-      size_t\n-      operator()(_Tp* __p) const\n-      { return reinterpret_cast<size_t>(__p); }\n-    };\n-\n-  /// Explicit specializations for integer types.\n-#define _TR1_hashtable_define_trivial_hash(_Tp) \t\\\n-  template<>\t\t\t\t\t\t\\\n-    inline size_t\t\t\t\t\t\\\n-    hash<_Tp>::operator()(_Tp __val) const\t\t\\\n-    { return static_cast<size_t>(__val); }\n-\n-  _TR1_hashtable_define_trivial_hash(bool);\n-  _TR1_hashtable_define_trivial_hash(char);\n-  _TR1_hashtable_define_trivial_hash(signed char);\n-  _TR1_hashtable_define_trivial_hash(unsigned char);\n-  _TR1_hashtable_define_trivial_hash(wchar_t);\n-#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n-  _TR1_hashtable_define_trivial_hash(char16_t);\n-  _TR1_hashtable_define_trivial_hash(char32_t);\n-#endif\n-  _TR1_hashtable_define_trivial_hash(short);\n-  _TR1_hashtable_define_trivial_hash(int);\n-  _TR1_hashtable_define_trivial_hash(long);\n-  _TR1_hashtable_define_trivial_hash(long long);\n-  _TR1_hashtable_define_trivial_hash(unsigned short);\n-  _TR1_hashtable_define_trivial_hash(unsigned int);\n-  _TR1_hashtable_define_trivial_hash(unsigned long);\n-  _TR1_hashtable_define_trivial_hash(unsigned long long);\n-\n-#undef _TR1_hashtable_define_trivial_hash\n-\n-  // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n-  // (Used by the next specializations of std::tr1::hash.)\n-\n-  /// Dummy generic implementation (for sizeof(size_t) != 4, 8).\n-  template<size_t = sizeof(size_t)>\n-    struct _Fnv_hash\n-    {\n-      static size_t\n-      hash(const char* __first, size_t __length)\n-      {\n-\tsize_t __result = 0;\n-\tfor (; __length > 0; --__length)\n-\t  __result = (__result * 131) + *__first++;\n-\treturn __result;\n-      }\n-    };\n-\n-  template<>\n-    struct _Fnv_hash<4>\n-    {\n-      static size_t\n-      hash(const char* __first, size_t __length)\n-      {\n-\tsize_t __result = static_cast<size_t>(2166136261UL);\n-\tfor (; __length > 0; --__length)\n-\t  {\n-\t    __result ^= static_cast<size_t>(*__first++);\n-\t    __result *= static_cast<size_t>(16777619UL);\n-\t  }\n-\treturn __result;\n-      }\n-    };\n-  \n-  template<>\n-    struct _Fnv_hash<8>\n-    {\n-      static size_t\n-      hash(const char* __first, size_t __length)\n-      {\n-\tsize_t __result =\n-\t  static_cast<size_t>(14695981039346656037ULL);\n-\tfor (; __length > 0; --__length)\n-\t  {\n-\t    __result ^= static_cast<size_t>(*__first++);\n-\t    __result *= static_cast<size_t>(1099511628211ULL);\n-\t  }\n-\treturn __result;\n-      }\n-    };\n-\n-  /// Explicit specializations for float.\n-  template<>\n-    inline size_t\n-    hash<float>::operator()(float __val) const\n-    {\n-      size_t __result = 0;\n-      \n-      // 0 and -0 both hash to zero.\n-      if (__val != 0.0f)\n-\t__result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n-\t\t\t\t     sizeof(__val));\n-      return __result;\n-    };\n-\n-  /// Explicit specializations for double.\n-  template<>\n-    inline size_t\n-    hash<double>::operator()(double __val) const\n-    {\n-\tsize_t __result = 0;\n-\n-\t// 0 and -0 both hash to zero.\n-\tif (__val != 0.0)\n-\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n-\t\t\t\t       sizeof(__val));\n-\treturn __result;\n-    };\n-\n-  /// Explicit specializations for long double.\n-  template<>\n-    _GLIBCXX_PURE size_t\n-    hash<long double>::operator()(long double __val) const;\n-\n-  /// Explicit specialization of member operator for non-builtin types.\n-  template<>\n-    _GLIBCXX_PURE size_t\n-    hash<string>::operator()(string) const;\n-\n-  template<>\n-    _GLIBCXX_PURE size_t\n-    hash<const string&>::operator()(const string&) const;\n-\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template<>\n-    _GLIBCXX_PURE size_t\n-    hash<wstring>::operator()(wstring) const;\n-\n-  template<>\n-    _GLIBCXX_PURE size_t\n-    hash<const wstring&>::operator()(const wstring&) const;\n-#endif\n-\n-_GLIBCXX_END_NAMESPACE_TR1\n-}"}, {"sha": "4306dd5c7c24063c8c46c3c6d292c39c34130fd8", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -140,12 +140,12 @@ sources = \\\n \tmt_allocator.cc \\\n \tcodecvt.cc \\\n \tcompatibility.cc \\\n+\tcompatibility-c++0x.cc \\\n \tcomplex_io.cc \\\n \tctype.cc \\\n \tdebug.cc \\\n \tfunctexcept.cc \\\n \thash_tr1.cc \\\n-\thash_c++0x.cc \\\n \tglobals_io.cc \\\n \thashtable_tr1.cc \\\n \thashtable_c++0x.cc \\\n@@ -260,9 +260,9 @@ condition_variable.lo: condition_variable.cc\n condition_variable.o: condition_variable.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n-hash_c++0x.lo: hash_c++0x.cc\n+compatibility-c++0x.lo: compatibility-c++0x.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n-hash_c++0x.o: hash_c++0x.cc\n+compatibility-c++0x.o: compatibility-c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n hashtable_c++0x.lo: hashtable_c++0x.cc"}, {"sha": "8cc950f0c175fc47dcf2f68d54162caf868561a8", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -87,8 +87,8 @@ LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__DEPENDENCIES_1 =\n am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tpool_allocator.cc mt_allocator.cc codecvt.cc compatibility.cc \\\n-\tcomplex_io.cc ctype.cc debug.cc functexcept.cc hash_tr1.cc \\\n-\thash_c++0x.cc globals_io.cc hashtable_tr1.cc \\\n+\tcompatibility-c++0x.cc complex_io.cc ctype.cc debug.cc \\\n+\tfunctexcept.cc hash_tr1.cc globals_io.cc hashtable_tr1.cc \\\n \thashtable_c++0x.cc ios.cc ios_failure.cc ios_init.cc \\\n \tios_locale.cc limits.cc limits_c++0x.cc list.cc debug_list.cc \\\n \tlocale.cc locale_init.cc locale_facets.cc localename.cc \\\n@@ -113,18 +113,18 @@ am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n am__objects_4 = basic_file.lo c++locale.lo $(am__objects_2) \\\n \t$(am__objects_3)\n am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n-\tmt_allocator.lo codecvt.lo compatibility.lo complex_io.lo \\\n-\tctype.lo debug.lo functexcept.lo hash_tr1.lo hash_c++0x.lo \\\n-\tglobals_io.lo hashtable_tr1.lo hashtable_c++0x.lo ios.lo \\\n-\tios_failure.lo ios_init.lo ios_locale.lo limits.lo \\\n-\tlimits_c++0x.lo list.lo debug_list.lo locale.lo locale_init.lo \\\n-\tlocale_facets.lo localename.lo math_stubs_float.lo \\\n-\tmath_stubs_long_double.lo stdexcept.lo strstream.lo \\\n-\tsystem_error.lo tree.lo allocator-inst.lo concept-inst.lo \\\n-\tfstream-inst.lo ext-inst.lo ios-inst.lo iostream-inst.lo \\\n-\tistream-inst.lo istream.lo locale-inst.lo misc-inst.lo \\\n-\tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n-\tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n+\tmt_allocator.lo codecvt.lo compatibility.lo \\\n+\tcompatibility-c++0x.lo complex_io.lo ctype.lo debug.lo \\\n+\tfunctexcept.lo hash_tr1.lo globals_io.lo hashtable_tr1.lo \\\n+\thashtable_c++0x.lo ios.lo ios_failure.lo ios_init.lo \\\n+\tios_locale.lo limits.lo limits_c++0x.lo list.lo debug_list.lo \\\n+\tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n+\tmath_stubs_float.lo math_stubs_long_double.lo stdexcept.lo \\\n+\tstrstream.lo system_error.lo tree.lo allocator-inst.lo \\\n+\tconcept-inst.lo fstream-inst.lo ext-inst.lo ios-inst.lo \\\n+\tiostream-inst.lo istream-inst.lo istream.lo locale-inst.lo \\\n+\tmisc-inst.lo ostream-inst.lo sstream-inst.lo streambuf-inst.lo \\\n+\tstreambuf.lo string-inst.lo valarray-inst.lo wlocale-inst.lo \\\n \twstring-inst.lo mutex.lo condition_variable.lo chrono.lo \\\n \tthread.lo future.lo $(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n@@ -382,12 +382,12 @@ sources = \\\n \tmt_allocator.cc \\\n \tcodecvt.cc \\\n \tcompatibility.cc \\\n+\tcompatibility-c++0x.cc \\\n \tcomplex_io.cc \\\n \tctype.cc \\\n \tdebug.cc \\\n \tfunctexcept.cc \\\n \thash_tr1.cc \\\n-\thash_c++0x.cc \\\n \tglobals_io.cc \\\n \thashtable_tr1.cc \\\n \thashtable_c++0x.cc \\\n@@ -891,9 +891,9 @@ condition_variable.lo: condition_variable.cc\n condition_variable.o: condition_variable.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n-hash_c++0x.lo: hash_c++0x.cc\n+compatibility-c++0x.lo: compatibility-c++0x.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n-hash_c++0x.o: hash_c++0x.cc\n+compatibility-c++0x.o: compatibility-c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n hashtable_c++0x.lo: hashtable_c++0x.cc"}, {"sha": "0e92135d403b254104b6286112b983e0d3d4b9ea", "filename": "libstdc++-v3/src/compatibility-c++0x.cc", "status": "renamed", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -1,6 +1,6 @@\n-// std::hash definitions -*- C++ -*-\n+// Compatibility symbols for previous versions, C++0x bits -*- C++ -*-\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,15 +25,38 @@\n #include <cstddef>\n #include <string>\n #include <cmath>\n-#include <functional>\n #include <system_error>\n \n #ifndef __GXX_EXPERIMENTAL_CXX0X__\n-# error \"hash_c++0x.cc must be compiled with -std=gnu++0x\"\n+# error \"compatibility-c++0x.cc must be compiled with -std=gnu++0x\"\n #endif\n \n namespace std\n {\n+  // We need these due to the symbols exported since GLIBCXX_3.4.10.\n+  // See libstdc++/41662 for details.\n+\n+  template<typename _Tp>\n+    struct hash : public std::unary_function<_Tp, size_t>\n+    {\n+      size_t\n+      operator()(_Tp __val) const;\n+    };\n+\n+  /// Dummy generic implementation (for sizeof(size_t) != 4, 8).\n+  template<size_t = sizeof(size_t)>\n+    struct _Fnv_hash\n+    {\n+      static size_t\n+      hash(const char* __first, size_t __length)\n+      {\n+\tsize_t __result = 0;\n+\tfor (; __length > 0; --__length)\n+\t  __result = (__result * 131) + *__first++;\n+\treturn __result;\n+      }\n+    };\n+\n #include \"hash.cc\"\n \n   template<>", "previous_filename": "libstdc++-v3/src/hash_c++0x.cc"}, {"sha": "cc2385875ebe201dcc04c3d464d35838c08325f4", "filename": "libstdc++-v3/src/hash.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -26,7 +26,7 @@\n   // 10 bytes -> 12 bytes) and resort to frexp.\n   template<>\n     size_t\n-    hash<long double>::operator()(long double __val) const throw ()\n+    hash<long double>::operator()(long double __val) const\n     {\n       size_t __result = 0;\n \n@@ -59,7 +59,7 @@\n \n   template<>\n     size_t\n-    hash<const string&>::operator()(const string& __s) const throw ()\n+    hash<const string&>::operator()(const string& __s) const\n     { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -73,7 +73,7 @@\n \n   template<>\n     size_t\n-    hash<const wstring&>::operator()(const wstring& __s) const throw ()\n+    hash<const wstring&>::operator()(const wstring& __s) const\n     {\n       const char* __p = reinterpret_cast<const char*>(__s.data());\n       return _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));"}, {"sha": "851790824e825cce7e9ddb0dff477d18c35a82d2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -24,5 +24,6 @@\n #include <testsuite_hooks.h>\n #include <testsuite_api.h>\n \n-typedef __gnu_test::NonDefaultConstructible inst_type;\n-template class std::unordered_map<inst_type, inst_type>;\n+typedef __gnu_test::NonDefaultConstructible      inst_type;\n+typedef __gnu_test::NonDefaultConstructible_hash hash_type;\n+template class std::unordered_map<inst_type, inst_type, hash_type>;"}, {"sha": "2eef3715df650cee8b5fd12a6ddf9abcf78a2e9e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -24,5 +24,6 @@\n #include <testsuite_hooks.h>\n #include <testsuite_api.h>\n \n-typedef __gnu_test::NonDefaultConstructible inst_type;\n-template class std::unordered_multimap<inst_type, inst_type>;\n+typedef __gnu_test::NonDefaultConstructible      inst_type;\n+typedef __gnu_test::NonDefaultConstructible_hash hash_type;\n+template class std::unordered_multimap<inst_type, inst_type, hash_type>;"}, {"sha": "5764e924e39fb795290df030a44ea046e09d10e7", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -24,4 +24,6 @@\n #include <testsuite_hooks.h>\n #include <testsuite_api.h>\n \n-template class std::unordered_multiset<__gnu_test::NonDefaultConstructible>;\n+typedef __gnu_test::NonDefaultConstructible      inst_type;\n+typedef __gnu_test::NonDefaultConstructible_hash hash_type;\n+template class std::unordered_multiset<inst_type, hash_type>;"}, {"sha": "e22760460447145001eb8e04c0fb4cfeeeb24a18", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -24,4 +24,6 @@\n #include <testsuite_hooks.h>\n #include <testsuite_api.h>\n \n-template class std::unordered_set<__gnu_test::NonDefaultConstructible>;\n+typedef __gnu_test::NonDefaultConstructible      inst_type;\n+typedef __gnu_test::NonDefaultConstructible_hash hash_type;\n+template class std::unordered_set<inst_type, hash_type>;"}, {"sha": "4dc4a6fb7bba13543f924c1bd785393f6b821a28", "filename": "libstdc++-v3/testsuite/util/testsuite_api.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a85780b75143fa28bc26ce508eafa95c5f5b3e8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h?ref=4a85780b75143fa28bc26ce508eafa95c5f5b3e8", "patch": "@@ -19,6 +19,7 @@\n // <http://www.gnu.org/licenses/>.\n //\n \n+#include <cstddef>\n #include <exception>\n #include <testsuite_hooks.h>\n \n@@ -103,6 +104,14 @@ namespace __gnu_test\n   operator<(const NonDefaultConstructible&, const NonDefaultConstructible&)\n   { return false; }\n \n+  // For 23 unordered_* requirements.\n+  struct NonDefaultConstructible_hash\n+  {\n+    size_t\n+    operator()(NonDefaultConstructible) const\n+    { return 1; }\n+  };\n+\n   // For 26 numeric algorithms requirements, need addable,\n   // subtractable, multiplicable.\n   inline NonDefaultConstructible\n@@ -141,6 +150,6 @@ namespace __gnu_test\n       operator()() const\n       { return result_type(2); }\n     };\n-\n }\n+\n #endif"}]}