{"sha": "7b3ab05e789445ae6b21463ec01cc2d77bd21171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzYWIwNWU3ODk0NDVhZTZiMjE0NjNlYzAxY2MyZDc3YmQyMTE3MQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-05-11T21:44:22Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-05-11T21:44:22Z"}, "message": "(cse_insn): Set src_eqv if the dest is a STRICT_LOW_PART.\n\nFrom-SVN: r7278", "tree": {"sha": "cf1f4b11159275483d2a2fe3f218a8208b571a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf1f4b11159275483d2a2fe3f218a8208b571a71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b3ab05e789445ae6b21463ec01cc2d77bd21171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3ab05e789445ae6b21463ec01cc2d77bd21171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3ab05e789445ae6b21463ec01cc2d77bd21171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3ab05e789445ae6b21463ec01cc2d77bd21171/comments", "author": null, "committer": null, "parents": [{"sha": "c5bd3be879186eb78b92f12050e928391d8e874d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5bd3be879186eb78b92f12050e928391d8e874d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5bd3be879186eb78b92f12050e928391d8e874d"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "926f06b68a02379c1b52b112550b3ccc6b4a5259", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3ab05e789445ae6b21463ec01cc2d77bd21171/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3ab05e789445ae6b21463ec01cc2d77bd21171/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=7b3ab05e789445ae6b21463ec01cc2d77bd21171", "patch": "@@ -6044,10 +6044,14 @@ cse_insn (insn, in_libcall_block)\n       fold_rtx (x, insn);\n     }\n \n-  /* Store the equivalent value in SRC_EQV, if different.  */\n+  /* Store the equivalent value in SRC_EQV, if different, or if the DEST\n+     is a STRICT_LOW_PART.  The latter condition is necessary because SRC_EQV\n+     is handled specially for this case, and if it isn't set, then there will\n+     be no equivalence for the destinatation.  */\n   if (n_sets == 1 && REG_NOTES (insn) != 0\n       && (tem = find_reg_note (insn, REG_EQUAL, NULL_RTX)) != 0\n-      && ! rtx_equal_p (XEXP (tem, 0), SET_SRC (sets[0].rtl)))\n+      && (! rtx_equal_p (XEXP (tem, 0), SET_SRC (sets[0].rtl))\n+\t  || GET_CODE (SET_DEST (sets[0].rtl)) == STRICT_LOW_PART))\n     src_eqv = canon_reg (XEXP (tem, 0), NULL_RTX);\n \n   /* Canonicalize sources and addresses of destinations."}]}