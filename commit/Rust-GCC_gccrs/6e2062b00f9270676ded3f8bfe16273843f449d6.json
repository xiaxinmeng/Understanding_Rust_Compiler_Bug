{"sha": "6e2062b00f9270676ded3f8bfe16273843f449d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUyMDYyYjAwZjkyNzA2NzZkZWQzZjhiZmUxNjI3Mzg0M2Y0NDlkNg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-02-18T10:04:30Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-02-18T10:04:30Z"}, "message": "re PR fortran/47767 ([OOP] SELECT TYPE fails to execute correct TYPE IS block)\n\n2011-02-18  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47767\n\t* gfortran.h (gfc_check_access): Removed prototype.\n\t(gfc_check_symbol_access): Added prototype.\n\t* module.c (gfc_check_access): Renamed to 'check_access', made static.\n\t(gfc_check_symbol_access): New function, basically a shortcut for\n\t'check_access'.\n\t(write_dt_extensions,write_symbol0,write_generic,write_symtree): Use\n\t'gfc_check_symbol_access'.\n\t(write_operator,write_module): Renamed 'gfc_check_access'.\n\t* resolve.c (resolve_fl_procedure,resolve_fl_derived,\n\tresolve_fl_namelist,resolve_symbol,resolve_fntype): Use\n\t'gfc_check_symbol_access'.\n\n2011-02-18  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47767\n\t* gfortran.dg/class_40.f03: New.\n\nFrom-SVN: r170269", "tree": {"sha": "f939ee5f342a8d69cc75d3718d60eb5ece79abb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f939ee5f342a8d69cc75d3718d60eb5ece79abb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e2062b00f9270676ded3f8bfe16273843f449d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2062b00f9270676ded3f8bfe16273843f449d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e2062b00f9270676ded3f8bfe16273843f449d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2062b00f9270676ded3f8bfe16273843f449d6/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f7d4b122b583abdbeb0681908da858ad7149d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7d4b122b583abdbeb0681908da858ad7149d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7d4b122b583abdbeb0681908da858ad7149d9f"}], "stats": {"total": 127, "additions": 90, "deletions": 37}, "files": [{"sha": "8d7614ad5109ad1f2b7d5274ad289df8e80a5333", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6e2062b00f9270676ded3f8bfe16273843f449d6", "patch": "@@ -1,3 +1,18 @@\n+2011-02-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47767\n+\t* gfortran.h (gfc_check_access): Removed prototype.\n+\t(gfc_check_symbol_access): Added prototype.\n+\t* module.c (gfc_check_access): Renamed to 'check_access', made static.\n+\t(gfc_check_symbol_access): New function, basically a shortcut for\n+\t'check_access'.\n+\t(write_dt_extensions,write_symbol0,write_generic,write_symtree): Use\n+\t'gfc_check_symbol_access'.\n+\t(write_operator,write_module): Renamed 'gfc_check_access'.\n+\t* resolve.c (resolve_fl_procedure,resolve_fl_derived,\n+\tresolve_fl_namelist,resolve_symbol,resolve_fntype): Use\n+\t'gfc_check_symbol_access'.\n+\n 2011-02-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/47745"}, {"sha": "ae1253400f1d75d65533b8a722c72d20a563e2d0", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=6e2062b00f9270676ded3f8bfe16273843f449d6", "patch": "@@ -2832,7 +2832,7 @@ gfc_try gfc_resolve_wait (gfc_wait *);\n void gfc_module_init_2 (void);\n void gfc_module_done_2 (void);\n void gfc_dump_module (const char *, int);\n-bool gfc_check_access (gfc_access, gfc_access);\n+bool gfc_check_symbol_access (gfc_symbol *);\n void gfc_free_use_stmts (gfc_use_list *);\n \n /* primary.c */"}, {"sha": "6f1520c0205eff9d2649035ba7180fda0226c078", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=6e2062b00f9270676ded3f8bfe16273843f449d6", "patch": "@@ -4592,8 +4592,8 @@ read_module (void)\n    PRIVATE, then private, and otherwise it is public unless the default\n    access in this context has been declared PRIVATE.  */\n \n-bool\n-gfc_check_access (gfc_access specific_access, gfc_access default_access)\n+static bool\n+check_access (gfc_access specific_access, gfc_access default_access)\n {\n   if (specific_access == ACCESS_PUBLIC)\n     return TRUE;\n@@ -4607,6 +4607,16 @@ gfc_check_access (gfc_access specific_access, gfc_access default_access)\n }\n \n \n+bool\n+gfc_check_symbol_access (gfc_symbol *sym)\n+{\n+  if (sym->attr.vtab || sym->attr.vtype)\n+    return true;\n+  else\n+    return check_access (sym->attr.access, sym->ns->default_access);\n+}\n+\n+\n /* A structure to remember which commons we've already written.  */\n \n struct written_common\n@@ -4792,8 +4802,7 @@ write_equiv (void)\n static void\n write_dt_extensions (gfc_symtree *st)\n {\n-  if (!gfc_check_access (st->n.sym->attr.access,\n-\t\t\t st->n.sym->ns->default_access))\n+  if (!gfc_check_symbol_access (st->n.sym))\n     return;\n \n   mio_lparen ();\n@@ -4874,7 +4883,7 @@ write_symbol0 (gfc_symtree *st)\n       && !sym->attr.subroutine && !sym->attr.function)\n     dont_write = true;\n \n-  if (!gfc_check_access (sym->attr.access, sym->ns->default_access))\n+  if (!gfc_check_symbol_access (sym))\n     dont_write = true;\n \n   if (!dont_write)\n@@ -4931,8 +4940,7 @@ write_operator (gfc_user_op *uop)\n   static char nullstring[] = \"\";\n   const char *p = nullstring;\n \n-  if (uop->op == NULL\n-      || !gfc_check_access (uop->access, uop->ns->default_access))\n+  if (uop->op == NULL || !check_access (uop->access, uop->ns->default_access))\n     return;\n \n   mio_symbol_interface (&uop->name, &p, &uop->op);\n@@ -4956,8 +4964,7 @@ write_generic (gfc_symtree *st)\n   if (!sym || check_unique_name (st->name))\n     return;\n \n-  if (sym->generic == NULL\n-      || !gfc_check_access (sym->attr.access, sym->ns->default_access))\n+  if (sym->generic == NULL || !gfc_check_symbol_access (sym))\n     return;\n \n   if (sym->module == NULL)\n@@ -4982,7 +4989,7 @@ write_symtree (gfc_symtree *st)\n \t&& sym->ns->proc_name->attr.if_source == IFSRC_IFBODY)\n     return;\n \n-  if (!gfc_check_access (sym->attr.access, sym->ns->default_access)\n+  if (!gfc_check_symbol_access (sym)\n       || (sym->attr.flavor == FL_PROCEDURE && sym->attr.generic\n \t  && !sym->attr.subroutine && !sym->attr.function))\n     return;\n@@ -5013,8 +5020,8 @@ write_module (void)\n       if (i == INTRINSIC_USER)\n \tcontinue;\n \n-      mio_interface (gfc_check_access (gfc_current_ns->operator_access[i],\n-\t\t\t\t       gfc_current_ns->default_access)\n+      mio_interface (check_access (gfc_current_ns->operator_access[i],\n+\t\t\t\t   gfc_current_ns->default_access)\n \t\t     ? &gfc_current_ns->op[i] : NULL);\n     }\n "}, {"sha": "1c1024378645793b6b8f0927693b196dd166a48e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=6e2062b00f9270676ded3f8bfe16273843f449d6", "patch": "@@ -10146,7 +10146,7 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n      the host.  */\n   if (!(sym->ns->parent\n \t&& sym->ns->parent->proc_name->attr.flavor == FL_MODULE)\n-      && gfc_check_access(sym->attr.access, sym->ns->default_access))\n+      && gfc_check_symbol_access (sym))\n     {\n       gfc_interface *iface;\n \n@@ -10155,8 +10155,7 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t  if (arg->sym\n \t      && arg->sym->ts.type == BT_DERIVED\n \t      && !arg->sym->ts.u.derived->attr.use_assoc\n-\t      && !gfc_check_access (arg->sym->ts.u.derived->attr.access,\n-\t\t\t\t    arg->sym->ts.u.derived->ns->default_access)\n+\t      && !gfc_check_symbol_access (arg->sym->ts.u.derived)\n \t      && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: '%s' is of a \"\n \t\t\t\t \"PRIVATE type and cannot be a dummy argument\"\n \t\t\t\t \" of '%s', which is PUBLIC at %L\",\n@@ -10178,8 +10177,7 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t      if (arg->sym\n \t\t  && arg->sym->ts.type == BT_DERIVED\n \t\t  && !arg->sym->ts.u.derived->attr.use_assoc\n-\t\t  && !gfc_check_access (arg->sym->ts.u.derived->attr.access,\n-\t\t\t\t\targ->sym->ts.u.derived->ns->default_access)\n+\t\t  && !gfc_check_symbol_access (arg->sym->ts.u.derived)\n \t\t  && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: Procedure \"\n \t\t\t\t     \"'%s' in PUBLIC interface '%s' at %L \"\n \t\t\t\t     \"takes dummy arguments of '%s' which is \"\n@@ -10203,8 +10201,7 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t      if (arg->sym\n \t\t  && arg->sym->ts.type == BT_DERIVED\n \t\t  && !arg->sym->ts.u.derived->attr.use_assoc\n-\t\t  && !gfc_check_access (arg->sym->ts.u.derived->attr.access,\n-\t\t\t\t\targ->sym->ts.u.derived->ns->default_access)\n+\t\t  && !gfc_check_symbol_access (arg->sym->ts.u.derived)\n \t\t  && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: Procedure \"\n \t\t\t\t     \"'%s' in PUBLIC interface '%s' at %L \"\n \t\t\t\t     \"takes dummy arguments of '%s' which is \"\n@@ -11655,11 +11652,10 @@ resolve_fl_derived (gfc_symbol *sym)\n \n       if (c->ts.type == BT_DERIVED\n \t  && sym->component_access != ACCESS_PRIVATE\n-\t  && gfc_check_access (sym->attr.access, sym->ns->default_access)\n+\t  && gfc_check_symbol_access (sym)\n \t  && !is_sym_host_assoc (c->ts.u.derived, sym->ns)\n \t  && !c->ts.u.derived->attr.use_assoc\n-\t  && !gfc_check_access (c->ts.u.derived->attr.access,\n-\t\t\t\tc->ts.u.derived->ns->default_access)\n+\t  && !gfc_check_symbol_access (c->ts.u.derived)\n \t  && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: the component '%s' \"\n \t\t\t     \"is a PRIVATE type and cannot be a component of \"\n \t\t\t     \"'%s', which is PUBLIC at %L\", c->name,\n@@ -11823,14 +11819,13 @@ resolve_fl_namelist (gfc_symbol *sym)\n     }\n \n   /* Reject PRIVATE objects in a PUBLIC namelist.  */\n-  if (gfc_check_access(sym->attr.access, sym->ns->default_access))\n+  if (gfc_check_symbol_access (sym))\n     {\n       for (nl = sym->namelist; nl; nl = nl->next)\n \t{\n \t  if (!nl->sym->attr.use_assoc\n \t      && !is_sym_host_assoc (nl->sym, sym->ns)\n-\t      && !gfc_check_access(nl->sym->attr.access,\n-\t\t\t\tnl->sym->ns->default_access))\n+\t      && !gfc_check_symbol_access (nl->sym))\n \t    {\n \t      gfc_error (\"NAMELIST object '%s' was declared PRIVATE and \"\n \t\t\t \"cannot be member of PUBLIC namelist '%s' at %L\",\n@@ -11851,9 +11846,7 @@ resolve_fl_namelist (gfc_symbol *sym)\n \t  /* Types with private components that are defined in the same module.  */\n \t  if (nl->sym->ts.type == BT_DERIVED\n \t      && !is_sym_host_assoc (nl->sym->ts.u.derived, sym->ns)\n-\t      && !gfc_check_access (nl->sym->ts.u.derived->attr.private_comp\n-\t\t\t\t\t? ACCESS_PRIVATE : ACCESS_UNKNOWN,\n-\t\t\t\t\tnl->sym->ns->default_access))\n+\t      && nl->sym->ts.u.derived->attr.private_comp)\n \t    {\n \t      gfc_error (\"NAMELIST object '%s' has PRIVATE components and \"\n \t\t\t \"cannot be a member of PUBLIC namelist '%s' at %L\",\n@@ -12226,8 +12219,7 @@ resolve_symbol (gfc_symbol *sym)\n \treturn;\n \n       gfc_find_symbol (sym->ts.u.derived->name, sym->ns, 1, &ds);\n-      if (!ds && sym->attr.function\n-\t    && gfc_check_access (sym->attr.access, sym->ns->default_access))\n+      if (!ds && sym->attr.function && gfc_check_symbol_access (sym))\n \t{\n \t  symtree = gfc_new_symtree (&sym->ns->sym_root,\n \t\t\t\t     sym->ts.u.derived->name);\n@@ -12243,9 +12235,8 @@ resolve_symbol (gfc_symbol *sym)\n   if (sym->ts.type == BT_DERIVED\n       && sym->ns->proc_name && sym->ns->proc_name->attr.flavor == FL_MODULE\n       && !sym->ts.u.derived->attr.use_assoc\n-      && gfc_check_access (sym->attr.access, sym->ns->default_access)\n-      && !gfc_check_access (sym->ts.u.derived->attr.access,\n-\t\t\t    sym->ts.u.derived->ns->default_access)\n+      && gfc_check_symbol_access (sym)\n+      && !gfc_check_symbol_access (sym->ts.u.derived)\n       && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: PUBLIC %s '%s' at %L \"\n \t\t         \"of PRIVATE derived type '%s'\",\n \t\t\t (sym->attr.flavor == FL_PARAMETER) ? \"parameter\"\n@@ -13356,9 +13347,8 @@ resolve_fntype (gfc_namespace *ns)\n \n   if (sym->ts.type == BT_DERIVED && !sym->ts.u.derived->attr.use_assoc\n       && !sym->attr.contained\n-      && !gfc_check_access (sym->ts.u.derived->attr.access,\n-\t\t\t    sym->ts.u.derived->ns->default_access)\n-      && gfc_check_access (sym->attr.access, sym->ns->default_access))\n+      && !gfc_check_symbol_access (sym->ts.u.derived)\n+      && gfc_check_symbol_access (sym))\n     {\n       gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: PUBLIC function '%s' at \"\n \t\t      \"%L of PRIVATE type '%s'\", sym->name,"}, {"sha": "998cfc211fab62bc66ec865d6c216be60fa2f73e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e2062b00f9270676ded3f8bfe16273843f449d6", "patch": "@@ -1,3 +1,8 @@\n+2011-02-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47767\n+\t* gfortran.dg/class_40.f03: New.\n+\n 2011-02-18  Dodji Seketeli  <dodji@redhat.com>\n \n     \tPR c++/47208"}, {"sha": "bd367dfe5b54ba6646e90317bfac228da1cf12ec", "filename": "gcc/testsuite/gfortran.dg/class_40.f03", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_40.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2062b00f9270676ded3f8bfe16273843f449d6/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_40.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_40.f03?ref=6e2062b00f9270676ded3f8bfe16273843f449d6", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+!\n+! PR 47767: [OOP] SELECT TYPE fails to execute correct TYPE IS block\n+!\n+! Contributed by Andrew Benson <abenson@caltech.edu>\n+\n+module Tree_Nodes\n+  type treeNode\n+   contains\n+     procedure :: walk\n+  end type\n+contains\n+  subroutine walk (thisNode)\n+    class (treeNode) :: thisNode\n+    print *, SAME_TYPE_AS (thisNode, treeNode())\n+  end subroutine\n+end module\n+\n+module Merger_Trees\n+  use Tree_Nodes\n+  private\n+  type(treeNode), public :: baseNode\n+end module\n+\n+module Merger_Tree_Build\n+  use Merger_Trees\n+end module\n+\n+program test\n+  use Merger_Tree_Build\n+  use Tree_Nodes\n+  type(treeNode) :: node\n+  call walk (node)\n+end program\n+\n+! { dg-final { cleanup-modules \"Tree_Nodes Merger_Trees Merger_Tree_Build\" } }"}]}