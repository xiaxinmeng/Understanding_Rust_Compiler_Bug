{"sha": "72c243017dee611bf3c32ea7bfad6ac538021aaf", "node_id": "C_kwDOANBUbNoAKDcyYzI0MzAxN2RlZTYxMWJmM2MzMmVhN2JmYWQ2YWM1MzgwMjFhYWY", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-12T09:20:52Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-12T09:20:52Z"}, "message": "PR middle-end/98420: Don't fold x - x to 0.0 with -frounding-math\n\nThis patch addresses PR middle-end/98420, which is inappropriate constant\nfolding of x - x to 0.0 (in match.pd) when -frounding-math is specified.\nSpecifically, x - x may be -0.0 with FE_DOWNWARD as the rounding mode.\n\nTo summarize, the desired IEEE behaviour, x - x for floating point x,\n(1) can't be folded to 0.0 by default, due to the possibility of NaN or Inf\n(2) can be folded to 0.0 with -ffinite-math-only\n(3) can't be folded to 0.0 with -ffinite-math-only -frounding-math\n(4) can be folded with -ffinite-math-only -frounding-math -fno-signed-zeros\n\n2022-03-12  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR middle-end/98420\n\t* match.pd (minus @0 @0): Additional checks for -fno-rounding-math\n\t(the defaut) or -fno-signed-zeros.\n\ngcc/testsuite/ChangeLog\n\tPR middle-end/98420\n\t* gcc.dg/pr98420.c: New test case.", "tree": {"sha": "29fdccad56796b5a6ffd64e9312a9a999448b6fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29fdccad56796b5a6ffd64e9312a9a999448b6fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72c243017dee611bf3c32ea7bfad6ac538021aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c243017dee611bf3c32ea7bfad6ac538021aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72c243017dee611bf3c32ea7bfad6ac538021aaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c243017dee611bf3c32ea7bfad6ac538021aaf/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cb27b85a7b977958d53e1a29596ba211d21dde2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb27b85a7b977958d53e1a29596ba211d21dde2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb27b85a7b977958d53e1a29596ba211d21dde2"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "8b44b5cc92c50e553b7e91ff2923519a6b1a2b70", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c243017dee611bf3c32ea7bfad6ac538021aaf/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c243017dee611bf3c32ea7bfad6ac538021aaf/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=72c243017dee611bf3c32ea7bfad6ac538021aaf", "patch": "@@ -229,13 +229,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* Simplify x - x.\n    This is unsafe for certain floats even in non-IEEE formats.\n    In IEEE, it is unsafe because it does wrong for NaNs.\n+   PR middle-end/98420: x - x may be -0.0 with FE_DOWNWARD.\n    Also note that operand_equal_p is always false if an operand\n    is volatile.  */\n (simplify\n  (minus @0 @0)\n  (if (!FLOAT_TYPE_P (type)\n       || (!tree_expr_maybe_nan_p (@0)\n-\t  && !tree_expr_maybe_infinite_p (@0)))\n+\t  && !tree_expr_maybe_infinite_p (@0)\n+\t  && (!HONOR_SIGN_DEPENDENT_ROUNDING (type)\n+\t      || !HONOR_SIGNED_ZEROS (type))))\n   { build_zero_cst (type); }))\n (simplify\n  (pointer_diff @@0 @0)"}, {"sha": "c289b845d630a7ae8c6f8f07270f27ef59c883bf", "filename": "gcc/testsuite/gcc.dg/pr98420.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c243017dee611bf3c32ea7bfad6ac538021aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98420.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c243017dee611bf3c32ea7bfad6ac538021aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98420.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98420.c?ref=72c243017dee611bf3c32ea7bfad6ac538021aaf", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffinite-math-only -frounding-math -fdump-tree-optimized\" } */\n+double foo (double a)\n+{\n+  return a - a;\n+}\n+\n+/* { dg-final { scan-tree-dump \" = a_\\[0-9\\]\\\\(D\\\\) - a_\\[0-9\\]\\\\(D\\\\);\" \"optimized\" } } */"}]}