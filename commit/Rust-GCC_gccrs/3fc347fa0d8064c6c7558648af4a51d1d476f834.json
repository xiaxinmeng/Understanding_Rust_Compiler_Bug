{"sha": "3fc347fa0d8064c6c7558648af4a51d1d476f834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjMzQ3ZmEwZDgwNjRjNmM3NTU4NjQ4YWY0YTUxZDFkNDc2ZjgzNA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-01-21T02:12:01Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-01-21T02:12:01Z"}, "message": "(copy_loop_body): When check for shared address givs, use new same_insn field.\n\n(copy_loop_body): When check for shared address givs, use\nnew same_insn field.\n(find_splittable_givs): New variable v2.  Scan givs to set new\nsame_insn field.  Use same_insn to indentify address givs to be\nshared.\n\nFrom-SVN: r8786", "tree": {"sha": "4d863102585eba6bd2323d9126410ea5c2142a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d863102585eba6bd2323d9126410ea5c2142a4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fc347fa0d8064c6c7558648af4a51d1d476f834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc347fa0d8064c6c7558648af4a51d1d476f834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc347fa0d8064c6c7558648af4a51d1d476f834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc347fa0d8064c6c7558648af4a51d1d476f834/comments", "author": null, "committer": null, "parents": [{"sha": "f415f7bed7fbb4d07a67879d2eddd1dc6e8fdc2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f415f7bed7fbb4d07a67879d2eddd1dc6e8fdc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f415f7bed7fbb4d07a67879d2eddd1dc6e8fdc2a"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "784e09a68e7898c450660fb10cca4a02d19e50f4", "filename": "gcc/unroll.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc347fa0d8064c6c7558648af4a51d1d476f834/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc347fa0d8064c6c7558648af4a51d1d476f834/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=3fc347fa0d8064c6c7558648af4a51d1d476f834", "patch": "@@ -1547,8 +1547,7 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n \t\t\t/* Check for shared address givs, and avoid\n \t\t\t   incrementing the shared psuedo reg more than\n \t\t\t   once.  */\n-\t\t\tif (! (tv != v && tv->insn == v->insn\n-\t\t\t       && tv->new_reg == v->new_reg))\n+\t\t\tif (! tv->same_insn)\n \t\t\t  {\n \t\t\t    /* tv->dest_reg may actually be a (PLUS (REG)\n \t\t\t       (CONST)) here, so we must call plus_constant\n@@ -2449,11 +2448,19 @@ find_splittable_givs (bl, unroll_type, loop_start, loop_end, increment,\n      rtx increment;\n      int unroll_number;\n {\n-  struct induction *v;\n+  struct induction *v, *v2;\n   rtx final_value;\n   rtx tem;\n   int result = 0;\n \n+  /* Scan the list of givs, and set the same_insn field when there are\n+     multiple identical givs in the same insn.  */\n+  for (v = bl->giv; v; v = v->next_iv)\n+    for (v2 = v->next_iv; v2; v2 = v2->next_iv)\n+      if (v->insn == v2->insn && rtx_equal_p (v->new_reg, v2->new_reg)\n+\t  && ! v2->same_insn)\n+\tv2->same_insn = v;\n+\n   for (v = bl->giv; v; v = v->next_iv)\n     {\n       rtx giv_inc, value;\n@@ -2629,14 +2636,13 @@ find_splittable_givs (bl, unroll_type, loop_start, loop_end, increment,\n \n \t      v->const_adjust = 0;\n \n-\t      if (v->same && v->same->insn == v->insn\n-\t\t  && v->new_reg == v->same->new_reg)\n+\t      if (v->same_insn)\n \t\t{\n-\t\t  v->dest_reg = v->same->dest_reg;\n+\t\t  v->dest_reg = v->same_insn->dest_reg;\n \t\t  if (loop_dump_stream)\n \t\t    fprintf (loop_dump_stream,\n-\t\t\t     \"Sharing address givs with reg %d\\n\",\n-\t\t\t     REGNO (v->dest_reg));\n+\t\t\t     \"Sharing address givs in insn %d\\n\",\n+\t\t\t     INSN_UID (v->insn));\n \t\t}\n \t      else if (unroll_type != UNROLL_COMPLETELY)\n \t\t{"}]}