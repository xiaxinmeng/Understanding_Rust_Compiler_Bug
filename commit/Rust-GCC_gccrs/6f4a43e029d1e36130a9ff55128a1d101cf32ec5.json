{"sha": "6f4a43e029d1e36130a9ff55128a1d101cf32ec5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0YTQzZTAyOWQxZTM2MTMwYTlmZjU1MTI4YTFkMTAxY2YzMmVjNQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-11T06:28:00Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-11T06:28:00Z"}, "message": "stmt.c (expand_return): If asked to return the RESULT_DECL, just call expand_value_return on result_rtl.\n\n\t* stmt.c (expand_return): If asked to return the RESULT_DECL,\n\tjust call expand_value_return on result_rtl.\n\nFrom-SVN: r85795", "tree": {"sha": "89b4cb40824a7b6f34fb1a33c8593dbfdf639b5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89b4cb40824a7b6f34fb1a33c8593dbfdf639b5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f4a43e029d1e36130a9ff55128a1d101cf32ec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4a43e029d1e36130a9ff55128a1d101cf32ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4a43e029d1e36130a9ff55128a1d101cf32ec5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4a43e029d1e36130a9ff55128a1d101cf32ec5/comments", "author": null, "committer": null, "parents": [{"sha": "1a186ec5586436555a30227776d75c2516fd5911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a186ec5586436555a30227776d75c2516fd5911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a186ec5586436555a30227776d75c2516fd5911"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "b0c3d9c4ff81187bc38cef5962df93df391a108f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4a43e029d1e36130a9ff55128a1d101cf32ec5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4a43e029d1e36130a9ff55128a1d101cf32ec5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f4a43e029d1e36130a9ff55128a1d101cf32ec5", "patch": "@@ -1,3 +1,8 @@\n+2004-08-10  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* stmt.c (expand_return): If asked to return the RESULT_DECL,\n+\tjust call expand_value_return on result_rtl.\n+\n 2004-08-10  Richard Henderson  <rth@redhat.com>\n \n \t* builtins.def (BUILT_IN_STACK_ALLOC): Remove.\n@@ -107,7 +112,7 @@\n \t* config/arm/t-bpabi: New file.\n \t* doc/tm.texi (TARGET_LIBGCC_FUNCS): New entry.\n \t(TARGET_LIB_INT_CMP_BIASED): Likewise.\n-\t\n+\n 2004-08-10  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000-protos.h (expand_block_clear): Declare.\n@@ -121,7 +126,7 @@\n \t* varasm.c (unlikely_section_label): New global variable.\n \t(unlikely_text_section_name): New global variable.\n \t(text_section):  Remove alignment statement.\n-\t(unlikely_text_section): Remove alignment statement; use \n+\t(unlikely_text_section): Remove alignment statement; use\n \tunlikely_section_label rather than hard-coded string.\n \t(assemble_start_function): Initialize unlikely_section_label and\n \tunlikely_text_section_name;  make sure cold section is properly\n@@ -138,7 +143,7 @@\n \t(\"*tmqi_mem\"): Remove SUBREG from pattern.\n \t(\"*anddi3_cconly\"): Prevent accidentally matching TM pattern.\n \t(\"*andsi3_cconly\"): Likewise.\n-\t\n+\n 2004-08-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/16909\n@@ -171,9 +176,9 @@\n \t* tree-cfg.c (bsi_insert_before, bsi_insert_after): Call modify_stmt\n \tafter linking stmt into the program.\n \t(bsi_remove): Don't call modify_stmt.\n-\t* tree-complex.c (update_complex_assignment, \n+\t* tree-complex.c (update_complex_assignment,\n \texpand_complex_comparison): Call modify_stmt after changing the stmt.\n-\t* tree-outof-ssa.c (rewrite_trees): Call modify_stmt only if not \n+\t* tree-outof-ssa.c (rewrite_trees): Call modify_stmt only if not\n \tremoving the stmt.\n \t* tree-ssa-ccp.c (substitute_and_fold): Call modify_stmt after changing\n \tthe stmt, and only if needed.\n@@ -182,14 +187,14 @@\n \t(simplify_rhs_and_lookup_avail_expr): Don't take an annotation param.\n \t(simplify_cond_and_lookup_avail_expr): Use modify_stmt.\n \t(simplify_switch_and_lookup_avail_expr): Don't take an annotation param.\n-\t(eliminate_redundant_computations): Don't pass an annotation. Call \n+\t(eliminate_redundant_computations): Don't pass an annotation. Call\n \tmodify_stmt rather than setting the annotation directly.\n \t(record_equivalences_from_stmt): Remove unused local 'j'.\n \t(cprop_operand): Take a stmt rather than an annotation as a parameter.\n \tCall modify_stmt.\n \t(cprop_into_stmt): Pass stmt rather than annotation.\n \t(update_rhs_and_lookup_avail_expr): Call modify_stmt.\n-\t* tree-ssa-loop-im.c (schedule_sm): Call get_stmt_ann rather than \n+\t* tree-ssa-loop-im.c (schedule_sm): Call get_stmt_ann rather than\n \tmodify_stmt.\n \t* tree-ssa.c (propagate_into_addr): Dont call modify_stmt.\n "}, {"sha": "9425cffc89eec1738939a045407bd4e492f0d7a4", "filename": "gcc/stmt.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4a43e029d1e36130a9ff55128a1d101cf32ec5/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4a43e029d1e36130a9ff55128a1d101cf32ec5/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6f4a43e029d1e36130a9ff55128a1d101cf32ec5", "patch": "@@ -1635,8 +1635,6 @@ expand_return (tree retval)\n       expand_null_return ();\n       return;\n     }\n-  else if (TREE_CODE (retval) == RESULT_DECL)\n-    retval_rhs = retval;\n   else if ((TREE_CODE (retval) == MODIFY_EXPR\n \t    || TREE_CODE (retval) == INIT_EXPR)\n \t   && TREE_CODE (TREE_OPERAND (retval, 0)) == RESULT_DECL)\n@@ -1646,16 +1644,21 @@ expand_return (tree retval)\n \n   result_rtl = DECL_RTL (DECL_RESULT (current_function_decl));\n \n+  /* If we are returning the RESULT_DECL, then the value has already\n+     been stored into it, so we don't have to do anything special.  */\n+  if (TREE_CODE (retval_rhs) == RESULT_DECL)\n+    expand_value_return (result_rtl);\n+\n   /* If the result is an aggregate that is being returned in one (or more)\n      registers, load the registers here.  The compiler currently can't handle\n      copying a BLKmode value into registers.  We could put this code in a\n      more general area (for use by everyone instead of just function\n      call/return), but until this feature is generally usable it is kept here\n      (and in expand_call).  */\n \n-  if (retval_rhs != 0\n-      && TYPE_MODE (TREE_TYPE (retval_rhs)) == BLKmode\n-      && REG_P (result_rtl))\n+  else if (retval_rhs != 0\n+\t   && TYPE_MODE (TREE_TYPE (retval_rhs)) == BLKmode\n+\t   && REG_P (result_rtl))\n     {\n       int i;\n       unsigned HOST_WIDE_INT bitpos, xbitpos;"}]}