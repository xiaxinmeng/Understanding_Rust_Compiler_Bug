{"sha": "012c53688f45b1f6adcfe36b4ce5ec01b7f95944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEyYzUzNjg4ZjQ1YjFmNmFkY2ZlMzZiNGNlNWVjMDFiN2Y5NTk0NA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2006-10-29T23:08:23Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2006-10-29T23:08:23Z"}, "message": "builtins.c (fold_builtin_hypot): Rearrange recursive transformation before others, and also do ABS_EXPR.\n\n\t* builtins.c (fold_builtin_hypot): Rearrange recursive\n\ttransformation before others, and also do ABS_EXPR.  When\n\tnecessary, check flag_unsafe_math_optimizations.  When necessary,\n\tadd fabs.\n\ntestsuite:\n\t* gcc.dg/builtins-20.c: Add more hypot tests.\n\nFrom-SVN: r118160", "tree": {"sha": "528c604c4234ce45889c8180077ec5e944d5ea0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/528c604c4234ce45889c8180077ec5e944d5ea0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/012c53688f45b1f6adcfe36b4ce5ec01b7f95944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/012c53688f45b1f6adcfe36b4ce5ec01b7f95944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/012c53688f45b1f6adcfe36b4ce5ec01b7f95944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/012c53688f45b1f6adcfe36b4ce5ec01b7f95944/comments", "author": null, "committer": null, "parents": [{"sha": "cd07aa11f91bcd8b0eb89d0f60412b3008a0ca6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd07aa11f91bcd8b0eb89d0f60412b3008a0ca6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd07aa11f91bcd8b0eb89d0f60412b3008a0ca6a"}], "stats": {"total": 126, "additions": 107, "deletions": 19}, "files": [{"sha": "c4f0bcd6cc7f85535621f2016a5b7ac31fedab29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/012c53688f45b1f6adcfe36b4ce5ec01b7f95944/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/012c53688f45b1f6adcfe36b4ce5ec01b7f95944/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=012c53688f45b1f6adcfe36b4ce5ec01b7f95944", "patch": "@@ -1,3 +1,10 @@\n+2006-10-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_hypot): Rearrange recursive\n+\ttransformation before others, and also do ABS_EXPR.  When\n+\tnecessary, check flag_unsafe_math_optimizations.  When necessary,\n+\tadd fabs.\n+\n 2006-10-29  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold_comparison): Fold ~X op ~Y as Y op X."}, {"sha": "3af86cc105816c5652db181f0bc8025631779efd", "filename": "gcc/builtins.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/012c53688f45b1f6adcfe36b4ce5ec01b7f95944/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/012c53688f45b1f6adcfe36b4ce5ec01b7f95944/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=012c53688f45b1f6adcfe36b4ce5ec01b7f95944", "patch": "@@ -7677,35 +7677,40 @@ fold_builtin_hypot (tree fndecl, tree arglist, tree type)\n   if ((res = do_mpfr_arg2 (arg0, arg1, type, mpfr_hypot)))\n     return res;\n   \n+  /* If either argument to hypot has a negate or abs, strip that off.\n+     E.g. hypot(-x,fabs(y)) -> hypot(x,y).  */\n+  if (TREE_CODE (arg0) == NEGATE_EXPR || TREE_CODE (arg1) == NEGATE_EXPR\n+      || TREE_CODE (arg0) == ABS_EXPR || TREE_CODE (arg1) == ABS_EXPR)\n+    {\n+      tree narg0 = (TREE_CODE (arg0) == NEGATE_EXPR\n+\t\t    || TREE_CODE (arg0) == ABS_EXPR)\n+\t? TREE_OPERAND (arg0, 0) : arg0;\n+      tree narg1 = (TREE_CODE (arg1) == NEGATE_EXPR\n+\t\t    || TREE_CODE (arg1) == ABS_EXPR)\n+\t? TREE_OPERAND (arg1, 0) : arg1;\n+      tree narglist = tree_cons (NULL_TREE, narg0,\n+\t\t\t\t build_tree_list (NULL_TREE, narg1));\n+      return build_function_call_expr (fndecl, narglist);\n+    }\n+  \n   /* If either argument is zero, hypot is fabs of the other.  */\n   if (real_zerop (arg0))\n     return fold_build1 (ABS_EXPR, type, arg1);\n   else if (real_zerop (arg1))\n     return fold_build1 (ABS_EXPR, type, arg0);\n       \n-  /* hypot(x,x) -> x*sqrt(2).  */\n-  if (operand_equal_p (arg0, arg1, OEP_PURE_SAME))\n+  /* hypot(x,x) -> fabs(x)*sqrt(2).  */\n+  if (flag_unsafe_math_optimizations\n+      && operand_equal_p (arg0, arg1, OEP_PURE_SAME))\n     {\n       REAL_VALUE_TYPE sqrt2;\n \n       real_sqrt (&sqrt2, TYPE_MODE (type), &dconst2);\n-      return fold_build2 (MULT_EXPR, type, arg0,\n+      return fold_build2 (MULT_EXPR, type,\n+\t\t\t  fold_build1 (ABS_EXPR, type, arg0),\n \t\t\t  build_real (type, sqrt2));\n     }\n \n-  /* Transform hypot(-x,y) or hypot(x,-y) or hypot(-x,-y) into\n-     hypot(x,y).  */\n-  if (TREE_CODE (arg0) == NEGATE_EXPR || TREE_CODE (arg1) == NEGATE_EXPR)\n-    {\n-      tree narg0 = (TREE_CODE (arg0) == NEGATE_EXPR)\n-\t? TREE_OPERAND (arg0, 0) : arg0;\n-      tree narg1 = (TREE_CODE (arg1) == NEGATE_EXPR)\n-\t? TREE_OPERAND (arg1, 0) : arg1;\n-      tree narglist = tree_cons (NULL_TREE, narg0,\n-\t\t\t\t build_tree_list (NULL_TREE, narg1));\n-      return build_function_call_expr (fndecl, narglist);\n-    }\n-  \n   return NULL_TREE;\n }\n "}, {"sha": "23cc4a0794ed9ad8d8fb21b25154953fdb783939", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/012c53688f45b1f6adcfe36b4ce5ec01b7f95944/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/012c53688f45b1f6adcfe36b4ce5ec01b7f95944/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=012c53688f45b1f6adcfe36b4ce5ec01b7f95944", "patch": "@@ -1,3 +1,7 @@\n+2006-10-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-20.c: Add more hypot tests.\n+\n 2006-10-29  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/fold-compare-1.c: New test case."}, {"sha": "d4161d1a1f71d1f537472a57e82c97134fdd5c12", "filename": "gcc/testsuite/gcc.dg/builtins-20.c", "status": "modified", "additions": 75, "deletions": 3, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/012c53688f45b1f6adcfe36b4ce5ec01b7f95944/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/012c53688f45b1f6adcfe36b4ce5ec01b7f95944/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c?ref=012c53688f45b1f6adcfe36b4ce5ec01b7f95944", "patch": "@@ -16,14 +16,17 @@ extern double cos (double);\n extern double sin (double);\n extern double tan (double);\n extern double hypot (double, double);\n+extern double pure (double) __attribute__ ((__pure__));\n extern float cosf (float);\n extern float sinf (float);\n extern float tanf (float);\n extern float hypotf (float, float);\n+extern float puref (float) __attribute__ ((__pure__));\n extern long double cosl (long double);\n extern long double sinl (long double);\n extern long double tanl (long double);\n extern long double hypotl (long double, long double);\n+extern long double purel (long double) __attribute__ ((__pure__));\n \n extern void link_error(void);\n \n@@ -65,7 +68,7 @@ void test2(double x, double y)\n   if (hypot (0, x) != __builtin_fabs(x))\n     link_error ();\n \n-  if (hypot (x, x) != x * __builtin_sqrt(2))\n+  if (hypot (x, x) != __builtin_fabs(x) * __builtin_sqrt(2))\n     link_error ();\n \n   if (hypot (-x, y) != hypot (x, y))\n@@ -76,6 +79,29 @@ void test2(double x, double y)\n \n   if (hypot (-x, -y) != hypot (x, y))\n     link_error ();\n+\n+  if (hypot (__builtin_fabs(x), y) != hypot (x, y))\n+    link_error ();\n+\n+  if (hypot (x, __builtin_fabs(y)) != hypot (x, y))\n+    link_error ();\n+\n+  if (hypot (__builtin_fabs(x), __builtin_fabs(y)) != hypot (x, y))\n+    link_error ();\n+\n+  if (hypot (-__builtin_fabs(-x),\n+\t     -__builtin_fabs(__builtin_fabs(__builtin_fabs(-y))))\n+      != hypot (x, y))\n+    link_error ();\n+\n+  if (hypot (-x, 0) != __builtin_fabs(x))\n+    link_error ();\n+\n+  if (hypot (-x, x) != __builtin_fabs(x) * __builtin_sqrt(2))\n+    link_error ();\n+\n+  if (hypot (pure(x), -pure(x)) != __builtin_fabs(pure(x)) * __builtin_sqrt(2))\n+    link_error ();\n }\n \n void test1f(float x)\n@@ -118,7 +144,7 @@ void test2f(float x, float y)\n   if (hypotf (0, x) != __builtin_fabsf(x))\n     link_error ();\n \n-  if (hypotf (x, x) != x * __builtin_sqrtf(2))\n+  if (hypotf (x, x) != __builtin_fabsf(x) * __builtin_sqrtf(2))\n     link_error ();\n \n   if (hypotf (-x, y) != hypotf (x, y))\n@@ -129,6 +155,29 @@ void test2f(float x, float y)\n \n   if (hypotf (-x, -y) != hypotf (x, y))\n     link_error ();\n+\n+  if (hypotf (__builtin_fabsf(x), y) != hypotf (x, y))\n+    link_error ();\n+\n+  if (hypotf (x, __builtin_fabsf(y)) != hypotf (x, y))\n+    link_error ();\n+\n+  if (hypotf (__builtin_fabsf(x), __builtin_fabsf(y)) != hypotf (x, y))\n+    link_error ();\n+\n+  if (hypotf (-__builtin_fabsf(-x),\n+\t      -__builtin_fabsf(__builtin_fabsf(__builtin_fabsf(-y))))\n+      != hypotf (x, y))\n+    link_error ();\n+\n+  if (hypotf (-x, 0) != __builtin_fabsf(x))\n+    link_error ();\n+\n+  if (hypotf (-x, x) != __builtin_fabsf(x) * __builtin_sqrtf(2))\n+    link_error ();\n+\n+  if (hypotf (puref(x), -puref(x)) != __builtin_fabsf(puref(x)) * __builtin_sqrtf(2))\n+    link_error ();\n }\n \n \n@@ -172,7 +221,7 @@ void test2l(long double x, long double y)\n   if (hypotl (0, x) != __builtin_fabsl(x))\n     link_error ();\n \n-  if (hypotl (x, x) != x * __builtin_sqrtl(2))\n+  if (hypotl (x, x) != __builtin_fabsl(x) * __builtin_sqrtl(2))\n     link_error ();\n \n   if (hypotl (-x, y) != hypotl (x, y))\n@@ -183,6 +232,29 @@ void test2l(long double x, long double y)\n \n   if (hypotl (-x, -y) != hypotl (x, y))\n     link_error ();\n+\n+  if (hypotl (__builtin_fabsl(x), y) != hypotl (x, y))\n+    link_error ();\n+\n+  if (hypotl (x, __builtin_fabsl(y)) != hypotl (x, y))\n+    link_error ();\n+\n+  if (hypotl (__builtin_fabsl(x), __builtin_fabsl(y)) != hypotl (x, y))\n+    link_error ();\n+\n+  if (hypotl (-__builtin_fabsl(-x),\n+\t      -__builtin_fabsl(__builtin_fabsl(__builtin_fabsl(-y))))\n+      != hypotl (x, y))\n+    link_error ();\n+\n+  if (hypotl (-x, 0) != __builtin_fabsl(x))\n+    link_error ();\n+\n+  if (hypotl (-x, x) != __builtin_fabsl(x) * __builtin_sqrtl(2))\n+    link_error ();\n+\n+  if (hypotl (purel(x), -purel(x)) != __builtin_fabsl(purel(x)) * __builtin_sqrtl(2))\n+    link_error ();\n }\n \n int main()"}]}