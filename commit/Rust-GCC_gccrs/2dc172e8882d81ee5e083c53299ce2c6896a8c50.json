{"sha": "2dc172e8882d81ee5e083c53299ce2c6896a8c50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRjMTcyZTg4ODJkODFlZTVlMDgzYzUzMjk5Y2UyYzY4OTZhOGM1MA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-12-16T23:30:11Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-12-16T23:30:11Z"}, "message": "(DBX_BLOCKS_FUNCTION_RELATIVE, DBX_FUNCTION_FIRST,\n\nDBX_OUTPUT_MAIN_SOURCE_FILE_END): Define.\n(ASM_OUTPUT_SOURCE_LINE): Modify it to output function relative stabs.\n\nFrom-SVN: r8659", "tree": {"sha": "6ca0a4916a77bb2222e2b534a98b380c7955028e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ca0a4916a77bb2222e2b534a98b380c7955028e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dc172e8882d81ee5e083c53299ce2c6896a8c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc172e8882d81ee5e083c53299ce2c6896a8c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc172e8882d81ee5e083c53299ce2c6896a8c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc172e8882d81ee5e083c53299ce2c6896a8c50/comments", "author": null, "committer": null, "parents": [{"sha": "e2cce0cf908143d436dbcc16ce5f81a49845e893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2cce0cf908143d436dbcc16ce5f81a49845e893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2cce0cf908143d436dbcc16ce5f81a49845e893"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "df7f3669153789cceb65fd7247fa60020b1e583c", "filename": "gcc/config/sparc/litecoff.h", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc172e8882d81ee5e083c53299ce2c6896a8c50/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc172e8882d81ee5e083c53299ce2c6896a8c50/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flitecoff.h?ref=2dc172e8882d81ee5e083c53299ce2c6896a8c50", "patch": "@@ -22,20 +22,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #undef ASM_OUTPUT_IDENT\n \n-/* This is copied from final.c and sparc.h.  */\n-#undef ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\\\n-{ if (write_symbols == SDB_DEBUG) {\t\t\t\t\\\n-    fprintf ((FILE), \"\\t.ln\\t%d\\n\",\t\t\t\t\\\n-\t     ((sdb_begin_function_line > -1)\t\t\t\\\n-\t      ? (LINE) - sdb_begin_function_line : 1));\t\t\\\n-  } else if (write_symbols == DBX_DEBUG) {\t\t\t\\\n-    static int sym_lineno = 1;\t\t\t\t\t\\\n-    fprintf ((FILE), \".stabn 68,0,%d,LM%d\\nLM%d:\\n\",\t\t\\\n-\t     (LINE), sym_lineno, sym_lineno);\t\t\t\\\n-    sym_lineno += 1;\t\t\t\t\t\t\\\n-  } }\n-\n #undef SELECT_SECTION\n #undef SELECT_RTX_SECTION\n #define BSS_SECTION_ASM_OP\t\".section\\t\\\".bss\\\"\"\n@@ -51,6 +37,42 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define DBX_DEBUGGING_INFO\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n+/* These are all necessary because this is how gdb expects gcc to output\n+   stabs in coff.  */\n+\n+/* Be function-relative for block and source line stab directives.  */\n+\n+#define DBX_BLOCKS_FUNCTION_RELATIVE 1\n+\n+/* but, to make this work, functions must appear prior to line info.  */\n+\n+#define DBX_FUNCTION_FIRST\n+\n+/* Generate a blank trailing N_SO to mark the end of the .o file, since\n+   we can't depend upon the linker to mark .o file boundaries with\n+   embedded stabs.  */\n+\n+#define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME)\t\t\t\\\n+  fprintf (FILE,\t\t\t\t\t\t\t\\\n+\t   \"\\t.text\\n\\t.stabs \\\"\\\",%d,0,0,Letext\\nLetext:\\n\", N_SO)\n+\n+/* This is copied from final.c and sparc.h.  */\n+#undef ASM_OUTPUT_SOURCE_LINE\n+#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\\\n+{ if (write_symbols == SDB_DEBUG) {\t\t\t\t\\\n+    fprintf ((FILE), \"\\t.ln\\t%d\\n\",\t\t\t\t\\\n+\t     ((sdb_begin_function_line > -1)\t\t\t\\\n+\t      ? (LINE) - sdb_begin_function_line : 1));\t\t\\\n+  } else if (write_symbols == DBX_DEBUG) {\t\t\t\\\n+    static int sym_lineno = 1;\t\t\t\t\t\\\n+    fprintf (FILE, \".stabn 68,0,%d,.LM%d-\",\t\t\t\\\n+\t     LINE, sym_lineno);\t\t\t\t\t\\\n+    assemble_name (FILE,\t\t\t\t\t\\\n+\t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0)); \\\n+    fprintf (FILE, \"\\n.LM%d:\\n\", sym_lineno);\t\t\t\\\n+    sym_lineno += 1;\t\t\t\t\t\t\\\n+  } }\n+\n /* Support the ctors and dtors sections for g++.  */\n \n #undef INIT_SECTION_ASM_OP"}]}