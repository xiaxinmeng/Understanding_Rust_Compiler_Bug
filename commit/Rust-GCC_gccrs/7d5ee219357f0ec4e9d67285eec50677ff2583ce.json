{"sha": "7d5ee219357f0ec4e9d67285eec50677ff2583ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1ZWUyMTkzNTdmMGVjNGU5ZDY3Mjg1ZWVjNTA2NzdmZjI1ODNjZQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-10-31T14:45:50Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-10-31T14:45:50Z"}, "message": "Simplify handling of special files.\n\n2011-10-31  Janne Blomqvist  <jb@gcc.gnu.org>\n\n* io/file_pos.c (st_rewind): Handle regular and special files\nidentically.\n* io/intrinsics.c (fseek_sub): Don't check whether we think the\nfile is seekable, just do what the caller says.\n* io/transfer.c (skip_record): First try to seek, then fallback to\nreading and throwing away what we read.\n* io/unit.c (update_position): Don't check whether file is\nseekable, just try to do what we're told.\n(unit_truncate): Likewise.\n* io/unix.c (struct unix_stream): Remove special_file flag.\n(buf_flush): Remove code for handling unseekable files.\n(buf_seek): Likewise.\n(fd_to_stream): Use buffered IO only for regular files.\n(file_length): Remove is_seekable() call.\n(is_seekable): Remove function.\n(is_special): Likewise.\n* io/unix.h: Remove prototypes for is_seekable and is_special.\n\nFrom-SVN: r180701", "tree": {"sha": "041a48d3c01978c5d828f9408cf2ffcb1db07571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/041a48d3c01978c5d828f9408cf2ffcb1db07571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d5ee219357f0ec4e9d67285eec50677ff2583ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5ee219357f0ec4e9d67285eec50677ff2583ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5ee219357f0ec4e9d67285eec50677ff2583ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5ee219357f0ec4e9d67285eec50677ff2583ce/comments", "author": null, "committer": null, "parents": [{"sha": "2062f77b8b897691f102434aeec3253ad2ea28a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2062f77b8b897691f102434aeec3253ad2ea28a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2062f77b8b897691f102434aeec3253ad2ea28a5"}], "stats": {"total": 180, "additions": 63, "deletions": 117}, "files": [{"sha": "35d398cdf9fc51d894a17cf89a78778127352c62", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=7d5ee219357f0ec4e9d67285eec50677ff2583ce", "patch": "@@ -1,3 +1,23 @@\n+2011-10-31  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* io/file_pos.c (st_rewind): Handle regular and special files\n+\tidentically.\n+\t* io/intrinsics.c (fseek_sub): Don't check whether we think the\n+\tfile is seekable, just do what the caller says.\n+\t* io/transfer.c (skip_record): First try to seek, then fallback to\n+\treading and throwing away what we read.\n+\t* io/unit.c (update_position): Don't check whether file is\n+\tseekable, just try to do what we're told.\n+\t(unit_truncate): Likewise.\n+\t* io/unix.c (struct unix_stream): Remove special_file flag.\n+\t(buf_flush): Remove code for handling unseekable files.\n+\t(buf_seek): Likewise.\n+\t(fd_to_stream): Use buffered IO only for regular files.\n+\t(file_length): Remove is_seekable() call.\n+\t(is_seekable): Remove function.\n+\t(is_special): Likewise.\n+\t* io/unix.h: Remove prototypes for is_seekable and is_special.\n+\n 2011-09-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/49479"}, {"sha": "2caf601453dfd41757d8642cbc31030aa6e320a2", "filename": "libgfortran/io/file_pos.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Ffile_pos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Ffile_pos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ffile_pos.c?ref=7d5ee219357f0ec4e9d67285eec50677ff2583ce", "patch": "@@ -407,20 +407,15 @@ st_rewind (st_parameter_filepos *fpp)\n \t  if (sseek (u->s, 0, SEEK_SET) < 0)\n \t    generate_error (&fpp->common, LIBERROR_OS, NULL);\n \n-\t  /* Handle special files like /dev/null differently.  */\n-\t  if (!is_special (u->s))\n+\t  /* Set this for compatibilty with g77 for /dev/null.  */\n+\t  if (file_length (u->s) == 0)\n+\t    u->endfile = AT_ENDFILE;\n+\t  else\n \t    {\n \t      /* We are rewinding so we are not at the end.  */\n \t      u->endfile = NO_ENDFILE;\n \t    }\n-\t  else\n-\t    {\n-\t      /* Set this for compatibilty with g77 for /dev/null.  */\n-\t      if (file_length (u->s) == 0  && stell (u->s) == 0)\n-\t\tu->endfile = AT_ENDFILE;\n-\t      /* Future refinements on special files can go here.  */\n-\t    }\n-\n+\t  \n \t  u->current_record = 0;\n \t  u->strm_pos = 1;\n \t  u->read_bad = 0;"}, {"sha": "c1287d4bd239282bbe1a0b21d0418ebc5e9b159b", "filename": "libgfortran/io/intrinsics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Fintrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Fintrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fintrinsics.c?ref=7d5ee219357f0ec4e9d67285eec50677ff2583ce", "patch": "@@ -246,7 +246,7 @@ fseek_sub (int * unit, GFC_IO_INT * offset, int * whence, int * status)\n   gfc_unit * u = find_unit (*unit);\n   ssize_t result = -1;\n \n-  if (u != NULL && is_seekable(u->s))\n+  if (u != NULL)\n     {\n       result = sseek(u->s, *offset, *whence);\n "}, {"sha": "1e054f8e8f4894001736637a586e543cdda379ac", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=7d5ee219357f0ec4e9d67285eec50677ff2583ce", "patch": "@@ -2823,18 +2823,12 @@ skip_record (st_parameter_dt *dtp, ssize_t bytes)\n   if (dtp->u.p.current_unit->bytes_left_subrecord == 0)\n     return;\n \n-  if (is_seekable (dtp->u.p.current_unit->s))\n+  /* Direct access files do not generate END conditions,\n+     only I/O errors.  */\n+  if (sseek (dtp->u.p.current_unit->s, \n+\t     dtp->u.p.current_unit->bytes_left_subrecord, SEEK_CUR) < 0)\n     {\n-      /* Direct access files do not generate END conditions,\n-\t only I/O errors.  */\n-      if (sseek (dtp->u.p.current_unit->s, \n-\t\t dtp->u.p.current_unit->bytes_left_subrecord, SEEK_CUR) < 0)\n-\tgenerate_error (&dtp->common, LIBERROR_OS, NULL);\n-\n-      dtp->u.p.current_unit->bytes_left_subrecord = 0;\n-    }\n-  else\n-    {\t\t\t/* Seek by reading data.  */\n+      /* Seeking failed, fall back to seeking by reading data.  */\n       while (dtp->u.p.current_unit->bytes_left_subrecord > 0)\n \t{\n \t  rlength = \n@@ -2850,8 +2844,9 @@ skip_record (st_parameter_dt *dtp, ssize_t bytes)\n \n \t  dtp->u.p.current_unit->bytes_left_subrecord -= readb;\n \t}\n+      return;\n     }\n-\n+  dtp->u.p.current_unit->bytes_left_subrecord = 0;\n }\n \n "}, {"sha": "d2fb6d054e6bc20e4c5b6a535ec5e78f52aef551", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=7d5ee219357f0ec4e9d67285eec50677ff2583ce", "patch": "@@ -714,23 +714,21 @@ update_position (gfc_unit *u)\n   /* If unit is not seekable, this makes no sense (and the standard is\n      silent on this matter), and thus we don't change the position for\n      a non-seekable file.  */\n-  if (is_seekable (u->s))\n-    {\n-      gfc_offset cur = stell (u->s);\n-      if (cur == 0)\n-\tu->flags.position = POSITION_REWIND;\n-      else if (cur != -1 && (file_length (u->s) == cur))\n-\tu->flags.position = POSITION_APPEND;\n-      else\n-\tu->flags.position = POSITION_ASIS;\n-    }\n+  gfc_offset cur = stell (u->s);\n+  if (cur == -1)\n+    return;\n+  else if (cur == 0)\n+    u->flags.position = POSITION_REWIND;\n+  else if (file_length (u->s) == cur)\n+    u->flags.position = POSITION_APPEND;\n+  else\n+    u->flags.position = POSITION_ASIS;\n }\n \n \n-/* High level interface to truncate a file safely, i.e. flush format\n-   buffers, check that it's a regular file, and generate error if that\n-   occurs.  Just like POSIX ftruncate, returns 0 on success, -1 on\n-   failure.  */\n+/* High level interface to truncate a file, i.e. flush format buffers,\n+   and generate an error or set some flags.  Just like POSIX\n+   ftruncate, returns 0 on success, -1 on failure.  */\n \n int\n unit_truncate (gfc_unit * u, gfc_offset pos, st_parameter_common * common)\n@@ -746,24 +744,12 @@ unit_truncate (gfc_unit * u, gfc_offset pos, st_parameter_common * common)\n \tfbuf_flush (u, u->mode);\n     }\n   \n-  /* Don't try to truncate a special file, just pretend that it\n-     succeeds.  */\n-  if (is_special (u->s) || !is_seekable (u->s))\n-    {\n-      sflush (u->s);\n-      return 0;\n-    }\n-\n   /* struncate() should flush the stream buffer if necessary, so don't\n      bother calling sflush() here.  */\n   ret = struncate (u->s, pos);\n \n   if (ret != 0)\n-    {\n-      generate_error (common, LIBERROR_OS, NULL);\n-      u->endfile = NO_ENDFILE;\n-      u->flags.position = POSITION_ASIS;\n-    }\n+    generate_error (common, LIBERROR_OS, NULL);\n   else\n     {\n       u->endfile = AT_ENDFILE;"}, {"sha": "00f7c7268978c16e2610e902f7eea3904d2abcf1", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 17, "deletions": 61, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=7d5ee219357f0ec4e9d67285eec50677ff2583ce", "patch": "@@ -187,7 +187,7 @@ typedef struct\n   gfc_offset buffer_offset;\t/* File offset of the start of the buffer */\n   gfc_offset physical_offset;\t/* Current physical file offset */\n   gfc_offset logical_offset;\t/* Current logical file offset */\n-  gfc_offset file_length;\t/* Length of the file, -1 if not seekable. */\n+  gfc_offset file_length;\t/* Length of the file. */\n \n   char *buffer;                 /* Pointer to the buffer.  */\n   int fd;                       /* The POSIX file descriptor.  */\n@@ -196,8 +196,6 @@ typedef struct\n \n   int ndirty;\t\t\t/* Dirty bytes starting at buffer_offset */\n \n-  int special_file;             /* =1 if the fd refers to a special file */\n-\n   /* Cached stat(2) values.  */\n   dev_t st_dev;\n   ino_t st_ino;\n@@ -413,7 +411,7 @@ raw_init (unix_stream * s)\n Buffered I/O functions. These functions have the same semantics as the\n raw I/O functions above, except that they are buffered in order to\n improve performance. The buffer must be flushed when switching from\n-reading to writing and vice versa.\n+reading to writing and vice versa. Only supported for regular files.\n *********************************************************************/\n \n static int\n@@ -427,16 +425,15 @@ buf_flush (unix_stream * s)\n   if (s->ndirty == 0)\n     return 0;\n   \n-  if (s->file_length != -1 && s->physical_offset != s->buffer_offset\n+  if (s->physical_offset != s->buffer_offset\n       && lseek (s->fd, s->buffer_offset, SEEK_SET) < 0)\n     return -1;\n \n   writelen = raw_write (s, s->buffer, s->ndirty);\n \n   s->physical_offset = s->buffer_offset + writelen;\n \n-  /* Don't increment file_length if the file is non-seekable.  */\n-  if (s->file_length != -1 && s->physical_offset > s->file_length)\n+  if (s->physical_offset > s->file_length)\n       s->file_length = s->physical_offset;\n \n   s->ndirty -= writelen;\n@@ -481,7 +478,7 @@ buf_read (unix_stream * s, void * buf, ssize_t nbyte)\n       /* At this point we consider all bytes in the buffer discarded.  */\n       to_read = nbyte - nread;\n       new_logical = s->logical_offset + nread;\n-      if (s->file_length != -1 && s->physical_offset != new_logical\n+      if (s->physical_offset != new_logical\n           && lseek (s->fd, new_logical, SEEK_SET) < 0)\n         return -1;\n       s->buffer_offset = s->physical_offset = new_logical;\n@@ -539,7 +536,7 @@ buf_write (unix_stream * s, const void * buf, ssize_t nbyte)\n         }\n       else\n \t{\n-\t  if (s->file_length != -1 && s->physical_offset != s->logical_offset)\n+\t  if (s->physical_offset != s->logical_offset)\n \t    {\n \t      if (lseek (s->fd, s->logical_offset, SEEK_SET) < 0)\n \t\treturn -1;\n@@ -551,20 +548,14 @@ buf_write (unix_stream * s, const void * buf, ssize_t nbyte)\n \t}\n     }\n   s->logical_offset += nbyte;\n-  /* Don't increment file_length if the file is non-seekable.  */\n-  if (s->file_length != -1 && s->logical_offset > s->file_length)\n+  if (s->logical_offset > s->file_length)\n     s->file_length = s->logical_offset;\n   return nbyte;\n }\n \n static gfc_offset\n buf_seek (unix_stream * s, gfc_offset offset, int whence)\n {\n-  if (s->file_length == -1)\n-    {\n-      errno = ESPIPE;\n-      return -1;\n-    }\n   switch (whence)\n     {\n     case SEEK_SET:\n@@ -953,30 +944,18 @@ fd_to_stream (int fd)\n \n   s->st_dev = statbuf.st_dev;\n   s->st_ino = statbuf.st_ino;\n-  s->special_file = !S_ISREG (statbuf.st_mode);\n-\n-  if (S_ISREG (statbuf.st_mode))\n-    s->file_length = statbuf.st_size;\n+  s->file_length = statbuf.st_size;\n+\n+  /* Only use buffered IO for regular files.  */\n+  if (S_ISREG (statbuf.st_mode)\n+      && !options.all_unbuffered\n+      && !(options.unbuffered_preconnected && \n+\t   (s->fd == STDIN_FILENO \n+\t    || s->fd == STDOUT_FILENO \n+\t    || s->fd == STDERR_FILENO)))\n+    buf_init (s);\n   else\n-    {\n-      /* Some character special files are seekable but most are not,\n-\t so figure it out by trying to seek.  On Linux, /dev/null is\n-\t an example of such a special file.  */\n-      s->file_length = lseek (fd, 0, SEEK_END);\n-      if (s->file_length > 0)\n-\tlseek (fd, 0, SEEK_SET);\n-    }\n-\n-  if (!(S_ISREG (statbuf.st_mode) || S_ISBLK (statbuf.st_mode))\n-      || options.all_unbuffered\n-      ||(options.unbuffered_preconnected && \n-         (s->fd == STDIN_FILENO \n-          || s->fd == STDOUT_FILENO \n-          || s->fd == STDERR_FILENO))\n-      || isatty (s->fd))\n     raw_init (s);\n-  else\n-    buf_init (s);\n \n   return (stream *) s;\n }\n@@ -1767,8 +1746,6 @@ gfc_offset\n file_length (stream * s)\n {\n   gfc_offset curr, end;\n-  if (!is_seekable (s))\n-    return -1;\n   curr = stell (s);\n   if (curr == -1)\n     return curr;\n@@ -1778,27 +1755,6 @@ file_length (stream * s)\n }\n \n \n-/* is_seekable()-- Return nonzero if the stream is seekable, zero if\n- * it is not */\n-\n-int\n-is_seekable (stream *s)\n-{\n-  /* By convention, if file_length == -1, the file is not\n-     seekable.  */\n-  return ((unix_stream *) s)->file_length!=-1;\n-}\n-\n-\n-/* is_special()-- Return nonzero if the stream is not a regular file.  */\n-\n-int\n-is_special (stream *s)\n-{\n-  return ((unix_stream *) s)->special_file;\n-}\n-\n-\n int\n stream_isatty (stream *s)\n {"}, {"sha": "08c83e474cf09e278b636448d0553d301226f5fc", "filename": "libgfortran/io/unix.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5ee219357f0ec4e9d67285eec50677ff2583ce/libgfortran%2Fio%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.h?ref=7d5ee219357f0ec4e9d67285eec50677ff2583ce", "patch": "@@ -158,12 +158,6 @@ internal_proto(inquire_readwrite);\n extern gfc_offset file_length (stream *);\n internal_proto(file_length);\n \n-extern int is_seekable (stream *);\n-internal_proto(is_seekable);\n-\n-extern int is_special (stream *);\n-internal_proto(is_special);\n-\n extern void flush_if_preconnected (stream *);\n internal_proto(flush_if_preconnected);\n "}]}