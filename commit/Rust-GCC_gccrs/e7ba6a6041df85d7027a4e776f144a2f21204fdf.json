{"sha": "e7ba6a6041df85d7027a4e776f144a2f21204fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdiYTZhNjA0MWRmODVkNzAyN2E0ZTc3NmYxNDRhMmYyMTIwNGZkZg==", "commit": {"author": {"name": "Sergey Shalnov", "email": "Sergey.Shalnov@intel.com", "date": "2017-09-22T05:13:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-22T05:13:33Z"}, "message": "sse.md (\"mov<mode>_internal\"): Use <sseinsnmode> mode attribute for TARGET_AVX512VL.\n\n/gcc\n        * config/i386/sse.md (\"mov<mode>_internal\"): Use <sseinsnmode>\n\tmode attribute for TARGET_AVX512VL.\n\n\t* config/i386/i386.opt (mprefer-avx256): New option.\n\t* config/i386/i386.c (ix86_target_string): Add -mprefer-avx256\n\tto flag_opts.\n\t(ix86_preferred_simd_mode): Return 256-bit AVX modes\n\tfor TARGET_PREFER_AVX256.\n\t* doc/invoke.texi (x86 Options): Document -mprefer-avx256.\n\n/testsuite\n\n        * gcc.target/i386/avx512f-constant-set.c: New test.\n\n\t* g++.dg/ext/pr57362.C: Test __attribute__((target(\"prefer-avx256\"))).\n\t* gcc.target/i386/avx512f-prefer.c: New test.\n\nFrom-SVN: r253089", "tree": {"sha": "814e5681975dccea8bed77d42686f8244713f3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/814e5681975dccea8bed77d42686f8244713f3bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7ba6a6041df85d7027a4e776f144a2f21204fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ba6a6041df85d7027a4e776f144a2f21204fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ba6a6041df85d7027a4e776f144a2f21204fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ba6a6041df85d7027a4e776f144a2f21204fdf/comments", "author": {"login": "shssf", "id": 19515906, "node_id": "MDQ6VXNlcjE5NTE1OTA2", "avatar_url": "https://avatars.githubusercontent.com/u/19515906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shssf", "html_url": "https://github.com/shssf", "followers_url": "https://api.github.com/users/shssf/followers", "following_url": "https://api.github.com/users/shssf/following{/other_user}", "gists_url": "https://api.github.com/users/shssf/gists{/gist_id}", "starred_url": "https://api.github.com/users/shssf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shssf/subscriptions", "organizations_url": "https://api.github.com/users/shssf/orgs", "repos_url": "https://api.github.com/users/shssf/repos", "events_url": "https://api.github.com/users/shssf/events{/privacy}", "received_events_url": "https://api.github.com/users/shssf/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9327b5ac225ed9cae6becd10b6588733e87adca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9327b5ac225ed9cae6becd10b6588733e87adca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9327b5ac225ed9cae6becd10b6588733e87adca"}], "stats": {"total": 119, "additions": 104, "deletions": 15}, "files": [{"sha": "75b309c4d1d98b936f87e16e5768bf5c0ab3bd7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7ba6a6041df85d7027a4e776f144a2f21204fdf", "patch": "@@ -1,3 +1,17 @@\n+2017-09-22  Sergey Shalnov  <sergey.shalnov@intel.com>\n+\n+        * config/i386/sse.md (\"mov<mode>_internal\"): Use <sseinsnmode>\n+\tmode attribute for TARGET_AVX512VL.\n+\n+2017-09-21  Sergey Shalnov  <sergey.shalnov@intel.com>\n+\n+\t* config/i386/i386.opt (mprefer-avx256): New option.\n+\t* config/i386/i386.c (ix86_target_string): Add -mprefer-avx256\n+\tto flag_opts.\n+\t(ix86_preferred_simd_mode): Return 256-bit AVX modes\n+\tfor TARGET_PREFER_AVX256.\n+\t* doc/invoke.texi (x86 Options): Document -mprefer-avx256.\n+\n 2017-09-21  Jeff Law  <law@redhat.com>\n \n \t* config/i386/i386.c (ix86_adjust_stack_and_probe_stack_clash):"}, {"sha": "5e8f58c5e9f817fd360210da34b05a01b8b8cd81", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e7ba6a6041df85d7027a4e776f144a2f21204fdf", "patch": "@@ -4751,6 +4751,7 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mavx256-split-unaligned-load\",\tMASK_AVX256_SPLIT_UNALIGNED_LOAD },\n     { \"-mavx256-split-unaligned-store\",\tMASK_AVX256_SPLIT_UNALIGNED_STORE },\n     { \"-mprefer-avx128\",\t\tMASK_PREFER_AVX128 },\n+    { \"-mprefer-avx256\",\t\tMASK_PREFER_AVX256 },\n     { \"-mcall-ms2sysv-xlogues\",\t\tMASK_CALL_MS2SYSV_XLOGUES }\n   };\n \n@@ -51848,28 +51849,47 @@ ix86_preferred_simd_mode (scalar_mode mode)\n   switch (mode)\n     {\n     case E_QImode:\n-      return TARGET_AVX512BW ? V64QImode :\n-       (TARGET_AVX && !TARGET_PREFER_AVX128) ? V32QImode : V16QImode;\n+      if (TARGET_AVX512BW && !TARGET_PREFER_AVX256)\n+\treturn V64QImode;\n+      else if (TARGET_AVX && !TARGET_PREFER_AVX128)\n+\treturn V32QImode;\n+      else\n+\treturn V16QImode;\n+\n     case E_HImode:\n-      return TARGET_AVX512BW ? V32HImode :\n-       (TARGET_AVX && !TARGET_PREFER_AVX128) ? V16HImode : V8HImode;\n+      if (TARGET_AVX512BW && !TARGET_PREFER_AVX256)\n+\treturn V32HImode;\n+      else if (TARGET_AVX && !TARGET_PREFER_AVX128)\n+\treturn V16HImode;\n+      else\n+\treturn V8HImode;\n+\n     case E_SImode:\n-      return TARGET_AVX512F ? V16SImode :\n-\t(TARGET_AVX && !TARGET_PREFER_AVX128) ? V8SImode : V4SImode;\n+      if (TARGET_AVX512F && !TARGET_PREFER_AVX256)\n+\treturn V16SImode;\n+      else if (TARGET_AVX && !TARGET_PREFER_AVX128)\n+\treturn V8SImode;\n+      else\n+\treturn V4SImode;\n+\n     case E_DImode:\n-      return TARGET_AVX512F ? V8DImode :\n-\t(TARGET_AVX && !TARGET_PREFER_AVX128) ? V4DImode : V2DImode;\n+      if (TARGET_AVX512F && !TARGET_PREFER_AVX256)\n+\treturn V8DImode;\n+      else if (TARGET_AVX && !TARGET_PREFER_AVX128)\n+\treturn V4DImode;\n+      else\n+\treturn V2DImode;\n \n     case E_SFmode:\n-      if (TARGET_AVX512F)\n+      if (TARGET_AVX512F && !TARGET_PREFER_AVX256)\n \treturn V16SFmode;\n       else if (TARGET_AVX && !TARGET_PREFER_AVX128)\n \treturn V8SFmode;\n       else\n \treturn V4SFmode;\n \n     case E_DFmode:\n-      if (TARGET_AVX512F)\n+      if (TARGET_AVX512F && !TARGET_PREFER_AVX256)\n \treturn V8DFmode;\n       else if (TARGET_AVX && !TARGET_PREFER_AVX128)\n \treturn V4DFmode;\n@@ -51889,8 +51909,14 @@ ix86_preferred_simd_mode (scalar_mode mode)\n static unsigned int\n ix86_autovectorize_vector_sizes (void)\n {\n-  return TARGET_AVX512F ? 64 | 32 | 16 :\n-    (TARGET_AVX && !TARGET_PREFER_AVX128) ? 32 | 16 : 0;\n+  unsigned int bytesizes = 0;\n+\n+  if (TARGET_AVX512F && !TARGET_PREFER_AVX256)\n+    bytesizes |= (64 | 32 | 16);\n+  else if (TARGET_AVX && !TARGET_PREFER_AVX128)\n+    bytesizes |= (32 | 16);\n+\n+  return bytesizes;\n }\n \n /* Implemenation of targetm.vectorize.get_mask_mode.  */"}, {"sha": "1c76b71dd577cab4127e65b152c8ceced8027e8b", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e7ba6a6041df85d7027a4e776f144a2f21204fdf", "patch": "@@ -588,9 +588,13 @@ Do dispatch scheduling if processor is bdver1, bdver2, bdver3, bdver4\n or znver1 and Haifa scheduling is selected.\n \n mprefer-avx128\n-Target Report Mask(PREFER_AVX128) SAVE\n+Target Report Mask(PREFER_AVX128) Save\n Use 128-bit AVX instructions instead of 256-bit AVX instructions in the auto-vectorizer.\n \n+mprefer-avx256\n+Target Report Mask(PREFER_AVX256) Save\n+Use 256-bit AVX instructions instead of 512-bit AVX instructions in the auto-vectorizer.\n+\n ;; ISA support\n \n m32"}, {"sha": "0c26bd13d019caa8360cdd02ec0735a73163edfc", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e7ba6a6041df85d7027a4e776f144a2f21204fdf", "patch": "@@ -978,7 +978,7 @@\n    (set (attr \"mode\")\n \t(cond [(and (eq_attr \"alternative\" \"1\")\n \t\t    (match_test \"TARGET_AVX512VL\"))\n-\t\t (const_string \"XI\")\n+\t\t (const_string \"<sseinsnmode>\")\n \t       (and (match_test \"<MODE_SIZE> == 16\")\n \t\t    (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t\t (and (eq_attr \"alternative\" \"3\")"}, {"sha": "5e39c0efeb9b8b6ffc5b1bc7b154c6b3d9eed375", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e7ba6a6041df85d7027a4e776f144a2f21204fdf", "patch": "@@ -1194,7 +1194,7 @@ See RS/6000 and PowerPC Options.\n -mincoming-stack-boundary=@var{num} @gol\n -mcld  -mcx16  -msahf  -mmovbe  -mcrc32 @gol\n -mrecip  -mrecip=@var{opt} @gol\n--mvzeroupper  -mprefer-avx128 @gol\n+-mvzeroupper  -mprefer-avx128 -mprefer-avx256 @gol\n -mmmx  -msse  -msse2  -msse3  -mssse3  -msse4.1  -msse4.2  -msse4  -mavx @gol\n -mavx2  -mavx512f  -mavx512pf  -mavx512er  -mavx512cd  -mavx512vl @gol\n -mavx512bw  -mavx512dq  -mavx512ifma  -mavx512vbmi  -msha  -maes @gol\n@@ -25858,6 +25858,11 @@ intrinsics.\n This option instructs GCC to use 128-bit AVX instructions instead of\n 256-bit AVX instructions in the auto-vectorizer.\n \n+@item -mprefer-avx256\n+@opindex mprefer-avx256\n+This option instructs GCC to use 256-bit AVX instructions instead of\n+512-bit AVX instructions in the auto-vectorizer.\n+\n @item -mcx16\n @opindex mcx16\n This option enables GCC to generate @code{CMPXCHG16B} instructions in 64-bit"}, {"sha": "6f25855cdb1289ee73c1951f9eda8c89634d80aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7ba6a6041df85d7027a4e776f144a2f21204fdf", "patch": "@@ -1,3 +1,12 @@\n+2017-09-22  Sergey Shalnov  <sergey.shalnov@intel.com>\n+\n+        * gcc.target/i386/avx512f-constant-set.c: New test.\n+\n+2017-09-21  Sergey Shalnov  <sergey.shalnov@intel.com>\n+\n+\t* g++.dg/ext/pr57362.C: Test __attribute__((target(\"prefer-avx256\"))).\n+\t* gcc.target/i386/avx512f-prefer.c: New test.\n+\n 2017-09-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* lib/target-supports.exp"}, {"sha": "3613b63a13728ba64b2e0cd3fa47760dc9a5ed1e", "filename": "gcc/testsuite/g++.dg/ext/pr57362.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57362.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57362.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57362.C?ref=e7ba6a6041df85d7027a4e776f144a2f21204fdf", "patch": "@@ -81,6 +81,8 @@ __attribute__((target(\"dispatch-scheduler\")))\n int foo(void) { return 1; }\n __attribute__((target(\"prefer-avx128\")))\n int foo(void) { return 1; }\n+__attribute__((target(\"prefer-avx256\")))\n+int foo(void) { return 1; }\n __attribute__((target(\"32\")))\n int foo(void) { return 1; }\n __attribute__((target(\"64\")))"}, {"sha": "022627c938162620ad2521ad67bb1e6099ed67f0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-constant-set.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-constant-set.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-constant-set.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-constant-set.c?ref=e7ba6a6041df85d7027a4e776f144a2f21204fdf", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+/* { dg-final { scan-assembler-not \"%zmm\\[0-9\\]+\" } } */\n+\n+void\n+avx512f_test (short *table)\n+{\n+  int i;\n+  for (i = 0; i < 128; ++i)\n+    table[i] = -1;\n+}"}, {"sha": "defe51eb92859b84970acac94d55a44495daf387", "filename": "gcc/testsuite/gcc.target/i386/avx512f-prefer.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-prefer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba6a6041df85d7027a4e776f144a2f21204fdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-prefer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-prefer.c?ref=e7ba6a6041df85d7027a4e776f144a2f21204fdf", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake-avx512 -mprefer-avx256\" } */\n+/* { dg-final { scan-assembler-not \"%zmm\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"vmulpd\" } } */\n+\n+#define N 1024\n+\n+double a[N], b[N], c[N];\n+\n+void\n+avx512f_test (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    c[i] = a[i] * b[i];\n+}\n+"}]}