{"sha": "4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZlOWI5MWM0NWI3YjBiYTRiMDIwNjlmODIxZTY0ZmQ1NzJjZTk1MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-10-09T06:03:16Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-10-09T06:03:16Z"}, "message": "c-common.c: Fix comment typos.\n\n\t* c-common.c: Fix comment typos.\n\t* cfgrtl.c: Likewise.\n\t* collect2.c: Likewise.\n\t* cpplex.c: Likewise.\n\t* doloop.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* dwarfout.c: Likewise.\n\t* expr.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* gcc.c: Likewise.\n\t* gcov.c: Likewise.\n\t* gcse.c: Likewise.\n\t* global.c: Likewise.\n\t* ifcvt.c: Likewise.\n\t* loop.c: Likewise.\n\t* optabs.c: Likewise.\n\t* protoize.c: Likewise.\n\t* regclass.c: Likewise.\n\t* reorg.c: Likewise.\n\t* rtl.h: Likewise.\n\t* stmt.c: Likewise.\n\t* tree.h: Likewise.\n\t* doc/cpp.texi: Likewise.\n\t* doc/c-tree.texi: Likewise.\n\t* doc/extend.texi: Likewise.\n\t* doc/invoke.texi: Likewise.\n\t* doc/objc.texi: Likewise.\n\t* doc/tm.texi: Likewise.\n\nFrom-SVN: r46114", "tree": {"sha": "5f5de869671afe0860dba99e31812a0a95a46c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f5de869671afe0860dba99e31812a0a95a46c55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/comments", "author": null, "committer": null, "parents": [{"sha": "908fecca8cba9118747951b2d9883b8abd4a94b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908fecca8cba9118747951b2d9883b8abd4a94b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/908fecca8cba9118747951b2d9883b8abd4a94b6"}], "stats": {"total": 115, "additions": 73, "deletions": 42}, "files": [{"sha": "ded5bb7cadb64867a058654214138ea10881f658", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -1,3 +1,34 @@\n+2001-10-09  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* c-common.c: Fix comment typos.\n+\t* cfgrtl.c: Likewise.\n+\t* collect2.c: Likewise.\n+\t* cpplex.c: Likewise.\n+\t* doloop.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* dwarfout.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* gcc.c: Likewise.\n+\t* gcov.c: Likewise.\n+\t* gcse.c: Likewise.\n+\t* global.c: Likewise.\n+\t* ifcvt.c: Likewise.\n+\t* loop.c: Likewise.\n+\t* optabs.c: Likewise.\n+\t* protoize.c: Likewise.\n+\t* regclass.c: Likewise.\n+\t* reorg.c: Likewise.\n+\t* rtl.h: Likewise.\n+\t* stmt.c: Likewise.\n+\t* tree.h: Likewise.\n+\t* doc/cpp.texi: Likewise.\n+\t* doc/c-tree.texi: Likewise.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/objc.texi: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\n 2001-10-08  Richard Henderson  <rth@redhat.com>\n \n \t* varasm.c (set_named_section_flags): Initialize \"declared\"."}, {"sha": "5ad4d92f8325091c367b320b2532e3b45013b98e", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -1969,7 +1969,7 @@ truthvalue_conversion (expr)\n       return real_zerop (expr) ? boolean_false_node : boolean_true_node;\n \n     case ADDR_EXPR:\n-      /* If we are taking the address of a external decl, it might be zero\n+      /* If we are taking the address of an external decl, it might be zero\n \t if it is weak, so we cannot optimize.  */\n       if (DECL_P (TREE_OPERAND (expr, 0))\n \t  && DECL_EXTERNAL (TREE_OPERAND (expr, 0)))"}, {"sha": "c075731d1ebe609383106b4ee3f0a746db6954b7", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -874,7 +874,7 @@ redirect_edge_and_branch (e, target)\n   return true;\n }\n \n-/* Like force_nonfallthru bellow, but additionally performs redirection\n+/* Like force_nonfallthru below, but additionally performs redirection\n    Used by redirect_edge_and_branch_force.  */\n \n static basic_block"}, {"sha": "297f769a6fd8455c21a51c94d42c2db68d0ace03", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -2321,7 +2321,7 @@ libcompare (d1, d2)\n       /* It has a valid numeric extension, prefer this one.  */\n       if (*e1 == '.' && e1[1] && ISDIGIT (e1[1]))\n \treturn 1;\n-      /* It has a invalid numeric extension, must prefer the other one.  */\n+      /* It has an invalid numeric extension, must prefer the other one.  */\n       else\n \treturn -1;\n     }\n@@ -2330,7 +2330,7 @@ libcompare (d1, d2)\n       /* It has a valid numeric extension, prefer this one.  */\n       if (*e2 == '.' && e2[1] && ISDIGIT (e2[1]))\n \treturn -1;\n-      /* It has a invalid numeric extension, must prefer the other one.  */\n+      /* It has an invalid numeric extension, must prefer the other one.  */\n       else\n \treturn 1;\n     }"}, {"sha": "3ea32612d24c7992d176b4a4b0113248bcc50a4b", "filename": "gcc/cpplex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -575,7 +575,7 @@ parse_identifier_slow (pfile, cur)\n   /* Remember the next character.  */\n   buffer->read_ahead = c;\n \n-  /* $ is not a identifier character in the standard, but is commonly\n+  /* $ is not an identifier character in the standard, but is commonly\n      accepted as an extension.  Don't warn about it in skipped\n      conditional blocks.  */\n   if (saw_dollar && CPP_PEDANTIC (pfile) && ! pfile->state.skipping)\n@@ -2126,7 +2126,7 @@ _cpp_get_buff (pfile, min_size)\n   return result;\n }\n \n-/* Creates a new buffer with enough space to hold the the uncommitted\n+/* Creates a new buffer with enough space to hold the uncommitted\n    remaining bytes of BUFF, and at least MIN_EXTRA more bytes.  Copies\n    the excess bytes to the new buffer.  Chains the new buffer after\n    BUFF, and returns the new buffer.  */\n@@ -2144,7 +2144,7 @@ _cpp_append_extend_buff (pfile, buff, min_extra)\n   return new_buff;\n }\n \n-/* Creates a new buffer with enough space to hold the the uncommitted\n+/* Creates a new buffer with enough space to hold the uncommitted\n    remaining bytes of the buffer pointed to by BUFF, and at least\n    MIN_EXTRA more bytes.  Copies the excess bytes to the new buffer.\n    Chains the new buffer before the buffer pointed to by BUFF, and"}, {"sha": "a5c5fecd892f8ab2d4166977df47c735d9c8ac07", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -1423,7 +1423,7 @@ fields.\n @item CASE_LABEL\n \n Use to represent a @code{case} label, range of @code{case} labels, or a\n-@code{default} label.  If @code{CASE_LOW} is @code{NULL_TREE}, then this is a a\n+@code{default} label.  If @code{CASE_LOW} is @code{NULL_TREE}, then this is a\n @code{default} label.  Otherwise, if @code{CASE_HIGH} is @code{NULL_TREE}, then\n this is an ordinary @code{case} label.  In this case, @code{CASE_LOW} is\n an expression giving the value of the label.  Both @code{CASE_LOW} and\n@@ -1800,7 +1800,7 @@ as a signed or unsigned quantity depending on the type of the constant.\n In general, the expression given above will overflow, so it should not\n be used to calculate the value of the constant.\n \n-The variable @code{integer_zero_node} is a integer constant with value\n+The variable @code{integer_zero_node} is an integer constant with value\n zero.  Similarly, @code{integer_one_node} is an integer constant with\n value one.  The @code{size_zero_node} and @code{size_one_node} variables\n are analogous, but have type @code{size_t} rather than @code{int}."}, {"sha": "a9736cdd4543c7bf9180122723da275afb67f664", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -32,7 +32,7 @@ or Back-Cover Texts.\n \n @macro covertexts\n This manual contains no Invariant Sections.  The Front-Cover Texts are\n-(a) (see below), and the the Back-Cover Texts are (b) (see below).\n+(a) (see below), and the Back-Cover Texts are (b) (see below).\n \n (a) The FSF's Front-Cover Text is:\n \n@@ -1956,7 +1956,7 @@ expands to nothing, but in the @code{m68k-coff} environment it expands\n to a single @samp{%}.\n \n @item __USER_LABEL_PREFIX__\n-This macro expands to a single token which is the the prefix applied to\n+This macro expands to a single token which is the prefix applied to\n user labels (symbols visible to C code) in assembly.  For example, in\n the @code{m68k-aout} environment it expands to an @samp{_}, but in the\n @code{m68k-coff} environment it expands to nothing.\n@@ -3610,7 +3610,7 @@ simultaneously true.\n \n @cindex assertions, cancelling\n @findex #unassert\n-Assertions can be cancelled with the the @samp{#unassert} directive.  It\n+Assertions can be cancelled with the @samp{#unassert} directive.  It\n has the same syntax as @samp{#assert}.  In that form it cancels only the\n answer which was specified on the @samp{#unassert} line; other answers\n for that predicate remain true.  You can cancel an entire predicate by"}, {"sha": "41588b0d619acead8c1824866e4e44f3b169c08e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -2523,7 +2523,7 @@ to relate to the structure, union or enumerated type defined, not to any\n enclosing declaration the type specifier appears in, and the type\n defined is not complete until after the attribute specifiers.\n @c Otherwise, there would be the following problems: a shift/reduce\n-@c conflict between attributes binding the the struct/union/enum and\n+@c conflict between attributes binding the struct/union/enum and\n @c binding to the list of specifiers/qualifiers; and \"aligned\"\n @c attributes could use sizeof for the structure, but the size could be\n @c changed later by \"packed\" attributes."}, {"sha": "0588c1a5b8f85d78a14cfb4606ddaf18f7a85e23", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -1669,7 +1669,7 @@ behaviour.\n @item -fdiagnostics-show-location=every-line\n Only meaningful in line-wrapping mode.  Instructs the diagnostic\n messages reporter to emit the same source location information (as\n-prefix) for physical lines that result from the process of breaking a\n+prefix) for physical lines that result from the process of breaking\n a message which is too long to fit on a single line.\n \n @end table\n@@ -3791,7 +3791,7 @@ that contain more that a certain number of instructions.  You can\n control some of these constants on the command-line using the\n @option{--param} option.\n \n-In each case, the @var{value} is a integer.  The allowable choices for\n+In each case, the @var{value} is an integer.  The allowable choices for\n @var{name} are given in the following table:\n \n @table @gcctabopt"}, {"sha": "d3fd775e2c0cfcea92976bb4f3add80afe973703", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -251,7 +251,7 @@ The non-atomic types are encoded as follows:\n @end multitable\n \n Here are some types and their encodings, as they are generated by the\n-compiler on a i386 machine:\n+compiler on an i386 machine:\n \n @sp 1\n "}, {"sha": "32229d64c9fe234175d6ba5e8a08946bc94b0978", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -8776,7 +8776,7 @@ built-in function.\n @findex MD_CAN_REDIRECT_BRANCH\n @item MD_CAN_REDIRECT_BRANCH(@var{branch1}, @var{branch2})\n \n-Take a branch insn in @var{branch1} and a another in @var{branch2}.\n+Take a branch insn in @var{branch1} and another in @var{branch2}.\n Return true if redirecting @var{branch1} to the destination of\n @var{branch2} is possible.\n \n@@ -8788,7 +8788,7 @@ may in turn cause a branch offset to overflow.\n @item ALLOCATE_INITIAL_VALUE(@var{hard_reg})\n \n When the initial value of a hard register has been copied in a pseudo\n-register, it is often not necessary to actually allocate a another register\n+register, it is often not necessary to actually allocate another register\n to this pseudo register, because the original hard register or a stack slot\n it has been saved into can be used.  @code{ALLOCATE_INITIAL_VALUE}, if\n defined, is called at the start of register allocation once for each"}, {"sha": "849f30e2ef7a3eedfec824b08238eed33b0586af", "filename": "gcc/doloop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdoloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoloop.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -141,7 +141,7 @@ doloop_condition_get (pattern)\n /* Return an estimate of the maximum number of loop iterations for the\n    loop specified by LOOP or zero if the loop is not normal.\n    MODE is the mode of the iteration count and NONNEG is non-zero if\n-   the the iteration count has been proved to be non-negative.  */\n+   the iteration count has been proved to be non-negative.  */\n static unsigned HOST_WIDE_INT\n doloop_iterations_max (loop_info, mode, nonneg)\n      const struct loop_info *loop_info;\n@@ -336,7 +336,7 @@ doloop_valid_p (loop, jump_insn)\n \n   /* There is no guarantee that a NE loop will terminate if the\n      absolute increment is not unity.  ??? We could compute this\n-     condition at run-time and have a additional jump around the loop\n+     condition at run-time and have an additional jump around the loop\n      to ensure an infinite loop.  */\n   if (loop_info->comparison_code == NE\n       && INTVAL (loop_info->increment) != -1"}, {"sha": "c7d17ec0ccdadb55a9153d5a81428bacd0f2832f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -8737,7 +8737,7 @@ add_bound_info (subrange_die, bound_attr, bound)\n          they have to deal with empty upper bounds location descriptions\n          anyway in order to be able to deal with incomplete array types.\n          Of course an intelligent debugger (GDB?)  should be able to\n-         comprehend that a missing upper bound specification in a array\n+         comprehend that a missing upper bound specification in an array\n          type used for a storage class `auto' local array variable\n          indicates that the upper bound is both unknown (at compile- time)\n          and unknowable (at run-time) due to optimization.\n@@ -9833,7 +9833,7 @@ gen_subprogram_die (decl, context_die)\n \t     instance, if it has duplicate function definitions.  Ideally,\n \t     we should detect this case and ignore it.  For now, if we have\n \t     already reported an error, any error at all, then assume that\n-\t     we got here because of a input error, not a dwarf2 bug.  */\n+\t     we got here because of an input error, not a dwarf2 bug.  */\n \t  if (errorcount)\n \t    return;\n \t  abort ();\n@@ -10000,7 +10000,7 @@ gen_subprogram_die (decl, context_die)\n \t      gen_decl_die (parm, subr_die);\n \t  }\n \n-      /* Decide whether we need a unspecified_parameters DIE at the end.\n+      /* Decide whether we need an unspecified_parameters DIE at the end.\n          There are 2 more cases to do this for: 1) the ansi ... declaration -\n          this is detectable when the end of the arg list is not a\n          void_type_node 2) an unprototyped function declaration (not a"}, {"sha": "abc24bd4e58b14c7a5902de48de41a0bd160fb58", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -5428,7 +5428,7 @@ output_decl (decl, containing_scope)\n \t  output_pending_types_for_scope (decl);\n \n \t  /*\n-\t    Decide whether we need a unspecified_parameters DIE at the end.\n+\t    Decide whether we need an unspecified_parameters DIE at the end.\n \t    There are 2 more cases to do this for:\n \t    1) the ansi ... declaration - this is detectable when the end\n \t\tof the arg list is not a void_type_node"}, {"sha": "a62010390b724a116859b45d165274940e9b5ae3", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -2683,7 +2683,7 @@ clear_storage (object, size, align)\n \t  /* We need to make an argument list for the function call.\n \n \t     memset has three arguments, the first is a void * addresses, the\n-\t     second a integer with the initialization value, the last is a\n+\t     second an integer with the initialization value, the last is a\n \t     size_t byte count for the copy.  */\n \t  arg_list\n \t    = build_tree_list (NULL_TREE,\n@@ -3125,7 +3125,7 @@ push_block (size, extra, below)\n }\n \n \n-/* Return an rtx for the address of the beginning of a as-if-it-was-pushed\n+/* Return an rtx for the address of the beginning of an as-if-it-was-pushed\n    block of SIZE bytes.  */\n \n static rtx\n@@ -5836,7 +5836,7 @@ safe_from_p (x, exp, top_p)\n \t  return safe_from_p (x, TREE_OPERAND (exp, 1), 0);\n \n \tcase METHOD_CALL_EXPR:\n-\t  /* This takes a rtx argument, but shouldn't appear here.  */\n+\t  /* This takes an rtx argument, but shouldn't appear here.  */\n \t  abort ();\n \n \tdefault:"}, {"sha": "37a0219e1fd05ce195e10c350c8c7d592a1105e9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -517,7 +517,7 @@ rrotate_double (l1, h1, count, prec, lv, hv)\n    CODE is a tree code for a kind of division, one of\n    TRUNC_DIV_EXPR, FLOOR_DIV_EXPR, CEIL_DIV_EXPR, ROUND_DIV_EXPR\n    or EXACT_DIV_EXPR\n-   It controls how the quotient is rounded to a integer.\n+   It controls how the quotient is rounded to an integer.\n    Return nonzero if the operation overflows.\n    UNS nonzero says do unsigned division.  */\n "}, {"sha": "d265fae9555f0a50cffee25261436d735d5f79da", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -5884,7 +5884,7 @@ main (argc, argv)\n \n       /* We do not exit here.  Instead we have created a fake input file\n \t called 'help-dummy' which needs to be compiled, and we pass this\n-\t on the the various sub-processes, along with the --help switch.  */\n+\t on the various sub-processes, along with the --help switch.  */\n     }\n \n   if (verbose_flag)"}, {"sha": "dbafe81ace0482081cb27e1de1b9e1d5fa63f99a", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -477,7 +477,7 @@ init_arc (arcptr, source, target, bb_graph)\n }\n \n \n-/* Reverse the arcs on a arc list.  */\n+/* Reverse the arcs on an arc list.  */\n \n static struct adj_list *\n reverse_arcs (arcptr)"}, {"sha": "f1d40e40dec8ac79f8f30019d93654c2c81aff96", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -5424,7 +5424,7 @@ delete_null_pointer_checks (f)\n       /* LAST_INSN is a conditional jump.  Get its condition.  */\n       condition = get_condition (last_insn, &earliest);\n \n-      /* If we were unable to get the condition, or it is not a equality\n+      /* If we were unable to get the condition, or it is not an equality\n \t comparison against zero then there's nothing we can do.  */\n       if (!condition\n \t  || (GET_CODE (condition) != NE && GET_CODE (condition) != EQ)"}, {"sha": "31d264d42cc92bb163e2ed842de7ec6341954f74", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -1212,7 +1212,7 @@ find_reg (num, losers, alt_regs_p, accept_call_clobbered, retrying)\n \t    {\n \t      /* We explicitly evaluate the divide results into temporary\n \t\t variables so as to avoid excess precision problems that occur\n-\t\t on a i386-unknown-sysv4.2 (unixware) host.  */\n+\t\t on an i386-unknown-sysv4.2 (unixware) host.  */\n \t\t \n \t      double tmp1 = ((double) local_reg_freq[regno]\n \t\t\t    / local_reg_live_length[regno]);"}, {"sha": "da9c003682e372dbe09017b22b9307f55ed37b3d", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -560,7 +560,7 @@ noce_emit_store_flag (if_info, x, reversep, normalize)\n \t\t\t   || code == GEU || code == GTU), normalize);\n }\n \n-/* Emit instruction to move a rtx into STRICT_LOW_PART.  */\n+/* Emit instruction to move an rtx into STRICT_LOW_PART.  */\n static void\n noce_emit_move_insn (x, y)\n      rtx x, y;"}, {"sha": "ab90395708d55437ca6a2d83ac7541a24eccb6ce", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -2725,7 +2725,7 @@ find_and_verify_loops (f, loops)\n \t\t\t/* If no suitable BARRIER was found, create a suitable\n \t\t\t   one before TARGET.  Since TARGET is a fall through\n \t\t\t   path, we'll need to insert an jump around our block\n-\t\t\t   and a add a BARRIER before TARGET.\n+\t\t\t   and add a BARRIER before TARGET.\n \n \t\t\t   This creates an extra unconditional jump outside\n \t\t\t   the loop.  However, the benefits of removing rarely"}, {"sha": "2d5e68d2662e7897550d6d1e7579ce15499c068b", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -3220,7 +3220,7 @@ prepare_cmp_insn (px, py, pcomparison, size, pmode, punsignedp, align,\n \n /* Before emitting an insn with code ICODE, make sure that X, which is going\n    to be used for operand OPNUM of the insn, is converted from mode MODE to\n-   WIDER_MODE (UNSIGNEDP determines whether it is a unsigned conversion), and\n+   WIDER_MODE (UNSIGNEDP determines whether it is an unsigned conversion), and\n    that it is accepted by the operand predicate.  Return the new value.  */\n \n rtx"}, {"sha": "de626f7bd96bf94b5f17c6a4435ff16d54c8029d", "filename": "gcc/protoize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -1135,7 +1135,7 @@ unexpand_if_needed (aux_info_line)\n               strcpy (copy_p, unexp_p->contracted);\n               copy_p += size;\n \n-              /* Assume the there will not be another replacement required\n+              /* Assume that there will not be another replacement required\n                  within the text just replaced.  */\n \n               s += len;"}, {"sha": "140a207a2763cb6f934696c70287eedf9a0ebc9f", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -1304,7 +1304,7 @@ regclass (f, nregs, dump)\n \t  for (class = (int) ALL_REGS - 1; class > 0; class--)\n \t    {\n \t      /* Ignore classes that are too small for this operand or\n-\t\t invalid for a operand that was auto-incremented.  */\n+\t\t invalid for an operand that was auto-incremented.  */\n \t      if (!contains_reg_of_mode [class][PSEUDO_REGNO_MODE (i)]\n #ifdef FORBIDDEN_INC_DEC_CLASSES\n \t\t  || (in_inc_dec[i] && forbidden_inc_dec_class[class])"}, {"sha": "97a8354ab69e55d7795d32a1591e6d5187433476", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -3105,7 +3105,7 @@ relax_delay_slots (first)\n \t  if (target_label != JUMP_LABEL (insn))\n \t    reorg_redirect_jump (insn, target_label);\n \n-\t  /* See if this jump branches around a unconditional jump.\n+\t  /* See if this jump branches around an unconditional jump.\n \t     If so, invert this jump and point it to the target of the\n \t     second jump.  */\n \t  if (next && GET_CODE (next) == JUMP_INSN"}, {"sha": "22f673e23f8767904c9e0f005f713c1a09da78d9", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -615,7 +615,7 @@ extern const char * const reg_note_name[];\n    NOTE_INSN_BLOCK_BEG and NOTE_INSN_BLOCK_END notes.  (We avoid lots of casts\n    between ints and pointers if we use a different macro for the block number.)\n    The NOTE_INSN_RANGE_{START,END} and NOTE_INSN_LIVE notes record their\n-   information as a rtx in the field.  */\n+   information as an rtx in the field.  */\n \n #define NOTE_SOURCE_FILE(INSN) \tXCSTR(INSN, 3, NOTE)\n #define NOTE_BLOCK(INSN)\tXCTREE(INSN, 3, NOTE)"}, {"sha": "631f689f9d57e432a5b37d7d70b0e04694798240", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -2784,7 +2784,7 @@ expand_exit_loop_if_false (whichloop, cond)\n   if (whichloop == 0)\n     return 0;\n   /* In order to handle fixups, we actually create a conditional jump\n-     around a unconditional branch to exit the loop.  If fixups are\n+     around an unconditional branch to exit the loop.  If fixups are\n      necessary, they go before the unconditional branch.  */\n \n   do_jump (cond, NULL_RTX, label);\n@@ -5308,7 +5308,7 @@ expand_end_case (orig_index)\n \t\t}\n \n \t      /* For constant index expressions we need only\n-\t\t issue a unconditional branch to the appropriate\n+\t\t issue an unconditional branch to the appropriate\n \t\t target code.  The job of removing any unreachable\n \t\t code is left to the optimisation phase if the\n \t\t \"-O\" option is specified.  */"}, {"sha": "717b0739fa9068832c4ddec3bc9fe86fcb076b6e", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe9b91c45b7b0ba4b02069f821e64fd572ce950/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4fe9b91c45b7b0ba4b02069f821e64fd572ce950", "patch": "@@ -1070,7 +1070,7 @@ struct tree_block\n    If set in a SET_TYPE, indicates a bitstring type. */\n #define TYPE_STRING_FLAG(NODE) (TYPE_CHECK (NODE)->type.string_flag)\n \n-/* If non-NULL, this is a upper bound of the size (in bytes) of an\n+/* If non-NULL, this is an upper bound of the size (in bytes) of an\n    object of the given ARRAY_TYPE.  This allows temporaries to be allocated. */\n #define TYPE_ARRAY_MAX_SIZE(ARRAY_TYPE) TYPE_MAX_VALUE (ARRAY_TYPE)\n "}]}