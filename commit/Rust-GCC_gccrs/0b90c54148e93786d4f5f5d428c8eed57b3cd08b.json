{"sha": "0b90c54148e93786d4f5f5d428c8eed57b3cd08b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI5MGM1NDE0OGU5Mzc4NmQ0ZjVmNWQ0MjhjOGVlZDU3YjNjZDA4Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-02-09T18:13:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-02-09T18:13:35Z"}, "message": "loop-unswitch-2.c: New testcase.\n\n\t* gcc.dg/loop-unswitch-2.c: New testcase.\n\t* gcc.dg/loop-unswitch-1.c: New testcase.\n\t* tree-ssa-loop-unswitch.c (hoist_guard): Update profile.\n\nFrom-SVN: r245311", "tree": {"sha": "10cea305a8f0eb4fca28b6d6638f6dcb3a7df1ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10cea305a8f0eb4fca28b6d6638f6dcb3a7df1ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b90c54148e93786d4f5f5d428c8eed57b3cd08b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b90c54148e93786d4f5f5d428c8eed57b3cd08b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b90c54148e93786d4f5f5d428c8eed57b3cd08b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/comments", "author": null, "committer": null, "parents": [{"sha": "192b048b5c92b3af78af0f58bf4474e5db770f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192b048b5c92b3af78af0f58bf4474e5db770f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192b048b5c92b3af78af0f58bf4474e5db770f23"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "9af921975a3021b130c8fc2139a7b174be73d52e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b90c54148e93786d4f5f5d428c8eed57b3cd08b", "patch": "@@ -1,3 +1,7 @@\n+2017-02-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-loop-unswitch.c (hoist_guard): Update profile.\n+\n 2017-02-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* omp-offload.c (oacc_loop_auto_partitions): Use || instead of |"}, {"sha": "599780624e43637d263fa5e41b11a8915954ab85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b90c54148e93786d4f5f5d428c8eed57b3cd08b", "patch": "@@ -1,3 +1,8 @@\n+2017-02-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/loop-unswitch-2.c: Update testcase.\n+\t* gcc.dg/loop-unswitch-1.c: Update testcase.\n+\n 2017-02-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/79428"}, {"sha": "f8d314e34de28714325646ebe356596ad1cc7dea", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c?ref=0b90c54148e93786d4f5f5d428c8eed57b3cd08b", "patch": "@@ -12,4 +12,5 @@ void foo (float **a, float **b, float *c, int n, int m, int l)\n }\n \n /* { dg-final { scan-tree-dump-times \"guard hoisted\" 3 \"unswitch\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"unswitch\" } } */\n "}, {"sha": "089b6106711235ebe2b0f190d60bbd32dfda4e46", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-3.c?ref=0b90c54148e93786d4f5f5d428c8eed57b3cd08b", "patch": "@@ -22,5 +22,6 @@ float *foo(int ustride, int size, float *src)\n }\n \n /* { dg-final { scan-tree-dump-times \"guard hoisted\" 1 \"unswitch\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"unswitch\" } } */\n \n "}, {"sha": "143caf73e8653cb4ed92d3ac80ef3ace0af10bcb", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b90c54148e93786d4f5f5d428c8eed57b3cd08b/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=0b90c54148e93786d4f5f5d428c8eed57b3cd08b", "patch": "@@ -787,6 +787,7 @@ hoist_guard (struct loop *loop, edge guard)\n   edge te, fe, e, new_edge;\n   gimple *stmt;\n   basic_block guard_bb = guard->src;\n+  edge not_guard;\n   gimple_stmt_iterator gsi;\n   int flags = 0;\n   bool fix_dom_of_exit;\n@@ -818,18 +819,80 @@ hoist_guard (struct loop *loop, edge guard)\n   update_stmt (cond_stmt);\n   /* Create new loop pre-header.  */\n   e = split_block (pre_header, last_stmt (pre_header));\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"  Moving guard %i->%i (prob %i) to bb %i, \"\t\n+\t     \"new preheader is %i\\n\",\n+\t     guard->src->index, guard->dest->index, guard->probability,\n+\t     e->src->index, e->dest->index);\n+\n   gcc_assert (loop_preheader_edge (loop)->src == e->dest);\n+\n   if (guard == fe)\n     {\n       e->flags = EDGE_TRUE_VALUE;\n       flags |= EDGE_FALSE_VALUE;\n+      not_guard = te;\n     }\n   else\n     {\n       e->flags = EDGE_FALSE_VALUE;\n       flags |= EDGE_TRUE_VALUE;\n+      not_guard = fe;\n     }\n   new_edge = make_edge (pre_header, exit->dest, flags);\n+\n+  /* Determine the probability that we skip the loop.  Assume that loop has\n+     same average number of iterations regardless outcome of guard.  */\n+  new_edge->probability = guard->probability;\n+  int skip_count = guard->src->count\n+\t\t   ? RDIV (guard->count * pre_header->count, guard->src->count)\n+\t\t   : apply_probability (guard->count, new_edge->probability);\n+\n+  if (skip_count > e->count)\n+    {\n+      fprintf (dump_file, \"  Capping count; expect profile inconsistency\\n\");\n+      skip_count = e->count;\n+    }\n+  new_edge->count = skip_count;\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"  Estimated probability of skipping loop is %i\\n\",\n+\t     new_edge->probability);\n+\n+  /* Update profile after the transform:\n+\n+     First decrease count of path from newly hoisted loop guard\n+     to loop header...  */\n+  e->count -= skip_count;\n+  e->probability = REG_BR_PROB_BASE - new_edge->probability;\n+  e->dest->count = e->count;\n+  e->dest->frequency = EDGE_FREQUENCY (e);\n+\n+  /* ... now update profile to represent that original guard will be optimized\n+     away ...  */\n+  guard->probability = 0;\n+  guard->count = 0;\n+  not_guard->probability = REG_BR_PROB_BASE;\n+  /* This count is wrong (frequency of not_guard does not change),\n+     but will be scaled later.  */\n+  not_guard->count = guard->src->count;\n+\n+  /* ... finally scale everything in the loop except for guarded basic blocks\n+     where profile does not change.  */\n+  basic_block *body = get_loop_body (loop);\n+  \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"  Scaling nonguarded BBs in loop:\");\n+  for (unsigned int i = 0; i < loop->num_nodes; i++)\n+    {\n+      basic_block bb = body[i];\n+      if (!dominated_by_p (CDI_DOMINATORS, bb, not_guard->dest))\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \" %i\", bb->index);\n+          scale_bbs_frequencies_int (&bb, 1, e->probability, REG_BR_PROB_BASE);\n+  \t}\n+    }\n+\n   if (fix_dom_of_exit)\n     set_immediate_dominator (CDI_DOMINATORS, exit->dest, pre_header);\n   /* Add NEW_ADGE argument for all phi in post-header block.  */\n@@ -856,7 +919,7 @@ hoist_guard (struct loop *loop, edge guard)\n     }\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"  guard hoisted.\\n\");\n+    fprintf (dump_file, \"\\n  guard hoisted.\\n\");\n }\n \n /* Return true if phi argument for exit edge can be used"}]}