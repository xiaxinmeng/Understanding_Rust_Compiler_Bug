{"sha": "24fee494c559f58afeb921b96a755be8d952b1d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRmZWU0OTRjNTU5ZjU4YWZlYjkyMWI5NmE3NTViZThkOTUyYjFkMw==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2011-11-23T13:22:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-23T13:22:51Z"}, "message": "g-htable.ads: Remove old comments.\n\n2011-11-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-htable.ads: Remove old comments.\n\nFrom-SVN: r181665", "tree": {"sha": "a9d3273b86df5cd3b2efd328fae5aded6674cacf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9d3273b86df5cd3b2efd328fae5aded6674cacf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24fee494c559f58afeb921b96a755be8d952b1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24fee494c559f58afeb921b96a755be8d952b1d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24fee494c559f58afeb921b96a755be8d952b1d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24fee494c559f58afeb921b96a755be8d952b1d3/comments", "author": null, "committer": null, "parents": [{"sha": "b1ab2759ab326ae20cd0023c4e0873e16517cc49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ab2759ab326ae20cd0023c4e0873e16517cc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ab2759ab326ae20cd0023c4e0873e16517cc49"}], "stats": {"total": 179, "additions": 8, "deletions": 171}, "files": [{"sha": "e68a478b9d1a04e56159242daf9fc9b52d769a58", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24fee494c559f58afeb921b96a755be8d952b1d3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24fee494c559f58afeb921b96a755be8d952b1d3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=24fee494c559f58afeb921b96a755be8d952b1d3", "patch": "@@ -1,3 +1,7 @@\n+2011-11-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-htable.ads: Remove old comments.\n+\n 2011-11-23  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_imgv.adb: Minor reformatting."}, {"sha": "287455206455263b2b6b1c15e2ecce28ad5b10a9", "filename": "gcc/ada/g-htable.ads", "status": "modified", "additions": 4, "deletions": 171, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24fee494c559f58afeb921b96a755be8d952b1d3/gcc%2Fada%2Fg-htable.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24fee494c559f58afeb921b96a755be8d952b1d3/gcc%2Fada%2Fg-htable.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-htable.ads?ref=24fee494c559f58afeb921b96a755be8d952b1d3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1995-2010, AdaCore                     --\n+--                     Copyright (C) 1995-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,9 +37,7 @@\n --  The Static_HTable package provides a more complex interface that allows\n --  complete control over allocation.\n \n---  Note: actual code is found in System.HTable (s-htable.ads/adb) since\n---  this facility is accessed from run time routines, but clients should\n---  always access the version supplied via GNAT.HTable.\n+--  See file s-htable.ads for full documentation of the interface\n \n pragma Compiler_Unit;\n \n@@ -51,177 +49,12 @@ package GNAT.HTable is\n    --  The elaborate body is because we have a dummy body to deal with\n    --  bootstrap path problems (we used to have a real body, and now we don't\n    --  need it any more, but the bootstrap requires that we have a dummy body,\n-   --  since otherwise the old body gets picked up.\n-\n-   -------------------\n-   -- Simple_HTable --\n-   -------------------\n-\n-   --  A simple hash table abstraction, easy to instantiate, easy to use.\n-   --  The table associates one element to one key with the procedure Set.\n-   --  Get retrieves the Element stored for a given Key. The efficiency of\n-   --  retrieval is function of the size of the Table parameterized by\n-   --  Header_Num and the hashing function Hash.\n+   --  since otherwise the old body gets picked up; also, we can't use pragma\n+   --  No_Body because older bootstrap compilers don't support that).\n \n    generic package Simple_HTable renames System.HTable.Simple_HTable;\n-\n-   --  For convenience of reference here is what this package has in it:\n-\n-   --  generic\n-   --     type Header_Num is range <>;\n-   --     --  An integer type indicating the number and range of hash headers\n-\n-   --     type Element is private;\n-   --     --  The type of element to be stored\n-\n-   --     No_Element : Element;\n-   --     --  The object that is returned by Get when no element has been set\n-   --     --  for a given key\n-\n-   --     type Key is private;\n-   --     with function Hash  (F : Key)      return Header_Num;\n-   --     with function Equal (F1, F2 : Key) return Boolean;\n-\n-   --  package Simple_HTable is\n-\n-   --     procedure Set (K : Key; E : Element);\n-   --     --  Associates an element with a given key. Overrides any previously\n-   --     --  associated element.\n-\n-   --     procedure Reset;\n-   --     --  Removes and frees all elements in the table\n-\n-   --     function Get (K : Key) return Element;\n-   --     --  Returns the Element associated with a key or No_Element if the\n-   --     --  given key has not associated element\n-\n-   --     procedure Remove (K : Key);\n-   --     --  Removes the latest inserted element pointer associated with the\n-   --     --  given key if any, does nothing if none.\n-\n-   --     function Get_First return Element;\n-   --     --  Returns No_Element if the HTable is empty, otherwise returns one\n-   --     --  non specified element. There is no guarantee that two calls to\n-   --     --  this function will return the same element.\n-\n-   --     function Get_Next return Element;\n-   --     --  Returns a non-specified element that has not been returned by the\n-   --     --  same function since the last call to Get_First or No_Element if\n-   --     --  there is no such element. If there is no call to 'Set' in between\n-   --     --  Get_Next calls, all the elements of the HTable will be traversed.\n-\n-   --     procedure Get_First (K : out Key; E : out Element);\n-   --     --  This version of the iterator returns a key/element pair. A non-\n-   --     --  specified entry is returned, and there is no guarantee that two\n-   --     --  calls to this procedure will return the same element.\n-\n-   --     procedure Get_Next (K : out Key; E : out Element);\n-   --     --  This version of the iterator returns a key/element pair. It\n-   --     --  returns a non-specified element that has not been returned since\n-   --     --  the last call to Get_First. If there is no remaining element,\n-   --     --  then E is set to No_Element, and the value in K is undefined.\n-   --     --  If there is no call to Set in between Get_Next calls, all the\n-   --     --  elements of the HTable will be traversed.\n-\n-   --  end Simple_HTable;\n-\n-   -------------------\n-   -- Static_HTable --\n-   -------------------\n-\n-   --  A low-level Hash-Table abstraction, not as easy to instantiate as\n-   --  Simple_HTable but designed to allow complete control over the\n-   --  allocation of necessary data structures. Particularly useful when\n-   --  dynamic allocation is not desired. The model is that each Element\n-   --  contains its own Key that can be retrieved by Get_Key. Furthermore,\n-   --  Element provides a link that can be used by the HTable for linking\n-   --  elements with same hash codes:\n-\n-   --       Element\n-\n-   --         +-------------------+\n-   --         |       Key         |\n-   --         +-------------------+\n-   --         :    other data     :\n-   --         +-------------------+\n-   --         |     Next Elmt     |\n-   --         +-------------------+\n-\n    generic package Static_HTable renames System.HTable.Static_HTable;\n \n-   --  For convenience of reference here is what this package has in it:\n-\n-   --  generic\n-   --     type Header_Num is range <>;\n-   --     --  An integer type indicating the number and range of hash headers.\n-\n-   --     type Element (<>) is limited private;\n-   --     --  The type of element to be stored\n-\n-   --     type Elmt_Ptr is private;\n-   --     --  The type used to reference an element (will usually be an\n-   --     --  access type, but could be some other form of type such as\n-   --     --  an integer type).\n-\n-   --     Null_Ptr : Elmt_Ptr;\n-   --     --  The null value of the Elmt_Ptr type.\n-\n-   --     with procedure Set_Next (E : Elmt_Ptr; Next : Elmt_Ptr);\n-   --     with function  Next     (E : Elmt_Ptr) return Elmt_Ptr;\n-   --     --  The type must provide an internal link for the sake of the\n-   --     --  staticness of the HTable.\n-\n-   --     type Key is limited private;\n-   --     with function Get_Key (E : Elmt_Ptr) return Key;\n-   --     with function Hash    (F : Key)      return Header_Num;\n-   --     with function Equal   (F1, F2 : Key) return Boolean;\n-\n-   --  package Static_HTable is\n-\n-   --     procedure Reset;\n-   --     --  Resets the hash table by setting all its elements to Null_Ptr.\n-   --     --  The effect is to clear the hash table so that it can be reused.\n-   --     --  For the most common case where Elmt_Ptr is an access type, and\n-   --     --  Null_Ptr is null, this is only needed if the same table is\n-   --     --  reused in a new context. If Elmt_Ptr is other than an access\n-   --     --  type, or Null_Ptr is other than null, then Reset must be called\n-   --     --  before the first use of the hash table.\n-\n-   --     procedure Set (E : Elmt_Ptr);\n-   --     --  Insert the element pointer in the HTable\n-\n-   --     function Get (K : Key) return Elmt_Ptr;\n-   --     --  Returns the latest inserted element pointer with the given Key\n-   --     --  or null if none.\n-\n-   --     procedure Remove (K : Key);\n-   --     --  Removes the latest inserted element pointer associated with the\n-   --     --  given key if any, does nothing if none.\n-\n-   --     function Get_First return Elmt_Ptr;\n-   --     --  Returns Null_Ptr if the HTable is empty, otherwise returns one\n-   --     --  non specified element. There is no guarantee that two calls to\n-   --     --  this function will return the same element.\n-\n-   --     function Get_Next return Elmt_Ptr;\n-   --     --  Returns a non-specified element that has not been returned by\n-   --     --  the same function since the last call to Get_First or Null_Ptr\n-   --     --  if there is no such element or Get_First has never been called.\n-   --     --  If there is no call to 'Set' in between Get_Next calls, all\n-   --     --  the elements of the HTable will be traversed.\n-\n-   --  end Static_HTable;\n-\n-   ----------\n-   -- Hash --\n-   ----------\n-\n-   --  A generic hashing function working on String keys\n-\n    generic function Hash renames System.HTable.Hash;\n \n-   --  generic\n-   --     type Header_Num is range <>;\n-   --  function Hash (Key : String) return Header_Num;\n-\n end GNAT.HTable;"}]}