{"sha": "aa248b8db9a7594fcc84e52a84d56526d4284ca8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyNDhiOGRiOWE3NTk0ZmNjODRlNTJhODRkNTY1MjZkNDI4NGNhOA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-09-30T13:46:16Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-09-30T13:47:20Z"}, "message": "middle-end: Refactor refcnt to use SLP_TREE_REF_COUNT for consistency\n\nThis is a small refactoring which introduces SLP_TREE_REF_COUNT and replaces\nthe uses of refcnt with it.  This for consistency between the other properties.\n\nA similar patch was pre-approved last year but since there are more use now I am\nsending it for review anyway.\n\ngcc/ChangeLog:\n\n\t* tree-vectorizer.h (SLP_TREE_REF_COUNT): New.\n\t* tree-vect-slp.c (_slp_tree::_slp_tree, _slp_tree::~_slp_tree,\n\tvect_free_slp_tree, vect_build_slp_tree, vect_print_slp_tree,\n\tslp_copy_subtree, vect_attempt_slp_rearrange_stmts): Use it.", "tree": {"sha": "9fef7228a206707c269500f357d09b1aa06a14ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fef7228a206707c269500f357d09b1aa06a14ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa248b8db9a7594fcc84e52a84d56526d4284ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa248b8db9a7594fcc84e52a84d56526d4284ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa248b8db9a7594fcc84e52a84d56526d4284ca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa248b8db9a7594fcc84e52a84d56526d4284ca8/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734eed68537a1a9eed43a4e409da527474fbf63d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734eed68537a1a9eed43a4e409da527474fbf63d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/734eed68537a1a9eed43a4e409da527474fbf63d"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "e11037e6d2807d31cb450c42c5f5a4fedc16123c", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa248b8db9a7594fcc84e52a84d56526d4284ca8/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa248b8db9a7594fcc84e52a84d56526d4284ca8/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=aa248b8db9a7594fcc84e52a84d56526d4284ca8", "patch": "@@ -66,7 +66,7 @@ _slp_tree::_slp_tree ()\n   SLP_TREE_CODE (this) = ERROR_MARK;\n   SLP_TREE_VECTYPE (this) = NULL_TREE;\n   SLP_TREE_REPRESENTATIVE (this) = NULL;\n-  this->refcnt = 1;\n+  SLP_TREE_REF_COUNT (this) = 1;\n   this->max_nunits = 1;\n   this->lanes = 0;\n }\n@@ -92,7 +92,7 @@ vect_free_slp_tree (slp_tree node)\n   int i;\n   slp_tree child;\n \n-  if (--node->refcnt != 0)\n+  if (--SLP_TREE_REF_COUNT (node) != 0)\n     return;\n \n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n@@ -1180,7 +1180,7 @@ vect_build_slp_tree (vec_info *vinfo,\n \t\t\t *leader ? \"\" : \"failed \", *leader);\n       if (*leader)\n \t{\n-\t  (*leader)->refcnt++;\n+\t  SLP_TREE_REF_COUNT (*leader)++;\n \t  vect_update_max_nunits (max_nunits, (*leader)->max_nunits);\n \t}\n       return *leader;\n@@ -1194,7 +1194,7 @@ vect_build_slp_tree (vec_info *vinfo,\n       res->max_nunits = this_max_nunits;\n       vect_update_max_nunits (max_nunits, this_max_nunits);\n       /* Keep a reference for the bst_map use.  */\n-      res->refcnt++;\n+      SLP_TREE_REF_COUNT (res)++;\n     }\n   bst_map->put (stmts.copy (), res);\n   return res;\n@@ -1590,7 +1590,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n       SLP_TREE_CHILDREN (two).safe_splice (children);\n       slp_tree child;\n       FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (two), i, child)\n-\tchild->refcnt++;\n+\tSLP_TREE_REF_COUNT (child)++;\n \n       /* Here we record the original defs since this\n \t node represents the final lane configuration.  */\n@@ -1650,7 +1650,8 @@ vect_print_slp_tree (dump_flags_t dump_kind, dump_location_t loc,\n \t\t   : (SLP_TREE_DEF_TYPE (node) == vect_constant_def\n \t\t      ? \" (constant)\"\n \t\t      : \"\"), node,\n-\t\t   estimated_poly_value (node->max_nunits), node->refcnt);\n+\t\t   estimated_poly_value (node->max_nunits),\n+\t\t\t\t\t SLP_TREE_REF_COUNT (node));\n   if (SLP_TREE_SCALAR_STMTS (node).exists ())\n     FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n       dump_printf_loc (metadata, user_loc, \"\\tstmt %u %G\", i, stmt_info->stmt);\n@@ -1802,7 +1803,7 @@ slp_copy_subtree (slp_tree node, hash_map<slp_tree, slp_tree> &map)\n   SLP_TREE_REPRESENTATIVE (copy) = SLP_TREE_REPRESENTATIVE (node);\n   SLP_TREE_LANES (copy) = SLP_TREE_LANES (node);\n   copy->max_nunits = node->max_nunits;\n-  copy->refcnt = 0;\n+  SLP_TREE_REF_COUNT (copy) = 0;\n   if (SLP_TREE_SCALAR_STMTS (node).exists ())\n     SLP_TREE_SCALAR_STMTS (copy) = SLP_TREE_SCALAR_STMTS (node).copy ();\n   if (SLP_TREE_SCALAR_OPS (node).exists ())\n@@ -1819,7 +1820,7 @@ slp_copy_subtree (slp_tree node, hash_map<slp_tree, slp_tree> &map)\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (copy), i, child)\n     {\n       SLP_TREE_CHILDREN (copy)[i] = slp_copy_subtree (child, map);\n-      SLP_TREE_CHILDREN (copy)[i]->refcnt++;\n+      SLP_TREE_REF_COUNT (SLP_TREE_CHILDREN (copy)[i])++;\n     }\n   return copy;\n }\n@@ -1935,7 +1936,7 @@ vect_attempt_slp_rearrange_stmts (slp_instance slp_instn)\n   hash_map<slp_tree, slp_tree> map;\n   slp_tree unshared = slp_copy_subtree (SLP_INSTANCE_TREE (slp_instn), map);\n   vect_free_slp_tree (SLP_INSTANCE_TREE (slp_instn));\n-  unshared->refcnt++;\n+  SLP_TREE_REF_COUNT (unshared)++;\n   SLP_INSTANCE_TREE (slp_instn) = unshared;\n   FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (slp_instn), i, node)\n     SLP_INSTANCE_LOADS (slp_instn)[i] = *map.get (node);"}, {"sha": "37b091558fd85e0abf9b515727e47dd40f01cec6", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa248b8db9a7594fcc84e52a84d56526d4284ca8/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa248b8db9a7594fcc84e52a84d56526d4284ca8/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=aa248b8db9a7594fcc84e52a84d56526d4284ca8", "patch": "@@ -204,6 +204,7 @@ typedef class _slp_instance {\n #define SLP_TREE_CHILDREN(S)                     (S)->children\n #define SLP_TREE_SCALAR_STMTS(S)                 (S)->stmts\n #define SLP_TREE_SCALAR_OPS(S)                   (S)->ops\n+#define SLP_TREE_REF_COUNT(S)                    (S)->refcnt\n #define SLP_TREE_VEC_STMTS(S)                    (S)->vec_stmts\n #define SLP_TREE_VEC_DEFS(S)                     (S)->vec_defs\n #define SLP_TREE_NUMBER_OF_VEC_STMTS(S)          (S)->vec_stmts_size"}]}