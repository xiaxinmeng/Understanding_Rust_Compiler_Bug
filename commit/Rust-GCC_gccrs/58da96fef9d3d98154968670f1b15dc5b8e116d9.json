{"sha": "58da96fef9d3d98154968670f1b15dc5b8e116d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThkYTk2ZmVmOWQzZDk4MTU0OTY4NjcwZjFiMTVkYzViOGUxMTZkOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-03-23T16:02:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-03-23T16:02:30Z"}, "message": "tree-stdarg.c (va_list_counter_bump): Handle bumps via MEM_REF.\n\n2011-03-23  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-stdarg.c (va_list_counter_bump): Handle bumps via\n\tMEM_REF.\n\t(check_va_list_escapes): Likewise.\n\t(check_all_va_list_escapes): Likewise.\n\nFrom-SVN: r171353", "tree": {"sha": "fe05c89a37d45ba1355ef827a99ed207a13c1599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe05c89a37d45ba1355ef827a99ed207a13c1599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58da96fef9d3d98154968670f1b15dc5b8e116d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58da96fef9d3d98154968670f1b15dc5b8e116d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58da96fef9d3d98154968670f1b15dc5b8e116d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58da96fef9d3d98154968670f1b15dc5b8e116d9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8beb4d13e5c51a50507cb2be345773fa162fce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8beb4d13e5c51a50507cb2be345773fa162fce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8beb4d13e5c51a50507cb2be345773fa162fce7"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "1591ce89ce3c2d25b6070cbc4d34d8c39ef843ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58da96fef9d3d98154968670f1b15dc5b8e116d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58da96fef9d3d98154968670f1b15dc5b8e116d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58da96fef9d3d98154968670f1b15dc5b8e116d9", "patch": "@@ -1,3 +1,10 @@\n+2011-03-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-stdarg.c (va_list_counter_bump): Handle bumps via\n+\tMEM_REF.\n+\t(check_va_list_escapes): Likewise.\n+\t(check_all_va_list_escapes): Likewise.\n+\n 2011-03-23  Richard Guenther  <rguenther@suse.de>\n \n \t* Makefile.in (IPA_TYPE_ESCAPE_H): Remove."}, {"sha": "46fc339a55a62f9aae228fd5df68621ba07b0870", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58da96fef9d3d98154968670f1b15dc5b8e116d9/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58da96fef9d3d98154968670f1b15dc5b8e116d9/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=58da96fef9d3d98154968670f1b15dc5b8e116d9", "patch": "@@ -133,6 +133,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n   while (lhs)\n     {\n       enum tree_code rhs_code;\n+      tree rhs1;\n \n       if (si->offsets[SSA_NAME_VERSION (lhs)] != -1)\n \t{\n@@ -152,21 +153,32 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n \treturn (unsigned HOST_WIDE_INT) -1;\n \n       rhs_code = gimple_assign_rhs_code (stmt);\n+      rhs1 = gimple_assign_rhs1 (stmt);\n       if ((get_gimple_rhs_class (rhs_code) == GIMPLE_SINGLE_RHS\n \t   || gimple_assign_cast_p (stmt))\n-\t  && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME)\n+\t  && TREE_CODE (rhs1) == SSA_NAME)\n \t{\n-\t  lhs = gimple_assign_rhs1 (stmt);\n+\t  lhs = rhs1;\n \t  continue;\n \t}\n \n       if ((rhs_code == POINTER_PLUS_EXPR\n \t   || rhs_code == PLUS_EXPR)\n-\t  && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n+\t  && TREE_CODE (rhs1) == SSA_NAME\n \t  && host_integerp (gimple_assign_rhs2 (stmt), 1))\n \t{\n \t  ret += tree_low_cst (gimple_assign_rhs2 (stmt), 1);\n-\t  lhs = gimple_assign_rhs1 (stmt);\n+\t  lhs = rhs1;\n+\t  continue;\n+\t}\n+\n+      if (rhs_code == ADDR_EXPR \n+\t  && TREE_CODE (TREE_OPERAND (rhs1, 0)) == MEM_REF\n+\t  && TREE_CODE (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0)) == SSA_NAME\n+\t  && host_integerp (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1), 1))\n+\t{\n+\t  ret += tree_low_cst (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1), 1);\n+\t  lhs = TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0);\n \t  continue;\n \t}\n \n@@ -195,6 +207,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n   while (lhs)\n     {\n       enum tree_code rhs_code;\n+      tree rhs1;\n \n       if (si->offsets[SSA_NAME_VERSION (lhs)] != -1)\n \tbreak;\n@@ -207,21 +220,32 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n       stmt = SSA_NAME_DEF_STMT (lhs);\n \n       rhs_code = gimple_assign_rhs_code (stmt);\n+      rhs1 = gimple_assign_rhs1 (stmt);\n       if ((get_gimple_rhs_class (rhs_code) == GIMPLE_SINGLE_RHS\n \t   || gimple_assign_cast_p (stmt))\n-\t  && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME)\n+\t  && TREE_CODE (rhs1) == SSA_NAME)\n \t{\n-\t  lhs = gimple_assign_rhs1 (stmt);\n+\t  lhs = rhs1;\n \t  continue;\n \t}\n \n       if ((rhs_code == POINTER_PLUS_EXPR\n \t   || rhs_code == PLUS_EXPR)\n-\t  && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n+\t  && TREE_CODE (rhs1) == SSA_NAME\n \t  && host_integerp (gimple_assign_rhs2 (stmt), 1))\n \t{\n \t  val -= tree_low_cst (gimple_assign_rhs2 (stmt), 1);\n-\t  lhs = gimple_assign_rhs1 (stmt);\n+\t  lhs = rhs1;\n+\t  continue;\n+\t}\n+\n+      if (rhs_code == ADDR_EXPR \n+\t  && TREE_CODE (TREE_OPERAND (rhs1, 0)) == MEM_REF\n+\t  && TREE_CODE (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0)) == SSA_NAME\n+\t  && host_integerp (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1), 1))\n+\t{\n+\t  val -= tree_low_cst (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1), 1);\n+\t  lhs = TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0);\n \t  continue;\n \t}\n \n@@ -433,9 +457,22 @@ check_va_list_escapes (struct stdarg_info *si, tree lhs, tree rhs)\n   if (! POINTER_TYPE_P (TREE_TYPE (rhs)))\n     return;\n \n-  if (TREE_CODE (rhs) != SSA_NAME\n-      || ! bitmap_bit_p (si->va_list_escape_vars,\n-\t\t\t DECL_UID (SSA_NAME_VAR (rhs))))\n+  if (TREE_CODE (rhs) == SSA_NAME)\n+    {\n+      if (! bitmap_bit_p (si->va_list_escape_vars,\n+\t\t\t  DECL_UID (SSA_NAME_VAR (rhs))))\n+\treturn;\n+    }\n+  else if (TREE_CODE (rhs) == ADDR_EXPR\n+\t   && TREE_CODE (TREE_OPERAND (rhs, 0)) == MEM_REF\n+\t   && TREE_CODE (TREE_OPERAND (TREE_OPERAND (rhs, 0), 0)) == SSA_NAME)\n+    {\n+      if (! bitmap_bit_p (si->va_list_escape_vars,\n+\t\t\t  DECL_UID (SSA_NAME_VAR (TREE_OPERAND\n+\t\t\t\t\t\t  (TREE_OPERAND (rhs, 0), 0)))))\n+\treturn;\n+    }\n+  else\n     return;\n \n   if (TREE_CODE (lhs) != SSA_NAME || is_global_var (SSA_NAME_VAR (lhs)))\n@@ -512,7 +549,7 @@ check_all_va_list_escapes (struct stdarg_info *si)\n \t\t  enum tree_code rhs_code = gimple_assign_rhs_code (stmt);\n \n \t\t  /* x = *ap_temp;  */\n-\t\t  if (gimple_assign_rhs_code (stmt) == MEM_REF\n+\t\t  if (rhs_code == MEM_REF\n \t\t      && TREE_OPERAND (rhs, 0) == use\n \t\t      && TYPE_SIZE_UNIT (TREE_TYPE (rhs))\n \t\t      && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (rhs)), 1)\n@@ -557,6 +594,16 @@ check_all_va_list_escapes (struct stdarg_info *si)\n \t\t\t\t\t   DECL_UID (lhs)))\n \t\t\tcontinue;\n \t\t    }\n+\t\t  else if (rhs_code == ADDR_EXPR\n+\t\t\t   && TREE_CODE (TREE_OPERAND (rhs, 0)) == MEM_REF\n+\t\t\t   && TREE_OPERAND (TREE_OPERAND (rhs, 0), 0) == use)\n+\t\t    {\n+\t\t      tree lhs = gimple_assign_lhs (stmt);\n+\n+\t\t      if (bitmap_bit_p (si->va_list_escape_vars,\n+\t\t\t\t\tDECL_UID (SSA_NAME_VAR (lhs))))\n+\t\t\tcontinue;\n+\t\t    }\n \t\t}\n \n \t      if (dump_file && (dump_flags & TDF_DETAILS))"}]}