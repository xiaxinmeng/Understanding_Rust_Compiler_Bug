{"sha": "5cebbd8de37bec65562d047500b13d93c6ad839f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNlYmJkOGRlMzdiZWM2NTU2MmQwNDc1MDBiMTNkOTNjNmFkODM5Zg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-04-29T20:58:12Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-04-29T20:58:12Z"}, "message": "cpphash.h: Move struct reflist, struct definition, and the DEFINITION typedef to cpphash.c.\n\n\t* cpphash.h: Move struct reflist, struct definition, and the\n\tDEFINITION typedef to cpphash.c.  Use 'struct definition *' in\n\tunion hashval.  _cpp_free_definition takes a HASHNODE pointer.\n\t* cpphash.c (_cpp_free_definition): Free data pointed to by\n\tMCONST, XCONST, MACRO, and FMACRO nodes properly.\n\t(_cpp_create_definition, del_HASHNODE): Just call\n\t_cpp_free_definition to clear out a hashnode.\n\t* cpplib.c (do_pragma_poison): Likewise.\n\nFrom-SVN: r33536", "tree": {"sha": "3485b8cc5bd488923ed2e4a7685f61b49bd637e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3485b8cc5bd488923ed2e4a7685f61b49bd637e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cebbd8de37bec65562d047500b13d93c6ad839f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cebbd8de37bec65562d047500b13d93c6ad839f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cebbd8de37bec65562d047500b13d93c6ad839f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cebbd8de37bec65562d047500b13d93c6ad839f/comments", "author": null, "committer": null, "parents": [{"sha": "0bf0f02717e5029aed0aacda9198e05d7c1d2c2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf0f02717e5029aed0aacda9198e05d7c1d2c2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bf0f02717e5029aed0aacda9198e05d7c1d2c2d"}], "stats": {"total": 158, "additions": 83, "deletions": 75}, "files": [{"sha": "6925343e52b180a9475f77d850f5d6fff4fb075d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cebbd8de37bec65562d047500b13d93c6ad839f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cebbd8de37bec65562d047500b13d93c6ad839f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cebbd8de37bec65562d047500b13d93c6ad839f", "patch": "@@ -1,3 +1,14 @@\n+2000-04-29  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpphash.h: Move struct reflist, struct definition, and the\n+\tDEFINITION typedef to cpphash.c.  Use 'struct definition *' in\n+\tunion hashval.  _cpp_free_definition takes a HASHNODE pointer.\n+\t* cpphash.c (_cpp_free_definition): Free data pointed to by\n+\tMCONST, XCONST, MACRO, and FMACRO nodes properly.\n+\t(_cpp_create_definition, del_HASHNODE): Just call\n+\t_cpp_free_definition to clear out a hashnode.\n+\t* cpplib.c (do_pragma_poison): Likewise.\n+\n Sat Apr 29 12:25:17 2000  Alexandre Oliva  <aoliva@cygnus.com>\n \n \t* config/mn10300/mn10300.h (FIRST_DATA_REGNUM,"}, {"sha": "0cb8ff64975490c872ab3d00e4a040380eef4ba0", "filename": "gcc/cpphash.c", "status": "modified", "additions": 69, "deletions": 21, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cebbd8de37bec65562d047500b13d93c6ad839f/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cebbd8de37bec65562d047500b13d93c6ad839f/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=5cebbd8de37bec65562d047500b13d93c6ad839f", "patch": "@@ -31,6 +31,55 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #undef abort\n \n+/* Structure allocated for every #define.  For a simple replacement\n+   such as\n+   \t#define foo bar ,\n+   nargs = -1, the `pattern' list is null, and the expansion is just\n+   the replacement text.  Nargs = 0 means a functionlike macro with no args,\n+   e.g.,\n+       #define getchar() getc (stdin) .\n+   When there are args, the expansion is the replacement text with the\n+   args squashed out, and the reflist is a list describing how to\n+   build the output from the input: e.g., \"3 chars, then the 1st arg,\n+   then 9 chars, then the 3rd arg, then 0 chars, then the 2nd arg\".\n+   The chars here come from the expansion.  Whatever is left of the\n+   expansion after the last arg-occurrence is copied after that arg.\n+   Note that the reflist can be arbitrarily long---\n+   its length depends on the number of times the arguments appear in\n+   the replacement text, not how many args there are.  Example:\n+   #define f(x) x+x+x+x+x+x+x would have replacement text \"++++++\" and\n+   pattern list\n+     { (0, 1), (1, 1), (1, 1), ..., (1, 1), NULL }\n+   where (x, y) means (nchars, argno). */\n+\n+struct reflist\n+{\n+  struct reflist *next;\n+  char stringify;\t\t/* nonzero if this arg was preceded by a\n+\t\t\t\t   # operator. */\n+  char raw_before;\t\t/* Nonzero if a ## operator before arg. */\n+  char raw_after;\t\t/* Nonzero if a ## operator after arg. */\n+  char rest_args;\t\t/* Nonzero if this arg. absorbs the rest */\n+  int nchars;\t\t\t/* Number of literal chars to copy before\n+\t\t\t\t   this arg occurrence.  */\n+  int argno;\t\t\t/* Number of arg to substitute (origin-0) */\n+};\n+\n+typedef struct definition DEFINITION;\n+struct definition\n+{\n+  int nargs;\n+  int length;\t\t\t/* length of expansion string */\n+  U_CHAR *expansion;\n+  char rest_args;\t\t/* Nonzero if last arg. absorbs the rest */\n+  struct reflist *pattern;\n+\n+  /* Names of macro args, concatenated in order with \\0 between\n+     them.  The only use of this is that we warn on redefinition if\n+     this differs between the old and new definitions.  */\n+  U_CHAR *argnames;\n+};\n+\n static unsigned int hash_HASHNODE PARAMS ((const void *));\n static int eq_HASHNODE\t\t  PARAMS ((const void *, const void *));\n static void del_HASHNODE\t  PARAMS ((void *));\n@@ -160,11 +209,8 @@ del_HASHNODE (x)\n      void *x;\n {\n   HASHNODE *h = (HASHNODE *)x;\n-  \n-  if (h->type == T_MACRO)\n-    _cpp_free_definition (h->value.defn);\n-  else if (h->type == T_MCONST)\n-    free ((void *) h->value.cpval);\n+\n+  _cpp_free_definition (h);\n   free ((void *) h->name);\n   free (h);\n }\n@@ -266,23 +312,28 @@ _cpp_init_macro_hash (pfile)\n \t\t\t\teq_HASHNODE, del_HASHNODE);\n }\n \n-/* Free a DEFINITION structure.  Used by delete_macro, and by\n-   do_define when redefining macros.  */\n+/* Free the definition of macro H.  */\n \n void\n-_cpp_free_definition (d)\n-     DEFINITION *d;\n+_cpp_free_definition (h)\n+     HASHNODE *h;\n {\n-  struct reflist *ap, *nextap;\n-\n-  for (ap = d->pattern; ap != NULL; ap = nextap)\n+  if (h->type == T_MCONST || h->type == T_XCONST)\n+    free ((void *) h->value.cpval);\n+  else if (h->type == T_MACRO || h->type == T_FMACRO)\n     {\n-      nextap = ap->next;\n-      free (ap);\n+      DEFINITION *d = h->value.defn;\n+      struct reflist *ap, *nextap;\n+    \n+      for (ap = d->pattern; ap != NULL; ap = nextap)\n+\t{\n+\t  nextap = ap->next;\n+\t  free (ap);\n+\t}\n+      if (d->argnames)\n+\tfree (d->argnames);\n+      free (d);\n     }\n-  if (d->argnames)\n-    free (d->argnames);\n-  free (d);\n }\n \n static int\n@@ -934,10 +985,7 @@ _cpp_create_definition (pfile, list, hp)\n \n   /* And replace the old definition (if any).  */\n \n-  if (hp->type == T_MACRO || hp->type == T_FMACRO)\n-    _cpp_free_definition (hp->value.defn);\n-  else if (hp->type == T_MCONST || hp->type == T_XCONST)\n-    free ((PTR) hp->value.cpval);\n+  _cpp_free_definition (hp);\n \n   if (ntype == T_MACRO || ntype == T_FMACRO)\n     hp->value.defn = defn;"}, {"sha": "498dee5b83d32e9eb8c79446a29cfb4a79c9b41f", "filename": "gcc/cpphash.h", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cebbd8de37bec65562d047500b13d93c6ad839f/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cebbd8de37bec65562d047500b13d93c6ad839f/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=5cebbd8de37bec65562d047500b13d93c6ad839f", "patch": "@@ -24,55 +24,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n typedef unsigned char U_CHAR;\n \n-/* Structure allocated for every #define.  For a simple replacement\n-   such as\n-   \t#define foo bar ,\n-   nargs = -1, the `pattern' list is null, and the expansion is just\n-   the replacement text.  Nargs = 0 means a functionlike macro with no args,\n-   e.g.,\n-       #define getchar() getc (stdin) .\n-   When there are args, the expansion is the replacement text with the\n-   args squashed out, and the reflist is a list describing how to\n-   build the output from the input: e.g., \"3 chars, then the 1st arg,\n-   then 9 chars, then the 3rd arg, then 0 chars, then the 2nd arg\".\n-   The chars here come from the expansion.  Whatever is left of the\n-   expansion after the last arg-occurrence is copied after that arg.\n-   Note that the reflist can be arbitrarily long---\n-   its length depends on the number of times the arguments appear in\n-   the replacement text, not how many args there are.  Example:\n-   #define f(x) x+x+x+x+x+x+x would have replacement text \"++++++\" and\n-   pattern list\n-     { (0, 1), (1, 1), (1, 1), ..., (1, 1), NULL }\n-   where (x, y) means (nchars, argno). */\n-\n-struct reflist\n-{\n-  struct reflist *next;\n-  char stringify;\t\t/* nonzero if this arg was preceded by a\n-\t\t\t\t   # operator. */\n-  char raw_before;\t\t/* Nonzero if a ## operator before arg. */\n-  char raw_after;\t\t/* Nonzero if a ## operator after arg. */\n-  char rest_args;\t\t/* Nonzero if this arg. absorbs the rest */\n-  int nchars;\t\t\t/* Number of literal chars to copy before\n-\t\t\t\t   this arg occurrence.  */\n-  int argno;\t\t\t/* Number of arg to substitute (origin-0) */\n-};\n-\n-typedef struct definition DEFINITION;\n-struct definition\n-{\n-  int nargs;\n-  int length;\t\t\t/* length of expansion string */\n-  U_CHAR *expansion;\n-  char rest_args;\t\t/* Nonzero if last arg. absorbs the rest */\n-  struct reflist *pattern;\n-\n-  /* Names of macro args, concatenated in order with \\0 between\n-     them.  The only use of this is that we warn on redefinition if\n-     this differs between the old and new definitions.  */\n-  U_CHAR *argnames;\n-};\n-\n /* The structure of a node in the hash table.  The hash table\n    has entries for all tokens defined by #define commands (type T_MACRO),\n    plus some special tokens like __LINE__ (these each have their own\n@@ -106,7 +57,7 @@ enum node_type\n union hashval\n {\n   const char *cpval;\t\t/* some predefined macros */\n-  DEFINITION *defn;\t\t/* #define */\n+  struct definition *defn;\t/* #define */\n   struct hashnode *aschain;\t/* #assert */\n };\n \n@@ -276,7 +227,7 @@ extern HASHNODE **_cpp_lookup_slot\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t const U_CHAR *, int,\n \t\t\t\t\t\t enum insert_option,\n \t\t\t\t\t\t unsigned long *));\n-extern void _cpp_free_definition\tPARAMS ((DEFINITION *));\n+extern void _cpp_free_definition\tPARAMS ((HASHNODE *));\n extern int _cpp_create_definition\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t cpp_toklist *, HASHNODE *));\n extern void _cpp_dump_definition\tPARAMS ((cpp_reader *, HASHNODE *));"}, {"sha": "384f5fbc6f4f46443a5251d53ca5e74be4f20461", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cebbd8de37bec65562d047500b13d93c6ad839f/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cebbd8de37bec65562d047500b13d93c6ad839f/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=5cebbd8de37bec65562d047500b13d93c6ad839f", "patch": "@@ -980,9 +980,7 @@ do_pragma_poison (pfile)\n \t  if (hp->type != T_POISON)\n \t    {\n \t      cpp_warning (pfile, \"poisoning existing macro `%s'\", hp->name);\n-\t      if (hp->type == T_MACRO)\n-\t\t_cpp_free_definition (hp->value.defn);\n-\t      hp->value.defn = 0;\n+\t      _cpp_free_definition (hp);\n \t      hp->type = T_POISON;\n \t    }\n \t}"}]}