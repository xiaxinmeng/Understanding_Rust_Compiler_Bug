{"sha": "3276910d993a463455cbd3017e8579da518ebcaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3NjkxMGQ5OTNhNDYzNDU1Y2JkMzAxN2U4NTc5ZGE1MThlYmNhYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-01-02T02:45:03Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-02T02:45:03Z"}, "message": "sparc.c (sparc_override_options): Do support different pointer and architecture size.\n\n\t* config/sparc/sparc.c (sparc_override_options): Do support different\n\tpointer and architecture size.\n\t* config/sparc/sparc.h (MIN_UNITS_PER_WORD): Always 4.\n\t(POINTERS_EXTEND_UNSIGNED): Define.\n\t(Pmode): Test TARGET_ARCH64, not TARGET_PTR64.\n\t(FUNCTION_MODE): Define to be Pmode.\n\t* config/sparc/sparc.md (64-bit call patterns): FUNCTION_MODE now DI.\n\nFrom-SVN: r38608", "tree": {"sha": "0b167a061702cc6e3856611aff958865d39a9693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b167a061702cc6e3856611aff958865d39a9693"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3276910d993a463455cbd3017e8579da518ebcaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3276910d993a463455cbd3017e8579da518ebcaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3276910d993a463455cbd3017e8579da518ebcaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3276910d993a463455cbd3017e8579da518ebcaa/comments", "author": null, "committer": null, "parents": [{"sha": "d1608933b95df6978bf6683ededf4d05af9d65f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1608933b95df6978bf6683ededf4d05af9d65f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1608933b95df6978bf6683ededf4d05af9d65f4"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "442a9986791826e566a1cdc817e486a8fcae29b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3276910d993a463455cbd3017e8579da518ebcaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3276910d993a463455cbd3017e8579da518ebcaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3276910d993a463455cbd3017e8579da518ebcaa", "patch": "@@ -1,5 +1,13 @@\n Mon Jan  1 21:28:29 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* config/sparc/sparc.c (sparc_override_options): Do support different\n+\tpointer and architecture size.\n+\t* config/sparc/sparc.h (MIN_UNITS_PER_WORD): Always 4.\n+\t(POINTERS_EXTEND_UNSIGNED): Define.\n+\t(Pmode): Test TARGET_ARCH64, not TARGET_PTR64.\n+\t(FUNCTION_MODE): Define to be Pmode.\n+\t* config/sparc/sparc.md (64-bit call patterns): FUNCTION_MODE now DI.\n+\n \t* function.c (expand_function_end): Properly handle DECL_RESULT\n \tand copy when ptr_mode != Pmode.\n \t* expmed.c (make_tree): Convert X from Pmode to ptr_mode, if needed."}, {"sha": "4e3dbe67edba36e28d749b5da5c38dacf4e836e6", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3276910d993a463455cbd3017e8579da518ebcaa/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3276910d993a463455cbd3017e8579da518ebcaa/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3276910d993a463455cbd3017e8579da518ebcaa", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for Sun SPARC.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n    64 bit SPARC V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n    at Cygnus Support.\n@@ -241,7 +241,7 @@ sparc_override_options ()\n     { \"ultrasparc\", PROCESSOR_ULTRASPARC, MASK_ISA, MASK_V9\n     /* Although insns using %y are deprecated, it is a clear win on current\n        ultrasparcs. */\n-    \t\t\t\t\t\t    |MASK_DEPRECATED_V8_INSNS },\n+    \t\t\t\t\t\t    |MASK_DEPRECATED_V8_INSNS},\n     { 0, 0, 0, 0 }\n   };\n   struct cpu_table *cpu;\n@@ -251,23 +251,10 @@ sparc_override_options ()\n #ifndef SPARC_BI_ARCH\n   /* Check for unsupported architecture size.  */\n   if (! TARGET_64BIT != DEFAULT_ARCH32_P)\n-    {\n-      error (\"%s is not supported by this configuration\",\n-\t     DEFAULT_ARCH32_P ? \"-m64\" : \"-m32\");\n-    }\n+    error (\"%s is not supported by this configuration\",\n+\t   DEFAULT_ARCH32_P ? \"-m64\" : \"-m32\");\n #endif\n \n-  /* At the moment we don't allow different pointer size and architecture */\n-  if (! TARGET_64BIT != ! TARGET_PTR64)\n-    {\n-      error (\"-mptr%d not allowed on -m%d\",\n-      \t     TARGET_PTR64 ? 64 : 32, TARGET_64BIT ? 64 : 32);\n-      if (TARGET_64BIT)\n-    \ttarget_flags |= MASK_PTR64;\n-      else\n-        target_flags &= ~MASK_PTR64;\n-    }\n-\n   /* We force all 64bit archs to use 128 bit long double */\n   if (TARGET_64BIT && ! TARGET_LONG_DOUBLE_128)\n     {"}, {"sha": "92233c66c9a2c8956cc2970378fa700dd261c611", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3276910d993a463455cbd3017e8579da518ebcaa/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3276910d993a463455cbd3017e8579da518ebcaa/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=3276910d993a463455cbd3017e8579da518ebcaa", "patch": "@@ -765,11 +765,7 @@ extern struct sparc_cpu_select sparc_select[];\n \n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD\t\t(TARGET_ARCH64 ? 8 : 4)\n-#ifdef IN_LIBGCC2\n-#define MIN_UNITS_PER_WORD\tUNITS_PER_WORD\n-#else\n #define MIN_UNITS_PER_WORD\t4\n-#endif\n \n /* Now define the sizes of the C data types.  */\n \n@@ -780,7 +776,7 @@ extern struct sparc_cpu_select sparc_select[];\n #define FLOAT_TYPE_SIZE\t\t32\n #define DOUBLE_TYPE_SIZE\t64\n \n-#if defined (SPARC_BI_ARCH)\n+#ifdef SPARC_BI_ARCH\n #define MAX_LONG_TYPE_SIZE\t64\n #endif\n \n@@ -796,6 +792,11 @@ extern struct sparc_cpu_select sparc_select[];\n    See also the macro `Pmode' defined below.  */\n #define POINTER_SIZE (TARGET_PTR64 ? 64 : 32)\n \n+/* If we have to extend pointers (only when TARGET_ARCH64 and not\n+   TARGET_PTR64), we want to do it unsigned.   This macro does nothing\n+   if ptr_mode and Pmode are the same.  */\n+#define POINTERS_EXTEND_UNSIGNED 1\n+\n /* A macro to update MODE and UNSIGNEDP when an object whose type\n    is TYPE and which has the specified mode and signedness is to be\n    stored in a register.  This macro is only called when TYPE is a\n@@ -804,9 +805,7 @@ extern struct sparc_cpu_select sparc_select[];\n if (TARGET_ARCH64\t\t\t\t\\\n     && GET_MODE_CLASS (MODE) == MODE_INT\t\\\n     && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\t\\\n-{\t\t\t\t\t\t\\\n-  (MODE) = DImode;\t\t\t\t\\\n-}\n+  (MODE) = DImode;\n \n /* Define this macro if the promotion described by PROMOTE_MODE\n    should also be done for outgoing function arguments.  */\n@@ -2697,7 +2696,7 @@ do {                                                                    \\\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */\n-#define Pmode (TARGET_PTR64 ? DImode : SImode)\n+#define Pmode (TARGET_ARCH64 ? DImode : SImode)\n \n /* Generate calls to memcpy, memcmp and memset.  */\n #define TARGET_MEM_FUNCTIONS\n@@ -2735,10 +2734,8 @@ do {                                                                    \\\n    code knows how to reverse it correctly we keep the old definition.  */\n #define REVERSIBLE_CC_MODE(MODE) ((MODE) != CCFPEmode && (MODE) != CCFPmode)\n \n-/* A function address in a call instruction\n-   is a byte address (for indexing purposes)\n-   so give the MEM rtx a byte's mode.  */\n-#define FUNCTION_MODE SImode\n+/* A function address in a call instruction for indexing purposes.  */\n+#define FUNCTION_MODE Pmode\n \n /* Define this if addresses of constant functions\n    shouldn't be put through pseudo regs where they can be cse'd."}, {"sha": "0d28488a8e4540ec26b4ea77d8df3900797ee0b0", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3276910d993a463455cbd3017e8579da518ebcaa/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3276910d993a463455cbd3017e8579da518ebcaa/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=3276910d993a463455cbd3017e8579da518ebcaa", "patch": "@@ -1,6 +1,6 @@\n-;;- Machine description for SPARC chip for GNU C compiler\n+;- Machine description for SPARC chip for GNU C compiler\n ;;  Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-;;  1999, 2000 Free Software Foundation, Inc.\n+;;  1999, 2000, 2001 Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@cygnus.com)\n ;;  64 bit SPARC V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n ;;  at Cygnus Support.\n@@ -149,7 +149,7 @@\n   [(eq_attr \"in_call_delay\" \"true\") (nil) (nil)])\n \n (define_attr \"eligible_for_sibcall_delay\" \"false,true\"\n-  (symbol_ref \"eligible_for_sibcall_delay(insn)\"))\n+  (symbol_ref \"eligible_for_sibcall_delay (insn)\"))\n \n (define_delay (eq_attr \"type\" \"sibcall\")\n   [(eq_attr \"eligible_for_sibcall_delay\" \"true\") (nil) (nil)])\n@@ -158,7 +158,7 @@\n   (const (symbol_ref \"current_function_uses_only_leaf_regs\")))\n \n (define_attr \"eligible_for_return_delay\" \"false,true\"\n-  (symbol_ref \"eligible_for_return_delay(insn)\"))\n+  (symbol_ref \"eligible_for_return_delay (insn)\"))\n \n (define_attr \"in_return_delay\" \"false,true\"\n   (if_then_else (and (and (and (eq_attr \"type\" \"move,load,sload,store,binary,ialu\")\n@@ -8598,7 +8598,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*call_address_sp64\"\n-  [(call (mem:SI (match_operand:DI 0 \"address_operand\" \"p\"))\n+  [(call (mem:DI (match_operand:DI 0 \"address_operand\" \"p\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:DI 15))]\n   ;;- Do not use operand 1 for most machines.\n@@ -8607,7 +8607,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*call_symbolic_sp64\"\n-  [(call (mem:SI (match_operand:DI 0 \"symbolic_operand\" \"s\"))\n+  [(call (mem:DI (match_operand:DI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:DI 15))]\n   ;;- Do not use operand 1 for most machines.\n@@ -8666,7 +8666,7 @@\n   ;; Note that this expression is not used for generating RTL.\n   ;; All the RTL is generated explicitly below.\n   [(set (match_operand 0 \"register_operand\" \"=rf\")\n-\t(call (match_operand:SI 1 \"\" \"\")\n+\t(call (match_operand 1 \"\" \"\")\n \t      (match_operand 4 \"\" \"\")))]\n   ;; operand 2 is stack_size_rtx\n   ;; operand 3 is next_arg_register\n@@ -8722,7 +8722,7 @@\n \n (define_insn \"*call_value_address_sp64\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:DI 1 \"address_operand\" \"p\"))\n+\t(call (mem:DI (match_operand:DI 1 \"address_operand\" \"p\"))\n \t      (match_operand 2 \"\" \"\")))\n    (clobber (reg:DI 15))]\n   ;;- Do not use operand 2 for most machines.\n@@ -8732,7 +8732,7 @@\n \n (define_insn \"*call_value_symbolic_sp64\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:DI 1 \"symbolic_operand\" \"s\"))\n+\t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"\")))\n    (clobber (reg:DI 15))]\n   ;;- Do not use operand 2 for most machines.\n@@ -8785,7 +8785,7 @@\n   [(set_attr \"type\" \"sibcall\")])\n \n (define_insn \"*sibcall_symbolic_sp64\"\n-  [(call (mem:SI (match_operand:DI 0 \"symbolic_operand\" \"s\"))\n+  [(call (mem:DI (match_operand:DI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (return)]\n   \"TARGET_ARCH64\"\n@@ -8794,7 +8794,7 @@\n \n (define_expand \"sibcall_value\"\n   [(parallel [(set (match_operand 0 \"register_operand\" \"=rf\")\n-\t\t(call (match_operand:SI 1 \"\" \"\") (const_int 0)))\n+\t\t(call (match_operand 1 \"\" \"\") (const_int 0)))\n \t      (return)])]\n   \"\"\n   \"\")\n@@ -8810,7 +8810,7 @@\n \n (define_insn \"*sibcall_value_symbolic_sp64\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:DI 1 \"symbolic_operand\" \"s\"))\n+\t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"\")))\n    (return)]\n   \"TARGET_ARCH64\""}]}