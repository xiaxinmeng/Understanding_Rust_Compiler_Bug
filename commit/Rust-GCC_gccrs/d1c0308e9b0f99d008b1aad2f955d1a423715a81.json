{"sha": "d1c0308e9b0f99d008b1aad2f955d1a423715a81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFjMDMwOGU5YjBmOTlkMDA4YjFhYWQyZjk1NWQxYTQyMzcxNWE4MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-20T08:16:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-20T08:16:13Z"}, "message": "re PR tree-optimization/61221 (ICE on valid code at -O1 and above on x86_64-linux-gnu)\n\n2014-05-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61221\n\t* tree-ssa-pre.c (el_to_update): Remove.\n\t(eliminate_dom_walker::before_dom_children): Handle released\n\tVDEFs by value-numbering them to the associated VUSE.  Update\n\tstmt immediately for substituted call address.\n\t(eliminate): Remove delayed stmt updating code.\n\t* tree-ssa-sccvn.c (vuse_ssa_val): New function valueizing\n\tpossibly late re-numbered vuses.\n\t(vn_reference_lookup_2): Adjust.\n\t(vn_reference_lookup_pieces): Likewise.\n\t(vn_reference_lookup): Likewise.\n\nFrom-SVN: r210633", "tree": {"sha": "64cca862e3e1fdc3c2795649bc8b94442a0f1313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64cca862e3e1fdc3c2795649bc8b94442a0f1313"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1c0308e9b0f99d008b1aad2f955d1a423715a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c0308e9b0f99d008b1aad2f955d1a423715a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c0308e9b0f99d008b1aad2f955d1a423715a81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c0308e9b0f99d008b1aad2f955d1a423715a81/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54da09ee2062f41141dbfd116975ee20509a96e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54da09ee2062f41141dbfd116975ee20509a96e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54da09ee2062f41141dbfd116975ee20509a96e3"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "26142bad936ceb8ff5d7eec43de760ffac347dbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c0308e9b0f99d008b1aad2f955d1a423715a81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c0308e9b0f99d008b1aad2f955d1a423715a81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1c0308e9b0f99d008b1aad2f955d1a423715a81", "patch": "@@ -1,3 +1,17 @@\n+2014-05-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61221\n+\t* tree-ssa-pre.c (el_to_update): Remove.\n+\t(eliminate_dom_walker::before_dom_children): Handle released\n+\tVDEFs by value-numbering them to the associated VUSE.  Update\n+\tstmt immediately for substituted call address.\n+\t(eliminate): Remove delayed stmt updating code.\n+\t* tree-ssa-sccvn.c (vuse_ssa_val): New function valueizing\n+\tpossibly late re-numbered vuses.\n+\t(vn_reference_lookup_2): Adjust.\n+\t(vn_reference_lookup_pieces): Likewise.\n+\t(vn_reference_lookup): Likewise.\n+\n 2014-05-20  Richard Biener  <rguenther@suse.de>\n \n \t* config.gcc: Remove need_64bit_hwint."}, {"sha": "2929d4de21a33a69abd9749db4b56392acacee37", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c0308e9b0f99d008b1aad2f955d1a423715a81/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c0308e9b0f99d008b1aad2f955d1a423715a81/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=d1c0308e9b0f99d008b1aad2f955d1a423715a81", "patch": "@@ -3915,7 +3915,6 @@ compute_avail (void)\n \n /* Local state for the eliminate domwalk.  */\n static vec<gimple> el_to_remove;\n-static vec<gimple> el_to_update;\n static unsigned int el_todo;\n static vec<tree> el_avail;\n static vec<tree> el_avail_stack;\n@@ -4155,9 +4154,14 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n \t\t}\n \t      pre_stats.eliminations++;\n+\n+\t      tree vdef = gimple_vdef (stmt);\n+\t      tree vuse = gimple_vuse (stmt);\n \t      propagate_tree_value_into_stmt (&gsi, sprime);\n \t      stmt = gsi_stmt (gsi);\n \t      update_stmt (stmt);\n+\t      if (vdef != gimple_vdef (stmt))\n+\t\tVN_INFO (vdef)->valnum = vuse;\n \n \t      /* If we removed EH side-effects from the statement, clean\n \t\t its EH information.  */\n@@ -4255,9 +4259,14 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\tsprime = fold_convert (gimple_expr_type (stmt), sprime);\n \n \t      pre_stats.eliminations++;\n+\n+\t      tree vdef = gimple_vdef (stmt);\n+\t      tree vuse = gimple_vuse (stmt);\n \t      propagate_tree_value_into_stmt (&gsi, sprime);\n \t      stmt = gsi_stmt (gsi);\n \t      update_stmt (stmt);\n+\t      if (vdef != gimple_vdef (stmt))\n+\t\tVN_INFO (vdef)->valnum = vuse;\n \n \t      /* If we removed EH side-effects from the statement, clean\n \t\t its EH information.  */\n@@ -4371,7 +4380,11 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\t}\n \n \t      gimple_call_set_fn (stmt, fn);\n-\t      el_to_update.safe_push (stmt);\n+\t      tree vdef = gimple_vdef (stmt);\n+\t      tree vuse = gimple_vuse (stmt);\n+\t      update_stmt (stmt);\n+\t      if (vdef != gimple_vdef (stmt))\n+\t\tVN_INFO (vdef)->valnum = vuse;\n \n \t      /* When changing a call into a noreturn call, cfg cleanup\n \t\t is needed to fix up the noreturn call.  */\n@@ -4430,7 +4443,6 @@ eliminate (void)\n   need_ab_cleanup = BITMAP_ALLOC (NULL);\n \n   el_to_remove.create (0);\n-  el_to_update.create (0);\n   el_todo = 0;\n   el_avail.create (0);\n   el_avail_stack.create (0);\n@@ -4482,13 +4494,6 @@ eliminate (void)\n     }\n   el_to_remove.release ();\n \n-  /* We cannot update call statements with virtual operands during\n-     SSA walk.  This might remove them which in turn makes our\n-     VN lattice invalid.  */\n-  FOR_EACH_VEC_ELT (el_to_update, i, stmt)\n-    update_stmt (stmt);\n-  el_to_update.release ();\n-\n   return el_todo;\n }\n "}, {"sha": "73362f8bfa6b3a1d4e3eec27bf7369e97c695149", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c0308e9b0f99d008b1aad2f955d1a423715a81/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c0308e9b0f99d008b1aad2f955d1a423715a81/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=d1c0308e9b0f99d008b1aad2f955d1a423715a81", "patch": "@@ -318,6 +318,25 @@ static int *rpo_numbers;\n \n #define SSA_VAL(x) (VN_INFO ((x))->valnum)\n \n+/* Return the SSA value of the VUSE x, supporting released VDEFs\n+   during elimination which will value-number the VDEF to the\n+   associated VUSE (but not substitute in the whole lattice).  */\n+\n+static inline tree\n+vuse_ssa_val (tree x)\n+{\n+  if (!x)\n+    return NULL_TREE;\n+\n+  do\n+    {\n+      x = SSA_VAL (x);\n+    }\n+  while (SSA_NAME_IN_FREE_LIST (x));\n+\n+  return x;\n+}\n+\n /* This represents the top of the VN lattice, which is the universal\n    value.  */\n \n@@ -1495,7 +1514,7 @@ vn_reference_lookup_2 (ao_ref *op ATTRIBUTE_UNUSED, tree vuse,\n   /* Fixup vuse and hash.  */\n   if (vr->vuse)\n     vr->hashcode = vr->hashcode - SSA_NAME_VERSION (vr->vuse);\n-  vr->vuse = SSA_VAL (vuse);\n+  vr->vuse = vuse_ssa_val (vuse);\n   if (vr->vuse)\n     vr->hashcode = vr->hashcode + SSA_NAME_VERSION (vr->vuse);\n \n@@ -2035,7 +2054,7 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n     vnresult = &tmp;\n   *vnresult = NULL;\n \n-  vr1.vuse = vuse ? SSA_VAL (vuse) : NULL_TREE;\n+  vr1.vuse = vuse_ssa_val (vuse);\n   shared_lookup_references.truncate (0);\n   shared_lookup_references.safe_grow (operands.length ());\n   memcpy (shared_lookup_references.address (),\n@@ -2090,7 +2109,7 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n   if (vnresult)\n     *vnresult = NULL;\n \n-  vr1.vuse = vuse ? SSA_VAL (vuse) : NULL_TREE;\n+  vr1.vuse = vuse_ssa_val (vuse);\n   vr1.operands = operands\n     = valueize_shared_reference_ops_from_ref (op, &valuezied_anything);\n   vr1.type = TREE_TYPE (op);"}]}