{"sha": "fb6234e0f88b9623472927b15277da9f3c54518e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI2MjM0ZTBmODhiOTYyMzQ3MjkyN2IxNTI3N2RhOWYzYzU0NTE4ZQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2009-06-24T07:01:24Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2009-06-24T07:01:24Z"}, "message": "re PR middle-end/40501 (error: invalid conversion in gimple call)\n\n2009-06-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n\t\n\tPR middle-end/40501\n\t* tree-ssa-math-opts.c (execute_optimize_bswap): Convert the bswap\n\tsrc and dst operands if necessary.\n\n2009-06-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* gcc.dg/pr40501.c: New testcase.\n\nFrom-SVN: r148892", "tree": {"sha": "21889fd7e866f0af3eba04364725b46506ef9e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21889fd7e866f0af3eba04364725b46506ef9e95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb6234e0f88b9623472927b15277da9f3c54518e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6234e0f88b9623472927b15277da9f3c54518e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb6234e0f88b9623472927b15277da9f3c54518e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6234e0f88b9623472927b15277da9f3c54518e/comments", "author": null, "committer": null, "parents": [{"sha": "7acf4da6f94801cb3146709fc0ae310ac475a274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7acf4da6f94801cb3146709fc0ae310ac475a274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7acf4da6f94801cb3146709fc0ae310ac475a274"}], "stats": {"total": 99, "additions": 94, "deletions": 5}, "files": [{"sha": "948a35abcf0e08381ae805fbce28eae299521cae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6234e0f88b9623472927b15277da9f3c54518e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6234e0f88b9623472927b15277da9f3c54518e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb6234e0f88b9623472927b15277da9f3c54518e", "patch": "@@ -1,3 +1,9 @@\n+2009-06-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\t\n+\tPR middle-end/40501\n+\t* tree-ssa-math-opts.c (execute_optimize_bswap): Convert the bswap\n+\tsrc and dst operands if necessary.\n+\n 2009-06-23  DJ Delorie  <dj@redhat.com>\n \n \tAdd MeP port."}, {"sha": "faee9d1cb3b911c9027d51fce974f90f706d01ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6234e0f88b9623472927b15277da9f3c54518e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6234e0f88b9623472927b15277da9f3c54518e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb6234e0f88b9623472927b15277da9f3c54518e", "patch": "@@ -1,3 +1,7 @@\n+2009-06-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* gcc.dg/pr40501.c: New testcase.\n+\n 2009-06-23  DJ Delorie  <dj@redhat.com>\n \n \tAdd MeP port."}, {"sha": "0e43e63c654829deba622aa578b09c8c09cf5539", "filename": "gcc/testsuite/gcc.dg/pr40501.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6234e0f88b9623472927b15277da9f3c54518e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40501.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6234e0f88b9623472927b15277da9f3c54518e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40501.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40501.c?ref=fb6234e0f88b9623472927b15277da9f3c54518e", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target alpha*-*-* ia64*-*-* x86_64-*-* s390x-*-* } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+/* PR middle-end/40501 */\n+\n+/* This once failed due to the bswap pass missing to add the type\n+   casts of the signed argument and result to the proper unsigned\n+   types.  */\n+\n+typedef long int int64_t;\n+\n+int64_t\n+swap64 (int64_t n)\n+{\n+  return (((n & (((int64_t) 0xff) )) << 56) |\n+\t  ((n & (((int64_t) 0xff) << 8)) << 40) |\n+\t  ((n & (((int64_t) 0xff) << 16)) << 24) |\n+\t  ((n & (((int64_t) 0xff) << 24)) << 8) |\n+\t  ((n & (((int64_t) 0xff) << 32)) >> 8) |\n+\t  ((n & (((int64_t) 0xff) << 40)) >> 24) |\n+\t  ((n & (((int64_t) 0xff) << 48)) >> 40) |\n+\t  ((n & (((int64_t) 0xff) << 56)) >> 56));\n+}"}, {"sha": "11ce546e2d4e51f1a9c30fd2d8cb276cb9a37fad", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6234e0f88b9623472927b15277da9f3c54518e/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6234e0f88b9623472927b15277da9f3c54518e/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=fb6234e0f88b9623472927b15277da9f3c54518e", "patch": "@@ -1164,6 +1164,7 @@ execute_optimize_bswap (void)\n   basic_block bb;\n   bool bswap32_p, bswap64_p;\n   bool changed = false;\n+  tree bswap32_type = NULL_TREE, bswap64_type = NULL_TREE;\n \n   if (BITS_PER_UNIT != 8)\n     return 0;\n@@ -1181,14 +1182,29 @@ execute_optimize_bswap (void)\n   if (!bswap32_p && !bswap64_p)\n     return 0;\n \n+  /* Determine the argument type of the builtins.  The code later on\n+     assumes that the return and argument type are the same.  */\n+  if (bswap32_p)\n+    {\n+      tree fndecl = built_in_decls[BUILT_IN_BSWAP32];\n+      bswap32_type = TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (fndecl)));\n+    }\n+\n+  if (bswap64_p)\n+    {\n+      tree fndecl = built_in_decls[BUILT_IN_BSWAP64];\n+      bswap64_type = TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (fndecl)));\n+    }\n+\n   FOR_EACH_BB (bb)\n     {\n       gimple_stmt_iterator gsi;\n \n       for (gsi = gsi_after_labels (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n         {\n \t  gimple stmt = gsi_stmt (gsi);\n-\t  tree bswap_src;\n+\t  tree bswap_src, bswap_type;\n+\t  tree bswap_tmp;\n \t  tree fndecl = NULL_TREE;\n \t  int type_size;\n \t  gimple call;\n@@ -1203,11 +1219,17 @@ execute_optimize_bswap (void)\n \t    {\n \t    case 32:\n \t      if (bswap32_p)\n-\t\tfndecl = built_in_decls[BUILT_IN_BSWAP32];\n+\t\t{\n+\t\t  fndecl = built_in_decls[BUILT_IN_BSWAP32];\n+\t\t  bswap_type = bswap32_type;\n+\t\t}\n \t      break;\n \t    case 64:\n \t      if (bswap64_p)\n-\t\tfndecl = built_in_decls[BUILT_IN_BSWAP64];\n+\t\t{\n+\t\t  fndecl = built_in_decls[BUILT_IN_BSWAP64];\n+\t\t  bswap_type = bswap64_type;\n+\t\t}\n \t      break;\n \t    default:\n \t      continue;\n@@ -1222,8 +1244,41 @@ execute_optimize_bswap (void)\n \t    continue;\n \n \t  changed = true;\n-\t  call = gimple_build_call (fndecl, 1, bswap_src);\n-\t  gimple_call_set_lhs (call, gimple_assign_lhs (stmt));\n+\n+\t  bswap_tmp = bswap_src;\n+\n+\t  /* Convert the src expression if necessary.  */\n+\t  if (!useless_type_conversion_p (TREE_TYPE (bswap_tmp), bswap_type))\n+\t    {\n+\t      gimple convert_stmt;\n+\n+\t      bswap_tmp = create_tmp_var (bswap_type, \"bswapsrc\");\n+\t      add_referenced_var (bswap_tmp);\n+\t      bswap_tmp = make_ssa_name (bswap_tmp, NULL);\n+\n+\t      convert_stmt = gimple_build_assign_with_ops (\n+\t\t\t       CONVERT_EXPR, bswap_tmp, bswap_src, NULL);\n+\t      gsi_insert_before (&gsi, convert_stmt, GSI_SAME_STMT);\n+\t    }\n+\n+\t  call = gimple_build_call (fndecl, 1, bswap_tmp);\n+\n+\t  bswap_tmp = gimple_assign_lhs (stmt);\n+\n+\t  /* Convert the result if necessary.  */\n+\t  if (!useless_type_conversion_p (TREE_TYPE (bswap_tmp), bswap_type))\n+\t    {\n+\t      gimple convert_stmt;\n+\n+\t      bswap_tmp = create_tmp_var (bswap_type, \"bswapdst\");\n+\t      add_referenced_var (bswap_tmp);\n+\t      bswap_tmp = make_ssa_name (bswap_tmp, NULL);\n+\t      convert_stmt = gimple_build_assign_with_ops (\n+\t\t               CONVERT_EXPR, gimple_assign_lhs (stmt), bswap_tmp, NULL);\n+\t      gsi_insert_after (&gsi, convert_stmt, GSI_SAME_STMT);\n+\t    }\n+\n+\t  gimple_call_set_lhs (call, bswap_tmp);\n \n \t  if (dump_file)\n \t    {"}]}