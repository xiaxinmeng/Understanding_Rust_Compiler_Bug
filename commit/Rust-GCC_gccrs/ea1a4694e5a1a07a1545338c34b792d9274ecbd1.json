{"sha": "ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "node_id": "C_kwDOANBUbNoAKGVhMWE0Njk0ZTVhMWEwN2ExNTQ1MzM4YzM0Yjc5MmQ5Mjc0ZWNiZDE", "commit": {"author": {"name": "marxin", "email": "mliska@suse.cz", "date": "2022-07-25T08:52:56Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-07-28T10:37:03Z"}, "message": "jit,docs: use enum directive for enumeral types\n\ngcc/jit/ChangeLog:\n\n\t* docs/conf.py: Add needs_sphinx = '3.0' where c:type was added.\n\t* docs/index.rst: Remove note about it.\n\t* docs/topics/compilation.rst: Use enum directive and reference.\n\t* docs/topics/contexts.rst: Likewise.\n\t* docs/topics/expressions.rst: Likewise.\n\t* docs/topics/functions.rst: Likewise.", "tree": {"sha": "a633d25ceb0f3119ef43058e08337bddd22c4b65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a633d25ceb0f3119ef43058e08337bddd22c4b65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2c5f4c2d13346e2181ebe65d2fa84f2184de07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2c5f4c2d13346e2181ebe65d2fa84f2184de07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2c5f4c2d13346e2181ebe65d2fa84f2184de07"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "062232ae280aa7a810b11360650e548d9ef4ed0b", "filename": "gcc/jit/docs/conf.py", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Fconf.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Fconf.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fconf.py?ref=ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "patch": "@@ -39,6 +39,9 @@\n # The master toctree document.\n master_doc = 'index'\n \n+# c:type directive is supported since 3.0\n+needs_sphinx = '3.0'\n+\n # General information about the project.\n project = u'libgccjit'\n copyright = u'2014-2022 Free Software Foundation, Inc.'"}, {"sha": "21c3140e2389dbfaee9ee3e79234af88197d7c49", "filename": "gcc/jit/docs/index.rst", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Findex.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Findex.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Findex.rst?ref=ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "patch": "@@ -45,10 +45,3 @@ Indices and tables\n * :ref:`genindex`\n * :ref:`modindex`\n * :ref:`search`\n-\n-.. Some notes:\n-\n-   The Sphinx C domain appears to lack explicit support for enum values,\n-   so I've been using :c:macro: for them.\n-\n-   See https://sphinx-doc.org/domains.html#the-c-domain"}, {"sha": "c5fa6eb0faf7ba9daeca2a33009f1524f08761ef", "filename": "gcc/jit/docs/topics/compilation.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst?ref=ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "patch": "@@ -158,14 +158,14 @@ For linking in object files, use :c:func:`gcc_jit_context_add_driver_option`.\n \n :c:func:`gcc_jit_context_compile_to_file` ignores the suffix of\n ``output_path``, and insteads uses the given\n-:c:type:`enum gcc_jit_output_kind` to decide what to do.\n+:c:enum:`gcc_jit_output_kind` to decide what to do.\n \n .. note::\n \n    This is different from the ``gcc`` program, which does make use of the\n    suffix of the output file when determining what to do.\n \n-.. type:: enum gcc_jit_output_kind\n+.. enum:: gcc_jit_output_kind\n \n The available kinds of output are:\n "}, {"sha": "205b5f3dcf54b672b7c415db1350ddfc2acf0345", "filename": "gcc/jit/docs/topics/contexts.rst", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst?ref=ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "patch": "@@ -311,7 +311,7 @@ String Options\n \n    Set a string option of the context.\n \n-   .. type:: enum gcc_jit_str_option\n+   .. enum:: gcc_jit_str_option\n \n    The parameter ``value`` can be NULL.   If non-NULL, the call takes a\n    copy of the underlying string, so it is valid to pass in a pointer to\n@@ -334,7 +334,7 @@ Boolean options\n   Set a boolean option of the context.\n   Zero is \"false\" (the default), non-zero is \"true\".\n \n-  .. type:: enum gcc_jit_bool_option\n+  .. enum:: gcc_jit_bool_option\n \n   .. macro:: GCC_JIT_BOOL_OPTION_DEBUGINFO\n \n@@ -513,7 +513,7 @@ Integer options\n \n   Set an integer option of the context.\n \n-  .. type:: enum gcc_jit_int_option\n+  .. enum:: gcc_jit_int_option\n \n   There is just one integer option specified this way:\n "}, {"sha": "49b7e14ae2b93dc83825eae25dbfc98d3cef1ab0", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "patch": "@@ -309,7 +309,7 @@ Unary Operations\n \n    The parameter ``result_type`` must be a numeric type.\n \n-.. type:: enum gcc_jit_unary_op\n+.. enum:: gcc_jit_unary_op\n \n The available unary operations are:\n \n@@ -376,7 +376,7 @@ Binary Operations\n \n    The parameter ``result_type`` must be a numeric type.\n \n-.. type:: enum gcc_jit_binary_op\n+.. enum:: gcc_jit_binary_op\n \n The available binary operations are:\n \n@@ -534,7 +534,7 @@ Comparisons\n \n    Build a boolean rvalue out of the comparison of two other rvalues.\n \n-.. type:: enum gcc_jit_comparison\n+.. enum:: gcc_jit_comparison\n \n =======================================  ============\n Comparison                               C equivalent\n@@ -711,7 +711,7 @@ where the rvalue is computed by reading from the storage area.\n \n    The \"model\" parameter determines the thread-local storage model of the \"lvalue\":\n \n-   .. type:: enum gcc_jit_tls_model\n+   .. enum:: gcc_jit_tls_model\n \n    .. c:macro:: GCC_JIT_TLS_MODEL_NONE\n \n@@ -841,7 +841,7 @@ Global variables\n    The \"kind\" parameter determines the visibility of the \"global\" outside\n    of the :c:type:`gcc_jit_result`:\n \n-   .. type:: enum gcc_jit_global_kind\n+   .. enum:: gcc_jit_global_kind\n \n    .. c:macro:: GCC_JIT_GLOBAL_EXPORTED\n "}, {"sha": "d6d4fe90834d08806e8762446e5623d748a1a15e", "filename": "gcc/jit/docs/topics/functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea1a4694e5a1a07a1545338c34b792d9274ecbd1/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Ffunctions.rst?ref=ea1a4694e5a1a07a1545338c34b792d9274ecbd1", "patch": "@@ -80,7 +80,7 @@ Functions\n \n    Create a gcc_jit_function with the given name and parameters.\n \n-   .. type:: enum gcc_jit_function_kind\n+   .. enum:: gcc_jit_function_kind\n \n    This enum controls the kind of function created, and has the following\n    values:"}]}