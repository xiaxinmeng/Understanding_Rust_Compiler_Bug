{"sha": "de081cfd3b88d197c6c3e545c6d55581140c7c21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwODFjZmQzYjg4ZDE5N2M2YzNlNTQ1YzZkNTU1ODExNDBjN2MyMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-01-28T12:14:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-01-28T12:14:09Z"}, "message": "re PR tree-optimization/38926 (ice in find_or_generate_expression, at tree-ssa-pre.c:2769)\n\n2009-01-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/38926\n\t* tree-ssa-pre.c (add_to_value): Assert we add only expressions\n\twith the correct value id to a value.\n\t(do_regular_insertion): Use the value number of edoubleprime\n\tfor the value number of the expr.\n\n\tRevert\n\t2008-08-21  Richard Guenther  <rguenther@suse.de>\n  \n        * tree-ssa-pre.c (insert_into_preds_of_block): Before inserting\n        a PHI ask VN if it is already available.\n        * tree-ssa-sccvn.h (vn_phi_lookup): Declare.\n        * tree-ssa-sccvn.c (vn_phi_lookup): Export.\n\n\t* gcc.c-torture/compile/pr38926.c: New testcase.\n\nFrom-SVN: r143725", "tree": {"sha": "e22ed45816e3ff1acc6a5f7a1c09d36975f8d64f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e22ed45816e3ff1acc6a5f7a1c09d36975f8d64f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de081cfd3b88d197c6c3e545c6d55581140c7c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de081cfd3b88d197c6c3e545c6d55581140c7c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de081cfd3b88d197c6c3e545c6d55581140c7c21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de081cfd3b88d197c6c3e545c6d55581140c7c21/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9d386a14ff953d7d3a6365cfe49dae318a1f7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1"}], "stats": {"total": 92, "additions": 73, "deletions": 19}, "files": [{"sha": "526398f92c83233090d394e6212bfab9b2b89f03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de081cfd3b88d197c6c3e545c6d55581140c7c21", "patch": "@@ -1,3 +1,19 @@\n+2009-01-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38926\n+\t* tree-ssa-pre.c (add_to_value): Assert we add only expressions\n+\twith the correct value id to a value.\n+\t(do_regular_insertion): Use the value number of edoubleprime\n+\tfor the value number of the expr.\n+\n+\tRevert\n+\t2008-08-21  Richard Guenther  <rguenther@suse.de>\n+  \n+        * tree-ssa-pre.c (insert_into_preds_of_block): Before inserting\n+        a PHI ask VN if it is already available.\n+        * tree-ssa-sccvn.h (vn_phi_lookup): Declare.\n+        * tree-ssa-sccvn.c (vn_phi_lookup): Export.\n+\n 2009-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/38934"}, {"sha": "d3b7034f21af728f0c9ed7ac457e376c09f66377", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de081cfd3b88d197c6c3e545c6d55581140c7c21", "patch": "@@ -1,3 +1,8 @@\n+2009-01-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38926\n+\t* gcc.c-torture/compile/pr38926.c: New testcase.\n+\n 2009-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/38934"}, {"sha": "9c71a798cde313fee14b3b8d7acfd4bf27e60349", "filename": "gcc/testsuite/gcc.c-torture/compile/pr38926.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr38926.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr38926.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr38926.c?ref=de081cfd3b88d197c6c3e545c6d55581140c7c21", "patch": "@@ -0,0 +1,41 @@\n+static inline int foo (unsigned _si1)\n+{\n+  if (_si1 != 0)\n+    if (_si1 > 2147483647)\n+      return 1;\n+  return 0;\n+}\n+\n+static inline unsigned bar (unsigned _left, int _right)\n+{\n+  return (unsigned) _right >= 8 ? 1 : _left >> _right;\n+}\n+\n+unsigned g_2;\n+unsigned g_67;\n+volatile unsigned g_162;\n+\n+static inline int func_62 (unsigned p_63)\n+{\n+  p_63 = g_2 & g_67;\n+  if (g_2)\n+    ;\n+  else if (p_63)\n+    return 1;\n+  g_67 = bar (p_63, g_2);\n+  return 0;\n+}\n+\n+unsigned baz (void)\n+{\n+  if (g_2)\n+    for (; g_2 <= -16; g_2 = foo (g_2))\n+      {\n+        for (; g_162; g_162)\n+          func_62 (func_62 (0));\n+        if (g_67)\n+          break;\n+      }\n+  return g_2;\n+}\n+"}, {"sha": "a3f91f07d58a8f14dc48fc1840434d4ab301f889", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=de081cfd3b88d197c6c3e545c6d55581140c7c21", "patch": "@@ -434,6 +434,7 @@ static tree create_expression_by_pieces (basic_block, pre_expr, gimple_seq *,\n \t\t\t\t\t gimple, tree);\n static tree find_or_generate_expression (basic_block, pre_expr, gimple_seq *,\n \t\t\t\t\t gimple);\n+static unsigned int get_expr_value_id (pre_expr);\n \n /* We can add and remove elements and entries to and from sets\n    and hash tables, so we use alloc pools for them.  */\n@@ -559,6 +560,8 @@ add_to_value (unsigned int v, pre_expr e)\n {\n   bitmap_set_t set;\n \n+  gcc_assert (get_expr_value_id (e) == v);\n+\n   if (v >= VEC_length (bitmap_set_t, value_expressions))\n     {\n       VEC_safe_grow_cleared (bitmap_set_t, heap, value_expressions,\n@@ -2975,7 +2978,7 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n   pre_expr eprime;\n   edge_iterator ei;\n   tree type = get_expr_type (expr);\n-  tree temp, res;\n+  tree temp;\n   gimple phi;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -3131,8 +3134,12 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n   if (TREE_CODE (type) == COMPLEX_TYPE\n       || TREE_CODE (type) == VECTOR_TYPE)\n     DECL_GIMPLE_REG_P (temp) = 1;\n-\n   phi = create_phi_node (temp, block);\n+\n+  gimple_set_plf (phi, NECESSARY, false);\n+  VN_INFO_GET (gimple_phi_result (phi))->valnum = gimple_phi_result (phi);\n+  VN_INFO (gimple_phi_result (phi))->value_id = val;\n+  VEC_safe_push (gimple, heap, inserted_exprs, phi);\n   FOR_EACH_EDGE (pred, ei, block->preds)\n     {\n       pre_expr ae = avail[pred->src->index];\n@@ -3143,20 +3150,6 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n       else\n \tadd_phi_arg (phi, PRE_EXPR_NAME (avail[pred->src->index]), pred);\n     }\n-  /* If the PHI node is already available, use it.  */\n-  if ((res = vn_phi_lookup (phi)) != NULL_TREE)\n-    {\n-      gimple_stmt_iterator gsi = gsi_for_stmt (phi);\n-      remove_phi_node (&gsi, true);\n-      release_defs (phi);\n-      add_to_value (val, get_or_alloc_expr_for_name (res));\n-      return false;\n-    }\n-\n-  gimple_set_plf (phi, NECESSARY, false);\n-  VN_INFO_GET (gimple_phi_result (phi))->valnum = gimple_phi_result (phi);\n-  VN_INFO (gimple_phi_result (phi))->value_id = val;\n-  VEC_safe_push (gimple, heap, inserted_exprs, phi);\n \n   newphi = get_or_alloc_expr_for_name (gimple_phi_result (phi));\n   add_to_value (val, newphi);\n@@ -3330,7 +3323,7 @@ do_regular_insertion (basic_block block, basic_block dom)\n \t\t\t  pre_stats.constified++;\n \t\t\t}\n \t\t      else\n-\t\t\tinfo->valnum = PRE_EXPR_NAME (edoubleprime);\n+\t\t\tinfo->valnum = VN_INFO (PRE_EXPR_NAME (edoubleprime))->valnum;\n \t\t      info->value_id = new_val;\n \t\t    }\n \t\t}"}, {"sha": "87ddcb6872c26be03cb4f13dfee6437f9256004c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=de081cfd3b88d197c6c3e545c6d55581140c7c21", "patch": "@@ -1481,7 +1481,7 @@ static VEC(tree, heap) *shared_lookup_phiargs;\n    value number if it exists in the hash table.  Return NULL_TREE if\n    it does not exist in the hash table. */\n \n-tree\n+static tree\n vn_phi_lookup (gimple phi)\n {\n   void **slot;"}, {"sha": "df0f3dfe6e710d0c35463fc3ea36b8bd72f1b0aa", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de081cfd3b88d197c6c3e545c6d55581140c7c21/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=de081cfd3b88d197c6c3e545c6d55581140c7c21", "patch": "@@ -184,7 +184,6 @@ vn_reference_t vn_reference_insert (tree, tree, VEC (tree, gc) *);\n vn_reference_t vn_reference_insert_pieces (VEC (tree, gc) *,\n \t\t\t\t\t   VEC (vn_reference_op_s, heap) *,\n \t\t\t\t\t   tree, unsigned int);\n-tree vn_phi_lookup (gimple);\n \n hashval_t vn_nary_op_compute_hash (const vn_nary_op_t);\n int vn_nary_op_eq (const void *, const void *);"}]}