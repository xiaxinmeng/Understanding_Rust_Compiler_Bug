{"sha": "fbdfe39cf2e796a57d0370bc1d841ff439948d48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJkZmUzOWNmMmU3OTZhNTdkMDM3MGJjMWQ4NDFmZjQzOTk0OGQ0OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-01-12T00:24:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-01-12T00:24:25Z"}, "message": "function.c (purge_addressof_1): If the note accesses a mem+addressof in a wider mode than any replacement...\n\n        * function.c (purge_addressof_1): If the note accesses a mem+addressof\n        in a wider mode than any replacement, adjust the cached replacement.\n        Cache trivial substitutions as well.\n\nFrom-SVN: r24629", "tree": {"sha": "684fcad77ee721ed4f11fd55f48d8e58e435ac59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/684fcad77ee721ed4f11fd55f48d8e58e435ac59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbdfe39cf2e796a57d0370bc1d841ff439948d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdfe39cf2e796a57d0370bc1d841ff439948d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdfe39cf2e796a57d0370bc1d841ff439948d48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdfe39cf2e796a57d0370bc1d841ff439948d48/comments", "author": null, "committer": null, "parents": [{"sha": "5f6c11d6e5d0ad0306c806e61d17e4b92f681c05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6c11d6e5d0ad0306c806e61d17e4b92f681c05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f6c11d6e5d0ad0306c806e61d17e4b92f681c05"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "9eb38ff4081c95fa76242e43b55ba7b83dee6f17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdfe39cf2e796a57d0370bc1d841ff439948d48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdfe39cf2e796a57d0370bc1d841ff439948d48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbdfe39cf2e796a57d0370bc1d841ff439948d48", "patch": "@@ -1,3 +1,9 @@\n+Tue Jan 12 00:23:31 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* function.c (purge_addressof_1): If the note accesses a mem+addressof\n+\tin a wider mode than any replacement, adjust the cached replacement.\n+\tCache trivial substitutions as well.\n+\n Tue Jan 12 00:06:00 1999  Richard Henderson  <rth@cygnus.com>\n \n         * Makefile.in (OBJECTS): Add sbitmap.o."}, {"sha": "87a923b18fa7c923eb05940d2a5dbd2b2fd9294f", "filename": "gcc/function.c", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdfe39cf2e796a57d0370bc1d841ff439948d48/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdfe39cf2e796a57d0370bc1d841ff439948d48/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fbdfe39cf2e796a57d0370bc1d841ff439948d48", "patch": "@@ -2899,11 +2899,36 @@ purge_addressof_1 (loc, insn, force, store)\n \n \t      for (tem = purge_addressof_replacements; tem != NULL_RTX;\n \t\t   tem = XEXP (XEXP (tem, 1), 1))\n-\t\tif (rtx_equal_p (x, XEXP (tem, 0)))\n-\t\t  {\n-\t\t    *loc = XEXP (XEXP (tem, 1), 0);\n-\t\t    return;\n-\t\t  }\n+\t\t{\n+\t\t  rtx y = XEXP (tem, 0);\n+\t\t  if (GET_CODE (y) == MEM\n+\t\t      && rtx_equal_p (XEXP (x, 0), XEXP (y, 0)))\n+\t\t    {\n+\t\t      /* It can happen that the note may speak of things in\n+\t\t\t a wider (or just different) mode than the code did. \n+\t\t\t This is especially true of REG_RETVAL.  */\n+\n+\t\t      rtx z = XEXP (XEXP (tem, 1), 0);\n+\t\t      if (GET_MODE (x) != GET_MODE (y))\n+\t\t\t{\n+\t\t\t  if (GET_CODE (z) == SUBREG && SUBREG_WORD (z) == 0)\n+\t\t\t    z = SUBREG_REG (z);\n+\n+\t\t\t  /* ??? If we'd gotten into any of the really complex\n+\t\t\t     cases below, I'm not sure we can do a proper\n+\t\t\t     replacement.  Might we be able to delete the\n+\t\t\t     note in some cases?  */\n+\t\t\t  if (GET_MODE_SIZE (GET_MODE (x))\n+\t\t\t      < GET_MODE_SIZE (GET_MODE (y)))\n+\t\t\t    abort ();\n+\n+\t\t\t  z = gen_lowpart (GET_MODE (x), z);\n+\t\t\t}\n+\n+\t\t      *loc = z;\n+\t\t      return;\n+\t\t    }\n+\t\t}\n \n \t      /* There should always be such a replacement.  */\n \t      abort ();\n@@ -2991,7 +3016,15 @@ purge_addressof_1 (loc, insn, force, store)\n \t    }\n \t}\n       else if (validate_change (insn, loc, sub, 0))\n-\tgoto restart;\n+\t{\n+\t  /* Remember the replacement so that the same one can be done\n+\t     on the REG_NOTES.  */\n+\t  purge_addressof_replacements\n+\t    = gen_rtx_EXPR_LIST (VOIDmode, x,\n+\t\t\t\t gen_rtx_EXPR_LIST (VOIDmode, sub,\n+\t\t\t\t\t\t    purge_addressof_replacements));\n+\t  goto restart;\n+\t}\n     give_up:;\n       /* else give up and put it into the stack */\n     }"}]}