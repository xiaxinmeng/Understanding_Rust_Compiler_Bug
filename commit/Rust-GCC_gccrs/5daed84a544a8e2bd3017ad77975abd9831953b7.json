{"sha": "5daed84a544a8e2bd3017ad77975abd9831953b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRhZWQ4NGE1NDRhOGUyYmQzMDE3YWQ3Nzk3NWFiZDk4MzE5NTNiNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-26T09:34:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-26T09:34:40Z"}, "message": "inline.adb (Back_End_Cannot_Inline): Lift restriction on calls to subprograms without a previous spec declared in...\n\n\t* inline.adb (Back_End_Cannot_Inline): Lift restriction on calls to\n\tsubprograms without a previous spec declared in the same unit.\n\t* gcc-interface/trans.c (Compilation_Unit_to_gnu): Process inlined\n\tsubprograms at the end of the unit instead of at the beginning.\n\t* gcc-interface/utils.c (create_subprog_decl): Check that the entity\n\tisn't public for the special handling of non-inline functions nested\n\tinside inline external functions.\n\nFrom-SVN: r171551", "tree": {"sha": "26ba2a9b9f6a154eeaec3ba42d01da1e79061f7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26ba2a9b9f6a154eeaec3ba42d01da1e79061f7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5daed84a544a8e2bd3017ad77975abd9831953b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5daed84a544a8e2bd3017ad77975abd9831953b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5daed84a544a8e2bd3017ad77975abd9831953b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5daed84a544a8e2bd3017ad77975abd9831953b7/comments", "author": null, "committer": null, "parents": [{"sha": "530f4f437a8d592e8203a40a860f246c7e1cdfca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530f4f437a8d592e8203a40a860f246c7e1cdfca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530f4f437a8d592e8203a40a860f246c7e1cdfca"}], "stats": {"total": 132, "additions": 63, "deletions": 69}, "files": [{"sha": "a1131ce465acaa17bd9835c2902140108c8a641f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5daed84a544a8e2bd3017ad77975abd9831953b7", "patch": "@@ -1,6 +1,16 @@\n+2011-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Back_End_Cannot_Inline): Lift restriction on calls to\n+\tsubprograms without a previous spec declared in the same unit.\n+\t* gcc-interface/trans.c (Compilation_Unit_to_gnu): Process inlined\n+\tsubprograms at the end of the unit instead of at the beginning.\n+\t* gcc-interface/utils.c (create_subprog_decl): Check that the entity\n+\tisn't public for the special handling of non-inline functions nested\n+\tinside inline external functions.\n+\n 2011-03-25  Jeff Law  <law@redhat.com>\n \n-\t* ada/gcc-interface/utils.c (def_fn_type): Add missing va_end.\n+\t* gcc-interface/utils.c (def_fn_type): Add missing va_end.\n \n 2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "f6d83af5761991997df9d8061a2f7c8862017de0", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=5daed84a544a8e2bd3017ad77975abd9831953b7", "patch": "@@ -3793,6 +3793,20 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n       finalize_from_with_types ();\n     }\n \n+  if (type_annotate_only && gnat_node == Cunit (Main_Unit))\n+    {\n+      elaborate_all_entities (gnat_node);\n+\n+      if (Nkind (Unit (gnat_node)) == N_Subprogram_Declaration\n+\t  || Nkind (Unit (gnat_node)) == N_Generic_Package_Declaration\n+\t  || Nkind (Unit (gnat_node)) == N_Generic_Subprogram_Declaration)\n+\treturn;\n+    }\n+\n+  process_decls (Declarations (Aux_Decls_Node (gnat_node)), Empty, Empty,\n+\t\t true, true);\n+  add_stmt (gnat_to_gnu (Unit (gnat_node)));\n+\n   /* If we can inline, generate code for all the inlined subprograms.  */\n   if (optimize)\n     {\n@@ -3822,20 +3836,6 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n \t}\n     }\n \n-  if (type_annotate_only && gnat_node == Cunit (Main_Unit))\n-    {\n-      elaborate_all_entities (gnat_node);\n-\n-      if (Nkind (Unit (gnat_node)) == N_Subprogram_Declaration\n-\t  || Nkind (Unit (gnat_node)) == N_Generic_Package_Declaration\n-\t  || Nkind (Unit (gnat_node)) == N_Generic_Subprogram_Declaration)\n-\treturn;\n-    }\n-\n-  process_decls (Declarations (Aux_Decls_Node (gnat_node)), Empty, Empty,\n-\t\t true, true);\n-  add_stmt (gnat_to_gnu (Unit (gnat_node)));\n-\n   /* Process any pragmas and actions following the unit.  */\n   add_stmt_list (Pragmas_After (Aux_Decls_Node (gnat_node)));\n   add_stmt_list (Actions (Aux_Decls_Node (gnat_node)));"}, {"sha": "2cfd1ce49970bd154e54b57b3094df9459c536fe", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=5daed84a544a8e2bd3017ad77975abd9831953b7", "patch": "@@ -1790,6 +1790,7 @@ create_subprog_decl (tree subprog_name, tree asm_name,\n      We could inline the nested function as well but it's probably better\n      to err on the side of too little inlining.  */\n   if (!inline_flag\n+      && !public_flag\n       && current_function_decl\n       && DECL_DECLARED_INLINE_P (current_function_decl)\n       && DECL_EXTERNAL (current_function_decl))"}, {"sha": "ddb4715ce13ebb750e75ddb4686e77c2bf25cda2", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 54, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=5daed84a544a8e2bd3017ad77975abd9831953b7", "patch": "@@ -368,12 +368,6 @@ package body Inline is\n       --    inlined under ZCX because the numeric suffix generated by gigi\n       --    will be different in the body and the place of the inlined call.\n       --\n-      --  If the body to be inlined contains calls to subprograms declared\n-      --  in the same body that have no previous spec, the back-end cannot\n-      --  inline either because the bodies to be inlined are processed before\n-      --  the rest of the enclosing package body, and gigi will then find\n-      --  references to entities that have not been elaborated yet.\n-      --\n       --  This procedure must be carefully coordinated with the back end.\n \n       ----------------------------\n@@ -384,41 +378,6 @@ package body Inline is\n          Decl     : constant Node_Id := Unit_Declaration_Node (Subp);\n          Body_Ent : Entity_Id;\n          Ent      : Entity_Id;\n-         Bad_Call : Node_Id;\n-\n-         function Process (N : Node_Id) return Traverse_Result;\n-         --  Look for calls to subprograms with no previous spec, declared\n-         --  in the same enclosing package body.\n-\n-         -------------\n-         -- Process --\n-         -------------\n-\n-         function Process (N : Node_Id) return Traverse_Result is\n-         begin\n-            if Nkind (N) = N_Procedure_Call_Statement\n-              or else Nkind (N) = N_Function_Call\n-            then\n-               if Is_Entity_Name (Name (N))\n-                 and then Comes_From_Source (Entity (Name (N)))\n-                 and then\n-                    Nkind (Unit_Declaration_Node (Entity (Name (N))))\n-                      = N_Subprogram_Body\n-                 and then In_Same_Extended_Unit (Subp, Entity (Name (N)))\n-               then\n-                  Bad_Call := N;\n-                  return Abandon;\n-               else\n-                  return OK;\n-               end if;\n-            else\n-               return OK;\n-            end if;\n-         end Process;\n-\n-         function Has_Exposed_Call is new Traverse_Func (Process);\n-\n-      --  Start of processing for Back_End_Cannot_Inline\n \n       begin\n          if Nkind (Decl) = N_Subprogram_Declaration\n@@ -454,19 +413,7 @@ package body Inline is\n             Next_Entity (Ent);\n          end loop;\n \n-         if Has_Exposed_Call\n-              (Unit_Declaration_Node (Corresponding_Body (Decl))) = Abandon\n-         then\n-            if Ineffective_Inline_Warnings then\n-               Error_Msg_N\n-                 (\"?call to subprogram with no separate spec\"\n-                  & \" prevents inlining!!\", Bad_Call);\n-            end if;\n-\n-            return True;\n-         else\n-            return False;\n-         end if;\n+         return False;\n       end Back_End_Cannot_Inline;\n \n    --  Start of processing for Add_Inlined_Subprogram"}, {"sha": "6b2fede5e94917c435d1db726d7bfab7d4c14e0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5daed84a544a8e2bd3017ad77975abd9831953b7", "patch": "@@ -1,3 +1,8 @@\n+2011-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt15.adb: New test.\n+\t* gnat.dg/opt15_pkg.ad[sb]: New helper.\n+\n 2011-03-25  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48174"}, {"sha": "eadc25d7023a8be936ab3cc0bf01730f1dd6e27d", "filename": "gcc/testsuite/gnat.dg/opt15.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Ftestsuite%2Fgnat.dg%2Fopt15.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Ftestsuite%2Fgnat.dg%2Fopt15.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt15.adb?ref=5daed84a544a8e2bd3017ad77975abd9831953b7", "patch": "@@ -0,0 +1,12 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatn -fdump-tree-optimized\" }\n+\n+with Opt15_Pkg; use Opt15_Pkg;\n+\n+procedure Opt15 is\n+begin\n+  Trace_Inlined;\n+end;\n+\n+-- { dg-final { scan-tree-dump-not \"trace_inlined\" \"optimized\" } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "ebb1d263e81ae39ae6dc11ec72e34042719087ea", "filename": "gcc/testsuite/gnat.dg/opt15_pkg.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Ftestsuite%2Fgnat.dg%2Fopt15_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Ftestsuite%2Fgnat.dg%2Fopt15_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt15_pkg.adb?ref=5daed84a544a8e2bd3017ad77975abd9831953b7", "patch": "@@ -0,0 +1,13 @@\n+package body Opt15_Pkg is\n+\n+  procedure Trace_Non_Inlined is\n+  begin\n+    raise Program_Error;\n+  end;\n+\n+  procedure Trace_Inlined is\n+  begin\n+    Trace_Non_Inlined;\n+  end;\n+\n+end Opt15_Pkg;"}, {"sha": "f1d0302033de20ec2f571b61ed3c4432099b337a", "filename": "gcc/testsuite/gnat.dg/opt15_pkg.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Ftestsuite%2Fgnat.dg%2Fopt15_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5daed84a544a8e2bd3017ad77975abd9831953b7/gcc%2Ftestsuite%2Fgnat.dg%2Fopt15_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt15_pkg.ads?ref=5daed84a544a8e2bd3017ad77975abd9831953b7", "patch": "@@ -0,0 +1,6 @@\n+package Opt15_Pkg is\n+\n+  procedure Trace_Inlined;\n+  pragma Inline (Trace_Inlined);\n+\n+end Opt15_Pkg;"}]}