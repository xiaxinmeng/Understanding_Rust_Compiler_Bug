{"sha": "0b1214ef13b33d75963d99c88e166d6f7cd73e36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxMjE0ZWYxM2IzM2Q3NTk2M2Q5OWM4OGUxNjZkNmY3Y2Q3M2UzNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-27T20:48:17Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-27T20:48:17Z"}, "message": "* class.c, decl.c, expr.c: Fix comment typos.\n\nFrom-SVN: r91392", "tree": {"sha": "00982aa2e87de6ad9c146269be0ed2177614ef58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00982aa2e87de6ad9c146269be0ed2177614ef58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b1214ef13b33d75963d99c88e166d6f7cd73e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1214ef13b33d75963d99c88e166d6f7cd73e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1214ef13b33d75963d99c88e166d6f7cd73e36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1214ef13b33d75963d99c88e166d6f7cd73e36/comments", "author": null, "committer": null, "parents": [{"sha": "270af55dd492407a9b18ab75458b2f9ecac98cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270af55dd492407a9b18ab75458b2f9ecac98cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/270af55dd492407a9b18ab75458b2f9ecac98cb1"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "43bdf68047bf76f772e8a06feeeefac84c956a62", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1214ef13b33d75963d99c88e166d6f7cd73e36/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1214ef13b33d75963d99c88e166d6f7cd73e36/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0b1214ef13b33d75963d99c88e166d6f7cd73e36", "patch": "@@ -1,3 +1,7 @@\n+2004-11-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* class.c, decl.c, expr.c: Fix comment typos.\n+\n 2004-11-26  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR java/18305"}, {"sha": "2af0134fb89fefb0caf78523617724514e09151a", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1214ef13b33d75963d99c88e166d6f7cd73e36/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1214ef13b33d75963d99c88e166d6f7cd73e36/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=0b1214ef13b33d75963d99c88e166d6f7cd73e36", "patch": "@@ -1609,7 +1609,7 @@ make_class_data (tree type)\n \t  && ! flag_keep_inline_functions\n \t  && optimize)\n \tcontinue;\n-      /* Even if we have a decl, we don't necessaily have the code.\n+      /* Even if we have a decl, we don't necessarily have the code.\n \t This can happen if we inherit a method from a superclass for\n \t which we don't have a .class file.  */\n       if (METHOD_DUMMY (method))"}, {"sha": "5ec5d7846ae8ecf470e2051c70db09993b3cef9a", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1214ef13b33d75963d99c88e166d6f7cd73e36/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1214ef13b33d75963d99c88e166d6f7cd73e36/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=0b1214ef13b33d75963d99c88e166d6f7cd73e36", "patch": "@@ -256,7 +256,7 @@ check_local_unnamed_variable (tree best, tree decl, tree type)\n \t new VAR_DECL.  \n \n \t ???: As long as verification is correct, this will be a\n-\t compatible type.  But maybe we should create a dummy vribale\n+\t compatible type.  But maybe we should create a dummy variable\n \t and replace all references to it with the DECL and a\n \t NOP_EXPR.\n       */"}, {"sha": "9df841b058f5bc0705f1c21b818a68257531c425", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1214ef13b33d75963d99c88e166d6f7cd73e36/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1214ef13b33d75963d99c88e166d6f7cd73e36/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=0b1214ef13b33d75963d99c88e166d6f7cd73e36", "patch": "@@ -2055,7 +2055,7 @@ build_known_method_ref (tree method, tree method_type ATTRIBUTE_UNUSED,\n   if (is_compiled_class (self_type))\n     {\n       /* With indirect dispatch we have to use indirect calls for all\n-\t publically visible methods or gcc will use PLT indirections\n+\t publicly visible methods or gcc will use PLT indirections\n \t to reach them.  We also have to use indirect dispatch for all\n \t external methods.  */\n       if (! flag_indirect_dispatch "}]}