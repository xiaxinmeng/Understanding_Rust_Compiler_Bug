{"sha": "282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "node_id": "C_kwDOANBUbNoAKDI4MjQ2MmIzOTU4NGFlNDllYWFhNmY1M2JkNDRiNmNmZGM0Y2NiY2I", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-12-21T03:02:08Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-12-21T03:02:08Z"}, "message": "rs6000: Raise error for __vector_{quad,pair} uses without MMA enabled [PR106736]\n\nAs PR106736 shows, it's unexpected to use __vector_quad and\n__vector_pair types without MMA support, it would cause ICE\nwhen expanding the corresponding assignment.  We can't guard\nthese built-in types registering under MMA support as Peter\npointed out in that PR, because the registering is global,\nit doesn't work for target pragma/attribute support with MMA\nenabled.  The existing verify_type_context mentioned in [2]\ncan help to make the diagnostics invalid built-in type uses\nbetter, but as Richard pointed out in [4], it can't deal with\nall cases.  As the discussions in [1][3], this patch is to\ncheck the invalid use of built-in types __vector_quad and\n__vector_pair in mov pattern of OOmode and XOmode, on the\ncurrently being expanded gimple assignment statement.  It\nstill puts an assertion in else arm rather than just makes\nit go through, it's to ensure we can catch any other possible\nunexpected cases in time if there are.\n\n[1] https://gcc.gnu.org/pipermail/gcc/2022-December/240218.html\n[2] https://gcc.gnu.org/pipermail/gcc/2022-December/240220.html\n[3] https://gcc.gnu.org/pipermail/gcc/2022-December/240223.html\n[4] https://gcc.gnu.org/pipermail/gcc-patches/2022-December/608083.html\n\n\tPR target/106736\n\ngcc/ChangeLog:\n\n\t* config/rs6000/mma.md (define_expand movoo): Call function\n\trs6000_opaque_type_invalid_use_p to check and emit error message for\n\tthe invalid use of opaque type.\n\t(define_expand movxo): Likewise.\n\t* config/rs6000/rs6000-protos.h\n\t(rs6000_opaque_type_invalid_use_p): New function declaration.\n\t(currently_expanding_gimple_stmt): New extern declaration.\n\t* config/rs6000/rs6000.cc (rs6000_opaque_type_invalid_use_p): New\n\tfunction.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr106736-1.c: New test.\n\t* gcc.target/powerpc/pr106736-2.c: Likewise.\n\t* gcc.target/powerpc/pr106736-3.c: Likewise.\n\t* gcc.target/powerpc/pr106736-4.c: Likewise.\n\t* gcc.target/powerpc/pr106736-5.c: Likewise.", "tree": {"sha": "21893f93acb887e477cd90a9e209a0f3dc069b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21893f93acb887e477cd90a9e209a0f3dc069b6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0abcbc400e0ecb8ed1ddf61d96f8f3f88fe63b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0abcbc400e0ecb8ed1ddf61d96f8f3f88fe63b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0abcbc400e0ecb8ed1ddf61d96f8f3f88fe63b"}], "stats": {"total": 143, "additions": 140, "deletions": 3}, "files": [{"sha": "f2952a3c3be8dea57b7868661353ef8e9d6dc13f", "filename": "gcc/config/rs6000/mma.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Fconfig%2Frs6000%2Fmma.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Fconfig%2Frs6000%2Fmma.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmma.md?ref=282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "patch": "@@ -285,8 +285,11 @@\n \t expanding to RTL and have seen errors.  It would not cause further ICEs\n \t as the compilation would stop soon after expanding.  */\n     }\n+  else if (rs6000_opaque_type_invalid_use_p (currently_expanding_gimple_stmt))\n+    ;\n   else\n-    gcc_unreachable ();\n+    /* Catch unexpected cases.  */\n+    gcc_assert (false);\n })\n \n (define_insn_and_split \"*movoo\"\n@@ -329,8 +332,11 @@\n \t some missing required conditions.  So do the same handlings for XOmode\n \t as OOmode here.  */\n     }\n+  else if (rs6000_opaque_type_invalid_use_p (currently_expanding_gimple_stmt))\n+    ;\n   else\n-    gcc_unreachable ();\n+    /* Catch unexpected cases.  */\n+    gcc_assert (false);\n })\n \n (define_insn_and_split \"*movxo\""}, {"sha": "911e251cb9be2268083c34259ddb3f7db0a9d786", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "patch": "@@ -347,4 +347,6 @@ extern rtx rs6000_gen_lvx (enum machine_mode, rtx, rtx);\n extern rtx rs6000_gen_stvx (enum machine_mode, rtx, rtx);\n \n extern void rs6000_emit_xxspltidp_v2df (rtx, long value);\n+extern gimple *currently_expanding_gimple_stmt;\n+extern bool rs6000_opaque_type_invalid_use_p (gimple *);\n #endif  /* rs6000-protos.h */"}, {"sha": "d362668ba13c47650f78e44266ae43ea7b0292ee", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "patch": "@@ -28899,7 +28899,44 @@ constant_generates_xxspltidp (vec_const_128bit_type *vsx_const)\n   return sf_value;\n }\n \n-\f\n+/* Now we have only two opaque types, they are __vector_quad and\n+   __vector_pair built-in types.  They are target specific and\n+   only available when MMA is supported.  With MMA supported, it\n+   simply returns true, otherwise it checks if the given gimple\n+   STMT is an assignment stmt and uses either of these two opaque\n+   types unexpectedly, if yes, it would raise an error message\n+   and returns true, otherwise it returns false.  */\n+\n+bool\n+rs6000_opaque_type_invalid_use_p (gimple *stmt)\n+{\n+  if (TARGET_MMA)\n+    return false;\n+\n+  if (stmt)\n+    {\n+      /* The usage of MMA opaque types is very limited for now,\n+\t to check with gassign is enough so far.  */\n+      if (gassign *ga = dyn_cast<gassign *> (stmt))\n+\t{\n+\t  tree lhs = gimple_assign_lhs (ga);\n+\t  tree type = TREE_TYPE (lhs);\n+\t  if (type == vector_quad_type_node)\n+\t    {\n+\t      error (\"type %<__vector_quad%> requires the %qs option\", \"-mmma\");\n+\t      return true;\n+\t    }\n+\t  else if (type == vector_pair_type_node)\n+\t    {\n+\t      error (\"type %<__vector_pair%> requires the %qs option\", \"-mmma\");\n+\t      return true;\n+\t    }\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-rs6000.h\""}, {"sha": "65bd79d3dce85ca549ca605ec1fab44632db0f74", "filename": "gcc/testsuite/gcc.target/powerpc/pr106736-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-1.c?ref=282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-require-effective-target powerpc_p9modulo_ok } */\n+/* If the default cpu type is power10 or later, type __vector_quad is\n+   supported.  To keep the test point available all the time, this case\n+   specifies -mdejagnu-cpu=power9 here.  */\n+/* { dg-options \"-mdejagnu-cpu=power9\" } */\n+\n+/* Verify there is no ICE and don't check the error messages on unsupported\n+   type since they could be fragile and are not test points of this case.  */\n+\n+/* { dg-excess-errors \"pr106736-1\" } */\n+\n+extern void bar (__vector_quad *);\n+\n+void\n+foo (__vector_quad *a, __vector_quad *b)\n+{\n+  __vector_quad arr[2] = {*a, *b};\n+  bar (&arr[0]);\n+}\n+"}, {"sha": "12ad936fccccb5d947751d6cd73f81a029dd71bd", "filename": "gcc/testsuite/gcc.target/powerpc/pr106736-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-2.c?ref=282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target powerpc_p9modulo_ok } */\n+/* If the default cpu type is power10 or later, type __vector_pair is\n+   supported.  To keep the test point available all the time, this case\n+   specifies -mdejagnu-cpu=power9 here.  */\n+/* { dg-options \"-mdejagnu-cpu=power9\" } */\n+\n+/* Verify there is no ICE and don't check the error messages on unsupported\n+   type since they could be fragile and are not test points of this case.  */\n+\n+/* { dg-excess-errors \"pr106736-2\" } */\n+\n+void\n+foo (__vector_pair *a, __vector_pair *b)\n+{\n+  *a = *b;\n+}\n+"}, {"sha": "4fb368b8fb53e3a67726475a97067537ec3f7ca0", "filename": "gcc/testsuite/gcc.target/powerpc/pr106736-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-3.c?ref=282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-require-effective-target powerpc_p9modulo_ok } */\n+/* If the default cpu type is power10 or later, type __vector_quad is\n+   supported.  To keep the test point available all the time, this case\n+   specifies -mdejagnu-cpu=power9 here.  */\n+/* { dg-options \"-mdejagnu-cpu=power9\" } */\n+\n+/* Verify there is no ICE and don't check the error messages on unsupported\n+   type since they could be fragile and are not test points of this case.  */\n+\n+/* { dg-excess-errors \"pr106736-3\" } */\n+\n+__vector_quad ga;\n+void\n+foo (__vector_quad *a)\n+{\n+  ga = *a;\n+}\n+"}, {"sha": "4b366416b0a07502c557bdb02ef34f97e53fbd48", "filename": "gcc/testsuite/gcc.target/powerpc/pr106736-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-4.c?ref=282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-require-effective-target powerpc_p9modulo_ok } */\n+/* If the default cpu type is power10 or later, type __vector_quad is\n+   supported.  To keep the test point available all the time, this case\n+   specifies -mdejagnu-cpu=power9 here.  */\n+/* { dg-options \"-mdejagnu-cpu=power9\" } */\n+\n+/* Verify there is no ICE and don't check the error messages on unsupported\n+   type since they could be fragile and are not test points of this case.  */\n+\n+/* { dg-excess-errors \"pr106736-4\" } */\n+\n+__vector_quad ga;\n+__vector_quad gb;\n+void\n+foo ()\n+{\n+  gb = ga;\n+}\n+"}, {"sha": "d7370b81e81919eb55d7b7c17472a80fa111ac2c", "filename": "gcc/testsuite/gcc.target/powerpc/pr106736-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106736-5.c?ref=282462b39584ae49eaaa6f53bd44b6cfdc4ccbcb", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-require-effective-target powerpc_p9modulo_ok } */\n+/* If the default cpu type is power10 or later, type __vector_pair is\n+   supported.  To keep the test point available all the time, this case\n+   specifies -mdejagnu-cpu=power9 here.  */\n+/* { dg-options \"-mdejagnu-cpu=power9\" } */\n+\n+/* Verify there is no ICE and don't check the error messages on unsupported\n+   type since they could be fragile and are not test points of this case.  */\n+\n+/* { dg-excess-errors \"pr106736-5\" } */\n+\n+__vector_pair ga;\n+void\n+foo (__vector_pair *a)\n+{\n+  *a = ga;\n+}\n+"}]}