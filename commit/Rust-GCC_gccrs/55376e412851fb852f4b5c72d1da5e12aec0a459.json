{"sha": "55376e412851fb852f4b5c72d1da5e12aec0a459", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUzNzZlNDEyODUxZmI4NTJmNGI1YzcyZDFkYTVlMTJhZWMwYTQ1OQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2002-11-04T01:31:12Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2002-11-04T01:31:12Z"}, "message": "New files.\n\nFrom-SVN: r58778", "tree": {"sha": "50932c23d528ff479cc42e794aaeb5732fb4f309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50932c23d528ff479cc42e794aaeb5732fb4f309"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55376e412851fb852f4b5c72d1da5e12aec0a459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55376e412851fb852f4b5c72d1da5e12aec0a459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55376e412851fb852f4b5c72d1da5e12aec0a459", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55376e412851fb852f4b5c72d1da5e12aec0a459/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9fe6f9f39ac5003dd6642d3d708c6818e99223e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9fe6f9f39ac5003dd6642d3d708c6818e99223e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9fe6f9f39ac5003dd6642d3d708c6818e99223e"}], "stats": {"total": 147, "additions": 147, "deletions": 0}, "files": [{"sha": "da6ba4363856ead415c00e391fb4dc107b3d36dd", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=55376e412851fb852f4b5c72d1da5e12aec0a459", "patch": "@@ -1,3 +1,10 @@\n+2002-11-04  Anthony Green  <green@redhat.com>\n+\n+\t* libjava.loader/dummy.java, libjava.loader/loader.exp,\n+\tlibjava.loader/MyLoader.java, libjava.loader/TestLeak.java,\n+\tlibjava.loader/TestLeak.out, libjava.loader/TestMultiple.java,\n+\tlibjava.loader/TestMultiple.out: New files.\n+\n 2002-11-02  Tom Tromey  <tromey@redhat.com>\n \n \t* libjava.lang/initexc.java (fail): Static initializers must be"}, {"sha": "49156fc62f4244a45fa53315eff737e5e8d1bffc", "filename": "libjava/testsuite/libjava.loader/MyLoader.java", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2FMyLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2FMyLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.loader%2FMyLoader.java?ref=55376e412851fb852f4b5c72d1da5e12aec0a459", "patch": "@@ -0,0 +1,9 @@\n+import java.net.*;\n+\n+public class MyLoader extends URLClassLoader\n+{\n+  public MyLoader (URL urls[])\n+  {\n+    super (urls);\n+  }\n+}"}, {"sha": "9d467f2fdc9ca2c52efa81ac39b22b0b2a658fb5", "filename": "libjava/testsuite/libjava.loader/TestLeak.java", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2FTestLeak.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2FTestLeak.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.loader%2FTestLeak.java?ref=55376e412851fb852f4b5c72d1da5e12aec0a459", "patch": "@@ -0,0 +1,33 @@\n+import java.net.*;\n+import java.lang.reflect.*;\n+\n+public class TestLeak\n+{\n+  class MyLoader extends URLClassLoader\n+  {\n+    public MyLoader (URL urls[])\n+    {\n+      super (urls);\n+    }\n+  }\n+\n+  public static void main (String[] args)\n+  {\n+    URLClassLoader ucl = \n+      (URLClassLoader) ClassLoader.getSystemClassLoader();\n+    URL urls[] = ucl.getURLs ();\n+    Class ifaces[] = new Class[1];\n+    ifaces[0] = java.lang.Comparable.class;\n+\n+    try {\n+      for (int i = 0; i < 100; i++)\n+\t{\n+\t  Proxy.getProxyClass (new MyLoader (urls), ifaces);\n+\t} \n+    } catch (Exception e) {\n+      e.printStackTrace ();\n+    }\n+  }\n+}\n+\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libjava/testsuite/libjava.loader/TestLeak.out", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2FTestLeak.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2FTestLeak.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.loader%2FTestLeak.out?ref=55376e412851fb852f4b5c72d1da5e12aec0a459"}, {"sha": "1a56fc4878c6ccceee458b76dad0b2d4a90fb8c9", "filename": "libjava/testsuite/libjava.loader/TestMultiple.java", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2FTestMultiple.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2FTestMultiple.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.loader%2FTestMultiple.java?ref=55376e412851fb852f4b5c72d1da5e12aec0a459", "patch": "@@ -0,0 +1,28 @@\n+import java.net.*;\n+\n+public class TestMultiple\n+{\n+  public static void main (String[] args)\n+  {\n+    URLClassLoader ucl = \n+      (URLClassLoader) ClassLoader.getSystemClassLoader();\n+    URL urls[] = ucl.getURLs ();\n+\n+    MyLoader t1 = new MyLoader (urls);\n+    MyLoader t2 = new MyLoader (urls);\n+\n+    Class c1, c2;\n+\n+    try {\n+\n+      c1 = t1.loadClass (\"dummy\");\n+      c2 = t2.loadClass (\"dummy\");\n+\n+    } \n+    catch (Exception e) {\n+\te.printStackTrace ();\n+    }\n+  }\n+}\n+\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libjava/testsuite/libjava.loader/TestMultiple.out", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2FTestMultiple.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2FTestMultiple.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.loader%2FTestMultiple.out?ref=55376e412851fb852f4b5c72d1da5e12aec0a459"}, {"sha": "67bb4a79f4884f3c9eb06d0a4be9350bc3b53ae0", "filename": "libjava/testsuite/libjava.loader/dummy.java", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2Fdummy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2Fdummy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.loader%2Fdummy.java?ref=55376e412851fb852f4b5c72d1da5e12aec0a459", "patch": "@@ -0,0 +1,6 @@\n+// A dummy class\n+\n+public class dummy\n+{\n+}\n+"}, {"sha": "6da70165102682276ba83ba97bea5e5e886132c5", "filename": "libjava/testsuite/libjava.loader/loader.exp", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2Floader.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55376e412851fb852f4b5c72d1da5e12aec0a459/libjava%2Ftestsuite%2Flibjava.loader%2Floader.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.loader%2Floader.exp?ref=55376e412851fb852f4b5c72d1da5e12aec0a459", "patch": "@@ -0,0 +1,64 @@\n+# Tests for ClassLoader and native library loader code.\n+\n+# Do all the work for a single JNI test.  Return 0 on failure.\n+proc gcj_loader_test_one {srcfile} {\n+  global objdir srcdir subdir\n+\n+  set resfile $srcdir/$subdir/[file rootname [file tail $srcfile]].out\n+\n+  regsub \"^.*/(\\[^/.\\]+)\\[.\\]\\[^/]*$\" \"$srcfile\" \"\\\\1\" out\n+  set executable \"${objdir}/$out.exe\"\n+\n+    set errname [file rootname [file tail $srcfile]]\n+    set args [libjava_arguments link]\n+    lappend args \"additional_flags=--main=[file rootname [file tail $srcfile]] $srcdir/$subdir/MyLoader.java $objdir/dummy.o\"\n+  set x [prune_warnings \\\n+\t     [libjava_tcompile $srcfile \"$executable\" \"$executable\" $args]]\n+\n+    if { $x != \"\" } {\n+\tverbose \"target_compile failed: $x\" 2\n+\n+\tfail \"$errname compilation from source\"\n+\tuntested \"$errname execution from source compiled test\"\n+\treturn\n+    }\n+    pass \"$errname compilation from source\"\n+\n+    libjava_invoke $executable $executable \"\" $executable \"\" $resfile \"\"\n+\n+  return 1\n+}\n+\n+# Run the bytecode loader tests.\n+proc gcj_loader_run {} {\n+  global srcdir subdir objdir\n+  global build_triplet host_triplet\n+  global GCJ_UNDER_TEST\n+\n+  set file \"${srcdir}/${subdir}/dummy.java\"\n+  if {! [bytecompile_file $file [pwd]]} {\n+    fail \"bytecompile $file\"\n+    # FIXME - should use `untested' on all remaining tests.\n+    # But that is hard.\n+    return 0\n+  }\n+  pass \"bytecompile $file\"\n+\n+  set x [prune_warnings \\\n+\t     [eval exec \"$GCJ_UNDER_TEST --resource $objdir/dummy.class -c $objdir/dummy.class -o $objdir/dummy.o\"]]\n+    if { $x != \"\" } {\n+\tverbose \"resource compilation failed: $x\" 2\n+\n+\tfail \"resource compilation dummy.class\"\n+\treturn 0;\n+    }\n+  pass \"resource compilation: dummy.class\"\n+\n+  catch { lsort [glob -nocomplain ${srcdir}/${subdir}/Test*.java] } srcfiles\n+\n+  foreach x $srcfiles {\n+    gcj_loader_test_one $x\n+  }\n+}\n+\n+gcj_loader_run"}]}