{"sha": "a87d3f964df31d4fbceb822c6d293e85c117d992", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg3ZDNmOTY0ZGYzMWQ0ZmJjZWI4MjJjNmQyOTNlODVjMTE3ZDk5Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-14T19:06:45Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-14T19:06:45Z"}, "message": "Check for matching CONST_VECTOR encodings [PR99929]\n\nPR99929 is one of those \u201chow did we get away with this for so long\u201d\nbugs: the equality routines weren't checking whether two variable-length\nCONST_VECTORs had the same encoding.  This meant that:\n\n   { 1, 0, 0, 0, 0, 0, ... }\n\nwould appear to be equal to:\n\n   { 1, 0, 1, 0, 1, 0, ... }\n\nsince both are represented using the elements { 1, 0 }.\n\ngcc/\n\tPR rtl-optimization/99929\n\t* rtl.h (same_vector_encodings_p): New function.\n\t* cse.c (exp_equiv_p): Check that CONST_VECTORs have the same encoding.\n\t* cselib.c (rtx_equal_for_cselib_1): Likewise.\n\t* jump.c (rtx_renumbered_equal_p): Likewise.\n\t* lra-constraints.c (operands_match_p): Likewise.\n\t* reload.c (operands_match_p): Likewise.\n\t* rtl.c (rtx_equal_p_cb, rtx_equal_p): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/pr99929_1.c: New file.\n\t* gcc.target/aarch64/sve/pr99929_2.c: Likewise.", "tree": {"sha": "5b0d160928a75af3bbf9d3e0895955f34c0e6373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b0d160928a75af3bbf9d3e0895955f34c0e6373"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a87d3f964df31d4fbceb822c6d293e85c117d992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87d3f964df31d4fbceb822c6d293e85c117d992", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a87d3f964df31d4fbceb822c6d293e85c117d992", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87d3f964df31d4fbceb822c6d293e85c117d992/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fce5932a3af575cd02c1d2b786dd1b39b922ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fce5932a3af575cd02c1d2b786dd1b39b922ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fce5932a3af575cd02c1d2b786dd1b39b922ebe"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "df191d5aa3ff7aa27f8fd8a380f1d91a66811ecd", "filename": "gcc/cse.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=a87d3f964df31d4fbceb822c6d293e85c117d992", "patch": "@@ -2637,6 +2637,11 @@ exp_equiv_p (const_rtx x, const_rtx y, int validate, bool for_gcse)\n     CASE_CONST_UNIQUE:\n       return x == y;\n \n+    case CONST_VECTOR:\n+      if (!same_vector_encodings_p (x, y))\n+\treturn false;\n+      break;\n+\n     case LABEL_REF:\n       return label_ref_label (x) == label_ref_label (y);\n "}, {"sha": "779874eeb2db81dd18abf41e049a77f16eec73af", "filename": "gcc/cselib.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=a87d3f964df31d4fbceb822c6d293e85c117d992", "patch": "@@ -1048,6 +1048,11 @@ rtx_equal_for_cselib_1 (rtx x, rtx y, machine_mode memmode, int depth)\n     case DEBUG_EXPR:\n       return 0;\n \n+    case CONST_VECTOR:\n+      if (!same_vector_encodings_p (x, y))\n+\treturn false;\n+      break;\n+\n     case DEBUG_IMPLICIT_PTR:\n       return DEBUG_IMPLICIT_PTR_DECL (x)\n \t     == DEBUG_IMPLICIT_PTR_DECL (y);"}, {"sha": "67b5c3374a6501b861dc5e6507b596c39bcd2d19", "filename": "gcc/jump.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=a87d3f964df31d4fbceb822c6d293e85c117d992", "patch": "@@ -1777,6 +1777,11 @@ rtx_renumbered_equal_p (const_rtx x, const_rtx y)\n     CASE_CONST_UNIQUE:\n       return 0;\n \n+    case CONST_VECTOR:\n+      if (!same_vector_encodings_p (x, y))\n+\treturn false;\n+      break;\n+\n     case LABEL_REF:\n       /* We can't assume nonlocal labels have their following insns yet.  */\n       if (LABEL_REF_NONLOCAL_P (x) || LABEL_REF_NONLOCAL_P (y))"}, {"sha": "5c2a2d7ce9c2121fd8ad84ed7442bb2b7e690cca", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=a87d3f964df31d4fbceb822c6d293e85c117d992", "patch": "@@ -834,6 +834,11 @@ operands_match_p (rtx x, rtx y, int y_hard_regno)\n     CASE_CONST_UNIQUE:\n       return false;\n \n+    case CONST_VECTOR:\n+      if (!same_vector_encodings_p (x, y))\n+\treturn false;\n+      break;\n+\n     case LABEL_REF:\n       return label_ref_label (x) == label_ref_label (y);\n     case SYMBOL_REF:"}, {"sha": "e18e27c2405d10a7d4f20ddb3ae4ae17dbeb362c", "filename": "gcc/reload.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=a87d3f964df31d4fbceb822c6d293e85c117d992", "patch": "@@ -2310,6 +2310,11 @@ operands_match_p (rtx x, rtx y)\n     CASE_CONST_UNIQUE:\n       return 0;\n \n+    case CONST_VECTOR:\n+      if (!same_vector_encodings_p (x, y))\n+\treturn false;\n+      break;\n+\n     case LABEL_REF:\n       return label_ref_label (x) == label_ref_label (y);\n     case SYMBOL_REF:"}, {"sha": "e4ae1683069b49966edf0b5d270f1fa64206cf1a", "filename": "gcc/rtl.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=a87d3f964df31d4fbceb822c6d293e85c117d992", "patch": "@@ -466,6 +466,11 @@ rtx_equal_p_cb (const_rtx x, const_rtx y, rtx_equal_p_callback_function cb)\n     CASE_CONST_UNIQUE:\n       return 0;\n \n+    case CONST_VECTOR:\n+      if (!same_vector_encodings_p (x, y))\n+\treturn false;\n+      break;\n+\n     case DEBUG_IMPLICIT_PTR:\n       return DEBUG_IMPLICIT_PTR_DECL (x)\n \t     == DEBUG_IMPLICIT_PTR_DECL (y);\n@@ -608,6 +613,11 @@ rtx_equal_p (const_rtx x, const_rtx y)\n     CASE_CONST_UNIQUE:\n       return 0;\n \n+    case CONST_VECTOR:\n+      if (!same_vector_encodings_p (x, y))\n+\treturn false;\n+      break;\n+\n     case DEBUG_IMPLICIT_PTR:\n       return DEBUG_IMPLICIT_PTR_DECL (x)\n \t     == DEBUG_IMPLICIT_PTR_DECL (y);"}, {"sha": "398d745aff50361cd1fc212c75d8fce76a7ba161", "filename": "gcc/rtl.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a87d3f964df31d4fbceb822c6d293e85c117d992", "patch": "@@ -3087,6 +3087,23 @@ vec_series_p (const_rtx x, rtx *base_out, rtx *step_out)\n   return const_vec_series_p (x, base_out, step_out);\n }\n \n+/* Return true if CONST_VECTORs X and Y, which are known to have the same mode,\n+   also have the same encoding.  This means that they are equal whenever their\n+   operands are equal.  */\n+\n+inline bool\n+same_vector_encodings_p (const_rtx x, const_rtx y)\n+{\n+  /* Don't be fussy about the encoding of constant-length vectors,\n+     since XVECEXP (X, 0) and XVECEXP (Y, 0) list all the elements anyway.  */\n+  if (poly_uint64 (CONST_VECTOR_NUNITS (x)).is_constant ())\n+    return true;\n+\n+  return (CONST_VECTOR_NPATTERNS (x) == CONST_VECTOR_NPATTERNS (y)\n+\t  && (CONST_VECTOR_NELTS_PER_PATTERN (x)\n+\t      == CONST_VECTOR_NELTS_PER_PATTERN (y)));\n+}\n+\n /* Return the unpromoted (outer) mode of SUBREG_PROMOTED_VAR_P subreg X.  */\n \n inline scalar_int_mode"}, {"sha": "1fe18136e28da01b078197e2d7a8b64d6c965da1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr99929_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99929_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99929_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99929_1.c?ref=a87d3f964df31d4fbceb822c6d293e85c117d992", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <arm_sve.h>\n+\n+static void e(short *g, short p2) { *g ^= p2; }\n+static short m[23];\n+int main() {\n+  for (unsigned i = 0; i < 23; ++i)\n+    m[i] = 4;\n+  if (svaddv(svptrue_pat_b32(SV_VL1), svdup_u32(1)) != 1)\n+    __builtin_abort();\n+  for (unsigned i = 0; i < 3; ++i)\n+    e(m, m[i]);\n+  return 0;\n+}"}, {"sha": "50d432db9b8f0cedbbcdfd36b1c11c954dc2fe7e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr99929_2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99929_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87d3f964df31d4fbceb822c6d293e85c117d992/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99929_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99929_2.c?ref=a87d3f964df31d4fbceb822c6d293e85c117d992", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"pr99929_1.c\"\n+\n+/* { dg-final { scan-assembler {\\tptrue\\tp[0-7].[bhsd], vl1\\n} } } */"}]}