{"sha": "e974e9cc80135e32e774f46a9c0504fec5425af8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3NGU5Y2M4MDEzNWUzMmU3NzRmNDZhOWMwNTA0ZmVjNTQyNWFmOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-07T18:54:08Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-07T18:54:08Z"}, "message": "[multiple changes]\n\n\n2000-10-07  David Edelsohn  <dje@watson.ibm.com>\n\n\t* config/os/aix/bits/atomicity.h: New file.\n\n2000-10-07  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* acinclude.m4: Remove CPU_FLAGS\n\t* libio/Makefile.am: Here too.\n\t* Makefile.am: Here too.\n\n\t* src/Makefile.am (CONFIG_INCLUDES): Remove.\n\t(INCLUDES): Remove CONFIG_INCLUDES.\n\t(cpu_headers): Remove.\n\t(myinstallheaders): Remove cpu_headers.\n\t(generated_headers): Rename to build_headers.\n\t(build_headers): Add atomicity.h, ctype_base.h,\n\tctype_specializations.h.\n\n\t* config/os: New directory.\n\t* config/aix: Move to...\n\t* config/bsd: Move to...\n\t* config/generic: Move to...\n\t* config/gnu-linux: Move to...\n\t* config/irix: Move to...\n\t* config/newlib: Move to...\n\t* config/solaris: Move to...\n\t* config/os/*: Here.\n\nFrom-SVN: r36778", "tree": {"sha": "5498770818247fff07a559da600d76c138f3033f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5498770818247fff07a559da600d76c138f3033f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e974e9cc80135e32e774f46a9c0504fec5425af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e974e9cc80135e32e774f46a9c0504fec5425af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e974e9cc80135e32e774f46a9c0504fec5425af8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e974e9cc80135e32e774f46a9c0504fec5425af8/comments", "author": null, "committer": null, "parents": [{"sha": "d5587eca17799a4737e2134b1fc4f153cfbed341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5587eca17799a4737e2134b1fc4f153cfbed341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5587eca17799a4737e2134b1fc4f153cfbed341"}], "stats": {"total": 2560, "additions": 1292, "deletions": 1268}, "files": [{"sha": "c60e905e3c18eea4495421931c9f8d1e09cace61", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -1,4 +1,49 @@\n-2000-10-06  benjamin kosnik  <bkoz@fillmore.constant.com>\n+2000-10-07  benjamin kosnik  <bkoz@fillmore.constant.com>\n+\n+\n+\n+\t* config/*/ctype.cc: Move to...\n+\t* config/os/*/bits/ctype_noninline.h: ..here.\n+\t* src/locale.cc: Change include to ctype_noninline.h.\n+\n+\t* config/*/bits/ctype_specializations.h: Move to...\n+\t* config/os/*/bits/ctype_inline.h: ...here.\n+\t* include/bits/locale_facets.h: Change here.\n+\t\n+\t* configure.in: Change config/ to config/os/\n+\t* configure: Regenerate.\n+\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE): Change config/ to config/os/.\n+\t* aclocal.m4: Regenerate.\n+\t* mkcheck.in (SRC_DIR): Remove ctype_include_dir, cpu_include_dir.\n+\n+2000-10-07  David Edelsohn  <dje@watson.ibm.com> \n+\t\n+\t* config/os/aix/bits/atomicity.h: New file.\n+\n+2000-10-07  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* acinclude.m4: Remove CPU_FLAGS\n+\t* libio/Makefile.am: Here too.\n+\t* Makefile.am: Here too.\n+\t\n+\t* src/Makefile.am (CONFIG_INCLUDES): Remove.\n+\t(INCLUDES): Remove CONFIG_INCLUDES.\n+\t(cpu_headers): Remove.\n+\t(myinstallheaders): Remove cpu_headers.\n+\t(generated_headers): Rename to build_headers.\n+\t(build_headers): Add atomicity.h, ctype_base.h,\n+\tctype_specializations.h.\n+\n+\t* config/os: New directory.\n+\t* config/aix: Move to...\n+\t* config/bsd: Move to...\n+\t* config/generic: Move to...\n+\t* config/gnu-linux: Move to...\n+\t* config/irix: Move to...\n+\t* config/newlib: Move to...\n+\t* config/solaris: Move to...\n+\t* config/os/*: Here.\n+\t\n 2000-10-06  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* src/Makefile.am: Remove OPTIMIZE_CXXFLAGS, WARN_CXXFLAGS,"}, {"sha": "a4362ace6e6d1a2ec9ea3e1692fdb4dbf356097f", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -48,7 +48,7 @@ WARN_CXXFLAGS = \\\n # or configure.in to see how they are set.\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n-\t@CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \\\n+\t@EXTRA_CXX_FLAGS@ \\\n \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n \n "}, {"sha": "3637d39c11d51390e5a32304e4cb991dba5ef555", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -67,7 +67,6 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n CPP = @CPP@\n-CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n@@ -94,17 +93,10 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n-THREADDEPS = @THREADDEPS@\n-THREADINCS = @THREADINCS@\n-THREADLIBS = @THREADLIBS@\n-THREADOBJS = @THREADOBJS@\n-THREADSPEC = @THREADSPEC@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n-cpu_include_dir = @cpu_include_dir@\n-ctype_include_dir = @ctype_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -133,7 +125,7 @@ WARN_CXXFLAGS =  \t-Wall -Wno-format -W -Wwrite-strings -Winline \t$(WERROR) @WFMT\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set.\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n \n \n # Multilib support."}, {"sha": "39839d1d760104c1acdcfeaa63ff09614c466017", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 81, "deletions": 54, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -684,18 +684,14 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n ])\n \n \n-dnl Check to see what architecture we are compiling for. If it's\n-dnl supported, use special hand-crafted routines to provide thread\n-dnl primitives. Also, if architecture-specific flags are required for \n-dnl compilation, add them here.\n+dnl Check to see what architecture we are compiling for. Also, if \n+dnl architecture-specific flags are required for compilation, add them here.\n dnl \n-dnl Depending on what is found, select configure/cpu/*/bits/atomicity.h \n-dnl If not found, select configure/cpu/generic/bits/atomicity.h\n-dnl\n dnl GLIBCPP_CHECK_CPU\n AC_DEFUN(GLIBCPP_CHECK_CPU, [\n-    AC_MSG_CHECKING([for cpu primitives directory])\n-    CPU_FLAGS=\t\t\t\n+    AC_MSG_CHECKING([for cpu config directory])\n+# Currently unused, but could be useful.\n+#    CPU_FLAGS=\t\t\t\n     case \"${target_cpu}\" in\n       alpha*)\n \tcpu_include_dir=\"config/cpu/alpha\"\n@@ -714,7 +710,6 @@ AC_DEFUN(GLIBCPP_CHECK_CPU, [\n         ;;\n       powerpc | rs6000)\n \tcpu_include_dir=\"config/cpu/powerpc\"\n-    \tCPU_FLAGS='-mcpu=powerpc'\n         ;;\n       sparc64 | ultrasparc)\n \tcpu_include_dir=\"config/cpu/sparc/sparc64\"\n@@ -727,11 +722,47 @@ AC_DEFUN(GLIBCPP_CHECK_CPU, [\n         ;;\n     esac\n     AC_MSG_RESULT($cpu_include_dir)\n-    AC_SUBST(cpu_include_dir)\n-    AC_SUBST(CPU_FLAGS)\n ])\n \n  \n+dnl Check to see what OS we are compiling for. Also, if os-specific flags \n+dnl are required for compilation, add them here.\n+dnl \n+dnl GLIBCPP_CHECK_OS\n+AC_DEFUN(GLIBCPP_CHECK_OS, [\n+    AC_MSG_CHECKING([for os config directory])\n+# Currently unused, but could be useful.\n+#    OS_FLAGS=\n+    case \"${target_os}\" in\n+      aix*)\n+\tos_include_dir=\"config/os/aix\"\n+        ;;\n+      bsd* | freebsd*)\n+\tos_include_dir=\"config/os/bsd\"\n+        ;;\n+      linux*)\n+\tos_include_dir=\"config/os/gnu-linux\"\n+\t;;\n+      irix*)\n+\tos_include_dir=\"config/os/irix\"\n+\t;;\n+      solaris2.5*)\n+\tos_include_dir=\"config/os/solaris/solaris2.5\"\n+        ;;\n+      solaris2.6*)\n+\tos_include_dir=\"config/os/solaris/solaris2.6\"\n+        ;;\n+      solaris2.7* | solaris2.8*)\n+\tos_include_dir=\"config/os/solaris/solaris2.7\"\n+        ;;\n+      *)\n+\tos_include_dir=\"config/os/generic\"\n+        ;;\n+    esac\n+    AC_MSG_RESULT($os_include_dir)\n+])\n+\n+\n dnl\n dnl Check to see what the underlying c library's interface to ctype looks\n dnl like. Bits of locale rely on things like isspace, toupper, etc. This\n@@ -758,7 +789,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_linux=yes, ctype_linux=no)\n     AC_MSG_RESULT($ctype_linux)\n     if test $ctype_linux = \"yes\"; then\n-      ctype_include_dir=\"config/gnu-linux\"\n+      ctype_include_dir=\"config/os/gnu-linux\"\n       ctype_default=no\n     fi\n \n@@ -773,7 +804,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_bsd=yes, ctype_bsd=no)\n     AC_MSG_RESULT($ctype_bsd)\n     if test $ctype_bsd = \"yes\"; then\n-      ctype_include_dir=\"config/bsd\"\n+      ctype_include_dir=\"config/os/bsd\"\n       ctype_default=no\n     fi\n     fi\n@@ -789,7 +820,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_freebsd34=yes, ctype_freebsd34=no)\n     AC_MSG_RESULT($ctype_freebsd34)\n     if test $ctype_freebsd34 = \"yes\"; then\n-      ctype_include_dir=\"config/bsd\"\n+      ctype_include_dir=\"config/os/bsd\"\n       ctype_default=no\n     fi\n     fi\n@@ -814,11 +845,11 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n       ctype_solaris26=yes, ctype_solaris26=no)\n       AC_LANG_C\n       if test $ctype_solaris26 = \"yes\"; then\n-        ctype_include_dir=\"config/solaris/solaris2.6\"\n+        ctype_include_dir=\"config/os/solaris/solaris2.6\"\n         AC_MSG_RESULT([Solaris 2.6])\n         ctype_default=no\n       else\n-        ctype_include_dir=\"config/solaris/solaris2.7\"\n+        ctype_include_dir=\"config/os/solaris/solaris2.7\"\n         AC_MSG_RESULT([Solaris 7,8])\n         ctype_default=no\n       fi\n@@ -836,7 +867,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_solaris25=yes, ctype_solaris25=no)\n     AC_MSG_RESULT($ctype_solaris25)\n     if test $ctype_solaris25 = \"yes\"; then\n-      ctype_include_dir=\"config/solaris/solaris2.5\"\n+      ctype_include_dir=\"config/os/solaris/solaris2.5\"\n       ctype_default=no\n     fi\n     fi\n@@ -853,7 +884,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_aix=yes, ctype_aix=no)\n     AC_MSG_RESULT($ctype_aix)\n     if test $ctype_aix = \"yes\"; then\n-      ctype_include_dir=\"config/aix\"\n+      ctype_include_dir=\"config/os/aix\"\n       ctype_default=no\n     fi\n     fi\n@@ -875,10 +906,14 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     fi\n \n     if test $ctype_default = \"yes\"; then\n-      ctype_include_dir=\"config/generic\"\n+      ctype_include_dir=\"config/os/generic\"\n       AC_MSG_WARN(\"Using default ctype headers.\")\n     fi\n-    AC_SUBST(ctype_include_dir)\n+\n+    AC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n+    AC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, bits/ctype_inline.h)\n+    AC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n+    bits/ctype_noninline.h)\n   ])\n ])\n \n@@ -1321,16 +1356,13 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   esac\n \n   dnl Check for thread package actually supported in libstdc++ \n+  THREADH=\n   case \"$target_thread_file\" in\n     no | none | single)\n-      THREADS=none\n+      THREADH=threads-no.h\n       ;;\n     posix | pthreads)\n-      THREADS=posix\n-      case \"$target\" in\n-        *-*-linux*)\n-\t;;\n-      esac\n+      THREADH=threads-posix.h\n       ;;\n     decosf1 | irix | mach | os2 | solaris | win32 | dce | vxworks)\n       AC_MSG_ERROR(thread package $THREADS not yet supported)\n@@ -1339,38 +1371,33 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n       AC_MSG_ERROR($THREADS is an unknown thread package)\n       ;;\n   esac\n-  AC_MSG_RESULT($THREADS)\n+  AC_MSG_RESULT($THREADH)\n \n-  THREADLIBS=\n-  THREADINCS=\n-  THREADDEPS=\n-  THREADOBJS=\n-  THREADH=\n-  THREADSPEC=\n-  case \"$THREADS\" in\n-    posix)\n-      AC_CHECK_HEADER(pthread.h, [have_pthread_h=yes], [have_pthread_h=])\n-      THREADLIBS=-lpthread\n-      THREADSPEC=-lpthread\n-      dnl Not presently used\n-      dnl THREADOBJS=threads-posix.lo\n-      THREADH=threads-posix.h\n-      ;;\n-    none)\n-      dnl Not presently used\n-      dnl THREADOBJS=threads-no.lo\n-      THREADH=threads-no.h\n-      ;;\n-  esac\n-  AC_SUBST(THREADLIBS)\n-  AC_SUBST(THREADINCS)\n-  AC_SUBST(THREADDEPS)\n-  AC_SUBST(THREADOBJS)\n-  AC_SUBST(THREADSPEC)\n   AC_LINK_FILES(config/$THREADH, bits/c++threads.h)\n ])\n \n \n+dnl Enable atomic locking\n+dnl GLIBCPP_ENABLE_ATOMICITY\n+AC_DEFUN(GLIBCPP_ENABLE_ATOMICITY, [\n+    AC_MSG_CHECKING([for atomicity.h])\n+    case \"$target\" in\n+      *-*-linux*)\n+\tATOMICITYH=$cpu_include_dir\n+\t;;\t\n+      *-*-aix*)\n+        ATOMICITYH=$os_include_dir\n+\t;;\n+      *)\n+\techo \"$enable_threads is an unknown thread package\" 1>&2\n+\texit 1\n+\t;;\n+    esac\n+    AC_MSG_RESULT($ATOMICITYH/bits/atomicity.h)\n+    AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, bits/atomicity.h)\n+])\n+\n+\n dnl\n dnl Check for template specializations for the 'long long' type extension.\n dnl"}, {"sha": "cdfb6daf40fc254d7f32b30b8c92861c49f8f99f", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 81, "deletions": 54, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -696,18 +696,14 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n ])\n \n \n-dnl Check to see what architecture we are compiling for. If it's\n-dnl supported, use special hand-crafted routines to provide thread\n-dnl primitives. Also, if architecture-specific flags are required for \n-dnl compilation, add them here.\n+dnl Check to see what architecture we are compiling for. Also, if \n+dnl architecture-specific flags are required for compilation, add them here.\n dnl \n-dnl Depending on what is found, select configure/cpu/*/bits/atomicity.h \n-dnl If not found, select configure/cpu/generic/bits/atomicity.h\n-dnl\n dnl GLIBCPP_CHECK_CPU\n AC_DEFUN(GLIBCPP_CHECK_CPU, [\n-    AC_MSG_CHECKING([for cpu primitives directory])\n-    CPU_FLAGS=\t\t\t\n+    AC_MSG_CHECKING([for cpu config directory])\n+# Currently unused, but could be useful.\n+#    CPU_FLAGS=\t\t\t\n     case \"${target_cpu}\" in\n       alpha*)\n \tcpu_include_dir=\"config/cpu/alpha\"\n@@ -726,7 +722,6 @@ AC_DEFUN(GLIBCPP_CHECK_CPU, [\n         ;;\n       powerpc | rs6000)\n \tcpu_include_dir=\"config/cpu/powerpc\"\n-    \tCPU_FLAGS='-mcpu=powerpc'\n         ;;\n       sparc64 | ultrasparc)\n \tcpu_include_dir=\"config/cpu/sparc/sparc64\"\n@@ -739,11 +734,47 @@ AC_DEFUN(GLIBCPP_CHECK_CPU, [\n         ;;\n     esac\n     AC_MSG_RESULT($cpu_include_dir)\n-    AC_SUBST(cpu_include_dir)\n-    AC_SUBST(CPU_FLAGS)\n ])\n \n  \n+dnl Check to see what OS we are compiling for. Also, if os-specific flags \n+dnl are required for compilation, add them here.\n+dnl \n+dnl GLIBCPP_CHECK_OS\n+AC_DEFUN(GLIBCPP_CHECK_OS, [\n+    AC_MSG_CHECKING([for os config directory])\n+# Currently unused, but could be useful.\n+#    OS_FLAGS=\n+    case \"${target_os}\" in\n+      aix*)\n+\tos_include_dir=\"config/os/aix\"\n+        ;;\n+      bsd* | freebsd*)\n+\tos_include_dir=\"config/os/bsd\"\n+        ;;\n+      linux*)\n+\tos_include_dir=\"config/os/gnu-linux\"\n+\t;;\n+      irix*)\n+\tos_include_dir=\"config/os/irix\"\n+\t;;\n+      solaris2.5*)\n+\tos_include_dir=\"config/os/solaris/solaris2.5\"\n+        ;;\n+      solaris2.6*)\n+\tos_include_dir=\"config/os/solaris/solaris2.6\"\n+        ;;\n+      solaris2.7* | solaris2.8*)\n+\tos_include_dir=\"config/os/solaris/solaris2.7\"\n+        ;;\n+      *)\n+\tos_include_dir=\"config/os/generic\"\n+        ;;\n+    esac\n+    AC_MSG_RESULT($os_include_dir)\n+])\n+\n+\n dnl\n dnl Check to see what the underlying c library's interface to ctype looks\n dnl like. Bits of locale rely on things like isspace, toupper, etc. This\n@@ -770,7 +801,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_linux=yes, ctype_linux=no)\n     AC_MSG_RESULT($ctype_linux)\n     if test $ctype_linux = \"yes\"; then\n-      ctype_include_dir=\"config/gnu-linux\"\n+      ctype_include_dir=\"config/os/gnu-linux\"\n       ctype_default=no\n     fi\n \n@@ -785,7 +816,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_bsd=yes, ctype_bsd=no)\n     AC_MSG_RESULT($ctype_bsd)\n     if test $ctype_bsd = \"yes\"; then\n-      ctype_include_dir=\"config/bsd\"\n+      ctype_include_dir=\"config/os/bsd\"\n       ctype_default=no\n     fi\n     fi\n@@ -801,7 +832,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_freebsd34=yes, ctype_freebsd34=no)\n     AC_MSG_RESULT($ctype_freebsd34)\n     if test $ctype_freebsd34 = \"yes\"; then\n-      ctype_include_dir=\"config/bsd\"\n+      ctype_include_dir=\"config/os/bsd\"\n       ctype_default=no\n     fi\n     fi\n@@ -826,11 +857,11 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n       ctype_solaris26=yes, ctype_solaris26=no)\n       AC_LANG_C\n       if test $ctype_solaris26 = \"yes\"; then\n-        ctype_include_dir=\"config/solaris/solaris2.6\"\n+        ctype_include_dir=\"config/os/solaris/solaris2.6\"\n         AC_MSG_RESULT([Solaris 2.6])\n         ctype_default=no\n       else\n-        ctype_include_dir=\"config/solaris/solaris2.7\"\n+        ctype_include_dir=\"config/os/solaris/solaris2.7\"\n         AC_MSG_RESULT([Solaris 7,8])\n         ctype_default=no\n       fi\n@@ -848,7 +879,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_solaris25=yes, ctype_solaris25=no)\n     AC_MSG_RESULT($ctype_solaris25)\n     if test $ctype_solaris25 = \"yes\"; then\n-      ctype_include_dir=\"config/solaris/solaris2.5\"\n+      ctype_include_dir=\"config/os/solaris/solaris2.5\"\n       ctype_default=no\n     fi\n     fi\n@@ -865,7 +896,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_aix=yes, ctype_aix=no)\n     AC_MSG_RESULT($ctype_aix)\n     if test $ctype_aix = \"yes\"; then\n-      ctype_include_dir=\"config/aix\"\n+      ctype_include_dir=\"config/os/aix\"\n       ctype_default=no\n     fi\n     fi\n@@ -887,10 +918,14 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     fi\n \n     if test $ctype_default = \"yes\"; then\n-      ctype_include_dir=\"config/generic\"\n+      ctype_include_dir=\"config/os/generic\"\n       AC_MSG_WARN(\"Using default ctype headers.\")\n     fi\n-    AC_SUBST(ctype_include_dir)\n+\n+    AC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n+    AC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, bits/ctype_inline.h)\n+    AC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n+    bits/ctype_noninline.h)\n   ])\n ])\n \n@@ -1333,16 +1368,13 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   esac\n \n   dnl Check for thread package actually supported in libstdc++ \n+  THREADH=\n   case \"$target_thread_file\" in\n     no | none | single)\n-      THREADS=none\n+      THREADH=threads-no.h\n       ;;\n     posix | pthreads)\n-      THREADS=posix\n-      case \"$target\" in\n-        *-*-linux*)\n-\t;;\n-      esac\n+      THREADH=threads-posix.h\n       ;;\n     decosf1 | irix | mach | os2 | solaris | win32 | dce | vxworks)\n       AC_MSG_ERROR(thread package $THREADS not yet supported)\n@@ -1351,38 +1383,33 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n       AC_MSG_ERROR($THREADS is an unknown thread package)\n       ;;\n   esac\n-  AC_MSG_RESULT($THREADS)\n+  AC_MSG_RESULT($THREADH)\n \n-  THREADLIBS=\n-  THREADINCS=\n-  THREADDEPS=\n-  THREADOBJS=\n-  THREADH=\n-  THREADSPEC=\n-  case \"$THREADS\" in\n-    posix)\n-      AC_CHECK_HEADER(pthread.h, [have_pthread_h=yes], [have_pthread_h=])\n-      THREADLIBS=-lpthread\n-      THREADSPEC=-lpthread\n-      dnl Not presently used\n-      dnl THREADOBJS=threads-posix.lo\n-      THREADH=threads-posix.h\n-      ;;\n-    none)\n-      dnl Not presently used\n-      dnl THREADOBJS=threads-no.lo\n-      THREADH=threads-no.h\n-      ;;\n-  esac\n-  AC_SUBST(THREADLIBS)\n-  AC_SUBST(THREADINCS)\n-  AC_SUBST(THREADDEPS)\n-  AC_SUBST(THREADOBJS)\n-  AC_SUBST(THREADSPEC)\n   AC_LINK_FILES(config/$THREADH, bits/c++threads.h)\n ])\n \n \n+dnl Enable atomic locking\n+dnl GLIBCPP_ENABLE_ATOMICITY\n+AC_DEFUN(GLIBCPP_ENABLE_ATOMICITY, [\n+    AC_MSG_CHECKING([for atomicity.h])\n+    case \"$target\" in\n+      *-*-linux*)\n+\tATOMICITYH=$cpu_include_dir\n+\t;;\t\n+      *-*-aix*)\n+        ATOMICITYH=$os_include_dir\n+\t;;\n+      *)\n+\techo \"$enable_threads is an unknown thread package\" 1>&2\n+\texit 1\n+\t;;\n+    esac\n+    AC_MSG_RESULT($ATOMICITYH/bits/atomicity.h)\n+    AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, bits/atomicity.h)\n+])\n+\n+\n dnl\n dnl Check for template specializations for the 'long long' type extension.\n dnl"}, {"sha": "a67e7a8e56802611570c4d86cbceece9e402adac", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1006, "deletions": 1010, "changes": 2016, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=e974e9cc80135e32e774f46a9c0504fec5425af8"}, {"sha": "a81004da197160e651c149b469fcd4ed772ac084", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -27,6 +27,7 @@ AM_CONFIG_HEADER(config.h)\n # Check for c++ or library specific bits that don't require linking.\n GLIBCPP_CHECK_COMPILER_VERSION\n GLIBCPP_CHECK_CPU\n+GLIBCPP_CHECK_OS\n \n AC_CACHE_SAVE\n \n@@ -36,6 +37,7 @@ GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_LONG_LONG(yes)\n GLIBCPP_ENABLE_SHADOW(no)\n GLIBCPP_ENABLE_THREADS\n+GLIBCPP_ENABLE_ATOMICITY\n #GLIBCPP_ENABLE_RELIBGCC([../..])\n GLIBCPP_ENABLE_CXX_FLAGS([none])\n \n@@ -70,8 +72,13 @@ if test -n \"$with_cross_host\"; then\n     \tAC_DEFINE(HAVE__FPCLASS)\n     \tAC_DEFINE(HAVE_MODF)\n \n-    \tctype_include_dir=\"config/wince\"\n-    \tAC_SUBST(ctype_include_dir)\n+    \tctype_include_dir=\"config/os/wince\"\n+   \tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n+    \tAC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n+\tbits/ctype_inline.h)\n+    \tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n+\tbits/ctype_noninline.h)\n+\n \n     \tAC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n \n@@ -87,8 +94,12 @@ if test -n \"$with_cross_host\"; then\n     \tAC_DEFINE(HAVE_ISINF)\n     \tAC_DEFINE(HAVE_ISINFF)\n \n-    \tctype_include_dir=\"config/newlib\"\n-    \tAC_SUBST(ctype_include_dir)\n+    \tctype_include_dir=\"config/os/newlib\"\n+   \tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n+    \tAC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n+\tbits/ctype_inline.h)\n+    \tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n+\tbits/ctype_noninline.h)\n \n     \tAC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n "}, {"sha": "1df9114ce4c5f61ecdddd57564a2054075694817", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -506,8 +506,8 @@ namespace std\n     use_facet< const ctype<wchar_t> >(const locale& __loc);\n #endif //_GLIBCPP_USE_WCHAR_T\n \n-  // Include host-specific ctype specializations.\n-  #include <bits/ctype_specializations.h>\n+  // Include host-specific ctype inlines.\n+  #include <bits/ctype_inline.h>\n \n   // 22.2.1.2  Template class ctype_byname\n   template<typename _CharT>"}, {"sha": "97b5733cc73529b13244d06eccfe32f814065906", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -1,3 +1,7 @@\n+2000-10-07  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* Makefile.am (CONFIG_INCLUDES): Remove.\n+\n 2000-10-06   Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* Makefile.am (libio_la_DEPENDENCIES): Remove extaneous cruft."}, {"sha": "3f2960e63ce6e2e639b9ce1a3e061c39e8fa6868", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -23,6 +23,8 @@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n+noinst_LTLIBRARIES = libio.la\n+\n # Root level of the include sources.\n glibcpp_includedir = $(top_srcdir)/include\n \n@@ -36,45 +38,17 @@ else\n LIBIO_INCLUDES = \n endif\n \n-CONFIG_INCLUDES = \\\n-\t-I$(top_srcdir)/@cpu_include_dir@ \\\n-\t-I$(top_srcdir)/@ctype_include_dir@\n-\n INCLUDES = \\\n \t-nostdinc++ \\\n \t-I$(top_builddir) -I$(glibcpp_includedir) \\\n-\t$(CONFIG_INCLUDES) $(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n-\n-noinst_LTLIBRARIES = libio.la\n-\n-# These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set.\n-# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-AC_CFLAGS = \\\n-\t$(WERROR) @CPU_FLAGS@ @DEBUG_FLAGS@ \n-\n-# Need to manually set this option because AC_CXXFLAGS has to be at\n-# the end of the compile line so that -O2 can be overridden as the\n-# occasion call for it. (ie, --enable-debug)\n-AM_CFLAGS = \\\n-\t-D_GNU_SOURCE $(AC_CFLAGS) \n-\n-COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(CFLAGS) \\\n-\t$(AM_CFLAGS) \n-\n-LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \\\n-\t$(AM_CPPFLAGS) \\$(CPPFLAGS)  $(CFLAGS) $(AM_CFLAGS)\n-\n-LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(CFLAGS) $(AM_CFLAGS) $(LDFLAGS) -o $@\n-\n+\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n libio_headers = \\\n         libio.h libioP.h iolibio.h\n \n if GLIBCPP_NEED_LIBIO\n LIBIO_SRCS = \\\n \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c\n-#\tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c c_codecvt.c\n else\n LIBIO_SRCS =\n endif\n@@ -93,14 +67,9 @@ else\n LIBIO_XTRASRCS =\n endif\n \n-\n EXTRA_DIST = iostreamP.h\n \n libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS) $(LIBIO_XTRASRCS)\n \n \n-\n-\n-\n-\n-\n+AM_CFLAGS = -D_GNU_SOURCE @DEBUG_FLAGS@ "}, {"sha": "d39fe70c85a56f67a7cd17f41f0866c3cb304307", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 18, "deletions": 35, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -67,7 +67,6 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n CPP = @CPP@\n-CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n@@ -94,23 +93,18 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n-THREADDEPS = @THREADDEPS@\n-THREADINCS = @THREADINCS@\n-THREADLIBS = @THREADLIBS@\n-THREADOBJS = @THREADOBJS@\n-THREADSPEC = @THREADSPEC@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n-cpu_include_dir = @cpu_include_dir@\n-ctype_include_dir = @ctype_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n+noinst_LTLIBRARIES = libio.la\n+\n # Root level of the include sources.\n glibcpp_includedir = $(top_srcdir)/include\n \n@@ -119,37 +113,11 @@ TOPLEVEL_INCLUDES = -I$(includedir)\n @GLIBCPP_NEED_LIBIO_TRUE@LIBIO_INCLUDES = \t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_INCLUDES = \n \n-CONFIG_INCLUDES =  \t-I$(top_srcdir)/@cpu_include_dir@ \t-I$(top_srcdir)/@ctype_include_dir@\n-\n-\n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir) -I$(glibcpp_includedir) \t$(CONFIG_INCLUDES) $(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n-\n-\n-noinst_LTLIBRARIES = libio.la\n-\n-# These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set.\n-# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-AC_CFLAGS =  \t$(WERROR) @CPU_FLAGS@ @DEBUG_FLAGS@ \n-\n-\n-# Need to manually set this option because AC_CXXFLAGS has to be at\n-# the end of the compile line so that -O2 can be overridden as the\n-# occasion call for it. (ie, --enable-debug)\n-AM_CFLAGS =  \t-D_GNU_SOURCE $(AC_CFLAGS) \n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir) -I$(glibcpp_includedir) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(CFLAGS) \t$(AM_CFLAGS) \n-\n-\n-LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \t$(AM_CPPFLAGS) \\$(CPPFLAGS)  $(CFLAGS) $(AM_CFLAGS)\n-\n-\n-LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(CFLAGS) $(AM_CFLAGS) $(LDFLAGS) -o $@\n-\n libio_headers =          libio.h libioP.h iolibio.h\n \n-#\tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c c_codecvt.c\n @GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c\n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n @GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c\n@@ -160,6 +128,8 @@ libio_headers =          libio.h libioP.h iolibio.h\n EXTRA_DIST = iostreamP.h\n \n libio_la_SOURCES = $(LIBIO_SRCS) $(LIBIO_WSRCS) $(LIBIO_XTRASRCS)\n+\n+AM_CFLAGS = -D_GNU_SOURCE @DEBUG_FLAGS@ \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -229,7 +199,10 @@ libio_la_LIBADD =\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@iofopen.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@stdio.lo\n CFLAGS = @CFLAGS@\n+COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n CCLD = $(CC)\n+LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n DIST_COMMON =  ChangeLog Makefile.am Makefile.in\n \n \n@@ -428,6 +401,16 @@ installdirs mostlyclean-generic distclean-generic clean-generic \\\n maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n \n+#COMPILE = \\\n+#\t$(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(CFLAGS) \\\n+#\t$(AM_CFLAGS) \n+\n+#LTCOMPILE = \\\n+#\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \\\n+#\t$(AM_CPPFLAGS) \\$(CPPFLAGS)  $(CFLAGS) $(AM_CFLAGS)\n+\n+#LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(CFLAGS) $(AM_CFLAGS) $(LDFLAGS) -o $@\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "1bcf7199a53438de0420913915d74a4704c2fa5a", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -67,7 +67,6 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n CPP = @CPP@\n-CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n@@ -94,17 +93,10 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n-THREADDEPS = @THREADDEPS@\n-THREADINCS = @THREADINCS@\n-THREADLIBS = @THREADLIBS@\n-THREADOBJS = @THREADOBJS@\n-THREADSPEC = @THREADSPEC@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n-cpu_include_dir = @cpu_include_dir@\n-ctype_include_dir = @ctype_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@"}, {"sha": "4eb271fdc4b78f0102c431b103097fc447b04379", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -67,7 +67,6 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n CPP = @CPP@\n-CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n@@ -93,17 +92,10 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n-THREADDEPS = @THREADDEPS@\n-THREADINCS = @THREADINCS@\n-THREADLIBS = @THREADLIBS@\n-THREADOBJS = @THREADOBJS@\n-THREADSPEC = @THREADSPEC@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n-cpu_include_dir = @cpu_include_dir@\n-ctype_include_dir = @ctype_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@"}, {"sha": "7b52bb096a3cb3334e15aeae581895db5f7e9df5", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -56,7 +56,6 @@ fi\n # INC_PATH == include path to new headers for use on gcc command-line\n if [ $WHICH != \"1\" ]; then\n   INC_PATH=\"@CSHADOWFLAGS@ -I$BUILD_DIR -I$BUILD_DIR/libio \\\n-    -I$SRC_DIR/@ctype_include_dir@ -I$SRC_DIR/@cpu_include_dir@  \\\n     -I$SRC_DIR/include/std -I$SRC_DIR/include -I$SRC_DIR/libio \\\n     -I$SRC_DIR/testsuite\"\n elif [ $WHICH -eq 1 ]; then"}, {"sha": "3a5f9999d91635711c207af797248f4d23258c27", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.34 2000/10/06 23:31:22 bkoz Exp $\n+## $Id: Makefile.am,v 1.35 2000/10/07 01:05:37 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -92,21 +92,16 @@ else\n CSHADOW_INCLUDES =\n endif\n \n-CONFIG_INCLUDES = \\\n-\t-I$(top_srcdir)/@cpu_include_dir@ \\\n-\t-I$(top_srcdir)/@ctype_include_dir@\n-\n INCLUDES = \\\n \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \\\n \t-I$(top_builddir) -I$(glibcpp_includedir) \\\n-\t $(CONFIG_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n \t $(TOPLEVEL_INCLUDES)\t\n \n \n headers = \\\n-\tbits/cpp_type_traits.h \\\n-\tbits/std_cctype.h bits/ctype_base.h bits/ctype_specializations.h \\\n-\tbits/char_traits.h bits/codecvt.h \\\n+\tbits/std_cctype.h \\\n+\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n \tbits/basic_string.h bits/std_string.h  bits/string.tcc \\\n \tbits/generic_shadow.h bits/std_utility.h \\\n \tbits/std_complex.h \\\n@@ -196,13 +191,12 @@ else\n libio_headers =\n endif\n \n-generated_headers = \\\n-\t $(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \\\n-\t $(top_builddir)/bits/c++io.h $(top_builddir)/bits/c++threads.h \n-\n-cpu_headers = \\\n-\t $(top_srcdir)/@cpu_include_dir@/bits/atomicity.h \n-\n+build_headers = \\\n+\t$(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \\\n+\t$(top_builddir)/bits/c++io.h $(top_builddir)/bits/c++threads.h \\\n+\t$(top_builddir)/bits/atomicity.h $(top_builddir)/bits/ctype_base.h \\\n+\t$(top_builddir)/bits/ctype_noninline.h \\\n+\t$(top_builddir)/bits/ctype_inline.h \n \n sources = \\\n \tlimitsMEMBERS.cc \\\n@@ -218,7 +212,6 @@ wstring_sources = \\\n \n VPATH += $(top_srcdir) $(top_srcdir)/src\n VPATH += $(glibcpp_includedir) $(top_srcdir)/std\n-VPATH += $(top_srcdir)/@ctype_include_dir@\n \n \n # Actual sources for the distro, but don't build these.\n@@ -271,7 +264,7 @@ myinstallheaders: $(headers:%=$(myincludep)%)\n \t  echo \"$(INSTALL_DATA) $(glibcpp_includedir)/std/$$i $(myincludep)\"; \\\n \t        $(INSTALL_DATA) $(glibcpp_includedir)/std/$$i $(myincludep); \\\n \tdone; \\\n-\tfor i in $(generated_headers); do \\\n+\tfor i in $(build_headers); do \\\n \t  echo \"$(INSTALL_DATA) $$i $(myincludep)bits/\"; \\\n \t        $(INSTALL_DATA) $$i $(myincludep)bits/; \\\n \tdone; \\\n@@ -280,8 +273,6 @@ myinstallheaders: $(headers:%=$(myincludep)%)\n           echo \"$(INSTALL_DATA) $$i $(myincludep)\"; \\\n                 $(INSTALL_DATA) $$i $(myincludep); \\\n \tdone; \\\n-\techo \"$(INSTALL_DATA) $(cpu_headers) $(myincludep)bits/\"; \\\n-\t$(INSTALL_DATA) $(cpu_headers) $(myincludep)bits/; \\\n \tfi;\n \n $(headers:%=$(myincludep)%): $(myincludep)%: %\n@@ -293,9 +284,9 @@ $(headers:%=$(myincludep)%): $(myincludep)%: %\n \n # All the (now removed) machinations with string instantiations messes up the\n # automake-generated TAGS rule. Make a simple one here.\n-TAGS: $(generated_headers) $(cpu_headers) \n+TAGS: $(build_headers) $(cpu_headers) \n \tetags -C $(top_srcdir)/bits/*.h $(top_srcdir)/bits/*.tcc \\\n-\t$(generated_headers) $(cpu_headers) $(libio_headers) \\\n+\t$(build_headers) $(libio_headers) \\\n \t$(top_srcdir)/src/*.cc \\\n \t$(top_builddir)/src/limitsMEMBERS.cc $(top_builddir)/src/c++io.cc \\\n \t-o $(top_builddir)/TAGS\n@@ -319,6 +310,8 @@ wstring-inst.o: string-inst.cc\n wstring-inst.lo: string-inst.cc\n \t$(LTCXXCOMPILE) -fimplicit-templates -c -DC=wchar_t $< -o $@\n \n+\n+# Alexandre put this in here for some libtool-related reason.\n all: libstdc++.INC\n libstdc++.INC: Makefile\n \t$(MAKE) \\\n@@ -333,3 +326,12 @@ tmp-libstdc++.INC: Makefile\n \n \n \n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "176e8e75aa010456fe8bba5bf969de35e63a411a", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -66,7 +66,6 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n CPP = @CPP@\n-CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n@@ -93,17 +92,10 @@ RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n-THREADDEPS = @THREADDEPS@\n-THREADINCS = @THREADINCS@\n-THREADLIBS = @THREADLIBS@\n-THREADOBJS = @THREADOBJS@\n-THREADSPEC = @THREADSPEC@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n-cpu_include_dir = @cpu_include_dir@\n-ctype_include_dir = @ctype_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -154,32 +146,26 @@ LIBMATH_INCLUDES = -I$(top_srcdir)/libmath\n @GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_INCLUDES = \t-I$(glibcpp_includedir)/std -I$(top_srcdir)/shadow \n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_INCLUDES = \n \n-CONFIG_INCLUDES =  \t-I$(top_srcdir)/@cpu_include_dir@ \t-I$(top_srcdir)/@ctype_include_dir@\n+INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \t-I$(top_builddir) -I$(glibcpp_includedir) \t $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t $(TOPLEVEL_INCLUDES)\t\n \n \n-INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \t-I$(top_builddir) -I$(glibcpp_includedir) \t $(CONFIG_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t $(TOPLEVEL_INCLUDES)\t\n-\n-\n-headers =  \tbits/cpp_type_traits.h \tbits/std_cctype.h bits/ctype_base.h bits/ctype_specializations.h \tbits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_cassert.h bits/std_cwctype.h \tbits/std_cerrno.h bits/std_cfloat.h bits/std_climits.h \tbits/std_clocale.h bits/std_cmath.h \tbits/std_csetjmp.h bits/std_csignal.h bits/std_cstdarg.h \tbits/std_cstddef.h bits/std_cstdio.h bits/std_cstdlib.h \tbits/std_cstring.h bits/std_ctime.h bits/std_cwchar.h \tbits/std_typeinfo.h bits/std_new.h \tbits/std_exception.h bits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \tshadow/assert.h shadow/ctype.h shadow/errno.h shadow/float.h \tshadow/fcntl.h shadow/libio.h shadow/iolibio.h shadow/libioP.h \tshadow/limits.h shadow/locale.h shadow/math.h shadow/setjmp.h \tshadow/signal.h shadow/stdarg.h shadow/stddef.h shadow/stdio.h \tshadow/stdlib.h shadow/string.h shadow/time.h \tshadow/pthread.h shadow/iconv.h shadow/wchar.h shadow/wctype.h \tshadow/bits/std_cassert.h shadow/bits/std_cctype.h \tshadow/bits/std_cerrno.h shadow/bits/std_cfloat.h \tshadow/bits/std_climits.h shadow/bits/std_clocale.h \tshadow/bits/std_cmath.h shadow/bits/std_csetjmp.h \tshadow/bits/std_csignal.h shadow/bits/std_cstdarg.h \tshadow/bits/std_cstddef.h shadow/bits/std_cstdio.h \tshadow/bits/std_cstdlib.h shadow/bits/std_cstring.h \tshadow/bits/std_ctime.h shadow/bits/std_cwchar.h \tshadow/bits/std_cwctype.h \tshadow/bits/wrap_libio.h shadow/bits/wrap_iolibio.h \tshadow/bits/wrap_libioP.h shadow/bits/wrap_iconv.h \tshadow/bits/wrap_fcntl.h shadow/bits/wrap_pthread.h \tshadow/sys/cdefs.h \n+headers =  \tbits/std_cctype.h \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_cassert.h bits/std_cwctype.h \tbits/std_cerrno.h bits/std_cfloat.h bits/std_climits.h \tbits/std_clocale.h bits/std_cmath.h \tbits/std_csetjmp.h bits/std_csignal.h bits/std_cstdarg.h \tbits/std_cstddef.h bits/std_cstdio.h bits/std_cstdlib.h \tbits/std_cstring.h bits/std_ctime.h bits/std_cwchar.h \tbits/std_typeinfo.h bits/std_new.h \tbits/std_exception.h bits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \tshadow/assert.h shadow/ctype.h shadow/errno.h shadow/float.h \tshadow/fcntl.h shadow/libio.h shadow/iolibio.h shadow/libioP.h \tshadow/limits.h shadow/locale.h shadow/math.h shadow/setjmp.h \tshadow/signal.h shadow/stdarg.h shadow/stddef.h shadow/stdio.h \tshadow/stdlib.h shadow/string.h shadow/time.h \tshadow/pthread.h shadow/iconv.h shadow/wchar.h shadow/wctype.h \tshadow/bits/std_cassert.h shadow/bits/std_cctype.h \tshadow/bits/std_cerrno.h shadow/bits/std_cfloat.h \tshadow/bits/std_climits.h shadow/bits/std_clocale.h \tshadow/bits/std_cmath.h shadow/bits/std_csetjmp.h \tshadow/bits/std_csignal.h shadow/bits/std_cstdarg.h \tshadow/bits/std_cstddef.h shadow/bits/std_cstdio.h \tshadow/bits/std_cstdlib.h shadow/bits/std_cstring.h \tshadow/bits/std_ctime.h shadow/bits/std_cwchar.h \tshadow/bits/std_cwctype.h \tshadow/bits/wrap_libio.h shadow/bits/wrap_iolibio.h \tshadow/bits/wrap_libioP.h shadow/bits/wrap_iconv.h \tshadow/bits/wrap_fcntl.h shadow/bits/wrap_pthread.h \tshadow/sys/cdefs.h \n \n \n std_headers =  \talgorithm bitset cassert cctype cerrno cfloat climits clocale ciso646 \tcmath complex csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype deque exception fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory new numeric ostream queue set sstream stack stdexcept \tstreambuf string strstream typeinfo utility valarray vector \n \n @GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-generated_headers =  \t $(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \t $(top_builddir)/bits/c++io.h $(top_builddir)/bits/c++threads.h \n-\n-\n-cpu_headers =  \t $(top_srcdir)/@cpu_include_dir@/bits/atomicity.h \n+build_headers =  \t$(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \t$(top_builddir)/bits/c++io.h $(top_builddir)/bits/c++threads.h \t$(top_builddir)/bits/atomicity.h $(top_builddir)/bits/ctype_base.h \t$(top_builddir)/bits/ctype_noninline.h \t$(top_builddir)/bits/ctype_inline.h \n \n \n sources =  \tlimitsMEMBERS.cc \tcmath.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n wstring_sources =  \twstring-inst.cc\n \n-VPATH =  $(top_srcdir) $(top_srcdir)/src $(glibcpp_includedir) $(top_srcdir)/std $(top_srcdir)/@ctype_include_dir@\n+VPATH =  $(top_srcdir) $(top_srcdir)/src $(glibcpp_includedir) $(top_srcdir)/std\n \n # Actual sources for the distro, but don't build these.\n #EXTRA_sources = string-inst.cc \n@@ -468,7 +454,7 @@ myinstallheaders: $(headers:%=$(myincludep)%)\n \t  echo \"$(INSTALL_DATA) $(glibcpp_includedir)/std/$$i $(myincludep)\"; \\\n \t        $(INSTALL_DATA) $(glibcpp_includedir)/std/$$i $(myincludep); \\\n \tdone; \\\n-\tfor i in $(generated_headers); do \\\n+\tfor i in $(build_headers); do \\\n \t  echo \"$(INSTALL_DATA) $$i $(myincludep)bits/\"; \\\n \t        $(INSTALL_DATA) $$i $(myincludep)bits/; \\\n \tdone; \\\n@@ -477,8 +463,6 @@ myinstallheaders: $(headers:%=$(myincludep)%)\n           echo \"$(INSTALL_DATA) $$i $(myincludep)\"; \\\n                 $(INSTALL_DATA) $$i $(myincludep); \\\n \tdone; \\\n-\techo \"$(INSTALL_DATA) $(cpu_headers) $(myincludep)bits/\"; \\\n-\t$(INSTALL_DATA) $(cpu_headers) $(myincludep)bits/; \\\n \tfi;\n \n $(headers:%=$(myincludep)%): $(myincludep)%: %\n@@ -490,9 +474,9 @@ $(headers:%=$(myincludep)%): $(myincludep)%: %\n \n # All the (now removed) machinations with string instantiations messes up the\n # automake-generated TAGS rule. Make a simple one here.\n-TAGS: $(generated_headers) $(cpu_headers) \n+TAGS: $(build_headers) $(cpu_headers) \n \tetags -C $(top_srcdir)/bits/*.h $(top_srcdir)/bits/*.tcc \\\n-\t$(generated_headers) $(cpu_headers) $(libio_headers) \\\n+\t$(build_headers) $(libio_headers) \\\n \t$(top_srcdir)/src/*.cc \\\n \t$(top_builddir)/src/limitsMEMBERS.cc $(top_builddir)/src/c++io.cc \\\n \t-o $(top_builddir)/TAGS\n@@ -516,6 +500,7 @@ wstring-inst.o: string-inst.cc\n wstring-inst.lo: string-inst.cc\n \t$(LTCXXCOMPILE) -fimplicit-templates -c -DC=wchar_t $< -o $@\n \n+# Alexandre put this in here for some libtool-related reason.\n all: libstdc++.INC\n libstdc++.INC: Makefile\n \t$(MAKE) \\"}, {"sha": "c0217a3a905abecb764c1c05b5df32881d1b7485", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e974e9cc80135e32e774f46a9c0504fec5425af8/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=e974e9cc80135e32e774f46a9c0504fec5425af8", "patch": "@@ -777,7 +777,7 @@ namespace std {\n   ~_Bad_use_facet() throw() { }\n   \n   // Platform-specific initialization code for ctype tables.\n-  #include <ctype.cc>\n+  #include <bits/ctype_noninline.h>\n \n   locale::id ctype<char>::id;\n "}]}