{"sha": "07674418af0855de6751d8e85ec7fec87f8c8ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2NzQ0MThhZjA4NTVkZTY3NTFkOGU4NWVjN2ZlYzg3ZjhjOGFkMw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-11-03T23:01:39Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-11-03T23:01:39Z"}, "message": "merge in some last minute changes from jason, for jason.\n\nFrom-SVN: r10544", "tree": {"sha": "17cb019ff6bd4cb9c38bcfb6d7c95796c962c5c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17cb019ff6bd4cb9c38bcfb6d7c95796c962c5c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07674418af0855de6751d8e85ec7fec87f8c8ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07674418af0855de6751d8e85ec7fec87f8c8ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07674418af0855de6751d8e85ec7fec87f8c8ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07674418af0855de6751d8e85ec7fec87f8c8ad3/comments", "author": null, "committer": null, "parents": [{"sha": "be89f7bd13fe13d3f35c8faf389fb7733b8a5823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be89f7bd13fe13d3f35c8faf389fb7733b8a5823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be89f7bd13fe13d3f35c8faf389fb7733b8a5823"}], "stats": {"total": 68, "additions": 59, "deletions": 9}, "files": [{"sha": "8e443cd75b774b4f5cb98031bb90a1fa2d97efe4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07674418af0855de6751d8e85ec7fec87f8c8ad3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07674418af0855de6751d8e85ec7fec87f8c8ad3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07674418af0855de6751d8e85ec7fec87f8c8ad3", "patch": "@@ -1,3 +1,28 @@\n+Fri Nov  3 17:58:52 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* Version 2.7.1 released.\n+\n+Thu Nov  2 17:02:47 1995  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (convert_harshness): Handle references to arrays.\n+\n+Fri Oct 27 14:20:21 1995  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (comp_target_types): Check multi-level pointer\n+\tconversions in both directions.\n+\n+Tue Oct 17 21:39:05 1995  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y (explicit_instantiation): Fix 'extern template' with no\n+\treturn type.\n+\n+Mon Oct 16 14:35:20 1995  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y (explicit_instantiation): Support automatic instantiation\n+\tof constructors.\n+\t(named_class_head_*): Support out-of-class definition of nested\n+\ttypes.\n+\n Wed Oct 11 12:20:56 1995  Mike Stump  <mrs@cygnus.com>\n \n \t* search.c (envelope_add_decl): New routine.  Fix so that"}, {"sha": "3f293ac809b3c2d6f4117f9b68aef8a72fa57b84", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07674418af0855de6751d8e85ec7fec87f8c8ad3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07674418af0855de6751d8e85ec7fec87f8c8ad3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=07674418af0855de6751d8e85ec7fec87f8c8ad3", "patch": "@@ -194,7 +194,12 @@ convert_harshness (type, parmtype, parm)\n \n       ttr = intype;\n \n-      /* Maybe handle conversion to base here?  */\n+      if (TREE_CODE (ttl) == ARRAY_TYPE && TREE_CODE (ttr) == ARRAY_TYPE)\n+\t{\n+\t  if (comptypes (ttl, ttr, 1))\n+\t    return ZERO_RETURN (h);\n+\t  return EVIL_RETURN (h);\n+\t}\n \n       h = convert_harshness (ttl, ttr, NULL_TREE);\n       if (penalty && h.code == 0)"}, {"sha": "fd034af418d305066f1fe967d25b8bcf714d2caf", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07674418af0855de6751d8e85ec7fec87f8c8ad3/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07674418af0855de6751d8e85ec7fec87f8c8ad3/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=07674418af0855de6751d8e85ec7fec87f8c8ad3", "patch": "@@ -233,6 +233,7 @@ empty_parms ()\n %type <ttype> fn.def2 return_id\n %type <itype> ctor_initializer_opt\n %type <ttype> named_class_head named_class_head_sans_basetype\n+%type <ttype> named_complex_class_head_sans_basetype\n %type <ttype> unnamed_class_head\n %type <ttype> class_head base_class_list\n %type <itype> base_class_access_list\n@@ -820,11 +821,15 @@ explicit_instantiation:\n \t| TEMPLATE typed_declspecs declarator\n \t\t{ tree specs = strip_attrs ($2);\n \t\t  do_function_instantiation (specs, $3, NULL_TREE); }\n+\t| TEMPLATE notype_declarator\n+\t\t{ do_function_instantiation (NULL_TREE, $2, NULL_TREE); }\n \t| SCSPEC TEMPLATE specialization template_instantiation\n \t\t{ do_type_instantiation ($4 ? $4 : $3, $1); }\n \t| SCSPEC TEMPLATE typed_declspecs declarator\n \t\t{ tree specs = strip_attrs ($3);\n \t\t  do_function_instantiation (specs, $4, $1); }\n+\t| SCSPEC TEMPLATE notype_declarator\n+\t\t{ do_function_instantiation (NULL_TREE, $3, $1); }\n \t;\n \n template_type:\n@@ -2286,10 +2291,6 @@ specialization:\n named_class_head_sans_basetype:\n \t  aggr identifier\n \t\t{ current_aggr = $$; $$ = $2; }\n-\t| aggr complex_type_name\n-\t\t{ current_aggr = $$; $$ = $2; }\n-\t| aggr template_type %prec EMPTY\n-\t\t{ current_aggr = $$; $$ = $2; }\n \t| specialization\n \t;\n \n@@ -2306,6 +2307,13 @@ named_class_head_sans_basetype_defn:\n \t\t{ yyungetc (':', 1); goto aggr2; }\n \t;\n \n+named_complex_class_head_sans_basetype:\n+\t  aggr nested_name_specifier identifier\n+\t\t{ current_aggr = $$; $$ = $3; }\n+\t| aggr template_type %prec EMPTY\n+\t\t{ current_aggr = $$; $$ = $2; }\n+\t;\n+\n do_xref_defn: /* empty */ %prec EMPTY\n         { $<ttype>$ = xref_tag (current_aggr, $<ttype>0, NULL_TREE, 0); }\n \t;\n@@ -2320,6 +2328,12 @@ named_class_head:\n \t\t  if ($3)\n                     xref_basetypes (current_aggr, $1, $<ttype>2, $3); \n \t\t}\n+\t| named_complex_class_head_sans_basetype maybe_base_class_list\n+\t\t{ \n+\t\t  $$ = TREE_TYPE ($1);\n+\t\t  if ($2)\n+\t\t    xref_basetypes (current_aggr, $1, TREE_TYPE ($1), $2); \n+\t\t}\n \t;\n \n unnamed_class_head: aggr '{'"}, {"sha": "9247bf084d8a8d23078df25779903f53f0adbdbc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07674418af0855de6751d8e85ec7fec87f8c8ad3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07674418af0855de6751d8e85ec7fec87f8c8ad3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=07674418af0855de6751d8e85ec7fec87f8c8ad3", "patch": "@@ -808,7 +808,13 @@ comp_target_types (ttl, ttr, nptrs)\n \t    return -1;\n \t  else if (TREE_CODE (ttl) == POINTER_TYPE\n \t\t   || TREE_CODE (ttl) == ARRAY_TYPE)\n-\t    return comp_ptr_ttypes (ttl, ttr);\n+\t    {\n+\t      if (comp_ptr_ttypes (ttl, ttr))\n+\t\treturn 1;\n+\t      else if (comp_ptr_ttypes (ttr, ttl))\n+\t\treturn -1;\n+\t      return 0;\n+\t    }\n \t}\n \n       /* Const and volatile mean something different for function types,\n@@ -6134,9 +6140,9 @@ build_modify_expr (lhs, modifycode, rhs)\n \tnewrhs = build_cplus_new (lhstype, newrhs, 0);\n \n       /* Can't initialize directly from a TARGET_EXPR, since that would\n-\t cause the lhs to be constructed twice.  So we force the\n-\t TARGET_EXPR to be expanded.  expand_expr should really do this\n-\t by itself.  */\n+\t cause the lhs to be constructed twice, and possibly result in\n+\t accidental self-initialization.  So we force the TARGET_EXPR to be\n+\t expanded.  expand_expr should really do this by itself.  */\n       if (TREE_CODE (newrhs) == TARGET_EXPR)\n \tnewrhs = expand_target_expr (newrhs);\n     }"}]}