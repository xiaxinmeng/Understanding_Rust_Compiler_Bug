{"sha": "82b12c4b24d52b38cc4d538cc0e978002ead07e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJiMTJjNGIyNGQ1MmIzOGNjNGQ1MzhjYzBlOTc4MDAyZWFkMDdlMg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-04-07T10:42:51Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-04-07T10:42:51Z"}, "message": "functional (_Derives_from_unary_function): Remove.\n\n2013-04-04  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/std/functional (_Derives_from_unary_function): Remove.\n\t(_Derives_from_binary_function): Remove.\n\t* include/std/type_traits (__sfinae_types): Remove.\n\t(__is_assignable_helper): Adapt.\n\t(__is_convertible_helper): Adapt.\n\t(_GLIBCXX_HAS_NESTED_TYPE): Adapt.\n\tRemove several explicit instantiations of integral_constant.\n\t* testsuite/20_util/reference_wrapper/typedefs-3.cc: Adapt.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tAdapt dg-error line number.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n\t* testsuite/20_util/bind/ref_neg.cc: Likewise.\n\nFrom-SVN: r197551", "tree": {"sha": "8a4678040213a110aad7bd8b03bd29315fb64ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a4678040213a110aad7bd8b03bd29315fb64ac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82b12c4b24d52b38cc4d538cc0e978002ead07e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b12c4b24d52b38cc4d538cc0e978002ead07e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b12c4b24d52b38cc4d538cc0e978002ead07e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b12c4b24d52b38cc4d538cc0e978002ead07e2/comments", "author": null, "committer": null, "parents": [{"sha": "7c42966e8533afa8a5102e4fd072c825d57fea2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c42966e8533afa8a5102e4fd072c825d57fea2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c42966e8533afa8a5102e4fd072c825d57fea2e"}], "stats": {"total": 197, "additions": 84, "deletions": 113}, "files": [{"sha": "64e5383cf27ad26c18eac87a41eb5ea0620e4c93", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82b12c4b24d52b38cc4d538cc0e978002ead07e2", "patch": "@@ -1,3 +1,20 @@\n+2013-04-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/std/functional (_Derives_from_unary_function): Remove.\n+\t(_Derives_from_binary_function): Remove.\n+\t* include/std/type_traits (__sfinae_types): Remove.\n+\t(__is_assignable_helper): Adapt.\n+\t(__is_convertible_helper): Adapt.\n+\t(_GLIBCXX_HAS_NESTED_TYPE): Adapt.\n+\tRemove several explicit instantiations of integral_constant.\n+\t* testsuite/20_util/reference_wrapper/typedefs-3.cc: Adapt.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tAdapt dg-error line number.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n+\t* testsuite/20_util/bind/ref_neg.cc: Likewise.\n+\n 2013-04-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/56841"}, {"sha": "44d3fd508d5009820d2ae8403d74ff478ce228a0", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=82b12c4b24d52b38cc4d538cc0e978002ead07e2", "patch": "@@ -185,38 +185,6 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n     : _Weak_result_type_impl<typename remove_cv<_Functor>::type>\n     { };\n \n-  /// Determines if the type _Tp derives from unary_function.\n-  template<typename _Tp>\n-    struct _Derives_from_unary_function : __sfinae_types\n-    {\n-    private:\n-      template<typename _T1, typename _Res>\n-\tstatic __one __test(const volatile unary_function<_T1, _Res>*);\n-\n-      // It's tempting to change \"...\" to const volatile void*, but\n-      // that fails when _Tp is a function type.\n-      static __two __test(...);\n-\n-    public:\n-      static const bool value = sizeof(__test((_Tp*)0)) == 1;\n-    };\n-\n-  /// Determines if the type _Tp derives from binary_function.\n-  template<typename _Tp>\n-    struct _Derives_from_binary_function : __sfinae_types\n-    {\n-    private:\n-      template<typename _T1, typename _T2, typename _Res>\n-\tstatic __one __test(const volatile binary_function<_T1, _T2, _Res>*);\n-\n-      // It's tempting to change \"...\" to const volatile void*, but\n-      // that fails when _Tp is a function type.\n-      static __two __test(...);\n-\n-    public:\n-      static const bool value = sizeof(__test((_Tp*)0)) == 1;\n-    };\n-\n   /**\n    * Invoke a function object, which may be either a member pointer or a\n    * function object. The first parameter will tell which."}, {"sha": "488ffd9c180563460bbd6bd4195b9b1ff1ce7f9e", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 56, "deletions": 71, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=82b12c4b24d52b38cc4d538cc0e978002ead07e2", "patch": "@@ -127,12 +127,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public integral_constant<bool, !_Pp::value>\n     { };\n \n-  struct __sfinae_types\n-  {\n-    typedef char __one;\n-    typedef struct { char __arr[2]; } __two;\n-  };\n-\n   // For several sfinae-friendly trait implementations we transport both the\n   // result information (as the member type) and the failure information (no\n   // member type). This is very similar to std::enable_if, but we cannot use\n@@ -161,8 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_void\n   template<typename _Tp>\n     struct is_void\n-    : public integral_constant<bool, (__is_void_helper<typename\n-\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    : public __is_void_helper<typename remove_cv<_Tp>::type>::type\n     { };\n \n   template<typename>\n@@ -244,8 +237,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_integral\n   template<typename _Tp>\n     struct is_integral\n-    : public integral_constant<bool, (__is_integral_helper<typename\n-\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type\n     { };\n \n   template<typename>\n@@ -273,8 +265,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_floating_point\n   template<typename _Tp>\n     struct is_floating_point\n-    : public integral_constant<bool, (__is_floating_point_helper<typename\n-\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type\n     { };\n \n   /// is_array\n@@ -301,8 +292,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_pointer\n   template<typename _Tp>\n     struct is_pointer\n-    : public integral_constant<bool, (__is_pointer_helper<typename\n-\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type\n     { };\n \n   /// is_lvalue_reference\n@@ -337,8 +327,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_member_object_pointer\n   template<typename _Tp>\n     struct is_member_object_pointer\n-    : public integral_constant<bool, (__is_member_object_pointer_helper<\n-\t\t\t\t      typename remove_cv<_Tp>::type>::value)>\n+    : public __is_member_object_pointer_helper<\n+\t\t\t\ttypename remove_cv<_Tp>::type>::type\n     { };\n \n   template<typename>\n@@ -352,8 +342,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_member_function_pointer\n   template<typename _Tp>\n     struct is_member_function_pointer\n-    : public integral_constant<bool, (__is_member_function_pointer_helper<\n-\t\t\t\t      typename remove_cv<_Tp>::type>::value)>\n+    : public __is_member_function_pointer_helper<\n+\t\t\t\ttypename remove_cv<_Tp>::type>::type\n     { };\n \n   /// is_enum\n@@ -422,8 +412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // __is_nullptr_t (extension).\n   template<typename _Tp>\n     struct __is_nullptr_t\n-    : public integral_constant<bool, (__is_nullptr_t_helper<typename\n-\t\t\t\t      remove_cv<_Tp>::type>::value)>\n+    : public __is_nullptr_t_helper<typename remove_cv<_Tp>::type>::type\n     { };\n \n   // Composite type categories.\n@@ -480,8 +469,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_member_pointer\n   template<typename _Tp>\n     struct is_member_pointer\n-    : public integral_constant<bool, (__is_member_pointer_helper<\n-\t\t\t\t      typename remove_cv<_Tp>::type>::value)>\n+    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type\n     { };\n \n   // Type properties.\n@@ -567,7 +555,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_signed\n   template<typename _Tp>\n     struct is_signed\n-    : public integral_constant<bool, __is_signed_helper<_Tp>::value>\n+    : public __is_signed_helper<_Tp>::type\n     { };\n \n   /// is_unsigned\n@@ -650,7 +638,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_destructible\n   template<typename _Tp>\n     struct is_destructible\n-    : public integral_constant<bool, (__is_destructible_safe<_Tp>::value)>\n+    : public __is_destructible_safe<_Tp>::type\n     { };\n \n   // is_nothrow_destructible requires that is_destructible is\n@@ -698,7 +686,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_nothrow_destructible\n   template<typename _Tp>\n     struct is_nothrow_destructible\n-    : public integral_constant<bool, (__is_nt_destructible_safe<_Tp>::value)>\n+    : public __is_nt_destructible_safe<_Tp>::type\n     { };\n \n   struct __do_is_default_constructible_impl\n@@ -746,8 +734,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_default_constructible\n   template<typename _Tp>\n     struct is_default_constructible\n-    : public integral_constant<bool, (__is_default_constructible_safe<\n-\t\t\t\t      _Tp>::value)>\n+    : public __is_default_constructible_safe<_Tp>::type\n     { };\n \n \n@@ -901,8 +888,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Arg>\n     struct __is_direct_constructible\n-    : public integral_constant<bool, (__is_direct_constructible_new<\n-\t\t\t\t      _Tp, _Arg>::value)>\n+    : public __is_direct_constructible_new<_Tp, _Arg>::type\n     { };\n \n   // Since default-construction and binary direct-initialization have\n@@ -953,8 +939,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_constructible\n   template<typename _Tp, typename... _Args>\n     struct is_constructible\n-    : public integral_constant<bool, (__is_constructible_impl<_Tp,\n-\t\t\t\t      _Args...>::value)>\n+    : public __is_constructible_impl<_Tp, _Args...>::type\n     { };\n \n   template<typename _Tp, bool = is_void<_Tp>::value>\n@@ -1081,24 +1066,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Up>\n     class __is_assignable_helper\n-    : public __sfinae_types\n     {\n-      template<typename _Tp1, typename _Up1>\n-        static decltype(declval<_Tp1>() = declval<_Up1>(), __one())\n+      template<typename _Tp1, typename _Up1,\n+\t       typename = decltype(declval<_Tp1>() = declval<_Up1>())>\n+\tstatic true_type\n \t__test(int);\n \n       template<typename, typename>\n-        static __two __test(...);\n+\tstatic false_type\n+\t__test(...);\n \n     public:\n-      static constexpr bool value = sizeof(__test<_Tp, _Up>(0)) == 1;\n+      typedef decltype(__test<_Tp, _Up>(0)) type;\n     };\n \n   /// is_assignable\n   template<typename _Tp, typename _Up>\n     struct is_assignable\n-    : public integral_constant<bool,\n-                               __is_assignable_helper<_Tp, _Up>::value>\n+      : public __is_assignable_helper<_Tp, _Up>::type\n     { };\n \n   template<typename _Tp, bool = is_void<_Tp>::value>\n@@ -1292,31 +1277,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n            bool = __or_<is_void<_From>, is_function<_To>,\n                         is_array<_To>>::value>\n     struct __is_convertible_helper\n-    { static constexpr bool value = is_void<_To>::value; };\n+    { typedef typename is_void<_To>::type type; };\n \n   template<typename _From, typename _To>\n     class __is_convertible_helper<_From, _To, false>\n-    : public __sfinae_types\n     {\n-      template<typename _To1>\n-        static void __test_aux(_To1);\n+       template<typename _To1>\n+\tstatic void __test_aux(_To1);\n \n-      template<typename _From1, typename _To1>\n-        static decltype(__test_aux<_To1>(std::declval<_From1>()), __one())\n+      template<typename _From1, typename _To1,\n+\t       typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>\n+\tstatic true_type\n \t__test(int);\n \n       template<typename, typename>\n-        static __two __test(...);\n+\tstatic false_type\n+\t__test(...);\n \n     public:\n-      static constexpr bool value = sizeof(__test<_From, _To>(0)) == 1;\n+      typedef decltype(__test<_From, _To>(0)) type;\n     };\n \n+\n   /// is_convertible\n   template<typename _From, typename _To>\n     struct is_convertible\n-    : public integral_constant<bool,\n-\t\t\t       __is_convertible_helper<_From, _To>::value>\n+    : public __is_convertible_helper<_From, _To>::type\n     { };\n \n \n@@ -2041,29 +2027,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Use SFINAE to determine if the type _Tp has a publicly-accessible\n    *  member type _NTYPE.\n    */\n-#define _GLIBCXX_HAS_NESTED_TYPE(_NTYPE)                         \\\n-  template<typename _Tp>                                         \\\n-    class __has_##_NTYPE##_helper                                \\\n-    : __sfinae_types                                             \\\n-    {                                                            \\\n-      template<typename _Up>                                     \\\n-        struct _Wrap_type                                        \\\n-\t{ };                                                     \\\n-                                                                 \\\n-      template<typename _Up>                                     \\\n-        static __one __test(_Wrap_type<typename _Up::_NTYPE>*);  \\\n-                                                                 \\\n-      template<typename _Up>                                     \\\n-        static __two __test(...);                                \\\n-                                                                 \\\n-    public:                                                      \\\n-      static constexpr bool value = sizeof(__test<_Tp>(0)) == 1; \\\n-    };                                                           \\\n-                                                                 \\\n-  template<typename _Tp>                                         \\\n-    struct __has_##_NTYPE                                        \\\n-    : integral_constant<bool, __has_##_NTYPE##_helper            \\\n-\t\t\t<typename remove_cv<_Tp>::type>::value>  \\\n+#define _GLIBCXX_HAS_NESTED_TYPE(_NTYPE)\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+    class __has_##_NTYPE##_helper\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      template<typename _Up>\t\t\t\t\t\t\\\n+\tstruct _Wrap_type\t\t\t\t\t\t\\\n+\t{ };\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      template<typename _Up>\t\t\t\t\t\t\\\n+\tstatic true_type __test(_Wrap_type<typename _Up::_NTYPE>*);\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      template<typename _Up>\t\t\t\t\t\t\\\n+\tstatic false_type __test(...);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    public:\t\t\t\t\t\t\t\t\\\n+      typedef decltype(__test<_Tp>(0)) type;\t\t\t\t\\\n+    };\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+    struct __has_##_NTYPE\t\t\t\t\t\t\\\n+    : public __has_##_NTYPE##_helper\t\t\t\t\t\\\n+\t\t\t<typename remove_cv<_Tp>::type>::type\t\t\\\n     { };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "ddfee635f08dfc7c03ff206c9fd73f17495f1b60", "filename": "libstdc++-v3/testsuite/20_util/bind/ref_neg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc?ref=82b12c4b24d52b38cc4d538cc0e978002ead07e2", "patch": "@@ -30,10 +30,10 @@ void test01()\n {\n   const int dummy = 0;\n   std::bind(&inc, _1)(0);               // { dg-error  \"no match\" }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1347 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1361 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1375 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1389 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1315 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1329 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1343 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1357 }\n   std::bind(&inc, std::ref(dummy))();\t// { dg-error  \"no match\" }\n }\n "}, {"sha": "348964aa78294a29ddec46f71ba38db19f910c2f", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=82b12c4b24d52b38cc4d538cc0e978002ead07e2", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1871 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1857 }\n \n #include <utility>\n "}, {"sha": "7da7d1d4fef9749a0e26a9352f12a022e870931b", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=82b12c4b24d52b38cc4d538cc0e978002ead07e2", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1613 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1577 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1599 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1563 }"}, {"sha": "c769aa9a54c767a1d6567651b2fd9e7099d8f812", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=82b12c4b24d52b38cc4d538cc0e978002ead07e2", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1531 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1495 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1517 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1481 }"}, {"sha": "e4029badf8d203bff88dc40369565db38039c83e", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/typedefs-3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b12c4b24d52b38cc4d538cc0e978002ead07e2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs-3.cc?ref=82b12c4b24d52b38cc4d538cc0e978002ead07e2", "patch": "@@ -44,7 +44,8 @@ struct S12 : S1, S2 { };\n \n struct S012 : S0, S1, S2 { };\n \n-using std::__sfinae_types;\n+using std::true_type;\n+using std::false_type;\n using std::integral_constant;\n using std::remove_cv;\n "}]}