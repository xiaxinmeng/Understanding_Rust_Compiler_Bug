{"sha": "66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlOGRmNTM1NGYyZDljNzA1ZDVkOGFlNDYxY2M3NmFhZjBkMWIwYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-19T20:08:20Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-19T20:08:20Z"}, "message": "Convert various rtx to rtx_note *\n\n2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n\n\t* basic-block.h (create_basic_block_structure): Strengthen third\n\tparam \"bb_note\" from rtx to rtx_note *.\n\t* rtl.h (emit_note_before): Strengthen return type from rtx to\n\trtx_note *.\n\t(emit_note_after): Likewise.\n\t(emit_note): Likewise.\n\t(emit_note_copy): Likewise.  Also, strengthen param similarly.\n\t* function.h (struct rtl_data): Strengthen field\n\t\"x_stack_check_probe_note\" from rtx to rtx_note *.\n\n\t* cfgexpand.c (expand_gimple_basic_block): Strengthen local \"note\"\n\tfrom rtx to rtx_note *.\n\t* cfgrtl.c (create_basic_block_structure): Strengthen third param\n\t\"bb_note\" from rtx to rtx_note *.\n\t(duplicate_insn_chain): Likewise for local \"last\".  Add a checked cast\n\twhen calling emit_note_copy.\n\t* emit-rtl.c (make_note_raw): Strengthen return type from rtx to\n\trtx_note *.\n\t(emit_note_after): Likewise.\n\t(emit_note_before): Likewise.\n\t(emit_note_copy): Likewise.  Also, strengthen param similarly.\n\t(emit_note): Likewise.\n\t* except.c (emit_note_eh_region_end): Likewise for return type.\n\tStrengthen local \"next\" from rtx to rtx_insn *.\n\t(convert_to_eh_region_ranges): Strengthen local \"note\"\n\tfrom rtx to rtx_note *.\n\t* final.c (change_scope): Likewise.\n\t(reemit_insn_block_notes): Likewise, for both locals named \"note\".\n\tAlso, strengthen local \"insn\" from rtx to rtx_insn *.\n\t* haifa-sched.c (sched_extend_bb): Strengthen local \"note\" from\n\trtx to rtx_note *.\n\t* reg-stack.c (compensate_edge): Likewise for local \"after\". Also,\n\tstrengthen local \"seq\" from rtx to rtx_insn *.\n\t* reload1.c (reload_as_needed): Strengthen local \"marker\" from rtx\n\tto rtx_note *.\n\t* sel-sched-ir.c (bb_note_pool): Strengthen from rtx_vec_t to\n\tvec<rtx_note *>.\n\t(get_bb_note_from_pool): Strengthen return type from rtx to\n\trtx_note *.\n\t(sel_create_basic_block): Strengthen local \"new_bb_note\" from\n\tinsn_t to rtx_note *.\n\t* var-tracking.c (emit_note_insn_var_location): Strengthen local\n\t\"note\" from rtx to rtx_note *.\n\t(emit_notes_in_bb): Likewise.\n\nFrom-SVN: r214192", "tree": {"sha": "c357a9a9e901f39a3832334ff03c10d8bf88f08d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c357a9a9e901f39a3832334ff03c10d8bf88f08d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a688d527cb2bc88c93946c16951263be80e46e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a688d527cb2bc88c93946c16951263be80e46e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a688d527cb2bc88c93946c16951263be80e46e6"}], "stats": {"total": 132, "additions": 94, "deletions": 38}, "files": [{"sha": "6c71a91bf7c0275276b36ea020803ed902978175", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -1,3 +1,50 @@\n+2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* basic-block.h (create_basic_block_structure): Strengthen third\n+\tparam \"bb_note\" from rtx to rtx_note *.\n+\t* rtl.h (emit_note_before): Strengthen return type from rtx to\n+\trtx_note *.\n+\t(emit_note_after): Likewise.\n+\t(emit_note): Likewise.\n+\t(emit_note_copy): Likewise.  Also, strengthen param similarly.\n+\t* function.h (struct rtl_data): Strengthen field\n+\t\"x_stack_check_probe_note\" from rtx to rtx_note *.\n+\n+\t* cfgexpand.c (expand_gimple_basic_block): Strengthen local \"note\"\n+\tfrom rtx to rtx_note *.\n+\t* cfgrtl.c (create_basic_block_structure): Strengthen third param\n+\t\"bb_note\" from rtx to rtx_note *.\n+\t(duplicate_insn_chain): Likewise for local \"last\".  Add a checked cast\n+\twhen calling emit_note_copy.\n+\t* emit-rtl.c (make_note_raw): Strengthen return type from rtx to\n+\trtx_note *.\n+\t(emit_note_after): Likewise.\n+\t(emit_note_before): Likewise.\n+\t(emit_note_copy): Likewise.  Also, strengthen param similarly.\n+\t(emit_note): Likewise.\n+\t* except.c (emit_note_eh_region_end): Likewise for return type.\n+\tStrengthen local \"next\" from rtx to rtx_insn *.\n+\t(convert_to_eh_region_ranges): Strengthen local \"note\"\n+\tfrom rtx to rtx_note *.\n+\t* final.c (change_scope): Likewise.\n+\t(reemit_insn_block_notes): Likewise, for both locals named \"note\".\n+\tAlso, strengthen local \"insn\" from rtx to rtx_insn *.\n+\t* haifa-sched.c (sched_extend_bb): Strengthen local \"note\" from\n+\trtx to rtx_note *.\n+\t* reg-stack.c (compensate_edge): Likewise for local \"after\". Also,\n+\tstrengthen local \"seq\" from rtx to rtx_insn *.\n+\t* reload1.c (reload_as_needed): Strengthen local \"marker\" from rtx\n+\tto rtx_note *.\n+\t* sel-sched-ir.c (bb_note_pool): Strengthen from rtx_vec_t to\n+\tvec<rtx_note *>.\n+\t(get_bb_note_from_pool): Strengthen return type from rtx to\n+\trtx_note *.\n+\t(sel_create_basic_block): Strengthen local \"new_bb_note\" from\n+\tinsn_t to rtx_note *.\n+\t* var-tracking.c (emit_note_insn_var_location): Strengthen local\n+\t\"note\" from rtx to rtx_note *.\n+\t(emit_notes_in_bb): Likewise.\n+\n 2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* function.h (struct rtl_data): Strengthen field"}, {"sha": "2e494a4995a0f08019fcddf921bdebd67d99d386", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -412,7 +412,8 @@ extern void remove_edge_raw (edge);\n extern void redirect_edge_succ (edge, basic_block);\n extern edge redirect_edge_succ_nodup (edge, basic_block);\n extern void redirect_edge_pred (edge, basic_block);\n-extern basic_block create_basic_block_structure (rtx, rtx, rtx, basic_block);\n+extern basic_block create_basic_block_structure (rtx, rtx, rtx_note *,\n+\t\t\t\t\t\t basic_block);\n extern void clear_bb_flags (void);\n extern void dump_bb_info (FILE *, basic_block, int, int, bool, bool);\n extern void dump_edge_info (FILE *, edge, int, int);"}, {"sha": "0ed6d4fc533fda434d4a8e02cab9afb35ffeb615", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -4893,7 +4893,7 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n   gimple_stmt_iterator gsi;\n   gimple_seq stmts;\n   gimple stmt = NULL;\n-  rtx note;\n+  rtx_note *note;\n   rtx_insn *last;\n   edge e;\n   edge_iterator ei;\n@@ -4965,7 +4965,7 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n       maybe_dump_rtl_for_gimple_stmt (stmt, last);\n     }\n   else\n-    note = SET_BB_HEAD (bb) = emit_note (NOTE_INSN_BASIC_BLOCK);\n+    SET_BB_HEAD (bb) = note = emit_note (NOTE_INSN_BASIC_BLOCK);\n \n   NOTE_BASIC_BLOCK (note) = bb;\n "}, {"sha": "f0e7f5caecbac578c7a2c60f30994b41077fbb7b", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -272,7 +272,8 @@ delete_insn_chain (rtx start, rtx finish, bool clear_bb)\n    AFTER is the basic block we should be put after.  */\n \n basic_block\n-create_basic_block_structure (rtx head, rtx end, rtx bb_note, basic_block after)\n+create_basic_block_structure (rtx head, rtx end, rtx_note *bb_note,\n+\t\t\t      basic_block after)\n {\n   basic_block bb;\n \n@@ -4082,7 +4083,8 @@ cfg_layout_can_duplicate_bb_p (const_basic_block bb)\n rtx\n duplicate_insn_chain (rtx from, rtx to)\n {\n-  rtx insn, next, last, copy;\n+  rtx insn, next, copy;\n+  rtx_note *last;\n \n   /* Avoid updating of boundaries of previous basic block.  The\n      note will get removed from insn stream in fixup.  */\n@@ -4150,7 +4152,7 @@ duplicate_insn_chain (rtx from, rtx to)\n \t      break;\n \n \t    case NOTE_INSN_EPILOGUE_BEG:\n-\t      emit_note_copy (insn);\n+\t      emit_note_copy (as_a <rtx_note *> (insn));\n \t      break;\n \n \t    default:"}, {"sha": "a254f9a99146360646f336e66c078d5c4bdf49ff", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -3852,15 +3852,15 @@ make_call_insn_raw (rtx pattern)\n \n /* Like `make_insn_raw' but make a NOTE instead of an insn.  */\n \n-static rtx\n+static rtx_note *\n make_note_raw (enum insn_note subtype)\n {\n   /* Some notes are never created this way at all.  These notes are\n      only created by patching out insns.  */\n   gcc_assert (subtype != NOTE_INSN_DELETED_LABEL\n \t      && subtype != NOTE_INSN_DELETED_DEBUG_LABEL);\n \n-  rtx note = rtx_alloc (NOTE);\n+  rtx_note *note = as_a <rtx_note *> (rtx_alloc (NOTE));\n   INSN_UID (note) = cur_insn_uid++;\n   NOTE_KIND (note) = subtype;\n   BLOCK_FOR_INSN (note) = NULL;\n@@ -4557,10 +4557,10 @@ note_outside_basic_block_p (enum insn_note subtype, bool on_bb_boundary_p)\n \n /* Emit a note of subtype SUBTYPE after the insn AFTER.  */\n \n-rtx\n+rtx_note *\n emit_note_after (enum insn_note subtype, rtx after)\n {\n-  rtx note = make_note_raw (subtype);\n+  rtx_note *note = make_note_raw (subtype);\n   basic_block bb = BARRIER_P (after) ? NULL : BLOCK_FOR_INSN (after);\n   bool on_bb_boundary_p = (bb != NULL && BB_END (bb) == after);\n \n@@ -4573,10 +4573,10 @@ emit_note_after (enum insn_note subtype, rtx after)\n \n /* Emit a note of subtype SUBTYPE before the insn BEFORE.  */\n \n-rtx\n+rtx_note *\n emit_note_before (enum insn_note subtype, rtx before)\n {\n-  rtx note = make_note_raw (subtype);\n+  rtx_note *note = make_note_raw (subtype);\n   basic_block bb = BARRIER_P (before) ? NULL : BLOCK_FOR_INSN (before);\n   bool on_bb_boundary_p = (bb != NULL && BB_HEAD (bb) == before);\n \n@@ -5023,11 +5023,11 @@ emit_barrier (void)\n \n /* Emit a copy of note ORIG.  */\n \n-rtx\n-emit_note_copy (rtx orig)\n+rtx_note *\n+emit_note_copy (rtx_note *orig)\n {\n   enum insn_note kind = (enum insn_note) NOTE_KIND (orig);\n-  rtx note = make_note_raw (kind);\n+  rtx_note *note = make_note_raw (kind);\n   NOTE_DATA (note) = NOTE_DATA (orig);\n   add_insn (note);\n   return note;\n@@ -5036,10 +5036,10 @@ emit_note_copy (rtx orig)\n /* Make an insn of code NOTE or type NOTE_NO\n    and add it to the end of the doubly-linked list.  */\n \n-rtx\n+rtx_note *\n emit_note (enum insn_note kind)\n {\n-  rtx note = make_note_raw (kind);\n+  rtx_note *note = make_note_raw (kind);\n   add_insn (note);\n   return note;\n }"}, {"sha": "f1920e5530139a36a035191af00cf204997cfd6f", "filename": "gcc/except.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -2458,10 +2458,10 @@ add_call_site (rtx landing_pad, int action, int section)\n   return call_site_base + crtl->eh.call_site_record_v[section]->length () - 1;\n }\n \n-static rtx\n+static rtx_note *\n emit_note_eh_region_end (rtx insn)\n {\n-  rtx next = NEXT_INSN (insn);\n+  rtx_insn *next = NEXT_INSN (insn);\n \n   /* Make sure we do not split a call and its corresponding\n      CALL_ARG_LOCATION note.  */\n@@ -2479,7 +2479,8 @@ emit_note_eh_region_end (rtx insn)\n static unsigned int\n convert_to_eh_region_ranges (void)\n {\n-  rtx insn, iter, note;\n+  rtx insn, iter;\n+  rtx_note *note;\n   action_hash_type ar_hash (31);\n   int last_action = -3;\n   rtx last_action_insn = NULL_RTX;"}, {"sha": "4795473731da3dae608056d8dd49d9d7eb8c1bc1", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -1631,7 +1631,7 @@ change_scope (rtx orig_insn, tree s1, tree s2)\n   s = s1;\n   while (s != com)\n     {\n-      rtx note = emit_note_before (NOTE_INSN_BLOCK_END, insn);\n+      rtx_note *note = emit_note_before (NOTE_INSN_BLOCK_END, insn);\n       NOTE_BLOCK (note) = s;\n       s = BLOCK_SUPERCONTEXT (s);\n     }\n@@ -1653,7 +1653,8 @@ static void\n reemit_insn_block_notes (void)\n {\n   tree cur_block = DECL_INITIAL (cfun->decl);\n-  rtx insn, note;\n+  rtx_insn *insn;\n+  rtx_note *note;\n \n   insn = get_insns ();\n   for (; insn; insn = NEXT_INSN (insn))\n@@ -1666,7 +1667,7 @@ reemit_insn_block_notes (void)\n           for (tree s = cur_block; s != DECL_INITIAL (cfun->decl);\n                s = BLOCK_SUPERCONTEXT (s))\n             {\n-              rtx note = emit_note_before (NOTE_INSN_BLOCK_END, insn);\n+              rtx_note *note = emit_note_before (NOTE_INSN_BLOCK_END, insn);\n               NOTE_BLOCK (note) = s;\n               note = emit_note_after (NOTE_INSN_BLOCK_BEG, insn);\n               NOTE_BLOCK (note) = s;"}, {"sha": "575de1be05d182a5a625bcb722cf2a8600452dcd", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -286,7 +286,7 @@ struct GTY(()) rtl_data {\n   struct frame_space *frame_space_list;\n \n   /* Place after which to insert the tail_recursion_label if we need one.  */\n-  rtx x_stack_check_probe_note;\n+  rtx_note *x_stack_check_probe_note;\n \n   /* Location at which to save the argument pointer if it will need to be\n      referenced.  There are two cases where this is done: if nonlocal gotos"}, {"sha": "4f4e4eb6c6765fca1a04dd3be974fe638a7337ea", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -7610,7 +7610,7 @@ sched_extend_bb (void)\n \t  /* Don't emit a NOTE if it would end up before a BARRIER.  */\n \t  && !BARRIER_P (NEXT_INSN (end))))\n     {\n-      rtx note = emit_note_after (NOTE_INSN_DELETED, end);\n+      rtx_note *note = emit_note_after (NOTE_INSN_DELETED, end);\n       /* Make note appear outside BB.  */\n       set_block_for_insn (note, NULL);\n       SET_BB_END (EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb) = end;"}, {"sha": "faa3e1f9ed8a604d57abbc63e8cda58e83360e51", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -2810,7 +2810,8 @@ compensate_edge (edge e)\n     }\n   else\n     {\n-      rtx seq, after;\n+      rtx_insn *seq;\n+      rtx_note *after;\n \n       current_block = NULL;\n       start_sequence ();"}, {"sha": "9e0f1e5a6dd41327346c51625f388d116f0b8732", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -4573,7 +4573,8 @@ reload_as_needed (int live_known)\n #if defined (AUTO_INC_DEC)\n   int i;\n #endif\n-  rtx x, marker;\n+  rtx x;\n+  rtx_note *marker;\n \n   memset (spill_reg_rtx, 0, sizeof spill_reg_rtx);\n   memset (spill_reg_store, 0, sizeof spill_reg_store);"}, {"sha": "6d9defebce2819663197faaa81e6b2f202eeea16", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -2393,7 +2393,7 @@ extern rtx emit_debug_insn_before_noloc (rtx, rtx);\n extern rtx emit_debug_insn_before_setloc (rtx, rtx, int);\n extern rtx emit_barrier_before (rtx);\n extern rtx emit_label_before (rtx, rtx);\n-extern rtx emit_note_before (enum insn_note, rtx);\n+extern rtx_note *emit_note_before (enum insn_note, rtx);\n extern rtx emit_insn_after (rtx, rtx);\n extern rtx emit_insn_after_noloc (rtx, rtx, basic_block);\n extern rtx emit_insn_after_setloc (rtx, rtx, int);\n@@ -2408,16 +2408,16 @@ extern rtx emit_debug_insn_after_noloc (rtx, rtx);\n extern rtx emit_debug_insn_after_setloc (rtx, rtx, int);\n extern rtx emit_barrier_after (rtx);\n extern rtx emit_label_after (rtx, rtx);\n-extern rtx emit_note_after (enum insn_note, rtx);\n+extern rtx_note *emit_note_after (enum insn_note, rtx);\n extern rtx emit_insn (rtx);\n extern rtx emit_debug_insn (rtx);\n extern rtx emit_jump_insn (rtx);\n extern rtx emit_call_insn (rtx);\n extern rtx emit_label (rtx);\n extern rtx emit_jump_table_data (rtx);\n extern rtx emit_barrier (void);\n-extern rtx emit_note (enum insn_note);\n-extern rtx emit_note_copy (rtx);\n+extern rtx_note *emit_note (enum insn_note);\n+extern rtx_note *emit_note_copy (rtx_note *);\n extern rtx gen_clobber (rtx);\n extern rtx emit_clobber (rtx);\n extern rtx gen_use (rtx);"}, {"sha": "f147ce255be66d42e4951bada188303df38c614e", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -126,7 +126,7 @@ static struct\n } nop_pool = { NULL, 0, 0 };\n \n /* The pool for basic block notes.  */\n-static rtx_vec_t bb_note_pool;\n+static vec<rtx_note *> bb_note_pool;\n \n /* A NOP pattern used to emit placeholder insns.  */\n rtx nop_pattern = NULL_RTX;\n@@ -4976,14 +4976,14 @@ return_bb_to_pool (basic_block bb)\n }\n \n /* Get a bb_note from pool or return NULL_RTX if pool is empty.  */\n-static rtx\n+static rtx_note *\n get_bb_note_from_pool (void)\n {\n   if (bb_note_pool.is_empty ())\n-    return NULL_RTX;\n+    return NULL;\n   else\n     {\n-      rtx note = bb_note_pool.pop ();\n+      rtx_note *note = bb_note_pool.pop ();\n \n       SET_PREV_INSN (note) = NULL_RTX;\n       SET_NEXT_INSN (note) = NULL_RTX;\n@@ -5341,7 +5341,7 @@ static basic_block\n sel_create_basic_block (void *headp, void *endp, basic_block after)\n {\n   basic_block new_bb;\n-  insn_t new_bb_note;\n+  rtx_note *new_bb_note;\n \n   gcc_assert (flag_sel_sched_pipelining_outer_loops\n               || !last_added_blocks.exists ());"}, {"sha": "a458380a0ee549e524a62af95e8816db9f453cdd", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=66e8df5354f2d9c705d5d8ae461cc76aaf0d1b0c", "patch": "@@ -8589,7 +8589,8 @@ emit_note_insn_var_location (variable_def **varp, emit_note_data *data)\n   rtx insn = data->insn;\n   enum emit_note_where where = data->where;\n   variable_table_type *vars = data->vars;\n-  rtx note, note_vl;\n+  rtx_note *note;\n+  rtx note_vl;\n   int i, j, n_var_parts;\n   bool complete;\n   enum var_init_status initialized = VAR_INIT_STATUS_UNINITIALIZED;\n@@ -9135,7 +9136,8 @@ emit_notes_in_bb (basic_block bb, dataflow_set *set)\n \t    dataflow_set_clear_at_call (set);\n \t    emit_notes_for_changes (insn, EMIT_NOTE_AFTER_CALL_INSN, set->vars);\n \t    {\n-\t      rtx arguments = mo->u.loc, *p = &arguments, note;\n+\t      rtx arguments = mo->u.loc, *p = &arguments;\n+\t      rtx_note *note;\n \t      while (*p)\n \t\t{\n \t\t  XEXP (XEXP (*p, 0), 1)"}]}