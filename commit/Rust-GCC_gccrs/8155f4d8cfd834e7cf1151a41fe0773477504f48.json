{"sha": "8155f4d8cfd834e7cf1151a41fe0773477504f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1NWY0ZDhjZmQ4MzRlN2NmMTE1MWE0MWZlMDc3MzQ3NzUwNGY0OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-16T09:21:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-16T09:21:04Z"}, "message": "re PR tree-optimization/68892 (Excessive dead loads produced by BB vectorization)\n\n2015-12-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68892\n\t* tree-vect-slp.c (vect_analyze_slp_cost_1): Properly compute\n\tcost for permuted loads.\n\n\t* gcc.dg/vect/bb-slp-pr68892.c: New testcase.\n\nFrom-SVN: r231674", "tree": {"sha": "f07259795a95fb33927fe7bbf78d27801c03abe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f07259795a95fb33927fe7bbf78d27801c03abe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8155f4d8cfd834e7cf1151a41fe0773477504f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8155f4d8cfd834e7cf1151a41fe0773477504f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8155f4d8cfd834e7cf1151a41fe0773477504f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8155f4d8cfd834e7cf1151a41fe0773477504f48/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ec0963c81b2023596d1c9913571c2c462f06796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec0963c81b2023596d1c9913571c2c462f06796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec0963c81b2023596d1c9913571c2c462f06796"}], "stats": {"total": 75, "additions": 48, "deletions": 27}, "files": [{"sha": "6450d52b0c2c1688dd230f7e987fbd9e7027eb5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8155f4d8cfd834e7cf1151a41fe0773477504f48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8155f4d8cfd834e7cf1151a41fe0773477504f48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8155f4d8cfd834e7cf1151a41fe0773477504f48", "patch": "@@ -1,3 +1,9 @@\n+2015-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68892\n+\t* tree-vect-slp.c (vect_analyze_slp_cost_1): Properly compute\n+\tcost for permuted loads.\n+\n 2015-12-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/65980"}, {"sha": "7a3c5e469957494a18f732b8bda4d4e039798f61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8155f4d8cfd834e7cf1151a41fe0773477504f48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8155f4d8cfd834e7cf1151a41fe0773477504f48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8155f4d8cfd834e7cf1151a41fe0773477504f48", "patch": "@@ -1,3 +1,8 @@\n+2015-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68892\n+\t* gcc.dg/vect/bb-slp-pr68892.c: New testcase.\n+\n 2015-12-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/65980"}, {"sha": "648fe48146782a3f5f9f2f6a7773c2ce660ea849", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr68892.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8155f4d8cfd834e7cf1151a41fe0773477504f48/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr68892.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8155f4d8cfd834e7cf1151a41fe0773477504f48/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr68892.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr68892.c?ref=8155f4d8cfd834e7cf1151a41fe0773477504f48", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fvect-cost-model=dynamic\" } */\n+\n+double a[128][128];\n+double b[128];\n+\n+void foo(void)\n+{\n+  b[0] = a[0][0];\n+  b[1] = a[1][0];\n+  b[2] = a[2][0];\n+  b[3] = a[3][0];\n+}\n+\n+/* { dg-final { scan-tree-dump \"not profitable\" \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times \"Basic block will be vectorized\" 0 \"slp2\" } } */"}, {"sha": "f57c859cd4ad1cc7008acb3b31520e9fb7256d4d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8155f4d8cfd834e7cf1151a41fe0773477504f48/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8155f4d8cfd834e7cf1151a41fe0773477504f48/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=8155f4d8cfd834e7cf1151a41fe0773477504f48", "patch": "@@ -1402,10 +1402,9 @@ vect_analyze_slp_cost_1 (slp_instance instance, slp_tree node,\n {\n   unsigned i, j;\n   slp_tree child;\n-  gimple *stmt, *s;\n+  gimple *stmt;\n   stmt_vec_info stmt_info;\n   tree lhs;\n-  unsigned group_size = SLP_INSTANCE_GROUP_SIZE (instance);\n \n   /* Recurse down the SLP tree.  */\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n@@ -1424,44 +1423,39 @@ vect_analyze_slp_cost_1 (slp_instance instance, slp_tree node,\n \t\t\t       node, prologue_cost_vec, body_cost_vec);\n       else\n \t{\n-\t  int i;\n \t  gcc_checking_assert (DR_IS_READ (STMT_VINFO_DATA_REF (stmt_info)));\n-\t  /* If the load is permuted then the alignment is determined by\n-\t     the first group element not by the first scalar stmt DR.  */\n \t  if (SLP_TREE_LOAD_PERMUTATION (node).exists ())\n \t    {\n+\t      /* If the load is permuted then the alignment is determined by\n+\t\t the first group element not by the first scalar stmt DR.  */\n \t      stmt = GROUP_FIRST_ELEMENT (stmt_info);\n \t      stmt_info = vinfo_for_stmt (stmt);\n+\t      /* Record the cost for the permutation.  */\n+\t      record_stmt_cost (body_cost_vec, ncopies_for_cost, vec_perm,\n+\t\t\t\tstmt_info, 0, vect_body);\n+\t      /* And adjust the number of loads performed.  */\n+\t      unsigned nunits\n+\t\t= TYPE_VECTOR_SUBPARTS (STMT_VINFO_VECTYPE (stmt_info));\n+\t      ncopies_for_cost\n+\t        = (GROUP_SIZE (stmt_info) - GROUP_GAP (stmt_info)\n+\t\t   + nunits - 1) / nunits;\n+\t      ncopies_for_cost *= SLP_INSTANCE_UNROLLING_FACTOR (instance);\n \t    }\n+\t  /* Record the cost for the vector loads.  */\n \t  vect_model_load_cost (stmt_info, ncopies_for_cost, false,\n \t\t\t\tnode, prologue_cost_vec, body_cost_vec);\n-\t  /* If the load is permuted record the cost for the permutation.\n-\t     ???  Loads from multiple chains are let through here only\n-\t     for a single special case involving complex numbers where\n-\t     in the end no permutation is necessary.  */\n-\t  FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, s)\n-\t    if ((STMT_VINFO_GROUP_FIRST_ELEMENT (vinfo_for_stmt (s))\n-\t\t == STMT_VINFO_GROUP_FIRST_ELEMENT (stmt_info))\n-\t\t&& vect_get_place_in_interleaving_chain\n-\t\t     (s, STMT_VINFO_GROUP_FIRST_ELEMENT (stmt_info)) != i)\n-\t      {\n-\t\trecord_stmt_cost (body_cost_vec, group_size, vec_perm,\n-\t\t\t\t  stmt_info, 0, vect_body);\n-\t\tbreak;\n-\t      }\n \t}\n+      return;\n     }\n-  else\n+\n+  record_stmt_cost (body_cost_vec, ncopies_for_cost, vector_stmt,\n+\t\t    stmt_info, 0, vect_body);\n+  if (SLP_TREE_TWO_OPERATORS (node))\n     {\n       record_stmt_cost (body_cost_vec, ncopies_for_cost, vector_stmt,\n \t\t\tstmt_info, 0, vect_body);\n-      if (SLP_TREE_TWO_OPERATORS (node))\n-\t{\n-\t  record_stmt_cost (body_cost_vec, ncopies_for_cost, vector_stmt,\n-\t\t\t    stmt_info, 0, vect_body);\n-\t  record_stmt_cost (body_cost_vec, ncopies_for_cost, vec_perm,\n-\t\t\t    stmt_info, 0, vect_body);\n-\t}\n+      record_stmt_cost (body_cost_vec, ncopies_for_cost, vec_perm,\n+\t\t\tstmt_info, 0, vect_body);\n     }\n \n   /* Push SLP node def-type to stmts.  */"}]}