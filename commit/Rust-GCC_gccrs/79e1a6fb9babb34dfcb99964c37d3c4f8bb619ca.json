{"sha": "79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "node_id": "C_kwDOANBUbNoAKDc5ZTFhNmZiOWJhYmIzNGRmY2I5OTk2NGMzN2QzYzRmOGJiNjE5Y2E", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-04-12T21:23:18Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-12T21:23:18Z"}, "message": "libgccjit: Add function to hide stderr logs [PR104073]\n\ngcc/jit/\n\tPR jit/104073\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_23): New ABI tag.\n\t* docs/topics/contexts.rst: Add documentation for the new\n\tfunction gcc_jit_context_set_bool_print_errors_to_stderr.\n\t* jit-common.h: New enum value\n\t(INNER_BOOL_OPTION_PRINT_ERRORS_TO_STDERR).\n\t* jit-recording.cc: Handle the new option\n\tINNER_BOOL_OPTION_PRINT_ERRORS_TO_STDERR.\n\t* libgccjit.cc: New function\n\t(gcc_jit_context_set_bool_print_errors_to_stderr).\n\t* libgccjit.h: New function\n\t(gcc_jit_context_set_bool_print_errors_to_stderr).\n\t* libgccjit.map (LIBGCCJIT_ABI_23): New ABI tag.", "tree": {"sha": "6aeb43e3c82280d3187b1fcfb85b69137b89a48f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6aeb43e3c82280d3187b1fcfb85b69137b89a48f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5780ff348ad4430383fd67c6f0c572d8c3e721ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5780ff348ad4430383fd67c6f0c572d8c3e721ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5780ff348ad4430383fd67c6f0c572d8c3e721ad"}], "stats": {"total": 1798, "additions": 953, "deletions": 845}, "files": [{"sha": "9b5fc813d0a02c0e1f0a2da5d04ce3a09067b9ce", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 871, "deletions": 835, "changes": 1706, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca"}, {"sha": "3c948ef19fe711e39ca2b444e03641ca416c1c24", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "patch": "@@ -352,3 +352,12 @@ value from one type to another:\n register name of a variable:\n \n   * :func:`gcc_jit_lvalue_set_register_name`\n+\n+.. _LIBGCCJIT_ABI_23:\n+\n+``LIBGCCJIT_ABI_23``\n+--------------------\n+``LIBGCCJIT_ABI_23`` covers the addition of an API entrypoint to hide stderr\n+logs:\n+\n+  * :func:`gcc_jit_context_set_bool_print_errors_to_stderr`"}, {"sha": "dfbe968e127ee2880010fee909ac86d595f19adc", "filename": "gcc/jit/docs/topics/contexts.rst", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst?ref=79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "patch": "@@ -489,6 +489,21 @@ Boolean options\n \n       #ifdef LIBGCCJIT_HAVE_gcc_jit_context_set_bool_use_external_driver\n \n+.. function:: void \\\n+              gcc_jit_context_set_bool_print_errors_to_stderr (gcc_jit_context *ctxt, \\\n+                                                                 int enabled)\n+\n+   By default, libgccjit will print errors to stderr.\n+\n+   This entrypoint can be used to disable the printing.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_23`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_context_set_bool_print_errors_to_stderr\n+\n Integer options\n ***************\n "}, {"sha": "3ff7447fbf3f6bb74ac49317aab78d122e95b6df", "filename": "gcc/jit/jit-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Fjit-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Fjit-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-common.h?ref=79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "patch": "@@ -198,6 +198,7 @@ enum inner_bool_option\n {\n   INNER_BOOL_OPTION_ALLOW_UNREACHABLE_BLOCKS,\n   INNER_BOOL_OPTION_USE_EXTERNAL_DRIVER,\n+  INNER_BOOL_OPTION_PRINT_ERRORS_TO_STDERR,\n \n   NUM_INNER_BOOL_OPTIONS\n };"}, {"sha": "8d13ddf59c755c147437e51f771f5ad02c496c62", "filename": "gcc/jit/jit-recording.cc", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Fjit-recording.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Fjit-recording.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.cc?ref=79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "patch": "@@ -592,6 +592,7 @@ recording::context::context (context *parent_ctxt)\n       memset (m_int_options, 0, sizeof (m_int_options));\n       memset (m_bool_options, 0, sizeof (m_bool_options));\n       memset (m_inner_bool_options, 0, sizeof (m_inner_bool_options));\n+      m_inner_bool_options[INNER_BOOL_OPTION_PRINT_ERRORS_TO_STDERR] = true;\n     }\n \n   memset (m_basic_types, 0, sizeof (m_basic_types));\n@@ -1571,15 +1572,20 @@ recording::context::add_error_va (location *loc, const char *fmt, va_list ap)\n   if (!ctxt_progname)\n     ctxt_progname = \"libgccjit.so\";\n \n-  if (loc)\n-    fprintf (stderr, \"%s: %s: error: %s\\n\",\n-\t     ctxt_progname,\n-\t     loc->get_debug_string (),\n-\t     errmsg);\n-  else\n-    fprintf (stderr, \"%s: error: %s\\n\",\n-\t     ctxt_progname,\n-\t     errmsg);\n+  bool print_errors_to_stderr =\n+      get_inner_bool_option (INNER_BOOL_OPTION_PRINT_ERRORS_TO_STDERR);\n+  if (print_errors_to_stderr)\n+  {\n+    if (loc)\n+      fprintf (stderr, \"%s: %s: error: %s\\n\",\n+\t       ctxt_progname,\n+\t       loc->get_debug_string (),\n+\t       errmsg);\n+    else\n+      fprintf (stderr, \"%s: error: %s\\n\",\n+\t       ctxt_progname,\n+\t       errmsg);\n+  }\n \n   if (!m_error_count)\n     {\n@@ -1707,7 +1713,8 @@ static const char * const\n static const char * const\n  inner_bool_option_reproducer_strings[NUM_INNER_BOOL_OPTIONS] = {\n   \"gcc_jit_context_set_bool_allow_unreachable_blocks\",\n-  \"gcc_jit_context_set_bool_use_external_driver\"\n+  \"gcc_jit_context_set_bool_use_external_driver\",\n+  \"gcc_jit_context_set_bool_print_errors_to_stderr\",\n };\n \n /* Write the current value of all options to the log file (if any).  */"}, {"sha": "1029ca4dc24856bed56692fd6593271ef759fcfb", "filename": "gcc/jit/libgccjit.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Flibgccjit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Flibgccjit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.cc?ref=79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "patch": "@@ -3495,6 +3495,23 @@ gcc_jit_context_set_bool_allow_unreachable_blocks (gcc_jit_context *ctxt,\n     bool_value);\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::context::set_inner_bool_option method in\n+   jit-recording.cc.  */\n+\n+void\n+gcc_jit_context_set_bool_print_errors_to_stderr (gcc_jit_context *ctxt,\n+\t\t\t\t\t\t int enabled)\n+{\n+  RETURN_IF_FAIL (ctxt, NULL, NULL, \"NULL context\");\n+  JIT_LOG_FUNC (ctxt->get_logger ());\n+  ctxt->set_inner_bool_option (\n+    gcc::jit::INNER_BOOL_OPTION_PRINT_ERRORS_TO_STDERR,\n+    enabled);\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the"}, {"sha": "6c663b168cefb8646085409ad74620d427929788", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "patch": "@@ -293,6 +293,24 @@ gcc_jit_context_set_bool_allow_unreachable_blocks (gcc_jit_context *ctxt,\n    tested for with #ifdef.  */\n #define LIBGCCJIT_HAVE_gcc_jit_context_set_bool_allow_unreachable_blocks\n \n+/* By default, libgccjit will print errors to stderr.\n+\n+   This option can be used to disable the printing.\n+\n+   This entrypoint was added in LIBGCCJIT_ABI_23; you can test for\n+   its presence using\n+     #ifdef LIBGCCJIT_HAVE_gcc_jit_context_set_bool_print_errors_to_stderr\n+*/\n+\n+extern void\n+gcc_jit_context_set_bool_print_errors_to_stderr (gcc_jit_context *ctxt,\n+\t\t\t\t\t\t int enabled);\n+\n+/* Pre-canned feature macro to indicate the presence of\n+   gcc_jit_context_set_bool_print_errors_to_stderr.  This can be\n+   tested for with #ifdef.  */\n+#define LIBGCCJIT_HAVE_gcc_jit_context_set_bool_print_errors_to_stderr\n+\n /* Implementation detail:\n    libgccjit internally generates assembler, and uses \"driver\" code\n    for converting it to other formats (e.g. shared libraries)."}, {"sha": "7370603074c9b053b6f7aac8e4a5514f5d979ac4", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "patch": "@@ -260,3 +260,8 @@ LIBGCCJIT_ABI_22 {\n   global:\n     gcc_jit_lvalue_set_register_name;\n } LIBGCCJIT_ABI_21;\n+\n+LIBGCCJIT_ABI_23 {\n+  global:\n+    gcc_jit_context_set_bool_print_errors_to_stderr;\n+} LIBGCCJIT_ABI_22;"}]}