{"sha": "7f0ce82a4c033b78ec5131a27bac87271bb95185", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwY2U4MmE0YzAzM2I3OGVjNTEzMWEyN2JhYzg3MjcxYmI5NTE4NQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-10-26T11:42:18Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-10-26T11:43:26Z"}, "message": "PR tree-optimization/97546 Bail out of find_bswap_or_nop on non-INTEGER_CST sizes\n\nThis patch fixes the ICE in the PR by bailing out of find_bswap_or_nop\non poly_int sizes.\nI don't think it intends to handle them and from my reading of the code\nit's the most appropriate place to reject them\nhere rather than in the callers.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\ngcc/\n\tPR tree-optimization/97546\n\t* gimple-ssa-store-merging.c (find_bswap_or_nop): Return NULL if\n\ttype is not INTEGER_CST.\n\ngcc/testsuite/\n\tPR tree-optimization/97546\n\t* gcc.target/aarch64/sve/acle/general/pr97546.c: New test.", "tree": {"sha": "cb08161766a3e26845b4b373e02107b49d60df99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb08161766a3e26845b4b373e02107b49d60df99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f0ce82a4c033b78ec5131a27bac87271bb95185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0ce82a4c033b78ec5131a27bac87271bb95185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0ce82a4c033b78ec5131a27bac87271bb95185", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0ce82a4c033b78ec5131a27bac87271bb95185/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "605c2a393d3a2db86454a70fd7c9467db434060c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605c2a393d3a2db86454a70fd7c9467db434060c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605c2a393d3a2db86454a70fd7c9467db434060c"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "6089faf7ac87baca96b14d0d8ed248f41a74a264", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0ce82a4c033b78ec5131a27bac87271bb95185/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0ce82a4c033b78ec5131a27bac87271bb95185/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=7f0ce82a4c033b78ec5131a27bac87271bb95185", "patch": "@@ -851,12 +851,16 @@ find_bswap_or_nop_finalize (struct symbolic_number *n, uint64_t *cmpxchg,\n gimple *\n find_bswap_or_nop (gimple *stmt, struct symbolic_number *n, bool *bswap)\n {\n+  tree type_size = TYPE_SIZE_UNIT (gimple_expr_type (stmt));\n+  if (!tree_fits_uhwi_p (type_size))\n+    return NULL;\n+\n   /* The last parameter determines the depth search limit.  It usually\n      correlates directly to the number n of bytes to be touched.  We\n      increase that number by 2 * (log2(n) + 1) here in order to also\n      cover signed -> unsigned conversions of the src operand as can be seen\n      in libgcc, and for initial shift/and operation of the src operand.  */\n-  int limit = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (gimple_expr_type (stmt)));\n+  int limit = tree_to_uhwi (type_size);\n   limit += 2 * (1 + (int) ceil_log2 ((unsigned HOST_WIDE_INT) limit));\n   gimple *ins_stmt = find_bswap_or_nop_1 (stmt, n, limit);\n "}, {"sha": "25707cd280400e00fe152beb7ccaea144418709e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/pr97546.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0ce82a4c033b78ec5131a27bac87271bb95185/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr97546.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0ce82a4c033b78ec5131a27bac87271bb95185/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr97546.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr97546.c?ref=7f0ce82a4c033b78ec5131a27bac87271bb95185", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options \"-O2\" } */\n+\n+#include <arm_sve.h>\n+\n+static svbool_t visinf_vo_vf(svfloat32_t d)\n+{\n+  return svcmpeq_n_f32 (svptrue_b8 (),\n+                        svabs_f32_x (svptrue_b8 (), d),\n+                        __builtin_inff ());\n+}\n+\n+const svint32_t _ZGVsNxv_ilogbf(svfloat32_t d)\n+{\n+  svint32_t e = svreinterpret_s32_f32 (svdup_n_f32 (0.0f));\n+  e = svsel_s32 (svcmpne_f32 (svptrue_b8(), d, d),\n+                 svdup_n_s32 (2147483647),\n+                 e);\n+  e = svsel_s32 (visinf_vo_vf (d),\n+                 svdup_n_s32 (0x7fffffff),\n+                 e);\n+  return e;\n+}"}]}