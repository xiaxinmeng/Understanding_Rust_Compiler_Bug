{"sha": "1d65c80d76996f49fce110ad763a1393a49536f7", "node_id": "C_kwDOANBUbNoAKDFkNjVjODBkNzY5OTZmNDlmY2UxMTBhZDc2M2ExMzkzYTQ5NTM2Zjc", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-08-16T23:41:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-04T08:45:02Z"}, "message": "[Ada] Improve checking for invalid index values when accessing array elements\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Indexed_Component): The two improvements\n\tdescribed above.", "tree": {"sha": "9c13067d6aed9791e4e63ddc9d012451a1b0bf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c13067d6aed9791e4e63ddc9d012451a1b0bf08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d65c80d76996f49fce110ad763a1393a49536f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d65c80d76996f49fce110ad763a1393a49536f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d65c80d76996f49fce110ad763a1393a49536f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d65c80d76996f49fce110ad763a1393a49536f7/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d9ef7747b2dc439f7456303f0784faf5cdb1d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d9ef7747b2dc439f7456303f0784faf5cdb1d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d9ef7747b2dc439f7456303f0784faf5cdb1d3"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "a0ce8fd140dd34186fd78b83d7f325304809345f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d65c80d76996f49fce110ad763a1393a49536f7/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d65c80d76996f49fce110ad763a1393a49536f7/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=1d65c80d76996f49fce110ad763a1393a49536f7", "patch": "@@ -7255,11 +7255,15 @@ package body Exp_Ch4 is\n       --  Generate index and validity checks\n \n       declare\n-         Dims_Checked : Dimension_Set (Dimensions => Number_Dimensions (T));\n+         Dims_Checked : Dimension_Set (Dimensions =>\n+                                         (if Is_Array_Type (T)\n+                                          then Number_Dimensions (T)\n+                                          else 1));\n          --  Dims_Checked is used to avoid generating two checks (one in\n          --  Generate_Index_Checks, one in Apply_Subscript_Validity_Checks)\n          --  for the same index value in cases where the index check eliminates\n-         --  the need for the validity check.\n+         --  the need for the validity check. The Is_Array_Type test avoids\n+         --  cascading errors.\n \n       begin\n          Generate_Index_Checks (N, Checks_Generated => Dims_Checked);\n@@ -7284,6 +7288,27 @@ package body Exp_Ch4 is\n                --  If Validity_Check_Subscripts is True then we need to\n                --  ensure validity, so we adjust Dims_Checked accordingly.\n                Dims_Checked.Elements := (others => False);\n+\n+            elsif Is_Array_Type (T) then\n+               --  We are only adding extra validity checks here to\n+               --  deal with uninitialized variables (but this includes\n+               --  assigning one uninitialized variable to another). Other\n+               --  ways of producing invalid objects imply erroneousness, so\n+               --  the compiler can do whatever it wants for those cases.\n+               --  If an index type has the Default_Value aspect specified,\n+               --  then we don't have to worry about the possibility of an\n+               --  uninitialized variable, so no need for these extra\n+               --  validity checks.\n+\n+               declare\n+                  Idx : Node_Id := First_Index (T);\n+               begin\n+                  for No_Check_Needed of Dims_Checked.Elements loop\n+                     No_Check_Needed := No_Check_Needed\n+                       or else Has_Aspect (Etype (Idx), Aspect_Default_Value);\n+                     Next_Index (Idx);\n+                  end loop;\n+               end;\n             end if;\n \n             Apply_Subscript_Validity_Checks"}]}