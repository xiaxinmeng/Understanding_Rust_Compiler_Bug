{"sha": "0c942f3edab10854aecdf92e8bd79ca6bc33bc66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5NDJmM2VkYWIxMDg1NGFlY2RmOTJlOGJkNzljYTZiYzMzYmM2Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-03-10T17:35:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-03-10T17:35:54Z"}, "message": "PR c++/79960 - alias templates and partial ordering\n\n\t* pt.c (comp_template_args): Add partial_order parm.\n\t(template_args_equal): Likewise.\n\t(comp_template_args_porder): New.\n\t(get_partial_spec_bindings): Use it.\n\nFrom-SVN: r246042", "tree": {"sha": "a7d2c35e72397be1b3912093862c526b9c8df377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7d2c35e72397be1b3912093862c526b9c8df377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c942f3edab10854aecdf92e8bd79ca6bc33bc66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c942f3edab10854aecdf92e8bd79ca6bc33bc66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c942f3edab10854aecdf92e8bd79ca6bc33bc66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c942f3edab10854aecdf92e8bd79ca6bc33bc66/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e2c69b4893c96b373a55b6850dde4eafa484e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2c69b4893c96b373a55b6850dde4eafa484e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2c69b4893c96b373a55b6850dde4eafa484e46"}], "stats": {"total": 68, "additions": 59, "deletions": 9}, "files": [{"sha": "92b430d33518fd2c3dc65e253de872cc7377e998", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c942f3edab10854aecdf92e8bd79ca6bc33bc66/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c942f3edab10854aecdf92e8bd79ca6bc33bc66/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c942f3edab10854aecdf92e8bd79ca6bc33bc66", "patch": "@@ -1,3 +1,11 @@\n+2017-03-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/79960 - alias templates and partial ordering\n+\t* pt.c (comp_template_args): Add partial_order parm.\n+\t(template_args_equal): Likewise.\n+\t(comp_template_args_porder): New.\n+\t(get_partial_spec_bindings): Use it.\n+\n 2017-03-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/79967"}, {"sha": "5be5dfe246d0a9534661b7dc88fa295f382e44ed", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c942f3edab10854aecdf92e8bd79ca6bc33bc66/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c942f3edab10854aecdf92e8bd79ca6bc33bc66/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0c942f3edab10854aecdf92e8bd79ca6bc33bc66", "patch": "@@ -6208,8 +6208,8 @@ extern int is_specialization_of\t\t\t(tree, tree);\n extern bool is_specialization_of_friend\t\t(tree, tree);\n extern tree get_pattern_parm\t\t\t(tree, tree);\n extern int comp_template_args\t\t\t(tree, tree, tree * = NULL,\n-\t\t\t\t\t\t tree * = NULL);\n-extern int template_args_equal                  (tree, tree);\n+\t\t\t\t\t\t tree * = NULL, bool = false);\n+extern int template_args_equal                  (tree, tree, bool = false);\n extern tree maybe_process_partial_specialization (tree);\n extern tree most_specialized_instantiation\t(tree);\n extern void print_candidates\t\t\t(tree);"}, {"sha": "b8ce9fedf429f25ecc3d97fc6b59c5604b8495d2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c942f3edab10854aecdf92e8bd79ca6bc33bc66/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c942f3edab10854aecdf92e8bd79ca6bc33bc66/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0c942f3edab10854aecdf92e8bd79ca6bc33bc66", "patch": "@@ -8240,7 +8240,7 @@ coerce_innermost_template_parms (tree parms,\n /* Returns 1 if template args OT and NT are equivalent.  */\n \n int\n-template_args_equal (tree ot, tree nt)\n+template_args_equal (tree ot, tree nt, bool partial_order /* = false */)\n {\n   if (nt == ot)\n     return 1;\n@@ -8288,8 +8288,13 @@ template_args_equal (tree ot, tree nt)\n \t template argument; we need them to be distinct so that we\n \t substitute into the specialization arguments at instantiation\n \t time.  And aliases can't be equivalent without being ==, so\n-\t we don't need to look any deeper.  */\n-      if (TYPE_ALIAS_P (nt) || TYPE_ALIAS_P (ot))\n+\t we don't need to look any deeper.\n+\n+         During partial ordering, however, we need to treat them normally so\n+         that we can order uses of the same alias with different\n+         cv-qualification (79960).  */\n+      if (!partial_order\n+\t  && (TYPE_ALIAS_P (nt) || TYPE_ALIAS_P (ot)))\n \treturn false;\n       else\n \treturn same_type_p (ot, nt);\n@@ -8321,7 +8326,8 @@ template_args_equal (tree ot, tree nt)\n \n int\n comp_template_args (tree oldargs, tree newargs,\n-\t\t    tree *oldarg_ptr, tree *newarg_ptr)\n+\t\t    tree *oldarg_ptr, tree *newarg_ptr,\n+\t\t    bool partial_order)\n {\n   int i;\n \n@@ -8339,7 +8345,7 @@ comp_template_args (tree oldargs, tree newargs,\n       tree nt = TREE_VEC_ELT (newargs, i);\n       tree ot = TREE_VEC_ELT (oldargs, i);\n \n-      if (! template_args_equal (ot, nt))\n+      if (! template_args_equal (ot, nt, partial_order))\n \t{\n \t  if (oldarg_ptr != NULL)\n \t    *oldarg_ptr = ot;\n@@ -8351,6 +8357,12 @@ comp_template_args (tree oldargs, tree newargs,\n   return 1;\n }\n \n+inline bool\n+comp_template_args_porder (tree oargs, tree nargs)\n+{\n+  return comp_template_args (oargs, nargs, NULL, NULL, true);\n+}\n+\n static void\n add_pending_template (tree d)\n {\n@@ -21584,8 +21596,8 @@ get_partial_spec_bindings (tree tmpl, tree spec_tmpl, tree args)\n   if (spec_args == error_mark_node\n       /* We only need to check the innermost arguments; the other\n \t arguments will always agree.  */\n-      || !comp_template_args (INNERMOST_TEMPLATE_ARGS (spec_args),\n-\t\t\t      INNERMOST_TEMPLATE_ARGS (args)))\n+      || !comp_template_args_porder (INNERMOST_TEMPLATE_ARGS (spec_args),\n+\t\t\t\t     INNERMOST_TEMPLATE_ARGS (args)))\n     return NULL_TREE;\n \n   /* Now that we have bindings for all of the template arguments,"}, {"sha": "f257e62d2210ce951860e1d1981a35b69718bea7", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-57.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c942f3edab10854aecdf92e8bd79ca6bc33bc66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c942f3edab10854aecdf92e8bd79ca6bc33bc66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-57.C?ref=0c942f3edab10854aecdf92e8bd79ca6bc33bc66", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/79960\n+// { dg-do compile { target c++11 } }\n+\n+using size_t = decltype(sizeof(0));\n+\n+template<typename T> struct tuple_size;\n+\n+template<typename T, size_t U = tuple_size<T>::value>\n+  using __has_tuple_size = T;\n+\n+template<typename T> struct tuple_size<const __has_tuple_size<T>> {\n+  static constexpr size_t value = tuple_size<T>::value;\n+};\n+\n+template<typename T> struct tuple_size<volatile __has_tuple_size<T>> {\n+  static constexpr size_t value = tuple_size<T>::value;\n+};\n+\n+template<typename T> struct tuple_size<const __has_tuple_size<volatile T>> {\n+  static constexpr size_t value = tuple_size<T>::value;\n+};\n+\n+template<typename... T> struct tuple { };\n+template<typename... T> struct tuple_size<tuple<T...>> {\n+  static constexpr size_t value = sizeof...(T);\n+};\n+\n+static_assert( tuple_size<const tuple<>>::value == 0, \"\" );  // OK\n+static_assert( tuple_size<volatile tuple<>>::value == 0, \"\" ); // OK\n+static_assert( tuple_size<const volatile tuple<>>::value == 0, \"\" ); // FAIL"}]}