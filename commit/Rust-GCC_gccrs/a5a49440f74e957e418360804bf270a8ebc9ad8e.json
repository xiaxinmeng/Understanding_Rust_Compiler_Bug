{"sha": "a5a49440f74e957e418360804bf270a8ebc9ad8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhNDk0NDBmNzRlOTU3ZTQxODM2MDgwNGJmMjcwYThlYmM5YWQ4ZQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-06T22:53:10Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-06T22:53:10Z"}, "message": "c-common.c (warn_multichar): New.\n\n\t* c-common.c (warn_multichar): New.\n\t(c_common_init): Set CPP's warn_multichar.\n\t* c-common.h (warn_multichar): New.\n\t* c-decl.c (warn_multichar): Remove.\n\t* c-lex.c (lex_charconst): Update.\n\t* c-tree.h (warn_multichar): Remove.\n\t* cppexp.c (eval_token): Sign-extend charconst value.\n\t* cppinit.c (cpp_create_reader): Set warn_multichar.\n\t* cpplex.c (cpp_interpret_charconst): Don't sign-extend\n\teach character.  Update prototype.  Sign-extend the result.\n\t* cpplib.h: Fix conditions.\n\t(struct cpp_options): Add new warning flag.\n\t(cpp_interpret_charconst): Update prototype.\ncp:\n\t* Make-lang.in (decl2.o): Update.\n\t* cp-tree.h (warn_multichar): Remove.\n\t* decl2.c: Include c-common.h.\n\t(warn_multichar): Remove.\ndoc:\n\t* cpp.texi: Update documentation.\ntestsuite:\n\t* gcc.dg/cpp/charconst-3.c: Correct tests accordingly.\n\nFrom-SVN: r53240", "tree": {"sha": "3f56b583072218fe62c5e65ab9af8fa0eb09165a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f56b583072218fe62c5e65ab9af8fa0eb09165a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5a49440f74e957e418360804bf270a8ebc9ad8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a49440f74e957e418360804bf270a8ebc9ad8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a49440f74e957e418360804bf270a8ebc9ad8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a49440f74e957e418360804bf270a8ebc9ad8e/comments", "author": null, "committer": null, "parents": [{"sha": "d7ee9f9fa759ab04e844982d8818001f6ba7d4cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ee9f9fa759ab04e844982d8818001f6ba7d4cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ee9f9fa759ab04e844982d8818001f6ba7d4cd"}], "stats": {"total": 140, "additions": 97, "deletions": 43}, "files": [{"sha": "d88c97359aa0a46375e2e53707aa04e72f1406b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -1,3 +1,21 @@\n+2002-05-07  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-common.c (warn_multichar): New.\n+\t(c_common_init): Set CPP's warn_multichar.\n+\t* c-common.h (warn_multichar): New.\n+\t* c-decl.c (warn_multichar): Remove.\n+\t* c-lex.c (lex_charconst): Update.\n+\t* c-tree.h (warn_multichar): Remove.\n+\t* cppexp.c (eval_token): Sign-extend charconst value.\n+\t* cppinit.c (cpp_create_reader): Set warn_multichar.\n+\t* cpplex.c (cpp_interpret_charconst): Don't sign-extend\n+\teach character.  Update prototype.  Sign-extend the result.\n+\t* cpplib.h: Fix conditions.\n+\t(struct cpp_options): Add new warning flag.\n+\t(cpp_interpret_charconst): Update prototype.\n+doc:\n+\t* cpp.texi: Update documentation.\n+\n 2002-05-06  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* genautomata.c (form_the_same_automaton_unit_lists_from_regexp):"}, {"sha": "bc4b0b96d023a21c6ae1544382267c322799d38f", "filename": "gcc/c-common.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -201,6 +201,10 @@ int flag_short_double;\n \n int flag_short_wchar;\n \n+/* Nonzero means warn about use of multicharacter literals.  */\n+\n+int warn_multichar = 1;\n+\n /* Nonzero means warn about possible violations of sequence point rules.  */\n \n int warn_sequence_point;\n@@ -4307,6 +4311,8 @@ c_common_init (filename)\n   options->int_precision = TYPE_PRECISION (integer_type_node);\n   options->wchar_precision = TYPE_PRECISION (wchar_type_node);\n \n+  options->warn_multichar = warn_multichar;\n+\n   /* NULL is passed up to toplev.c and we exit quickly.  */\n   if (flag_preprocess_only)\n     {"}, {"sha": "eca6cf137f0fa3c93b07ac425f9ab42d8bdfa2a7", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -391,6 +391,9 @@ extern int flag_short_double;\n \n extern int flag_short_wchar;\n \n+/* Nonzero means warn about use of multicharacter literals.  */\n+extern int warn_multichar;\n+\n /* Warn about *printf or *scanf format/argument anomalies.  */\n \n extern int warn_format;"}, {"sha": "61f8f695e4539ddc30b6a284dd841d19d99bc35b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -426,10 +426,6 @@ int warn_sign_compare = -1;\n \n int warn_float_equal = 0;\n \n-/* Nonzero means warn about use of multicharacter literals.  */\n-\n-int warn_multichar = 1;\n-\n /* Nonzero means `$' can be in an identifier.  */\n \n #ifndef DOLLARS_IN_IDENTIFIERS"}, {"sha": "075a2edb9ab93b763ec6d29bae2059ffec0a527d", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -1359,7 +1359,7 @@ lex_charconst (token)\n   unsigned int chars_seen;\n   int unsignedp;\n  \n-  result = cpp_interpret_charconst (parse_in, token, warn_multichar,\n+  result = cpp_interpret_charconst (parse_in, token,\n  \t\t\t\t    &chars_seen, &unsignedp);\n \n   /* Cast to cppchar_signed_t to get correct sign-extension of RESULT"}, {"sha": "8ed0b642b904b0e7e9676a9c492d79aa6b46e7a8", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -374,10 +374,6 @@ extern int warn_sign_compare;\n \n extern int warn_float_equal;\n \n-/* Warn about multicharacter constants.  */\n-\n-extern int warn_multichar;\n-\n /* Nonzero means we are reading code that came from a system header file.  */\n \n extern int system_header_p;"}, {"sha": "6cd79d76b14eb5b55bbf32e532387480cf0373b0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -1,3 +1,10 @@\n+2002-05-07  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Make-lang.in (decl2.o): Update.\n+\t* cp-tree.h (warn_multichar): Remove.\n+\t* decl2.c: Include c-common.h.\n+\t(warn_multichar): Remove.\n+\n 2002-05-03  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (build_cplus_array_type): Only const and volatile get"}, {"sha": "06052f4f2ba607f2b0605aecf949fb7f5a431a98", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -257,7 +257,7 @@ cp/decl.o: cp/decl.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h stack.h \\\n   output.h $(EXPR_H) except.h toplev.h hash.h $(GGC_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) tree-inline.h diagnostic.h c-pragma.h\n cp/decl2.o: cp/decl2.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h $(EXPR_H) \\\n-  output.h except.h toplev.h $(GGC_H) $(RTL_H)\n+  output.h except.h toplev.h $(GGC_H) $(RTL_H) c-common.h\n cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) flags.h toplev.h output.h $(TM_P_H) \\\n    diagnostic.h\n cp/typeck.o: cp/typeck.c $(CXX_TREE_H) flags.h $(RTL_H) $(EXPR_H) toplev.h \\"}, {"sha": "db74366e8db97fd32fe9af5a1f686c5a324f8a8e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -3111,9 +3111,6 @@ extern int flag_ms_extensions;\n    type signature of any virtual function in the base class.  */\n extern int warn_overloaded_virtual;\n \n-/* Nonzero means warn about use of multicharacter literals.  */\n-extern int warn_multichar;\n-\n /* Set by add_implicitly_declared_members() to keep those members from\n    being flagged as deprecated or reported as using deprecated\n    types.  */"}, {"sha": "f716de0c94e465f7e974582f15a4f9d499774bd6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -44,6 +44,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"timevar.h\"\n #include \"cpplib.h\"\n #include \"target.h\"\n+#include \"c-common.h\"\n extern cpp_reader *parse_in;\n \n /* This structure contains information about the initializations\n@@ -288,10 +289,6 @@ int warn_old_style_cast;\n \n int warn_unknown_pragmas; /* Tri state variable.  */  \n \n-/* Nonzero means warn about use of multicharacter literals.  */\n-\n-int warn_multichar = 1;\n-\n /* Nonzero means warn when non-templatized friend functions are\n    declared within a template */\n "}, {"sha": "288cdd406b00818690fc7837c9c1ebe67aa22054", "filename": "gcc/cppexp.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -295,7 +295,16 @@ eval_token (pfile, token)\n \n     case CPP_WCHAR:\n     case CPP_CHAR:\n-      op.value = cpp_interpret_charconst (pfile, token, 1, &temp, &unsignedp);\n+      {\n+\tcppchar_t result = cpp_interpret_charconst (pfile, token,\n+\t\t\t\t\t\t    &temp, &unsignedp);\n+\top.value = result;\n+\t/* Sign-extend the result if necessary.  */\n+\tif (!unsignedp && (cppchar_signed_t) result < 0\n+\t    && sizeof (HOST_WIDEST_INT) > sizeof (cppchar_t))\n+\t  op.value |= ~(((unsigned HOST_WIDEST_INT) 1 << BITS_PER_CPPCHAR_T)\n+\t\t\t- 1);\n+      }\n       break;\n \n     case CPP_NAME:"}, {"sha": "1d570b0e98aeca570edcb0c97dcc23f03ae7a994", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -487,6 +487,7 @@ cpp_create_reader (lang)\n \n   set_lang (pfile, lang);\n   CPP_OPTION (pfile, warn_import) = 1;\n+  CPP_OPTION (pfile, warn_multichar) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n   CPP_OPTION (pfile, discard_comments_in_macro_exp) = 1;\n   CPP_OPTION (pfile, show_column) = 1;"}, {"sha": "a9f14948133cd4fbda95f6370e05f075e41df09a", "filename": "gcc/cpplex.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -1861,10 +1861,9 @@ cpp_parse_escape (pfile, pstr, limit, wide)\n    characters seen, and UNSIGNEDP to a variable that indicates whether\n    the result has signed type.  */\n cppchar_t\n-cpp_interpret_charconst (pfile, token, warn_multi, pchars_seen, unsignedp)\n+cpp_interpret_charconst (pfile, token, pchars_seen, unsignedp)\n      cpp_reader *pfile;\n      const cpp_token *token;\n-     int warn_multi;\n      unsigned int *pchars_seen;\n      int *unsignedp;\n {\n@@ -1930,11 +1929,10 @@ cpp_interpret_charconst (pfile, token, warn_multi, pchars_seen, unsignedp)\n       \n       chars_seen++;\n \n-      /* Sign-extend the character, scale result, and add the two.  */\n-      if (!unsigned_p && (c & (1 << (width - 1))))\n-\tc |= ~mask;\n+      /* Truncate the character, scale the result and merge the two.  */\n+      c &= mask;\n       if (width < BITS_PER_CPPCHAR_T)\n-\tresult = (result << width) + c;\n+\tresult = (result << width) | c;\n       else\n \tresult = c;\n     }\n@@ -1945,16 +1943,29 @@ cpp_interpret_charconst (pfile, token, warn_multi, pchars_seen, unsignedp)\n     {\n       /* Multichar charconsts are of type int and therefore signed.  */\n       unsigned_p = 0;\n+\n       if (chars_seen > max_chars)\n \t{\n \t  chars_seen = max_chars;\n \t  cpp_error (pfile, DL_WARNING,\n \t\t     \"character constant too long for its type\");\n \t}\n-      else if (warn_multi)\n+      else if (CPP_OPTION (pfile, warn_multichar))\n \tcpp_error (pfile, DL_WARNING, \"multi-character character constant\");\n     }\n \n+  /* Sign-extend the constant.  */\n+  if (!unsigned_p)\n+    {\n+      size_t precision = width;\n+\n+      if (chars_seen > 1)\n+\tprecision *= max_chars;\n+      if (precision < BITS_PER_CPPCHAR_T\n+\t  && (result & ((cppchar_t) 1 << (precision - 1))))\n+\tresult |= ~(((cppchar_t) 1 << precision) - 1);\n+    }\n+\n   *pchars_seen = chars_seen;\n   *unsignedp = unsigned_p;\n   return result;"}, {"sha": "ca0eee2bd639dbce1412e43b42744b4c08dfd677", "filename": "gcc/cpplib.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -196,10 +196,10 @@ struct cpp_token\n #ifndef MAX_WCHAR_TYPE_SIZE\n # define MAX_WCHAR_TYPE_SIZE WCHAR_TYPE_SIZE\n #endif\n-#if SIZEOF_INT >= MAX_WCHAR_TYPE_SIZE\n+#if CHAR_BIT * SIZEOF_INT >= MAX_WCHAR_TYPE_SIZE\n # define CPPCHAR_SIGNED_T int\n #else\n-# if SIZEOF_LONG >= MAX_WCHAR_TYPE_SIZE || !HAVE_LONG_LONG\n+# if CHAR_BIT * SIZEOF_LONG >= MAX_WCHAR_TYPE_SIZE || !HAVE_LONG_LONG\n #  define CPPCHAR_SIGNED_T long\n # else\n #  define CPPCHAR_SIGNED_T long long\n@@ -329,6 +329,9 @@ struct cpp_options\n   /* Nonzero means warn if #import is used.  */\n   unsigned char warn_import;\n \n+  /* Nonzero means warn about multicharacter charconsts.  */\n+  unsigned char warn_multichar;\n+\n   /* Nonzero means warn about various incompatibilities with\n      traditional C.  */\n   unsigned char warn_traditional;\n@@ -558,7 +561,7 @@ extern void _cpp_backup_tokens PARAMS ((cpp_reader *, unsigned int));\n /* Evaluate a CPP_CHAR or CPP_WCHAR token.  */\n extern cppchar_t\n cpp_interpret_charconst PARAMS ((cpp_reader *, const cpp_token *,\n-\t\t\t\t int, unsigned int *, int *));\n+\t\t\t\t unsigned int *, int *));\n \n /* Used to register builtins during the register_builtins callback.\n    The text is the same as the command line argument.  */"}, {"sha": "0e7d9e878a0c8f2b9dc2bfe307087531cd9165ba", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -3514,19 +3514,17 @@ values they would have on the target machine.\n \n Multi-character character constants are interpreted a character at a\n time, shifting the previous result left by the number of bits per\n-target character and adding the sign-extended value of the new\n-character.  They have type @code{int}, and are treated as signed\n-regardless of whether single characters are signed or not.  If there\n-are more characters in the constant than would fit in the target\n-@code{int}, a diagnostic is given, and the excess leading characters\n-are ignored.  This methodology is not fully compatible with versions\n-3.1 and earlier of GCC, which used a confusing and inconsistent\n-valuation technique.\n+target character and or-ing the value of the new character truncated\n+to the width of a target character.  They have type @code{int}, and\n+are treated as signed regardless of whether single characters are\n+signed or not (a slight change from versions 3.1 and earlier of GCC).\n+If there are more characters in the constant than would fit in the\n+target @code{int} an error is issued.\n \n For example, 'ab' for a target with an 8-bit @code{char} would be\n-interpreted as @w{'a' * 256 + 'b'}, and 'a\\234' as @w{'a' * 256 +\n-'\\234'}.  GCC 3.1 and earlier would give a different value for the\n-latter example, probably @w{'a' * 256 + (unsigned char) '\\234'}.\n+interpreted as @w{(int) ((unsigned char) 'a' * 256 + (unsigned char)\n+'b')}, and 'a\\234' as @w{(int) ((unsigned char) 'a' * 256 + (unsigned\n+char) '\\234')}.\n \n @item Source file inclusion.\n "}, {"sha": "1b8bd7157c5eca75dd3bf7242c1899befa4e3101", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -1,3 +1,7 @@\n+2002-05-07  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gcc.dg/cpp/charconst-3.c: Correct tests accordingly.\n+\n 2002-05-06  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/charconst-3.c: Run, don't compile."}, {"sha": "9d7d2399812d21814771dd2600fd5e92be5ad3ee", "filename": "gcc/testsuite/gcc.dg/cpp/charconst-3.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a49440f74e957e418360804bf270a8ebc9ad8e/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-3.c?ref=a5a49440f74e957e418360804bf270a8ebc9ad8e", "patch": "@@ -15,23 +15,31 @@ int main ()\n #if INT_MAX > 127\n   int scale = (int) (unsigned char) -1 + 1;\n \n-  if ('ab' != ('a' * scale + 'b'))\n+  if ('ab' != (int) ((unsigned char) 'a' * scale + (unsigned char) 'b'))\n     abort ();\n \n-  if ('\\234b' != ('\\234' * scale + 'b'))\n+  if ('\\234b' != (int) ((unsigned char) '\\234' * scale + (unsigned char) 'b'))\n     abort ();\n \n-  if ('b\\234' != ('b' * scale + '\\234'))\n+  if ('b\\234' != (int) ((unsigned char) 'b' * scale + (unsigned char) '\\234'))\n     abort ();\n-\n   /* Multichar charconsts have type int and should be signed.  */\n #if INT_MAX == 32767\n+# if '\\234a' > 0\n+#  error Preprocessor charconsts 1\n+# endif\n   if ('\\234a' > 0)\n     abort ();\n #elif INT_MAX == 2147483647\n+# if '\\234aaa' > 0\n+#  error Preprocessor charconsts 2\n+# endif\n   if ('\\234aaa' > 0)\n     abort ();\n #elif INT_MAX == 9223372036854775807\n+# if '\\234aaaaaaa' > 0\n+#  error Preprocessor charconsts 3\n+# endif\n   if ('\\234aaaaaaa' > 0)\n     abort ();\n #endif"}]}