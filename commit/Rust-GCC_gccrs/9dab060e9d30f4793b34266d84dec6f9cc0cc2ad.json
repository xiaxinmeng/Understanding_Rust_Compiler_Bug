{"sha": "9dab060e9d30f4793b34266d84dec6f9cc0cc2ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRhYjA2MGU5ZDMwZjQ3OTNiMzQyNjZkODRkZWM2ZjljYzBjYzJhZA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dan@cgsoftware.com", "date": "2001-04-16T15:30:17Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2001-04-16T15:30:17Z"}, "message": "ternary.h: New file - Ternary search tree header.\n\n\n2001-04-15  Daniel Berlin  <dan@cgsoftware.com>\n\n\t* ternary.h: New file - Ternary search tree header.\n\n2001-04-15  Daniel Berlin  <dan@cgsoftware.com>\n\n\t* ternary.c: New file - Ternary search tree implementation.\n\n\t* Makefile.in: Add ternary.o, and ternary.c dependencies.\n\nFrom-SVN: r41380", "tree": {"sha": "0ef9af7b27f6b9fa39ac0ecdbc4accf09888f208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ef9af7b27f6b9fa39ac0ecdbc4accf09888f208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/comments", "author": null, "committer": null, "parents": [{"sha": "26ee120d31cf2890ac579d666661cbd829eec893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ee120d31cf2890ac579d666661cbd829eec893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ee120d31cf2890ac579d666661cbd829eec893"}], "stats": {"total": 222, "additions": 220, "deletions": 2}, "files": [{"sha": "f0a166c1766f84586dcf790a03a85f44f1e54b37", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=9dab060e9d30f4793b34266d84dec6f9cc0cc2ad", "patch": "@@ -1,3 +1,7 @@\n+2001-04-15  Daniel Berlin  <dan@cgsoftware.com>\n+\n+\t* ternary.h: New file - Ternary search tree header.\n+\n 2001-04-03  Zack Weinberg  <zackw@stanford.edu>\n \n \t* ansidecl.h: All logic from gcc/gansidecl.h moved here."}, {"sha": "2e0c828503050fb3f2e780956ec4d847d1115bf4", "filename": "include/ternary.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/include%2Fternary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/include%2Fternary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fternary.h?ref=9dab060e9d30f4793b34266d84dec6f9cc0cc2ad", "patch": "@@ -0,0 +1,50 @@\n+/* ternary.h - Ternary Search Trees\n+   Copyright 2001 Free Software Foundation, Inc.\n+\n+   Contributed by Daniel Berlin (dan@cgsoftware.com)\n+\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 2, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+   USA.  */\n+#ifndef TERNARY_H_\n+#define TERNARY_H_\n+/* Ternary search trees */\n+\n+typedef struct ternary_node_def *ternary_tree;\n+\n+typedef struct ternary_node_def\n+{\n+  char splitchar;\n+  ternary_tree lokid;\n+  ternary_tree eqkid;\n+  ternary_tree hikid;\n+}\n+ternary_node;\n+\n+/* Insert string S into tree P, associating it with DATA. \n+   Return the data in the tree associated with the string if it's\n+   already there, and replace is 0.\n+   Otherwise, replaces if it it exists, inserts if it doesn't, and\n+   returns the data you passed in. */\n+void *ternary_insert (ternary_tree *p, char *s, void *data, int replace);\n+\n+/* Delete the ternary search tree rooted at P. \n+   Does NOT delete the data you associated with the strings. */\n+void ternary_cleanup (ternary_tree p);\n+\n+/* Search the ternary tree for string S, returning the data associated\n+   with it if found. */\n+void *ternary_search (ternary_tree p, char *s);\n+#endif"}, {"sha": "53e4290dd307978e12839f53ab84b43048da633e", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=9dab060e9d30f4793b34266d84dec6f9cc0cc2ad", "patch": "@@ -1,3 +1,9 @@\n+2001-04-15  Daniel Berlin  <dan@cgsoftware.com>\n+\n+\t* ternary.c: New file - Ternary search tree implementation.\n+\n+\t* Makefile.in: Add ternary.o, and ternary.c dependencies.\n+\n 2001-04-03  Zack Weinberg  <zackw@stanford.edu>\n \n \t* make-temp-file.c (try): Inline."}, {"sha": "92b90fa748fdf378ceb966f20c32b416f237b793", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=9dab060e9d30f4793b34266d84dec6f9cc0cc2ad", "patch": "@@ -132,7 +132,7 @@ CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c\t      \\\n \tstrncasecmp.c strchr.c strdup.c strerror.c strncmp.c strrchr.c        \\\n \tstrsignal.c strstr.c strtod.c strtol.c strtoul.c tmpnam.c vasprintf.c \\\n \tvfork.c vfprintf.c vprintf.c vsprintf.c waitpid.c xatexit.c xexit.c   \\\n-\txmalloc.c xmemdup.c xstrdup.c xstrerror.c\n+\txmalloc.c xmemdup.c xstrdup.c xstrerror.c ternary.c\n \n # These are always included in the library.\n REQUIRED_OFILES = argv.o alloca.o choose-temp.o concat.o cplus-dem.o          \\\n@@ -141,7 +141,7 @@ REQUIRED_OFILES = argv.o alloca.o choose-temp.o concat.o cplus-dem.o          \\\n         md5.o make-temp-file.o objalloc.o\t\t\t\t      \\\n \tobstack.o partition.o pexecute.o safe-ctype.o sort.o spaces.o         \\\n \tsplay-tree.o strerror.o strsignal.o xatexit.o xexit.o xmalloc.o       \\\n-\txmemdup.o xstrdup.o xstrerror.o\n+\txmemdup.o xstrdup.o xstrerror.o ternary.o\n \n $(TARGETLIB): $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS)\n \t-rm -f $(TARGETLIB)\n@@ -290,6 +290,7 @@ strerror.o: config.h $(INCDIR)/libiberty.h\n strsignal.o: config.h $(INCDIR)/libiberty.h\n strtol.o: config.h\n strtoul.o: config.h\n+ternary.o: config.h $(INCDIR)/ternary.h $(INCDIR)/libiberty.h\n vasprintf.o: config.h\n xatexit.o: $(INCDIR)/libiberty.h\n xexit.o: config.h $(INCDIR)/libiberty.h"}, {"sha": "c5ef3a58b7638b00f7bec0cbf4d50e1f03e2836a", "filename": "libiberty/ternary.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/libiberty%2Fternary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dab060e9d30f4793b34266d84dec6f9cc0cc2ad/libiberty%2Fternary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fternary.c?ref=9dab060e9d30f4793b34266d84dec6f9cc0cc2ad", "patch": "@@ -0,0 +1,157 @@\n+/* ternary.c - Ternary Search Trees\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+   Contributed by Daniel Berlin (dan@cgsoftware.com)\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 2, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+   USA.  */\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#include <stdio.h>\n+\n+#include \"libiberty.h\"\n+#include \"ternary.h\"\n+\n+/* Non-recursive so we don't waste stack space/time on large\n+   insertions. */\n+\n+void *\n+ternary_insert (ternary_tree * root, char *s, void *data, int replace)\n+{\n+  int diff;\n+  ternary_tree curr, *pcurr;\n+\n+  /* Start at the root. */\n+  pcurr = root;\n+  /* Loop until we find the right position */\n+  while ((curr = *pcurr))\n+    {\n+      /* Calculate the difference */\n+      diff = *s - curr->splitchar;\n+      /* Handle current char equal to node splitchar */\n+      if (diff == 0)\n+\t{\n+\t  /* Handle the case of a string we already have */\n+\t  if (*s++ == 0)\n+\t    {\n+\t      if (replace)\n+\t\tcurr->eqkid = (ternary_tree) data;\n+\t      return (void *) curr->eqkid;\n+\t    }\n+\t  pcurr = &(curr->eqkid);\n+\t}\n+      /* Handle current char less than node splitchar */\n+      else if (diff < 0)\n+\t{\n+\t  pcurr = &(curr->lokid);\n+\t}\n+      /* Handle current char greater than node splitchar */\n+      else\n+\t{\n+\t  pcurr = &(curr->hikid);\n+\t}\n+    }\n+  /* It's not a duplicate string, and we should insert what's left of\n+     the string, into the tree rooted at curr */\n+  for (;;)\n+    {\n+      /* Allocate the memory for the node, and fill it in */\n+      *pcurr = (ternary_tree) xmalloc (sizeof (ternary_node));\n+      curr = *pcurr;\n+      curr->splitchar = *s;\n+      curr->lokid = curr->hikid = curr->eqkid = 0;\n+\n+      /* Place nodes until we hit the end of the string.\n+         When we hit it, place the data in the right place, and\n+         return.\n+       */\n+      if (*s++ == 0)\n+\t{\n+\t  curr->eqkid = (ternary_tree) data;\n+\t  return data;\n+\t}\n+      pcurr = &(curr->eqkid);\n+    }\n+}\n+\n+/* Free the ternary search tree rooted at p. */\n+void\n+ternary_cleanup (ternary_tree p)\n+{\n+  if (p)\n+    {\n+      ternary_cleanup (p->lokid);\n+      if (p->splitchar)\n+\tternary_cleanup (p->eqkid);\n+      ternary_cleanup (p->hikid);\n+      free (p);\n+    }\n+}\n+\n+/* Non-recursive find of a string in the ternary tree */\n+void *\n+ternary_search (ternary_tree p, char *s)\n+{\n+  ternary_tree curr;\n+  int diff, spchar;\n+  spchar = *s;\n+  curr = p;\n+  /* Loop while we haven't hit a NULL node or returned */\n+  while (curr)\n+    {\n+      /* Calculate the difference */\n+      diff = spchar - curr->splitchar;\n+      /* Handle the equal case */\n+      if (diff == 0)\n+\t{\n+\t  if (spchar == 0)\n+\t    return (void *) curr->eqkid;\n+\t  spchar = *++s;\n+\t  curr = curr->eqkid;\n+\t}\n+      /* Handle the less than case */\n+      else if (diff < 0)\n+\tcurr = curr->lokid;\n+      /* All that's left is greater than */\n+      else\n+\tcurr = curr->hikid;\n+    }\n+  return NULL;\n+}\n+\n+/* For those who care, the recursive version of the search. Useful if\n+   you want a starting point for pmsearch or nearsearch. */\n+static void *\n+ternary_recursivesearch (ternary_tree p, char *s)\n+{\n+  if (!p)\n+    return 0;\n+  if (*s < p->splitchar)\n+    return ternary_recursivesearch (p->lokid, s);\n+  else if (*s > p->splitchar)\n+    return ternary_recursivesearch (p->hikid, s);\n+  else\n+    {\n+      if (*s == 0)\n+\treturn (void *) p->eqkid;\n+      return ternary_recursivesearch (p->eqkid, ++s);\n+    }\n+}"}]}