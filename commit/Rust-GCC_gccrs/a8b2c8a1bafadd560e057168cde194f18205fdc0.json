{"sha": "a8b2c8a1bafadd560e057168cde194f18205fdc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThiMmM4YTFiYWZhZGQ1NjBlMDU3MTY4Y2RlMTk0ZjE4MjA1ZmRjMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-05T00:16:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-05T00:16:18Z"}, "message": "sparc.h (EXPAND_BUILTIN_VA_START): Define.\n\n        * sparc.h (EXPAND_BUILTIN_VA_START): Define.\n        (EXPAND_BUILTIN_VA_ARG): Define.\n        * sparc.c (sparc_va_start): New.\n        (sparc_va_arg): New.\n\nFrom-SVN: r29115", "tree": {"sha": "37b6e2cabd6f1672b8525e0ccc80e082bc7a76b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37b6e2cabd6f1672b8525e0ccc80e082bc7a76b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8b2c8a1bafadd560e057168cde194f18205fdc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b2c8a1bafadd560e057168cde194f18205fdc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b2c8a1bafadd560e057168cde194f18205fdc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b2c8a1bafadd560e057168cde194f18205fdc0/comments", "author": null, "committer": null, "parents": [{"sha": "1b893504b35693f977761494967aa92b82b62436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b893504b35693f977761494967aa92b82b62436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b893504b35693f977761494967aa92b82b62436"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "d417604b255b973de628f698f4b70384584357f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b2c8a1bafadd560e057168cde194f18205fdc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b2c8a1bafadd560e057168cde194f18205fdc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8b2c8a1bafadd560e057168cde194f18205fdc0", "patch": "@@ -1,3 +1,10 @@\n+Sat Sep  4 17:15:13 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* sparc.h (EXPAND_BUILTIN_VA_START): Define.\n+\t(EXPAND_BUILTIN_VA_ARG): Define.\n+\t* sparc.c (sparc_va_start): New.\n+\t(sparc_va_arg): New.\n+\n Sun Sep  5 11:11:59 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.h (DBR_OUTPUT_SEQEND): Use XVECEXP not XEXPs."}, {"sha": "622e04b0774c2be4f7401fcf8cb1e15e246647d2", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b2c8a1bafadd560e057168cde194f18205fdc0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b2c8a1bafadd560e057168cde194f18205fdc0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a8b2c8a1bafadd560e057168cde194f18205fdc0", "patch": "@@ -4280,6 +4280,96 @@ sparc_builtin_saveregs ()\n \n   return address;\n }\n+\n+/* Implement `va_start' for varargs and stdarg.  */\n+\n+void\n+sparc_va_start (stdarg_p, valist, nextarg)\n+     int stdarg_p ATTRIBUTE_UNUSED;\n+     tree valist;\n+     rtx nextarg;\n+{\n+  nextarg = expand_builtin_saveregs ();\n+  std_expand_builtin_va_start (1, valist, nextarg);\n+}\n+\n+/* Implement `va_arg'.  */\n+\n+rtx\n+sparc_va_arg (valist, type)\n+     tree valist, type;\n+{\n+  HOST_WIDE_INT size, rsize, align;\n+  tree addr, incr, tmp;\n+  rtx addr_rtx;\n+  int indirect = 0;\n+\n+  /* Round up sizeof(type) to a word.  */\n+  size = int_size_in_bytes (type);\n+  rsize = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;\n+  align = 0;\n+\n+  if (TARGET_ARCH64)\n+    {\n+      if (TYPE_ALIGN (type) >= 2 * BITS_PER_WORD)\n+\talign = 2 * UNITS_PER_WORD;\n+\n+      if (AGGREGATE_TYPE_P (type) && size > 16)\n+\t{\n+\t  indirect = 1;\n+\t  size = rsize = UNITS_PER_WORD;\n+\t}\n+    }\n+  else\n+    {\n+      if (AGGREGATE_TYPE_P (type)\n+\t  || TYPE_MODE (type) == TFmode\n+\t  || TYPE_MODE (type) == TCmode)\n+\t{\n+\t  indirect = 1;\n+\t  size = rsize = UNITS_PER_WORD;\n+\t}\n+      else\n+\t{\n+\t  /* ??? The old va-sparc.h implementation, for 8 byte objects\n+\t     copied stuff to a temporary -- I don't see that that \n+\t     provides any more alignment than the stack slot did.  */\n+\t}\n+    }\n+\n+  incr = valist;\n+  if (align)\n+    {\n+      incr = fold (build (PLUS_EXPR, ptr_type_node, incr,\n+\t\t\t build_int_2 (align - 1, 0)));\n+      incr = fold (build (BIT_AND_EXPR, ptr_type_node, incr,\n+\t\t\t  build_int_2 (-align, -1)));\n+    }\n+\n+  addr = incr = save_expr (incr);\n+  if (BYTES_BIG_ENDIAN && size < rsize)\n+    {\n+      addr = fold (build (PLUS_EXPR, ptr_type_node, incr,\n+\t\t\t  build_int_2 (rsize - size, 0)));\n+    }\n+  incr = fold (build (PLUS_EXPR, ptr_type_node, incr,\n+\t\t      build_int_2 (rsize, 0)));\n+\n+  incr = build (MODIFY_EXPR, ptr_type_node, valist, incr);\n+  TREE_SIDE_EFFECTS (incr) = 1;\n+  expand_expr (incr, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  addr_rtx = expand_expr (addr, NULL, Pmode, EXPAND_NORMAL);\n+\n+  if (indirect)\n+    {\n+      addr_rtx = force_reg (Pmode, addr_rtx);\n+      addr_rtx = gen_rtx_MEM (Pmode, addr_rtx);\n+      MEM_ALIAS_SET (addr_rtx) = get_varargs_alias_set ();\n+    }\n+\n+  return addr_rtx;\n+}\n \f\n /* Return the string to output a conditional branch to LABEL, which is\n    the operand number of the label.  OP is the conditional expression."}, {"sha": "d113248b808abba8eb1e2eb5c65e6e280424ab82", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b2c8a1bafadd560e057168cde194f18205fdc0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b2c8a1bafadd560e057168cde194f18205fdc0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=a8b2c8a1bafadd560e057168cde194f18205fdc0", "patch": "@@ -2046,6 +2046,14 @@ void sparc64_initialize_trampoline ();\n extern struct rtx_def *sparc_builtin_saveregs ();\n #define EXPAND_BUILTIN_SAVEREGS() sparc_builtin_saveregs ()\n \n+/* Implement `va_start' for varargs and stdarg.  */\n+#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n+  sparc_va_start (stdarg, valist, nextarg)\n+\n+/* Implement `va_arg'.  */\n+#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n+  sparc_va_arg (valist, type)\n+\n /* Define this macro if the location where a function argument is passed\n    depends on whether or not it is a named argument.\n "}]}