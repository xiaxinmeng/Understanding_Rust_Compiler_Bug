{"sha": "284a35df5d759e4ed0c7e03b5354dbfafddd67df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg0YTM1ZGY1ZDc1OWU0ZWQwYzdlMDNiNTM1NGRiZmFmZGRkNjdkZg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-12-24T14:13:58Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-12-24T14:13:58Z"}, "message": "random.tcc: Fix usage of _OutputIteratorConcept.\n\n2016-12-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/ext/random.tcc: Fix usage of _OutputIteratorConcept.\n\nFrom-SVN: r243915", "tree": {"sha": "369cf3433d5357991ac1bc13571f5f8fe2d87cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/369cf3433d5357991ac1bc13571f5f8fe2d87cd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/284a35df5d759e4ed0c7e03b5354dbfafddd67df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284a35df5d759e4ed0c7e03b5354dbfafddd67df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/284a35df5d759e4ed0c7e03b5354dbfafddd67df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284a35df5d759e4ed0c7e03b5354dbfafddd67df/comments", "author": null, "committer": null, "parents": [{"sha": "6b56d5f57de2d5608e3ad04649dc6bcba45c942d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b56d5f57de2d5608e3ad04649dc6bcba45c942d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b56d5f57de2d5608e3ad04649dc6bcba45c942d"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "32b81e8bbb7ddaf2924ff0d16539abeac1a26d71", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284a35df5d759e4ed0c7e03b5354dbfafddd67df/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284a35df5d759e4ed0c7e03b5354dbfafddd67df/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=284a35df5d759e4ed0c7e03b5354dbfafddd67df", "patch": "@@ -1,3 +1,7 @@\n+2016-12-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/ext/random.tcc: Fix usage of _OutputIteratorConcept.\n+\n 2016-12-21  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/util/testsuite_tr1.h (test_property): Don't define both"}, {"sha": "9b3a86eb20d74fb3c807be2ffc5a479cbcb5519b", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284a35df5d759e4ed0c7e03b5354dbfafddd67df/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284a35df5d759e4ed0c7e03b5354dbfafddd67df/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=284a35df5d759e4ed0c7e03b5354dbfafddd67df", "patch": "@@ -440,7 +440,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __param)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \tstd::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n \t  __aurng(__urng);\n@@ -725,7 +726,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __p)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \twhile (__f != __t)\n \t  {\n@@ -799,7 +801,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __p)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \ttypename std::gamma_distribution<result_type>::param_type\n \t  __pg(__p.mu(), __p.omega() / __p.mu());\n@@ -863,7 +866,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __p)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \tresult_type __mu_val = __p.mu();\n \tresult_type __malphinv = -result_type(1) / __p.alpha();\n@@ -953,7 +957,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __p)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \ttypename std::gamma_distribution<result_type>::param_type\n \t  __p1(__p.lambda(), result_type(1) / __p.lambda()),\n@@ -1024,7 +1029,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __p)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \tresult_type __dif = __p.b() - __p.a();\n \tresult_type __sum = __p.a() + __p.b();\n@@ -1121,7 +1127,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __p)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \tresult_type __2q = result_type(2) * __p.q();\n \tresult_type __q2 = __p.q() * __p.q();\n@@ -1196,7 +1203,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __param)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \twhile (__f != __t)\n \t  *__f++ = this->operator()(__urng, __param);\n@@ -1297,7 +1305,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __param)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \twhile (__f != __t)\n \t  *__f++ = this->operator()(__urng, __param);\n@@ -1403,7 +1412,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __param)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \twhile (__f != __t)\n \t  *__f++ = this->operator()(__urng);\n@@ -1481,7 +1491,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __p)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n+\n \tstd::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n \t  __aurng(__urng);\n \n@@ -1643,7 +1655,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __param)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \twhile (__f != __t)\n \t  *__f++ = this->operator()(__urng, __param);\n@@ -1773,7 +1786,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _UniformRandomNumberGenerator& __urng,\n \t\t      const param_type& __param)\n       {\n-\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    result_type>)\n \n \twhile (__f != __t)\n \t  *__f++ = this->operator()(__urng, __param);"}]}