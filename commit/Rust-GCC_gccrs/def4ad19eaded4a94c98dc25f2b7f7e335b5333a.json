{"sha": "def4ad19eaded4a94c98dc25f2b7f7e335b5333a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmNGFkMTllYWRlZDRhOTRjOThkYzI1ZjJiN2Y3ZTMzNWI1MzMzYQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-11-16T13:53:23Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-11-16T13:53:23Z"}, "message": "[i386]Migrate reduction optabs to reduc_<op>_scal\n\n\t* config/i386/sse.md (reduc_splus_v8df): Rename to...\n\t(reduc_plus_scal_v8df): ...here; reduce to temp and extract scalar.\n\n\t(reduc_splus_v4df): Rename to...\n\t(reduc_plus_scal_v4df): ...here; reduce to temp and extract scalar.\n\n\t(reduc_splus_v2df): Rename to...\n\t(reduc_plus_scal_v2df): ...here; reduce to temp and extract scalar.\n\n\t(reduc_splus_v16sf): Rename to...\n\t(reduc_plus_scal_v16sf): ...here; reduce to temp and extract scalar.\n\n\t(reduc_splus_v8sf): Rename to...\n\t(reduc_plus_scal_v8sf): ...here; reduce to temp and extract scalar.\n\n\t(reduc_splus_v4sf): Rename to...\n\t(reduc_plus_scal_v4sf): ...here; reduce to temp and extract scalar.\n\n\t(reduc_<code>_<mode>, all 3 variants): Rename each to...\n\t(reduc_<code>_scal_<mode>): ...here; reduce to temp and extract scalar.\n\n\t(reduc_umin_v8hf): Rename to...\n\t(reduc_umin_scal_v8hf): ...here; reduce to temp and extract scalar.\n\nFrom-SVN: r230423", "tree": {"sha": "332bd047b852a0d11f66ed10952e66cad62e7bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/332bd047b852a0d11f66ed10952e66cad62e7bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/def4ad19eaded4a94c98dc25f2b7f7e335b5333a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def4ad19eaded4a94c98dc25f2b7f7e335b5333a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def4ad19eaded4a94c98dc25f2b7f7e335b5333a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def4ad19eaded4a94c98dc25f2b7f7e335b5333a/comments", "author": null, "committer": null, "parents": [{"sha": "fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3"}], "stats": {"total": 108, "additions": 77, "deletions": 31}, "files": [{"sha": "d106f52a88f6cd8df0ec74a028209cf208b6b597", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def4ad19eaded4a94c98dc25f2b7f7e335b5333a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def4ad19eaded4a94c98dc25f2b7f7e335b5333a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=def4ad19eaded4a94c98dc25f2b7f7e335b5333a", "patch": "@@ -1,3 +1,29 @@\n+2015-11-16  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/i386/sse.md (reduc_splus_v8df): Rename to...\n+\t(reduc_plus_scal_v8df): ...here; reduce to temp and extract scalar.\n+\n+\t(reduc_splus_v4df): Rename to...\n+\t(reduc_plus_scal_v4df): ...here; reduce to temp and extract scalar.\n+\n+\t(reduc_splus_v2df): Rename to...\n+\t(reduc_plus_scal_v2df): ...here; reduce to temp and extract scalar.\n+\n+\t(reduc_splus_v16sf): Rename to...\n+\t(reduc_plus_scal_v16sf): ...here; reduce to temp and extract scalar.\n+\n+\t(reduc_splus_v8sf): Rename to...\n+\t(reduc_plus_scal_v8sf): ...here; reduce to temp and extract scalar.\n+\n+\t(reduc_splus_v4sf): Rename to...\n+\t(reduc_plus_scal_v4sf): ...here; reduce to temp and extract scalar.\n+\n+\t(reduc_<code>_<mode>, all 3 variants): Rename each to...\n+\t(reduc_<code>_scal_<mode>): ...here; reduce to temp and extract scalar.\n+\n+\t(reduc_umin_v8hf): Rename to...\n+\t(reduc_umin_scal_v8hf): ...here; reduce to temp and extract scalar.\n+\n 2015-11-16  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* omp-low.c (pass_omp_simd_clone::gate): If target allows - call"}, {"sha": "71d78f77e8829ad7686c886ded43051ed2902d52", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 51, "deletions": 31, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def4ad19eaded4a94c98dc25f2b7f7e335b5333a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def4ad19eaded4a94c98dc25f2b7f7e335b5333a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=def4ad19eaded4a94c98dc25f2b7f7e335b5333a", "patch": "@@ -2441,73 +2441,85 @@\n    (set_attr \"prefix_rep\" \"1,*\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_expand \"reduc_splus_v8df\"\n-  [(match_operand:V8DF 0 \"register_operand\")\n+(define_expand \"reduc_plus_scal_v8df\"\n+  [(match_operand:DF 0 \"register_operand\")\n    (match_operand:V8DF 1 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n-  ix86_expand_reduc (gen_addv8df3, operands[0], operands[1]);\n+  rtx tmp = gen_reg_rtx (V8DFmode);\n+  ix86_expand_reduc (gen_addv8df3, tmp, operands[1]);\n+  emit_insn (gen_vec_extractv8df (operands[0], tmp, const0_rtx));\n   DONE;\n })\n \n-(define_expand \"reduc_splus_v4df\"\n-  [(match_operand:V4DF 0 \"register_operand\")\n+(define_expand \"reduc_plus_scal_v4df\"\n+  [(match_operand:DF 0 \"register_operand\")\n    (match_operand:V4DF 1 \"register_operand\")]\n   \"TARGET_AVX\"\n {\n   rtx tmp = gen_reg_rtx (V4DFmode);\n   rtx tmp2 = gen_reg_rtx (V4DFmode);\n+  rtx vec_res = gen_reg_rtx (V4DFmode);\n   emit_insn (gen_avx_haddv4df3 (tmp, operands[1], operands[1]));\n   emit_insn (gen_avx_vperm2f128v4df3 (tmp2, tmp, tmp, GEN_INT (1)));\n-  emit_insn (gen_addv4df3 (operands[0], tmp, tmp2));\n+  emit_insn (gen_addv4df3 (vec_res, tmp, tmp2));\n+  emit_insn (gen_vec_extractv4df (operands[0], vec_res, const0_rtx));\n   DONE;\n })\n \n-(define_expand \"reduc_splus_v2df\"\n-  [(match_operand:V2DF 0 \"register_operand\")\n+(define_expand \"reduc_plus_scal_v2df\"\n+  [(match_operand:DF 0 \"register_operand\")\n    (match_operand:V2DF 1 \"register_operand\")]\n   \"TARGET_SSE3\"\n {\n-  emit_insn (gen_sse3_haddv2df3 (operands[0], operands[1], operands[1]));\n+  rtx tmp = gen_reg_rtx (V2DFmode);\n+  emit_insn (gen_sse3_haddv2df3 (tmp, operands[1], operands[1]));\n+  emit_insn (gen_vec_extractv2df (operands[0], tmp, const0_rtx));\n   DONE;\n })\n \n-(define_expand \"reduc_splus_v16sf\"\n-  [(match_operand:V16SF 0 \"register_operand\")\n+(define_expand \"reduc_plus_scal_v16sf\"\n+  [(match_operand:SF 0 \"register_operand\")\n    (match_operand:V16SF 1 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n-  ix86_expand_reduc (gen_addv16sf3, operands[0], operands[1]);\n+  rtx tmp = gen_reg_rtx (V16SFmode);\n+  ix86_expand_reduc (gen_addv16sf3, tmp, operands[1]);\n+  emit_insn (gen_vec_extractv16sf (operands[0], tmp, const0_rtx));\n   DONE;\n })\n \n-(define_expand \"reduc_splus_v8sf\"\n-  [(match_operand:V8SF 0 \"register_operand\")\n+(define_expand \"reduc_plus_scal_v8sf\"\n+  [(match_operand:SF 0 \"register_operand\")\n    (match_operand:V8SF 1 \"register_operand\")]\n   \"TARGET_AVX\"\n {\n   rtx tmp = gen_reg_rtx (V8SFmode);\n   rtx tmp2 = gen_reg_rtx (V8SFmode);\n+  rtx vec_res = gen_reg_rtx (V8SFmode);\n   emit_insn (gen_avx_haddv8sf3 (tmp, operands[1], operands[1]));\n   emit_insn (gen_avx_haddv8sf3 (tmp2, tmp, tmp));\n   emit_insn (gen_avx_vperm2f128v8sf3 (tmp, tmp2, tmp2, GEN_INT (1)));\n-  emit_insn (gen_addv8sf3 (operands[0], tmp, tmp2));\n+  emit_insn (gen_addv8sf3 (vec_res, tmp, tmp2));\n+  emit_insn (gen_vec_extractv8sf (operands[0], vec_res, const0_rtx));\n   DONE;\n })\n \n-(define_expand \"reduc_splus_v4sf\"\n-  [(match_operand:V4SF 0 \"register_operand\")\n+(define_expand \"reduc_plus_scal_v4sf\"\n+  [(match_operand:SF 0 \"register_operand\")\n    (match_operand:V4SF 1 \"register_operand\")]\n   \"TARGET_SSE\"\n {\n+  rtx vec_res = gen_reg_rtx (V4SFmode);\n   if (TARGET_SSE3)\n     {\n       rtx tmp = gen_reg_rtx (V4SFmode);\n       emit_insn (gen_sse3_haddv4sf3 (tmp, operands[1], operands[1]));\n-      emit_insn (gen_sse3_haddv4sf3 (operands[0], tmp, tmp));\n+      emit_insn (gen_sse3_haddv4sf3 (vec_res, tmp, tmp));\n     }\n   else\n-    ix86_expand_reduc (gen_addv4sf3, operands[0], operands[1]);\n+    ix86_expand_reduc (gen_addv4sf3, vec_res, operands[1]);\n+  emit_insn (gen_vec_extractv4sf (operands[0], vec_res, const0_rtx));\n   DONE;\n })\n \n@@ -2521,43 +2533,51 @@\n    (V8DI \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\")\n    (V8DF \"TARGET_AVX512F\")])\n \n-(define_expand \"reduc_<code>_<mode>\"\n+(define_expand \"reduc_<code>_scal_<mode>\"\n   [(smaxmin:REDUC_SMINMAX_MODE\n-     (match_operand:REDUC_SMINMAX_MODE 0 \"register_operand\")\n+     (match_operand:<ssescalarmode> 0 \"register_operand\")\n      (match_operand:REDUC_SMINMAX_MODE 1 \"register_operand\"))]\n   \"\"\n {\n-  ix86_expand_reduc (gen_<code><mode>3, operands[0], operands[1]);\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  ix86_expand_reduc (gen_<code><mode>3, tmp, operands[1]);\n+  emit_insn (gen_vec_extract<mode> (operands[0], tmp, const0_rtx));\n   DONE;\n })\n \n-(define_expand \"reduc_<code>_<mode>\"\n+(define_expand \"reduc_<code>_scal_<mode>\"\n   [(umaxmin:VI_AVX512BW\n-     (match_operand:VI_AVX512BW 0 \"register_operand\")\n+     (match_operand:<ssescalarmode> 0 \"register_operand\")\n      (match_operand:VI_AVX512BW 1 \"register_operand\"))]\n   \"TARGET_AVX512F\"\n {\n-  ix86_expand_reduc (gen_<code><mode>3, operands[0], operands[1]);\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  ix86_expand_reduc (gen_<code><mode>3, tmp, operands[1]);\n+  emit_insn (gen_vec_extract<mode> (operands[0], tmp, const0_rtx));\n   DONE;\n })\n \n-(define_expand \"reduc_<code>_<mode>\"\n+(define_expand \"reduc_<code>_scal_<mode>\"\n   [(umaxmin:VI_256\n-     (match_operand:VI_256 0 \"register_operand\")\n+     (match_operand:<ssescalarmode> 0 \"register_operand\")\n      (match_operand:VI_256 1 \"register_operand\"))]\n   \"TARGET_AVX2\"\n {\n-  ix86_expand_reduc (gen_<code><mode>3, operands[0], operands[1]);\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  ix86_expand_reduc (gen_<code><mode>3, tmp, operands[1]);\n+  emit_insn (gen_vec_extract<mode> (operands[0], tmp, const0_rtx));\n   DONE;\n })\n \n-(define_expand \"reduc_umin_v8hi\"\n+(define_expand \"reduc_umin_scal_v8hi\"\n   [(umin:V8HI\n-     (match_operand:V8HI 0 \"register_operand\")\n+     (match_operand:HI 0 \"register_operand\")\n      (match_operand:V8HI 1 \"register_operand\"))]\n   \"TARGET_SSE4_1\"\n {\n-  ix86_expand_reduc (gen_uminv8hi3, operands[0], operands[1]);\n+  rtx tmp = gen_reg_rtx (V8HImode);\n+  ix86_expand_reduc (gen_uminv8hi3, tmp, operands[1]);\n+  emit_insn (gen_vec_extractv8hi (operands[0], tmp, const0_rtx));\n   DONE;\n })\n "}]}