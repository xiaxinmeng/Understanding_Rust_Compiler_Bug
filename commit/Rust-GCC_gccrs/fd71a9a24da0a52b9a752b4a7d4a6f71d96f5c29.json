{"sha": "fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ3MWE5YTI0ZGEwYTUyYjlhNzUyYjRhN2Q0YTZmNzFkOTZmNWMyOQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2017-05-23T15:47:32Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2017-05-23T15:47:32Z"}, "message": "OpenACC 2.5 kernels construct: num_gangs, num_workers, vector_length clauses\n\n\tgcc/c/\n\t* c-parser.c (OACC_KERNELS_CLAUSE_MASK): Add\n\t\"PRAGMA_OACC_CLAUSE_NUM_GANGS\", \"PRAGMA_OACC_CLAUSE_NUM_WORKERS\",\n\t\"VECTOR_LENGTH\".\n\tgcc/cp/\n\t* parser.c (OACC_KERNELS_CLAUSE_MASK): Add\n\t\"PRAGMA_OACC_CLAUSE_NUM_GANGS\", \"PRAGMA_OACC_CLAUSE_NUM_WORKERS\",\n\t\"VECTOR_LENGTH\".\n\tgcc/fortran/\n\t* openmp.c (OACC_KERNELS_CLAUSES): Add \"OMP_CLAUSE_NUM_GANGS\",\n\t\"OMP_CLAUSE_NUM_WORKERS\", \"OMP_CLAUSE_VECTOR_LENGTH\".\n\tgcc/\n\t* omp-offload.c (execute_oacc_device_lower): Remove the\n\tparallelism dimensions function attributes for unparallelized\n\tOpenACC kernels constructs.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/parallel-dims-1.c: Update.\n\t* c-c++-common/goacc/parallel-dims-2.c: Likewise.\n\t* c-c++-common/goacc/routine-1.c: Likewise.\n\t* c-c++-common/goacc/uninit-dim-clause.c: Likewise.\n\t* g++.dg/goacc/template.C: Likewise.\n\t* gfortran.dg/goacc/kernels-tree.f95: Likewise.\n\t* gfortran.dg/goacc/routine-3.f90: Likewise.\n\t* gfortran.dg/goacc/sie.f95: Likewise.\n\t* gfortran.dg/goacc/uninit-dim-clause.f95: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-2.c: Update.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-loop-2.f95: Likewise.\n\nFrom-SVN: r248370", "tree": {"sha": "97c97af78e8ae6ff6ebb3d425ad65855616b9a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97c97af78e8ae6ff6ebb3d425ad65855616b9a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "464d01188e46ccdb19b4783c5d28ef6bc72d32f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464d01188e46ccdb19b4783c5d28ef6bc72d32f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/464d01188e46ccdb19b4783c5d28ef6bc72d32f9"}], "stats": {"total": 428, "additions": 397, "deletions": 31}, "files": [{"sha": "b38a31d66c5f5de92e1160b18238f87ea894aed7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1,3 +1,9 @@\n+2017-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-offload.c (execute_oacc_device_lower): Remove the\n+\tparallelism dimensions function attributes for unparallelized\n+\tOpenACC kernels constructs.\n+\n 2017-05-23  Martin Liska  <mliska@suse.cz>\n \n \t* cgraph.c (cgraph_node::get_create): Use symtab_node::dump_{asm_,}name"}, {"sha": "cb04d4acb5a9a51bad97f42a74f36ad035d5fabf", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1,3 +1,9 @@\n+2017-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-parser.c (OACC_KERNELS_CLAUSE_MASK): Add\n+\t\"PRAGMA_OACC_CLAUSE_NUM_GANGS\", \"PRAGMA_OACC_CLAUSE_NUM_WORKERS\",\n+\t\"VECTOR_LENGTH\".\n+\n 2017-05-23  Marek Polacek  <polacek@redhat.com>\n \n \t* c-parser.c (c_parser_compound_statement_nostart): Remove redundant"}, {"sha": "03c711bd52852300a7cd75232ba556ca451281a8", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -13984,11 +13984,14 @@ c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_GANGS)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_WORKERS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPY)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYIN)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYOUT)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR_LENGTH)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n \n #define OACC_PARALLEL_CLAUSE_MASK\t\t\t\t\t\\"}, {"sha": "bfe718fae78a751eab05f52a90f35c4964223cd4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1,3 +1,9 @@\n+2017-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* parser.c (OACC_KERNELS_CLAUSE_MASK): Add\n+\t\"PRAGMA_OACC_CLAUSE_NUM_GANGS\", \"PRAGMA_OACC_CLAUSE_NUM_WORKERS\",\n+\t\"VECTOR_LENGTH\".\n+\n 2017-05-23  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (OVL_P): New."}, {"sha": "b39e624734b0ccb57cfcdedfa775f5090c41c2c9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -36432,11 +36432,14 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_GANGS)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_WORKERS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPY)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYIN)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYOUT)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR_LENGTH)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n \n #define OACC_PARALLEL_CLAUSE_MASK\t\t\t\t\t\\"}, {"sha": "b3179e073c77dc471bc927b62be3544890cfba0b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1,3 +1,8 @@\n+2017-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* openmp.c (OACC_KERNELS_CLAUSES): Add \"OMP_CLAUSE_NUM_GANGS\",\n+\t\"OMP_CLAUSE_NUM_WORKERS\", \"OMP_CLAUSE_VECTOR_LENGTH\".\n+\n 2017-05-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/80766"}, {"sha": "5a2b774079be0a90627f8e59cd561a426d7c2a8b", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1932,7 +1932,8 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n    | OMP_CLAUSE_PRESENT_OR_CREATE | OMP_CLAUSE_DEVICEPTR | OMP_CLAUSE_PRIVATE \\\n    | OMP_CLAUSE_FIRSTPRIVATE | OMP_CLAUSE_DEFAULT | OMP_CLAUSE_WAIT)\n #define OACC_KERNELS_CLAUSES \\\n-  (omp_mask (OMP_CLAUSE_IF) | OMP_CLAUSE_ASYNC | OMP_CLAUSE_DEVICEPTR\t      \\\n+  (omp_mask (OMP_CLAUSE_IF) | OMP_CLAUSE_ASYNC | OMP_CLAUSE_NUM_GANGS\t      \\\n+   | OMP_CLAUSE_NUM_WORKERS | OMP_CLAUSE_VECTOR_LENGTH | OMP_CLAUSE_DEVICEPTR \\\n    | OMP_CLAUSE_COPY | OMP_CLAUSE_COPYIN | OMP_CLAUSE_COPYOUT\t\t      \\\n    | OMP_CLAUSE_CREATE | OMP_CLAUSE_PRESENT | OMP_CLAUSE_PRESENT_OR_COPY      \\\n    | OMP_CLAUSE_PRESENT_OR_COPYIN | OMP_CLAUSE_PRESENT_OR_COPYOUT\t      \\"}, {"sha": "54a4e90f70ca2853181699a75aa0a34e6246d994", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1451,6 +1451,15 @@ execute_oacc_device_lower ()\n     = (lookup_attribute (\"oacc kernels parallelized\",\n \t\t\t DECL_ATTRIBUTES (current_function_decl)) != NULL);\n \n+  /* Unparallelized OpenACC kernels constructs must get launched as 1 x 1 x 1\n+     kernels, so remove the parallelism dimensions function attributes\n+     potentially set earlier on.  */\n+  if (is_oacc_kernels && !is_oacc_kernels_parallelized)\n+    {\n+      oacc_set_fn_attrib (current_function_decl, NULL, NULL);\n+      attrs = oacc_get_fn_attrib (current_function_decl);\n+    }\n+\n   /* Discover, partition and process the loops.  */\n   oacc_loop *loops = oacc_loop_discovery ();\n   int fn_level = oacc_fn_attrib_level (attrs);"}, {"sha": "cef3ba62ddb07a8eb43aa60c5bbffd6f618a123b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1,3 +1,15 @@\n+2017-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/parallel-dims-1.c: Update.\n+\t* c-c++-common/goacc/parallel-dims-2.c: Likewise.\n+\t* c-c++-common/goacc/routine-1.c: Likewise.\n+\t* c-c++-common/goacc/uninit-dim-clause.c: Likewise.\n+\t* g++.dg/goacc/template.C: Likewise.\n+\t* gfortran.dg/goacc/kernels-tree.f95: Likewise.\n+\t* gfortran.dg/goacc/routine-3.f90: Likewise.\n+\t* gfortran.dg/goacc/sie.f95: Likewise.\n+\t* gfortran.dg/goacc/uninit-dim-clause.f95: Likewise.\n+\n 2017-05-23  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/lookup/using13.C: Adjust expected error."}, {"sha": "57f682f7a0de16150b4edec660d934d488b02a41", "filename": "gcc/testsuite/c-c++-common/goacc/parallel-dims-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-1.c?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -3,6 +3,9 @@\n \n void f(int i)\n {\n+#pragma acc kernels num_gangs(i) num_workers(i) vector_length(i)\n+  ;\n+\n #pragma acc parallel num_gangs(i) num_workers(i) vector_length(i)\n   ;\n }"}, {"sha": "acfbe7ff031a9fafbda278003d0172b02cb72fee", "filename": "gcc/testsuite/c-c++-common/goacc/parallel-dims-2.c", "status": "modified", "additions": 138, "deletions": 14, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-2.c?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1,67 +1,123 @@\n /* Invalid use of OpenACC parallelism dimensions clauses: num_gangs,\n    num_workers, vector_length.  */\n \n-void acc_kernels(int i)\n+void f(int i, float f)\n {\n-#pragma acc kernels num_gangs(i) /* { dg-error \"'num_gangs' is not valid for '#pragma acc kernels'\" } */\n+#pragma acc kernels num_gangs /* { dg-error \"expected '\\\\(' before end of line\" } */\n   ;\n-#pragma acc kernels num_workers(i) /* { dg-error \"'num_workers' is not valid for '#pragma acc kernels'\" } */\n+#pragma acc kernels num_workers /* { dg-error \"expected '\\\\(' before end of line\" } */\n   ;\n-#pragma acc kernels vector_length(i) /* { dg-error \"'vector_length' is not valid for '#pragma acc kernels'\" } */\n+#pragma acc kernels vector_length /* { dg-error \"expected '\\\\(' before end of line\" } */\n   ;\n-}\n \n-void acc_parallel(int i, float f)\n-{\n #pragma acc parallel num_gangs /* { dg-error \"expected '\\\\(' before end of line\" } */\n   ;\n #pragma acc parallel num_workers /* { dg-error \"expected '\\\\(' before end of line\" } */\n   ;\n #pragma acc parallel vector_length /* { dg-error \"expected '\\\\(' before end of line\" } */\n   ;\n \n+\n+#pragma acc kernels num_gangs( /* { dg-error \"expected (primary-|)expression before end of line\" } */\n+  ;\n+#pragma acc kernels num_workers( /* { dg-error \"expected (primary-|)expression before end of line\" } */\n+  ;\n+#pragma acc kernels vector_length( /* { dg-error \"expected (primary-|)expression before end of line\" } */\n+  ;\n+\n #pragma acc parallel num_gangs( /* { dg-error \"expected (primary-|)expression before end of line\" } */\n   ;\n #pragma acc parallel num_workers( /* { dg-error \"expected (primary-|)expression before end of line\" } */\n   ;\n #pragma acc parallel vector_length( /* { dg-error \"expected (primary-|)expression before end of line\" } */\n   ;\n \n+\n+#pragma acc kernels num_gangs() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */\n+  ;\n+#pragma acc kernels num_workers() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */\n+  ;\n+#pragma acc kernels vector_length() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */\n+  ;\n+\n #pragma acc parallel num_gangs() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */\n   ;\n #pragma acc parallel num_workers() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */\n   ;\n #pragma acc parallel vector_length() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */\n   ;\n \n+\n+#pragma acc kernels num_gangs(1 /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+#pragma acc kernels num_workers(1 /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+#pragma acc kernels vector_length(1 /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+\n #pragma acc parallel num_gangs(1 /* { dg-error \"expected '\\\\)' before end of line\" } */\n   ;\n #pragma acc parallel num_workers(1 /* { dg-error \"expected '\\\\)' before end of line\" } */\n   ;\n #pragma acc parallel vector_length(1 /* { dg-error \"expected '\\\\)' before end of line\" } */\n   ;\n \n+\n+#pragma acc kernels num_gangs(i /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+#pragma acc kernels num_workers(i /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+#pragma acc kernels vector_length(i /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+\n #pragma acc parallel num_gangs(i /* { dg-error \"expected '\\\\)' before end of line\" } */\n   ;\n #pragma acc parallel num_workers(i /* { dg-error \"expected '\\\\)' before end of line\" } */\n   ;\n #pragma acc parallel vector_length(i /* { dg-error \"expected '\\\\)' before end of line\" } */\n   ;\n \n+\n+#pragma acc kernels num_gangs(1 i /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+#pragma acc kernels num_workers(1 i /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+#pragma acc kernels vector_length(1 i /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+\n #pragma acc parallel num_gangs(1 i /* { dg-error \"expected '\\\\)' before 'i'\" } */\n   ;\n #pragma acc parallel num_workers(1 i /* { dg-error \"expected '\\\\)' before 'i'\" } */\n   ;\n #pragma acc parallel vector_length(1 i /* { dg-error \"expected '\\\\)' before 'i'\" } */\n   ;\n \n+\n+#pragma acc kernels num_gangs(1 i) /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+#pragma acc kernels num_workers(1 i) /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+#pragma acc kernels vector_length(1 i) /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+\n #pragma acc parallel num_gangs(1 i) /* { dg-error \"expected '\\\\)' before 'i'\" } */\n   ;\n #pragma acc parallel num_workers(1 i) /* { dg-error \"expected '\\\\)' before 'i'\" } */\n   ;\n #pragma acc parallel vector_length(1 i) /* { dg-error \"expected '\\\\)' before 'i'\" } */\n   ;\n \n+\n+#pragma acc kernels num_gangs(1, i /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  /* { dg-bogus \"expected '\\\\)' before end of line\" \"TODO\" { xfail c } .-1 } */\n+  ;\n+#pragma acc kernels num_workers(1, i /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  /* { dg-bogus \"expected '\\\\)' before end of line\" \"TODO\" { xfail c } .-1 } */\n+  ;\n+#pragma acc kernels vector_length(1, i /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  /* { dg-bogus \"expected '\\\\)' before end of line\" \"TODO\" { xfail c } .-1 } */\n+  ;\n+\n #pragma acc parallel num_gangs(1, i /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n   /* { dg-bogus \"expected '\\\\)' before end of line\" \"TODO\" { xfail c } .-1 } */\n   ;\n@@ -72,18 +128,42 @@ void acc_parallel(int i, float f)\n   /* { dg-bogus \"expected '\\\\)' before end of line\" \"TODO\" { xfail c } .-1 } */\n   ;\n \n+\n+#pragma acc kernels num_gangs(1, i) /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  ;\n+#pragma acc kernels num_workers(1, i) /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  ;\n+#pragma acc kernels vector_length(1, i) /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  ;\n+\n #pragma acc parallel num_gangs(1, i) /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n   ;\n #pragma acc parallel num_workers(1, i) /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n   ;\n #pragma acc parallel vector_length(1, i) /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n   ;\n \n-#pragma acc parallel num_gangs(num_gangs) /* { dg-error \"'num_gangs' (un|was not )declared\" } */\n+\n+#pragma acc kernels num_gangs(num_gangs_k) /* { dg-error \"'num_gangs_k' (un|was not )declared\" } */\n+  ;\n+#pragma acc kernels num_workers(num_workers_k) /* { dg-error \"'num_workers_k' (un|was not )declared\" } */\n+  ;\n+#pragma acc kernels vector_length(vector_length_k) /* { dg-error \"'vector_length_k' (un|was not )declared\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs(num_gangs_p) /* { dg-error \"'num_gangs_p' (un|was not )declared\" } */\n+  ;\n+#pragma acc parallel num_workers(num_workers_p) /* { dg-error \"'num_workers_p' (un|was not )declared\" } */\n+  ;\n+#pragma acc parallel vector_length(vector_length_p) /* { dg-error \"'vector_length_p' (un|was not )declared\" } */\n+  ;\n+\n+\n+#pragma acc kernels num_gangs(f) /* { dg-error \"'num_gangs' expression must be integral\" } */\n   ;\n-#pragma acc parallel num_workers(num_workers) /* { dg-error \"'num_workers' (un|was not )declared\" } */\n+#pragma acc kernels num_workers(f) /* { dg-error \"'num_workers' expression must be integral\" } */\n   ;\n-#pragma acc parallel vector_length(vector_length) /* { dg-error \"'vector_length' (un|was not )declared\" } */\n+#pragma acc kernels vector_length(f) /* { dg-error \"'vector_length' expression must be integral\" } */\n   ;\n \n #pragma acc parallel num_gangs(f) /* { dg-error \"'num_gangs' expression must be integral\" } */\n@@ -93,28 +173,53 @@ void acc_parallel(int i, float f)\n #pragma acc parallel vector_length(f) /* { dg-error \"'vector_length' expression must be integral\" } */\n   ;\n \n+\n+#pragma acc kernels num_gangs((float) 1) /* { dg-error \"'num_gangs' expression must be integral\" } */\n+  ;\n+#pragma acc kernels num_workers((float) 1) /* { dg-error \"'num_workers' expression must be integral\" } */\n+  ;\n+#pragma acc kernels vector_length((float) 1) /* { dg-error \"'vector_length' expression must be integral\" } */\n+  ;\n+\n #pragma acc parallel num_gangs((float) 1) /* { dg-error \"'num_gangs' expression must be integral\" } */\n   ;\n #pragma acc parallel num_workers((float) 1) /* { dg-error \"'num_workers' expression must be integral\" } */\n   ;\n #pragma acc parallel vector_length((float) 1) /* { dg-error \"'vector_length' expression must be integral\" } */\n   ;\n \n+\n+#pragma acc kernels num_gangs(0) /* { dg-warning \"'num_gangs' value must be positive\" } */\n+  ;\n+#pragma acc kernels num_workers(0) /* { dg-warning \"'num_workers' value must be positive\" } */\n+  ;\n+#pragma acc kernels vector_length(0) /* { dg-warning \"'vector_length' value must be positive\" } */\n+  ;\n+\n #pragma acc parallel num_gangs(0) /* { dg-warning \"'num_gangs' value must be positive\" } */\n   ;\n #pragma acc parallel num_workers(0) /* { dg-warning \"'num_workers' value must be positive\" } */\n   ;\n #pragma acc parallel vector_length(0) /* { dg-warning \"'vector_length' value must be positive\" } */\n   ;\n \n+\n+#pragma acc kernels num_gangs((int) -1.2) /* { dg-warning \"'num_gangs' value must be positive\" } */\n+  ;\n+#pragma acc kernels num_workers((int) -1.2) /* { dg-warning \"'num_workers' value must be positive\" } */\n+  ;\n+#pragma acc kernels vector_length((int) -1.2) /* { dg-warning \"'vector_length' value must be positive\" } */\n+  ;\n+\n #pragma acc parallel num_gangs((int) -1.2) /* { dg-warning \"'num_gangs' value must be positive\" } */\n   ;\n #pragma acc parallel num_workers((int) -1.2) /* { dg-warning \"'num_workers' value must be positive\" } */\n   ;\n #pragma acc parallel vector_length((int) -1.2) /* { dg-warning \"'vector_length' value must be positive\" } */\n   ;\n \n-#pragma acc parallel \\\n+\n+#pragma acc kernels \\\n   num_gangs(1) /* { dg-error \"too many 'num_gangs' clauses\" \"\" { target c } } */ \\\n   num_workers(1) /* { dg-error \"too many 'num_workers' clauses\" \"\" { target c } } */ \\\n   vector_length(1) /* { dg-error \"too many 'vector_length' clauses\" \"\" { target c } } */ \\\n@@ -123,12 +228,31 @@ void acc_parallel(int i, float f)\n   num_gangs(1) /* { dg-error \"too many 'num_gangs' clauses\" \"\" { target c++ } } */\n   ;\n \n-#pragma acc parallel \\\n+#pragma acc parallel\t\t\t\t\t\t\t\\\n+  num_gangs(1) /* { dg-error \"too many 'num_gangs' clauses\" \"\" { target c } } */ \\\n+  num_workers(1) /* { dg-error \"too many 'num_workers' clauses\" \"\" { target c } } */ \\\n+  vector_length(1) /* { dg-error \"too many 'vector_length' clauses\" \"\" { target c } } */ \\\n+  num_workers(1) /* { dg-error \"too many 'num_workers' clauses\" \"\" { target c++ } } */ \\\n+  vector_length(1) /* { dg-error \"too many 'vector_length' clauses\" \"\" { target c++ } } */ \\\n+  num_gangs(1) /* { dg-error \"too many 'num_gangs' clauses\" \"\" { target c++ } } */\n+  ;\n+\n+\n+#pragma acc kernels \\\n+  num_gangs(-1) /* { dg-warning \"'num_gangs' value must be positive\" } */ \\\n+  num_workers() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */ \\\n+  vector_length(abc_k) /* { dg-error \"'abc_k' (un|was not )declared\" } */ \\\n+  num_workers(0.5) /* { dg-error \"'num_workers' expression must be integral\" } */ \\\n+  vector_length(&f) /* { dg-error \"'vector_length' expression must be integral\" } */ \\\n+  num_gangs( /* { dg-error \"expected (primary-|)expression before end of line\" \"TODO\" { xfail c } } */\n+  ;\n+\n+#pragma acc parallel\t\t\t\t\t\t\t\\\n   num_gangs(-1) /* { dg-warning \"'num_gangs' value must be positive\" } */ \\\n   num_workers() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */ \\\n-  vector_length(abc) /* { dg-error \"'abc' (un|was not )declared\" } */ \\\n+  vector_length(abc_p) /* { dg-error \"'abc_p' (un|was not )declared\" } */ \\\n   num_workers(0.5) /* { dg-error \"'num_workers' expression must be integral\" } */ \\\n-  vector_length(&acc_parallel) /* { dg-error \"'vector_length' expression must be integral\" } */ \\\n+  vector_length(&f) /* { dg-error \"'vector_length' expression must be integral\" } */ \\\n   num_gangs( /* { dg-error \"expected (primary-|)expression before end of line\" \"TODO\" { xfail c } } */\n   ;\n }"}, {"sha": "a75692246b64c7fdd6a79cc33c409cddc21a0a3c", "filename": "gcc/testsuite/c-c++-common/goacc/routine-1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-1.c?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -21,6 +21,13 @@ void seq (void)\n \n int main ()\n {\n+#pragma acc kernels num_gangs (32) num_workers (32) vector_length (32)\n+  {\n+    gang ();\n+    worker ();\n+    vector ();\n+    seq ();\n+  }\n \n #pragma acc parallel num_gangs (32) num_workers (32) vector_length (32)\n   {"}, {"sha": "9f11196bdbe81c1bc7612f93bc9e8dd403398267", "filename": "gcc/testsuite/c-c++-common/goacc/uninit-dim-clause.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-dim-clause.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-dim-clause.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-dim-clause.c?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1,10 +1,6 @@\n-/* { dg-do compile } */\n /* { dg-additional-options \"-Wuninitialized\" } */\n \n-#include <stdbool.h>\n-\n-int\n-main (void)\n+void acc_parallel()\n {\n   int i, j, k;\n \n@@ -17,3 +13,17 @@ main (void)\n   #pragma acc parallel vector_length(k) /* { dg-warning \"is used uninitialized in this function\" } */\n   ;\n }\n+\n+void acc_kernels()\n+{\n+  int i, j, k;\n+\n+  #pragma acc kernels num_gangs(i) /* { dg-warning \"is used uninitialized in this function\" } */\n+  ;\n+\n+  #pragma acc kernels num_workers(j) /* { dg-warning \"is used uninitialized in this function\" } */\n+  ;\n+\n+  #pragma acc kernels vector_length(k) /* { dg-warning \"is used uninitialized in this function\" } */\n+  ;\n+}"}, {"sha": "852f42f2b42776d0eeb55925cf81d292ab611819", "filename": "gcc/testsuite/g++.dg/goacc/template.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ftemplate.C?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -100,6 +100,10 @@ oacc_kernels_copy (T a)\n   float y = 3;\n   double z = 4;\n \n+#pragma acc kernels num_gangs (a) num_workers (a) vector_length (a) default (none) copyout (b) copyin (a)\n+  for (int i = 0; i < 1; i++)\n+    b = a;\n+\n #pragma acc kernels copy (w, x, y, z)\n   {\n     w = accDouble<char>(w);"}, {"sha": "7daca59020ed6679385cff071f65a0a3e50a97e8", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-tree.f95", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-tree.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-tree.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-tree.f95?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -6,7 +6,8 @@ program test\n   integer :: q, i, j, k, m, n, o, p, r, s, t, u, v, w\n   logical :: l = .true.\n \n-  !$acc kernels if(l) async copy(i), copyin(j), copyout(k), create(m) &\n+  !$acc kernels if(l) async num_gangs(i) num_workers(i) vector_length(i) &\n+  !$acc copy(i), copyin(j), copyout(k), create(m) &\n   !$acc present(o), pcopy(p), pcopyin(r), pcopyout(s), pcreate(t) &\n   !$acc deviceptr(u)\n   !$acc end kernels\n@@ -16,6 +17,9 @@ end program test\n \n ! { dg-final { scan-tree-dump-times \"if\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"async\" 1 \"original\" } } \n+! { dg-final { scan-tree-dump-times \"num_gangs\" 1 \"original\" } } \n+! { dg-final { scan-tree-dump-times \"num_workers\" 1 \"original\" } } \n+! { dg-final { scan-tree-dump-times \"vector_length\" 1 \"original\" } } \n \n ! { dg-final { scan-tree-dump-times \"map\\\\(force_tofrom:i\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(force_to:j\\\\)\" 1 \"original\" } } "}, {"sha": "6773f62f0f45d79df336d79767638f9144396a83", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-3.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-3.f90?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -4,6 +4,12 @@ SUBROUTINE gwv\n     INTEGER  :: i\n     REAL(KIND=8), ALLOCATABLE :: un(:),  ua(:)\n \n+    !$acc kernels num_gangs(2) num_workers(4) vector_length(32)\n+    DO jj = 1, 100\n+       un(i) = ua(i)\n+    END DO\n+    !$acc end kernels\n+\n     !$acc parallel num_gangs(2) num_workers(4) vector_length(32)\n     DO jj = 1, 100\n        un(i) = ua(i)"}, {"sha": "abfe28bc5337b99b0ee14be4a88201751a34ebde", "filename": "gcc/testsuite/gfortran.dg/goacc/sie.f95", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsie.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsie.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsie.f95?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -95,6 +95,34 @@ program test\n   !$acc parallel num_gangs(\"1\") ! { dg-error \"scalar INTEGER expression\" }\n   !$acc end parallel\n \n+  !$acc kernels num_gangs ! { dg-error \"Unclassifiable OpenACC directive\" }\n+\n+  !$acc kernels num_gangs(3)\n+  !$acc end kernels\n+\n+  !$acc kernels num_gangs(i)\n+  !$acc end kernels\n+\n+  !$acc kernels num_gangs(i+1)\n+  !$acc end kernels\n+\n+  !$acc kernels num_gangs(-1) ! { dg-warning \"must be positive\" }\n+  !$acc end kernels\n+\n+  !$acc kernels num_gangs(0) ! { dg-warning \"must be positive\" }\n+  !$acc end kernels\n+\n+  !$acc kernels num_gangs() ! { dg-error \"Invalid character in name\" }\n+\n+  !$acc kernels num_gangs(1.5) ! { dg-error \"scalar INTEGER expression\" }\n+  !$acc end kernels\n+\n+  !$acc kernels num_gangs(.true.) ! { dg-error \"scalar INTEGER expression\" }\n+  !$acc end kernels\n+\n+  !$acc kernels num_gangs(\"1\") ! { dg-error \"scalar INTEGER expression\" }\n+  !$acc end kernels\n+\n \n   !$acc parallel num_workers ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n@@ -124,6 +152,34 @@ program test\n   !$acc parallel num_workers(\"1\") ! { dg-error \"scalar INTEGER expression\" }\n   !$acc end parallel\n \n+  !$acc kernels num_workers ! { dg-error \"Unclassifiable OpenACC directive\" }\n+\n+  !$acc kernels num_workers(3)\n+  !$acc end kernels\n+\n+  !$acc kernels num_workers(i)\n+  !$acc end kernels\n+\n+  !$acc kernels num_workers(i+1)\n+  !$acc end kernels\n+\n+  !$acc kernels num_workers(-1) ! { dg-warning \"must be positive\" }\n+  !$acc end kernels\n+\n+  !$acc kernels num_workers(0) ! { dg-warning \"must be positive\" }\n+  !$acc end kernels\n+\n+  !$acc kernels num_workers() ! { dg-error \"Invalid character in name\" }\n+\n+  !$acc kernels num_workers(1.5) ! { dg-error \"scalar INTEGER expression\" }\n+  !$acc end kernels\n+\n+  !$acc kernels num_workers(.true.) ! { dg-error \"scalar INTEGER expression\" }\n+  !$acc end kernels\n+\n+  !$acc kernels num_workers(\"1\") ! { dg-error \"scalar INTEGER expression\" }\n+  !$acc end kernels\n+\n \n   !$acc parallel vector_length ! { dg-error \"Unclassifiable OpenACC directive\" }\n \n@@ -153,6 +209,34 @@ program test\n   !$acc parallel vector_length(\"1\") ! { dg-error \"scalar INTEGER expression\" }\n   !$acc end parallel\n \n+  !$acc kernels vector_length ! { dg-error \"Unclassifiable OpenACC directive\" }\n+\n+  !$acc kernels vector_length(3)\n+  !$acc end kernels\n+\n+  !$acc kernels vector_length(i)\n+  !$acc end kernels\n+\n+  !$acc kernels vector_length(i+1)\n+  !$acc end kernels\n+\n+  !$acc kernels vector_length(-1) ! { dg-warning \"must be positive\" }\n+  !$acc end kernels\n+\n+  !$acc kernels vector_length(0) ! { dg-warning \"must be positive\" }\n+  !$acc end kernels\n+\n+  !$acc kernels vector_length() ! { dg-error \"Invalid character in name\" }\n+\n+  !$acc kernels vector_length(1.5) ! { dg-error \"scalar INTEGER expression\" }\n+  !$acc end kernels\n+\n+  !$acc kernels vector_length(.true.) ! { dg-error \"scalar INTEGER expression\" }\n+  !$acc end kernels\n+\n+  !$acc kernels vector_length(\"1\") ! { dg-error \"scalar INTEGER expression\" }\n+  !$acc end kernels\n+\n \n   !$acc loop gang\n   do i = 1,10\n@@ -249,4 +333,4 @@ program test\n   do i = 1,10\n   enddo\n \n-end program test\n\\ No newline at end of file\n+end program test"}, {"sha": "5dea42b2e7e0577d5a2cee7d4ea85df5a2078e1b", "filename": "gcc/testsuite/gfortran.dg/goacc/uninit-dim-clause.f95", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-dim-clause.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-dim-clause.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-dim-clause.f95?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1,7 +1,6 @@\n-! { dg-do compile }\n ! { dg-additional-options \"-Wuninitialized\" }\n \n-program test\n+subroutine acc_parallel\n   implicit none\n   integer :: i, j, k\n \n@@ -13,5 +12,18 @@ program test\n \n   !$acc parallel vector_length(k) ! { dg-warning \"is used uninitialized in this function\" }\n   !$acc end parallel\n+end subroutine acc_parallel\n \n-end program test\n+subroutine acc_kernels\n+  implicit none\n+  integer :: i, j, k\n+\n+  !$acc kernels num_gangs(i) ! { dg-warning \"is used uninitialized in this function\" }\n+  !$acc end kernels\n+\n+  !$acc kernels num_workers(j) ! { dg-warning \"is used uninitialized in this function\" }\n+  !$acc end kernels\n+\n+  !$acc kernels vector_length(k) ! { dg-warning \"is used uninitialized in this function\" }\n+  !$acc end kernels\n+end subroutine acc_kernels"}, {"sha": "32f8bf10b2b70c870bba1d9d271196136577ba7b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -1,5 +1,9 @@\n 2017-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-2.c: Update.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-loop-2.f95: Likewise.\n+\n \t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Rewrite.\n \t* testsuite/lib/libgomp.exp\n \t(check_effective_target_openacc_nvidia_accel_configured): New"}, {"sha": "b84088879c659c56db42f0207c411388af2e5048", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-loop-2.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-2.c?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -14,27 +14,40 @@ main (void)\n   b = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n   c = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n \n+  /* Parallelism dimensions: compiler/runtime decides.  */\n #pragma acc kernels copyout (a[0:N])\n   {\n     for (COUNTERTYPE i = 0; i < N; i++)\n       a[i] = i * 2;\n   }\n \n-#pragma acc kernels copyout (b[0:N])\n+  /* Parallelism dimensions: variable.  */\n+#pragma acc kernels copyout (b[0:N]) \\\n+  num_gangs (3 + a[3]) num_workers (5 + a[5]) vector_length (7 + a[7])\n+  /* { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring runtime setting\" } */\n   {\n     for (COUNTERTYPE i = 0; i < N; i++)\n       b[i] = i * 4;\n   }\n \n-#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  /* Parallelism dimensions: literal.  */\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) \\\n+  num_gangs (3) num_workers (5) vector_length (7)\n+  /* { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring 7\" } */\n   {\n     for (COUNTERTYPE ii = 0; ii < N; ii++)\n       c[ii] = a[ii] + b[ii];\n   }\n \n   for (COUNTERTYPE i = 0; i < N; i++)\n-    if (c[i] != a[i] + b[i])\n-      abort ();\n+    {\n+      if (a[i] != i * 2)\n+\tabort ();\n+      if (b[i] != i * 4)\n+\tabort ();\n+      if (c[i] != a[i] + b[i])\n+\tabort ();\n+    }\n \n   free (a);\n   free (b);"}, {"sha": "8308f7c541f80eb7a21e0d9e253019bc6269fde8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -520,5 +520,40 @@ int main ()\n   }\n \n \n+  /* Unparallelized OpenACC kernels constructs must get launched as 1 x 1 x 1\n+     kernels even when there are explicit num_gangs, num_workers, or\n+     vector_length clauses.  */\n+  {\n+    int gangs = 5;\n+#define WORKERS 5\n+#define VECTORS 13\n+    int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n+    gangs_min = workers_min = vectors_min = INT_MAX;\n+    gangs_max = workers_max = vectors_max = INT_MIN;\n+#pragma acc kernels \\\n+  num_gangs (gangs) \\\n+  num_workers (WORKERS) \\\n+  vector_length (VECTORS)\n+    {\n+      /* This is to make the OpenACC kernels construct unparallelizable.  */\n+      asm volatile (\"\" : : : \"memory\");\n+\n+#pragma acc loop reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+      for (int i = 100; i > -100; --i)\n+\t{\n+\t  gangs_min = gangs_max = acc_gang ();\n+\t  workers_min = workers_max = acc_worker ();\n+\t  vectors_min = vectors_max = acc_vector ();\n+\t}\n+    }\n+    if (gangs_min != 0 || gangs_max != 1 - 1\n+\t|| workers_min != 0 || workers_max != 1 - 1\n+\t|| vectors_min != 0 || vectors_max != 1 - 1)\n+      __builtin_abort ();\n+#undef VECTORS\n+#undef WORKERS\n+  }\n+\n+\n   return 0;\n }"}, {"sha": "b88ca67f2c7e83b185d7f6389ad68c65b5d5d4ff", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-loop-2.f95", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-2.f95?ref=fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29", "patch": "@@ -6,25 +6,34 @@ program main\n   integer, dimension (0:n-1) :: a, b, c\n   integer                    :: i, ii\n \n+  ! Parallelism dimensions: compiler/runtime decides.\n   !$acc kernels copyout (a(0:n-1))\n   do i = 0, n - 1\n      a(i) = i * 2\n   end do\n   !$acc end kernels\n \n-  !$acc kernels copyout (b(0:n-1))\n+  ! Parallelism dimensions: variable.\n+  !$acc kernels copyout (b(0:n-1)) &\n+  !$acc num_gangs (3 + a(3)) num_workers (5 + a(5)) vector_length (7 + a(7))\n+  ! { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring runtime setting\" }\n   do i = 0, n -1\n      b(i) = i * 4\n   end do\n   !$acc end kernels\n \n-  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n+  ! Parallelism dimensions: literal.\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) &\n+  !$acc num_gangs (3) num_workers (5) vector_length (7)\n+  ! { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring 7\" }\n   do ii = 0, n - 1\n      c(ii) = a(ii) + b(ii)\n   end do\n   !$acc end kernels\n \n   do i = 0, n - 1\n+     if (a(i) .ne. i * 2) call abort\n+     if (b(i) .ne. i * 4) call abort\n      if (c(i) .ne. a(i) + b(i)) call abort\n   end do\n "}]}