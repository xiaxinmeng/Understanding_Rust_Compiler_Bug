{"sha": "a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlkZDVhNDY2YWU3MGQ4NTQ3YWUwMWM4YWZhMDQ2YTVmYzU4ZDUwMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-04-28T07:50:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-04-28T07:50:48Z"}, "message": "PR libstdc++/21244 (cont)\n\n2005-04-28  Paolo Carlini  <pcarlini@suse.de>\n\t    Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n\tPR libstdc++/21244 (cont)\n\t* include/bits/cpp_type_traits.h (struct __traitor): Convert\n\tto bool the values.\n\t* include/bits/stl_algo.h: Convert _S_threshold to int.\n\t* include/bits/stl_bvector.h: Revert previous change, convert\n\t_S_word_bit to int.\n\t* include/debug/formatter.h: Convert __max_parameters to\n\tsize_t.\n\t* include/ext/mt_allocator.h: Likewise for _S_chunk_size.\n\t* include/ext/pool_allocator.h: Likewise for _S_max_bytes and\n\t_S_align.\n\t* include/ext/rope: Likewise for _S_alloc_granularity; convert\n\t_S_max_rope_depth to int.\n\t* include/ext/ropeimpl.h: Convert _S_path_cache_len to int;\n\t_S_max_rope_depth to int; _S_copy_max to size_t.\n\nCo-Authored-By: Gabriel Dos Reis <gdr@integrable-solutions.net>\n\nFrom-SVN: r98915", "tree": {"sha": "9cc23599a901c4f0d4c569c113f3dcbf84a3e171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cc23599a901c4f0d4c569c113f3dcbf84a3e171"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/comments", "author": null, "committer": null, "parents": [{"sha": "fe9565ed02f91878b6b01eebbdb9c73e3b8ee0ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9565ed02f91878b6b01eebbdb9c73e3b8ee0ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe9565ed02f91878b6b01eebbdb9c73e3b8ee0ee"}], "stats": {"total": 143, "additions": 85, "deletions": 58}, "files": [{"sha": "a2c94e04144b177643a09ada413786471db339e7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "patch": "@@ -1,3 +1,22 @@\n+2005-04-28  Paolo Carlini  <pcarlini@suse.de>\n+\t    Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tPR libstdc++/21244 (cont)\n+\t* include/bits/cpp_type_traits.h (struct __traitor): Convert\n+\tto bool the values.\n+\t* include/bits/stl_algo.h: Convert _S_threshold to int.\n+\t* include/bits/stl_bvector.h: Revert previous change, convert\n+\t_S_word_bit to int.\n+\t* include/debug/formatter.h: Convert __max_parameters to\n+\tsize_t.\n+\t* include/ext/mt_allocator.h: Likewise for _S_chunk_size.\n+\t* include/ext/pool_allocator.h: Likewise for _S_max_bytes and\n+\t_S_align.\n+\t* include/ext/rope: Likewise for _S_alloc_granularity; convert\n+\t_S_max_rope_depth to int.\n+\t* include/ext/ropeimpl.h: Convert _S_path_cache_len to int;\n+\t_S_max_rope_depth to int; _S_copy_max to size_t.\n+\n 2005-04-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/doxygen/user.cfg.in: Update to doxygen-1.4.2."}, {"sha": "e3887196429f51ebdbdeb23cf0a2d850fe55454c", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "patch": "@@ -103,10 +103,12 @@ namespace std\n     struct __truth_type<true>\n     { typedef __true_type __type; };\n \n+  // N.B. The conversions to bool are needed due to the issue\n+  // explained in c++/19404.\n   template<class _Sp, class _Tp>\n     struct __traitor\n     {\n-      enum { __value = _Sp::__value || _Tp::__value };\n+      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };\n       typedef typename __truth_type<__value>::__type __type;\n     };\n "}, {"sha": "c0eaf5cd516b6aca2b79d43d766f00835f9d5499", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "patch": "@@ -2212,10 +2212,10 @@ namespace std\n     __final_insertion_sort(_RandomAccessIterator __first,\n \t\t\t   _RandomAccessIterator __last)\n     {\n-      if (__last - __first > _S_threshold)\n+      if (__last - __first > int(_S_threshold))\n \t{\n-\t  std::__insertion_sort(__first, __first + _S_threshold);\n-\t  std::__unguarded_insertion_sort(__first + _S_threshold, __last);\n+\t  std::__insertion_sort(__first, __first + int(_S_threshold));\n+\t  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);\n \t}\n       else\n \tstd::__insertion_sort(__first, __last);\n@@ -2231,10 +2231,10 @@ namespace std\n     __final_insertion_sort(_RandomAccessIterator __first,\n \t\t\t   _RandomAccessIterator __last, _Compare __comp)\n     {\n-      if (__last - __first > _S_threshold)\n+      if (__last - __first > int(_S_threshold))\n \t{\n-\t  std::__insertion_sort(__first, __first + _S_threshold, __comp);\n-\t  std::__unguarded_insertion_sort(__first + _S_threshold, __last,\n+\t  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);\n+\t  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,\n \t\t\t\t\t  __comp);\n \t}\n       else\n@@ -2481,7 +2481,7 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n \t_ValueType;\n \n-      while (__last - __first > _S_threshold)\n+      while (__last - __first > int(_S_threshold))\n \t{\n \t  if (__depth_limit == 0)\n \t    {\n@@ -2517,7 +2517,7 @@ namespace std\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n \t_ValueType;\n \n-      while (__last - __first > _S_threshold)\n+      while (__last - __first > int(_S_threshold))\n \t{\n \t  if (__depth_limit == 0)\n \t    {"}, {"sha": "5e95415e5de051a87eb22ca54afef09f34e0fad6", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "patch": "@@ -64,7 +64,7 @@\n namespace _GLIBCXX_STD\n {\n   typedef unsigned long _Bit_type;\n-  enum _S_word_bit_enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };\n+  enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };\n \n   struct _Bit_reference\n   {\n@@ -117,7 +117,7 @@ namespace _GLIBCXX_STD\n     void\n     _M_bump_up()\n     {\n-      if (_M_offset++ == _S_word_bit - 1)\n+      if (_M_offset++ == int(_S_word_bit) - 1)\n \t{\n \t  _M_offset = 0;\n \t  ++_M_p;\n@@ -129,7 +129,7 @@ namespace _GLIBCXX_STD\n     {\n       if (_M_offset-- == 0)\n \t{\n-\t  _M_offset = _S_word_bit - 1;\n+\t  _M_offset = int(_S_word_bit) - 1;\n \t  --_M_p;\n \t}\n     }\n@@ -138,11 +138,11 @@ namespace _GLIBCXX_STD\n     _M_incr(ptrdiff_t __i)\n     {\n       difference_type __n = __i + _M_offset;\n-      _M_p += __n / _S_word_bit;\n-      __n = __n % _S_word_bit;\n+      _M_p += __n / int(_S_word_bit);\n+      __n = __n % int(_S_word_bit);\n       if (__n < 0)\n \t{\n-\t  _M_offset = static_cast<unsigned int>(__n + _S_word_bit);\n+\t  _M_offset = static_cast<unsigned int>(__n + int(_S_word_bit));\n \t  --_M_p;\n \t}\n       else\n@@ -180,7 +180,8 @@ namespace _GLIBCXX_STD\n   inline ptrdiff_t\n   operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n   {\n-    return _S_word_bit * (__x._M_p - __y._M_p) + __x._M_offset - __y._M_offset;\n+    return (int(_S_word_bit) * (__x._M_p - __y._M_p)\n+\t    + __x._M_offset - __y._M_offset);\n   }\n \n   struct _Bit_iterator : public _Bit_iterator_base\n@@ -384,7 +385,8 @@ namespace _GLIBCXX_STD\n \n       _Bit_type*\n       _M_allocate(size_t __n)\n-      { return _M_impl.allocate((__n + _S_word_bit - 1) / _S_word_bit); }\n+      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)\n+\t\t\t\t/ int(_S_word_bit)); }\n \n       void\n       _M_deallocate()\n@@ -452,8 +454,8 @@ template<typename _Alloc>\n     {\n       _Bit_type* __q = this->_M_allocate(__n);\n       this->_M_impl._M_end_of_storage = (__q\n-\t\t\t\t\t + ((__n + _S_word_bit - 1)\n-\t\t\t\t\t    / _S_word_bit));\n+\t\t\t\t\t + ((__n + int(_S_word_bit) - 1)\n+\t\t\t\t\t    / int(_S_word_bit)));\n       this->_M_impl._M_start = iterator(__q, 0);\n       this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);\n     }\n@@ -477,8 +479,9 @@ template<typename _Alloc>\n \t  *__i++ = __x;\n \t  this->_M_impl._M_finish = std::copy(__position, end(), __i);\n \t  this->_M_deallocate();\n-\t  this->_M_impl._M_end_of_storage = (__q + ((__len + _S_word_bit - 1)\n-\t\t\t\t\t\t    / _S_word_bit));\n+\t  this->_M_impl._M_end_of_storage = (__q + ((__len\n+\t\t\t\t\t\t     + int(_S_word_bit) - 1)\n+\t\t\t\t\t\t    / int(_S_word_bit)));\n \t  this->_M_impl._M_start = iterator(__q, 0);\n \t}\n     }\n@@ -543,8 +546,9 @@ template<typename _Alloc>\n \t\tthis->_M_impl._M_finish = std::copy(__position, end(), __i);\n \t\tthis->_M_deallocate();\n \t\tthis->_M_impl._M_end_of_storage = (__q\n-\t\t\t\t\t\t   + ((__len + _S_word_bit - 1)\n-\t\t\t\t\t\t      / _S_word_bit));\n+\t\t\t\t\t\t   + ((__len\n+\t\t\t\t\t\t       + int(_S_word_bit) - 1)\n+\t\t\t\t\t\t      / int(_S_word_bit)));\n \t\tthis->_M_impl._M_start = iterator(__q, 0);\n \t      }\n \t  }\n@@ -782,8 +786,8 @@ template<typename _Alloc>\n \t\t\t\t\t      iterator(__q, 0));\n \t  this->_M_deallocate();\n \t  this->_M_impl._M_start = iterator(__q, 0);\n-\t  this->_M_impl._M_end_of_storage = (__q + (__n + _S_word_bit - 1)\n-\t\t\t\t\t     / _S_word_bit);\n+\t  this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)\n+\t\t\t\t\t     / int(_S_word_bit));\n \t}\n     }\n \n@@ -888,8 +892,9 @@ template<typename _Alloc>\n \t  this->_M_impl._M_finish = std::copy(__position, end(),\n \t\t\t\t\t      __i + difference_type(__n));\n \t  this->_M_deallocate();\n-\t  this->_M_impl._M_end_of_storage = (__q + ((__len + _S_word_bit - 1)\n-\t\t\t\t\t\t    / _S_word_bit));\n+\t  this->_M_impl._M_end_of_storage = (__q + ((__len\n+\t\t\t\t\t\t     + int(_S_word_bit) - 1)\n+\t\t\t\t\t\t    / int(_S_word_bit)));\n \t  this->_M_impl._M_start = iterator(__q, 0);\n \t}\n     }"}, {"sha": "20836cfbb6100dd303809bc64cd3403b8eda05aa", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "patch": "@@ -1,7 +1,6 @@\n // Debug-mode error formatting implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -310,7 +309,7 @@ namespace __gnu_debug\n       const _Error_formatter&\n       _M_iterator(const _Iterator& __it, const char* __name = 0)  const\n       {\n-\tif (_M_num_parameters < __max_parameters)\n+\tif (_M_num_parameters < size_t(__max_parameters))\n \t  _M_parameters[_M_num_parameters++] = _Parameter(__it, __name,\n \t\t\t\t\t\t\t  _Is_iterator());\n \treturn *this;\n@@ -319,15 +318,15 @@ namespace __gnu_debug\n     const _Error_formatter&\n     _M_integer(long __value, const char* __name = 0) const\n     {\n-      if (_M_num_parameters < __max_parameters)\n+      if (_M_num_parameters < size_t(__max_parameters))\n \t_M_parameters[_M_num_parameters++] = _Parameter(__value, __name);\n       return *this;\n     }\n \n     const _Error_formatter&\n     _M_string(const char* __value, const char* __name = 0) const\n     {\n-      if (_M_num_parameters < __max_parameters)\n+      if (_M_num_parameters < size_t(__max_parameters))\n \t_M_parameters[_M_num_parameters++] = _Parameter(__value, __name);\n       return *this;\n     }\n@@ -336,7 +335,7 @@ namespace __gnu_debug\n       const _Error_formatter&\n       _M_sequence(const _Sequence& __seq, const char* __name = 0) const\n       {\n-\tif (_M_num_parameters < __max_parameters)\n+\tif (_M_num_parameters < size_t(__max_parameters))\n \t  _M_parameters[_M_num_parameters++] = _Parameter(__seq, __name,\n \t\t\t\t\t\t\t  _Is_sequence());\n \treturn *this;"}, {"sha": "6177ded4dafacb5860679376015527c76db1be5d", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "patch": "@@ -503,7 +503,7 @@ namespace __gnu_cxx\n \tstatic _Tune _S_tune(__align, sizeof(_Tp) * 64,\n \t\t\t     sizeof(_Tp) * 2 >= __align ? sizeof(_Tp) * 2\n \t\t\t                                : __align,\n-\t\t\t     sizeof(_Tp) * _Tune::_S_chunk_size,\n+\t\t\t     sizeof(_Tp) * size_t(_Tune::_S_chunk_size),\n \t\t\t     _Tune::_S_max_threads,\n \t\t\t     _Tune::_S_freelist_headroom,\n \t\t\t     getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n@@ -549,7 +549,7 @@ namespace __gnu_cxx\n \tstatic _Tune _S_tune(__align, sizeof(_Tp) * 64,\n \t\t\t     sizeof(_Tp) * 2 >= __align ? sizeof(_Tp) * 2\n                                                         : __align,\n-\t\t\t     sizeof(_Tp) * _Tune::_S_chunk_size,\n+\t\t\t     sizeof(_Tp) * size_t(_Tune::_S_chunk_size),\n \t\t\t     _Tune::_S_max_threads,\n \t\t\t     _Tune::_S_freelist_headroom,\n \t\t\t     getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);"}, {"sha": "afe2b32bf48ecc5c7affea0f6b89713681b8a97c", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "patch": "@@ -80,7 +80,7 @@ namespace __gnu_cxx\n \n       enum { _S_align = 8 };\n       enum { _S_max_bytes = 128 };\n-      enum { _S_free_list_size = _S_max_bytes / _S_align };\n+      enum { _S_free_list_size = (size_t)_S_max_bytes / (size_t)_S_align };\n       \n       union _Obj\n       {"}, {"sha": "0f691e8ccdd06bb512fe761c6b00802a7ff488d3", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "patch": "@@ -676,8 +676,8 @@ protected:\n \treturn __size_with_eos;\n #else\n \t// Allow slop for in-place expansion.\n-\treturn ((__size_with_eos + _S_alloc_granularity - 1)\n-\t\t&~ (_S_alloc_granularity - 1));\n+\treturn ((__size_with_eos + size_t(_S_alloc_granularity) - 1)\n+\t\t&~ (size_t(_S_alloc_granularity) - 1));\n #endif\n       }\n       __GC_CONST _CharT* _M_data; /* Not necessarily 0 terminated. */\n@@ -1998,7 +1998,7 @@ protected:\n       size_type\n       max_size() const\n       {\n-\treturn _S_min_len[_Rope_constants::_S_max_rope_depth - 1] - 1;\n+\treturn _S_min_len[int(_Rope_constants::_S_max_rope_depth) - 1] - 1;\n \t//  Guarantees that the result can be sufficirntly\n \t//  balanced.  Longer ropes will probably still work,\n \t//  but it's harder to make guarantees."}, {"sha": "dad7ceef58ece4d81780035c1e0b81393b8dfd67", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9dd5a466ae70d8547ae01c8afa046a5fc58d501/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=a9dd5a466ae70d8547ae01c8afa046a5fc58d501", "patch": "@@ -116,7 +116,7 @@ namespace __gnu_cxx\n     _Rope_iterator_base<_CharT, _Alloc>::\n     _S_setcache(_Rope_iterator_base<_CharT, _Alloc>& __x)\n     {\n-      const _RopeRep* __path[_Rope_constants::_S_max_rope_depth + 1];\n+      const _RopeRep* __path[int(_Rope_constants::_S_max_rope_depth) + 1];\n       const _RopeRep* __curr_rope;\n       int __curr_depth = -1;  /* index into path    */\n       size_t __curr_start_pos = 0;\n@@ -175,7 +175,7 @@ namespace __gnu_cxx\n       // Copy last section of path into _M_path_end.\n       {\n \tint __i = -1;\n-\tint __j = __curr_depth + 1 - _S_path_cache_len;\n+\tint __j = __curr_depth + 1 - int(_S_path_cache_len);\n \n \tif (__j < 0) __j = 0;\n \twhile (__j <= __curr_depth)\n@@ -236,10 +236,10 @@ namespace __gnu_cxx\n       while (_Rope_constants::_S_concat == __current_node->_M_tag)\n \t{\n \t  ++__current_index;\n-\t  if (_S_path_cache_len == __current_index)\n+\t  if (int(_S_path_cache_len) == __current_index)\n \t    {\n \t      int __i;\n-\t      for (__i = 0; __i < _S_path_cache_len-1; __i++)\n+\t      for (__i = 0; __i < int(_S_path_cache_len) - 1; __i++)\n \t\t__x._M_path_end[__i] = __x._M_path_end[__i+1];\n \t      --__current_index;\n \t    }\n@@ -500,8 +500,9 @@ namespace __gnu_cxx\n \t\t\t\t\t\t\t      get_allocator());\n       size_t __depth = __result->_M_depth;\n       \n-      if (__depth > 20 && (__result->_M_size < 1000\n-\t\t\t   || __depth > _Rope_constants::_S_max_rope_depth))\n+      if (__depth > 20\n+\t  && (__result->_M_size < 1000\n+\t      || __depth > size_t(_Rope_constants::_S_max_rope_depth)))\n \t{\n \t  _RopeRep* __balanced;\n \n@@ -540,7 +541,7 @@ namespace __gnu_cxx\n \treturn __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen,\n \t\t\t\t\t\t__r->get_allocator());\n       if (_Rope_constants::_S_leaf == __r->_M_tag\n-\t  && __r->_M_size + __slen <= _S_copy_max)\n+\t  && __r->_M_size + __slen <= size_t(_S_copy_max))\n \t{\n \t  __result = _S_leaf_concat_char_iter((_RopeLeaf*)__r, __s, __slen);\n \t  return __result;\n@@ -551,7 +552,7 @@ namespace __gnu_cxx\n \t{\n \t  _RopeLeaf* __right =\n \t    (_RopeLeaf* )(((_RopeConcatenation* )__r)->_M_right);\n-\t  if (__right->_M_size + __slen <= _S_copy_max)\n+\t  if (__right->_M_size + __slen <= size_t(_S_copy_max))\n \t    {\n \t      _RopeRep* __left = ((_RopeConcatenation*)__r)->_M_left;\n \t      _RopeRep* __nright =\n@@ -603,7 +604,7 @@ namespace __gnu_cxx\n \t  __r->_M_ref_count = 2;      // One more than before\n \t  return __r;\n \t}\n-      if (__orig_size + __slen <= _S_copy_max\n+      if (__orig_size + __slen <= size_t(_S_copy_max)\n \t  && _Rope_constants::_S_leaf == __r->_M_tag)\n \t{\n \t  __result = _S_destr_leaf_concat_char_iter((_RopeLeaf*)__r, __s, \n@@ -615,7 +616,7 @@ namespace __gnu_cxx\n \t  _RopeLeaf* __right = (_RopeLeaf*)(((_RopeConcatenation*)\n \t\t\t\t\t     __r)->_M_right);\n \t  if (_Rope_constants::_S_leaf == __right->_M_tag\n-\t      && __right->_M_size + __slen <= _S_copy_max)\n+\t      && __right->_M_size + __slen <= size_t(_S_copy_max))\n \t    {\n \t      _RopeRep* __new_right =\n \t\t_S_destr_leaf_concat_char_iter(__right, __s, __slen);\n@@ -668,7 +669,7 @@ namespace __gnu_cxx\n \t{\n \t  if (_Rope_constants::_S_leaf == __left->_M_tag)\n \t    {\n-\t      if (__right->_M_size + __left->_M_size <= _S_copy_max)\n+\t      if (__right->_M_size + __left->_M_size <= size_t(_S_copy_max))\n \t\treturn _S_leaf_concat_char_iter((_RopeLeaf*)__left,\n \t\t\t\t\t\t((_RopeLeaf*)__right)->_M_data,\n \t\t\t\t\t\t__right->_M_size);\n@@ -679,7 +680,8 @@ namespace __gnu_cxx\n \t    {\n \t      _RopeLeaf* __leftright =\n \t\t(_RopeLeaf*)(((_RopeConcatenation*)__left)->_M_right);\n-\t      if (__leftright->_M_size + __right->_M_size <= _S_copy_max)\n+\t      if (__leftright->_M_size\n+\t\t  + __right->_M_size <= size_t(_S_copy_max))\n \t\t{\n \t\t  _RopeRep* __leftleft = ((_RopeConcatenation*)__left)->_M_left;\n \t\t  _RopeRep* __rest = _S_leaf_concat_char_iter(__leftright,\n@@ -1184,7 +1186,7 @@ namespace __gnu_cxx\n   template <class _CharT, class _Alloc>\n     const unsigned long\n     rope<_CharT, _Alloc>::\n-    _S_min_len[_Rope_constants::_S_max_rope_depth + 1] = {\n+    _S_min_len[int(_Rope_constants::_S_max_rope_depth) + 1] = {\n       /* 0 */1, /* 1 */2, /* 2 */3, /* 3 */5, /* 4 */8, /* 5 */13, /* 6 */21,\n       /* 7 */34, /* 8 */55, /* 9 */89, /* 10 */144, /* 11 */233, /* 12 */377,\n       /* 13 */610, /* 14 */987, /* 15 */1597, /* 16 */2584, /* 17 */4181,\n@@ -1203,7 +1205,7 @@ namespace __gnu_cxx\n     rope<_CharT, _Alloc>::\n     _S_balance(_RopeRep* __r)\n     {\n-      _RopeRep* __forest[_Rope_constants::_S_max_rope_depth + 1];\n+      _RopeRep* __forest[int(_Rope_constants::_S_max_rope_depth) + 1];\n       _RopeRep* __result = 0;\n       int __i;\n       // Invariant:\n@@ -1212,12 +1214,12 @@ namespace __gnu_cxx\n       // __forest[__i]._M_depth = __i\n       // References from forest are included in refcount.\n       \n-      for (__i = 0; __i <= _Rope_constants::_S_max_rope_depth; ++__i)\n+      for (__i = 0; __i <= int(_Rope_constants::_S_max_rope_depth); ++__i)\n \t__forest[__i] = 0;\n       try\n \t{\n \t  _S_add_to_forest(__r, __forest);\n-\t  for (__i = 0; __i <= _Rope_constants::_S_max_rope_depth; ++__i)\n+\t  for (__i = 0; __i <= int(_Rope_constants::_S_max_rope_depth); ++__i)\n \t    if (0 != __forest[__i])\n \t      {\n #ifndef __GC\n@@ -1232,12 +1234,12 @@ namespace __gnu_cxx\n \t}\n       catch(...)\n \t{\n-\t  for(__i = 0; __i <= _Rope_constants::_S_max_rope_depth; __i++)\n+\t  for(__i = 0; __i <= int(_Rope_constants::_S_max_rope_depth); __i++)\n \t    _S_unref(__forest[__i]);\n \t  __throw_exception_again;\n \t}\n       \n-      if (__result->_M_depth > _Rope_constants::_S_max_rope_depth)\n+      if (__result->_M_depth > int(_Rope_constants::_S_max_rope_depth))\n \t__throw_length_error(__N(\"rope::_S_balance\"));\n       return(__result);\n     }\n@@ -1305,7 +1307,7 @@ namespace __gnu_cxx\n \t      __forest[__i]->_M_unref_nonnil();\n \t      __forest[__i] = 0;\n \t    }\n-\t  if (__i == _Rope_constants::_S_max_rope_depth\n+\t  if (__i == int(_Rope_constants::_S_max_rope_depth)\n \t      || __insertee->_M_size < _S_min_len[__i+1])\n \t    {\n \t      __forest[__i] = __insertee;"}]}