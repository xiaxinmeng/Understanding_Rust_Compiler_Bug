{"sha": "1e47cb3597c9051f57dbd09b3e8c57371f70f037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU0N2NiMzU5N2M5MDUxZjU3ZGJkMDliM2U4YzU3MzcxZjcwZjAzNw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-02-14T07:40:46Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-05-06T07:57:59Z"}, "message": "Enable TARGET_TSXLDTRK for GCC support.\n\ngcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_TSXLDTRK_SET,\n\tOPTION_MASK_ISA2_TSXLDTRK_UNSET): New macros.\n\t* config.gcc: Add tsxldtrkintrin.h to extra_headers.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n\tTSXLDTRK.\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__TSXLDTRK__.\n\t* config/i386/i386-options.c (ix86_target_string): Add\n\t-mtsxldtrk.\n\t(ix86_valid_target_attribute_inner_p): Add attribute tsxldtrk.\n\t* config/i386/i386.h (TARGET_TSXLDTRK, TARGET_TSXLDTRK_P):\n\tNew.\n\t* config/i386/i386.md (define_c_enum \"unspec\"): Add\n\tUNSPECV_SUSLDTRK, UNSPECV_RESLDTRK.\n\t(TSXLDTRK): New define_int_iterator.\n\t(\"<tsxldtrk>\"): New define_insn.\n\t* config/i386/i386.opt: Add -mtsxldtrk.\n\t* config/i386/immintrin.h: Include tsxldtrkintrin.h.\n\t* config/i386/tsxldtrkintrin.h: New.\n\t* doc/invoke.texi: Document -mtsxldtrk.\n\ngcc/testsuite/\n\t* g++.dg/other/i386-2.c: Add -mtsxldtrk.\n\t* g++.dg/other/i386-3.c: Likewise.\n\t* gcc.target/i386/sse-12.c: Likewise.\n\t* gcc.target/i386/sse-13.c: Likewise.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\t* gcc.target/i386/sse-22.c: Likewsie.\n\t* gcc.target/i386/sse-23.c: Likewise.\n\t* gcc.target/i386/tsxldtrk-1.c: New test.\n\t* gcc.target/i386/funcspec-56.inc: Add target attribute tests\n\tfor tsxldtrk.", "tree": {"sha": "872dd0944f53965241a06c0c76fbcef282245ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/872dd0944f53965241a06c0c76fbcef282245ab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e47cb3597c9051f57dbd09b3e8c57371f70f037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e47cb3597c9051f57dbd09b3e8c57371f70f037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e47cb3597c9051f57dbd09b3e8c57371f70f037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e47cb3597c9051f57dbd09b3e8c57371f70f037/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4ace720e004f736f1ee46b374c12f9826aad630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ace720e004f736f1ee46b374c12f9826aad630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ace720e004f736f1ee46b374c12f9826aad630"}], "stats": {"total": 137, "additions": 120, "deletions": 17}, "files": [{"sha": "42d14c29f16a529619140e7e984d843558ec0d86", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -159,6 +159,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_CLDEMOTE_SET OPTION_MASK_ISA2_CLDEMOTE\n #define OPTION_MASK_ISA2_ENQCMD_SET OPTION_MASK_ISA2_ENQCMD\n #define OPTION_MASK_ISA2_SERIALIZE_SET OPTION_MASK_ISA2_SERIALIZE\n+#define OPTION_MASK_ISA2_TSXLDTRK_SET OPTION_MASK_ISA2_TSXLDTRK\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -244,6 +245,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_ENQCMD_UNSET OPTION_MASK_ISA2_ENQCMD\n #define OPTION_MASK_ISA2_SERIALIZE_UNSET OPTION_MASK_ISA2_SERIALIZE\n #define OPTION_MASK_ISA2_AVX512VP2INTERSECT_UNSET OPTION_MASK_ISA2_AVX512VP2INTERSECT\n+#define OPTION_MASK_ISA2_TSXLDTRK_UNSET OPTION_MASK_ISA2_TSXLDTRK\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -915,6 +917,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mtsxldtrk:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_TSXLDTRK_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_TSXLDTRK_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_TSXLDTRK_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_TSXLDTRK_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "113bc649f167dc5ed291520f77ebe8821487a068", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -414,7 +414,8 @@ i[34567]86-*-*)\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n \t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h\n \t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n-\t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\"\n+\t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n+\t\t       tsxldtrkintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -448,7 +449,8 @@ x86_64-*-*)\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n \t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h\n \t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n-\t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\"\n+\t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n+\t\t       tsxldtrkintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "9fee32a8f1df08dd8f635027ffa8ac0a11dacb57", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -123,6 +123,8 @@\n #define bit_IBT\t(1 << 20)\n #define bit_PCONFIG\t(1 << 18)\n #define bit_SERIALIZE\t(1 << 14)\n+#define bit_TSXLDTRK    (1 << 16)\n+\n /* XFEATURE_ENABLED_MASK register bits (%eax == 13, %ecx == 0) */\n #define bit_BNDREGS     (1 << 3)\n #define bit_BNDCSR      (1 << 4)"}, {"sha": "6926f0beb0adfb78d3e6b95ceb5745a94c91f4a9", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -430,6 +430,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_cldemote = 0;\n   unsigned int has_avx512bf16 = 0;\n   unsigned int has_serialize = 0;\n+  unsigned int has_tsxldtrk = 0;\n \n   unsigned int has_ptwrite = 0;\n \n@@ -536,6 +537,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx5124fmaps = edx & bit_AVX5124FMAPS;\n       has_avx512vp2intersect = edx & bit_AVX512VP2INTERSECT;\n       has_serialize = edx & bit_SERIALIZE;\n+      has_tsxldtrk = edx & bit_TSXLDTRK;\n \n       has_shstk = ecx & bit_SHSTK;\n       has_pconfig = edx & bit_PCONFIG;\n@@ -1157,6 +1159,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *vaes = has_vaes ? \" -mvaes\" : \" -mno-vaes\";\n       const char *vpclmulqdq = has_vpclmulqdq ? \" -mvpclmulqdq\" : \" -mno-vpclmulqdq\";\n       const char *avx512vp2intersect = has_avx512vp2intersect ? \" -mavx512vp2intersect\" : \" -mno-avx512vp2intersect\";\n+      const char *tsxldtrk = has_tsxldtrk ? \" -mtsxldtrk \" : \" -mno-tsxldtrk\";\n       const char *avx512bitalg = has_avx512bitalg ? \" -mavx512bitalg\" : \" -mno-avx512bitalg\";\n       const char *movdiri = has_movdiri ? \" -mmovdiri\" : \" -mno-movdiri\";\n       const char *movdir64b = has_movdir64b ? \" -mmovdir64b\" : \" -mno-movdir64b\";\n@@ -1181,7 +1184,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n \t\t\tavx512bitalg, movdiri, movdir64b, waitpkg, cldemote,\n \t\t\tptwrite, avx512bf16, enqcmd, avx512vp2intersect,\n-\t\t\tserialize, NULL);\n+\t\t\tserialize, tsxldtrk, NULL);\n     }\n \n done:"}, {"sha": "4d1d7b5b0beec7041f088c946b5e785f39c51c2a", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -448,6 +448,9 @@ BDESC (0, OPTION_MASK_ISA2_ENQCMD, CODE_FOR_nothing, \"__builtin_ia32_enqcmds\", I\n \n /* SERIALIZE */\n BDESC (0, OPTION_MASK_ISA2_SERIALIZE, CODE_FOR_serialize, \"__builtin_ia32_serialize\", IX86_BUILTIN_SERIALIZE, UNKNOWN, (int) VOID_FTYPE_VOID)\n+/* TSXLDTRK */\n+BDESC (0, OPTION_MASK_ISA2_TSXLDTRK, CODE_FOR_xsusldtrk, \"__builtin_ia32_xsusldtrk\", IX86_BUILTIN_XSUSLDTRK, UNKNOWN, (int) VOID_FTYPE_VOID)\n+BDESC (0, OPTION_MASK_ISA2_TSXLDTRK, CODE_FOR_xresldtrk, \"__builtin_ia32_xresldtrk\", IX86_BUILTIN_XRESLDTRK, UNKNOWN, (int) VOID_FTYPE_VOID)\n \n BDESC_END (SPECIAL_ARGS, ARGS)\n "}, {"sha": "b46ebb289d2a955cc59b7a153c9b34391d242d0d", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -571,6 +571,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__MMX_WITH_SSE__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_ENQCMD)\n     def_or_undef (parse_in, \"__ENQCMD__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_TSXLDTRK)\n+    def_or_undef (parse_in, \"__TSXLDTRK__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "67480b2deea75e4c1549ddc5b04dd125c0520463", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -206,7 +206,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mptwrite\",\tOPTION_MASK_ISA2_PTWRITE },\n   { \"-mavx512bf16\",\tOPTION_MASK_ISA2_AVX512BF16 },\n   { \"-menqcmd\",\t\tOPTION_MASK_ISA2_ENQCMD },\n-  { \"-mserialize\",\tOPTION_MASK_ISA2_SERIALIZE }\n+  { \"-mserialize\",\tOPTION_MASK_ISA2_SERIALIZE },\n+  { \"-mtsxldtrk\",\tOPTION_MASK_ISA2_TSXLDTRK }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1019,6 +1020,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avx512bf16\",   OPT_mavx512bf16),\n     IX86_ATTR_ISA (\"enqcmd\", OPT_menqcmd),\n     IX86_ATTR_ISA (\"serialize\", OPT_mserialize),\n+    IX86_ATTR_ISA (\"tsxldtrk\", OPT_mtsxldtrk),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "48a5735d4e729656fb66d61584d6db6c1991bb0e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -201,6 +201,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_ENQCMD_P(x) TARGET_ISA2_ENQCMD_P(x)\n #define TARGET_SERIALIZE\tTARGET_ISA2_SERIALIZE\n #define TARGET_SERIALIZE_P(x) TARGET_ISA2_SERIALIZE_P(x)\n+#define TARGET_TSXLDTRK\tTARGET_ISA2_TSXLDTRK\n+#define TARGET_TSXLDTRK_P(x) TARGET_ISA2_TSXLDTRK_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}, {"sha": "911ef7a6c4c29d7ee037b5f72c6d86e42c45bdce", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -284,6 +284,10 @@\n   UNSPECV_MOVDIRI\n   UNSPECV_MOVDIR64B\n \n+  ;; For TSXLDTRK support\n+  UNSPECV_XSUSLDTRK\n+  UNSPECV_XRESLDTRK\n+\n   ;; For WAITPKG support\n   UNSPECV_UMWAIT\n   UNSPECV_UMONITOR\n@@ -21158,6 +21162,17 @@\n   \"movdir64b\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"other\")])\n \n+;; TSXLDTRK\n+(define_int_iterator TSXLDTRK [UNSPECV_XSUSLDTRK UNSPECV_XRESLDTRK])\n+(define_int_attr tsxldtrk [(UNSPECV_XSUSLDTRK \"xsusldtrk\")\n+\t\t (UNSPECV_XRESLDTRK \"xresldtrk\")])\n+(define_insn \"<tsxldtrk>\"\n+  [(unspec_volatile [(const_int 0)] TSXLDTRK)]\n+  \"TARGET_TSXLDTRK\"\n+  \"<tsxldtrk>\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"4\")])\n+\n ;; ENQCMD and ENQCMDS\n \n (define_int_iterator ENQCMD [UNSPECV_ENQCMD UNSPECV_ENQCMDS])"}, {"sha": "c9f7195d423ccd41e67356424feb99f88cfd4a14", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -1111,3 +1111,7 @@ Support ENQCMD built-in functions and code generation.\n mserialize\n Target Report Mask(ISA2_SERIALIZE) Var(ix86_isa_flags2) Save\n Support SERIALIZE built-in functions and code generation.\n+\n+mtsxldtrk\n+Target Report Mask(ISA2_TSXLDTRK) Var(ix86_isa_flags2) Save\n+Support TSXLDTRK built-in functions and code generation.\n\\ No newline at end of file"}, {"sha": "b660d0d9040badef2b51f8e2fe4ee511f64c2d52", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -142,6 +142,8 @@\n \n #include <serializeintrin.h>\n \n+#include <tsxldtrkintrin.h>\n+\n #include <rdseedintrin.h>\n \n #include <prfchwintrin.h>"}, {"sha": "08b76a9c40fccff43ee64955f5440d92a82ad945", "filename": "gcc/config/i386/tsxldtrkintrin.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Ftsxldtrkintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fconfig%2Fi386%2Ftsxldtrkintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftsxldtrkintrin.h?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -0,0 +1,33 @@\n+#if !defined _IMMINTRIN_H_INCLUDED\n+#error \"Never use <tsxldtrkintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _TSXLDTRKINTRIN_H_INCLUDED\n+#define _TSXLDTRKINTRIN_H_INCLUDED\n+\n+#if !defined(__TSXLDTRK__)\n+#pragma GCC push_options\n+#pragma GCC target(\"tsxldtrk\")\n+#define __DISABLE_TSXLDTRK__\n+#endif /* __TSXLDTRK__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xsusldtrk (void)\n+{\n+  __builtin_ia32_xsusldtrk ();\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xresldtrk (void)\n+{\n+  __builtin_ia32_xresldtrk ();\n+}\n+\n+#ifdef __DISABLE_TSXLDTRK__\n+#undef __DISABLE_TSXLDTRK__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_TSXLDTRK__ */\n+\n+#endif /* _TSXLDTRKINTRIN_H_INCLUDED */"}, {"sha": "3537a81d9628c5f478988fde270278fa49eec585", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -1344,7 +1344,7 @@ See RS/6000 and PowerPC Options.\n -mshstk -mmanual-endbr -mforce-indirect-call  -mavx512vbmi2 -mavx512bf16 -menqcmd @gol\n -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq @gol\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n--mrdseed  -msgx -mavx512vp2intersect -mserialize @gol\n+-mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -29468,6 +29468,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -menqcmd\n @opindex menqcmd\n @need 200\n+@itemx -mtsxldtrk\n+@opindex mtsxldtrk\n+@need 200\n @itemx -mavx512vpopcntdq\n @opindex mavx512vpopcntdq\n @need 200"}, {"sha": "04d5fec0f6c2604b1956f874185f0e9f55c4b7c7", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n    avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h\n-   avx512bitalgintrin.h, avx512vp2intersectintrin.h,\n+   avx512bitalgintrin.h, avx512vp2intersectintrin.h, tsxldtrkintrin.h,\n    avx512vp2intersectvlintrin.h and mm_malloc.h.h are usable\n    with -O -pedantic-errors.  */\n "}, {"sha": "f40172ee9b591a6963b51c46094b41589bdc99e3", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n    avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h\n-   avx512bitalgintrin.h, avx512vp2intersectintrin.h,\n+   avx512bitalgintrin.h, avx512vp2intersectintrin.h, tsxldtrkintrin.h,\n    avx512vp2intersectvlintrin.h and mm_malloc.h are usable\n    with -O -fkeep-inline-functions.  */\n "}, {"sha": "0053b5386fca4bded73545959b04ee041259e04b", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -67,6 +67,7 @@ extern void test_clwb (void)\t\t\t__attribute__((__target__(\"clwb\")));\n extern void test_cld (void)\t\t\t__attribute__((__target__(\"cld\")));\n extern void test_recip (void)\t\t\t__attribute__((__target__(\"recip\")));\n extern void test_serialize (void)\t\t__attribute__((__target__(\"serialize\")));\n+extern void test_tsxldtrk (void)\t\t__attribute__((__target__(\"tsxldtrk\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -135,6 +136,7 @@ extern void test_no_clwb (void)\t\t\t__attribute__((__target__(\"no-clwb\")));\n extern void test_no_cld (void)\t\t\t__attribute__((__target__(\"no-cld\")));\n extern void test_no_recip (void)\t\t__attribute__((__target__(\"no-recip\")));\n extern void test_no_serialize (void)\t\t__attribute__((__target__(\"no-serialize\")));\n+extern void test_no_tsxldtrk (void)\t\t__attribute__((__target__(\"no-tsxldtrk\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "b1690d7204f2fc75962c3905c579e5e2af996f4c", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "3a6404707c460b2b94cc147fd277ae084057a7b8", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "edaa2aa8ad4a67cc4c612f442d43ec4042bb972d", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "7364b2ff337389a08a2724366558ce5c1d9d65d8", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -8,7 +8,7 @@\n /* Test that the intrinsics compile with optimization.  All of them\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n-   tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h,\n+   tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h, tsxldtrkintrin.h,\n    avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h,\n    avx512bitalgintrin.h, avx512vp2intersectintrin.h,\n    avx512vp2intersectvlintrin.h and mm_malloc.h that reference the proper\n@@ -102,7 +102,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -219,7 +219,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "eaadebef187df2f93162e6e4b3999b9f7112717c", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -7,7 +7,7 @@\n /* Test that the intrinsics compile with optimization.  All of them\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n-   tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h,\n+   tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h, tsxtrkintrin.h,\n    avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h,\n    avx512bitalgintrin.h, avx512vp2intersectintrin.h,\n    avx512vp2intersectvlintrin.h and mm_malloc.h that reference the proper\n@@ -697,6 +697,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk\")\n \n #include <x86intrin.h>"}, {"sha": "c197b9f114372b0161dd8eee35874e996009d474", "filename": "gcc/testsuite/gcc.target/i386/tsxldtrk-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftsxldtrk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47cb3597c9051f57dbd09b3e8c57371f70f037/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftsxldtrk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftsxldtrk-1.c?ref=1e47cb3597c9051f57dbd09b3e8c57371f70f037", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtsxldtrk\" } */\n+/* { dg-final { scan-assembler \"xsusldtrk\" } } */\n+/* { dg-final { scan-assembler \"xresldtrk\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+foo (void)\n+{\n+  _xsusldtrk ();\n+  _xresldtrk ();\n+}"}]}