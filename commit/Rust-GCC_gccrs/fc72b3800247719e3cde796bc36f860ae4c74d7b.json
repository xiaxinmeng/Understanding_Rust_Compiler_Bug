{"sha": "fc72b3800247719e3cde796bc36f860ae4c74d7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3MmIzODAwMjQ3NzE5ZTNjZGU3OTZiYzM2Zjg2MGFlNGM3NGQ3Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2004-07-07T17:38:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-07-07T17:38:40Z"}, "message": "re PR c++/15815 (Update #pragma interface and #pragma implementation documentation.)\n\n        PR c++/15815\n        * doc/extend.texi (C++ Interface): Correct information and\n        discourage use.\n\nFrom-SVN: r84210", "tree": {"sha": "b6c1331a363a9fb18b869a9b8dcd7723cb118b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6c1331a363a9fb18b869a9b8dcd7723cb118b30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc72b3800247719e3cde796bc36f860ae4c74d7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc72b3800247719e3cde796bc36f860ae4c74d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc72b3800247719e3cde796bc36f860ae4c74d7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc72b3800247719e3cde796bc36f860ae4c74d7b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25069b4269e2fd8ca3ec7fc14fe9552ec97c0f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25069b4269e2fd8ca3ec7fc14fe9552ec97c0f42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25069b4269e2fd8ca3ec7fc14fe9552ec97c0f42"}], "stats": {"total": 58, "additions": 23, "deletions": 35}, "files": [{"sha": "0363968fb323ab8aa3c9022e10e08150511127a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc72b3800247719e3cde796bc36f860ae4c74d7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc72b3800247719e3cde796bc36f860ae4c74d7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc72b3800247719e3cde796bc36f860ae4c74d7b", "patch": "@@ -1,3 +1,9 @@\n+2004-07-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/15815\n+\t* doc/extend.texi (C++ Interface): Correct information and\n+\tdiscourage use.\n+\n 2004-07-07  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/16130"}, {"sha": "4f9b9d922be798e3f6b8acc0a9209559f5644c99", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 17, "deletions": 35, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc72b3800247719e3cde796bc36f860ae4c74d7b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc72b3800247719e3cde796bc36f860ae4c74d7b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=fc72b3800247719e3cde796bc36f860ae4c74d7b", "patch": "@@ -7940,37 +7940,25 @@ almost certainly break things.\n another way to control placement of these constructs.\n \n @node C++ Interface\n-@section Declarations and Definitions in One Header\n+@section #pragma interface and implementation\n \n @cindex interface and implementation headers, C++\n @cindex C++ interface and implementation headers\n-C++ object definitions can be quite complex.  In principle, your source\n-code will need two kinds of things for each object that you use across\n-more than one source file.  First, you need an @dfn{interface}\n-specification, describing its structure with type declarations and\n-function prototypes.  Second, you need the @dfn{implementation} itself.\n-It can be tedious to maintain a separate interface description in a\n-header file, in parallel to the actual implementation.  It is also\n-dangerous, since separate interface and implementation definitions may\n-not remain parallel.\n-\n @cindex pragmas, interface and implementation\n-With GNU C++, you can use a single header file for both purposes.\n \n-@quotation\n-@emph{Warning:} The mechanism to specify this is in transition.  For the\n-nonce, you must use one of two @code{#pragma} commands; in a future\n-release of GNU C++, an alternative mechanism will make these\n-@code{#pragma} commands unnecessary.\n-@end quotation\n+@code{#pragma interface} and @code{#pragma implementation} provide the\n+user with a way of explicitly directing the compiler to emit entities\n+with vague linkage (and debugging information) in a particular\n+translation unit.\n \n-The header file contains the full definitions, but is marked with\n-@samp{#pragma interface} in the source code.  This allows the compiler\n-to use the header file only as an interface specification when ordinary\n-source files incorporate it with @code{#include}.  In the single source\n-file where the full implementation belongs, you can use either a naming\n-convention or @samp{#pragma implementation} to indicate this alternate\n-use of the header file.\n+@emph{Note:} As of GCC 2.7.2, these @code{#pragma}s are not useful in\n+most cases, because of COMDAT support and the ``key method'' heuristic\n+mentioned in @ref{Vague Linkage}.  Using them can actually cause your\n+program to grow due to unnecesary out-of-line copies of inline\n+functions.  Currently (3.4) the only benefit of these\n+@code{#pragma}s is reduced duplication of debugging information, and\n+that should be addressed soon on DWARF 2 targets with the use of\n+COMDAT groups.\n \n @table @code\n @item #pragma interface\n@@ -8020,9 +8008,6 @@ an implementation file whenever you would include it from\n implementation}.  This was deemed to be more trouble than it was worth,\n however, and disabled.\n \n-If you use an explicit @samp{#pragma implementation}, it must appear in\n-your source file @emph{before} you include the affected header files.\n-\n Use the string argument if you want a single implementation file to\n include code from multiple header files.  (You must also use\n @samp{#include} to include the header file; @samp{#pragma\n@@ -8040,10 +8025,10 @@ multiple implementation files.\n effect on function inlining.\n \n If you define a class in a header file marked with @samp{#pragma\n-interface}, the effect on a function defined in that class is similar to\n-an explicit @code{extern} declaration---the compiler emits no code at\n-all to define an independent version of the function.  Its definition\n-is used only for inlining with its callers.\n+interface}, the effect on an inline function defined in that class is\n+similar to an explicit @code{extern} declaration---the compiler emits\n+no code at all to define an independent version of the function.  Its\n+definition is used only for inlining with its callers.\n \n @opindex fno-implement-inlines\n Conversely, when you include the same header file in a main source file\n@@ -8194,9 +8179,6 @@ management.  Code written for the Borland model will work fine, but\n each translation unit will contain instances of each of the templates it\n uses.  In a large program, this can lead to an unacceptable amount of code\n duplication.\n-\n-@xref{C++ Interface,,Declarations and Definitions in One Header}, for\n-more discussion of these pragmas.\n @end enumerate\n \n @node Bound member functions"}]}