{"sha": "cbc7d031c4a563565f3351b36fbcb323567627fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JjN2QwMzFjNGE1NjM1NjVmMzM1MWIzNmZiY2IzMjM1Njc2MjdmYw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-04-22T00:44:48Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-04-22T00:44:48Z"}, "message": "provide default for MASK_RETURN_ADDR\n\ngcc/ChangeLog:\n\n2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* defaults.h (MASK_RETURN_ADDR): New definition.\n\t* except.c (expand_builtin_extract_return_addr): Remove ifdef\n\tMASK_RETURN_ADDR.\n\nFrom-SVN: r222299", "tree": {"sha": "379b5a5e75dc345ed87052fa3188c5f26796e3c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/379b5a5e75dc345ed87052fa3188c5f26796e3c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbc7d031c4a563565f3351b36fbcb323567627fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc7d031c4a563565f3351b36fbcb323567627fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc7d031c4a563565f3351b36fbcb323567627fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc7d031c4a563565f3351b36fbcb323567627fc/comments", "author": null, "committer": null, "parents": [{"sha": "a8a6b3dfd3ec2794a21f34169678a48ed8ecae61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a6b3dfd3ec2794a21f34169678a48ed8ecae61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a6b3dfd3ec2794a21f34169678a48ed8ecae61"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "acb026b15777f89a71ee33cac30fb23fbacbda82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc7d031c4a563565f3351b36fbcb323567627fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc7d031c4a563565f3351b36fbcb323567627fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbc7d031c4a563565f3351b36fbcb323567627fc", "patch": "@@ -1,3 +1,9 @@\n+2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* defaults.h (MASK_RETURN_ADDR): New definition.\n+\t* except.c (expand_builtin_extract_return_addr): Remove ifdef\n+\tMASK_RETURN_ADDR.\n+\n 2015-04-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* defaults.h (RETURN_ADDR_OFFSET): New definition."}, {"sha": "843d7e20efe7b3618b4099a985f183ddef0272bb", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc7d031c4a563565f3351b36fbcb323567627fc/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc7d031c4a563565f3351b36fbcb323567627fc/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=cbc7d031c4a563565f3351b36fbcb323567627fc", "patch": "@@ -388,6 +388,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define RETURN_ADDR_OFFSET 0\n #endif\n \n+#ifndef MASK_RETURN_ADDR\n+#define MASK_RETURN_ADDR NULL_RTX\n+#endif\n+\n /* If we have named section and we support weak symbols, then use the\n    .jcr section for recording java classes which need to be registered\n    at program start-up time.  */"}, {"sha": "7e6591bfc5509dc94d101fb4061ac2bae5486c13", "filename": "gcc/except.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc7d031c4a563565f3351b36fbcb323567627fc/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc7d031c4a563565f3351b36fbcb323567627fc/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=cbc7d031c4a563565f3351b36fbcb323567627fc", "patch": "@@ -2185,9 +2185,9 @@ expand_builtin_extract_return_addr (tree addr_tree)\n     }\n \n   /* First mask out any unwanted bits.  */\n-#ifdef MASK_RETURN_ADDR\n-  expand_and (Pmode, addr, MASK_RETURN_ADDR, addr);\n-#endif\n+  rtx mask = MASK_RETURN_ADDR;\n+  if (mask)\n+    expand_and (Pmode, addr, mask, addr);\n \n   /* Then adjust to find the real return address.  */\n   if (RETURN_ADDR_OFFSET)"}]}