{"sha": "ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3ZTc5YTM2NzJkMWIwMTM2NDZhMWE2ZjhjZDU5MzFlZjZiY2QwNw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-03-13T20:04:33Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-03-13T20:04:33Z"}, "message": "PR c++/89660 - bogus error with -Wredundant-move.\n\n\t* typeck.c (maybe_warn_pessimizing_move): Only accept (T &) &arg\n\tas the std::move's argument.  Don't call convert_for_initialization\n\twhen warn_redundant_move isn't on.\n\n\t* g++.dg/cpp0x/Wredundant-move8.C: New test.\n\t* g++.dg/cpp0x/Wredundant-move9.C: New test.\n\nFrom-SVN: r269660", "tree": {"sha": "d47d790bc1e4b4c797c2003990ee1dbb7dcbf811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d47d790bc1e4b4c797c2003990ee1dbb7dcbf811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b0a62741e675068c13e81690758855846c88726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0a62741e675068c13e81690758855846c88726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b0a62741e675068c13e81690758855846c88726"}], "stats": {"total": 164, "additions": 161, "deletions": 3}, "files": [{"sha": "ca8bc03b4065805a6d98443beb5fabd615b8c8f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07", "patch": "@@ -12,6 +12,11 @@\n \t* parser.c (cp_parser_lambda_introducer): Give error when combining\n \tinit-capture and simple-capture.\n \n+\tPR c++/89660 - bogus error with -Wredundant-move.\n+\t* typeck.c (maybe_warn_pessimizing_move): Only accept (T &) &arg\n+\tas the std::move's argument.  Don't call convert_for_initialization\n+\twhen warn_redundant_move isn't on.\n+\n 2019-03-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86521 - wrong overload resolution with ref-qualifiers."}, {"sha": "f77e9c6180d098925866e215ba3ec0fc15295f34", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07", "patch": "@@ -9409,15 +9409,17 @@ maybe_warn_pessimizing_move (tree retval, tree functype)\n   if (!CLASS_TYPE_P (functype))\n     return;\n \n-  /* We're looking for *std::move<T&> (&arg).  */\n+  /* We're looking for *std::move<T&> ((T &) &arg).  */\n   if (REFERENCE_REF_P (retval)\n       && TREE_CODE (TREE_OPERAND (retval, 0)) == CALL_EXPR)\n     {\n       tree fn = TREE_OPERAND (retval, 0);\n       if (is_std_move_p (fn))\n \t{\n \t  tree arg = CALL_EXPR_ARG (fn, 0);\n-\t  STRIP_NOPS (arg);\n+\t  if (TREE_CODE (arg) != NOP_EXPR)\n+\t    return;\n+\t  arg = TREE_OPERAND (arg, 0);\n \t  if (TREE_CODE (arg) != ADDR_EXPR)\n \t    return;\n \t  arg = TREE_OPERAND (arg, 0);\n@@ -9433,7 +9435,8 @@ maybe_warn_pessimizing_move (tree retval, tree functype)\n \t    }\n \t  /* Warn if the move is redundant.  It is redundant when we would\n \t     do maybe-rvalue overload resolution even without std::move.  */\n-\t  else if (treat_lvalue_as_rvalue_p (arg, /*parm_ok*/true))\n+\t  else if (warn_redundant_move\n+\t\t   && treat_lvalue_as_rvalue_p (arg, /*parm_ok*/true))\n \t    {\n \t      /* Make sure that the overload resolution would actually succeed\n \t\t if we removed the std::move call.  */"}, {"sha": "5f72cc2304ba2c244e91bbd879c04b06f8fdca88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07", "patch": "@@ -3,6 +3,10 @@\n \tPR c++/89686 - mixing init-capture and simple-capture in lambda.\n \t* g++.dg/cpp2a/lambda-pack-init2.C: New test.\n \n+\tPR c++/89660 - bogus error with -Wredundant-move.\n+\t* g++.dg/cpp0x/Wredundant-move8.C: New test.\n+\t* g++.dg/cpp0x/Wredundant-move9.C: New test.\n+\n 2019-03-13  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/89601"}, {"sha": "c290585b18b22add004217cb8b558fc6bc056073", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move8.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move8.C?ref=ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/89660\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+template <typename S> struct D {\n+  template <typename T> D (D<T> x) : k(&x.foo ()) {}\n+  S &foo ();\n+  int *k;\n+};\n+\n+D<int> bar ();\n+\n+struct F {\n+  D<int> baz () {\n+    D<F> f = bar ();\n+    return std::move (*reinterpret_cast<D<int> *> (&f)); // { dg-bogus \"redundant move in return statement\" }\n+  }\n+};"}, {"sha": "fdd3ce1609206054af41426d67d81bc929fa4404", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move9.C", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move9.C?ref=ef7e79a3672d1b013646a1a6f8cd5931ef6bcd07", "patch": "@@ -0,0 +1,108 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+template<typename Tp>\n+struct T {\n+  T() { }\n+  T(const T&) { }\n+  T(T&&) { }\n+};\n+\n+template<typename Tp>\n+struct U {\n+  U() { }\n+  U(const U&) { }\n+  U(U&&) { }\n+  U(T<Tp>) { }\n+};\n+\n+T<int>\n+fn1 (T<int> t)\n+{\n+  return t;\n+}\n+\n+T<int>\n+fn2 (T<int> t)\n+{\n+  // Will use move even without std::move.\n+  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+T<int>\n+fn3 (const T<int> t)\n+{\n+  // t is const: will decay into copy.\n+  return t;\n+}\n+\n+T<int>\n+fn4 (const T<int> t)\n+{\n+  // t is const: will decay into copy despite std::move, so it's redundant.\n+  // We used to warn about this, but no longer since c++/87378.\n+  return std::move (t);\n+}\n+\n+int\n+fn5 (int i)\n+{\n+  // Not a class type.\n+  return std::move (i);\n+}\n+\n+T<int>\n+fn6 (T<int> t, bool b)\n+{\n+  if (b)\n+    throw std::move (t);\n+  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+U<int>\n+fn7 (T<int> t)\n+{\n+  // Core 1579 means we'll get a move here.\n+  return t;\n+}\n+\n+U<int>\n+fn8 (T<int> t)\n+{\n+  // Core 1579 means we'll get a move here.  Even without std::move.\n+  return std::move (t);  // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+T<int>\n+fn9 (T<int>& t)\n+{\n+  // T is a reference and the move isn't redundant.\n+  return std::move (t);\n+}\n+\n+T<int>\n+fn10 (T<int>&& t)\n+{\n+  // T is a reference and the move isn't redundant.\n+  return std::move (t);\n+}"}]}