{"sha": "c366c550730c9ac4e2a56506040f0a49adf8f76b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM2NmM1NTA3MzBjOWFjNGUyYTU2NTA2MDQwZjBhNDlhZGY4Zjc2Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-05-05T20:33:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-05T20:33:42Z"}, "message": "i386.md (peehole2 patterns): Change true_regnum to REGNUM in all peephole2 patterns.\n\n\t* config/i386/i386.md (peehole2 patterns): Change true_regnum\n\tto REGNUM in all peephole2 patterns.\n\t(post-reload splitters): Change true_regnum to REGNUM in\n\tpost-reload splitters.\n\t(zero_extend splitters): Use general_reg_operand and\n\tnonimmediate_gr_operand predicates.\n\nFrom-SVN: r235933", "tree": {"sha": "6cfcde2169b8c63473ffef01597c3895d59f89d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cfcde2169b8c63473ffef01597c3895d59f89d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c366c550730c9ac4e2a56506040f0a49adf8f76b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c366c550730c9ac4e2a56506040f0a49adf8f76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c366c550730c9ac4e2a56506040f0a49adf8f76b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c366c550730c9ac4e2a56506040f0a49adf8f76b/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40436d81692c9ecf3606ef724978bde12a7dece5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40436d81692c9ecf3606ef724978bde12a7dece5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40436d81692c9ecf3606ef724978bde12a7dece5"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "230f5d34e8294474e1b7d3ee5ef6fab18dfab79a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c366c550730c9ac4e2a56506040f0a49adf8f76b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c366c550730c9ac4e2a56506040f0a49adf8f76b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c366c550730c9ac4e2a56506040f0a49adf8f76b", "patch": "@@ -1,3 +1,12 @@\n+2016-05-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (peehole2 patterns): Change true_regnum\n+\tto REGNUM in all peephole2 patterns.\n+\t(post-reload splitters): Change true_regnum to REGNUM in\n+\tpost-reload splitters.\n+\t(zero_extend splitters): Use general_reg_operand and\n+\tnonimmediate_gr_operand predicates.\n+\n 2016-05-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/sse.md (<avx512>_fmadd_<mode>_mask3<round_name>): Use"}, {"sha": "22ad8221ef89434df43e098408c8a8cc0e216dee", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c366c550730c9ac4e2a56506040f0a49adf8f76b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c366c550730c9ac4e2a56506040f0a49adf8f76b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c366c550730c9ac4e2a56506040f0a49adf8f76b", "patch": "@@ -3777,20 +3777,18 @@\n   \"split_double_mode (DImode, &operands[0], 1, &operands[3], &operands[4]);\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(zero_extend:DI (match_operand:SI 1 \"register_operand\")))]\n+  [(set (match_operand:DI 0 \"general_reg_operand\")\n+\t(zero_extend:DI (match_operand:SI 1 \"general_reg_operand\")))]\n   \"!TARGET_64BIT && reload_completed\n-   && !(MMX_REG_P (operands[0]) || SSE_REG_P (operands[0]))\n-   && true_regnum (operands[0]) == true_regnum (operands[1])\"\n+   && REGNO (operands[0]) == REGNO (operands[1])\"\n   [(set (match_dup 4) (const_int 0))]\n   \"split_double_mode (DImode, &operands[0], 1, &operands[3], &operands[4]);\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n-\t(zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\")))]\n+  [(set (match_operand:DI 0 \"nonimmediate_gr_operand\")\n+\t(zero_extend:DI (match_operand:SI 1 \"nonimmediate_gr_operand\")))]\n   \"!TARGET_64BIT && reload_completed\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && !(MMX_REG_P (operands[0]) || SSE_REG_P (operands[0]))\"\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   [(set (match_dup 3) (match_dup 1))\n    (set (match_dup 4) (const_int 0))]\n   \"split_double_mode (DImode, &operands[0], 1, &operands[3], &operands[4]);\")\n@@ -3828,7 +3826,8 @@\n   [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n-  if (true_regnum (operands[0]) != true_regnum (operands[1]))\n+  if (!REG_P (operands[1])\n+      || REGNO (operands[0]) != REGNO (operands[1]))\n     {\n       ix86_expand_clear (operands[0]);\n \n@@ -3875,7 +3874,8 @@\n   [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (const_int 255)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n-  if (true_regnum (operands[0]) != true_regnum (operands[1]))\n+  if (!REG_P (operands[1])\n+      || REGNO (operands[0]) != REGNO (operands[1]))\n     {\n       ix86_expand_clear (operands[0]);\n \n@@ -3988,8 +3988,8 @@\n \n   /* Generate a cltd if possible and doing so it profitable.  */\n   if ((optimize_function_for_size_p (cfun) || TARGET_USE_CLTD)\n-      && true_regnum (operands[1]) == AX_REG\n-      && true_regnum (operands[2]) == DX_REG)\n+      && REGNO (operands[1]) == AX_REG\n+      && REGNO (operands[2]) == DX_REG)\n     {\n       emit_insn (gen_ashrsi3_cvt (operands[2], operands[1], GEN_INT (31)));\n     }\n@@ -4030,8 +4030,8 @@\n    (set (match_operand:SI 3 \"memory_operand\") (match_dup 2))]\n   \"/* cltd is shorter than sarl $31, %eax */\n    !optimize_function_for_size_p (cfun)\n-   && true_regnum (operands[1]) == AX_REG\n-   && true_regnum (operands[2]) == DX_REG\n+   && REGNO (operands[1]) == AX_REG\n+   && REGNO (operands[2]) == DX_REG\n    && peep2_reg_dead_p (2, operands[1])\n    && peep2_reg_dead_p (3, operands[2])\n    && !reg_mentioned_p (operands[2], operands[3])\"\n@@ -4052,19 +4052,19 @@\n {\n   split_double_mode (DImode, &operands[0], 1, &operands[3], &operands[4]);\n \n-  if (true_regnum (operands[3]) != true_regnum (operands[1]))\n+  if (REGNO (operands[3]) != REGNO (operands[1]))\n     emit_move_insn (operands[3], operands[1]);\n \n   /* Generate a cltd if possible and doing so it profitable.  */\n   if ((optimize_function_for_size_p (cfun) || TARGET_USE_CLTD)\n-      && true_regnum (operands[3]) == AX_REG\n-      && true_regnum (operands[4]) == DX_REG)\n+      && REGNO (operands[3]) == AX_REG\n+      && REGNO (operands[4]) == DX_REG)\n     {\n       emit_insn (gen_ashrsi3_cvt (operands[4], operands[3], GEN_INT (31)));\n       DONE;\n     }\n \n-  if (true_regnum (operands[4]) != true_regnum (operands[1]))\n+  if (REGNO (operands[4]) != REGNO (operands[1]))\n     emit_move_insn (operands[4], operands[1]);\n \n   emit_insn (gen_ashrsi3_cvt (operands[4], operands[4], GEN_INT (31)));\n@@ -5207,7 +5207,7 @@\n   \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\n    && optimize_function_for_speed_p (cfun)\n    && epilogue_completed\n-   && (!SSE_REG_P (operands[1])\n+   && (!REG_P (operands[1])\n        || REGNO (operands[0]) != REGNO (operands[1]))\n    && (!EXT_REX_SSE_REG_P (operands[0])\n        || TARGET_AVX512VL)\"\n@@ -5235,7 +5235,7 @@\n   \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\n    && optimize_function_for_speed_p (cfun)\n    && epilogue_completed\n-   && (!SSE_REG_P (operands[1])\n+   && (!REG_P (operands[1])\n        || REGNO (operands[0]) != REGNO (operands[1]))\n    && (!EXT_REX_SSE_REG_P (operands[0])\n        || TARGET_AVX512VL)\"\n@@ -7196,7 +7196,7 @@\n \t   (match_operand:DWIH 2 \"nonimmediate_operand\"))))\n   (clobber (reg:CC FLAGS_REG))]\n  \"TARGET_BMI2 && reload_completed\n-  && true_regnum (operands[1]) == DX_REG\"\n+  && REGNO (operands[1]) == DX_REG\"\n   [(parallel [(set (match_dup 3)\n \t\t   (mult:DWIH (match_dup 1) (match_dup 2)))\n \t      (set (match_dup 4)\n@@ -8341,7 +8341,8 @@\n \t\t    (match_operand:SWI248 2 \"const_int_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n+   && (!REG_P (operands[1])\n+       || REGNO (operands[0]) != REGNO (operands[1]))\"\n   [(const_int 0)]\n {\n   HOST_WIDE_INT ival = INTVAL (operands[2]);\n@@ -9302,12 +9303,12 @@\n   [(set (match_dup 0) (match_op_dup 1 [(match_dup 0)]))])\n \n (define_split\n-  [(set (match_operand 0 \"register_operand\")\n+  [(set (match_operand 0 \"sse_reg_operand\")\n \t(match_operator 3 \"absneg_operator\"\n \t  [(match_operand 1 \"register_operand\")]))\n    (use (match_operand 2 \"nonimmediate_operand\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed && SSE_REG_P (operands[0])\"\n+  \"reload_completed\"\n   [(set (match_dup 0) (match_dup 3))]\n {\n   machine_mode mode = GET_MODE (operands[0]);\n@@ -9398,8 +9399,7 @@\n {\n   rtx tmp;\n   operands[0] = gen_rtx_REG (SImode,\n-\t\t\t     true_regnum (operands[0])\n-\t\t\t     + (TARGET_64BIT ? 1 : 2));\n+\t\t\t     REGNO (operands[0]) + (TARGET_64BIT ? 1 : 2));\n   if (GET_CODE (operands[1]) == ABS)\n     {\n       tmp = GEN_INT (0x7fff);\n@@ -10091,7 +10091,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"GET_MODE (operands[0]) == GET_MODE (operands[1])\n    && reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n+   && REGNO (operands[0]) != REGNO (operands[1])\"\n   [(const_int 0)]\n {\n   machine_mode mode = GET_MODE (operands[0]);\n@@ -10120,7 +10120,7 @@\n \t\t     (match_operand:QI 2 \"const_int_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n+   && REGNO (operands[0]) != REGNO (operands[1])\"\n   [(set (match_dup 0)\n \t(zero_extend:DI (mult:SI (match_dup 1) (match_dup 2))))]\n {\n@@ -17839,7 +17839,7 @@\n \t\t   (match_operand:SI 3 \"immediate_operand\"))\n \t   (const_int 0)]))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n-   && (true_regnum (operands[2]) != AX_REG\n+   && (REGNO (operands[2]) != AX_REG\n        || satisfies_constraint_K (operands[3]))\n    && peep2_reg_dead_p (1, operands[2])\"\n   [(parallel\n@@ -17860,7 +17860,7 @@\n \t   (const_int 0)]))]\n   \"! TARGET_PARTIAL_REG_STALL\n    && ix86_match_ccmode (insn, CCNOmode)\n-   && true_regnum (operands[2]) != AX_REG\n+   && REGNO (operands[2]) != AX_REG\n    && peep2_reg_dead_p (1, operands[2])\"\n   [(parallel\n      [(set (match_dup 0)\n@@ -17881,7 +17881,7 @@\n \t   (const_int 0)]))]\n   \"! TARGET_PARTIAL_REG_STALL\n    && ix86_match_ccmode (insn, CCNOmode)\n-   && true_regnum (operands[2]) != AX_REG\n+   && REGNO (operands[2]) != AX_REG\n    && peep2_reg_dead_p (1, operands[2])\"\n   [(parallel [(set (match_dup 0)\n \t\t   (match_op_dup 1"}]}