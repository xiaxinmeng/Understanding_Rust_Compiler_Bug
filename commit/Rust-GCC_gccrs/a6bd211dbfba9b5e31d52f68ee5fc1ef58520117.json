{"sha": "a6bd211dbfba9b5e31d52f68ee5fc1ef58520117", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiZDIxMWRiZmJhOWI1ZTMxZDUyZjY4ZWU1ZmMxZWY1ODUyMDExNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-02-18T18:16:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-02-18T18:16:19Z"}, "message": "re PR c++/9623 (named initializer regression)\n\n        PR c++/9623\n        * decl.c (reshape_init): Don't mess with initializer labels.\n\n[[Split portion of a mixed commit.]]\n\nFrom-SVN: r63044.2", "tree": {"sha": "81a1b4b60ed4574ed1a998136dc6fce17a5bd410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81a1b4b60ed4574ed1a998136dc6fce17a5bd410"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6bd211dbfba9b5e31d52f68ee5fc1ef58520117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bd211dbfba9b5e31d52f68ee5fc1ef58520117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6bd211dbfba9b5e31d52f68ee5fc1ef58520117", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bd211dbfba9b5e31d52f68ee5fc1ef58520117/comments", "author": null, "committer": null, "parents": [{"sha": "bc102c4bd54702a5503c4f1476b8133bebed4fb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc102c4bd54702a5503c4f1476b8133bebed4fb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc102c4bd54702a5503c4f1476b8133bebed4fb1"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "c81c3df5e94018f272e7c0297f91037d374cf83a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bd211dbfba9b5e31d52f68ee5fc1ef58520117/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bd211dbfba9b5e31d52f68ee5fc1ef58520117/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a6bd211dbfba9b5e31d52f68ee5fc1ef58520117", "patch": "@@ -4031,6 +4031,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t    parser->scope = NULL_TREE;\n \t    parser->qualifying_scope = NULL_TREE;\n \t    parser->object_scope = NULL_TREE;\n+\t    idk = CP_PARSER_ID_KIND_NONE;\n \t    /* Enter the scope corresponding to the type of the object\n \t       given by the POSTFIX_EXPRESSION.  */\n \t    if (!dependent_p \n@@ -4095,6 +4096,12 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n                    Even though \"t\" is dependent, \"X::f\" is not and has \n \t\t   except that for a BASELINK there is no need to\n \t\t   include scope information.  */\n+\n+\t\t/* But we do need to remember that there was an explicit\n+\t\t   scope for virtual function calls.  */\n+\t\tif (parser->scope)\n+\t\t  idk = CP_PARSER_ID_KIND_QUALIFIED;\n+\n \t\tif (name != error_mark_node \n \t\t    && !BASELINK_P (name)\n \t\t    && parser->scope)\n@@ -4125,7 +4132,6 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t       object on the left-hand side of the `.' or `->'\n \t       operator.  */\n \t    parser->context->object_type = NULL_TREE;\n-\t    idk = CP_PARSER_ID_KIND_NONE;\n \t  }\n \t  break;\n "}]}