{"sha": "328e13b7d2526ab1271f26f77f4b34ee72ca13c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI4ZTEzYjdkMjUyNmFiMTI3MWYyNmY3N2Y0YjM0ZWU3MmNhMTNjNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-02-12T18:32:16Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-02-12T18:32:16Z"}, "message": "caller-save.c: Replace regclass.c with reginfo.c in comments.\n\n2009-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* caller-save.c: Replace regclass.c with reginfo.c in comments.\n\t* recog.c: Likewise.\n\t* rtl.h: Likewise.\n\nFrom-SVN: r144135", "tree": {"sha": "1d5417eb5084339da0db386c0512459a4b4b0d49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d5417eb5084339da0db386c0512459a4b4b0d49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/328e13b7d2526ab1271f26f77f4b34ee72ca13c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328e13b7d2526ab1271f26f77f4b34ee72ca13c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328e13b7d2526ab1271f26f77f4b34ee72ca13c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328e13b7d2526ab1271f26f77f4b34ee72ca13c7/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94af6686cc6d54ef13d12c9c819df9102e743e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94af6686cc6d54ef13d12c9c819df9102e743e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94af6686cc6d54ef13d12c9c819df9102e743e8d"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "2666abf267b21b6ba8dac61a8355afe4b9a8cc6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328e13b7d2526ab1271f26f77f4b34ee72ca13c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328e13b7d2526ab1271f26f77f4b34ee72ca13c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=328e13b7d2526ab1271f26f77f4b34ee72ca13c7", "patch": "@@ -1,3 +1,9 @@\n+2009-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* caller-save.c: Replace regclass.c with reginfo.c in comments.\n+\t* recog.c: Likewise.\n+\t* rtl.h: Likewise.\n+\n 2009-02-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* longlong.h (sub_ddmmss): New for ia64. Ported from GMP 4.2."}, {"sha": "8d46047d5f8c81adeed1d75eb68aa3cc21a8f158", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328e13b7d2526ab1271f26f77f4b34ee72ca13c7/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328e13b7d2526ab1271f26f77f4b34ee72ca13c7/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=328e13b7d2526ab1271f26f77f4b34ee72ca13c7", "patch": "@@ -188,7 +188,7 @@ reg_restore_code (int reg, enum machine_mode mode)\n /* Initialize for caller-save.\n \n    Look at all the hard registers that are used by a call and for which\n-   regclass.c has not already excluded from being used across a call.\n+   reginfo.c has not already excluded from being used across a call.\n \n    Ensure that we can find a mode to save the register and that there is a\n    simple insn to save and restore the register.  This latter check avoids"}, {"sha": "7c22faec6ded8528f8f3d97f0d46a1e080253600", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328e13b7d2526ab1271f26f77f4b34ee72ca13c7/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328e13b7d2526ab1271f26f77f4b34ee72ca13c7/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=328e13b7d2526ab1271f26f77f4b34ee72ca13c7", "patch": "@@ -77,7 +77,7 @@ static rtx split_insn (rtx);\n    This should be 0 if you are generating rtl, such as if you are calling\n    the functions in optabs.c and expmed.c (most of the time).\n    This should be 1 if all valid insns need to be recognized,\n-   such as in regclass.c and final.c and reload.c.\n+   such as in reginfo.c and final.c and reload.c.\n \n    init_recog and init_recog_no_volatile are responsible for setting this.  */\n "}, {"sha": "9ccff20035b8c2f5fecd383b7b682b8df480096d", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328e13b7d2526ab1271f26f77f4b34ee72ca13c7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328e13b7d2526ab1271f26f77f4b34ee72ca13c7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=328e13b7d2526ab1271f26f77f4b34ee72ca13c7", "patch": "@@ -1696,7 +1696,7 @@ extern rtx simplify_rtx (const_rtx);\n extern rtx avoid_constant_pool_reference (rtx);\n extern bool mode_signbit_p (enum machine_mode, const_rtx);\n \n-/* In regclass.c  */\n+/* In reginfo.c  */\n extern enum machine_mode choose_hard_reg_mode (unsigned int, unsigned int,\n \t\t\t\t\t       bool);\n \n@@ -1820,7 +1820,7 @@ extern rtx remove_free_INSN_LIST_node (rtx *);\n extern rtx remove_free_EXPR_LIST_node (rtx *);\n \n \n-/* regclass.c */\n+/* reginfo.c */\n \n /* Initialize may_move_cost and friends for mode M.  */\n extern void init_move_cost (enum machine_mode);\n@@ -2217,7 +2217,7 @@ extern HARD_REG_SET eliminable_regset;\n #endif\n extern void mark_elimination (int, int);\n \n-/* In regclass.c */\n+/* In reginfo.c */\n extern int reg_classes_intersect_p (enum reg_class, enum reg_class);\n extern int reg_class_subset_p (enum reg_class, enum reg_class);\n extern void globalize_reg (int);"}]}