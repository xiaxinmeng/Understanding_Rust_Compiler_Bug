{"sha": "f341de7bf61024b66271078de0ea3d1085e665f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM0MWRlN2JmNjEwMjRiNjYyNzEwNzhkZTBlYTNkMTA4NWU2NjVmMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-06-26T18:43:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-06-26T18:43:05Z"}, "message": "cfg.c, [...]: Fix comment typos.\n\n\t* cfg.c, tree-vect-transform.c, tree.def: Fix comment typos.\n\t* doc/invoke.texi: Fix typos.\n\nFrom-SVN: r101336", "tree": {"sha": "044dedf62bc1fc554d69963e0f7257d766b5baf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/044dedf62bc1fc554d69963e0f7257d766b5baf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f341de7bf61024b66271078de0ea3d1085e665f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f341de7bf61024b66271078de0ea3d1085e665f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f341de7bf61024b66271078de0ea3d1085e665f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f341de7bf61024b66271078de0ea3d1085e665f2/comments", "author": null, "committer": null, "parents": [{"sha": "5b65d351636e6bb12e65df88848fc692a22b1766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b65d351636e6bb12e65df88848fc692a22b1766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b65d351636e6bb12e65df88848fc692a22b1766"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "4454822e1d028d6707fb11aaaa787cb0019c600a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f341de7bf61024b66271078de0ea3d1085e665f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f341de7bf61024b66271078de0ea3d1085e665f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f341de7bf61024b66271078de0ea3d1085e665f2", "patch": "@@ -1,3 +1,8 @@\n+2005-06-26  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* cfg.c, tree-vect-transform.c, tree.def: Fix comment typos.\n+\t* doc/invoke.texi: Fix typos.\n+\n 2005-06-26  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Specific): Do not specify the concrete"}, {"sha": "af8a377b927aa2f9fc49ee8edace9150108cf969", "filename": "gcc/cfg.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f341de7bf61024b66271078de0ea3d1085e665f2/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f341de7bf61024b66271078de0ea3d1085e665f2/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=f341de7bf61024b66271078de0ea3d1085e665f2", "patch": "@@ -947,7 +947,8 @@ scale_bbs_frequencies_gcov_type (basic_block *bbs, int nbbs, gcov_type num,\n     }\n }\n \n-/* Datastructures used to maintain mapping between basic blocks and copies.  */\n+/* Data structures used to maintain mapping between basic blocks and\n+   copies.  */\n static htab_t bb_original;\n static htab_t bb_copy;\n static alloc_pool original_copy_bb_pool;\n@@ -979,7 +980,8 @@ bb_copy_original_eq (const void *p, const void *q)\n   return data->index1 == data2->index1;\n }\n \n-/* Initialize the datstructures to maintain mapping between blocks and it's copies.  */\n+/* Initialize the data structures to maintain mapping between blocks\n+   and its copies.  */\n void\n initialize_original_copy_tables (void)\n {\n@@ -992,7 +994,8 @@ initialize_original_copy_tables (void)\n   bb_copy = htab_create (10, bb_copy_original_hash, bb_copy_original_eq, NULL);\n }\n \n-/* Free the datstructures to maintain mapping between blocks and it's copies.  */\n+/* Free the data structures to maintain mapping between blocks and\n+   its copies.  */\n void\n free_original_copy_tables (void)\n {\n@@ -1005,8 +1008,8 @@ free_original_copy_tables (void)\n   original_copy_bb_pool = NULL;\n }\n \n-/* Set original for basic block.  Do nothing when datstructures are not\n-   intialized so passes not needing this don't need to care.  */\n+/* Set original for basic block.  Do nothing when data structures are not\n+   initialized so passes not needing this don't need to care.  */\n void\n set_bb_original (basic_block bb, basic_block original)\n {\n@@ -1047,8 +1050,8 @@ get_bb_original (basic_block bb)\n     return NULL;\n }\n \n-/* Set copy for basic block.  Do nothing when datstructures are not\n-   intialized so passes not needing this don't need to care.  */\n+/* Set copy for basic block.  Do nothing when data structures are not\n+   initialized so passes not needing this don't need to care.  */\n void\n set_bb_copy (basic_block bb, basic_block copy)\n {"}, {"sha": "41345ee4ae6d189bf22ece0d76c3f0e04696e60f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f341de7bf61024b66271078de0ea3d1085e665f2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f341de7bf61024b66271078de0ea3d1085e665f2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f341de7bf61024b66271078de0ea3d1085e665f2", "patch": "@@ -5260,10 +5260,10 @@ variable tracking.\n @opindex fwhole-program\n Assume that the current compilation unit represents whole program being\n compiled.  All public functions and variables with the exception of @code{main}\n-and those marged by attribute @code{externally_visible} become static functions\n-and in a affect gets more aggresively optimized by interprocedural optimizers.\n+and those merged by attribute @code{externally_visible} become static functions\n+and in a affect gets more aggressively optimized by interprocedural optimizers.\n While this option is equivalent to proper use of @code{static} keyword for\n-programs consitsting of single file, in combination with option\n+programs consisting of single file, in combination with option\n @option{--combine} this flag can be used to compile most of smaller scale C\n programs since the functions and variables become local for the whole combined\n compilation unit, not for the single source file itself."}, {"sha": "3ea602952d61f4c9ace74e1b8a8d45657146d8c0", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f341de7bf61024b66271078de0ea3d1085e665f2/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f341de7bf61024b66271078de0ea3d1085e665f2/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=f341de7bf61024b66271078de0ea3d1085e665f2", "patch": "@@ -928,7 +928,7 @@ vect_create_epilog_for_reduction (tree vect_def, tree stmt, tree reduction_op,\n \n       /* The result of the reduction is expected to be at the LSB bits\n \t of the vector. For big-endian targets this means at the right\n-\t end of the vector. For little-edian targets this means at the\n+\t end of the vector. For little-endian targets this means at the\n \t left end of the vector.  */\n \n       if (BITS_BIG_ENDIAN"}, {"sha": "43fa835fb01a4510c4240a0fcf8f41f16152436c", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f341de7bf61024b66271078de0ea3d1085e665f2/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f341de7bf61024b66271078de0ea3d1085e665f2/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=f341de7bf61024b66271078de0ea3d1085e665f2", "patch": "@@ -957,7 +957,7 @@ DEFTREECODE (REDUC_MAX_EXPR, \"reduc_max_expr\", tcc_unary, 1)\n DEFTREECODE (REDUC_MIN_EXPR, \"reduc_min_expr\", tcc_unary, 1)\n DEFTREECODE (REDUC_PLUS_EXPR, \"reduc_plus_expr\", tcc_unary, 1)\n \n-/* Whole vector lesft/right shift in bytes.\n+/* Whole vector left/right shift in bytes.\n    Operand 0 is a vector to be shifted.\n    Operand 1 is an integer shift amount in bits.  */\n DEFTREECODE (VEC_LSHIFT_EXPR, \"vec_lshift_expr\", tcc_binary, 2)"}]}