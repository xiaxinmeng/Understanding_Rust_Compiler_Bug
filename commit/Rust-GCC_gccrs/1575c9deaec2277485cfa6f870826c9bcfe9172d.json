{"sha": "1575c9deaec2277485cfa6f870826c9bcfe9172d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3NWM5ZGVhZWMyMjc3NDg1Y2ZhNmY4NzA4MjZjOWJjZmU5MTcyZA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-21T22:49:37Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-21T22:49:37Z"}, "message": "In libobjc/: 2010-12-21 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR libobjc/18764\n\t* class.c (__objc_add_class_to_hash): Return YES if the class was\n\tadded, and NO if it already existed.\n\t* init.c (__objc_init_class): If __objc_add_class_to_hash returns\n\tNO, then abort the program with an error message.\n\t* objc-private/runtime.h (__objc_add_class_to_hash): Updated\n\tdeclaration.\n\nFrom-SVN: r168139", "tree": {"sha": "7b230e110e8855f7e0345ca7c88cdfb6276368f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b230e110e8855f7e0345ca7c88cdfb6276368f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1575c9deaec2277485cfa6f870826c9bcfe9172d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1575c9deaec2277485cfa6f870826c9bcfe9172d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1575c9deaec2277485cfa6f870826c9bcfe9172d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1575c9deaec2277485cfa6f870826c9bcfe9172d/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2fdd3e04687fa391b6f7b0941f4152e6a760622a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdd3e04687fa391b6f7b0941f4152e6a760622a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fdd3e04687fa391b6f7b0941f4152e6a760622a"}], "stats": {"total": 90, "additions": 56, "deletions": 34}, "files": [{"sha": "9d6806f2ab0777eebc1a874eeee00747d1de2b82", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1575c9deaec2277485cfa6f870826c9bcfe9172d/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1575c9deaec2277485cfa6f870826c9bcfe9172d/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=1575c9deaec2277485cfa6f870826c9bcfe9172d", "patch": "@@ -1,5 +1,15 @@\n 2010-12-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n+\tPR libobjc/18764\n+\t* class.c (__objc_add_class_to_hash): Return YES if the class was\n+\tadded, and NO if it already existed.\n+\t* init.c (__objc_init_class): If __objc_add_class_to_hash returns\n+\tNO, then abort the program with an error message.\n+\t* objc-private/runtime.h (__objc_add_class_to_hash): Updated\n+\tdeclaration.\n+\n+2010-12-21  Nicola Pero  <nicola.pero@meta-innovation.com>\t\n+\n \t* init.c (_objc_load_callback): Initialize with 0.\n \t(__objc_call_callback): Renamed to __objc_call_load_callback.\n \tCheck _objc_load_callback only once, and if it is not set, return"}, {"sha": "b9e8730beb2e45ba167bd2e3bf87bb38df14bc53", "filename": "libobjc/class.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1575c9deaec2277485cfa6f870826c9bcfe9172d/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1575c9deaec2277485cfa6f870826c9bcfe9172d/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=1575c9deaec2277485cfa6f870826c9bcfe9172d", "patch": "@@ -446,11 +446,12 @@ __objc_init_class_tables (void)\n }  \n \n /* This function adds a class to the class hash table, and assigns the\n-   class a number, unless it's already known.  */\n-void\n+   class a number, unless it's already known.  Return 'YES' if the\n+   class was added.  Return 'NO' if the class was already known.  */\n+BOOL\n __objc_add_class_to_hash (Class class)\n {\n-  Class h_class;\n+  Class existing_class;\n \n   objc_mutex_lock (__objc_runtime_mutex);\n \n@@ -461,21 +462,28 @@ __objc_add_class_to_hash (Class class)\n   assert (CLS_ISCLASS (class));\n \n   /* Check to see if the class is already in the hash table.  */\n-  h_class = class_table_get_safe (class->name);\n-  if (! h_class)\n+  existing_class = class_table_get_safe (class->name);\n+\n+  if (existing_class)\n+    {\n+      objc_mutex_unlock (__objc_runtime_mutex);\n+      return NO;      \n+    }\n+  else\n     {\n-      /* The class isn't in the hash table.  Add the class and assign a class\n-         number.  */\n+      /* The class isn't in the hash table.  Add the class and assign\n+         a class number.  */\n       static unsigned int class_number = 1;\n-\n+      \n       CLS_SETNUMBER (class, class_number);\n       CLS_SETNUMBER (class->class_pointer, class_number);\n \n       ++class_number;\n       class_table_insert (class->name, class);\n-    }\n \n-  objc_mutex_unlock (__objc_runtime_mutex);\n+      objc_mutex_unlock (__objc_runtime_mutex);\n+      return YES;\n+    }\n }\n \n Class"}, {"sha": "0401fa432e98f4886abc722d350feed5ff179a4d", "filename": "libobjc/init.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1575c9deaec2277485cfa6f870826c9bcfe9172d/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1575c9deaec2277485cfa6f870826c9bcfe9172d/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=1575c9deaec2277485cfa6f870826c9bcfe9172d", "patch": "@@ -879,22 +879,26 @@ void\n __objc_init_class (Class class)\n {\n   /* Store the class in the class table and assign class numbers.  */\n-  __objc_add_class_to_hash (class);\n-  \n-  /* Register all of the selectors in the class and meta class.  */\n-  __objc_register_selectors_from_class (class);\n-  __objc_register_selectors_from_class ((Class) class->class_pointer);\n-\n-  /* Install the fake dispatch tables.  */\n-  __objc_install_premature_dtable (class);\n-  __objc_install_premature_dtable (class->class_pointer);\n-\n-  /* Register the instance methods as class methods, this is only done\n-     for root classes.  */\n-  __objc_register_instance_methods_to_class (class);\n-\n-  if (class->protocols)\n-    __objc_init_protocols (class->protocols);\n+  if (__objc_add_class_to_hash (class))\n+    {\n+      /* Register all of the selectors in the class and meta class.  */\n+      __objc_register_selectors_from_class (class);\n+      __objc_register_selectors_from_class ((Class) class->class_pointer);\n+      \n+      /* Install the fake dispatch tables.  */\n+      __objc_install_premature_dtable (class);\n+      __objc_install_premature_dtable (class->class_pointer);\n+      \n+      /* Register the instance methods as class methods, this is only\n+\t done for root classes.  */\n+      __objc_register_instance_methods_to_class (class);\n+      \n+      if (class->protocols)\n+\t__objc_init_protocols (class->protocols);\n+    }\n+  else\n+    _objc_abort (\"Module contains duplicate class '%s'\\n\",\n+\t\t class->name);\n }\n \n /* __objc_init_protocol must be called with __objc_runtime_mutex"}, {"sha": "2c34add9064fe67023f35f5f923f58f845b8b8e5", "filename": "libobjc/objc-private/runtime.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1575c9deaec2277485cfa6f870826c9bcfe9172d/libobjc%2Fobjc-private%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1575c9deaec2277485cfa6f870826c9bcfe9172d/libobjc%2Fobjc-private%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fruntime.h?ref=1575c9deaec2277485cfa6f870826c9bcfe9172d", "patch": "@@ -52,17 +52,17 @@ objc/runtime.h.  */\n extern \"C\" {\n #endif /* __cplusplus */\n \n-extern void __objc_add_class_to_hash(Class);   /* (objc-class.c) */\n-extern void __objc_init_class_tables(void);    /* (objc-class.c) */\n-extern void __objc_init_dispatch_tables(void); /* (objc-dispatch.c) */\n-extern void __objc_install_premature_dtable(Class); /* (objc-dispatch.c) */\n-extern void __objc_resolve_class_links(void);  /* (objc-class.c) */\n+extern BOOL __objc_add_class_to_hash (Class);   /* (objc-class.c) */\n+extern void __objc_init_class_tables (void);    /* (objc-class.c) */\n+extern void __objc_init_dispatch_tables (void); /* (objc-dispatch.c) */\n+extern void __objc_install_premature_dtable (Class); /* (objc-dispatch.c) */\n+extern void __objc_resolve_class_links (void);  /* (objc-class.c) */\n extern void __objc_update_dispatch_table_for_class (Class);/* (objc-msg.c) */\n \n-extern int  __objc_init_thread_system(void);    /* thread.c */\n-extern int  __objc_fini_thread_system(void);    /* thread.c */\n+extern int  __objc_init_thread_system (void);    /* thread.c */\n+extern int  __objc_fini_thread_system (void);    /* thread.c */\n extern void __objc_init_class (Class class);  /* init.c */\n-extern void class_add_method_list(Class, struct objc_method_list *);\n+extern void class_add_method_list (Class, struct objc_method_list *);\n \n /* Registering instance methods as class methods for root classes */\n extern void __objc_register_instance_methods_to_class(Class);"}]}