{"sha": "8f21990a676b65040761886e54fc9d5149ec014c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyMTk5MGE2NzZiNjUwNDA3NjE4ODZlNTRmYzlkNTE0OWVjMDE0Yw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-08-16T09:13:50Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-08-16T09:13:50Z"}, "message": "re PR tree-optimization/72817 (wrong code at -O3 on x86_64-linux-gnu (in both 32-bit and 64-bit modes))\n\n\tPR tree-optimization/72817\n\tPR tree-optimization/73450\n\t* tree-ssa-loop-niter.c (number_of_iterations_ne): Check\n\tmultiple_of_p for adjusted IV.base.\n\n\tgcc/testsuite\n\t* gcc.dg/tree-ssa/pr72817.c: New test.\n\t* gcc.dg/tree-ssa/pr73450.c: New test.\n\nFrom-SVN: r239494", "tree": {"sha": "8a0e3d884dc48aba31f839c3b7d5ab8a28c04e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a0e3d884dc48aba31f839c3b7d5ab8a28c04e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f21990a676b65040761886e54fc9d5149ec014c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f21990a676b65040761886e54fc9d5149ec014c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f21990a676b65040761886e54fc9d5149ec014c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f21990a676b65040761886e54fc9d5149ec014c/comments", "author": null, "committer": null, "parents": [{"sha": "f6ba953d245fe7f6a39eedc94c97ae7c2c7ffe13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ba953d245fe7f6a39eedc94c97ae7c2c7ffe13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ba953d245fe7f6a39eedc94c97ae7c2c7ffe13"}], "stats": {"total": 92, "additions": 72, "deletions": 20}, "files": [{"sha": "99fb2d2c82cd0ec2d4d838725e50d47698b2d318", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f21990a676b65040761886e54fc9d5149ec014c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f21990a676b65040761886e54fc9d5149ec014c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f21990a676b65040761886e54fc9d5149ec014c", "patch": "@@ -1,3 +1,10 @@\n+2016-08-16  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/72817\n+\tPR tree-optimization/73450\n+\t* tree-ssa-loop-niter.c (number_of_iterations_ne): Check\n+\tmultiple_of_p for adjusted IV.base.\n+\n 2016-08-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/72867"}, {"sha": "26266dfae670958df22dfca6f67bc734d9a525ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f21990a676b65040761886e54fc9d5149ec014c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f21990a676b65040761886e54fc9d5149ec014c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f21990a676b65040761886e54fc9d5149ec014c", "patch": "@@ -1,3 +1,10 @@\n+2016-08-16  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/72817\n+\tPR tree-optimization/73450\n+\t* gcc.dg/tree-ssa/pr72817.c: New test.\n+\t* gcc.dg/tree-ssa/pr73450.c: New test.\n+\n 2016-08-15  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* gfortran.dg/init_flag_13.f90: New testcase."}, {"sha": "6ee0b08adc37d3f780193d460e4071ebb9ce843a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr72817.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f21990a676b65040761886e54fc9d5149ec014c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr72817.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f21990a676b65040761886e54fc9d5149ec014c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr72817.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr72817.c?ref=8f21990a676b65040761886e54fc9d5149ec014c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+char a;\n+short b;\n+\n+int main ()\n+{\n+  for (a = 3; a != -1; a -= 5)\n+    while (b)\n+      ;\n+  return 0;\n+}"}, {"sha": "7dd44dbbaf5babbf0e8c31a29251083c8886c53f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr73450.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f21990a676b65040761886e54fc9d5149ec014c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr73450.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f21990a676b65040761886e54fc9d5149ec014c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr73450.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr73450.c?ref=8f21990a676b65040761886e54fc9d5149ec014c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+int a;\n+char b;\n+int main() {\n+  char c = 0;\n+  for (; c != 3; c = c + 7) {\n+    a = b & a;\n+    if (a)\n+      break;\n+  }\n+  return 0;\n+}"}, {"sha": "5041c83169b4947b2301c7e1dde9646178b577dc", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f21990a676b65040761886e54fc9d5149ec014c/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f21990a676b65040761886e54fc9d5149ec014c/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=8f21990a676b65040761886e54fc9d5149ec014c", "patch": "@@ -999,33 +999,36 @@ number_of_iterations_ne (struct loop *loop, tree type, affine_iv *iv,\n   mpz_clear (max);\n \n   /* Compute no-overflow information for the control iv.  This can be\n-     proven when below two conditions hold.\n-\n-       1) |FINAL - base| is an exact multiple of step.\n-       2) IV evaluates toward FINAL at beginning, i.e:\n+     proven when below two conditions are satisfied:\n \n+       1) IV evaluates toward FINAL at beginning, i.e:\n \t    base <= FINAL ; step > 0\n \t    base >= FINAL ; step < 0\n \n-\t  Note the first condition holds, the second can be then relaxed\n-\t  to below condition.\n+       2) |FINAL - base| is an exact multiple of step.\n+\n+     Unfortunately, it's hard to prove above conditions after pass loop-ch\n+     because loop with exit condition (IV != FINAL) usually will be guarded\n+     by initial-condition (IV.base - IV.step != FINAL).  In this case, we\n+     can alternatively try to prove below conditions:\n+\n+       1') IV evaluates toward FINAL at beginning, i.e:\n+\t    new_base = base - step < FINAL ; step > 0\n+\t\t\t\t\t     && base - step doesn't underflow\n+\t    new_base = base - step > FINAL ; step < 0\n+\t\t\t\t\t     && base - step doesn't overflow\n \n-\t    base - step < FINAL ; step > 0\n-\t\t\t\t  && base - step doesn't underflow\n-\t    base - step > FINAL ; step < 0\n-\t\t\t\t  && base - step doesn't overflow\n+       2') |FINAL - new_base| is an exact multiple of step.\n \n-\t  The relaxation is important because after pass loop-ch, loop\n-\t  with exit condition (IV != FINAL) will usually be guarded by\n-\t  pre-condition (IV.base - IV.step != FINAL).  Please refer to\n-\t  PR34114 as an example.\n+     Please refer to PR34114 as an example of loop-ch's impact, also refer\n+     to PR72817 as an example why condition 2') is necessary.\n \n-     Also note, for NE_EXPR, base equals to FINAL is a special case, in\n+     Note, for NE_EXPR, base equals to FINAL is a special case, in\n      which the loop exits immediately, and the iv does not overflow.  */\n   if (!niter->control.no_overflow\n       && (integer_onep (s) || multiple_of_p (type, c, s)))\n     {\n-      tree t, cond, relaxed_cond = boolean_false_node;\n+      tree t, cond, new_c, relaxed_cond = boolean_false_node;\n \n       if (tree_int_cst_sign_bit (iv->step))\n \t{\n@@ -1039,8 +1042,12 @@ number_of_iterations_ne (struct loop *loop, tree type, affine_iv *iv,\n \t      if (integer_nonzerop (t))\n \t\t{\n \t\t  t = fold_build2 (MINUS_EXPR, type, iv->base, iv->step);\n-\t\t  relaxed_cond = fold_build2 (GT_EXPR, boolean_type_node,\n-\t\t\t\t\t      t, final);\n+\t\t  new_c = fold_build2 (MINUS_EXPR, niter_type,\n+\t\t\t\t       fold_convert (niter_type, t),\n+\t\t\t\t       fold_convert (niter_type, final));\n+\t\t  if (multiple_of_p (type, new_c, s))\n+\t\t    relaxed_cond = fold_build2 (GT_EXPR, boolean_type_node,\n+\t\t\t\t\t\tt, final);\n \t\t}\n \t    }\n \t}\n@@ -1056,8 +1063,12 @@ number_of_iterations_ne (struct loop *loop, tree type, affine_iv *iv,\n \t      if (integer_nonzerop (t))\n \t\t{\n \t\t  t = fold_build2 (MINUS_EXPR, type, iv->base, iv->step);\n-\t\t  relaxed_cond = fold_build2 (LT_EXPR, boolean_type_node,\n-\t\t\t\t\t      t, final);\n+\t\t  new_c = fold_build2 (MINUS_EXPR, niter_type,\n+\t\t\t\t       fold_convert (niter_type, final),\n+\t\t\t\t       fold_convert (niter_type, t));\n+\t\t  if (multiple_of_p (type, new_c, s))\n+\t\t    relaxed_cond = fold_build2 (LT_EXPR, boolean_type_node,\n+\t\t\t\t\t\tt, final);\n \t\t}\n \t    }\n \t}"}]}