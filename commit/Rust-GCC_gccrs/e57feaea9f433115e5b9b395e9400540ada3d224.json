{"sha": "e57feaea9f433115e5b9b395e9400540ada3d224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3ZmVhZWE5ZjQzMzExNWU1YjliMzk1ZTk0MDA1NDBhZGEzZDIyNA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2003-03-27T18:57:42Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2003-03-27T18:57:42Z"}, "message": "Add files to the new contrib/reghunt directory:\n\n2003-03-27  Janis Johnson  <janis187@us.ibm.com>\n\n\t* README: New file.\n\t* reg_search: New file.\n\t* reg_periodic: New file.\n\t* reg_test_template: New file.\n\nFrom-SVN: r64929", "tree": {"sha": "23aa56c095f351a841671f0b3767bc27624f11cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23aa56c095f351a841671f0b3767bc27624f11cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e57feaea9f433115e5b9b395e9400540ada3d224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57feaea9f433115e5b9b395e9400540ada3d224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57feaea9f433115e5b9b395e9400540ada3d224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57feaea9f433115e5b9b395e9400540ada3d224/comments", "author": null, "committer": null, "parents": [{"sha": "c7d325c803cc4d985809b1b85572e0cd2c1cb5a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1"}], "stats": {"total": 520, "additions": 520, "deletions": 0}, "files": [{"sha": "3b4b78f8b7ffec3e91be3b59263ada5a1ec87305", "filename": "contrib/reghunt/ChangeLog", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57feaea9f433115e5b9b395e9400540ada3d224/contrib%2Freghunt%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57feaea9f433115e5b9b395e9400540ada3d224/contrib%2Freghunt%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2FChangeLog?ref=e57feaea9f433115e5b9b395e9400540ada3d224", "patch": "@@ -0,0 +1,7 @@\n+2003-03-27  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* README: New file.\n+\t* reg_search: New file.\n+\t* reg_periodic: New file.\n+\t* reg_test_template: New file.\n+"}, {"sha": "c674ffc6cd97dcc9b73f1e06fe786369b6cf61fd", "filename": "contrib/reghunt/README", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57feaea9f433115e5b9b395e9400540ada3d224/contrib%2Freghunt%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57feaea9f433115e5b9b395e9400540ada3d224/contrib%2Freghunt%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2FREADME?ref=e57feaea9f433115e5b9b395e9400540ada3d224", "patch": "@@ -0,0 +1,16 @@\n+This directory contains scripts that are used for identifying the\n+patch that introduced a regression.  General information about such\n+searches is covered in http://gcc.gnu.org/bugs/reghunt.html.\n+\n+  reg_search searches for a small time interval within a range of\n+  dates in which results for a test changed, using a binary search.\n+  The functionality for getting sources, building the component to\n+  test, and running the test are in other scripts that are run from\n+  here.\n+\n+  reg_periodic invokes separate tools (the same scripts invoked by\n+  reg_search) over a range of dates at specified intervals.\n+\n+  reg_test_template shows the format for the script that runs a test\n+  and determines whether to continue the search with a later or\n+  earlier date."}, {"sha": "57b86d349ced52963f80b7dcf7cd8a76fc19f584", "filename": "contrib/reghunt/reg_periodic", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57feaea9f433115e5b9b395e9400540ada3d224/contrib%2Freghunt%2Freg_periodic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57feaea9f433115e5b9b395e9400540ada3d224/contrib%2Freghunt%2Freg_periodic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Freg_periodic?ref=e57feaea9f433115e5b9b395e9400540ada3d224", "patch": "@@ -0,0 +1,164 @@\n+#! /bin/bash\n+\n+########################################################################\n+#\n+# File:    reg_periodic\n+# Author:  Janis Johnson\n+# Date:    2002/12/28\n+#\n+# Over a range of dates at specified intervals, invoke separate tools to\n+# update sources, do a build, and run one or more tests. \n+#\n+# Define these in a file whose name is the argument to this script:\n+#   LOW_DATE:   Date string recognized by the date command.\n+#   HIGH_DATE:  Date string recognized by the date command.\n+#   INTERVAL:   Time (in seconds) between dates for which to build.\n+#   REG_UPDATE: Pathname of script to update your source tree.\n+#   REG_BUILD:  Pathname of script to build enough of the product to run\n+#               the test.\n+#   REG_TEST:   Pathname of script to run one or more tests.\n+# Optional:\n+#   VERBOSITY:  Default is 0, to print only errors and final message.\n+#   DATE_IN_MSG If set to anything but 0, include the time and date in\n+#               messages\n+#   REG_STOP    Pathname of a file whose existence says to quit; default\n+#               is STOP in the current directory.\n+#\n+#\n+# Copyright (c) 2002, 2003 Free Software Foundation, Inc.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+#\n+########################################################################\n+\n+########################################################################\n+# Functions\n+########################################################################\n+\n+# Issue a message if its verbosity level is high enough.\n+\n+msg() {\n+  test ${1} -gt ${VERBOSITY}  && return\n+\n+  if [ \"x${DATE_IN_MSG}\" = \"x\" ]; then\n+    echo \"${2}\"\n+  else\n+    echo \"`date`  ${2}\"\n+  fi\n+}\n+\n+# Issue an error message and exit with a nonzero status.\n+\n+error() {\n+  msg 0 \"error: ${1}\"\n+  exit 1\n+}\n+\n+# Turn seconds since the epoch into a date we can use with source\n+# control tools and report to the user.\n+\n+make_date() {\n+  MADE_DATE=\"`date -u +\\\"%Y-%m-%d %H:%M %Z\\\" --date \\\"1970-01-01 00:00:${1}\\\"`\" \\\n+    || error \"make_date: date command failed\"\n+}\n+\n+# Build the components to test using sources as of a particular date and\n+# run a test case.  Pass each of the scripts the date that we're\n+# testing; the first one needs it, the others can ignore it if they want.\n+\n+process_date() {\n+  DATE=\"${1}\"\n+\n+  ${REG_UPDATE} \"${DATE}\"\n+  if [ $? -ne 0 ]; then\n+    msg 0 \"source update failed for ${DATE}\"\n+    return\n+  fi\n+  ${REG_BUILD} \"${DATE}\"\n+  if [ $? -ne 0 ]; then\n+    msg 0 \"build failed for ${DATE}\"\n+    return\n+  fi\n+  ${REG_TEST} \"${DATE}\"\n+}\n+ \n+########################################################################\n+# Main program (so to speak)\n+########################################################################\n+\n+# Process the configuration file.\n+\n+if [ $# -ne 1 ]; then\n+  echo Usage: $0 config_file\n+  exit 1\n+fi\n+\n+CONFIG=${1}\n+if [ ! -f ${CONFIG} ]; then\n+  error \"configuration file ${CONFIG} does not exist\"\n+fi\n+\n+# OK, the config file exists.  Source it, make sure required parameters\n+# are defined and their files exist, and give default values to optional\n+# parameters.\n+\n+. ${CONFIG}\n+\n+test \"x${REG_UPDATE}\" = \"x\" && error \"REG_UPDATE is not defined\"\n+test \"x${REG_BUILD}\" = \"x\" && error \"REG_BUILD is not defined\"\n+test \"x${REG_TEST}\" = \"x\" && error \"REG_TEST is not defined\"\n+test \"x${INTERVAL}\" = \"x\" && error \"INTERVAL is not defined\"\n+test -x ${REG_TEST} || error \"REG_TEST is not an executable file\"\n+test \"x${VERBOSITY}\" = \"x\" && VERBOSITY=0\n+test \"x${REG_STOP}\" = \"x\" && REG_STOP=\"STOP\"\n+\n+msg 2 \"LOW_DATE   = ${LOW_DATE}\"\n+msg 2 \"HIGH_DATE  = ${HIGH_DATE}\"\n+msg 2 \"INTERVAL   = ${INTERVAL}\"\n+msg 2 \"REG_UPDATE = ${REG_UPDATE}\"\n+msg 2 \"REG_BUILD  = ${REG_BUILD}\"\n+msg 2 \"REG_TEST   = ${REG_TEST}\"\n+msg 2 \"VERBOSITY  = ${VERBOSITY}\"\n+\n+# Change the dates into seconds since the epoch.  This uses an extension\n+# in GNU date.\n+\n+LOW_DATE=`date +%s --date \"${LOW_DATE}\"` || \\\n+  error \"date command failed for \\\"${LOW_DATE}\\\"\"\n+HIGH_DATE=`date +%s --date \"${HIGH_DATE}\"` || \\\n+  error \"date command failed for \\\"${LOW_DATE}\\\"\"\n+\n+# Process each date in the range.\n+\n+while [ ${LOW_DATE} -le ${HIGH_DATE} ]; do\n+\n+  # If a file called STOP appears, stop; this allows a clean way to\n+  # interrupt a search.\n+\n+  if [ -f ${REG_STOP} ]; then\n+    msg 0 \"STOP file detected\"\n+    rm -f ${REG_STOP}\n+    exit 1\n+  fi\n+\n+  # Get a version of the date that is usable by tools and readable\n+  # by people, then process it.\n+\n+  make_date ${LOW_DATE}\n+  process_date \"${MADE_DATE}\"\n+  let LOW_DATE=LOW_DATE+INTERVAL\n+done\n+\n+msg 1 \"done\""}, {"sha": "1ca0a5d6517d7f391d08ea24b9b896957a99d85d", "filename": "contrib/reghunt/reg_search", "status": "added", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57feaea9f433115e5b9b395e9400540ada3d224/contrib%2Freghunt%2Freg_search", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57feaea9f433115e5b9b395e9400540ada3d224/contrib%2Freghunt%2Freg_search", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Freg_search?ref=e57feaea9f433115e5b9b395e9400540ada3d224", "patch": "@@ -0,0 +1,293 @@\n+#! /bin/bash\n+\n+########################################################################\n+#\n+# File:    reg_search\n+# Author:  Janis Johnson <janis187@us.ibm.com>\n+# Date:    2002/12/15\n+#\n+# Search for a small time interval within a range of dates in which\n+# results for a test changed, using a binary search.  The functionality\n+# for getting sources, building the component to test, and running the\n+# test are in other scripts that are run from here.  Before the search\n+# begins, we verify that we get the expected behavior for the first and\n+# last dates.\n+#\n+# Define these in a file whose name is the argument to this script:\n+#   LOW_DATE:   Date string recognized by the date command (local time).\n+#   HIGH_DATE:  Date string recognized by the date command (local time).\n+#   REG_UPDATE: Pathname of script to update your source tree; returns\n+#               zero for success, nonzero for failure.\n+#   REG_BUILD:  Pathname of script to build enough of the product to run\n+#               the test; returns zero for success, nonzero for failure.\n+#   REG_TEST:   Pathname of script to run the test; returns 1 if we\n+#               should search later dates, 0 if we should search earlier\n+#               dates.\n+# Optional:\n+#   DELTA:      Search to an interval within this many seconds; default\n+#               is one hour (although 300 works well).\n+#   REG_FINISH  Pathname of script to call at the end with the two final\n+#               dates as arguments.\n+#   SKIP_LOW    If 1, skip verifying the low date of the range;\n+#               define this only if you're restarting and have already\n+#               tested the low date.\n+#   SKIP_HIGH   If 1, skip verifying the high date of the range;\n+#               define this only if you're restarting and have already\n+#               tested the high date.\n+#   FIRST_MID   Use this as the first midpoint, to avoid a midpoint that\n+#               is known not to build.\n+#   HAS_CHANGES Pathname of script to report whether the current date has\n+#               no differences from one of the ends of the current range\n+#               to skip unnecessary build and testing; default is \"true\".\n+#   VERBOSITY   Default is 0, to print only errors and final message.\n+#   DATE_IN_MSG If set to anything but 0, include the time and date in\n+#               messages.\n+#\n+#\n+#\n+# Copyright (c) 2002, 2003 Free Software Foundation, Inc.\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# For a copy of the GNU General Public License, write the the\n+# Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+# \n+########################################################################\n+\n+########################################################################\n+# Functions\n+########################################################################\n+\n+# Issue a message if its verbosity level is high enough.\n+\n+msg() {\n+  test ${1} -gt ${VERBOSITY}  && return\n+\n+  if [ \"x${DATE_IN_MSG}\" = \"x\" ]; then\n+    echo \"${2}\"\n+  else\n+    echo \"`date`  ${2}\"\n+  fi\n+}\n+\n+# Issue an error message and exit with a non-zero status.  If there\n+# is a valid current range whose end points have been tested, report\n+# it so the user can start again from there.\n+\n+error() {\n+  msg 0 \"error: ${1}\"\n+  test ${VALID_RANGE} -eq 1 && \\\n+    echo \"current range:\"\n+    echo \"LOW_DATE=\\\"${LATER_THAN}\\\"\"\n+    echo \"HIGH_DATE=\\\"${EARLIER_THAN}\\\"\"\n+  exit 1\n+}\n+\n+# Turn seconds since the epoch into a date we can use with source\n+# control tools and report to the user.\n+\n+make_date() {\n+  MADE_DATE=\"`date -u +\\\"%Y-%m-%d %H:%M %Z\\\" --date \\\"1970-01-01 00:00:${1}\\\"`\" \\\n+    || error \"make_date: date command failed\"\n+}\n+\n+# Build the components to test using sources as of a particular date and\n+# run a test case.  Pass each of the scripts the date that we're\n+# testing; the first one needs it, the others can ignore it if they want.\n+\n+process_date() {\n+  DATE=\"${1}\"\n+\n+  ${REG_UPDATE} \"${DATE}\" || error \"source update failed for ${DATE}\"\n+\n+  # If we're already in a valid range, skip this date if there are no\n+  # differences from either end of the range and adjust LATER.\n+\n+  if [ ${VALID_RANGE} = 1 ]; then\n+    ${HAS_CHANGES} \"${DATE}\" \"${LATER_THAN}\" \"${EARLIER_THAN}\"\n+    RET=$?\n+    case ${RET} in\n+    0) ;;\n+    1) LATER=1; return;;\n+    2) LATER=0; return;;\n+    *) error \"process_date: unexpected return value from ${HAS_CHANGES}\";;\n+    esac\n+  fi\n+\n+  ${REG_BUILD} \"${DATE}\"  || error \"build failed for ${DATE}\"\n+  ${REG_TEST} \"${DATE}\"\n+  LATER=$?\n+}\n+\n+# Perform a binary search on dates within the range specified by\n+# the arguments, bounded by the number of seconds in DELTA.\n+\n+search_dates() {\n+  let LOW=$1\n+  let HIGH=$2\n+  let DIFF=HIGH-LOW\n+\n+  # Get the date in the middle of the range; MID is in seconds since\n+  # the epoch, DATE is readable by humans and tools.  The user can\n+  # override the initial mid date if it is known to have problems,\n+  # e.g., if a build fails for that date.\n+\n+  if [ ${FIRST_MID} -ne 0 ]; then\n+    let MID=${FIRST_MID}\n+  else\n+    let MID=LOW/2+HIGH/2\n+  fi\n+\n+  while [ ${DIFF} -ge ${DELTA} ]; do\n+    make_date ${MID}\n+    DATE=\"${MADE_DATE}\"\n+\n+    # Test it.\n+\n+    process_date \"${DATE}\"\n+\n+    # Narrow the search based on the outcome of testing DATE.\n+\n+    if [ ${LATER} -eq 1 ]; then\n+      msg 1 \"search dates later than \\\"${DATE}\\\"\"\n+      LATER_THAN=\"${DATE}\"\n+      let LOW=MID\n+    else\n+      msg 1 \"search dates earlier than \\\"${DATE}\\\"\"\n+      EARLIER_THAN=\"${DATE}\"\n+      let HIGH=MID\n+    fi\n+\n+    let DIFF=HIGH-LOW\n+    let MID=LOW/2+HIGH/2\n+  done\n+}\n+\n+########################################################################\n+# Main program (so to speak)\n+########################################################################\n+\n+# The error function uses this.\n+\n+VALID_RANGE=0\n+\n+# Process the configuration file.\n+\n+if [ $# != 1 ]; then\n+  echo Usage: $0 config_file\n+  exit 1\n+fi\n+\n+CONFIG=${1}\n+if [ ! -f ${CONFIG} ]; then\n+  error \"configuration file ${CONFIG} does not exist\"\n+fi\n+\n+# OK, the config file exists.  Source it, make sure required parameters\n+# are defined and their files exist, and give default values to optional\n+# parameters.\n+\n+. ${CONFIG}\n+\n+test \"x${REG_UPDATE}\" = \"x\" && error \"REG_UPDATE is not defined\"\n+test \"x${REG_BUILD}\" = \"x\" && error \"REG_BUILD is not defined\"\n+test \"x${REG_TEST}\" = \"x\" && error \"REG_TEST is not defined\"\n+test -x ${REG_TEST} || error \"REG_TEST is not an executable file\"\n+test \"x${SKIP_LOW}\" = \"x\" && SKIP_LOW=0\n+test \"x${SKIP_HIGH}\" = \"x\" && SKIP_HIGH=0\n+test \"x${DELTA}\" = \"x\" && DELTA=3600\n+test \"x${VERBOSITY}\" = \"x\" && VERBOSITY=0\n+test \"x${HAS_CHANGES}\" = \"x\" && HAS_CHANGES=true\n+test \"x${REG_FINISH}\" = \"x\" && REG_FINISH=true\n+\n+msg 2 \"LOW_DATE   = ${LOW_DATE}\"\n+msg 2 \"HIGH_DATE  = ${HIGH_DATE}\"\n+msg 2 \"REG_UPDATE = ${REG_UPDATE}\"\n+msg 2 \"REG_BUILD  = ${REG_BUILD}\"\n+msg 2 \"REG_TEST   = ${REG_TEST}\"\n+msg 2 \"SKIP_LOW   = ${SKIP_LOW}\"\n+msg 2 \"SKIP_HIGH  = ${SKIP_HIGH}\"\n+msg 2 \"FIRST_MID  = ${FIRST_MID}\"\n+msg 2 \"VERBOSITY  = ${VERBOSITY}\"\n+msg 2 \"DELTA      = ${DELTA}\"\n+\n+# Verify that DELTA is at least two minutes.\n+\n+test ${DELTA} -lt 120 && \\\n+  error \"DELTA is ${DELTA}, must be at least 120 (two minutes)\"\n+\n+# Change the dates into seconds since the epoch.  This uses an extension\n+# in GNU date.\n+\n+LOW_DATE=`date +%s --date \"${LOW_DATE}\"` || \\\n+  error \"date command failed for \\\"${LOW_DATE}\\\"\"\n+HIGH_DATE=`date +%s --date \"${HIGH_DATE}\"` || \\\n+  error \"date command failed for \\\"${LOW_DATE}\\\"\"\n+\n+# If FIRST_MID was defined, convert it and make sure it's in the range.\n+\n+if [ \"x${FIRST_MID}\" != \"x\" ]; then\n+  FIRST_MID=`date +%s --date \"${FIRST_MID}\"` || \\\n+    error \"date command failed for \\\"${FIRST_MID}\\\"\"\n+  test ${FIRST_MID} -le ${LOW_DATE}  && \\\n+    error \"FIRST_MID date is earlier than LOW_DATE\"\n+  test ${FIRST_MID} -ge ${HIGH_DATE} && \\\n+    error \"FIRST_MID is later than HIGH_DATE\"\n+else\n+  FIRST_MID=0\n+fi \n+\n+# Keep track of the bounds of the range where the test behavior changes,\n+# using a human-readable version of each date.\n+\n+make_date ${LOW_DATE}\n+LATER_THAN=\"${MADE_DATE}\"\n+make_date ${HIGH_DATE}\n+EARLIER_THAN=\"${MADE_DATE}\"\n+\n+msg 2 \"LATER_THAN   = ${LATER_THAN}\"\n+msg 2 \"EARLIER_THAN = ${EARLIER_THAN}\"\n+\n+# Verify that the range isn't backwards.\n+\n+test ${LOW_DATE} -lt ${HIGH_DATE} || error \"date range is backwards\"\n+\n+# Verify that the first and last date in the range get the results we\n+# expect.  If not, quit, because any of several things could be wrong.\n+\n+if [ ${SKIP_LOW} -eq 0 ]; then\n+  process_date \"${LATER_THAN}\"\n+  test ${LATER} -ne 1 && \\\n+    error \"unexpected result for low date ${LATER_THAN}\"\n+  msg 1 \"result for low date is as expected\"\n+fi\n+\n+if [ ${SKIP_HIGH} -eq 0 ]; then\n+  process_date \"${EARLIER_THAN}\"\n+  test ${LATER} -ne 0 && \\\n+    error \"unexpected result for high date ${EARLIER_THAN}\"\n+  msg 1 \"result for high date is as expected\"\n+fi\n+\n+# Search within the range, now that we know that the end points are valid.\n+\n+VALID_RANGE=1\n+search_dates ${LOW_DATE} ${HIGH_DATE}\n+\n+# Report the range that's left to investigate.\n+\n+echo \"Continue search between ${LATER_THAN} and ${EARLIER_THAN}\"\n+\n+# Invoke the optional script to report additional information about\n+# changes between the two dates.\n+\n+${REG_FINISH} \"${LATER_THAN}\" \"${EARLIER_THAN}\""}, {"sha": "8b9356667211bc6b1b08c7c98519fc381029cafb", "filename": "contrib/reghunt/reg_test_template", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57feaea9f433115e5b9b395e9400540ada3d224/contrib%2Freghunt%2Freg_test_template", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57feaea9f433115e5b9b395e9400540ada3d224/contrib%2Freghunt%2Freg_test_template", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Freghunt%2Freg_test_template?ref=e57feaea9f433115e5b9b395e9400540ada3d224", "patch": "@@ -0,0 +1,40 @@\n+#! /bin/sh\n+\n+# Template for the test script specified for REG_TEST.\n+\n+# Run the test case for a regression search.  The argument is the date\n+# of the CVS sources.  The return value is 1 if the binary search should\n+# continue with later dates, 0 if it should continue with earlier dates.\n+\n+DATE=\"${1}\"\n+\n+# Specify the PR number and the directory where the test should be run.\n+PR=xxxx\n+DIR=xxxx\n+\n+LOG_DATE=\"`echo ${DATE} | sed 's/[-: ]/_/g'`\"\n+LOG=\"${PR}.${LOG_DATE}.out\"\n+\n+echo \"`date`  running test for PR ${PR}\"\n+cd ${DIR}\n+\n+# Compile the test case with whatever options are needed to trigger the\n+# error.\n+\n+<compiler_to_run> <options> ${PR}.<x> > ${LOG} 2>&1\n+\n+# Some tests will require additional commands to determine whether the\n+# test passed or failed, such as grepping compiler output for a\n+# particular message, or running the test and possibly comparing its\n+# output with the expected output.\n+\n+xxxxx\n+\n+# The return value depends on whether the last command is expected to be\n+# zero or nonzero for a passing test, and whether we're looking for a\n+# regression or for the patch that fixed the bug.\n+\n+# Return 1 to continue the search with later dates, 0 for earlier dates.\n+\n+test $? -eq 0 && exit 1\n+exit 0"}]}