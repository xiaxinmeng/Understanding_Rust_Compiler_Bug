{"sha": "7ea84dc44cd48f9b7833248a2f0b716bbf37df2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VhODRkYzQ0Y2Q0OGY5Yjc4MzMyNDhhMmYwYjcxNmJiZjM3ZGYyYg==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@ispras.ru", "date": "2006-10-06T21:45:13Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2006-10-06T21:45:13Z"}, "message": "re PR rtl-optimization/29128 (ICE: in move_block_after_check, at haifa-sched.c:4337)\n\n2006-10-06  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n\n\tPR rtl-optimization/29128\n\t* sched-int.h (IS_SPECULATION_BRANCHY_CHECK_P): New macro.\n\t* sched-ebb.c (advance_target_bb): Use it to fix condition to\n\tallow interblock movement of speculation checks.\n\n\t* gcc.c-torture/compile/pr29128.c: New test.\n\nFrom-SVN: r117515", "tree": {"sha": "d4aed27cfc02ff872c40550b81096f52a7e90e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4aed27cfc02ff872c40550b81096f52a7e90e14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/comments", "author": null, "committer": null, "parents": [{"sha": "b5b8e31b32799ad6e13518d987c890fd2f0da1b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b8e31b32799ad6e13518d987c890fd2f0da1b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b8e31b32799ad6e13518d987c890fd2f0da1b4"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "17dc8cae1cb8aef38964bb37067d97ca8e1e95bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ea84dc44cd48f9b7833248a2f0b716bbf37df2b", "patch": "@@ -1,3 +1,10 @@\n+2006-10-06  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\tPR rtl-optimization/29128\n+\t* sched-int.h (IS_SPECULATION_BRANCHY_CHECK_P): New macro.\n+\t* sched-ebb.c (advance_target_bb): Use it to fix condition to\n+\tallow interblock movement of speculation checks.\n+\n 2006-10-06  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR middle-end/29256"}, {"sha": "599241a47c844d240b33d510a8d4c153c018c7ab", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=7ea84dc44cd48f9b7833248a2f0b716bbf37df2b", "patch": "@@ -719,9 +719,13 @@ advance_target_bb (basic_block bb, rtx insn)\n     {\n       if (BLOCK_FOR_INSN (insn) != bb\n \t  && control_flow_insn_p (insn)\n-\t  && !RECOVERY_BLOCK (insn)\n-\t  && !RECOVERY_BLOCK (BB_END (bb)))\n+\t  /* We handle interblock movement of the speculation check\n+\t     or over a speculation check in\n+\t     haifa-sched.c: move_block_after_check ().  */\n+\t  && !IS_SPECULATION_BRANCHY_CHECK_P (insn)\n+\t  && !IS_SPECULATION_BRANCHY_CHECK_P (BB_END (bb)))\n \t{\n+\t  /* Assert that we don't move jumps across blocks.  */\n \t  gcc_assert (!control_flow_insn_p (BB_END (bb))\n \t\t      && NOTE_INSN_BASIC_BLOCK_P (BB_HEAD (bb->next_bb)));\n \t  return bb;"}, {"sha": "3865013b9df00be0efee962c9c4624061b122616", "filename": "gcc/sched-int.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=7ea84dc44cd48f9b7833248a2f0b716bbf37df2b", "patch": "@@ -359,6 +359,13 @@ extern regset *glat_start, *glat_end;\n #define RECOVERY_BLOCK(INSN)    (h_i_d[INSN_UID (INSN)].recovery_block)\n #define ORIG_PAT(INSN)          (h_i_d[INSN_UID (INSN)].orig_pat)\n \n+/* INSN is a speculation check that will branch to RECOVERY_BLOCK if the\n+   speculation fail.  Insns in that block will reexecute the speculatively\n+   scheduled code and then will return immediatelly after INSN thus preserving\n+   semantics of the program.  */\n+#define IS_SPECULATION_BRANCHY_CHECK_P(INSN) \\\n+  (RECOVERY_BLOCK (INSN) != NULL && RECOVERY_BLOCK (INSN) != EXIT_BLOCK_PTR)\n+\n /* DEP_STATUS of the link encapsulates information, that is needed for\n    speculative scheduling.  Namely, it is 4 integers in the range\n    [0, MAX_DEP_WEAK] and 3 bits."}, {"sha": "e09494bc37bf89d39af52bae64b938a40408787b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ea84dc44cd48f9b7833248a2f0b716bbf37df2b", "patch": "@@ -1,3 +1,8 @@\n+2006-10-06  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\tPR rtl-optimization/29128\n+\t* gcc.c-torture/compile/pr29128.c: New test.\n+\n 2006-10-06  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* gfortran.dg/actual_array_constructor_2.f90: Remove '\\r's from"}, {"sha": "2afeae3ce22538461d27dea20f176b4b4b18ba21", "filename": "gcc/testsuite/gcc.c-torture/compile/pr29128.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr29128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea84dc44cd48f9b7833248a2f0b716bbf37df2b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr29128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr29128.c?ref=7ea84dc44cd48f9b7833248a2f0b716bbf37df2b", "patch": "@@ -0,0 +1,28 @@\n+typedef unsigned long Eterm;\n+process_main (void)\n+{\n+  register Eterm x0;\n+  register Eterm *reg = ((void *) 0);\n+  register Eterm *I = ((void *) 0);\n+  static void *opcodes[] = {\n+      &&lb_allocate_heap_zero_III,\n+      &&lb_allocate_init_tIy, &&lb_allocate_zero_tt\n+  };\n+lb_allocate_heap_III:{\n+    Eterm *next;\n+    goto *(next);\n+  }\n+lb_allocate_heap_zero_III:{\n+  }\n+lb_allocate_init_tIy:{\n+  }\n+lb_allocate_zero_tt:{\n+    Eterm *next;\n+    {\n+      Eterm *tmp_ptr = ((Eterm *) (((x0)) - 0x1));\n+      (*(Eterm *) (((unsigned char *) reg) + (I[(0) + 1]))) = ((tmp_ptr)[0]);\n+      x0 = ((tmp_ptr)[1]);\n+    }\n+    goto *(next);\n+  }\n+}"}]}