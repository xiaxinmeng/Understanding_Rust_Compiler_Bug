{"sha": "369dcbd9d2f7d4577f689b46ee3028bc7949049c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY5ZGNiZDlkMmY3ZDQ1NzdmNjg5YjQ2ZWUzMDI4YmM3OTQ5MDQ5Yw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-02-25T23:41:43Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-02-25T23:41:43Z"}, "message": "re PR other/28322 (GCC new warnings and compatibility)\n\n2008-02-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR 28322\n\t* toplev.c (toplev_main): If there are warnings or error, print\n\terrors for ignored options.\n\t* opts.c (ignored_options): New static variable.\n\t(postpone_unknown_option_error): New.\n\t(print_ignored_options): New.\n\t(handle_option): Postpone errors for unknown -Wno-* options.\n\t* opts.h (print_ignored_options): Declare.\ntestsuite/\n\t* gcc.dg/pr28322.c: New.\n\t* gcc.dg/pr28322-2.c: New.\n\t* lib/prune.exp: Ignore \"At top level\" even if there is no ':'\n\tpreceding it.\n\nFrom-SVN: r132648", "tree": {"sha": "3c64cf898a8a27198eb86ae7840a3237d55c24f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c64cf898a8a27198eb86ae7840a3237d55c24f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/369dcbd9d2f7d4577f689b46ee3028bc7949049c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369dcbd9d2f7d4577f689b46ee3028bc7949049c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/369dcbd9d2f7d4577f689b46ee3028bc7949049c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369dcbd9d2f7d4577f689b46ee3028bc7949049c/comments", "author": null, "committer": null, "parents": [{"sha": "23dc794c0e7bb0d82dbbe118a435d17c31af6732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23dc794c0e7bb0d82dbbe118a435d17c31af6732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23dc794c0e7bb0d82dbbe118a435d17c31af6732"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "3607c3ce1e782407de344c538b6491e3fa0b69f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=369dcbd9d2f7d4577f689b46ee3028bc7949049c", "patch": "@@ -1,3 +1,14 @@\n+2008-02-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 28322\n+\t* toplev.c (toplev_main): If there are warnings or error, print\n+\terrors for ignored options.\n+\t* opts.c (ignored_options): New static variable.\n+\t(postpone_unknown_option_error): New.\n+\t(print_ignored_options): New.\n+\t(handle_option): Postpone errors for unknown -Wno-* options.\n+\t* opts.h (print_ignored_options): Declare.\n+\t\n 2008-02-25  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/mips.md (loadgp_blockage, blockage): Change type"}, {"sha": "8bee44b947abe4c02565f1c8dfbde0444fc03ded", "filename": "gcc/opts.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=369dcbd9d2f7d4577f689b46ee3028bc7949049c", "patch": "@@ -365,6 +365,12 @@ DEF_VEC_ALLOC_P(char_p,heap);\n static VEC(char_p,heap) *flag_instrument_functions_exclude_functions;\n static VEC(char_p,heap) *flag_instrument_functions_exclude_files;\n \n+typedef const char *const_char_p; /* For DEF_VEC_P.  */\n+DEF_VEC_P(const_char_p);\n+DEF_VEC_ALLOC_P(const_char_p,heap);\n+\n+static VEC(const_char_p,heap) *ignored_options;\n+\n /* Input file names.  */\n const char **in_fnames;\n unsigned num_in_fnames;\n@@ -443,6 +449,33 @@ complain_wrong_lang (const char *text, const struct cl_option *option,\n   free (bad_lang);\n }\n \n+/* Buffer the unknown option described by the string OPT.  Currently,\n+   we only complain about unknown -Wno-* options if they may have\n+   prevented a diagnostic. Otherwise, we just ignore them.  */\n+\n+static void postpone_unknown_option_error(const char *opt)\n+{\n+  VEC_safe_push (const_char_p, heap, ignored_options, opt);\n+}\n+\n+/* Produce an error for each option previously buffered.  */\n+\n+void print_ignored_options (void)\n+{\n+  location_t saved_loc = input_location;\n+\n+  input_location = 0;\n+\n+  while (!VEC_empty (const_char_p, ignored_options))\n+    {\n+      const char *opt;\n+      opt = VEC_pop (const_char_p, ignored_options);\n+      error (\"unrecognized command line option \\\"%s\\\"\", opt);\n+    }\n+\n+  input_location = saved_loc;\n+}\n+\n /* Handle the switch beginning at ARGV for the language indicated by\n    LANG_MASK.  Returns the number of switches consumed.  */\n static unsigned int\n@@ -472,6 +505,14 @@ handle_option (const char **argv, unsigned int lang_mask)\n       opt = dup;\n       value = 0;\n       opt_index = find_opt (opt + 1, lang_mask | CL_COMMON | CL_TARGET);\n+      if (opt_index == cl_options_count)\n+\t{\n+\t  /* We don't generate errors for unknown -Wno-* options\n+             unless we issue diagnostics.  */\n+\t  postpone_unknown_option_error (argv[0]);\n+\t  result = 1;\n+\t  goto done;\n+\t}\n     }\n \n   if (opt_index == cl_options_count)"}, {"sha": "2f543407de0baed738f82cb91f1bcf5469ecf755", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=369dcbd9d2f7d4577f689b46ee3028bc7949049c", "patch": "@@ -105,4 +105,5 @@ extern bool get_option_state (int, struct cl_option_state *);\n \n extern void enable_warning_as_error (const char *arg, int value,\n \t\t\t\t     unsigned int lang_mask);\n+extern void print_ignored_options (void);\n #endif"}, {"sha": "7dd0ff39611fd469c2da4576f5f92da09eedef32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=369dcbd9d2f7d4577f689b46ee3028bc7949049c", "patch": "@@ -1,3 +1,11 @@\n+2008-02-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\t\n+\tPR 28322\n+\t* gcc.dg/pr28322.c: New.\n+\t* gcc.dg/pr28322-2.c: New.\n+\t* lib/prune.exp: Ignore \"At top level\" even if there is no ':'\n+\tpreceding it.\n+\n 2008-02-25  Paolo Carlini  <pcarlini@suse.de>\n \n         PR c++/35333"}, {"sha": "8fde7b21aa30571f237c145b2d41f8bc57b89ae0", "filename": "gcc/testsuite/gcc.dg/pr28322-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-2.c?ref=369dcbd9d2f7d4577f689b46ee3028bc7949049c", "patch": "@@ -0,0 +1,12 @@\n+/* PR28322: ignore unknown -Wno-* if no warning is emitted.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Wextra -Wno-foobar\" } */\n+\n+int foo (void) \n+{\n+  int i = 1/0;  /* { dg-warning \"division by zero\" } */\n+  return i;\n+}\n+\n+/* { dg-message \"unrecognized command line option .-Wno-foobar.\" \"\" { target *-*-* } 0 } */\n+"}, {"sha": "99872fca8ee5fec00d8ac3777ed4436e2b9db16f", "filename": "gcc/testsuite/gcc.dg/pr28322.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322.c?ref=369dcbd9d2f7d4577f689b46ee3028bc7949049c", "patch": "@@ -0,0 +1,8 @@\n+/* PR28322: ignore unknown -Wno-* if no warning is emitted.  */\n+/* { dg-do compile } */\n+/* { dg-options \" -Wno-foobar -Wno-div-by-zero\" } */\n+\n+void foo(void)\n+{\n+  int i =  1/0;\n+}"}, {"sha": "d1a9f95bd46b5911ed7c1305b00017fd8afe83c3", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=369dcbd9d2f7d4577f689b46ee3028bc7949049c", "patch": "@@ -21,7 +21,7 @@ proc prune_gcc_output { text } {\n     #send_user \"Before:$text\\n\"\n \n     regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member )?function|member|method|(copy )?constructor|destructor|instantiation|program|subroutine|block-data) \\[^\\n\\]*\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*: At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*(: )?At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   instantiated from \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)    inlined from \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)collect2: ld returned \\[^\\n\\]*\" $text \"\" text"}, {"sha": "fddf13f39246d263bc5a807c3332c34aad52cf02", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369dcbd9d2f7d4577f689b46ee3028bc7949049c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=369dcbd9d2f7d4577f689b46ee3028bc7949049c", "patch": "@@ -2282,6 +2282,9 @@ toplev_main (unsigned int argc, const char **argv)\n   if (!exit_after_options)\n     do_compile ();\n \n+  if (warningcount || errorcount) \n+    print_ignored_options ();\n+\n   if (errorcount || sorrycount)\n     return (FATAL_EXIT_CODE);\n "}]}