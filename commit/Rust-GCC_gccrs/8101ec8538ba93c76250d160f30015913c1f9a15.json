{"sha": "8101ec8538ba93c76250d160f30015913c1f9a15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwMWVjODUzOGJhOTNjNzYyNTBkMTYwZjMwMDE1OTEzYzFmOWExNQ==", "commit": {"author": {"name": "Simon Atanasyan", "email": "simon.atanasyan@imgtec.com", "date": "2017-09-12T12:51:40Z"}, "committer": {"name": "Matthew Fortune", "email": "mpf@gcc.gnu.org", "date": "2017-09-12T12:51:40Z"}, "message": "Add short_call function attribute for MIPS\n\ngcc/\n\t* config/mips/mips.c (mips_attribute_table): Add 'short_call'\n\tattribute.\n\t(mips_near_type_p): Add 'short_call' attribute as a synonym\n\tfor 'near'.\n\t* doc/extend.texi (short_call): Document new function attribute.\n\ngcc/testsuite\n\n\t* gcc.target/mips/near-far-1.c: Add check for 'short_call'\n\tattribute.\n\t* gcc.target/mips/near-far-2.c: Likewise.\n\t* gcc.target/mips/near-far-3.c: Likewise.\n\t* gcc.target/mips/near-far-4.c: Likewise.\n\nFrom-SVN: r252006", "tree": {"sha": "1f689d56f38dc672a24c4b6635c49d2b7dac2fc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f689d56f38dc672a24c4b6635c49d2b7dac2fc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8101ec8538ba93c76250d160f30015913c1f9a15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8101ec8538ba93c76250d160f30015913c1f9a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8101ec8538ba93c76250d160f30015913c1f9a15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8101ec8538ba93c76250d160f30015913c1f9a15/comments", "author": null, "committer": null, "parents": [{"sha": "45e3a33db7e23a4328974d19a5843d5053461eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e3a33db7e23a4328974d19a5843d5053461eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e3a33db7e23a4328974d19a5843d5053461eec"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "67753a24251822dc8149ec700d639a345bae4864", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8101ec8538ba93c76250d160f30015913c1f9a15", "patch": "@@ -1,3 +1,11 @@\n+2017-09-12  Simon Atanasyan  <simon.atanasyan@imgtec.com>\n+\n+\t* config/mips/mips.c (mips_attribute_table): Add 'short_call'\n+\tattribute.\n+\t(mips_near_type_p): Add 'short_call' attribute as a synonym\n+\tfor 'near'.\n+\t* doc/extend.texi (short_call): Document new function attribute.\n+\n 2017-09-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/82112"}, {"sha": "5c9094bce331f266fd89293beb1456260f8e4552", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=8101ec8538ba93c76250d160f30015913c1f9a15", "patch": "@@ -598,6 +598,7 @@ static const struct attribute_spec mips_attribute_table[] = {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n        om_diagnostic } */\n   { \"long_call\",   0, 0, false, true,  true,  NULL, false },\n+  { \"short_call\",  0, 0, false, true,  true,  NULL, false },\n   { \"far\",     \t   0, 0, false, true,  true,  NULL, false },\n   { \"near\",        0, 0, false, true,  true,  NULL, false },\n   /* We would really like to treat \"mips16\" and \"nomips16\" as type\n@@ -1171,13 +1172,14 @@ mflip_mips16_use_mips16_p (tree decl)\n   return *slot;\n }\n \f\n-/* Predicates to test for presence of \"near\" and \"far\"/\"long_call\"\n+/* Predicates to test for presence of \"near\"/\"short_call\" and \"far\"/\"long_call\"\n    attributes on the given TYPE.  */\n \n static bool\n mips_near_type_p (const_tree type)\n {\n-  return lookup_attribute (\"near\", TYPE_ATTRIBUTES (type)) != NULL;\n+  return (lookup_attribute (\"short_call\", TYPE_ATTRIBUTES (type)) != NULL\n+\t  || lookup_attribute (\"near\", TYPE_ATTRIBUTES (type)) != NULL);\n }\n \n static bool"}, {"sha": "cd5733e0d115d35a99e9029b692c82dc5860acb7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8101ec8538ba93c76250d160f30015913c1f9a15", "patch": "@@ -4528,19 +4528,22 @@ void __attribute__ ((interrupt(\"vector=hw3\"))) v9 ();\n @end smallexample\n \n @item long_call\n+@itemx short_call\n @itemx near\n @itemx far\n @cindex indirect calls, MIPS\n @cindex @code{long_call} function attribute, MIPS\n+@cindex @code{short_call} function attribute, MIPS\n @cindex @code{near} function attribute, MIPS\n @cindex @code{far} function attribute, MIPS\n These attributes specify how a particular function is called on MIPS@.\n The attributes override the @option{-mlong-calls} (@pxref{MIPS Options})\n command-line switch.  The @code{long_call} and @code{far} attributes are\n synonyms, and cause the compiler to always call\n the function by first loading its address into a register, and then using\n-the contents of that register.  The @code{near} attribute has the opposite\n-effect; it specifies that non-PIC calls should be made using the more\n+the contents of that register.  The @code{short_call} and @code{near}\n+attributes are synonyms, and have the opposite\n+effect; they specify that non-PIC calls should be made using the more\n efficient @code{jal} instruction.\n \n @item mips16"}, {"sha": "5d81c587e9cae4e9e2ccd426eaab47122587a338", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8101ec8538ba93c76250d160f30015913c1f9a15", "patch": "@@ -1,3 +1,11 @@\n+2017-09-12  Simon Atanasyan  <simon.atanasyan@imgtec.com>\n+\n+\t* gcc.target/mips/near-far-1.c: Add check for 'short_call'\n+\tattribute.\n+\t* gcc.target/mips/near-far-2.c: Likewise.\n+\t* gcc.target/mips/near-far-3.c: Likewise.\n+\t* gcc.target/mips/near-far-4.c: Likewise.\n+\n 2017-09-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/82112"}, {"sha": "356f7adc725231a9172117a8cc15a8f75832c51e", "filename": "gcc/testsuite/gcc.target/mips/near-far-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-1.c?ref=8101ec8538ba93c76250d160f30015913c1f9a15", "patch": "@@ -3,18 +3,21 @@\n \n extern int long_call_func () __attribute__((long_call));\n extern int far_func () __attribute__((far));\n+extern int short_call_func () __attribute__((short_call));\n extern int near_func () __attribute__((near));\n extern int normal_func ();\n \n int test ()\n {\n   return (long_call_func ()\n           + far_func ()\n+          + short_call_func ()\n           + near_func ()\n           + normal_func ());\n }\n \n /* { dg-final { scan-assembler-not \"\\tjal\\tlong_call_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tjal\\tfar_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\t(jal(|s)|balc)\\tshort_call_func\\n\" } } */\n /* { dg-final { scan-assembler     \"\\t(jal(|s)|balc)\\tnear_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tjal\\tnormal_func\\n\" } } */"}, {"sha": "2e8dbb17f7e23948e41bc2f4c57ffba67fbf8841", "filename": "gcc/testsuite/gcc.target/mips/near-far-2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-2.c?ref=8101ec8538ba93c76250d160f30015913c1f9a15", "patch": "@@ -3,18 +3,21 @@\n \n extern int long_call_func () __attribute__((long_call));\n extern int far_func () __attribute__((far));\n+extern int short_call_func () __attribute__((short_call));\n extern int near_func () __attribute__((near));\n extern int normal_func ();\n \n int test ()\n {\n   return (long_call_func ()\n           + far_func ()\n+          + short_call_func ()\n           + near_func ()\n           + normal_func ());\n }\n \n /* { dg-final { scan-assembler-not \"\\tjal(|s)\\tlong_call_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tjal(|s)\\tfar_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\t(jal(|s)|balc)\\tshort_call_func\\n\" } } */\n /* { dg-final { scan-assembler     \"\\t(jal(|s)|balc)\\tnear_func\\n\" } } */\n /* { dg-final { scan-assembler     \"\\t(jal(|s)|balc)\\tnormal_func\\n\" } } */"}, {"sha": "19e1b3a7334cce49de94fb039cd3099d9ac2951f", "filename": "gcc/testsuite/gcc.target/mips/near-far-3.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-3.c?ref=8101ec8538ba93c76250d160f30015913c1f9a15", "patch": "@@ -3,15 +3,18 @@\n \n NOMIPS16 extern int long_call_func () __attribute__((long_call));\n NOMIPS16 extern int far_func () __attribute__((far));\n+NOMIPS16 extern int short_call_func () __attribute__((short_call));\n NOMIPS16 extern int near_func () __attribute__((near));\n NOMIPS16 extern int normal_func ();\n \n NOMIPS16 int test1 () { return long_call_func (); }\n NOMIPS16 int test2 () { return far_func (); }\n NOMIPS16 int test3 () { return near_func (); }\n NOMIPS16 int test4 () { return normal_func (); }\n+NOMIPS16 int test5 () { return short_call_func (); }\n \n /* { dg-final { scan-assembler-not \"\\tj\\tlong_call_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tj\\tfar_func\\n\" } } */\n /* { dg-final { scan-assembler     \"\\t(j(|al|als)|b(|al)c)\\tnear_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tj\\tnormal_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\t(j(|al|als)|b(|al)c)\\tshort_call_func\\n\" } } */"}, {"sha": "ac7d727381429fe5c6e11ad55e5d42f67148c63d", "filename": "gcc/testsuite/gcc.target/mips/near-far-4.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101ec8538ba93c76250d160f30015913c1f9a15/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-4.c?ref=8101ec8538ba93c76250d160f30015913c1f9a15", "patch": "@@ -3,15 +3,18 @@\n \n NOMIPS16 extern int long_call_func () __attribute__((long_call));\n NOMIPS16 extern int far_func () __attribute__((far));\n+NOMIPS16 extern int short_call_func () __attribute__((short_call));\n NOMIPS16 extern int near_func () __attribute__((near));\n NOMIPS16 extern int normal_func ();\n \n NOMIPS16 int test1 () { return long_call_func (); }\n NOMIPS16 int test2 () { return far_func (); }\n NOMIPS16 int test3 () { return near_func (); }\n NOMIPS16 int test4 () { return normal_func (); }\n+NOMIPS16 int test5 () { return short_call_func (); }\n \n /* { dg-final { scan-assembler-not \"\\tj\\tlong_call_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tj\\tfar_func\\n\" } } */\n /* { dg-final { scan-assembler     \"\\t(j(|al|als)|b(|al)c)\\tnear_func\\n\" } } */\n /* { dg-final { scan-assembler     \"\\t(j(|al|als)|b(|al)c)\\tnormal_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\t(j(|al|als)|b(|al)c)\\tshort_call_func\\n\" } } */"}]}