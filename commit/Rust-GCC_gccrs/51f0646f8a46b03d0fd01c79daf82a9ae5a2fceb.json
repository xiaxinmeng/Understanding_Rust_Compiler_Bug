{"sha": "51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFmMDY0NmY4YTQ2YjAzZDBmZDAxYzc5ZGFmODJhOWFlNWEyZmNlYg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-06-17T13:29:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-06-17T13:29:11Z"}, "message": "loop.c (move_movables): Note issues with replacing REGs with SUBREGs.\n\n\ufffd\n        * loop.c (move_movables): Note issues with replacing REGs with\n        SUBREGs.\n        * mips.h (GO_IF_LEGITIMATE_ADDRESS): Handle SUBREGs properly.\n\nFrom-SVN: r27573", "tree": {"sha": "399c423c555ce3ac267265c912e79063686f2837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/399c423c555ce3ac267265c912e79063686f2837"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb/comments", "author": null, "committer": null, "parents": [{"sha": "048f60dcb1e7663c2fcd5e1d5f0aaad621e786c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048f60dcb1e7663c2fcd5e1d5f0aaad621e786c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048f60dcb1e7663c2fcd5e1d5f0aaad621e786c4"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "dabee24bdee5a2fa62e37d9abdf0e0af2e5636fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb", "patch": "@@ -1,3 +1,9 @@\n+Thu Jun 17 14:25:08 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* loop.c (move_movables): Note issues with replacing REGs with\n+\tSUBREGs.\n+\t* mips.h (GO_IF_LEGITIMATE_ADDRESS): Handle SUBREGs properly.\n+\n Thu Jun 17 13:28:30 1999  David O'Brien <obrien@FreeBSD.org>\n \n \t* i386/freebsd-elf.h (LINK_SPEC): Fix typo."}, {"sha": "ed900962c4e434523e2261ad89b5171ef8934e3f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb", "patch": "@@ -2858,6 +2858,9 @@ typedef struct mips_args {\n       GO_DEBUG_RTX (xinsn);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  while (GET_CODE (xinsn) == SUBREG)\t\t\t\t\t\\\n+    xinsn = SUBREG_REG (xinsn);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   /* The mips16 can only use the stack pointer as a base register when\t\\\n      loading SImode or DImode values.  */\t\t\t\t\\\n   if (GET_CODE (xinsn) == REG && REG_MODE_OK_FOR_BASE_P (xinsn, MODE))\t\\\n@@ -2873,6 +2876,8 @@ typedef struct mips_args {\n       register rtx xlow0 = XEXP (xinsn, 0);\t\t\t\t\\\n       register rtx xlow1 = XEXP (xinsn, 1);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+      while (GET_CODE (xlow0) == SUBREG)\t\t\t\t\\\n+\txlow0 = SUBREG_REG (xlow0);\t\t\t\t\t\\\n       if (GET_CODE (xlow0) == REG\t\t\t\t\t\\\n \t  && REG_MODE_OK_FOR_BASE_P (xlow0, MODE)\t\t\t\\\n \t  && mips_check_split (xlow1, MODE))\t\t\t\t\\\n@@ -2883,8 +2888,16 @@ typedef struct mips_args {\n     {\t\t\t\t\t\t\t\t\t\\\n       register rtx xplus0 = XEXP (xinsn, 0);\t\t\t\t\\\n       register rtx xplus1 = XEXP (xinsn, 1);\t\t\t\t\\\n-      register enum rtx_code code0 = GET_CODE (xplus0);\t\t\t\\\n-      register enum rtx_code code1 = GET_CODE (xplus1);\t\t\t\\\n+      register enum rtx_code code0;\t\t\t\t\t\\\n+      register enum rtx_code code1;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      while (GET_CODE (xplus0) == SUBREG)\t\t\t\t\\\n+\txplus0 = SUBREG_REG (xplus0);\t\t\t\t\t\\\n+      code0 = GET_CODE (xplus0);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      while (GET_CODE (xplus1) == SUBREG)\t\t\t\t\\\n+\txplus1 = SUBREG_REG (xplus1);\t\t\t\t\t\\\n+      code1 = GET_CODE (xplus1);\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* The mips16 can only use the stack pointer as a base register\t\\\n          when loading SImode or DImode values.  */\t\t\t\\"}, {"sha": "dcddba681b4ff5c40a99257282461eca7ad14695", "filename": "gcc/loop.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=51f0646f8a46b03d0fd01c79daf82a9ae5a2fceb", "patch": "@@ -2170,7 +2170,14 @@ move_movables (movables, threshold, insn_count, loop_start, end, nregs)\n \t\t      /* Schedule the reg loaded by M1\n \t\t\t for replacement so that shares the reg of M.\n \t\t\t If the modes differ (only possible in restricted\n-\t\t\t circumstances, make a SUBREG.  */\n+\t\t\t circumstances, make a SUBREG.\n+\n+\t\t\t Note this assumes that the target dependent files\n+\t\t\t treat REG and SUBREG equally, including within\n+\t\t\t GO_IF_LEGITIMATE_ADDRESS and in all the\n+\t\t\t predicates since we never verify that replacing the\n+\t\t\t original register with a SUBREG results in a\n+\t\t\t recognizable insn.  */\n \t\t      if (GET_MODE (m->set_dest) == GET_MODE (m1->set_dest))\n \t\t\treg_map[m1->regno] = m->set_dest;\n \t\t      else"}]}