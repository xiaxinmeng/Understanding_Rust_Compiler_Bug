{"sha": "8ab78162c0dfc65aef769516ba77560566577113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiNzgxNjJjMGRmYzY1YWVmNzY5NTE2YmE3NzU2MDU2NjU3NzExMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-10-27T20:16:04Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-10-27T20:16:04Z"}, "message": "internal-fn.c (expand_UNIQUE): New.\n\n\t* internal-fn.c (expand_UNIQUE): New.\n\t* internal-fn.h (enum ifn_unique_kind): New.\n\t* internal-fn.def (IFN_UNIQUE): New.\n\t* target-insns.def (unique): Define.\n\t* gimple.h (gimple_call_internal_unique_p): New.\n\t* gimple.c (gimple_call_same_target_p): Check internal fn\n\tuniqueness.\n\t* tracer.c (ignore_bb_p): Check for IFN_UNIQUE call.\n\t* tree-ssa-threadedge.c\n\t(record_temporary_equivalences_from_stmts): Likewise.\n\t* tree-cfg.c (gmple_call_initialize_ctrl_altering): Likewise.\n\nFrom-SVN: r229459", "tree": {"sha": "bd71d653036a68ca09bc7d09522690d5e4988df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd71d653036a68ca09bc7d09522690d5e4988df5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ab78162c0dfc65aef769516ba77560566577113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab78162c0dfc65aef769516ba77560566577113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab78162c0dfc65aef769516ba77560566577113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab78162c0dfc65aef769516ba77560566577113/comments", "author": null, "committer": null, "parents": [{"sha": "a271b387e6375d5612a2bd8669e0da1ac731e9c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a271b387e6375d5612a2bd8669e0da1ac731e9c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a271b387e6375d5612a2bd8669e0da1ac731e9c3"}], "stats": {"total": 109, "additions": 98, "deletions": 11}, "files": [{"sha": "19a6809e8d49a789ce34cc27a9adda21a0e59104", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab78162c0dfc65aef769516ba77560566577113/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab78162c0dfc65aef769516ba77560566577113/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ab78162c0dfc65aef769516ba77560566577113", "patch": "@@ -1,3 +1,17 @@\n+2015-10-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\t\n+\t* internal-fn.c (expand_UNIQUE): New.\n+\t* internal-fn.h (enum ifn_unique_kind): New.\n+\t* internal-fn.def (IFN_UNIQUE): New.\n+\t* target-insns.def (unique): Define.\n+\t* gimple.h (gimple_call_internal_unique_p): New.\n+\t* gimple.c (gimple_call_same_target_p): Check internal fn\n+\tuniqueness.\n+\t* tracer.c (ignore_bb_p): Check for IFN_UNIQUE call.\n+\t* tree-ssa-threadedge.c\n+\t(record_temporary_equivalences_from_stmts): Likewise.\n+\t* tree-cfg.c (gmple_call_initialize_ctrl_altering): Likewise.\n+\n 2015-10-27  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/67609\n@@ -29,8 +43,10 @@\n \n \t* graphite-optimize-isl.c (get_schedule_for_node_st): New callback\n \t  function to schedule based on isl_schedule_node.\n-\t(get_schedule_map_st): New schedule optimizer based on isl_schedule_node.\n-\t(scop_get_domains): New. Return the isl_union_set containing the domains of all the pbbs.\n+\t(get_schedule_map_st): New schedule optimizer based on\n+\tisl_schedule_node.\n+\t(scop_get_domains): New. Return the isl_union_set containing the\n+\tdomains of all the pbbs.\n \t(optimize_isl): Call the new function get_schedule_map_st for isl-0.15\n \n 2015-10-27  H.J. Lu  <hongjiu.lu@intel.com>"}, {"sha": "d7ce18749d23199fe71de144d85ef4a89540de58", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=8ab78162c0dfc65aef769516ba77560566577113", "patch": "@@ -1346,7 +1346,8 @@ gimple_call_same_target_p (const gimple *c1, const gimple *c2)\n {\n   if (gimple_call_internal_p (c1))\n     return (gimple_call_internal_p (c2)\n-\t    && gimple_call_internal_fn (c1) == gimple_call_internal_fn (c2));\n+\t    && gimple_call_internal_fn (c1) == gimple_call_internal_fn (c2)\n+\t    && !gimple_call_internal_unique_p (as_a <const gcall *> (c1)));\n   else\n     return (gimple_call_fn (c1) == gimple_call_fn (c2)\n \t    || (gimple_call_fndecl (c1)"}, {"sha": "781801b7c4a7b95f5d7abe226fc8c7992bc5ffed", "filename": "gcc/gimple.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=8ab78162c0dfc65aef769516ba77560566577113", "patch": "@@ -2895,6 +2895,21 @@ gimple_call_internal_fn (const gimple *gs)\n   return gimple_call_internal_fn (gc);\n }\n \n+/* Return true, if this internal gimple call is unique.  */\n+\n+static inline bool\n+gimple_call_internal_unique_p (const gcall *gs)\n+{\n+  return gimple_call_internal_fn (gs) == IFN_UNIQUE;\n+}\n+\n+static inline bool\n+gimple_call_internal_unique_p (const gimple *gs)\n+{\n+  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);\n+  return gimple_call_internal_unique_p (gc);\n+}\n+\n /* If CTRL_ALTERING_P is true, mark GIMPLE_CALL S to be a stmt\n    that could alter control flow.  */\n "}, {"sha": "ff5a90dc5028876eff245f6de174cb5bba3f521d", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=8ab78162c0dfc65aef769516ba77560566577113", "patch": "@@ -1958,6 +1958,30 @@ expand_VA_ARG (gcall *stmt ATTRIBUTE_UNUSED)\n   gcc_unreachable ();\n }\n \n+/* Expand the IFN_UNIQUE function according to its first argument.  */\n+\n+static void\n+expand_UNIQUE (gcall *stmt)\n+{\n+  rtx pattern = NULL_RTX;\n+  enum ifn_unique_kind kind\n+    = (enum ifn_unique_kind) TREE_INT_CST_LOW (gimple_call_arg (stmt, 0));\n+\n+  switch (kind)\n+    {\n+    default:\n+      gcc_unreachable ();\n+\n+    case IFN_UNIQUE_UNSPEC:\n+      if (targetm.have_unique ())\n+\tpattern = targetm.gen_unique ();\n+      break;\n+    }\n+\n+  if (pattern)\n+    emit_insn (pattern);\n+}\n+\n /* Routines to expand each internal function, indexed by function number.\n    Each routine has the prototype:\n "}, {"sha": "e181bccf52d3ba8213814c7f7268b5d8b0228832", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=8ab78162c0dfc65aef769516ba77560566577113", "patch": "@@ -65,3 +65,10 @@ DEF_INTERNAL_FN (SUB_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (MUL_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (TSAN_FUNC_EXIT, ECF_NOVOPS | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (VA_ARG, ECF_NOTHROW | ECF_LEAF, NULL)\n+\n+/* An unduplicable, uncombinable function.  Generally used to preserve\n+   a CFG property in the face of jump threading, tail merging or\n+   other such optimizations.  The first argument distinguishes\n+   between uses.  See internal-fn.h for usage.  */\n+DEF_INTERNAL_FN (UNIQUE, ECF_NOTHROW, NULL)\n+"}, {"sha": "521e4af26479b936f5ab7a91ee704a4641fa8a47", "filename": "gcc/internal-fn.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Finternal-fn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Finternal-fn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.h?ref=8ab78162c0dfc65aef769516ba77560566577113", "patch": "@@ -20,6 +20,11 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_INTERNAL_FN_H\n #define GCC_INTERNAL_FN_H\n \n+/* INTEGER_CST values for IFN_UNIQUE function arg-0.  */\n+enum ifn_unique_kind {\n+  IFN_UNIQUE_UNSPEC   /* Undifferentiated UNIQUE.  */\n+};\n+\n /* Initialize internal function tables.  */\n \n extern void init_internal_fns ();"}, {"sha": "d79fdf21db890ab341cddfb7e899dcf8bb816ced", "filename": "gcc/target-insns.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=8ab78162c0dfc65aef769516ba77560566577113", "patch": "@@ -89,5 +89,6 @@ DEF_TARGET_INSN (stack_protect_test, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (store_multiple, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (tablejump, (rtx x0, rtx x1))\n DEF_TARGET_INSN (trap, (void))\n+DEF_TARGET_INSN (unique, (void))\n DEF_TARGET_INSN (untyped_call, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (untyped_return, (rtx x0, rtx x1))"}, {"sha": "074a96a39721033f03f87c61d8b17810f4690394", "filename": "gcc/tracer.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=8ab78162c0dfc65aef769516ba77560566577113", "patch": "@@ -93,18 +93,25 @@ bb_seen_p (basic_block bb)\n static bool\n ignore_bb_p (const_basic_block bb)\n {\n-  gimple *g;\n-\n   if (bb->index < NUM_FIXED_BLOCKS)\n     return true;\n   if (optimize_bb_for_size_p (bb))\n     return true;\n \n-  /* A transaction is a single entry multiple exit region.  It must be\n-     duplicated in its entirety or not at all.  */\n-  g = last_stmt (CONST_CAST_BB (bb));\n-  if (g && gimple_code (g) == GIMPLE_TRANSACTION)\n-    return true;\n+  if (gimple *g = last_stmt (CONST_CAST_BB (bb)))\n+    {\n+      /* A transaction is a single entry multiple exit region.  It\n+\t must be duplicated in its entirety or not at all.  */\n+      if (gimple_code (g) == GIMPLE_TRANSACTION)\n+\treturn true;\n+\n+      /* An IFN_UNIQUE call must be duplicated as part of its group,\n+\t or not at all.  */\n+      if (is_gimple_call (g)\n+\t  && gimple_call_internal_p (g)\n+\t  && gimple_call_internal_unique_p (g))\n+\treturn true;\n+    }\n \n   return false;\n }"}, {"sha": "970207d04d2af4fecb66ce68fb559c3251d2936b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=8ab78162c0dfc65aef769516ba77560566577113", "patch": "@@ -487,7 +487,11 @@ gimple_call_initialize_ctrl_altering (gimple *stmt)\n       || ((flags & ECF_TM_BUILTIN)\n \t  && is_tm_ending_fndecl (gimple_call_fndecl (stmt)))\n       /* BUILT_IN_RETURN call is same as return statement.  */\n-      || gimple_call_builtin_p (stmt, BUILT_IN_RETURN))\n+      || gimple_call_builtin_p (stmt, BUILT_IN_RETURN)\n+      /* IFN_UNIQUE should be the last insn, to make checking for it\n+\t as cheap as possible.  */\n+      || (gimple_call_internal_p (stmt)\n+\t  && gimple_call_internal_unique_p (stmt)))\n     gimple_call_set_ctrl_altering (stmt, true);\n   else\n     gimple_call_set_ctrl_altering (stmt, false);"}, {"sha": "68fd4ef17ec45c03e5769bc7135931b6616e242b", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab78162c0dfc65aef769516ba77560566577113/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=8ab78162c0dfc65aef769516ba77560566577113", "patch": "@@ -247,6 +247,13 @@ record_temporary_equivalences_from_stmts_at_dest (edge e,\n \t  && gimple_asm_volatile_p (as_a <gasm *> (stmt)))\n \treturn NULL;\n \n+      /* If the statement is a unique builtin, we can not thread\n+\t through here.  */\n+      if (gimple_code (stmt) == GIMPLE_CALL\n+\t  && gimple_call_internal_p (stmt)\n+\t  && gimple_call_internal_unique_p (stmt))\n+\treturn NULL;\n+\n       /* If duplicating this block is going to cause too much code\n \t expansion, then do not thread through this block.  */\n       stmt_count++;"}]}