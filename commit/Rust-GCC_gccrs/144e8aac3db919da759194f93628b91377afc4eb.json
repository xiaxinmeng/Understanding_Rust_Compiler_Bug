{"sha": "144e8aac3db919da759194f93628b91377afc4eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0ZThhYWMzZGI5MTlkYTc1OTE5NGY5MzYyOGI5MTM3N2FmYzRlYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-03-28T11:00:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-03-28T11:00:07Z"}, "message": "cgraph.c (cgraph_node, [...]): Remove master clone handling.\n\n\n\t* cgraph.c (cgraph_node, cgraph_remove_node, dump_cgraph_node,\n\tcgraph_clone_node): Remove master clone handling.\n\t(cgraph_is_master_clone, cgraph_master_clone): Remove.\n\t* cgraph.h (master_clone): Remove.\n\t(cgraph_is_master_clone, cgraph_master_clone): Remove.\n\t* ipa-type-escape.c (type_escape_execute): Remove use of master clone.\n\t(tree-ssa-structalias.c (ipa_pta_execute): Likewise.\n\nFrom-SVN: r145175", "tree": {"sha": "c08f8afe0e5fdd9e320ec693410d8f7c2419be3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c08f8afe0e5fdd9e320ec693410d8f7c2419be3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/144e8aac3db919da759194f93628b91377afc4eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144e8aac3db919da759194f93628b91377afc4eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144e8aac3db919da759194f93628b91377afc4eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144e8aac3db919da759194f93628b91377afc4eb/comments", "author": null, "committer": null, "parents": [{"sha": "4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552"}], "stats": {"total": 56, "additions": 13, "deletions": 43}, "files": [{"sha": "b700ee7fb7879c7264819b663e856c36829144f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144e8aac3db919da759194f93628b91377afc4eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144e8aac3db919da759194f93628b91377afc4eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=144e8aac3db919da759194f93628b91377afc4eb", "patch": "@@ -1,3 +1,13 @@\n+2009-03-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_node, cgraph_remove_node, dump_cgraph_node,\n+\tcgraph_clone_node): Remove master clone handling.\n+\t(cgraph_is_master_clone, cgraph_master_clone): Remove.\n+\t* cgraph.h (master_clone): Remove.\n+\t(cgraph_is_master_clone, cgraph_master_clone): Remove.\n+\t* ipa-type-escape.c (type_escape_execute): Remove use of master clone.\n+\t(tree-ssa-structalias.c (ipa_pta_execute): Likewise.\n+\n 2009-03-28  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_function_body_availability): Functions declared"}, {"sha": "fa9ac3d427c03132ed0332251d3d612e28cf2a2f", "filename": "gcc/cgraph.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144e8aac3db919da759194f93628b91377afc4eb/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144e8aac3db919da759194f93628b91377afc4eb/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=144e8aac3db919da759194f93628b91377afc4eb", "patch": "@@ -464,8 +464,6 @@ cgraph_node (tree decl)\n   if (*slot)\n     {\n       node = *slot;\n-      if (!node->master_clone)\n-\tnode->master_clone = node;\n       return node;\n     }\n \n@@ -477,7 +475,6 @@ cgraph_node (tree decl)\n       node->origin = cgraph_node (DECL_CONTEXT (decl));\n       node->next_nested = node->origin->nested;\n       node->origin->nested = node;\n-      node->master_clone = node;\n     }\n   if (assembler_name_hash)\n     {\n@@ -985,11 +982,6 @@ cgraph_remove_node (struct cgraph_node *node)\n       if (node->next_clone)\n       {\n \tstruct cgraph_node *new_node = node->next_clone;\n-\tstruct cgraph_node *n;\n-\n-\t/* Make the next clone be the master clone */\n-\tfor (n = new_node; n; n = n->next_clone)\n-\t  n->master_clone = new_node;\n \n \t*slot = new_node;\n \tnode->next_clone->prev_clone = NULL;\n@@ -1139,8 +1131,6 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n   if (cgraph_function_flags_ready)\n     fprintf (f, \" availability:%s\",\n \t     cgraph_availability_names [cgraph_function_body_availability (node)]);\n-  if (node->master_clone && node->master_clone->uid != node->uid)\n-    fprintf (f, \"(%i)\", node->master_clone->uid);\n   if (node->count)\n     fprintf (f, \" executed \"HOST_WIDEST_INT_PRINT_DEC\"x\",\n \t     (HOST_WIDEST_INT)node->count);\n@@ -1349,7 +1339,6 @@ cgraph_clone_node (struct cgraph_node *n, gcov_type count, int freq,\n   new_node->local = n->local;\n   new_node->global = n->global;\n   new_node->rtl = n->rtl;\n-  new_node->master_clone = n->master_clone;\n   new_node->count = count;\n   if (n->count)\n     {\n@@ -1381,28 +1370,6 @@ cgraph_clone_node (struct cgraph_node *n, gcov_type count, int freq,\n   return new_node;\n }\n \n-/* Return true if N is an master_clone, (see cgraph_master_clone).  */\n-\n-bool\n-cgraph_is_master_clone (struct cgraph_node *n)\n-{\n-  return (n == cgraph_master_clone (n));\n-}\n-\n-struct cgraph_node *\n-cgraph_master_clone (struct cgraph_node *n)\n-{\n-  enum availability avail = cgraph_function_body_availability (n);\n-\n-  if (avail == AVAIL_NOT_AVAILABLE || avail == AVAIL_OVERWRITABLE)\n-    return NULL;\n-\n-  if (!n->master_clone)\n-    n->master_clone = cgraph_node (n->decl);\n-\n-  return n->master_clone;\n-}\n-\n /* NODE is no longer nested function; update cgraph accordingly.  */\n void\n cgraph_unnest_node (struct cgraph_node *node)"}, {"sha": "7f2cc7a0d4fe5770bad6817dc9edb07f9b9cf5d4", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144e8aac3db919da759194f93628b91377afc4eb/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144e8aac3db919da759194f93628b91377afc4eb/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=144e8aac3db919da759194f93628b91377afc4eb", "patch": "@@ -143,9 +143,6 @@ struct cgraph_node GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n   /* Pointer to the next clone.  */\n   struct cgraph_node *next_clone;\n   struct cgraph_node *prev_clone;\n-  /* Pointer to a single unique cgraph node for this function.  If the\n-     function is to be output, this is the copy that will survive.  */\n-  struct cgraph_node *master_clone;\n   /* For functions with many calls sites it holds map from call expression\n      to the edge to speed up cgraph_edge function.  */\n   htab_t GTY((param_is (struct cgraph_edge))) call_site_hash;\n@@ -334,8 +331,6 @@ bool cgraph_function_possibly_inlined_p (tree);\n void cgraph_unnest_node (struct cgraph_node *);\n \n enum availability cgraph_function_body_availability (struct cgraph_node *);\n-bool cgraph_is_master_clone (struct cgraph_node *);\n-struct cgraph_node *cgraph_master_clone (struct cgraph_node *);\n void cgraph_add_new_function (tree, bool);\n \n /* In cgraphunit.c  */"}, {"sha": "7349f6b8478bfbbfb0575781aa1c24a25cbf7f9a", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144e8aac3db919da759194f93628b91377afc4eb/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144e8aac3db919da759194f93628b91377afc4eb/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=144e8aac3db919da759194f93628b91377afc4eb", "patch": "@@ -1987,9 +1987,7 @@ type_escape_execute (void)\n      they may cause a type variable to escape.  \n   */\n   for (node = cgraph_nodes; node; node = node->next)\n-    if (node->analyzed \n-\t&& (cgraph_is_master_clone (node)\n-\t    || (cgraph_function_body_availability (node) == AVAIL_OVERWRITABLE)))\n+    if (node->analyzed)\n       analyze_function (node);\n \n "}, {"sha": "92d68d202fe890f6f8d5aa6021c09c14118515d6", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144e8aac3db919da759194f93628b91377afc4eb/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144e8aac3db919da759194f93628b91377afc4eb/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=144e8aac3db919da759194f93628b91377afc4eb", "patch": "@@ -5669,7 +5669,7 @@ ipa_pta_execute (void)\n \n   for (node = cgraph_nodes; node; node = node->next)\n     {\n-      if (!node->analyzed || cgraph_is_master_clone (node))\n+      if (!node->analyzed)\n \t{\n \t  unsigned int varid;\n \n@@ -5685,7 +5685,7 @@ ipa_pta_execute (void)\n     }\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n-      if (node->analyzed && cgraph_is_master_clone (node))\n+      if (node->analyzed)\n \t{\n \t  struct function *func = DECL_STRUCT_FUNCTION (node->decl);\n \t  basic_block bb;"}]}