{"sha": "eead6b5bdaa008eed61307e1fe90b6d4c2e24dd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhZDZiNWJkYWEwMDhlZWQ2MTMwN2UxZmU5MGI2ZDRjMmUyNGRkMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-13T13:47:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-13T13:47:25Z"}, "message": "(*return_addsi): Change condition to exclude both ints.\n\n(*return_adddi): Likewise.\n(*return_subsi): New pattern.\n\nFrom-SVN: r13868", "tree": {"sha": "6302e9fe79873c31ddc427afad2d566742cd6878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6302e9fe79873c31ddc427afad2d566742cd6878"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eead6b5bdaa008eed61307e1fe90b6d4c2e24dd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eead6b5bdaa008eed61307e1fe90b6d4c2e24dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eead6b5bdaa008eed61307e1fe90b6d4c2e24dd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eead6b5bdaa008eed61307e1fe90b6d4c2e24dd1/comments", "author": null, "committer": null, "parents": [{"sha": "7c03e72e04071e6e98932d79187e8aef2a1e3cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c03e72e04071e6e98932d79187e8aef2a1e3cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c03e72e04071e6e98932d79187e8aef2a1e3cb2"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "a337b1055445651ca6d9dcd0fcf8bce0df650995", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eead6b5bdaa008eed61307e1fe90b6d4c2e24dd1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eead6b5bdaa008eed61307e1fe90b6d4c2e24dd1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=eead6b5bdaa008eed61307e1fe90b6d4c2e24dd1", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for SPARC chip for GNU C compiler\n-;;  Copyright (C) 1987, 88, 89, 92-95, 1996 Free Software Foundation, Inc.\n+;;  Copyright (C) 1987, 88, 89, 92-96, 1997 Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@cygnus.com)\n ;;  64 bit SPARC V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n ;;  at Cygnus Support.\n@@ -5975,7 +5975,9 @@\n \t(plus:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n \t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))\n    (return)]\n-  \"! TARGET_EPILOGUE && ! TARGET_LIVE_G0\"\n+  \"! TARGET_EPILOGUE && ! TARGET_LIVE_G0\n+   && (register_operand (operands[1], SImode)\n+       || register_operand (operands[2], SImode))\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -5995,24 +5997,23 @@\n \n (define_insn \"*return_adddi\"\n   [(set (match_operand:DI 0 \"restore_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"arith_operand\" \"%r\")\n+\t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (return)]\n-  \"TARGET_ARCH64 && ! TARGET_EPILOGUE\"\n+  \"TARGET_ARCH64 && ! TARGET_EPILOGUE\n+   && (register_operand (operands[1], DImode)\n+       || register_operand (operands[2], DImode))\"\n   \"ret\\;restore %r1,%2,%Y0\"\n   [(set_attr \"type\" \"multi\")])\n \n-;; Turned off because it should never match (subtracting a constant\n-;; is turned into addition) and because it would do the wrong thing\n-;; when operand 2 is -4096 (--4096 == 4096 is not a valid immediate).\n-;;(define_insn \"*minus_const\"\n-;;  [(set (match_operand:SI 0 \"restore_operand\" \"\")\n-;;\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-;;\t\t  (match_operand:SI 2 \"small_int\" \"I\")))\n-;;   (return)]\n-;;  \"! TARGET_EPILOGUE\"\n-;;  \"ret\\;restore %1,-(%2),%Y0\"\n-;;  [(set_attr \"type\" \"multi\")])\n+(define_insn \"*return_subsi\"\n+  [(set (match_operand:SI 0 \"restore_operand\" \"\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t  (match_operand:SI 2 \"small_int\" \"I\")))\n+   (return)]\n+  \"! TARGET_EPILOGUE && INTVAL (operands[2]) != -4096\"\n+  \"ret\\;restore %1,%n2,%Y0\"\n+  [(set_attr \"type\" \"multi\")])\n \n ;; The following pattern is only generated by delayed-branch scheduling,\n ;; when the insn winds up in the epilogue."}]}