{"sha": "c518c1025b435e1c593a745036fc9b8ed04c5819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUxOGMxMDI1YjQzNWUxYzU5M2E3NDUwMzZmYzliOGVkMDRjNTgxOQ==", "commit": {"author": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-07-04T07:51:08Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-07-04T07:51:08Z"}, "message": "[multiple changes]\n\n\n\n2018-07-04  Denys Vlasenko  <dvlasenk@redhat.com>\n\t    Martin Liska  <mliska@suse.cz>\n\n\tPR middle-end/66240\n\tPR target/45996\n\tPR c/84100\n\t* common.opt: Rename align options with 'str_' prefix.\n\t* common/config/i386/i386-common.c (set_malign_value): New\n\tfunction.\n\t(ix86_handle_option): Use it to set -falign-* options/\n\t* config/aarch64/aarch64-protos.h (struct tune_params): Change\n\ttype from int to string.\n\t* config/aarch64/aarch64.c: Update default values from int\n\tto string.\n\t* config/alpha/alpha.c (alpha_override_options_after_change):\n\tLikewise.\n\t* config/arm/arm.c (arm_override_options_after_change_1): Likewise.\n\t* config/i386/dragonfly.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n\tmax skip conditionally.\n\t* config/i386/freebsd.h (SUBALIGN_LOG): New.\n\t(ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n\tmax skip conditionally.\n\t* config/i386/gas.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n\tmax skip conditionally.\n\t* config/i386/gnu-user.h (SUBALIGN_LOG): New.\n\t(ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n\tmax skip conditionally.\n\t* config/i386/i386.c (struct ptt): Change type from int to\n\tstring.\n\t(ix86_default_align): Set default values.\n\t* config/i386/i386.h (ASM_OUTPUT_MAX_SKIP_PAD): Print\n\tmax skip conditionally.\n\t* config/i386/iamcu.h (SUBALIGN_LOG): New.\n\t(ASM_OUTPUT_MAX_SKIP_ALIGN):\n\t* config/i386/lynx.h (ASM_OUTPUT_MAX_SKIP_ALIGN):\n\t* config/i386/netbsd-elf.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n\tmax skip conditionally.\n\t* config/i386/openbsdelf.h (SUBALIGN_LOG): New.\n\t(ASM_OUTPUT_MAX_SKIP_ALIGN) Print max skip conditionally.:\n\t* config/i386/x86-64.h (SUBALIGN_LOG): New.\n\t(ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n\tmax skip conditionally.\n\t(ASM_OUTPUT_MAX_SKIP_PAD): Likewise.\n\t* config/ia64/ia64.c (ia64_option_override): Set default values\n        for alignment options.\n\t* config/m68k/m68k.c: Handle new str_align_* options.\n\t* config/mips/mips.c (mips_set_compression_mode): Change\n\ttype of constants.\n\t(mips_option_override): Set default values for options.\n\t* config/powerpcspe/powerpcspe.c (rs6000_option_override_internal):\n        Likewise.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n\tLikewise.\n\t* config/rx/rx.c (rx_option_override): Likewise.\n\t* config/rx/rx.h (JUMP_ALIGN): Use align_jumps_log.\n\t(LABEL_ALIGN): Use align_labels_log.\n\t(LOOP_ALIGN): Use align_loops_align.\n\t* config/s390/s390.c (s390_asm_output_function_label): Use new\n        macros.\n\t* config/sh/sh.c (sh_override_options_after_change):\n\tChange type of constants.\n\t* config/spu/spu.c (spu_sched_init): Likewise.\n\t* config/sparc/sparc.c (sparc_option_override): Set default\n        values for options.\n\t* config/visium/visium.c (visium_option_override): Likewise.\n\t* config/visium/visium.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Do not\n        emit p2align format with last argument if it's not needed.\n\t* doc/invoke.texi: Document extended format of -falign-*.\n\t* final.c: Use align_labels alignment.\n\t* flags.h (struct target_flag_state): Change type to use\n\talign_flags.\n\t(struct align_flags_tuple): New.\n\t(struct align_flags): Likewise.\n\t(align_loops_log): Redefine macro to use new types.\n\t(align_loops_max_skip): Redefine macro to use new types.\n\t(align_jumps_log): Redefine macro to use new types.\n\t(align_jumps_max_skip): Redefine macro to use new types.\n\t(align_labels_log): Redefine macro to use new types.\n\t(align_labels_max_skip): Redefine macro to use new types.\n\t(align_functions_log): Redefine macro to use new types.\n\t(align_loops): Redefine macro to use new types.\n\t(align_jumps): Redefine macro to use new types.\n\t(align_labels): Redefine macro to use new types.\n\t(align_functions): Redefine macro to use new types.\n\t(align_functions_max_skip): Redefine macro to use new types.\n\t(align_loops_value): New macro.\n\t(align_jumps_value): New macro.\n\t(align_labels_value): New macro.\n\t(align_functions_value): New macro.\n\t* function.c (invoke_set_current_function_hook): Propagate\n\talignment values from flags to global variables default in\n\ttopleev.h.\n\t* ipa-icf.c (sem_function::equals_wpa): Use\n\tcl_optimization_option_eq instead of memcmp.\n\t* lto-streamer.h (cl_optimization_stream_out): Support streaming\n\tof string types.\n\t(cl_optimization_stream_in): Likewise.\n\t* optc-save-gen.awk: Support strings in cl_optimization.\n\t* opth-gen.awk: Likewise.\n\t* opts.c (finish_options): Remove error checking of invalid\n\tvalue ranges.\n\t(MAX_CODE_ALIGN): Remove.\n\t(MAX_CODE_ALIGN_VALUE): Likewise.\n\t(parse_and_check_align_values): New function.\n\t(check_alignment_argument): Likewise.\n\t(common_handle_option): Use check_alignment_argument.\n\t* opts.h (parse_and_check_align_values): Declare.\n\t* toplev.c (init_alignments): Remove.\n\t(read_log_maxskip): New.\n\t(parse_N_M): Likewise.\n\t(parse_alignment_opts): Likewise.\n\t(backend_init_target): Remove usage of init_alignments.\n\t* toplev.h (parse_alignment_opts): Declare.\n\t* tree-streamer-in.c (streamer_read_tree_bitfields): Add new\n\targument.\n\t* tree-streamer-out.c (streamer_write_tree_bitfields): Likewise.\n\t* tree.c (cl_option_hasher::equal): New.\n\t* varasm.c: Use new global macros.\n2018-07-04  Martin Liska  <mliska@suse.cz>\n\n\tPR middle-end/66240\n\tPR target/45996\n\tPR c/84100\n\t* lto.c (compare_tree_sccs_1): Use cl_optimization_option_eq\n\tinstead of memcmp.\n2018-07-04  Martin Liska  <mliska@suse.cz>\n\n\tPR middle-end/66240\n\tPR target/45996\n\tPR c/84100\n\t* gcc.dg/pr84100.c (foo):\n\t* gcc.target/i386/falign-functions-2.c: New test.\n\t* gcc.target/i386/falign-functions.c: New test.\n\nFrom-SVN: r262375", "tree": {"sha": "75ee9f7156d26af39f332f3fab50c5012d340427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75ee9f7156d26af39f332f3fab50c5012d340427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c518c1025b435e1c593a745036fc9b8ed04c5819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c518c1025b435e1c593a745036fc9b8ed04c5819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c518c1025b435e1c593a745036fc9b8ed04c5819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c518c1025b435e1c593a745036fc9b8ed04c5819/comments", "author": null, "committer": null, "parents": [{"sha": "dd047c67e45c244c147a8244671154c77a9bda47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd047c67e45c244c147a8244671154c77a9bda47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd047c67e45c244c147a8244671154c77a9bda47"}], "stats": {"total": 1208, "additions": 861, "deletions": 347}, "files": [{"sha": "f644bef4e310ae6d985c391254178d5d9442974b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -1,3 +1,122 @@\n+2018-07-04  Denys Vlasenko  <dvlasenk@redhat.com>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/66240\n+\tPR target/45996\n+\tPR c/84100\n+\t* common.opt: Rename align options with 'str_' prefix.\n+\t* common/config/i386/i386-common.c (set_malign_value): New\n+\tfunction.\n+\t(ix86_handle_option): Use it to set -falign-* options/\n+\t* config/aarch64/aarch64-protos.h (struct tune_params): Change\n+\ttype from int to string.\n+\t* config/aarch64/aarch64.c: Update default values from int\n+\tto string.\n+\t* config/alpha/alpha.c (alpha_override_options_after_change):\n+\tLikewise.\n+\t* config/arm/arm.c (arm_override_options_after_change_1): Likewise.\n+\t* config/i386/dragonfly.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n+\tmax skip conditionally.\n+\t* config/i386/freebsd.h (SUBALIGN_LOG): New.\n+\t(ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n+\tmax skip conditionally.\n+\t* config/i386/gas.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n+\tmax skip conditionally.\n+\t* config/i386/gnu-user.h (SUBALIGN_LOG): New.\n+\t(ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n+\tmax skip conditionally.\n+\t* config/i386/i386.c (struct ptt): Change type from int to\n+\tstring.\n+\t(ix86_default_align): Set default values.\n+\t* config/i386/i386.h (ASM_OUTPUT_MAX_SKIP_PAD): Print\n+\tmax skip conditionally.\n+\t* config/i386/iamcu.h (SUBALIGN_LOG): New.\n+\t(ASM_OUTPUT_MAX_SKIP_ALIGN):\n+\t* config/i386/lynx.h (ASM_OUTPUT_MAX_SKIP_ALIGN):\n+\t* config/i386/netbsd-elf.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n+\tmax skip conditionally.\n+\t* config/i386/openbsdelf.h (SUBALIGN_LOG): New.\n+\t(ASM_OUTPUT_MAX_SKIP_ALIGN) Print max skip conditionally.:\n+\t* config/i386/x86-64.h (SUBALIGN_LOG): New.\n+\t(ASM_OUTPUT_MAX_SKIP_ALIGN): Print\n+\tmax skip conditionally.\n+\t(ASM_OUTPUT_MAX_SKIP_PAD): Likewise.\n+\t* config/ia64/ia64.c (ia64_option_override): Set default values\n+        for alignment options.\n+\t* config/m68k/m68k.c: Handle new str_align_* options.\n+\t* config/mips/mips.c (mips_set_compression_mode): Change\n+\ttype of constants.\n+\t(mips_option_override): Set default values for options.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_option_override_internal):\n+        Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tLikewise.\n+\t* config/rx/rx.c (rx_option_override): Likewise.\n+\t* config/rx/rx.h (JUMP_ALIGN): Use align_jumps_log.\n+\t(LABEL_ALIGN): Use align_labels_log.\n+\t(LOOP_ALIGN): Use align_loops_align.\n+\t* config/s390/s390.c (s390_asm_output_function_label): Use new\n+        macros.\n+\t* config/sh/sh.c (sh_override_options_after_change):\n+\tChange type of constants.\n+\t* config/spu/spu.c (spu_sched_init): Likewise.\n+\t* config/sparc/sparc.c (sparc_option_override): Set default\n+        values for options.\n+\t* config/visium/visium.c (visium_option_override): Likewise.\n+\t* config/visium/visium.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Do not\n+        emit p2align format with last argument if it's not needed.\n+\t* doc/invoke.texi: Document extended format of -falign-*.\n+\t* final.c: Use align_labels alignment.\n+\t* flags.h (struct target_flag_state): Change type to use\n+\talign_flags.\n+\t(struct align_flags_tuple): New.\n+\t(struct align_flags): Likewise.\n+\t(align_loops_log): Redefine macro to use new types.\n+\t(align_loops_max_skip): Redefine macro to use new types.\n+\t(align_jumps_log): Redefine macro to use new types.\n+\t(align_jumps_max_skip): Redefine macro to use new types.\n+\t(align_labels_log): Redefine macro to use new types.\n+\t(align_labels_max_skip): Redefine macro to use new types.\n+\t(align_functions_log): Redefine macro to use new types.\n+\t(align_loops): Redefine macro to use new types.\n+\t(align_jumps): Redefine macro to use new types.\n+\t(align_labels): Redefine macro to use new types.\n+\t(align_functions): Redefine macro to use new types.\n+\t(align_functions_max_skip): Redefine macro to use new types.\n+\t(align_loops_value): New macro.\n+\t(align_jumps_value): New macro.\n+\t(align_labels_value): New macro.\n+\t(align_functions_value): New macro.\n+\t* function.c (invoke_set_current_function_hook): Propagate\n+\talignment values from flags to global variables default in\n+\ttopleev.h.\n+\t* ipa-icf.c (sem_function::equals_wpa): Use\n+\tcl_optimization_option_eq instead of memcmp.\n+\t* lto-streamer.h (cl_optimization_stream_out): Support streaming\n+\tof string types.\n+\t(cl_optimization_stream_in): Likewise.\n+\t* optc-save-gen.awk: Support strings in cl_optimization.\n+\t* opth-gen.awk: Likewise.\n+\t* opts.c (finish_options): Remove error checking of invalid\n+\tvalue ranges.\n+\t(MAX_CODE_ALIGN): Remove.\n+\t(MAX_CODE_ALIGN_VALUE): Likewise.\n+\t(parse_and_check_align_values): New function.\n+\t(check_alignment_argument): Likewise.\n+\t(common_handle_option): Use check_alignment_argument.\n+\t* opts.h (parse_and_check_align_values): Declare.\n+\t* toplev.c (init_alignments): Remove.\n+\t(read_log_maxskip): New.\n+\t(parse_N_M): Likewise.\n+\t(parse_alignment_opts): Likewise.\n+\t(backend_init_target): Remove usage of init_alignments.\n+\t* toplev.h (parse_alignment_opts): Declare.\n+\t* tree-streamer-in.c (streamer_read_tree_bitfields): Add new\n+\targument.\n+\t* tree-streamer-out.c (streamer_write_tree_bitfields): Likewise.\n+\t* tree.c (cl_option_hasher::equal): New.\n+\t* varasm.c: Use new global macros.\n+\n 2018-07-04  Denys Vlasenko  <dvlasenk@redhat.com>\n \n \t* config/i386/dragonfly.h: (ASM_OUTPUT_MAX_SKIP_ALIGN):"}, {"sha": "963c37f04cd3d295956e67f5c528add7dab4b9c8", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -959,35 +959,35 @@ Common Report Var(flag_aggressive_loop_optimizations) Optimization Init(1)\n Aggressively optimize loops using language constraints.\n \n falign-functions\n-Common Report Var(align_functions,0) Optimization UInteger\n+Common Report Var(flag_align_functions) Optimization\n Align the start of functions.\n \n falign-functions=\n-Common RejectNegative Joined UInteger Var(align_functions) Optimization\n+Common RejectNegative Joined Var(str_align_functions) Optimization\n \n flimit-function-alignment\n Common Report Var(flag_limit_function_alignment) Optimization Init(0)\n \n falign-jumps\n-Common Report Var(align_jumps,0) Optimization UInteger\n+Common Report Var(flag_align_jumps) Optimization\n Align labels which are only reached by jumping.\n \n falign-jumps=\n-Common RejectNegative Joined UInteger Var(align_jumps) Optimization\n+Common RejectNegative Joined Var(str_align_jumps) Optimization\n \n falign-labels\n-Common Report Var(align_labels,0) Optimization UInteger\n+Common Report Var(flag_align_labels) Optimization\n Align all labels.\n \n falign-labels=\n-Common RejectNegative Joined UInteger Var(align_labels) Optimization\n+Common RejectNegative Joined Var(str_align_labels) Optimization\n \n falign-loops\n-Common Report Var(align_loops,0) Optimization UInteger\n+Common Report Var(flag_align_loops) Optimization\n Align the start of loops.\n \n falign-loops=\n-Common RejectNegative Joined UInteger Var(align_loops) Optimization\n+Common RejectNegative Joined Var(str_align_loops)\n \n fargument-alias\n Common Ignore"}, {"sha": "277ee55a09314352d0161457baf3f12b5fd286a9", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -275,6 +275,16 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET \\\n   (OPTION_MASK_ISA2_AVX512F_UNSET)\n \n+/* Set 1 << value as value of -malign-FLAG option.  */\n+\n+static void\n+set_malign_value (const char **flag, unsigned value)\n+{\n+  char *r = XNEWVEC (char, 6);\n+  sprintf (r, \"%d\", 1 << value);\n+  *flag = r;\n+}\n+\n /* Implement TARGET_HANDLE_OPTION.  */\n \n bool\n@@ -1317,7 +1327,7 @@ ix86_handle_option (struct gcc_options *opts,\n \terror_at (loc, \"-malign-loops=%d is not between 0 and %d\",\n \t\t  value, MAX_CODE_ALIGN);\n       else\n-\topts->x_align_loops = 1 << value;\n+\tset_malign_value (&opts->x_str_align_loops, value);\n       return true;\n \n     case OPT_malign_jumps_:\n@@ -1326,7 +1336,7 @@ ix86_handle_option (struct gcc_options *opts,\n \terror_at (loc, \"-malign-jumps=%d is not between 0 and %d\",\n \t\t  value, MAX_CODE_ALIGN);\n       else\n-\topts->x_align_jumps = 1 << value;\n+\tset_malign_value (&opts->x_str_align_jumps, value);\n       return true;\n \n     case OPT_malign_functions_:\n@@ -1336,7 +1346,7 @@ ix86_handle_option (struct gcc_options *opts,\n \terror_at (loc, \"-malign-functions=%d is not between 0 and %d\",\n \t\t  value, MAX_CODE_ALIGN);\n       else\n-\topts->x_align_functions = 1 << value;\n+\tset_malign_value (&opts->x_str_align_functions, value);\n       return true;\n \n     case OPT_mbranch_cost_:"}, {"sha": "bc11a781c4bb9944e61262758c60df9bfd99006c", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -250,9 +250,9 @@ struct tune_params\n   int memmov_cost;\n   int issue_rate;\n   unsigned int fusible_ops;\n-  int function_align;\n-  int jump_align;\n-  int loop_align;\n+  const char *function_align;\n+  const char *jump_align;\n+  const char *loop_align;\n   int int_reassoc_width;\n   int fp_reassoc_width;\n   int vec_reassoc_width;"}, {"sha": "143f9d03722609d9679b7b8cdbb5dde7073b0d77", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -637,9 +637,9 @@ static const struct tune_params generic_tunings =\n   4, /* memmov_cost  */\n   2, /* issue_rate  */\n   (AARCH64_FUSE_AES_AESMC), /* fusible_ops  */\n-  8,\t/* function_align.  */\n-  4,\t/* jump_align.  */\n-  8,\t/* loop_align.  */\n+  \"8\",\t/* function_align.  */\n+  \"4\",\t/* jump_align.  */\n+  \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -663,9 +663,9 @@ static const struct tune_params cortexa35_tunings =\n   1, /* issue_rate  */\n   (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n    | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR), /* fusible_ops  */\n-  16,\t/* function_align.  */\n-  4,\t/* jump_align.  */\n-  8,\t/* loop_align.  */\n+  \"16\",\t/* function_align.  */\n+  \"4\",\t/* jump_align.  */\n+  \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -689,9 +689,9 @@ static const struct tune_params cortexa53_tunings =\n   2, /* issue_rate  */\n   (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n    | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR), /* fusible_ops  */\n-  16,\t/* function_align.  */\n-  4,\t/* jump_align.  */\n-  8,\t/* loop_align.  */\n+  \"16\",\t/* function_align.  */\n+  \"4\",\t/* jump_align.  */\n+  \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -715,9 +715,9 @@ static const struct tune_params cortexa57_tunings =\n   3, /* issue_rate  */\n   (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n    | AARCH64_FUSE_MOVK_MOVK), /* fusible_ops  */\n-  16,\t/* function_align.  */\n-  4,\t/* jump_align.  */\n-  8,\t/* loop_align.  */\n+  \"16\",\t/* function_align.  */\n+  \"4\",\t/* jump_align.  */\n+  \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -741,9 +741,9 @@ static const struct tune_params cortexa72_tunings =\n   3, /* issue_rate  */\n   (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n    | AARCH64_FUSE_MOVK_MOVK), /* fusible_ops  */\n-  16,\t/* function_align.  */\n-  4,\t/* jump_align.  */\n-  8,\t/* loop_align.  */\n+  \"16\",\t/* function_align.  */\n+  \"4\",\t/* jump_align.  */\n+  \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -767,9 +767,9 @@ static const struct tune_params cortexa73_tunings =\n   2, /* issue_rate.  */\n   (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n    | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR), /* fusible_ops  */\n-  16,\t/* function_align.  */\n-  4,\t/* jump_align.  */\n-  8,\t/* loop_align.  */\n+  \"16\",\t/* function_align.  */\n+  \"4\",\t/* jump_align.  */\n+  \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -794,9 +794,9 @@ static const struct tune_params exynosm1_tunings =\n   4,\t/* memmov_cost  */\n   3,\t/* issue_rate  */\n   (AARCH64_FUSE_AES_AESMC), /* fusible_ops  */\n-  4,\t/* function_align.  */\n-  4,\t/* jump_align.  */\n-  4,\t/* loop_align.  */\n+  \"4\",\t/* function_align.  */\n+  \"4\",\t/* jump_align.  */\n+  \"4\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -819,9 +819,9 @@ static const struct tune_params thunderxt88_tunings =\n   6, /* memmov_cost  */\n   2, /* issue_rate  */\n   AARCH64_FUSE_CMP_BRANCH, /* fusible_ops  */\n-  8,\t/* function_align.  */\n-  8,\t/* jump_align.  */\n-  8,\t/* loop_align.  */\n+  \"8\",\t/* function_align.  */\n+  \"8\",\t/* jump_align.  */\n+  \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -844,9 +844,9 @@ static const struct tune_params thunderx_tunings =\n   6, /* memmov_cost  */\n   2, /* issue_rate  */\n   AARCH64_FUSE_CMP_BRANCH, /* fusible_ops  */\n-  8,\t/* function_align.  */\n-  8,\t/* jump_align.  */\n-  8,\t/* loop_align.  */\n+  \"8\",\t/* function_align.  */\n+  \"8\",\t/* jump_align.  */\n+  \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -870,9 +870,9 @@ static const struct tune_params xgene1_tunings =\n   6, /* memmov_cost  */\n   4, /* issue_rate  */\n   AARCH64_FUSE_NOTHING, /* fusible_ops  */\n-  16,\t/* function_align.  */\n-  8,\t/* jump_align.  */\n-  16,\t/* loop_align.  */\n+  \"16\",\t/* function_align.  */\n+  \"8\",\t/* jump_align.  */\n+  \"16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -896,9 +896,9 @@ static const struct tune_params qdf24xx_tunings =\n   4, /* issue_rate  */\n   (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n    | AARCH64_FUSE_MOVK_MOVK), /* fuseable_ops  */\n-  16,\t/* function_align.  */\n-  8,\t/* jump_align.  */\n-  16,\t/* loop_align.  */\n+  \"16\",\t/* function_align.  */\n+  \"8\",\t/* jump_align.  */\n+  \"16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -924,9 +924,9 @@ static const struct tune_params saphira_tunings =\n   4, /* issue_rate  */\n   (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n    | AARCH64_FUSE_MOVK_MOVK), /* fuseable_ops  */\n-  16,\t/* function_align.  */\n-  8,\t/* jump_align.  */\n-  16,\t/* loop_align.  */\n+  \"16\",\t/* function_align.  */\n+  \"8\",\t/* jump_align.  */\n+  \"16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n@@ -950,9 +950,9 @@ static const struct tune_params thunderx2t99_tunings =\n   4, /* issue_rate.  */\n   (AARCH64_FUSE_CMP_BRANCH | AARCH64_FUSE_AES_AESMC\n    | AARCH64_FUSE_ALU_BRANCH), /* fusible_ops  */\n-  16,\t/* function_align.  */\n-  8,\t/* jump_align.  */\n-  16,\t/* loop_align.  */\n+  \"16\",\t/* function_align.  */\n+  \"8\",\t/* jump_align.  */\n+  \"16\",\t/* loop_align.  */\n   3,\t/* int_reassoc_width.  */\n   2,\t/* fp_reassoc_width.  */\n   2,\t/* vec_reassoc_width.  */\n@@ -10572,12 +10572,12 @@ aarch64_override_options_after_change_1 (struct gcc_options *opts)\n      alignment to what the target wants.  */\n   if (!opts->x_optimize_size)\n     {\n-      if (opts->x_align_loops <= 0)\n-\topts->x_align_loops = aarch64_tune_params.loop_align;\n-      if (opts->x_align_jumps <= 0)\n-\topts->x_align_jumps = aarch64_tune_params.jump_align;\n-      if (opts->x_align_functions <= 0)\n-\topts->x_align_functions = aarch64_tune_params.function_align;\n+      if (opts->x_flag_align_loops && !opts->x_str_align_loops)\n+\topts->x_str_align_loops = aarch64_tune_params.loop_align;\n+      if (opts->x_flag_align_jumps && !opts->x_str_align_jumps)\n+\topts->x_str_align_jumps = aarch64_tune_params.jump_align;\n+      if (opts->x_flag_align_functions && !opts->x_str_align_functions)\n+\topts->x_str_align_functions = aarch64_tune_params.function_align;\n     }\n \n   /* We default to no pc-relative literal loads.  */"}, {"sha": "9adfe159381963f4eb538e0035df29319b17e461", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -67,6 +67,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n+#include \"flags.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -614,13 +615,13 @@ alpha_override_options_after_change (void)\n   /* ??? Kludge these by not doing anything if we don't optimize.  */\n   if (optimize > 0)\n     {\n-      if (align_loops <= 0)\n-\talign_loops = 16;\n-      if (align_jumps <= 0)\n-\talign_jumps = 16;\n+      if (flag_align_loops && !str_align_loops)\n+\tstr_align_loops = \"16\";\n+      if (flag_align_jumps && !str_align_jumps)\n+\tstr_align_jumps = \"16\";\n     }\n-  if (align_functions <= 0)\n-    align_functions = 16;\n+  if (flag_align_functions && !str_align_functions)\n+    str_align_functions = \"16\";\n }\n \f\n /* Returns 1 if VALUE is a mask that contains full bytes of zero or ones.  */\n@@ -9268,10 +9269,11 @@ alpha_align_insns_1 (unsigned int max_align,\n   /* Let shorten branches care for assigning alignments to code labels.  */\n   shorten_branches (get_insns ());\n \n-  if (align_functions < 4)\n+  unsigned int option_alignment = align_functions_max_skip + 1;\n+  if (option_alignment < 4)\n     align = 4;\n-  else if ((unsigned int) align_functions < max_align)\n-    align = align_functions;\n+  else if ((unsigned int) option_alignment < max_align)\n+    align = option_alignment;\n   else\n     align = max_align;\n "}, {"sha": "8d5897c8f0f93502fb958cba61b7c0b1570d1570", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -2952,9 +2952,10 @@ static GTY(()) tree init_optimize;\n static void\n arm_override_options_after_change_1 (struct gcc_options *opts)\n {\n-  if (opts->x_align_functions <= 0)\n-    opts->x_align_functions = TARGET_THUMB_P (opts->x_target_flags)\n-      && opts->x_optimize_size ? 2 : 4;\n+  /* -falign-functions without argument: supply one.  */\n+  if (opts->x_flag_align_functions && !opts->x_str_align_functions)\n+    opts->x_str_align_functions = TARGET_THUMB_P (opts->x_target_flags)\n+      && opts->x_optimize_size ? \"2\" : \"4\";\n }\n \n /* Implement targetm.override_options_after_change.  */"}, {"sha": "9e46b7b136ff7992989d101b45cd43dfafedbf4d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -834,53 +834,58 @@ struct ptt\n {\n   const char *const name;\t\t\t/* processor name  */\n   const struct processor_costs *cost;\t\t/* Processor costs */\n-  const int align_loop;\t\t\t\t/* Default alignments.  */\n-  const int align_loop_max_skip;\n-  const int align_jump;\n-  const int align_jump_max_skip;\n-  const int align_func;\n+\n+  /* Default alignments.  */\n+  const char *const align_loop;\n+  const char *const align_jump;\n+  const char *const align_label;\n+  const char *const align_func;\n };\n \n /* This table must be in sync with enum processor_type in i386.h.  */ \n static const struct ptt processor_target_table[PROCESSOR_max] =\n {\n-  {\"generic\", &generic_cost, 16, 10, 16, 10, 16},\n-  {\"i386\", &i386_cost, 4, 3, 4, 3, 4},\n-  {\"i486\", &i486_cost, 16, 15, 16, 15, 16},\n-  {\"pentium\", &pentium_cost, 16, 7, 16, 7, 16},\n-  {\"lakemont\", &lakemont_cost, 16, 7, 16, 7, 16},\n-  {\"pentiumpro\", &pentiumpro_cost, 16, 15, 16, 10, 16},\n-  {\"pentium4\", &pentium4_cost, 0, 0, 0, 0, 0},\n-  {\"nocona\", &nocona_cost, 0, 0, 0, 0, 0},\n-  {\"core2\", &core_cost, 16, 10, 16, 10, 16},\n-  {\"nehalem\", &core_cost, 16, 10, 16, 10, 16},\n-  {\"sandybridge\", &core_cost, 16, 10, 16, 10, 16},\n-  {\"haswell\", &core_cost, 16, 10, 16, 10, 16},\n-  {\"bonnell\", &atom_cost, 16, 15, 16, 7, 16},\n-  {\"silvermont\", &slm_cost, 16, 15, 16, 7, 16},\n-  {\"goldmont\", &slm_cost, 16, 15, 16, 7, 16},\n-  {\"goldmont-plus\", &slm_cost, 16, 15, 16, 7, 16},\n-  {\"tremont\", &slm_cost, 16, 15, 16, 7, 16},\n-  {\"knl\", &slm_cost, 16, 15, 16, 7, 16},\n-  {\"knm\", &slm_cost, 16, 15, 16, 7, 16},\n-  {\"skylake\", &skylake_cost, 16, 10, 16, 10, 16},\n-  {\"skylake-avx512\", &skylake_cost, 16, 10, 16, 10, 16},\n-  {\"cannonlake\", &skylake_cost, 16, 10, 16, 10, 16},\n-  {\"icelake-client\", &skylake_cost, 16, 10, 16, 10, 16},\n-  {\"icelake-server\", &skylake_cost, 16, 10, 16, 10, 16},\n-  {\"intel\", &intel_cost, 16, 15, 16, 7, 16},\n-  {\"geode\", &geode_cost, 0, 0, 0, 0, 0},\n-  {\"k6\", &k6_cost, 32, 7, 32, 7, 32},\n-  {\"athlon\", &athlon_cost, 16, 7, 16, 7, 16},\n-  {\"k8\", &k8_cost, 16, 7, 16, 7, 16},\n-  {\"amdfam10\", &amdfam10_cost, 32, 24, 32, 7, 32},\n-  {\"bdver1\", &bdver1_cost, 16, 10, 16, 7, 11},\n-  {\"bdver2\", &bdver2_cost, 16, 10, 16, 7, 11},\n-  {\"bdver3\", &bdver3_cost, 16, 10, 16, 7, 11},\n-  {\"bdver4\", &bdver4_cost, 16, 10, 16, 7, 11},\n-  {\"btver1\", &btver1_cost, 16, 10, 16, 7, 11},\n-  {\"btver2\", &btver2_cost, 16, 10, 16, 7, 11},\n-  {\"znver1\", &znver1_cost, 16, 15, 16, 15, 16}\n+/* The \"0:0:8\" label alignment specified for some processors generates\n+   secondary 8-byte alignment only for those label/jump/loop targets\n+   which have primary alignment.  */\n+\n+  {\"generic\",        &generic_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"i386\",           &i386_cost,       \"4\",       \"4\",       NULL,    \"4\" },\n+  {\"i486\",           &i486_cost,       \"16\",      \"16\",      \"0:0:8\", \"16\"},\n+  {\"pentium\",        &pentium_cost,    \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"lakemont\",       &lakemont_cost,   \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"pentiumpro\",     &pentiumpro_cost, \"16\",      \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"pentium4\",       &pentium4_cost,   NULL,      NULL,      NULL,    NULL},\n+  {\"nocona\",         &nocona_cost,     NULL,      NULL,      NULL,    NULL},\n+  {\"core2\",          &core_cost,       \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"nehalem\",        &core_cost,       \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"sandybridge\",    &core_cost,       \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"haswell\",        &core_cost,       \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"bonnell\",        &atom_cost,       \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"silvermont\",     &slm_cost,        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"goldmont\",       &slm_cost,        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"goldmont-plus\",  &slm_cost,        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"tremont\",\t     &slm_cost,\t       \"16\",\t  \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"knl\",            &slm_cost,        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"knm\",            &slm_cost,        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"skylake\",        &skylake_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"skylake-avx512\", &skylake_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"cannonlake\",     &skylake_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"icelake-client\", &skylake_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"icelake-server\", &skylake_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"intel\",          &intel_cost,      \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"geode\",          &geode_cost,      NULL,      NULL,      NULL,    NULL},\n+  {\"k6\",             &k6_cost,         \"32:8:8\",  \"32:8:8\",  \"0:0:8\", \"32\"},\n+  {\"athlon\",         &athlon_cost,     \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"k8\",             &k8_cost,         \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"amdfam10\",       &amdfam10_cost,   \"32:25:8\", \"32:8:8\",  \"0:0:8\", \"32\"},\n+  {\"bdver1\",         &bdver1_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"bdver2\",         &bdver2_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"bdver3\",         &bdver3_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"bdver4\",         &bdver4_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"btver1\",         &btver1_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"btver2\",         &btver2_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"znver1\",         &znver1_cost,     \"16\",      \"16\",      \"0:0:8\", \"16\"}\n };\n \f\n static unsigned int\n@@ -3365,20 +3370,15 @@ set_ix86_tune_features (enum processor_type ix86_tune, bool dump)\n static void\n ix86_default_align (struct gcc_options *opts)\n {\n-  if (opts->x_align_loops == 0)\n-    {\n-      opts->x_align_loops = processor_target_table[ix86_tune].align_loop;\n-      align_loops_max_skip = processor_target_table[ix86_tune].align_loop_max_skip;\n-    }\n-  if (opts->x_align_jumps == 0)\n-    {\n-      opts->x_align_jumps = processor_target_table[ix86_tune].align_jump;\n-      align_jumps_max_skip = processor_target_table[ix86_tune].align_jump_max_skip;\n-    }\n-  if (opts->x_align_functions == 0)\n-    {\n-      opts->x_align_functions = processor_target_table[ix86_tune].align_func;\n-    }\n+  /* -falign-foo without argument: supply one.  */\n+  if (opts->x_flag_align_loops && !opts->x_str_align_loops)\n+    opts->x_str_align_loops = processor_target_table[ix86_tune].align_loop;\n+  if (opts->x_flag_align_jumps && !opts->x_str_align_jumps)\n+    opts->x_str_align_jumps = processor_target_table[ix86_tune].align_jump;\n+  if (opts->x_flag_align_labels && !opts->x_str_align_labels)\n+    opts->x_str_align_labels = processor_target_table[ix86_tune].align_label;\n+  if (opts->x_flag_align_functions && !opts->x_str_align_functions)\n+    opts->x_str_align_functions = processor_target_table[ix86_tune].align_func;\n }\n \n /* Implement TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE hook.  */"}, {"sha": "f121cee19971a4788a87fc39e15534d73d1b6055", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -6107,10 +6107,10 @@ ia64_option_override (void)\n \n   init_machine_status = ia64_init_machine_status;\n \n-  if (align_functions <= 0)\n-    align_functions = 64;\n-  if (align_loops <= 0)\n-    align_loops = 32;\n+  if (flag_align_functions && !str_align_functions)\n+    str_align_functions = \"64\";\n+  if (flag_align_loops && !str_align_loops)\n+    str_align_loops = \"32\";\n   if (TARGET_ABI_OPEN_VMS)\n     flag_no_common = 1;\n "}, {"sha": "cea5c0ecab5f0df79e25f5b1bf0728909ed33666", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -65,6 +65,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n+#include \"toplev.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -651,15 +652,17 @@ m68k_option_override (void)\n     }\n \n #ifndef ASM_OUTPUT_ALIGN_WITH_NOP\n-  if (align_labels > 2)\n+  parse_alignment_opts ();\n+  if (align_labels_value > 2)\n     {\n-      warning (0, \"-falign-labels=%d is not supported\", align_labels);\n-      align_labels = 0;\n+      warning (0, \"-falign-labels=%d is not supported\", align_labels_value);\n+      str_align_labels = \"1\";\n     }\n-  if (align_loops > 2)\n+\n+  if (align_loops_value > 2)\n     {\n-      warning (0, \"-falign-loops=%d is not supported\", align_loops);\n-      align_loops = 0;\n+      warning (0, \"-falign-loops=%d is not supported\", align_loops_value);\n+      str_align_loops = \"1\";\n     }\n #endif\n "}, {"sha": "75ee834137e9bb3636f83a2d0dd3b43625d55632", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -501,9 +501,9 @@ unsigned int mips_base_compression_flags;\n static int mips_base_schedule_insns; /* flag_schedule_insns */\n static int mips_base_reorder_blocks_and_partition; /* flag_reorder... */\n static int mips_base_move_loop_invariants; /* flag_move_loop_invariants */\n-static int mips_base_align_loops; /* align_loops */\n-static int mips_base_align_jumps; /* align_jumps */\n-static int mips_base_align_functions; /* align_functions */\n+static const char *mips_base_align_loops; /* align_loops */\n+static const char *mips_base_align_jumps; /* align_jumps */\n+static const char *mips_base_align_functions; /* align_functions */\n \n /* Index [M][R] is true if register R is allowed to hold a value of mode M.  */\n static bool mips_hard_regno_mode_ok_p[MAX_MACHINE_MODE][FIRST_PSEUDO_REGISTER];\n@@ -19517,9 +19517,9 @@ mips_set_compression_mode (unsigned int compression_mode)\n   flag_schedule_insns = mips_base_schedule_insns;\n   flag_reorder_blocks_and_partition = mips_base_reorder_blocks_and_partition;\n   flag_move_loop_invariants = mips_base_move_loop_invariants;\n-  align_loops = mips_base_align_loops;\n-  align_jumps = mips_base_align_jumps;\n-  align_functions = mips_base_align_functions;\n+  str_align_loops = mips_base_align_loops;\n+  str_align_jumps = mips_base_align_jumps;\n+  str_align_functions = mips_base_align_functions;\n   target_flags &= ~(MASK_MIPS16 | MASK_MICROMIPS);\n   target_flags |= compression_mode;\n \n@@ -19589,12 +19589,12 @@ mips_set_compression_mode (unsigned int compression_mode)\n       /* Provide default values for align_* for 64-bit targets.  */\n       if (TARGET_64BIT)\n \t{\n-\t  if (align_loops == 0)\n-\t    align_loops = 8;\n-\t  if (align_jumps == 0)\n-\t    align_jumps = 8;\n-\t  if (align_functions == 0)\n-\t    align_functions = 8;\n+\t  if (flag_align_loops && !str_align_loops)\n+\t    str_align_loops = \"8\";\n+\t  if (flag_align_jumps && !str_align_jumps)\n+\t    str_align_jumps = \"8\";\n+\t  if (flag_align_functions && !str_align_functions)\n+\t    str_align_functions = \"8\";\n \t}\n \n       targetm.min_anchor_offset = -32768;\n@@ -20278,9 +20278,9 @@ mips_option_override (void)\n   mips_base_schedule_insns = flag_schedule_insns;\n   mips_base_reorder_blocks_and_partition = flag_reorder_blocks_and_partition;\n   mips_base_move_loop_invariants = flag_move_loop_invariants;\n-  mips_base_align_loops = align_loops;\n-  mips_base_align_jumps = align_jumps;\n-  mips_base_align_functions = align_functions;\n+  mips_base_align_loops = str_align_loops;\n+  mips_base_align_jumps = str_align_jumps;\n+  mips_base_align_functions = str_align_functions;\n \n   /* Now select the ISA mode.\n "}, {"sha": "80f67de12fc20d72fba8a90495bacbb5d2462fa4", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -5406,29 +5406,30 @@ rs6000_option_override_internal (bool global_init_p)\n \t  if (rs6000_cpu == PROCESSOR_TITAN\n \t      || rs6000_cpu == PROCESSOR_CELL)\n \t    {\n-\t      if (align_functions <= 0)\n-\t\talign_functions = 8;\n-\t      if (align_jumps <= 0)\n-\t\talign_jumps = 8;\n-\t      if (align_loops <= 0)\n-\t\talign_loops = 8;\n+\t      if (flag_align_functions && !str_align_functions)\n+\t\tstr_align_functions = \"8\";\n+\t      if (flag_align_jumps && !str_align_jumps)\n+\t\tstr_align_jumps = \"8\";\n+\t      if (flag_align_loops && !str_align_loops)\n+\t\tstr_align_loops = \"8\";\n \t    }\n \t  if (rs6000_align_branch_targets)\n \t    {\n-\t      if (align_functions <= 0)\n-\t\talign_functions = 16;\n-\t      if (align_jumps <= 0)\n-\t\talign_jumps = 16;\n-\t      if (align_loops <= 0)\n+\t      if (flag_align_functions && !str_align_functions)\n+\t\tstr_align_functions = \"16\";\n+\t      if (flag_align_jumps && !str_align_jumps)\n+\t\tstr_align_jumps = \"16\";\n+\t      if (flag_align_loops && !str_align_loops)\n \t\t{\n \t\t  can_override_loop_align = 1;\n-\t\t  align_loops = 16;\n+\t\t  str_align_loops = \"16\";\n \t\t}\n \t    }\n-\t  if (align_jumps_max_skip <= 0)\n-\t    align_jumps_max_skip = 15;\n-\t  if (align_loops_max_skip <= 0)\n-\t    align_loops_max_skip = 15;\n+\n+\t  if (flag_align_jumps && !str_align_jumps)\n+\t    str_align_jumps = \"16\";\n+\t  if (flag_align_loops && !str_align_loops)\n+\t    str_align_loops = \"16\";\n \t}\n \n       /* Arrange to save and restore machine status around nested functions.  */"}, {"sha": "f815221b1afcdad8d3bf4b10f21aebf32ad14ebb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -4958,29 +4958,30 @@ rs6000_option_override_internal (bool global_init_p)\n \t  if (rs6000_tune == PROCESSOR_TITAN\n \t      || rs6000_tune == PROCESSOR_CELL)\n \t    {\n-\t      if (align_functions <= 0)\n-\t\talign_functions = 8;\n-\t      if (align_jumps <= 0)\n-\t\talign_jumps = 8;\n-\t      if (align_loops <= 0)\n-\t\talign_loops = 8;\n+\t      if (flag_align_functions && !str_align_functions)\n+\t\tstr_align_functions = \"8\";\n+\t      if (flag_align_jumps && !str_align_jumps)\n+\t\tstr_align_jumps = \"8\";\n+\t      if (flag_align_loops && !str_align_loops)\n+\t\tstr_align_loops = \"8\";\n \t    }\n \t  if (rs6000_align_branch_targets)\n \t    {\n-\t      if (align_functions <= 0)\n-\t\talign_functions = 16;\n-\t      if (align_jumps <= 0)\n-\t\talign_jumps = 16;\n-\t      if (align_loops <= 0)\n+\t      if (flag_align_functions && !str_align_functions)\n+\t\tstr_align_functions = \"16\";\n+\t      if (flag_align_jumps && !str_align_jumps)\n+\t\tstr_align_jumps = \"16\";\n+\t      if (flag_align_loops && !str_align_loops)\n \t\t{\n \t\t  can_override_loop_align = 1;\n-\t\t  align_loops = 16;\n+\t\t  str_align_loops = \"16\";\n \t\t}\n \t    }\n-\t  if (align_jumps_max_skip <= 0)\n-\t    align_jumps_max_skip = 15;\n-\t  if (align_loops_max_skip <= 0)\n-\t    align_loops_max_skip = 15;\n+\n+\t  if (flag_align_jumps && !str_align_jumps)\n+\t    str_align_jumps = \"16\";\n+\t  if (flag_align_loops && !str_align_loops)\n+\t    str_align_loops = \"16\";\n \t}\n \n       /* Arrange to save and restore machine status around nested functions.  */"}, {"sha": "af97bef301d183d881c032198ac503dc0a615878", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -2843,12 +2843,18 @@ rx_option_override (void)\n   rx_override_options_after_change ();\n \n   /* These values are bytes, not log.  */\n-  if (align_jumps == 0 && ! optimize_size)\n-    align_jumps = ((rx_cpu_type == RX100 || rx_cpu_type == RX200) ? 4 : 8);\n-  if (align_loops == 0 && ! optimize_size)\n-    align_loops = ((rx_cpu_type == RX100 || rx_cpu_type == RX200) ? 4 : 8);\n-  if (align_labels == 0 && ! optimize_size)\n-    align_labels = ((rx_cpu_type == RX100 || rx_cpu_type == RX200) ? 4 : 8);\n+  if (! optimize_size)\n+    {\n+      if (flag_align_jumps && !str_align_jumps)\n+\tstr_align_jumps = ((rx_cpu_type == RX100\n+\t\t\t    || rx_cpu_type == RX200) ? \"4\" : \"8\");\n+      if (flag_align_loops && !str_align_loops)\n+\tstr_align_loops = ((rx_cpu_type == RX100\n+\t\t\t    || rx_cpu_type == RX200) ? \"4\" : \"8\");\n+      if (flag_align_labels && !str_align_labels)\n+\tstr_align_labels = ((rx_cpu_type == RX100\n+\t\t\t     || rx_cpu_type == RX200) ? \"4\" : \"8\");\n+    }\n }\n \n \f"}, {"sha": "2f5a0e94677cf70f578816cec2834e765028c433", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -417,9 +417,9 @@ typedef unsigned int CUMULATIVE_ARGS;\n /* Compute the alignment needed for label X in various situations.\n    If the user has specified an alignment then honour that, otherwise\n    use rx_align_for_label.  */\n-#define JUMP_ALIGN(x)\t\t\t\t(align_jumps > 1 ? align_jumps_log : rx_align_for_label (x, 0))\n-#define LABEL_ALIGN(x)\t\t\t\t(align_labels > 1 ? align_labels_log : rx_align_for_label (x, 3))\n-#define LOOP_ALIGN(x)\t\t\t\t(align_loops > 1 ? align_loops_log : rx_align_for_label (x, 2))\n+#define JUMP_ALIGN(x)\t\t\t\t(align_jumps_log > 0 ? align_jumps_log : rx_align_for_label (x, 0))\n+#define LABEL_ALIGN(x)\t\t\t\t(align_labels_log > 0 ? align_labels_log : rx_align_for_label (x, 3))\n+#define LOOP_ALIGN(x)\t\t\t\t(align_loops_log > 0 ? align_loops_log : rx_align_for_label (x, 2))\n #define LABEL_ALIGN_AFTER_BARRIER(x)\t\trx_align_for_label (x, 0)\n \n #define ASM_OUTPUT_MAX_SKIP_ALIGN(STREAM, LOG, MAX_SKIP)\t\\"}, {"sha": "23c3f3db621ae7791e7c2f03cf1118378b4892e2", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -7543,9 +7543,9 @@ s390_asm_output_function_label (FILE *asm_out_file, const char *fname,\n       function_alignment = MAX (8, DECL_ALIGN (decl) / BITS_PER_UNIT);\n       if (! DECL_USER_ALIGN (decl))\n \tfunction_alignment = MAX (function_alignment,\n-\t\t\t\t  (unsigned int) align_functions);\n+\t\t\t\t  (unsigned int) align_functions_max_skip + 1);\n       fputs (\"\\t# alignment for hotpatch\\n\", asm_out_file);\n-      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (function_alignment));\n+      ASM_OUTPUT_ALIGN (asm_out_file, align_functions_log);\n     }\n \n   if (S390_USE_TARGET_ATTRIBUTE && TARGET_DEBUG_ARG)"}, {"sha": "a1cad42eb70b61ddf31e78c03ab2a5e780c3242d", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -66,6 +66,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n #include \"regs.h\"\n+#include \"toplev.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -1007,29 +1008,37 @@ sh_override_options_after_change (void)\n       Aligning all jumps increases the code size, even if it might\n       result in slightly faster code.  Thus, it is set to the smallest \n       alignment possible if not specified by the user.  */\n-  if (align_loops == 0)\n-    align_loops = optimize_size ? 2 : 4;\n+  if (flag_align_loops && !str_align_loops)\n+    str_align_loops = optimize_size ? \"2\" : \"4\";\n \n-  if (align_jumps == 0)\n-    align_jumps = 2;\n-  else if (align_jumps < 2)\n-    align_jumps = 2;\n+  /* Parse values so that we can compare for current value.  */\n+  parse_alignment_opts ();\n+  if (flag_align_jumps && !str_align_jumps)\n+    str_align_jumps = \"2\";\n+  else if (align_jumps_value < 2)\n+    str_align_jumps = \"2\";\n \n-  if (align_functions == 0)\n-    align_functions = optimize_size ? 2 : 4;\n+  if (flag_align_functions && !str_align_functions)\n+    str_align_functions = optimize_size ? \"2\" : \"4\";\n \n   /* The linker relaxation code breaks when a function contains\n      alignments that are larger than that at the start of a\n      compilation unit.  */\n   if (TARGET_RELAX)\n     {\n-      int min_align = align_loops > align_jumps ? align_loops : align_jumps;\n+      /* Parse values so that we can compare for current value.  */\n+      parse_alignment_opts ();\n+      int min_align = MAX (align_loops_value, align_jumps_value);\n \n       /* Also take possible .long constants / mova tables into account.\t*/\n       if (min_align < 4)\n \tmin_align = 4;\n-      if (align_functions < min_align)\n-\talign_functions = min_align;\n+      if (align_functions_value < min_align)\n+\t{\n+\t  char *r = XNEWVEC (char, 16);\n+\t  sprintf (r, \"%d\", min_align);\n+\t  str_align_functions = r;\n+\t}\n     }\n }\n \f"}, {"sha": "d90a260785c38e13d467dfa06f676dd41808f8b4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -1906,18 +1906,18 @@ sparc_option_override (void)\n     target_flags &= ~MASK_FSMULD;\n \n   /* Supply a default value for align_functions.  */\n-  if (align_functions == 0)\n+  if (flag_align_functions && !str_align_functions)\n     {\n       if (sparc_cpu == PROCESSOR_ULTRASPARC\n \t  || sparc_cpu == PROCESSOR_ULTRASPARC3\n \t  || sparc_cpu == PROCESSOR_NIAGARA\n \t  || sparc_cpu == PROCESSOR_NIAGARA2\n \t  || sparc_cpu == PROCESSOR_NIAGARA3\n \t  || sparc_cpu == PROCESSOR_NIAGARA4)\n-\talign_functions = 32;\n+\tstr_align_functions = \"32\";\n       else if (sparc_cpu == PROCESSOR_NIAGARA7\n \t       || sparc_cpu == PROCESSOR_M8)\n-\talign_functions = 64;\n+\tstr_align_functions = \"64\";\n     }\n \n   /* Validate PCC_STRUCT_RETURN.  */"}, {"sha": "fe2a2a34a0590c30d185fa408505f8a155313e81", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -58,6 +58,8 @@\n #include \"dumpfile.h\"\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n+#include \"flags.h\"\n+#include \"toplev.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -238,8 +240,9 @@ spu_option_override (void)\n   flag_omit_frame_pointer = 1;\n \n   /* Functions must be 8 byte aligned so we correctly handle dual issue */\n-  if (align_functions < 8)\n-    align_functions = 8;\n+  parse_alignment_opts ();\n+  if (align_functions_value < 8)\n+    str_align_functions = \"8\";\n \n   spu_hint_dist = 8*4 - spu_max_nops*4;\n   if (spu_hint_dist < 0) \n@@ -2769,7 +2772,7 @@ static void\n spu_sched_init (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n \t\tint max_ready ATTRIBUTE_UNUSED)\n {\n-  if (align_labels > 4 || align_loops > 4 || align_jumps > 4)\n+  if (align_labels_value > 4 || align_loops_value > 4 || align_jumps_value > 4)\n     {\n       /* When any block might be at least 8-byte aligned, assume they\n          will all be at least 8-byte aligned to make sure dual issue"}, {"sha": "e846f1c2512658e5e5db2bb1c555ccf2dd7f2588", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -107,7 +107,7 @@ extern GTY(()) int spu_tune;\n \t(GET_CODE (X) == SYMBOL_REF \\\n           && (SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_ALIGN1) == 0 \\\n \t  && (! SYMBOL_REF_FUNCTION_P (X) \\\n-\t      || align_functions >= 16))\n+\t      || align_functions_value >= 16))\n \n #define PCC_BITFIELD_TYPE_MATTERS 1\n "}, {"sha": "37de62497978856945cb352be7b5c23138f2c97c", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -443,12 +443,12 @@ visium_option_override (void)\n \n   /* Align functions on 256-byte (32-quadword) for GR5 and 64-byte (8-quadword)\n      boundaries for GR6 so they start a new burst mode window.  */\n-  if (align_functions == 0)\n+  if (flag_align_functions && !str_align_functions)\n     {\n       if (visium_cpu == PROCESSOR_GR6)\n-\talign_functions = 64;\n+\tstr_align_functions = \"64\";\n       else\n-\talign_functions = 256;\n+\tstr_align_functions = \"256\";\n \n       /* Allow the size of compilation units to double because of inlining.\n \t In practice the global size of the object code is hardly affected\n@@ -459,26 +459,25 @@ visium_option_override (void)\n     }\n \n   /* Likewise for loops.  */\n-  if (align_loops == 0)\n+  if (flag_align_loops && !str_align_loops)\n     {\n       if (visium_cpu == PROCESSOR_GR6)\n-\talign_loops = 64;\n+\tstr_align_loops = \"64\";\n       else\n \t{\n-\t  align_loops = 256;\n \t  /* But not if they are too far away from a 256-byte boundary.  */\n-\t  align_loops_max_skip = 31;\n+\t  str_align_loops = \"256:32\";\n \t}\n     }\n \n   /* Align all jumps on quadword boundaries for the burst mode, and even\n      on 8-quadword boundaries for GR6 so they start a new window.  */\n-  if (align_jumps == 0)\n+  if (flag_align_jumps && !str_align_jumps)\n     {\n       if (visium_cpu == PROCESSOR_GR6)\n-\talign_jumps = 64;\n+\tstr_align_jumps = \"64\";\n       else\n-\talign_jumps = 8;\n+\tstr_align_jumps = \"8\";\n     }\n \n   /* We register a machine-specific pass.  This pass must be scheduled as"}, {"sha": "dac9a4565d5b3ec4c3e48afddf62b2d508803835", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -1501,7 +1501,8 @@ do\t\t\t\t\t\t\t\t\t\\\n    expression of type `int'. */\n #define ASM_OUTPUT_MAX_SKIP_ALIGN(STREAM,LOG,MAX_SKIP)\t\t\t\\\n   if ((LOG) != 0) {\t\t\t\t\t\t\t\\\n-    if ((MAX_SKIP) == 0) fprintf ((STREAM), \"\\t.p2align %d\\n\", (LOG));\t\\\n+    if ((MAX_SKIP) == 0 || (MAX_SKIP) >= (1<<(LOG))-1)\t\t\t\\\n+      fprintf ((STREAM), \"\\t.p2align %d\\n\", (LOG));\t\t\t\\\n     else {\t\t\t\t\t\t\t\t\\\n       fprintf ((STREAM), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n       /* Make sure that we have at least 8-byte alignment if > 8-byte\t\\"}, {"sha": "e0e59f6f2d0785e5dcfd610e1aa8c272e7724325", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -365,9 +365,11 @@ Objective-C and Objective-C++ Dialects}.\n \n @item Optimization Options\n @xref{Optimize Options,,Options that Control Optimization}.\n-@gccoptlist{-faggressive-loop-optimizations  -falign-functions[=@var{n}] @gol\n--falign-jumps[=@var{n}] @gol\n--falign-labels[=@var{n}]  -falign-loops[=@var{n}] @gol\n+@gccoptlist{-faggressive-loop-optimizations @gol\n+-falign-functions[=@var{n}[:@var{m}:[@var{n2}[:@var{m2}]]]] @gol\n+-falign-jumps[=@var{n}[:@var{m}:[@var{n2}[:@var{m2}]]]] @gol\n+-falign-labels[=@var{n}[:@var{m}:[@var{n2}[:@var{m2}]]]] @gol\n+-falign-loops[=@var{n}[:@var{m}:[@var{n2}[:@var{m2}]]]] @gol\n -fassociative-math  -fauto-profile  -fauto-profile[=@var{path}] @gol\n -fauto-inc-dec  -fbranch-probabilities @gol\n -fbranch-target-load-optimize  -fbranch-target-load-optimize2 @gol\n@@ -9240,19 +9242,36 @@ The @option{-fstrict-aliasing} option is enabled at levels\n \n @item -falign-functions\n @itemx -falign-functions=@var{n}\n+@itemx -falign-functions=@var{n}:@var{m}\n+@itemx -falign-functions=@var{n}:@var{m}:@var{n2}\n+@itemx -falign-functions=@var{n}:@var{m}:@var{n2}:@var{m2}\n @opindex falign-functions\n Align the start of functions to the next power-of-two greater than\n-@var{n}, skipping up to @var{n} bytes.  For instance,\n-@option{-falign-functions=32} aligns functions to the next 32-byte\n-boundary, but @option{-falign-functions=24} aligns to the next\n-32-byte boundary only if this can be done by skipping 23 bytes or less.\n+@var{n}, skipping up to @var{m}-1 bytes.  This ensures that at least\n+the first @var{m} bytes of the function can be fetched by the CPU\n+without crossing an @var{n}-byte alignment boundary.\n \n-@option{-fno-align-functions} and @option{-falign-functions=1} are\n-equivalent and mean that functions are not aligned.\n+If @var{m} is not specified, it defaults to @var{n}.\n+\n+Examples: @option{-falign-functions=32} aligns functions to the next\n+32-byte boundary, @option{-falign-functions=24} aligns to the next\n+32-byte boundary only if this can be done by skipping 23 bytes or less,\n+@option{-falign-functions=32:7} aligns to the next\n+32-byte boundary only if this can be done by skipping 6 bytes or less.\n+\n+The second pair of @var{n2}:@var{m2} values allows you to specify\n+a secondary alignment: @option{-falign-functions=64:7:32:3} aligns to\n+the next 64-byte boundary if this can be done by skipping 6 bytes or less,\n+otherwise aligns to the next 32-byte boundary if this can be done\n+by skipping 2 bytes or less.\n+If @var{m2} is not specified, it defaults to @var{n2}.\n \n Some assemblers only support this flag when @var{n} is a power of two;\n in that case, it is rounded up.\n \n+@option{-fno-align-functions} and @option{-falign-functions=1} are\n+equivalent and mean that functions are not aligned.\n+\n If @var{n} is not specified or is zero, use a machine-dependent default.\n The maximum allowed @var{n} option value is 65536.\n \n@@ -9266,12 +9285,13 @@ skip more bytes than the size of the function.\n \n @item -falign-labels\n @itemx -falign-labels=@var{n}\n+@itemx -falign-labels=@var{n}:@var{m}\n+@itemx -falign-labels=@var{n}:@var{m}:@var{n2}\n+@itemx -falign-labels=@var{n}:@var{m}:@var{n2}:@var{m2}\n @opindex falign-labels\n-Align all branch targets to a power-of-two boundary, skipping up to\n-@var{n} bytes like @option{-falign-functions}.  This option can easily\n-make code slower, because it must insert dummy operations for when the\n-branch target is reached in the usual flow of the code.\n+Align all branch targets to a power-of-two boundary.\n \n+Parameters of this option are analogous to the @option{-falign-functions} option.\n @option{-fno-align-labels} and @option{-falign-labels=1} are\n equivalent and mean that labels are not aligned.\n \n@@ -9286,12 +9306,15 @@ Enabled at levels @option{-O2}, @option{-O3}.\n \n @item -falign-loops\n @itemx -falign-loops=@var{n}\n+@itemx -falign-loops=@var{n}:@var{m}\n+@itemx -falign-loops=@var{n}:@var{m}:@var{n2}\n+@itemx -falign-loops=@var{n}:@var{m}:@var{n2}:@var{m2}\n @opindex falign-loops\n-Align loops to a power-of-two boundary, skipping up to @var{n} bytes\n-like @option{-falign-functions}.  If the loops are\n-executed many times, this makes up for any execution of the dummy\n-operations.\n+Align loops to a power-of-two boundary.  If the loops are executed\n+many times, this makes up for any execution of the dummy padding\n+instructions.\n \n+Parameters of this option are analogous to the @option{-falign-functions} option.\n @option{-fno-align-loops} and @option{-falign-loops=1} are\n equivalent and mean that loops are not aligned.\n The maximum allowed @var{n} option value is 65536.\n@@ -9302,12 +9325,15 @@ Enabled at levels @option{-O2}, @option{-O3}.\n \n @item -falign-jumps\n @itemx -falign-jumps=@var{n}\n+@itemx -falign-jumps=@var{n}:@var{m}\n+@itemx -falign-jumps=@var{n}:@var{m}:@var{n2}\n+@itemx -falign-jumps=@var{n}:@var{m}:@var{n2}:@var{m2}\n @opindex falign-jumps\n Align branch targets to a power-of-two boundary, for branch targets\n-where the targets can only be reached by jumping, skipping up to @var{n}\n-bytes like @option{-falign-functions}.  In this case, no dummy operations\n-need be executed.\n+where the targets can only be reached by jumping.  In this case,\n+no dummy operations need be executed.\n \n+Parameters of this option are analogous to the @option{-falign-functions} option.\n @option{-fno-align-jumps} and @option{-falign-jumps=1} are\n equivalent and mean that loops are not aligned.\n "}, {"sha": "ea238656d34aa4e1e5ccb51ab996dcb80d433ff3", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -2528,6 +2528,12 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t    {\n #ifdef ASM_OUTPUT_MAX_SKIP_ALIGN\n \t      ASM_OUTPUT_MAX_SKIP_ALIGN (file, align, max_skip);\n+\t      /* Above, we don't know whether a label, jump or loop\n+\t\t alignment was used.  Conservatively apply\n+\t\t label subalignment, not jump or loop\n+\t\t subalignment (they are almost always larger).  */\n+\t      ASM_OUTPUT_MAX_SKIP_ALIGN (file, state_align_labels.levels[1].log,\n+\t\t\t\t\t state_align_labels.levels[1].maxskip);\n #else\n #ifdef ASM_OUTPUT_ALIGN_WITH_NOP\n               ASM_OUTPUT_ALIGN_WITH_NOP (file, align);"}, {"sha": "bfd645b7f29af692d552573a45f50d50e16f9497", "filename": "gcc/flags.h", "status": "modified", "additions": 45, "deletions": 26, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -42,19 +42,32 @@ extern bool final_insns_dump_p;\n \f\n /* Other basic status info about current function.  */\n \n-/* Target-dependent global state.  */\n-struct target_flag_state {\n+/* Align flags tuple with alignment in log form and with a maximum skip.  */\n+\n+struct align_flags_tuple\n+{\n   /* Values of the -falign-* flags: how much to align labels in code.\n-     0 means `use default', 1 means `don't align'.\n-     For each variable, there is an _log variant which is the power\n-     of two not less than the variable, for .align output.  */\n-  int x_align_loops_log;\n-  int x_align_loops_max_skip;\n-  int x_align_jumps_log;\n-  int x_align_jumps_max_skip;\n-  int x_align_labels_log;\n-  int x_align_labels_max_skip;\n-  int x_align_functions_log;\n+     log is \"align to 2^log\" (so 0 means no alignment).\n+     maxskip is the maximum allowed amount of padding to insert.  */\n+  int log;\n+  int maxskip;\n+};\n+\n+/* Target-dependent global state.  */\n+\n+struct align_flags\n+{\n+  align_flags_tuple levels[2];\n+};\n+\n+struct target_flag_state\n+{\n+  /* Each falign-foo can generate up to two levels of alignment:\n+     -falign-foo=N:M[:N2:M2] */\n+  align_flags x_align_loops;\n+  align_flags x_align_jumps;\n+  align_flags x_align_labels;\n+  align_flags x_align_functions;\n \n   /* The excess precision currently in effect.  */\n   enum excess_precision x_flag_excess_precision;\n@@ -67,20 +80,26 @@ extern struct target_flag_state *this_target_flag_state;\n #define this_target_flag_state (&default_target_flag_state)\n #endif\n \n-#define align_loops_log \\\n-  (this_target_flag_state->x_align_loops_log)\n-#define align_loops_max_skip \\\n-  (this_target_flag_state->x_align_loops_max_skip)\n-#define align_jumps_log \\\n-  (this_target_flag_state->x_align_jumps_log)\n-#define align_jumps_max_skip \\\n-  (this_target_flag_state->x_align_jumps_max_skip)\n-#define align_labels_log \\\n-  (this_target_flag_state->x_align_labels_log)\n-#define align_labels_max_skip \\\n-  (this_target_flag_state->x_align_labels_max_skip)\n-#define align_functions_log \\\n-  (this_target_flag_state->x_align_functions_log)\n+#define state_align_loops\t (this_target_flag_state->x_align_loops)\n+#define state_align_jumps\t (this_target_flag_state->x_align_jumps)\n+#define state_align_labels\t (this_target_flag_state->x_align_labels)\n+#define state_align_functions\t (this_target_flag_state->x_align_functions)\n+#define align_loops_log\t\t (state_align_loops.levels[0].log)\n+#define align_jumps_log\t\t (state_align_jumps.levels[0].log)\n+#define align_labels_log\t (state_align_labels.levels[0].log)\n+#define align_functions_log      (state_align_functions.levels[0].log)\n+#define align_loops_max_skip     (state_align_loops.levels[0].maxskip)\n+#define align_jumps_max_skip     (state_align_jumps.levels[0].maxskip)\n+#define align_labels_max_skip    (state_align_labels.levels[0].maxskip)\n+#define align_functions_max_skip (state_align_functions.levels[0].maxskip)\n+#define align_loops_value\t (align_loops_max_skip + 1)\n+#define align_jumps_value\t (align_jumps_max_skip + 1)\n+#define align_labels_value\t (align_labels_max_skip + 1)\n+#define align_functions_value\t (align_functions_max_skip + 1)\n+\n+/* String representaions of the above options are available in\n+   const char *str_align_foo.  NULL if not set.  */\n+\n #define flag_excess_precision \\\n   (this_target_flag_state->x_flag_excess_precision)\n "}, {"sha": "142cdaec2ce4ca4b1d8ad2c33f897271969263ef", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -4609,6 +4609,9 @@ invoke_set_current_function_hook (tree fndecl)\n       targetm.set_current_function (fndecl);\n       this_fn_optabs = this_target_optabs;\n \n+      /* Initialize global alignment variables after op.  */\n+      parse_alignment_opts ();\n+\n       if (opts != optimization_default_node)\n \t{\n \t  init_tree_optimization_optabs (opts);"}, {"sha": "39b96ba13be72c8d2d7a78896f7afe4f6e1f2e04", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -658,7 +658,7 @@ sem_function::equals_wpa (sem_item *item,\n   cl_optimization *opt1 = opts_for_fn (decl);\n   cl_optimization *opt2 = opts_for_fn (item->decl);\n \n-  if (opt1 != opt2 && memcmp (opt1, opt2, sizeof(cl_optimization)))\n+  if (opt1 != opt2 && !cl_optimization_option_eq (opt1, opt2))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{"}, {"sha": "dd279f6762b2217ae0dda0cb852d2386ee27d17d", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -919,9 +919,11 @@ void cl_target_option_stream_in (struct data_in *,\n \t\t\t\t struct bitpack_d *,\n \t\t\t\t struct cl_target_option *);\n \n-void cl_optimization_stream_out (struct bitpack_d *, struct cl_optimization *);\n+void cl_optimization_stream_out (struct output_block *,\n+\t\t\t\t struct bitpack_d *, struct cl_optimization *);\n \n-void cl_optimization_stream_in (struct bitpack_d *, struct cl_optimization *);\n+void cl_optimization_stream_in (struct data_in *,\n+\t\t\t\tstruct bitpack_d *, struct cl_optimization *);\n \n \n "}, {"sha": "daaf92f489c3c0334ad0dd706634ae64666c3fde", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -1,3 +1,11 @@\n+2018-07-04  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/66240\n+\tPR target/45996\n+\tPR c/84100\n+\t* lto.c (compare_tree_sccs_1): Use cl_optimization_option_eq\n+\tinstead of memcmp.\n+\n 2018-06-20  Martin Liska  <mliska@suse.cz>\n \n \t* lto-symtab.c (lto_symtab_merge_p): Remove not valid"}, {"sha": "6f10dab27e5cf140d704a147e2d94a0e5f2404ec", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -1222,8 +1222,8 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       return false;\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    if (memcmp (TREE_OPTIMIZATION (t1), TREE_OPTIMIZATION (t2),\n-\t\tsizeof (struct cl_optimization)) != 0)\n+    if (!cl_optimization_option_eq (TREE_OPTIMIZATION (t1),\n+\t\t\t\t    TREE_OPTIMIZATION (t2)))\n       return false;\n \n   if (CODE_CONTAINS_STRUCT (code, TS_BINFO))"}, {"sha": "6e33a4320c10f456c5c91dceaa1e79e779ae3d5a", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 89, "deletions": 6, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -85,6 +85,7 @@ n_opt_char = 3;\n n_opt_short = 0;\n n_opt_int = 0;\n n_opt_enum = 0;\n+n_opt_string = 0;\n n_opt_other = 0;\n var_opt_char[0] = \"optimize\";\n var_opt_char[1] = \"optimize_size\";\n@@ -123,6 +124,8 @@ for (i = 0; i < n_opts; i++) {\n \t\t\telse if (otype ~ \"^signed +char *$\")\n \t\t\t\tvar_opt_range[name] = \"-128, 127\"\n \t\t}\n+\t\telse if (otype ~ \"^const char \\\\**$\")\n+\t\t\tvar_opt_string[n_opt_string++] = name;\n \t\telse\n \t\t\tvar_opt_other[n_opt_other++] = name;\n \t}\n@@ -155,6 +158,10 @@ for (i = 0; i < n_opt_char; i++) {\n \tprint \"  ptr->x_\" var_opt_char[i] \" = opts->x_\" var_opt_char[i] \";\";\n }\n \n+for (i = 0; i < n_opt_string; i++) {\n+\tprint \"  ptr->x_\" var_opt_string[i] \" = opts->x_\" var_opt_string[i] \";\";\n+}\n+\n print \"}\";\n \n print \"\";\n@@ -183,6 +190,10 @@ for (i = 0; i < n_opt_char; i++) {\n \tprint \"  opts->x_\" var_opt_char[i] \" = ptr->x_\" var_opt_char[i] \";\";\n }\n \n+for (i = 0; i < n_opt_string; i++) {\n+\tprint \"  opts->x_\" var_opt_string[i] \" = ptr->x_\" var_opt_string[i] \";\";\n+}\n+\n print \"  targetm.override_options_after_change ();\";\n print \"}\";\n \n@@ -239,6 +250,15 @@ for (i = 0; i < n_opt_char; i++) {\n \tprint \"\";\n }\n \n+for (i = 0; i < n_opt_string; i++) {\n+\tprint \"  if (ptr->x_\" var_opt_char[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%s)\\\\n\\\",\";\n+\tprint \"             indent_to, \\\"\\\",\";\n+\tprint \"             \\\"\" var_opt_string[i] \"\\\",\";\n+\tprint \"             ptr->x_\" var_opt_string[i] \");\";\n+\tprint \"\";\n+}\n+\n print \"}\";\n \n print \"\";\n@@ -301,6 +321,19 @@ for (i = 0; i < n_opt_char; i++) {\n \tprint \"\";\n }\n \n+for (i = 0; i < n_opt_string; i++) {\n+\tname = var_opt_string[i]\n+\tprint \"  if (ptr1->x_\" name \" != ptr2->x_\" name \"\";\n+\tprint \"      || (!ptr1->x_\" name\" || !ptr2->x_\" name\n+\tprint \"          || strcmp (ptr1->x_\" name\", ptr2->x_\" name \")))\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%s/%s)\\\\n\\\",\";\n+\tprint \"             indent_to, \\\"\\\",\";\n+\tprint \"             \\\"\" name \"\\\",\";\n+\tprint \"             ptr1->x_\" name \",\";\n+\tprint \"             ptr2->x_\" name \");\";\n+\tprint \"\";\n+}\n+\n print \"}\";\n \n \n@@ -766,32 +799,82 @@ for (i = 0; i < n_opt_val; i++) {\n \tif (!var_opt_hash[i])\n \t\tcontinue;\n \tname = var_opt_val[i]\n-\tprint \"  hstate.add_hwi (ptr->\" name\");\";\n+\totype = var_opt_val_type[i];\n+\tif (otype ~ \"^const char \\\\**$\")\n+\t{\n+\t\tprint \"  if (ptr->\" name\")\";\n+\t\tprint \"    hstate.add (ptr->\" name\", strlen (ptr->\" name\"));\";\n+\t\tprint \"  else\";\n+\t\tprint \"    hstate.add_int (0);\";\n+\t}\n+\telse\n+\t\tprint \"  hstate.add_hwi (ptr->\" name\");\";\n }\n print \"  return hstate.end ();\";\n print \"}\";\n \n+print \"\";\n+print \"/* Compare two optimization options  */\";\n+print \"bool\";\n+print \"cl_optimization_option_eq (cl_optimization const *ptr1,\";\n+print \"                           cl_optimization const *ptr2)\";\n+print \"{\";\n+for (i = 0; i < n_opt_val; i++) {\n+\tif (!var_opt_hash[i])\n+\t\tcontinue;\n+\tname = var_opt_val[i]\n+\totype = var_opt_val_type[i];\n+\tif (otype ~ \"^const char \\\\**$\")\n+\t{\n+\t\tprint \"  if (ptr1->\" name\" != ptr2->\" name;\n+\t\tprint \"      && (!ptr1->\" name\" || !ptr2->\" name\n+\t\tprint \"          || strcmp (ptr1->\" name\", ptr2->\" name \")))\";\n+\t\tprint \"    return false;\";\n+\t}\n+\telse\n+\t{\n+\t\tprint \"  if (ptr1->\" name\" != ptr2->\" name \")\";\n+\t\tprint \"    return false;\";\n+\t}\n+}\n+print \"  return true;\";\n+print \"}\";\n+\n print \"\";\n print \"/* Stream out optimization options  */\";\n print \"void\";\n-print \"cl_optimization_stream_out (struct bitpack_d *bp,\";\n+print \"cl_optimization_stream_out (struct output_block *ob,\";\n+print \"                            struct bitpack_d *bp,\";\n print \"                            struct cl_optimization *ptr)\";\n print \"{\";\n for (i = 0; i < n_opt_val; i++) {\n \tname = var_opt_val[i]\n-\tprint \"  bp_pack_value (bp, ptr->\" name\", 64);\";\n+\totype = var_opt_val_type[i];\n+\tif (otype ~ \"^const char \\\\**$\")\n+\t\tprint \"  bp_pack_string (ob, bp, ptr->\" name\", true);\";\n+\telse\n+\t\tprint \"  bp_pack_value (bp, ptr->\" name\", 64);\";\n }\n print \"}\";\n \n print \"\";\n print \"/* Stream in optimization options  */\";\n print \"void\";\n-print \"cl_optimization_stream_in (struct bitpack_d *bp,\";\n-print \"                           struct cl_optimization *ptr)\";\n+print \"cl_optimization_stream_in (struct data_in *data_in ATTRIBUTE_UNUSED,\";\n+print \"                           struct bitpack_d *bp ATTRIBUTE_UNUSED,\";\n+print \"                           struct cl_optimization *ptr ATTRIBUTE_UNUSED)\";\n print \"{\";\n for (i = 0; i < n_opt_val; i++) {\n \tname = var_opt_val[i]\n-\tprint \"  ptr->\" name\" = (\" var_opt_val_type[i] \") bp_unpack_value (bp, 64);\";\n+\totype = var_opt_val_type[i];\n+\tif (otype ~ \"^const char \\\\**$\")\n+\t{\n+\t      print \"  ptr->\" name\" = bp_unpack_string (data_in, bp);\";\n+\t      print \"  if (ptr->\" name\")\";\n+\t      print \"    ptr->\" name\" = xstrdup (ptr->\" name\");\";\n+\t}\n+\telse\n+\t      print \"  ptr->\" name\" = (\" var_opt_val_type[i] \") bp_unpack_value (bp, 64);\";\n }\n print \"}\";\n }"}, {"sha": "8358b9b2b67a436f3ddf711294df9d5960faab4f", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -308,6 +308,9 @@ print \"\";\n print \"/* Hash optimization from a structure.  */\";\n print \"extern hashval_t cl_optimization_hash (const struct cl_optimization *);\";\n print \"\";\n+print \"/* Compare two optimization options.  */\";\n+print \"extern bool cl_optimization_option_eq (cl_optimization const *ptr1, cl_optimization const *ptr2);\"\n+print \"\";\n print \"/* Generator files may not have access to location_t, and don't need these.  */\"\n print \"#if defined(UNKNOWN_LOCATION)\"\n print \"bool                                                                  \""}, {"sha": "e536607fe796d65741d6827d336d9fb6196a3465", "filename": "gcc/opts.c", "status": "modified", "additions": 88, "deletions": 20, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -1039,26 +1039,6 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n   if ((opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS) && opts->x_flag_tm)\n     sorry (\"transactional memory is not supported with \"\n \t   \"%<-fsanitize=kernel-address%>\");\n-\n-  /* Comes from final.c -- no real reason to change it.  */\n-#define MAX_CODE_ALIGN 16\n-#define MAX_CODE_ALIGN_VALUE (1 << MAX_CODE_ALIGN)\n-\n-  if (opts->x_align_loops > MAX_CODE_ALIGN_VALUE)\n-    error_at (loc, \"-falign-loops=%d is not between 0 and %d\",\n-\t      opts->x_align_loops, MAX_CODE_ALIGN_VALUE);\n-\n-  if (opts->x_align_jumps > MAX_CODE_ALIGN_VALUE)\n-    error_at (loc, \"-falign-jumps=%d is not between 0 and %d\",\n-\t      opts->x_align_jumps, MAX_CODE_ALIGN_VALUE);\n-\n-  if (opts->x_align_functions > MAX_CODE_ALIGN_VALUE)\n-    error_at (loc, \"-falign-functions=%d is not between 0 and %d\",\n-\t      opts->x_align_functions, MAX_CODE_ALIGN_VALUE);\n-\n-  if (opts->x_align_labels > MAX_CODE_ALIGN_VALUE)\n-    error_at (loc, \"-falign-labels=%d is not between 0 and %d\",\n-\t      opts->x_align_labels, MAX_CODE_ALIGN_VALUE);\n }\n \n #define LEFT_COLUMN\t27\n@@ -1779,6 +1759,78 @@ parse_no_sanitize_attribute (char *value)\n   return flags;\n }\n \n+/* Parse -falign-NAME format for a FLAG value.  Return individual\n+   parsed integer values into RESULT_VALUES array.  If REPORT_ERROR is\n+   set, print error message at LOC location.  */\n+\n+bool\n+parse_and_check_align_values (const char *flag,\n+\t\t\t      const char *name,\n+\t\t\t      auto_vec<unsigned> &result_values,\n+\t\t\t      bool report_error,\n+\t\t\t      location_t loc)\n+{\n+  char *str = xstrdup (flag);\n+  for (char *p = strtok (str, \":\"); p; p = strtok (NULL, \":\"))\n+    {\n+      char *end;\n+      int v = strtol (p, &end, 10);\n+      if (*end != '\\0' || v < 0)\n+\t{\n+\t  if (report_error)\n+\t    error_at (loc, \"invalid arguments for %<-falign-%s%> option: %qs\",\n+\t\t      name, flag);\n+\n+\t  return false;\n+\t}\n+\n+      result_values.safe_push ((unsigned)v);\n+    }\n+\n+  free (str);\n+\n+  /* Check that we have a correct number of values.  */\n+#ifdef SUBALIGN_LOG\n+  unsigned max_valid_values = 4;\n+#else\n+  unsigned max_valid_values = 2;\n+#endif\n+\n+  if (result_values.is_empty ()\n+      || result_values.length () > max_valid_values)\n+    {\n+      if (report_error)\n+\terror_at (loc, \"invalid number of arguments for %<-falign-%s%> \"\n+\t\t  \"option: %qs\", name, flag);\n+      return false;\n+    }\n+\n+  /* Comes from final.c -- no real reason to change it.  */\n+#define MAX_CODE_ALIGN 16\n+#define MAX_CODE_ALIGN_VALUE (1 << MAX_CODE_ALIGN)\n+\n+  for (unsigned i = 0; i < result_values.length (); i++)\n+    if (result_values[i] > MAX_CODE_ALIGN_VALUE)\n+      {\n+\tif (report_error)\n+\t  error_at (loc, \"%<-falign-%s%> is not between 0 and %d\",\n+\t\t    name, MAX_CODE_ALIGN_VALUE);\n+\treturn false;\n+      }\n+\n+  return true;\n+}\n+\n+/* Check that alignment value FLAG for -falign-NAME is valid at a given\n+   location LOC.  */\n+\n+static void\n+check_alignment_argument (location_t loc, const char *flag, const char *name)\n+{\n+  auto_vec<unsigned> align_result;\n+  parse_and_check_align_values (flag, name, align_result, true, loc);\n+}\n+\n /* Handle target- and language-independent options.  Return zero to\n    generate an \"unknown option\" message.  Only options that need\n    extra handling need to be listed here; if you simply want\n@@ -2501,6 +2553,22 @@ common_handle_option (struct gcc_options *opts,\n       opts->x_flag_ipa_icf_variables = value;\n       break;\n \n+    case OPT_falign_loops_:\n+      check_alignment_argument (loc, arg, \"loops\");\n+      break;\n+\n+    case OPT_falign_jumps_:\n+      check_alignment_argument (loc, arg, \"jumps\");\n+      break;\n+\n+    case OPT_falign_labels_:\n+      check_alignment_argument (loc, arg, \"labels\");\n+      break;\n+\n+    case OPT_falign_functions_:\n+      check_alignment_argument (loc, arg, \"functions\");\n+      break;\n+\n     default:\n       /* If the flag was handled in a standard way, assume the lack of\n \t processing here is intentional.  */"}, {"sha": "3723bdbf95b79094c569e029f26006251e5d5691", "filename": "gcc/opts.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -442,4 +442,11 @@ extern const char *candidates_list_and_hint (const char *arg, char *&str,\n \t\t\t\t\t     const auto_vec <const char *> &\n \t\t\t\t\t     candidates);\n \n+\n+extern bool parse_and_check_align_values (const char *flag,\n+\t\t\t\t\t  const char *name,\n+\t\t\t\t\t  auto_vec<unsigned> &result_values,\n+\t\t\t\t\t  bool report_error,\n+\t\t\t\t\t  location_t loc);\n+\n #endif"}, {"sha": "930215d4949a87b91712306ec52c144abecee1da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -1,3 +1,12 @@\n+2018-07-04  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/66240\n+\tPR target/45996\n+\tPR c/84100\n+\t* gcc.dg/pr84100.c (foo):\n+\t* gcc.target/i386/falign-functions-2.c: New test.\n+\t* gcc.target/i386/falign-functions.c: New test.\n+\n 2018-07-04  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/pr47793.c: Remove."}, {"sha": "676d0c78dea68cb34ad789f763fadb43a881084d", "filename": "gcc/testsuite/gcc.dg/pr84100.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84100.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -8,7 +8,7 @@ __attribute__((optimize (\"align-loops=16\", \"align-jumps=16\",\n \t\t\t \"align-labels=16\", \"align-functions=16\")))\n void\n foo (void)\n-{\t\t\t/* { dg-bogus \"bad option\" } */\n+{\t\t\t/* { dg-warning \"bad option\" } */\n   for (int i = 0; i < 1024; ++i)\n     bar ();\n }"}, {"sha": "26d505e3bea39841d8ddbb068f13832e26eb0a2c", "filename": "gcc/testsuite/gcc.target/i386/falign-functions-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffalign-functions-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffalign-functions-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffalign-functions-2.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -falign-functions=64:8\" } */\n+\n+void\n+a (void)\n+{\n+}\n+\n+#pragma GCC push_options\n+#pragma GCC optimize \"align-functions=128:100\"\n+void b (void)\n+{\n+}\n+#pragma GCC pop_options\n+\n+void\n+__attribute__((optimize(\"-falign-functions=88:88:32\")))\n+c (void)\n+{\n+}\n+\n+void\n+d (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".p2align 6,,7\" 2 } } */\n+/* { dg-final { scan-assembler-times \".p2align 7,,99\" 1 } } */\n+/* { dg-final { scan-assembler-times \".p2align 7,,87\" 1 } } */\n+/* { dg-final { scan-assembler-times \".p2align 5\" 1 } } */"}, {"sha": "27daa1d0e6bfb2fa951da5b6d712bf3fbd3f4827", "filename": "gcc/testsuite/gcc.target/i386/falign-functions.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffalign-functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffalign-functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffalign-functions.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -falign-functions=64:8\" } */\n+/* { dg-final { scan-assembler \".p2align 6,,7\" } } */\n+\n+void\n+test_func (void)\n+{\n+}"}, {"sha": "cf7bab655bda06bdf917515fe12331ac5db49fee", "filename": "gcc/toplev.c", "status": "modified", "additions": 112, "deletions": 24, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -1197,29 +1197,120 @@ target_supports_section_anchors_p (void)\n   return true;\n }\n \n-/* Default the align_* variables to 1 if they're still unset, and\n-   set up the align_*_log variables.  */\n+/* Parse \"N[:M][:...]\" into struct align_flags A.\n+   VALUES contains parsed values (in reverse order), all processed\n+   values are popped.  */\n+\n static void\n-init_alignments (void)\n+read_log_maxskip (auto_vec<unsigned> &values, align_flags_tuple *a)\n {\n-  if (align_loops <= 0)\n-    align_loops = 1;\n-  if (align_loops_max_skip > align_loops)\n-    align_loops_max_skip = align_loops - 1;\n-  align_loops_log = floor_log2 (align_loops * 2 - 1);\n-  if (align_jumps <= 0)\n-    align_jumps = 1;\n-  if (align_jumps_max_skip > align_jumps)\n-    align_jumps_max_skip = align_jumps - 1;\n-  align_jumps_log = floor_log2 (align_jumps * 2 - 1);\n-  if (align_labels <= 0)\n-    align_labels = 1;\n-  align_labels_log = floor_log2 (align_labels * 2 - 1);\n-  if (align_labels_max_skip > align_labels)\n-    align_labels_max_skip = align_labels - 1;\n-  if (align_functions <= 0)\n-    align_functions = 1;\n-  align_functions_log = floor_log2 (align_functions * 2 - 1);\n+  unsigned n = values.pop ();\n+  if (n != 0)\n+    a->log = floor_log2 (n * 2 - 1);\n+  if (values.is_empty ())\n+    a->maxskip = n ? n - 1 : 0;\n+  else\n+    {\n+      unsigned m = values.pop ();\n+      if (m > n)\n+\tm = n;\n+      /* -falign-foo=N:M means M-1 max bytes of padding, not M.  */\n+      if (m > 0)\n+\tm--;\n+      a->maxskip = m;\n+    }\n+}\n+\n+/* Parse \"N[:M[:N2[:M2]]]\" string FLAG into a pair of struct align_flags.  */\n+\n+static void\n+parse_N_M (const char *flag, align_flags &a, unsigned int min_align_log)\n+{\n+  if (flag)\n+    {\n+      static hash_map <nofree_string_hash, align_flags> cache;\n+      align_flags *entry = cache.get (flag);\n+      if (entry)\n+\t{\n+\t  a = *entry;\n+\t  return;\n+\t}\n+\n+      auto_vec<unsigned> result_values;\n+      bool r = parse_and_check_align_values (flag, NULL, result_values, false,\n+\t\t\t\t\t     UNKNOWN_LOCATION);\n+      if (!r)\n+\treturn;\n+\n+      /* Reverse values for easier manipulation.  */\n+      result_values.reverse ();\n+\n+      read_log_maxskip (result_values, &a.levels[0]);\n+      if (!result_values.is_empty ())\n+\tread_log_maxskip (result_values, &a.levels[1]);\n+#ifdef SUBALIGN_LOG\n+      else\n+\t{\n+\t  /* N2[:M2] is not specified.  This arch has a default for N2.\n+\t     Before -falign-foo=N:M:N2:M2 was introduced, x86 had a tweak.\n+\t     -falign-functions=N with N > 8 was adding secondary alignment.\n+\t     -falign-functions=10 was emitting this before every function:\n+\t\t\t.p2align 4,,9\n+\t\t\t.p2align 3\n+\t     Now this behavior (and more) can be explicitly requested:\n+\t     -falign-functions=16:10:8\n+\t     Retain old behavior if N2 is missing: */\n+\n+\t  int align = 1 << a.levels[0].log;\n+\t  int subalign = 1 << SUBALIGN_LOG;\n+\n+\t  if (a.levels[0].log > SUBALIGN_LOG\n+\t      && a.levels[0].maxskip >= subalign - 1)\n+\t    {\n+\t      /* Set N2 unless subalign can never have any effect.  */\n+\t      if (align > a.levels[0].maxskip + 1)\n+\t\ta.levels[1].log = SUBALIGN_LOG;\n+\t    }\n+\t}\n+#endif\n+\n+      /* Cache seen value.  */\n+      cache.put (flag, a);\n+    }\n+  else\n+    {\n+      /* Reset values to zero.  */\n+      for (unsigned i = 0; i < 2; i++)\n+\t{\n+\t  a.levels[i].log = 0;\n+\t  a.levels[i].maxskip = 0;\n+\t}\n+    }\n+\n+  if ((unsigned int)a.levels[0].log < min_align_log)\n+    {\n+      a.levels[0].log = min_align_log;\n+      a.levels[0].maxskip = (1 << min_align_log) - 1;\n+    }\n+}\n+\n+/* Minimum alignment requirements, if arch has them.  */\n+\n+unsigned int min_align_loops_log = 0;\n+unsigned int min_align_jumps_log = 0;\n+unsigned int min_align_labels_log = 0;\n+unsigned int min_align_functions_log = 0;\n+\n+/* Process -falign-foo=N[:M[:N2[:M2]]] options.  */\n+\n+void\n+parse_alignment_opts (void)\n+{\n+  parse_N_M (str_align_loops, state_align_loops, min_align_loops_log);\n+  parse_N_M (str_align_jumps, state_align_jumps, min_align_jumps_log);\n+  parse_N_M (str_align_labels, state_align_labels, min_align_labels_log);\n+  parse_N_M (str_align_functions, state_align_functions,\n+\t     min_align_functions_log);\n }\n \n /* Process the options that have been parsed.  */\n@@ -1722,9 +1813,6 @@ process_options (void)\n static void\n backend_init_target (void)\n {\n-  /* Initialize alignment variables.  */\n-  init_alignments ();\n-\n   /* This depends on stack_pointer_rtx.  */\n   init_fake_stack_mems ();\n "}, {"sha": "98f3ceea8721aaae56074f5d90f0dedde9ac42e4", "filename": "gcc/toplev.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -93,6 +93,13 @@ extern bool set_src_pwd\t\t       (const char *);\n extern HOST_WIDE_INT get_random_seed (bool);\n extern void set_random_seed (const char *);\n \n+extern unsigned int min_align_loops_log;\n+extern unsigned int min_align_jumps_log;\n+extern unsigned int min_align_labels_log;\n+extern unsigned int min_align_functions_log;\n+\n+extern void parse_alignment_opts (void);\n+\n extern void initialize_rtl (void);\n \n #endif /* ! GCC_TOPLEV_H */"}, {"sha": "4bb420cb5e8a3c10c7dd537ca7dc6384fa1ce1a4", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -530,7 +530,7 @@ streamer_read_tree_bitfields (struct lto_input_block *ib,\n     unpack_ts_translation_unit_decl_value_fields (data_in, &bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    cl_optimization_stream_in (&bp, TREE_OPTIMIZATION (expr));\n+    cl_optimization_stream_in (data_in, &bp, TREE_OPTIMIZATION (expr));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     {"}, {"sha": "8b20f0a74e06f6477d9cb0eeeda550162d9d50ff", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -466,7 +466,7 @@ streamer_write_tree_bitfields (struct output_block *ob, tree expr)\n     pack_ts_translation_unit_decl_value_fields (ob, &bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    cl_optimization_stream_out (&bp, TREE_OPTIMIZATION (expr));\n+    cl_optimization_stream_out (ob, &bp, TREE_OPTIMIZATION (expr));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     bp_pack_var_len_unsigned (&bp, CONSTRUCTOR_NELTS (expr));"}, {"sha": "afd41d42dd76a549c6e8af1d6b079beca804b837", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -11972,30 +11972,18 @@ cl_option_hasher::equal (tree x, tree y)\n {\n   const_tree const xt = x;\n   const_tree const yt = y;\n-  const char *xp;\n-  const char *yp;\n-  size_t len;\n \n   if (TREE_CODE (xt) != TREE_CODE (yt))\n     return 0;\n \n   if (TREE_CODE (xt) == OPTIMIZATION_NODE)\n-    {\n-      xp = (const char *)TREE_OPTIMIZATION (xt);\n-      yp = (const char *)TREE_OPTIMIZATION (yt);\n-      len = sizeof (struct cl_optimization);\n-    }\n-\n+    return cl_optimization_option_eq (TREE_OPTIMIZATION (xt),\n+\t\t\t\t      TREE_OPTIMIZATION (yt));\n   else if (TREE_CODE (xt) == TARGET_OPTION_NODE)\n-    {\n-      return cl_target_option_eq (TREE_TARGET_OPTION (xt),\n-\t\t\t\t  TREE_TARGET_OPTION (yt));\n-    }\n-\n+    return cl_target_option_eq (TREE_TARGET_OPTION (xt),\n+\t\t\t\tTREE_TARGET_OPTION (yt));\n   else\n     gcc_unreachable ();\n-\n-  return (memcmp (xp, yp, len) == 0);\n }\n \n /* Build an OPTIMIZATION_NODE based on the options in OPTS.  */"}, {"sha": "81f460643ea4743108d4617958b6a8d257b1dd96", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c518c1025b435e1c593a745036fc9b8ed04c5819/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c518c1025b435e1c593a745036fc9b8ed04c5819", "patch": "@@ -1805,17 +1805,21 @@ assemble_start_function (tree decl, const char *fnname)\n       && optimize_function_for_speed_p (cfun))\n     {\n #ifdef ASM_OUTPUT_MAX_SKIP_ALIGN\n-      int align_log = align_functions_log;\n+      int align_log = state_align_functions.levels[0].log;\n #endif\n-      int max_skip = align_functions - 1;\n+      int max_skip = state_align_functions.levels[0].maxskip;\n       if (flag_limit_function_alignment && crtl->max_insn_address > 0\n \t  && max_skip >= crtl->max_insn_address)\n \tmax_skip = crtl->max_insn_address - 1;\n \n #ifdef ASM_OUTPUT_MAX_SKIP_ALIGN\n       ASM_OUTPUT_MAX_SKIP_ALIGN (asm_out_file, align_log, max_skip);\n+      if (max_skip == state_align_functions.levels[0].maxskip)\n+\tASM_OUTPUT_MAX_SKIP_ALIGN (asm_out_file,\n+\t\t\t\t   state_align_functions.levels[1].log,\n+\t\t\t\t   state_align_functions.levels[1].maxskip);\n #else\n-      ASM_OUTPUT_ALIGN (asm_out_file, align_functions_log);\n+      ASM_OUTPUT_ALIGN (asm_out_file, state_align_functions.levels[0].log);\n #endif\n     }\n "}]}