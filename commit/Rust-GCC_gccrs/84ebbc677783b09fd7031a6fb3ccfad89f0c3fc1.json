{"sha": "84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRlYmJjNjc3NzgzYjA5ZmQ3MDMxYTZmYjNjY2ZhZDg5ZjBjM2ZjMQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-02T14:27:33Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-02T14:27:33Z"}, "message": "Connection.java: Some reformating.\n\n2003-12-02  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/protocol/file/Connection.java:\n\tSome reformating.\n\t(file): Renamed from fileIn.\n\t(getPermission): Moved around.\n\nFrom-SVN: r74179", "tree": {"sha": "40184d405e0b64e30b59a09dd672d576bda5df6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40184d405e0b64e30b59a09dd672d576bda5df6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1/comments", "author": null, "committer": null, "parents": [{"sha": "83f85f9c8d2895d8ee4e8e515894251aedfa7acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f85f9c8d2895d8ee4e8e515894251aedfa7acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f85f9c8d2895d8ee4e8e515894251aedfa7acf"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "3e9b3d517d2a28a048fd51436efda519e64c74e6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1", "patch": "@@ -1,3 +1,10 @@\n+2003-12-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/protocol/file/Connection.java:\n+\tSome reformating.\n+\t(file): Renamed from fileIn.\n+\t(getPermission): Moved around.\n+\n 2003-12-02  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/protocol/jar/Connection.java"}, {"sha": "fcae745e1308254b90ae98b1eb10165def9d5ac7", "filename": "libjava/gnu/java/net/protocol/file/Connection.java", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java?ref=84ebbc677783b09fd7031a6fb3ccfad89f0c3fc1", "patch": "@@ -74,7 +74,7 @@ public class Connection extends URLConnection\n   /**\n    * This is a File object for this connection\n    */\n-  private File fileIn;\n+  private File file;\n \n   /**\n    * InputStream if we are reading from the file\n@@ -115,11 +115,12 @@ public void connect() throws IOException\n       return;\n     \n     // If not connected, then file needs to be openned.\n-    fileIn = new File(getURL().getFile());\n+    file = new File (getURL().getFile());\n     if (doInput)\n-      inputStream = new BufferedInputStream(new FileInputStream(fileIn));\n+      inputStream = new BufferedInputStream(new FileInputStream(file));\n+    \n     if (doOutput)\n-      outputStream = new BufferedOutputStream(new FileOutputStream(fileIn));\n+      outputStream = new BufferedOutputStream(new FileOutputStream(file));\n     \n     connected = true;\n   }\n@@ -134,8 +135,9 @@ public void connect() throws IOException\n   public InputStream getInputStream()\n     throws IOException\n   {\n-    if (! doInput)\n+    if (!doInput)\n       throw new ProtocolException(\"Can't open InputStream if doInput is false\");\n+    \n     if (!connected)\n       connect();\n     \n@@ -152,7 +154,7 @@ public InputStream getInputStream()\n   public OutputStream getOutputStream()\n     throws IOException\n   {\n-    if (! doOutput)\n+    if (!doOutput)\n       throw new\n \tProtocolException(\"Can't open OutputStream if doOutput is false\");\n \n@@ -163,6 +165,19 @@ public OutputStream getOutputStream()\n   }\n \n   // Override default method in URLConnection.\n+  /**\n+   * This method returns a <code>Permission</code> object representing the\n+   * permissions required to access this URL.  This method returns a\n+   * <code>java.io.FilePermission</code> for the file's path with a read\n+   * permission.\n+   *\n+   * @return A Permission object\n+   */\n+  public Permission getPermission() throws IOException\n+  {\n+    return permission;\n+  }\n+\n   public String getHeaderField(String name)\n   {\n     try\n@@ -176,7 +191,6 @@ public String getHeaderField(String name)\n     return (String) hdrHash.get(name.toLowerCase());\n   }\n \n-  // Override default method in URLConnection.\n   public Map getHeaderFields()\n   {\n     try\n@@ -190,7 +204,6 @@ public Map getHeaderFields()\n     return hdrHash;\n   }\n \n-  // Override default method in URLConnection.\n   public String getHeaderField(int n)\n   {\n     try\n@@ -207,7 +220,6 @@ public String getHeaderField(int n)\n     return null;\n   }\n \n-  // Override default method in URLConnection.\n   public String getHeaderFieldKey(int n)\n   {\n     try\n@@ -259,7 +271,7 @@ private void getHeaders() throws IOException\n     // to add others later and for consistency, we'll implement it this way.\n \n     // Add the only header we know about right now:  Content-length.\n-    long len = fileIn.length();\n+    long len = file.length();\n     String line = \"Content-length: \" + len;\n     hdrVec.addElement(line);\n \n@@ -269,18 +281,5 @@ private void getHeaders() throws IOException\n     String key = getKey(line);\n     hdrHash.put(key.toLowerCase(), Long.toString(len));\n   }\n-  \n-  /**\n-   * This method returns a <code>Permission</code> object representing the\n-   * permissions required to access this URL.  This method returns a\n-   * <code>java.io.FilePermission</code> for the file's path with a read\n-   * permission.\n-   *\n-   * @return A Permission object\n-   */\n-  public Permission getPermission() throws IOException\n-  {\n-    return permission;\n-  }\n \n } // class FileURLConnection"}]}