{"sha": "6bd42365fa2f46430fe933deaecd879857415fc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJkNDIzNjVmYTJmNDY0MzBmZTkzM2RlYWVjZDg3OTg1NzQxNWZjNA==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-07T20:48:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-07T20:48:23Z"}, "message": "Merge #612\n\n612: Turn Session Manager into basic singleton r=philberty a=CohenArthur\n\nThis PR changes the behavior of the compiler's session manager: Instead of keeping a single static instance in `rust-lang.cc`, the class now exposes a static instance via a `get_instance()` method. This is important for external module parsing as a new lexer and parser need to be instantiated during macro expansion, and a lexer must rely on a linemap, of which a single instance exists and is contained in the `Session` instance.\r\n\r\nI ran into a few issues trying to make this a bit smarter (for example, by calling `init()` on the first `get_instance()` invocation) because I ran into a race condition. I haven't looked into it, but it seems that the calls to the various language hooks are sometimes multithreaded.\n\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>", "tree": {"sha": "35fd86815e299c395b22f7d8beb4abc75a3ed965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35fd86815e299c395b22f7d8beb4abc75a3ed965"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bd42365fa2f46430fe933deaecd879857415fc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhDvGXCRBK7hj4Ov3rIwAAwVMIAGfQkcGVjdg+Bd1eUxp3GZ1S\nBGpxKndCIo3uGxKykGuNNju/IZhnG2Bk2S1GCBCkVq1xUBhcW0Zf60ApCFXCDPdx\nN841DIL0NH2Oa7RrNOIdBfjSbK8ACMfmPYaRD9oe8TCtxqkTPv1OnN6fLykJJzWg\nesaDNkF4pgkMUL8+wsV9Fon99okp/SAPgx8wEeNw1Y51xkGcolKZt0BWE+kAxBX1\nGjF8m5M7DOsGD35JU8flAs1pK+yluGb4yLkgHWub0wnuxdj6zoDjSbdypMTfIEmp\nRwCZfuI73sRRJ4BsLT/eiTBHieG6PBUtrtndwGIdv8RyCgDppRutgPLhB1SCFjg=\n=15HR\n-----END PGP SIGNATURE-----\n", "payload": "tree 35fd86815e299c395b22f7d8beb4abc75a3ed965\nparent f44e5cf628b6306ebbb305d80a025eb12b76ccca\nparent d80f411c8ad4c19c9db4e03c3a7ceca8507dc391\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628369303 +0000\ncommitter GitHub <noreply@github.com> 1628369303 +0000\n\nMerge #612\n\n612: Turn Session Manager into basic singleton r=philberty a=CohenArthur\n\nThis PR changes the behavior of the compiler's session manager: Instead of keeping a single static instance in `rust-lang.cc`, the class now exposes a static instance via a `get_instance()` method. This is important for external module parsing as a new lexer and parser need to be instantiated during macro expansion, and a lexer must rely on a linemap, of which a single instance exists and is contained in the `Session` instance.\r\n\r\nI ran into a few issues trying to make this a bit smarter (for example, by calling `init()` on the first `get_instance()` invocation) because I ran into a race condition. I haven't looked into it, but it seems that the calls to the various language hooks are sometimes multithreaded.\n\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd42365fa2f46430fe933deaecd879857415fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd42365fa2f46430fe933deaecd879857415fc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd42365fa2f46430fe933deaecd879857415fc4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f44e5cf628b6306ebbb305d80a025eb12b76ccca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44e5cf628b6306ebbb305d80a025eb12b76ccca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44e5cf628b6306ebbb305d80a025eb12b76ccca"}, {"sha": "d80f411c8ad4c19c9db4e03c3a7ceca8507dc391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80f411c8ad4c19c9db4e03c3a7ceca8507dc391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80f411c8ad4c19c9db4e03c3a7ceca8507dc391"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "462e8344514a34ba546ea6be513188bf0d63335d", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd42365fa2f46430fe933deaecd879857415fc4/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd42365fa2f46430fe933deaecd879857415fc4/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=6bd42365fa2f46430fe933deaecd879857415fc4", "patch": "@@ -97,14 +97,12 @@ struct GTY (()) language_function\n   int dummy;\n };\n \n-// Kinda HACK-ish - store parsing session as static variable\n-static Rust::Session session;\n-\n // has to be in same compilation unit as session, so here for now\n void\n rust_add_target_info (const char *key, const char *value)\n {\n-  session.options.target_data.insert_key_value_pair (key, value);\n+  Rust::Session::get_instance ().options.target_data.insert_key_value_pair (\n+    key, value);\n }\n \n /* Language hooks.  */\n@@ -136,7 +134,7 @@ grs_langhook_init (void)\n   using_eh_for_cleanups ();\n \n   // initialise compiler session\n-  session.init ();\n+  Rust::Session::get_instance ().init ();\n \n   return true;\n }\n@@ -154,7 +152,7 @@ static void\n grs_langhook_init_options_struct (struct gcc_options * /* opts */)\n {\n   // nothing yet - used by frontends to change specific options for the language\n-  session.init_options ();\n+  Rust::Session::get_instance ().init_options ();\n }\n \n /* Main entry point for front-end, apparently. Finds input file names in global\n@@ -168,7 +166,7 @@ grs_langhook_parse_file (void)\n {\n   rust_debug (\"Preparing to parse files. \");\n \n-  session.parse_files (num_in_fnames, in_fnames);\n+  Rust::Session::get_instance ().parse_files (num_in_fnames, in_fnames);\n }\n \n /* Seems to get the exact type for a specific type - e.g. for scalar float with\n@@ -294,7 +292,8 @@ grs_langhook_handle_option (\n   // bool ret = true;\n \n   // delegate to session manager\n-  return session.handle_option (code, arg, value, kind, loc, handlers);\n+  return Rust::Session::get_instance ().handle_option (code, arg, value, kind,\n+\t\t\t\t\t\t       loc, handlers);\n \n   // Handles options as listed in lang.opt.\n   /*switch (code) {"}, {"sha": "4c2a7a7a4eeca1f54e094880e65c2e553f19d4fe", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd42365fa2f46430fe933deaecd879857415fc4/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd42365fa2f46430fe933deaecd879857415fc4/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=6bd42365fa2f46430fe933deaecd879857415fc4", "patch": "@@ -221,16 +221,33 @@ struct Session\n   Linemap *linemap;\n \n public:\n-  /* Initialise compiler session. Corresponds to langhook grs_langhook_init().\n-   * Note that this is called after option handling. */\n+  /* Get a reference to the static session instance */\n+  static Session &get_instance ()\n+  {\n+    static Session instance;\n+\n+    return instance;\n+  }\n+\n+  ~Session () = default;\n+\n+  /* This initializes the compiler session. Corresponds to langhook\n+   * grs_langhook_init(). Note that this is called after option handling. */\n   void init ();\n+\n+  // delete those constructors so we don't access the singleton in any\n+  // other way than via `get_instance()`\n+  Session (Session const &) = delete;\n+  void operator= (Session const &) = delete;\n+\n   bool handle_option (enum opt_code code, const char *arg, HOST_WIDE_INT value,\n \t\t      int kind, location_t loc,\n \t\t      const struct cl_option_handlers *handlers);\n   void parse_files (int num_files, const char **files);\n   void init_options ();\n \n private:\n+  Session () = default;\n   void parse_file (const char *filename);\n   bool enable_dump (std::string arg);\n "}]}