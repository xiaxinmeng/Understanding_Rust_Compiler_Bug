{"sha": "8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYxY2I3MGQ3Y2E2YThkYTdmNmJjN2Y0M2ZiNWU3NThjMGNlODhiNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-08T11:28:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-08T11:28:25Z"}, "message": "i386: Fix -mcmodel= vs. target attribute [PR98585]\n\nMy patch to save/restore opts_set rather than essentially treating\nglobal_options_set as a logical or whether some option has ever been\nexplicitly set somewhere apparently broke -mcmodel= vs. target attribute\n(and as the patch shows some other options too).\nThe thing is, at least for options for which we ever test opts_set->x_*\nor global_options_set.x_*, we need to save/restore them next to the\nsaving/restoring of the actual option values.\nIf an option has Save keyword or in case of TargetVariable, it is the\ngeneric code that handles the saving and restoring of both the option\nand corresponding opts_set flag automatically, for other variables\n(TargetSave, or Target without Save) the backend needs to do that in the\ntarget hook manually and in that case should save/restore both the option\nvalues (the hooks mostly did that) and opts_set (they didn't).\n\nAs it seems much easier to let the automatic saving/restoring do the work\nfor us unless the saving/restoring of the option needs some specific magic,\nthe following patch is a result of grepping through the backend for\nopts_set->x_ and global_options_set.x_ and for all such referenced\nvariables, grepping whether it is saved/restored including opts_set properly\nin the generated options-save.c or not.\n\n2021-01-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/98585\n\t* config/i386/i386.opt (ix86_cmodel, ix86_incoming_stack_boundary_arg,\n\tix86_pmode, ix86_preferred_stack_boundary_arg, ix86_regparm,\n\tix86_veclibabi_type): Remove x_ prefix, use TargetVariable instead of\n\tTargetSave and initialize for variables with enum types.\n\t(mfentry, mstack-protector-guard-reg=, mstack-protector-guard-offset=,\n\tmstack-protector-guard-symbol=): Add Save.\n\t* config/i386/i386-options.c (ix86_function_specific_save,\n\tix86_function_specific_restore): Don't save or restore x_ix86_cmodel,\n\tx_ix86_incoming_stack_boundary_arg, x_ix86_pmode,\n\tx_ix86_preferred_stack_boundary_arg, x_ix86_regparm,\n\tx_ix86_veclibabi_type.\n\n\t* gcc.target/i386/pr98585.c: New test.", "tree": {"sha": "c15348645d4133088d2f387b7a44cb518da8293f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c15348645d4133088d2f387b7a44cb518da8293f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fe3e6bf061da8d9b0e759927c340fe8e0f44725"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "6afd7a9b1f2c2f7b3b57cff4b0ec9c1c2a5ae69e", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5", "patch": "@@ -651,18 +651,13 @@ ix86_function_specific_save (struct cl_target_option *ptr,\n   ptr->x_recip_mask_explicit = opts->x_recip_mask_explicit;\n   ptr->x_ix86_arch_string = opts->x_ix86_arch_string;\n   ptr->x_ix86_tune_string = opts->x_ix86_tune_string;\n-  ptr->x_ix86_cmodel = opts->x_ix86_cmodel;\n   ptr->x_ix86_abi = opts->x_ix86_abi;\n   ptr->x_ix86_asm_dialect = opts->x_ix86_asm_dialect;\n   ptr->x_ix86_branch_cost = opts->x_ix86_branch_cost;\n   ptr->x_ix86_dump_tunes = opts->x_ix86_dump_tunes;\n   ptr->x_ix86_force_align_arg_pointer = opts->x_ix86_force_align_arg_pointer;\n   ptr->x_ix86_force_drap = opts->x_ix86_force_drap;\n-  ptr->x_ix86_incoming_stack_boundary_arg = opts->x_ix86_incoming_stack_boundary_arg;\n-  ptr->x_ix86_pmode = opts->x_ix86_pmode;\n-  ptr->x_ix86_preferred_stack_boundary_arg = opts->x_ix86_preferred_stack_boundary_arg;\n   ptr->x_ix86_recip_name = opts->x_ix86_recip_name;\n-  ptr->x_ix86_regparm = opts->x_ix86_regparm;\n   ptr->x_ix86_section_threshold = opts->x_ix86_section_threshold;\n   ptr->x_ix86_sse2avx = opts->x_ix86_sse2avx;\n   ptr->x_ix86_stack_protector_guard = opts->x_ix86_stack_protector_guard;\n@@ -672,7 +667,6 @@ ix86_function_specific_save (struct cl_target_option *ptr,\n   ptr->x_ix86_tune_memcpy_strategy = opts->x_ix86_tune_memcpy_strategy;\n   ptr->x_ix86_tune_memset_strategy = opts->x_ix86_tune_memset_strategy;\n   ptr->x_ix86_tune_no_default = opts->x_ix86_tune_no_default;\n-  ptr->x_ix86_veclibabi_type = opts->x_ix86_veclibabi_type;\n \n   /* The fields are char but the variables are not; make sure the\n      values fit in the fields.  */\n@@ -788,18 +782,13 @@ ix86_function_specific_restore (struct gcc_options *opts,\n   opts->x_recip_mask_explicit = ptr->x_recip_mask_explicit;\n   opts->x_ix86_arch_string = ptr->x_ix86_arch_string;\n   opts->x_ix86_tune_string = ptr->x_ix86_tune_string;\n-  opts->x_ix86_cmodel = ptr->x_ix86_cmodel;\n   opts->x_ix86_abi = ptr->x_ix86_abi;\n   opts->x_ix86_asm_dialect = ptr->x_ix86_asm_dialect;\n   opts->x_ix86_branch_cost = ptr->x_ix86_branch_cost;\n   opts->x_ix86_dump_tunes = ptr->x_ix86_dump_tunes;\n   opts->x_ix86_force_align_arg_pointer = ptr->x_ix86_force_align_arg_pointer;\n   opts->x_ix86_force_drap = ptr->x_ix86_force_drap;\n-  opts->x_ix86_incoming_stack_boundary_arg = ptr->x_ix86_incoming_stack_boundary_arg;\n-  opts->x_ix86_pmode = ptr->x_ix86_pmode;\n-  opts->x_ix86_preferred_stack_boundary_arg = ptr->x_ix86_preferred_stack_boundary_arg;\n   opts->x_ix86_recip_name = ptr->x_ix86_recip_name;\n-  opts->x_ix86_regparm = ptr->x_ix86_regparm;\n   opts->x_ix86_section_threshold = ptr->x_ix86_section_threshold;\n   opts->x_ix86_sse2avx = ptr->x_ix86_sse2avx;\n   opts->x_ix86_stack_protector_guard = ptr->x_ix86_stack_protector_guard;\n@@ -809,7 +798,6 @@ ix86_function_specific_restore (struct gcc_options *opts,\n   opts->x_ix86_tune_memcpy_strategy = ptr->x_ix86_tune_memcpy_strategy;\n   opts->x_ix86_tune_memset_strategy = ptr->x_ix86_tune_memset_strategy;\n   opts->x_ix86_tune_no_default = ptr->x_ix86_tune_no_default;\n-  opts->x_ix86_veclibabi_type = ptr->x_ix86_veclibabi_type;\n   ix86_tune_cost = processor_cost_table[ix86_tune];\n   /* TODO: ix86_cost should be chosen at instruction or function granuality\n      so for cold code we use size_cost even in !optimize_size compilation.  */"}, {"sha": "c781fdc82780931f627992ba1da99737a2743546", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5", "patch": "@@ -105,8 +105,8 @@ TargetSave\n unsigned char arch_specified\n \n ;; -mcmodel= model\n-TargetSave\n-enum cmodel x_ix86_cmodel\n+TargetVariable\n+enum cmodel ix86_cmodel = CM_32\n \n ;; -mabi=\n TargetSave\n@@ -133,24 +133,24 @@ TargetSave\n int x_ix86_force_drap\n \n ;; -mincoming-stack-boundary=\n-TargetSave\n-int x_ix86_incoming_stack_boundary_arg\n+TargetVariable\n+int ix86_incoming_stack_boundary_arg\n \n ;; -maddress-mode=\n-TargetSave\n-enum pmode x_ix86_pmode\n+TargetVariable\n+enum pmode ix86_pmode = PMODE_SI\n \n ;; -mpreferred-stack-boundary=\n-TargetSave\n-int x_ix86_preferred_stack_boundary_arg\n+TargetVariable\n+int ix86_preferred_stack_boundary_arg\n \n ;; -mrecip=\n TargetSave\n const char *x_ix86_recip_name\n \n ;; -mregparm=\n-TargetSave\n-int x_ix86_regparm\n+TargetVariable\n+int ix86_regparm\n \n ;; -mlarge-data-threshold=\n TargetSave\n@@ -189,8 +189,8 @@ TargetSave\n int x_ix86_tune_no_default\n \n ;; -mveclibabi=\n-TargetSave\n-enum ix86_veclibabi x_ix86_veclibabi_type\n+TargetVariable\n+enum ix86_veclibabi ix86_veclibabi_type = ix86_veclibabi_type_none\n \n ;; x86 options\n m128bit-long-double\n@@ -934,7 +934,7 @@ Target Mask(ISA_PREFETCHWT1) Var(ix86_isa_flags) Save\n Support PREFETCHWT1 built-in functions and code generation.\n \n mfentry\n-Target Var(flag_fentry)\n+Target Save Var(flag_fentry)\n Emit profiling counter call at function entry before prologue.\n \n mrecord-mcount\n@@ -1005,21 +1005,21 @@ EnumValue\n Enum(stack_protector_guard) String(global) Value(SSP_GLOBAL)\n \n mstack-protector-guard-reg=\n-Target RejectNegative Joined Var(ix86_stack_protector_guard_reg_str)\n+Target Save RejectNegative Joined Var(ix86_stack_protector_guard_reg_str)\n Use the given base register for addressing the stack-protector guard.\n \n TargetVariable\n addr_space_t ix86_stack_protector_guard_reg = ADDR_SPACE_GENERIC\n \n mstack-protector-guard-offset=\n-Target RejectNegative Joined Integer Var(ix86_stack_protector_guard_offset_str)\n+Target Save RejectNegative Joined Integer Var(ix86_stack_protector_guard_offset_str)\n Use the given offset for addressing the stack-protector guard.\n \n TargetVariable\n HOST_WIDE_INT ix86_stack_protector_guard_offset = 0\n \n mstack-protector-guard-symbol=\n-Target RejectNegative Joined Integer Var(ix86_stack_protector_guard_symbol_str)\n+Target Save RejectNegative Joined Integer Var(ix86_stack_protector_guard_symbol_str)\n Use the given symbol for addressing the stack-protector guard.\n \n mmitigate-rop"}, {"sha": "18325f5b96d4b8fcef15711f022932bdc98677ab", "filename": "gcc/testsuite/gcc.target/i386/pr98585.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98585.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98585.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98585.c?ref=8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/98585 */\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mcmodel=large -masm=att\" } */\n+/* { dg-final { scan-assembler \"movabs\\[^\\n\\r]*bar\" } } */\n+\n+void bar (void);\n+\n+void\n+__attribute__ ((target (\"bmi2\")))\n+foo()\n+{\n+  bar ();\n+}"}]}