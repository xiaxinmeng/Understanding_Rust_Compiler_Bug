{"sha": "d0c6176a4d095eb8959c89b31c9d91e46ca31af4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBjNjE3NmE0ZDA5NWViODk1OWM4OWIzMWM5ZDkxZTQ2Y2EzMWFmNA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-20T03:36:09Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-20T03:36:09Z"}, "message": "(choose_hard_reg_mode): Delete from here.\n\nFrom-SVN: r7086", "tree": {"sha": "729863bb957c63dfc3ae1b11579a3ef0d962be13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/729863bb957c63dfc3ae1b11579a3ef0d962be13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0c6176a4d095eb8959c89b31c9d91e46ca31af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c6176a4d095eb8959c89b31c9d91e46ca31af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0c6176a4d095eb8959c89b31c9d91e46ca31af4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c6176a4d095eb8959c89b31c9d91e46ca31af4/comments", "author": null, "committer": null, "parents": [{"sha": "bf76bb5a496033fb436d662fd2fb3649dace3aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf76bb5a496033fb436d662fd2fb3649dace3aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf76bb5a496033fb436d662fd2fb3649dace3aa2"}], "stats": {"total": 41, "additions": 0, "deletions": 41}, "files": [{"sha": "c0aafec0654939d89d76ac830db6dfcc7eea2910", "filename": "gcc/caller-save.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c6176a4d095eb8959c89b31c9d91e46ca31af4/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c6176a4d095eb8959c89b31c9d91e46ca31af4/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=d0c6176a4d095eb8959c89b31c9d91e46ca31af4", "patch": "@@ -77,53 +77,12 @@ static HARD_REG_SET hard_regs_need_restore;\n \n int n_regs_saved;\n \n-static enum machine_mode choose_hard_reg_mode PROTO((int, int));\n static void set_reg_live\t\tPROTO((rtx, rtx));\n static void clear_reg_live\t\tPROTO((rtx));\n static void restore_referenced_regs\tPROTO((rtx, rtx, enum machine_mode));\n static int insert_save_restore\t\tPROTO((rtx, int, int,\n \t\t\t\t\t       enum machine_mode, int));\n \f\n-/* Return a machine mode that is legitimate for hard reg REGNO and large\n-   enough to save nregs.  If we can't find one, return VOIDmode.  */\n-\n-static enum machine_mode\n-choose_hard_reg_mode (regno, nregs)\n-     int regno;\n-     int nregs;\n-{\n-  enum machine_mode found_mode = VOIDmode, mode;\n-\n-  /* We first look for the largest integer mode that can be validly\n-     held in REGNO.  If none, we look for the largest floating-point mode.\n-     If we still didn't find a valid mode, try CCmode.  */\n-\n-  for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT); mode != VOIDmode;\n-       mode = GET_MODE_WIDER_MODE (mode))\n-    if (HARD_REGNO_NREGS (regno, mode) == nregs\n-\t&& HARD_REGNO_MODE_OK (regno, mode))\n-      found_mode = mode;\n-\n-  if (found_mode != VOIDmode)\n-    return found_mode;\n-\n-  for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT); mode != VOIDmode;\n-       mode = GET_MODE_WIDER_MODE (mode))\n-    if (HARD_REGNO_NREGS (regno, mode) == nregs\n-\t&& HARD_REGNO_MODE_OK (regno, mode))\n-      found_mode = mode;\n-\n-  if (found_mode != VOIDmode)\n-    return found_mode;\n-\n-  if (HARD_REGNO_NREGS (regno, CCmode) == nregs\n-      && HARD_REGNO_MODE_OK (regno, CCmode))\n-    return CCmode;\n-\n-  /* We can't find a mode valid for this register.  */\n-  return VOIDmode;\n-}\n-\f\n /* Initialize for caller-save.\n \n    Look at all the hard registers that are used by a call and for which"}]}