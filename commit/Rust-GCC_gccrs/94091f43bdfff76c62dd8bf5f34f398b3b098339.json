{"sha": "94091f43bdfff76c62dd8bf5f34f398b3b098339", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwOTFmNDNiZGZmZjc2YzYyZGQ4YmY1ZjM0ZjM5OGIzYjA5ODMzOQ==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2015-01-27T15:26:16Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-01-27T15:26:16Z"}, "message": "extend.texi: s/390: Update documentation of hotpatch attribute.\n\n2015-01-27  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n        * doc/extend.texi: s/390: Update documentation of hotpatch attribute.\n        * doc/invoke.texi (-mhotpatch): s/390: Update documentation of\n        -mhotpatch= option.\n        * config/s390/s390.opt (mhotpatch): s/390: Remove -mhotpatch and\n        -mno-hotpatch options.  Change syntax of -mhotpatch= option.\n        * config/s390/s390.c (s390_hotpatch_trampoline_halfwords_default):\n        Renamed.\n        (s390_hotpatch_trampoline_halfwords_max): Renamed.\n        (s390_hotpatch_hw_max): New name.\n        (s390_hotpatch_trampoline_halfwords): Renamed.\n        (s390_hotpatch_hw_before_label): New name.\n        (get_hotpatch_attribute): Removed.\n        (s390_hotpatch_hw_after_label): New name.\n        (s390_handle_hotpatch_attribute): Add second parameter to hotpatch\n        attribute.\n        (s390_attribute_table): Ditto.\n        (s390_function_num_hotpatch_trampoline_halfwords): Renamed.\n        (s390_function_num_hotpatch_hw): New name.\n        Remove special handling of inline functions and hotpatching.\n        Return number of nops before and after the function label.\n        (s390_can_inline_p): Removed.\n        (s390_asm_output_function_label): Emit a configurable number of nops\n        after the function label.\n        (s390_option_override): Update -mhotpatch= syntax and remove -mhotpatch.\n        (TARGET_CAN_INLINE_P) Removed.\n        (TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P): New.\n\n2015-01-27  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* gcc/testsuite/gcc.target/s390/hotpatch-13.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-14.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-15.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-16.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-17.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-18.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-19.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-20.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-10.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-11.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-12.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-13.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-14.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-15.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-16.c: New testcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-9.c: New\n\ttestcase.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-1.c: Testcase adjusted to\n\tnew -mhotpatch.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-10.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-11.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-12.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-2.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-3.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-4.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-5.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-6.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-7.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-8.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-9.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-1.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-2.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-3.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-4.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-5.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-6.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-7.c: Likewise.\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-8.c: Likewise.\n\nFrom-SVN: r220171", "tree": {"sha": "a1c5782a32da1d398c8b0000925e92397ee0b003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1c5782a32da1d398c8b0000925e92397ee0b003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94091f43bdfff76c62dd8bf5f34f398b3b098339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94091f43bdfff76c62dd8bf5f34f398b3b098339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94091f43bdfff76c62dd8bf5f34f398b3b098339", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94091f43bdfff76c62dd8bf5f34f398b3b098339/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20"}], "stats": {"total": 1006, "additions": 602, "deletions": 404}, "files": [{"sha": "3f7164d21cc46d8fbceef691f4ed6afe11e764c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,3 +1,32 @@\n+2015-01-27  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+        * doc/extend.texi: s/390: Update documentation of hotpatch attribute.\n+        * doc/invoke.texi (-mhotpatch): s/390: Update documentation of\n+        -mhotpatch= option.\n+        * config/s390/s390.opt (mhotpatch): s/390: Remove -mhotpatch and\n+        -mno-hotpatch options.  Change syntax of -mhotpatch= option.\n+        * config/s390/s390.c (s390_hotpatch_trampoline_halfwords_default):\n+        Renamed.\n+        (s390_hotpatch_trampoline_halfwords_max): Renamed.\n+        (s390_hotpatch_hw_max): New name.\n+        (s390_hotpatch_trampoline_halfwords): Renamed.\n+        (s390_hotpatch_hw_before_label): New name.\n+        (get_hotpatch_attribute): Removed.\n+        (s390_hotpatch_hw_after_label): New name.\n+        (s390_handle_hotpatch_attribute): Add second parameter to hotpatch\n+        attribute.\n+        (s390_attribute_table): Ditto.\n+        (s390_function_num_hotpatch_trampoline_halfwords): Renamed.\n+        (s390_function_num_hotpatch_hw): New name.\n+        Remove special handling of inline functions and hotpatching.\n+        Return number of nops before and after the function label.\n+        (s390_can_inline_p): Removed.\n+        (s390_asm_output_function_label): Emit a configurable number of nops\n+        after the function label.\n+        (s390_option_override): Update -mhotpatch= syntax and remove -mhotpatch.\n+        (TARGET_CAN_INLINE_P) Removed.\n+        (TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P): New.\n+\n 2015-01-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \t    Jiong Wang  <jiong.wang@arm.com>\n "}, {"sha": "1a3809d17bb60f784d9b7e5ce941a04deda4fff0", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 125, "deletions": 102, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -460,24 +460,9 @@ struct GTY(()) machine_function\n    bytes on a z10 (or higher) CPU.  */\n #define PREDICT_DISTANCE (TARGET_Z10 ? 384 : 2048)\n \n-static const int s390_hotpatch_trampoline_halfwords_default = 12;\n-static const int s390_hotpatch_trampoline_halfwords_max = 1000000;\n-static int s390_hotpatch_trampoline_halfwords = -1;\n-\n-/* Return the argument of the given hotpatch attribute or the default value if\n-   no argument is present.  */\n-\n-static inline int\n-get_hotpatch_attribute (tree hotpatch_attr)\n-{\n-  const_tree args;\n-\n-  args = TREE_VALUE (hotpatch_attr);\n-\n-  return (args) ?\n-    TREE_INT_CST_LOW (TREE_VALUE (args)):\n-    s390_hotpatch_trampoline_halfwords_default;\n-}\n+static const int s390_hotpatch_hw_max = 1000000;\n+static int s390_hotpatch_hw_before_label = 0;\n+static int s390_hotpatch_hw_after_label = 0;\n \n /* Check whether the hotpatch attribute is applied to a function and, if it has\n    an argument, the argument is valid.  */\n@@ -486,32 +471,46 @@ static tree\n s390_handle_hotpatch_attribute (tree *node, tree name, tree args,\n \t\t\t\tint flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n+  tree expr;\n+  tree expr2;\n+  int err;\n+\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n       warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n \t       name);\n       *no_add_attrs = true;\n     }\n-  else if (args)\n+  if (args != NULL && TREE_CHAIN (args) != NULL)\n+    {\n+      expr = TREE_VALUE (args);\n+      expr2 = TREE_VALUE (TREE_CHAIN (args));\n+    }\n+  if (args == NULL || TREE_CHAIN (args) == NULL)\n+    err = 1;\n+  else if (TREE_CODE (expr) != INTEGER_CST\n+\t   || !INTEGRAL_TYPE_P (TREE_TYPE (expr))\n+\t   || wi::gtu_p (expr, s390_hotpatch_hw_max))\n+    err = 1;\n+  else if (TREE_CODE (expr2) != INTEGER_CST\n+\t   || !INTEGRAL_TYPE_P (TREE_TYPE (expr2))\n+\t   || wi::gtu_p (expr2, s390_hotpatch_hw_max))\n+    err = 1;\n+  else\n+    err = 0;\n+  if (err)\n     {\n-      tree expr = TREE_VALUE (args);\n-\n-      if (TREE_CODE (expr) != INTEGER_CST\n-\t  || !INTEGRAL_TYPE_P (TREE_TYPE (expr))\n-\t  || wi::gtu_p (expr, s390_hotpatch_trampoline_halfwords_max))\n-\t{\n-\t  error (\"requested %qE attribute is not a non-negative integer\"\n-\t\t \" constant or too large (max. %d)\", name,\n-\t\t s390_hotpatch_trampoline_halfwords_max);\n-\t  *no_add_attrs = true;\n-\t}\n+      error (\"requested %qE attribute is not a comma separated pair of\"\n+\t     \" non-negative integer constants or too large (max. %d)\", name,\n+\t     s390_hotpatch_hw_max);\n+      *no_add_attrs = true;\n     }\n \n   return NULL_TREE;\n }\n \n static const struct attribute_spec s390_attribute_table[] = {\n-  { \"hotpatch\", 0, 1, true, false, false, s390_handle_hotpatch_attribute, false\n+  { \"hotpatch\", 2, 2, true, false, false, s390_handle_hotpatch_attribute, false\n   },\n   /* End element.  */\n   { NULL,        0, 0, false, false, false, NULL, false }\n@@ -5235,53 +5234,51 @@ print_shift_count_operand (FILE *file, rtx op)\n     fprintf (file, \"(%s)\", reg_names[REGNO (base)]);\n }\n \n-/* Returns -1 if the function should not be made hotpatchable.  Otherwise it\n-   returns a number >= 0 that is the desired size of the hotpatch trampoline\n-   in halfwords. */\n+/* Returns false if the function should not be made hotpatchable.\n+   Otherwise it assigns the number of NOP halfwords to be emitted\n+   before and after the function label to hw_before and hw_after.\n+   Both must not be NULL.  */\n \n-static int s390_function_num_hotpatch_trampoline_halfwords (tree decl,\n-\t\t\t\t\t\t\t    bool do_warn)\n+static bool\n+s390_function_num_hotpatch_hw (tree decl,\n+\t\t\t       int *hw_before,\n+\t\t\t       int *hw_after)\n {\n   tree attr;\n \n-  if (DECL_DECLARED_INLINE_P (decl)\n-      || DECL_ARTIFICIAL (decl)\n-      || MAIN_NAME_P (DECL_NAME (decl)))\n+  *hw_before = 0;\n+  *hw_after = 0;\n+\n+  attr = lookup_attribute (\"hotpatch\", DECL_ATTRIBUTES (decl));\n+\n+  /* Handle the arguments of the hotpatch attribute.  The values\n+     specified via attribute might override the cmdline argument\n+     values.  */\n+  if (attr)\n     {\n-      /* - Explicitly inlined functions cannot be hotpatched.\n-\t - Artificial functions need not be hotpatched.\n-\t - Making the main function hotpatchable is useless. */\n-      return -1;\n+      tree args = TREE_VALUE (attr);\n+\n+      *hw_before = TREE_INT_CST_LOW (TREE_VALUE (args));\n+      *hw_after = TREE_INT_CST_LOW (TREE_VALUE (TREE_CHAIN (args)));\n     }\n-  attr = lookup_attribute (\"hotpatch\", DECL_ATTRIBUTES (decl));\n-  if (attr || s390_hotpatch_trampoline_halfwords >= 0)\n+  else\n     {\n-      if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (decl)))\n-\t{\n-\t  if (do_warn)\n-\t    warning (OPT_Wattributes, \"function %qE with the %qs attribute\"\n-\t\t     \" is not hotpatchable\", DECL_NAME (decl), \"always_inline\");\n-\t  return -1;\n-\t}\n-      else\n-\t{\n-\t  return (attr) ?\n-\t    get_hotpatch_attribute (attr) : s390_hotpatch_trampoline_halfwords;\n-\t}\n+      /* Use the values specified by the cmdline arguments.  */\n+      *hw_before = s390_hotpatch_hw_before_label;\n+      *hw_after = s390_hotpatch_hw_after_label;\n     }\n \n-  return -1;\n-}\n-\n-/* Hook to determine if one function can safely inline another.  */\n-\n-static bool\n-s390_can_inline_p (tree caller, tree callee)\n-{\n-  if (s390_function_num_hotpatch_trampoline_halfwords (callee, false) >= 0)\n+  if (*hw_before == 0 && *hw_after == 0)\n     return false;\n \n-  return default_target_can_inline_p (caller, callee);\n+  if (decl_function_context (decl) != NULL_TREE)\n+    {\n+      warning_at (DECL_SOURCE_LOCATION (decl), OPT_mhotpatch_,\n+\t\t  \"hotpatching is not compatible with nested functions\");\n+      return false;\n+    }\n+\n+  return true;\n }\n \n /* Write the extra assembler code needed to declare a function properly.  */\n@@ -5290,29 +5287,20 @@ void\n s390_asm_output_function_label (FILE *asm_out_file, const char *fname,\n \t\t\t\ttree decl)\n {\n-  int hotpatch_trampoline_halfwords = -1;\n+  int hw_before, hw_after;\n+  bool hotpatch_p = (decl\n+\t\t     ? s390_function_num_hotpatch_hw (decl,\n+\t\t\t\t\t\t      &hw_before, &hw_after)\n+\t\t     : false);\n \n-  if (decl)\n-    {\n-      hotpatch_trampoline_halfwords =\n-\ts390_function_num_hotpatch_trampoline_halfwords (decl, true);\n-      if (hotpatch_trampoline_halfwords >= 0\n-\t  && decl_function_context (decl) != NULL_TREE)\n-\t{\n-\t  warning_at (DECL_SOURCE_LOCATION (decl), OPT_mhotpatch,\n-\t\t      \"hotpatching is not compatible with nested functions\");\n-\t  hotpatch_trampoline_halfwords = -1;\n-\t}\n-    }\n-\n-  if (hotpatch_trampoline_halfwords > 0)\n+  if (hotpatch_p)\n     {\n       int i;\n \n       /* Add a trampoline code area before the function label and initialize it\n \t with two-byte nop instructions.  This area can be overwritten with code\n \t that jumps to a patched version of the function.  */\n-      for (i = 0; i < hotpatch_trampoline_halfwords; i++)\n+      for (i = 0; i < hw_before; i++)\n \tasm_fprintf (asm_out_file, \"\\tnopr\\t%%r7\\n\");\n       /* Note:  The function label must be aligned so that (a) the bytes of the\n \t following nop do not cross a cacheline boundary, and (b) a jump address\n@@ -5324,10 +5312,30 @@ s390_asm_output_function_label (FILE *asm_out_file, const char *fname,\n \n   ASM_OUTPUT_LABEL (asm_out_file, fname);\n \n-  /* Output a four-byte nop if hotpatching is enabled.  This can be overwritten\n-     atomically with a relative backwards jump to the trampoline area.  */\n-  if (hotpatch_trampoline_halfwords >= 0)\n-    asm_fprintf (asm_out_file, \"\\tnop\\t0\\n\");\n+  /* Output a series of NOPs after the function label.  */\n+  if (hotpatch_p)\n+    {\n+      while (hw_after > 0)\n+\t{\n+\t  if (hw_after >= 3 && TARGET_CPU_ZARCH)\n+\t    {\n+\t      asm_fprintf (asm_out_file, \"\\tbrcl\\t\\t0,0\\n\");\n+\t      hw_after -= 3;\n+\t    }\n+\t  else if (hw_after >= 2)\n+\t    {\n+\t      gcc_assert (hw_after == 2 || !TARGET_CPU_ZARCH);\n+\t      asm_fprintf (asm_out_file, \"\\tnop\\t0\\n\");\n+\t      hw_after -= 2;\n+\t    }\n+\t  else\n+\t    {\n+\t      gcc_assert (hw_after == 1);\n+\t      asm_fprintf (asm_out_file, \"\\tnopr\\t%%r7\\n\");\n+\t      hw_after -= 1;\n+\t    }\n+\t}\n+    }\n }\n \n /* Output machine-dependent UNSPECs occurring in address constant X\n@@ -11842,29 +11850,44 @@ s390_option_override (void)\n       {\n \tswitch (opt->opt_index)\n \t  {\n-\t  case OPT_mhotpatch:\n-\t    s390_hotpatch_trampoline_halfwords = (opt->value) ?\n-\t      s390_hotpatch_trampoline_halfwords_default : -1;\n-\t    break;\n \t  case OPT_mhotpatch_:\n \t    {\n-\t      int val;\n-\n-\t      val = integral_argument (opt->arg);\n-\t      if (val == -1)\n+\t      int val1;\n+\t      int val2;\n+\t      char s[256];\n+\t      char *t;\n+\n+\t      strncpy (s, opt->arg, 256);\n+\t      s[255] = 0;\n+\t      t = strchr (s, ',');\n+\t      if (t != NULL)\n+\t\t{\n+\t\t  *t = 0;\n+\t\t  t++;\n+\t\t  val1 = integral_argument (s);\n+\t\t  val2 = integral_argument (t);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  val1 = -1;\n+\t\t  val2 = -1;\n+\t\t}\n+\t      if (val1 == -1 || val2 == -1)\n \t\t{\n \t\t  /* argument is not a plain number */\n-\t\t  error (\"argument to %qs should be a non-negative integer\",\n-\t\t\t \"-mhotpatch=\");\n+\t\t  error (\"arguments to %qs should be non-negative integers\",\n+\t\t\t \"-mhotpatch=n,m\");\n \t\t  break;\n \t\t}\n-\t      else if (val > s390_hotpatch_trampoline_halfwords_max)\n+\t      else if (val1 > s390_hotpatch_hw_max\n+\t\t       || val2 > s390_hotpatch_hw_max)\n \t\t{\n \t\t  error (\"argument to %qs is too large (max. %d)\",\n-\t\t\t \"-mhotpatch=\", s390_hotpatch_trampoline_halfwords_max);\n+\t\t\t \"-mhotpatch=n,m\", s390_hotpatch_hw_max);\n \t\t  break;\n \t\t}\n-\t      s390_hotpatch_trampoline_halfwords = val;\n+\t      s390_hotpatch_hw_before_label = val1;\n+\t      s390_hotpatch_hw_after_label = val2;\n \t      break;\n \t    }\n \t  default:\n@@ -12249,8 +12272,8 @@ s390_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE s390_attribute_table\n \n-#undef TARGET_CAN_INLINE_P\n-#define TARGET_CAN_INLINE_P s390_can_inline_p\n+#undef TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P\n+#define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P hook_bool_const_tree_true\n \n #undef TARGET_SET_UP_BY_PROLOGUE\n #define TARGET_SET_UP_BY_PROLOGUE s300_set_up_by_prologue"}, {"sha": "22f1ff546530d5301a0b35fa0d936a27bdd0fa61", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -96,13 +96,15 @@ mhard-float\n Target Report RejectNegative Negative(msoft-float) InverseMask(SOFT_FLOAT, HARD_FLOAT)\n Enable hardware floating point\n \n-mhotpatch\n-Target Report Var(s390_deferred_options) Defer\n-Prepend the function label with 12 two-byte Nop instructions, and add a four byte Nop instruction after the label for hotpatching.\n-\n mhotpatch=\n Target RejectNegative Report Joined Var(s390_deferred_options) Defer\n-Prepend the function label with the given number of two-byte Nop instructions, and add a four byte Nop instruction after the label for hotpatching.\n+Takes two non-negative integer numbers separated by a comma.\n+Prepend the function label with the number of two-byte Nop\n+instructions indicated by the first.  Append Nop instructions\n+covering the number of halfwords indicated by the second after the\n+label.  Nop instructions of the largest possible size are used\n+(six, four or two bytes), beginning with the largest possible\n+size.  Using 0 for both values disables hotpatching.\n \n mlong-double-128\n Target Report RejectNegative Negative(mlong-double-64) Mask(LONG_DOUBLE_128)"}, {"sha": "9e47e961d52b49789c32baefa01be6d1c1d210bc", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -3376,16 +3376,19 @@ this function attribute to make GCC generate the ``hot-patching'' function\n prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2\n and newer.\n \n-@item hotpatch [(@var{prologue-halfwords})]\n+@item hotpatch (@var{halfwords-before-function-label},@var{halfwords-after-function-label})\n @cindex @code{hotpatch} attribute\n \n On S/390 System z targets, you can use this function attribute to\n-make GCC generate a ``hot-patching'' function prologue.  The\n-@code{hotpatch} has no effect on funtions that are explicitly\n-inline.  If the @option{-mhotpatch} or @option{-mno-hotpatch}\n-command-line option is used at the same time, the @code{hotpatch}\n-attribute takes precedence.  If an argument is given, the maximum\n-allowed value is 1000000.\n+make GCC generate a ``hot-patching'' function prologue.  If the\n+@option{-mhotpatch=} command-line option is used at the same time,\n+the @code{hotpatch} attribute takes precedence.  The first of the\n+two arguments specifies the number of halfwords to be added before\n+the function label.  A second argument can be used to specify the\n+number of halfwords to be added after the function label.  For\n+both arguments the maximum allowed value is 1000000.\n+\n+If both ar guments are zero, hotpatching is disabled.\n \n @item naked\n @cindex function without a prologue/epilogue code"}, {"sha": "2d3c4f797852023a67d0cb7f977368731b475b84", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -976,7 +976,7 @@ See RS/6000 and PowerPC Options.\n -m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch @gol\n -mtpf-trace -mno-tpf-trace  -mfused-madd  -mno-fused-madd @gol\n -mwarn-framesize  -mwarn-dynamicstack  -mstack-size -mstack-guard @gol\n--mhotpatch[=@var{halfwords}] -mno-hotpatch}\n+-mhotpatch=@var{halfwords},@var{halfwords}}\n \n @emph{Score Options}\n @gccoptlist{-meb -mel @gol\n@@ -21201,17 +21201,17 @@ In order to be efficient the extra code makes the assumption that the stack star\n at an address aligned to the value given by @var{stack-size}.\n The @var{stack-guard} option can only be used in conjunction with @var{stack-size}.\n \n-@item -mhotpatch[=@var{halfwords}]\n-@itemx -mno-hotpatch\n+@item -mhotpatch=@var{pre-halfwords},@var{post-halfwords}\n @opindex mhotpatch\n If the hotpatch option is enabled, a ``hot-patching'' function\n prologue is generated for all functions in the compilation unit.\n The funtion label is prepended with the given number of two-byte\n-Nop instructions (@var{halfwords}, maximum 1000000) or 12 Nop\n-instructions if no argument is present.  Functions with a\n-hot-patching prologue are never inlined automatically, and a\n-hot-patching prologue is never generated for functions\n-that are explicitly inline.\n+Nop instructions (@var{pre-halfwords}, maximum 1000000).  After\n+the label, 2 * @var{post-halfwords} bytes are appended, using the\n+larges nop like instructions the architecture allows (maximum\n+1000000).\n+\n+If both arguments are zero, hotpatching is disabled.\n \n This option can be overridden for individual functions with the\n @code{hotpatch} attribute."}, {"sha": "93e46cadef413b4516d1da890f3e4148aaa28d62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,3 +1,44 @@\n+2015-01-27  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-13.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-14.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-15.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-16.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-17.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-18.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-19.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-20.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-10.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-11.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-12.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-13.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-14.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-15.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-16.c: New testcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-9.c: New\n+\ttestcase.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-1.c: Testcase adjusted to\n+\tnew -mhotpatch.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-10.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-11.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-12.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-2.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-3.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-4.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-5.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-6.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-7.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-8.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-9.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-1.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-2.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-3.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-4.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-5.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-6.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-7.c: Likewise.\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-8.c: Likewise.\n+\n 2015-01-27  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.dg/long_branch.c: New testcase."}, {"sha": "e7e90585ebb58966f5c03cb384ffa2b0d9813546", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-1.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-1.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,7 +1,7 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch --save-temps\" } */\n \n #include <stdio.h>\n \n@@ -10,11 +10,7 @@ void hp1(void)\n   printf(\"hello, world!\\n\");\n }\n \n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n-/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 12 } } */\n-/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "78afb8cc4069254214861a290e78cfdef0062a9b", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-10.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-10.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,21 +1,16 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mno-hotpatch --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,0 --save-temps\" } */\n \n #include <stdio.h>\n \n-__attribute__ ((hotpatch(2)))\n void hp1(void)\n {\n   printf(\"hello, world!\\n\");\n }\n \n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n-/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 2 } } */\n-/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "d4c577e65af3eb7e32bce8452c776f8922a4210e", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-11.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-11.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,7 +1,7 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch -mno-hotpatch --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1,0 --save-temps\" } */\n \n #include <stdio.h>\n \n@@ -10,11 +10,7 @@ void hp1(void)\n   printf(\"hello, world!\\n\");\n }\n \n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n-/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n /* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "cc32e7c3f71845431e035621ddc81bc70a739fe8", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-12.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-12.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,7 +1,7 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mno-hotpatch -mhotpatch=1 --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=999,0 --save-temps\" } */\n \n #include <stdio.h>\n \n@@ -10,11 +10,7 @@ void hp1(void)\n   printf(\"hello, world!\\n\");\n }\n \n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n-/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n-/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 999 } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "8d4adcadf0eced8f2b372b184a929a066cc68973", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-13.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-13.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,17 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch(1,0)))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "f1b2325e29ce27a8f3d880ee00bb76fbd675bbad", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-14.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-14.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,17 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch(0,2)))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "dd158d355ebc0a0b37257174993ddac1a258b339", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-15.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-15.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,17 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch(1,2)))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "592de2c38d5ff9675c372337183531fe125f8790", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-16.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-16.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,17 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,0 --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch(1,2)))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "a1c94db882a79348790b496d9fc563a3f5d4b542", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-17.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-17.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,17 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1,2 --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch(0,0)))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "19c5ce35408b1e39451ff72fb3293281d4a619d7", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-18.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-18.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,16 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1,2 -mhotpatch=0,0 --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "993d04dab944da38ab59df6013cfeea9e38b1df9", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-19.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-19.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,23 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1,2 --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+/* { dg-prune-output \"always_inline function might not be inlinable\" } */\n+__attribute__ ((always_inline))\n+static void hp2(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+void hp1(void)\n+{\n+  hp2();\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "af8f59243efcd748fed5c39660ebdb5e02e62794", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-2.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-2.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,7 +1,7 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch=1 --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,1 --save-temps\" } */\n \n #include <stdio.h>\n \n@@ -10,11 +10,7 @@ void hp1(void)\n   printf(\"hello, world!\\n\");\n }\n \n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n /* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n-/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "88721391d24bf18e46465522e67e2e07c739c6d3", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-20.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-20.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,20 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+/* { dg-prune-output \"always_inline function might not be inlinable\" } */\n+__attribute__ ((hotpatch(1,2)))\n+__attribute__ ((always_inline))\n+static void hp2(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+/* { dg-prune-output \"called from here\" } */\n+void hp1(void)\n+{\n+  hp2();\n+}"}, {"sha": "4138d63268404b918e2bfbe5dbde0ebe8dc875fe", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-3.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-3.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,7 +1,7 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch=0 --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,2 --save-temps\" } */\n \n #include <stdio.h>\n \n@@ -10,11 +10,7 @@ void hp1(void)\n   printf(\"hello, world!\\n\");\n }\n \n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n /* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n /* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "afe1ad67383fea5ee21489891df0ce05eb2f3e21", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-4.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-4.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,26 +1,16 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,3 --save-temps\" } */\n \n #include <stdio.h>\n \n-inline void hp1(void)\n+void hp1(void)\n {\n   printf(\"hello, world!\\n\");\n }\n \n-__attribute__ ((always_inline))\n-void hp2(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n-{\n-  printf(\"hello, world!\\n\");\n-} /* { dg-warning \"function 'hp2' with the 'always_inline' attribute is not hotpatchable\" } */\n-\n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n /* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n /* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-times \"brcl\\t\\t0,0\" 1 } } */"}, {"sha": "ea3e29ee7950e4bcc6dbaedf32d3e8c9e595078f", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-5.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-5.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,21 +1,16 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,4 --save-temps\" } */\n \n #include <stdio.h>\n \n-__attribute__ ((hotpatch))\n void hp1(void)\n {\n   printf(\"hello, world!\\n\");\n }\n \n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n-/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 12 } } */\n-/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-times \"brcl\\t\\t0,0\" 1 } } */"}, {"sha": "e91a2a6ad03eeb7754ae0c1d33f8f56cdd0c40a7", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-6.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-6.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,21 +1,16 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,5 --save-temps\" } */\n \n #include <stdio.h>\n \n-__attribute__ ((hotpatch(1)))\n void hp1(void)\n {\n   printf(\"hello, world!\\n\");\n }\n \n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n-/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n /* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"brcl\\t\\t0,0\" 1 } } */"}, {"sha": "fe4b069e58254434cbf9bed440df7db72078f677", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-7.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-7.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,21 +1,16 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,6 --save-temps\" } */\n \n #include <stdio.h>\n \n-__attribute__ ((hotpatch(0)))\n void hp1(void)\n {\n   printf(\"hello, world!\\n\");\n }\n \n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n /* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n-/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-times \"brcl\\t\\t0,0\" 2 } } */"}, {"sha": "8edcfccb62f780f9e16b85ba1dc2cae08fcd05c2", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-8.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-8.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,28 +1,16 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mesa -m31 -mhotpatch=0,3 --save-temps\" } */\n \n #include <stdio.h>\n \n-__attribute__ ((hotpatch))\n-inline void hp1(void)\n+void hp1(void)\n {\n   printf(\"hello, world!\\n\");\n }\n \n-__attribute__ ((hotpatch))\n-__attribute__ ((always_inline))\n-void hp2(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n-{\n-  printf(\"hello, world!\\n\");\n-} /* { dg-warning \"function 'hp2' with the 'always_inline' attribute is not hotpatchable\" } */\n-\n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n-/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n-/* { dg-final { scan-assembler-not \"nop\\t0\" } } */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "25b377180d63f09a69ad057d458f4337e0f67f4f", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-9.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-9.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,21 +1,16 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch=1 --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mesa -m31 -mhotpatch=0,4 --save-temps\" } */\n \n #include <stdio.h>\n \n-__attribute__ ((hotpatch(2)))\n void hp1(void)\n {\n   printf(\"hello, world!\\n\");\n }\n \n-int main (void)\n-{\n-  return 0;\n-}\n-\n /* Check number of occurences of certain instructions.  */\n-/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 2 } } */\n-/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 2 } } */\n+/* { dg-final { scan-assembler-not \"brcl\\t\\t0,0\" } } */"}, {"sha": "d88e07eb2d6a6fc17ba045a3961db32e4e4a3db6", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-1.c", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-1.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,27 +1,11 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch\" } */\n-\n-#include <stdio.h>\n-\n-void hp1(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-inline void hp2(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((always_inline))\n-void hp3(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n-{\n-  printf(\"hello, world!\\n\");\n-} /* { dg-warning \"function 'hp3' with the 'always_inline' attribute is not hotpatchable\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=-1,0\" } */\n \n int main (void)\n {\n   return 0;\n }\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "7bbdc374e1d1f6253fadf3a511bde6213db2531b", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-10.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-10.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,12 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch\" } */\n+\n+__attribute__((hotpatch(0,0,0)))\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "df01230cf55f18f69ccac656563acaefdbfce78e", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-11.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-11.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,12 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch\" } */\n+\n+__attribute__((hotpatch(a,0)))\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "d91e8feb15bc2b61f86b067cf0a0acb2efe48b51", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-12.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-12.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,12 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch\" } */\n+\n+__attribute__((hotpatch(0,a)))\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "72f13a04428a5c69e6e39b7595c15774eaadb7f4", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-13.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-13.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,29 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1000000,1000000\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(1000000,1000000)))\n+void hp2(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(1000001,1000000)))\n+void hp3(void)\n+{ /* { dg-error \" requested 'hotpatch' attribute is not a comma separated pair\" } */\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(1000000,1000001)))\n+void hp4(void)\n+{ /* { dg-error \" requested 'hotpatch' attribute is not a comma separated pair\" } */\n+  printf(\"hello, world!\\n\");\n+}"}, {"sha": "f3343d33e96d2b9beb37f025b5bc1d637a0d8689", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-14.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-14.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,11 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1000001,1000000\" } */\n+\n+viod main(void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=n,m' is too large\" } */"}, {"sha": "4ce7375a7c31ecc00f9e637103d218e8563530a6", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-15.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-15.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,43 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch\" } */\n+\n+/* { dg-prune-output \"always_inline function might not be inlinable\" } */\n+/* { dg-prune-output \"called from here\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch(1,2)))\n+static void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(1,2)))\n+static inline void hp2(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(0,0)))\n+__attribute__ ((always_inline))\n+static void hp3(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(1,2)))\n+__attribute__ ((always_inline))\n+static void hp4(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+void main(void)\n+{\n+  hp1();\n+  hp2();\n+  hp3();\n+  hp4();\n+}"}, {"sha": "3c5c782720628106fd47601c818c6f3751e0704f", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-16.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,24 @@\n+/* A warning will be issued when requesting hotpatching on a nested function.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch\" } */\n+\n+typedef int (*fn_t)(void);\n+\n+fn_t hp1(void)\n+{\n+  __attribute__((hotpatch(0,0)))\n+  int nested1(void)\n+  { return 1; }\n+\n+  return nested1;\n+}\n+\n+fn_t hp2(void)\n+{\n+  __attribute__ ((hotpatch(1,2)))\n+  int nested2(void) /* { dg-warning \"hotpatching is not compatible with nested functions\" } */\n+  { return 2; }\n+\n+  return nested2;\n+}"}, {"sha": "95820e493fcfc447a68ddfa5c1ebbfae14754531", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-2.c", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-2.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,27 +1,11 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch=0\" } */\n-\n-#include <stdio.h>\n-\n-void hp1(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-inline void hp2(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((always_inline))\n-void hp3(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n-{\n-  printf(\"hello, world!\\n\");\n-} /* { dg-warning \"function 'hp3' with the 'always_inline' attribute is not hotpatchable\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,-1\" } */\n \n int main (void)\n {\n   return 0;\n }\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "bbed9759fbd908878a55ed9898895d5b2f7d3dcd", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-3.c", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-3.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,27 +1,11 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch=1\" } */\n-\n-#include <stdio.h>\n-\n-void hp1(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-inline void hp2(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((always_inline))\n-void hp3(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n-{\n-  printf(\"hello, world!\\n\");\n-} /* { dg-warning \"function 'hp3' with the 'always_inline' attribute is not hotpatchable\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0\" } */\n \n int main (void)\n {\n   return 0;\n }\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "4d926594a5cca04dc431626ed7d0a4ea140539ec", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-4.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,7 +1,7 @@\n /* Functional tests for the function hotpatching feature.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch=-1\" } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,0,0\" } */\n \n int main (void)\n {"}, {"sha": "46c9004d3e8a27851f2da5c40026961ec8203997", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-5.c", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-5.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,28 +1,11 @@\n /* Functional tests for the function hotpatching feature.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch=1000000\" } */\n-\n-#include <stdio.h>\n-\n-void hp1(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((hotpatch(1000000)))\n-void hp2(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((hotpatch(1000001)))\n-void hp3(void)\n-{ /* { dg-error \"requested 'hotpatch' attribute is not a non-negative integer constant or too large .max. 1000000.\" } */\n-  printf(\"hello, world!\\n\");\n-}\n+/* { dg-options \"-O3 -mzarch -mhotpatch=a,0\" } */\n \n int main (void)\n {\n   return 0;\n }\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "b28e205512221a19238e39d9b4dfa15f2b8a74be", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-6.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,11 +1,11 @@\n /* Functional tests for the function hotpatching feature.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch=1000001\" } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0,a\" } */\n \n int main (void)\n {\n   return 0;\n }\n \n-/* { dg-excess-errors \"argument to '-mhotpatch=' is too large .max. 1000000.\" } */\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "2080eb1f94ac9852cc043b0265fa0aced4d973d2", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-7.c", "status": "modified", "additions": 5, "deletions": 61, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-7.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,68 +1,12 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mno-hotpatch\" } */\n-\n-#include <stdio.h>\n-\n-__attribute__ ((hotpatch))\n-void hp1(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((hotpatch))\n-inline void hp2(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((hotpatch))\n-__attribute__ ((always_inline))\n-void hp3(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n-{\n-  printf(\"hello, world!\\n\");\n-} /* { dg-warning \"function 'hp3' with the 'always_inline' attribute is not hotpatchable\" } */\n-\n-__attribute__ ((hotpatch(0)))\n-void hp4(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((hotpatch(0)))\n-inline void hp5(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((hotpatch(0)))\n-__attribute__ ((always_inline))\n-void hp6(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n-{\n-  printf(\"hello, world!\\n\");\n-} /* { dg-warning \"function 'hp6' with the 'always_inline' attribute is not hotpatchable\" } */\n-\n-__attribute__ ((hotpatch(1)))\n-void hp7(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((hotpatch(1)))\n-inline void hp8(void)\n-{\n-  printf(\"hello, world!\\n\");\n-}\n-\n-__attribute__ ((hotpatch(1)))\n-__attribute__ ((always_inline))\n-void hp9(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n-{\n-  printf(\"hello, world!\\n\");\n-} /* { dg-warning \"function 'hp9' with the 'always_inline' attribute is not hotpatchable\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch\" } */\n \n+__attribute__((hotpatch(-1,0)))\n int main (void)\n {\n   return 0;\n }\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "46a38c860c262ebe0386b94a9ab4e83446be1036", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-8.c", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-8.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -1,23 +1,12 @@\n /* Functional tests for the function hotpatching feature.  */\n \n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mzarch -mhotpatch\" } */\n-\n-#include <stdio.h>\n-\n-int hp1(void)\n-{\n-  int nested1(void) /* { dg-warning \"hotpatching is not compatible with nested functions\" } */\n-  { return 1; }\n-\n-  __attribute__ ((hotpatch))\n-  int nested2(void) /* { dg-warning \"hotpatching is not compatible with nested functions\" } */\n-  { return 1; }\n-\n-  return nested1() - nested2();\n-}\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch\" } */\n \n+__attribute__((hotpatch(0,-1)))\n int main (void)\n {\n-  return hp1();\n+  return 0;\n }\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "24226eb35470c02f6f609c127d40b27658e4e671", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-9.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94091f43bdfff76c62dd8bf5f34f398b3b098339/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-9.c?ref=94091f43bdfff76c62dd8bf5f34f398b3b098339", "patch": "@@ -0,0 +1,12 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch\" } */\n+\n+__attribute__((hotpatch(0)))\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}]}