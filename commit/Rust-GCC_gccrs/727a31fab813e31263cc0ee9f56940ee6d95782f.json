{"sha": "727a31fab813e31263cc0ee9f56940ee6d95782f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3YTMxZmFiODEzZTMxMjYzY2MwZWU5ZjU2OTQwZWU2ZDk1NzgyZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-22T02:48:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-22T02:48:27Z"}, "message": "gimple-low.c (expand_var_p): Don't look at TREE_ADDRESSABLE...\n\n        * gimple-low.c (expand_var_p): Don't look at TREE_ADDRESSABLE,\n        TREE_THIS_VOLATILE, may_aliases, or optimization level.\n        (remove_useless_vars): Dump debugging info.\n        (expand_used_vars): Move ...\n        * cfgexpand.c (expand_used_vars): ... here.  Make static.\n        * tree-flow-inline.h (set_is_used): New.\n        (set_default_def): Use get_var_ann.\n        * tree-flow.h: Update decls.\n        * tree-ssa-live.c (mark_all_vars_used_1, mark_all_vars_used): New.\n        (create_ssa_var_map): Use it.\n        * tree-ssa.c (set_is_used): Remove.\n\nFrom-SVN: r85034", "tree": {"sha": "b73bc536f4dc7bf38bca669bed0165ada4082844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b73bc536f4dc7bf38bca669bed0165ada4082844"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/727a31fab813e31263cc0ee9f56940ee6d95782f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727a31fab813e31263cc0ee9f56940ee6d95782f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727a31fab813e31263cc0ee9f56940ee6d95782f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727a31fab813e31263cc0ee9f56940ee6d95782f/comments", "author": null, "committer": null, "parents": [{"sha": "eecbcf542827192523d9575520b7abdce5d946a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eecbcf542827192523d9575520b7abdce5d946a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eecbcf542827192523d9575520b7abdce5d946a9"}], "stats": {"total": 157, "additions": 97, "deletions": 60}, "files": [{"sha": "02ba1037f21f3ae3a5dff130a12028796c1b1963", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=727a31fab813e31263cc0ee9f56940ee6d95782f", "patch": "@@ -1,3 +1,17 @@\n+2004-07-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* gimple-low.c (expand_var_p): Don't look at TREE_ADDRESSABLE,\n+\tTREE_THIS_VOLATILE, may_aliases, or optimization level.\n+\t(remove_useless_vars): Dump debugging info.\n+\t(expand_used_vars): Move ...\n+\t* cfgexpand.c (expand_used_vars): ... here.  Make static.\n+\t* tree-flow-inline.h (set_is_used): New.\n+\t(set_default_def): Use get_var_ann.\n+\t* tree-flow.h: Update decls.\n+\t* tree-ssa-live.c (mark_all_vars_used_1, mark_all_vars_used): New.\n+\t(create_ssa_var_map): Use it.\n+\t* tree-ssa.c (set_is_used): Remove.\n+\n 2004-07-22  Ben Elliston  <bje@au.ibm.com>\n \n \t* gdbinit.in: Set a breakpoint on internal_error."}, {"sha": "30004f24a3219655fd88c192a385c4d1849955bd", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=727a31fab813e31263cc0ee9f56940ee6d95782f", "patch": "@@ -37,6 +37,22 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n \n \n+/* Expand variables in the unexpanded_var_list.  */\n+\n+static void\n+expand_used_vars (void)\n+{\n+  tree cell;\n+\n+  cfun->unexpanded_var_list = nreverse (cfun->unexpanded_var_list);\n+\n+  for (cell = cfun->unexpanded_var_list; cell; cell = TREE_CHAIN (cell))\n+    expand_var (TREE_VALUE (cell));\n+\n+  cfun->unexpanded_var_list = NULL_TREE;\n+}\n+\n+\n /* A subroutine of expand_gimple_basic_block.  Expand one COND_EXPR.\n    Returns a new basic block if we've terminated the current basic\n    block and created a new one.  */\n@@ -420,10 +436,7 @@ tree_expand_cfg (void)\n   /* Prepare the rtl middle end to start recording block changes.  */\n   reset_block_changes ();\n \n-  /* Expand the variables recorded during gimple lowering.  This must\n-     occur before the call to expand_function_start to ensure that\n-     all used variables are expanded before we expand anything on the\n-     PENDING_SIZES list.  */\n+  /* Expand the variables recorded during gimple lowering.  */\n   expand_used_vars ();\n \n   /* Set up parameters and prepare for return, for the function.  */"}, {"sha": "828a36fa75650ce3de9360163af81e0440e7697b", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=727a31fab813e31263cc0ee9f56940ee6d95782f", "patch": "@@ -475,15 +475,13 @@ expand_var_p (tree var)\n   if (TREE_CODE (var) != VAR_DECL)\n     return true;\n \n-  /* Remove all unused, unaliased temporaries.  Also remove unused, unaliased\n-     local variables during highly optimizing compilations.  */\n+  /* Leave statics and externals alone.  */\n+  if (TREE_STATIC (var) || DECL_EXTERNAL (var))\n+    return true;\n+\n+  /* Remove all unused local variables.  */\n   ann = var_ann (var);\n-  if (ann\n-      && ! ann->may_aliases\n-      && ! ann->used\n-      && ! TREE_ADDRESSABLE (var)\n-      && ! TREE_THIS_VOLATILE (var)\n-      && (DECL_ARTIFICIAL (var) || optimize >= 2))\n+  if (!ann || !ann->used)\n     return false;\n \n   return true;\n@@ -495,34 +493,36 @@ static void\n remove_useless_vars (void)\n {\n   tree var, *cell;\n+  FILE *df = NULL;\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      df = dump_file;\n+      fputs (\"Discarding as unused:\\n\", df);\n+    }\n \n   for (cell = &cfun->unexpanded_var_list; *cell; )\n     {\n       var = TREE_VALUE (*cell);\n \n       if (!expand_var_p (var))\n \t{\n+\t  if (df)\n+\t    {\n+\t      fputs (\"  \", df);\n+\t      print_generic_expr (df, var, dump_flags);\n+\t      fputc ('\\n', df);\n+\t    }\n+\n \t  *cell = TREE_CHAIN (*cell);\n \t  continue;\n \t}\n \n       cell = &TREE_CHAIN (*cell);\n     }\n-}\n-\n-/* Expand variables in the unexpanded_var_list.  */\n-\n-void\n-expand_used_vars (void)\n-{\n-  tree cell;\n-\n-  cfun->unexpanded_var_list = nreverse (cfun->unexpanded_var_list);\n-\n-  for (cell = cfun->unexpanded_var_list; cell; cell = TREE_CHAIN (cell))\n-    expand_var (TREE_VALUE (cell));\n \n-  cfun->unexpanded_var_list = NULL_TREE;\n+  if (df)\n+    fputc ('\\n', df);\n }\n \n struct tree_opt_pass pass_remove_useless_vars = "}, {"sha": "d48f2055ca43717876cda11eb10e261f65a70134", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=727a31fab813e31263cc0ee9f56940ee6d95782f", "patch": "@@ -421,6 +421,16 @@ phi_arg_from_edge (tree phi, edge e)\n   return -1;\n }\n \n+/* Mark VAR as used, so that it'll be preserved during rtl expansion.  */\n+\n+static inline void\n+set_is_used (tree var)\n+{\n+  var_ann_t ann = get_var_ann (var);\n+  ann->used = 1;\n+}\n+\n+\n /*  -----------------------------------------------------------------------  */\n \n /* Return true if T is an executable statement.  */\n@@ -453,9 +463,7 @@ is_label_stmt (tree t)\n static inline void\n set_default_def (tree var, tree def)\n {\n-  var_ann_t ann = var_ann (var);\n-  if (ann == NULL)\n-    ann = create_var_ann (var);\n+  var_ann_t ann = get_var_ann (var);\n   ann->default_def = def;\n }\n "}, {"sha": "bd8bd4a8ba43f560b62ac7ea4f93b3e938a2c693", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=727a31fab813e31263cc0ee9f56940ee6d95782f", "patch": "@@ -535,7 +535,6 @@ extern tree make_rename_temp (tree, const char *);\n /* In gimple-low.c  */\n struct lower_data;\n extern void lower_stmt_body (tree, struct lower_data *);\n-extern void expand_used_vars (void);\n extern void record_vars (tree);\n extern bool block_may_fallthru (tree block);\n \n@@ -565,7 +564,6 @@ extern void dump_tree_ssa_stats (FILE *);\n extern void debug_tree_ssa_stats (void);\n extern void ssa_remove_edge (edge);\n extern edge ssa_redirect_edge (edge, basic_block);\n-extern void set_is_used (tree);\n extern bool tree_ssa_useless_type_conversion (tree);\n extern bool tree_ssa_useless_type_conversion_1 (tree, tree);\n extern void verify_ssa (void);\n@@ -647,6 +645,7 @@ bool for_each_index (tree *, bool (*) (tree, tree *, void *), void *);\n static inline int phi_arg_from_edge (tree, edge);\n static inline bool is_call_clobbered (tree);\n static inline void mark_call_clobbered (tree);\n+static inline void set_is_used (tree);\n \n /* In tree-eh.c  */\n extern void make_eh_edges (tree);"}, {"sha": "6d006fa99fbd0a27b22d6cf25de615f9049dbd85", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=727a31fab813e31263cc0ee9f56940ee6d95782f", "patch": "@@ -285,6 +285,34 @@ change_partition_var (var_map map, tree var, int part)\n }\n \n \n+/* Helper function for mark_all_vars_used, called via walk_tree.  */\n+\n+static tree\n+mark_all_vars_used_1 (tree *tp, int *walk_subtrees,\n+\t\t      void *data ATTRIBUTE_UNUSED)\n+{\n+  tree t = *tp;\n+\n+  /* Only need to mark VAR_DECLS; parameters and return results are not\n+     eliminated as unused.  */\n+  if (TREE_CODE (t) == VAR_DECL)\n+    set_is_used (t);\n+\n+  if (DECL_P (t) || TYPE_P (t))\n+    *walk_subtrees = 0;\n+\n+  return NULL;\n+}\n+\n+/* Mark all VAR_DECLS under *EXPR_P as used, so that they won't be \n+   eliminated during the tree->rtl conversion process.  */\n+\n+static inline void\n+mark_all_vars_used (tree *expr_p)\n+{\n+  walk_tree (expr_p, mark_all_vars_used_1, NULL, NULL);\n+}\n+\n /* This function looks through the program and uses FLAGS to determine what \n    SSA versioned variables are given entries in a new partition table.  This\n    new partition map is returned.  */\n@@ -338,6 +366,8 @@ create_ssa_var_map (int flags)\n \t      arg = PHI_ARG_DEF (phi, i);\n \t      if (TREE_CODE (arg) == SSA_NAME)\n \t\tregister_ssa_partition (map, arg, true);\n+\n+\t      mark_all_vars_used (&PHI_ARG_DEF_TREE (phi, i));\n \t    }\n \t}\n \n@@ -377,8 +407,6 @@ create_ssa_var_map (int flags)\n \t  for (x = 0; x < NUM_VUSES (vuses); x++)\n \t    {\n \t      tree var = VUSE_OP (vuses, x);\n-\t      set_is_used (var);\n-\n #if defined ENABLE_CHECKING\n \t      SET_BIT (used_in_virtual_ops, var_ann (SSA_NAME_VAR (var))->uid);\n #endif\n@@ -388,8 +416,6 @@ create_ssa_var_map (int flags)\n \t  for (x = 0; x < NUM_V_MAY_DEFS (v_may_defs); x++)\n \t    {\n \t      tree var = V_MAY_DEF_OP (v_may_defs, x);\n-\t      set_is_used (var);\n-\n #if defined ENABLE_CHECKING\n \t      SET_BIT (used_in_virtual_ops, var_ann (SSA_NAME_VAR (var))->uid);\n #endif\n@@ -399,11 +425,12 @@ create_ssa_var_map (int flags)\n \t  for (x = 0; x < NUM_V_MUST_DEFS (v_must_defs); x++)\n \t    {\n \t      tree var = V_MUST_DEF_OP (v_must_defs, x);\n-\t      set_is_used (var);\n #if defined ENABLE_CHECKING\n \t      SET_BIT (used_in_virtual_ops, var_ann (SSA_NAME_VAR (var))->uid);\n #endif\n \t    }\t    \n+\n+\t  mark_all_vars_used (bsi_stmt_ptr (bsi));\n \t}\n     }\n "}, {"sha": "35db41c26a2ed4a3b95e6f964869f968f4c469d1", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727a31fab813e31263cc0ee9f56940ee6d95782f/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=727a31fab813e31263cc0ee9f56940ee6d95782f", "patch": "@@ -463,30 +463,6 @@ verify_ssa (void)\n }\n \n \n-/* Set the USED bit in the annotation for T.  */\n-\n-void\n-set_is_used (tree t)\n-{\n-  while (1)\n-    {\n-      if (SSA_VAR_P (t))\n-\tbreak;\n-\n-      if (TREE_CODE (t) == REALPART_EXPR || TREE_CODE (t) == IMAGPART_EXPR)\n-\tt = TREE_OPERAND (t, 0);\n-      else\n-\twhile (handled_component_p (t))\n-\t  t = TREE_OPERAND (t, 0);\n-    }\n-\n-  if (TREE_CODE (t) == SSA_NAME)\n-    t = SSA_NAME_VAR (t);\n-\n-  var_ann (t)->used = 1;\n-}\n-\n-\n /* Initialize global DFA and SSA structures.  */\n \n void"}]}