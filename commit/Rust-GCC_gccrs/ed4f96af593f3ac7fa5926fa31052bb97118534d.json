{"sha": "ed4f96af593f3ac7fa5926fa31052bb97118534d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ0Zjk2YWY1OTNmM2FjN2ZhNTkyNmZhMzEwNTJiYjk3MTE4NTM0ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-03-04T21:51:56Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-03-04T21:51:56Z"}, "message": "Makefile.am (inst_sources): Make source instantion files conditional.\n\n2011-03-04  Benjamin Kosnik  <bkoz@chula>\n\n\t* src/Makefile.am (inst_sources): Make source instantion files\n\tconditional.\n\t(XTEMPLATE_FLAGS): Make -fno-implicit-templates conditional.\n\t* src/Makefile.in: Regenerate.\n\t* src/valarray-inst.cc: Move to..\n\t* src/valarray.cc: ...this.\n\t* acinclude.m4 (GLIBCXX_ENABLE_EXTERN_TEMPLATE]): Define.\n\t* configure.ac (GLIBCXX_ENABLE_EXTERN_TEMPLATE): Use it.\n\t* configure: Regenerate.\n\t* include/Makefile.am (stamp-extern-template): Add.\n\t* include/Makefile.in: Regenerate.\n\n\t* doc/xml/manual/configure.xml: Document --enable-extern-template.\n\n\t* include/bits/locale_classes.tcc: Adjust comment.\n\t* include/bits/locale_facets.tcc: Same.\n\t* include/bits/basic_ios.tcc: Same.\n\t* include/bits/istream.tcc: Same.\n\t* include/bits/codecvt.h: Same.\n\t* include/bits/ostream.tcc: Same.\n\t* include/bits/sstream.tcc: Same.\n\t* include/bits/c++config: Same.\n\t* include/bits/basic_string.tcc: Same.\n\t* include/bits/ostream_insert.h: Same.\n\t* include/bits/locale_facets_nonio.tcc: Same.\n\t* include/bits/streambuf.tcc: Same.\n\t* include/bits/allocator.h: Same.\n\t* include/bits/fstream.tcc: Same.\n\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust line numbers.\n\nFrom-SVN: r170686", "tree": {"sha": "2e800ce8e0059816299afffdfdecfae29dbbb082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e800ce8e0059816299afffdfdecfae29dbbb082"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed4f96af593f3ac7fa5926fa31052bb97118534d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4f96af593f3ac7fa5926fa31052bb97118534d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4f96af593f3ac7fa5926fa31052bb97118534d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4f96af593f3ac7fa5926fa31052bb97118534d/comments", "author": null, "committer": null, "parents": [{"sha": "bc6ce33429e1ab0818366de28189d7b17900d46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc6ce33429e1ab0818366de28189d7b17900d46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc6ce33429e1ab0818366de28189d7b17900d46a"}], "stats": {"total": 409, "additions": 272, "deletions": 137}, "files": [{"sha": "9e1fc0aa52c9e3b696815a84fd2d2f33d663ee7e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1,7 +1,40 @@\n+2011-03-04  Benjamin Kosnik  <bkoz@chula>\n+\n+\t* src/Makefile.am (inst_sources): Make source instantion files\n+\tconditional.\n+\t(XTEMPLATE_FLAGS): Make -fno-implicit-templates conditional.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/valarray-inst.cc: Move to..\n+\t* src/valarray.cc: ...this.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_EXTERN_TEMPLATE]): Define.\n+\t* configure.ac (GLIBCXX_ENABLE_EXTERN_TEMPLATE): Use it.\n+\t* configure: Regenerate.\n+\t* include/Makefile.am (stamp-extern-template): Add.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* doc/xml/manual/configure.xml: Document --enable-extern-template.\n+\n+\t* include/bits/locale_classes.tcc: Adjust comment.\n+\t* include/bits/locale_facets.tcc: Same.\n+\t* include/bits/basic_ios.tcc: Same.\n+\t* include/bits/istream.tcc: Same.\n+\t* include/bits/codecvt.h: Same.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/bits/sstream.tcc: Same.\n+\t* include/bits/c++config: Same.\n+\t* include/bits/basic_string.tcc: Same.\n+\t* include/bits/ostream_insert.h: Same.\n+\t* include/bits/locale_facets_nonio.tcc: Same.\n+\t* include/bits/streambuf.tcc: Same.\n+\t* include/bits/allocator.h: Same.\n+\t* include/bits/fstream.tcc: Same.\n+\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust line numbers.\n+\n 2011-03-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n-        * testsuite/Makefile.am: Make clean fixups.\n-        * testsuite/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.am: Make clean fixups.\n+\t* testsuite/Makefile.in: Regenerate.\n \n 2011-03-02  Marc Glisse  <marc.glisse@normalesup.org>\n "}, {"sha": "3b9cdcb45c3e4d7747e7a68b3623401e58f43da1", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1992,6 +1992,25 @@ AC_DEFUN([GLIBCXX_ENABLE_CONCEPT_CHECKS], [\n   fi\n ])\n \n+dnl\n+dnl Use extern templates.\n+dnl\n+dnl --enable-extern-template defines _GLIBCXX_EXTERN_TEMPLATE to 1\n+dnl --disable-extern-template defines _GLIBCXX_EXTERN_TEMPLATE to 0\n+\n+dnl  +  Usage:  GLIBCXX_ENABLE_TEMPLATE[(DEFAULT)]\n+dnl       Where DEFAULT is `yes' or `no'.\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_EXTERN_TEMPLATE], [\n+\n+  GLIBCXX_ENABLE(extern-template,$1,,[enable extern template])\n+\n+  AC_MSG_CHECKING([for extern template support])\n+  AC_MSG_RESULT([$enable_extern_template])\n+\n+  GLIBCXX_CONDITIONAL(ENABLE_EXTERN_TEMPLATE, test $enable_extern_template = yes)\n+])\n+\n dnl\n dnl Check for parallel mode pre-requisites, including OpenMP support.\n dnl"}, {"sha": "c2288b308e98e0fa65abc489271e7d209e7c445a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -663,6 +663,8 @@ LIBICONV\n OPT_LDFLAGS\n SECTION_LDFLAGS\n GLIBCXX_LIBS\n+ENABLE_EXTERN_TEMPLATE_FALSE\n+ENABLE_EXTERN_TEMPLATE_TRUE\n EXTRA_CXX_FLAGS\n ENABLE_PARALLEL_FALSE\n ENABLE_PARALLEL_TRUE\n@@ -853,6 +855,7 @@ enable_libstdcxx_debug_flags\n enable_libstdcxx_debug\n enable_cxx_flags\n enable_fully_dynamic_string\n+enable_extern_template\n enable_libstdcxx_time\n enable_tls\n enable_rpath\n@@ -1539,6 +1542,8 @@ Optional Features:\n   --enable-fully-dynamic-string\n                           do not put empty strings in per-process static\n                           memory [default=no]\n+  --enable-extern-template\n+                          enable extern template [default=yes]\n   --enable-libstdcxx-time[=KIND]\n                           use KIND for check type [default=no]\n   --enable-tls            Use thread-local storage [default=yes]\n@@ -11482,7 +11487,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11485 \"configure\"\n+#line 11490 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11588,7 +11593,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11591 \"configure\"\n+#line 11596 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14946,7 +14951,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 14949 \"configure\"\n+#line 14954 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15314,7 +15319,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15317 \"configure\"\n+#line 15322 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15351,7 +15356,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15354 \"configure\"\n+#line 15359 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15388,7 +15393,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15391 \"configure\"\n+#line 15396 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15426,7 +15431,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15429 \"configure\"\n+#line 15434 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15502,7 +15507,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15505 \"configure\"\n+#line 15510 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -17134,6 +17139,29 @@ $as_echo \"#define _GLIBCXX_FULLY_DYNAMIC_STRING 1\" >>confdefs.h\n   fi\n \n \n+\n+   # Check whether --enable-extern-template was given.\n+if test \"${enable_extern_template+set}\" = set; then :\n+  enableval=$enable_extern_template;\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) as_fn_error \"Argument to enable/disable extern-template must be yes or no\" \"$LINENO\" 5 ;;\n+      esac\n+\n+else\n+  enable_extern_template=yes\n+fi\n+\n+\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for extern template support\" >&5\n+$as_echo_n \"checking for extern template support... \" >&6; }\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_extern_template\" >&5\n+$as_echo \"$enable_extern_template\" >&6; }\n+\n+\n+\n+\n # Checks for operating systems support that doesn't require linking.\n \n \n@@ -65345,6 +65373,15 @@ else\n fi\n \n \n+    if test $enable_extern_template = yes; then\n+  ENABLE_EXTERN_TEMPLATE_TRUE=\n+  ENABLE_EXTERN_TEMPLATE_FALSE='#'\n+else\n+  ENABLE_EXTERN_TEMPLATE_TRUE='#'\n+  ENABLE_EXTERN_TEMPLATE_FALSE=\n+fi\n+\n+\n     if test $enable_symvers != no; then\n   ENABLE_SYMVERS_TRUE=\n   ENABLE_SYMVERS_FALSE='#'\n@@ -65794,6 +65831,10 @@ if test -z \"${ENABLE_PARALLEL_TRUE}\" && test -z \"${ENABLE_PARALLEL_FALSE}\"; then\n   as_fn_error \"conditional \\\"ENABLE_PARALLEL\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ENABLE_EXTERN_TEMPLATE_TRUE}\" && test -z \"${ENABLE_EXTERN_TEMPLATE_FALSE}\"; then\n+  as_fn_error \"conditional \\\"ENABLE_EXTERN_TEMPLATE\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${ENABLE_SYMVERS_TRUE}\" && test -z \"${ENABLE_SYMVERS_FALSE}\"; then\n   as_fn_error \"conditional \\\"ENABLE_SYMVERS\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "8ac9cadf643bcb705603bad78484a06ae74c29e0", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -132,6 +132,7 @@ GLIBCXX_ENABLE_DEBUG([no])\n GLIBCXX_ENABLE_PARALLEL([yes])\n GLIBCXX_ENABLE_CXX_FLAGS\n GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING([no])\n+GLIBCXX_ENABLE_EXTERN_TEMPLATE([yes])\n \n # Checks for operating systems support that doesn't require linking.\n GLIBCXX_CHECK_SYSTEM_ERROR"}, {"sha": "6b1efa8006e638720955189b25edcbc9bbb5e030", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -161,6 +161,29 @@\n      </para>\n  </listitem></varlistentry>\n \n+\n+ <varlistentry><term><code>--enable-libstdcxx-time</code></term>\n+ <listitem><para>This is an abbreviated form of\n+\t<code>'--enable-libstdcxx-time=yes'</code>(described next).\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-libstdcxx-time=OPTION</code></term>\n+ <listitem><para>Enables link-type checks for the availability of the\n+\tclock_gettime clocks, used in the implementation of [time.clock],\n+\tand of the nanosleep and sched_yield functions, used in the\n+\timplementation of [thread.thread.this] of the current C++0x draft.\n+\tThe choice OPTION=yes checks for the availability of the facilities\n+\tin libc and libposix4.  In case of need the latter is also linked\n+\tto libstdc++ as part of the build process.  OPTION=rt also searches\n+\t(and, in case, links) librt.   Note that the latter is not always\n+\tdesirable because, in glibc, for example, in turn it triggers the\n+\tlinking of libpthread too, which activates locking, a large overhead\n+\tfor single-thread programs.  OPTION=no skips the tests completely.\n+\tThe default is OPTION=no.\n+    </para>\n+ </listitem></varlistentry>\n+\n  <varlistentry><term><code>--enable-libstdcxx-debug</code></term>\n  <listitem><para>Build separate debug libraries in addition to what is normally built.\n \tBy default, the debug libraries are compiled with\n@@ -313,6 +336,19 @@\n      </para>\n  </listitem></varlistentry>\n \n+\n+ <varlistentry><term><code>--enable-extern-template</code>[default]</term>\n+ <listitem><para>Use extern template to pre-instantiate all required\n+ \tspecializations for certain types defined in the standard libraries. \n+\tThese types include <classname>string</classname> and dependents like\n+\t<classname>char_traits</classname>, the templateized io classes,\n+\t<classname>allocator</classname>, and others.  \n+\tDisabling means that implicit\n+\ttemplate generation will be used when compiling these types.  By\n+\tdefault, this option is on. This option can change the library ABI.\n+     </para>\n+ </listitem></varlistentry>\n+\n  <varlistentry><term><code>--disable-hosted-libstdcxx</code></term>\n  <listitem>\n    <para>\n@@ -324,28 +360,6 @@\n      </para>\n  </listitem></varlistentry>\n \n- <varlistentry><term><code>--enable-libstdcxx-time</code></term>\n- <listitem><para>This is an abbreviated form of\n-\t<code>'--enable-libstdcxx-time=yes'</code>(described next).\n-     </para>\n- </listitem></varlistentry>\n-\n- <varlistentry><term><code>--enable-libstdcxx-time=OPTION</code></term>\n- <listitem><para>Enables link-type checks for the availability of the\n-\tclock_gettime clocks, used in the implementation of [time.clock],\n-\tand of the nanosleep and sched_yield functions, used in the\n-\timplementation of [thread.thread.this] of the current C++0x draft.\n-\tThe choice OPTION=yes checks for the availability of the facilities\n-\tin libc and libposix4.  In case of need the latter is also linked\n-\tto libstdc++ as part of the build process.  OPTION=rt also searches\n-\t(and, in case, links) librt.   Note that the latter is not always\n-\tdesirable because, in glibc, for example, in turn it triggers the\n-\tlinking of libpthread too, which activates locking, a large overhead\n-\tfor single-thread programs.  OPTION=no skips the tests completely.\n-\tThe default is OPTION=no.\n-    </para>\n- </listitem></varlistentry>\n-\n </variablelist>\n \n </section>"}, {"sha": "165adc1574d1f69c41401e86325ca90dbb6dd0e4", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1067,6 +1067,14 @@ stamp-namespace-version:\n \techo 0 > stamp-namespace-version\n endif\n \n+if ENABLE_EXTERN_TEMPLATE\n+stamp-extern-template:\n+\techo 1 > stamp-extern-template\n+else\n+stamp-extern-template:\n+\techo 0 > stamp-extern-template\n+endif\n+\n if ENABLE_VISIBILITY\n stamp-visibility:\n \techo 1 > stamp-visibility\n@@ -1082,17 +1090,20 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-${host_alias} \\\n \t\t\t      ${toplevel_srcdir}/gcc/DATESTAMP \\\n \t\t\t      stamp-namespace-version \\\n-\t\t\t      stamp-visibility\n+\t\t\t      stamp-visibility \\\n+\t\t\t      stamp-extern-template\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \tns_version=`cat stamp-namespace-version` ;\\\n \tvisibility=`cat stamp-visibility` ;\\\n+\texterntemplate=`cat stamp-extern-template` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[ \t]*#[ \t]*define[ \t][ \t]*_GLIBCXX_LONG_DOUBLE_COMPAT[ \t][ \t]*1[ \t]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n \t&& ldbl_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_COMPAT 1,' ;\\\n \tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n \t-e \"s,define _GLIBCXX_INLINE_VERSION, define _GLIBCXX_INLINE_VERSION $$ns_version,\" \\\n \t-e \"s,define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY, define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY $$visibility,\" \\\n+\t-e \"s,define _GLIBCXX_EXTERN_TEMPLATE, define _GLIBCXX_EXTERN_TEMPLATE $$externtemplate,\" \\\n \t-e \"$$ldbl_compat\" \\\n             < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\"}, {"sha": "4f0bb723d1639b41a5da10df2ef44144736cabca", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1462,6 +1462,11 @@ stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@stamp-namespace-version:\n @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\techo 0 > stamp-namespace-version\n \n+@ENABLE_EXTERN_TEMPLATE_TRUE@stamp-extern-template:\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\techo 1 > stamp-extern-template\n+@ENABLE_EXTERN_TEMPLATE_FALSE@stamp-extern-template:\n+@ENABLE_EXTERN_TEMPLATE_FALSE@\techo 0 > stamp-extern-template\n+\n @ENABLE_VISIBILITY_TRUE@stamp-visibility:\n @ENABLE_VISIBILITY_TRUE@\techo 1 > stamp-visibility\n @ENABLE_VISIBILITY_FALSE@stamp-visibility:\n@@ -1474,17 +1479,20 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-${host_alias} \\\n \t\t\t      ${toplevel_srcdir}/gcc/DATESTAMP \\\n \t\t\t      stamp-namespace-version \\\n-\t\t\t      stamp-visibility\n+\t\t\t      stamp-visibility \\\n+\t\t\t      stamp-extern-template\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \tns_version=`cat stamp-namespace-version` ;\\\n \tvisibility=`cat stamp-visibility` ;\\\n+\texterntemplate=`cat stamp-extern-template` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[ \t]*#[ \t]*define[ \t][ \t]*_GLIBCXX_LONG_DOUBLE_COMPAT[ \t][ \t]*1[ \t]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n \t&& ldbl_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_COMPAT 1,' ;\\\n \tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n \t-e \"s,define _GLIBCXX_INLINE_VERSION, define _GLIBCXX_INLINE_VERSION $$ns_version,\" \\\n \t-e \"s,define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY, define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY $$visibility,\" \\\n+\t-e \"s,define _GLIBCXX_EXTERN_TEMPLATE, define _GLIBCXX_EXTERN_TEMPLATE $$externtemplate,\" \\\n \t-e \"$$ldbl_compat\" \\\n             < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\"}, {"sha": "9d01a602dae6d8f68926ddc79c8e914668571667", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1,7 +1,7 @@\n // Allocators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -139,7 +139,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB: This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class allocator<char>;\n   extern template class allocator<wchar_t>;\n@@ -235,6 +234,6 @@ _GLIBCXX_HAS_NESTED_TYPE(allocator_type)\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif"}, {"sha": "8ac6bfdbe1e23a5798dc2e2c64a3d374fb7bf21d", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1,7 +1,7 @@\n // basic_ios member functions -*- C++ -*-\n \n // Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-// 2009, 2010  Free Software Foundation, Inc.\n+// 2009, 2010, 2011  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -175,7 +175,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB:  This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_ios<char>;\n \n@@ -185,6 +184,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif"}, {"sha": "d988334274e15632c84a8404ae468b0600bf507f", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1130,7 +1130,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB: This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE > 0\n   extern template class basic_string<char>;\n   extern template\n@@ -1164,6 +1163,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif"}, {"sha": "e334f94d3ddccd15ece37aa536e36f6b2438e799", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -109,9 +109,7 @@\n // Special case: _GLIBCXX_EXTERN_TEMPLATE == -1 disallows extern\n // templates only in basic_string, thus activating its debug-mode\n // checks even at -O0.\n-#ifndef _GLIBCXX_EXTERN_TEMPLATE\n-# define _GLIBCXX_EXTERN_TEMPLATE 1\n-#endif\n+#define _GLIBCXX_EXTERN_TEMPLATE\n \n /*\n   Outline of libstdc++ namespaces."}, {"sha": "6ae9bbe26de22c60dcf40a81c31d9da571670270", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1,7 +1,7 @@\n // Locale support (codecvt) -*- C++ -*-\n \n // Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-// 2009, 2010  Free Software Foundation, Inc.\n+// 2009, 2010, 2011  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -476,7 +476,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB: This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class codecvt_byname<char, char, mbstate_t>;\n \n@@ -502,6 +501,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif // _CODECVT_H"}, {"sha": "3d5ca62ad9cda075cb83142b230513e6762cdcd6", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -964,7 +964,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB:  This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_filebuf<char>;\n   extern template class basic_ifstream<char>;\n@@ -980,6 +979,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif"}, {"sha": "9055c31ce1299addcb69f6ca3055cb9c95e00f17", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1038,7 +1038,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB:  This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_istream<char>;\n   extern template istream& ws(istream&);\n@@ -1090,6 +1089,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif"}, {"sha": "5b2901aea9e6b1669bf39beed65cf394a0f11d3f", "filename": "libstdc++-v3/include/bits/locale_classes.tcc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -241,7 +241,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB: This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class collate<char>;\n   extern template class collate_byname<char>;\n@@ -269,6 +268,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif"}, {"sha": "80bda15ac2a34d811136e39d4d162a6148ed4eab", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1,7 +1,7 @@\n // Locale support -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010\n+// 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1276,7 +1276,6 @@ _GLIBCXX_END_NAMESPACE_LDBL\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB: This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class numpunct<char>;\n   extern template class numpunct_byname<char>;"}, {"sha": "fbf70053549cbde1e3d9e028099e8e63100cd336", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -1215,7 +1215,6 @@ _GLIBCXX_END_NAMESPACE_LDBL\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB: This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class moneypunct<char, false>;\n   extern template class moneypunct<char, true>;\n@@ -1369,6 +1368,6 @@ _GLIBCXX_END_NAMESPACE_LDBL\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif"}, {"sha": "c0dce6a232b36af263772f5927c2dac42520a7a3", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -357,7 +357,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB:  This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_ostream<char>;\n   extern template ostream& endl(ostream&);\n@@ -405,6 +404,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif"}, {"sha": "f4228657d1b1f9a65ca94357a04c7b0a9485648c", "filename": "libstdc++-v3/include/bits/ostream_insert.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -114,7 +114,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB:  This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template ostream& __ostream_insert(ostream&, const char*, streamsize);\n \n@@ -125,6 +124,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif /* _OSTREAM_INSERT_H */"}, {"sha": "89b9a547c25ea0cbed4d92fe0191a1e96702a7d7", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -270,7 +270,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB:  This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_stringbuf<char>;\n   extern template class basic_istringstream<char>;\n@@ -286,6 +285,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif"}, {"sha": "6cb85fc1818cd90180338b82265c689f5f89d796", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -146,7 +146,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n-  // NB:  This syntax is a GNU extension.\n #if _GLIBCXX_EXTERN_TEMPLATE\n   extern template class basic_streambuf<char>;\n   extern template\n@@ -172,6 +171,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif"}, {"sha": "f52993b54cbf79200694df90667547f6824d5406", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -1,7 +1,7 @@\n ## Makefile for the src subdirectory of the GNU C++ Standard library.\n ##\n ## Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n-## 2006, 2007, 2008, 2009, 2010\n+## 2006, 2007, 2008, 2009, 2010, 2011\n ## Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n@@ -108,7 +108,7 @@ host_sources = \\\n \tmessages_members.cc \\\n \tmonetary_members.cc \\\n \tnumeric_members.cc \\\n-\ttime_members.cc \n+\ttime_members.cc\n \n codecvt_members.cc: ${glibcxx_srcdir}/$(CCODECVT_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CCODECVT_CC) . || true\n@@ -138,7 +138,8 @@ atomicity.cc: ${atomicity_file}\n # Source files linked in via configuration/make substitution for a\n # particular host, but with ad hoc naming rules.\n host_sources_extra = \\\n-\tbasic_file.cc c++locale.cc ${ldbl_compat_sources} ${parallel_sources}\n+\tbasic_file.cc c++locale.cc \\\n+\t${inst_sources} ${ldbl_compat_sources} ${parallel_sources}\n \n c++locale.cc: ${glibcxx_srcdir}/$(CLOCALE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CLOCALE_CC) ./$@ || true\n@@ -148,8 +149,8 @@ basic_file.cc: ${glibcxx_srcdir}/$(BASIC_FILE_CC)\n \n if ENABLE_PARALLEL\n parallel_sources = parallel_settings.cc \\\n-\t           compatibility-parallel_list.cc \\\n-\t           compatibility-parallel_list-2.cc \n+\t\t   compatibility-parallel_list.cc \\\n+\t\t   compatibility-parallel_list-2.cc\n else\n parallel_sources =\n endif\n@@ -160,7 +161,30 @@ else\n ldbl_compat_sources =\n endif\n \n-# Sources present in the src directory.\n+if ENABLE_EXTERN_TEMPLATE\n+XTEMPLATE_FLAGS = -fno-implicit-templates\n+inst_sources = \\\n+\tallocator-inst.cc \\\n+\tconcept-inst.cc \\\n+\text-inst.cc \\\n+\tfstream-inst.cc \\\n+\tios-inst.cc \\\n+\tiostream-inst.cc \\\n+\tistream-inst.cc \\\n+\tlocale-inst.cc \\\n+\tmisc-inst.cc \\\n+\tostream-inst.cc \\\n+\tsstream-inst.cc \\\n+\tstreambuf-inst.cc \\\n+\tstring-inst.cc \\\n+\twlocale-inst.cc \\\n+\twstring-inst.cc\n+else\n+XTEMPLATE_FLAGS =\n+inst_sources =\n+endif\n+\n+# Sources present in the src directory, always present.\n sources = \\\n \tatomic.cc \\\n \tbitmap_allocator.cc \\\n@@ -198,33 +222,18 @@ sources = \\\n \tstrstream.cc \\\n \tsystem_error.cc \\\n \ttree.cc \\\n-\tallocator-inst.cc \\\n-\tconcept-inst.cc \\\n-\tfstream-inst.cc \\\n-\text-inst.cc \\\n-\tios-inst.cc \\\n-\tiostream-inst.cc \\\n-\tistream-inst.cc \\\n \tistream.cc \\\n-\tlocale-inst.cc \\\n-\tmisc-inst.cc \\\n-\tostream-inst.cc \\\n \tplaceholders.cc \\\n \tregex.cc \\\n-\tsstream-inst.cc \\\n-\tstreambuf-inst.cc \\\n \tstreambuf.cc \\\n-\tstring-inst.cc \\\n-\tvalarray-inst.cc \\\n-\twlocale-inst.cc \\\n-\twstring-inst.cc \\\n \tmutex.cc \\\n \tcondition_variable.cc \\\n \tchrono.cc \\\n \tthread.cc \\\n \tfuture.cc \\\n+\tvalarray.cc \\\n \t${host_sources} \\\n-\t${host_sources_extra} \n+\t${host_sources_extra}\n \n vpath % $(top_srcdir)/src\n vpath % $(top_srcdir)\n@@ -240,7 +249,7 @@ libstdc___la_DEPENDENCIES = \\\n \t$(top_builddir)/libsupc++/libsupc++convenience.la\n \n libstdc___la_LDFLAGS = \\\n-\t-version-info $(libtool_VERSION) ${version_arg} -lm \n+\t-version-info $(libtool_VERSION) ${version_arg} -lm\n \n libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS)\n \n@@ -383,7 +392,7 @@ endif\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion calls for it.\n AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n+\t$(XTEMPLATE_FLAGS) \\\n \t$(WARN_CXXFLAGS) \\\n \t$(OPTIMIZE_CXXFLAGS) \\\n \t$(CONFIG_CXXFLAGS)\n@@ -407,8 +416,10 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile \\\n-\t       $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX \\\n+\t       $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile \\\n+\t       $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n+\t       $(AM_CXXFLAGS) $(CXXFLAGS)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n "}, {"sha": "9b65811f2c4dbb6762de564fdf83c8f5df20e2bb", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 52, "deletions": 40, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -91,13 +91,21 @@ am__DEPENDENCIES_1 =\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n \tnumeric_members.lo time_members.lo\n-@GLIBCXX_LDBL_COMPAT_TRUE@am__objects_2 = compatibility-ldbl.lo\n-@ENABLE_PARALLEL_TRUE@am__objects_3 = parallel_settings.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_2 = allocator-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tconcept-inst.lo ext-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tfstream-inst.lo ios-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tiostream-inst.lo istream-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tlocale-inst.lo misc-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tostream-inst.lo sstream-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tstreambuf-inst.lo string-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\twlocale-inst.lo wstring-inst.lo\n+@GLIBCXX_LDBL_COMPAT_TRUE@am__objects_3 = compatibility-ldbl.lo\n+@ENABLE_PARALLEL_TRUE@am__objects_4 = parallel_settings.lo \\\n @ENABLE_PARALLEL_TRUE@\tcompatibility-parallel_list.lo \\\n @ENABLE_PARALLEL_TRUE@\tcompatibility-parallel_list-2.lo\n-am__objects_4 = basic_file.lo c++locale.lo $(am__objects_2) \\\n-\t$(am__objects_3)\n-am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n+am__objects_5 = basic_file.lo c++locale.lo $(am__objects_2) \\\n+\t$(am__objects_3) $(am__objects_4)\n+am__objects_6 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tmt_allocator.lo codecvt.lo compatibility.lo \\\n \tcompatibility-c++0x.lo compatibility-debug_list.lo \\\n \tcompatibility-debug_list-2.lo compatibility-list.lo \\\n@@ -107,15 +115,11 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tios_init.lo ios_locale.lo limits.lo list.lo locale.lo \\\n \tlocale_init.lo locale_facets.lo localename.lo \\\n \tmath_stubs_float.lo math_stubs_long_double.lo stdexcept.lo \\\n-\tstrstream.lo system_error.lo tree.lo allocator-inst.lo \\\n-\tconcept-inst.lo fstream-inst.lo ext-inst.lo ios-inst.lo \\\n-\tiostream-inst.lo istream-inst.lo istream.lo locale-inst.lo \\\n-\tmisc-inst.lo ostream-inst.lo placeholders.lo regex.lo \\\n-\tsstream-inst.lo streambuf-inst.lo streambuf.lo string-inst.lo \\\n-\tvalarray-inst.lo wlocale-inst.lo wstring-inst.lo mutex.lo \\\n+\tstrstream.lo system_error.lo tree.lo istream.lo \\\n+\tplaceholders.lo regex.lo streambuf.lo mutex.lo \\\n \tcondition_variable.lo chrono.lo thread.lo future.lo \\\n-\t$(am__objects_1) $(am__objects_4)\n-am_libstdc___la_OBJECTS = $(am__objects_5)\n+\tvalarray.lo $(am__objects_1) $(am__objects_5)\n+am_libstdc___la_OBJECTS = $(am__objects_6)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n depcomp =\n@@ -360,24 +364,45 @@ host_sources = \\\n \tmessages_members.cc \\\n \tmonetary_members.cc \\\n \tnumeric_members.cc \\\n-\ttime_members.cc \n+\ttime_members.cc\n \n atomicity_file = ${glibcxx_srcdir}/$(ATOMICITY_SRCDIR)/atomicity.h\n \n # Source files linked in via configuration/make substitution for a\n # particular host, but with ad hoc naming rules.\n host_sources_extra = \\\n-\tbasic_file.cc c++locale.cc ${ldbl_compat_sources} ${parallel_sources}\n+\tbasic_file.cc c++locale.cc \\\n+\t${inst_sources} ${ldbl_compat_sources} ${parallel_sources}\n \n @ENABLE_PARALLEL_FALSE@parallel_sources = \n @ENABLE_PARALLEL_TRUE@parallel_sources = parallel_settings.cc \\\n-@ENABLE_PARALLEL_TRUE@\t           compatibility-parallel_list.cc \\\n-@ENABLE_PARALLEL_TRUE@\t           compatibility-parallel_list-2.cc \n+@ENABLE_PARALLEL_TRUE@\t\t   compatibility-parallel_list.cc \\\n+@ENABLE_PARALLEL_TRUE@\t\t   compatibility-parallel_list-2.cc\n \n @GLIBCXX_LDBL_COMPAT_FALSE@ldbl_compat_sources = \n @GLIBCXX_LDBL_COMPAT_TRUE@ldbl_compat_sources = compatibility-ldbl.cc\n-\n-# Sources present in the src directory.\n+@ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n+@ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@ENABLE_EXTERN_TEMPLATE_FALSE@inst_sources = \n+@ENABLE_EXTERN_TEMPLATE_TRUE@inst_sources = \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tallocator-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tconcept-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\text-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tfstream-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tios-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tiostream-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tistream-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tlocale-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tmisc-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tostream-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tsstream-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tstreambuf-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\twlocale-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-inst.cc\n+\n+\n+# Sources present in the src directory, always present.\n sources = \\\n \tatomic.cc \\\n \tbitmap_allocator.cc \\\n@@ -415,33 +440,18 @@ sources = \\\n \tstrstream.cc \\\n \tsystem_error.cc \\\n \ttree.cc \\\n-\tallocator-inst.cc \\\n-\tconcept-inst.cc \\\n-\tfstream-inst.cc \\\n-\text-inst.cc \\\n-\tios-inst.cc \\\n-\tiostream-inst.cc \\\n-\tistream-inst.cc \\\n \tistream.cc \\\n-\tlocale-inst.cc \\\n-\tmisc-inst.cc \\\n-\tostream-inst.cc \\\n \tplaceholders.cc \\\n \tregex.cc \\\n-\tsstream-inst.cc \\\n-\tstreambuf-inst.cc \\\n \tstreambuf.cc \\\n-\tstring-inst.cc \\\n-\tvalarray-inst.cc \\\n-\twlocale-inst.cc \\\n-\twstring-inst.cc \\\n \tmutex.cc \\\n \tcondition_variable.cc \\\n \tchrono.cc \\\n \tthread.cc \\\n \tfuture.cc \\\n+\tvalarray.cc \\\n \t${host_sources} \\\n-\t${host_sources_extra} \n+\t${host_sources_extra}\n \n libstdc___la_SOURCES = $(sources)\n libstdc___la_LIBADD = \\\n@@ -453,7 +463,7 @@ libstdc___la_DEPENDENCIES = \\\n \t$(top_builddir)/libsupc++/libsupc++convenience.la\n \n libstdc___la_LDFLAGS = \\\n-\t-version-info $(libtool_VERSION) ${version_arg} -lm \n+\t-version-info $(libtool_VERSION) ${version_arg} -lm\n \n libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS)\n \n@@ -470,7 +480,7 @@ PARALLEL_FLAGS = -fopenmp -D_GLIBCXX_PARALLEL -I$(glibcxx_builddir)/../libgomp\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion calls for it.\n AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n+\t$(XTEMPLATE_FLAGS) \\\n \t$(WARN_CXXFLAGS) \\\n \t$(OPTIMIZE_CXXFLAGS) \\\n \t$(CONFIG_CXXFLAGS)\n@@ -494,8 +504,10 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile \\\n-\t       $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX \\\n+\t       $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile \\\n+\t       $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n+\t       $(AM_CXXFLAGS) $(CXXFLAGS)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n "}, {"sha": "4d21ab171bad2ad3774aa8f421fa001cd9e1a8dc", "filename": "libstdc++-v3/src/valarray.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fsrc%2Fvalarray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Fsrc%2Fvalarray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fvalarray.cc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "previous_filename": "libstdc++-v3/src/valarray-inst.cc"}, {"sha": "174a8af556c964712469af7c7389b57d5ea2ed72", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f96af593f3ac7fa5926fa31052bb97118534d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=ed4f96af593f3ac7fa5926fa31052bb97118534d", "patch": "@@ -22,4 +22,4 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 243 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 241 }"}]}