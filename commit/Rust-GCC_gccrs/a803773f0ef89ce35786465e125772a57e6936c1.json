{"sha": "a803773f0ef89ce35786465e125772a57e6936c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgwMzc3M2YwZWY4OWNlMzU3ODY0NjVlMTI1NzcyYTU3ZTY5MzZjMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-12-01T13:46:36Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-12-01T13:46:36Z"}, "message": "common.opt (main_input_filename, [...]): New Variable entries.\n\n\t* common.opt (main_input_filename, main_input_basename,\n\tmain_input_baselength): New Variable entries.  From toplev.c.\n\t* final.c (output_quoted_string): Move from toplev.c.\n\t* output.h (output_quoted_string): Move from toplev.h.\n\t* opts-global.c (read_cmdline_options): Use gcc_options pointer to\n\taccess main_input_filename, main_input_baselength and\n\tmain_input_basename.\n\t* targhooks.c: Include intl.h and opts.h.\n\t(option_affects_pch_p, default_get_pch_validity): Move from\n\ttoplev.c.\n\t* targhooks.h (option_affects_pch_p, default_get_pch_validity):\n\tMove from toplev.h.\n\t* toplev.c (main_input_filename, main_input_basename,\n\tmain_input_baselength): Move to common.opt.\n\t(output_quoted_string): Move to final.c.\n\t(warn_deprecated_use): Move to tree.c.\n\t(option_affects_pch_p, default_get_pch_validity,\n\tpch_option_mismatch, default_pch_valid_p): Move to targhooks.c.\n\t* toplev.h (skip_leading_substring): Move to tree-dump.c.\n\t(warn_deprecated_use): Move to tree.h.\n\t(output_quoted_string): Move to output.h.\n\t(main_input_filename, main_input_basename, main_input_baselength):\n\tMove to common.opt.\n\t(default_get_pch_validity, default_pch_valid_p): Move to\n\ttarghooks.c.\n\t* tree-dump.c (skip_leading_substring): Move from toplev.h.\n\t* tree.c (warn_deprecated_use): Move from toplev.c.\n\t* tree.h (warn_deprecated_use): Move from toplev.h.\n\t* c-typeck.c, config/alpha/alpha.c, config/arc/arc.c,\n\tconfig/arm/arm.c, config/avr/avr.c, config/bfin/bfin.c,\n\tconfig/cris/cris.c, config/crx/crx.c, config/fr30/fr30.c,\n\tconfig/frv/frv.c, config/h8300/h8300.c, config/ia64/ia64.c,\n\tconfig/iq2000/iq2000.c, config/lm32/lm32.c, config/m32c/m32c.c,\n\tconfig/m32r/m32r.c, config/m68hc11/m68hc11.c, config/m68k/m68k.c,\n\tconfig/mcore/mcore.c, config/mep/mep.c,\n\tconfig/microblaze/microblaze.c, config/mips/mips.c,\n\tconfig/mmix/mmix.c, config/mn10300/mn10300.c,\n\tconfig/moxie/moxie.c, config/pa/pa.c, config/pdp11/pdp11.c,\n\tconfig/picochip/picochip.c, config/s390/s390.c,\n\tconfig/score/score.c, config/sh/sh.c, config/sparc/sparc.c,\n\tconfig/spu/spu.c, config/stormy16/stormy16.c, config/v850/v850.c,\n\tconfig/vax/vax.c, config/xtensa/xtensa.c, gimple-low.c,\n\tgraphite-sese-to-poly.c, plugin.c, tree-cfg.c, tree-inline.c,\n\tvarasm.c, xcoffout.c: Don't include toplev.h.\n\t* Makefile.in (c-typeck.o, tree-inline.o, tree-cfg.o,\n\tgimple-low.o, graphite-sese-to-poly.o, targhooks.o, plugin.o,\n\tvarasm.o, xcoffout.o): Update dependencies.\n\t* config/arm/t-arm (arm.o): Update dependencies.\n\t* config/spu/t-spu-elf (spu.o): Update dependencies.\n\ncp:\n\t* cp-objcp-common.c, lex.c, typeck.c: Don't include toplev.h.\n\t* Make-lang.in (cp/lex.o, cp/cp-objcp-common.o, cp/typeck2.o):\n\tUpdate dependencies.\n\njava:\n\t* jcf-parse.c: Don't include toplev.h.\n\t* Make-lang.in (java/jcf-parse.o): Don't depend on toplev.h.\n\nFrom-SVN: r167329", "tree": {"sha": "e655a7d31d6c68b342a1dffa891111f94d224b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e655a7d31d6c68b342a1dffa891111f94d224b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a803773f0ef89ce35786465e125772a57e6936c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a803773f0ef89ce35786465e125772a57e6936c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a803773f0ef89ce35786465e125772a57e6936c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a803773f0ef89ce35786465e125772a57e6936c1/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "950691fafdacb0ba46cc56e52001b26f8542da3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950691fafdacb0ba46cc56e52001b26f8542da3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/950691fafdacb0ba46cc56e52001b26f8542da3f"}], "stats": {"total": 690, "additions": 352, "deletions": 338}, "files": [{"sha": "00e29e249a6f4baf6148b257b94cdc585a6790b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -1,3 +1,55 @@\n+2010-12-01  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (main_input_filename, main_input_basename,\n+\tmain_input_baselength): New Variable entries.  From toplev.c.\n+\t* final.c (output_quoted_string): Move from toplev.c.\n+\t* output.h (output_quoted_string): Move from toplev.h.\n+\t* opts-global.c (read_cmdline_options): Use gcc_options pointer to\n+\taccess main_input_filename, main_input_baselength and\n+\tmain_input_basename.\n+\t* targhooks.c: Include intl.h and opts.h.\n+\t(option_affects_pch_p, default_get_pch_validity): Move from\n+\ttoplev.c.\n+\t* targhooks.h (option_affects_pch_p, default_get_pch_validity):\n+\tMove from toplev.h.\n+\t* toplev.c (main_input_filename, main_input_basename,\n+\tmain_input_baselength): Move to common.opt.\n+\t(output_quoted_string): Move to final.c.\n+\t(warn_deprecated_use): Move to tree.c.\n+\t(option_affects_pch_p, default_get_pch_validity,\n+\tpch_option_mismatch, default_pch_valid_p): Move to targhooks.c.\n+\t* toplev.h (skip_leading_substring): Move to tree-dump.c.\n+\t(warn_deprecated_use): Move to tree.h.\n+\t(output_quoted_string): Move to output.h.\n+\t(main_input_filename, main_input_basename, main_input_baselength):\n+\tMove to common.opt.\n+\t(default_get_pch_validity, default_pch_valid_p): Move to\n+\ttarghooks.c.\n+\t* tree-dump.c (skip_leading_substring): Move from toplev.h.\n+\t* tree.c (warn_deprecated_use): Move from toplev.c.\n+\t* tree.h (warn_deprecated_use): Move from toplev.h.\n+\t* c-typeck.c, config/alpha/alpha.c, config/arc/arc.c,\n+\tconfig/arm/arm.c, config/avr/avr.c, config/bfin/bfin.c,\n+\tconfig/cris/cris.c, config/crx/crx.c, config/fr30/fr30.c,\n+\tconfig/frv/frv.c, config/h8300/h8300.c, config/ia64/ia64.c,\n+\tconfig/iq2000/iq2000.c, config/lm32/lm32.c, config/m32c/m32c.c,\n+\tconfig/m32r/m32r.c, config/m68hc11/m68hc11.c, config/m68k/m68k.c,\n+\tconfig/mcore/mcore.c, config/mep/mep.c,\n+\tconfig/microblaze/microblaze.c, config/mips/mips.c,\n+\tconfig/mmix/mmix.c, config/mn10300/mn10300.c,\n+\tconfig/moxie/moxie.c, config/pa/pa.c, config/pdp11/pdp11.c,\n+\tconfig/picochip/picochip.c, config/s390/s390.c,\n+\tconfig/score/score.c, config/sh/sh.c, config/sparc/sparc.c,\n+\tconfig/spu/spu.c, config/stormy16/stormy16.c, config/v850/v850.c,\n+\tconfig/vax/vax.c, config/xtensa/xtensa.c, gimple-low.c,\n+\tgraphite-sese-to-poly.c, plugin.c, tree-cfg.c, tree-inline.c,\n+\tvarasm.c, xcoffout.c: Don't include toplev.h.\n+\t* Makefile.in (c-typeck.o, tree-inline.o, tree-cfg.o,\n+\tgimple-low.o, graphite-sese-to-poly.o, targhooks.o, plugin.o,\n+\tvarasm.o, xcoffout.o): Update dependencies.\n+\t* config/arm/t-arm (arm.o): Update dependencies.\n+\t* config/spu/t-spu-elf (spu.o): Update dependencies.\n+\n 2010-12-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46730"}, {"sha": "a3ea7a36c680b6c87feb1f27d6de3ee8d880d835", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -2050,7 +2050,7 @@ c-parser.o : c-parser.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \n c-typeck.o : c-typeck.c c-lang.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(C_TREE_H) $(TARGET_H) $(FLAGS_H) intl.h output.h $(EXPR_H) \\\n-\ttoplev.h langhooks.h tree-iterator.h $(BITMAP_H) $(GIMPLE_H)\n+\tlanghooks.h tree-iterator.h $(BITMAP_H) $(GIMPLE_H)\n \n \n \n@@ -2352,7 +2352,7 @@ tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    tree-iterator.h $(TREE_PASS_H) $(DIAGNOSTIC_H)\n tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) $(INPUT_H) insn-config.h \\\n-   $(HASHTAB_H) toplev.h langhooks.h $(TREE_INLINE_H) $(CGRAPH_H) \\\n+   $(HASHTAB_H) langhooks.h $(TREE_INLINE_H) $(CGRAPH_H) \\\n    intl.h $(FUNCTION_H) $(GIMPLE_H) \\\n    debug.h $(DIAGNOSTIC_H) $(EXCEPT_H) $(TREE_FLOW_H) tree-iterator.h tree-mudflap.h \\\n    $(IPA_PROP_H) value-prof.h $(TREE_PASS_H) $(TARGET_H) $(INTEGRATE_H) \\\n@@ -2498,7 +2498,7 @@ tree-cfg.o : tree-cfg.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) $(FLAGS_H) output.h \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) $(EXCEPT_H) langhooks.h $(CFGLOOP_H) $(TREE_PASS_H) \\\n-   $(CFGLAYOUT_H) $(BASIC_BLOCK_H) toplev.h \\\n+   $(CFGLAYOUT_H) $(BASIC_BLOCK_H) \\\n    value-prof.h tree-ssa-propagate.h $(TREE_INLINE_H) tree-pretty-print.h \\\n    gimple-pretty-print.h\n tree-cfgcleanup.o : tree-cfgcleanup.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n@@ -2646,7 +2646,7 @@ gimple-low.o : gimple-low.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(DIAGNOSTIC_H) $(GIMPLE_H) $(TREE_INLINE_H) langhooks.h \\\n    $(LANGHOOKS_DEF_H) $(TREE_FLOW_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    $(EXCEPT_H) $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(EXPR_H) $(TREE_PASS_H) \\\n-   $(HASHTAB_H) toplev.h $(DIAGNOSTIC_CORE_H) tree-iterator.h\n+   $(HASHTAB_H) $(DIAGNOSTIC_CORE_H) tree-iterator.h\n omp-low.o : omp-low.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(GIMPLE_H) $(TREE_INLINE_H) langhooks.h $(DIAGNOSTIC_CORE_H) \\\n    $(TREE_FLOW_H) $(TIMEVAR_H) $(FLAGS_H) $(EXPR_H) $(DIAGNOSTIC_CORE_H) \\\n@@ -2732,7 +2732,7 @@ graphite-scop-detection.o: graphite-scop-detection.c $(CONFIG_H) $(SYSTEM_H) \\\n    graphite-scop-detection.h graphite-poly.h\n graphite-sese-to-poly.o: graphite-sese-to-poly.c $(CONFIG_H) \\\n    $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(GGC_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) toplev.h $(DIAGNOSTIC_CORE_H) \\\n+   $(GGC_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) $(DIAGNOSTIC_CORE_H) \\\n    $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) $(GIMPLE_H) \\\n    $(TREE_DATA_REF_H) tree-pass.h domwalk.h graphite.h \\\n    pointer-set.h value-prof.h graphite-ppl.h sese.h \\\n@@ -2836,7 +2836,7 @@ opts-common.o : opts-common.c $(OPTS_H) $(FLAGS_H) $(CONFIG_H) $(SYSTEM_H) \\\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(EXPR_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FUNCTION_H) output.h $(DIAGNOSTIC_CORE_H) \\\n    $(MACHMODE_H) $(TARGET_DEF_H) $(TARGET_H) $(GGC_H) gt-targhooks.h \\\n-   $(OPTABS_H) $(RECOG_H) reload.h hard-reg-set.h\n+   $(OPTABS_H) $(RECOG_H) reload.h hard-reg-set.h intl.h $(OPTS_H)\n \n bversion.h: s-bversion; @true\n s-bversion: BASE-VER\n@@ -2878,7 +2878,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(PLUGIN_H)\n \n plugin.o : plugin.c $(PLUGIN_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   toplev.h $(DIAGNOSTIC_CORE_H) $(TREE_H) $(TREE_PASS_H) intl.h $(PLUGIN_VERSION_H) $(GGC_H)\n+   $(DIAGNOSTIC_CORE_H) $(TREE_H) $(TREE_PASS_H) intl.h $(PLUGIN_VERSION_H) $(GGC_H)\n \n main.o : main.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(DIAGNOSTIC_CORE_H)\n \n@@ -2902,7 +2902,7 @@ rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(DIA\n \n varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) hard-reg-set.h $(REGS_H) \\\n-   output.h toplev.h $(DIAGNOSTIC_CORE_H) xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n+   output.h $(DIAGNOSTIC_CORE_H) xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n    $(HASHTAB_H) $(TARGET_H) langhooks.h gt-varasm.h $(BASIC_BLOCK_H) \\\n    $(CFGLAYOUT_H) $(CGRAPH_H) targhooks.h tree-mudflap.h \\\n    tree-iterator.h pointer-set.h\n@@ -2983,7 +2983,7 @@ dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n vmsdbgout.o : vmsdbgout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) version.h \\\n    $(FLAGS_H) $(RTL_H) output.h vmsdbg.h debug.h langhooks.h $(FUNCTION_H) $(TARGET_H)\n xcoffout.o : xcoffout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) $(RTL_H) xcoffout.h $(FLAGS_H) toplev.h $(DIAGNOSTIC_CORE_H) output.h dbxout.h \\\n+   $(TREE_H) $(RTL_H) xcoffout.h $(FLAGS_H) $(DIAGNOSTIC_CORE_H) output.h dbxout.h \\\n    $(GGC_H) $(TARGET_H) debug.h $(GSTAB_H) xcoff.h\n godump.o : godump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DIAGNOSTIC_CORE_H) \\\n    $(TREE_H) $(GGC_H) pointer-set.h $(OBSTACK_H) debug.h"}, {"sha": "77a38642b6ead91529571627afa81a9eb090b2d5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -35,7 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-lang.h\"\n #include \"flags.h\"\n #include \"output.h\"\n-#include \"toplev.h\"\n #include \"intl.h\"\n #include \"target.h\"\n #include \"tree-iterator.h\""}, {"sha": "dd672a0357f15d7aa4bb6f2e6123f3e91eab1e7f", "filename": "gcc/common.opt", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -157,6 +157,22 @@ int flag_print_asm_name\n Variable\n enum graph_dump_types graph_dump_format = no_graph\n \n+; Name of top-level original source file (what was input to cpp).\n+; This comes from the #-command at the beginning of the actual input.\n+; If there isn't any there, then this is the cc1 input file name.\n+Variable\n+const char *main_input_filename\n+\n+; Pointer to base name in main_input_filename, with directories and a\n+; single final extension removed, and the length of this base\n+; name.\n+\n+Variable\n+const char *main_input_basename\n+\n+Variable\n+int main_input_baselength\n+\n ; Which options have been printed by --help.\n Variable\n char *help_printed"}, {"sha": "76ab31aea730ad976e21f0aba71b02b04f5cbd5e", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -42,7 +42,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"function.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"ggc.h\"\n #include \"integrate.h\"\n #include \"tm_p.h\""}, {"sha": "f1afda20f97463f7e71b9df2470df12df6d3404a", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -37,7 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"df.h\"\n #include \"tm_p.h\"\n #include \"target.h\""}, {"sha": "38714609cabf5f3f5d76f8f359d38dd1bfae8956", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -41,7 +41,6 @@\n #include \"expr.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"recog.h\"\n #include \"cgraph.h\"\n #include \"ggc.h\""}, {"sha": "e1aa815664c8275c8dcbac7680dfc629b91ce1b5", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -49,7 +49,7 @@ arm.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h \\\n   $(INSN_ATTR_H) $(FLAGS_H) reload.h $(FUNCTION_H) \\\n-  $(EXPR_H) $(OPTABS_H) toplev.h $(RECOG_H) $(CGRAPH_H) \\\n+  $(EXPR_H) $(OPTABS_H) $(RECOG_H) $(CGRAPH_H) \\\n   $(GGC_H) except.h $(C_PRAGMA_H) $(INTEGRATE_H) $(TM_P_H) \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H)"}, {"sha": "30e4626ec2bdc08cc151d4b8571f3c643bf683f4", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -35,7 +35,6 @@\n #include \"output.h\"\n #include \"expr.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"obstack.h\"\n #include \"function.h\"\n #include \"recog.h\""}, {"sha": "93edc88b558bb1329e1135c82ae074eb125df527", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -41,7 +41,6 @@\n #include \"target-def.h\"\n #include \"expr.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"recog.h\"\n #include \"optabs.h\"\n #include \"ggc.h\""}, {"sha": "aec7cba63bb137da06b8df8076b39b0b92eee93f", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -35,7 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"function.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"recog.h\"\n #include \"reload.h\"\n #include \"tm_p.h\""}, {"sha": "79d341c472e33adff06a2d9cf0fdc31fdf41a623", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -44,7 +44,6 @@\n #include \"expr.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"df.h\"\n #include \"target.h\""}, {"sha": "74585b5dc0c510478fb86618bf697cd24de23f52", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -41,7 +41,6 @@\n #include \"function.h\"\n #include \"df.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\""}, {"sha": "56f69e2065d76a5167cb1f926911a12a35b257a4", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -40,7 +40,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"tm_p.h\"\n #include \"ggc.h\""}, {"sha": "834fc992fc1fe7e0166175629875023d8010694b", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -39,7 +39,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"c-family/c-pragma.h\"\t/* ??? */\n #include \"tm_p.h\"\n #include \"ggc.h\""}, {"sha": "0c2d20eaf6e0e8574efaaead8b18d22b2ef06f46", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -43,7 +43,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"libfuncs.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"sched-int.h\"\n #include \"timevar.h\"\n #include \"target.h\""}, {"sha": "b838fecb9f1a7449744214a4638dc3b0b3637b28", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -37,7 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"libfuncs.h\"\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"reload.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\""}, {"sha": "05888ee52898a5030b4ce78796bc4f12b7528e1e", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -41,7 +41,6 @@\n #include \"tm_p.h\"\n #include \"function.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"ggc.h\""}, {"sha": "3a741392aa02c0275baca9a8683e231a15240b28", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -35,7 +35,6 @@\n #include \"recog.h\"\n #include \"reload.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"obstack.h\"\n #include \"tree.h\"\n #include \"expr.h\""}, {"sha": "410882766c7cf78f362cc559ba078752609d8691", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -35,7 +35,6 @@\n #include \"function.h\"\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"ggc.h\"\n #include \"integrate.h\"\n #include \"df.h\""}, {"sha": "f45de3d8505be1b36c2f5b1bf8d84467ffd38328", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -51,7 +51,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"libfuncs.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"function.h\"\n #include \"ggc.h\""}, {"sha": "eedf009b1e29a350679f1dd947e72bc14273c37d", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -34,7 +34,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-attr.h\"\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"expr.h\"\n #include \"reload.h\"\n #include \"tm_p.h\""}, {"sha": "a66eb3cd162cdb0150d18965bdc0efb416dd36ae", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -41,7 +41,6 @@\n #include \"function.h\"\n #include \"ggc.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"df.h\""}, {"sha": "3b1127914e8336f6f0b97114127c258fe7f0f878", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -44,7 +44,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"ggc.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"integrate.h\"\n #include \"target.h\"\n #include \"target-def.h\""}, {"sha": "b50c7942e0d471fbedd72414e301a0dd3eedf01e", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -33,7 +33,6 @@\n #include \"insn-attr.h\"\n #include \"integrate.h\"\n #include \"recog.h\"\n-#include \"toplev.h\"\n #include \"tree.h\"\n #include \"function.h\"\n #include \"expr.h\""}, {"sha": "74f7a7951ec7fa9aa9b4c04a3a84d8d664096eda", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -34,7 +34,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"conditions.h\"\n #include \"insn-attr.h\"\n #include \"recog.h\"\n-#include \"toplev.h\"\n #include \"output.h\"\n #include \"tree.h\"\n #include \"function.h\""}, {"sha": "c08011638657c1b9b0988f7e4d53b8d8f15b7b34", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -36,7 +36,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"expr.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"recog.h\"\n #include \"ggc.h\"\n #include \"dwarf2.h\""}, {"sha": "a4e0bc432df80478b0ff8e173d609055c250f22a", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -39,7 +39,6 @@\n #include \"function.h\"\n #include \"obstack.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\""}, {"sha": "53b73d15fcc0af55fe27d1c61dadc6ffccce5a21", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -34,7 +34,6 @@\n #include \"recog.h\"\n #include \"reload.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"obstack.h\"\n #include \"tree.h\"\n #include \"expr.h\""}, {"sha": "aa8ad01fd9a6b9956e4c10fd8cc66ef7ceb30fcc", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -40,7 +40,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"integrate.h\"\n #include \"function.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"ggc.h\"\n #include \"recog.h\"\n #include \"predict.h\""}, {"sha": "35a76fadc22b72a2f223c60ffa3a4e47861102b7", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -36,7 +36,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"expr.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\""}, {"sha": "1ca95b4920d2bddf3f22b880a5e2e400d9866eab", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -42,7 +42,6 @@ along with GCC; see the file COPYING3.  If not, see\n #include \"basic-block.h\"\n #include \"integrate.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"ggc.h\"\n #include \"hashtab.h\"\n #include \"tm_p.h\""}, {"sha": "df5a246a2c1764751c8c256036cab7c0335446a7", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -41,7 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"reload.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"integrate.h\"\n #include \"ggc.h\""}, {"sha": "f9e4c0f677e932cf577ae5f8a14a68476f340c66", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -30,7 +30,6 @@\n #include \"insn-attr.h\"\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"output.h\"\n #include \"tree.h\"\n #include \"function.h\""}, {"sha": "034b171711f0ea6668ec6f96e8ff149a8d60a6b2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -38,7 +38,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"insn-attr.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"recog.h\"\n #include \"integrate.h\"\n #include \"dwarf2.h\""}, {"sha": "85387cc5b77e8e03fc37eda0cf9fb4f1fc47784a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -42,7 +42,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"debug.h\""}, {"sha": "bdea7e032e8fd57403b4c0271e4e50cd31eebf32", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -36,7 +36,6 @@\n #include \"basic-block.h\"\n #include \"integrate.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"ggc.h\"\n #include \"hashtab.h\"\n #include \"tm_p.h\""}, {"sha": "cc8c94b387bd53f97ac69df1c0366fb1f84f4f37", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -107,7 +107,7 @@ spu.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(REGS_H) hard-reg-set.h \\\n   real.h insn-config.h conditions.h insn-attr.h flags.h $(RECOG_H) \\\n   $(OBSTACK_H) $(TREE_H) $(EXPR_H) $(OPTABS_H) except.h function.h \\\n-  output.h $(BASIC_BLOCK_H) $(INTEGRATE_H) toplev.h $(GGC_H) $(HASHTAB_H) \\\n+  output.h $(BASIC_BLOCK_H) $(INTEGRATE_H) $(GGC_H) $(HASHTAB_H) \\\n   $(TM_P_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h reload.h cfglayout.h \\\n   $(srcdir)/config/spu/spu-protos.h \\\n   $(srcdir)/config/spu/spu-builtins.def "}, {"sha": "fa5c5b5a8dc5f4171c591f1310efaafac6474976", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -34,7 +34,6 @@\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"obstack.h\"\n #include \"tree.h\"\n #include \"expr.h\""}, {"sha": "6d6ed78266744dd030edeeaec4d488a6453ed511", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -36,7 +36,6 @@\n #include \"expr.h\"\n #include \"function.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"ggc.h\"\n #include \"integrate.h\"\n #include \"tm_p.h\""}, {"sha": "a9e032aa695fb0333ebf0115ccf4005760fb5f0f", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -39,7 +39,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"debug.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"tm-preds.h\"\n #include \"tm-constrs.h\"\n #include \"tm_p.h\""}, {"sha": "c3c69fdcc94b888c618102ec26d972112c303aa0", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -41,7 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"function.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n #include \"ggc.h\""}, {"sha": "bfc522a6f580b7774814bfceac9593df2e243f85", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -1,3 +1,9 @@\n+2010-12-01  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cp-objcp-common.c, lex.c, typeck.c: Don't include toplev.h.\n+\t* Make-lang.in (cp/lex.o, cp/cp-objcp-common.o, cp/typeck2.o):\n+\tUpdate dependencies.\n+\n 2010-11-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* decl.c (finish_function): Call objc_finish_function when"}, {"sha": "afbf0da8d4799ddaa3e40e4009594a1fcf8d354a", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -247,7 +247,7 @@ CXX_TREE_H = $(TREE_H) cp/name-lookup.h cp/cp-tree.h $(C_COMMON_H) \\\n CXX_PRETTY_PRINT_H = cp/cxx-pretty-print.h $(C_PRETTY_PRINT_H)\n \n cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n-  $(C_PRAGMA_H) toplev.h output.h input.h cp/operators.def $(TM_P_H)\n+  $(C_PRAGMA_H) output.h input.h cp/operators.def $(TM_P_H)\n cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) debug.h langhooks.h \\\n   $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-cp.h gt-cp-cp-lang.h \\\n   cp/cp-objcp-common.h $(EXPR_H) $(TARGET_H)\n@@ -261,14 +261,14 @@ cp/decl2.o: cp/decl2.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n   $(C_PRAGMA_H) $(TREE_DUMP_H) intl.h $(TARGET_H) $(GIMPLE_H) $(POINTER_SET_H) \\\n   $(SPLAY_TREE_H) c-family/c-ada-spec.h\n cp/cp-objcp-common.o : cp/cp-objcp-common.c $(CONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(TM_H) $(TREE_H) $(CXX_TREE_H) $(C_COMMON_H) toplev.h \\\n+  coretypes.h $(TM_H) $(TREE_H) $(CXX_TREE_H) $(C_COMMON_H) \\\n   langhooks.h $(LANGHOOKS_DEF_H) $(DIAGNOSTIC_H) debug.h \\\n   $(CXX_PRETTY_PRINT_H) cp/cp-objcp-common.h gt-cp-cp-objcp-common.h\n cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) output.h \\\n   $(TM_P_H) $(DIAGNOSTIC_CORE_H) gt-cp-typeck2.h $(REAL_H) intl.h\n cp/typeck.o: cp/typeck.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n   toplev.h $(DIAGNOSTIC_H) convert.h $(C_COMMON_H) $(TARGET_H) \\\n-  output.h toplev.h\n+  output.h\n cp/class.o: cp/class.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h \\\n   $(TARGET_H) convert.h $(CGRAPH_H) $(TREE_DUMP_H) gt-cp-class.h \\\n   $(SPLAY_TREE_H)"}, {"sha": "f045d290eae07a175299df159d17854dda2a0d69", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -25,7 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"c-family/c-common.h\"\n-#include \"toplev.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n #include \"diagnostic.h\""}, {"sha": "5484317b6b8f2b5b61312dfed324fe7e89379326", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -33,7 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cpplib.h\"\n #include \"flags.h\"\n #include \"c-family/c-pragma.h\"\n-#include \"toplev.h\"\n #include \"output.h\"\n #include \"tm_p.h\"\n #include \"timevar.h\""}, {"sha": "7cff632fbda0208512c91df5f98415bae0dd880b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -34,7 +34,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-tree.h\"\n #include \"flags.h\"\n #include \"output.h\"\n-#include \"toplev.h\"\n #include \"diagnostic.h\"\n #include \"intl.h\"\n #include \"target.h\""}, {"sha": "ebe21b607652e65e8ca750451be1f2c788f1dbba", "filename": "gcc/final.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -3620,6 +3620,32 @@ output_addr_const (FILE *file, rtx x)\n     }\n }\n \f\n+/* Output a quoted string.  */\n+\n+void\n+output_quoted_string (FILE *asm_file, const char *string)\n+{\n+#ifdef OUTPUT_QUOTED_STRING\n+  OUTPUT_QUOTED_STRING (asm_file, string);\n+#else\n+  char c;\n+\n+  putc ('\\\"', asm_file);\n+  while ((c = *string++) != 0)\n+    {\n+      if (ISPRINT (c))\n+\t{\n+\t  if (c == '\\\"' || c == '\\\\')\n+\t    putc ('\\\\', asm_file);\n+\t  putc (c, asm_file);\n+\t}\n+      else\n+\tfprintf (asm_file, \"\\\\%03o\", (unsigned char) c);\n+    }\n+  putc ('\\\"', asm_file);\n+#endif\n+}\n+\f\n /* A poor man's fprintf, with the added features of %I, %R, %L, and %U.\n    %R prints the value of REGISTER_PREFIX.\n    %L prints the value of LOCAL_LABEL_PREFIX."}, {"sha": "d3ec6a7bcf97379fe08242280e4cf5e5210456f6", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -31,7 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"function.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"tree-pass.h\"\n \n /* The differences between High GIMPLE and Low GIMPLE are the"}, {"sha": "2e56d7a088a39d4431b634916c6e499243258713", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -28,7 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"diagnostic.h\"\n #include \"tree-flow.h\"\n-#include \"toplev.h\"\n #include \"tree-dump.h\"\n #include \"timevar.h\"\n #include \"cfgloop.h\""}, {"sha": "16ea3712d07b903c7d94e9053adef70c60504b47", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -1,3 +1,8 @@\n+2010-12-01  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* jcf-parse.c: Don't include toplev.h.\n+\t* Make-lang.in (java/jcf-parse.o): Don't depend on toplev.h.\n+\n 2010-11-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* boehm.c: Don't include toplev.h."}, {"sha": "f5852b405cff3b45cfe76306b0464ba1a191dff3", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -295,7 +295,7 @@ java/expr.o: java/expr.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h $(REAL_H) \\\n java/jcf-depend.o: java/jcf-depend.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   java/jcf.h\n java/jcf-parse.o: java/jcf-parse.c $(CONFIG_H) $(JAVA_TREE_H) $(FLAGS_H) \\\n-  input.h java/java-except.h $(SYSTEM_H) coretypes.h toplev.h \\\n+  input.h java/java-except.h $(SYSTEM_H) coretypes.h \\\n   java/parse.h $(GGC_H) debug.h $(REAL_H) gt-java-jcf-parse.h \\\n   java/jcf-reader.c java/zipfile.h java/jcf.h $(BITMAP_H)\n java/jvgenmain.o: java/jvgenmain.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H) \\"}, {"sha": "9166f311e999ca9e326d19ffe0e9889e1e6fec9f", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -35,7 +35,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"javaop.h\"\n #include \"java-tree.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"parse.h\"\n #include \"ggc.h\"\n #include \"debug.h\""}, {"sha": "71c428e9b6b84c9f7f2ccabe4c82197903dd2d1a", "filename": "gcc/opts-global.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -229,11 +229,12 @@ read_cmdline_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t  gcc_assert (opts == &global_options);\n \t  gcc_assert (opts_set == &global_options_set);\n \n-\t  if (main_input_filename == NULL)\n+\t  if (opts->x_main_input_filename == NULL)\n \t    {\n-\t      main_input_filename = decoded_options[i].arg;\n-\t      main_input_baselength\n-\t\t= base_of_path (main_input_filename, &main_input_basename);\n+\t      opts->x_main_input_filename = decoded_options[i].arg;\n+\t      opts->x_main_input_baselength\n+\t\t= base_of_path (opts->x_main_input_filename,\n+\t\t\t\t&opts->x_main_input_basename);\n \t    }\n \t  add_input_filename (decoded_options[i].arg);\n \t  continue;"}, {"sha": "6a835c0f932b25da13851478c01290cbeacc44c7", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -298,6 +298,8 @@ extern void output_shared_constant_pool (void);\n \n extern void output_object_blocks (void);\n \n+extern void output_quoted_string (FILE *, const char *);\n+\n /* Whether a constructor CTOR is a valid static constant initializer if all\n    its elements are.  This used to be internal to initializer_constant_valid_p\n    and has been exposed to let other functions like categorize_ctor_elements"}, {"sha": "2179b8192885d47dbf42c16fd8a88653ea39b926", "filename": "gcc/plugin.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -33,7 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"coretypes.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"tree.h\"\n #include \"tree-pass.h\"\n #include \"intl.h\""}, {"sha": "14ec00c7bf284fee019be8bb0c6fd00bf90f51c9", "filename": "gcc/targhooks.c", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -67,6 +67,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"reload.h\"\n #include \"optabs.h\"\n #include \"recog.h\"\n+#include \"intl.h\"\n+#include \"opts.h\"\n \n \n bool\n@@ -1356,6 +1358,115 @@ default_get_reg_raw_mode(int regno)\n   return reg_raw_mode[regno];\n }\n \n+/* Return true if the state of option OPTION should be stored in PCH files\n+   and checked by default_pch_valid_p.  Store the option's current state\n+   in STATE if so.  */\n+\n+static inline bool\n+option_affects_pch_p (int option, struct cl_option_state *state)\n+{\n+  if ((cl_options[option].flags & CL_TARGET) == 0)\n+    return false;\n+  if (option_flag_var (option, &global_options) == &target_flags)\n+    if (targetm.check_pch_target_flags)\n+      return false;\n+  return get_option_state (&global_options, option, state);\n+}\n+\n+/* Default version of get_pch_validity.\n+   By default, every flag difference is fatal; that will be mostly right for\n+   most targets, but completely right for very few.  */\n+\n+void *\n+default_get_pch_validity (size_t *sz)\n+{\n+  struct cl_option_state state;\n+  size_t i;\n+  char *result, *r;\n+\n+  *sz = 2;\n+  if (targetm.check_pch_target_flags)\n+    *sz += sizeof (target_flags);\n+  for (i = 0; i < cl_options_count; i++)\n+    if (option_affects_pch_p (i, &state))\n+      *sz += state.size;\n+\n+  result = r = XNEWVEC (char, *sz);\n+  r[0] = flag_pic;\n+  r[1] = flag_pie;\n+  r += 2;\n+  if (targetm.check_pch_target_flags)\n+    {\n+      memcpy (r, &target_flags, sizeof (target_flags));\n+      r += sizeof (target_flags);\n+    }\n+\n+  for (i = 0; i < cl_options_count; i++)\n+    if (option_affects_pch_p (i, &state))\n+      {\n+\tmemcpy (r, state.data, state.size);\n+\tr += state.size;\n+      }\n+\n+  return result;\n+}\n+\n+/* Return a message which says that a PCH file was created with a different\n+   setting of OPTION.  */\n+\n+static const char *\n+pch_option_mismatch (const char *option)\n+{\n+  char *r;\n+\n+  asprintf (&r, _(\"created and used with differing settings of '%s'\"), option);\n+  if (r == NULL)\n+    return _(\"out of memory\");\n+  return r;\n+}\n+\n+/* Default version of pch_valid_p.  */\n+\n+const char *\n+default_pch_valid_p (const void *data_p, size_t len)\n+{\n+  struct cl_option_state state;\n+  const char *data = (const char *)data_p;\n+  size_t i;\n+\n+  /* -fpic and -fpie also usually make a PCH invalid.  */\n+  if (data[0] != flag_pic)\n+    return _(\"created and used with different settings of -fpic\");\n+  if (data[1] != flag_pie)\n+    return _(\"created and used with different settings of -fpie\");\n+  data += 2;\n+\n+  /* Check target_flags.  */\n+  if (targetm.check_pch_target_flags)\n+    {\n+      int tf;\n+      const char *r;\n+\n+      memcpy (&tf, data, sizeof (target_flags));\n+      data += sizeof (target_flags);\n+      len -= sizeof (target_flags);\n+      r = targetm.check_pch_target_flags (tf);\n+      if (r != NULL)\n+\treturn r;\n+    }\n+\n+  for (i = 0; i < cl_options_count; i++)\n+    if (option_affects_pch_p (i, &state))\n+      {\n+\tif (memcmp (data, state.data, state.size) != 0)\n+\t  return pch_option_mismatch (cl_options[i].opt_text);\n+\tdata += state.size;\n+\tlen -= state.size;\n+      }\n+\n+  return NULL;\n+}\n+\n const struct default_options empty_optimization_table[] =\n   {\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "1e603c983dd4ba281a4b3b54e265c8274d69ad9f", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -176,3 +176,6 @@ extern section * default_function_section(tree decl, enum node_frequency freq,\n extern enum machine_mode default_get_reg_raw_mode(int);\n \n extern const struct default_options empty_optimization_table[];\n+\n+extern void *default_get_pch_validity (size_t *);\n+extern const char *default_pch_valid_p (const void *, size_t);"}, {"sha": "2cef957c30b6819381a1286ad8611d396570db83", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 252, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -116,18 +116,6 @@ static bool no_backend;\n struct cl_decoded_option *save_decoded_options;\n unsigned int save_decoded_options_count;\n \n-/* Name of top-level original source file (what was input to cpp).\n-   This comes from the #-command at the beginning of the actual input.\n-   If there isn't any there, then this is the cc1 input file name.  */\n-\n-const char *main_input_filename;\n-\n-/* Pointer to base name in main_input_filename, with directories and a\n-   single final extension removed, and the length of this base\n-   name.  */\n-const char *main_input_basename;\n-int main_input_baselength;\n-\n /* Used to enable -fvar-tracking, -fweb and -frename-registers according\n    to optimize in process_options ().  */\n #define AUTODETECT_VALUE 2\n@@ -374,32 +362,6 @@ crash_signal (int signo)\n   internal_error (\"%s\", strsignal (signo));\n }\n \n-/* Output a quoted string.  */\n-\n-void\n-output_quoted_string (FILE *asm_file, const char *string)\n-{\n-#ifdef OUTPUT_QUOTED_STRING\n-  OUTPUT_QUOTED_STRING (asm_file, string);\n-#else\n-  char c;\n-\n-  putc ('\\\"', asm_file);\n-  while ((c = *string++) != 0)\n-    {\n-      if (ISPRINT (c))\n-\t{\n-\t  if (c == '\\\"' || c == '\\\\')\n-\t    putc ('\\\\', asm_file);\n-\t  putc (c, asm_file);\n-\t}\n-      else\n-\tfprintf (asm_file, \"\\\\%03o\", (unsigned char) c);\n-    }\n-  putc ('\\\"', asm_file);\n-#endif\n-}\n-\n /* A subroutine of wrapup_global_declarations.  We've come to the end of\n    the compilation unit.  All deferred variables should be undeferred,\n    and all incomplete decls should be finalized.  */\n@@ -597,111 +559,6 @@ emit_debug_global_declarations (tree *vec, int len)\n   timevar_pop (TV_SYMOUT);\n }\n \n-/* Warn about a use of an identifier which was marked deprecated.  */\n-void\n-warn_deprecated_use (tree node, tree attr)\n-{\n-  const char *msg;\n-\n-  if (node == 0 || !warn_deprecated_decl)\n-    return;\n-\n-  if (!attr)\n-    {\n-      if (DECL_P (node))\n-\tattr = DECL_ATTRIBUTES (node);\n-      else if (TYPE_P (node))\n-\t{\n-\t  tree decl = TYPE_STUB_DECL (node);\n-\t  if (decl)\n-\t    attr = lookup_attribute (\"deprecated\",\n-\t\t\t\t     TYPE_ATTRIBUTES (TREE_TYPE (decl)));\n-\t}\n-    }\n-\n-  if (attr)\n-    attr = lookup_attribute (\"deprecated\", attr);\n-\n-  if (attr)\n-    msg = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr)));\n-  else\n-    msg = NULL;\n-\n-  if (DECL_P (node))\n-    {\n-      expanded_location xloc = expand_location (DECL_SOURCE_LOCATION (node));\n-      if (msg)\n-\twarning (OPT_Wdeprecated_declarations,\n-\t\t \"%qD is deprecated (declared at %s:%d): %s\",\n-\t\t node, xloc.file, xloc.line, msg);\n-      else\n-\twarning (OPT_Wdeprecated_declarations,\n-\t\t \"%qD is deprecated (declared at %s:%d)\",\n-\t\t node, xloc.file, xloc.line);\n-    }\n-  else if (TYPE_P (node))\n-    {\n-      tree what = NULL_TREE;\n-      tree decl = TYPE_STUB_DECL (node);\n-\n-      if (TYPE_NAME (node))\n-\t{\n-\t  if (TREE_CODE (TYPE_NAME (node)) == IDENTIFIER_NODE)\n-\t    what = TYPE_NAME (node);\n-\t  else if (TREE_CODE (TYPE_NAME (node)) == TYPE_DECL\n-\t\t   && DECL_NAME (TYPE_NAME (node)))\n-\t    what = DECL_NAME (TYPE_NAME (node));\n-\t}\n-\n-      if (decl)\n-\t{\n-\t  expanded_location xloc\n-\t    = expand_location (DECL_SOURCE_LOCATION (decl));\n-\t  if (what)\n-\t    {\n-\t      if (msg)\n-\t\twarning (OPT_Wdeprecated_declarations,\n-\t\t\t \"%qE is deprecated (declared at %s:%d): %s\",\n-\t\t\t what, xloc.file, xloc.line, msg);\n-\t      else\n-\t\twarning (OPT_Wdeprecated_declarations,\n-\t\t\t \"%qE is deprecated (declared at %s:%d)\", what,\n-\t\t\t xloc.file, xloc.line);\n-\t    }\n-\t  else\n-\t    {\n-\t      if (msg)\n-\t\twarning (OPT_Wdeprecated_declarations,\n-\t\t\t \"type is deprecated (declared at %s:%d): %s\",\n-\t\t\t xloc.file, xloc.line, msg);\n-\t      else\n-\t\twarning (OPT_Wdeprecated_declarations,\n-\t\t\t \"type is deprecated (declared at %s:%d)\",\n-\t\t\t xloc.file, xloc.line);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  if (what)\n-\t    {\n-\t      if (msg)\n-\t\twarning (OPT_Wdeprecated_declarations, \"%qE is deprecated: %s\",\n-\t\t\t what, msg);\n-\t      else\n-\t\twarning (OPT_Wdeprecated_declarations, \"%qE is deprecated\", what);\n-\t    }\n-\t  else\n-\t    {\n-\t      if (msg)\n-\t\twarning (OPT_Wdeprecated_declarations, \"type is deprecated: %s\",\n-\t\t\t msg);\n-\t      else\n-\t\twarning (OPT_Wdeprecated_declarations, \"type is deprecated\");\n-\t    }\n-\t}\n-    }\n-}\n-\n /* Compile an entire translation unit.  Write a file of assembly\n    output and various debugging dumps.  */\n \n@@ -1108,115 +965,6 @@ init_asm_output (const char *name)\n     }\n }\n \n-/* Return true if the state of option OPTION should be stored in PCH files\n-   and checked by default_pch_valid_p.  Store the option's current state\n-   in STATE if so.  */\n-\n-static inline bool\n-option_affects_pch_p (int option, struct cl_option_state *state)\n-{\n-  if ((cl_options[option].flags & CL_TARGET) == 0)\n-    return false;\n-  if (option_flag_var (option, &global_options) == &target_flags)\n-    if (targetm.check_pch_target_flags)\n-      return false;\n-  return get_option_state (&global_options, option, state);\n-}\n-\n-/* Default version of get_pch_validity.\n-   By default, every flag difference is fatal; that will be mostly right for\n-   most targets, but completely right for very few.  */\n-\n-void *\n-default_get_pch_validity (size_t *sz)\n-{\n-  struct cl_option_state state;\n-  size_t i;\n-  char *result, *r;\n-\n-  *sz = 2;\n-  if (targetm.check_pch_target_flags)\n-    *sz += sizeof (target_flags);\n-  for (i = 0; i < cl_options_count; i++)\n-    if (option_affects_pch_p (i, &state))\n-      *sz += state.size;\n-\n-  result = r = XNEWVEC (char, *sz);\n-  r[0] = flag_pic;\n-  r[1] = flag_pie;\n-  r += 2;\n-  if (targetm.check_pch_target_flags)\n-    {\n-      memcpy (r, &target_flags, sizeof (target_flags));\n-      r += sizeof (target_flags);\n-    }\n-\n-  for (i = 0; i < cl_options_count; i++)\n-    if (option_affects_pch_p (i, &state))\n-      {\n-\tmemcpy (r, state.data, state.size);\n-\tr += state.size;\n-      }\n-\n-  return result;\n-}\n-\n-/* Return a message which says that a PCH file was created with a different\n-   setting of OPTION.  */\n-\n-static const char *\n-pch_option_mismatch (const char *option)\n-{\n-  char *r;\n-\n-  asprintf (&r, _(\"created and used with differing settings of '%s'\"), option);\n-  if (r == NULL)\n-    return _(\"out of memory\");\n-  return r;\n-}\n-\n-/* Default version of pch_valid_p.  */\n-\n-const char *\n-default_pch_valid_p (const void *data_p, size_t len)\n-{\n-  struct cl_option_state state;\n-  const char *data = (const char *)data_p;\n-  size_t i;\n-\n-  /* -fpic and -fpie also usually make a PCH invalid.  */\n-  if (data[0] != flag_pic)\n-    return _(\"created and used with different settings of -fpic\");\n-  if (data[1] != flag_pie)\n-    return _(\"created and used with different settings of -fpie\");\n-  data += 2;\n-\n-  /* Check target_flags.  */\n-  if (targetm.check_pch_target_flags)\n-    {\n-      int tf;\n-      const char *r;\n-\n-      memcpy (&tf, data, sizeof (target_flags));\n-      data += sizeof (target_flags);\n-      len -= sizeof (target_flags);\n-      r = targetm.check_pch_target_flags (tf);\n-      if (r != NULL)\n-\treturn r;\n-    }\n-\n-  for (i = 0; i < cl_options_count; i++)\n-    if (option_affects_pch_p (i, &state))\n-      {\n-\tif (memcmp (data, state.data, state.size) != 0)\n-\t  return pch_option_mismatch (cl_options[i].opt_text);\n-\tdata += state.size;\n-\tlen -= state.size;\n-      }\n-\n-  return NULL;\n-}\n-\n /* Default tree printer.   Handles declarations only.  */\n bool\n default_tree_printer (pretty_printer *pp, text_info *text, const char *spec,"}, {"sha": "2455dc02263a10357e95242203d227fc05e70422", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -22,11 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TOPLEV_H\n #define GCC_TOPLEV_H\n \n-/* If non-NULL, return one past-the-end of the matching SUBPART of\n-   the WHOLE string.  */\n-#define skip_leading_substring(whole,  part) \\\n-   (strncmp (whole, part, strlen (part)) ? NULL : whole + strlen (part))\n-\n /* Decoded options, and number of such options.  */\n extern struct cl_decoded_option *save_decoded_options;\n extern unsigned int save_decoded_options_count;\n@@ -46,12 +41,6 @@ extern void init_eh (void);\n \n extern void announce_function (tree);\n \n-extern void warn_deprecated_use (tree, tree);\n-\n-#ifdef BUFSIZ\n-extern void output_quoted_string\t(FILE *, const char *);\n-#endif\n-\n extern void wrapup_global_declaration_1 (tree);\n extern bool wrapup_global_declaration_2 (tree);\n extern bool wrapup_global_declarations (tree *, int);\n@@ -67,11 +56,6 @@ extern void target_reinit (void);\n /* A unique local time stamp, might be zero if none is available.  */\n extern unsigned local_tick;\n \n-/* Top-level source file.  */\n-extern const char *main_input_filename;\n-extern const char *main_input_basename;\n-extern int main_input_baselength;\n-\n /* True if the user has tagged the function with the 'section'\n    attribute.  */\n \n@@ -80,10 +64,7 @@ extern bool user_defined_section_attribute;\n /* See toplev.c.  */\n extern int flag_rerun_cse_after_global_opts;\n \n-/* Things to do with target switches.  */\n extern void print_version (FILE *, const char *);\n-extern void * default_get_pch_validity (size_t *);\n-extern const char * default_pch_valid_p (const void *, size_t);\n \n /* The hashtable, so that the C front ends can pass it to cpplib.  */\n extern struct ht *ident_hash;"}, {"sha": "e3ab9d9278064f61fba5aee8ad66f12d94733afe", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -38,7 +38,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-dump.h\"\n #include \"tree-pass.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"except.h\"\n #include \"cfgloop.h\"\n #include \"cfglayout.h\""}, {"sha": "7de09390561f9f91774d28c7110db47422a1e8a2", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -32,6 +32,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"tree-iterator.h\"\n \n+/* If non-NULL, return one past-the-end of the matching SUBPART of\n+   the WHOLE string.  */\n+#define skip_leading_substring(whole,  part) \\\n+   (strncmp (whole, part, strlen (part)) ? NULL : whole + strlen (part))\n+\n static unsigned int queue (dump_info_p, const_tree, int);\n static void dump_index (dump_info_p, unsigned int);\n static void dequeue_and_dump (dump_info_p);"}, {"sha": "97a9869d31ee033841af9c941c2edf80e0a154a2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -23,7 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-#include \"toplev.h\" /* floor_log2 */\n #include \"diagnostic-core.h\"\n #include \"tree.h\"\n #include \"tree-inline.h\""}, {"sha": "88666d3e0e8f16d2a210542466121d9d714f5e6b", "filename": "gcc/tree.c", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -11005,4 +11005,109 @@ typedef_variant_p (tree type)\n   return is_typedef_decl (TYPE_NAME (type));\n }\n \n+/* Warn about a use of an identifier which was marked deprecated.  */\n+void\n+warn_deprecated_use (tree node, tree attr)\n+{\n+  const char *msg;\n+\n+  if (node == 0 || !warn_deprecated_decl)\n+    return;\n+\n+  if (!attr)\n+    {\n+      if (DECL_P (node))\n+\tattr = DECL_ATTRIBUTES (node);\n+      else if (TYPE_P (node))\n+\t{\n+\t  tree decl = TYPE_STUB_DECL (node);\n+\t  if (decl)\n+\t    attr = lookup_attribute (\"deprecated\",\n+\t\t\t\t     TYPE_ATTRIBUTES (TREE_TYPE (decl)));\n+\t}\n+    }\n+\n+  if (attr)\n+    attr = lookup_attribute (\"deprecated\", attr);\n+\n+  if (attr)\n+    msg = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr)));\n+  else\n+    msg = NULL;\n+\n+  if (DECL_P (node))\n+    {\n+      expanded_location xloc = expand_location (DECL_SOURCE_LOCATION (node));\n+      if (msg)\n+\twarning (OPT_Wdeprecated_declarations,\n+\t\t \"%qD is deprecated (declared at %s:%d): %s\",\n+\t\t node, xloc.file, xloc.line, msg);\n+      else\n+\twarning (OPT_Wdeprecated_declarations,\n+\t\t \"%qD is deprecated (declared at %s:%d)\",\n+\t\t node, xloc.file, xloc.line);\n+    }\n+  else if (TYPE_P (node))\n+    {\n+      tree what = NULL_TREE;\n+      tree decl = TYPE_STUB_DECL (node);\n+\n+      if (TYPE_NAME (node))\n+\t{\n+\t  if (TREE_CODE (TYPE_NAME (node)) == IDENTIFIER_NODE)\n+\t    what = TYPE_NAME (node);\n+\t  else if (TREE_CODE (TYPE_NAME (node)) == TYPE_DECL\n+\t\t   && DECL_NAME (TYPE_NAME (node)))\n+\t    what = DECL_NAME (TYPE_NAME (node));\n+\t}\n+\n+      if (decl)\n+\t{\n+\t  expanded_location xloc\n+\t    = expand_location (DECL_SOURCE_LOCATION (decl));\n+\t  if (what)\n+\t    {\n+\t      if (msg)\n+\t\twarning (OPT_Wdeprecated_declarations,\n+\t\t\t \"%qE is deprecated (declared at %s:%d): %s\",\n+\t\t\t what, xloc.file, xloc.line, msg);\n+\t      else\n+\t\twarning (OPT_Wdeprecated_declarations,\n+\t\t\t \"%qE is deprecated (declared at %s:%d)\", what,\n+\t\t\t xloc.file, xloc.line);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (msg)\n+\t\twarning (OPT_Wdeprecated_declarations,\n+\t\t\t \"type is deprecated (declared at %s:%d): %s\",\n+\t\t\t xloc.file, xloc.line, msg);\n+\t      else\n+\t\twarning (OPT_Wdeprecated_declarations,\n+\t\t\t \"type is deprecated (declared at %s:%d)\",\n+\t\t\t xloc.file, xloc.line);\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  if (what)\n+\t    {\n+\t      if (msg)\n+\t\twarning (OPT_Wdeprecated_declarations, \"%qE is deprecated: %s\",\n+\t\t\t what, msg);\n+\t      else\n+\t\twarning (OPT_Wdeprecated_declarations, \"%qE is deprecated\", what);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (msg)\n+\t\twarning (OPT_Wdeprecated_declarations, \"type is deprecated: %s\",\n+\t\t\t msg);\n+\t      else\n+\t\twarning (OPT_Wdeprecated_declarations, \"type is deprecated\");\n+\t    }\n+\t}\n+    }\n+}\n+\n #include \"gt-tree.h\""}, {"sha": "4995b4384c4bf7c3e947d117010d121c21aee253", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -4959,6 +4959,7 @@ extern tree tree_strip_nop_conversions (tree);\n extern tree tree_strip_sign_nop_conversions (tree);\n extern tree lhd_gcc_personality (void);\n extern void assign_assembler_name_if_neeeded (tree);\n+extern void warn_deprecated_use (tree, tree);\n \n \f\n /* In cgraph.c */"}, {"sha": "5f79ece7001e97233ec39a6b49d4cc055c402326", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -40,7 +40,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"regs.h\"\n #include \"output.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"hashtab.h\"\n #include \"ggc.h\"\n #include \"langhooks.h\""}, {"sha": "ccc1ab810ff74bce50441820ad27f8daac0db66b", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803773f0ef89ce35786465e125772a57e6936c1/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=a803773f0ef89ce35786465e125772a57e6936c1", "patch": "@@ -31,7 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n #include \"output.h\"\n #include \"ggc.h\"\n #include \"target.h\""}]}