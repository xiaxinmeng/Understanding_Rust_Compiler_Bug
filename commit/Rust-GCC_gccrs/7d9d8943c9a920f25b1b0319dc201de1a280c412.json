{"sha": "7d9d8943c9a920f25b1b0319dc201de1a280c412", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5ZDg5NDNjOWE5MjBmMjViMWIwMzE5ZGMyMDFkZTFhMjgwYzQxMg==", "commit": {"author": {"name": "Andrew Macleod", "email": "amacleod@cygnus.com", "date": "2000-06-26T20:15:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-06-26T20:15:07Z"}, "message": "dwarf2.h (enum dwarf_call_frame_info): Add DW_CFA_def_cfa_expression.\n\n        * dwarf2.h (enum dwarf_call_frame_info): Add\n        DW_CFA_def_cfa_expression.\n        * dwarf2out.c (union dw_cfi_oprnd_struct): Add a pointer to a\n        dw_loc_descr_struct entry.\n        (struct cfa_loc): New structure to track a CFA location.\n        (lookup_cfa): Take a cfa_loc parameter instead of a reg and an offset.\n        (lookup_cfa_1): Take a cfa_loc parameter instead of a reg and an\n        offset, plus handle DW_CFA_def_cfa_expression.\n        (def_cfa_1): Use to be dwarf2out_def_cfa, only now it uses a\n        cfa_loc record.\n        (dwarf2out_def_cfa): Entry point maintained for compatability.\n        (dwarf_cfi_name): Add DW_CFA_def_cfa_expression.\n        (cfa_reg, cfa_offset): Replace with cfa_loc record 'cfa'.\n        (cfa_store_reg, cfa_store_offset): Replace with cfa_loc 'cfa_store'.\n        (initial_return_save, dwarf2out_stack_adjust): Use cfa.reg, not\n        cfa_reg.\n        (dwarf2out_frame_debug_expr): Use new cfa_loc records. Recognize rtl\n        sequences for the new DW_CFA_def_cfa_expression record.\n        (dwarf2out_frame_debug): Use new variables/fields.A\n        (output_cfi): Handle DW_CFA_def_cfa_expression.\n        (output_cfa_loc): New function to generate a CFI record for\n        DW_CFA_def_cfa_expression.\n        (get_cfa_from_loc_descr): New function to get a cfa_loc record from\n        a dw_loc_descr sequeunce.\n        (build_loc_descr): Build a dw_loc_descr from a cfa_loc record.\n        (dwarf_stack_op_name, new_loc_descr, add_loc_descr, size_of_loc_descr,\n        size_of_locs, output_loc_operands, output_loc_sequence): Move into\n        unwind info section.\n        * frame.h (frame_state): Add base_offset and indirect fields.\n        * frame-dwarf2.c (decode_stack_op): New function to interpret a\n        dw_loc_descr operation.\n        (execute_cfa_insn): Add support for DW_CFA_def_cfa_expression.\n        (struct frame_state): Add base offset and indirect fields.\n        * libgcc2.c (next_stack_level): Support indirect loading for CFA.\n\nFrom-SVN: r34717", "tree": {"sha": "71b921aa27ff78a41f60dae65d13fa8833d71768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71b921aa27ff78a41f60dae65d13fa8833d71768"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9d8943c9a920f25b1b0319dc201de1a280c412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9d8943c9a920f25b1b0319dc201de1a280c412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9d8943c9a920f25b1b0319dc201de1a280c412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9d8943c9a920f25b1b0319dc201de1a280c412/comments", "author": null, "committer": null, "parents": [{"sha": "4540727afe11267220f725c694e04e01de19f9d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4540727afe11267220f725c694e04e01de19f9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4540727afe11267220f725c694e04e01de19f9d0"}], "stats": {"total": 3933, "additions": 2173, "deletions": 1760}, "files": [{"sha": "27cb53fa5a22b443c08e8d5fb74d1402cc3dbb8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d9d8943c9a920f25b1b0319dc201de1a280c412", "patch": "@@ -1,3 +1,41 @@\n+2000-06-26  Andrew Macleod <amacleod@cygnus.com>\n+\t    Jason Merrill <jason@redhat.com>\n+\n+\t* dwarf2.h (enum dwarf_call_frame_info): Add \n+\tDW_CFA_def_cfa_expression.\n+\t* dwarf2out.c (union dw_cfi_oprnd_struct): Add a pointer to a\n+\tdw_loc_descr_struct entry.\n+\t(struct cfa_loc): New structure to track a CFA location.\n+\t(lookup_cfa): Take a cfa_loc parameter instead of a reg and an offset.\n+\t(lookup_cfa_1): Take a cfa_loc parameter instead of a reg and an\n+\toffset, plus handle DW_CFA_def_cfa_expression.\n+\t(def_cfa_1): Use to be dwarf2out_def_cfa, only now it uses a\n+\tcfa_loc record.\n+\t(dwarf2out_def_cfa): Entry point maintained for compatability.\n+\t(dwarf_cfi_name): Add DW_CFA_def_cfa_expression.\n+\t(cfa_reg, cfa_offset): Replace with cfa_loc record 'cfa'.\n+\t(cfa_store_reg, cfa_store_offset): Replace with cfa_loc 'cfa_store'.\n+\t(initial_return_save, dwarf2out_stack_adjust): Use cfa.reg, not\n+\tcfa_reg.\n+\t(dwarf2out_frame_debug_expr): Use new cfa_loc records. Recognize rtl\n+\tsequences for the new DW_CFA_def_cfa_expression record.\n+\t(dwarf2out_frame_debug): Use new variables/fields.A\n+\t(output_cfi): Handle DW_CFA_def_cfa_expression.\n+\t(output_cfa_loc): New function to generate a CFI record for \n+\tDW_CFA_def_cfa_expression.\n+\t(get_cfa_from_loc_descr): New function to get a cfa_loc record from\n+\ta dw_loc_descr sequeunce.\n+\t(build_loc_descr): Build a dw_loc_descr from a cfa_loc record.\n+\t(dwarf_stack_op_name, new_loc_descr, add_loc_descr, size_of_loc_descr,\n+\tsize_of_locs, output_loc_operands, output_loc_sequence): Move into\n+\tunwind info section.\n+\t* frame.h (frame_state): Add base_offset and indirect fields.\n+\t* frame-dwarf2.c (decode_stack_op): New function to interpret a\n+\tdw_loc_descr operation.\n+\t(execute_cfa_insn): Add support for DW_CFA_def_cfa_expression.\n+\t(struct frame_state): Add base offset and indirect fields.\n+\t* libgcc2.c (next_stack_level): Support indirect loading for CFA.\n+\n 2000-06-26  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-decl.c (grokdeclarator): Don't warn about `long long' in C99.\n@@ -76,7 +114,7 @@\n \n 2000-06-24  Marc Espie <espie@cvs.openbsd.org>\n \n-\t* collect2.c (resolve_lib_name): Move '/' check to more rational place.\n+\t* collect2.c (resolve_lib_name): Move '/' check out of loop.\n \n 2000-06-24  Dirk Duellmann  <Dirk.Duellmann@cern.ch>\n "}, {"sha": "e9c43829d6501ea403a8cb4e4e534de23af4bfed", "filename": "gcc/dwarf2.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2Fdwarf2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2Fdwarf2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2.h?ref=7d9d8943c9a920f25b1b0319dc201de1a280c412", "patch": "@@ -497,6 +497,8 @@ enum dwarf_call_frame_info\n     DW_CFA_def_cfa = 0x0c,\n     DW_CFA_def_cfa_register = 0x0d,\n     DW_CFA_def_cfa_offset = 0x0e,\n+    DW_CFA_def_cfa_expression = 0x0f,\n+    DW_CFA_expression = 0x10,\n     /* SGI/MIPS specific */\n     DW_CFA_MIPS_advance_loc8 = 0x1d,\n "}, {"sha": "b11643779a5e737fc5f7aecbe76cb1b00501dbf4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2010, "deletions": 1758, "changes": 3768, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7d9d8943c9a920f25b1b0319dc201de1a280c412"}, {"sha": "52db16f577e3bad0d062b11ac01510c7f8695e22", "filename": "gcc/frame-dwarf2.c", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2Fframe-dwarf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2Fframe-dwarf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe-dwarf2.c?ref=7d9d8943c9a920f25b1b0319dc201de1a280c412", "patch": "@@ -466,6 +466,108 @@ extract_cie_info (fde *f, struct cie_info *c)\n   return p;\n }\n \n+/* Decode a DW_OP stack operation.  */\n+\n+static void *\n+decode_stack_op (unsigned char *buf, struct frame_state *state)\n+{\n+  enum dwarf_location_atom op;\n+  int offset;\n+\n+  op = *buf++;\n+  switch (op)\n+    {\n+    case DW_OP_reg0:\n+    case DW_OP_reg1:\n+    case DW_OP_reg2:\n+    case DW_OP_reg3:\n+    case DW_OP_reg4:\n+    case DW_OP_reg5:\n+    case DW_OP_reg6:\n+    case DW_OP_reg7:\n+    case DW_OP_reg8:\n+    case DW_OP_reg9:\n+    case DW_OP_reg10:\n+    case DW_OP_reg11:\n+    case DW_OP_reg12:\n+    case DW_OP_reg13:\n+    case DW_OP_reg14:\n+    case DW_OP_reg15:\n+    case DW_OP_reg16:\n+    case DW_OP_reg17:\n+    case DW_OP_reg18:\n+    case DW_OP_reg19:\n+    case DW_OP_reg20:\n+    case DW_OP_reg21:\n+    case DW_OP_reg22:\n+    case DW_OP_reg23:\n+    case DW_OP_reg24:\n+    case DW_OP_reg25:\n+    case DW_OP_reg26:\n+    case DW_OP_reg27:\n+    case DW_OP_reg28:\n+    case DW_OP_reg29:\n+    case DW_OP_reg30:\n+    case DW_OP_reg31:\n+      state->cfa_reg = op - DW_OP_reg0;\n+      break;\n+    case DW_OP_regx:\n+      buf = decode_sleb128 (buf, &offset);\n+      state->cfa_reg = offset;\n+    case DW_OP_breg0:\n+    case DW_OP_breg1:\n+    case DW_OP_breg2:\n+    case DW_OP_breg3:\n+    case DW_OP_breg4:\n+    case DW_OP_breg5:\n+    case DW_OP_breg6:\n+    case DW_OP_breg7:\n+    case DW_OP_breg8:\n+    case DW_OP_breg9:\n+    case DW_OP_breg10:\n+    case DW_OP_breg11:\n+    case DW_OP_breg12:\n+    case DW_OP_breg13:\n+    case DW_OP_breg14:\n+    case DW_OP_breg15:\n+    case DW_OP_breg16:\n+    case DW_OP_breg17:\n+    case DW_OP_breg18:\n+    case DW_OP_breg19:\n+    case DW_OP_breg20:\n+    case DW_OP_breg21:\n+    case DW_OP_breg22:\n+    case DW_OP_breg23:\n+    case DW_OP_breg24:\n+    case DW_OP_breg25:\n+    case DW_OP_breg26:\n+    case DW_OP_breg27:\n+    case DW_OP_breg28:\n+    case DW_OP_breg29:\n+    case DW_OP_breg30:\n+    case DW_OP_breg31:\n+      state->cfa_reg = op - DW_OP_breg0;\n+      buf = decode_sleb128 (buf, &offset);\n+      state->base_offset = offset;\n+      break;\n+    case DW_OP_bregx:\n+      buf = decode_sleb128 (buf, &offset);\n+      state->cfa_reg = offset;\n+      buf = decode_sleb128 (buf, &offset);\n+      state->base_offset = offset;\n+      break;\n+    case DW_OP_deref:\n+      state->indirect = 1;\n+      break;\n+    case DW_OP_plus_uconst:\n+      buf = decode_uleb128 (buf, &offset);\n+      state->cfa_offset = offset;\n+      break;\n+    default:\n+      abort ();\n+    }\n+  return buf;\n+}\n /* Decode one instruction's worth of DWARF 2 call frame information.\n    Used by __frame_state_for.  Takes pointers P to the instruction to\n    decode, STATE to the current register unwind information, INFO to the\n@@ -567,6 +669,20 @@ execute_cfa_insn (void *p, struct frame_state_internal *state,\n       p = decode_uleb128 (p, &offset);\n       state->s.cfa_offset = offset;\n       break;\n+    case DW_CFA_def_cfa_expression:\n+      {\n+\tvoid *end;\n+\tstate->s.cfa_reg = 0;\n+\tstate->s.cfa_offset = 0;\n+\tstate->s.base_offset = 0;\n+\tstate->s.indirect = 0;\n+\n+\tp = decode_uleb128 (p, &offset);\n+\tend = p + offset;\n+\twhile (p < end)\n+\t  p = decode_stack_op (p, &(state->s));\n+\tbreak;\n+      }\n       \n     case DW_CFA_remember_state:\n       {"}, {"sha": "52908f11b32ddc1ae65d5355b0827e96ec50d299", "filename": "gcc/frame.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2Fframe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2Fframe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe.h?ref=7d9d8943c9a920f25b1b0319dc201de1a280c412", "patch": "@@ -1,6 +1,6 @@\n /* Header file for unwinding stack frames for exception handling.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@cygnus.com>.\n \n This file is part of GNU CC.\n@@ -30,11 +30,13 @@ typedef struct frame_state\n   void *cfa;\n   void *eh_ptr;\n   long cfa_offset;\n+  long base_offset;\n   long args_size;\n   long reg_or_offset[DWARF_FRAME_REGISTERS+1];\n   unsigned short cfa_reg;\n   unsigned short retaddr_column;\n   char saved[DWARF_FRAME_REGISTERS+1];\n+  char indirect;\n } frame_state;\n \n /* Values for 'saved' above.  */"}, {"sha": "b40fb58dc9aa7294421c4345928b14701bafc055", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9d8943c9a920f25b1b0319dc201de1a280c412/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=7d9d8943c9a920f25b1b0319dc201de1a280c412", "patch": "@@ -3711,6 +3711,9 @@ next_stack_level (void *pc, frame_state *udata, frame_state *caller_udata)\n     caller_udata->cfa = get_reg (caller_udata->cfa_reg, udata, 0);\n   else\n     caller_udata->cfa = udata->cfa;\n+  if (caller_udata->indirect)\n+    caller_udata->cfa = *(word_type *)((unsigned char *)caller_udata->cfa \n+\t\t\t\t  + caller_udata->base_offset);\n   caller_udata->cfa += caller_udata->cfa_offset;\n \n   return caller_udata;"}]}