{"sha": "a23404c90f9353b89ac9eb0871b20cbb11562942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIzNDA0YzkwZjkzNTNiODlhYzllYjA4NzFiMjBjYmIxMTU2Mjk0Mg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-07-28T14:47:02Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-07-28T14:47:02Z"}, "message": "[multiple changes]\n\n2016-07-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n\t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/71883\n\t* frontend-passes.c (gfc_run_passes): Bail out if there are any\n\terrors.\n\t* error.c (gfc_internal_error): If there are any errors in the\n\tbuffer, exit with EXIT_FAILURE.\n\n2016-07-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/71883\n\t* gfortran.dg/pr71883.f90 : New test.\n\nFrom-SVN: r238822", "tree": {"sha": "92a194290ad1e68b1398186c5d0a8d7aa0ca37b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92a194290ad1e68b1398186c5d0a8d7aa0ca37b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a23404c90f9353b89ac9eb0871b20cbb11562942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23404c90f9353b89ac9eb0871b20cbb11562942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23404c90f9353b89ac9eb0871b20cbb11562942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23404c90f9353b89ac9eb0871b20cbb11562942/comments", "author": null, "committer": null, "parents": [{"sha": "63715e5e78532916b334027d72fb59931798a5f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63715e5e78532916b334027d72fb59931798a5f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63715e5e78532916b334027d72fb59931798a5f7"}], "stats": {"total": 104, "additions": 83, "deletions": 21}, "files": [{"sha": "85f2107e35e9cddde95ec4b5468a6144fe262b31", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23404c90f9353b89ac9eb0871b20cbb11562942/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23404c90f9353b89ac9eb0871b20cbb11562942/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a23404c90f9353b89ac9eb0871b20cbb11562942", "patch": "@@ -1,3 +1,12 @@\n+2016-07-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/71883\n+\t* frontend-passes.c (gfc_run_passes): Bail out if there are any\n+\terrors.\n+\t* error.c (gfc_internal_error): If there are any errors in the\n+\tbuffer, exit with EXIT_FAILURE.\n+\n 2016-07-28  Renlin Li  <renlin.li@arm.com>\n \n \tRevert\n@@ -19,7 +28,7 @@\n 2016-07-22  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/71935\n-\t* check.c (is_c_interoperable): Simplify right expression. \n+\t* check.c (is_c_interoperable): Simplify right expression.\n \n 2016-07-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n@@ -75,7 +84,7 @@\n \n \tPR fortran/29819\n \t* parse.c (parse_contained): Use proper locus.\n- \n+\n 2016-07-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/70842"}, {"sha": "acba1c874cc513af12045b40775b37a0f066b425", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23404c90f9353b89ac9eb0871b20cbb11562942/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23404c90f9353b89ac9eb0871b20cbb11562942/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=a23404c90f9353b89ac9eb0871b20cbb11562942", "patch": "@@ -307,7 +307,7 @@ show_locus (locus *loc, int c1, int c2)\n \n   error_string (f->filename);\n   error_char (':');\n-    \n+\n   error_integer (LOCATION_LINE (lb->location));\n \n   if ((c1 > 0) || (c2 > 0))\n@@ -357,7 +357,7 @@ show_locus (locus *loc, int c1, int c2)\n     offset = cmax - terminal_width + 5;\n \n   /* Show the line itself, taking care not to print more than what can\n-     show up on the terminal.  Tabs are converted to spaces, and \n+     show up on the terminal.  Tabs are converted to spaces, and\n      nonprintable characters are converted to a \"\\xNN\" sequence.  */\n \n   p = &(lb->line[offset]);\n@@ -375,7 +375,7 @@ show_locus (locus *loc, int c1, int c2)\n   error_char ('\\n');\n \n   /* Show the '1' and/or '2' corresponding to the column of the error\n-     locus.  Note that a value of -1 for c1 or c2 will simply cause \n+     locus.  Note that a value of -1 for c1 or c2 will simply cause\n      the relevant number not to be printed.  */\n \n   c1 -= offset;\n@@ -440,7 +440,7 @@ show_loci (locus *l1, locus *l2)\n   else\n     m = c1 - c2;\n \n-  /* Note that the margin value of 10 here needs to be less than the \n+  /* Note that the margin value of 10 here needs to be less than the\n      margin of 5 used in the calculation of offset in show_locus.  */\n \n   if (l1->lb != l2->lb || m > terminal_width - 10)\n@@ -467,11 +467,11 @@ show_loci (locus *l1, locus *l2)\n    If a locus pointer is given, the actual source line is printed out\n    and the column is indicated.  Since we want the error message at\n    the bottom of any source file information, we must scan the\n-   argument list twice -- once to determine whether the loci are \n+   argument list twice -- once to determine whether the loci are\n    present and record this for printing, and once to print the error\n    message after and loci have been printed.  A maximum of two locus\n    arguments are permitted.\n-   \n+\n    This function is also called (recursively) by show_locus in the\n    case of included files; however, as show_locus does not resupply\n    any loci, the recursion is at most one level deep.  */\n@@ -687,11 +687,11 @@ error_print (const char *type, const char *format0, va_list argp)\n \t  /* This is a position specifier.  See comment above.  */\n \t  while (ISDIGIT (*format))\n \t    format++;\n-\t    \n+\n \t  /* Skip over the dollar sign.  */\n \t  format++;\n \t}\n-\t\n+\n       switch (*format)\n \t{\n \tcase '%':\n@@ -804,10 +804,10 @@ gfc_warning (int opt, const char *gmsgid, va_list ap)\n \t++werrorcount;\n       else if (diagnostic.kind == DK_ERROR)\n \t++werrorcount_buffered;\n-      else \n+      else\n \t++werrorcount, --warningcount, ++warningcount_buffered;\n     }\n-  \n+\n   va_end (argp);\n   return ret;\n }\n@@ -1030,17 +1030,17 @@ gfc_diagnostic_build_locus_prefix (diagnostic_context *context,\n    With -fdiagnostic-show-caret (the default) it prints:\n \n        [locus of primary range]:\n-       \n+\n           some code\n                  1\n        Error: Some error at (1)\n-        \n+\n   With -fno-diagnostic-show-caret or if the primary range is not\n   valid, it prints:\n \n        [locus of primary range]: Error: Some error at (1) and (2)\n */\n-static void \n+static void\n gfc_diagnostic_starter (diagnostic_context *context,\n \t\t\tdiagnostic_info *diagnostic)\n {\n@@ -1051,7 +1051,7 @@ gfc_diagnostic_starter (diagnostic_context *context,\n   bool one_locus = diagnostic->richloc->get_num_locations () < 2;\n   bool same_locus = false;\n \n-  if (!one_locus) \n+  if (!one_locus)\n     {\n       s2 = diagnostic_expand_location (diagnostic, 1);\n       same_locus = diagnostic_same_line (context, s1, s2);\n@@ -1223,8 +1223,8 @@ gfc_warning_check (void)\n       werrorcount += werrorcount_buffered;\n       gcc_assert (warningcount_buffered + werrorcount_buffered == 1);\n       pp->buffer = tmp_buffer;\n-      diagnostic_action_after_output (global_dc, \n-\t\t\t\t      warningcount_buffered \n+      diagnostic_action_after_output (global_dc,\n+\t\t\t\t      warningcount_buffered\n \t\t\t\t      ? DK_WARNING : DK_ERROR);\n     }\n }\n@@ -1303,10 +1303,15 @@ gfc_error (const char *gmsgid, ...)\n void\n gfc_internal_error (const char *gmsgid, ...)\n {\n+  int e, w;\n   va_list argp;\n   diagnostic_info diagnostic;\n   rich_location rich_loc (line_table, UNKNOWN_LOCATION);\n \n+  gfc_get_errors (&w, &e);\n+  if (e > 0)\n+    exit(EXIT_FAILURE);\n+\n   va_start (argp, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &argp, &rich_loc, DK_ICE);\n   report_diagnostic (&diagnostic);\n@@ -1332,7 +1337,7 @@ gfc_clear_error (void)\n bool\n gfc_error_flag_test (void)\n {\n-  return error_buffer.flag \n+  return error_buffer.flag\n     || !gfc_output_buffer_empty_p (pp_error_buffer);\n }\n "}, {"sha": "29e43a11138f9ff31acc5a0bca7ccd90300f59d8", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23404c90f9353b89ac9eb0871b20cbb11562942/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23404c90f9353b89ac9eb0871b20cbb11562942/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=a23404c90f9353b89ac9eb0871b20cbb11562942", "patch": "@@ -125,6 +125,7 @@ gfc_run_passes (gfc_namespace *ns)\n   doloop_level = 0;\n   doloop_warn (ns);\n   doloop_list.release ();\n+  int w, e;\n \n   if (flag_frontend_optimize)\n     {\n@@ -136,6 +137,10 @@ gfc_run_passes (gfc_namespace *ns)\n       expr_array.release ();\n     }\n \n+  gfc_get_errors (&w, &e);\n+  if (e > 0)\n+   return;\n+\n   if (flag_realloc_lhs)\n     realloc_strings (ns);\n }"}, {"sha": "2a15ab021fee18f0b4bd675f16ac311394726070", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23404c90f9353b89ac9eb0871b20cbb11562942/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23404c90f9353b89ac9eb0871b20cbb11562942/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a23404c90f9353b89ac9eb0871b20cbb11562942", "patch": "@@ -1,3 +1,8 @@\n+2016-07-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/71883\n+\t* gfortran.dg/pr71883.f90 : New test.\n+\n 2016-07-28  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/71734\n@@ -43,7 +48,7 @@\n \n 2016-07-27  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n-\t* gcc.dg/torture/pr69352.c: Use  __INTPTR_TYPE__ instead of \n+\t* gcc.dg/torture/pr69352.c: Use  __INTPTR_TYPE__ instead of\n \tincluding stdint.h.\n \t* gcc.dg/torture/pr71866.c: Use __UINTPTR_TYPE__ isntead of\n \tincluding stdint.h.\n@@ -378,7 +383,7 @@\n \n 2016-07-19  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n-\t* gcc.dg/params/blocksort-part.c: Conditionally define Int32 \n+\t* gcc.dg/params/blocksort-part.c: Conditionally define Int32\n \tand UInt32 based on __SIZEOF_INT__.\n \n 2016-07-19  Richard Biener  <rguenther@suse.de>"}, {"sha": "23ed6a680bde53e16336be1008f8815f2e4247ae", "filename": "gcc/testsuite/gfortran.dg/pr71883.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23404c90f9353b89ac9eb0871b20cbb11562942/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71883.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23404c90f9353b89ac9eb0871b20cbb11562942/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71883.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71883.f90?ref=a23404c90f9353b89ac9eb0871b20cbb11562942", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do compile }\n+!\n+! Test the fix for pr71883, in which an ICE would follow the error.\n+!\n+! Contributed by Gerhard Steinmetz  <gerhard.steinmetz.fortran@t-online.de>\n+!\n+program p\n+   character(3), allocatable :: z(:,:)\n+   z(1:2,1:2) = 'abc'\n+   z(2,1) = z(12) ! { dg-error \"Rank mismatch in array reference\" }\n+   z(21) = z(1,2) ! { dg-error \"Rank mismatch in array reference\" }\n+contains\n+   subroutine a\n+      character(3), allocatable :: z(:,:)\n+      z(1:2,1:2) = 'abc'\n+      z(2,1) = z(-1) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(2,1) = z(99) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(2,1) = z(huge(0)) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(2,1) = z(-huge(0)) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(-1) = z(2,1) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(99) = z(2,1) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(huge(0)) = z(2,1) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(-huge(0)) = z(2,1) ! { dg-error \"Rank mismatch in array reference\" }\n+  end subroutine\n+\n+   subroutine b\n+      character(:), allocatable :: z(:,:)\n+      z(1:2,1:2) = 'abc'\n+      z(2,1) = z(-1) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(2,1) = z(99) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(2,1) = z(huge(0)) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(2,1) = z(-huge(0)) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(-1) = z(2,1) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(99) = z(2,1) ! { dg-error \"Rank mismatch in array reference\" }\n+     z(huge(0)) = z(2,1) ! { dg-error \"Rank mismatch in array reference\" }\n+      z(-huge(0)) = z(2,1) ! { dg-error \"Rank mismatch in array reference\" }\n+   end subroutine\n+end"}]}