{"sha": "e1d2bd1e44971a4becd718272277361b4f64fcad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkMmJkMWU0NDk3MWE0YmVjZDcxODI3MjI3NzM2MWI0ZjY0ZmNhZA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-06-23T11:39:32Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-06-23T11:39:32Z"}, "message": "re PR target/15948 (THUMB: ICE with non-commutative cbranch)\n\n* PR target/15948\n* arm.md (bicsi3_cbranch): Add alternative to handle tying operands\none and two.\n\nFrom-SVN: r83549", "tree": {"sha": "d40bc79e1b8cf1a29e8de01cb7e51a378f3533ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d40bc79e1b8cf1a29e8de01cb7e51a378f3533ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d2bd1e44971a4becd718272277361b4f64fcad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d2bd1e44971a4becd718272277361b4f64fcad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d2bd1e44971a4becd718272277361b4f64fcad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d2bd1e44971a4becd718272277361b4f64fcad/comments", "author": null, "committer": null, "parents": [{"sha": "97358092a486fda247a0e3bcd72cb2a1ab6f45d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97358092a486fda247a0e3bcd72cb2a1ab6f45d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97358092a486fda247a0e3bcd72cb2a1ab6f45d0"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "db45e7e2e9e79ee410c631f5a06309cd2a25b30a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d2bd1e44971a4becd718272277361b4f64fcad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d2bd1e44971a4becd718272277361b4f64fcad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1d2bd1e44971a4becd718272277361b4f64fcad", "patch": "@@ -1,3 +1,9 @@\n+2004-06-23  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* PR target/15948\n+\t* arm.md (bicsi3_cbranch): Add alternative to handle tying operands\n+\tone and two.\n+\n 2004-06-23  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/15927"}, {"sha": "fb13fe061f54b508213745d4a8aef0cec2ba69e5", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d2bd1e44971a4becd718272277361b4f64fcad/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d2bd1e44971a4becd718272277361b4f64fcad/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=e1d2bd1e44971a4becd718272277361b4f64fcad", "patch": "@@ -6167,22 +6167,24 @@\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 5 \"equality_operator\"\n-\t  [(and:SI (not:SI (match_operand:SI 3 \"s_register_operand\" \"l,l,l,l\"))\n-\t\t   (match_operand:SI 2 \"s_register_operand\" \"0,1,1,1\"))\n+\t  [(and:SI (not:SI (match_operand:SI 3 \"s_register_operand\" \"l,l,l,l,l\"))\n+\t\t   (match_operand:SI 2 \"s_register_operand\" \"0,1,1,1,1\"))\n \t   (const_int 0)])\n \t (label_ref (match_operand 4 \"\" \"\"))\n \t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n+   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=!l,l,*?h,*?m,*?m\")\n \t(and:SI (not:SI (match_dup 3)) (match_dup 2)))\n-   (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n+   (clobber (match_scratch:SI 1 \"=X,l,l,&l,&l\"))]\n   \"TARGET_THUMB\"\n   \"*\n   {\n   if (which_alternative == 0)\n     output_asm_insn (\\\"bic\\\\t%0, %3\\\", operands);\n-  else if (which_alternative == 1)\n+  else if (which_alternative <= 2)\n     {\n       output_asm_insn (\\\"bic\\\\t%1, %3\\\", operands);\n+      /* It's ok if OP0 is a lo-reg, even though the mov will set the\n+\t conditions again, since we're only testing for equality.  */\n       output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n     }\n   else"}]}