{"sha": "05555c4ad17672cbfe207011804d69b59c806138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU1NTVjNGFkMTc2NzJjYmZlMjA3MDExODA0ZDY5YjU5YzgwNjEzOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-08-07T01:14:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-08-07T01:14:39Z"}, "message": "coretypes.h (rtl_opt_pass): Add.\n\n2013-08-07  David Malcolm  <dmalcolm@redhat.com>\n\n\t* coretypes.h (rtl_opt_pass): Add.\n\t(gcc::context): Add.\n\t* config/epiphany/epiphany.c (pass_mode_switch_use): New.\n\t(epiphany_init): Port to new C++ pass API.\n\t(epiphany_optimize_mode_switching): Likewise.\n\t* pass_manager.h (pass_manager::get_pass_split_all_insns): New.\n\t(pass_manager::get_pass_mode_switching): New.\n\t(pass_manager::get_pass_peephole2): New.\n\t* mode-switching.c (pass_mode_switching): Add clone method.\n\t* recog.c (pass_peephole2): Add clone method.\n\t(pass_split_all_insns): Add clone method.\n\nFrom-SVN: r201549", "tree": {"sha": "385c4f824e3b48ea8105418478de6436fc129a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/385c4f824e3b48ea8105418478de6436fc129a42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05555c4ad17672cbfe207011804d69b59c806138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05555c4ad17672cbfe207011804d69b59c806138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05555c4ad17672cbfe207011804d69b59c806138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05555c4ad17672cbfe207011804d69b59c806138/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e71835fb5b9586239495b66f45147d8dba35ff19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71835fb5b9586239495b66f45147d8dba35ff19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e71835fb5b9586239495b66f45147d8dba35ff19"}], "stats": {"total": 73, "additions": 62, "deletions": 11}, "files": [{"sha": "f89f5eba9d737d9bc25a19234e9293a0bb75ca88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05555c4ad17672cbfe207011804d69b59c806138/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05555c4ad17672cbfe207011804d69b59c806138/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05555c4ad17672cbfe207011804d69b59c806138", "patch": "@@ -1,3 +1,17 @@\n+2013-08-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* coretypes.h (rtl_opt_pass): Add.\n+\t(gcc::context): Add.\n+\t* config/epiphany/epiphany.c (pass_mode_switch_use): New.\n+\t(epiphany_init): Port to new C++ pass API.\n+\t(epiphany_optimize_mode_switching): Likewise.\n+\t* pass_manager.h (pass_manager::get_pass_split_all_insns): New.\n+\t(pass_manager::get_pass_mode_switching): New.\n+\t(pass_manager::get_pass_peephole2): New.\n+\t* mode-switching.c (pass_mode_switching): Add clone method.\n+\t* recog.c (pass_peephole2): Add clone method.\n+\t(pass_split_all_insns): Add clone method.\n+\n 2013-08-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/mips/mips.c (insert_pass_mips_machine_reorg2): Move"}, {"sha": "fd4c01c49a4f970c83d12d8113840316184be19e", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05555c4ad17672cbfe207011804d69b59c806138/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05555c4ad17672cbfe207011804d69b59c806138/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=05555c4ad17672cbfe207011804d69b59c806138", "patch": "@@ -45,6 +45,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"tm-constrs.h\"\n #include \"tree-pass.h\"\t/* for current_pass */\n+#include \"context.h\"\n+#include \"pass_manager.h\"\n \n /* Which cpu we're compiling for.  */\n int epiphany_cpu_type;\n@@ -59,6 +61,9 @@ char epiphany_punct_chars[256];\n /* The rounding mode that we generally use for floating point.  */\n int epiphany_normal_fp_rounding;\n \n+/* The pass instance, for use in epiphany_optimize_mode_switching. */\n+static opt_pass *pass_mode_switch_use;\n+\n static void epiphany_init_reg_tables (void);\n static int get_epiphany_condition_code (rtx);\n static tree epiphany_handle_interrupt_attribute (tree *, tree, tree, int, bool *);\n@@ -165,20 +170,26 @@ epiphany_init (void)\n      pass because of the side offect of epiphany_mode_needed on\n      MACHINE_FUNCTION(cfun)->unknown_mode_uses.  But it must run before\n      pass_resolve_sw_modes.  */\n-  static struct register_pass_info insert_use_info\n-    = { &pass_mode_switch_use.pass, \"mode_sw\",\n+  pass_mode_switch_use = make_pass_mode_switch_use (g);\n+  struct register_pass_info insert_use_info\n+    = { pass_mode_switch_use, \"mode_sw\",\n \t1, PASS_POS_INSERT_AFTER\n       };\n-  static struct register_pass_info mode_sw2_info\n-    = { &pass_mode_switching.pass, \"mode_sw\",\n+  opt_pass *mode_sw2\n+    = g->get_passes()->get_pass_mode_switching ()->clone ();\n+  struct register_pass_info mode_sw2_info\n+    = { mode_sw2, \"mode_sw\",\n \t1, PASS_POS_INSERT_AFTER\n       };\n-  static struct register_pass_info mode_sw3_info\n-    = { &pass_resolve_sw_modes.pass, \"mode_sw\",\n+  opt_pass *mode_sw3 = make_pass_resolve_sw_modes (g);\n+  struct register_pass_info mode_sw3_info\n+    = { mode_sw3, \"mode_sw\",\n \t1, PASS_POS_INSERT_AFTER\n       };\n-  static struct register_pass_info mode_sw4_info\n-    = { &pass_split_all_insns.pass, \"mode_sw\",\n+  opt_pass *mode_sw4\n+    = g->get_passes()->get_pass_split_all_insns ()->clone ();\n+  struct register_pass_info mode_sw4_info\n+    = { mode_sw4, \"mode_sw\",\n \t1, PASS_POS_INSERT_AFTER\n       };\n   static const int num_modes[] = NUM_MODES_FOR_MODE_SWITCHING;\n@@ -205,8 +216,10 @@ epiphany_init (void)\n          (see http://gcc.gnu.org/ml/gcc-patches/2011-10/msg02819.html,)\n          we need a second peephole2 pass to get reasonable code.  */\n   {\n-    static struct register_pass_info peep2_2_info\n-      = { &pass_peephole2.pass, \"peephole2\",\n+    opt_pass *extra_peephole2\n+      = g->get_passes ()->get_pass_peephole2 ()->clone ();\n+    struct register_pass_info peep2_2_info\n+      = { extra_peephole2, \"peephole2\",\n \t  1, PASS_POS_INSERT_AFTER\n \t};\n \n@@ -2256,7 +2269,7 @@ epiphany_optimize_mode_switching (int entity)\n       return (MACHINE_FUNCTION (cfun)->sw_entities_processed\n \t      & (1 << EPIPHANY_MSW_ENTITY_ROUND_UNKNOWN)) != 0;\n     case EPIPHANY_MSW_ENTITY_FPU_OMNIBUS:\n-      return optimize == 0 || current_pass == &pass_mode_switch_use.pass;\n+      return optimize == 0 || current_pass == pass_mode_switch_use;\n     }\n   gcc_unreachable ();\n }"}, {"sha": "54bfe7f8654707a9b51186933708db68fd84fae3", "filename": "gcc/coretypes.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05555c4ad17672cbfe207011804d69b59c806138/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05555c4ad17672cbfe207011804d69b59c806138/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=05555c4ad17672cbfe207011804d69b59c806138", "patch": "@@ -169,6 +169,12 @@ typedef const struct basic_block_def *const_basic_block;\n    in target.h.  */\n typedef int reg_class_t;\n \n+class rtl_opt_pass;\n+\n+namespace gcc {\n+  class context;\n+}\n+\n #else\n \n struct _dont_use_rtx_here_;"}, {"sha": "56c4d0fef9a4dfcf40878034b8d825deef425d47", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05555c4ad17672cbfe207011804d69b59c806138/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05555c4ad17672cbfe207011804d69b59c806138/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=05555c4ad17672cbfe207011804d69b59c806138", "patch": "@@ -809,6 +809,9 @@ class pass_mode_switching : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n+  /* The epiphany backend creates a second instance of this pass, so we need\n+     a clone method.  */\n+  opt_pass * clone () { return new pass_mode_switching (ctxt_); }\n   bool gate () { return gate_mode_switching (); }\n   unsigned int execute () { return rest_of_handle_mode_switching (); }\n "}, {"sha": "41d2c7605d24e08dd4341b0649f4f03e4c1129c9", "filename": "gcc/pass_manager.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05555c4ad17672cbfe207011804d69b59c806138/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05555c4ad17672cbfe207011804d69b59c806138/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=05555c4ad17672cbfe207011804d69b59c806138", "patch": "@@ -66,6 +66,15 @@ class pass_manager\n   void execute_early_local_passes ();\n   unsigned int execute_pass_mode_switching ();\n \n+  /* Various passes are manually cloned by epiphany. */\n+  opt_pass *get_pass_split_all_insns () const {\n+    return pass_split_all_insns_1;\n+  }\n+  opt_pass *get_pass_mode_switching () const {\n+    return pass_mode_switching_1;\n+  }\n+  opt_pass *get_pass_peephole2 () const { return pass_peephole2_1; }\n+\n public:\n   /* The root of the compilation pass tree, once constructed.  */\n   opt_pass *all_passes;"}, {"sha": "2d44416892efa49f902ea2ab45c0f0debe35ce5e", "filename": "gcc/recog.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05555c4ad17672cbfe207011804d69b59c806138/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05555c4ad17672cbfe207011804d69b59c806138/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=05555c4ad17672cbfe207011804d69b59c806138", "patch": "@@ -3803,6 +3803,9 @@ class pass_peephole2 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n+  /* The epiphany backend creates a second instance of this pass, so we need\n+     a clone method.  */\n+  opt_pass * clone () { return new pass_peephole2 (ctxt_); }\n   bool gate () { return gate_handle_peephole2 (); }\n   unsigned int execute () { return rest_of_handle_peephole2 (); }\n \n@@ -3848,6 +3851,9 @@ class pass_split_all_insns : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n+  /* The epiphany backend creates a second instance of this pass, so\n+     we need a clone method.  */\n+  opt_pass * clone () { return new pass_split_all_insns (ctxt_); }\n   unsigned int execute () { return rest_of_handle_split_all_insns (); }\n \n }; // class pass_split_all_insns"}]}