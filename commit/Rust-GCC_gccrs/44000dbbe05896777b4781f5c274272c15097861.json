{"sha": "44000dbbe05896777b4781f5c274272c15097861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQwMDBkYmJlMDU4OTY3NzdiNDc4MWY1YzI3NDI3MmMxNTA5Nzg2MQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-02-29T22:50:25Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-02-29T22:50:25Z"}, "message": "re PR fortran/35059 (Seg fault when max constructor limit reached)\n\n2008-02-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/35059\n\t* expr.c (find_array_element): Modify traversing the constructor to\n\tavoid trying to access NULL memory pointed to by next for the\n\tlast element. (find_array_section): Exit while loop if cons->next is\n\tNULL.\n\t* trans-expr.c (gfc_conv_scalar_char_value): Initialize gfc_typespec.\n\t(gfc_conv_function_call): Same.\n\t* decl.c (gfc_match_implicit): Same.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_sr_kind): Same.\n\nFrom-SVN: r132782", "tree": {"sha": "6b8d4f59dabb468ef7b4fe96a4195f38a77e215b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b8d4f59dabb468ef7b4fe96a4195f38a77e215b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44000dbbe05896777b4781f5c274272c15097861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44000dbbe05896777b4781f5c274272c15097861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44000dbbe05896777b4781f5c274272c15097861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44000dbbe05896777b4781f5c274272c15097861/comments", "author": null, "committer": null, "parents": [{"sha": "c17ee676e55b86d2c9d61b569a8c7e0cd8fb6d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17ee676e55b86d2c9d61b569a8c7e0cd8fb6d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c17ee676e55b86d2c9d61b569a8c7e0cd8fb6d4c"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "841c9d4c0d8e706b9c91915539f3caafca870d22", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44000dbbe05896777b4781f5c274272c15097861/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44000dbbe05896777b4781f5c274272c15097861/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=44000dbbe05896777b4781f5c274272c15097861", "patch": "@@ -1,3 +1,15 @@\n+2008-02-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/35059\n+\t* expr.c (find_array_element): Modify traversing the constructor to\n+\tavoid trying to access NULL memory pointed to by next for the\n+\tlast element. (find_array_section): Exit while loop if cons->next is\n+\tNULL.\n+\t* trans-expr.c (gfc_conv_scalar_char_value): Initialize gfc_typespec.\n+\t(gfc_conv_function_call): Same.\n+\t* decl.c (gfc_match_implicit): Same.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_sr_kind): Same.\n+\n 2008-02-28  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/31463"}, {"sha": "892c80a46d3cca972204230fee870ef68f3d737f", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44000dbbe05896777b4781f5c274272c15097861/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44000dbbe05896777b4781f5c274272c15097861/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=44000dbbe05896777b4781f5c274272c15097861", "patch": "@@ -2506,6 +2506,8 @@ gfc_match_implicit (void)\n   int c;\n   match m;\n \n+  gfc_clear_ts (&ts);\n+\n   /* We don't allow empty implicit statements.  */\n   if (gfc_match_eos () == MATCH_YES)\n     {"}, {"sha": "329bc722dba7e3a44b169cac7cffb5fbb045ddab", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44000dbbe05896777b4781f5c274272c15097861/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44000dbbe05896777b4781f5c274272c15097861/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=44000dbbe05896777b4781f5c274272c15097861", "patch": "@@ -1051,18 +1051,19 @@ find_array_element (gfc_constructor *cons, gfc_array_ref *ar,\n       mpz_mul (span, span, tmp);\n     }\n \n-  if (cons)\n-    {\n-      for (nelemen = mpz_get_ui (offset); nelemen > 0; nelemen--)\n-\t{\n-\t  if (cons->iterator)\n-\t    {\n-\t      cons = NULL;\n-\t      goto depart;\n-\t    }\n-\t  cons = cons->next;\n-\t}\n-    }\n+    for (nelemen = mpz_get_ui (offset); nelemen > 0; nelemen--)\n+      {\n+        if (cons)\n+\t  {\n+\t    if (cons->iterator)\n+\t      {\n+\t        cons = NULL;\n+\t      \n+\t        goto depart;\n+\t      }\n+\t    cons = cons->next;\n+\t  }\n+      }\n \n depart:\n   mpz_clear (delta);\n@@ -1341,7 +1342,7 @@ find_array_section (gfc_expr *expr, gfc_ref *ref)\n \t  cons = base;\n \t}\n \n-      while (mpz_cmp (ptr, index) > 0)\n+      while (cons && cons->next && mpz_cmp (ptr, index) > 0)\n \t{\n \t  mpz_add_ui (index, index, one);\n \t  cons = cons->next;"}, {"sha": "9b33d378107eee443a82ba696a48b0a2929d4d47", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44000dbbe05896777b4781f5c274272c15097861/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44000dbbe05896777b4781f5c274272c15097861/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=44000dbbe05896777b4781f5c274272c15097861", "patch": "@@ -1275,6 +1275,7 @@ gfc_conv_scalar_char_value (gfc_symbol *sym, gfc_se *se, gfc_expr **expr)\n       if ((*expr)->expr_type == EXPR_CONSTANT)\n         {\n \t  gfc_typespec ts;\n+          gfc_clear_ts (&ts);\n \n \t  *expr = gfc_int_expr ((int)(*expr)->value.character.string[0]);\n \t  if ((*expr)->ts.kind != gfc_c_int_kind)\n@@ -2250,6 +2251,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n   stringargs = NULL_TREE;\n   var = NULL_TREE;\n   len = NULL_TREE;\n+  gfc_clear_ts (&ts);\n \n   if (sym->from_intmod == INTMOD_ISO_C_BINDING)\n     {"}, {"sha": "49f2094561f850d210dd069566d7e6d36b16751a", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44000dbbe05896777b4781f5c274272c15097861/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44000dbbe05896777b4781f5c274272c15097861/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=44000dbbe05896777b4781f5c274272c15097861", "patch": "@@ -3764,6 +3764,8 @@ gfc_conv_intrinsic_sr_kind (gfc_se *se, gfc_expr *expr)\n       else\n \t{\n \t  gfc_typespec ts;\n+          gfc_clear_ts (&ts);\n+\n \t  if (actual->expr->ts.kind != gfc_c_int_kind)\n \t    {\n   \t      /* The arguments to SELECTED_REAL_KIND are INTEGER(4).  */"}]}