{"sha": "812c0795283d5eaebf84922e3d1951fdba1936c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyYzA3OTUyODNkNWVhZWJmODQ5MjJlM2QxOTUxZmRiYTE5MzZjNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-02-13T14:22:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-02-13T14:22:01Z"}, "message": "PR c++/84338 - wrong variadic sizeof.\n\n\t* pt.c (argument_pack_select_arg): Like the macro, but look through\n\ta pack expansion.\n\t(tsubst, tsubst_copy, dependent_template_arg_p): Use it.\n\t(extract_fnparm_pack): Do make_pack_expansion.\n\t(extract_locals_r): Do strip a pack expansion.\n\t* cp-tree.h (ARGUMENT_PACK_SELECT_ARG): Remove.\n\nFrom-SVN: r257626", "tree": {"sha": "5e83af3177cc1b7f03012582a3c24d981ede24bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e83af3177cc1b7f03012582a3c24d981ede24bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/812c0795283d5eaebf84922e3d1951fdba1936c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812c0795283d5eaebf84922e3d1951fdba1936c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/812c0795283d5eaebf84922e3d1951fdba1936c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812c0795283d5eaebf84922e3d1951fdba1936c5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1bbae6518fedd77c6e956bada60f429587ecd6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbae6518fedd77c6e956bada60f429587ecd6c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bbae6518fedd77c6e956bada60f429587ecd6c3"}], "stats": {"total": 99, "additions": 66, "deletions": 33}, "files": [{"sha": "677392c31fc09c5b73a18d6426c107f7c006de2a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812c0795283d5eaebf84922e3d1951fdba1936c5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812c0795283d5eaebf84922e3d1951fdba1936c5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=812c0795283d5eaebf84922e3d1951fdba1936c5", "patch": "@@ -1,3 +1,13 @@\n+2018-02-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/84338 - wrong variadic sizeof.\n+\t* pt.c (argument_pack_select_arg): Like the macro, but look through\n+\ta pack expansion.\n+\t(tsubst, tsubst_copy, dependent_template_arg_p): Use it.\n+\t(extract_fnparm_pack): Do make_pack_expansion.\n+\t(extract_locals_r): Do strip a pack expansion.\n+\t* cp-tree.h (ARGUMENT_PACK_SELECT_ARG): Remove.\n+\n 2018-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/84341"}, {"sha": "9a9e9f0bbcb0c5033674d1cee95fd3adf3dcf957", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812c0795283d5eaebf84922e3d1951fdba1936c5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812c0795283d5eaebf84922e3d1951fdba1936c5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=812c0795283d5eaebf84922e3d1951fdba1936c5", "patch": "@@ -3558,12 +3558,6 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define ARGUMENT_PACK_SELECT_INDEX(NODE)\t\t\t\t\\\n   (((struct tree_argument_pack_select *)ARGUMENT_PACK_SELECT_CHECK (NODE))->index)\n   \n-/* In an ARGUMENT_PACK_SELECT, the actual underlying argument that the\n-   ARGUMENT_PACK_SELECT represents. */\n-#define ARGUMENT_PACK_SELECT_ARG(NODE)\t\t\t\t\t\\\n-  TREE_VEC_ELT (ARGUMENT_PACK_ARGS (ARGUMENT_PACK_SELECT_FROM_PACK (NODE)), \\\n-\t        ARGUMENT_PACK_SELECT_INDEX (NODE))\n-\n #define FOLD_EXPR_CHECK(NODE)\t\t\t\t\t\t\\\n   TREE_CHECK4 (NODE, UNARY_LEFT_FOLD_EXPR, UNARY_RIGHT_FOLD_EXPR,\t\\\n \t       BINARY_LEFT_FOLD_EXPR, BINARY_RIGHT_FOLD_EXPR)"}, {"sha": "a83b7073d20f6d79ef2209f2cdc870fc25c50b1f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812c0795283d5eaebf84922e3d1951fdba1936c5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812c0795283d5eaebf84922e3d1951fdba1936c5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=812c0795283d5eaebf84922e3d1951fdba1936c5", "patch": "@@ -3394,6 +3394,34 @@ get_template_argument_pack_elems (const_tree t)\n   return ARGUMENT_PACK_ARGS (t);\n }\n \n+/* In an ARGUMENT_PACK_SELECT, the actual underlying argument that the\n+   ARGUMENT_PACK_SELECT represents. */\n+\n+static tree\n+argument_pack_select_arg (tree t)\n+{\n+  tree args = ARGUMENT_PACK_ARGS (ARGUMENT_PACK_SELECT_FROM_PACK (t));\n+  tree arg = TREE_VEC_ELT (args, ARGUMENT_PACK_SELECT_INDEX (t));\n+\n+  /* If the selected argument is an expansion E, that most likely means we were\n+     called from gen_elem_of_pack_expansion_instantiation during the\n+     substituting of an argument pack (of which the Ith element is a pack\n+     expansion, where I is ARGUMENT_PACK_SELECT_INDEX) into a pack expansion.\n+     In this case, the Ith element resulting from this substituting is going to\n+     be a pack expansion, which pattern is the pattern of E.  Let's return the\n+     pattern of E, and gen_elem_of_pack_expansion_instantiation will build the\n+     resulting pack expansion from it.  */\n+  if (PACK_EXPANSION_P (arg))\n+    {\n+      /* Make sure we aren't throwing away arg info.  */\n+      gcc_assert (!PACK_EXPANSION_EXTRA_ARGS (arg));\n+      arg = PACK_EXPANSION_PATTERN (arg);\n+    }\n+\n+  return arg;\n+}\n+\n+\n /* True iff FN is a function representing a built-in variadic parameter\n    pack.  */\n \n@@ -10933,7 +10961,12 @@ extract_fnparm_pack (tree tmpl_parm, tree *spec_p)\n   parmvec = make_tree_vec (len);\n   spec_parm = *spec_p;\n   for (i = 0; i < len; i++, spec_parm = DECL_CHAIN (spec_parm))\n-    TREE_VEC_ELT (parmvec, i) = spec_parm;\n+    {\n+      tree elt = spec_parm;\n+      if (DECL_PACK_P (elt))\n+\telt = make_pack_expansion (elt);\n+      TREE_VEC_ELT (parmvec, i) = elt;\n+    }\n \n   /* Build the argument packs.  */\n   SET_ARGUMENT_PACK_ARGS (argpack, parmvec);\n@@ -11388,7 +11421,8 @@ extract_locals_r (tree *tp, int */*walk_subtrees*/, void *data)\n \t  /* Pull out the actual PARM_DECL for the partial instantiation.  */\n \t  tree args = ARGUMENT_PACK_ARGS (spec);\n \t  gcc_assert (TREE_VEC_LENGTH (args) == 1);\n-\t  spec = TREE_VEC_ELT (args, 0);\n+\t  tree arg = TREE_VEC_ELT (args, 0);\n+\t  spec = PACK_EXPANSION_PATTERN (arg);\n \t}\n       *extra = tree_cons (*tp, spec, *extra);\n     }\n@@ -13747,29 +13781,9 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  {\n \t    arg = TMPL_ARG (args, level, idx);\n \n+\t    /* See through ARGUMENT_PACK_SELECT arguments. */\n \t    if (arg && TREE_CODE (arg) == ARGUMENT_PACK_SELECT)\n-\t      {\n-\t\t/* See through ARGUMENT_PACK_SELECT arguments. */\n-\t\targ = ARGUMENT_PACK_SELECT_ARG (arg);\n-\t\t/* If the selected argument is an expansion E, that most\n-\t\t   likely means we were called from\n-\t\t   gen_elem_of_pack_expansion_instantiation during the\n-\t\t   substituting of pack an argument pack (which Ith\n-\t\t   element is a pack expansion, where I is\n-\t\t   ARGUMENT_PACK_SELECT_INDEX) into a pack expansion.\n-\t\t   In this case, the Ith element resulting from this\n-\t\t   substituting is going to be a pack expansion, which\n-\t\t   pattern is the pattern of E.  Let's return the\n-\t\t   pattern of E, and\n-\t\t   gen_elem_of_pack_expansion_instantiation will\n-\t\t   build the resulting pack expansion from it.  */\n-\t\tif (PACK_EXPANSION_P (arg))\n-\t\t  {\n-\t\t    /* Make sure we aren't throwing away arg info.  */\n-\t\t    gcc_assert (!PACK_EXPANSION_EXTRA_ARGS (arg));\n-\t\t    arg = PACK_EXPANSION_PATTERN (arg);\n-\t\t  }\n-\t      }\n+\t      arg = argument_pack_select_arg (arg);\n \t  }\n \n \tif (arg == error_mark_node)\n@@ -14734,7 +14748,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t}\n       \n       if (TREE_CODE (r) == ARGUMENT_PACK_SELECT)\n-\tr = ARGUMENT_PACK_SELECT_ARG (r);\n+\tr = argument_pack_select_arg (r);\n       if (!mark_used (r, complain) && !(complain & tf_error))\n \treturn error_mark_node;\n       return r;\n@@ -14866,7 +14880,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\tregister_local_specialization (r, t);\n \t    }\n \t  if (TREE_CODE (r) == ARGUMENT_PACK_SELECT)\n-\t    r = ARGUMENT_PACK_SELECT_ARG (r);\n+\t    r = argument_pack_select_arg (r);\n \t}\n       else\n \tr = t;\n@@ -24701,7 +24715,7 @@ dependent_template_arg_p (tree arg)\n     return true;\n \n   if (TREE_CODE (arg) == ARGUMENT_PACK_SELECT)\n-    arg = ARGUMENT_PACK_SELECT_ARG (arg);\n+    arg = argument_pack_select_arg (arg);\n \n   if (TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM)\n     return true;"}, {"sha": "92fd34cb268407fe79bd1ada6ea92cf93ca65a52", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic13.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812c0795283d5eaebf84922e3d1951fdba1936c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812c0795283d5eaebf84922e3d1951fdba1936c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic13.C?ref=812c0795283d5eaebf84922e3d1951fdba1936c5", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/84338\n+// { dg-do compile { target c++14 } }\n+\n+template < typename ... T >\n+auto f(T ... i){\n+    [](auto ... i){\n+        // // wrongly true in current trunk\n+        // static_assert(sizeof...(i) == 1, \"\");\n+        static_assert(sizeof...(i) == 2, \"\");\n+    }(i ...);\n+}\n+\n+int main(){\n+    f(0, 1);\n+}"}]}