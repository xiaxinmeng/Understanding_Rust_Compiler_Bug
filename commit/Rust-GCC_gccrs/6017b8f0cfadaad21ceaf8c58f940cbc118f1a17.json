{"sha": "6017b8f0cfadaad21ceaf8c58f940cbc118f1a17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAxN2I4ZjBjZmFkYWFkMjFjZWFmOGM1OGY5NDBjYmMxMThmMWExNw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-20T19:09:34Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-20T19:09:34Z"}, "message": "re PR fortran/79072 (ICE with class(*) pointer function result and character value)\n\n2017-11-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/79072\n\t* trans-expr.c (trans_class_vptr_len_assignment): Set from_len\n\tif the temporary is unlimited polymorphic.\n\t* trans-stmt.c (trans_associate_var): Use the fake result decl\n\tto obtain the 'len' field from an explicit function result when\n\tin that function scope.\n\n2017-11-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/79072\n\t* gfortran.dg/class_result_5.f90: New test.\n\nFrom-SVN: r254966", "tree": {"sha": "8f3c208186072440d44271d3cd80eb69ade5e1bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f3c208186072440d44271d3cd80eb69ade5e1bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/comments", "author": null, "committer": null, "parents": [{"sha": "ee1c213355f0f9d33568c5118f318f22057d1454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1c213355f0f9d33568c5118f318f22057d1454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1c213355f0f9d33568c5118f318f22057d1454"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "4ba7327be33e5b912dc8489d8cdb597cdc234d94", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6017b8f0cfadaad21ceaf8c58f940cbc118f1a17", "patch": "@@ -1,3 +1,12 @@\n+2017-11-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79072\n+\t* trans-expr.c (trans_class_vptr_len_assignment): Set from_len\n+\tif the temporary is unlimited polymorphic.\n+\t* trans-stmt.c (trans_associate_var): Use the fake result decl\n+\tto obtain the 'len' field from an explicit function result when\n+\tin that function scope.\n+\n 2017-11-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/78990"}, {"sha": "2ca0ad6f6f0560ae6b0ef3f8836702a07291c135", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6017b8f0cfadaad21ceaf8c58f940cbc118f1a17", "patch": "@@ -8131,6 +8131,8 @@ trans_class_vptr_len_assignment (stmtblock_t *block, gfc_expr * le,\n \t    {\n \t      vptr_expr = NULL;\n \t      se.expr = gfc_class_vptr_get (rse->expr);\n+\t      if (UNLIMITED_POLY (re))\n+\t\tfrom_len = gfc_class_len_get (rse->expr);\n \t    }\n \t  else if (re->expr_type != EXPR_NULL)\n \t    /* Only when rhs is non-NULL use its declared type for vptr"}, {"sha": "6cf798160997d55688717b619892af36249f37ba", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=6017b8f0cfadaad21ceaf8c58f940cbc118f1a17", "patch": "@@ -1827,6 +1827,13 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n \t  gcc_assert (!e->symtree->n.sym->ts.deferred);\n \t  tmp = e->symtree->n.sym->ts.u.cl->backend_decl;\n \t}\n+      else if (e->symtree->n.sym->attr.function\n+\t       && e->symtree->n.sym == e->symtree->n.sym->result\n+\t       && e->symtree->n.sym == e->symtree->n.sym->ns->proc_name)\n+\t{\n+\t  tmp = gfc_get_fake_result_decl (e->symtree->n.sym, 0);\n+\t  tmp = gfc_class_len_get (tmp);\n+\t}\n       else\n \ttmp = gfc_class_len_get (gfc_get_symbol_decl (e->symtree->n.sym));\n       gfc_get_symbol_decl (sym);"}, {"sha": "949eb1946a3c5d8efaa5b70fb082a9a809b132a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6017b8f0cfadaad21ceaf8c58f940cbc118f1a17", "patch": "@@ -1,3 +1,8 @@\n+2017-11-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79072\n+\t* gfortran.dg/class_result_5.f90: New test.\n+\n 2017-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tP0329R4: Designated Initialization"}, {"sha": "c557ed3718099eb378a1fd7ea9c15d4445165c42", "filename": "gcc/testsuite/gfortran.dg/class_result_5.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6017b8f0cfadaad21ceaf8c58f940cbc118f1a17/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_5.f90?ref=6017b8f0cfadaad21ceaf8c58f940cbc118f1a17", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR79072. The original problem was that an ICE\n+! would occur in the select type construct. On fixing that, it was\n+! found that the string length was not being transferred in the\n+! pointer assignment in the main program.\n+!\n+! Contributed by Neil Carlson  <neil.n.carlson@gmail.com>\n+!\n+function foo(string)\n+  class(*), pointer :: foo\n+  character(3), target :: string\n+  foo => string\n+  select type (foo)\n+    type is (character(*))\n+      if (foo .ne. 'foo') call abort\n+      foo = 'bar'\n+  end select\n+end function\n+\n+  interface\n+    function foo(string)\n+      class(*), pointer :: foo\n+      character(3), target :: string\n+    end function\n+  end interface\n+\n+  class(*), pointer :: res\n+  character(3), target :: string = 'foo'\n+\n+  res => foo (string)\n+\n+  select type (res)\n+    type is (character(*))\n+      if (res .ne. 'bar') call abort\n+  end select\n+  if (string .ne. 'bar') call abort\n+end"}]}