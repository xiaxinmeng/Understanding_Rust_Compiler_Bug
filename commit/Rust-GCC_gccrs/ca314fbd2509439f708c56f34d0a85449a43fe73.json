{"sha": "ca314fbd2509439f708c56f34d0a85449a43fe73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzMTRmYmQyNTA5NDM5ZjcwOGM1NmYzNGQwYTg1NDQ5YTQzZmU3Mw==", "commit": {"author": {"name": "Gerald Pfeifer", "email": "gerald@pfeifer.com", "date": "2017-02-07T22:44:13Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2017-02-07T22:44:13Z"}, "message": "lwg-active.html: Remove.\n\n\t* doc/html/ext/lwg-active.html: Remove.\n\t* doc/html/ext/lwg-closed.html: Ditto.\n\t* doc/html/ext/lwg-defects.html: Ditto.\n\n\t* doc/Makefile.am (xml_extradir): Remove.\n\t(xml_extra): Ditto.\n\t(stamp-html-docbook-lwg): Remove recipe...\n\t(stamp-html-docbook-data): ...and its use here.\n\t* doc/Makefile.in: Regenerate.\n\n\t* doc/xml/manual/intro.xml: Shorten two paragraphs explaining\n\tthe relationship to the upstream working group.\n\tReplace a local link to ../ext/lwg-active.html by the upstream one.\n\tReplace all reference to ../ext/lwg-defects.html by a new entity\n\t&DR; which refers to the upstream address.\n\nFrom-SVN: r245258", "tree": {"sha": "376d32b55b20e45883282b800f4ca0d359f1ca3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/376d32b55b20e45883282b800f4ca0d359f1ca3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca314fbd2509439f708c56f34d0a85449a43fe73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca314fbd2509439f708c56f34d0a85449a43fe73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca314fbd2509439f708c56f34d0a85449a43fe73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca314fbd2509439f708c56f34d0a85449a43fe73/comments", "author": {"login": "GeraldPfeifer", "id": 4573532, "node_id": "MDQ6VXNlcjQ1NzM1MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4573532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeraldPfeifer", "html_url": "https://github.com/GeraldPfeifer", "followers_url": "https://api.github.com/users/GeraldPfeifer/followers", "following_url": "https://api.github.com/users/GeraldPfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/GeraldPfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeraldPfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeraldPfeifer/subscriptions", "organizations_url": "https://api.github.com/users/GeraldPfeifer/orgs", "repos_url": "https://api.github.com/users/GeraldPfeifer/repos", "events_url": "https://api.github.com/users/GeraldPfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/GeraldPfeifer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c18cb707b705fce59bc481b3769dda91755502f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c18cb707b705fce59bc481b3769dda91755502f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c18cb707b705fce59bc481b3769dda91755502f"}], "stats": {"total": 202925, "additions": 160, "deletions": 202765}, "files": [{"sha": "1a10c3deabaacf71c0b23448ebf38e1c08c4c499", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca314fbd2509439f708c56f34d0a85449a43fe73/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca314fbd2509439f708c56f34d0a85449a43fe73/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ca314fbd2509439f708c56f34d0a85449a43fe73", "patch": "@@ -1,3 +1,21 @@\n+2017-02-07  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/html/ext/lwg-active.html: Remove.\n+\t* doc/html/ext/lwg-closed.html: Ditto.\n+\t* doc/html/ext/lwg-defects.html: Ditto.\n+\n+\t* doc/Makefile.am (xml_extradir): Remove.\n+\t(xml_extra): Ditto.\n+\t(stamp-html-docbook-lwg): Remove recipe...\n+\t(stamp-html-docbook-data): ...and its use here.\n+\t* doc/Makefile.in: Regenerate.\n+\n+\t* doc/xml/manual/intro.xml: Shorten two paragraphs explaining\n+\tthe relationship to the upstream working group.\n+\tReplace a local link to ../ext/lwg-active.html by the upstream one.\n+\tReplace all reference to ../ext/lwg-defects.html by a new entity\n+\t&DR; which refers to the upstream address.\n+\n 2017-02-07  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Fix link to N4284."}, {"sha": "7d0c52d96b5b1d24e8614d1d6b46dcf193896ae9", "filename": "libstdc++-v3/doc/Makefile.am", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca314fbd2509439f708c56f34d0a85449a43fe73/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca314fbd2509439f708c56f34d0a85449a43fe73/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am?ref=ca314fbd2509439f708c56f34d0a85449a43fe73", "patch": "@@ -450,12 +450,6 @@ xml_image_generated = \\\n \n xml_images = ${xml_image_basic} ${xml_image_generated}\n \n-xml_extradir = ${glibcxx_srcdir}/doc/html/ext\n-xml_extra = \\\n-\t${xml_extradir}/lwg-active.html \\\n-\t${xml_extradir}/lwg-closed.html \\\n-\t${xml_extradir}/lwg-defects.html\n-\n xml_noinst = \\\n \t${xml_dir}/book.txml \\\n \t${xml_dir}/chapter.txml \\\n@@ -538,11 +532,7 @@ stamp-html-docbook-images: stamp-html-docbook $(xml_images)\n \t$(INSTALL_DATA)\t$(xml_images) ${docbook_outdir}/html/images\n \t$(STAMP) stamp-html-docbook-images\n \n-stamp-html-docbook-lwg: stamp-html-docbook $(xml_extra)\n-\t$(INSTALL_DATA)\t$(xml_extra) ${docbook_outdir}/html/ext\n-\t$(STAMP) stamp-html-docbook-lwg\n-\n-stamp-html-docbook-data: stamp-html-docbook-images stamp-html-docbook-lwg\n+stamp-html-docbook-data: stamp-html-docbook-images\n \t$(STAMP) stamp-html-docbook-data\n \n # HTML, \"chunked\" into index plus chapters as separate pages"}, {"sha": "281394debd04676d2e3c5ab43e147ced4c50c16c", "filename": "libstdc++-v3/doc/Makefile.in", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca314fbd2509439f708c56f34d0a85449a43fe73/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca314fbd2509439f708c56f34d0a85449a43fe73/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in?ref=ca314fbd2509439f708c56f34d0a85449a43fe73", "patch": "@@ -539,11 +539,6 @@ xml_image_generated = \\\n \t${xml_image_dir}/pbds_tree_text_lor_find.png\n \n xml_images = ${xml_image_basic} ${xml_image_generated}\n-xml_extradir = ${glibcxx_srcdir}/doc/html/ext\n-xml_extra = \\\n-\t${xml_extradir}/lwg-active.html \\\n-\t${xml_extradir}/lwg-closed.html \\\n-\t${xml_extradir}/lwg-defects.html\n \n xml_noinst = \\\n \t${xml_dir}/book.txml \\\n@@ -970,11 +965,7 @@ stamp-html-docbook-images: stamp-html-docbook $(xml_images)\n \t$(INSTALL_DATA)\t$(xml_images) ${docbook_outdir}/html/images\n \t$(STAMP) stamp-html-docbook-images\n \n-stamp-html-docbook-lwg: stamp-html-docbook $(xml_extra)\n-\t$(INSTALL_DATA)\t$(xml_extra) ${docbook_outdir}/html/ext\n-\t$(STAMP) stamp-html-docbook-lwg\n-\n-stamp-html-docbook-data: stamp-html-docbook-images stamp-html-docbook-lwg\n+stamp-html-docbook-data: stamp-html-docbook-images\n \t$(STAMP) stamp-html-docbook-data\n \n # HTML, \"chunked\" into index plus chapters as separate pages"}, {"sha": "7da07e683d591cfa2af1db070d7e8aca263d88a8", "filename": "libstdc++-v3/doc/html/ext/lwg-active.html", "status": "removed", "additions": 0, "deletions": 30172, "changes": 30172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c18cb707b705fce59bc481b3769dda91755502f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-active.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c18cb707b705fce59bc481b3769dda91755502f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-active.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-active.html?ref=7c18cb707b705fce59bc481b3769dda91755502f"}, {"sha": "b01c109c74486fcf26e6c74e4938f930a861ece2", "filename": "libstdc++-v3/doc/html/ext/lwg-closed.html", "status": "removed", "additions": 0, "deletions": 42632, "changes": 42632, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c18cb707b705fce59bc481b3769dda91755502f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-closed.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c18cb707b705fce59bc481b3769dda91755502f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-closed.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-closed.html?ref=7c18cb707b705fce59bc481b3769dda91755502f"}, {"sha": "1e78c35249ed750898f40c3b8b13ff31b3b3dd4e", "filename": "libstdc++-v3/doc/html/ext/lwg-defects.html", "status": "removed", "additions": 0, "deletions": 129794, "changes": 129794, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c18cb707b705fce59bc481b3769dda91755502f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-defects.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c18cb707b705fce59bc481b3769dda91755502f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-defects.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-defects.html?ref=7c18cb707b705fce59bc481b3769dda91755502f"}, {"sha": "b750f0a678576ac0af5e55faa201a050c6f518ef", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 140, "deletions": 146, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca314fbd2509439f708c56f34d0a85449a43fe73/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca314fbd2509439f708c56f34d0a85449a43fe73/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=ca314fbd2509439f708c56f34d0a85449a43fe73", "patch": "@@ -1,3 +1,9 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE part [\n+  <!ENTITY DR\n+\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html\">\n+] >\n+\n <part xmlns=\"http://docbook.org/ns/docbook\" version=\"5.0\" xml:id=\"manual.intro\" xreflabel=\"Introduction\">\n <?dbhtml filename=\"intro.html\"?>\n \n@@ -208,136 +214,124 @@ requirements of the license of GCC.\n \tThe links are to the specific defect reports from a <emphasis>partial\n \tcopy</emphasis> of the Issues List.  You can read the full version online\n \tat the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/\">ISO C++\n-\tCommittee homepage</link>, linked to on the\n-\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/readings.html\">GCC \"Readings\"\n-\tpage</link>.  If\n-\tyou spend a lot of time reading the issues, we recommend downloading\n-\tthe ZIP file and reading them locally.\n-      </para>\n-      <para>\n-\t(NB: <emphasis>partial copy</emphasis> means that not all\n-\tlinks within the lwg-*.html pages will work.  Specifically,\n-\tlinks to defect reports that have not been accorded full DR\n-\tstatus will probably break.  Rather than trying to mirror the\n-\tentire issues list on our overworked web server, we recommend\n-\tyou go to the LWG homepage instead.)\n+\tCommittee homepage</link>.\n       </para>\n       <para>\n \tIf a DR is not listed here, we may simply not have gotten to\n \tit yet; feel free to submit a patch.  Search the include/bits\n \tand src directories for appearances of\n \t<constant>_GLIBCXX_RESOLVE_LIB_DEFECTS</constant> for examples\n \tof style.  Note that we usually do not make changes to the\n-\tcode until an issue has reached <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-active.html#DR\">DR</link> status.\n+\tcode until an issue has reached <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</link> status.\n       </para>\n \n       <variablelist>\n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#5\">5</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#5\">5</link>:\n \t<emphasis>string::compare specification questionable</emphasis>\n     </term>\n     <listitem><para>This should be two overloaded functions rather than a single function.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#17\">17</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#17\">17</link>:\n \t<emphasis>Bad bool parsing</emphasis>\n     </term>\n     <listitem><para>Apparently extracting Boolean values was messed up...\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#19\">19</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#19\">19</link>:\n \t<emphasis>\"Noconv\" definition too vague</emphasis>\n     </term>\n     <listitem><para>If <code>codecvt::do_in</code> returns <code>noconv</code> there are\n \tno changes to the values in <code>[to, to_limit)</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#22\">22</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#22\">22</link>:\n \t<emphasis>Member open vs flags</emphasis>\n     </term>\n     <listitem><para>Re-opening a file stream does <emphasis>not</emphasis> clear the state flags.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#23\">23</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#23\">23</link>:\n \t<emphasis>Num_get overflow result</emphasis>\n     </term>\n     <listitem><para>Implement the proposed resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#25\">25</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#25\">25</link>:\n \t<emphasis>String operator&lt;&lt; uses width() value wrong</emphasis>\n     </term>\n     <listitem><para>Padding issues.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#48\">48</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#48\">48</link>:\n \t<emphasis>Use of non-existent exception constructor</emphasis>\n     </term>\n     <listitem><para>An instance of <code>ios_base::failure</code> is constructed instead.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#49\">49</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#49\">49</link>:\n \t<emphasis>Underspecification of ios_base::sync_with_stdio</emphasis>\n     </term>\n     <listitem><para>The return type is the <emphasis>previous</emphasis> state of synchronization.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#50\">50</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#50\">50</link>:\n \t<emphasis>Copy constructor and assignment operator of ios_base</emphasis>\n     </term>\n     <listitem><para>These members functions are declared <code>private</code> and are\n \tthus inaccessible.  Specifying the correct semantics of\n \t\"copying stream state\" was deemed too complicated.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#60\">60</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#60\">60</link>:\n \t<emphasis>What is a formatted input function?</emphasis>\n     </term>\n     <listitem><para>This DR made many widespread changes to <code>basic_istream</code>\n \tand <code>basic_ostream</code> all of which have been implemented.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#63\">63</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#63\">63</link>:\n \t<emphasis>Exception-handling policy for unformatted output</emphasis>\n     </term>\n     <listitem><para>Make the policy consistent with that of formatted input, unformatted\n \tinput, and formatted output.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#68\">68</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#68\">68</link>:\n \t<emphasis>Extractors for char* should store null at end</emphasis>\n     </term>\n     <listitem><para>And they do now.  An editing glitch in the last item in the list of\n \t[27.6.1.2.3]/7.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#74\">74</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#74\">74</link>:\n \t<emphasis>Garbled text for codecvt::do_max_length</emphasis>\n     </term>\n     <listitem><para>The text of the standard was gibberish.  Typos gone rampant.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#75\">75</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#75\">75</link>:\n \t<emphasis>Contradiction in codecvt::length's argument types</emphasis>\n     </term>\n     <listitem><para>Change the first parameter to <code>stateT&amp;</code> and implement\n \tthe new effects paragraph.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#83\">83</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#83\">83</link>:\n \t<emphasis>string::npos vs. string::max_size()</emphasis>\n     </term>\n     <listitem><para>Safety checks on the size of the string should test against\n \t<code>max_size()</code> rather than <code>npos</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#90\">90</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#90\">90</link>:\n \t<emphasis>Incorrect description of operator&gt;&gt; for strings</emphasis>\n     </term>\n     <listitem><para>The effect contain <code>isspace(c,getloc())</code> which must be\n \treplaced by <code>isspace(c,is.getloc())</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#91\">91</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#91\">91</link>:\n \t<emphasis>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n \t    might cause endless loop</emphasis>\n     </term>\n@@ -346,7 +340,7 @@ requirements of the license of GCC.\n \tnot required to set <code>gcount</code>).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#103\">103</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#103\">103</link>:\n \t<emphasis>set::iterator is required to be modifiable, but this allows\n \t    modification of keys.</emphasis>\n     </term>\n@@ -355,229 +349,229 @@ requirements of the license of GCC.\n \t</code> are constant iterators.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#109\">109</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#109\">109</link>:\n \t<emphasis>Missing binders for non-const sequence elements</emphasis>\n     </term>\n     <listitem><para>The <code>binder1st</code> and <code>binder2nd</code> didn't have an\n \t<code>operator()</code> taking a non-const parameter.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#110\">110</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#110\">110</link>:\n \t<emphasis>istreambuf_iterator::equal not const</emphasis>\n     </term>\n     <listitem><para>This was not a const member function.  Note that the DR says to\n \treplace the function with a const one; we have instead provided an\n \toverloaded version with identical contents.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#117\">117</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#117\">117</link>:\n \t<emphasis>basic_ostream uses nonexistent num_put member functions</emphasis>\n     </term>\n     <listitem><para><code>num_put::put()</code> was overloaded on the wrong types.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#118\">118</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#118\">118</link>:\n \t<emphasis>basic_istream uses nonexistent num_get member functions</emphasis>\n     </term>\n     <listitem><para>Same as 117, but for <code>num_get::get()</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#129\">129</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#129\">129</link>:\n \t<emphasis>Need error indication from seekp() and seekg()</emphasis>\n     </term>\n     <listitem><para>These functions set <code>failbit</code> on error now.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#130\">130</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#130\">130</link>:\n \t<emphasis>Return type of container::erase(iterator) differs for associative containers</emphasis>\n     </term>\n     <listitem><para>Make member <code>erase</code> return iterator for <code>set</code>, <code>multiset</code>, <code>map</code>, <code>multimap</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#136\">136</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#136\">136</link>:\n \t<emphasis>seekp, seekg setting wrong streams?</emphasis>\n     </term>\n     <listitem><para><code>seekp</code> should only set the output stream, and\n \t<code>seekg</code> should only set the input stream.\n     </para></listitem></varlistentry>\n \n-<!--<varlistentry><term><ulink url=\"../ext/lwg-defects.html#159\">159</ulink>:\n+<!--<varlistentry><term><ulink url=\"&DR;#159\">159</ulink>:\n \t<emphasis>Strange use of underflow()</emphasis>\n     </term>\n     <listitem><para>In fstream.tcc, the basic_filebuf&lt;&gt;::showmanyc() function\n \tshould probably not be calling <code>underflow()</code>.\n     </para></listitem></varlistentry> -->\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#167\">167</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#167\">167</link>:\n \t<emphasis>Improper use of traits_type::length()</emphasis>\n     </term>\n     <listitem><para><code>op&lt;&lt;</code> with a <code>const char*</code> was\n \tcalculating an incorrect number of characters to write.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#169\">169</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#169\">169</link>:\n \t<emphasis>Bad efficiency of overflow() mandated</emphasis>\n     </term>\n     <listitem><para>Grow efficiently the internal array object.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#171\">171</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#171\">171</link>:\n \t<emphasis>Strange seekpos() semantics due to joint position</emphasis>\n     </term>\n     <listitem><para>Quite complex to summarize...\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#181\">181</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#181\">181</link>:\n \t<emphasis>make_pair() unintended behavior</emphasis>\n     </term>\n     <listitem><para>This function used to take its arguments as reference-to-const, now\n \tit copies them (pass by value).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#195\">195</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#195\">195</link>:\n \t<emphasis>Should basic_istream::sentry's constructor ever set eofbit?</emphasis>\n     </term>\n     <listitem><para>Yes, it can, specifically if EOF is reached while skipping whitespace.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#211\">211</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#211\">211</link>:\n \t<emphasis>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</emphasis>\n     </term>\n     <listitem><para>If nothing is extracted into the string, <code>op&gt;&gt;</code> now\n \tsets <code>failbit</code> (which can cause an exception, etc., etc.).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#214\">214</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#214\">214</link>:\n \t<emphasis>set::find() missing const overload</emphasis>\n     </term>\n     <listitem><para>Both <code>set</code> and <code>multiset</code> were missing\n \toverloaded find, lower_bound, upper_bound, and equal_range functions\n \tfor const instances.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#231\">231</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#231\">231</link>:\n \t<emphasis>Precision in iostream?</emphasis>\n     </term>\n     <listitem><para>For conversion from a floating-point type, <code>str.precision()</code>\n \tis specified in the conversion specification.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#233\">233</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#233\">233</link>:\n \t<emphasis>Insertion hints in associative containers</emphasis>\n     </term>\n     <listitem><para>Implement N1780, first check before then check after, insert as close\n \tto hint as possible.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#235\">235</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#235\">235</link>:\n \t<emphasis>No specification of default ctor for reverse_iterator</emphasis>\n     </term>\n     <listitem><para>The declaration of <code>reverse_iterator</code> lists a default constructor.\n \tHowever, no specification is given what this constructor should do.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#241\">241</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#241\">241</link>:\n \t<emphasis>Does unique_copy() require CopyConstructible and Assignable?</emphasis>\n     </term>\n     <listitem><para>Add a helper for forward_iterator/output_iterator, fix the existing\n \tone for input_iterator/output_iterator to not rely on Assignability.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#243\">243</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#243\">243</link>:\n \t<emphasis>get and getline when sentry reports failure</emphasis>\n     </term>\n     <listitem><para>Store a null character only if the character array has a non-zero size.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#251\">251</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#251\">251</link>:\n \t<emphasis>basic_stringbuf missing allocator_type</emphasis>\n     </term>\n     <listitem><para>This nested typedef was originally not specified.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#253\">253</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#253\">253</link>:\n \t<emphasis>valarray helper functions are almost entirely useless</emphasis>\n     </term>\n     <listitem><para>Make the copy constructor and copy-assignment operator declarations\n \tpublic in gslice_array, indirect_array, mask_array, slice_array; provide\n \tdefinitions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#265\">265</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#265\">265</link>:\n \t<emphasis>std::pair::pair() effects overly restrictive</emphasis>\n     </term>\n     <listitem><para>The default ctor would build its members from copies of temporaries;\n \tnow it simply uses their respective default ctors.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#266\">266</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#266\">266</link>:\n \t<emphasis>bad_exception::~bad_exception() missing Effects clause</emphasis>\n     </term>\n     <listitem><para>The <code>bad_</code>* classes no longer have destructors (they\n \tare trivial), since no description of them was ever given.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#271\">271</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#271\">271</link>:\n \t<emphasis>basic_iostream missing typedefs</emphasis>\n     </term>\n     <listitem><para>The typedefs it inherits from its base classes can't be used, since\n \t(for example) <code>basic_iostream&lt;T&gt;::traits_type</code> is ambiguous.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#275\">275</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#275\">275</link>:\n \t<emphasis>Wrong type in num_get::get() overloads</emphasis>\n     </term>\n     <listitem><para>Similar to 118.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#280\">280</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#280\">280</link>:\n \t<emphasis>Comparison of reverse_iterator to const reverse_iterator</emphasis>\n     </term>\n     <listitem><para>Add global functions with two template parameters.\n \t(NB: not added for now a templated assignment operator)\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#292\">292</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#292\">292</link>:\n \t<emphasis>Effects of a.copyfmt (a)</emphasis>\n     </term>\n     <listitem><para>If <code>(this == &amp;rhs)</code> do nothing.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#300\">300</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#300\">300</link>:\n \t<emphasis>List::merge() specification incomplete</emphasis>\n     </term>\n     <listitem><para>If <code>(this == &amp;x)</code> do nothing.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#303\">303</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#303\">303</link>:\n \t<emphasis>Bitset input operator underspecified</emphasis>\n     </term>\n     <listitem><para>Basically, compare the input character to\n \t\t    <code>is.widen(0)</code> and <code>is.widen(1)</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#305\">305</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#305\">305</link>:\n \t<emphasis>Default behavior of codecvt&lt;wchar_t, char,\n \t\t  mbstate_t&gt;::length()</emphasis>\n     </term>\n     <listitem><para>Do not specify what <code>codecvt&lt;wchar_t, char,\n \t\t    mbstate_t&gt;::do_length</code> must return.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#328\">328</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#328\">328</link>:\n \t<emphasis>Bad sprintf format modifier in\n \t\t  money_put&lt;&gt;::do_put()</emphasis>\n     </term>\n     <listitem><para>Change the format string to \"%.0Lf\".\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#365\">365</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#365\">365</link>:\n \t<emphasis>Lack of const-qualification in clause 27</emphasis>\n     </term>\n     <listitem><para>Add const overloads of <code>is_open</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#387\">387</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#387\">387</link>:\n \t<emphasis>std::complex over-encapsulated</emphasis>\n     </term>\n     <listitem><para>Add the <code>real(T)</code> and <code>imag(T)</code>\n@@ -586,20 +580,20 @@ requirements of the license of GCC.\n \t\t    free functions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#389\">389</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#389\">389</link>:\n \t<emphasis>Const overload of valarray::operator[] returns\n \t\t  by value</emphasis>\n     </term>\n     <listitem><para>Change it to return a <code>const T&amp;</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#396\">396</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#396\">396</link>:\n \t<emphasis>what are characters zero and one</emphasis>\n     </term>\n     <listitem><para>Implement the proposed resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#402\">402</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#402\">402</link>:\n \t<emphasis>Wrong new expression in [some_]allocator::construct</emphasis>\n     </term>\n     <listitem><para>Replace \"new\" with \"::new\".\n@@ -613,7 +607,7 @@ requirements of the license of GCC.\n     <listitem><para>Tweak the debug-mode checks in _Safe_iterator.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#409\">409</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#409\">409</link>:\n \t<emphasis>Closing an fstream should clear the error state</emphasis>\n     </term>\n     <listitem><para>Have <code>open</code> clear the error flags.\n@@ -625,57 +619,57 @@ requirements of the license of GCC.\n     <listitem><para>Implement Option 3, as per N1599.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#432\">432</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#432\">432</link>:\n \t<emphasis>stringbuf::overflow() makes only one write position\n \t    available</emphasis>\n     </term>\n     <listitem><para>Implement the resolution, beyond DR 169.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#434\">434</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#434\">434</link>:\n \t<emphasis>bitset::to_string() hard to use</emphasis>\n     </term>\n     <listitem><para>Add three overloads, taking fewer template arguments.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#438\">438</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#438\">438</link>:\n \t<emphasis>Ambiguity in the \"do the right thing\" clause</emphasis>\n     </term>\n     <listitem><para>Implement the resolution, basically cast less.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#445\">445</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#445\">445</link>:\n \t<emphasis>iterator_traits::reference unspecified for some iterator categories</emphasis>\n     </term>\n     <listitem><para>Change <code>istreambuf_iterator::reference</code> in C++11 mode.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#453\">453</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#453\">453</link>:\n \t<emphasis>basic_stringbuf::seekoff need not always fail for an empty stream</emphasis>\n     </term>\n     <listitem><para>Don't fail if the next pointer is null and newoff is zero.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#455\">455</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#455\">455</link>:\n \t<emphasis>cerr::tie() and wcerr::tie() are overspecified</emphasis>\n     </term>\n     <listitem><para>Initialize cerr tied to cout and wcerr tied to wcout.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#464\">464</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#464\">464</link>:\n \t<emphasis>Suggestion for new member functions in standard containers</emphasis>\n     </term>\n     <listitem><para>Add <code>data()</code> to <code>std::vector</code> and\n \t<code>at(const key_type&amp;)</code> to <code>std::map</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#467\">467</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#467\">467</link>:\n \t<emphasis>char_traits::lt(), compare(), and memcmp()</emphasis>\n     </term>\n     <listitem><para>Change <code>lt</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#508\">508</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#508\">508</link>:\n \t<emphasis>Bad parameters for ranlux64_base_01</emphasis>\n     </term>\n     <listitem><para>Fix the parameters.\n@@ -694,420 +688,420 @@ requirements of the license of GCC.\n     <listitem><para>Use &amp;value.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#538\">538</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#538\">538</link>:\n \t<emphasis>241 again: Does unique_copy() require CopyConstructible\n \t    and Assignable?</emphasis>\n     </term>\n     <listitem><para>In case of input_iterator/output_iterator rely on Assignability of\n \tinput_iterator' value_type.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#539\">539</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#539\">539</link>:\n \t<emphasis>partial_sum and adjacent_difference should mention\n \t    requirements</emphasis>\n     </term>\n     <listitem><para>We were almost doing the right thing, just use std::move\n \tin adjacent_difference.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#541\">541</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#541\">541</link>:\n \t<emphasis>shared_ptr template assignment and void</emphasis>\n     </term>\n     <listitem><para>Add an auto_ptr&lt;void&gt; specialization.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#543\">543</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#543\">543</link>:\n \t<emphasis>valarray slice default constructor</emphasis>\n     </term>\n     <listitem><para>Follow the straightforward proposed resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#550\">550</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#550\">550</link>:\n \t<emphasis>What should the return type of pow(float,int) be?</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, remove the pow(float,int), etc., signatures.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#586\">586</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#586\">586</link>:\n \t<emphasis>string inserter not a formatted function</emphasis>\n     </term>\n     <listitem><para>Change it to be a formatted output function (i.e. catch exceptions).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#596\">596</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#596\">596</link>:\n \t<emphasis>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</emphasis>\n     </term>\n     <listitem><para>Add the missing modes to fopen_mode.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#630\">630</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#630\">630</link>:\n \t<emphasis>arrays of valarray</emphasis>\n     </term>\n     <listitem><para>Implement the simple resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#660\">660</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#660\">660</link>:\n \t<emphasis>Missing bitwise operations</emphasis>\n     </term>\n     <listitem><para>Add the missing operations.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#691\">691</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#691\">691</link>:\n \t<emphasis>const_local_iterator cbegin, cend missing from TR1</emphasis>\n     </term>\n     <listitem><para>In C++11 mode add cbegin(size_type) and cend(size_type)\n \t\t    to the unordered containers.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#693\">693</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#693\">693</link>:\n \t<emphasis>std::bitset::all() missing</emphasis>\n     </term>\n     <listitem><para>Add it, consistently with the discussion.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#695\">695</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#695\">695</link>:\n \t<emphasis>ctype&lt;char&gt;::classic_table() not accessible</emphasis>\n     </term>\n     <listitem><para>Make the member functions table and classic_table public.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#696\">696</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#696\">696</link>:\n \t<emphasis>istream::operator&gt;&gt;(int&amp;) broken</emphasis>\n     </term>\n     <listitem><para>Implement the straightforward resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#761\">761</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#761\">761</link>:\n \t<emphasis>unordered_map needs an at() member function</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, add at() and at() const.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#775\">775</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#775\">775</link>:\n \t<emphasis>Tuple indexing should be unsigned?</emphasis>\n     </term>\n     <listitem><para>Implement the int -&gt; size_t replacements.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#776\">776</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#776\">776</link>:\n \t<emphasis>Undescribed assign function of std::array</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, remove assign, add fill.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#781\">781</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#781\">781</link>:\n \t<emphasis>std::complex should add missing C99 functions</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, add std::proj.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#809\">809</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#809\">809</link>:\n \t<emphasis>std::swap should be overloaded for array types</emphasis>\n     </term>\n     <listitem><para>Add the overload.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#853\">853</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#853\">853</link>:\n \t<emphasis>to_string needs updating with zero and one</emphasis>\n     </term>\n     <listitem><para>Update / add the signatures.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#865\">865</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#865\">865</link>:\n \t<emphasis>More algorithms that throw away information</emphasis>\n     </term>\n     <listitem><para>The traditional HP / SGI return type and value is blessed\n \t\t    by the resolution of the DR.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#1339\">1339</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#1339\">1339</link>:\n        <emphasis>uninitialized_fill_n should return the end of its range</emphasis>\n     </term>\n     <listitem><para>Return the end of the filled range.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2021\">2021</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2021\">2021</link>:\n        <emphasis>Further incorrect uses of <code>result_of</code></emphasis>\n     </term>\n     <listitem><para>Correctly decay types in signature of <code>std::async</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2049\">2049</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2049\">2049</link>:\n \t<emphasis><code>is_destructible</code> underspecified</emphasis>\n     </term>\n     <listitem><para>Handle non-object types.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2056\">2056</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2056\">2056</link>:\n \t<emphasis>future_errc enums start with value 0 (invalid value for broken_promise)</emphasis>\n     </term>\n     <listitem><para>Reorder enumerators.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2059\">2059</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2059\">2059</link>:\n \t<emphasis>C++0x ambiguity problem with map::erase</emphasis>\n     </term>\n     <listitem><para>Add additional overloads.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2062\">2062</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2062\">2062</link>:\n \t<emphasis>2062. Effect contradictions w/o no-throw guarantee of <code>std::function</code> swaps</emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code> to swap functions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2063\">2063</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2063\">2063</link>:\n \t<emphasis>Contradictory requirements for string move assignment</emphasis>\n     </term>\n     <listitem><para>Respect propagation trait for move assignment.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2064\">2064</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2064\">2064</link>:\n \t<emphasis>More noexcept issues in basic_string</emphasis>\n     </term>\n     <listitem><para>Add noexcept to the comparison operators.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2067\">2067</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2067\">2067</link>:\n \t<emphasis>packaged_task should have deleted copy c'tor with const parameter</emphasis>\n     </term>\n     <listitem><para>Fix signatures.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2101\">2101</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2101\">2101</link>:\n \t<emphasis>Some transformation types can produce impossible types</emphasis>\n     </term>\n     <listitem><para>Use the referenceable type concept.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2106\">2106</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2106\">2106</link>:\n \t<emphasis>move_iterator wrapping iterators returning prvalues</emphasis>\n     </term>\n     <listitem><para>Change the <code>reference</code> type.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2108\">2108</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2108\">2108</link>:\n \t<emphasis>No way to identify allocator types that always compare equal</emphasis>\n     </term>\n     <listitem><para>Define and use <code>is_always_equal</code> even for C++11.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2118\">2118</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2118\">2118</link>:\n \t<emphasis><code>unique_ptr</code> for array does not support cv qualification conversion of actual argument</emphasis>\n     </term>\n     <listitem><para>Adjust constraints to allow safe conversions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2127\">2127</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2127\">2127</link>:\n \t<emphasis>Move-construction with <code>raw_storage_iterator</code></emphasis>\n     </term>\n     <listitem><para>Add assignment operator taking an rvalue.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2132\">2132</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2132\">2132</link>:\n \t<emphasis><code>std::function</code> ambiguity</emphasis>\n     </term>\n     <listitem><para>Constrain the constructor to only accept callable types.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2141\">2141</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2141\">2141</link>:\n \t<emphasis><code>common_type</code> trait produces reference types</emphasis>\n     </term>\n     <listitem><para>Use <code>decay</code> for the result type.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2144\">2144</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2144\">2144</link>:\n \t<emphasis>Missing <code>noexcept</code> specification in <code>type_index</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code>\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2145\">2145</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2145\">2145</link>:\n \t<emphasis><code>error_category</code> default constructor</emphasis>\n     </term>\n     <listitem><para>Declare a public constexpr constructor.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2162\">2162</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2162\">2162</link>:\n \t<emphasis><code>allocator_traits::max_size</code> missing <code>noexcept</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2187\">2187</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2187\">2187</link>:\n \t<emphasis><code>vector&lt;bool&gt;</code> is missing <code>emplace</code> and <code>emplace_back</code> member functions</emphasis>\n     </term>\n     <listitem><para>Add <code>emplace</code> and <code>emplace_back</code> member functions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2192\">2192</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2192\">2192</link>:\n \t<emphasis>Validity and return type of <code>std::abs(0u)</code> is unclear</emphasis>\n     </term>\n     <listitem><para>Move all declarations to a common header and remove the\n     generic <code>abs</code> which accepted unsigned arguments.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2196\">2196</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2196\">2196</link>:\n \t<emphasis>Specification of <code>is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</emphasis>\n     </term>\n     <listitem><para>Use the referenceable type concept.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2212\">2212</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2212\">2212</link>:\n \t<emphasis><code>tuple_size</code> for <code>const pair</code> request <code>&lt;tuple&gt;</code> header</emphasis>\n     </term>\n     <listitem><para>The <code>tuple_size</code> and <code>tuple_element</code>\n     partial specializations are defined in <code>&lt;utility&gt;</code> which\n     is included by <code>&lt;array&gt;</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2296\">2296</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2296\">2296</link>:\n \t<emphasis><code>std::addressof</code> should be constexpr</emphasis>\n     </term>\n     <listitem><para>Use <code>__builtin_addressof</code> and add\n     <code>constexpr</code> to <code>addressof</code> for C++17 and later.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2313\">2313</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2313\">2313</link>:\n \t<emphasis><code>tuple_size</code> should always derive from <code>integral_constant&lt;size_t, N&gt;</code></emphasis>\n     </term>\n     <listitem><para>Update definitions of the partial specializations for const and volatile types.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2328\">2328</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2328\">2328</link>:\n        <emphasis>Rvalue stream extraction should use perfect forwarding</emphasis>\n     </term>\n     <listitem><para>Use perfect forwarding for right operand.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2329\">2329</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2329\">2329</link>:\n        <emphasis><code>regex_match()/regex_search()</code> with <code>match_results</code> should forbid temporary strings</emphasis>\n     </term>\n     <listitem><para>Add deleted overloads for rvalue strings.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2332\">2332</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2332\">2332</link>:\n        <emphasis><code>regex_iterator/regex_token_iterator</code> should forbid temporary regexes</emphasis>\n     </term>\n     <listitem><para>Add deleted constructors.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2399\">2399</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2399\">2399</link>:\n \t<emphasis><code>shared_ptr</code>'s constructor from <code>unique_ptr</code> should be constrained</emphasis>\n     </term>\n     <listitem><para>Constrain the constructor to require convertibility.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2400\">2400</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2400\">2400</link>:\n \t<emphasis><code>shared_ptr</code>'s <code>get_deleter()</code> should use <code>addressof()</code></emphasis>\n     </term>\n     <listitem><para>Use <code>addressof</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2401\">2401</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2401\">2401</link>:\n \t<emphasis><code>std::function</code> needs more <code>noexcept</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code> to the assignment and comparisons.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2407\">2407</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2407\">2407</link>:\n        <emphasis><code>packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n                  should neither be constrained nor <code>explicit</code>\n        </emphasis>\n     </term>\n     <listitem><para>Remove <code>explicit</code> from the constructor.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2415\">2415</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2415\">2415</link>:\n        <emphasis>Inconsistency between <code>unique_ptr</code> and <code>shared_ptr</code></emphasis>\n     </term>\n     <listitem><para>Create empty an <code>shared_ptr</code> from an empty\n                     <code>unique_ptr</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2418\">2418</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2418\">2418</link>:\n        <emphasis><code>apply</code> does not work with member pointers</emphasis>\n     </term>\n     <listitem><para>Use <code>mem_fn</code> for member pointers.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2440\">2440</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2440\">2440</link>:\n        <emphasis><code>seed_seq::size()</code> should be <code>noexcept</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2441\">2441</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2441\">2441</link>:\n        <emphasis>Exact-width atomic typedefs should be provided</emphasis>\n     </term>\n     <listitem><para>Define the typedefs.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2442\">2442</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2442\">2442</link>:\n        <emphasis><code>call_once()</code> shouldn't <code>DECAY_COPY()</code></emphasis>\n     </term>\n     <listitem><para>Remove indirection through call wrapper that made copies\n     of arguments and forward arguments straight to <code>std::invoke</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2454\">2454</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2454\">2454</link>:\n        <emphasis>Add <code>raw_storage_iterator::base()</code> member\n        </emphasis>\n     </term>\n     <listitem><para>Add the <code>base()</code> member function.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2455\">2455</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2455\">2455</link>:\n        <emphasis>Allocator default construction should be allowed to throw\n        </emphasis>\n     </term>\n     <listitem><para>Make <code>noexcept</code> specifications conditional.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2458\">2458</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2458\">2458</link>:\n        <emphasis>N3778 and new library deallocation signatures\n        </emphasis>\n     </term>\n     <listitem><para>Remove unused overloads.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2459\">2459</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2459\">2459</link>:\n        <emphasis><code>std::polar</code> should require a non-negative rho\n        </emphasis>\n     </term>\n     <listitem><para>Add debug mode assertion.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2466\">2466</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2466\">2466</link>:\n        <emphasis><code>allocator_traits::max_size()</code> default behavior is incorrect\n        </emphasis>\n     </term>\n     <listitem><para>Divide by the object type.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2484\">2484</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2484\">2484</link>:\n        <emphasis><code>rethrow_if_nested()</code>  is doubly unimplementable\n        </emphasis>\n     </term>\n     <listitem><para>Avoid using <code>dynamic_cast</code> when it would be\n     ill-formed.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2583\">2583</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2583\">2583</link>:\n        <emphasis>There is no way to supply an allocator for <code>basic_string(str, pos)</code>\n        </emphasis>\n     </term>\n     <listitem><para>Add new constructor\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2684\">2684</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2684\">2684</link>:\n        <emphasis><code>priority_queue</code> lacking comparator typedef\n        </emphasis>\n     </term>\n     <listitem><para>Define the <code>value_compare</code> typedef.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2770\">2770</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2770\">2770</link>:\n        <emphasis><code>tuple_size&lt;const T&gt;</code> specialization is not\n \t SFINAE compatible and breaks decomposition declarations\n        </emphasis>\n@@ -1116,7 +1110,7 @@ requirements of the license of GCC.\n       only use it if valid.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2781\">2781</link>:\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2781\">2781</link>:\n        <emphasis>Contradictory requirements for <code>std::function</code>\n          and <code>std::reference_wrapper</code>\n        </emphasis>"}]}