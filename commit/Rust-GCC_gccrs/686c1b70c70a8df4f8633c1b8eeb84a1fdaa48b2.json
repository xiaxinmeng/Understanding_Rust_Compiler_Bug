{"sha": "686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg2YzFiNzBjNzBhOGRmNGY4NjMzYzFiOGVlYjg0YTFmZGFhNDhiMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-27T13:16:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-27T14:08:21Z"}, "message": "Adjust BB vectorization function splitting\n\nThis adjusts the condition when to split at control altering stmts,\nonly when there's a definition.  It also removes the only use\nof --param slp-max-insns-in-bb which a previous change left doing\nnothing (but repeatedly print a message for each successive\ninstruction...).\n\n2020-10-27  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_slp_bbs): Remove no-op\n\tslp-max-insns-in-bb check.\n\t(vect_slp_function): Dump when splitting the function.\n\tAdjust the split condition for control altering stmts.\n\t* params.opt (-param=slp-max-insns-in-bb): Remove.\n\t* doc/invoke.texi (-param=slp-max-insns-in-bb): Likewise.", "tree": {"sha": "5ddf948d33ea588e4d85f7c1a9c7ed9295aac263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ddf948d33ea588e4d85f7c1a9c7ed9295aac263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ad9ae85bb5b9acf80f9d1cf2be5a989ef7ba49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ad9ae85bb5b9acf80f9d1cf2be5a989ef7ba49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ad9ae85bb5b9acf80f9d1cf2be5a989ef7ba49"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "f82eeea097af61b6bc8fe96c0352b458fd49e1b5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2", "patch": "@@ -13749,10 +13749,6 @@ code to iterate.  2 allows partial vector loads and stores in all loops.\n The parameter only has an effect on targets that support partial\n vector loads and stores.\n \n-@item slp-max-insns-in-bb\n-Maximum number of instructions in basic block to be\n-considered for SLP vectorization.\n-\n @item avoid-fma-max-bits\n Maximum number of bits for which we avoid creating FMAs.\n "}, {"sha": "563c67c11f20238d52a05a890a533a86da476986", "filename": "gcc/params.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2", "patch": "@@ -855,10 +855,6 @@ The number of prefetches that can run at the same time.\n Common Joined UInteger Var(param_sink_frequency_threshold) Init(75) IntegerRange(0, 100) Param Optimization\n Target block's relative execution frequency (as a percentage) required to sink a statement.\n \n--param=slp-max-insns-in-bb=\n-Common Joined UInteger Var(param_slp_max_insns_in_bb) Init(1000) Param Optimization\n-Maximum number of instructions in basic block to be considered for SLP vectorization.\n-\n -param=sms-dfa-history=\n Common Joined UInteger Var(param_sms_dfa_history) IntegerRange(0, 16) Param Optimization\n The number of cycles the swing modulo scheduler considers when checking conflicts using DFA."}, {"sha": "ba43adb8a7d5ee2cf8d85554ccca427a988cb29a", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2", "patch": "@@ -4336,14 +4336,6 @@ vect_slp_bbs (vec<basic_block> bbs)\n \t  if (!vect_find_stmt_data_reference (NULL, stmt, &datarefs,\n \t\t\t\t\t      &dataref_groups, current_group))\n \t    ++current_group;\n-\n-\t  if (insns > param_slp_max_insns_in_bb)\n-\t    {\n-\t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t \"not vectorized: too many instructions in \"\n-\t\t\t\t \"region.\\n\");\n-\t    }\n \t}\n     }\n \n@@ -4386,14 +4378,26 @@ vect_slp_function (function *fun)\n       /* Split when a BB is not dominated by the first block.  */\n       if (!bbs.is_empty ()\n \t  && !dominated_by_p (CDI_DOMINATORS, bb, bbs[0]))\n-\tsplit = true;\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"splitting region at dominance boundary bb%d\\n\",\n+\t\t\t     bb->index);\n+\t  split = true;\n+\t}\n       /* Split when the loop determined by the first block\n \t is exited.  This is because we eventually insert\n \t invariants at region begin.  */\n       else if (!bbs.is_empty ()\n \t       && bbs[0]->loop_father != bb->loop_father\n \t       && !flow_loop_nested_p (bbs[0]->loop_father, bb->loop_father))\n-\tsplit = true;\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"splitting region at loop %d exit at bb%d\\n\",\n+\t\t\t     bbs[0]->loop_father->num, bb->index);\n+\t  split = true;\n+\t}\n \n       if (split && !bbs.is_empty ())\n \t{\n@@ -4404,11 +4408,17 @@ vect_slp_function (function *fun)\n       else\n \tbbs.safe_push (bb);\n \n-      /* When we have a stmt ending this block we have to insert on\n-\t edges when inserting after it.  Avoid this for now.  */\n+      /* When we have a stmt ending this block and defining a\n+\t value we have to insert on edges when inserting after it for\n+\t a vector containing its definition.  Avoid this for now.  */\n       if (gimple *last = last_stmt (bb))\n-\tif (is_ctrl_altering_stmt (last))\n+\tif (gimple_get_lhs (last)\n+\t    && is_ctrl_altering_stmt (last))\n \t  {\n+\t    if (dump_enabled_p ())\n+\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t       \"splitting region at control altering \"\n+\t\t\t       \"definition %G\", last);\n \t    r |= vect_slp_bbs (bbs);\n \t    bbs.truncate (0);\n \t  }"}]}