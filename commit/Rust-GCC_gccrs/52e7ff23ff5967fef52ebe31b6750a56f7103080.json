{"sha": "52e7ff23ff5967fef52ebe31b6750a56f7103080", "node_id": "C_kwDOANBUbNoAKDUyZTdmZjIzZmY1OTY3ZmVmNTJlYmUzMWI2NzUwYTU2ZjcxMDMwODA", "commit": {"author": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2022-12-15T17:56:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-12-15T21:48:00Z"}, "message": "c++: mangle contracts in write_mangled_name\n\nThis fixes contract-checked extern \"C\" functions.\n\ngcc/cp/ChangeLog:\n\n\t* mangle.cc (write_encoding): Move contract pre/post function\n\tmangling from here...\n\t(write_mangled_name): ... to here, and make it happen always.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/contracts/contracts-externC.C: New test.", "tree": {"sha": "d6fb57f2a9f357ddb2d2e744cc0ddee434ec8e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6fb57f2a9f357ddb2d2e744cc0ddee434ec8e57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52e7ff23ff5967fef52ebe31b6750a56f7103080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e7ff23ff5967fef52ebe31b6750a56f7103080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e7ff23ff5967fef52ebe31b6750a56f7103080", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e7ff23ff5967fef52ebe31b6750a56f7103080/comments", "author": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147e276b580b674a46bc3b9c461ae7837fd48aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147e276b580b674a46bc3b9c461ae7837fd48aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/147e276b580b674a46bc3b9c461ae7837fd48aba"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "074cf27ec7a20cdb6ced3c0f8ed04524db6ef20d", "filename": "gcc/cp/mangle.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e7ff23ff5967fef52ebe31b6750a56f7103080/gcc%2Fcp%2Fmangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e7ff23ff5967fef52ebe31b6750a56f7103080/gcc%2Fcp%2Fmangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.cc?ref=52e7ff23ff5967fef52ebe31b6750a56f7103080", "patch": "@@ -798,6 +798,13 @@ write_mangled_name (const tree decl, bool top_level)\n       write_string (\"_Z\");\n       write_encoding (decl);\n     }\n+\n+  /* If this is the pre/post function for a guarded function, append\n+     .pre/post, like something from create_virtual_clone.  */\n+  if (DECL_IS_PRE_FN_P (decl))\n+    write_string (\".pre\");\n+  else if (DECL_IS_POST_FN_P (decl))\n+    write_string (\".post\");\n }\n \n /* Returns true if the return type of DECL is part of its signature, and\n@@ -856,13 +863,6 @@ write_encoding (const tree decl)\n \t\t\t\tmangle_return_type_p (decl),\n \t\t\t\td);\n \n-      /* If this is the pre/post function for a guarded function, append\n-\t .pre/post, like something from create_virtual_clone.  */\n-      if (DECL_IS_PRE_FN_P (decl))\n-\twrite_string (\".pre\");\n-      else if (DECL_IS_POST_FN_P (decl))\n-\twrite_string (\".post\");\n-\n       /* If this is a coroutine helper, then append an appropriate string to\n \t identify which.  */\n       if (tree ramp = DECL_RAMP_FN (decl))"}, {"sha": "873056b742bb40926368ed5cdfe33cbd461d0c30", "filename": "gcc/testsuite/g++.dg/contracts/contracts-externC.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e7ff23ff5967fef52ebe31b6750a56f7103080/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcontracts%2Fcontracts-externC.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e7ff23ff5967fef52ebe31b6750a56f7103080/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcontracts%2Fcontracts-externC.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcontracts%2Fcontracts-externC.C?ref=52e7ff23ff5967fef52ebe31b6750a56f7103080", "patch": "@@ -0,0 +1,19 @@\n+// simple check to ensure we don't emit a function with the same name twice,\n+// when wrapping functions in pre- and postconditions.\n+// { dg-do link }\n+// { dg-options \"-std=c++2a -fcontracts -fcontract-continuation-mode=on\" }\n+\n+volatile int x = 10;\n+\n+extern \"C\" void\n+f ()\n+  [[ pre: x < 10 ]]\n+{\n+}\n+\n+int\n+main ()\n+  [[ post: x > 10 ]]\n+{\n+  f();\n+}"}]}