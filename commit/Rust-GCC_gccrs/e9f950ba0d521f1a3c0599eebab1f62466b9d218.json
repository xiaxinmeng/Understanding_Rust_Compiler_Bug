{"sha": "e9f950ba0d521f1a3c0599eebab1f62466b9d218", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmOTUwYmEwZDUyMWYxYTNjMDU5OWVlYmFiMWY2MjQ2NmI5ZDIxOA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2012-10-02T20:06:08Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2012-10-02T20:06:08Z"}, "message": "re PR debug/54551 (DF resets some DEBUG_INSNs unnecessarily)\n\ngcc/ChangeLog:\nPR debug/54551\n* Makefile.in (VALTRACK_H): Add hash-table.h.\n* valtrack.h: Include hash-table.h.\n(struct dead_debug_global_entry): New.\n(struct dead_debug_hash_descr): New.\n(struct dead_debug_global): New.\n(struct dead_debug): Rename to...\n(struct dead_debug_local): ... this.  Adjust all uses.\n(dead_debug_global_init, dead_debug_global_finish): New.\n(dead_debug_init): Rename to...\n(dead_debug_local_init): ... this.  Adjust all callers.\n(dead_debug_finish): Rename to...\n(dead_debug_local_finish): ... this.  Adjust all callers.\n* valtrack.c (dead_debug_global_init): New.\n(dead_debug_init): Rename to...\n(dead_debug_local_init): ... this.  Take global parameter.\nSave it and initialize used bitmap from it.\n(dead_debug_global_find, dead_debug_global_insert): New.\n(dead_debug_global_replace_temp): New.\n(dead_debug_promote_uses): New.\n(dead_debug_finish): Rename to...\n(dead_debug_local_finish): ... this.  Promote remaining uses.\n(dead_debug_global_finish): New.\n(dead_debug_add): Try to replace global temps first.\n(dead_debug_insert_temp): Support global replacements.\n* dce.c (word_dce_process_block, dce_process_block): Add\nglobal_debug parameter.  Pass it on.\n(fast_dce): Initialize, pass on and finalize global_debug.\n* df-problems.c (df_set_unused_notes_for_mw): Adjusted.\n(df_create_unused_notes, df_note_bb_compute): Likewise.\n(df_note_compute): Justify local-only dead debug analysis.\ngcc/testsuite/ChangeLog:\nPR debug/54551\n* gcc.dg/guality/pr54551.c: New.\n\nFrom-SVN: r192001", "tree": {"sha": "c5ddc0d1a51185fc60b47f6189eb5c1a1153d6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5ddc0d1a51185fc60b47f6189eb5c1a1153d6a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9f950ba0d521f1a3c0599eebab1f62466b9d218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f950ba0d521f1a3c0599eebab1f62466b9d218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f950ba0d521f1a3c0599eebab1f62466b9d218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f950ba0d521f1a3c0599eebab1f62466b9d218/comments", "author": null, "committer": null, "parents": [{"sha": "58b88be9de291c59e070fa090bc56b975c693062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b88be9de291c59e070fa090bc56b975c693062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b88be9de291c59e070fa090bc56b975c693062"}], "stats": {"total": 424, "additions": 379, "deletions": 45}, "files": [{"sha": "a8ad41cb28da40bbfa83c56b49bfce62887aa823", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9f950ba0d521f1a3c0599eebab1f62466b9d218", "patch": "@@ -1,3 +1,37 @@\n+2012-10-02  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/54551\n+\t* Makefile.in (VALTRACK_H): Add hash-table.h.\n+\t* valtrack.h: Include hash-table.h.\n+\t(struct dead_debug_global_entry): New.\n+\t(struct dead_debug_hash_descr): New.\n+\t(struct dead_debug_global): New.\n+\t(struct dead_debug): Rename to...\n+\t(struct dead_debug_local): ... this.  Adjust all uses.\n+\t(dead_debug_global_init, dead_debug_global_finish): New.\n+\t(dead_debug_init): Rename to...\n+\t(dead_debug_local_init): ... this.  Adjust all callers.\n+\t(dead_debug_finish): Rename to...\n+\t(dead_debug_local_finish): ... this.  Adjust all callers.\n+\t* valtrack.c (dead_debug_global_init): New.\n+\t(dead_debug_init): Rename to...\n+\t(dead_debug_local_init): ... this.  Take global parameter.\n+\tSave it and initialize used bitmap from it.\n+\t(dead_debug_global_find, dead_debug_global_insert): New.\n+\t(dead_debug_global_replace_temp): New.\n+\t(dead_debug_promote_uses): New.\n+\t(dead_debug_finish): Rename to...\n+\t(dead_debug_local_finish): ... this.  Promote remaining uses.\n+\t(dead_debug_global_finish): New.\n+\t(dead_debug_add): Try to replace global temps first.\n+\t(dead_debug_insert_temp): Support global replacements.\n+\t* dce.c (word_dce_process_block, dce_process_block): Add\n+\tglobal_debug parameter.  Pass it on.\n+\t(fast_dce): Initialize, pass on and finalize global_debug.\n+\t* df-problems.c (df_set_unused_notes_for_mw): Adjusted.\n+\t(df_create_unused_notes, df_note_bb_compute): Likewise.\n+\t(df_note_compute): Justify local-only dead debug analysis.\n+\n 2012-10-02  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR debug/53135"}, {"sha": "77ba4df29583253b68a608b06dbb509ac5f005ae", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e9f950ba0d521f1a3c0599eebab1f62466b9d218", "patch": "@@ -888,7 +888,8 @@ CGRAPH_H = cgraph.h $(VEC_H) $(TREE_H) $(BASIC_BLOCK_H) $(FUNCTION_H) \\\n \tcif-code.def ipa-ref.h ipa-ref-inline.h $(LINKER_PLUGIN_API_H)\n DF_H = df.h $(BITMAP_H) $(REGSET_H) sbitmap.h $(BASIC_BLOCK_H) \\\n \talloc-pool.h $(TIMEVAR_H)\n-VALTRACK_H = valtrack.h $(BITMAP_H) $(DF_H) $(RTL_H) $(BASIC_BLOCK_H)\n+VALTRACK_H = valtrack.h $(BITMAP_H) $(DF_H) $(RTL_H) $(BASIC_BLOCK_H) \\\n+\t$(HASH_TABLE_H)\n RESOURCE_H = resource.h hard-reg-set.h $(DF_H)\n DDG_H = ddg.h sbitmap.h $(DF_H)\n GCC_H = gcc.h version.h $(DIAGNOSTIC_CORE_H)"}, {"sha": "11f8edb7b70f09d8d992ed1ff99864a895566d22", "filename": "gcc/dce.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=e9f950ba0d521f1a3c0599eebab1f62466b9d218", "patch": "@@ -806,15 +806,17 @@ struct rtl_opt_pass pass_ud_rtl_dce =\n /* Process basic block BB.  Return true if the live_in set has\n    changed. REDO_OUT is true if the info at the bottom of the block\n    needs to be recalculated before starting.  AU is the proper set of\n-   artificial uses. */\n+   artificial uses.  Track global substitution of uses of dead pseudos\n+   in debug insns using GLOBAL_DEBUG.  */\n \n static bool\n-word_dce_process_block (basic_block bb, bool redo_out)\n+word_dce_process_block (basic_block bb, bool redo_out,\n+\t\t\tstruct dead_debug_global *global_debug)\n {\n   bitmap local_live = BITMAP_ALLOC (&dce_tmp_bitmap_obstack);\n   rtx insn;\n   bool block_changed;\n-  struct dead_debug debug;\n+  struct dead_debug_local debug;\n \n   if (redo_out)\n     {\n@@ -836,7 +838,7 @@ word_dce_process_block (basic_block bb, bool redo_out)\n     }\n \n   bitmap_copy (local_live, DF_WORD_LR_OUT (bb));\n-  dead_debug_init (&debug, NULL);\n+  dead_debug_local_init (&debug, NULL, global_debug);\n \n   FOR_BB_INSNS_REVERSE (bb, insn)\n     if (DEBUG_INSN_P (insn))\n@@ -890,7 +892,7 @@ word_dce_process_block (basic_block bb, bool redo_out)\n   if (block_changed)\n     bitmap_copy (DF_WORD_LR_IN (bb), local_live);\n \n-  dead_debug_finish (&debug, NULL);\n+  dead_debug_local_finish (&debug, NULL);\n   BITMAP_FREE (local_live);\n   return block_changed;\n }\n@@ -899,16 +901,18 @@ word_dce_process_block (basic_block bb, bool redo_out)\n /* Process basic block BB.  Return true if the live_in set has\n    changed. REDO_OUT is true if the info at the bottom of the block\n    needs to be recalculated before starting.  AU is the proper set of\n-   artificial uses. */\n+   artificial uses.  Track global substitution of uses of dead pseudos\n+   in debug insns using GLOBAL_DEBUG.  */\n \n static bool\n-dce_process_block (basic_block bb, bool redo_out, bitmap au)\n+dce_process_block (basic_block bb, bool redo_out, bitmap au,\n+\t\t   struct dead_debug_global *global_debug)\n {\n   bitmap local_live = BITMAP_ALLOC (&dce_tmp_bitmap_obstack);\n   rtx insn;\n   bool block_changed;\n   df_ref *def_rec;\n-  struct dead_debug debug;\n+  struct dead_debug_local debug;\n \n   if (redo_out)\n     {\n@@ -932,7 +936,7 @@ dce_process_block (basic_block bb, bool redo_out, bitmap au)\n   bitmap_copy (local_live, DF_LR_OUT (bb));\n \n   df_simulate_initialize_backwards (bb, local_live);\n-  dead_debug_init (&debug, NULL);\n+  dead_debug_local_init (&debug, NULL, global_debug);\n \n   FOR_BB_INSNS_REVERSE (bb, insn)\n     if (DEBUG_INSN_P (insn))\n@@ -977,7 +981,7 @@ dce_process_block (basic_block bb, bool redo_out, bitmap au)\n \t\t\t\t    DEBUG_TEMP_BEFORE_WITH_VALUE);\n       }\n \n-  dead_debug_finish (&debug, NULL);\n+  dead_debug_local_finish (&debug, NULL);\n   df_simulate_finalize_backwards (bb, local_live);\n \n   block_changed = !bitmap_equal_p (local_live, DF_LR_IN (bb));\n@@ -1014,12 +1018,15 @@ fast_dce (bool word_level)\n   bitmap au = &df->regular_block_artificial_uses;\n   bitmap au_eh = &df->eh_block_artificial_uses;\n   int i;\n+  struct dead_debug_global global_debug;\n \n   prescan_insns_for_dce (true);\n \n   for (i = 0; i < n_blocks; i++)\n     bitmap_set_bit (all_blocks, postorder[i]);\n \n+  dead_debug_global_init (&global_debug, NULL);\n+\n   while (global_changed)\n     {\n       global_changed = false;\n@@ -1038,11 +1045,13 @@ fast_dce (bool word_level)\n \n \t  if (word_level)\n \t    local_changed\n-\t      = word_dce_process_block (bb, bitmap_bit_p (redo_out, index));\n+\t      = word_dce_process_block (bb, bitmap_bit_p (redo_out, index),\n+\t\t\t\t\t&global_debug);\n \t  else\n \t    local_changed\n \t      = dce_process_block (bb, bitmap_bit_p (redo_out, index),\n-\t\t\t\t   bb_has_eh_pred (bb) ? au_eh : au);\n+\t\t\t\t   bb_has_eh_pred (bb) ? au_eh : au,\n+\t\t\t\t   &global_debug);\n \t  bitmap_set_bit (processed, index);\n \n \t  if (local_changed)\n@@ -1090,6 +1099,8 @@ fast_dce (bool word_level)\n \t}\n     }\n \n+  dead_debug_global_finish (&global_debug, NULL);\n+\n   delete_unmarked_insns ();\n \n   BITMAP_FREE (processed);"}, {"sha": "a1a0e71422d7bd4c63a9d0f8a4016480c8ee46d6", "filename": "gcc/df-problems.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=e9f950ba0d521f1a3c0599eebab1f62466b9d218", "patch": "@@ -2892,7 +2892,7 @@ static void\n df_set_unused_notes_for_mw (rtx insn, struct df_mw_hardreg *mws,\n \t\t\t    bitmap live, bitmap do_not_gen,\n \t\t\t    bitmap artificial_uses,\n-\t\t\t    struct dead_debug *debug)\n+\t\t\t    struct dead_debug_local *debug)\n {\n   unsigned int r;\n \n@@ -3021,7 +3021,7 @@ df_set_dead_notes_for_mw (rtx insn, struct df_mw_hardreg *mws,\n static void\n df_create_unused_note (rtx insn, df_ref def,\n \t\t       bitmap live, bitmap artificial_uses,\n-\t\t       struct dead_debug *debug)\n+\t\t       struct dead_debug_local *debug)\n {\n   unsigned int dregno = DF_REF_REGNO (def);\n \n@@ -3060,9 +3060,9 @@ df_note_bb_compute (unsigned int bb_index,\n   rtx insn;\n   df_ref *def_rec;\n   df_ref *use_rec;\n-  struct dead_debug debug;\n+  struct dead_debug_local debug;\n \n-  dead_debug_init (&debug, NULL);\n+  dead_debug_local_init (&debug, NULL, NULL);\n \n   bitmap_copy (live, df_get_live_out (bb));\n   bitmap_clear (artificial_uses);\n@@ -3268,7 +3268,7 @@ df_note_bb_compute (unsigned int bb_index,\n \t}\n     }\n \n-  dead_debug_finish (&debug, NULL);\n+  dead_debug_local_finish (&debug, NULL);\n }\n \n \n@@ -3286,6 +3286,11 @@ df_note_compute (bitmap all_blocks)\n \n   EXECUTE_IF_SET_IN_BITMAP (all_blocks, 0, bb_index, bi)\n   {\n+    /* ??? Unlike fast DCE, we don't use global_debug for uses of dead\n+       pseudos in debug insns because we don't always (re)visit blocks\n+       with death points after visiting dead uses.  Even changing this\n+       loop to postorder would still leave room for visiting a death\n+       point before visiting a subsequent debug use.  */\n     df_note_bb_compute (bb_index, &live, &do_not_gen, &artificial_uses);\n   }\n "}, {"sha": "1d2cac58a8c74b7f18f5f0dc480e20f00316ca94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9f950ba0d521f1a3c0599eebab1f62466b9d218", "patch": "@@ -1,3 +1,8 @@\n+2012-10-02  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/54551\n+\t* gcc.dg/guality/pr54551.c: New.\n+\n 2012-10-02  Pat Haugen <pthaugen@us.ibm.com>\n \n \t* gcc.target/powerpc/pr46728-1.c: Accept xssqrtdp."}, {"sha": "4235f78ce7313f5f21807ff0f6163317a6917b32", "filename": "gcc/testsuite/gcc.dg/guality/pr54551.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54551.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54551.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54551.c?ref=e9f950ba0d521f1a3c0599eebab1f62466b9d218", "patch": "@@ -0,0 +1,28 @@\n+/* PR debug/54551 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+void  __attribute__((__noinline__))\n+bar (void)\n+{\n+  asm volatile (\"\");\n+}\n+\n+int __attribute__((__noinline__))\n+foo (int x, int y, int z)\n+{\n+  if (x != z)\n+    {\n+      int a = z + 1;\n+      bar (); /* { dg-final { gdb-test 18 \"a\" \"4\" } } */\n+      bar (); /* { dg-final { gdb-test 18 \"z\" \"3\" } } */\n+    }\n+  return y;\n+}\n+\n+int\n+main ()\n+{\n+  foo (1, 2, 3);\n+  return 0;\n+}"}, {"sha": "52f5ed65313cee33c145692c0885151a20fbb31b", "filename": "gcc/valtrack.c", "status": "modified", "additions": 198, "deletions": 22, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=e9f950ba0d521f1a3c0599eebab1f62466b9d218", "patch": "@@ -182,14 +182,108 @@ propagate_for_debug (rtx insn, rtx last, rtx dest, rtx src,\n }\n \n /* Initialize DEBUG to an empty list, and clear USED, if given.  */\n+\n+void\n+dead_debug_global_init (struct dead_debug_global *debug, bitmap used)\n+{\n+  debug->used = used;\n+  if (used)\n+    bitmap_clear (used);\n+}\n+\n+/* Initialize DEBUG to an empty list, and clear USED, if given.  Link\n+   back to GLOBAL, if given, and bring in used bits from it.  */\n+\n void\n-dead_debug_init (struct dead_debug *debug, bitmap used)\n+dead_debug_local_init (struct dead_debug_local *debug, bitmap used,\n+\t\t       struct dead_debug_global *global)\n {\n+  if (!used && global && global->used)\n+    used = BITMAP_ALLOC (NULL);\n+\n   debug->head = NULL;\n+  debug->global = global;\n   debug->used = used;\n   debug->to_rescan = NULL;\n+\n   if (used)\n-    bitmap_clear (used);\n+    {\n+      if (global && global->used)\n+\tbitmap_copy (used, global->used);\n+      else\n+\tbitmap_clear (used);\n+    }\n+}\n+\n+/* Locate the entry for REG in GLOBAL->htab.  */\n+\n+static dead_debug_global_entry *\n+dead_debug_global_find (struct dead_debug_global *global, rtx reg)\n+{\n+  dead_debug_global_entry temp_entry;\n+  temp_entry.reg = reg;\n+\n+  dead_debug_global_entry *entry = global->htab.find (&temp_entry);\n+  gcc_checking_assert (entry && entry->reg == temp_entry.reg);\n+  gcc_checking_assert (entry->dtemp);\n+\n+  return entry;\n+}\n+\n+/* Insert an entry mapping REG to DTEMP in GLOBAL->htab.  */\n+\n+static void\n+dead_debug_global_insert (struct dead_debug_global *global, rtx reg, rtx dtemp)\n+{\n+  dead_debug_global_entry temp_entry;\n+  temp_entry.reg = reg;\n+  temp_entry.dtemp = dtemp;\n+\n+  if (!global->htab.is_created ())\n+    global->htab.create (31);\n+\n+  dead_debug_global_entry **slot = global->htab.find_slot (&temp_entry, INSERT);\n+  gcc_checking_assert (!*slot);\n+  *slot = XNEW (dead_debug_global_entry);\n+  **slot = temp_entry;\n+}\n+\n+/* If UREGNO, referenced by USE, is a pseudo marked as used in GLOBAL,\n+   replace it with with a USE of the debug temp recorded for it, and\n+   return TRUE.  Otherwise, just return FALSE.\n+\n+   If PTO_RESCAN is given, instead of rescanning modified INSNs right\n+   away, add their UIDs to the bitmap, allocating one of *PTO_RESCAN\n+   is NULL.  */\n+\n+static bool\n+dead_debug_global_replace_temp (struct dead_debug_global *global,\n+\t\t\t\tdf_ref use, unsigned int uregno,\n+\t\t\t\tbitmap *pto_rescan)\n+{\n+  if (!global || uregno < FIRST_PSEUDO_REGISTER\n+      || !global->used\n+      || !bitmap_bit_p (global->used, uregno))\n+    return false;\n+\n+  gcc_checking_assert (REGNO (*DF_REF_REAL_LOC (use)) == uregno);\n+\n+  dead_debug_global_entry *entry\n+    = dead_debug_global_find (global, *DF_REF_REAL_LOC (use));\n+  gcc_checking_assert (GET_CODE (entry->reg) == REG\n+\t\t       && REGNO (entry->reg) == uregno);\n+\n+  *DF_REF_REAL_LOC (use) = entry->dtemp;\n+  if (!pto_rescan)\n+    df_insn_rescan (DF_REF_INSN (use));\n+  else\n+    {\n+      if (!*pto_rescan)\n+\t*pto_rescan = BITMAP_ALLOC (NULL);\n+      bitmap_set_bit (*pto_rescan, INSN_UID (DF_REF_INSN (use)));\n+    }\n+\n+  return true;\n }\n \n /* Reset all debug uses in HEAD, and clear DEBUG->to_rescan bits of\n@@ -199,7 +293,8 @@ dead_debug_init (struct dead_debug *debug, bitmap used)\n    will be removed, and only then rescanned.  */\n \n static void\n-dead_debug_reset_uses (struct dead_debug *debug, struct dead_debug_use *head)\n+dead_debug_reset_uses (struct dead_debug_local *debug,\n+\t\t       struct dead_debug_use *head)\n {\n   bool got_head = (debug->head == head);\n   bitmap rescan;\n@@ -258,15 +353,57 @@ dead_debug_reset_uses (struct dead_debug *debug, struct dead_debug_use *head)\n   BITMAP_FREE (rescan);\n }\n \n+/* Promote pending local uses of pseudos in DEBUG to global\n+   substitutions.  Uses of non-pseudos are left alone for\n+   resetting.  */\n+\n+static void\n+dead_debug_promote_uses (struct dead_debug_local *debug)\n+{\n+  for (struct dead_debug_use *head = debug->head, **headp = &debug->head;\n+       head; head = *headp)\n+    {\n+      rtx reg = *DF_REF_REAL_LOC (head->use);\n+\n+      if (GET_CODE (reg) != REG\n+\t  || REGNO (reg) < FIRST_PSEUDO_REGISTER)\n+\t{\n+\t  headp = &head->next;\n+\t  continue;\n+\t}\n+\n+      if (!debug->global->used)\n+\tdebug->global->used = BITMAP_ALLOC (NULL);\n+\n+      if (bitmap_set_bit (debug->global->used, REGNO (reg)))\n+\tdead_debug_global_insert (debug->global, reg,\n+\t\t\t\t  make_debug_expr_from_rtl (reg));\n+\n+      if (!dead_debug_global_replace_temp (debug->global, head->use,\n+\t\t\t\t\t   REGNO (reg), &debug->to_rescan))\n+\t{\n+\t  headp = &head->next;\n+\t  continue;\n+\t}\n+      \n+      *headp = head->next;\n+      XDELETE (head);\n+    }\n+}\n+\n /* Reset all debug insns with pending uses.  Release the bitmap in it,\n    unless it is USED.  USED must be the same bitmap passed to\n-   dead_debug_init.  */\n+   dead_debug_local_init.  */\n+\n void\n-dead_debug_finish (struct dead_debug *debug, bitmap used)\n+dead_debug_local_finish (struct dead_debug_local *debug, bitmap used)\n {\n   if (debug->used != used)\n     BITMAP_FREE (debug->used);\n \n+  if (debug->global)\n+    dead_debug_promote_uses (debug);\n+\n   dead_debug_reset_uses (debug, debug->head);\n \n   if (debug->to_rescan)\n@@ -284,11 +421,30 @@ dead_debug_finish (struct dead_debug *debug, bitmap used)\n     }\n }\n \n-/* Add USE to DEBUG.  It must be a dead reference to UREGNO in a debug\n-   insn.  Create a bitmap for DEBUG as needed.  */\n+/* Release GLOBAL->used unless it is the same as USED.  Release the\n+   mapping hash table if it was initialized.  */\n+\n+void\n+dead_debug_global_finish (struct dead_debug_global *global, bitmap used)\n+{\n+  if (global->used != used)\n+    BITMAP_FREE (global->used);\n+\n+  if (global->htab.is_created ())\n+    global->htab.dispose ();\n+}\n+\n+/* Add USE to DEBUG, or substitute it right away if it's a pseudo in\n+   the global substitution list.  USE must be a dead reference to\n+   UREGNO in a debug insn.  Create a bitmap for DEBUG as needed.  */\n+\n void\n-dead_debug_add (struct dead_debug *debug, df_ref use, unsigned int uregno)\n+dead_debug_add (struct dead_debug_local *debug, df_ref use, unsigned int uregno)\n {\n+  if (dead_debug_global_replace_temp (debug->global, use, uregno,\n+\t\t\t\t      &debug->to_rescan))\n+    return;\n+\n   struct dead_debug_use *newddu = XNEW (struct dead_debug_use);\n \n   newddu->use = use;\n@@ -305,26 +461,34 @@ dead_debug_add (struct dead_debug *debug, df_ref use, unsigned int uregno)\n }\n \n /* If UREGNO is referenced by any entry in DEBUG, emit a debug insn\n-   before or after INSN (depending on WHERE), that binds a debug temp\n-   to the widest-mode use of UREGNO, if WHERE is *_WITH_REG, or the\n-   value stored in UREGNO by INSN otherwise, and replace all uses of\n-   UREGNO in DEBUG with uses of the debug temp.  INSN must be where\n-   UREGNO dies, if WHERE is *_BEFORE_*, or where it is set otherwise.\n-   Return the number of debug insns emitted.  */\n+   before or after INSN (depending on WHERE), that binds a (possibly\n+   global) debug temp to the widest-mode use of UREGNO, if WHERE is\n+   *_WITH_REG, or the value stored in UREGNO by INSN otherwise, and\n+   replace all uses of UREGNO in DEBUG with uses of the debug temp.\n+   INSN must be where UREGNO dies, if WHERE is *_BEFORE_*, or where it\n+   is set otherwise.  Return the number of debug insns emitted.  */\n+\n int\n-dead_debug_insert_temp (struct dead_debug *debug, unsigned int uregno,\n+dead_debug_insert_temp (struct dead_debug_local *debug, unsigned int uregno,\n \t\t\trtx insn, enum debug_temp_where where)\n {\n   struct dead_debug_use **tailp = &debug->head;\n   struct dead_debug_use *cur;\n   struct dead_debug_use *uses = NULL;\n   struct dead_debug_use **usesp = &uses;\n-  rtx reg = NULL;\n+  rtx reg = NULL_RTX;\n   rtx breg;\n-  rtx dval;\n+  rtx dval = NULL_RTX;\n   rtx bind;\n+  bool global;\n \n-  if (!debug->used || !bitmap_clear_bit (debug->used, uregno))\n+  if (!debug->used)\n+    return 0;\n+\n+  global = (debug->global && debug->global->used\n+\t    && bitmap_bit_p (debug->global->used, uregno));\n+\n+  if (!global && !bitmap_clear_bit (debug->used, uregno))\n     return 0;\n \n   /* Move all uses of uregno from debug->head to uses, setting mode to\n@@ -359,10 +523,21 @@ dead_debug_insert_temp (struct dead_debug *debug, unsigned int uregno,\n   if (reg == NULL)\n     {\n       gcc_checking_assert (!uses);\n-      return 0;\n+      if (!global)\n+\treturn 0;\n+    }\n+\n+  if (global)\n+    {\n+      if (!reg)\n+\treg = regno_reg_rtx[uregno];\n+      dead_debug_global_entry *entry\n+\t= dead_debug_global_find (debug->global, reg);\n+      gcc_checking_assert (entry->reg == reg);\n+      dval = entry->dtemp;\n     }\n \n-  gcc_checking_assert (uses);\n+  gcc_checking_assert (uses || global);\n \n   breg = reg;\n   /* Recover the expression INSN stores in REG.  */\n@@ -464,8 +639,9 @@ dead_debug_insert_temp (struct dead_debug *debug, unsigned int uregno,\n \t}\n     }\n \n-  /* Create DEBUG_EXPR (and DEBUG_EXPR_DECL).  */\n-  dval = make_debug_expr_from_rtl (reg);\n+  if (!global)\n+    /* Create DEBUG_EXPR (and DEBUG_EXPR_DECL).  */\n+    dval = make_debug_expr_from_rtl (reg);\n \n   /* Emit a debug bind insn before the insn in which reg dies.  */\n   bind = gen_rtx_VAR_LOCATION (GET_MODE (reg),"}, {"sha": "303ffa43a8f5feb7390732e1648a8f7958f027f6", "filename": "gcc/valtrack.h", "status": "modified", "additions": 79, "deletions": 5, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Fvaltrack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f950ba0d521f1a3c0599eebab1f62466b9d218/gcc%2Fvaltrack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.h?ref=e9f950ba0d521f1a3c0599eebab1f62466b9d218", "patch": "@@ -26,10 +26,71 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"rtl.h\"\n #include \"basic-block.h\"\n+#include \"hash-table.h\"\n \n /* Debug uses of dead regs.  */\n \n+/* Entry that maps a dead pseudo (REG) used in a debug insns that dies\n+   at different blocks to the debug temp (DTEMP) it was replaced\n+   with.  */\n+\n+struct dead_debug_global_entry\n+{\n+  rtx reg;\n+  rtx dtemp;\n+};\n+\n+/* Descriptor for hash_table to hash by dead_debug_global_entry's REG\n+   and map to DTEMP.  */\n+\n+struct dead_debug_hash_descr\n+{\n+  /* The hash table contains pointers to entries of this type.  */\n+  typedef struct dead_debug_global_entry T;\n+  /* Hash on the pseudo number.  */\n+  static inline hashval_t hash (T const *my);\n+  /* Entries are identical if they refer to the same pseudo.  */\n+  static inline bool equal (T const *my, T const *other);\n+  /* Release entries when they're removed.  */\n+  static inline void remove (T *p);\n+};\n+\n+/* Hash on the pseudo number.  */\n+inline hashval_t\n+dead_debug_hash_descr::hash (T const *my)\n+{\n+  return REGNO (my->reg);\n+}\n+\n+/* Entries are identical if they refer to the same pseudo.  */\n+inline bool\n+dead_debug_hash_descr::equal (T const *my, T const *other)\n+{\n+  return my->reg == other->reg;\n+}\n+\n+/* Release entries when they're removed.  */\n+inline void\n+dead_debug_hash_descr::remove (T *p)\n+{\n+  XDELETE (p);\n+}\n+\n+/* Maintain a global table of pseudos used in debug insns after their\n+   deaths in other blocks, and debug temps their deathpoint values are\n+   to be bound to.  */\n+\n+struct dead_debug_global\n+{\n+  /* This hash table that maps pseudos to debug temps.  */\n+  hash_table <dead_debug_hash_descr> htab;\n+  /* For each entry in htab, the bit corresponding to its REGNO will\n+     be set.  */\n+  bitmap used;\n+};\n+\n /* Node of a linked list of uses of dead REGs in debug insns.  */\n+\n struct dead_debug_use\n {\n   df_ref use;\n@@ -38,15 +99,25 @@ struct dead_debug_use\n \n /* Linked list of the above, with a bitmap of the REGs in the\n    list.  */\n-struct dead_debug\n+\n+struct dead_debug_local\n {\n+  /* The first dead_debug_use entry in the list.  */\n   struct dead_debug_use *head;\n+  /* A pointer to the global tracking data structure.  */\n+  struct dead_debug_global *global;\n+  /* A bitmap that has bits set for each REG used in the\n+     dead_debug_use list, and for each entry in the global hash\n+     table.  */\n   bitmap used;\n+  /* A bitmap that has bits set for each INSN that is to be\n+     rescanned.  */\n   bitmap to_rescan;\n };\n \n /* This type controls the behavior of dead_debug_insert_temp WRT\n    UREGNO and INSN.  */\n+\n enum debug_temp_where\n   {\n     /* Bind a newly-created debug temporary to a REG for UREGNO, and\n@@ -62,10 +133,13 @@ enum debug_temp_where\n     DEBUG_TEMP_AFTER_WITH_REG = 1\n   };\n \n-extern void dead_debug_init (struct dead_debug *, bitmap);\n-extern void dead_debug_finish (struct dead_debug *, bitmap);\n-extern void dead_debug_add (struct dead_debug *, df_ref, unsigned int);\n-extern int dead_debug_insert_temp (struct dead_debug *,\n+extern void dead_debug_global_init (struct dead_debug_global *, bitmap);\n+extern void dead_debug_global_finish (struct dead_debug_global *, bitmap);\n+extern void dead_debug_local_init (struct dead_debug_local *, bitmap,\n+\t\t\t\t   struct dead_debug_global *);\n+extern void dead_debug_local_finish (struct dead_debug_local *, bitmap);\n+extern void dead_debug_add (struct dead_debug_local *, df_ref, unsigned int);\n+extern int dead_debug_insert_temp (struct dead_debug_local *,\n \t\t\t\t   unsigned int uregno, rtx insn,\n \t\t\t\t   enum debug_temp_where);\n "}]}