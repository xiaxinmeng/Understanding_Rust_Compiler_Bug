{"sha": "85fca03a09ababbe8808cbe402368e375b8834b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVmY2EwM2EwOWFiYWJiZTg4MDhjYmU0MDIzNjhlMzc1Yjg4MzRiOQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-06-18T22:15:03Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-06-18T22:15:03Z"}, "message": "Test cases to verify OpenACC 'firstprivate' mappings\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/firstprivate-mappings-1.c: New file.\n\t* g++.dg/goacc/firstprivate-mappings-1.C: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c++/firstprivate-mappings-1.C: New file.\n\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-mappings-1.c:\n\tLikewise.\n\nFrom-SVN: r272451", "tree": {"sha": "f722dcde06a6a3c8682100ec1c00ee6a108a37af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f722dcde06a6a3c8682100ec1c00ee6a108a37af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85fca03a09ababbe8808cbe402368e375b8834b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85fca03a09ababbe8808cbe402368e375b8834b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85fca03a09ababbe8808cbe402368e375b8834b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85fca03a09ababbe8808cbe402368e375b8834b9/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbdce9053506761f8ae8490bb71edda4630bb9d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbdce9053506761f8ae8490bb71edda4630bb9d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbdce9053506761f8ae8490bb71edda4630bb9d4"}], "stats": {"total": 1078, "additions": 1078, "deletions": 0}, "files": [{"sha": "bffa899c767639c35517a4532696fba30bf45edd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fca03a09ababbe8808cbe402368e375b8834b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fca03a09ababbe8808cbe402368e375b8834b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85fca03a09ababbe8808cbe402368e375b8834b9", "patch": "@@ -1,5 +1,8 @@\n 2019-06-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* c-c++-common/goacc/firstprivate-mappings-1.c: New file.\n+\t* g++.dg/goacc/firstprivate-mappings-1.C: Likewise.\n+\n \tPR testsuite/90861\n \t* c-c++-common/goacc/declare-pr90861.c: New file.\n "}, {"sha": "c8270472a9c56fc87d68f7b5d933de9e0d62ffaf", "filename": "gcc/testsuite/c-c++-common/goacc/firstprivate-mappings-1.c", "status": "added", "additions": 533, "deletions": 0, "changes": 533, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fca03a09ababbe8808cbe402368e375b8834b9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffirstprivate-mappings-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fca03a09ababbe8808cbe402368e375b8834b9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffirstprivate-mappings-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffirstprivate-mappings-1.c?ref=85fca03a09ababbe8808cbe402368e375b8834b9", "patch": "@@ -0,0 +1,533 @@\n+/* Verify OpenACC 'firstprivate' mappings.  */\n+\n+/* This file is also sourced from\n+   '../../../../libgomp/testsuite/libgomp.oacc-c-c++-common/firstprivate-mappings-1.c'\n+   as an execution test.  */\n+\n+/* See also '../../g++.dg/goacc/firstprivate-mappings-1.C'.  */\n+\n+/* { dg-additional-options \"-fdump-tree-omplower\" } */\n+\n+/* { dg-additional-options \"-fext-numeric-literals\" { target c++ } } */\n+\n+/* { dg-additional-options \"-Wno-psabi\" } as apparently we're doing funny\n+   things with vector arguments.  */\n+\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <string.h>\n+\n+\n+#ifdef __SIZEOF_INT128__\n+# define HAVE_INT128 1\n+#else\n+# define HAVE_INT128 0\n+#endif\n+\n+\n+/* The one is only relevant for offloading compilation; will always be enabled\n+   when doing tree scanning.  */\n+#ifdef ACC_DEVICE_TYPE_nvidia\n+/* PR71064.  */\n+# define DO_LONG_DOUBLE 0\n+#else\n+# define DO_LONG_DOUBLE 1\n+#endif\n+\n+\n+/* Simplify scanning for function names in tree dumps.  */\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+\n+/* Inside the following OpenACC 'parallel' constructs' regions, we modify the\n+   'firstprivate' variables, so that we can check that we don't copy these\n+   back.  */\n+\n+\n+static void\n+p (short *spi)\n+{\n+  short *spo;\n+#pragma acc parallel \\\n+  copyout (spo) \\\n+  firstprivate (spi)\n+  {\n+    spo = ++spi;\n+  }\n+  if (spo != spi + 1)\n+    __builtin_abort ();\n+}\n+\n+\n+static void\n+b (bool bi)\n+{\n+  bool bo;\n+#pragma acc parallel \\\n+  copyout (bo) \\\n+  firstprivate (bi)\n+  {\n+    bo = (bi = !bi);\n+  }\n+  if (bo != !bi)\n+    __builtin_abort ();\n+}\n+\n+\n+static void\n+i (int8_t i8i,\n+   uint8_t u8i,\n+   int16_t i16i,\n+   uint16_t u16i,\n+   int32_t i32i,\n+   uint32_t u32i,\n+   int64_t i64i,\n+   uint64_t u64i)\n+{\n+  int8_t i8o;\n+  uint8_t u8o;\n+  int16_t i16o;\n+  uint16_t u16o;\n+  int32_t i32o;\n+  uint32_t u32o;\n+  int64_t i64o;\n+  uint64_t u64o;\n+#pragma acc parallel \\\n+  copyout (i8o) \\\n+  firstprivate (i8i) \\\n+  copyout (u8o) \\\n+  firstprivate (u8i) \\\n+  copyout (i16o) \\\n+  firstprivate (i16i) \\\n+  copyout (u16o) \\\n+  firstprivate (u16i) \\\n+  copyout (i32o) \\\n+  firstprivate (i32i) \\\n+  copyout (u32o) \\\n+  firstprivate (u32i) \\\n+  copyout (i64o) \\\n+  firstprivate (i64i) \\\n+  copyout (u64o) \\\n+  firstprivate (u64i)\n+  {\n+    i8o = --i8i;\n+    u8o = ++u8i;\n+    i16o = --i16i;\n+    u16o = ++u16i;\n+    i32o = --i32i;\n+    u32o = ++u32i;\n+    i64o = --i64i;\n+    u64o = ++u64i;\n+  }\n+  if (i8o != i8i - 1)\n+    __builtin_abort ();\n+  if (u8o != u8i + 1)\n+    __builtin_abort ();\n+  if (i16o != i16i - 1)\n+    __builtin_abort ();\n+  if (u16o != u16i + 1)\n+    __builtin_abort ();\n+  if (i32o != i32i - 1)\n+    __builtin_abort ();\n+  if (u32o != u32i + 1)\n+    __builtin_abort ();\n+  if (i64o != i64i - 1)\n+    __builtin_abort ();\n+  if (u64o != u64i + 1)\n+    __builtin_abort ();\n+}\n+\n+\n+#if HAVE_INT128\n+static void\n+i128 (__int128 i128i, unsigned __int128 u128i)\n+{\n+  __int128 i128o;\n+  unsigned __int128 u128o;\n+# pragma acc parallel \\\n+  copyout (i128o) \\\n+  firstprivate (i128i) \\\n+  copyout(u128o) \\\n+  firstprivate (u128i)\n+  {\n+    i128o = --i128i;\n+    u128o = ++u128i;\n+  }\n+  if (i128o != i128i - 1)\n+    __builtin_abort ();\n+  if (u128o != u128i + 1)\n+    __builtin_abort ();\n+}\n+#endif\n+\n+\n+static void\n+flt_dbl (float flti, double dbli)\n+{\n+  float flto;\n+  double dblo;\n+#pragma acc parallel \\\n+  copyout (flto) \\\n+  firstprivate (flti) \\\n+  copyout (dblo) \\\n+  firstprivate (dbli)\n+  {\n+    flto = --flti;\n+    dblo = --dbli;\n+  }\n+  if (flto != flti - 1)\n+    __builtin_abort ();\n+  if (dblo != dbli - 1)\n+    __builtin_abort ();\n+}\n+\n+\n+static void\n+ldbl (long double ldbli)\n+{\n+#if DO_LONG_DOUBLE\n+  long double ldblo;\n+# pragma acc parallel \\\n+  copyout (ldblo) \\\n+  firstprivate (ldbli)\n+  {\n+    ldblo = --ldbli;\n+  }\n+  if (ldblo != ldbli - 1)\n+    __builtin_abort ();\n+#endif\n+}\n+\n+\n+static void\n+c (_Complex unsigned char cuci,\n+   _Complex signed short cssi,\n+   _Complex unsigned int cuii,\n+   _Complex signed long csli,\n+   _Complex float cflti,\n+   _Complex double cdbli)\n+{\n+  _Complex unsigned char cuco;\n+  _Complex signed short csso;\n+  _Complex unsigned int cuio;\n+  _Complex signed long cslo;\n+  _Complex float cflto;\n+  _Complex double cdblo;\n+#pragma acc parallel \\\n+  copyout (cuco) \\\n+  firstprivate (cuci) \\\n+  copyout (csso) \\\n+  firstprivate (cssi) \\\n+  copyout (cuio) \\\n+  firstprivate (cuii) \\\n+  copyout (cslo) \\\n+  firstprivate (csli) \\\n+  copyout (cflto) \\\n+  firstprivate (cflti) \\\n+  copyout (cdblo) \\\n+  firstprivate (cdbli)\n+  {\n+    cuco = (cuci += (1 + 1j));\n+    csso = (cssi -= (1 + 1j));\n+    cuio = (cuii += (1 + 1j));\n+    cslo = (csli -= (1 + 1j));\n+    cflto = (cflti -= (1 + 1j));\n+    cdblo = (cdbli -= (1 + 1j));\n+  }\n+  if (cuco != cuci + (1 + 1j))\n+    __builtin_abort ();\n+  if (csso != cssi - (1 + 1j))\n+    __builtin_abort ();\n+  if (cuio != cuii + (1 + 1j))\n+    __builtin_abort ();\n+  if (cslo != csli - (1 + 1j))\n+    __builtin_abort ();\n+  if (cflto != cflti - (1 + 1j))\n+    __builtin_abort ();\n+  if (cdblo != cdbli - (1 + 1j))\n+    __builtin_abort ();\n+}\n+\n+\n+static void\n+cldbl (_Complex long double cldbli)\n+{\n+#if DO_LONG_DOUBLE\n+  _Complex long double cldblo;\n+# pragma acc parallel \\\n+  copyout (cldblo) \\\n+  firstprivate (cldbli)\n+  {\n+    cldblo = (cldbli -= (1 + 1j));\n+  }\n+  if (cldblo != cldbli - (1 + 1j))\n+    __builtin_abort ();\n+#endif\n+}\n+\n+\n+#define V_EQ(v1, v2) \\\n+  ({ \\\n+    __typeof__ (v1) v_d = (v1) != (v2); \\\n+    __typeof__ (v_d) v_0 = { 0 }; \\\n+    memcmp (&v_d, &v_0, sizeof v_d) == 0; \\\n+  })\n+\n+typedef uint8_t __attribute__ ((vector_size (2 * sizeof (uint8_t)))) v2u8;\n+typedef int16_t __attribute__ ((vector_size (4 * sizeof (int16_t)))) v4i16;\n+typedef uint32_t __attribute__ ((vector_size (8 * sizeof (uint32_t)))) v8u32;\n+typedef int64_t __attribute__ ((vector_size (16 * sizeof (int64_t)))) v16i64;\n+typedef float __attribute__ ((vector_size (1 * sizeof (float)))) v1flt;\n+typedef float __attribute__ ((vector_size (2 * sizeof (float)))) v2flt;\n+typedef float __attribute__ ((vector_size (4 * sizeof (float)))) v4flt;\n+typedef float __attribute__ ((vector_size (8 * sizeof (float)))) v8flt;\n+typedef double __attribute__ ((vector_size (1 * sizeof (double)))) v1dbl;\n+typedef double __attribute__ ((vector_size (2 * sizeof (double)))) v2dbl;\n+typedef double __attribute__ ((vector_size (4 * sizeof (double)))) v4dbl;\n+typedef double __attribute__ ((vector_size (8 * sizeof (double)))) v8dbl;\n+\n+static void\n+v (v2u8 v2u8i, v4i16 v4i16i, v8u32 v8u32i, v16i64 v16i64i,\n+   v1flt v1flti, v2flt v2flti, v4flt v4flti, v8flt v8flti,\n+   v1dbl v1dbli, v2dbl v2dbli, v4dbl v4dbli, v8dbl v8dbli)\n+{\n+  v2u8 v2u8o;\n+  v4i16 v4i16o;\n+  v8u32 v8u32o;\n+  v16i64 v16i64o;\n+  v1flt v1flto;\n+  v2flt v2flto;\n+  v4flt v4flto;\n+  v8flt v8flto;\n+  v1dbl v1dblo;\n+  v2dbl v2dblo;\n+  v4dbl v4dblo;\n+  v8dbl v8dblo;\n+#pragma acc parallel \\\n+  copyout (v2u8o) \\\n+  firstprivate (v2u8i) \\\n+  copyout (v4i16o) \\\n+  firstprivate (v4i16i) \\\n+  copyout (v8u32o) \\\n+  firstprivate (v8u32i) \\\n+  copyout (v16i64o) \\\n+  firstprivate (v16i64i) \\\n+  copyout (v1flto) \\\n+  firstprivate (v1flti) \\\n+  copyout (v2flto) \\\n+  firstprivate (v2flti) \\\n+  copyout (v4flto) \\\n+  firstprivate (v4flti) \\\n+  copyout (v8flto) \\\n+  firstprivate (v8flti) \\\n+  copyout (v1dblo) \\\n+  firstprivate (v1dbli) \\\n+  copyout (v2dblo) \\\n+  firstprivate (v2dbli) \\\n+  copyout (v4dblo) \\\n+  firstprivate (v4dbli) \\\n+  copyout (v8dblo) \\\n+  firstprivate (v8dbli)\n+  {\n+    v2u8o = ++v2u8i;\n+    v4i16o = --v4i16i;\n+    v8u32o = ++v8u32i;\n+    v16i64o = --v16i64i;\n+    v1flto = --v1flti;\n+    v2flto = --v2flti;\n+    v4flto = --v4flti;\n+    v8flto = --v8flti;\n+    v1dblo = --v1dbli;\n+    v2dblo = --v2dbli;\n+    v4dblo = --v4dbli;\n+    v8dblo = --v8dbli;\n+  }\n+  if (!V_EQ (v2u8o, v2u8i + 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v4i16o, v4i16i - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v8u32o, v8u32i + 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v16i64o, v16i64i - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v1flto, v1flti - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v2flto, v2flti - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v4flto, v4flti - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v8flto, v8flti - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v1dblo, v1dbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v2dblo, v2dbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v4dblo, v4dbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v8dblo, v8dbli - 1))\n+    __builtin_abort ();\n+}\n+\n+\n+/* \"error: could not find an integer type of the same size as 'long double'\" */\n+#if HAVE_INT128\n+typedef long double __attribute__ ((vector_size (1 * sizeof (long double)))) v1ldbl;\n+typedef long double __attribute__ ((vector_size (2 * sizeof (long double)))) v2ldbl;\n+typedef long double __attribute__ ((vector_size (4 * sizeof (long double)))) v4ldbl;\n+typedef long double __attribute__ ((vector_size (8 * sizeof (long double)))) v8ldbl;\n+\n+static void\n+vldbl (v1ldbl v1ldbli, v2ldbl v2ldbli, v4ldbl v4ldbli, v8ldbl v8ldbli)\n+{\n+# if DO_LONG_DOUBLE\n+  v1ldbl v1ldblo;\n+  v2ldbl v2ldblo;\n+  v4ldbl v4ldblo;\n+  v8ldbl v8ldblo;\n+#  pragma acc parallel \\\n+  copyout (v1ldblo) \\\n+  firstprivate (v1ldbli) \\\n+  copyout (v2ldblo) \\\n+  firstprivate (v2ldbli) \\\n+  copyout (v4ldblo) \\\n+  firstprivate (v4ldbli) \\\n+  copyout (v8ldblo) \\\n+  firstprivate (v8ldbli)\n+  {\n+    v1ldblo = --v1ldbli;\n+    v2ldblo = --v2ldbli;\n+    v4ldblo = --v4ldbli;\n+    v8ldblo = --v8ldbli;\n+  }\n+  if (!V_EQ (v1ldblo, v1ldbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v2ldblo, v2ldbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v4ldblo, v4ldbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v8ldblo, v8ldbli - 1))\n+    __builtin_abort ();\n+# endif\n+}\n+#endif\n+\n+\n+static void\n+vla (int array_li)\n+{\n+  _Complex double array[array_li];\n+  uint32_t array_so;\n+#pragma acc parallel \\\n+  copyout (array_so)\n+  /* The gimplifier has created an implicit 'firstprivate' clause for the array\n+     length.\n+     { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_parallel map\\(from:array_so \\[len: 4\\]\\) firstprivate\\(array_li.[0-9]+\\)} omplower { target { ! c++ } } } }\n+     { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_parallel map\\(from:array_so \\[len: 4\\]\\) firstprivate\\(} omplower { target { c++ } } } }\n+     (C++ computes an intermediate value, so can't scan for 'firstprivate(array_li)'.)  */\n+  {\n+    array_so = sizeof array;\n+  }\n+  if (array_so != sizeof array)\n+    __builtin_abort ();\n+}\n+\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  {\n+    short s;\n+    short *sp = &s;\n+    p (sp);\n+  }\n+\n+  {\n+    bool bi = true;\n+    b (bi);\n+  }\n+\n+  {\n+    int8_t i8i = -1;\n+    uint8_t u8i = 1;\n+    int16_t i16i = -2;\n+    uint16_t u16i = 2;\n+    int32_t i32i = -3;\n+    uint32_t u32i = 3;\n+    int64_t i64i = -4;\n+    uint64_t u64i = 4;\n+    i (i8i, u8i, i16i, u16i, i32i, u32i, i64i, u64i);\n+  }\n+\n+#if HAVE_INT128\n+  {\n+    __int128 i128i = -8;\n+    unsigned __int128 u128i = 8;\n+    i128 (i128i, u128i);\n+  }\n+#endif\n+\n+  {\n+    float flti = .5;\n+    double dbli = .25;\n+    flt_dbl (flti, dbli);\n+  }\n+\n+  {\n+    long double ldbli = .125;\n+    ldbl (ldbli);\n+  }\n+\n+  {\n+    _Complex unsigned char cuci = 1 + 2j;\n+    _Complex signed short cssi = -2 + (-4j);\n+    _Complex unsigned int cuii = 3 + 6j;\n+    _Complex signed long csli = -4 + (-8j);\n+    _Complex float cflti = .5 + 1j;\n+    _Complex double cdbli = .25 + .5j;\n+    c (cuci, cssi, cuii, csli, cflti, cdbli);\n+  }\n+\n+  {\n+    _Complex long double cldbli = .125 + .25j;\n+    cldbl (cldbli);\n+  }\n+\n+  {\n+    v2u8 v2u8i = {2, 3};\n+    v4i16 v4i16i = { -1, -2, 5, 4 };\n+    v8u32 v8u32i = { 3, 6, 9, 11};\n+    v16i64 v16i64i = { 10, 21, -25, 44, 31, -1, 1, 222, -1, -12, 52, -44, -13, 1, -1, -222};\n+    v1flt v1flti = { -.5 };\n+    v2flt v2flti = { 1.5, -2.5 };\n+    v4flt v4flti = { 3.5, -4.5, -5.5, -6.5 };\n+    v8flt v8flti = { -7.5, 8.5, 9.5, 10.5, -11.5, -12.5, 13.5, 14.5 };\n+    v1dbl v1dbli = { 0.25 };\n+    v2dbl v2dbli = { -1.25, -2.25 };\n+    v4dbl v4dbli = { 3.25, -4.25, 5.25, 6.25 };\n+    v8dbl v8dbli = { 7.25, 8.25, -9.25, -10.25, -11.25, 12.25, 13.25, -14.25 };\n+    v (v2u8i, v4i16i, v8u32i, v16i64i,\n+       v1flti, v2flti, v4flti, v8flti,\n+       v1dbli, v2dbli, v4dbli, v8dbli);\n+  }\n+\n+#if HAVE_INT128\n+  {\n+    v1ldbl v1ldbli = { -0.125 };\n+    v2ldbl v2ldbli = { 1.125, -2.125 };\n+    v4ldbl v4ldbli = { -3.125, -4.125, 5.125, -6.125 };\n+    v8ldbl v8ldbli = { 7.125, -8.125, -9.125, 10.125, 11.125, 12.125, 13.125, 14.125 };\n+    vldbl (v1ldbli, v2ldbli, v4ldbli, v8ldbli);\n+  }\n+#endif\n+\n+  vla (argc);\n+\n+  return 0;\n+}"}, {"sha": "639bf3f329919870e17b8ac4f3895e3dcedf6a9e", "filename": "gcc/testsuite/g++.dg/goacc/firstprivate-mappings-1.C", "status": "added", "additions": 529, "deletions": 0, "changes": 529, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fca03a09ababbe8808cbe402368e375b8834b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ffirstprivate-mappings-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fca03a09ababbe8808cbe402368e375b8834b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ffirstprivate-mappings-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ffirstprivate-mappings-1.C?ref=85fca03a09ababbe8808cbe402368e375b8834b9", "patch": "@@ -0,0 +1,529 @@\n+/* Verify OpenACC 'firstprivate' mappings for C++ reference types.  */\n+\n+/* This file is also sourced from\n+   '../../../../libgomp/testsuite/libgomp.oacc-c++/firstprivate-mappings-1.C'\n+   as an execution test.  */\n+\n+/* See also '../../c-c++-common/goacc/firstprivate-mappings-1.c'.  */\n+\n+/* { dg-additional-options \"-fdump-tree-omplower\" } */\n+\n+/* { dg-additional-options \"-fext-numeric-literals\" { target c++ } } */\n+\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <string.h>\n+\n+\n+#ifdef __SIZEOF_INT128__\n+# define HAVE_INT128 1\n+#else\n+# define HAVE_INT128 0\n+#endif\n+\n+\n+/* The one is only relevant for offloading compilation; will always be enabled\n+   when doing tree scanning.  */\n+#ifdef ACC_DEVICE_TYPE_nvidia\n+/* PR71064.  */\n+# define DO_LONG_DOUBLE 0\n+#else\n+# define DO_LONG_DOUBLE 1\n+#endif\n+\n+\n+/* Simplify scanning for function names in tree dumps.  */\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+\n+/* Inside the following OpenACC 'parallel' constructs' regions, we modify the\n+   'firstprivate' variables, so that we can check that we don't copy these\n+   back.  */\n+\n+\n+static void\n+p (short *&spi)\n+{\n+  short *spo;\n+#pragma acc parallel \\\n+  copyout (spo) \\\n+  firstprivate (spi)\n+  {\n+    spo = ++spi;\n+  }\n+  if (spo != spi + 1)\n+    __builtin_abort ();\n+}\n+\n+\n+static void\n+b (bool &bi)\n+{\n+  bool bo;\n+#pragma acc parallel \\\n+  copyout (bo) \\\n+  firstprivate (bi)\n+  {\n+    bo = (bi = !bi);\n+  }\n+  if (bo != !bi)\n+    __builtin_abort ();\n+}\n+\n+\n+static void\n+i (int8_t &i8i,\n+   uint8_t &u8i,\n+   int16_t &i16i,\n+   uint16_t &u16i,\n+   int32_t &i32i,\n+   uint32_t &u32i,\n+   int64_t &i64i,\n+   uint64_t &u64i)\n+{\n+  int8_t i8o;\n+  uint8_t u8o;\n+  int16_t i16o;\n+  uint16_t u16o;\n+  int32_t i32o;\n+  uint32_t u32o;\n+  int64_t i64o;\n+  uint64_t u64o;\n+#pragma acc parallel \\\n+  copyout (i8o) \\\n+  firstprivate (i8i) \\\n+  copyout (u8o) \\\n+  firstprivate (u8i) \\\n+  copyout (i16o) \\\n+  firstprivate (i16i) \\\n+  copyout (u16o) \\\n+  firstprivate (u16i) \\\n+  copyout (i32o) \\\n+  firstprivate (i32i) \\\n+  copyout (u32o) \\\n+  firstprivate (u32i) \\\n+  copyout (i64o) \\\n+  firstprivate (i64i) \\\n+  copyout (u64o) \\\n+  firstprivate (u64i)\n+  {\n+    i8o = --i8i;\n+    u8o = ++u8i;\n+    i16o = --i16i;\n+    u16o = ++u16i;\n+    i32o = --i32i;\n+    u32o = ++u32i;\n+    i64o = --i64i;\n+    u64o = ++u64i;\n+  }\n+  if (i8o != i8i - 1)\n+    __builtin_abort ();\n+  if (u8o != u8i + 1)\n+    __builtin_abort ();\n+  if (i16o != i16i - 1)\n+    __builtin_abort ();\n+  if (u16o != u16i + 1)\n+    __builtin_abort ();\n+  if (i32o != i32i - 1)\n+    __builtin_abort ();\n+  if (u32o != u32i + 1)\n+    __builtin_abort ();\n+  if (i64o != i64i - 1)\n+    __builtin_abort ();\n+  if (u64o != u64i + 1)\n+    __builtin_abort ();\n+}\n+\n+\n+#if HAVE_INT128\n+static void\n+i128 (__int128 &i128i, unsigned __int128 &u128i)\n+{\n+  __int128 i128o;\n+  unsigned __int128 u128o;\n+# pragma acc parallel \\\n+  copyout (i128o) \\\n+  firstprivate (i128i) \\\n+  copyout(u128o) \\\n+  firstprivate (u128i)\n+  {\n+    i128o = --i128i;\n+    u128o = ++u128i;\n+  }\n+  if (i128o != i128i - 1)\n+    __builtin_abort ();\n+  if (u128o != u128i + 1)\n+    __builtin_abort ();\n+}\n+#endif\n+\n+\n+static void\n+flt_dbl (float &flti, double &dbli)\n+{\n+  float flto;\n+  double dblo;\n+#pragma acc parallel \\\n+  copyout (flto) \\\n+  firstprivate (flti) \\\n+  copyout (dblo) \\\n+  firstprivate (dbli)\n+  {\n+    flto = --flti;\n+    dblo = --dbli;\n+  }\n+  if (flto != flti - 1)\n+    __builtin_abort ();\n+  if (dblo != dbli - 1)\n+    __builtin_abort ();\n+}\n+\n+\n+static void\n+ldbl (long double &ldbli)\n+{\n+#if DO_LONG_DOUBLE\n+  long double ldblo;\n+# pragma acc parallel \\\n+  copyout (ldblo) \\\n+  firstprivate (ldbli)\n+  {\n+    ldblo = --ldbli;\n+  }\n+  if (ldblo != ldbli - 1)\n+    __builtin_abort ();\n+#endif\n+}\n+\n+\n+static void\n+c (_Complex unsigned char &cuci,\n+   _Complex signed short &cssi,\n+   _Complex unsigned int &cuii,\n+   _Complex signed long &csli,\n+   _Complex float &cflti,\n+   _Complex double &cdbli)\n+{\n+  _Complex unsigned char cuco;\n+  _Complex signed short csso;\n+  _Complex unsigned int cuio;\n+  _Complex signed long cslo;\n+  _Complex float cflto;\n+  _Complex double cdblo;\n+#pragma acc parallel \\\n+  copyout (cuco) \\\n+  firstprivate (cuci) \\\n+  copyout (csso) \\\n+  firstprivate (cssi) \\\n+  copyout (cuio) \\\n+  firstprivate (cuii) \\\n+  copyout (cslo) \\\n+  firstprivate (csli) \\\n+  copyout (cflto) \\\n+  firstprivate (cflti) \\\n+  copyout (cdblo) \\\n+  firstprivate (cdbli)\n+  {\n+    cuco = (cuci += (1 + 1j));\n+    csso = (cssi -= (1 + 1j));\n+    cuio = (cuii += (1 + 1j));\n+    cslo = (csli -= (1 + 1j));\n+    cflto = (cflti -= (1 + 1j));\n+    cdblo = (cdbli -= (1 + 1j));\n+  }\n+  if (cuco != cuci + (1 + 1j))\n+    __builtin_abort ();\n+  if (csso != cssi - (1 + 1j))\n+    __builtin_abort ();\n+  if (cuio != cuii + (1 + 1j))\n+    __builtin_abort ();\n+  if (cslo != csli - (1 + 1j))\n+    __builtin_abort ();\n+  if (cflto != cflti - (1 + 1j))\n+    __builtin_abort ();\n+  if (cdblo != cdbli - (1 + 1j))\n+    __builtin_abort ();\n+}\n+\n+\n+static void\n+cldbl (_Complex long double &cldbli)\n+{\n+#if DO_LONG_DOUBLE\n+  _Complex long double cldblo;\n+# pragma acc parallel \\\n+  copyout (cldblo) \\\n+  firstprivate (cldbli)\n+  {\n+    cldblo = (cldbli -= (1 + 1j));\n+  }\n+  if (cldblo != cldbli - (1 + 1j))\n+    __builtin_abort ();\n+#endif\n+}\n+\n+\n+#define V_EQ(v1, v2) \\\n+  ({ \\\n+    __typeof__ (v1) v_d = (v1) != (v2); \\\n+    __typeof__ (v_d) v_0 = { 0 }; \\\n+    memcmp (&v_d, &v_0, sizeof v_d) == 0; \\\n+  })\n+\n+typedef uint8_t __attribute__ ((vector_size (2 * sizeof (uint8_t)))) v2u8;\n+typedef int16_t __attribute__ ((vector_size (4 * sizeof (int16_t)))) v4i16;\n+typedef uint32_t __attribute__ ((vector_size (8 * sizeof (uint32_t)))) v8u32;\n+typedef int64_t __attribute__ ((vector_size (16 * sizeof (int64_t)))) v16i64;\n+typedef float __attribute__ ((vector_size (1 * sizeof (float)))) v1flt;\n+typedef float __attribute__ ((vector_size (2 * sizeof (float)))) v2flt;\n+typedef float __attribute__ ((vector_size (4 * sizeof (float)))) v4flt;\n+typedef float __attribute__ ((vector_size (8 * sizeof (float)))) v8flt;\n+typedef double __attribute__ ((vector_size (1 * sizeof (double)))) v1dbl;\n+typedef double __attribute__ ((vector_size (2 * sizeof (double)))) v2dbl;\n+typedef double __attribute__ ((vector_size (4 * sizeof (double)))) v4dbl;\n+typedef double __attribute__ ((vector_size (8 * sizeof (double)))) v8dbl;\n+\n+static void\n+v (v2u8 &v2u8i, v4i16 &v4i16i, v8u32 &v8u32i, v16i64 &v16i64i,\n+   v1flt &v1flti, v2flt &v2flti, v4flt &v4flti, v8flt &v8flti,\n+   v1dbl &v1dbli, v2dbl &v2dbli, v4dbl &v4dbli, v8dbl &v8dbli)\n+{\n+  v2u8 v2u8o;\n+  v4i16 v4i16o;\n+  v8u32 v8u32o;\n+  v16i64 v16i64o;\n+  v1flt v1flto;\n+  v2flt v2flto;\n+  v4flt v4flto;\n+  v8flt v8flto;\n+  v1dbl v1dblo;\n+  v2dbl v2dblo;\n+  v4dbl v4dblo;\n+  v8dbl v8dblo;\n+#pragma acc parallel \\\n+  copyout (v2u8o) \\\n+  firstprivate (v2u8i) \\\n+  copyout (v4i16o) \\\n+  firstprivate (v4i16i) \\\n+  copyout (v8u32o) \\\n+  firstprivate (v8u32i) \\\n+  copyout (v16i64o) \\\n+  firstprivate (v16i64i) \\\n+  copyout (v1flto) \\\n+  firstprivate (v1flti) \\\n+  copyout (v2flto) \\\n+  firstprivate (v2flti) \\\n+  copyout (v4flto) \\\n+  firstprivate (v4flti) \\\n+  copyout (v8flto) \\\n+  firstprivate (v8flti) \\\n+  copyout (v1dblo) \\\n+  firstprivate (v1dbli) \\\n+  copyout (v2dblo) \\\n+  firstprivate (v2dbli) \\\n+  copyout (v4dblo) \\\n+  firstprivate (v4dbli) \\\n+  copyout (v8dblo) \\\n+  firstprivate (v8dbli)\n+  {\n+    v2u8o = ++v2u8i;\n+    v4i16o = --v4i16i;\n+    v8u32o = ++v8u32i;\n+    v16i64o = --v16i64i;\n+    v1flto = --v1flti;\n+    v2flto = --v2flti;\n+    v4flto = --v4flti;\n+    v8flto = --v8flti;\n+    v1dblo = --v1dbli;\n+    v2dblo = --v2dbli;\n+    v4dblo = --v4dbli;\n+    v8dblo = --v8dbli;\n+  }\n+  if (!V_EQ (v2u8o, v2u8i + 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v4i16o, v4i16i - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v8u32o, v8u32i + 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v16i64o, v16i64i - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v1flto, v1flti - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v2flto, v2flti - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v4flto, v4flti - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v8flto, v8flti - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v1dblo, v1dbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v2dblo, v2dbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v4dblo, v4dbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v8dblo, v8dbli - 1))\n+    __builtin_abort ();\n+}\n+\n+\n+/* \"error: could not find an integer type of the same size as 'long double'\" */\n+#if HAVE_INT128\n+typedef long double __attribute__ ((vector_size (1 * sizeof (long double)))) v1ldbl;\n+typedef long double __attribute__ ((vector_size (2 * sizeof (long double)))) v2ldbl;\n+typedef long double __attribute__ ((vector_size (4 * sizeof (long double)))) v4ldbl;\n+typedef long double __attribute__ ((vector_size (8 * sizeof (long double)))) v8ldbl;\n+\n+static void\n+vldbl (v1ldbl &v1ldbli, v2ldbl &v2ldbli, v4ldbl &v4ldbli, v8ldbl &v8ldbli)\n+{\n+# if DO_LONG_DOUBLE\n+  v1ldbl v1ldblo;\n+  v2ldbl v2ldblo;\n+  v4ldbl v4ldblo;\n+  v8ldbl v8ldblo;\n+#  pragma acc parallel \\\n+  copyout (v1ldblo) \\\n+  firstprivate (v1ldbli) \\\n+  copyout (v2ldblo) \\\n+  firstprivate (v2ldbli) \\\n+  copyout (v4ldblo) \\\n+  firstprivate (v4ldbli) \\\n+  copyout (v8ldblo) \\\n+  firstprivate (v8ldbli)\n+  {\n+    v1ldblo = --v1ldbli;\n+    v2ldblo = --v2ldbli;\n+    v4ldblo = --v4ldbli;\n+    v8ldblo = --v8ldbli;\n+  }\n+  if (!V_EQ (v1ldblo, v1ldbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v2ldblo, v2ldbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v4ldblo, v4ldbli - 1))\n+    __builtin_abort ();\n+  if (!V_EQ (v8ldblo, v8ldbli - 1))\n+    __builtin_abort ();\n+# endif\n+}\n+#endif\n+\n+\n+static void\n+vla (int &array_li)\n+{\n+  _Complex double array[array_li];\n+  uint32_t array_so;\n+#pragma acc parallel \\\n+  copyout (array_so)\n+  /* The gimplifier has created an implicit 'firstprivate' clause for the array\n+     length.\n+     { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_parallel map\\(from:array_so \\[len: 4\\]\\) firstprivate\\(} omplower } }\n+     (C++ computes an intermediate value, so can't scan for 'firstprivate(array_li)'.)  */\n+  {\n+    array_so = sizeof array;\n+  }\n+  if (array_so != sizeof array)\n+    __builtin_abort ();\n+}\n+\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  {\n+    short s;\n+    short *sp = &s;\n+    p (sp);\n+  }\n+\n+  {\n+    bool bi = true;\n+    b (bi);\n+  }\n+\n+  {\n+    int8_t i8i = -1;\n+    uint8_t u8i = 1;\n+    int16_t i16i = -2;\n+    uint16_t u16i = 2;\n+    int32_t i32i = -3;\n+    uint32_t u32i = 3;\n+    int64_t i64i = -4;\n+    uint64_t u64i = 4;\n+    i (i8i, u8i, i16i, u16i, i32i, u32i, i64i, u64i);\n+  }\n+\n+#if HAVE_INT128\n+  {\n+    __int128 i128i = -8;\n+    unsigned __int128 u128i = 8;\n+    i128 (i128i, u128i);\n+  }\n+#endif\n+\n+  {\n+    float flti = .5;\n+    double dbli = .25;\n+    flt_dbl (flti, dbli);\n+  }\n+\n+  {\n+    long double ldbli = .125;\n+    ldbl (ldbli);\n+  }\n+\n+  {\n+    _Complex unsigned char cuci = 1 + 2j;\n+    _Complex signed short cssi = -2 + (-4j);\n+    _Complex unsigned int cuii = 3 + 6j;\n+    _Complex signed long csli = -4 + (-8j);\n+    _Complex float cflti = .5 + 1j;\n+    _Complex double cdbli = .25 + .5j;\n+    c (cuci, cssi, cuii, csli, cflti, cdbli);\n+  }\n+\n+  {\n+    _Complex long double cldbli = .125 + .25j;\n+    cldbl (cldbli);\n+  }\n+\n+  {\n+    v2u8 v2u8i = {2, 3};\n+    v4i16 v4i16i = { -1, -2, 5, 4 };\n+    v8u32 v8u32i = { 3, 6, 9, 11};\n+    v16i64 v16i64i = { 10, 21, -25, 44, 31, -1, 1, 222, -1, -12, 52, -44, -13, 1, -1, -222};\n+    v1flt v1flti = { -.5 };\n+    v2flt v2flti = { 1.5, -2.5 };\n+    v4flt v4flti = { 3.5, -4.5, -5.5, -6.5 };\n+    v8flt v8flti = { -7.5, 8.5, 9.5, 10.5, -11.5, -12.5, 13.5, 14.5 };\n+    v1dbl v1dbli = { 0.25 };\n+    v2dbl v2dbli = { -1.25, -2.25 };\n+    v4dbl v4dbli = { 3.25, -4.25, 5.25, 6.25 };\n+    v8dbl v8dbli = { 7.25, 8.25, -9.25, -10.25, -11.25, 12.25, 13.25, -14.25 };\n+    v (v2u8i, v4i16i, v8u32i, v16i64i,\n+       v1flti, v2flti, v4flti, v8flti,\n+       v1dbli, v2dbli, v4dbli, v8dbli);\n+  }\n+\n+#if HAVE_INT128\n+  {\n+    v1ldbl v1ldbli = { -0.125 };\n+    v2ldbl v2ldbli = { 1.125, -2.125 };\n+    v4ldbl v4ldbli = { -3.125, -4.125, 5.125, -6.125 };\n+    v8ldbl v8ldbli = { 7.125, -8.125, -9.125, 10.125, 11.125, 12.125, 13.125, 14.125 };\n+    vldbl (v1ldbli, v2ldbli, v4ldbli, v8ldbli);\n+  }\n+#endif\n+\n+  vla (argc);\n+\n+  return 0;\n+}"}, {"sha": "61358ee5dcf35e9ff87568e7d7169418576ca53b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fca03a09ababbe8808cbe402368e375b8834b9/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fca03a09ababbe8808cbe402368e375b8834b9/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=85fca03a09ababbe8808cbe402368e375b8834b9", "patch": "@@ -1,5 +1,9 @@\n 2019-06-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* testsuite/libgomp.oacc-c++/firstprivate-mappings-1.C: New file.\n+\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-mappings-1.c:\n+\tLikewise.\n+\n \t* testsuite/libgomp.fortran/allocatable3.f90: Add missing results\n \tcheck.\n "}, {"sha": "c8dba9e5d1c7b5f1f5774aff523cd6ba30dea8d4", "filename": "libgomp/testsuite/libgomp.oacc-c++/firstprivate-mappings-1.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fca03a09ababbe8808cbe402368e375b8834b9/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ffirstprivate-mappings-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fca03a09ababbe8808cbe402368e375b8834b9/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ffirstprivate-mappings-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ffirstprivate-mappings-1.C?ref=85fca03a09ababbe8808cbe402368e375b8834b9", "patch": "@@ -0,0 +1,3 @@\n+/* Verify OpenACC 'firstprivate' mappings for C++ reference types.  */\n+\n+#include \"../../../gcc/testsuite/g++.dg/goacc/firstprivate-mappings-1.C\""}, {"sha": "4a8b310414cfe965fc0de3bc76b0e99c9b06fd92", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/firstprivate-mappings-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fca03a09ababbe8808cbe402368e375b8834b9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-mappings-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fca03a09ababbe8808cbe402368e375b8834b9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-mappings-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-mappings-1.c?ref=85fca03a09ababbe8808cbe402368e375b8834b9", "patch": "@@ -0,0 +1,6 @@\n+/* Verify OpenACC 'firstprivate' mappings.  */\n+\n+/* { dg-additional-options \"-Wno-psabi\" } as apparently we're doing funny\n+   things with vector arguments.  */\n+\n+#include \"../../../gcc/testsuite/c-c++-common/goacc/firstprivate-mappings-1.c\""}]}