{"sha": "b424402e936e77adde61851164970c5e09335e6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQyNDQwMmU5MzZlNzdhZGRlNjE4NTExNjQ5NzBjNWUwOTMzNWU2Yg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-07T00:05:59Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-07T00:05:59Z"}, "message": "(convert_move): Added code to support new modes QFmode and HFmode.\n\nFrom-SVN: r3133", "tree": {"sha": "12dd823e3e805163faffdaa9f9ff07cc02d129fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12dd823e3e805163faffdaa9f9ff07cc02d129fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b424402e936e77adde61851164970c5e09335e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b424402e936e77adde61851164970c5e09335e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b424402e936e77adde61851164970c5e09335e6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b424402e936e77adde61851164970c5e09335e6b/comments", "author": null, "committer": null, "parents": [{"sha": "cfb0c60bf5937ac00f8032965c6199ab7c92e109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfb0c60bf5937ac00f8032965c6199ab7c92e109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfb0c60bf5937ac00f8032965c6199ab7c92e109"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "04a4d39ded4bf9991d166db9226a710f9ebf8518", "filename": "gcc/expr.c", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b424402e936e77adde61851164970c5e09335e6b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b424402e936e77adde61851164970c5e09335e6b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b424402e936e77adde61851164970c5e09335e6b", "patch": "@@ -461,6 +461,71 @@ convert_move (to, from, unsignedp)\n \n   if (to_real)\n     {\n+#ifdef HAVE_extendqfhf2\n+      if (HAVE_extendqfsf2 && from_mode == QFmode && to_mode == HFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extendqfsf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_extendqfsf2\n+      if (HAVE_extendqfsf2 && from_mode == QFmode && to_mode == SFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extendqfsf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_extendqfdf2\n+      if (HAVE_extendqfdf2 && from_mode == QFmode && to_mode == DFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extendqfdf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_extendqfxf2\n+      if (HAVE_extendqfxf2 && from_mode == QFmode && to_mode == XFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extendqfxf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_extendqftf2\n+      if (HAVE_extendqftf2 && from_mode == QFmode && to_mode == TFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extendqftf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+\n+#ifdef HAVE_extendhfsf2\n+      if (HAVE_extendhfsf2 && from_mode == HFmode && to_mode == SFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extendhfsf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_extendhfdf2\n+      if (HAVE_extendhfdf2 && from_mode == HFmode && to_mode == DFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extendhfdf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_extendhfxf2\n+      if (HAVE_extendhfxf2 && from_mode == HFmode && to_mode == XFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extendhfxf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_extendhftf2\n+      if (HAVE_extendhftf2 && from_mode == HFmode && to_mode == TFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_extendhftf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+\n #ifdef HAVE_extendsfdf2\n       if (HAVE_extendsfdf2 && from_mode == SFmode && to_mode == DFmode)\n \t{\n@@ -496,6 +561,70 @@ convert_move (to, from, unsignedp)\n \t  return;\n \t}\n #endif\n+\n+#ifdef HAVE_trunchfqf2\n+      if (HAVE_trunchfqf2 && from_mode == HFmode && to_mode == QFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_trunchfqf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_truncsfqf2\n+      if (HAVE_truncsfqf2 && from_mode == SFmode && to_mode == QFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncsfqf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_truncdfqf2\n+      if (HAVE_truncdfqf2 && from_mode == DFmode && to_mode == QFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncdfqf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_truncxfqf2\n+      if (HAVE_truncxfqf2 && from_mode == XFmode && to_mode == QFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncxfqf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_trunctfqf2\n+      if (HAVE_trunctfqf2 && from_mode == TFmode && to_mode == QFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_trunctfqf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_truncsfhf2\n+      if (HAVE_truncsfhf2 && from_mode == SFmode && to_mode == HFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncsfhf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_truncdfhf2\n+      if (HAVE_truncdfhf2 && from_mode == DFmode && to_mode == HFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncdfhf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_truncxfhf2\n+      if (HAVE_truncxfhf2 && from_mode == XFmode && to_mode == HFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncxfhf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_trunctfhf2\n+      if (HAVE_trunctfhf2 && from_mode == TFmode && to_mode == HFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_trunctfhf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n #ifdef HAVE_truncdfsf2\n       if (HAVE_truncdfsf2 && from_mode == DFmode && to_mode == SFmode)\n \t{"}]}