{"sha": "c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVmZGY4Y2M1NDRmOTY0N2UyY2YyOGEyZGE0MzFiZmExZmFhY2QxNQ==", "commit": {"author": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-10T14:53:32Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-18T02:11:53Z"}, "message": "The trailing expression is not necessarily without a block", "tree": {"sha": "f67b95885d2f3573acd86e815750e0e1ec92b58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67b95885d2f3573acd86e815750e0e1ec92b58f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/comments", "author": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498758a1c238a539b364ac2c632742a9b64ab4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498758a1c238a539b364ac2c632742a9b64ab4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/498758a1c238a539b364ac2c632742a9b64ab4a5"}], "stats": {"total": 155, "additions": 105, "deletions": 50}, "files": [{"sha": "eb56b657983c35884a7755a7db86a1c790a62cb0", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -2828,7 +2828,7 @@ class BlockExpr : public ExprWithBlock\n   std::vector<Attribute> outer_attrs;\n   std::vector<Attribute> inner_attrs;\n   std::vector<std::unique_ptr<Stmt> > statements;\n-  std::unique_ptr<ExprWithoutBlock> expr;\n+  std::unique_ptr<Expr> expr;\n   Location locus;\n   bool marked_for_strip = false;\n \n@@ -2842,7 +2842,7 @@ class BlockExpr : public ExprWithBlock\n   bool has_tail_expr () const { return expr != nullptr; }\n \n   BlockExpr (std::vector<std::unique_ptr<Stmt> > block_statements,\n-\t     std::unique_ptr<ExprWithoutBlock> block_expr,\n+\t     std::unique_ptr<Expr> block_expr,\n \t     std::vector<Attribute> inner_attribs,\n \t     std::vector<Attribute> outer_attribs, Location locus)\n     : outer_attrs (std::move (outer_attribs)),\n@@ -2859,7 +2859,7 @@ class BlockExpr : public ExprWithBlock\n   {\n     // guard to protect from null pointer dereference\n     if (other.expr != nullptr)\n-      expr = other.expr->clone_expr_without_block ();\n+      expr = other.expr->clone_expr ();\n \n     statements.reserve (other.statements.size ());\n     for (const auto &e : other.statements)\n@@ -2877,7 +2877,7 @@ class BlockExpr : public ExprWithBlock\n \n     // guard to protect from null pointer dereference\n     if (other.expr != nullptr)\n-      expr = other.expr->clone_expr_without_block ();\n+      expr = other.expr->clone_expr ();\n     else\n       expr = nullptr;\n \n@@ -2929,7 +2929,7 @@ class BlockExpr : public ExprWithBlock\n   std::vector<std::unique_ptr<Stmt> > &get_statements () { return statements; }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<ExprWithoutBlock> &get_tail_expr ()\n+  std::unique_ptr<Expr> &get_tail_expr ()\n   {\n     rust_assert (has_tail_expr ());\n     return expr;"}, {"sha": "72946774a1f35167efa596432a03c7f55cdec303", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -269,14 +269,17 @@ class ExprStmtWithoutBlock : public ExprStmt\n class ExprStmtWithBlock : public ExprStmt\n {\n   std::unique_ptr<ExprWithBlock> expr;\n+  bool semicolon_followed;\n \n public:\n   std::string as_string () const override;\n \n   std::vector<LetStmt *> locals;\n \n-  ExprStmtWithBlock (std::unique_ptr<ExprWithBlock> expr, Location locus)\n-    : ExprStmt (locus), expr (std::move (expr))\n+  ExprStmtWithBlock (std::unique_ptr<ExprWithBlock> expr, Location locus,\n+\t\t     bool semicolon_followed)\n+    : ExprStmt (locus), expr (std::move (expr)),\n+      semicolon_followed (semicolon_followed)\n   {}\n \n   // Copy constructor with clone\n@@ -318,6 +321,8 @@ class ExprStmtWithBlock : public ExprStmt\n     return expr;\n   }\n \n+  bool is_semicolon_followed () const { return semicolon_followed; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "d0e0c6662b845116570b24a8d751866bb89c8843", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -416,10 +416,11 @@ HIRCompileBase::compile_function_body (\n       // dead code elimination should remove any bad trailing expressions\n       Bexpression *compiled_expr\n \t= CompileExpr::Compile (function_body->expr.get (), ctx);\n-      rust_assert (compiled_expr != nullptr);\n \n       if (has_return_type)\n \t{\n+\t  rust_assert (compiled_expr != nullptr);\n+\n \t  std::vector<Bexpression *> retstmts;\n \t  retstmts.push_back (compiled_expr);\n \n@@ -428,7 +429,7 @@ HIRCompileBase::compile_function_body (\n \t    function_body->get_final_expr ()->get_locus_slow ());\n \t  ctx->add_statement (ret);\n \t}\n-      else\n+      else if (compiled_expr)\n \t{\n \t  Bstatement *final_stmt\n \t    = ctx->get_backend ()->expression_statement (fndecl, compiled_expr);"}, {"sha": "2d3f59d8cf71b390213650f997831163f2da0ac0", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -59,7 +59,8 @@ class ASTLoweringStmt : public ASTLoweringBase\n     translated\n       = new HIR::ExprStmtWithBlock (mapping,\n \t\t\t\t    std::unique_ptr<HIR::ExprWithBlock> (expr),\n-\t\t\t\t    stmt.get_locus ());\n+\t\t\t\t    stmt.get_locus (),\n+\t\t\t\t    !stmt.is_semicolon_followed ());\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t       stmt.get_locus ());\n     mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);"}, {"sha": "26f36c4d12a38a64319594b4ea1e2a913da547eb", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -2498,7 +2498,7 @@ class BlockExpr : public ExprWithBlock\n   std::vector<Attribute> inner_attrs;\n \n   std::vector<std::unique_ptr<Stmt> > statements;\n-  std::unique_ptr<ExprWithoutBlock> expr; // inlined from Statements\n+  std::unique_ptr<Expr> expr; // inlined from Statements\n \n   bool tail_reachable;\n   Location locus;\n@@ -2515,7 +2515,7 @@ class BlockExpr : public ExprWithBlock\n \n   BlockExpr (Analysis::NodeMapping mappings,\n \t     std::vector<std::unique_ptr<Stmt> > block_statements,\n-\t     std::unique_ptr<ExprWithoutBlock> block_expr, bool tail_reachable,\n+\t     std::unique_ptr<Expr> block_expr, bool tail_reachable,\n \t     std::vector<Attribute> inner_attribs,\n \t     std::vector<Attribute> outer_attribs, Location locus)\n     : ExprWithBlock (std::move (mappings), std::move (outer_attribs)),\n@@ -2531,7 +2531,7 @@ class BlockExpr : public ExprWithBlock\n   {\n     // guard to protect from null pointer dereference\n     if (other.expr != nullptr)\n-      expr = other.expr->clone_expr_without_block ();\n+      expr = other.expr->clone_expr ();\n \n     statements.reserve (other.statements.size ());\n     for (const auto &e : other.statements)\n@@ -2543,7 +2543,7 @@ class BlockExpr : public ExprWithBlock\n   {\n     ExprWithBlock::operator= (other);\n     // statements = other.statements;\n-    expr = other.expr->clone_expr_without_block ();\n+    expr = other.expr->clone_expr ();\n     inner_attrs = other.inner_attrs;\n     locus = other.locus;\n     // outer_attrs = other.outer_attrs;\n@@ -2589,7 +2589,7 @@ class BlockExpr : public ExprWithBlock\n     return statements[statements.size () - 1]->get_locus_slow ();\n   }\n \n-  std::unique_ptr<ExprWithoutBlock> &get_final_expr () { return expr; }\n+  std::unique_ptr<Expr> &get_final_expr () { return expr; }\n \n   std::vector<std::unique_ptr<Stmt> > &get_statements () { return statements; }\n "}, {"sha": "e34fa7e8d99d7ee1002377319a7663e34fbec31e", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -193,13 +193,16 @@ class ExprStmtWithoutBlock : public ExprStmt\n class ExprStmtWithBlock : public ExprStmt\n {\n   std::unique_ptr<ExprWithBlock> expr;\n+  bool must_be_unit;\n \n public:\n   std::string as_string () const override;\n \n   ExprStmtWithBlock (Analysis::NodeMapping mappings,\n-\t\t     std::unique_ptr<ExprWithBlock> expr, Location locus)\n-    : ExprStmt (std::move (mappings), locus), expr (std::move (expr))\n+\t\t     std::unique_ptr<ExprWithBlock> expr, Location locus,\n+\t\t     bool must_be_unit)\n+    : ExprStmt (std::move (mappings), locus), expr (std::move (expr)),\n+      must_be_unit (must_be_unit)\n   {}\n \n   // Copy constructor with clone\n@@ -224,6 +227,8 @@ class ExprStmtWithBlock : public ExprStmt\n \n   ExprWithBlock *get_expr () { return expr.get (); }\n \n+  bool is_unit_check_needed () const override { return must_be_unit; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "9bda63a7ddcb59260f251279f88e6d63474175a1", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -723,6 +723,8 @@ class Stmt\n    * methods. */\n   virtual Location get_locus_slow () const { return Location (); }\n \n+  virtual bool is_unit_check_needed () const { return false; }\n+\n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n \n protected:"}, {"sha": "6d38ace7825c179167c4d4af53de2bb25b541ed9", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -7022,11 +7022,9 @@ Parser<ManagedTokenSource>::parse_expr_stmt (\n     }\n }\n \n-/* Parses a expression statement containing an expression with block.\n- * Disambiguates internally. */\n template <typename ManagedTokenSource>\n-std::unique_ptr<AST::ExprStmtWithBlock>\n-Parser<ManagedTokenSource>::parse_expr_stmt_with_block (\n+std::unique_ptr<AST::ExprWithBlock>\n+Parser<ManagedTokenSource>::parse_expr_with_block (\n   std::vector<AST::Attribute> outer_attrs)\n {\n   std::unique_ptr<AST::ExprWithBlock> expr_parsed = nullptr;\n@@ -7113,9 +7111,23 @@ Parser<ManagedTokenSource>::parse_expr_stmt_with_block (\n       return nullptr;\n     }\n \n+  return expr_parsed;\n+}\n+\n+/* Parses a expression statement containing an expression with block.\n+ * Disambiguates internally. */\n+template <typename ManagedTokenSource>\n+std::unique_ptr<AST::ExprStmtWithBlock>\n+Parser<ManagedTokenSource>::parse_expr_stmt_with_block (\n+  std::vector<AST::Attribute> outer_attrs)\n+{\n+  auto expr_parsed = parse_expr_with_block (std::move (outer_attrs));\n+  auto locus = expr_parsed->get_locus ();\n+\n   // return expr stmt created from expr\n   return std::unique_ptr<AST::ExprStmtWithBlock> (\n-    new AST::ExprStmtWithBlock (std::move (expr_parsed), t->get_locus ()));\n+    new AST::ExprStmtWithBlock (std::move (expr_parsed), locus,\n+\t\t\t\tlexer.peek_token ()->get_id () == SEMICOLON));\n }\n \n /* Parses an expression statement containing an expression without block.\n@@ -7286,7 +7298,7 @@ Parser<ManagedTokenSource>::parse_block_expr (\n \n   // parse statements and expression\n   std::vector<std::unique_ptr<AST::Stmt>> stmts;\n-  std::unique_ptr<AST::ExprWithoutBlock> expr = nullptr;\n+  std::unique_ptr<AST::Expr> expr = nullptr;\n \n   const_TokenPtr t = lexer.peek_token ();\n   while (t->get_id () != RIGHT_CURLY)\n@@ -11438,6 +11450,29 @@ Parser<ManagedTokenSource>::parse_struct_pattern_field_partial (\n     }\n }\n \n+template <typename ManagedTokenSource>\n+ExprOrStmt\n+Parser<ManagedTokenSource>::parse_stmt_or_expr_with_block (\n+  std::vector<AST::Attribute> outer_attrs)\n+{\n+  auto expr = parse_expr_with_block (std::move (outer_attrs));\n+  auto tok = lexer.peek_token ();\n+\n+  // tail expr in a block expr\n+  if (tok->get_id () == RIGHT_CURLY)\n+    return ExprOrStmt (std::move (expr));\n+\n+  // internal block expr must either have semicolons followed, or evaluate to ()\n+  auto locus = expr->get_locus_slow ();\n+  std::unique_ptr<AST::ExprStmtWithBlock> stmt (\n+    new AST::ExprStmtWithBlock (std::move (expr), locus,\n+\t\t\t\ttok->get_id () == SEMICOLON));\n+  if (tok->get_id () == SEMICOLON)\n+    lexer.skip_token ();\n+\n+  return ExprOrStmt (std::move (stmt));\n+}\n+\n /* Parses a statement or expression (depending on whether a trailing semicolon\n  * exists). Useful for block expressions where it cannot be determined through\n  * lookahead whether it is a statement or expression to be parsed. */\n@@ -11508,9 +11543,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t  {\n \t    case LEFT_CURLY: {\n \t      // unsafe block\n-\t      std::unique_ptr<AST::ExprStmtWithBlock> stmt (\n-\t\tparse_expr_stmt_with_block (std::move (outer_attrs)));\n-\t      return ExprOrStmt (std::move (stmt));\n+\t      return parse_stmt_or_expr_with_block (std::move (outer_attrs));\n \t    }\n \t    case TRAIT: {\n \t      // unsafe trait\n@@ -11577,11 +11610,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n     case MATCH_TOK:\n     case LEFT_CURLY:\n       case ASYNC: {\n-\t// all expressions with block, so cannot be final expr without block in\n-\t// function\n-\tstd::unique_ptr<AST::ExprStmtWithBlock> stmt (\n-\t  parse_expr_stmt_with_block (std::move (outer_attrs)));\n-\treturn ExprOrStmt (std::move (stmt));\n+\treturn parse_stmt_or_expr_with_block (std::move (outer_attrs));\n       }\n       case LIFETIME: {\n \t/* FIXME: are there any expressions without blocks that can have\n@@ -11592,9 +11621,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t    && (t2->get_id () == LOOP || t2->get_id () == WHILE\n \t\t|| t2->get_id () == FOR))\n \t  {\n-\t    std::unique_ptr<AST::ExprStmtWithBlock> stmt (\n-\t      parse_expr_stmt_with_block (std::move (outer_attrs)));\n-\t    return ExprOrStmt (std::move (stmt));\n+\t    return parse_stmt_or_expr_with_block (std::move (outer_attrs));\n \t  }\n \telse\n \t  {"}, {"sha": "47f55ea65cb8756a75a76f2470fd56c1d79ae2be", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -27,17 +27,15 @@ namespace Rust {\n  * probably take up the same amount of space. */\n struct ExprOrStmt\n {\n-  std::unique_ptr<AST::ExprWithoutBlock> expr;\n+  std::unique_ptr<AST::Expr> expr;\n   std::unique_ptr<AST::Stmt> stmt;\n \n   /* I was going to resist the urge to make this a real class and make it POD,\n    * but construction in steps is too difficult. So it'll just also have a\n    * constructor. */\n \n   // expression constructor\n-  ExprOrStmt (std::unique_ptr<AST::ExprWithoutBlock> expr)\n-    : expr (std::move (expr))\n-  {}\n+  ExprOrStmt (std::unique_ptr<AST::Expr> expr) : expr (std::move (expr)) {}\n \n   // statement constructor\n   ExprOrStmt (std::unique_ptr<AST::Stmt> stmt) : stmt (std::move (stmt)) {}\n@@ -63,9 +61,7 @@ struct ExprOrStmt\n \n private:\n   // private constructor only used for creating error state expr or stmt objects\n-  ExprOrStmt (AST::ExprWithoutBlock *expr, AST::Stmt *stmt)\n-    : expr (expr), stmt (stmt)\n-  {}\n+  ExprOrStmt (AST::Expr *expr, AST::Stmt *stmt) : expr (expr), stmt (stmt) {}\n \n   // make this work: have a disambiguation specifically for known statements\n   // (i.e. ';' and 'let'). then, have a special \"parse expr or stmt\" function\n@@ -487,6 +483,8 @@ template <typename ManagedTokenSource> class Parser\n     ParseRestrictions restrictions = ParseRestrictions ());\n \n   // Expression-related (non-Pratt parsed)\n+  std::unique_ptr<AST::ExprWithBlock>\n+  parse_expr_with_block (std::vector<AST::Attribute> outer_attrs);\n   std::unique_ptr<AST::ExprWithoutBlock>\n   parse_expr_without_block (std::vector<AST::Attribute> outer_attrs\n \t\t\t    = std::vector<AST::Attribute> ());\n@@ -592,6 +590,8 @@ template <typename ManagedTokenSource> class Parser\n   parse_expr_stmt_without_block (std::vector<AST::Attribute> outer_attrs);\n   ExprOrStmt parse_stmt_or_expr_without_block ();\n   ExprOrStmt\n+  parse_stmt_or_expr_with_block (std::vector<AST::Attribute> outer_attrs);\n+  ExprOrStmt\n   parse_macro_invocation_maybe_semi (std::vector<AST::Attribute> outer_attrs);\n   ExprOrStmt\n   parse_path_based_stmt_or_expr (std::vector<AST::Attribute> outer_attrs);"}, {"sha": "f1503bec99ec05fd2957315bcb1d1689207833f8", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -143,10 +143,10 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n \tdelete block_tyty;\n \tblock_tyty = resolved;\n       }\n-    else if (!resolved->is_unit ())\n+    else if (s->is_unit_check_needed () && !resolved->is_unit ())\n       {\n-\trust_error_at (s->get_locus_slow (), \"expected () got %s\",\n-\t\t       resolved->as_string ().c_str ());\n+\tauto unit = new TyTy::TupleType (s->get_mappings ().get_hirid ());\n+\tresolved = unit->unify (resolved);\n       }\n \n     return true;"}, {"sha": "0564aa1854ba45efe6803a04eb9e36016695357f", "filename": "gcc/testsuite/rust.test/compile/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -14,4 +14,4 @@ fn f() {\n \n fn main() {\n     f();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "973ba80fb8662e01bf365668c4ea9b82c0985ed9", "filename": "gcc/testsuite/rust.test/xfail_compile/implicit_returns_err1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err1.rs?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -1,7 +1,5 @@\n-// { dg-error \"expected .* got .*\" \"\" { target { *-*-* } } 0 }\n-\n fn test(x: i32) -> i32 {\n-    if x > 1 {\n+    if x > 1 { // { dg-error \"expected .... got .<integer>.\" }\n         1\n     } else {\n         2"}, {"sha": "37b1c62414c5d6753f87ed2f281889bdfa570f97", "filename": "gcc/testsuite/rust.test/xfail_compile/implicit_returns_err3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err3.rs?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -1,5 +1,4 @@\n-// { dg-error \"expected .* got .*\" \"\" { target { *-*-* } } 0 }\n-fn test(x: i32) -> i32 {\n+fn test(x: i32) -> i32 { // { dg-error \"expected .i32. got ....\" }\n     if x > 1 {\n         1\n     }"}, {"sha": "8780d0feeac617483e15e8b2e74fee4c5bce4878", "filename": "gcc/testsuite/rust.test/xfail_compile/stmt_with_block_err1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fstmt_with_block_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fstmt_with_block_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fstmt_with_block_err1.rs?ref=c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "patch": "@@ -0,0 +1,17 @@\n+fn test(x: i32) -> i32 {\n+    if x > 1 { // { dg-error \"expected .... got .<integer>.\" }\n+        1\n+    } else {\n+        2\n+    }\n+\n+    { // { dg-error \"expected .... got .<integer>.\" }\n+        3\n+    }\n+\n+    3\n+}\n+\n+fn main() {\n+    let a = test(0);\n+}"}]}