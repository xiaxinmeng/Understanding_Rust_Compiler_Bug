{"sha": "a3cbda1b7caeb74630f09dc7e01bd59f30085f00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNjYmRhMWI3Y2FlYjc0NjMwZjA5ZGM3ZTAxYmQ1OWYzMDA4NWYwMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2017-10-28T16:10:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-10-28T16:10:10Z"}, "message": "re PR c++/70971 (ICE in parameter pack expansion)\n\n2017-10-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/70971\n\t* g++.dg/torture/pr70971.C: New.\n\nFrom-SVN: r254199", "tree": {"sha": "af92d9931192d131027e5cb23ee31d5a9519c836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af92d9931192d131027e5cb23ee31d5a9519c836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3cbda1b7caeb74630f09dc7e01bd59f30085f00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cbda1b7caeb74630f09dc7e01bd59f30085f00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3cbda1b7caeb74630f09dc7e01bd59f30085f00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cbda1b7caeb74630f09dc7e01bd59f30085f00/comments", "author": null, "committer": null, "parents": [{"sha": "5ce15f69d23ff9ccd2a597a6a676de43acf531bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce15f69d23ff9ccd2a597a6a676de43acf531bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce15f69d23ff9ccd2a597a6a676de43acf531bd"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "49693bca887392e765afd1eef9fcb9d4e3c0ba3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cbda1b7caeb74630f09dc7e01bd59f30085f00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cbda1b7caeb74630f09dc7e01bd59f30085f00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3cbda1b7caeb74630f09dc7e01bd59f30085f00", "patch": "@@ -1,3 +1,8 @@\n+2017-10-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/70971\n+\t* g++.dg/torture/pr70971.C: New.\n+\n 2017-10-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/81758"}, {"sha": "23f33aafaba3618af40d6b461c98f304b1c11981", "filename": "gcc/testsuite/g++.dg/torture/pr70971.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cbda1b7caeb74630f09dc7e01bd59f30085f00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70971.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cbda1b7caeb74630f09dc7e01bd59f30085f00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70971.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70971.C?ref=a3cbda1b7caeb74630f09dc7e01bd59f30085f00", "patch": "@@ -0,0 +1,48 @@\n+// { dg-additional-options \"-std=c++14\" }\n+\n+template<typename Signature>\n+class function;\n+\n+template<typename R, typename... Args>\n+class invoker_base\n+{\n+ public:\n+  virtual ~invoker_base() { }\n+};\n+\n+template<typename F, typename R, typename... Args>\n+class functor_invoker : public invoker_base<R, Args...>\n+{\n+ public:\n+  explicit functor_invoker(const F& f) : f(f) { }\n+ private:\n+  F f;\n+};\n+\n+template<typename R, typename... Args>\n+class function<R (Args...)> {\n+ public:\n+  template<typename F>\n+  function(const F& f) : invoker(0) {\n+    invoker = new functor_invoker<F, R, Args...>(f); \n+  }\n+  ~function() {\n+    if (invoker)\n+      delete invoker;\n+  }\n+ private:\n+  invoker_base<R, Args...>* invoker;\n+};\n+\n+template<typename>\n+struct unique_ptr { };\n+\n+struct A {};\n+template <class...> struct typelist {};\n+template <class... Cs> unique_ptr<A> chooseB(typelist<Cs...>);\n+template <class... Cs, class Idx, class... Rest>\n+unique_ptr<A> chooseB(typelist<Cs...> choices, Idx, Rest... rest) {\n+  auto f = [=](auto) { return [=] { return chooseB(choices, rest...); }; };\n+  function<unique_ptr<A>()> fs[]{f(Cs{})...};\n+}\n+main() { chooseB(typelist<double, char>{}, 0, 1, 2); }"}]}