{"sha": "c80654412b57b35620478cb139debe615ddbf8de", "node_id": "C_kwDOANBUbNoAKGM4MDY1NDQxMmI1N2IzNTYyMDQ3OGNiMTM5ZGViZTYxNWRkYmY4ZGU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-11T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-11T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "eee6921087c38886bd353773232ffec326d15bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eee6921087c38886bd353773232ffec326d15bae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c80654412b57b35620478cb139debe615ddbf8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80654412b57b35620478cb139debe615ddbf8de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80654412b57b35620478cb139debe615ddbf8de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80654412b57b35620478cb139debe615ddbf8de/comments", "author": null, "committer": null, "parents": [{"sha": "020255eb52ec215703f4ffc90a3a916c21fb36fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020255eb52ec215703f4ffc90a3a916c21fb36fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/020255eb52ec215703f4ffc90a3a916c21fb36fc"}], "stats": {"total": 466, "additions": 465, "deletions": 1}, "files": [{"sha": "6a91db1cae27664af67eaeedbd3d63417a3f4daa", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,7 @@\n+2023-03-10  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2023-02-16  Martin Liska  <mliska@suse.cz>\n \n \t* MAINTAINERS: I'm stepping down from my positions."}, {"sha": "c9e557ce8330465e74f0c2417f28373fab727294", "filename": "gcc/ChangeLog", "status": "modified", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,179 @@\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107703\n+\t* optabs.cc (expand_fix): For conversions from BFmode to integral,\n+\tuse shifts to convert it to SFmode first and then convert SFmode\n+\tto integral.\n+\n+2023-03-10  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/aarch64/aarch64.md: Add a new define_split\n+\tto help combine.\n+\n+2023-03-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.cc (solve_graph): Immediately\n+\titerate self-cycles.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109008\n+\t* range-op-float.cc (float_widen_lhs_range): If not\n+\t-frounding-math and not IBM double double format, extend lhs\n+\trange just by 0.5ulp rather than 1ulp in each direction.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107998\n+\t* config.gcc (x86_64-*-cygwin*): Don't add i386/t-cygwin-w64 into\n+\t$tmake_file.\n+\t* config/i386/t-cygwin-w64: Remove.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR plugins/108634\n+\t* tree-core.h (tree_code_type, tree_code_length): For C++11 or\n+\tC++14, don't declare as extern const arrays.\n+\t(tree_code_type_tmpl, tree_code_length_tmpl): New types with\n+\tstatic constexpr member arrays for C++11 or C++14.\n+\t* tree.h (TREE_CODE_CLASS): For C++11 or C++14 use\n+\ttree_code_type_tmpl <0>::tree_code_type instead of tree_code_type.\n+\t(TREE_CODE_LENGTH): For C++11 or C++14 use\n+\ttree_code_length_tmpl <0>::tree_code_length instead of\n+\ttree_code_length.\n+\t* tree.cc (tree_code_type, tree_code_length): Remove.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/108464\n+\t* common.opt (fcanon-prefix-map): New option.\n+\t* opts.cc: Include file-prefix-map.h.\n+\t(flag_canon_prefix_map): New variable.\n+\t(common_handle_option): Handle OPT_fcanon_prefix_map.\n+\t(gen_command_line_string): Ignore OPT_fcanon_prefix_map.\n+\t* file-prefix-map.h (flag_canon_prefix_map): Declare.\n+\t* file-prefix-map.cc (struct file_prefix_map): Add canonicalize\n+\tmember.\n+\t(add_prefix_map): Initialize canonicalize member from\n+\tflag_canon_prefix_map, and if true canonicalize it using lrealpath.\n+\t(remap_filename): Revert 2022-11-01 and 2022-11-07 changes,\n+\tuse lrealpath result only for map->canonicalize map entries.\n+\t* lto-opts.cc (lto_write_options): Ignore OPT_fcanon_prefix_map.\n+\t* opts-global.cc (handle_common_deferred_options): Clear\n+\tflag_canon_prefix_map at the start and handle OPT_fcanon_prefix_map.\n+\t* doc/invoke.texi (-fcanon-prefix-map): Document.\n+\t(-ffile-prefix-map, -fdebug-prefix-map, -fprofile-prefix-map): Add\n+\tsee also for -fcanon-prefix-map.\n+\t* doc/cppopts.texi (-fmacro-prefix-map): Likewise.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/108079\n+\t* cgraphunit.cc (check_global_declaration): Don't warn for unused\n+\tvariables which have OPT_Wunused_variable warning suppressed.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109008\n+\t* range-op-float.cc (float_widen_lhs_range): If lb is\n+\tminimum representable finite number or ub is maximum\n+\trepresentable finite number, instead of widening it to\n+\t-inf or inf widen it to negative or positive 0x0.8p+(EMAX+1).\n+\tTemporarily clear flag_finite_math_only when canonicalizing\n+\tthe widened range.\n+\n+2023-03-10  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-builtins.cc (riscv_gimple_fold_builtin): New function.\n+\t* config/riscv/riscv-protos.h (riscv_gimple_fold_builtin): Ditto.\n+\t(gimple_fold_builtin):  Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class read_vl): New class.\n+\t(class vleff): Ditto.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (read_vl): Ditto.\n+\t(vleff): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct read_vl_def): Ditto.\n+\t(struct fault_load_def): Ditto.\n+\t(SHAPE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc\n+\t(rvv_arg_type_info::get_tree_type): Add size_ptr.\n+\t(gimple_folder::gimple_folder): New class.\n+\t(gimple_folder::fold): Ditto.\n+\t(gimple_fold_builtin): New function.\n+\t(get_read_vl_instance): Ditto.\n+\t(get_read_vl_decl): Ditto.\n+\t* config/riscv/riscv-vector-builtins.def (size_ptr): Add size_ptr.\n+\t* config/riscv/riscv-vector-builtins.h (class gimple_folder): New class.\n+\t(get_read_vl_instance): New function.\n+\t(get_read_vl_decl):  Ditto.\n+\t* config/riscv/riscv-vsetvl.cc (fault_first_load_p): Ditto.\n+\t(read_vl_insn_p): Ditto.\n+\t(available_occurrence_p): Ditto.\n+\t(backward_propagate_worthwhile_p): Ditto.\n+\t(gen_vsetvl_pat): Adapt for vleff support.\n+\t(get_forward_read_vl_insn): New function.\n+\t(get_backward_fault_first_load_insn): Ditto.\n+\t(source_equal_p): Adapt for vleff support.\n+\t(first_ratio_invalid_for_second_sew_p): Remove.\n+\t(first_ratio_invalid_for_second_lmul_p): Ditto.\n+\t(first_lmul_less_than_second_lmul_p): Ditto.\n+\t(first_ratio_less_than_second_ratio_p): Ditto.\n+\t(support_relaxed_compatible_p): New function.\n+\t(vector_insn_info::operator>): Remove.\n+\t(vector_insn_info::operator>=): Refine.\n+\t(vector_insn_info::parse_insn): Adapt for vleff support.\n+\t(vector_insn_info::compatible_p): Ditto.\n+\t(vector_insn_info::update_fault_first_load_avl): New function.\n+\t(pass_vsetvl::transfer_after): Adapt for vleff support.\n+\t(pass_vsetvl::demand_fusion): Ditto.\n+\t(pass_vsetvl::cleanup_insns): Ditto.\n+\t* config/riscv/riscv-vsetvl.def (DEF_INCOMPATIBLE_COND): Remove\n+\tredundant condtions.\n+\t* config/riscv/riscv-vsetvl.h (struct demands_cond): New function.\n+\t* config/riscv/riscv.cc (TARGET_GIMPLE_FOLD_BUILTIN): New target hook.\n+\t* config/riscv/riscv.md: Adapt for vleff support.\n+\t* config/riscv/t-riscv: Ditto.\n+\t* config/riscv/vector-iterators.md: New iterator.\n+\t* config/riscv/vector.md (read_vlsi): New pattern.\n+\t(read_vldi_zero_extend): Ditto.\n+\t(@pred_fault_load<mode>): Ditto.\n+\n+2023-03-10  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins.cc\n+\t(function_expander::use_ternop_insn): Use maybe_gen_insn instead.\n+\t(function_expander::use_widen_ternop_insn): Ditto.\n+\t* optabs.cc (maybe_gen_insn): Extend nops handling.\n+\n+2023-03-10  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc: Split indexed load\n+\tpatterns according to RVV ISA.\n+\t* config/riscv/vector-iterators.md: New iterators.\n+\t* config/riscv/vector.md\n+\t(@pred_indexed_<order>load<VNX1_QHSD:mode><VNX1_QHSDI:mode>): Remove.\n+\t(@pred_indexed_<order>load<mode>_same_eew): New pattern.\n+\t(@pred_indexed_<order>load<mode>_x2_greater_eew): Ditto.\n+\t(@pred_indexed_<order>load<mode>_x4_greater_eew): Ditto.\n+\t(@pred_indexed_<order>load<mode>_x8_greater_eew): Ditto.\n+\t(@pred_indexed_<order>load<mode>_x2_smaller_eew): Ditto.\n+\t(@pred_indexed_<order>load<mode>_x4_smaller_eew): Ditto.\n+\t(@pred_indexed_<order>load<mode>_x8_smaller_eew): Ditto.\n+\t(@pred_indexed_<order>load<VNX2_QHSD:mode><VNX2_QHSDI:mode>): Remove.\n+\t(@pred_indexed_<order>load<VNX4_QHSD:mode><VNX4_QHSDI:mode>): Ditto.\n+\t(@pred_indexed_<order>load<VNX8_QHSD:mode><VNX8_QHSDI:mode>): Ditto.\n+\t(@pred_indexed_<order>load<VNX16_QHS:mode><VNX16_QHSI:mode>): Ditto.\n+\t(@pred_indexed_<order>load<VNX32_QH:mode><VNX32_QHI:mode>): Ditto.\n+\t(@pred_indexed_<order>load<VNX64_Q:mode><VNX64_Q:mode>): Ditto.\n+\n+2023-03-10  Michael Collison  <collison@rivosinc.com>\n+\n+\t* tree-vect-loop-manip.cc (vect_do_peeling): Use\n+\tresult of constant_lower_bound instead of vf for the lower\n+\tbound of the epilog loop trip count.\n+\n 2023-03-09  Tamar Christina  <tamar.christina@arm.com>\n \n \t* passes.cc (emergency_dump_function): Finish graph generation."}, {"sha": "1a5dec56378f6281edb9b6994100c345d6786443", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1 +1 @@\n-20230310\n+20230311"}, {"sha": "a253ba2e0a26bcf41f1a8d37e2183e1aa8f942b9", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,51 @@\n+2023-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/109059\n+\t* region-model.cc (region_model::mark_region_as_unknown): Gather a\n+\tset of maybe-live svalues and call on_maybe_live_values with it.\n+\t* store.cc (binding_map::remove_overlapping_bindings): Add new\n+\t\"maybe_live_values\" param; add any removed svalues to it.\n+\t(binding_cluster::clobber_region): Add NULL as new param of\n+\tremove_overlapping_bindings.\n+\t(binding_cluster::mark_region_as_unknown): Add \"maybe_live_values\"\n+\tparam and pass it to remove_overlapping_bindings.\n+\t(binding_cluster::maybe_get_compound_binding): Add NULL for new\n+\tparam of binding_map::remove_overlapping_bindings.\n+\t(binding_cluster::remove_overlapping_bindings): Add\n+\t\"maybe_live_values\" param and pass to\n+\tbinding_map::remove_overlapping_bindings.\n+\t(store::set_value): Capture a set of maybe-live svalues, and call\n+\ton_maybe_live_values with it.\n+\t(store::on_maybe_live_values): New.\n+\t(store::mark_region_as_unknown): Add \"maybe_live_values\" param\n+\tand pass it to binding_cluster::mark_region_as_unknown.\n+\t(store::remove_overlapping_bindings): Pass NULL for new param of\n+\tbinding_cluster::remove_overlapping_bindings.\n+\t* store.h (binding_map::remove_overlapping_bindings): Add\n+\t\"maybe_live_values\" param.\n+\t(binding_cluster::mark_region_as_unknown): Likewise.\n+\t(binding_cluster::remove_overlapping_bindings): Likewise.\n+\t(store::mark_region_as_unknown): Likewise.\n+\t(store::on_maybe_live_values): New decl.\n+\n+2023-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108475\n+\tPR analyzer/109060\n+\t* sm-malloc.cc (deref_before_check::deref_before_check):\n+\tInitialize new field m_deref_expr.  Assert that arg is non-NULL.\n+\t(deref_before_check::emit): Reject cases where the spelling of the\n+\tthing that was dereferenced differs from that of what is checked,\n+\tor if the dereference expression was not found.  Remove code to\n+\thandle NULL m_arg.\n+\t(deref_before_check::describe_state_change): Remove code to handle\n+\tNULL m_arg.\n+\t(deref_before_check::describe_final_event): Likewise.\n+\t(deref_before_check::sufficiently_similar_p): New.\n+\t(deref_before_check::m_deref_expr): New field.\n+\t(malloc_state_machine::maybe_complain_about_deref_before_check):\n+\tDon't warn if the diag_ptr is NULL.\n+\n 2023-03-03  David Malcolm  <dmalcolm@redhat.com>\n \n \t* kf.cc (class kf_sprintf): New."}, {"sha": "f391bf8b0542be95b6a33edf6733599d0d156047", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,10 @@\n+2023-03-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/108060\n+\tPR sanitizer/109050\n+\t* c-gimplify.cc (ubsan_walk_array_refs_r): For a MODIFY_EXPR, instrument\n+\tthe RHS before the LHS.\n+\n 2023-03-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/107465"}, {"sha": "11eca92b08b3a5561e5cb4c4d50430dad7319254", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,9 @@\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/108079\n+\t* c-decl.cc (pop_scope): Suppress OPT_Wunused_variable warning\n+\tafter diagnosing it.\n+\n 2023-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/108894"}, {"sha": "7ed422a28097e3c495dcded2e16d80a3525e39e6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,46 @@\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107558\n+\t* decl.cc (cp_finish_decl): Don't clear TREE_READONLY on\n+\tautomatic non-aggregate variables just because of\n+\t-fmerge-all-constants.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/109039\n+\t* class.cc (end_of_class): For bit-fields, instead of computing\n+\toffset as sum of byte_position (field) and DECL_SIZE_UNIT (field),\n+\tcompute it as sum of bit_position (field) and DECL_SIZE (field)\n+\tdivided by BITS_PER_UNIT rounded up.\n+\n+2023-03-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108972\n+\t* lambda.cc (compare_lambda_template_head): Check more\n+\tfor error_mark_node.\n+\n+2023-03-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108566\n+\t* mangle.cc (anon_aggr_naming_decl): New.\n+\t(write_unqualified_name): Use it.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/108079\n+\t* decl.cc (poplevel): Suppress OPT_Wunused_variable warning\n+\tafter diagnosing it.\n+\n+2023-03-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108099\n+\t* decl.cc (grokdeclarator): Handle non-typedef typedef_decl.\n+\n+2023-03-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108542\n+\t* class.cc (instantiate_type): Strip location wrapper.\n+\n 2023-03-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/108773"}, {"sha": "8ae4b0eb54719b7c141875111541d90915958b28", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,9 @@\n+2023-03-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104332\n+\t* resolve.cc (resolve_symbol): Avoid NULL pointer dereference while\n+\tchecking a symbol with the BIND(C) attribute.\n+\n 2023-03-05  Harald Anlauf  <anlauf@gmx.de>\n \t    Tobias Burnus   <tobias@codesourcery.com>\n "}, {"sha": "574be9d9e67001eba4966f9d00aa993fe572f680", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,107 @@\n+2023-03-10  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* lib/target-supports.exp (check_fork_available): Don't signal\n+\ttrue for CRIS running on a simulator.\n+\n+2023-03-10  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/pr108117.c: Require effective-target scheduling.\n+\n+2023-03-10  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/pr106397.c: Add -w to options.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107703\n+\t* g++.dg/cpp23/ext-floating.h (__STDCPP_BFLOAT16_T__): Don't undefine\n+\tit.\n+\t(std::bfloat16_t): Use decltype (0.0bf16) like libstdc++, rather than\n+\t__bf16.\n+\t* g++.dg/cpp23/ext-floating14.C: New test.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107558\n+\t* g++.dg/gomp/pr107558.C: New test.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/109039\n+\t* g++.dg/abi/no_unique_address7.C: New test.\n+\n+2023-03-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108972\n+\t* g++.dg/cpp2a/concepts-lambda3.C: Run at lower std levels,\n+\tbut expect errors.\n+\n+2023-03-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/108060\n+\tPR sanitizer/109050\n+\t* c-c++-common/ubsan/bounds-17.c: New test.\n+\t* c-c++-common/ubsan/bounds-18.c: New test.\n+\t* c-c++-common/ubsan/bounds-19.c: New test.\n+\t* c-c++-common/ubsan/bounds-20.c: New test.\n+\t* c-c++-common/ubsan/bounds-21.c: New test.\n+\n+2023-03-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104332\n+\t* gfortran.dg/bind_c_usage_34.f90: New test.\n+\n+2023-03-10  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gcc.target/aarch64/rev16_2.c: New test.\n+\t* gcc.target/aarch64/shift_and_operator-1.c: New test.\n+\n+2023-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/109059\n+\t* gcc.dg/analyzer/flex-with-call-summaries.c: Remove xfail.\n+\t* gcc.dg/analyzer/leak-pr109059-1.c: New test.\n+\t* gcc.dg/analyzer/leak-pr109059-2.c: New test.\n+\n+2023-03-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108566\n+\t* g++.dg/abi/anon6.C: New test.\n+\n+2023-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108475\n+\tPR analyzer/109060\n+\t* gcc.dg/analyzer/deref-before-check-pr108475-1.c: New test.\n+\t* gcc.dg/analyzer/deref-before-check-pr108475-haproxy-tcpcheck.c:\n+\tNew test.\n+\t* gcc.dg/analyzer/deref-before-check-pr109060-haproxy-cfgparse.c:\n+\tNew test.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/108079\n+\t* c-c++-common/Wunused-var-18.c: New test.\n+\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109008\n+\t* gcc.dg/pr109008.c: New test.\n+\n+2023-03-10  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/merge_constraint-1.c: New test.\n+\n+2023-03-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108099\n+\t* g++.dg/ext/int128-7.C: New test.\n+\n+2023-03-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108542\n+\t* g++.dg/contracts/contracts-err1.C: New test.\n+\n 2023-03-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/108773"}, {"sha": "adef9e52e9238a8f7c9186d4f9a7015751ceafbc", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,13 @@\n+2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107703\n+\t* soft-fp/floattibf.c: New file.\n+\t* soft-fp/floatuntibf.c: New file.\n+\t* config/i386/libgcc-glibc.ver: Export __float{,un}tibf @ GCC_13.0.0.\n+\t* config/i386/64/t-softfp (softfp_extras): Add floattibf and\n+\tfloatuntibf.\n+\t(CFLAGS-floattibf.c, CFLAGS-floatunstibf.c): Add -msse2.\n+\n 2023-03-08  Kewen Lin  <linkw@linux.ibm.com>\n \n \tPR libgcc/108727"}, {"sha": "116fa36d775952b068ba33e0e6c5b63c91f45584", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,55 @@\n+2023-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR libgomp/90596\n+\t* target.c (gomp_map_vars_internal): Allow for\n+\t'param_kind == GOMP_MAP_VARS_OPENACC | GOMP_MAP_VARS_TARGET'.\n+\t* oacc-parallel.c (GOACC_parallel_keyed): Pass\n+\t'GOMP_MAP_VARS_TARGET' to 'goacc_map_vars'.\n+\t* plugin/plugin-gcn.c (alloc_by_agent, gcn_exec)\n+\t(GOMP_OFFLOAD_openacc_exec, GOMP_OFFLOAD_openacc_async_exec):\n+\tAdjust, simplify.\n+\t(gomp_offload_free): Remove.\n+\t* plugin/plugin-nvptx.c (nvptx_exec, GOMP_OFFLOAD_openacc_exec)\n+\t(GOMP_OFFLOAD_openacc_async_exec): Adjust, simplify.\n+\t(cuda_free_argmem): Remove.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-parallel-1.c:\n+\tAdjust.\n+\n+2023-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* target.c (gomp_copy_host2dev, gomp_map_vars_internal): Allow\n+\tlibgomp 'cbuf' buffering with OpenACC 'async' for 'ephemeral'\n+\tdata.\n+\n+2023-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* target.c (gomp_map_vars_internal): Use 'OFFSET_INLINED' for\n+\t'GOMP_MAP_IF_PRESENT'.\n+\t* plugin/plugin-gcn.c (gcn_exec, GOMP_OFFLOAD_openacc_exec)\n+\t(GOMP_OFFLOAD_openacc_async_exec): Adjust.\n+\t* plugin/plugin-nvptx.c (nvptx_exec, GOMP_OFFLOAD_openacc_exec)\n+\t(GOMP_OFFLOAD_openacc_async_exec): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/no_create-1.c: Add 'async'\n+\ttesting.\n+\t* testsuite/libgomp.oacc-c-c++-common/no_create-2.c: Likewise.\n+\n+2023-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* oacc-async.c (goacc_wait): Remove 'acc_async_test' -> skip\n+\tshortcut.\n+\n+2023-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/data-3.c: Document/verify\n+\tanother aspect of OpenACC 'async' semantics.\n+\n+2023-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/plugin-gcn.c (gcn_exec): Fix 'acc_ev_enqueue_launch_end'\n+\tposition.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-parallel-1.c:\n+\tVerify 'acc_ev_alloc', 'acc_ev_free'.\n+\n 2023-03-09  Hongyu Wang  <hongyu.wang@intel.com>\n \n \tPR libgomp/109062"}, {"sha": "cede87493458f26db3458fd43482c4e8f09f020d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80654412b57b35620478cb139debe615ddbf8de/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80654412b57b35620478cb139debe615ddbf8de/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c80654412b57b35620478cb139debe615ddbf8de", "patch": "@@ -1,3 +1,11 @@\n+2023-03-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/109064\n+\t* python/libstdcxx/v6/xmethods.py (SharedPtrUseCountWorker):\n+\tRemove self-recursion in __init__. Add missing _supports.\n+\t* testsuite/libstdc++-xmethods/shared_ptr.cc: Check use_count()\n+\tand unique().\n+\n 2023-03-09  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges"}]}