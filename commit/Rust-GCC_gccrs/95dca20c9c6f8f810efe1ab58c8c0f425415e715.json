{"sha": "95dca20c9c6f8f810efe1ab58c8c0f425415e715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkY2EyMGM5YzZmOGY4MTBlZmUxYWI1OGM4YzBmNDI1NDE1ZTcxNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-03-09T22:31:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-03-09T22:31:45Z"}, "message": "re PR libstdc++/7744 (streambuf::in_avail() always returns 0 (zero) for cin input stream)\n\n2003-03-09  Paolo Carlini  <pcarlini@unitus.it>\n\t    Nathan Myers  <ncm@cantrip.org>\n\n\tPR libstdc++/7744\n\t* config/io/basic_file_stdio.h (__basic_file<>::xsgetn, xsputn,\n\tseekoff, seekpos): Add a boolean parameter __stdio.\n\t* config/io/basic_file_stdio.cc (__basic_file<>::xsgetn, xsputn,\n\tseekoff, seekpos): If __stdio == true, use fread (fwrite, fseek/ftell,\n\tfseek/ftell, respectively), otherwise read (write, lseek, lseek,\n\trespectively).\n\t* include/bits/fstream.tcc (basic_filebuf<>::_M_convert_to_external,\n\t_M_really_overflow, seekoff): Use the boolean parameter in the calls.\n\t* include/std/std_fstream.h (sync): Likewise.\n\t* src/fstream.cc (basic_filebuf<>::_M_underflow_common): Likewise.\n\t* src/ios.cc (ios_base::Init::_S_ios_create(bool)): Revert libstdc++/8399\n\tcommit involving isatty(0).\n\t* acinclude.m4 (GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1): Remove.\n        (GLIBCPP_CHECK_UNISTD_SUPPORT): Remove\n  \t* configure.in: Remove call.\n\t* aclocal.m4: Regenerate.\n       \t* config.h.in: Regenerate.\n        * configure: Regenerate.\n\t* testsuite/27_io/narrow_stream_objects.cc (test11): Add.\n\nCo-Authored-By: Nathan Myers <ncm@cantrip.org>\n\nFrom-SVN: r64051", "tree": {"sha": "34ebb56add00d1c25c0e83fe8ea0ac6e0f46304e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ebb56add00d1c25c0e83fe8ea0ac6e0f46304e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95dca20c9c6f8f810efe1ab58c8c0f425415e715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95dca20c9c6f8f810efe1ab58c8c0f425415e715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95dca20c9c6f8f810efe1ab58c8c0f425415e715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95dca20c9c6f8f810efe1ab58c8c0f425415e715/comments", "author": null, "committer": null, "parents": [{"sha": "f7b3ab8ae7588e4b502c4dd731ad6c472bb842ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b3ab8ae7588e4b502c4dd731ad6c472bb842ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b3ab8ae7588e4b502c4dd731ad6c472bb842ce"}], "stats": {"total": 2903, "additions": 1398, "deletions": 1505}, "files": [{"sha": "4af14b0926dc3ff969baf9e2826d8ae52fa901a2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -1,3 +1,27 @@\n+2003-03-09  Paolo Carlini  <pcarlini@unitus.it>\n+            Nathan Myers  <ncm@cantrip.org>\n+\n+\tPR libstdc++/7744\n+\t* config/io/basic_file_stdio.h (__basic_file<>::xsgetn, xsputn,\n+\tseekoff, seekpos): Add a boolean parameter __stdio.\n+\t* config/io/basic_file_stdio.cc (__basic_file<>::xsgetn, xsputn,\n+\tseekoff, seekpos): If __stdio == true, use fread (fwrite, fseek/ftell,\n+\tfseek/ftell, respectively), otherwise read (write, lseek, lseek,\n+\trespectively).\n+\t* include/bits/fstream.tcc (basic_filebuf<>::_M_convert_to_external,\n+\t_M_really_overflow, seekoff): Use the boolean parameter in the calls.\n+\t* include/std/std_fstream.h (sync): Likewise.\n+\t* src/fstream.cc (basic_filebuf<>::_M_underflow_common): Likewise.\n+\t* src/ios.cc (ios_base::Init::_S_ios_create(bool)): Revert libstdc++/8399\n+\tcommit involving isatty(0).\n+\t* acinclude.m4 (GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1): Remove.\n+\t(GLIBCPP_CHECK_UNISTD_SUPPORT): Remove\n+\t* configure.in: Remove call.\n+\t* aclocal.m4: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* testsuite/27_io/narrow_stream_objects.cc (test11): Add.\n+\n 2003-03-09  Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/9988"}, {"sha": "b30d7aa80a8574a900647194c4c1608d66015368", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -590,34 +590,6 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n   fi\n ])\n \n-dnl\n-dnl Check to see if the (unistd function) argument passed is\n-dnl 1) declared when using the c++ compiler\n-dnl 2) has \"C\" linkage\n-dnl\n-dnl argument 1 is name of function to check\n-dnl\n-dnl ASSUMES argument is a function with ONE parameter\n-dnl\n-dnl GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1\n-AC_DEFUN(GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1, [\n-  AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-      AC_LANG_SAVE\n-      AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <unistd.h>],\n-                     [ $1(0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-      AC_LANG_RESTORE\n-    ])\n-  fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)\n-  fi\n-])\n-\n dnl\n dnl Because the builtins are picky picky picky about the arguments they take,\n dnl do an explict linkage tests here.\n@@ -752,26 +724,6 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n ])\n \n-dnl\n-dnl Check to see what the underlying c library is like\n-dnl These checks need to do two things:\n-dnl 1) make sure the name is declared when using the c++ compiler\n-dnl 2) make sure the name has \"C\" linkage\n-dnl This might seem like overkill but experience has shown that it's not...\n-dnl\n-dnl Define HAVE_ISATTY if \"isatty\" is declared and links\n-dnl\n-dnl GLIBCPP_CHECK_UNISTD_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_UNISTD_SUPPORT, [\n-  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS='-fno-builtins -D_GNU_SOURCE'\n-\n-  GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1(isatty)\n-\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-])\n-\n dnl\n dnl Check to see what the underlying c library or math library is like.\n dnl These checks need to do two things:"}, {"sha": "93c0e40ad3ae970cd3dec0002da1ad85185dc244", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 37, "deletions": 53, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -1,4 +1,4 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n+dnl aclocal.m4 generated automatically by aclocal 1.4-p6\n \n dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n@@ -602,34 +602,6 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n   fi\n ])\n \n-dnl\n-dnl Check to see if the (unistd function) argument passed is\n-dnl 1) declared when using the c++ compiler\n-dnl 2) has \"C\" linkage\n-dnl\n-dnl argument 1 is name of function to check\n-dnl\n-dnl ASSUMES argument is a function with ONE parameter\n-dnl\n-dnl GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1\n-AC_DEFUN(GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1, [\n-  AC_MSG_CHECKING([for $1 declaration])\n-  if test x${glibcpp_cv_func_$1_use+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n-      AC_LANG_SAVE\n-      AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <unistd.h>],\n-                     [ $1(0);],\n-                     [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n-      AC_LANG_RESTORE\n-    ])\n-  fi\n-  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n-  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)\n-  fi\n-])\n-\n dnl\n dnl Because the builtins are picky picky picky about the arguments they take,\n dnl do an explict linkage tests here.\n@@ -764,26 +736,6 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n ])\n \n-dnl\n-dnl Check to see what the underlying c library is like\n-dnl These checks need to do two things:\n-dnl 1) make sure the name is declared when using the c++ compiler\n-dnl 2) make sure the name has \"C\" linkage\n-dnl This might seem like overkill but experience has shown that it's not...\n-dnl\n-dnl Define HAVE_ISATTY if \"isatty\" is declared and links\n-dnl\n-dnl GLIBCPP_CHECK_UNISTD_SUPPORT\n-AC_DEFUN(GLIBCPP_CHECK_UNISTD_SUPPORT, [\n-  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS='-fno-builtins -D_GNU_SOURCE'\n-\n-  GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1(isatty)\n-\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-])\n-\n dnl\n dnl Check to see what the underlying c library or math library is like.\n dnl These checks need to do two things:\n@@ -2313,14 +2265,16 @@ AC_MSG_RESULT($enable_symvers)\n ])\n \n \n-# isc-posix.m4 serial 1 (gettext-0.10.40)\n+# isc-posix.m4 serial 2 (gettext-0.11.2)\n dnl Copyright (C) 1995-2002 Free Software Foundation, Inc.\n dnl This file is free software, distributed under the terms of the GNU\n dnl General Public License.  As a special exception to the GNU General\n dnl Public License, this file may be distributed as part of a program\n dnl that contains a configuration script generated by Autoconf, under\n dnl the same distribution terms as the rest of that program.\n \n+# This file is not needed with autoconf-2.53 and newer.  Remove it in 2005.\n+\n # This test replaces the one in autoconf.\n # Currently this macro should have the same name as the autoconf macro\n # because gettext's gettext.m4 (distributed in the automake package)\n@@ -2381,7 +2335,8 @@ dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n AC_DEFUN([AM_INIT_AUTOMAKE],\n-[AC_REQUIRE([AC_PROG_INSTALL])\n+[AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\n+AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n VERSION=[$2]\n@@ -2397,13 +2352,42 @@ AC_REQUIRE([AM_SANITY_CHECK])\n AC_REQUIRE([AC_ARG_PROGRAM])\n dnl FIXME This is truly gross.\n missing_dir=`cd $ac_aux_dir && pwd`\n-AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)\n+AM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version}, $missing_dir)\n AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)\n-AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)\n+AM_MISSING_PROG(AUTOMAKE, automake-${am__api_version}, $missing_dir)\n AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)\n AM_MISSING_PROG(MAKEINFO, makeinfo, $missing_dir)\n AC_REQUIRE([AC_PROG_MAKE_SET])])\n \n+# Copyright 2002  Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+\n+# AM_AUTOMAKE_VERSION(VERSION)\n+# ----------------------------\n+# Automake X.Y traces this macro to ensure aclocal.m4 has been\n+# generated from the m4 files accompanying Automake X.Y.\n+AC_DEFUN([AM_AUTOMAKE_VERSION],[am__api_version=\"1.4\"])\n+\n+# AM_SET_CURRENT_AUTOMAKE_VERSION\n+# -------------------------------\n+# Call AM_AUTOMAKE_VERSION so it can be traced.\n+# This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n+AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n+\t [AM_AUTOMAKE_VERSION([1.4-p6])])\n+\n #\n # Check to make sure that the build environment is sane.\n #"}, {"sha": "aab9b24410122e039603c4da5fe0da8230d950f2", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -461,9 +461,6 @@\n /* Define if you have the iconv_open function.  */\n #undef HAVE_ICONV_OPEN\n \n-/* Define if you have the isatty function.  */\n-#undef HAVE_ISATTY\n-\n /* Define if you have the isinf function.  */\n #undef HAVE_ISINF\n "}, {"sha": "881792e7f81edade70d6ac13a4483c8818a2074a", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 53, "deletions": 16, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -1,6 +1,6 @@\n // Wrapper of C-language FILE struct -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,6 +33,7 @@\n \n #include <bits/basic_file.h>\n #include <fcntl.h>\n+#include <errno.h>\n \n namespace std \n {\n@@ -191,33 +192,69 @@ namespace std\n     return __retval;\n   }\n  \n+  // In the next four functions we want to use stdio functions only\n+  // when synced with stdio (_M_buf_size == 1): I/O primitives do not\n+  // block until the asked number of bytes are available.\n   streamsize \n-  __basic_file<char>::xsgetn(char* __s, streamsize __n)\n-  { return fread(__s, 1, __n, _M_cfile); }\n-  \n+  __basic_file<char>::xsgetn(char* __s, streamsize __n, bool __stdio)\n+  {\n+    if (__stdio)\n+      return fread(__s, 1, __n, _M_cfile);\n+    else\n+      {\n+\tstreamsize __ret;\n+        do\n+\t  __ret = read(this->fd(), __s, __n);\n+\twhile (__ret == -1L && errno == EINTR);\n+\treturn __ret;\n+      }\n+  }\n+    \n   streamsize \n-  __basic_file<char>::xsputn(const char* __s, streamsize __n)\n-  { return fwrite(__s, 1, __n, _M_cfile); }\n+  __basic_file<char>::xsputn(const char* __s, streamsize __n, bool __stdio)\n+  {\n+    if (__stdio)\n+      return fwrite(__s, 1, __n, _M_cfile);\n+    else\n+      {\n+\tstreamsize __ret;\n+        do\n+\t  __ret = write(this->fd(), __s, __n);\n+\twhile (__ret == -1L && errno == EINTR);\n+\treturn __ret;\n+      }\n+  }\n   \n   streamoff\n   __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way, \n-\t\t\t      ios_base::openmode /*__mode*/)\n+\t\t\t      bool __stdio, ios_base::openmode /*__mode*/)\n   { \n-    if (!fseek(_M_cfile, __off, __way))\n-      return ftell(_M_cfile); \n+    if (!__stdio)\n+      return lseek(this->fd(), __off, __way);\n     else\n-      // Fseek failed.\n-      return -1L;\n+      {\n+\tif (!fseek(_M_cfile, __off, __way))\n+\t  return ftell(_M_cfile); \n+\telse\n+\t  // Fseek failed.\n+\t  return -1L;\n+      }\n   }\n \n   streamoff\n-  __basic_file<char>::seekpos(streamoff __pos, ios_base::openmode /*__mode*/)\n+  __basic_file<char>::seekpos(streamoff __pos, bool __stdio,\n+\t\t\t      ios_base::openmode /*__mode*/)\n   { \n-    if (!fseek(_M_cfile, __pos, ios_base::beg))\n-      return ftell(_M_cfile);\n+    if (!__stdio)\n+      return lseek(this->fd(), __pos, ios_base::beg);\n     else\n-      // Fseek failed.\n-      return -1L;\n+      {\n+\tif (!fseek(_M_cfile, __pos, ios_base::beg))\n+\t  return ftell(_M_cfile);\n+\telse\n+\t  // Fseek failed.\n+\t  return -1L;\n+      }\n   }\n   \n   int "}, {"sha": "b01e4a5db10f669f263ebd0629d3f75f52658af8", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -93,17 +93,17 @@ namespace std\n       ~__basic_file();\n \n       streamsize \n-      xsputn(const char* __s, streamsize __n);\n+      xsputn(const char* __s, streamsize __n, bool __stdio);\n \n       streamsize \n-      xsgetn(char* __s, streamsize __n);\n+      xsgetn(char* __s, streamsize __n, bool __stdio);\n \n       streamoff\n-      seekoff(streamoff __off, ios_base::seekdir __way,\n+      seekoff(streamoff __off, ios_base::seekdir __way, bool __stdio,\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n       streamoff\n-      seekpos(streamoff __pos, \n+      seekpos(streamoff __pos, bool __stdio,\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n       int "}, {"sha": "ef1e6fe40a5acba39130e0315db90544812e5960", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1229, "deletions": 1353, "changes": 2582, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715"}, {"sha": "b4ef860ef2ee645a9f0daaf04c0f179fdde7facc", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -411,7 +411,6 @@ else\n   GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n   GLIBCPP_CHECK_WCHAR_T_SUPPORT\n   GLIBCPP_CHECK_STDLIB_SUPPORT\n-  GLIBCPP_CHECK_UNISTD_SUPPORT\n   AC_LC_MESSAGES\n \n   AC_TRY_COMPILE(["}, {"sha": "f1214f4f426f3eb8bb5ddefc4af41ca6e8240bb5", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -102,7 +102,7 @@ namespace std\n \t      // using underflow.\n  \t      if (__mode & ios_base::in && _M_buf_allocated)\n  \t\tthis->underflow();\n-\t      \n+\n \t      if ((__mode & ios_base::ate)\n \t\t  && this->seekoff(0, ios_base::end, __mode) < 0)\n \t\t{\n@@ -276,10 +276,13 @@ namespace std\n     {\n       const locale __loc = this->getloc();\n       const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n-      \n+      // Sync with stdio.\n+      bool __sync = this->_M_buf_size == 1;\n+\n       if (__cvt.always_noconv() && __ilen)\n \t{\n-\t  __elen += _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);\n+\t  __elen +=\n+\t    _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen, __sync);\n \t  __plen += __ilen;\n \t}\n       else\n@@ -309,7 +312,7 @@ namespace std\n \t  \n \t  if (__blen)\n \t    {\n-\t      __elen += _M_file.xsputn(__buf, __blen);\n+\t      __elen += _M_file.xsputn(__buf, __blen, __sync);\n \t      __plen += __blen;\n \t    }\n \n@@ -331,7 +334,7 @@ namespace std\n \t\t}\n \t      if (__rlen)\n \t\t{\n-\t\t  __elen += _M_file.xsputn(__buf, __rlen);\n+\t\t  __elen += _M_file.xsputn(__buf, __rlen, __sync);\n \t\t  __plen += __rlen;\n \t\t}\n \t    }\n@@ -346,6 +349,8 @@ namespace std\n       int_type __ret = traits_type::eof();\n       bool __testput = this->_M_out_cur && this->_M_out_beg < this->_M_out_lim;\n       bool __testunbuffered = _M_file.is_open() && !this->_M_buf_size_opt;\n+      // Sync with stdio.\n+      bool __sync = this->_M_buf_size == 1;\n \n       if (__testput || __testunbuffered)\n \t{\n@@ -359,7 +364,7 @@ namespace std\n \t  if (_M_filepos && _M_filepos != this->_M_out_beg)\n \t    {\n \t      off_type __off = this->_M_out_beg - _M_filepos;\n-\t      _M_file.seekoff(__off, ios_base::cur);\n+\t      _M_file.seekoff(__off, ios_base::cur, __sync);\n \t    }\n \n \t  // Convert internal buffer to external representation, output.\n@@ -434,7 +439,9 @@ namespace std\n       pos_type __ret =  pos_type(off_type(-1)); \n       bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n       bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n-\n+      // Sync with stdio.\n+      bool __sync = this->_M_buf_size == 1;\n+      \n       // Should probably do has_facet checks here.\n       int __width = use_facet<__codecvt_type>(this->_M_buf_locale).encoding();\n       if (__width < 0)\n@@ -468,15 +475,16 @@ namespace std\n \t\t__computed_off += this->_M_in_cur - _M_filepos;\n \n \t      // Return pos_type(off_type(-1)) in case of failure.\n-\t      __ret = _M_file.seekoff(__computed_off, __way, __mode);\n+\t      __ret = _M_file.seekoff(__computed_off, __way, __sync, __mode);\n \t      _M_set_indeterminate();\n \t    }\n \t  // NB: Need to do this in case _M_file in indeterminate\n \t  // state, ie _M_file._offset == -1\n \t  else\n \t    {\n \t      pos_type __tmp =\n-\t\t_M_file.seekoff(__off, ios_base::cur, __mode);\n+\t\t_M_file.seekoff(__off, ios_base::cur,\n+\t\t\t\t__sync, __mode);\n \t      if (__tmp >= 0)\n \t\t{\n \t\t  // Seek successful."}, {"sha": "a95b0640ff27128d6abaa5b553a44da28d34d90a", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -314,6 +314,8 @@ namespace std\n \tint __ret = 0;\n \tbool __testput = this->_M_out_cur\n \t  && this->_M_out_beg < this->_M_out_lim;\n+\t// Sync with stdio.\n+\tbool __sync = this->_M_buf_size == 1;\n \n \t// Make sure that the internal buffer resyncs its idea of\n \t// the file position with the external file.\n@@ -327,7 +329,7 @@ namespace std\n \t\t\t\t\t traits_type::eof()))\n \t      __ret = -1;\n \t    else if (__off)\n-\t      _M_file.seekoff(__off, ios_base::cur);\n+\t      _M_file.seekoff(__off, ios_base::cur, __sync);\n \t  }\n \telse\n \t  _M_file.sync();"}, {"sha": "9352f47bdd0fb145a941af12948439e47cc4e0aa", "filename": "libstdc++-v3/src/fstream.cc", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -43,6 +43,8 @@ namespace std\n       int_type __ret = traits_type::eof();\n       bool __testin = _M_mode & ios_base::in;\n       bool __testout = _M_mode & ios_base::out;\n+      // Sync with stdio.\n+      bool __sync = _M_buf_size == 1;\n \n       if (__testin)\n \t{\n@@ -71,15 +73,16 @@ namespace std\n \t\t_M_really_overflow();\n \t      else if (_M_in_cur != _M_filepos)\n \t\t_M_file.seekoff(_M_in_cur - _M_filepos,\n-\t\t\t\tios_base::cur, ios_base::in);\n+\t\t\t\tios_base::cur, __sync, ios_base::in);\n \t    }\n \n \t  if (__testinit || __testget)\n \t    {\n \t      streamsize __elen = 0;\n \t      streamsize __ilen = 0;\n+\n \t      __elen = _M_file.xsgetn(reinterpret_cast<char*>(_M_in_beg), \n-\t\t\t\t      _M_buf_size);\n+\t\t\t\t      _M_buf_size, __sync);\n \t      __ilen = __elen;\n \n \t      if (0 < __ilen)\n@@ -90,7 +93,7 @@ namespace std\n \t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n \t\t  if (__bump)\n \t\t    _M_in_cur_move(1);\n-\t\t  else if (_M_buf_size == 1)\n+\t\t  else if (__sync)\n \t\t    {\n \t\t      // If we are synced with stdio, we have to unget the\n \t\t      // character we just read so that the file pointer\n@@ -123,6 +126,8 @@ namespace std\n       int_type __ret = traits_type::eof();\n       bool __testin = _M_mode & ios_base::in;\n       bool __testout = _M_mode & ios_base::out;\n+      // Sync with stdio.\n+      bool __sync = _M_buf_size == 1;\n \n       if (__testin)\n \t{\n@@ -151,7 +156,7 @@ namespace std\n \t\t_M_really_overflow();\n \t      else if (_M_in_cur != _M_filepos)\n \t\t_M_file.seekoff(_M_in_cur - _M_filepos,\n-\t\t\t\tios_base::cur, ios_base::in);\n+\t\t\t\t  ios_base::cur, __sync, ios_base::in);\n \t    }\n \n \t  if (__testinit || __testget)\n@@ -164,13 +169,13 @@ namespace std\n \t      if (__cvt.always_noconv())\n \t\t{\n \t\t  __elen = _M_file.xsgetn(reinterpret_cast<char*>(_M_in_beg), \n-\t\t\t\t\t  _M_buf_size);\n+\t\t\t\t\t  _M_buf_size, __sync);\n \t\t  __ilen = __elen;\n \t\t}\n \t      else\n \t\t{\n \t\t  char* __buf = static_cast<char*>(__builtin_alloca(_M_buf_size));\n-\t\t  __elen = _M_file.xsgetn(__buf, _M_buf_size);\n+\t\t  __elen = _M_file.xsgetn(__buf, _M_buf_size, __sync);\n \n \t\t  const char* __eend;\n \t\t  char_type* __iend;\n@@ -183,7 +188,7 @@ namespace std\n \t\t    {\n \t\t      // Unwind.\n \t\t      __ilen = 0;\n-\t\t      _M_file.seekoff(-__elen, ios_base::cur, ios_base::in);\n+\t\t      _M_file.seekoff(-__elen, ios_base::cur, __sync, ios_base::in);\n \t\t    }\n \t\t}\n \n@@ -195,7 +200,7 @@ namespace std\n \t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n \t\t  if (__bump)\n \t\t    _M_in_cur_move(1);\n-\t\t  else if (_M_buf_size == 1)\n+\t\t  else if (__sync)\n \t\t    {\n \t\t      // If we are synced with stdio, we have to unget the\n \t\t      // character we just read so that the file pointer"}, {"sha": "7f93ce86f5533bb6affcb79fbe8eb46cf3e9b63c", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -38,9 +38,6 @@\n #include <fstream>\n #include <bits/atomicity.h>\n #include <ext/stdio_filebuf.h>\n-#ifdef _GLIBCPP_HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif\n \n namespace __gnu_cxx\n {\n@@ -160,12 +157,7 @@ namespace std\n   ios_base::Init::_S_ios_create(bool __sync)\n   {\n     size_t __out_size = __sync ? 0 : static_cast<size_t>(BUFSIZ);\n-#ifdef _GLIBCPP_HAVE_ISATTY\n-    size_t __in_size =\n-      (__sync || isatty (0)) ? 1 : static_cast<size_t>(BUFSIZ);\n-#else\n-    size_t __in_size = 1;\n-#endif\n+    size_t __in_size = __sync ? 1 : static_cast<size_t>(BUFSIZ);\n \n     // NB: The file globals.cc creates the four standard files\n     // with NULL buffers. At this point, we swap out the dummy NULL"}, {"sha": "45725309ba94549f58ff55837b668945fbf466a2", "filename": "libstdc++-v3/testsuite/27_io/narrow_stream_objects.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dca20c9c6f8f810efe1ab58c8c0f425415e715/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc?ref=95dca20c9c6f8f810efe1ab58c8c0f425415e715", "patch": "@@ -204,6 +204,22 @@ test10()\n   cout << \"_M_gcount: \"<< cin.gcount() << endl;\n }\n \n+// libstdc++/7744\n+void test11()\n+{\n+  std::ios::sync_with_stdio(false);\n+\n+  std::cout\n+    << \"\\n:: f2() ::\\n\"\n+    << \"Type in the characters 'abc' and press <ENTER>: \";\n+  std::cin.peek();\n+ \n+  std::cout\n+    << \"The number of unread characters should be 4 (a, b, c, \\\\n): \"\n+    << std::cin.rdbuf()->in_avail()\n+    << '\\n';\n+}\n+\n int \n main()\n {\n@@ -218,5 +234,6 @@ main()\n   // test08();\n   // test09();\n   // test10();\n+  // test11();\n   return 0;\n }"}]}