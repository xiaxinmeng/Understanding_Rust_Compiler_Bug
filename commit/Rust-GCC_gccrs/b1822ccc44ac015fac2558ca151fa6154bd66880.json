{"sha": "b1822ccc44ac015fac2558ca151fa6154bd66880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE4MjJjY2M0NGFjMDE1ZmFjMjU1OGNhMTUxZmE2MTU0YmQ2Njg4MA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-05-17T20:29:34Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-05-17T20:29:34Z"}, "message": "c-common.c, c-common.h (dollars_in_ident): Remove.\n\n\t* c-common.c, c-common.h (dollars_in_ident): Remove.\n\t* c-opts.c (DOLLARS_IN_IDENTIFIERS): Default to true.\n\t(c_common_init_options, c_common_decode_option): Set dollars_in_ident.\n\t* cpphash.h (warned_dollar): Rename warn_dollars.\n\t* cppinit.c (struct lang_flags, lang_defaults, cpp_set_lang)\n\tPermit dollars regardless of -std=.\n\t(post_options): Set warn_dollars.\n\t* cpplex.c (forms_identifier_p): Use warn_dollars.\n\t* config/darwin.h, config/alpha/vms.h, config/m68hc11/m68hc11.h:\n\tRemove redundant definitions of DOLLARS_IN_IDENTIFIERS.\n\t* doc/cpp.texi, doc/cppopts.texi, doc/invoke.texi, doc/tm.texi:\n\tUpdate documentation.\ntestsuite:\n\t* gcc.dg/dollar.c: New test.\n\nFrom-SVN: r66911", "tree": {"sha": "cc833b5eaad739137055c876d152a481427bc136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc833b5eaad739137055c876d152a481427bc136"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1822ccc44ac015fac2558ca151fa6154bd66880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1822ccc44ac015fac2558ca151fa6154bd66880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1822ccc44ac015fac2558ca151fa6154bd66880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1822ccc44ac015fac2558ca151fa6154bd66880/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a69e127ba7e8e92dee6620fd692672955247b51b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69e127ba7e8e92dee6620fd692672955247b51b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a69e127ba7e8e92dee6620fd692672955247b51b"}], "stats": {"total": 140, "additions": 87, "deletions": 53}, "files": [{"sha": "0bdb1d48f359a6687ff64735dac4e4cf2a6ff988", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -1,3 +1,18 @@\n+2003-05-17  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.c, c-common.h (dollars_in_ident): Remove.\n+\t* c-opts.c (DOLLARS_IN_IDENTIFIERS): Default to true.\n+\t(c_common_init_options, c_common_decode_option): Set dollars_in_ident.\n+\t* cpphash.h (warned_dollar): Rename warn_dollars.\n+\t* cppinit.c (struct lang_flags, lang_defaults, cpp_set_lang)\n+\tPermit dollars regardless of -std=.\n+\t(post_options): Set warn_dollars.\n+\t* cpplex.c (forms_identifier_p): Use warn_dollars.\n+\t* config/darwin.h, config/alpha/vms.h, config/m68hc11/m68hc11.h:\n+\tRemove redundant definitions of DOLLARS_IN_IDENTIFIERS.\n+\t* doc/cpp.texi, doc/cppopts.texi, doc/invoke.texi, doc/tm.texi:\n+\tUpdate documentation.\n+\n 2003-05-17  Andreas Schwab  <schwab@suse.de>\n \n \t* config/m68k/m68k.c (m68k_output_function_prologue): Use"}, {"sha": "2bef8dccf86fb16d20d8e02cd8a8277d5edbe613", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -264,13 +264,6 @@ int flag_no_asm;\n \n int flag_const_strings;\n \n-/* Nonzero means `$' can be in an identifier.  */\n-\n-#ifndef DOLLARS_IN_IDENTIFIERS\n-#define DOLLARS_IN_IDENTIFIERS 1\n-#endif\n-int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n-\n /* Nonzero means to treat bitfields as signed unless they say `unsigned'.  */\n \n int flag_signed_bitfields = 1;"}, {"sha": "f43f6d66d956e4fc1181c809fe4775d76421bddb", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -434,10 +434,6 @@ extern int flag_no_asm;\n \n extern int flag_const_strings;\n \n-/* Nonzero means `$' can be in an identifier.  */\n-\n-extern int dollars_in_ident;\n-\n /* Nonzero means to treat bitfields as signed unless they say `unsigned'.  */\n \n extern int flag_signed_bitfields;"}, {"sha": "e2722b37f743aeeb5f900d82903b8f09154fec03", "filename": "gcc/c-opts.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -36,6 +36,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"c-incpath.h\"\n #include \"debug.h\"\t\t/* For debug_hooks.  */\n \n+#ifndef DOLLARS_IN_IDENTIFIERS\n+# define DOLLARS_IN_IDENTIFIERS true\n+#endif\n+\n #ifndef TARGET_SYSTEM_ROOT\n # define TARGET_SYSTEM_ROOT NULL\n #endif\n@@ -590,6 +594,7 @@ c_common_init_options (lang)\n   parse_in = cpp_create_reader (lang == clk_c ? CLK_GNUC89 : CLK_GNUCXX,\n \t\t\t\tident_hash);\n   cpp_opts = cpp_get_options (parse_in);\n+  cpp_opts->dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n   if (flag_objc)\n     cpp_opts->objc = 1;\n \n@@ -1157,7 +1162,7 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_fdollars_in_identifiers:\n-      dollars_in_ident = on;\n+      cpp_opts->dollars_in_ident = on;\n       break;\n \n     case OPT_fdump:"}, {"sha": "ab758335c76e33b703d91a2aae509ee755e5ef1a", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -41,9 +41,6 @@ Boston, MA 02111-1307, USA.  */\n \t  builtin_define (\"__IEEE_FLOAT\");\t\\\n     } while (0)\n \n-/* By default, allow $ to be part of an identifier.  */\n-#define DOLLARS_IN_IDENTIFIERS 2\n-\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_FP|MASK_FPREGS|MASK_GAS)\n #undef TARGET_ABI_OPEN_VMS"}, {"sha": "d3f09da1351c2d0a663cb62118b2012d442adfb4", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -287,9 +287,6 @@ Boston, MA 02111-1307, USA.  */\n    to put anything in ENDFILE_SPEC.  */\n /* #define ENDFILE_SPEC \"\" */\n \n-#undef\tDOLLARS_IN_IDENTIFIERS\n-#define DOLLARS_IN_IDENTIFIERS 2\n-\n /* We use Dbx symbol format.  */\n \n #define DBX_DEBUGGING_INFO 1"}, {"sha": "d2c70906ce6446caf7b827bc2b941258286ca56f", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -1706,9 +1706,6 @@ do {                                                                    \\\n    purposes) so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE\t\tQImode\n \n-/* Allow $ in identifiers */\n-#define DOLLARS_IN_IDENTIFIERS\t1\n-\n extern int debug_m6811;\n extern int z_replacement_completed;\n extern int current_function_interrupt;"}, {"sha": "aa5eec4e9d44018183acfe27d212d0873c9531d2", "filename": "gcc/cpphash.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -378,9 +378,9 @@ struct cpp_reader\n   cpp_token avoid_paste;\n   cpp_token eof;\n \n-  /* True if we have already warned about dollars in identifiers or\n-     numbers for this buffer.  */\n-  bool warned_dollar;\n+  /* True if we should warn about dollars in identifiers or numbers\n+     for this translation unit.  */\n+  bool warn_dollars;\n \n   /* Opaque handle to the dependencies of mkdeps.c.  */\n   struct deps *deps;"}, {"sha": "d6e7ae426d2ec190c45d32e1d7c01ad8709c366d", "filename": "gcc/cppinit.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -73,22 +73,20 @@ struct lang_flags\n   char cplusplus;\n   char extended_numbers;\n   char std;\n-  char dollars_in_ident;\n   char cplusplus_comments;\n   char digraphs;\n };\n \n-/* ??? Enable $ in identifiers in assembly? */\n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum std dollar c++comm digr  */\n-  /* GNUC89 */  { 0,  0,  1,   0,   1,     1,      1     },\n-  /* GNUC99 */  { 1,  0,  1,   0,   1,     1,      1     },\n-  /* STDC89 */  { 0,  0,  0,   1,   0,     0,      0     },\n-  /* STDC94 */  { 0,  0,  0,   1,   0,     0,      1     },\n-  /* STDC99 */  { 1,  0,  1,   1,   0,     1,      1     },\n-  /* GNUCXX */  { 0,  1,  1,   0,   1,     1,      1     },\n-  /* CXX98  */  { 0,  1,  1,   1,   0,     1,      1     },\n-  /* ASM    */  { 0,  0,  1,   0,   0,     1,      0     }\n+{ /*              c99 c++ xnum std  //   digr  */\n+  /* GNUC89 */  { 0,  0,  1,   0,   1,   1     },\n+  /* GNUC99 */  { 1,  0,  1,   0,   1,   1     },\n+  /* STDC89 */  { 0,  0,  0,   1,   0,   0     },\n+  /* STDC94 */  { 0,  0,  0,   1,   0,   1     },\n+  /* STDC99 */  { 1,  0,  1,   1,   1,   1     },\n+  /* GNUCXX */  { 0,  1,  1,   0,   1,   1     },\n+  /* CXX98  */  { 0,  1,  1,   1,   1,   1     },\n+  /* ASM    */  { 0,  0,  1,   0,   1,   0     }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -106,7 +104,6 @@ cpp_set_lang (pfile, lang)\n   CPP_OPTION (pfile, extended_numbers)\t = l->extended_numbers;\n   CPP_OPTION (pfile, std)\t\t = l->std;\n   CPP_OPTION (pfile, trigraphs)\t\t = l->std;\n-  CPP_OPTION (pfile, dollars_in_ident)\t = l->dollars_in_ident;\n   CPP_OPTION (pfile, cplusplus_comments) = l->cplusplus_comments;\n   CPP_OPTION (pfile, digraphs)\t\t = l->digraphs;\n }\n@@ -153,6 +150,7 @@ cpp_create_reader (lang, table)\n   CPP_OPTION (pfile, warn_endif_labels) = 1;\n   CPP_OPTION (pfile, warn_deprecated) = 1;\n   CPP_OPTION (pfile, warn_long_long) = !CPP_OPTION (pfile, c99);\n+  CPP_OPTION (pfile, dollars_in_ident) = 1;\n \n   /* Default CPP arithmetic to something sensible for the host for the\n      benefit of dumb users like fix-header.  */\n@@ -572,4 +570,11 @@ post_options (pfile)\n       CPP_OPTION (pfile, trigraphs) = 0;\n       CPP_OPTION (pfile, warn_trigraphs) = 0;\n     }\n+\n+  /* C99 permits implementation-defined characters in identifiers.\n+     The documented meaning of -std= is to turn off extensions that\n+     conflict with the specified standard, and since a strictly\n+     conforming program cannot contain a '$', we do not condition\n+     their acceptance on the -std= setting.  */\n+  pfile->warn_dollars = CPP_PEDANTIC (pfile) && !CPP_OPTION (pfile, c99);\n }"}, {"sha": "a79bedd154db28029cf9b0df48b6f33960d0b19f", "filename": "gcc/cpplex.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -402,11 +402,9 @@ forms_identifier_p (pfile, first)\n \treturn false;\n \n       buffer->cur++;\n-      if (CPP_PEDANTIC (pfile)\n-\t  && !pfile->state.skipping\n-\t  && !pfile->warned_dollar)\n+      if (pfile->warn_dollars && !pfile->state.skipping)\n \t{\n-\t  pfile->warned_dollar = true;\n+\t  pfile->warn_dollars = false;\n \t  cpp_error (pfile, DL_PEDWARN, \"'$' in identifier or number\");\n \t}\n "}, {"sha": "d1ade8112ea1f875474e046173852c3d2cb0d3ef", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -3706,6 +3706,24 @@ execution character set.\n Currently, GNU cpp only supports character sets that are strict supersets\n of ASCII, and performs no translation of characters.\n \n+@item Identifier characters.\n+@anchor{Identifier characters}\n+\n+The C and C++ standards allow identifiers to be composed of @samp{_}\n+and the alphanumeric characters.  C++ and C99 also allow universal\n+character names (not implemented in GCC), and C99 further permits\n+implementation-defined characters.\n+\n+GCC allows the @samp{$} character in identifiers as an extension for\n+most targets.  This is true regardless of the @option{std=} switch,\n+since this extension cannot conflict with standards-conforming\n+programs.  Currently the targets that by default do not permit\n+@samp{$} are AVR, IP2K, MMIX, MIPS Irix 3, ARM aout, and PowerPC\n+targets for the AIX and BeOS operating systems.\n+\n+You can override the default with @option{-fdollars-in-identifiers} or\n+@option{fno-dollars-in-identifiers}.  @xref{fdollars-in-identifiers}.\n+\n @item Non-empty sequences of whitespace characters.\n \n In textual output, each whitespace sequence is collapsed to a single"}, {"sha": "70116399dc784b4b5adbc239ec94f5dbd3b5da21", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -468,6 +468,14 @@ is applied to the standard system directories.\n @xref{System Headers}.\n @end ifset\n \n+@item -fdollars-in-identifiers\n+@opindex fdollars-in-identifiers\n+@anchor{fdollars-in-identifiers}\n+Accept @samp{$} in identifiers.\n+@ifset cppmanual\n+  @xref{Identifier characters}.\n+@end ifset\n+\n @item -fpreprocessed\n @opindex fpreprocessed\n Indicate to the preprocessor that the input file has already been"}, {"sha": "2ad66e0159d4adb258eea16b80498f707718cdbe", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -172,7 +172,7 @@ in the following sections.\n @item C++ Language Options\n @xref{C++ Dialect Options,,Options Controlling C++ Dialect}.\n @gccoptlist{-fabi-version=@var{n}  -fno-access-control  -fcheck-new @gol\n--fconserve-space  -fno-const-strings  -fdollars-in-identifiers @gol\n+-fconserve-space  -fno-const-strings @gol\n -fno-elide-constructors @gol\n -fno-enforce-eh-specs  -fexternal-templates @gol\n -falt-external-templates @gol\n@@ -1313,14 +1313,6 @@ This option might be removed in a future release of G++.  For maximum\n portability, you should structure your code so that it works with\n string constants that have type @code{const char *}.\n \n-@item -fdollars-in-identifiers\n-@opindex fdollars-in-identifiers\n-Accept @samp{$} in identifiers.  You can also explicitly prohibit use of\n-@samp{$} with the option @option{-fno-dollars-in-identifiers}.  (GNU C allows\n-@samp{$} by default on most target systems, but there are a few exceptions.)\n-Traditional C allowed the character @samp{$} to form part of\n-identifiers.  However, ISO C and C++ forbid @samp{$} in identifiers.\n-\n @item -fno-elide-constructors\n @opindex fno-elide-constructors\n The C++ standard allows an implementation to omit creating a temporary"}, {"sha": "01b49753dc334c2fea2e5c871c2dc2e7895184aa", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -9064,10 +9064,10 @@ value.\n \n @findex DOLLARS_IN_IDENTIFIERS\n @item DOLLARS_IN_IDENTIFIERS\n-Define this macro to control use of the character @samp{$} in identifier\n-names.  0 means @samp{$} is not allowed by default; 1 means it is allowed.\n-1 is the default; there is no need to define this macro in that case.\n-This macro controls the compiler proper; it does not affect the preprocessor.\n+Define this macro to control use of the character @samp{$} in\n+identifier names for the C family of languages.  0 means @samp{$} is\n+not allowed by default; 1 means it is allowed.  1 is the default;\n+there is no need to define this macro in that case.\n \n @findex NO_DOLLAR_IN_LABEL\n @item NO_DOLLAR_IN_LABEL"}, {"sha": "abbf2ed0fc8a156d2106a14178133ae537e21852", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -1,3 +1,7 @@\n+2003-05-17  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/dollar.c: New test.\n+\n 2003-05-16  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/compat/struct-by-value-4_main.c: Split into multiple tests."}, {"sha": "43407f227edb575c0d7ba42c5c4b14361c52c6d6", "filename": "gcc/testsuite/gcc.dg/dollar.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Ftestsuite%2Fgcc.dg%2Fdollar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1822ccc44ac015fac2558ca151fa6154bd66880/gcc%2Ftestsuite%2Fgcc.dg%2Fdollar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdollar.c?ref=b1822ccc44ac015fac2558ca151fa6154bd66880", "patch": "@@ -0,0 +1,9 @@\n+/* Copyright (C) 2003 Free Software Foundation, Inc.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options -fno-dollars-in-identifiers } */\n+\n+/* Test that -fno-dollars-in-identifiers is honoured.\n+   Neil Booth, 17 May 2003.  */\n+\n+int foobar$;\t/* { dg-error \"stray '\\\\$'\" } */"}]}