{"sha": "860f5e77b7244a305026eb257d575a4856edfbe4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwZjVlNzdiNzI0NGEzMDUwMjZlYjI1N2Q1NzVhNDg1NmVkZmJlNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-10-15T18:42:03Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-15T18:42:03Z"}, "message": "sse.md (UNSPEC_MOVU): Remove.\n\n\t* config/i386/sse.md (UNSPEC_MOVU): Remove.\n\t(UNSPEC_LOADU): New.\n\t(UNSPEC_STOREU): Ditto.\n\t(<sse>_movu<ssemodesuffix><avxsizesuffix>): Split to ...\n\t(<sse>_loadu<ssemodesuffix><avxsizesuffix>): ... this and ...\n\t(<sse>_storeu<ssemodesuffix><avxsizesuffix>) ... this.\n\t(<sse2>_movdqu<avxsizesuffix>): Split to ...\n\t(<sse2>_loaddqu<avxsizesuffix>): ... this and ...\n\t(<sse2>_storedqu<avxsizesuffix>): ... this.\n\t(*sse4_2_pcmpestr_unaligned): Update.\n\t(*sse4_2_pcmpistr_unaligned): Ditto.\n\n\t* config/i386/i386.c (ix86_avx256_split_vector_move_misalign): Use\n\tgen_avx_load{dqu,ups,upd}256 to load from unaligned memory and\n\tgen_avx_store{dqu,ups,upd}256 to store to unaligned memory.\n\t(ix86_expand_vector_move_misalign): Use gen_sse_loadups or\n\tgen_sse2_load{dqu,upd} to load from unaligned memory and\n\tgen_sse_loadups or gen_sse2_store{dqu,upd}256 to store to\n\tunaligned memory.\n\t(struct builtin_description bdesc_spec) <IX86_BUILTIN_LOADUPS>:\n\tUse CODE_FOR_sse_loadups.\n\t<IX86_BUILTIN_LOADUPD>: Use CODE_FOR_sse2_loadupd.\n\t<IX86_BUILTIN_LOADDQU>: Use CODE_FOR_sse2_loaddqu.\n\t<IX86_BUILTIN_STOREUPS>: Use CODE_FOR_sse_storeups.\n\t<IX86_BUILTIN_STOREUPD>: Use CODE_FOR_sse2_storeupd.\n\t<IX86_BUILTIN_STOREDQU>: Use CODE_FOR_sse2_storedqu.\n\t<IX86_BUILTIN_LOADUPS256>: Use CODE_FOR_avx_loadups256.\n\t<IX86_BUILTIN_LOADUPD256>: Use CODE_FOR_avx_loadupd256.\n\t<IX86_BUILTIN_LOADDQU256>: Use CODE_FOR_avx_loaddqu256.\n\t<IX86_BUILTIN_STOREUPS256>: Use CODE_FOR_avx_storeups256.\n\t<IX86_BUILTIN_STOREUPD256>: Use CODE_FOR_avx_storeupd256.\n\t<IX86_BUILTIN_STOREDQU256>: Use CODE_FOR_avx_storedqu256.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/avx256-unaligned-load-1.c: Update asm scan patterns.\n\t* gcc.target/i386/avx256-unaligned-load-2.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-load-3.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-load-4.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-store-1.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-store-2.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-store-3.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-store-4.c: Ditto.\n\nFrom-SVN: r192468", "tree": {"sha": "4c405e48e40b6eb6f9cdca5bf11f51769cb73d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c405e48e40b6eb6f9cdca5bf11f51769cb73d2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/860f5e77b7244a305026eb257d575a4856edfbe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860f5e77b7244a305026eb257d575a4856edfbe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860f5e77b7244a305026eb257d575a4856edfbe4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860f5e77b7244a305026eb257d575a4856edfbe4/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81833173943fec6dec7287b475303e9d22387386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81833173943fec6dec7287b475303e9d22387386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81833173943fec6dec7287b475303e9d22387386"}], "stats": {"total": 248, "additions": 183, "deletions": 65}, "files": [{"sha": "f64629451fb804e632136b90f9015e6baefb4b4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -1,3 +1,38 @@\n+2012-10-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (UNSPEC_MOVU): Remove.\n+\t(UNSPEC_LOADU): New.\n+\t(UNSPEC_STOREU): Ditto.\n+\t(<sse>_movu<ssemodesuffix><avxsizesuffix>): Split to ...\n+\t(<sse>_loadu<ssemodesuffix><avxsizesuffix>): ... this and ...\n+\t(<sse>_storeu<ssemodesuffix><avxsizesuffix>) ... this.\n+\t(<sse2>_movdqu<avxsizesuffix>): Split to ...\n+\t(<sse2>_loaddqu<avxsizesuffix>): ... this and ...\n+\t(<sse2>_storedqu<avxsizesuffix>): ... this.\n+\t(*sse4_2_pcmpestr_unaligned): Update.\n+\t(*sse4_2_pcmpistr_unaligned): Ditto.\n+\n+\t* config/i386/i386.c (ix86_avx256_split_vector_move_misalign): Use\n+\tgen_avx_load{dqu,ups,upd}256 to load from unaligned memory and\n+\tgen_avx_store{dqu,ups,upd}256 to store to unaligned memory.\n+\t(ix86_expand_vector_move_misalign): Use gen_sse_loadups or\n+\tgen_sse2_load{dqu,upd} to load from unaligned memory and\n+\tgen_sse_loadups or gen_sse2_store{dqu,upd}256 to store to\n+\tunaligned memory.\n+\t(struct builtin_description bdesc_spec) <IX86_BUILTIN_LOADUPS>:\n+\tUse CODE_FOR_sse_loadups.\n+\t<IX86_BUILTIN_LOADUPD>: Use CODE_FOR_sse2_loadupd.\n+\t<IX86_BUILTIN_LOADDQU>: Use CODE_FOR_sse2_loaddqu.\n+\t<IX86_BUILTIN_STOREUPS>: Use CODE_FOR_sse_storeups.\n+\t<IX86_BUILTIN_STOREUPD>: Use CODE_FOR_sse2_storeupd.\n+\t<IX86_BUILTIN_STOREDQU>: Use CODE_FOR_sse2_storedqu.\n+\t<IX86_BUILTIN_LOADUPS256>: Use CODE_FOR_avx_loadups256.\n+\t<IX86_BUILTIN_LOADUPD256>: Use CODE_FOR_avx_loadupd256.\n+\t<IX86_BUILTIN_LOADDQU256>: Use CODE_FOR_avx_loaddqu256.\n+\t<IX86_BUILTIN_STOREUPS256>: Use CODE_FOR_avx_storeups256.\n+\t<IX86_BUILTIN_STOREUPD256>: Use CODE_FOR_avx_storeupd256.\n+\t<IX86_BUILTIN_STOREDQU256>: Use CODE_FOR_avx_storedqu256.\n+\n 2012-10-15  Dodji Seketeli  <dodji@redhat.com>\n \n \t* alias.c: Cleanup comments."}, {"sha": "c345c20cd9ecea6b9193bef44e2ef2a4fbe1deea", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 49, "deletions": 35, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -16059,7 +16059,8 @@ ix86_avx256_split_vector_move_misalign (rtx op0, rtx op1)\n {\n   rtx m;\n   rtx (*extract) (rtx, rtx, rtx);\n-  rtx (*move_unaligned) (rtx, rtx);\n+  rtx (*load_unaligned) (rtx, rtx);\n+  rtx (*store_unaligned) (rtx, rtx);\n   enum machine_mode mode;\n \n   switch (GET_MODE (op0))\n@@ -16068,39 +16069,52 @@ ix86_avx256_split_vector_move_misalign (rtx op0, rtx op1)\n       gcc_unreachable ();\n     case V32QImode:\n       extract = gen_avx_vextractf128v32qi;\n-      move_unaligned = gen_avx_movdqu256;\n+      load_unaligned = gen_avx_loaddqu256;\n+      store_unaligned = gen_avx_storedqu256;\n       mode = V16QImode;\n       break;\n     case V8SFmode:\n       extract = gen_avx_vextractf128v8sf;\n-      move_unaligned = gen_avx_movups256;\n+      load_unaligned = gen_avx_loadups256;\n+      store_unaligned = gen_avx_storeups256;\n       mode = V4SFmode;\n       break;\n     case V4DFmode:\n       extract = gen_avx_vextractf128v4df;\n-      move_unaligned = gen_avx_movupd256;\n+      load_unaligned = gen_avx_loadupd256;\n+      store_unaligned = gen_avx_storeupd256;\n       mode = V2DFmode;\n       break;\n     }\n \n-  if (MEM_P (op1) && TARGET_AVX256_SPLIT_UNALIGNED_LOAD)\n+  if (MEM_P (op1))\n     {\n-      rtx r = gen_reg_rtx (mode);\n-      m = adjust_address (op1, mode, 0);\n-      emit_move_insn (r, m);\n-      m = adjust_address (op1, mode, 16);\n-      r = gen_rtx_VEC_CONCAT (GET_MODE (op0), r, m);\n-      emit_move_insn (op0, r);\n+      if (TARGET_AVX256_SPLIT_UNALIGNED_LOAD)\n+\t{\n+\t  rtx r = gen_reg_rtx (mode);\n+\t  m = adjust_address (op1, mode, 0);\n+\t  emit_move_insn (r, m);\n+\t  m = adjust_address (op1, mode, 16);\n+\t  r = gen_rtx_VEC_CONCAT (GET_MODE (op0), r, m);\n+\t  emit_move_insn (op0, r);\n+\t}\n+      else\n+\temit_insn (load_unaligned (op0, op1));\n     }\n-  else if (MEM_P (op0) && TARGET_AVX256_SPLIT_UNALIGNED_STORE)\n+  else if (MEM_P (op0))\n     {\n-      m = adjust_address (op0, mode, 0);\n-      emit_insn (extract (m, op1, const0_rtx));\n-      m = adjust_address (op0, mode, 16);\n-      emit_insn (extract (m, op1, const1_rtx));\n+      if (TARGET_AVX256_SPLIT_UNALIGNED_STORE)\n+\t{\n+\t  m = adjust_address (op0, mode, 0);\n+\t  emit_insn (extract (m, op1, const0_rtx));\n+\t  m = adjust_address (op0, mode, 16);\n+\t  emit_insn (extract (m, op1, const1_rtx));\n+\t}\n+      else\n+\temit_insn (store_unaligned (op0, op1));\n     }\n   else\n-    emit_insn (move_unaligned (op0, op1));\n+    gcc_unreachable ();\n }\n \n /* Implement the movmisalign patterns for SSE.  Non-SSE modes go\n@@ -16195,7 +16209,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t  op0 = gen_lowpart (V16QImode, op0);\n \t  op1 = gen_lowpart (V16QImode, op1);\n \t  /* We will eventually emit movups based on insn attributes.  */\n-\t  emit_insn (gen_sse2_movdqu (op0, op1));\n+\t  emit_insn (gen_sse2_loaddqu (op0, op1));\n \t}\n       else if (TARGET_SSE2 && mode == V2DFmode)\n         {\n@@ -16207,7 +16221,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t      || optimize_function_for_size_p (cfun))\n \t    {\n \t      /* We will eventually emit movups based on insn attributes.  */\n-\t      emit_insn (gen_sse2_movupd (op0, op1));\n+\t      emit_insn (gen_sse2_loadupd (op0, op1));\n \t      return;\n \t    }\n \n@@ -16245,7 +16259,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t    {\n \t      op0 = gen_lowpart (V4SFmode, op0);\n \t      op1 = gen_lowpart (V4SFmode, op1);\n-\t      emit_insn (gen_sse_movups (op0, op1));\n+\t      emit_insn (gen_sse_loadups (op0, op1));\n \t      return;\n             }\n \n@@ -16270,7 +16284,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t  op0 = gen_lowpart (V16QImode, op0);\n \t  op1 = gen_lowpart (V16QImode, op1);\n \t  /* We will eventually emit movups based on insn attributes.  */\n-\t  emit_insn (gen_sse2_movdqu (op0, op1));\n+\t  emit_insn (gen_sse2_storedqu (op0, op1));\n \t}\n       else if (TARGET_SSE2 && mode == V2DFmode)\n \t{\n@@ -16279,7 +16293,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t      || TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\n \t      || optimize_function_for_size_p (cfun))\n \t    /* We will eventually emit movups based on insn attributes.  */\n-\t    emit_insn (gen_sse2_movupd (op0, op1));\n+\t    emit_insn (gen_sse2_storeupd (op0, op1));\n \t  else\n \t    {\n \t      m = adjust_address (op0, DFmode, 0);\n@@ -16299,7 +16313,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t      || optimize_function_for_size_p (cfun))\n \t    {\n \t      op0 = gen_lowpart (V4SFmode, op0);\n-\t      emit_insn (gen_sse_movups (op0, op1));\n+\t      emit_insn (gen_sse_storeups (op0, op1));\n \t    }\n \t  else\n \t    {\n@@ -26765,9 +26779,9 @@ static const struct builtin_description bdesc_special_args[] =\n   { OPTION_MASK_ISA_3DNOW, CODE_FOR_mmx_femms, \"__builtin_ia32_femms\", IX86_BUILTIN_FEMMS, UNKNOWN, (int) VOID_FTYPE_VOID },\n \n   /* SSE */\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movups, \"__builtin_ia32_storeups\", IX86_BUILTIN_STOREUPS, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_storeups, \"__builtin_ia32_storeups\", IX86_BUILTIN_STOREUPS, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movntv4sf, \"__builtin_ia32_movntps\", IX86_BUILTIN_MOVNTPS, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movups, \"__builtin_ia32_loadups\", IX86_BUILTIN_LOADUPS, UNKNOWN, (int) V4SF_FTYPE_PCFLOAT },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_loadups, \"__builtin_ia32_loadups\", IX86_BUILTIN_LOADUPS, UNKNOWN, (int) V4SF_FTYPE_PCFLOAT },\n \n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_loadhps_exp, \"__builtin_ia32_loadhps\", IX86_BUILTIN_LOADHPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_PCV2SF },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_loadlps_exp, \"__builtin_ia32_loadlps\", IX86_BUILTIN_LOADLPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_PCV2SF },\n@@ -26781,14 +26795,14 @@ static const struct builtin_description bdesc_special_args[] =\n   /* SSE2 */\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_lfence, \"__builtin_ia32_lfence\", IX86_BUILTIN_LFENCE, UNKNOWN, (int) VOID_FTYPE_VOID },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_mfence, 0, IX86_BUILTIN_MFENCE, UNKNOWN, (int) VOID_FTYPE_VOID },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movupd, \"__builtin_ia32_storeupd\", IX86_BUILTIN_STOREUPD, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V2DF },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movdqu, \"__builtin_ia32_storedqu\", IX86_BUILTIN_STOREDQU, UNKNOWN, (int) VOID_FTYPE_PCHAR_V16QI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_storeupd, \"__builtin_ia32_storeupd\", IX86_BUILTIN_STOREUPD, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V2DF },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_storedqu, \"__builtin_ia32_storedqu\", IX86_BUILTIN_STOREDQU, UNKNOWN, (int) VOID_FTYPE_PCHAR_V16QI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movntv2df, \"__builtin_ia32_movntpd\", IX86_BUILTIN_MOVNTPD, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movntv2di, \"__builtin_ia32_movntdq\", IX86_BUILTIN_MOVNTDQ, UNKNOWN, (int) VOID_FTYPE_PV2DI_V2DI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movntisi, \"__builtin_ia32_movnti\", IX86_BUILTIN_MOVNTI, UNKNOWN, (int) VOID_FTYPE_PINT_INT },\n   { OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse2_movntidi, \"__builtin_ia32_movnti64\", IX86_BUILTIN_MOVNTI64, UNKNOWN, (int) VOID_FTYPE_PLONGLONG_LONGLONG },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movupd, \"__builtin_ia32_loadupd\", IX86_BUILTIN_LOADUPD, UNKNOWN, (int) V2DF_FTYPE_PCDOUBLE },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movdqu, \"__builtin_ia32_loaddqu\", IX86_BUILTIN_LOADDQU, UNKNOWN, (int) V16QI_FTYPE_PCCHAR },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_loadupd, \"__builtin_ia32_loadupd\", IX86_BUILTIN_LOADUPD, UNKNOWN, (int) V2DF_FTYPE_PCDOUBLE },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_loaddqu, \"__builtin_ia32_loaddqu\", IX86_BUILTIN_LOADDQU, UNKNOWN, (int) V16QI_FTYPE_PCCHAR },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_loadhpd_exp, \"__builtin_ia32_loadhpd\", IX86_BUILTIN_LOADHPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_PCDOUBLE },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_loadlpd_exp, \"__builtin_ia32_loadlpd\", IX86_BUILTIN_LOADLPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_PCDOUBLE },\n@@ -26813,12 +26827,12 @@ static const struct builtin_description bdesc_special_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vbroadcastf128_v4df, \"__builtin_ia32_vbroadcastf128_pd256\", IX86_BUILTIN_VBROADCASTPD256, UNKNOWN, (int) V4DF_FTYPE_PCV2DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vbroadcastf128_v8sf, \"__builtin_ia32_vbroadcastf128_ps256\", IX86_BUILTIN_VBROADCASTPS256, UNKNOWN, (int) V8SF_FTYPE_PCV4SF },\n \n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movupd256, \"__builtin_ia32_loadupd256\", IX86_BUILTIN_LOADUPD256, UNKNOWN, (int) V4DF_FTYPE_PCDOUBLE },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movups256, \"__builtin_ia32_loadups256\", IX86_BUILTIN_LOADUPS256, UNKNOWN, (int) V8SF_FTYPE_PCFLOAT },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movupd256, \"__builtin_ia32_storeupd256\", IX86_BUILTIN_STOREUPD256, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V4DF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movups256, \"__builtin_ia32_storeups256\", IX86_BUILTIN_STOREUPS256, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V8SF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movdqu256, \"__builtin_ia32_loaddqu256\", IX86_BUILTIN_LOADDQU256, UNKNOWN, (int) V32QI_FTYPE_PCCHAR },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movdqu256, \"__builtin_ia32_storedqu256\", IX86_BUILTIN_STOREDQU256, UNKNOWN, (int) VOID_FTYPE_PCHAR_V32QI },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_loadupd256, \"__builtin_ia32_loadupd256\", IX86_BUILTIN_LOADUPD256, UNKNOWN, (int) V4DF_FTYPE_PCDOUBLE },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_loadups256, \"__builtin_ia32_loadups256\", IX86_BUILTIN_LOADUPS256, UNKNOWN, (int) V8SF_FTYPE_PCFLOAT },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_storeupd256, \"__builtin_ia32_storeupd256\", IX86_BUILTIN_STOREUPD256, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V4DF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_storeups256, \"__builtin_ia32_storeups256\", IX86_BUILTIN_STOREUPS256, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V8SF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_loaddqu256, \"__builtin_ia32_loaddqu256\", IX86_BUILTIN_LOADDQU256, UNKNOWN, (int) V32QI_FTYPE_PCCHAR },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_storedqu256, \"__builtin_ia32_storedqu256\", IX86_BUILTIN_STOREDQU256, UNKNOWN, (int) VOID_FTYPE_PCHAR_V32QI },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_lddqu256, \"__builtin_ia32_lddqu256\", IX86_BUILTIN_LDDQU256, UNKNOWN, (int) V32QI_FTYPE_PCCHAR },\n \n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movntv4di, \"__builtin_ia32_movntdq256\", IX86_BUILTIN_MOVNTDQ256, UNKNOWN, (int) VOID_FTYPE_PV4DI_V4DI },"}, {"sha": "299b0d936d7cefd97c140dcdb54d03eca08a05ee", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 86, "deletions": 17, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -21,7 +21,8 @@\n (define_c_enum \"unspec\" [\n   ;; SSE\n   UNSPEC_MOVNT\n-  UNSPEC_MOVU\n+  UNSPEC_LOADU\n+  UNSPEC_STOREU\n \n   ;; SSE3\n   UNSPEC_LDDQU\n@@ -586,12 +587,12 @@\n   DONE;\n })\n \n-(define_insn \"<sse>_movu<ssemodesuffix><avxsizesuffix>\"\n-  [(set (match_operand:VF 0 \"nonimmediate_operand\" \"=x,m\")\n+(define_insn \"<sse>_loadu<ssemodesuffix><avxsizesuffix>\"\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x\")\n \t(unspec:VF\n-\t  [(match_operand:VF 1 \"nonimmediate_operand\" \"xm,x\")]\n-\t  UNSPEC_MOVU))]\n-  \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+\t  [(match_operand:VF 1 \"memory_operand\" \"m\")]\n+\t  UNSPEC_LOADU))]\n+  \"TARGET_SSE\"\n {\n   switch (get_attr_mode (insn))\n     {\n@@ -618,11 +619,79 @@\n \t      ]\n \t      (const_string \"<MODE>\")))])\n \n-(define_insn \"<sse2>_movdqu<avxsizesuffix>\"\n-  [(set (match_operand:VI1 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(unspec:VI1 [(match_operand:VI1 1 \"nonimmediate_operand\" \"xm,x\")]\n-\t\t    UNSPEC_MOVU))]\n-  \"TARGET_SSE2 && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+(define_insn \"<sse>_storeu<ssemodesuffix><avxsizesuffix>\"\n+  [(set (match_operand:VF 0 \"memory_operand\" \"=m\")\n+\t(unspec:VF\n+\t  [(match_operand:VF 1 \"register_operand\" \"x\")]\n+\t  UNSPEC_STOREU))]\n+  \"TARGET_SSE\"\n+{\n+  switch (get_attr_mode (insn))\n+    {\n+    case MODE_V8SF:\n+    case MODE_V4SF:\n+      return \"%vmovups\\t{%1, %0|%0, %1}\";\n+    default:\n+      return \"%vmovu<ssemodesuffix>\\t{%1, %0|%0, %1}\";\n+    }\n+}\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"movu\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set (attr \"mode\")\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"<ssePSmode>\")\n+\t       (and (eq_attr \"alternative\" \"1\")\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t\t (const_string \"<ssePSmode>\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"<MODE>\")\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"<MODE>\")))])\n+\n+(define_insn \"<sse2>_loaddqu<avxsizesuffix>\"\n+  [(set (match_operand:VI1 0 \"register_operand\" \"=x\")\n+\t(unspec:VI1 [(match_operand:VI1 1 \"memory_operand\" \"m\")]\n+\t\t    UNSPEC_LOADU))]\n+  \"TARGET_SSE2\"\n+{\n+  switch (get_attr_mode (insn))\n+    {\n+    case MODE_V8SF:\n+    case MODE_V4SF:\n+      return \"%vmovups\\t{%1, %0|%0, %1}\";\n+    default:\n+      return \"%vmovdqu\\t{%1, %0|%0, %1}\";\n+    }\n+}\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"movu\" \"1\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (match_test \"TARGET_AVX\")\n+     (const_string \"*\")\n+     (const_string \"1\")))\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set (attr \"mode\")\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"<ssePSmode>\")\n+\t       (and (eq_attr \"alternative\" \"1\")\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t\t (const_string \"<ssePSmode>\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"<sseinsnmode>\")\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t         (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"<sseinsnmode>\")))])\n+\n+(define_insn \"<sse2>_storedqu<avxsizesuffix>\"\n+  [(set (match_operand:VI1 0 \"memory_operand\" \"=m\")\n+\t(unspec:VI1 [(match_operand:VI1 1 \"register_operand\" \"x\")]\n+\t\t    UNSPEC_STOREU))]\n+  \"TARGET_SSE2\"\n {\n   switch (get_attr_mode (insn))\n     {\n@@ -9307,23 +9376,23 @@\n \t   (match_operand:SI 3 \"register_operand\" \"a\")\n \t   (unspec:V16QI\n \t     [(match_operand:V16QI 4 \"memory_operand\" \"m\")]\n-\t     UNSPEC_MOVU)\n+\t     UNSPEC_LOADU)\n \t   (match_operand:SI 5 \"register_operand\" \"d\")\n \t   (match_operand:SI 6 \"const_0_to_255_operand\" \"n\")]\n \t  UNSPEC_PCMPESTR))\n    (set (match_operand:V16QI 1 \"register_operand\" \"=Yz\")\n \t(unspec:V16QI\n \t  [(match_dup 2)\n \t   (match_dup 3)\n-\t   (unspec:V16QI [(match_dup 4)] UNSPEC_MOVU)\n+\t   (unspec:V16QI [(match_dup 4)] UNSPEC_LOADU)\n \t   (match_dup 5)\n \t   (match_dup 6)]\n \t  UNSPEC_PCMPESTR))\n    (set (reg:CC FLAGS_REG)\n \t(unspec:CC\n \t  [(match_dup 2)\n \t   (match_dup 3)\n-\t   (unspec:V16QI [(match_dup 4)] UNSPEC_MOVU)\n+\t   (unspec:V16QI [(match_dup 4)] UNSPEC_LOADU)\n \t   (match_dup 5)\n \t   (match_dup 6)]\n \t  UNSPEC_PCMPESTR))]\n@@ -9498,19 +9567,19 @@\n \t  [(match_operand:V16QI 2 \"register_operand\" \"x\")\n \t   (unspec:V16QI\n \t     [(match_operand:V16QI 3 \"memory_operand\" \"m\")]\n-\t     UNSPEC_MOVU)\n+\t     UNSPEC_LOADU)\n \t   (match_operand:SI 4 \"const_0_to_255_operand\" \"n\")]\n \t  UNSPEC_PCMPISTR))\n    (set (match_operand:V16QI 1 \"register_operand\" \"=Yz\")\n \t(unspec:V16QI\n \t  [(match_dup 2)\n-\t   (unspec:V16QI [(match_dup 3)] UNSPEC_MOVU)\n+\t   (unspec:V16QI [(match_dup 3)] UNSPEC_LOADU)\n \t   (match_dup 4)]\n \t  UNSPEC_PCMPISTR))\n    (set (reg:CC FLAGS_REG)\n \t(unspec:CC\n \t  [(match_dup 2)\n-\t   (unspec:V16QI [(match_dup 3)] UNSPEC_MOVU)\n+\t   (unspec:V16QI [(match_dup 3)] UNSPEC_LOADU)\n \t   (match_dup 4)]\n \t  UNSPEC_PCMPISTR))]\n   \"TARGET_SSE4_2"}, {"sha": "e7eef6d7a90966e635c52e1dec147b38c6e58ead", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -14,6 +14,6 @@ avx_test (void)\n     c[i] = a[i] * b[i+3];\n }\n \n-/* { dg-final { scan-assembler-not \"avx_movups256/1\" } } */\n-/* { dg-final { scan-assembler \"sse_movups/1\" } } */\n+/* { dg-final { scan-assembler-not \"avx_loadups256\" } } */\n+/* { dg-final { scan-assembler \"sse_loadups\" } } */\n /* { dg-final { scan-assembler \"vinsertf128\" } } */"}, {"sha": "3f4fbf76479efe98c521ab71e492ef3a409d21ff", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-2.c?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -24,6 +24,6 @@ avx_test (void)\n     }\n }\n \n-/* { dg-final { scan-assembler-not \"avx_movdqu256/1\" } } */\n-/* { dg-final { scan-assembler \"sse2_movdqu/1\" } } */\n+/* { dg-final { scan-assembler-not \"avx_loaddqu256\" } } */\n+/* { dg-final { scan-assembler \"sse2_loaddqu\" } } */\n /* { dg-final { scan-assembler \"vinsert.128\" } } */"}, {"sha": "b0e0e79bdd8486e49e98a8d92bbe1f6fa894beed", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-3.c?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -14,6 +14,6 @@ avx_test (void)\n     c[i] = a[i] * b[i+3];\n }\n \n-/* { dg-final { scan-assembler-not \"avx_movupd256/1\" } } */\n-/* { dg-final { scan-assembler \"sse2_movupd/1\" } } */\n+/* { dg-final { scan-assembler-not \"avx_loadupd256\" } } */\n+/* { dg-final { scan-assembler \"sse2_loadupd\" } } */\n /* { dg-final { scan-assembler \"vinsertf128\" } } */"}, {"sha": "e0eb92b57c93e83c65cb71dc683c29039f05f5cd", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-4.c?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -14,6 +14,6 @@ avx_test (void)\n     b[i] = a[i+3] * 2;\n }\n \n-/* { dg-final { scan-assembler \"avx_movups256/1\" } } */\n-/* { dg-final { scan-assembler-not \"avx_movups/1\" } } */\n+/* { dg-final { scan-assembler \"avx_loadups256\" } } */\n+/* { dg-final { scan-assembler-not \"sse_loadups\" } } */\n /* { dg-final { scan-assembler-not \"vinsertf128\" } } */"}, {"sha": "1a53ba14a0078176e5b4c1e70df6fb26f3bb3ab5", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-1.c?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -17,6 +17,6 @@ avx_test (void)\n     d[i] = c[i] * 20.0;\n }\n \n-/* { dg-final { scan-assembler-not \"avx_movups256/2\" } } */\n+/* { dg-final { scan-assembler-not \"avx_storeups256\" } } */\n /* { dg-final { scan-assembler \"vmovups.*\\\\*movv4sf_internal/3\" } } */\n /* { dg-final { scan-assembler \"vextractf128\" } } */"}, {"sha": "e98d1b684de5226eabad91801fdd6ad246e23391", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -24,6 +24,6 @@ avx_test (void)\n     }\n }\n \n-/* { dg-final { scan-assembler-not \"avx_movdqu256/2\" } } */\n+/* { dg-final { scan-assembler-not \"avx_storedqu256\" } } */\n /* { dg-final { scan-assembler \"vmovdqu.*\\\\*movv16qi_internal/3\" } } */\n /* { dg-final { scan-assembler \"vextract.128\" } } */"}, {"sha": "26c993be7e998a3ee0e35b7a96340cfbbcdc9730", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -17,6 +17,6 @@ avx_test (void)\n     d[i] = c[i] * 20.0;\n }\n \n-/* { dg-final { scan-assembler-not \"avx_movupd256/2\" } } */\n+/* { dg-final { scan-assembler-not \"avx_storeupd256\" } } */\n /* { dg-final { scan-assembler \"vmovupd.*\\\\*movv2df_internal/3\" } } */\n /* { dg-final { scan-assembler \"vextractf128\" } } */"}, {"sha": "6d734faa25e2c4b17ea517142902f5f32ca09185", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860f5e77b7244a305026eb257d575a4856edfbe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-4.c?ref=860f5e77b7244a305026eb257d575a4856edfbe4", "patch": "@@ -14,7 +14,7 @@ avx_test (void)\n     b[i+3] = a[i] * c[i];\n }\n \n-/* { dg-final { scan-assembler \"avx_movups256/2\" } } */\n-/* { dg-final { scan-assembler-not \"avx_movups/2\" } } */\n+/* { dg-final { scan-assembler \"avx_storeups256\" } } */\n+/* { dg-final { scan-assembler-not \"sse_storeups\" } } */\n /* { dg-final { scan-assembler-not \"\\\\*avx_movv4sf_internal/3\" } } */\n /* { dg-final { scan-assembler-not \"vextractf128\" } } */"}]}