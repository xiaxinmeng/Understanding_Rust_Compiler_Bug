{"sha": "66191c20ee094395d51eaa90465bfb4b4d23eb8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxOTFjMjBlZTA5NDM5NWQ1MWVhYTkwNDY1YmZiNGI0ZDIzZWI4Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-07-19T19:28:19Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-07-19T19:28:19Z"}, "message": "pt.c (check_default_tmpl_args): Move test for missing default arguments here, from ...\n\n\t* pt.c (check_default_tmpl_args): Move test for missing default\n\targuments here, from ...\n\t(end_template_parm_list): Here.\n\nFrom-SVN: r28180", "tree": {"sha": "88898b06eab2a6f31b58220dd98bd72252f8ba0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88898b06eab2a6f31b58220dd98bd72252f8ba0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66191c20ee094395d51eaa90465bfb4b4d23eb8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66191c20ee094395d51eaa90465bfb4b4d23eb8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66191c20ee094395d51eaa90465bfb4b4d23eb8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66191c20ee094395d51eaa90465bfb4b4d23eb8c/comments", "author": null, "committer": null, "parents": [{"sha": "5163d20e294343d90b0e8ad7dd6411c9c40ab73f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5163d20e294343d90b0e8ad7dd6411c9c40ab73f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5163d20e294343d90b0e8ad7dd6411c9c40ab73f"}], "stats": {"total": 72, "additions": 47, "deletions": 25}, "files": [{"sha": "f7cce486e6d9ecc8b17a10e390f62d0cf12718aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66191c20ee094395d51eaa90465bfb4b4d23eb8c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66191c20ee094395d51eaa90465bfb4b4d23eb8c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=66191c20ee094395d51eaa90465bfb4b4d23eb8c", "patch": "@@ -1,3 +1,9 @@\n+1999-07-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* pt.c (check_default_tmpl_args): Move test for missing default\n+\targuments here, from ...\n+\t(end_template_parm_list): Here.\n+\n 1999-07-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (lookup_nested_type): Remove."}, {"sha": "bb48cc83203ce6bd2fa8b106e87d2bd1abd1419e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66191c20ee094395d51eaa90465bfb4b4d23eb8c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66191c20ee094395d51eaa90465bfb4b4d23eb8c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=66191c20ee094395d51eaa90465bfb4b4d23eb8c", "patch": "@@ -1857,7 +1857,6 @@ end_template_parm_list (parms)\n   int nparms;\n   tree parm;\n   tree saved_parmlist = make_tree_vec (list_length (parms));\n-  int seen_def_arg_p = 0;\n \n   current_template_parms\n     = tree_cons (build_int_2 (0, processing_template_decl),\n@@ -1866,25 +1865,7 @@ end_template_parm_list (parms)\n   for (parm = parms, nparms = 0; \n        parm; \n        parm = TREE_CHAIN (parm), nparms++)\n-    {\n-      /* [temp.param]\n-\t \n-\t If a template-parameter has a default template-argument, all\n-\t subsequent template-parameters shall have a default\n-\t template-argument supplied.  */\n-      if (TREE_PURPOSE (parm))\n-\tseen_def_arg_p = 1;\n-      else if (seen_def_arg_p)\n-\t{\n-\t  /* Issue the error message.  */\n-\t  cp_error (\"no default argument for `%D'\", TREE_VALUE (parm));\n-\t  /* For better subsequent error-recovery, we indicate that\n-\t     there should have been a default argument.  */\n-\t  TREE_PURPOSE (parm) = error_mark_node;\n-\t}\n-\n-      TREE_VEC_ELT (saved_parmlist, nparms) = parm;\n-    }\n+    TREE_VEC_ELT (saved_parmlist, nparms) = parm;\n \n   --processing_template_parmlist;\n \n@@ -2227,7 +2208,8 @@ check_default_tmpl_args (decl, parms, is_primary, is_partial)\n      int is_partial;\n {\n   const char *msg;\n-  int   last_level_to_check;\n+  int last_level_to_check;\n+  tree parm_level;\n \n   /* [temp.param] \n \n@@ -2251,6 +2233,33 @@ check_default_tmpl_args (decl, parms, is_primary, is_partial)\n        that the class is complete.  */\n     return;\n \n+  /* [temp.param]\n+\t \n+     If a template-parameter has a default template-argument, all\n+     subsequent template-parameters shall have a default\n+     template-argument supplied.  */\n+  for (parm_level = parms; parm_level; parm_level = TREE_CHAIN (parm_level))\n+    {\n+      tree inner_parms = TREE_VALUE (parm_level);\n+      int ntparms = TREE_VEC_LENGTH (inner_parms);\n+      int seen_def_arg_p = 0; \n+      int i;\n+\n+      for (i = 0; i < ntparms; ++i) \n+\t{\n+\t  tree parm = TREE_VEC_ELT (inner_parms, i);\n+\t  if (TREE_PURPOSE (parm))\n+\t    seen_def_arg_p = 1;\n+\t  else if (seen_def_arg_p)\n+\t    {\n+\t      cp_error (\"no default argument for `%D'\", TREE_VALUE (parm));\n+\t      /* For better subsequent error-recovery, we indicate that\n+\t\t there should have been a default argument.  */\n+\t      TREE_PURPOSE (parm) = error_mark_node;\n+\t    }\n+\t}\n+    }\n+\n   if (TREE_CODE (decl) != TYPE_DECL || is_partial || !is_primary)\n     /* For an ordinary class template, default template arguments are\n        allowed at the innermost level, e.g.:\n@@ -2293,11 +2302,13 @@ check_default_tmpl_args (decl, parms, is_primary, is_partial)\n     /* Check everything.  */\n     last_level_to_check = 0;\n \n-  for (; parms && TMPL_PARMS_DEPTH (parms) >= last_level_to_check; \n-       parms = TREE_CHAIN (parms))\n+  for (parm_level = parms; \n+       parm_level && TMPL_PARMS_DEPTH (parm_level) >= last_level_to_check; \n+       parm_level = TREE_CHAIN (parm_level))\n     {\n-      tree inner_parms = TREE_VALUE (parms);\n-      int i, ntparms;\n+      tree inner_parms = TREE_VALUE (parm_level);\n+      int i;\n+      int ntparms;\n \n       ntparms = TREE_VEC_LENGTH (inner_parms);\n       for (i = 0; i < ntparms; ++i) "}, {"sha": "7026b76556736c108021cd5daf8daddcea601f41", "filename": "gcc/testsuite/g++.old-deja/g++.pt/defarg11.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66191c20ee094395d51eaa90465bfb4b4d23eb8c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdefarg11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66191c20ee094395d51eaa90465bfb4b4d23eb8c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdefarg11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdefarg11.C?ref=66191c20ee094395d51eaa90465bfb4b4d23eb8c", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link:\n+// Origin: Jason Merrill <jason@cygnus.com>\n+\n+template <class T, class U = int> struct A;\n+template <class T = int, class U> struct A;"}]}