{"sha": "d4e8505009ddcf460aae028e0302bba71b4d0a44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRlODUwNTAwOWRkY2Y0NjBhYWUwMjhlMDMwMmJiYTcxYjRkMGE0NA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2006-10-05T10:46:41Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2006-10-05T10:46:41Z"}, "message": "bfin.md (subsi3): Lose expander, change previously unnamed pattern into subsi3.\n\n\t* config/bfin/bfin.md (subsi3): Lose expander, change previously\n\tunnamed pattern into subsi3.  Use correct constraints/predicates.\n\t* config/bfin/bfin.h (CONST_OK_FOR_K): Handle \"KN7\".\n\t* config/bfin/predicates.md (reg_or_neg7bit_operand_p): New.\n\nFrom-SVN: r117455", "tree": {"sha": "bc7c6de7412c74ece5803d83d4ecf409c2c1ae1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc7c6de7412c74ece5803d83d4ecf409c2c1ae1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4e8505009ddcf460aae028e0302bba71b4d0a44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e8505009ddcf460aae028e0302bba71b4d0a44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4e8505009ddcf460aae028e0302bba71b4d0a44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e8505009ddcf460aae028e0302bba71b4d0a44/comments", "author": null, "committer": null, "parents": [{"sha": "afd4a54a00e939c45152735c6ad6f334808bc58d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd4a54a00e939c45152735c6ad6f334808bc58d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd4a54a00e939c45152735c6ad6f334808bc58d"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "49a3409001a9a4407fdb06c3a609084d0b03c43f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e8505009ddcf460aae028e0302bba71b4d0a44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e8505009ddcf460aae028e0302bba71b4d0a44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4e8505009ddcf460aae028e0302bba71b4d0a44", "patch": "@@ -1,3 +1,10 @@\n+2006-10-05  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.md (subsi3): Lose expander, change previously\n+\tunnamed pattern into subsi3.  Use correct constraints/predicates.\n+\t* config/bfin/bfin.h (CONST_OK_FOR_K): Handle \"KN7\".\n+\t* config/bfin/predicates.md (reg_or_neg7bit_operand_p): New.\n+\n 2006-10-05  Ira Rosen  <irar@il.ibm.com>\n \n \t* doc/loop.texi: Add data references analysis description."}, {"sha": "6f270ce3c62d46e9043db69aa700ce38b6996d73", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e8505009ddcf460aae028e0302bba71b4d0a44/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e8505009ddcf460aae028e0302bba71b4d0a44/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=d4e8505009ddcf460aae028e0302bba71b4d0a44", "patch": "@@ -1063,6 +1063,9 @@ do {                                              \\\n      : (STR)[1] == 'n'\t\t\t\t\t\\\n      ? ((STR)[2] == '7' ? CONST_7NBIT_IMM_P (VALUE)\t\\\n \t: 0)\t\t\t\t\t\t\\\n+     : (STR)[1] == 'N'\t\t\t\t\t\\\n+     ? ((STR)[2] == '7' ? CONST_7BIT_IMM_P (-(VALUE))\t\\\n+\t: 0)\t\t\t\t\t\t\\\n      : 0)\n \n #define CONST_OK_FOR_M(VALUE, STR)\t\t\t\\"}, {"sha": "03747e8c85f5f7c9d47622459517ac19b2bdd783", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e8505009ddcf460aae028e0302bba71b4d0a44/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e8505009ddcf460aae028e0302bba71b4d0a44/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=d4e8505009ddcf460aae028e0302bba71b4d0a44", "patch": "@@ -1083,18 +1083,11 @@\n   \"%0 = %1 + %2 (S);\"\n   [(set_attr \"type\" \"dsp32\")])\n \n-(define_expand \"subsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(minus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"reg_or_7bit_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n-(define_insn \"\"\n+(define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=da,d,a\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"0,d,0\")\n-\t\t  (match_operand:SI 2 \"reg_or_7bit_operand\" \"Ks7,d,a\")))]\n-  \"GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != -64\"\n+\t\t  (match_operand:SI 2 \"reg_or_neg7bit_operand\" \"KN7,d,a\")))]\n+  \"\"\n {\n   static const char *const strings_subsi3[] = {\n     \"%0 += -%2;\","}, {"sha": "933b7f8e1b6cb1da220ca9ac0ceadf0134db6013", "filename": "gcc/config/bfin/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e8505009ddcf460aae028e0302bba71b4d0a44/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e8505009ddcf460aae028e0302bba71b4d0a44/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fpredicates.md?ref=d4e8505009ddcf460aae028e0302bba71b4d0a44", "patch": "@@ -114,6 +114,13 @@\n   (ior (match_operand 0 \"nondp_register_operand\")\n        (match_operand 0 \"memory_operand\")))\n \n+;; Return nonzero if OP is a register or, when negated, a 7 bit signed\n+;; constant.\n+(define_predicate \"reg_or_neg7bit_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_code \"const_int\")\n+\t    (match_test \"CONST_7BIT_IMM_P (-INTVAL (op))\"))))\n+\n ;; Used for secondary reloads, this function returns 1 if OP is of the\n ;; form (plus (fp) (const_int)).\n (define_predicate \"fp_plus_const_operand\""}]}