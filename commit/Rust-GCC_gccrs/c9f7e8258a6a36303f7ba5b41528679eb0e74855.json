{"sha": "c9f7e8258a6a36303f7ba5b41528679eb0e74855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlmN2U4MjU4YTZhMzYzMDNmN2JhNWI0MTUyODY3OWViMGU3NDg1NQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-12-08T15:51:52Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-12-08T15:51:52Z"}, "message": "re PR fortran/34319 (I/O: Support \"NaN\", \"Infinity\" and \"INF\" as input)\n\n2007-12-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34319\n        * io/list_read.c (parse_real, read_real): Support NaN/Infinity.\n\n2007-12-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34319\n        * gfortran.dg/nan_3.f90: New.\n\nFrom-SVN: r130708", "tree": {"sha": "0c987f96018fb170815998f160e7b83a16122cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c987f96018fb170815998f160e7b83a16122cd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9f7e8258a6a36303f7ba5b41528679eb0e74855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f7e8258a6a36303f7ba5b41528679eb0e74855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9f7e8258a6a36303f7ba5b41528679eb0e74855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f7e8258a6a36303f7ba5b41528679eb0e74855/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f10d132b68810d06b42c82ec575bc114f52c62cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10d132b68810d06b42c82ec575bc114f52c62cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10d132b68810d06b42c82ec575bc114f52c62cb"}], "stats": {"total": 148, "additions": 146, "deletions": 2}, "files": [{"sha": "255956afbc56416672da77b0a5228914442ed651", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f7e8258a6a36303f7ba5b41528679eb0e74855/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f7e8258a6a36303f7ba5b41528679eb0e74855/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9f7e8258a6a36303f7ba5b41528679eb0e74855", "patch": "@@ -1,3 +1,8 @@\n+2007-12-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34319\n+\t* gfortran.dg/nan_3.f90: New.\n+\n 2007-12-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.old-deja/g++.mike/empty.C: Remove 2 xfails."}, {"sha": "957b94d214d346651428a69fc35840da027d35dd", "filename": "gcc/testsuite/gfortran.dg/nan_3.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f7e8258a6a36303f7ba5b41528679eb0e74855/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f7e8258a6a36303f7ba5b41528679eb0e74855/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_3.f90?ref=c9f7e8258a6a36303f7ba5b41528679eb0e74855", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! { dg-options \"-fno-range-check\" }\n+! { dg-options \"-fno-range-check -mieee\" { target sh*-*-* } }\n+!\n+! PR fortran/34319\n+!\n+! Check support of INF/NaN for I/O.\n+!\n+program main\n+  implicit none\n+  real :: r\n+  complex :: z\n+  character(len=30) :: str\n+\n+  str = \"nan\"\n+  read(str,*) r\n+  if (.not.isnan(r)) call abort()\n+  str = \"(nan,4.0)\"\n+  read(str,*) z\n+  if (.not.isnan(real(z)) .or. aimag(z) /= 4.0) call abort()\n+  str = \"(7.0,nan)\"\n+  read(str,*) z\n+  if (.not.isnan(aimag(z)) .or. real(z) /= 7.0) call abort()\n+\n+  str = \"inFinity\"\n+  read(str,*) r\n+  if (r <= huge(r)) call abort()\n+  str = \"(+inFinity,4.0)\"\n+  read(str,*) z\n+  if ((real(z) <= huge(r)) .or. aimag(z) /= 4.0) call abort()\n+  str = \"(7.0,-inFinity)\"\n+  read(str,*) z\n+  if ((aimag(z) >= -huge(r)) .or. real(z) /= 7.0) call abort()\n+\n+  str = \"inf\"\n+  read(str,*) r\n+  if (r <= huge(r)) call abort()\n+  str = \"(+inf,4.0)\"\n+  read(str,*) z\n+  if ((real(z) <= huge(r)) .or. aimag(z) /= 4.0) call abort()\n+  str = \"(7.0,-inf)\"\n+  read(str,*) z\n+  if ((aimag(z) >= -huge(r)) .or. real(z) /= 7.0) call abort()\n+\n+end program main"}, {"sha": "888633823a94d35371076daed4333e1a1885961e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f7e8258a6a36303f7ba5b41528679eb0e74855/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f7e8258a6a36303f7ba5b41528679eb0e74855/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c9f7e8258a6a36303f7ba5b41528679eb0e74855", "patch": "@@ -1,3 +1,8 @@\n+2007-12-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34319\n+\t* io/list_read.c (parse_real, read_real): Support NaN/Infinity.\n+\n 2007-12-02  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n "}, {"sha": "c212489153269a80e71fbe35e4bae49b708f554a", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 91, "deletions": 2, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f7e8258a6a36303f7ba5b41528679eb0e74855/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f7e8258a6a36303f7ba5b41528679eb0e74855/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=c9f7e8258a6a36303f7ba5b41528679eb0e74855", "patch": "@@ -1078,7 +1078,12 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n     }\n \n   if (!isdigit (c) && c != '.')\n-    goto bad;\n+    {\n+      if (c == 'i' || c == 'I' || c == 'n' || c == 'N')\n+\tgoto inf_nan;\n+      else\n+\tgoto bad;\n+    }\n \n   push_char (dtp, c);\n \n@@ -1136,6 +1141,13 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n \n  exp2:\n   if (!isdigit (c))\n+    {\n+      if (c == 'i' || c == 'I' || c == 'n' || c == 'N')\n+\tgoto inf_nan;\n+      else\n+\tgoto bad;\n+    }\n+\n     goto bad;\n   push_char (dtp, c);\n \n@@ -1166,6 +1178,41 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n \n   return m;\n \n+ inf_nan:\n+  /* Match INF and Infinity.  */\n+  if ((c == 'i' || c == 'I')\n+      && ((c = next_char (dtp)) == 'n' || c == 'N')\n+      && ((c = next_char (dtp)) == 'f' || c == 'F'))\n+    {\n+\tc = next_char (dtp);\n+\tif ((c != 'i' && c != 'I')\n+\t    || ((c == 'i' || c == 'I')\n+\t\t&& ((c = next_char (dtp)) == 'n' || c == 'N')\n+\t\t&& ((c = next_char (dtp)) == 'i' || c == 'I')\n+\t\t&& ((c = next_char (dtp)) == 't' || c == 'T')\n+\t\t&& ((c = next_char (dtp)) == 'y' || c == 'Y')\n+\t\t&& (c = next_char (dtp))))\n+\t  {\n+\t     if (is_separator (c))\n+\t       unget_char (dtp, c);\n+\t     push_char (dtp, 'i');\n+\t     push_char (dtp, 'n');\n+\t     push_char (dtp, 'f');\n+\t     goto done;\n+\t  }\n+    } /* Match NaN.  */\n+  else if (((c = next_char (dtp)) == 'a' || c == 'A')\n+\t   && ((c = next_char (dtp)) == 'n' || c == 'N')\n+\t   && (c = next_char (dtp)))\n+    {\n+      if (is_separator (c))\n+\tunget_char (dtp, c);\n+      push_char (dtp, 'n');\n+      push_char (dtp, 'a');\n+      push_char (dtp, 'n');\n+      goto done;\n+    }\n+\n  bad:\n \n   if (nml_bad_return (dtp, c))\n@@ -1293,6 +1340,12 @@ read_real (st_parameter_dt *dtp, int length)\n       eat_separator (dtp);\n       return;\n \n+    case 'i':\n+    case 'I':\n+    case 'n':\n+    case 'N':\n+      goto inf_nan;\n+\n     default:\n       goto bad_real;\n     }\n@@ -1367,7 +1420,12 @@ read_real (st_parameter_dt *dtp, int length)\n     }\n \n   if (!isdigit (c) && c != '.')\n-    goto bad_real;\n+    {\n+      if (c == 'i' || c == 'I' || c == 'n' || c == 'N')\n+\tgoto inf_nan;\n+      else\n+\tgoto bad_real;\n+    }\n \n   if (c == '.')\n     {\n@@ -1464,6 +1522,37 @@ read_real (st_parameter_dt *dtp, int length)\n   dtp->u.p.saved_type = BT_REAL;\n   return;\n \n+ inf_nan:\n+  /* Match INF and Infinity.  */\n+  if ((c == 'i' || c == 'I')\n+      && ((c = next_char (dtp)) == 'n' || c == 'N')\n+      && ((c = next_char (dtp)) == 'f' || c == 'F'))\n+    {\n+\tc = next_char (dtp);\n+\tif (is_separator (c)\n+\t    || ((c == 'i' || c == 'I')\n+\t\t&& ((c = next_char (dtp)) == 'n' || c == 'N')\n+\t\t&& ((c = next_char (dtp)) == 'i' || c == 'I')\n+\t\t&& ((c = next_char (dtp)) == 't' || c == 'T')\n+\t\t&& ((c = next_char (dtp)) == 'y' || c == 'Y')\n+\t\t&& (c = next_char (dtp)) && is_separator (c)))\n+\t  {\n+\t     push_char (dtp, 'i');\n+\t     push_char (dtp, 'n');\n+\t     push_char (dtp, 'f');\n+\t     goto done;\n+\t  }\n+    } /* Match NaN.  */\n+  else if (((c = next_char (dtp)) == 'a' || c == 'A')\n+\t   && ((c = next_char (dtp)) == 'n' || c == 'N')\n+\t   && (c = next_char (dtp)) && is_separator (c))\n+    {\n+      push_char (dtp, 'n');\n+      push_char (dtp, 'a');\n+      push_char (dtp, 'n');\n+      goto done;\n+    }\n+\n  bad_real:\n \n   if (nml_bad_return (dtp, c))"}]}