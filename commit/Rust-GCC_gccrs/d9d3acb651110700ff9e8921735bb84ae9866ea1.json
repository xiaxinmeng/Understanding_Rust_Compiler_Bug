{"sha": "d9d3acb651110700ff9e8921735bb84ae9866ea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkM2FjYjY1MTExMDcwMGZmOWU4OTIxNzM1YmI4NGFlOTg2NmVhMQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-08-13T19:17:15Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-08-13T19:17:15Z"}, "message": "(__sparclite__): Define umul_ppmm, udiv_qrnnd, and count_leading_zeros for this sparc architecture variant.\n\n(__sparclite__): Define umul_ppmm, udiv_qrnnd, and\ncount_leading_zeros for this sparc architecture variant.\n(__sparc_v8__): Changed from __sparc8__.\n\nFrom-SVN: r1811", "tree": {"sha": "3988d4c656bb41ae61949984d7c660ea4fa64836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3988d4c656bb41ae61949984d7c660ea4fa64836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9d3acb651110700ff9e8921735bb84ae9866ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d3acb651110700ff9e8921735bb84ae9866ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9d3acb651110700ff9e8921735bb84ae9866ea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d3acb651110700ff9e8921735bb84ae9866ea1/comments", "author": null, "committer": null, "parents": [{"sha": "493368c3fe53678542cc146cde4b1b7a1dc1af99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493368c3fe53678542cc146cde4b1b7a1dc1af99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493368c3fe53678542cc146cde4b1b7a1dc1af99"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "b69c15f3cc776b58a919485c9b4dfb709ec4623e", "filename": "gcc/longlong.h", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d3acb651110700ff9e8921735bb84ae9866ea1/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d3acb651110700ff9e8921735bb84ae9866ea1/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=d9d3acb651110700ff9e8921735bb84ae9866ea1", "patch": "@@ -659,7 +659,7 @@\n \t     \"r\" ((USItype)(al)),\t\t\t\t\t\\\n \t     \"rI\" ((USItype)(bl))\t\t\t\t\t\\\n \t   __CLOBBER_CC)\n-#if defined (__sparcv8__)\n+#if defined (__sparc_v8__)\n #define umul_ppmm(w1, w0, u, v) \\\n   __asm__ (\"umul %2,%3,%1;rd %%y,%0\"\t\t\t\t\t\\\n \t   : \"=r\" ((USItype)(w1)),\t\t\t\t\t\\\n@@ -674,6 +674,67 @@\n \t     \"r\" ((USItype)(n0)),\t\t\t\t\t\\\n \t     \"r\" ((USItype)(d)))\n #else\n+#if defined (__sparclite__)\n+/* This has hardware multiply but not divide.  It also has two additional\n+   instructions scan (ffs from high bit) and divscc.  */\n+#define umul_ppmm(w1, w0, u, v) \\\n+  __asm__ (\"umul %2,%3,%1;rd %%y,%0\"\t\t\t\t\t\\\n+\t   : \"=r\" ((unsigned long int)(w1)),\t\t\t\t\\\n+\t     \"=r\" ((unsigned long int)(w0))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(u)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(v)))\n+#define udiv_qrnnd(q, r, n1, n0, d) \\\n+  __asm__ (\"! Inlined udiv_qrnnd\n+\twr\t%%g0,%2,%%y\t! Not a delayed write for sparclite\n+\ttst\t%%g0\n+\tdivscc\t%3,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%%g1\n+\tdivscc\t%%g1,%4,%0\n+\trd\t%%y,%1\n+\tbl,a 1f\n+\tadd\t%1,%4,%1\n+1:\t! End of inline udiv_qrnnd\"\t\t\t\t\t\\\n+\t   : \"=r\" ((unsigned int)(q)),\t\t\t\t\t\\\n+\t     \"=r\" ((unsigned int)(r))\t\t\t\t\t\\\n+\t   : \"r\" ((unsigned int)(n1)),\t\t\t\t\t\\\n+\t     \"r\" ((unsigned int)(n0)),\t\t\t\t\t\\\n+\t     \"rI\" ((unsigned int)(d))\t\t\t\t\t\\\n+\t   : \"%g1\", __AND_CLOBBER_CC)\n+#define UDIV_TIME 37\n+#define count_leading_zeros(count, x) \\\n+  __asm__ (\"scan %1,0,%0\"\t\t\t\t\t\t\\\n+\t   : \"=r\" ((unsigned long int)(x))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(count)))\n+#else\n /* SPARC without integer multiplication and divide instructions.\n    (i.e. at least Sun4/20,40,60,65,75,110,260,280,330,360,380,470,490) */\n #define umul_ppmm(w1, w0, u, v) \\\n@@ -756,7 +817,8 @@\n \t     \"1\" ((USItype)(n1)),\t\t\t\t\t\\\n \t     \"0\" ((USItype)(n0)) : \"%g1\" __AND_CLOBBER_CC)\n #define UDIV_TIME (3+7*32)\t/* 7 instructions/iteration. 32 iterations. */\n-#endif /* __sparc8__ */\n+#endif /* __sparclite__ */\n+#endif /* __sparc_v8__ */\n #endif /* __sparc__ */\n \n #if defined (__vax__)"}]}