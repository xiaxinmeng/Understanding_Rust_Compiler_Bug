{"sha": "41f0e8194de366399afb726a6862843d81f896a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFmMGU4MTk0ZGUzNjYzOTlhZmI3MjZhNjg2Mjg0M2Q4MWY4OTZhMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-11-13T17:23:25Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-11-13T17:23:25Z"}, "message": "cgraph.c (cgraph_edge::sreal_frequency): New function.\n\n\n\t* cgraph.c (cgraph_edge::sreal_frequency): New function.\n\t* cgraph.h (cgraph_edge::sreal_frequency): Declare.\n\t* ipa-fnsummary.c (dump_ipa_call_summary): Use sreal_frequency.\n\t(estimate_edge_size_and_time): Likewise.\n\t(ipa_merge_fn_summary_after_inlining): Likewise.\n\t* ipa-inline.c (cgraph_freq_base_rec): Remove.\n\t(compute_uninlined_call_time): Use sreal_frequency.\n\t(compute_inlined_call_time): Likewise.\n\t(ipa_inline): Do not initialize cgraph_freq_base_rec.\n\t* profile-count.c: Include sreal.h.\n\t(profile_count::to_sreal_scale): New.\n\t* profile-count.h: Forward declare sreal.\n\t(profile_count::to_sreal_scale): Declare.\n\nFrom-SVN: r254696", "tree": {"sha": "6ecf459f42e8a834a49fe66dca8ae9575c9b5b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ecf459f42e8a834a49fe66dca8ae9575c9b5b31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41f0e8194de366399afb726a6862843d81f896a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f0e8194de366399afb726a6862843d81f896a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f0e8194de366399afb726a6862843d81f896a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f0e8194de366399afb726a6862843d81f896a3/comments", "author": null, "committer": null, "parents": [{"sha": "8f2b097ed54816d28cd51254c8e4616404ae348e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2b097ed54816d28cd51254c8e4616404ae348e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2b097ed54816d28cd51254c8e4616404ae348e"}], "stats": {"total": 94, "additions": 79, "deletions": 15}, "files": [{"sha": "87d200b24f1d8bdd646c3c9b9d76446cf882aac0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f0e8194de366399afb726a6862843d81f896a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f0e8194de366399afb726a6862843d81f896a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41f0e8194de366399afb726a6862843d81f896a3", "patch": "@@ -1,3 +1,19 @@\n+2017-11-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.c (cgraph_edge::sreal_frequency): New function.\n+\t* cgraph.h (cgraph_edge::sreal_frequency): Declare.\n+\t* ipa-fnsummary.c (dump_ipa_call_summary): Use sreal_frequency.\n+\t(estimate_edge_size_and_time): Likewise.\n+\t(ipa_merge_fn_summary_after_inlining): Likewise.\n+\t* ipa-inline.c (cgraph_freq_base_rec): Remove.\n+\t(compute_uninlined_call_time): Use sreal_frequency.\n+\t(compute_inlined_call_time): Likewise.\n+\t(ipa_inline): Do not initialize cgraph_freq_base_rec.\n+\t* profile-count.c: Include sreal.h.\n+\t(profile_count::to_sreal_scale): New.\n+\t* profile-count.h: Forward declare sreal.\n+\t(profile_count::to_sreal_scale): Declare.\n+\n 2017-11-13  Nathan Sidwell  <nathan@acm.org>\n \n \t* diagnostic.c (maybe_line_and_column): New."}, {"sha": "bc60fc90f566e09562397c1ca485f672276800d2", "filename": "gcc/cgraph.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=41f0e8194de366399afb726a6862843d81f896a3", "patch": "@@ -3880,4 +3880,16 @@ cgraph_node::has_thunk_p (cgraph_node *node, void *)\n   return false;\n }\n \n+/* Expected frequency of executions within the function.\n+   When set to CGRAPH_FREQ_BASE, the edge is expected to be called once\n+   per function call.  The range is 0 to CGRAPH_FREQ_MAX.  */\n+\n+sreal\n+cgraph_edge::sreal_frequency ()\n+{\n+  return count.to_sreal_scale (caller->global.inlined_to\n+\t\t\t       ? caller->global.inlined_to->count\n+\t\t\t       : caller->count);\n+}\n+\n #include \"gt-cgraph.h\""}, {"sha": "1c952eb509466f1bdd3ed97a7292743d8d9ff119", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=41f0e8194de366399afb726a6862843d81f896a3", "patch": "@@ -1766,6 +1766,9 @@ struct GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"),\n      When set to CGRAPH_FREQ_BASE, the edge is expected to be called once\n      per function call.  The range is 0 to CGRAPH_FREQ_MAX.  */\n   int frequency ();\n+\n+  /* Expected frequency of executions within the function.  */\n+  sreal sreal_frequency ();\n private:\n   /* Remove the edge from the list of the callers of the callee.  */\n   void remove_caller (void);\n@@ -3120,6 +3123,7 @@ cgraph_edge::frequency ()\n \t\t\t\t    : caller->count);\n }\n \n+\n /* Return true if the TM_CLONE bit is set for a given FNDECL.  */\n static inline bool\n decl_is_tm_clone (const_tree fndecl)"}, {"sha": "ddc16bd50d7d6068db1339e08781f0f2761eb1f2", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=41f0e8194de366399afb726a6862843d81f896a3", "patch": "@@ -817,12 +817,12 @@ dump_ipa_call_summary (FILE *f, int indent, struct cgraph_node *node,\n       int i;\n \n       fprintf (f,\n-\t       \"%*s%s/%i %s\\n%*s  loop depth:%2i freq:%4i size:%2i\"\n+\t       \"%*s%s/%i %s\\n%*s  loop depth:%2i freq:%4.2f size:%2i\"\n \t       \" time: %2i callee size:%2i stack:%2i\",\n \t       indent, \"\", callee->name (), callee->order,\n \t       !edge->inline_failed\n \t       ? \"inlined\" : cgraph_inline_failed_string (edge-> inline_failed),\n-\t       indent, \"\", es->loop_depth, edge->frequency (),\n+\t       indent, \"\", es->loop_depth, edge->sreal_frequency ().to_double (),\n \t       es->call_stmt_size, es->call_stmt_time,\n \t       (int) ipa_fn_summaries->get (callee)->size / ipa_fn_summary::size_scale,\n \t       (int) ipa_fn_summaries->get (callee)->estimated_stack_size);\n@@ -860,11 +860,12 @@ dump_ipa_call_summary (FILE *f, int indent, struct cgraph_node *node,\n   for (edge = node->indirect_calls; edge; edge = edge->next_callee)\n     {\n       struct ipa_call_summary *es = ipa_call_summaries->get (edge);\n-      fprintf (f, \"%*sindirect call loop depth:%2i freq:%4i size:%2i\"\n+      fprintf (f, \"%*sindirect call loop depth:%2i freq:%4.2f size:%2i\"\n \t       \" time: %2i\",\n \t       indent, \"\",\n \t       es->loop_depth,\n-\t       edge->frequency (), es->call_stmt_size, es->call_stmt_time);\n+\t       edge->sreal_frequency ().to_double (), es->call_stmt_size,\n+\t       es->call_stmt_time);\n       if (es->predicate)\n \t{\n \t  fprintf (f, \"predicate: \");\n@@ -2578,10 +2579,10 @@ estimate_edge_size_and_time (struct cgraph_edge *e, int *size, int *min_size,\n   if (min_size)\n     *min_size += cur_size;\n   if (prob == REG_BR_PROB_BASE)\n-    *time += ((sreal)(call_time * e->frequency ())) / CGRAPH_FREQ_BASE;\n+    *time += ((sreal)call_time) * e->sreal_frequency ();\n   else\n-    *time += ((sreal)call_time) * (prob * e->frequency ())\n-\t      / (CGRAPH_FREQ_BASE * REG_BR_PROB_BASE);\n+    *time += ((sreal)call_time * prob) * e->sreal_frequency ()\n+\t      / CGRAPH_FREQ_BASE;\n }\n \n \n@@ -3058,7 +3059,7 @@ ipa_merge_fn_summary_after_inlining (struct cgraph_edge *edge)\n \t\t\t\t      toplev_predicate);\n       if (p != false && nonconstp != false)\n \t{\n-\t  sreal add_time = ((sreal)e->time * edge->frequency ()) / CGRAPH_FREQ_BASE;\n+\t  sreal add_time = ((sreal)e->time * edge->sreal_frequency ());\n \t  int prob = e->nonconst_predicate.probability (callee_info->conds,\n \t\t\t\t\t\t\tclause, es->param);\n \t  add_time = add_time * prob / REG_BR_PROB_BASE;"}, {"sha": "8a2fd4baeeb5d4c27a81a87ae8ffef2346bad2e8", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=41f0e8194de366399afb726a6862843d81f896a3", "patch": "@@ -129,8 +129,8 @@ static int overall_size;\n static profile_count max_count;\n static profile_count spec_rem;\n \n-/* Pre-computed constants 1/CGRAPH_FREQ_BASE and 1/100. */\n-static sreal cgraph_freq_base_rec, percent_rec;\n+/* Pre-computed constant 1/100. */\n+static sreal percent_rec;\n \n /* Return false when inlining edge E would lead to violating\n    limits on function unit growth or stack usage growth.  \n@@ -644,8 +644,9 @@ compute_uninlined_call_time (struct cgraph_edge *edge,\n       && caller->count.ipa ().nonzero_p ())\n     uninlined_call_time *= (sreal)edge->count.ipa ().to_gcov_type ()\n \t\t\t   / caller->count.ipa ().to_gcov_type ();\n-  if (edge->frequency ())\n-    uninlined_call_time *= cgraph_freq_base_rec * edge->frequency ();\n+  sreal freq = edge->sreal_frequency ();\n+  if (freq != 0)\n+    uninlined_call_time *= freq;\n   else\n     uninlined_call_time = uninlined_call_time >> 11;\n \n@@ -668,8 +669,9 @@ compute_inlined_call_time (struct cgraph_edge *edge,\n   if (edge->count.ipa ().nonzero_p ()\n       && caller->count.ipa ().nonzero_p ())\n     time *= (sreal)edge->count.to_gcov_type () / caller->count.to_gcov_type ();\n-  if (edge->frequency ())\n-    time *= cgraph_freq_base_rec * edge->frequency ();\n+  sreal freq = edge->sreal_frequency ();\n+  if (freq != 0)\n+    time *= freq;\n   else\n     time = time >> 11;\n \n@@ -2390,7 +2392,6 @@ ipa_inline (void)\n   int cold;\n   bool remove_functions = false;\n \n-  cgraph_freq_base_rec = (sreal) 1 / (sreal) CGRAPH_FREQ_BASE;\n   percent_rec = (sreal) 1 / (sreal) 100;\n \n   order = XCNEWVEC (struct cgraph_node *, symtab->cgraph_count);"}, {"sha": "51c3b74fefa1d3d14e734f33547d4cba9b20ccf4", "filename": "gcc/profile-count.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fprofile-count.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fprofile-count.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.c?ref=41f0e8194de366399afb726a6862843d81f896a3", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"data-streamer.h\"\n #include \"cgraph.h\"\n #include \"wide-int.h\"\n+#include \"sreal.h\"\n \n /* Dump THIS to F.  */\n \n@@ -256,6 +257,32 @@ profile_count::to_cgraph_frequency (profile_count entry_bb_count) const\n   return MIN (scale, CGRAPH_FREQ_MAX);\n }\n \n+/* Return THIS/IN as sreal value.  */\n+\n+sreal\n+profile_count::to_sreal_scale (profile_count in, bool *known) const\n+{\n+  if (!initialized_p ())\n+    {\n+      if (known)\n+\t*known = false;\n+      return CGRAPH_FREQ_BASE;\n+    }\n+  if (known)\n+    *known = true;\n+  if (*this == profile_count::zero ())\n+    return 0;\n+  gcc_checking_assert (in.initialized_p ());\n+\n+  if (!in.m_val)\n+    {\n+      if (!m_val)\n+\treturn 1;\n+      return m_val * 4;\n+    }\n+  return (sreal)m_val / (sreal)in.m_val;\n+}\n+\n /* We want to scale profile across function boundary from NUM to DEN.\n    Take care of the side case when DEN is zeros.  We still want to behave\n    sanely here which means"}, {"sha": "90d1bc747eeaccda030326fac87525efc8c4353a", "filename": "gcc/profile-count.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f0e8194de366399afb726a6862843d81f896a3/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=41f0e8194de366399afb726a6862843d81f896a3", "patch": "@@ -601,6 +601,8 @@ class GTY((user)) profile_probability\n \n  */\n \n+class sreal;\n+\n class GTY(()) profile_count\n {\n   /* Use 62bit to hold basic block counters.  Should be at least\n@@ -1034,6 +1036,7 @@ class GTY(()) profile_count\n \n   int to_frequency (struct function *fun) const;\n   int to_cgraph_frequency (profile_count entry_bb_count) const;\n+  sreal to_sreal_scale (profile_count in, bool *known = NULL) const;\n \n   /* Output THIS to F.  */\n   void dump (FILE *f) const;"}]}