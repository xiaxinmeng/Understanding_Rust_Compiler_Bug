{"sha": "785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b", "node_id": "C_kwDOANBUbNoAKDc4NWIxYjVkNDNiZTZiYmJmMzhkOGM4ZGM0MGQ2ZDBjOTkxY2Y5OWI", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-14T17:43:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-09T09:27:36Z"}, "message": "[Ada] Prevent inlining-for-proof for calls inside ELSIF condition\n\nIn GNATprove we don't want inlining-for-proof to expand subprogram\nbodies into actions attached to nodes. These actions are attached either\nto expressions or to statements.\n\nFor expressions, we prevented inlining by Is_Potentially_Unevaluated.\nFor statements, we prevented inlining by In_While_Loop_Condition, but\nforgot about actions attached to ELSIF condition.\n\nThere are no other expression or statements nodes where actions could be\nattached, so this fix is exhaustive.\n\ngcc/ada/\n\n\t* sem_util.ads (In_Statement_Condition_With_Actions): Renamed\n\tfrom In_While_Loop_Condition; move to fit the alphabetic order.\n\t* sem_util.adb (In_Statement_Condition_With_Actions): Detect\n\tElsif condition; stop search on other statements; prevent search\n\tfrom going too far; move to fit the alphabetic order.\n\t* sem_res.adb (Resolve_Call): Adapt caller.", "tree": {"sha": "25bf8d0acbad847983bdefca689130bc5f63ea2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25bf8d0acbad847983bdefca689130bc5f63ea2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f5bfe407cfeae17ab059387adcf88346ccbba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f5bfe407cfeae17ab059387adcf88346ccbba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f5bfe407cfeae17ab059387adcf88346ccbba8"}], "stats": {"total": 77, "additions": 49, "deletions": 28}, "files": [{"sha": "1c686cd3e06a6dcfb6c10394f77143e76984b24c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b", "patch": "@@ -7346,7 +7346,7 @@ package body Sem_Res is\n                --  loops, as this would create complex actions inside\n                --  the condition, that are not handled by GNATprove.\n \n-               elsif In_While_Loop_Condition (N) then\n+               elsif In_Statement_Condition_With_Actions (N) then\n                   Cannot_Inline\n                     (\"cannot inline & (in while loop condition)?\", N, Nam_UA);\n "}, {"sha": "1fc2c617afa57ca7ac367ee7cde5f969e8def7f9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 41, "deletions": 24, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b", "patch": "@@ -14986,41 +14986,58 @@ package body Sem_Util is\n       return False;\n    end In_Return_Value;\n \n-   ---------------------\n-   -- In_Visible_Part --\n-   ---------------------\n-\n-   function In_Visible_Part (Scope_Id : Entity_Id) return Boolean is\n-   begin\n-      return Is_Package_Or_Generic_Package (Scope_Id)\n-        and then In_Open_Scopes (Scope_Id)\n-        and then not In_Package_Body (Scope_Id)\n-        and then not In_Private_Part (Scope_Id);\n-   end In_Visible_Part;\n-\n-   -----------------------------\n-   -- In_While_Loop_Condition --\n-   -----------------------------\n+   -----------------------------------------\n+   -- In_Statement_Condition_With_Actions --\n+   -----------------------------------------\n \n-   function In_While_Loop_Condition (N : Node_Id) return Boolean is\n+   function In_Statement_Condition_With_Actions (N : Node_Id) return Boolean is\n       Prev : Node_Id := N;\n       P    : Node_Id := Parent (N);\n       --  P and Prev will be used for traversing the AST, while maintaining an\n       --  invariant that P = Parent (Prev).\n    begin\n-      loop\n-         if No (P) then\n-            return False;\n-         elsif Nkind (P) = N_Iteration_Scheme\n+      while Present (P) loop\n+         if Nkind (P) = N_Iteration_Scheme\n            and then Prev = Condition (P)\n          then\n             return True;\n-         else\n-            Prev := P;\n-            P := Parent (P);\n+\n+         elsif Nkind (P) = N_Elsif_Part\n+           and then Prev = Condition (P)\n+         then\n+            return True;\n+\n+         --  No point in going beyond statements\n+\n+         elsif Nkind (N) in N_Statement_Other_Than_Procedure_Call\n+                          | N_Procedure_Call_Statement\n+         then\n+            exit;\n+\n+         --  Prevent the search from going too far\n+\n+         elsif Is_Body_Or_Package_Declaration (P) then\n+            exit;\n          end if;\n+\n+         Prev := P;\n+         P := Parent (P);\n       end loop;\n-   end In_While_Loop_Condition;\n+\n+      return False;\n+   end In_Statement_Condition_With_Actions;\n+\n+   ---------------------\n+   -- In_Visible_Part --\n+   ---------------------\n+\n+   function In_Visible_Part (Scope_Id : Entity_Id) return Boolean is\n+   begin\n+      return Is_Package_Or_Generic_Package (Scope_Id)\n+        and then In_Open_Scopes (Scope_Id)\n+        and then not In_Package_Body (Scope_Id)\n+        and then not In_Private_Part (Scope_Id);\n+   end In_Visible_Part;\n \n    --------------------------------\n    -- Incomplete_Or_Partial_View --"}, {"sha": "78fc347464e8380d18bdb4e7fd5626ee632f6092", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=785b1b5d43be6bbbf38d8c8dc40d6d0c991cf99b", "patch": "@@ -1723,14 +1723,18 @@ package Sem_Util is\n    --  This version is more efficient than calling the single root version of\n    --  Is_Subtree twice.\n \n+   function In_Statement_Condition_With_Actions (N : Node_Id) return Boolean;\n+   --  Returns true if the expression N occurs within the condition of a\n+   --  statement node with actions. Subsidiary to inlining for GNATprove, where\n+   --  inlining of function calls in such expressions would expand the called\n+   --  body into actions list of the condition node. GNATprove cannot yet cope\n+   --  with such a complex AST.\n+\n    function In_Visible_Part (Scope_Id : Entity_Id) return Boolean;\n    --  Determine whether a declaration occurs within the visible part of a\n    --  package specification. The package must be on the scope stack, and the\n    --  corresponding private part must not.\n \n-   function In_While_Loop_Condition (N : Node_Id) return Boolean;\n-   --  Returns true if the expression N occurs within the condition of a while\n-\n    function Incomplete_Or_Partial_View (Id : Entity_Id) return Entity_Id;\n    --  Given the entity of a constant or a type, retrieve the incomplete or\n    --  partial view of the same entity. Note that Id may not have a partial"}]}