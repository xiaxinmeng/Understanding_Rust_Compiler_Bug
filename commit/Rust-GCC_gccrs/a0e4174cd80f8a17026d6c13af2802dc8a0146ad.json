{"sha": "a0e4174cd80f8a17026d6c13af2802dc8a0146ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlNDE3NGNkODBmOGExNzAyNmQ2YzEzYWYyODAyZGM4YTAxNDZhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-13T07:28:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-13T07:28:46Z"}, "message": "re PR target/82498 (Missed optimization for x86 rotate instruction)\n\n\tPR target/82498\n\t* fold-const.c (fold_binary_loc) <bit_rotate>: Code cleanups,\n\tinstead of handling MINUS_EXPR twice (once for each argument),\n\tcanonicalize operand order and handle just once, use rtype where\n\tpossible.  Handle (A << B) | (A >> (-B & (Z - 1))).\n\n\t* gcc.dg/tree-ssa/pr82498.c: New test.\n\nFrom-SVN: r253709", "tree": {"sha": "fb81bdf0ff4f61dd7d46f4bdb4eec0ee5d2404b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb81bdf0ff4f61dd7d46f4bdb4eec0ee5d2404b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e4174cd80f8a17026d6c13af2802dc8a0146ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e4174cd80f8a17026d6c13af2802dc8a0146ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e4174cd80f8a17026d6c13af2802dc8a0146ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e4174cd80f8a17026d6c13af2802dc8a0146ad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d"}], "stats": {"total": 146, "additions": 108, "deletions": 38}, "files": [{"sha": "b8346e3827e373322d2775eaf7a51400d020b667", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4174cd80f8a17026d6c13af2802dc8a0146ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4174cd80f8a17026d6c13af2802dc8a0146ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0e4174cd80f8a17026d6c13af2802dc8a0146ad", "patch": "@@ -1,5 +1,11 @@\n 2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/82498\n+\t* fold-const.c (fold_binary_loc) <bit_rotate>: Code cleanups,\n+\tinstead of handling MINUS_EXPR twice (once for each argument),\n+\tcanonicalize operand order and handle just once, use rtype where\n+\tpossible.  Handle (A << B) | (A >> (-B & (Z - 1))).\n+\n \tPR target/82498\n \t* config/i386/ia32intrin.h (__rold, __rord, __rolq, __rorq): Allow\n \tany values of __C while still being pattern recognizable as a simple"}, {"sha": "d1e61918e0b70ef350fd24c0a70220f03bbfa18b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4174cd80f8a17026d6c13af2802dc8a0146ad/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4174cd80f8a17026d6c13af2802dc8a0146ad/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a0e4174cd80f8a17026d6c13af2802dc8a0146ad", "patch": "@@ -9429,7 +9429,10 @@ fold_binary_loc (location_t loc,\n       /* (A << C1) + (A >> C2) if A is unsigned and C1+C2 is the size of A\n \t is a rotate of A by C1 bits.  */\n       /* (A << B) + (A >> (Z - B)) if A is unsigned and Z is the size of A\n-\t is a rotate of A by B bits.  */\n+\t is a rotate of A by B bits.\n+\t Similarly for (A << B) | (A >> (-B & C3)) where C3 is Z-1,\n+\t though in this case CODE must be | and not + or ^, otherwise\n+\t it doesn't return A when B is 0.  */\n       {\n \tenum tree_code code0, code1;\n \ttree rtype;\n@@ -9447,25 +9450,32 @@ fold_binary_loc (location_t loc,\n \t\t== GET_MODE_UNIT_PRECISION (TYPE_MODE (rtype))))\n \t  {\n \t    tree tree01, tree11;\n+\t    tree orig_tree01, orig_tree11;\n \t    enum tree_code code01, code11;\n \n-\t    tree01 = TREE_OPERAND (arg0, 1);\n-\t    tree11 = TREE_OPERAND (arg1, 1);\n+\t    tree01 = orig_tree01 = TREE_OPERAND (arg0, 1);\n+\t    tree11 = orig_tree11 = TREE_OPERAND (arg1, 1);\n \t    STRIP_NOPS (tree01);\n \t    STRIP_NOPS (tree11);\n \t    code01 = TREE_CODE (tree01);\n \t    code11 = TREE_CODE (tree11);\n+\t    if (code11 != MINUS_EXPR\n+\t\t&& (code01 == MINUS_EXPR || code01 == BIT_AND_EXPR))\n+\t      {\n+\t\tstd::swap (code0, code1);\n+\t\tstd::swap (code01, code11);\n+\t\tstd::swap (tree01, tree11);\n+\t\tstd::swap (orig_tree01, orig_tree11);\n+\t      }\n \t    if (code01 == INTEGER_CST\n \t\t&& code11 == INTEGER_CST\n \t\t&& (wi::to_widest (tree01) + wi::to_widest (tree11)\n-\t\t    == element_precision (TREE_TYPE (TREE_OPERAND (arg0, 0)))))\n+\t\t    == element_precision (rtype)))\n \t      {\n \t\ttem = build2_loc (loc, LROTATE_EXPR,\n-\t\t\t\t  TREE_TYPE (TREE_OPERAND (arg0, 0)),\n-\t\t\t\t  TREE_OPERAND (arg0, 0),\n+\t\t\t\t  rtype, TREE_OPERAND (arg0, 0),\n \t\t\t\t  code0 == LSHIFT_EXPR\n-\t\t\t\t  ? TREE_OPERAND (arg0, 1)\n-\t\t\t\t  : TREE_OPERAND (arg1, 1));\n+\t\t\t\t  ? orig_tree01 : orig_tree11);\n \t\treturn fold_convert_loc (loc, type, tem);\n \t      }\n \t    else if (code11 == MINUS_EXPR)\n@@ -9477,39 +9487,37 @@ fold_binary_loc (location_t loc,\n \t\tSTRIP_NOPS (tree111);\n \t\tif (TREE_CODE (tree110) == INTEGER_CST\n \t\t    && 0 == compare_tree_int (tree110,\n-\t\t\t\t\t      element_precision\n-\t\t\t\t\t      (TREE_TYPE (TREE_OPERAND\n-\t\t\t\t\t\t\t  (arg0, 0))))\n+\t\t\t\t\t      element_precision (rtype))\n \t\t    && operand_equal_p (tree01, tree111, 0))\n-\t\t  return\n-\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t      build2 ((code0 == LSHIFT_EXPR\n-\t\t\t\t\t       ? LROTATE_EXPR\n-\t\t\t\t\t       : RROTATE_EXPR),\n-\t\t\t\t\t      TREE_TYPE (TREE_OPERAND (arg0, 0)),\n-\t\t\t\t\t      TREE_OPERAND (arg0, 0),\n-\t\t\t\t\t      TREE_OPERAND (arg0, 1)));\n+\t\t  {\n+\t\t    tem = build2_loc (loc, (code0 == LSHIFT_EXPR\n+\t\t\t\t\t    ? LROTATE_EXPR : RROTATE_EXPR),\n+\t\t\t\t      rtype, TREE_OPERAND (arg0, 0),\n+\t\t\t\t      orig_tree01);\n+\t\t    return fold_convert_loc (loc, type, tem);\n+\t\t  }\n \t      }\n-\t    else if (code01 == MINUS_EXPR)\n+\t    else if (code == BIT_IOR_EXPR\n+\t\t     && code11 == BIT_AND_EXPR\n+\t\t     && pow2p_hwi (element_precision (rtype)))\n \t      {\n-\t\ttree tree010, tree011;\n-\t\ttree010 = TREE_OPERAND (tree01, 0);\n-\t\ttree011 = TREE_OPERAND (tree01, 1);\n-\t\tSTRIP_NOPS (tree010);\n-\t\tSTRIP_NOPS (tree011);\n-\t\tif (TREE_CODE (tree010) == INTEGER_CST\n-\t\t    && 0 == compare_tree_int (tree010,\n-\t\t\t\t\t      element_precision\n-\t\t\t\t\t      (TREE_TYPE (TREE_OPERAND\n-\t\t\t\t\t\t\t  (arg0, 0))))\n-\t\t    && operand_equal_p (tree11, tree011, 0))\n-\t\t    return fold_convert_loc\n-\t\t      (loc, type,\n-\t\t       build2 ((code0 != LSHIFT_EXPR\n-\t\t\t\t? LROTATE_EXPR\n-\t\t\t\t: RROTATE_EXPR),\n-\t\t\t       TREE_TYPE (TREE_OPERAND (arg0, 0)),\n-\t\t\t       TREE_OPERAND (arg0, 0), TREE_OPERAND (arg1, 1)));\n+\t\ttree tree110, tree111;\n+\t\ttree110 = TREE_OPERAND (tree11, 0);\n+\t\ttree111 = TREE_OPERAND (tree11, 1);\n+\t\tSTRIP_NOPS (tree110);\n+\t\tSTRIP_NOPS (tree111);\n+\t\tif (TREE_CODE (tree110) == NEGATE_EXPR\n+\t\t    && TREE_CODE (tree111) == INTEGER_CST\n+\t\t    && 0 == compare_tree_int (tree111,\n+\t\t\t\t\t      element_precision (rtype) - 1)\n+\t\t    && operand_equal_p (tree01, TREE_OPERAND (tree110, 0), 0))\n+\t\t  {\n+\t\t    tem = build2_loc (loc, (code0 == LSHIFT_EXPR\n+\t\t\t\t\t    ? LROTATE_EXPR : RROTATE_EXPR),\n+\t\t\t\t      rtype, TREE_OPERAND (arg0, 0),\n+\t\t\t\t      orig_tree01);\n+\t\t    return fold_convert_loc (loc, type, tem);\n+\t\t  }\n \t      }\n \t  }\n       }"}, {"sha": "ff6d743895612e269cb0b0642f570410392da07e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4174cd80f8a17026d6c13af2802dc8a0146ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4174cd80f8a17026d6c13af2802dc8a0146ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0e4174cd80f8a17026d6c13af2802dc8a0146ad", "patch": "@@ -1,5 +1,8 @@\n 2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/82498\n+\t* gcc.dg/tree-ssa/pr82498.c: New test.\n+\n \tPR target/82498\n \t* gcc.dg/ubsan/pr82498.c: New test.\n "}, {"sha": "19a42f0a3c75ba18e4be653476aca991e4be48ff", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr82498.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4174cd80f8a17026d6c13af2802dc8a0146ad/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82498.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4174cd80f8a17026d6c13af2802dc8a0146ad/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82498.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82498.c?ref=a0e4174cd80f8a17026d6c13af2802dc8a0146ad", "patch": "@@ -0,0 +1,53 @@\n+/* PR target/82498 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+/* { dg-final { scan-tree-dump-times \"x r<< y\" 4 \"original\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump-times \"x r>> y\" 4 \"original\" { target int32 } } } */\n+\n+unsigned\n+f1 (unsigned x, int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f2 (unsigned x, int y)\n+{\n+  return (x << y) | (x >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned\n+f3 (unsigned x, int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f4 (unsigned x, int y)\n+{\n+  return (x >> y) | (x << (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned\n+f5 (unsigned x, int y)\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y)) | (x << y);\n+}\n+\n+unsigned\n+f6 (unsigned x, int y)\n+{\n+  return (x >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x << y);\n+}\n+\n+unsigned\n+f7 (unsigned x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y)) | (x >> y);\n+}\n+\n+unsigned\n+f8 (unsigned x, int y)\n+{\n+  return (x << (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> y);\n+}"}]}