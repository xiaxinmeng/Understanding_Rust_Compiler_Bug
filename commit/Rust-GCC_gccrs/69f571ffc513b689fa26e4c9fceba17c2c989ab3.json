{"sha": "69f571ffc513b689fa26e4c9fceba17c2c989ab3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlmNTcxZmZjNTEzYjY4OWZhMjZlNGM5ZmNlYmExN2MyYzk4OWFiMw==", "commit": {"author": {"name": "Antony Polukhin", "email": "antoshkka@gmail.com", "date": "2020-08-19T11:10:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-19T11:12:40Z"}, "message": "libstdc++: assert that type traits are not misused with incomplete types [PR 71579]\n\nlibstdc++-v3/ChangeLog:\n\n2020-08-19  Antony Polukhin  <antoshkka@gmail.com>\n\n\tPR libstdc++/71579\n\t* include/std/type_traits (invoke_result, is_nothrow_invocable_r)\n\tAdd static_asserts to make sure that the argument of the type\n\ttrait is not misused with incomplete types.\n\t(is_swappable_with, is_nothrow_swappable_with): Add static_asserts\n\tto make sure that the first and second arguments of the type trait\n\tare not misused with incomplete types.\n\t* testsuite/20_util/invoke_result/incomplete_neg.cc: New test.\n\t* testsuite/20_util/is_nothrow_invocable/incomplete_neg.cc: New test.\n\t* testsuite/20_util/is_nothrow_swappable/incomplete_neg.cc: New test.\n\t* testsuite/20_util/is_nothrow_swappable_with/incomplete_neg.cc: New\n\ttest.\n\t* testsuite/20_util/is_swappable_with/incomplete_neg.cc: New test.", "tree": {"sha": "fc2a28c5020330413c5cbd0a0e3aed069ed46c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc2a28c5020330413c5cbd0a0e3aed069ed46c72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69f571ffc513b689fa26e4c9fceba17c2c989ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f571ffc513b689fa26e4c9fceba17c2c989ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f571ffc513b689fa26e4c9fceba17c2c989ab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f571ffc513b689fa26e4c9fceba17c2c989ab3/comments", "author": {"login": "apolukhin", "id": 1700098, "node_id": "MDQ6VXNlcjE3MDAwOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1700098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apolukhin", "html_url": "https://github.com/apolukhin", "followers_url": "https://api.github.com/users/apolukhin/followers", "following_url": "https://api.github.com/users/apolukhin/following{/other_user}", "gists_url": "https://api.github.com/users/apolukhin/gists{/gist_id}", "starred_url": "https://api.github.com/users/apolukhin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apolukhin/subscriptions", "organizations_url": "https://api.github.com/users/apolukhin/orgs", "repos_url": "https://api.github.com/users/apolukhin/repos", "events_url": "https://api.github.com/users/apolukhin/events{/privacy}", "received_events_url": "https://api.github.com/users/apolukhin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5a635fc4331b6d5f1a1e688e1153abd2ff194a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a635fc4331b6d5f1a1e688e1153abd2ff194a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a635fc4331b6d5f1a1e688e1153abd2ff194a5"}], "stats": {"total": 178, "additions": 174, "deletions": 4}, "files": [{"sha": "62f11902790b2f9973c9caf0660c1eb12c08de62", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=69f571ffc513b689fa26e4c9fceba17c2c989ab3", "patch": "@@ -2811,13 +2811,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Up>\n     struct is_swappable_with\n     : public __is_swappable_with_impl<_Tp, _Up>::type\n-    { };\n+    {\n+      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n+\t\"first template argument must be a complete class or an unbounded array\");\n+      static_assert(std::__is_complete_or_unbounded(__type_identity<_Up>{}),\n+\t\"second template argument must be a complete class or an unbounded array\");\n+    };\n \n   /// is_nothrow_swappable_with\n   template<typename _Tp, typename _Up>\n     struct is_nothrow_swappable_with\n     : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type\n-    { };\n+    {\n+      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n+\t\"first template argument must be a complete class or an unbounded array\");\n+      static_assert(std::__is_complete_or_unbounded(__type_identity<_Up>{}),\n+\t\"second template argument must be a complete class or an unbounded array\");\n+    };\n \n #if __cplusplus >= 201402L\n   /// is_swappable_with_v\n@@ -2952,7 +2962,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Functor, typename... _ArgTypes>\n     struct invoke_result\n     : public __invoke_result<_Functor, _ArgTypes...>\n-    { };\n+    {\n+      static_assert(std::__is_complete_or_unbounded(__type_identity<_Functor>{}),\n+\t\"_Functor must be a complete class or an unbounded array\");\n+    };\n \n   /// std::invoke_result_t\n   template<typename _Fn, typename... _Args>\n@@ -3001,7 +3014,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct is_nothrow_invocable_r\n     : __and_<__is_nt_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, _Ret>,\n              __call_is_nothrow_<_Fn, _ArgTypes...>>::type\n-    { };\n+    {\n+      static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),\n+\t\"_Fn must be a complete class or an unbounded array\");\n+    };\n \n   /// std::is_invocable_v\n   template<typename _Fn, typename... _Args>"}, {"sha": "da58a8beaddf45f5500d8e233034a8d1b63815b7", "filename": "libstdc++-v3/testsuite/20_util/invoke_result/incomplete_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finvoke_result%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finvoke_result%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finvoke_result%2Fincomplete_neg.cc?ref=69f571ffc513b689fa26e4c9fceba17c2c989ab3", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"must be a complete class\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::invoke_result<X, int>();\t\t// { dg-error \"required from here\" }\n+  std::invoke_result<X>();\t\t// { dg-error \"required from here\" }\n+}"}, {"sha": "ad16809027a298dc9367405b2d7f92ec0d99b65f", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_invocable/incomplete_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fincomplete_neg.cc?ref=69f571ffc513b689fa26e4c9fceba17c2c989ab3", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"must be a complete class\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::is_nothrow_invocable<X>();\t\t// { dg-error \"required from here\" }\n+  std::is_nothrow_invocable<X, short>();\t\t// { dg-error \"required from here\" }\n+\n+  std::is_nothrow_invocable_r<int, X>();\t\t// { dg-error \"required from here\" }\n+  std::is_nothrow_invocable_r<int, X, short>();\t\t// { dg-error \"required from here\" }\n+}"}, {"sha": "4a6261d66818b9599fa2a2cd24d5094a3e9b3f76", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/incomplete_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fincomplete_neg.cc?ref=69f571ffc513b689fa26e4c9fceba17c2c989ab3", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"must be a complete class\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::is_nothrow_swappable<X>();\t\t// { dg-error \"required from here\" }\n+}"}, {"sha": "2fb19de7f5204ce1147fa8a5fd01899299e226af", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable_with/incomplete_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Fincomplete_neg.cc?ref=69f571ffc513b689fa26e4c9fceba17c2c989ab3", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"must be a complete class\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::is_nothrow_swappable_with<X, int>();\t\t// { dg-error \"required from here\" }\n+  std::is_nothrow_swappable_with<int, X>();\t\t// { dg-error \"required from here\" }\n+  std::is_nothrow_swappable_with<X, X>();\t\t// { dg-error \"required from here\" }\n+}"}, {"sha": "dafa4f770ef000c6aa730849d9319b561f9dc132", "filename": "libstdc++-v3/testsuite/20_util/is_swappable_with/incomplete_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Fincomplete_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f571ffc513b689fa26e4c9fceba17c2c989ab3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Fincomplete_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Fincomplete_neg.cc?ref=69f571ffc513b689fa26e4c9fceba17c2c989ab3", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"must be a complete class\" \"\" { target *-*-* } 0 }\n+\n+#include <type_traits>\n+\n+class X;\n+\n+void test01()\n+{\n+  std::is_swappable_with<X, int>();\t\t// { dg-error \"required from here\" }\n+  std::is_swappable_with<int, X>();\t\t// { dg-error \"required from here\" }\n+  std::is_swappable_with<X, X>();\t\t// { dg-error \"required from here\" }\n+}"}]}