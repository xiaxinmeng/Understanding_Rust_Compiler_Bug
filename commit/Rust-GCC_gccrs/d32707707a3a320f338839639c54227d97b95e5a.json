{"sha": "d32707707a3a320f338839639c54227d97b95e5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMyNzA3NzA3YTNhMzIwZjMzODgzOTYzOWM1NDIyN2Q5N2I5NWU1YQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2005-02-12T15:40:28Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2005-02-12T15:40:28Z"}, "message": "re PR c++/14479 (enum definition in template class with template methods causes error.)\n\n\tPR c++/14479\n\tPR c++/19487\n\t* pt.c (maybe_check_template_type): Remove.\n\t* cp-tree.h (maybe_check_template_type): Remove prototype.\n\t* name-lookup.c (maybe_process_template_type_declaration): Don't\n\tuse maybe_check_template_type.\n\n\t* g++.dg/template/enum5.C: New test.\n\nFrom-SVN: r94941", "tree": {"sha": "33ea4be8f2077053e45e74021169caa2629e37ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33ea4be8f2077053e45e74021169caa2629e37ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d32707707a3a320f338839639c54227d97b95e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32707707a3a320f338839639c54227d97b95e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32707707a3a320f338839639c54227d97b95e5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32707707a3a320f338839639c54227d97b95e5a/comments", "author": null, "committer": null, "parents": [{"sha": "537677ba9d5fb2dfc6b64d0feb464fee0b7f6390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537677ba9d5fb2dfc6b64d0feb464fee0b7f6390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/537677ba9d5fb2dfc6b64d0feb464fee0b7f6390"}], "stats": {"total": 77, "additions": 31, "deletions": 46}, "files": [{"sha": "b60b6deaf3763160e23cf139949e09e2100af28f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d32707707a3a320f338839639c54227d97b95e5a", "patch": "@@ -1,3 +1,12 @@\n+2005-02-12  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/14479\n+\tPR c++/19487\n+\t* pt.c (maybe_check_template_type): Remove.\n+\t* cp-tree.h (maybe_check_template_type): Remove prototype.\n+\t* name-lookup.c (maybe_process_template_type_declaration): Don't\n+\tuse maybe_check_template_type.\n+\n 2005-02-11  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/19632"}, {"sha": "bd5d0eca14dad7ea8756030be70da60333950fbf", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d32707707a3a320f338839639c54227d97b95e5a", "patch": "@@ -4010,7 +4010,6 @@ extern int is_specialization_of                 (tree, tree);\n extern bool is_specialization_of_friend         (tree, tree);\n extern int comp_template_args                   (tree, tree);\n extern void maybe_process_partial_specialization (tree);\n-extern void maybe_check_template_type           (tree);\n extern tree most_specialized_instantiation      (tree);\n extern void print_candidates                    (tree);\n extern void instantiate_pending_templates       (int);"}, {"sha": "7d944d054518d765b6bda43799ac436e9fbcba3a", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=d32707707a3a320f338839639c54227d97b95e5a", "patch": "@@ -4514,8 +4514,6 @@ maybe_process_template_type_declaration (tree type, int globalize,\n     ;\n   else\n     {\n-      maybe_check_template_type (type);\n-\n       gcc_assert (IS_AGGR_TYPE (type) || TREE_CODE (type) == ENUMERAL_TYPE);\n \n       if (processing_template_decl)"}, {"sha": "b131213c886ccc25c19da315c68a025cbcde6161", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d32707707a3a320f338839639c54227d97b95e5a", "patch": "@@ -2101,49 +2101,6 @@ check_explicit_specialization (tree declarator,\n   return decl;\n }\n \n-/* TYPE is being declared.  Verify that the use of template headers\n-   and such is reasonable.  Issue error messages if not.  */\n-\n-void\n-maybe_check_template_type (tree type)\n-{\n-  if (template_header_count)\n-    {\n-      /* We are in the scope of some `template <...>' header.  */\n-\n-      int context_depth \n-\t= template_class_depth_real (TYPE_CONTEXT (type),\n-\t\t\t\t     /*count_specializations=*/1);\n-\n-      if (template_header_count <= context_depth)\n-\t/* This is OK; the template headers are for the context.  We\n-\t   are actually too lenient here; like\n-\t   check_explicit_specialization we should consider the number\n-\t   of template types included in the actual declaration.  For\n-\t   example, \n-\n-\t     template <class T> struct S {\n-\t       template <class U> template <class V>\n-\t       struct I {};\n-\t     }; \n-\n-\t   is invalid, but:\n-\n-\t     template <class T> struct S {\n-\t       template <class U> struct I;\n-\t     }; \n-\n-\t     template <class T> template <class U.\n-\t     struct S<T>::I {};\n-\n-\t   is not.  */\n-\t; \n-      else if (template_header_count > context_depth + 1)\n-\t/* There are two many template parameter lists.  */\n-\terror (\"too many template parameter lists in declaration of %qT\", type); \n-    }\n-}\n-\n /* Returns 1 iff PARMS1 and PARMS2 are identical sets of template\n    parameters.  These are represented in the same format used for\n    DECL_TEMPLATE_PARMS.  */"}, {"sha": "255f26961e44fe752fd0c81d2b046f9e4c4d888c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d32707707a3a320f338839639c54227d97b95e5a", "patch": "@@ -1,3 +1,9 @@\n+2005-02-12  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/14479\n+\tPR c++/19487\n+\t* g++.dg/template/enum5.C: New test.\n+\n 2005-02-12  Ira Rosen  <irar@il.ibm.com>\n \n \t* gcc.dg/vect/vect-97.c: New test."}, {"sha": "b7a49f45d0f11b27f276bbf0a99af28f398fadf1", "filename": "gcc/testsuite/g++.dg/template/enum5.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32707707a3a320f338839639c54227d97b95e5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum5.C?ref=d32707707a3a320f338839639c54227d97b95e5a", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+\n+// Origin: robertk@mathematik.uni-freiburg.de\n+//\t   Wolfgang Bangerth <bangerth@ticam.utexas.edu>\n+\n+// PR c++/14479: Template header check for enum\n+\n+template <int dim>\n+struct X {\n+  enum { dimension = dim };\n+  template<int d> void bar ();\n+};\n+\n+template <>\n+template <>\n+void X<0>::bar<0> () {}"}]}