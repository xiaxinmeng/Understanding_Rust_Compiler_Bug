{"sha": "e51f5c08d719d2ba9db128b3d2777cb6bde9b78a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxZjVjMDhkNzE5ZDJiYTlkYjEyOGIzZDI3NzdjYjZiZGU5Yjc4YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T19:43:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T19:43:06Z"}, "message": "config/tilepro: Use rtx_insn\n\ngcc/\n\t* config/tilepro/tilepro-protos.h (tilepro_output_cbranch_with_opcode):\n\tStrengthen param 1 from rtx to rtx_insn *.\n\t(tilepro_output_cbranch): Likewise.\n\t(tilepro_adjust_insn_length): Likewise.\n\t(tilepro_final_prescan_insn): Likewise for sole param.\n\n\t* config/tilepro/tilepro.c (tilepro_legitimize_tls_address):\n\tLikewise for local \"last\".\n\t(cbranch_predicted_p): Likewise for param \"insn\".\n\t(tilepro_output_simple_cbranch_with_opcode): Likewise.\n\t(tilepro_output_cbranch_with_opcode): Likewise.\n\t(tilepro_output_cbranch): Likewise.\n\t(frame_emit_load): Likewise for return type and locals \"seq\",\n\t\"insn\".\n\t(emit_sp_adjust): Likewise for return type and local \"insn\".\n\t(tilepro_expand_epilogue): Likewise for locals \"last_insn\",\n\t\"insn\".\n\t(tilepro_adjust_insn_length): Likewise for param \"insn\".\n\t(next_insn_to_bundle): Likewise for return type and params\n\t\"r\", \"end\".\n\t(tilepro_gen_bundles): Likewise for locals \"insn\", \"next\", \"end\".\n\t(replace_pc_relative_symbol_ref): Likewise for param \"insn\" and\n\tlocal \"new_insns\".\n\t(match_addli_pcrel): Likewise for param \"insn\".\n\t(replace_addli_pcrel): Likewise.\n\t(match_auli_pcrel): Likewise.\n\t(replace_auli_pcrel): Likewise.\n\t(tilepro_fixup_pcrel_references): Likewise for locals \"insn\",\n\t\"next_insn\".\n\t(reorder_var_tracking_notes): Likewise for locals \"insn\", \"next\",\n\t\"queue\", \"next_queue\", \"prev\".\n\t(tilepro_asm_output_mi_thunk): Likewise for local \"insn\".\n\t(tilepro_final_prescan_insn): Likewise for param \"insn\".\n\nFrom-SVN: r214465", "tree": {"sha": "e58a8ce83622977b6e29c192e27fc90e2c918fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e58a8ce83622977b6e29c192e27fc90e2c918fec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e51f5c08d719d2ba9db128b3d2777cb6bde9b78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51f5c08d719d2ba9db128b3d2777cb6bde9b78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e51f5c08d719d2ba9db128b3d2777cb6bde9b78a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51f5c08d719d2ba9db128b3d2777cb6bde9b78a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c6ae6539102ec1cf4aadaf5fc333a46ae889440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6ae6539102ec1cf4aadaf5fc333a46ae889440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6ae6539102ec1cf4aadaf5fc333a46ae889440"}], "stats": {"total": 116, "additions": 78, "deletions": 38}, "files": [{"sha": "b82b8ec77b9c15c0b0c0a3611729f8c1ebc89189", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51f5c08d719d2ba9db128b3d2777cb6bde9b78a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51f5c08d719d2ba9db128b3d2777cb6bde9b78a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e51f5c08d719d2ba9db128b3d2777cb6bde9b78a", "patch": "@@ -1,3 +1,39 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/tilepro/tilepro-protos.h (tilepro_output_cbranch_with_opcode):\n+\tStrengthen param 1 from rtx to rtx_insn *.\n+\t(tilepro_output_cbranch): Likewise.\n+\t(tilepro_adjust_insn_length): Likewise.\n+\t(tilepro_final_prescan_insn): Likewise for sole param.\n+\n+\t* config/tilepro/tilepro.c (tilepro_legitimize_tls_address):\n+\tLikewise for local \"last\".\n+\t(cbranch_predicted_p): Likewise for param \"insn\".\n+\t(tilepro_output_simple_cbranch_with_opcode): Likewise.\n+\t(tilepro_output_cbranch_with_opcode): Likewise.\n+\t(tilepro_output_cbranch): Likewise.\n+\t(frame_emit_load): Likewise for return type and locals \"seq\",\n+\t\"insn\".\n+\t(emit_sp_adjust): Likewise for return type and local \"insn\".\n+\t(tilepro_expand_epilogue): Likewise for locals \"last_insn\",\n+\t\"insn\".\n+\t(tilepro_adjust_insn_length): Likewise for param \"insn\".\n+\t(next_insn_to_bundle): Likewise for return type and params\n+\t\"r\", \"end\".\n+\t(tilepro_gen_bundles): Likewise for locals \"insn\", \"next\", \"end\".\n+\t(replace_pc_relative_symbol_ref): Likewise for param \"insn\" and\n+\tlocal \"new_insns\".\n+\t(match_addli_pcrel): Likewise for param \"insn\".\n+\t(replace_addli_pcrel): Likewise.\n+\t(match_auli_pcrel): Likewise.\n+\t(replace_auli_pcrel): Likewise.\n+\t(tilepro_fixup_pcrel_references): Likewise for locals \"insn\",\n+\t\"next_insn\".\n+\t(reorder_var_tracking_notes): Likewise for locals \"insn\", \"next\",\n+\t\"queue\", \"next_queue\", \"prev\".\n+\t(tilepro_asm_output_mi_thunk): Likewise for local \"insn\".\n+\t(tilepro_final_prescan_insn): Likewise for param \"insn\".\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/tilegx/tilegx-protos.h (tilegx_output_cbranch_with_opcode):"}, {"sha": "fe9b81b4bf15d6871b5a58687d23d02b05032596", "filename": "gcc/config/tilepro/tilepro-protos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51f5c08d719d2ba9db128b3d2777cb6bde9b78a/gcc%2Fconfig%2Ftilepro%2Ftilepro-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51f5c08d719d2ba9db128b3d2777cb6bde9b78a/gcc%2Fconfig%2Ftilepro%2Ftilepro-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro-protos.h?ref=e51f5c08d719d2ba9db128b3d2777cb6bde9b78a", "patch": "@@ -44,11 +44,11 @@ extern void tilepro_expand_umulsi3_highpart (rtx, rtx, rtx);\n extern bool tilepro_emit_setcc (rtx[], enum machine_mode);\n extern void tilepro_emit_conditional_branch (rtx[], enum machine_mode);\n extern rtx tilepro_emit_conditional_move (rtx);\n-extern const char *tilepro_output_cbranch_with_opcode (rtx, rtx *,\n+extern const char *tilepro_output_cbranch_with_opcode (rtx_insn *, rtx *,\n \t\t\t\t\t\t       const char *,\n \t\t\t\t\t\t       const char *, int,\n \t\t\t\t\t\t       bool);\n-extern const char *tilepro_output_cbranch (rtx, rtx *, bool);\n+extern const char *tilepro_output_cbranch (rtx_insn *, rtx *, bool);\n extern void tilepro_expand_tablejump (rtx, rtx);\n extern void tilepro_expand_builtin_vector_binop (rtx (*)(rtx, rtx, rtx),\n \t\t\t\t\t\t enum machine_mode, rtx,\n@@ -62,10 +62,10 @@ extern void tilepro_expand_epilogue (bool);\n extern int tilepro_initial_elimination_offset (int, int);\n extern rtx tilepro_return_addr (int, rtx);\n extern rtx tilepro_eh_return_handler_rtx (void);\n-extern int tilepro_adjust_insn_length (rtx, int);\n+extern int tilepro_adjust_insn_length (rtx_insn *, int);\n \n extern int tilepro_asm_preferred_eh_data_format (int, int);\n-extern void tilepro_final_prescan_insn (rtx);\n+extern void tilepro_final_prescan_insn (rtx_insn *);\n extern const char *tilepro_asm_output_opcode (FILE *, const char *);\n extern void tilepro_function_profiler (FILE *, int);\n "}, {"sha": "853de6bedb1a2ea5ac423f4e4756dabbc352a852", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51f5c08d719d2ba9db128b3d2777cb6bde9b78a/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51f5c08d719d2ba9db128b3d2777cb6bde9b78a/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=e51f5c08d719d2ba9db128b3d2777cb6bde9b78a", "patch": "@@ -897,7 +897,8 @@ tilepro_legitimize_tls_address (rtx addr)\n       case TLS_MODEL_GLOBAL_DYNAMIC:\n       case TLS_MODEL_LOCAL_DYNAMIC:\n \t{\n-\t  rtx r0, temp1, temp2, temp3, got, last;\n+\t  rtx r0, temp1, temp2, temp3, got;\n+\t  rtx_insn *last;\n \n \t  ret = gen_reg_rtx (Pmode);\n \t  r0 = gen_rtx_REG (Pmode, 0);\n@@ -917,7 +918,8 @@ tilepro_legitimize_tls_address (rtx addr)\n \t}\n       case TLS_MODEL_INITIAL_EXEC:\n \t{\n-\t  rtx temp1, temp2, temp3, got, last;\n+\t  rtx temp1, temp2, temp3, got;\n+\t  rtx_insn *last;\n \n \t  ret = gen_reg_rtx (Pmode);\n \t  temp1 = gen_reg_rtx (Pmode);\n@@ -939,7 +941,8 @@ tilepro_legitimize_tls_address (rtx addr)\n \t}\n       case TLS_MODEL_LOCAL_EXEC:\n \t{\n-\t  rtx temp1, last;\n+\t  rtx temp1;\n+\t  rtx_insn *last;\n \n \t  ret = gen_reg_rtx (Pmode);\n \t  temp1 = gen_reg_rtx (Pmode);\n@@ -2422,7 +2425,7 @@ tilepro_emit_conditional_move (rtx cmp)\n /* Return true if INSN is annotated with a REG_BR_PROB note that\n    indicates it's a branch that's predicted taken.  */\n static bool\n-cbranch_predicted_p (rtx insn)\n+cbranch_predicted_p (rtx_insn *insn)\n {\n   rtx x = find_reg_note (insn, REG_BR_PROB, 0);\n \n@@ -2440,7 +2443,7 @@ cbranch_predicted_p (rtx insn)\n /* Output assembly code for a specific branch instruction, appending\n    the branch prediction flag to the opcode if appropriate.  */\n static const char *\n-tilepro_output_simple_cbranch_with_opcode (rtx insn, const char *opcode,\n+tilepro_output_simple_cbranch_with_opcode (rtx_insn *insn, const char *opcode,\n \t\t\t\t\t   int regop, bool netreg_p,\n \t\t\t\t\t   bool reverse_predicted)\n {\n@@ -2455,7 +2458,7 @@ tilepro_output_simple_cbranch_with_opcode (rtx insn, const char *opcode,\n /* Output assembly code for a specific branch instruction, appending\n    the branch prediction flag to the opcode if appropriate.  */\n const char *\n-tilepro_output_cbranch_with_opcode (rtx insn, rtx *operands,\n+tilepro_output_cbranch_with_opcode (rtx_insn *insn, rtx *operands,\n \t\t\t\t    const char *opcode,\n \t\t\t\t    const char *rev_opcode,\n \t\t\t\t    int regop, bool netreg_p)\n@@ -2506,7 +2509,7 @@ tilepro_output_cbranch_with_opcode (rtx insn, rtx *operands,\n \n /* Output assembly code for a conditional branch instruction.  */\n const char *\n-tilepro_output_cbranch (rtx insn, rtx *operands, bool reversed)\n+tilepro_output_cbranch (rtx_insn *insn, rtx *operands, bool reversed)\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n   const char *opcode;\n@@ -3302,7 +3305,7 @@ frame_emit_store (int regno, int regno_note, rtx addr, rtx cfa,\n /* Emit a load in the stack frame to load REGNO from address ADDR.\n    Add a REG_CFA_RESTORE note to CFA_RESTORES if CFA_RESTORES is\n    non-null.  Return the emitted insn.  */\n-static rtx\n+static rtx_insn *\n frame_emit_load (int regno, rtx addr, rtx *cfa_restores)\n {\n   rtx reg = gen_rtx_REG (Pmode, regno);\n@@ -3315,16 +3318,16 @@ frame_emit_load (int regno, rtx addr, rtx *cfa_restores)\n \n /* Helper function to set RTX_FRAME_RELATED_P on instructions,\n    including sequences.  */\n-static rtx\n+static rtx_insn *\n set_frame_related_p (void)\n {\n-  rtx seq = get_insns ();\n-  rtx insn;\n+  rtx_insn *seq = get_insns ();\n+  rtx_insn *insn;\n \n   end_sequence ();\n \n   if (!seq)\n-    return NULL_RTX;\n+    return NULL;\n \n   if (INSN_P (seq))\n     {\n@@ -3355,14 +3358,14 @@ set_frame_related_p (void)\n    large register and using 'add'.\n \n    This happens after reload, so we need to expand it ourselves.  */\n-static rtx\n+static rtx_insn *\n emit_sp_adjust (int offset, int *next_scratch_regno, bool frame_related,\n \t\trtx reg_notes)\n {\n   rtx to_add;\n   rtx imm_rtx = gen_int_si (offset);\n \n-  rtx insn;\n+  rtx_insn *insn;\n   if (satisfies_constraint_J (imm_rtx))\n     {\n       /* We can add this using a single addi or addli.  */\n@@ -3686,7 +3689,7 @@ tilepro_expand_epilogue (bool sibcall_p)\n   rtx reg_save_addr[ROUND_ROBIN_SIZE] = {\n     NULL_RTX, NULL_RTX, NULL_RTX, NULL_RTX\n   };\n-  rtx last_insn, insn;\n+  rtx_insn *last_insn, *insn;\n   unsigned int which_scratch;\n   int offset, start_offset, regno;\n   rtx cfa_restores = NULL_RTX;\n@@ -3908,7 +3911,7 @@ tilepro_frame_pointer_required (void)\n    by attributes in the machine-description file.  This is where we\n    account for bundles.  */\n int\n-tilepro_adjust_insn_length (rtx insn, int length)\n+tilepro_adjust_insn_length (rtx_insn *insn, int length)\n {\n   enum machine_mode mode = GET_MODE (insn);\n \n@@ -3972,8 +3975,8 @@ tilepro_sched_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \n /* Skip over irrelevant NOTEs and such and look for the next insn we\n    would consider bundling.  */\n-static rtx\n-next_insn_to_bundle (rtx r, rtx end)\n+static rtx_insn *\n+next_insn_to_bundle (rtx_insn *r, rtx_insn *end)\n {\n   for (; r != end; r = NEXT_INSN (r))\n     {\n@@ -3983,7 +3986,7 @@ next_insn_to_bundle (rtx r, rtx end)\n \treturn r;\n     }\n \n-  return NULL_RTX;\n+  return NULL;\n }\n \n \n@@ -3996,8 +3999,8 @@ tilepro_gen_bundles (void)\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, cfun)\n   {\n-    rtx insn, next;\n-    rtx end = NEXT_INSN (BB_END (bb));\n+    rtx_insn *insn, *next;\n+    rtx_insn *end = NEXT_INSN (BB_END (bb));\n \n     for (insn = next_insn_to_bundle (BB_HEAD (bb), end); insn; insn = next)\n       {\n@@ -4031,9 +4034,9 @@ tilepro_gen_bundles (void)\n \n /* Helper function for tilepro_fixup_pcrel_references.  */\n static void\n-replace_pc_relative_symbol_ref (rtx insn, rtx opnds[4], bool first_insn_p)\n+replace_pc_relative_symbol_ref (rtx_insn *insn, rtx opnds[4], bool first_insn_p)\n {\n-  rtx new_insns;\n+  rtx_insn *new_insns;\n \n   start_sequence ();\n \n@@ -4072,7 +4075,7 @@ replace_pc_relative_symbol_ref (rtx insn, rtx opnds[4], bool first_insn_p)\n \n /* Returns whether INSN is a pc-relative addli insn.   */\n static bool\n-match_addli_pcrel (rtx insn)\n+match_addli_pcrel (rtx_insn *insn)\n {\n   rtx pattern = PATTERN (insn);\n   rtx unspec;\n@@ -4095,7 +4098,7 @@ match_addli_pcrel (rtx insn)\n \n /* Helper function for tilepro_fixup_pcrel_references.  */\n static void\n-replace_addli_pcrel (rtx insn)\n+replace_addli_pcrel (rtx_insn *insn)\n {\n   rtx pattern = PATTERN (insn);\n   rtx set_src;\n@@ -4129,7 +4132,7 @@ replace_addli_pcrel (rtx insn)\n \n /* Returns whether INSN is a pc-relative auli insn.   */\n static bool\n-match_auli_pcrel (rtx insn)\n+match_auli_pcrel (rtx_insn *insn)\n {\n   rtx pattern = PATTERN (insn);\n   rtx high;\n@@ -4156,7 +4159,7 @@ match_auli_pcrel (rtx insn)\n \n /* Helper function for tilepro_fixup_pcrel_references.  */\n static void\n-replace_auli_pcrel (rtx insn)\n+replace_auli_pcrel (rtx_insn *insn)\n {\n   rtx pattern = PATTERN (insn);\n   rtx set_src;\n@@ -4230,7 +4233,7 @@ replace_auli_pcrel (rtx insn)\n static void\n tilepro_fixup_pcrel_references (void)\n {\n-  rtx insn, next_insn;\n+  rtx_insn *insn, *next_insn;\n   bool same_section_as_entry = true;\n \n   for (insn = get_insns (); insn; insn = next_insn)\n@@ -4267,8 +4270,8 @@ reorder_var_tracking_notes (void)\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, cfun)\n   {\n-    rtx insn, next;\n-    rtx queue = NULL_RTX;\n+    rtx_insn *insn, *next;\n+    rtx_insn *queue = NULL;\n     bool in_bundle = false;\n \n     for (insn = BB_HEAD (bb); insn != BB_END (bb); insn = next)\n@@ -4282,7 +4285,7 @@ reorder_var_tracking_notes (void)\n \t      {\n \t\twhile (queue)\n \t\t  {\n-\t\t    rtx next_queue = PREV_INSN (queue);\n+\t\t    rtx_insn *next_queue = PREV_INSN (queue);\n \t\t    SET_PREV_INSN (NEXT_INSN (insn)) = queue;\n \t\t    SET_NEXT_INSN (queue) = NEXT_INSN (insn);\n \t\t    SET_NEXT_INSN (insn) = queue;\n@@ -4298,7 +4301,7 @@ reorder_var_tracking_notes (void)\n \t  {\n \t    if (in_bundle)\n \t      {\n-\t\trtx prev = PREV_INSN (insn);\n+\t\trtx_insn *prev = PREV_INSN (insn);\n \t\tSET_PREV_INSN (next) = prev;\n \t\tSET_NEXT_INSN (prev) = next;\n \n@@ -4371,7 +4374,8 @@ tilepro_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\t     HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t\t     tree function)\n {\n-  rtx this_rtx, insn, funexp;\n+  rtx this_rtx, funexp;\n+  rtx_insn *insn;\n \n   /* Pretend to be a post-reload pass while generating rtl.  */\n   reload_completed = 1;\n@@ -4870,7 +4874,7 @@ static enum machine_mode insn_mode;\n \n /* Implement FINAL_PRESCAN_INSN.  This is used to emit bundles.  */\n void\n-tilepro_final_prescan_insn (rtx insn)\n+tilepro_final_prescan_insn (rtx_insn *insn)\n {\n   /* Record this for tilepro_asm_output_opcode to examine.  */\n   insn_mode = GET_MODE (insn);"}]}