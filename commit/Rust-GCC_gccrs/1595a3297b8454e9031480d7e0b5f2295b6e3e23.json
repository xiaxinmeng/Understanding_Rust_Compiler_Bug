{"sha": "1595a3297b8454e9031480d7e0b5f2295b6e3e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU5NWEzMjk3Yjg0NTRlOTAzMTQ4MGQ3ZTBiNWYyMjk1YjZlM2UyMw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-10-12T12:43:39Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-10-12T12:43:39Z"}, "message": "\ufffd\nMerge from Cygnus internal source tree.\n\nFrom-SVN: r23021", "tree": {"sha": "0b720d45e8adac1dbd1e4a536e913f1fad22bab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b720d45e8adac1dbd1e4a536e913f1fad22bab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1595a3297b8454e9031480d7e0b5f2295b6e3e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1595a3297b8454e9031480d7e0b5f2295b6e3e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1595a3297b8454e9031480d7e0b5f2295b6e3e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1595a3297b8454e9031480d7e0b5f2295b6e3e23/comments", "author": null, "committer": null, "parents": [{"sha": "9d45bec23da3e091f70ec0232302644ef98220de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d45bec23da3e091f70ec0232302644ef98220de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d45bec23da3e091f70ec0232302644ef98220de"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "1cc5f4667f3a7e797f8b2ff1aff6b2026677b1bd", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1595a3297b8454e9031480d7e0b5f2295b6e3e23/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1595a3297b8454e9031480d7e0b5f2295b6e3e23/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=1595a3297b8454e9031480d7e0b5f2295b6e3e23", "patch": "@@ -51,6 +51,7 @@ struct JCF;\n       RESOLVE_PACKAGE_NAME_P (in EXPR_WITH_FILE_LOCATION)\n    4: RESOLVE_TYPE_NAME_P (in EXPR_WITH_FILE_LOCATION)\n    5: IS_BREAK_STMT_P (in EXPR_WITH_FILE_LOCATION)\n+      IS_CRAFTED_STRING_BUFFER_P (in CALL_EXPR)\n \n    Usage of TYPE_LANG_FLAG_?:\n    1: TYPE_ARRAY_P (in RECORD_TYPE).\n@@ -241,6 +242,7 @@ extern tree soft_monitorenter_node;\n extern tree soft_monitorexit_node;\n extern tree soft_lookupinterfacemethod_node;\n extern tree soft_fmod_node;\n+extern tree soft_exceptioninfo_call_node;\n \n extern tree access_flags_type_node;\n \n@@ -317,6 +319,7 @@ struct lang_identifier\n #define DECL_ARG_SLOT_COUNT(DECL) (DECL_LANG_SPECIFIC(DECL)->arg_slot_count)\n /* Pointer to the function's COMPOUND_EXPR tree */\n #define DECL_FUNCTION_BODY(DECL) (DECL_LANG_SPECIFIC(DECL)->function_decl_body)\n+#define DECL_SPECIFIC_COUNT(DECL) DECL_ARG_SLOT_COUNT(DECL)\n \n /* In a LABEL_DECL, a TREE_VEC that saves the type_map at that point. */\n #define LABEL_TYPE_STATE(NODE) (DECL_INITIAL (NODE))\n@@ -480,7 +483,6 @@ extern tree build_known_method_ref PROTO ((tree, tree, tree, tree, tree));\n extern tree build_class_init PROTO ((tree, tree));\n extern tree build_invokevirtual PROTO ((tree, tree));\n extern tree invoke_build_dtable PROTO ((int, tree));\n-extern tree match_java_method PROTO ((tree, tree, tree));\n extern tree build_field_ref PROTO ((tree, tree, tree));\n extern void pushdecl_force_head PROTO ((tree));\n extern tree build_java_binop PROTO ((enum tree_code, tree, tree, tree));\n@@ -493,6 +495,9 @@ extern tree build_java_array_length_access PROTO ((tree));\n extern tree build_java_arraynull_check PROTO ((tree, tree, tree));\n extern tree create_label_decl PROTO ((tree));\n extern void push_labeled_block PROTO ((tree));\n+extern tree prepare_eh_table_type PROTO ((tree));\n+extern void java_set_exception_lang_code PROTO (());\n+extern tree generate_name PROTO ((void));\n \n /* Access flags etc for a method (a FUNCTION_DECL): */\n \n@@ -663,6 +668,9 @@ extern tree *type_map;\n /* True if STMT (a WFL in that case) holds a BREAK statement */\n #define IS_BREAK_STMT_P(WFL) TREE_LANG_FLAG_5 (WFL)\n \n+/* True if EXPR (a CALL_EXPR in that case) is a crafted StringBuffer */\n+#define IS_CRAFTED_STRING_BUFFER_P(EXPR) TREE_LANG_FLAG_5 (EXPR)\n+\n /* Add a FIELD_DECL to RECORD_TYPE RTYPE.\n    The field has name NAME (a char*), and type FTYPE.\n    Unless this is the first field, FIELD most hold the previous field.\n@@ -709,12 +717,12 @@ extern tree *type_map;\n #define FINISH_RECORD_CONSTRUCTOR(CONS) \\\n   CONSTRUCTOR_ELTS(CONS) = nreverse (CONSTRUCTOR_ELTS(CONS))\n \n-/* New tree code for expression, so we can expand then individually. */\n-#define JAVA_UNARY_PLUS_EXPR ((int)LAST_AND_UNUSED_TREE_CODE + 2)\n-#define JAVA_NEW_ARRAY_EXPR  ((int)LAST_AND_UNUSED_TREE_CODE + 3)\n-#define JAVA_NEW_CLASS_EXPR  ((int)LAST_AND_UNUSED_TREE_CODE + 4)\n-#define JAVA_THIS_EXPR       ((int)LAST_AND_UNUSED_TREE_CODE + 5)\n-\n /* Macro(s) using the definitions above */\n-#define CALL_CONSTRUCTOR_P(NODE) (TREE_CODE (NODE) == JAVA_NEW_CLASS_EXPR)\n+#define CALL_CONSTRUCTOR_P(NODE) (TREE_CODE (NODE) == NEW_CLASS_EXPR)\n+\n+/* Using a FINALLY_EXPR node */\n+#define FINALLY_EXPR_LABEL(NODE) TREE_OPERAND ((NODE), 0)\n+#define FINALLY_EXPR_BLOCK(NODE) TREE_OPERAND ((NODE), 1)\n \n+/* Using a CATCH_EXPR node */\n+#define CATCH_EXPR_GET_EXPR(NODE, V) (V ? LABELED_BLOCK_BODY (NODE) : (NODE))"}]}