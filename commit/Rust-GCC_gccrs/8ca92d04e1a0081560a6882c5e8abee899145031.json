{"sha": "8ca92d04e1a0081560a6882c5e8abee899145031", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhOTJkMDRlMWEwMDgxNTYwYTY4ODJjNWU4YWJlZTg5OTE0NTAzMQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-21T16:53:45Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-21T16:53:45Z"}, "message": "c-common.h (c_common_print_pch_checksum): Remove.\n\nc-family/\n\t* c-common.h (c_common_print_pch_checksum): Remove.\n\t* c-pch.c: Do not include output.h.\n\t(CHECK_NO_ASM_OUT_DURING_PCH): Define and add FIXME.\n\t(asm_out_file): Define iff CHECK_NO_ASM_OUT_DURING_PCH isdefined.\n\t(asm_file_startpos): Define iff CHECK_NO_ASM_OUT_DURING_PCH is defined.\n\t(struct c_pch_header): Remove.\n\t(get_ident): Update gpch version.\n\t(pch_init): Do not print executable_checksum to asm_out_file.\n\tDo not fail if there is no asm_out_file to read back from.  Set\n\tasm_file_startpos only if CHECK_NO_ASM_OUT_DURING_PCH is defined.\n\t(c_common_write_pch): Verify that nothing was written to asm_out_file\n\tsince pch_init was called.  Do not write a c_pch_header, and do not\n\tcopy from asm_out_file to the PCH.\n\t(c_common_read_pch): Do not read a c_pch_header, and do not restore\n\tthe content of asm_out_file from the PCH.\n\t(c_common_print_pch_checksum): Remove.\n\t* c-opts.c (c_common_init): Print out executable_checksum directly.\n\ntestsuite/\n\t* testsuite/gcc.dg/pch/ident-1.c: New test.\n\t* testsuite/gcc.dg/pch/ident-1.hs: Header file for new test.\n\nFrom-SVN: r188856", "tree": {"sha": "091ec6fe315eb1d214f1f60e4eec7a892a1b27ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/091ec6fe315eb1d214f1f60e4eec7a892a1b27ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ca92d04e1a0081560a6882c5e8abee899145031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca92d04e1a0081560a6882c5e8abee899145031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca92d04e1a0081560a6882c5e8abee899145031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca92d04e1a0081560a6882c5e8abee899145031/comments", "author": null, "committer": null, "parents": [{"sha": "7033abe11e47396e0d3517986ae935ef2599fe70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7033abe11e47396e0d3517986ae935ef2599fe70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7033abe11e47396e0d3517986ae935ef2599fe70"}], "stats": {"total": 165, "additions": 62, "deletions": 103}, "files": [{"sha": "6ab476f5a597fbffb7fa7f9e4628c451dd4d35aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ca92d04e1a0081560a6882c5e8abee899145031", "patch": "@@ -7906,7 +7906,7 @@\n \t* tree.h (warn_if_unused_value): Move declaration from here.\n \t* stmt.c (warn_if_unused_value): Move definition from here.\n \n-2010-04-10  Michael Matz  <matz@suse.de>\n+2012-04-10  Michael Matz  <matz@suse.de>\n \n \t* tree-vectorizer.h (_loop_vec_info.strided_stores): Rename to\n \tgrouped_stores.\n@@ -12633,7 +12633,7 @@\n \t* config/alpha/alpha.c (alpha_option_override): Default to\n \tfull IEEE compliance mode for Go language.\n \n-2011-01-29  Tijl Coosemans  <tijl@coosemans.org>\n+2012-01-29  Tijl Coosemans  <tijl@coosemans.org>\n \n \t* config/freebsd-spec.h [TARGET_LIBC_PROVIDES_SSP]\n \t(LINK_SSP_SPEC): Define.\n@@ -13216,7 +13216,7 @@\n \n \t* cfgrtl.c (rtl_dump_bb): Do not dump insns for {ENTRY|EXIT}_BLOCK.\n \n-2011-01-20  Tijl Coosemans  <tijl@coosemans.org>\n+2012-01-20  Tijl Coosemans  <tijl@coosemans.org>\n \n \t* config/i386/i386.c: Fix checks for !TARGET_MACHO.\n \t* config/rs6000/rs6000.c: Likewise."}, {"sha": "056f2ae5ec14acf15bbe18dbaf1027d8f18a18e6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8ca92d04e1a0081560a6882c5e8abee899145031", "patch": "@@ -1,3 +1,23 @@\n+2012-06-21  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* c-common.h (c_common_print_pch_checksum): Remove.\n+\t* c-pch.c: Do not include output.h.\n+\t(CHECK_NO_ASM_OUT_DURING_PCH): Define and add FIXME.\n+\t(asm_out_file): Define iff CHECK_NO_ASM_OUT_DURING_PCH isdefined.\n+\t(asm_file_startpos): Define iff CHECK_NO_ASM_OUT_DURING_PCH is defined.\n+\t(struct c_pch_header): Remove.\n+\t(get_ident): Update gpch version.\n+\t(pch_init): Do not print executable_checksum to asm_out_file.\n+\tDo not fail if there is no asm_out_file to read back from.  Set\n+\tasm_file_startpos only if CHECK_NO_ASM_OUT_DURING_PCH is defined.\n+\t(c_common_write_pch): Verify that nothing was written to asm_out_file\n+\tsince pch_init was called.  Do not write a c_pch_header, and do not\n+\tcopy from asm_out_file to the PCH.\n+\t(c_common_read_pch): Do not read a c_pch_header, and do not restore\n+\tthe content of asm_out_file from the PCH.\n+\t(c_common_print_pch_checksum): Remove.\n+\t* c-opts.c (c_common_init): Print out executable_checksum directly.\n+\n 2012-06-19  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* c-target.def (objc_declare_unresolved_class_reference,"}, {"sha": "11f58e98bbaea1202b671a9dcde8b7d248fd33a5", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=8ca92d04e1a0081560a6882c5e8abee899145031", "patch": "@@ -1020,7 +1020,6 @@ extern void c_common_read_pch (cpp_reader *pfile, const char *name, int fd,\n extern void c_common_write_pch (void);\n extern void c_common_no_more_pch (void);\n extern void c_common_pch_pragma (cpp_reader *pfile, const char *);\n-extern void c_common_print_pch_checksum (FILE *f);\n \n /* In *-checksum.c */\n extern const unsigned char executable_checksum[16];"}, {"sha": "2fa59dc97956ae9ec2ce2f4e8eef6c5a2703a902", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=8ca92d04e1a0081560a6882c5e8abee899145031", "patch": "@@ -1100,7 +1100,13 @@ c_common_init (void)\n   cpp_init_iconv (parse_in);\n \n   if (version_flag)\n-    c_common_print_pch_checksum (stderr);\n+    {\n+      int i;\n+      fputs (\"Compiler executable checksum: \", stderr);\n+      for (i = 0; i < 16; i++)\n+\tfprintf (stderr, \"%02x\", executable_checksum[i]);\n+      putc ('\\n', stderr);\n+    }\n \n   /* Has to wait until now so that cpplib has its hash table.  */\n   init_pragma ();"}, {"sha": "0e21946318f22312b27f574bdf934bcc3983b5c9", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 24, "deletions": 98, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=8ca92d04e1a0081560a6882c5e8abee899145031", "patch": "@@ -26,7 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"c-common.h\"\n-#include \"output.h\" /* for asm_out_file */\n #include \"debug.h\"\n #include \"c-pragma.h\"\n #include \"ggc.h\"\n@@ -36,6 +35,24 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"timevar.h\"\n \n+/* PCH was introduced before unit-at-a-time became the only supported\n+   compilation mode.  To exactly replay the content parsed at PCH generate\n+   time, anything written to asm_out_file was read back in and stored in\n+   the PCH, and written back out to asm_out_file while reading a PCH.\n+\n+   Nowadays, ideally no action by a front end should never result in output\n+   to asm_out_file, and front-end files should not include output.h.  For\n+   now assert that nothing is written to asm_out_file while a PCH is being\n+   generated.  Before GCC 4.8 is released, this code should be removed.\n+   FIXME.  */\n+#define CHECK_NO_ASM_OUT_DURING_PCH\n+#ifdef CHECK_NO_ASM_OUT_DURING_PCH\n+extern FILE *asm_out_file;\n+\n+/* The position in the assembler output file when pch_init was called.  */\n+static long asm_file_startpos;\n+#endif\n+\n /* This is a list of flag variables that must match exactly, and their\n    names for the error message.  The possible values for *flag_var must\n    fit in a 'signed char'.  */\n@@ -69,19 +86,11 @@ struct c_pch_validity\n   size_t target_data_length;\n };\n \n-struct c_pch_header\n-{\n-  unsigned long asm_size;\n-};\n-\n #define IDENT_LENGTH 8\n \n /* The file we'll be writing the PCH to.  */\n static FILE *pch_outfile;\n \n-/* The position in the assembler output file when pch_init was called.  */\n-static long asm_file_startpos;\n-\n static const char *get_ident (void);\n \n /* Compute an appropriate 8-byte magic number for the PCH file, so that\n@@ -93,7 +102,7 @@ static const char *\n get_ident (void)\n {\n   static char result[IDENT_LENGTH];\n-  static const char templ[] = \"gpch.013\";\n+  static const char templ[] = \"gpch.014\";\n   static const char c_language_chars[] = \"Co+O\";\n \n   memcpy (result, templ, IDENT_LENGTH);\n@@ -115,15 +124,6 @@ pch_init (void)\n   void *target_validity;\n   static const char partial_pch[] = \"gpcWrite\";\n \n-#ifdef ASM_COMMENT_START\n-  if (flag_verbose_asm)\n-    {\n-      fprintf (asm_out_file, \"%s \", ASM_COMMENT_START);\n-      c_common_print_pch_checksum (asm_out_file);\n-      fputc ('\\n', asm_out_file);\n-    }\n-#endif\n-\n   if (!pch_file)\n     return;\n \n@@ -153,13 +153,9 @@ pch_init (void)\n       || fwrite (target_validity, v.target_data_length, 1, f) != 1)\n     fatal_error (\"can%'t write to %s: %m\", pch_file);\n \n-  /* We need to be able to re-read the output.  */\n-  /* The driver always provides a valid -o option.  */\n-  if (asm_file_name == NULL\n-      || strcmp (asm_file_name, \"-\") == 0)\n-    fatal_error (\"%qs is not a valid output file\", asm_file_name);\n-\n+#ifdef CHECK_NO_ASM_OUT_DURING_PCH\n   asm_file_startpos = ftell (asm_out_file);\n+#endif\n \n   /* Let the debugging format deal with the PCHness.  */\n   (*debug_hooks->handle_pch) (0);\n@@ -174,9 +170,7 @@ void\n c_common_write_pch (void)\n {\n   char *buf;\n-  long asm_file_end;\n   long written;\n-  struct c_pch_header h;\n \n   timevar_push (TV_PCH_SAVE);\n \n@@ -186,33 +180,9 @@ c_common_write_pch (void)\n \n   cpp_write_pch_deps (parse_in, pch_outfile);\n \n-  asm_file_end = ftell (asm_out_file);\n-  h.asm_size = asm_file_end - asm_file_startpos;\n-\n-  if (fwrite (&h, sizeof (h), 1, pch_outfile) != 1)\n-    fatal_error (\"can%'t write %s: %m\", pch_file);\n-\n-  buf = XNEWVEC (char, 16384);\n-\n-  if (fseek (asm_out_file, asm_file_startpos, SEEK_SET) != 0)\n-    fatal_error (\"can%'t seek in %s: %m\", asm_file_name);\n-\n-  for (written = asm_file_startpos; written < asm_file_end; )\n-    {\n-      long size = asm_file_end - written;\n-      if (size > 16384)\n-\tsize = 16384;\n-      if (fread (buf, size, 1, asm_out_file) != 1)\n-\tfatal_error (\"can%'t read %s: %m\", asm_file_name);\n-      if (fwrite (buf, size, 1, pch_outfile) != 1)\n-\tfatal_error (\"can%'t write %s: %m\", pch_file);\n-      written += size;\n-    }\n-  free (buf);\n-  /* asm_out_file can be written afterwards, so fseek to clear\n-     _IOREAD flag.  */\n-  if (fseek (asm_out_file, 0, SEEK_END) != 0)\n-    fatal_error (\"can%'t seek in %s: %m\", asm_file_name);\n+#ifdef CHECK_NO_ASM_OUT_DURING_PCH\n+  gcc_assert (ftell (asm_out_file) - asm_file_startpos == 0);\n+#endif\n \n   gt_pch_save (pch_outfile);\n \n@@ -375,7 +345,6 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n \t\t   int fd, const char *orig_name ATTRIBUTE_UNUSED)\n {\n   FILE *f;\n-  struct c_pch_header h;\n   struct save_macro_data *smd;\n   expanded_location saved_loc;\n   bool saved_trace_includes;\n@@ -392,38 +361,6 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n \n   cpp_get_callbacks (parse_in)->valid_pch = NULL;\n \n-  if (fread (&h, sizeof (h), 1, f) != 1)\n-    {\n-      cpp_errno (pfile, CPP_DL_ERROR, \"reading\");\n-      fclose (f);\n-      goto end;\n-    }\n-\n-  if (!flag_preprocess_only)\n-    {\n-      unsigned long written;\n-      char * buf = XNEWVEC (char, 16384);\n-\n-      for (written = 0; written < h.asm_size; )\n-\t{\n-\t  long size = h.asm_size - written;\n-\t  if (size > 16384)\n-\t    size = 16384;\n-\t  if (fread (buf, size, 1, f) != 1\n-\t      || fwrite (buf, size, 1, asm_out_file) != 1)\n-\t    cpp_errno (pfile, CPP_DL_ERROR, \"reading\");\n-\t  written += size;\n-\t}\n-      free (buf);\n-    }\n-  else\n-    {\n-      /* If we're preprocessing, don't write to a NULL\n-\t asm_out_file.  */\n-      if (fseek (f, h.asm_size, SEEK_CUR) != 0)\n-\tcpp_errno (pfile, CPP_DL_ERROR, \"seeking\");\n-    }\n-\n   /* Save the location and then restore it after reading the PCH.  */\n   saved_loc = expand_location (line_table->highest_line);\n   saved_trace_includes = line_table->trace_includes;\n@@ -501,14 +438,3 @@ c_common_pch_pragma (cpp_reader *pfile, const char *name)\n   close (fd);\n }\n \n-/* Print out executable_checksum[].  */\n-\n-void\n-c_common_print_pch_checksum (FILE *f)\n-{\n-  int i;\n-  fputs (\"Compiler executable checksum: \", f);\n-  for (i = 0; i < 16; i++)\n-    fprintf (f, \"%02x\", executable_checksum[i]);\n-  putc ('\\n', f);\n-}"}, {"sha": "9ae68f18c1b4d53ad7343494e23cdc4ea68c7a17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ca92d04e1a0081560a6882c5e8abee899145031", "patch": "@@ -1,3 +1,8 @@\n+2012-06-21  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* testsuite/gcc.dg/pch/ident-1.c: New test.\n+\t* testsuite/gcc.dg/pch/ident-1.hs: Header file for new test.\n+\n 2012-06-21  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/53688"}, {"sha": "0b7881aa09e7c3994be50b4d19809f18967078f6", "filename": "gcc/testsuite/gcc.dg/pch/ident-1.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fident-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fident-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fident-1.c?ref=8ca92d04e1a0081560a6882c5e8abee899145031", "patch": "@@ -0,0 +1,2 @@\n+#include \"ident-1.h\"\n+"}, {"sha": "421be43c1374ac1a256b4c56ffeca2f197b59775", "filename": "gcc/testsuite/gcc.dg/pch/ident-1.hs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fident-1.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca92d04e1a0081560a6882c5e8abee899145031/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fident-1.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fident-1.hs?ref=8ca92d04e1a0081560a6882c5e8abee899145031", "patch": "@@ -0,0 +1 @@\n+#ident \"My true identity will never be revealed!\""}]}