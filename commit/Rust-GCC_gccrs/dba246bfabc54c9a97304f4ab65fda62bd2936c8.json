{"sha": "dba246bfabc54c9a97304f4ab65fda62bd2936c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJhMjQ2YmZhYmM1NGM5YTk3MzA0ZjRhYjY1ZmRhNjJiZDI5MzZjOA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-08-14T09:52:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-14T09:52:24Z"}, "message": "[Ada] Incorrect error on inline protected function\n\nThis patch fixes a bug where if a protected function has a pragma\nInline, and has no local variables, and the body consists of a single\nextended_return_statement, and the result type is an indefinite\ncomposite subtype, and inlining is enabled, the compiler gives an error,\neven though the program is legal.\n\n2019-08-14  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* inline.adb (Check_And_Split_Unconstrained_Function): Ignore\n\tprotected functions to get rid of spurious error. The\n\ttransformation done by this procedure triggers legality errors\n\tin the generated code in this case.\n\ngcc/testsuite/\n\n\t* gnat.dg/inline19.adb, gnat.dg/inline19.ads: New testcase.\n\nFrom-SVN: r274467", "tree": {"sha": "802500001857fadec9dcc6a5b14f93c9223b3321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/802500001857fadec9dcc6a5b14f93c9223b3321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dba246bfabc54c9a97304f4ab65fda62bd2936c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba246bfabc54c9a97304f4ab65fda62bd2936c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba246bfabc54c9a97304f4ab65fda62bd2936c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba246bfabc54c9a97304f4ab65fda62bd2936c8/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d1439c7ad59625fea5598dda6679c6f3be1fa1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1439c7ad59625fea5598dda6679c6f3be1fa1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d1439c7ad59625fea5598dda6679c6f3be1fa1c"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "4063f93efd59d01b2b7388fad83fbee8f791ab8b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba246bfabc54c9a97304f4ab65fda62bd2936c8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba246bfabc54c9a97304f4ab65fda62bd2936c8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dba246bfabc54c9a97304f4ab65fda62bd2936c8", "patch": "@@ -1,3 +1,10 @@\n+2019-08-14  Bob Duff  <duff@adacore.com>\n+\n+\t* inline.adb (Check_And_Split_Unconstrained_Function): Ignore\n+\tprotected functions to get rid of spurious error. The\n+\ttransformation done by this procedure triggers legality errors\n+\tin the generated code in this case.\n+\n 2019-08-14  Bob Duff  <duff@adacore.com>\n \n \t* sem_prag.adb (Process_Compile_Time_Warning_Or_Error): Defer"}, {"sha": "5dbd9a14bd574aaf265eb9fcd2ef024dd94e73ac", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba246bfabc54c9a97304f4ab65fda62bd2936c8/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba246bfabc54c9a97304f4ab65fda62bd2936c8/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=dba246bfabc54c9a97304f4ab65fda62bd2936c8", "patch": "@@ -2041,6 +2041,8 @@ package body Inline is\n          Original_Body   : Node_Id;\n          Body_To_Analyze : Node_Id;\n \n+      --  Start of processing for Build_Body_To_Inline\n+\n       begin\n          pragma Assert (Current_Scope = Spec_Id);\n \n@@ -2448,6 +2450,18 @@ package body Inline is\n       elsif Present (Body_To_Inline (Decl)) then\n          return;\n \n+      --  Do not generate a body to inline for protected functions, because the\n+      --  transformation generates a call to a protected procedure, causing\n+      --  spurious errors. We don't inline protected operations anyway, so\n+      --  this is no loss. We might as well ignore intrinsics and foreign\n+      --  conventions as well -- just allow Ada conventions.\n+\n+      elsif not (Convention (Spec_Id) = Convention_Ada\n+        or else Convention (Spec_Id) = Convention_Ada_Pass_By_Copy\n+        or else Convention (Spec_Id) = Convention_Ada_Pass_By_Reference)\n+      then\n+         return;\n+\n       --  Check excluded declarations\n \n       elsif Present (Declarations (N))"}, {"sha": "857505281f912dba9baad478cf8a3a3656471e43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba246bfabc54c9a97304f4ab65fda62bd2936c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba246bfabc54c9a97304f4ab65fda62bd2936c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dba246bfabc54c9a97304f4ab65fda62bd2936c8", "patch": "@@ -1,3 +1,7 @@\n+2019-08-14  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat.dg/inline19.adb, gnat.dg/inline19.ads: New testcase.\n+\n 2019-08-14  Gary Dismukes  <dismukes@adacore.com>\n \n \t* gnat.dg/equal11.adb, gnat.dg/equal11_interface.ads,"}, {"sha": "01be73886e029cb938aca0e24b9e3a528821b1df", "filename": "gcc/testsuite/gnat.dg/inline19.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba246bfabc54c9a97304f4ab65fda62bd2936c8/gcc%2Ftestsuite%2Fgnat.dg%2Finline19.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba246bfabc54c9a97304f4ab65fda62bd2936c8/gcc%2Ftestsuite%2Fgnat.dg%2Finline19.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline19.adb?ref=dba246bfabc54c9a97304f4ab65fda62bd2936c8", "patch": "@@ -0,0 +1,17 @@\n+--  { dg-do compile }\n+--  { dg-options \"-O2\" }\n+\n+package body Inline19 is\n+\n+   S : String := \"Hello\";\n+\n+   protected body P is\n+      function F return String is\n+      begin\n+         return Result : constant String := S do\n+            null;\n+         end return;\n+      end F;\n+   end P;\n+\n+end Inline19;"}, {"sha": "7a2d35c9ab6c2134678ee49a577f438ded3b5ffc", "filename": "gcc/testsuite/gnat.dg/inline19.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba246bfabc54c9a97304f4ab65fda62bd2936c8/gcc%2Ftestsuite%2Fgnat.dg%2Finline19.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba246bfabc54c9a97304f4ab65fda62bd2936c8/gcc%2Ftestsuite%2Fgnat.dg%2Finline19.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline19.ads?ref=dba246bfabc54c9a97304f4ab65fda62bd2936c8", "patch": "@@ -0,0 +1,8 @@\n+package Inline19 is\n+\n+   protected P is\n+      function F return String;\n+      pragma Inline (F);\n+   end P;\n+\n+end Inline19;"}]}