{"sha": "f6449011601f2b983644f491e2348b99826e991a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0NDkwMTE2MDFmMmI5ODM2NDRmNDkxZTIzNDhiOTk4MjZlOTkxYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-16T18:08:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-16T18:08:41Z"}, "message": "constraints.md (z): New constraint.\n\n\t* config/i386/constraints.md (z): New constraint.\n\t* config/i386/i386.c (c): New mode attribute.\n\t(*call): Merge insn pattern from *call_0, *call_1, *call_1_rex64 and\n\t*call_1_rex64_large patterns using \"P\" mode iterator. Use \"<c>zm\"\n\tconstraint for operand 0.\n\t(*call_vzeroupper): Ditto.\n\t(*call_rex64_ms_sysv): Ditto.  Use \"rzm\" constraint for operand 0.\n\t(*call_rex64_ms_sysv_vzeroupper): Ditto.\n\t(*call_pop): Merge insn pattern from *call_pop_0 and *call_pop_1.\n\tUse \"lzm\" constraint for operand 0.\n\t(*call_pop_vzeroupper): Ditto.\n\t(*sibcall): Merge insn pattern from *sibcall_0, *sibcall_1 and\n\t*sibcall_1_rex64 patterns using \"P\" mode iterator.  Use \"Uz\"\n\tconstraint for operand 0.\n\t(*sibcall_vzeroupper): Ditto.\n\t(*sibcall_rex64_ms_sysv): Ditto.\n\t(*sibcall_rex64_ms_sysv_vzeroupper): Ditto.\n\t(*sibcall_pop): Merge insn pattern from *sibcall_pop_0 and\n\t*sibcall_pop_1.  Use \"Uz\" constraint for operand 0.\n\t(*sibcall_pop_vzeroupper): Ditto.\n\t(*call_value): Merge insn pattern from *call_value_0, *call_value_1,\n\t*call_value_1_rex64 and *call_value_1_rex64_large patterns using \"P\"\n\tmode iterator.  Use \"<c>zm\" constraint for operand 1.\n\t(*call_value_vzeroupper): Ditto.\n\t(*call_value_rex64_ms_sysv): Ditto.  Use \"rzm\" constraint\n\tfor operand 0.\n\t(*call_value_rex64_ms_sysv_vzeroupper): Ditto.\n\t(*call_value_pop): Merge insn pattern from *call_value_pop_0 and\n\t*call_value_pop_1.  Use \"lzm\" constraint for operand 1.\n\t(*call_value_pop_vzeroupper): Ditto.\n\t(*sibcall_value): Merge insn pattern from *sibcall_value_0,\n\t*sibcall_value_1 and *sibcall_value_1_rex64 patterns using \"P\"\n\tmode iterator.  Use \"Uz\" constraint for operand 1.\n\t(*sibcall_value_vzeroupper): Ditto.\n\t(*sibcall_value_rex64_ms_sysv): Ditto.\n\t(*sibcall_value_rex64_ms_sysv_vzeroupper): Ditto.\n\t(*sibcall_value_pop): Rename from *sibcall_pop_1.  Use \"Uz\"\n\tconstraint for operand 1.\n\t(*sibcall_value_pop_vzeroupper): Ditto.\n\t(*tls_global_dynamic_64): Use constant_call_address_operand predicate\n\tand \"z\" constraint for operand 2.\n\t(*tls_global_dynamic_32_gnu): Ditto.\n\t(*tls_local_dynamic_base_32_gnu): Ditto.\n\t(*tls_local_dynamic_base_64): Ditto.\n\t(*tls_local_dynamic_32_once): Ditto.\n\t* config/i386/i386.c (ix86_output_call_insn): Remove int_addr argument.\n\tUpdate all callers.\n\t* config/i386/i386-protos.h (ix86_output_call_insn): Update prototype.\n\ntestsuite/ChangeLog:\n\n2011-05-16  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* gcc.target/i386/avx-vzeroupper-16.c: Update scan-assembler-times\n\tscan pattern.\n\t* gcc.target/i386/avx-vzeroupper-17.c: Ditto.\n\t* gcc.target/i386/avx-vzeroupper-18.c: Ditto.\n\nFrom-SVN: r173797", "tree": {"sha": "f4d475fa007f2e5a4572573593c2dfc752e860e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4d475fa007f2e5a4572573593c2dfc752e860e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6449011601f2b983644f491e2348b99826e991a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6449011601f2b983644f491e2348b99826e991a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6449011601f2b983644f491e2348b99826e991a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6449011601f2b983644f491e2348b99826e991a/comments", "author": null, "committer": null, "parents": [{"sha": "c11b69022323800dede2890fdb10b1f304e7d22f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11b69022323800dede2890fdb10b1f304e7d22f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c11b69022323800dede2890fdb10b1f304e7d22f"}], "stats": {"total": 927, "additions": 335, "deletions": 592}, "files": [{"sha": "31edeee5017b1a86b8104ca3937fd1329352d952", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 27, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6449011601f2b983644f491e2348b99826e991a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6449011601f2b983644f491e2348b99826e991a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6449011601f2b983644f491e2348b99826e991a", "patch": "@@ -1,3 +1,54 @@\n+2011-05-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/constraints.md (z): New constraint.\n+\t* config/i386/i386.c (c): New mode attribute.\n+\t(*call): Merge insn pattern from *call_0, *call_1, *call_1_rex64 and\n+\t*call_1_rex64_large patterns using \"P\" mode iterator. Use \"<c>zm\"\n+\tconstraint for operand 0.\n+\t(*call_vzeroupper): Ditto.\n+\t(*call_rex64_ms_sysv): Ditto.  Use \"rzm\" constraint for operand 0.\n+\t(*call_rex64_ms_sysv_vzeroupper): Ditto.\n+\t(*call_pop): Merge insn pattern from *call_pop_0 and *call_pop_1.\n+\tUse \"lzm\" constraint for operand 0.\n+\t(*call_pop_vzeroupper): Ditto.\n+\t(*sibcall): Merge insn pattern from *sibcall_0, *sibcall_1 and\n+\t*sibcall_1_rex64 patterns using \"P\" mode iterator.  Use \"Uz\"\n+\tconstraint for operand 0.\n+\t(*sibcall_vzeroupper): Ditto.\n+\t(*sibcall_rex64_ms_sysv): Ditto.\n+\t(*sibcall_rex64_ms_sysv_vzeroupper): Ditto.\n+\t(*sibcall_pop): Merge insn pattern from *sibcall_pop_0 and\n+\t*sibcall_pop_1.  Use \"Uz\" constraint for operand 0.\n+\t(*sibcall_pop_vzeroupper): Ditto.\n+\t(*call_value): Merge insn pattern from *call_value_0, *call_value_1,\n+\t*call_value_1_rex64 and *call_value_1_rex64_large patterns using \"P\"\n+\tmode iterator.  Use \"<c>zm\" constraint for operand 1.\n+\t(*call_value_vzeroupper): Ditto.\n+\t(*call_value_rex64_ms_sysv): Ditto.  Use \"rzm\" constraint\n+\tfor operand 0.\n+\t(*call_value_rex64_ms_sysv_vzeroupper): Ditto.\n+\t(*call_value_pop): Merge insn pattern from *call_value_pop_0 and\n+\t*call_value_pop_1.  Use \"lzm\" constraint for operand 1.\n+\t(*call_value_pop_vzeroupper): Ditto.\n+\t(*sibcall_value): Merge insn pattern from *sibcall_value_0,\n+\t*sibcall_value_1 and *sibcall_value_1_rex64 patterns using \"P\"\n+\tmode iterator.  Use \"Uz\" constraint for operand 1.\n+\t(*sibcall_value_vzeroupper): Ditto.\n+\t(*sibcall_value_rex64_ms_sysv): Ditto.\n+\t(*sibcall_value_rex64_ms_sysv_vzeroupper): Ditto.\n+\t(*sibcall_value_pop): Rename from *sibcall_pop_1.  Use \"Uz\"\n+\tconstraint for operand 1.\n+\t(*sibcall_value_pop_vzeroupper): Ditto.\n+\t(*tls_global_dynamic_64): Use constant_call_address_operand predicate\n+\tand \"z\" constraint for operand 2.\n+\t(*tls_global_dynamic_32_gnu): Ditto.\n+\t(*tls_local_dynamic_base_32_gnu): Ditto.\n+\t(*tls_local_dynamic_base_64): Ditto.\n+\t(*tls_local_dynamic_32_once): Ditto.\n+\t* config/i386/i386.c (ix86_output_call_insn): Remove int_addr argument.\n+\tUpdate all callers.\n+\t* config/i386/i386-protos.h (ix86_output_call_insn): Update prototype.\n+\n 2011-05-16  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.c (gimple_types_compatible_p_1): Use names of the\n@@ -6,9 +57,8 @@\n \n 2011-05-16  Richard Guenther  <rguenther@suse.de>\n \n-\t* gimple.c (iterative_hash_gimple_type): Re-instantiate\n-\tchange to always visit pointer target and function result\n-\tand argument types.\n+\t* gimple.c (iterative_hash_gimple_type): Re-instantiate change to\n+\talways visit pointer target and function result and argument types.\n \n 2011-05-16  Jason Merrill  <jason@redhat.com>\n \n@@ -33,19 +83,17 @@\n \n \t* gimple.c (struct type_hash_pair): New type.\n \t(type_hash_pair_compare): New function.\n-\t(iterative_hash_gimple_type): Mix in SCC member hashes in\n-\thash-order.\n+\t(iterative_hash_gimple_type): Mix in SCC member hashes in hash-order.\n \n 2011-05-16  Revital Eres  <revital.eres@linaro.org>\n \n-\t* modulo-sched.c (doloop_register_get): Check !DEBUG_INSN_P\n-\tfirst.\n+\t* modulo-sched.c (doloop_register_get): Check !DEBUG_INSN_P first.\n \n 2011-05-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (floating point move splitters): Fix\n \tusage of standard_80387_constant_p.\n-\t(ix86_preferred_reload_class): Ditto.\n+\t* config/i386/i386.c (ix86_preferred_reload_class): Ditto.\n \n 2011-05-15  Uros Bizjak  <ubizjak@gmail.com>\n \n@@ -76,25 +124,6 @@\n \toptimize_size is set.\n \t(standard_sse_constant_opcode): Output conditional AVX insn templates.\n \n-2011-05-14  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\t* config/i386/constraint.md (Yd, Yx): New register constraints.\n-\t* config/i386/i386.md (*pushdf): Merge with *pushdf_nointeger.  Use\n-\tYd conditional register constraint.\n-\t(*movtf_internal): Use standard_sse_constant_opcode.\n-\t(*movxf_internal): Merge with *movxf_internal_nointeger.  Use\n-\tYx conditional register constraint.\n-\t(*movdf_internal): Merge with *movdf_internal_nointeger.  Use\n-\tYd conditional register constraint.  Use standard_sse_constant_p to\n-\tcheck for valid SSE constants and call standard_sse_constant_opcode to\n-\toutput SSE insn.\n-\t(*movsf_internal): Use standard_sse_constant_p to check for valid SSE\n-\tconstants and call standard_sse_constant_opcode to output SSE insn.\n-\t* config/i386/i386.c (ix86_option_ovverride_internal): Set\n-\tTARGET_INTEGER_DFMODE_MOVES for 64bit targets.  Clear it when\n-\toptimize_size is set.\n-\t(standard_sse_constant_opcode): Output conditional AVX insn templates.\n-\n 2011-05-14  Tobias Burnus  <burnus@net-b.de>\n \n \t* doc/invoke.texi (-Ofast): Also enables -fstack-arrays."}, {"sha": "08f86d3433aff94e0e6111c1bbc4b69e585bf4f5", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6449011601f2b983644f491e2348b99826e991a/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6449011601f2b983644f491e2348b99826e991a/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=f6449011601f2b983644f491e2348b99826e991a", "patch": "@@ -19,7 +19,7 @@\n \n ;;; Unused letters:\n ;;;     B     H           T  W\n-;;;           h jk          vw  z\n+;;;           h jk          vw\n \n ;; Integer register constraints.\n ;; It is not necessary to define 'r' here.\n@@ -115,6 +115,10 @@\n  \"optimize_function_for_speed_p (cfun) ? GENERAL_REGS : NO_REGS\"\n  \"@internal Any integer register when integer XFmode moves are enabled.\")\n \n+(define_constraint \"z\"\n+  \"@internal Yada, yada, yada...\"\n+  (match_operand 0 \"constant_call_address_operand\"))\n+\n ;; Integer constant constraints.\n (define_constraint \"I\"\n   \"Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\""}, {"sha": "70e35b37eb22e359edfc2e37524d1d6617fd26c6", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6449011601f2b983644f491e2348b99826e991a/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6449011601f2b983644f491e2348b99826e991a/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=f6449011601f2b983644f491e2348b99826e991a", "patch": "@@ -270,7 +270,7 @@ extern int asm_preferred_eh_data_format (int, int);\n extern enum attr_cpu ix86_schedule;\n #endif\n \n-extern const char * ix86_output_call_insn (rtx insn, rtx call_op, int addr_op);\n+extern const char * ix86_output_call_insn (rtx insn, rtx call_op);\n \n #ifdef RTX_CODE\n /* Target data for multipass lookahead scheduling."}, {"sha": "db64434fb45a5cb297c3b031683dfa6d6e66f1e3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6449011601f2b983644f491e2348b99826e991a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6449011601f2b983644f491e2348b99826e991a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f6449011601f2b983644f491e2348b99826e991a", "patch": "@@ -22073,23 +22073,25 @@ ix86_split_call_vzeroupper (rtx insn, rtx vzeroupper)\n /* Output the assembly for a call instruction.  */\n \n const char *\n-ix86_output_call_insn (rtx insn, rtx call_op, int addr_op)\n+ix86_output_call_insn (rtx insn, rtx call_op)\n {\n   bool direct_p = constant_call_address_operand (call_op, Pmode);\n   bool seh_nop_p = false;\n-\n-  gcc_assert (addr_op == 0 || addr_op == 1);\n+  const char *xasm;\n \n   if (SIBLING_CALL_P (insn))\n     {\n       if (direct_p)\n-\treturn addr_op ? \"jmp\\t%P1\" : \"jmp\\t%P0\";\n+\txasm = \"jmp\\t%P0\";\n       /* SEH epilogue detection requires the indirect branch case\n \t to include REX.W.  */\n       else if (TARGET_SEH)\n-\treturn addr_op ? \"rex.W jmp %A1\" : \"rex.W jmp %A0\";\n+\txasm = \"rex.W jmp %A0\";\n       else\n-\treturn addr_op ? \"jmp\\t%A1\" : \"jmp\\t%A0\";\n+\txasm = \"jmp\\t%A0\";\n+\n+      output_asm_insn (xasm, &call_op);\n+      return \"\";\n     }\n \n   /* SEH unwinding can require an extra nop to be emitted in several\n@@ -22123,19 +22125,16 @@ ix86_output_call_insn (rtx insn, rtx call_op, int addr_op)\n     }\n \n   if (direct_p)\n-    {\n-      if (seh_nop_p)\n-\treturn addr_op ? \"call\\t%P1\\n\\tnop\" : \"call\\t%P0\\n\\tnop\";\n-      else\n-\treturn addr_op ? \"call\\t%P1\" : \"call\\t%P0\";\n-    }\n+    xasm = \"call\\t%P0\";\n   else\n-    {\n-      if (seh_nop_p)\n-\treturn addr_op ? \"call\\t%A1\\n\\tnop\" : \"call\\t%A0\\n\\tnop\";\n-      else\n-\treturn addr_op ? \"call\\t%A1\" : \"call\\t%A0\";\n-    }\n+    xasm = \"call\\t%A0\";\n+\n+  output_asm_insn (xasm, &call_op);\n+\n+  if (seh_nop_p)\n+    return \"nop\";\n+\n+  return \"\";\n }\n \f\n /* Clear stack slot assignments remembered from previous functions."}, {"sha": "fb9cd645419d1f83913efb863649fba9a4af9c34", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 245, "deletions": 541, "changes": 786, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6449011601f2b983644f491e2348b99826e991a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6449011601f2b983644f491e2348b99826e991a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f6449011601f2b983644f491e2348b99826e991a", "patch": "@@ -11064,56 +11064,134 @@\n ;; P6 processors will jump to the address after the decrement when %esp\n ;; is used as a call operand, so they will execute return address as a code.\n ;; See Pentium Pro errata 70, Pentium 2 errata A33 and Pentium 3 errata E17.\n- \n+\n+;; Register constraint for call instruction.\n+(define_mode_attr c [(SI \"l\") (DI \"r\")])\n+\n ;; Call subroutine returning no value.\n \n-(define_expand \"call_pop\"\n-  [(parallel [(call (match_operand:QI 0 \"\" \"\")\n-\t\t    (match_operand:SI 1 \"\" \"\"))\n-\t      (set (reg:SI SP_REG)\n-\t\t   (plus:SI (reg:SI SP_REG)\n-\t\t\t    (match_operand:SI 3 \"\" \"\")))])]\n-  \"!TARGET_64BIT\"\n+(define_expand \"call\"\n+  [(call (match_operand:QI 0 \"\" \"\")\n+\t (match_operand 1 \"\" \"\"))\n+   (use (match_operand 2 \"\" \"\"))]\n+  \"\"\n {\n   ix86_expand_call (NULL, operands[0], operands[1],\n-\t\t    operands[2], operands[3], 0);\n+\t\t    operands[2], NULL, 0);\n+  DONE;\n+})\n+\n+(define_expand \"sibcall\"\n+  [(call (match_operand:QI 0 \"\" \"\")\n+\t (match_operand 1 \"\" \"\"))\n+   (use (match_operand 2 \"\" \"\"))]\n+  \"\"\n+{\n+  ix86_expand_call (NULL, operands[0], operands[1],\n+\t\t    operands[2], NULL, 1);\n   DONE;\n })\n \n-(define_insn_and_split \"*call_pop_0_vzeroupper\"\n+(define_insn_and_split \"*call_vzeroupper\"\n+  [(call (mem:QI (match_operand:P 0 \"call_insn_operand\" \"<c>zm\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n+   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n+  \"TARGET_VZEROUPPER && !SIBLING_CALL_P (insn)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_call_vzeroupper (curr_insn, operands[2]); DONE;\"\n+  [(set_attr \"type\" \"call\")])\n+\n+(define_insn \"*call\"\n+  [(call (mem:QI (match_operand:P 0 \"call_insn_operand\" \"<c>zm\"))\n+\t (match_operand 1 \"\" \"\"))]\n+  \"!SIBLING_CALL_P (insn)\"\n+  \"* return ix86_output_call_insn (insn, operands[0]);\"\n+  [(set_attr \"type\" \"call\")])\n+\n+(define_insn_and_split \"*call_rex64_ms_sysv_vzeroupper\"\n   [(parallel\n-    [(call (mem:QI (match_operand:SI 0 \"constant_call_address_operand\" \"\"))\n-\t   (match_operand:SI 1 \"\" \"\"))\n-     (set (reg:SI SP_REG)\n-\t  (plus:SI (reg:SI SP_REG)\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"\")))])\n-   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n+    [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rzm\"))\n+\t   (match_operand 1 \"\" \"\"))\n+     (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n+     (clobber (reg:TI XMM6_REG))\n+     (clobber (reg:TI XMM7_REG))\n+     (clobber (reg:TI XMM8_REG))\n+     (clobber (reg:TI XMM9_REG))\n+     (clobber (reg:TI XMM10_REG))\n+     (clobber (reg:TI XMM11_REG))\n+     (clobber (reg:TI XMM12_REG))\n+     (clobber (reg:TI XMM13_REG))\n+     (clobber (reg:TI XMM14_REG))\n+     (clobber (reg:TI XMM15_REG))\n+     (clobber (reg:DI SI_REG))\n+     (clobber (reg:DI DI_REG))])\n+   (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && !TARGET_64BIT\"\n+  \"TARGET_VZEROUPPER && TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n+  \"ix86_split_call_vzeroupper (curr_insn, operands[2]); DONE;\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"*call_pop_0\"\n-  [(call (mem:QI (match_operand:SI 0 \"constant_call_address_operand\" \"\"))\n-\t (match_operand:SI 1 \"\" \"\"))\n-   (set (reg:SI SP_REG)\n-\t(plus:SI (reg:SI SP_REG)\n-\t\t (match_operand:SI 2 \"immediate_operand\" \"\")))]\n+(define_insn \"*call_rex64_ms_sysv\"\n+  [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rzm\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n+   (clobber (reg:TI XMM6_REG))\n+   (clobber (reg:TI XMM7_REG))\n+   (clobber (reg:TI XMM8_REG))\n+   (clobber (reg:TI XMM9_REG))\n+   (clobber (reg:TI XMM10_REG))\n+   (clobber (reg:TI XMM11_REG))\n+   (clobber (reg:TI XMM12_REG))\n+   (clobber (reg:TI XMM13_REG))\n+   (clobber (reg:TI XMM14_REG))\n+   (clobber (reg:TI XMM15_REG))\n+   (clobber (reg:DI SI_REG))\n+   (clobber (reg:DI DI_REG))]\n+  \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n+  \"* return ix86_output_call_insn (insn, operands[0]);\"\n+  [(set_attr \"type\" \"call\")])\n+\n+(define_insn_and_split \"*sibcall_vzeroupper\"\n+  [(call (mem:QI (match_operand:P 0 \"sibcall_insn_operand\" \"Uz\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n+   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n+  \"TARGET_VZEROUPPER && SIBLING_CALL_P (insn)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_call_vzeroupper (curr_insn, operands[2]); DONE;\"\n+  [(set_attr \"type\" \"call\")])\n+\n+(define_insn \"*sibcall\"\n+  [(call (mem:QI (match_operand:P 0 \"sibcall_insn_operand\" \"Uz\"))\n+\t (match_operand 1 \"\" \"\"))]\n+  \"SIBLING_CALL_P (insn)\"\n+  \"* return ix86_output_call_insn (insn, operands[0]);\"\n+  [(set_attr \"type\" \"call\")])\n+\n+(define_expand \"call_pop\"\n+  [(parallel [(call (match_operand:QI 0 \"\" \"\")\n+\t\t    (match_operand:SI 1 \"\" \"\"))\n+\t      (set (reg:SI SP_REG)\n+\t\t   (plus:SI (reg:SI SP_REG)\n+\t\t\t    (match_operand:SI 3 \"\" \"\")))])]\n   \"!TARGET_64BIT\"\n {\n-  if (SIBLING_CALL_P (insn))\n-    return \"jmp\\t%P0\";\n-  else\n-    return \"call\\t%P0\";\n-}\n-  [(set_attr \"type\" \"call\")])\n+  ix86_expand_call (NULL, operands[0], operands[1],\n+\t\t    operands[2], operands[3], 0);\n+  DONE;\n+})\n \n-(define_insn_and_split \"*call_pop_1_vzeroupper\"\n+(define_insn_and_split \"*call_pop_vzeroupper\"\n   [(parallel\n-    [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"lsm\"))\n+    [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"lzm\"))\n \t   (match_operand:SI 1 \"\" \"\"))\n      (set (reg:SI SP_REG)\n \t  (plus:SI (reg:SI SP_REG)\n@@ -11127,27 +11205,23 @@\n   \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"*call_pop_1\"\n-  [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"lsm\"))\n-\t (match_operand:SI 1 \"\" \"\"))\n+(define_insn \"*call_pop\"\n+  [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"lzm\"))\n+\t (match_operand 1 \"\" \"\"))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"!TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-{\n-  if (constant_call_address_operand (operands[0], Pmode))\n-    return \"call\\t%P0\";\n-  return \"call\\t%A0\";\n-}\n+  \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn_and_split \"*sibcall_pop_1_vzeroupper\"\n+(define_insn_and_split \"*sibcall_pop_vzeroupper\"\n  [(parallel\n-   [(call (mem:QI (match_operand:SI 0 \"sibcall_insn_operand\" \"s,U\"))\n-\t   (match_operand:SI 1 \"\" \"\"))\n+   [(call (mem:QI (match_operand:SI 0 \"sibcall_insn_operand\" \"Uz\"))\n+\t  (match_operand 1 \"\" \"\"))\n      (set (reg:SI SP_REG)\n \t  (plus:SI (reg:SI SP_REG)\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"i,i\")))])\n+\t\t   (match_operand:SI 2 \"immediate_operand\" \"i\")))])\n    (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n   \"TARGET_VZEROUPPER && !TARGET_64BIT && SIBLING_CALL_P (insn)\"\n@@ -11157,120 +11231,89 @@\n   \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"*sibcall_pop_1\"\n-  [(call (mem:QI (match_operand:SI 0 \"sibcall_insn_operand\" \"s,U\"))\n-\t (match_operand:SI 1 \"\" \"\"))\n+(define_insn \"*sibcall_pop\"\n+  [(call (mem:QI (match_operand:SI 0 \"sibcall_insn_operand\" \"Uz\"))\n+\t (match_operand 1 \"\" \"\"))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n-\t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n+\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"!TARGET_64BIT && SIBLING_CALL_P (insn)\"\n-  \"@\n-   jmp\\t%P0\n-   jmp\\t%A0\"\n+  \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_expand \"call\"\n-  [(call (match_operand:QI 0 \"\" \"\")\n-\t (match_operand 1 \"\" \"\"))\n-   (use (match_operand 2 \"\" \"\"))]\n+;; Call subroutine, returning value in operand 0\n+\n+(define_expand \"call_value\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (match_operand:QI 1 \"\" \"\")\n+\t      (match_operand 2 \"\" \"\")))\n+   (use (match_operand 3 \"\" \"\"))]\n   \"\"\n {\n-  ix86_expand_call (NULL, operands[0], operands[1], operands[2], NULL, 0);\n+  ix86_expand_call (operands[0], operands[1], operands[2],\n+\t\t    operands[3], NULL, 0);\n   DONE;\n })\n \n-(define_expand \"sibcall\"\n-  [(call (match_operand:QI 0 \"\" \"\")\n-\t (match_operand 1 \"\" \"\"))\n-   (use (match_operand 2 \"\" \"\"))]\n+(define_expand \"sibcall_value\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (match_operand:QI 1 \"\" \"\")\n+\t      (match_operand 2 \"\" \"\")))\n+   (use (match_operand 3 \"\" \"\"))]\n   \"\"\n {\n-  ix86_expand_call (NULL, operands[0], operands[1], operands[2], NULL, 1);\n+  ix86_expand_call (operands[0], operands[1], operands[2],\n+\t\t    operands[3], NULL, 1);\n   DONE;\n })\n \n-(define_insn_and_split \"*call_0_vzeroupper\"\n-  [(call (mem:QI (match_operand 0 \"constant_call_address_operand\" \"\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[2]); DONE;\"\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn \"*call_0\"\n-  [(call (mem:QI (match_operand 0 \"constant_call_address_operand\" \"\"))\n-\t (match_operand 1 \"\" \"\"))]\n-  \"\"\n-  { return ix86_output_call_insn (insn, operands[0], 0); }\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn_and_split \"*call_1_vzeroupper\"\n-  [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"lsm\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && !TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[2]); DONE;\"\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn \"*call_1\"\n-  [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"lsm\"))\n-\t (match_operand 1 \"\" \"\"))]\n-  \"!TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[0], 0); }\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn_and_split \"*sibcall_1_vzeroupper\"\n-  [(call (mem:QI (match_operand:SI 0 \"sibcall_insn_operand\" \"s,U\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n+(define_insn_and_split \"*call_value_vzeroupper\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:QI (match_operand:P 1 \"call_insn_operand\" \"<c>zm\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && !TARGET_64BIT && SIBLING_CALL_P (insn)\"\n+  \"TARGET_VZEROUPPER && !SIBLING_CALL_P (insn)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[2]); DONE;\"\n-  [(set_attr \"type\" \"call\")])\n+  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n+  [(set_attr \"type\" \"callv\")])\n \n-(define_insn \"*sibcall_1\"\n-  [(call (mem:QI (match_operand:SI 0 \"sibcall_insn_operand\" \"s,U\"))\n-\t (match_operand 1 \"\" \"\"))]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[0], 0); }\n-  [(set_attr \"type\" \"call\")])\n+(define_insn \"*call_value\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:QI (match_operand:P 1 \"call_insn_operand\" \"<c>zm\"))\n+\t      (match_operand 2 \"\" \"\")))]\n+  \"!SIBLING_CALL_P (insn)\"\n+  \"* return ix86_output_call_insn (insn, operands[1]);\"\n+  [(set_attr \"type\" \"callv\")])\n \n-(define_insn_and_split \"*call_1_rex64_vzeroupper\"\n-  [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rsm\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n+(define_insn_and_split \"*sibcall_value_vzeroupper\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:QI (match_operand:P 1 \"sibcall_insn_operand\" \"Uz\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && TARGET_64BIT && !SIBLING_CALL_P (insn)\n-   && ix86_cmodel != CM_LARGE && ix86_cmodel != CM_LARGE_PIC\"\n+  \"TARGET_VZEROUPPER && SIBLING_CALL_P (insn)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[2]); DONE;\"\n-  [(set_attr \"type\" \"call\")])\n+  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n+  [(set_attr \"type\" \"callv\")])\n \n-(define_insn \"*call_1_rex64\"\n-  [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rsm\"))\n-\t (match_operand 1 \"\" \"\"))]\n-  \"TARGET_64BIT && !SIBLING_CALL_P (insn)\n-   && ix86_cmodel != CM_LARGE && ix86_cmodel != CM_LARGE_PIC\"\n-  { return ix86_output_call_insn (insn, operands[0], 0); }\n-  [(set_attr \"type\" \"call\")])\n+(define_insn \"*sibcall_value\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:QI (match_operand:P 1 \"sibcall_insn_operand\" \"Uz\"))\n+\t      (match_operand 2 \"\" \"\")))]\n+  \"SIBLING_CALL_P (insn)\"\n+  \"* return ix86_output_call_insn (insn, operands[1]);\"\n+  [(set_attr \"type\" \"callv\")])\n \n-(define_insn_and_split \"*call_1_rex64_ms_sysv_vzeroupper\"\n+(define_insn_and_split \"*call_value_rex64_ms_sysv_vzeroupper\"\n   [(parallel\n-    [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rsm\"))\n-\t   (match_operand 1 \"\" \"\"))\n+    [(set (match_operand 0 \"\" \"\")\n+\t  (call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rzm\"))\n+\t\t(match_operand 2 \"\" \"\")))\n      (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n      (clobber (reg:TI XMM6_REG))\n      (clobber (reg:TI XMM7_REG))\n@@ -11284,18 +11327,19 @@\n      (clobber (reg:TI XMM15_REG))\n      (clobber (reg:DI SI_REG))\n      (clobber (reg:DI DI_REG))])\n-   (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n+   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n    \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n   \"TARGET_VZEROUPPER && TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[2]); DONE;\"\n-  [(set_attr \"type\" \"call\")])\n+  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n+  [(set_attr \"type\" \"callv\")])\n \n-(define_insn \"*call_1_rex64_ms_sysv\"\n-  [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rsm\"))\n-\t (match_operand 1 \"\" \"\"))\n+(define_insn \"*call_value_rex64_ms_sysv\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rzm\"))\n+\t      (match_operand 2 \"\" \"\")))\n    (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n    (clobber (reg:TI XMM6_REG))\n    (clobber (reg:TI XMM7_REG))\n@@ -11310,48 +11354,9 @@\n    (clobber (reg:DI SI_REG))\n    (clobber (reg:DI DI_REG))]\n   \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[0], 0); }\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn_and_split \"*call_1_rex64_large_vzeroupper\"\n-  [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rm\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[2]); DONE;\"\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn \"*call_1_rex64_large\"\n-  [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rm\"))\n-\t (match_operand 1 \"\" \"\"))]\n-  \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[0], 0); }\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn_and_split \"*sibcall_1_rex64_vzeroupper\"\n-  [(call (mem:QI (match_operand:DI 0 \"sibcall_insn_operand\" \"s,U\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (unspec [(match_operand 2 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && TARGET_64BIT && SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[2]); DONE;\"\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn \"*sibcall_1_rex64\"\n-  [(call (mem:QI (match_operand:DI 0 \"sibcall_insn_operand\" \"s,U\"))\n-\t (match_operand 1 \"\" \"\"))]\n-  \"TARGET_64BIT && SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[0], 0); }\n-  [(set_attr \"type\" \"call\")])\n+  \"* return ix86_output_call_insn (insn, operands[1]);\"\n+  [(set_attr \"type\" \"callv\")])\n \n-;; Call subroutine, returning value in operand 0\n (define_expand \"call_value_pop\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (match_operand:QI 1 \"\" \"\")\n@@ -11366,31 +11371,61 @@\n   DONE;\n })\n \n-(define_expand \"call_value\"\n+(define_insn_and_split \"*call_value_pop_vzeroupper\"\n+  [(parallel\n+    [(set (match_operand 0 \"\" \"\")\n+\t  (call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"lzm\"))\n+\t\t(match_operand 2 \"\" \"\")))\n+     (set (reg:SI SP_REG)\n+\t  (plus:SI (reg:SI SP_REG)\n+\t\t   (match_operand:SI 3 \"immediate_operand\" \"i\")))])\n+   (unspec [(match_operand 4 \"const_int_operand\" \"\")]\n+   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n+  \"TARGET_VZEROUPPER && !TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_call_vzeroupper (curr_insn, operands[4]); DONE;\"\n+  [(set_attr \"type\" \"callv\")])\n+\n+(define_insn \"*call_value_pop\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (match_operand:QI 1 \"\" \"\")\n-\t      (match_operand:SI 2 \"\" \"\")))\n-   (use (match_operand:SI 3 \"\" \"\"))]\n-  ;; Operand 3 is not used on the i386.\n-  \"\"\n-{\n-  ix86_expand_call (operands[0], operands[1], operands[2],\n-\t\t    operands[3], NULL, 0);\n-  DONE;\n-})\n+\t(call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"lzm\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (set (reg:SI SP_REG)\n+\t(plus:SI (reg:SI SP_REG)\n+\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n+  \"!TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n+  \"* return ix86_output_call_insn (insn, operands[1]);\"\n+  [(set_attr \"type\" \"callv\")])\n \n-(define_expand \"sibcall_value\"\n+(define_insn_and_split \"*sibcall_value_pop_vzeroupper\"\n+ [(parallel\n+   [(set (match_operand 0 \"\" \"\")\n+\t  (call (mem:QI (match_operand:SI 1 \"sibcall_insn_operand\" \"Uz\"))\n+\t\t(match_operand 2 \"\" \"\")))\n+     (set (reg:SI SP_REG)\n+\t  (plus:SI (reg:SI SP_REG)\n+\t\t   (match_operand:SI 3 \"immediate_operand\" \"i\")))])\n+   (unspec [(match_operand 4 \"const_int_operand\" \"\")]\n+   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n+  \"TARGET_VZEROUPPER && !TARGET_64BIT && SIBLING_CALL_P (insn)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_call_vzeroupper (curr_insn, operands[4]); DONE;\"\n+  [(set_attr \"type\" \"callv\")])\n+\n+(define_insn \"*sibcall_value_pop\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (match_operand:QI 1 \"\" \"\")\n-\t      (match_operand:SI 2 \"\" \"\")))\n-   (use (match_operand:SI 3 \"\" \"\"))]\n-  ;; Operand 3 is not used on the i386.\n-  \"\"\n-{\n-  ix86_expand_call (operands[0], operands[1], operands[2],\n-\t\t    operands[3], NULL, 1);\n-  DONE;\n-})\n+\t(call (mem:QI (match_operand:SI 1 \"sibcall_insn_operand\" \"Uz\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (set (reg:SI SP_REG)\n+\t(plus:SI (reg:SI SP_REG)\n+\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n+  \"!TARGET_64BIT && SIBLING_CALL_P (insn)\"\n+  \"* return ix86_output_call_insn (insn, operands[1]);\"\n+  [(set_attr \"type\" \"callv\")])\n \n ;; Call subroutine returning any type.\n \n@@ -12322,7 +12357,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"b\")\n \t\t    (match_operand:SI 2 \"tls_symbolic_operand\" \"\")\n-\t\t    (match_operand:SI 3 \"call_insn_operand\" \"\")]\n+\t\t    (match_operand:SI 3 \"constant_call_address_operand\" \"z\")]\n \t\t    UNSPEC_TLS_GD))\n    (clobber (match_scratch:SI 4 \"=d\"))\n    (clobber (match_scratch:SI 5 \"=c\"))\n@@ -12337,16 +12372,17 @@\n \t\t   (unspec:SI\n \t\t    [(match_operand:SI 2 \"register_operand\" \"\")\n \t\t     (match_operand:SI 1 \"tls_symbolic_operand\" \"\")\n-\t\t     (match_operand:SI 3 \"call_insn_operand\" \"\")]\n+\t\t     (match_operand:SI 3 \"constant_call_address_operand\" \"\")]\n \t\t    UNSPEC_TLS_GD))\n \t      (clobber (match_scratch:SI 4 \"\"))\n \t      (clobber (match_scratch:SI 5 \"\"))\n \t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_insn \"*tls_global_dynamic_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(call:DI (mem:QI (match_operand:DI 2 \"call_insn_operand\" \"\"))\n-\t\t (match_operand:DI 3 \"\" \"\")))\n+\t(call:DI\n+\t  (mem:QI (match_operand:DI 2 \"constant_call_address_operand\" \"z\"))\n+\t  (match_operand:DI 3 \"\" \"\")))\n    (unspec:DI [(match_operand:DI 1 \"tls_symbolic_operand\" \"\")]\n \t      UNSPEC_TLS_GD)]\n   \"TARGET_64BIT\"\n@@ -12357,15 +12393,15 @@\n (define_expand \"tls_global_dynamic_64\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t\t   (call:DI\n-\t\t     (mem:QI (match_operand:DI 2 \"call_insn_operand\" \"\"))\n+\t\t     (mem:QI (match_operand:DI 2 \"constant_call_address_operand\" \"\"))\n \t\t     (const_int 0)))\n \t      (unspec:DI [(match_operand:DI 1 \"tls_symbolic_operand\" \"\")]\n \t\t\t UNSPEC_TLS_GD)])])\n \n (define_insn \"*tls_local_dynamic_base_32_gnu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"b\")\n-                    (match_operand:SI 2 \"call_insn_operand\" \"\")]\n+                    (match_operand:SI 2 \"constant_call_address_operand\" \"z\")]\n \t\t   UNSPEC_TLS_LD_BASE))\n    (clobber (match_scratch:SI 3 \"=d\"))\n    (clobber (match_scratch:SI 4 \"=c\"))\n@@ -12378,15 +12414,15 @@\n (define_expand \"tls_local_dynamic_base_32\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (unspec:SI [(match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t       (match_operand:SI 2 \"call_insn_operand\" \"\")]\n+\t\t\t       (match_operand:SI 2 \"constant_call_address_operand\" \"\")]\n \t\t\t      UNSPEC_TLS_LD_BASE))\n \t      (clobber (match_scratch:SI 3 \"\"))\n \t      (clobber (match_scratch:SI 4 \"\"))\n \t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_insn \"*tls_local_dynamic_base_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(call:DI (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"\"))\n+\t(call:DI (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"z\"))\n \t\t (match_operand:DI 2 \"\" \"\")))\n    (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)]\n   \"TARGET_64BIT\"\n@@ -12397,7 +12433,7 @@\n (define_expand \"tls_local_dynamic_base_64\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t\t   (call:DI\n-\t\t     (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"\"))\n+\t\t     (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"\"))\n \t\t     (const_int 0)))\n \t      (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)])])\n \n@@ -12407,7 +12443,7 @@\n (define_insn_and_split \"*tls_local_dynamic_32_once\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(plus:SI (unspec:SI [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t\t     (match_operand:SI 2 \"call_insn_operand\" \"\")]\n+\t\t\t     (match_operand:SI 2 \"constant_call_address_operand\" \"z\")]\n \t\t\t    UNSPEC_TLS_LD_BASE)\n \t\t (const:SI (unspec:SI\n \t\t\t    [(match_operand:SI 3 \"tls_symbolic_operand\" \"\")]\n@@ -17160,338 +17196,6 @@\n   operands[0] = dest;\n })\n \f\n-;; Call-value patterns last so that the wildcard operand does not\n-;; disrupt insn-recog's switch tables.\n-\n-(define_insn_and_split \"*call_value_pop_0_vzeroupper\"\n-  [(parallel\n-    [(set (match_operand 0 \"\" \"\")\n-\t  (call (mem:QI (match_operand:SI 1 \"constant_call_address_operand\" \"\"))\n-\t\t(match_operand:SI 2 \"\" \"\")))\n-     (set (reg:SI SP_REG)\n-\t  (plus:SI (reg:SI SP_REG)\n-\t\t   (match_operand:SI 3 \"immediate_operand\" \"\")))])\n-   (unspec [(match_operand 4 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && !TARGET_64BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[4]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*call_value_pop_0\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:SI 1 \"constant_call_address_operand\" \"\"))\n-\t      (match_operand:SI 2 \"\" \"\")))\n-   (set (reg:SI SP_REG)\n-\t(plus:SI (reg:SI SP_REG)\n-\t\t (match_operand:SI 3 \"immediate_operand\" \"\")))]\n-  \"!TARGET_64BIT\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*call_value_pop_1_vzeroupper\"\n-  [(parallel\n-    [(set (match_operand 0 \"\" \"\")\n-\t  (call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"lsm\"))\n-\t\t(match_operand:SI 2 \"\" \"\")))\n-     (set (reg:SI SP_REG)\n-\t  (plus:SI (reg:SI SP_REG)\n-\t\t   (match_operand:SI 3 \"immediate_operand\" \"i\")))])\n-   (unspec [(match_operand 4 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && !TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[4]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*call_value_pop_1\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"lsm\"))\n-\t      (match_operand:SI 2 \"\" \"\")))\n-   (set (reg:SI SP_REG)\n-\t(plus:SI (reg:SI SP_REG)\n-\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n-  \"!TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*sibcall_value_pop_1_vzeroupper\"\n- [(parallel\n-   [(set (match_operand 0 \"\" \"\")\n-\t  (call (mem:QI (match_operand:SI 1 \"sibcall_insn_operand\" \"s,U\"))\n-\t\t(match_operand:SI 2 \"\" \"\")))\n-     (set (reg:SI SP_REG)\n-\t  (plus:SI (reg:SI SP_REG)\n-\t\t   (match_operand:SI 3 \"immediate_operand\" \"i,i\")))])\n-   (unspec [(match_operand 4 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && !TARGET_64BIT && SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[4]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*sibcall_value_pop_1\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:SI 1 \"sibcall_insn_operand\" \"s,U\"))\n-\t      (match_operand:SI 2 \"\" \"\")))\n-   (set (reg:SI SP_REG)\n-\t(plus:SI (reg:SI SP_REG)\n-\t\t (match_operand:SI 3 \"immediate_operand\" \"i,i\")))]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*call_value_0_vzeroupper\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:SI 1 \"constant_call_address_operand\" \"\"))\n-\t      (match_operand:SI 2 \"\" \"\")))\n-   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && !TARGET_64BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*call_value_0\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:SI 1 \"constant_call_address_operand\" \"\"))\n-\t      (match_operand:SI 2 \"\" \"\")))]\n-  \"!TARGET_64BIT\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*call_value_0_rex64_vzeroupper\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"\"))\n-\t      (match_operand:DI 2 \"const_int_operand\" \"\")))\n-   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && TARGET_64BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*call_value_0_rex64\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"\"))\n-\t      (match_operand:DI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*call_value_0_rex64_ms_sysv_vzeroupper\"\n-  [(parallel\n-    [(set (match_operand 0 \"\" \"\")\n-\t  (call (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"\"))\n-\t\t(match_operand:DI 2 \"const_int_operand\" \"\")))\n-     (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n-     (clobber (reg:TI XMM6_REG))\n-     (clobber (reg:TI XMM7_REG))\n-     (clobber (reg:TI XMM8_REG))\n-     (clobber (reg:TI XMM9_REG))\n-     (clobber (reg:TI XMM10_REG))\n-     (clobber (reg:TI XMM11_REG))\n-     (clobber (reg:TI XMM12_REG))\n-     (clobber (reg:TI XMM13_REG))\n-     (clobber (reg:TI XMM14_REG))\n-     (clobber (reg:TI XMM15_REG))\n-     (clobber (reg:DI SI_REG))\n-     (clobber (reg:DI DI_REG))])\n-   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*call_value_0_rex64_ms_sysv\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"\"))\n-\t      (match_operand:DI 2 \"const_int_operand\" \"\")))\n-   (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n-   (clobber (reg:TI XMM6_REG))\n-   (clobber (reg:TI XMM7_REG))\n-   (clobber (reg:TI XMM8_REG))\n-   (clobber (reg:TI XMM9_REG))\n-   (clobber (reg:TI XMM10_REG))\n-   (clobber (reg:TI XMM11_REG))\n-   (clobber (reg:TI XMM12_REG))\n-   (clobber (reg:TI XMM13_REG))\n-   (clobber (reg:TI XMM14_REG))\n-   (clobber (reg:TI XMM15_REG))\n-   (clobber (reg:DI SI_REG))\n-   (clobber (reg:DI DI_REG))]\n-  \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*call_value_1_vzeroupper\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"lsm\"))\n-\t      (match_operand:SI 2 \"\" \"\")))\n-   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && !TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*call_value_1\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"lsm\"))\n-\t      (match_operand:SI 2 \"\" \"\")))]\n-  \"!TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*sibcall_value_1_vzeroupper\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:SI 1 \"sibcall_insn_operand\" \"s,U\"))\n-\t      (match_operand:SI 2 \"\" \"\")))\n-   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && !TARGET_64BIT && SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*sibcall_value_1\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:SI 1 \"sibcall_insn_operand\" \"s,U\"))\n-\t      (match_operand:SI 2 \"\" \"\")))]\n-  \"!TARGET_64BIT && SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*call_value_1_rex64_vzeroupper\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rsm\"))\n-\t      (match_operand:DI 2 \"\" \"\")))\n-   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && TARGET_64BIT && !SIBLING_CALL_P (insn)\n-   && ix86_cmodel != CM_LARGE && ix86_cmodel != CM_LARGE_PIC\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*call_value_1_rex64\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rsm\"))\n-\t      (match_operand:DI 2 \"\" \"\")))]\n-  \"TARGET_64BIT && !SIBLING_CALL_P (insn)\n-   && ix86_cmodel != CM_LARGE && ix86_cmodel != CM_LARGE_PIC\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*call_value_1_rex64_ms_sysv_vzeroupper\"\n-  [(parallel\n-    [(set (match_operand 0 \"\" \"\")\n-\t  (call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rsm\"))\n-\t\t(match_operand:DI 2 \"\" \"\")))\n-     (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n-     (clobber (reg:TI XMM6_REG))\n-     (clobber (reg:TI XMM7_REG))\n-     (clobber (reg:TI XMM8_REG))\n-     (clobber (reg:TI XMM9_REG))\n-     (clobber (reg:TI XMM10_REG))\n-     (clobber (reg:TI XMM11_REG))\n-     (clobber (reg:TI XMM12_REG))\n-     (clobber (reg:TI XMM13_REG))\n-     (clobber (reg:TI XMM14_REG))\n-     (clobber (reg:TI XMM15_REG))\n-     (clobber (reg:DI SI_REG))\n-     (clobber (reg:DI DI_REG))])\n-   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*call_value_1_rex64_ms_sysv\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rsm\"))\n-\t      (match_operand:DI 2 \"\" \"\")))\n-   (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n-   (clobber (reg:TI XMM6_REG))\n-   (clobber (reg:TI XMM7_REG))\n-   (clobber (reg:TI XMM8_REG))\n-   (clobber (reg:TI XMM9_REG))\n-   (clobber (reg:TI XMM10_REG))\n-   (clobber (reg:TI XMM11_REG))\n-   (clobber (reg:TI XMM12_REG))\n-   (clobber (reg:TI XMM13_REG))\n-   (clobber (reg:TI XMM14_REG))\n-   (clobber (reg:TI XMM15_REG))\n-   (clobber (reg:DI SI_REG))\n-   (clobber (reg:DI DI_REG))]\n-  \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*call_value_1_rex64_large_vzeroupper\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rm\"))\n-\t      (match_operand:DI 2 \"\" \"\")))\n-   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*call_value_1_rex64_large\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rm\"))\n-\t      (match_operand:DI 2 \"\" \"\")))]\n-  \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn_and_split \"*sibcall_value_1_rex64_vzeroupper\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"sibcall_insn_operand\" \"s,U\"))\n-\t      (match_operand:DI 2 \"\" \"\")))\n-   (unspec [(match_operand 3 \"const_int_operand\" \"\")]\n-   \t   UNSPEC_CALL_NEEDS_VZEROUPPER)]\n-  \"TARGET_VZEROUPPER && TARGET_64BIT && SIBLING_CALL_P (insn)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_call_vzeroupper (curr_insn, operands[3]); DONE;\"\n-  [(set_attr \"type\" \"callv\")])\n-\n-(define_insn \"*sibcall_value_1_rex64\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (match_operand:DI 1 \"sibcall_insn_operand\" \"s,U\"))\n-\t      (match_operand:DI 2 \"\" \"\")))]\n-  \"TARGET_64BIT && SIBLING_CALL_P (insn)\"\n-  { return ix86_output_call_insn (insn, operands[1], 1); }\n-  [(set_attr \"type\" \"callv\")])\n-\f\n ;; We used to use \"int $5\", in honor of #BR which maps to interrupt vector 5.\n ;; That, however, is usually mapped by the OS to SIGSEGV, which is often\n ;; caught for use by garbage collectors and the like.  Using an insn that"}, {"sha": "d0fa8a66149ee352e050e9afac9f3ae132b7956d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6449011601f2b983644f491e2348b99826e991a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6449011601f2b983644f491e2348b99826e991a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6449011601f2b983644f491e2348b99826e991a", "patch": "@@ -1,3 +1,10 @@\n+2011-05-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/avx-vzeroupper-16.c: Update scan-assembler-times\n+\tscan pattern.\n+\t* gcc.target/i386/avx-vzeroupper-17.c: Ditto.\n+\t* gcc.target/i386/avx-vzeroupper-18.c: Ditto.\n+\n 2011-05-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR c++/48994"}, {"sha": "8002788bb8284eceba4c8f567e35077a27c4b270", "filename": "gcc/testsuite/gcc.target/i386/avx-vzeroupper-16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6449011601f2b983644f491e2348b99826e991a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6449011601f2b983644f491e2348b99826e991a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-16.c?ref=f6449011601f2b983644f491e2348b99826e991a", "patch": "@@ -6,7 +6,7 @@ typedef float __m256 __attribute__ ((__vector_size__ (32), __may_alias__));\n \n extern __m256 x;\n \n-extern __m256 __attribute__ ((sysv_abi))  bar (__m256);\n+extern __m256 __attribute__ ((sysv_abi)) bar (__m256);\n \n void\n foo (void)\n@@ -15,4 +15,4 @@ foo (void)\n }\n \n /* { dg-final { scan-assembler-times \"avx_vzeroupper\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\\\*call_value_0_rex64_ms_sysv\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\*call_value_rex64_ms_sysv\" 1 } } */"}, {"sha": "2df9df048422d698bbdf8827b6537d02f0497fd7", "filename": "gcc/testsuite/gcc.target/i386/avx-vzeroupper-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6449011601f2b983644f491e2348b99826e991a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6449011601f2b983644f491e2348b99826e991a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-17.c?ref=f6449011601f2b983644f491e2348b99826e991a", "patch": "@@ -15,4 +15,4 @@ foo (void)\n }\n \n /* { dg-final { scan-assembler-times \"avx_vzeroupper\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\\\*call_value_1_rex64_ms_sysv\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\*call_value_rex64_ms_sysv\" 1 } } */"}, {"sha": "1d3ed9b03e444a574e468263ed7418a13f69c0f7", "filename": "gcc/testsuite/gcc.target/i386/avx-vzeroupper-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6449011601f2b983644f491e2348b99826e991a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6449011601f2b983644f491e2348b99826e991a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-18.c?ref=f6449011601f2b983644f491e2348b99826e991a", "patch": "@@ -15,4 +15,4 @@ foo (void)\n }\n \n /* { dg-final { scan-assembler-not \"avx_vzeroupper\" } } */\n-/* { dg-final { scan-assembler-times \"\\\\*call_1_rex64_ms_sysv\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\*call_rex64_ms_sysv\" 1 } } */"}]}