{"sha": "8f4f841a3e443d7de88fcb76075eb3003f280bd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0Zjg0MWEzZTQ0M2Q3ZGU4OGZjYjc2MDc1ZWIzMDAzZjI4MGJkNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-02-22T09:45:42Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-02-22T09:45:42Z"}, "message": "Remove wrong assert about gcov_type (PR lto/79587).\n\n2017-02-22  Martin Liska  <mliska@suse.cz>\n\n\tPR lto/79587\n\t* data-streamer-in.c (streamer_read_gcov_count): Remove assert.\n\t* data-streamer-out.c (streamer_write_gcov_count_stream):\n\tLikewise.\n\t* value-prof.c (stream_out_histogram_value): Make assert more\n\tprecise based on type of counter.\n2017-02-22  Martin Liska  <mliska@suse.cz>\n\n\tPR lto/79587\n\t* gcc.dg/tree-prof/pr79587.c: New test.\n\nFrom-SVN: r245647", "tree": {"sha": "a8803c5b92290a769e7f66b6b708020cbf81bcd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8803c5b92290a769e7f66b6b708020cbf81bcd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f4f841a3e443d7de88fcb76075eb3003f280bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4f841a3e443d7de88fcb76075eb3003f280bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4f841a3e443d7de88fcb76075eb3003f280bd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4f841a3e443d7de88fcb76075eb3003f280bd7/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bac4371a6ac451bd5f8b305610eb47fcb9bda3a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac4371a6ac451bd5f8b305610eb47fcb9bda3a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bac4371a6ac451bd5f8b305610eb47fcb9bda3a9"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "1911946edcd3bcf945c31dfdc2a04246247ef56d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f4f841a3e443d7de88fcb76075eb3003f280bd7", "patch": "@@ -1,3 +1,12 @@\n+2017-02-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/79587\n+\t* data-streamer-in.c (streamer_read_gcov_count): Remove assert.\n+\t* data-streamer-out.c (streamer_write_gcov_count_stream):\n+\tLikewise.\n+\t* value-prof.c (stream_out_histogram_value): Make assert more\n+\tprecise based on type of counter.\n+\n 2017-02-21 Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/79621"}, {"sha": "ad32ce1e99a31aed64fc93a5badc6b0133f1e573", "filename": "gcc/data-streamer-in.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2Fdata-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2Fdata-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-in.c?ref=8f4f841a3e443d7de88fcb76075eb3003f280bd7", "patch": "@@ -181,7 +181,6 @@ gcov_type\n streamer_read_gcov_count (struct lto_input_block *ib)\n {\n   gcov_type ret = streamer_read_hwi (ib);\n-  gcc_assert (ret >= 0);\n   return ret;\n }\n "}, {"sha": "1e8feb1e74a44171730d7dcb0169d1d7ddbf3ecc", "filename": "gcc/data-streamer-out.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2Fdata-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2Fdata-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-out.c?ref=8f4f841a3e443d7de88fcb76075eb3003f280bd7", "patch": "@@ -340,7 +340,6 @@ streamer_write_hwi_stream (struct lto_output_stream *obs, HOST_WIDE_INT work)\n void\n streamer_write_gcov_count_stream (struct lto_output_stream *obs, gcov_type work)\n {\n-  gcc_assert (work >= 0);\n   gcc_assert ((HOST_WIDE_INT) work == work);\n   streamer_write_hwi_stream (obs, work);\n }"}, {"sha": "19ddc6efac8de5a2004ca87dc3f0744bff6ff161", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f4f841a3e443d7de88fcb76075eb3003f280bd7", "patch": "@@ -1,3 +1,8 @@\n+2017-02-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/79587\n+\t* gcc.dg/tree-prof/pr79587.c: New test.\n+\n 2017-02-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/79535"}, {"sha": "517e081991922dc4a1b606866af35281d1fa6cd8", "filename": "gcc/testsuite/gcc.dg/tree-prof/pr79587.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fpr79587.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fpr79587.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fpr79587.c?ref=8f4f841a3e443d7de88fcb76075eb3003f280bd7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-require-effective-target lto } */\n+/* { dg-options \"-O2 -flto\" } */\n+\n+unsigned long global = -12345;\n+\n+unsigned long\n+__attribute__((noinline))\n+test(unsigned long v, unsigned long v2)\n+{\n+  unsigned long x = v % v2;\n+\n+  return x;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  unsigned long r = 0;\n+\n+  for (int i = 0; i < 100; i++)\n+    r += test(argc, global);\n+\n+  if (r != 100)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "22dc2c9e257019d0d8b7dd0dc8b6d7382585f3c3", "filename": "gcc/value-prof.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f841a3e443d7de88fcb76075eb3003f280bd7/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=8f4f841a3e443d7de88fcb76075eb3003f280bd7", "patch": "@@ -365,7 +365,17 @@ stream_out_histogram_value (struct output_block *ob, histogram_value hist)\n       break;\n     }\n   for (i = 0; i < hist->n_counters; i++)\n-    streamer_write_gcov_count (ob, hist->hvalue.counters[i]);\n+    {\n+      /* When user uses an unsigned type with a big value, constant converted\n+\t to gcov_type (a signed type) can be negative.  */\n+      gcov_type value = hist->hvalue.counters[i];\n+      if (hist->type == HIST_TYPE_SINGLE_VALUE && i == 0)\n+\t;\n+      else\n+\tgcc_assert (value >= 0);\n+\n+      streamer_write_gcov_count (ob, value);\n+    }\n   if (hist->hvalue.next)\n     stream_out_histogram_value (ob, hist->hvalue.next);\n }"}]}