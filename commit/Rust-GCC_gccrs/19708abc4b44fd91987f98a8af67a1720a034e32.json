{"sha": "19708abc4b44fd91987f98a8af67a1720a034e32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk3MDhhYmM0YjQ0ZmQ5MTk4N2Y5OGE4YWY2N2ExNzIwYTAzNGUzMg==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-11-16T08:46:42Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-11-16T08:46:42Z"}, "message": "re PR target/65837 ([arm-linux-gnueabihf] lto1 target specific builtin not available)\n\n2015-11-16  Christian Bruel  <christian.bruel@st.com>\n\n\tPR target/65837\n\t* config/arm/arm.c (arm_fpu_desc): Remove.\n\t(all_fpus): Make global.\n\t(arm_option_override): Use FPU TARGET accessors.\n\t(arm_declare_function_name): Likewise.\n\t* config/arm/arm.h (TARGET_VFP, TARGET_VFPD32, TARGET_VFP5)\n\t(TARGET_VFP_SINGLE, TARGET_VFP_DOUBLE, TARGET_NEON_FP16)\n\t(TARGET_FP16, TARGET_FMA, TARGET_FPU_ARMV8, TARGET_CRYPTO)\n\t(TARGET_NEON): Likewise.\n\t(all_fpus): Declare extern.\n\t(TARGET_FPU_NAME, TARGET_FPU_MODEL, TARGET_FPU_REV)\n\t(TARGET_FPU_REGS, TARGET_FPU_FEATURES): Define all_fpus accessors.\n\nFrom-SVN: r230404", "tree": {"sha": "153be26b692f802d52ed7540d533ddc532dbbabf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/153be26b692f802d52ed7540d533ddc532dbbabf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19708abc4b44fd91987f98a8af67a1720a034e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19708abc4b44fd91987f98a8af67a1720a034e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19708abc4b44fd91987f98a8af67a1720a034e32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19708abc4b44fd91987f98a8af67a1720a034e32/comments", "author": null, "committer": null, "parents": [{"sha": "c21f7c9dcdda2462e3aca0d701a2c276a5356d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21f7c9dcdda2462e3aca0d701a2c276a5356d3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21f7c9dcdda2462e3aca0d701a2c276a5356d3c"}], "stats": {"total": 82, "additions": 46, "deletions": 36}, "files": [{"sha": "3d8679b46359a60fc8369a096ce5945270f72278", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19708abc4b44fd91987f98a8af67a1720a034e32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19708abc4b44fd91987f98a8af67a1720a034e32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19708abc4b44fd91987f98a8af67a1720a034e32", "patch": "@@ -1,3 +1,18 @@\n+2015-11-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/65837\n+\t* config/arm/arm.c (arm_fpu_desc): Remove.\n+\t(all_fpus): Make global.\n+\t(arm_option_override): Use FPU TARGET accessors.\n+\t(arm_declare_function_name): Likewise.\n+\t* config/arm/arm.h (TARGET_VFP, TARGET_VFPD32, TARGET_VFP5)\n+\t(TARGET_VFP_SINGLE, TARGET_VFP_DOUBLE, TARGET_NEON_FP16)\n+\t(TARGET_FP16, TARGET_FMA, TARGET_FPU_ARMV8, TARGET_CRYPTO)\n+\t(TARGET_NEON): Likewise.\n+\t(all_fpus): Declare extern.\n+\t(TARGET_FPU_NAME, TARGET_FPU_MODEL, TARGET_FPU_REV)\n+\t(TARGET_FPU_REGS, TARGET_FPU_FEATURES): Define all_fpus accessors.\n+\n 2015-11-15  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \tPR middle-end/68366"}, {"sha": "10c4348d7f34f977d38dbc7d4bcace1713e01a2b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19708abc4b44fd91987f98a8af67a1720a034e32/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19708abc4b44fd91987f98a8af67a1720a034e32/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=19708abc4b44fd91987f98a8af67a1720a034e32", "patch": "@@ -759,9 +759,6 @@ const struct tune_params *current_tune;\n /* Which floating point hardware to schedule for.  */\n int arm_fpu_attr;\n \n-/* Which floating popint hardware to use.  */\n-const struct arm_fpu_desc *arm_fpu_desc;\n-\n /* Used for Thumb call_via trampolines.  */\n rtx thumb_call_via_label[14];\n static int thumb_call_reg_needed;\n@@ -2224,15 +2221,14 @@ char arm_arch_name[] = \"__ARM_ARCH_0UNK__\";\n \n /* Available values for -mfpu=.  */\n \n-static const struct arm_fpu_desc all_fpus[] =\n+const struct arm_fpu_desc all_fpus[] =\n {\n #define ARM_FPU(NAME, MODEL, REV, VFP_REGS, FEATURES) \\\n   { NAME, MODEL, REV, VFP_REGS, FEATURES },\n #include \"arm-fpus.def\"\n #undef ARM_FPU\n };\n \n-\n /* Supported TLS relocations.  */\n \n enum tls_reloc {\n@@ -3139,17 +3135,13 @@ arm_option_override (void)\n       gcc_assert (ok);\n     }\n \n-  arm_fpu_desc = &all_fpus[arm_fpu_index];\n-\n-  switch (arm_fpu_desc->model)\n-    {\n-    case ARM_FP_MODEL_VFP:\n-      arm_fpu_attr = FPU_VFP;\n-      break;\n-\n-    default:\n-      gcc_unreachable();\n-    }\n+  /* If soft-float is specified then don't use FPU.  */\n+  if (TARGET_SOFT_FLOAT)\n+    arm_fpu_attr = FPU_NONE;\n+  else if (TARGET_VFP)\n+    arm_fpu_attr = FPU_VFP;\n+  else\n+    gcc_unreachable();\n \n   if (TARGET_AAPCS_BASED)\n     {\n@@ -3164,10 +3156,6 @@ arm_option_override (void)\n   if (!arm_arch4 && arm_fp16_format != ARM_FP16_FORMAT_NONE)\n     sorry (\"__fp16 and no ldrh\");\n \n-  /* If soft-float is specified then don't use FPU.  */\n-  if (TARGET_SOFT_FLOAT)\n-    arm_fpu_attr = FPU_NONE;\n-\n   if (TARGET_AAPCS_BASED)\n     {\n       if (arm_abi == ARM_ABI_IWMMXT)\n@@ -29974,8 +29962,8 @@ arm_declare_function_name (FILE *stream, const char *name, tree decl)\n   else\n     fprintf (stream, \"\\t.arm\\n\");\n \n-  asm_fprintf (asm_out_file, \"\\t.fpu %s\\n\", TARGET_SOFT_FLOAT\n-\t       ? \"softvfp\" : arm_fpu_desc->name);\n+  asm_fprintf (asm_out_file, \"\\t.fpu %s\\n\",\n+\t       TARGET_SOFT_FLOAT ? \"softvfp\" : TARGET_FPU_NAME);\n \n   if (TARGET_POKE_FUNCTION_NAME)\n     arm_poke_function_name (stream, (const char *) name);"}, {"sha": "6ed8ad3823e5244bd107193d82080299263c848a", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19708abc4b44fd91987f98a8af67a1720a034e32/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19708abc4b44fd91987f98a8af67a1720a034e32/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=19708abc4b44fd91987f98a8af67a1720a034e32", "patch": "@@ -138,7 +138,7 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_HARD_FLOAT\t\t(arm_float_abi != ARM_FLOAT_ABI_SOFT)\n /* Use hardware floating point calling convention.  */\n #define TARGET_HARD_FLOAT_ABI\t\t(arm_float_abi == ARM_FLOAT_ABI_HARD)\n-#define TARGET_VFP\t\t(arm_fpu_desc->model == ARM_FP_MODEL_VFP)\n+#define TARGET_VFP\t\t        (TARGET_FPU_MODEL == ARM_FP_MODEL_VFP)\n #define TARGET_IWMMXT\t\t\t(arm_arch_iwmmxt)\n #define TARGET_IWMMXT2\t\t\t(arm_arch_iwmmxt2)\n #define TARGET_REALLY_IWMMXT\t\t(TARGET_IWMMXT && TARGET_32BIT)\n@@ -176,47 +176,46 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n    to be more careful with TARGET_NEON as noted below.  */\n \n /* FPU is has the full VFPv3/NEON register file of 32 D registers.  */\n-#define TARGET_VFPD32 (TARGET_VFP && arm_fpu_desc->regs == VFP_REG_D32)\n+#define TARGET_VFPD32 (TARGET_VFP && TARGET_FPU_REGS == VFP_REG_D32)\n \n /* FPU supports VFPv3 instructions.  */\n-#define TARGET_VFP3 (TARGET_VFP && arm_fpu_desc->rev >= 3)\n+#define TARGET_VFP3 (TARGET_VFP && TARGET_FPU_REV >= 3)\n \n /* FPU supports FPv5 instructions.  */\n-#define TARGET_VFP5 (TARGET_VFP && arm_fpu_desc->rev >= 5)\n+#define TARGET_VFP5 (TARGET_VFP && TARGET_FPU_REV >= 5)\n \n /* FPU only supports VFP single-precision instructions.  */\n-#define TARGET_VFP_SINGLE (TARGET_VFP && arm_fpu_desc->regs == VFP_REG_SINGLE)\n+#define TARGET_VFP_SINGLE (TARGET_VFP && TARGET_FPU_REGS == VFP_REG_SINGLE)\n \n /* FPU supports VFP double-precision instructions.  */\n-#define TARGET_VFP_DOUBLE (TARGET_VFP && arm_fpu_desc->regs != VFP_REG_SINGLE)\n+#define TARGET_VFP_DOUBLE (TARGET_VFP && TARGET_FPU_REGS != VFP_REG_SINGLE)\n \n /* FPU supports half-precision floating-point with NEON element load/store.  */\n #define TARGET_NEON_FP16\t\t\t\t\t\t\\\n   (TARGET_VFP\t\t\t\t\t\t\t\t\\\n-   && ARM_FPU_FSET_HAS (arm_fpu_desc->features, FPU_FL_NEON | FPU_FL_FP16))\n+   && ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_NEON | FPU_FL_FP16))\n \n /* FPU supports VFP half-precision floating-point.  */\n #define TARGET_FP16\t\t\t\t\t\t\t\\\n-  (TARGET_VFP && ARM_FPU_FSET_HAS (arm_fpu_desc->features, FPU_FL_FP16))\n+  (TARGET_VFP && ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_FP16))\n \n /* FPU supports fused-multiply-add operations.  */\n-#define TARGET_FMA (TARGET_VFP && arm_fpu_desc->rev >= 4)\n+#define TARGET_FMA (TARGET_VFP && TARGET_FPU_REV >= 4)\n \n /* FPU is ARMv8 compatible.  */\n-#define TARGET_FPU_ARMV8 (TARGET_VFP && arm_fpu_desc->rev >= 8)\n+#define TARGET_FPU_ARMV8 (TARGET_VFP && TARGET_FPU_REV >= 8)\n \n /* FPU supports Crypto extensions.  */\n #define TARGET_CRYPTO\t\t\t\t\t\t\t\\\n-  (TARGET_VFP && ARM_FPU_FSET_HAS (arm_fpu_desc->features, FPU_FL_CRYPTO))\n-\n+  (TARGET_VFP && ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_CRYPTO))\n \n /* FPU supports Neon instructions.  The setting of this macro gets\n    revealed via __ARM_NEON__ so we add extra guards upon TARGET_32BIT\n    and TARGET_HARD_FLOAT to ensure that NEON instructions are\n    available.  */\n #define TARGET_NEON\t\t\t\t\t\t\t\\\n   (TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP\t\t\t\\\n-   && ARM_FPU_FSET_HAS (arm_fpu_desc->features, FPU_FL_NEON))\n+   && ARM_FPU_FSET_HAS (TARGET_FPU_FEATURES, FPU_FL_NEON))\n \n /* Q-bit is present.  */\n #define TARGET_ARM_QBIT \\\n@@ -346,7 +345,15 @@ extern const struct arm_fpu_desc\n   int rev;\n   enum vfp_reg_type regs;\n   arm_fpu_feature_set features;\n-} *arm_fpu_desc;\n+} all_fpus[];\n+\n+/* Accessors.  */\n+\n+#define TARGET_FPU_NAME     (all_fpus[arm_fpu_index].name)\n+#define TARGET_FPU_MODEL    (all_fpus[arm_fpu_index].model)\n+#define TARGET_FPU_REV      (all_fpus[arm_fpu_index].rev)\n+#define TARGET_FPU_REGS     (all_fpus[arm_fpu_index].regs)\n+#define TARGET_FPU_FEATURES (all_fpus[arm_fpu_index].features)\n \n /* Which floating point hardware to schedule for.  */\n extern int arm_fpu_attr;"}]}