{"sha": "db24e859d8f0141ba97d828deed7cd0d0ae9a43d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIyNGU4NTlkOGYwMTQxYmE5N2Q4MjhkZWVkN2NkMGQwYWU5YTQzZA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-22T13:34:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-22T13:56:27Z"}, "message": "Path resolution is done in two phases\n\nThis changes Path resolution to check for impl items first, then extensions\nsecond. This stops some invalid multiple canidate errors such as the case\nwhen the trait implements a function but the reciever also implements it\nto override the behaviour.", "tree": {"sha": "678ef9c4448e1b7a744a61d10bb56469229b756e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/678ef9c4448e1b7a744a61d10bb56469229b756e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db24e859d8f0141ba97d828deed7cd0d0ae9a43d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db24e859d8f0141ba97d828deed7cd0d0ae9a43d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db24e859d8f0141ba97d828deed7cd0d0ae9a43d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db24e859d8f0141ba97d828deed7cd0d0ae9a43d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbfc0ee239fafc0dadaae314138410f9119c65fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbfc0ee239fafc0dadaae314138410f9119c65fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbfc0ee239fafc0dadaae314138410f9119c65fa"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "df45e660e43121e50209a2436101cf42c3983113", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db24e859d8f0141ba97d828deed7cd0d0ae9a43d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db24e859d8f0141ba97d828deed7cd0d0ae9a43d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=db24e859d8f0141ba97d828deed7cd0d0ae9a43d", "patch": "@@ -348,17 +348,26 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n       bool probe_impls = !reciever_is_generic;\n       bool ignore_mandatory_trait_items = !reciever_is_generic;\n \n-      // probe the path\n+      // probe the path is done in two parts one where we search impls if no\n+      // candidate is found then we search extensions from traits\n       auto candidates\n \t= PathProbeType::Probe (prev_segment, seg.get_segment (), probe_impls,\n-\t\t\t\tprobe_bounds, ignore_mandatory_trait_items);\n+\t\t\t\tfalse, ignore_mandatory_trait_items);\n       if (candidates.size () == 0)\n \t{\n-\t  rust_error_at (seg.get_locus (),\n-\t\t\t \"failed to resolve path segment using an impl Probe\");\n-\t  return;\n+\t  candidates\n+\t    = PathProbeType::Probe (prev_segment, seg.get_segment (), false,\n+\t\t\t\t    probe_bounds, ignore_mandatory_trait_items);\n+\t  if (candidates.size () == 0)\n+\t    {\n+\t      rust_error_at (\n+\t\tseg.get_locus (),\n+\t\t\"failed to resolve path segment using an impl Probe\");\n+\t      return;\n+\t    }\n \t}\n-      else if (candidates.size () > 1)\n+\n+      if (candidates.size () > 1)\n \t{\n \t  ReportMultipleCandidateError::Report (candidates, seg.get_segment (),\n \t\t\t\t\t\tseg.get_locus ());"}]}