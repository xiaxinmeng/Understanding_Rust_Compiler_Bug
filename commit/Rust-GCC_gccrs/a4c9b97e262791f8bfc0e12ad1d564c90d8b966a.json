{"sha": "a4c9b97e262791f8bfc0e12ad1d564c90d8b966a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRjOWI5N2UyNjI3OTFmOGJmYzBlMTJhZDFkNTY0YzkwZDhiOTY2YQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-11-27T04:23:38Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-11-27T04:23:38Z"}, "message": "hashtab.c (higher_prime_number): Use a table, rather than a seive, to find the next prime.\n\n\t* hashtab.c (higher_prime_number): Use a table, rather than a\n\tseive, to find the next prime.\n\nFrom-SVN: r37775", "tree": {"sha": "fe78cc9d5672a5574eff55bb4c96cf9a55f5eb4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe78cc9d5672a5574eff55bb4c96cf9a55f5eb4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4c9b97e262791f8bfc0e12ad1d564c90d8b966a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c9b97e262791f8bfc0e12ad1d564c90d8b966a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c9b97e262791f8bfc0e12ad1d564c90d8b966a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c9b97e262791f8bfc0e12ad1d564c90d8b966a/comments", "author": null, "committer": null, "parents": [{"sha": "e9608fe6f0bc34b79bb3750e9d22065632cc4b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9608fe6f0bc34b79bb3750e9d22065632cc4b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9608fe6f0bc34b79bb3750e9d22065632cc4b27"}], "stats": {"total": 83, "additions": 61, "deletions": 22}, "files": [{"sha": "7f278416f2a3e690390b6608905dff350c96ba25", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c9b97e262791f8bfc0e12ad1d564c90d8b966a/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c9b97e262791f8bfc0e12ad1d564c90d8b966a/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=a4c9b97e262791f8bfc0e12ad1d564c90d8b966a", "patch": "@@ -1,3 +1,8 @@\n+2000-11-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* hashtab.c (higher_prime_number): Use a table, rather than a\n+\tseive, to find the next prime.\n+\n 2000-11-22  H.J. Lu  <hjl@gnu.org>\n \n \t* cplus-dem.c (main): Handle gnat_demangling."}, {"sha": "122ed43e12811291a1752814358ec3ba904d2c99", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 56, "deletions": 22, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c9b97e262791f8bfc0e12ad1d564c90d8b966a/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c9b97e262791f8bfc0e12ad1d564c90d8b966a/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=a4c9b97e262791f8bfc0e12ad1d564c90d8b966a", "patch": "@@ -71,35 +71,69 @@ static PTR *find_empty_slot_for_expand  PARAMS ((htab_t, hashval_t));\n htab_hash htab_hash_pointer = hash_pointer;\n htab_eq htab_eq_pointer = eq_pointer;\n \n-/* The following function returns the nearest prime number which is\n-   greater than a given source number, N. */\n+/* The following function returns a nearest prime number which is\n+   greater than N, and near a power of two. */\n \n static unsigned long\n higher_prime_number (n)\n      unsigned long n;\n {\n-  unsigned long i;\n-\n-  /* Ensure we have a larger number and then force to odd.  */\n-  n++;  \n-  n |= 0x01; \n-\n-  /* All odd numbers < 9 are prime.  */\n-  if (n < 9)\n-    return n;\n-\n-  /* Otherwise find the next prime using a sieve.  */\n-\n- next:\n+  /* These are primes that are near, but slightly smaller than, a\n+     power of two.  */\n+  static unsigned long primes[] = {\n+    2,\n+    7,\n+    13,\n+    31,\n+    61,\n+    127,\n+    251,\n+    509,\n+    1021,\n+    2039,\n+    4093,\n+    8191,\n+    16381,\n+    32749,\n+    65521,\n+    131071,\n+    262139,\n+    524287,\n+    1048573,\n+    2097143,\n+    4194301,\n+    8388593,\n+    16777213,\n+    33554393,\n+    67108859,\n+    134217689,\n+    268435399,\n+    536870909,\n+    1073741789,\n+    2147483647,\n+    4294967291\n+  };\n+\n+  unsigned long* low = &primes[0];\n+  unsigned long* high = &primes[sizeof(primes) / sizeof(primes[0])];\n+\n+  while (low != high)\n+    {\n+      unsigned long* mid = low + (high - low) / 2;\n+      if (n > *mid)\n+\tlow = mid + 1;\n+      else\n+\thigh = mid;\n+    }\n \n-  for (i = 3; i * i <= n; i += 2)\n-    if (n % i == 0)\n-      {\n-\t n += 2;\n-\t goto next;\n-       }\n+  /* If we've run out of primes, abort.  */\n+  if (n > *low)\n+    {\n+      fprintf (stderr, \"Cannot find prime bigger than %lu\\n\", n);\n+      abort ();\n+    }\n \n-  return n;\n+  return *low;\n }\n \n /* Returns a hash code for P.  */"}]}