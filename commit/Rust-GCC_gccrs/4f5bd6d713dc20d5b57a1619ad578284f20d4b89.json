{"sha": "4f5bd6d713dc20d5b57a1619ad578284f20d4b89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY1YmQ2ZDcxM2RjMjBkNWI1N2ExNjE5YWQ1NzgyODRmMjBkNGI4OQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-03-16T23:53:09Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-03-16T23:53:09Z"}, "message": "mips.md (addsi3, adddi3): Use scratch register to add register to non-constant into sp.\n\n* config/mips/mips.md (addsi3, adddi3): Use scratch register to\nadd register to non-constant into sp.\n\nFrom-SVN: r50897", "tree": {"sha": "efae5fffd56a4fc291a317f31afb95df8b512785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efae5fffd56a4fc291a317f31afb95df8b512785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f5bd6d713dc20d5b57a1619ad578284f20d4b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5bd6d713dc20d5b57a1619ad578284f20d4b89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5bd6d713dc20d5b57a1619ad578284f20d4b89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5bd6d713dc20d5b57a1619ad578284f20d4b89/comments", "author": null, "committer": null, "parents": [{"sha": "c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "4ff4a5c994fd647b66f837e40b3196e2c4336b76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f5bd6d713dc20d5b57a1619ad578284f20d4b89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f5bd6d713dc20d5b57a1619ad578284f20d4b89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f5bd6d713dc20d5b57a1619ad578284f20d4b89", "patch": "@@ -1,5 +1,8 @@\n 2002-03-16  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* config/mips/mips.md (addsi3, adddi3): Use scratch register to\n+\tadd register to non-constant into sp.\n+\n \t* config/mips/mips-protos.h (embedded_pic_fnaddr_reg): New.\n \t* config/mips/mips.h (embedded_pic_fnaddr_rtx): Lose.\n \t(mips16_gp_pseudo_rtx): Lose."}, {"sha": "91df86cc0528ee109ed2fd2668e350ffd72d64cf", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f5bd6d713dc20d5b57a1619ad578284f20d4b89/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f5bd6d713dc20d5b57a1619ad578284f20d4b89/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=4f5bd6d713dc20d5b57a1619ad578284f20d4b89", "patch": "@@ -614,6 +614,27 @@\n       && GET_CODE (operands[2]) == CONST_INT\n       && INTVAL (operands[2]) == -32768)\n     operands[2] = force_reg (SImode, operands[2]);\n+\n+  /* If a large stack adjustment was forced into a register, we may be\n+     asked to generate rtx such as:\n+\n+\t(set (reg:SI sp) (plus:SI (reg:SI sp) (reg:SI pseudo)))\n+\n+     but no such instruction is available in mips16.  Handle it by\n+     using a temporary.  */\n+  if (TARGET_MIPS16\n+      && REGNO (operands[0]) == STACK_POINTER_REGNUM\n+      && ((GET_CODE (operands[1]) == REG\n+\t   && REGNO (operands[1]) != STACK_POINTER_REGNUM)\n+\t  || GET_CODE (operands[2]) != CONST_INT))\n+    {\n+      rtx tmp = gen_reg_rtx (SImode);\n+\n+      emit_move_insn (tmp, operands[1]);\n+      emit_insn (gen_addsi3 (tmp, tmp, operands[2]));\n+      emit_move_insn (operands[0], tmp);\n+      DONE;\n+    }\n }\")\n \n (define_insn \"addsi3_internal\"\n@@ -777,6 +798,27 @@\n       && INTVAL (operands[2]) == -32768)\n     operands[2] = force_reg (DImode, operands[2]);\n \n+  /* If a large stack adjustment was forced into a register, we may be\n+     asked to generate rtx such as:\n+\n+\t(set (reg:DI sp) (plus:DI (reg:DI sp) (reg:DI pseudo)))\n+\n+     but no such instruction is available in mips16.  Handle it by\n+     using a temporary.  */\n+  if (TARGET_MIPS16\n+      && REGNO (operands[0]) == STACK_POINTER_REGNUM\n+      && ((GET_CODE (operands[1]) == REG\n+\t   && REGNO (operands[1]) != STACK_POINTER_REGNUM)\n+\t  || GET_CODE (operands[2]) != CONST_INT))\n+    {\n+      rtx tmp = gen_reg_rtx (DImode);\n+\n+      emit_move_insn (tmp, operands[1]);\n+      emit_insn (gen_addsi3 (tmp, tmp, operands[2]));\n+      emit_move_insn (operands[0], tmp);\n+      DONE;\n+    }\n+\n   if (TARGET_64BIT)\n     {\n       emit_insn (gen_adddi3_internal_3 (operands[0], operands[1],"}]}