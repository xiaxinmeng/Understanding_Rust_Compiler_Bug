{"sha": "2dd2d53e2c8c049a08ce582ee9354c884e5dd857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkMmQ1M2UyYzhjMDQ5YTA4Y2U1ODJlZTkzNTRjODg0ZTVkZDg1Nw==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-07-11T13:31:44Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-07-11T13:31:44Z"}, "message": "basic-block.h: Give the BB flags enum a name, bb_flags.\n\n\t* basic-block.h: Give the BB flags enum a name, bb_flags.\n\tAdd new flags BB_FORWARDER_BLOCK, and BB_NONTHREADABLE_BLOCK.\n\t* cfgcleanup.c (enum bb_flags): Remove here.\n\t(BB_FLAGS, BB_SET_FLAG, BB_CLEAR_FLAG): Remove.\n\t(notice_new_block): Set/test bb->flags instead of aux via BB_FLAGS.\n\t(update_forwarder_flag): Likewise.\n\t(thread_jump): Likewise.\n\t(try_forward_edges): Likewise.\n\t(try_optimize_cfg): Likewise.  Clear bb->flags before updating the\n\tforwarder flags.  Don't clear bb->aux for all basic blocks.  Only\n\treset the BB_FORWARDER_BLOCK and BB_NONTHREADABLE_BLOCK flags.\n\nFrom-SVN: r101876", "tree": {"sha": "7833a753cbcf6ef3e68611482f64752ccc371262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7833a753cbcf6ef3e68611482f64752ccc371262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dd2d53e2c8c049a08ce582ee9354c884e5dd857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd2d53e2c8c049a08ce582ee9354c884e5dd857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd2d53e2c8c049a08ce582ee9354c884e5dd857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd2d53e2c8c049a08ce582ee9354c884e5dd857/comments", "author": null, "committer": null, "parents": [{"sha": "8637038aa8da786fcb53e8192cf9dac20bc62ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8637038aa8da786fcb53e8192cf9dac20bc62ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8637038aa8da786fcb53e8192cf9dac20bc62ed5"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "7199ddd7012c6b8468838c7b77574aaa50fc6d62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd2d53e2c8c049a08ce582ee9354c884e5dd857/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd2d53e2c8c049a08ce582ee9354c884e5dd857/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dd2d53e2c8c049a08ce582ee9354c884e5dd857", "patch": "@@ -1,3 +1,17 @@\n+2005-07-11  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* basic-block.h: Give the BB flags enum a name, bb_flags.\n+\tAdd new flags BB_FORWARDER_BLOCK, and BB_NONTHREADABLE_BLOCK.\n+\t* cfgcleanup.c (enum bb_flags): Remove here.\n+\t(BB_FLAGS, BB_SET_FLAG, BB_CLEAR_FLAG): Remove.\n+\t(notice_new_block): Set/test bb->flags instead of aux via BB_FLAGS.\n+\t(update_forwarder_flag): Likewise.\n+\t(thread_jump): Likewise.\n+\t(try_forward_edges): Likewise.\n+\t(try_optimize_cfg): Likewise.  Clear bb->flags before updating the\n+\tforwarder flags.  Don't clear bb->aux for all basic blocks.  Only\n+\treset the BB_FORWARDER_BLOCK and BB_NONTHREADABLE_BLOCK flags.\n+\n 2005-07-11  Richard Guenther  <rguenther@suse.de>\n \n \t* config/i386/i386.opt: New target option -msseregparm."}, {"sha": "790b27b022258d12d92d3a7af73a03affec253e3", "filename": "gcc/basic-block.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd2d53e2c8c049a08ce582ee9354c884e5dd857/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd2d53e2c8c049a08ce582ee9354c884e5dd857/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=2dd2d53e2c8c049a08ce582ee9354c884e5dd857", "patch": "@@ -292,7 +292,7 @@ typedef struct basic_block_def *basic_block;\n    All other flags may be cleared by clear_bb_flags().  It is generally\n    a bad idea to rely on any flags being up-to-date.  */\n \n-enum\n+enum bb_flags\n {\n \n   /* Set if insns in BB have are modified.  Used for updating liveness info.  */\n@@ -325,7 +325,15 @@ enum\n   BB_DUPLICATED = 256,\n \n   /* Set on blocks that are in RTL format.  */\n-  BB_RTL = 1024\n+  BB_RTL = 1024,\n+\n+  /* Set on blocks that are forwarder blocks.\n+     Only used in cfgcleanup.c.  */\n+  BB_FORWARDER_BLOCK = 2048,\n+\n+  /* Set on blocks that cannot be threaded through.\n+     Only used in cfgcleanup.c.  */\n+  BB_NONTHREADABLE_BLOCK = 4096\n };\n \n /* Dummy flag for convenience in the hot/cold partitioning code.  */"}, {"sha": "fc3137727e67ee0c76dce1b959b1da6294601404", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd2d53e2c8c049a08ce582ee9354c884e5dd857/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd2d53e2c8c049a08ce582ee9354c884e5dd857/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=2dd2d53e2c8c049a08ce582ee9354c884e5dd857", "patch": "@@ -54,24 +54,8 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"cfgloop.h\"\n #include \"expr.h\"\n \n-/* cleanup_cfg maintains following flags for each basic block.  */\n-\n-enum bb_flags\n-{\n-    /* Set if BB is the forwarder block to avoid too many\n-       forwarder_block_p calls.  */\n-    BB_FORWARDER_BLOCK = 1,\n-    BB_NONTHREADABLE_BLOCK = 2\n-};\n-\n-#define BB_FLAGS(BB) (enum bb_flags) (BB)->aux\n-#define BB_SET_FLAG(BB, FLAG) \\\n-  (BB)->aux = (void *) (long) ((enum bb_flags) (BB)->aux | (FLAG))\n-#define BB_CLEAR_FLAG(BB, FLAG) \\\n-  (BB)->aux = (void *) (long) ((enum bb_flags) (BB)->aux & ~(FLAG))\n-\n-#define FORWARDER_BLOCK_P(BB) (BB_FLAGS (BB) & BB_FORWARDER_BLOCK)\n-\n+#define FORWARDER_BLOCK_P(BB) ((BB)->flags & BB_FORWARDER_BLOCK)\n+  \n /* Set to true when we are running first pass of try_optimize_cfg loop.  */\n static bool first_pass;\n static bool try_crossjump_to_edge (int, edge, edge);\n@@ -101,7 +85,7 @@ notice_new_block (basic_block bb)\n     return;\n \n   if (forwarder_block_p (bb))\n-    BB_SET_FLAG (bb, BB_FORWARDER_BLOCK);\n+    bb->flags |= BB_FORWARDER_BLOCK;\n }\n \n /* Recompute forwarder flag after block has been modified.  */\n@@ -110,9 +94,9 @@ static void\n update_forwarder_flag (basic_block bb)\n {\n   if (forwarder_block_p (bb))\n-    BB_SET_FLAG (bb, BB_FORWARDER_BLOCK);\n+    bb->flags |= BB_FORWARDER_BLOCK;\n   else\n-    BB_CLEAR_FLAG (bb, BB_FORWARDER_BLOCK);\n+    bb->flags &= ~BB_FORWARDER_BLOCK;\n }\n \f\n /* Simplify a conditional jump around an unconditional jump.\n@@ -285,7 +269,7 @@ thread_jump (int mode, edge e, basic_block b)\n   bool failed = false;\n   reg_set_iterator rsi;\n \n-  if (BB_FLAGS (b) & BB_NONTHREADABLE_BLOCK)\n+  if (b->flags & BB_NONTHREADABLE_BLOCK)\n     return NULL;\n \n   /* At the moment, we do handle only conditional jumps, but later we may\n@@ -294,7 +278,7 @@ thread_jump (int mode, edge e, basic_block b)\n     return NULL;\n   if (EDGE_COUNT (b->succs) != 2)\n     {\n-      BB_SET_FLAG (b, BB_NONTHREADABLE_BLOCK);\n+      b->flags |= BB_NONTHREADABLE_BLOCK;\n       return NULL;\n     }\n \n@@ -304,7 +288,7 @@ thread_jump (int mode, edge e, basic_block b)\n \n   if (!any_condjump_p (BB_END (b)) || !onlyjump_p (BB_END (b)))\n     {\n-      BB_SET_FLAG (b, BB_NONTHREADABLE_BLOCK);\n+      b->flags |= BB_NONTHREADABLE_BLOCK;\n       return NULL;\n     }\n \n@@ -342,7 +326,7 @@ thread_jump (int mode, edge e, basic_block b)\n        insn = NEXT_INSN (insn))\n     if (INSN_P (insn) && side_effects_p (PATTERN (insn)))\n       {\n-\tBB_SET_FLAG (b, BB_NONTHREADABLE_BLOCK);\n+\tb->flags |= BB_NONTHREADABLE_BLOCK;\n \treturn NULL;\n       }\n \n@@ -386,7 +370,7 @@ thread_jump (int mode, edge e, basic_block b)\n      have life information in cfg_cleanup.  */\n   if (failed)\n     {\n-      BB_SET_FLAG (b, BB_NONTHREADABLE_BLOCK);\n+      b->flags |= BB_NONTHREADABLE_BLOCK;\n       goto failed_exit;\n     }\n \n@@ -612,7 +596,7 @@ try_forward_edges (int mode, basic_block b)\n \t\t\t    / REG_BR_PROB_BASE);\n \n \t  if (!FORWARDER_BLOCK_P (b) && forwarder_block_p (b))\n-\t    BB_SET_FLAG (b, BB_FORWARDER_BLOCK);\n+\t    b->flags |= BB_FORWARDER_BLOCK;\n \n \t  do\n \t    {\n@@ -1837,12 +1821,12 @@ try_optimize_cfg (int mode)\n   if (mode & CLEANUP_CROSSJUMP)\n     add_noreturn_fake_exit_edges ();\n \n-  FOR_EACH_BB (bb)\n-    update_forwarder_flag (bb);\n-\n   if (mode & (CLEANUP_UPDATE_LIFE | CLEANUP_CROSSJUMP | CLEANUP_THREADING))\n     clear_bb_flags ();\n \n+  FOR_EACH_BB (bb)\n+    update_forwarder_flag (bb);\n+\n   if (! targetm.cannot_modify_jumps_p ())\n     {\n       first_pass = true;\n@@ -2029,7 +2013,8 @@ try_optimize_cfg (int mode)\n   if (mode & CLEANUP_CROSSJUMP)\n     remove_fake_exit_edges ();\n \n-  clear_aux_for_blocks ();\n+  FOR_ALL_BB (b)\n+    b->flags &= ~(BB_FORWARDER_BLOCK | BB_NONTHREADABLE_BLOCK);\n \n   return changed_overall;\n }"}]}