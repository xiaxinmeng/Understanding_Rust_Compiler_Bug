{"sha": "d17b799df72e7d5dc6379b8e46f5188c2981faed", "node_id": "C_kwDOANBUbNoAKGQxN2I3OTlkZjcyZTdkNWRjNjM3OWI4ZTQ2ZjUxODhjMjk4MWZhZWQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-21T21:17:19Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-22T09:40:20Z"}, "message": "Remove second lookup for query compiled functions\n\nWhen compiling method calls we need to compile functions in a query based\nmanar sometimes, recently there was a query mode api added to the relevant\nfunctions which will return the address of the function when asked to try\nand compile. This patch uses this returned address avoiding a duplicate\nlookup for the compiled function", "tree": {"sha": "b53b53f544d6e9210a2d044d4f80a7810aecec72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b53b53f544d6e9210a2d044d4f80a7810aecec72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d17b799df72e7d5dc6379b8e46f5188c2981faed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17b799df72e7d5dc6379b8e46f5188c2981faed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17b799df72e7d5dc6379b8e46f5188c2981faed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17b799df72e7d5dc6379b8e46f5188c2981faed/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649e3e074bf8306bf0eb042f10483dbd61cd040b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649e3e074bf8306bf0eb042f10483dbd61cd040b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649e3e074bf8306bf0eb042f10483dbd61cd040b"}], "stats": {"total": 70, "additions": 28, "deletions": 42}, "files": [{"sha": "1a9815bb0210ac52f82db6138c6594b3f1108b79", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17b799df72e7d5dc6379b8e46f5188c2981faed/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17b799df72e7d5dc6379b8e46f5188c2981faed/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=d17b799df72e7d5dc6379b8e46f5188c2981faed", "patch": "@@ -322,12 +322,21 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n       return;\n     }\n \n-  // lookup compiled functions\n+  // address of compiled function\n+  Bexpression *fn_expr = ctx->get_backend ()->error_expression ();\n+\n+  // lookup compiled functions since it may have already been compiled\n   Bfunction *fn = nullptr;\n-  if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &fn))\n+  if (ctx->lookup_function_decl (fntype->get_ty_ref (), &fn))\n+    {\n+      fn_expr\n+\t= ctx->get_backend ()->function_code_expression (fn, expr.get_locus ());\n+    }\n+  else\n     {\n-      // this might fail because its a forward decl so we can attempt to\n-      // resolve it now\n+      // Now we can try and resolve the address since this might be a forward\n+      // declared function, generic function which has not be compiled yet or\n+      // its an not yet trait bound function\n       HIR::ImplItem *resolved_item = ctx->get_mappings ()->lookup_hir_implitem (\n \texpr.get_mappings ().get_crate_num (), ref, nullptr);\n       if (resolved_item == nullptr)\n@@ -380,16 +389,9 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \t\t  return;\n \t\t}\n \n-\t      CompileTraitItem::Compile (self_type,\n-\t\t\t\t\t trait_item_ref->get_hir_trait_item (),\n-\t\t\t\t\t ctx, fntype);\n-\t      if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &fn))\n-\t\t{\n-\t\t  translated = ctx->get_backend ()->error_expression ();\n-\t\t  rust_error_at (expr.get_locus (),\n-\t\t\t\t \"forward declaration was not compiled\");\n-\t\t  return;\n-\t\t}\n+\t      fn_expr = CompileTraitItem::Compile (\n+\t\tself_type, trait_item_ref->get_hir_trait_item (), ctx, fntype,\n+\t\ttrue, expr.get_locus ());\n \t    }\n \t  else\n \t    {\n@@ -418,20 +420,13 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \t\t}\n \n \t      if (!fntype->has_subsititions_defined ())\n-\t\tCompileInherentImplItem::Compile (self_type, impl_item, ctx,\n-\t\t\t\t\t\t  true);\n+\t\tfn_expr\n+\t\t  = CompileInherentImplItem::Compile (self_type, impl_item, ctx,\n+\t\t\t\t\t\t      true);\n \t      else\n-\t\tCompileInherentImplItem::Compile (self_type, impl_item, ctx,\n-\t\t\t\t\t\t  true, fntype);\n-\n-\t      if (!ctx->lookup_function_decl (\n-\t\t    impl_item->get_impl_mappings ().get_hirid (), &fn))\n-\t\t{\n-\t\t  translated = ctx->get_backend ()->error_expression ();\n-\t\t  rust_error_at (expr.get_locus (),\n-\t\t\t\t \"forward declaration was not compiled\");\n-\t\t  return;\n-\t\t}\n+\t\tfn_expr\n+\t\t  = CompileInherentImplItem::Compile (self_type, impl_item, ctx,\n+\t\t\t\t\t\t      true, fntype);\n \t    }\n \t}\n       else\n@@ -446,25 +441,16 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \t    }\n \n \t  if (!fntype->has_subsititions_defined ())\n-\t    CompileInherentImplItem::Compile (self_type, resolved_item, ctx,\n-\t\t\t\t\t      true);\n+\t    fn_expr\n+\t      = CompileInherentImplItem::Compile (self_type, resolved_item, ctx,\n+\t\t\t\t\t\t  true);\n \t  else\n-\t    CompileInherentImplItem::Compile (self_type, resolved_item, ctx,\n-\t\t\t\t\t      true, fntype);\n-\n-\t  if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &fn))\n-\t    {\n-\t      translated = ctx->get_backend ()->error_expression ();\n-\t      rust_error_at (expr.get_locus (),\n-\t\t\t     \"forward declaration was not compiled\");\n-\t      return;\n-\t    }\n+\t    fn_expr\n+\t      = CompileInherentImplItem::Compile (self_type, resolved_item, ctx,\n+\t\t\t\t\t\t  true, fntype);\n \t}\n     }\n \n-  Bexpression *fn_expr\n-    = ctx->get_backend ()->function_code_expression (fn, expr.get_locus ());\n-\n   std::vector<Bexpression *> args;\n \n   // lookup the autoderef mappings"}]}