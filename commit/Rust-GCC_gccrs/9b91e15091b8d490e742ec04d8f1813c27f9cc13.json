{"sha": "9b91e15091b8d490e742ec04d8f1813c27f9cc13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI5MWUxNTA5MWI4ZDQ5MGU3NDJlYzA0ZDhmMTgxM2MyN2Y5Y2MxMw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-03-26T07:41:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:41:53Z"}, "message": "sem_ch10.adb (Analyze_Compilation_Unit): if a unit in the context is a generic subprogram that is imported...\n\n2008-03-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Analyze_Compilation_Unit): if a unit in the context is\n\ta generic subprogram that is imported, do not attempt to compile\n\tnon-existent body.\n\n\t* sem_ch12.adb (Instantiate_Subprogram_Body): if the generic is\n\timported, do not generate a raise_program_error for the non-existent\n\tbody.\n\t(Pre_Analyze_Actuals): If an error is detected during pre-analysis,\n\tperform minimal name resolution on the generic to avoid spurious\n\twarnings.\n\t(Find_Actual_Type): the designated type of the actual in a child unit\n\tmay be declared in a parent unit without being an actual.\n\nFrom-SVN: r133575", "tree": {"sha": "e2a0cb6cf6596e59e38f948692d5cb4b9baaf440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2a0cb6cf6596e59e38f948692d5cb4b9baaf440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b91e15091b8d490e742ec04d8f1813c27f9cc13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b91e15091b8d490e742ec04d8f1813c27f9cc13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b91e15091b8d490e742ec04d8f1813c27f9cc13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b91e15091b8d490e742ec04d8f1813c27f9cc13/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d767bc3ac4fdd2e3be5a40db7a9171eb377c1904", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d767bc3ac4fdd2e3be5a40db7a9171eb377c1904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d767bc3ac4fdd2e3be5a40db7a9171eb377c1904"}], "stats": {"total": 411, "additions": 225, "deletions": 186}, "files": [{"sha": "665c1efb861fc552a97c568a7de0aa19d18e1379", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b91e15091b8d490e742ec04d8f1813c27f9cc13/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b91e15091b8d490e742ec04d8f1813c27f9cc13/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=9b91e15091b8d490e742ec04d8f1813c27f9cc13", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -387,9 +387,9 @@ package body Sem_Ch10 is\n \n                elsif Nkind (Cont_Item) = N_Pragma\n                  and then\n-                   (Chars (Cont_Item) = Name_Elaborate\n+                   (Pragma_Name (Cont_Item) = Name_Elaborate\n                       or else\n-                    Chars (Cont_Item) = Name_Elaborate_All)\n+                    Pragma_Name (Cont_Item) = Name_Elaborate_All)\n                  and then not Used_Type_Or_Elab\n                then\n                   Prag_Unit :=\n@@ -759,7 +759,7 @@ package body Sem_Ch10 is\n \n                      Set_Acts_As_Spec (N, False);\n                      Set_Is_Child_Unit (Defining_Entity (Unit_Node));\n-                     Set_Needs_Debug_Info (Defining_Entity (Unit (Lib_Unit)));\n+                     Set_Debug_Info_Needed (Defining_Entity (Unit (Lib_Unit)));\n                      Set_Comes_From_Source_Default (SCS);\n                   end;\n                end if;\n@@ -910,7 +910,6 @@ package body Sem_Ch10 is\n \n             Add_Stub_Constructs (N);\n          end if;\n-\n       end if;\n \n       --  Remove unit from visibility, so that environment is clean for\n@@ -1005,8 +1004,13 @@ package body Sem_Ch10 is\n                then\n                   Nam := Entity (Name (Item));\n \n+                  --  Compile generic subprogram, unless it is intrinsic or\n+                  --  imported so no body is required, or generic package body\n+                  --  if the package spec requires a body.\n+\n                   if (Is_Generic_Subprogram (Nam)\n-                       and then not Is_Intrinsic_Subprogram (Nam))\n+                       and then not Is_Intrinsic_Subprogram (Nam)\n+                       and then not Is_Imported (Nam))\n                     or else (Ekind (Nam) = E_Generic_Package\n                               and then Unit_Requires_Body (Nam))\n                   then\n@@ -1237,7 +1241,7 @@ package body Sem_Ch10 is\n       Item := First (Context_Items (N));\n       while Present (Item)\n         and then Nkind (Item) = N_Pragma\n-        and then Chars (Item) in Configuration_Pragma_Names\n+        and then Pragma_Name (Item) in Configuration_Pragma_Names\n       loop\n          Analyze (Item);\n          Next (Item);\n@@ -1732,7 +1736,6 @@ package body Sem_Ch10 is\n       else\n          Optional_Subunit;\n       end if;\n-\n    end Analyze_Proper_Body;\n \n    ----------------------------------\n@@ -2693,20 +2696,21 @@ package body Sem_Ch10 is\n    begin\n       New_Nodes_OK := New_Nodes_OK + 1;\n       Withn :=\n-        Make_With_Clause (Loc, Name => Build_Unit_Name (Nam));\n+        Make_With_Clause (Loc,\n+          Name => Build_Unit_Name (Nam));\n \n       P := Parent (Unit_Declaration_Node (Ent));\n-      Set_Library_Unit          (Withn, P);\n-      Set_Corresponding_Spec    (Withn, Ent);\n-      Set_First_Name            (Withn, True);\n-      Set_Implicit_With         (Withn, True);\n+      Set_Library_Unit       (Withn, P);\n+      Set_Corresponding_Spec (Withn, Ent);\n+      Set_First_Name         (Withn, True);\n+      Set_Implicit_With      (Withn, True);\n \n       --  If the unit is a package declaration, a private_with_clause on a\n       --  child unit implies that the implicit with on the parent is also\n       --  private.\n \n       if Nkind (Unit (N)) = N_Package_Declaration then\n-         Set_Private_Present    (Withn, Private_Present (Item));\n+         Set_Private_Present (Withn, Private_Present (Item));\n       end if;\n \n       Prepend (Withn, Context_Items (N));\n@@ -2729,13 +2733,10 @@ package body Sem_Ch10 is\n       if Nkind (Unit) = N_Package_Body\n         and then Nkind (Original_Node (Unit)) = N_Package_Instantiation\n       then\n-         return\n-           Defining_Entity\n-             (Specification (Instance_Spec (Original_Node (Unit))));\n-\n+         return Defining_Entity\n+                 (Specification (Instance_Spec (Original_Node (Unit))));\n       elsif Nkind (Unit) = N_Package_Instantiation then\n          return Defining_Entity (Specification (Instance_Spec (Unit)));\n-\n       else\n          return Defining_Entity (Unit);\n       end if;\n@@ -2890,7 +2891,6 @@ package body Sem_Ch10 is\n       end if;\n \n       Install_Limited_Context_Clauses (N);\n-\n    end Install_Context;\n \n    -----------------------------\n@@ -2913,7 +2913,7 @@ package body Sem_Ch10 is\n       Item := First (Context_Items (N));\n       while Present (Item)\n         and then Nkind (Item) = N_Pragma\n-        and then Chars (Item) in Configuration_Pragma_Names\n+        and then Pragma_Name (Item) in Configuration_Pragma_Names\n       loop\n          Next (Item);\n       end loop;\n@@ -3713,6 +3713,7 @@ package body Sem_Ch10 is\n       Item : Node_Id;\n       Id   : Entity_Id;\n       Prev : Entity_Id;\n+\n    begin\n       --  Iterate over explicit with clauses, and check whether the scope of\n       --  each entity is an ancestor of the current unit, in which case it is\n@@ -3950,8 +3951,8 @@ package body Sem_Ch10 is\n             while Present (Item) loop\n                if Nkind (Item) = N_With_Clause\n                  and then not Limited_Present (Item)\n-                 and then Nkind (Unit (Library_Unit (Item)))\n-                            = N_Package_Declaration\n+                 and then Nkind (Unit (Library_Unit (Item))) =\n+                                                  N_Package_Declaration\n                then\n                   Decl :=\n                     First (Visible_Declarations\n@@ -4599,13 +4600,13 @@ package body Sem_Ch10 is\n       Unum : constant Unit_Number_Type := Get_Source_Unit (Library_Unit (N));\n       P    : constant Entity_Id        := Cunit_Entity (Unum);\n \n-      Spec        : Node_Id;            --  To denote a package specification\n-      Lim_Typ     : Entity_Id;          --  To denote shadow entities\n-      Comp_Typ    : Entity_Id;          --  To denote real entities\n+      Spec     : Node_Id;            --  To denote a package specification\n+      Lim_Typ  : Entity_Id;          --  To denote shadow entities\n+      Comp_Typ : Entity_Id;          --  To denote real entities\n \n-      Lim_Header  : Entity_Id;          --  Package entity\n-      Last_Lim_E  : Entity_Id := Empty; --  Last limited entity built\n-      Last_Pub_Lim_E : Entity_Id;       --  To set the first private entity\n+      Lim_Header     : Entity_Id;          --  Package entity\n+      Last_Lim_E     : Entity_Id := Empty; --  Last limited entity built\n+      Last_Pub_Lim_E : Entity_Id;          --  To set the first private entity\n \n       procedure Decorate_Incomplete_Type\n         (E    : Entity_Id;\n@@ -4805,8 +4806,8 @@ package body Sem_Ch10 is\n \n                Set_Non_Limited_View (Lim_Typ, Comp_Typ);\n \n-            elsif Nkind (Decl) = N_Private_Type_Declaration\n-              or else Nkind (Decl) = N_Incomplete_Type_Declaration\n+            elsif Nkind_In (Decl, N_Private_Type_Declaration,\n+                                  N_Incomplete_Type_Declaration)\n             then\n                Comp_Typ := Defining_Identifier (Decl);\n \n@@ -4879,7 +4880,7 @@ package body Sem_Ch10 is\n                   Decorate_Package_Specification (Lim_Typ);\n                   Set_Scope (Lim_Typ, Scope);\n \n-                  Set_Chars (Lim_Typ, Chars (Comp_Typ));\n+                  Set_Chars  (Lim_Typ, Chars (Comp_Typ));\n                   Set_Parent (Lim_Typ, Parent (Comp_Typ));\n                   Set_From_With_Type (Lim_Typ);\n \n@@ -4958,8 +4959,9 @@ package body Sem_Ch10 is\n \n       --  Build the header of the limited_view\n \n-      Lim_Header := Make_Defining_Identifier (Sloc (N),\n-                      Chars => New_Internal_Name (Id_Char => 'Z'));\n+      Lim_Header :=\n+        Make_Defining_Identifier (Sloc (N),\n+          Chars => New_Internal_Name (Id_Char => 'Z'));\n       Set_Ekind (Lim_Header, E_Package);\n       Set_Is_Internal (Lim_Header);\n       Set_Limited_View (P, Lim_Header);\n@@ -5410,15 +5412,13 @@ package body Sem_Ch10 is\n          if Nkind (Item) = N_With_Clause\n            and then Private_Present (Item)\n          then\n-\n             --  If private_with_clause is redundant, remove it from\n             --  context, as a small optimization to subsequent handling\n             --  of private_with clauses in other nested packages..\n \n             if In_Regular_With_Clause (Entity (Name (Item))) then\n                declare\n                   Nxt : constant Node_Id := Next (Item);\n-\n                begin\n                   Remove (Item);\n                   Item := Nxt;\n@@ -5451,7 +5451,6 @@ package body Sem_Ch10 is\n       P : constant Entity_Id := Scope (Unit_Name);\n \n    begin\n-\n       if Debug_Flag_I then\n          Write_Str (\"remove unit \");\n          Write_Name (Chars (Unit_Name));"}, {"sha": "a2019a6e427d65caeb969d80e2de69d5246cb5e2", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 189, "deletions": 149, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b91e15091b8d490e742ec04d8f1813c27f9cc13/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b91e15091b8d490e742ec04d8f1813c27f9cc13/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=9b91e15091b8d490e742ec04d8f1813c27f9cc13", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -434,15 +434,17 @@ package body Sem_Ch12 is\n \n    function Find_Actual_Type\n      (Typ       : Entity_Id;\n-      Gen_Scope : Entity_Id) return Entity_Id;\n+      Gen_Type  : Entity_Id) return Entity_Id;\n    --  When validating the actual types of a child instance, check whether\n    --  the formal is a formal type of the parent unit, and retrieve the current\n    --  actual for it. Typ is the entity in the analyzed formal type declaration\n    --  (component or index type of an array type, or designated type of an\n-   --  access formal) and Gen_Scope is the scope of the analyzed formal array\n+   --  access formal) and Gen_Type is the enclosing analyzed formal array\n    --  or access type. The desired actual may be a formal of a parent, or may\n    --  be declared in a formal package of a parent. In both cases it is a\n    --  generic actual type because it appears within a visible instance.\n+   --  Finally, it may be declared in a parent unit without being a formal\n+   --  of that unit, in which case it must be retrieved by visibility.\n    --  Ambiguities may still arise if two homonyms are declared in two formal\n    --  packages, and the prefix of the formal type may be needed to resolve\n    --  the ambiguity in the instance ???\n@@ -1066,6 +1068,7 @@ package body Sem_Ch12 is\n \n       procedure Set_Analyzed_Formal is\n          Kind : Node_Kind;\n+\n       begin\n          while Present (Analyzed_Formal) loop\n             Kind := Nkind (Analyzed_Formal);\n@@ -1081,12 +1084,9 @@ package body Sem_Ch12 is\n                         (Defining_Unit_Name (Specification (Analyzed_Formal)));\n \n                when N_Formal_Package_Declaration =>\n-                  exit when\n-                    Kind = N_Formal_Package_Declaration\n-                      or else\n-                    Kind = N_Generic_Package_Declaration\n-                      or else\n-                    Kind = N_Package_Declaration;\n+                  exit when Nkind_In (Kind, N_Formal_Package_Declaration,\n+                                            N_Generic_Package_Declaration,\n+                                            N_Package_Declaration);\n \n                when N_Use_Package_Clause | N_Use_Type_Clause => exit;\n \n@@ -1097,10 +1097,10 @@ package body Sem_Ch12 is\n \n                   exit when\n                     Kind not in N_Formal_Subprogram_Declaration\n-                      and then Kind /= N_Subprogram_Declaration\n-                      and then Kind /= N_Freeze_Entity\n-                      and then Kind /= N_Null_Statement\n-                      and then Kind /= N_Itype_Reference\n+                      and then not Nkind_In (Kind, N_Subprogram_Declaration,\n+                                                   N_Freeze_Entity,\n+                                                   N_Null_Statement,\n+                                                   N_Itype_Reference)\n                       and then Chars (Defining_Identifier (Formal)) =\n                                Chars (Defining_Identifier (Analyzed_Formal));\n             end case;\n@@ -1123,6 +1123,7 @@ package body Sem_Ch12 is\n          while Present (Actual) loop\n             if Nkind (Actual) = N_Others_Choice then\n                Others_Present := True;\n+\n                if Present (Next (Actual)) then\n                   Error_Msg_N (\"others must be last association\", Actual);\n                end if;\n@@ -1181,7 +1182,7 @@ package body Sem_Ch12 is\n          --  to the outer instantiation.\n \n          if Nkind (Named) /= N_Others_Choice\n-           and then  Present (Explicit_Generic_Actual_Parameter (Named))\n+           and then Present (Explicit_Generic_Actual_Parameter (Named))\n          then\n             Num_Actuals := Num_Actuals + 1;\n          end if;\n@@ -1474,9 +1475,9 @@ package body Sem_Ch12 is\n       if Nkind (Def) = N_Constrained_Array_Definition then\n          DSS := First (Discrete_Subtype_Definitions (Def));\n          while Present (DSS) loop\n-            if Nkind (DSS) = N_Subtype_Indication\n-              or else Nkind (DSS) = N_Range\n-              or else Nkind (DSS) = N_Attribute_Reference\n+            if Nkind_In (DSS, N_Subtype_Indication,\n+                              N_Range,\n+                              N_Attribute_Reference)\n             then\n                Error_Msg_N (\"only a subtype mark is allowed in a formal\", DSS);\n             end if;\n@@ -1499,8 +1500,8 @@ package body Sem_Ch12 is\n       elsif Is_Internal (Component_Type (T))\n         and then Present (Subtype_Indication (Component_Definition (Def)))\n         and then Nkind (Original_Node\n-                        (Subtype_Indication (Component_Definition (Def))))\n-          = N_Subtype_Indication\n+                         (Subtype_Indication (Component_Definition (Def)))) =\n+                                                         N_Subtype_Indication\n       then\n          Error_Msg_N\n            (\"in a formal, a subtype indication can only be \"\n@@ -2377,7 +2378,6 @@ package body Sem_Ch12 is\n             end if;\n \n          elsif Nkind (Def) = N_Indexed_Component then\n-\n             if  Nkind (Prefix (Def)) /= N_Selected_Component then\n                Error_Msg_N (\"expect valid subprogram name as default\", Def);\n                return;\n@@ -3124,7 +3124,7 @@ package body Sem_Ch12 is\n                   Inline_Now := True;\n \n                --  In configurable_run_time mode we force the inlining of\n-               --  predefined subprogram marked Inline_Always, to minimize\n+               --  predefined subprograms marked Inline_Always, to minimize\n                --  the use of the run-time library.\n \n                elsif Is_Predefined_File_Name\n@@ -3194,10 +3194,11 @@ package body Sem_Ch12 is\n                begin\n                   if Nkind (Decl) = N_Formal_Package_Declaration\n                     or else (Nkind (Decl) = N_Package_Declaration\n-                      and then Is_List_Member (Decl)\n-                      and then Present (Next (Decl))\n-                      and then\n-                        Nkind (Next (Decl)) = N_Formal_Package_Declaration)\n+                               and then Is_List_Member (Decl)\n+                               and then Present (Next (Decl))\n+                               and then\n+                                 Nkind (Next (Decl)) =\n+                                                N_Formal_Package_Declaration)\n                   then\n                      Needs_Body := False;\n                   end if;\n@@ -3825,7 +3826,7 @@ package body Sem_Ch12 is\n \n          Set_Instance_Spec (N, Pack_Decl);\n          Set_Is_Generic_Instance (Pack_Id);\n-         Set_Needs_Debug_Info (Pack_Id);\n+         Set_Debug_Info_Needed (Pack_Id);\n \n          --  Case of not a compilation unit\n \n@@ -3875,7 +3876,7 @@ package body Sem_Ch12 is\n          end if;\n \n          Set_Is_Generic_Instance (Anon_Id);\n-         Set_Needs_Debug_Info    (Anon_Id);\n+         Set_Debug_Info_Needed   (Anon_Id);\n          Act_Decl_Id := New_Copy (Anon_Id);\n \n          Set_Parent            (Act_Decl_Id, Parent (Anon_Id));\n@@ -4207,15 +4208,15 @@ package body Sem_Ch12 is\n    -------------------------\n \n    function Get_Associated_Node (N : Node_Id) return Node_Id is\n-      Assoc : Node_Id := Associated_Node (N);\n+      Assoc : Node_Id;\n \n    begin\n+      Assoc := Associated_Node (N);\n+\n       if Nkind (Assoc) /= Nkind (N) then\n          return Assoc;\n \n-      elsif Nkind (Assoc) = N_Aggregate\n-        or else Nkind (Assoc) = N_Extension_Aggregate\n-      then\n+      elsif Nkind_In (Assoc, N_Aggregate, N_Extension_Aggregate) then\n          return Assoc;\n \n       else\n@@ -4235,15 +4236,11 @@ package body Sem_Ch12 is\n \n          if (Nkind (Assoc) = N_Identifier or else Nkind (Assoc) in N_Op)\n            and then Present (Associated_Node (Assoc))\n-           and then (Nkind (Associated_Node (Assoc)) = N_Function_Call\n-                       or else\n-                     Nkind (Associated_Node (Assoc)) = N_Explicit_Dereference\n-                       or else\n-                     Nkind (Associated_Node (Assoc)) = N_Integer_Literal\n-                       or else\n-                     Nkind (Associated_Node (Assoc)) = N_Real_Literal\n-                       or else\n-                     Nkind (Associated_Node (Assoc)) = N_String_Literal)\n+           and then (Nkind_In (Associated_Node (Assoc), N_Function_Call,\n+                                                        N_Explicit_Dereference,\n+                                                        N_Integer_Literal,\n+                                                        N_Real_Literal,\n+                                                        N_String_Literal))\n          then\n             Assoc := Associated_Node (Assoc);\n          end if;\n@@ -4396,9 +4393,9 @@ package body Sem_Ch12 is\n          if Kind = N_Formal_Type_Declaration then\n             return;\n \n-         elsif Kind = N_Formal_Object_Declaration\n+         elsif Nkind_In (Kind, N_Formal_Object_Declaration,\n+                               N_Formal_Package_Declaration)\n            or else Kind in N_Formal_Subprogram_Declaration\n-           or else Kind = N_Formal_Package_Declaration\n          then\n             null;\n \n@@ -5625,10 +5622,10 @@ package body Sem_Ch12 is\n \n       --  Special casing for identifiers and other entity names and operators\n \n-      elsif     Nkind (New_N) = N_Identifier\n-        or else Nkind (New_N) = N_Character_Literal\n-        or else Nkind (New_N) = N_Expanded_Name\n-        or else Nkind (New_N) = N_Operator_Symbol\n+      elsif Nkind_In (New_N, N_Identifier,\n+                             N_Character_Literal,\n+                             N_Expanded_Name,\n+                             N_Operator_Symbol)\n         or else Nkind (New_N) in N_Op\n       then\n          if not Instantiating then\n@@ -5673,20 +5670,19 @@ package body Sem_Ch12 is\n \n             elsif No (Ent)\n               or else\n-                not (Nkind (Ent) = N_Defining_Identifier\n-                       or else\n-                     Nkind (Ent) = N_Defining_Character_Literal\n-                       or else\n-                     Nkind (Ent) = N_Defining_Operator_Symbol)\n+                not Nkind_In (Ent, N_Defining_Identifier,\n+                                   N_Defining_Character_Literal,\n+                                   N_Defining_Operator_Symbol)\n               or else No (Scope (Ent))\n               or else\n                 (Scope (Ent) = Current_Instantiated_Parent.Gen_Id\n                   and then not Is_Child_Unit (Ent))\n-              or else (Scope_Depth (Scope (Ent)) >\n+              or else\n+                (Scope_Depth (Scope (Ent)) >\n                              Scope_Depth (Current_Instantiated_Parent.Gen_Id)\n-                         and then\n-                       Get_Source_Unit (Ent) =\n-                       Get_Source_Unit (Current_Instantiated_Parent.Gen_Id))\n+                  and then\n+                    Get_Source_Unit (Ent) =\n+                    Get_Source_Unit (Current_Instantiated_Parent.Gen_Id))\n             then\n                Set_Associated_Node (New_N, Empty);\n             end if;\n@@ -5702,6 +5698,7 @@ package body Sem_Ch12 is\n \n             declare\n                Assoc : constant Node_Id := Get_Associated_Node (N);\n+\n             begin\n                if Present (Assoc) then\n                   if Nkind (Assoc) = Nkind (N) then\n@@ -5711,9 +5708,9 @@ package body Sem_Ch12 is\n                   elsif Nkind (Assoc) = N_Function_Call then\n                      Set_Entity (New_N, Entity (Name (Assoc)));\n \n-                  elsif (Nkind (Assoc) = N_Defining_Identifier\n-                          or else Nkind (Assoc) = N_Defining_Character_Literal\n-                          or else Nkind (Assoc) = N_Defining_Operator_Symbol)\n+                  elsif Nkind_In (Assoc, N_Defining_Identifier,\n+                                         N_Defining_Character_Literal,\n+                                         N_Defining_Operator_Symbol)\n                     and then Expander_Active\n                   then\n                      --  Inlining case: we are copying a tree that contains\n@@ -5902,9 +5899,7 @@ package body Sem_Ch12 is\n             Set_Assignment_OK (Name (New_N), True);\n          end if;\n \n-      elsif Nkind (N) = N_Aggregate\n-        or else Nkind (N) = N_Extension_Aggregate\n-      then\n+      elsif Nkind_In (N, N_Aggregate, N_Extension_Aggregate) then\n          if not Instantiating then\n             Set_Associated_Node (N, New_N);\n \n@@ -6029,22 +6024,20 @@ package body Sem_Ch12 is\n         and then Instantiating\n       then\n          declare\n-            Prag_Id : constant Pragma_Id := Get_Pragma_Id (Chars (N));\n-\n+            Prag_Id : constant Pragma_Id := Get_Pragma_Id (N);\n          begin\n             if Prag_Id = Pragma_Ident\n               or else Prag_Id = Pragma_Comment\n             then\n                New_N := Make_Null_Statement (Sloc (N));\n-\n             else\n                Copy_Descendants;\n             end if;\n          end;\n \n-      elsif Nkind (N) = N_Integer_Literal\n-        or else Nkind (N) = N_Real_Literal\n-        or else Nkind (N) = N_String_Literal\n+      elsif Nkind_In (N, N_Integer_Literal,\n+                         N_Real_Literal,\n+                         N_String_Literal)\n       then\n          --  No descendant fields need traversing\n \n@@ -6145,20 +6138,34 @@ package body Sem_Ch12 is\n    ----------------------\n \n    function Find_Actual_Type\n-     (Typ       : Entity_Id;\n-      Gen_Scope : Entity_Id) return Entity_Id\n+     (Typ      : Entity_Id;\n+      Gen_Type : Entity_Id) return Entity_Id\n    is\n-      T : Entity_Id;\n+      Gen_Scope : constant Entity_Id := Scope (Gen_Type);\n+      T         : Entity_Id;\n \n    begin\n+      --  Special processing only applies to child units\n+\n       if not Is_Child_Unit (Gen_Scope) then\n          return Get_Instance_Of (Typ);\n \n+      --  If designated or component type is itself a formal of the child unit,\n+      --  its instance is available.\n+\n+      elsif Scope (Typ) = Gen_Scope then\n+         return Get_Instance_Of (Typ);\n+\n+      --  If the array or access type is not declared in the parent unit,\n+      --  no special processing needed.\n+\n       elsif not Is_Generic_Type (Typ)\n-        or else Scope (Typ) = Gen_Scope\n+        and then Scope (Gen_Scope) /= Scope (Typ)\n       then\n          return Get_Instance_Of (Typ);\n \n+      --  Otherwise, retrieve designated or component type by visibility\n+\n       else\n          T := Current_Entity (Typ);\n          while Present (T) loop\n@@ -6397,7 +6404,7 @@ package body Sem_Ch12 is\n            or else\n              (Nkind (Enc_I) = N_Package_Body\n                and then\n-             In_Same_Declarative_Part (Freeze_Node (Par), Parent (Enc_I)))\n+                 In_Same_Declarative_Part (Freeze_Node (Par), Parent (Enc_I)))\n          then\n             --  The enclosing package may contain several instances. Rather\n             --  than computing the earliest point at which to insert its\n@@ -6511,8 +6518,8 @@ package body Sem_Ch12 is\n          if Nkind (Package_Instantiation (A)) = N_Package_Instantiation then\n             return Package_Instantiation (A);\n \n-         elsif Nkind (Original_Node (Package_Instantiation (A)))\n-                 = N_Package_Instantiation\n+         elsif Nkind (Original_Node (Package_Instantiation (A))) =\n+                                                   N_Package_Instantiation\n          then\n             return Original_Node (Package_Instantiation (A));\n          end if;\n@@ -6554,8 +6561,8 @@ package body Sem_Ch12 is\n \n       else\n          Inst := Next (Decl);\n-         while Nkind (Inst) /= N_Package_Instantiation\n-           and then Nkind (Inst) /= N_Formal_Package_Declaration\n+         while not Nkind_In (Inst, N_Package_Instantiation,\n+                                   N_Formal_Package_Declaration)\n          loop\n             Next (Inst);\n          end loop;\n@@ -6677,11 +6684,11 @@ package body Sem_Ch12 is\n          if Nod = Decls then\n             return True;\n \n-         elsif Nkind (Nod) = N_Subprogram_Body\n-           or else Nkind (Nod) = N_Package_Body\n-           or else Nkind (Nod) = N_Task_Body\n-           or else Nkind (Nod) = N_Protected_Body\n-           or else Nkind (Nod) = N_Block_Statement\n+         elsif Nkind_In (Nod, N_Subprogram_Body,\n+                              N_Package_Body,\n+                              N_Task_Body,\n+                              N_Protected_Body,\n+                              N_Block_Statement)\n          then\n             return False;\n \n@@ -6690,6 +6697,7 @@ package body Sem_Ch12 is\n \n          elsif Nkind (Nod) = N_Compilation_Unit then\n             return False;\n+\n          else\n             Nod := Parent (Nod);\n          end if;\n@@ -6728,7 +6736,7 @@ package body Sem_Ch12 is\n             --  might produce false positives in rare cases, but guarantees\n             --  that we produce all the instance bodies we will need.\n \n-            if (Nkind (Nam) = N_Identifier\n+            if (Is_Entity_Name (Nam)\n                  and then Chars (Nam) = Chars (E))\n               or else (Nkind (Nam) = N_Selected_Component\n                         and then Chars (Selector_Name (Nam)) = Chars (E))\n@@ -6895,6 +6903,7 @@ package body Sem_Ch12 is\n    --  Start of processing for Install_Body\n \n    begin\n+\n       --  If the body is a subunit, the freeze point is the corresponding\n       --  stub in the current compilation, not the subunit itself.\n \n@@ -6919,8 +6928,8 @@ package body Sem_Ch12 is\n \n       Must_Delay :=\n         (Gen_Unit = Act_Unit\n-          and then ((Nkind (Gen_Unit) = N_Package_Declaration)\n-                      or else Nkind (Gen_Unit) = N_Generic_Package_Declaration\n+          and then (Nkind_In (Gen_Unit, N_Package_Declaration,\n+                                        N_Generic_Package_Declaration)\n                       or else (Gen_Unit = Body_Unit\n                                 and then True_Sloc (N) < Sloc (Orig_Body)))\n           and then Is_In_Main_Unit (Gen_Unit)\n@@ -7827,10 +7836,10 @@ package body Sem_Ch12 is\n          end if;\n \n          if (Present (Act_E) and then Is_Overloadable (Act_E))\n-           or else Nkind (Act) = N_Attribute_Reference\n-           or else Nkind (Act) = N_Indexed_Component\n-           or else Nkind (Act) = N_Character_Literal\n-           or else Nkind (Act) = N_Explicit_Dereference\n+           or else Nkind_In (Act, N_Attribute_Reference,\n+                                  N_Indexed_Component,\n+                                  N_Character_Literal,\n+                                  N_Explicit_Dereference)\n          then\n             return;\n          end if;\n@@ -7900,10 +7909,10 @@ package body Sem_Ch12 is\n          Nam := Actual;\n \n       elsif Present (Default_Name (Formal)) then\n-         if Nkind (Default_Name (Formal)) /= N_Attribute_Reference\n-           and then Nkind (Default_Name (Formal)) /= N_Selected_Component\n-           and then Nkind (Default_Name (Formal)) /= N_Indexed_Component\n-           and then Nkind (Default_Name (Formal)) /= N_Character_Literal\n+         if not Nkind_In (Default_Name (Formal), N_Attribute_Reference,\n+                                                 N_Selected_Component,\n+                                                 N_Indexed_Component,\n+                                                 N_Character_Literal)\n            and then Present (Entity (Default_Name (Formal)))\n          then\n             Nam := New_Occurrence_Of (Entity (Default_Name (Formal)), Loc);\n@@ -8297,7 +8306,7 @@ package body Sem_Ch12 is\n                --  a child unit.\n \n                if Nkind (Actual) = N_Aggregate then\n-                     Pre_Analyze_And_Resolve (Actual, Typ);\n+                  Pre_Analyze_And_Resolve (Actual, Typ);\n                end if;\n \n                if Is_Limited_Type (Typ)\n@@ -8385,8 +8394,8 @@ package body Sem_Ch12 is\n       if Ada_Version >= Ada_05\n         and then Present (Actual_Decl)\n         and then\n-          (Nkind (Actual_Decl) = N_Formal_Object_Declaration\n-             or else Nkind (Actual_Decl) = N_Object_Declaration)\n+          Nkind_In (Actual_Decl, N_Formal_Object_Declaration,\n+                                 N_Object_Declaration)\n         and then Nkind (Analyzed_Formal) = N_Formal_Object_Declaration\n         and then Has_Null_Exclusion (Actual_Decl)\n         and then not Has_Null_Exclusion (Analyzed_Formal)\n@@ -8685,8 +8694,24 @@ package body Sem_Ch12 is\n       Scope_Suppress           := Body_Info.Scope_Suppress;\n \n       if No (Gen_Body_Id) then\n-         Load_Parent_Of_Generic (Inst_Node, Specification (Gen_Decl));\n-         Gen_Body_Id := Corresponding_Body (Gen_Decl);\n+\n+         --  For imported generic subprogram, no body to compile, complete\n+         --  the spec entity appropriately.\n+\n+         if Is_Imported (Gen_Unit) then\n+            Set_Is_Imported (Anon_Id);\n+            Set_First_Rep_Item (Anon_Id, First_Rep_Item (Gen_Unit));\n+            Set_Interface_Name (Anon_Id, Interface_Name (Gen_Unit));\n+            Set_Convention     (Anon_Id, Convention     (Gen_Unit));\n+            Set_Has_Completion (Anon_Id);\n+            return;\n+\n+         --  For other cases, commpile the body\n+\n+         else\n+            Load_Parent_Of_Generic (Inst_Node, Specification (Gen_Decl));\n+            Gen_Body_Id := Corresponding_Body (Gen_Decl);\n+         end if;\n       end if;\n \n       Instantiation_Node := Inst_Node;\n@@ -9011,8 +9036,8 @@ package body Sem_Ch12 is\n \n       procedure Validate_Access_Type_Instance is\n          Desig_Type : constant Entity_Id :=\n-                        Find_Actual_Type\n-                          (Designated_Type (A_Gen_T), Scope (A_Gen_T));\n+                        Find_Actual_Type (Designated_Type (A_Gen_T), A_Gen_T);\n+         Desig_Act  : Entity_Id;\n \n       begin\n          if not Is_Access_Type (Act_T) then\n@@ -9046,9 +9071,19 @@ package body Sem_Ch12 is\n          --  by an access type declaration (and not by a subtype declaration)\n          --  must match.\n \n-         if not Subtypes_Match\n-           (Desig_Type, Designated_Type (Base_Type (Act_T)))\n+         Desig_Act := Designated_Type (Base_Type (Act_T));\n+\n+         --  The designated type may have been introduced through a limited_\n+         --  with clause, in which case retrieve the non-limited view.\n+\n+         if Ekind (Desig_Act) = E_Incomplete_Type\n+           and then From_With_Type (Desig_Act)\n          then\n+            Desig_Act := Available_View (Desig_Act);\n+         end if;\n+\n+         if not Subtypes_Match\n+           (Desig_Type, Desig_Act) then\n             Error_Msg_NE\n               (\"designated type of actual does not match that of formal &\",\n                  Actual, Gen_T);\n@@ -9155,7 +9190,7 @@ package body Sem_Ch12 is\n             end if;\n \n             if not Subtypes_Match\n-              (Find_Actual_Type (Etype (I1), Scope (A_Gen_T)), T2)\n+                     (Find_Actual_Type (Etype (I1), A_Gen_T), T2)\n             then\n                Error_Msg_NE\n                  (\"index types of actual do not match those of formal &\",\n@@ -9167,9 +9202,9 @@ package body Sem_Ch12 is\n             Next_Index (I2);\n          end loop;\n \n-         if not Subtypes_Match (\n-            Find_Actual_Type (Component_Type (A_Gen_T), Scope (A_Gen_T)),\n-            Component_Type (Act_T))\n+         if not Subtypes_Match\n+                  (Find_Actual_Type (Component_Type (A_Gen_T), A_Gen_T),\n+                   Component_Type (Act_T))\n          then\n             Error_Msg_NE\n               (\"component subtype of actual does not match that of formal &\",\n@@ -9184,7 +9219,6 @@ package body Sem_Ch12 is\n               (\"actual must have aliased components to match formal type &\",\n                Actual, Gen_T);\n          end if;\n-\n       end Validate_Array_Type_Instance;\n \n       -----------------------------------------------\n@@ -10151,9 +10185,9 @@ package body Sem_Ch12 is\n       else\n          Kind := Nkind (Parent (E));\n          return\n-           Kind = N_Formal_Object_Declaration\n-             or else Kind = N_Formal_Package_Declaration\n-             or else Kind = N_Formal_Type_Declaration\n+           Nkind_In (Kind, N_Formal_Object_Declaration,\n+                           N_Formal_Package_Declaration,\n+                           N_Formal_Type_Declaration)\n              or else\n                (Is_Formal_Subprogram (E)\n                  and then\n@@ -10670,6 +10704,20 @@ package body Sem_Ch12 is\n             end if;\n \n             if Errs /= Serious_Errors_Detected then\n+\n+               --  Do a minimal analysis of the generic, to prevent spurious\n+               --  warnings complaining about the generic being unreferenced,\n+               --  before abandoning the instantiation.\n+\n+               Analyze (Name (N));\n+\n+               if Is_Entity_Name (Name (N))\n+                 and then Etype (Name (N)) /= Any_Type\n+               then\n+                  Generate_Reference  (Entity (Name (N)), Name (N));\n+                  Set_Is_Instantiated (Entity (Name (N)));\n+               end if;\n+\n                Abandon_Instantiation (Act);\n             end if;\n          end if;\n@@ -10772,12 +10820,12 @@ package body Sem_Ch12 is\n          Restore_Private_Views (Empty);\n       end if;\n \n-      Current_Instantiated_Parent  := Saved.Instantiated_Parent;\n-      Exchanged_Views              := Saved.Exchanged_Views;\n-      Hidden_Entities              := Saved.Hidden_Entities;\n-      Current_Sem_Unit             := Saved.Current_Sem_Unit;\n-      Parent_Unit_Visible          := Saved.Parent_Unit_Visible;\n-      Instance_Parent_Unit         := Saved.Instance_Parent_Unit;\n+      Current_Instantiated_Parent := Saved.Instantiated_Parent;\n+      Exchanged_Views             := Saved.Exchanged_Views;\n+      Hidden_Entities             := Saved.Hidden_Entities;\n+      Current_Sem_Unit            := Saved.Current_Sem_Unit;\n+      Parent_Unit_Visible         := Saved.Parent_Unit_Visible;\n+      Instance_Parent_Unit        := Saved.Instance_Parent_Unit;\n \n       Restore_Opt_Config_Switches (Saved.Switches);\n \n@@ -10816,7 +10864,6 @@ package body Sem_Ch12 is\n             return;\n \n          elsif Present (Associated_Formal_Package (Formal)) then\n-\n             Ent := First_Entity (Formal);\n             while Present (Ent) loop\n                exit when Ekind (Ent) = E_Package\n@@ -10890,8 +10937,8 @@ package body Sem_Ch12 is\n \n             --  An unusual case of aliasing: the actual may also be directly\n             --  visible in the generic, and be private there, while it is fully\n-            --  visible in the context of the instance. The internal subtype is\n-            --  private in the instance, but has full visibility like its\n+            --  visible in the context of the instance. The internal subtype\n+            --  is private in the instance, but has full visibility like its\n             --  parent in the enclosing scope. This enforces the invariant that\n             --  the privacy status of all private dependents of a type coincide\n             --  with that of the parent type. This can only happen when a\n@@ -10915,8 +10962,8 @@ package body Sem_Ch12 is\n \n             --  If the actual is itself a formal package for the enclosing\n             --  generic, or the actual for such a formal package, it remains\n-            --  visible on exit from the instance, and therefore nothing\n-            --  needs to be done either, except to keep it accessible.\n+            --  visible on exit from the instance, and therefore nothing needs\n+            --  to be done either, except to keep it accessible.\n \n             if Is_Package\n               and then Renamed_Object (E) = Pack_Id\n@@ -11033,7 +11080,7 @@ package body Sem_Ch12 is\n       ---------------\n \n       function Is_Global (E : Entity_Id) return Boolean is\n-         Se  : Entity_Id := Scope (E);\n+         Se : Entity_Id;\n \n          function Is_Instance_Node (Decl : Node_Id) return Boolean;\n          --  Determine whether the parent node of a reference to a child unit\n@@ -11064,13 +11111,15 @@ package body Sem_Ch12 is\n \n          elsif Is_Child_Unit (E)\n            and then (Is_Instance_Node (Parent (N2))\n-             or else (Nkind (Parent (N2)) = N_Expanded_Name\n-                       and then N2 = Selector_Name (Parent (N2))\n-                       and then Is_Instance_Node (Parent (Parent (N2)))))\n+                      or else (Nkind (Parent (N2)) = N_Expanded_Name\n+                                and then N2 = Selector_Name (Parent (N2))\n+                                and then\n+                                  Is_Instance_Node (Parent (Parent (N2)))))\n          then\n             return True;\n \n          else\n+            Se := Scope (E);\n             while Se /= Gen_Scope loop\n                if Se = Standard_Standard then\n                   return True;\n@@ -11153,9 +11202,10 @@ package body Sem_Ch12 is\n          ------------------\n \n          function Top_Ancestor (E : Entity_Id) return Entity_Id is\n-            Par : Entity_Id := E;\n+            Par : Entity_Id;\n \n          begin\n+            Par := E;\n             while Is_Child_Unit (Par) loop\n                Par := Scope (Par);\n             end loop;\n@@ -11241,8 +11291,7 @@ package body Sem_Ch12 is\n          --  its value. Otherwise the folding will happen in any instantiation,\n \n          elsif Nkind (Parent (N)) = N_Selected_Component\n-           and then (Nkind (Parent (N2)) = N_Integer_Literal\n-                      or else Nkind (Parent (N2)) = N_Real_Literal)\n+           and then Nkind_In (Parent (N2), N_Integer_Literal, N_Real_Literal)\n          then\n             if Present (Entity (Original_Node (Parent (N2))))\n               and then Is_Global (Entity (Original_Node (Parent (N2))))\n@@ -11504,9 +11553,7 @@ package body Sem_Ch12 is\n          if N = Empty then\n             null;\n \n-         elsif Nkind (N) = N_Character_Literal\n-           or else Nkind (N) = N_Operator_Symbol\n-         then\n+         elsif Nkind_In (N, N_Character_Literal, N_Operator_Symbol) then\n             if Nkind (N) = Nkind (Get_Associated_Node (N)) then\n                Reset_Entity (N);\n \n@@ -11545,9 +11592,9 @@ package body Sem_Ch12 is\n                      Set_Etype (N, Empty);\n                   end if;\n \n-               elsif Nkind (N2) = N_Integer_Literal\n-                 or else Nkind (N2) = N_Real_Literal\n-                 or else Nkind (N2) = N_String_Literal\n+               elsif Nkind_In (N2, N_Integer_Literal,\n+                                   N_Real_Literal,\n+                                   N_String_Literal)\n                then\n                   if Present (Original_Node (N2))\n                     and then Nkind (Original_Node (N2)) = Nkind (N)\n@@ -11588,8 +11635,7 @@ package body Sem_Ch12 is\n                end if;\n             end if;\n \n-            --  Complete the check on operands, if node has not been\n-            --  constant-folded.\n+            --  Complete operands check if node has not been constant-folded\n \n             if Nkind (N) in N_Op then\n                Save_Entity_Descendants (N);\n@@ -11624,10 +11670,7 @@ package body Sem_Ch12 is\n                      Set_Etype (N, Empty);\n                   end if;\n \n-               elsif\n-                 (Nkind (N2) = N_Integer_Literal\n-                    or else\n-                  Nkind (N2) = N_Real_Literal)\n+               elsif Nkind_In (N2, N_Integer_Literal, N_Real_Literal)\n                  and then Is_Entity_Name (Original_Node (N2))\n                then\n                   --  Name resolves to named number that is constant-folded,\n@@ -11712,21 +11755,18 @@ package body Sem_Ch12 is\n                --  traversal, so it needs direct access to node fields.\n \n             begin\n-               if Nkind (N) = N_Aggregate\n-                    or else\n-                  Nkind (N) = N_Extension_Aggregate\n-               then\n+               if Nkind_In (N, N_Aggregate, N_Extension_Aggregate) then\n                   N2 := Get_Associated_Node (N);\n \n                   if No (N2) then\n                      Typ := Empty;\n                   else\n                      Typ := Etype (N2);\n \n-                     --  In an instance within a generic, use the name of\n-                     --  the actual and not the original generic parameter.\n-                     --  If the actual is global in the current generic it\n-                     --  must be preserved for its instantiation.\n+                     --  In an instance within a generic, use the name of the\n+                     --  actual and not the original generic parameter. If the\n+                     --  actual is global in the current generic it must be\n+                     --  preserved for its instantiation.\n \n                      if Nkind (Parent (Typ)) = N_Subtype_Declaration\n                        and then\n@@ -11759,8 +11799,8 @@ package body Sem_Ch12 is\n \n                      if Nkind (N2) = Nkind (N)\n                        and then\n-                         (Nkind (Parent (N2)) = N_Procedure_Call_Statement\n-                           or else Nkind (Parent (N2)) = N_Function_Call)\n+                         Nkind_In (Parent (N2), N_Procedure_Call_Statement,\n+                                                N_Function_Call)\n                        and then Comes_From_Source (Typ)\n                      then\n                         if Is_Immediately_Visible (Scope (Typ)) then"}]}