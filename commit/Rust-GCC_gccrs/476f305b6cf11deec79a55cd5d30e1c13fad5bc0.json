{"sha": "476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "node_id": "C_kwDOANBUbNoAKDQ3NmYzMDViNmNmMTFkZWVjNzlhNTVjZDVkMzBlMWMxM2ZhZDViYzA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-13T21:32:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-14T08:08:01Z"}, "message": "libstdc++: Add missing constexpr to std::optional (P2231R1)\n\nThis implements the changes in P2231R1 which make std::optional fully\nconstexpr in C++20.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_construct.h (_Construct): Use\n\tstd::construct_at when constant evaluated.\n\t* include/std/optional (_Storage, _Optional_payload, optional):\n\tAdd constexpr as specified by P2231R1.\n\t* include/std/version (__cpp_lib_optional): Update value for\n\tC++20.\n\t* testsuite/20_util/optional/requirements.cc: Check feature test\n\tmacro.\n\t* testsuite/20_util/optional/constexpr/assign.cc: New test.\n\t* testsuite/20_util/optional/constexpr/cons/conv.cc: New test.\n\t* testsuite/20_util/optional/constexpr/modifiers.cc: New test.\n\t* testsuite/20_util/optional/constexpr/swap.cc: New test.\n\t* testsuite/20_util/optional/version.cc: New test.", "tree": {"sha": "afad676765eb43f4a2287ac67c402579ec6d336a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afad676765eb43f4a2287ac67c402579ec6d336a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee9fa8a57920e6ceb49bbf0929604a34ee5cabb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9fa8a57920e6ceb49bbf0929604a34ee5cabb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9fa8a57920e6ceb49bbf0929604a34ee5cabb4"}], "stats": {"total": 243, "additions": 225, "deletions": 18}, "files": [{"sha": "e53ed0d9f912c20e244363c304c2f9cb01216378", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "patch": "@@ -88,7 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__location->~_Tp();\n     }\n \n-#if __cplusplus > 201703L\n+#if __cplusplus >= 202002L\n   template<typename _Tp, typename... _Args>\n     constexpr auto\n     construct_at(_Tp* __location, _Args&&... __args)\n@@ -104,9 +104,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n #if __cplusplus >= 201103L\n   template<typename _Tp, typename... _Args>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     _Construct(_Tp* __p, _Args&&... __args)\n-    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }\n+    {\n+#if __cplusplus >= 202002L && __has_builtin(__builtin_is_constant_evaluated)\n+      if (__builtin_is_constant_evaluated())\n+\t{\n+\t  // Allow std::_Construct to be used in constant expressions.\n+\t  std::construct_at(__p, std::forward<_Args>(__args)...);\n+\t  return;\n+\t}\n+#endif\n+      ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...);\n+    }\n #else\n   template<typename _T1, typename _T2>\n     inline void"}, {"sha": "b69268b3642c09126e24c966b966e9125479d8e3", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "patch": "@@ -40,6 +40,7 @@\n #include <bits/enable_special_members.h>\n #include <bits/exception_defines.h>\n #include <bits/functional_hash.h>\n+#include <bits/stl_construct.h> // _Construct\n #include <bits/utility.h> // in_place_t\n #if __cplusplus > 201703L\n # include <compare>\n@@ -54,7 +55,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @{\n    */\n \n-#define __cpp_lib_optional 201606L\n+#if __cplusplus == 201703L\n+# define __cpp_lib_optional 201606L\n+#else\n+# define __cpp_lib_optional 202106L\n+#endif\n \n   template<typename _Tp>\n     class optional;\n@@ -228,7 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    { }\n \n \t  // User-provided destructor is needed when _Up has non-trivial dtor.\n-\t  ~_Storage() { }\n+\t  _GLIBCXX20_CONSTEXPR ~_Storage() { }\n \n \t  _Empty_byte _M_empty;\n \t  _Up _M_value;\n@@ -239,12 +244,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool _M_engaged = false;\n \n       template<typename... _Args>\n-\tvoid\n+\tconstexpr void\n \t_M_construct(_Args&&... __args)\n \tnoexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)\n \t{\n-\t  ::new ((void *) std::__addressof(this->_M_payload))\n-\t    _Stored_type(std::forward<_Args>(__args)...);\n+\t  std::_Construct(std::__addressof(this->_M_payload._M_value),\n+\t\t\t  std::forward<_Args>(__args)...);\n \t  this->_M_engaged = true;\n \t}\n \n@@ -393,7 +398,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Optional_payload& operator=(_Optional_payload&&) = default;\n \n       // Destructor needs to destroy the contained value:\n-      ~_Optional_payload() { this->_M_reset(); }\n+      _GLIBCXX20_CONSTEXPR ~_Optional_payload() { this->_M_reset(); }\n     };\n \n   // Common base class for _Optional_base<T> to avoid repeating these\n@@ -407,17 +412,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // The _M_construct operation has !_M_engaged as a precondition\n       // while _M_destruct has _M_engaged as a precondition.\n       template<typename... _Args>\n-\tvoid\n+\tconstexpr void\n \t_M_construct(_Args&&... __args)\n \tnoexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)\n \t{\n-\t  ::new\n-\t    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))\n-\t    _Stored_type(std::forward<_Args>(__args)...);\n-\t  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;\n+\t  static_cast<_Dp*>(this)->_M_payload._M_construct(\n+\t    std::forward<_Args>(__args)...);\n \t}\n \n-      void\n+      constexpr void\n       _M_destruct() noexcept\n       { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }\n \n@@ -782,14 +785,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \n       // Assignment operators.\n-      optional&\n+      _GLIBCXX20_CONSTEXPR optional&\n       operator=(nullopt_t) noexcept\n       {\n \tthis->_M_reset();\n \treturn *this;\n       }\n \n       template<typename _Up = _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \tenable_if_t<__and_v<__not_self<_Up>,\n \t\t\t    __not_<__and_<is_scalar<_Tp>,\n \t\t\t\t\t  is_same<_Tp, decay_t<_Up>>>>,\n@@ -809,6 +813,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Up>\n+\t_GLIBCXX20_CONSTEXPR\n \tenable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,\n \t\t\t    is_constructible<_Tp, const _Up&>,\n \t\t\t    is_assignable<_Tp&, const _Up&>,\n@@ -834,6 +839,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Up>\n+\t_GLIBCXX20_CONSTEXPR\n \tenable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,\n \t\t\t    is_constructible<_Tp, _Up>,\n \t\t\t    is_assignable<_Tp&, _Up>,\n@@ -860,6 +866,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \tenable_if_t<is_constructible_v<_Tp, _Args...>, _Tp&>\n \templace(_Args&&... __args)\n \tnoexcept(is_nothrow_constructible_v<_Tp, _Args...>)\n@@ -870,6 +877,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Up, typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \tenable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>,\n \t\t    _Tp&>\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n@@ -884,7 +892,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Destructor is implicit, implemented in _Optional_base.\n \n       // Swap.\n-      void\n+      _GLIBCXX20_CONSTEXPR void\n       swap(optional& __other)\n       noexcept(is_nothrow_move_constructible_v<_Tp>\n \t       && is_nothrow_swappable_v<_Tp>)\n@@ -994,7 +1002,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    return static_cast<_Tp>(std::forward<_Up>(__u));\n \t}\n \n-      void reset() noexcept { this->_M_reset(); }\n+      _GLIBCXX20_CONSTEXPR void reset() noexcept { this->_M_reset(); }\n     };\n \n   template<typename _Tp>\n@@ -1251,6 +1259,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2748. swappable traits for optionals\n   template<typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline enable_if_t<is_move_constructible_v<_Tp> && is_swappable_v<_Tp>>\n     swap(optional<_Tp>& __lhs, optional<_Tp>& __rhs)\n     noexcept(noexcept(__lhs.swap(__rhs)))"}, {"sha": "a395c05db2d36138a9b501a548d33e6b5aa73d97", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "patch": "@@ -157,7 +157,9 @@\n #define __cpp_lib_node_extract 201606\n #define __cpp_lib_nonmember_container_access 201411\n #define __cpp_lib_not_fn 201603\n-#define __cpp_lib_optional 201606L\n+#if __cplusplus == 201703L // N.B. updated value in C++20\n+# define __cpp_lib_optional 201606L\n+#endif\n #define __cpp_lib_parallel_algorithm 201603L\n #define __cpp_lib_raw_memory_algorithms 201606L\n #define __cpp_lib_sample 201603\n@@ -255,6 +257,7 @@\n # define __cpp_lib_make_obj_using_allocator 201811L\n #endif\n #define __cpp_lib_math_constants 201907L\n+#define __cpp_lib_optional 202106L\n #define __cpp_lib_polymorphic_allocator 201902L\n #if __cpp_lib_concepts\n # define __cpp_lib_ranges 202106L"}, {"sha": "fb82233052d4aaa390ae50810ec0502198f98dff", "filename": "libstdc++-v3/testsuite/20_util/optional/constexpr/assign.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fassign.cc?ref=476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "patch": "@@ -0,0 +1,94 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <optional>\n+#include <testsuite_hooks.h>\n+\n+\n+constexpr bool\n+test_assign()\n+{\n+  std::optional<int> oi(1);\n+  std::optional<unsigned> ou(2u), ou3(3u);\n+\n+  // optional& operator=(nullopt_t);\n+  oi = std::nullopt;\n+  VERIFY( ! oi.has_value() );\n+  oi = std::nullopt;\n+  VERIFY( ! oi.has_value() );\n+\n+  struct S {\n+    constexpr S() { }\n+    constexpr S(char, int, unsigned) { }\n+  };\n+  std::optional<S> os1, os2;\n+\n+  // template<class U = T> optional& operator=(U&&);\n+  os1 = {'0', 1, 2u};\n+  VERIFY( os1.has_value() );\n+  os2 = {'3', 4, 5u};\n+  VERIFY( os2.has_value() );\n+  oi = 0u;\n+  VERIFY( *oi == 0 );\n+  oi = 1u;\n+  VERIFY( *oi == 1 );\n+\n+  // template<class U> optional& operator=(const optional<U>&);\n+  oi = ou;\n+  VERIFY( *oi == 2 );\n+  oi = ou3;\n+  VERIFY( *oi == 3 );\n+\n+  // template<class U> optional& operator=(optional<U>&&);\n+  oi = std::move(ou);\n+  VERIFY( *oi == 2 );\n+  oi = std::move(ou);\n+  VERIFY( *oi == 2 );\n+  oi = std::move(ou3);\n+  VERIFY( *oi == 3 );\n+\n+  return true;\n+}\n+\n+static_assert( test_assign() );\n+\n+constexpr bool\n+test_emplace()\n+{\n+  struct S\n+  {\n+    constexpr S(int i) : val(i) { }\n+    constexpr S(int i, int j) : val(i + j) { }\n+    constexpr S(std::initializer_list<char> l, int i = 0) : val(i)\n+    {\n+      for (char c : l)\n+\tval -= c;\n+    }\n+\n+    int val;\n+\n+    constexpr bool operator==(int i) const { return val == i; }\n+  };\n+\n+\n+  std::optional<S> os;\n+\n+  // template<class... Args> constexpr T& emplace(Args&&...);\n+  os.emplace(1);\n+  VERIFY( *os == 1 );\n+  os.emplace(2);\n+  VERIFY( *os == 2 );\n+  os.emplace(2, 3);\n+  VERIFY( *os == 5 );\n+\n+  // template<class U, class... Args>\n+  // constexpr T& emplace(initializer_list<U>, Args&&...);\n+  os.emplace({'3', '4', '5'});\n+  VERIFY( *os == -156 );\n+  os.emplace({'6', '7', '8'}, 25);\n+  VERIFY( *os == -140 );\n+\n+  return true;\n+}\n+\n+static_assert( test_emplace() );"}, {"sha": "cc638148d25e84d7399bd697abcf1d0741fd53c4", "filename": "libstdc++-v3/testsuite/20_util/optional/constexpr/cons/conv.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fcons%2Fconv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fcons%2Fconv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fcons%2Fconv.cc?ref=476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <optional>\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test_cons()\n+{\n+  std::optional<int> oi(1);\n+  std::optional<long> ol(oi);\n+  VERIFY( *ol == 1L );\n+  VERIFY( *oi == 1 );\n+\n+  std::optional<unsigned> ou(std::move(oi));\n+  VERIFY( *ou == 1u );\n+  VERIFY( oi.has_value() && *oi == 1 );\n+\n+  return true;\n+}\n+\n+static_assert( test_cons() );"}, {"sha": "614607d0216dd97e1bd5ddaeb820acd161af5283", "filename": "libstdc++-v3/testsuite/20_util/optional/constexpr/modifiers.cc", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fmodifiers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fmodifiers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fmodifiers.cc?ref=476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <optional>\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test_reset()\n+{\n+  std::optional<int> oi(1);\n+  oi.reset();\n+  VERIFY( ! oi.has_value() );\n+  oi.reset();\n+  VERIFY( ! oi.has_value() );\n+\n+  return true;\n+}\n+\n+static_assert( test_reset() );"}, {"sha": "2d18a51106c51ab68659851bd9c53d6a4d96955a", "filename": "libstdc++-v3/testsuite/20_util/optional/constexpr/swap.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fswap.cc?ref=476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <optional>\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test_swap()\n+{\n+  std::optional<int> o0, o1(1);\n+  o0.swap(o1);\n+  VERIFY( *o0 == 1 );\n+  VERIFY( ! o1.has_value() );\n+  o0.swap(o1);\n+  VERIFY( ! o0.has_value() );\n+  VERIFY( *o1 == 1 );\n+  o0.swap(o0);\n+  VERIFY( ! o0.has_value() );\n+  o1.swap(o1);\n+  VERIFY( *o1 == 1 );\n+  std::optional<int> o2(2);\n+  swap(o1, o2);\n+  VERIFY( *o1 == 2 );\n+  VERIFY( *o2 == 1 );\n+\n+  return true;\n+}\n+\n+static_assert( test_swap() );"}, {"sha": "c24bd14035105200ad8149af75c2f10917e7bc39", "filename": "libstdc++-v3/testsuite/20_util/optional/requirements.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frequirements.cc?ref=476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "patch": "@@ -18,6 +18,15 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <optional>\n+\n+#ifndef __cpp_lib_optional\n+# error \"Feature test macro for optional is missing in <optional>\"\n+#elif __cpp_lib_optional < 201606L\n+# error \"Feature test macro for optional has wrong value in <optional>\"\n+#elif __cplusplus >= 202002L && __cpp_lib_optional < 202106L\n+# error \"Feature test macro for optional has wrong value for C++20 in <optional>\"\n+#endif\n+\n #include <testsuite_hooks.h>\n \n #include <tuple>"}, {"sha": "d8c9851f28f63eb67d69fef607dd42da74d06832", "filename": "libstdc++-v3/testsuite/20_util/optional/version.cc", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476f305b6cf11deec79a55cd5d30e1c13fad5bc0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fversion.cc?ref=476f305b6cf11deec79a55cd5d30e1c13fad5bc0", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++17 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_optional\n+# error \"Feature test macro for optional is missing in <version>\"\n+#elif __cpp_lib_optional < 201606L\n+# error \"Feature test macro for optional has wrong value in <version>\"\n+#elif __cplusplus >= 202002L && __cpp_lib_optional < 202106L\n+# error \"Feature test macro for optional has wrong value for C++20 in <version>\"\n+#endif"}]}