{"sha": "ebff8232976fef42b38b977d3573c464eadf0838", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJmZjgyMzI5NzZmZWY0MmIzOGI5NzdkMzU3M2M0NjRlYWRmMDgzOA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2001-08-01T02:40:03Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2001-08-01T02:40:03Z"}, "message": "c99-scope-2.c: Don't generally assume adding more largest-type elements to a struct makes its...\n\n\t* gcc.dg/c99-scope-2.c: Don't generally assume adding more\n\tlargest-type elements to a struct makes its size grow.\n\nFrom-SVN: r44529", "tree": {"sha": "e7d9259d56e13588fc816e070587bd58d02c90d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7d9259d56e13588fc816e070587bd58d02c90d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebff8232976fef42b38b977d3573c464eadf0838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebff8232976fef42b38b977d3573c464eadf0838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebff8232976fef42b38b977d3573c464eadf0838", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebff8232976fef42b38b977d3573c464eadf0838/comments", "author": null, "committer": null, "parents": [{"sha": "6ad7895ac23ac971a2f3de9e7899a5389ec21a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad7895ac23ac971a2f3de9e7899a5389ec21a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad7895ac23ac971a2f3de9e7899a5389ec21a7c"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "01220283b0deb90e2dd44e2730a892746f16f59b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebff8232976fef42b38b977d3573c464eadf0838/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebff8232976fef42b38b977d3573c464eadf0838/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebff8232976fef42b38b977d3573c464eadf0838", "patch": "@@ -1,3 +1,8 @@\n+2001-07-31  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcc.dg/c99-scope-2.c: Don't generally assume adding more\n+\tlargest-type elements to a struct makes its size grow.\n+\n 2001-07-31  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/abi/vthunk1.C: New test."}, {"sha": "86ac272a743d6ccaa22e4003c102e45080fe3f94", "filename": "gcc/testsuite/gcc.dg/c99-scope-2.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebff8232976fef42b38b977d3573c464eadf0838/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebff8232976fef42b38b977d3573c464eadf0838/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-2.c?ref=ebff8232976fef42b38b977d3573c464eadf0838", "patch": "@@ -14,58 +14,58 @@ main (void)\n   a = sizeof (struct foo);\n   if (b = sizeof (struct foo { int i0; int i1; }))\n     c = sizeof (struct foo { int i0; int i1; int i2; });\n-  if (!(a < b && b < c))\n+  if (!(a <= b && b <= c))\n     abort ();\n   if ((b = sizeof (struct foo { int i0; int i1; })), 0)\n     c = sizeof (struct foo { int i0; int i1; int i2; });\n   else\n     d = sizeof (struct foo { int i0; int i1; int i2; int i3; });\n-  if (!(a < b && b < d))\n+  if (!(a <= b && b <= d))\n     abort ();\n   switch (b = sizeof (struct foo { int i0; int i1; }))\n     default:\n       c = sizeof (struct foo { int i0; int i1; int i2; });\n-  if (!(a < b && b < c))\n+  if (!(a <= b && b <= c))\n     abort ();\n   do\n     c = sizeof (struct foo { int i0; int i1; int i2; });\n   while ((b = sizeof (struct foo { int i0; int i1; })), 0);\n-  if (!(a < b && b < c))\n+  if (!(a <= b && b <= c))\n     abort ();\n   d = 1;\n   while ((b = sizeof (struct foo { int i0; int i1; })), d)\n     (c = sizeof (struct foo { int i0; int i1; int i2; })), d--;\n-  if (!(a < b && b < c))\n+  if (!(a <= b && b <= c))\n     abort ();\n   d = 1;\n   for ((b = sizeof (struct foo { int i0; int i1; })); d; d--)\n     c = sizeof (struct foo { int i0; int i1; int i2; });\n-  if (!(a < b && b < c))\n+  if (!(a <= b && b <= c))\n     abort ();\n   d = 1;\n   for ((b = sizeof (struct foo { int i0; int i1; })); d; d--)\n     c = sizeof (struct foo);\n-  if (!(a < b && b == c))\n+  if (!(a <= b && b == c))\n     abort ();\n   d = 1;\n   for (; (b = sizeof (struct foo { int i0; int i1; })), d; d--)\n     c = sizeof (struct foo { int i0; int i1; int i2; });\n-  if (!(a < b && b < c))\n+  if (!(a <= b && b <= c))\n     abort ();\n   d = 1;\n   for (; (b = sizeof (struct foo { int i0; int i1; })), d; d--)\n     c = sizeof (struct foo);\n-  if (!(a < b && b == c))\n+  if (!(a <= b && b == c))\n     abort ();\n   d = 1;\n   for (; d; (b = sizeof (struct foo { int i0; int i1; })), d--)\n     c = sizeof (struct foo { int i0; int i1; int i2; });\n-  if (!(a < b && b < c))\n+  if (!(a <= b && b <= c))\n     abort ();\n   d = 1;\n   for (; d; (b = sizeof (struct foo { int i0; int i1; })), d--)\n     c = sizeof (struct foo);\n-  if (!(a < b && b == c))\n+  if (!(a <= b && b == c))\n     abort ();\n   exit (0);\n }"}]}