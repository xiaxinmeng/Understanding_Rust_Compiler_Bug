{"sha": "7c655699ed51b0c987e5472767db48b19044ae05", "node_id": "C_kwDOANBUbNoAKDdjNjU1Njk5ZWQ1MWIwYzk4N2U1NDcyNzY3ZGI0OGIxOTA0NGFlMDU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:42Z"}, "message": "analyzer: add note about valid subscripts [PR106626]\n\nConsider -fanalyzer on:\n\n#include <stdint.h>\n\nint32_t arr[10];\n\nvoid int_arr_write_element_after_end_off_by_one(int32_t x)\n{\n  arr[10] = x;\n}\n\nTrunk x86_64: https://godbolt.org/z/17zn3qYY4\n\nCurrently we emit:\n\n<source>: In function 'int_arr_write_element_after_end_off_by_one':\n<source>:7:11: warning: buffer overflow [CWE-787] [-Wanalyzer-out-of-bounds]\n    7 |   arr[10] = x;\n      |   ~~~~~~~~^~~\n  event 1\n    |\n    |    3 | int32_t arr[10];\n    |      |         ^~~\n    |      |         |\n    |      |         (1) capacity is 40 bytes\n    |\n    +--> 'int_arr_write_element_after_end_off_by_one': events 2-3\n           |\n           |    5 | void int_arr_write_element_after_end_off_by_one(int32_t x)\n           |      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n           |      |      |\n           |      |      (2) entry to 'int_arr_write_element_after_end_off_by_one'\n           |    6 | {\n           |    7 |   arr[10] = x;\n           |      |   ~~~~~~~~~~~\n           |      |           |\n           |      |           (3) out-of-bounds write from byte 40 till byte 43 but 'arr' ends at byte 40\n           |\n<source>:7:11: note: write of 4 bytes to beyond the end of 'arr'\n    7 |   arr[10] = x;\n      |   ~~~~~~~~^~~\n\nThis is worded in terms of bytes, due to the way -Wanalyzer-out-of-bounds\nis implemented, but this isn't what the user wrote.\n\nThis patch tries to get closer to the user's code by adding a note about\narray bounds when we're referring to an array.  In the above example it\nadds this trailing note:\n\n  note: valid subscripts for 'arr' are '[0]' to '[9]'\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106626\n\t* bounds-checking.cc (out_of_bounds::maybe_describe_array_bounds):\n\tNew.\n\t(buffer_overflow::emit): Call maybe_describe_array_bounds.\n\t(buffer_overread::emit): Likewise.\n\t(buffer_underflow::emit): Likewise.\n\t(buffer_underread::emit): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106626\n\t* gcc.dg/analyzer/call-summaries-2.c: Add dg-message for expected\n\tnote about valid indexes.\n\t* gcc.dg/analyzer/out-of-bounds-1.c: Likewise, fixing up existing\n\tdg-message directives.\n\t* gcc.dg/analyzer/out-of-bounds-write-char-arr.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-write-int-arr.c: Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "1576cbce7ffb4aefba1d1b637d885b826ccbe204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1576cbce7ffb4aefba1d1b637d885b826ccbe204"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c655699ed51b0c987e5472767db48b19044ae05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c655699ed51b0c987e5472767db48b19044ae05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c655699ed51b0c987e5472767db48b19044ae05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c655699ed51b0c987e5472767db48b19044ae05/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d69a95c12cc91ec10d6a8c78f401bf6720b08fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d69a95c12cc91ec10d6a8c78f401bf6720b08fce"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "b02bc79a92620d74ad2ea224af2682e7f411c063", "filename": "gcc/analyzer/bounds-checking.cc", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c655699ed51b0c987e5472767db48b19044ae05/gcc%2Fanalyzer%2Fbounds-checking.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c655699ed51b0c987e5472767db48b19044ae05/gcc%2Fanalyzer%2Fbounds-checking.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fbounds-checking.cc?ref=7c655699ed51b0c987e5472767db48b19044ae05", "patch": "@@ -71,6 +71,34 @@ class out_of_bounds : public pending_diagnostic_subclass<out_of_bounds>\n   }\n \n protected:\n+  /* Potentially add a note about valid ways to index this array, such\n+     as (given \"int arr[10];\"):\n+       note: valid subscripts for 'arr' are '[0]' to '[9]'\n+     We print the '[' and ']' characters so as to express the valid\n+     subscripts using C syntax, rather than just as byte ranges,\n+     which hopefully is more clear to the user.  */\n+  void\n+  maybe_describe_array_bounds (location_t loc) const\n+  {\n+    if (!m_diag_arg)\n+      return;\n+    tree t = TREE_TYPE (m_diag_arg);\n+    if (!t)\n+      return;\n+    if (TREE_CODE (t) != ARRAY_TYPE)\n+      return;\n+    tree domain = TYPE_DOMAIN (t);\n+    if (!domain)\n+      return;\n+    tree max_idx = TYPE_MAX_VALUE (domain);\n+    if (!max_idx)\n+      return;\n+    tree min_idx = TYPE_MIN_VALUE (domain);\n+    inform (loc,\n+\t    \"valid subscripts for %qE are %<[%E]%> to %<[%E]%>\",\n+\t    m_diag_arg, min_idx, max_idx);\n+  }\n+\n   const region *m_reg;\n   tree m_diag_arg;\n   byte_range m_out_of_bounds_range;\n@@ -165,6 +193,8 @@ class buffer_overflow : public past_the_end\n \t  inform (rich_loc->get_loc (),\n \t\t  \"write to beyond the end of %qE\",\n \t\t  m_diag_arg);\n+\n+\tmaybe_describe_array_bounds (rich_loc->get_loc ());\n       }\n \n     return warned;\n@@ -245,6 +275,8 @@ class buffer_overread : public past_the_end\n \t  inform (rich_loc->get_loc (),\n \t\t  \"read from after the end of %qE\",\n \t\t  m_diag_arg);\n+\n+\tmaybe_describe_array_bounds (rich_loc->get_loc ());\n       }\n \n     return warned;\n@@ -297,8 +329,11 @@ class buffer_underflow : public out_of_bounds\n   {\n     diagnostic_metadata m;\n     m.add_cwe (124);\n-    return warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t \"buffer underflow\");\n+    bool warned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t\t\"buffer underflow\");\n+    if (warned)\n+      maybe_describe_array_bounds (rich_loc->get_loc ());\n+    return warned;\n   }\n \n   label_text describe_final_event (const evdesc::final_event &ev)\n@@ -346,8 +381,11 @@ class buffer_underread : public out_of_bounds\n   {\n     diagnostic_metadata m;\n     m.add_cwe (127);\n-    return warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t \"buffer underread\");\n+    bool warned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t\t\"buffer underread\");\n+    if (warned)\n+      maybe_describe_array_bounds (rich_loc->get_loc ());\n+    return warned;\n   }\n \n   label_text describe_final_event (const evdesc::final_event &ev)"}, {"sha": "a7a17dbd358ee687246ae6366fa4fde49ab18af9", "filename": "gcc/testsuite/gcc.dg/analyzer/call-summaries-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c655699ed51b0c987e5472767db48b19044ae05/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c655699ed51b0c987e5472767db48b19044ae05/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c?ref=7c655699ed51b0c987e5472767db48b19044ae05", "patch": "@@ -330,6 +330,7 @@ int test_returns_element_ptr (int j)\n   __analyzer_eval (*returns_element_ptr (1) == 8); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (*returns_element_ptr (2) == 9); /* { dg-warning \"TRUE\" } */\n   return *returns_element_ptr (3); /* { dg-warning \"buffer overread\" } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[2\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-1 } */\n }\n \n int returns_offset (int arr[3], int i)"}, {"sha": "dc4de9b28a605bec3842a40db4139b5b0dd6324c", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-1.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c655699ed51b0c987e5472767db48b19044ae05/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c655699ed51b0c987e5472767db48b19044ae05/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-1.c?ref=7c655699ed51b0c987e5472767db48b19044ae05", "patch": "@@ -25,8 +25,9 @@ void test1 (void)\n   id_sequence[2] = 345;\n   id_sequence[3] = 456; /* { dg-line test1 } */\n \n-  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test1 } */\n-  /* { dg-message \"\" \"note\" { target *-*-* } test1 } */\n+  /* { dg-warning \"stack-based buffer overflow\" \"warning\" { target *-*-* } test1 } */\n+  /* { dg-message \"write of 4 bytes to beyond the end of 'id_sequence'\" \"num bad bytes note\" { target *-*-* } test1 } */\n+  /* { dg-message \"valid subscripts for 'id_sequence' are '\\\\\\[0\\\\\\]' to '\\\\\\[2\\\\\\]'\" \"valid subscript note\" { target *-*-* } test1 } */\n }\n \n void test2 (void)\n@@ -46,8 +47,9 @@ void test3 (void)\n   for (int i = n; i >= 0; i--)\n     arr[i] = i; /* { dg-line test3 } */\n \n-  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test3 } */\n-  /* { dg-message \"\" \"note\" { target *-*-* } test3 } */\n+  /* { dg-warning \"stack-based buffer overflow\" \"warning\" { target *-*-* } test3 } */\n+  /* { dg-message \"write of 4 bytes to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } test3 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[3\\\\\\]'\" \"valid subscript note\" { target *-*-* } test3 } */\n }\n \n void test4 (void)\n@@ -72,7 +74,7 @@ void test5 (void)\n   *last_el = 4; /* { dg-line test5 } */\n \n   free (arr);\n-  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test5 } */\n+  /* { dg-warning \"heap-based buffer overflow\" \"warning\" { target *-*-* } test5 } */\n   /* { dg-message \"\" \"note\" { target *-*-* } test5 } */\n }\n \n@@ -89,9 +91,9 @@ void test6 (void)\n     printf (\"x=%d y=%d *p=%d *q=%d\\n\" , x, y, *p, *q);  /* { dg-line test6c } */\n   }\n \n-  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test6b } */\n+  /* { dg-warning \"buffer overflow\" \"warning\" { target *-*-* } test6b } */\n   /* { dg-message \"\" \"note\" { target *-*-* } test6b } */\n-  /* { dg-warning \"overread\" \"warning\" { target *-*-* } test6c } */\n+  /* { dg-warning \"buffer overread\" \"warning\" { target *-*-* } test6c } */\n   /* { dg-message \"\" \"note\" { target *-*-* } test6c } */\n }\n "}, {"sha": "739ebb11590bca86b004b25ad6c603a9ac3684e7", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-char-arr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c655699ed51b0c987e5472767db48b19044ae05/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c655699ed51b0c987e5472767db48b19044ae05/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c?ref=7c655699ed51b0c987e5472767db48b19044ae05", "patch": "@@ -4,18 +4,21 @@ void int_arr_write_element_before_start_far(char x)\n {\n   arr[-100] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte -100 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_before_start_near(char x)\n {\n   arr[-2] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte -2 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_before_start_off_by_one(char x)\n {\n   arr[-1] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte -1 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_at_start(char x)\n@@ -33,18 +36,21 @@ void int_arr_write_element_after_end_off_by_one(char x)\n   arr[10] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte 10 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"write of 1 byte to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }\n \n void int_arr_write_element_after_end_near(char x)\n {\n   arr[11] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte 11 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"write of 1 byte to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }\n \n void int_arr_write_element_after_end_far(char x)\n {\n   arr[100] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write at byte 100 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"write of 1 byte to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }"}, {"sha": "b2b37b92e01ebca560d2852c2da766dc191347c5", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-int-arr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c655699ed51b0c987e5472767db48b19044ae05/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c655699ed51b0c987e5472767db48b19044ae05/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c?ref=7c655699ed51b0c987e5472767db48b19044ae05", "patch": "@@ -6,18 +6,21 @@ void int_arr_write_element_before_start_far(int32_t x)\n {\n   arr[-100] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte -400 till byte -397 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_before_start_near(int32_t x)\n {\n   arr[-2] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte -8 till byte -5 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_before_start_off_by_one(int32_t x)\n {\n   arr[-1] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte -4 till byte -1 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-2 } */\n }\n \n void int_arr_write_element_at_start(int32_t x)\n@@ -35,18 +38,21 @@ void int_arr_write_element_after_end_off_by_one(int32_t x)\n   arr[10] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte 40 till byte 43 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"write of 4 bytes to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }\n \n void int_arr_write_element_after_end_near(int32_t x)\n {\n   arr[11] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte 44 till byte 47 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"write of 4 bytes to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }\n \n void int_arr_write_element_after_end_far(int32_t x)\n {\n   arr[100] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n   /* { dg-message \"out-of-bounds write from byte 400 till byte 403 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n   /* { dg-message \"write of 4 bytes to beyond the end of 'arr'\" \"num bad bytes note\" { target *-*-* } .-2 } */\n+  /* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } .-3 } */\n }"}]}