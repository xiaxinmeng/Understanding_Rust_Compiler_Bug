{"sha": "2b45154d2074a11baa2dfa18247848227fbfa1f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI0NTE1NGQyMDc0YTExYmFhMmRmYTE4MjQ3ODQ4MjI3ZmJmYTFmMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-03-12T20:00:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-03-12T20:00:32Z"}, "message": "gigi.h (shift_unc_components_for_thin_pointers): Kill.\n\n\t* gcc-interface/gigi.h (shift_unc_components_for_thin_pointers): Kill.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Remove call\n\tto above function.\n\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Pool_Address>: Adjust\n\thandling of thin pointers.\n\t<Attr_Descriptor_Size>: Likewise.\n\t(gnat_to_gnu) <N_Free_Statement>: Likewise.\n\t* gcc-interface/utils.c (shift_unc_components_for_thin_pointers): Kill.\n\t(convert_to_fat_pointer): Adjust handling of thin pointers.\n\t(convert) <POINTER_TYPE>: Likewise.\n\t* gcc-interface/utils2.c (build_unary_op) <INDIRECT_REF>: Likewise.\n\nFrom-SVN: r185268", "tree": {"sha": "1b26a4183158628e3053e92f393f5fa662df3146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b26a4183158628e3053e92f393f5fa662df3146"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b45154d2074a11baa2dfa18247848227fbfa1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b45154d2074a11baa2dfa18247848227fbfa1f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b45154d2074a11baa2dfa18247848227fbfa1f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b45154d2074a11baa2dfa18247848227fbfa1f0/comments", "author": null, "committer": null, "parents": [{"sha": "0452b4d47fe1e13bbcb8578e7e348cef2ca17e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0452b4d47fe1e13bbcb8578e7e348cef2ca17e42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0452b4d47fe1e13bbcb8578e7e348cef2ca17e42"}], "stats": {"total": 99, "additions": 55, "deletions": 44}, "files": [{"sha": "bd97c1b6452184cb8bf8bd3e949256473d450459", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2b45154d2074a11baa2dfa18247848227fbfa1f0", "patch": "@@ -1,3 +1,17 @@\n+2012-03-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (shift_unc_components_for_thin_pointers): Kill.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Remove call\n+\tto above function.\n+\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Pool_Address>: Adjust\n+\thandling of thin pointers.\n+\t<Attr_Descriptor_Size>: Likewise.\n+\t(gnat_to_gnu) <N_Free_Statement>: Likewise.\n+\t* gcc-interface/utils.c (shift_unc_components_for_thin_pointers): Kill.\n+\t(convert_to_fat_pointer): Adjust handling of thin pointers.\n+\t(convert) <POINTER_TYPE>: Likewise.\n+\t* gcc-interface/utils2.c (build_unary_op) <INDIRECT_REF>: Likewise.\n+\n 2012-03-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc-interface/Makefile.in (alpha*-dec-osf*): Remove."}, {"sha": "a3320eddafeb7cdcc729090d9505ba6b9e6c3540", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=2b45154d2074a11baa2dfa18247848227fbfa1f0", "patch": "@@ -2280,13 +2280,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t  gnu_fat_type, NULL, !Comes_From_Source (gnat_entity),\n \t\t\t  debug_info_p, gnat_entity);\n \n-\t/* Create the type to be used as what a thin pointer designates:\n-\t   a record type for the object and its template with the fields\n-\t   shifted to have the template at a negative offset.  */\n+\t/* Create the type to be designated by thin pointers: a record type for\n+\t   the array and its template.  We used to shift the fields to have the\n+\t   template at a negative offset, but this was somewhat of a kludge; we\n+\t   now shift thin pointer values explicitly but only those which have a\n+\t   TYPE_UNCONSTRAINED_ARRAY attached to the designated RECORD_TYPE.  */\n \ttem = build_unc_object_type (gnu_template_type, tem,\n \t\t\t\t     create_concat_name (gnat_name, \"XUT\"),\n \t\t\t\t     debug_info_p);\n-\tshift_unc_components_for_thin_pointers (tem);\n \n \tSET_TYPE_UNCONSTRAINED_ARRAY (tem, gnu_type);\n \tTYPE_OBJECT_RECORD_TYPE (gnu_type) = tem;"}, {"sha": "5b95f9c6b9859954c3241e43fc47943690096c77", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=2b45154d2074a11baa2dfa18247848227fbfa1f0", "patch": "@@ -736,10 +736,6 @@ extern tree build_unc_object_type_from_ptr (tree thin_fat_ptr_type,\n \t\t\t\t\t    tree object_type, tree name,\n \t\t\t\t\t    bool debug_info_p);\n \n-/* Shift the component offsets within an unconstrained object TYPE to make it\n-   suitable for use as a designated type for thin pointers.  */\n-extern void shift_unc_components_for_thin_pointers (tree type);\n-\n /* Update anything previously pointing to OLD_TYPE to point to NEW_TYPE.  In\n    the normal case this is just two adjustments, but we have more to do\n    if NEW is an UNCONSTRAINED_ARRAY_TYPE.  */"}, {"sha": "89f54386e7da78bdbdf11561c763e256282167f4", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=2b45154d2074a11baa2dfa18247848227fbfa1f0", "patch": "@@ -1439,7 +1439,10 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t  gnu_ptr\n \t    = build_binary_op (POINTER_PLUS_EXPR, TREE_TYPE (gnu_ptr),\n \t\t\t       gnu_ptr,\n-\t\t\t       byte_position (TYPE_FIELDS (gnu_obj_type)));\n+\t\t\t       fold_build1 (NEGATE_EXPR, sizetype,\n+\t\t\t\t\t    byte_position\n+\t\t\t\t\t    (DECL_CHAIN\n+\t\t\t\t\t     TYPE_FIELDS ((gnu_obj_type)))));\n \n \tgnu_result = convert (gnu_result_type, gnu_ptr);\n       }\n@@ -1950,12 +1953,10 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n       gnu_type = TREE_TYPE (gnu_prefix);\n       gcc_assert (TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE);\n \n-      /* What we want is the offset of the ARRAY field in the record that the\n-        thin pointer designates, but the components have been shifted so this\n-        is actually the opposite of the offset of the BOUNDS field.  */\n+      /* What we want is the offset of the ARRAY field in the record\n+\t that the thin pointer designates.  */\n       gnu_type = TYPE_OBJECT_RECORD_TYPE (gnu_type);\n-      gnu_result = size_binop (MINUS_EXPR, bitsize_zero_node,\n-                               bit_position (TYPE_FIELDS (gnu_type)));\n+      gnu_result = bit_position (DECL_CHAIN (TYPE_FIELDS (gnu_type)));\n       gnu_result_type = get_unpadded_type (Etype (gnat_node));\n       prefix_unused = true;\n       break;\n@@ -6622,7 +6623,10 @@ gnat_to_gnu (Node_Id gnat_node)\n \t    gnu_ptr\n \t      = build_binary_op (POINTER_PLUS_EXPR, TREE_TYPE (gnu_ptr),\n \t\t\t\t gnu_ptr,\n-\t\t\t\t byte_position (TYPE_FIELDS (gnu_obj_type)));\n+\t\t\t\t fold_build1 (NEGATE_EXPR, sizetype,\n+\t\t\t\t\t      byte_position\n+\t\t\t\t\t      (DECL_CHAIN\n+\t\t\t\t\t       TYPE_FIELDS ((gnu_obj_type)))));\n \n \t  /* If we have a special dynamic constrained subtype on the node, use\n \t     it to compute the size; otherwise, use the designated subtype.  */"}, {"sha": "73833586a2a432b8aa7026af2d5fdb9f1020f593", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=2b45154d2074a11baa2dfa18247848227fbfa1f0", "patch": "@@ -3411,27 +3411,6 @@ build_unc_object_type_from_ptr (tree thin_fat_ptr_type, tree object_type,\n   return\n     build_unc_object_type (template_type, object_type, name, debug_info_p);\n }\n-\n-/* Shift the component offsets within an unconstrained object TYPE to make it\n-   suitable for use as a designated type for thin pointers.  */\n-\n-void\n-shift_unc_components_for_thin_pointers (tree type)\n-{\n-  /* Thin pointer values designate the ARRAY data of an unconstrained object,\n-     allocated past the BOUNDS template.  The designated type is adjusted to\n-     have ARRAY at position zero and the template at a negative offset, so\n-     that COMPONENT_REFs on (*thin_ptr) designate the proper location.  */\n-\n-  tree bounds_field = TYPE_FIELDS (type);\n-  tree array_field  = DECL_CHAIN (TYPE_FIELDS (type));\n-\n-  DECL_FIELD_OFFSET (bounds_field)\n-    = size_binop (MINUS_EXPR, size_zero_node, byte_position (array_field));\n-\n-  DECL_FIELD_OFFSET (array_field) = size_zero_node;\n-  DECL_FIELD_BIT_OFFSET (array_field) = bitsize_zero_node;\n-}\n \f\n /* Update anything previously pointing to OLD_TYPE to point to NEW_TYPE.\n    In the normal case this is just two adjustments, but we have more to\n@@ -3616,7 +3595,18 @@ convert_to_fat_pointer (tree type, tree expr)\n       if (TREE_CODE (expr) == ADDR_EXPR)\n \texpr = TREE_OPERAND (expr, 0);\n       else\n-\texpr = build1 (INDIRECT_REF, TREE_TYPE (etype), expr);\n+\t{\n+\t  /* If we have a TYPE_UNCONSTRAINED_ARRAY attached to the RECORD_TYPE,\n+\t     the thin pointer value has been shifted so we first need to shift\n+\t     it back to get the template address.  */\n+\t  if (TYPE_UNCONSTRAINED_ARRAY (TREE_TYPE (etype)))\n+\t    expr\n+\t      = build_binary_op (POINTER_PLUS_EXPR, etype, expr,\n+\t\t\t\t fold_build1 (NEGATE_EXPR, sizetype,\n+\t\t\t\t\t      byte_position\n+\t\t\t\t\t      (DECL_CHAIN (field))));\n+\t  expr = build1 (INDIRECT_REF, TREE_TYPE (etype), expr);\n+\t}\n \n       template_tree = build_component_ref (expr, NULL_TREE, field, false);\n       expr = build_unary_op (ADDR_EXPR, NULL_TREE,\n@@ -4103,12 +4093,19 @@ convert (tree type, tree expr)\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n       /* If converting between two thin pointers, adjust if needed to account\n-\t for any differing offsets, since one of them might be negative.  */\n+\t for differing offsets from the base pointer, depending on whether\n+\t there is a TYPE_UNCONSTRAINED_ARRAY attached to the record type.  */\n       if (TYPE_IS_THIN_POINTER_P (etype) && TYPE_IS_THIN_POINTER_P (type))\n \t{\n-\t  tree byte_diff\n-\t    = size_diffop (byte_position (TYPE_FIELDS (TREE_TYPE (etype))),\n-\t\t\t   byte_position (TYPE_FIELDS (TREE_TYPE (type))));\n+\t  tree etype_pos\n+\t    = TYPE_UNCONSTRAINED_ARRAY (TREE_TYPE (etype)) != NULL_TREE\n+\t      ? byte_position (DECL_CHAIN (TYPE_FIELDS (TREE_TYPE (etype))))\n+\t      : size_zero_node;\n+\t  tree type_pos\n+\t    = TYPE_UNCONSTRAINED_ARRAY (TREE_TYPE (type)) != NULL_TREE\n+\t      ? byte_position (DECL_CHAIN (TYPE_FIELDS (TREE_TYPE (type))))\n+\t      : size_zero_node;\n+\t  tree byte_diff = size_diffop (type_pos, etype_pos);\n \n \t  expr = build1 (NOP_EXPR, type, expr);\n \t  if (integer_zerop (byte_diff))"}, {"sha": "d0769f7996bed8ea33c3401330b1ec1acc1df8cb", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b45154d2074a11baa2dfa18247848227fbfa1f0/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=2b45154d2074a11baa2dfa18247848227fbfa1f0", "patch": "@@ -1396,9 +1396,8 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \t    tree rec_type = TREE_TYPE (type);\n \n \t    if (TREE_CODE (operand) == POINTER_PLUS_EXPR\n-\t\t&& integer_zerop\n-\t\t   (size_binop (PLUS_EXPR, TREE_OPERAND (operand, 1),\n-\t\t\t\tbyte_position (TYPE_FIELDS (rec_type))))\n+\t\t&& TREE_OPERAND (operand, 1)\n+\t\t   == byte_position (DECL_CHAIN (TYPE_FIELDS (rec_type)))\n \t\t&& TREE_CODE (TREE_OPERAND (operand, 0)) == NOP_EXPR)\n \t      {\n \t\toperand = TREE_OPERAND (TREE_OPERAND (operand, 0), 0);"}]}