{"sha": "5cd0f9153d5ae7d646006fc21bb967de4e262d8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNkMGY5MTUzZDVhZTdkNjQ2MDA2ZmMyMWJiOTY3ZGU0ZTI2MmQ4ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-02-05T10:38:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-02-05T10:38:46Z"}, "message": "tm.texi (DWARF_ALT_FRAME_RETURN_COLUMN): Do not require DWARF_FRAME_RETURN_COLUMN to be a general register.\n\ngcc/\n\t* doc/tm.texi (DWARF_ALT_FRAME_RETURN_COLUMN): Do not require\n\tDWARF_FRAME_RETURN_COLUMN to be a general register.\n\t* dwarf2out.c (init_return_column_size): New function, split from...\n\t(expand_builtin_init_dwarf_reg_sizes): ...here.  Allow both\n\tDWARF_FRAME_RETURN_COLUMN and DWARF_ALT_FRAME_RETURN_COLUMN\n\tto be nongeneral registers.\n\t* config/m68k/m68k.h (DWARF_FRAME_REGNUM): Only map FP and\n\tinteger registers.\n\t(DWARF_FRAME_REGISTERS, DWARF_FRAME_RETURN_COLUMN): Define.\n\t(DWARF_ALT_FRAME_RETURN_COLUMN): Define.\n\nFrom-SVN: r121593", "tree": {"sha": "0564697bf3a64211ba6d737dea5a615ec299e0f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0564697bf3a64211ba6d737dea5a615ec299e0f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cd0f9153d5ae7d646006fc21bb967de4e262d8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd0f9153d5ae7d646006fc21bb967de4e262d8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cd0f9153d5ae7d646006fc21bb967de4e262d8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd0f9153d5ae7d646006fc21bb967de4e262d8d/comments", "author": null, "committer": null, "parents": [{"sha": "4fe70b3151497166c316c45e5eec842f9de3a3f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe70b3151497166c316c45e5eec842f9de3a3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe70b3151497166c316c45e5eec842f9de3a3f2"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "ad824be9af5cabc1106bb72000a5aac95b7d6ef7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd0f9153d5ae7d646006fc21bb967de4e262d8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd0f9153d5ae7d646006fc21bb967de4e262d8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cd0f9153d5ae7d646006fc21bb967de4e262d8d", "patch": "@@ -1,3 +1,16 @@\n+2007-02-05  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* doc/tm.texi (DWARF_ALT_FRAME_RETURN_COLUMN): Do not require\n+\tDWARF_FRAME_RETURN_COLUMN to be a general register.\n+\t* dwarf2out.c (init_return_column_size): New function, split from...\n+\t(expand_builtin_init_dwarf_reg_sizes): ...here.  Allow both\n+\tDWARF_FRAME_RETURN_COLUMN and DWARF_ALT_FRAME_RETURN_COLUMN\n+\tto be nongeneral registers.\n+\t* config/m68k/m68k.h (DWARF_FRAME_REGNUM): Only map FP and\n+\tinteger registers.\n+\t(DWARF_FRAME_REGISTERS, DWARF_FRAME_RETURN_COLUMN): Define.\n+\t(DWARF_ALT_FRAME_RETURN_COLUMN): Define.\n+\n 2007-02-04  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* cfgcleanup.c (try_optimize_cfg): Avoid removing ENTRY_BLOCK_PTR."}, {"sha": "d832564147582574283bc29f5093a842734c4358", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd0f9153d5ae7d646006fc21bb967de4e262d8d/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd0f9153d5ae7d646006fc21bb967de4e262d8d/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=5cd0f9153d5ae7d646006fc21bb967de4e262d8d", "patch": "@@ -1092,7 +1092,15 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n /* We must not use the DBX register numbers for the DWARF 2 CFA column\n    numbers because that maps to numbers beyond FIRST_PSEUDO_REGISTER.\n    Instead use the identity mapping.  */\n-#define DWARF_FRAME_REGNUM(REG) REG\n+#define DWARF_FRAME_REGNUM(REG) \\\n+  (INT_REGNO_P (REG) || FP_REGNO_P (REG) ? (REG) : INVALID_REGNUM)\n+\n+/* The return column was originally 24, but gcc used 25 for a while too.\n+   Define both registers 24 and 25 as Pmode ones and use 24 in our own\n+   unwind information.  */\n+#define DWARF_FRAME_REGISTERS 25\n+#define DWARF_FRAME_RETURN_COLUMN 24\n+#define DWARF_ALT_FRAME_RETURN_COLUMN 25\n \n /* Before the prologue, the top of the frame is at 4(%sp).  */\n #define INCOMING_FRAME_SP_OFFSET 4"}, {"sha": "c9f6cb89d47a64a1847392a1d1310203a60a58f8", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd0f9153d5ae7d646006fc21bb967de4e262d8d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd0f9153d5ae7d646006fc21bb967de4e262d8d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5cd0f9153d5ae7d646006fc21bb967de4e262d8d", "patch": "@@ -3092,10 +3092,14 @@ If this RTL is a @code{REG}, you should also define\n \n @defmac DWARF_ALT_FRAME_RETURN_COLUMN\n A C expression whose value is an integer giving a DWARF 2 column\n-number that may be used as an alternate return column.  This should\n-be defined only if @code{DWARF_FRAME_RETURN_COLUMN} is set to a\n-general register, but an alternate column needs to be used for\n-signal frames.\n+number that may be used as an alternative return column.  The column\n+must not correspond to any gcc hard register (that is, it must not\n+be in the range of @code{DWARF_FRAME_REGNUM}).\n+\n+This macro can be useful if @code{DWARF_FRAME_RETURN_COLUMN} is set to a\n+general register, but an alternative column needs to be used for signal\n+frames.  Some targets have also used different frame return columns\n+over time.\n @end defmac\n \n @defmac DWARF_ZERO_REG"}, {"sha": "6cbf9d3874d4675c72de813a679b5772ebd33c21", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cd0f9153d5ae7d646006fc21bb967de4e262d8d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cd0f9153d5ae7d646006fc21bb967de4e262d8d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5cd0f9153d5ae7d646006fc21bb967de4e262d8d", "patch": "@@ -443,6 +443,17 @@ stripattributes (const char *s)\n   return stripped;\n }\n \n+/* MEM is a memory reference for the register size table, each element of\n+   which has mode MODE.  Initialize column C as a return address column.  */\n+\n+static void\n+init_return_column_size (enum machine_mode mode, rtx mem, unsigned int c)\n+{\n+  HOST_WIDE_INT offset = c * GET_MODE_SIZE (mode);\n+  HOST_WIDE_INT size = GET_MODE_SIZE (Pmode);\n+  emit_move_insn (adjust_address (mem, mode, offset), GEN_INT (size));\n+}\n+\n /* Generate code to initialize the register size table.  */\n \n void\n@@ -481,21 +492,12 @@ expand_builtin_init_dwarf_reg_sizes (tree address)\n \t}\n     }\n \n+  if (!wrote_return_column)\n+    init_return_column_size (mode, mem, DWARF_FRAME_RETURN_COLUMN);\n+\n #ifdef DWARF_ALT_FRAME_RETURN_COLUMN\n-  gcc_assert (wrote_return_column);\n-  i = DWARF_ALT_FRAME_RETURN_COLUMN;\n-  wrote_return_column = false;\n-#else\n-  i = DWARF_FRAME_RETURN_COLUMN;\n+  init_return_column_size (mode, mem, DWARF_ALT_FRAME_RETURN_COLUMN);\n #endif\n-\n-  if (! wrote_return_column)\n-    {\n-      enum machine_mode save_mode = Pmode;\n-      HOST_WIDE_INT offset = i * GET_MODE_SIZE (mode);\n-      HOST_WIDE_INT size = GET_MODE_SIZE (save_mode);\n-      emit_move_insn (adjust_address (mem, mode, offset), GEN_INT (size));\n-    }\n }\n \n /* Convert a DWARF call frame info. operation to its string name */"}]}