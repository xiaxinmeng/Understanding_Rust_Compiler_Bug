{"sha": "e3354b6de7a348386425879847c4f18ef1e82791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMzNTRiNmRlN2EzNDgzODY0MjU4Nzk4NDdjNGYxOGVmMWU4Mjc5MQ==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-12-11T08:51:40Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-01-08T03:14:02Z"}, "message": "RISC-V: Implement new style of architecture extension test macros.\n\n- This patch introduce new set of architecture extension test macros\n  which is accept on riscv-c-api-doc recently.\n  - https://github.com/riscv/riscv-c-api-doc/blob/master/riscv-c-api.md#architecture-extension-test-macro\n\n- We will also mark deprecated for legacy architecture extension test macros\n  in GCC 11, but still support that for 1 or 2 release cycles.\n\ngcc/ChangeLog:\n\n\t* common/config/riscv/riscv-common.c (riscv_current_subset_list): New.\n\t* config/riscv/riscv-c.c (riscv-subset.h): New.\n\t(INCLUDE_STRING): Define.\n\t(riscv_cpu_cpp_builtins): Add new style architecture extension\n\ttest macros.\n\t* config/riscv/riscv-subset.h (riscv_subset_list::begin): New.\n\t(riscv_subset_list::end): New.\n\t(riscv_current_subset_list): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/predef-10.c: New.\n\t* gcc.target/riscv/predef-11.c: New.\n\t* gcc.target/riscv/predef-12.c: New.\n\t* gcc.target/riscv/predef-13.c: New.", "tree": {"sha": "684a084e45f07dad44b2eccefdf7e654a6033fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/684a084e45f07dad44b2eccefdf7e654a6033fea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3354b6de7a348386425879847c4f18ef1e82791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3354b6de7a348386425879847c4f18ef1e82791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3354b6de7a348386425879847c4f18ef1e82791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3354b6de7a348386425879847c4f18ef1e82791/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7b4710111e0ac42d14ffdd1d71ff9c6751414e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7b4710111e0ac42d14ffdd1d71ff9c6751414e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b7b4710111e0ac42d14ffdd1d71ff9c6751414e"}], "stats": {"total": 214, "additions": 214, "deletions": 0}, "files": [{"sha": "b3f5c07c819cadff8f2bd9bc63e75f16e5aa4de4", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=e3354b6de7a348386425879847c4f18ef1e82791", "patch": "@@ -112,6 +112,11 @@ static const char *riscv_supported_std_ext (void);\n \n static riscv_subset_list *current_subset_list = NULL;\n \n+const riscv_subset_list *riscv_current_subset_list ()\n+{\n+  return current_subset_list;\n+}\n+\n riscv_subset_t::riscv_subset_t ()\n   : name (), major_version (0), minor_version (0), next (NULL),\n     explicit_version_p (false), implied_p (false)"}, {"sha": "efd4a61ea29947572d0c829afb58d9413ce6a1c0", "filename": "gcc/config/riscv/riscv-c.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Fconfig%2Friscv%2Friscv-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Fconfig%2Friscv%2Friscv-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-c.c?ref=e3354b6de7a348386425879847c4f18ef1e82791", "patch": "@@ -20,12 +20,14 @@ along with GCC; see the file COPYING3.  If not see\n \n #define IN_TARGET_CODE 1\n \n+#define INCLUDE_STRING\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"c-family/c-common.h\"\n #include \"cpplib.h\"\n+#include \"riscv-subset.h\"\n \n #define builtin_define(TXT) cpp_define (pfile, TXT)\n \n@@ -101,4 +103,34 @@ riscv_cpu_cpp_builtins (cpp_reader *pfile)\n       break;\n \n     }\n+\n+  /* Define architecture extension test macros.  */\n+  builtin_define_with_int_value (\"__riscv_arch_test\", 1);\n+\n+  const riscv_subset_list *subset_list = riscv_current_subset_list ();\n+  size_t max_ext_len = 0;\n+\n+  /* Figure out the max length of extension name for reserving buffer.   */\n+  for (const riscv_subset_t *subset = subset_list->begin ();\n+       subset != subset_list->end ();\n+       subset = subset->next)\n+    max_ext_len = MAX (max_ext_len, subset->name.length ());\n+\n+  char *buf = (char *)alloca (max_ext_len + 10 /* For __riscv_ and '\\0'.  */);\n+\n+  for (const riscv_subset_t *subset = subset_list->begin ();\n+       subset != subset_list->end ();\n+       subset = subset->next)\n+    {\n+      int version_value = (subset->major_version * 1000000)\n+\t\t\t   + (subset->minor_version * 1000);\n+      /* Special rule for zicsr and zifencei, it's used for ISA spec 2.2 or\n+\t earlier.  */\n+      if ((subset->name == \"zicsr\" || subset->name == \"zifencei\")\n+\t  && version_value == 0)\n+\tversion_value = 2000000;\n+\n+      sprintf (buf, \"__riscv_%s\", subset->name.c_str ());\n+      builtin_define_with_int_value (buf, version_value);\n+    }\n }"}, {"sha": "793655a01f2dc80c9cff724f4de85c886e8d645c", "filename": "gcc/config/riscv/riscv-subset.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Fconfig%2Friscv%2Friscv-subset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Fconfig%2Friscv%2Friscv-subset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-subset.h?ref=e3354b6de7a348386425879847c4f18ef1e82791", "patch": "@@ -85,6 +85,11 @@ class riscv_subset_list\n   unsigned xlen () const {return m_xlen;};\n \n   static riscv_subset_list *parse (const char *, location_t);\n+\n+  const riscv_subset_t *begin () const {return m_head;};\n+  const riscv_subset_t *end () const {return NULL;};\n };\n \n+extern const riscv_subset_list *riscv_current_subset_list (void);\n+\n #endif /* ! GCC_RISCV_SUBSET_H */"}, {"sha": "7c447bfb08dbeba2d1d1d435e7981ca3100a0db4", "filename": "gcc/testsuite/gcc.target/riscv/predef-10.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-10.c?ref=e3354b6de7a348386425879847c4f18ef1e82791", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32i2p0 -mabi=ilp32 -mcmodel=medlow -misa-spec=2.2\" } */\n+\n+int main () {\n+\n+#ifndef __riscv_arch_test\n+#error \"__riscv_arch_test\"\n+#endif\n+\n+#if __riscv_xlen != 32\n+#error \"__riscv_xlen\"\n+#endif\n+\n+#if !defined(__riscv_i) || (__riscv_i != (2 * 1000 * 1000))\n+#error \"__riscv_i\"\n+#endif\n+\n+#if defined(__riscv_c)\n+#error \"__riscv_c\"\n+#endif\n+\n+#if defined(__riscv_e)\n+#error \"__riscv_e\"\n+#endif\n+\n+#if defined(__riscv_a)\n+#error \"__riscv_a\"\n+#endif\n+\n+#if defined(__riscv_m)\n+#error \"__riscv_m\"\n+#endif\n+\n+#if defined(__riscv_f)\n+#error \"__riscv_f\"\n+#endif\n+\n+#if defined(__riscv_d)\n+#error \"__riscv_d\"\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "80f48113dfa6881b95e0359729dea4e8524deea2", "filename": "gcc/testsuite/gcc.target/riscv/predef-11.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-11.c?ref=e3354b6de7a348386425879847c4f18ef1e82791", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64gc -mabi=lp64 -mcmodel=medlow -misa-spec=2.2\" } */\n+\n+int main () {\n+\n+#ifndef __riscv_arch_test\n+#error \"__riscv_arch_test\"\n+#endif\n+\n+#if __riscv_xlen != 64\n+#error \"__riscv_xlen\"\n+#endif\n+\n+#if !defined(__riscv_i) || (__riscv_i != (2 * 1000 * 1000))\n+#error \"__riscv_i\"\n+#endif\n+\n+#if !defined(__riscv_c) || (__riscv_c != (2 * 1000 * 1000))\n+#error \"__riscv_c\"\n+#endif\n+\n+#if defined(__riscv_e)\n+#error \"__riscv_e\"\n+#endif\n+\n+#if !defined(__riscv_a) || (__riscv_a != (2 * 1000 * 1000))\n+#error \"__riscv_a\"\n+#endif\n+\n+#if !defined(__riscv_m) || (__riscv_m != (2 * 1000 * 1000))\n+#error \"__riscv_m\"\n+#endif\n+\n+#if !defined(__riscv_f) || (__riscv_f != (2 * 1000 * 1000))\n+#error \"__riscv_f\"\n+#endif\n+\n+#if !defined(__riscv_d) || (__riscv_d != (2 * 1000 * 1000))\n+#error \"__riscv_d\"\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "dd35dbde925b353af4393bcff31b082a6f54ee5e", "filename": "gcc/testsuite/gcc.target/riscv/predef-12.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-12.c?ref=e3354b6de7a348386425879847c4f18ef1e82791", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64gc -mabi=lp64 -mcmodel=medlow -misa-spec=20191213\" } */\n+\n+int main () {\n+\n+#ifndef __riscv_arch_test\n+#error \"__riscv_arch_test\"\n+#endif\n+\n+#if __riscv_xlen != 64\n+#error \"__riscv_xlen\"\n+#endif\n+\n+#if !defined(__riscv_i) || (__riscv_i != (2 * 1000 * 1000 + 1 * 1000))\n+#error \"__riscv_i\"\n+#endif\n+\n+#if !defined(__riscv_c) || (__riscv_c != (2 * 1000 * 1000))\n+#error \"__riscv_c\"\n+#endif\n+\n+#if defined(__riscv_e)\n+#error \"__riscv_e\"\n+#endif\n+\n+#if !defined(__riscv_a) || (__riscv_a != (2 * 1000 * 1000 + 1 * 1000))\n+#error \"__riscv_a\"\n+#endif\n+\n+#if !defined(__riscv_m) || (__riscv_m != (2 * 1000 * 1000))\n+#error \"__riscv_m\"\n+#endif\n+\n+#if !defined(__riscv_f) || (__riscv_f != (2 * 1000 * 1000 + 2 * 1000))\n+#error \"__riscv_f\"\n+#endif\n+\n+#if !defined(__riscv_d) || (__riscv_d != (2 * 1000 * 1000 + 2 * 1000))\n+#error \"__riscv_d\"\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "95cf0012408cecd1539bb067b4e319e84fc281bd", "filename": "gcc/testsuite/gcc.target/riscv/predef-13.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3354b6de7a348386425879847c4f18ef1e82791/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-13.c?ref=e3354b6de7a348386425879847c4f18ef1e82791", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32e -mabi=ilp32e -mcmodel=medlow -misa-spec=2.2\" } */\n+\n+int main () {\n+\n+#ifndef __riscv_arch_test\n+#error \"__riscv_arch_test\"\n+#endif\n+\n+#if __riscv_xlen != 32\n+#error \"__riscv_xlen\"\n+#endif\n+\n+#if defined(__riscv_i)\n+#error \"__riscv_i\"\n+#endif\n+\n+#if defined(__riscv_c)\n+#error \"__riscv_c\"\n+#endif\n+\n+#if !defined(__riscv_e) || (__riscv_e != (1 * 1000 * 1000 + 9 * 1000))\n+#error \"__riscv_e\"\n+#endif\n+\n+#if defined(__riscv_a)\n+#error \"__riscv_a\"\n+#endif\n+\n+#if defined(__riscv_m)\n+#error \"__riscv_m\"\n+#endif\n+\n+#if defined(__riscv_f)\n+#error \"__riscv_f\"\n+#endif\n+\n+#if defined(__riscv_d)\n+#error \"__riscv_d\"\n+#endif\n+\n+  return 0;\n+}"}]}