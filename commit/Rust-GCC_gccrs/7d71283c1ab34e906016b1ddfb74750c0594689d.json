{"sha": "7d71283c1ab34e906016b1ddfb74750c0594689d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3MTI4M2MxYWIzNGU5MDYwMTZiMWRkZmI3NDc1MGMwNTk0Njg5ZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-06-27T16:55:06Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-06-27T16:55:06Z"}, "message": "ada-tree.h (SET_TYPE_LANG_SPECIFIC, [...]): Fix -Wc++-compat warnings.\n\n\t* ada-tree.h (SET_TYPE_LANG_SPECIFIC, SET_DECL_LANG_SPECIFIC): Fix\n\t-Wc++-compat warnings.\n\t* adaint.c (__gnat_locate_regular_file, __gnat_locate_exec,\n\t__gnat_locate_exec_on_path): Likewise.\n\t* decl.c (annotate_value): Likewise.\n\t* misc.c (gnat_handle_option): Likewise.\n\t* trans.c (gnat_to_gnu, extract_encoding, decode_name,\n\tpost_error_ne_tree): Likewise.\n\nFrom-SVN: r137192", "tree": {"sha": "c29870c281770e6c5682108f6c27bb8499da44f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c29870c281770e6c5682108f6c27bb8499da44f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d71283c1ab34e906016b1ddfb74750c0594689d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d71283c1ab34e906016b1ddfb74750c0594689d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d71283c1ab34e906016b1ddfb74750c0594689d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d71283c1ab34e906016b1ddfb74750c0594689d/comments", "author": null, "committer": null, "parents": [{"sha": "5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ead67f603d287ce0a4c66e173f556af0d7ae8f7"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "15ad6dcd4a2f8000f984d509eed40efad3c71a0d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7d71283c1ab34e906016b1ddfb74750c0594689d", "patch": "@@ -1,3 +1,14 @@\n+2008-06-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ada-tree.h (SET_TYPE_LANG_SPECIFIC, SET_DECL_LANG_SPECIFIC): Fix\n+\t-Wc++-compat warnings.\n+\t* adaint.c (__gnat_locate_regular_file, __gnat_locate_exec,\n+\t__gnat_locate_exec_on_path): Likewise.\n+\t* decl.c (annotate_value): Likewise.\n+\t* misc.c (gnat_handle_option): Likewise.\n+\t* trans.c (gnat_to_gnu, extract_encoding, decode_name,\n+\tpost_error_ne_tree): Likewise.\n+\n 2008-06-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* utils.c (convert) <CONSTRUCTOR>: When converting it to a packable"}, {"sha": "044cea811b3060741f6004d0c5f62333a0c104c2", "filename": "gcc/ada/ada-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada-tree.h?ref=7d71283c1ab34e906016b1ddfb74750c0594689d", "patch": "@@ -39,15 +39,15 @@ struct lang_type GTY(()) {tree t; };\n #define SET_TYPE_LANG_SPECIFIC(NODE, X)\t\\\n  (TYPE_LANG_SPECIFIC (NODE)\t\t\t\\\n   = (TYPE_LANG_SPECIFIC (NODE)\t\t\t\\\n-     ? TYPE_LANG_SPECIFIC (NODE) : ggc_alloc (sizeof (struct lang_type))))   \\\n+     ? TYPE_LANG_SPECIFIC (NODE) : GGC_NEW (struct lang_type)))   \\\n  ->t = X;\n \n #define GET_DECL_LANG_SPECIFIC(NODE) \\\n   (DECL_LANG_SPECIFIC (NODE) ? DECL_LANG_SPECIFIC (NODE)->t : NULL_TREE)\n #define SET_DECL_LANG_SPECIFIC(NODE, VALUE)\t\\\n  (DECL_LANG_SPECIFIC (NODE)\t\t\t\\\n   = (DECL_LANG_SPECIFIC (NODE)\t\t\t\\\n-     ? DECL_LANG_SPECIFIC (NODE) : ggc_alloc (sizeof (struct lang_decl))))   \\\n+     ? DECL_LANG_SPECIFIC (NODE) : GGC_NEW (struct lang_decl)))   \\\n  ->t = VALUE;\n \n /* Flags added to GCC type nodes.  */"}, {"sha": "8ace0a1c8271b6f3f18992c62369307776f8dd1c", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=7d71283c1ab34e906016b1ddfb74750c0594689d", "patch": "@@ -2147,7 +2147,7 @@ char *\n __gnat_locate_regular_file (char *file_name, char *path_val)\n {\n   char *ptr;\n-  char *file_path = alloca (strlen (file_name) + 1);\n+  char *file_path = (char *) alloca (strlen (file_name) + 1);\n   int absolute;\n \n   /* Return immediately if file_name is empty */\n@@ -2196,7 +2196,7 @@ __gnat_locate_regular_file (char *file_name, char *path_val)\n \n   {\n     /* The result has to be smaller than path_val + file_name.  */\n-    char *file_path = alloca (strlen (path_val) + strlen (file_name) + 2);\n+    char *file_path = (char *) alloca (strlen (path_val) + strlen (file_name) + 2);\n \n     for (;;)\n       {\n@@ -2245,7 +2245,7 @@ __gnat_locate_exec (char *exec_name, char *path_val)\n   if (!strstr (exec_name, HOST_EXECUTABLE_SUFFIX))\n     {\n       char *full_exec_name\n-        = alloca (strlen (exec_name) + strlen (HOST_EXECUTABLE_SUFFIX) + 1);\n+        = (char *) alloca (strlen (exec_name) + strlen (HOST_EXECUTABLE_SUFFIX) + 1);\n \n       strcpy (full_exec_name, exec_name);\n       strcat (full_exec_name, HOST_EXECUTABLE_SUFFIX);\n@@ -2298,7 +2298,7 @@ __gnat_locate_exec_on_path (char *exec_name)\n   char *path_val = getenv (\"PATH\");\n #endif\n   if (path_val == NULL) return NULL;\n-  apath_val = alloca (strlen (path_val) + 1);\n+  apath_val = (char *) alloca (strlen (path_val) + 1);\n   strcpy (apath_val, path_val);\n   return __gnat_locate_exec (exec_name, apath_val);\n #endif"}, {"sha": "e6865d292bc7e39c5bb0ee91b21f144732a04b24", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=7d71283c1ab34e906016b1ddfb74750c0594689d", "patch": "@@ -6774,7 +6774,7 @@ annotate_value (tree gnu_size)\n   /* Save the result in the cache.  */\n   if (h)\n     {\n-      *h = ggc_alloc (sizeof (struct tree_int_map));\n+      *h = GGC_NEW (struct tree_int_map);\n       (*h)->base.from = gnu_size;\n       (*h)->to = ret;\n     }"}, {"sha": "85dd22e8bb385b4496618eddc38a51a7f3425bfc", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=7d71283c1ab34e906016b1ddfb74750c0594689d", "patch": "@@ -232,7 +232,7 @@ gnat_handle_option (size_t scode, const char *arg, int value)\n   switch (code)\n     {\n     case OPT_I:\n-      q = xmalloc (sizeof(\"-I\") + strlen (arg));\n+      q = XNEWVEC (char, sizeof(\"-I\") + strlen (arg));\n       strcpy (q, \"-I\");\n       strcat (q, arg);\n       gnat_argv[gnat_argc] = q;\n@@ -289,7 +289,7 @@ gnat_handle_option (size_t scode, const char *arg, int value)\n \n     case OPT_gnat:\n       /* Recopy the switches without the 'gnat' prefix.  */\n-      gnat_argv[gnat_argc] = xmalloc (strlen (arg) + 2);\n+      gnat_argv[gnat_argc] = XNEWVEC (char, strlen (arg) + 2);\n       gnat_argv[gnat_argc][0] = '-';\n       strcpy (gnat_argv[gnat_argc] + 1, arg);\n       gnat_argc++;"}, {"sha": "89b10c695da818463aafd8f46336f9bb67e0185a", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d71283c1ab34e906016b1ddfb74750c0594689d/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=7d71283c1ab34e906016b1ddfb74750c0594689d", "patch": "@@ -3273,7 +3273,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  int i;\n \t  char *string;\n \t  if (length >= ALLOCA_THRESHOLD)\n-             string = xmalloc (length + 1); /* in case of large strings */\n+             string = XNEWVEC (char, length + 1); /* in case of large strings */\n           else\n              string = (char *) alloca (length + 1);\n \n@@ -6922,7 +6922,7 @@ set_expr_location_from_node (tree node, Node_Id gnat_node)\n static const char *\n extract_encoding (const char *name)\n {\n-  char *encoding = ggc_alloc (strlen (name));\n+  char *encoding = GGC_NEWVEC (char, strlen (name));\n   \n   get_encoding (name, encoding);\n   \n@@ -6934,7 +6934,7 @@ extract_encoding (const char *name)\n static const char *\n decode_name (const char *name)\n {\n-  char *decoded = ggc_alloc (strlen (name) * 2 + 60);\n+  char *decoded = GGC_NEWVEC (char, strlen (name) * 2 + 60);\n   \n   __gnat_decode (name, decoded, 0);\n   \n@@ -6998,7 +6998,7 @@ post_error_ne_num (const char *msg, Node_Id node, Entity_Id ent, int n)\n void\n post_error_ne_tree (const char *msg, Node_Id node, Entity_Id ent, tree t)\n {\n-  char *newmsg = alloca (strlen (msg) + 1);\n+  char *newmsg = XALLOCAVEC (char, strlen (msg) + 1);\n   String_Template temp = {1, 0};\n   Fat_Pointer fp;\n   char start_yes, end_yes, start_no, end_no;"}]}