{"sha": "31da952a49ef2861ee35786a3e41865ac259599c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFkYTk1MmE0OWVmMjg2MWVlMzU3ODZhM2U0MTg2NWFjMjU5NTk5Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-08-27T19:06:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-08-27T19:06:59Z"}, "message": "compiler: Don't record dependencies of invalid redefinitions.\n\n    \n    The gofrontend would crash when trying to find the initialization\n    order of a variable list where one of the listed variables was an\n    invalid redefinition of another in a call statement.  This patch\n    fixes initialization from call statements to consider invalid\n    redefinitions before recording dependency information.\n    \n    Fixes golang/go#11543.\n    \n    Reviewed-on: https://go-review.googlesource.com/13895\n\nFrom-SVN: r227276", "tree": {"sha": "0d00f5f3ee3e684213177e8eb0fba4954e1b391b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d00f5f3ee3e684213177e8eb0fba4954e1b391b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31da952a49ef2861ee35786a3e41865ac259599c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31da952a49ef2861ee35786a3e41865ac259599c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31da952a49ef2861ee35786a3e41865ac259599c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31da952a49ef2861ee35786a3e41865ac259599c/comments", "author": null, "committer": null, "parents": [{"sha": "a5e5ea0c074caec82857a5f62173e161ee6b1615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e5ea0c074caec82857a5f62173e161ee6b1615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5e5ea0c074caec82857a5f62173e161ee6b1615"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "4561966046c22dfaa9c0af49a971912dd425b808", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31da952a49ef2861ee35786a3e41865ac259599c/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31da952a49ef2861ee35786a3e41865ac259599c/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=31da952a49ef2861ee35786a3e41865ac259599c", "patch": "@@ -1,4 +1,4 @@\n-5ee78e7d52a4cad0b23f5bc62e5b452489243c70\n+a1d2cac484f46068b5a6ddf3e041d425a3d25e0c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ea9104fc3c3b9db9c2a53bac2ce1a7dada3a4e63", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31da952a49ef2861ee35786a3e41865ac259599c/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31da952a49ef2861ee35786a3e41865ac259599c/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=31da952a49ef2861ee35786a3e41865ac259599c", "patch": "@@ -6753,7 +6753,8 @@ Unknown_name::set_real_named_object(Named_object* no)\n Named_object::Named_object(const std::string& name,\n \t\t\t   const Package* package,\n \t\t\t   Classification classification)\n-  : name_(name), package_(package), classification_(classification)\n+  : name_(name), package_(package), classification_(classification),\n+    is_redefinition_(false)\n {\n   if (Gogo::is_sink_name(name))\n     go_assert(classification == NAMED_OBJECT_SINK);\n@@ -7439,6 +7440,8 @@ Bindings::new_definition(Named_object* old_object, Named_object* new_object)\n   else\n     error_at(new_object->location(), \"redefinition of %qs: %s\", n.c_str(),\n \t     reason.c_str());\n+  old_object->set_is_redefinition();\n+  new_object->set_is_redefinition();\n \n   inform(old_object->location(), \"previous definition of %qs was here\",\n \t n.c_str());"}, {"sha": "374f155e05d9e79433ab4d0f5210af4485c38cdb", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31da952a49ef2861ee35786a3e41865ac259599c/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31da952a49ef2861ee35786a3e41865ac259599c/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=31da952a49ef2861ee35786a3e41865ac259599c", "patch": "@@ -2389,6 +2389,17 @@ class Named_object\n   void\n   export_named_object(Export*) const;\n \n+  // Mark this named object as an invalid redefinition of another object.\n+  void\n+  set_is_redefinition()\n+  { this->is_redefinition_ = true; }\n+\n+  // Return whether or not this object is a invalid redefinition of another\n+  // object.\n+  bool\n+  is_redefinition() const\n+  { return this->is_redefinition_; }\n+\n  private:\n   Named_object(const std::string&, const Package*, Classification);\n \n@@ -2412,6 +2423,8 @@ class Named_object\n     Function_declaration* func_declaration_value;\n     Package* package_value;\n   } u_;\n+  // True if this object is an invalid redefinition of another object.\n+  bool is_redefinition_;\n };\n \n // A binding contour.  This binds names to objects."}, {"sha": "cc4377627e90da187ee57d09e3b282c603050d47", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31da952a49ef2861ee35786a3e41865ac259599c/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31da952a49ef2861ee35786a3e41865ac259599c/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=31da952a49ef2861ee35786a3e41865ac259599c", "patch": "@@ -1741,6 +1741,14 @@ Parse::init_vars_from_call(const Typed_identifier_list* vars, Type* type,\n \t    first_var = no;\n \t  else\n \t    {\n+              // If the current object is a redefinition of another object, we\n+              // might have already recorded the dependency relationship between\n+              // it and the first variable.  Either way, an error will be\n+              // reported for the redefinition and we don't need to properly\n+              // record dependency information for an invalid program.\n+              if (no->is_redefinition())\n+                continue;\n+\n \t      // The subsequent vars have an implicit dependency on\n \t      // the first one, so that everything gets initialized in\n \t      // the right order and so that we detect cycles"}]}