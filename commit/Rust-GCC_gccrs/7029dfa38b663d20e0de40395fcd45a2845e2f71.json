{"sha": "7029dfa38b663d20e0de40395fcd45a2845e2f71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyOWRmYTM4YjY2M2QyMGUwZGU0MDM5NWZjZDQ1YTI4NDVlMmY3MQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-19T20:17:42Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-21T21:48:11Z"}, "message": "c++: Implement -Wctad-maybe-unsupported.\n\nI noticed that clang++ has this CTAD warning and thought that it might\nbe useful to have it.  From clang++: \"Some style guides want to allow\nusing CTAD only on types that \"opt-in\"; i.e. on types that are designed\nto support it and not just types that *happen* to work with it.\"\n\nSo this warning warns when CTAD deduced a type, but the type does not\ndefine any deduction guides.  In that case CTAD worked only because the\ncompiler synthesized the implicit deduction guides.  That might not be\nintended.\n\nIt can be suppressed by adding a deduction guide that will never be\nconsidered:\n\n  struct allow_ctad_t;\n  template <typename T> struct S { S(T) {} };\n  S(allow_ctad_t) -> S<void>;\n\nThis warning is off by default.  It doesn't warn when the type comes\nfrom a system header unless -Wsystem-headers.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt (Wctad-maybe-unsupported): New option.\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (deduction_guides_for): Add a bool parameter.  Set it.\n\t(do_class_deduction): Warn when CTAD succeeds but the type doesn't\n\thave any explicit deduction guides.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Document -Wctad-maybe-unsupported.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wctad-maybe-unsupported.C: New test.\n\t* g++.dg/warn/Wctad-maybe-unsupported2.C: New test.\n\t* g++.dg/warn/Wctad-maybe-unsupported3.C: New test.\n\t* g++.dg/warn/Wctad-maybe-unsupported.h: New file.", "tree": {"sha": "8e17199e922c860dc4b9227e1a01b94d56e4a8c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e17199e922c860dc4b9227e1a01b94d56e4a8c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7029dfa38b663d20e0de40395fcd45a2845e2f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7029dfa38b663d20e0de40395fcd45a2845e2f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7029dfa38b663d20e0de40395fcd45a2845e2f71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7029dfa38b663d20e0de40395fcd45a2845e2f71/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68402af1c68301c6bc852ddba6c63966ed706178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68402af1c68301c6bc852ddba6c63966ed706178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68402af1c68301c6bc852ddba6c63966ed706178"}], "stats": {"total": 159, "additions": 154, "deletions": 5}, "files": [{"sha": "da6c3e1a224afef165f1e24d1c4cc5f96c785e45", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=7029dfa38b663d20e0de40395fcd45a2845e2f71", "patch": "@@ -475,6 +475,11 @@ Wcpp\n C ObjC C++ ObjC++ CppReason(CPP_W_WARNING_DIRECTIVE)\n ; Documented in common.opt\n \n+Wctad-maybe-unsupported\n+C++ ObjC++ Var(warn_ctad_maybe_unsupported) Warning\n+Warn when performing class template argument deduction on a type with no\n+deduction guides.\n+\n Wctor-dtor-privacy\n C++ ObjC++ Var(warn_ctor_dtor_privacy) Warning\n Warn when all constructors and destructors are private."}, {"sha": "97d0c245f7e4acbddc85f470aaba909c810c7b1a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7029dfa38b663d20e0de40395fcd45a2845e2f71", "patch": "@@ -28830,17 +28830,19 @@ static GTY((deletable)) hash_map<tree, tree_pair_p> *dguide_cache;\n \n /* Return the non-aggregate deduction guides for deducible template TMPL.  The\n    aggregate candidate is added separately because it depends on the\n-   initializer.  */\n+   initializer.  Set ANY_DGUIDES_P if we find a non-implicit deduction\n+   guide.  */\n \n static tree\n-deduction_guides_for (tree tmpl, tsubst_flags_t complain)\n+deduction_guides_for (tree tmpl, bool &any_dguides_p, tsubst_flags_t complain)\n {\n   tree guides = NULL_TREE;\n   if (DECL_ALIAS_TEMPLATE_P (tmpl))\n     {\n       tree under = DECL_ORIGINAL_TYPE (DECL_TEMPLATE_RESULT (tmpl));\n       tree tinfo = get_template_info (under);\n-      guides = deduction_guides_for (TI_TEMPLATE (tinfo), complain);\n+      guides = deduction_guides_for (TI_TEMPLATE (tinfo), any_dguides_p,\n+\t\t\t\t     complain);\n     }\n   else\n     {\n@@ -28849,6 +28851,8 @@ deduction_guides_for (tree tmpl, tsubst_flags_t complain)\n \t\t\t\t      LOOK_want::NORMAL, /*complain*/false);\n       if (guides == error_mark_node)\n \tguides = NULL_TREE;\n+      else\n+\tany_dguides_p = true;\n     }\n \n   /* Cache the deduction guides for a template.  We also remember the result of\n@@ -28974,7 +28978,8 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n   if (args == NULL)\n     return error_mark_node;\n \n-  tree cands = deduction_guides_for (tmpl, complain);\n+  bool any_dguides_p = false;\n+  tree cands = deduction_guides_for (tmpl, any_dguides_p, complain);\n   if (cands == error_mark_node)\n     return error_mark_node;\n \n@@ -29063,6 +29068,21 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n \t\t\"for copy-initialization\");\n     }\n \n+  /* If CTAD succeeded but the type doesn't have any explicit deduction\n+     guides, this deduction might not be what the user intended.  */\n+  if (call != error_mark_node && !any_dguides_p)\n+    {\n+      tree fndecl = cp_get_callee_fndecl_nofold (call);\n+      if (fndecl != NULL_TREE\n+\t  && (!DECL_IN_SYSTEM_HEADER (fndecl)\n+\t      || global_dc->dc_warn_system_headers)\n+\t  && warning (OPT_Wctad_maybe_unsupported,\n+\t\t      \"%qT may not intend to support class template argument \"\n+\t\t      \"deduction\", type))\n+\tinform (input_location, \"add a deduction guide to suppress this \"\n+\t\t\"warning\");\n+    }\n+\n   return cp_build_qualified_type (TREE_TYPE (call), cp_type_quals (ptype));\n }\n "}, {"sha": "665c0ffc4a190f580ccaa46b409313dd888be587", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7029dfa38b663d20e0de40395fcd45a2845e2f71", "patch": "@@ -236,7 +236,8 @@ in the following sections.\n -Wabi-tag  -Wcatch-value  -Wcatch-value=@var{n} @gol\n -Wno-class-conversion  -Wclass-memaccess @gol\n -Wcomma-subscript  -Wconditionally-supported @gol\n--Wno-conversion-null  -Wctor-dtor-privacy  -Wno-delete-incomplete @gol\n+-Wno-conversion-null  -Wctad-maybe-unsupported @gol\n+-Wctor-dtor-privacy  -Wno-delete-incomplete @gol\n -Wdelete-non-virtual-dtor  -Wdeprecated-copy  -Wdeprecated-copy-dtor @gol\n -Weffc++  -Wextra-semi  -Wno-inaccessible-base @gol\n -Wno-inherited-variadic-ctor  -Wno-init-list-lifetime @gol\n@@ -3304,6 +3305,25 @@ void f(int *a, int b, int c) @{\n \n Enabled by default with @option{-std=c++20}.\n \n+@item -Wctad-maybe-unsupported @r{(C++ and Objective-C++ only)}\n+@opindex Wctad-maybe-unsupported\n+@opindex Wno-ctad-maybe-unsupported\n+Warn when performing class template argument deduction (CTAD) on a type with\n+no explicitly written deduction guides.  This warning will point out cases\n+where CTAD succeeded only because the compiler synthesized the implicit\n+deduction guides, which might not be what the programmer intended.  Certain\n+style guides allow CTAD only on types that specifically \"opt-in\"; i.e., on\n+types that are designed to support CTAD.  This warning can be suppressed with\n+the following pattern:\n+\n+@smallexample\n+struct allow_ctad_t; // any name works\n+template <typename T> struct S @{\n+  S(T) @{ @}\n+@};\n+S(allow_ctad_t) -> S<void>; // guide with incomplete parameter type will never be considered\n+@end smallexample\n+\n @item -Wctor-dtor-privacy @r{(C++ and Objective-C++ only)}\n @opindex Wctor-dtor-privacy\n @opindex Wno-ctor-dtor-privacy"}, {"sha": "903e6f1f340a3d4ae33508514e80a8098c6b5083", "filename": "gcc/testsuite/g++.dg/warn/Wctad-maybe-unsupported.C", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported.C?ref=7029dfa38b663d20e0de40395fcd45a2845e2f71", "patch": "@@ -0,0 +1,88 @@\n+// Test -Wctad-maybe-unsupported.\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wctad-maybe-unsupported\" }\n+\n+template <typename T> struct Empty { };\n+\n+template <typename T>\n+struct A {\n+  A(T); // generates 'template<class T> A(T)-> A<T>'\n+  A(T, int); // generates 'template<class T> A(T, int)-> A<T>'\n+};\n+\n+// These only succeed because of the implicit guide.  That may be\n+// undesired.\n+A a1(42); // { dg-warning \"may not intend to support class template argument deduction\" }\n+A a2{42}; // { dg-warning \"may not intend to support class template argument deduction\" }\n+A a3 = {42}; // { dg-warning \"may not intend to support class template argument deduction\" }\n+\n+template <typename T>\n+struct B {\n+  B(T);\n+  B(T, int);\n+};\n+template <typename T> B(T, int) -> B<Empty<T>>;\n+\n+B b1(42);\n+B b2{42};\n+B b3 = {42};\n+\n+// Motivating examples from Stephan Lavavej's 2018 CppCon talk.\n+template <class T, class U>\n+struct Pair {\n+  T first;\n+  U second;\n+  explicit Pair(const T &t, const U &u) {}\n+};\n+// deduces to Pair<int, char[12]>\n+Pair p1(42, \"hello world\"); // { dg-warning \"may not intend to support class template argument deduction\" }\n+Pair p1b{42, \"hello world\"}; // { dg-warning \"may not intend to support class template argument deduction\" }\n+\n+template <class T, class U>\n+struct Pair2 {\n+  T first;\n+  U second;\n+  explicit Pair2(T t, U u) {}\n+};\n+// deduces to Pair2<int, const char*>\n+Pair2 p2(42, \"hello world\"); // { dg-warning \"may not intend to support class template argument deduction\" }\n+Pair2 p2b{42, \"hello world\"}; // { dg-warning \"may not intend to support class template argument deduction\" }\n+\n+template <class T, class U>\n+struct Pair3 {\n+  T first;\n+  U second;\n+  explicit Pair3(T const& t, U const& u) {}\n+};\n+template<class T1, class T2>\n+Pair3(T1, T2) -> Pair3<T1, T2>;\n+ // deduces to Pair3<int, const char*>\n+Pair3 p3(42, \"hello world\");\n+static_assert(__is_same(decltype(p3), Pair3<int, const char*>));\n+\n+// Test that explicit guides suppress the warning even if they\n+// aren't used as candidates.\n+template <typename T>\n+struct C {\n+  C(T) { }\n+};\n+template <typename T>\n+explicit C(C<T> const&) -> C<void>;\n+C<int> c{42};\n+C c2 = c;\n+static_assert(__is_same(decltype(c2), C<int>));\n+\n+// Clang's suppression test.\n+struct allow_ctad_t {\n+  allow_ctad_t() = delete;\n+};\n+\n+template <typename T>\n+struct S {\n+  S(T) {}\n+};\n+S(allow_ctad_t) -> S<void>;\n+S s(\"abc\");\n+S s2{\"abc\"};\n+static_assert(__is_same(decltype(s), S<const char *>));\n+static_assert(__is_same(decltype(s2), S<const char *>));"}, {"sha": "9bb31549ddf253d4c4c08e58962b0a4d66932b20", "filename": "gcc/testsuite/g++.dg/warn/Wctad-maybe-unsupported.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported.h?ref=7029dfa38b663d20e0de40395fcd45a2845e2f71", "patch": "@@ -0,0 +1,4 @@\n+#pragma GCC system_header\n+\n+template <typename T>\n+struct A { A(T); };"}, {"sha": "ce664bd8dc8025d008d2c4eb9f7f6c8fa41a606a", "filename": "gcc/testsuite/g++.dg/warn/Wctad-maybe-unsupported2.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported2.C?ref=7029dfa38b663d20e0de40395fcd45a2845e2f71", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wctad-maybe-unsupported\" }\n+\n+#include \"Wctad-maybe-unsupported.h\"\n+\n+A a{42}; // { dg-bogus \"may not intend to support class template argument deduction\" }"}, {"sha": "c0ae633744b4fa5dc33b0a4cd92a5c42f3b6e1b2", "filename": "gcc/testsuite/g++.dg/warn/Wctad-maybe-unsupported3.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7029dfa38b663d20e0de40395fcd45a2845e2f71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported3.C?ref=7029dfa38b663d20e0de40395fcd45a2845e2f71", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wctad-maybe-unsupported -Wsystem-headers\" }\n+\n+#include \"Wctad-maybe-unsupported.h\"\n+\n+A a{42}; // { dg-warning \"may not intend to support class template argument deduction\" }"}]}