{"sha": "7dbab5dc84e3782fe6f366a985e507e2ea2726d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiYWI1ZGM4NGUzNzgyZmU2ZjM2NmE5ODVlNTA3ZTJlYTI3MjZkMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-23T13:39:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-23T13:39:06Z"}, "message": "PR libstdc++/90220 fix experimental::any_cast for non-object types\n\nThis corresponds to the fixes done for std::any_cast, but has to be done\nwithout if-constexpr. The dummy specialization of _Manager_internal<_Op>\nis used to avoid instantiating the real _Manager_internal<T>::_S_manage\nfunction just to compare its address.\n\n\tPR libstdc++/90220\n\t* include/experimental/any (__any_caster): Constrain to only be\n\tcallable for object types. Use remove_cv_t instead of decay_t.\n\tIf the type decays or isn't copy constructible, compare the manager\n\tfunction to a dummy specialization.\n\t(__any_caster): Add overload constrained for non-object types.\n\t(any::_Manager_internal<_Op>): Add dummy specialization.\n\t* testsuite/experimental/any/misc/any_cast.cc: Test function types\n\tand array types.\n\nFrom-SVN: r271556", "tree": {"sha": "379706dbe804d09b85f9a9d365338c25b800ec30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/379706dbe804d09b85f9a9d365338c25b800ec30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dbab5dc84e3782fe6f366a985e507e2ea2726d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbab5dc84e3782fe6f366a985e507e2ea2726d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dbab5dc84e3782fe6f366a985e507e2ea2726d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbab5dc84e3782fe6f366a985e507e2ea2726d2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56a4e074ee8bcf4c3627fb595c31bd833d5a6532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a4e074ee8bcf4c3627fb595c31bd833d5a6532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a4e074ee8bcf4c3627fb595c31bd833d5a6532"}], "stats": {"total": 104, "additions": 96, "deletions": 8}, "files": [{"sha": "460b734962e1cadd4f6e46dc10dd025bd9ed5716", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbab5dc84e3782fe6f366a985e507e2ea2726d2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbab5dc84e3782fe6f366a985e507e2ea2726d2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7dbab5dc84e3782fe6f366a985e507e2ea2726d2", "patch": "@@ -1,3 +1,15 @@\n+2019-05-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/90220\n+\t* include/experimental/any (__any_caster): Constrain to only be\n+\tcallable for object types. Use remove_cv_t instead of decay_t.\n+\tIf the type decays or isn't copy constructible, compare the manager\n+\tfunction to a dummy specialization.\n+\t(__any_caster): Add overload constrained for non-object types.\n+\t(any::_Manager_internal<_Op>): Add dummy specialization.\n+\t* testsuite/experimental/any/misc/any_cast.cc: Test function types\n+\tand array types.\n+\n 2019-05-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90557"}, {"sha": "f1d4bbf788c083afd1e287488e9067646d52b032", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbab5dc84e3782fe6f366a985e507e2ea2726d2/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbab5dc84e3782fe6f366a985e507e2ea2726d2/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=7dbab5dc84e3782fe6f366a985e507e2ea2726d2", "patch": "@@ -303,7 +303,8 @@ inline namespace fundamentals_v1\n     _Storage _M_storage;\n \n     template<typename _Tp>\n-      friend void* __any_caster(const any* __any);\n+      friend enable_if_t<is_object<_Tp>::value, void*>\n+      __any_caster(const any* __any);\n \n     // Manage in-place contained object.\n     template<typename _Tp>\n@@ -415,17 +416,34 @@ inline namespace fundamentals_v1\n \n   /// @cond undocumented\n   template<typename _Tp>\n-    void* __any_caster(const any* __any)\n+    enable_if_t<is_object<_Tp>::value, void*>\n+    __any_caster(const any* __any)\n     {\n-      struct _None { };\n-      using _Up = decay_t<_Tp>;\n-      using _Vp = conditional_t<is_copy_constructible<_Up>::value, _Up, _None>;\n+      // any_cast<T> returns non-null if __any->type() == typeid(T) and\n+      // typeid(T) ignores cv-qualifiers so remove them:\n+      using _Up = remove_cv_t<_Tp>;\n+      // The contained value has a decayed type, so if decay_t<U> is not U,\n+      // then it's not possible to have a contained value of type U.\n+      using __does_not_decay = is_same<decay_t<_Up>, _Up>;\n+      // Only copy constructible types can be used for contained values.\n+      using __is_copyable = is_copy_constructible<_Up>;\n+      // If the type _Tp could never be stored in an any we don't want to\n+      // instantiate _Manager<_Tp>, so use _Manager<any::_Op> instead, which\n+      // is explicitly specialized and has a no-op _S_manage function.\n+      using _Vp = conditional_t<__and_<__does_not_decay, __is_copyable>::value,\n+\t\t\t\t_Up, any::_Op>;\n       if (__any->_M_manager != &any::_Manager<_Vp>::_S_manage)\n \treturn nullptr;\n       any::_Arg __arg;\n       __any->_M_manager(any::_Op_access, __any, &__arg);\n       return __arg._M_obj;\n     }\n+\n+  // This overload exists so that std::any_cast<void(*)()>(a) is well-formed.\n+  template<typename _Tp>\n+    enable_if_t<!is_object<_Tp>::value, _Tp*>\n+    __any_caster(const any*) noexcept\n+    { return nullptr; }\n   /// @endcond\n \n   /**\n@@ -522,6 +540,14 @@ inline namespace fundamentals_v1\n       }\n     }\n \n+  // Dummy specialization used by __any_caster.\n+  template<>\n+    struct any::_Manager_internal<any::_Op>\n+    {\n+      static void\n+      _S_manage(_Op, const any*, _Arg*) { }\n+    };\n+\n   // @} group any\n } // namespace fundamentals_v1\n } // namespace experimental"}, {"sha": "be1e86e8c700defb8537798a5a3d60b645476053", "filename": "libstdc++-v3/testsuite/experimental/any/misc/any_cast.cc", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbab5dc84e3782fe6f366a985e507e2ea2726d2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbab5dc84e3782fe6f366a985e507e2ea2726d2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc?ref=7dbab5dc84e3782fe6f366a985e507e2ea2726d2", "patch": "@@ -24,6 +24,7 @@\n \n using std::experimental::any;\n using std::experimental::any_cast;\n+using std::experimental::bad_any_cast;\n \n void test01()\n {\n@@ -56,7 +57,6 @@ void test01()\n \n void test02()\n {\n-  using std::experimental::bad_any_cast;\n   any x(1);\n   auto p = any_cast<double>(&x);\n   VERIFY(p == nullptr);\n@@ -105,7 +105,7 @@ void test03()\n   MoveDeleted&& md3 = any_cast<MoveDeleted&&>(any(std::move(md)));\n }\n \n-void test04()\n+void test05()\n {\n   // PR libstdc++/69321\n   struct noncopyable {\n@@ -117,10 +117,60 @@ void test04()\n   VERIFY( p == nullptr );\n }\n \n+void test06()\n+{\n+  // The contained value of a std::any is always an object type,\n+  // but any_cast does not forbid checking for function types.\n+\n+  any a(1);\n+  void (*p1)() = any_cast<void()>(&a);\n+  VERIFY( p1 == nullptr );\n+  int (*p2)(int) = any_cast<int(int)>(&a);\n+  VERIFY( p2 == nullptr );\n+  int (*p3)() = any_cast<int()>(&const_cast<const any&>(a));\n+  VERIFY( p3 == nullptr );\n+\n+  try {\n+    any_cast<int(&)()>(a);\n+    VERIFY( false );\n+  } catch (const bad_any_cast&) {\n+  }\n+\n+  try {\n+    any_cast<int(&)()>(std::move(a));\n+    VERIFY( false );\n+  } catch (const bad_any_cast&) {\n+  }\n+\n+  try {\n+    any_cast<int(&)()>(const_cast<const any&>(a));\n+    VERIFY( false );\n+  } catch (const bad_any_cast&) {\n+  }\n+}\n+\n+void test07()\n+{\n+  int arr[3];\n+  any a(arr);\n+  VERIFY( a.type() == typeid(int*) );\t// contained value is decayed\n+\n+  int (*p1)[3] = any_cast<int[3]>(&a);\n+  VERIFY( a.type() != typeid(int[3]) ); // so any_cast should return nullptr\n+  VERIFY( p1 == nullptr );\n+  int (*p2)[] = any_cast<int[]>(&a);\n+  VERIFY( a.type() != typeid(int[]) );\t// so any_cast should return nullptr\n+  VERIFY( p2 == nullptr );\n+  const int (*p3)[] = any_cast<int[]>(&const_cast<const any&>(a));\n+  VERIFY( p3 == nullptr );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n-  test04();\n+  test05();\n+  test06();\n+  test07();\n }"}]}