{"sha": "73ddd02d12feb31ba6d99d02d8707cb51cd88ab1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkZGQwMmQxMmZlYjMxYmE2ZDk5ZDAyZDg3MDdjYjUxY2Q4OGFiMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-07T14:30:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-07T14:30:01Z"}, "message": "convert.c (strip_float_extensions): Move ...\n\n2012-03-07  Richard Guenther  <rguenther@suse.de>\n\n\t* convert.c (strip_float_extensions): Move ...\n\t* tree.c (strip_float_extensions): ... here.\n\nFrom-SVN: r185046", "tree": {"sha": "7c7210f4549be75f441d52b520c2b2fdfed071ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c7210f4549be75f441d52b520c2b2fdfed071ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73ddd02d12feb31ba6d99d02d8707cb51cd88ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ddd02d12feb31ba6d99d02d8707cb51cd88ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73ddd02d12feb31ba6d99d02d8707cb51cd88ab1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ddd02d12feb31ba6d99d02d8707cb51cd88ab1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cae20ed0a144f220453856a2bd0316fc55bc47dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cae20ed0a144f220453856a2bd0316fc55bc47dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cae20ed0a144f220453856a2bd0316fc55bc47dc"}], "stats": {"total": 97, "additions": 51, "deletions": 46}, "files": [{"sha": "2a059a381f1f3d653cba4c26d4a5836ed2e4194f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ddd02d12feb31ba6d99d02d8707cb51cd88ab1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ddd02d12feb31ba6d99d02d8707cb51cd88ab1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73ddd02d12feb31ba6d99d02d8707cb51cd88ab1", "patch": "@@ -1,3 +1,8 @@\n+2012-03-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* convert.c (strip_float_extensions): Move ...\n+\t* tree.c (strip_float_extensions): ... here.\n+\n 2012-03-07  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/52484"}, {"sha": "dc9b7f29ea409a5b6bb096ab78ce8346bebfc5a1", "filename": "gcc/convert.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ddd02d12feb31ba6d99d02d8707cb51cd88ab1/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ddd02d12feb31ba6d99d02d8707cb51cd88ab1/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=73ddd02d12feb31ba6d99d02d8707cb51cd88ab1", "patch": "@@ -90,52 +90,6 @@ convert_to_pointer (tree type, tree expr)\n     }\n }\n \n-/* Avoid any floating point extensions from EXP.  */\n-tree\n-strip_float_extensions (tree exp)\n-{\n-  tree sub, expt, subt;\n-\n-  /*  For floating point constant look up the narrowest type that can hold\n-      it properly and handle it like (type)(narrowest_type)constant.\n-      This way we can optimize for instance a=a*2.0 where \"a\" is float\n-      but 2.0 is double constant.  */\n-  if (TREE_CODE (exp) == REAL_CST && !DECIMAL_FLOAT_TYPE_P (TREE_TYPE (exp)))\n-    {\n-      REAL_VALUE_TYPE orig;\n-      tree type = NULL;\n-\n-      orig = TREE_REAL_CST (exp);\n-      if (TYPE_PRECISION (TREE_TYPE (exp)) > TYPE_PRECISION (float_type_node)\n-\t  && exact_real_truncate (TYPE_MODE (float_type_node), &orig))\n-\ttype = float_type_node;\n-      else if (TYPE_PRECISION (TREE_TYPE (exp))\n-\t       > TYPE_PRECISION (double_type_node)\n-\t       && exact_real_truncate (TYPE_MODE (double_type_node), &orig))\n-\ttype = double_type_node;\n-      if (type)\n-\treturn build_real (type, real_value_truncate (TYPE_MODE (type), orig));\n-    }\n-\n-  if (!CONVERT_EXPR_P (exp))\n-    return exp;\n-\n-  sub = TREE_OPERAND (exp, 0);\n-  subt = TREE_TYPE (sub);\n-  expt = TREE_TYPE (exp);\n-\n-  if (!FLOAT_TYPE_P (subt))\n-    return exp;\n-\n-  if (DECIMAL_FLOAT_TYPE_P (expt) != DECIMAL_FLOAT_TYPE_P (subt))\n-    return exp;\n-\n-  if (TYPE_PRECISION (subt) > TYPE_PRECISION (expt))\n-    return exp;\n-\n-  return strip_float_extensions (sub);\n-}\n-\n \n /* Convert EXPR to some floating-point type TYPE.\n "}, {"sha": "c5d10f99bdc84dd98ce6ac5f98b141823e5c154f", "filename": "gcc/tree.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ddd02d12feb31ba6d99d02d8707cb51cd88ab1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ddd02d12feb31ba6d99d02d8707cb51cd88ab1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=73ddd02d12feb31ba6d99d02d8707cb51cd88ab1", "patch": "@@ -11213,6 +11213,52 @@ tree_strip_sign_nop_conversions (tree exp)\n   return exp;\n }\n \n+/* Avoid any floating point extensions from EXP.  */\n+tree\n+strip_float_extensions (tree exp)\n+{\n+  tree sub, expt, subt;\n+\n+  /*  For floating point constant look up the narrowest type that can hold\n+      it properly and handle it like (type)(narrowest_type)constant.\n+      This way we can optimize for instance a=a*2.0 where \"a\" is float\n+      but 2.0 is double constant.  */\n+  if (TREE_CODE (exp) == REAL_CST && !DECIMAL_FLOAT_TYPE_P (TREE_TYPE (exp)))\n+    {\n+      REAL_VALUE_TYPE orig;\n+      tree type = NULL;\n+\n+      orig = TREE_REAL_CST (exp);\n+      if (TYPE_PRECISION (TREE_TYPE (exp)) > TYPE_PRECISION (float_type_node)\n+\t  && exact_real_truncate (TYPE_MODE (float_type_node), &orig))\n+\ttype = float_type_node;\n+      else if (TYPE_PRECISION (TREE_TYPE (exp))\n+\t       > TYPE_PRECISION (double_type_node)\n+\t       && exact_real_truncate (TYPE_MODE (double_type_node), &orig))\n+\ttype = double_type_node;\n+      if (type)\n+\treturn build_real (type, real_value_truncate (TYPE_MODE (type), orig));\n+    }\n+\n+  if (!CONVERT_EXPR_P (exp))\n+    return exp;\n+\n+  sub = TREE_OPERAND (exp, 0);\n+  subt = TREE_TYPE (sub);\n+  expt = TREE_TYPE (exp);\n+\n+  if (!FLOAT_TYPE_P (subt))\n+    return exp;\n+\n+  if (DECIMAL_FLOAT_TYPE_P (expt) != DECIMAL_FLOAT_TYPE_P (subt))\n+    return exp;\n+\n+  if (TYPE_PRECISION (subt) > TYPE_PRECISION (expt))\n+    return exp;\n+\n+  return strip_float_extensions (sub);\n+}\n+\n /* Strip out all handled components that produce invariant\n    offsets.  */\n "}]}