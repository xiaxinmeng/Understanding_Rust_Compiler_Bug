{"sha": "a1a2654cdc90e9aa561a0e853b4b1372892afb70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhMjY1NGNkYzkwZTlhYTU2MWEwZTg1M2I0YjEzNzI4OTJhZmI3MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-02T16:12:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-03T14:06:56Z"}, "message": "libstdc++: Avoid using std::unique_ptr in <locale>\n\nstd::wstring_convert and std::wbuffer_convert types are not copyable or\nmovable, and store a plain pointer without a deleter. That means a much\nsimpler type that just uses delete in its destructor can be used instead\nof std::unique_ptr.\n\nThat avoids including and parsing all of <bits/unique_ptr.h> in every\nheader that includes <locale>. It also avoids instantiating\nunique_ptr<C> and std::tuple<C*, default_delete<C>> when the conversion\nutilities are used.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/locale_conv.h (__detail::_Scoped_ptr): Define new\n\tRAII class template.\n\t(wstring_convert, wbuffer_convert): Use __detail::_Scoped_ptr\n\tinstead of unique_ptr.", "tree": {"sha": "a4671c2d44b4b3830afff81c757dbdfae7d487da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4671c2d44b4b3830afff81c757dbdfae7d487da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1a2654cdc90e9aa561a0e853b4b1372892afb70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a2654cdc90e9aa561a0e853b4b1372892afb70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a2654cdc90e9aa561a0e853b4b1372892afb70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a2654cdc90e9aa561a0e853b4b1372892afb70/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "048039c49b96875144f67e7789fdea54abf7710b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048039c49b96875144f67e7789fdea54abf7710b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048039c49b96875144f67e7789fdea54abf7710b"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "6af8a5bdc8f1a1b16ce2c357f4bc66c8dd567e01", "filename": "libstdc++-v3/include/bits/locale_conv.h", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a2654cdc90e9aa561a0e853b4b1372892afb70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_conv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a2654cdc90e9aa561a0e853b4b1372892afb70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_conv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_conv.h?ref=a1a2654cdc90e9aa561a0e853b4b1372892afb70", "patch": "@@ -38,7 +38,6 @@\n #include <bits/stringfwd.h>\n #include <bits/allocator.h>\n #include <bits/codecvt.h>\n-#include <bits/unique_ptr.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -221,6 +220,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #endif  // _GLIBCXX_USE_CHAR8_T\n \n+  namespace __detail\n+  {\n+    template<typename _Tp>\n+      struct _Scoped_ptr\n+      {\n+\t__attribute__((__nonnull__(2)))\n+\texplicit\n+\t_Scoped_ptr(_Tp* __ptr) noexcept\n+\t: _M_ptr(__ptr)\n+\t{ }\n+\n+\t_Scoped_ptr(_Tp* __ptr, const char* __msg)\n+\t: _M_ptr(__ptr)\n+\t{\n+\t  if (!__ptr)\n+\t    __throw_logic_error(__msg);\n+\t}\n+\n+\t~_Scoped_ptr() { delete _M_ptr; }\n+\n+\t_Scoped_ptr(const _Scoped_ptr&) = delete;\n+\t_Scoped_ptr& operator=(const _Scoped_ptr&) = delete;\n+\n+\t__attribute__((__returns_nonnull__))\n+\t_Tp* operator->() const noexcept { return _M_ptr; }\n+\n+\t_Tp& operator*() const noexcept { return *_M_ptr; }\n+\n+      private:\n+\t_Tp* _M_ptr;\n+      };\n+  }\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n \n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n@@ -247,11 +279,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * Takes ownership of @p __pcvt and will delete it in the destructor.\n        */\n       explicit\n-      wstring_convert(_Codecvt* __pcvt) : _M_cvt(__pcvt)\n-      {\n-\tif (!_M_cvt)\n-\t  __throw_logic_error(\"wstring_convert\");\n-      }\n+      wstring_convert(_Codecvt* __pcvt) : _M_cvt(__pcvt, \"wstring_convert\")\n+      { }\n \n       /** Construct with an initial converstion state.\n        *\n@@ -262,11 +291,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * The object's conversion state will persist between conversions.\n        */\n       wstring_convert(_Codecvt* __pcvt, state_type __state)\n-      : _M_cvt(__pcvt), _M_state(__state), _M_with_cvtstate(true)\n-      {\n-\tif (!_M_cvt)\n-\t  __throw_logic_error(\"wstring_convert\");\n-      }\n+      : _M_cvt(__pcvt, \"wstring_convert\"),\n+\t_M_state(__state), _M_with_cvtstate(true)\n+      { }\n \n       /** Construct with error strings.\n        *\n@@ -279,10 +306,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       : _M_cvt(new _Codecvt),\n \t_M_byte_err_string(__byte_err), _M_wide_err_string(__wide_err),\n \t_M_with_strings(true)\n-      {\n-\tif (!_M_cvt)\n-\t  __throw_logic_error(\"wstring_convert\");\n-      }\n+      { }\n \n       ~wstring_convert() = default;\n \n@@ -370,7 +394,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       state_type state() const { return _M_state; }\n \n     private:\n-      unique_ptr<_Codecvt>\t_M_cvt;\n+      __detail::_Scoped_ptr<_Codecvt>\t_M_cvt;\n       byte_string\t\t_M_byte_err_string;\n       wide_string\t\t_M_wide_err_string;\n       state_type\t\t_M_state = state_type();\n@@ -405,13 +429,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       explicit\n       wbuffer_convert(streambuf* __bytebuf, _Codecvt* __pcvt = new _Codecvt,\n \t\t      state_type __state = state_type())\n-      : _M_buf(__bytebuf), _M_cvt(__pcvt), _M_state(__state)\n+      : _M_buf(__bytebuf), _M_cvt(__pcvt, \"wbuffer_convert\"),\n+\t_M_state(__state), _M_always_noconv(_M_cvt->always_noconv())\n       {\n-\tif (!_M_cvt)\n-\t  __throw_logic_error(\"wbuffer_convert\");\n-\n-\t_M_always_noconv = _M_cvt->always_noconv();\n-\n \tif (_M_buf)\n \t  {\n \t    this->setp(_M_put_area, _M_put_area + _S_buffer_length);\n@@ -593,9 +613,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \treturn __next != __first;\n       }\n \n-      streambuf*\t\t_M_buf;\n-      unique_ptr<_Codecvt>\t_M_cvt;\n-      state_type\t\t_M_state;\n+      streambuf*\t\t\t_M_buf;\n+      __detail::_Scoped_ptr<_Codecvt>\t_M_cvt;\n+      state_type\t\t\t_M_state;\n \n       static const streamsize\t_S_buffer_length = 32;\n       static const streamsize\t_S_putback_length = 3;"}]}