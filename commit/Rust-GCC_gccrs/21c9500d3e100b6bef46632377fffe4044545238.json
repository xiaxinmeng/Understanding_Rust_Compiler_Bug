{"sha": "21c9500d3e100b6bef46632377fffe4044545238", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjOTUwMGQzZTEwMGI2YmVmNDY2MzIzNzdmZmZlNDA0NDU0NTIzOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-05-19T07:36:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-05-19T07:36:28Z"}, "message": "mips.h (ISA_HAS_LOAD_DELAY, [...]): New macros.\n\n\t* config/mips/mips.h (ISA_HAS_LOAD_DELAY, ISA_HAS_XFER_DELAY,\n\tISA_HAS_FCMP_DELAY, ISA_HAS_HILO_INTERLOCKS): New macros.\n\t(PREDICATE_CODES): Add hilo_operand.\n\t* config/mips/mips.c (hilo_operand): New predicate.\n\t(mips_adjust_insn_length): Account for the number nops that might\n\tbe needed to avoid hardware hazards.\n\t* config/mips/mips.md (dslot): Remove attribute.\n\t(hazard): New attribute.\n\t(can_delay): Use it.  Check for calls, branches & jumps.\n\t(muldi3): Use the standard dmult pattern for mips16 code.\n\t(muldi3_internal, muldi3_internal2): Adjust conditions accordingly.\n\nFrom-SVN: r66952", "tree": {"sha": "37db0843298620ceead329ec9e3bbde91233521d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37db0843298620ceead329ec9e3bbde91233521d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c9500d3e100b6bef46632377fffe4044545238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c9500d3e100b6bef46632377fffe4044545238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c9500d3e100b6bef46632377fffe4044545238", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c9500d3e100b6bef46632377fffe4044545238/comments", "author": null, "committer": null, "parents": [{"sha": "f29d1b660c804bc72de196a8b33841c1033a90eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f29d1b660c804bc72de196a8b33841c1033a90eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f29d1b660c804bc72de196a8b33841c1033a90eb"}], "stats": {"total": 112, "additions": 95, "deletions": 17}, "files": [{"sha": "47405031138c7d84ed9529e112d897cf42e08b50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c9500d3e100b6bef46632377fffe4044545238/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c9500d3e100b6bef46632377fffe4044545238/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21c9500d3e100b6bef46632377fffe4044545238", "patch": "@@ -1,3 +1,17 @@\n+2003-05-19  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (ISA_HAS_LOAD_DELAY, ISA_HAS_XFER_DELAY,\n+\tISA_HAS_FCMP_DELAY, ISA_HAS_HILO_INTERLOCKS): New macros.\n+\t(PREDICATE_CODES): Add hilo_operand.\n+\t* config/mips/mips.c (hilo_operand): New predicate.\n+\t(mips_adjust_insn_length): Account for the number nops that might\n+\tbe needed to avoid hardware hazards.\n+\t* config/mips/mips.md (dslot): Remove attribute.\n+\t(hazard): New attribute.\n+\t(can_delay): Use it.  Check for calls, branches & jumps.\n+\t(muldi3): Use the standard dmult pattern for mips16 code.\n+\t(muldi3_internal, muldi3_internal2): Adjust conditions accordingly.\n+\n 2003-05-19  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips-protos.h (final_prescan_insn,"}, {"sha": "b487f2b14861c3e6a4207ac68d80d28a7d6108d8", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c9500d3e100b6bef46632377fffe4044545238/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c9500d3e100b6bef46632377fffe4044545238/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=21c9500d3e100b6bef46632377fffe4044545238", "patch": "@@ -1507,6 +1507,18 @@ const_float_1_operand (op, mode)\n   return REAL_VALUES_EQUAL (d, dconst1);\n }\n \n+/* Return true if OP is either the HI or LO register.  */\n+\n+int\n+hilo_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return ((mode == VOIDmode || mode == GET_MODE (op))\n+\t  && REG_P (op)\n+\t  && (REGNO (op) == HI_REGNUM || REGNO (op) == LO_REGNUM));\n+}\n+\n /* Return nonzero if the code of this rtx pattern is EQ or NE.  */\n \n int\n@@ -9897,6 +9909,22 @@ mips_adjust_insn_length (insn, length)\n \t\t\t      || GET_CODE (insn) == CALL_INSN)))\n     length += 4;\n \n+  /* See how many nops might be needed to avoid hardware hazards.  */\n+  if (INSN_CODE (insn) >= 0)\n+    switch (get_attr_hazard (insn))\n+      {\n+      case HAZARD_NONE:\n+\tbreak;\n+\n+      case HAZARD_DELAY:\n+\tlength += 4;\n+\tbreak;\n+\n+      case HAZARD_HILO:\n+\tlength += 8;\n+\tbreak;\n+      }\n+\n   /* All MIPS16 instructions are a measly two bytes.  */\n   if (TARGET_MIPS16)\n     length /= 2;"}, {"sha": "2f1a4eeda09b11d440a35afdebf2685b3490d4c2", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c9500d3e100b6bef46632377fffe4044545238/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c9500d3e100b6bef46632377fffe4044545238/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=21c9500d3e100b6bef46632377fffe4044545238", "patch": "@@ -945,6 +945,24 @@ extern void\t\tsbss_section PARAMS ((void));\n                                  && (ISA_MIPS32R2                      \\\n                                      ))\n \n+/* True if the result of a load is not available to the next instruction.\n+   A nop will then be needed between instructions like \"lw $4,...\"\n+   and \"addiu $4,$4,1\".  */\n+#define ISA_HAS_LOAD_DELAY\t(mips_isa == 1\t\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS3900\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n+\n+/* Likewise mtc1 and mfc1.  */\n+#define ISA_HAS_XFER_DELAY\t(mips_isa <= 3)\n+\n+/* Likewise floating-point comparisons.  */\n+#define ISA_HAS_FCMP_DELAY\t(mips_isa <= 3)\n+\n+/* True if mflo and mfhi can be immediately followed by instructions\n+   which write to the HI and LO registers.  Most targets require a\n+   two-instruction gap.  */\n+#define ISA_HAS_HILO_INTERLOCKS\t(TARGET_MIPS5500 || TARGET_SB1)\n+\n /* CC1_SPEC causes -mips3 and -mips4 to set -mfp64 and -mgp64; -mips1 or\n    -mips2 sets -mfp32 and -mgp32.  This can be overridden by an explicit\n    -mfp32, -mfp64, -mgp32 or -mgp64.  -mfp64 sets MASK_FLOAT64 in\n@@ -3374,7 +3392,8 @@ typedef struct mips_args {\n \t\t\t\t  REG, MEM}},\t\t\t\t\\\n   {\"consttable_operand\",\t{ LABEL_REF, SYMBOL_REF, CONST_INT,\t\\\n \t\t\t\t  CONST_DOUBLE, CONST }},\t\t\\\n-  {\"fcc_register_operand\",\t{ REG, SUBREG }},\n+  {\"fcc_register_operand\",\t{ REG, SUBREG }},\t\t\t\\\n+  {\"hilo_operand\",\t\t{ REG }},\n \n /* A list of predicates that do special things with modes, and so\n    should not elicit warnings for VOIDmode match_operand.  */"}, {"sha": "c91d27f14f419421076496971cbff11fb09bc923", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c9500d3e100b6bef46632377fffe4044545238/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c9500d3e100b6bef46632377fffe4044545238/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=21c9500d3e100b6bef46632377fffe4044545238", "patch": "@@ -193,26 +193,43 @@\n   \"default,4kc,5kc,20kc,m4k,r3000,r3900,r6000,r4000,r4100,r4111,r4120,r4300,r4600,r4650,r5000,r5400,r5500,r8000,sb1,sr71000\"\n   (const (symbol_ref \"mips_cpu_attr\")))\n \n-;; Does the instruction have a mandatory delay slot?\n-;;   The 3900, is (mostly) mips1, but does not have a mandatory load delay\n-;;   slot.\n-(define_attr \"dslot\" \"no,yes\"\n-  (if_then_else (ior (eq_attr \"type\" \"branch,jump,call,xfer,hilo,fcmp\")\n-\t\t     (and (eq_attr \"type\" \"load\")\n-\t\t\t  (and (eq (symbol_ref \"mips_isa\") (const_int 1))\n-\t\t\t       (and (eq (symbol_ref \"mips16\") (const_int 0))\n-                                    (eq_attr \"cpu\" \"!r3900\")))))\n-\t\t(const_string \"yes\")\n-\t\t(const_string \"no\")))\n+;; The type of hardware hazard associated with this instruction.\n+;; DELAY means that the next instruction cannot read the result\n+;; of this one.  HILO means that the next two instructions cannot\n+;; write to HI or LO.\n+(define_attr \"hazard\" \"none,delay,hilo\"\n+  (cond [(and (eq_attr \"type\" \"load\")\n+\t      (ne (symbol_ref \"ISA_HAS_LOAD_DELAY\") (const_int 0)))\n+\t (const_string \"delay\")\n+\n+\t (and (eq_attr \"type\" \"xfer\")\n+\t      (ne (symbol_ref \"ISA_HAS_XFER_DELAY\") (const_int 0)))\n+\t (const_string \"delay\")\n+\n+\t (and (eq_attr \"type\" \"fcmp\")\n+\t      (ne (symbol_ref \"ISA_HAS_FCMP_DELAY\") (const_int 0)))\n+\t (const_string \"delay\")\n+\n+\t ;; The r4000 multiplication patterns include an mflo instruction.\n+\t (and (eq_attr \"type\" \"imul\")\n+\t      (ne (symbol_ref \"TARGET_MIPS4000\") (const_int 0)))\n+\t (const_string \"hilo\")\n+\n+\t (and (eq_attr \"type\" \"hilo\")\n+\t      (and (eq (symbol_ref \"ISA_HAS_HILO_INTERLOCKS\") (const_int 0))\n+\t\t   (match_operand 1 \"hilo_operand\" \"\")))\n+\t (const_string \"hilo\")]\n+\t(const_string \"none\")))\n \n ;; Is it a single instruction?\n (define_attr \"single_insn\" \"no,yes\"\n   (symbol_ref \"get_attr_length (insn) == (TARGET_MIPS16 ? 2 : 4)\"))\n \n ;; Can the instruction be put into a delay slot?\n (define_attr \"can_delay\" \"no,yes\"\n-  (if_then_else (and (eq_attr \"dslot\" \"no\")\n-\t\t     (eq_attr \"single_insn\" \"yes\"))\n+  (if_then_else (and (eq_attr \"type\" \"!branch,call,jump\")\n+\t\t     (and (eq_attr \"hazard\" \"none\")\n+\t\t\t  (eq_attr \"single_insn\" \"yes\")))\n \t\t(const_string \"yes\")\n \t\t(const_string \"no\")))\n \n@@ -2274,7 +2291,7 @@\n \n   \"\n {\n-  if (GENERATE_MULT3_DI || TARGET_MIPS4000 || TARGET_MIPS16)\n+  if (GENERATE_MULT3_DI || TARGET_MIPS4000)\n     emit_insn (gen_muldi3_internal2 (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_muldi3_internal (operands[0], operands[1], operands[2]));\n@@ -2287,7 +2304,7 @@\n \t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n    (clobber (match_scratch:DI 3 \"=h\"))\n    (clobber (match_scratch:DI 4 \"=a\"))]\n-  \"TARGET_64BIT && !TARGET_MIPS4000 && !TARGET_MIPS16\"\n+  \"TARGET_64BIT && !TARGET_MIPS4000\"\n   \"dmult\\\\t%1,%2\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"DI\")])\n@@ -2299,7 +2316,7 @@\n    (clobber (match_scratch:DI 3 \"=h\"))\n    (clobber (match_scratch:DI 4 \"=l\"))\n    (clobber (match_scratch:DI 5 \"=a\"))]\n-  \"TARGET_64BIT && (GENERATE_MULT3_DI || TARGET_MIPS4000 || TARGET_MIPS16)\"\n+  \"TARGET_64BIT && (GENERATE_MULT3_DI || TARGET_MIPS4000)\"\n   {\n     if (GENERATE_MULT3_DI)\n       return \"dmult\\t%0,%1,%2\";"}]}