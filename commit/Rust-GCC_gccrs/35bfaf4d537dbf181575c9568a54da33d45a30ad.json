{"sha": "35bfaf4d537dbf181575c9568a54da33d45a30ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViZmFmNGQ1MzdkYmYxODE1NzVjOTU2OGE1NGRhMzNkNDVhMzBhZA==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2017-05-14T00:39:13Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2017-05-14T00:39:13Z"}, "message": "make depth_first_search_ds a class\n\ngcc/ChangeLog:\n\n2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* cfganal.c (connect_infinite_loops_to_exit): Adjust.\n\t(depth_first_search::depth_first_search): Change structure init\n\tfunction to this constructor.\n\t(depth_first_search::add_bb): Rename function to this member.\n\t(depth_first_search::execute): Likewise.\n\t(flow_dfs_compute_reverse_finish): Adjust.\n\nFrom-SVN: r248026", "tree": {"sha": "ea0ecd9f19a9e0a857ad6089ac2401217f8e4e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea0ecd9f19a9e0a857ad6089ac2401217f8e4e97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35bfaf4d537dbf181575c9568a54da33d45a30ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bfaf4d537dbf181575c9568a54da33d45a30ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35bfaf4d537dbf181575c9568a54da33d45a30ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bfaf4d537dbf181575c9568a54da33d45a30ad/comments", "author": null, "committer": null, "parents": [{"sha": "8f48c62273af6ac7a4583d7588c07752f2a86689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f48c62273af6ac7a4583d7588c07752f2a86689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f48c62273af6ac7a4583d7588c07752f2a86689"}], "stats": {"total": 105, "additions": 43, "deletions": 62}, "files": [{"sha": "c94ddb92744d3cf93eef2e784b3208b5984f1a84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35bfaf4d537dbf181575c9568a54da33d45a30ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35bfaf4d537dbf181575c9568a54da33d45a30ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35bfaf4d537dbf181575c9568a54da33d45a30ad", "patch": "@@ -1,3 +1,12 @@\n+2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* cfganal.c (connect_infinite_loops_to_exit): Adjust.\n+\t(depth_first_search::depth_first_search): Change structure init\n+\tfunction to this constructor.\n+\t(depth_first_search::add_bb): Rename function to this member.\n+\t(depth_first_search::execute): Likewise.\n+\t(flow_dfs_compute_reverse_finish): Adjust.\n+\n 2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* ddg.c (find_nodes_on_paths): Use auto_sbitmap."}, {"sha": "27b453ca3f7b8ad1fb9497f598e9dbb4d3194ccc", "filename": "gcc/cfganal.c", "status": "modified", "additions": 34, "deletions": 62, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35bfaf4d537dbf181575c9568a54da33d45a30ad/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35bfaf4d537dbf181575c9568a54da33d45a30ad/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=35bfaf4d537dbf181575c9568a54da33d45a30ad", "patch": "@@ -28,25 +28,24 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfganal.h\"\n #include \"cfgloop.h\"\n \n+namespace {\n /* Store the data structures necessary for depth-first search.  */\n-struct depth_first_search_ds {\n-  /* stack for backtracking during the algorithm */\n-  basic_block *stack;\n+class depth_first_search\n+  {\n+public:\n+    depth_first_search ();\n+\n+    basic_block execute (basic_block);\n+    void add_bb (basic_block);\n \n-  /* number of edges in the stack.  That is, positions 0, ..., sp-1\n-     have edges.  */\n-  unsigned int sp;\n+private:\n+  /* stack for backtracking during the algorithm */\n+  auto_vec<basic_block, 20> m_stack;\n \n   /* record of basic blocks already seen by depth-first search */\n-  sbitmap visited_blocks;\n+  auto_sbitmap m_visited_blocks;\n };\n-\n-static void flow_dfs_compute_reverse_init (depth_first_search_ds *);\n-static void flow_dfs_compute_reverse_add_bb (depth_first_search_ds *,\n-\t\t\t\t\t     basic_block);\n-static basic_block flow_dfs_compute_reverse_execute (depth_first_search_ds *,\n-\t\t\t\t\t\t     basic_block);\n-static void flow_dfs_compute_reverse_finish (depth_first_search_ds *);\n+}\n \f\n /* Mark the back edges in DFS traversal.\n    Return nonzero if a loop (natural or otherwise) is present.\n@@ -597,30 +596,23 @@ add_noreturn_fake_exit_edges (void)\n void\n connect_infinite_loops_to_exit (void)\n {\n-  basic_block unvisited_block = EXIT_BLOCK_PTR_FOR_FN (cfun);\n-  basic_block deadend_block;\n-  depth_first_search_ds dfs_ds;\n-\n   /* Perform depth-first search in the reverse graph to find nodes\n      reachable from the exit block.  */\n-  flow_dfs_compute_reverse_init (&dfs_ds);\n-  flow_dfs_compute_reverse_add_bb (&dfs_ds, EXIT_BLOCK_PTR_FOR_FN (cfun));\n+  depth_first_search dfs;\n+  dfs.add_bb (EXIT_BLOCK_PTR_FOR_FN (cfun));\n \n   /* Repeatedly add fake edges, updating the unreachable nodes.  */\n+  basic_block unvisited_block = EXIT_BLOCK_PTR_FOR_FN (cfun);\n   while (1)\n     {\n-      unvisited_block = flow_dfs_compute_reverse_execute (&dfs_ds,\n-\t\t\t\t\t\t\t  unvisited_block);\n+      unvisited_block = dfs.execute (unvisited_block);\n       if (!unvisited_block)\n \tbreak;\n \n-      deadend_block = dfs_find_deadend (unvisited_block);\n+      basic_block deadend_block = dfs_find_deadend (unvisited_block);\n       make_edge (deadend_block, EXIT_BLOCK_PTR_FOR_FN (cfun), EDGE_FAKE);\n-      flow_dfs_compute_reverse_add_bb (&dfs_ds, deadend_block);\n+      dfs.add_bb (deadend_block);\n     }\n-\n-  flow_dfs_compute_reverse_finish (&dfs_ds);\n-  return;\n }\n \f\n /* Compute reverse top sort order.  This is computing a post order\n@@ -1094,74 +1086,54 @@ pre_and_rev_post_order_compute (int *pre_order, int *rev_post_order,\n    search context.  If INITIALIZE_STACK is nonzero, there is an\n    element on the stack.  */\n \n-static void\n-flow_dfs_compute_reverse_init (depth_first_search_ds *data)\n+depth_first_search::depth_first_search () :\n+  m_stack (n_basic_blocks_for_fn (cfun)),\n+  m_visited_blocks (last_basic_block_for_fn (cfun))\n {\n-  /* Allocate stack for back-tracking up CFG.  */\n-  data->stack = XNEWVEC (basic_block, n_basic_blocks_for_fn (cfun));\n-  data->sp = 0;\n-\n-  /* Allocate bitmap to track nodes that have been visited.  */\n-  data->visited_blocks = sbitmap_alloc (last_basic_block_for_fn (cfun));\n-\n-  /* None of the nodes in the CFG have been visited yet.  */\n-  bitmap_clear (data->visited_blocks);\n-\n-  return;\n+  bitmap_clear (m_visited_blocks);\n }\n \n /* Add the specified basic block to the top of the dfs data\n    structures.  When the search continues, it will start at the\n    block.  */\n \n-static void\n-flow_dfs_compute_reverse_add_bb (depth_first_search_ds *data, basic_block bb)\n+void\n+depth_first_search::add_bb (basic_block bb)\n {\n-  data->stack[data->sp++] = bb;\n-  bitmap_set_bit (data->visited_blocks, bb->index);\n+  m_stack.quick_push (bb);\n+  bitmap_set_bit (m_visited_blocks, bb->index);\n }\n \n /* Continue the depth-first search through the reverse graph starting with the\n    block at the stack's top and ending when the stack is empty.  Visited nodes\n    are marked.  Returns an unvisited basic block, or NULL if there is none\n    available.  */\n \n-static basic_block\n-flow_dfs_compute_reverse_execute (depth_first_search_ds *data,\n-\t\t\t\t  basic_block last_unvisited)\n+basic_block\n+depth_first_search::execute (basic_block last_unvisited)\n {\n   basic_block bb;\n   edge e;\n   edge_iterator ei;\n \n-  while (data->sp > 0)\n+  while (!m_stack.is_empty ())\n     {\n-      bb = data->stack[--data->sp];\n+      bb = m_stack.pop ();\n \n       /* Perform depth-first search on adjacent vertices.  */\n       FOR_EACH_EDGE (e, ei, bb->preds)\n-\tif (!bitmap_bit_p (data->visited_blocks, e->src->index))\n-\t  flow_dfs_compute_reverse_add_bb (data, e->src);\n+\tif (!bitmap_bit_p (m_visited_blocks, e->src->index))\n+\t  add_bb (e->src);\n     }\n \n   /* Determine if there are unvisited basic blocks.  */\n   FOR_BB_BETWEEN (bb, last_unvisited, NULL, prev_bb)\n-    if (!bitmap_bit_p (data->visited_blocks, bb->index))\n+    if (!bitmap_bit_p (m_visited_blocks, bb->index))\n       return bb;\n \n   return NULL;\n }\n \n-/* Destroy the data structures needed for depth-first search on the\n-   reverse graph.  */\n-\n-static void\n-flow_dfs_compute_reverse_finish (depth_first_search_ds *data)\n-{\n-  free (data->stack);\n-  sbitmap_free (data->visited_blocks);\n-}\n-\n /* Performs dfs search from BB over vertices satisfying PREDICATE;\n    if REVERSE, go against direction of edges.  Returns number of blocks\n    found and their list in RSLT.  RSLT can contain at most RSLT_MAX items.  */"}]}