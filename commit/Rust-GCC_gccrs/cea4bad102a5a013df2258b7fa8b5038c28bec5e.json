{"sha": "cea4bad102a5a013df2258b7fa8b5038c28bec5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VhNGJhZDEwMmE1YTAxM2RmMjI1OGI3ZmE4YjUwMzhjMjhiZWM1ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-10-13T07:16:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-10-13T07:16:37Z"}, "message": "dwarf2out.c (tree_add_const_value_attribute): Do not try rtl_for_decl_init during early phase.\n\n2016-10-13  Richard Biener  <rguenther@suse.de>\n\n\t* dwarf2out.c (tree_add_const_value_attribute): Do not try\n\trtl_for_decl_init during early phase.\n\t(gen_variable_die): Do not create locations during early phase.\n\t(gen_label_die): Likewise.\n\t(decls_for_scope): Do not waste time handling BLOCK_NONLOCALIZED_VARs\n\ttwice.\n\nFrom-SVN: r241085", "tree": {"sha": "221aa09cc04ce99917138ed038767737cb968701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/221aa09cc04ce99917138ed038767737cb968701"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cea4bad102a5a013df2258b7fa8b5038c28bec5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea4bad102a5a013df2258b7fa8b5038c28bec5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea4bad102a5a013df2258b7fa8b5038c28bec5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea4bad102a5a013df2258b7fa8b5038c28bec5e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80b489ebba3c8392c8ea23ef63b6d94bae9af3c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b489ebba3c8392c8ea23ef63b6d94bae9af3c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80b489ebba3c8392c8ea23ef63b6d94bae9af3c7"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "4bc6f6c4d01740ebf900fb5c9d2fd284453ccfe8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea4bad102a5a013df2258b7fa8b5038c28bec5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea4bad102a5a013df2258b7fa8b5038c28bec5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cea4bad102a5a013df2258b7fa8b5038c28bec5e", "patch": "@@ -1,3 +1,12 @@\n+2016-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* dwarf2out.c (tree_add_const_value_attribute): Do not try\n+\trtl_for_decl_init during early phase.\n+\t(gen_variable_die): Do not create locations during early phase.\n+\t(gen_label_die): Likewise.\n+\t(decls_for_scope): Do not waste time handling BLOCK_NONLOCALIZED_VARs\n+\ttwice.\n+\n 2016-10-12  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vrp.c (evrp_dom_walker::try_find_new_range): Renamed from"}, {"sha": "a84deb70f986024bfc5f4b87d70c2f348ca119f2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea4bad102a5a013df2258b7fa8b5038c28bec5e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea4bad102a5a013df2258b7fa8b5038c28bec5e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=cea4bad102a5a013df2258b7fa8b5038c28bec5e", "patch": "@@ -17977,12 +17977,15 @@ tree_add_const_value_attribute (dw_die_ref die, tree t)\n   init = t;\n   gcc_assert (!DECL_P (init));\n \n-  rtl = rtl_for_decl_init (init, type);\n-  if (rtl)\n-    return add_const_value_attribute (die, rtl);\n+  if (! early_dwarf)\n+    {\n+      rtl = rtl_for_decl_init (init, type);\n+      if (rtl)\n+\treturn add_const_value_attribute (die, rtl);\n+    }\n   /* If the host and target are sane, try harder.  */\n-  else if (CHAR_BIT == 8 && BITS_PER_UNIT == 8\n-\t   && initializer_constant_valid_p (init, type))\n+  if (CHAR_BIT == 8 && BITS_PER_UNIT == 8\n+      && initializer_constant_valid_p (init, type))\n     {\n       HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (init));\n       if (size > 0 && (int) size == size)\n@@ -21288,13 +21291,13 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n   if (com_decl)\n     {\n       dw_die_ref com_die;\n-      dw_loc_list_ref loc;\n+      dw_loc_list_ref loc = NULL;\n       die_node com_die_arg;\n \n       var_die = lookup_decl_die (decl_or_origin);\n       if (var_die)\n \t{\n-\t  if (get_AT (var_die, DW_AT_location) == NULL)\n+\t  if (! early_dwarf && get_AT (var_die, DW_AT_location) == NULL)\n \t    {\n \t      loc = loc_list_from_tree (com_decl, off ? 1 : 2, NULL);\n \t      if (loc)\n@@ -21328,7 +21331,8 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n       com_die_arg.decl_id = DECL_UID (com_decl);\n       com_die_arg.die_parent = context_die;\n       com_die = common_block_die_table->find (&com_die_arg);\n-      loc = loc_list_from_tree (com_decl, 2, NULL);\n+      if (! early_dwarf)\n+\tloc = loc_list_from_tree (com_decl, 2, NULL);\n       if (com_die == NULL)\n \t{\n \t  const char *cnam\n@@ -21569,7 +21573,7 @@ gen_label_die (tree decl, dw_die_ref context_die)\n \n   if (DECL_ABSTRACT_P (decl))\n     equate_decl_number_to_die (decl, lbl_die);\n-  else\n+  else if (! early_dwarf)\n     {\n       insn = DECL_RTL_IF_SET (decl);\n \n@@ -23346,9 +23350,13 @@ decls_for_scope (tree stmt, dw_die_ref context_die)\n     {\n       for (decl = BLOCK_VARS (stmt); decl != NULL; decl = DECL_CHAIN (decl))\n \tprocess_scope_var (stmt, decl, NULL_TREE, context_die);\n-      for (i = 0; i < BLOCK_NUM_NONLOCALIZED_VARS (stmt); i++)\n-\tprocess_scope_var (stmt, NULL, BLOCK_NONLOCALIZED_VAR (stmt, i),\n-\t\t\t   context_die);\n+      /* BLOCK_NONLOCALIZED_VARs simply generate DIE stubs with abstract\n+\t origin - avoid doing this twice as we have no good way to see\n+\t if we've done it once already.  */\n+      if (! early_dwarf)\n+\tfor (i = 0; i < BLOCK_NUM_NONLOCALIZED_VARS (stmt); i++)\n+\t  process_scope_var (stmt, NULL, BLOCK_NONLOCALIZED_VAR (stmt, i),\n+\t\t\t     context_die);\n     }\n \n   /* Even if we're at -g1, we need to process the subblocks in order to get"}]}