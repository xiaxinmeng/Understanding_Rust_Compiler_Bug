{"sha": "9f05adb09fd35252136f4d28182e5d60cc03fb36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwNWFkYjA5ZmQzNTI1MjEzNmY0ZDI4MTgyZTVkNjBjYzAzZmIzNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-02-08T17:10:56Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-02-08T17:10:56Z"}, "message": "simplify-rtx.c (simplify_unary_operation_1): We can strip zero_extend, bswap and rotates from POCOUNT's argument.\n\n\n\t* simplify-rtx.c (simplify_unary_operation_1) <POPCOUNT>: We can\n\tstrip zero_extend, bswap and rotates from POCOUNT's argument.\n\t<PARITY>: Likewise, we can strip not, bswap, sign_extend,\n\tzero_extend and rotates from PARITY's argument.\n\t<BSWAP>: A byte-swap followed by a byte-swap is an identity.\n\t(simplify_const_unary_operation) <BSWAP>: Evaluate the byte-swap\n\tof an integer constant at compile-time.\n\n\t* gcc.target/i386/builtin-bswap-2.c: New test case.\n\nFrom-SVN: r121716", "tree": {"sha": "048a2641bea241f51fef4600e4852357f5c9e51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/048a2641bea241f51fef4600e4852357f5c9e51e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f05adb09fd35252136f4d28182e5d60cc03fb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f05adb09fd35252136f4d28182e5d60cc03fb36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f05adb09fd35252136f4d28182e5d60cc03fb36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f05adb09fd35252136f4d28182e5d60cc03fb36/comments", "author": null, "committer": null, "parents": [{"sha": "d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "3a185dc06b833deff0ab7ebfd046a51baa14d0d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f05adb09fd35252136f4d28182e5d60cc03fb36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f05adb09fd35252136f4d28182e5d60cc03fb36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f05adb09fd35252136f4d28182e5d60cc03fb36", "patch": "@@ -1,3 +1,13 @@\n+2007-02-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_unary_operation_1) <POPCOUNT>: We can\n+\tstrip zero_extend, bswap and rotates from POCOUNT's argument.\n+\t<PARITY>: Likewise, we can strip not, bswap, sign_extend,\n+\tzero_extend and rotates from PARITY's argument.\n+\t<BSWAP>: A byte-swap followed by a byte-swap is an identity.\n+\t(simplify_const_unary_operation) <BSWAP>: Evaluate the byte-swap\n+\tof an integer constant at compile-time.\n+\n 2007-02-08  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR 30562"}, {"sha": "8d8bbe52d0c402e793308e6ab6d373024c733a49", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 84, "deletions": 5, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f05adb09fd35252136f4d28182e5d60cc03fb36/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f05adb09fd35252136f4d28182e5d60cc03fb36/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=9f05adb09fd35252136f4d28182e5d60cc03fb36", "patch": "@@ -790,11 +790,54 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n       break;\n \n     case POPCOUNT:\n+      switch (GET_CODE (op))\n+\t{\n+\tcase BSWAP:\n+\tcase ZERO_EXTEND:\n+\t  /* (popcount (zero_extend <X>)) = (popcount <X>) */\n+\t  return simplify_gen_unary (POPCOUNT, mode, XEXP (op, 0),\n+\t\t\t\t     GET_MODE (XEXP (op, 0)));\n+\n+\tcase ROTATE:\n+\tcase ROTATERT:\n+\t  /* Rotations don't affect popcount.  */\n+\t  if (!side_effects_p (XEXP (op, 1)))\n+\t    return simplify_gen_unary (POPCOUNT, mode, XEXP (op, 0),\n+\t\t\t\t       GET_MODE (XEXP (op, 0)));\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+      break;\n+\n     case PARITY:\n-      /* (pop* (zero_extend <X>)) = (pop* <X>) */\n-      if (GET_CODE (op) == ZERO_EXTEND)\n-\treturn simplify_gen_unary (code, mode, XEXP (op, 0),\n-\t\t\t\t   GET_MODE (XEXP (op, 0)));\n+      switch (GET_CODE (op))\n+\t{\n+\tcase NOT:\n+\tcase BSWAP:\n+\tcase ZERO_EXTEND:\n+\tcase SIGN_EXTEND:\n+\t  return simplify_gen_unary (PARITY, mode, XEXP (op, 0),\n+\t\t\t\t     GET_MODE (XEXP (op, 0)));\n+\n+\tcase ROTATE:\n+\tcase ROTATERT:\n+\t  /* Rotations don't affect parity.  */\n+\t  if (!side_effects_p (XEXP (op, 1)))\n+\t    return simplify_gen_unary (PARITY, mode, XEXP (op, 0),\n+\t\t\t\t       GET_MODE (XEXP (op, 0)));\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+      break;\n+\n+    case BSWAP:\n+      /* (bswap (bswap x)) -> x.  */\n+      if (GET_CODE (op) == BSWAP)\n+\treturn XEXP (op, 0);\n       break;\n \n     case FLOAT:\n@@ -1047,7 +1090,19 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  break;\n \n \tcase BSWAP:\n-\t  return 0;\n+\t  {\n+\t    unsigned int s;\n+\n+\t    val = 0;\n+\t    for (s = 0; s < width; s += 8)\n+\t      {\n+\t\tunsigned int d = width - s - 8;\n+\t\tunsigned HOST_WIDE_INT byte;\n+\t\tbyte = (arg0 >> s) & 0xff;\n+\t\tval |= byte << d;\n+\t      }\n+\t  }\n+\t  break;\n \n \tcase TRUNCATE:\n \t  val = arg0;\n@@ -1195,6 +1250,30 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  lv &= 1;\n \t  break;\n \n+\tcase BSWAP:\n+\t  {\n+\t    unsigned int s;\n+\n+\t    hv = 0;\n+\t    lv = 0;\n+\t    for (s = 0; s < width; s += 8)\n+\t      {\n+\t\tunsigned int d = width - s - 8;\n+\t\tunsigned HOST_WIDE_INT byte;\n+\n+\t\tif (s < HOST_BITS_PER_WIDE_INT)\n+\t\t  byte = (l1 >> s) & 0xff;\n+\t\telse\n+\t\t  byte = (h1 >> (s - HOST_BITS_PER_WIDE_INT)) & 0xff;\n+\n+\t\tif (d < HOST_BITS_PER_WIDE_INT)\n+\t\t  lv |= byte << d;\n+\t\telse\n+\t\t  hv |= byte << (d - HOST_BITS_PER_WIDE_INT);\n+\t      }\n+\t  }\n+\t  break;\n+\n \tcase TRUNCATE:\n \t  /* This is just a change-of-mode, so do nothing.  */\n \t  lv = l1, hv = h1;"}, {"sha": "e5195cb2e98b1783961eca9bd70155cf82b6f232", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f05adb09fd35252136f4d28182e5d60cc03fb36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f05adb09fd35252136f4d28182e5d60cc03fb36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f05adb09fd35252136f4d28182e5d60cc03fb36", "patch": "@@ -1,3 +1,7 @@\n+2007-02-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.target/i386/builtin-bswap-2.c: New test case.\n+\n 2007-02-08  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.dg/forall_8.f90: New test case."}, {"sha": "818aa76b95dbf99e98b40f8ae35a9533e7c6983b", "filename": "gcc/testsuite/gcc.target/i386/builtin-bswap-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f05adb09fd35252136f4d28182e5d60cc03fb36/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f05adb09fd35252136f4d28182e5d60cc03fb36/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-2.c?ref=9f05adb09fd35252136f4d28182e5d60cc03fb36", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=nocona\" } */\n+/* { dg-final { scan-assembler-not \"bswap\\[ \\t\\]\" } } */\n+\n+int foo(int x)\n+{\n+  int t = __builtin_bswap32 (x);\n+  return __builtin_bswap32 (t);\n+}\n+"}]}