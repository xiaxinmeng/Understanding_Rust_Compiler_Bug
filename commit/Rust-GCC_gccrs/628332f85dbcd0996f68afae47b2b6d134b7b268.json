{"sha": "628332f85dbcd0996f68afae47b2b6d134b7b268", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4MzMyZjg1ZGJjZDA5OTZmNjhhZmFlNDdiMmI2ZDEzNGI3YjI2OA==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2018-05-13T17:18:31Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-05-13T17:18:31Z"}, "message": "[NDS32] Implment n15 pipeline.\n\ngcc/\n\t* config.gcc (nds32*-*-*): Check that n15 is valid to --with-cpu.\n\t* config/nds32/nds32-graywolf.md: New file.\n\t* config/nds32/nds32-opts.h (nds32_cpu_type): Add CPU_GRAYWOLF.\n\t* config/nds32/nds32-pipelines-auxiliary.c: Implementation for n15\n\tpipeline.\n\t* config/nds32/nds32-protos.h: More declarations for n15 pipeline.\n\t* config/nds32/nds32-utils.c: More implementations for n15 pipeline.\n\t* config/nds32/nds32.md (pipeline_model): Add graywolf.\n\t* config/nds32/nds32.opt (mcpu): Support n15 pipeline cpus.\n\t* config/nds32/pipelines.md: Include n15 settings.\n\nCo-Authored-By: Chung-Ju Wu <jasonwucj@gmail.com>\n\nFrom-SVN: r260214", "tree": {"sha": "a4bd00a917a25d12539d210f62bf9a352b0cd943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4bd00a917a25d12539d210f62bf9a352b0cd943"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/628332f85dbcd0996f68afae47b2b6d134b7b268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628332f85dbcd0996f68afae47b2b6d134b7b268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628332f85dbcd0996f68afae47b2b6d134b7b268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628332f85dbcd0996f68afae47b2b6d134b7b268/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58148bb64960dc5b0e421de8f6d4a4a5cbed9fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58148bb64960dc5b0e421de8f6d4a4a5cbed9fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58148bb64960dc5b0e421de8f6d4a4a5cbed9fe2"}], "stats": {"total": 790, "additions": 781, "deletions": 9}, "files": [{"sha": "4901cb1fd0742d7a1b08589d9b8cb0b398f11269", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=628332f85dbcd0996f68afae47b2b6d134b7b268", "patch": "@@ -1,3 +1,17 @@\n+2018-05-13  Kito Cheng  <kito.cheng@gmail.com>\n+\t    Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config.gcc (nds32*-*-*): Check that n15 is valid to --with-cpu.\n+\t* config/nds32/nds32-graywolf.md: New file.\n+\t* config/nds32/nds32-opts.h (nds32_cpu_type): Add CPU_GRAYWOLF.\n+\t* config/nds32/nds32-pipelines-auxiliary.c: Implementation for n15\n+\tpipeline.\n+\t* config/nds32/nds32-protos.h: More declarations for n15 pipeline.\n+\t* config/nds32/nds32-utils.c: More implementations for n15 pipeline.\n+\t* config/nds32/nds32.md (pipeline_model): Add graywolf.\n+\t* config/nds32/nds32.opt (mcpu): Support n15 pipeline cpus.\n+\t* config/nds32/pipelines.md: Include n15 settings.\n+\n 2018-05-13  Kito Cheng  <kito.cheng@gmail.com>\n \t    Chung-Ju Wu  <jasonwucj@gmail.com>\n "}, {"sha": "be43a09e8af1db87a863e390521951dd781c8d54", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=628332f85dbcd0996f68afae47b2b6d134b7b268", "patch": "@@ -4367,11 +4367,11 @@ case \"${target}\" in\n \t\t\"\")\n \t\t\twith_cpu=n9\n \t\t\t;;\n-\t\tn6 | n7 |n8 | e8 | s8 | n9 | n10 | d10 | n12 | n13)\n+\t\tn6 | n7 |n8 | e8 | s8 | n9 | n10 | d10 | n12 | n13 | n15)\n \t\t\t# OK\n \t\t\t;;\n \t\t*)\n-\t\t\techo \"Cannot accept --with-cpu=$with_cpu, available values are: n6 n7 n8 e8 s8 n9 n10 d10 n12 n13\" 1>&2\n+\t\t\techo \"Cannot accept --with-cpu=$with_cpu, available values are: n6 n7 n8 e8 s8 n9 n10 d10 n12 n13 n15\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac"}, {"sha": "f0c98a6f75d60af2b1fcd37e21a5e43c93062ed8", "filename": "gcc/config/nds32/nds32-graywolf.md", "status": "added", "additions": 471, "deletions": 0, "changes": 471, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32-graywolf.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32-graywolf.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-graywolf.md?ref=628332f85dbcd0996f68afae47b2b6d134b7b268", "patch": "@@ -0,0 +1,471 @@\n+;; Pipeline descriptions of Andes NDS32 cpu for GNU compiler\n+;; Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+;; Contributed by Andes Technology Corporation.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; ------------------------------------------------------------------------\n+;; Define Graywolf pipeline settings.\n+;; ------------------------------------------------------------------------\n+\n+(define_automaton \"nds32_graywolf_machine\")\n+\n+(define_cpu_unit \"gw_ii_0\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_ii_1\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_ex_p0\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_mm_p0\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_wb_p0\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_ex_p1\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_mm_p1\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_wb_p1\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_iq_p2\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_rf_p2\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_e1_p2\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_e2_p2\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_e3_p2\" \"nds32_graywolf_machine\")\n+(define_cpu_unit \"gw_e4_p2\" \"nds32_graywolf_machine\")\n+\n+(define_reservation \"gw_ii\" \"gw_ii_0 | gw_ii_1\")\n+(define_reservation \"gw_ex\" \"gw_ex_p0 | gw_ex_p1\")\n+(define_reservation \"gw_mm\" \"gw_mm_p0 | gw_mm_p1\")\n+(define_reservation \"gw_wb\" \"gw_wb_p0 | gw_wb_p1\")\n+\n+(define_reservation \"gw_ii_all\" \"gw_ii_0 + gw_ii_1\")\n+\n+(define_insn_reservation \"nds_gw_unknown\" 1\n+  (and (eq_attr \"type\" \"unknown\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_ex, gw_mm, gw_wb\")\n+\n+(define_insn_reservation \"nds_gw_misc\" 1\n+  (and (eq_attr \"type\" \"misc\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_ex, gw_mm, gw_wb\")\n+\n+(define_insn_reservation \"nds_gw_mmu\" 1\n+  (and (eq_attr \"type\" \"mmu\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_ex, gw_mm, gw_wb\")\n+\n+(define_insn_reservation \"nds_gw_alu\" 1\n+  (and (and (eq_attr \"type\" \"alu\")\n+            (match_test \"!nds32::movd44_insn_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_ex, gw_mm, gw_wb\")\n+\n+(define_insn_reservation \"nds_gw_movd44\" 1\n+  (and (and (eq_attr \"type\" \"alu\")\n+            (match_test \"nds32::movd44_insn_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex, gw_mm, gw_wb\")\n+\n+(define_insn_reservation \"nds_gw_alu_shift\" 1\n+  (and (eq_attr \"type\" \"alu_shift\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_ex*2, gw_mm, gw_wb\")\n+\n+(define_insn_reservation \"nds_gw_pbsad\" 1\n+  (and (eq_attr \"type\" \"pbsad\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_ex*3, gw_mm, gw_wb\")\n+\n+(define_insn_reservation \"nds_gw_pbsada\" 1\n+  (and (eq_attr \"type\" \"pbsada\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_ex*3, gw_mm, gw_wb\")\n+\n+(define_insn_reservation \"nds_gw_load\" 1\n+  (and (and (eq_attr \"type\" \"load\")\n+            (match_test \"!nds32::post_update_insn_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_load_2w\" 1\n+  (and (and (eq_attr \"type\" \"load\")\n+            (match_test \"nds32::post_update_insn_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_all, gw_ex_p1, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store\" 1\n+  (and (and (eq_attr \"type\" \"store\")\n+            (match_test \"!nds32::store_offset_reg_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store_3r\" 1\n+  (and (and (eq_attr \"type\" \"store\")\n+            (match_test \"nds32::store_offset_reg_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_all, gw_ex_p1, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_load_multiple_1\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+            (eq_attr \"combo\" \"1\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_load_multiple_2\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+            (eq_attr \"combo\" \"2\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*2, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_load_multiple_3\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+            (eq_attr \"combo\" \"3\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*3, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_load_multiple_4\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+            (eq_attr \"combo\" \"4\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_load_multiple_5\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+            (eq_attr \"combo\" \"5\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_load_multiple_6\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+            (eq_attr \"combo\" \"6\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_load_multiple_7\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+            (eq_attr \"combo\" \"7\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_load_multiple_8\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+            (eq_attr \"combo\" \"8\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_load_multiple_12\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+            (eq_attr \"combo\" \"12\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store_multiple_1\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+            (eq_attr \"combo\" \"1\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store_multiple_2\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+            (eq_attr \"combo\" \"2\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*2, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store_multiple_3\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+            (eq_attr \"combo\" \"3\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*3, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store_multiple_4\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+            (eq_attr \"combo\" \"4\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store_multiple_5\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+            (eq_attr \"combo\" \"5\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store_multiple_6\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+            (eq_attr \"combo\" \"6\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store_multiple_7\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+            (eq_attr \"combo\" \"7\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store_multiple_8\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+            (eq_attr \"combo\" \"8\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_store_multiple_12\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+            (eq_attr \"combo\" \"12\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_1, gw_ex_p1*4, gw_mm_p1, gw_wb_p1\")\n+\n+(define_insn_reservation \"nds_gw_mul_fast1\" 1\n+  (and (match_test \"nds32_mul_config == MUL_TYPE_FAST_1\")\n+       (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"pipeline_model\" \"graywolf\")))\n+  \"gw_ii_0, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_mul_fast2\" 1\n+  (and (match_test \"nds32_mul_config == MUL_TYPE_FAST_2\")\n+       (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"pipeline_model\" \"graywolf\")))\n+  \"gw_ii_0, gw_ex_p0*2, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_mul_slow\" 1\n+  (and (match_test \"nds32_mul_config == MUL_TYPE_SLOW\")\n+       (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"pipeline_model\" \"graywolf\")))\n+  \"gw_ii_0, gw_ex_p0*4, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_mac_fast1\" 1\n+  (and (match_test \"nds32_mul_config == MUL_TYPE_FAST_1\")\n+       (and (eq_attr \"type\" \"mac\")\n+       (eq_attr \"pipeline_model\" \"graywolf\")))\n+  \"gw_ii_all, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_mac_fast2\" 1\n+  (and (match_test \"nds32_mul_config == MUL_TYPE_FAST_2\")\n+       (and (eq_attr \"type\" \"mac\")\n+       (eq_attr \"pipeline_model\" \"graywolf\")))\n+  \"gw_ii_all, gw_ex_p0*2, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_mac_slow\" 1\n+  (and (match_test \"nds32_mul_config == MUL_TYPE_SLOW\")\n+       (and (eq_attr \"type\" \"mac\")\n+       (eq_attr \"pipeline_model\" \"graywolf\")))\n+  \"gw_ii_all, gw_ex_p0*4, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_div\" 1\n+  (and (and (eq_attr \"type\" \"div\")\n+            (match_test \"!nds32::divmod_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_0, gw_ex_p0*4, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_div_2w\" 1\n+  (and (and (eq_attr \"type\" \"div\")\n+            (match_test \"nds32::divmod_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_all, gw_ex_p0*4, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_branch\" 1\n+  (and (eq_attr \"type\" \"branch\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_0, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_dsp_alu\" 1\n+  (and (eq_attr \"type\" \"dalu\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_ex, gw_mm, gw_wb\")\n+\n+(define_insn_reservation \"nds_gw_dsp_alu64\" 1\n+  (and (eq_attr \"type\" \"dalu64\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_all, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_dsp_alu_round\" 1\n+  (and (eq_attr \"type\" \"daluround\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_0, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_dsp_cmp\" 1\n+  (and (eq_attr \"type\" \"dcmp\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_0, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_dsp_clip\" 1\n+  (and (eq_attr \"type\" \"dclip\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_0, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_dsp_mul\" 1\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_0, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_dsp_mac\" 1\n+  (and (eq_attr \"type\" \"dmac\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_all, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_dsp_insb\" 1\n+  (and (eq_attr \"type\" \"dinsb\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_0, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_dsp_pack\" 1\n+  (and (eq_attr \"type\" \"dpack\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_0, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_dsp_bpick\" 1\n+  (and (eq_attr \"type\" \"dbpick\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_0, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_dsp_wext\" 1\n+  (and (eq_attr \"type\" \"dwext\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii_all, gw_ex_p0, gw_mm_p0, gw_wb_p0\")\n+\n+(define_insn_reservation \"nds_gw_fpu_alu\" 4\n+  (and (eq_attr \"type\" \"falu\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_muls\" 4\n+  (and (eq_attr \"type\" \"fmuls\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_muld\" 4\n+  (and (eq_attr \"type\" \"fmuld\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2*2, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_macs\" 4\n+  (and (eq_attr \"type\" \"fmacs\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2*3, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_macd\" 4\n+  (and (eq_attr \"type\" \"fmacd\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2*4, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_divs\" 4\n+  (and (ior (eq_attr \"type\" \"fdivs\")\n+\t    (eq_attr \"type\" \"fsqrts\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2*14, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_divd\" 4\n+  (and (ior (eq_attr \"type\" \"fdivd\")\n+\t    (eq_attr \"type\" \"fsqrtd\"))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2*28, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_fast_alu\" 2\n+  (and (ior (eq_attr \"type\" \"fcmp\")\n+\t    (ior (eq_attr \"type\" \"fabs\")\n+\t\t (ior (eq_attr \"type\" \"fcpy\")\n+\t\t      (eq_attr \"type\" \"fcmov\"))))\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_fmtsr\" 1\n+  (and (eq_attr \"type\" \"fmtsr\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_fmtdr\" 1\n+  (and (eq_attr \"type\" \"fmtdr\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_ii+gw_iq_p2, gw_iq_p2+gw_rf_p2, gw_rf_p2+gw_e1_p2, gw_e1_p2+gw_e2_p2, gw_e2_p2+gw_e3_p2, gw_e3_p2+gw_e4_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_fmfsr\" 1\n+  (and (eq_attr \"type\" \"fmfsr\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_fmfdr\" 1\n+  (and (eq_attr \"type\" \"fmfdr\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_ii+gw_iq_p2, gw_iq_p2+gw_rf_p2, gw_rf_p2+gw_e1_p2, gw_e1_p2+gw_e2_p2, gw_e2_p2+gw_e3_p2, gw_e3_p2+gw_e4_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_load\" 3\n+  (and (eq_attr \"type\" \"fload\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2, gw_e3_p2, gw_e4_p2\")\n+\n+(define_insn_reservation \"nds_gw_fpu_store\" 1\n+  (and (eq_attr \"type\" \"fstore\")\n+       (eq_attr \"pipeline_model\" \"graywolf\"))\n+  \"gw_ii, gw_iq_p2, gw_rf_p2, gw_e1_p2, gw_e2_p2, gw_e3_p2, gw_e4_p2\")\n+\n+;; FPU_ADDR_OUT -> FPU_ADDR_IN\n+;; Main pipeline rules don't need this because those default latency is 1.\n+(define_bypass 1\n+  \"nds_gw_fpu_load, nds_gw_fpu_store\"\n+  \"nds_gw_fpu_load, nds_gw_fpu_store\"\n+  \"nds32_gw_ex_to_ex_p\"\n+)\n+\n+;; LD, MUL, MAC, DIV, DALU64, DMUL, DMAC, DALUROUND, DBPICK, DWEXT\n+;;   -> ALU, ALU_SHIFT_Rb, PBSAD, PBSADA_RaRb, MOVD44, MUL, MAC_RaRb, DIV, ADDR_IN, BR, MMU,\n+;;      DALU, DALUROUND, DMUL, DMAC_RaRb, DPACK, DINSB, DCMP, DCLIP, WEXT_O, BPICK_RaRb\n+(define_bypass 2\n+  \"nds_gw_load, nds_gw_load_2w,\\\n+   nds_gw_mul_fast1, nds_gw_mul_fast2, nds_gw_mul_slow,\\\n+   nds_gw_mac_fast1, nds_gw_mac_fast2, nds_gw_mac_slow,\\\n+   nds_gw_div, nds_gw_div_2w,\\\n+   nds_gw_dsp_alu64, nds_gw_dsp_mul, nds_gw_dsp_mac,\\\n+   nds_gw_dsp_alu_round, nds_gw_dsp_bpick, nds_gw_dsp_wext\"\n+  \"nds_gw_alu, nds_gw_movd44, nds_gw_alu_shift,\\\n+   nds_gw_pbsad, nds_gw_pbsada,\\\n+   nds_gw_mul_fast1, nds_gw_mul_fast2, nds_gw_mul_slow,\\\n+   nds_gw_mac_fast1, nds_gw_mac_fast2, nds_gw_mac_slow,\\\n+   nds_gw_branch,\\\n+   nds_gw_div, nds_gw_div_2w,\\\n+   nds_gw_load, nds_gw_load_2w, nds_gw_store, nds_gw_store_3r,\\\n+   nds_gw_load_multiple_1,nds_gw_load_multiple_2, nds_gw_load_multiple_3,\\\n+   nds_gw_load_multiple_4,nds_gw_load_multiple_5, nds_gw_load_multiple_6,\\\n+   nds_gw_load_multiple_7,nds_gw_load_multiple_8, nds_gw_load_multiple_12,\\\n+   nds_gw_store_multiple_1,nds_gw_store_multiple_2, nds_gw_store_multiple_3,\\\n+   nds_gw_store_multiple_4,nds_gw_store_multiple_5, nds_gw_store_multiple_6,\\\n+   nds_gw_store_multiple_7,nds_gw_store_multiple_8, nds_gw_store_multiple_12,\\\n+   nds_gw_mmu,\\\n+   nds_gw_dsp_alu, nds_gw_dsp_alu_round,\\\n+   nds_gw_dsp_mul, nds_gw_dsp_mac, nds_gw_dsp_pack,\\\n+   nds_gw_dsp_insb, nds_gw_dsp_cmp, nds_gw_dsp_clip,\\\n+   nds_gw_dsp_wext, nds_gw_dsp_bpick\"\n+  \"nds32_gw_mm_to_ex_p\"\n+)\n+\n+;; LMW(N, N)\n+;;   -> ALU, ALU_SHIFT_Rb, PBSAD, PBSADA_RaRb, MOVD44, MUL, MAC_RaRb, DIV, ADDR_IN, BR, MMU\n+;;      DALU, DALUROUND, DMUL, DMAC_RaRb, DPACK, DINSB, DCMP, DCLIP, WEXT_O, BPICK_RaRb\n+(define_bypass 2\n+  \"nds_gw_load_multiple_1,nds_gw_load_multiple_2, nds_gw_load_multiple_3,\\\n+   nds_gw_load_multiple_4,nds_gw_load_multiple_5, nds_gw_load_multiple_6,\\\n+   nds_gw_load_multiple_7,nds_gw_load_multiple_8, nds_gw_load_multiple_12\"\n+  \"nds_gw_alu, nds_gw_movd44, nds_gw_alu_shift,\\\n+   nds_gw_pbsad, nds_gw_pbsada,\\\n+   nds_gw_mul_fast1, nds_gw_mul_fast2, nds_gw_mul_slow,\\\n+   nds_gw_mac_fast1, nds_gw_mac_fast2, nds_gw_mac_slow,\\\n+   nds_gw_branch,\\\n+   nds_gw_div, nds_gw_div_2w,\\\n+   nds_gw_load, nds_gw_load_2w, nds_gw_store, nds_gw_store_3r,\\\n+   nds_gw_load_multiple_1,nds_gw_load_multiple_2, nds_gw_load_multiple_3,\\\n+   nds_gw_load_multiple_4,nds_gw_load_multiple_5, nds_gw_load_multiple_6,\\\n+   nds_gw_load_multiple_7,nds_gw_load_multiple_8, nds_gw_load_multiple_12,\\\n+   nds_gw_store_multiple_1,nds_gw_store_multiple_2, nds_gw_store_multiple_3,\\\n+   nds_gw_store_multiple_4,nds_gw_store_multiple_5, nds_gw_store_multiple_6,\\\n+   nds_gw_store_multiple_7,nds_gw_store_multiple_8, nds_gw_store_multiple_12,\\\n+   nds_gw_mmu,\\\n+   nds_gw_dsp_alu, nds_gw_dsp_alu_round,\\\n+   nds_gw_dsp_mul, nds_gw_dsp_mac, nds_gw_dsp_pack,\\\n+   nds_gw_dsp_insb, nds_gw_dsp_cmp, nds_gw_dsp_clip,\\\n+   nds_gw_dsp_wext, nds_gw_dsp_bpick\"\n+  \"nds32_gw_last_load_to_ex_p\"\n+)"}, {"sha": "e0400655757b1f76f583e47157aef7f1918bf20b", "filename": "gcc/config/nds32/nds32-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h?ref=628332f85dbcd0996f68afae47b2b6d134b7b268", "patch": "@@ -43,6 +43,7 @@ enum nds32_cpu_type\n   CPU_E8,\n   CPU_N9,\n   CPU_N10,\n+  CPU_GRAYWOLF,\n   CPU_N12,\n   CPU_N13,\n   CPU_SIMPLE"}, {"sha": "53619d225107008e37d166079806b1d4b3a38322", "filename": "gcc/config/nds32/nds32-pipelines-auxiliary.c", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c?ref=628332f85dbcd0996f68afae47b2b6d134b7b268", "patch": "@@ -931,6 +931,88 @@ n10_consumed_by_ex_dep_p (rtx_insn *consumer, rtx def_reg)\n   return false;\n }\n \n+/* Check the dependency between the producer defining DEF_REG and CONSUMER\n+   requiring input operand at EX.  */\n+bool\n+gw_consumed_by_ex_dep_p (rtx_insn *consumer, rtx def_reg)\n+{\n+  rtx use_rtx;\n+\n+  switch (get_attr_type (consumer))\n+    {\n+    case TYPE_ALU:\n+    case TYPE_PBSAD:\n+    case TYPE_MUL:\n+    case TYPE_DALU:\n+    case TYPE_DALU64:\n+    case TYPE_DMUL:\n+    case TYPE_DPACK:\n+    case TYPE_DINSB:\n+    case TYPE_DCMP:\n+    case TYPE_DCLIP:\n+    case TYPE_DALUROUND:\n+      use_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_ALU_SHIFT:\n+      use_rtx = extract_shift_reg (consumer);\n+      break;\n+\n+    case TYPE_PBSADA:\n+      return pbsada_insn_ra_rb_dep_reg_p (consumer, def_reg);\n+\n+    case TYPE_MAC:\n+    case TYPE_DMAC:\n+      use_rtx = extract_mac_non_acc_rtx (consumer);\n+      break;\n+\n+   /* Some special instructions, divmodsi4 and udivmodsi4, produce two\n+      results, the quotient and the remainder.  We have to check the\n+      dependency from the producer to the first micro-operation.  */\n+    case TYPE_DIV:\n+      if (divmod_p (consumer))\n+\tuse_rtx = SET_SRC (parallel_element (consumer, 0));\n+      else\n+\tuse_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_DWEXT:\n+      return wext_odd_dep_p (consumer, def_reg);\n+\n+    case TYPE_DBPICK:\n+      return bpick_ra_rb_dep_p (consumer, def_reg);\n+\n+    case TYPE_MMU:\n+      if (GET_CODE (PATTERN (consumer)) == SET)\n+\tuse_rtx = SET_SRC (PATTERN (consumer));\n+      else\n+\treturn true;\n+      break;\n+\n+    case TYPE_LOAD:\n+    case TYPE_STORE:\n+      use_rtx = extract_mem_rtx (consumer);\n+      break;\n+\n+    case TYPE_LOAD_MULTIPLE:\n+    case TYPE_STORE_MULTIPLE:\n+      use_rtx = extract_base_reg (consumer);\n+      break;\n+\n+    case TYPE_BRANCH:\n+      use_rtx = PATTERN (consumer);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (reg_overlap_p (def_reg, use_rtx))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Check dependencies from any stages to ALU_E1 (E1).  This is a helper\n    function of n13_consumed_by_e1_dep_p ().  */\n bool\n@@ -1532,6 +1614,67 @@ nds32_n10_last_load_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n   return n10_consumed_by_ex_dep_p (consumer, last_def_reg);\n }\n \n+/* Guard functions for Graywolf cores.  */\n+\n+/* Check dependencies from EX to EX (ADDR_OUT -> ADDR_IN).  */\n+bool\n+nds32_gw_ex_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  return nds32_n10_ex_to_ex_p (producer, consumer);\n+}\n+\n+/* Check dependencies from MM to EX.  */\n+bool\n+nds32_gw_mm_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx def_reg;\n+\n+  switch (get_attr_type (producer))\n+    {\n+    case TYPE_LOAD:\n+    case TYPE_MUL:\n+    case TYPE_MAC:\n+    case TYPE_DALU64:\n+    case TYPE_DMUL:\n+    case TYPE_DMAC:\n+    case TYPE_DALUROUND:\n+    case TYPE_DBPICK:\n+    case TYPE_DWEXT:\n+      def_reg = SET_DEST (PATTERN (producer));\n+      break;\n+\n+   /* Some special instructions, divmodsi4 and udivmodsi4, produce two\n+      results, the quotient and the remainder.  We have to handle them\n+      individually.  */\n+    case TYPE_DIV:\n+      if (divmod_p (producer))\n+\t{\n+\t  rtx def_reg1 = SET_DEST (parallel_element (producer, 0));\n+\t  rtx def_reg2 = SET_DEST (parallel_element (producer, 1));\n+\n+\t  return (gw_consumed_by_ex_dep_p (consumer, def_reg1)\n+\t\t  || gw_consumed_by_ex_dep_p (consumer, def_reg2));\n+\t}\n+\n+      def_reg = SET_DEST (PATTERN (producer));\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+    return gw_consumed_by_ex_dep_p (consumer, def_reg);\n+}\n+\n+/* Check dependencies from LMW(N, N) to EX.  */\n+bool\n+nds32_gw_last_load_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx last_def_reg = extract_nth_access_reg (producer, -1);\n+\n+  return gw_consumed_by_ex_dep_p (consumer, last_def_reg);\n+}\n+\n /* Guard functions for N12/N13 cores.  */\n \n /* Check dependencies from E2 to E1.  */"}, {"sha": "a7d679e01f05e8ed220f55ec855c8039fe0d5341", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=628332f85dbcd0996f68afae47b2b6d134b7b268", "patch": "@@ -125,6 +125,10 @@ extern bool nds32_n10_ex_to_ex_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n10_mm_to_ex_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n10_last_load_to_ex_p (rtx_insn *, rtx_insn *);\n \n+extern bool nds32_gw_ex_to_ex_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_gw_mm_to_ex_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_gw_last_load_to_ex_p (rtx_insn *, rtx_insn *);\n+\n extern bool nds32_n13_e2_to_e1_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n13_load_to_e1_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n13_load_to_e2_p (rtx_insn *, rtx_insn *);\n@@ -297,11 +301,13 @@ bool load_single_p (rtx_insn *);\n bool store_single_p (rtx_insn *);\n bool load_double_p (rtx_insn *);\n bool store_double_p (rtx_insn *);\n+bool store_offset_reg_p (rtx_insn *);\n bool post_update_insn_p (rtx_insn *);\n bool immed_offset_p (rtx);\n int find_post_update_rtx (rtx_insn *);\n rtx extract_mem_rtx (rtx_insn *);\n rtx extract_base_reg (rtx_insn *);\n+rtx extract_offset_rtx (rtx_insn *);\n \n rtx extract_shift_reg (rtx);\n "}, {"sha": "7c93cd2edd0598bc3307cc9524f6894638188ab2", "filename": "gcc/config/nds32/nds32-utils.c", "status": "modified", "additions": 115, "deletions": 6, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-utils.c?ref=628332f85dbcd0996f68afae47b2b6d134b7b268", "patch": "@@ -142,6 +142,23 @@ store_double_p (rtx_insn *insn)\n   return true;\n }\n \n+bool\n+store_offset_reg_p (rtx_insn *insn)\n+{\n+  if (get_attr_type (insn) != TYPE_STORE)\n+    return false;\n+\n+  rtx offset_rtx = extract_offset_rtx (insn);\n+\n+  if (offset_rtx == NULL_RTX)\n+    return false;\n+\n+  if (REG_P (offset_rtx))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Determine if INSN is a post update insn.  */\n bool\n post_update_insn_p (rtx_insn *insn)\n@@ -316,22 +333,114 @@ extract_base_reg (rtx_insn *insn)\n   if (REG_P (XEXP (mem_rtx, 0)))\n     return XEXP (mem_rtx, 0);\n \n+  /* (mem (lo_sum (reg) (symbol_ref)) */\n+  if (GET_CODE (XEXP (mem_rtx, 0)) == LO_SUM)\n+    return XEXP (XEXP (mem_rtx, 0), 0);\n+\n   plus_rtx = XEXP (mem_rtx, 0);\n \n   if (GET_CODE (plus_rtx) == SYMBOL_REF\n       || GET_CODE (plus_rtx) == CONST)\n     return NULL_RTX;\n \n-  gcc_assert (GET_CODE (plus_rtx) == PLUS\n-\t      || GET_CODE (plus_rtx) == POST_INC\n-\t      || GET_CODE (plus_rtx) == POST_DEC\n-\t      || GET_CODE (plus_rtx) == POST_MODIFY);\n-  gcc_assert (REG_P (XEXP (plus_rtx, 0)));\n   /* (mem (plus (reg) (const_int))) or\n+     (mem (plus (mult (reg) (const_int 4)) (reg))) or\n      (mem (post_inc (reg))) or\n      (mem (post_dec (reg))) or\n      (mem (post_modify (reg) (plus (reg) (reg))))  */\n-  return XEXP (plus_rtx, 0);\n+  gcc_assert (GET_CODE (plus_rtx) == PLUS\n+\t      || GET_CODE (plus_rtx) == POST_INC\n+\t      || GET_CODE (plus_rtx) == POST_DEC\n+\t      || GET_CODE (plus_rtx) == POST_MODIFY);\n+\n+  if (REG_P (XEXP (plus_rtx, 0)))\n+    return XEXP (plus_rtx, 0);\n+\n+  gcc_assert (REG_P (XEXP (plus_rtx, 1)));\n+  return XEXP (plus_rtx, 1);\n+}\n+\n+/* Extract the offset rtx from load/store insns.  The function returns\n+   NULL_RTX if offset is absent.  */\n+rtx\n+extract_offset_rtx (rtx_insn *insn)\n+{\n+  rtx mem_rtx;\n+  rtx plus_rtx;\n+  rtx offset_rtx;\n+\n+  /* Find the MEM rtx.  The multiple load/store insns doens't have\n+     the offset field so we can return NULL_RTX here.  */\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_LOAD_MULTIPLE:\n+    case TYPE_STORE_MULTIPLE:\n+      return NULL_RTX;\n+\n+    case TYPE_LOAD:\n+    case TYPE_FLOAD:\n+    case TYPE_STORE:\n+    case TYPE_FSTORE:\n+      mem_rtx = extract_mem_rtx (insn);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  gcc_assert (MEM_P (mem_rtx));\n+\n+  /* (mem (reg))  */\n+  if (REG_P (XEXP (mem_rtx, 0)))\n+    return NULL_RTX;\n+\n+  plus_rtx = XEXP (mem_rtx, 0);\n+\n+  switch (GET_CODE (plus_rtx))\n+    {\n+    case SYMBOL_REF:\n+    case CONST:\n+    case POST_INC:\n+    case POST_DEC:\n+      return NULL_RTX;\n+\n+    case PLUS:\n+      /* (mem (plus (reg) (const_int))) or\n+         (mem (plus (mult (reg) (const_int 4)) (reg))) */\n+      if (REG_P (XEXP (plus_rtx, 0)))\n+        offset_rtx = XEXP (plus_rtx, 1);\n+      else\n+\t{\n+\t  gcc_assert (REG_P (XEXP (plus_rtx, 1)));\n+\t  offset_rtx = XEXP (plus_rtx, 0);\n+\t}\n+\n+      if (ARITHMETIC_P (offset_rtx))\n+\t{\n+\t  gcc_assert (GET_CODE (offset_rtx) == MULT);\n+\t  gcc_assert (REG_P (XEXP (offset_rtx, 0)));\n+\t  offset_rtx = XEXP (offset_rtx, 0);\n+\t}\n+      break;\n+\n+    case LO_SUM:\n+      /* (mem (lo_sum (reg) (symbol_ref)) */\n+      offset_rtx = XEXP (plus_rtx, 1);\n+      break;\n+\n+    case POST_MODIFY:\n+      /* (mem (post_modify (reg) (plus (reg) (reg / const_int)))) */\n+      gcc_assert (REG_P (XEXP (plus_rtx, 0)));\n+      plus_rtx = XEXP (plus_rtx, 1);\n+      gcc_assert (GET_CODE (plus_rtx) == PLUS);\n+      offset_rtx = XEXP (plus_rtx, 0);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return offset_rtx;\n }\n \n /* Extract the register of the shift operand from an ALU_SHIFT rtx.  */"}, {"sha": "6379212550e1bdc3b841644279192225d7e128ba", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=628332f85dbcd0996f68afae47b2b6d134b7b268", "patch": "@@ -56,13 +56,14 @@\n ;; ------------------------------------------------------------------------\n \n ;; CPU pipeline model.\n-(define_attr \"pipeline_model\" \"n7,n8,e8,n9,n10,n13,simple\"\n+(define_attr \"pipeline_model\" \"n7,n8,e8,n9,n10,graywolf,n13,simple\"\n   (const\n     (cond [(match_test \"nds32_cpu_option == CPU_N7\")  (const_string \"n7\")\n \t   (match_test \"nds32_cpu_option == CPU_E8\")  (const_string \"e8\")\n \t   (match_test \"nds32_cpu_option == CPU_N6 || nds32_cpu_option == CPU_N8\")  (const_string \"n8\")\n \t   (match_test \"nds32_cpu_option == CPU_N9\")  (const_string \"n9\")\n \t   (match_test \"nds32_cpu_option == CPU_N10\") (const_string \"n10\")\n+\t   (match_test \"nds32_cpu_option == CPU_GRAYWOLF\") (const_string \"graywolf\")\n \t   (match_test \"nds32_cpu_option == CPU_N12\") (const_string \"n13\")\n \t   (match_test \"nds32_cpu_option == CPU_N13\") (const_string \"n13\")\n \t   (match_test \"nds32_cpu_option == CPU_SIMPLE\") (const_string \"simple\")]"}, {"sha": "f1c1bf9189555d9df2234ca16ae45c8e9c78d33c", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=628332f85dbcd0996f68afae47b2b6d134b7b268", "patch": "@@ -287,6 +287,27 @@ Enum(nds32_cpu_type) String(d1088-fpu) Value(CPU_N10)\n EnumValue\n Enum(nds32_cpu_type) String(d1088-spu) Value(CPU_N10)\n \n+EnumValue\n+Enum(nds32_cpu_type) Undocumented String(graywolf) Value(CPU_GRAYWOLF)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n15) Value(CPU_GRAYWOLF)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(d15) Value(CPU_GRAYWOLF)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n15s) Value(CPU_GRAYWOLF)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(d15s) Value(CPU_GRAYWOLF)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n15f) Value(CPU_GRAYWOLF)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(d15f) Value(CPU_GRAYWOLF)\n+\n EnumValue\n Enum(nds32_cpu_type) String(n12) Value(CPU_N12)\n "}, {"sha": "12cd2623f1c7af4e8f7e5dc6052e5e5fe78e0a67", "filename": "gcc/config/nds32/pipelines.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628332f85dbcd0996f68afae47b2b6d134b7b268/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fpipelines.md?ref=628332f85dbcd0996f68afae47b2b6d134b7b268", "patch": "@@ -49,6 +49,12 @@\n (include \"nds32-n10.md\")\n \n \n+;; ------------------------------------------------------------------------\n+;; Include Graywolf pipeline settings.\n+;; ------------------------------------------------------------------------\n+(include \"nds32-graywolf.md\")\n+\n+\n ;; ------------------------------------------------------------------------\n ;; Include N12/N13 pipeline settings.\n ;; ------------------------------------------------------------------------"}]}