{"sha": "e49a1d2e073c02fafe4fc80147966c1f0c11488f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ5YTFkMmUwNzNjMDJmYWZlNGZjODAxNDc5NjZjMWYwYzExNDg4Zg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-08-14T20:55:11Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-08-14T20:55:11Z"}, "message": "cse.c (fold_rtx): Avoid empty body in an if-statement.\n\n\t* cse.c (fold_rtx): Avoid empty body in an if-statement.\n\n\t* doloop.c (doloop_iterations_max, doloop_modify): Avoid using the\n\t`U' integer constant suffix.\n\n\t* dwarf2out.c (add_subscript_info): Avoid empty body in an\n\telse-statement.\n\n\t* sparc/sol2.h (__enable_execute_stack): Prototype.\n\nFrom-SVN: r35687", "tree": {"sha": "c9332dca3ec3ca34edc8e972059519e24fd0a7e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9332dca3ec3ca34edc8e972059519e24fd0a7e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e49a1d2e073c02fafe4fc80147966c1f0c11488f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49a1d2e073c02fafe4fc80147966c1f0c11488f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49a1d2e073c02fafe4fc80147966c1f0c11488f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49a1d2e073c02fafe4fc80147966c1f0c11488f/comments", "author": null, "committer": null, "parents": [{"sha": "78fbdbf74875ef9b17e62f070c10b75faf79ecc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fbdbf74875ef9b17e62f070c10b75faf79ecc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78fbdbf74875ef9b17e62f070c10b75faf79ecc3"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "6490782e2eab813b7b041b320fb6968728037bfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49a1d2e073c02fafe4fc80147966c1f0c11488f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49a1d2e073c02fafe4fc80147966c1f0c11488f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e49a1d2e073c02fafe4fc80147966c1f0c11488f", "patch": "@@ -1,3 +1,15 @@\n+2000-08-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cse.c (fold_rtx): Avoid empty body in an if-statement.\n+\t\n+\t* doloop.c (doloop_iterations_max, doloop_modify): Avoid using the\n+\t`U' integer constant suffix.\n+\n+\t* dwarf2out.c (add_subscript_info): Avoid empty body in an\n+\telse-statement.\n+\n+\t* sparc/sol2.h (__enable_execute_stack): Prototype.\n+\n 2000-08-14  David Edelsohn  <edelsohn@gnu.org>\n \n \t* collect2.c: Remove use of AIX import file."}, {"sha": "2b3815294859b2d9a5c546774926c7e1500dd7f2", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49a1d2e073c02fafe4fc80147966c1f0c11488f/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49a1d2e073c02fafe4fc80147966c1f0c11488f/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=e49a1d2e073c02fafe4fc80147966c1f0c11488f", "patch": "@@ -255,6 +255,7 @@ static void check_enabling(void)\t\t\t\t\t\\\n     need_enable_exec_stack = 1;\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+extern void __enable_execute_stack (void *);\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n __enable_execute_stack (addr)\t\t\t\t\t\t\\\n      void *addr;\t\t\t\t\t\t\t\\"}, {"sha": "a210a55a4338bb927e537d0c2c2f0b8fbe8f5ede", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49a1d2e073c02fafe4fc80147966c1f0c11488f/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49a1d2e073c02fafe4fc80147966c1f0c11488f/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e49a1d2e073c02fafe4fc80147966c1f0c11488f", "patch": "@@ -3646,7 +3646,7 @@ fold_rtx (x, insn)\n \tif (fmt[i] == 'E')\n \t  /* Don't try to fold inside of a vector of expressions.\n \t     Doing nothing is harmless.  */\n-\t  ;\n+\t  {;}\n       }\n \n   /* If a commutative operation, place a constant integer as the second"}, {"sha": "cb2b67bf49e51f90bbcf0e76c4658afbca6a0f9b", "filename": "gcc/doloop.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49a1d2e073c02fafe4fc80147966c1f0c11488f/gcc%2Fdoloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49a1d2e073c02fafe4fc80147966c1f0c11488f/gcc%2Fdoloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoloop.c?ref=e49a1d2e073c02fafe4fc80147966c1f0c11488f", "patch": "@@ -197,7 +197,7 @@ doloop_iterations_max (loop_info, mode, nonneg)\n \tif (GET_CODE (max_value) == CONST_INT)\n \t  umax = INTVAL (max_value);\n \telse\n-\t  umax = (2U << (GET_MODE_BITSIZE (mode) - 1)) - 1;\n+\t  umax = ((unsigned)2 << (GET_MODE_BITSIZE (mode) - 1)) - 1;\n \n \tn_iterations_max = umax - umin;\n \tbreak;\n@@ -212,12 +212,12 @@ doloop_iterations_max (loop_info, mode, nonneg)\n \tif (GET_CODE (min_value) == CONST_INT)\n \t  smin = INTVAL (min_value);\n \telse\n-\t  smin = -(1U << (GET_MODE_BITSIZE (mode) - 1));\n+\t  smin = -((unsigned)1 << (GET_MODE_BITSIZE (mode) - 1));\n \n \tif (GET_CODE (max_value) == CONST_INT)\n \t  smax = INTVAL (max_value);\n \telse\n-\t  smax = (1U << (GET_MODE_BITSIZE (mode) - 1)) - 1;\n+\t  smax = ((unsigned)1 << (GET_MODE_BITSIZE (mode) - 1)) - 1;\n \n \tn_iterations_max = smax - smin;\n \tbreak;\n@@ -230,7 +230,7 @@ doloop_iterations_max (loop_info, mode, nonneg)\n       else\n \t/* We need to conservatively assume that we might have the maximum\n \t   number of iterations without any additional knowledge.  */\n-\tn_iterations_max = (2U << (GET_MODE_BITSIZE (mode) - 1)) - 1;\n+\tn_iterations_max = ((unsigned)2 << (GET_MODE_BITSIZE (mode) - 1)) - 1;\n       break;\n \n     default:\n@@ -241,8 +241,9 @@ doloop_iterations_max (loop_info, mode, nonneg)\n \n   /* If we know that the iteration count is non-negative then adjust\n      n_iterations_max if it is so large that it appears negative.  */\n-  if (nonneg && n_iterations_max > (1U << (GET_MODE_BITSIZE (mode) - 1)))\n-    n_iterations_max = (1U << (GET_MODE_BITSIZE (mode) - 1)) - 1;\n+  if (nonneg\n+      && n_iterations_max > ((unsigned)1 << (GET_MODE_BITSIZE (mode) - 1)))\n+    n_iterations_max = ((unsigned)1 << (GET_MODE_BITSIZE (mode) - 1)) - 1;\n \n   return n_iterations_max;\n }\n@@ -451,7 +452,7 @@ doloop_modify (loop, iterations, iterations_max,\n       /* Determine if the iteration counter will be non-negative.\n \t Note that the maximum value loaded is iterations_max - 1.  */\n       if ((unsigned HOST_WIDE_INT) INTVAL (iterations_max)\n-\t  <= (1U << (GET_MODE_BITSIZE (GET_MODE (counter_reg)) - 1)))\n+\t  <= ((unsigned)1 << (GET_MODE_BITSIZE (GET_MODE (counter_reg)) - 1)))\n \tnonneg = 1;\n       break;\n "}, {"sha": "731cae69d590f9151e0a9ba07f312c456472c2cf", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49a1d2e073c02fafe4fc80147966c1f0c11488f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49a1d2e073c02fafe4fc80147966c1f0c11488f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e49a1d2e073c02fafe4fc80147966c1f0c11488f", "patch": "@@ -7566,7 +7566,7 @@ add_subscript_info (type_die, type)\n \t/* We have an array type with an unspecified length.  The DWARF-2\n \t     spec does not say how to handle this; let's just leave out the\n \t     bounds.  */\n-\t;\n+        {;}\n \n #ifndef MIPS_DEBUGGING_INFO\n     }"}]}