{"sha": "e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThjNzhiM2EwYzdiZTcwMjBiNzdmOWE4ZWYwNGU5NzBiMzkxZjFhYQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-10-11T18:05:35Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-10-11T18:05:35Z"}, "message": "re PR fortran/91649 (ICE in gfc_resolve_findloc, at fortran/iresolve.c:1827)\n\n2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/91649\n\tcheck.c (gfc_check_findloc): Additional checking for valid arguments\n\n2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/91649\n\t* gfortran.dg/pr91649.f90: New test.\n\nFrom-SVN: r276900", "tree": {"sha": "29754a1aaea340bfe3241f73896e31f114684ad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29754a1aaea340bfe3241f73896e31f114684ad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa/comments", "author": null, "committer": null, "parents": [{"sha": "95040e7e207dc0a2024c2ed10b8b15de4b369ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95040e7e207dc0a2024c2ed10b8b15de4b369ece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95040e7e207dc0a2024c2ed10b8b15de4b369ece"}], "stats": {"total": 64, "additions": 53, "deletions": 11}, "files": [{"sha": "82164d713aef7cb368e51b42a9b256d8a2b6ec0f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa", "patch": "@@ -1,3 +1,8 @@\n+2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/91649\n+\tcheck.c (gfc_check_findloc): Additional checking for valid arguments\n+\n 2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91715"}, {"sha": "d2a4949e12b41e2809e42a34a9cdb27548cb5a8e", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa", "patch": "@@ -3921,26 +3921,27 @@ bool\n gfc_check_findloc (gfc_actual_arglist *ap)\n {\n   gfc_expr *a, *v, *m, *d, *k, *b;\n+  bool a1, v1;\n \n   a = ap->expr;\n   if (!intrinsic_type_check (a, 0) || !array_check (a, 0))\n     return false;\n \n   v = ap->next->expr;\n-  if (!scalar_check (v,1))\n+  if (!intrinsic_type_check (v, 1) || !scalar_check (v,1))\n     return false;\n \n-  /* Check if the type is compatible.  */\n+  /* Check if the type are both logical.  */\n+  a1 = a->ts.type == BT_LOGICAL;\n+  v1 = v->ts.type == BT_LOGICAL;\n+  if ((a1 && !v1) || (!a1 && v1))\n+    goto incompat;\n \n-  if ((a->ts.type == BT_LOGICAL && v->ts.type != BT_LOGICAL)\n-      || (a->ts.type != BT_LOGICAL && v->ts.type == BT_LOGICAL))\n-    {\n-      gfc_error (\"Argument %qs of %qs intrinsic at %L must be in type \"\n-\t\t \"conformance to argument %qs at %L\",\n-\t\t gfc_current_intrinsic_arg[0]->name,\n-\t\t gfc_current_intrinsic, &a->where,\n-\t\t gfc_current_intrinsic_arg[1]->name, &v->where);\n-    }\n+  /* Check if the type are both character.  */\n+  a1 = a->ts.type == BT_CHARACTER;\n+  v1 = v->ts.type == BT_CHARACTER;\n+  if ((a1 && !v1) || (!a1 && v1))\n+    goto incompat;\n \t \n   d = ap->next->next->expr;\n   m = ap->next->next->next->expr;\n@@ -3988,6 +3989,14 @@ gfc_check_findloc (gfc_actual_arglist *ap)\n     return false;\n \n   return true;\n+\n+incompat:\n+  gfc_error (\"Argument %qs of %qs intrinsic at %L must be in type \"\n+\t     \"conformance to argument %qs at %L\",\n+\t     gfc_current_intrinsic_arg[0]->name,\n+\t     gfc_current_intrinsic, &a->where,\n+\t     gfc_current_intrinsic_arg[1]->name, &v->where);\n+  return false;\n }\n \n "}, {"sha": "cdc717945be2e114bb5e9ce249f175a0366fa97b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa", "patch": "@@ -1,3 +1,8 @@\n+2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/91649\n+\t* gfortran.dg/pr91649.f90: New test.\n+\n 2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91715"}, {"sha": "0e6acb9ac8d3c317438f3bdd39210038a52112d7", "filename": "gcc/testsuite/gfortran.dg/pr91649.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91649.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91649.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91649.f90?ref=e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! PR fortran/91649\n+! Code originally contributed by Gerhard Steinmetz\n+subroutine p\n+   logical :: back = .true.\n+   integer :: x(1) = findloc([1, 2, 1], '1', back=back) ! { dg-error \"must be in type conformance\" }\n+   print *, x\n+end\n+\n+subroutine q\n+   type t\n+   end type\n+   logical :: back = .false.\n+   integer :: x(1) = findloc([1, 2, 1], t(), back=back) ! { dg-error \"must be of intrinsic type\" }\n+   print *, x\n+end\n+\n+subroutine s\n+   character(4) :: c = '1234'\n+   integer :: x(1) = findloc([1, 2, 1], c, back=.true.) ! { dg-error \"must be in type conformance\" }\n+   print *, x\n+end\n+"}]}