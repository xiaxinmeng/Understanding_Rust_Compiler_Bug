{"sha": "d348f172601e946ada34175d77cbccd671d37f18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0OGYxNzI2MDFlOTQ2YWRhMzQxNzVkNzdjYmNjZDY3MWQzN2YxOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-27T18:21:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-27T18:21:12Z"}, "message": "re PR c++/56749 (weird interaction between scoped enum used as non-type template parameter and template lookup)\n\n\tPR c++/56749\n\t* semantics.c (finish_qualified_id_expr): Return early\n\tfor enum scope.\n\nFrom-SVN: r197166", "tree": {"sha": "9ff2b9ed517031d00a7cdbb146cb9afbd55ac77f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ff2b9ed517031d00a7cdbb146cb9afbd55ac77f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d348f172601e946ada34175d77cbccd671d37f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d348f172601e946ada34175d77cbccd671d37f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d348f172601e946ada34175d77cbccd671d37f18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d348f172601e946ada34175d77cbccd671d37f18/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f49b33cb227f01986ddbcc99b4d341ed22c26b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f49b33cb227f01986ddbcc99b4d341ed22c26b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f49b33cb227f01986ddbcc99b4d341ed22c26b62"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "714522e5fd7f0a454d66bdf95a188a2ba73bb5ec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d348f172601e946ada34175d77cbccd671d37f18/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d348f172601e946ada34175d77cbccd671d37f18/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d348f172601e946ada34175d77cbccd671d37f18", "patch": "@@ -1,3 +1,9 @@\n+2013-03-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/56749\n+\t* semantics.c (finish_qualified_id_expr): Return early\n+\tfor enum scope.\n+\n 2013-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* call.c (build_new_method_call_1): Use INDIRECT_REF_P."}, {"sha": "72b884ef2e496ce89ccc055c17ddc62648f4cbfe", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d348f172601e946ada34175d77cbccd671d37f18/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d348f172601e946ada34175d77cbccd671d37f18/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d348f172601e946ada34175d77cbccd671d37f18", "patch": "@@ -1762,6 +1762,10 @@ finish_qualified_id_expr (tree qualifying_class,\n       return expr;\n     }\n \n+  /* No need to check access within an enum.  */\n+  if (TREE_CODE (qualifying_class) == ENUMERAL_TYPE)\n+    return expr;\n+\n   /* Within the scope of a class, turn references to non-static\n      members into expression of the form \"this->...\".  */\n   if (template_arg_p)"}, {"sha": "60996563f49904a4f609e2c95f2f55241400ff39", "filename": "gcc/testsuite/g++.dg/cpp0x/enum24.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d348f172601e946ada34175d77cbccd671d37f18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d348f172601e946ada34175d77cbccd671d37f18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum24.C?ref=d348f172601e946ada34175d77cbccd671d37f18", "patch": "@@ -0,0 +1,57 @@\n+// PR c++/56749\n+// { dg-require-effective-target c++11 }\n+\n+enum normal_enum\n+{\n+    not_scoped1,\n+    not_scoped2\n+};\n+\n+enum class scoped_enum\n+{\n+    scoped1,\n+    scoped2\n+};\n+\n+template <normal_enum N=not_scoped1>\n+class A\n+{\n+public:\n+    template <typename T>\n+        void fun ()\n+        {\n+        }\n+};\n+\n+template <scoped_enum N=scoped_enum::scoped1>\n+class B\n+{\n+public:\n+    template <typename T>\n+        void fun ()\n+        {\n+        }\n+};\n+\n+\n+template <typename T>\n+void tfun ()\n+{\n+    A<> a;\n+    a.fun<char>(); //<------------ THIS IS FINE\n+\n+    B<> b_defaulted;\n+    B<scoped_enum::scoped1> b_explicited;\n+\n+    b_defaulted.fun<char>();          //<------------ UNEXPECTED: THIS FAILS \n+    b_defaulted.template fun<char>(); //<------------ THIS IS FINE\n+\n+    b_explicited.fun<char>();         //<------------ UNEXPECTED: THIS FAILS \n+    b_explicited.template fun<char>();//<------------ THIS IS FINE\n+}\n+\n+int main(int argc, char const *argv[])\n+{\n+    tfun<int>();\n+    return 0;\n+}"}]}