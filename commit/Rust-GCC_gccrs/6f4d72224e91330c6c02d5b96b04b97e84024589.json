{"sha": "6f4d72224e91330c6c02d5b96b04b97e84024589", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0ZDcyMjI0ZTkxMzMwYzZjMDJkNWI5NmIwNGI5N2U4NDAyNDU4OQ==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@cygnus.com", "date": "1998-12-01T21:05:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-12-01T21:05:17Z"}, "message": "c-common.c (declare_function_name): Declare predefinied variable `__func__'.\n\n        * c-common.c (declare_function_name): Declare predefinied variable\n        `__func__'.\n        * c-decl.c (flag_isoc9x): Set to 1 by default.\n        (c_decode_option): Handle -std= option.  Remove -flang-isoc9x.\n        (grokdeclarator): Always emit warning about implicit int for ISO C 9x.\n        * c-parse.in: Allow constructors in ISO C 9x.\n        Rewrite designator list handling.\n        Allow [*] parameters.\n        Don't warn about comma at end of enum definition for ISO C 9x.\n        * cccp.c (c9x): New variable.\n        (rest_extension): New variable.\n        (print_help): Document new -std= option.\n        (main): Recognize -std= option.  Set c9x appropriately.\n        (create_definition): Recognize ISO C 9x vararg macros.\n        * gcc.c (default_compilers): Adjust specs for -std options.\n        (option_map): Add --std.\n        (display_help): Document -std.\n        * toplev.c (documented_lang_options): Add -std and remove\n        -flang-isoc9x.\n        * c-lex.c (yylex): Recognize hex FP constants and call REAL_VALUE_ATOF\n        or REAL_VALUE_HTOF based on base of the constants.\n        * fold-const.c (real_hex_to_f): New function.  Replacement function\n        for hex FP conversion if REAL_ARITHMETIC is not defined.\n        * real.c (asctoeg): Add handling of hex FP constants.\n        * real.h: Define REAL_VALUE_HTOF if necessary using ereal_atof or\n        real_hex_to_f.\n\nCo-Authored-By: Richard Henderson <rth@cygnus.com>\nCo-Authored-By: Stephen L Moshier <moshier@world.std.com>\n\nFrom-SVN: r24049", "tree": {"sha": "8180a32dab64f00b8c46fedcdc5e7b9928102158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8180a32dab64f00b8c46fedcdc5e7b9928102158"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f4d72224e91330c6c02d5b96b04b97e84024589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4d72224e91330c6c02d5b96b04b97e84024589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4d72224e91330c6c02d5b96b04b97e84024589", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4d72224e91330c6c02d5b96b04b97e84024589/comments", "author": null, "committer": null, "parents": [{"sha": "8da31fc17102a9413921d73c8b15834851eba567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da31fc17102a9413921d73c8b15834851eba567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da31fc17102a9413921d73c8b15834851eba567"}], "stats": {"total": 6596, "additions": 3601, "deletions": 2995}, "files": [{"sha": "8f571a34ff1e190557ed622fbd7556e48b3e6e47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -1,3 +1,40 @@\n+Tue Dec  1 20:49:49 1998  Ulrich Drepper  <drepper@cygnus.com>\n+\t\t\t  Stephen L Moshier  <moshier@world.std.com>\n+\t\t\t  Richard Henderson  <rth@cygnus.com>\n+\n+\t* c-common.c (declare_function_name): Declare predefinied variable\n+\t`__func__'.\n+\n+\t* c-decl.c (flag_isoc9x): Set to 1 by default.\n+\t(c_decode_option): Handle -std= option.  Remove -flang-isoc9x.\n+\t(grokdeclarator): Always emit warning about implicit int for ISO C 9x.\n+\n+\t* c-parse.in: Allow constructors in ISO C 9x.\n+\tRewrite designator list handling.\n+\tAllow [*] parameters.\n+\tDon't warn about comma at end of enum definition for ISO C 9x.\n+\n+\t* cccp.c (c9x): New variable.\n+\t(rest_extension): New variable.\n+\t(print_help): Document new -std= option.\n+\t(main): Recognize -std= option.  Set c9x appropriately.\n+\t(create_definition): Recognize ISO C 9x vararg macros.\n+\n+\t* gcc.c (default_compilers): Adjust specs for -std options.\n+\t(option_map): Add --std.\n+\t(display_help): Document -std.\n+\n+\t* toplev.c (documented_lang_options): Add -std and remove\n+\t-flang-isoc9x.\n+        \n+\t* c-lex.c (yylex): Recognize hex FP constants and call REAL_VALUE_ATOF\n+\tor REAL_VALUE_HTOF based on base of the constants.\n+\t* fold-const.c (real_hex_to_f): New function.  Replacement function\n+\tfor hex FP conversion if REAL_ARITHMETIC is not defined.\n+\t* real.c (asctoeg): Add handling of hex FP constants.\n+\t* real.h: Define REAL_VALUE_HTOF if necessary using ereal_atof or\n+\treal_hex_to_f.\n+\n Tue Dec  1 16:45:49 1998  Stan Cox  <scox@cygnus.com>\n \n \t* mips.md (divmodsi4*, divmoddi4*, udivmodsi4*, udivmoddi4): Add"}, {"sha": "cfa4b78ba2aecff85d60dc6cbff1591c52639e1b", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -164,7 +164,7 @@ c_expand_start_else ()\n   expand_start_else ();\n }\n \n-/* Make bindings for __FUNCTION__ and __PRETTY_FUNCTION__.  */\n+/* Make bindings for __FUNCTION__, __PRETTY_FUNCTION__, and __func__.  */\n \n void\n declare_function_name ()\n@@ -188,6 +188,9 @@ declare_function_name ()\n \n   declare_hidden_char_array (\"__FUNCTION__\", name);\n   declare_hidden_char_array (\"__PRETTY_FUNCTION__\", printable_name);\n+  /* The ISO C people \"of course\" couldn't use __FUNCTION__ in the\n+     ISO C 9x standard; instead a new variable is invented.  */\n+  declare_hidden_char_array (\"__func__\", name);\n }\n \n static void"}, {"sha": "c089836364246a98cd5e97ff1abf0311063f1375", "filename": "gcc/c-decl.c", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -470,7 +470,7 @@ int flag_traditional;\n \n /* Nonzero means use the ISO C9x dialect of C.  */\n \n-int flag_isoc9x = 0;\n+int flag_isoc9x = 1;\n \n /* Nonzero means that we have builtin functions, and main is an int */\n \n@@ -652,8 +652,54 @@ c_decode_option (argc, argv)\n       flag_traditional = 0;\n       flag_writable_strings = 0;\n     }\n-  else if (!strcmp (p, \"-flang-isoc9x\"))\n-    flag_isoc9x = 1;\n+  else if (!strncmp (p, \"-std=\", 5))\n+    {\n+      /* Select the appropriate language standard.  We currently\n+\t recognize:\n+\t -std=iso9899:1990\tsame as -ansi\n+\t -std=gnu\t\tdefault\n+\t -std=iso9899:199409\tISO C as modified in amend. 1\n+\t -std=iso9899:199x\tISO C 9x\n+\t -std=c89\t\tsame as -std=iso9899:1990\n+\t -std=c9x\t\tsame as -std=iso9899:199x\n+      */\n+      const char *argstart = &p[5];\n+\n+      if (!strcmp (argstart, \"iso9899:1990\")\n+\t  || !strcmp (argstart, \"c89\"))\n+\t{\n+\tiso_1990:\n+\t  flag_traditional = 0;\n+\t  flag_writable_strings = 0;\n+\t  flag_no_asm = 1;\n+\t  flag_no_nonansi_builtin = 1;\n+\t  flag_isoc9x = 0;\n+\t}\n+      else if (!strcmp (argstart, \"iso9899:199409\"))\n+\t{\n+\t  /* ??? The changes since ISO C 1990 are not supported.  */\n+\t  goto iso_1990;\n+\t}\n+      else if (!strcmp (argstart, \"iso9899:199x\")\n+\t       || !strcmp (argstart, \"c9x\"))\n+\t{\n+\t  flag_traditional = 0;\n+\t  flag_writable_strings = 0;\n+\t  flag_no_asm = 1;\n+\t  flag_no_nonansi_builtin = 1;\n+\t  flag_isoc9x = 1;\n+\t}\n+      else if (!strcmp (argstart, \"gnu\"))\n+\t{\n+\t  flag_traditional = 0;\n+\t  flag_writable_strings = 0;\n+\t  flag_no_asm = 0;\n+\t  flag_no_nonansi_builtin = 0;\n+\t  flag_isoc9x = 1;\n+\t}\n+      else\n+\terror (\"unknown C standard `%s'\", argstart);\n+    }\n   else if (!strcmp (p, \"-fdollars-in-identifiers\"))\n     dollars_in_ident = 1;\n   else if (!strcmp (p, \"-fno-dollars-in-identifiers\"))\n@@ -703,7 +749,7 @@ c_decode_option (argc, argv)\n   else if (!strcmp (p, \"-fident\"))\n     flag_no_ident = 0;\n   else if (!strcmp (p, \"-ansi\"))\n-    flag_no_asm = 1, flag_no_nonansi_builtin = 1;\n+    goto iso_1990;\n   else if (!strcmp (p, \"-Werror-implicit-function-declaration\"))\n     mesg_implicit_function_declaration = 2;\n   else if (!strcmp (p, \"-Wimplicit-function-declaration\"))\n@@ -4492,13 +4538,12 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  && ! (specbits & (1 << (int) RID_TYPEDEF) && initialized)\n \t  && ! (in_system_header && ! allocation_temporary_p ()))\n \t{\n-\t  /* C9x will probably require a diagnostic here.\n-\t     For now, issue a warning if -Wreturn-type and this is a function,\n-\t     or if -Wimplicit; prefer the former warning since it is more\n-\t     explicit.  */\n+\t  /* Issue a warning if this is an ISO C 9x program or if -Wreturn-type\n+\t     and this is a function, or if -Wimplicit; prefer the former\n+\t     warning since it is more explicit.  */\n \t  if ((warn_implicit_int || warn_return_type) && funcdef_flag)\n \t    warn_about_return_type = 1;\n-\t  else if (warn_implicit_int)\n+\t  else if (warn_implicit_int || flag_isoc9x)\n \t    warning (\"type defaults to `int' in declaration of `%s'\", name);\n \t}\n "}, {"sha": "8ba053f55f12d4ba9ed75fd1012112f08f9e3a3e", "filename": "gcc/c-lex.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -1333,8 +1333,8 @@ yylex ()\n \tint parts[TOTAL_PARTS];\n \tint overflow = 0;\n \n-\tenum anon1 { NOT_FLOAT, AFTER_POINT, TOO_MANY_POINTS} floatflag\n-\t  = NOT_FLOAT;\n+\tenum anon1 { NOT_FLOAT, AFTER_POINT, TOO_MANY_POINTS, AFTER_EXPON}\n+\t  floatflag = NOT_FLOAT;\n \n \tfor (count = 0; count < TOTAL_PARTS; count++)\n \t  parts[count] = 0;\n@@ -1370,12 +1370,12 @@ yylex ()\n \t  {\n \t    if (c == '.')\n \t      {\n-\t\tif (base == 16)\n+\t\tif (base == 16 && pedantic)\n \t\t  error (\"floating constant may not be in radix 16\");\n \t\tif (floatflag == TOO_MANY_POINTS)\n \t\t  /* We have already emitted an error.  Don't need another.  */\n \t\t  ;\n-\t\telse if (floatflag == AFTER_POINT)\n+\t\telse if (floatflag == AFTER_POINT || floatflag == AFTER_EXPON)\n \t\t  {\n \t\t    error (\"malformed floating constant\");\n \t\t    floatflag = TOO_MANY_POINTS;\n@@ -1386,6 +1386,7 @@ yylex ()\n \t\telse\n \t\t  floatflag = AFTER_POINT;\n \n+\t\tif (base == 8)\n \t\tbase = 10;\n \t\t*p++ = c = GETC();\n \t\t/* Accept '.' as the start of a floating-point number\n@@ -1425,12 +1426,17 @@ yylex ()\n \t\t    if (c == 'e' || c == 'E')\n \t\t      {\n \t\t\tbase = 10;\n-\t\t\tfloatflag = AFTER_POINT;\n+\t\t\tfloatflag = AFTER_EXPON;\n \t\t\tbreak;   /* start of exponent */\n \t\t      }\n \t\t    error (\"nondigits in number and not hexadecimal\");\n \t\t    c = 0;\n \t\t  }\n+\t\telse if (base == 16 && (c == 'p' || c == 'P'))\n+\t\t  {\n+\t\t    floatflag = AFTER_EXPON;\n+\t\t    break;   /* start of exponent */\n+\t\t  }\n \t\telse if (c >= 'a')\n \t\t  {\n \t\t    c = c - 'a' + 10;\n@@ -1487,7 +1493,8 @@ yylex ()\n \n \t    /* Read explicit exponent if any, and put it in tokenbuf.  */\n \n-\t    if ((c == 'e') || (c == 'E'))\n+\t    if ((base == 10 && ((c == 'e') || (c == 'E')))\n+\t\t|| (base == 16 && (c == 'p' || c == 'P')))\n \t      {\n \t\tif (p >= token_buffer + maxtoken - 3)\n \t\t  p = extend_token_buffer (p);\n@@ -1498,6 +1505,7 @@ yylex ()\n \t\t    *p++ = c;\n \t\t    c = GETC();\n \t\t  }\n+\t\t/* Exponent is decimal, even if string is a hex float.  */\n \t\tif (! ISDIGIT (c))\n \t\t  error (\"floating constant exponent has no digits\");\n \t        while (ISDIGIT (c))\n@@ -1508,6 +1516,8 @@ yylex ()\n \t\t    c = GETC();\n \t\t  }\n \t      }\n+\t    if (base == 16 && floatflag != AFTER_EXPON)\n+\t      error (\"hexadecimal floating constant has no exponent\");\n \n \t    *p = 0;\n \n@@ -1580,10 +1590,13 @@ yylex ()\n \n \t\t    type = float_type_node;\n \t\t    errno = 0;\n+\t\t    if (base == 16)\n+\t\t      value = REAL_VALUE_HTOF (copy, TYPE_MODE (type));\n+\t\t    else\n \t\t    value = REAL_VALUE_ATOF (copy, TYPE_MODE (type));\n \t\t    conversion_errno = errno;\n \t\t    /* A diagnostic is required here by some ANSI C testsuites.\n-\t\t       This is not pedwarn, become some people don't want\n+\t\t       This is not pedwarn, because some people don't want\n \t\t       an error for this.  */\n \t\t    if (REAL_VALUE_ISINF (value) && pedantic)\n \t\t      warning (\"floating point number exceeds range of `float'\");\n@@ -1592,6 +1605,9 @@ yylex ()\n \t\t  {\n \t\t    type = long_double_type_node;\n \t\t    errno = 0;\n+\t\t    if (base == 16)\n+\t\t      value = REAL_VALUE_HTOF (copy, TYPE_MODE (type));\n+\t\t    else\n \t\t    value = REAL_VALUE_ATOF (copy, TYPE_MODE (type));\n \t\t    conversion_errno = errno;\n \t\t    if (REAL_VALUE_ISINF (value) && pedantic)\n@@ -1600,6 +1616,9 @@ yylex ()\n \t\telse\n \t\t  {\n \t\t    errno = 0;\n+\t\t    if (base == 16)\n+\t\t      value = REAL_VALUE_HTOF (copy, TYPE_MODE (type));\n+\t\t    else\n \t\t    value = REAL_VALUE_ATOF (copy, TYPE_MODE (type));\n \t\t    conversion_errno = errno;\n \t\t    if (REAL_VALUE_ISINF (value) && pedantic)"}, {"sha": "47e11a6e171f2714cef112146ff0665570627d92", "filename": "gcc/c-parse.c", "status": "modified", "additions": 1176, "deletions": 1123, "changes": 2299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589"}, {"sha": "c0bf10798ee39e63bfdab97fbf32d31d0f6a56df", "filename": "gcc/c-parse.in", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -525,7 +525,7 @@ cast_expr:\n \t\t  tree type = $2;\n \t\t  finish_init ();\n \n-\t\t  if (pedantic)\n+\t\t  if (pedantic && ! flag_isoc9x)\n \t\t    pedwarn (\"ANSI C forbids constructor expressions\");\n \t\t  if (TYPE_NAME (type) != 0)\n \t\t    {\n@@ -1275,33 +1275,41 @@ initlist1:\n /* `initelt' is a single element of an initializer.\n    It may use braces.  */\n initelt:\n-\texpr_no_commas\n-\t\t{ process_init_element ($1); }\n-\t| '{' \n+\t  designator_list '=' initval\n+\t| designator initval\n+\t| identifier ':'\n+\t\t{ set_init_label ($1); }\n+\t  initval\n+\t| initval\n+\t;\n+\n+initval:\n+\t  '{'\n \t\t{ push_init_level (0); }\n \t  initlist_maybe_comma '}'\n \t\t{ process_init_element (pop_init_level (0)); }\n+\t| expr_no_commas\n+\t\t{ process_init_element ($1); }\n \t| error\n+\t;\n+\n+designator_list:\n+\t  designator\n+\t| designator_list designator\n+\t;\n+\n+designator:\n+\t  '.' identifier\n+\t\t{ set_init_label ($2); }\n \t/* These are for labeled elements.  The syntax for an array element\n \t   initializer conflicts with the syntax for an Objective-C message,\n \t   so don't include these productions in the Objective-C grammar.  */\n ifc\n-\t| '[' expr_no_commas ELLIPSIS expr_no_commas ']' '='\n+\t| '[' expr_no_commas ELLIPSIS expr_no_commas ']'\n \t\t{ set_init_index ($2, $4); }\n-\t  initelt\n-\t| '[' expr_no_commas ']' '='\n-\t\t{ set_init_index ($2, NULL_TREE); }\n-\t  initelt\n \t| '[' expr_no_commas ']'\n \t\t{ set_init_index ($2, NULL_TREE); }\n-\t  initelt\n end ifc\n-\t| identifier ':'\n-\t\t{ set_init_label ($1); }\n-\t  initelt\n-\t| '.' identifier '='\n-\t\t{ set_init_label ($2); }\n-\t  initelt\n \t;\n \f\n nested_function:\n@@ -1398,6 +1406,13 @@ parm_declarator:\n /*\t| parm_declarator '(' error ')'  %prec '.'\n \t\t{ $$ = build_nt (CALL_EXPR, $1, NULL_TREE, NULL_TREE);\n \t\t  poplevel (0, 0, 0); }  */\n+ifc\n+\t| parm_declarator '[' '*' ']'  %prec '.'\n+\t\t{ $$ = build_nt (ARRAY_REF, $1, NULL_TREE);\n+\t\t  if (! flag_isoc9x)\n+\t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 9x\");\n+\t\t}\n+end ifc\n \t| parm_declarator '[' expr ']'  %prec '.'\n \t\t{ $$ = build_nt (ARRAY_REF, $1, $3); }\n \t| parm_declarator '[' ']'  %prec '.'\n@@ -1427,6 +1442,13 @@ notype_declarator:\n \t\t{ $$ = $2; }\n \t| '*' type_quals notype_declarator  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n+ifc\n+\t| notype_declarator '[' '*' ']'  %prec '.'\n+\t\t{ $$ = build_nt (ARRAY_REF, $1, NULL_TREE);\n+\t\t  if (! flag_isoc9x)\n+\t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 9x\");\n+\t\t}\n+end ifc\n \t| notype_declarator '[' expr ']'  %prec '.'\n \t\t{ $$ = build_nt (ARRAY_REF, $1, $3); }\n \t| notype_declarator '[' ']'  %prec '.'\n@@ -1509,7 +1531,8 @@ maybecomma:\n maybecomma_warn:\n \t  /* empty */\n \t| ','\n-\t\t{ if (pedantic) pedwarn (\"comma at end of enumerator list\"); }\n+\t\t{ if (pedantic && ! flag_isoc9x)\n+\t\t    pedwarn (\"comma at end of enumerator list\"); }\n \t;\n \n component_decl_list:"}, {"sha": "aa5a5b4ae1421eb280a94d6f23fef01e6b565169", "filename": "gcc/c-parse.y", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -480,7 +480,7 @@ cast_expr:\n \t\t  tree type = $2;\n \t\t  finish_init ();\n \n-\t\t  if (pedantic)\n+\t\t  if (pedantic && ! flag_isoc9x)\n \t\t    pedwarn (\"ANSI C forbids constructor expressions\");\n \t\t  if (TYPE_NAME (type) != 0)\n \t\t    {\n@@ -1109,31 +1109,39 @@ initlist1:\n /* `initelt' is a single element of an initializer.\n    It may use braces.  */\n initelt:\n-\texpr_no_commas\n-\t\t{ process_init_element ($1); }\n-\t| '{' \n+\t  designator_list '=' initval\n+\t| designator initval\n+\t| identifier ':'\n+\t\t{ set_init_label ($1); }\n+\t  initval\n+\t| initval\n+\t;\n+\n+initval:\n+\t  '{'\n \t\t{ push_init_level (0); }\n \t  initlist_maybe_comma '}'\n \t\t{ process_init_element (pop_init_level (0)); }\n+\t| expr_no_commas\n+\t\t{ process_init_element ($1); }\n \t| error\n+\t;\n+\n+designator_list:\n+\t  designator\n+\t| designator_list designator\n+\t;\n+\n+designator:\n+\t  '.' identifier\n+\t\t{ set_init_label ($2); }\n \t/* These are for labeled elements.  The syntax for an array element\n \t   initializer conflicts with the syntax for an Objective-C message,\n \t   so don't include these productions in the Objective-C grammar.  */\n-\t| '[' expr_no_commas ELLIPSIS expr_no_commas ']' '='\n+\t| '[' expr_no_commas ELLIPSIS expr_no_commas ']'\n \t\t{ set_init_index ($2, $4); }\n-\t  initelt\n-\t| '[' expr_no_commas ']' '='\n-\t\t{ set_init_index ($2, NULL_TREE); }\n-\t  initelt\n \t| '[' expr_no_commas ']'\n \t\t{ set_init_index ($2, NULL_TREE); }\n-\t  initelt\n-\t| identifier ':'\n-\t\t{ set_init_label ($1); }\n-\t  initelt\n-\t| '.' identifier '='\n-\t\t{ set_init_label ($2); }\n-\t  initelt\n \t;\n \f\n nested_function:\n@@ -1227,6 +1235,11 @@ parm_declarator:\n /*\t| parm_declarator '(' error ')'  %prec '.'\n \t\t{ $$ = build_nt (CALL_EXPR, $1, NULL_TREE, NULL_TREE);\n \t\t  poplevel (0, 0, 0); }  */\n+\t| parm_declarator '[' '*' ']'  %prec '.'\n+\t\t{ $$ = build_nt (ARRAY_REF, $1, NULL_TREE);\n+\t\t  if (! flag_isoc9x)\n+\t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 9x\");\n+\t\t}\n \t| parm_declarator '[' expr ']'  %prec '.'\n \t\t{ $$ = build_nt (ARRAY_REF, $1, $3); }\n \t| parm_declarator '[' ']'  %prec '.'\n@@ -1256,6 +1269,11 @@ notype_declarator:\n \t\t{ $$ = $2; }\n \t| '*' type_quals notype_declarator  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n+\t| notype_declarator '[' '*' ']'  %prec '.'\n+\t\t{ $$ = build_nt (ARRAY_REF, $1, NULL_TREE);\n+\t\t  if (! flag_isoc9x)\n+\t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 9x\");\n+\t\t}\n \t| notype_declarator '[' expr ']'  %prec '.'\n \t\t{ $$ = build_nt (ARRAY_REF, $1, $3); }\n \t| notype_declarator '[' ']'  %prec '.'\n@@ -1338,7 +1356,8 @@ maybecomma:\n maybecomma_warn:\n \t  /* empty */\n \t| ','\n-\t\t{ if (pedantic) pedwarn (\"comma at end of enumerator list\"); }\n+\t\t{ if (pedantic && ! flag_isoc9x)\n+\t\t    pedwarn (\"comma at end of enumerator list\"); }\n \t;\n \n component_decl_list:"}, {"sha": "f09709dc94c0d6660265de0f5312eb2e315e8dd2", "filename": "gcc/cccp.c", "status": "modified", "additions": 65, "deletions": 14, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -285,6 +285,10 @@ int traditional;\n \n int c89;\n \n+/* Nonzero for the 199x C Standard.  */\n+\n+int c9x;\n+\n /* Nonzero causes output not to be done,\n    but directives such as #define that have side effects\n    are still obeyed.  */\n@@ -604,6 +608,11 @@ union hashval {\n static char rest_extension[] = \"...\";\n #define REST_EXTENSION_LENGTH\t(sizeof (rest_extension) - 1)\n \n+/* This is the implicit parameter name when using variable number of\n+   parameters for macros using the ISO C 9x extension.  */\n+static char va_args_name[] = \"__VA_ARGS__\";\n+#define VA_ARGS_NAME_LENGTH\t(sizeof (va_args_name) - 1)\n+\n /* The structure of a node in the hash table.  The hash table\n    has entries for all tokens defined by #define directives (type T_MACRO),\n    plus some special tokens like __LINE__ (these each have their own\n@@ -1156,12 +1165,15 @@ print_help ()\n   printf (\"  -traditional              Follow K&R pre-processor behaviour\\n\");\n   printf (\"  -trigraphs                Support ANSI C trigraphs\\n\");\n   printf (\"  -lang-c                   Assume that the input sources are in C\\n\");\n-  printf (\"  -lang-c89                 Assume that the input sources are in C89\\n\");\n+  printf (\"  -lang-c89                 Assume that the input is C89; depricated\\n\");\n   printf (\"  -lang-c++                 Assume that the input sources are in C++\\n\");\n   printf (\"  -lang-objc                Assume that the input sources are in ObjectiveC\\n\");\n   printf (\"  -lang-objc++              Assume that the input sources are in ObjectiveC++\\n\");\n   printf (\"  -lang-asm                 Assume that the input sources are in assembler\\n\");\n   printf (\"  -lang-chill               Assume that the input sources are in Chill\\n\");\n+  printf (\"  -std=<std name>           Specify the conformance standard; one of:\\n\");\n+  printf (\"                            gnu, c89, c9x, iso9899:1990,\\n\");\n+  printf (\"                            iso9899:199409, iso9899:199x\\n\");\n   printf (\"  -+                        Allow parsing of C++ style features\\n\");\n   printf (\"  -w                        Inhibit warning messages\\n\");\n   printf (\"  -Wtrigraphs               Warn if trigraphs are encountered\\n\");\n@@ -1460,25 +1472,36 @@ main (argc, argv)\n \n       case 'l':\n \tif (! strcmp (argv[i], \"-lang-c\"))\n-\t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, objc = 0;\n-\tif (! strcmp (argv[i], \"-lang-c89\"))\n-\t  cplusplus = 0, cplusplus_comments = 0, c89 = 1, objc = 0;\n-\tif (! strcmp (argv[i], \"-lang-c++\"))\n-\t  cplusplus = 1, cplusplus_comments = 1, c89 = 0, objc = 0;\n-\tif (! strcmp (argv[i], \"-lang-objc\"))\n-\t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, objc = 1;\n-\tif (! strcmp (argv[i], \"-lang-objc++\"))\n-\t  cplusplus = 1, cplusplus_comments = 1, c89 = 0, objc = 1;\n- \tif (! strcmp (argv[i], \"-lang-asm\"))\n+\t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 1, objc = 0;\n+\telse if (! strcmp (argv[i], \"-lang-c89\"))\n+\t  cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+\telse if (! strcmp (argv[i], \"-lang-c++\"))\n+\t  cplusplus = 1, cplusplus_comments = 1, c89 = 0, c9x = 0, objc = 0;\n+\telse if (! strcmp (argv[i], \"-lang-objc\"))\n+\t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 0, objc = 1;\n+\telse if (! strcmp (argv[i], \"-lang-objc++\"))\n+\t  cplusplus = 1, cplusplus_comments = 1, c89 = 0, c9x = 0, objc = 1;\n+ \telse if (! strcmp (argv[i], \"-lang-asm\"))\n  \t  lang_asm = 1;\n- \tif (! strcmp (argv[i], \"-lint\"))\n+ \telse if (! strcmp (argv[i], \"-lint\"))\n  \t  for_lint = 1;\n \tbreak;\n \n       case '+':\n \tcplusplus = 1, cplusplus_comments = 1;\n \tbreak;\n \n+      case 's':\n+\tif (!strcmp (argv[i], \"-std=iso9899:1990\")\n+\t    || !strcmp (argv[i], \"-std=iso9899:199409\")\n+\t    || !strcmp (argv[i], \"-std=c89\"))\n+\t  cplusplus = 0, cplusplus_comments = 0, c89 = 1, c9x = 0, objc = 0;\n+        else if (!strcmp (argv[i], \"-std=iso9899:199x\")\n+\t\t || !strcmp (argv[i], \"-std=c9x\")\n+\t\t || !strcmp (argv[i], \"-std=gnu\"))\n+\t  cplusplus = 0, cplusplus_comments = 1, c89 = 0, c9x = 1, objc = 0;\n+\tbreak;\n+\n       case 'w':\n \tinhibit_warnings = 1;\n \tbreak;\n@@ -5800,7 +5823,18 @@ create_definition (buf, limit, op)\n \t\t rest_extension);\n \n       if (!is_idstart[*bp])\n+\t{\n+\t  if (c9x && limit - bp > (long) REST_EXTENSION_LENGTH\n+\t      && bcmp (rest_extension, bp, REST_EXTENSION_LENGTH) == 0)\n+\t    {\n+\t      /* This is the ISO C 9x way to write macros with variable\n+\t\t number of arguments.  */\n+\t      rest_args = 1;\n+\t      temp->rest_args = 1;\n+\t    }\n+\t  else\n \tpedwarn (\"invalid character in macro parameter name\");\n+\t}\n       \n       /* Find the end of the arg name.  */\n       while (is_idchar[*bp]) {\n@@ -5815,6 +5849,13 @@ create_definition (buf, limit, op)\n \t  break;\n \t}\n       }\n+      if (bp == temp->name && rest_args == 1)\n+\t{\n+\t  /* This is the ISO C 9x style.  */\n+\t  temp->name = va_args_name;\n+\t  temp->length = VA_ARGS_NAME_LENGTH;\n+\t}\n+      else\n       temp->length = bp - temp->name;\n       if (rest_args == 1)\n \tbp += REST_EXTENSION_LENGTH;\n@@ -5828,7 +5869,9 @@ create_definition (buf, limit, op)\n \tbp++;\n \tSKIP_WHITE_SPACE (bp);\n \t/* A comma at this point can only be followed by an identifier.  */\n-\tif (!is_idstart[*bp]) {\n+\tif (!is_idstart[*bp]\n+\t    && (c9x && limit - bp <= (long) REST_EXTENSION_LENGTH\n+\t\t||  bcmp (rest_extension, bp, REST_EXTENSION_LENGTH) != 0)) {\n \t  error (\"badly punctuated parameter list in `#define'\");\n \t  goto nope;\n \t}\n@@ -5842,11 +5885,19 @@ create_definition (buf, limit, op)\n \n \tfor (otemp = temp->next; otemp != NULL; otemp = otemp->next)\n \t  if (temp->length == otemp->length\n-\t      && bcmp (temp->name, otemp->name, temp->length) == 0) {\n+\t      && bcmp (temp->name, otemp->name, temp->length) == 0)\n+\t    {\n \t      error (\"duplicate argument name `%.*s' in `#define'\",\n \t\t     temp->length, temp->name);\n \t      goto nope;\n \t  }\n+\tif (rest_args == 0 && temp->length == VA_ARGS_NAME_LENGTH\n+\t    && bcmp (temp->name, va_args_name, VA_ARGS_NAME_LENGTH) == 0)\n+\t  {\n+\t    error (\"\\\n+reserved name `%s' used as argument name in `#define'\", va_args_name);\n+\t    goto nope;\n+\t  }\n       }\n     }\n "}, {"sha": "c1cd7889db589603883630f37e175847b4315137", "filename": "gcc/extend.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -33,6 +33,7 @@ C++ Language}, for extensions that apply @emph{only} to C++.\n * Conditionals::        Omitting the middle operand of a @samp{?:} expression.\n * Long Long::\t\tDouble-word integers---@code{long long int}.\n * Complex::             Data types for complex numbers.\n+* Hex Floats::          Hexadecimal floating-point constants.\n * Zero Length::         Zero-length arrays.\n * Variable Length::     Arrays whose length is computed at run time.\n * Macro Varargs::\tMacros with variable number of arguments.\n@@ -78,6 +79,7 @@ C++ Language}, for extensions that apply @emph{only} to C++.\n * Conditionals::        Omitting the middle operand of a @samp{?:} expression.\n * Long Long::\t\tDouble-word integers---@code{long long int}.\n * Complex::             Data types for complex numbers.\n+* Hex Floats::          Hexadecimal floating-point constants.\n * Zero Length::         Zero-length arrays.\n * Variable Length::     Arrays whose length is computed at run time.\n * Macro Varargs::\tMacros with variable number of arguments.\n@@ -791,6 +793,22 @@ examine and set these two fictitious variables with your debugger.\n A future version of GDB will know how to recognize such pairs and treat\n them as a single variable with a complex type.\n \n+@node Hex Floats\n+GNU CC recognizes floating-point numbers written not only in the usual\n+decimal notation, such as @code{1.55e1}, but also numbers such as\n+@code{0x1.fp3} written in hexadecimal format.  In that format the\n+@code{0x} hex introducer and the @code{p} or @code{P} exponent field are\n+mandatory.  The exponent is a decimal number that indicates the power of\n+2 by which the significand part will be multiplied.  Thus @code{0x1.f} is\n+1 15/16, @code{p3} multiplies it by 8, and the value of @code{0x1.fp3}\n+is the same as @code{1.55e1}.\n+\n+Unlike for floating-point numbers in the decimal notation the exponent\n+is always required in the hexadecimal notation.  Otherwise the compiler\n+would not be able to resolve the ambiguity of, e.g., @code{0x1.f}.  This\n+could mean @code{1.0f} or @code{1.9375} since @code{f} is also the\n+extension for floating-point constants of type @code{float}.\n+\n @node Zero Length\n @section Arrays of Length Zero\n @cindex arrays of length zero"}, {"sha": "0937d74af0cf63650d6ded758858e4cefe8df94d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -964,6 +964,235 @@ exact_real_inverse (mode, r)\n   *r = y.d;\n   return 1;\n }\n+\n+\n+/* Convert C9X hexadecimal floating point string constant S.  Return\n+   real value type in mode MODE.  This function uses the host computer's\n+   fp arithmetic when there is no REAL_ARITHMETIC.  */\n+\n+REAL_VALUE_TYPE\n+real_hex_to_f (s, mode)\n+   char *s;\n+   enum machine_mode mode;\n+{\n+   REAL_VALUE_TYPE ip;\n+   char *p = s;\n+   unsigned HOST_WIDE_INT low, high;\n+   int frexpon, expon, shcount, nrmcount, k;\n+   int sign, expsign, decpt, isfloat, isldouble, gotp, lost;\n+   char c;\n+\n+   isldouble = 0;\n+   isfloat = 0;\n+   frexpon = 0;\n+   expon = 0;\n+   expsign = 1;\n+   ip = 0.0;\n+\n+   while (*p == ' ' || *p == '\\t')\n+     ++p;\n+\n+   /* Sign, if any, comes first.  */\n+   sign = 1;\n+   if (*p == '-')\n+     {\n+       sign = -1;\n+       ++p;\n+     }\n+\n+   /* The string is supposed to start with 0x or 0X .  */\n+   if (*p == '0')\n+     {\n+       ++p;\n+       if (*p == 'x' || *p == 'X')\n+\t ++p;\n+       else\n+\t abort ();\n+     }\n+   else\n+     abort ();\n+\n+   while (*p == '0')\n+     ++p;\n+\n+   high = 0;\n+   low = 0;\n+   lost = 0; /* Nonzero low order bits shifted out and discarded.  */\n+   frexpon = 0;  /* Bits after the decimal point.  */\n+   expon = 0;  /* Value of exponent.  */\n+   decpt = 0;  /* How many decimal points.  */\n+   gotp = 0;  /* How many P's.  */\n+   shcount = 0;\n+   while ((c = *p) != '\\0')\n+     {\n+       if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F')\n+\t   || (c >= 'a' && c <= 'f'))\n+\t {\n+\t   k = c & 0x7f;\n+\t   if (k >= 'a')\n+\t     k = k - 'a' + 10;\n+\t   else if (k >= 'A')\n+\t     k = k - 'A' + 10;\n+\t   else\n+\t     k = k - '0';\n+\n+\t   if ((high & 0xf0000000) == 0)\n+\t     {\n+\t       high = (high << 4) + ((low >> 28) & 15);\n+\t       low = (low << 4) + k;\n+\t       shcount += 4;\n+\t       if (decpt)\n+\t\t frexpon += 4;\n+\t     }\n+\t   else\n+\t     {\n+\t       /* Record nonzero lost bits.  */\n+\t       lost |= k;\n+\t       if (!decpt)\n+\t\t frexpon -= 4;\n+\t     }\n+\t   ++p;\n+\t }\n+       else if ( c == '.')\n+\t {\n+\t   ++decpt;\n+\t   ++p;\n+\t }\n+       else if (c == 'p' || c == 'P')\n+\t {\n+\t   ++gotp;\n+\t   ++p;\n+\t   /* Sign of exponent.  */\n+\t   if (*p == '-')\n+\t     {\n+\t       expsign = -1;\n+\t       ++p;\n+\t     }\n+\t   /* Value of exponent.\n+\t      The exponent field is a decimal integer.  */\n+\t   while (isdigit(*p))\n+\t     {\n+\t       k = (*p++ & 0x7f) - '0';\n+\t       expon = 10 * expon + k;\n+\t     }\n+\t   expon *= expsign;\n+\t   /* F suffix is ambiguous in the significand part\n+\t      so it must appear after the decimal exponent field.  */\n+\t   if (*p == 'f' || *p == 'F')\n+\t     {\n+\t       isfloat = 1;\n+\t       ++p;\n+\t       break;\n+\t     }\n+\t }\n+       else if (c == 'l' || c == 'L')\n+\t {\n+\t   isldouble = 1;\n+\t   ++p;\n+\t   break;\n+\t }\n+       else\n+\t break;\n+     }\n+   /* Abort if last character read was not legitimate.  */\n+   c = *p;\n+   if ((c != '\\0' && c != ' ' && c != '\\n' && c != '\\r') || (decpt > 1))\n+     abort ();\n+   /* There must be either one decimal point or one p.  */\n+   if (decpt == 0 && gotp == 0)\n+     abort ();\n+   shcount -= 4;\n+   if ((high == 0) && (low == 0))\n+     {\n+       return dconst0;\n+     }\n+\n+   /* Normalize.  */\n+   nrmcount = 0;\n+   if (high == 0)\n+     {\n+       high = low;\n+       low = 0;\n+       nrmcount += 32;\n+     }\n+   /* Leave a high guard bit for carry-out.  */\n+   if ((high & 0x80000000) != 0)\n+     {\n+       lost |= low & 1;\n+       low = (low >> 1) | (high << 31);\n+       high = high >> 1;\n+       nrmcount -= 1;\n+     }\n+   if ((high & 0xffff8000) == 0)\n+     {\n+       high = (high << 16) + ((low >> 16) & 0xffff);\n+       low = low << 16;\n+       nrmcount += 16;\n+     }\n+   while ((high & 0xc0000000) == 0)\n+     {\n+       high = (high << 1) + ((low >> 31) & 1);\n+       low = low << 1;\n+       nrmcount += 1;\n+     }\n+   if (isfloat || GET_MODE_SIZE(mode) == UNITS_PER_WORD)\n+     {\n+       /* Keep 24 bits precision, bits 0x7fffff80.\n+\t  Rounding bit is 0x40.  */\n+       lost = lost | low | (high & 0x3f);\n+       low = 0;\n+       if (high & 0x40)\n+\t {\n+\t   if ((high & 0x80) || lost)\n+\t     high += 0x40;\n+\t }\n+       high &= 0xffffff80;\n+     }\n+   else\n+     {\n+       /* We need real.c to do long double formats, so here default\n+\t  to double precision.  */\n+#if HOST_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\n+       /* IEEE double.\n+\t  Keep 53 bits precision, bits 0x7fffffff fffffc00.\n+\t  Rounding bit is low word 0x200.  */\n+       lost = lost | (low & 0x1ff);\n+       if (low & 0x200)\n+\t {\n+\t   if ((low & 0x400) || lost)\n+\t     {\n+\t       low = (low + 0x200) & 0xfffffc00;\n+\t       if (low == 0)\n+\t\t high += 1;\n+\t     }\n+\t }\n+       low &= 0xfffffc00;\n+#else\n+       /* Assume it's a VAX with 56-bit significand,\n+          bits 0x7fffffff ffffff80.  */\n+       lost = lost | (low & 0x7f);\n+       if (low & 0x40)\n+\t {\n+\t   if ((low & 0x80) || lost)\n+\t     {\n+\t       low = (low + 0x40) & 0xffffff80;\n+\t       if (low == 0)\n+\t\t high += 1;\n+\t     }\n+\t }\n+       low &= 0xffffff80;\n+#endif\n+     }\n+   ip = (double) high;\n+   ip =  REAL_VALUE_LDEXP (ip, 32) + (double) low;\n+   /* Apply shifts and exponent value as power of 2.  */\n+   ip = REAL_VALUE_LDEXP (ip, expon - (nrmcount + frexpon));\n+\n+   if (sign < 0)\n+     ip = -ip;\n+   return ip;\n+}\n+\n #endif /* no REAL_ARITHMETIC */\n \f\n /* Split a tree IN into a constant and a variable part"}, {"sha": "7b67bd369f69813a21a22dfe377077151c50b296", "filename": "gcc/gcc.c", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -581,46 +581,48 @@ static struct compiler default_compilers[] =\n   {\"@c\",\n    {\n #if USE_CPPLIB\n-     \"%{E|M|MM:cpp -lang-c%{ansi:89} %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n+     \"%{E|M|MM:cpp -lang-c %(ansi:-std=c89} %{std*} %{nostdinc*}\\\n+\t%{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         -undef -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n-\t%{ansi:-trigraphs -D__STRICT_ANSI__}\\\n-\t%{!undef:%{!ansi:%p} %P} %{trigraphs} \\\n+\t%{ansi|std=*:%{!std=gnu:-trigraphs -D__STRICT_ANSI__}}\\\n+\t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n         %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n \t%{fleading-underscore} %{fno-leading-underscore}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}}\\n}\\\n       %{!E:%{!M:%{!MM:cc1 %i %1 \\\n-                  -lang-c%{ansi:89} %{nostdinc*} %{A*} %{I*} %I\\\n+                  %{std*} %{nostdinc*} %{A*} %{I*} %I\\\n                   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n                   %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n                   -undef -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n-                  %{ansi:-trigraphs -D__STRICT_ANSI__}\\\n-                  %{!undef:%{!ansi:%p} %P} %{trigraphs} \\\n+\t\t  %{ansi|std=*:%{!std=gnu:-trigraphs -D__STRICT_ANSI__}}\\\n+\t\t  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu:%p}} %P} %{trigraphs}\\\n                   %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n                   %{H} %C %{D*} %{U*} %{i*} %Z\\\n                   %{ftraditional:-traditional}\\\n                   %{traditional-cpp:-traditional}\\\n \t\t  %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n \t\t  %{aux-info*}\\\n-\t\t  %{--help:--help} \\\n-\t\t  %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n+\t\t  %{--help:--help}\\\n+\t\t  %{g*} %{O*} %{W*} %{w} %{pedantic*}\\\n \t\t  %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t\t  %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n                   %{!S:as %a %Y\\\n \t\t     %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n                      %{!pipe:%g.s} %A\\n }}}}\"\n   }},\n #else /* ! USE_CPPLIB */\n-    \"cpp -lang-c%{ansi:89} %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n+    \"cpp -lang-c %{ansi:-std=c89} %{std*} %{nostdinc*}\\\n+\t%{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         -undef -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n-\t%{ansi:-trigraphs -D__STRICT_ANSI__}\\\n-\t%{!undef:%{!ansi:%p} %P} %{trigraphs} \\\n+\t%{ansi|std=*:%{!std=gnu:-trigraphs -D__STRICT_ANSI__}}\\\n+\t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n         %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n@@ -629,7 +631,7 @@ static struct compiler default_compilers[] =\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:cc1 %{!pipe:%g.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n-\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n+\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{std*}\\\n \t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n \t\t   %{aux-info*}\\\n \t\t   %{--help:--help} \\\n@@ -641,12 +643,13 @@ static struct compiler default_compilers[] =\n   }},\n #endif /* ! USE_CPPLIB */\n   {\"-\",\n-   {\"%{E:cpp -lang-c%{ansi:89} %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n+   {\"%{E:cpp -lang-c %{ansi:-std=c89} %{std*} %{nostdinc*}\\\n+\t%{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         -undef -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n-\t%{ansi:-trigraphs -D__STRICT_ANSI__}\\\n-\t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n+\t%{ansi|std=*:%{!std=gnu:-trigraphs -D__STRICT_ANSI__}}\\\n+\t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n         %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n@@ -661,8 +664,8 @@ static struct compiler default_compilers[] =\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         -undef -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n-\t %{ansi:-trigraphs -D__STRICT_ANSI__}\\\n-\t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n+\t%{std=*:%{!std=gnu:-trigraphs -D__STRICT_ANSI__}}\\\n+\t%{!undef:%{!std=*:%p}%{std=gnu:%p} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n         %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n@@ -672,7 +675,7 @@ static struct compiler default_compilers[] =\n   {\".i\", {\"@cpp-output\"}},\n   {\"@cpp-output\",\n    {\"%{!M:%{!MM:%{!E:cc1 %i %1 %{!Q:-quiet} %{d*} %{m*} %{a*}\\\n-\t\t\t%{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi}\\\n+\t\t\t%{g*} %{O*} %{W*} %{w} %{pedantic*} %{std*}\\\n \t\t\t%{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n \t\t\t%{aux-info*}\\\n \t\t\t%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n@@ -850,6 +853,7 @@ struct option_map option_map[] =\n    {\"--silent\", \"-q\", 0},\n    {\"--specs\", \"-specs=\", \"aj\"},\n    {\"--static\", \"-static\", 0},\n+   {\"--std\", \"-std=\", \"aj\"},\n    {\"--symbolic\", \"-symbolic\", 0},\n    {\"--target\", \"-b\", \"a\"},\n    {\"--trace-includes\", \"-H\", 0},\n@@ -2454,6 +2458,7 @@ display_help ()\n   printf (\"  -save-temps              Do not delete intermediate files\\n\");\n   printf (\"  -pipe                    Use pipes rather than intermediate files\\n\");\n   printf (\"  -specs=<file>            Override builtin specs with the contents of <file>\\n\");\n+  printf (\"  -std=<standard>          Assume that the input sources are for <standard>\\n\");\n   printf (\"  -B <directory>           Add <directory> to the compiler's search paths\\n\");\n   printf (\"  -b <machine>             Run gcc for target <machine>, if installed\\n\");\n   printf (\"  -V <version>             Run gcc version number <version>, if installed\\n\");"}, {"sha": "9215f1805d5ecc8c5f5cf0b25f44c135b37ea15d", "filename": "gcc/objc/objc-parse.c", "status": "modified", "additions": 1775, "deletions": 1755, "changes": 3530, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fobjc%2Fobjc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fobjc%2Fobjc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589"}, {"sha": "06465f7da3081f17054d9a719a863f486610219a", "filename": "gcc/objc/objc-parse.y", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fobjc%2Fobjc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Fobjc%2Fobjc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.y?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -82,7 +82,7 @@ char *language_string = \"GNU Obj-C\";\n    yylval contains an IDENTIFIER_NODE which indicates which one.  */\n %token TYPESPEC\n \n-/* Reserved words that qualify type: \"const\" or \"volatile\".\n+/* Reserved words that qualify type: \"const\", \"volatile\", or \"restrict\".\n    yylval contains an IDENTIFIER_NODE which indicates which one.  */\n %token TYPE_QUAL\n \n@@ -483,7 +483,7 @@ cast_expr:\n \t\t  tree type = $2;\n \t\t  finish_init ();\n \n-\t\t  if (pedantic)\n+\t\t  if (pedantic && ! flag_isoc9x)\n \t\t    pedwarn (\"ANSI C forbids constructor expressions\");\n \t\t  if (TYPE_NAME (type) != 0)\n \t\t    {\n@@ -1215,22 +1215,35 @@ initlist1:\n /* `initelt' is a single element of an initializer.\n    It may use braces.  */\n initelt:\n-\texpr_no_commas\n-\t\t{ process_init_element ($1); }\n-\t| '{' \n+\t  designator_list '=' initval\n+\t| designator initval\n+\t| identifier ':'\n+\t\t{ set_init_label ($1); }\n+\t  initval\n+\t| initval\n+\t;\n+\n+initval:\n+\t  '{'\n \t\t{ push_init_level (0); }\n \t  initlist_maybe_comma '}'\n \t\t{ process_init_element (pop_init_level (0)); }\n+\t| expr_no_commas\n+\t\t{ process_init_element ($1); }\n \t| error\n+\t;\n+\n+designator_list:\n+\t  designator\n+\t| designator_list designator\n+\t;\n+\n+designator:\n+\t  '.' identifier\n+\t\t{ set_init_label ($2); }\n \t/* These are for labeled elements.  The syntax for an array element\n \t   initializer conflicts with the syntax for an Objective-C message,\n \t   so don't include these productions in the Objective-C grammar.  */\n-\t| identifier ':'\n-\t\t{ set_init_label ($1); }\n-\t  initelt\n-\t| '.' identifier '='\n-\t\t{ set_init_label ($2); }\n-\t  initelt\n \t;\n \f\n nested_function:\n@@ -1436,7 +1449,8 @@ maybecomma:\n maybecomma_warn:\n \t  /* empty */\n \t| ','\n-\t\t{ if (pedantic) pedwarn (\"comma at end of enumerator list\"); }\n+\t\t{ if (pedantic && ! flag_isoc9x)\n+\t\t    pedwarn (\"comma at end of enumerator list\"); }\n \t;\n \n component_decl_list:"}, {"sha": "cb3a3eb75d21edcaae60d944e9749453f0ec1789", "filename": "gcc/real.c", "status": "modified", "additions": 73, "deletions": 17, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -680,9 +680,9 @@ etruncui (x)\n }\n \n \n-/* This is the REAL_VALUE_ATOF function.  It converts a decimal string to\n-   binary, rounding off as indicated by the machine_mode argument.  Then it\n-   promotes the rounded value to REAL_VALUE_TYPE.  */\n+/* This is the REAL_VALUE_ATOF function.  It converts a decimal or hexadecimal\n+   string to binary, rounding off as indicated by the machine_mode argument.\n+   Then it promotes the rounded value to REAL_VALUE_TYPE.  */\n \n REAL_VALUE_TYPE \n ereal_atof (s, t)\n@@ -5058,7 +5058,7 @@ asctoe (s, y)\n }\n \n /* Convert ASCII string SS to e type Y, with a specified rounding precision\n-   of OPREC bits.  */\n+   of OPREC bits.  BASE is 16 for C9X hexadecimal floating constants.  */\n \n static void \n asctoeg (ss, y, oprec)\n@@ -5072,17 +5072,26 @@ asctoeg (ss, y, oprec)\n   EMULONG lexp;\n   unsigned EMUSHORT nsign, *p;\n   char *sp, *s, *lstr;\n+  int base = 10;\n \n   /* Copy the input string.  */\n   lstr = (char *) alloca (strlen (ss) + 1);\n+\n   s = ss;\n   while (*s == ' ')\t\t/* skip leading spaces */\n     ++s;\n+\n   sp = lstr;\n   while ((*sp++ = *s++) != '\\0')\n     ;\n   s = lstr;\n \n+  if (s[0] == '0' && (s[1] == 'x' || s[1] == 'X'))\n+    {\n+      base = 16;\n+      s += 2;\n+    }\n+\n   rndsav = rndprc;\n   rndprc = NBITS;\t\t/* Set to full precision */\n   lost = 0;\n@@ -5096,8 +5105,13 @@ asctoeg (ss, y, oprec)\n   trail = 0;\n \n  nxtcom:\n+  if (*s >= '0' && *s <= '9')\n   k = *s - '0';\n-  if ((k >= 0) && (k <= 9))\n+  else if (*s >= 'a')\n+    k = 10 + *s - 'a';\n+  else\n+    k = 10 + *s - 'A';\n+  if ((k >= 0) && (k < base))\n     {\n       /* Ignore leading zeros */\n       if ((prec == 0) && (decflg == 0) && (k == 0))\n@@ -5106,11 +5120,15 @@ asctoeg (ss, y, oprec)\n       if ((trail == 0) && (decflg != 0))\n \t{\n \t  sp = s;\n-\t  while ((*sp >= '0') && (*sp <= '9'))\n+\t  while ((*sp >= '0' && *sp <= '9')\n+\t\t || (base == 16 && ((*sp >= 'a' && *sp <= 'f')\n+\t\t\t\t    || (*sp >= 'A' && *sp <= 'F'))))\n \t    ++sp;\n \t  /* Check for syntax error */\n \t  c = *sp & 0x7f;\n-\t  if ((c != 'e') && (c != 'E') && (c != '\\0')\n+\t  if ((base != 10 || ((c != 'e') && (c != 'E')))\n+\t      && (base != 16 || ((c != 'p') && (c != 'P')))\n+\t      && (c != '\\0')\n \t      && (c != '\\n') && (c != '\\r') && (c != ' ')\n \t      && (c != ','))\n \t    goto error;\n@@ -5129,13 +5147,28 @@ asctoeg (ss, y, oprec)\n \n       if (yy[2] == 0)\n \t{\n+\t  if (base == 16)\n+\t    {\n \t  if (decflg)\n+\t\tnexp += 4;\t/* count digits after decimal point */\n+\n+\t      eshup1 (yy);\t/* multiply current number by 16 */\n+\t      eshup1 (yy);\n+\t      eshup1 (yy);\n+\t      eshup1 (yy);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (decflg)\n \t    nexp += 1;\t\t/* count digits after decimal point */\n+\n \t  eshup1 (yy);\t\t/* multiply current number by 10 */\n \t  emovz (yy, xt);\n \t  eshup1 (xt);\n \t  eshup1 (xt);\n \t  eaddm (xt, yy);\n+\t    }\n+\t  /* Insert the current digit.  */\n \t  ecleaz (xt);\n \t  xt[NI - 2] = (unsigned EMUSHORT) k;\n \t  eaddm (xt, yy);\n@@ -5146,7 +5179,12 @@ asctoeg (ss, y, oprec)\n \t  lost |= k;\n \t  /* Count lost digits before the decimal point.  */\n \t  if (decflg == 0)\n+\t    {\n+\t      if (base == 10)\n \t    nexp -= 1;\n+\t      else\n+\t\tnexp -= 4;\n+\t}\n \t}\n       prec += 1;\n       goto donchr;\n@@ -5158,6 +5196,8 @@ asctoeg (ss, y, oprec)\n       break;\n     case 'E':\n     case 'e':\n+    case 'P':\n+    case 'p':\n       goto expnt;\n     case '.':\t\t\t/* decimal point */\n       if (decflg)\n@@ -5224,31 +5264,45 @@ asctoeg (ss, y, oprec)\n     {\n       exp *= 10;\n       exp += *s++ - '0';\n-      if (exp > -(MINDECEXP))\n-\t{\n-\t  if (esign < 0)\n-\t    goto zero;\n-\t  else\n-\t    goto infinite;\n-\t}\n+      if (exp > 999999)\n+ \tbreak;\n     }\n   if (esign < 0)\n     exp = -exp;\n-  if (exp > MAXDECEXP)\n+  if ((exp > MAXDECEXP) && (base == 10))\n     {\n  infinite:\n       ecleaz (yy);\n       yy[E] = 0x7fff;\t\t/* infinity */\n       goto aexit;\n     }\n-  if (exp < MINDECEXP)\n+  if ((exp < MINDECEXP) && (base == 10))\n     {\n  zero:\n       ecleaz (yy);\n       goto aexit;\n     }\n \n  daldone:\n+  if (base == 16)\n+    {\n+      /* Base 16 hexadecimal floating constant.  */\n+      if ((k = enormlz (yy)) > NBITS)\n+\t{\n+\t  ecleaz (yy);\n+\t  goto aexit;\n+\t}\n+      /* Adjust the exponent.  NEXP is the number of hex digits,\n+         EXP is a power of 2.  */\n+      lexp = (EXONE - 1 + NBITS) - k + yy[E] + exp - nexp;\n+      if (lexp > 0x7fff)\n+\tgoto infinite;\n+      if (lexp < 0)\n+\tgoto zero;\n+      yy[E] = lexp;\n+      goto expdon;\n+    }\n+\n   nexp = exp - nexp;\n   /* Pad trailing zeros to minimize power of 10, per IEEE spec.  */\n   while ((nexp > 0) && (yy[2] == 0))\n@@ -5270,6 +5324,7 @@ asctoeg (ss, y, oprec)\n     }\n   lexp = (EXONE - 1 + NBITS) - k;\n   emdnorm (yy, lost, 0, lexp, 64);\n+  lost = 0;\n \n   /* Convert to external format:\n \n@@ -5325,6 +5380,7 @@ asctoeg (ss, y, oprec)\n       k = emulm (tt, yy);\n       lexp -= EXONE - 1;\n     }\n+  lost = k;\n \n  expdon:\n \n@@ -5348,7 +5404,7 @@ asctoeg (ss, y, oprec)\n     lexp -= EXONE - 0201;\n #endif\n   rndprc = oprec;\n-  emdnorm (yy, k, 0, lexp, 64);\n+  emdnorm (yy, lost, 0, lexp, 64);\n \n  aexit:\n "}, {"sha": "97841cfe512819ab93cb65711f5fe3984558e0bb", "filename": "gcc/real.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of floating-point access for GNU compiler.\n-   Copyright (C) 1989, 1991, 1994, 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 91, 94, 96, 97, 98 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -178,7 +178,11 @@ extern REAL_VALUE_TYPE real_value_truncate\tPROTO ((enum machine_mode,\n    toward zero. */\n #define REAL_VALUE_UNSIGNED_FIX(x) (efixui (x))\n \n+/* Convert ASCII string S to floating point in mode M.\n+   Decimal input uses ATOF.  Hexadecimal uses HTOF.  */\n #define REAL_VALUE_ATOF ereal_atof\n+#define REAL_VALUE_HTOF ereal_atof\n+\n #define REAL_VALUE_NEGATE ereal_negate\n \n #define REAL_VALUE_MINUS_ZERO(x) \\\n@@ -355,6 +359,9 @@ extern double ldexp ();\n /* Use real.c to convert decimal numbers to binary, ... */\n REAL_VALUE_TYPE ereal_atof ();\n #define REAL_VALUE_ATOF(x, s) ereal_atof (x, s)\n+/* Could use ereal_atof here for hexadecimal floats too, but real_hex_to_f\n+   is OK and it uses faster native fp arithmetic.  */\n+/* #define REAL_VALUE_HTOF(x, s) ereal_atof (x, s) */\n #else\n /* ... or, if you like the host computer's atof, go ahead and use it: */\n #define REAL_VALUE_ATOF(x, s) atof (x)\n@@ -369,6 +376,13 @@ extern double (atof) ();\n #endif\n #endif\n \n+/* Hexadecimal floating constant input for use with host computer's\n+   fp arithmetic.  */\n+#ifndef REAL_VALUE_HTOF\n+extern REAL_VALUE_TYPE real_hex_to_f PROTO((char *, enum machine_mode));\n+#define REAL_VALUE_HTOF(s,m) real_hex_to_f(s,m)\n+#endif\n+\n /* Negate the floating-point value X.  */\n #ifndef REAL_VALUE_NEGATE\n #define REAL_VALUE_NEGATE(x) (- (x))"}, {"sha": "375d4f8721353ce0f32635b0fc4b5a3cd60ca14a", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -1377,7 +1377,7 @@ mostly_true_jump (jump_insn, condition)\n      always gives a correct answer.  */\n   if (flag_branch_probabilities)\n     {\n-      rtx note = find_reg_note (jump_insn, REG_BR_PROB, 0);;\n+      rtx note = find_reg_note (jump_insn, REG_BR_PROB, 0);\n       if (note)\n \t{\n \t  int prob = XINT (note, 0);"}, {"sha": "7533063a1865649bdbe480a03c02095322ab3219", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4d72224e91330c6c02d5b96b04b97e84024589/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6f4d72224e91330c6c02d5b96b04b97e84024589", "patch": "@@ -958,6 +958,7 @@ documented_lang_options[] =\n   { \"-ansi\", \"Compile just for ANSI C\" },\n   { \"-fallow-single-precision\",\n     \"Do not promote floats to double if using -traditional\" },\n+  { \"-std= \", \"Determine language standard\"},\n \n   { \"-fsigned-bitfields\", \"\" },\n   { \"-funsigned-bitfields\",\"Make bitfields by unsigned by default\" },\n@@ -972,7 +973,6 @@ documented_lang_options[] =\n   { \"-traditional\", \"Attempt to support traditional K&R style C\"},\n   { \"-fnotraditional\", \"\" },\n   { \"-fno-traditional\", \"\" },\n-  { \"-flang-isoc9x\", \"Enable C9X features\"},\n \n   { \"-fasm\", \"\" },\n   { \"-fno-asm\", \"Do not recognise the 'asm' keyword\" },\n@@ -2517,9 +2517,9 @@ dump_rtl (suffix, decl, func, insns)\n /* Routine to empty a dump file.  */\n static void\n clean_dump_file (suffix)\n-     char * suffix;\n+     char *suffix;\n {\n-  char * dumpname;\n+  char *dumpname;\n \n   dumpname = (char *) xmalloc (strlen (dump_base_name) + strlen (suffix) + 1);\n "}]}