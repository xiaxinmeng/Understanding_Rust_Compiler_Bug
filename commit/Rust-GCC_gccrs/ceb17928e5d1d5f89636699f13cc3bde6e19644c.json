{"sha": "ceb17928e5d1d5f89636699f13cc3bde6e19644c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ViMTc5MjhlNWQxZDVmODk2MzY2OTlmMTNjYzNiZGU2ZTE5NjQ0Yw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-05-20T08:03:25Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-05-20T08:03:25Z"}, "message": "Change ENABLE_VALGRIND_CHECKING to\n\n\t* config.in: Regenerated.\n\t* configure: Likewise.\n\t* configure.ac: Handle --enable-valgrind-annotations.\n\t* lex.c (new_buff): Use ENABLE_VALGRIND_ANNOTATIONS instead\n\tof ENABLE_VALGRIND_CHECKING.\n\t(_cpp_free_buff): Likewise.\n\nFrom-SVN: r236496", "tree": {"sha": "a531025dac09550010a1767b26770c5054b3711f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a531025dac09550010a1767b26770c5054b3711f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceb17928e5d1d5f89636699f13cc3bde6e19644c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb17928e5d1d5f89636699f13cc3bde6e19644c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb17928e5d1d5f89636699f13cc3bde6e19644c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb17928e5d1d5f89636699f13cc3bde6e19644c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2fe676f6df069ed1e33a6691c9062c9c56910bd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe676f6df069ed1e33a6691c9062c9c56910bd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe676f6df069ed1e33a6691c9062c9c56910bd0"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "d7a89d7d4951b083de764f68e2e624d9195beac4", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb17928e5d1d5f89636699f13cc3bde6e19644c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb17928e5d1d5f89636699f13cc3bde6e19644c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=ceb17928e5d1d5f89636699f13cc3bde6e19644c", "patch": "@@ -1,3 +1,12 @@\n+2016-05-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* config.in: Regenerated.\n+\t* configure: Likewise.\n+\t* configure.ac: Handle --enable-valgrind-annotations.\n+\t* lex.c (new_buff): Use ENABLE_VALGRIND_ANNOTATIONS instead\n+\tof ENABLE_VALGRIND_CHECKING.\n+\t(_cpp_free_buff): Likewise.\n+\n 2016-04-28  Eduard Sanou  <dhole@openmailbox.org>\n \t    Matthias Klose  <doko@debian.org>\n "}, {"sha": "3bbffe7815e75e6f713cd01ac482e29fd857fe1e", "filename": "libcpp/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb17928e5d1d5f89636699f13cc3bde6e19644c/libcpp%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb17928e5d1d5f89636699f13cc3bde6e19644c/libcpp%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfig.in?ref=ceb17928e5d1d5f89636699f13cc3bde6e19644c", "patch": "@@ -21,6 +21,9 @@\n    language is requested. */\n #undef ENABLE_NLS\n \n+/* Define to get calls to the valgrind runtime enabled. */\n+#undef ENABLE_VALGRIND_ANNOTATIONS\n+\n /* Define if you want to workaround valgrind (a memory checker) warnings about\n    possible memory leaks because of libcpp use of interior pointers. */\n #undef ENABLE_VALGRIND_CHECKING"}, {"sha": "b6f129c48b9ac3aaebb8952b513e44ae7a978dd8", "filename": "libcpp/configure", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb17928e5d1d5f89636699f13cc3bde6e19644c/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb17928e5d1d5f89636699f13cc3bde6e19644c/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=ceb17928e5d1d5f89636699f13cc3bde6e19644c", "patch": "@@ -703,6 +703,7 @@ enable_maintainer_mode\n enable_checking\n enable_canonical_system_headers\n enable_host_shared\n+enable_valgrind_annotations\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1343,6 +1344,8 @@ Optional Features:\n   --enable-canonical-system-headers\n                           enable or disable system headers canonicalization\n   --enable-host-shared    build host code as shared libraries\n+  --enable-valgrind-annotations\n+                          enable valgrind runtime interaction\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -7355,6 +7358,25 @@ fi\n \n \n \n+# Check whether --enable-valgrind-annotations was given.\n+if test \"${enable_valgrind_annotations+set}\" = set; then :\n+  enableval=$enable_valgrind_annotations;\n+else\n+  enable_valgrind_annotations=no\n+fi\n+\n+if test x$enable_valgrind_annotations != xno \\\n+    || test x$ac_valgrind_checking != x; then\n+  if (test $have_valgrind_h = no \\\n+      && test $gcc_cv_header_memcheck_h = no \\\n+      && test $gcc_cv_header_valgrind_memcheck_h = no); then\n+    as_fn_error \"*** Can't find valgrind/memcheck.h, memcheck.h or valgrind.h\" \"$LINENO\" 5\n+  fi\n+\n+$as_echo \"#define ENABLE_VALGRIND_ANNOTATIONS 1\" >>confdefs.h\n+\n+fi\n+\n # Output.\n \n ac_config_headers=\"$ac_config_headers config.h:config.in\""}, {"sha": "3077ee09768b231f2d17b4a9783198bd79f5dfdc", "filename": "libcpp/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb17928e5d1d5f89636699f13cc3bde6e19644c/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb17928e5d1d5f89636699f13cc3bde6e19644c/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=ceb17928e5d1d5f89636699f13cc3bde6e19644c", "patch": "@@ -200,6 +200,21 @@ AC_ARG_ENABLE(host-shared,\n [PICFLAG=-fPIC], [PICFLAG=])\n AC_SUBST(PICFLAG)\n \n+AC_ARG_ENABLE(valgrind-annotations,\n+[AS_HELP_STRING([--enable-valgrind-annotations],\n+\t\t[enable valgrind runtime interaction])], [],\n+[enable_valgrind_annotations=no])\n+if test x$enable_valgrind_annotations != xno \\\n+    || test x$ac_valgrind_checking != x; then\n+  if (test $have_valgrind_h = no \\\n+      && test $gcc_cv_header_memcheck_h = no \\\n+      && test $gcc_cv_header_valgrind_memcheck_h = no); then\n+    AC_MSG_ERROR([*** Can't find valgrind/memcheck.h, memcheck.h or valgrind.h])\n+  fi\n+  AC_DEFINE(ENABLE_VALGRIND_ANNOTATIONS, 1,\n+[Define to get calls to the valgrind runtime enabled.])\n+fi\n+\n # Output.\n \n AC_CONFIG_HEADERS(config.h:config.in, [echo timestamp > stamp-h1])"}, {"sha": "236418dd78136e63b7ff60753a85bce2fcbdcc86", "filename": "libcpp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb17928e5d1d5f89636699f13cc3bde6e19644c/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb17928e5d1d5f89636699f13cc3bde6e19644c/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=ceb17928e5d1d5f89636699f13cc3bde6e19644c", "patch": "@@ -3147,7 +3147,7 @@ new_buff (size_t len)\n     len = MIN_BUFF_SIZE;\n   len = CPP_ALIGN (len);\n \n-#ifdef ENABLE_VALGRIND_CHECKING\n+#ifdef ENABLE_VALGRIND_ANNOTATIONS\n   /* Valgrind warns about uses of interior pointers, so put _cpp_buff\n      struct first.  */\n   size_t slen = CPP_ALIGN2 (sizeof (_cpp_buff), 2 * DEFAULT_ALIGNMENT);\n@@ -3244,7 +3244,7 @@ _cpp_free_buff (_cpp_buff *buff)\n   for (; buff; buff = next)\n     {\n       next = buff->next;\n-#ifdef ENABLE_VALGRIND_CHECKING\n+#ifdef ENABLE_VALGRIND_ANNOTATIONS\n       free (buff);\n #else\n       free (buff->base);"}]}