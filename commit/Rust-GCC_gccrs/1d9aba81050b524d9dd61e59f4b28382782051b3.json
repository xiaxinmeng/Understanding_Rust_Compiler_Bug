{"sha": "1d9aba81050b524d9dd61e59f4b28382782051b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ5YWJhODEwNTBiNTI0ZDlkZDYxZTU5ZjRiMjgzODI3ODIwNTFiMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-12-04T17:16:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-12-04T17:16:27Z"}, "message": "re PR libstdc++/38368 (locale(const char* std_name) may create locale with broken facets)\n\n2008-12-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/38368\n\t* config/locale/gnu/numeric_members.cc (numpunct<char>::\n\t_M_initialize_numpunct, numpunct<wchar_t>::_M_initialize_numpunct):\n\tFix for THOUSANDS_SEP == '\\0' consistently with \"C\" locale.\n\t* config/locale/gnu/monetary_members.cc (moneypunct<char, true>::\n\t_M_initialize_moneypunct, moneypunct<char, false>::\n\t_M_initialize_moneypunct, moneypunct<wchar_t, true>::\n\t_M_initialize_moneypunct, moneypunct<wchar_t, false>::\n\t_M_initialize_moneypunct): Fix for __MON_DECIMAL_POINT == '\\0' or\n\t__MON_THOUSANDS_SEP == '\\0' consistently with \"C\" locale.\n\t* testsuite/22_locale/locale/cons/38368.cc: New.\n\nFrom-SVN: r142439", "tree": {"sha": "ace9ed71a4a54081566b2b3897e9b6a7734dc0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ace9ed71a4a54081566b2b3897e9b6a7734dc0e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d9aba81050b524d9dd61e59f4b28382782051b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9aba81050b524d9dd61e59f4b28382782051b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9aba81050b524d9dd61e59f4b28382782051b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9aba81050b524d9dd61e59f4b28382782051b3/comments", "author": null, "committer": null, "parents": [{"sha": "ce1b6498020a6124415ed9b03eaa07d682c25455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1b6498020a6124415ed9b03eaa07d682c25455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1b6498020a6124415ed9b03eaa07d682c25455"}], "stats": {"total": 222, "additions": 201, "deletions": 21}, "files": [{"sha": "3df3b49183bbeaa9208e9cb7e5e0264c588bbd74", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9aba81050b524d9dd61e59f4b28382782051b3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9aba81050b524d9dd61e59f4b28382782051b3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1d9aba81050b524d9dd61e59f4b28382782051b3", "patch": "@@ -1,3 +1,17 @@\n+2008-12-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/38368\n+\t* config/locale/gnu/numeric_members.cc (numpunct<char>::\n+\t_M_initialize_numpunct, numpunct<wchar_t>::_M_initialize_numpunct):\n+\tFix for THOUSANDS_SEP == '\\0' consistently with \"C\" locale.\n+\t* config/locale/gnu/monetary_members.cc (moneypunct<char, true>::\n+\t_M_initialize_moneypunct, moneypunct<char, false>::\n+\t_M_initialize_moneypunct, moneypunct<wchar_t, true>::\n+\t_M_initialize_moneypunct, moneypunct<wchar_t, false>::\n+\t_M_initialize_moneypunct): Fix for __MON_DECIMAL_POINT == '\\0' or\n+\t__MON_THOUSANDS_SEP == '\\0' consistently with \"C\" locale.\n+\t* testsuite/22_locale/locale/cons/38368.cc: New.\n+\n 2008-12-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/38365 (cont)"}, {"sha": "1bf2487c86d72b8d84384db6e51f01a69a8a9897", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 108, "deletions": 14, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9aba81050b524d9dd61e59f4b28382782051b3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9aba81050b524d9dd61e59f4b28382782051b3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=1d9aba81050b524d9dd61e59f4b28382782051b3", "patch": "@@ -220,6 +220,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _M_data->_M_thousands_sep = ',';\n \t  _M_data->_M_grouping = \"\";\n \t  _M_data->_M_grouping_size = 0;\n+\t  _M_data->_M_use_grouping = false;\n \t  _M_data->_M_curr_symbol = \"\";\n \t  _M_data->_M_curr_symbol_size = 0;\n \t  _M_data->_M_positive_sign = \"\";\n@@ -240,11 +241,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t__cloc));\n \t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, \n \t\t\t\t\t\t\t__cloc));\n-\t  _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-\t  _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n \t  _M_data->_M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  _M_data->_M_positive_sign_size = strlen(_M_data->_M_positive_sign);\n \n+\t  // Check for NULL, which implies no grouping.\n+\t  if (_M_data->_M_thousands_sep == '\\0')\n+\t    {\n+\t      // Like in \"C\" locale.\n+\t      _M_data->_M_grouping = \"\";\n+\t      _M_data->_M_grouping_size = 0;\n+\t      _M_data->_M_use_grouping = false;\n+\t      _M_data->_M_thousands_sep = ',';\n+\t    }\n+\t  else\n+\t    {\n+\t      _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\t    }\n+\n+\t  // Check for NULL, which implies no fractional digits.\n+\t  if (_M_data->_M_decimal_point == '\\0')\n+\t    {\n+\t      // Like in \"C\" locale.\n+\t      _M_data->_M_frac_digits = 0;\n+\t      _M_data->_M_decimal_point = '.';\n+\t    }\n+\t  else\n+\t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n+\t\t\t\t\t\t\t__cloc));\n+\n \t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n \t  if (!__nposn)\n \t    _M_data->_M_negative_sign = \"()\";\n@@ -256,8 +281,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  // _Intl == true\n \t  _M_data->_M_curr_symbol = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n \t  _M_data->_M_curr_symbol_size = strlen(_M_data->_M_curr_symbol);\n-\t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n-\t\t\t\t\t\t      __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n@@ -285,6 +308,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _M_data->_M_thousands_sep = ',';\n \t  _M_data->_M_grouping = \"\";\n \t  _M_data->_M_grouping_size = 0;\n+\t  _M_data->_M_use_grouping = false;\n \t  _M_data->_M_curr_symbol = \"\";\n \t  _M_data->_M_curr_symbol_size = 0;\n \t  _M_data->_M_positive_sign = \"\";\n@@ -305,11 +329,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t__cloc));\n \t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, \n \t\t\t\t\t\t\t__cloc));\n-\t  _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-\t  _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n \t  _M_data->_M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  _M_data->_M_positive_sign_size = strlen(_M_data->_M_positive_sign);\n \n+\t  // Check for NULL, which implies no grouping.\n+\t  if (_M_data->_M_thousands_sep == '\\0')\n+\t    {\n+\t      // Like in \"C\" locale.\n+\t      _M_data->_M_grouping = \"\";\n+\t      _M_data->_M_grouping_size = 0;\n+\t      _M_data->_M_use_grouping = false;\n+\t      _M_data->_M_thousands_sep = ',';\n+\t    }\n+\t  else\n+\t    {\n+\t      _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\t    }\n+\n+\t  // Check for NULL, which implies no fractional digits.\n+\t  if (_M_data->_M_decimal_point == '\\0')\n+\t    {\n+\t      // Like in \"C\" locale.\n+\t      _M_data->_M_frac_digits = 0;\n+\t      _M_data->_M_decimal_point = '.';\n+\t    }\n+\t  else\n+\t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS,\n+\t\t\t\t\t\t\t__cloc));\n+\n \t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n \t  if (!__nposn)\n \t    _M_data->_M_negative_sign = \"()\";\n@@ -321,7 +369,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  // _Intl == false\n \t  _M_data->_M_curr_symbol = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n \t  _M_data->_M_curr_symbol_size = strlen(_M_data->_M_curr_symbol);\n-\t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n@@ -362,6 +409,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _M_data->_M_thousands_sep = L',';\n \t  _M_data->_M_grouping = \"\";\n \t  _M_data->_M_grouping_size = 0;\n+\t  _M_data->_M_use_grouping = false;\n \t  _M_data->_M_curr_symbol = L\"\";\n \t  _M_data->_M_curr_symbol_size = 0;\n \t  _M_data->_M_positive_sign = L\"\";\n@@ -397,8 +445,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n \t  __u.__s = __nl_langinfo_l(_NL_MONETARY_THOUSANDS_SEP_WC, __cloc);\n \t  _M_data->_M_thousands_sep = __u.__w;\n-\t  _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-\t  _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\n+\t  // Check for NULL, which implies no grouping.\n+\t  if (_M_data->_M_thousands_sep == L'\\0')\n+\t    {\n+\t      // Like in \"C\" locale.\n+\t      _M_data->_M_grouping = \"\";\n+\t      _M_data->_M_grouping_size = 0;\n+\t      _M_data->_M_use_grouping = false;\n+\t      _M_data->_M_thousands_sep = L',';\n+\t    }\n+\t  else\n+\t    {\n+\t      _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\t    }\n+\n+\t  // Check for NULL, which implies no fractional digits.\n+\t  if (_M_data->_M_decimal_point == L'\\0')\n+\t    {\n+\t      // Like in \"C\" locale.\n+\t      _M_data->_M_frac_digits = 0;\n+\t      _M_data->_M_decimal_point = L'.';\n+\t    }\n+\t  else\n+\t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n+\t\t\t\t\t\t\t__cloc));\n \n \t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n@@ -467,8 +539,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      __throw_exception_again;\n \t    } \n \t  \n-\t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n-\t\t\t\t\t\t      __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n@@ -507,6 +577,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _M_data->_M_thousands_sep = L',';\n \t  _M_data->_M_grouping = \"\";\n           _M_data->_M_grouping_size = 0;\n+\t  _M_data->_M_use_grouping = false;\n \t  _M_data->_M_curr_symbol = L\"\";\n \t  _M_data->_M_curr_symbol_size = 0;\n \t  _M_data->_M_positive_sign = L\"\";\n@@ -542,8 +613,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n \t  __u.__s = __nl_langinfo_l(_NL_MONETARY_THOUSANDS_SEP_WC, __cloc);\n \t  _M_data->_M_thousands_sep = __u.__w;\n-\t  _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-          _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\n+\t  // Check for NULL, which implies no grouping.\n+\t  if (_M_data->_M_thousands_sep == L'\\0')\n+\t    {\n+\t      // Like in \"C\" locale.\n+\t      _M_data->_M_grouping = \"\";\n+\t      _M_data->_M_grouping_size = 0;\n+\t      _M_data->_M_use_grouping = false;\n+\t      _M_data->_M_thousands_sep = L',';\n+\t    }\n+\t  else\n+\t    {\n+\t      _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\t    }\n+\n+\t  // Check for NULL, which implies no fractional digits.\n+\t  if (_M_data->_M_decimal_point == L'\\0')\n+\t    {\n+\t      // Like in \"C\" locale.\n+\t      _M_data->_M_frac_digits = 0;\n+\t      _M_data->_M_decimal_point = L'.';\n+\t    }\n+\t  else\n+\t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS,\n+\t\t\t\t\t\t\t__cloc));\n \n \t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n@@ -613,7 +708,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n               __throw_exception_again;\n \t    }\n \n-\t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));"}, {"sha": "93039e7654d4c4e5c85675f233032aa977d5dbed", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9aba81050b524d9dd61e59f4b28382782051b3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9aba81050b524d9dd61e59f4b28382782051b3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=1d9aba81050b524d9dd61e59f4b28382782051b3", "patch": "@@ -1,6 +1,7 @@\n // std::numpunct implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -71,10 +72,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n \t  // Check for NULL, which implies no grouping.\n \t  if (_M_data->_M_thousands_sep == '\\0')\n-\t    _M_data->_M_grouping = \"\";\n+\t    {\n+\t      // Like in \"C\" locale.\n+\t      _M_data->_M_grouping = \"\";\n+\t      _M_data->_M_grouping_size = 0;\n+\t      _M_data->_M_use_grouping = false;\n+\t      _M_data->_M_thousands_sep = ',';\n+\t    }\n \t  else\n-\t    _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n-\t  _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\t    {\n+\t      _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\t    }\n \t}\n \n       // NB: There is no way to extact this info from posix locales.\n@@ -128,11 +137,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __u.__s = __nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC, __cloc);\n \t  _M_data->_M_thousands_sep = __u.__w;\n \n+\t  // Check for NULL, which implies no grouping.\n \t  if (_M_data->_M_thousands_sep == L'\\0')\n-\t    _M_data->_M_grouping = \"\";\n+\t    {\n+\t      // Like in \"C\" locale.\n+\t      _M_data->_M_grouping = \"\";\n+\t      _M_data->_M_grouping_size = 0;\n+\t      _M_data->_M_use_grouping = false;\n+\t      _M_data->_M_thousands_sep = L',';\n+\t    }\n \t  else\n-\t    _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n-\t  _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\t    {\n+\t      _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\t    }\n \t}\n \n       // NB: There is no way to extact this info from posix locales."}, {"sha": "6f4bca12379b5c717d07b91d8ef46379833d89d5", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/38368.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9aba81050b524d9dd61e59f4b28382782051b3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F38368.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9aba81050b524d9dd61e59f4b28382782051b3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F38368.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F38368.cc?ref=1d9aba81050b524d9dd61e59f4b28382782051b3", "patch": "@@ -0,0 +1,54 @@\n+// { dg-require-namedlocale \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.1.1.2 locale constructors and destructors [lib.locale.cons]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/38368\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale(\"C\"), \"en_US\", locale::collate);\n+  locale loc_copy(loc.name().c_str());\n+\n+  const moneypunct<char, true>& mpunt =\n+    use_facet<moneypunct<char, true> >(loc_copy);\n+  VERIFY( mpunt.decimal_point() == '.' );\n+  VERIFY( mpunt.thousands_sep() == ',' );\n+\n+  const moneypunct<char, false>& mpunf =\n+    use_facet<moneypunct<char, false> >(loc_copy);\n+  VERIFY( mpunf.decimal_point() == '.' );\n+  VERIFY( mpunf.thousands_sep() == ',' );\n+\n+  const numpunct<char>& npun = use_facet<numpunct<char> >(loc_copy);\n+  VERIFY( npun.decimal_point() == '.' );\n+  VERIFY( npun.thousands_sep() == ',' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}