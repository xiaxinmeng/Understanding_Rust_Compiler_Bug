{"sha": "17fcb1a3bad0c281e9d8c789455025dd9232081b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmY2IxYTNiYWQwYzI4MWU5ZDhjNzg5NDU1MDI1ZGQ5MjMyMDgxYg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-07-22T23:19:01Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-23T13:54:36Z"}, "message": "Better union support in the parser\n\nunion is a weak keyword which means it isn't reserved and can be used\nas a generic identifier. When we see an identifier where a union could\nbe declared we check whether the identifier is \"union\", but only when\nthe next token is also an identifier. In parse_union we shouldn't skip\nthe first identifier token, because it is already skipped when we call\nexpect_token.", "tree": {"sha": "1a12af0f69b1b8f12166afa7a0f83d2136fe8a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a12af0f69b1b8f12166afa7a0f83d2136fe8a23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17fcb1a3bad0c281e9d8c789455025dd9232081b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fcb1a3bad0c281e9d8c789455025dd9232081b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17fcb1a3bad0c281e9d8c789455025dd9232081b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fcb1a3bad0c281e9d8c789455025dd9232081b/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44472c580cedd836081c82e621482e479a69729c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44472c580cedd836081c82e621482e479a69729c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44472c580cedd836081c82e621482e479a69729c"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "3996ef21672af5e425b750dbf40cd46480d1f842", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fcb1a3bad0c281e9d8c789455025dd9232081b/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fcb1a3bad0c281e9d8c789455025dd9232081b/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=17fcb1a3bad0c281e9d8c789455025dd9232081b", "patch": "@@ -1083,7 +1083,8 @@ Parser<ManagedTokenSource>::parse_item (bool called_from_statement)\n     // crappy hack to do union \"keyword\"\n     case IDENTIFIER:\n       // TODO: ensure std::string and literal comparison works\n-      if (t->get_str () == \"union\")\n+      if (t->get_str () == \"union\"\n+\t  && lexer.peek_token (1)->get_id () == IDENTIFIER)\n \t{\n \t  return parse_vis_item (std::move (outer_attrs));\n \t  // or should this go straight to parsing union?\n@@ -1274,8 +1275,8 @@ Parser<ManagedTokenSource>::parse_vis_item (AST::AttrVec outer_attrs)\n     // TODO: implement union keyword but not really because of\n     // context-dependence case UNION: crappy hack to do union \"keyword\"\n     case IDENTIFIER:\n-      // TODO: ensure std::string and literal comparison works\n-      if (t->get_str () == \"union\")\n+      if (t->get_str () == \"union\"\n+\t  && lexer.peek_token (1)->get_id () == IDENTIFIER)\n \t{\n \t  return parse_union (std::move (vis), std::move (outer_attrs));\n \t  // or should item switch go straight to parsing union?\n@@ -4524,7 +4525,6 @@ Parser<ManagedTokenSource>::parse_union (AST::Visibility vis,\n   const_TokenPtr union_keyword = expect_token (IDENTIFIER);\n   rust_assert (union_keyword->get_str () == \"union\");\n   Location locus = union_keyword->get_locus ();\n-  lexer.skip_token ();\n \n   // parse actual union name\n   const_TokenPtr union_name_tok = expect_token (IDENTIFIER);\n@@ -6054,8 +6054,8 @@ Parser<ManagedTokenSource>::parse_stmt ()\n       break;\n     // crappy hack to do union \"keyword\"\n     case IDENTIFIER:\n-      // TODO: ensure std::string and literal comparison works\n-      if (t->get_str () == \"union\")\n+      if (t->get_str () == \"union\"\n+\t  && lexer.peek_token (1)->get_id () == IDENTIFIER)\n \t{\n \t  return parse_vis_item (std::move (outer_attrs));\n \t  // or should this go straight to parsing union?\n@@ -11674,8 +11674,8 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n       }\n     // crappy hack to do union \"keyword\"\n     case IDENTIFIER:\n-      // TODO: ensure std::string and literal comparison works\n-      if (t->get_str () == \"union\")\n+      if (t->get_str () == \"union\"\n+\t  && lexer.peek_token (1)->get_id () == IDENTIFIER)\n \t{\n \t  std::unique_ptr<AST::VisItem> item (\n \t    parse_vis_item (std::move (outer_attrs)));"}]}