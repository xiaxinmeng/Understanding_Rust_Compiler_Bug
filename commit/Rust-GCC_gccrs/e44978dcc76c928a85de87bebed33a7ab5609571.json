{"sha": "e44978dcc76c928a85de87bebed33a7ab5609571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ0OTc4ZGNjNzZjOTI4YTg1ZGU4N2JlYmVkMzNhN2FiNTYwOTU3MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-31T16:52:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-31T16:52:28Z"}, "message": "re PR tree-optimization/56157 (ICE with -ftree-vectorize in in compute_live_loop_exits)\n\n2013-01-31  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56157\n\t* tree-vect-slp.c (vect_get_slp_defs): More thoroughly try to\n\tmatch up operand with SLP child.\n\n\t* gcc.dg/torture/pr56157.c: New testcase.\n\nFrom-SVN: r195616", "tree": {"sha": "061022a78dd78325d70e31b1a17238815064417f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/061022a78dd78325d70e31b1a17238815064417f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e44978dcc76c928a85de87bebed33a7ab5609571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44978dcc76c928a85de87bebed33a7ab5609571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e44978dcc76c928a85de87bebed33a7ab5609571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44978dcc76c928a85de87bebed33a7ab5609571/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "422e2fc06270497c479de0da7408158cc5e31c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422e2fc06270497c479de0da7408158cc5e31c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422e2fc06270497c479de0da7408158cc5e31c9a"}], "stats": {"total": 71, "additions": 50, "deletions": 21}, "files": [{"sha": "9c3c9e2d4f8870c807587b04a4c7c58702b53ab0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44978dcc76c928a85de87bebed33a7ab5609571/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44978dcc76c928a85de87bebed33a7ab5609571/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e44978dcc76c928a85de87bebed33a7ab5609571", "patch": "@@ -1,3 +1,9 @@\n+2013-01-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56157\n+\t* tree-vect-slp.c (vect_get_slp_defs): More thoroughly try to\n+\tmatch up operand with SLP child.\n+\n 2013-01-31  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/54410"}, {"sha": "7a8baa6e9051f9133ce94cd50b0d60400f2becd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44978dcc76c928a85de87bebed33a7ab5609571/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44978dcc76c928a85de87bebed33a7ab5609571/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e44978dcc76c928a85de87bebed33a7ab5609571", "patch": "@@ -1,3 +1,8 @@\n+2013-01-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56157\n+\t* gcc.dg/torture/pr56157.c: New testcase.\n+\n 2013-01-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56150"}, {"sha": "796e3235c299d7d990ef94076783f52ba2257caa", "filename": "gcc/testsuite/gcc.dg/torture/pr56157.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44978dcc76c928a85de87bebed33a7ab5609571/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56157.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44978dcc76c928a85de87bebed33a7ab5609571/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56157.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56157.c?ref=e44978dcc76c928a85de87bebed33a7ab5609571", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-ftree-vectorize\" } */\n+\n+struct Pixel {\n+    unsigned short r;\n+    unsigned short g;\n+    unsigned short b;\n+    unsigned short a;\n+};\n+\n+void fn(unsigned char * __restrict dst, const unsigned char * __restrict src)\n+{\n+  unsigned x;\n+  for(x = 0; x < 1024; x += 1)\n+    {\n+      struct Pixel pixel;\n+      pixel.r = (unsigned short)(((unsigned)src[0]) * 0xffff / 0xff);\n+      pixel.g = (unsigned short)(((unsigned)src[1]) * 0xffff / 0xff);\n+      pixel.b = (unsigned short)(((unsigned)src[2]) * 0xffff / 0xff);\n+      pixel.a = (unsigned short)(((unsigned)src[3]) * 0xffff / 0xff);\n+      __builtin_memcpy(dst, &pixel, sizeof pixel);\n+      src += 4;\n+      dst += 8;\n+    }\n+}"}, {"sha": "36f81299d5c5ace6b243ccd40d00d3feff8d8983", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44978dcc76c928a85de87bebed33a7ab5609571/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44978dcc76c928a85de87bebed33a7ab5609571/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=e44978dcc76c928a85de87bebed33a7ab5609571", "patch": "@@ -2616,13 +2616,13 @@ void\n vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n                    vec<slp_void_p> *vec_oprnds, int reduc_index)\n {\n-  gimple first_stmt, first_def;\n+  gimple first_stmt;\n   int number_of_vects = 0, i;\n   unsigned int child_index = 0;\n   HOST_WIDE_INT lhs_size_unit, rhs_size_unit;\n   slp_tree child = NULL;\n   vec<tree> *vec_defs;\n-  tree oprnd, def_lhs;\n+  tree oprnd;\n   bool vectorized_defs;\n \n   first_stmt = SLP_TREE_SCALAR_STMTS (slp_node)[0];\n@@ -2638,29 +2638,22 @@ vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n       if (SLP_TREE_CHILDREN (slp_node).length () > child_index)\n         {\n           child = (slp_tree) SLP_TREE_CHILDREN (slp_node)[child_index];\n-          first_def = SLP_TREE_SCALAR_STMTS (child)[0];\n-\n-\t  /* In the end of a pattern sequence we have a use of the original stmt,\n-\t     so we need to compare OPRND with the original def.  */\n-          if (is_pattern_stmt_p (vinfo_for_stmt (first_def))\n-\t      && !STMT_VINFO_IN_PATTERN_P (vinfo_for_stmt (first_stmt))\n-              && !is_pattern_stmt_p (vinfo_for_stmt (first_stmt)))\n-            first_def = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (first_def));\n \n-          if (is_gimple_call (first_def))\n-            def_lhs = gimple_call_lhs (first_def);\n-          else\n-            def_lhs = gimple_assign_lhs (first_def);\n+\t  /* We have to check both pattern and original def, if available.  */\n+\t  gimple first_def = SLP_TREE_SCALAR_STMTS (child)[0];\n+\t  gimple related = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (first_def));\n \n-          if (operand_equal_p (oprnd, def_lhs, 0))\n-            {\n-              /* The number of vector defs is determined by the number of\n-                 vector statements in the node from which we get those\n+\t  if (operand_equal_p (oprnd, gimple_get_lhs (first_def), 0)\n+\t      || (related\n+\t\t  && operand_equal_p (oprnd, gimple_get_lhs (related), 0)))\n+\t    {\n+\t      /* The number of vector defs is determined by the number of\n+\t\t vector statements in the node from which we get those\n \t\t statements.  */\n-                 number_of_vects = SLP_TREE_NUMBER_OF_VEC_STMTS (child);\n-                 vectorized_defs = true;\n+\t      number_of_vects = SLP_TREE_NUMBER_OF_VEC_STMTS (child);\n+\t      vectorized_defs = true;\n \t      child_index++;\n-            }\n+\t    }\n         }\n \n       if (!vectorized_defs)"}]}