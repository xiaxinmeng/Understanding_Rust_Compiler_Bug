{"sha": "993acaec693ef81eb83b445152f5b04652f49b33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzYWNhZWM2OTNlZjgxZWI4M2I0NDUxNTJmNWIwNDY1MmY0OWIzMw==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-01-23T18:26:01Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-01-23T18:26:01Z"}, "message": "cp-tree.h (do_poplevel): Remove prototype.\n\n\t* cp-tree.h (do_poplevel): Remove prototype.\n\t* semantics.c (do_poplevel): Add prototype.  Make static.\n\n\t* cp-tree.h (original_type): Remove prototype.\n\t* typeck.c (original_type): Make static.\n\n\t* cp-tree.h (declare_global_var): Remove prototype.\n\t* decl.c (declare_global_var): Make static.\n\n\t* cp-tree.h (implicitly_declare_fn): Remove prototype.\n\t* method.c (implicitly_declare_fn): Make static.\n\n\t* cp-tree.h (fold_decl_constant_value): Remove prototype.\n\t* pt.c (fold_decl_constant_value): Make static.\n\nFrom-SVN: r110140", "tree": {"sha": "234d65b70f646f64cc917040778043870546dd13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/234d65b70f646f64cc917040778043870546dd13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/993acaec693ef81eb83b445152f5b04652f49b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993acaec693ef81eb83b445152f5b04652f49b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/993acaec693ef81eb83b445152f5b04652f49b33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993acaec693ef81eb83b445152f5b04652f49b33/comments", "author": null, "committer": null, "parents": [{"sha": "0eab3aad5805128785916dbce9c12f0a2ba5cf85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eab3aad5805128785916dbce9c12f0a2ba5cf85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eab3aad5805128785916dbce9c12f0a2ba5cf85"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "ee481d7c1c9867df785281a5d1f79f7b81b6358c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=993acaec693ef81eb83b445152f5b04652f49b33", "patch": "@@ -1,5 +1,20 @@\n 2006-01-23  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n+\t* cp-tree.h (do_poplevel): Remove prototype.\n+\t* semantics.c (do_poplevel): Add prototype.  Make static.\n+\n+\t* cp-tree.h (original_type): Remove prototype.\n+\t* typeck.c (original_type): Make static.\n+\n+\t* cp-tree.h (declare_global_var): Remove prototype.\n+\t* decl.c (declare_global_var): Make static.\n+\n+\t* cp-tree.h (implicitly_declare_fn): Remove prototype.\n+\t* method.c (implicitly_declare_fn): Make static.\n+\n+\t* cp-tree.h (fold_decl_constant_value): Remove prototype.\n+\t* pt.c (fold_decl_constant_value): Make static.\n+\n \t* cp-tree.h (build_x_delete): Remove prototype.\n \t* init.c (build_vec_delete_1): Call build_op_delete_call directly\n \tand not via build_x_delete."}, {"sha": "68c6ddb65e794c70a0ac3f45b62ee20f7179eaed", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=993acaec693ef81eb83b445152f5b04652f49b33", "patch": "@@ -3848,7 +3848,6 @@ extern tree force_target_expr\t\t\t(tree, tree);\n extern tree build_target_expr_with_type\t\t(tree, tree);\n extern int local_variable_p\t\t\t(tree);\n extern int nonstatic_local_decl_p\t\t(tree);\n-extern tree declare_global_var\t\t\t(tree, tree);\n extern tree register_dtor_fn\t\t\t(tree);\n extern tmpl_spec_kind current_tmpl_spec_kind\t(int);\n extern tree cp_fname_init\t\t\t(const char *, tree *);\n@@ -3983,8 +3982,6 @@ extern tree make_thunk\t\t\t\t(tree, bool, tree, tree);\n extern void finish_thunk\t\t\t(tree);\n extern void use_thunk\t\t\t\t(tree, bool);\n extern void synthesize_method\t\t\t(tree);\n-extern tree implicitly_declare_fn\t\t(special_function_kind,\n-\t\t\t\t\t\t tree, bool);\n extern tree lazily_declare_fn\t\t\t(special_function_kind,\n \t\t\t\t\t\t tree);\n extern tree skip_artificial_parms_for\t\t(tree, tree);\n@@ -4063,7 +4060,6 @@ extern tree build_non_dependent_expr\t\t(tree);\n extern tree build_non_dependent_args\t\t(tree);\n extern bool reregister_specialization\t\t(tree, tree, tree);\n extern tree fold_non_dependent_expr\t\t(tree);\n-extern tree fold_decl_constant_value\t\t(tree);\n \n /* in repo.c */\n extern void init_repo\t\t\t\t(void);\n@@ -4134,7 +4130,6 @@ extern void perform_deferred_access_checks\t(void);\n extern void perform_or_defer_access_check\t(tree, tree);\n extern int stmts_are_full_exprs_p\t\t(void);\n extern void init_cp_semantics\t\t\t(void);\n-extern tree do_poplevel\t\t\t\t(tree);\n extern void add_decl_expr\t\t\t(tree);\n extern tree finish_expr_stmt\t\t\t(tree);\n extern tree begin_if_stmt\t\t\t(void);\n@@ -4304,7 +4299,6 @@ extern tree require_complete_type\t\t(tree);\n extern tree complete_type\t\t\t(tree);\n extern tree complete_type_or_else\t\t(tree, tree);\n extern int type_unknown_p\t\t\t(tree);\n-extern tree original_type\t\t\t(tree);\n extern bool comp_except_specs\t\t\t(tree, tree, bool);\n extern bool comptypes\t\t\t\t(tree, tree, int);\n extern bool compparms\t\t\t\t(tree, tree);"}, {"sha": "e4be9e0f88c71a7681efbfc1bca3924d54d80a27", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=993acaec693ef81eb83b445152f5b04652f49b33", "patch": "@@ -5138,7 +5138,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n    had been seen.  Used to create compiler-generated global\n    variables.  */\n \n-tree\n+static tree\n declare_global_var (tree name, tree type)\n {\n   tree decl;"}, {"sha": "4a1a4ed2dac3f64cd7b6f14ffc60ce4e657533fe", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=993acaec693ef81eb83b445152f5b04652f49b33", "patch": "@@ -969,7 +969,7 @@ locate_copy (tree type, void *client_)\n    reference argument or a non-const reference.  Returns the\n    FUNCTION_DECL for the implicitly declared function.  */\n \n-tree\n+static tree\n implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n {\n   tree fn;"}, {"sha": "40ebbe5cca7e98c6f5d164ec37074e4e5d418e17", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=993acaec693ef81eb83b445152f5b04652f49b33", "patch": "@@ -3357,7 +3357,7 @@ fold_non_dependent_expr (tree expr)\n    initializers can maintain a syntactic rather than semantic form\n    (even if they are non-dependent, for access-checking purposes).  */\n \n-tree\n+static tree\n fold_decl_constant_value (tree expr)\n {\n   tree const_expr = expr;"}, {"sha": "47ff6ea0fedcfec1898b431a15365d6a3060820d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=993acaec693ef81eb83b445152f5b04652f49b33", "patch": "@@ -57,6 +57,7 @@\n    parsing into this file; that will make implementing the new parser\n    much easier since it will be able to make use of these routines.  */\n \n+static tree do_poplevel (tree);\n static tree maybe_convert_cond (tree);\n static tree simplify_aggr_init_exprs_r (tree *, int *, void *);\n static void emit_associated_thunks (tree);\n@@ -427,7 +428,7 @@ anon_aggr_type_p (tree node)\n \n /* Finish a scope.  */\n \n-tree\n+static tree\n do_poplevel (tree stmt_list)\n {\n   tree block = NULL;"}, {"sha": "49deccc0ad3e1cd1e98b62be7a91906750e774e4", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acaec693ef81eb83b445152f5b04652f49b33/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=993acaec693ef81eb83b445152f5b04652f49b33", "patch": "@@ -224,7 +224,7 @@ commonparms (tree p1, tree p2)\n \n /* Given a type, perhaps copied for a typedef,\n    find the \"original\" version of it.  */\n-tree\n+static tree\n original_type (tree t)\n {\n   while (TYPE_NAME (t) != NULL_TREE)"}]}