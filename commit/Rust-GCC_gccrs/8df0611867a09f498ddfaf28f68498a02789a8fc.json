{"sha": "8df0611867a09f498ddfaf28f68498a02789a8fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmMDYxMTg2N2EwOWY0OThkZGZhZjI4ZjY4NDk4YTAyNzg5YThmYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-16T11:57:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-16T11:57:14Z"}, "message": "(layout_record): If the place where we were going to put a field\nchanged, lay it out again.\n\nFrom-SVN: r6793", "tree": {"sha": "2a969ea751b39ac9dd008ad1e8385052017eb8ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a969ea751b39ac9dd008ad1e8385052017eb8ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8df0611867a09f498ddfaf28f68498a02789a8fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df0611867a09f498ddfaf28f68498a02789a8fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df0611867a09f498ddfaf28f68498a02789a8fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df0611867a09f498ddfaf28f68498a02789a8fc/comments", "author": null, "committer": null, "parents": [{"sha": "6e5bea54683e79892a7ee623583a71612eda6341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5bea54683e79892a7ee623583a71612eda6341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5bea54683e79892a7ee623583a71612eda6341"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "3c2fc8fc9127639e3efb800a9968621d1b15bfa7", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df0611867a09f498ddfaf28f68498a02789a8fc/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df0611867a09f498ddfaf28f68498a02789a8fc/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=8df0611867a09f498ddfaf28f68498a02789a8fc", "patch": "@@ -309,6 +309,7 @@ layout_record (rec)\n \n   for (field = TYPE_FIELDS (rec); field; field = TREE_CHAIN (field))\n     {\n+      register int known_align = var_size ? var_align : const_size;\n       register int desired_align;\n \n       /* If FIELD is static, then treat it like a separate variable,\n@@ -328,14 +329,11 @@ layout_record (rec)\n \tcontinue;\n \n       /* Lay out the field so we know what alignment it needs.\n-\t For KNOWN_ALIGN, pass the number of bits from start of record\n-\t or some divisor of it.  */\n-\n-      /* For a packed field, use the alignment as specified,\n+\t For a packed field, use the alignment as specified,\n \t disregarding what the type would want.  */\n       if (DECL_PACKED (field))\n \tdesired_align = DECL_ALIGN (field);\n-      layout_decl (field, var_size ? var_align : const_size);\n+      layout_decl (field, known_align);\n       if (! DECL_PACKED (field))\n \tdesired_align = DECL_ALIGN (field);\n       /* Some targets (i.e. VMS) limit struct field alignment\n@@ -463,7 +461,16 @@ layout_record (rec)\n       else if (var_size)\n \tDECL_FIELD_BITPOS (field) = var_size;\n       else\n-\tDECL_FIELD_BITPOS (field) = size_int (const_size);\n+\t{\n+\t  DECL_FIELD_BITPOS (field) = size_int (const_size);\n+\n+\t  /* If this field ended up more aligned than we thought it\n+\t     would be (we approximate this by seeing if its position\n+\t     changed), lay out the field again; perhaps we can use an\n+\t     integral mode for it now.  */\n+\t  if (known_align != const_size)\n+\t    layout_decl (field, const_size);\n+\t}\n \n       /* Now add size of this field to the size of the record.  */\n "}]}