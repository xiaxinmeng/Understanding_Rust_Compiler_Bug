{"sha": "a2667f14a89bc5492f51ff0ee794ee75d8068f43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2NjdmMTRhODliYzU0OTJmNTFmZjBlZTc5NGVlNzVkODA2OGY0Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T11:51:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T11:51:46Z"}, "message": "[multiple changes]\n\n2015-10-26  Bob Duff  <duff@adacore.com>\n\n\t* s-fileio.adb (Fopen_Mode): Use \"r+\" for Out_File/Stream_IO,\n\tso the file won't be truncated on 'fopen', as required by\n\tAI95-00283-1.\n\n2015-10-26  Bob Duff  <duff@adacore.com>\n\n\t* gnat1drv.adb, prj.adb, sem_ch6.adb, s-regpat.adb,\n\tsem_prag.adb: Fix typos.\n\t* einfo.ads, restrict.ads: Minor comment fixes.\n\t* err_vars.ads, sem_util.adb, errout.ads: Code clean up.\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Assignment): Do not check that the\n\tLeft-hand side is legal in an inlined body, check is done on\n\tthe original template.\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.ads, exp_util.adb (Find_Primitive_Operations): New\n\tsubprogram to retrieve by name the possibly overloaded set of\n\tprimitive operations of a type.\n\t* sem_ch4.adb (Try_Container_Indexing): Use\n\tFind_Primitive_Operations to handle overloaded indexing operations\n\tof a derived type.\n\nFrom-SVN: r229343", "tree": {"sha": "678b5409f180a87b3720529ed635ddddcbdf7df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/678b5409f180a87b3720529ed635ddddcbdf7df5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2667f14a89bc5492f51ff0ee794ee75d8068f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2667f14a89bc5492f51ff0ee794ee75d8068f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2667f14a89bc5492f51ff0ee794ee75d8068f43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2667f14a89bc5492f51ff0ee794ee75d8068f43/comments", "author": null, "committer": null, "parents": [{"sha": "b204e984c7689767e4a853ca09e7fda1406a201b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b204e984c7689767e4a853ca09e7fda1406a201b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b204e984c7689767e4a853ca09e7fda1406a201b"}], "stats": {"total": 128, "additions": 105, "deletions": 23}, "files": [{"sha": "8b146ae655e7e2d0ccb2bb69478b6a7663e69076", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -1,3 +1,31 @@\n+2015-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* s-fileio.adb (Fopen_Mode): Use \"r+\" for Out_File/Stream_IO,\n+\tso the file won't be truncated on 'fopen', as required by\n+\tAI95-00283-1.\n+\n+2015-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat1drv.adb, prj.adb, sem_ch6.adb, s-regpat.adb,\n+\tsem_prag.adb: Fix typos.\n+\t* einfo.ads, restrict.ads: Minor comment fixes.\n+\t* err_vars.ads, sem_util.adb, errout.ads: Code clean up.\n+\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Do not check that the\n+\tLeft-hand side is legal in an inlined body, check is done on\n+\tthe original template.\n+\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.ads, exp_util.adb (Find_Primitive_Operations): New\n+\tsubprogram to retrieve by name the possibly overloaded set of\n+\tprimitive operations of a type.\n+\t* sem_ch4.adb (Try_Container_Indexing): Use\n+\tFind_Primitive_Operations to handle overloaded indexing operations\n+\tof a derived type.\n+\n 2015-10-26  Arnaud Charlet  <charlet@adacore.com>\n \n \t* osint-c.ads: Minor comment update."}, {"sha": "22e42dd6de103f641faa3bc2ce9e9678c6d6a5a2", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -1566,7 +1566,7 @@ package Einfo is\n --       delayed and is one of the characteristics that may be inherited by\n --       types derived from this type if not overridden. If this flag is set,\n --       then types derived from this type have May_Inherit_Delayed_Rep_Aspects\n---       set, signalling that Freeze.Inhert_Delayed_Rep_Aspects must be called\n+--       set, signalling that Freeze.Inherit_Delayed_Rep_Aspects must be called\n --       at the freeze point of the derived type.\n \n --    Has_Discriminants (Flag5)"}, {"sha": "0c2fb6f7c9245bdda87c16a903e6ff823750b4de", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -54,7 +54,7 @@ package Err_Vars is\n    --  variables are not reset by calls to the error message routines, so the\n    --  caller is responsible for resetting the default behavior after use.\n \n-   Error_Msg_Qual_Level : Int := 0;\n+   Error_Msg_Qual_Level : Nat := 0;\n    --  Number of levels of qualification required for type name (see the\n    --  description of the } insertion character. Note that this value does\n    --  not get reset by any Error_Msg call, so the caller is responsible"}, {"sha": "4540c9380ae4eb2652512f9023e2128294c1c546", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -474,7 +474,7 @@ package Errout is\n    Error_Msg_Node_2 : Node_Id renames Err_Vars.Error_Msg_Node_2;\n    --  Node_Id values for & insertion characters in message\n \n-   Error_Msg_Qual_Level : Int renames Err_Vars.Error_Msg_Qual_Level;\n+   Error_Msg_Qual_Level : Nat renames Err_Vars.Error_Msg_Qual_Level;\n    --  Number of levels of qualification required for type name (see the\n    --  description of the } insertion character). Note that this value does\n    --  not get reset by any Error_Msg call, so the caller is responsible"}, {"sha": "73fb9b85deabe997362ba908f8a42b58d21bebbb", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -2707,6 +2707,50 @@ package body Exp_Util is\n       end if;\n    end Find_Optional_Prim_Op;\n \n+   -------------------------------\n+   -- Find_Primitive_Operations --\n+   -------------------------------\n+\n+   function Find_Primitive_Operations\n+     (T    : Entity_Id;\n+      Name : Name_Id) return Node_Id\n+   is\n+      Prim_Elmt : Elmt_Id;\n+      Prim_Id   : Entity_Id;\n+      Ref       : Node_Id;\n+      Typ       : Entity_Id := T;\n+\n+   begin\n+      if Is_Class_Wide_Type (Typ) then\n+         Typ := Root_Type (Typ);\n+      end if;\n+\n+      Typ := Underlying_Type (Typ);\n+\n+      Ref := Empty;\n+      Prim_Elmt := First_Elmt (Primitive_Operations (Typ));\n+      while Present (Prim_Elmt) loop\n+         Prim_Id := Node (Prim_Elmt);\n+            if Chars (Prim_Id) = Name then\n+\n+               --  If this is the first primitive operation found,\n+               --  create a reference to it.\n+\n+               if No (Ref) then\n+                  Ref := New_Occurrence_Of (Prim_Id, Sloc (T));\n+\n+               --  Otherwise, add interpretation to existing reference\n+\n+               else\n+                  Add_One_Interp (Ref, Prim_Id, Etype (Prim_Id));\n+               end if;\n+            end if;\n+         Next_Elmt (Prim_Elmt);\n+      end loop;\n+\n+      return Ref;\n+   end Find_Primitive_Operations;\n+\n    ------------------\n    -- Find_Prim_Op --\n    ------------------"}, {"sha": "b6cf41d3b59f0b14ad43bb1c81ac50bb0b6859c4", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -467,6 +467,13 @@ package Exp_Util is\n    --  Ada 2005 (AI-251): Given a type T implementing the interface Iface,\n    --  return the record component containing the tag of Iface.\n \n+   function Find_Primitive_Operations\n+     (T    : Entity_Id;\n+      Name : Name_Id) return Node_Id;\n+   --  Return a reference to a primitive operation with given name. If\n+   --  operation is overloaded, the node carries the corresponding set\n+   --  of overloaded interpretations.\n+\n    function Find_Prim_Op (T : Entity_Id; Name : Name_Id) return Entity_Id;\n    --  Find the first primitive operation of a tagged type T with name Name.\n    --  This function allows the use of a primitive operation which is not"}, {"sha": "cd89cb570fdd78cea52b8db148b3e5fd451e0372", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -1036,7 +1036,7 @@ begin\n       Original_Operating_Mode := Operating_Mode;\n       Frontend;\n \n-      --  Exit with errors if the main source could not be parsed.\n+      --  Exit with errors if the main source could not be parsed\n \n       if Sinput.Main_Source_File = No_Source_File then\n          Errout.Finalize (Last_Call => True);"}, {"sha": "ac5b445cdaf23b7c7eecceaff9097c03c6fa6534", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -143,7 +143,7 @@ package body Prj is\n \n       while Last + S'Length > To'Last loop\n          declare\n-            New_Buffer : constant  String_Access :=\n+            New_Buffer : constant String_Access :=\n                            new String (1 .. 2 * To'Length);\n          begin\n             New_Buffer (1 .. Last) := To (1 .. Last);"}, {"sha": "c34113a7da761272a23e686f5952bb29b44c3627", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -546,7 +546,7 @@ package Restrict is\n    function Cunit_Boolean_Restrictions_Save\n      return Save_Cunit_Boolean_Restrictions;\n    --  This function saves the compilation unit restriction settings, leaving\n-   --  then unchanged. This is used e.g. at the start of processing a context\n+   --  them unchanged. This is used e.g. at the start of processing a context\n    --  clause, so that the main unit restrictions can be restored after all\n    --  the with'ed units have been processed.\n "}, {"sha": "e9d54f84f47ba86c99237d7abe8556df3597a199", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -433,8 +433,8 @@ package body System.File_IO is\n    --                                     OPEN         CREATE\n    --     Append_File                     \"r+\"           \"w+\"\n    --     In_File                         \"r\"            \"w+\"\n-   --     Out_File (Direct_IO)            \"r+\"           \"w\"\n-   --     Out_File (all others)           \"w\"            \"w\"\n+   --     Out_File (Direct_IO, Stream_IO) \"r+\"           \"w\"\n+   --     Out_File (others)               \"w\"            \"w\"\n    --     Inout_File                      \"r+\"           \"w+\"\n \n    --  Note: we do not use \"a\" or \"a+\" for Append_File, since this would not\n@@ -479,7 +479,7 @@ package body System.File_IO is\n             end if;\n \n          when Out_File =>\n-            if Amethod = 'D' and then not Creat then\n+            if Amethod in 'D' | 'S' and then not Creat then\n                Fopstr (1) := 'r';\n                Fopstr (2) := '+';\n                Fptr := 3;"}, {"sha": "4127ec995231128cd557300e2aa08551ca55f81f", "filename": "gcc/ada/s-regpat.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fs-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fs-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regpat.adb?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                                                                          --\n --               Copyright (C) 1986 by University of Toronto.               --\n---                      Copyright (C) 1999-2014, AdaCore                    --\n+--                      Copyright (C) 1999-2015, AdaCore                    --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -413,7 +413,7 @@ package body System.Regpat is\n          Capturing     : Boolean;\n          Flags         : out Expression_Flags;\n          IP            : out Pointer);\n-      --  Parse regular expression, i.e. main body or parenthesized thing\n+      --  Parse regular expression, i.e. main body or parenthesized thing.\n       --  Caller must absorb opening parenthesis. Capturing should be set to\n       --  True when we have an open parenthesis from which we want the user\n       --  to extra text.\n@@ -422,7 +422,7 @@ package body System.Regpat is\n         (Flags         : out Expression_Flags;\n          First         : Boolean;\n          IP            : out Pointer);\n-      --  Implements the concatenation operator and handles '|'\n+      --  Implements the concatenation operator and handles '|'.\n       --  First should be true if this is the first item of the alternative.\n \n       procedure Parse_Piece"}, {"sha": "3b55ea3971f9685d3716fa94314bc1c75e22754a", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -7215,20 +7215,17 @@ package body Sem_Ch4 is\n \n       --  However, Reference is also a primitive operation of the type, and\n       --  the inherited operation has a different signature. We retrieve the\n-      --  right one from the list of primitive operations of the derived type.\n+      --  right ones (the function may be overloaded) from the list of\n+      --  primitive operations of the derived type.\n \n       --  Note that predefined containers are typically all derived from one\n       --  of the Controlled types. The code below is motivated by containers\n       --  that are derived from other types with a Reference aspect.\n \n-      --  Additional machinery may be needed for types that have several user-\n-      --  defined Reference operations with different signatures ???\n-\n       elsif Is_Derived_Type (C_Type)\n         and then Etype (First_Formal (Entity (Func_Name))) /= Etype (Prefix)\n       then\n-         Func := Find_Prim_Op (C_Type, Chars (Func_Name));\n-         Func_Name := New_Occurrence_Of (Func, Loc);\n+         Func_Name := Find_Primitive_Operations (C_Type, Chars (Func_Name));\n       end if;\n \n       Assoc := New_List (Relocate_Node (Prefix));"}, {"sha": "3e791799c2adc8605fccf199f02a8b5b0ff753b2", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -394,7 +394,13 @@ package body Sem_Ch5 is\n \n       --  Cases where Lhs is not a variable\n \n-      if not Is_Variable (Lhs) then\n+      --  Cases where Lhs is not a variable. In an instance or an inlined body\n+      --  no need for further check because assignment was legal in template.\n+\n+      if In_Inlined_Body then\n+         null;\n+\n+      elsif not Is_Variable (Lhs) then\n \n          --  Ada 2005 (AI-327): Check assignment to the attribute Priority of a\n          --  protected object."}, {"sha": "97d852005871568a79e5378c4deefb516e23a76a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -4833,7 +4833,7 @@ package body Sem_Ch6 is\n \n                else\n                   declare\n-                     T : constant  Entity_Id := Find_Dispatching_Type (New_Id);\n+                     T : constant Entity_Id := Find_Dispatching_Type (New_Id);\n                   begin\n                      if Is_Protected_Type (Corresponding_Concurrent_Type (T))\n                      then"}, {"sha": "cd0a392c7fc5db9a4ca899aba9f7b4f55f91b3ec", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -4635,7 +4635,7 @@ package body Sem_Prag is\n          P : constant Node_Id := Parent (N);\n \n       begin\n-         --  Must be at in subprogram body\n+         --  Must be in subprogram body\n \n          if Nkind (P) /= N_Subprogram_Body then\n             Error_Pragma (\"% pragma allowed only in subprogram\");"}, {"sha": "cf7c57e3c0171bdf530e4c604e2c25e170e47acb", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2667f14a89bc5492f51ff0ee794ee75d8068f43/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a2667f14a89bc5492f51ff0ee794ee75d8068f43", "patch": "@@ -19690,7 +19690,7 @@ package body Sem_Util is\n             Expec_Scope := Expec_Type;\n             Found_Scope := Found_Type;\n \n-            for Levels in Int range 0 .. 3 loop\n+            for Levels in Nat range 0 .. 3 loop\n                if Chars (Expec_Scope) /= Chars (Found_Scope) then\n                   Error_Msg_Qual_Level := Levels;\n                   exit;"}]}