{"sha": "0cb5c2a7ce78df98164d7aa140f5d09766b24427", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNiNWMyYTdjZTc4ZGY5ODE2NGQ3YWExNDBmNWQwOTc2NmIyNDQyNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-04-18T09:19:38Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-04-18T09:19:38Z"}, "message": "gigi.h (create_var_decl_1): Declare.\n\n\t* gigi.h (create_var_decl_1): Declare.\n\t(create_var_decl): Turn into a macro invoking create_var_decl_1.\n\t(create_true_var_decl): Likewise.\n\t* utils.c (create_var_decl_1): Make global and reorder parameters.\n\t(create_var_decl): Delete.\n\t(create_true_var_decl): Likewise.\n\nFrom-SVN: r134429", "tree": {"sha": "858fd8b23dc90bb0f5d1b4815aa52186e80a3bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/858fd8b23dc90bb0f5d1b4815aa52186e80a3bc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cb5c2a7ce78df98164d7aa140f5d09766b24427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb5c2a7ce78df98164d7aa140f5d09766b24427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb5c2a7ce78df98164d7aa140f5d09766b24427", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb5c2a7ce78df98164d7aa140f5d09766b24427/comments", "author": null, "committer": null, "parents": [{"sha": "c993ae60a95a8bb72f38225c3389e637c009f383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c993ae60a95a8bb72f38225c3389e637c009f383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c993ae60a95a8bb72f38225c3389e637c009f383"}], "stats": {"total": 110, "additions": 51, "deletions": 59}, "files": [{"sha": "674c299cb18820166847cc0637c4ff83cc0743e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb5c2a7ce78df98164d7aa140f5d09766b24427/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb5c2a7ce78df98164d7aa140f5d09766b24427/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0cb5c2a7ce78df98164d7aa140f5d09766b24427", "patch": "@@ -1,3 +1,12 @@\n+2008-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gigi.h (create_var_decl_1): Declare.\n+\t(create_var_decl): Turn into a macro invoking create_var_decl_1.\n+\t(create_true_var_decl): Likewise.\n+\t* utils.c (create_var_decl_1): Make global and reorder parameters.\n+\t(create_var_decl): Delete.\n+\t(create_true_var_decl): Likewise.\n+\n 2008-04-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (gnat_to_gnu_entity) <object>: Promote the alignment of"}, {"sha": "2515cedda136352f79dbba0d983f3ee641165b25", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb5c2a7ce78df98164d7aa140f5d09766b24427/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb5c2a7ce78df98164d7aa140f5d09766b24427/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=0cb5c2a7ce78df98164d7aa140f5d09766b24427", "patch": "@@ -564,36 +564,51 @@ extern tree create_type_decl (tree type_name, tree type,\n                               bool artificial_p, bool debug_info_p,\n \t\t\t      Node_Id gnat_node);\n \n-/* Returns a GCC VAR_DECL or CONST_DECL node.\n+/* Return a VAR_DECL or CONST_DECL node.\n \n    VAR_NAME gives the name of the variable.  ASM_NAME is its assembler name\n    (if provided).  TYPE is its data type (a GCC ..._TYPE node).  VAR_INIT is\n    the GCC tree for an optional initial expression; NULL_TREE if none.\n \n-   CONST_FLAG is true if this variable is constant.\n+   CONST_FLAG is true if this variable is constant, in which case we might\n+   return a CONST_DECL node unless CONST_DECL_ALLOWED_P is false.\n \n    PUBLIC_FLAG is true if this definition is to be made visible outside of\n    the current compilation unit. This flag should be set when processing the\n-   variable definitions in a package specification.  EXTERN_FLAG is nonzero\n-   when processing an external variable declaration (as opposed to a\n-   definition: no storage is to be allocated for the variable here).\n+   variable definitions in a package specification.\n+\n+   EXTERN_FLAG is nonzero when processing an external variable declaration (as\n+   opposed to a definition: no storage is to be allocated for the variable).\n \n    STATIC_FLAG is only relevant when not at top level.  In that case\n    it indicates whether to always allocate storage to the variable.\n \n    GNAT_NODE is used for the position of the decl.  */\n-extern tree create_var_decl (tree var_name, tree asm_name, tree type,\n-                             tree var_init, bool const_flag,\n-                             bool public_flag, bool extern_flag,\n-                             bool static_flag,\n-\t\t\t     struct attrib *attr_list, Node_Id gnat_node);\n-\n-/* Similar to create_var_decl, forcing the creation of a VAR_DECL node.  */\n-extern tree create_true_var_decl (tree var_name, tree asm_name, tree type,\n-\t\t\t\t  tree var_init, bool const_flag,\n-\t\t\t\t  bool public_flag, bool extern_flag,\n-\t\t\t\t  bool static_flag,\n-\t\t\t\t  struct attrib *attr_list, Node_Id gnat_node);\n+tree\n+create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n+\t\t   bool const_flag, bool public_flag, bool extern_flag,\n+\t\t   bool static_flag, bool const_decl_allowed_p,\n+\t\t   struct attrib *attr_list, Node_Id gnat_node);\n+\n+/* Wrapper around create_var_decl_1 for cases where we don't care whether\n+   a VAR or a CONST decl node is created.  */\n+#define create_var_decl(var_name, asm_name, type, var_init,\t\\\n+\t\t\tconst_flag, public_flag, extern_flag,\t\\\n+\t\t\tstatic_flag, attr_list, gnat_node)\t\\\n+  create_var_decl_1 (var_name, asm_name, type, var_init,\t\\\n+\t\t     const_flag, public_flag, extern_flag,\t\\\n+\t\t     static_flag, true, attr_list, gnat_node)\n+\n+/* Wrapper around create_var_decl_1 for cases where a VAR_DECL node is\n+   required.  The primary intent is for DECL_CONST_CORRESPONDING_VARs, which\n+   must be VAR_DECLs and on which we want TREE_READONLY set to have them\n+   possibly assigned to a readonly data section.  */\n+#define create_true_var_decl(var_name, asm_name, type, var_init,\t\\\n+\t\t\t     const_flag, public_flag, extern_flag,\t\\\n+\t\t\t     static_flag, attr_list, gnat_node)\t\t\\\n+  create_var_decl_1 (var_name, asm_name, type, var_init,\t\t\\\n+\t\t     const_flag, public_flag, extern_flag,\t\t\\\n+\t\t     static_flag, false, attr_list, gnat_node)\n \n /* Given a DECL and ATTR_LIST, apply the listed attributes.  */\n extern void process_attributes (tree decl, struct attrib *attr_list);"}, {"sha": "cafcc2d9770858a1f82a1e44aac53706716dd340", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 10, "deletions": 42, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb5c2a7ce78df98164d7aa140f5d09766b24427/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb5c2a7ce78df98164d7aa140f5d09766b24427/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=0cb5c2a7ce78df98164d7aa140f5d09766b24427", "patch": "@@ -1418,31 +1418,31 @@ create_type_decl (tree type_name, tree type, struct attrib *attr_list,\n   return type_decl;\n }\n \n-/* Helper for create_var_decl and create_true_var_decl. Returns a GCC VAR_DECL\n-   or CONST_DECL node.\n+/* Return a VAR_DECL or CONST_DECL node.\n \n    VAR_NAME gives the name of the variable.  ASM_NAME is its assembler name\n    (if provided).  TYPE is its data type (a GCC ..._TYPE node).  VAR_INIT is\n    the GCC tree for an optional initial expression; NULL_TREE if none.\n \n    CONST_FLAG is true if this variable is constant, in which case we might\n-   return a CONST_DECL node unless CONST_DECL_ALLOWED_FLAG is false.\n+   return a CONST_DECL node unless CONST_DECL_ALLOWED_P is false.\n \n    PUBLIC_FLAG is true if this definition is to be made visible outside of\n    the current compilation unit. This flag should be set when processing the\n-   variable definitions in a package specification.  EXTERN_FLAG is nonzero\n-   when processing an external variable declaration (as opposed to a\n-   definition: no storage is to be allocated for the variable here).\n+   variable definitions in a package specification.\n+\n+   EXTERN_FLAG is nonzero when processing an external variable declaration (as\n+   opposed to a definition: no storage is to be allocated for the variable).\n \n    STATIC_FLAG is only relevant when not at top level.  In that case\n    it indicates whether to always allocate storage to the variable.\n \n    GNAT_NODE is used for the position of the decl.  */\n \n-static tree\n+tree\n create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n-\t\t   bool const_flag, bool const_decl_allowed_flag,\n-\t\t   bool public_flag, bool extern_flag, bool static_flag,\n+\t\t   bool const_flag, bool public_flag, bool extern_flag,\n+\t\t   bool static_flag, bool const_decl_allowed_p,\n \t\t   struct attrib *attr_list, Node_Id gnat_node)\n {\n   bool init_const\n@@ -1464,7 +1464,7 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n   /* The actual DECL node.  CONST_DECL was initially intended for enumerals\n      and may be used for scalars in general but not for aggregates.  */\n   tree var_decl\n-    = build_decl ((constant_p && const_decl_allowed_flag\n+    = build_decl ((constant_p && const_decl_allowed_p\n \t\t   && !AGGREGATE_TYPE_P (type)) ? CONST_DECL : VAR_DECL,\n \t\t  var_name, type);\n \n@@ -1528,38 +1528,6 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n \n   return var_decl;\n }\n-\n-/* Wrapper around create_var_decl_1 for cases where we don't care whether\n-   a VAR or a CONST decl node is created.  */\n-\n-tree\n-create_var_decl (tree var_name, tree asm_name, tree type, tree var_init,\n-\t\t bool const_flag, bool public_flag, bool extern_flag,\n-\t\t bool static_flag, struct attrib *attr_list,\n-\t\t Node_Id gnat_node)\n-{\n-  return create_var_decl_1 (var_name, asm_name, type, var_init,\n-\t\t\t    const_flag, true,\n-\t\t\t    public_flag, extern_flag, static_flag,\n-\t\t\t    attr_list, gnat_node);\n-}\n-\n-/* Wrapper around create_var_decl_1 for cases where a VAR_DECL node is\n-   required.  The primary intent is for DECL_CONST_CORRESPONDING_VARs, which\n-   must be VAR_DECLs and on which we want TREE_READONLY set to have them\n-   possibly assigned to a readonly data section.  */\n-\n-tree\n-create_true_var_decl (tree var_name, tree asm_name, tree type, tree var_init,\n-\t\t      bool const_flag, bool public_flag, bool extern_flag,\n-\t\t      bool static_flag, struct attrib *attr_list,\n-\t\t      Node_Id gnat_node)\n-{\n-  return create_var_decl_1 (var_name, asm_name, type, var_init,\n-\t\t\t    const_flag, false,\n-\t\t\t    public_flag, extern_flag, static_flag,\n-\t\t\t    attr_list, gnat_node);\n-}\n \f\n /* Return true if TYPE, an aggregate type, contains (or is) an array.  */\n "}]}