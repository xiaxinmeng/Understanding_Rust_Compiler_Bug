{"sha": "27c07cc5d06c0f74d147c14c6a4b0b071266e774", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdjMDdjYzVkMDZjMGY3NGQxNDdjMTRjNmE0YjBiMDcxMjY2ZTc3NA==", "commit": {"author": {"name": "Radovan Obradovic", "email": "robradovic@mips.com", "date": "2014-05-28T09:43:11Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-05-28T09:43:11Z"}, "message": "-fuse-caller-save - Collect register usage information\n\n2014-05-28  Radovan Obradovic  <robradovic@mips.com>\n            Tom de Vries  <tom@codesourcery.com>\n\n\t* cgraph.h (struct cgraph_rtl_info): Add function_used_regs\n\tand function_used_regs_valid fields.\n\t* final.c: Move include of hard-reg-set.h to before rtl.h to declare\n\tfind_all_hard_reg_sets.\n\t(collect_fn_hard_reg_usage, get_call_fndecl, get_call_cgraph_rtl_info)\n\t(get_call_reg_set_usage): New function.\n\t(rest_of_handle_final): Use collect_fn_hard_reg_usage.\n\t* regs.h (get_call_reg_set_usage): Declare.\n\nCo-Authored-By: Tom de Vries <tom@codesourcery.com>\n\nFrom-SVN: r211006", "tree": {"sha": "adc9457c04ab6c4cb81a5e67f444ea92a7ebf3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adc9457c04ab6c4cb81a5e67f444ea92a7ebf3e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27c07cc5d06c0f74d147c14c6a4b0b071266e774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c07cc5d06c0f74d147c14c6a4b0b071266e774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c07cc5d06c0f74d147c14c6a4b0b071266e774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c07cc5d06c0f74d147c14c6a4b0b071266e774/comments", "author": null, "committer": null, "parents": [{"sha": "ca48e5efaee333309fcc62c9afbc65b7d5952d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca48e5efaee333309fcc62c9afbc65b7d5952d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca48e5efaee333309fcc62c9afbc65b7d5952d3d"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "5264478cf6a43a82728b7a6cf41891f4848275ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c07cc5d06c0f74d147c14c6a4b0b071266e774/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c07cc5d06c0f74d147c14c6a4b0b071266e774/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27c07cc5d06c0f74d147c14c6a4b0b071266e774", "patch": "@@ -1,3 +1,15 @@\n+2014-05-28  Radovan Obradovic  <robradovic@mips.com>\n+            Tom de Vries  <tom@codesourcery.com>\n+\n+\t* cgraph.h (struct cgraph_rtl_info): Add function_used_regs\n+\tand function_used_regs_valid fields.\n+\t* final.c: Move include of hard-reg-set.h to before rtl.h to declare\n+\tfind_all_hard_reg_sets.\n+\t(collect_fn_hard_reg_usage, get_call_fndecl, get_call_cgraph_rtl_info)\n+\t(get_call_reg_set_usage): New function.\n+\t(rest_of_handle_final): Use collect_fn_hard_reg_usage.\n+\t* regs.h (get_call_reg_set_usage): Declare.\n+\n 2014-05-28  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR libgcc/61152"}, {"sha": "94a8f252c47c41666acf4ad4ad06f8818b87f4f8", "filename": "gcc/cgraph.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c07cc5d06c0f74d147c14c6a4b0b071266e774/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c07cc5d06c0f74d147c14c6a4b0b071266e774/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=27c07cc5d06c0f74d147c14c6a4b0b071266e774", "patch": "@@ -249,6 +249,13 @@ struct GTY(()) cgraph_global_info {\n \n struct GTY(()) cgraph_rtl_info {\n    unsigned int preferred_incoming_stack_boundary;\n+\n+  /* Call unsaved hard registers really used by the corresponding\n+     function (including ones used by functions called by the\n+     function).  */\n+  HARD_REG_SET function_used_regs;\n+  /* Set if function_used_regs is valid.  */\n+  unsigned function_used_regs_valid: 1;\n };\n \n /* Represent which DECL tree (or reference to such tree)"}, {"sha": "f75edd5b3303f47cadd40a40974fa59ca63eeeb6", "filename": "gcc/final.c", "status": "modified", "additions": 116, "deletions": 1, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c07cc5d06c0f74d147c14c6a4b0b071266e774/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c07cc5d06c0f74d147c14c6a4b0b071266e774/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=27c07cc5d06c0f74d147c14c6a4b0b071266e774", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"tree.h\"\n #include \"varasm.h\"\n+#include \"hard-reg-set.h\"\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"regs.h\"\n@@ -57,7 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"conditions.h\"\n #include \"flags.h\"\n-#include \"hard-reg-set.h\"\n #include \"output.h\"\n #include \"except.h\"\n #include \"function.h\"\n@@ -224,6 +224,7 @@ static int alter_cond (rtx);\n static int final_addr_vec_align (rtx);\n #endif\n static int align_fuzz (rtx, rtx, int, unsigned);\n+static void collect_fn_hard_reg_usage (void);\n \f\n /* Initialize data in final at the beginning of a compilation.  */\n \n@@ -4442,6 +4443,8 @@ rest_of_handle_final (void)\n   assemble_start_function (current_function_decl, fnname);\n   final_start_function (get_insns (), asm_out_file, optimize);\n   final (get_insns (), asm_out_file, optimize);\n+  if (flag_use_caller_save)\n+    collect_fn_hard_reg_usage ();\n   final_end_function ();\n \n   /* The IA-64 \".handlerdata\" directive must be issued before the \".endp\"\n@@ -4740,3 +4743,115 @@ make_pass_clean_state (gcc::context *ctxt)\n {\n   return new pass_clean_state (ctxt);\n }\n+\n+/* Collect hard register usage for the current function.  */\n+\n+static void\n+collect_fn_hard_reg_usage (void)\n+{\n+  rtx insn;\n+  int i;\n+  struct cgraph_rtl_info *node;\n+\n+  /* ??? To be removed when all the ports have been fixed.  */\n+  if (!targetm.call_fusage_contains_non_callee_clobbers)\n+    return;\n+\n+  node = cgraph_rtl_info (current_function_decl);\n+  gcc_assert (node != NULL);\n+\n+  for (insn = get_insns (); insn != NULL_RTX; insn = next_insn (insn))\n+    {\n+      HARD_REG_SET insn_used_regs;\n+\n+      if (!NONDEBUG_INSN_P (insn))\n+\tcontinue;\n+\n+      find_all_hard_reg_sets (insn, &insn_used_regs, false);\n+\n+      if (CALL_P (insn)\n+\t  && !get_call_reg_set_usage (insn, &insn_used_regs, call_used_reg_set))\n+\t{\n+\t  CLEAR_HARD_REG_SET (node->function_used_regs);\n+\t  return;\n+\t}\n+\n+      IOR_HARD_REG_SET (node->function_used_regs, insn_used_regs);\n+    }\n+\n+  /* Be conservative - mark fixed and global registers as used.  */\n+  IOR_HARD_REG_SET (node->function_used_regs, fixed_reg_set);\n+  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+    if (global_regs[i])\n+      SET_HARD_REG_BIT (node->function_used_regs, i);\n+\n+#ifdef STACK_REGS\n+  /* Handle STACK_REGS conservatively, since the df-framework does not\n+     provide accurate information for them.  */\n+\n+  for (i = FIRST_STACK_REG; i <= LAST_STACK_REG; i++)\n+    SET_HARD_REG_BIT (node->function_used_regs, i);\n+#endif\n+\n+  node->function_used_regs_valid = 1;\n+}\n+\n+/* Get the declaration of the function called by INSN.  */\n+\n+static tree\n+get_call_fndecl (rtx insn)\n+{\n+  rtx note, datum;\n+\n+  note = find_reg_note (insn, REG_CALL_DECL, NULL_RTX);\n+  if (note == NULL_RTX)\n+    return NULL_TREE;\n+\n+  datum = XEXP (note, 0);\n+  if (datum != NULL_RTX)\n+    return SYMBOL_REF_DECL (datum);\n+\n+  return NULL_TREE;\n+}\n+\n+/* Return the cgraph_rtl_info of the function called by INSN.  Returns NULL for\n+   call targets that can be overwritten.  */\n+\n+static struct cgraph_rtl_info *\n+get_call_cgraph_rtl_info (rtx insn)\n+{\n+  tree fndecl;\n+\n+  if (insn == NULL_RTX)\n+    return NULL;\n+\n+  fndecl = get_call_fndecl (insn);\n+  if (fndecl == NULL_TREE\n+      || !decl_binds_to_current_def_p (fndecl))\n+    return NULL;\n+\n+  return cgraph_rtl_info (fndecl);\n+}\n+\n+/* Find hard registers used by function call instruction INSN, and return them\n+   in REG_SET.  Return DEFAULT_SET in REG_SET if not found.  */\n+\n+bool\n+get_call_reg_set_usage (rtx insn, HARD_REG_SET *reg_set,\n+\t\t\tHARD_REG_SET default_set)\n+{\n+  if (flag_use_caller_save)\n+    {\n+      struct cgraph_rtl_info *node = get_call_cgraph_rtl_info (insn);\n+      if (node != NULL\n+\t  && node->function_used_regs_valid)\n+\t{\n+\t  COPY_HARD_REG_SET (*reg_set, node->function_used_regs);\n+\t  AND_HARD_REG_SET (*reg_set, default_set);\n+\t  return true;\n+\t}\n+    }\n+\n+  COPY_HARD_REG_SET (*reg_set, default_set);\n+  return false;\n+}"}, {"sha": "be81db46a7e46e2c3c40231750cb4af03955dcef", "filename": "gcc/regs.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c07cc5d06c0f74d147c14c6a4b0b071266e774/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c07cc5d06c0f74d147c14c6a4b0b071266e774/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=27c07cc5d06c0f74d147c14c6a4b0b071266e774", "patch": "@@ -419,4 +419,8 @@ range_in_hard_reg_set_p (const HARD_REG_SET set, unsigned regno, int nregs)\n   return true;\n }\n \n+/* Get registers used by given function call instruction.  */\n+extern bool get_call_reg_set_usage (rtx insn, HARD_REG_SET *reg_set,\n+\t\t\t\t    HARD_REG_SET default_set);\n+\n #endif /* GCC_REGS_H */"}]}