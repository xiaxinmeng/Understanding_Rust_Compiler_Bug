{"sha": "7784232540214b0fa500fa5682326f8841f170d5", "node_id": "C_kwDOANBUbNoAKDc3ODQyMzI1NDAyMTRiMGZhNTAwZmE1NjgyMzI2Zjg4NDFmMTcwZDU", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-07-07T18:25:52Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-07-07T18:25:52Z"}, "message": "backend: factor out check_match_scrutinee\n\nThis commit pulls some of the validation of the match expression\nscrutinee out into a helper, since it will be needed to be reused when\ncompiling matches on tuples.", "tree": {"sha": "7b30df7800c656949dcf64e28e193b4f3580ce6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b30df7800c656949dcf64e28e193b4f3580ce6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7784232540214b0fa500fa5682326f8841f170d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7784232540214b0fa500fa5682326f8841f170d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7784232540214b0fa500fa5682326f8841f170d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7784232540214b0fa500fa5682326f8841f170d5/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe64842ff930e552917272319de55f9a1e4cd2fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe64842ff930e552917272319de55f9a1e4cd2fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe64842ff930e552917272319de55f9a1e4cd2fa"}], "stats": {"total": 75, "additions": 50, "deletions": 25}, "files": [{"sha": "02015b1a7c2fb4e5a5a82166bb271ff158ee4f25", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7784232540214b0fa500fa5682326f8841f170d5/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7784232540214b0fa500fa5682326f8841f170d5/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=7784232540214b0fa500fa5682326f8841f170d5", "patch": "@@ -181,6 +181,54 @@ CompileExpr::visit (HIR::DereferenceExpr &expr)\n \t\t\t\t\t\tknown_valid, expr.get_locus ());\n }\n \n+\n+// Helper for CompileExpr::visit (HIR::MatchExpr).\n+// Check that the scrutinee of EXPR is a valid kind of expression to match on.\n+// Return the TypeKind of the scrutinee if it is valid, or TyTy::TypeKind::ERROR\n+// if not.\n+static TyTy::TypeKind\n+check_match_scrutinee (HIR::MatchExpr &expr, Context *ctx)\n+{\n+  TyTy::BaseType *scrutinee_expr_tyty = nullptr;\n+  if (!ctx->get_tyctx ()->lookup_type (\n+\texpr.get_scrutinee_expr ()->get_mappings ().get_hirid (),\n+\t&scrutinee_expr_tyty))\n+    {\n+      return TyTy::TypeKind::ERROR;\n+    }\n+\n+  TyTy::TypeKind scrutinee_kind = scrutinee_expr_tyty->get_kind ();\n+  rust_assert ((TyTy::is_primitive_type_kind (scrutinee_kind)\n+\t\t&& scrutinee_kind != TyTy::TypeKind::NEVER)\n+\t       || scrutinee_kind == TyTy::TypeKind::ADT\n+\t       || scrutinee_kind == TyTy::TypeKind::TUPLE);\n+\n+  if (scrutinee_kind == TyTy::TypeKind::ADT)\n+    {\n+      // this will need to change but for now the first pass implementation,\n+      // lets assert this is the case\n+      TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (scrutinee_expr_tyty);\n+      rust_assert (adt->is_enum ());\n+      rust_assert (adt->number_of_variants () > 0);\n+    }\n+  else if (scrutinee_kind == TyTy::TypeKind::FLOAT)\n+    {\n+      // FIXME: CASE_LABEL_EXPR does not support floating point types.\n+      // Find another way to compile these.\n+      rust_sorry_at (expr.get_locus (),\n+\t\t     \"match on floating-point types is not yet supported\");\n+    }\n+\n+  TyTy::BaseType *expr_tyty = nullptr;\n+  if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n+\t\t\t\t       &expr_tyty))\n+    {\n+      return TyTy::TypeKind::ERROR;\n+    }\n+\n+  return scrutinee_kind;\n+}\n+\n void\n CompileExpr::visit (HIR::MatchExpr &expr)\n {\n@@ -213,36 +261,13 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n        the control flow graph.  */\n   // DEFTREECODE (CASE_LABEL_EXPR, \"case_label_expr\", tcc_statement, 4)\n \n-  TyTy::BaseType *scrutinee_expr_tyty = nullptr;\n-  if (!ctx->get_tyctx ()->lookup_type (\n-\texpr.get_scrutinee_expr ()->get_mappings ().get_hirid (),\n-\t&scrutinee_expr_tyty))\n+  TyTy::TypeKind scrutinee_kind = check_match_scrutinee (expr, ctx);\n+  if (scrutinee_kind == TyTy::TypeKind::ERROR)\n     {\n       translated = error_mark_node;\n       return;\n     }\n \n-  TyTy::TypeKind scrutinee_kind = scrutinee_expr_tyty->get_kind ();\n-  rust_assert ((TyTy::is_primitive_type_kind (scrutinee_kind)\n-\t\t&& scrutinee_kind != TyTy::TypeKind::NEVER)\n-\t       || scrutinee_kind == TyTy::TypeKind::ADT);\n-\n-  if (scrutinee_kind == TyTy::TypeKind::ADT)\n-    {\n-      // this will need to change but for now the first pass implementation,\n-      // lets assert this is the case\n-      TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (scrutinee_expr_tyty);\n-      rust_assert (adt->is_enum ());\n-      rust_assert (adt->number_of_variants () > 0);\n-    }\n-  else if (scrutinee_kind == TyTy::TypeKind::FLOAT)\n-    {\n-      // FIXME: CASE_LABEL_EXPR does not support floating point types.\n-      // Find another way to compile these.\n-      rust_sorry_at (expr.get_locus (),\n-\t\t     \"match on floating-point types is not yet supported\");\n-    }\n-\n   TyTy::BaseType *expr_tyty = nullptr;\n   if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n \t\t\t\t       &expr_tyty))"}]}