{"sha": "0a587f65653b553099daff424f1d2d1dca7393cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE1ODdmNjU2NTNiNTUzMDk5ZGFmZjQyNGYxZDJkMWRjYTczOTNjYg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-16T12:12:24Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-16T12:12:24Z"}, "message": "arm.c (arm_option_optimization): Set flag_section_anchors to 1 not 2.\n\n\t* config/arm/arm.c (arm_option_optimization): Set\n\tflag_section_anchors to 1 not 2.\n\t* config/i386/i386.c (ix86_option_override_internal): Check\n\tglobal_options_set.x_flag_zee and\n\tglobal_options_set.x_flag_omit_frame_pointer.\n\t(ix86_option_optimization): Don't set flag_omit_frame_pointer and\n\tflag_zee to 2.\n\t* config/i386/sol2-10.h (SUBTARGET_OVERRIDE_OPTIONS): Check\n\tglobal_options_set.x_flag_omit_frame_pointer.\n\t* config/rs6000/rs6000.c (rs6000_option_init_struct): Set\n\topts->x_flag_section_anchors to 1 not 2.\n\t* config/sh/sh.c (sh_option_optimization): Don't set\n\tflag_schedule_insns to 2.\n\t(sh_option_override): Check\n\tglobal_options_set.x_flag_schedule_insns.\n\t* opts.c (finish_options): Check opts_set->x_flag_section_anchors.\n\nFrom-SVN: r165539", "tree": {"sha": "5a90da10cf91370aa3787b1e46e470a8af99dea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a90da10cf91370aa3787b1e46e470a8af99dea4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a587f65653b553099daff424f1d2d1dca7393cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a587f65653b553099daff424f1d2d1dca7393cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a587f65653b553099daff424f1d2d1dca7393cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a587f65653b553099daff424f1d2d1dca7393cb/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1dbd4c88c3772f8eb616cf2b52a67265cd389de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1dbd4c88c3772f8eb616cf2b52a67265cd389de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1dbd4c88c3772f8eb616cf2b52a67265cd389de"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "55d179fe8e262115abeba5fa7dfbb1a224fc977d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a587f65653b553099daff424f1d2d1dca7393cb", "patch": "@@ -1,3 +1,22 @@\n+2010-10-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_option_optimization): Set\n+\tflag_section_anchors to 1 not 2.\n+\t* config/i386/i386.c (ix86_option_override_internal): Check\n+\tglobal_options_set.x_flag_zee and\n+\tglobal_options_set.x_flag_omit_frame_pointer.\n+\t(ix86_option_optimization): Don't set flag_omit_frame_pointer and\n+\tflag_zee to 2.\n+\t* config/i386/sol2-10.h (SUBTARGET_OVERRIDE_OPTIONS): Check\n+\tglobal_options_set.x_flag_omit_frame_pointer.\n+\t* config/rs6000/rs6000.c (rs6000_option_init_struct): Set\n+\topts->x_flag_section_anchors to 1 not 2.\n+\t* config/sh/sh.c (sh_option_optimization): Don't set\n+\tflag_schedule_insns to 2.\n+\t(sh_option_override): Check\n+\tglobal_options_set.x_flag_schedule_insns.\n+\t* opts.c (finish_options): Check opts_set->x_flag_section_anchors.\n+\n 2010-10-16  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* configure.ac: Make sure inhibit_libc remains false for mingw targets"}, {"sha": "4f6bea1c0f6b15c3dca62d31bd30663fdc84995a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0a587f65653b553099daff424f1d2d1dca7393cb", "patch": "@@ -22823,11 +22823,9 @@ arm_order_regs_for_local_alloc (void)\n static void\n arm_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n {\n-  /* Enable section anchors by default at -O1 or higher.\n-     Use 2 to distinguish from an explicit -fsection-anchors\n-     given on the command line.  */\n+  /* Enable section anchors by default at -O1 or higher.  */\n   if (level > 0)\n-    flag_section_anchors = 2;\n+    flag_section_anchors = 1;\n }\n \n /* Implement TARGET_FRAME_POINTER_REQUIRED.  */"}, {"sha": "cf70018675c16fd48e5890a6c216864c1ba084c1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0a587f65653b553099daff424f1d2d1dca7393cb", "patch": "@@ -3276,9 +3276,9 @@ ix86_option_override_internal (bool main_args_p)\n      in case they weren't overwritten by command line options.  */\n   if (TARGET_64BIT)\n     {\n-      if (flag_zee == 2)\n+      if (optimize > 1 && !global_options_set.x_flag_zee)\n         flag_zee = 1;\n-      if (flag_omit_frame_pointer == 2)\n+      if (optimize >= 1 && !global_options_set.x_flag_omit_frame_pointer)\n \tflag_omit_frame_pointer = 1;\n       if (flag_asynchronous_unwind_tables == 2)\n \tflag_asynchronous_unwind_tables = 1;\n@@ -3287,9 +3287,7 @@ ix86_option_override_internal (bool main_args_p)\n     }\n   else\n     {\n-      if (flag_zee == 2)\n-        flag_zee = 0;\n-      if (flag_omit_frame_pointer == 2)\n+      if (optimize >= 1 && !global_options_set.x_flag_omit_frame_pointer)\n \tflag_omit_frame_pointer = !(USE_IX86_FRAME_POINTER || optimize_size);\n       if (flag_asynchronous_unwind_tables == 2)\n \tflag_asynchronous_unwind_tables = !USE_IX86_FRAME_POINTER;\n@@ -4537,18 +4535,6 @@ ix86_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n     flag_schedule_insns = 0;\n #endif\n \n-  /* The default values of these switches depend on the TARGET_64BIT\n-     that is not known at this moment.  Mark these values with 2 and\n-     let user the to override these.  In case there is no command line\n-     option specifying them, we will set the defaults in\n-     ix86_option_override_internal.  */\n-  if (optimize >= 1)\n-    flag_omit_frame_pointer = 2;\n-\n-  /* For -O2 and beyond, turn on -fzee for x86_64 target. */\n-  if (level > 1)\n-    flag_zee = 2;\n-\n #ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n   SUBTARGET_OPTIMIZATION_OPTIONS;\n #endif"}, {"sha": "e972ece3b7e6358934eb9d61a7fe048da6efa58e", "filename": "gcc/config/i386/sol2-10.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-10.h?ref=0a587f65653b553099daff424f1d2d1dca7393cb", "patch": "@@ -84,7 +84,7 @@ along with GCC; see the file COPYING3.  If not see\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      if (flag_omit_frame_pointer == 2)\t\t\t\t\\\n+      if (!global_options_set.x_flag_omit_frame_pointer)\t\\\n \tflag_omit_frame_pointer = 0;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "69c3969b451680ef296c38fd01448cf7adb16856", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0a587f65653b553099daff424f1d2d1dca7393cb", "patch": "@@ -3693,7 +3693,7 @@ rs6000_option_init_struct (struct gcc_options *opts)\n \n   /* Enable section anchors by default.  */\n   if (!TARGET_MACHO)\n-    opts->x_flag_section_anchors = 2;\n+    opts->x_flag_section_anchors = 1;\n }\n \n /* Implement TARGET_OPTION_DEFAULT_PARAMS.  */"}, {"sha": "9850969dc4c547616dc35f420d904aa3a16013fd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=0a587f65653b553099daff424f1d2d1dca7393cb", "patch": "@@ -728,10 +728,6 @@ sh_option_optimization (int level, int size)\n       if (!size)\n \ttarget_flags |= MASK_SAVE_ALL_TARGET_REGS;\n     }\n-  /* If flag_schedule_insns is 1, we set it to 2 here so we know if\n-     the user explicitly requested this to be on or off.  */\n-  if (flag_schedule_insns > 0)\n-    flag_schedule_insns = 2;\n }\n \n /* Implement TARGET_OPTION_INIT_STRUCT.  */\n@@ -932,11 +928,12 @@ sh_option_override (void)\n          <http://gcc.gnu.org/ml/gcc-patches/2005-10/msg00816.html>.  */\n       else if (flag_exceptions)\n \t{\n-\t  if (flag_schedule_insns == 1)\n+\t  if (flag_schedule_insns && global_options_set.x_flag_schedule_insns)\n \t    warning (0, \"ignoring -fschedule-insns because of exception handling bug\");\n \t  flag_schedule_insns = 0;\n \t}\n-      else if (flag_schedule_insns == 2)\n+      else if (flag_schedule_insns\n+\t       && !global_options_set.x_flag_schedule_insns)\n \tflag_schedule_insns = 0;\n     }\n "}, {"sha": "69d13596712ad71245b56afe00bd6ead5e70fbef", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a587f65653b553099daff424f1d2d1dca7393cb/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=0a587f65653b553099daff424f1d2d1dca7393cb", "patch": "@@ -1005,7 +1005,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n      section-anchors.  */\n   if (!flag_unit_at_a_time)\n     {\n-      if (flag_section_anchors == 1)\n+      if (flag_section_anchors && opts_set->x_flag_section_anchors)\n \terror (\"Section anchors must be disabled when unit-at-a-time \"\n \t       \"is disabled.\");\n       flag_section_anchors = 0;\n@@ -1022,14 +1022,16 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n   /* Unless the user has asked for section anchors, we disable toplevel\n      reordering at -O0 to disable transformations that might be surprising\n      to end users and to get -fno-toplevel-reorder tested.  */\n-  if (!optimize && flag_toplevel_reorder == 2 && flag_section_anchors != 1)\n+  if (!optimize\n+      && flag_toplevel_reorder == 2\n+      && !(flag_section_anchors && opts_set->x_flag_section_anchors))\n     {\n       flag_toplevel_reorder = 0;\n       flag_section_anchors = 0;\n     }\n   if (!flag_toplevel_reorder)\n     {\n-      if (flag_section_anchors == 1)\n+      if (flag_section_anchors && opts_set->x_flag_section_anchors)\n \terror (\"section anchors must be disabled when toplevel reorder\"\n \t       \" is disabled\");\n       flag_section_anchors = 0;"}]}