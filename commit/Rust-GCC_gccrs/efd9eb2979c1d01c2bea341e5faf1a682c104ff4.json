{"sha": "efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkOWViMjk3OWMxZDAxYzJiZWEzNDFlNWZhZjFhNjgyYzEwNGZmNA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-08-21T07:39:29Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-08-21T07:39:29Z"}, "message": "[debug] Add debug and earlydebug dumps\n\nWith the introduction of early debug, we've added a phase in the compiler which\nproduces information which is not visible, unless we run the compiler in the\ndebugger and call debug_dwarf from dwarf2out_early_finish or some such.\n\nThis patch adds dumping of \"early\" and \"final\" debug info, into .earlydebug\nand .debug dump files, enabled by -fdump-earlydebug and -fdumpdebug, such that\nwe can follow f.i. the upper bound of a vla type from early debug:\n...\n          DW_AT_upper_bound: location descriptor:\n            (0x7f0d645b7550) DW_OP_GNU_variable_value , 0\n...\nto final debug:\n...\n          DW_AT_upper_bound: location descriptor:\n            (0x7f0d645b7550) DW_OP_fbreg 18446744073709551592, 0\n            (0x7f0d645b7a00) DW_OP_deref 8, 0\n...\nto -dA annotated assembly file:\n...\n        .uleb128 0x3    # DW_AT_upper_bound\n        .byte   0x91    # DW_OP_fbreg\n        .sleb128 -24\n        .byte   0x6     # DW_OP_deref\n...\n\nThe .debug file shows the same information as the annotated assembly, but in\nthe same format as the \"early\" debug info.\n\nBootstrapped and reg-tested on x86_64.\n\n2018-08-21  Tom de Vries  <tdevries@suse.de>\n\n\t* cgraph.h (debuginfo_early_init, debuginfo_init, debuginfo_fini)\n\t(debuginfo_start, debuginfo_stop, debuginfo_early_start)\n\t(debuginfo_early_stop): Declare.\n\t* cgraphunit.c (debuginfo_early_init, debuginfo_init, debuginfo_fini)\n\t(debuginfo_start, debuginfo_stop, debuginfo_early_start)\n\t(debuginfo_early_stop): New function.\n\t(symbol_table::finalize_compilation_unit): Call debuginfo_early_start\n\tand debuginfo_early_stop.\n\t* dwarf2out.c (dwarf2out_finish, dwarf2out_early_finish): Dump dwarf.\n\t* toplev.c (compile_file): Call debuginfo_start and debuginfo_stop.\n\t(general_init): Call debuginfo_early_init.\n\t(finalize): Call debuginfo_fini.\n\t(do_compile): Call debuginfo_init.\n\t* doc/invoke.texi (@gccoptlist): Add -fdump-debug and\n\t-fdump-early-debug.\n\t(@item -fdump-debug, @item -fdump-earlydebug): Add.\n\n\t* lto.c (lto_main):  Call debuginfo_early_start and\n\tdebuginfo_early_stop.\n\n\t* gcc.c-torture/unsorted/dump-noaddr.x: Use -gno-record-gcc-switches\n\tto avoid mismatch in .debug and .earlydebug dump files.\n\nFrom-SVN: r263687", "tree": {"sha": "0247b12fe1a37d3b294a4750c853f5f72752a414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0247b12fe1a37d3b294a4750c853f5f72752a414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "916f27adfdf0a2aa8a8d30fa68f86d5eab226ff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916f27adfdf0a2aa8a8d30fa68f86d5eab226ff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916f27adfdf0a2aa8a8d30fa68f86d5eab226ff9"}], "stats": {"total": 162, "additions": 159, "deletions": 3}, "files": [{"sha": "47dd9eaa4cae2ebee61b54d2c7d584717e594ecd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "patch": "@@ -1,3 +1,22 @@\n+2018-08-21  Tom de Vries  <tdevries@suse.de>\n+\n+\t* cgraph.h (debuginfo_early_init, debuginfo_init, debuginfo_fini)\n+\t(debuginfo_start, debuginfo_stop, debuginfo_early_start)\n+\t(debuginfo_early_stop): Declare.\n+\t* cgraphunit.c (debuginfo_early_init, debuginfo_init, debuginfo_fini)\n+\t(debuginfo_start, debuginfo_stop, debuginfo_early_start)\n+\t(debuginfo_early_stop): New function.\n+\t(symbol_table::finalize_compilation_unit): Call debuginfo_early_start\n+\tand debuginfo_early_stop.\n+\t* dwarf2out.c (dwarf2out_finish, dwarf2out_early_finish): Dump dwarf.\n+\t* toplev.c (compile_file): Call debuginfo_start and debuginfo_stop.\n+\t(general_init): Call debuginfo_early_init.\n+\t(finalize): Call debuginfo_fini.\n+\t(do_compile): Call debuginfo_init.\n+\t* doc/invoke.texi (@gccoptlist): Add -fdump-debug and\n+\t-fdump-early-debug.\n+\t(@item -fdump-debug, @item -fdump-earlydebug): Add.\n+\n 2018-08-21  Tom de Vries  <tdevries@suse.de>\n \n \t* dwarf2out.c (print_dw_val, print_loc_descr, print_die): Handle"}, {"sha": "2b00f0165faeb706374a945dd8c99561f1db34ff", "filename": "gcc/cgraph.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "patch": "@@ -25,6 +25,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"plugin-api.h\"\n \n+extern void debuginfo_early_init (void);\n+extern void debuginfo_init (void);\n+extern void debuginfo_fini (void);\n+extern void debuginfo_start (void);\n+extern void debuginfo_stop (void);\n+extern void debuginfo_early_start (void);\n+extern void debuginfo_early_stop (void);\n+\n class ipa_opt_pass_d;\n typedef ipa_opt_pass_d *ipa_opt_pass;\n "}, {"sha": "ec490d75bd1162cf691708c366ab0e86f4eb5a67", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "patch": "@@ -2641,6 +2641,89 @@ symbol_table::compile (void)\n     }\n }\n \n+/* Earlydebug dump file, flags, and number.  */\n+\n+static int debuginfo_early_dump_nr;\n+static FILE *debuginfo_early_dump_file;\n+static dump_flags_t debuginfo_early_dump_flags;\n+\n+/* Debug dump file, flags, and number.  */\n+\n+static int debuginfo_dump_nr;\n+static FILE *debuginfo_dump_file;\n+static dump_flags_t debuginfo_dump_flags;\n+\n+/* Register the debug and earlydebug dump files.  */\n+\n+void\n+debuginfo_early_init (void)\n+{\n+  gcc::dump_manager *dumps = g->get_dumps ();\n+  debuginfo_early_dump_nr = dumps->dump_register (\".earlydebug\", \"earlydebug\",\n+\t\t\t\t\t\t  \"earlydebug\", DK_tree,\n+\t\t\t\t\t\t  OPTGROUP_NONE,\n+\t\t\t\t\t\t  false);\n+  debuginfo_dump_nr = dumps->dump_register (\".debug\", \"debug\",\n+\t\t\t\t\t     \"debug\", DK_tree,\n+\t\t\t\t\t     OPTGROUP_NONE,\n+\t\t\t\t\t     false);\n+}\n+\n+/* Initialize the debug and earlydebug dump files.  */\n+\n+void\n+debuginfo_init (void)\n+{\n+  gcc::dump_manager *dumps = g->get_dumps ();\n+  debuginfo_dump_file = dump_begin (debuginfo_dump_nr, NULL);\n+  debuginfo_dump_flags = dumps->get_dump_file_info (debuginfo_dump_nr)->pflags;\n+  debuginfo_early_dump_file = dump_begin (debuginfo_early_dump_nr, NULL);\n+  debuginfo_early_dump_flags\n+    = dumps->get_dump_file_info (debuginfo_early_dump_nr)->pflags;\n+}\n+\n+/* Finalize the debug and earlydebug dump files.  */\n+\n+void\n+debuginfo_fini (void)\n+{\n+  if (debuginfo_dump_file)\n+    dump_end (debuginfo_dump_nr, debuginfo_dump_file);\n+  if (debuginfo_early_dump_file)\n+    dump_end (debuginfo_early_dump_nr, debuginfo_early_dump_file);\n+}\n+\n+/* Set dump_file to the debug dump file.  */\n+\n+void\n+debuginfo_start (void)\n+{\n+  set_dump_file (debuginfo_dump_file);\n+}\n+\n+/* Undo setting dump_file to the debug dump file.  */\n+\n+void\n+debuginfo_stop (void)\n+{\n+  set_dump_file (NULL);\n+}\n+\n+/* Set dump_file to the earlydebug dump file.  */\n+\n+void\n+debuginfo_early_start (void)\n+{\n+  set_dump_file (debuginfo_early_dump_file);\n+}\n+\n+/* Undo setting dump_file to the earlydebug dump file.  */\n+\n+void\n+debuginfo_early_stop (void)\n+{\n+  set_dump_file (NULL);\n+}\n \n /* Analyze the whole compilation unit once it is parsed completely.  */\n \n@@ -2696,7 +2779,9 @@ symbol_table::finalize_compilation_unit (void)\n \n       /* Clean up anything that needs cleaning up after initial debug\n \t generation.  */\n+      debuginfo_early_start ();\n       (*debug_hooks->early_finish) (main_input_filename);\n+      debuginfo_early_stop ();\n     }\n \n   /* Finally drive the pass manager.  */"}, {"sha": "99849ec6467b607dd637469cc4d453a30361077f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "patch": "@@ -566,6 +566,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdisable-rtl-@var{pass-name}=@var{range-list} @gol\n -fdisable-tree-@var{pass_name} @gol\n -fdisable-tree-@var{pass-name}=@var{range-list} @gol\n+-fdump-debug -fdump-earlydebug @gol\n -fdump-noaddr  -fdump-unnumbered  -fdump-unnumbered-links @gol\n -fdump-class-hierarchy@r{[}-@var{n}@r{]} @gol\n -fdump-final-insns@r{[}=@var{file}@r{]} @gol\n@@ -13777,6 +13778,16 @@ Just generate RTL for a function instead of compiling it.  Usually used\n with @option{-fdump-rtl-expand}.\n @end table\n \n+@item -fdump-debug\n+@opindex fdump-debug\n+Dump debugging information generated during the debug\n+generation phase.\n+\n+@item -fdump-earlydebug\n+@opindex fdump-earlydebug\n+Dump debugging information generated during the early debug\n+generation phase.\n+\n @item -fdump-noaddr\n @opindex fdump-noaddr\n When doing debugging dumps, suppress address output.  This makes it more"}, {"sha": "fb71ff349fac0af8ede3f68c356a92aaaa7f190f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "patch": "@@ -31112,7 +31112,7 @@ reset_dies (dw_die_ref die)\n    and generate the DWARF-2 debugging info.  */\n \n static void\n-dwarf2out_finish (const char *)\n+dwarf2out_finish (const char *filename)\n {\n   comdat_type_node *ctnode;\n   dw_die_ref main_comp_unit_die;\n@@ -31193,6 +31193,12 @@ dwarf2out_finish (const char *)\n   resolve_addr (comp_unit_die ());\n   move_marked_base_types ();\n \n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"DWARF for %s\\n\", filename);\n+      print_die (comp_unit_die (), dump_file);\n+    }\n+\n   /* Initialize sections and labels used for actual assembler output.  */\n   unsigned generation = init_sections_and_labels (false);\n \n@@ -31888,6 +31894,11 @@ dwarf2out_early_finish (const char *filename)\n   if (in_lto_p)\n     {\n       early_dwarf_finished = true;\n+      if (dump_file)\n+\t{\n+\t  fprintf (dump_file, \"LTO EARLY DWARF for %s\\n\", filename);\n+\t  print_die (comp_unit_die (), dump_file);\n+\t}\n       return;\n     }\n \n@@ -31965,6 +31976,11 @@ dwarf2out_early_finish (const char *filename)\n \n   /* The early debug phase is now finished.  */\n   early_dwarf_finished = true;\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"EARLY DWARF for %s\\n\", filename);\n+      print_die (comp_unit_die (), dump_file);\n+    }\n \n   /* Do not generate DWARF assembler now when not producing LTO bytecode.  */\n   if ((!flag_generate_lto && !flag_generate_offload)"}, {"sha": "a92317cb77412c360e9a2b3c9155562cffe256a9", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "patch": "@@ -1,3 +1,8 @@\n+2018-08-21  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lto.c (lto_main):  Call debuginfo_early_start and\n+\tdebuginfo_early_stop.\n+\n 2018-07-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/82063"}, {"sha": "10618896022c8af4e18a9fb7fde7a157901dd569", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "patch": "@@ -3419,7 +3419,9 @@ lto_main (void)\n \t    lto_promote_statics_nonwpa ();\n \n \t  /* Annotate the CU DIE and mark the early debug phase as finished.  */\n+\t  debuginfo_early_start ();\n \t  debug_hooks->early_finish (\"<artificial>\");\n+\t  debuginfo_early_stop ();\n \n \t  /* Let the middle end know that we have read and merged all of\n \t     the input files.  */ "}, {"sha": "0a420304716a0f82f47efe9548d01131f95eb0a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "patch": "@@ -1,3 +1,8 @@\n+2018-08-21  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.c-torture/unsorted/dump-noaddr.x: Use -gno-record-gcc-switches\n+\tto avoid mismatch in .debug and .earlydebug dump files.\n+\n 2018-08-20  Michael Meissner  <meissner@linux.ibm.com>\n \n \tPR target/87033"}, {"sha": "0e4298ad3d7dc4a5c873e501520dbd4609289ccf", "filename": "gcc/testsuite/gcc.c-torture/unsorted/dump-noaddr.x", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fdump-noaddr.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fdump-noaddr.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Funsorted%2Fdump-noaddr.x?ref=efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "patch": "@@ -11,10 +11,10 @@ proc dump_compare { src options } {\n     foreach option $option_list {\n \tfile delete -force $tmpdir/dump1\n \tfile mkdir $tmpdir/dump1\n-\tc-torture-compile $src \"$option $options -dumpbase dump1/$dumpbase -DMASK=1 -x c --param ggc-min-heapsize=1 -fdump-ipa-all -fdump-rtl-all -fdump-tree-all -fdump-noaddr\"\n+\tc-torture-compile $src \"$option $options -dumpbase dump1/$dumpbase -DMASK=1 -x c --param ggc-min-heapsize=1 -fdump-ipa-all -fdump-rtl-all -fdump-tree-all -fdump-noaddr -gno-record-gcc-switches\"\n \tfile delete -force $tmpdir/dump2\n \tfile mkdir $tmpdir/dump2\n-\tc-torture-compile $src \"$option $options -dumpbase dump2/$dumpbase -DMASK=2 -x c -fdump-ipa-all -fdump-rtl-all -fdump-tree-all -fdump-noaddr\"\n+\tc-torture-compile $src \"$option $options -dumpbase dump2/$dumpbase -DMASK=2 -x c -fdump-ipa-all -fdump-rtl-all -fdump-tree-all -fdump-noaddr -gno-record-gcc-switches\"\n \tforeach dump1 [lsort [glob -nocomplain $tmpdir/dump1/*]] {\n \t    set dump2 \"$tmpdir/dump2/[file tail $dump1]\"\n \t    set dumptail \"gcc.c-torture/unsorted/[file tail $dump1]\""}, {"sha": "9fb83d4e43f2ce19ad511a7d54e37c7ecbf00b2b", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd9eb2979c1d01c2bea341e5faf1a682c104ff4/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=efd9eb2979c1d01c2bea341e5faf1a682c104ff4", "patch": "@@ -529,7 +529,9 @@ compile_file (void)\n       dwarf2out_frame_finish ();\n #endif\n \n+      debuginfo_start ();\n       (*debug_hooks->finish) (main_input_filename);\n+      debuginfo_stop ();\n       timevar_pop (TV_SYMOUT);\n \n       /* Output some stuff at end of file if nec.  */\n@@ -1187,6 +1189,7 @@ general_init (const char *argv0, bool init_signals)\n   symtab = new (ggc_cleared_alloc <symbol_table> ()) symbol_table ();\n \n   statistics_early_init ();\n+  debuginfo_early_init ();\n   finish_params ();\n }\n \n@@ -2081,6 +2084,7 @@ finalize (bool no_backend)\n   if (!no_backend)\n     {\n       statistics_fini ();\n+      debuginfo_fini ();\n \n       g->get_passes ()->finish_optimization_passes ();\n \n@@ -2158,6 +2162,7 @@ do_compile ()\n           init_final (main_input_filename);\n           coverage_init (aux_base_name);\n           statistics_init ();\n+          debuginfo_init ();\n           invoke_plugin_callbacks (PLUGIN_START_UNIT, NULL);\n \n           timevar_stop (TV_PHASE_SETUP);"}]}