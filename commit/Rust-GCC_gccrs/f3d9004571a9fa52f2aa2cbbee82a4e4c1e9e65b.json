{"sha": "f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkOTAwNDU3MWE5ZmE1MmYyYWEyY2JiZWU4MmE0ZTRjMWU5ZTY1Yg==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2016-05-03T13:30:33Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-05-03T13:30:33Z"}, "message": "S/390: Add patterns for r<nox>sbg instructions.\n\ngcc/ChangeLog:\n\n2016-05-03  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* config/s390/s390.md (\"*r<noxa>sbg_<mode>_sll\")\n\t(\"*r<noxa>sbg_<mode>_srl\"): New define_insns.\n\t(\"*r<noxa>sbg_<mode>_srl_bitmask\"): Rename by adding \"_bitmask\".\n\t(\"*r<noxa>sbg_<mode>_sll_bitmask\"): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2016-05-03  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/md/rXsbg_mode_sXl.c: New test.\n\t* gcc.target/s390/s390.exp (check_effective_target_z10_instructions):\n\tProcedure to check for z10 instruction set.\n\nFrom-SVN: r235822", "tree": {"sha": "fec8fd9d2bbced423c18e5fe0941fa1b322e61a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fec8fd9d2bbced423c18e5fe0941fa1b322e61a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e26cec1ff00eb3cce023d7c1630cc2734eb3b46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e26cec1ff00eb3cce023d7c1630cc2734eb3b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e26cec1ff00eb3cce023d7c1630cc2734eb3b46"}], "stats": {"total": 209, "additions": 207, "deletions": 2}, "files": [{"sha": "095e502adfa4a47adba6f01c293946bf64944550", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b", "patch": "@@ -1,3 +1,10 @@\n+2016-05-03  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.md (\"*r<noxa>sbg_<mode>_sll\")\n+\t(\"*r<noxa>sbg_<mode>_srl\"): New define_insns.\n+\t(\"*r<noxa>sbg_<mode>_srl_bitmask\"): Rename by adding \"_bitmask\".\n+\t(\"*r<noxa>sbg_<mode>_sll_bitmask\"): Likewise.\n+\n 2016-05-03  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_savres_strategy): Correct condition"}, {"sha": "faaa7f3fc9f573e3d2ddcce57832fd21038f9b2c", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b", "patch": "@@ -3989,7 +3989,7 @@\n   \"r<noxa>sbg\\t%0,%1,%<bfstart>2,%<bfend>2,%b3\"\n   [(set_attr \"op_type\" \"RIE\")])\n \n-(define_insn \"*r<noxa>sbg_<mode>_srl\"\n+(define_insn \"*r<noxa>sbg_<mode>_srl_bitmask\"\n   [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n \t(IXOR:GPR\n \t  (and:GPR\n@@ -4005,7 +4005,7 @@\n   \"r<noxa>sbg\\t%0,%1,%<bfstart>2,%<bfend>2,64-%3\"\n   [(set_attr \"op_type\" \"RIE\")])\n \n-(define_insn \"*r<noxa>sbg_<mode>_sll\"\n+(define_insn \"*r<noxa>sbg_<mode>_sll_bitmask\"\n   [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n \t(IXOR:GPR\n \t  (and:GPR\n@@ -4021,6 +4021,36 @@\n   \"r<noxa>sbg\\t%0,%1,%<bfstart>2,%<bfend>2,%3\"\n   [(set_attr \"op_type\" \"RIE\")])\n \n+;; unsigned {int,long} a, b\n+;; a = a | (b << const_int)\n+;; a = a ^ (b << const_int)\n+(define_insn \"*r<noxa>sbg_<mode>_sll\"\n+  [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n+\t(IXOR:GPR\n+\t  (ashift:GPR\n+            (match_operand:GPR 1 \"nonimmediate_operand\" \"d\")\n+            (match_operand:GPR 2 \"nonzero_shift_count_operand\" \"\"))\n+\t  (match_operand:GPR 3 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_Z10\"\n+  \"r<noxa>sbg\\t%0,%1,64-<bitsize>,63-%2,%2\"\n+  [(set_attr \"op_type\" \"RIE\")])\n+\n+;; unsigned {int,long} a, b\n+;; a = a | (b >> const_int)\n+;; a = a ^ (b >> const_int)\n+(define_insn \"*r<noxa>sbg_<mode>_srl\"\n+  [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n+\t(IXOR:GPR\n+\t  (lshiftrt:GPR\n+            (match_operand:GPR 1 \"nonimmediate_operand\" \"d\")\n+            (match_operand:GPR 2 \"nonzero_shift_count_operand\" \"\"))\n+\t  (match_operand:GPR 3 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_Z10\"\n+  \"r<noxa>sbg\\t%0,%1,64-<bitsize>+%2,63,64-%2\"\n+  [(set_attr \"op_type\" \"RIE\")])\n+\n ;; These two are generated by combine for s.bf &= val.\n ;; ??? For bitfields smaller than 32-bits, we wind up with SImode\n ;; shifts and ands, which results in some truly awful patterns"}, {"sha": "3ff4ea4d8f876256ab16590e72c3e90181197617", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b", "patch": "@@ -1,3 +1,9 @@\n+2016-05-03  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/md/rXsbg_mode_sXl.c: New test.\n+\t* gcc.target/s390/s390.exp (check_effective_target_z10_instructions):\n+\tProcedure to check for z10 instruction set.\n+\n 2016-05-03  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.dg/ipa/inline-8.c: Require c99_runtime."}, {"sha": "178a537b1de560398031e8a41095a1df7d01447f", "filename": "gcc/testsuite/gcc.target/s390/md/rXsbg_mode_sXl.c", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c?ref=f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b", "patch": "@@ -0,0 +1,151 @@\n+/* Machine description pattern tests.  */\n+\n+/*\n+    { dg-options \"-mzarch -save-temps\" }\n+\n+   Note that dejagnu-1.5.1 has a bug so that the action from the second dg-do\n+   always wins, even if the condition is false.  If this test is run on hardware\n+   older than z10 with a buggy dejagnu release, the execution part will fail.\n+\n+    { dg-do assemble { target { ! z10_instructions } } }\n+    { dg-do run { target { z10_instructions } } }\n+\n+   Skip test if -O0, -march=z900, -march=z9-109 or -march=z9-ec is present on\n+   the command line:\n+\n+    { dg-skip-if \"\" { *-*-* } { \"-march=z9*\" \"-O0\" } { \"\" } }\n+\n+   Skip test if the -O or the -march= option is missing from the command line\n+   because it's difficult to detect the default:\n+\n+    { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O*\" } }\n+    { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-march=*\" } }\n+*/\n+\n+__attribute__ ((noinline)) unsigned int\n+si_sll (unsigned int x)\n+{\n+  return (x << 1);\n+}\n+\n+__attribute__ ((noinline)) unsigned int\n+si_srl (unsigned int x)\n+{\n+  return (x >> 2);\n+}\n+\n+__attribute__ ((noinline)) unsigned int\n+rosbg_si_sll (unsigned int a, unsigned int b)\n+{\n+  return a | (b << 1);\n+}\n+/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,64-32,63-1,1\" 1 } } */\n+\n+__attribute__ ((noinline)) unsigned int\n+rosbg_si_srl (unsigned int a, unsigned int b)\n+{\n+  return a | (b >> 2);\n+}\n+/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,64-32\\\\+2,63,64-2\" 1 } } */\n+\n+__attribute__ ((noinline)) unsigned int\n+rxsbg_si_sll (unsigned int a, unsigned int b)\n+{\n+  return a ^ (b << 1);\n+}\n+/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,64-32,63-1,1\" 1 } } */\n+\n+__attribute__ ((noinline)) unsigned int\n+rxsbg_si_srl (unsigned int a, unsigned int b)\n+{\n+  return a ^ (b >> 2);\n+}\n+/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,64-32\\\\+2,63,64-2\" 1 } } */\n+\n+__attribute__ ((noinline)) unsigned long long\n+di_sll (unsigned long long x)\n+{\n+  return (x << 1);\n+}\n+\n+__attribute__ ((noinline)) unsigned long long\n+di_srl (unsigned long long x)\n+{\n+  return (x >> 2);\n+}\n+\n+__attribute__ ((noinline)) unsigned long long\n+rosbg_di_sll (unsigned long long a, unsigned long long b)\n+{\n+  return a | (b << 1);\n+}\n+/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,64-64,63-1,1\" 1 } } */\n+\n+__attribute__ ((noinline)) unsigned long long\n+rosbg_di_srl (unsigned long long a, unsigned long long b)\n+{\n+  return a | (b >> 2);\n+}\n+/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,64-64\\\\+2,63,64-2\" 1 } } */\n+\n+__attribute__ ((noinline)) unsigned long long\n+rxsbg_di_sll (unsigned long long a, unsigned long long b)\n+{\n+  return a ^ (b << 1);\n+}\n+/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,64-64,63-1,1\" 1 } } */\n+\n+__attribute__ ((noinline)) unsigned long long\n+rxsbg_di_srl (unsigned long long a, unsigned long long b)\n+{\n+  return a ^ (b >> 2);\n+}\n+/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,64-64\\\\+2,63,64-2\" 1 } } */\n+\n+int\n+main (void)\n+{\n+  /* SIMode */\n+  {\n+    unsigned int r;\n+    unsigned int a = 0x12488421u;\n+    unsigned int b = 0x88881111u;\n+    unsigned int csll = si_sll (b);\n+    unsigned int csrl = si_srl (b);\n+\n+    r = rosbg_si_sll (a, b);\n+    if (r != (a | csll))\n+      __builtin_abort ();\n+    r = rosbg_si_srl (a, b);\n+    if (r != (a | csrl))\n+      __builtin_abort ();\n+    r = rxsbg_si_sll (a, b);\n+    if (r != (a ^ csll))\n+      __builtin_abort ();\n+    r = rxsbg_si_srl (a, b);\n+    if (r != (a ^ csrl))\n+      __builtin_abort ();\n+  }\n+  /* DIMode */\n+  {\n+    unsigned long long r;\n+    unsigned long long a = 0x1248357997538421lu;\n+    unsigned long long b = 0x8888444422221111lu;\n+    unsigned long long csll = di_sll (b);\n+    unsigned long long csrl = di_srl (b);\n+\n+    r = rosbg_di_sll (a, b);\n+    if (r != (a | csll))\n+      __builtin_abort ();\n+    r = rosbg_di_srl (a, b);\n+    if (r != (a | csrl))\n+      __builtin_abort ();\n+    r = rxsbg_di_sll (a, b);\n+    if (r != (a ^ csll))\n+      __builtin_abort ();\n+    r = rxsbg_di_srl (a, b);\n+    if (r != (a ^ csrl))\n+      __builtin_abort ();\n+  }\n+  return 0;\n+}"}, {"sha": "f4ad7a1f25bb6af237198b701023b338babadbec", "filename": "gcc/testsuite/gcc.target/s390/s390.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp?ref=f3d9004571a9fa52f2aa2cbbee82a4e4c1e9e65b", "patch": "@@ -24,6 +24,17 @@ if ![istarget s390*-*-*] then {\n # Load support procs.\n load_lib gcc-dg.exp\n \n+# Return 1 if z10 instructions work.\n+proc check_effective_target_z10_instructions { } {\n+    if { ![check_runtime s390_check_z10_instructions [subst {\n+\tint main (void)\n+\t{\n+\t    asm (\"rosbg %%r2,%%r2,0,0,0\" : : );\n+\t    return 0;\n+\t}\n+    }] \"-march=z10 -mzarch\" ] } { return 0 } else { return 1 }\n+}\n+\n # Return 1 if the the assembler understands .machine and .machinemode.  The\n # target attribute needs that feature to work.\n proc check_effective_target_target_attribute { } {"}]}