{"sha": "1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY2YzAwZGZlNGMxMmRhMzc5ZTYwZDZjMzJiNjBmMDFmZTVmN2I0Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-08-16T16:41:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-16T16:41:31Z"}, "message": "cuintp.c (UI_To_gnu): Be more conservative with build_int_cst call.s\n\n\t* cuintp.c (UI_To_gnu): Be more conservative with build_int_cst\n\tcall.s\n\t* trans.c (Exception_Handler_to_gnu_sjlj): Likewise.\n\t(gnat_to_gnu): Likewise.\n\nFrom-SVN: r86063", "tree": {"sha": "2aef88e2779376d3910b37e3ecf8f06e45d0952a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aef88e2779376d3910b37e3ecf8f06e45d0952a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42/comments", "author": null, "committer": null, "parents": [{"sha": "461b08b8bccb49c3077a5f9c36759fddafdcd102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/461b08b8bccb49c3077a5f9c36759fddafdcd102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/461b08b8bccb49c3077a5f9c36759fddafdcd102"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "4b5107396db57ed386b551d953d9616e7924d80a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42", "patch": "@@ -1,3 +1,10 @@\n+2004-08-16  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cuintp.c (UI_To_gnu): Be more conservative with build_int_cst\n+\tcall.s\n+\t* trans.c (Exception_Handler_to_gnu_sjlj): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\n 2004-08-16  Pascal Obry  <obry@gnat.com>\n \n \t* adaint.c (__gnat_prj_add_obj_files): Set to 0 only on Win32 for GCC"}, {"sha": "b919bb58ce1abaa4c651932ae9ac4640e46db219", "filename": "gcc/ada/cuintp.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42/gcc%2Fada%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42/gcc%2Fada%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcuintp.c?ref=1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42", "patch": "@@ -76,26 +76,29 @@ UI_To_gnu (Uint Input, tree type)\n       tree comp_type\n \t= (TYPE_PRECISION (type) >= TYPE_PRECISION (integer_type_node)\n \t   ? type : integer_type_node);\n-      tree gnu_base = build_int_cst (comp_type, Base, 0);\n+      tree gnu_base = convert (comp_type, build_int_cst (NULL_TREE, Base, 0));\n \n       if (Length <= 0)\n \tabort ();\n \n-      gnu_ret = build_int_cst (comp_type, First, First < 0 ? -1 : 0);\n+      gnu_ret = convert (comp_type, build_int_cst (NULL_TREE,\n+\t\t\t\t\t\t   First, First < 0 ? -1 : 0));\n       if (First < 0)\n \tfor (Idx++, Length--; Length; Idx++, Length--)\n \t  gnu_ret = fold (build (MINUS_EXPR, comp_type,\n \t\t\t\t fold (build (MULT_EXPR, comp_type,\n \t\t\t\t\t      gnu_ret, gnu_base)),\n-\t\t\t\t build_int_cst (comp_type,\n-\t\t\t\t\t\tUdigits_Ptr[Idx], 0)));\n+\t\t\t\t convert (comp_type,\n+\t\t\t\t\t  build_int_cst (NULL_TREE,\n+\t\t\t\t\t\t\t Udigits_Ptr[Idx], 0))));\n       else\n \tfor (Idx++, Length--; Length; Idx++, Length--)\n \t  gnu_ret = fold (build (PLUS_EXPR, comp_type,\n \t\t\t\t fold (build (MULT_EXPR, comp_type,\n \t\t\t\t\t      gnu_ret, gnu_base)),\n-\t\t\t\t build_int_cst (comp_type,\n-\t\t\t\t\t\tUdigits_Ptr[Idx], 0)));\n+\t\t\t\t convert (comp_type,\n+\t\t\t\t\t  build_int_cst (NULL_TREE,\n+\t\t\t\t\t\t\t Udigits_Ptr[Idx], 0))));\n     }\n \n   gnu_ret = convert (type, gnu_ret);"}, {"sha": "452c3e56fc7dc4f3fb05a96cddf9d7f466b4378f", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=1f6c00dfe4c12da379e60d6c32b60f01fe5f7b42", "patch": "@@ -2217,8 +2217,9 @@ Exception_Handler_to_gnu_sjlj (Node_Id gnat_node)\n \t\t= build_binary_op\n \t\t  (TRUTH_ORIF_EXPR, integer_type_node,\n \t\t   build_binary_op (EQ_EXPR, integer_type_node, gnu_comp,\n-\t\t\t\t    build_int_cst (TREE_TYPE (gnu_comp),\n-\t\t\t\t\t\t   'V', 0)),\n+\t\t\t\t    convert (TREE_TYPE (gnu_comp),\n+\t\t\t\t\t     build_int_cst (NULL_TREE,\n+\t\t\t\t\t\t\t    'V', 0))),\n \t\t   this_choice);\n \t    }\n \t}\n@@ -2504,8 +2505,9 @@ gnat_to_gnu (Node_Id gnat_node)\n       if (Present (Entity (gnat_node)))\n \tgnu_result = DECL_INITIAL (get_gnu_tree (Entity (gnat_node)));\n       else\n-\tgnu_result = build_int_cst (gnu_result_type,\n-\t\t\t\t    Char_Literal_Value (gnat_node), 0);\n+\tgnu_result = convert (gnu_result_type,\n+\t\t\t      build_int_cst (NULL_TREE,\n+\t\t\t\t\t     Char_Literal_Value (gnat_node), 0));\n       break;\n \n     case N_Real_Literal:\n@@ -2617,10 +2619,13 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  for (i = 0; i < length; i++)\n \t    {\n \t      gnu_list\n-\t\t= tree_cons (gnu_idx, build_int_cst\n-\t\t\t     (TREE_TYPE (gnu_result_type),\n-\t\t\t      Get_String_Char (gnat_string, i + 1), 0),\n-\t\t\t     gnu_list);\n+\t\t= tree_cons (gnu_idx,\n+\t\t\t     convert (TREE_TYPE (gnu_result_type),\n+\t\t\t\t      build_int_cst\n+\t\t\t\t      (NULL_TREE,\n+\t\t\t\t       Get_String_Char (gnat_string, i + 1),\n+\t\t\t\t       0)),\n+\t\t\t   gnu_list);\n \n \t      gnu_idx = int_const_binop (PLUS_EXPR, gnu_idx, integer_one_node,\n \t\t\t\t\t 0);"}]}