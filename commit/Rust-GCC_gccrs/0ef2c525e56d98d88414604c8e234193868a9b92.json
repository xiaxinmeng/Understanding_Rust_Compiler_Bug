{"sha": "0ef2c525e56d98d88414604c8e234193868a9b92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVmMmM1MjVlNTZkOThkODg0MTQ2MDRjOGUyMzQxOTM4NjhhOWI5Mg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-10-30T23:29:46Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-10-30T23:29:46Z"}, "message": "sh.c (calc_live_regs): Declare reg as unsigned and modify the for loop expressions for it.\n\n\t* config/sh/sh.c (calc_live_regs): Declare reg as unsigned and\n\tmodify the for loop expressions for it.  Remove unnecessary casts.\n\t(sh_expand_prologue): Declare reg as unsigned.\n\t(sh_gimplify_va_arg_expr): Initinalize lab_over.\n\t(sh_handle_sp_switch_attribute): Add const qualifier appropriately.\n\nFrom-SVN: r89901", "tree": {"sha": "b3ffe8ad1336287fa6c6fff2895f5c1244e109af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3ffe8ad1336287fa6c6fff2895f5c1244e109af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ef2c525e56d98d88414604c8e234193868a9b92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef2c525e56d98d88414604c8e234193868a9b92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ef2c525e56d98d88414604c8e234193868a9b92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef2c525e56d98d88414604c8e234193868a9b92/comments", "author": null, "committer": null, "parents": [{"sha": "1db4252cead4efe2f13d88a8420a687acd5abe62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db4252cead4efe2f13d88a8420a687acd5abe62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db4252cead4efe2f13d88a8420a687acd5abe62"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "78c19ddc43dead741e5f8562f01a7b3a1e82a1bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef2c525e56d98d88414604c8e234193868a9b92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef2c525e56d98d88414604c8e234193868a9b92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ef2c525e56d98d88414604c8e234193868a9b92", "patch": "@@ -1,3 +1,11 @@\n+2004-10-30  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (calc_live_regs): Declare reg as unsigned and\n+\tmodify the for loop expressions for it.  Remove unnecessary casts.\n+\t(sh_expand_prologue): Declare reg as unsigned.\n+\t(sh_gimplify_va_arg_expr): Initinalize lab_over.\n+\t(sh_handle_sp_switch_attribute): Add const qualifier appropriately.\n+\n 2004-10-30  Geoffrey Keating  <geoffk@apple.com>\n \n \t* doc/invoke.texi (Darwin Options): Improve description of"}, {"sha": "f94c0b83357c5238bcc6293ba740b04d5f9908e0", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef2c525e56d98d88414604c8e234193868a9b92/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef2c525e56d98d88414604c8e234193868a9b92/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=0ef2c525e56d98d88414604c8e234193868a9b92", "patch": "@@ -5106,7 +5106,7 @@ shmedia_target_regs_stack_adjust (HARD_REG_SET *live_regs_mask)\n static int\n calc_live_regs (HARD_REG_SET *live_regs_mask)\n {\n-  int reg;\n+  unsigned int reg;\n   int count;\n   int interrupt_handler;\n   int pr_live, has_call;\n@@ -5156,7 +5156,7 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n \t  || current_function_has_nonlocal_label))\n     pr_live = 1;\n   has_call = TARGET_SHMEDIA ? ! leaf_function_p () : pr_live;\n-  for (count = 0, reg = FIRST_PSEUDO_REGISTER - 1; reg >= 0; reg--)\n+  for (count = 0, reg = FIRST_PSEUDO_REGISTER; reg-- != 0; )\n     {\n       if (reg == (TARGET_SHMEDIA ? PR_MEDIA_REG : PR_REG)\n \t  ? pr_live\n@@ -5178,13 +5178,13 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n \t     (TARGET_SHCOMPACT\n \t      && flag_pic\n \t      && current_function_args_info.call_cookie\n-\t      && reg == (int) PIC_OFFSET_TABLE_REGNUM)\n+\t      && reg == PIC_OFFSET_TABLE_REGNUM)\n \t     || (regs_ever_live[reg] && ! call_really_used_regs[reg])\n \t     || (current_function_calls_eh_return\n-\t\t && (reg == (int) EH_RETURN_DATA_REGNO (0)\n-\t\t     || reg == (int) EH_RETURN_DATA_REGNO (1)\n-\t\t     || reg == (int) EH_RETURN_DATA_REGNO (2)\n-\t\t     || reg == (int) EH_RETURN_DATA_REGNO (3)))\n+\t\t && (reg == EH_RETURN_DATA_REGNO (0)\n+\t\t     || reg == EH_RETURN_DATA_REGNO (1)\n+\t\t     || reg == EH_RETURN_DATA_REGNO (2)\n+\t\t     || reg == EH_RETURN_DATA_REGNO (3)))\n \t     || ((reg == MACL_REG || reg == MACH_REG)\n \t\t && regs_ever_live[reg]\n \t\t && sh_cfun_attr_renesas_p ())\n@@ -5560,7 +5560,7 @@ sh_expand_prologue (void)\n       for (entry = &schedule.entries[1]; entry->mode != VOIDmode; entry++)\n         {\n \t  enum machine_mode mode = entry->mode;\n-\t  int reg = entry->reg;\n+\t  unsigned int reg = entry->reg;\n \t  rtx reg_rtx, mem_rtx, pre_dec = NULL_RTX;\n \t  rtx orig_reg_rtx;\n \n@@ -6407,7 +6407,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n {\n   HOST_WIDE_INT size, rsize;\n   tree tmp, pptr_type_node;\n-  tree addr, lab_over, result = NULL;\n+  tree addr, lab_over = NULL, result = NULL;\n   int pass_by_ref = targetm.calls.must_pass_in_stack (TYPE_MODE (type), type);\n \n   if (pass_by_ref)\n@@ -7187,7 +7187,7 @@ sh_handle_sp_switch_attribute (tree *node, tree name, tree args,\n     }\n   else\n     {\n-      char *s = ggc_strdup (TREE_STRING_POINTER (TREE_VALUE (args)));\n+      const char *s = ggc_strdup (TREE_STRING_POINTER (TREE_VALUE (args)));\n       sp_switch = gen_rtx_SYMBOL_REF (VOIDmode, s);\n     }\n "}]}