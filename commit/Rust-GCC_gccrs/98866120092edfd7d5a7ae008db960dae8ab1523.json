{"sha": "98866120092edfd7d5a7ae008db960dae8ab1523", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg4NjYxMjAwOTJlZGZkN2Q1YTdhZTAwOGRiOTYwZGFlOGFiMTUyMw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-09T16:56:52Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-09T17:00:35Z"}, "message": "d: Merge upstream dmd 13d67c575.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11224\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 13d67c575.\n\t* d-builtins.cc (build_frontend_type): Update call to\n\tTypeVector::create.\n\t* d-frontend.cc (Global::_init): Move setting of errorLimit to ...\n\t* d-lang.cc (d_init_options): ... here.  Update for new field\n\tlocation of errorLimit.\n\t(d_post_options): Likewise.\n\t* d-port.cc (Port::readwordLE): Update signature.\n\t(Port::readwordBE): Likewise.\n\t(Port::readlongLE): Likewise.\n\t(Port::readlongBE): Likewise.\n\t* decl.cc (get_symbol_decl): Update for new field types.", "tree": {"sha": "5f8f01e69a689ae4b8d2ff66d380767a30806c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f8f01e69a689ae4b8d2ff66d380767a30806c8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98866120092edfd7d5a7ae008db960dae8ab1523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98866120092edfd7d5a7ae008db960dae8ab1523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98866120092edfd7d5a7ae008db960dae8ab1523", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98866120092edfd7d5a7ae008db960dae8ab1523/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef41587df9839d1dfc77dbc48a0830e42b36626e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef41587df9839d1dfc77dbc48a0830e42b36626e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef41587df9839d1dfc77dbc48a0830e42b36626e"}], "stats": {"total": 900, "additions": 843, "deletions": 57}, "files": [{"sha": "91e3173e670a5da7b69ef70695b3b435c07dbdd4", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -211,7 +211,7 @@ build_frontend_type (tree type)\n       if (dtype->nextOf ()->isTypeBasic () == NULL)\n \tbreak;\n \n-      dtype = (TypeVector::create (Loc (), dtype))->addMod (mod);\n+      dtype = (TypeVector::create (dtype))->addMod (mod);\n       builtin_converted_decls.safe_push (builtin_data (dtype, type));\n       return dtype;\n     }"}, {"sha": "5415d471ef4c4fda0a4e6e2ab3bb26cad68f7eec", "filename": "gcc/d/d-frontend.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fd-frontend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fd-frontend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-frontend.cc?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -55,7 +55,6 @@ Global::_init (void)\n     ;\n \n   this->stdmsg = stderr;\n-  this->errorLimit = flag_max_errors;\n }\n \n /* Start gagging. Return the current number of gagged errors.  */"}, {"sha": "badd67f5a8f11b67d113abe7e3f4f1ae9ec90bea", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -293,6 +293,7 @@ d_init_options (unsigned int, cl_decoded_option *decoded_options)\n   global.params.hdrStripPlainFunctions = true;\n   global.params.betterC = false;\n   global.params.allInst = false;\n+  global.params.errorLimit = flag_max_errors;\n \n   /* Default extern(C++) mangling to C++14.  */\n   global.params.cplusplus = CppStdRevisionCpp14;\n@@ -793,7 +794,7 @@ d_post_options (const char ** fn)\n \n   /* Make -fmax-errors visible to frontend's diagnostic machinery.  */\n   if (global_options_set.x_flag_max_errors)\n-    global.errorLimit = flag_max_errors;\n+    global.params.errorLimit = flag_max_errors;\n \n   if (flag_excess_precision == EXCESS_PRECISION_DEFAULT)\n     flag_excess_precision = EXCESS_PRECISION_STANDARD;"}, {"sha": "d49bb1ba8f3bf579ebe602eeebeee6a899601f6c", "filename": "gcc/d/d-port.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fd-port.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fd-port.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-port.cc?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -97,29 +97,29 @@ Port::isFloat64LiteralOutOfRange (const char *buffer)\n /* Fetch a little-endian 16-bit value from BUFFER.  */\n \n unsigned\n-Port::readwordLE (void *buffer)\n+Port::readwordLE (const void *buffer)\n {\n-  unsigned char *p = (unsigned char*) buffer;\n+  const unsigned char *p = (const unsigned char*) buffer;\n \n   return ((unsigned) p[1] << 8) | (unsigned) p[0];\n }\n \n /* Fetch a big-endian 16-bit value from BUFFER.  */\n \n unsigned\n-Port::readwordBE (void *buffer)\n+Port::readwordBE (const void *buffer)\n {\n-  unsigned char *p = (unsigned char*) buffer;\n+  const unsigned char *p = (const unsigned char*) buffer;\n \n   return ((unsigned) p[0] << 8) | (unsigned) p[1];\n }\n \n /* Fetch a little-endian 32-bit value from BUFFER.  */\n \n unsigned\n-Port::readlongLE (void *buffer)\n+Port::readlongLE (const void *buffer)\n {\n-  unsigned char *p = (unsigned char*) buffer;\n+  const unsigned char *p = (const unsigned char*) buffer;\n \n   return (((unsigned) p[3] << 24)\n \t  | ((unsigned) p[2] << 16)\n@@ -130,9 +130,9 @@ Port::readlongLE (void *buffer)\n /* Fetch a big-endian 32-bit value from BUFFER.  */\n \n unsigned\n-Port::readlongBE (void *buffer)\n+Port::readlongBE (const void *buffer)\n {\n-  unsigned char *p = (unsigned char*) buffer;\n+  const unsigned char *p = (const unsigned char*) buffer;\n \n   return (((unsigned) p[0] << 24)\n \t  | ((unsigned) p[1] << 16)"}, {"sha": "84aa42c139b2bd63b2fb20fd58fcbd342a9719c6", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -1134,8 +1134,12 @@ get_symbol_decl (Declaration *decl)\n     {\n       tree mangled_name;\n \n-      if (decl->mangleOverride)\n-\tmangled_name = get_identifier (decl->mangleOverride);\n+      if (decl->mangleOverride.length)\n+\t{\n+\t  mangled_name =\n+\t    get_identifier_with_length (decl->mangleOverride.ptr,\n+\t\t\t\t\tdecl->mangleOverride.length);\n+\t}\n       else\n \tmangled_name = get_identifier (d_mangle_decl (decl));\n "}, {"sha": "d6b2a2a379185de7e3c62bb7518282a9c8b196fb", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -1,4 +1,4 @@\n-5041e56f12806f13a8fa5e98a6c98279636a8d2a\n+13d67c5757b83a86411e510bd65a6b5167241324\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "1a7238a31cc91289b8cfa75dfa743a14a99db0ca", "filename": "gcc/d/dmd/access.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Faccess.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Faccess.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faccess.c?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -434,6 +434,7 @@ bool symbolIsVisible(Module *mod, Dsymbol *s)\n         default:\n             assert(0);\n     }\n+    return false;\n }\n \n /**\n@@ -475,6 +476,7 @@ bool symbolIsVisible(Scope *sc, Dsymbol *s)\n         default:\n             assert(0);\n     }\n+    return false;\n }\n \n /**"}, {"sha": "6cfc76d8c6ca60172b7e91bb3ba356f4ae638cfd", "filename": "gcc/d/dmd/aggregate.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Faggregate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Faggregate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faggregate.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -310,6 +310,7 @@ class ClassDeclaration : public AggregateDeclaration\n     Dsymbol *search(const Loc &loc, Identifier *ident, int flags = SearchLocalsOnly);\n     ClassDeclaration *searchBase(Identifier *ident);\n     void finalizeSize();\n+    bool hasMonitor();\n     bool isFuncHidden(FuncDeclaration *fd);\n     FuncDeclaration *findFunc(Identifier *ident, TypeFunction *tf);\n     void interfaceSemantic(Scope *sc);"}, {"sha": "09519af0e9937cfb56974bace8abb14c19895597", "filename": "gcc/d/dmd/ast_node.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fast_node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fast_node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fast_node.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -0,0 +1,20 @@\n+\n+/* Compiler implementation of the D programming language\n+ * Copyright (C) 1999-2020 by The D Language Foundation, All Rights Reserved\n+ * written by Walter Bright\n+ * http://www.digitalmars.com\n+ * Distributed under the Boost Software License, Version 1.0.\n+ * http://www.boost.org/LICENSE_1_0.txt\n+ * https://github.com/dlang/dmd/blob/master/src/dmd/ast_node.h\n+ */\n+\n+#pragma once\n+\n+#include \"root/object.h\"\n+\n+class Visitor;\n+\n+class ASTNode : public RootObject\n+{\n+    virtual void accept(Visitor*) = 0;\n+};"}, {"sha": "17398c1ef78b20e330e93a39addebb5323ee6e8b", "filename": "gcc/d/dmd/cond.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fcond.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fcond.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -10,6 +10,7 @@\n \n #pragma once\n \n+#include \"ast_node.h\"\n #include \"globals.h\"\n #include \"visitor.h\"\n \n@@ -25,7 +26,7 @@ class ForeachRangeStatement;\n \n int findCondition(Identifiers *ids, Identifier *ident);\n \n-class Condition\n+class Condition : public ASTNode\n {\n public:\n     Loc loc;\n@@ -40,7 +41,7 @@ class Condition\n     virtual int include(Scope *sc) = 0;\n     virtual DebugCondition *isDebugCondition() { return NULL; }\n     virtual VersionCondition *isVersionCondition() { return NULL; }\n-    virtual void accept(Visitor *v) { v->visit(this); }\n+    void accept(Visitor *v) { v->visit(this); }\n };\n \n class StaticForeach"}, {"sha": "5230647e62650f0771a7f675f403e11693063264", "filename": "gcc/d/dmd/ctfeexpr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fctfeexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fctfeexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fctfeexpr.c?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -1057,6 +1057,7 @@ static bool numCmp(TOK op, N n1, N n2)\n         default:\n             assert(0);\n     }\n+    return false;\n }\n \n /// Returns cmp OP 0; where OP is ==, !=, <, >=, etc. Result is 0 or 1\n@@ -1089,11 +1090,12 @@ int realCmp(TOK op, real_t r1, real_t r2)\n             case TOKle:\n             case TOKgt:\n             case TOKge:\n-                return 0;\n+                break;\n \n             default:\n                 assert(0);\n         }\n+        return 0;\n     }\n     else\n     {"}, {"sha": "7481f910e1108461765d524a22d710558cce3329", "filename": "gcc/d/dmd/dclass.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fdclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fdclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdclass.c?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -1100,7 +1100,7 @@ void ClassDeclaration::finalizeSize()\n     {\n         alignsize = target.ptrsize;\n         structsize = target.ptrsize;      // allow room for __vptr\n-        if (!isCPPclass())\n+        if (hasMonitor())\n             structsize += target.ptrsize; // allow room for __monitor\n     }\n \n@@ -1133,6 +1133,14 @@ void ClassDeclaration::finalizeSize()\n     checkOverlappedFields();\n }\n \n+/**************\n+ * Returns: true if there's a __monitor field\n+ */\n+bool ClassDeclaration::hasMonitor()\n+{\n+    return classKind == ClassKind::d;\n+}\n+\n /**********************************************************\n  * fd is in the vtbl[] for this class.\n  * Return 1 if function is hidden (not findable through search)."}, {"sha": "251c407bf8c301897cf4b6aeacbc96ea5745c538", "filename": "gcc/d/dmd/declaration.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fdeclaration.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fdeclaration.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -123,7 +123,7 @@ class Declaration : public Dsymbol\n     Prot protection;\n     LINK linkage;\n     int inuse;                  // used to detect cycles\n-    const char *mangleOverride;      // overridden symbol with pragma(mangle, \"...\")\n+    DString mangleOverride;     // overridden symbol with pragma(mangle, \"...\")\n \n     Declaration(Identifier *id);\n     void semantic(Scope *sc);"}, {"sha": "daa0e8c3bdc812b5f6301d9424a0124acefb02bc", "filename": "gcc/d/dmd/dmangle.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fdmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fdmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmangle.c?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -520,9 +520,9 @@ class Mangler : public Visitor\n     {\n         assert(!fd->isFuncAliasDeclaration());\n \n-        if (fd->mangleOverride)\n+        if (fd->mangleOverride.length)\n         {\n-            buf->writestring(fd->mangleOverride);\n+            buf->writestring(fd->mangleOverride.ptr);\n             return;\n         }\n \n@@ -543,9 +543,9 @@ class Mangler : public Visitor\n \n     void visit(VarDeclaration *vd)\n     {\n-        if (vd->mangleOverride)\n+        if (vd->mangleOverride.length)\n         {\n-            buf->writestring(vd->mangleOverride);\n+            buf->writestring(vd->mangleOverride.ptr);\n             return;\n         }\n "}, {"sha": "6e37f9bd1af5f1944281c496d88c3638188a03a4", "filename": "gcc/d/dmd/dsymbol.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fdsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fdsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -12,7 +12,7 @@\n \n #include \"root/root.h\"\n #include \"root/stringtable.h\"\n-\n+#include \"ast_node.h\"\n #include \"globals.h\"\n #include \"arraytypes.h\"\n #include \"visitor.h\"\n@@ -145,7 +145,7 @@ enum\n \n typedef int (*Dsymbol_apply_ft_t)(Dsymbol *, void *);\n \n-class Dsymbol : public RootObject\n+class Dsymbol : public ASTNode\n {\n public:\n     Identifier *ident;\n@@ -281,7 +281,7 @@ class Dsymbol : public RootObject\n     virtual AttribDeclaration *isAttribDeclaration() { return NULL; }\n     virtual AnonDeclaration *isAnonDeclaration() { return NULL; }\n     virtual OverloadSet *isOverloadSet() { return NULL; }\n-    virtual void accept(Visitor *v) { v->visit(this); }\n+    void accept(Visitor *v) { v->visit(this); }\n };\n \n // Dsymbol that generates a scope"}, {"sha": "baa6f5f5a0d95457a11a8f04f2f202a088d75d22", "filename": "gcc/d/dmd/expression.c", "status": "modified", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fexpression.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fexpression.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.c?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -2818,6 +2818,524 @@ bool Expression::isBool(bool)\n     return false;\n }\n \n+IntegerExp *Expression::isIntegerExp()\n+{\n+    return op == TOKint64 ? (IntegerExp *)this : NULL;\n+}\n+\n+ErrorExp *Expression::isErrorExp()\n+{\n+    return op == TOKerror ? (ErrorExp *)this : NULL;\n+}\n+\n+VoidInitExp *Expression::isVoidInitExp()\n+{\n+    return op == TOKvoid ? (VoidInitExp *)this : NULL;\n+}\n+\n+RealExp *Expression::isRealExp()\n+{\n+    return op == TOKfloat64 ? (RealExp *)this : NULL;\n+}\n+\n+ComplexExp *Expression::isComplexExp()\n+{\n+    return op == TOKcomplex80 ? (ComplexExp *)this : NULL;\n+}\n+\n+IdentifierExp *Expression::isIdentifierExp()\n+{\n+    return op == TOKidentifier ? (IdentifierExp *)this : NULL;\n+}\n+\n+DollarExp *Expression::isDollarExp()\n+{\n+    return op == TOKdollar ? (DollarExp *)this : NULL;\n+}\n+\n+DsymbolExp *Expression::isDsymbolExp()\n+{\n+    return op == TOKdsymbol ? (DsymbolExp *)this : NULL;\n+}\n+\n+ThisExp *Expression::isThisExp()\n+{\n+    return op == TOKthis ? (ThisExp *)this : NULL;\n+}\n+\n+SuperExp *Expression::isSuperExp()\n+{\n+    return op == TOKsuper ? (SuperExp *)this : NULL;\n+}\n+\n+NullExp *Expression::isNullExp()\n+{\n+    return op == TOKnull ? (NullExp *)this : NULL;\n+}\n+\n+StringExp *Expression::isStringExp()\n+{\n+    return op == TOKstring ? (StringExp *)this : NULL;\n+}\n+\n+TupleExp *Expression::isTupleExp()\n+{\n+    return op == TOKtuple ? (TupleExp *)this : NULL;\n+}\n+\n+ArrayLiteralExp *Expression::isArrayLiteralExp()\n+{\n+    return op == TOKarrayliteral ? (ArrayLiteralExp *)this : NULL;\n+}\n+\n+AssocArrayLiteralExp *Expression::isAssocArrayLiteralExp()\n+{\n+    return op == TOKassocarrayliteral ? (AssocArrayLiteralExp *)this : NULL;\n+}\n+\n+StructLiteralExp *Expression::isStructLiteralExp()\n+{\n+    return op == TOKstructliteral ? (StructLiteralExp *)this : NULL;\n+}\n+\n+TypeExp *Expression::isTypeExp()\n+{\n+    return op == TOKtype ? (TypeExp *)this : NULL;\n+}\n+\n+ScopeExp *Expression::isScopeExp()\n+{\n+    return op == TOKscope ? (ScopeExp *)this : NULL;\n+}\n+\n+TemplateExp *Expression::isTemplateExp()\n+{\n+    return op == TOKtemplate ? (TemplateExp *)this : NULL;\n+}\n+\n+NewExp *Expression::isNewExp()\n+{\n+    return op == TOKnew ? (NewExp *)this : NULL;\n+}\n+\n+NewAnonClassExp *Expression::isNewAnonClassExp()\n+{\n+    return op == TOKnewanonclass ? (NewAnonClassExp *)this : NULL;\n+}\n+\n+SymOffExp *Expression::isSymOffExp()\n+{\n+    return op == TOKsymoff ? (SymOffExp *)this : NULL;\n+}\n+\n+VarExp *Expression::isVarExp()\n+{\n+    return op == TOKvar ? (VarExp *)this : NULL;\n+}\n+\n+OverExp *Expression::isOverExp()\n+{\n+    return op == TOKoverloadset ? (OverExp *)this : NULL;\n+}\n+\n+FuncExp *Expression::isFuncExp()\n+{\n+    return op == TOKfunction ? (FuncExp *)this : NULL;\n+}\n+\n+DeclarationExp *Expression::isDeclarationExp()\n+{\n+    return op == TOKdeclaration ? (DeclarationExp *)this : NULL;\n+}\n+\n+TypeidExp *Expression::isTypeidExp()\n+{\n+    return op == TOKtypeid ? (TypeidExp *)this : NULL;\n+}\n+\n+TraitsExp *Expression::isTraitsExp()\n+{\n+    return op == TOKtraits ? (TraitsExp *)this : NULL;\n+}\n+\n+HaltExp *Expression::isHaltExp()\n+{\n+    return op == TOKhalt ? (HaltExp *)this : NULL;\n+}\n+\n+IsExp *Expression::isExp()\n+{\n+    return op == TOKis ? (IsExp *)this : NULL;\n+}\n+\n+CompileExp *Expression::isCompileExp()\n+{\n+    return op == TOKmixin ? (CompileExp *)this : NULL;\n+}\n+\n+ImportExp *Expression::isImportExp()\n+{\n+    return op == TOKimport ? (ImportExp *)this : NULL;\n+}\n+\n+AssertExp *Expression::isAssertExp()\n+{\n+    return op == TOKassert ? (AssertExp *)this : NULL;\n+}\n+\n+DotIdExp *Expression::isDotIdExp()\n+{\n+    return op == TOKdotid ? (DotIdExp *)this : NULL;\n+}\n+\n+DotTemplateExp *Expression::isDotTemplateExp()\n+{\n+    return op == TOKdotti ? (DotTemplateExp *)this : NULL;\n+}\n+\n+DotVarExp *Expression::isDotVarExp()\n+{\n+    return op == TOKdotvar ? (DotVarExp *)this : NULL;\n+}\n+\n+DotTemplateInstanceExp *Expression::isDotTemplateInstanceExp()\n+{\n+    return op == TOKdotti ? (DotTemplateInstanceExp *)this : NULL;\n+}\n+\n+DelegateExp *Expression::isDelegateExp()\n+{\n+    return op == TOKdelegate ? (DelegateExp *)this : NULL;\n+}\n+\n+DotTypeExp *Expression::isDotTypeExp()\n+{\n+    return op == TOKdottype ? (DotTypeExp *)this : NULL;\n+}\n+\n+CallExp *Expression::isCallExp()\n+{\n+    return op == TOKcall ? (CallExp *)this : NULL;\n+}\n+\n+AddrExp *Expression::isAddrExp()\n+{\n+    return op == TOKaddress ? (AddrExp *)this : NULL;\n+}\n+\n+PtrExp *Expression::isPtrExp()\n+{\n+    return op == TOKstar ? (PtrExp *)this : NULL;\n+}\n+\n+NegExp *Expression::isNegExp()\n+{\n+    return op == TOKneg ? (NegExp *)this : NULL;\n+}\n+\n+UAddExp *Expression::isUAddExp()\n+{\n+    return op == TOKuadd ? (UAddExp *)this : NULL;\n+}\n+\n+ComExp *Expression::isComExp()\n+{\n+    return op == TOKtilde ? (ComExp *)this : NULL;\n+}\n+\n+NotExp *Expression::isNotExp()\n+{\n+    return op == TOKnot ? (NotExp *)this : NULL;\n+}\n+\n+DeleteExp *Expression::isDeleteExp()\n+{\n+    return op == TOKdelete ? (DeleteExp *)this : NULL;\n+}\n+\n+CastExp *Expression::isCastExp()\n+{\n+    return op == TOKcast ? (CastExp *)this : NULL;\n+}\n+\n+VectorExp *Expression::isVectorExp()\n+{\n+    return op == TOKvector ? (VectorExp *)this : NULL;\n+}\n+\n+VectorArrayExp *Expression::isVectorArrayExp()\n+{\n+    return op == TOKvectorarray ? (VectorArrayExp *)this : NULL;\n+}\n+\n+SliceExp *Expression::isSliceExp()\n+{\n+    return op == TOKslice ? (SliceExp *)this : NULL;\n+}\n+\n+ArrayLengthExp *Expression::isArrayLengthExp()\n+{\n+    return op == TOKarraylength ? (ArrayLengthExp *)this : NULL;\n+}\n+\n+ArrayExp *Expression::isArrayExp()\n+{\n+    return op == TOKarray ? (ArrayExp *)this : NULL;\n+}\n+\n+DotExp *Expression::isDotExp()\n+{\n+    return op == TOKdot ? (DotExp *)this : NULL;\n+}\n+\n+CommaExp *Expression::isCommaExp()\n+{\n+    return op == TOKcomma ? (CommaExp *)this : NULL;\n+}\n+\n+IntervalExp *Expression::isIntervalExp()\n+{\n+    return op == TOKinterval ? (IntervalExp *)this : NULL;\n+}\n+\n+DelegatePtrExp *Expression::isDelegatePtrExp()\n+{\n+    return op == TOKdelegateptr ? (DelegatePtrExp *)this : NULL;\n+}\n+\n+DelegateFuncptrExp *Expression::isDelegateFuncptrExp()\n+{\n+    return op == TOKdelegatefuncptr ? (DelegateFuncptrExp *)this : NULL;\n+}\n+\n+IndexExp *Expression::isIndexExp()\n+{\n+    return op == TOKindex ? (IndexExp *)this : NULL;\n+}\n+\n+PostExp *Expression::isPostExp()\n+{\n+    return (op == TOKplusplus || op == TOKminusminus) ? (PostExp *)this : NULL;\n+}\n+\n+PreExp *Expression::isPreExp()\n+{\n+    return (op == TOKpreplusplus || op == TOKpreminusminus) ? (PreExp *)this : NULL;\n+}\n+\n+AssignExp *Expression::isAssignExp()\n+{\n+    return op == TOKassign ? (AssignExp *)this : NULL;\n+}\n+\n+ConstructExp *Expression::isConstructExp()\n+{\n+    return op == TOKconstruct ? (ConstructExp *)this : NULL;\n+}\n+\n+BlitExp *Expression::isBlitExp()\n+{\n+    return op == TOKblit ? (BlitExp *)this : NULL;\n+}\n+\n+AddAssignExp *Expression::isAddAssignExp()\n+{\n+    return op == TOKaddass ? (AddAssignExp *)this : NULL;\n+}\n+\n+MinAssignExp *Expression::isMinAssignExp()\n+{\n+    return op == TOKminass ? (MinAssignExp *)this : NULL;\n+}\n+\n+MulAssignExp *Expression::isMulAssignExp()\n+{\n+    return op == TOKmulass ? (MulAssignExp *)this : NULL;\n+}\n+\n+\n+DivAssignExp *Expression::isDivAssignExp()\n+{\n+    return op == TOKdivass ? (DivAssignExp *)this : NULL;\n+}\n+\n+ModAssignExp *Expression::isModAssignExp()\n+{\n+    return op == TOKmodass ? (ModAssignExp *)this : NULL;\n+}\n+\n+AndAssignExp *Expression::isAndAssignExp()\n+{\n+    return op == TOKandass ? (AndAssignExp *)this : NULL;\n+}\n+\n+OrAssignExp *Expression::isOrAssignExp()\n+{\n+    return op == TOKorass ? (OrAssignExp *)this : NULL;\n+}\n+\n+XorAssignExp *Expression::isXorAssignExp()\n+{\n+    return op == TOKxorass ? (XorAssignExp *)this : NULL;\n+}\n+\n+PowAssignExp *Expression::isPowAssignExp()\n+{\n+    return op == TOKpowass ? (PowAssignExp *)this : NULL;\n+}\n+\n+\n+ShlAssignExp *Expression::isShlAssignExp()\n+{\n+    return op == TOKshlass ? (ShlAssignExp *)this : NULL;\n+}\n+\n+ShrAssignExp *Expression::isShrAssignExp()\n+{\n+    return op == TOKshrass ? (ShrAssignExp *)this : NULL;\n+}\n+\n+UshrAssignExp *Expression::isUshrAssignExp()\n+{\n+    return op == TOKushrass ? (UshrAssignExp *)this : NULL;\n+}\n+\n+CatAssignExp *Expression::isCatAssignExp()\n+{\n+    return op == TOKcatass ? (CatAssignExp *)this : NULL;\n+}\n+\n+AddExp *Expression::isAddExp()\n+{\n+    return op == TOKadd ? (AddExp *)this : NULL;\n+}\n+\n+MinExp *Expression::isMinExp()\n+{\n+    return op == TOKmin ? (MinExp *)this : NULL;\n+}\n+\n+CatExp *Expression::isCatExp()\n+{\n+    return op == TOKcat ? (CatExp *)this : NULL;\n+}\n+\n+MulExp *Expression::isMulExp()\n+{\n+    return op == TOKmul ? (MulExp *)this : NULL;\n+}\n+\n+DivExp *Expression::isDivExp()\n+{\n+    return op == TOKdiv ? (DivExp *)this : NULL;\n+}\n+\n+ModExp *Expression::isModExp()\n+{\n+    return op == TOKmod ? (ModExp *)this : NULL;\n+}\n+\n+PowExp *Expression::isPowExp()\n+{\n+    return op == TOKpow ? (PowExp *)this : NULL;\n+}\n+\n+ShlExp *Expression::isShlExp()\n+{\n+    return op == TOKshl ? (ShlExp *)this : NULL;\n+}\n+\n+ShrExp *Expression::isShrExp()\n+{\n+    return op == TOKshr ? (ShrExp *)this : NULL;\n+}\n+\n+UshrExp *Expression::isUshrExp()\n+{\n+    return op == TOKushr ? (UshrExp *)this : NULL;\n+}\n+\n+AndExp *Expression::isAndExp()\n+{\n+    return op == TOKand ? (AndExp *)this : NULL;\n+}\n+\n+OrExp *Expression::isOrExp()\n+{\n+    return op == TOKor ? (OrExp *)this : NULL;\n+}\n+\n+XorExp *Expression::isXorExp()\n+{\n+    return op == TOKxor ? (XorExp *)this : NULL;\n+}\n+\n+LogicalExp *Expression::isLogicalExp()\n+{\n+    return (op == TOKandand || op == TOKoror) ? (LogicalExp *)this : NULL;\n+}\n+\n+InExp *Expression::isInExp()\n+{\n+    return op == TOKin ? (InExp *)this : NULL;\n+}\n+\n+RemoveExp *Expression::isRemoveExp()\n+{\n+    return op == TOKremove ? (RemoveExp *)this : NULL;\n+}\n+\n+EqualExp *Expression::isEqualExp()\n+{\n+    return (op == TOKequal || op == TOKnotequal) ? (EqualExp *)this : NULL;\n+}\n+\n+IdentityExp *Expression::isIdentityExp()\n+{\n+    return (op == TOKidentity || op == TOKnotidentity) ? (IdentityExp *)this : NULL;\n+}\n+\n+CondExp *Expression::isCondExp()\n+{\n+    return op == TOKquestion ? (CondExp *)this : NULL;\n+}\n+\n+DefaultInitExp *Expression::isDefaultInitExp()\n+{\n+    return op == TOKdefault ? (DefaultInitExp *)this : NULL;\n+}\n+\n+FileInitExp *Expression::isFileInitExp()\n+{\n+    return (op == TOKfile || op == TOKfilefullpath) ? (FileInitExp *)this : NULL;\n+}\n+\n+LineInitExp *Expression::isLineInitExp()\n+{\n+    return op == TOKline ? (LineInitExp *)this : NULL;\n+}\n+\n+ModuleInitExp *Expression::isModuleInitExp()\n+{\n+    return op == TOKmodulestring ? (ModuleInitExp *)this : NULL;\n+}\n+\n+FuncInitExp *Expression::isFuncInitExp()\n+{\n+    return op == TOKfuncstring ? (FuncInitExp *)this : NULL;\n+}\n+\n+PrettyFuncInitExp *Expression::isPrettyFuncInitExp()\n+{\n+    return op == TOKprettyfunc ? (PrettyFuncInitExp *)this : NULL;\n+}\n+\n+ClassReferenceExp *Expression::isClassReferenceExp()\n+{\n+    return op == TOKclassreference ? (ClassReferenceExp *)this : NULL;\n+}\n+\n+\n /****************************************\n  * Resolve __FILE__, __LINE__, __MODULE__, __FUNCTION__, __PRETTY_FUNCTION__ to loc.\n  */"}, {"sha": "fde029ce146cec8fd84b8a40aa877d6c43537ee2", "filename": "gcc/d/dmd/expression.h", "status": "modified", "additions": 107, "deletions": 2, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fexpression.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fexpression.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -10,6 +10,7 @@\n \n #pragma once\n \n+#include \"ast_node.h\"\n #include \"complex_t.h\"\n #include \"globals.h\"\n #include \"identifier.h\"\n@@ -121,7 +122,7 @@ enum OwnedBy\n #define WANTvalue   0   // default\n #define WANTexpand  1   // expand const/immutable variables if possible\n \n-class Expression : public RootObject\n+class Expression : public ASTNode\n {\n public:\n     Loc loc;                    // file location\n@@ -218,7 +219,111 @@ class Expression : public RootObject\n         return true;\n     }\n \n-    virtual void accept(Visitor *v) { v->visit(this); }\n+    IntegerExp* isIntegerExp();\n+    ErrorExp* isErrorExp();\n+    VoidInitExp* isVoidInitExp();\n+    RealExp* isRealExp();\n+    ComplexExp* isComplexExp();\n+    IdentifierExp* isIdentifierExp();\n+    DollarExp* isDollarExp();\n+    DsymbolExp* isDsymbolExp();\n+    ThisExp* isThisExp();\n+    SuperExp* isSuperExp();\n+    NullExp* isNullExp();\n+    StringExp* isStringExp();\n+    TupleExp* isTupleExp();\n+    ArrayLiteralExp* isArrayLiteralExp();\n+    AssocArrayLiteralExp* isAssocArrayLiteralExp();\n+    StructLiteralExp* isStructLiteralExp();\n+    TypeExp* isTypeExp();\n+    ScopeExp* isScopeExp();\n+    TemplateExp* isTemplateExp();\n+    NewExp* isNewExp();\n+    NewAnonClassExp* isNewAnonClassExp();\n+    SymOffExp* isSymOffExp();\n+    VarExp* isVarExp();\n+    OverExp* isOverExp();\n+    FuncExp* isFuncExp();\n+    DeclarationExp* isDeclarationExp();\n+    TypeidExp* isTypeidExp();\n+    TraitsExp* isTraitsExp();\n+    HaltExp* isHaltExp();\n+    IsExp* isExp();\n+    CompileExp* isCompileExp();\n+    ImportExp* isImportExp();\n+    AssertExp* isAssertExp();\n+    DotIdExp* isDotIdExp();\n+    DotTemplateExp* isDotTemplateExp();\n+    DotVarExp* isDotVarExp();\n+    DotTemplateInstanceExp* isDotTemplateInstanceExp();\n+    DelegateExp* isDelegateExp();\n+    DotTypeExp* isDotTypeExp();\n+    CallExp* isCallExp();\n+    AddrExp* isAddrExp();\n+    PtrExp* isPtrExp();\n+    NegExp* isNegExp();\n+    UAddExp* isUAddExp();\n+    ComExp* isComExp();\n+    NotExp* isNotExp();\n+    DeleteExp* isDeleteExp();\n+    CastExp* isCastExp();\n+    VectorExp* isVectorExp();\n+    VectorArrayExp* isVectorArrayExp();\n+    SliceExp* isSliceExp();\n+    ArrayLengthExp* isArrayLengthExp();\n+    ArrayExp* isArrayExp();\n+    DotExp* isDotExp();\n+    CommaExp* isCommaExp();\n+    IntervalExp* isIntervalExp();\n+    DelegatePtrExp* isDelegatePtrExp();\n+    DelegateFuncptrExp* isDelegateFuncptrExp();\n+    IndexExp* isIndexExp();\n+    PostExp* isPostExp();\n+    PreExp* isPreExp();\n+    AssignExp* isAssignExp();\n+    ConstructExp* isConstructExp();\n+    BlitExp* isBlitExp();\n+    AddAssignExp* isAddAssignExp();\n+    MinAssignExp* isMinAssignExp();\n+    MulAssignExp* isMulAssignExp();\n+    DivAssignExp* isDivAssignExp();\n+    ModAssignExp* isModAssignExp();\n+    AndAssignExp* isAndAssignExp();\n+    OrAssignExp* isOrAssignExp();\n+    XorAssignExp* isXorAssignExp();\n+    PowAssignExp* isPowAssignExp();\n+    ShlAssignExp* isShlAssignExp();\n+    ShrAssignExp* isShrAssignExp();\n+    UshrAssignExp* isUshrAssignExp();\n+    CatAssignExp* isCatAssignExp();\n+    AddExp* isAddExp();\n+    MinExp* isMinExp();\n+    CatExp* isCatExp();\n+    MulExp* isMulExp();\n+    DivExp* isDivExp();\n+    ModExp* isModExp();\n+    PowExp* isPowExp();\n+    ShlExp* isShlExp();\n+    ShrExp* isShrExp();\n+    UshrExp* isUshrExp();\n+    AndExp* isAndExp();\n+    OrExp* isOrExp();\n+    XorExp* isXorExp();\n+    LogicalExp* isLogicalExp();\n+    InExp* isInExp();\n+    RemoveExp* isRemoveExp();\n+    EqualExp* isEqualExp();\n+    IdentityExp* isIdentityExp();\n+    CondExp* isCondExp();\n+    DefaultInitExp* isDefaultInitExp();\n+    FileInitExp* isFileInitExp();\n+    LineInitExp* isLineInitExp();\n+    ModuleInitExp* isModuleInitExp();\n+    FuncInitExp* isFuncInitExp();\n+    PrettyFuncInitExp* isPrettyFuncInitExp();\n+    ClassReferenceExp* isClassReferenceExp();\n+\n+    void accept(Visitor *v) { v->visit(this); }\n };\n \n class IntegerExp : public Expression"}, {"sha": "9e1a5b2d15a49b9915f3b5f000ad67ff8527c7e9", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -144,6 +144,8 @@ struct Param\n \n     CHECKACTION checkAction;       // action to take when bounds, asserts or switch defaults are violated\n \n+    unsigned errorLimit;\n+\n     DString  argv0;    // program name\n     Array<const char *> modFileAliasStrings; // array of char*'s of -I module filename alias strings\n     Array<const char *> *imppath;     // array of char*'s of where to look for import modules\n@@ -235,8 +237,7 @@ struct Global\n     FILE *stdmsg;          // where to send verbose messages\n     unsigned gag;          // !=0 means gag reporting of errors & warnings\n     unsigned gaggedErrors; // number of errors reported while gagged\n-\n-    unsigned errorLimit;\n+    unsigned gaggedWarnings; // number of warnings reported while gagged\n \n     void* console;         // opaque pointer to console for controlling text attributes\n "}, {"sha": "6f98fdb494686af48745ac5e7eb4db9f65e21d5a", "filename": "gcc/d/dmd/init.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Finit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Finit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Finit.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -11,7 +11,7 @@\n #pragma once\n \n #include \"root/root.h\"\n-\n+#include \"ast_node.h\"\n #include \"globals.h\"\n #include \"arraytypes.h\"\n #include \"visitor.h\"\n@@ -29,7 +29,7 @@ class ExpInitializer;\n \n enum NeedInterpret { INITnointerpret, INITinterpret };\n \n-class Initializer : public RootObject\n+class Initializer : public ASTNode\n {\n public:\n     Loc loc;\n@@ -45,7 +45,7 @@ class Initializer : public RootObject\n     virtual StructInitializer  *isStructInitializer()  { return NULL; }\n     virtual ArrayInitializer   *isArrayInitializer()  { return NULL; }\n     virtual ExpInitializer     *isExpInitializer()  { return NULL; }\n-    virtual void accept(Visitor *v) { v->visit(this); }\n+    void accept(Visitor *v) { v->visit(this); }\n };\n \n class VoidInitializer : public Initializer"}, {"sha": "b07ce15991296d9482016bf72f6242b0fb02c1b7", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 102, "deletions": 2, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -2328,6 +2328,106 @@ TypeBasic *Type::isTypeBasic()\n     return NULL;\n }\n \n+TypeError *Type::isTypeError()\n+{\n+    return ty == Terror ? (TypeError *)this : NULL;\n+}\n+\n+TypeVector *Type::isTypeVector()\n+{\n+    return ty == Tvector ? (TypeVector *)this : NULL;\n+}\n+\n+TypeSArray *Type::isTypeSArray()\n+{\n+    return ty == Tsarray ? (TypeSArray *)this : NULL;\n+}\n+\n+TypeDArray *Type::isTypeDArray()\n+{\n+    return ty == Tarray ? (TypeDArray *)this : NULL;\n+}\n+\n+TypeAArray *Type::isTypeAArray()\n+{\n+    return ty == Taarray ? (TypeAArray *)this : NULL;\n+}\n+\n+TypePointer *Type::isTypePointer()\n+{\n+    return ty == Tpointer ? (TypePointer *)this : NULL;\n+}\n+\n+TypeReference *Type::isTypeReference()\n+{\n+    return ty == Treference ? (TypeReference *)this : NULL;\n+}\n+\n+TypeFunction *Type::isTypeFunction()\n+{\n+    return ty == Tfunction ? (TypeFunction *)this : NULL;\n+}\n+\n+TypeDelegate *Type::isTypeDelegate()\n+{\n+    return ty == Tdelegate ? (TypeDelegate *)this : NULL;\n+}\n+\n+TypeIdentifier *Type::isTypeIdentifier()\n+{\n+    return ty == Tident ? (TypeIdentifier *)this : NULL;\n+}\n+\n+TypeInstance *Type::isTypeInstance()\n+{\n+    return ty == Tinstance ? (TypeInstance *)this : NULL;\n+}\n+\n+TypeTypeof *Type::isTypeTypeof()\n+{\n+    return ty == Ttypeof ? (TypeTypeof *)this : NULL;\n+}\n+\n+TypeReturn *Type::isTypeReturn()\n+{\n+    return ty == Treturn ? (TypeReturn *)this : NULL;\n+}\n+\n+TypeStruct *Type::isTypeStruct()\n+{\n+    return ty == Tstruct ? (TypeStruct *)this : NULL;\n+}\n+\n+TypeEnum *Type::isTypeEnum()\n+{\n+    return ty == Tenum ? (TypeEnum *)this : NULL;\n+}\n+\n+TypeClass *Type::isTypeClass()\n+{\n+    return ty == Tclass ? (TypeClass *)this : NULL;\n+}\n+\n+TypeTuple *Type::isTypeTuple()\n+{\n+    return ty == Ttuple ? (TypeTuple *)this : NULL;\n+}\n+\n+TypeSlice *Type::isTypeSlice()\n+{\n+    return ty == Tslice ? (TypeSlice *)this : NULL;\n+}\n+\n+TypeNull *Type::isTypeNull()\n+{\n+    return ty == Tnull ? (TypeNull *)this : NULL;\n+}\n+\n+TypeTraits *Type::isTypeTraits()\n+{\n+    return ty == Ttraits ? (TypeTraits *)this : NULL;\n+}\n+\n TypeFunction *Type::toTypeFunction()\n {\n     if (ty != Tfunction)\n@@ -3688,7 +3788,7 @@ TypeVector::TypeVector(Type *basetype)\n     this->basetype = basetype;\n }\n \n-TypeVector *TypeVector::create(Loc, Type *basetype)\n+TypeVector *TypeVector::create(Type *basetype)\n {\n     return new TypeVector(basetype);\n }\n@@ -8578,7 +8678,7 @@ Expression *TypeClass::dotExp(Scope *sc, Expression *e, Identifier *ident, int f\n             return e;\n         }\n \n-        if (ident == Id::__monitor)\n+        if (ident == Id::__monitor && sym->hasMonitor())\n         {\n             /* The handle to the monitor (call it a void*)\n              * *(cast(void**)e + 1)"}, {"sha": "4e28deadea735bcc58f172dd14b62bc6f66a4c6c", "filename": "gcc/d/dmd/mtype.h", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fmtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fmtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -15,6 +15,7 @@\n #include \"root/dcompat.h\" // for d_size_t\n \n #include \"arraytypes.h\"\n+#include \"ast_node.h\"\n #include \"expression.h\"\n #include \"visitor.h\"\n \n@@ -134,7 +135,7 @@ enum VarArg\n                          ///   or https://dlang.org/spec/function.html#typesafe_variadic_functions\n };\n \n-class Type : public RootObject\n+class Type : public ASTNode\n {\n public:\n     TY ty;\n@@ -348,7 +349,28 @@ class Type : public RootObject\n \n     // For eliminating dynamic_cast\n     virtual TypeBasic *isTypeBasic();\n-    virtual void accept(Visitor *v) { v->visit(this); }\n+    TypeError *isTypeError();\n+    TypeVector *isTypeVector();\n+    TypeSArray *isTypeSArray();\n+    TypeDArray *isTypeDArray();\n+    TypeAArray *isTypeAArray();\n+    TypePointer *isTypePointer();\n+    TypeReference *isTypeReference();\n+    TypeFunction *isTypeFunction();\n+    TypeDelegate *isTypeDelegate();\n+    TypeIdentifier *isTypeIdentifier();\n+    TypeInstance *isTypeInstance();\n+    TypeTypeof *isTypeTypeof();\n+    TypeReturn *isTypeReturn();\n+    TypeStruct *isTypeStruct();\n+    TypeEnum *isTypeEnum();\n+    TypeClass *isTypeClass();\n+    TypeTuple *isTypeTuple();\n+    TypeSlice *isTypeSlice();\n+    TypeNull *isTypeNull();\n+    TypeTraits *isTypeTraits();\n+\n+    void accept(Visitor *v) { v->visit(this); }\n };\n \n class TypeError : public Type\n@@ -424,7 +446,7 @@ class TypeVector : public Type\n     Type *basetype;\n \n     TypeVector(Type *basetype);\n-    static TypeVector *create(Loc loc, Type *basetype);\n+    static TypeVector *create(Type *basetype);\n     const char *kind();\n     Type *syntaxCopy();\n     Type *semantic(Loc loc, Scope *sc);\n@@ -595,7 +617,7 @@ enum PURE\n     PUREstrong = 4      // parameters are values or immutable\n };\n \n-class Parameter : public RootObject\n+class Parameter : public ASTNode\n {\n public:\n     StorageClass storageClass;\n@@ -609,7 +631,7 @@ class Parameter : public RootObject\n     Type *isLazyArray();\n     // kludge for template.isType()\n     int dyncast() const { return DYNCAST_PARAMETER; }\n-    virtual void accept(Visitor *v) { v->visit(this); }\n+    void accept(Visitor *v) { v->visit(this); }\n \n     static Parameters *arraySyntaxCopy(Parameters *parameters);\n     static size_t dim(Parameters *parameters);"}, {"sha": "b35da2530724f9e35a037ee6b15aa54a336e43d6", "filename": "gcc/d/dmd/root/port.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Froot%2Fport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Froot%2Fport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fport.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -32,10 +32,10 @@ struct Port\n     static bool isFloat64LiteralOutOfRange(const char *s);\n \n     static void writelongLE(unsigned value, void *buffer);\n-    static unsigned readlongLE(void *buffer);\n+    static unsigned readlongLE(const void *buffer);\n     static void writelongBE(unsigned value, void *buffer);\n-    static unsigned readlongBE(void *buffer);\n-    static unsigned readwordLE(void *buffer);\n-    static unsigned readwordBE(void *buffer);\n+    static unsigned readlongBE(const void *buffer);\n+    static unsigned readwordLE(const void *buffer);\n+    static unsigned readwordBE(const void *buffer);\n     static void valcpy(void *dst, uint64_t val, size_t size);\n };"}, {"sha": "c8aa4d343aa78650a8def7fd17526288c3c1d122", "filename": "gcc/d/dmd/statement.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fstatement.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Fstatement.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatement.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -13,6 +13,7 @@\n #include \"root/root.h\"\n \n #include \"arraytypes.h\"\n+#include \"ast_node.h\"\n #include \"dsymbol.h\"\n #include \"visitor.h\"\n #include \"tokens.h\"\n@@ -66,7 +67,7 @@ enum BE\n     BEany = (BEfallthru | BEthrow | BEreturn | BEgoto | BEhalt)\n };\n \n-class Statement : public RootObject\n+class Statement : public ASTNode\n {\n public:\n     Loc loc;\n@@ -105,7 +106,7 @@ class Statement : public RootObject\n     virtual BreakStatement *isBreakStatement() { return NULL; }\n     virtual DtorExpStatement *isDtorExpStatement() { return NULL; }\n     virtual ForwardingStatement *isForwardingStatement() { return NULL; }\n-    virtual void accept(Visitor *v) { v->visit(this); }\n+    void accept(Visitor *v) { v->visit(this); }\n };\n \n /** Any Statement that fails semantic() or has a component that is an ErrorExp or"}, {"sha": "0a5bc798d6b1e37d28147a7dd8c103a35acf83d0", "filename": "gcc/d/dmd/template.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Ftemplate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Ftemplate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftemplate.h?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -119,7 +119,7 @@ class TemplateDeclaration : public ScopeDsymbol\n  * For this-parameter:\n  *  template Foo(this ident)\n  */\n-class TemplateParameter\n+class TemplateParameter : public ASTNode\n {\n public:\n     Loc loc;\n@@ -159,7 +159,7 @@ class TemplateParameter\n     /* Create dummy argument based on parameter.\n      */\n     virtual void *dummyArg() = 0;\n-    virtual void accept(Visitor *v) { v->visit(this); }\n+    void accept(Visitor *v) { v->visit(this); }\n };\n \n /* Syntax:"}, {"sha": "c497f961315045374d218d0094062fa98188220b", "filename": "gcc/d/dmd/utf.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Futf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98866120092edfd7d5a7ae008db960dae8ab1523/gcc%2Fd%2Fdmd%2Futf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Futf.c?ref=98866120092edfd7d5a7ae008db960dae8ab1523", "patch": "@@ -113,15 +113,16 @@ bool isUniAlpha(dchar_t c)\n \n int utf_codeLengthChar(dchar_t c)\n {\n-  if (c <= 0x7F)\n-      return 1;\n-  if (c <= 0x7FF)\n-      return 2;\n-  if (c <= 0xFFFF)\n-      return 3;\n-  if (c <= 0x10FFFF)\n-      return 4;\n-  assert(false);\n+    if (c <= 0x7F)\n+        return 1;\n+    if (c <= 0x7FF)\n+        return 2;\n+    if (c <= 0xFFFF)\n+        return 3;\n+    if (c <= 0x10FFFF)\n+        return 4;\n+    assert(false);\n+    return 6;\n }\n \n int utf_codeLengthWchar(dchar_t c)"}]}