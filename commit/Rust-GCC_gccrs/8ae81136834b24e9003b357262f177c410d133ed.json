{"sha": "8ae81136834b24e9003b357262f177c410d133ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFlODExMzY4MzRiMjRlOTAwM2IzNTcyNjJmMTc3YzQxMGQxMzNlZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-10-02T16:56:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-10-02T16:56:39Z"}, "message": "[multiple changes]\n\n\n2003-10-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/linker-map.gnu: Export _S_get_c_locale instead of\n\t_S_c_locale object.\n\n2003-10-02  Petur Runolfsson  <peturr02@ru.is>\n\n\t* config/locale/generic/c_locale.cc\n\t(category_names, locale::_S_categories): Const qualify.\n\t* config/locale/gnu/c_locale.cc: Same.\n\t* config/locale/generic/time_members.h (__timepunct::__timepunct):\n\tCopy string contents before assigning to _M_name_timepunct,\n\tqualify strcpy and strlen with std::.\n\t* config/locale/gnu/time_members.h: Same.\n\t* config/locale/gnu/messages_members.h (messages::messages):\n\tCopy string contents before assigning to _M_name_messages,\n\tqualify strcpy and strlen with std::.\n\t* config/os/gnu-linux/ctype_noninline.h\n\t(ctype<char>::classic_table()): Don't call locale::classic().\n\t* include/bits/locale_classes.h\n\t(locale::_S_categories): Const qualify.\n\t(locale::_S_once, locale::_S_initialize_once,\n\tlocale::facet::_S_once, locale::facet::_S_initialize_once,\n\tlocale::facet::_S_get_c_locale): Declare.\n\t(locale::_S_initialize): Don't define.\n\t(locale::facet::_S_c_locale): Make private.\n\t(locale::facet::_S_c_name): Same, const qualify.\n\t(locale::_Impl::_Impl(facet**, size_t, bool)): Drop unused\n\tparameters, add throw() specifier.\n\t* include/bits/locale_facets.h (__timepunct::_M_name_timepunct,\n\tmessages::_M_name_messages): Const qualify.\n\t* src/locale.cc\n\t(locale::_S_once, locale::facet::_S_once): Define.\n\t(locale::classic): Move initialization code...\n\t(locale::_S_initialize_once): ...here.\n\t(locale::_S_initialize): Call _S_initialize_once through\n\t__gthread_once.\n\t(locale::facet::_S_initialize_once): Initialize _S_c_locale.\n\t(locale::facet::_S_get_c_locale): Call _S_initialize_once through\n\t__gthread_once before returning _S_c_locale.\n\t* src/localename.cc (locale::_Impl::_Impl(facet**, size_t, bool)):\n\tDrop unused parameters, add throw() specifier, don't initialize\n\tlocale::facet::_S_c_locale and _S_c_name.\n\n\t* config/locale/generic/messages_members.h:\n\tReplace _S_c_locale with _S_get_c_locale().\n\t* config/locale/gnu/c_locale.cc: Same.\n\t* config/locale/gnu/messages_members.h: Same.\n\t* config/locale/gnu/numeric_members.cc: Same.\n\t* config/locale/gnu/time_members.cc: Same.\n\t* config/os/gnu-linux/ctype_noninline.h: Same.\n\t* include/bits/locale_facets.h: Same.\n\t* include/bits/locale_facets.tcc: Same.\n\t* src/codecvt.cc: Same.\n\t* src/ctype.cc: Same.\n\nFrom-SVN: r72040", "tree": {"sha": "e3f75dca2a02352cbd462ab4c0695149c340f2f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3f75dca2a02352cbd462ab4c0695149c340f2f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ae81136834b24e9003b357262f177c410d133ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae81136834b24e9003b357262f177c410d133ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ae81136834b24e9003b357262f177c410d133ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae81136834b24e9003b357262f177c410d133ed/comments", "author": null, "committer": null, "parents": [{"sha": "910a2080298cb3e237bf24d61ec24df282d01c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910a2080298cb3e237bf24d61ec24df282d01c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/910a2080298cb3e237bf24d61ec24df282d01c69"}], "stats": {"total": 304, "additions": 203, "deletions": 101}, "files": [{"sha": "59b6bffa2da48a9f47c5dcbde785eed1e7b603e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -1,3 +1,59 @@\n+2003-10-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/linker-map.gnu: Export _S_get_c_locale instead of\n+\t_S_c_locale object.\n+\n+2003-10-02  Petur Runolfsson  <peturr02@ru.is>\n+\n+\t* config/locale/generic/c_locale.cc\n+\t(category_names, locale::_S_categories): Const qualify.\n+\t* config/locale/gnu/c_locale.cc: Same.\n+\t* config/locale/generic/time_members.h (__timepunct::__timepunct):\n+\tCopy string contents before assigning to _M_name_timepunct,\n+\tqualify strcpy and strlen with std::.\n+\t* config/locale/gnu/time_members.h: Same.\n+\t* config/locale/gnu/messages_members.h (messages::messages):\n+\tCopy string contents before assigning to _M_name_messages,\n+\tqualify strcpy and strlen with std::.\n+\t* config/os/gnu-linux/ctype_noninline.h\n+\t(ctype<char>::classic_table()): Don't call locale::classic().\n+\t* include/bits/locale_classes.h\n+\t(locale::_S_categories): Const qualify.\t\n+\t(locale::_S_once, locale::_S_initialize_once,\n+\tlocale::facet::_S_once, locale::facet::_S_initialize_once,\n+\tlocale::facet::_S_get_c_locale): Declare.\n+\t(locale::_S_initialize): Don't define.\n+\t(locale::facet::_S_c_locale): Make private.\n+\t(locale::facet::_S_c_name): Same, const qualify.\n+\t(locale::_Impl::_Impl(facet**, size_t, bool)): Drop unused\n+\tparameters, add throw() specifier.\n+\t* include/bits/locale_facets.h (__timepunct::_M_name_timepunct,\n+\tmessages::_M_name_messages): Const qualify.\n+\t* src/locale.cc\n+\t(locale::_S_once, locale::facet::_S_once): Define.\n+\t(locale::classic): Move initialization code...\n+\t(locale::_S_initialize_once): ...here.\t\n+\t(locale::_S_initialize): Call _S_initialize_once through\n+\t__gthread_once.\n+\t(locale::facet::_S_initialize_once): Initialize _S_c_locale.\n+\t(locale::facet::_S_get_c_locale): Call _S_initialize_once through\n+\t__gthread_once before returning _S_c_locale.\n+\t* src/localename.cc (locale::_Impl::_Impl(facet**, size_t, bool)):\n+\tDrop unused parameters, add throw() specifier, don't initialize\n+\tlocale::facet::_S_c_locale and _S_c_name.\n+\t\n+\t* config/locale/generic/messages_members.h:\n+\tReplace _S_c_locale with _S_get_c_locale().\n+\t* config/locale/gnu/c_locale.cc: Same.\n+\t* config/locale/gnu/messages_members.h: Same.\n+\t* config/locale/gnu/numeric_members.cc: Same.\n+\t* config/locale/gnu/time_members.cc: Same.\n+\t* config/os/gnu-linux/ctype_noninline.h: Same.\n+\t* include/bits/locale_facets.h: Same.\n+\t* include/bits/locale_facets.tcc: Same.\n+\t* src/codecvt.cc: Same.\n+\t* src/ctype.cc: Same.\n+\n 2003-10-02  Carlo Wood  <carlo@alinoe.com>\n \n \t* include/bits/demangle.h (demangle<Allocator>::symbol(char const*)):"}, {"sha": "d0ab03c191d9d1840bb4b313061c24a81f44f61b", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -32,7 +32,7 @@ GLIBCXX_3.4 {\n       std::logic_error*;\n       std::locale::[A-Za-e]*;\n       std::locale::facet::[A-Za-z]*;\n-      std::locale::facet::_S_c_locale;\t\n+      std::locale::facet::_S_get_c_locale*;\t\n       std::locale::facet::_S_clone_c_locale*;\n       std::locale::facet::_S_create_c_locale*;\n       std::locale::facet::_S_destroy_c_locale*;"}, {"sha": "a9d9537ffdb6e88ea3132e138b54c88ed86b0610", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -234,7 +234,7 @@ namespace std\n \n namespace __gnu_cxx\n {\n-  const char* category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n+  const char* const category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n     {\n       \"LC_CTYPE\", \n       \"LC_NUMERIC\",\n@@ -247,5 +247,5 @@ namespace __gnu_cxx\n \n namespace std\n {\n-  const char** locale::_S_categories = __gnu_cxx::category_names;\n+  const char* const* const locale::_S_categories = __gnu_cxx::category_names;\n }  // namespace std"}, {"sha": "3e9122e880fc3696676263ebf4188446b9a7b5f2", "filename": "libstdc++-v3/config/locale/generic/messages_members.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -37,12 +37,12 @@\n   template<typename _CharT>\n      messages<_CharT>::messages(size_t __refs)\n      : facet(__refs)\n-     { _M_c_locale_messages = _S_c_locale; }\n+     { _M_c_locale_messages = _S_get_c_locale(); }\n \n   template<typename _CharT>\n      messages<_CharT>::messages(__c_locale, const char*, size_t __refs) \n      : facet(__refs)\n-     { _M_c_locale_messages = _S_c_locale; }\n+     { _M_c_locale_messages = _S_get_c_locale(); }\n \n   template<typename _CharT>\n     typename messages<_CharT>::catalog "}, {"sha": "2da37eb95b347ac1ef5472eaa8359dd0f1f0006b", "filename": "libstdc++-v3/config/locale/generic/time_members.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -55,8 +55,9 @@\n \t\t\t\t     size_t __refs) \n     : facet(__refs), _M_data(NULL)\n     { \n-      _M_name_timepunct = new char[strlen(__s) + 1];\n-      strcpy(_M_name_timepunct, __s);\n+      char* __tmp = new char[std::strlen(__s) + 1];\n+      std::strcpy(__tmp, __s);\n+      _M_name_timepunct = __tmp;\n       _M_initialize_timepunct(__cloc); \n     }\n "}, {"sha": "3c7d258e875808523540e3a9c47146f274036931", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -180,7 +180,7 @@ namespace std\n   void\n   locale::facet::_S_destroy_c_locale(__c_locale& __cloc)\n   {\n-    if (_S_c_locale != __cloc)\n+    if (_S_get_c_locale() != __cloc)\n       __freelocale(__cloc); \n   }\n \n@@ -191,7 +191,7 @@ namespace std\n \n namespace __gnu_cxx\n {\n-  const char* category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n+  const char* const category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n     {\n       \"LC_CTYPE\", \n       \"LC_NUMERIC\",\n@@ -210,5 +210,5 @@ namespace __gnu_cxx\n \n namespace std\n {\n-  const char** locale::_S_categories = __gnu_cxx::category_names;\n+  const char* const* const locale::_S_categories = __gnu_cxx::category_names;\n }  // namespace std"}, {"sha": "fc2bb2eceb5bce743cc71e1f97a0cca385fc8068", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -41,7 +41,7 @@\n #if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n        _M_name_messages = _S_c_name;\n #endif\n-       _M_c_locale_messages = _S_c_locale; \n+       _M_c_locale_messages = _S_get_c_locale(); \n      }\n \n   template<typename _CharT>\n@@ -51,8 +51,9 @@\n      : facet(__refs)\n      {\n #if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)) \n-       _M_name_messages = new char[strlen(__s) + 1];\n-       strcpy(_M_name_messages, __s);\n+       char* __tmp = new char[std::strlen(__s) + 1];\n+       std::strcpy(__tmp, __s);\n+       _M_name_messages = __tmp;\n #endif\n        _M_c_locale_messages = _S_clone_c_locale(__cloc); \n      }\n@@ -101,8 +102,9 @@\n #if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n        if (this->_S_c_name != this->_M_name_messages)\n \t delete [] this->_M_name_messages;\n-       this->_M_name_messages = new char[strlen(__s) + 1];\n-       strcpy(this->_M_name_messages, __s);\n+       char* __tmp = new char[std::strlen(__s) + 1];\n+       std::strcpy(__tmp, __s);\n+       this->_M_name_messages = __tmp;\n #endif\n        _S_destroy_c_locale(this->_M_c_locale_messages);\n        _S_create_c_locale(this->_M_c_locale_messages, __s); "}, {"sha": "d97f0dc6f5000c77d29a2636caf1da71f2bd285d", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -103,7 +103,7 @@ namespace std\n \t  _M_data->_M_thousands_sep = L',';\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-\t  __c_locale __old = __uselocale(_S_c_locale);\n+\t  __c_locale __old = __uselocale(_S_get_c_locale());\n #endif\n \t  // Use ctype::widen code without the facet...\n \t  unsigned char uc;"}, {"sha": "62dc843dfd7845bfee4df3ffd612a036debd3dde", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -66,7 +66,7 @@ namespace std\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\t  _M_c_locale_timepunct = _S_c_locale;\n+\t  _M_c_locale_timepunct = _S_get_c_locale();\n \n \t  _M_data->_M_date_format = \"%m/%d/%y\";\n \t  _M_data->_M_date_era_format = \"%m/%d/%y\";\n@@ -214,7 +214,7 @@ namespace std\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\t  _M_c_locale_timepunct = _S_c_locale;\n+\t  _M_c_locale_timepunct = _S_get_c_locale();\n \n \t  _M_data->_M_date_format = L\"%m/%d/%y\";\n \t  _M_data->_M_date_era_format = L\"%m/%d/%y\";"}, {"sha": "3129cd1769480099e407db6c5e998bf8c5d9613a", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -61,8 +61,9 @@\n     : facet(__refs), _M_data(NULL)\n     { \n #if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n-      _M_name_timepunct = new char[strlen(__s) + 1];\n-      strcpy(_M_name_timepunct, __s);\n+      char* __tmp = new char[std::strlen(__s) + 1];\n+      std::strcpy(__tmp, __s);\n+      _M_name_timepunct = __tmp;\n #endif\n       _M_initialize_timepunct(__cloc); \n     }"}, {"sha": "83a93cb9dfed57e014b561cf7e70b451499f5b5e", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_noninline.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -37,10 +37,7 @@\n #if _GLIBCXX_C_LOCALE_GNU\n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n-  {\n-    locale::classic();\n-    return _S_c_locale->__ctype_b;\n-  }\n+  { return _S_get_c_locale()->__ctype_b; }\n #else\n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n@@ -87,15 +84,15 @@\n #endif\n     setlocale(LC_CTYPE, __old);\n     free(__old);\n-    _M_c_locale_ctype = _S_c_locale;\n+    _M_c_locale_ctype = _S_get_c_locale();\n   }\n #endif\n \n #if _GLIBCXX_C_LOCALE_GNU\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n   __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n   {\n-    _M_c_locale_ctype = _S_c_locale; \n+    _M_c_locale_ctype = _S_get_c_locale(); \n     _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n     _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n     _M_table = __table ? __table : _M_c_locale_ctype->__ctype_b;\n@@ -117,7 +114,7 @@\n #endif\n     setlocale(LC_CTYPE, __old);\n     free(__old);\n-    _M_c_locale_ctype = _S_c_locale;\n+    _M_c_locale_ctype = _S_get_c_locale();\n   }\n #endif\n "}, {"sha": "1d123a93c6491c04c7404ee5383abd0665c51c74", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -341,8 +341,7 @@\n       codecvt_byname(const char* __s, size_t __refs = 0) \n       : codecvt<_InternT, _ExternT, _StateT>(__refs)\n       { \n-\tif (this->_M_c_locale_codecvt != this->_S_c_locale)\n-\t  _S_destroy_c_locale(this->_M_c_locale_codecvt);\n+\t_S_destroy_c_locale(this->_M_c_locale_codecvt);\n \t_S_create_c_locale(this->_M_c_locale_codecvt, __s); \n       }\n "}, {"sha": "d9502bd2ae02face301a68a6b6171ac505946d10", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -46,6 +46,7 @@\n #include <cstring>\t\t// For strcmp.\n #include <string>\n #include <bits/atomicity.h>\n+#include <bits/gthr.h>\n \n namespace std\n {\n@@ -139,7 +140,7 @@ namespace std\n     _Impl* \t\t_M_impl;  \n \n     // The \"C\" reference locale\n-    static _Impl* \t_S_classic; \n+    static _Impl*       _S_classic;\n \n     // Current global locale\n     static _Impl* \t_S_global;  \n@@ -148,7 +149,7 @@ namespace std\n     // NB: locale::global() has to know how to modify all the\n     // underlying categories, not just the ones required by the C++\n     // standard.\n-    static const char** _S_categories;\n+    static const char* const* const _S_categories;\n \n     // Number of standard categories. For C++, these categories are\n     // collate, ctype, monetary, numeric, time, and messages. These\n@@ -162,15 +163,18 @@ namespace std\n     // and LC_IDENTIFICATION.\n     static const size_t _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES;\n \n+#ifdef __GTHREADS\n+    static __gthread_once_t _S_once;\n+#endif\n+\n     explicit \n     locale(_Impl*) throw();\n \n-    static inline void  \n-    _S_initialize()\n-    { \n-      if (!_S_classic) \n-\tclassic();  \n-    }\n+    static void  \n+    _S_initialize();\n+\n+    static void\n+    _S_initialize_once();\n \n     static category  \n     _S_normalize_category(category);\n@@ -189,13 +193,20 @@ namespace std\n \n     mutable _Atomic_word\t\t_M_references;\n \n-  protected:\n     // Contains data from the underlying \"C\" library for the classic locale.\n-    static __c_locale\t\t     \t_S_c_locale;\n+    static __c_locale                   _S_c_locale;\n \n     // String literal for the name of the classic locale.\n-    static char\t\t\t\t_S_c_name[2];\n-    \n+    static const char\t\t\t_S_c_name[2];\n+\n+#ifdef __GTHREADS\n+    static __gthread_once_t \t\t_S_once;\n+#endif\n+\n+    static void \n+    _S_initialize_once();\n+\n+  protected:\n     explicit \n     facet(size_t __refs = 0) throw() : _M_references(__refs ? 1 : 0)\n     { }\n@@ -213,6 +224,10 @@ namespace std\n     static void\n     _S_destroy_c_locale(__c_locale& __cloc);\n \n+    // Returns data from the underlying \"C\" library for the classic locale.\n+    static __c_locale\n+    _S_get_c_locale();\n+\n   private:\n     inline void\n     _M_add_reference() const throw()\n@@ -332,7 +347,7 @@ namespace std\n \n     _Impl(const _Impl&, size_t);\n     _Impl(const char*, size_t);\n-    _Impl(facet**, size_t, bool);\n+    _Impl(size_t) throw();\n \n    ~_Impl() throw();\n "}, {"sha": "96fc3a0da35d5ffe7b7359877e138e31b06704e1", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -1046,7 +1046,7 @@ namespace std\n       explicit \n       collate(size_t __refs = 0)\n       : facet(__refs)\n-      { _M_c_locale_collate = _S_c_locale; }\n+      { _M_c_locale_collate = _S_get_c_locale(); }\n \n       explicit \n       collate(__c_locale __cloc, size_t __refs = 0) \n@@ -1261,7 +1261,7 @@ namespace std\n     protected:\n       __cache_type*\t\t\t_M_data;\n       __c_locale\t\t\t_M_c_locale_timepunct;\n-      char*\t\t\t\t_M_name_timepunct;\n+      const char*\t\t\t_M_name_timepunct;\n \n     public:\n       static locale::id \t\tid;\n@@ -1898,7 +1898,7 @@ namespace std\n       // Underlying \"C\" library locale information saved from\n       // initialization, needed by messages_byname as well.\n       __c_locale\t\t\t_M_c_locale_messages;\n-      char*\t\t\t\t_M_name_messages;\n+      const char*\t\t\t_M_name_messages;\n \n     public:\n       static locale::id \t\tid;"}, {"sha": "ad5c59bf9b46f97057c8e70bbf7a8021eb62d014", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -432,7 +432,7 @@ namespace std\n \n \t  unsigned long __ul; \n \t  std::__convert_to_v(__xtrc.c_str(), __ul, __err, \n-\t\t\t      _S_c_locale, __base);\n+\t\t\t      _S_get_c_locale(), __base);\n \t  if (!(__err & ios_base::failbit) && __ul <= 1)\n \t    __v = __ul;\n \t  else \n@@ -493,7 +493,8 @@ namespace std\n       string __xtrc;\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err,\n+\t\t\t  _S_get_c_locale(), __base);\n       return __beg;\n     }\n \n@@ -507,7 +508,8 @@ namespace std\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n       unsigned long __ul;\n-      std::__convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __ul, __err,\n+\t\t\t  _S_get_c_locale(), __base);\n       if (!(__err & ios_base::failbit) \n \t  && __ul <= numeric_limits<unsigned short>::max())\n \t__v = static_cast<unsigned short>(__ul);\n@@ -526,7 +528,8 @@ namespace std\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n       unsigned long __ul;\n-      std::__convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __ul, __err,\n+\t\t\t  _S_get_c_locale(), __base);\n       if (!(__err & ios_base::failbit) \n \t  && __ul <= numeric_limits<unsigned int>::max())\n \t__v = static_cast<unsigned int>(__ul);\n@@ -544,7 +547,8 @@ namespace std\n       string __xtrc;\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err,\n+\t\t\t  _S_get_c_locale(), __base);\n       return __beg;\n     }\n \n@@ -558,7 +562,8 @@ namespace std\n       string __xtrc;\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err,\n+\t\t\t  _S_get_c_locale(), __base);\n       return __beg;\n     }\n \n@@ -571,7 +576,8 @@ namespace std\n       string __xtrc;\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err,\n+\t\t\t  _S_get_c_locale(), __base);\n       return __beg;\n     }\n #endif\n@@ -585,7 +591,8 @@ namespace std\n       string __xtrc;\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err,\n+\t\t\t  _S_get_c_locale());\n       return __beg;\n     }\n \n@@ -598,7 +605,7 @@ namespace std\n       string __xtrc;\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\n       return __beg;\n     }\n \n@@ -611,7 +618,7 @@ namespace std\n       string __xtrc;\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\n       return __beg;\n     }\n \n@@ -636,7 +643,8 @@ namespace std\n       __io.flags(__fmt);\n \n       unsigned long __ul;\n-      std::__convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __ul, __err,\n+\t\t\t  _S_get_c_locale(), __base);\n       if (!(__err & ios_base::failbit))\n \t__v = reinterpret_cast<void*>(__ul);\n       else \n@@ -929,15 +937,15 @@ namespace std\n \n \t_S_format_float(__io, __fbuf, __mod);\n \t__len = std::__convert_from_v(__cs, __cs_size, __fbuf, __v,\n-\t\t\t\t      _S_c_locale, __prec);\n+\t\t\t\t      _S_get_c_locale(), __prec);\n \n \t// If the buffer was not large enough, try again with the correct size.\n \tif (__len >= __cs_size)\n \t  {\n \t    __cs_size = __len + 1; \n \t    __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n \t    __len = std::__convert_from_v(__cs, __cs_size, __fbuf, __v,\n-\t\t\t\t\t  _S_c_locale, __prec);\n+\t\t\t\t\t  _S_get_c_locale(), __prec);\n \t  }\n #else\n \t// Consider the possibility of long ios_base::fixed outputs\n@@ -956,7 +964,7 @@ namespace std\n \n \t_S_format_float(__io, __fbuf, __mod);\n \t__len = std::__convert_from_v(__cs, 0, __fbuf, __v, \n-\t\t\t\t      _S_c_locale, __prec);\n+\t\t\t\t      _S_get_c_locale(), __prec);\n #endif\n \n       // [22.2.2.2.2] Stage 2, convert to char_type, using correct\n@@ -1124,7 +1132,7 @@ namespace std\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n       const _CharT* __wcs = __str.c_str();\n       __ctype.narrow(__wcs, __wcs + __str.size() + 1, char(), __cs);      \n-      std::__convert_to_v(__cs, __units, __err, _S_c_locale);\n+      std::__convert_to_v(__cs, __units, __err, _S_get_c_locale());\n       return __beg;\n     }\n \n@@ -1349,22 +1357,22 @@ namespace std\n       int __cs_size = 64;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n       int __len = std::__convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, \n-\t\t\t\t\t_S_c_locale);\n+\t\t\t\t\t_S_get_c_locale());\n       // If the buffer was not large enough, try again with the correct size.\n       if (__len >= __cs_size)\n \t{\n \t  __cs_size = __len + 1;\n \t  __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n \t  __len = std::__convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, \n-\t\t\t\t\t_S_c_locale);\n+\t\t\t\t\t_S_get_c_locale());\n \t}\n #else\n       // max_exponent10 + 1 for the integer part, + 4 for sign, decimal point,\n       // decimal digit, '\\0'. \n       const int __cs_size = numeric_limits<long double>::max_exponent10 + 5;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n       int __len = std::__convert_from_v(__cs, 0, \"%.01Lf\", __units, \n-\t\t\t\t\t_S_c_locale);\n+\t\t\t\t\t_S_get_c_locale());\n #endif\n       _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t   * __cs_size));\n@@ -1983,7 +1991,8 @@ namespace std\n       if (__i == 2 || __i == 4)\n \t{\n \t  long __l;\n-\t  std::__convert_to_v(__digits.c_str(), __l, __err, _S_c_locale);\n+\t  std::__convert_to_v(__digits.c_str(), __l, __err,\n+\t\t\t      _S_get_c_locale());\n \t  if (!(__err & ios_base::failbit) && __l <= INT_MAX)\n \t    {\n \t      __l = __i == 2 ? __l : __l - 1900; "}, {"sha": "82e13c6e5bc5934250ea2ba9bd4ada96fc3775ff", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -46,7 +46,7 @@ namespace std\n   codecvt<char, char, mbstate_t>::\n   codecvt(size_t __refs)\n   : __codecvt_abstract_base<char, char, mbstate_t>(__refs)\n-  { _M_c_locale_codecvt = _S_c_locale; }\n+  { _M_c_locale_codecvt = _S_get_c_locale(); }\n \n   codecvt<char, char, mbstate_t>::\n   codecvt(__c_locale __cloc, size_t __refs)\n@@ -122,7 +122,7 @@ namespace std\n   codecvt<wchar_t, char, mbstate_t>::\n   codecvt(size_t __refs)\n   : __codecvt_abstract_base<wchar_t, char, mbstate_t>(__refs)\n-  { _M_c_locale_codecvt = _S_c_locale; }\n+  { _M_c_locale_codecvt = _S_get_c_locale(); }\n \n   codecvt<wchar_t, char, mbstate_t>::\n   codecvt(__c_locale __cloc, size_t __refs)"}, {"sha": "1a84ced453a8fdd770a65fd02c23eb0d05751a09", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -127,7 +127,7 @@ namespace std\n #ifdef _GLIBCXX_USE_WCHAR_T\n   ctype<wchar_t>::ctype(size_t __refs) \n   : __ctype_abstract_base<wchar_t>(__refs)\n-  { _M_c_locale_ctype = _S_c_locale; }\n+  { _M_c_locale_ctype = _S_get_c_locale(); }\n \n   ctype<wchar_t>::ctype(__c_locale __cloc, size_t __refs) \n   : __ctype_abstract_base<wchar_t>(__refs) "}, {"sha": "b37b30c43c26cb3bbfcdbea8e25b565385a84911", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 55, "deletions": 27, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -60,10 +60,14 @@ namespace std\n   // static data members of locale.\n \n   // These are no longer exported.\n-  locale::_Impl* \t\tlocale::_S_classic;\n+  locale::_Impl*                locale::_S_classic;\n   locale::_Impl* \t\tlocale::_S_global; \n   const size_t \t\t\tlocale::_S_categories_size;\n \n+#ifdef __GTHREADS\n+  __gthread_once_t \t\tlocale::_S_once = __GTHREAD_ONCE_INIT;\n+#endif\n+\n   // Definitions for static const data members of locale::id\n   _Atomic_word locale::id::_S_highwater;  // init'd to 0 by linker\n \n@@ -320,8 +324,9 @@ namespace std\n   locale\n   locale::global(const locale& __other)\n   {\n-    // XXX MT\n     _S_initialize();\n+\n+    // XXX MT\n     _Impl* __old = _S_global;\n     __other._M_impl->_M_add_reference();\n     _S_global = __other._M_impl; \n@@ -362,30 +367,31 @@ namespace std\n   const locale&\n   locale::classic()\n   {\n-    // Locking protocol: singleton-called-before-threading-starts\n-    if (!_S_classic)\n-      {\n-\ttry \n-\t  {\n-\t    // 26 Standard facets, 2 references.\n-\t    // One reference for _S_classic, one for _S_global\n-\t    _S_classic = new (&c_locale_impl) _Impl(0, 2, true);\n-\t    _S_global = _S_classic; \t    \n-\t    new (&c_locale) locale(_S_classic);\n-\t  }\n-\tcatch(...) \n-\t  {\n-\t    // Just call destructor, so that locale_impl_c's memory is\n-\t    // not deallocated via a call to delete.\n-\t    if (_S_classic)\n-\t      _S_classic->~_Impl();\n-\t    _S_classic = _S_global = 0;\n-\t    __throw_exception_again;\n-\t  }\n-      }\n+    _S_initialize();\n     return c_locale;\n   }\n \n+  void\n+  locale::_S_initialize_once()\n+  {\n+    // 2 references.\n+    // One reference for _S_classic, one for _S_global\n+    _S_classic = new (&c_locale_impl) _Impl(2);\n+    _S_global = _S_classic; \t    \n+    new (&c_locale) locale(_S_classic);\n+  }\n+\n+  void  \n+  locale::_S_initialize()\n+  {\n+#ifdef __GTHREADS\n+    __gthread_once(&_S_once, _S_initialize_once);\n+#else\n+    if (!_S_classic)\n+      _S_initialize_once();\n+#endif\n+  }\n+\n   void\n   locale::_M_coalesce(const locale& __base, const locale& __add, \n \t\t      category __cat)\n@@ -444,14 +450,36 @@ namespace std\n     return __ret;\n   }\n \n-  __c_locale\n-  locale::facet::_S_c_locale;\n-  \n-  char locale::facet::_S_c_name[2];\n+  __c_locale locale::facet::_S_c_locale;\n+\n+  const char locale::facet::_S_c_name[2] = \"C\";\n+\n+#ifdef __GTHREADS\n+  __gthread_once_t locale::facet::_S_once = __GTHREAD_ONCE_INIT;\n+#endif\n \n   locale::facet::\n   ~facet() { }\n \n+  void\n+  locale::facet::_S_initialize_once()\n+  {\n+    // Initialize the underlying locale model.\n+    _S_create_c_locale(_S_c_locale, _S_c_name);\n+  }\n+\n+  __c_locale\n+  locale::facet::_S_get_c_locale()\n+  {\n+#ifdef __GHTREADS\n+    __gthread_once(&_S_once, _S_initialize_once);\n+#else\n+    if (!_S_c_locale)\n+      _S_initialize_once();\n+#endif\n+    return _S_c_locale;\n+  }\n+\n   // Definitions for static const data members of time_base.\n   template<> \n     const char*"}, {"sha": "cb71e2fba9eb98879f12d52e91048d20be7c6bba", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae81136834b24e9003b357262f177c410d133ed/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=8ae81136834b24e9003b357262f177c410d133ed", "patch": "@@ -245,15 +245,9 @@ namespace std\n \n   // Construct \"C\" _Impl.\n   locale::_Impl::\n-  _Impl(facet**, size_t __refs, bool) \n+  _Impl(size_t __refs) throw() \n   : _M_references(__refs), _M_facets_size(_GLIBCXX_NUM_FACETS)\n   {\n-    // Initialize the underlying locale model.\n-    locale::facet::_S_c_name[0] = 'C';\n-    locale::facet::_S_c_name[1] = '\\0';\n-    locale::facet::_S_create_c_locale(locale::facet::_S_c_locale, \n-\t\t\t\t      locale::facet::_S_c_name);\n-\n     _M_facets = new (&facet_vec) const facet*[_M_facets_size];\n     _M_caches = new (&cache_vec) const facet*[_M_facets_size];\n     for (size_t __i = 0; __i < _M_facets_size; ++__i)"}]}