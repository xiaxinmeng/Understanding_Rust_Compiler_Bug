{"sha": "22ce16ffa434bf28892668089af00cdd0f96c03c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJjZTE2ZmZhNDM0YmYyODg5MjY2ODA4OWFmMDBjZGQwZjk2YzAzYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2018-12-28T15:46:19Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-08T04:44:50Z"}, "message": "AVX512FP16: Add ABI tests for xmm.\n\nCopied from regular XMM ABI tests. Only run AVX512FP16 ABI tests for ELF\ntargets.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/x86_64/abi/avx512fp16/abi-avx512fp16-xmm.exp: New exp\n\tfile for abi test.\n\t* gcc.target/x86_64/abi/avx512fp16/args.h: New header file for abi test.\n\t* gcc.target/x86_64/abi/avx512fp16/avx512fp16-check.h: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/avx512fp16-xmm-check.h: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/defines.h: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/macros.h: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/asm-support.S: New asm for abi check.\n\t* gcc.target/x86_64/abi/avx512fp16/test_3_element_struct_and_unions.c:\n\tNew test.\n\t* gcc.target/x86_64/abi/avx512fp16/test_basic_alignment.c: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_basic_array_size_and_align.c:\n\tLikewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_basic_returning.c: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_basic_sizes.c: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_basic_struct_size_and_align.c:\n\tLikewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_basic_union_size_and_align.c:\n\tLikewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_complex_returning.c: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_m64m128_returning.c: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_passing_floats.c: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_passing_m64m128.c: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_passing_structs.c: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_passing_unions.c: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_struct_returning.c: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/test_varargs-m128.c: Likewise.", "tree": {"sha": "1589d40e14da0dca0338b9a875793cc3255000e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1589d40e14da0dca0338b9a875793cc3255000e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22ce16ffa434bf28892668089af00cdd0f96c03c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ce16ffa434bf28892668089af00cdd0f96c03c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ce16ffa434bf28892668089af00cdd0f96c03c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ce16ffa434bf28892668089af00cdd0f96c03c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bbd88bb1ee1825e7c2bf0f30074641843117cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbd88bb1ee1825e7c2bf0f30074641843117cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bbd88bb1ee1825e7c2bf0f30074641843117cf6"}], "stats": {"total": 4449, "additions": 4449, "deletions": 0}, "files": [{"sha": "33d247627887f9160b5441faaf5537c5eb42a64b", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/abi-avx512fp16-xmm.exp", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fabi-avx512fp16-xmm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fabi-avx512fp16-xmm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fabi-avx512fp16-xmm.exp?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,48 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# The x86-64 ABI testsuite needs one additional assembler file for most\n+# testcases.  For simplicity we will just link it into each test.\n+\n+load_lib c-torture.exp\n+load_lib target-supports.exp\n+load_lib torture-options.exp\n+load_lib clearcap.exp\n+load_lib file-format.exp\n+\n+if { (![istarget x86_64-*-*] && ![istarget i?86-*-*])\n+     || [is-effective-target ia32]\n+     || [gcc_target_object_format] != \"elf\"\n+     || ![is-effective-target avx512fp16] } then {\n+  return\n+}\n+\n+\n+torture-init\n+clearcap-init\n+set-torture-options $C_TORTURE_OPTIONS\n+set additional_flags \"-W -Wall -Wno-abi -mavx512fp16\"\n+\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n+    if {[runtest_file_p $runtests $src]} {\n+\tc-torture-execute [list $src \\\n+\t\t\t\t$srcdir/$subdir/asm-support.S] \\\n+\t\t\t\t$additional_flags\n+    }\n+}\n+\n+clearcap-finish\n+torture-finish"}, {"sha": "4a7b9a90fbefaf5fce12b243b44831f42bcac1f2", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/args.h", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fargs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fargs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fargs.h?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,190 @@\n+#ifndef INCLUDED_ARGS_H\n+#define INCLUDED_ARGS_H\n+\n+#include <string.h>\n+\n+/* This defines the calling sequences for integers and floats.  */\n+#define I0 rdi\n+#define I1 rsi\n+#define I2 rdx\n+#define I3 rcx\n+#define I4 r8\n+#define I5 r9\n+#define F0 xmm0\n+#define F1 xmm1\n+#define F2 xmm2\n+#define F3 xmm3\n+#define F4 xmm4\n+#define F5 xmm5\n+#define F6 xmm6\n+#define F7 xmm7\n+\n+typedef union {\n+  _Float16 __Float16[8];\n+  float _float[4];\n+  double _double[2];\n+  long _long[2];\n+  int _int[4];\n+  unsigned long _ulong[2];\n+#ifdef CHECK_M64_M128\n+  __m64 _m64[2];\n+  __m128 _m128[1];\n+  __m128h _m128h[1];\n+#endif\n+} XMM_T;\n+\n+typedef union {\n+  _Float16 __Float16;\n+  float _float;\n+  double _double;\n+  ldouble _ldouble;\n+  ulong _ulong[2];\n+} X87_T;\n+extern void (*callthis)(void);\n+extern unsigned long rax,rbx,rcx,rdx,rsi,rdi,rsp,rbp,r8,r9,r10,r11,r12,r13,r14,r15;\n+XMM_T xmm_regs[16];\n+X87_T x87_regs[8];\n+extern volatile unsigned long volatile_var;\n+extern void snapshot (void);\n+extern void snapshot_ret (void);\n+#define WRAP_CALL(N) \\\n+  (callthis = (void (*)()) (N), (typeof (&N)) snapshot)\n+#define WRAP_RET(N) \\\n+  (callthis = (void (*)()) (N), (typeof (&N)) snapshot_ret)\n+\n+/* Clear all integer registers.  */\n+#define clear_int_hardware_registers \\\n+  asm __volatile__ (\"xor %%rax, %%rax\\n\\t\" \\\n+\t\t    \"xor %%rbx, %%rbx\\n\\t\" \\\n+\t\t    \"xor %%rcx, %%rcx\\n\\t\" \\\n+\t\t    \"xor %%rdx, %%rdx\\n\\t\" \\\n+\t\t    \"xor %%rsi, %%rsi\\n\\t\" \\\n+\t\t    \"xor %%rdi, %%rdi\\n\\t\" \\\n+\t\t    \"xor %%r8, %%r8\\n\\t\" \\\n+\t\t    \"xor %%r9, %%r9\\n\\t\" \\\n+\t\t    \"xor %%r10, %%r10\\n\\t\" \\\n+\t\t    \"xor %%r11, %%r11\\n\\t\" \\\n+\t\t    \"xor %%r12, %%r12\\n\\t\" \\\n+\t\t    \"xor %%r13, %%r13\\n\\t\" \\\n+\t\t    \"xor %%r14, %%r14\\n\\t\" \\\n+\t\t    \"xor %%r15, %%r15\\n\\t\" \\\n+\t\t    ::: \"rax\", \"rbx\", \"rcx\", \"rdx\", \"rsi\", \"rdi\", \"r8\", \\\n+\t\t    \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\");\n+\n+/* This is the list of registers available for passing arguments. Not all of\n+   these are used or even really available.  */\n+struct IntegerRegisters\n+{\n+  unsigned long rax, rbx, rcx, rdx, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;\n+};\n+struct FloatRegisters\n+{\n+  double mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;\n+  ldouble st0, st1, st2, st3, st4, st5, st6, st7;\n+  XMM_T xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,\n+        xmm10, xmm11, xmm12, xmm13, xmm14, xmm15;\n+};\n+\n+/* Implemented in scalarargs.c  */\n+extern struct IntegerRegisters iregs;\n+extern struct FloatRegisters fregs;\n+extern unsigned int num_iregs, num_fregs;\n+\n+#define check_int_arguments do { \\\n+  assert (num_iregs <= 0 || iregs.I0 == I0); \\\n+  assert (num_iregs <= 1 || iregs.I1 == I1); \\\n+  assert (num_iregs <= 2 || iregs.I2 == I2); \\\n+  assert (num_iregs <= 3 || iregs.I3 == I3); \\\n+  assert (num_iregs <= 4 || iregs.I4 == I4); \\\n+  assert (num_iregs <= 5 || iregs.I5 == I5); \\\n+  } while (0)\n+\n+#define check_char_arguments check_int_arguments\n+#define check_short_arguments check_int_arguments\n+#define check_long_arguments check_int_arguments\n+\n+/* Clear register struct.  */\n+#define clear_struct_registers \\\n+  rax = rbx = rcx = rdx = rdi = rsi = rbp = rsp \\\n+    = r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = 0; \\\n+  memset (&iregs, 0, sizeof (iregs)); \\\n+  memset (&fregs, 0, sizeof (fregs)); \\\n+  memset (xmm_regs, 0, sizeof (xmm_regs)); \\\n+  memset (x87_regs, 0, sizeof (x87_regs));\n+\n+/* Clear both hardware and register structs for integers.  */\n+#define clear_int_registers \\\n+  clear_struct_registers \\\n+  clear_int_hardware_registers\n+\n+/* TODO: Do the checking.  */\n+#define check_f_arguments(T) do { \\\n+  assert (num_fregs <= 0 || fregs.xmm0._ ## T [0] == xmm_regs[0]._ ## T [0]); \\\n+  assert (num_fregs <= 1 || fregs.xmm1._ ## T [0] == xmm_regs[1]._ ## T [0]); \\\n+  assert (num_fregs <= 2 || fregs.xmm2._ ## T [0] == xmm_regs[2]._ ## T [0]); \\\n+  assert (num_fregs <= 3 || fregs.xmm3._ ## T [0] == xmm_regs[3]._ ## T [0]); \\\n+  assert (num_fregs <= 4 || fregs.xmm4._ ## T [0] == xmm_regs[4]._ ## T [0]); \\\n+  assert (num_fregs <= 5 || fregs.xmm5._ ## T [0] == xmm_regs[5]._ ## T [0]); \\\n+  assert (num_fregs <= 6 || fregs.xmm6._ ## T [0] == xmm_regs[6]._ ## T [0]); \\\n+  assert (num_fregs <= 7 || fregs.xmm7._ ## T [0] == xmm_regs[7]._ ## T [0]); \\\n+  } while (0)\n+\n+#define check_float16_arguments check_f_arguments(_Float16)\n+#define check_float_arguments check_f_arguments(float)\n+#define check_double_arguments check_f_arguments(double)\n+\n+#define check_vector_arguments(T,O) do { \\\n+  assert (num_fregs <= 0 \\\n+\t  || memcmp (((char *) &fregs.xmm0) + (O), \\\n+\t\t     &xmm_regs[0], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 1 \\\n+\t  || memcmp (((char *) &fregs.xmm1) + (O), \\\n+\t\t     &xmm_regs[1], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 2 \\\n+\t  || memcmp (((char *) &fregs.xmm2) + (O), \\\n+\t\t     &xmm_regs[2], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 3 \\\n+\t  || memcmp (((char *) &fregs.xmm3) + (O), \\\n+\t\t     &xmm_regs[3], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 4 \\\n+\t  || memcmp (((char *) &fregs.xmm4) + (O), \\\n+\t\t     &xmm_regs[4], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 5 \\\n+\t  || memcmp (((char *) &fregs.xmm5) + (O), \\\n+\t\t     &xmm_regs[5], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 6 \\\n+\t  || memcmp (((char *) &fregs.xmm6) + (O), \\\n+\t\t     &xmm_regs[6], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 7 \\\n+\t  || memcmp (((char *) &fregs.xmm7) + (O), \\\n+\t\t     &xmm_regs[7], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  } while (0)\n+\n+#define check_m64_arguments check_vector_arguments(m64, 0)\n+#define check_m128_arguments check_vector_arguments(m128, 0)\n+\n+/* ldoubles are not passed in registers */\n+#define check_ldouble_arguments\n+\n+/* TODO: Do the clearing.  */\n+#define clear_float_hardware_registers\n+#define clear_x87_hardware_registers\n+\n+#define clear_float_registers \\\n+  clear_struct_registers \\\n+  clear_float_hardware_registers\n+\n+#define clear_x87_registers \\\n+  clear_struct_registers \\\n+  clear_x87_hardware_registers\n+\n+\n+#endif /* INCLUDED_ARGS_H  */"}, {"sha": "7849acd26495bf05d58d44edb4e032febe1b282c", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/asm-support.S", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fasm-support.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fasm-support.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fasm-support.S?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,81 @@\n+\t.text\n+\t.p2align 4,,15\n+.globl snapshot\n+\t.type\tsnapshot, @function\n+snapshot:\n+.LFB3:\n+\tmovq\t%rax, rax(%rip)\n+\tmovq\t%rbx, rbx(%rip)\n+\tmovq\t%rcx, rcx(%rip)\n+\tmovq\t%rdx, rdx(%rip)\n+\tmovq\t%rdi, rdi(%rip)\n+\tmovq\t%rsi, rsi(%rip)\n+\tmovq\t%rbp, rbp(%rip)\n+\tmovq\t%rsp, rsp(%rip)\n+\tmovq\t%r8, r8(%rip)\n+\tmovq\t%r9, r9(%rip)\n+\tmovq\t%r10, r10(%rip)\n+\tmovq\t%r11, r11(%rip)\n+\tmovq\t%r12, r12(%rip)\n+\tmovq\t%r13, r13(%rip)\n+\tmovq\t%r14, r14(%rip)\n+\tmovq\t%r15, r15(%rip)\n+\tvmovdqu\t%xmm0, xmm_regs+0(%rip)\n+\tvmovdqu\t%xmm1, xmm_regs+16(%rip)\n+\tvmovdqu\t%xmm2, xmm_regs+32(%rip)\n+\tvmovdqu\t%xmm3, xmm_regs+48(%rip)\n+\tvmovdqu\t%xmm4, xmm_regs+64(%rip)\n+\tvmovdqu\t%xmm5, xmm_regs+80(%rip)\n+\tvmovdqu\t%xmm6, xmm_regs+96(%rip)\n+\tvmovdqu\t%xmm7, xmm_regs+112(%rip)\n+\tvmovdqu\t%xmm8, xmm_regs+128(%rip)\n+\tvmovdqu\t%xmm9, xmm_regs+144(%rip)\n+\tvmovdqu\t%xmm10, xmm_regs+160(%rip)\n+\tvmovdqu\t%xmm11, xmm_regs+176(%rip)\n+\tvmovdqu\t%xmm12, xmm_regs+192(%rip)\n+\tvmovdqu\t%xmm13, xmm_regs+208(%rip)\n+\tvmovdqu\t%xmm14, xmm_regs+224(%rip)\n+\tvmovdqu\t%xmm15, xmm_regs+240(%rip)\n+\tjmp\t*callthis(%rip)\n+.LFE3:\n+\t.size\tsnapshot, .-snapshot\n+\n+\t.p2align 4,,15\n+.globl snapshot_ret\n+\t.type\tsnapshot_ret, @function\n+snapshot_ret:\n+\tmovq\t%rdi, rdi(%rip)\n+\tsubq\t$8, %rsp\n+\tcall\t*callthis(%rip)\n+\taddq\t$8, %rsp\n+\tmovq\t%rax, rax(%rip)\n+\tmovq\t%rdx, rdx(%rip)\n+\tvmovdqu\t%xmm0, xmm_regs+0(%rip)\n+\tvmovdqu\t%xmm1, xmm_regs+16(%rip)\n+\tfstpt\tx87_regs(%rip)\n+\tfstpt\tx87_regs+16(%rip)\n+\tfldt\tx87_regs+16(%rip)\n+\tfldt\tx87_regs(%rip)\n+\tret\n+\t.size\tsnapshot_ret, .-snapshot_ret\n+\n+\t.comm\tcallthis,8,8\n+\t.comm\trax,8,8\n+\t.comm\trbx,8,8\n+\t.comm\trcx,8,8\n+\t.comm\trdx,8,8\n+\t.comm\trsi,8,8\n+\t.comm\trdi,8,8\n+\t.comm\trsp,8,8\n+\t.comm\trbp,8,8\n+\t.comm\tr8,8,8\n+\t.comm\tr9,8,8\n+\t.comm\tr10,8,8\n+\t.comm\tr11,8,8\n+\t.comm\tr12,8,8\n+\t.comm\tr13,8,8\n+\t.comm\tr14,8,8\n+\t.comm\tr15,8,8\n+\t.comm\txmm_regs,256,32\n+\t.comm\tx87_regs,128,32\n+\t.comm   volatile_var,8,8"}, {"sha": "9fbec9d03ff7e4a94b681145db37d20fbbdd3653", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/avx512fp16-check.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Favx512fp16-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Favx512fp16-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Favx512fp16-check.h?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,74 @@\n+#include <stdlib.h>\n+#include <cpuid.h>\n+\n+/* Check if the OS supports executing AVX512FP16 instructions.  */\n+\n+#define XCR_XFEATURE_ENABLED_MASK\t0x0\n+\n+#define XSTATE_FP\t0x1\n+#define XSTATE_SSE\t0x2\n+#define XSTATE_YMM\t0x4\n+#define XSTATE_OPMASK\t0x20\n+#define XSTATE_ZMM\t0x40\n+#define XSTATE_HI_ZMM\t0x80\n+\n+static int\n+check_osxsave (void)\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  return (ecx & bit_OSXSAVE) != 0;\n+}\n+\n+static int\n+avx512fp16_os_support (void)\n+{\n+  unsigned int eax, edx;\n+  unsigned int ecx = XCR_XFEATURE_ENABLED_MASK;\n+  unsigned int mask = XSTATE_MASK;\n+\n+  if (!check_osxsave ())\n+    return 0;\n+\n+  __asm__ (\"xgetbv\" : \"=a\" (eax), \"=d\" (edx) : \"c\" (ecx));\n+\n+  return ((eax & mask) == mask);\n+}\n+\n+static void do_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!avx512fp16_os_support ())\n+    return 0;\n+\n+  if (__get_cpuid_max (0, NULL) < 7)\n+    return 0;\n+\n+  __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+    /* Run AVX512FP16 test only if host has ISA support.  */\n+  if (((ebx & (bit_AVX512F | bit_AVX512BW))\n+       == (bit_AVX512F | bit_AVX512BW))\n+      && (edx & bit_AVX512FP16)\n+      && AVX512VL (ebx))\n+    {\n+      do_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+      return 0;\n+    }\n+\n+#ifdef DEBUG\n+  printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "0abe09f1166f44e8b874af6f186ce2100072bc85", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/avx512fp16-xmm-check.h", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Favx512fp16-xmm-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Favx512fp16-xmm-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Favx512fp16-xmm-check.h?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,3 @@\n+#define AVX512VL(ebx) (ebx & bit_AVX512VL)\n+#define XSTATE_MASK (XSTATE_SSE | XSTATE_OPMASK)\n+#include \"avx512fp16-check.h\""}, {"sha": "17f2c27edc68e14534252ed584fcfed96bc59a4e", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/defines.h", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fdefines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fdefines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fdefines.h?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,150 @@\n+#ifndef DEFINED_DEFINES_H\n+#define DEFINED_DEFINES_H\n+\n+/* Get __m64 and __m128. */\n+#include <immintrin.h>\n+\n+typedef unsigned long ulong;\n+typedef long double ldouble;\n+\n+/* These defines determines what part of the test should be run.  When\n+   GCC implements these parts, the defines should be uncommented to\n+   enable testing.  */\n+\n+/* Scalar type __int128.  */\n+/* #define CHECK_INT128 */\n+\n+/* Scalar type long double.  */\n+#define CHECK_LONG_DOUBLE\n+\n+/* Scalar type __float128.  */\n+/* #define CHECK_FLOAT128 */\n+\n+/* Scalar types __m64 and __m128.  */\n+#define CHECK_M64_M128\n+\n+/* Returning of complex type.  */\n+#define CHECK_COMPLEX\n+\n+/* Structs with size >= 16.  */\n+#define CHECK_LARGER_STRUCTS\n+\n+/* Checks for passing floats and doubles.  */\n+#define CHECK_FLOAT_DOUBLE_PASSING\n+\n+/* Union passing with not-extremely-simple unions.  */\n+#define CHECK_LARGER_UNION_PASSING\n+\n+/* Variable args.  */\n+#define CHECK_VARARGS\n+\n+/* Check argument passing and returning for scalar types with sizeof = 16.  */\n+/* TODO: Implement these tests. Don't activate them for now.  */\n+#define CHECK_LARGE_SCALAR_PASSING\n+\n+/* Defines for sizing and alignment.  */\n+\n+#define TYPE_SIZE_CHAR         1\n+#define TYPE_SIZE_SHORT        2\n+#define TYPE_SIZE_INT          4\n+#define TYPE_SIZE_LONG         8\n+#define TYPE_SIZE_LONG_LONG    8\n+#define TYPE_SIZE_INT128       16\n+#define TYPE_SIZE_FLOAT16      2\n+#define TYPE_SIZE_FLOAT        4\n+#define TYPE_SIZE_DOUBLE       8\n+#define TYPE_SIZE_LONG_DOUBLE  16\n+#define TYPE_SIZE_FLOAT128     16\n+#define TYPE_SIZE_M64          8\n+#define TYPE_SIZE_M128         16\n+#define TYPE_SIZE_ENUM         4\n+#define TYPE_SIZE_POINTER      8\n+\n+#define TYPE_ALIGN_CHAR        1\n+#define TYPE_ALIGN_SHORT       2\n+#define TYPE_ALIGN_INT         4\n+#define TYPE_ALIGN_LONG        8\n+#define TYPE_ALIGN_LONG_LONG   8\n+#define TYPE_ALIGN_INT128      16\n+#define TYPE_ALIGN_FLOAT16     2\n+#define TYPE_ALIGN_FLOAT       4\n+#define TYPE_ALIGN_DOUBLE      8\n+#define TYPE_ALIGN_LONG_DOUBLE 16\n+#define TYPE_ALIGN_FLOAT128    16\n+#define TYPE_ALIGN_M64         8\n+#define TYPE_ALIGN_M128        16\n+#define TYPE_ALIGN_ENUM        4\n+#define TYPE_ALIGN_POINTER     8\n+\n+/* These defines control the building of the list of types to check. There\n+   is a string identifying the type (with a comma after), a size of the type\n+   (also with a comma and an integer for adding to the total amount of types)\n+   and an alignment of the type (which is currently not really needed since\n+   the abi specifies that alignof == sizeof for all scalar types).  */\n+#ifdef CHECK_INT128\n+#define CI128_STR \"__int128\",\n+#define CI128_SIZ TYPE_SIZE_INT128,\n+#define CI128_ALI TYPE_ALIGN_INT128,\n+#define CI128_RET \"???\",\n+#else\n+#define CI128_STR\n+#define CI128_SIZ\n+#define CI128_ALI\n+#define CI128_RET\n+#endif\n+#ifdef CHECK_LONG_DOUBLE\n+#define CLD_STR \"long double\",\n+#define CLD_SIZ TYPE_SIZE_LONG_DOUBLE,\n+#define CLD_ALI TYPE_ALIGN_LONG_DOUBLE,\n+#define CLD_RET \"x87_regs[0]._ldouble\",\n+#else\n+#define CLD_STR\n+#define CLD_SIZ\n+#define CLD_ALI\n+#define CLD_RET\n+#endif\n+#ifdef CHECK_FLOAT128\n+#define CF128_STR \"__float128\",\n+#define CF128_SIZ TYPE_SIZE_FLOAT128,\n+#define CF128_ALI TYPE_ALIGN_FLOAT128, \n+#define CF128_RET \"???\",\n+#else\n+#define CF128_STR\n+#define CF128_SIZ\n+#define CF128_ALI\n+#define CF128_RET\n+#endif\n+#ifdef CHECK_M64_M128\n+#define CMM_STR \"__m64\", \"__m128\",\n+#define CMM_SIZ TYPE_SIZE_M64, TYPE_SIZE_M128,\n+#define CMM_ALI TYPE_ALIGN_M64, TYPE_ALIGN_M128,\n+#define CMM_RET \"???\", \"???\",\n+#else\n+#define CMM_STR\n+#define CMM_SIZ\n+#define CMM_ALI\n+#define CMM_RET\n+#endif\n+\n+/* Used in size and alignment tests.  */\n+enum dummytype { enumtype };\n+\n+extern void abort (void);\n+\n+/* Assertion macro.  */\n+#define assert(test) if (!(test)) abort()\n+\n+#ifdef __GNUC__\n+#define ATTRIBUTE_UNUSED __attribute__((__unused__))\n+#else\n+#define ATTRIBUTE_UNUSED\n+#endif\n+\n+#ifdef __GNUC__\n+#define PACKED __attribute__((__packed__))\n+#else\n+#warning Some tests will fail due to missing __packed__ support\n+#define PACKED\n+#endif\n+\n+#endif /* DEFINED_DEFINES_H */"}, {"sha": "98fbc660f277504edecccd7425b1cca41a19932f", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/macros.h", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fmacros.h?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,53 @@\n+#ifndef MACROS_H\n+\n+#define check_size(_t, _size) assert(sizeof(_t) == (_size))\n+\n+#define check_align(_t, _align) assert(__alignof__(_t) == (_align))\n+\n+#define check_align_lv(_t, _align) assert(__alignof__(_t) == (_align) \\\n+\t\t\t\t\t  && (((unsigned long)&(_t)) & ((_align) - 1) ) == 0)\n+\n+#define check_basic_struct_size_and_align(_type, _size, _align) { \\\n+  struct _str { _type dummy; } _t; \\\n+  check_size(_t, _size); \\\n+  check_align_lv(_t, _align); \\\n+}\n+\n+#define check_array_size_and_align(_type, _size, _align) { \\\n+  _type _a[1]; _type _b[2]; _type _c[16]; \\\n+  struct _str { _type _a[1]; } _s; \\\n+  check_align_lv(_a[0], _align); \\\n+  check_size(_a, _size); \\\n+  check_size(_b, (_size*2)); \\\n+  check_size(_c, (_size*16)); \\\n+  check_size(_s, _size); \\\n+  check_align_lv(_s._a[0], _align); \\\n+}\n+\n+#define check_basic_union_size_and_align(_type, _size, _align) { \\\n+  union _union { _type dummy; } _u; \\\n+  check_size(_u, _size); \\\n+  check_align_lv(_u, _align); \\\n+}\n+\n+#define run_signed_tests2(_function, _arg1, _arg2) \\\n+  _function(_arg1, _arg2); \\\n+  _function(signed _arg1, _arg2); \\\n+  _function(unsigned _arg1, _arg2);\n+\n+#define run_signed_tests3(_function, _arg1, _arg2, _arg3) \\\n+  _function(_arg1, _arg2, _arg3); \\\n+  _function(signed _arg1, _arg2, _arg3); \\\n+  _function(unsigned _arg1, _arg2, _arg3);\n+\n+/* Check size of a struct and a union of three types.  */\n+\n+#define check_struct_and_union3(type1, type2, type3, struct_size, align_size) \\\n+{ \\\n+  struct _str { type1 t1; type2 t2; type3 t3; } _t; \\\n+  union _uni { type1 t1; type2 t2; type3 t3; } _u; \\\n+  check_size(_t, struct_size); \\\n+  check_size(_u, align_size); \\\n+}\n+\n+#endif // MACROS_H"}, {"sha": "cc94e0fe0e95ca39dcdebd1bb834d77fe90bfc64", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_3_element_struct_and_unions.c", "status": "added", "additions": 692, "deletions": 0, "changes": 692, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_3_element_struct_and_unions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_3_element_struct_and_unions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_3_element_struct_and_unions.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,692 @@\n+/* This is an autogenerated file. Do not edit.  */\n+\n+#include \"defines.h\"\n+#include \"macros.h\"\n+\n+/* Check structs and unions of all permutations of 3 basic types.  */\n+int\n+main (void)\n+{\n+  check_struct_and_union3(char, char, char, 3, 1);\n+  check_struct_and_union3(char, char, short, 4, 2);\n+  check_struct_and_union3(char, char, int, 8, 4);\n+  check_struct_and_union3(char, char, long, 16, 8);\n+  check_struct_and_union3(char, char, long long, 16, 8);\n+  check_struct_and_union3(char, char, float, 8, 4);\n+  check_struct_and_union3(char, char, double, 16, 8);\n+  check_struct_and_union3(char, char, long double, 32, 16);\n+  check_struct_and_union3(char, short, char, 6, 2);\n+  check_struct_and_union3(char, short, short, 6, 2);\n+  check_struct_and_union3(char, short, int, 8, 4);\n+  check_struct_and_union3(char, short, long, 16, 8);\n+  check_struct_and_union3(char, short, long long, 16, 8);\n+  check_struct_and_union3(char, short, float, 8, 4);\n+  check_struct_and_union3(char, short, double, 16, 8);\n+  check_struct_and_union3(char, short, long double, 32, 16);\n+  check_struct_and_union3(char, int, char, 12, 4);\n+  check_struct_and_union3(char, int, short, 12, 4);\n+  check_struct_and_union3(char, int, int, 12, 4);\n+  check_struct_and_union3(char, int, long, 16, 8);\n+  check_struct_and_union3(char, int, long long, 16, 8);\n+  check_struct_and_union3(char, int, float, 12, 4);\n+  check_struct_and_union3(char, int, double, 16, 8);\n+  check_struct_and_union3(char, int, long double, 32, 16);\n+  check_struct_and_union3(char, long, char, 24, 8);\n+  check_struct_and_union3(char, long, short, 24, 8);\n+  check_struct_and_union3(char, long, int, 24, 8);\n+  check_struct_and_union3(char, long, long, 24, 8);\n+  check_struct_and_union3(char, long, long long, 24, 8);\n+  check_struct_and_union3(char, long, float, 24, 8);\n+  check_struct_and_union3(char, long, double, 24, 8);\n+  check_struct_and_union3(char, long, long double, 32, 16);\n+  check_struct_and_union3(char, long long, char, 24, 8);\n+  check_struct_and_union3(char, long long, short, 24, 8);\n+  check_struct_and_union3(char, long long, int, 24, 8);\n+  check_struct_and_union3(char, long long, long, 24, 8);\n+  check_struct_and_union3(char, long long, long long, 24, 8);\n+  check_struct_and_union3(char, long long, float, 24, 8);\n+  check_struct_and_union3(char, long long, double, 24, 8);\n+  check_struct_and_union3(char, long long, long double, 32, 16);\n+  check_struct_and_union3(char, float, char, 12, 4);\n+  check_struct_and_union3(char, float, short, 12, 4);\n+  check_struct_and_union3(char, float, int, 12, 4);\n+  check_struct_and_union3(char, float, long, 16, 8);\n+  check_struct_and_union3(char, float, long long, 16, 8);\n+  check_struct_and_union3(char, float, float, 12, 4);\n+  check_struct_and_union3(char, float, double, 16, 8);\n+  check_struct_and_union3(char, float, long double, 32, 16);\n+  check_struct_and_union3(char, double, char, 24, 8);\n+  check_struct_and_union3(char, double, short, 24, 8);\n+  check_struct_and_union3(char, double, int, 24, 8);\n+  check_struct_and_union3(char, double, long, 24, 8);\n+  check_struct_and_union3(char, double, long long, 24, 8);\n+  check_struct_and_union3(char, double, float, 24, 8);\n+  check_struct_and_union3(char, double, double, 24, 8);\n+  check_struct_and_union3(char, double, long double, 32, 16);\n+  check_struct_and_union3(char, long double, char, 48, 16);\n+  check_struct_and_union3(char, long double, short, 48, 16);\n+  check_struct_and_union3(char, long double, int, 48, 16);\n+  check_struct_and_union3(char, long double, long, 48, 16);\n+  check_struct_and_union3(char, long double, long long, 48, 16);\n+  check_struct_and_union3(char, long double, float, 48, 16);\n+  check_struct_and_union3(char, long double, double, 48, 16);\n+  check_struct_and_union3(char, long double, long double, 48, 16);\n+  check_struct_and_union3(short, char, char, 4, 2);\n+  check_struct_and_union3(short, char, short, 6, 2);\n+  check_struct_and_union3(short, char, int, 8, 4);\n+  check_struct_and_union3(short, char, long, 16, 8);\n+  check_struct_and_union3(short, char, long long, 16, 8);\n+  check_struct_and_union3(short, char, float, 8, 4);\n+  check_struct_and_union3(short, char, double, 16, 8);\n+  check_struct_and_union3(short, char, long double, 32, 16);\n+  check_struct_and_union3(short, short, char, 6, 2);\n+  check_struct_and_union3(short, short, short, 6, 2);\n+  check_struct_and_union3(short, short, int, 8, 4);\n+  check_struct_and_union3(short, short, long, 16, 8);\n+  check_struct_and_union3(short, short, long long, 16, 8);\n+  check_struct_and_union3(short, short, float, 8, 4);\n+  check_struct_and_union3(short, short, double, 16, 8);\n+  check_struct_and_union3(short, short, long double, 32, 16);\n+  check_struct_and_union3(short, int, char, 12, 4);\n+  check_struct_and_union3(short, int, short, 12, 4);\n+  check_struct_and_union3(short, int, int, 12, 4);\n+  check_struct_and_union3(short, int, long, 16, 8);\n+  check_struct_and_union3(short, int, long long, 16, 8);\n+  check_struct_and_union3(short, int, float, 12, 4);\n+  check_struct_and_union3(short, int, double, 16, 8);\n+  check_struct_and_union3(short, int, long double, 32, 16);\n+  check_struct_and_union3(short, long, char, 24, 8);\n+  check_struct_and_union3(short, long, short, 24, 8);\n+  check_struct_and_union3(short, long, int, 24, 8);\n+  check_struct_and_union3(short, long, long, 24, 8);\n+  check_struct_and_union3(short, long, long long, 24, 8);\n+  check_struct_and_union3(short, long, float, 24, 8);\n+  check_struct_and_union3(short, long, double, 24, 8);\n+  check_struct_and_union3(short, long, long double, 32, 16);\n+  check_struct_and_union3(short, long long, char, 24, 8);\n+  check_struct_and_union3(short, long long, short, 24, 8);\n+  check_struct_and_union3(short, long long, int, 24, 8);\n+  check_struct_and_union3(short, long long, long, 24, 8);\n+  check_struct_and_union3(short, long long, long long, 24, 8);\n+  check_struct_and_union3(short, long long, float, 24, 8);\n+  check_struct_and_union3(short, long long, double, 24, 8);\n+  check_struct_and_union3(short, long long, long double, 32, 16);\n+  check_struct_and_union3(short, float, char, 12, 4);\n+  check_struct_and_union3(short, float, short, 12, 4);\n+  check_struct_and_union3(short, float, int, 12, 4);\n+  check_struct_and_union3(short, float, long, 16, 8);\n+  check_struct_and_union3(short, float, long long, 16, 8);\n+  check_struct_and_union3(short, float, float, 12, 4);\n+  check_struct_and_union3(short, float, double, 16, 8);\n+  check_struct_and_union3(short, float, long double, 32, 16);\n+  check_struct_and_union3(short, double, char, 24, 8);\n+  check_struct_and_union3(short, double, short, 24, 8);\n+  check_struct_and_union3(short, double, int, 24, 8);\n+  check_struct_and_union3(short, double, long, 24, 8);\n+  check_struct_and_union3(short, double, long long, 24, 8);\n+  check_struct_and_union3(short, double, float, 24, 8);\n+  check_struct_and_union3(short, double, double, 24, 8);\n+  check_struct_and_union3(short, double, long double, 32, 16);\n+  check_struct_and_union3(short, long double, char, 48, 16);\n+  check_struct_and_union3(short, long double, short, 48, 16);\n+  check_struct_and_union3(short, long double, int, 48, 16);\n+  check_struct_and_union3(short, long double, long, 48, 16);\n+  check_struct_and_union3(short, long double, long long, 48, 16);\n+  check_struct_and_union3(short, long double, float, 48, 16);\n+  check_struct_and_union3(short, long double, double, 48, 16);\n+  check_struct_and_union3(short, long double, long double, 48, 16);\n+  check_struct_and_union3(int, char, char, 8, 4);\n+  check_struct_and_union3(int, char, short, 8, 4);\n+  check_struct_and_union3(int, char, int, 12, 4);\n+  check_struct_and_union3(int, char, long, 16, 8);\n+  check_struct_and_union3(int, char, long long, 16, 8);\n+  check_struct_and_union3(int, char, float, 12, 4);\n+  check_struct_and_union3(int, char, double, 16, 8);\n+  check_struct_and_union3(int, char, long double, 32, 16);\n+  check_struct_and_union3(int, short, char, 8, 4);\n+  check_struct_and_union3(int, short, short, 8, 4);\n+  check_struct_and_union3(int, short, int, 12, 4);\n+  check_struct_and_union3(int, short, long, 16, 8);\n+  check_struct_and_union3(int, short, long long, 16, 8);\n+  check_struct_and_union3(int, short, float, 12, 4);\n+  check_struct_and_union3(int, short, double, 16, 8);\n+  check_struct_and_union3(int, short, long double, 32, 16);\n+  check_struct_and_union3(int, int, char, 12, 4);\n+  check_struct_and_union3(int, int, short, 12, 4);\n+  check_struct_and_union3(int, int, int, 12, 4);\n+  check_struct_and_union3(int, int, long, 16, 8);\n+  check_struct_and_union3(int, int, long long, 16, 8);\n+  check_struct_and_union3(int, int, float, 12, 4);\n+  check_struct_and_union3(int, int, double, 16, 8);\n+  check_struct_and_union3(int, int, long double, 32, 16);\n+  check_struct_and_union3(int, long, char, 24, 8);\n+  check_struct_and_union3(int, long, short, 24, 8);\n+  check_struct_and_union3(int, long, int, 24, 8);\n+  check_struct_and_union3(int, long, long, 24, 8);\n+  check_struct_and_union3(int, long, long long, 24, 8);\n+  check_struct_and_union3(int, long, float, 24, 8);\n+  check_struct_and_union3(int, long, double, 24, 8);\n+  check_struct_and_union3(int, long, long double, 32, 16);\n+  check_struct_and_union3(int, long long, char, 24, 8);\n+  check_struct_and_union3(int, long long, short, 24, 8);\n+  check_struct_and_union3(int, long long, int, 24, 8);\n+  check_struct_and_union3(int, long long, long, 24, 8);\n+  check_struct_and_union3(int, long long, long long, 24, 8);\n+  check_struct_and_union3(int, long long, float, 24, 8);\n+  check_struct_and_union3(int, long long, double, 24, 8);\n+  check_struct_and_union3(int, long long, long double, 32, 16);\n+  check_struct_and_union3(int, float, char, 12, 4);\n+  check_struct_and_union3(int, float, short, 12, 4);\n+  check_struct_and_union3(int, float, int, 12, 4);\n+  check_struct_and_union3(int, float, long, 16, 8);\n+  check_struct_and_union3(int, float, long long, 16, 8);\n+  check_struct_and_union3(int, float, float, 12, 4);\n+  check_struct_and_union3(int, float, double, 16, 8);\n+  check_struct_and_union3(int, float, long double, 32, 16);\n+  check_struct_and_union3(int, double, char, 24, 8);\n+  check_struct_and_union3(int, double, short, 24, 8);\n+  check_struct_and_union3(int, double, int, 24, 8);\n+  check_struct_and_union3(int, double, long, 24, 8);\n+  check_struct_and_union3(int, double, long long, 24, 8);\n+  check_struct_and_union3(int, double, float, 24, 8);\n+  check_struct_and_union3(int, double, double, 24, 8);\n+  check_struct_and_union3(int, double, long double, 32, 16);\n+  check_struct_and_union3(int, long double, char, 48, 16);\n+  check_struct_and_union3(int, long double, short, 48, 16);\n+  check_struct_and_union3(int, long double, int, 48, 16);\n+  check_struct_and_union3(int, long double, long, 48, 16);\n+  check_struct_and_union3(int, long double, long long, 48, 16);\n+  check_struct_and_union3(int, long double, float, 48, 16);\n+  check_struct_and_union3(int, long double, double, 48, 16);\n+  check_struct_and_union3(int, long double, long double, 48, 16);\n+  check_struct_and_union3(long, char, char, 16, 8);\n+  check_struct_and_union3(long, char, short, 16, 8);\n+  check_struct_and_union3(long, char, int, 16, 8);\n+  check_struct_and_union3(long, char, long, 24, 8);\n+  check_struct_and_union3(long, char, long long, 24, 8);\n+  check_struct_and_union3(long, char, float, 16, 8);\n+  check_struct_and_union3(long, char, double, 24, 8);\n+  check_struct_and_union3(long, char, long double, 32, 16);\n+  check_struct_and_union3(long, short, char, 16, 8);\n+  check_struct_and_union3(long, short, short, 16, 8);\n+  check_struct_and_union3(long, short, int, 16, 8);\n+  check_struct_and_union3(long, short, long, 24, 8);\n+  check_struct_and_union3(long, short, long long, 24, 8);\n+  check_struct_and_union3(long, short, float, 16, 8);\n+  check_struct_and_union3(long, short, double, 24, 8);\n+  check_struct_and_union3(long, short, long double, 32, 16);\n+  check_struct_and_union3(long, int, char, 16, 8);\n+  check_struct_and_union3(long, int, short, 16, 8);\n+  check_struct_and_union3(long, int, int, 16, 8);\n+  check_struct_and_union3(long, int, long, 24, 8);\n+  check_struct_and_union3(long, int, long long, 24, 8);\n+  check_struct_and_union3(long, int, float, 16, 8);\n+  check_struct_and_union3(long, int, double, 24, 8);\n+  check_struct_and_union3(long, int, long double, 32, 16);\n+  check_struct_and_union3(long, long, char, 24, 8);\n+  check_struct_and_union3(long, long, short, 24, 8);\n+  check_struct_and_union3(long, long, int, 24, 8);\n+  check_struct_and_union3(long, long, long, 24, 8);\n+  check_struct_and_union3(long, long, long long, 24, 8);\n+  check_struct_and_union3(long, long, float, 24, 8);\n+  check_struct_and_union3(long, long, double, 24, 8);\n+  check_struct_and_union3(long, long, long double, 32, 16);\n+  check_struct_and_union3(long, long long, char, 24, 8);\n+  check_struct_and_union3(long, long long, short, 24, 8);\n+  check_struct_and_union3(long, long long, int, 24, 8);\n+  check_struct_and_union3(long, long long, long, 24, 8);\n+  check_struct_and_union3(long, long long, long long, 24, 8);\n+  check_struct_and_union3(long, long long, float, 24, 8);\n+  check_struct_and_union3(long, long long, double, 24, 8);\n+  check_struct_and_union3(long, long long, long double, 32, 16);\n+  check_struct_and_union3(long, float, char, 16, 8);\n+  check_struct_and_union3(long, float, short, 16, 8);\n+  check_struct_and_union3(long, float, int, 16, 8);\n+  check_struct_and_union3(long, float, long, 24, 8);\n+  check_struct_and_union3(long, float, long long, 24, 8);\n+  check_struct_and_union3(long, float, float, 16, 8);\n+  check_struct_and_union3(long, float, double, 24, 8);\n+  check_struct_and_union3(long, float, long double, 32, 16);\n+  check_struct_and_union3(long, double, char, 24, 8);\n+  check_struct_and_union3(long, double, short, 24, 8);\n+  check_struct_and_union3(long, double, int, 24, 8);\n+  check_struct_and_union3(long, double, long, 24, 8);\n+  check_struct_and_union3(long, double, long long, 24, 8);\n+  check_struct_and_union3(long, double, float, 24, 8);\n+  check_struct_and_union3(long, double, double, 24, 8);\n+  check_struct_and_union3(long, double, long double, 32, 16);\n+  check_struct_and_union3(long, long double, char, 48, 16);\n+  check_struct_and_union3(long, long double, short, 48, 16);\n+  check_struct_and_union3(long, long double, int, 48, 16);\n+  check_struct_and_union3(long, long double, long, 48, 16);\n+  check_struct_and_union3(long, long double, long long, 48, 16);\n+  check_struct_and_union3(long, long double, float, 48, 16);\n+  check_struct_and_union3(long, long double, double, 48, 16);\n+  check_struct_and_union3(long, long double, long double, 48, 16);\n+  check_struct_and_union3(long long, char, char, 16, 8);\n+  check_struct_and_union3(long long, char, short, 16, 8);\n+  check_struct_and_union3(long long, char, int, 16, 8);\n+  check_struct_and_union3(long long, char, long, 24, 8);\n+  check_struct_and_union3(long long, char, long long, 24, 8);\n+  check_struct_and_union3(long long, char, float, 16, 8);\n+  check_struct_and_union3(long long, char, double, 24, 8);\n+  check_struct_and_union3(long long, char, long double, 32, 16);\n+  check_struct_and_union3(long long, short, char, 16, 8);\n+  check_struct_and_union3(long long, short, short, 16, 8);\n+  check_struct_and_union3(long long, short, int, 16, 8);\n+  check_struct_and_union3(long long, short, long, 24, 8);\n+  check_struct_and_union3(long long, short, long long, 24, 8);\n+  check_struct_and_union3(long long, short, float, 16, 8);\n+  check_struct_and_union3(long long, short, double, 24, 8);\n+  check_struct_and_union3(long long, short, long double, 32, 16);\n+  check_struct_and_union3(long long, int, char, 16, 8);\n+  check_struct_and_union3(long long, int, short, 16, 8);\n+  check_struct_and_union3(long long, int, int, 16, 8);\n+  check_struct_and_union3(long long, int, long, 24, 8);\n+  check_struct_and_union3(long long, int, long long, 24, 8);\n+  check_struct_and_union3(long long, int, float, 16, 8);\n+  check_struct_and_union3(long long, int, double, 24, 8);\n+  check_struct_and_union3(long long, int, long double, 32, 16);\n+  check_struct_and_union3(long long, long, char, 24, 8);\n+  check_struct_and_union3(long long, long, short, 24, 8);\n+  check_struct_and_union3(long long, long, int, 24, 8);\n+  check_struct_and_union3(long long, long, long, 24, 8);\n+  check_struct_and_union3(long long, long, long long, 24, 8);\n+  check_struct_and_union3(long long, long, float, 24, 8);\n+  check_struct_and_union3(long long, long, double, 24, 8);\n+  check_struct_and_union3(long long, long, long double, 32, 16);\n+  check_struct_and_union3(long long, long long, char, 24, 8);\n+  check_struct_and_union3(long long, long long, short, 24, 8);\n+  check_struct_and_union3(long long, long long, int, 24, 8);\n+  check_struct_and_union3(long long, long long, long, 24, 8);\n+  check_struct_and_union3(long long, long long, long long, 24, 8);\n+  check_struct_and_union3(long long, long long, float, 24, 8);\n+  check_struct_and_union3(long long, long long, double, 24, 8);\n+  check_struct_and_union3(long long, long long, long double, 32, 16);\n+  check_struct_and_union3(long long, float, char, 16, 8);\n+  check_struct_and_union3(long long, float, short, 16, 8);\n+  check_struct_and_union3(long long, float, int, 16, 8);\n+  check_struct_and_union3(long long, float, long, 24, 8);\n+  check_struct_and_union3(long long, float, long long, 24, 8);\n+  check_struct_and_union3(long long, float, float, 16, 8);\n+  check_struct_and_union3(long long, float, double, 24, 8);\n+  check_struct_and_union3(long long, float, long double, 32, 16);\n+  check_struct_and_union3(long long, double, char, 24, 8);\n+  check_struct_and_union3(long long, double, short, 24, 8);\n+  check_struct_and_union3(long long, double, int, 24, 8);\n+  check_struct_and_union3(long long, double, long, 24, 8);\n+  check_struct_and_union3(long long, double, long long, 24, 8);\n+  check_struct_and_union3(long long, double, float, 24, 8);\n+  check_struct_and_union3(long long, double, double, 24, 8);\n+  check_struct_and_union3(long long, double, long double, 32, 16);\n+  check_struct_and_union3(long long, long double, char, 48, 16);\n+  check_struct_and_union3(long long, long double, short, 48, 16);\n+  check_struct_and_union3(long long, long double, int, 48, 16);\n+  check_struct_and_union3(long long, long double, long, 48, 16);\n+  check_struct_and_union3(long long, long double, long long, 48, 16);\n+  check_struct_and_union3(long long, long double, float, 48, 16);\n+  check_struct_and_union3(long long, long double, double, 48, 16);\n+  check_struct_and_union3(long long, long double, long double, 48, 16);\n+  check_struct_and_union3(float, char, char, 8, 4);\n+  check_struct_and_union3(float, char, short, 8, 4);\n+  check_struct_and_union3(float, char, int, 12, 4);\n+  check_struct_and_union3(float, char, long, 16, 8);\n+  check_struct_and_union3(float, char, long long, 16, 8);\n+  check_struct_and_union3(float, char, float, 12, 4);\n+  check_struct_and_union3(float, char, double, 16, 8);\n+  check_struct_and_union3(float, char, long double, 32, 16);\n+  check_struct_and_union3(float, short, char, 8, 4);\n+  check_struct_and_union3(float, short, short, 8, 4);\n+  check_struct_and_union3(float, short, int, 12, 4);\n+  check_struct_and_union3(float, short, long, 16, 8);\n+  check_struct_and_union3(float, short, long long, 16, 8);\n+  check_struct_and_union3(float, short, float, 12, 4);\n+  check_struct_and_union3(float, short, double, 16, 8);\n+  check_struct_and_union3(float, short, long double, 32, 16);\n+  check_struct_and_union3(float, int, char, 12, 4);\n+  check_struct_and_union3(float, int, short, 12, 4);\n+  check_struct_and_union3(float, int, int, 12, 4);\n+  check_struct_and_union3(float, int, long, 16, 8);\n+  check_struct_and_union3(float, int, long long, 16, 8);\n+  check_struct_and_union3(float, int, float, 12, 4);\n+  check_struct_and_union3(float, int, double, 16, 8);\n+  check_struct_and_union3(float, int, long double, 32, 16);\n+  check_struct_and_union3(float, long, char, 24, 8);\n+  check_struct_and_union3(float, long, short, 24, 8);\n+  check_struct_and_union3(float, long, int, 24, 8);\n+  check_struct_and_union3(float, long, long, 24, 8);\n+  check_struct_and_union3(float, long, long long, 24, 8);\n+  check_struct_and_union3(float, long, float, 24, 8);\n+  check_struct_and_union3(float, long, double, 24, 8);\n+  check_struct_and_union3(float, long, long double, 32, 16);\n+  check_struct_and_union3(float, long long, char, 24, 8);\n+  check_struct_and_union3(float, long long, short, 24, 8);\n+  check_struct_and_union3(float, long long, int, 24, 8);\n+  check_struct_and_union3(float, long long, long, 24, 8);\n+  check_struct_and_union3(float, long long, long long, 24, 8);\n+  check_struct_and_union3(float, long long, float, 24, 8);\n+  check_struct_and_union3(float, long long, double, 24, 8);\n+  check_struct_and_union3(float, long long, long double, 32, 16);\n+  check_struct_and_union3(float, float, char, 12, 4);\n+  check_struct_and_union3(float, float, short, 12, 4);\n+  check_struct_and_union3(float, float, int, 12, 4);\n+  check_struct_and_union3(float, float, long, 16, 8);\n+  check_struct_and_union3(float, float, long long, 16, 8);\n+  check_struct_and_union3(float, float, float, 12, 4);\n+  check_struct_and_union3(float, float, double, 16, 8);\n+  check_struct_and_union3(float, float, long double, 32, 16);\n+  check_struct_and_union3(float, double, char, 24, 8);\n+  check_struct_and_union3(float, double, short, 24, 8);\n+  check_struct_and_union3(float, double, int, 24, 8);\n+  check_struct_and_union3(float, double, long, 24, 8);\n+  check_struct_and_union3(float, double, long long, 24, 8);\n+  check_struct_and_union3(float, double, float, 24, 8);\n+  check_struct_and_union3(float, double, double, 24, 8);\n+  check_struct_and_union3(float, double, long double, 32, 16);\n+  check_struct_and_union3(float, long double, char, 48, 16);\n+  check_struct_and_union3(float, long double, short, 48, 16);\n+  check_struct_and_union3(float, long double, int, 48, 16);\n+  check_struct_and_union3(float, long double, long, 48, 16);\n+  check_struct_and_union3(float, long double, long long, 48, 16);\n+  check_struct_and_union3(float, long double, float, 48, 16);\n+  check_struct_and_union3(float, long double, double, 48, 16);\n+  check_struct_and_union3(float, long double, long double, 48, 16);\n+  check_struct_and_union3(double, char, char, 16, 8);\n+  check_struct_and_union3(double, char, short, 16, 8);\n+  check_struct_and_union3(double, char, int, 16, 8);\n+  check_struct_and_union3(double, char, long, 24, 8);\n+  check_struct_and_union3(double, char, long long, 24, 8);\n+  check_struct_and_union3(double, char, float, 16, 8);\n+  check_struct_and_union3(double, char, double, 24, 8);\n+  check_struct_and_union3(double, char, long double, 32, 16);\n+  check_struct_and_union3(double, short, char, 16, 8);\n+  check_struct_and_union3(double, short, short, 16, 8);\n+  check_struct_and_union3(double, short, int, 16, 8);\n+  check_struct_and_union3(double, short, long, 24, 8);\n+  check_struct_and_union3(double, short, long long, 24, 8);\n+  check_struct_and_union3(double, short, float, 16, 8);\n+  check_struct_and_union3(double, short, double, 24, 8);\n+  check_struct_and_union3(double, short, long double, 32, 16);\n+  check_struct_and_union3(double, int, char, 16, 8);\n+  check_struct_and_union3(double, int, short, 16, 8);\n+  check_struct_and_union3(double, int, int, 16, 8);\n+  check_struct_and_union3(double, int, long, 24, 8);\n+  check_struct_and_union3(double, int, long long, 24, 8);\n+  check_struct_and_union3(double, int, float, 16, 8);\n+  check_struct_and_union3(double, int, double, 24, 8);\n+  check_struct_and_union3(double, int, long double, 32, 16);\n+  check_struct_and_union3(double, long, char, 24, 8);\n+  check_struct_and_union3(double, long, short, 24, 8);\n+  check_struct_and_union3(double, long, int, 24, 8);\n+  check_struct_and_union3(double, long, long, 24, 8);\n+  check_struct_and_union3(double, long, long long, 24, 8);\n+  check_struct_and_union3(double, long, float, 24, 8);\n+  check_struct_and_union3(double, long, double, 24, 8);\n+  check_struct_and_union3(double, long, long double, 32, 16);\n+  check_struct_and_union3(double, long long, char, 24, 8);\n+  check_struct_and_union3(double, long long, short, 24, 8);\n+  check_struct_and_union3(double, long long, int, 24, 8);\n+  check_struct_and_union3(double, long long, long, 24, 8);\n+  check_struct_and_union3(double, long long, long long, 24, 8);\n+  check_struct_and_union3(double, long long, float, 24, 8);\n+  check_struct_and_union3(double, long long, double, 24, 8);\n+  check_struct_and_union3(double, long long, long double, 32, 16);\n+  check_struct_and_union3(double, float, char, 16, 8);\n+  check_struct_and_union3(double, float, short, 16, 8);\n+  check_struct_and_union3(double, float, int, 16, 8);\n+  check_struct_and_union3(double, float, long, 24, 8);\n+  check_struct_and_union3(double, float, long long, 24, 8);\n+  check_struct_and_union3(double, float, float, 16, 8);\n+  check_struct_and_union3(double, float, double, 24, 8);\n+  check_struct_and_union3(double, float, long double, 32, 16);\n+  check_struct_and_union3(double, double, char, 24, 8);\n+  check_struct_and_union3(double, double, short, 24, 8);\n+  check_struct_and_union3(double, double, int, 24, 8);\n+  check_struct_and_union3(double, double, long, 24, 8);\n+  check_struct_and_union3(double, double, long long, 24, 8);\n+  check_struct_and_union3(double, double, float, 24, 8);\n+  check_struct_and_union3(double, double, double, 24, 8);\n+  check_struct_and_union3(double, double, long double, 32, 16);\n+  check_struct_and_union3(double, long double, char, 48, 16);\n+  check_struct_and_union3(double, long double, short, 48, 16);\n+  check_struct_and_union3(double, long double, int, 48, 16);\n+  check_struct_and_union3(double, long double, long, 48, 16);\n+  check_struct_and_union3(double, long double, long long, 48, 16);\n+  check_struct_and_union3(double, long double, float, 48, 16);\n+  check_struct_and_union3(double, long double, double, 48, 16);\n+  check_struct_and_union3(double, long double, long double, 48, 16);\n+  check_struct_and_union3(long double, char, char, 32, 16);\n+  check_struct_and_union3(long double, char, short, 32, 16);\n+  check_struct_and_union3(long double, char, int, 32, 16);\n+  check_struct_and_union3(long double, char, long, 32, 16);\n+  check_struct_and_union3(long double, char, long long, 32, 16);\n+  check_struct_and_union3(long double, char, float, 32, 16);\n+  check_struct_and_union3(long double, char, double, 32, 16);\n+  check_struct_and_union3(long double, char, long double, 48, 16);\n+  check_struct_and_union3(long double, short, char, 32, 16);\n+  check_struct_and_union3(long double, short, short, 32, 16);\n+  check_struct_and_union3(long double, short, int, 32, 16);\n+  check_struct_and_union3(long double, short, long, 32, 16);\n+  check_struct_and_union3(long double, short, long long, 32, 16);\n+  check_struct_and_union3(long double, short, float, 32, 16);\n+  check_struct_and_union3(long double, short, double, 32, 16);\n+  check_struct_and_union3(long double, short, long double, 48, 16);\n+  check_struct_and_union3(long double, int, char, 32, 16);\n+  check_struct_and_union3(long double, int, short, 32, 16);\n+  check_struct_and_union3(long double, int, int, 32, 16);\n+  check_struct_and_union3(long double, int, long, 32, 16);\n+  check_struct_and_union3(long double, int, long long, 32, 16);\n+  check_struct_and_union3(long double, int, float, 32, 16);\n+  check_struct_and_union3(long double, int, double, 32, 16);\n+  check_struct_and_union3(long double, int, long double, 48, 16);\n+  check_struct_and_union3(long double, long, char, 32, 16);\n+  check_struct_and_union3(long double, long, short, 32, 16);\n+  check_struct_and_union3(long double, long, int, 32, 16);\n+  check_struct_and_union3(long double, long, long, 32, 16);\n+  check_struct_and_union3(long double, long, long long, 32, 16);\n+  check_struct_and_union3(long double, long, float, 32, 16);\n+  check_struct_and_union3(long double, long, double, 32, 16);\n+  check_struct_and_union3(long double, long, long double, 48, 16);\n+  check_struct_and_union3(long double, long long, char, 32, 16);\n+  check_struct_and_union3(long double, long long, short, 32, 16);\n+  check_struct_and_union3(long double, long long, int, 32, 16);\n+  check_struct_and_union3(long double, long long, long, 32, 16);\n+  check_struct_and_union3(long double, long long, long long, 32, 16);\n+  check_struct_and_union3(long double, long long, float, 32, 16);\n+  check_struct_and_union3(long double, long long, double, 32, 16);\n+  check_struct_and_union3(long double, long long, long double, 48, 16);\n+  check_struct_and_union3(long double, float, char, 32, 16);\n+  check_struct_and_union3(long double, float, short, 32, 16);\n+  check_struct_and_union3(long double, float, int, 32, 16);\n+  check_struct_and_union3(long double, float, long, 32, 16);\n+  check_struct_and_union3(long double, float, long long, 32, 16);\n+  check_struct_and_union3(long double, float, float, 32, 16);\n+  check_struct_and_union3(long double, float, double, 32, 16);\n+  check_struct_and_union3(long double, float, long double, 48, 16);\n+  check_struct_and_union3(long double, double, char, 32, 16);\n+  check_struct_and_union3(long double, double, short, 32, 16);\n+  check_struct_and_union3(long double, double, int, 32, 16);\n+  check_struct_and_union3(long double, double, long, 32, 16);\n+  check_struct_and_union3(long double, double, long long, 32, 16);\n+  check_struct_and_union3(long double, double, float, 32, 16);\n+  check_struct_and_union3(long double, double, double, 32, 16);\n+  check_struct_and_union3(long double, double, long double, 48, 16);\n+  check_struct_and_union3(long double, long double, char, 48, 16);\n+  check_struct_and_union3(long double, long double, short, 48, 16);\n+  check_struct_and_union3(long double, long double, int, 48, 16);\n+  check_struct_and_union3(long double, long double, long, 48, 16);\n+  check_struct_and_union3(long double, long double, long long, 48, 16);\n+  check_struct_and_union3(long double, long double, float, 48, 16);\n+  check_struct_and_union3(long double, long double, double, 48, 16);\n+  check_struct_and_union3(long double, long double, long double, 48, 16);\n+  check_struct_and_union3(char, char, _Float16, 4, 2);\n+  check_struct_and_union3(char, _Float16, char, 6, 2);\n+  check_struct_and_union3(char, _Float16, _Float16, 6, 2);\n+  check_struct_and_union3(char, _Float16, int, 8, 4);\n+  check_struct_and_union3(char, _Float16, long, 16, 8);\n+  check_struct_and_union3(char, _Float16, long long, 16, 8);\n+  check_struct_and_union3(char, _Float16, float, 8, 4);\n+  check_struct_and_union3(char, _Float16, double, 16, 8);\n+  check_struct_and_union3(char, _Float16, long double, 32, 16);\n+  check_struct_and_union3(char, int, _Float16, 12, 4);\n+  check_struct_and_union3(char, long, _Float16, 24, 8);\n+  check_struct_and_union3(char, long long, _Float16, 24, 8);\n+  check_struct_and_union3(char, float, _Float16, 12, 4);\n+  check_struct_and_union3(char, double, _Float16, 24, 8);\n+  check_struct_and_union3(char, long double, _Float16, 48, 16);\n+  check_struct_and_union3(_Float16, char, char, 4, 2);\n+  check_struct_and_union3(_Float16, char, _Float16, 6, 2);\n+  check_struct_and_union3(_Float16, char, int, 8, 4);\n+  check_struct_and_union3(_Float16, char, long, 16, 8);\n+  check_struct_and_union3(_Float16, char, long long, 16, 8);\n+  check_struct_and_union3(_Float16, char, float, 8, 4);\n+  check_struct_and_union3(_Float16, char, double, 16, 8);\n+  check_struct_and_union3(_Float16, char, long double, 32, 16);\n+  check_struct_and_union3(_Float16, _Float16, char, 6, 2);\n+  check_struct_and_union3(_Float16, _Float16, _Float16, 6, 2);\n+  check_struct_and_union3(_Float16, _Float16, int, 8, 4);\n+  check_struct_and_union3(_Float16, _Float16, long, 16, 8);\n+  check_struct_and_union3(_Float16, _Float16, long long, 16, 8);\n+  check_struct_and_union3(_Float16, _Float16, float, 8, 4);\n+  check_struct_and_union3(_Float16, _Float16, double, 16, 8);\n+  check_struct_and_union3(_Float16, _Float16, long double, 32, 16);\n+  check_struct_and_union3(_Float16, int, char, 12, 4);\n+  check_struct_and_union3(_Float16, int, _Float16, 12, 4);\n+  check_struct_and_union3(_Float16, int, int, 12, 4);\n+  check_struct_and_union3(_Float16, int, long, 16, 8);\n+  check_struct_and_union3(_Float16, int, long long, 16, 8);\n+  check_struct_and_union3(_Float16, int, float, 12, 4);\n+  check_struct_and_union3(_Float16, int, double, 16, 8);\n+  check_struct_and_union3(_Float16, int, long double, 32, 16);\n+  check_struct_and_union3(_Float16, long, char, 24, 8);\n+  check_struct_and_union3(_Float16, long, _Float16, 24, 8);\n+  check_struct_and_union3(_Float16, long, int, 24, 8);\n+  check_struct_and_union3(_Float16, long, long, 24, 8);\n+  check_struct_and_union3(_Float16, long, long long, 24, 8);\n+  check_struct_and_union3(_Float16, long, float, 24, 8);\n+  check_struct_and_union3(_Float16, long, double, 24, 8);\n+  check_struct_and_union3(_Float16, long, long double, 32, 16);\n+  check_struct_and_union3(_Float16, long long, char, 24, 8);\n+  check_struct_and_union3(_Float16, long long, _Float16, 24, 8);\n+  check_struct_and_union3(_Float16, long long, int, 24, 8);\n+  check_struct_and_union3(_Float16, long long, long, 24, 8);\n+  check_struct_and_union3(_Float16, long long, long long, 24, 8);\n+  check_struct_and_union3(_Float16, long long, float, 24, 8);\n+  check_struct_and_union3(_Float16, long long, double, 24, 8);\n+  check_struct_and_union3(_Float16, long long, long double, 32, 16);\n+  check_struct_and_union3(_Float16, float, char, 12, 4);\n+  check_struct_and_union3(_Float16, float, _Float16, 12, 4);\n+  check_struct_and_union3(_Float16, float, int, 12, 4);\n+  check_struct_and_union3(_Float16, float, long, 16, 8);\n+  check_struct_and_union3(_Float16, float, long long, 16, 8);\n+  check_struct_and_union3(_Float16, float, float, 12, 4);\n+  check_struct_and_union3(_Float16, float, double, 16, 8);\n+  check_struct_and_union3(_Float16, float, long double, 32, 16);\n+  check_struct_and_union3(_Float16, double, char, 24, 8);\n+  check_struct_and_union3(_Float16, double, _Float16, 24, 8);\n+  check_struct_and_union3(_Float16, double, int, 24, 8);\n+  check_struct_and_union3(_Float16, double, long, 24, 8);\n+  check_struct_and_union3(_Float16, double, long long, 24, 8);\n+  check_struct_and_union3(_Float16, double, float, 24, 8);\n+  check_struct_and_union3(_Float16, double, double, 24, 8);\n+  check_struct_and_union3(_Float16, double, long double, 32, 16);\n+  check_struct_and_union3(_Float16, long double, char, 48, 16);\n+  check_struct_and_union3(_Float16, long double, _Float16, 48, 16);\n+  check_struct_and_union3(_Float16, long double, int, 48, 16);\n+  check_struct_and_union3(_Float16, long double, long, 48, 16);\n+  check_struct_and_union3(_Float16, long double, long long, 48, 16);\n+  check_struct_and_union3(_Float16, long double, float, 48, 16);\n+  check_struct_and_union3(_Float16, long double, double, 48, 16);\n+  check_struct_and_union3(_Float16, long double, long double, 48, 16);\n+  check_struct_and_union3(int, char, _Float16, 8, 4);\n+  check_struct_and_union3(int, _Float16, char, 8, 4);\n+  check_struct_and_union3(int, _Float16, _Float16, 8, 4);\n+  check_struct_and_union3(int, _Float16, int, 12, 4);\n+  check_struct_and_union3(int, _Float16, long, 16, 8);\n+  check_struct_and_union3(int, _Float16, long long, 16, 8);\n+  check_struct_and_union3(int, _Float16, float, 12, 4);\n+  check_struct_and_union3(int, _Float16, double, 16, 8);\n+  check_struct_and_union3(int, _Float16, long double, 32, 16);\n+  check_struct_and_union3(int, int, _Float16, 12, 4);\n+  check_struct_and_union3(int, long, _Float16, 24, 8);\n+  check_struct_and_union3(int, long long, _Float16, 24, 8);\n+  check_struct_and_union3(int, float, _Float16, 12, 4);\n+  check_struct_and_union3(int, double, _Float16, 24, 8);\n+  check_struct_and_union3(int, long double, _Float16, 48, 16);\n+  check_struct_and_union3(long, char, _Float16, 16, 8);\n+  check_struct_and_union3(long, _Float16, char, 16, 8);\n+  check_struct_and_union3(long, _Float16, _Float16, 16, 8);\n+  check_struct_and_union3(long, _Float16, int, 16, 8);\n+  check_struct_and_union3(long, _Float16, long, 24, 8);\n+  check_struct_and_union3(long, _Float16, long long, 24, 8);\n+  check_struct_and_union3(long, _Float16, float, 16, 8);\n+  check_struct_and_union3(long, _Float16, double, 24, 8);\n+  check_struct_and_union3(long, _Float16, long double, 32, 16);\n+  check_struct_and_union3(long, int, _Float16, 16, 8);\n+  check_struct_and_union3(long, long, _Float16, 24, 8);\n+  check_struct_and_union3(long, long long, _Float16, 24, 8);\n+  check_struct_and_union3(long, float, _Float16, 16, 8);\n+  check_struct_and_union3(long, double, _Float16, 24, 8);\n+  check_struct_and_union3(long, long double, _Float16, 48, 16);\n+  check_struct_and_union3(long long, char, _Float16, 16, 8);\n+  check_struct_and_union3(long long, _Float16, char, 16, 8);\n+  check_struct_and_union3(long long, _Float16, _Float16, 16, 8);\n+  check_struct_and_union3(long long, _Float16, int, 16, 8);\n+  check_struct_and_union3(long long, _Float16, long, 24, 8);\n+  check_struct_and_union3(long long, _Float16, long long, 24, 8);\n+  check_struct_and_union3(long long, _Float16, float, 16, 8);\n+  check_struct_and_union3(long long, _Float16, double, 24, 8);\n+  check_struct_and_union3(long long, _Float16, long double, 32, 16);\n+  check_struct_and_union3(long long, int, _Float16, 16, 8);\n+  check_struct_and_union3(long long, long, _Float16, 24, 8);\n+  check_struct_and_union3(long long, long long, _Float16, 24, 8);\n+  check_struct_and_union3(long long, float, _Float16, 16, 8);\n+  check_struct_and_union3(long long, double, _Float16, 24, 8);\n+  check_struct_and_union3(long long, long double, _Float16, 48, 16);\n+  check_struct_and_union3(float, char, _Float16, 8, 4);\n+  check_struct_and_union3(float, _Float16, char, 8, 4);\n+  check_struct_and_union3(float, _Float16, _Float16, 8, 4);\n+  check_struct_and_union3(float, _Float16, int, 12, 4);\n+  check_struct_and_union3(float, _Float16, long, 16, 8);\n+  check_struct_and_union3(float, _Float16, long long, 16, 8);\n+  check_struct_and_union3(float, _Float16, float, 12, 4);\n+  check_struct_and_union3(float, _Float16, double, 16, 8);\n+  check_struct_and_union3(float, _Float16, long double, 32, 16);\n+  check_struct_and_union3(float, int, _Float16, 12, 4);\n+  check_struct_and_union3(float, long, _Float16, 24, 8);\n+  check_struct_and_union3(float, long long, _Float16, 24, 8);\n+  check_struct_and_union3(float, float, _Float16, 12, 4);\n+  check_struct_and_union3(float, double, _Float16, 24, 8);\n+  check_struct_and_union3(float, long double, _Float16, 48, 16);\n+  check_struct_and_union3(double, char, _Float16, 16, 8);\n+  check_struct_and_union3(double, _Float16, char, 16, 8);\n+  check_struct_and_union3(double, _Float16, _Float16, 16, 8);\n+  check_struct_and_union3(double, _Float16, int, 16, 8);\n+  check_struct_and_union3(double, _Float16, long, 24, 8);\n+  check_struct_and_union3(double, _Float16, long long, 24, 8);\n+  check_struct_and_union3(double, _Float16, float, 16, 8);\n+  check_struct_and_union3(double, _Float16, double, 24, 8);\n+  check_struct_and_union3(double, _Float16, long double, 32, 16);\n+  check_struct_and_union3(double, int, _Float16, 16, 8);\n+  check_struct_and_union3(double, long, _Float16, 24, 8);\n+  check_struct_and_union3(double, long long, _Float16, 24, 8);\n+  check_struct_and_union3(double, float, _Float16, 16, 8);\n+  check_struct_and_union3(double, double, _Float16, 24, 8);\n+  check_struct_and_union3(double, long double, _Float16, 48, 16);\n+  check_struct_and_union3(long double, char, _Float16, 32, 16);\n+  check_struct_and_union3(long double, _Float16, char, 32, 16);\n+  check_struct_and_union3(long double, _Float16, _Float16, 32, 16);\n+  check_struct_and_union3(long double, _Float16, int, 32, 16);\n+  check_struct_and_union3(long double, _Float16, long, 32, 16);\n+  check_struct_and_union3(long double, _Float16, long long, 32, 16);\n+  check_struct_and_union3(long double, _Float16, float, 32, 16);\n+  check_struct_and_union3(long double, _Float16, double, 32, 16);\n+  check_struct_and_union3(long double, _Float16, long double, 48, 16);\n+  check_struct_and_union3(long double, int, _Float16, 32, 16);\n+  check_struct_and_union3(long double, long, _Float16, 32, 16);\n+  check_struct_and_union3(long double, long long, _Float16, 32, 16);\n+  check_struct_and_union3(long double, float, _Float16, 32, 16);\n+  check_struct_and_union3(long double, double, _Float16, 32, 16);\n+  check_struct_and_union3(long double, long double, _Float16, 48, 16);\n+  return 0;\n+}"}, {"sha": "2a72b5c9e18880bd9ea5b23931fe7c9619c67467", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_basic_alignment.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_alignment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_alignment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_alignment.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,45 @@\n+/* This checks alignment of basic types.  */\n+\n+#include \"defines.h\"\n+#include \"macros.h\"\n+\n+\n+int\n+main (void)\n+{\n+  /* Integral types.  */\n+  run_signed_tests2(check_align, char, TYPE_ALIGN_CHAR);\n+  run_signed_tests2(check_align, short, TYPE_ALIGN_SHORT);\n+  run_signed_tests2(check_align, int, TYPE_ALIGN_INT);\n+  run_signed_tests2(check_align, long, TYPE_ALIGN_LONG);\n+  run_signed_tests2(check_align, long long, TYPE_ALIGN_LONG_LONG);\n+#ifdef CHECK_INT128\n+  run_signed_tests2(check_align, __int128, TYPE_ALIGN_INT128);\n+#endif\n+  check_align(enumtype, TYPE_ALIGN_ENUM);\n+\n+  /* Floating point types.  */\n+  check_align(float, TYPE_ALIGN_FLOAT);\n+  check_align(double, TYPE_ALIGN_DOUBLE);\n+#ifdef CHECK_LONG_DOUBLE\n+  check_align(long double, TYPE_ALIGN_LONG_DOUBLE);\n+#endif\n+#ifdef CHECK_FLOAT128\n+  check_align(__float128, TYPE_ALIGN_FLOAT128);\n+#endif\n+\n+  /* Packed types - MMX, 3DNow!, SSE and SSE2.  */\n+#ifdef CHECK_M64_M128\n+  check_align(__m64, TYPE_ALIGN_M64);\n+  check_align(__m128, TYPE_ALIGN_M128);\n+#endif\n+\n+  /* _Float16 point types.  */\n+  check_align(_Float16, TYPE_ALIGN_FLOAT16);\n+\n+  /* Pointer types.  */\n+  check_align(void *, TYPE_ALIGN_POINTER);\n+  check_align(void (*)(), TYPE_ALIGN_POINTER);\n+\n+  return 0;\n+}"}, {"sha": "d58b9d1c43c646cb8c72f98dfdc5dc6084e43dfd", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_basic_array_size_and_align.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_array_size_and_align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_array_size_and_align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_array_size_and_align.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,43 @@\n+/* This checks .  */\n+\n+#include \"defines.h\"\n+#include \"macros.h\"\n+\n+\n+int\n+main (void)\n+{\n+  /* Integral types.  */\n+  run_signed_tests3(check_array_size_and_align, char, TYPE_SIZE_CHAR, TYPE_ALIGN_CHAR);\n+  run_signed_tests3(check_array_size_and_align, short, TYPE_SIZE_SHORT, TYPE_ALIGN_SHORT);\n+  run_signed_tests3(check_array_size_and_align, int, TYPE_SIZE_INT, TYPE_ALIGN_INT);\n+  run_signed_tests3(check_array_size_and_align, long, TYPE_SIZE_LONG, TYPE_ALIGN_LONG);\n+  run_signed_tests3(check_array_size_and_align, long long, TYPE_SIZE_LONG_LONG, TYPE_ALIGN_LONG_LONG);\n+#ifdef CHECK_INT128\n+  run_signed_tests3(check_array_size_and_align, __int128, TYPE_SIZE_INT128, TYPE_ALIGN_INT128);\n+#endif\n+  check_array_size_and_align(enum dummytype, TYPE_SIZE_ENUM, TYPE_ALIGN_ENUM);\n+\n+  /* Floating point types.  */\n+  check_array_size_and_align(float, TYPE_SIZE_FLOAT, TYPE_ALIGN_FLOAT);\n+  check_array_size_and_align(double, TYPE_SIZE_DOUBLE, TYPE_ALIGN_DOUBLE);\n+#ifdef CHECK_LONG_DOUBLE\n+  check_array_size_and_align(long double, TYPE_SIZE_LONG_DOUBLE, TYPE_ALIGN_LONG_DOUBLE);\n+#endif\n+#ifdef CHECK_FLOAT128\n+  check_array_size_and_align(__float128, TYPE_SIZE_FLOAT128, TYPE_ALIGN_FLOAT128);\n+#endif\n+\n+  /* Packed types - MMX, 3DNow!, SSE and SSE2.  */\n+#ifdef CHECK_M64_M128\n+  check_array_size_and_align(__m64, TYPE_SIZE_M64, TYPE_ALIGN_M64);\n+  check_array_size_and_align(__m128, TYPE_SIZE_M128, TYPE_ALIGN_M128);\n+#endif\n+\n+  /* Pointer types. The function pointer doesn't work with these macros.  */\n+  check_array_size_and_align(void *, TYPE_SIZE_POINTER, TYPE_ALIGN_POINTER);\n+\n+  check_array_size_and_align(_Float16, TYPE_SIZE_FLOAT16, TYPE_ALIGN_FLOAT16);\n+\n+  return 0;\n+}"}, {"sha": "36fb24e6250b159524405af4773924b165342755", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_basic_returning.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_returning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_returning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_returning.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,87 @@\n+/* This is an autogenerated file. Do not edit.  */\n+\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+#include \"macros.h\"\n+#include \"args.h\"\n+\n+char\n+fun_test_returning_char (void)\n+{\n+  volatile_var++;\n+  return 64;\n+}\n+\n+short\n+fun_test_returning_short (void)\n+{\n+  volatile_var++;\n+  return 65;\n+}\n+\n+int\n+fun_test_returning_int (void)\n+{\n+  volatile_var++;\n+  return 66;\n+}\n+\n+long\n+fun_test_returning_long (void)\n+{\n+  volatile_var++;\n+  return 67;\n+}\n+\n+long long\n+fun_test_returning_long_long (void)\n+{\n+  volatile_var++;\n+  return 68;\n+}\n+\n+float\n+fun_test_returning_float (void)\n+{\n+  volatile_var++;\n+  return 69;\n+}\n+\n+double\n+fun_test_returning_double (void)\n+{\n+  volatile_var++;\n+  return 70;\n+}\n+\n+long double\n+fun_test_returning_long_double (void)\n+{\n+  volatile_var++;\n+  return 71;\n+}\n+\n+_Float16\n+fun_test_returning_float16 (void)\n+{\n+  volatile_var++;\n+  return 72;\n+}\n+\n+#define def_test_returning_type_xmm(fun, type, ret, reg) \\\n+  { type var = WRAP_RET (fun) (); \\\n+  assert (ret == (type) reg && ret == var); }\n+\n+static void\n+do_test (void)\n+{\n+  def_test_returning_type_xmm(fun_test_returning_char, char, 64, rax);\n+  def_test_returning_type_xmm(fun_test_returning_short, short, 65, rax);\n+  def_test_returning_type_xmm(fun_test_returning_int, int, 66, rax);\n+  def_test_returning_type_xmm(fun_test_returning_long, long, 67, rax);\n+  def_test_returning_type_xmm(fun_test_returning_long_long, long long, 68, rax);\n+  def_test_returning_type_xmm(fun_test_returning_float, float, 69, xmm_regs[0]._float[0]);\n+  def_test_returning_type_xmm(fun_test_returning_double, double, 70, xmm_regs[0]._double[0]);\n+  def_test_returning_type_xmm(fun_test_returning_long_double, long double, 71, x87_regs[0]._ldouble);\n+  def_test_returning_type_xmm(fun_test_returning_float16, _Float16, 72, xmm_regs[0].__Float16[0]);\n+}"}, {"sha": "47f3a5e87cadd298c97a904b1c903ddc24cd73ce", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_basic_sizes.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_sizes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_sizes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_sizes.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,43 @@\n+/* This checks sizes of basic types.  */\n+\n+#include \"defines.h\"\n+#include \"macros.h\"\n+\n+\n+int\n+main (void)\n+{\n+  /* Integral types.  */\n+  run_signed_tests2(check_size, char, TYPE_SIZE_CHAR);\n+  run_signed_tests2(check_size, short, TYPE_SIZE_SHORT);\n+  run_signed_tests2(check_size, int, TYPE_SIZE_INT);\n+  run_signed_tests2(check_size, long, TYPE_SIZE_LONG);\n+  run_signed_tests2(check_size, long long, TYPE_SIZE_LONG_LONG);\n+#ifdef CHECK_INT128\n+  run_signed_tests2(check_size, __int128, TYPE_SIZE_INT128);\n+#endif\n+  check_size(enumtype, TYPE_SIZE_ENUM);\n+\n+  /* Floating point types.  */\n+  check_size(_Float16, TYPE_SIZE_FLOAT16);\n+  check_size(float, TYPE_SIZE_FLOAT);\n+  check_size(double, TYPE_SIZE_DOUBLE);\n+#ifdef CHECK_LONG_DOUBLE\n+  check_size(long double, TYPE_SIZE_LONG_DOUBLE);\n+#endif\n+#ifdef CHECK_FLOAT128\n+  check_size(__float128, TYPE_SIZE_FLOAT128);\n+#endif\n+\n+  /* Packed types - MMX, 3DNow!, SSE and SSE2.  */\n+#ifdef CHECK_M64_M128\n+  check_size(__m64, TYPE_SIZE_M64);\n+  check_size(__m128, TYPE_SIZE_M128);\n+#endif\n+\n+  /* Pointer types.  */\n+  check_size(void *, TYPE_SIZE_POINTER);\n+  check_size(void (*)(), TYPE_SIZE_POINTER);\n+\n+  return 0;\n+}"}, {"sha": "3d1add464a25422807ea21423f2d18707f420e51", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_basic_struct_size_and_align.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_struct_size_and_align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_struct_size_and_align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_struct_size_and_align.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,42 @@\n+/* This checks size and alignment of structs with a single basic type\n+   element. All basic types are checked.  */\n+\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+#include \"macros.h\"\n+\n+\n+static void\n+do_test (void)\n+{\n+  /* Integral types.  */\n+  run_signed_tests3(check_basic_struct_size_and_align, char, TYPE_SIZE_CHAR, TYPE_ALIGN_CHAR);\n+  run_signed_tests3(check_basic_struct_size_and_align, short, TYPE_SIZE_SHORT, TYPE_ALIGN_SHORT);\n+  run_signed_tests3(check_basic_struct_size_and_align, int, TYPE_SIZE_INT, TYPE_ALIGN_INT);\n+  run_signed_tests3(check_basic_struct_size_and_align, long, TYPE_SIZE_LONG, TYPE_ALIGN_LONG);\n+  run_signed_tests3(check_basic_struct_size_and_align, long long, TYPE_SIZE_LONG_LONG, TYPE_ALIGN_LONG_LONG);\n+#ifdef CHECK_INT128\n+  run_signed_tests3(check_basic_struct_size_and_align, __int128, TYPE_SIZE_INT128, TYPE_ALIGN_INT128);\n+#endif\n+  check_basic_struct_size_and_align(enum dummytype, TYPE_SIZE_ENUM, TYPE_ALIGN_ENUM);\n+\n+  /* Floating point types.  */\n+  check_basic_struct_size_and_align(_Float16, TYPE_SIZE_FLOAT16, TYPE_ALIGN_FLOAT16);\n+  check_basic_struct_size_and_align(float, TYPE_SIZE_FLOAT, TYPE_ALIGN_FLOAT);\n+  check_basic_struct_size_and_align(double, TYPE_SIZE_DOUBLE, TYPE_ALIGN_DOUBLE);\n+#ifdef CHECK_LONG_DOUBLE\n+  check_basic_struct_size_and_align(long double, TYPE_SIZE_LONG_DOUBLE, TYPE_ALIGN_LONG_DOUBLE);\n+#endif\n+#ifdef CHECK_FLOAT128\n+  check_basic_struct_size_and_align(__float128, TYPE_SIZE_FLOAT128, TYPE_ALIGN_FLOAT128);\n+#endif\n+\n+  /* Packed types - MMX, 3DNow!, SSE and SSE2.  */\n+#ifdef CHECK_M64_M128\n+  check_basic_struct_size_and_align(__m64, TYPE_SIZE_M64, TYPE_ALIGN_M64);\n+  check_basic_struct_size_and_align(__m128, TYPE_SIZE_M128, TYPE_ALIGN_M128);\n+#endif\n+\n+  /* Pointer types. The function pointer doesn't work with these macros.  */\n+  check_basic_struct_size_and_align(void *, TYPE_SIZE_POINTER, TYPE_ALIGN_POINTER);\n+}"}, {"sha": "632feebe920f4b92b97b8d6af02c051385025148", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_basic_union_size_and_align.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_union_size_and_align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_union_size_and_align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_basic_union_size_and_align.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,40 @@\n+/* Test of simple unions, size and alignment.  */\n+\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+#include \"macros.h\"\n+\n+static void\n+do_test (void)\n+{\n+  /* Integral types.  */\n+  run_signed_tests3(check_basic_union_size_and_align, char, TYPE_SIZE_CHAR, TYPE_ALIGN_CHAR);\n+  run_signed_tests3(check_basic_union_size_and_align, short, TYPE_SIZE_SHORT, TYPE_ALIGN_SHORT);\n+  run_signed_tests3(check_basic_union_size_and_align, int, TYPE_SIZE_INT, TYPE_ALIGN_INT);\n+  run_signed_tests3(check_basic_union_size_and_align, long, TYPE_SIZE_LONG, TYPE_ALIGN_LONG);\n+  run_signed_tests3(check_basic_union_size_and_align, long long, TYPE_SIZE_LONG_LONG, TYPE_ALIGN_LONG_LONG);\n+#ifdef CHECK_INT128\n+  run_signed_tests3(check_basic_union_size_and_align, __int128, TYPE_SIZE_INT128, TYPE_ALIGN_INT128);\n+#endif\n+  check_basic_union_size_and_align(enum dummytype, TYPE_SIZE_ENUM, TYPE_ALIGN_ENUM);\n+\n+  /* Floating point types.  */\n+  check_basic_union_size_and_align(_Float16, TYPE_SIZE_FLOAT16, TYPE_ALIGN_FLOAT16);\n+  check_basic_union_size_and_align(float, TYPE_SIZE_FLOAT, TYPE_ALIGN_FLOAT);\n+  check_basic_union_size_and_align(double, TYPE_SIZE_DOUBLE, TYPE_ALIGN_DOUBLE);\n+#ifdef CHECK_LONG_DOUBLE\n+  check_basic_union_size_and_align(long double, TYPE_SIZE_LONG_DOUBLE, TYPE_ALIGN_LONG_DOUBLE);\n+#endif\n+#ifdef CHECK_FLOAT128\n+  check_basic_union_size_and_align(__float128, TYPE_SIZE_FLOAT128, TYPE_ALIGN_FLOAT128);\n+#endif\n+\n+  /* Packed types - MMX, 3DNow!, SSE and SSE2.  */\n+#ifdef CHECK_M64_M128\n+  check_basic_union_size_and_align(__m64, TYPE_SIZE_M64, TYPE_ALIGN_M64);\n+  check_basic_union_size_and_align(__m128, TYPE_SIZE_M128, TYPE_ALIGN_M128);\n+#endif\n+\n+  /* Pointer types. The function pointer doesn't work with these macros.  */\n+  check_basic_union_size_and_align(void *, TYPE_SIZE_POINTER, TYPE_ALIGN_POINTER);\n+}"}, {"sha": "829d86e9ee75c906d84a270de7638a767ebe06c3", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_complex_returning.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_complex_returning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_complex_returning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_complex_returning.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,104 @@\n+/* This is a small test case for returning a complex number. Written by\n+   Andreas Jaeger.  */\n+\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+\n+#define BUILD_F16_COMPLEX(real, imag) \\\n+  ({ __complex__ _Float16 __retval; \\\n+     __real__ __retval = (real); \\\n+     __imag__ __retval = (imag); \\\n+     __retval; })\n+\n+__complex__ _Float16\n+aj_f16_times2 (__complex__ _Float16 x)\n+{\n+  __complex__ _Float16 res;\n+\n+  __real__ res = (2.0 * __real__ x);\n+  __imag__ res = (2.0 * __imag__ x);\n+\n+  return res;\n+}\n+\n+#define BUILD_F_COMPLEX(real, imag) \\\n+  ({ __complex__ float __retval; \\\n+     __real__ __retval = (real); \\\n+     __imag__ __retval = (imag); \\\n+     __retval; })\n+\n+#define BUILD_D_COMPLEX(real, imag) \\\n+  ({ __complex__ double __retval; \\\n+     __real__ __retval = (real); \\\n+     __imag__ __retval = (imag); \\\n+     __retval; })\n+\n+#define BUILD_LD_COMPLEX(real, imag) \\\n+  ({ __complex__ long double __retval; \\\n+     __real__ __retval = (real); \\\n+     __imag__ __retval = (imag); \\\n+     __retval; })\n+\n+__complex__ float\n+aj_f_times2 (__complex__ float x)\n+{\n+  __complex__ float res;\n+\n+  __real__ res = (2.0 * __real__ x);\n+  __imag__ res = (2.0 * __imag__ x);\n+\n+  return res;\n+}\n+\n+__complex__ double\n+aj_d_times2 (__complex__ double x)\n+{\n+  __complex__ double res;\n+\n+  __real__ res = (2.0 * __real__ x);\n+  __imag__ res = (2.0 * __imag__ x);\n+\n+  return res;\n+}\n+\n+__complex__ long double\n+aj_ld_times2 (__complex__ long double x)\n+{\n+  __complex__ long double res;\n+\n+  __real__ res = (2.0 * __real__ x);\n+  __imag__ res = (2.0 * __imag__ x);\n+\n+  return res;\n+}\n+\n+static void\n+do_test (void)\n+{\n+#ifdef CHECK_COMPLEX\n+  _Complex _Float16 f16c, f16d;\n+  _Complex float fc, fd;\n+  _Complex double dc, dd;\n+  _Complex long double ldc, ldd;\n+\n+  f16c = BUILD_F16_COMPLEX (2.0, 3.0);\n+  f16d = aj_f16_times2 (f16c);\n+\n+  assert (__real__ f16d == 4.0f16 && __imag__ f16d == 6.0f16);\n+\n+  fc = BUILD_LD_COMPLEX (2.0f, 3.0f);\n+  fd = aj_f_times2 (fc);\n+\n+  assert (__real__ fd == 4.0f && __imag__ fd == 6.0f);\n+\n+  dc = BUILD_LD_COMPLEX (2.0, 3.0);\n+  dd = aj_ld_times2 (dc);\n+\n+  assert (__real__ dd == 4.0 && __imag__ dd == 6.0);\n+\n+  ldc = BUILD_LD_COMPLEX (2.0L, 3.0L);\n+  ldd = aj_ld_times2 (ldc);\n+\n+  assert (__real__ ldd == 4.0L && __imag__ ldd == 6.0L);\n+#endif\n+}"}, {"sha": "34afee66586f78f3c3837be09301a77061478a4c", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_m64m128_returning.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_m64m128_returning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_m64m128_returning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_m64m128_returning.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,73 @@\n+#include <stdio.h>\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+#include \"macros.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+unsigned int num_iregs, num_fregs;\n+\n+__m64\n+fun_test_returning___m64 (void)\n+{\n+  volatile_var++;\n+  return (__m64){72,0};\n+}\n+\n+__m128\n+fun_test_returning___m128 (void)\n+{\n+  volatile_var++;\n+  return (__m128){73,0,0,0};\n+}\n+\n+__m128h\n+fun_test_returning___m128h (void)\n+{\n+  volatile_var++;\n+  return (__m128h){1.1f16, 2.2f16, 3.3f16, 4.4f16, 5.5f16,\n+                   6.6f16, 7.7f16, 8.8f16};\n+}\n+\n+__m64 test_64;\n+__m128 test_128;\n+__m128h test_128h;\n+\n+static void\n+do_test (void)\n+{\n+  unsigned failed = 0;\n+  XMM_T xmmt1, xmmt2;\n+\n+  /* We jump through hoops to compare the results as gcc 3.3 does throw\n+     an ICE when trying to generate a compare for a == b, when a and b\n+     are of __m64 or __m128 type :-(  */\n+  clear_struct_registers;\n+  test_64 = (__m64){72,0};\n+  xmmt1._m64[0] = test_64;\n+  xmmt2._m64[0] = WRAP_RET (fun_test_returning___m64)();\n+  if (xmmt1._long[0] != xmmt2._long[0]\n+      || xmmt1._long[0] != xmm_regs[0]._long[0])\n+    printf (\"fail m64\\n\"), failed++;\n+\n+  clear_struct_registers;\n+  test_128 = (__m128){73,0};\n+  xmmt1._m128[0] = test_128;\n+  xmmt2._m128[0] = WRAP_RET (fun_test_returning___m128)();\n+  if (xmmt1._long[0] != xmmt2._long[0]\n+      || xmmt1._long[0] != xmm_regs[0]._long[0])\n+    printf (\"fail m128\\n\"), failed++;\n+\n+  clear_struct_registers;\n+  test_128h = (__m128h){1.1f16, 2.2f16, 3.3f16, 4.4f16, 5.5f16,\n+                        6.6f16, 7.7f16, 8.8f16};\n+  xmmt1._m128h[0] = test_128h;\n+  xmmt2._m128h[0] = WRAP_RET (fun_test_returning___m128h)();\n+  if (xmmt1._long[0] != xmmt2._long[0]\n+      || xmmt1._long[0] != xmm_regs[0]._long[0])\n+    printf (\"fail m128h\\n\"), failed++;\n+\n+  if (failed)\n+    abort ();\n+}"}, {"sha": "678b25c14d34bb397f2904ab36df15ef8d7c98f6", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_passing_floats.c", "status": "added", "additions": 1066, "deletions": 0, "changes": 1066, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_floats.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_floats.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_floats.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,1066 @@\n+/* This is an autogenerated file. Do not edit.  */\n+\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+#include \"macros.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+unsigned int num_iregs, num_fregs;\n+\n+/* This struct holds values for argument checking.  */\n+struct\n+{\n+  _Float16 f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14,\n+    f15, f16, f17, f18, f19, f20, f21, f22, f23;\n+} values__Float16;\n+\n+struct\n+{\n+  float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15,\n+    f16, f17, f18, f19, f20, f21, f22, f23;\n+} values_float;\n+\n+struct\n+{\n+  double f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15,\n+    f16, f17, f18, f19, f20, f21, f22, f23;\n+} values_double;\n+\n+struct\n+{\n+  ldouble f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14,\n+    f15, f16, f17, f18, f19, f20, f21, f22, f23;\n+} values_ldouble;\n+\n+void\n+fun_check_float16_passing_8_values (_Float16 f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t    _Float16 f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t    _Float16 f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t    _Float16 f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t    _Float16 f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t    _Float16 f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t    _Float16 f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t    _Float16 f7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values__Float16.f0 == f0);\n+  assert (values__Float16.f1 == f1);\n+  assert (values__Float16.f2 == f2);\n+  assert (values__Float16.f3 == f3);\n+  assert (values__Float16.f4 == f4);\n+  assert (values__Float16.f5 == f5);\n+  assert (values__Float16.f6 == f6);\n+  assert (values__Float16.f7 == f7);\n+}\n+\n+void\n+fun_check_float16_passing_8_regs (_Float16 f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t  _Float16 f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t  _Float16 f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t  _Float16 f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t  _Float16 f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t  _Float16 f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t  _Float16 f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t  _Float16 f7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_float16_arguments;\n+}\n+\n+void\n+fun_check_float16_passing_16_values (_Float16 f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f15 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values__Float16.f0 == f0);\n+  assert (values__Float16.f1 == f1);\n+  assert (values__Float16.f2 == f2);\n+  assert (values__Float16.f3 == f3);\n+  assert (values__Float16.f4 == f4);\n+  assert (values__Float16.f5 == f5);\n+  assert (values__Float16.f6 == f6);\n+  assert (values__Float16.f7 == f7);\n+  assert (values__Float16.f8 == f8);\n+  assert (values__Float16.f9 == f9);\n+  assert (values__Float16.f10 == f10);\n+  assert (values__Float16.f11 == f11);\n+  assert (values__Float16.f12 == f12);\n+  assert (values__Float16.f13 == f13);\n+  assert (values__Float16.f14 == f14);\n+  assert (values__Float16.f15 == f15);\n+}\n+\n+void\n+fun_check_float16_passing_16_regs (_Float16 f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f15 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_float16_arguments;\n+}\n+\n+void\n+fun_check_float16_passing_20_values (_Float16 f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f15 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f16 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f17 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f18 ATTRIBUTE_UNUSED,\n+\t\t\t\t     _Float16 f19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values__Float16.f0 == f0);\n+  assert (values__Float16.f1 == f1);\n+  assert (values__Float16.f2 == f2);\n+  assert (values__Float16.f3 == f3);\n+  assert (values__Float16.f4 == f4);\n+  assert (values__Float16.f5 == f5);\n+  assert (values__Float16.f6 == f6);\n+  assert (values__Float16.f7 == f7);\n+  assert (values__Float16.f8 == f8);\n+  assert (values__Float16.f9 == f9);\n+  assert (values__Float16.f10 == f10);\n+  assert (values__Float16.f11 == f11);\n+  assert (values__Float16.f12 == f12);\n+  assert (values__Float16.f13 == f13);\n+  assert (values__Float16.f14 == f14);\n+  assert (values__Float16.f15 == f15);\n+  assert (values__Float16.f16 == f16);\n+  assert (values__Float16.f17 == f17);\n+  assert (values__Float16.f18 == f18);\n+  assert (values__Float16.f19 == f19);\n+}\n+\n+void\n+fun_check_float16_passing_20_regs (_Float16 f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f15 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f16 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f17 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f18 ATTRIBUTE_UNUSED,\n+\t\t\t\t   _Float16 f19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_float16_arguments;\n+}\n+\n+void\n+fun_check_float_passing_float8_values (float f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t       float f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t       float f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t       float f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t       float f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t       float f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t       float f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t       float f7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values_float.f0 == f0);\n+  assert (values_float.f1 == f1);\n+  assert (values_float.f2 == f2);\n+  assert (values_float.f3 == f3);\n+  assert (values_float.f4 == f4);\n+  assert (values_float.f5 == f5);\n+  assert (values_float.f6 == f6);\n+  assert (values_float.f7 == f7);\n+\n+}\n+\n+void\n+fun_check_float_passing_float8_regs (float f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t     float f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t     float f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t     float f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t     float f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t     float f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t     float f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t     float f7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_float_arguments;\n+}\n+\n+void\n+fun_check_float_passing_float16_values (float f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f15 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values_float.f0 == f0);\n+  assert (values_float.f1 == f1);\n+  assert (values_float.f2 == f2);\n+  assert (values_float.f3 == f3);\n+  assert (values_float.f4 == f4);\n+  assert (values_float.f5 == f5);\n+  assert (values_float.f6 == f6);\n+  assert (values_float.f7 == f7);\n+  assert (values_float.f8 == f8);\n+  assert (values_float.f9 == f9);\n+  assert (values_float.f10 == f10);\n+  assert (values_float.f11 == f11);\n+  assert (values_float.f12 == f12);\n+  assert (values_float.f13 == f13);\n+  assert (values_float.f14 == f14);\n+  assert (values_float.f15 == f15);\n+\n+}\n+\n+void\n+fun_check_float_passing_float16_regs (float f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f15 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_float_arguments;\n+}\n+\n+void\n+fun_check_float_passing_float20_values (float f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f15 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f16 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f17 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f18 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tfloat f19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values_float.f0 == f0);\n+  assert (values_float.f1 == f1);\n+  assert (values_float.f2 == f2);\n+  assert (values_float.f3 == f3);\n+  assert (values_float.f4 == f4);\n+  assert (values_float.f5 == f5);\n+  assert (values_float.f6 == f6);\n+  assert (values_float.f7 == f7);\n+  assert (values_float.f8 == f8);\n+  assert (values_float.f9 == f9);\n+  assert (values_float.f10 == f10);\n+  assert (values_float.f11 == f11);\n+  assert (values_float.f12 == f12);\n+  assert (values_float.f13 == f13);\n+  assert (values_float.f14 == f14);\n+  assert (values_float.f15 == f15);\n+  assert (values_float.f16 == f16);\n+  assert (values_float.f17 == f17);\n+  assert (values_float.f18 == f18);\n+  assert (values_float.f19 == f19);\n+\n+}\n+\n+void\n+fun_check_float_passing_float20_regs (float f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f15 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f16 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f17 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f18 ATTRIBUTE_UNUSED,\n+\t\t\t\t      float f19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_float_arguments;\n+}\n+\n+void\n+fun_check_float_passing_double8_values (double f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tdouble f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tdouble f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tdouble f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tdouble f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tdouble f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tdouble f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tdouble f7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values_double.f0 == f0);\n+  assert (values_double.f1 == f1);\n+  assert (values_double.f2 == f2);\n+  assert (values_double.f3 == f3);\n+  assert (values_double.f4 == f4);\n+  assert (values_double.f5 == f5);\n+  assert (values_double.f6 == f6);\n+  assert (values_double.f7 == f7);\n+\n+}\n+\n+void\n+fun_check_float_passing_double8_regs (double f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t      double f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t      double f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t      double f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t      double f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t      double f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t      double f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t      double f7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_double_arguments;\n+}\n+\n+void\n+fun_check_float_passing_double16_values (double f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f15 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values_double.f0 == f0);\n+  assert (values_double.f1 == f1);\n+  assert (values_double.f2 == f2);\n+  assert (values_double.f3 == f3);\n+  assert (values_double.f4 == f4);\n+  assert (values_double.f5 == f5);\n+  assert (values_double.f6 == f6);\n+  assert (values_double.f7 == f7);\n+  assert (values_double.f8 == f8);\n+  assert (values_double.f9 == f9);\n+  assert (values_double.f10 == f10);\n+  assert (values_double.f11 == f11);\n+  assert (values_double.f12 == f12);\n+  assert (values_double.f13 == f13);\n+  assert (values_double.f14 == f14);\n+  assert (values_double.f15 == f15);\n+\n+}\n+\n+void\n+fun_check_float_passing_double16_regs (double f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f15 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_double_arguments;\n+}\n+\n+void\n+fun_check_float_passing_double20_values (double f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f15 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f16 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f17 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f18 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t double f19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values_double.f0 == f0);\n+  assert (values_double.f1 == f1);\n+  assert (values_double.f2 == f2);\n+  assert (values_double.f3 == f3);\n+  assert (values_double.f4 == f4);\n+  assert (values_double.f5 == f5);\n+  assert (values_double.f6 == f6);\n+  assert (values_double.f7 == f7);\n+  assert (values_double.f8 == f8);\n+  assert (values_double.f9 == f9);\n+  assert (values_double.f10 == f10);\n+  assert (values_double.f11 == f11);\n+  assert (values_double.f12 == f12);\n+  assert (values_double.f13 == f13);\n+  assert (values_double.f14 == f14);\n+  assert (values_double.f15 == f15);\n+  assert (values_double.f16 == f16);\n+  assert (values_double.f17 == f17);\n+  assert (values_double.f18 == f18);\n+  assert (values_double.f19 == f19);\n+\n+}\n+\n+void\n+fun_check_float_passing_double20_regs (double f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f15 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f16 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f17 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f18 ATTRIBUTE_UNUSED,\n+\t\t\t\t       double f19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_double_arguments;\n+}\n+\n+void\n+fun_check_x87_passing_ldouble8_values (ldouble f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t       ldouble f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t       ldouble f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t       ldouble f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t       ldouble f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t       ldouble f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t       ldouble f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t       ldouble f7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values_ldouble.f0 == f0);\n+  assert (values_ldouble.f1 == f1);\n+  assert (values_ldouble.f2 == f2);\n+  assert (values_ldouble.f3 == f3);\n+  assert (values_ldouble.f4 == f4);\n+  assert (values_ldouble.f5 == f5);\n+  assert (values_ldouble.f6 == f6);\n+  assert (values_ldouble.f7 == f7);\n+\n+}\n+\n+void\n+fun_check_x87_passing_ldouble8_regs (ldouble f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t     ldouble f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t     ldouble f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t     ldouble f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t     ldouble f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t     ldouble f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t     ldouble f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t     ldouble f7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_ldouble_arguments;\n+}\n+\n+void\n+fun_check_x87_passing_ldouble16_values (ldouble f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f15 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values_ldouble.f0 == f0);\n+  assert (values_ldouble.f1 == f1);\n+  assert (values_ldouble.f2 == f2);\n+  assert (values_ldouble.f3 == f3);\n+  assert (values_ldouble.f4 == f4);\n+  assert (values_ldouble.f5 == f5);\n+  assert (values_ldouble.f6 == f6);\n+  assert (values_ldouble.f7 == f7);\n+  assert (values_ldouble.f8 == f8);\n+  assert (values_ldouble.f9 == f9);\n+  assert (values_ldouble.f10 == f10);\n+  assert (values_ldouble.f11 == f11);\n+  assert (values_ldouble.f12 == f12);\n+  assert (values_ldouble.f13 == f13);\n+  assert (values_ldouble.f14 == f14);\n+  assert (values_ldouble.f15 == f15);\n+\n+}\n+\n+void\n+fun_check_x87_passing_ldouble16_regs (ldouble f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f15 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_ldouble_arguments;\n+}\n+\n+void\n+fun_check_x87_passing_ldouble20_values (ldouble f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f15 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f16 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f17 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f18 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tldouble f19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  assert (values_ldouble.f0 == f0);\n+  assert (values_ldouble.f1 == f1);\n+  assert (values_ldouble.f2 == f2);\n+  assert (values_ldouble.f3 == f3);\n+  assert (values_ldouble.f4 == f4);\n+  assert (values_ldouble.f5 == f5);\n+  assert (values_ldouble.f6 == f6);\n+  assert (values_ldouble.f7 == f7);\n+  assert (values_ldouble.f8 == f8);\n+  assert (values_ldouble.f9 == f9);\n+  assert (values_ldouble.f10 == f10);\n+  assert (values_ldouble.f11 == f11);\n+  assert (values_ldouble.f12 == f12);\n+  assert (values_ldouble.f13 == f13);\n+  assert (values_ldouble.f14 == f14);\n+  assert (values_ldouble.f15 == f15);\n+  assert (values_ldouble.f16 == f16);\n+  assert (values_ldouble.f17 == f17);\n+  assert (values_ldouble.f18 == f18);\n+  assert (values_ldouble.f19 == f19);\n+\n+}\n+\n+void\n+fun_check_x87_passing_ldouble20_regs (ldouble f0 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f1 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f2 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f3 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f4 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f5 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f6 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f7 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f8 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f9 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f10 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f11 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f12 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f13 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f14 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f15 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f16 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f17 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f18 ATTRIBUTE_UNUSED,\n+\t\t\t\t      ldouble f19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_ldouble_arguments;\n+}\n+\n+#define def_check_float16_passing8(_f0, _f1, _f2, _f3, _f4, _f5, _f6,\\\n+\t\t\t\t   _f7, _func1, _func2, TYPE) \\\n+  values_ ## TYPE .f0 = _f0; \\\n+  values_ ## TYPE .f1 = _f1; \\\n+  values_ ## TYPE .f2 = _f2; \\\n+  values_ ## TYPE .f3 = _f3; \\\n+  values_ ## TYPE .f4 = _f4; \\\n+  values_ ## TYPE .f5 = _f5; \\\n+  values_ ## TYPE .f6 = _f6; \\\n+  values_ ## TYPE .f7 = _f7; \\\n+  WRAP_CALL(_func1) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7); \\\n+  clear_float_registers; \\\n+  fregs.F0._ ## TYPE [0] = _f0; \\\n+  fregs.F1._ ## TYPE [0] = _f1; \\\n+  fregs.F2._ ## TYPE [0] = _f2; \\\n+  fregs.F3._ ## TYPE [0] = _f3; \\\n+  fregs.F4._ ## TYPE [0] = _f4; \\\n+  fregs.F5._ ## TYPE [0] = _f5; \\\n+  fregs.F6._ ## TYPE [0] = _f6; \\\n+  fregs.F7._ ## TYPE [0] = _f7; \\\n+  num_fregs = 8; \\\n+  WRAP_CALL(_func2) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7);\n+\n+#define def_check_float16_passing16(_f0, _f1, _f2, _f3, _f4, _f5, _f6, \\\n+\t\t\t\t    _f7, _f8, _f9, _f10, _f11, _f12, _f13, \\\n+\t\t\t\t    _f14, _f15, _func1, _func2, TYPE) \\\n+  values_ ## TYPE .f0 = _f0; \\\n+  values_ ## TYPE .f1 = _f1; \\\n+  values_ ## TYPE .f2 = _f2; \\\n+  values_ ## TYPE .f3 = _f3; \\\n+  values_ ## TYPE .f4 = _f4; \\\n+  values_ ## TYPE .f5 = _f5; \\\n+  values_ ## TYPE .f6 = _f6; \\\n+  values_ ## TYPE .f7 = _f7; \\\n+  values_ ## TYPE .f8 = _f8; \\\n+  values_ ## TYPE .f9 = _f9; \\\n+  values_ ## TYPE .f10 = _f10; \\\n+  values_ ## TYPE .f11 = _f11; \\\n+  values_ ## TYPE .f12 = _f12; \\\n+  values_ ## TYPE .f13 = _f13; \\\n+  values_ ## TYPE .f14 = _f14; \\\n+  values_ ## TYPE .f15 = _f15; \\\n+  WRAP_CALL(_func1) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, \\\n+\t\t     _f10, _f11, _f12, _f13, _f14, _f15); \\\n+  clear_float_registers; \\\n+  fregs.F0._ ## TYPE [0] = _f0; \\\n+  fregs.F1._ ## TYPE [0] = _f1; \\\n+  fregs.F2._ ## TYPE [0] = _f2; \\\n+  fregs.F3._ ## TYPE [0] = _f3; \\\n+  fregs.F4._ ## TYPE [0] = _f4; \\\n+  fregs.F5._ ## TYPE [0] = _f5; \\\n+  fregs.F6._ ## TYPE [0] = _f6; \\\n+  fregs.F7._ ## TYPE [0] = _f7; \\\n+  num_fregs = 8; \\\n+  WRAP_CALL(_func2) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, \\\n+\t\t     _f10, _f11, _f12, _f13, _f14, _f15);\n+\n+#define def_check_float16_passing20(_f0, _f1, _f2, _f3, _f4, _f5, _f6, \\\n+\t\t\t\t    _f7, _f8, _f9, _f10, _f11, _f12, \\\n+\t\t\t\t    _f13, _f14, _f15, _f16, _f17, \\\n+\t\t\t\t    _f18, _f19, _func1, _func2, TYPE) \\\n+  values_ ## TYPE .f0 = _f0; \\\n+  values_ ## TYPE .f1 = _f1; \\\n+  values_ ## TYPE .f2 = _f2; \\\n+  values_ ## TYPE .f3 = _f3; \\\n+  values_ ## TYPE .f4 = _f4; \\\n+  values_ ## TYPE .f5 = _f5; \\\n+  values_ ## TYPE .f6 = _f6; \\\n+  values_ ## TYPE .f7 = _f7; \\\n+  values_ ## TYPE .f8 = _f8; \\\n+  values_ ## TYPE .f9 = _f9; \\\n+  values_ ## TYPE .f10 = _f10; \\\n+  values_ ## TYPE .f11 = _f11; \\\n+  values_ ## TYPE .f12 = _f12; \\\n+  values_ ## TYPE .f13 = _f13; \\\n+  values_ ## TYPE .f14 = _f14; \\\n+  values_ ## TYPE .f15 = _f15; \\\n+  values_ ## TYPE .f16 = _f16; \\\n+  values_ ## TYPE .f17 = _f17; \\\n+  values_ ## TYPE .f18 = _f18; \\\n+  values_ ## TYPE .f19 = _f19; \\\n+  WRAP_CALL(_func1) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, \\\n+\t\t     _f9, _f10, _f11, _f12, _f13, _f14, _f15, _f16, \\\n+\t\t     _f17, _f18, _f19); \\\n+  clear_float_registers; \\\n+  fregs.F0._ ## TYPE [0] = _f0; \\\n+  fregs.F1._ ## TYPE [0] = _f1; \\\n+  fregs.F2._ ## TYPE [0] = _f2; \\\n+  fregs.F3._ ## TYPE [0] = _f3; \\\n+  fregs.F4._ ## TYPE [0] = _f4; \\\n+  fregs.F5._ ## TYPE [0] = _f5; \\\n+  fregs.F6._ ## TYPE [0] = _f6; \\\n+  fregs.F7._ ## TYPE [0] = _f7; \\\n+  num_fregs = 8; \\\n+  WRAP_CALL(_func2) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, \\\n+\t\t     _f10, _f11, _f12, _f13, _f14, _f15, _f16, _f17, \\\n+\t\t     _f18, _f19);\n+\n+\n+#define def_check_float_passing8(_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _func1, _func2, TYPE) \\\n+  values_ ## TYPE .f0 = _f0; \\\n+  values_ ## TYPE .f1 = _f1; \\\n+  values_ ## TYPE .f2 = _f2; \\\n+  values_ ## TYPE .f3 = _f3; \\\n+  values_ ## TYPE .f4 = _f4; \\\n+  values_ ## TYPE .f5 = _f5; \\\n+  values_ ## TYPE .f6 = _f6; \\\n+  values_ ## TYPE .f7 = _f7; \\\n+  WRAP_CALL(_func1) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7); \\\n+  \\\n+  clear_float_registers; \\\n+  fregs.F0._ ## TYPE [0] = _f0; \\\n+  fregs.F1._ ## TYPE [0] = _f1; \\\n+  fregs.F2._ ## TYPE [0] = _f2; \\\n+  fregs.F3._ ## TYPE [0] = _f3; \\\n+  fregs.F4._ ## TYPE [0] = _f4; \\\n+  fregs.F5._ ## TYPE [0] = _f5; \\\n+  fregs.F6._ ## TYPE [0] = _f6; \\\n+  fregs.F7._ ## TYPE [0] = _f7; \\\n+  num_fregs = 8; \\\n+  WRAP_CALL(_func2) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7);\n+\n+#define def_check_float_passing16(_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15, _func1, _func2, TYPE) \\\n+  values_ ## TYPE .f0 = _f0; \\\n+  values_ ## TYPE .f1 = _f1; \\\n+  values_ ## TYPE .f2 = _f2; \\\n+  values_ ## TYPE .f3 = _f3; \\\n+  values_ ## TYPE .f4 = _f4; \\\n+  values_ ## TYPE .f5 = _f5; \\\n+  values_ ## TYPE .f6 = _f6; \\\n+  values_ ## TYPE .f7 = _f7; \\\n+  values_ ## TYPE .f8 = _f8; \\\n+  values_ ## TYPE .f9 = _f9; \\\n+  values_ ## TYPE .f10 = _f10; \\\n+  values_ ## TYPE .f11 = _f11; \\\n+  values_ ## TYPE .f12 = _f12; \\\n+  values_ ## TYPE .f13 = _f13; \\\n+  values_ ## TYPE .f14 = _f14; \\\n+  values_ ## TYPE .f15 = _f15; \\\n+  WRAP_CALL(_func1) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15); \\\n+  \\\n+  clear_float_registers; \\\n+  fregs.F0._ ## TYPE [0] = _f0; \\\n+  fregs.F1._ ## TYPE [0] = _f1; \\\n+  fregs.F2._ ## TYPE [0] = _f2; \\\n+  fregs.F3._ ## TYPE [0] = _f3; \\\n+  fregs.F4._ ## TYPE [0] = _f4; \\\n+  fregs.F5._ ## TYPE [0] = _f5; \\\n+  fregs.F6._ ## TYPE [0] = _f6; \\\n+  fregs.F7._ ## TYPE [0] = _f7; \\\n+  num_fregs = 8; \\\n+  WRAP_CALL(_func2) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15);\n+\n+#define def_check_float_passing20(_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15, _f16, _f17, _f18, _f19, _func1, _func2, TYPE) \\\n+  values_ ## TYPE .f0 = _f0; \\\n+  values_ ## TYPE .f1 = _f1; \\\n+  values_ ## TYPE .f2 = _f2; \\\n+  values_ ## TYPE .f3 = _f3; \\\n+  values_ ## TYPE .f4 = _f4; \\\n+  values_ ## TYPE .f5 = _f5; \\\n+  values_ ## TYPE .f6 = _f6; \\\n+  values_ ## TYPE .f7 = _f7; \\\n+  values_ ## TYPE .f8 = _f8; \\\n+  values_ ## TYPE .f9 = _f9; \\\n+  values_ ## TYPE .f10 = _f10; \\\n+  values_ ## TYPE .f11 = _f11; \\\n+  values_ ## TYPE .f12 = _f12; \\\n+  values_ ## TYPE .f13 = _f13; \\\n+  values_ ## TYPE .f14 = _f14; \\\n+  values_ ## TYPE .f15 = _f15; \\\n+  values_ ## TYPE .f16 = _f16; \\\n+  values_ ## TYPE .f17 = _f17; \\\n+  values_ ## TYPE .f18 = _f18; \\\n+  values_ ## TYPE .f19 = _f19; \\\n+  WRAP_CALL(_func1) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15, _f16, _f17, _f18, _f19); \\\n+  \\\n+  clear_float_registers; \\\n+  fregs.F0._ ## TYPE [0] = _f0; \\\n+  fregs.F1._ ## TYPE [0] = _f1; \\\n+  fregs.F2._ ## TYPE [0] = _f2; \\\n+  fregs.F3._ ## TYPE [0] = _f3; \\\n+  fregs.F4._ ## TYPE [0] = _f4; \\\n+  fregs.F5._ ## TYPE [0] = _f5; \\\n+  fregs.F6._ ## TYPE [0] = _f6; \\\n+  fregs.F7._ ## TYPE [0] = _f7; \\\n+  num_fregs = 8; \\\n+  WRAP_CALL(_func2) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15, _f16, _f17, _f18, _f19);\n+\n+#define def_check_x87_passing8(_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _func1, _func2, TYPE) \\\n+  values_ ## TYPE .f0 = _f0; \\\n+  values_ ## TYPE .f1 = _f1; \\\n+  values_ ## TYPE .f2 = _f2; \\\n+  values_ ## TYPE .f3 = _f3; \\\n+  values_ ## TYPE .f4 = _f4; \\\n+  values_ ## TYPE .f5 = _f5; \\\n+  values_ ## TYPE .f6 = _f6; \\\n+  values_ ## TYPE .f7 = _f7; \\\n+  WRAP_CALL(_func1) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7); \\\n+  \\\n+  clear_x87_registers; \\\n+  num_fregs = 0; \\\n+  WRAP_CALL(_func2) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7);\n+\n+#define def_check_x87_passing16(_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15, _func1, _func2, TYPE) \\\n+  values_ ## TYPE .f0 = _f0; \\\n+  values_ ## TYPE .f1 = _f1; \\\n+  values_ ## TYPE .f2 = _f2; \\\n+  values_ ## TYPE .f3 = _f3; \\\n+  values_ ## TYPE .f4 = _f4; \\\n+  values_ ## TYPE .f5 = _f5; \\\n+  values_ ## TYPE .f6 = _f6; \\\n+  values_ ## TYPE .f7 = _f7; \\\n+  values_ ## TYPE .f8 = _f8; \\\n+  values_ ## TYPE .f9 = _f9; \\\n+  values_ ## TYPE .f10 = _f10; \\\n+  values_ ## TYPE .f11 = _f11; \\\n+  values_ ## TYPE .f12 = _f12; \\\n+  values_ ## TYPE .f13 = _f13; \\\n+  values_ ## TYPE .f14 = _f14; \\\n+  values_ ## TYPE .f15 = _f15; \\\n+  WRAP_CALL(_func1) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15); \\\n+  \\\n+  clear_x87_registers; \\\n+  num_fregs = 0; \\\n+  WRAP_CALL(_func2) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15);\n+\n+#define def_check_x87_passing20(_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15, _f16, _f17, _f18, _f19, _func1, _func2, TYPE) \\\n+  values_ ## TYPE .f0 = _f0; \\\n+  values_ ## TYPE .f1 = _f1; \\\n+  values_ ## TYPE .f2 = _f2; \\\n+  values_ ## TYPE .f3 = _f3; \\\n+  values_ ## TYPE .f4 = _f4; \\\n+  values_ ## TYPE .f5 = _f5; \\\n+  values_ ## TYPE .f6 = _f6; \\\n+  values_ ## TYPE .f7 = _f7; \\\n+  values_ ## TYPE .f8 = _f8; \\\n+  values_ ## TYPE .f9 = _f9; \\\n+  values_ ## TYPE .f10 = _f10; \\\n+  values_ ## TYPE .f11 = _f11; \\\n+  values_ ## TYPE .f12 = _f12; \\\n+  values_ ## TYPE .f13 = _f13; \\\n+  values_ ## TYPE .f14 = _f14; \\\n+  values_ ## TYPE .f15 = _f15; \\\n+  values_ ## TYPE .f16 = _f16; \\\n+  values_ ## TYPE .f17 = _f17; \\\n+  values_ ## TYPE .f18 = _f18; \\\n+  values_ ## TYPE .f19 = _f19; \\\n+  WRAP_CALL(_func1) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15, _f16, _f17, _f18, _f19); \\\n+  \\\n+  clear_x87_registers; \\\n+  num_fregs = 0; \\\n+  WRAP_CALL(_func2) (_f0, _f1, _f2, _f3, _f4, _f5, _f6, _f7, _f8, _f9, _f10, _f11, _f12, _f13, _f14, _f15, _f16, _f17, _f18, _f19);\n+\n+void\n+test_float16_on_stack ()\n+{\n+  def_check_float16_passing8 (32, 33, 34, 35, 36, 37, 38, 39,\n+\t\t\t      fun_check_float16_passing_8_values,\n+\t\t\t      fun_check_float16_passing_8_regs, _Float16);\n+\n+  def_check_float16_passing16 (32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n+\t\t\t       44, 45, 46, 47,\n+\t\t\t       fun_check_float16_passing_16_values,\n+\t\t\t       fun_check_float16_passing_16_regs, _Float16);\n+}\n+\n+void\n+test_too_many_float16 ()\n+{\n+  def_check_float16_passing20 (32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n+\t\t\t       44, 45, 46, 47, 48, 49, 50, 51,\n+\t\t\t       fun_check_float16_passing_20_values,\n+\t\t\t       fun_check_float16_passing_20_regs, _Float16);\n+}\n+\n+void\n+test_floats_on_stack ()\n+{\n+  def_check_float_passing8 (32, 33, 34, 35, 36, 37, 38, 39,\n+\t\t\t    fun_check_float_passing_float8_values,\n+\t\t\t    fun_check_float_passing_float8_regs, float);\n+\n+  def_check_float_passing16 (32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n+\t\t\t     44, 45, 46, 47,\n+\t\t\t     fun_check_float_passing_float16_values,\n+\t\t\t     fun_check_float_passing_float16_regs, float);\n+}\n+\n+void\n+test_too_many_floats ()\n+{\n+  def_check_float_passing20 (32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n+\t\t\t     44, 45, 46, 47, 48, 49, 50, 51,\n+\t\t\t     fun_check_float_passing_float20_values,\n+\t\t\t     fun_check_float_passing_float20_regs, float);\n+}\n+\n+void\n+test_doubles_on_stack ()\n+{\n+  def_check_float_passing8 (32, 33, 34, 35, 36, 37, 38, 39,\n+\t\t\t    fun_check_float_passing_double8_values,\n+\t\t\t    fun_check_float_passing_double8_regs, double);\n+\n+  def_check_float_passing16 (32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n+\t\t\t     44, 45, 46, 47,\n+\t\t\t     fun_check_float_passing_double16_values,\n+\t\t\t     fun_check_float_passing_double16_regs, double);\n+}\n+\n+void\n+test_too_many_doubles ()\n+{\n+  def_check_float_passing20 (32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n+\t\t\t     44, 45, 46, 47, 48, 49, 50, 51,\n+\t\t\t     fun_check_float_passing_double20_values,\n+\t\t\t     fun_check_float_passing_double20_regs, double);\n+}\n+\n+void\n+test_long_doubles_on_stack ()\n+{\n+  def_check_x87_passing8 (32, 33, 34, 35, 36, 37, 38, 39,\n+\t\t\t  fun_check_x87_passing_ldouble8_values,\n+\t\t\t  fun_check_x87_passing_ldouble8_regs, ldouble);\n+}\n+\n+void\n+test_too_many_long_doubles ()\n+{\n+  def_check_x87_passing20 (32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n+\t\t\t   45, 46, 47, 48, 49, 50, 51,\n+\t\t\t   fun_check_x87_passing_ldouble20_values,\n+\t\t\t   fun_check_x87_passing_ldouble20_regs, ldouble);\n+}\n+\n+void\n+test_float128s_on_stack ()\n+{\n+}\n+\n+void\n+test_too_many_float128s ()\n+{\n+}\n+\n+\n+static void\n+do_test (void)\n+{\n+  test_float16_on_stack ();\n+  test_too_many_float16 ();\n+  test_floats_on_stack ();\n+  test_too_many_floats ();\n+  test_doubles_on_stack ();\n+  test_too_many_doubles ();\n+  test_long_doubles_on_stack ();\n+  test_too_many_long_doubles ();\n+  test_float128s_on_stack ();\n+  test_too_many_float128s ();\n+}"}, {"sha": "66c27aef7affb8254a89422d0a0d2b06b14db230", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_passing_m64m128.c", "status": "added", "additions": 510, "deletions": 0, "changes": 510, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_m64m128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_m64m128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_m64m128.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,510 @@\n+#include <stdio.h>\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+#include \"macros.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+unsigned int num_iregs, num_fregs;\n+\n+/* This struct holds values for argument checking.  */\n+struct\n+{\n+  XMM_T i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15,\n+    i16, i17, i18, i19, i20, i21, i22, i23;\n+} values;\n+\n+char *pass;\n+int failed = 0;\n+\n+#undef assert\n+#define assert(c) do { \\\n+  if (!(c)) {failed++; printf (\"failed %s\\n\", pass); } \\\n+} while (0)\n+\n+#define compare(X1,X2,T) do { \\\n+  assert (memcmp (&X1, &X2, sizeof (T)) == 0); \\\n+} while (0)\n+\n+void\n+fun_check_passing_m64_8_values (__m64 i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m64 i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m64 i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m64 i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m64 i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m64 i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m64 i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m64 i7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  compare (values.i0, i0, __m64);\n+  compare (values.i1, i1, __m64);\n+  compare (values.i2, i2, __m64);\n+  compare (values.i3, i3, __m64);\n+  compare (values.i4, i4, __m64);\n+  compare (values.i5, i5, __m64);\n+  compare (values.i6, i6, __m64);\n+  compare (values.i7, i7, __m64);\n+}\n+\n+void\n+fun_check_passing_m64_8_regs (__m64 i0 ATTRIBUTE_UNUSED,\n+\t\t\t      __m64 i1 ATTRIBUTE_UNUSED,\n+\t\t\t      __m64 i2 ATTRIBUTE_UNUSED,\n+\t\t\t      __m64 i3 ATTRIBUTE_UNUSED,\n+\t\t\t      __m64 i4 ATTRIBUTE_UNUSED,\n+\t\t\t      __m64 i5 ATTRIBUTE_UNUSED,\n+\t\t\t      __m64 i6 ATTRIBUTE_UNUSED,\n+\t\t\t      __m64 i7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m64_arguments;\n+}\n+\n+void\n+fun_check_passing_m64_20_values (__m64 i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i7 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i8 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i9 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i10 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i11 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i12 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i13 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i14 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i15 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i16 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i17 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i18 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m64 i19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  compare (values.i0, i0, __m64);\n+  compare (values.i1, i1, __m64);\n+  compare (values.i2, i2, __m64);\n+  compare (values.i3, i3, __m64);\n+  compare (values.i4, i4, __m64);\n+  compare (values.i5, i5, __m64);\n+  compare (values.i6, i6, __m64);\n+  compare (values.i7, i7, __m64);\n+  compare (values.i8, i8, __m64);\n+  compare (values.i9, i9, __m64);\n+  compare (values.i10, i10, __m64);\n+  compare (values.i11, i11, __m64);\n+  compare (values.i12, i12, __m64);\n+  compare (values.i13, i13, __m64);\n+  compare (values.i14, i14, __m64);\n+  compare (values.i15, i15, __m64);\n+  compare (values.i16, i16, __m64);\n+  compare (values.i17, i17, __m64);\n+  compare (values.i18, i18, __m64);\n+  compare (values.i19, i19, __m64);\n+}\n+\n+void\n+fun_check_passing_m64_20_regs (__m64 i0 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i1 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i2 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i3 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i4 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i5 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i6 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i7 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i8 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i9 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i10 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i11 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i12 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i13 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i14 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i15 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i16 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i17 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i18 ATTRIBUTE_UNUSED,\n+\t\t\t       __m64 i19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m64_arguments;\n+}\n+\n+void\n+fun_check_passing_m128_8_values (__m128 i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128 i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128 i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128 i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128 i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128 i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128 i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128 i7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  compare (values.i0, i0, __m128);\n+  compare (values.i1, i1, __m128);\n+  compare (values.i2, i2, __m128);\n+  compare (values.i3, i3, __m128);\n+  compare (values.i4, i4, __m128);\n+  compare (values.i5, i5, __m128);\n+  compare (values.i6, i6, __m128);\n+  compare (values.i7, i7, __m128);\n+}\n+\n+void\n+fun_check_passing_m128h_8_values (__m128h i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128h i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128h i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128h i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128h i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128h i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128h i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128h i7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  compare (values.i0, i0, __m128h);\n+  compare (values.i1, i1, __m128h);\n+  compare (values.i2, i2, __m128h);\n+  compare (values.i3, i3, __m128h);\n+  compare (values.i4, i4, __m128h);\n+  compare (values.i5, i5, __m128h);\n+  compare (values.i6, i6, __m128h);\n+  compare (values.i7, i7, __m128h);\n+}\n+\n+void\n+fun_check_passing_m128_8_regs (__m128 i0 ATTRIBUTE_UNUSED,\n+\t\t\t       __m128 i1 ATTRIBUTE_UNUSED,\n+\t\t\t       __m128 i2 ATTRIBUTE_UNUSED,\n+\t\t\t       __m128 i3 ATTRIBUTE_UNUSED,\n+\t\t\t       __m128 i4 ATTRIBUTE_UNUSED,\n+\t\t\t       __m128 i5 ATTRIBUTE_UNUSED,\n+\t\t\t       __m128 i6 ATTRIBUTE_UNUSED,\n+\t\t\t       __m128 i7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m128_arguments;\n+}\n+\n+void\n+fun_check_passing_m128h_8_regs (__m128h i0 ATTRIBUTE_UNUSED,\n+\t\t\t        __m128h i1 ATTRIBUTE_UNUSED,\n+\t\t\t        __m128h i2 ATTRIBUTE_UNUSED,\n+\t\t\t        __m128h i3 ATTRIBUTE_UNUSED,\n+\t\t\t        __m128h i4 ATTRIBUTE_UNUSED,\n+\t\t\t        __m128h i5 ATTRIBUTE_UNUSED,\n+\t\t\t        __m128h i6 ATTRIBUTE_UNUSED,\n+\t\t\t        __m128h i7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m128_arguments;\n+}\n+\n+void\n+fun_check_passing_m128_20_values (__m128 i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i7 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i8 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i9 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i10 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i11 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i12 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i13 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i14 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i15 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i16 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i17 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i18 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m128 i19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  compare (values.i0, i0, __m128);\n+  compare (values.i1, i1, __m128);\n+  compare (values.i2, i2, __m128);\n+  compare (values.i3, i3, __m128);\n+  compare (values.i4, i4, __m128);\n+  compare (values.i5, i5, __m128);\n+  compare (values.i6, i6, __m128);\n+  compare (values.i7, i7, __m128);\n+  compare (values.i8, i8, __m128);\n+  compare (values.i9, i9, __m128);\n+  compare (values.i10, i10, __m128);\n+  compare (values.i11, i11, __m128);\n+  compare (values.i12, i12, __m128);\n+  compare (values.i13, i13, __m128);\n+  compare (values.i14, i14, __m128);\n+  compare (values.i15, i15, __m128);\n+  compare (values.i16, i16, __m128);\n+  compare (values.i17, i17, __m128);\n+  compare (values.i18, i18, __m128);\n+  compare (values.i19, i19, __m128);\n+}\n+\n+void\n+fun_check_passing_m128h_20_values (__m128h i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i7 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i8 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i9 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i10 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i11 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i12 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i13 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i14 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i15 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i16 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i17 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i18 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m128h i19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  compare (values.i0, i0, __m128h);\n+  compare (values.i1, i1, __m128h);\n+  compare (values.i2, i2, __m128h);\n+  compare (values.i3, i3, __m128h);\n+  compare (values.i4, i4, __m128h);\n+  compare (values.i5, i5, __m128h);\n+  compare (values.i6, i6, __m128h);\n+  compare (values.i7, i7, __m128h);\n+  compare (values.i8, i8, __m128h);\n+  compare (values.i9, i9, __m128h);\n+  compare (values.i10, i10, __m128h);\n+  compare (values.i11, i11, __m128h);\n+  compare (values.i12, i12, __m128h);\n+  compare (values.i13, i13, __m128h);\n+  compare (values.i14, i14, __m128h);\n+  compare (values.i15, i15, __m128h);\n+  compare (values.i16, i16, __m128h);\n+  compare (values.i17, i17, __m128h);\n+  compare (values.i18, i18, __m128h);\n+  compare (values.i19, i19, __m128h);\n+}\n+\n+void\n+fun_check_passing_m128_20_regs (__m128 i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i7 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i8 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i9 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i10 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i11 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i12 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i13 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i14 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i15 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i16 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i17 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i18 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m128 i19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m128_arguments;\n+}\n+\n+void\n+fun_check_passing_m128h_20_regs (__m128h i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i7 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i8 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i9 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i10 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i11 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i12 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i13 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i14 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i15 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i16 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i17 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i18 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m128h i19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m128_arguments;\n+}\n+\n+#define def_check_int_passing8(_i0, _i1, _i2, _i3, \\\n+\t\t\t       _i4, _i5, _i6, _i7, \\\n+\t\t\t       _func1, _func2, TYPE) \\\n+  values.i0.TYPE[0] = _i0; \\\n+  values.i1.TYPE[0] = _i1; \\\n+  values.i2.TYPE[0] = _i2; \\\n+  values.i3.TYPE[0] = _i3; \\\n+  values.i4.TYPE[0] = _i4; \\\n+  values.i5.TYPE[0] = _i5; \\\n+  values.i6.TYPE[0] = _i6; \\\n+  values.i7.TYPE[0] = _i7; \\\n+  WRAP_CALL(_func1) (_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7); \\\n+  clear_float_registers; \\\n+  fregs.F0.TYPE[0] = _i0; \\\n+  fregs.F1.TYPE[0] = _i1; \\\n+  fregs.F2.TYPE[0] = _i2; \\\n+  fregs.F3.TYPE[0] = _i3; \\\n+  fregs.F4.TYPE[0] = _i4; \\\n+  fregs.F5.TYPE[0] = _i5; \\\n+  fregs.F6.TYPE[0] = _i6; \\\n+  fregs.F7.TYPE[0] = _i7; \\\n+  num_fregs = 8; \\\n+  WRAP_CALL(_func2) (_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7);\n+\n+#define def_check_int_passing20(_i0, _i1, _i2, _i3, _i4, _i5, _i6, \\\n+\t\t\t\t_i7, _i8, _i9, _i10, _i11, _i12, _i13, \\\n+\t\t\t\t_i14, _i15, _i16, _i17, _i18, _i19, \\\n+\t\t\t\t_func1, _func2, TYPE) \\\n+  values.i0.TYPE[0] = _i0; \\\n+  values.i1.TYPE[0] = _i1; \\\n+  values.i2.TYPE[0] = _i2; \\\n+  values.i3.TYPE[0] = _i3; \\\n+  values.i4.TYPE[0] = _i4; \\\n+  values.i5.TYPE[0] = _i5; \\\n+  values.i6.TYPE[0] = _i6; \\\n+  values.i7.TYPE[0] = _i7; \\\n+  values.i8.TYPE[0] = _i8; \\\n+  values.i9.TYPE[0] = _i9; \\\n+  values.i10.TYPE[0] = _i10; \\\n+  values.i11.TYPE[0] = _i11; \\\n+  values.i12.TYPE[0] = _i12; \\\n+  values.i13.TYPE[0] = _i13; \\\n+  values.i14.TYPE[0] = _i14; \\\n+  values.i15.TYPE[0] = _i15; \\\n+  values.i16.TYPE[0] = _i16; \\\n+  values.i17.TYPE[0] = _i17; \\\n+  values.i18.TYPE[0] = _i18; \\\n+  values.i19.TYPE[0] = _i19; \\\n+  WRAP_CALL(_func1) (_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7, _i8, \\\n+\t\t     _i9, _i10, _i11, _i12, _i13, _i14, _i15, _i16, \\\n+\t\t     _i17, _i18, _i19); \\\n+  clear_float_registers; \\\n+  fregs.F0.TYPE[0] = _i0; \\\n+  fregs.F1.TYPE[0] = _i1; \\\n+  fregs.F2.TYPE[0] = _i2; \\\n+  fregs.F3.TYPE[0] = _i3; \\\n+  fregs.F4.TYPE[0] = _i4; \\\n+  fregs.F5.TYPE[0] = _i5; \\\n+  fregs.F6.TYPE[0] = _i6; \\\n+  fregs.F7.TYPE[0] = _i7; \\\n+  num_fregs = 8; \\\n+  WRAP_CALL(_func2) (_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7, _i8, \\\n+\t\t     _i9, _i10, _i11, _i12, _i13, _i14, _i15, _i16, \\\n+\t\t     _i17, _i18, _i19);\n+\n+void\n+test_m64_on_stack ()\n+{\n+  __m64 x[8];\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    x[i] = (__m64){32 + i, 0};\n+  pass = \"m64-8\";\n+  def_check_int_passing8 (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+\t\t\t  fun_check_passing_m64_8_values,\n+\t\t\t  fun_check_passing_m64_8_regs, _m64);\n+}\n+\n+void\n+test_too_many_m64 ()\n+{\n+  __m64 x[20];\n+  int i;\n+  for (i = 0; i < 20; i++)\n+    x[i] = (__m64){32 + i, 0};\n+  pass = \"m64-20\";\n+  def_check_int_passing20 (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+\t\t\t   x[8], x[9], x[10], x[11], x[12], x[13], x[14],\n+\t\t\t   x[15], x[16], x[17], x[18], x[19],\n+\t\t\t   fun_check_passing_m64_20_values,\n+\t\t\t   fun_check_passing_m64_20_regs, _m64);\n+}\n+\n+void\n+test_m128_on_stack ()\n+{\n+  __m128 x[8];\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    x[i] = (__m128){32 + i, 0, 0, 0};\n+  pass = \"m128-8\";\n+  def_check_int_passing8 (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+\t\t\t  fun_check_passing_m128_8_values,\n+\t\t\t  fun_check_passing_m128_8_regs, _m128);\n+}\n+\n+void\n+test_m128h_on_stack ()\n+{\n+  __m128h x[8];\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    x[i] = (__m128h){1.1f16, 2.2f16, 3.3f16, 4.4f16, 5.5f16,\n+\t             6.6f16, 7.7f16, 8.8f16};\n+  pass = \"m128h-8\";\n+  def_check_int_passing8 (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+\t\t\t  fun_check_passing_m128h_8_values,\n+\t\t\t  fun_check_passing_m128h_8_regs, _m128h);\n+}\n+\n+void\n+test_too_many_m128 ()\n+{\n+  __m128 x[20];\n+  int i;\n+  for (i = 0; i < 20; i++)\n+    x[i] = (__m128){32 + i, 0, 0, 0};\n+  pass = \"m128-20\";\n+  def_check_int_passing20 (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+\t\t\t   x[8], x[9], x[10], x[11], x[12], x[13], x[14],\n+\t\t\t   x[15], x[16], x[17], x[18], x[19],\n+\t\t\t   fun_check_passing_m128_20_values,\n+\t\t\t   fun_check_passing_m128_20_regs, _m128);\n+}\n+\n+void\n+test_too_many_m128h ()\n+{\n+  __m128h x[20];\n+  int i;\n+  for (i = 0; i < 20; i++)\n+    x[i] = (__m128h){1.1f16, 2.2f16, 3.3f16, 4.4f16, 5.5f16,\n+\t             6.6f16, 7.7f16, 8.8f16};\n+  pass = \"m128h-20\";\n+  def_check_int_passing20 (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+\t\t\t   x[8], x[9], x[10], x[11], x[12], x[13], x[14],\n+\t\t\t   x[15], x[16], x[17], x[18], x[19],\n+\t\t\t   fun_check_passing_m128h_20_values,\n+\t\t\t   fun_check_passing_m128h_20_regs, _m128h);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  test_m64_on_stack ();\n+  test_too_many_m64 ();\n+  test_m128_on_stack ();\n+  test_too_many_m128 ();\n+  test_m128h_on_stack ();\n+  test_too_many_m128h ();\n+  if (failed)\n+    abort ();\n+}"}, {"sha": "4d1956a846d307d5c0b2c9068501a25f5981e57b", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_passing_structs.c", "status": "added", "additions": 332, "deletions": 0, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_structs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_structs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_structs.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,332 @@\n+/* This tests passing of structs. */\n+\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+#include \"args.h\"\n+#include <complex.h>\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+unsigned int num_iregs, num_fregs;\n+\n+struct int_struct\n+{\n+  int i;\n+};\n+\n+struct long_struct\n+{\n+  long long l;\n+};\n+\n+struct long2_struct\n+{\n+  long long l1, l2;\n+};\n+\n+struct long3_struct\n+{\n+  long long l1, l2, l3;\n+};\n+\n+\n+/* Check that the struct is passed as the individual members in iregs.  */\n+void\n+check_struct_passing1 (struct int_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+void\n+check_struct_passing2 (struct long_struct ls ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+void\n+check_struct_passing3 (struct long2_struct ls ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+void\n+check_struct_passing4 (struct long3_struct ls ATTRIBUTE_UNUSED)\n+{\n+  /* Check the passing on the stack by comparing the address of the\n+     stack elements to the expected place on the stack.  */\n+  assert ((unsigned long)&ls.l1 == rsp+8);\n+  assert ((unsigned long)&ls.l2 == rsp+16);\n+  assert ((unsigned long)&ls.l3 == rsp+24);\n+}\n+\n+#ifdef CHECK_M64_M128\n+struct m128_struct\n+{\n+  __m128 x;\n+};\n+\n+struct m128_2_struct\n+{\n+  __m128 x1, x2;\n+};\n+\n+/* Check that the struct is passed as the individual members in fregs.  */\n+void\n+check_struct_passing5 (struct m128_struct ms1 ATTRIBUTE_UNUSED,\n+\t\t       struct m128_struct ms2 ATTRIBUTE_UNUSED,\n+\t\t       struct m128_struct ms3 ATTRIBUTE_UNUSED,\n+\t\t       struct m128_struct ms4 ATTRIBUTE_UNUSED,\n+\t\t       struct m128_struct ms5 ATTRIBUTE_UNUSED,\n+\t\t       struct m128_struct ms6 ATTRIBUTE_UNUSED,\n+\t\t       struct m128_struct ms7 ATTRIBUTE_UNUSED,\n+\t\t       struct m128_struct ms8 ATTRIBUTE_UNUSED)\n+{\n+  check_m128_arguments;\n+}\n+\n+void\n+check_struct_passing6 (struct m128_2_struct ms ATTRIBUTE_UNUSED)\n+{\n+  /* Check the passing on the stack by comparing the address of the\n+     stack elements to the expected place on the stack.  */\n+  assert ((unsigned long)&ms.x1 == rsp+8);\n+  assert ((unsigned long)&ms.x2 == rsp+24);\n+}\n+#endif\n+\n+struct flex1_struct\n+{\n+  long long i;\n+  long long flex[];\n+};\n+\n+struct flex2_struct\n+{\n+  long long i;\n+  long long flex[0];\n+};\n+\n+void\n+check_struct_passing7 (struct flex1_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+void\n+check_struct_passing8 (struct flex2_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+struct complex1_struct\n+{\n+  int c;\n+  __complex__ float x;\n+};\n+\n+struct complex1a_struct\n+{\n+  long long l;\n+  float f;\n+};\n+\n+struct complex2_struct\n+{\n+  int c;\n+  __complex__ float x;\n+  float y;\n+};\n+\n+struct complex2a_struct\n+{\n+  long long l;\n+  double d;\n+};\n+\n+struct complex3_struct\n+{\n+  int c;\n+  __complex__ _Float16 x;\n+};\n+\n+struct complex3a_struct\n+{\n+  long long l;\n+  _Float16 f;\n+};\n+\n+struct complex4_struct\n+{\n+  int c;\n+  __complex__ _Float16 x;\n+  _Float16 y;\n+};\n+\n+struct complex4a_struct\n+{\n+  long long l;\n+  _Float16 f;\n+};\n+\n+void\n+check_struct_passing9 (struct complex1_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+  check_float_arguments;\n+}\n+\n+void\n+check_struct_passing10 (struct complex2_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+  check_double_arguments;\n+}\n+\n+void\n+check_struct_passing11 (struct complex3_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+  check_float16_arguments;\n+}\n+\n+void\n+check_struct_passing12 (struct complex4_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+  check_float16_arguments;\n+}\n+\n+static struct flex1_struct f1s = { 60, { } };\n+static struct flex2_struct f2s = { 61, { } };\n+\n+static void\n+do_test (void)\n+{\n+  struct int_struct is = { 48 };\n+  struct long_struct ls = { 49 };\n+#ifdef CHECK_LARGER_STRUCTS\n+  struct long2_struct l2s = { 50, 51 };\n+  struct long3_struct l3s = { 52, 53, 54 };\n+#endif\n+#ifdef CHECK_M64_M128\n+  struct m128_struct m128s[8];\n+  struct m128_2_struct m128_2s = { \n+      { 48.394, 39.3, -397.9, 3484.9 },\n+      { -8.394, -93.3, 7.9, 84.94 }\n+  };\n+  int i;\n+#endif\n+  struct complex1_struct c1s = { 4, ( -13.4 + 3.5*I ) };\n+  union\n+    {\n+      struct complex1_struct c;\n+      struct complex1a_struct u;\n+    } c1u;\n+  struct complex2_struct c2s = { 4, ( -13.4 + 3.5*I ), -34.5 };\n+  union\n+    {\n+      struct complex2_struct c;\n+      struct complex2a_struct u;\n+    } c2u;\n+\n+  struct complex3_struct c3s = { 4, ( -13.4 + 3.5*I ) };\n+  union\n+    {\n+      struct complex3_struct c;\n+      struct complex3a_struct u;\n+    } c3u;\n+\n+  struct complex4_struct c4s = { 4, ( -13.4 + 3.5*I ), -34.5 };\n+  union\n+    {\n+      struct complex4_struct c;\n+      struct complex4a_struct u;\n+    } c4u;\n+\n+  clear_struct_registers;\n+  iregs.I0 = is.i;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  WRAP_CALL (check_struct_passing1)(is);\n+\n+  clear_struct_registers;\n+  iregs.I0 = ls.l;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  WRAP_CALL (check_struct_passing2)(ls);\n+\n+#ifdef CHECK_LARGER_STRUCTS\n+  clear_struct_registers;\n+  iregs.I0 = l2s.l1;\n+  iregs.I1 = l2s.l2;\n+  num_iregs = 2;\n+  clear_int_hardware_registers;\n+  WRAP_CALL (check_struct_passing3)(l2s);\n+  WRAP_CALL (check_struct_passing4)(l3s);\n+#endif\n+\n+#ifdef CHECK_M64_M128\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      m128s[i].x = (__m128){32+i, 0, i, 0};\n+      (&fregs.xmm0)[i]._m128[0] = m128s[i].x;\n+    }\n+  num_fregs = 8;\n+  clear_float_hardware_registers;\n+  WRAP_CALL (check_struct_passing5)(m128s[0], m128s[1], m128s[2], m128s[3],\n+\t\t\t\t    m128s[4], m128s[5], m128s[6], m128s[7]);\n+  WRAP_CALL (check_struct_passing6)(m128_2s);\n+#endif\n+\n+  clear_struct_registers;\n+  iregs.I0 = f1s.i;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  WRAP_CALL (check_struct_passing7)(f1s);\n+\n+  clear_struct_registers;\n+  iregs.I0 = f2s.i;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  WRAP_CALL (check_struct_passing8)(f2s);\n+\n+  clear_struct_registers;\n+  c1u.c = c1s;\n+  iregs.I0 = c1u.u.l;\n+  num_iregs = 1;\n+  fregs.xmm0._float [0] = c1u.u.f;\n+  num_fregs = 1;\n+  clear_int_hardware_registers;\n+  clear_float_hardware_registers;\n+  WRAP_CALL (check_struct_passing9)(c1s);\n+\n+  clear_struct_registers;\n+  c2u.c = c2s;\n+  iregs.I0 = c2u.u.l;\n+  num_iregs = 1;\n+  fregs.xmm0._double[0] = c2u.u.d;\n+  num_fregs = 1;\n+  clear_int_hardware_registers;\n+  clear_float_hardware_registers;\n+  WRAP_CALL (check_struct_passing10)(c2s);\n+\n+  clear_struct_registers;\n+  c3u.c = c3s;\n+  iregs.I0 = c3u.u.l;\n+  num_iregs = 1;\n+  num_fregs = 0;\n+  clear_int_hardware_registers;\n+  clear_float_hardware_registers;\n+  WRAP_CALL (check_struct_passing11)(c3s);\n+\n+  clear_struct_registers;\n+  c4u.c = c4s;\n+  iregs.I0 = c4u.u.l;\n+  num_iregs = 1;\n+  fregs.xmm0.__Float16 [0] = c4u.u.f;\n+  num_fregs = 1;\n+  clear_int_hardware_registers;\n+  clear_float_hardware_registers;\n+  WRAP_CALL (check_struct_passing12)(c4s);\n+}"}, {"sha": "640b3057f9345683d1029bb23c689983e4322a3e", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_passing_unions.c", "status": "added", "additions": 335, "deletions": 0, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_unions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_unions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_passing_unions.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,335 @@\n+/* This tests passing of structs.  */\n+\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+unsigned int num_iregs, num_fregs;\n+\n+struct int_struct\n+{\n+  int i;\n+};\n+\n+struct long_struct\n+{\n+  long l;\n+};\n+\n+union un1\n+{\n+  char c;\n+  int i;\n+};\n+\n+union un2\n+{\n+  char c1;\n+  long l;\n+  char c2;\n+};\n+\n+union un3\n+{\n+  struct int_struct is;\n+  struct long_struct ls;\n+  union un1 un;\n+};\n+\n+\n+void\n+check_union_passing1(union un1 u ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+void\n+check_union_passing2(union un2 u1 ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+void\n+check_union_passing3(union un3 u ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+#define check_union_passing1 WRAP_CALL(check_union_passing1)\n+#define check_union_passing2 WRAP_CALL(check_union_passing2)\n+#define check_union_passing3 WRAP_CALL(check_union_passing3)\n+\n+#ifdef CHECK_M64_M128\n+union un4\n+{\n+  __m128 x;\n+  float f;\n+};\n+\n+union un5\n+{\n+  __m128 x;\n+  long i;\n+};\n+\n+void\n+check_union_passing4(union un4 u1 ATTRIBUTE_UNUSED,\n+\t\t     union un4 u2 ATTRIBUTE_UNUSED,\n+\t\t     union un4 u3 ATTRIBUTE_UNUSED,\n+\t\t     union un4 u4 ATTRIBUTE_UNUSED,\n+\t\t     union un4 u5 ATTRIBUTE_UNUSED,\n+\t\t     union un4 u6 ATTRIBUTE_UNUSED,\n+\t\t     union un4 u7 ATTRIBUTE_UNUSED,\n+\t\t     union un4 u8 ATTRIBUTE_UNUSED)\n+{\n+  check_m128_arguments;\n+}\n+\n+void\n+check_union_passing5(union un5 u ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+  check_vector_arguments(m128, 8);\n+}\n+\n+union un4a\n+{\n+  __m128 x;\n+  _Float16 f;\n+};\n+\n+void\n+check_union_passing4a(union un4a u1 ATTRIBUTE_UNUSED,\n+\t\t      union un4a u2 ATTRIBUTE_UNUSED,\n+\t\t      union un4a u3 ATTRIBUTE_UNUSED,\n+\t\t      union un4a u4 ATTRIBUTE_UNUSED,\n+\t\t      union un4a u5 ATTRIBUTE_UNUSED,\n+\t\t      union un4a u6 ATTRIBUTE_UNUSED,\n+\t\t      union un4a u7 ATTRIBUTE_UNUSED,\n+\t\t      union un4a u8 ATTRIBUTE_UNUSED)\n+{\n+  check_m128_arguments;\n+}\n+\n+union un4b\n+{\n+  __m128h x;\n+  _Float16 f;\n+};\n+\n+void\n+check_union_passing4b(union un4b u1 ATTRIBUTE_UNUSED,\n+\t\t      union un4b u2 ATTRIBUTE_UNUSED,\n+\t\t      union un4b u3 ATTRIBUTE_UNUSED,\n+\t\t      union un4b u4 ATTRIBUTE_UNUSED,\n+\t\t      union un4b u5 ATTRIBUTE_UNUSED,\n+\t\t      union un4b u6 ATTRIBUTE_UNUSED,\n+\t\t      union un4b u7 ATTRIBUTE_UNUSED,\n+\t\t      union un4b u8 ATTRIBUTE_UNUSED)\n+{\n+  check_m128_arguments;\n+}\n+\n+#define check_union_passing4 WRAP_CALL(check_union_passing4)\n+#define check_union_passing4a WRAP_CALL(check_union_passing4a)\n+#define check_union_passing4b WRAP_CALL(check_union_passing4b)\n+#define check_union_passing5 WRAP_CALL(check_union_passing5)\n+#endif\n+\n+union un6\n+{\n+  long double ld;\n+  int i;\n+};\n+\n+\n+void\n+check_union_passing6(union un6 u ATTRIBUTE_UNUSED)\n+{\n+  /* Check the passing on the stack by comparing the address of the\n+     stack elements to the expected place on the stack.  */\n+  assert ((unsigned long)&u.ld == rsp+8);\n+  assert ((unsigned long)&u.i == rsp+8);\n+}\n+\n+#define check_union_passing6 WRAP_CALL(check_union_passing6)\n+\n+union un7\n+{\n+  long double ld;\n+  _Float16 f;\n+};\n+\n+void\n+check_union_passing7(union un7 u ATTRIBUTE_UNUSED)\n+{\n+  /* Check the passing on the stack by comparing the address of the\n+     stack elements to the expected place on the stack.  */\n+  assert ((unsigned long)&u.ld == rsp+8);\n+  assert ((unsigned long)&u.f == rsp+8);\n+}\n+\n+#define check_union_passing7 WRAP_CALL(check_union_passing7)\n+\n+union un8\n+{\n+  _Float16 f;\n+  int i;\n+};\n+\n+void\n+check_union_passing8(union un8 u ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+#define check_union_passing8 WRAP_CALL(check_union_passing8)\n+\n+static void\n+do_test (void)\n+{\n+  union un1 u1;\n+#ifdef CHECK_LARGER_UNION_PASSING\n+  union un2 u2;\n+  union un3 u3;\n+  struct int_struct is;\n+  struct long_struct ls;\n+#endif /* CHECK_LARGER_UNION_PASSING */\n+#ifdef CHECK_M64_M128\n+  union un4 u4[8];\n+  union un4a u4a[8];\n+  union un4b u4b[8];\n+  union un5 u5 = { { 48.394, 39.3, -397.9, 3484.9 } };\n+  int i;\n+#endif\n+  union un6 u6;\n+  union un7 u7;\n+  union un8 u8;\n+\n+  /* Check a union with char, int.  */\n+  clear_struct_registers;\n+  u1.i = 0;  /* clear the struct to not have high bits left */\n+  u1.c = 32;\n+  iregs.I0 = 32;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_union_passing1(u1);\n+  u1.i = 0;  /* clear the struct to not have high bits left */\n+  u1.i = 33;\n+  iregs.I0 = 33;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_union_passing1(u1);\n+\n+  /* Check a union with char, long, char.  */\n+#ifdef CHECK_LARGER_UNION_PASSING\n+  clear_struct_registers;\n+  u2.l = 0;  /* clear the struct to not have high bits left */\n+  u2.c1 = 34;\n+  iregs.I0 = 34;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_union_passing2(u2);\n+  u2.l = 0;  /* clear the struct to not have high bits left */\n+  u2.l = 35;\n+  iregs.I0 = 35;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_union_passing2(u2);\n+  u2.l = 0;  /* clear the struct to not have high bits left */\n+  u2.c2 = 36;\n+  iregs.I0 = 36;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_union_passing2(u2);\n+\n+  /* check a union containing two structs and a union.  */\n+  clear_struct_registers;\n+  is.i = 37;\n+  u3.ls.l = 0;  /* clear the struct to not have high bits left */\n+  u3.is = is;\n+  iregs.I0 = 37;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_union_passing3(u3);\n+  ls.l = 38;\n+  u3.ls.l = 0;  /* clear the struct to not have high bits left */\n+  u3.ls = ls;\n+  iregs.I0 = 38;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_union_passing3(u3);\n+  u1.c = 39;\n+  u3.ls.l = 0;  /* clear the struct to not have high bits left */\n+  u3.un = u1;\n+  iregs.I0 = 39;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_union_passing3(u3);\n+  u1.i = 40;\n+  u3.ls.l = 0;  /* clear the struct to not have high bits left */\n+  u3.un = u1;\n+  iregs.I0 = 40;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  check_union_passing3(u3);\n+#endif /* CHECK_LARGER_UNION_PASSING */\n+\n+#ifdef CHECK_M64_M128\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u4[i].x = (__m128){32+i, 0, i, 0};\n+      (&fregs.xmm0)[i]._m128[0] = u4[i].x;\n+    }\n+  num_fregs = 8;\n+  clear_float_hardware_registers;\n+  check_union_passing4(u4[0], u4[1], u4[2], u4[3],\n+\t\t       u4[4], u4[5], u4[6], u4[7]);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u4a[i].x = (__m128){32+i, 0, i, 0};\n+      (&fregs.xmm0)[i]._m128[0] = u4[i].x;\n+    }\n+  num_fregs = 8;\n+  clear_float_hardware_registers;\n+  check_union_passing4a(u4a[0], u4a[1], u4a[2], u4a[3],\n+\t\t       u4a[4], u4a[5], u4a[6], u4a[7]);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u4b[i].x = (__m128h){33+i, 0, i, 0, -i, 1, 2 * i, i + 8};\n+      (&fregs.xmm0)[i]._m128h[0] = u4b[i].x;\n+    }\n+  num_fregs = 8;\n+  clear_float_hardware_registers;\n+  check_union_passing4b(u4b[0], u4b[1], u4b[2], u4b[3],\n+\t\t        u4b[4], u4b[5], u4b[6], u4b[7]);\n+\n+  clear_struct_registers;\n+  fregs.xmm0._m128[0] = u5.x;\n+  num_fregs = 1;\n+  num_iregs = 1;\n+  iregs.I0 = u5.i;\n+  clear_float_hardware_registers;\n+  check_union_passing5(u5);\n+#endif\n+\n+  u6.i = 2;\n+  check_union_passing6(u6);\n+\n+  u7.f = 2.0f16;\n+  check_union_passing7(u7);\n+\n+  clear_struct_registers;\n+  u8.i = 8;\n+  num_iregs = 1;\n+  iregs.I0 = u8.i;\n+  clear_int_hardware_registers;\n+  check_union_passing8(u8);\n+}"}, {"sha": "92578127be77db2d2af048a9b3ec61fe206485d8", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_struct_returning.c", "status": "added", "additions": 274, "deletions": 0, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_struct_returning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_struct_returning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_struct_returning.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,274 @@\n+/* This tests returning of structures.  */\n+\n+#include <stdio.h>\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+#include \"macros.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+unsigned int num_iregs, num_fregs;\n+\n+int current_test;\n+int num_failed = 0;\n+\n+#undef assert\n+#define assert(test) do { if (!(test)) {fprintf (stderr, \"failed in test %d\\n\", current_test); num_failed++; } } while (0)\n+\n+#define xmm0h xmm_regs[0].__Float16\n+#define xmm1h xmm_regs[1].__Float16\n+#define xmm0f xmm_regs[0]._float\n+#define xmm0d xmm_regs[0]._double\n+#define xmm1f xmm_regs[1]._float\n+#define xmm1d xmm_regs[1]._double\n+\n+typedef enum {\n+  INT = 0,\n+  SSE_H,\n+  SSE_F,\n+  SSE_D,\n+  X87,\n+  MEM,\n+  INT_SSE,\n+  SSE_INT,\n+  SSE_F_V,\n+  SSE_F_H,\n+  SSE_F_H8\n+} Type;\n+\n+/* Structures which should be returned in INTEGER.  */\n+#define D(I,MEMBERS,B) struct S_ ## I { MEMBERS ; }; Type class_ ## I = INT; \\\n+struct S_ ## I f_ ## I (void) { struct S_ ## I s; memset (&s, 0, sizeof(s)); B; return s; }\n+\n+D(1,char m1, s.m1=42)\n+D(2,short m1, s.m1=42)\n+D(3,int m1, s.m1=42)\n+D(4,long m1, s.m1=42)\n+D(5,long long m1, s.m1=42)\n+D(6,char m1;short s, s.m1=42)\n+D(7,char m1;int i, s.m1=42)\n+D(8,char m1; long l, s.m1=42)\n+D(9,char m1; long long l, s.m1=42)\n+D(10,char m1[16], s.m1[0]=42)\n+D(11,short m1[8], s.m1[0]=42)\n+D(12,int m1[4], s.m1[0]=42)\n+D(13,long m1[2], s.m1[0]=42)\n+D(14,long long m1[2], s.m1[0]=42)\n+\n+#undef D\n+\n+/* Structures which should be returned in SSE.  */\n+#define D(I,MEMBERS,C,B) struct S_ ## I { MEMBERS ; }; Type class_ ## I = C; \\\n+struct S_ ## I f_ ## I (void) { struct S_ ## I s; memset (&s, 0, sizeof(s)); B; return s; }\n+\n+D(100,float f,SSE_F, s.f=42)\n+D(101,double d,SSE_D, s.d=42)\n+D(102,float f;float f2,SSE_F, s.f=42)\n+D(103,float f;double d,SSE_F, s.f=42)\n+D(104,double d; float f,SSE_D, s.d=42)\n+D(105,double d; double d2,SSE_D, s.d=42)\n+D(106,float f[2],SSE_F, s.f[0]=42)\n+D(107,float f[3],SSE_F, s.f[0]=42)\n+D(108,float f[4],SSE_F, s.f[0]=42)\n+D(109,double d[2],SSE_D, s.d[0]=42)\n+D(110,float f[2]; double d,SSE_F, s.f[0]=42)\n+D(111,double d;float f[2],SSE_D, s.d=42)\n+\n+D(120,_Float16 f,SSE_H, s.f=42)\n+D(121,_Float16 f;_Float16 f2,SSE_H, s.f=42)\n+D(122,_Float16 f;float d,SSE_H, s.f=42)\n+D(123,_Float16 f;double d,SSE_H, s.f=42)\n+D(124,double d; _Float16 f,SSE_D, s.d=42)\n+D(125,_Float16 f[2],SSE_H, s.f[0]=42)\n+D(126,_Float16 f[3],SSE_H, s.f[0]=42)\n+D(127,_Float16 f[4],SSE_H, s.f[0]=42)\n+D(128,_Float16 f[2]; double d,SSE_H, s.f[0]=42)\n+D(129,double d;_Float16 f[2],SSE_D, s.d=42)\n+\n+#undef D\n+\n+/* Structures which should be returned on x87 stack.  */\n+#define D(I,MEMBERS) struct S_ ## I { MEMBERS ; }; Type class_ ## I = X87; \\\n+struct S_ ## I f_ ## I (void) { struct S_ ## I s = { 42 }; return s; }\n+\n+/* The only struct containing a long double, which is returned in\n+   registers at all, is the singleton struct.  All others are too large.\n+   This includes a struct containing complex long double, which is passed\n+   in memory, although a complex long double type itself is returned in\n+   two registers.  */\n+D(200,long double ld)\n+\n+#undef D\n+\n+/* Structures which should be returned in INT (low) and SSE (high).  */\n+#define D(I,MEMBERS) struct S_ ## I { MEMBERS ; }; Type class_ ## I = INT_SSE; \\\n+struct S_ ## I f_ ## I (void) { struct S_ ## I s = { 42,43 }; return s; }\n+\n+D(300,char m1; float m2)\n+D(301,char m1; double m2)\n+D(302,short m1; float m2)\n+D(303,short m1; double m2)\n+D(304,int m1; float m2)\n+D(305,int m1; double m2)\n+D(306,long long m1; float m2)\n+D(307,long long m1; double m2)\n+\n+D(310,char m1; _Float16 m2)\n+D(311,short m1; _Float16 m2)\n+D(312,int m1; _Float16 m2)\n+D(313,long long m1; _Float16 m2)\n+\n+#undef D\n+\n+void check_300 (void)\n+{\n+  XMM_T x;\n+  x._ulong[0] = rax;\n+  switch (current_test) {\n+    case 300: assert ((rax & 0xff) == 42 && x._float[1] == 43); break;\n+    case 301: assert ((rax & 0xff) == 42 && xmm0d[0] == 43); break;\n+    case 302: assert ((rax & 0xffff) == 42 && x._float[1] == 43); break;\n+    case 303: assert ((rax & 0xffff) == 42 && xmm0d[0] == 43); break;\n+    case 304: assert ((rax & 0xffffffff) == 42 && x._float[1] == 43); break;\n+    case 305: assert ((rax & 0xffffffff) == 42 && xmm0d[0] == 43); break;\n+    case 306: assert (rax == 42 && xmm0f[0] == 43); break;\n+    case 307: assert (rax == 42 && xmm0d[0] == 43); break;\n+    case 310: assert ((rax & 0xff) == 42 && x.__Float16[1] == 43); break;\n+    case 311: assert ((rax & 0xffff) == 42 && x.__Float16[1] == 43); break;\n+    case 312: assert ((rax & 0xffffffff) == 42 && x.__Float16[2] == 43); break;\n+    case 313: assert (rax == 42 && xmm0h[0] == 43); break;\n+\n+    default: assert (0); break;\n+  }\n+}\n+\n+/* Structures which should be returned in SSE (low) and INT (high).  */\n+#define D(I,MEMBERS,B) struct S_ ## I { MEMBERS ; }; Type class_ ## I = SSE_INT; \\\n+struct S_ ## I f_ ## I (void) { struct S_ ## I s; memset (&s, 0, sizeof(s));  B; return s; }\n+\n+D(400,float f[2];char c, s.f[0]=42; s.c=43)\n+D(401,double d;char c, s.d=42; s.c=43)\n+\n+D(402,_Float16 f[4];char c, s.f[0]=42; s.c=43)\n+\n+#undef D\n+\n+void check_400 (void)\n+{\n+  switch (current_test) {\n+    case 400: assert (xmm0f[0] == 42 && (rax & 0xff) == 43); break;\n+    case 401: assert (xmm0d[0] == 42 && (rax & 0xff) == 43); break;\n+    case 402: assert (xmm0h[0] == 42 && (rax & 0xff) == 43); break;\n+\n+    default: assert (0); break;\n+  }\n+}\n+\n+/* Structures which should be returned in MEM.  */\n+void *struct_addr;\n+#define D(I,MEMBERS) struct S_ ## I { MEMBERS ; }; Type class_ ## I = MEM; \\\n+struct S_ ## I f_ ## I (void) { union {unsigned char c; struct S_ ## I s;} u; memset (&u.s, 0, sizeof(u.s)); u.c = 42; return u.s; }\n+\n+/* Too large.  */\n+D(500,char m1[17])\n+D(501,short m1[9])\n+D(502,int m1[5])\n+D(503,long m1[3])\n+D(504,short m1[8];char c)\n+D(505,char m1[1];int i[4])\n+D(506,float m1[5])\n+D(507,double m1[3])\n+D(508,char m1[1];float f[4])\n+D(509,char m1[1];double d[2])\n+D(510,__complex long double m1[1])\n+\n+/* Too large due to padding.  */\n+D(520,char m1[1];int i;char c2; int i2; char c3)\n+\n+/* Unnaturally aligned members.  */\n+D(530,short m1[1];int i PACKED)\n+\n+D(540,_Float16 m1[10])\n+D(541,char m1[1];_Float16 f[8])\n+\n+#undef D\n+\n+\n+/* Special tests.  */\n+#define D(I,MEMBERS,C,B) struct S_ ## I { MEMBERS ; }; Type class_ ## I = C; \\\n+struct S_ ## I f_ ## I (void) { struct S_ ## I s; B; return s; }\n+D(600,float f[4], SSE_F_V, s.f[0] = s.f[1] = s.f[2] = s.f[3] = 42)\n+D(601,_Float16 f[4], SSE_F_H, s.f[0] = s.f[1] = s.f[2] = s.f[3] = 42)\n+D(602,_Float16 f[8], SSE_F_H8,\n+  s.f[0] = s.f[1] = s.f[2] = s.f[3] = s.f[4] = s.f[5] = s.f[6] = s.f[7] = 42)\n+#undef D\n+\n+void clear_all (void)\n+{\n+  clear_int_registers;\n+  clear_float_registers;\n+  clear_x87_registers;\n+}\n+\n+void check_all (Type class, unsigned long size)\n+{\n+  switch (class) {\n+    case INT: if (size < 8) rax &= ~0UL >> (64-8*size); assert (rax == 42); break;\n+    case SSE_H: assert (xmm0h[0] == 42); break;\n+    case SSE_F: assert (xmm0f[0] == 42); break;\n+    case SSE_D: assert (xmm0d[0] == 42); break;\n+    case SSE_F_V: assert (xmm0f[0] == 42 && xmm0f[1]==42 && xmm1f[0] == 42 && xmm1f[1] == 42); break;\n+    case SSE_F_H: assert (xmm0h[0] == 42 && xmm0h[1]==42 && xmm0h[2] == 42 && xmm0h[3] == 42); break;\n+    case SSE_F_H8: assert (xmm0h[0] == 42 && xmm0h[1]==42 && xmm0h[2] == 42 && xmm0h[3] == 42\n+\t\t\t   && xmm1h[0] == 42 && xmm1h[1]==42 && xmm1h[2] == 42 && xmm1h[3] == 42); break;\n+    case X87: assert (x87_regs[0]._ldouble == 42); break;\n+    case INT_SSE: check_300(); break;\n+    case SSE_INT: check_400(); break;\n+    /* Ideally we would like to check that rax == struct_addr.\n+       Unfortunately the address of the target struct escapes (for setting\n+       struct_addr), so the return struct is a temporary one whose address\n+       is given to the f_* functions, otherwise a conforming program\n+       could notice the struct changing already before the function returns.\n+       This temporary struct could be anywhere.  For GCC it will be on\n+       stack, but no one is forbidding that it could be a static variable\n+       if there's no threading or proper locking.  Nobody in his right mind\n+       will not use the stack for that.  */\n+    case MEM: assert (*(unsigned char*)struct_addr == 42 && rdi == rax); break;\n+  }\n+}\n+\n+#define D(I) { struct S_ ## I s; current_test = I; struct_addr = (void*)&s; \\\n+  clear_all(); \\\n+  s = WRAP_RET(f_ ## I) (); \\\n+  check_all(class_ ## I, sizeof(s)); \\\n+}\n+\n+static void\n+do_test (void)\n+{\n+  D(1) D(2) D(3) D(4) D(5) D(6) D(7) D(8) D(9) D(10) D(11) D(12) D(13) D(14)\n+  \n+  D(100) D(101) D(102) D(103) D(104) D(105) D(106) D(107) D(108) D(109) D(110)\n+  D(111)\n+  \n+  D(120) D(121) D(122) D(123) D(124) D(125) D(126) D(127) D(128) D(129)\n+\n+  D(200)\n+\n+  D(300) D(301) D(302) D(303) D(304) D(305) D(306) D(307)\n+  D(310) D(311) D(312) D(313)\n+\n+  D(400) D(401) D(402)\n+\n+  D(500) D(501) D(502) D(503) D(504) D(505) D(506) D(507) D(508) D(509)\n+  D(520)\n+  D(530)\n+\n+  D(540) D(541)\n+\n+  D(600) D(601) D(602)\n+  if (num_failed)\n+    abort ();\n+}\n+#undef D"}, {"sha": "5bdc44db5f4ff166d53054b1ff0bb5d2c594a8ab", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/test_varargs-m128.c", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_varargs-m128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce16ffa434bf28892668089af00cdd0f96c03c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_varargs-m128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Ftest_varargs-m128.c?ref=22ce16ffa434bf28892668089af00cdd0f96c03c", "patch": "@@ -0,0 +1,164 @@\n+/* Test variable number of 128-bit vector arguments passed to functions.  */\n+\n+#include <stdio.h>\n+#include \"avx512fp16-xmm-check.h\"\n+#include \"defines.h\"\n+#include \"macros.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+\n+/* This struct holds values for argument checking.  */\n+struct \n+{\n+  XMM_T i0, i1, i2, i3, i4, i5, i6, i7, i8, i9;\n+} values;\n+\n+char *pass;\n+int failed = 0;\n+\n+#undef assert\n+#define assert(c) do { \\\n+  if (!(c)) {failed++; printf (\"failed %s\\n\", pass); } \\\n+} while (0)\n+\n+#define compare(X1,X2,T) do { \\\n+  assert (memcmp (&X1, &X2, sizeof (T)) == 0); \\\n+} while (0)\n+\n+void\n+fun_check_passing_m128_varargs (__m128 i0, __m128 i1, __m128 i2,\n+\t\t\t\t__m128 i3, ...)\n+{\n+  /* Check argument values.  */\n+  void **fp = __builtin_frame_address (0);\n+  void *ra = __builtin_return_address (0);\n+  __m128 *argp;\n+\n+  compare (values.i0, i0, __m128);\n+  compare (values.i1, i1, __m128);\n+  compare (values.i2, i2, __m128);\n+  compare (values.i3, i3, __m128);\n+\n+  /* Get the pointer to the return address on stack.  */\n+  while (*fp != ra)\n+    fp++;\n+\n+  /* Skip the return address stack slot.  */\n+  argp = (__m128 *) (((char *) fp) + 8);\n+\n+  /* Check __m128 arguments passed on stack.  */\n+  compare (values.i8, argp[0], __m128);\n+  compare (values.i9, argp[1], __m128);\n+\n+  /* Check register contents.  */\n+  compare (fregs.xmm0, xmm_regs[0], __m128);\n+  compare (fregs.xmm1, xmm_regs[1], __m128);\n+  compare (fregs.xmm2, xmm_regs[2], __m128);\n+  compare (fregs.xmm3, xmm_regs[3], __m128);\n+  compare (fregs.xmm4, xmm_regs[4], __m128);\n+  compare (fregs.xmm5, xmm_regs[5], __m128);\n+  compare (fregs.xmm6, xmm_regs[6], __m128);\n+  compare (fregs.xmm7, xmm_regs[7], __m128);\n+}\n+\n+void\n+fun_check_passing_m128h_varargs (__m128h i0, __m128h i1, __m128h i2,\n+\t\t\t\t __m128h i3, ...)\n+{\n+  /* Check argument values.  */\n+  void **fp = __builtin_frame_address (0);\n+  void *ra = __builtin_return_address (0);\n+  __m128h *argp;\n+\n+  compare (values.i0, i0, __m128h);\n+  compare (values.i1, i1, __m128h);\n+  compare (values.i2, i2, __m128h);\n+  compare (values.i3, i3, __m128h);\n+\n+  /* Get the pointer to the return address on stack.  */\n+  while (*fp != ra)\n+    fp++;\n+\n+  /* Skip the return address stack slot.  */\n+  argp = (__m128h *) (((char *) fp) + 8);\n+\n+  /* Check __m128h arguments passed on stack.  */\n+  compare (values.i8, argp[0], __m128h);\n+  compare (values.i9, argp[1], __m128h);\n+\n+  /* Check register contents.  */\n+  compare (fregs.xmm0, xmm_regs[0], __m128h);\n+  compare (fregs.xmm1, xmm_regs[1], __m128h);\n+  compare (fregs.xmm2, xmm_regs[2], __m128h);\n+  compare (fregs.xmm3, xmm_regs[3], __m128h);\n+  compare (fregs.xmm4, xmm_regs[4], __m128h);\n+  compare (fregs.xmm5, xmm_regs[5], __m128h);\n+  compare (fregs.xmm6, xmm_regs[6], __m128h);\n+  compare (fregs.xmm7, xmm_regs[7], __m128h);\n+}\n+\n+#define def_check_int_passing_varargs(_i0, _i1, _i2, _i3, _i4, _i5, \\\n+\t\t\t\t      _i6, _i7, _i8, _i9, \\\n+\t\t\t\t      _func, TYPE) \\\n+  values.i0.TYPE[0] = _i0; \\\n+  values.i1.TYPE[0] = _i1; \\\n+  values.i2.TYPE[0] = _i2; \\\n+  values.i3.TYPE[0] = _i3; \\\n+  values.i4.TYPE[0] = _i4; \\\n+  values.i5.TYPE[0] = _i5; \\\n+  values.i6.TYPE[0] = _i6; \\\n+  values.i7.TYPE[0] = _i7; \\\n+  values.i8.TYPE[0] = _i8; \\\n+  values.i9.TYPE[0] = _i9; \\\n+  clear_float_registers; \\\n+  fregs.F0.TYPE[0] = _i0; \\\n+  fregs.F1.TYPE[0] = _i1; \\\n+  fregs.F2.TYPE[0] = _i2; \\\n+  fregs.F3.TYPE[0] = _i3; \\\n+  fregs.F4.TYPE[0] = _i4; \\\n+  fregs.F5.TYPE[0] = _i5; \\\n+  fregs.F6.TYPE[0] = _i6; \\\n+  fregs.F7.TYPE[0] = _i7; \\\n+  WRAP_CALL(_func) (_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7, _i8, _i9);\n+\n+void\n+test_m128_varargs (void)\n+{\n+  __m128 x[10];\n+  int i;\n+  for (i = 0; i < 10; i++)\n+    x[i] = (__m128){32+i, 0, 0, 0};\n+  pass = \"m128-varargs\";\n+  def_check_int_passing_varargs (x[0], x[1], x[2], x[3], x[4], x[5],\n+\t\t\t\t x[6], x[7], x[8], x[9],\n+\t\t\t\t fun_check_passing_m128_varargs,\n+\t\t\t\t _m128);\n+}\n+\n+void\n+test_m128h_varargs (void)\n+{\n+  __m128h x[10];\n+  int i;\n+  for (i = 0; i < 10; i++)\n+    x[i] = (__m128h) {\n+        1.1f16 + i, 2.2f16 + i, 3.3f16 + i, 4.4f16 + i,\n+\t5.5f16 + i, 6.6f16 + i, 7.7f16 + i, 8.8f16 + i\n+    };\n+  pass = \"m128h-varargs\";\n+  def_check_int_passing_varargs (x[0], x[1], x[2], x[3], x[4], x[5],\n+\t\t\t\t x[6], x[7], x[8], x[9],\n+\t\t\t\t fun_check_passing_m128h_varargs,\n+\t\t\t\t _m128h);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  test_m128_varargs ();\n+  test_m128h_varargs ();\n+  if (failed)\n+    abort ();\n+}"}]}