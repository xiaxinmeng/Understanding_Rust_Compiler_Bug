{"sha": "65a07688cf999ddb07d1deb1dd8842e71602379c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVhMDc2ODhjZjk5OWRkYjA3ZDFkZWIxZGQ4ODQyZTcxNjAyMzc5Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-12-07T12:15:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-07T12:15:33Z"}, "message": "expr.c (store_field): Remove warning.\n\n\t* expr.c (store_field): Remove warning.\n\t(expand_expr, case COMPONENT_REF, case VIEW_CONVERT_EXPR): Likewise.\n\t(highest_pow2_factor, case MIN_EXPR, case MAX_EXPR): Add cases.\n\t(highest_pow2_factor, case *_DIV_EXPR): Only can do something if\n\tdivisor constant power of 2.\n\t(highest_pow2_factor, case COMPOUND_EXPR): Look at operand 1.\n\nFrom-SVN: r47753", "tree": {"sha": "8b8f47acf583aa3108b378afa3fe87994681f024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b8f47acf583aa3108b378afa3fe87994681f024"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65a07688cf999ddb07d1deb1dd8842e71602379c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65a07688cf999ddb07d1deb1dd8842e71602379c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65a07688cf999ddb07d1deb1dd8842e71602379c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65a07688cf999ddb07d1deb1dd8842e71602379c/comments", "author": null, "committer": null, "parents": [{"sha": "f393dd70417b04fbe78bf57d82e73573b12196b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f393dd70417b04fbe78bf57d82e73573b12196b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f393dd70417b04fbe78bf57d82e73573b12196b7"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "98f5a402a7e7ec2dc57a3859c816b2b43d906b87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65a07688cf999ddb07d1deb1dd8842e71602379c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65a07688cf999ddb07d1deb1dd8842e71602379c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65a07688cf999ddb07d1deb1dd8842e71602379c", "patch": "@@ -1,3 +1,12 @@\n+Fri Dec  7 07:06:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (store_field): Remove warning.\n+\t(expand_expr, case COMPONENT_REF, case VIEW_CONVERT_EXPR): Likewise.\n+\t(highest_pow2_factor, case MIN_EXPR, case MAX_EXPR): Add cases.\n+\t(highest_pow2_factor, case *_DIV_EXPR): Only can do something if\n+\tdivisor constant power of 2.\n+\t(highest_pow2_factor, case COMPOUND_EXPR): Look at operand 1.\n+\n 2001-12-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alpha.c (function_arg): Cast value to HOST_WIDE_INT before"}, {"sha": "26ee720ac42c3d97d650d470566ccac5e8074cfe", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65a07688cf999ddb07d1deb1dd8842e71602379c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65a07688cf999ddb07d1deb1dd8842e71602379c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=65a07688cf999ddb07d1deb1dd8842e71602379c", "patch": "@@ -5043,7 +5043,7 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode, unsignedp, type,\n \t low-order bits.  However, if EXP's type is a record and this is\n \t big-endian machine, we want the upper BITSIZE bits.  */\n       if (BYTES_BIG_ENDIAN && GET_MODE_CLASS (GET_MODE (temp)) == MODE_INT\n-\t  && bitsize < GET_MODE_BITSIZE (GET_MODE (temp))\n+\t  && bitsize < (HOST_WIDE_INT) GET_MODE_BITSIZE (GET_MODE (temp))\n \t  && TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE)\n \ttemp = expand_shift (RSHIFT_EXPR, GET_MODE (temp), temp,\n \t\t\t     size_int (GET_MODE_BITSIZE (GET_MODE (temp))\n@@ -5790,7 +5790,7 @@ highest_pow2_factor (exp)\n \t}\n       break;\n \n-    case PLUS_EXPR:  case MINUS_EXPR:\n+    case PLUS_EXPR:  case MINUS_EXPR:  case MIN_EXPR:  case MAX_EXPR:\n       c0 = highest_pow2_factor (TREE_OPERAND (exp, 0));\n       c1 = highest_pow2_factor (TREE_OPERAND (exp, 1));\n       return MIN (c0, c1);\n@@ -5802,14 +5802,22 @@ highest_pow2_factor (exp)\n \n     case ROUND_DIV_EXPR:  case TRUNC_DIV_EXPR:  case FLOOR_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n-      c0 = highest_pow2_factor (TREE_OPERAND (exp, 0));\n-      c1 = highest_pow2_factor (TREE_OPERAND (exp, 1));\n-      return MAX (1, c0 / c1);\n+      if (integer_pow2p (TREE_OPERAND (exp, 1))\n+\t  && host_integerp (TREE_OPERAND (exp, 1), 1))\n+\t{\n+\t  c0 = highest_pow2_factor (TREE_OPERAND (exp, 0));\n+\t  c1 = tree_low_cst (TREE_OPERAND (exp, 1), 1);\n+\t  return MAX (1, c0 / c1);\n+\t}\n+      break;\n \n     case NON_LVALUE_EXPR:  case NOP_EXPR:  case CONVERT_EXPR:\n-    case COMPOUND_EXPR:    case SAVE_EXPR: case WITH_RECORD_EXPR:\n+    case SAVE_EXPR: case WITH_RECORD_EXPR:\n       return highest_pow2_factor (TREE_OPERAND (exp, 0));\n \n+    case COMPOUND_EXPR:\n+      return highest_pow2_factor (TREE_OPERAND (exp, 1));\n+\n     case COND_EXPR:\n       c0 = highest_pow2_factor (TREE_OPERAND (exp, 1));\n       c1 = highest_pow2_factor (TREE_OPERAND (exp, 2));\n@@ -6932,7 +6940,7 @@ expand_expr (exp, target, tmode, modifier)\n \t       machine, we must put the field into the high-order bits.  */\n \t    if (TREE_CODE (type) == RECORD_TYPE && BYTES_BIG_ENDIAN\n \t\t&& GET_MODE_CLASS (GET_MODE (op0)) == MODE_INT\n-\t\t&& bitsize < GET_MODE_BITSIZE (GET_MODE (op0)))\n+\t\t&& bitsize < (HOST_WIDE_INT) GET_MODE_BITSIZE (GET_MODE (op0)))\n \t      op0 = expand_shift (LSHIFT_EXPR, GET_MODE (op0), op0,\n \t\t\t\t  size_int (GET_MODE_BITSIZE (GET_MODE (op0))\n \t\t\t\t\t    - bitsize),\n@@ -7305,8 +7313,9 @@ expand_expr (exp, target, tmode, modifier)\n \t\t   && MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (TYPE_MODE (type)))\n \t    {\n \t      tree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n-\t      HOST_WIDE_INT temp_size = MAX (int_size_in_bytes (inner_type),\n-\t\t\t\t\t     GET_MODE_SIZE (TYPE_MODE (type)));\n+\t      HOST_WIDE_INT temp_size\n+\t\t= MAX (int_size_in_bytes (inner_type),\n+\t\t       (HOST_WIDE_INT) GET_MODE_SIZE (TYPE_MODE (type)));\n \t      rtx new = assign_stack_temp_for_type (TYPE_MODE (type),\n \t\t\t\t\t\t    temp_size, 0, type);\n \t      rtx new_with_op0_mode = copy_rtx (new);"}]}