{"sha": "35b63115bc743ea486cec0caa321ce731b01c006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViNjMxMTViYzc0M2VhNDg2Y2VjMGNhYTMyMWNlNzMxYjAxYzAwNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T08:06:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T08:06:02Z"}, "message": "(hi_reg_name, qi_reg_name, qi_high_reg_name): Not static.\n\n(PRINT_REG):  Definition moved to i386.h.\n\nFrom-SVN: r2327", "tree": {"sha": "8d151b212b895d81028166c8cd7288ae85166d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d151b212b895d81028166c8cd7288ae85166d6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35b63115bc743ea486cec0caa321ce731b01c006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b63115bc743ea486cec0caa321ce731b01c006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35b63115bc743ea486cec0caa321ce731b01c006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b63115bc743ea486cec0caa321ce731b01c006/comments", "author": null, "committer": null, "parents": [{"sha": "74b42c8b807212cee659292a2dcca5f8ef988440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b42c8b807212cee659292a2dcca5f8ef988440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74b42c8b807212cee659292a2dcca5f8ef988440"}], "stats": {"total": 45, "additions": 3, "deletions": 42}, "files": [{"sha": "e0bb774001d59083d9bd9d61ced8aafdeefc9729", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b63115bc743ea486cec0caa321ce731b01c006/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b63115bc743ea486cec0caa321ce731b01c006/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=35b63115bc743ea486cec0caa321ce731b01c006", "patch": "@@ -49,9 +49,9 @@ char *singlemove_string ();\n char *output_move_const_single ();\n char *output_fp_cc0_set ();\n \n-static char *hi_reg_name[] = HI_REGISTER_NAMES;\n-static char *qi_reg_name[] = QI_REGISTER_NAMES;\n-static char *qi_high_reg_name[] = QI_HIGH_REGISTER_NAMES;\n+char *hi_reg_name[] = HI_REGISTER_NAMES;\n+char *qi_reg_name[] = QI_REGISTER_NAMES;\n+char *qi_high_reg_name[] = QI_HIGH_REGISTER_NAMES;\n \n /* Array of the smallest class containing reg number REGNO, indexed by\n    REGNO.  Used by REGNO_REG_CLASS in i386.h. */\n@@ -922,45 +922,6 @@ output_pic_addr_const (file, x, code)\n     }\n }\n \f\n-/* Print the name of a register based on its machine mode and number.\n-   If CODE is 'w', pretend the mode is HImode.\n-   If CODE is 'b', pretend the mode is QImode.\n-   If CODE is 'k', pretend the mode is SImode.\n-   If CODE is 'h', pretend the reg is the `high' byte register.\n-   If CODE is 'y', print \"st(0)\" instead of \"st\", if the reg is stack op. */\n-\n-#define PRINT_REG(X, CODE, FILE) \\\n-  do { if (REGNO (X) == ARG_POINTER_REGNUM)\t\t\\\n-\t abort ();\t\t\t\t\t\\\n-       fprintf (FILE, \"%s\", RP);\t\t\t\\\n-       switch ((CODE == 'w' ? 2 \t\t\t\\\n-\t\t: CODE == 'b' ? 1\t\t\t\\\n-\t\t: CODE == 'k' ? 4\t\t\t\\\n-\t\t: CODE == 'y' ? 3\t\t\t\\\n-\t\t: CODE == 'h' ? 0\t\t\t\\\n-\t\t: GET_MODE_SIZE (GET_MODE (X))))\t\\\n-\t {\t\t\t\t\t\t\\\n-\t case 3:\t\t\t\t\t\\\n-\t   if (STACK_TOP_P (X))\t\t\t\t\\\n-\t     {\t\t\t\t\t\t\\\n-\t       fputs (\"st(0)\", FILE);\t\t\t\\\n-\t       break;\t\t\t\t\t\\\n-\t     }\t\t\t\t\t\t\\\n-\t case 4:\t\t\t\t\t\\\n-\t case 8:\t\t\t\t\t\\\n-\t   if (!FP_REG_P (X)) fputs (\"e\", FILE);\t\\\n-\t case 2:\t\t\t\t\t\\\n-\t   fputs (hi_reg_name[REGNO (X)], FILE);\t\\\n-\t   break;\t\t\t\t\t\\\n-\t case 1:\t\t\t\t\t\\\n-\t   fputs (qi_reg_name[REGNO (X)], FILE);\t\\\n-\t   break;\t\t\t\t\t\\\n-\t case 0:\t\t\t\t\t\\\n-\t   fputs (qi_high_reg_name[REGNO (X)], FILE);\t\\\n-\t   break;\t\t\t\t\t\\\n-\t }\t\t\t\t\t\t\\\n-     } while (0)\n-\n /* Meaning of CODE:\n    f -- float insn (print a CONST_DOUBLE as a float rather than in hex).\n    D,L,W,B,Q,S -- print the opcode suffix for specified size of operand."}]}