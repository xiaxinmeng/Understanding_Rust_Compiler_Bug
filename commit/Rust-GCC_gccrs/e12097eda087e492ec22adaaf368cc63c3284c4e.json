{"sha": "e12097eda087e492ec22adaaf368cc63c3284c4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEyMDk3ZWRhMDg3ZTQ5MmVjMjJhZGFhZjM2OGNjNjNjMzI4NGM0ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-01T21:02:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-01T21:02:22Z"}, "message": "Make some parallel mode algorithms usable in constexpr contexts\n\nThis makes the __parallel::equal and __parallel:lexicographical_compare\nalgorithms usable in constant expressions, by dispatching to the\nsequential algorithm when calling during constant evaluation.\n\n\t* include/parallel/algobase.h (equal, lexicographical_compare): Add\n\t_GLIBCXX20_CONSTEXPR and dispatch to sequential algorithm when being\n\tconstant evaluated.\n\t* include/parallel/algorithmfwd.h (equal, lexicographical_compare):\n\tAdd _GLIBCXX20_CONSTEXPR.\n\nFrom-SVN: r276431", "tree": {"sha": "06f33c5fc83ccb572738cc68fbf24923facd7767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06f33c5fc83ccb572738cc68fbf24923facd7767"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e12097eda087e492ec22adaaf368cc63c3284c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12097eda087e492ec22adaaf368cc63c3284c4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e12097eda087e492ec22adaaf368cc63c3284c4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12097eda087e492ec22adaaf368cc63c3284c4e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61e619b4fd1252d0fee7f4bfc821824031c52dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e619b4fd1252d0fee7f4bfc821824031c52dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e619b4fd1252d0fee7f4bfc821824031c52dc5"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "45ad8517bf40f9324f348ae96909eb07b8f65301", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12097eda087e492ec22adaaf368cc63c3284c4e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12097eda087e492ec22adaaf368cc63c3284c4e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e12097eda087e492ec22adaaf368cc63c3284c4e", "patch": "@@ -1,5 +1,11 @@\n 2019-10-01  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/parallel/algobase.h (equal, lexicographical_compare): Add\n+\t_GLIBCXX20_CONSTEXPR and dispatch to sequential algorithm when being\n+\tconstant evaluated.\n+\t* include/parallel/algorithmfwd.h (equal, lexicographical_compare):\n+\tAdd _GLIBCXX20_CONSTEXPR.\n+\n \t* testsuite/17_intro/using_namespace_std_tr1_neg.cc: Skip test for\n \tparallel mode.\n \t* testsuite/20_util/hash/84998.cc: Likewise."}, {"sha": "d78bdc961a120373a9921bc57081396cab047ddb", "filename": "libstdc++-v3/include/parallel/algobase.h", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12097eda087e492ec22adaaf368cc63c3284c4e/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12097eda087e492ec22adaaf368cc63c3284c4e/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h?ref=e12097eda087e492ec22adaaf368cc63c3284c4e", "patch": "@@ -214,19 +214,31 @@ namespace __parallel\n \n   // Public interface\n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2)\n     {\n+#if __cplusplus > 201703L\n+      if (std::is_constant_evaluated())\n+\treturn _GLIBCXX_STD_A::equal(__begin1, __end1, __begin2);\n+#endif\n+\n       return __gnu_parallel::mismatch(__begin1, __end1, __begin2).first\n               == __end1;\n     }\n \n   // Public interface\n   template<typename _IIter1, typename _IIter2, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, \n           _Predicate __pred)\n     {\n+#if __cplusplus > 201703L\n+      if (std::is_constant_evaluated())\n+\treturn _GLIBCXX_STD_A::equal(__begin1, __end1, __begin2, __pred);\n+#endif\n+\n       return __gnu_parallel::mismatch(__begin1, __end1, __begin2, __pred).first\n               == __end1;\n     }\n@@ -286,9 +298,15 @@ namespace __parallel\n     }\n \n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, _IIter2 __end2)\n     {\n+#if __cplusplus > 201703L\n+      if (std::is_constant_evaluated())\n+\treturn _GLIBCXX_STD_A::equal(__begin1, __end1, __begin2, __end2);\n+#endif\n+\n       typedef __gnu_parallel::_EqualTo<\n \ttypename std::iterator_traits<_IIter1>::value_type,\n \ttypename std::iterator_traits<_IIter2>::value_type> _EqualTo;\n@@ -299,15 +317,22 @@ namespace __parallel\n     }\n \n   template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     equal(_IIter1 __begin1, _IIter1 __end1,\n \t  _IIter2 __begin2, _IIter2 __end2, _BinaryPredicate __binary_pred)\n     {\n+#if __cplusplus > 201703L\n+      if (std::is_constant_evaluated())\n+\treturn _GLIBCXX_STD_A::equal(__begin1, __end1, __begin2, __end2,\n+\t\t\t\t     __binary_pred);\n+#endif\n+\n       return __equal_switch(__begin1, __end1, __begin2, __end2, __binary_pred,\n \t\t\t    std::__iterator_category(__begin1),\n \t\t\t    std::__iterator_category(__begin2));\n     }\n-#endif\n+#endif // C++14\n \n   // Sequential fallback\n   template<typename _IIter1, typename _IIter2>\n@@ -391,10 +416,17 @@ namespace __parallel\n \n   // Public interface\n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     lexicographical_compare(_IIter1 __begin1, _IIter1 __end1,\n                             _IIter2 __begin2, _IIter2 __end2)\n     {\n+#if __cplusplus > 201703L\n+      if (std::is_constant_evaluated())\n+\treturn _GLIBCXX_STD_A::lexicographical_compare(__begin1, __end1,\n+\t\t\t\t\t\t       __begin2, __end2);\n+#endif\n+\n       typedef iterator_traits<_IIter1> _TraitsType1;\n       typedef typename _TraitsType1::value_type _ValueType1;\n       typedef typename _TraitsType1::iterator_category _IteratorCategory1;\n@@ -411,11 +443,19 @@ namespace __parallel\n \n   // Public interface\n   template<typename _IIter1, typename _IIter2, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     lexicographical_compare(_IIter1 __begin1, _IIter1 __end1,\n                             _IIter2 __begin2, _IIter2 __end2,\n                             _Predicate __pred)\n     {\n+#if __cplusplus > 201703L\n+      if (std::is_constant_evaluated())\n+\treturn _GLIBCXX_STD_A::lexicographical_compare(__begin1, __end1,\n+\t\t\t\t\t\t       __begin2, __end2,\n+\t\t\t\t\t\t       __pred);\n+#endif\n+\n       typedef iterator_traits<_IIter1> _TraitsType1;\n       typedef typename _TraitsType1::iterator_category _IteratorCategory1;\n "}, {"sha": "a227ebac2a36b8340e47c77ee59405f03ef3798f", "filename": "libstdc++-v3/include/parallel/algorithmfwd.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12097eda087e492ec22adaaf368cc63c3284c4e/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12097eda087e492ec22adaaf368cc63c3284c4e/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h?ref=e12097eda087e492ec22adaaf368cc63c3284c4e", "patch": "@@ -130,10 +130,12 @@ namespace __parallel\n           __gnu_parallel::sequential_tag);\n \n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     equal(_IIter1, _IIter1, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     equal(_IIter1, _IIter1, _IIter2, _Predicate);\n \n@@ -285,10 +287,12 @@ namespace __parallel\n                             __gnu_parallel::sequential_tag);\n \n   template<typename _IIter1, typename _IIter2>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Predicate);\n "}]}