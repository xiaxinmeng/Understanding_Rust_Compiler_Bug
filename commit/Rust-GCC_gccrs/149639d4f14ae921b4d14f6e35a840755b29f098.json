{"sha": "149639d4f14ae921b4d14f6e35a840755b29f098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ5NjM5ZDRmMTRhZTkyMWI0ZDE0ZjZlMzVhODQwNzU1YjI5ZjA5OA==", "commit": {"author": {"name": "Petur Runolfsson", "email": "peturr02@ru.is", "date": "2003-09-03T14:54:03Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-09-03T14:54:03Z"}, "message": "re PR libstdc++/12048 (unget does not work)\n\n\n2003-09-03  Petur Runolfsson  <peturr02@ru.is>\n\n\tPR libstdc++/12048\n\t* include/ext/stdio_sync_filebuf.h\n\t(stdio_sync_filebuf::_M_unget_buf): Declare it.\n\t(stdio_sync_filebuf::stdio_sync_filebuf): Initialize _M_unget_buf.\n\t(stdio_sync_filebuf::uflow): Store the returned character in\n\t_M_unget_buf.\n\t(stdio_sync_filebuf::pbackfail): If argument is eof(), pass\n\t_M_unget_buf to syncungetc(). Set _M_unget_buf to eof().\n\t(stdio_sync_filebuf<char>::xsgetn): Store last read character in\n\t_M_unget_buf, if any, else eof().\n\t(stdio_sync_filebuf<wchar_t>::xsgetn: Store last read character in\n\t_M_unget_buf, if any, else eof().\n\t* testsuite/27_io/objects/char/12048.cc: Rename to...\n\t* testsuite/27_io/objects/char/12048-1.cc: ...this.\n\t* testsuite/27_io/objects/char/12048-2.cc: New test.\n\t* testsuite/27_io/objects/char/12048-3.cc: New test.\n\t* testsuite/27_io/objects/char/12048-4.cc: New test.\n\t* testsuite/27_io/objects/char/12048-5.cc: New test. XFAIL.\n\t* testsuite/27_io/objects/wchar_t/12048-1.cc: New test.\n\t* testsuite/27_io/objects/wchar_t/12048-2.cc: New test.\n\t* testsuite/27_io/objects/wchar_t/12048-3.cc: New test.\n\t* testsuite/27_io/objects/wchar_t/12048-4.cc: New test.\n\t* testsuite/27_io/objects/wchar_t/12048-5.cc: New test. XFAIL.\n\t* testsuite/ext/stdio_sync_filebuf_char.cc\n\t(test02, test03, test04, test05): New tests.\n\t* testsuite/ext/stdio_sync_filebuf_wchar_t.cc\n\t(test02, test03, test04, test05): New tests.\n\n2003-09-03  Petur Runolfsson  <peturr02@ru.is>\n\n\t* docs/html/27_io/howto.html: setbuf(0, 0) has no effect on\n\tstringbuf or strstreambuf. Fix typos.\n\nFrom-SVN: r71026", "tree": {"sha": "171f78496fb967c04d39c1a4fabcdd7216ddcb8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/171f78496fb967c04d39c1a4fabcdd7216ddcb8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/149639d4f14ae921b4d14f6e35a840755b29f098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149639d4f14ae921b4d14f6e35a840755b29f098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149639d4f14ae921b4d14f6e35a840755b29f098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149639d4f14ae921b4d14f6e35a840755b29f098/comments", "author": null, "committer": null, "parents": [{"sha": "916b57cedabb2d80ac3e947a682efa3bce15cf4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916b57cedabb2d80ac3e947a682efa3bce15cf4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916b57cedabb2d80ac3e947a682efa3bce15cf4e"}], "stats": {"total": 258, "additions": 244, "deletions": 14}, "files": [{"sha": "eaca30d41cc82e4401fa2c3a9a50bbbeb9967ea2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149639d4f14ae921b4d14f6e35a840755b29f098/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149639d4f14ae921b4d14f6e35a840755b29f098/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=149639d4f14ae921b4d14f6e35a840755b29f098", "patch": "@@ -1,3 +1,38 @@\n+2003-09-03  Petur Runolfsson  <peturr02@ru.is>\n+\n+\tPR libstdc++/12048\n+\t* include/ext/stdio_sync_filebuf.h\n+\t(stdio_sync_filebuf::_M_unget_buf): Declare it.\n+\t(stdio_sync_filebuf::stdio_sync_filebuf): Initialize _M_unget_buf.\n+\t(stdio_sync_filebuf::uflow): Store the returned character in\n+\t_M_unget_buf.\n+\t(stdio_sync_filebuf::pbackfail): If argument is eof(), pass\n+\t_M_unget_buf to syncungetc(). Set _M_unget_buf to eof().\n+\t(stdio_sync_filebuf<char>::xsgetn): Store last read character in\n+\t_M_unget_buf, if any, else eof().\n+\t(stdio_sync_filebuf<wchar_t>::xsgetn: Store last read character in\n+\t_M_unget_buf, if any, else eof().\n+\t* testsuite/27_io/objects/char/12048.cc: Rename to...\n+\t* testsuite/27_io/objects/char/12048-1.cc: ...this.\n+\t* testsuite/27_io/objects/char/12048-2.cc: New test.\n+\t* testsuite/27_io/objects/char/12048-3.cc: New test.\n+\t* testsuite/27_io/objects/char/12048-4.cc: New test.\n+\t* testsuite/27_io/objects/char/12048-5.cc: New test. XFAIL.\n+\t* testsuite/27_io/objects/wchar_t/12048-1.cc: New test.\n+\t* testsuite/27_io/objects/wchar_t/12048-2.cc: New test.\n+\t* testsuite/27_io/objects/wchar_t/12048-3.cc: New test.\n+\t* testsuite/27_io/objects/wchar_t/12048-4.cc: New test.\n+\t* testsuite/27_io/objects/wchar_t/12048-5.cc: New test. XFAIL.\n+\t* testsuite/ext/stdio_sync_filebuf_char.cc\n+\t(test02, test03, test04, test05): New tests.\n+\t* testsuite/ext/stdio_sync_filebuf_wchar_t.cc\n+\t(test02, test03, test04, test05): New tests.\n+\n+2003-09-03  Petur Runolfsson  <peturr02@ru.is>\n+\n+\t* docs/html/27_io/howto.html: setbuf(0, 0) has no effect on\n+\tstringbuf or strstreambuf. Fix typos.\n+\n 2003-09-02  Phil Edwards  <phil@codesourcery.com>\n \n \t* acinclude.m4 (GLIBCXX_ENABLE_HOSTED):  #define _GLIBCXX_HOSTED"}, {"sha": "35568c453ffe22a75f5477399f2ef0741d75c924", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149639d4f14ae921b4d14f6e35a840755b29f098/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149639d4f14ae921b4d14f6e35a840755b29f098/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=149639d4f14ae921b4d14f6e35a840755b29f098", "patch": "@@ -185,9 +185,10 @@ <h2><a name=\"2\">The buffering is screwing up my program!</a></h2>\n       <code>setbuf()</code>-ish functions; the classes derived from\n       <code>streambuf</code> each define behavior that &quot;makes \n       sense&quot; for that class:  an argument of (0,0) turns off buffering\n-      for <code>filebuf</code> but has undefined behavior for its sibling\n-      <code>stringbuf</code>, and specifying anything other than (0,0) has\n-      varying effects.  Other user-defined class derived from streambuf can\n+      for <code>filebuf</code> but does nothing at all for its siblings\n+      <code>stringbuf</code> and <code>strstreambuf</code>, and specifying\n+      anything other than (0,0) has varying effects.\n+      User-defined classes derived from <code>streambuf</code> can\n       do whatever they want.  (For <code>filebuf</code> and arguments for\n       <code>(p,s)</code> other than zeros, libstdc++ does what you'd expect:\n       the first <code>s</code> bytes of <code>p</code> are used as a buffer,"}, {"sha": "7697d86816e0a70b22b6257a417d190540778d69", "filename": "libstdc++-v3/include/ext/stdio_sync_filebuf.h", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149639d4f14ae921b4d14f6e35a840755b29f098/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149639d4f14ae921b4d14f6e35a840755b29f098/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h?ref=149639d4f14ae921b4d14f6e35a840755b29f098", "patch": "@@ -57,19 +57,27 @@ namespace __gnu_cxx\n   template<typename _CharT, typename _Traits = std::char_traits<_CharT> >\n     class stdio_sync_filebuf : public std::basic_streambuf<_CharT, _Traits>\n     {\n-    private:\n-      std::__c_file* const _M_file;\n-\n-     public:\n+    public:\n       // Types:\n       typedef _CharT                  \t        \tchar_type;\n       typedef _Traits\t\t                    \ttraits_type;\n       typedef typename traits_type::int_type \t\tint_type;\n       typedef typename traits_type::pos_type \t\tpos_type;\n       typedef typename traits_type::off_type \t\toff_type;\n \n+    private:\n+      // Underlying stdio FILE\n+      std::__c_file* const _M_file;\n+      \n+      // Last character gotten. This is used when pbackfail is\n+      // called from basic_streambuf::sungetc()\n+      int_type _M_unget_buf;\n+\n+    public:\n       explicit \n-      stdio_sync_filebuf(std::__c_file* __f) : _M_file(__f) { }\n+      stdio_sync_filebuf(std::__c_file* __f)\n+      : _M_file(__f), _M_unget_buf(traits_type::eof())\n+      { }\n \n     protected:\n \n@@ -91,11 +99,33 @@ namespace __gnu_cxx\n \n       virtual int_type\n       uflow()\n-      { return this->syncgetc(); }\n+      {\n+\t// Store the gotten character in case we need to unget it.\n+\t_M_unget_buf = this->syncgetc();\n+\treturn _M_unget_buf;\n+      }\n \n       virtual int_type\n       pbackfail(int_type __c = traits_type::eof())\n-      { return this->syncungetc(__c); }\n+      {\n+\tint_type __ret;\n+\tconst int_type __eof = traits_type::eof();\n+\n+\t// Check if the unget or putback was requested\n+\tif (traits_type::eq_int_type(__c, __eof)) // unget\n+\t  {\n+\t    if (!traits_type::eq_int_type(_M_unget_buf, __eof))\n+\t      __ret = this->syncungetc(_M_unget_buf);\n+\t    else // buffer invalid, fail.\n+\t      __ret = __eof;\n+\t  }\n+\telse // putback\n+\t  __ret = this->syncungetc(__c);\n+\n+\t// The buffered character is no longer valid, discard it.\n+\t_M_unget_buf = __eof;\n+\treturn __ret;\n+      }\n \n       virtual std::streamsize\n       xsgetn(char_type* __s, std::streamsize __n);\n@@ -179,7 +209,14 @@ namespace __gnu_cxx\n   template<>\n     inline std::streamsize\n     stdio_sync_filebuf<char>::xsgetn(char* __s, std::streamsize __n)\n-    { return std::fread(__s, 1, __n, _M_file); }\n+    {\n+      std::streamsize __ret = std::fread(__s, 1, __n, _M_file);\n+      if (__ret > 0)\n+\t_M_unget_buf = traits_type::to_int_type(__s[__ret - 1]);\n+      else\n+\t_M_unget_buf = traits_type::eof();\n+      return __ret;\n+    }\n \n   template<>\n     inline std::streamsize\n@@ -213,9 +250,14 @@ namespace __gnu_cxx\n \t  int_type __c = this->syncgetc();\n \t  if (traits_type::eq_int_type(__c, __eof))\n \t    break;\n-\t  *__s++ = __c;\n+\t  __s[__ret] = traits_type::to_char_type(__c);\n \t  ++__ret;\n \t}\n+\n+      if (__ret > 0)\n+\t_M_unget_buf = traits_type::to_int_type(__s[__ret - 1]);\n+      else\n+\t_M_unget_buf = traits_type::eof();\n       return __ret;\n     }\n       "}, {"sha": "095829621fbb242fa4f2b6df1181280e112a5d93", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf_char.cc", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149639d4f14ae921b4d14f6e35a840755b29f098/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149639d4f14ae921b4d14f6e35a840755b29f098/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_char.cc?ref=149639d4f14ae921b4d14f6e35a840755b29f098", "patch": "@@ -52,13 +52,89 @@ void test01()\n   VERIFY( sbuf.sgetn(buf, 5) == 5 );\n   VERIFY( !memcmp(buf, c_lit + 3, 5) );\n   VERIFY( getc(fin) == c_lit[8] );\n-  VERIFY( sbuf.sungetc() == EOF );\n \n   fclose(fin);\n }\n \n+// libstdc++/12048\n+void test02()\n+{\n+  bool test = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n+  int c1 = sbuf.sbumpc();\n+  VERIFY( c1 != EOF );\n+  int c2 = sbuf.sungetc();\n+  VERIFY( c2 != EOF );\n+  int c3 = sbuf.sbumpc();\n+  VERIFY( c3 == c1 );\n+\n+  std::fclose(file);\n+}\n+\n+// libstdc++/12048\n+void test03()\n+{\n+  bool test = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n+  int c1 = sbuf.sbumpc();\n+  VERIFY( c1 != EOF );\n+  int c2 = sbuf.sungetc();\n+  VERIFY( c2 != EOF );\n+  int c3 = std::fgetc(file);\n+  VERIFY( c3 == c1 );\n+\n+  std::fclose(file);\n+}\n+\n+// libstdc++/12048\n+void test04()\n+{\n+  bool test = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n+  char buf[2];\n+  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n+  int c2 = sbuf.sungetc();\n+  VERIFY( c2 != EOF );\n+  int c3 = sbuf.sbumpc();\n+  VERIFY( c3 == std::char_traits<char>::to_int_type(buf[1]) );\n+\n+  std::fclose(file);\n+}\n+\n+// libstdc++/12048\n+void test05()\n+{\n+  bool test = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n+  char buf[2];\n+  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n+  int c2 = sbuf.sungetc();\n+  VERIFY( c2 != EOF );\n+  int c3 = std::fgetc(file);\n+  VERIFY( c3 == std::char_traits<char>::to_int_type(buf[1]) );\n+\n+  std::fclose(file);\n+}\n+\n int main ()\n {\n   test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+\n   return 0;\n }"}, {"sha": "25276a2d67774324afe0ce75ef1c494b95b3d48e", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf_wchar_t.cc", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149639d4f14ae921b4d14f6e35a840755b29f098/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149639d4f14ae921b4d14f6e35a840755b29f098/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf_wchar_t.cc?ref=149639d4f14ae921b4d14f6e35a840755b29f098", "patch": "@@ -53,13 +53,89 @@ void test01()\n   VERIFY( wsbuf.sgetn(buf, 5) == 5 );\n   VERIFY( !wmemcmp(buf, w_lit + 3, 5) );\n   VERIFY( getwc(fin) == w_lit[8] );\n-  VERIFY( wsbuf.sungetc() == WEOF );\n \n   fclose(fin);\n }\n \n+// libstdc++/12048\n+void test02()\n+{\n+  bool test = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n+  std::wint_t c1 = sbuf.sbumpc();\n+  VERIFY( c1 != WEOF );\n+  std::wint_t c2 = sbuf.sungetc();\n+  VERIFY( c2 != WEOF );\n+  std::wint_t c3 = sbuf.sbumpc();\n+  VERIFY( c3 == c1 );\n+\n+  std::fclose(file);\n+}\n+\n+// libstdc++/12048\n+void test03()\n+{\n+  bool test = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n+  std::wint_t c1 = sbuf.sbumpc();\n+  VERIFY( c1 != WEOF );\n+  std::wint_t c2 = sbuf.sungetc();\n+  VERIFY( c2 != WEOF );\n+  std::wint_t c3 = std::fgetwc(file);\n+  VERIFY( c3 == c1 );\n+\n+  std::fclose(file);\n+}\n+\n+// libstdc++/12048\n+void test04()\n+{\n+  bool test = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n+  wchar_t buf[2];\n+  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n+  std::wint_t c2 = sbuf.sungetc();\n+  VERIFY( c2 != WEOF );\n+  std::wint_t c3 = sbuf.sbumpc();\n+  VERIFY( c3 == std::char_traits<wchar_t>::to_int_type(buf[1]) );\n+\n+  std::fclose(file);\n+}\n+\n+// libstdc++/12048\n+void test05()\n+{\n+  bool test = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n+  wchar_t buf[2];\n+  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n+  std::wint_t c2 = sbuf.sungetc();\n+  VERIFY( c2 != WEOF );\n+  std::wint_t c3 = std::fgetwc(file);\n+  VERIFY( c3 == std::char_traits<wchar_t>::to_int_type(buf[1]) );\n+\n+  std::fclose(file);\n+}\n+\n int main ()\n {\n   test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+\n   return 0;\n }"}]}