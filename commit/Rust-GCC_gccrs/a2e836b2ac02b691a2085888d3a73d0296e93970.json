{"sha": "a2e836b2ac02b691a2085888d3a73d0296e93970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJlODM2YjJhYzAyYjY5MWEyMDg1ODg4ZDNhNzNkMDI5NmU5Mzk3MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-04-26T06:55:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-04-26T06:55:56Z"}, "message": "Makefile.in (toplev.o): Depend on diagnostic-color.h.\n\n\t* Makefile.in (toplev.o): Depend on diagnostic-color.h.\n\t* diagnostic-color.c (should_colorize): Remove _WIN32 version.\n\t(colorize_init): Add argument to _WIN32 version.\n\t* toplev.c: Include diagnostic-color.h.\n\t(process_options): Default to -fdiagnostics-color=auto if\n\tGCC_COLORS env var is in the environment.\n\t* common.opt (fdiagnostics-color=): Add Var and Init.\n\t* doc/invoke.texi (-fdiagnostics-color=): Document that if\n\tGCC_COLORS env var is in the environment, the default is auto\n\trather than never.\n\n\t* lib/prune.exp: Add -fdiagnostics-color=never to TEST_ALWAYS_FLAGS.\n\t* lib/c-compat.exp (compat-use-alt-compiler, compat_setup_dfp): Handle\n\t-fdiagnostics-color=never option similarly to\n\t-fno-diagnostics-show-caret option.\n\nFrom-SVN: r198332", "tree": {"sha": "51e30ba36c159ac77b30129857b8d14e386bd6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51e30ba36c159ac77b30129857b8d14e386bd6bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2e836b2ac02b691a2085888d3a73d0296e93970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e836b2ac02b691a2085888d3a73d0296e93970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2e836b2ac02b691a2085888d3a73d0296e93970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e836b2ac02b691a2085888d3a73d0296e93970/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e78e8a0b19f9becc90a0bcb4684fb83eae10533f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78e8a0b19f9becc90a0bcb4684fb83eae10533f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78e8a0b19f9becc90a0bcb4684fb83eae10533f"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "749d2838a0be37f1805ef2580a4d1f174fb9634a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2e836b2ac02b691a2085888d3a73d0296e93970", "patch": "@@ -1,5 +1,16 @@\n 2013-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* Makefile.in (toplev.o): Depend on diagnostic-color.h.\n+\t* diagnostic-color.c (should_colorize): Remove _WIN32 version.\n+\t(colorize_init): Add argument to _WIN32 version.\n+\t* toplev.c: Include diagnostic-color.h.\n+\t(process_options): Default to -fdiagnostics-color=auto if\n+\tGCC_COLORS env var is in the environment.\n+\t* common.opt (fdiagnostics-color=): Add Var and Init.\n+\t* doc/invoke.texi (-fdiagnostics-color=): Document that if\n+\tGCC_COLORS env var is in the environment, the default is auto\n+\trather than never.\n+\n \t* diagnostic.h (file_name_as_prefix): Add context argument.\n \t* diagnostic.c (file_name_as_prefix): Likewise.  Colorize\n \tthe string as locus."}, {"sha": "f6fe9aa21b605df3479d070f343293d6efcb71fb", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a2e836b2ac02b691a2085888d3a73d0296e93970", "patch": "@@ -2716,7 +2716,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(OPTS_H) params.def tree-mudflap.h $(TREE_PASS_H) $(GIMPLE_H) \\\n    tree-ssa-alias.h $(PLUGIN_H) realmpfr.h tree-diagnostic.h \\\n    $(TREE_PRETTY_PRINT_H) opts-diagnostic.h $(COMMON_TARGET_H) \\\n-   tsan.h\n+   tsan.h diagnostic-color.h\n \n hwint.o : hwint.c $(CONFIG_H) $(SYSTEM_H) $(DIAGNOSTIC_CORE_H)\n "}, {"sha": "350bf973f760e6786e2686c84044010fd9c3144a", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a2e836b2ac02b691a2085888d3a73d0296e93970", "patch": "@@ -1033,7 +1033,7 @@ Common Alias(fdiagnostics-color=,always,never)\n ;\n \n fdiagnostics-color=\n-Common Joined RejectNegative Enum(diagnostic_color_rule)\n+Common Joined RejectNegative Var(flag_diagnostics_show_color) Enum(diagnostic_color_rule) Init(DIAGNOSTICS_COLOR_NO)\n -fdiagnostics-color=[never|always|auto]\tColorize diagnostics\n \n ; Required for these enum values."}, {"sha": "a1c508a07359f2f54058171dd6d441ce7e8676a3", "filename": "gcc/diagnostic-color.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Fdiagnostic-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Fdiagnostic-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-color.c?ref=a2e836b2ac02b691a2085888d3a73d0296e93970", "patch": "@@ -264,14 +264,8 @@ parse_gcc_colors (void)\n }\n \n #if defined(_WIN32)\n-static bool\n-should_colorize (void)\n-{\n-  return false;\n-}\n-\n bool\n-colorize_init (void)\n+colorize_init (diagnostic_color_rule_t)\n {\n   return false;\n }"}, {"sha": "6eb5c607e7d946c7e7aadbe27082a30f79486f43", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a2e836b2ac02b691a2085888d3a73d0296e93970", "patch": "@@ -2964,9 +2964,10 @@ a message which is too long to fit on a single line.\n @cindex highlight, color, colour\n @vindex GCC_COLORS @r{environment variable}\n Use color in diagnostics.  @var{WHEN} is @samp{never}, @samp{always},\n-or @samp{auto}.  The default is @samp{never}, @samp{auto} means to use color\n-only when the standard error is a terminal. The forms\n-@option{-fdiagnostics-color} and @option{-fno-diagnostics-color} are\n+or @samp{auto}.  The default is @samp{never} if @env{GCC_COLORS} environment\n+variable isn't present in the environment, and @samp{auto} otherwise.\n+@samp{auto} means to use color only when the standard error is a terminal.\n+The forms @option{-fdiagnostics-color} and @option{-fno-diagnostics-color} are\n aliases for @option{-fdiagnostics-color=always} and\n @option{-fdiagnostics-color=never}, respectively.\n "}, {"sha": "5e568fb8dc38c47a7d97018a957e77c62eb1dce0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2e836b2ac02b691a2085888d3a73d0296e93970", "patch": "@@ -1,3 +1,10 @@\n+2013-04-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lib/prune.exp: Add -fdiagnostics-color=never to TEST_ALWAYS_FLAGS.\n+\t* lib/c-compat.exp (compat-use-alt-compiler, compat_setup_dfp): Handle\n+\t-fdiagnostics-color=never option similarly to\n+\t-fno-diagnostics-show-caret option.\n+\n 2013-04-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/57003"}, {"sha": "b42545dfaa44d71e99f27fee58aab4d57e1fdcfe", "filename": "gcc/testsuite/lib/c-compat.exp", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Ftestsuite%2Flib%2Fc-compat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Ftestsuite%2Flib%2Fc-compat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-compat.exp?ref=a2e836b2ac02b691a2085888d3a73d0296e93970", "patch": "@@ -34,7 +34,7 @@ load_lib target-supports.exp\n # \n proc compat-use-alt-compiler { } {\n     global GCC_UNDER_TEST ALT_CC_UNDER_TEST\n-    global compat_same_alt compat_alt_caret\n+    global compat_same_alt compat_alt_caret compat_alt_color\n     global TEST_ALWAYS_FLAGS\n \n     # We don't need to do this if the alternate compiler is actually\n@@ -44,6 +44,9 @@ proc compat-use-alt-compiler { } {\n \tif { $compat_alt_caret == 0 } then {\n \t    regsub -- \"-fno-diagnostics-show-caret\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n \t}\n+\tif { $compat_alt_color == 0 } then {\n+\t    regsub -- \"-fdiagnostics-color=never\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n+\t}\n     }\n }\n \n@@ -70,9 +73,11 @@ proc compat_setup_dfp { } {\n     global compat_same_alt\n     global compat_have_dfp\n     global compat_alt_caret\n+    global compat_alt_color\n     global TEST_ALWAYS_FLAGS compat_save_TEST_ALWAYS_FLAGS\n \n     set compat_alt_caret 0\n+    set compat_alt_color 0\n     set compat_save_TEST_ALWAYS_FLAGS $TEST_ALWAYS_FLAGS\n \n     verbose \"compat_setup_dfp: $compat_use_alt $compat_same_alt\" 2\n@@ -88,6 +93,10 @@ proc compat_setup_dfp { } {\n \t\tint dummy; } \"-fno-diagnostics-show-caret\"] != 0 } {\n \t    set compat_alt_caret 1\n \t}\n+\tif { [check_no_compiler_messages_nocache compat_alt_has_color object {\n+\t\tint dummy; } \"-fdiagnostics-color=never\"] != 0 } {\n+\t    set compat_alt_color 1\n+\t}\n \tcompat-use-tst-compiler\n     }\n "}, {"sha": "789060865038d31e7e65bdd46f6090ee87947c1b", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=a2e836b2ac02b691a2085888d3a73d0296e93970", "patch": "@@ -19,7 +19,7 @@\n if ![info exists TEST_ALWAYS_FLAGS] {\n     set TEST_ALWAYS_FLAGS \"\"\n }\n-set TEST_ALWAYS_FLAGS \"-fno-diagnostics-show-caret $TEST_ALWAYS_FLAGS\"\n+set TEST_ALWAYS_FLAGS \"-fno-diagnostics-show-caret -fdiagnostics-color=never $TEST_ALWAYS_FLAGS\"\n \n proc prune_gcc_output { text } {\n     #send_user \"Before:$text\\n\""}, {"sha": "d41283de93133353b7086269e16064479e3ca3f4", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e836b2ac02b691a2085888d3a73d0296e93970/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a2e836b2ac02b691a2085888d3a73d0296e93970", "patch": "@@ -74,6 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"tree-ssa-alias.h\"\n #include \"plugin.h\"\n+#include \"diagnostic-color.h\"\n \n #if defined(DBX_DEBUGGING_INFO) || defined(XCOFF_DEBUGGING_INFO)\n #include \"dbxout.h\"\n@@ -1209,6 +1210,13 @@ process_options (void)\n \n   maximum_field_alignment = initial_max_fld_align * BITS_PER_UNIT;\n \n+  /* Default to -fdiagnostics-color=auto if GCC_COLORS is in the environment,\n+     otherwise default to -fdiagnostics-color=never.  */\n+  if (!global_options_set.x_flag_diagnostics_show_color\n+      && getenv (\"GCC_COLORS\"))\n+    pp_show_color (global_dc->printer)\n+      = colorize_init (DIAGNOSTICS_COLOR_AUTO);\n+\n   /* Allow the front end to perform consistency checks and do further\n      initialization based on the command line options.  This hook also\n      sets the original filename if appropriate (e.g. foo.i -> foo.c)"}]}