{"sha": "13126368df2c6784969c126425d8ae03e4f1d284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxMjYzNjhkZjJjNjc4NDk2OWMxMjY0MjVkOGFlMDNlNGYxZDI4NA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2017-09-11T08:37:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-11T08:37:51Z"}, "message": "sem_util.adb (Check_Result_And_Post_State): Do not issue a warning about missing reference to an outcome if...\n\n2017-09-11  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.adb (Check_Result_And_Post_State):\n\tDo not issue a warning about missing reference to an outcome if\n\tthe subprogram is ghost and has no outputs.\n\t* lib-xref-spark_specific.adb, sem_aggr.adb, sem_aux.ads: Minor\n\treformatting.\n\nFrom-SVN: r251960", "tree": {"sha": "120a6004ce71c0c5afd16e6076325decbcb98ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/120a6004ce71c0c5afd16e6076325decbcb98ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13126368df2c6784969c126425d8ae03e4f1d284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13126368df2c6784969c126425d8ae03e4f1d284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13126368df2c6784969c126425d8ae03e4f1d284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13126368df2c6784969c126425d8ae03e4f1d284/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6afd4d646d9b262fdb409274af69d2c7ad3f53db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afd4d646d9b262fdb409274af69d2c7ad3f53db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6afd4d646d9b262fdb409274af69d2c7ad3f53db"}], "stats": {"total": 159, "additions": 136, "deletions": 23}, "files": [{"sha": "4b62600d5cb709001c6f8b37c2dc6f0cb0493087", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13126368df2c6784969c126425d8ae03e4f1d284/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13126368df2c6784969c126425d8ae03e4f1d284/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=13126368df2c6784969c126425d8ae03e4f1d284", "patch": "@@ -1,3 +1,11 @@\n+2017-09-11  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Check_Result_And_Post_State):\n+\tDo not issue a warning about missing reference to an outcome if\n+\tthe subprogram is ghost and has no outputs.\n+\t* lib-xref-spark_specific.adb, sem_aggr.adb, sem_aux.ads: Minor\n+        reformatting.\n+\n 2017-09-11  Yannick Moy  <moy@adacore.com>\n \n \t* gnat1drv.adb (Adjust_Global_Switches): Set"}, {"sha": "7542d238224d8f4424ba0c1ee9a9efd50599d8e1", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13126368df2c6784969c126425d8ae03e4f1d284/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13126368df2c6784969c126425d8ae03e4f1d284/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=13126368df2c6784969c126425d8ae03e4f1d284", "patch": "@@ -539,9 +539,9 @@ package body SPARK_Specific is\n \n       function Is_SPARK_Scope (E : Entity_Id) return Boolean is\n          Can_Be_Renamed : constant Boolean :=\n-           Present (E)\n-             and then (Is_Subprogram_Or_Entry (E)\n-                        or else Ekind (E) = E_Package);\n+                            Present (E)\n+                              and then (Is_Subprogram_Or_Entry (E)\n+                                         or else Ekind (E) = E_Package);\n       begin\n          return Present (E)\n            and then not Is_Generic_Unit (E)"}, {"sha": "c885ce914515cbd8db204898724e5ff70f4c8232", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13126368df2c6784969c126425d8ae03e4f1d284/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13126368df2c6784969c126425d8ae03e4f1d284/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=13126368df2c6784969c126425d8ae03e4f1d284", "patch": "@@ -4022,7 +4022,6 @@ package body Sem_Aggr is\n       -------------------\n \n       procedure Rewrite_Range (Root_Type : Entity_Id; Rge : Node_Id) is\n-\n          procedure Rewrite_Bound\n            (Bound     : Node_Id;\n             Disc      : Entity_Id;\n@@ -4063,9 +4062,8 @@ package body Sem_Aggr is\n             Low := Low_Bound (Rge);\n             High := High_Bound (Rge);\n \n-            Disc := First_Discriminant (Root_Type);\n-            Expr_Disc :=\n-              First_Elmt (Stored_Constraint (Etype (N)));\n+            Disc      := First_Discriminant (Root_Type);\n+            Expr_Disc := First_Elmt (Stored_Constraint (Etype (N)));\n             while Present (Disc) loop\n                Rewrite_Bound (Low, Disc, Node (Expr_Disc));\n                Rewrite_Bound (High, Disc, Node (Expr_Disc));\n@@ -4081,9 +4079,9 @@ package body Sem_Aggr is\n       --  Components is the list of the record components whose value must be\n       --  provided in the aggregate. This list does include discriminants.\n \n-      Expr            : Node_Id;\n       Component       : Entity_Id;\n       Component_Elmt  : Elmt_Id;\n+      Expr            : Node_Id;\n       Positional_Expr : Node_Id;\n \n    --  Start of processing for Resolve_Record_Aggregate\n@@ -4669,20 +4667,22 @@ package body Sem_Aggr is\n \n                   if Is_Array_Type (Etype (Expr)) then\n                      declare\n-                        --  Root record type whose discriminants may be used\n-                        --  as bounds in range nodes.\n-                        Root_Type : constant Entity_Id := Scope (Component);\n-                        Index     : Node_Id;\n+                        Rec_Typ : constant Entity_Id := Scope (Component);\n+                        --  Root record type whose discriminants may be used as\n+                        --  bounds in range nodes.\n+\n+                        Index : Node_Id;\n \n                      begin\n                         --  Rewrite the range nodes occurring in the indexes\n                         --  and their types.\n \n                         Index := First_Index (Etype (Expr));\n                         while Present (Index) loop\n-                           Rewrite_Range (Root_Type, Index);\n+                           Rewrite_Range (Rec_Typ, Index);\n                            Rewrite_Range\n-                             (Root_Type, Scalar_Range (Etype (Index)));\n+                             (Rec_Typ, Scalar_Range (Etype (Index)));\n+\n                            Next_Index (Index);\n                         end loop;\n \n@@ -4692,7 +4692,7 @@ package body Sem_Aggr is\n                         if Nkind (Expr) = N_Aggregate\n                           and then Present (Aggregate_Bounds (Expr))\n                         then\n-                           Rewrite_Range (Root_Type, Aggregate_Bounds (Expr));\n+                           Rewrite_Range (Rec_Typ, Aggregate_Bounds (Expr));\n                         end if;\n                      end;\n                   end if;"}, {"sha": "2ab9ef6199bf346d1dd03a5f6e41e5cc3e29df2b", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13126368df2c6784969c126425d8ae03e4f1d284/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13126368df2c6784969c126425d8ae03e4f1d284/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=13126368df2c6784969c126425d8ae03e4f1d284", "patch": "@@ -162,7 +162,8 @@ package Sem_Aux is\n    --  (Op) /= E_Operator.\n \n    function Get_Called_Entity (Call : Node_Id) return Entity_Id;\n-   --  Returns the entity associated with the call\n+   --  Obtain the entity of the entry, operator, or subprogram being invoked\n+   --  by call Call.\n \n    function Get_Low_Bound (E : Entity_Id) return Node_Id;\n    --  For an index subtype or string literal subtype, returns its low bound"}, {"sha": "97c83a26bfc45c1c65d645d7b8d6d6d947350a21", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 111, "deletions": 7, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13126368df2c6784969c126425d8ae03e4f1d284/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13126368df2c6784969c126425d8ae03e4f1d284/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=13126368df2c6784969c126425d8ae03e4f1d284", "patch": "@@ -3501,6 +3501,14 @@ package body Sem_Util is\n             --  Returns True if the message applies to a conjunct in the\n             --  expression, instead of the whole expression.\n \n+            function Has_Global_Output (Subp : Entity_Id) return Boolean;\n+            --  Returns True if Subp has an output in its Global contract\n+\n+            function Has_No_Output (Subp : Entity_Id) return Boolean;\n+            --  Returns True if Subp has no declared output: no function\n+            --  result, no output parameter, and no output in its Global\n+            --  contract.\n+\n             --------------------\n             -- Adjust_Message --\n             --------------------\n@@ -3534,6 +3542,96 @@ package body Sem_Util is\n                  or else Split_PPC (Prag);\n             end Applied_On_Conjunct;\n \n+            -----------------------\n+            -- Has_Global_Output --\n+            -----------------------\n+\n+            function Has_Global_Output (Subp : Entity_Id) return Boolean is\n+               Global : constant Node_Id := Get_Pragma (Subp, Pragma_Global);\n+               List   : Node_Id;\n+               Assoc  : Node_Id;\n+\n+            begin\n+               if No (Global) then\n+                  return False;\n+               end if;\n+\n+               List := Expression (Get_Argument (Global, Subp));\n+\n+               --  Empty list (no global items) or single global item\n+               --  declaration (only input items).\n+\n+               if Nkind_In (List, N_Null,\n+                                  N_Expanded_Name,\n+                                  N_Identifier,\n+                                  N_Selected_Component)\n+               then\n+                  return False;\n+\n+               --  Simple global list (only input items) or moded global list\n+               --  declaration.\n+\n+               elsif Nkind (List) = N_Aggregate then\n+                  if Present (Expressions (List)) then\n+                     return False;\n+\n+                  else\n+                     Assoc := First (Component_Associations (List));\n+                     while Present (Assoc) loop\n+                        if Chars (First (Choices (Assoc))) /= Name_Input then\n+                           return True;\n+                        end if;\n+\n+                        Next (Assoc);\n+                     end loop;\n+\n+                     return False;\n+                  end if;\n+\n+               --  To accommodate partial decoration of disabled SPARK\n+               --  features, this routine may be called with illegal input.\n+               --  If this is the case, do not raise Program_Error.\n+\n+               else\n+                  return False;\n+               end if;\n+            end Has_Global_Output;\n+\n+            -------------------\n+            -- Has_No_Output --\n+            -------------------\n+\n+            function Has_No_Output (Subp : Entity_Id) return Boolean is\n+               Param : Node_Id;\n+\n+            begin\n+               --  A function has its result as output\n+\n+               if Ekind (Subp) = E_Function then\n+                  return False;\n+               end if;\n+\n+               --  An OUT or IN OUT parameter is an output\n+\n+               Param := First_Formal (Subp);\n+               while Present (Param) loop\n+                  if Ekind_In (Param, E_Out_Parameter, E_In_Out_Parameter) then\n+                     return False;\n+                  end if;\n+\n+                  Next_Formal (Param);\n+               end loop;\n+\n+               --  An item of mode Output or In_Out in the Global contract is\n+               --  an output.\n+\n+               if Has_Global_Output (Subp) then\n+                  return False;\n+               end if;\n+\n+               return True;\n+            end Has_No_Output;\n+\n             --  Local variables\n \n             Err_Node : Node_Id;\n@@ -3549,8 +3647,14 @@ package body Sem_Util is\n                Err_Node := Prag;\n             end if;\n \n+            --  Do not report missing reference to outcome in postcondition if\n+            --  either the postcondition is trivially True or False, or if the\n+            --  subprogram is ghost and has no declared output.\n+\n             if not Is_Trivial_Boolean (Expr)\n               and then not Mentions_Post_State (Expr)\n+              and then not (Is_Ghost_Entity (Subp_Id)\n+                             and then Has_No_Output (Subp_Id))\n             then\n                if Pragma_Name (Prag) = Name_Contract_Cases then\n                   Error_Msg_NE (Adjust_Message\n@@ -17303,13 +17407,6 @@ package body Sem_Util is\n    function NCT_Table_Hash (Key : Node_Or_Entity_Id) return NCT_Table_Index;\n    --  Obtain the hash value of node or entity Key\n \n-   NCT_Tables_In_Use : Boolean := False;\n-   --  This flag keeps track of whether the two tables NCT_New_Entities and\n-   --  NCT_Pending_Itypes are in use. The flag is part of an optimization\n-   --  where certain operations are not performed if the tables are not in\n-   --  use. This saves up to 8% of the entire compilation time spent in the\n-   --  front end.\n-\n    --------------------\n    -- NCT_Table_Hash --\n    --------------------\n@@ -17357,6 +17454,13 @@ package body Sem_Util is\n      Hash       => NCT_Table_Hash,\n      Equal      => \"=\");\n \n+   NCT_Tables_In_Use : Boolean := False;\n+   --  This flag keeps track of whether the two tables NCT_New_Entities and\n+   --  NCT_Pending_Itypes are in use. The flag is part of an optimization\n+   --  where certain operations are not performed if the tables are not in\n+   --  use. This saves up to 8% of the entire compilation time spent in the\n+   --  front end.\n+\n    -------------------\n    -- New_Copy_Tree --\n    -------------------"}]}