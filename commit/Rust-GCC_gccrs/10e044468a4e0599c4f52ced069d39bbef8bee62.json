{"sha": "10e044468a4e0599c4f52ced069d39bbef8bee62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBlMDQ0NDY4YTRlMDU5OWM0ZjUyY2VkMDY5ZDM5YmJlZjhiZWU2Mg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-04-29T23:58:17Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-04-29T23:58:17Z"}, "message": "ira.c combine_and_move_insns, and ordering of functions\n\nNotes added by add_store_equivs are not used directly or indirectly by\ncombine_and_move_insns.  add_store_equivs can therefore run later\nwithout affecting the output of combine_and_move_insns, and thus\nadd_store_equivs need not take into account potentially moved insns.\nSince not all potentially combined/moved insns are in fact combined or\nmoved, this may allow add_store_equivs to add more REG_EQUIV notes.\n\ngrow_reg_equivs isn't needed until the reload reg_equivs array is\nchanged.\n\n\tira.c (combine_and_move_insns): Move invariant conditions..\n\t(ira.c): ..to here.  Call combine_and_move_insns before\n\tadd_store_equivs.  Call grow_reg_equivs later.  Allocate\n\treq_equiv later using max_reg_num() rather than global max_regno.\n\t(contains_replace_regs): Delete.\n\t(add_store_equivs): Remove contains_replace_regs test.\n\nFrom-SVN: r235659", "tree": {"sha": "469249cb2530cae37ba53bdb8bff82d185b6d2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/469249cb2530cae37ba53bdb8bff82d185b6d2ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10e044468a4e0599c4f52ced069d39bbef8bee62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e044468a4e0599c4f52ced069d39bbef8bee62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e044468a4e0599c4f52ced069d39bbef8bee62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e044468a4e0599c4f52ced069d39bbef8bee62/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7a99fc66328d85bcda9eb1625143e8e7b20e533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a99fc66328d85bcda9eb1625143e8e7b20e533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a99fc66328d85bcda9eb1625143e8e7b20e533"}], "stats": {"total": 93, "additions": 25, "deletions": 68}, "files": [{"sha": "fca7901e1c03c3e6f95eb6db78d5570051a06ae3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e044468a4e0599c4f52ced069d39bbef8bee62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e044468a4e0599c4f52ced069d39bbef8bee62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10e044468a4e0599c4f52ced069d39bbef8bee62", "patch": "@@ -1,3 +1,12 @@\n+2016-04-30  Alan Modra  <amodra@gmail.com>\n+\n+\tira.c (combine_and_move_insns): Move invariant conditions..\n+\t(ira.c): ..to here.  Call combine_and_move_insns before\n+\tadd_store_equivs.  Call grow_reg_equivs later.  Allocate\n+\treq_equiv later using max_reg_num() rather than global max_regno.\n+\t(contains_replace_regs): Delete.\n+\t(add_store_equivs): Remove contains_replace_regs test.\n+\n 2016-04-30  Alan Modra  <amodra@gmail.com>\n \n \t* ira.c (struct equiv_mem_data): New."}, {"sha": "91225f6be2cd808988505bbdbdb09d690af11333", "filename": "gcc/ira.c", "status": "modified", "additions": 16, "deletions": 68, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e044468a4e0599c4f52ced069d39bbef8bee62/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e044468a4e0599c4f52ced069d39bbef8bee62/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=10e044468a4e0599c4f52ced069d39bbef8bee62", "patch": "@@ -3120,51 +3120,6 @@ equiv_init_movable_p (rtx x, int regno)\n   return 1;\n }\n \n-/* TRUE if X uses any registers for which reg_equiv[REGNO].replace is\n-   true.  */\n-static int\n-contains_replace_regs (rtx x)\n-{\n-  int i, j;\n-  const char *fmt;\n-  enum rtx_code code = GET_CODE (x);\n-\n-  switch (code)\n-    {\n-    case CONST:\n-    case LABEL_REF:\n-    case SYMBOL_REF:\n-    CASE_CONST_ANY:\n-    case PC:\n-    case CC0:\n-    case HIGH:\n-      return 0;\n-\n-    case REG:\n-      return reg_equiv[REGNO (x)].replace;\n-\n-    default:\n-      break;\n-    }\n-\n-  fmt = GET_RTX_FORMAT (code);\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    switch (fmt[i])\n-      {\n-      case 'e':\n-\tif (contains_replace_regs (XEXP (x, i)))\n-\t  return 1;\n-\tbreak;\n-      case 'E':\n-\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t  if (contains_replace_regs (XVECEXP (x, i, j)))\n-\t    return 1;\n-\tbreak;\n-      }\n-\n-  return 0;\n-}\n-\n /* TRUE if X references a memory location that would be affected by a store\n    to MEMREF.  */\n static int\n@@ -3634,13 +3589,7 @@ add_store_equivs (void)\n       src = SET_SRC (set);\n \n       /* Don't add a REG_EQUIV note if the insn already has one.  The existing\n-\t REG_EQUIV is likely more useful than the one we are adding.\n-\n-\t If one of the regs in the address has reg_equiv[REGNO].replace set,\n-\t then we can't add this REG_EQUIV note.  The reg_equiv[REGNO].replace\n-\t optimization may move the set of this register immediately before\n-\t insn, which puts it after reg_equiv[REGNO].init_insns, and hence the\n-\t mention in the REG_EQUIV note would be to an uninitialized pseudo.  */\n+\t REG_EQUIV is likely more useful than the one we are adding.  */\n       if (MEM_P (dest) && REG_P (src)\n \t  && (regno = REGNO (src)) >= FIRST_PSEUDO_REGISTER\n \t  && REG_BASIC_BLOCK (regno) >= NUM_FIXED_BLOCKS\n@@ -3650,7 +3599,6 @@ add_store_equivs (void)\n \t  && (init_insn = reg_equiv[regno].init_insns->insn ()) != 0\n \t  && bitmap_bit_p (&seen_insns, INSN_UID (init_insn))\n \t  && ! find_reg_note (init_insn, REG_EQUIV, NULL_RTX)\n-\t  && ! contains_replace_regs (XEXP (dest, 0))\n \t  && validate_equiv_mem (init_insn, src, dest)\n \t  && ! memref_used_between_p (dest, init_insn, insn)\n \t  /* Attaching a REG_EQUIV note will fail if INIT_INSN has\n@@ -3714,14 +3662,7 @@ combine_and_move_insns (void)\n \t\t  rtx equiv_insn;\n \n \t\t  if (! reg_equiv[regno].replace\n-\t\t      || reg_equiv[regno].loop_depth < (short) loop_depth\n-\t\t      /* There is no sense to move insns if live range\n-\t\t\t shrinkage or register pressure-sensitive\n-\t\t\t scheduling were done because it will not\n-\t\t\t improve allocation but worsen insn schedule\n-\t\t\t with a big probability.  */\n-\t\t      || flag_live_range_shrinkage\n-\t\t      || (flag_sched_pressure && flag_schedule_insns))\n+\t\t      || reg_equiv[regno].loop_depth < (short) loop_depth)\n \t\t    continue;\n \n \t\t  /* reg_equiv[REGNO].replace gets set only when\n@@ -5222,20 +5163,27 @@ ira (FILE *f)\n   if (resize_reg_info () && flag_ira_loop_pressure)\n     ira_set_pseudo_classes (true, ira_dump_file);\n \n-  reg_equiv = XCNEWVEC (struct equivalence, max_regno);\n-  grow_reg_equivs ();\n   init_alias_analysis ();\n+  reg_equiv = XCNEWVEC (struct equivalence, max_reg_num ());\n   update_equiv_regs ();\n+\n+  /* Don't move insns if live range shrinkage or register\n+     pressure-sensitive scheduling were done because it will not\n+     improve allocation but likely worsen insn scheduling.  */\n+  if (optimize\n+      && !flag_live_range_shrinkage\n+      && !(flag_sched_pressure && flag_schedule_insns))\n+    combine_and_move_insns ();\n+\n+  /* Gather additional equivalences with memory.  */\n   if (optimize)\n-    {\n-      /* Gather additional equivalences with memory.  */\n-      add_store_equivs ();\n-      combine_and_move_insns ();\n-    }\n+    add_store_equivs ();\n+\n   end_alias_analysis ();\n   free (reg_equiv);\n \n   setup_reg_equiv ();\n+  grow_reg_equivs ();\n   setup_reg_equiv_init ();\n \n   allocated_reg_info_size = max_reg_num ();"}]}