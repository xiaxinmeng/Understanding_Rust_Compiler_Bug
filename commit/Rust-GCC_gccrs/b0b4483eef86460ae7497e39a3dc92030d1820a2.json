{"sha": "b0b4483eef86460ae7497e39a3dc92030d1820a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBiNDQ4M2VlZjg2NDYwYWU3NDk3ZTM5YTNkYzkyMDMwZDE4MjBhMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-20T12:28:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-20T12:28:10Z"}, "message": "tree-vect-slp.c (vect_get_and_check_slp_defs): Try swapping operands to get a def operand kind match.\n\n2014-10-20  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Try swapping\n\toperands to get a def operand kind match.  Signal mismatches\n\tto the parent so we can try swapping its operands.\n\t(vect_build_slp_tree): Try swapping operands if they have\n\ta mismatched operand kind.\n\nFrom-SVN: r216463", "tree": {"sha": "71ddd6771f6fa6e29825bf13781fe14ae32c60de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71ddd6771f6fa6e29825bf13781fe14ae32c60de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0b4483eef86460ae7497e39a3dc92030d1820a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b4483eef86460ae7497e39a3dc92030d1820a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b4483eef86460ae7497e39a3dc92030d1820a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b4483eef86460ae7497e39a3dc92030d1820a2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c11c86648896159fd96cd276a33ddbaa4e777cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11c86648896159fd96cd276a33ddbaa4e777cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c11c86648896159fd96cd276a33ddbaa4e777cca"}], "stats": {"total": 118, "additions": 92, "deletions": 26}, "files": [{"sha": "9cf6880d8b0349f03a2498c1c95bfc2d93cb2d50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b4483eef86460ae7497e39a3dc92030d1820a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b4483eef86460ae7497e39a3dc92030d1820a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0b4483eef86460ae7497e39a3dc92030d1820a2", "patch": "@@ -1,3 +1,11 @@\n+2014-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Try swapping\n+\toperands to get a def operand kind match.  Signal mismatches\n+\tto the parent so we can try swapping its operands.\n+\t(vect_build_slp_tree): Try swapping operands if they have\n+\ta mismatched operand kind.\n+\n 2014-10-20  Alan Modra  <amodra@gmail.com>\n \n \tPR debug/60655"}, {"sha": "81017fbfd8ca864e6a6cd161b2e752f253b696b8", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 84, "deletions": 26, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b4483eef86460ae7497e39a3dc92030d1820a2/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b4483eef86460ae7497e39a3dc92030d1820a2/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=b0b4483eef86460ae7497e39a3dc92030d1820a2", "patch": "@@ -205,9 +205,11 @@ vect_get_place_in_interleaving_chain (gimple stmt, gimple first_stmt)\n \n /* Get the defs for the rhs of STMT (collect them in OPRNDS_INFO), check that\n    they are of a valid type and that they match the defs of the first stmt of\n-   the SLP group (stored in OPRNDS_INFO).  */\n+   the SLP group (stored in OPRNDS_INFO).  If there was a fatal error\n+   return -1, if the error could be corrected by swapping operands of the\n+   operation return 1, if everything is ok return 0.  */\n \n-static bool\n+static int \n vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n                              gimple stmt, bool first,\n                              vec<slp_oprnd_info> *oprnds_info)\n@@ -220,44 +222,51 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n   struct loop *loop = NULL;\n   bool pattern = false;\n   slp_oprnd_info oprnd_info;\n-  int op_idx = 1;\n-  tree compare_rhs = NULL_TREE;\n+  int first_op_idx = 1;\n+  bool commutative = false;\n+  bool first_op_cond = false;\n \n   if (loop_vinfo)\n     loop = LOOP_VINFO_LOOP (loop_vinfo);\n \n   if (is_gimple_call (stmt))\n     {\n       number_of_oprnds = gimple_call_num_args (stmt);\n-      op_idx = 3;\n+      first_op_idx = 3;\n     }\n   else if (is_gimple_assign (stmt))\n     {\n+      enum tree_code code = gimple_assign_rhs_code (stmt);\n       number_of_oprnds = gimple_num_ops (stmt) - 1;\n       if (gimple_assign_rhs_code (stmt) == COND_EXPR)\n-        number_of_oprnds++;\n+\t{\n+\t  first_op_cond = true;\n+\t  commutative = true;\n+\t  number_of_oprnds++;\n+\t}\n+      else\n+\tcommutative = commutative_tree_code (code);\n     }\n   else\n-    return false;\n+    return -1;\n \n+  bool swapped = false;\n   for (i = 0; i < number_of_oprnds; i++)\n     {\n-      if (compare_rhs)\n+again:\n+      if (first_op_cond)\n \t{\n-\t  oprnd = compare_rhs;\n-\t  compare_rhs = NULL_TREE;\n+\t  if (i == 0 || i == 1)\n+\t    oprnd = TREE_OPERAND (gimple_op (stmt, first_op_idx),\n+\t\t\t\t  swapped ? !i : i);\n+\t  else\n+\t    oprnd = gimple_op (stmt, first_op_idx + i - 1);\n \t}\n       else\n-        oprnd = gimple_op (stmt, op_idx++);\n+        oprnd = gimple_op (stmt, first_op_idx + (swapped ? !i : i));\n \n       oprnd_info = (*oprnds_info)[i];\n \n-      if (COMPARISON_CLASS_P (oprnd))\n-        {\n-          compare_rhs = TREE_OPERAND (oprnd, 1);\n-          oprnd = TREE_OPERAND (oprnd, 0);\n-\t}\n-\n       if (!vect_is_simple_use (oprnd, NULL, loop_vinfo, bb_vinfo, &def_stmt,\n \t\t\t       &def, &dt)\n \t  || (!def_stmt && dt != vect_constant_def))\n@@ -270,7 +279,7 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n               dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t    }\n \n-\t  return false;\n+\t  return -1;\n \t}\n \n       /* Check if DEF_STMT is a part of a pattern in LOOP and get the def stmt\n@@ -288,6 +297,14 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n           pattern = true;\n           if (!first && !oprnd_info->first_pattern)\n \t    {\n+\t      if (i == 0\n+\t\t  && !swapped\n+\t\t  && commutative)\n+\t\t{\n+\t\t  swapped = true;\n+\t\t  goto again;\n+\t\t}\n+\n \t      if (dump_enabled_p ())\n \t\t{\n \t\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -297,7 +314,7 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n                   dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t}\n \n-\t      return false;\n+\t      return 1;\n             }\n \n           def_stmt = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (def_stmt));\n@@ -308,7 +325,7 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n               if (dump_enabled_p ())\n                 dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t \"Unsupported pattern.\\n\");\n-              return false;\n+              return -1;\n             }\n \n           switch (gimple_code (def_stmt))\n@@ -325,7 +342,7 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n                 if (dump_enabled_p ())\n                   dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t   \"unsupported defining stmt:\\n\");\n-                return false;\n+                return -1;\n             }\n         }\n \n@@ -352,11 +369,20 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n                || !types_compatible_p (oprnd_info->first_op_type,\n \t\t\t\t       TREE_TYPE (oprnd))))\n \t    {\n+\t      /* Try swapping operands if we got a mismatch.  */\n+\t      if (i == 0\n+\t\t  && !swapped\n+\t\t  && commutative)\n+\t\t{\n+\t\t  swapped = true;\n+\t\t  goto again;\n+\t\t}\n+\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t \"Build SLP failed: different types\\n\");\n \n-\t      return false;\n+\t      return 1;\n \t    }\n \t}\n \n@@ -382,11 +408,26 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n               dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t    }\n \n-\t  return false;\n+\t  return -1;\n \t}\n     }\n \n-  return true;\n+  /* Swap operands.  */\n+  if (swapped)\n+    {\n+      if (first_op_cond)\n+\t{\n+\t  tree cond = gimple_assign_rhs1 (stmt);\n+\t  swap_ssa_operands (stmt, &TREE_OPERAND (cond, 0),\n+\t\t\t     &TREE_OPERAND (cond, 1));\n+\t  TREE_SET_CODE (cond, swap_tree_comparison (TREE_CODE (cond)));\n+\t}\n+      else\n+\tswap_ssa_operands (stmt, gimple_assign_rhs1_ptr (stmt),\n+\t\t\t   gimple_assign_rhs2_ptr (stmt));\n+    }\n+\n+  return 0;\n }\n \n \n@@ -892,13 +933,26 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n   slp_oprnd_info oprnd_info;\n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (*node), i, stmt)\n     {\n-      if (!vect_get_and_check_slp_defs (loop_vinfo, bb_vinfo,\n-\t\t\t\t\tstmt, (i == 0), &oprnds_info))\n+      switch (vect_get_and_check_slp_defs (loop_vinfo, bb_vinfo,\n+\t\t\t\t\t   stmt, (i == 0), &oprnds_info))\n \t{\n+\tcase 0:\n+\t  break;\n+\tcase -1:\n+\t  matches[0] = false;\n \t  vect_free_oprnd_info (oprnds_info);\n \t  return false;\n+\tcase 1:\n+\t  matches[i] = false;\n+\t  break;\n \t}\n     }\n+  for (i = 0; i < group_size; ++i)\n+    if (!matches[i])\n+      {\n+\tvect_free_oprnd_info (oprnds_info);\n+\treturn false;\n+      }\n \n   stmt = SLP_TREE_SCALAR_STMTS (*node)[0];\n \n@@ -958,13 +1012,17 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t  *max_nunits = old_max_nunits;\n \t  loads->truncate (old_nloads);\n \t  /* Swap mismatched definition stmts.  */\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"Re-trying with swapped operands of stmts \");\n \t  for (unsigned j = 0; j < group_size; ++j)\n \t    if (!matches[j])\n \t      {\n \t\tgimple tem = oprnds_info[0]->def_stmts[j];\n \t\toprnds_info[0]->def_stmts[j] = oprnds_info[1]->def_stmts[j];\n \t\toprnds_info[1]->def_stmts[j] = tem;\n+\t\tdump_printf (MSG_NOTE, \"%d \", j);\n \t      }\n+\t  dump_printf (MSG_NOTE, \"\\n\");\n \t  /* And try again ... */\n \t  if (vect_build_slp_tree (loop_vinfo, bb_vinfo, &child,\n \t\t\t\t   group_size, max_nunits, loads,"}]}