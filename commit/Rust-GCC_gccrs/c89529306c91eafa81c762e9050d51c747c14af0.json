{"sha": "c89529306c91eafa81c762e9050d51c747c14af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5NTI5MzA2YzkxZWFmYTgxYzc2MmU5MDUwZDUxYzc0N2MxNGFmMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-12-07T19:45:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-07T19:45:45Z"}, "message": "builtins.c (fold_builtin_strstr): Removed.\n\n\t* builtins.c (fold_builtin_strstr): Removed.\n\t(fold_builtin_2): Don't call fold_builtin_strstr.\n\t* gimple-fold.c (gimple_fold_builtin_strchr): Check is_strrchr\n\tearlier in the strrchr (x, 0) -> strchr (x, 0) optimization.\n\t(gimple_fold_builtin_strstr): New function.\n\t(gimple_fold_builtin): Call it.\n\t* fold-const-call.c (fold_const_call): Handle CFN_BUILT_IN_STRSTR.\n\n\t* gcc.dg/builtin-strstr-1.c: New test.\n\t* g++.dg/cpp0x/constexpr-strstr.C: New test.\n\nFrom-SVN: r243378", "tree": {"sha": "bd3017b456fa1faec07937e6000fdcee0fa4895e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd3017b456fa1faec07937e6000fdcee0fa4895e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c89529306c91eafa81c762e9050d51c747c14af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89529306c91eafa81c762e9050d51c747c14af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89529306c91eafa81c762e9050d51c747c14af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89529306c91eafa81c762e9050d51c747c14af0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77f1efdbe8fe401040adb9b2b43aac85916682ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f1efdbe8fe401040adb9b2b43aac85916682ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f1efdbe8fe401040adb9b2b43aac85916682ac"}], "stats": {"total": 208, "additions": 136, "deletions": 72}, "files": [{"sha": "cc6dc718bdfa1dcd4f0e2740df94d33e8c9c17c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c89529306c91eafa81c762e9050d51c747c14af0", "patch": "@@ -1,5 +1,13 @@\n 2016-12-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* builtins.c (fold_builtin_strstr): Removed.\n+\t(fold_builtin_2): Don't call fold_builtin_strstr.\n+\t* gimple-fold.c (gimple_fold_builtin_strchr): Check is_strrchr\n+\tearlier in the strrchr (x, 0) -> strchr (x, 0) optimization.\n+\t(gimple_fold_builtin_strstr): New function.\n+\t(gimple_fold_builtin): Call it.\n+\t* fold-const-call.c (fold_const_call): Handle CFN_BUILT_IN_STRSTR.\n+\n \tPR c++/78692\n \t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Set lhs\n \tvar to lhs of new_stmt right before noreturn handling rather than to"}, {"sha": "58ed469fc63c7925db9587ef34035ba2a3ff6ecb", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c89529306c91eafa81c762e9050d51c747c14af0", "patch": "@@ -163,7 +163,6 @@ static tree fold_builtin_3 (location_t, tree, tree, tree, tree);\n static tree fold_builtin_varargs (location_t, tree, tree*, int);\n \n static tree fold_builtin_strpbrk (location_t, tree, tree, tree);\n-static tree fold_builtin_strstr (location_t, tree, tree, tree);\n static tree fold_builtin_strspn (location_t, tree, tree);\n static tree fold_builtin_strcspn (location_t, tree, tree);\n \n@@ -8303,9 +8302,6 @@ fold_builtin_2 (location_t loc, tree fndecl, tree arg0, tree arg1)\n     CASE_FLT_FN (BUILT_IN_MODF):\n       return fold_builtin_modf (loc, arg0, arg1, type);\n \n-    case BUILT_IN_STRSTR:\n-      return fold_builtin_strstr (loc, arg0, arg1, type);\n-\n     case BUILT_IN_STRSPN:\n       return fold_builtin_strspn (loc, arg0, arg1);\n \n@@ -8729,72 +8725,6 @@ readonly_data_expr (tree exp)\n     return false;\n }\n \n-/* Simplify a call to the strstr builtin.  S1 and S2 are the arguments\n-   to the call, and TYPE is its return type.\n-\n-   Return NULL_TREE if no simplification was possible, otherwise return the\n-   simplified form of the call as a tree.\n-\n-   The simplified form may be a constant or other expression which\n-   computes the same value, but in a more efficient manner (including\n-   calls to other builtin functions).\n-\n-   The call may contain arguments which need to be evaluated, but\n-   which are not useful to determine the result of the call.  In\n-   this case we return a chain of COMPOUND_EXPRs.  The LHS of each\n-   COMPOUND_EXPR will be an argument which must be evaluated.\n-   COMPOUND_EXPRs are chained through their RHS.  The RHS of the last\n-   COMPOUND_EXPR in the chain will contain the tree for the simplified\n-   form of the builtin function call.  */\n-\n-static tree\n-fold_builtin_strstr (location_t loc, tree s1, tree s2, tree type)\n-{\n-  if (!validate_arg (s1, POINTER_TYPE)\n-      || !validate_arg (s2, POINTER_TYPE))\n-    return NULL_TREE;\n-  else\n-    {\n-      tree fn;\n-      const char *p1, *p2;\n-\n-      p2 = c_getstr (s2);\n-      if (p2 == NULL)\n-\treturn NULL_TREE;\n-\n-      p1 = c_getstr (s1);\n-      if (p1 != NULL)\n-\t{\n-\t  const char *r = strstr (p1, p2);\n-\t  tree tem;\n-\n-\t  if (r == NULL)\n-\t    return build_int_cst (TREE_TYPE (s1), 0);\n-\n-\t  /* Return an offset into the constant string argument.  */\n-\t  tem = fold_build_pointer_plus_hwi_loc (loc, s1, r - p1);\n-\t  return fold_convert_loc (loc, type, tem);\n-\t}\n-\n-      /* The argument is const char *, and the result is char *, so we need\n-\t a type conversion here to avoid a warning.  */\n-      if (p2[0] == '\\0')\n-\treturn fold_convert_loc (loc, type, s1);\n-\n-      if (p2[1] != '\\0')\n-\treturn NULL_TREE;\n-\n-      fn = builtin_decl_implicit (BUILT_IN_STRCHR);\n-      if (!fn)\n-\treturn NULL_TREE;\n-\n-      /* New argument list transforming strstr(s1, s2) to\n-\t strchr(s1, s2[0]).  */\n-      return build_call_expr_loc (loc, fn, 2, s1,\n-\t\t\t\t  build_int_cst (integer_type_node, p2[0]));\n-    }\n-}\n-\n /* Simplify a call to the strpbrk builtin.  S1 and S2 are the arguments\n    to the call, and TYPE is its return type.\n "}, {"sha": "f978da3342c91c4eea9cfc8dfc5e1e57c4d7d725", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=c89529306c91eafa81c762e9050d51c747c14af0", "patch": "@@ -1434,6 +1434,22 @@ fold_const_call (combined_fn fn, tree type, tree arg0, tree arg1)\n \t}\n       return NULL_TREE;\n \n+    case CFN_BUILT_IN_STRSTR:\n+      if ((p1 = c_getstr (arg1)))\n+\t{\n+\t  if ((p0 = c_getstr (arg0)))\n+\t    {\n+\t      const char *r = strstr (p0, p1);\n+\t      if (r == NULL)\n+\t\treturn build_int_cst (type, 0);\n+\t      return fold_convert (type,\n+\t\t\t\t   fold_build_pointer_plus_hwi (arg0, r - p0));\n+\t    }\n+\t  if (*p1 == '\\0')\n+\t    return fold_convert (type, arg0);\n+\t}\n+      return NULL_TREE;\n+\n     default:\n       return fold_const_call_1 (fn, type, arg0, arg1);\n     }"}, {"sha": "d00625bec882509faced2fd72af832cf1982007b", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=c89529306c91eafa81c762e9050d51c747c14af0", "patch": "@@ -1506,11 +1506,11 @@ gimple_fold_builtin_strchr (gimple_stmt_iterator *gsi, bool is_strrchr)\n     return false;\n \n   /* Transform strrchr (s, 0) to strchr (s, 0) when optimizing for size.  */\n-  if (optimize_function_for_size_p (cfun))\n+  if (is_strrchr && optimize_function_for_size_p (cfun))\n     {\n       tree strchr_fn = builtin_decl_implicit (BUILT_IN_STRCHR);\n \n-      if (is_strrchr && strchr_fn)\n+      if (strchr_fn)\n \t{\n \t  gimple *repl = gimple_build_call (strchr_fn, 2, str, c);\n \t  replace_call_with_call_and_fold (gsi, repl);\n@@ -1549,6 +1549,68 @@ gimple_fold_builtin_strchr (gimple_stmt_iterator *gsi, bool is_strrchr)\n   return true;\n }\n \n+/* Fold function call to builtin strstr.\n+   If both arguments are constant, evaluate and fold the result,\n+   additionally fold strstr (x, \"\") into x and strstr (x, \"c\")\n+   into strchr (x, 'c').  */\n+static bool\n+gimple_fold_builtin_strstr (gimple_stmt_iterator *gsi)\n+{\n+  gimple *stmt = gsi_stmt (*gsi);\n+  tree haystack = gimple_call_arg (stmt, 0);\n+  tree needle = gimple_call_arg (stmt, 1);\n+  const char *p, *q;\n+\n+  if (!gimple_call_lhs (stmt))\n+    return false;\n+\n+  q = c_getstr (needle);\n+  if (q == NULL)\n+    return false;\n+\n+  if ((p = c_getstr (haystack)))\n+    {\n+      const char *r = strstr (p, q);\n+\n+      if (r == NULL)\n+\t{\n+\t  replace_call_with_value (gsi, integer_zero_node);\n+\t  return true;\n+\t}\n+\n+      tree len = build_int_cst (size_type_node, r - p);\n+      gimple_seq stmts = NULL;\n+      gimple *new_stmt\n+\t= gimple_build_assign (gimple_call_lhs (stmt), POINTER_PLUS_EXPR,\n+\t\t\t       haystack, len);\n+      gimple_seq_add_stmt_without_update (&stmts, new_stmt);\n+      gsi_replace_with_seq_vops (gsi, stmts);\n+      return true;\n+    }\n+\n+  /* For strstr (x, \"\") return x.  */\n+  if (q[0] == '\\0')\n+    {\n+      replace_call_with_value (gsi, haystack);\n+      return true;\n+    }\n+\n+  /* Transform strstr (x, \"c\") into strchr (x, 'c').  */\n+  if (q[1] == '\\0')\n+    {\n+      tree strchr_fn = builtin_decl_implicit (BUILT_IN_STRCHR);\n+      if (strchr_fn)\n+\t{\n+\t  tree c = build_int_cst (integer_type_node, q[0]);\n+\t  gimple *repl = gimple_build_call (strchr_fn, 2, haystack, c);\n+\t  replace_call_with_call_and_fold (gsi, repl);\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n /* Simplify a call to the strcat builtin.  DST and SRC are the arguments\n    to the call.\n \n@@ -3236,6 +3298,8 @@ gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case BUILT_IN_RINDEX:\n     case BUILT_IN_STRRCHR:\n       return gimple_fold_builtin_strchr (gsi, true);\n+    case BUILT_IN_STRSTR:\n+      return gimple_fold_builtin_strstr (gsi);\n     case BUILT_IN_STRCMP:\n     case BUILT_IN_STRCASECMP:\n     case BUILT_IN_STRNCMP:"}, {"sha": "1c3f290762dbaf264f12625a51405848365bb119", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c89529306c91eafa81c762e9050d51c747c14af0", "patch": "@@ -1,5 +1,8 @@\n 2016-12-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/builtin-strstr-1.c: New test.\n+\t* g++.dg/cpp0x/constexpr-strstr.C: New test.\n+\n \tPR c++/78692\n \t* g++.dg/torture/pr78692.C: New test.\n "}, {"sha": "426890905b4e322dac40e447fe32213901bc5445", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-strstr.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-strstr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-strstr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-strstr.C?ref=c89529306c91eafa81c762e9050d51c747c14af0", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++11 } }\n+\n+constexpr const char *f1 (const char *p, const char *q) { return __builtin_strstr (p, q); }\n+constexpr const char a[] = \"abcdefedcbaaaaab\";\n+constexpr const char b[] = \"fed\";\n+constexpr const char c[] = \"aaab\";\n+static_assert (f1 (\"abcde\", \"ee\") == nullptr, \"\");\n+static_assert (f1 (a, b) == a + 5, \"\");\n+static_assert (f1 (a, c) == a + 12, \"\");\n+static_assert (f1 (a, \"\") == a, \"\");\n+static_assert (f1 (a, \"aaaaaab\") == nullptr, \"\");\n+static_assert (f1 (a, \"aaa\") == a + 10, \"\");"}, {"sha": "9d584b67c95f0c8a10e3e1ad1194d29467b3cda2", "filename": "gcc/testsuite/gcc.dg/builtin-strstr-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-strstr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89529306c91eafa81c762e9050d51c747c14af0/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-strstr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-strstr-1.c?ref=c89529306c91eafa81c762e9050d51c747c14af0", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_strstr\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"return p_\\[0-9]*.D.;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_strchr\" 1 \"optimized\" } } */\n+\n+extern void link_error (void);\n+\n+void\n+foo (void)\n+{\n+  const char *p = \"abcdef\";\n+  const char *q = \"def\";\n+  p++;\n+  q++;\n+  if (__builtin_strstr (p, q) != p + 3)\n+    link_error ();\n+}\n+\n+char *\n+bar (const char *p)\n+{\n+  return __builtin_strstr (p, \"\");\n+}\n+\n+char *\n+baz (const char *p)\n+{\n+  return __builtin_strstr (p, \"d\");\n+}"}]}