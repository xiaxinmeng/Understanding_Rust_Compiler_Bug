{"sha": "5a79bcc454b5792db3471c4deba84630b2c26dd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE3OWJjYzQ1NGI1NzkyZGIzNDcxYzRkZWJhODQ2MzBiMmMyNmRkNw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2010-09-09T02:30:54Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2010-09-09T02:30:54Z"}, "message": "invoke.text: Reinstate mcmodel=medium.\n\n\t* doc/invoke.text: Reinstate mcmodel=medium.\n\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Set\n\tCMODEL_MEDIUM as default.\n\t* config/rs6000/rs6000.h (enum rs6000_cmodel): Add CMODEL_MEDIUM.\n\t* config/rs6000/rs6000.c (rs6000_handle_option): Add mcmodel=medium.\n\t(toc_relative_ok, offsettable_ok_by_alignment): New functions.\n\t(rs6000_emit_move): Reinstate mcmodel=medium optimization.\n\nFrom-SVN: r164045", "tree": {"sha": "973fb37729da99edb86f368e6501cb1f8334f719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/973fb37729da99edb86f368e6501cb1f8334f719"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a79bcc454b5792db3471c4deba84630b2c26dd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a79bcc454b5792db3471c4deba84630b2c26dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a79bcc454b5792db3471c4deba84630b2c26dd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a79bcc454b5792db3471c4deba84630b2c26dd7/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5b281c0ed43ec7ac3e5851e28bcc5825aa26c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b281c0ed43ec7ac3e5851e28bcc5825aa26c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b281c0ed43ec7ac3e5851e28bcc5825aa26c6b"}], "stats": {"total": 110, "additions": 103, "deletions": 7}, "files": [{"sha": "b42132227af8fe2993449c4ac429129560368b32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79bcc454b5792db3471c4deba84630b2c26dd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79bcc454b5792db3471c4deba84630b2c26dd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a79bcc454b5792db3471c4deba84630b2c26dd7", "patch": "@@ -1,3 +1,13 @@\n+2010-09-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* doc/invoke.text: Reinstate mcmodel=medium.\n+\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Set\n+\tCMODEL_MEDIUM as default.\n+\t* config/rs6000/rs6000.h (enum rs6000_cmodel): Add CMODEL_MEDIUM.\n+\t* config/rs6000/rs6000.c (rs6000_handle_option): Add mcmodel=medium.\n+\t(toc_relative_ok, offsettable_ok_by_alignment): New functions.\n+\t(rs6000_emit_move): Reinstate mcmodel=medium optimization.\n+\n 2010-09-08  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/45250"}, {"sha": "faf9e2f2a77738ffee73ad9ff0e367a4843c52ee", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79bcc454b5792db3471c4deba84630b2c26dd7/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79bcc454b5792db3471c4deba84630b2c26dd7/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=5a79bcc454b5792db3471c4deba84630b2c26dd7", "patch": "@@ -134,7 +134,7 @@ extern enum rs6000_cmodel cmodel;\n \t  else\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      if (!rs6000_explicit_options.cmodel)\t\t\\\n-\t\tSET_CMODEL (CMODEL_LARGE);\t\t\t\\\n+\t\tSET_CMODEL (CMODEL_MEDIUM);\t\t\t\\\n \t      if (cmodel != CMODEL_SMALL)\t\t\t\\\n \t\t{\t\t\t\t\t\t\\\n \t\t  TARGET_NO_FP_IN_TOC = 0;\t\t\t\\"}, {"sha": "c6c3dbf7fabe79f21bc61b8a836df695050d7960", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 84, "deletions": 5, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79bcc454b5792db3471c4deba84630b2c26dd7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79bcc454b5792db3471c4deba84630b2c26dd7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5a79bcc454b5792db3471c4deba84630b2c26dd7", "patch": "@@ -6992,6 +6992,80 @@ rs6000_eliminate_indexed_memrefs (rtx operands[2])\n \t\t\t       copy_addr_to_reg (XEXP (operands[1], 0)));\n }\n \n+/* Return true if OP, a SYMBOL_REF, should be considered local when\n+   generating -mcmodel=medium code.  */\n+\n+static bool\n+toc_relative_ok (rtx op)\n+{\n+  tree decl;\n+\n+  if (!SYMBOL_REF_LOCAL_P (op))\n+    return false;\n+\n+  /* This is a bit hard to explain.  When building shared libraries,\n+     you are supposed to pass -fpic or -fPIC to the compiler.\n+     -fpic/-fPIC not only generate position independent code but also\n+     generate code that supports ELF shared library global function\n+     or variable overriding.  ppc64 is always PIC and at least some of\n+     the ELF shared libaray semantics of global variables happen to be\n+     supported without -fpic/-fPIC.  So people may not be careful\n+     about using -fPIC for shared libs.\n+     With -mcmodel=medium this situation changes.  A shared library\n+     built without -fpic/-fPIC requires text relocs for global var\n+     access (and would fail to load since glibc ld.so doesn't support\n+     the required dynamic relocs).  So avoid this potential\n+     problem by using -mcmodel=large access for global vars, unless\n+     we know we are compiling for an executable.  */\n+  if (flag_pie)\n+    return true;\n+\n+  decl = SYMBOL_REF_DECL (op);\n+  if (!decl || !DECL_P (decl))\n+    return true;\n+  if (!TREE_PUBLIC (decl))\n+    return true;\n+  if (DECL_VISIBILITY (decl) != VISIBILITY_DEFAULT)\n+    return true;\n+\n+  /* If we get here we must have a global var.  See binds_local_p.  */\n+  return flag_whole_program;\n+}\n+\n+/* Return true if memory accesses to DECL are known to never straddle\n+   a 32k boundary.  */\n+\n+static bool\n+offsettable_ok_by_alignment (tree decl)\n+{\n+  unsigned HOST_WIDE_INT dsize, dalign;\n+\n+  /* Presume any compiler generated symbol_ref is suitably aligned.  */\n+  if (!decl)\n+    return true;\n+\n+  if (TREE_CODE (decl) != VAR_DECL\n+      && TREE_CODE (decl) != PARM_DECL\n+      && TREE_CODE (decl) != RESULT_DECL\n+      && TREE_CODE (decl) != FIELD_DECL)\n+    return true;\n+\n+  if (!DECL_SIZE_UNIT (decl))\n+    return false;\n+\n+  if (!host_integerp (DECL_SIZE_UNIT (decl), 1))\n+    return false;\n+\n+  dsize = tree_low_cst (DECL_SIZE_UNIT (decl), 1);\n+  if (dsize <= 1)\n+    return true;\n+  if (dsize > 32768)\n+    return false;\n+\n+  dalign = DECL_ALIGN_UNIT (decl);\n+  return dalign >= dsize;\n+}\n+\n /* Emit a move from SOURCE to DEST in mode MODE.  */\n void\n rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n@@ -7305,11 +7379,16 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n       /* If this is a SYMBOL_REF that refers to a constant pool entry,\n \t and we have put it in the TOC, we just need to make a TOC-relative\n \t reference to it.  */\n-      if (TARGET_TOC\n-\t  && GET_CODE (operands[1]) == SYMBOL_REF\n-\t  && constant_pool_expr_p (operands[1])\n-\t  && ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (get_pool_constant (operands[1]),\n-\t\t\t\t\t      get_pool_mode (operands[1])))\n+      if ((TARGET_TOC\n+\t   && GET_CODE (operands[1]) == SYMBOL_REF\n+\t   && constant_pool_expr_p (operands[1])\n+\t   && ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (get_pool_constant (operands[1]),\n+\t\t\t\t\t       get_pool_mode (operands[1])))\n+\t  || (TARGET_CMODEL == CMODEL_MEDIUM\n+\t      && GET_CODE (operands[1]) == SYMBOL_REF\n+\t      && !CONSTANT_POOL_ADDRESS_P (operands[1])\n+\t      && toc_relative_ok (operands[1])\n+\t      && offsettable_ok_by_alignment (SYMBOL_REF_DECL (operands[1]))))\n \t{\n \t  rtx reg = NULL_RTX;\n \t  if (TARGET_CMODEL != CMODEL_SMALL)"}, {"sha": "63f1bba738da7a082f62ee494cd07e301e6ab801", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79bcc454b5792db3471c4deba84630b2c26dd7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79bcc454b5792db3471c4deba84630b2c26dd7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=5a79bcc454b5792db3471c4deba84630b2c26dd7", "patch": "@@ -297,9 +297,11 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n /* Code model for 64-bit linux.\n    small: 16-bit toc offsets.\n-   large: 32-bit toc offsets.  */\n+   medium: 32-bit toc offsets, static data and code within 2G of TOC pointer.\n+   large: 32-bit toc offsets, no limit on static data and code.  */\n enum rs6000_cmodel {\n   CMODEL_SMALL,\n+  CMODEL_MEDIUM,\n   CMODEL_LARGE\n };\n "}, {"sha": "b24688b2f0da3753919a96429969701d413e726b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79bcc454b5792db3471c4deba84630b2c26dd7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79bcc454b5792db3471c4deba84630b2c26dd7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5a79bcc454b5792db3471c4deba84630b2c26dd7", "patch": "@@ -15213,6 +15213,11 @@ scheduling parameters set by @option{-mtune}.\n Generate PowerPC64 code for the small model: The TOC is limited to\n 64k.\n \n+@item -mcmodel=medium\n+@opindex mcmodel=medium\n+Generate PowerPC64 code for the medium model: The TOC and other static\n+data may be up to a total of 4G in size.\n+\n @item -mcmodel=large\n @opindex mcmodel=large\n Generate PowerPC64 code for the large model: The TOC may be up to 4G"}]}