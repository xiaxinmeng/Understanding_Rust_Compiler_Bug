{"sha": "f386ca413862152954a0ac73a7a2294fd6bbae1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM4NmNhNDEzODYyMTUyOTU0YTBhYzczYTdhMjI5NGZkNmJiYWUxYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-08-20T08:45:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-08-20T08:45:56Z"}, "message": "re PR target/91498 (STV change in r274481 causes 300.twolf regression on Haswell)\n\n2019-08-20  Richard Biener  <rguenther@suse.de>\n\n\tPR target/91498\n\t* config/i386/i386-features.c (general_scalar_chain::convert_op):\n\tUse (vec_merge (vec_duplicate..)) style vector from scalar move.\n\t(convert_scalars_to_vector): Add timode_p parameter and use it\n\tto guard TImode-only operation.\n\t(pass_stv::gate): Adjust so STV runs twice for TARGET_64BIT.\n\t(pass_stv::execute): Pass down timode_p.\n\n\t* gcc.target/i386/minmax-7.c: New testcase.\n\nFrom-SVN: r274694", "tree": {"sha": "187d264f19f780dc3017bafd91827a194cdd32f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/187d264f19f780dc3017bafd91827a194cdd32f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f386ca413862152954a0ac73a7a2294fd6bbae1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f386ca413862152954a0ac73a7a2294fd6bbae1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f386ca413862152954a0ac73a7a2294fd6bbae1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f386ca413862152954a0ac73a7a2294fd6bbae1a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9fcfec30f70c30883f53d4b1bd533fbea0e9fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fcfec30f70c30883f53d4b1bd533fbea0e9fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fcfec30f70c30883f53d4b1bd533fbea0e9fb2"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "7975480b788c28c5669b8bba0df4a6c463478bd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f386ca413862152954a0ac73a7a2294fd6bbae1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f386ca413862152954a0ac73a7a2294fd6bbae1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f386ca413862152954a0ac73a7a2294fd6bbae1a", "patch": "@@ -1,3 +1,13 @@\n+2019-08-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/91498\n+\t* config/i386/i386-features.c (general_scalar_chain::convert_op):\n+\tUse (vec_merge (vec_duplicate..)) style vector from scalar move.\n+\t(convert_scalars_to_vector): Add timode_p parameter and use it\n+\tto guard TImode-only operation.\n+\t(pass_stv::gate): Adjust so STV runs twice for TARGET_64BIT.\n+\t(pass_stv::execute): Pass down timode_p.\n+\n 2019-08-20  Lili Cui  <lili.cui@intel.com>\n \n \t* common/config/i386/i386-common.c"}, {"sha": "c27ea16862d7cf78da0aa356c69c88d76bf058ca", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f386ca413862152954a0ac73a7a2294fd6bbae1a/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f386ca413862152954a0ac73a7a2294fd6bbae1a/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=f386ca413862152954a0ac73a7a2294fd6bbae1a", "patch": "@@ -910,7 +910,9 @@ general_scalar_chain::convert_op (rtx *op, rtx_insn *insn)\n     {\n       rtx tmp = gen_reg_rtx (GET_MODE (*op));\n \n-      emit_insn_before (gen_move_insn (tmp, *op), insn);\n+      emit_insn_before (gen_rtx_SET (gen_rtx_SUBREG (vmode, tmp, 0),\n+\t\t\t\t     gen_gpr_to_xmm_move_src (vmode, *op)),\n+\t\t\tinsn);\n       *op = gen_rtx_SUBREG (vmode, tmp, 0);\n \n       if (dump_file)\n@@ -1664,7 +1666,7 @@ timode_remove_non_convertible_regs (bitmap candidates)\n    instructions into vector mode when profitable.  */\n \n static unsigned int\n-convert_scalars_to_vector ()\n+convert_scalars_to_vector (bool timode_p)\n {\n   basic_block bb;\n   int converted_insns = 0;\n@@ -1690,7 +1692,7 @@ convert_scalars_to_vector ()\n     {\n       rtx_insn *insn;\n       FOR_BB_INSNS (bb, insn)\n-\tif (TARGET_64BIT\n+\tif (timode_p\n \t    && timode_scalar_to_vector_candidate_p (insn))\n \t  {\n \t    if (dump_file)\n@@ -1699,7 +1701,7 @@ convert_scalars_to_vector ()\n \n \t    bitmap_set_bit (&candidates[2], INSN_UID (insn));\n \t  }\n-\telse\n+\telse if (!timode_p)\n \t  {\n \t    /* Check {SI,DI}mode.  */\n \t    for (unsigned i = 0; i <= 1; ++i)\n@@ -1715,7 +1717,7 @@ convert_scalars_to_vector ()\n \t  }\n     }\n \n-  if (TARGET_64BIT)\n+  if (timode_p)\n     timode_remove_non_convertible_regs (&candidates[2]);\n   for (unsigned i = 0; i <= 1; ++i)\n     general_remove_non_convertible_regs (&candidates[i]);\n@@ -1875,13 +1877,13 @@ class pass_stv : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return (timode_p == !!TARGET_64BIT\n+      return ((!timode_p || TARGET_64BIT)\n \t      && TARGET_STV && TARGET_SSE2 && optimize > 1);\n     }\n \n   virtual unsigned int execute (function *)\n     {\n-      return convert_scalars_to_vector ();\n+      return convert_scalars_to_vector (timode_p);\n     }\n \n   opt_pass *clone ()"}, {"sha": "9dee58caad35a7369d7b8cb3ede64dd10f48b0ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f386ca413862152954a0ac73a7a2294fd6bbae1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f386ca413862152954a0ac73a7a2294fd6bbae1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f386ca413862152954a0ac73a7a2294fd6bbae1a", "patch": "@@ -1,3 +1,8 @@\n+2019-08-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/91498\n+\t* gcc.target/i386/minmax-7.c: New testcase.\n+\n 2019-08-20  Lili Cui  <lili.cui@intel.com>\n \n \t* gcc.target/i386/funcspec-56.inc: Handle new march."}, {"sha": "905f085b3fd54214fc1b69272623b6bc4e0e3723", "filename": "gcc/testsuite/gcc.target/i386/minmax-7.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f386ca413862152954a0ac73a7a2294fd6bbae1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f386ca413862152954a0ac73a7a2294fd6bbae1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-7.c?ref=f386ca413862152954a0ac73a7a2294fd6bbae1a", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n+\n+extern int numBins;\n+extern int binOffst;\n+extern int binWidth;\n+extern int Trybin;\n+void foo (int);\n+\n+void bar (int aleft, int axcenter)\n+{\n+  int a1LoBin = (((Trybin=((axcenter + aleft)-binOffst)/binWidth)<0)\n+\t\t ? 0 : ((Trybin>numBins) ? numBins : Trybin));\n+  foo (a1LoBin);\n+}\n+\n+/* We do not want the RA to spill %esi for it's dual-use but using\n+   pminsd is OK.  */\n+/* { dg-final { scan-assembler-not \"rsp\" { target { ! { ia32 } } } } } */\n+/* { dg-final { scan-assembler \"pminsd\" } } */"}]}