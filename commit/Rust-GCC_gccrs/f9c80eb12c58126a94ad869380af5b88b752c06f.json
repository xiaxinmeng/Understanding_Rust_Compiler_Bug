{"sha": "f9c80eb12c58126a94ad869380af5b88b752c06f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjljODBlYjEyYzU4MTI2YTk0YWQ4NjkzODBhZjViODhiNzUyYzA2Zg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-06-08T21:44:13Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-06-26T00:12:04Z"}, "message": "c++: Failure to delay noexcept parsing with ptr-operator [PR100752]\n\nWe weren't passing 'flags' to the recursive call to cp_parser_declarator\nin the ptr-operator case and as an effect, delayed parsing of noexcept\ndidn't work as advertised.  The following change passes more than just\nCP_PARSER_FLAGS_DELAY_NOEXCEPT but that doesn't seem to break anything.\n\nI'm now also passing member_p and static_p, as a consequence, two tests\nneeded small tweaks.\n\n\tPR c++/100752\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_declarator): Pass flags down to\n\tcp_parser_declarator.  Also pass static_p/member_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/noexcept69.C: New test.\n\t* g++.dg/parse/saved1.C: Adjust dg-error.\n\t* g++.dg/template/crash50.C: Likewise.", "tree": {"sha": "e1f6c5cb62fee36fcb4813d8da06465e42f0559c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1f6c5cb62fee36fcb4813d8da06465e42f0559c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9c80eb12c58126a94ad869380af5b88b752c06f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c80eb12c58126a94ad869380af5b88b752c06f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c80eb12c58126a94ad869380af5b88b752c06f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c80eb12c58126a94ad869380af5b88b752c06f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99585d88a090b4c5b7791f7ab62f70eb37b748fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99585d88a090b4c5b7791f7ab62f70eb37b748fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99585d88a090b4c5b7791f7ab62f70eb37b748fa"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "02daa7a6f6a2442e5ff2c604a5d8f716bddf881b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c80eb12c58126a94ad869380af5b88b752c06f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c80eb12c58126a94ad869380af5b88b752c06f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f9c80eb12c58126a94ad869380af5b88b752c06f", "patch": "@@ -22170,12 +22170,10 @@ cp_parser_declarator (cp_parser* parser,\n \tcp_parser_parse_tentatively (parser);\n \n       /* Parse the dependent declarator.  */\n-      declarator = cp_parser_declarator (parser, dcl_kind,\n-\t\t\t\t\t CP_PARSER_FLAGS_NONE,\n+      declarator = cp_parser_declarator (parser, dcl_kind, flags,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t\t /*parenthesized_p=*/NULL,\n-\t\t\t\t\t /*member_p=*/false,\n-\t\t\t\t\t friend_p, /*static_p=*/false);\n+\t\t\t\t\t member_p, friend_p, static_p);\n \n       /* If we are parsing an abstract-declarator, we must handle the\n \t case where the dependent declarator is absent.  */"}, {"sha": "9b87ba0cafb51254c3080c57572bcfbefb2a766f", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept69.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c80eb12c58126a94ad869380af5b88b752c06f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept69.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c80eb12c58126a94ad869380af5b88b752c06f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept69.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept69.C?ref=f9c80eb12c58126a94ad869380af5b88b752c06f", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/100752\n+// { dg-do compile { target c++11 } }\n+\n+struct S {\n+  void f() noexcept {}\n+  S &g() noexcept(noexcept(f())) { f(); return *this; }\n+};\n+\n+struct X {\n+  int& f() noexcept(noexcept(i));\n+  int i;\n+};"}, {"sha": "1deaa93f516894d4757fc8671d630dcbfedaf4f6", "filename": "gcc/testsuite/g++.dg/parse/saved1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c80eb12c58126a94ad869380af5b88b752c06f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsaved1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c80eb12c58126a94ad869380af5b88b752c06f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsaved1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsaved1.C?ref=f9c80eb12c58126a94ad869380af5b88b752c06f", "patch": "@@ -1,7 +1,7 @@\n // Test that the parser doesn't go into an infinite loop from ignoring the\n // PRE_PARSED_FUNCTION_DECL token.\n \n-class C { static void* operator new(size_t); }; // { dg-error \"24:declaration of .operator new. as non-function\" }\n-// { dg-error \"expected|ISO C\\\\+\\\\+ forbids\" \"\" { target *-*-* } .-1 }\n+class C { static void* operator new(size_t); }; // { dg-error \"37:.size_t. has not been declared\" }\n+// { dg-error \".operator new. takes type .size_t.\" \"\" { target *-*-* } .-1 }\n void* C::operator new(size_t) { return 0; } // { dg-error \"\" }\n class D { D(int i): integer(i){}}; // { dg-error \"\" }"}, {"sha": "4b846cdabc8ea8230bce39812e06369c86a80568", "filename": "gcc/testsuite/g++.dg/template/crash50.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c80eb12c58126a94ad869380af5b88b752c06f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c80eb12c58126a94ad869380af5b88b752c06f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash50.C?ref=f9c80eb12c58126a94ad869380af5b88b752c06f", "patch": "@@ -3,5 +3,5 @@\n \n struct A\n {\n-  template<int> void* foo(; // { dg-error \"primary-expression|initialization|static|template\" }\n+  template<int> void* foo(; // { dg-error \"expected|initialization|static|template\" }\n };"}]}