{"sha": "c896d4b449d797c6d43b7c4863adbbe19677d5cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5NmQ0YjQ0OWQ3OTdjNmQ0M2I3YzQ4NjNhZGJiZTE5Njc3ZDVjYg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-01-20T10:26:18Z"}, "committer": {"name": "Renlin Li", "email": "renlin@gcc.gnu.org", "date": "2015-01-20T10:26:18Z"}, "message": "[ARM] PR 64149: Remove -mlra/-mno-lra option for ARM.\n\ngcc/\n2015-01-20  Matthew Wahab  <matthew.wahab@arm.com>\n\n\tPR target/64149\n\t* config/arm/arm.option: Remove lra option and arm_lra_flag variable.\n\t* config/arm/arm.h (MODE_BASE_REG_CLASS): Remove use of arm_lra_flag,\n\treplace the conditional with it's true branch.\n\t* config/arm/arm.c (TARGET_LRA_P): Set to hook_bool_void_true.\n\t(arm_lra_p): Remove.\n\ngcc/testsuite/\n2015-01-20  matthewhew Wahab  <matthew.wahab@arm.com>\n\n\tPR target/64149\n\t* gcc.target/arm/armthumb1-far-jump-3.c: Remove.\n\nFrom-SVN: r219884", "tree": {"sha": "6dd7ae74697dce5dd2bf078855e563f65b570a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dd7ae74697dce5dd2bf078855e563f65b570a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c896d4b449d797c6d43b7c4863adbbe19677d5cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c896d4b449d797c6d43b7c4863adbbe19677d5cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c896d4b449d797c6d43b7c4863adbbe19677d5cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c896d4b449d797c6d43b7c4863adbbe19677d5cb/comments", "author": null, "committer": null, "parents": [{"sha": "a76ffff1bd659d009537524d1f1e9ac3844b1f5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a76ffff1bd659d009537524d1f1e9ac3844b1f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a76ffff1bd659d009537524d1f1e9ac3844b1f5e"}], "stats": {"total": 147, "additions": 18, "deletions": 129}, "files": [{"sha": "3ad6b9d6bfbc2d3c41971c1ed716f7ef11a13947", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c896d4b449d797c6d43b7c4863adbbe19677d5cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c896d4b449d797c6d43b7c4863adbbe19677d5cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c896d4b449d797c6d43b7c4863adbbe19677d5cb", "patch": "@@ -1,3 +1,12 @@\n+2015-01-20  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\tPR target/64149\n+\t* config/arm/arm.opt: Remove lra option and arm_lra_flag variablesle.\n+\t* config/arm/arm.h (MODE_BASE_REG_CLASS): Remove use of arm_lra_flagag,\n+\treplace the conditional with it's true branch.\n+\t* config/arm/arm.config (TARGET_LRA_P): Set to hook_bool_void_true.\n+\t(arm_lra_p): Remove.\n+\n 2015-01-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/visium/visium.h (LIB_SPEC): Adjust in default case."}, {"sha": "9826a9621cd6c59f46bb9f6adde115ffce1b29df", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c896d4b449d797c6d43b7c4863adbbe19677d5cb/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c896d4b449d797c6d43b7c4863adbbe19677d5cb/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c896d4b449d797c6d43b7c4863adbbe19677d5cb", "patch": "@@ -112,7 +112,6 @@ struct four_ints\n \n /* Forward function declarations.  */\n static bool arm_const_not_ok_for_debug_p (rtx);\n-static bool arm_lra_p (void);\n static bool arm_needs_doubleword_align (machine_mode, const_tree);\n static int arm_compute_static_chain_stack_bytes (void);\n static arm_stack_offsets *arm_get_frame_offsets (void);\n@@ -382,7 +381,7 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_LEGITIMIZE_ADDRESS arm_legitimize_address\n \n #undef TARGET_LRA_P\n-#define TARGET_LRA_P arm_lra_p\n+#define TARGET_LRA_P hook_bool_void_true\n \n #undef  TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE arm_attribute_table\n@@ -5999,13 +5998,6 @@ arm_init_cumulative_args (CUMULATIVE_ARGS *pcum, tree fntype,\n     }\n }\n \n-/* Return true if we use LRA instead of reload pass.  */\n-static bool\n-arm_lra_p (void)\n-{\n-  return arm_lra_flag;\n-}\n-\n /* Return true if mode/type need doubleword alignment.  */\n static bool\n arm_needs_doubleword_align (machine_mode mode, const_tree type)"}, {"sha": "831d6e17d1fde67c77dea95a21da04b9d7833531", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c896d4b449d797c6d43b7c4863adbbe19677d5cb/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c896d4b449d797c6d43b7c4863adbbe19677d5cb/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c896d4b449d797c6d43b7c4863adbbe19677d5cb", "patch": "@@ -1287,14 +1287,10 @@ enum reg_class\n /* For the Thumb the high registers cannot be used as base registers\n    when addressing quantities in QI or HI mode; if we don't know the\n    mode, then we must be conservative.  */\n-#define MODE_BASE_REG_CLASS(MODE)\t\t\t\t\t\\\n-  (arm_lra_flag\t\t\t\t\t\t\t\t\\\n-   ? (TARGET_32BIT ? CORE_REGS\t\t\t\t\t\t\\\n-      : GET_MODE_SIZE (MODE) >= 4 ? BASE_REGS\t\t\t\t\\\n-      : LO_REGS)\t\t\t\t\t\t\t\\\n-   : ((TARGET_ARM || (TARGET_THUMB2 && !optimize_size)) ? CORE_REGS\t\\\n-      : ((MODE) == SImode) ? BASE_REGS\t\t\t\t\t\\\n-      : LO_REGS))\n+#define MODE_BASE_REG_CLASS(MODE)\t\t\t\t\\\n+  (TARGET_32BIT ? CORE_REGS\t\t\t\t\t\\\n+   : GET_MODE_SIZE (MODE) >= 4 ? BASE_REGS\t\t\t\\\n+   : LO_REGS)\n \n /* For Thumb we can not support SP+reg addressing, so we return LO_REGS\n    instead of BASE_REGS.  */"}, {"sha": "6da49b8a77190bc709b55af5d509342cf2a4d1c7", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c896d4b449d797c6d43b7c4863adbbe19677d5cb/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c896d4b449d797c6d43b7c4863adbbe19677d5cb/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=c896d4b449d797c6d43b7c4863adbbe19677d5cb", "patch": "@@ -143,10 +143,6 @@ mfpu=\n Target RejectNegative Joined Enum(arm_fpu) Var(arm_fpu_index)\n Specify the name of the target floating point hardware/format\n \n-mlra\n-Target Report Var(arm_lra_flag) Init(1) Save\n-Use LRA instead of reload (transitional)\n-\n mhard-float\n Target RejectNegative Alias(mfloat-abi=, hard) Undocumented\n "}, {"sha": "b19a58dc41e952621ea0a1402aea8c1dcc66f989", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c896d4b449d797c6d43b7c4863adbbe19677d5cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c896d4b449d797c6d43b7c4863adbbe19677d5cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c896d4b449d797c6d43b7c4863adbbe19677d5cb", "patch": "@@ -1,3 +1,7 @@\n+2015-01-20  Matthew Wahab  <matthew.wahab@arm.com>\n+\tPR target/64149\n+\t* gcc.target/arm/thumb1-far-farjump-3.c: Remove.\n+\n 2015-01-20  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \tPR bootstrap/64676"}, {"sha": "90559bacb2af6c86dda614c949dfa13a92b3757f", "filename": "gcc/testsuite/gcc.target/arm/thumb1-far-jump-3.c", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76ffff1bd659d009537524d1f1e9ac3844b1f5e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-far-jump-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76ffff1bd659d009537524d1f1e9ac3844b1f5e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-far-jump-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-far-jump-3.c?ref=a76ffff1bd659d009537524d1f1e9ac3844b1f5e", "patch": "@@ -1,108 +0,0 @@\n-/* Catch reload ICE on target thumb1 with far jump optimization.\n- * It is also a valid case for non-thumb1 target.  */\n-\n-/* Add -mno-lra option as it is only reproducable with reload.  It will\n-   be removed after reload is completely removed.  */\n-/* { dg-options \"-mno-lra -fomit-frame-pointer\" } */\n-/* { dg-do compile } */\n-\n-#define C      2\n-#define A      4\n-#define RGB  (C | A)\n-#define GRAY (A)\n-\n-typedef unsigned long uint_32;\n-typedef unsigned char byte;\n-typedef byte        * bytep;\n-\n-typedef struct ss\n-{\n-   uint_32 w;\n-   uint_32 r;\n-   byte c;\n-   byte b;\n-   byte p;\n-} info;\n-\n-typedef info * infop;\n-\n-void\n-foo(infop info, bytep row)\n-{\n-   uint_32 iw = info->w;\n-   if (info->c == RGB)\n-   {\n-      if (info->b == 8)\n-      {\n-         bytep sp = row + info->r;\n-         bytep dp = sp;\n-         byte save;\n-         uint_32 i;\n-\n-         for (i = 0; i < iw; i++)\n-         {\n-            save = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = save;\n-         }\n-      }\n-\n-      else\n-      {\n-         bytep sp = row + info->r;\n-         bytep dp = sp;\n-         byte save[2];\n-         uint_32 i;\n-\n-         for (i = 0; i < iw; i++)\n-         {\n-            save[0] = *(--sp);\n-            save[1] = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = save[0];\n-            *(--dp) = save[1];\n-         }\n-      }\n-   }\n-   else if (info->c == GRAY)\n-   {\n-      if (info->b == 8)\n-      {\n-         bytep sp = row + info->r;\n-         bytep dp = sp;\n-         byte save;\n-         uint_32 i;\n-\n-         for (i = 0; i < iw; i++)\n-         {\n-            save = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = save;\n-         }\n-      }\n-      else\n-      {\n-         bytep sp = row + info->r;\n-         bytep dp = sp;\n-         byte save[2];\n-         uint_32 i;\n-\n-         for (i = 0; i < iw; i++)\n-         {\n-            save[0] = *(--sp);\n-            save[1] = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = *(--sp);\n-            *(--dp) = save[0];\n-            *(--dp) = save[1];\n-         }\n-      }\n-   }\n-}"}]}