{"sha": "8a9c76f3c232a8c6a38c2616419d8a55ecaf4e98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5Yzc2ZjNjMjMyYThjNmEzOGMyNjE2NDE5ZDhhNTVlY2FmNGU5OA==", "commit": {"author": {"name": "Timothy Moore", "email": "moore@gnu.org", "date": "1992-10-15T15:57:18Z"}, "committer": {"name": "Timothy Moore", "email": "moore@gnu.org", "date": "1992-10-15T15:57:18Z"}, "message": "pa.c (compute_frame_size): Take an fregs_live parameter instead of setting the static variable save_fregs.\n\n        * pa.c (compute_frame_size): Take an fregs_live parameter instead\n        of setting the static variable save_fregs.\n        (output_function_prologue): Initialize save_fregs to 0 and pass to\n        compute_frame_size.\n\nFrom-SVN: r2477", "tree": {"sha": "c9a1e76cb118e19a40c28143c0bbdf38fe1f9d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9a1e76cb118e19a40c28143c0bbdf38fe1f9d05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a9c76f3c232a8c6a38c2616419d8a55ecaf4e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9c76f3c232a8c6a38c2616419d8a55ecaf4e98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9c76f3c232a8c6a38c2616419d8a55ecaf4e98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9c76f3c232a8c6a38c2616419d8a55ecaf4e98/comments", "author": null, "committer": null, "parents": [{"sha": "459a2653258e24af006f1d66015307cf73c67f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459a2653258e24af006f1d66015307cf73c67f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459a2653258e24af006f1d66015307cf73c67f74"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "9f7477d03ccb9b849eca23129f960f7835dcc748", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9c76f3c232a8c6a38c2616419d8a55ecaf4e98/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9c76f3c232a8c6a38c2616419d8a55ecaf4e98/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=8a9c76f3c232a8c6a38c2616419d8a55ecaf4e98", "patch": "@@ -44,13 +44,6 @@ enum cmp_type hppa_branch_type;\n /* Set by the FUNCTION_PROFILER macro. */\n int hp_profile_labelno;\n \n-/* Global variables set by FUNCTION_PROLOGUE.  */\n-/* Size of frame.  Need to know this to emit return insns from\n-   leaf procedures.  */\n-int apparent_fsize;\n-int actual_fsize;\n-int local_fsize, save_fregs;\n-\n /* Name of where we pretend to think the frame pointer points.\n    Normally, this is \"4\", but if we are in a leaf procedure,\n    this is \"something(30)\".  Will this work? */\n@@ -1429,10 +1422,18 @@ print_ldw (file, r, disp, base)\n \t     disp, r);\n }\n \n+/* Global variables set by FUNCTION_PROLOGUE.  */\n+/* Size of frame.  Need to know this to emit return insns from\n+   leaf procedures.  */\n+int apparent_fsize;\n+int actual_fsize;\n+int local_fsize, save_fregs;\n+\n int\n-compute_frame_size (size, leaf_function)\n+compute_frame_size (size, leaf_function, fregs_live)\n      int size;\n      int leaf_function;\n+     int *fregs_live;\n {\n   extern int current_function_outgoing_args_size;\n   int i;\n@@ -1454,15 +1455,19 @@ compute_frame_size (size, leaf_function)\n       for (i = 47; i >= 44; i--)\n \tif (regs_ever_live[i])\n \t  {\n-\t    actual_fsize += 8;  save_fregs++;\n+\t    actual_fsize += 8;\n+\t    if (fregs_live)\n+\t      *fregs_live = 1;\n \t  }\n     }\n   else\n     {\n       for (i = 90; i >= 72; i -= 2)\n \tif (regs_ever_live[i] || regs_ever_live[i + 1])\n \t  {\n-\t    actual_fsize += 8;  save_fregs++;\n+\t    actual_fsize += 8;\n+\t    if (fregs_live)\n+\t      *fregs_live = 1;\n \t  }\n     }\n   return actual_fsize + current_function_outgoing_args_size;\n@@ -1479,7 +1484,8 @@ output_function_prologue (file, size, leaf_function)\n   extern int current_function_returns_struct;\n   int i, offset;\n \n-  actual_fsize = compute_frame_size (size, leaf_function) + 32;\n+  save_fregs = 0;\n+  actual_fsize = compute_frame_size (size, leaf_function, &save_fregs) + 32;\n   if (TARGET_SNAKE)\n     actual_fsize = (actual_fsize + 63) & ~63;\n "}]}