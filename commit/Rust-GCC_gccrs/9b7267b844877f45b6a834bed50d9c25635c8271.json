{"sha": "9b7267b844877f45b6a834bed50d9c25635c8271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3MjY3Yjg0NDg3N2Y0NWI2YTgzNGJlZDUwZDljMjU2MzVjODI3MQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-27T22:12:42Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-27T22:12:42Z"}, "message": "(convert_for_assignment): New arg FUNDECL.  Calls changed.\n\n(convert_arguments): New arg FUNDECL.\n(build_function_call): Pass function to convert_arguments, if a decl.\n\n(convert_for_assignment): Automatically convert\nto a union from its members' types.\n\n(process_init_constructor): Error msg change.\n\n(initializer_constant_valid_p): Allow cast of ptr to wider integer.\n\nFrom-SVN: r3566", "tree": {"sha": "752ffd346ccab05687f18105d9eaf38a3b24ba32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/752ffd346ccab05687f18105d9eaf38a3b24ba32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b7267b844877f45b6a834bed50d9c25635c8271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7267b844877f45b6a834bed50d9c25635c8271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7267b844877f45b6a834bed50d9c25635c8271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7267b844877f45b6a834bed50d9c25635c8271/comments", "author": null, "committer": null, "parents": [{"sha": "d25887bddc10ef058de773976abf22eed9160db2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25887bddc10ef058de773976abf22eed9160db2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d25887bddc10ef058de773976abf22eed9160db2"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "434c9d5128343be8648a00268f6a6bcd7e709d2f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7267b844877f45b6a834bed50d9c25635c8271/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7267b844877f45b6a834bed50d9c25635c8271/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9b7267b844877f45b6a834bed50d9c25635c8271", "patch": "@@ -1798,7 +1798,7 @@ tree\n build_function_call (function, params)\n      tree function, params;\n {\n-  register tree fntype;\n+  register tree fntype, fundecl;\n   register tree coerced_params;\n   tree name = NULL_TREE;\n \n@@ -1815,6 +1815,7 @@ build_function_call (function, params)\n       fntype = build_type_variant (TREE_TYPE (function),\n \t\t\t\t   TREE_READONLY (function),\n \t\t\t\t   TREE_THIS_VOLATILE (function));\n+      fundecl = function;\n       function = build1 (ADDR_EXPR, build_pointer_type (fntype), function);\n     }\n   else\n@@ -1839,7 +1840,7 @@ build_function_call (function, params)\n      function prototype, or apply default promotions.  */\n \n   coerced_params\n-    = convert_arguments (TYPE_ARG_TYPES (fntype), params, name);\n+    = convert_arguments (TYPE_ARG_TYPES (fntype), params, name, fundecl);\n \n   /* Check for errors in format strings.  */\n   if (warn_format && name != 0)\n@@ -1906,8 +1907,8 @@ build_function_call (function, params)\n    with the elements of the list in the TREE_VALUE slots of those nodes.  */\n \n static tree\n-convert_arguments (typelist, values, name)\n-     tree typelist, values, name;\n+convert_arguments (typelist, values, name, fundecl)\n+     tree typelist, values, name, fundecl;\n {\n   register tree typetail, valtail;\n   register tree result = NULL;\n@@ -2048,7 +2049,7 @@ convert_arguments (typelist, values, name)\n \n \t      parmval = convert_for_assignment (type, val, \n \t\t\t\t\t        (char *)0, /* arg passing  */\n-\t\t\t\t\t\tname, parmnum + 1);\n+\t\t\t\t\t\tfundecl, name, parmnum + 1);\n \t      \n #ifdef PROMOTE_PROTOTYPES\n \t      if (TREE_CODE (type) == INTEGER_TYPE\n@@ -3969,7 +3970,7 @@ build_modify_expr (lhs, modifycode, rhs)\n   /* Convert new value to destination type.  */\n \n   newrhs = convert_for_assignment (lhstype, newrhs, \"assignment\",\n-\t\t\t\t   NULL_TREE, 0);\n+\t\t\t\t   NULL_TREE, NULL_TREE, 0);\n   if (TREE_CODE (newrhs) == ERROR_MARK)\n     return error_mark_node;\n \n@@ -3983,7 +3984,8 @@ build_modify_expr (lhs, modifycode, rhs)\n \n   if (olhstype == TREE_TYPE (result))\n     return result;\n-  return convert_for_assignment (olhstype, result, \"assignment\", NULL_TREE, 0);\n+  return convert_for_assignment (olhstype, result, \"assignment\",\n+\t\t\t\t NULL_TREE, NULL_TREE, 0);\n }\n \f\n /* Convert value RHS to type TYPE as preparation for an assignment\n@@ -4002,10 +4004,10 @@ build_modify_expr (lhs, modifycode, rhs)\n    PARMNUM is the number of the argument, for printing in error messages.  */\n \n static tree\n-convert_for_assignment (type, rhs, errtype, funname, parmnum)\n+convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n      tree type, rhs;\n      char *errtype;\n-     tree funname;\n+     tree fundecl, funname;\n      int parmnum;\n {\n   register enum tree_code codel = TREE_CODE (type);\n@@ -4044,6 +4046,22 @@ convert_for_assignment (type, rhs, errtype, funname, parmnum)\n        &&\n       (coder == INTEGER_TYPE || coder == REAL_TYPE || coder == ENUMERAL_TYPE))\n     return convert_and_check (type, rhs);\n+  /* Conversion to a union from its member types.  */\n+  else if (codel = UNION_TYPE)\n+    {\n+      tree memb_types;\n+      for (memb_types = TYPE_FIELDS (type); memb_types;\n+\t   memb_types = TREE_CHAIN (memb_types))\n+\t{\n+\t  if (comptypes (TREE_TYPE (memb_types), TREE_TYPE (rhs)))\n+\t    {\n+\t      if (pedantic\n+\t\t  && !(fundecl != 0 && DECL_IN_SYSTEM_HEADER (fundecl)))\n+\t\tpedwarn (\"ANSI C prohibits argument conversion to union type\");\n+\t      return build1 (NOP_EXPR, type, rhs);\n+\t    }\n+\t}\n+    }\n   /* Conversions among pointers */\n   else if (codel == POINTER_TYPE && coder == POINTER_TYPE)\n     {\n@@ -4238,11 +4256,11 @@ initializer_constant_valid_p (value, endtype)\n \t    return null_pointer_node;\n \t  return 0;\n \t}\n-      /* Allow (int) &foo.  */\n+      /* Allow (int) &foo provided int is as wide as a pointer.  */\n       if (TREE_CODE (TREE_TYPE (value)) == INTEGER_TYPE\n \t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (value, 0))) == POINTER_TYPE\n-\t  && tree_int_cst_equal (TYPE_SIZE (TREE_TYPE (value)),\n-\t\t\t\t TYPE_SIZE (TREE_TYPE (TREE_OPERAND (value, 0)))))\n+\t  && ! tree_int_cst_lt (TYPE_SIZE (TREE_TYPE (value)),\n+\t\t\t\tTYPE_SIZE (TREE_TYPE (TREE_OPERAND (value, 0)))))\n \treturn initializer_constant_valid_p (TREE_OPERAND (value, 0),\n \t\t\t\t\t     endtype);\n       /* Allow conversions to union types if the value inside is okay.  */\n@@ -4846,7 +4864,8 @@ digest_init (type, init, tail, require_constant, constructor_constant, ofwhat)\n \t\t\t\t      default_conversion (raw_constructor\n \t\t\t\t\t\t\t  ? inside_init\n \t\t\t\t\t\t\t  : init),\n-\t\t\t\t      &initialization_message, NULL_TREE, 0);\n+\t\t\t\t      &initialization_message,\n+\t\t\t\t      NULL_TREE, NULL_TREE, 0);\n \t});\n \n       if (require_constant && ! TREE_CONSTANT (inside_init))\n@@ -5050,7 +5069,7 @@ process_init_constructor (type, init, elts, constant_value, constant_element,\n \t\t    error (\"field name used as index in array initializer\");\n \t\t  else if ((TREE_CODE (start_index) != INTEGER_CST)\n \t\t\t   || (TREE_CODE (end_index) != INTEGER_CST))\n-\t\t    error (\"non-constant array index in initializer\");\n+\t\t    error (\"non-constant or non-integer array index in initializer\");\n \t\t  else if (tree_int_cst_lt (start_index, min_index)\n \t\t\t   || (max_index && tree_int_cst_lt (max_index, start_index))\n \t\t\t   || tree_int_cst_lt (end_index, min_index)\n@@ -5479,7 +5498,7 @@ c_expand_return (retval)\n   else\n     {\n       tree t = convert_for_assignment (valtype, retval, \"return\",\n-\t\t\t\t       NULL_TREE, 0);\n+\t\t\t\t       NULL_TREE, NULL_TREE, 0);\n       tree res = DECL_RESULT (current_function_decl);\n       t = build (MODIFY_EXPR, TREE_TYPE (res),\n \t\t res, convert (TREE_TYPE (res), t));"}]}