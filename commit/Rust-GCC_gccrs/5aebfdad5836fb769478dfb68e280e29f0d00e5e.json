{"sha": "5aebfdad5836fb769478dfb68e280e29f0d00e5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlYmZkYWQ1ODM2ZmI3Njk0NzhkZmI2OGUyODBlMjlmMGQwMGU1ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-12-10T21:14:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-12-10T21:14:04Z"}, "message": "rs6000: Implement vec_perm_const for all vector ISAs\n\n        * config/rs6000/altivec.md (altivec_vmrghb): Rewrite pattern as\n        vec_select + vec_concat.\n        (altivec_vmrghh, altivec_vmrghw, altivec_vmrghsf, altivec_vmrglb,\n        altivec_vmrglh, altivec_vmrglw, altivec_vmrglsf): Likewise.\n        (vec_perm_constv16qi): New.\n        (vec_extract_evenv4si, vec_extract_evenv4sf, vpkuhum_nomode,\n        vpkuwum_nomode, vec_extract_oddv8hi, vec_extract_oddv16qi,\n        vec_interleave_high<VI>, vec_interleave_low<VI>): Remove.\n        * config/rs6000/paired.md (paired_merge00): Rewrite pattern as\n        vec_select + vec_concat.\n        (paired_merge10, paired_merge01, paired_merge11): Likewise.\n        (vec_perm_constv2sf): New.\n        (vec_interleave_highv2sf, vec_interleave_lowv2sf,\n        vec_extract_evenv2sf, vec_extract_oddv2sf): Remove.\n        * config/rs6000/spe.md (spe_evmergehi): Rewrite pattern as\n        vec_select + vec_concat.\n        (spe_evmergehilo, spe_evmergelo, spe_evmergelohi): New.\n        (vec_perm_constv2si): New.\n        * config/rs6000/vector.md (vec_interleave_highv4sf,\n        vec_interleave_lowv4sf, vec_interleave_high<VEC_64>,\n        vec_interleave_low<VEC_64>): Remove.\n        * config/rs6000/vsx.md (VS_double): New mode attribute.\n        (UNSPEC_VSX_XXPERMDI): Remove.\n        (vsx_xxpermdi_<VSX_L>_1): Rewrite pattern as vec_select + vec_concat.\n        (vsx_xxmrghw_<VSX_W>, vsx_xxmrglw_<VSX_W>): Likewise.\n        (vsx_xxpermdi_<VSX_L>): Change to expander.\n        (vec_perm_const<VSX_D>): New.\n        (vsx_mergel_<VSX_D>, vsx_mergeh_<VSX_D>): New.\n        * config/rs6000/predicates.md (const_0_to_1_operand): New.\n        (const_2_to_3_operand): New.\n        * config/rs6000/rs6000.c (TARGET_VECTORIZE_VEC_PERM_CONST_OK): New.\n        (altivec_expand_vec_perm_const): New.\n        (rs6000_expand_vec_perm_const_1, rs6000_expand_vec_perm_const): New.\n        (rs6000_vectorize_vec_perm_const_ok): New.\n        (rs6000_do_expand_vec_perm): New.\n        (rs6000_expand_extract_even, rs6000_expand_interleave): New.\n        * config/rs6000/rs6000-builtin.def (VEC_MERGE*): Update rtx codes.\n        * config/rs6000/rs6000-modes.def: Add double-wide vector modes.\n        * config/rs6000/rs6000-protos.h: Update.\n\nFrom-SVN: r182193", "tree": {"sha": "283862a1af90832e7c0cc8f0c848cd1bd9861290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283862a1af90832e7c0cc8f0c848cd1bd9861290"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5aebfdad5836fb769478dfb68e280e29f0d00e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aebfdad5836fb769478dfb68e280e29f0d00e5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aebfdad5836fb769478dfb68e280e29f0d00e5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aebfdad5836fb769478dfb68e280e29f0d00e5e/comments", "author": null, "committer": null, "parents": [{"sha": "ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccdfb0e2c6ad7c93ca7657a79a773f0af8f40be7"}], "stats": {"total": 1291, "additions": 764, "deletions": 527}, "files": [{"sha": "b1cc087ac58b8038251abcd89c2f9209574271e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -1,3 +1,45 @@\n+2011-12-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/rs6000/altivec.md (altivec_vmrghb): Rewrite pattern as\n+\tvec_select + vec_concat.\n+\t(altivec_vmrghh, altivec_vmrghw, altivec_vmrghsf, altivec_vmrglb,\n+\taltivec_vmrglh, altivec_vmrglw, altivec_vmrglsf): Likewise.\n+\t(vec_perm_constv16qi): New.\n+\t(vec_extract_evenv4si, vec_extract_evenv4sf, vpkuhum_nomode,\n+\tvpkuwum_nomode, vec_extract_oddv8hi, vec_extract_oddv16qi,\n+\tvec_interleave_high<VI>, vec_interleave_low<VI>): Remove.\n+\t* config/rs6000/paired.md (paired_merge00): Rewrite pattern as\n+\tvec_select + vec_concat.\n+\t(paired_merge10, paired_merge01, paired_merge11): Likewise.\n+\t(vec_perm_constv2sf): New.\n+\t(vec_interleave_highv2sf, vec_interleave_lowv2sf,\n+\tvec_extract_evenv2sf, vec_extract_oddv2sf): Remove.\n+\t* config/rs6000/spe.md (spe_evmergehi): Rewrite pattern as\n+\tvec_select + vec_concat.\n+\t(spe_evmergehilo, spe_evmergelo, spe_evmergelohi): New.\n+\t(vec_perm_constv2si): New.\n+\t* config/rs6000/vector.md (vec_interleave_highv4sf,\n+\tvec_interleave_lowv4sf, vec_interleave_high<VEC_64>,\n+\tvec_interleave_low<VEC_64>): Remove.\n+\t* config/rs6000/vsx.md (VS_double): New mode attribute.\n+\t(UNSPEC_VSX_XXPERMDI): Remove.\n+\t(vsx_xxpermdi_<VSX_L>_1): Rewrite pattern as vec_select + vec_concat.\n+\t(vsx_xxmrghw_<VSX_W>, vsx_xxmrglw_<VSX_W>): Likewise.\n+\t(vsx_xxpermdi_<VSX_L>): Change to expander.\n+\t(vec_perm_const<VSX_D>): New.\n+\t(vsx_mergel_<VSX_D>, vsx_mergeh_<VSX_D>): New.\n+\t* config/rs6000/predicates.md (const_0_to_1_operand): New.\n+\t(const_2_to_3_operand): New.\n+\t* config/rs6000/rs6000.c (TARGET_VECTORIZE_VEC_PERM_CONST_OK): New.\n+\t(altivec_expand_vec_perm_const): New.\n+\t(rs6000_expand_vec_perm_const_1, rs6000_expand_vec_perm_const): New.\n+\t(rs6000_vectorize_vec_perm_const_ok): New.\n+\t(rs6000_do_expand_vec_perm): New.\n+\t(rs6000_expand_extract_even, rs6000_expand_interleave): New.\n+\t* config/rs6000/rs6000-builtin.def (VEC_MERGE*): Update rtx codes.\n+\t* config/rs6000/rs6000-modes.def: Add double-wide vector modes.\n+\t* config/rs6000/rs6000-protos.h: Update.\n+\n 2011-12-10  Richard Henderson  <rth@redhat.com>\n \n \t* expr.c (expand_expr_real_2) [VEC_PERM_EXPR]: Avoid passing a"}, {"sha": "54ca369413392995525eb5bc732267d97e51eac6", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 85, "deletions": 296, "changes": 381, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -327,7 +327,7 @@\n (define_insn \"*altivec_addv4sf3\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n         (plus:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")\n-\t \t   (match_operand:V4SF 2 \"register_operand\" \"v\")))]\n+\t\t   (match_operand:V4SF 2 \"register_operand\" \"v\")))]\n   \"VECTOR_UNIT_ALTIVEC_P (V4SFmode)\"\n   \"vaddfp %0,%1,%2\"\n   [(set_attr \"type\" \"vecfloat\")])\n@@ -764,202 +764,112 @@\n \n (define_insn \"altivec_vmrghb\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (vec_merge:V16QI (vec_select:V16QI (match_operand:V16QI 1 \"register_operand\" \"v\")\n-\t\t\t\t\t   (parallel [(const_int 0)\n-\t\t\t\t\t   \t      (const_int 8)\n-\t\t\t\t\t   \t      (const_int 1)\n-\t\t\t\t\t   \t      (const_int 9)\n-\t\t\t\t\t   \t      (const_int 2)\n-\t\t\t\t\t   \t      (const_int 10)\n-\t\t\t\t\t\t      (const_int 3)\n-\t\t\t\t\t\t      (const_int 11)\n-\t\t\t\t\t   \t      (const_int 4)\n-\t\t\t\t\t   \t      (const_int 12)\n-\t\t\t\t\t   \t      (const_int 5)\n-\t\t\t\t\t   \t      (const_int 13)\n-\t\t\t\t\t   \t      (const_int 6)\n-\t\t\t\t\t   \t      (const_int 14)\n-\t\t\t\t\t   \t      (const_int 7)\n-\t\t\t\t\t\t      (const_int 15)]))\n-                        (vec_select:V16QI (match_operand:V16QI 2 \"register_operand\" \"v\")\n-\t\t\t\t\t   (parallel [(const_int 8)\n-\t\t\t\t\t   \t      (const_int 0)\n-\t\t\t\t\t   \t      (const_int 9)\n-\t\t\t\t\t   \t      (const_int 1)\n-\t\t\t\t\t   \t      (const_int 10)\n-\t\t\t\t\t   \t      (const_int 2)\n-\t\t\t\t\t\t      (const_int 11)\n-\t\t\t\t\t\t      (const_int 3)\n-\t\t\t\t\t   \t      (const_int 12)\n-\t\t\t\t\t   \t      (const_int 4)\n-\t\t\t\t\t   \t      (const_int 13)\n-\t\t\t\t\t   \t      (const_int 5)\n-\t\t\t\t\t   \t      (const_int 14)\n-\t\t\t\t\t   \t      (const_int 6)\n-\t\t\t\t\t   \t      (const_int 15)\n-\t\t\t\t\t\t      (const_int 7)]))\n-\t\t      (const_int 21845)))]\n+\t(vec_select:V16QI\n+\t  (vec_concat:V32QI\n+\t    (match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V16QI 2 \"register_operand\" \"v\"))\n+\t  (parallel [(const_int 0) (const_int 16)\n+\t\t     (const_int 1) (const_int 17)\n+\t\t     (const_int 2) (const_int 18)\n+\t\t     (const_int 3) (const_int 19)\n+\t\t     (const_int 4) (const_int 20)\n+\t\t     (const_int 5) (const_int 21)\n+\t\t     (const_int 6) (const_int 22)\n+\t\t     (const_int 7) (const_int 23)])))]\n   \"TARGET_ALTIVEC\"\n   \"vmrghb %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrghh\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (vec_merge:V8HI (vec_select:V8HI (match_operand:V8HI 1 \"register_operand\" \"v\")\n-\t\t\t\t\t   (parallel [(const_int 0)\n-\t\t\t\t\t   \t      (const_int 4)\n-\t\t\t\t\t   \t      (const_int 1)\n-\t\t\t\t\t   \t      (const_int 5)\n-\t\t\t\t\t   \t      (const_int 2)\n-\t\t\t\t\t   \t      (const_int 6)\n-\t\t\t\t\t   \t      (const_int 3)\n-\t\t\t\t\t   \t      (const_int 7)]))\n-                        (vec_select:V8HI (match_operand:V8HI 2 \"register_operand\" \"v\")\n-\t\t\t\t\t   (parallel [(const_int 4)\n-\t\t\t\t\t   \t      (const_int 0)\n-\t\t\t\t\t   \t      (const_int 5)\n-\t\t\t\t\t   \t      (const_int 1)\n-\t\t\t\t\t   \t      (const_int 6)\n-\t\t\t\t\t   \t      (const_int 2)\n-\t\t\t\t\t   \t      (const_int 7)\n-\t\t\t\t\t   \t      (const_int 3)]))\n-\t\t      (const_int 85)))]\n+\t(vec_select:V8HI\n+\t  (vec_concat:V16HI\n+\t    (match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8HI 2 \"register_operand\" \"v\"))\n+\t  (parallel [(const_int 0) (const_int 8)\n+\t\t     (const_int 1) (const_int 9)\n+\t\t     (const_int 2) (const_int 10)\n+\t\t     (const_int 3) (const_int 11)])))]\n   \"TARGET_ALTIVEC\"\n   \"vmrghh %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrghw\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (vec_merge:V4SI (vec_select:V4SI (match_operand:V4SI 1 \"register_operand\" \"v\")\n-\t\t\t\t\t (parallel [(const_int 0)\n-\t\t\t\t\t \t    (const_int 2)\n-\t\t\t\t\t\t    (const_int 1)\n-\t\t\t\t\t\t    (const_int 3)]))\n-                        (vec_select:V4SI (match_operand:V4SI 2 \"register_operand\" \"v\")\n-\t\t\t\t\t (parallel [(const_int 2)\n-\t\t\t\t\t \t    (const_int 0)\n-\t\t\t\t\t\t    (const_int 3)\n-\t\t\t\t\t\t    (const_int 1)]))\n-\t\t      (const_int 5)))]\n+        (vec_select:V4SI\n+\t  (vec_concat:V8SI\n+\t    (match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V4SI 2 \"register_operand\" \"v\"))\n+\t  (parallel [(const_int 0) (const_int 4)\n+\t\t     (const_int 1) (const_int 5)])))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n   \"vmrghw %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"*altivec_vmrghsf\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n-        (vec_merge:V4SF (vec_select:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")\n-                                         (parallel [(const_int 0)\n-                                                    (const_int 2)\n-                                                    (const_int 1)\n-                                                    (const_int 3)]))\n-                        (vec_select:V4SF (match_operand:V4SF 2 \"register_operand\" \"v\")\n-                                         (parallel [(const_int 2)\n-                                                    (const_int 0)\n-                                                    (const_int 3)\n-                                                    (const_int 1)]))\n-                      (const_int 5)))]\n+        (vec_select:V4SF\n+\t  (vec_concat:V8SF\n+\t    (match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t    (match_operand:V4SF 2 \"register_operand\" \"v\"))\n+\t  (parallel [(const_int 0) (const_int 4)\n+\t\t     (const_int 1) (const_int 5)])))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SFmode)\"\n   \"vmrghw %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrglb\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (vec_merge:V16QI (vec_select:V16QI (match_operand:V16QI 1 \"register_operand\" \"v\")\n-\t\t\t\t\t   (parallel [(const_int 8)\n-\t\t\t\t\t   \t      (const_int 0)\n-\t\t\t\t\t   \t      (const_int 9)\n-\t\t\t\t\t   \t      (const_int 1)\n-\t\t\t\t\t   \t      (const_int 10)\n-\t\t\t\t\t   \t      (const_int 2)\n-\t\t\t\t\t\t      (const_int 11)\n-\t\t\t\t\t\t      (const_int 3)\n-\t\t\t\t\t   \t      (const_int 12)\n-\t\t\t\t\t   \t      (const_int 4)\n-\t\t\t\t\t   \t      (const_int 13)\n-\t\t\t\t\t   \t      (const_int 5)\n-\t\t\t\t\t   \t      (const_int 14)\n-\t\t\t\t\t   \t      (const_int 6)\n-\t\t\t\t\t   \t      (const_int 15)\n-\t\t\t\t\t\t      (const_int 7)]))\n-                      (vec_select:V16QI (match_operand:V16QI 2 \"register_operand\" \"v\")\n-\t\t\t\t\t   (parallel [(const_int 0)\n-\t\t\t\t\t   \t      (const_int 8)\n-\t\t\t\t\t   \t      (const_int 1)\n-\t\t\t\t\t   \t      (const_int 9)\n-\t\t\t\t\t   \t      (const_int 2)\n-\t\t\t\t\t   \t      (const_int 10)\n-\t\t\t\t\t\t      (const_int 3)\n-\t\t\t\t\t\t      (const_int 11)\n-\t\t\t\t\t   \t      (const_int 4)\n-\t\t\t\t\t   \t      (const_int 12)\n-\t\t\t\t\t   \t      (const_int 5)\n-\t\t\t\t\t   \t      (const_int 13)\n-\t\t\t\t\t   \t      (const_int 6)\n-\t\t\t\t\t   \t      (const_int 14)\n-\t\t\t\t\t   \t      (const_int 7)\n-\t\t\t\t\t\t      (const_int 15)]))\n-\t\t      (const_int 21845)))]\n+        (vec_select:V16QI\n+\t  (vec_concat:V32QI\n+\t    (match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V16QI 2 \"register_operand\" \"v\"))\n+\t  (parallel [(const_int  8) (const_int 24)\n+\t\t     (const_int  9) (const_int 25)\n+\t\t     (const_int 10) (const_int 26)\n+\t\t     (const_int 11) (const_int 27)\n+\t\t     (const_int 12) (const_int 28)\n+\t\t     (const_int 13) (const_int 29)\n+\t\t     (const_int 14) (const_int 30)\n+\t\t     (const_int 15) (const_int 31)])))]\n   \"TARGET_ALTIVEC\"\n   \"vmrglb %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrglh\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (vec_merge:V8HI (vec_select:V8HI (match_operand:V8HI 1 \"register_operand\" \"v\")\n-\t\t\t\t\t   (parallel [(const_int 4)\n-\t\t\t\t\t   \t      (const_int 0)\n-\t\t\t\t\t   \t      (const_int 5)\n-\t\t\t\t\t   \t      (const_int 1)\n-\t\t\t\t\t   \t      (const_int 6)\n-\t\t\t\t\t   \t      (const_int 2)\n-\t\t\t\t\t   \t      (const_int 7)\n-\t\t\t\t\t   \t      (const_int 3)]))\n-                        (vec_select:V8HI (match_operand:V8HI 2 \"register_operand\" \"v\")\n-\t\t\t\t\t   (parallel [(const_int 0)\n-\t\t\t\t\t   \t      (const_int 4)\n-\t\t\t\t\t   \t      (const_int 1)\n-\t\t\t\t\t   \t      (const_int 5)\n-\t\t\t\t\t   \t      (const_int 2)\n-\t\t\t\t\t   \t      (const_int 6)\n-\t\t\t\t\t   \t      (const_int 3)\n-\t\t\t\t\t   \t      (const_int 7)]))\n-\t\t      (const_int 85)))]\n+        (vec_select:V8HI\n+\t  (vec_concat:V16HI\n+\t    (match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8HI 2 \"register_operand\" \"v\"))\n+\t  (parallel [(const_int 4) (const_int 12)\n+\t\t     (const_int 5) (const_int 13)\n+\t\t     (const_int 6) (const_int 14)\n+\t\t     (const_int 7) (const_int 15)])))]\n   \"TARGET_ALTIVEC\"\n   \"vmrglh %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrglw\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (vec_merge:V4SI\n-\t (vec_select:V4SI (match_operand:V4SI 1 \"register_operand\" \"v\")\n-\t\t\t  (parallel [(const_int 2)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 1)]))\n-\t (vec_select:V4SI (match_operand:V4SI 2 \"register_operand\" \"v\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 3)]))\n-\t (const_int 5)))]\n+        (vec_select:V4SI\n+\t  (vec_concat:V8SI\n+\t    (match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V4SI 2 \"register_operand\" \"v\"))\n+\t  (parallel [(const_int 2) (const_int 6)\n+\t\t     (const_int 3) (const_int 7)])))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n   \"vmrglw %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"*altivec_vmrglsf\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n-        (vec_merge:V4SF\n-\t (vec_select:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")\n-\t\t\t  (parallel [(const_int 2)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 1)]))\n-\t (vec_select:V4SF (match_operand:V4SF 2 \"register_operand\" \"v\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 3)]))\n-\t (const_int 5)))]\n+        (vec_select:V4SF\n+\t (vec_concat:V8SF\n+\t   (match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t   (match_operand:V4SF 2 \"register_operand\" \"v\"))\n+\t (parallel [(const_int 2) (const_int 6)\n+\t\t    (const_int 3) (const_int 7)])))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SFmode)\"\n   \"vmrglw %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n@@ -1332,7 +1242,7 @@\n \n (define_insn \"*altivec_vrfiz\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n-  \t(fix:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")))]\n+\t(fix:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")))]\n   \"VECTOR_UNIT_ALTIVEC_P (V4SFmode)\"\n   \"vrfiz %0,%1\"\n   [(set_attr \"type\" \"vecfloat\")])\n@@ -1366,6 +1276,19 @@\n   \"TARGET_ALTIVEC\"\n   \"\")\n \n+(define_expand \"vec_perm_constv16qi\"\n+  [(match_operand:V16QI 0 \"register_operand\" \"\")\n+   (match_operand:V16QI 1 \"register_operand\" \"\")\n+   (match_operand:V16QI 2 \"register_operand\" \"\")\n+   (match_operand:V16QI 3 \"\" \"\")]\n+  \"TARGET_ALTIVEC\"\n+{\n+  if (altivec_expand_vec_perm_const (operands))\n+    DONE;\n+  else\n+    FAIL;\n+})\n+\n (define_insn \"altivec_vrfip\"\t\t; ceil\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n         (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")]\n@@ -1494,47 +1417,47 @@\n \n (define_insn \"altivec_vupkhsb\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-  \t(unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n+\t(unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VUPKHSB))]\n   \"TARGET_ALTIVEC\"\n   \"vupkhsb %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vupkhpx\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-  \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n+\t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VUPKHPX))]\n   \"TARGET_ALTIVEC\"\n   \"vupkhpx %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vupkhsh\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-  \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n+\t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VUPKHSH))]\n   \"TARGET_ALTIVEC\"\n   \"vupkhsh %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vupklsb\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-  \t(unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n+\t(unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VUPKLSB))]\n   \"TARGET_ALTIVEC\"\n   \"vupklsb %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vupklpx\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-  \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n+\t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VUPKLPX))]\n   \"TARGET_ALTIVEC\"\n   \"vupklpx %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vupklsh\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-  \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n+\t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VUPKLSH))]\n   \"TARGET_ALTIVEC\"\n   \"vupklsh %0,%1\"\n@@ -2429,140 +2352,6 @@\n   \"stvrxl %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n-;; ??? This is still used directly by vector.md\n-(define_expand \"vec_extract_evenv4si\"\n- [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n-        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"\")]\n-\t\t      UNSPEC_EXTEVEN_V4SI))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  rtx mask = gen_reg_rtx (V16QImode);\n-  rtvec v = rtvec_alloc (16);\n-\n-  RTVEC_ELT (v, 0) = gen_rtx_CONST_INT (QImode, 0);\n-  RTVEC_ELT (v, 1) = gen_rtx_CONST_INT (QImode, 1);\n-  RTVEC_ELT (v, 2) = gen_rtx_CONST_INT (QImode, 2);\n-  RTVEC_ELT (v, 3) = gen_rtx_CONST_INT (QImode, 3);\n-  RTVEC_ELT (v, 4) = gen_rtx_CONST_INT (QImode, 8);\n-  RTVEC_ELT (v, 5) = gen_rtx_CONST_INT (QImode, 9);\n-  RTVEC_ELT (v, 6) = gen_rtx_CONST_INT (QImode, 10);\n-  RTVEC_ELT (v, 7) = gen_rtx_CONST_INT (QImode, 11);\n-  RTVEC_ELT (v, 8) = gen_rtx_CONST_INT (QImode, 16);\n-  RTVEC_ELT (v, 9) = gen_rtx_CONST_INT (QImode, 17);\n-  RTVEC_ELT (v, 10) = gen_rtx_CONST_INT (QImode, 18);\n-  RTVEC_ELT (v, 11) = gen_rtx_CONST_INT (QImode, 19);\n-  RTVEC_ELT (v, 12) = gen_rtx_CONST_INT (QImode, 24);\n-  RTVEC_ELT (v, 13) = gen_rtx_CONST_INT (QImode, 25);\n-  RTVEC_ELT (v, 14) = gen_rtx_CONST_INT (QImode, 26);\n-  RTVEC_ELT (v, 15) = gen_rtx_CONST_INT (QImode, 27);\n-  emit_insn (gen_vec_initv16qi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n-  emit_insn (gen_altivec_vperm_v4si (operands[0], operands[1], operands[2], mask));\n-  \n-  DONE;\n-}\")\n-\n-;; ??? This is still used directly by vector.md\n-(define_expand \"vec_extract_evenv4sf\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"\")\n-                      (match_operand:V4SF 2 \"register_operand\" \"\")]\n-                      UNSPEC_EXTEVEN_V4SF))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{ \n-  rtx mask = gen_reg_rtx (V16QImode);\n-  rtvec v = rtvec_alloc (16);\n-  \n-  RTVEC_ELT (v, 0) = gen_rtx_CONST_INT (QImode, 0);\n-  RTVEC_ELT (v, 1) = gen_rtx_CONST_INT (QImode, 1);\n-  RTVEC_ELT (v, 2) = gen_rtx_CONST_INT (QImode, 2);\n-  RTVEC_ELT (v, 3) = gen_rtx_CONST_INT (QImode, 3);\n-  RTVEC_ELT (v, 4) = gen_rtx_CONST_INT (QImode, 8);\n-  RTVEC_ELT (v, 5) = gen_rtx_CONST_INT (QImode, 9);\n-  RTVEC_ELT (v, 6) = gen_rtx_CONST_INT (QImode, 10);\n-  RTVEC_ELT (v, 7) = gen_rtx_CONST_INT (QImode, 11);\n-  RTVEC_ELT (v, 8) = gen_rtx_CONST_INT (QImode, 16);\n-  RTVEC_ELT (v, 9) = gen_rtx_CONST_INT (QImode, 17);\n-  RTVEC_ELT (v, 10) = gen_rtx_CONST_INT (QImode, 18);\n-  RTVEC_ELT (v, 11) = gen_rtx_CONST_INT (QImode, 19);\n-  RTVEC_ELT (v, 12) = gen_rtx_CONST_INT (QImode, 24);\n-  RTVEC_ELT (v, 13) = gen_rtx_CONST_INT (QImode, 25);\n-  RTVEC_ELT (v, 14) = gen_rtx_CONST_INT (QImode, 26);\n-  RTVEC_ELT (v, 15) = gen_rtx_CONST_INT (QImode, 27);\n-  emit_insn (gen_vec_initv16qi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n-  emit_insn (gen_altivec_vperm_v4sf (operands[0], operands[1], operands[2], mask));\n-  \n-  DONE;\n-}\")\n-\n-(define_insn \"vpkuhum_nomode\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand 1 \"register_operand\" \"v\")\n-                       (match_operand 2 \"register_operand\" \"v\")]\n-                      UNSPEC_VPKUHUM))] \n-  \"TARGET_ALTIVEC\"\n-  \"vpkuhum %0,%1,%2\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"vpkuwum_nomode\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand 1 \"register_operand\" \"v\")\n-                      (match_operand 2 \"register_operand\" \"v\")]\n-                     UNSPEC_VPKUWUM))]\n-  \"TARGET_ALTIVEC\"\n-  \"vpkuwum %0,%1,%2\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_expand \"vec_extract_oddv8hi\"\n- [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n-        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"\")\n-                      (match_operand:V8HI 2 \"register_operand\" \"\")]\n-                      UNSPEC_EXTODD_V8HI))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  emit_insn (gen_vpkuwum_nomode (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_expand \"vec_extract_oddv16qi\"\n- [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n-        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"\")\n-                      (match_operand:V16QI 2 \"register_operand\" \"\")]\n-                      UNSPEC_EXTODD_V16QI))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  emit_insn (gen_vpkuhum_nomode (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_expand \"vec_interleave_high<mode>\"\n- [(set (match_operand:VI 0 \"register_operand\" \"\")\n-        (unspec:VI [(match_operand:VI 1 \"register_operand\" \"\")\n-                    (match_operand:VI 2 \"register_operand\" \"\")]\n-                     UNSPEC_INTERHI))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  emit_insn (gen_altivec_vmrgh<VI_char> (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_expand \"vec_interleave_low<mode>\"\n- [(set (match_operand:VI 0 \"register_operand\" \"\")\n-        (unspec:VI [(match_operand:VI 1 \"register_operand\" \"\")\n-                    (match_operand:VI 2 \"register_operand\" \"\")]\n-                     UNSPEC_INTERLO))]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  emit_insn (gen_altivec_vmrgl<VI_char> (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n (define_expand \"vec_unpacks_float_hi_v8hi\"\n  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n         (unspec:V4SF [(match_operand:V8HI 1 \"register_operand\" \"\")]"}, {"sha": "9dce18d81498f3d75f237a6cbf16ad7793045898", "filename": "gcc/config/rs6000/paired.md", "status": "modified", "additions": 39, "deletions": 77, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Fpaired.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Fpaired.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpaired.md?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -272,48 +272,61 @@\n \n (define_insn \"paired_merge00\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(vec_concat:V2SF\n-\t (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n-\t\t\t(parallel [(const_int 0)]))\n-\t (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n-\t\t\t(parallel [(const_int 0)]))))]\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t  (parallel [(const_int 0) (const_int 2)])))]\n   \"TARGET_PAIRED_FLOAT\"\n   \"ps_merge00 %0, %1, %2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"paired_merge01\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(vec_concat:V2SF\n-\t (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n-\t\t\t(parallel [(const_int 0)]))\n-\t (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n-\t\t\t(parallel [(const_int 1)]))))]\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t  (parallel [(const_int 0) (const_int 3)])))]\n   \"TARGET_PAIRED_FLOAT\"\n   \"ps_merge01 %0, %1, %2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"paired_merge10\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(vec_concat:V2SF\n-\t (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n-\t\t\t(parallel [(const_int 1)]))\n-\t (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n-\t\t\t(parallel [(const_int 0)]))))]\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t  (parallel [(const_int 1) (const_int 2)])))]\n   \"TARGET_PAIRED_FLOAT\"\n   \"ps_merge10 %0, %1, %2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"paired_merge11\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(vec_concat:V2SF\n-\t (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n-\t\t\t(parallel [(const_int 1)]))\n-\t (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n-\t\t\t(parallel [(const_int 1)]))))]\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t  (parallel [(const_int 1) (const_int 3)])))]\n   \"TARGET_PAIRED_FLOAT\"\n   \"ps_merge11 %0, %1, %2\"\n   [(set_attr \"type\" \"fp\")])\n \n+(define_expand \"vec_perm_constv2sf\"\n+  [(match_operand:V2SF 0 \"gpc_reg_operand\" \"\")\n+   (match_operand:V2SF 1 \"gpc_reg_operand\" \"\")\n+   (match_operand:V2SF 2 \"gpc_reg_operand\" \"\")\n+   (match_operand:V2SI 3 \"\" \"\")]\n+  \"TARGET_PAIRED_FLOAT\"\n+{\n+  if (rs6000_expand_vec_perm_const (operands))\n+    DONE;\n+  else\n+    FAIL;\n+})\n+\n (define_insn \"paired_sum0\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n \t(vec_concat:V2SF (plus:SF (vec_select:SF\n@@ -439,55 +452,6 @@\n   DONE;\n })\n \n-(define_expand \"vec_interleave_highv2sf\"\n- [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n-                      (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")]\n-                      UNSPEC_INTERHI_V2SF))]\n-  \"TARGET_PAIRED_FLOAT\"\n-  \"\n-{\n-  emit_insn (gen_paired_merge00 (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_expand \"vec_interleave_lowv2sf\"\n- [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n-                      (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")]\n-                      UNSPEC_INTERLO_V2SF))]\n-  \"TARGET_PAIRED_FLOAT\"\n-  \"\n-{\n-  emit_insn (gen_paired_merge11 (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_expand \"vec_extract_evenv2sf\"\n- [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n-                      (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")]\n-                      UNSPEC_EXTEVEN_V2SF))]\n-  \"TARGET_PAIRED_FLOAT\"\n-  \"\n-{\n-  emit_insn (gen_paired_merge00 (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_expand \"vec_extract_oddv2sf\"\n- [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n-                      (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")]\n-                      UNSPEC_EXTODD_V2SF))]\n-  \"TARGET_PAIRED_FLOAT\"\n-  \"\n-{\n-  emit_insn (gen_paired_merge11 (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-\n (define_expand \"reduc_splus_v2sf\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n         (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\"))]\n@@ -516,12 +480,10 @@\n          (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n          (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_PAIRED_FLOAT && flag_unsafe_math_optimizations\"\n-  \"\n {\n-        if (paired_emit_vector_cond_expr (operands[0], operands[1], operands[2],\n-                                          operands[3], operands[4], operands[5]))\n-        DONE;\n-        else\n-        FAIL;\n-}\")\n-\n+  if (paired_emit_vector_cond_expr (operands[0], operands[1], operands[2],\n+                                    operands[3], operands[4], operands[5]))\n+    DONE;\n+  else\n+    FAIL;\n+})"}, {"sha": "29dd18d75bd4fa780e00bcf774943cb796228f31", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -112,6 +112,16 @@\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) > 0 && exact_log2 (INTVAL (op)) >= 0\")))\n \n+;; Match op = 0 or op = 1.\n+(define_predicate \"const_0_to_1_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 1)\")))\n+\n+;; Match op = 2 or op = 3.\n+(define_predicate \"const_2_to_3_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 2, 3)\")))\n+\n ;; Return 1 if op is a register that is not special.\n (define_predicate \"gpc_reg_operand\"\n    (and (match_operand 0 \"register_operand\")"}, {"sha": "776350bb5c06e31bd2ea22139045dfc9c2b54333", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -984,10 +984,10 @@ BU_VSX_2 (XXMRGHW_4SF,\t      \"xxmrghw\",\tCONST,\tvsx_xxmrghw_v4sf)\n BU_VSX_2 (XXMRGHW_4SI,\t      \"xxmrghw_4si\",\tCONST,\tvsx_xxmrghw_v4si)\n BU_VSX_2 (XXMRGLW_4SF,\t      \"xxmrglw\",\tCONST,\tvsx_xxmrglw_v4sf)\n BU_VSX_2 (XXMRGLW_4SI,\t      \"xxmrglw_4si\",\tCONST,\tvsx_xxmrglw_v4si)\n-BU_VSX_2 (VEC_MERGEL_V2DF,    \"mergel_2df\",\tCONST,\tvec_interleave_lowv2df)\n-BU_VSX_2 (VEC_MERGEL_V2DI,    \"mergel_2di\",\tCONST,\tvec_interleave_lowv2di)\n-BU_VSX_2 (VEC_MERGEH_V2DF,    \"mergeh_2df\",\tCONST,\tvec_interleave_highv2df)\n-BU_VSX_2 (VEC_MERGEH_V2DI,    \"mergeh_2di\",\tCONST,\tvec_interleave_highv2di)\n+BU_VSX_2 (VEC_MERGEL_V2DF,    \"mergel_2df\",\tCONST,\tvsx_mergel_v2df)\n+BU_VSX_2 (VEC_MERGEL_V2DI,    \"mergel_2di\",\tCONST,\tvsx_mergel_v2di)\n+BU_VSX_2 (VEC_MERGEH_V2DF,    \"mergeh_2df\",\tCONST,\tvsx_mergeh_v2df)\n+BU_VSX_2 (VEC_MERGEH_V2DI,    \"mergeh_2di\",\tCONST,\tvsx_mergeh_v2di)\n \n /* VSX abs builtin functions.  */\n BU_VSX_A (XVABSDP,\t      \"xvabsdp\",\tCONST,\tabsv2df2)"}, {"sha": "f72f40dfdb46f25964c65c59d7acf5ceec2da3e3", "filename": "gcc/config/rs6000/rs6000-modes.def", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -34,8 +34,10 @@ CC_MODE (CCFP);\n CC_MODE (CCEQ);\n \n /* Vector modes.  */\n-VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI */\n-VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI */\n+VECTOR_MODES (INT, 8);        /*       V8QI  V4HI V2SI */\n+VECTOR_MODES (INT, 16);       /* V16QI V8HI  V4SI V2DI */\n+VECTOR_MODES (INT, 32);       /* V32QI V16HI V8SI V4DI */\n VECTOR_MODE (INT, DI, 1);\n-VECTOR_MODES (FLOAT, 8);      /*            V4HF V2SF */\n-VECTOR_MODES (FLOAT, 16);     /*       V8HF V4SF V2DF */\n+VECTOR_MODES (FLOAT, 8);      /*             V4HF V2SF */\n+VECTOR_MODES (FLOAT, 16);     /*       V8HF  V4SF V2DF */\n+VECTOR_MODES (FLOAT, 32);     /*       V16HF V8SF V4DF */"}, {"sha": "23327f853fde53a0812d58b49f34dd1df1187d30", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -55,6 +55,10 @@ extern void rs6000_expand_vector_init (rtx, rtx);\n extern void paired_expand_vector_init (rtx, rtx);\n extern void rs6000_expand_vector_set (rtx, rtx, int);\n extern void rs6000_expand_vector_extract (rtx, rtx, int);\n+extern bool altivec_expand_vec_perm_const (rtx op[4]);\n+extern bool rs6000_expand_vec_perm_const (rtx op[4]);\n+extern void rs6000_expand_extract_even (rtx, rtx, rtx);\n+extern void rs6000_expand_interleave (rtx, rtx, rtx, bool);\n extern void build_mask64_2_operands (rtx, rtx *);\n extern int expand_block_clear (rtx[]);\n extern int expand_block_move (rtx[]);"}, {"sha": "1608f8cf3f31f0774a39dad3f8bb18ed9ef63037", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 324, "deletions": 1, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -1661,6 +1661,8 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P rs6000_legitimate_constant_p\n \n+#undef TARGET_VECTORIZE_VEC_PERM_CONST_OK\n+#define TARGET_VECTORIZE_VEC_PERM_CONST_OK rs6000_vectorize_vec_perm_const_ok\n \f\n \n /* Simplifications for entries below.  */\n@@ -4723,7 +4725,7 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n \t\t\t\t\t  copy_to_reg (XVECEXP (vals, 0, 3))));\n \t  emit_insn (gen_vsx_xvcvdpsp (flt_even, dbl_even));\n \t  emit_insn (gen_vsx_xvcvdpsp (flt_odd, dbl_odd));\n-\t  emit_insn (gen_vec_extract_evenv4sf (target, flt_even, flt_odd));\n+\t  rs6000_expand_extract_even (target, flt_even, flt_odd);\n \t}\n       return;\n     }\n@@ -26206,6 +26208,327 @@ rs6000_emit_parity (rtx dst, rtx src)\n     }\n }\n \n+/* Expand an Altivec constant permutation.  Return true if we match\n+   an efficient implementation; false to fall back to VPERM.  */\n+\n+bool\n+altivec_expand_vec_perm_const (rtx operands[4])\n+{\n+  struct altivec_perm_insn {\n+    enum insn_code impl;\n+    unsigned char perm[16];\n+  };\n+  static const struct altivec_perm_insn patterns[] = {\n+    { CODE_FOR_altivec_vpkuhum,\n+      {  1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 } },\n+    { CODE_FOR_altivec_vpkuwum,\n+      {  2,  3,  6,  7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31 } },\n+    { CODE_FOR_altivec_vmrghb,\n+      {  0, 16,  1, 17,  2, 18,  3, 19,  4, 20,  5, 21,  6, 22,  7, 23 } },\n+    { CODE_FOR_altivec_vmrghh,\n+      {  0,  1, 16, 17,  2,  3, 18, 19,  4,  5, 20, 21,  6,  7, 22, 23 } },\n+    { CODE_FOR_altivec_vmrghw,\n+      {  0,  1,  2,  3, 16, 17, 18, 19,  4,  5,  6,  7, 20, 21, 22, 23 } },\n+    { CODE_FOR_altivec_vmrglb,\n+      {  8, 24,  9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 } },\n+    { CODE_FOR_altivec_vmrglh,\n+      {  8,  9, 24, 25, 10, 11, 26, 27, 12, 13, 28, 29, 14, 15, 30, 31 } },\n+    { CODE_FOR_altivec_vmrglw,\n+      {  8,  9, 10, 11, 24, 25, 26, 27, 12, 13, 14, 15, 28, 29, 30, 31 } }\n+  };\n+\n+  unsigned int i, j, elt, which;\n+  unsigned char perm[16];\n+  rtx target, op0, op1, sel, x;\n+  bool one_vec;\n+\n+  target = operands[0];\n+  op0 = operands[1];\n+  op1 = operands[2];\n+  sel = operands[3];\n+\n+  /* Unpack the constant selector.  */\n+  for (i = which = 0; i < 16; ++i)\n+    {\n+      rtx e = XVECEXP (sel, 0, i);\n+      elt = INTVAL (e) & 31;\n+      which |= (elt < 16 ? 1 : 2);\n+      perm[i] = elt;\n+    }\n+\n+  /* Simplify the constant selector based on operands.  */\n+  switch (which)\n+    {\n+    default:\n+      gcc_unreachable ();\n+\n+    case 3:\n+      one_vec = false;\n+      if (!rtx_equal_p (op0, op1))\n+\tbreak;\n+      /* FALLTHRU */\n+\n+    case 2:\n+      for (i = 0; i < 16; ++i)\n+\tperm[i] &= 15;\n+      op0 = op1;\n+      one_vec = true;\n+      break;\n+\n+    case 1:\n+      op1 = op0;\n+      one_vec = true;\n+      break;\n+    }\n+ \n+  /* Look for splat patterns.  */\n+  if (one_vec)\n+    {\n+      elt = perm[0];\n+\n+      for (i = 0; i < 16; ++i)\n+\tif (perm[i] != elt)\n+\t  break;\n+      if (i == 16)\n+\t{\n+\t  emit_insn (gen_altivec_vspltb (target, op0, GEN_INT (elt)));\n+\t  return true;\n+\t}\n+\n+      if (elt % 2 == 0)\n+\t{\n+\t  for (i = 0; i < 16; i += 2)\n+\t    if (perm[i] != elt || perm[i + 1] != elt + 1)\n+\t      break;\n+\t  if (i == 16)\n+\t    {\n+\t      x = gen_reg_rtx (V8HImode);\n+\t      emit_insn (gen_altivec_vsplth (x, gen_lowpart (V8HImode, op0),\n+\t\t\t\t\t     GEN_INT (elt / 2)));\n+\t      emit_move_insn (target, gen_lowpart (V16QImode, x));\n+\t      return true;\n+\t    }\n+\t}\n+\n+      if (elt % 4 == 0)\n+\t{\n+\t  for (i = 0; i < 16; i += 4)\n+\t    if (perm[i] != elt\n+\t\t|| perm[i + 1] != elt + 1\n+\t\t|| perm[i + 2] != elt + 2\n+\t\t|| perm[i + 3] != elt + 3)\n+\t      break;\n+\t  if (i == 16)\n+\t    {\n+\t      x = gen_reg_rtx (V4SImode);\n+\t      emit_insn (gen_altivec_vspltw (x, gen_lowpart (V4SImode, op0),\n+\t\t\t\t\t     GEN_INT (elt / 4)));\n+\t      emit_move_insn (target, gen_lowpart (V16QImode, x));\n+\t      return true;\n+\t    }\n+\t}\n+    }\n+\n+  /* Look for merge and pack patterns.  */\n+  for (j = 0; j < ARRAY_SIZE (patterns); ++j)\n+    {\n+      bool swapped;\n+\n+      elt = patterns[j].perm[0];\n+      if (perm[0] == elt)\n+\tswapped = false;\n+      else if (perm[0] == elt + 16)\n+\tswapped = true;\n+      else\n+\tcontinue;\n+      for (i = 1; i < 16; ++i)\n+\t{\n+\t  elt = patterns[j].perm[i];\n+\t  if (swapped)\n+\t    elt = (elt >= 16 ? elt - 16 : elt + 16);\n+\t  else if (one_vec && elt >= 16)\n+\t    elt -= 16;\n+\t  if (perm[i] != elt)\n+\t    break;\n+\t}\n+      if (i == 16)\n+\t{\n+\t  enum insn_code icode = patterns[j].impl;\n+\t  enum machine_mode omode = insn_data[icode].operand[0].mode;\n+\t  enum machine_mode imode = insn_data[icode].operand[1].mode;\n+\n+\t  if (swapped)\n+\t    x = op0, op0 = op1, op1 = x;\n+\t  if (imode != V16QImode)\n+\t    {\n+\t      op0 = gen_lowpart (imode, op0);\n+\t      op1 = gen_lowpart (imode, op1);\n+\t    }\n+\t  if (omode == V16QImode)\n+\t    x = target;\n+\t  else\n+\t    x = gen_reg_rtx (omode);\n+\t  emit_insn (GEN_FCN (icode) (x, op0, op1));\n+\t  if (omode != V16QImode)\n+\t    emit_move_insn (target, gen_lowpart (V16QImode, x));\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n+/* Expand a Paired Single, VSX Permute Doubleword, or SPE constant permutation.\n+   Return true if we match an efficient implementation.  */\n+\n+static bool\n+rs6000_expand_vec_perm_const_1 (rtx target, rtx op0, rtx op1,\n+\t\t\t\tunsigned char perm0, unsigned char perm1)\n+{\n+  rtx x;\n+\n+  /* If both selectors come from the same operand, fold to single op.  */\n+  if ((perm0 & 2) == (perm1 & 2))\n+    {\n+      if (perm0 & 2)\n+\top0 = op1;\n+      else\n+\top1 = op0;\n+    }\n+  /* If both operands are equal, fold to simpler permutation.  */\n+  if (rtx_equal_p (op0, op1))\n+    {\n+      perm0 = perm0 & 1;\n+      perm1 = (perm1 & 1) + 2;\n+    }\n+  /* If the first selector comes from the second operand, swap.  */\n+  else if (perm0 & 2)\n+    {\n+      if (perm1 & 2)\n+\treturn false;\n+      perm0 -= 2;\n+      perm1 += 2;\n+      x = op0, op0 = op1, op1 = x;\n+    }\n+  /* If the second selector does not come from the second operand, fail.  */\n+  else if ((perm1 & 2) == 0)\n+    return false;\n+\n+  /* Success! */\n+  if (target != NULL)\n+    {\n+      enum machine_mode vmode, dmode;\n+      rtvec v;\n+\n+      vmode = GET_MODE (target);\n+      gcc_assert (GET_MODE_NUNITS (vmode) == 2);\n+      dmode = mode_for_vector (GET_MODE_INNER (vmode), 4);\n+\n+      x = gen_rtx_VEC_CONCAT (dmode, op0, op1);\n+      v = gen_rtvec (2, GEN_INT (perm0), GEN_INT (perm1));\n+      x = gen_rtx_VEC_SELECT (vmode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+      emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+    }\n+  return true;\n+}\n+\n+bool\n+rs6000_expand_vec_perm_const (rtx operands[4])\n+{\n+  rtx target, op0, op1, sel;\n+  unsigned char perm0, perm1;\n+\n+  target = operands[0];\n+  op0 = operands[1];\n+  op1 = operands[2];\n+  sel = operands[3];\n+\n+  /* Unpack the constant selector.  */\n+  perm0 = INTVAL (XVECEXP (sel, 0, 0)) & 3;\n+  perm1 = INTVAL (XVECEXP (sel, 0, 1)) & 3;\n+\n+  return rs6000_expand_vec_perm_const_1 (target, op0, op1, perm0, perm1);\n+}\n+\n+/* Test whether a constant permutation is supported.  */\n+\n+static bool\n+rs6000_vectorize_vec_perm_const_ok (enum machine_mode vmode,\n+\t\t\t\t    const unsigned char *sel)\n+{\n+  /* AltiVec (and thus VSX) can handle arbitrary permutations.  */\n+  if (TARGET_ALTIVEC)\n+    return true;\n+\n+  /* Check for ps_merge* or evmerge* insns.  */\n+  if ((TARGET_PAIRED_FLOAT && vmode == V2SFmode)\n+      || (TARGET_SPE && vmode == V2SImode))\n+    {\n+      rtx op0 = gen_raw_REG (vmode, LAST_VIRTUAL_REGISTER + 1);\n+      rtx op1 = gen_raw_REG (vmode, LAST_VIRTUAL_REGISTER + 2);\n+      return rs6000_expand_vec_perm_const_1 (NULL, op0, op1, sel[0], sel[1]);\n+    }\n+\n+  return false;\n+}\n+\n+/* A subroutine for rs6000_expand_extract_even & rs6000_expand_interleave.  */\n+\n+static void\n+rs6000_do_expand_vec_perm (rtx target, rtx op0, rtx op1,\n+\t\t\t   enum machine_mode vmode, unsigned nelt, rtx perm[])\n+{\n+  enum machine_mode imode;\n+  rtx x;\n+\n+  imode = vmode;\n+  if (GET_MODE_CLASS (vmode) != MODE_VECTOR_INT)\n+    {\n+      imode = GET_MODE_INNER (vmode);\n+      imode = mode_for_size (GET_MODE_BITSIZE (imode), MODE_INT, 0);\n+      imode = mode_for_vector (imode, nelt);\n+    }\n+\n+  x = gen_rtx_CONST_VECTOR (imode, gen_rtvec_v (nelt, perm));\n+  x = expand_vec_perm (vmode, op0, op1, x, target);\n+  if (x != target)\n+    emit_move_insn (target, x);\n+}\n+\n+/* Expand an extract even operation.  */\n+\n+void\n+rs6000_expand_extract_even (rtx target, rtx op0, rtx op1)\n+{\n+  enum machine_mode vmode = GET_MODE (target);\n+  unsigned i, nelt = GET_MODE_NUNITS (vmode);\n+  rtx perm[16];\n+\n+  for (i = 0; i < nelt; i++)\n+    perm[i] = GEN_INT (i * 2);\n+\n+  rs6000_do_expand_vec_perm (target, op0, op1, vmode, nelt, perm);\n+}\n+\n+/* Expand a vector interleave operation.  */\n+\n+void\n+rs6000_expand_interleave (rtx target, rtx op0, rtx op1, bool highp)\n+{\n+  enum machine_mode vmode = GET_MODE (target);\n+  unsigned i, high, nelt = GET_MODE_NUNITS (vmode);\n+  rtx perm[16];\n+\n+  high = (highp == TARGET_BIG_ENDIAN ? 0 : nelt / 2);\n+  for (i = 0; i < nelt / 2; i++)\n+    {\n+      perm[i * 2] = GEN_INT (i + high);\n+      perm[i * 2 + 1] = GEN_INT (i + nelt + high);\n+    }\n+\n+  rs6000_do_expand_vec_perm (target, op0, op1, vmode, nelt, perm);\n+}\n+\n /* Return an RTX representing where to find the function value of a\n    function returning MODE.  */\n static rtx"}, {"sha": "bbe11b9124be9c31a72bd453d0d13e08a96807f2", "filename": "gcc/config/rs6000/spe.md", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -441,56 +441,65 @@\n \n (define_insn \"spe_evmergehi\"\n   [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(vec_merge:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t(vec_select:V2SI\n-\t\t\t (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t\t (parallel [(const_int 1)\n-\t\t\t\t    (const_int 0)]))\n-\t\t\t(const_int 2)))]\n+\t(vec_select:V2SI\n+\t  (vec_concat:V4SI\n+\t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+\t  (parallel [(const_int 0) (const_int 2)])))]\n   \"TARGET_SPE\"\n   \"evmergehi %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")\n    (set_attr  \"length\" \"4\")])\n \n (define_insn \"spe_evmergehilo\"\n   [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(vec_merge:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t\t(const_int 2)))]\n+\t(vec_select:V2SI\n+\t  (vec_concat:V4SI\n+\t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+\t  (parallel [(const_int 0) (const_int 3)])))]\n   \"TARGET_SPE\"\n   \"evmergehilo %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")\n    (set_attr  \"length\" \"4\")])\n \n (define_insn \"spe_evmergelo\"\n   [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(vec_merge:V2SI (vec_select:V2SI\n-\t\t\t (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t (parallel [(const_int 1)\n-\t\t\t\t    (const_int 0)]))\n-\t\t\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t\t(const_int 2)))]\n+\t(vec_select:V2SI\n+\t  (vec_concat:V4SI\n+\t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+\t  (parallel [(const_int 1) (const_int 3)])))]\n   \"TARGET_SPE\"\n   \"evmergelo %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")\n    (set_attr  \"length\" \"4\")])\n \n (define_insn \"spe_evmergelohi\"\n   [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(vec_merge:V2SI (vec_select:V2SI\n-\t\t\t (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t (parallel [(const_int 1)\n-\t\t\t\t    (const_int 0)]))\n-\t\t\t(vec_select:V2SI\n-\t\t\t (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t\t (parallel [(const_int 1)\n-\t\t\t\t    (const_int 0)]))\n-\t\t\t(const_int 2)))]\n+\t(vec_select:V2SI\n+\t  (vec_concat:V4SI\n+\t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n+\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n+\t  (parallel [(const_int 1) (const_int 2)])))]\n   \"TARGET_SPE\"\n   \"evmergelohi %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")\n    (set_attr  \"length\" \"4\")])\n \n+(define_expand \"vec_perm_constv2si\"\n+  [(match_operand:V2SI 0 \"gpc_reg_operand\" \"\")\n+   (match_operand:V2SI 1 \"gpc_reg_operand\" \"\")\n+   (match_operand:V2SI 2 \"gpc_reg_operand\" \"\")\n+   (match_operand:V2SI 3 \"\" \"\")]\n+  \"TARGET_SPE\"\n+{\n+  if (rs6000_expand_vec_perm_const (operands))\n+    DONE;\n+  else\n+    FAIL;\n+})\n+\n (define_insn \"spe_evnand\"\n   [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n         (not:V2SI (and:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")"}, {"sha": "bcb23ac5de60d7fb973f87207f278fe8fa1a0a6e", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 9, "deletions": 65, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -747,62 +747,6 @@\n \t\t\t\tINTVAL (operands[2]));\n   DONE;\n })\n-\n-;; Interleave patterns\n-(define_expand \"vec_interleave_highv4sf\"\n-  [(set (match_operand:V4SF 0 \"vfloat_operand\" \"\")\n-        (vec_merge:V4SF\n-\t (vec_select:V4SF (match_operand:V4SF 1 \"vfloat_operand\" \"\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 3)]))\n-\t (vec_select:V4SF (match_operand:V4SF 2 \"vfloat_operand\" \"\")\n-\t\t\t  (parallel [(const_int 2)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 1)]))\n-\t (const_int 5)))]\n-  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\"\n-  \"\")\n-\n-(define_expand \"vec_interleave_lowv4sf\"\n-  [(set (match_operand:V4SF 0 \"vfloat_operand\" \"\")\n-        (vec_merge:V4SF\n-\t (vec_select:V4SF (match_operand:V4SF 1 \"vfloat_operand\" \"\")\n-\t\t\t  (parallel [(const_int 2)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 1)]))\n-\t (vec_select:V4SF (match_operand:V4SF 2 \"vfloat_operand\" \"\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 3)]))\n-\t (const_int 5)))]\n-  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\"\n-  \"\")\n-\n-(define_expand \"vec_interleave_high<mode>\"\n-  [(set (match_operand:VEC_64 0 \"vfloat_operand\" \"\")\n-\t(vec_concat:VEC_64\n-\t (vec_select:<VEC_base> (match_operand:VEC_64 1 \"vfloat_operand\" \"\")\n-\t\t\t\t(parallel [(const_int 0)]))\n-\t (vec_select:<VEC_base> (match_operand:VEC_64 2 \"vfloat_operand\" \"\")\n-\t\t\t\t(parallel [(const_int 0)]))))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"\")\n-\n-(define_expand \"vec_interleave_low<mode>\"\n-  [(set (match_operand:VEC_64 0 \"vfloat_operand\" \"\")\n-\t(vec_concat:VEC_64\n-\t (vec_select:<VEC_base> (match_operand:VEC_64 1 \"vfloat_operand\" \"\")\n-\t\t\t\t(parallel [(const_int 1)]))\n-\t (vec_select:<VEC_base> (match_operand:VEC_64 2 \"vfloat_operand\" \"\")\n-\t\t\t\t(parallel [(const_int 1)]))))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"\")\n-\n \f\n ;; Convert double word types to single word types\n (define_expand \"vec_pack_trunc_v2df\"\n@@ -816,7 +760,7 @@\n \n   emit_insn (gen_vsx_xvcvdpsp (r1, operands[1]));\n   emit_insn (gen_vsx_xvcvdpsp (r2, operands[2]));\n-  emit_insn (gen_vec_extract_evenv4sf (operands[0], r1, r2));\n+  rs6000_expand_extract_even (operands[0], r1, r2);\n   DONE;\n })\n \n@@ -831,7 +775,7 @@\n \n   emit_insn (gen_vsx_xvcvdpsxws (r1, operands[1]));\n   emit_insn (gen_vsx_xvcvdpsxws (r2, operands[2]));\n-  emit_insn (gen_vec_extract_evenv4si (operands[0], r1, r2));\n+  rs6000_expand_extract_even (operands[0], r1, r2);\n   DONE;\n })\n \n@@ -846,7 +790,7 @@\n \n   emit_insn (gen_vsx_xvcvdpuxws (r1, operands[1]));\n   emit_insn (gen_vsx_xvcvdpuxws (r2, operands[2]));\n-  emit_insn (gen_vec_extract_evenv4si (operands[0], r1, r2));\n+  rs6000_expand_extract_even (operands[0], r1, r2);\n   DONE;\n })\n \n@@ -858,7 +802,7 @@\n {\n   rtx reg = gen_reg_rtx (V4SFmode);\n \n-  emit_insn (gen_vec_interleave_highv4sf (reg, operands[1], operands[1]));\n+  rs6000_expand_interleave (reg, operands[1], operands[1], true);\n   emit_insn (gen_vsx_xvcvspdp (operands[0], reg));\n   DONE;\n })\n@@ -870,7 +814,7 @@\n {\n   rtx reg = gen_reg_rtx (V4SFmode);\n \n-  emit_insn (gen_vec_interleave_lowv4sf (reg, operands[1], operands[1]));\n+  rs6000_expand_interleave (reg, operands[1], operands[1], false);\n   emit_insn (gen_vsx_xvcvspdp (operands[0], reg));\n   DONE;\n })\n@@ -882,7 +826,7 @@\n {\n   rtx reg = gen_reg_rtx (V4SImode);\n \n-  emit_insn (gen_vec_interleave_highv4si (reg, operands[1], operands[1]));\n+  rs6000_expand_interleave (reg, operands[1], operands[1], true);\n   emit_insn (gen_vsx_xvcvsxwdp (operands[0], reg));\n   DONE;\n })\n@@ -894,7 +838,7 @@\n {\n   rtx reg = gen_reg_rtx (V4SImode);\n \n-  emit_insn (gen_vec_interleave_lowv4si (reg, operands[1], operands[1]));\n+  rs6000_expand_interleave (reg, operands[1], operands[1], false);\n   emit_insn (gen_vsx_xvcvsxwdp (operands[0], reg));\n   DONE;\n })\n@@ -906,7 +850,7 @@\n {\n   rtx reg = gen_reg_rtx (V4SImode);\n \n-  emit_insn (gen_vec_interleave_highv4si (reg, operands[1], operands[1]));\n+  rs6000_expand_interleave (reg, operands[1], operands[1], true);\n   emit_insn (gen_vsx_xvcvuxwdp (operands[0], reg));\n   DONE;\n })\n@@ -918,7 +862,7 @@\n {\n   rtx reg = gen_reg_rtx (V4SImode);\n \n-  emit_insn (gen_vec_interleave_lowv4si (reg, operands[1], operands[1]));\n+  rs6000_expand_interleave (reg, operands[1], operands[1], false);\n   emit_insn (gen_vsx_xvcvuxwdp (operands[0], reg));\n   DONE;\n })"}, {"sha": "634bd23f4370266e6e1baa9633569643bc864461", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 94, "deletions": 56, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -180,7 +180,13 @@\n \t\t\t     (V4SI\t\"SI\")\n \t\t\t     (V8HI\t\"HI\")\n \t\t\t     (V16QI\t\"QI\")])\n-\t\t\t     \n+\n+;; Map to a double-sized vector mode\n+(define_mode_attr VS_double [(V4SI\t\"V8SI\")\n+\t\t\t     (V4SF\t\"V8SF\")\n+\t\t\t     (V2DI\t\"V4DI\")\n+\t\t\t     (V2DF\t\"V4DF\")])\n+\n ;; Constants for creating unspecs\n (define_c_enum \"unspec\"\n   [UNSPEC_VSX_CONCAT\n@@ -195,7 +201,6 @@\n    UNSPEC_VSX_CVSPUXDS\n    UNSPEC_VSX_TDIV\n    UNSPEC_VSX_TSQRT\n-   UNSPEC_VSX_XXPERMDI\n    UNSPEC_VSX_SET\n    UNSPEC_VSX_ROUND_I\n    UNSPEC_VSX_ROUND_IC\n@@ -352,7 +357,7 @@\n (define_insn \"*vsx_div<mode>3\"\n   [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,?wa\")\n         (div:VSX_B (match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,wa\")\n-\t \t   (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,wa\")))]\n+\t\t   (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>div<VSs> %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_div>\")\n@@ -1184,39 +1189,88 @@\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"fp\")])\n \n-;; General double word oriented permute, allow the other vector types for\n-;; optimizing the permute instruction.\n-(define_insn \"vsx_xxpermdi_<mode>\"\n-  [(set (match_operand:VSX_L 0 \"vsx_register_operand\" \"=wd,?wa\")\n-\t(unspec:VSX_L [(match_operand:VSX_L 1 \"vsx_register_operand\" \"wd,wa\")\n-\t\t       (match_operand:VSX_L 2 \"vsx_register_operand\" \"wd,wa\")\n-\t\t       (match_operand:QI 3 \"u5bit_cint_operand\" \"i,i\")]\n-\t\t      UNSPEC_VSX_XXPERMDI))]\n+;; Expand the builtin form of xxpermdi to canonical rtl.\n+(define_expand \"vsx_xxpermdi_<mode>\"\n+  [(match_operand:VSX_L 0 \"vsx_register_operand\" \"\")\n+   (match_operand:VSX_L 1 \"vsx_register_operand\" \"\")\n+   (match_operand:VSX_L 2 \"vsx_register_operand\" \"\")\n+   (match_operand:QI 3 \"u5bit_cint_operand\" \"\")]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n-  \"xxpermdi %x0,%x1,%x2,%3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+{\n+  rtx target = operands[0];\n+  rtx op0 = operands[1];\n+  rtx op1 = operands[2];\n+  int mask = INTVAL (operands[3]);\n+  rtx perm0 = GEN_INT ((mask >> 1) & 1);\n+  rtx perm1 = GEN_INT ((mask & 1) + 2);\n+  rtx (*gen) (rtx, rtx, rtx, rtx, rtx);\n+\n+  if (<MODE>mode == V2DFmode)\n+    gen = gen_vsx_xxpermdi2_v2df_1;\n+  else\n+    {\n+      gen = gen_vsx_xxpermdi2_v2di_1;\n+      if (<MODE>mode != V2DImode)\n+\t{\n+\t  target = gen_lowpart (V2DImode, target);\n+\t  op0 = gen_lowpart (V2DImode, target);\n+\t  op1 = gen_lowpart (V2DImode, target);\n+\t}\n+    }\n+  emit_insn (gen (target, op0, op1, perm0, perm1));\n+  DONE;\n+})\n \n-;; Varient of xxpermdi that is emitted by the vec_interleave functions\n-(define_insn \"*vsx_xxpermdi2_<mode>\"\n+(define_insn \"vsx_xxpermdi2_<mode>_1\"\n   [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wd\")\n-\t(vec_concat:VSX_D\n-\t (vec_select:<VS_scalar>\n-\t  (match_operand:VSX_D 1 \"vsx_register_operand\" \"wd\")\n-\t  (parallel\n-\t   [(match_operand:QI 2 \"u5bit_cint_operand\" \"i\")]))\n-\t (vec_select:<VS_scalar>\n-\t  (match_operand:VSX_D 3 \"vsx_register_operand\" \"wd\")\n-\t  (parallel\n-\t   [(match_operand:QI 4 \"u5bit_cint_operand\" \"i\")]))))]\n+\t(vec_select:VSX_D\n+\t  (vec_concat:<VS_double>\n+\t    (match_operand:VSX_D 1 \"vsx_register_operand\" \"wd\")\n+\t    (match_operand:VSX_D 2 \"vsx_register_operand\" \"wd\"))\n+\t  (parallel [(match_operand 3 \"const_0_to_1_operand\" \"\")\n+\t\t     (match_operand 4 \"const_2_to_3_operand\" \"\")])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n-  gcc_assert ((UINTVAL (operands[2]) <= 1) && (UINTVAL (operands[4]) <= 1));\n-  operands[5] = GEN_INT (((INTVAL (operands[2]) & 1) << 1)\n-\t\t\t | (INTVAL (operands[4]) & 1));\n-  return \\\"xxpermdi %x0,%x1,%x3,%5\\\";\n+  int mask = (INTVAL (operands[3]) << 1) | (INTVAL (operands[4]) - 2);\n+  operands[3] = GEN_INT (mask);\n+  return \"xxpermdi %x0,%x1,%x2,%3\";\n }\n   [(set_attr \"type\" \"vecperm\")])\n \n+(define_expand \"vec_perm_const<mode>\"\n+  [(match_operand:VSX_D 0 \"vsx_register_operand\" \"\")\n+   (match_operand:VSX_D 1 \"vsx_register_operand\" \"\")\n+   (match_operand:VSX_D 2 \"vsx_register_operand\" \"\")\n+   (match_operand:V2DI  3 \"\" \"\")]\n+  \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n+{\n+  if (rs6000_expand_vec_perm_const (operands))\n+    DONE;\n+  else\n+    FAIL;\n+})\n+\n+;; Expanders for builtins\n+(define_expand \"vsx_mergel_<mode>\"\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"\")\n+\t(vec_select:VSX_D\n+\t  (vec_concat:<VS_double>\n+\t    (match_operand:VSX_D 1 \"vsx_register_operand\" \"\")\n+\t    (match_operand:VSX_D 2 \"vsx_register_operand\" \"\"))\n+\t  (parallel [(const_int 1) (const_int 3)])))]\n+  \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n+  \"\")\n+\n+(define_expand \"vsx_mergeh_<mode>\"\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"\")\n+\t(vec_select:VSX_D\n+\t  (vec_concat:<VS_double>\n+\t    (match_operand:VSX_D 1 \"vsx_register_operand\" \"\")\n+\t    (match_operand:VSX_D 2 \"vsx_register_operand\" \"\"))\n+\t  (parallel [(const_int 0) (const_int 2)])))]\n+  \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n+  \"\")\n+\n ;; V2DF/V2DI splat\n (define_insn \"vsx_splat_<mode>\"\n   [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wd,wd,wd,?wa,?wa,?wa\")\n@@ -1247,40 +1301,24 @@\n ;; V4SF/V4SI interleave\n (define_insn \"vsx_xxmrghw_<mode>\"\n   [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=wf,?wa\")\n-        (vec_merge:VSX_W\n-\t (vec_select:VSX_W\n-\t  (match_operand:VSX_W 1 \"vsx_register_operand\" \"wf,wa\")\n-\t  (parallel [(const_int 0)\n-\t\t     (const_int 2)\n-\t\t     (const_int 1)\n-\t\t     (const_int 3)]))\n-\t (vec_select:VSX_W\n-\t  (match_operand:VSX_W 2 \"vsx_register_operand\" \"wf,wa\")\n-\t  (parallel [(const_int 2)\n-\t\t     (const_int 0)\n-\t\t     (const_int 3)\n-\t\t     (const_int 1)]))\n-\t (const_int 5)))]\n+        (vec_select:VSX_W\n+\t  (vec_concat:<VS_double>\n+\t    (match_operand:VSX_W 1 \"vsx_register_operand\" \"wf,wa\")\n+\t    (match_operand:VSX_W 2 \"vsx_register_operand\" \"wf,wa\"))\n+\t  (parallel [(const_int 0) (const_int 4)\n+\t\t     (const_int 1) (const_int 5)])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"xxmrghw %x0,%x1,%x2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"vsx_xxmrglw_<mode>\"\n   [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=wf,?wa\")\n-        (vec_merge:VSX_W\n-\t (vec_select:VSX_W\n-\t  (match_operand:VSX_W 1 \"vsx_register_operand\" \"wf,wa\")\n-\t  (parallel [(const_int 2)\n-\t\t     (const_int 0)\n-\t\t     (const_int 3)\n-\t\t     (const_int 1)]))\n-\t (vec_select:VSX_W\n-\t  (match_operand:VSX_W 2 \"vsx_register_operand\" \"wf,?wa\")\n-\t  (parallel [(const_int 0)\n-\t\t     (const_int 2)\n-\t\t     (const_int 1)\n-\t\t     (const_int 3)]))\n-\t (const_int 5)))]\n+\t(vec_select:VSX_W\n+\t  (vec_concat:<VS_double>\n+\t    (match_operand:VSX_W 1 \"vsx_register_operand\" \"wf,wa\")\n+\t    (match_operand:VSX_W 2 \"vsx_register_operand\" \"wf,?wa\"))\n+\t  (parallel [(const_int 2) (const_int 6)\n+\t\t     (const_int 3) (const_int 7)])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"xxmrglw %x0,%x1,%x2\"\n   [(set_attr \"type\" \"vecperm\")])"}, {"sha": "41e3b40a6dbf4f80b0415a20e9352415f483b46b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -1,3 +1,9 @@\n+2011-12-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.target/powerpc/altivec-perm-1.c: New.\n+\t* gcc.target/powerpc/altivec-perm-2.c: New.\n+\t* gcc.target/powerpc/altivec-perm-4.c: New.\n+\n 2011-12-10  Joern Rennecke <joern.rennecke@embecosm.com>\n \n \t* gcc.target/epiphany/interrupt.c: Add dg-options \"-g\"."}, {"sha": "ee5c5eee9007e2376f8093939b03a9259a0ca39a", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-perm-1.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-1.c?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O -maltivec -mno-vsx\" } */\n+\n+typedef unsigned char V __attribute__((vector_size(16)));\n+\n+V b1(V x)\n+{\n+  return __builtin_shuffle(x, (V){ 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, });\n+}\n+\n+V b2(V x)\n+{\n+  return __builtin_shuffle(x, (V){ 2,3,2,3, 2,3,2,3, 2,3,2,3, 2,3,2,3, });\n+}\n+\n+V b4(V x)\n+{\n+  return __builtin_shuffle(x, (V){ 4,5,6,7, 4,5,6,7, 4,5,6,7, 4,5,6,7, });\n+}\n+\n+V p2(V x, V y)\n+{\n+  return __builtin_shuffle(x, y,\n+\t(V){ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 });\n+\n+}\n+\n+V p4(V x, V y)\n+{\n+  return __builtin_shuffle(x, y,\n+\t(V){ 2,  3,  6,  7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31 });\n+}\n+\n+V h1(V x, V y)\n+{\n+  return __builtin_shuffle(x, y,\n+\t(V){ 0, 16,  1, 17,  2, 18,  3, 19,  4, 20,  5, 21,  6, 22,  7, 23 });\n+}\n+\n+V h2(V x, V y)\n+{\n+  return __builtin_shuffle(x, y,\n+\t(V){ 0,  1, 16, 17,  2,  3, 18, 19,  4,  5, 20, 21,  6,  7, 22, 23 });\n+}\n+\n+V h4(V x, V y)\n+{\n+  return __builtin_shuffle(x, y,\n+\t(V){ 0,  1,  2,  3, 16, 17, 18, 19,  4,  5,  6,  7, 20, 21, 22, 23 });\n+}\n+\n+V l1(V x, V y)\n+{\n+  return __builtin_shuffle(x, y,\n+\t(V){ 8, 24,  9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 });\n+}\n+\n+V l2(V x, V y)\n+{\n+  return __builtin_shuffle(x, y,\n+\t(V){ 8,  9, 24, 25, 10, 11, 26, 27, 12, 13, 28, 29, 14, 15, 30, 31 });\n+}\n+\n+V l4(V x, V y)\n+{\n+  return __builtin_shuffle(x, y,\n+\t(V){ 8,  9, 10, 11, 24, 25, 26, 27, 12, 13, 14, 15, 28, 29, 30, 31 });\n+}\n+\n+/* { dg-final { scan-assembler-not \"vperm\" } } */\n+/* { dg-final { scan-assembler \"vspltb\" } } */\n+/* { dg-final { scan-assembler \"vsplth\" } } */\n+/* { dg-final { scan-assembler \"vspltw\" } } */\n+/* { dg-final { scan-assembler \"vpkuhum\" } } */\n+/* { dg-final { scan-assembler \"vpkuwum\" } } */"}, {"sha": "1b90bb9567cbc01510c092f92a04772c97302e7b", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-perm-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-2.c?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O -maltivec -mno-vsx\" } */\n+\n+typedef unsigned short V __attribute__((vector_size(16)));\n+\n+V f2(V x)\n+{\n+  return __builtin_shuffle(x, (V){ 1,1,1,1, 1,1,1,1, });\n+}\n+\n+V f4(V x)\n+{\n+  return __builtin_shuffle(x, (V){ 2,3,2,3, 2,3,2,3, });\n+}\n+\n+/* { dg-final { scan-assembler-not \"vperm\" } } */\n+/* { dg-final { scan-assembler \"vsplth\" } } */\n+/* { dg-final { scan-assembler \"vspltw\" } } */"}, {"sha": "9598edfb01035386dc49bcb54d9bd74bb13d3af8", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-perm-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfdad5836fb769478dfb68e280e29f0d00e5e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-4.c?ref=5aebfdad5836fb769478dfb68e280e29f0d00e5e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O -maltivec -mno-vsx\" } */\n+\n+typedef unsigned int V __attribute__((vector_size(16)));\n+\n+V f4(V x)\n+{\n+  return __builtin_shuffle(x, (V){ 1,1,1,1, });\n+}\n+\n+/* { dg-final { scan-assembler-not \"vperm\" } } */\n+/* { dg-final { scan-assembler \"vspltw\" } } */"}]}