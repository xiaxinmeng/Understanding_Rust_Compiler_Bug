{"sha": "d5cf3d8da6ef568929fc8bdfc1809593ff1988a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVjZjNkOGRhNmVmNTY4OTI5ZmM4YmRmYzE4MDk1OTNmZjE5ODhhOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-05-30T08:48:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-05-30T08:48:17Z"}, "message": "visium.c (visium_split_double_add): Minor tweaks.\n\n\t* config/visium/visium.c (visium_split_double_add): Minor tweaks.\n\t(visium_expand_copysign): Use gen_int_mode directly.\n\t(visium_compute_frame_size): Minor tweaks.\n\nFrom-SVN: r236871", "tree": {"sha": "0876698642c68b485f5c2b9f5dc752774823da8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0876698642c68b485f5c2b9f5dc752774823da8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5cf3d8da6ef568929fc8bdfc1809593ff1988a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cf3d8da6ef568929fc8bdfc1809593ff1988a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5cf3d8da6ef568929fc8bdfc1809593ff1988a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cf3d8da6ef568929fc8bdfc1809593ff1988a8/comments", "author": null, "committer": null, "parents": [{"sha": "6f2c0820aed6a0684be07101861c07f4bd43fd84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2c0820aed6a0684be07101861c07f4bd43fd84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2c0820aed6a0684be07101861c07f4bd43fd84"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "6488753958cd9d48b1d825c32deb34a5d855edbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf3d8da6ef568929fc8bdfc1809593ff1988a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf3d8da6ef568929fc8bdfc1809593ff1988a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5cf3d8da6ef568929fc8bdfc1809593ff1988a8", "patch": "@@ -1,3 +1,9 @@\n+2016-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/visium/visium.c (visium_split_double_add): Minor tweaks.\n+\t(visium_expand_copysign): Use gen_int_mode directly.\n+\t(visium_compute_frame_size): Minor tweaks.\n+\n 2016-05-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-vect-loop.c (vect_analyze_loop_2): Use"}, {"sha": "6712fed72bc8e23ecb3ae886ff742d77a05ea471", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf3d8da6ef568929fc8bdfc1809593ff1988a8/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf3d8da6ef568929fc8bdfc1809593ff1988a8/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=d5cf3d8da6ef568929fc8bdfc1809593ff1988a8", "patch": "@@ -2087,6 +2087,7 @@ visium_split_double_add (enum rtx_code code, rtx op0, rtx op1, rtx op2)\n   rtx op6 = gen_highpart (SImode, op0);\n   rtx op7 = (op1 == const0_rtx ? op1 : gen_highpart (SImode, op1));\n   rtx op8;\n+  rtx x, pat, flags;\n \n   /* If operand #2 is a small constant, then its high part is null.  */\n   if (CONST_INT_P (op2))\n@@ -2109,14 +2110,13 @@ visium_split_double_add (enum rtx_code code, rtx op0, rtx op1, rtx op2)\n     }\n \n   /* This is the {add,sub,neg}si3_insn_set_flags pattern.  */\n-  rtx x;\n   if (op4 == const0_rtx)\n     x = gen_rtx_NEG (SImode, op5);\n   else\n     x = gen_rtx_fmt_ee (code, SImode, op4, op5);\n-  rtx pat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n+  pat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n   XVECEXP (pat, 0, 0) = gen_rtx_SET (op3, x);\n-  rtx flags = gen_rtx_REG (CC_NOOVmode, FLAGS_REGNUM);\n+  flags = gen_rtx_REG (CC_NOOVmode, FLAGS_REGNUM);\n   x = gen_rtx_COMPARE (CC_NOOVmode, shallow_copy_rtx (x), const0_rtx);\n   XVECEXP (pat, 0, 1) = gen_rtx_SET (flags, x);\n   emit_insn (pat);\n@@ -2160,7 +2160,7 @@ visium_expand_copysign (rtx *operands, enum machine_mode mode)\n \t{\n \t  long l;\n \t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op1), l);\n-\t  op1 = force_reg (SImode, GEN_INT (trunc_int_for_mode (l, SImode)));\n+\t  op1 = force_reg (SImode, gen_int_mode (l, SImode));\n \t}\n     }\n   else\n@@ -3597,18 +3597,15 @@ visium_compute_frame_size (int size)\n int\n visium_initial_elimination_offset (int from, int to ATTRIBUTE_UNUSED)\n {\n-  const int frame_size = visium_compute_frame_size (get_frame_size ());\n   const int save_fp = current_frame_info.save_fp;\n   const int save_lr = current_frame_info.save_lr;\n   const int lr_slot = current_frame_info.lr_slot;\n-  const int local_frame_offset\n-    = (save_fp + save_lr + lr_slot) * UNITS_PER_WORD;\n   int offset;\n \n   if (from == FRAME_POINTER_REGNUM)\n-    offset = local_frame_offset;\n+    offset = (save_fp + save_lr + lr_slot) * UNITS_PER_WORD;\n   else if (from == ARG_POINTER_REGNUM)\n-    offset = frame_size;\n+    offset = visium_compute_frame_size (get_frame_size ());\n   else\n     gcc_unreachable ();\n "}]}