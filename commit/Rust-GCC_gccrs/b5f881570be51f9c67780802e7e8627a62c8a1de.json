{"sha": "b5f881570be51f9c67780802e7e8627a62c8a1de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmODgxNTcwYmU1MWY5YzY3NzgwODAyZTdlODYyN2E2MmM4YTFkZQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-07-13T09:26:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-13T09:26:59Z"}, "message": "expr.c (expand_expr): Only set MEM_IN_STRUCT_P if the memory address is not varying for...\n\n        * expr.c (expand_expr): Only set MEM_IN_STRUCT_P if the memory address\n        is not varying for REFERENCE_TYPE or when we think we might have found\n        an optimized access to the first element in an array.\n\nFrom-SVN: r21099", "tree": {"sha": "a0cbab974a5039faeee315e4122850b6a7d4fa72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0cbab974a5039faeee315e4122850b6a7d4fa72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5f881570be51f9c67780802e7e8627a62c8a1de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f881570be51f9c67780802e7e8627a62c8a1de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f881570be51f9c67780802e7e8627a62c8a1de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f881570be51f9c67780802e7e8627a62c8a1de/comments", "author": null, "committer": null, "parents": [{"sha": "bda991ee5e88baded69529b5c9271bba6c7399bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda991ee5e88baded69529b5c9271bba6c7399bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bda991ee5e88baded69529b5c9271bba6c7399bc"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "20b221d9aaec9f2ca08ebe6105c81ce92cad578a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f881570be51f9c67780802e7e8627a62c8a1de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f881570be51f9c67780802e7e8627a62c8a1de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5f881570be51f9c67780802e7e8627a62c8a1de", "patch": "@@ -1,3 +1,9 @@\n+Mon Jul 13 10:19:00 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* expr.c (expand_expr): Only set MEM_IN_STRUCT_P if the memory address\n+\tis not varying for REFERENCE_TYPE or when we think we might have found\n+\tan optimized access to the first element in an array.\n+\n Mon Jul 13 02:24:08 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n \n \t* regclass.c (reg_scan_mark_refs): New arg min_regno.  Only update"}, {"sha": "ceb537e721ed9c784ae5f4388b5153685fdd0bf9", "filename": "gcc/expr.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f881570be51f9c67780802e7e8627a62c8a1de/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f881570be51f9c67780802e7e8627a62c8a1de/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b5f881570be51f9c67780802e7e8627a62c8a1de", "patch": "@@ -5836,23 +5836,30 @@ expand_expr (exp, target, tmode, modifier)\n \t    || (TREE_CODE (exp1) == SAVE_EXPR\n \t\t&& TREE_CODE (TREE_OPERAND (exp1, 0)) == PLUS_EXPR)\n \t    || AGGREGATE_TYPE_P (TREE_TYPE (exp))\n-\t    /* If the pointer is actually a REFERENCE_TYPE, this could\n-\t       be pointing into some aggregate too.  */\n-\t    || TREE_CODE (TREE_TYPE (exp1)) == REFERENCE_TYPE\n \t    || (TREE_CODE (exp1) == ADDR_EXPR\n \t\t&& (exp2 = TREE_OPERAND (exp1, 0))\n-\t\t&& AGGREGATE_TYPE_P (TREE_TYPE (exp2)))\n-\t    /* This may have been an array reference to the first element\n-\t       that was optimized away from being an addition.  */\n-\t    || (TREE_CODE (exp1) == NOP_EXPR\n-\t\t&& ((TREE_CODE (TREE_TYPE (TREE_OPERAND (exp1, 0)))\n-\t\t     == REFERENCE_TYPE)\n-\t\t    || ((TREE_CODE (TREE_TYPE (TREE_OPERAND (exp1, 0)))\n-\t\t\t == POINTER_TYPE)\n-\t\t\t&& (AGGREGATE_TYPE_P\n-\t\t\t    (TREE_TYPE (TREE_TYPE\n-\t\t\t\t\t(TREE_OPERAND (exp1, 0)))))))))\n+\t\t&& AGGREGATE_TYPE_P (TREE_TYPE (exp2))))\n \t  MEM_IN_STRUCT_P (temp) = 1;\n+\n+\t/* If the pointer is actually a REFERENCE_TYPE, this could be pointing\n+\t   into some aggregate too.  In theory we could fold this into the\n+\t   previous check and use rtx_addr_varies_p there too.\n+\n+\t   However, this seems safer.  */\n+\tif (!MEM_IN_STRUCT_P (temp)\n+\t    && (TREE_CODE (TREE_TYPE (exp1)) == REFERENCE_TYPE\n+\t        /* This may have been an array reference to the first element\n+\t\t   that was optimized away from being an addition.  */\n+\t        || (TREE_CODE (exp1) == NOP_EXPR\n+\t\t    && ((TREE_CODE (TREE_TYPE (TREE_OPERAND (exp1, 0)))\n+\t\t\t == REFERENCE_TYPE)\n+\t\t        || ((TREE_CODE (TREE_TYPE (TREE_OPERAND (exp1, 0)))\n+\t\t\t     == POINTER_TYPE)\n+\t\t\t    && (AGGREGATE_TYPE_P\n+\t\t\t        (TREE_TYPE (TREE_TYPE\n+\t\t\t\t\t    (TREE_OPERAND (exp1, 0))))))))))\n+\t  MEM_IN_STRUCT_P (temp) = ! rtx_addr_varies_p (temp);\n+\n \tMEM_VOLATILE_P (temp) = TREE_THIS_VOLATILE (exp) | flag_volatile;\n \tMEM_ALIAS_SET (temp) = get_alias_set (exp);\n "}]}