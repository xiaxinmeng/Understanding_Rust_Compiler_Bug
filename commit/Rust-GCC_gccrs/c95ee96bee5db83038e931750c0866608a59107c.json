{"sha": "c95ee96bee5db83038e931750c0866608a59107c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk1ZWU5NmJlZTVkYjgzMDM4ZTkzMTc1MGMwODY2NjA4YTU5MTA3Yw==", "commit": {"author": {"name": "Mark Eggleston", "email": "mark.eggleston@codethink.com", "date": "2019-10-17T10:39:49Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2019-10-17T10:39:49Z"}, "message": "Additional test cases for using automatic variables in equivalence statements.\n\nFrom-SVN: r277097", "tree": {"sha": "54b66fec4d8f3a916a56162cbbefac2ea6c952d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54b66fec4d8f3a916a56162cbbefac2ea6c952d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c95ee96bee5db83038e931750c0866608a59107c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95ee96bee5db83038e931750c0866608a59107c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95ee96bee5db83038e931750c0866608a59107c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95ee96bee5db83038e931750c0866608a59107c/comments", "author": {"login": "markeggleston", "id": 42180582, "node_id": "MDQ6VXNlcjQyMTgwNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/42180582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markeggleston", "html_url": "https://github.com/markeggleston", "followers_url": "https://api.github.com/users/markeggleston/followers", "following_url": "https://api.github.com/users/markeggleston/following{/other_user}", "gists_url": "https://api.github.com/users/markeggleston/gists{/gist_id}", "starred_url": "https://api.github.com/users/markeggleston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markeggleston/subscriptions", "organizations_url": "https://api.github.com/users/markeggleston/orgs", "repos_url": "https://api.github.com/users/markeggleston/repos", "events_url": "https://api.github.com/users/markeggleston/events{/privacy}", "received_events_url": "https://api.github.com/users/markeggleston/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fa848b52615cc1e937c07b20e640a7379bbdfa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa848b52615cc1e937c07b20e640a7379bbdfa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa848b52615cc1e937c07b20e640a7379bbdfa0"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "401149a16bd06a75c9f3a8d4f6beb4b5e4a5e03e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c95ee96bee5db83038e931750c0866608a59107c", "patch": "@@ -1,3 +1,11 @@\n+2019-10-17  Mark Eggleston <mark.eggleston@codethink.com>\n+\n+\t* gfortran.dg/auto_in_equiv_3.f90: New test.\n+\t* gfortran.dg/auto_in_equiv_4.f90: New test.\n+\t* gfortran.dg/auto_in_equiv_5.f90: New test.\n+\t* gfortran.dg/auto_in_equiv_6.f90: New test.\n+\t* gfortran.dg/auto_in_equiv_7.f90: New test.\n+\n 2019-10-17  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.target/avr/progmem-error-1.cpp: Fix location of the"}, {"sha": "35f6e0fa27d98c37c859101fb1342d22f6798fda", "filename": "gcc/testsuite/gfortran.dg/auto_in_equiv_3.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_3.f90?ref=c95ee96bee5db83038e931750c0866608a59107c", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec-static -fdump-tree-original\" }\n+!\n+\n+subroutine foo\n+  integer, automatic :: a\n+  integer :: b\n+  equivalence (a, b)\n+  a = 5\n+  if (b.ne.5) stop 1\n+end subroutine\n+\n+! { dg-final { scan-tree-dump \"union\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"static union\" \"original\" } }\n+! { dg-final { scan-tree-dump \"integer\\\\(kind=4\\\\) a\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"static integer\\\\(kind=4\\\\) a\" \"original\" } }\n+! { dg-final { scan-tree-dump \"integer\\\\(kind=4\\\\) b\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"static integer\\\\(kind=4\\\\) b\" \"original\" } }\n+"}, {"sha": "3188f19f2cf49598c94eebfcfff0a68a9fe6bbd2", "filename": "gcc/testsuite/gfortran.dg/auto_in_equiv_4.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_4.f90?ref=c95ee96bee5db83038e931750c0866608a59107c", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec-static -fno-automatic -fdump-tree-original\" }\n+!\n+! Neither of the local variable have the automatic attribute so they\n+! not be allocated on the stack.\n+\n+subroutine foo\n+  integer :: a\n+  integer :: b\n+  equivalence (a, b)\n+  a = 5\n+  if (b.ne.5) stop 1\n+end subroutine\n+\n+! { dg-final { scan-tree-dump \"static union\" \"original\" } }\n+! { dg-final { scan-tree-dump \"static integer\\\\(kind=4\\\\) a\" \"original\" } }\n+! { dg-final { scan-tree-dump \"static integer\\\\(kind=4\\\\) b\" \"original\" } }\n+"}, {"sha": "d1e08a6600eb7e54df3171302b67553e5d2d01f9", "filename": "gcc/testsuite/gfortran.dg/auto_in_equiv_5.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_5.f90?ref=c95ee96bee5db83038e931750c0866608a59107c", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Neither of the local variable have the automatic attribute so they\n+! not be allocated on the stack.\n+\n+subroutine foo\n+  integer, save :: a\n+  integer :: b\n+  equivalence (a, b)\n+  a = 5\n+  if (b.ne.5) stop 1\n+end subroutine\n+\n+! { dg-final { scan-tree-dump \"static union\" \"original\" } }\n+! { dg-final { scan-tree-dump \"static integer\\\\(kind=4\\\\) a\" \"original\" } }\n+! { dg-final { scan-tree-dump \"static integer\\\\(kind=4\\\\) b\" \"original\" } }\n+"}, {"sha": "f4135218d410a6d86f9307a25989c5b2f8ffe060", "filename": "gcc/testsuite/gfortran.dg/auto_in_equiv_6.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_6.f90?ref=c95ee96bee5db83038e931750c0866608a59107c", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec-static -fdump-tree-original\" }\n+!\n+! Neither of the local variable have the automatic attribute so they\n+! not be allocated on the stack.\n+\n+subroutine foo\n+  integer, static :: a\n+  integer :: b\n+  equivalence (a, b)\n+  a = 5\n+  if (b.ne.5) stop 1\n+end subroutine\n+\n+! { dg-final { scan-tree-dump \"static union\" \"original\" } }\n+! { dg-final { scan-tree-dump \"static integer\\\\(kind=4\\\\) a\" \"original\" } }\n+! { dg-final { scan-tree-dump \"static integer\\\\(kind=4\\\\) b\" \"original\" } }\n+"}, {"sha": "fd7e672138311aa118f5980485b366ce70fe7170", "filename": "gcc/testsuite/gfortran.dg/auto_in_equiv_7.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95ee96bee5db83038e931750c0866608a59107c/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_in_equiv_7.f90?ref=c95ee96bee5db83038e931750c0866608a59107c", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec-static -fdump-tree-original\" }\n+!\n+\n+subroutine foo\n+  integer :: a\n+  integer, automatic :: b\n+  equivalence (a, b)\n+  a = 5\n+  if (b.ne.5) stop 1\n+end subroutine\n+\n+! { dg-final { scan-tree-dump \"union\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"static union\" \"original\" } }\n+! { dg-final { scan-tree-dump \"integer\\\\(kind=4\\\\) a\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"static integer\\\\(kind=4\\\\) a\" \"original\" } }\n+! { dg-final { scan-tree-dump \"integer\\\\(kind=4\\\\) b\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"static integer\\\\(kind=4\\\\) b\" \"original\" } }\n+"}]}