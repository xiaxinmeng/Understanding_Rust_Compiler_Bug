{"sha": "c4320bde42c6497b701e2e6b8f1c5069bed19818", "node_id": "C_kwDOANBUbNoAKGM0MzIwYmRlNDJjNjQ5N2I3MDFlMmU2YjhmMWM1MDY5YmVkMTk4MTg", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-07T06:49:40Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-07T06:49:40Z"}, "message": "Recognize vpcmov in combine with -mxop on x86.\n\nBy way of an apology for causing PR target/105791, where I'd overlooked\nthe need to support V1TImode in TARGET_XOP's vpcmov instruction, this\npatch further improves support for TARGET_XOP's vpcmov instruction, by\nrecognizing it in combine.\n\nCurrently, the test case:\n\ntypedef int v4si __attribute__ ((vector_size (16)));\nv4si foo(v4si c, v4si t, v4si f)\n{\n    return (c&t)|(~c&f);\n}\n\non x86_64 with -O2 -mxop generates:\n        vpxor   %xmm2, %xmm1, %xmm1\n        vpand   %xmm0, %xmm1, %xmm1\n        vpxor   %xmm2, %xmm1, %xmm0\n        ret\n\nbut with this patch now generates:\n        vpcmov  %xmm0, %xmm2, %xmm1, %xmm0\n        ret\n\nOn its own, the new combine splitter works fine on TARGET_64BIT, but\nalas with -m32 combine incorrectly thinks the replacement instruction\nis more expensive, as IF_THEN_ELSE isn't currently/correctly handled\nin ix86_rtx_costs.  So to avoid the need for a target selector in the\nnew tescase, I've updated ix86_rtx_costs to report that AMD's vpcmov\nhas a latency of two cycles [it's now an obsolete instruction set\nextension and there's unlikely to ever be a processor where this\ninstruction has a different timing], and while there I also added\nrtx_costs for x86_64's integer conditional move instructions (which\nhave single cycle latency).\n\n2022-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.cc (ix86_rtx_costs): Add a new case for\n\tIF_THEN_ELSE, and provide costs for TARGET_XOP's vpcmov and\n\tTARGET_CMOVE's (scalar integer) conditional moves.\n\t* config/i386/sse.md (define_split): Recognize XOP's vpcmov\n\tfrom its equivalent (canonical) pxor;pand;pxor sequence.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/xop-pcmov3.c: New test case.", "tree": {"sha": "a32c7f647ec3f9ef4a79c2e97812b4c89e12007f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a32c7f647ec3f9ef4a79c2e97812b4c89e12007f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4320bde42c6497b701e2e6b8f1c5069bed19818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4320bde42c6497b701e2e6b8f1c5069bed19818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4320bde42c6497b701e2e6b8f1c5069bed19818", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4320bde42c6497b701e2e6b8f1c5069bed19818/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63eab5d5775da6c656f3527ad974b7dc25f5ad5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63eab5d5775da6c656f3527ad974b7dc25f5ad5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63eab5d5775da6c656f3527ad974b7dc25f5ad5e"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "0823161e07fdd3ac02f093e3b1d7f682ea2bba7d", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4320bde42c6497b701e2e6b8f1c5069bed19818/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4320bde42c6497b701e2e6b8f1c5069bed19818/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=c4320bde42c6497b701e2e6b8f1c5069bed19818", "patch": "@@ -21009,6 +21009,37 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \t}\n       return false;\n \n+    case IF_THEN_ELSE:\n+      if (TARGET_XOP\n+\t  && VECTOR_MODE_P (mode)\n+\t  && (GET_MODE_SIZE (mode) == 16 || GET_MODE_SIZE (mode) == 32))\n+\t{\n+\t  /* vpcmov.  */\n+\t  *total = speed ? COSTS_N_INSNS (2) : COSTS_N_BYTES (6);\n+\t  if (!REG_P (XEXP (x, 0)))\n+\t    *total += rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n+\t  if (!REG_P (XEXP (x, 1)))\n+\t    *total += rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n+\t  if (!REG_P (XEXP (x, 2)))\n+\t    *total += rtx_cost (XEXP (x, 2), mode, code, 2, speed);\n+\t  return true;\n+\t}\n+      else if (TARGET_CMOVE\n+\t       && SCALAR_INT_MODE_P (mode)\n+\t       && GET_MODE_SIZE (mode) <= UNITS_PER_WORD)\n+\t{\n+\t  /* cmov.  */\n+\t  *total = COSTS_N_INSNS (1);\n+\t  if (!REG_P (XEXP (x, 0)))\n+\t    *total += rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n+\t  if (!REG_P (XEXP (x, 1)))\n+\t    *total += rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n+\t  if (!REG_P (XEXP (x, 2)))\n+\t    *total += rtx_cost (XEXP (x, 2), mode, code, 2, speed);\n+\t  return true;\n+\t}\n+      return false;\n+\n     default:\n       return false;\n     }"}, {"sha": "3ca89b9c41e47f729b52a8609e2a0c821fb8e3fd", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4320bde42c6497b701e2e6b8f1c5069bed19818/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4320bde42c6497b701e2e6b8f1c5069bed19818/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c4320bde42c6497b701e2e6b8f1c5069bed19818", "patch": "@@ -23868,6 +23868,30 @@\n   \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")])\n \n+;; Recognize XOP's vpcmov from canonical (xor (and (xor t f) c) f)\n+(define_split\n+  [(set (match_operand:V_128_256 0 \"register_operand\")\n+\t(xor:V_128_256\n+\t  (and:V_128_256\n+\t    (xor:V_128_256 (match_operand:V_128_256 1 \"register_operand\")\n+\t\t\t   (match_operand:V_128_256 2 \"register_operand\"))\n+\t    (match_operand:V_128_256 3 \"nonimmediate_operand\"))\n+\t  (match_operand:V_128_256 4 \"register_operand\")))]\n+  \"TARGET_XOP\n+   && (REGNO (operands[4]) == REGNO (operands[1])\n+       || REGNO (operands[4]) == REGNO (operands[2]))\"\n+  [(set (match_dup 0) (if_then_else:V_128_256 (match_dup 3)\n+\t\t\t\t\t      (match_dup 5)\n+\t\t\t\t\t      (match_dup 4)))]\n+{\n+  /* To handle the commutivity of XOR, operands[4] is either operands[1]\n+     or operands[2], we need operands[5] to be the other one.  */\n+  if (REGNO (operands[4]) == REGNO (operands[1]))\n+    operands[5] = operands[2];\n+  else\n+    operands[5] = operands[1];\n+})\n+\n ;; XOP horizontal add/subtract instructions\n (define_insn \"xop_phadd<u>bw\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")"}, {"sha": "6c40f33a541ffdecf930f36869ab3d8d2744356c", "filename": "gcc/testsuite/gcc.target/i386/xop-pcmov3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4320bde42c6497b701e2e6b8f1c5069bed19818/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-pcmov3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4320bde42c6497b701e2e6b8f1c5069bed19818/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-pcmov3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-pcmov3.c?ref=c4320bde42c6497b701e2e6b8f1c5069bed19818", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mxop\" } */\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+v4si foo(v4si c, v4si t, v4si f)\n+{\n+    return (c&t)|(~c&f);\n+}\n+\n+/* { dg-final { scan-assembler \"vpcmov\" } } */"}]}