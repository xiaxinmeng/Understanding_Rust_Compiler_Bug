{"sha": "3cabb540d5ad6effe3d9eea9212b9d6b9ad0c5d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NhYmI1NDBkNWFkNmVmZmUzZDllZWE5MjEyYjlkNmI5YWQwYzVkMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-16T14:54:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-16T14:54:45Z"}, "message": "(cmov* define_expands): Use it.\n\nFrom-SVN: r11816", "tree": {"sha": "cf075c11e3c5048dbe1cbd497d1dbe580f8ff41b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf075c11e3c5048dbe1cbd497d1dbe580f8ff41b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cabb540d5ad6effe3d9eea9212b9d6b9ad0c5d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cabb540d5ad6effe3d9eea9212b9d6b9ad0c5d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cabb540d5ad6effe3d9eea9212b9d6b9ad0c5d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cabb540d5ad6effe3d9eea9212b9d6b9ad0c5d0/comments", "author": null, "committer": null, "parents": [{"sha": "92e40a7a0619fcf6d7a2e166296cc3458a8ee59c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e40a7a0619fcf6d7a2e166296cc3458a8ee59c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e40a7a0619fcf6d7a2e166296cc3458a8ee59c"}], "stats": {"total": 158, "additions": 16, "deletions": 142}, "files": [{"sha": "bb9ec0d36062e9be0615dfd02071c69ab9c669f8", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 16, "deletions": 142, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cabb540d5ad6effe3d9eea9212b9d6b9ad0c5d0/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cabb540d5ad6effe3d9eea9212b9d6b9ad0c5d0/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=3cabb540d5ad6effe3d9eea9212b9d6b9ad0c5d0", "patch": "@@ -2704,177 +2704,51 @@\n ;; These are the main define_expand's used to make conditional moves.\n \n (define_expand \"movsicc\"\n-  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(if_then_else:DI (match_dup 5)\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(if_then_else:DI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:SI 2 \"reg_or_8bit_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"\")))]\n   \"\"\n   \"\n {\n-  rtx op0,op1;\n-  enum rtx_code code = GET_CODE (operands[1]), code2 = NE;\n-\n-  if (alpha_compare_fp_p)\n+  if ((operands[1] = alpha_emit_conditional_move (operands[1], SImode)) == 0)\n     FAIL;\n-  switch (code)\n-    {\n-    case EQ: case LE: case LT:\n-      op0 = alpha_compare_op0;\n-      op1 = alpha_compare_op1;\n-      break;\n-    case NE:\n-      code = code2 = EQ;\n-      op0 = alpha_compare_op0;\n-      op1 = alpha_compare_op1;\n-      break;\n-    case GE:\n-      code = LE;\n-      op0 = force_reg (DImode, alpha_compare_op1);\n-      op1 = alpha_compare_op0;\n-      break;\n-    case GT:\n-      code = LT;\n-      op0 = force_reg (DImode, alpha_compare_op1);\n-      op1 = alpha_compare_op0;\n-      break;\n-    default:\n-      FAIL;\n-    }\n-  operands[1] = gen_rtx (code, DImode, op0, op1);\n-  operands[4] = gen_reg_rtx (DImode);\n-  operands[5] = gen_rtx (code2, VOIDmode, operands[4], CONST0_RTX (DImode));\n }\")\n \n (define_expand \"movdicc\"\n-  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(if_then_else:DI (match_dup 5)\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(if_then_else:DI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")\n \t\t\t (match_operand:DI 3 \"reg_or_8bit_operand\" \"\")))]\n   \"\"\n   \"\n {\n-  rtx op0,op1;\n-  enum rtx_code code = GET_CODE (operands[1]), code2 = NE;\n-\n-  if (alpha_compare_fp_p)\n+  if ((operands[1] = alpha_emit_conditional_move (operands[1], DImode)) == 0)\n     FAIL;\n-  switch (code)\n-    {\n-    case EQ: case LE: case LT:\n-      op0 = alpha_compare_op0;\n-      op1 = alpha_compare_op1;\n-      break;\n-    case NE:\n-      code = code2 = EQ;\n-      op0 = alpha_compare_op0;\n-      op1 = alpha_compare_op1;\n-      break;\n-    case GE:\n-      code = LE;\n-      op0 = force_reg (DImode, alpha_compare_op1);\n-      op1 = alpha_compare_op0;\n-      break;\n-    case GT:\n-      code = LT;\n-      op0 = force_reg (DImode, alpha_compare_op1);\n-      op1 = alpha_compare_op0;\n-      break;\n-    default:\n-      FAIL;\n-    }\n-  operands[1] = gen_rtx (code, DImode, op0, op1);\n-  operands[4] = gen_reg_rtx (DImode);\n-  operands[5] = gen_rtx (code2, VOIDmode, operands[4], CONST0_RTX (DImode));\n }\")\n \n (define_expand \"movsfcc\"\n-  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n-   (set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(if_then_else:SF (match_dup 5)\n-\t\t\t (match_operand:SF 2 \"reg_or_fp0_operand\" \"\")\n-\t\t\t (match_operand:SF 3 \"reg_or_fp0_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:SF 2 \"reg_or_8bit_operand\" \"\")\n+\t\t\t (match_operand:SF 3 \"reg_or_8bit_operand\" \"\")))]\n   \"\"\n   \"\n {\n-  rtx op0,op1;\n-  enum rtx_code code = GET_CODE (operands[1]), code2 = NE;\n-\n-  if (!alpha_compare_fp_p)\n+  if ((operands[1] = alpha_emit_conditional_move (operands[1], SFmode)) == 0)\n     FAIL;\n-  switch (code)\n-    {\n-    case EQ: case LE: case LT:\n-      op0 = alpha_compare_op0;\n-      op1 = alpha_compare_op1;\n-      break;\n-    case NE:\n-      /* There isn't a cmptne insn.  */\n-      code = code2 = EQ;\n-      op0 = alpha_compare_op0;\n-      op1 = alpha_compare_op1;\n-      break;\n-    case GE:\n-      code = LE;\n-      op0 = force_reg (DFmode, alpha_compare_op1);\n-      op1 = alpha_compare_op0;\n-      break;\n-    case GT:\n-      code = LT;\n-      op0 = force_reg (DFmode, alpha_compare_op1);\n-      op1 = alpha_compare_op0;\n-      break;\n-    default:\n-      FAIL;\n-    }\n-  operands[1] = gen_rtx (code, DFmode, op0, op1);\n-  operands[4] = gen_reg_rtx (DFmode);\n-  operands[5] = gen_rtx (code2, VOIDmode, operands[4], CONST0_RTX (DFmode));\n }\")\n \n (define_expand \"movdfcc\"\n-  [(set (match_dup 4) (match_operand 1 \"comparison_operator\" \"\"))\n-   (set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(if_then_else:DF (match_dup 5)\n-\t\t\t (match_operand:DF 2 \"reg_or_fp0_operand\" \"\")\n-\t\t\t (match_operand:DF 3 \"reg_or_fp0_operand\" \"\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:DF 2 \"reg_or_8bit_operand\" \"\")\n+\t\t\t (match_operand:DF 3 \"reg_or_8bit_operand\" \"\")))]\n   \"\"\n   \"\n {\n-  rtx op0,op1;\n-  enum rtx_code code = GET_CODE (operands[1]), code2 = NE;\n-\n-  if (!alpha_compare_fp_p)\n+  if ((operands[1] = alpha_emit_conditional_move (operands[1], DFmode)) == 0)\n     FAIL;\n-  switch (code)\n-    {\n-    case EQ: case LE: case LT:\n-      op0 = alpha_compare_op0;\n-      op1 = alpha_compare_op1;\n-      break;\n-    case NE:\n-      /* There isn't a cmptne insn.  */\n-      code = code2 = EQ;\n-      op0 = alpha_compare_op0;\n-      op1 = alpha_compare_op1;\n-      break;\n-    case GE:\n-      code = LE;\n-      op0 = force_reg (DFmode, alpha_compare_op1);\n-      op1 = alpha_compare_op0;\n-      break;\n-    case GT:\n-      code = LT;\n-      op0 = force_reg (DFmode, alpha_compare_op1);\n-      op1 = alpha_compare_op0;\n-      break;\n-    default:\n-      FAIL;\n-    }\n-  operands[1] = gen_rtx (code, DFmode, op0, op1);\n-  operands[4] = gen_reg_rtx (DFmode);\n-  operands[5] = gen_rtx (code2, VOIDmode, operands[4], CONST0_RTX (DFmode));\n }\")\n \f\n ;; These define_split definitions are used in cases when comparisons have"}]}