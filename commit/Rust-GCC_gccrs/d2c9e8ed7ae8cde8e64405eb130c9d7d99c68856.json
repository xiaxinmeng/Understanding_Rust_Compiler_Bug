{"sha": "d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJjOWU4ZWQ3YWU4Y2RlOGU2NDQwNWViMTMwYzlkN2Q5OWM2ODg1Ng==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2015-11-24T05:11:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-11-24T05:11:15Z"}, "message": "[PATCH] Fix invalid redundant extension elimination for rl78 port\n\n\t* ree.c (add_removable_extension): Avoid mis-optimizing cases where\n\tthe source/dest of the target extension require a different number of\n\thard registers.\n\t(combine_set_extension): Remove #if 0 code.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r230785", "tree": {"sha": "958a7726dbd4cf9f21958bf40ac585273d135e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/958a7726dbd4cf9f21958bf40ac585273d135e56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "267c9702f6223ed5b9694b8ba746ca7b344ec1ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267c9702f6223ed5b9694b8ba746ca7b344ec1ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267c9702f6223ed5b9694b8ba746ca7b344ec1ac"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "e770638354df281dd734adaf0793c610c431fec7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856", "patch": "@@ -1,3 +1,11 @@\n+2015-11-23  Nick Clifton  <nickc@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\t* ree.c (add_removable_extension): Avoid mis-optimizing cases where\n+\tthe source/dest of the target extension require a different number of\n+\thard registers.\n+\t(combine_set_extension): Remove #if 0 code.\n+\n 2015-11-23  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "f3b79e0886d8c3624c7bac50c52ef04e4b31ce7f", "filename": "gcc/ree.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=d2c9e8ed7ae8cde8e64405eb130c9d7d99c68856", "patch": "@@ -332,16 +332,6 @@ combine_set_extension (ext_cand *cand, rtx_insn *curr_insn, rtx *orig_set)\n   else\n     new_reg = gen_rtx_REG (cand->mode, REGNO (SET_DEST (*orig_set)));\n \n-#if 0\n-  /* Rethinking test.  Temporarily disabled.  */\n-  /* We're going to be widening the result of DEF_INSN, ensure that doing so\n-     doesn't change the number of hard registers needed for the result.  */\n-  if (HARD_REGNO_NREGS (REGNO (new_reg), cand->mode)\n-      != HARD_REGNO_NREGS (REGNO (SET_DEST (*orig_set)),\n-\t\t\t   GET_MODE (SET_DEST (*orig_set))))\n-\treturn false;\n-#endif\n-\n   /* Merge constants by directly moving the constant into the register under\n      some conditions.  Recall that RTL constants are sign-extended.  */\n   if (GET_CODE (orig_src) == CONST_INT\n@@ -1080,6 +1070,18 @@ add_removable_extension (const_rtx expr, rtx_insn *insn,\n \t      }\n \t  }\n \n+      /* Fourth, if the extended version occupies more registers than the\n+\t original and the source of the extension is the same hard register\n+\t as the destination of the extension, then we can not eliminate\n+\t the extension without deep analysis, so just punt.\n+\n+\t We allow this when the registers are different because the\n+\t code in combine_reaching_defs will handle that case correctly.  */\n+      if ((HARD_REGNO_NREGS (REGNO (dest), mode)\n+\t   != HARD_REGNO_NREGS (REGNO (reg), GET_MODE (reg)))\n+\t  && REGNO (dest) == REGNO (reg))\n+\treturn;\n+\n       /* Then add the candidate to the list and insert the reaching definitions\n          into the definition map.  */\n       ext_cand e = {expr, code, mode, insn};"}]}