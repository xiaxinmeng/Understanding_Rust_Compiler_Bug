{"sha": "a21e735ed5c9c2e214cf99913553520da2779266", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxZTczNWVkNWM5YzJlMjE0Y2Y5OTkxMzU1MzUyMGRhMjc3OTI2Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-26T15:29:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-26T15:29:28Z"}, "message": "cgraph.c (cgraph_redirect_edge_call_stmt_to_callee): Fix formatting...\n\n\t* cgraph.c (cgraph_redirect_edge_call_stmt_to_callee): Fix formatting;\n\tfix edge count/frequency when speculation failed; fix type check\n\tfor the direct call.\n\nFrom-SVN: r201999", "tree": {"sha": "b715a6d6e9d644c145a15f193fe83820d141aa5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b715a6d6e9d644c145a15f193fe83820d141aa5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a21e735ed5c9c2e214cf99913553520da2779266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21e735ed5c9c2e214cf99913553520da2779266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a21e735ed5c9c2e214cf99913553520da2779266", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21e735ed5c9c2e214cf99913553520da2779266/comments", "author": null, "committer": null, "parents": [{"sha": "e067bd4339523b81f8157fba023d1c7d489ce153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e067bd4339523b81f8157fba023d1c7d489ce153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e067bd4339523b81f8157fba023d1c7d489ce153"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "12ff04866aaf807cebd7f65e4ca510d91eb4551d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21e735ed5c9c2e214cf99913553520da2779266/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21e735ed5c9c2e214cf99913553520da2779266/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a21e735ed5c9c2e214cf99913553520da2779266", "patch": "@@ -1,3 +1,9 @@\n+2013-08-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_redirect_edge_call_stmt_to_callee): Fix formatting;\n+\tfix edge count/frequency when speculation failed; fix type check\n+\tfor the direct call.\n+\n 2013-08-26  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-prop.c (ipa_print_node_params): Do not ICE during WPA."}, {"sha": "efd30abb4a0131f3037209287e1b0aef7f8d6afc", "filename": "gcc/cgraph.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21e735ed5c9c2e214cf99913553520da2779266/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21e735ed5c9c2e214cf99913553520da2779266/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a21e735ed5c9c2e214cf99913553520da2779266", "patch": "@@ -1306,29 +1306,44 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n       struct ipa_ref *ref;\n \n       cgraph_speculative_call_info (e, e, e2, ref);\n-      /* If there already is an direct call (i.e. as a result of inliner's substitution),\n- \t forget about speculating.  */\n+      /* If there already is an direct call (i.e. as a result of inliner's\n+\t substitution), forget about speculating.  */\n       if (decl)\n \te = cgraph_resolve_speculation (e, decl);\n-      /* If types do not match, speculation was likely wrong.  */\n-      else if (!gimple_check_call_matching_types (e->call_stmt, e->callee->symbol.decl,\n+      /* If types do not match, speculation was likely wrong. \n+         The direct edge was posisbly redirected to the clone with a different\n+\t signature.  We did not update the call statement yet, so compare it \n+\t with the reference that still points to the proper type.  */\n+      else if (!gimple_check_call_matching_types (e->call_stmt,\n+\t\t\t\t\t\t  ref->referred->symbol.decl,\n \t\t\t\t\t\t  true))\n \t{\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Not expanding speculative call of %s/%i -> %s/%i\\n\"\n \t\t     \"Type mismatch.\\n\",\n-\t\t     xstrdup (cgraph_node_name (e->caller)), e->caller->symbol.order,\n-\t\t     xstrdup (cgraph_node_name (e->callee)), e->callee->symbol.order);\n+\t\t     xstrdup (cgraph_node_name (e->caller)),\n+\t\t     e->caller->symbol.order,\n+\t\t     xstrdup (cgraph_node_name (e->callee)),\n+\t\t     e->callee->symbol.order);\n \t  e = cgraph_resolve_speculation (e, NULL);\n+\t  /* We are producing the final function body and will throw away the\n+\t     callgraph edges really soon.  Reset the counts/frequencies to\n+\t     keep verifier happy in the case of roundoff errors.  */\n+\t  e->count = gimple_bb (e->call_stmt)->count;\n+\t  e->frequency = compute_call_stmt_bb_frequency\n+\t\t\t  (e->caller->symbol.decl, gimple_bb (e->call_stmt));\n \t}\n       /* Expand speculation into GIMPLE code.  */\n       else\n \t{\n \t  if (dump_file)\n-\t    fprintf (dump_file, \"Expanding speculative call of %s/%i -> %s/%i count:\"\n+\t    fprintf (dump_file,\n+\t\t     \"Expanding speculative call of %s/%i -> %s/%i count:\"\n \t\t     HOST_WIDEST_INT_PRINT_DEC\"\\n\",\n-\t\t     xstrdup (cgraph_node_name (e->caller)), e->caller->symbol.order,\n-\t\t     xstrdup (cgraph_node_name (e->callee)), e->callee->symbol.order,\n+\t\t     xstrdup (cgraph_node_name (e->caller)),\n+\t\t     e->caller->symbol.order,\n+\t\t     xstrdup (cgraph_node_name (e->callee)),\n+\t\t     e->callee->symbol.order,\n \t\t     (HOST_WIDEST_INT)e->count);\n \t  gcc_assert (e2->speculative);\n \t  push_cfun (DECL_STRUCT_FUNCTION (e->caller->symbol.decl));\n@@ -1342,11 +1357,12 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n \t\t\t\t: REG_BR_PROB_BASE / 2,\n \t\t\t\te->count, e->count + e2->count);\n \t  e->speculative = false;\n-\t  cgraph_set_call_stmt_including_clones (e->caller, e->call_stmt, new_stmt, false);\n-\t  e->frequency = compute_call_stmt_bb_frequency (e->caller->symbol.decl,\n-\t\t\t\t\t\t\t gimple_bb (e->call_stmt));\n-\t  e2->frequency = compute_call_stmt_bb_frequency (e2->caller->symbol.decl,\n-\t\t\t\t\t\t\t  gimple_bb (e2->call_stmt));\n+\t  cgraph_set_call_stmt_including_clones (e->caller, e->call_stmt,\n+\t\t\t\t\t\t new_stmt, false);\n+\t  e->frequency = compute_call_stmt_bb_frequency\n+\t\t\t   (e->caller->symbol.decl, gimple_bb (e->call_stmt));\n+\t  e2->frequency = compute_call_stmt_bb_frequency\n+\t\t\t   (e2->caller->symbol.decl, gimple_bb (e2->call_stmt));\n \t  e2->speculative = false;\n \t  ref->speculative = false;\n \t  ref->stmt = NULL;"}]}