{"sha": "f8cada540d85ac9d53b10f2e9265cb51f6f72514", "node_id": "C_kwDOANBUbNoAKGY4Y2FkYTU0MGQ4NWFjOWQ1M2IxMGYyZTkyNjVjYjUxZjZmNzI1MTQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-15T16:46:38Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-15T16:46:38Z"}, "message": "Support shifts and rotates by integer constants in TImode STV on x86_64.\n\nThis patch adds support for converting 128-bit TImode shifts and rotates\nto SSE equivalents using V1TImode during the TImode STV pass.\nPreviously, only logical shifts by multiples of 8 were handled\n(from my patch earlier this month).\n\nAs an example of the benefits, the following rotate by 32-bits:\n\nunsigned __int128 a, b;\nvoid rot32() { a = (b >> 32) | (b << 96); }\n\nwhen compiled on x86_64 with -O2 previously generated:\n\n        movq    b(%rip), %rax\n        movq    b+8(%rip), %rdx\n        movq    %rax, %rcx\n        shrdq   $32, %rdx, %rax\n        shrdq   $32, %rcx, %rdx\n        movq    %rax, a(%rip)\n        movq    %rdx, a+8(%rip)\n        ret\n\nwith this patch, now generates:\n\n        movdqa  b(%rip), %xmm0\n        pshufd  $57, %xmm0, %xmm0\n        movaps  %xmm0, a(%rip)\n        ret\n\n[which uses a V4SI permutation for those that don't read SSE].\nThis should help 128-bit cryptography codes, that interleave XORs\nwith rotations (but that don't use additions or subtractions).\n\n2022-08-15  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-features.cc\n\t(timode_scalar_chain::compute_convert_gain): Provide costs for\n\tshifts and rotates.\n\t(timode_scalar_chain::convert_insn): Handle ASHIFTRT, ROTATERT\n\tand ROTATE just like existing ASHIFT and LSHIFTRT cases.\n\t(timode_scalar_to_vector_candidate_p): Handle all shifts and\n\trotates by integer constants between 0 and 127.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/sse4_1-stv-9.c: New test case.", "tree": {"sha": "30cf846ce5784a49f6388860967ce5d92b61fd46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30cf846ce5784a49f6388860967ce5d92b61fd46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8cada540d85ac9d53b10f2e9265cb51f6f72514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8cada540d85ac9d53b10f2e9265cb51f6f72514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8cada540d85ac9d53b10f2e9265cb51f6f72514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8cada540d85ac9d53b10f2e9265cb51f6f72514/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f94923dea21bd92ba2fc40c4a3be509bb1b7f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f94923dea21bd92ba2fc40c4a3be509bb1b7f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f94923dea21bd92ba2fc40c4a3be509bb1b7f0c"}], "stats": {"total": 162, "additions": 156, "deletions": 6}, "files": [{"sha": "821d8c76839556e73db2a9573be62c2f618631ab", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 144, "deletions": 6, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8cada540d85ac9d53b10f2e9265cb51f6f72514/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8cada540d85ac9d53b10f2e9265cb51f6f72514/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=f8cada540d85ac9d53b10f2e9265cb51f6f72514", "patch": "@@ -1209,6 +1209,8 @@ timode_scalar_chain::compute_convert_gain ()\n       rtx def_set = single_set (insn);\n       rtx src = SET_SRC (def_set);\n       rtx dst = SET_DEST (def_set);\n+      HOST_WIDE_INT op1val;\n+      int scost, vcost;\n       int igain = 0;\n \n       switch (GET_CODE (src))\n@@ -1245,9 +1247,140 @@ timode_scalar_chain::compute_convert_gain ()\n \n \tcase ASHIFT:\n \tcase LSHIFTRT:\n-\t  /* For logical shifts by constant multiples of 8. */\n-\t  igain = optimize_insn_for_size_p () ? COSTS_N_BYTES (4)\n-\t\t\t\t\t      : COSTS_N_INSNS (1);\n+\t  /* See ix86_expand_v1ti_shift.  */\n+\t  op1val = XINT (src, 1);\n+\t  if (optimize_insn_for_size_p ())\n+\t    {\n+\t      if (op1val == 64 || op1val == 65)\n+\t\tscost = COSTS_N_BYTES (5);\n+\t      else if (op1val >= 66)\n+\t\tscost = COSTS_N_BYTES (6);\n+\t      else if (op1val == 1)\n+\t\tscost = COSTS_N_BYTES (8);\n+\t      else\n+\t\tscost = COSTS_N_BYTES (9);\n+\n+\t      if ((op1val & 7) == 0)\n+\t\tvcost = COSTS_N_BYTES (5);\n+\t      else if (op1val > 64)\n+\t\tvcost = COSTS_N_BYTES (10);\n+\t      else\n+\t\tvcost = TARGET_AVX ? COSTS_N_BYTES (19) : COSTS_N_BYTES (23);\n+\t    }\n+\t  else\n+\t    {\n+\t      scost = COSTS_N_INSNS (2);\n+\t      if ((op1val & 7) == 0)\n+\t\tvcost = COSTS_N_INSNS (1);\n+\t      else if (op1val > 64)\n+\t\tvcost = COSTS_N_INSNS (2);\n+\t      else\n+\t\tvcost = TARGET_AVX ? COSTS_N_INSNS (4) : COSTS_N_INSNS (5);\n+\t    }\n+\t  igain = scost - vcost;\n+\t  break;\n+\n+\tcase ASHIFTRT:\n+\t  /* See ix86_expand_v1ti_ashiftrt.  */\n+\t  op1val = XINT (src, 1);\n+\t  if (optimize_insn_for_size_p ())\n+\t    {\n+\t      if (op1val == 64 || op1val == 127)\n+\t\tscost = COSTS_N_BYTES (7);\n+\t      else if (op1val == 1)\n+\t\tscost = COSTS_N_BYTES (8);\n+\t      else if (op1val == 65)\n+\t\tscost = COSTS_N_BYTES (10);\n+\t      else if (op1val >= 66)\n+\t\tscost = COSTS_N_BYTES (11);\n+\t      else\n+\t\tscost = COSTS_N_BYTES (9);\n+\n+\t      if (op1val == 127)\n+\t\tvcost = COSTS_N_BYTES (10);\n+\t      else if (op1val == 64)\n+\t\tvcost = COSTS_N_BYTES (14);\n+\t      else if (op1val == 96)\n+\t\tvcost = COSTS_N_BYTES (18);\n+\t      else if (op1val >= 111)\n+\t\tvcost = COSTS_N_BYTES (15);\n+\t      else if (TARGET_AVX2 && op1val == 32)\n+\t\tvcost = COSTS_N_BYTES (16);\n+\t      else if (TARGET_SSE4_1 && op1val == 32)\n+\t\tvcost = COSTS_N_BYTES (20);\n+\t      else if (op1val >= 96)\n+\t\tvcost = COSTS_N_BYTES (23);\n+\t      else if ((op1val & 7) == 0)\n+\t\tvcost = COSTS_N_BYTES (28);\n+\t      else if (TARGET_AVX2 && op1val < 32)\n+\t\tvcost = COSTS_N_BYTES (30);\n+\t      else if (op1val == 1 || op1val >= 64)\n+\t\tvcost = COSTS_N_BYTES (42);\n+\t      else\n+\t\tvcost = COSTS_N_BYTES (47);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (op1val >= 65 && op1val <= 126)\n+\t\tscost = COSTS_N_INSNS (3);\n+\t      else\n+\t\tscost = COSTS_N_INSNS (2);\n+\n+\t      if (op1val == 127)\n+\t\tvcost = COSTS_N_INSNS (2);\n+\t      else if (op1val == 64)\n+\t\tvcost = COSTS_N_INSNS (3);\n+\t      else if (op1val == 96)\n+\t\tvcost = COSTS_N_INSNS (4);\n+\t      else if (op1val >= 111)\n+\t\tvcost = COSTS_N_INSNS (3);\n+\t      else if (TARGET_AVX2 && op1val == 32)\n+\t\tvcost = COSTS_N_INSNS (3);\n+\t      else if (TARGET_SSE4_1 && op1val == 32)\n+\t\tvcost = COSTS_N_INSNS (4);\n+\t      else if (op1val >= 96)\n+\t\tvcost = COSTS_N_INSNS (5);\n+\t      else if ((op1val & 7) == 0)\n+\t\tvcost = COSTS_N_INSNS (6);\n+\t      else if (TARGET_AVX2 && op1val < 32)\n+\t\tvcost = COSTS_N_INSNS (6);\n+\t      else if (op1val == 1 || op1val >= 64)\n+\t\tvcost = COSTS_N_INSNS (9);\n+\t      else\n+\t\tvcost = COSTS_N_INSNS (10);\n+\t    }\n+\t  igain = scost - vcost;\n+\t  break;\n+\n+\tcase ROTATE:\n+\tcase ROTATERT:\n+\t  /* See ix86_expand_v1ti_rotate.  */\n+\t  op1val = XINT (src, 1);\n+\t  if (optimize_insn_for_size_p ())\n+\t    {\n+\t      scost = COSTS_N_BYTES (13);\n+\t      if ((op1val & 31) == 0)\n+\t\tvcost = COSTS_N_BYTES (5);\n+\t      else if ((op1val & 7) == 0)\n+\t\tvcost = TARGET_AVX ? COSTS_N_BYTES (13) : COSTS_N_BYTES (18);\n+\t      else if (op1val > 32 && op1val < 96)\n+\t\tvcost = COSTS_N_BYTES (24);\n+\t      else\n+\t\tvcost = COSTS_N_BYTES (19);\n+\t    }\n+\t  else\n+\t    {\n+\t      scost = COSTS_N_INSNS (3);\n+\t      if ((op1val & 31) == 0)\n+\t\tvcost = COSTS_N_INSNS (1);\n+\t      else if ((op1val & 7) == 0)\n+\t\tvcost = TARGET_AVX ? COSTS_N_INSNS (3) : COSTS_N_INSNS (4);\n+\t      else if (op1val > 32 && op1val < 96)\n+\t\tvcost = COSTS_N_INSNS (5);\n+\t      else\n+\t\tvcost = COSTS_N_INSNS (1);\n+\t    }\n+\t  igain = scost - vcost;\n \t  break;\n \n \tcase COMPARE:\n@@ -1520,6 +1653,9 @@ timode_scalar_chain::convert_insn (rtx_insn *insn)\n \n     case ASHIFT:\n     case LSHIFTRT:\n+    case ASHIFTRT:\n+    case ROTATERT:\n+    case ROTATE:\n       convert_op (&XEXP (src, 0), insn);\n       PUT_MODE (src, V1TImode);\n       break;\n@@ -1878,11 +2014,13 @@ timode_scalar_to_vector_candidate_p (rtx_insn *insn)\n \n     case ASHIFT:\n     case LSHIFTRT:\n-      /* Handle logical shifts by integer constants between 0 and 120\n-\t that are multiples of 8.  */\n+    case ASHIFTRT:\n+    case ROTATERT:\n+    case ROTATE:\n+      /* Handle shifts/rotates by integer constants between 0 and 127.  */\n       return REG_P (XEXP (src, 0))\n \t     && CONST_INT_P (XEXP (src, 1))\n-\t     && (INTVAL (XEXP (src, 1)) & ~0x78) == 0;\n+\t     && (INTVAL (XEXP (src, 1)) & ~0x7f) == 0;\n \n     default:\n       return false;"}, {"sha": "ee5af3c1813f9b6af804f4cade5abb970794cb20", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-stv-9.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8cada540d85ac9d53b10f2e9265cb51f6f72514/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-stv-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8cada540d85ac9d53b10f2e9265cb51f6f72514/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-stv-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-stv-9.c?ref=f8cada540d85ac9d53b10f2e9265cb51f6f72514", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse4.1 -mstv -mno-stackrealign\" } */\n+\n+unsigned __int128 a, b;\n+void rot1()  { a = (b >> 1) | (b << 127); }\n+void rot4()  { a = (b >> 4) | (b << 124); }\n+void rot8()  { a = (b >> 8) | (b << 120); }\n+void rot32() { a = (b >> 32) | (b << 96); }\n+void rot64() { a = (b >> 64) | (b << 64); }\n+\n+/* { dg-final { scan-assembler-not \"shrdq\" } } */\n+/* { dg-final { scan-assembler \"pshufd\" } } */"}]}