{"sha": "4099e2c2bb7e81926d3ee91a856834ee7672c694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA5OWUyYzJiYjdlODE5MjZkM2VlOTFhODU2ODM0ZWU3NjcyYzY5NA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2008-08-12T13:25:22Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-08-12T13:25:22Z"}, "message": "real.h (struct real_format): New member has_sign_dependent_rounding.\n\n\t* real.h (struct real_format): New member has_sign_dependent_rounding.\n\t* real.c (ieee_single_format, mips_single_format, motorola_single_format,\n\tspu_single_format, ieee_double_format, mips_double_format,\n\tmotorola_double_format, ieee_extended_motorola_format,\n\tieee_extended_intel_96_format, ieee_extended_intel_128_format,\n\tieee_extended_intel_96_round_53_format, ibm_extended_format,\n\tmips_extended_format, ieee_quad_format, mips_quad_format,\n\tvax_f_format, vax_d_format, vax_g_format): Initialize it.\n\t* config/pdp11/pdp11.c (pdp11_f_format, pdp11_d_format): Likewise.\n\n\t* defaults.h (MODE_HAS_NANS, MODE_HAS_INFINITIES,\n\tMODE_HAS_SIGNED_ZEROS, MODE_HAS_SIGN_DEPENDENT_ROUNDING): Remove.\n\t* config/spu/spu.h (MODE_HAS_NANS, MODE_HAS_INFINITIES,\n\tMODE_HAS_SIGN_DEPENDENT_ROUNDING): Remove.\n\t(ROUND_TOWARDS_ZERO): Likewise.\n\n\t* real.h (REAL_MODE_FORMAT): Protect MODE against macro expansion.\n\t(FLOAT_MODE_FORMAT): New macro.\n\t(REAL_MODE_FORMAT_COMPOSITE_P): Remove, replace by ...\n\t(MODE_COMPOSITE_P): ... this new macro.\n\t(MODE_HAS_NANS, MODE_HAS_INFINITIES, MODE_HAS_SIGNED_ZEROS,\n\tMODE_HAS_SIGN_DEPENDENT_ROUNDING): New macros.\n\t* machmode.h (GET_MODE_INNER): Cast result to enum machine_mode.\n\n\t* flags.h: Include \"real.h\".\n\n\t* fold-const.c (const_binop): Use MODE_COMPOSITE_P instead of\n\tREAL_MODE_FORMAT_COMPOSITE_P.\n\t* simplify-rtx.c (simplify_const_binary_operation): Likewise.\n\n\t* doc/tm.texi (Storage Layout): Remove documentation of\n\tMODE_HAS_NANS, MODE_HAS_INFINITIES, MODE_HAS_SIGNED_ZEROS,\n\tMODE_HAS_SIGN_DEPENDENT_ROUNDING.  Update documentation of\n\tROUND_TOWARDS_ZERO and LARGEST_EXPONENT_IS_NORMAL to clarify\n\tthey only apply to libgcc2.a.\n\nFrom-SVN: r139016", "tree": {"sha": "1a92af168da8700726521cc728ffef015dec9823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a92af168da8700726521cc728ffef015dec9823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4099e2c2bb7e81926d3ee91a856834ee7672c694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4099e2c2bb7e81926d3ee91a856834ee7672c694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4099e2c2bb7e81926d3ee91a856834ee7672c694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4099e2c2bb7e81926d3ee91a856834ee7672c694/comments", "author": null, "committer": null, "parents": [{"sha": "e0bddf109cc33590570b30eceea42bb6fcdea8ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bddf109cc33590570b30eceea42bb6fcdea8ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bddf109cc33590570b30eceea42bb6fcdea8ec"}], "stats": {"total": 227, "additions": 92, "deletions": 135}, "files": [{"sha": "ceab6a46a4b5150bf501a7ca3fa728f7b8668a74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -1,3 +1,41 @@\n+2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* real.h (struct real_format): New member has_sign_dependent_rounding.\n+\t* real.c (ieee_single_format, mips_single_format, motorola_single_format,\n+\tspu_single_format, ieee_double_format, mips_double_format,\n+\tmotorola_double_format, ieee_extended_motorola_format,\n+\tieee_extended_intel_96_format, ieee_extended_intel_128_format,\n+\tieee_extended_intel_96_round_53_format, ibm_extended_format,\n+\tmips_extended_format, ieee_quad_format, mips_quad_format,\n+\tvax_f_format, vax_d_format, vax_g_format): Initialize it.\n+\t* config/pdp11/pdp11.c (pdp11_f_format, pdp11_d_format): Likewise.\n+\n+\t* defaults.h (MODE_HAS_NANS, MODE_HAS_INFINITIES,\n+\tMODE_HAS_SIGNED_ZEROS, MODE_HAS_SIGN_DEPENDENT_ROUNDING): Remove.\n+\t* config/spu/spu.h (MODE_HAS_NANS, MODE_HAS_INFINITIES,\n+\tMODE_HAS_SIGN_DEPENDENT_ROUNDING): Remove.\n+\t(ROUND_TOWARDS_ZERO): Likewise.\n+\n+\t* real.h (REAL_MODE_FORMAT): Protect MODE against macro expansion.\n+\t(FLOAT_MODE_FORMAT): New macro.\n+\t(REAL_MODE_FORMAT_COMPOSITE_P): Remove, replace by ...\n+\t(MODE_COMPOSITE_P): ... this new macro.\n+\t(MODE_HAS_NANS, MODE_HAS_INFINITIES, MODE_HAS_SIGNED_ZEROS,\n+\tMODE_HAS_SIGN_DEPENDENT_ROUNDING): New macros.\n+\t* machmode.h (GET_MODE_INNER): Cast result to enum machine_mode.\n+\n+\t* flags.h: Include \"real.h\".\n+\n+\t* fold-const.c (const_binop): Use MODE_COMPOSITE_P instead of\n+\tREAL_MODE_FORMAT_COMPOSITE_P.\n+\t* simplify-rtx.c (simplify_const_binary_operation): Likewise.\n+\n+\t* doc/tm.texi (Storage Layout): Remove documentation of\n+\tMODE_HAS_NANS, MODE_HAS_INFINITIES, MODE_HAS_SIGNED_ZEROS,\n+\tMODE_HAS_SIGN_DEPENDENT_ROUNDING.  Update documentation of\n+\tROUND_TOWARDS_ZERO and LARGEST_EXPONENT_IS_NORMAL to clarify\n+\tthey only apply to libgcc2.a.\n+\n 2008-08-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/float_disf.c: New file."}, {"sha": "661980fd13e4313b14771f49859d126de9a492fc", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -79,6 +79,7 @@ const struct real_format pdp11_f_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -99,6 +100,7 @@ const struct real_format pdp11_d_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n "}, {"sha": "0bd69d365cddf2994ea711233753487d2434ad68", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -124,34 +124,6 @@ extern GTY(()) int spu_tune;\n \n #define STACK_SIZE_MODE SImode\n \n-/* #define TARGET_FLOAT_FORMAT     \tSPU_FLOAT_FORMAT */\n-\n-#ifndef MODE_HAS_NANS\n-#define MODE_HAS_NANS(MODE)                                     \\\n-  (FLOAT_MODE_P (MODE) \t\t\t\t\t\t\\\n-   && MODE != SFmode\t\t\t\t\t\t\\\n-   && !LARGEST_EXPONENT_IS_NORMAL (GET_MODE_BITSIZE (MODE)))\n-#endif\n-                                                                              \n-#ifndef MODE_HAS_INFINITIES\n-#define MODE_HAS_INFINITIES(MODE)                               \\\n-  (FLOAT_MODE_P (MODE) \t\t\t\t\t\t\\\n-   && MODE != SFmode                                            \\\n-   && !LARGEST_EXPONENT_IS_NORMAL (GET_MODE_BITSIZE (MODE)))\n-#endif\n-                                                                              \n-#ifndef MODE_HAS_SIGN_DEPENDENT_ROUNDING\n-#define MODE_HAS_SIGN_DEPENDENT_ROUNDING(MODE)                  \\\n-  (FLOAT_MODE_P (MODE)                                          \\\n-    && MODE != SFmode                                           \\\n-   && !ROUND_TOWARDS_ZERO)\n-#endif\n-\n-#define ROUND_TOWARDS_ZERO 1\n-\n-/* This is certainly true.  Should it be defined?  (It wasn't before.) */\n-/* #define LARGEST_EXPONENT_IS_NORMAL(size) (size != 32) */\n-\n \f\n /* Type Layout */\n "}, {"sha": "d6145a4b76716e2c2d3061e35f709ec0f70410e6", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -681,32 +681,6 @@ along with GCC; see the file COPYING3.  If not see\n #define ROUND_TOWARDS_ZERO 0\n #endif\n \n-#ifndef MODE_HAS_NANS\n-#define MODE_HAS_NANS(MODE)\t\t\t\t\t\\\n-  (FLOAT_MODE_P (MODE)\t\t\t\t\t\t\\\n-   && TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\t\t\t\\\n-   && !LARGEST_EXPONENT_IS_NORMAL (GET_MODE_BITSIZE (MODE)))\n-#endif\n-\n-#ifndef MODE_HAS_INFINITIES\n-#define MODE_HAS_INFINITIES(MODE)\t\t\t\t\\\n-  (FLOAT_MODE_P (MODE)\t\t\t\t\t\t\\\n-   && TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\t\t\t\\\n-   && !LARGEST_EXPONENT_IS_NORMAL (GET_MODE_BITSIZE (MODE)))\n-#endif\n-\n-#ifndef MODE_HAS_SIGNED_ZEROS\n-#define MODE_HAS_SIGNED_ZEROS(MODE) \\\n-  (FLOAT_MODE_P (MODE) && TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n-#endif\n-\n-#ifndef MODE_HAS_SIGN_DEPENDENT_ROUNDING\n-#define MODE_HAS_SIGN_DEPENDENT_ROUNDING(MODE)\t\t\t\\\n-  (FLOAT_MODE_P (MODE)\t\t\t\t\t\t\\\n-   && TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\t\t\t\\\n-   && !ROUND_TOWARDS_ZERO)\n-#endif\n-\n #ifndef FLOAT_LIB_COMPARE_RETURNS_BOOL\n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) false\n #endif"}, {"sha": "facf6f48688f502a24abd978ff033c96e8515ac5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 72, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -1407,78 +1407,12 @@ The ordering of the component words of floating point values stored in\n memory is controlled by @code{FLOAT_WORDS_BIG_ENDIAN}.\n @end defmac\n \n-@defmac MODE_HAS_NANS (@var{mode})\n-When defined, this macro should be true if @var{mode} has a NaN\n-representation.  The compiler assumes that NaNs are not equal to\n-anything (including themselves) and that addition, subtraction,\n-multiplication and division all return NaNs when one operand is\n-NaN@.\n-\n-By default, this macro is true if @var{mode} is a floating-point\n-mode and the target floating-point format is IEEE@.\n-@end defmac\n-\n-@defmac MODE_HAS_INFINITIES (@var{mode})\n-This macro should be true if @var{mode} can represent infinity.  At\n-present, the compiler uses this macro to decide whether @samp{x - x}\n-is always defined.  By default, the macro is true when @var{mode}\n-is a floating-point mode and the target format is IEEE@.\n-@end defmac\n-\n-@defmac MODE_HAS_SIGNED_ZEROS (@var{mode})\n-True if @var{mode} distinguishes between positive and negative zero.\n-The rules are expected to follow the IEEE standard:\n-\n-@itemize @bullet\n-@item\n-@samp{x + x} has the same sign as @samp{x}.\n-\n-@item\n-If the sum of two values with opposite sign is zero, the result is\n-positive for all rounding modes expect towards @minus{}infinity, for\n-which it is negative.\n-\n-@item\n-The sign of a product or quotient is negative when exactly one\n-of the operands is negative.\n-@end itemize\n-\n-The default definition is true if @var{mode} is a floating-point\n-mode and the target format is IEEE@.\n-@end defmac\n-\n-@defmac MODE_HAS_SIGN_DEPENDENT_ROUNDING (@var{mode})\n-If defined, this macro should be true for @var{mode} if it has at\n-least one rounding mode in which @samp{x} and @samp{-x} can be\n-rounded to numbers of different magnitude.  Two such modes are\n-towards @minus{}infinity and towards +infinity.\n-\n-The default definition of this macro is true if @var{mode} is\n-a floating-point mode and the target format is IEEE@.\n-@end defmac\n-\n @defmac ROUND_TOWARDS_ZERO\n If defined, this macro should be true if the prevailing rounding\n-mode is towards zero.  A true value has the following effects:\n-\n-@itemize @bullet\n-@item\n-@code{MODE_HAS_SIGN_DEPENDENT_ROUNDING} will be false for all modes.\n-\n-@item\n-@file{libgcc.a}'s floating-point emulator will round towards zero\n-rather than towards nearest.\n+mode is towards zero.\n \n-@item\n-The compiler's floating-point emulator will round towards zero after\n-doing arithmetic, and when converting from the internal float format to\n-the target format.\n-@end itemize\n-\n-The macro does not affect the parsing of string literals.  When the\n-primary rounding mode is towards zero, library functions like\n-@code{strtod} might still round towards nearest, and the compiler's\n-parser should behave like the target's @code{strtod} where possible.\n+Defining this macro only affects the way @file{libgcc.a} emulates\n+floating-point arithmetic.\n \n Not defining this macro is equivalent to returning zero.\n @end defmac\n@@ -1488,9 +1422,7 @@ This macro should return true if floats with @var{size}\n bits do not have a NaN or infinity representation, but use the largest\n exponent for normal numbers instead.\n \n-Defining this macro to true for @var{size} causes @code{MODE_HAS_NANS}\n-and @code{MODE_HAS_INFINITIES} to be false for @var{size}-bit modes.\n-It also affects the way @file{libgcc.a} and @file{real.c} emulate\n+Defining this macro only affects the way @file{libgcc.a} emulates\n floating-point arithmetic.\n \n The default definition of this macro returns false for all sizes."}, {"sha": "cfd278f747eaa9cdc5d3634878570911fc578407", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"coretypes.h\"\n #include \"options.h\"\n+#include \"real.h\"\n \n enum debug_info_type\n {"}, {"sha": "cae45b5a6585e11cabf1254080c8c4278d5518fa", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -1885,8 +1885,7 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \t flag_rounding_math is set, or if GCC's software emulation\n \t is unable to accurately represent the result.  */\n       if ((flag_rounding_math\n-\t   || (REAL_MODE_FORMAT_COMPOSITE_P (mode)\n-\t       && !flag_unsafe_math_optimizations))\n+\t   || (MODE_COMPOSITE_P (mode) && !flag_unsafe_math_optimizations))\n \t  && (inexact || !real_identical (&result, &value)))\n \treturn NULL_TREE;\n "}, {"sha": "8db9f75b57388c91e79fb579a9de1138b1e2de96", "filename": "gcc/machmode.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -202,7 +202,7 @@ extern const unsigned HOST_WIDE_INT mode_mask_array[NUM_MACHINE_MODES];\n /* Return the mode of the inner elements in a vector.  */\n \n extern const unsigned char mode_inner[NUM_MACHINE_MODES];\n-#define GET_MODE_INNER(MODE) mode_inner[MODE]\n+#define GET_MODE_INNER(MODE) ((enum machine_mode) mode_inner[MODE])\n \n /* Get the size in bytes of the basic parts of an object of mode MODE.  */\n "}, {"sha": "da311c8f67ffd1cdbd6cbc1f976a49a40ab37a9d", "filename": "gcc/real.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -2873,6 +2873,7 @@ const struct real_format ieee_single_format =\n     true,\n     true,\n     true,\n+    true,\n     false\n   };\n \n@@ -2892,6 +2893,7 @@ const struct real_format mips_single_format =\n     true,\n     true,\n     true,\n+    true,\n     false,\n     true\n   };\n@@ -2913,6 +2915,7 @@ const struct real_format motorola_single_format =\n     true,\n     true,\n     true,\n+    true,\n     true\n   };\n \n@@ -2941,6 +2944,7 @@ const struct real_format spu_single_format =\n     true,\n     false,\n     false,\n+    false,\n     true,\n     true,\n     false,\n@@ -3152,6 +3156,7 @@ const struct real_format ieee_double_format =\n     true,\n     true,\n     true,\n+    true,\n     false\n   };\n \n@@ -3171,6 +3176,7 @@ const struct real_format mips_double_format =\n     true,\n     true,\n     true,\n+    true,\n     false,\n     true\n   };\n@@ -3192,6 +3198,7 @@ const struct real_format motorola_double_format =\n     true,\n     true,\n     true,\n+    true,\n     true\n   };\n \f\n@@ -3530,6 +3537,7 @@ const struct real_format ieee_extended_motorola_format =\n     true,\n     true,\n     true,\n+    true,\n     true\n   };\n \n@@ -3550,6 +3558,7 @@ const struct real_format ieee_extended_intel_96_format =\n     true,\n     true,\n     true,\n+    true,\n     false\n   };\n \n@@ -3570,6 +3579,7 @@ const struct real_format ieee_extended_intel_128_format =\n     true,\n     true,\n     true,\n+    true,\n     false\n   };\n \n@@ -3592,6 +3602,7 @@ const struct real_format ieee_extended_intel_96_round_53_format =\n     true,\n     true,\n     true,\n+    true,\n     false\n   };\n \f\n@@ -3679,6 +3690,7 @@ const struct real_format ibm_extended_format =\n     true,\n     true,\n     true,\n+    true,\n     false\n   };\n \n@@ -3698,6 +3710,7 @@ const struct real_format mips_extended_format =\n     true,\n     true,\n     true,\n+    true,\n     false,\n     true\n   };\n@@ -3961,6 +3974,7 @@ const struct real_format ieee_quad_format =\n     true,\n     true,\n     true,\n+    true,\n     false\n   };\n \n@@ -3980,6 +3994,7 @@ const struct real_format mips_quad_format =\n     true,\n     true,\n     true,\n+    true,\n     false,\n     true\n   };\n@@ -4280,6 +4295,7 @@ const struct real_format vax_f_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -4300,6 +4316,7 @@ const struct real_format vax_d_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -4320,6 +4337,7 @@ const struct real_format vax_g_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \f\n@@ -4393,6 +4411,7 @@ const struct real_format decimal_single_format =\n     true,\n     true,\n     true,\n+    true,\n     true, \n     true,\n     false\n@@ -4416,6 +4435,7 @@ const struct real_format decimal_double_format =\n     true,\n     true,\n     true,\n+    true,\n     false\n   };\n \n@@ -4434,6 +4454,7 @@ const struct real_format decimal_quad_format =\n     false,\n     true,\n     true,\n+    true,\n     true, \n     true, \n     true,\n@@ -4476,6 +4497,7 @@ const struct real_format real_internal_format =\n     -1,\n     -1,\n     false,\n+    false,\n     true,\n     true,\n     false,"}, {"sha": "8cdf471e742bdeb0a405964d92eaffc817063321", "filename": "gcc/real.h", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -149,6 +149,7 @@ struct real_format\n \n   /* Default rounding mode for operations on this format.  */\n   bool round_towards_zero;\n+  bool has_sign_dependent_rounding;\n \n   /* Properties of the format.  */\n   bool has_nans;\n@@ -171,15 +172,32 @@ extern const struct real_format *\n \n #define REAL_MODE_FORMAT(MODE)\t\t\t\t\t\t\\\n   (real_format_for_mode[DECIMAL_FLOAT_MODE_P (MODE)\t\t\t\\\n-\t\t\t? ((MODE - MIN_MODE_DECIMAL_FLOAT)\t\t\\\n+\t\t\t? (((MODE) - MIN_MODE_DECIMAL_FLOAT)\t\t\\\n \t\t\t   + (MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1))\t\\\n-\t\t\t: (MODE - MIN_MODE_FLOAT)])\n+\t\t\t: ((MODE) - MIN_MODE_FLOAT)])\n+\n+#define FLOAT_MODE_FORMAT(MODE) \\\n+  (REAL_MODE_FORMAT (SCALAR_FLOAT_MODE_P (MODE)? (MODE) \\\n+\t\t\t\t\t       : GET_MODE_INNER (MODE)))\n \n /* The following macro determines whether the floating point format is\n    composite, i.e. may contain non-consecutive mantissa bits, in which\n    case compile-time FP overflow may not model run-time overflow.  */\n-#define REAL_MODE_FORMAT_COMPOSITE_P(MODE) \\\n-\t((REAL_MODE_FORMAT(MODE))->pnan < (REAL_MODE_FORMAT (MODE))->p)\n+#define MODE_COMPOSITE_P(MODE) \\\n+  (FLOAT_MODE_P (MODE) \\\n+   && FLOAT_MODE_FORMAT (MODE)->pnan < FLOAT_MODE_FORMAT (MODE)->p)\n+\n+/* Accessor macros for format properties.  */\n+#define MODE_HAS_NANS(MODE) \\\n+  (FLOAT_MODE_P (MODE) && FLOAT_MODE_FORMAT (MODE)->has_nans)\n+#define MODE_HAS_INFINITIES(MODE) \\\n+  (FLOAT_MODE_P (MODE) && FLOAT_MODE_FORMAT (MODE)->has_inf)\n+#define MODE_HAS_SIGNED_ZEROS(MODE) \\\n+  (FLOAT_MODE_P (MODE) && FLOAT_MODE_FORMAT (MODE)->has_signed_zero)\n+#define MODE_HAS_SIGN_DEPENDENT_ROUNDING(MODE) \\\n+  (FLOAT_MODE_P (MODE) \\\n+   && FLOAT_MODE_FORMAT (MODE)->has_sign_dependent_rounding)\n+\n \n /* Declare functions in real.c.  */\n "}, {"sha": "5c57c8949ebd2b619ebee42c95261a73f9ea0381", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099e2c2bb7e81926d3ee91a856834ee7672c694/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=4099e2c2bb7e81926d3ee91a856834ee7672c694", "patch": "@@ -3080,8 +3080,7 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t     is unable to accurately represent the result.  */\n \n \t  if ((flag_rounding_math\n-\t       || (REAL_MODE_FORMAT_COMPOSITE_P (mode)\n-\t\t   && !flag_unsafe_math_optimizations))\n+\t       || (MODE_COMPOSITE_P (mode) && !flag_unsafe_math_optimizations))\n \t      && (inexact || !real_identical (&result, &value)))\n \t    return NULL_RTX;\n "}]}