{"sha": "76160199989decf5437de4def4d628b04d5ad68a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxNjAxOTk5ODlkZWNmNTQzN2RlNGRlZjRkNjI4YjA0ZDVhZDY4YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-31T10:11:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-31T10:11:41Z"}, "message": "[AArch64] Tighten address register subreg checks\n\nPreviously we allowed subregs of non-GPR modes to be base and index\nregisters in non-strict mode.  In practice such subregs will always\nrequire a reload, so we get better code by disallowing them.\n\n2017-08-31  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_base_register_rtx_p): Only allow\n\tsubregs whose inner modes can be stored in GPRs.\n\t(aarch64_classify_index): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251557", "tree": {"sha": "e0f6f0e8697b12bebc8ddd5b704295f42ece7c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0f6f0e8697b12bebc8ddd5b704295f42ece7c09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76160199989decf5437de4def4d628b04d5ad68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76160199989decf5437de4def4d628b04d5ad68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76160199989decf5437de4def4d628b04d5ad68a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76160199989decf5437de4def4d628b04d5ad68a/comments", "author": null, "committer": null, "parents": [{"sha": "5f5653148b94593632986155b4f283150c52b83d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5653148b94593632986155b4f283150c52b83d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5653148b94593632986155b4f283150c52b83d"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "dfde0b011857834c2ceef8fff6063c61890777c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76160199989decf5437de4def4d628b04d5ad68a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76160199989decf5437de4def4d628b04d5ad68a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76160199989decf5437de4def4d628b04d5ad68a", "patch": "@@ -1,3 +1,11 @@\n+2017-08-31  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_base_register_rtx_p): Only allow\n+\tsubregs whose inner modes can be stored in GPRs.\n+\t(aarch64_classify_index): Likewise.\n+\n 2017-08-31  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "ca0775272af2bebe5319ce487c973178092e5ad7", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76160199989decf5437de4def4d628b04d5ad68a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76160199989decf5437de4def4d628b04d5ad68a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=76160199989decf5437de4def4d628b04d5ad68a", "patch": "@@ -4196,7 +4196,9 @@ aarch64_regno_ok_for_base_p (int regno, bool strict_p)\n static bool\n aarch64_base_register_rtx_p (rtx x, bool strict_p)\n {\n-  if (!strict_p && GET_CODE (x) == SUBREG)\n+  if (!strict_p\n+      && GET_CODE (x) == SUBREG\n+      && contains_reg_of_mode[GENERAL_REGS][GET_MODE (SUBREG_REG (x))])\n     x = SUBREG_REG (x);\n \n   return (REG_P (x) && aarch64_regno_ok_for_base_p (REGNO (x), strict_p));\n@@ -4343,7 +4345,9 @@ aarch64_classify_index (struct aarch64_address_info *info, rtx x,\n   else\n     return false;\n \n-  if (GET_CODE (index) == SUBREG)\n+  if (!strict_p\n+      && GET_CODE (index) == SUBREG\n+      && contains_reg_of_mode[GENERAL_REGS][GET_MODE (SUBREG_REG (index))])\n     index = SUBREG_REG (index);\n \n   if ((shift == 0 ||"}]}