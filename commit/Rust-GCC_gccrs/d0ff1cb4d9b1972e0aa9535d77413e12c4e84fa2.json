{"sha": "d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBmZjFjYjRkOWIxOTcyZTBhYTk1MzVkNzc0MTNlMTJjNGU4NGZhMg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-10-09T13:53:54Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-10-09T13:53:54Z"}, "message": "decl.c (grokdeclarator): constexpr only implies const in C++11.\n\n2014-10-09  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/cp/\n\t* decl.c (grokdeclarator): constexpr only implies const in C++11.\ngcc/testsuite/\n\t* g++.dg/cpp0x/constexpr-52892-1.C: Error on missing const in C++14.\n\t* g++.dg/cpp0x/constexpr-array-ptr7.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-diag1.C: Add const.\n\t* g++.dg/cpp0x/constexpr-diag3.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ex1.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ex2.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ex4.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-initlist.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ptrmem.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ptrsub.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ref4.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-static6.C: Likewise.\n\nFrom-SVN: r216039", "tree": {"sha": "86be65ec8d99fa07ac9f9ddf60af5bb0015932c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86be65ec8d99fa07ac9f9ddf60af5bb0015932c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12d3031b2c31ad7c9ec956eba52f8451f7b284aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d3031b2c31ad7c9ec956eba52f8451f7b284aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d3031b2c31ad7c9ec956eba52f8451f7b284aa"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "ed71ec27ff27d5b006561e7cdf06218d9873c473", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -1,3 +1,7 @@\n+2014-10-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* decl.c (grokdeclarator): constexpr only implies const in C++11.\n+\n 2014-10-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/63405"}, {"sha": "d4adbeb96ba1bfda3a60139793d14203559bd562", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -10539,7 +10539,8 @@ grokdeclarator (const cp_declarator *declarator,\n       && !NEW_DELETE_OPNAME_P (unqualified_id))\n     {\n       cp_cv_quals real_quals = memfn_quals;\n-      if (constexpr_p && sfk != sfk_constructor && sfk != sfk_destructor)\n+      if (cxx_dialect < cxx14 && constexpr_p\n+\t  && sfk != sfk_constructor && sfk != sfk_destructor)\n \treal_quals |= TYPE_QUAL_CONST;\n       type = build_memfn_type (type, ctype, real_quals, rqual);\n     }"}, {"sha": "ceaf2b35d816ae4687f13fe67040e18948602c6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -1,3 +1,18 @@\n+2014-10-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* g++.dg/cpp0x/constexpr-52892-1.C: Error on missing const in C++14.\n+\t* g++.dg/cpp0x/constexpr-array-ptr7.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-diag1.C: Add const.\n+\t* g++.dg/cpp0x/constexpr-diag3.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ex1.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ex2.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ex4.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-initlist.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ptrmem.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ptrsub.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ref4.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-static6.C: Likewise.\n+\n 2014-10-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63380"}, {"sha": "91e1ea72c2de3df92ca113219bf25b484208c33b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-52892-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52892-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52892-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52892-1.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -24,5 +24,5 @@ constexpr Defer<Function> make_deferred(const Function f) {\n \n int main() {\n   constexpr auto deferred = make_deferred(&fibonacci);\n-  static_assert(deferred(25) == 75025, \"Static fibonacci call failed\");\n+  static_assert(deferred(25) == 75025, \"Static fibonacci call failed\"); // { dg-error \"no match for call\" \"\" { target c++14 } }\n }"}, {"sha": "005f5300d6f34d9bcd911736ad5c54781c4e6e09", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array-ptr7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr7.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -17,4 +17,4 @@ S::foo ()\n constexpr S s = { 0,1,2,3,4,5,6,7,8,9,10 };\n \n #define SA(X) static_assert ((X), #X)\n-SA(s.foo() == 10);\n+SA(s.foo() == 10); // { dg-error \"discards qualifiers\" \"\" { target c++14 } }"}, {"sha": "6b908b6dff8db83f9a8f38c8a1cb42bde3532683", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-diag1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag1.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -5,7 +5,7 @@ template <class T>\n struct A\n {\n   T t;\n-  constexpr int f() { return 42; } // { dg-error \"enclosing class\" }\n+  constexpr int f() const { return 42; } // { dg-error \"enclosing class\" }\n };\n \n struct B { B(); operator int(); };"}, {"sha": "580fceb72826e11be27702017d7f801ff489b1a6", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-diag3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -16,7 +16,7 @@ int main()\n struct complex \t\t\t// { dg-message \"no constexpr constructor\" }\n {\n   complex(double r, double i) : re(r), im(i) { }\n-  constexpr double real() { return re; } // { dg-error \"not a literal type\" }\n+  constexpr double real() const { return re; } // { dg-error \"not a literal type\" }\n   double imag() const { return im; }\n \n private:"}, {"sha": "c4c052a607ad6a702a407c453dbeee67848ef007", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex1.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -12,13 +12,13 @@\n // 2 defined before first use\n // NOTE: this is only needed in contexts that require a constant-expression\n struct S {\n-    constexpr int twice();\n-    constexpr int t();\t\t// { dg-message \"used but never defined\" }\n+    constexpr int twice() const;\n+    constexpr int t() const;\t// { dg-message \"used but never defined\" }\n private:\n     static constexpr int val = 7;  // constexpr variable\n };\n \n-constexpr int S::twice() { return val + val; }\n+constexpr int S::twice() const { return val + val; }\n constexpr S s = { };\n int x1 = s.twice();     // ok\n int x2 = s.t();         // error: S::t() not defined\n@@ -44,8 +44,8 @@ const double* p = &x;          // the &x forces x into memory\n // 1\n struct complex {\n    constexpr complex(double r, double i) : re(r), im(i) { }\n-   constexpr double real() { return re; }\n-   constexpr double imag() { return im; }\n+   constexpr double real() const { return re; }\n+   constexpr double imag() const { return im; }\n private:\n    double re;\n    double im;"}, {"sha": "34b557ce76eb60efc2d2b9f2a6dfc12402582d2e", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex2.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -7,8 +7,8 @@\n // p 4\n struct A {\n   constexpr A(int i) : val(i) { }\n-  constexpr operator int() { return val; }\n-  constexpr operator long() { return -1; }\n+  constexpr operator int() const { return val; }\n+  constexpr operator long() const { return -1; }\n private:\n   int val;\n };"}, {"sha": "43e738842f4a56d38745f9732a4fbf382f6f370c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex4.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -3,7 +3,7 @@\n struct A\n {\n   constexpr A(int) { }\n-  constexpr operator int() { return 1; };\n+  constexpr operator int() const { return 1; };\n };\n \n template <class T>"}, {"sha": "6b6cf3dacaa6f471c427d7d6375a532353091ad5", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-initlist.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-initlist.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-initlist.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-initlist.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -23,11 +23,11 @@ public:\n   template<size_t N>\n   constexpr initializer_list(const E(&array)[N]) : sz(N), start(array) {}\n \n-  constexpr size_t size() { return sz; }\n+  constexpr size_t size() const { return sz; }\n \n-  constexpr const E* begin() { return start; }\n+  constexpr const E* begin() const { return start; }\n \n-  constexpr const E* end() { return start + sz; }\n+  constexpr const E* end() const { return start + sz; }\n };\n \n template<class E, size_t N>"}, {"sha": "a16e5c4591660c2785bce3ce8de81396b8daecf8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ptrmem.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrmem.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrmem.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrmem.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -4,7 +4,7 @@ struct C { // literal type\n   int m;\n   int n;\n   constexpr C(int m) : m(m), n(-m) {}\n-  constexpr bool is_neg() { return m < 0; }\n+  constexpr bool is_neg() const { return m < 0; }\n };\n \n constexpr bool check1(const C& c, int C:: *pm) { return c.*pm < 0; } // #1"}, {"sha": "6c7dc302e31af875043957e30a018d66d7fc84c3", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ptrsub.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrsub.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrsub.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrsub.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -5,7 +5,7 @@\n struct array\n {\n   constexpr array() :x(0) {}\n-  constexpr int const* begin() { return &x; }\n+  constexpr int const* begin() const { return &x; }\n   int x;\n };\n constexpr array aa;"}, {"sha": "be3d48ca6f0a60b0f2a0b43891c6de3d6361d961", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ref4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref4.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -4,8 +4,8 @@\n struct S\n {\n   int s[1];\n-  constexpr const int &foo (unsigned i) { return (i < 1 ? 0 : throw 1), s[i]; }\n-  constexpr const int &bar (unsigned i) { return i < 1 ? s[i] : (throw 0, s[i]); }\n+  constexpr const int &foo (unsigned i) const { return (i < 1 ? 0 : throw 1), s[i]; }\n+  constexpr const int &bar (unsigned i) const { return i < 1 ? s[i] : (throw 0, s[i]); }\n };\n \n int"}, {"sha": "99e456985b61d20e7c7af25e2e8f39700380af4b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-static6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static6.C?ref=d0ff1cb4d9b1972e0aa9535d77413e12c4e84fa2", "patch": "@@ -2,7 +2,7 @@\n \n struct B\n {\n-  constexpr operator int() { return 4; }\n+  constexpr operator int() const { return 4; }\n };\n \n template <int I>"}]}