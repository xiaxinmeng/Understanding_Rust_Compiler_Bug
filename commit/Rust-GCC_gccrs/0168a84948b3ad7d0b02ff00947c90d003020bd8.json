{"sha": "0168a84948b3ad7d0b02ff00947c90d003020bd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE2OGE4NDk0OGIzYWQ3ZDBiMDJmZjAwOTQ3YzkwZDAwMzAyMGJkOA==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-06-28T19:55:53Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-06-28T19:55:53Z"}, "message": "darwin.h (REGISTER_TARGET_PRAGMAS): Define.\n\n        * config/darwin.h (REGISTER_TARGET_PRAGMAS): Define.\n        * config/darwin-c.c: New file.\n        * config/darwin-protos.h: Declare new functions.\n        * config/rs6000/t-darwin (darwin-c.o): New rule.\n        * config.gcc (powerpc-*-darwin*): Define c_target_objs and\n        cxx_target_objs.\n        * doc/extend.texi (Pragmas): New section.\n\n        * gcc.dg/pragma-darwin.c: New test.\n\nFrom-SVN: r43645", "tree": {"sha": "b2a72f6a5ab81bf086500082f812a81d2ec683e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2a72f6a5ab81bf086500082f812a81d2ec683e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0168a84948b3ad7d0b02ff00947c90d003020bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0168a84948b3ad7d0b02ff00947c90d003020bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0168a84948b3ad7d0b02ff00947c90d003020bd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0168a84948b3ad7d0b02ff00947c90d003020bd8/comments", "author": null, "committer": null, "parents": [{"sha": "d475215a7b316fdc0744be752754b590bac22959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d475215a7b316fdc0744be752754b590bac22959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d475215a7b316fdc0744be752754b590bac22959"}], "stats": {"total": 330, "additions": 328, "deletions": 2}, "files": [{"sha": "1bbb00e67bcda6434afff9e256c65b329295d0db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0168a84948b3ad7d0b02ff00947c90d003020bd8", "patch": "@@ -1,3 +1,13 @@\n+2001-06-28  Stan Shebs  <shebs@apple.com>\n+\n+\t* config/darwin.h (REGISTER_TARGET_PRAGMAS): Define.\n+\t* config/darwin-c.c: New file.\n+\t* config/darwin-protos.h: Declare new functions.\n+\t* config/rs6000/t-darwin (darwin-c.o): New rule.\n+\t* config.gcc (powerpc-*-darwin*): Define c_target_objs and\n+\tcxx_target_objs.\n+\t* doc/extend.texi (Pragmas): New section.\n+\n Thu Jun 28 20:13:11 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* flow.c (try_merge_block): Rename to try_optimize_cfg;"}, {"sha": "50eb5473dbb61dc53bcd4ce174f9980bc16d3186", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0168a84948b3ad7d0b02ff00947c90d003020bd8", "patch": "@@ -2569,6 +2569,8 @@ powerpc-*-darwin*)\n \t# fixed and we can get rid of this silliness.\n \txm_defines=\"HAVE_DESIGNATED_INITIALIZERS=0\"\n \textra_objs=\"darwin.o\"\n+\tc_target_objs=\"darwin-c.o\"\n+\tcxx_target_objs=\"darwin-c.o\"\n \t# Darwin linker does collect2 functionality\n \tuse_collect2=no\n \t;;"}, {"sha": "10ffaf0993507a27bc4c6c9810cc2e47ad666e5b", "filename": "gcc/config/darwin-c.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=0168a84948b3ad7d0b02ff00947c90d003020bd8", "patch": "@@ -0,0 +1,153 @@\n+/* Darwin support needed only by C/C++ frontends.\n+   Copyright (C) 2001\n+   Free Software Foundation, Inc.\n+   Contributed by Apple Computer Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"cpplib.h\"\n+#include \"tree.h\"\n+#include \"c-pragma.h\"\n+#include \"c-lex.h\"\n+#include \"c-tree.h\"\n+#include \"toplev.h\"\n+#include \"tm_p.h\"\n+\n+/* Pragmas.  */\n+\n+#define BAD(msgid) do { warning (msgid); return; } while (0)\n+\n+/* Maintain a small stack of alignments.  This is similar to pragma\n+   pack's stack, but simpler.  */\n+\n+static void push_field_alignment PARAMS ((int));\n+static void pop_field_alignment PARAMS ((void));\n+\n+typedef struct align_stack\n+{\n+  int alignment;\n+  struct align_stack * prev;\n+} align_stack;\n+\n+static struct align_stack * field_align_stack = NULL;\n+\n+static void\n+push_field_alignment (bit_alignment)\n+     int bit_alignment;\n+{\n+  align_stack *entry = (align_stack *) xmalloc (sizeof (align_stack));\n+\n+  entry->alignment = maximum_field_alignment;\n+  entry->prev = field_align_stack;\n+  field_align_stack = entry;\n+\n+  maximum_field_alignment = bit_alignment;\n+}\n+\n+static void\n+pop_field_alignment ()\n+{\n+  if (field_align_stack)\n+    {\n+      align_stack *entry = field_align_stack;\n+\n+      maximum_field_alignment = entry->alignment;\n+      field_align_stack = entry->prev;\n+      free (entry);\n+    }\n+  else\n+    error (\"too many #pragma options align=reset\");\n+}\n+\n+/* Handlers for Darwin-specific pragmas.  */\n+\n+void\n+darwin_pragma_ignore (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  /* Do nothing.  */\n+}\n+\n+/* #pragma options align={mac68k|power|reset} */\n+\n+void\n+darwin_pragma_options (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  char *arg;\n+  tree t, x;\n+\n+  if (c_lex (&t) != CPP_NAME)\n+    BAD (\"malformed '#pragma options', ignoring\");\n+  arg = IDENTIFIER_POINTER (t);\n+  if (strcmp (arg, \"align\"))\n+    BAD (\"malformed '#pragma options', ignoring\");\n+  if (c_lex (&t) != CPP_EQ)\n+    BAD (\"malformed '#pragma options', ignoring\");\n+  if (c_lex (&t) != CPP_NAME)\n+    BAD (\"malformed '#pragma options', ignoring\");\n+\n+  if (c_lex (&x) != CPP_EOF)\n+    warning (\"junk at end of '#pragma options'\");\n+\n+  arg = IDENTIFIER_POINTER (t);\n+  if (!strcmp (arg, \"mac68k\"))\n+    push_field_alignment (16);\n+  else if (!strcmp (arg, \"power\"))\n+    push_field_alignment (0);\n+  else if (!strcmp (arg, \"reset\"))\n+    pop_field_alignment ();\n+  else\n+    warning (\"malformed '#pragma options align={mac68k|power|reset}', ignoring\");\n+}\n+\n+/* #pragma unused ([var {, var}*]) */\n+\n+void\n+darwin_pragma_unused (pfile)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  tree decl, x;\n+  int tok;\n+\n+  if (c_lex (&x) != CPP_OPEN_PAREN)\n+    BAD (\"missing '(' after '#pragma unused', ignoring\");\n+\n+  while (1)\n+    {\n+      tok = c_lex (&decl);\n+      if (tok == CPP_NAME && decl)\n+\t{\n+\t  tree local = IDENTIFIER_LOCAL_VALUE (decl);\n+\t  if (local && (TREE_CODE (local) == PARM_DECL\n+\t\t\t|| TREE_CODE (local) == VAR_DECL))\n+\t    TREE_USED (local) = 1;\n+\t  tok = c_lex (&x);\n+\t  if (tok != CPP_COMMA)\n+\t    break;\n+\t}\n+    }\n+\n+  if (tok != CPP_CLOSE_PAREN)\n+    BAD (\"missing ')' after '#pragma unused', ignoring\");\n+\n+  if (c_lex (&x) != CPP_EOF)\n+    warning (\"junk at end of '#pragma unused'\");\n+}"}, {"sha": "9b91a193bea8626d0b684ffbc7f80e7f33549f3a", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=0168a84948b3ad7d0b02ff00947c90d003020bd8", "patch": "@@ -56,3 +56,10 @@ extern void darwin_encode_section_info PARAMS ((tree));\n #endif /* TREE_CODE */\n \n extern void machopic_finish PARAMS ((FILE *));\n+\n+#ifdef GCC_C_PRAGMA_H\n+extern void darwin_init_pragma PARAMS ((int (*) (tree *)));\n+extern void darwin_pragma_ignore PARAMS ((cpp_reader *));\n+extern void darwin_pragma_options PARAMS ((cpp_reader *));\n+extern void darwin_pragma_unused PARAMS ((cpp_reader *));\n+#endif"}, {"sha": "aa628c63965958868c9654538e31a2df82b880d0", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=0168a84948b3ad7d0b02ff00947c90d003020bd8", "patch": "@@ -780,3 +780,10 @@ enum machopic_addr_class {\n       }\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n+#define REGISTER_TARGET_PRAGMAS(PFILE)                          \\\n+  do {                                                          \\\n+    cpp_register_pragma (PFILE, 0, \"mark\", darwin_pragma_ignore);  \\\n+    cpp_register_pragma (PFILE, 0, \"options\", darwin_pragma_options);  \\\n+    cpp_register_pragma (PFILE, 0, \"segment\", darwin_pragma_ignore);  \\\n+    cpp_register_pragma (PFILE, 0, \"unused\", darwin_pragma_unused);  \\\n+  } while (0)"}, {"sha": "a51a345a60a3f9d4e58d4b0a58199c9b1e9074fd", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=0168a84948b3ad7d0b02ff00947c90d003020bd8", "patch": "@@ -12,9 +12,14 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n \n darwin.o: $(srcdir)/config/darwin.c $(CONFIG_H) $(SYSTEM_H) $(RTL_BASE_H) \\\n           $(REGS_H) hard-reg-set.h insn-config.h conditions.h output.h \\\n-          insn-attr.h flags.h $(TREE_H) $(EXPR_H) reload.h $(C_TREE_H) \\\n+          insn-attr.h flags.h $(TREE_H) $(EXPR_H) reload.h \\\n           function.h $(GGC_H) $(TM_P_H)\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/darwin.c\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n+darwin-c.o: $(srcdir)/config/darwin-c.c $(CONFIG_H) $(SYSTEM_H) \\\n+\t    $(TREE_H) $(C_TREE_H) c-lex.h c-pragma.h toplev.h cpplib.h \\\n+\t    $(TM_P_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n # Build the libraries for both hard and soft floating point\n "}, {"sha": "28835fb2e382af7ce613a8aaf99a9977acba4a21", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0168a84948b3ad7d0b02ff00947c90d003020bd8", "patch": "@@ -73,6 +73,7 @@ extensions, accepted by GCC in C89 mode and in C++.\n \t\t\t function.\n * Return Address::      Getting the return or frame address of a function.\n * Other Builtins::      Other built-in functions.\n+* Pragmas::             Pragmas accepted by GCC.\n @end menu\n @end ifset\n @ifclear INTERNALS\n@@ -125,6 +126,7 @@ extensions, accepted by GCC in C89 mode and in C++.\n \t\t\t function.\n * Return Address::      Getting the return or frame address of a function.\n * Other Builtins::      Other built-in functions.\n+* Pragmas::             Pragmas accepted by GCC.\n @end menu\n @end ifclear\n \n@@ -3909,6 +3911,83 @@ if (__builtin_expect (ptr != NULL, 1))\n when testing pointer or floating-point values.\n @end deftypefn\n \n+@node Pragmas\n+@section Pragmas Accepted by GCC\n+@cindex pragmas\n+@cindex #pragma\n+\n+GCC supports several types of pragmas, primarily in order to compile\n+code originally written for other compilers.  Note that in general\n+we do not recommend the use of pragmas; @xref{Function Attributes},\n+for further explanation.\n+\n+@menu\n+* ARM Pragmas::\n+* Darwin Pragmas::\n+@end menu\n+\n+@node ARM Pragmas\n+@subsection ARM Pragmas\n+\n+The ARM target defines pragmas for controlling the default addition of\n+@code{long_call} and @code{short_call} attributes to functions.\n+@xref{Function Attributes}, for information about the effects of these\n+attributes.\n+\n+@table @code\n+@item long_calls\n+@cindex pragma, long_calls\n+Set all subsequent functions to have the @code{long_call} attribute.\n+\n+@item no_long_calls\n+@cindex pragma, no_long_calls\n+Set all subsequent functions to have the @code{short_call} attribute.\n+\n+@item long_calls_off\n+@cindex pragma, long_calls_off\n+Do not affect the @code{long_call} or @code{short_call} attributes of\n+subsequent functions.\n+@end table\n+\n+@c Describe c4x pragmas here.\n+@c Describe h8300 pragmas here.\n+@c Describe i370 pragmas here.\n+@c Describe i960 pragmas here.\n+@c Describe sh pragmas here.\n+@c Describe v850 pragmas here.\n+\n+@node Darwin Pragmas\n+@subsection Darwin Pragmas\n+\n+The following pragmas are available for all architectures running the\n+Darwin operating system.  These are useful for compatibility with other\n+MacOS compilers.\n+\n+@table @code\n+@item mark @var{tokens}@dots{}\n+@cindex pragma, mark\n+This pragma is accepted, but has no effect.\n+\n+@item options align=@var{alignment}\n+@cindex pragma, options align\n+This pragma sets the alignment of fields in structures.  The values of\n+@var{alignment} may be @code{mac68k}, to emulate m68k alignment, or\n+@code{power}, to emulate PowerPC alignment.  Uses of this pragma nest\n+properly; to restore the previous setting, use @code{reset} for the\n+@var{alignment}.\n+\n+@item segment @var{tokens}@dots{}\n+@cindex pragma, segment\n+This pragma is accepted, but has no effect.\n+\n+@item unused (@var{var} [, @var{var}]@dots{})\n+@cindex pragma, unused\n+This pragma declares variables to be possibly unused.  GCC will not\n+produce warnings for the listed variables.  The effect is similar to\n+that of the @code{unused} attribute, except that this pragma may appear\n+anywhere within the variables' scopes.\n+@end table\n+\n @node C++ Extensions\n @chapter Extensions to the C++ Language\n @cindex extensions, C++ language"}, {"sha": "1cf7f458b04085bbf3ae1959d8848008bcd9f720", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0168a84948b3ad7d0b02ff00947c90d003020bd8", "patch": "@@ -1,3 +1,7 @@\n+2001-06-28  Stan Shebs  <shebs@apple.com>\n+\n+\t* gcc.dg/pragma-darwin.c: New test.\n+\n 2001-06-28  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* lib/objc.exp (objc_target_compile): Don't need -lposix4 on any"}, {"sha": "e3bcfb958a8063d11caebe83f0686748295a405c", "filename": "gcc/testsuite/gcc.dg/pragma-darwin.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0168a84948b3ad7d0b02ff00947c90d003020bd8/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-darwin.c?ref=0168a84948b3ad7d0b02ff00947c90d003020bd8", "patch": "@@ -0,0 +1,59 @@\n+/* Darwin (Mac OS X) pragma exercises.  */\n+\n+/* { dg-do run { target powerpc-*-darwin* } } */\n+/* { dg-options \"-O -Wunused\" } */\n+\n+/* The mark pragma is to help decorate IDEs.  */\n+\n+#pragma mark hey hey ho\n+\n+/* The options pragma used to do a lot, now it's only for emulating\n+   m68k alignment rules in structs.  */\n+\n+#pragma options 23  /* { dg-error \"malformed '#pragma options'\" } */\n+#pragma options align  /* { dg-error \"malformed '#pragma options'\" } */\n+#pragma options align mac68k /* { dg-error \"malformed '#pragma options'\" } */\n+#pragma options align=45 /* { dg-error \"malformed '#pragma options'\" } */\n+#pragma options align=foo /* { dg-error \"malformed '#pragma options align\" } */\n+\n+#pragma options align=mac68k\n+struct s1 { short f1; int f2; };\n+#pragma options align=power\n+struct s2 { short f1; int f2; };\n+#pragma options align=mac68k\n+struct s3 { short f1; int f2; };\n+#pragma options align=reset\n+struct s4 { short f1; int f2; };\n+\n+#pragma options align=mac68k foo /* { dg-warning \"junk at end of '#pragma options'\" } */\n+\n+/* Segment pragmas don't do anything anymore.  */\n+\n+#pragma segment foo\n+\n+int\n+main ()\n+{\n+  int x, z;  /* { dg-warning \"unused variable\" } */\n+  #pragma unused (x, y)\n+\n+  if (sizeof (struct s1) != 6)\n+    abort ();\n+  if (sizeof (struct s2) != 8)\n+    abort ();\n+  if (sizeof (struct s3) != 6)\n+    abort ();\n+  if (sizeof (struct s4) != 8)\n+    abort ();\n+  return 0;\n+}\n+\n+void\n+unused_err_test ()\n+{\n+  int a, b;\n+  /* Trying to match on '(' or ')' gives regexp headaches, use . instead.  */\n+#pragma unused  /* { dg-error \"missing '.' after '#pragma unused\" } */\n+#pragma unused (a  /* { dg-error \"missing '.' after '#pragma unused\" } */\n+#pragma unused (b) foo /* { dg-warning \"junk at end of '#pragma unused'\" } */\n+}"}]}