{"sha": "fb153d02da077fb18f52372dab68a8cc52ea3a54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIxNTNkMDJkYTA3N2ZiMThmNTIzNzJkYWI2OGE4Y2M1MmVhM2E1NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-06T09:52:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-06T09:52:06Z"}, "message": "opts.c (common_handle_option): Add support for -fno-sanitize=all and -f{,no-}sanitize-recover=all.\n\n\t* opts.c (common_handle_option): Add support for\n\t-fno-sanitize=all and -f{,no-}sanitize-recover=all.\n\t* doc/invoke.texi: Document -fno-sanitize=all,\n\t-f{,no-}sanitize-recover=all.  Document that\n\t-fsanitize=float-cast-overflow is not enabled\n\tby -fsanitize=undefined.  Fix up documentation\n\tof -f{,no-}sanitize-recover.\n\n\t* c-c++-common/asan/sanitize-all-1.c: New test.\n\t* c-c++-common/ubsan/sanitize-all-1.c: New test.\n\t* c-c++-common/ubsan/sanitize-all-2.c: New test.\n\t* c-c++-common/ubsan/sanitize-all-3.c: New test.\n\t* c-c++-common/ubsan/sanitize-all-4.c: New test.\n\nFrom-SVN: r219241", "tree": {"sha": "3c149bb9e260ef1bff00bd67e7a0331e2b04a951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c149bb9e260ef1bff00bd67e7a0331e2b04a951"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb153d02da077fb18f52372dab68a8cc52ea3a54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb153d02da077fb18f52372dab68a8cc52ea3a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb153d02da077fb18f52372dab68a8cc52ea3a54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb153d02da077fb18f52372dab68a8cc52ea3a54/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1954e97e7e41395c48e6913b5902b466bac83b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1954e97e7e41395c48e6913b5902b466bac83b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1954e97e7e41395c48e6913b5902b466bac83b6"}], "stats": {"total": 190, "additions": 187, "deletions": 3}, "files": [{"sha": "daae241544f25a09246f97b8a279d63acd7df454", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb153d02da077fb18f52372dab68a8cc52ea3a54", "patch": "@@ -1,3 +1,13 @@\n+2015-01-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* opts.c (common_handle_option): Add support for\n+\t-fno-sanitize=all and -f{,no-}sanitize-recover=all.\n+\t* doc/invoke.texi: Document -fno-sanitize=all,\n+\t-f{,no-}sanitize-recover=all.  Document that\n+\t-fsanitize=float-cast-overflow is not enabled\n+\tby -fsanitize=undefined.  Fix up documentation\n+\tof -f{,no-}sanitize-recover.\n+\n 2015-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config.gcc: Add Visium support."}, {"sha": "09706783a9a120b043c2232f1cf554c7dddbd8c0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fb153d02da077fb18f52372dab68a8cc52ea3a54", "patch": "@@ -5689,6 +5689,8 @@ be a legitimate way of obtaining infinities and NaNs.\n @opindex fsanitize=float-cast-overflow\n This option enables floating-point type to integer conversion checking.\n We check that the result of the conversion does not overflow.\n+Unlike other similar options, @option{-fsanitize=float-cast-overflow} is\n+not enabled by @option{-fsanitize=undefined}.\n This option does not work well with @code{FE_INVALID} exceptions enabled.\n \n @item -fsanitize=nonnull-attribute\n@@ -5724,6 +5726,13 @@ While @option{-ftrapv} causes traps for signed overflows to be emitted,\n @option{-fsanitize=undefined} gives a diagnostic message.\n This currently works only for the C family of languages.\n \n+@item -fno-sanitize=all\n+@opindex fno-sanitize=all\n+\n+This option disables all previously enabled sanitizers.\n+@option{-fsanitize=all} is not allowed, as some sanitizers cannot be used\n+together.\n+\n @item -fasan-shadow-offset=@var{number}\n @opindex fasan-shadow-offset\n This option forces GCC to use custom shadow offset in AddressSanitizer checks.\n@@ -5747,11 +5756,14 @@ Currently this feature only works for @option{-fsanitize=undefined} (and its sub\n except for @option{-fsanitize=unreachable} and @option{-fsanitize=return}),\n @option{-fsanitize=float-cast-overflow}, @option{-fsanitize=float-divide-by-zero} and\n @option{-fsanitize=kernel-address}.  For these sanitizers error recovery is turned on by default.\n+@option{-fsanitize-recover=all} and @option{-fno-sanitize-recover=all} is also\n+accepted, the former enables recovery for all sanitizers that support it,\n+the latter disables recovery for all sanitizers that support it.\n \n Syntax without explicit @var{opts} parameter is deprecated.  It is equivalent to\n-@option{-fsanitize-recover=undefined,float-cast-overflow,float-divide-by-zero,kernel-address}.\n+@option{-fsanitize-recover=undefined,float-cast-overflow,float-divide-by-zero}.\n Similarly @option{-fno-sanitize-recover} is equivalent to\n-@option{-fno-sanitize-recover=undefined,float-cast-overflow,float-divide-by-zero,kernel-address}.\n+@option{-fno-sanitize-recover=undefined,float-cast-overflow,float-divide-by-zero}.\n \n @item -fsanitize-undefined-trap-on-error\n @opindex fsanitize-undefined-trap-on-error"}, {"sha": "8a16116665f1bbc00eda0fba566b62f894ddb1be", "filename": "gcc/opts.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fb153d02da077fb18f52372dab68a8cc52ea3a54", "patch": "@@ -1588,6 +1588,7 @@ common_handle_option (struct gcc_options *opts,\n \t\tsizeof \"returns-nonnull-attribute\" - 1 },\n \t      { \"object-size\", SANITIZE_OBJECT_SIZE,\n \t\tsizeof \"object-size\" - 1 },\n+\t      { \"all\", ~0, sizeof \"all\" - 1 },\n \t      { NULL, 0, 0 }\n \t    };\n \t    const char *comma;\n@@ -1611,7 +1612,15 @@ common_handle_option (struct gcc_options *opts,\n \t\t  && memcmp (p, spec[i].name, len) == 0)\n \t\t{\n \t\t  /* Handle both -fsanitize and -fno-sanitize cases.  */\n-\t\t  if (value)\n+\t\t  if (value && spec[i].flag == ~0U)\n+\t\t    {\n+\t\t      if (code == OPT_fsanitize_)\n+\t\t\terror_at (loc, \"-fsanitize=all option is not valid\");\n+\t\t      else\n+\t\t\t*flag |= ~(SANITIZE_USER_ADDRESS | SANITIZE_THREAD\n+\t\t\t\t   | SANITIZE_LEAK);\n+\t\t    }\n+\t\t  else if (value)\n \t\t    *flag |= spec[i].flag;\n \t\t  else\n \t\t    *flag &= ~spec[i].flag;"}, {"sha": "634953cb0d5dc802c224930503dd11c1f109267f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb153d02da077fb18f52372dab68a8cc52ea3a54", "patch": "@@ -1,3 +1,11 @@\n+2015-01-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/asan/sanitize-all-1.c: New test.\n+\t* c-c++-common/ubsan/sanitize-all-1.c: New test.\n+\t* c-c++-common/ubsan/sanitize-all-2.c: New test.\n+\t* c-c++-common/ubsan/sanitize-all-3.c: New test.\n+\t* c-c++-common/ubsan/sanitize-all-4.c: New test.\n+\n 2015-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* lib/target-supports.exp (check_profiling_available): Return 0 for"}, {"sha": "58e4079b0eee6ab527618253a16bbc29d9688f76", "filename": "gcc/testsuite/c-c++-common/asan/sanitize-all-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fsanitize-all-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fsanitize-all-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fsanitize-all-1.c?ref=fb153d02da077fb18f52372dab68a8cc52ea3a54", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-sanitize=all\" } */\n+\n+volatile int ten = 10;\n+\n+int main() {\n+  volatile char x[10];\n+  x[ten];\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"__asan_load\" } } */"}, {"sha": "9ffba50443ae0afad7491688c5be14de2a0de6af", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-all-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-1.c?ref=fb153d02da077fb18f52372dab68a8cc52ea3a54", "patch": "@@ -0,0 +1,8 @@\n+/* Test -f*sanitize*=all */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n+/* { dg-options \"-fsanitize=all\" } */\n+\n+int i;\n+\n+/* { dg-error \"-fsanitize=all option is not valid\" \"\" { target *-*-* } 0 } */"}, {"sha": "6ae6f3c233f74208d665400af1aff7194a0dbd49", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-all-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-2.c?ref=fb153d02da077fb18f52372dab68a8cc52ea3a54", "patch": "@@ -0,0 +1,41 @@\n+/* Test -f*sanitize*=all */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto -fno-fat-lto-objects\" } } */\n+/* { dg-options \"-fsanitize=undefined,float-cast-overflow,float-divide-by-zero -fno-sanitize=all -fdump-tree-optimized\" } */\n+\n+int a[4];\n+\n+int\n+f1 (int x, int y, int z)\n+{\n+  return a[x] + (1 << y) + (100 / z);\n+}\n+\n+char *\n+f2 (int x)\n+{\n+  char *p = (char *) __builtin_calloc (64, 1);\n+  p[x] = 3;\n+  return p;\n+}\n+\n+int\n+f3 (int x, int *y, double z, double w)\n+{\n+  int a[*y];\n+  if (x)\n+    __builtin_unreachable ();\n+  asm volatile (\"\" : : \"r\" (&a[0]));\n+  return z / w;\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__ubsan_\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"UBSAN_CHECK_\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "9be62acdbe9eb707bbfdf2d5bded9fdc29a262f8", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-all-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-3.c?ref=fb153d02da077fb18f52372dab68a8cc52ea3a54", "patch": "@@ -0,0 +1,42 @@\n+/* Test -f*sanitize*=all */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto -fno-fat-lto-objects\" } } */\n+/* { dg-options \"-fsanitize=undefined -fsanitize-recover=all -fdump-tree-optimized\" } */\n+\n+int a[4];\n+\n+int\n+f1 (int x, int y, int z)\n+{\n+  return a[x] + (1 << y) + (100 / z);\n+}\n+\n+char *\n+f2 (int x)\n+{\n+  char *p = (char *) __builtin_calloc (64, 1);\n+  p[x] = 3;\n+  return p;\n+}\n+\n+int\n+f3 (int x, int *y, double z, double w)\n+{\n+  int a[*y];\n+  if (x)\n+    __builtin_unreachable ();\n+  asm volatile (\"\" : : \"r\" (&a[0]));\n+  return z / w;\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"__ubsan_\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__ubsan_\\[a-z_\\]*_abort\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"UBSAN_CHECK_\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "1f7ec2b53f3406ad9bdde7e30cec7c596af8c79a", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-all-4.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb153d02da077fb18f52372dab68a8cc52ea3a54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-all-4.c?ref=fb153d02da077fb18f52372dab68a8cc52ea3a54", "patch": "@@ -0,0 +1,42 @@\n+/* Test -f*sanitize*=all */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto -fno-fat-lto-objects\" } } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=all -fdump-tree-optimized\" } */\n+\n+int a[4];\n+\n+int\n+f1 (int x, int y, int z)\n+{\n+  return a[x] + (1 << y) + (100 / z);\n+}\n+\n+char *\n+f2 (int x)\n+{\n+  char *p = (char *) __builtin_calloc (64, 1);\n+  p[x] = 3;\n+  return p;\n+}\n+\n+int\n+f3 (int x, int *y, double z, double w)\n+{\n+  int a[*y];\n+  if (x)\n+    __builtin_unreachable ();\n+  asm volatile (\"\" : : \"r\" (&a[0]));\n+  return z / w;\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"__ubsan_\\[a-z_\\]*_abort\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__ubsan_\\[a-z_\\]*\\[^et\\] \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"UBSAN_CHECK_\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}