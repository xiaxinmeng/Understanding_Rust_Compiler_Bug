{"sha": "f6d012338bf87f427b7420f2f309963c29fe33ba", "node_id": "C_kwDOANBUbNoAKGY2ZDAxMjMzOGJmODdmNDI3Yjc0MjBmMmYzMDk5NjNjMjlmZTMzYmE", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-20T05:29:25Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-26T06:20:10Z"}, "message": "Try to resolve paths in threader without looking further back.\n\nSometimes we can solve a candidate path without having to recurse\nfurther back.  This can mostly happen in fully resolving mode, because\nwe can ask the ranger what the range on entry to the path is, but\nthere's no reason this can't always apply.  This one-liner removes\nthe fully-resolving restriction.\n\nI'm tickled pink to see how many things we now get quite early\nin the compilation.  I actually had to disable jump threading entirely\nfor a few tests because the early threader was catching things\ndisturbingly early.  Also, as Richi predicted, I saw a lot of pre-VRP\ncleanups happening.\n\nI was going to commit this as obvious, but I think the test changes\nmerit discussion.\n\nWe've been playing games with gcc.dg/tree-ssa/ssa-thread-11.c for quite\nsome time.  Every time a threading pass gets smarter, we push the\ncheck further down the pipeline.  We've officially run out of dumb\nthreading passes to disable ;-).  In the last year we've gone up from a\nhandful of threads, to 34 threads with the current combination of\noptions.  I doubt this is testing anything useful anymore, so I've\nremoved it.\n\nSimilarly for gcc.dg/tree-ssa/ssa-dom-thread-4.c.  We used to thread 3\njump threads, but they were disallowed because of loop rotation.  Then\nwe started catching more jump threads in VRP2 threading so we tested\nthere.  With this patch though, we triple the number of threads found\nfrom 11 to 31.  I believe this test has outlived its usefulness, and\nI've removed it.  Note that even though we have these outrageous\npossibilities for this test, the block copier ultimately chops them\ndown (23 survive though).\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c (back_threader::find_paths_to_names):\n\tAlways try to resolve path without looking back.\n\t* tree-ssa-threadupdate.c (dump_jump_thread): Indidicate whether\n\tedge is a back edge.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/graphite/scop-dsyr2k-2.c: Adjust for jump threading changes.\n\t* gcc.dg/graphite/scop-dsyr2k.c: Same.\n\t* gcc.dg/graphite/scop-dsyrk-2.c: Same.\n\t* gcc.dg/graphite/scop-dsyrk.c: Same.\n\t* gcc.dg/tree-ssa/pr20701.c: Same.\n\t* gcc.dg/tree-ssa/pr20702.c: Same.\n\t* gcc.dg/tree-ssa/pr21086.c: Same.\n\t* gcc.dg/tree-ssa/pr25382.c: Same.\n\t* gcc.dg/tree-ssa/pr58480.c: Same.\n\t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: Same.\n\t* gcc.dg/tree-ssa/vrp08.c: Same.\n\t* gcc.dg/tree-ssa/vrp55.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Removed.\n\t* gcc.dg/tree-ssa/ssa-thread-11.c: Removed.\n\t* gcc.dg/uninit-pr89230-1.c: xfail.", "tree": {"sha": "200193b9fcdb72bfbd2a9933007a7bbeb186f1c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/200193b9fcdb72bfbd2a9933007a7bbeb186f1c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6d012338bf87f427b7420f2f309963c29fe33ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d012338bf87f427b7420f2f309963c29fe33ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d012338bf87f427b7420f2f309963c29fe33ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d012338bf87f427b7420f2f309963c29fe33ba/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3dbd3f36d55178d0a9e4431043cbc950524969a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3dbd3f36d55178d0a9e4431043cbc950524969a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3dbd3f36d55178d0a9e4431043cbc950524969a"}], "stats": {"total": 180, "additions": 55, "deletions": 125}, "files": [{"sha": "42e23fc157e594c9826309b10798b600a2a5d800", "filename": "gcc/testsuite/gcc.dg/graphite/scop-dsyr2k-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k-2.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target size32plus } */\n+/* { dg-additional-options \"-fno-thread-jumps\" } */\n #define NMAX 3000\n \n static double a[NMAX][NMAX], b[NMAX][NMAX], c[NMAX][NMAX];"}, {"sha": "feb99358ac7fa1d422781d87fd0a6f47adee220d", "filename": "gcc/testsuite/gcc.dg/graphite/scop-dsyr2k.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target size32plus } */\n+/* { dg-additional-options \"-fno-thread-jumps\" } */\n #define NMAX 3000\n \n static double a[NMAX][NMAX], b[NMAX][NMAX], c[NMAX][NMAX];"}, {"sha": "935ade3fb6ecc3578a4d8e67fddef66e5c8c9f75", "filename": "gcc/testsuite/gcc.dg/graphite/scop-dsyrk-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk-2.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target size32plus } */\n+/* { dg-additional-options \"-fno-thread-jumps\" } */\n #define NMAX 3000\n #define MEASURE_TIME 1\n "}, {"sha": "5c65e406589093e3489449c431ad4e1677504647", "filename": "gcc/testsuite/gcc.dg/graphite/scop-dsyrk.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target size32plus } */\n+/* { dg-additional-options \"-fno-thread-jumps\" } */\n #define NMAX 3000\n #define MEASURE_TIME 1\n "}, {"sha": "496c42567334b539d7127429dd741703ec9b90f4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20701.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining -fdelete-null-pointer-checks -fdisable-tree-thread1\" } */\n \n typedef struct {\n   int code;"}, {"sha": "81129674d8af33bc16155ee13aa61633a5b67e73", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20702.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -4,7 +4,7 @@\n    immediate successors of the basic block.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdisable-tree-evrp -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fno-thread-jumps -fdisable-tree-evrp -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n \n extern void bar (int);\n "}, {"sha": "9b93d39d4e440a6c46ebfd79ebb2c7c1bf74dd5e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21086.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdump-tree-dce2 -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fno-thread-jumps -fdisable-tree-evrp -fdump-tree-vrp1 -fdump-tree-dce2 -fdelete-null-pointer-checks\" } */\n \n int\n foo (int *p)"}, {"sha": "8634c0a78952812313fdababbb1c8169727151f7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr25382.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25382.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25382.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25382.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -3,7 +3,7 @@\n    Check that VRP now gets ranges from BIT_AND_EXPRs.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-ccp -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fno-thread-jumps -fno-tree-ccp -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n \n int\n foo (int a)"}, {"sha": "f11623b7c6b61c446d609f1c9e903b04c152c0ae", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr58480.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr58480.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr58480.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr58480.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { ! keeps_null_pointer_checks } } } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fno-thread-jumps -fdisable-tree-evrp -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n \n extern void eliminate (void);\n extern void* f1 (void *a, void *b) __attribute__((nonnull));"}, {"sha": "9cd463571c46a61d3c10eb37a4af4c6498568ccc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-4.c", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dbd3f36d55178d0a9e4431043cbc950524969a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dbd3f36d55178d0a9e4431043cbc950524969a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c?ref=f3dbd3f36d55178d0a9e4431043cbc950524969a", "patch": "@@ -1,60 +0,0 @@\n-/* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp-thread2-details -fdump-tree-dom2-details -std=gnu89 --param logical-op-non-short-circuit=1\" } */\n-struct bitmap_head_def;\n-typedef struct bitmap_head_def *bitmap;\n-typedef const struct bitmap_head_def *const_bitmap;\n-typedef unsigned long BITMAP_WORD;\n-typedef struct bitmap_element_def\n-{\n-  struct bitmap_element_def *next;\n-  unsigned int indx;\n-} bitmap_element;\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-unsigned char\n-bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n-\t\t      const_bitmap kill)\n-{\n-  unsigned char changed = 0;\n-\n-  bitmap_element *dst_elt;\n-  const bitmap_element *a_elt, *b_elt, *kill_elt, *dst_prev;\n-\n-  while (a_elt || b_elt)\n-    {\n-      unsigned char new_element = 0;\n-\n-      if (b_elt)\n-\twhile (kill_elt && kill_elt->indx < b_elt->indx)\n-\t  kill_elt = kill_elt->next;\n-\n-      if (b_elt && kill_elt && kill_elt->indx == b_elt->indx\n-\t  && (!a_elt || a_elt->indx >= b_elt->indx))\n-\t{\n-\t  bitmap_element tmp_elt;\n-\t  unsigned ix;\n-\n-\t  BITMAP_WORD ior = 0;\n-\n-\t      changed = bitmap_elt_ior (dst, dst_elt, dst_prev,\n-\t\t\t\t\ta_elt, &tmp_elt, changed);\n-\n-\t}\n-\n-    }\n-\n-\n-  return changed;\n-}\n-/* We used to catch 3 jump threads in vrp-thread1, but they all\n-   rotated the loop, so they were disallowed.  This in turn created\n-   other opportunities for the other threaders which result in the the\n-   post-loop threader (vrp-thread2) catching more.  */\n-/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 5 \"vrp-thread2\" } } */"}, {"sha": "ed252b97b24c23270442ea304c9ff8b66c55358c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-thread1-stats -fdump-tree-thread2-stats -fdump-tree-dom2-stats -fdump-tree-thread3-stats -fdump-tree-dom3-stats -fdump-tree-vrp2-stats -fno-guess-branch-probability\" } */\n \n-/* { dg-final { scan-tree-dump \"Jumps threaded: 12\"  \"thread3\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 11\" \"thread3\" } } */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom2\" } } */\n \n /* aarch64 has the highest CASE_VALUES_THRESHOLD in GCC.  It's high enough"}, {"sha": "672a54e07dbfb263a145057402ecfb1409cf0d38", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-11.c", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dbd3f36d55178d0a9e4431043cbc950524969a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dbd3f36d55178d0a9e4431043cbc950524969a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c?ref=f3dbd3f36d55178d0a9e4431043cbc950524969a", "patch": "@@ -1,50 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp2-details --param logical-op-non-short-circuit=1\" } */\n-/* { dg-additional-options \"-fdisable-tree-ethread -fdisable-tree-thread1 -fdisable-tree-thread2\" } */\n-/* { dg-final { scan-tree-dump-not \"IRREDUCIBLE_LOOP\" \"vrp2\" } } */\n-\n-void abort (void);\n-typedef struct bitmap_head_def *bitmap;\n-typedef const struct bitmap_head_def *const_bitmap;\n-typedef struct bitmap_obstack\n-{\n-  struct bitmap_obstack *next;\n-  unsigned int indx;\n-}\n-bitmap_element;\n-typedef struct bitmap_head_def\n-{\n-  bitmap_element *first;\n-}\n-bitmap_head;\n-static __inline__ unsigned char\n-bitmap_elt_ior (bitmap dst, bitmap_element * dst_elt,\n-\t\tbitmap_element * dst_prev, const bitmap_element * a_elt,\n-\t\tconst bitmap_element * b_elt)\n-{\n-  ((void) (!(a_elt || b_elt) ? abort (), 0 : 0));\n-}\n-\n-unsigned char\n-bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n-\t\t      const_bitmap kill)\n-{\n-  bitmap_element *dst_elt = dst->first;\n-  const bitmap_element *a_elt = a->first;\n-  const bitmap_element *b_elt = b->first;\n-  const bitmap_element *kill_elt = kill->first;\n-  bitmap_element *dst_prev = ((void *) 0);\n-  while (a_elt || b_elt)\n-    {\n-      if (b_elt && kill_elt && kill_elt->indx == b_elt->indx\n-\t  && (!a_elt || a_elt->indx >= b_elt->indx));\n-      else\n-\t{\n-\t  bitmap_elt_ior (dst, dst_elt, dst_prev, a_elt, b_elt);\n-\t  if (a_elt && b_elt && a_elt->indx == b_elt->indx)\n-\t    ;\n-\t  else if (a_elt && (!b_elt || a_elt->indx <= b_elt->indx))\n-\t    a_elt = a_elt->next;\n-\t}\n-    }\n-}"}, {"sha": "890a0ee10ec46f59a46748e784ede5f9e8ca2f27", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-backedge.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-backedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-backedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-backedge.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -fdisable-tree-ethread -fdisable-tree-thread1 -fdisable-tree-thread2 -fno-tree-dominator-opts -fdump-tree-thread3-details\" }\n+\n+// Test that we can thread jumps across the backedge of a loop through\n+// the switch statement to a particular case.\n+//\n+// Just in case, we disable all the jump threaders before loop\n+// optimizations to make sure we get a clean stab at this.\n+\n+int foo (unsigned int x, int s)\n+{\n+  while (s != 999)\n+    {\n+      switch (s)\n+\t{\n+\tcase 0:\n+\t  if (x)\n+\t    s = 1;\n+\t  break;\n+\tcase 1:\n+\t  if (x)\n+\t    s = 999;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      x++;\n+    }\n+  return s;\n+}\n+\n+// { dg-final { scan-tree-dump \"Registering jump thread:.*normal \\\\(back\\\\)\" \"thread3\" } }"}, {"sha": "f3ca140bd26eacdeb2e02c15c8f0ae42304392b4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-vrp-thread-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp-thread1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details -fdelete-null-pointer-checks\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n void oof (void);\n@@ -29,5 +29,5 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \n /* ARM Cortex-M defined LOGICAL_OP_NON_SHORT_CIRCUIT to false,\n    so skip below test.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 1 \"vrp-thread1\" { target { ! arm_cortex_m } } } } */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 1 \"thread1\" { target { ! arm_cortex_m } } } } */\n "}, {"sha": "2c6742b76c76fcf446c8a41c0fadb265a94421ff", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp08.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details -fdisable-tree-thread1 -fdelete-null-pointer-checks\" } */\n \n /* Compile with -fno-tree-fre -O2 to prevent CSEing *p.  */\n int"}, {"sha": "0ef57d935e4a0f6dd8137abe7141a437b59d4e73", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp55.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp55.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp-thread1-blocks-vops-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-ethread-details -fdelete-null-pointer-checks\" } */\n \n void arf (void);\n \n@@ -12,6 +12,6 @@ fu (char *p, int x)\n     arf ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 1 \"vrp-thread1\" { target { ! keeps_null_pointer_checks } } } } */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 0 \"vrp-thread1\" { target {   keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 1 \"ethread\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 0 \"ethread\" { target {   keeps_null_pointer_checks } } } } */\n "}, {"sha": "dfc87a5b1a0b27e9ff9413d178bce7a8413426e0", "filename": "gcc/testsuite/gcc.dg/uninit-pr89230-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr89230-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr89230-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr89230-1.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -8,7 +8,8 @@ struct S { int i, j; };\n \n int g (void)\n {\n-  struct S *p = f (), *q;\n+  struct S *p = f ();\n+  struct S *q; // { dg-bogus \"may be used uninitialized\" \"uninitialized\" { xfail *-*-* } }\n \n   if (p->i || !(q = f ()) || p->j != q->i)\n    {"}, {"sha": "edb396b3d6fcabdb14a2b00e63d4fc5e99fb1670", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -374,8 +374,8 @@ back_threader::find_paths_to_names (basic_block bb, bitmap interesting)\n       return false;\n     }\n \n-  // Try to resolve the path with nothing but ranger knowledge.\n-  if (m_resolve && m_path.length () > 1 && maybe_register_path ())\n+  // Try to resolve the path without looking back.\n+  if (m_path.length () > 1 && maybe_register_path ())\n     {\n       m_path.pop ();\n       m_visited_bbs.remove (bb);"}, {"sha": "8aac733ac2515b874a33f0b4d27016380af09329", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d012338bf87f427b7420f2f309963c29fe33ba/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=f6d012338bf87f427b7420f2f309963c29fe33ba", "patch": "@@ -253,6 +253,9 @@ dump_jump_thread_path (FILE *dump_file,\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n+\n+      if ((path[i]->e->flags & EDGE_DFS_BACK) != 0)\n+\tfprintf (dump_file, \" (back)\");\n     }\n   fprintf (dump_file, \"; \\n\");\n }"}]}