{"sha": "d9b120ce89f7198d1a82727f54e0563321a2cba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDliMTIwY2U4OWY3MTk4ZDFhODI3MjdmNTRlMDU2MzMyMWEyY2JhOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-08T04:29:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-08T04:29:46Z"}, "message": "compiler: don't add pointer twice to value method of direct interface type\n    \n    For a direct interface type T with a value method M, its pointer\n    type (*T)'s method table includes a stub method of M which takes\n    a (*T) as the receiver instead of a T. However, for the \"typ\"\n    field of the method table entry, we added another layer of\n    indirection, which makes it appear to take a **T, which is wrong.\n    This causes problems when using reflect.Type.Method to get the\n    method. This CL fixes the second, incorrect, indirection.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/175837\n\nFrom-SVN: r270999", "tree": {"sha": "bd930ed9851577570d81bfd24c362fca225da645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd930ed9851577570d81bfd24c362fca225da645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9b120ce89f7198d1a82727f54e0563321a2cba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b120ce89f7198d1a82727f54e0563321a2cba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b120ce89f7198d1a82727f54e0563321a2cba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b120ce89f7198d1a82727f54e0563321a2cba8/comments", "author": null, "committer": null, "parents": [{"sha": "8c4a4099743ad6040f88252ac99962503ddede3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c4a4099743ad6040f88252ac99962503ddede3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c4a4099743ad6040f88252ac99962503ddede3d"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "ed95dfd481d23744b14fdedb118d7336433093b5", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b120ce89f7198d1a82727f54e0563321a2cba8/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b120ce89f7198d1a82727f54e0563321a2cba8/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=d9b120ce89f7198d1a82727f54e0563321a2cba8", "patch": "@@ -1,4 +1,4 @@\n-dc9c1b43753f392fdc2045bcb7a4abaa44fe79f1\n+e3ba8828baf60343316bb68002e94570ee63ad1e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "371b65fc20effa9ceac80fbee190ae9577c4b21a", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9b120ce89f7198d1a82727f54e0563321a2cba8/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9b120ce89f7198d1a82727f54e0563321a2cba8/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=d9b120ce89f7198d1a82727f54e0563321a2cba8", "patch": "@@ -3440,14 +3440,15 @@ Type::method_constructor(Gogo*, Type* method_type,\n       vals->push_back(Expression::make_unary(OPERATOR_AND, s, bloc));\n     }\n \n-  Named_object* no =\n-    ((this->points_to() != NULL\n-      && this->points_to()->is_direct_iface_type()\n-      && m->is_value_method())\n-     ? m->iface_stub_object()\n-     : (m->needs_stub_method()\n-        ? m->stub_object()\n-        : m->named_object()));\n+  bool use_direct_iface_stub =\n+    this->points_to() != NULL\n+    && this->points_to()->is_direct_iface_type()\n+    && m->is_value_method();\n+  Named_object* no = (use_direct_iface_stub\n+                      ? m->iface_stub_object()\n+                      : (m->needs_stub_method()\n+                         ? m->stub_object()\n+                         : m->named_object()));\n \n   Function_type* mtype;\n   if (no->is_function())\n@@ -3463,7 +3464,8 @@ Type::method_constructor(Gogo*, Type* method_type,\n \n   ++p;\n   go_assert(p->is_field_name(\"typ\"));\n-  bool want_pointer_receiver = !only_value_methods && m->is_value_method();\n+  bool want_pointer_receiver = (!only_value_methods && m->is_value_method()\n+                                && !use_direct_iface_stub);\n   nonmethod_type = mtype->copy_with_receiver_as_param(want_pointer_receiver);\n   vals->push_back(Expression::make_type_descriptor(nonmethod_type, bloc));\n "}]}