{"sha": "9c582dbb57486afa5675217dd0cccf3ba5bea4eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1ODJkYmI1NzQ4NmFmYTU2NzUyMTdkZDBjY2NmM2JhNWJlYTRlYg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-07-10T21:21:51Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-07-10T21:21:51Z"}, "message": "PR tree-optimization/80397 - missing -Wformat-overflow with arguments of enum types\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/80397\n\t* gimple-ssa-sprintf.c (format_integer): Use INTEGRAL_TYPE_P()\n\tinstead of testing for equality to INTEGER_TYPE.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/80397\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-17.c: New test.\n\nFrom-SVN: r250106", "tree": {"sha": "d47b7b5eae64ee6e43db31eb4bbc5d91b92de41b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d47b7b5eae64ee6e43db31eb4bbc5d91b92de41b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c582dbb57486afa5675217dd0cccf3ba5bea4eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c582dbb57486afa5675217dd0cccf3ba5bea4eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c582dbb57486afa5675217dd0cccf3ba5bea4eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c582dbb57486afa5675217dd0cccf3ba5bea4eb/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2221d2bc678887616b5517c2e935480528556f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2221d2bc678887616b5517c2e935480528556f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2221d2bc678887616b5517c2e935480528556f0"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "1e671dba47671cd8d08b7eebba616aecab932a0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c582dbb57486afa5675217dd0cccf3ba5bea4eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c582dbb57486afa5675217dd0cccf3ba5bea4eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c582dbb57486afa5675217dd0cccf3ba5bea4eb", "patch": "@@ -1,3 +1,9 @@\n+2017-07-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/80397\n+\t* gimple-ssa-sprintf.c (format_integer): Use INTEGRAL_TYPE_P()\n+\tinstead of testing for equality to INTEGER_TYPE.\n+\n 2017-07-10  Vineet Gupta <vgupta@synopsys.com>\n \n \t* config.gcc: Remove uclibc from arc target spec."}, {"sha": "644cf7e33b1f92f1730c5fd49f32ff603565464b", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c582dbb57486afa5675217dd0cccf3ba5bea4eb/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c582dbb57486afa5675217dd0cccf3ba5bea4eb/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=9c582dbb57486afa5675217dd0cccf3ba5bea4eb", "patch": "@@ -1407,7 +1407,7 @@ format_integer (const directive &dir, tree arg)\n \n       return res;\n     }\n-  else if (TREE_CODE (TREE_TYPE (arg)) == INTEGER_TYPE\n+  else if (INTEGRAL_TYPE_P (TREE_TYPE (arg))\n \t   || TREE_CODE (TREE_TYPE (arg)) == POINTER_TYPE)\n     /* Determine the type of the provided non-constant argument.  */\n     argtype = TREE_TYPE (arg);\n@@ -1427,7 +1427,7 @@ format_integer (const directive &dir, tree arg)\n \n   if (arg\n       && TREE_CODE (arg) == SSA_NAME\n-      && TREE_CODE (argtype) == INTEGER_TYPE)\n+      && INTEGRAL_TYPE_P (argtype))\n     {\n       /* Try to determine the range of values of the integer argument\n \t (range information is not available for pointers).  */\n@@ -1472,7 +1472,7 @@ format_integer (const directive &dir, tree arg)\n \t      if (code == NOP_EXPR)\n \t\t{\n \t\t  tree type = TREE_TYPE (gimple_assign_rhs1 (def));\n-\t\t  if (TREE_CODE (type) == INTEGER_TYPE\n+\t\t  if (INTEGRAL_TYPE_P (type)\n \t\t      || TREE_CODE (type) == POINTER_TYPE)\n \t\t    argtype = type;\n \t\t}"}, {"sha": "f3b325c9f8d63a945a1f36e229350cafea04183b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c582dbb57486afa5675217dd0cccf3ba5bea4eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c582dbb57486afa5675217dd0cccf3ba5bea4eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c582dbb57486afa5675217dd0cccf3ba5bea4eb", "patch": "@@ -1,3 +1,13 @@\n+2017-07-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/80397\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-17.c: New test.\n+diff --git a/gcc/gimple-ssa-sprintf.c b/gcc/gimple-ssa-sprintf.c\n+index 2e62086..d63d5be 100644\n+--- a/gcc/gimple-ssa-sprintf.c\n++++ b/gcc/gimple-ssa-sprintf.c\n+@@ -1249,7 +1249,7 @@ format_integer (const directive &dir, tree arg)\n+\n 2017-07-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR other/81345"}, {"sha": "e0439384dd75bf1f3d0eae55321d9ba670fd867e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-19.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c582dbb57486afa5675217dd0cccf3ba5bea4eb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c582dbb57486afa5675217dd0cccf3ba5bea4eb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-19.c?ref=9c582dbb57486afa5675217dd0cccf3ba5bea4eb", "patch": "@@ -0,0 +1,62 @@\n+/* PR tree-optimization/80397 - missing -Wformat-overflow with arguments\n+   of enum types\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Wformat-overflow=1 -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target int32plus } */\n+\n+void sink (char*);\n+\n+long long integer_range (long long min, long long max)\n+{\n+  extern long long integer_value (void);\n+  long long n = integer_value ();\n+  return n < min || max < n ? min : n;\n+}\n+\n+typedef enum { i0, imax = __INT_MAX__ } Int;\n+typedef enum { ll0, llmax = __LONG_LONG_MAX__ } LLong;\n+\n+#define R(T, min, max) (T)integer_range (min, max)\n+\n+char buffer[1];\n+#define T(fmt, ...)\t\t\t\t\t\t\\\n+  __builtin_sprintf (buffer + 1, fmt, __VA_ARGS__), sink (buffer)\n+\n+void test_bool (_Bool b)\n+{\n+  T (\"%hhi\", b);   // { dg-warning \"writing 1 byte\" }\n+  T ( \"%hi\", b);   // { dg-warning \"writing 1 byte\" }\n+  T (  \"%i\", b);   // { dg-warning \"writing 1 byte\" }\n+}\n+\n+void test_enum (void)\n+{\n+  T (\"%hhi\", R (Int,    1,     1));   // { dg-warning \"writing 1 byte\" }\n+  T (\"%hhi\", R (Int,    1,    22));   // { dg-warning \"between 1 and 2 bytes\" }\n+\n+  T ( \"%hi\", R (Int,    1,     2));   // { dg-warning \"writing 1 \" }\n+  T ( \"%hi\", R (Int,    1,    22));   // { dg-warning \"between 1 and 2 \" }\n+  T ( \"%hi\", R (Int,   22,   333));   // { dg-warning \"between 2 and 3 \" }\n+  T ( \"%hi\", R (Int,  333,  4444));   // { dg-warning \"between 3 and 4 \" }\n+\n+  T (  \"%i\", R (Int,    1,     1));   // { dg-warning \"writing 1 \" }\n+  T (  \"%i\", R (Int,    1,    22));   // { dg-warning \"between 1 and 2 \" }\n+  T (  \"%i\", R (Int,   22,   333));   // { dg-warning \"between 2 and 3 \" }\n+  T (  \"%i\", R (Int,  333,  4444));   // { dg-warning \"between 3 and 4 \" }\n+  T (  \"%i\", R (Int, 4444, 55555));   // { dg-warning \"between 4 and 5 \" }\n+\n+#if __LONG_MAX__ == __LONG_LONG_MAX__\n+#  define LLI \"%li\"\n+#else\n+#  define LLI \"%lli\"\n+#endif\n+\n+  T (LLI, R (LLong,    1,     1));       // { dg-warning \"writing 1 \" }\n+  T (LLI, R (LLong,    1,    22));       // { dg-warning \"between 1 and 2 \" }\n+  T (LLI, R (LLong,   22,   333));       // { dg-warning \"between 2 and 3 \" }\n+  T (LLI, R (LLong,  333,  4444));       // { dg-warning \"between 3 and 4 \" }\n+  T (LLI, R (LLong, 4444, 55555));       // { dg-warning \"between 4 and 5 \" }\n+\n+  T (LLI, R (LLong, 4444, 1234567890));  // { dg-warning \"between 4 and 10 \" }\n+  T (LLI, R (LLong, 4444, 12345678901)); // { dg-warning \"between 4 and 11 \" }\n+}"}]}