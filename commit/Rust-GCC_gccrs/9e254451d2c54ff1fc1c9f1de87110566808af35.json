{"sha": "9e254451d2c54ff1fc1c9f1de87110566808af35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyNTQ0NTFkMmM1NGZmMWZjMWM5ZjFkZTg3MTEwNTY2ODA4YWYzNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-08-01T21:16:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-08-01T21:16:31Z"}, "message": "Makefile.in (RTL_BASE_H): Add real.h.\n\n        * Makefile.in (RTL_BASE_H): Add real.h.\n        * real.h (REAL_VALUE_FROM_CONST_DOUBLE): Use structure copy\n        instead of memcpy.\n        * emit-rtl.c (const_double_from_real_value): Likewise; use rtx.u.rv\n        directly.\n        * rtl.c (rtl_check_failed_code_mode): New.\n        * rtl.h (struct rtx_def): Add u.rv.\n        (XCMWINT, XCNMPRV): New.\n        (CONST_DOUBLE_LOW, CONST_DOUBLE_HIGH): Use XCMWINT.\n        (CONST_DOUBLE_REAL_VALUE): Use XCNMPRV; constify.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r102643", "tree": {"sha": "34ac4d017689743b8d8c8016d3db1ede47484578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ac4d017689743b8d8c8016d3db1ede47484578"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e254451d2c54ff1fc1c9f1de87110566808af35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e254451d2c54ff1fc1c9f1de87110566808af35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e254451d2c54ff1fc1c9f1de87110566808af35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e254451d2c54ff1fc1c9f1de87110566808af35/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e9d09007dfa95afa0b3cf979a8b36be46174850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9d09007dfa95afa0b3cf979a8b36be46174850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9d09007dfa95afa0b3cf979a8b36be46174850"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "cbc564b5388ce8168f64216b76675d933e0798d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e254451d2c54ff1fc1c9f1de87110566808af35", "patch": "@@ -1,3 +1,17 @@\n+2005-08-01  Ian Lance Taylor  <ian@airs.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* Makefile.in (RTL_BASE_H): Add real.h.\n+\t* real.h (REAL_VALUE_FROM_CONST_DOUBLE): Use structure copy\n+\tinstead of memcpy.\n+\t* emit-rtl.c (const_double_from_real_value): Likewise; use rtx.u.rv\n+\tdirectly.\n+\t* rtl.c (rtl_check_failed_code_mode): New.\n+\t* rtl.h (struct rtx_def): Add u.rv.\n+\t(XCMWINT, XCNMPRV): New.\n+\t(CONST_DOUBLE_LOW, CONST_DOUBLE_HIGH): Use XCMWINT.\n+\t(CONST_DOUBLE_REAL_VALUE): Use XCNMPRV; constify.\n+\n 2005-08-01  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (mem_loc_descriptor): Use XEXP, not SUBREG_REG,"}, {"sha": "ab3a1640b9866a2785a0322f20250495b4dd0b07", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9e254451d2c54ff1fc1c9f1de87110566808af35", "patch": "@@ -716,7 +716,7 @@ HOSTHOOKS_DEF_H = hosthooks-def.h $(HOOKS_H)\n LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h $(HOOKS_H)\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H) reg-notes.def insn-notes.def \\\n-  input.h statistics.h\n+  input.h real.h statistics.h\n RTL_H = $(RTL_BASE_H) genrtl.h\n PARAMS_H = params.h params.def\n TREE_H = tree.h tree.def $(MACHMODE_H) tree-check.h builtins.def \\"}, {"sha": "01a224f3b32b341fcfa71ed139d1aa8c8e9b1592", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=9e254451d2c54ff1fc1c9f1de87110566808af35", "patch": "@@ -426,7 +426,7 @@ const_double_from_real_value (REAL_VALUE_TYPE value, enum machine_mode mode)\n   rtx real = rtx_alloc (CONST_DOUBLE);\n   PUT_MODE (real, mode);\n \n-  memcpy (&CONST_DOUBLE_LOW (real), &value, sizeof (REAL_VALUE_TYPE));\n+  real->u.rv = value;\n \n   return lookup_const_double (real);\n }"}, {"sha": "23605639db94865e718abdfbdae9e4e82209a705", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=9e254451d2c54ff1fc1c9f1de87110566808af35", "patch": "@@ -364,7 +364,7 @@ REAL_VALUE_TYPE real_value_from_int_cst (tree, tree);\n \n /* Given a CONST_DOUBLE in FROM, store into TO the value it represents.  */\n #define REAL_VALUE_FROM_CONST_DOUBLE(to, from) \\\n-  memcpy (&(to), &CONST_DOUBLE_LOW ((from)), sizeof (REAL_VALUE_TYPE))\n+  ((to) = *CONST_DOUBLE_REAL_VALUE (from))\n \n /* Return a CONST_DOUBLE with value R and mode M.  */\n #define CONST_DOUBLE_FROM_REAL_VALUE(r, m) \\"}, {"sha": "eee870cb0d27bbb21f246ab1859e9124cf13013c", "filename": "gcc/rtl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=9e254451d2c54ff1fc1c9f1de87110566808af35", "patch": "@@ -515,6 +515,21 @@ rtl_check_failed_code2 (rtx r, enum rtx_code code1, enum rtx_code code2,\n      func, trim_filename (file), line);\n }\n \n+void\n+rtl_check_failed_code_mode (rtx r, enum rtx_code code, enum machine_mode mode,\n+\t\t\t    bool not_mode, const char *file, int line,\n+\t\t\t    const char *func)\n+{\n+  internal_error ((not_mode\n+\t\t   ? (\"RTL check: expected code '%s' and not mode '%s', \"\n+\t\t      \"have code '%s' and mode '%s' in %s, at %s:%d\")\n+\t\t   : (\"RTL check: expected code '%s' and mode '%s', \"\n+\t\t      \"have code '%s' and mode '%s' in %s, at %s:%d\")),\n+\t\t  GET_RTX_NAME (code), GET_MODE_NAME (mode),\n+\t\t  GET_RTX_NAME (GET_CODE (r)), GET_MODE_NAME (GET_MODE (r)),\n+\t\t  func, trim_filename (file), line);\n+}\n+\n /* XXX Maybe print the vector?  */\n void\n rtvec_check_failed_bounds (rtvec r, int n, const char *file, int line,"}, {"sha": "3b47e24d5098dd61714ca95cfbba51ef38696e4f", "filename": "gcc/rtl.h", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e254451d2c54ff1fc1c9f1de87110566808af35/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9e254451d2c54ff1fc1c9f1de87110566808af35", "patch": "@@ -25,6 +25,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"statistics.h\"\n #include \"machmode.h\"\n #include \"input.h\"\n+#include \"real.h\"\n \n #undef FFS  /* Some systems predefine this symbol; don't let it interfere.  */\n #undef FLOAT /* Likewise.  */\n@@ -249,6 +250,7 @@ struct rtx_def GTY((chain_next (\"RTX_NEXT (&%h)\"),\n   union u {\n     rtunion fld[1];\n     HOST_WIDE_INT hwint[1];\n+    struct real_value rv;\n   } GTY ((special (\"rtx_def\"), desc (\"GET_CODE (&%0)\"))) u;\n };\n \n@@ -454,6 +456,20 @@ struct rtvec_def GTY(()) {\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n      &_rtx->u.hwint[N]; }))\n \n+#define XCMWINT(RTX, N, C, M) __extension__\t\t\t\t\\\n+(*({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+     if (GET_CODE (_rtx) != (C) || GET_MODE (_rtx) != (M))\t\t\\\n+       rtl_check_failed_code_mode (_rtx, (C), (M), false, __FILE__,\t\\\n+\t\t\t\t   __LINE__, __FUNCTION__);\t\t\\\n+     &_rtx->u.hwint[N]; }))\n+\n+#define XCNMPRV(RTX, C, M) __extension__\t\t\t\t\\\n+({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+   if (GET_CODE (_rtx) != (C) || GET_MODE (_rtx) == (M))\t\t\\\n+     rtl_check_failed_code_mode (_rtx, (C), (M), true, __FILE__,\t\\\n+\t\t\t\t __LINE__, __FUNCTION__);\t\t\\\n+   &_rtx->u.rv; })\n+\n extern void rtl_check_failed_bounds (rtx, int, const char *, int,\n \t\t\t\t     const char *)\n     ATTRIBUTE_NORETURN;\n@@ -469,6 +485,9 @@ extern void rtl_check_failed_code1 (rtx, enum rtx_code, const char *,\n extern void rtl_check_failed_code2 (rtx, enum rtx_code, enum rtx_code,\n \t\t\t\t    const char *, int, const char *)\n     ATTRIBUTE_NORETURN;\n+extern void rtl_check_failed_code_mode (rtx, enum rtx_code, enum machine_mode,\n+\t\t\t\t\tbool, const char *, int, const char *)\n+    ATTRIBUTE_NORETURN;\n extern void rtvec_check_failed_bounds (rtvec, int, const char *, int,\n \t\t\t\t       const char *)\n     ATTRIBUTE_NORETURN;\n@@ -482,6 +501,9 @@ extern void rtvec_check_failed_bounds (rtvec, int, const char *, int,\n #define RTVEC_ELT(RTVEC, I)\t    ((RTVEC)->elem[I])\n #define XWINT(RTX, N)\t\t    ((RTX)->u.hwint[N])\n #define XCWINT(RTX, N, C)\t    ((RTX)->u.hwint[N])\n+#define XCMWINT(RTX, N, C, M)\t    ((RTX)->u.hwint[N])\n+#define XCNMWINT(RTX, N, C, M)\t    ((RTX)->u.hwint[N])\n+#define XCNMPRV(RTX, C, M)\t    (&(RTX)->u.rv)\n \n #endif\n \n@@ -916,9 +938,10 @@ enum label_kind\n      low-order word and ..._HIGH the high-order.\n    For a float, there is a REAL_VALUE_TYPE structure, and\n      CONST_DOUBLE_REAL_VALUE(r) is a pointer to it.  */\n-#define CONST_DOUBLE_LOW(r) XCWINT (r, 0, CONST_DOUBLE)\n-#define CONST_DOUBLE_HIGH(r) XCWINT (r, 1, CONST_DOUBLE)\n-#define CONST_DOUBLE_REAL_VALUE(r) ((struct real_value *)&CONST_DOUBLE_LOW(r))\n+#define CONST_DOUBLE_LOW(r) XCMWINT (r, 0, CONST_DOUBLE, VOIDmode)\n+#define CONST_DOUBLE_HIGH(r) XCMWINT (r, 1, CONST_DOUBLE, VOIDmode)\n+#define CONST_DOUBLE_REAL_VALUE(r) \\\n+  ((const struct real_value *) XCNMPRV (r, CONST_DOUBLE, VOIDmode))\n \n /* For a CONST_VECTOR, return element #n.  */\n #define CONST_VECTOR_ELT(RTX, N) XCVECEXP (RTX, 0, N, CONST_VECTOR)"}]}