{"sha": "cecc73af4980004502f4c327b6c639125defb379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjYzczYWY0OTgwMDA0NTAyZjRjMzI3YjZjNjM5MTI1ZGVmYjM3OQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-05T18:22:35Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-05T19:51:08Z"}, "message": "c++: Make braced-init-list as template arg work with aggr init [PR95369]\n\nBarry pointed out to me that our braced-init-list as a template-argument\nextension doesn't work as expected when we aggregate-initialize.  Since\naggregate list-initialization is a user-defined conversion sequence, we\nallow it as part of a converted constant expression.\n\nCo-authored-by: Jason Merrill <jason@redhat.com>\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95369\n\t* call.c (build_converted_constant_expr_internal): Allow\n\tlist-initialization.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95369\n\t* g++.dg/cpp2a/nontype-class38.C: New test.", "tree": {"sha": "a15c8551d20854becb91364baad2b8bfa8d720c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a15c8551d20854becb91364baad2b8bfa8d720c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cecc73af4980004502f4c327b6c639125defb379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cecc73af4980004502f4c327b6c639125defb379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cecc73af4980004502f4c327b6c639125defb379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cecc73af4980004502f4c327b6c639125defb379/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcd96c9cce962ca5b2c6f8459597fb759f945ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd96c9cce962ca5b2c6f8459597fb759f945ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd96c9cce962ca5b2c6f8459597fb759f945ccf"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "3c97b9846e20d526c0ca9a5d7cefb7c4db64ea2c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecc73af4980004502f4c327b6c639125defb379/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecc73af4980004502f4c327b6c639125defb379/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=cecc73af4980004502f4c327b6c639125defb379", "patch": "@@ -4348,14 +4348,16 @@ build_converted_constant_expr_internal (tree type, tree expr,\n      and where the reference binding (if any) binds directly.  */\n \n   for (conversion *c = conv;\n-       conv && c->kind != ck_identity;\n+       c && c->kind != ck_identity;\n        c = next_conversion (c))\n     {\n       switch (c->kind)\n \t{\n \t  /* A conversion function is OK.  If it isn't constexpr, we'll\n \t     complain later that the argument isn't constant.  */\n \tcase ck_user:\n+\t  /* List-initialization is OK.  */\n+\tcase ck_aggr:\n \t  /* The lvalue-to-rvalue conversion is OK.  */\n \tcase ck_rvalue:\n \t  /* Array-to-pointer and function-to-pointer.  */"}, {"sha": "5b440fd1c9e8cdc40c6802ac6d29565e7173ab20", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class38.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecc73af4980004502f4c327b6c639125defb379/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecc73af4980004502f4c327b6c639125defb379/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class38.C?ref=cecc73af4980004502f4c327b6c639125defb379", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/95369\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  int a;\n+  int b;\n+};\n+\n+struct W {\n+  int i;\n+  S s;\n+};\n+\n+template <S p>\n+void fnc()\n+{\n+}\n+\n+template<S s> struct X { };\n+template<W w> struct Y { };\n+\n+void f()\n+{\n+  fnc<{ .a = 10, .b = 20 }>();\n+  fnc<{ 10, 20 }>();\n+  X<{ .a = 1, .b = 2 }> x;\n+  X<{ 1, 2 }> x2;\n+  // Brace elision is likely to be allowed.\n+  Y<{ 1, 2, 3 }> x3;\n+}"}]}