{"sha": "7a3f77d2a9a1ce40f15c192b60805947f4bcc58e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzZjc3ZDJhOWExY2U0MGYxNWMxOTJiNjA4MDU5NDdmNGJjYzU4ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:51:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:51:54Z"}, "message": "(Eval_Relational_Op): Use new Is_Known_Null flag to deal with case\n\tof null = null, now known true.\n\nFrom-SVN: r111106", "tree": {"sha": "d9d222c4b53f8f572d22d3f3a5a9cac3a070c9c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9d222c4b53f8f572d22d3f3a5a9cac3a070c9c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a3f77d2a9a1ce40f15c192b60805947f4bcc58e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3f77d2a9a1ce40f15c192b60805947f4bcc58e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3f77d2a9a1ce40f15c192b60805947f4bcc58e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3f77d2a9a1ce40f15c192b60805947f4bcc58e/comments", "author": null, "committer": null, "parents": [{"sha": "51c40324f3965ff95b3b2696ac10142d765aad41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c40324f3965ff95b3b2696ac10142d765aad41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c40324f3965ff95b3b2696ac10142d765aad41"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "65005de952b23fa25ee350fa83c03b77b0a45b90", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3f77d2a9a1ce40f15c192b60805947f4bcc58e/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3f77d2a9a1ce40f15c192b60805947f4bcc58e/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=7a3f77d2a9a1ce40f15c192b60805947f4bcc58e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2202,25 +2202,29 @@ package body Sem_Eval is\n             end if;\n          end;\n \n-      --  Another special case: comparisons against null for pointers that\n-      --  are known to be non-null. This is useful when migrating from Ada95\n-      --  code when non-null restrictions are added to type declarations and\n-      --  parameter specifications.\n+      --  Another special case: comparisons of access types, where one or both\n+      --  operands are known to be null, so the result can be determined.\n \n-      elsif Is_Access_Type (Typ)\n-        and then Comes_From_Source (N)\n-        and then\n-          ((Is_Entity_Name (Left)\n-             and then Is_Known_Non_Null (Entity (Left))\n-             and then Nkind (Right) = N_Null)\n-          or else\n-            (Is_Entity_Name (Right)\n-              and then Is_Known_Non_Null (Entity (Right))\n-              and then Nkind (Left) = N_Null))\n-      then\n-         Fold_Uint (N, Test (Nkind (N) = N_Op_Ne), False);\n-         Warn_On_Known_Condition (N);\n-         return;\n+      elsif Is_Access_Type (Typ) then\n+         if Known_Null (Left) then\n+            if Known_Null (Right) then\n+               Fold_Uint (N, Test (Nkind (N) = N_Op_Eq), False);\n+               Warn_On_Known_Condition (N);\n+               return;\n+\n+            elsif Known_Non_Null (Right) then\n+               Fold_Uint (N, Test (Nkind (N) = N_Op_Ne), False);\n+               Warn_On_Known_Condition (N);\n+               return;\n+            end if;\n+\n+         elsif Known_Non_Null (Left) then\n+            if Known_Null (Right) then\n+               Fold_Uint (N, Test (Nkind (N) = N_Op_Ne), False);\n+               Warn_On_Known_Condition (N);\n+               return;\n+            end if;\n+         end if;\n       end if;\n \n       --  Can only fold if type is scalar (don't fold string ops)\n@@ -4014,13 +4018,8 @@ package body Sem_Eval is\n       elsif\n          Has_Unknown_Discriminants (T1) /= Has_Unknown_Discriminants (T2)\n       then\n-         if Is_Generic_Actual_Type (T1)\n-           and then Etype (T1) = T2\n-         then\n-            return True;\n-         else\n-            return False;\n-         end if;\n+         return\n+           Is_Generic_Actual_Type (T1) or else Is_Generic_Actual_Type (T2);\n \n       --  Array type\n \n@@ -4060,11 +4059,13 @@ package body Sem_Eval is\n          if Can_Never_Be_Null (T1) /= Can_Never_Be_Null (T2) then\n             return False;\n \n-         elsif Ekind (T1) = E_Access_Subprogram_Type then\n+         elsif Ekind (T1) = E_Access_Subprogram_Type\n+           or else Ekind (T1) = E_Anonymous_Access_Subprogram_Type\n+         then\n             return\n               Subtype_Conformant\n                 (Designated_Type (T1),\n-                 Designated_Type (T1));\n+                 Designated_Type (T2));\n          else\n             return\n               Subtypes_Statically_Match"}]}