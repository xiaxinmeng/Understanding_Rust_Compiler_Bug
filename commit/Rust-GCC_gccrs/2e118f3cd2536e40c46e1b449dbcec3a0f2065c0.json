{"sha": "2e118f3cd2536e40c46e1b449dbcec3a0f2065c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxMThmM2NkMjUzNmU0MGM0NmUxYjQ0OWRiY2VjM2EwZjIwNjVjMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-12-15T22:50:18Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-12-15T22:50:18Z"}, "message": "decl2.c (decl_needed_p): When not optimizing, do not consider external decls as needed.\n\n\n\t* decl2.c (decl_needed_p): When not optimizing, do not consider external\n\tdecls as needed.\n\nFrom-SVN: r218769", "tree": {"sha": "c19ee228e68d4f368a2d2afdfe04d9e838523ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c19ee228e68d4f368a2d2afdfe04d9e838523ffc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e118f3cd2536e40c46e1b449dbcec3a0f2065c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e118f3cd2536e40c46e1b449dbcec3a0f2065c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e118f3cd2536e40c46e1b449dbcec3a0f2065c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e118f3cd2536e40c46e1b449dbcec3a0f2065c0/comments", "author": null, "committer": null, "parents": [{"sha": "daca16d1f07cdba2a6b8ac96e85cbd9c3b8b30bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daca16d1f07cdba2a6b8ac96e85cbd9c3b8b30bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daca16d1f07cdba2a6b8ac96e85cbd9c3b8b30bb"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "4c6043e24eb99758ba716b8bb6824369c4dc052b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e118f3cd2536e40c46e1b449dbcec3a0f2065c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e118f3cd2536e40c46e1b449dbcec3a0f2065c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e118f3cd2536e40c46e1b449dbcec3a0f2065c0", "patch": "@@ -1,3 +1,8 @@\n+2014-12-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* decl2.c (decl_needed_p): When not optimizing, do not consider external\n+\tdecls as needed.\n+\n 2014-12-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/64297"}, {"sha": "b2123f2decb47a437bde8c67ebdc718dc14e4ffa", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e118f3cd2536e40c46e1b449dbcec3a0f2065c0/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e118f3cd2536e40c46e1b449dbcec3a0f2065c0/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2e118f3cd2536e40c46e1b449dbcec3a0f2065c0", "patch": "@@ -1996,19 +1996,30 @@ decl_needed_p (tree decl)\n      COMDAT until that point.  */\n   gcc_assert (at_eof);\n \n-  /* All entities with external linkage that are not COMDAT should be\n+  /* All entities with external linkage that are not COMDAT/EXTERN should be\n      emitted; they may be referred to from other object files.  */\n-  if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl))\n+  if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_REALLY_EXTERN (decl))\n     return true;\n-  /* If this entity was used, let the back end see it; it will decide\n-     whether or not to emit it into the object file.  */\n-  if (TREE_USED (decl))\n-      return true;\n   /* Functions marked \"dllexport\" must be emitted so that they are\n      visible to other DLLs.  */\n   if (flag_keep_inline_dllexport\n       && lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (decl)))\n     return true;\n+\n+  /* When not optimizing, do not bother to produce definitions for extern\n+     symbols.  */\n+  if (DECL_REALLY_EXTERN (decl)\n+      && ((TREE_CODE (decl) != FUNCTION_DECL\n+\t   && !optimize)\n+\t  || (TREE_CODE (decl) == FUNCTION_DECL\n+\t      && !opt_for_fn (decl, optimize)))\n+      && !lookup_attribute (\"always_inline\", decl))\n+    return false;\n+\n+  /* If this entity was used, let the back end see it; it will decide\n+     whether or not to emit it into the object file.  */\n+  if (TREE_USED (decl))\n+      return true;\n   /* Virtual functions might be needed for devirtualization.  */\n   if (flag_devirtualize\n       && TREE_CODE (decl) == FUNCTION_DECL"}]}