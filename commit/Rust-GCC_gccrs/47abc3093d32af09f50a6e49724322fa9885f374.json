{"sha": "47abc3093d32af09f50a6e49724322fa9885f374", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhYmMzMDkzZDMyYWYwOWY1MGE2ZTQ5NzI0MzIyZmE5ODg1ZjM3NA==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-07-11T05:04:55Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-07-11T05:04:55Z"}, "message": "pa.md (adddi3): For 32-bit targets...\n\n\t* pa.md (adddi3): For 32-bit targets, force constants to a register\n\tif they don't fit in an 11-bit immediate.  Change insn predicate to\n\tarith11_operand.  Remove comment.\n\t* pa.c (cint_ok_for_move): Fix comment.\n\t(emit_move_sequence):  Don't directly split DImode constants on 32-bit\n\ttargets.\n\nFrom-SVN: r55389", "tree": {"sha": "b6f327c73f19c4f23ef3a77bc75d6bb6d0b784a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6f327c73f19c4f23ef3a77bc75d6bb6d0b784a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47abc3093d32af09f50a6e49724322fa9885f374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47abc3093d32af09f50a6e49724322fa9885f374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47abc3093d32af09f50a6e49724322fa9885f374", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47abc3093d32af09f50a6e49724322fa9885f374/comments", "author": null, "committer": null, "parents": [{"sha": "92ff302b2bbf33adfd6a37206e500d8202b28417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ff302b2bbf33adfd6a37206e500d8202b28417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ff302b2bbf33adfd6a37206e500d8202b28417"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "711a231eed6bc82d1404174e77694791dc141f2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47abc3093d32af09f50a6e49724322fa9885f374/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47abc3093d32af09f50a6e49724322fa9885f374/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47abc3093d32af09f50a6e49724322fa9885f374", "patch": "@@ -1,3 +1,12 @@\n+2002-07-11  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa.md (adddi3): For 32-bit targets, force constants to a register\n+\tif they don't fit in an 11-bit immediate.  Change insn predicate to\n+\tarith11_operand.  Remove comment.\n+\t* pa.c (cint_ok_for_move): Fix comment.\n+\t(emit_move_sequence):  Don't directly split DImode constants on 32-bit\n+\ttargets.\n+\n 2002-07-10  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c/2454"}, {"sha": "c06a7b45215aaf390be438e33cde92d601215abc", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47abc3093d32af09f50a6e49724322fa9885f374/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47abc3093d32af09f50a6e49724322fa9885f374/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=47abc3093d32af09f50a6e49724322fa9885f374", "patch": "@@ -442,7 +442,7 @@ reg_before_reload_operand (op, mode)\n   return 0;\n }\n \n-/* Accept any constant that can be moved in one instructions into a\n+/* Accept any constant that can be moved in one instruction into a\n    general register.  */\n int\n cint_ok_for_move (intval)\n@@ -1744,9 +1744,13 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t  else\n \t    temp = gen_reg_rtx (mode);\n \n-\t  if (GET_CODE (operand1) == CONST_INT)\n+\t  /* We don't directly split DImode constants on 32-bit targets\n+\t     because PLUS uses an 11-bit immediate and the insn sequence\n+\t     generated is not as efficient as the one using HIGH/LO_SUM.  */\n+\t  if (GET_CODE (operand1) == CONST_INT\n+\t      && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n \t    {\n-\t      /* Directly break constant into low and high parts.  This\n+\t      /* Directly break constant into high and low parts.  This\n \t\t provides better optimization opportunities because various\n \t\t passes recognize constants split with PLUS but not LO_SUM.\n \t\t We use a 14-bit signed low part except when the addition"}, {"sha": "10c0462b4e469ab439f369dacb126f29ca4ddb78", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47abc3093d32af09f50a6e49724322fa9885f374/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47abc3093d32af09f50a6e49724322fa9885f374/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=47abc3093d32af09f50a6e49724322fa9885f374", "patch": "@@ -3815,20 +3815,18 @@\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t (match_operand:DI 2 \"arith_operand\" \"\")))]\n   \"\"\n-  \"\")\n-\n-;; We allow arith_operand for operands2, even though strictly speaking it\n-;; we would prefer to us arith11_operand since that's what the hardware\n-;; can actually support.\n-;;\n-;; But the price of the extra reload in that case is worth the simplicity\n-;; we get by allowing a trivial adddi3 expander to be used for both\n-;; PA64 and PA32.\n+  \"\n+{\n+  if (!TARGET_64BIT\n+      && GET_CODE (operands[2]) == CONST_INT\n+      && !VAL_11_BITS_P (INTVAL (operands[2])))\n+    operands[2] = force_reg (DImode, operands[2]);\n+}\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n-\t\t (match_operand:DI 2 \"arith_operand\" \"rI\")))]\n+\t\t (match_operand:DI 2 \"arith11_operand\" \"rI\")))]\n   \"!TARGET_64BIT\"\n   \"*\n {"}]}