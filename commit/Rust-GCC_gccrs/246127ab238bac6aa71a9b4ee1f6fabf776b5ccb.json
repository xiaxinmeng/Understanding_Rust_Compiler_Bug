{"sha": "246127ab238bac6aa71a9b4ee1f6fabf776b5ccb", "node_id": "C_kwDOANBUbNoAKDI0NjEyN2FiMjM4YmFjNmFhNzFhOWI0ZWUxZjZmYWJmNzc2YjVjY2I", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-10T19:39:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-10T19:39:54Z"}, "message": "libgcc, i386: Add __fix{,uns}bfti and __float{,un}tibf [PR107703]\n\nWhile DI <-> BF conversions can be handled (and are) through\nDI <-> XF <-> BF and for narrower integral modes even sometimes\nthrough DF or SF, because XFmode has 64-bit mantissa and so all\nthe DImode values are exactly representable in XFmode.\nThat is not the case for TImode, and while e.g. the HF -> TI\nconversions are IMHO useless in libgcc, because HFmode has\n-65504.0f16, 65504.0f16 range, all the integers will be already\nrepresentable in SImode (or even HImode for unsigned) and so\nI think HF -> DI -> TI conversions are faster and valid,\nBFmode has roughly the same range as SFmode and so we absolutely need\nthe TI -> BF conversions to avoid double rounding.\n\nAs for BF -> TI conversions, they can be either also implemented\nin libgcc, or they can be implemented (as done in this commit)\nas BF -> SF -> TI conversions with the same code generation used\nelsewhere, just doing the 16-bit left shift of the bits - I think\nwe don't need to handle sNaNs during the BF -> SF part because\nSF -> TI (which is already a libcall too) will handle that too.\n\nThe BF -> SF -> TI path avoids wasting\n    32: 0000000000015e10   321 FUNC    GLOBAL DEFAULT   13 __fixbfti@@GCC_13.0.0\n    89: 0000000000015f60   299 FUNC    GLOBAL DEFAULT   13 __fixunsbfti@@GCC_13.0.0\n\n2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/107703\n\t* optabs.cc (expand_fix): For conversions from BFmode to integral,\n\tuse shifts to convert it to SFmode first and then convert SFmode\n\tto integral.\n\n\t* soft-fp/floattibf.c: New file.\n\t* soft-fp/floatuntibf.c: New file.\n\t* config/i386/libgcc-glibc.ver: Export __float{,un}tibf @ GCC_13.0.0.\n\t* config/i386/64/t-softfp (softfp_extras): Add floattibf and\n\tfloatuntibf.\n\t(CFLAGS-floattibf.c, CFLAGS-floatunstibf.c): Add -msse2.", "tree": {"sha": "19f2dd70c6885c304c5a5e4f9f0dfe9c19597a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19f2dd70c6885c304c5a5e4f9f0dfe9c19597a3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60b6f5c0a334db3f8f6dffaf0b9aab42fd5c54a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b6f5c0a334db3f8f6dffaf0b9aab42fd5c54a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b6f5c0a334db3f8f6dffaf0b9aab42fd5c54a2"}], "stats": {"total": 145, "additions": 142, "deletions": 3}, "files": [{"sha": "c725f357b7fc9de5eac905b03474ef72d2297375", "filename": "gcc/optabs.cc", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/gcc%2Foptabs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/gcc%2Foptabs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.cc?ref=246127ab238bac6aa71a9b4ee1f6fabf776b5ccb", "patch": "@@ -5674,7 +5674,21 @@ expand_fix (rtx to, rtx from, int unsignedp)\n \t    rtx_insn *last = get_last_insn ();\n \t    rtx from1 = from;\n \t    if (fmode != GET_MODE (from))\n-\t      from1 = convert_to_mode (fmode, from, 0);\n+\t      {\n+\t\tif (REAL_MODE_FORMAT (GET_MODE (from))\n+\t\t    == &arm_bfloat_half_format\n+\t\t    && REAL_MODE_FORMAT (fmode) == &ieee_single_format)\n+\t\t  /* The BF -> SF conversions can be just a shift, doesn't\n+\t\t     need to handle sNANs.  */\n+\t\t  {\n+\t\t    int save_flag_finite_math_only = flag_finite_math_only;\n+\t\t    flag_finite_math_only = true;\n+\t\t    from1 = convert_to_mode (fmode, from, 0);\n+\t\t    flag_finite_math_only = save_flag_finite_math_only;\n+\t\t  }\n+\t\telse\n+\t\t  from1 = convert_to_mode (fmode, from, 0);\n+\t      }\n \n \t    if (must_trunc)\n \t      {\n@@ -5746,7 +5760,21 @@ expand_fix (rtx to, rtx from, int unsignedp)\n \t    lab2 = gen_label_rtx ();\n \n \t    if (fmode != GET_MODE (from))\n-\t      from = convert_to_mode (fmode, from, 0);\n+\t      {\n+\t\tif (REAL_MODE_FORMAT (GET_MODE (from))\n+\t\t    == &arm_bfloat_half_format\n+\t\t    && REAL_MODE_FORMAT (fmode) == &ieee_single_format)\n+\t\t  /* The BF -> SF conversions can be just a shift, doesn't\n+\t\t     need to handle sNANs.  */\n+\t\t  {\n+\t\t    int save_flag_finite_math_only = flag_finite_math_only;\n+\t\t    flag_finite_math_only = true;\n+\t\t    from = convert_to_mode (fmode, from, 0);\n+\t\t    flag_finite_math_only = save_flag_finite_math_only;\n+\t\t  }\n+\t\telse\n+\t\t  from = convert_to_mode (fmode, from, 0);\n+\t      }\n \n \t    /* See if we need to do the subtraction.  */\n \t    do_pending_stack_adjust ();\n@@ -5790,6 +5818,22 @@ expand_fix (rtx to, rtx from, int unsignedp)\n \t  }\n       }\n \n+#ifdef HAVE_SFmode\n+  if (REAL_MODE_FORMAT (GET_MODE (from)) == &arm_bfloat_half_format\n+      && REAL_MODE_FORMAT (SFmode) == &ieee_single_format)\n+    /* We don't have BF -> TI library functions, use BF -> SF -> TI\n+       instead but the BF -> SF conversion can be just a shift, doesn't\n+       need to handle sNANs.  */\n+    {\n+      int save_flag_finite_math_only = flag_finite_math_only;\n+      flag_finite_math_only = true;\n+      from = convert_to_mode (SFmode, from, 0);\n+      flag_finite_math_only = save_flag_finite_math_only;\n+      expand_fix (to, from, unsignedp);\n+      return;\n+    }\n+#endif\n+\n   /* We can't do it with an insn, so use a library call.  But first ensure\n      that the mode of TO is at least as wide as SImode, since those are the\n      only library calls we know about.  */"}, {"sha": "197fa1131f3904207bcc3f0ae482cac395481d85", "filename": "libgcc/config/i386/64/t-softfp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/libgcc%2Fconfig%2Fi386%2F64%2Ft-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/libgcc%2Fconfig%2Fi386%2F64%2Ft-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2Ft-softfp?ref=246127ab238bac6aa71a9b4ee1f6fabf776b5ccb", "patch": "@@ -1,6 +1,9 @@\n-softfp_extras := fixhfti fixunshfti floattihf floatuntihf\n+softfp_extras := fixhfti fixunshfti floattihf floatuntihf \\\n+\t\t floattibf floatuntibf\n \n CFLAGS-fixhfti.c += -msse2\n CFLAGS-fixunshfti.c += -msse2\n CFLAGS-floattihf.c += -msse2\n CFLAGS-floatunstihf.c += -msse2\n+CFLAGS-floattibf.c += -msse2\n+CFLAGS-floatunstibf.c += -msse2"}, {"sha": "d84d075cf9f6a9d26eeae991838942040d5a5e76", "filename": "libgcc/config/i386/libgcc-glibc.ver", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver?ref=246127ab238bac6aa71a9b4ee1f6fabf776b5ccb", "patch": "@@ -218,6 +218,8 @@ GCC_12.0.0 {\n %inherit GCC_13.0.0 GCC_12.0.0\n GCC_13.0.0 {\n   __extendbfsf2\n+  __floattibf\n+  __floatuntibf\n   __truncdfbf2\n   __truncsfbf2\n   __trunctfbf2"}, {"sha": "f3336a95b06d133cf1317ba1be05da6d88d0cf5a", "filename": "libgcc/soft-fp/floattibf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/libgcc%2Fsoft-fp%2Ffloattibf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/libgcc%2Fsoft-fp%2Ffloattibf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloattibf.c?ref=246127ab238bac6aa71a9b4ee1f6fabf776b5ccb", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 128bit signed integer to bfloat16\n+   Copyright (C) 2007-2023 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <https://www.gnu.org/licenses/>.  */\n+\n+#include \"soft-fp.h\"\n+#include \"brain.h\"\n+\n+BFtype\n+__floattibf (TItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_B (A);\n+  BFtype a;\n+\n+  FP_INIT_ROUNDMODE;\n+  FP_FROM_INT_B (A, i, TI_BITS, UTItype);\n+  FP_PACK_RAW_B (a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}, {"sha": "362b0f6c1bb9a44d0ffeb180b534196cee5067e5", "filename": "libgcc/soft-fp/floatuntibf.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/libgcc%2Fsoft-fp%2Ffloatuntibf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246127ab238bac6aa71a9b4ee1f6fabf776b5ccb/libgcc%2Fsoft-fp%2Ffloatuntibf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatuntibf.c?ref=246127ab238bac6aa71a9b4ee1f6fabf776b5ccb", "patch": "@@ -0,0 +1,45 @@\n+/* Software floating-point emulation.\n+   Convert a 128bit unsigned integer to bfloat16\n+   Copyright (C) 2007-2023 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <https://www.gnu.org/licenses/>.  */\n+\n+#include \"soft-fp.h\"\n+#include \"brain.h\"\n+\n+BFtype\n+__floatuntibf (UTItype i)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_B (A);\n+  BFtype a;\n+\n+  FP_INIT_ROUNDMODE;\n+  FP_FROM_INT_B (A, i, TI_BITS, UTItype);\n+  FP_PACK_RAW_B (a, A);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return a;\n+}"}]}