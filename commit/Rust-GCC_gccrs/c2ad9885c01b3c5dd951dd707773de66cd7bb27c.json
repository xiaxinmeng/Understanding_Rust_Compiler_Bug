{"sha": "c2ad9885c01b3c5dd951dd707773de66cd7bb27c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhZDk4ODVjMDFiM2M1ZGQ5NTFkZDcwNzc3M2RlNjZjZDdiYjI3Yw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-11-15T00:18:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-11-15T00:18:45Z"}, "message": "vr-values.c: New file with contents extracted from tree-vrp.c.\n\n\t* vr-values.c: New file with contents extracted from tree-vrp.c.\n\t* Makefile.in (OBJS): Add vr-values.o\n\t* tree-vrp.h (set_value_range_to_nonnull): Prototype.\n\t(set_value_range, set_and_canonicalize_value_range): Likewise.\n\t(vrp_bitmap_equal_p, range_is_nonnull): Likewise.\n\t(value_range_constant_singleton, symbolic_range_p): Likewise.\n\t(compare_values, compare_values_warnv, vrp_val_is_min): Likewise.\n\t(vrp_val_is_max, copy_value_range, set_value_range_to_value): Likewise.\n\t(extract_range_from_binary_expr_1, vrp_val_min, vrp_val_max): Likewise.\n\t(set_value_range_to_null, range_int_cst_p, opreand_less_p): Likewise.\n\t(find_case_label_range, find_case_label_index): Likewise.\n\t(zero_nonzero_bits_from_vr, overflow_comparison_p): Likewise.\n\t(range_int_cst_singleton_p, value_inside_range): Likewise.\n\t(get_single_symbol): Likewise.\n\t(switch_update): Move structure definition here.\n\t(to_remove_edges, to_update_switch_stmts): Provide externs.\n\t* tree-vrp.c: Move all methods for vr-values class to vr-values.c\n\t(vrp_val_max, vrp_val_min, vrp_val_is_max): Make externally visible.\n\t(vrp_val_is_min, set_value_range): Likewise.\n\t(set_and_canonicalize_value_range, copy_value_range): Likewise.\n\t(set_value_range_to_value, set_value_range_to_nonnull): Likewise.\n\t(set_value_range_to_null, vrp_bitmap_equal_p): Likewise.\n\t(range_is_nonnull, range_int_cst_p): Likewwise.\n\t(range_int_cst_singleton_p, symbolic_range_p): Likewise.\n\t(get_single_symbol, operand_less_p): Likewise\n\t(compare_values_warnv, compare_values): Likewise.\n\t(value_inside_range, value_range_constant_singleton): Likewise.\n\t(zero_nonzero_bitgs_from_vr): Likewise.\n\t(extract_range_from_binary_expr_1): Likewise.\n\t(overflow_comparison_p): Likewise.\n\t(to_remove_edges, to_update_switch_stmts): Likewise.\n\t(find_case_label-index, find_case_label_range): Likewise.\n\t(switch_update, set_value_range_to_nonnegative): Remove.\n\t(set_value_range_to_truthvalue): Likewise.\n\t(symbolic_range_based_on_p, gimple_assign_nonzero_p): Likewise.\n\t(gimple_stmt_nonzero_p, compare_ranges): Likewise.\n\t(compare_range_with_value, vrp_valueize, vrp_valueize_1): Likewise.\n\t(find_case_label_ranges, test_for_singularity): Likewise.\n\t(range_fits_type_p, simplify_conversion_using_ranges): LIkewise.\n\t(x_vr_values): Move to its remaining use site.\n\nFrom-SVN: r254747", "tree": {"sha": "dec869e89716487e4c7d73f06a677ab74c3d6409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dec869e89716487e4c7d73f06a677ab74c3d6409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2ad9885c01b3c5dd951dd707773de66cd7bb27c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ad9885c01b3c5dd951dd707773de66cd7bb27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2ad9885c01b3c5dd951dd707773de66cd7bb27c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/comments", "author": null, "committer": null, "parents": [{"sha": "09ef7f4eda57ffb3c1bdcead45d691020fc250e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ef7f4eda57ffb3c1bdcead45d691020fc250e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09ef7f4eda57ffb3c1bdcead45d691020fc250e3"}], "stats": {"total": 14901, "additions": 7510, "deletions": 7391}, "files": [{"sha": "288e16347d555fe868d3467f8a2ae46bdbb4cad6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 58, "deletions": 15, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2ad9885c01b3c5dd951dd707773de66cd7bb27c", "patch": "@@ -1,3 +1,61 @@\n+2017-11-14  Jeff Law  <law@redhat.com>\n+\n+\t* vr-values.c: New file with contents extracted from tree-vrp.c.\n+\t* Makefile.in (OBJS): Add vr-values.o\n+\t* tree-vrp.h (set_value_range_to_nonnull): Prototype.\n+\t(set_value_range, set_and_canonicalize_value_range): Likewise.\n+\t(vrp_bitmap_equal_p, range_is_nonnull): Likewise.\n+\t(value_range_constant_singleton, symbolic_range_p): Likewise.\n+\t(compare_values, compare_values_warnv, vrp_val_is_min): Likewise.\n+\t(vrp_val_is_max, copy_value_range, set_value_range_to_value): Likewise.\n+\t(extract_range_from_binary_expr_1, vrp_val_min, vrp_val_max): Likewise.\n+\t(set_value_range_to_null, range_int_cst_p, opreand_less_p): Likewise.\n+\t(find_case_label_range, find_case_label_index): Likewise.\n+\t(zero_nonzero_bits_from_vr, overflow_comparison_p): Likewise.\n+\t(range_int_cst_singleton_p, value_inside_range): Likewise.\n+\t(get_single_symbol): Likewise.\n+\t(switch_update): Move structure definition here.\n+\t(to_remove_edges, to_update_switch_stmts): Provide externs.\n+\t* tree-vrp.c: Move all methods for vr-values class to vr-values.c\n+\t(vrp_val_max, vrp_val_min, vrp_val_is_max): Make externally visible.\n+\t(vrp_val_is_min, set_value_range): Likewise.\n+\t(set_and_canonicalize_value_range, copy_value_range): Likewise.\n+\t(set_value_range_to_value, set_value_range_to_nonnull): Likewise.\n+\t(set_value_range_to_null, vrp_bitmap_equal_p): Likewise.\n+\t(range_is_nonnull, range_int_cst_p): Likewwise.\n+\t(range_int_cst_singleton_p, symbolic_range_p): Likewise.\n+\t(get_single_symbol, operand_less_p): Likewise\n+\t(compare_values_warnv, compare_values): Likewise.\n+\t(value_inside_range, value_range_constant_singleton): Likewise.\n+\t(zero_nonzero_bitgs_from_vr): Likewise.\n+\t(extract_range_from_binary_expr_1): Likewise.\n+\t(overflow_comparison_p): Likewise.\n+\t(to_remove_edges, to_update_switch_stmts): Likewise.\n+\t(find_case_label-index, find_case_label_range): Likewise.\n+\t(switch_update, set_value_range_to_nonnegative): Remove.\n+\t(set_value_range_to_truthvalue): Likewise.\n+\t(symbolic_range_based_on_p, gimple_assign_nonzero_p): Likewise.\n+\t(gimple_stmt_nonzero_p, compare_ranges): Likewise.\n+\t(compare_range_with_value, vrp_valueize, vrp_valueize_1): Likewise.\n+\t(find_case_label_ranges, test_for_singularity): Likewise.\n+\t(range_fits_type_p, simplify_conversion_using_ranges): LIkewise.\n+\t(x_vr_values): Move to its remaining use site.\n+\n+2017-11-10  Jeff Law  <law@redhat.com>\n+\n+\t* vr-values.h (VR_INITIALIZER): Move #define here.\n+\t* gimple-ssa-evrp.c: New file with contents extracted from tree-vrp.c\n+\t* Makefile.in (OBJS): Add tree-evrp.o\n+\t* tree-vrp.h (assert_info): Move structure definition here.\n+\t(set_value_range_to_varying): Prototype.\n+\t(vrp_operand_equal_p, range_includes_zero_p): Likewise.\n+\t(infer_value_range, register_edge_assert_for): Likewise.\n+\t(stmt_interesting_for_vrp): Likewise.\n+\t* tree-vrp.c: Move all methods for evrp class into gimple-ssa-evrp.c.\n+\t(set_value_range_to_varying): No longer static.\n+\t(vrp_operand_equal_p, range_includes_zero_p): Likewise.\n+\t(infer_value_range, register_edge_assert_for): Likewise.\n+\n 2017-11-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.md (bswapdi2): On 32-bit ISA 3.0, don't\n@@ -430,21 +488,6 @@\n \twith memcpy.\n \t(find_subframework_file): Same.\n \n-2017-11-10  Jeff Law  <law@redhat.com>\n-\n-\t* vr-values.h (VR_INITIALIZER): Move #define here.\n-\t* gimple-ssa-evrp.c: New file with contents extracted from tree-vrp.c\n-\t* Makefile.in (OBJS): Add tree-evrp.o\n-\t* tree-vrp.h (assert_info): Move structure definition here.\n-\t(set_value_range_to_varying): Prototype.\n-\t(vrp_operand_equal_p, range_includes_zero_p): Likewise.\n-\t(infer_value_range, register_edge_assert_for): Likewise.\n-\t(stmt_interesting_for_vrp): Likewise.\n-\t* tree-vrp.c: Move all methods for evrp class into gimple-ssa-evrp.c.\n-\t(set_value_range_to_varying): No longer static.\n-\t(vrp_operand_equal_p, range_includes_zero_p): Likewise.\n-\t(infer_value_range, register_edge_assert_for): Likewise.\n-\n 2017-11-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* auto-profile.c (afdo_indirect_call): Drop frequency."}, {"sha": "5db78558c0ca5ba6e79fcdcf275cdb05911d768b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c2ad9885c01b3c5dd951dd707773de66cd7bb27c", "patch": "@@ -1577,6 +1577,7 @@ OBJS = \\\n \tvarasm.o \\\n \tvarpool.o \\\n \tvmsdbgout.o \\\n+\tvr-values.o \\\n \tvtable-verify.o \\\n \tweb.o \\\n \twide-int.o \\"}, {"sha": "945b3a9935e48e1b1944f9fba23bec44957aa476", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3226, "deletions": 7376, "changes": 10602, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c2ad9885c01b3c5dd951dd707773de66cd7bb27c"}, {"sha": "a0f72db2627f8345b075987abc56afa803d1420f", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=c2ad9885c01b3c5dd951dd707773de66cd7bb27c", "patch": "@@ -84,4 +84,46 @@ extern void set_value_range_to_varying (value_range *);\n extern int range_includes_zero_p (tree, tree);\n extern bool infer_value_range (gimple *, tree, tree_code *, tree *);\n \n+extern void set_value_range_to_nonnull (value_range *, tree);\n+extern void set_value_range (value_range *, enum value_range_type, tree,\n+\t\t\t     tree, bitmap);\n+extern void set_and_canonicalize_value_range (value_range *,\n+\t\t\t\t\t      enum value_range_type,\n+\t\t\t\t\t      tree, tree, bitmap);\n+extern bool vrp_bitmap_equal_p (const_bitmap, const_bitmap);\n+extern bool range_is_nonnull (value_range *);\n+extern tree value_range_constant_singleton (value_range *);\n+extern bool symbolic_range_p (value_range *);\n+extern int compare_values (tree, tree);\n+extern int compare_values_warnv (tree, tree, bool *);\n+extern bool vrp_val_is_min (const_tree);\n+extern bool vrp_val_is_max (const_tree);\n+extern void copy_value_range (value_range *, value_range *);\n+extern void set_value_range_to_value (value_range *, tree, bitmap);\n+extern void extract_range_from_binary_expr_1 (value_range *, enum tree_code,\n+\t\t\t\t\t      tree, value_range *,\n+\t\t\t\t\t      value_range *);\n+extern tree vrp_val_min (const_tree);\n+extern tree vrp_val_max (const_tree);\n+extern void set_value_range_to_null (value_range *, tree);\n+extern bool range_int_cst_p (value_range *);\n+extern int operand_less_p (tree, tree);\n+extern bool find_case_label_range (gswitch *, tree, tree, size_t *, size_t *);\n+extern bool find_case_label_index (gswitch *, size_t, tree, size_t *);\n+extern bool zero_nonzero_bits_from_vr (const tree, value_range *,\n+\t\t\t\t       wide_int *, wide_int *);\n+extern bool overflow_comparison_p (tree_code, tree, tree, bool, tree *);\n+extern bool range_int_cst_singleton_p (value_range *);\n+extern int value_inside_range (tree, tree, tree);\n+extern tree get_single_symbol (tree, bool *, tree *);\n+\n+\n+struct switch_update {\n+  gswitch *stmt;\n+  tree vec;\n+};\n+\n+extern vec<edge> to_remove_edges;\n+extern vec<switch_update> to_update_switch_stmts;\n+\n #endif /* GCC_TREE_VRP_H */"}, {"sha": "d4434ded75dfd0977bb0d72fdf8cdcfa533b0ad8", "filename": "gcc/vr-values.c", "status": "added", "additions": 4183, "deletions": 0, "changes": 4183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ad9885c01b3c5dd951dd707773de66cd7bb27c/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=c2ad9885c01b3c5dd951dd707773de66cd7bb27c"}]}