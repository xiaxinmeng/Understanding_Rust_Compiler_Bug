{"sha": "f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJiYzIwMWY1M2UyYjhiOWI5ZDA3MmI0MWM1MDk5ZWU4MjU2ODZmNA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-05-14T13:30:32Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-05-14T13:30:32Z"}, "message": "re PR c/53063 (encode group options in the .opt files)\n\n2012-05-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR 53063\nc-family/\n\t* c.opt (Wc++0X-compat,Wdelete-non-virtual-dtor,Wjump-misses-init,\n\tWreorder): Use LangEnabledBy.\n\t* c-opts.c (c_common_handle_option): Do not enable them\n\texplicitly. Call lang-specific generated functions.\n\t(c_common_post_options): Do not set them here.\ngcc/\n\t* doc/options.texi: (LangEnabledBy): Document it.\n\t* optc-gen.awk: Handle LangEnabledBy.\n\t* opth-gen.awk: Generate declaration for lang-specific functions.\n\t* opt-read.awk: Record lang numbers.\n\t* opt-functions.awk (flag_set_p): Ignore the arguments of flags.\n\t(lang_sanitized_name): New.\nada/\n\t* gcc-interface/misc.c: Include opts.h and options.h before tm.h.\n\t(gnat_handle_option): Call lang-specific generated function.\nfortran/\n\t* options.c (gfc_handle_option): Call lang-specific generated function.\n\nFrom-SVN: r187462", "tree": {"sha": "fc0863eee154e2d3cc964810f8b77726fbaa7a94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc0863eee154e2d3cc964810f8b77726fbaa7a94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/comments", "author": null, "committer": null, "parents": [{"sha": "e384e6b59c074ac936f0f3212ca33fe40f3d82f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e384e6b59c074ac936f0f3212ca33fe40f3d82f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e384e6b59c074ac936f0f3212ca33fe40f3d82f5"}], "stats": {"total": 244, "additions": 196, "deletions": 48}, "files": [{"sha": "9933288018fe430ecb1a8c1415780866944e973e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -1,3 +1,13 @@\n+2012-05-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 53063\n+\t* doc/options.texi: (LangEnabledBy): Document it.\n+\t* optc-gen.awk: Handle LangEnabledBy.\n+\t* opth-gen.awk: Generate declaration for lang-specific functions.\n+\t* opt-read.awk: Record lang numbers.\n+\t* opt-functions.awk (flag_set_p): Ignore the arguments of flags.\n+\t(lang_sanitized_name): New.\n+\n 2012-05-14  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* attribs.c (decl_attributes): Avoid emitting a warning if"}, {"sha": "63039c9ac0940eb9b33ef558f1096efeeb5436ca", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -1,3 +1,9 @@\n+2012-05-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 53063\n+\t* gcc-interface/misc.c: Include opts.h and options.h before tm.h.\n+\t(gnat_handle_option): Call lang-specific generated function.\n+\n 2012-05-13  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* gcc-interface/lang.opt (I): Comment out help text with no effect."}, {"sha": "f2002f577eec2d8256859f9bba9ae4d088be0a16", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -26,6 +26,8 @@\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"opts.h\"\n+#include \"options.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"diagnostic.h\"\n@@ -36,8 +38,6 @@\n #include \"toplev.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n-#include \"opts.h\"\n-#include \"options.h\"\n #include \"plugin.h\"\n #include \"real.h\"\n #include \"function.h\"\t/* For pass_by_reference.  */\n@@ -153,6 +153,10 @@ gnat_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED, int value,\n       gcc_unreachable ();\n     }\n \n+  Ada_handle_option_auto (&global_options, &global_options_set, \n+                          scode, arg, value, \n+                          gnat_option_lang_mask (), kind,\n+                          loc, handlers, global_dc);\n   return true;\n }\n "}, {"sha": "de50b2159610d0a55d4a9d7a3e3b7933054cf893", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -1,3 +1,12 @@\n+2012-05-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 53063\n+\t* c.opt (Wc++0X-compat,Wdelete-non-virtual-dtor,Wjump-misses-init,\n+\tWreorder): Use LangEnabledBy.\n+\t* c-opts.c (c_common_handle_option): Do not enable them\n+\texplicitly. Call lang-specific generated functions.\n+\t(c_common_post_options): Do not set them here.\n+\n 2012-05-13  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c.opt (Wclobbered,Wempty-body,Wignored-qualifiers,"}, {"sha": "a7fadc817aa473bdcf94d67715f39880ca1b14a8", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -397,19 +397,16 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \t  if (warn_main == -1)\n \t    warn_main = (value ? 2 : 0);\n \n-\t  /* In C, -Wall turns on -Wenum-compare, which we do here.\n-\t     In C++ it is on by default, which is done in\n-\t     c_common_post_options.  */\n+\t  /* In C, -Wall and -Wc++-compat turns on -Wenum-compare,\n+\t     which we do here.  In C++ it is on by default, which is\n+\t     done in c_common_post_options.  */\n           if (warn_enum_compare == -1)\n             warn_enum_compare = value;\n \t}\n       else\n \t{\n \t  /* C++-specific warnings.  */\n           warn_sign_compare = value;\n-\t  warn_reorder = value;\n-          warn_cxx0x_compat = value;\n-          warn_delnonvdtor = value;\n \t  warn_narrowing = value;\n \t}\n \n@@ -434,10 +431,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \t implies -Wenum-compare.  */\n       if (warn_enum_compare == -1 && value)\n \twarn_enum_compare = value;\n-      /* Because C++ always warns about a goto which misses an\n-\t initialization, -Wc++-compat turns on -Wjump-misses-init.  */\n-      if (warn_jump_misses_init == -1 && value)\n-\twarn_jump_misses_init = value;\n       cpp_opts->warn_cxx_operator_names = value;\n       break;\n \n@@ -836,6 +829,40 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n     }\n \n+  switch (c_language)\n+    {\n+    case clk_c:\n+      C_handle_option_auto (&global_options, &global_options_set, \n+                            scode, arg, value, \n+                            c_family_lang_mask, kind,\n+                            loc, handlers, global_dc);\n+      break;\n+\n+    case clk_objc:\n+      ObjC_handle_option_auto (&global_options, &global_options_set,\n+                               scode, arg, value, \n+                               c_family_lang_mask, kind,\n+                               loc, handlers, global_dc);\n+      break;\n+\n+    case clk_cxx:\n+      CXX_handle_option_auto (&global_options, &global_options_set,\n+                              scode, arg, value,\n+                              c_family_lang_mask, kind,\n+                              loc, handlers, global_dc);\n+      break;\n+\n+    case clk_objcxx:\n+      ObjCXX_handle_option_auto (&global_options, &global_options_set,\n+                                 scode, arg, value,\n+                                 c_family_lang_mask, kind,\n+                                 loc, handlers, global_dc);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \n   return result;\n }\n \n@@ -926,8 +953,6 @@ c_common_post_options (const char **pfilename)\n     warn_strict_aliasing = 0;\n   if (warn_strict_overflow == -1)\n     warn_strict_overflow = 0;\n-  if (warn_jump_misses_init == -1)\n-    warn_jump_misses_init = 0;\n \n   /* -Woverlength-strings is off by default, but is enabled by -Wpedantic.\n      It is never enabled in C++, as the minimum limit is not normative"}, {"sha": "0f13dc34eef31bb1e8126aaeb61befa97067e1d0", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -288,7 +288,7 @@ C ObjC Var(warn_cxx_compat) Warning\n Warn about C constructs that are not in the common subset of C and C++\n \n Wc++0x-compat\n-C++ ObjC++ Var(warn_cxx0x_compat) Warning\n+C++ ObjC++ Var(warn_cxx0x_compat) Warning LangEnabledBy(C++ ObjC++,Wall)\n Deprecated in favor of -Wc++11-compat\n \n Wc++11-compat\n@@ -336,7 +336,7 @@ C ObjC Var(warn_declaration_after_statement) Warning\n Warn when a declaration is found after a statement\n \n Wdelete-non-virtual-dtor\n-C++ ObjC++ Var(warn_delnonvdtor) Warning\n+C++ ObjC++ Var(warn_delnonvdtor) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about deleting polymorphic objects with non-virtual destructors\n \n Wdeprecated\n@@ -446,7 +446,7 @@ C ObjC C++ ObjC++ Warning\n Warn about PCH files that are found but not used\n \n Wjump-misses-init\n-C ObjC Var(warn_jump_misses_init) Init(-1) Warning\n+C ObjC Var(warn_jump_misses_init) Warning LangEnabledby(C ObjC,Wc++-compat)\n Warn when a jump misses a variable initialization\n \n Wliteral-suffix\n@@ -598,7 +598,7 @@ C ObjC C++ ObjC++ Var(warn_redundant_decls) Warning\n Warn about multiple declarations of the same object\n \n Wreorder\n-C++ ObjC++ Var(warn_reorder) Warning\n+C++ ObjC++ Var(warn_reorder) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn when the compiler reorders code\n \n Wreturn-type"}, {"sha": "ef720307eee60fad902042893987a09019aa6be2", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -461,4 +461,11 @@ value of @option{-fmath-errno} for languages that do not use\n \n @item EnabledBy(@var{opt})\n If not explicitly set, the option is set to the value of @option{-@var{opt}}.\n+\n+@item LangEnabledBy(@var{language}, @var{opt})\n+When compiling for the given language, the option is set to the value\n+of @option{-@var{opt}}, if not explicitly set. It is possible to\n+specify several different languages.  Each @var{language} must have\n+been declared by an earlier @code{Language} record.  @xref{Option file\n+format}.\n @end table"}, {"sha": "bfafc1b100c33b593e0ac56a6effa9646f06a754", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -1,3 +1,8 @@\n+2012-05-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 53063\n+\t* options.c (gfc_handle_option): Call lang-specific generated function.\n+\n 2012-05-13  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "f1721ce0a9b2827a02d420ef48f95ec4acb033e4", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -1090,6 +1090,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       break;\n     }\n \n+  Fortran_handle_option_auto (&global_options, &global_options_set, \n+                              scode, arg, value, \n+                              gfc_option_lang_mask (), kind,\n+                              loc, handlers, global_dc);\n   return result;\n }\n "}, {"sha": "8e098c28c2ccebb6c1982254f12a718efbdcba94", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -30,7 +30,9 @@ BEGIN {\n # Return nonzero if FLAGS contains a flag matching REGEX.\n function flag_set_p(regex, flags)\n {\n-\treturn (\" \" flags \" \") ~ (\" \" regex \" \")\n+    # Ignore the arguments of flags with arguments.\n+    gsub (\"\\\\([^)]+\\\\)\", \"\", flags);\n+    return (\" \" flags \" \") ~ (\" \" regex \" \")\n }\n \n # Return STRING if FLAGS contains a flag matching regexp REGEX,\n@@ -287,3 +289,10 @@ function opt_enum(name)\n {\n \treturn \"OPT_\" opt_sanitized_name(name)\n }\n+\n+# Given the language called NAME return a sanitized version of its name.\n+function lang_sanitized_name(name)\n+{\n+    gsub( \"[^\" alnum \"_]\", \"X\", name )\n+    return name\n+}"}, {"sha": "2ca71eebf98981e2a1c663cada7be518246c4a1f", "filename": "gcc/opt-read.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fopt-read.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fopt-read.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-read.awk?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -41,6 +41,7 @@ BEGIN {\n \t{\n \t\tif ($1 == \"Language\") {\n \t\t\tlangs[n_langs] = $2\n+                        lang_numbers[$2] = n_langs\n \t\t\tn_langs++;\n \t\t}\n \t\telse if ($1 == \"TargetSave\") {"}, {"sha": "1d46a5dc3c9177a667034f57009df3b93669e432", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 85, "deletions": 27, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -30,6 +30,50 @@\n \n # Dump that array of options into a C file.\n END {\n+\n+# Record first EnabledBy and LangEnabledBy uses.\n+n_enabledby = 0;\n+for (i = 0; i < n_langs; i++) {\n+    n_enabledby_lang[i] = 0;\n+}\n+for (i = 0; i < n_opts; i++) {\n+    enabledby_arg = opt_args(\"EnabledBy\", flags[i]);\n+    if (enabledby_arg != \"\") {\n+        enabledby_name = enabledby_arg;\n+        enabledby_index = opt_numbers[enabledby_name];\n+        if (enabledby_index == \"\") {\n+            print \"#error Enabledby: \" enabledby_name \n+        } else {\n+            if (enables[enabledby_name] == \"\") {\n+                enabledby[n_enabledby] = enabledby_name;\n+                n_enabledby++;\n+            }\n+            enables[enabledby_name] = enables[enabledby_name] opts[i] \",\";\n+        }\n+    }\n+\n+    enabledby_arg = opt_args(\"LangEnabledBy\", flags[i]);\n+    if (enabledby_arg != \"\") {\n+        n_enabledby_arg_langs = split(nth_arg(0, enabledby_arg), enabledby_arg_langs, \" \");\n+        enabledby_name = nth_arg(1, enabledby_arg);\n+        enabledby_index = opt_numbers[enabledby_name];\n+        if (enabledby_index == \"\") {\n+            print \"#error Enabledby: \" enabledby_name \n+        } else {\n+            for (j = 1; j <= n_enabledby_arg_langs; j++) {\n+                lang_name = lang_sanitized_name(enabledby_arg_langs[j]);\n+                lang_index = lang_numbers[enabledby_arg_langs[j]];\n+                if (enables[lang_name,enabledby_name] == \"\") {\n+                    enabledby[lang_name,n_enabledby_lang[lang_index]] = enabledby_name;\n+                    n_enabledby_lang[lang_index]++;\n+                }\n+                enables[lang_name,enabledby_name] = enables[lang_name,enabledby_name] opts[i] \",\";\n+            }\n+        }\n+    }\n+}\n+\n+\n print \"/* This file is auto-generated by optc-gen.awk.  */\"\n print \"\"\n n_headers = split(header_name, headers, \" \")\n@@ -161,8 +205,7 @@ print \"\"\n \n print \"const char * const lang_names[] =\\n{\"\n for (i = 0; i < n_langs; i++) {\n-\tmacros[i] = \"CL_\" langs[i]\n-\tgsub( \"[^\" alnum \"_]\", \"X\", macros[i] )\n+        macros[i] = \"CL_\" lang_sanitized_name(langs[i])\n \ts = substr(\"         \", length (macros[i]))\n \tprint \"  \" quote langs[i] quote \",\"\n     }\n@@ -342,30 +385,6 @@ print \"  gcc_assert (decoded->canonical_option_num_elements <= 2);           \"\n print \"                                                                      \"\n print \"  switch (code)                                                       \"\n print \"    {                                                                 \"\n-n_enabledby = 0;\n-for (i = 0; i < n_opts; i++) {\n-    # With identical flags, pick only the last one.  The\n-    # earlier loop ensured that it has all flags merged,\n-    # and a nonempty help text if one of the texts was nonempty.\n-    while( i + 1 != n_opts && opts[i] == opts[i + 1] ) {\n-        i++;\n-    }\n-    enabledby_arg = opt_args(\"EnabledBy\", flags[i]);\n-    if (enabledby_arg != \"\") {\n-        enabledby_name = enabledby_arg;\n-        enabledby_index = opt_numbers[enabledby_name];\n-        if (enabledby_index == \"\") {\n-            print \"#error Enabledby: \" enabledby_name \n-        } else {\n-            enabledby_var_name = var_name(flags[enabledby_index]);\n-            if (enables[enabledby_name] == \"\") {\n-                enabledby[n_enabledby] = enabledby_name;\n-                n_enabledby++;\n-            }\n-            enables[enabledby_name] = enables[enabledby_name] opts[i] \",\";\n-        }\n-    }\n-}\n for (i = 0; i < n_enabledby; i++) {\n     enabledby_name = enabledby[i];\n     print \"    case \" opt_enum(enabledby_name) \":\"\n@@ -378,12 +397,51 @@ for (i = 0; i < n_enabledby; i++) {\n         print \"                                 lang_mask, kind, loc, handlers, dc);\"\n     }\n     print \"      break;\\n\"\n-\n }\n print \"    default:    \"\n print \"      break;    \"\n print \"    }           \"\n print \"  return true;  \"\n print \"}               \"\n \n+# Handle LangEnabledBy\n+for (i = 0; i < n_langs; i++) {\n+    lang_name = lang_sanitized_name(langs[i]);\n+    mark_unused = \" ATTRIBUTE_UNUSED\";\n+\n+    print \"\\n\\n\"\n+    print \"bool                                                                  \"\n+    print lang_name \"_handle_option_auto (struct gcc_options *opts\" mark_unused \",              \"\n+    print \"                           struct gcc_options *opts_set\" mark_unused \",              \"\n+    print \"                           size_t scode\" mark_unused \", const char *arg\" mark_unused \", int value\" mark_unused \",  \"\n+    print \"                           unsigned int lang_mask\" mark_unused \", int kind\" mark_unused \",          \"\n+    print \"                           location_t loc\" mark_unused \",                            \"\n+    print \"                           const struct cl_option_handlers *handlers\" mark_unused \", \"\n+    print \"                           diagnostic_context *dc\" mark_unused \")                    \"\n+    print \"{                                                                     \"\n+    print \"  enum opt_code code = (enum opt_code) scode;                         \"\n+    print \"                                                                      \"\n+    print \"  switch (code)                                                       \"\n+    print \"    {                                                                 \"\n+    \n+    for (k = 0; k < n_enabledby_lang[i]; k++) {\n+        enabledby_name = enabledby[lang_name,k];\n+        print \"    case \" opt_enum(enabledby_name) \":\"\n+        n_enables = split(enables[lang_name,enabledby_name], thisenable, \",\");\n+        for (j = 1; j < n_enables; j++) {\n+            opt_var_name = var_name(flags[opt_numbers[thisenable[j]]]);\n+            print \"      if (!opts_set->x_\" opt_var_name \")\"\n+            print \"        handle_generated_option (opts, opts_set,\"\n+            print \"                                 \" opt_enum(thisenable[j]) \", arg, value,\"\n+            print \"                                 lang_mask, kind, loc, handlers, dc);\"\n+        }\n+        print \"      break;\\n\"\n+    }\n+    print \"    default:    \"\n+    print \"      break;    \"\n+    print \"    }           \"\n+    print \"  return true;  \"\n+    print \"}               \"\n+}\n+\n }"}, {"sha": "8e583f03064942cf1a7405ec1be9c6f4773eb9a7", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2bc201f53e2b8b9b9d072b41c5099ee825686f4/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=f2bc201f53e2b8b9b9d072b41c5099ee825686f4", "patch": "@@ -305,6 +305,17 @@ print \"                           unsigned int lang_mask, int kind,          \"\n print \"                           location_t loc,                            \"\n print \"                           const struct cl_option_handlers *handlers, \"\n print \"                           diagnostic_context *dc);                   \"\n+for (i = 0; i < n_langs; i++) {\n+    lang_name = lang_sanitized_name(langs[i]);\n+    print \"bool                                                                  \"\n+    print lang_name \"_handle_option_auto (struct gcc_options *opts,              \"\n+    print \"                           struct gcc_options *opts_set,              \"\n+    print \"                           size_t scode, const char *arg, int value,  \"\n+    print \"                           unsigned int lang_mask, int kind,          \"\n+    print \"                           location_t loc,                            \"\n+    print \"                           const struct cl_option_handlers *handlers, \"\n+    print \"                           diagnostic_context *dc);                   \"\n+}\n print \"#endif\";\n print \"#endif\";\n print \"\";\n@@ -401,8 +412,7 @@ for (i = 0; i < n_opts; i++) {\n print \"\"\n \n for (i = 0; i < n_langs; i++) {\n-\tmacros[i] = \"CL_\" langs[i]\n-\tgsub( \"[^\" alnum \"_]\", \"X\", macros[i] )\n+        macros[i] = \"CL_\" lang_sanitized_name(langs[i])\n \ts = substr(\"            \", length (macros[i]))\n \tprint \"#define \" macros[i] s \" (1U << \" i \")\"\n     }"}]}