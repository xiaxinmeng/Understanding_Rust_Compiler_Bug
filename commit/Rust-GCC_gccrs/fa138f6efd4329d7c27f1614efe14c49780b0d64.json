{"sha": "fa138f6efd4329d7c27f1614efe14c49780b0d64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmExMzhmNmVmZDQzMjlkN2MyN2YxNjE0ZWZlMTRjNDk3ODBiMGQ2NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-24T12:35:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-24T12:35:22Z"}, "message": "genmatch.c (struct capture_info): Add same_as field.\n\n2015-07-24  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (struct capture_info): Add same_as field.\n\t(capture_info::capture_info): Initialize same_as.\n\t(capture_info::walk_match): Compute same_as.\n\t(capture_info::walk_result): Compute stuff for the leader.\n\t(capture_info::walk_c_expr): Likewise.\n\t(dt_simplify::gen_1): Only look at leaders when deciding\n\tto force no side-effects or emit side-effects of omitted operands.\n\nFrom-SVN: r226152", "tree": {"sha": "3a9812d5a6268b8f50bc367825e4677de8e9f03e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a9812d5a6268b8f50bc367825e4677de8e9f03e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa138f6efd4329d7c27f1614efe14c49780b0d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa138f6efd4329d7c27f1614efe14c49780b0d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa138f6efd4329d7c27f1614efe14c49780b0d64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa138f6efd4329d7c27f1614efe14c49780b0d64/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67fd2789185d5075adc71def1590a3cabceb547a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67fd2789185d5075adc71def1590a3cabceb547a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67fd2789185d5075adc71def1590a3cabceb547a"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "6f8ae02f199dc9f82066ece848fb0300edaadc86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa138f6efd4329d7c27f1614efe14c49780b0d64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa138f6efd4329d7c27f1614efe14c49780b0d64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa138f6efd4329d7c27f1614efe14c49780b0d64", "patch": "@@ -1,3 +1,13 @@\n+2015-07-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (struct capture_info): Add same_as field.\n+\t(capture_info::capture_info): Initialize same_as.\n+\t(capture_info::walk_match): Compute same_as.\n+\t(capture_info::walk_result): Compute stuff for the leader.\n+\t(capture_info::walk_c_expr): Likewise.\n+\t(dt_simplify::gen_1): Only look at leaders when deciding\n+\tto force no side-effects or emit side-effects of omitted operands.\n+\n 2015-07-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_save_gprs_to_fprs): Add CFA_REGISTER"}, {"sha": "83e66c6acc56e2cde3a684e819654f06c5768572", "filename": "gcc/genmatch.c", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa138f6efd4329d7c27f1614efe14c49780b0d64/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa138f6efd4329d7c27f1614efe14c49780b0d64/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=fa138f6efd4329d7c27f1614efe14c49780b0d64", "patch": "@@ -1582,6 +1582,7 @@ struct capture_info\n       bool cond_expr_cond_p;\n       unsigned long toplevel_msk;\n       int result_use_count;\n+      unsigned same_as;\n     };\n \n   auto_vec<cinfo> info;\n@@ -1601,6 +1602,9 @@ capture_info::capture_info (simplify *s, operand *result)\n \n   force_no_side_effects = 0;\n   info.safe_grow_cleared (s->capture_max + 1);\n+  for (int i = 0; i <= s->capture_max; ++i)\n+    info[i].same_as = i;\n+\n   e = as_a <expr *> (s->match);\n   for (unsigned i = 0; i < e->ops.length (); ++i)\n     walk_match (e->ops[i], i,\n@@ -1634,9 +1638,16 @@ capture_info::walk_match (operand *o, unsigned toplevel_arg,\n \twalk_match (c->what, toplevel_arg, conditional_p, false);\n       /* We need to look past multiple captures to find a captured\n \t expression as with conditional converts two captures\n-\t can be collapsed onto the same expression.  */\n+\t can be collapsed onto the same expression.  Also collect\n+\t what captures capture the same thing.  */\n       while (c->what && is_a <capture *> (c->what))\n-\tc = as_a <capture *> (c->what);\n+\t{\n+\t  c = as_a <capture *> (c->what);\n+\t  if (info[c->where].same_as != c->where\n+\t      && info[c->where].same_as != info[where].same_as)\n+\t    fatal_at (c->location, \"cannot handle this collapsed capture\");\n+\t  info[c->where].same_as = info[where].same_as;\n+\t}\n       /* Mark expr (non-leaf) captures and forced single-use exprs.  */\n       expr *e;\n       if (c->what\n@@ -1682,19 +1693,20 @@ capture_info::walk_result (operand *o, bool conditional_p, operand *result)\n {\n   if (capture *c = dyn_cast <capture *> (o))\n     {\n-      info[c->where].result_use_count++;\n+      unsigned where = info[c->where].same_as;\n+      info[where].result_use_count++;\n       /* If we substitute an expression capture we don't know\n          which captures this will end up using (well, we don't\n \t compute that).  Force the uses to be side-effect free\n \t which means forcing the toplevels that reach the\n \t expression side-effect free.  */\n-      if (info[c->where].expr_p)\n-\tforce_no_side_effects |= info[c->where].toplevel_msk;\n+      if (info[where].expr_p)\n+\tforce_no_side_effects |= info[where].toplevel_msk;\n       /* Mark CSE capture uses as forced to have no side-effects. */\n       if (c->what\n \t  && is_a <expr *> (c->what))\n \t{\n-\t  info[c->where].cse_p = true;\n+\t  info[where].cse_p = true;\n \t  walk_result (c->what, true, result);\n \t}\n     }\n@@ -1783,7 +1795,8 @@ capture_info::walk_c_expr (c_expr *e)\n \t    id = (const char *)n->val.str.text;\n \t  else\n \t    id = (const char *)CPP_HASHNODE (n->val.node.node)->ident.str;\n-\t  info[*e->capture_ids->get(id)].force_no_side_effects_p = true;\n+\t  unsigned where = *e->capture_ids->get(id);\n+\t  info[info[where].same_as].force_no_side_effects_p = true;\n \t}\n     }\n }\n@@ -2767,6 +2780,8 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t  if (!is_predicate)\n \t    for (int i = 0; i < s->capture_max + 1; ++i)\n \t      {\n+\t\tif (cinfo.info[i].same_as != (unsigned)i)\n+\t\t  continue;\n \t\tif (!cinfo.info[i].force_no_side_effects_p\n \t\t    && cinfo.info[i].result_use_count > 1)\n \t\t  {\n@@ -2842,6 +2857,8 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t     on TREE_SIDE_EFFECTS emit omit_one_operand.  */\n \t  for (int i = 0; i < s->capture_max + 1; ++i)\n \t    {\n+\t      if (cinfo.info[i].same_as != (unsigned)i)\n+\t\tcontinue;\n \t      if (!cinfo.info[i].force_no_side_effects_p\n \t\t  && !cinfo.info[i].expr_p\n \t\t  && cinfo.info[i].result_use_count == 0)"}]}