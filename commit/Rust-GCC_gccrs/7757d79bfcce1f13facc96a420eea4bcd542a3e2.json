{"sha": "7757d79bfcce1f13facc96a420eea4bcd542a3e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc1N2Q3OWJmY2NlMWYxM2ZhY2M5NmE0MjBlZWE0YmNkNTQyYTNlMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-07-10T18:08:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-07-10T18:08:35Z"}, "message": "any (any::_Manager_alloc::_Data): Reorder tuple members to simplify pretty printing.\n\n\t* include/experimental/any (any::_Manager_alloc::_Data): Reorder\n\ttuple members to simplify pretty printing.\n\t(any::_Manager_alloc::_Data::_M_construct): Fix uses-allocator\n\tconstruction.\n\t* testsuite/experimental/any/cons/4.cc: New.\n\nFrom-SVN: r212435", "tree": {"sha": "a5f3ef6ecf2264b35f8ef426c1265d573200c8de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5f3ef6ecf2264b35f8ef426c1265d573200c8de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7757d79bfcce1f13facc96a420eea4bcd542a3e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7757d79bfcce1f13facc96a420eea4bcd542a3e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7757d79bfcce1f13facc96a420eea4bcd542a3e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7757d79bfcce1f13facc96a420eea4bcd542a3e2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "218e53ea1f2b9a9a63de8ba6dc3ec0c8c1510114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/218e53ea1f2b9a9a63de8ba6dc3ec0c8c1510114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/218e53ea1f2b9a9a63de8ba6dc3ec0c8c1510114"}], "stats": {"total": 103, "additions": 92, "deletions": 11}, "files": [{"sha": "85e5f88a3bd7d9e860d80b37acf2493e961dd10d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7757d79bfcce1f13facc96a420eea4bcd542a3e2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7757d79bfcce1f13facc96a420eea4bcd542a3e2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7757d79bfcce1f13facc96a420eea4bcd542a3e2", "patch": "@@ -1,3 +1,11 @@\n+2014-07-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/any (any::_Manager_alloc::_Data): Reorder\n+\ttuple members to simplify pretty printing.\n+\t(any::_Manager_alloc::_Data::_M_construct): Fix uses-allocator\n+\tconstruction.\n+\t* testsuite/experimental/any/cons/4.cc: New.\n+\n 2014-07-09  Jason Merrill  <jason@redhat.com>\n \n \tPR libstdc++/61728"}, {"sha": "a4ac983d711ecb7b78ade93395d15d0629bef282", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7757d79bfcce1f13facc96a420eea4bcd542a3e2/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7757d79bfcce1f13facc96a420eea4bcd542a3e2/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=7757d79bfcce1f13facc96a420eea4bcd542a3e2", "patch": "@@ -450,18 +450,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       using _Traits = std::allocator_traits<_Alloc>;\n \n-      std::tuple<_Alloc, __gnu_cxx::__aligned_buffer<_Tp>> _M_data;\n+      std::tuple<__gnu_cxx::__aligned_buffer<_Tp>, _Alloc> _M_data;\n \n-      _Alloc&       _M_alloc()       { return std::get<0>(_M_data); }\n-      const _Alloc& _M_alloc() const { return std::get<0>(_M_data); }\n+      _Alloc&       _M_alloc()       { return std::get<1>(_M_data); }\n+      const _Alloc& _M_alloc() const { return std::get<1>(_M_data); }\n \n-      _Tp*       _M_obj()       { return std::get<1>(_M_data)._M_ptr(); }\n-      const _Tp* _M_obj() const { return std::get<1>(_M_data)._M_ptr(); }\n+      _Tp*       _M_obj()       { return std::get<0>(_M_data)._M_ptr(); }\n+      const _Tp* _M_obj() const { return std::get<0>(_M_data)._M_ptr(); }\n \n       template<typename _Up>\n-\t_Data(const _Alloc& __a, _Up&& __val) : _M_data(__a, nullptr)\n+\t_Data(const _Alloc& __a, _Up&& __val) : _M_data(nullptr, __a)\n \t{\n-\t  this->_M_construct(std::__use_alloc<_Tp>(_M_alloc()),\n+\t  this->_M_construct(std::__use_alloc<_Tp, _Alloc, _Up&&>(_M_alloc()),\n \t\t\t     std::forward<_Up>(__val));\n \t}\n \n@@ -479,17 +479,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t_M_construct(__uses_alloc1<_Alloc> __a, _Up&& __val)\n \t{\n-\t  _Traits::construct(__a._M_a, _M_obj(),\n-\t\t\t     std::allocator_arg, __a._M_a,\n+\t  _Traits::construct(_M_alloc(), _M_obj(),\n+\t\t\t     std::allocator_arg, *__a._M_a,\n \t\t\t     std::forward<_Up>(__val));\n \t}\n \n       template<typename _Up>\n \tvoid\n \t_M_construct(__uses_alloc2<_Alloc> __a, _Up&& __val)\n \t{\n-\t  _Traits::construct(__a._M_a, _M_obj(),\n-\t\t\t     std::forward<_Up>(__val), __a._M_a);\n+\t  _Traits::construct(_M_alloc(), _M_obj(),\n+\t\t\t     std::forward<_Up>(__val), *__a._M_a);\n \t}\n     };\n "}, {"sha": "6e5e01972e3b5f1b21cd75dbd75617bae5006242", "filename": "libstdc++-v3/testsuite/experimental/any/cons/4.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7757d79bfcce1f13facc96a420eea4bcd542a3e2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7757d79bfcce1f13facc96a420eea4bcd542a3e2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F4.cc?ref=7757d79bfcce1f13facc96a420eea4bcd542a3e2", "patch": "@@ -0,0 +1,73 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/any>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::any;\n+\n+struct NotSmall\n+{\n+  char c[64];  // prevent small-object optimization\n+};\n+\n+struct T1\n+{\n+  using allocator_type = std::allocator<char>;\n+\n+  T1() = default;\n+  T1(const T1&) : used_alloc(false) { }\n+  T1(const T1&, const allocator_type&) : used_alloc(true) { }\n+\n+  bool used_alloc;\n+\n+  NotSmall x;\n+};\n+\n+struct T2\n+{\n+  using allocator_type = std::allocator<char>;\n+\n+  T2() = default;\n+  T2(const T2&) : used_alloc(false) { }\n+  T2(std::allocator_arg_t, const allocator_type&, const T2&) : used_alloc(true)\n+  { }\n+\n+  bool used_alloc;\n+\n+  NotSmall x;\n+};\n+\n+bool test [[gnu::unused]] = true;\n+\n+void test01()\n+{\n+  any x1(std::allocator_arg, std::allocator<char>{}, T1{});\n+  VERIFY( std::experimental::any_cast<T1&>(x1).used_alloc );\n+\n+  any x2(std::allocator_arg, std::allocator<char>{}, T2{});\n+  VERIFY( std::experimental::any_cast<T2&>(x2).used_alloc );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}