{"sha": "1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ4YjAyMjJiMTVmMjE4OGI2NTlkZTRhNzMxZDhmZDVlYTIzYmVkMA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2017-12-07T14:54:22Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-12-07T14:54:22Z"}, "message": "re PR target/82641 (Unable to enable crc32 for a certain function with target attribute on ARM (aarch32))\n\n2017-12-07  Tamar Christina  <tamar.christina@arm.com>\n\n\tPR target/82641\n\t* config/arm/arm.c (INCLUDE_STRING): Define.\n\t(arm_last_printed_arch_string, arm_last_printed_fpu_string): New.\n\t(arm_declare_function_name): Conservatively emit .arch, .arch_extensions\n\tand .fpu.\n\ngcc/testsuite/\n2017-12-07  Tamar Christina  <tamar.christina@arm.com>\n\n\tPR target/82641\n\t* gcc.target/arm/pragma_arch_attribute_2.c: New.\n\t* gcc.target/arm/pragma_arch_attribute_2.c: New.\n\t* gcc.target/arm/pragma_arch_attribute_3.c: New.\n\t* gcc.target/arm/pragma_fpu_attribute.c: New.\n\t* gcc.target/arm/pragma_fpu_attribute_2.c: New.\n\nFrom-SVN: r255468", "tree": {"sha": "fe2fe58d70ea116377d7bd4621ca28e15299aff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe2fe58d70ea116377d7bd4621ca28e15299aff3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1cc521f1a824b5913aeda06ebe296de98f2d9453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc521f1a824b5913aeda06ebe296de98f2d9453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc521f1a824b5913aeda06ebe296de98f2d9453"}], "stats": {"total": 183, "additions": 179, "deletions": 4}, "files": [{"sha": "95a70f4ab721d79a0ad62c1d997ff01441f04235", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "patch": "@@ -1,3 +1,11 @@\n+2017-12-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/82641\n+\t* config/arm/arm.c (INCLUDE_STRING): Define.\n+\t(arm_last_printed_arch_string, arm_last_printed_fpu_string): New.\n+\t(arm_declare_function_name): Conservatively emit .arch, .arch_extensions\n+\tand .fpu.\n+\n 2017-12-07  Michael Matz  <matz@suse.de>\n \n \tAdd unroll and jam pass"}, {"sha": "b98637714ab703d42dd40ac189e4271e3cc6bbe2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 58, "deletions": 4, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "patch": "@@ -21,6 +21,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_STRING\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"backend.h\"\n@@ -30956,9 +30957,57 @@ arm_identify_fpu_from_isa (sbitmap isa)\n   gcc_unreachable ();\n }\n \n+/* The last .arch and .fpu assembly strings that we printed.  */\n+static std::string arm_last_printed_arch_string;\n+static std::string arm_last_printed_fpu_string;\n+\n+/* Implement ASM_DECLARE_FUNCTION_NAME.  Output the ISA features used\n+   by the function fndecl.  */\n void\n arm_declare_function_name (FILE *stream, const char *name, tree decl)\n {\n+  tree target_parts = DECL_FUNCTION_SPECIFIC_TARGET (decl);\n+\n+  struct cl_target_option *targ_options;\n+  if (target_parts)\n+    targ_options = TREE_TARGET_OPTION (target_parts);\n+  else\n+    targ_options = TREE_TARGET_OPTION (target_option_current_node);\n+  gcc_assert (targ_options);\n+\n+  /* Only update the assembler .arch string if it is distinct from the last\n+     such string we printed.  */\n+  std::string arch_to_print = targ_options->x_arm_arch_string;\n+  if (arch_to_print != arm_last_printed_arch_string)\n+    {\n+      std::string arch_name\n+\t= arch_to_print.substr (0, arch_to_print.find (\"+\"));\n+      asm_fprintf (asm_out_file, \"\\t.arch %s\\n\", arch_name.c_str ());\n+      const arch_option *arch\n+\t= arm_parse_arch_option_name (all_architectures, \"-march\",\n+\t\t\t\t      targ_options->x_arm_arch_string);\n+      auto_sbitmap opt_bits (isa_num_bits);\n+\n+      gcc_assert (arch);\n+      if (arch->common.extensions)\n+\t{\n+\t  for (const struct cpu_arch_extension *opt = arch->common.extensions;\n+\t       opt->name != NULL;\n+\t       opt++)\n+\t    {\n+\t      if (!opt->remove)\n+\t\t{\n+\t\t  arm_initialize_isa (opt_bits, opt->isa_bits);\n+\t\t  if (bitmap_subset_p (opt_bits, arm_active_target.isa)\n+\t\t      && !bitmap_subset_p (opt_bits, isa_all_fpubits))\n+\t\t    asm_fprintf (asm_out_file, \"\\t.arch_extension %s\\n\",\n+\t\t\t\t opt->name);\n+\t\t}\n+\t     }\n+\t}\n+\n+      arm_last_printed_arch_string = arch_to_print;\n+    }\n \n   fprintf (stream, \"\\t.syntax unified\\n\");\n \n@@ -30976,10 +31025,15 @@ arm_declare_function_name (FILE *stream, const char *name, tree decl)\n   else\n     fprintf (stream, \"\\t.arm\\n\");\n \n-  asm_fprintf (asm_out_file, \"\\t.fpu %s\\n\",\n-\t       (TARGET_SOFT_FLOAT\n-\t\t? \"softvfp\"\n-\t\t: arm_identify_fpu_from_isa (arm_active_target.isa)));\n+  std::string fpu_to_print\n+    = TARGET_SOFT_FLOAT\n+\t? \"softvfp\" : arm_identify_fpu_from_isa (arm_active_target.isa);\n+\n+  if (fpu_to_print != arm_last_printed_arch_string)\n+    {\n+      asm_fprintf (asm_out_file, \"\\t.fpu %s\\n\", fpu_to_print.c_str ());\n+      arm_last_printed_fpu_string = fpu_to_print;\n+    }\n \n   if (TARGET_POKE_FUNCTION_NAME)\n     arm_poke_function_name (stream, (const char *) name);"}, {"sha": "6d7ec09240b022a0af1c7537cd2da68cae1df880", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "patch": "@@ -1,3 +1,12 @@\n+2017-12-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/82641\n+\t* gcc.target/arm/pragma_arch_attribute_2.c: New.\n+\t* gcc.target/arm/pragma_arch_attribute_2.c: New.\n+\t* gcc.target/arm/pragma_arch_attribute_3.c: New.\n+\t* gcc.target/arm/pragma_fpu_attribute.c: New.\n+\t* gcc.target/arm/pragma_fpu_attribute_2.c: New.\n+\n 2017-12-07  Michael Matz  <matz@suse.de>\n \n \t* gcc.dg/unroll-and-jam.c: New test."}, {"sha": "2e8e385774b004a8f04e281a0449ed977210b540", "filename": "gcc/testsuite/gcc.target/arm/pragma_arch_attribute_2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_arch_attribute_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_arch_attribute_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_arch_attribute_2.c?ref=1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "patch": "@@ -0,0 +1,25 @@\n+/* Test for target attribute assembly extension generations.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arch_v8a_ok } */\n+/* { dg-add-options arm_arch_v8a } */\n+/* { dg-additional-options \"-std=gnu99\" } */\n+\n+#include <stdint.h>\n+\n+extern uint32_t bar();\n+\n+__attribute__((target(\"arch=armv8-a+crc\"))) uint32_t crc32cw(uint32_t crc, uint32_t val)\n+{\n+    uint32_t res;\n+    asm(\"crc32cw %0, %1, %2\" : \"=r\"(res) : \"r\"(crc), \"r\"(val));\n+    return res;\n+}\n+\n+uint32_t restored ()\n+{\n+  return bar();\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.arch\\s+armv8-a} 3 } } */\n+/* { dg-final { scan-assembler-times {\\.arch_extension\\s+crc} 1 } } */\n+"}, {"sha": "3714812cf26c08b08ccce834ca8511d53403d26d", "filename": "gcc/testsuite/gcc.target/arm/pragma_arch_attribute_3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_arch_attribute_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_arch_attribute_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_arch_attribute_3.c?ref=1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "patch": "@@ -0,0 +1,28 @@\n+/* Test for #pragma assembly extension generations.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arch_v8a_ok } */\n+/* { dg-add-options arm_arch_v8a } */\n+/* { dg-additional-options \"-std=gnu99\" } */\n+\n+#include <stdint.h>\n+\n+extern uint32_t bar();\n+\n+#pragma GCC push_options\n+#pragma GCC target(\"arch=armv8-a+crc\")\n+uint32_t crc32cw(uint32_t crc, uint32_t val)\n+{\n+    uint32_t res;\n+    asm(\"crc32cw %0, %1, %2\" : \"=r\"(res) : \"r\"(crc), \"r\"(val));\n+    return res;\n+}\n+#pragma GCC pop_options\n+\n+uint32_t restored ()\n+{\n+  return bar();\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.arch\\s+armv8-a} 3 } } */\n+/* { dg-final { scan-assembler-times {\\.arch_extension\\s+crc} 1 } } */\n+"}, {"sha": "f47c745855e4acc099afd554838dcf7d031f798c", "filename": "gcc/testsuite/gcc.target/arm/pragma_fpu_attribute.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_fpu_attribute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_fpu_attribute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_fpu_attribute.c?ref=1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "patch": "@@ -0,0 +1,24 @@\n+/* Test for target attribute assembly extension generations.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arch_v8a_ok } */\n+/* { dg-additional-options \"-std=gnu99 -mfpu=vfpv3-d16\" } */\n+\n+#include <stdint.h>\n+#include <arm_neon.h>\n+\n+extern uint32_t bar();\n+\n+__attribute__((target(\"fpu=crypto-neon-fp-armv8\"))) poly64x1_t vsricw(poly64x1_t crc, uint32_t val)\n+{\n+    poly64x1_t res;\n+    asm(\"vsri %0, %1, %2\" : \"=r\"(res) : \"r\"(crc), \"r\"(val));\n+    return res;\n+}\n+\n+uint32_t restored ()\n+{\n+  return bar();\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.fpu\\s+crypto-neon-fp-armv8} 1 } } */\n+/* { dg-final { scan-assembler-times {\\.fpu\\s+vfpv3-d16} 1 } } */"}, {"sha": "f23fd83779e57e48c0035b6688a21850d12cb4ab", "filename": "gcc/testsuite/gcc.target/arm/pragma_fpu_attribute_2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_fpu_attribute_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8b0222b15f2188b659de4a731d8fd5ea23bed0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_fpu_attribute_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_fpu_attribute_2.c?ref=1d8b0222b15f2188b659de4a731d8fd5ea23bed0", "patch": "@@ -0,0 +1,27 @@\n+/* Test for #pragma assembly extension generations.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arch_v8a_ok } */\n+/* { dg-additional-options \"-std=gnu99 -mfpu=vfpv3-d16\" } */\n+\n+#include <stdint.h>\n+#include <arm_neon.h>\n+\n+extern uint32_t bar();\n+\n+#pragma GCC push_options\n+#pragma GCC target(\"fpu=crypto-neon-fp-armv8\")\n+poly64x1_t vsricw(poly64x1_t crc, uint32_t val)\n+{\n+    poly64x1_t res;\n+    asm(\"vsri %0, %1, %2\" : \"=r\"(res) : \"r\"(crc), \"r\"(val));\n+    return res;\n+}\n+#pragma GCC pop_options\n+\n+uint32_t restored ()\n+{\n+  return bar();\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.fpu\\s+crypto-neon-fp-armv8} 1 } } */\n+/* { dg-final { scan-assembler-times {\\.fpu\\s+vfpv3-d16} 1 } } */"}]}