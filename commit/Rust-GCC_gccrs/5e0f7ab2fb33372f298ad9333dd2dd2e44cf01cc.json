{"sha": "5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUwZjdhYjJmYjMzMzcyZjI5OGFkOTMzM2RkMmRkMmU0NGNmMDFjYw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-09T07:55:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-09T07:55:38Z"}, "message": "[Ada] Access to uninitialized memory by predicate check\n\nThis patch fixes an exception or erroneous execution, when the\ndeclaration for an object of a composite type that has a dynanic\npredicate is initialized with an aggregate that requires expansion into\nindividual components. Prior to this patch the predicate check for the\nobject appeared before intialization was performed, thus accessing\nuninitialized memory.\n\n2019-07-09  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): If the object type\n\tis a composite type that has a dynamic predicate and, the\n\texpression in the declaration is an aggregate, the generated\n\tpredicate check must appear after the expanded code for the\n\taggregate, which will appear after the rewritten object\n\tdeclarastion.\n\ngcc/testsuite/\n\n\t* gnat.dg/predicate10.adb, gnat.dg/predicate10_pkg.adb,\n\tgnat.dg/predicate10_pkg.ads: New testcase.\n\nFrom-SVN: r273293", "tree": {"sha": "ce93a484c8270a63ed5a2a499fd930e8c764db03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce93a484c8270a63ed5a2a499fd930e8c764db03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "924e3532dcdabde43f5b49f1ef1a95656f4e37dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924e3532dcdabde43f5b49f1ef1a95656f4e37dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/924e3532dcdabde43f5b49f1ef1a95656f4e37dc"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "cb2acf31d61402a54fd3035148bd0b81435225aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "patch": "@@ -1,3 +1,12 @@\n+2019-07-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): If the object type\n+\tis a composite type that has a dynamic predicate and, the\n+\texpression in the declaration is an aggregate, the generated\n+\tpredicate check must appear after the expanded code for the\n+\taggregate, which will appear after the rewritten object\n+\tdeclarastion.\n+\n 2019-07-09  Justin Squirek  <squirek@adacore.com>\n \n \t* sem_eval.adb (Expr_Value_E): Add conditional to correctly"}, {"sha": "9e32cea6ad5144fd2ea2d15903eeb9455044de6a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "patch": "@@ -3649,8 +3649,10 @@ package body Sem_Ch3 is\n    --  Ghost mode.\n \n    procedure Analyze_Object_Declaration (N : Node_Id) is\n-      Loc   : constant Source_Ptr := Sloc (N);\n-      Id    : constant Entity_Id  := Defining_Identifier (N);\n+      Loc       : constant Source_Ptr := Sloc (N);\n+      Id        : constant Entity_Id  := Defining_Identifier (N);\n+      Next_Decl : constant Node_Id := Next (N);\n+\n       Act_T : Entity_Id;\n       T     : Entity_Id;\n \n@@ -3912,6 +3914,11 @@ package body Sem_Ch3 is\n             A_Id := Get_Aspect_Id (Chars (Identifier (A)));\n             while Present (A) loop\n                if A_Id = Aspect_Alignment or else A_Id = Aspect_Address then\n+\n+                  --  Set flag on object entity, for later processing at\n+                  --  the freeze point.\n+\n+                  Set_Has_Delayed_Aspects (Id);\n                   return True;\n                end if;\n \n@@ -4495,8 +4502,21 @@ package body Sem_Ch3 is\n             null;\n \n          else\n-            Insert_After (N,\n-              Make_Predicate_Check (T, New_Occurrence_Of (Id, Loc)));\n+            --  The check must be inserted after the expanded aggregate\n+            --  expansion code, if any.\n+\n+            declare\n+               Check : constant Node_Id :=\n+                 Make_Predicate_Check (T, New_Occurrence_Of (Id, Loc));\n+\n+            begin\n+               if No (Next_Decl) then\n+                  Append_To (List_Containing (N), Check);\n+\n+               else\n+                  Insert_Before (Next_Decl, Check);\n+               end if;\n+            end;\n          end if;\n       end if;\n "}, {"sha": "91fa381708bb3a9e5bd8fafada1cf64e7563df9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "patch": "@@ -1,3 +1,8 @@\n+2019-07-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/predicate10.adb, gnat.dg/predicate10_pkg.adb,\n+\tgnat.dg/predicate10_pkg.ads: New testcase.\n+\n 2019-07-09  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/image1.adb: New testcase."}, {"sha": "019038d55ccc4feef629ea0e552d9c24dfb3e992", "filename": "gcc/testsuite/gnat.dg/predicate10.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate10.adb?ref=5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "patch": "@@ -0,0 +1,9 @@\n+--  { dg-do run }\n+\n+with Predicate10_Pkg; use Predicate10_Pkg;\n+\n+procedure Predicate10 is\n+   X : I_Pointer := new Integer'(0);\n+begin\n+   Foo (1, X);\n+end;"}, {"sha": "159530f2e0b93f3d44fd21407cbeafcbc7f65202", "filename": "gcc/testsuite/gnat.dg/predicate10_pkg.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate10_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate10_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate10_pkg.adb?ref=5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "patch": "@@ -0,0 +1,10 @@\n+package body Predicate10_Pkg is\n+   procedure Foo (\n+     Length  : Natural;\n+     Initial : I_Pointer\n+   ) is\n+      A : NI_Array  := (1 .. Length => Initial);\n+   begin\n+      null;\n+   end Foo;\n+end;"}, {"sha": "e48cfe0361260fc1fe02c5f258a2518b4ade9224", "filename": "gcc/testsuite/gnat.dg/predicate10_pkg.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate10_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate10_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate10_pkg.ads?ref=5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "patch": "@@ -0,0 +1,13 @@\n+package Predicate10_Pkg is\n+   type I_Array is array (Positive range <>) of access Integer;\n+\n+   subtype NI_Array is I_Array with Dynamic_Predicate =>\n+     (for all I of NI_Array => I /= null);\n+\n+   type I_Pointer is access Integer;\n+\n+   procedure Foo (\n+     Length  : Natural;\n+     Initial : I_Pointer\n+   );\n+end;"}]}