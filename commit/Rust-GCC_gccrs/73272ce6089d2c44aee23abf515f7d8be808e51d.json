{"sha": "73272ce6089d2c44aee23abf515f7d8be808e51d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMyNzJjZTYwODlkMmM0NGFlZTIzYWJmNTE1ZjdkOGJlODA4ZTUxZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-02-07T18:59:52Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-02-07T18:59:52Z"}, "message": "prims.cc (_Jv_CreateJavaVM): Call _Jv_platform_initialize.\n\n\t* prims.cc (_Jv_CreateJavaVM): Call _Jv_platform_initialize.\n\t* win32.cc (win32_exception_handler): Now static.\n\t* include/win32.h (_Jv_platform_initialize): Declare.\n\t(win32_exception_handler): Don't declare.\n\t* java/lang/natSystem.cc (currentTimeMillis): Use\n\t_Jv_platform_gettimeofday.\n\t* posix.cc (_Jv_platform_gettimeofday): Renamed.\n\t(_Jv_select): Use new name.\n\t(_Jv_platform_initialize): New function.\n\t* include/posix.h (_Jv_platform_gettimeofday): Renamed from\n\t_Jv_gettimeofday.\n\t(_Jv_platform_initialize): Declare.\n\nFrom-SVN: r49583", "tree": {"sha": "445027a01135cb59b020bba496158a0fc253ef73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/445027a01135cb59b020bba496158a0fc253ef73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73272ce6089d2c44aee23abf515f7d8be808e51d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73272ce6089d2c44aee23abf515f7d8be808e51d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73272ce6089d2c44aee23abf515f7d8be808e51d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73272ce6089d2c44aee23abf515f7d8be808e51d/comments", "author": null, "committer": null, "parents": [{"sha": "225909c3c964ea743f202b7e52f3d381e11ab1ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/225909c3c964ea743f202b7e52f3d381e11ab1ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/225909c3c964ea743f202b7e52f3d381e11ab1ae"}], "stats": {"total": 85, "additions": 57, "deletions": 28}, "files": [{"sha": "d0ca38e2e5f36c783f24367e619d46d7ca5d5f02", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=73272ce6089d2c44aee23abf515f7d8be808e51d", "patch": "@@ -1,5 +1,18 @@\n 2002-02-07  Tom Tromey  <tromey@redhat.com>\n \n+\t* prims.cc (_Jv_CreateJavaVM): Call _Jv_platform_initialize.\n+\t* win32.cc (win32_exception_handler): Now static.\n+\t* include/win32.h (_Jv_platform_initialize): Declare.\n+\t(win32_exception_handler): Don't declare.\n+\t* java/lang/natSystem.cc (currentTimeMillis): Use\n+\t_Jv_platform_gettimeofday.\n+\t* posix.cc (_Jv_platform_gettimeofday): Renamed.\n+\t(_Jv_select): Use new name.\n+\t(_Jv_platform_initialize): New function.\n+\t* include/posix.h (_Jv_platform_gettimeofday): Renamed from\n+\t_Jv_gettimeofday.\n+\t(_Jv_platform_initialize): Declare.\n+\n \t* configure: Rebuilt.\n \t* configure.in: Removed unnecessary parens.\n "}, {"sha": "bbfb0b244e7fb3e649049a83050000ffef286aad", "filename": "libjava/include/posix.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Finclude%2Fposix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Finclude%2Fposix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix.h?ref=73272ce6089d2c44aee23abf515f7d8be808e51d", "patch": "@@ -1,6 +1,6 @@\n // posix.h -- Helper functions for POSIX-flavored OSs.\n \n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -29,4 +29,5 @@ details.  */\n #endif\n \n extern int _Jv_select (int n, fd_set *, fd_set *, fd_set *, struct timeval *);\n-extern void _Jv_gettimeofday (struct timeval *);\n+extern void _Jv_platform_gettimeofday (struct timeval *);\n+extern void _Jv_platform_initialize (void);"}, {"sha": "82c7f157e200b5c1f3cbc87a80f5cc2941a7e904", "filename": "libjava/include/win32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Finclude%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Finclude%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32.h?ref=73272ce6089d2c44aee23abf515f7d8be808e51d", "patch": "@@ -17,6 +17,6 @@ details.  */\n #undef __INSIDE_CYGWIN__\n #include <winsock.h>\n \n-LONG CALLBACK win32_exception_handler (LPEXCEPTION_POINTERS e);\n+extern void _Jv_platform_initialize (void);\n \n #endif /* __JV_WIN32_H__ */"}, {"sha": "28ef04dd778f5852f7eedd1bb2e58674c72c22e4", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=73272ce6089d2c44aee23abf515f7d8be808e51d", "patch": "@@ -159,7 +159,7 @@ jlong\n java::lang::System::currentTimeMillis (void)\n {\n   struct timeval tv;\n-  _Jv_gettimeofday (&tv);\n+  _Jv_platform_gettimeofday (&tv);\n   return (jlong) tv.tv_sec * 1000 + tv.tv_usec / 1000;\n }\n "}, {"sha": "66443d21e11599744e8cb1864f5da548b44e088e", "filename": "libjava/posix.cc", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Fposix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Fposix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix.cc?ref=73272ce6089d2c44aee23abf515f7d8be808e51d", "patch": "@@ -1,6 +1,6 @@\n // posix.cc -- Helper functions for POSIX-flavored OSs.\n \n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* Copyright (C) 2000, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -13,6 +13,7 @@ details.  */\n #include \"posix.h\"\n \n #include <errno.h>\n+#include <signal.h>\n \n #include <jvm.h>\n #include <java/lang/Thread.h>\n@@ -24,7 +25,7 @@ extern \"C\" unsigned long long _clock (void);\n \n // gettimeofday implementation.\n void\n-_Jv_gettimeofday (struct timeval *tv)\n+_Jv_platform_gettimeofday (struct timeval *tv)\n {\n #if defined (HAVE_GETTIMEOFDAY)\n   gettimeofday (tv, NULL);\n@@ -47,6 +48,22 @@ _Jv_gettimeofday (struct timeval *tv)\n #endif\n }\n \n+// Platform-specific VM initialization.\n+void\n+_Jv_platform_initialize (void)\n+{\n+#if defined (HAVE_SIGACTION)\n+  // We only want this on POSIX systems.\n+  struct sigaction act;\n+  act.sa_handler = SIG_IGN;\n+  sigemptyset (&act.sa_mask);\n+  act.sa_flags = 0;\n+  sigaction (SIGPIPE, &act, NULL);\n+#else\n+  signal (SIGPIPE, SIG_IGN);\n+#endif\n+}\n+\n // A wrapper for select() which ignores EINTR.\n int\n _Jv_select (int n, fd_set *readfds, fd_set  *writefds,\n@@ -57,7 +74,7 @@ _Jv_select (int n, fd_set *readfds, fd_set  *writefds,\n   struct timeval end, delay;\n   if (timeout)\n     {\n-      _Jv_gettimeofday (&end);\n+      _Jv_platform_gettimeofday (&end);\n       end.tv_usec += timeout->tv_usec;\n       if (end.tv_usec >= 1000000)\n \t{\n@@ -87,7 +104,7 @@ _Jv_select (int n, fd_set *readfds, fd_set  *writefds,\n       struct timeval after;\n       if (timeout)\n \t{\n-\t  _Jv_gettimeofday (&after);\n+\t  _Jv_platform_gettimeofday (&after);\n \t  // Now compute new timeout argument.\n \t  delay.tv_usec = end.tv_usec - after.tv_usec;\n \t  delay.tv_sec = end.tv_sec - after.tv_sec;"}, {"sha": "e351e23630863d64b372d9153238f6f820370f1a", "filename": "libjava/prims.cc", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=73272ce6089d2c44aee23abf515f7d8be808e51d", "patch": "@@ -1,6 +1,6 @@\n // prims.cc - Code for core of runtime environment.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -928,23 +928,7 @@ _Jv_CreateJavaVM (void* /*vm_args*/)\n   LTDL_SET_PRELOADED_SYMBOLS ();\n #endif\n \n-#ifdef WIN32\n-  // Initialise winsock for networking\n-  WSADATA data;\n-  if (WSAStartup (MAKEWORD (1, 1), &data))\n-      MessageBox (NULL, \"Error initialising winsock library.\", \"Error\", MB_OK | MB_ICONEXCLAMATION);\n-  // Install exception handler\n-  SetUnhandledExceptionFilter (win32_exception_handler);\n-#elif defined(HAVE_SIGACTION)\n-  // We only want this on POSIX systems.\n-  struct sigaction act;\n-  act.sa_handler = SIG_IGN;\n-  sigemptyset (&act.sa_mask);\n-  act.sa_flags = 0;\n-  sigaction (SIGPIPE, &act, NULL);\n-#else\n-  signal (SIGPIPE, SIG_IGN);\n-#endif\n+  _Jv_platform_initialize ();\n \n   _Jv_JNI_Init ();\n "}, {"sha": "e54d926b0ef392d88e2c132fbbb27c22cc444dfb", "filename": "libjava/win32.cc", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Fwin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73272ce6089d2c44aee23abf515f7d8be808e51d/libjava%2Fwin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fwin32.cc?ref=73272ce6089d2c44aee23abf515f7d8be808e51d", "patch": "@@ -9,9 +9,10 @@ Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n #include <config.h>\n-#include <windows.h>\n \n-LONG CALLBACK\n+#include \"platform.h\"\n+\n+static LONG CALLBACK\n win32_exception_handler (LPEXCEPTION_POINTERS e)\n {\n   if (e->ExceptionRecord->ExceptionCode == EXCEPTION_ACCESS_VIOLATION)\n@@ -21,3 +22,16 @@ win32_exception_handler (LPEXCEPTION_POINTERS e)\n   else\n     return EXCEPTION_CONTINUE_SEARCH;\n }\n+\n+// Platform-specific VM initialization.\n+void\n+_Jv_platform_initialize (void)\n+{\n+  // Initialise winsock for networking\n+  WSADATA data;\n+  if (WSAStartup (MAKEWORD (1, 1), &data))\n+    MessageBox (NULL, \"Error initialising winsock library.\", \"Error\",\n+\t\tMB_OK | MB_ICONEXCLAMATION);\n+  // Install exception handler\n+  SetUnhandledExceptionFilter (win32_exception_handler);\n+}"}]}