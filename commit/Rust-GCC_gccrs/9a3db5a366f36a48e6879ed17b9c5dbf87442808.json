{"sha": "9a3db5a366f36a48e6879ed17b9c5dbf87442808", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzZGI1YTM2NmYzNmE0OGU2ODc5ZWQxN2I5YzVkYmY4NzQ0MjgwOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-04-15T15:28:06Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-04-15T15:28:06Z"}, "message": "re PR fortran/31204 (wrong host association of implied loop variable)\n\n2007-04-15  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31204\n\t* primary.c (check_for_implicit_index): New function to check\n\tthat a host associated variable is not an undeclared implied\n\tdo loop index.\n\t(gfc_match_rvalue, match_variable): Use it and reset the\n\timplied_index attribute.\n\t* gfortran.h : Add the implied_index field to symbol_attribute.\n\t* match.c (gfc_match_iterator): Mark the iterator variable\n\twith the new attribute.\n\t* decl.c (build_sym): Reset the new attribute.\n\n2007-04-15  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31204\n\t* gfortran.dg/array_constructor_16.f90: New test.\n\nFrom-SVN: r123849", "tree": {"sha": "998d5a983b982f9cb8acff35d3022b8d994d5cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/998d5a983b982f9cb8acff35d3022b8d994d5cd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a3db5a366f36a48e6879ed17b9c5dbf87442808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3db5a366f36a48e6879ed17b9c5dbf87442808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a3db5a366f36a48e6879ed17b9c5dbf87442808", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3db5a366f36a48e6879ed17b9c5dbf87442808/comments", "author": null, "committer": null, "parents": [{"sha": "e3e093eceff3da3fa4aa20745d2e3fb2d3b6e519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e093eceff3da3fa4aa20745d2e3fb2d3b6e519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e093eceff3da3fa4aa20745d2e3fb2d3b6e519"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "b6a3b2981aba4ac6dbd5c12a7cf29f89e4720f24", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9a3db5a366f36a48e6879ed17b9c5dbf87442808", "patch": "@@ -1,3 +1,16 @@\n+2007-04-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31204\n+\t* primary.c (check_for_implicit_index): New function to check\n+\tthat a host associated variable is not an undeclared implied\n+\tdo loop index.\n+\t(gfc_match_rvalue, match_variable): Use it and reset the\n+\timplied_index attribute.\n+\t* gfortran.h : Add the implied_index field to symbol_attribute.\n+\t* match.c (gfc_match_iterator): Mark the iterator variable\n+\twith the new attribute.\n+\t* decl.c (build_sym): Reset the new attribute.\n+\n 2007-04-15  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gfc-internals.texi: Fix typos."}, {"sha": "7665bc838e9a718dba05130b58cfcd0868bb962b", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=9a3db5a366f36a48e6879ed17b9c5dbf87442808", "patch": "@@ -769,6 +769,8 @@ build_sym (const char *name, gfc_charlen *cl,\n   if (gfc_copy_attr (&sym->attr, &attr, var_locus) == FAILURE)\n     return FAILURE;\n \n+  sym->attr.implied_index = 0;\n+\n   return SUCCESS;\n }\n "}, {"sha": "c2c239d1d20a2448c63226d257865336417ab87b", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=9a3db5a366f36a48e6879ed17b9c5dbf87442808", "patch": "@@ -536,6 +536,8 @@ gfc_match_iterator (gfc_iterator *iter, int init_flag)\n       goto cleanup;\n     }\n \n+  var->symtree->n.sym->attr.implied_index = 1;\n+\n   m = init_flag ? gfc_match_init_expr (&e1) : gfc_match_expr (&e1);\n   if (m == MATCH_NO)\n     goto syntax;"}, {"sha": "41c7507d737f78872618663af664c7a2be2ce242", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=9a3db5a366f36a48e6879ed17b9c5dbf87442808", "patch": "@@ -1989,6 +1989,28 @@ gfc_match_structure_constructor (gfc_symbol *sym, gfc_expr **result)\n }\n \n \n+/* If the symbol is an implicit do loop index and implicitly typed,\n+   it should not be host associated.  Provide a symtree from the\n+   current namespace.  */\n+static match\n+check_for_implicit_index (gfc_symtree **st, gfc_symbol **sym)\n+{\n+  if ((*sym)->attr.flavor == FL_VARIABLE\n+      && (*sym)->ns != gfc_current_ns\n+      && (*sym)->attr.implied_index\n+      && (*sym)->attr.implicit_type\n+      && !(*sym)->attr.use_assoc)\n+    {\n+      int i;\n+      i = gfc_get_sym_tree ((*sym)->name, NULL, st);\n+      if (i)\n+\treturn MATCH_ERROR;\n+      *sym = (*st)->n.sym;\n+    }\n+  return MATCH_YES;\n+}\n+\n+\n /* Matches a variable name followed by anything that might follow it--\n    array reference, argument list of a function, etc.  */\n \n@@ -2024,7 +2046,14 @@ gfc_match_rvalue (gfc_expr **result)\n   e = NULL;\n   where = gfc_current_locus;\n \n+  /* If this is an implicit do loop index and implicitly typed,\n+     it should not be host associated.  */\n+  m = check_for_implicit_index (&symtree, &sym);\n+  if (m != MATCH_YES)\n+    return m;\n+\n   gfc_set_sym_referenced (sym);\n+  sym->attr.implied_index = 0;\n \n   if (sym->attr.function && sym->result == sym)\n     {\n@@ -2394,6 +2423,15 @@ match_variable (gfc_expr **result, int equiv_flag, int host_flag)\n   where = gfc_current_locus;\n \n   sym = st->n.sym;\n+\n+  /* If this is an implicit do loop index and implicitly typed,\n+     it should not be host associated.  */\n+  m = check_for_implicit_index (&st, &sym);\n+  if (m != MATCH_YES)\n+    return m;\n+\n+  sym->attr.implied_index = 0;\n+\n   gfc_set_sym_referenced (sym);\n   switch (sym->attr.flavor)\n     {"}, {"sha": "efd83efcae264035c11c1b0ebc0d9c7d69474aac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a3db5a366f36a48e6879ed17b9c5dbf87442808", "patch": "@@ -1,3 +1,8 @@\n+2007-04-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31204\n+\t* gfortran.dg/array_constructor_16.f90: New test.\n+\n 2007-04-15  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gcc.dg/pr19340.c, gcc.dg/tree-ssa/loop-1.c,"}, {"sha": "7c2e8d156c42df20d03b93f67db082587818ac11", "filename": "gcc/testsuite/gfortran.dg/array_constructor_16.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3db5a366f36a48e6879ed17b9c5dbf87442808/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_16.f90?ref=9a3db5a366f36a48e6879ed17b9c5dbf87442808", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+! Tests the fix for PR31204, in which 'i' below would be incorrectly\n+! host associated by the contained subroutines.  The checks for 'ii'\n+! and 'iii' have been added, since they can be host associated because\n+! of the explicit declarations in the main program.\n+!\n+! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n+!\n+  integer ii\n+  INTEGER, PARAMETER :: jmin(1:10) = (/ (i, i = 1, 10) /)\n+  INTEGER, PARAMETER :: kmin(1:10) = (/ (ii, ii = 1, 10) /)\n+  INTEGER, PARAMETER :: lmin(1:10) = (/ (iii, iii = 1, 10) /)\n+  integer iii\n+  CALL two\n+\n+CONTAINS\n+\n+  SUBROUTINE one\n+    i = 99\n+    ii = 99\n+    iii = 999\n+  END SUBROUTINE\n+\n+  SUBROUTINE two\n+    i = 0\n+    ii = 0\n+    iii = 0\n+    CALL one\n+    IF (i .NE. 0) CALL ABORT ()\n+    IF (ii .NE. 99) CALL ABORT ()\n+    IF (iii .NE. 999) CALL ABORT ()\n+  END SUBROUTINE\n+END\n+"}]}