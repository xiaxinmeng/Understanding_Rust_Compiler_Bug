{"sha": "80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "node_id": "C_kwDOANBUbNoAKDgwY2YyYzVlOGY0OTZiZWQ5YzZmYWNmNTVmOWFlMzFkMGQ5MGZkMjg", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2023-01-16T14:07:20Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2023-01-25T15:23:32Z"}, "message": "modula-2: Fixes for preprocessing [PR102343, PR108182].\n\nModula-2 uses the C preprocessor to implement handling for conditional\ncode and macros.  However, this is not done directly, because the process\nis applied recursively to imported definitions and modules.\n\nThe cc1gm2 executable records the parameters as a template command line\nneeded to create a composite 'cc1 -E' for each file to be preprocessed\nstarting with the main file from the original command line.\n\nThis patch fixes the capture of the C preprocessor template to include\nthe target information needed for correct multilib operation.\n\nIn order to match the existing semantics of '-E, -M and -MM' these have\nto be handled as a 'pre-processor only' job (i.e. the recursion is omitted\nand only the main file is processed).\n\nWhereas C-family front ends always pre-process, Modula-2 only does so\nwhen specifically requested (via the -fcpp option).\n\n'-MD, -MMD and -MQ' also require special handling, since (in principle)\nthese options can be applied to any command line (with -fcpp) providing\ndependency information as a by-product.\n\nTODO: the preprocessor is not able to determine def and mod dependencies\nfor Modula-2 and so the output of this only shows the object to module\ndep.  We should be able to append the .def and .mod dependencies.\n\nThe patch amends save-temps handling to cater for the preprocessor\nrecursion and to avoid writing saved files into the source directories.\n\nThe patch changes the extension for Modula-2 preprocessed source to .m2i\nto avoid clashes with .i.\n\nThe main driver code is amended to add default handlers for .mod and .m2i\nso that a useful error message will be emitted if the Modula-2 compiler\nis not built-in.\n\nThe compiler will now also handle code generation from a .m2i preprocessed\nsource.\n\nTODO: We should not need to pass the '-c' option to the compiler to alter\nthe processing of init code.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR modula2/102343\n\tPR modula2/108182\n\ngcc/ChangeLog:\n\n\t* gcc.cc: Provide default specs for Modula-2 so that when the\n\tlanguage is not built-in better diagnostics are emitted for\n\tattempts to use .mod or .m2i file extensions.\n\ngcc/m2/ChangeLog:\n\n\t* gm2-compiler/M2Comp.mod: Early exit for pre-processor-only jobs.\n\t* gm2-compiler/M2Options.def (SetPPOnly, GetPPOnly, SetMD, GetMD,\n\tSetMMD, GetMMD, SetMQ, GetMQ, SetObj, GetObj, SetDumpDir,\n\tGetDumpDir):New.\n\t* gm2-compiler/M2Options.mod:(SetPPOnly, GetPPOnly, SetMD, GetMD,\n\tSetMMD, GetMMD, SetMQ, GetMQ, SetObj, GetObj, SetDumpDir,\n\tGetDumpDir):New.\n\t* gm2-compiler/M2Preprocess.def (PreprocessModule): Add flag to\n\tindicate the main file.\n\t* gm2-compiler/M2Preprocess.mod: Handle Preprocess-only jobs,\n\thandle MD, MMD and MQ options.\n\t* gm2-gcc/m2options.h (M2Options_SetPPOnly, M2Options_GetPPOnly,\n\tM2Options_SetDumpDir, M2Options_SetMD, M2Options_GetMD,\n\tM2Options_SetMMD, M2Options_GetMMD, M2Options_SetMQ, M2Options_GetMQ,\n\tM2Options_SetObj, M2Options_GetObj): New.\n\t* gm2-gcc/m2type.cc (m2type_InitBaseTypes): Early exit for pre-\n\tprocessor-only jobs.\n\t* gm2-lang.cc (gm2_langhook_init): Handle preprocess-only commands.\n\t(gm2_langhook_option_lang_mask): Claim C and Driver options so that\n\twe can intercept them for building pre-processor commands.\n\t(gm2_langhook_init_options): Collect the preprocessor line here.\n\tSave options that have different actions for preprocessor and compile\n\tcommands.\n\t(gm2_langhook_handle_option): Only handle the modula-2 options here.\n\t(gm2_langhook_post_options): Do not create a back-end for pre-\n\tprocessor-only jobs.\n\t* gm2spec.cc (lang_specific_driver): Ignore PCH options, append a\n\tscaffold-main for cases where we are building a main module with\n\t-c.\n\t* lang-specs.h: Revise to handle preprocessor-only jobs and to\n\tconsume pre-processed files.\n\t* lang.opt: Remove Driver and C options copies (we claim these\n\tseparately).", "tree": {"sha": "f02f7767cecade575300675f1fd35e5c3992ed70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f02f7767cecade575300675f1fd35e5c3992ed70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d4c00cdaccc3decd07740e817387ce844ef3ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4c00cdaccc3decd07740e817387ce844ef3ac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4c00cdaccc3decd07740e817387ce844ef3ac9"}], "stats": {"total": 844, "additions": 619, "deletions": 225}, "files": [{"sha": "d8130024a8c41e56cb8783da2fa864290f6a7984", "filename": "gcc/gcc.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fgcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fgcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.cc?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -1423,6 +1423,7 @@ static const struct compiler default_compilers[] =\n   {\".r\", \"#Ratfor\", 0, 0, 0},\n   {\".go\", \"#Go\", 0, 1, 0},\n   {\".d\", \"#D\", 0, 1, 0}, {\".dd\", \"#D\", 0, 1, 0}, {\".di\", \"#D\", 0, 1, 0},\n+  {\".mod\", \"#Modula-2\", 0, 0, 0}, {\".m2i\", \"#Modula-2\", 0, 0, 0},\n   /* Next come the entries for C.  */\n   {\".c\", \"@c\", 0, 0, 1},\n   {\"@c\","}, {"sha": "05eaaccb554975bc8cb256ea1c71e40a323a7c80", "filename": "gcc/m2/gm2-compiler/M2Comp.mod", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-compiler%2FM2Comp.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-compiler%2FM2Comp.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Comp.mod?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -22,7 +22,8 @@ along with GNU Modula-2; see the file COPYING3.  If not see\n IMPLEMENTATION MODULE M2Comp ;\n \n \n-FROM M2Options IMPORT Statistics, Quiet, WholeProgram, ExtendedOpaque, GenModuleList ;\n+FROM M2Options IMPORT PPonly, Statistics, Quiet, WholeProgram,\n+                      ExtendedOpaque, GenModuleList ;\n \n FROM M2Pass IMPORT SetPassToPass0, SetPassToPass1, SetPassToPass2, SetPassToPassC, SetPassToPass3,\n                    SetPassToNoPass, SetPassToPassHidden ;\n@@ -60,11 +61,12 @@ FROM SymbolTable IMPORT GetSymName, IsDefImp, NulSym,\n                         ResolveConstructorTypes, SanityCheckConstants, IsDefinitionForC,\n                         IsBuiltinInModule, PutModLink, IsDefLink, IsModLink ;\n \n-FROM FIO IMPORT StdErr ;\n+FROM FIO IMPORT StdErr, StdOut ;\n FROM NameKey IMPORT Name, GetKey, KeyToCharStar, makekey ;\n FROM M2Printf IMPORT fprintf1 ;\n FROM M2Quiet IMPORT qprintf0, qprintf1, qprintf2 ;\n FROM DynamicStrings IMPORT String, InitString, KillString, InitStringCharStar, Dup, Mark, string ;\n+FROM M2Options IMPORT Verbose ;\n \n CONST\n    Debugging = FALSE ;\n@@ -126,6 +128,10 @@ PROCEDURE Compile (s: String) ;\n BEGIN\n    DoPass0(s) ;\n    FlushWarnings ; FlushErrors ;\n+   IF PPonly\n+   THEN\n+      RETURN\n+   END;\n    ResetForNewPass ; ResetErrorScope ;\n    qprintf0('Pass 1: scopes, enumerated types, imports and exports\\n') ;\n    DoPass1 ;\n@@ -198,7 +204,7 @@ VAR\n    name    : ADDRESS ;\n    isdefimp: BOOLEAN ;\n BEGIN\n-   IF OpenSource(PreprocessModule(s))\n+   IF OpenSource(s)\n    THEN\n       ExamineCompilationUnit(name, isdefimp) ;\n       IF isdefimp\n@@ -226,15 +232,26 @@ VAR\n    Sym     : CARDINAL ;\n    i       : CARDINAL ;\n    SymName,\n-   FileName: String ;\n+   FileName,\n+   PPSource: String ;\n BEGIN\n    P0Init ;\n    SetPassToPass0 ;\n-   PeepInto(s) ;\n+   (* Maybe preprocess the main file.  *)\n+   PPSource := PreprocessModule(s, TRUE);\n+   IF PPonly\n+   THEN\n+      RETURN\n+   END;\n+   PeepInto (PPSource) ;\n    Main := GetMainModule() ;\n    i := 1 ;\n    Sym := GetModuleNo(i) ;\n-   qprintf1('Compiling: %s\\n', s) ;\n+   qprintf1('Compiling: %s\\n', PPSource) ;\n+   IF Verbose\n+   THEN\n+      fprintf1(StdOut, 'Compiling: %s\\n', PPSource) ;\n+   END ;\n    qprintf0('Pass 0: lexical analysis, parsing, modules and associated filenames\\n') ;\n    WHILE Sym#NulSym DO\n       SymName := InitStringCharStar(KeyToCharStar(GetSymName(Sym))) ;\n@@ -243,7 +260,7 @@ BEGIN\n          IF FindSourceDefFile(SymName, FileName)\n          THEN\n             ModuleType := Definition ;\n-            IF OpenSource(AssociateDefinition(PreprocessModule(FileName), Sym))\n+            IF OpenSource(AssociateDefinition(PreprocessModule(FileName, FALSE), Sym))\n             THEN\n                IF NOT P0SyntaxCheck.CompilationUnit()\n                THEN\n@@ -280,15 +297,16 @@ BEGIN\n          (* only need to read implementation module if hidden types are declared or it is the main module *)\n          IF Main=Sym\n          THEN\n-            FileName := Dup(s)\n+            FileName := Dup (PPSource)\n          ELSE\n             IF FindSourceModFile (SymName, FileName)\n             THEN\n+               FileName := PreprocessModule (FileName, FALSE)\n             END\n          END ;\n          IF FileName#NIL\n          THEN\n-            IF OpenSource (AssociateModule (PreprocessModule (FileName), Sym))\n+            IF OpenSource (AssociateModule (Dup (FileName), Sym))\n             THEN\n                IF NOT P0SyntaxCheck.CompilationUnit()\n                THEN\n@@ -325,7 +343,7 @@ BEGIN\n             IF FindSourceModFile (SymName, FileName)\n             THEN\n                qprintf2 ('   Module %-20s : %s (linking)\\n', SymName, FileName) ;\n-               IF OpenSource (AssociateModule (PreprocessModule (FileName), Sym))\n+               IF OpenSource (AssociateModule (PreprocessModule (FileName, FALSE), Sym))\n                THEN\n                   PutModLink (Sym, TRUE) ;   (* This source is only used to determine link time info.  *)\n                   IF NOT P0SyntaxCheck.CompilationUnit ()"}, {"sha": "df42a4a5b659b7eda248a295d6a1cd7b7b111551", "filename": "gcc/m2/gm2-compiler/M2Options.def", "status": "modified", "additions": 84, "deletions": 6, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-compiler%2FM2Options.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-compiler%2FM2Options.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Options.def?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -52,11 +52,12 @@ EXPORT QUALIFIED SetReturnCheck, SetNilCheck, SetCaseCheck,\n \t\t SetWholeValueCheck, GetWholeValueCheck,\n                  SetLowerCaseKeywords,\n                  SetIndex, SetRange, SetWholeDiv, SetStrictTypeChecking,\n-                 Setc, Getc, SetUselist, GetUselist, GetUselistFilename,\n-                 SetShared, SetB,\n+                 Setc, Getc, SetPPOnly, GetPPOnly,\n+                 SetUselist, GetUselist, GetUselistFilename,\n+                 SetShared,\n \n                  Iso, Pim, Pim2, Pim3, Pim4,\n-                 cflag,\n+                 PPonly, cflag,\n                  PositiveModFloorDiv,\n                  Pedantic, Verbose, Statistics,\n                  UnboundedByReference, VerboseUnbounded,\n@@ -83,7 +84,7 @@ EXPORT QUALIFIED SetReturnCheck, SetNilCheck, SetCaseCheck,\n                  DebugBuiltins, setdefextension, setmodextension,\n                  SetStatistics, SetWall,\n                  SetSaveTemps, SetSaveTempsDir, SaveTemps, GetSaveTempsDir,\n-                 GenModuleList,\n+                 SetDumpDir, GetDumpDir, GenModuleList,\n                  CppArg, CppCommandLine, CppRemember,\n \t\t SetDebugFunctionLineNumbers, DebugFunctionLineNumbers,\n \t\t SetGenerateStatementNote, GenerateStatementNote,\n@@ -92,10 +93,11 @@ EXPORT QUALIFIED SetReturnCheck, SetNilCheck, SetCaseCheck,\n                  SetScaffoldMain, ScaffoldMain,\n                  SetRuntimeModuleOverride, GetRuntimeModuleOverride,\n                  SetGenModuleList, GetGenModuleFilename, SharedFlag,\n-                 GetB ;\n+                 SetB, GetB, SetMD, GetMD, SetMMD, GetMMD, SetObj, GetObj ;\n \n \n VAR\n+   PPonly,                       (* -E/M/MM present? - preprocessing only    *)\n    cflag,                        (* -c flag present?                         *)\n    Iso,                          (* -fiso use ISO SYSTEM.def                 *)\n    Pim,                          (* -fpim use PIM [234] SYSTEM.def           *)\n@@ -174,6 +176,18 @@ VAR\n    Coding,\n    Profiling               : BOOLEAN ;\n \n+(*\n+   SetPPOnly - set the PPonly to value (on E, M, MM).\n+*)\n+\n+PROCEDURE SetPPOnly (value: BOOLEAN) ;\n+\n+\n+(*\n+   GetPPOnly - get the PPonly (Preprocess only).\n+*)\n+\n+PROCEDURE GetPPOnly () : BOOLEAN ;\n \n (*\n    Setc - set the cflag (compile only flag -c) to value.\n@@ -195,13 +209,64 @@ PROCEDURE Getc () : BOOLEAN ;\n \n PROCEDURE SetB (arg: ADDRESS) ;\n \n-\n (*\n    GetB - returns argument to the -B option as a string or NIL if it were never set.\n *)\n \n PROCEDURE GetB () : ADDRESS ;\n \n+(*\n+   SetMD - assigns MD file to arg.\n+*)\n+\n+PROCEDURE SetMD (arg: ADDRESS) ;\n+\n+(*\n+   GetMD - returns the filename set for MD or NIL if it was never set.\n+*)\n+\n+PROCEDURE GetMD () : ADDRESS ;\n+\n+\n+(*\n+   SetMMD - assigns MMD file to arg.\n+*)\n+\n+PROCEDURE SetMMD (arg: ADDRESS) ;\n+\n+(*\n+   GetMMD - returns the filename set for MMD or NIL if it was never set.\n+*)\n+\n+PROCEDURE GetMMD () : ADDRESS ;\n+\n+(*\n+   SetMQ - assigns MQ file to arg.\n+*)\n+\n+PROCEDURE SetMQ (arg: ADDRESS) ;\n+\n+(*\n+   GetMQ - returns the filename set for MQ or NIL if it was never set.\n+*)\n+\n+PROCEDURE GetMQ () : ADDRESS ;\n+\n+(*\n+   SetScaffoldDynamic - set the -fscaffold-dynamic flag.\n+*)\n+\n+(*\n+   SetObj - assigns given object file to arg.\n+*)\n+\n+PROCEDURE SetObj (arg: ADDRESS) ;\n+\n+(*\n+   GetObj - returns the filename set for Object or NIL if it was never set.\n+*)\n+\n+PROCEDURE GetObj () : ADDRESS ;\n \n (*\n    SetScaffoldDynamic - set the -fscaffold-dynamic flag.\n@@ -784,6 +849,19 @@ PROCEDURE SetSaveTempsDir (arg: ADDRESS) ;\n \n PROCEDURE GetSaveTempsDir () : String ;\n \n+(*\n+   SetDumpDir - Specify dump dir.\n+*)\n+\n+PROCEDURE SetDumpDir (arg: ADDRESS) ;\n+\n+\n+(*\n+   GetDumpDir - return DumpDir or NIL.\n+*)\n+\n+PROCEDURE GetDumpDir () : String ;\n+\n \n (*\n    SetGenModuleList - set the GenModuleList flag to value and pass"}, {"sha": "865b85783679c410d0ec33d52f412a03e389df0d", "filename": "gcc/m2/gm2-compiler/M2Options.mod", "status": "modified", "additions": 137, "deletions": 2, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-compiler%2FM2Options.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-compiler%2FM2Options.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Options.mod?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -54,7 +54,12 @@ CONST\n \n VAR\n    Barg,\n+   MDarg,\n+   MMDarg,\n+   MQarg,\n+   CmdLineObj,\n    SaveTempsDir,\n+   DumpDir,\n    GenModuleListFilename,\n    UselistFilename,\n    RuntimeModuleOverride,\n@@ -132,6 +137,94 @@ BEGIN\n END GetB ;\n \n \n+(*\n+   SetMD - assigns MDarg to the filename from arg.\n+   This overrides any previous MMD.\n+*)\n+\n+PROCEDURE SetMD (arg: ADDRESS) ;\n+BEGIN\n+   MMDarg := KillString (MMDarg) ;\n+   MDarg := KillString (MDarg) ;\n+   MDarg := InitStringCharStar (arg)\n+END SetMD ;\n+\n+\n+(*\n+   GetMD - returns MDarg filename as a c-string or NIL if it was never set.\n+*)\n+\n+PROCEDURE GetMD () : ADDRESS ;\n+BEGIN\n+   RETURN string (MDarg)\n+END GetMD ;\n+\n+\n+(*\n+   SetMMD - assigns MMDarg to the filename from arg.\n+   This overrides any previous MD.\n+*)\n+\n+PROCEDURE SetMMD (arg: ADDRESS) ;\n+BEGIN\n+   MDarg := KillString (MDarg) ;\n+   MMDarg := KillString (MMDarg) ;\n+   MMDarg := InitStringCharStar (arg)\n+END SetMMD ;\n+\n+\n+(*\n+   GetMMD - returns MMDarg filename as a c-string or NIL if it was never set.\n+*)\n+\n+PROCEDURE GetMMD () : ADDRESS ;\n+BEGIN\n+   RETURN string (MMDarg)\n+END GetMMD ;\n+\n+\n+(*\n+   SetMQ - assigns MQarg to the filename from arg.\n+*)\n+\n+PROCEDURE SetMQ (arg: ADDRESS) ;\n+BEGIN\n+   MQarg := KillString (MQarg) ;\n+   MQarg := InitStringCharStar (arg)\n+END SetMQ ;\n+\n+\n+(*\n+   GetMMD - returns MQarg filename as a c-string or NIL if it was never set.\n+*)\n+\n+PROCEDURE GetMQ () : ADDRESS ;\n+BEGIN\n+   RETURN string (MQarg)\n+END GetMQ ;\n+\n+\n+(*\n+   SetObj - assigns CmdLineObj to the filename from arg.\n+*)\n+\n+PROCEDURE SetObj (arg: ADDRESS) ;\n+BEGIN\n+   CmdLineObj := KillString (CmdLineObj) ;\n+   CmdLineObj := InitStringCharStar (arg)\n+END SetObj ;\n+\n+\n+(*\n+   GetObj - returns CmdLineObj filename as a c-string or NIL if it was never set.\n+*)\n+\n+PROCEDURE GetObj () : ADDRESS ;\n+BEGIN\n+   RETURN string (CmdLineObj)\n+END GetObj ;\n+\n+\n (*\n    CppCommandLine - returns the Cpp command line and all arguments.\n                     NIL is returned if the -fcpp is absent.\n@@ -364,6 +457,25 @@ BEGIN\n END GetCpp ;\n \n \n+(*\n+   SetPPOnly - set the PPonly (preprocess only) to value.\n+*)\n+\n+PROCEDURE SetPPOnly (value: BOOLEAN) ;\n+BEGIN\n+   PPonly := value\n+END SetPPOnly ;\n+\n+(*\n+   GetPPOnly - get the PPonly (preprocess only).\n+*)\n+\n+PROCEDURE GetPPOnly () : BOOLEAN ;\n+BEGIN\n+   RETURN PPonly\n+END GetPPOnly ;\n+\n+\n (*\n    Setc - set the cflag (compile only flag -c) to value.\n *)\n@@ -1050,7 +1162,8 @@ END SetSaveTemps ;\n \n PROCEDURE SetSaveTempsDir (arg: ADDRESS) ;\n BEGIN\n-   SaveTempsDir := InitStringCharStar (arg)\n+   SaveTempsDir := InitStringCharStar (arg) ;\n+   SaveTemps := TRUE\n END SetSaveTempsDir ;\n \n \n@@ -1063,6 +1176,24 @@ BEGIN\n    RETURN SaveTempsDir\n END GetSaveTempsDir ;\n \n+(*\n+   SetDumpDir - Set the dump dir.\n+*)\n+\n+PROCEDURE SetDumpDir (arg: ADDRESS) ;\n+BEGIN\n+   DumpDir := InitStringCharStar (arg)\n+END SetDumpDir ;\n+\n+\n+(*\n+   GetDumpDir - return DumpDir or NIL.\n+*)\n+\n+PROCEDURE GetDumpDir () : String ;\n+BEGIN\n+   RETURN DumpDir\n+END GetDumpDir ;\n \n (*\n    SetScaffoldDynamic - set the -fscaffold-dynamic flag.\n@@ -1247,5 +1378,9 @@ BEGIN\n    GenModuleListFilename        := NIL ;\n    SharedFlag                   := FALSE ;\n    Barg                         := NIL ;\n-   SaveTempsDir                 := NIL\n+   MDarg                        := NIL ;\n+   MMDarg                       := NIL ;\n+   MQarg                        := NIL ;\n+   SaveTempsDir                 := NIL ;\n+   DumpDir                      := NIL\n END M2Options."}, {"sha": "02585800317255bee9b3ec969a2d60434de3634a", "filename": "gcc/m2/gm2-compiler/M2Preprocess.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-compiler%2FM2Preprocess.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-compiler%2FM2Preprocess.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Preprocess.def?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -45,7 +45,7 @@ EXPORT QUALIFIED PreprocessModule ;\n                       All temporary files will be deleted when the compiler exits.\n *)\n \n-PROCEDURE PreprocessModule (filename: String) : String ;\n+PROCEDURE PreprocessModule (filename: String; isMain: BOOLEAN) : String ;\n \n \n END M2Preprocess."}, {"sha": "ebd9cb9f6171881a29454284458a2bfff50a6101", "filename": "gcc/m2/gm2-compiler/M2Preprocess.mod", "status": "modified", "additions": 117, "deletions": 13, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-compiler%2FM2Preprocess.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-compiler%2FM2Preprocess.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Preprocess.mod?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -25,15 +25,16 @@ IMPLEMENTATION MODULE M2Preprocess ;\n FROM SYSTEM IMPORT WORD ;\n \n FROM DynamicStrings IMPORT string, InitString, Mark, KillString, EqualArray, InitStringCharStar,\n-                           Dup, ConCat, ConCatChar, RIndex, Slice ;\n+                           Dup, ConCat, ConCatChar, RIndex, Slice, Length ;\n \n FROM choosetemp IMPORT make_temp_file ;\n FROM pexecute IMPORT pexecute ;\n FROM libc IMPORT system, exit, unlink, printf, atexit ;\n FROM Lists IMPORT List, InitList, KillList, IncludeItemIntoList, ForeachItemInListDo ;\n FROM FIO IMPORT StdErr, StdOut ;\n FROM M2Printf IMPORT fprintf1 ;\n-FROM M2Options IMPORT Verbose, CppCommandLine, SaveTemps ;\n+FROM M2Options IMPORT Verbose, PPonly, GetObj, GetMD, GetMMD, GetMQ,\n+                      CppCommandLine, SaveTemps, GetSaveTempsDir, GetDumpDir ;\n FROM NameKey IMPORT Name, MakeKey, KeyToCharStar, makekey ;\n \n \n@@ -77,14 +78,80 @@ BEGIN\n    RETURN 0\n END RemoveFiles ;\n \n+(*\n+   Return the filename with no path.\n+*)\n+\n+PROCEDURE GetFileName (Path: String) : String ;\n+VAR\n+   fstart: INTEGER ;\n+BEGIN\n+   fstart := RIndex(Path, '/', 0) ;\n+   IF fstart=-1\n+   THEN\n+      fstart := 0\n+   ELSE\n+      fstart := fstart + 1\n+   END ;\n+   RETURN Dup (Slice(Path, fstart, Length (Path)))\n+END GetFileName ;\n+\n+\n+(*\n+   Return basename.\n+*)\n+\n+PROCEDURE BaseName (Path: String) : String ;\n+VAR\n+   ext,\n+   basename: INTEGER ;\n+BEGIN\n+   basename := RIndex(Path, '/', 0) ;\n+   IF basename=-1\n+   THEN\n+      basename := 0\n+   ELSE\n+      basename := basename + 1\n+   END ;\n+   ext := RIndex(Path, '.', 0) ;\n+   IF ext=-1\n+   THEN\n+      ext := 0\n+   END ;\n+   RETURN Dup (Slice(Path, basename, ext))\n+END BaseName ;\n \n (*\n-   MakeSaveTempsFileName - return a temporary file \"filename.i\".\n+   MakeSaveTempsFileName - return a temporary file like \n+   \"./filename.{def,mod}.m2i\" in the CWD unless SaveTempsDir = obj,\n+   when we put it in the dumpdir if that is specified (or fallback to '.'\n+   if not).\n+   We have to keep the original extension because that disambiguates .def\n+   and .mod files (otherwise, we'd need two 'preprocessed' extensions).\n *)\n \n PROCEDURE MakeSaveTempsFileName (filename: String) : String ;\n+VAR\n+   NewName,\n+   DumpDir,\n+   NewDir: String ;\n BEGIN\n-   RETURN ConCat (Dup (filename), InitString ('.i'))\n+   NewName := ConCat (GetFileName (filename), InitString ('.m2i')) ;\n+   NewDir := GetSaveTempsDir () ;\n+   DumpDir := GetDumpDir () ;\n+(*   IF Verbose\n+   THEN\n+      fprintf1 (StdOut, \"newname: %s\", NewName) ;\n+      fprintf1 (StdOut, \" NewDir: %s\", NewDir) ;\n+      fprintf1 (StdOut, \" DumpDir: %s\\n\", DumpDir)\n+   END ;\n+*)\n+   IF (NewDir AND EqualArray (NewDir, 'obj')) AND DumpDir\n+   THEN\n+      RETURN Dup (ConCat (DumpDir, NewName))\n+   ELSE\n+      RETURN Dup (ConCat (InitString ('./'), NewName))\n+   END ;\n END MakeSaveTempsFileName ;\n \n \n@@ -98,7 +165,7 @@ END MakeSaveTempsFileName ;\n                       All temporary files will be deleted when the compiler exits.\n *)\n \n-PROCEDURE PreprocessModule (filename: String) : String ;\n+PROCEDURE PreprocessModule (filename: String; isMain: BOOLEAN) : String ;\n VAR\n    tempfile,\n    command,\n@@ -107,18 +174,55 @@ BEGIN\n    command := CppCommandLine () ;\n    IF (command = NIL) OR EqualArray (command, '')\n    THEN\n-      RETURN filename\n+      RETURN Dup (filename)\n    ELSE\n-      IF SaveTemps\n+      commandLine := Dup (command) ;\n+      tempfile := NIL ;\n+      (* We support MD and MMD for the main file only, at present.  *)\n+      IF isMain OR PPonly\n+      THEN\n+         IF GetMD ()\n+         THEN\n+            tempfile := ConCat( Mark (InitString(' -MD ')),\n+                                InitStringCharStar (GetMD ()))\n+         ELSIF GetMMD ()\n+         THEN\n+            tempfile := ConCat( Mark (InitString(' -MMD ')),\n+                                InitStringCharStar (GetMMD ()))\n+         END ;\n+         IF tempfile\n+         THEN\n+            commandLine := ConCat (Dup (commandLine), Dup (tempfile)) ;\n+            (* We can only add MQ if we already have an MD/MMD.  *)\n+            IF GetMQ ()\n+            THEN\n+               tempfile := ConCat( Mark (InitString(' -MQ ')),\n+                                 InitStringCharStar (GetMQ ())) ;\n+               commandLine := ConCat (Dup (commandLine), Dup (tempfile))\n+            END ;\n+         END ;\n+      END ;\n+      (* The output file depends on whether we are in stand-alone PP mode, and\n+         if an output file is specified.  *)\n+      tempfile := NIL ;\n+      IF PPonly\n+      THEN\n+         IF GetObj()\n+         THEN\n+           tempfile := InitStringCharStar (GetObj ())\n+         END ;\n+      ELSIF SaveTemps\n       THEN\n-         tempfile := InitStringCharStar (MakeSaveTempsFileName (filename))\n+         tempfile := MakeSaveTempsFileName (filename)\n       ELSE\n-         tempfile := InitStringCharStar (make_temp_file (KeyToCharStar (MakeKey('i'))))\n+         tempfile := InitStringCharStar (make_temp_file (KeyToCharStar (MakeKey('.m2i'))))\n+      END ;\n+      commandLine := ConCat (ConCatChar (Dup (commandLine), ' '), filename) ;\n+      IF tempfile\n+      THEN\n+         commandLine := ConCat (ConCat (Dup (commandLine),\n+                                        Mark (InitString(' -o '))), tempfile) ;\n       END ;\n-      commandLine := Dup (command) ;\n-      commandLine := ConCat (ConCat (ConCat (ConCatChar (Dup (commandLine), ' '), filename),\n-                                     Mark (InitString(' -o '))),\n-                             tempfile) ;\n (*  use pexecute in the future\n       res := pexecute(string(Slice(commandLine, 0, Index(commandLine, ' ', 0))), etc etc );\n *)"}, {"sha": "92b4fd5b64c14b10735aee566305a1982b488142", "filename": "gcc/m2/gm2-gcc/m2options.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-gcc%2Fm2options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-gcc%2Fm2options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2options.h?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -61,6 +61,8 @@ EXTERN int M2Options_GetWholeValueCheck (void);\n \n EXTERN void M2Options_Setc (int value);\n EXTERN int M2Options_Getc (void);\n+EXTERN void M2Options_SetPPOnly (int value);\n+EXTERN int M2Options_GetPPOnly (void);\n \n EXTERN void M2Options_SetUselist (int value, const char *filename);\n EXTERN void M2Options_SetAutoInit (int value);\n@@ -112,6 +114,7 @@ EXTERN void M2Options_SetStrictTypeChecking (int value);\n EXTERN void M2Options_SetWall (int value);\n EXTERN void M2Options_SetSaveTemps (int value);\n EXTERN void M2Options_SetSaveTempsDir (const char *arg);\n+EXTERN void M2Options_SetDumpDir (const char *arg);\n EXTERN int M2Options_GetSaveTemps (void);\n EXTERN void M2Options_SetScaffoldStatic (int value);\n EXTERN void M2Options_SetScaffoldDynamic (int value);\n@@ -121,6 +124,14 @@ EXTERN void M2Options_SetGenModuleList (int value, const char *filename);\n EXTERN void M2Options_SetShared (int value);\n EXTERN void M2Options_SetB (const char *arg);\n EXTERN char *M2Options_GetB (void);\n+EXTERN void M2Options_SetMD (const char *arg);\n+EXTERN char *M2Options_GetMD (void);\n+EXTERN void M2Options_SetMMD (const char *arg);\n+EXTERN char *M2Options_GetMMD (void);\n+EXTERN void M2Options_SetMQ (const char *arg);\n+EXTERN char *M2Options_GetMQ (void);\n+EXTERN void M2Options_SetObj (const char *arg);\n+EXTERN char *M2Options_GetObj (void);\n \n #undef EXTERN\n #endif /* m2options_h.  */"}, {"sha": "634fad8df7c9b278b4f6c90b25f7c0cb01eb189d", "filename": "gcc/m2/gm2-gcc/m2type.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-gcc%2Fm2type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-gcc%2Fm2type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2type.cc?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -36,6 +36,7 @@ along with GNU Modula-2; see the file COPYING3.  If not see\n #include \"m2tree.h\"\n #include \"m2treelib.h\"\n #include \"m2type.h\"\n+#include \"m2options.h\"\n \n #undef USE_BOOLEAN\n static int broken_set_debugging_info = TRUE;\n@@ -1782,6 +1783,9 @@ m2type_InitBaseTypes (location_t location)\n \n   m2_packed_boolean_type_node = build_nonstandard_integer_type (1, TRUE);\n \n+  if (M2Options_GetPPOnly ())\n+    return;\n+\n   m2builtins_init (location);\n   m2except_InitExceptions (location);\n   m2expr_init (location);"}, {"sha": "4d9cae205a73d08f379c720eec4d63b94734a7a6", "filename": "gcc/m2/gm2-lang.cc", "status": "modified", "additions": 174, "deletions": 63, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-lang.cc?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -107,6 +107,8 @@ struct GTY (()) language_function\n \n /* Language hooks.  */\n \n+static void gm2_langhook_parse_file (void);\n+\n bool\n gm2_langhook_init (void)\n {\n@@ -120,6 +122,13 @@ gm2_langhook_init (void)\n \n   /* GNU Modula-2 uses exceptions.  */\n   using_eh_for_cleanups ();\n+\n+  if (M2Options_GetPPOnly ())\n+    {\n+      /* preprocess the file here.  */\n+      gm2_langhook_parse_file ();\n+      return false; /* Finish now, no further compilation.  */\n+    }\n   return true;\n }\n \n@@ -128,7 +137,9 @@ gm2_langhook_init (void)\n static unsigned int\n gm2_langhook_option_lang_mask (void)\n {\n-  return CL_ModulaX2;\n+  /* We need to process some driver options and pass through some C\n+     ones to build our preprocessing lines.  */\n+  return CL_ModulaX2 | CL_C | CL_DRIVER;\n }\n \n /* Initialize the options structure.  */\n@@ -155,27 +166,146 @@ gm2_langhook_init_options_struct (struct gcc_options *opts)\n \n static vec<bool> filename_cpp;\n \n+/* Build the C preprocessor command line here, since we need to include\n+   options that are not passed to the handle_option function.  */\n+\n void\n gm2_langhook_init_options (unsigned int decoded_options_count,\n                            struct cl_decoded_option *decoded_options)\n {\n   unsigned int i;\n   bool in_cpp_args = false;\n+  bool building_cpp_command = false;\n \n   for (i = 1; i < decoded_options_count; i++)\n     {\n-      switch (decoded_options[i].opt_index)\n-        {\n-        case OPT_fcpp_begin:\n-          in_cpp_args = true;\n-          break;\n-        case OPT_fcpp_end:\n-          in_cpp_args = false;\n-          break;\n-        case OPT_SPECIAL_input_file:\n-        case OPT_SPECIAL_program_name:\n-          filename_cpp.safe_push (in_cpp_args);\n-        }\n+      enum opt_code code = (enum opt_code)decoded_options[i].opt_index;\n+      const struct cl_option *option = &cl_options[code];\n+      const char *opt = (const char *)option->opt_text;\n+      const char *arg = decoded_options[i].arg;\n+      HOST_WIDE_INT value = decoded_options[i].value;\n+      switch (code)\n+\t{\n+\tcase OPT_fcpp:\n+\t  gcc_checking_assert (building_cpp_command);\n+\t  break;\n+\tcase OPT_fcpp_begin:\n+\t  in_cpp_args = true;\n+\t  building_cpp_command = true;\n+\t  break;\n+\tcase OPT_fcpp_end:\n+\t  in_cpp_args = false;\n+\t  break;\n+\tcase OPT_SPECIAL_input_file:\n+\t  filename_cpp.safe_push (in_cpp_args);\n+\t  break;\n+\n+\t/* C and driver opts that are not passed to the preprocessor for\n+\t   modula-2, but that we use internally for building preprocesor\n+\t   command lines.  */\n+\tcase OPT_B:\n+\t  M2Options_SetB (arg);\n+\t  break;\n+\tcase OPT_c:\n+\t  M2Options_Setc (value);\n+\t  break;\n+\tcase OPT_dumpdir:\n+\t  if (building_cpp_command)\n+\t    M2Options_SetDumpDir (arg);\n+\t  break;\n+\tcase OPT_save_temps:\n+\t  if (building_cpp_command)\n+\t    M2Options_SetSaveTemps (value);\n+\t  break;\n+\tcase OPT_save_temps_:\n+\t  if (building_cpp_command)\n+\t    /* Also sets SaveTemps. */\n+\t    M2Options_SetSaveTempsDir (arg);\n+\t  break;\n+\n+\tcase OPT_E:\n+\t  if (!in_cpp_args)\n+\t    {\n+\t      M2Options_SetPPOnly (value);\n+\t      building_cpp_command = true;\n+\t    }\n+\t  M2Options_CppArg (opt, arg, (option->flags & CL_JOINED)\n+\t\t\t      && !(option->flags & CL_SEPARATE));\n+\t  break;\n+\tcase OPT_M:\n+\tcase OPT_MM:\n+\t  gcc_checking_assert (building_cpp_command);\n+\t  M2Options_SetPPOnly (value);\n+\t  /* This is a preprocessor command.  */\n+\t  M2Options_CppArg (opt, arg, (option->flags & CL_JOINED)\n+\t\t\t      && !(option->flags & CL_SEPARATE));\n+\t  break;\n+\n+\t/* We can only use MQ when the command line is either PP-only, or\n+\t   when there is a MD/MMD on it.  */\n+\tcase OPT_MQ:\n+\t  M2Options_SetMQ (arg);\n+\t  break;\n+\n+\tcase OPT_o:\n+\t  M2Options_SetObj (arg);\n+\t  break;\n+\n+\t/* C and driver options that we ignore for the preprocessor lines.  */\n+\tcase OPT_fpch_deps:\n+\tcase OPT_fpch_preprocess:\n+\t  break;\n+\n+\tcase OPT_fplugin_:\n+\t  /* FIXME: We might need to handle this specially, since the modula-2\n+\t     plugin is not usable here, but others might be.\n+\t     For now skip all plugins to avoid fails with the m2 one.  */\n+\t  break;\n+\n+\t/* Preprocessor arguments with a following filename.  */\n+\tcase OPT_MD:\n+\tcase OPT_MMD:\n+\t  /* Save the filename associated with the MD/MMD which will also\n+\t     mark the option as used.  FIXME: maybe we should diagnose a\n+\t     missing filename here, rather than assert.  */\n+\t  gcc_checking_assert (i+1 < decoded_options_count);\n+\t  gcc_checking_assert (decoded_options[i+1].opt_index\n+\t\t\t       == OPT_SPECIAL_input_file);\n+\t  /* Pick up the following filename.  */\n+\t  arg = decoded_options[i+1].arg;\n+\t  if (code == OPT_MD)\n+\t    M2Options_SetMD (arg);\n+\t  else\n+\t    M2Options_SetMMD (arg);\n+\t  break;\n+\n+\t/* Options we act on and also pass to the preprocessor.  */\n+\tcase OPT_O:\n+\t  M2Options_SetOptimizing (value);\n+\t  if (building_cpp_command)\n+\t    M2Options_CppArg (opt, arg, (option->flags & CL_JOINED)\n+\t\t\t      && !(option->flags & CL_SEPARATE));\n+\t  break;\n+\tcase OPT_v:\n+\t  M2Options_SetVerbose (value);\n+\t  /* FALLTHROUGH */\n+\tdefault:\n+\t  if (code >= N_OPTS)\n+\t    {\n+\t      // FIXME remove debug.\n+\t      fprintf(stderr, \"%s : %s\\n\", opt, (arg ? arg : \"\"));\n+\t      break;\n+\t    }\n+\t  /* Do not pass Modula-2 args to the preprocessor, any that we care\n+\t     about here should already have been handled above.  */\n+\t  if (option->flags & CL_ModulaX2)\n+\t    break;\n+\t  /* Otherwise, add this to the CPP command line.  */\n+\t  if (building_cpp_command)\n+\t    M2Options_CppArg (opt, arg, (option->flags & CL_JOINED)\n+\t\t\t      && !(option->flags & CL_SEPARATE));\n+\t  break;\n+\t}\n     }\n   filename_cpp.safe_push (false);\n }\n@@ -197,28 +327,16 @@ gm2_langhook_handle_option (\n {\n   enum opt_code code = (enum opt_code)scode;\n \n+  const struct cl_option *option = &cl_options[scode];\n+  const char *opt = (const char *)option->opt_text;\n   /* ignore file names.  */\n   if (code == N_OPTS)\n     return 1;\n \n   switch (code)\n     {\n-    case OPT_B:\n-      M2Options_SetB (arg);\n-      return 1;\n-    case OPT_c:\n-      M2Options_Setc (value);\n-      return 1;\n     case OPT_I:\n-      if (insideCppArgs)\n-\t{\n-\t  const struct cl_option *option = &cl_options[scode];\n-\t  const char *opt = (const char *)option->opt_text;\n-\t  M2Options_CppArg (opt, arg, (option->flags & CL_JOINED)\n-\t\t\t\t       && !(option->flags & CL_SEPARATE));\n-\t}\n-      else\n-\tIpaths.push_back (arg);\n+      Ipaths.push_back (arg);\n       return 1;\n     case OPT_fiso:\n       M2Options_SetISO (value);\n@@ -358,6 +476,9 @@ gm2_langhook_handle_option (\n     case OPT_fcpp:\n       M2Options_SetCpp (value);\n       return 1;\n+    case OPT_fpreprocessed:\n+      /* Provided for compatibility; ignore for now.  */\n+      return 1;\n     case OPT_fcpp_begin:\n       insideCppArgs = TRUE;\n       return 1;\n@@ -396,31 +517,25 @@ gm2_langhook_handle_option (\n       return 1;\n       break;\n     case OPT_iprefix:\n+      iprefix = arg;\n+      return 1;\n+      break;\n     case OPT_imultilib:\n+      imultilib = arg;\n+      return 1;\n+      break;\n     case OPT_isystem:\n+      isystem.push_back (arg);\n+      return 1;\n+      break;\n     case OPT_iquote:\n+      iquote.push_back (arg);\n+      return 1;\n+      break;\n     case OPT_isysroot:\n-      if (insideCppArgs)\n-\t{\n-\t  const struct cl_option *option = &cl_options[scode];\n-\t  const char *opt = (const char *)option->opt_text;\n-\t  M2Options_CppArg (opt, arg, (option->flags & CL_JOINED)\n-\t\t\t\t       && !(option->flags & CL_SEPARATE));\n-\t}\n-      if (code == OPT_iprefix)\n-\tiprefix = arg;\n-      else if (code == OPT_imultilib)\n-\timultilib = arg;\n-      else if (code == OPT_iquote)\n-\tiquote.push_back (arg);\n-      else if (code == OPT_isystem)\n-\tisystem.push_back (arg);\n       /* Otherwise, ignored, at least for now. */\n       return 1;\n       break;\n-    case OPT_O:\n-      M2Options_SetOptimizing (value);\n-      return 1;\n     case OPT_quiet:\n       M2Options_SetQuiet (value);\n       return 1;\n@@ -445,24 +560,19 @@ gm2_langhook_handle_option (\n         }\n       else\n         return 0;\n-    case OPT_save_temps:\n-      M2Options_SetSaveTemps (value);\n-      return 1;\n-    case OPT_save_temps_:\n-      M2Options_SetSaveTempsDir (arg);\n-      return 1;\n-    case OPT_v:\n-      M2Options_SetVerbose (value);\n+    case OPT_o:\n+      /* Options we ignore, always.  */\n       return 1;\n     default:\n       if (insideCppArgs)\n-\t{\n-\t  const struct cl_option *option = &cl_options[scode];\n-\t  const char *opt = (const char *)option->opt_text;\n-\t  M2Options_CppArg (opt, arg, (option->flags & CL_JOINED)\n-\t\t\t\t       && !(option->flags & CL_SEPARATE));\n-\t  return 1;\n-\t}\n+\t/* Already handled.  */\n+\treturn 1;\n+      else if (option->flags & CL_DRIVER)\n+\t/* Ignore driver options we do not specifically use.  */\n+\treturn 1;\n+      else if (option->flags & CL_C)\n+\t/* Ignore C options we do not specifically use.  */\n+\treturn 1;\n       return 0;\n     }\n   return 0;\n@@ -574,7 +684,7 @@ gm2_langhook_post_options (const char **pfilename)\n     add_m2_import_paths (flibs);\n \n  /* Returning false means that the backend should be used.  */\n-  return false;\n+  return M2Options_GetPPOnly ();\n }\n \n /* Call the compiler for every source filename on the command line.  */\n@@ -597,7 +707,8 @@ static void\n gm2_langhook_parse_file (void)\n {\n   gm2_parse_input_files (in_fnames, num_in_fnames);\n-  write_globals ();\n+  if (!M2Options_GetPPOnly ())\n+    write_globals ();\n }\n \n static tree"}, {"sha": "bc93133243c427521fdeb6ad3fd2575c7af8e353", "filename": "gcc/m2/gm2spec.cc", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2spec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Fgm2spec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2spec.cc?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -133,8 +133,10 @@ static const char *add_include (const char *libpath, const char *library);\n \n static bool seen_scaffold_static = false;\n static bool seen_scaffold_dynamic = false;\n-static bool scaffold_dynamic = true; // Default uses -fscaffold-dynamic.\n+static bool seen_scaffold_main = false;\n static bool scaffold_static = false;\n+static bool scaffold_dynamic = true; // Default uses -fscaffold-dynamic.\n+static bool scaffold_main = false;\n static bool seen_gen_module_list = false;\n static bool seen_uselist = false;\n static bool uselist = false;\n@@ -525,17 +527,20 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  scaffold_static = decoded_options[i].value;\n \t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n \t  break;\n+\tcase OPT_fscaffold_main:\n+\t  seen_scaffold_main = true;\n+\t  scaffold_main = decoded_options[i].value;\n+\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n+\t  break;\n \tcase OPT_fgen_module_list_:\n \t  seen_gen_module_list = true;\n \t  gen_module_list = decoded_options[i].value;\n \t  if (gen_module_list)\n \t    gen_module_filename = decoded_options[i].arg;\n-\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n \t  break;\n \tcase OPT_fuse_list_:\n \t  seen_uselist = true;\n \t  uselist = decoded_options[i].value;\n-\t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n \t  break;\n \n \tcase OPT_nostdlib:\n@@ -592,6 +597,14 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  library = -1;\n \t  break;\n \n+\t/* PCH makes no sense here, we do not catch -output-pch on purpose,\n+\t   that should flag an error.  */\n+\tcase OPT_fpch_deps:\n+\tcase OPT_fpch_preprocess:\n+\tcase OPT_Winvalid_pch:\n+\t  args[i] |= SKIPOPT;\n+\t  break;\n+\n \tcase OPT_static:\n \t  static_link = 1;\n \t  break;\n@@ -694,8 +707,10 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n      We also add default scaffold linking options.  */\n \n   /* If we have not seen either uselist or gen_module_list and we need\n-     to link then we turn on -fgen_module_list=- as the default.  */\n-  if ((! (seen_uselist || seen_gen_module_list)) && linking)\n+     to link or compile a module list then we turn on -fgen_module_list=-\n+     as the default.  */\n+  if (!seen_uselist && !seen_gen_module_list\n+      && (linking || scaffold_main))\n     append_option (OPT_fgen_module_list_, \"-\", 1);\n \n   /* We checked that they were not both enabled above, if there was a set\n@@ -705,6 +720,14 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   if (seen_scaffold_static)\n     append_option (OPT_fscaffold_static, NULL, scaffold_static);\n \n+  /* If the user has set fscaffold-main specifically, use that.  Otherwise, if\n+     we are linking then set it so that we generate the relevant code for the\n+     main module.  */\n+  if (seen_scaffold_main)\n+    append_option (OPT_fscaffold_main, NULL, scaffold_main);\n+  else if (linking)\n+    append_option (OPT_fscaffold_main, NULL, true);\n+\n   if (allow_libraries)\n     {\n       /* If the libraries have not been specified by the user, select the"}, {"sha": "6228c3c5dad8bfa3f37fb8a92b6cfe3c1edf8d7b", "filename": "gcc/m2/lang-specs.h", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Flang-specs.h?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -21,19 +21,35 @@ along with GCC; see the file COPYING3.  If not see\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    GNU Modula-2.  */\n \n-/* Pass the preprocessor options on the command line together with\n-   the exec prefix.  */\n-\n+/* A spec for the 'integrated' preprocessor implementation for Modula-2.  */\n #define M2CPP \\\n-  \"%{fcpp:-fcpp-begin \" \\\n-  \"      -E -lang-asm -traditional-cpp \" \\\n-  \"      %(cpp_unique_options) -fcpp-end; \\\n-     : %I } \"\n+  \"%{E|M|MM|fcpp: %{E} -fcpp-begin \" \\\n+  \"      %{!E:-E} %(cpp_unique_options) -traditional-cpp -ansi \" \\\n+  \"      -fcpp-end %{B*} %{save-temps*} ; \\\n+     : %{v} %I } \"\n+\n+/* We have three modes:\n+   1. When the preprocessing step is explict and there is no following\n+      compilation.  Here we do a similar process to cc1 -E where most of\n+      the compilation is short-circuited.\n+   2. When we are mimicking an integrated preprocessor.  Here we use the\n+      modula-2 'fcpp' to construct a command line for the preprocessor and\n+      snarf save-temps and dumpdir inputs to try and be consistent.\n+   3. We can consume a pre-processed modula-2 source.  */\n \n   {\".mod\", \"@modula-2\", 0, 0, 0},\n   {\"@modula-2\",\n-      \"cc1gm2 \" M2CPP\n-      \"      %(cc1_options) %{B*} %{c*} %{+e*} %{I*} \"\n-      \"      %{i*} %{save-temps*} %{v} \"\n-      \"      %i %{!fsyntax-only:%(invoke_as)}\",\n-      0, 0, 0},\n+   /* For preprocessing we use cc1 but wrap it in cc1gm2.  */\n+   \"%{E|M|MM:\\\n+      cc1gm2 \" M2CPP \" %{!fcpp:-fcpp;:%{fcpp}} %{I*} %i } \\\n+    %{!E:%{!M:%{!MM:\\\n+      cc1gm2 \" M2CPP \" %(cc1_options) %{I*} %i %{c} \\\n+      %{MF*:%eto generate dependencies you must specify either '-M' or '-MM'} \\\n+      %{!fsyntax-only:%(invoke_as)} \\\n+    }}}\", 0, 0, 0},\n+  {\".m2i\", \"@modula-2-cpp-output\", 0, 0, 0},\n+  {\"@modula-2-cpp-output\",\n+   \"%{!M:%{!MM:%{!E: \\\n+      cc1gm2 %<fcpp %(cc1_options) %{v} %I -fmod=.mod.m2i -fdef=.def.m2i %{I*} \\\n+\t-fpreprocessed %i %{c} \\\n+    %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},"}, {"sha": "43d6ba5676714945232a6d03461bcaf2033faf80", "filename": "gcc/m2/lang.opt", "status": "modified", "additions": 6, "deletions": 113, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28/gcc%2Fm2%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Flang.opt?ref=80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "patch": "@@ -26,78 +26,6 @@\n Language\n Modula-2\n \n-B\n-Modula-2\n-; Documented in c.opt\n-\n-D\n-Modula-2\n-; Documented in c.opt\n-\n-E\n-Modula-2\n-; Documented in c.opt (passed to the preprocessor if -fcpp is used)\n-\n-I\n-Modula-2 Joined Separate\n-; Documented in c.opt\n-\n-L\n-Modula-2 Joined Separate\n-; Not documented\n-\n-M\n-Modula-2\n-; Documented in c.opt\n-\n-MD\n-Modula-2\n-; Documented in c.opt\n-\n-MF\n-Modula-2\n-; Documented in c.opt\n-\n-MG\n-Modula-2\n-; Documented in c.opt\n-\n-MM\n-Modula-2\n-; Documented in c.opt\n-\n-MMD\n-Modula-2\n-; Documented in c.opt\n-\n-Mmodules\n-Modula-2\n-; Documented in c.opt\n-\n-Mno-modules\n-Modula-2\n-; Documented in c.opt\n-\n-MP\n-Modula-2\n-; Documented in c.opt\n-\n-MQ\n-Modula-2\n-; Documented in c.opt\n-\n-MT\n-Modula-2\n-; Documented in c.opt\n-\n-P\n-Modula-2\n-; Documented in c.opt\n-\n-O\n-Modula-2\n-; Documented in c.opt\n-\n Wall\n Modula-2\n ; Documented in c.opt\n@@ -274,6 +202,10 @@ fpositive-mod-floor-div\n Modula-2\n force positive result from MOD and DIV result floor\n \n+fpreprocessed\n+Modula-2\n+; Documented in c.opt\n+\n fpthread\n Modula-2\n link against the pthread library (default on)\n@@ -350,53 +282,14 @@ fwholevalue\n Modula-2\n turns on runtime checking to check whether a whole number is about to exceed range\n \n-iprefix\n-Modula-2\n-; Documented in c.opt\n-\n-iquote\n-Modula-2\n-; Documented in c.opt\n-\n-isystem\n-Modula-2\n-; Documented in c.opt\n-\n-idirafter\n-Modula-2\n-; Documented in c.opt\n-\n-imultilib\n-Modula-2\n+;fworking-directory\n+;Modula-2\n ; Documented in c.opt\n \n lang-asm\n Modula-2\n ; Documented in c.opt\n \n--save-temps\n-Modula-2 Alias(save-temps)\n-\n-save-temps\n-Modula-2\n-save temporary preprocessed files\n-\n-save-temps=\n-Modula-2 Joined\n-save temporary preprocessed files\n-\n-traditional-cpp\n-Modula-2\n-; Documented in c.opt\n-\n-v\n-Modula-2\n-; Documented in c.opt\n-\n-x\n-Modula-2 Joined\n-specify the language from the compiler driver\n-\n static-libgm2\n Driver\n Link the standard Modula-2 libraries statically in the compilation."}]}