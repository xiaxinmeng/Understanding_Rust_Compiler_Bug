{"sha": "d4090614041c7803373a5064dfb82fdf6017971d", "node_id": "C_kwDOANBUbNoAKGQ0MDkwNjE0MDQxYzc4MDMzNzNhNTA2NGRmYjgyZmRmNjAxNzk3MWQ", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-03-18T23:23:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-17T08:25:41Z"}, "message": "[Ada] Use Actions field of freeze nodes for subprograms\n\nThis has a couple of advantages: 1) the actions are analyzed with checks\ndisabled and 2) they are considered elaboration code by Sem_Elab.\n\ngcc/ada/\n\n\t* exp_ch13.adb (Expand_N_Freeze_Entity): Delete freeze nodes for\n\tsubprograms only if they have no actions.\n\t* exp_ch6.adb (Freeze_Subprogram): Put the actions into the Actions\n\tfield of the freeze node instead of inserting them after it.\n\t* sem_elab.adb (Is_SPARK_Semantic_Target): Fix typo in comment.\n\t* gcc-interface/trans.cc (process_freeze_entity): Return early for\n\tfreeze nodes of subprograms with Interface_Alias set.", "tree": {"sha": "e31236cc5772f6f5521aa8c2635a1a3f220d8450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e31236cc5772f6f5521aa8c2635a1a3f220d8450"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4090614041c7803373a5064dfb82fdf6017971d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4090614041c7803373a5064dfb82fdf6017971d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4090614041c7803373a5064dfb82fdf6017971d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4090614041c7803373a5064dfb82fdf6017971d/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a08f366ae875ae70fba5014c94956cdbf7bf91db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a08f366ae875ae70fba5014c94956cdbf7bf91db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a08f366ae875ae70fba5014c94956cdbf7bf91db"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "6b6da818387257c5bc1a4946a52a6562a96b6841", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4090614041c7803373a5064dfb82fdf6017971d/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4090614041c7803373a5064dfb82fdf6017971d/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=d4090614041c7803373a5064dfb82fdf6017971d", "patch": "@@ -617,14 +617,12 @@ package body Exp_Ch13 is\n       elsif Is_Subprogram (E) then\n          Exp_Ch6.Freeze_Subprogram (N);\n \n-         --  Ada 2005 (AI-251): Remove the freezing node associated with the\n-         --  entities internally used by the frontend to register primitives\n-         --  covering abstract interfaces. The call to Freeze_Subprogram has\n-         --  already expanded the code that fills the corresponding entry in\n-         --  its secondary dispatch table and therefore the code generator\n-         --  has nothing else to do with this freezing node.\n-\n-         Delete := Present (Interface_Alias (E));\n+         --  Ada 2005 (AI-251): Remove the freeze nodes associated with the\n+         --  entities internally used by the front end to register primitives\n+         --  covering abstract interfaces if they have no side effects. For the\n+         --  others, gigi must discard them after evaluating the side effects.\n+\n+         Delete := Present (Interface_Alias (E)) and then No (Actions (N));\n       end if;\n \n       --  Analyze actions generated by freezing. The init_proc contains source"}, {"sha": "c3067f1a9c4b19febe6f0a8afd92b73f62ab7ea7", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4090614041c7803373a5064dfb82fdf6017971d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4090614041c7803373a5064dfb82fdf6017971d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=d4090614041c7803373a5064dfb82fdf6017971d", "patch": "@@ -7856,6 +7856,8 @@ package body Exp_Ch6 is\n          declare\n             Typ : constant Entity_Id := Scope (DTC_Entity (Subp));\n \n+            L : List_Id;\n+\n          begin\n             --  Handle private overridden primitives\n \n@@ -7895,8 +7897,17 @@ package body Exp_Ch6 is\n                      Register_Predefined_DT_Entry (Subp);\n                   end if;\n \n-                  Insert_Actions_After (N,\n-                    Register_Primitive (Loc, Prim => Subp));\n+                  L := Register_Primitive (Loc, Prim => Subp);\n+\n+                  if Is_Empty_List (L) then\n+                     null;\n+\n+                  elsif No (Actions (N)) then\n+                     Set_Actions (N, L);\n+\n+                  else\n+                     Append_List (L, Actions (N));\n+                  end if;\n                end if;\n             end if;\n          end;"}, {"sha": "e9701cdf72f0fabc65cf98c7630c4490993fd951", "filename": "gcc/ada/gcc-interface/trans.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4090614041c7803373a5064dfb82fdf6017971d/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4090614041c7803373a5064dfb82fdf6017971d/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.cc?ref=d4090614041c7803373a5064dfb82fdf6017971d", "patch": "@@ -9045,6 +9045,11 @@ process_freeze_entity (Node_Id gnat_node)\n   if (kind == E_Class_Wide_Type)\n     return;\n \n+  /* Likewise for the entities internally used by the front-end to register\n+     primitives covering abstract interfaces, see Expand_N_Freeze_Entity.  */\n+  if (Is_Subprogram (gnat_entity) && Present (Interface_Alias (gnat_entity)))\n+    return;\n+\n   /* Check for an old definition if this isn't an object with address clause,\n      since the saved GCC tree is the address expression in that case.  */\n   gnu_old"}, {"sha": "caebb1745771031280181513c9de148367d955df", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4090614041c7803373a5064dfb82fdf6017971d/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4090614041c7803373a5064dfb82fdf6017971d/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=d4090614041c7803373a5064dfb82fdf6017971d", "patch": "@@ -1845,7 +1845,7 @@ package body Sem_Elab is\n \n       function Is_SPARK_Semantic_Target (Id : Entity_Id) return Boolean;\n       pragma Inline (Is_SPARK_Semantic_Target);\n-      --  Determine whether arbitrary entity Id nodes a source or internally\n+      --  Determine whether arbitrary entity Id denotes a source or internally\n       --  generated subprogram which emulates SPARK semantics.\n \n       function Is_Subprogram_Inst (Id : Entity_Id) return Boolean;"}]}