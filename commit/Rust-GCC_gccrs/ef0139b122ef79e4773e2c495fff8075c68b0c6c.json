{"sha": "ef0139b122ef79e4773e2c495fff8075c68b0c6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYwMTM5YjEyMmVmNzllNDc3M2UyYzQ5NWZmZjgwNzVjNjhiMGM2Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-06-04T06:52:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-06-04T06:52:17Z"}, "message": "re PR rtl-optimization/10876 (Segfault when compiling KDE 3.1.2)\n\n\tPR optimization/10876\n\t* config/sparc/sparc.h (CONST_OK_FOR_LETTER): Add\n\tnew 'O' constraint for constant 4096.\n\t(CONST_DOUBLE_OK_FOR_LETTER_P): Likewise.\n\t* config/sparc/sparc.md (adddi3 expander): Canonicalize pattern.\n\tDo not transform into MINUS insn for constant 4096.\n\t(*adddi3_sp64 insn): Canonicalize pattern. Add new alternative\n\tfor constant 4096 as third operand.\n\t(addsi3 expander): Remove.\n\t(*addsi3 insn): Rename into 'addsi3'. Canonicalize pattern. Add\n\tnew alternative for constant 4096 as third operand.\n\t(subdi3 expander): Do not transform into PLUS insn for constant 4096.\n\t(*subdi3_sp64 insn): Add new alternative for constant 4096 as third\n\toperand.\n\t(subsi3 expander): Remove.\n\t(*subsi3 insn): Rename into 'subsi3'. Add new alternative for\n\tconstant 4096 as third operand.\n\t* doc/md.texi (Machine Constraints): Document new 'O' constraint for\n\tthe SPARC port.\n\nFrom-SVN: r67426", "tree": {"sha": "be14a3bf22a53b73725aac6854d2bfd28e23731e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be14a3bf22a53b73725aac6854d2bfd28e23731e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef0139b122ef79e4773e2c495fff8075c68b0c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0139b122ef79e4773e2c495fff8075c68b0c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0139b122ef79e4773e2c495fff8075c68b0c6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0139b122ef79e4773e2c495fff8075c68b0c6c/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74764b8442ec37ebd6b6b3e1fa154cee2f8a551a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74764b8442ec37ebd6b6b3e1fa154cee2f8a551a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74764b8442ec37ebd6b6b3e1fa154cee2f8a551a"}], "stats": {"total": 177, "additions": 94, "deletions": 83}, "files": [{"sha": "31ba84f62e091a2f0b7252e330c0e45acdb27e8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef0139b122ef79e4773e2c495fff8075c68b0c6c", "patch": "@@ -1,3 +1,25 @@\n+2003-06-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/10876\n+\t* config/sparc/sparc.h (CONST_OK_FOR_LETTER): Add\n+\tnew 'O' constraint for constant 4096.\n+\t(CONST_DOUBLE_OK_FOR_LETTER_P): Likewise.\n+\t* config/sparc/sparc.md (adddi3 expander): Canonicalize pattern.\n+\tDo not transform into MINUS insn for constant 4096.\n+\t(*adddi3_sp64 insn): Canonicalize pattern. Add new alternative\n+\tfor constant 4096 as third operand.\n+\t(addsi3 expander): Remove.\n+\t(*addsi3 insn): Rename into 'addsi3'. Canonicalize pattern. Add\n+\tnew alternative for constant 4096 as third operand.\n+\t(subdi3 expander): Do not transform into PLUS insn for constant 4096.\n+\t(*subdi3_sp64 insn): Add new alternative for constant 4096 as third\n+\toperand.\n+\t(subsi3 expander): Remove.\n+\t(*subsi3 insn): Rename into 'subsi3'. Add new alternative for\n+\tconstant 4096 as third operand.\n+\t* doc/md.texi (Machine Constraints): Document new 'O' constraint for\n+\tthe SPARC port.\n+\n 2003-06-03  Chris Demetriou  <cgd@broadcom.com>\n \n \t* config/mips/t-linux64 (CRTSTUFF_T_CFLAGS_S): Define."}, {"sha": "49f9a384711cba3dd2acc671f1540fdab5a757fc", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=ef0139b122ef79e4773e2c495fff8075c68b0c6c", "patch": "@@ -1381,7 +1381,8 @@ extern char leaf_reg_remap[];\n    `K' is used for constants which can be loaded with a single sethi insn.\n    `L' is used for the range of constants supported by the movcc insns.\n    `M' is used for the range of constants supported by the movrcc insns.\n-   `N' is like K, but for constants wider than 32 bits.  */\n+   `N' is like K, but for constants wider than 32 bits.\n+   `O' is used for the range which is just 4096.  */\n \n #define SPARC_SIMM10_P(X) ((unsigned HOST_WIDE_INT) (X) + 0x200 < 0x400)\n #define SPARC_SIMM11_P(X) ((unsigned HOST_WIDE_INT) (X) + 0x400 < 0x800)\n@@ -1405,6 +1406,7 @@ extern char leaf_reg_remap[];\n    : (C) == 'L' ? SPARC_SIMM11_P (VALUE)\t\t\\\n    : (C) == 'M' ? SPARC_SIMM10_P (VALUE)\t\t\\\n    : (C) == 'N' ? SPARC_SETHI_P (VALUE)\t\t\t\\\n+   : (C) == 'O' ? (VALUE) == 4096\t\t\t\\\n    : 0)\n \n /* Similar, but for floating constants, and defining letters G and H.\n@@ -1413,6 +1415,7 @@ extern char leaf_reg_remap[];\n #define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\\\n   ((C) == 'G' ? fp_zero_operand (VALUE, GET_MODE (VALUE))\t\\\n    : (C) == 'H' ? arith_double_operand (VALUE, DImode)\t\t\\\n+   : (C) == 'O' ? arith_double_4096_operand (VALUE, DImode)\t\\\n    : 0)\n \n /* Given an rtx X being reloaded into a reg required to be"}, {"sha": "ebe9d2b3d50b7278c6c38f239a96bc886a8eb4c4", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 30, "deletions": 82, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=ef0139b122ef79e4773e2c495fff8075c68b0c6c", "patch": "@@ -4748,13 +4748,11 @@\n ;;- arithmetic instructions\n \n (define_expand \"adddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n-\t\t (match_operand:DI 2 \"arith_double_add_operand\" \"rHI\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t (match_operand:DI 2 \"arith_double_add_operand\" \"\")))]\n   \"\"\n {\n-  HOST_WIDE_INT i;\n-\n   if (! TARGET_ARCH64)\n     {\n       emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n@@ -4765,21 +4763,6 @@\n \t\t\t\t   gen_rtx_REG (CCmode, SPARC_ICC_REG)))));\n       DONE;\n     }\n-  if (arith_double_4096_operand(operands[2], DImode))\n-    {\n-      switch (GET_CODE (operands[1]))\n-\t{\n-\tcase CONST_INT: i = INTVAL (operands[1]); break;\n-\tcase CONST_DOUBLE: i = CONST_DOUBLE_LOW (operands[1]); break;\n-\tdefault:\n-\t  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t\t  gen_rtx_MINUS (DImode, operands[1],\n-\t\t\t\t\t\t GEN_INT(-4096))));\n-\t  DONE;\n-\t}\n-      emit_insn (gen_movdi (operands[0], GEN_INT (i + 4096)));\n-      DONE;\n-    }\n })\n \n (define_insn_and_split \"adddi3_insn_sp32\"\n@@ -4945,40 +4928,24 @@\n   [(set_attr \"length\" \"2\")])\n \n (define_insn \"*adddi3_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n-\t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\" \"%r,r\")\n+\t\t (match_operand:DI 2 \"arith_double_add_operand\" \"rHI,O\")))]\n   \"TARGET_ARCH64\"\n-  \"add\\t%1, %2, %0\")\n-\n-(define_expand \"addsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n-\t(plus:SI (match_operand:SI 1 \"arith_operand\" \"%r,d\")\n-\t\t (match_operand:SI 2 \"arith_add_operand\" \"rI,d\")))]\n-  \"\"\n-{\n-  if (arith_4096_operand(operands[2], SImode))\n-    {\n-      if (GET_CODE (operands[1]) == CONST_INT)\n-\temit_insn (gen_movsi (operands[0],\n-\t\t\t      GEN_INT (INTVAL (operands[1]) + 4096)));\n-      else\n-\temit_insn (gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t\tgen_rtx_MINUS (SImode, operands[1],\n-\t\t\t\t\t       GEN_INT(-4096))));\n-      DONE;\n-    }\n-})\n+  \"@\n+   add\\t%1, %2, %0\n+   sub\\t%1, -%2, %0\")\n \n-(define_insn \"*addsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n-\t(plus:SI (match_operand:SI 1 \"arith_operand\" \"%r,d\")\n-\t\t (match_operand:SI 2 \"arith_operand\" \"rI,d\")))]\n+(define_insn \"addsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,d\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r,r,d\")\n+\t\t (match_operand:SI 2 \"arith_add_operand\" \"rI,O,d\")))]\n   \"\"\n   \"@\n    add\\t%1, %2, %0\n+   sub\\t%1, -%2, %0\n    fpadd32s\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")])\n+  [(set_attr \"type\" \"*,*,fp\")])\n \n (define_insn \"*cmp_cc_plus\"\n   [(set (reg:CC_NOOV 100)\n@@ -5021,9 +4988,9 @@\n   [(set_attr \"type\" \"compare\")])\n \n (define_expand \"subdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:DI 2 \"arith_double_add_operand\" \"rHI\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t  (match_operand:DI 2 \"arith_double_add_operand\" \"\")))]\n   \"\"\n {\n   if (! TARGET_ARCH64)\n@@ -5036,13 +5003,6 @@\n \t\t\t\t   gen_rtx_REG (CCmode, SPARC_ICC_REG)))));\n       DONE;\n     }\n-  if (arith_double_4096_operand(operands[2], DImode))\n-    {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t      gen_rtx_PLUS (DImode, operands[1],\n-\t\t\t\t\t    GEN_INT(-4096))));\n-      DONE;\n-    }\n })\n \n (define_insn_and_split \"*subdi3_sp32\"\n@@ -5124,36 +5084,24 @@\n   [(set_attr \"length\" \"2\")])\n \n (define_insn \"*subdi3_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(minus:DI (match_operand:DI 1 \"register_operand\" \"r,r\")\n+\t\t  (match_operand:DI 2 \"arith_double_add_operand\" \"rHI,O\")))]\n   \"TARGET_ARCH64\"\n-  \"sub\\t%1, %2, %0\")\n-\n-(define_expand \"subsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n-\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r,d\")\n-\t\t  (match_operand:SI 2 \"arith_add_operand\" \"rI,d\")))]\n-  \"\"\n-{\n-  if (arith_4096_operand(operands[2], SImode))\n-    {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t      gen_rtx_PLUS (SImode, operands[1],\n-\t\t\t\t\t    GEN_INT(-4096))));\n-      DONE;\n-    }\n-})\n+  \"@\n+   sub\\t%1, %2, %0\n+   add\\t%1, -%2, %0\")\n \n-(define_insn \"*subsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n-\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r,d\")\n-\t\t  (match_operand:SI 2 \"arith_operand\" \"rI,d\")))]\n+(define_insn \"subsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,d\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r,r,d\")\n+\t\t  (match_operand:SI 2 \"arith_add_operand\" \"rI,O,d\")))]\n   \"\"\n   \"@\n    sub\\t%1, %2, %0\n+   add\\t%1, -%2, %0\n    fpsub32s\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")])\n+  [(set_attr \"type\" \"*,*,fp\")])\n \n (define_insn \"*cmp_minus_cc\"\n   [(set (reg:CC_NOOV 100)"}, {"sha": "8b319cfb4c67914414b3299dd31c48786f8f95b8", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=ef0139b122ef79e4773e2c495fff8075c68b0c6c", "patch": "@@ -2057,6 +2057,9 @@ Same as @samp{K}, except that it verifies that bits that are not in the\n lower 32-bit range are all zero.  Must be used instead of @samp{K} for\n modes wider than @code{SImode}\n \n+@item O\n+The constant 4096\n+\n @item G\n Floating-point zero\n "}, {"sha": "c5c95070dd4686d3b9e306334be922bcd3f6a75b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef0139b122ef79e4773e2c495fff8075c68b0c6c", "patch": "@@ -1,3 +1,8 @@\n+2003-06-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.c-torture/compile/20030604-1.c: New test.\n+\t* gcc.dg/sparc-constant-1.c: New test.\n+\n 2003-06-03  Glen Nakamura  <glen@imodulo.com>\n \n  \t* gcc.dg/20020525-1.c: Replace 0x5a5a5a5a with -1."}, {"sha": "7e36bfeb39e91bf88bceebad6e73b57badaabf8f", "filename": "gcc/testsuite/gcc.c-torture/compile/20030604-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030604-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030604-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030604-1.c?ref=ef0139b122ef79e4773e2c495fff8075c68b0c6c", "patch": "@@ -0,0 +1,18 @@\n+/* PR optimization/10876 */\n+/* Contributed by Christian Ehrhardt */\n+\n+/* Verify that the SPARC port doesn't emit\n+   (minus) (reg) (const_int) insns.  */\n+\n+void f(void)\n+{\n+  unsigned int butterfly, block, offset;\n+  double *Z;\n+\n+  for (block = 0; block < 512; block += 512) {\n+    double T1re, T2re;\n+    offset = butterfly + block;\n+    T1re += T2re;\n+    T2re = Z[offset] + T1re;\n+  }\n+}"}, {"sha": "bb4b1bce4f837a7898df4e7eb7969d8dbda1feed", "filename": "gcc/testsuite/gcc.dg/sparc-constant-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Ftestsuite%2Fgcc.dg%2Fsparc-constant-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0139b122ef79e4773e2c495fff8075c68b0c6c/gcc%2Ftestsuite%2Fgcc.dg%2Fsparc-constant-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsparc-constant-1.c?ref=ef0139b122ef79e4773e2c495fff8075c68b0c6c", "patch": "@@ -0,0 +1,12 @@\n+/* PR optimization/10876 */\n+/* { dg-do compile { target sparc*-*-* } } */\n+\n+/* Verify that adding the constant 4096 is turned\n+   into substracting the constant -4096. */\n+\n+int foo(int a)\n+{\n+  return a+4096;\n+}\n+\n+/* { dg-final { scan-assembler \"sub\" } } */"}]}