{"sha": "d4fd46371a6fd708c4c16ccd7b56410d9cfc72e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmZDQ2MzcxYTZmZDcwOGM0YzE2Y2NkN2I1NjQxMGQ5Y2ZjNzJlNg==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2020-02-28T21:21:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-09T08:09:03Z"}, "message": "[Ada] Spurious overlap error on zero-sized arrays with -gnateV\n\n2020-06-09  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Modify expansion\n\tof 'Overlaps_Storage to take into account zero sized arrays.", "tree": {"sha": "8dc46e1ad7b2695f07de4f532125936315a3b69e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dc46e1ad7b2695f07de4f532125936315a3b69e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4fd46371a6fd708c4c16ccd7b56410d9cfc72e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fd46371a6fd708c4c16ccd7b56410d9cfc72e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4fd46371a6fd708c4c16ccd7b56410d9cfc72e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fd46371a6fd708c4c16ccd7b56410d9cfc72e6/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339"}], "stats": {"total": 91, "additions": 64, "deletions": 27}, "files": [{"sha": "e907b8c2fd707d619e763f6f4423b9da4dd86853", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 64, "deletions": 27, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4fd46371a6fd708c4c16ccd7b56410d9cfc72e6/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4fd46371a6fd708c4c16ccd7b56410d9cfc72e6/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=d4fd46371a6fd708c4c16ccd7b56410d9cfc72e6", "patch": "@@ -4783,27 +4783,31 @@ package body Exp_Attr is\n \n       when Attribute_Overlaps_Storage => Overlaps_Storage : declare\n          Loc : constant Source_Ptr := Sloc (N);\n+         X   : constant Node_Id    := Prefix (N);\n+         Y   : constant Node_Id    := First (Expressions (N));\n \n-         X   : constant Node_Id := Prefix (N);\n-         Y   : constant Node_Id := First (Expressions (N));\n          --  The arguments\n \n          X_Addr, Y_Addr : Node_Id;\n-         --  the expressions for their integer addresses\n+\n+         --  The expressions for their integer addresses\n \n          X_Size, Y_Size : Node_Id;\n-         --  the expressions for their sizes\n+\n+         --  The expressions for their sizes\n \n          Cond : Node_Id;\n \n       begin\n          --  Attribute expands into:\n \n-         --    if X'Address < Y'address then\n-         --      (X'address + X'Size - 1) >= Y'address\n-         --    else\n-         --      (Y'address + Y'size - 1) >= X'Address\n-         --    end if;\n+         --    (if X'Size = 0 or else Y'Size = 0 then\n+         --       False\n+         --     else\n+         --       (if X'Address <= Y'Address then\n+         --         (X'Address + X'Size - 1) >= Y'Address\n+         --        else\n+         --         (Y'Address + Y'Size - 1) >= X'Address))\n \n          --  with the proper address operations. We convert addresses to\n          --  integer addresses to use predefined arithmetic. The size is\n@@ -4846,29 +4850,62 @@ package body Exp_Attr is\n               Left_Opnd  => X_Addr,\n               Right_Opnd => Y_Addr);\n \n+         --  Perform the rewriting\n+\n          Rewrite (N,\n            Make_If_Expression (Loc, New_List (\n-             Cond,\n \n-             Make_Op_Ge (Loc,\n-               Left_Opnd   =>\n-                 Make_Op_Add (Loc,\n-                   Left_Opnd  => New_Copy_Tree (X_Addr),\n-                   Right_Opnd =>\n-                     Make_Op_Subtract (Loc,\n-                       Left_Opnd  => X_Size,\n-                       Right_Opnd => Make_Integer_Literal (Loc, 1))),\n-               Right_Opnd => Y_Addr),\n+             --  Generate a check for zero sized things like a null record with\n+             --  size zero or an array with zero length since they have no\n+             --  opportunity of overlapping.\n+\n+             --  Without this check a zero-sized object can trigger a false\n+             --  runtime result if its compared against another object\n+             --  in its declarative region due to the zero-sized object having\n+             --  the same address.\n \n-             Make_Op_Ge (Loc,\n+             Make_Or_Else (Loc,\n                Left_Opnd  =>\n-                 Make_Op_Add (Loc,\n-                   Left_Opnd  => New_Copy_Tree (Y_Addr),\n-                   Right_Opnd =>\n-                     Make_Op_Subtract (Loc,\n-                       Left_Opnd  => Y_Size,\n-                       Right_Opnd => Make_Integer_Literal (Loc, 1))),\n-               Right_Opnd => X_Addr))));\n+                 Make_Op_Eq (Loc,\n+                   Left_Opnd  =>\n+                     Make_Attribute_Reference (Loc,\n+                       Attribute_Name => Name_Size,\n+                       Prefix         => New_Copy_Tree (X)),\n+                   Right_Opnd => Make_Integer_Literal (Loc, 0)),\n+               Right_Opnd =>\n+                 Make_Op_Eq (Loc,\n+                   Left_Opnd  =>\n+                     Make_Attribute_Reference (Loc,\n+                       Attribute_Name => Name_Size,\n+                       Prefix         => New_Copy_Tree (Y)),\n+                   Right_Opnd => Make_Integer_Literal (Loc, 0))),\n+\n+             New_Occurrence_Of (Standard_False, Loc),\n+\n+             --  Non-size zero overlap check\n+\n+             Make_If_Expression (Loc, New_List (\n+               Cond,\n+\n+               Make_Op_Ge (Loc,\n+                 Left_Opnd   =>\n+                   Make_Op_Add (Loc,\n+                    Left_Opnd  => New_Copy_Tree (X_Addr),\n+                     Right_Opnd =>\n+                       Make_Op_Subtract (Loc,\n+                         Left_Opnd  => X_Size,\n+                         Right_Opnd => Make_Integer_Literal (Loc, 1))),\n+                 Right_Opnd => Y_Addr),\n+\n+               Make_Op_Ge (Loc,\n+                 Left_Opnd   =>\n+                   Make_Op_Add (Loc,\n+                     Left_Opnd  => New_Copy_Tree (Y_Addr),\n+                     Right_Opnd =>\n+                       Make_Op_Subtract (Loc,\n+                         Left_Opnd  => Y_Size,\n+                         Right_Opnd => Make_Integer_Literal (Loc, 1))),\n+                 Right_Opnd => X_Addr))))));\n \n          Analyze_And_Resolve (N, Standard_Boolean);\n       end Overlaps_Storage;"}]}