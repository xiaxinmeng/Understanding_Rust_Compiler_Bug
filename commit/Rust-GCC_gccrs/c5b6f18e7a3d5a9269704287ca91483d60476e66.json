{"sha": "c5b6f18e7a3d5a9269704287ca91483d60476e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzViNmYxOGU3YTNkNWE5MjY5NzA0Mjg3Y2E5MTQ4M2Q2MDQ3NmU2Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-02-29T23:43:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-02-29T23:43:29Z"}, "message": "re PR middle-end/13448 (gcc 3.3.2, internal error when -O3 and trying to modify function const arg)\n\n\tPR middle-end/13448\n\t* c-tree.h (readonly_warning): Rename to ...\n\t(readonly_error): ... this.\n\t* c-typeck.c (build_unary_op): Adjust accordingly.\n\t(readonly_warning): Rename to ...\n\t(readonly_error): ... this and issue errors, not warnings.\n\t(build_modify_expr): Call readonly_error, not readonly_warning.\n\t(c_expand_asm_operands): Likewise.\n\t* tree-inline.c (optimize_inline_calls): Do not inline functions\n\tafter errors have occurred.\n\n\tPR middle-end/13448\n\t* gcc.dg/inline-5.c: New test.\n\t* gcc.dg/always-inline.c: Split out tests into ...\n\t* gcc.dg/always-inline2.c: ... this and ...\n\t* gcc.dg/always-inline3.c: ... this.\n\nFrom-SVN: r78682", "tree": {"sha": "79f67c731f4bdf068313a3e2b873f2feb80a0d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79f67c731f4bdf068313a3e2b873f2feb80a0d5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5b6f18e7a3d5a9269704287ca91483d60476e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b6f18e7a3d5a9269704287ca91483d60476e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b6f18e7a3d5a9269704287ca91483d60476e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b6f18e7a3d5a9269704287ca91483d60476e66/comments", "author": null, "committer": null, "parents": [{"sha": "39876352716051ef43f55ba526b907ae86ae55a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39876352716051ef43f55ba526b907ae86ae55a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39876352716051ef43f55ba526b907ae86ae55a9"}], "stats": {"total": 98, "additions": 71, "deletions": 27}, "files": [{"sha": "6d0f8ce21a9b6a798a2fd8c707022109b7d56e7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5b6f18e7a3d5a9269704287ca91483d60476e66", "patch": "@@ -1,3 +1,16 @@\n+2004-02-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR middle-end/13448\n+\t* c-tree.h (readonly_warning): Rename to ...\n+\t(readonly_error): ... this.\n+\t* c-typeck.c (build_unary_op): Adjust accordingly.\n+\t(readonly_warning): Rename to ...\n+\t(readonly_error): ... this and issue errors, not warnings.\n+\t(build_modify_expr): Call readonly_error, not readonly_warning.\n+\t(c_expand_asm_operands): Likewise.\n+\t* tree-inline.c (optimize_inline_calls): Do not inline functions\n+\tafter errors have occurred.\n+\n 2004-02-29  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* configure.ac: Rearrange some threading code for clarity;"}, {"sha": "6da67df0f2f579120964f7d97be86665409608dc", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=c5b6f18e7a3d5a9269704287ca91483d60476e66", "patch": "@@ -268,7 +268,7 @@ extern tree build_array_ref (tree, tree);\n extern tree build_external_ref (tree, int);\n extern tree parser_build_binary_op (enum tree_code, tree, tree);\n extern int c_tree_expr_nonnegative_p (tree);\n-extern void readonly_warning (tree, const char *);\n+extern void readonly_error (tree, const char *);\n extern tree build_conditional_expr (tree, tree, tree);\n extern tree build_compound_expr (tree);\n extern tree c_cast_expr (tree, tree);"}, {"sha": "ffb4468af2acfe1edf935bad487a43093d2b484a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c5b6f18e7a3d5a9269704287ca91483d60476e66", "patch": "@@ -2387,10 +2387,10 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \n \t/* Report a read-only lvalue.  */\n \tif (TREE_READONLY (arg))\n-\t  readonly_warning (arg,\n-\t\t\t    ((code == PREINCREMENT_EXPR\n-\t\t\t      || code == POSTINCREMENT_EXPR)\n-\t\t\t     ? \"increment\" : \"decrement\"));\n+\t  readonly_error (arg,\n+\t\t\t  ((code == PREINCREMENT_EXPR\n+\t\t\t    || code == POSTINCREMENT_EXPR)\n+\t\t\t   ? \"increment\" : \"decrement\"));\n \n \tif (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE)\n \t  val = boolean_increment (code, arg);\n@@ -2545,21 +2545,21 @@ lvalue_or_else (tree ref, const char *msgid)\n /* Warn about storing in something that is `const'.  */\n \n void\n-readonly_warning (tree arg, const char *msgid)\n+readonly_error (tree arg, const char *msgid)\n {\n   if (TREE_CODE (arg) == COMPONENT_REF)\n     {\n       if (TYPE_READONLY (TREE_TYPE (TREE_OPERAND (arg, 0))))\n-\treadonly_warning (TREE_OPERAND (arg, 0), msgid);\n+\treadonly_error (TREE_OPERAND (arg, 0), msgid);\n       else\n-\tpedwarn (\"%s of read-only member `%s'\", _(msgid),\n-\t\t IDENTIFIER_POINTER (DECL_NAME (TREE_OPERAND (arg, 1))));\n+\terror (\"%s of read-only member `%s'\", _(msgid),\n+\t       IDENTIFIER_POINTER (DECL_NAME (TREE_OPERAND (arg, 1))));\n     }\n   else if (TREE_CODE (arg) == VAR_DECL)\n-    pedwarn (\"%s of read-only variable `%s'\", _(msgid),\n-\t     IDENTIFIER_POINTER (DECL_NAME (arg)));\n+    error (\"%s of read-only variable `%s'\", _(msgid),\n+\t   IDENTIFIER_POINTER (DECL_NAME (arg)));\n   else\n-    pedwarn (\"%s of read-only location\", _(msgid));\n+    error (\"%s of read-only location\", _(msgid));\n }\n \f\n /* Mark EXP saying that we need to be able to take the\n@@ -3142,7 +3142,7 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n       || ((TREE_CODE (lhstype) == RECORD_TYPE\n \t   || TREE_CODE (lhstype) == UNION_TYPE)\n \t  && C_TYPE_FIELDS_READONLY (lhstype)))\n-    readonly_warning (lhs, \"assignment\");\n+    readonly_error (lhs, \"assignment\");\n \n   /* If storing into a structure or union member,\n      it has probably been given type `int'.\n@@ -6149,7 +6149,7 @@ c_expand_asm_operands (tree string, tree outputs, tree inputs,\n \t      || ((TREE_CODE (type) == RECORD_TYPE\n \t\t   || TREE_CODE (type) == UNION_TYPE)\n \t\t  && C_TYPE_FIELDS_READONLY (type)))\n-\t    readonly_warning (o[i], \"modification by `asm'\");\n+\t    readonly_error (o[i], \"modification by `asm'\");\n \t}\n     }\n "}, {"sha": "74be633db116f715d918bed40bcafcb5f6853dc5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5b6f18e7a3d5a9269704287ca91483d60476e66", "patch": "@@ -1,3 +1,11 @@\n+2004-02-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR middle-end/13448\n+\t* gcc.dg/inline-5.c: New test.\n+\t* gcc.dg/always-inline.c: Split out tests into ...\n+\t* gcc.dg/always-inline2.c: ... this and ...\n+\t* gcc.dg/always-inline3.c: ... this.\n+\n 2004-02-29  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR debug/12103"}, {"sha": "2177f642f6063d6c3db52a7359fe4789f34ac1f3", "filename": "gcc/testsuite/gcc.dg/always_inline.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c?ref=c5b6f18e7a3d5a9269704287ca91483d60476e66", "patch": "@@ -1,18 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-Winline -O2\" } */\n #include <stdarg.h>\n-inline __attribute__ ((always_inline)) void t(void); /* { dg-error \"body not available\" \"\" } */\n-void\n-q(void)\n-{\n-  t(); \t\t\t\t/* { dg-error \"called from here\" \"\" } */\n-}\n-inline __attribute__ ((always_inline)) void\n-q2(void)\n-{ \t\t\t\t/* { dg-error \"recursive\" \"\" } */\n-  q2(); \t\t\t/* { dg-error \"called from here\" \"\" } */\n-  q2(); \t\t\t/* { dg-error \"called from here\" \"\" } */\n-}\n inline __attribute__ ((always_inline)) void\n e(int t, ...)\n {\t\t\t\t/* { dg-error \"variable argument\" \"\" } */"}, {"sha": "fa6528d1fac160ee8ffec3f471f011a110b3104e", "filename": "gcc/testsuite/gcc.dg/always_inline2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c?ref=c5b6f18e7a3d5a9269704287ca91483d60476e66", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Winline -O2\" } */\n+inline __attribute__ ((always_inline)) void t(void); /* { dg-error \"body not available\" \"\" } */\n+void\n+q(void)\n+{\n+  t(); \t\t\t\t/* { dg-error \"called from here\" \"\" } */\n+}"}, {"sha": "b183770adc005753ee996cbfa955cb386fbae89e", "filename": "gcc/testsuite/gcc.dg/always_inline3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c?ref=c5b6f18e7a3d5a9269704287ca91483d60476e66", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Winline -O2\" } */\n+inline __attribute__ ((always_inline)) void\n+q2(void)\n+{ \t\t\t\t/* { dg-error \"recursive\" \"\" } */\n+  q2(); \t\t\t/* { dg-error \"called from here\" \"\" } */\n+  q2(); \t\t\t/* { dg-error \"called from here\" \"\" } */\n+}"}, {"sha": "d72fad6561002ebc1220e883d36775422ed564c9", "filename": "gcc/testsuite/gcc.dg/inline-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftestsuite%2Fgcc.dg%2Finline-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftestsuite%2Fgcc.dg%2Finline-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-5.c?ref=c5b6f18e7a3d5a9269704287ca91483d60476e66", "patch": "@@ -0,0 +1,13 @@\n+/* PR middle-end/13448 */\n+\n+/* { dg-options \"-O3\" } */\n+\n+void funct (const int n)\n+{\n+  n++; /* { dg-error \"\" } */\n+}\n+\n+int main () {\n+  funct (1);\n+  return 0;\n+}"}, {"sha": "ba5eb7ab0554072bd054dc2e0a757a5d2b3dfca3", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b6f18e7a3d5a9269704287ca91483d60476e66/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c5b6f18e7a3d5a9269704287ca91483d60476e66", "patch": "@@ -39,7 +39,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"langhooks.h\"\n #include \"cgraph.h\"\n #include \"intl.h\"\n-\n+#include \"diagnostic.h\"\n \n /* This should be eventually be generalized to other languages, but\n    this would require a shared function-as-trees infrastructure.  */\n@@ -1620,6 +1620,12 @@ optimize_inline_calls (tree fn)\n   inline_data id;\n   tree prev_fn;\n \n+  /* There is no point in performing inlining if errors have already\n+     occurred -- and we might crash if we try to inline invalid\n+     code.  */\n+  if (errorcount || sorrycount)\n+    return;\n+\n   /* Clear out ID.  */\n   memset (&id, 0, sizeof (id));\n "}]}