{"sha": "dfa849f3264a2c064f0e61f081b47de0db56ffbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhODQ5ZjMyNjRhMmMwNjRmMGU2MWYwODFiNDdkZTBkYjU2ZmZiZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2004-01-13T19:52:24Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2004-01-13T19:52:24Z"}, "message": "rtl.def: Add comment about new option in automata_option.\n\n2004-01-13  Vladimir Makarov  <vmakarov@redhat.com>\n\n        * rtl.def: Add comment about new option in automata_option.\n\n\t* genautomata.c (PROGRESS_OPTION): New macro.\n\t(progress_flag): New global variable.\n\t(gen_automata_option): Process `progress'.\n\t(transform_insn_regexps, check_unit_distributions_to_automata,\n\tmake_automaton, NDFA_to_DFA, build_automaton, create_automata,\n\texpand_automata, write_automata): Print about the progress only if\n\tprogress_flag.  Remove fflush.\n\t(initiate_automaton_gen): Process command line flag `-progress'.\n\n\t* doc/md.texi: Describe the new option.\n\nFrom-SVN: r75812", "tree": {"sha": "9599fa48adf2340d93fb84cfee97af1692374ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9599fa48adf2340d93fb84cfee97af1692374ba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfa849f3264a2c064f0e61f081b47de0db56ffbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa849f3264a2c064f0e61f081b47de0db56ffbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa849f3264a2c064f0e61f081b47de0db56ffbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa849f3264a2c064f0e61f081b47de0db56ffbe/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60af005f4bbfc0c03fb3a081d4da835d4aa1ab5e"}], "stats": {"total": 168, "additions": 116, "deletions": 52}, "files": [{"sha": "408798a07144b37159e8eeca59773d465f097c70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa849f3264a2c064f0e61f081b47de0db56ffbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa849f3264a2c064f0e61f081b47de0db56ffbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfa849f3264a2c064f0e61f081b47de0db56ffbe", "patch": "@@ -1,3 +1,18 @@\n+2004-01-13  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+        * rtl.def: Add comment about new option in automata_option.\n+\t\n+\t* genautomata.c (PROGRESS_OPTION): New macro.\n+\t(progress_flag): New global variable.\n+\t(gen_automata_option): Process `progress'.\n+\t(transform_insn_regexps, check_unit_distributions_to_automata,\n+\tmake_automaton, NDFA_to_DFA, build_automaton, create_automata,\n+\texpand_automata, write_automata): Print about the progress only if\n+\tprogress_flag.  Remove fflush.\n+\t(initiate_automaton_gen): Process command line flag `-progress'.\n+\n+\t* doc/md.texi: Describe the new option.\n+\t\n 2004-01-13  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* cfg.c (dump_bb): Dump entry edges."}, {"sha": "f4f799dd86af6ad63697ee31557ace2636e15ce0", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa849f3264a2c064f0e61f081b47de0db56ffbe/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa849f3264a2c064f0e61f081b47de0db56ffbe/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=dfa849f3264a2c064f0e61f081b47de0db56ffbe", "patch": "@@ -5999,6 +5999,14 @@ nondeterministic treatment means trying all alternatives, some of them\n may be rejected by reservations in the subsequent insns.  You can not\n query functional unit reservations in nondeterministic automaton\n states.\n+\n+@item\n+@dfn{progress} means output of a progress bar showing how many states\n+were generated so far for automaton being processed.  This is useful\n+during debugging a @acronym{DFA} description.  If you see too many\n+generated states, you could interrupt the generator of the pipeline\n+hazard recognizer and try to figure out a reason for generation of the\n+huge automaton.\n @end itemize\n \n As an example, consider a superscalar @acronym{RISC} machine which can"}, {"sha": "54d677e3290779fdf2e3bd6a0791664f1746e53a", "filename": "gcc/genautomata.c", "status": "modified", "additions": 89, "deletions": 51, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa849f3264a2c064f0e61f081b47de0db56ffbe/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa849f3264a2c064f0e61f081b47de0db56ffbe/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=dfa849f3264a2c064f0e61f081b47de0db56ffbe", "patch": "@@ -658,6 +658,8 @@ static struct obstack irp;\n \n #define NDFA_OPTION \"-ndfa\"\n \n+#define PROGRESS_OPTION \"-progress\"\n+\n /* The following flags are set up by function `initiate_automaton_gen'.  */\n \n /* Make automata with nondeterministic reservation by insns (`-ndfa').  */\n@@ -680,6 +682,10 @@ static int time_flag;\n    result automaton and statistics information (`-v').  */\n static int v_flag;\n \n+/* Flag of output of a progress bar showing how many states were\n+   generated so far for automaton being processed (`-progress').  */\n+static int progress_flag;\n+\n /* Flag of generating warning instead of error for non-critical errors\n    (`-w').  */\n static int w_flag;\n@@ -1932,6 +1938,8 @@ gen_automata_option (rtx def)\n     w_flag = 1;\n   else if (strcmp (XSTR (def, 0), NDFA_OPTION + 1) == 0)\n     ndfa_flag = 1;\n+  else if (strcmp (XSTR (def, 0), PROGRESS_OPTION + 1) == 0)\n+    progress_flag = 1;\n   else\n     fatal (\"invalid option `%s' in automata_option\", XSTR (def, 0));\n }\n@@ -5265,8 +5273,8 @@ transform_insn_regexps (void)\n \n   transform_time = create_ticker ();\n   add_advance_cycle_insn_decl ();\n-  fprintf (stderr, \"Reservation transformation...\");\n-  fflush (stderr);\n+  if (progress_flag)\n+    fprintf (stderr, \"Reservation transformation...\");\n   for (i = 0; i < description->decls_num; i++)\n     {\n       decl = description->decls [i];\n@@ -5275,9 +5283,9 @@ transform_insn_regexps (void)\n \t  = transform_regexp (copy_insn_regexp\n \t\t\t      (DECL_INSN_RESERV (decl)->regexp));\n     }\n-  fprintf (stderr, \"done\\n\");\n+  if (progress_flag)\n+    fprintf (stderr, \"done\\n\");\n   ticker_off (&transform_time);\n-  fflush (stderr);\n }\n \n \f\n@@ -5443,7 +5451,8 @@ check_unit_distributions_to_automata (void)\n   decl_t decl;\n   int i;\n \n-  fprintf (stderr, \"Check unit distributions to automata...\");\n+  if (progress_flag)\n+    fprintf (stderr, \"Check unit distributions to automata...\");\n   annotation_message_reported_p = FALSE;\n   for (i = 0; i < description->decls_num; i++)\n     {\n@@ -5453,7 +5462,8 @@ check_unit_distributions_to_automata (void)\n \t  (DECL_INSN_RESERV (decl)->name,\n \t   DECL_INSN_RESERV (decl)->transformed_regexp);\n     }\n-  fprintf (stderr, \"done\\n\");\n+  if (progress_flag)\n+    fprintf (stderr, \"done\\n\");\n }\n \n \f\n@@ -5732,7 +5742,7 @@ make_automaton (automaton_t automaton)\n \t\t\t      = 1;\n                             VLA_PTR_ADD (state_stack, state2);\n \t\t\t    states_n++;\n-\t\t\t    if (states_n % 100 == 0)\n+\t\t\t    if (progress_flag && states_n % 100 == 0)\n \t\t\t      fprintf (stderr, \".\");\n                           }\n \t\t\tadded_arc = add_arc (state, state2, ainsn, 1);\n@@ -5763,7 +5773,7 @@ make_automaton (automaton_t automaton)\n           state2->it_was_placed_in_stack_for_NDFA_forming = 1;\n           VLA_PTR_ADD (state_stack, state2);\n \t  states_n++;\n-\t  if (states_n % 100 == 0)\n+\t  if (progress_flag && states_n % 100 == 0)\n \t    fprintf (stderr, \".\");\n         }\n       if (advance_cycle_ainsn == NULL)\n@@ -5934,7 +5944,7 @@ NDFA_to_DFA (automaton_t automaton)\n \t\t  &state_stack))\n \t    {\n \t      states_n++;\n-\t      if (states_n % 100 == 0)\n+\t      if (progress_flag && states_n % 100 == 0)\n \t\tfprintf (stderr, \".\");\n \t    }\n \t}\n@@ -6395,39 +6405,53 @@ build_automaton (automaton_t automaton)\n   int arcs_num;\n \n   ticker_on (&NDFA_time);\n-  if (automaton->corresponding_automaton_decl == NULL)\n-    fprintf (stderr, \"Create anonymous automaton (1 dot is 100 new states):\");\n-  else\n-    fprintf (stderr, \"Create automaton `%s' (1 dot is 100 new states):\",\n-\t     automaton->corresponding_automaton_decl->name);\n+  if (progress_flag)\n+    {\n+      if (automaton->corresponding_automaton_decl == NULL)\n+\tfprintf (stderr, \"Create anonymous automaton\");\n+      else\n+\tfprintf (stderr, \"Create automaton `%s'\",\n+\t\t automaton->corresponding_automaton_decl->name);\n+      fprintf (stderr, \" (1 dot is 100 new states):\");\n+    }\n   make_automaton (automaton);\n-  fprintf (stderr, \" done\\n\");\n+  if (progress_flag)\n+    fprintf (stderr, \" done\\n\");\n   ticker_off (&NDFA_time);\n   count_states_and_arcs (automaton, &states_num, &arcs_num);\n   automaton->NDFA_states_num = states_num;\n   automaton->NDFA_arcs_num = arcs_num;\n   ticker_on (&NDFA_to_DFA_time);\n-  if (automaton->corresponding_automaton_decl == NULL)\n-    fprintf (stderr, \"Make anonymous DFA (1 dot is 100 new states):\");\n-  else\n-    fprintf (stderr, \"Make DFA `%s' (1 dot is 100 new states):\",\n-\t     automaton->corresponding_automaton_decl->name);\n+  if (progress_flag)\n+    {\n+      if (automaton->corresponding_automaton_decl == NULL)\n+\tfprintf (stderr, \"Make anonymous DFA\");\n+      else\n+\tfprintf (stderr, \"Make DFA `%s'\",\n+\t\t automaton->corresponding_automaton_decl->name);\n+      fprintf (stderr, \" (1 dot is 100 new states):\");\n+    }\n   NDFA_to_DFA (automaton);\n-  fprintf (stderr, \" done\\n\");\n+  if (progress_flag)\n+    fprintf (stderr, \" done\\n\");\n   ticker_off (&NDFA_to_DFA_time);\n   count_states_and_arcs (automaton, &states_num, &arcs_num);\n   automaton->DFA_states_num = states_num;\n   automaton->DFA_arcs_num = arcs_num;\n   if (!no_minimization_flag)\n     {\n       ticker_on (&minimize_time);\n-      if (automaton->corresponding_automaton_decl == NULL)\n-\tfprintf (stderr, \"Minimize anonymous DFA...\");\n-      else\n-\tfprintf (stderr, \"Minimize DFA `%s'...\",\n-\t\t automaton->corresponding_automaton_decl->name);\n+      if (progress_flag)\n+\t{\n+\t  if (automaton->corresponding_automaton_decl == NULL)\n+\t    fprintf (stderr, \"Minimize anonymous DFA...\");\n+\t  else\n+\t    fprintf (stderr, \"Minimize DFA `%s'...\",\n+\t\t     automaton->corresponding_automaton_decl->name);\n+\t}\n       minimize_DFA (automaton);\n-      fprintf (stderr, \"done\\n\");\n+      if (progress_flag)\n+\tfprintf (stderr, \"done\\n\");\n       ticker_off (&minimize_time);\n       count_states_and_arcs (automaton, &states_num, &arcs_num);\n       automaton->minimal_DFA_states_num = states_num;\n@@ -6851,14 +6875,18 @@ create_automata (void)\n        curr_automaton != NULL;\n        curr_automaton = curr_automaton->next_automaton)\n     {\n-      if (curr_automaton->corresponding_automaton_decl == NULL)\n-\tfprintf (stderr, \"Prepare anonymous automaton creation ... \");\n-      else\n-\tfprintf (stderr, \"Prepare automaton `%s' creation...\",\n-\t\t curr_automaton->corresponding_automaton_decl->name);\n+      if (progress_flag)\n+\t{\n+\t  if (curr_automaton->corresponding_automaton_decl == NULL)\n+\t    fprintf (stderr, \"Prepare anonymous automaton creation ... \");\n+\t  else\n+\t    fprintf (stderr, \"Prepare automaton `%s' creation...\",\n+\t\t     curr_automaton->corresponding_automaton_decl->name);\n+\t}\n       create_alt_states (curr_automaton);\n       form_ainsn_with_same_reservs (curr_automaton);\n-      fprintf (stderr, \"done\\n\");\n+      if (progress_flag)\n+\tfprintf (stderr, \"done\\n\");\n       build_automaton (curr_automaton);\n       enumerate_states (curr_automaton);\n       ticker_on (&equiv_time);\n@@ -9615,6 +9643,7 @@ initiate_automaton_gen (int argc, char **argv)\n   time_flag = 0;\n   v_flag = 0;\n   w_flag = 0;\n+  progress_flag = 0;\n   for (i = 2; i < argc; i++)\n     if (strcmp (argv [i], NO_MINIMIZATION_OPTION) == 0)\n       no_minimization_flag = 1;\n@@ -9626,6 +9655,8 @@ initiate_automaton_gen (int argc, char **argv)\n       w_flag = 1;\n     else if (strcmp (argv [i], NDFA_OPTION) == 0)\n       ndfa_flag = 1;\n+    else if (strcmp (argv [i], PROGRESS_OPTION) == 0)\n+      progress_flag = 1;\n     else if (strcmp (argv [i], \"-split\") == 0)\n       {\n \tif (i + 1 >= argc)\n@@ -9796,10 +9827,11 @@ expand_automata (void)\n     }\n   all_time = create_ticker ();\n   check_time = create_ticker ();\n-  fprintf (stderr, \"Check description...\");\n-  fflush (stderr);\n+  if (progress_flag)\n+    fprintf (stderr, \"Check description...\");\n   check_all_description ();\n-  fprintf (stderr, \"done\\n\");\n+  if (progress_flag)\n+    fprintf (stderr, \"done\\n\");\n   ticker_off (&check_time);\n   generation_time = create_ticker ();\n   if (!have_error)\n@@ -9815,37 +9847,41 @@ expand_automata (void)\n   if (!have_error)\n     {\n       form_important_insn_automata_lists ();\n-      fprintf (stderr, \"Generation of attributes...\");\n-      fflush (stderr);\n+      if (progress_flag)\n+\tfprintf (stderr, \"Generation of attributes...\");\n       make_internal_dfa_insn_code_attr ();\n       make_insn_alts_attr ();\n       make_default_insn_latency_attr ();\n       make_bypass_attr ();\n-      fprintf (stderr, \"done\\n\");\n+      if (progress_flag)\n+\tfprintf (stderr, \"done\\n\");\n     }\n   ticker_off (&generation_time);\n   ticker_off (&all_time);\n-  fprintf (stderr, \"All other genattrtab stuff...\");\n-  fflush (stderr);\n+  if (progress_flag)\n+    fprintf (stderr, \"All other genattrtab stuff...\");\n }\n \n /* The following is top level function to output PHR and to finish\n    work with pipeline description translator.  */\n void\n write_automata (void)\n {\n-  fprintf (stderr, \"done\\n\");\n+  if (progress_flag)\n+    fprintf (stderr, \"done\\n\");\n   if (have_error)\n     fatal (\"Errors in DFA description\");\n   ticker_on (&all_time);\n   output_time = create_ticker ();\n-  fprintf (stderr, \"Forming and outputting automata tables...\");\n-  fflush (stderr);\n+  if (progress_flag)\n+    fprintf (stderr, \"Forming and outputting automata tables...\");\n   output_dfa_max_issue_rate ();\n   output_tables ();\n-  fprintf (stderr, \"done\\n\");\n-  fprintf (stderr, \"Output functions to work with automata...\");\n-  fflush (stderr);\n+  if (progress_flag)\n+    {\n+      fprintf (stderr, \"done\\n\");\n+      fprintf (stderr, \"Output functions to work with automata...\");\n+    }\n   output_chip_definitions ();\n   output_max_insn_queue_index_def ();\n   output_internal_min_issue_delay_func ();\n@@ -9880,7 +9916,8 @@ write_automata (void)\n   output_dfa_clean_insn_cache_func ();\n   output_dfa_start_func ();\n   output_dfa_finish_func ();\n-  fprintf (stderr, \"done\\n\");\n+  if (progress_flag)\n+    fprintf (stderr, \"done\\n\");\n   if (v_flag)\n     {\n       output_description_file = fopen (output_description_file_name, \"w\");\n@@ -9889,11 +9926,12 @@ write_automata (void)\n \t  perror (output_description_file_name);\n \t  exit (FATAL_EXIT_CODE);\n \t}\n-      fprintf (stderr, \"Output automata description...\");\n-      fflush (stderr);\n+      if (progress_flag)\n+\tfprintf (stderr, \"Output automata description...\");\n       output_description ();\n       output_automaton_descriptions ();\n-      fprintf (stderr, \"done\\n\");\n+      if (progress_flag)\n+\tfprintf (stderr, \"done\\n\");\n       output_statistics (output_description_file);\n     }\n   output_statistics (stderr);"}, {"sha": "9306abc7a0635161eecc331dd4b49f2620b531d2", "filename": "gcc/rtl.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa849f3264a2c064f0e61f081b47de0db56ffbe/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa849f3264a2c064f0e61f081b47de0db56ffbe/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=dfa849f3264a2c064f0e61f081b47de0db56ffbe", "patch": "@@ -480,7 +480,10 @@ DEF_RTL_EXPR(DEFINE_AUTOMATON, \"define_automaton\", \"s\", 'x')\n    o \"w\" which means generation of warning instead of error for\n      non-critical errors.\n \n-   o \"ndfa\" which makes nondeterministic finite state automata.  */\n+   o \"ndfa\" which makes nondeterministic finite state automata.\n+\n+   o \"progress\" which means output of a progress bar showing how many\n+     states were generated so far for automaton being processed.  */\n DEF_RTL_EXPR(AUTOMATA_OPTION, \"automata_option\", \"s\", 'x')\n \n /* (define_reservation string string) names reservation (the first"}]}