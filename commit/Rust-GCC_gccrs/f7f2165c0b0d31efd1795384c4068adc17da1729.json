{"sha": "f7f2165c0b0d31efd1795384c4068adc17da1729", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdmMjE2NWMwYjBkMzFlZmQxNzk1Mzg0YzQwNjhhZGMxN2RhMTcyOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-21T14:36:51Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-21T14:36:51Z"}, "message": "aarch64: Always use .init/.fini_array for GNU/Linux\n\nI was wondering why the (now fixed) c-c++-common/attr-retain-[78].c\nfailures were showing up in the native results for aarch64-linux-gnu\nbut not in the posted cross results.  It turns out that .init/\n.fini_array support is disabled by default for cross builds,\nwhich in turn stops those tests from running.\n\nThe test for .init/fini_array support has two parts: one that builds\nsomething with the assembler and linker, and another that compiles\nC code and uses preprocessor macros to test the glibc version.\nThe first test would work with build=host but the second is only\nsafe for build=target.\n\nHowever, AArch64 postdates glibc and binutils support for\n.init/fini_array by some distance, so it's safe to hard-code the\nresult to \"yes\" for cross compilers.\n\nThis fixes the only material difference in auto-host.h between\na native and a cross build.\n\ngcc/\n\t* acinclude.m4 (gcc_AC_INITFINI_ARRAY): When cross-compiling,\n\tdefault to yes for aarch64-linux-gnu.\n\t* configure: Regenerate.", "tree": {"sha": "81e1e29622e282a584ce34e4ad8e5d9dab723276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e1e29622e282a584ce34e4ad8e5d9dab723276"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7f2165c0b0d31efd1795384c4068adc17da1729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f2165c0b0d31efd1795384c4068adc17da1729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7f2165c0b0d31efd1795384c4068adc17da1729", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f2165c0b0d31efd1795384c4068adc17da1729/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a18305ee11e139838771f96c5a037a29606236e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a18305ee11e139838771f96c5a037a29606236e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a18305ee11e139838771f96c5a037a29606236e"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "f9f6a07b0402f5a1bfed251ea469e232da605218", "filename": "gcc/acinclude.m4", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f2165c0b0d31efd1795384c4068adc17da1729/gcc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f2165c0b0d31efd1795384c4068adc17da1729/gcc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facinclude.m4?ref=f7f2165c0b0d31efd1795384c4068adc17da1729", "patch": "@@ -422,8 +422,18 @@ changequote([,])dnl\n ])],, [gcc_cv_initfini_array=no]);;\n     esac\n   else\n-    AC_MSG_CHECKING(cross compile... guessing)\n-    gcc_cv_initfini_array=no\n+    case \"${target}\" in\n+      aarch64*-linux-gnu*)\n+\t# AArch64 postdates glibc support for .init_array/.fini_array,\n+\t# so we don't need the preprocessor test above.\n+\tgcc_cv_initfini_array=yes\n+\t;;\n+\n+      *)\n+\tAC_MSG_CHECKING(cross compile... guessing)\n+\tgcc_cv_initfini_array=no\n+\t;;\n+    esac\n   fi])\n   enable_initfini_array=$gcc_cv_initfini_array\n ])"}, {"sha": "33eae5451adc41135c8f3416d459553da86ea96b", "filename": "gcc/configure", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f2165c0b0d31efd1795384c4068adc17da1729/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f2165c0b0d31efd1795384c4068adc17da1729/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f7f2165c0b0d31efd1795384c4068adc17da1729", "patch": "@@ -24132,9 +24132,19 @@ fi\n rm -f conftest.err conftest.i conftest.$ac_ext;;\n     esac\n   else\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking cross compile... guessing\" >&5\n+    case \"${target}\" in\n+      aarch64*-linux-gnu*)\n+\t# AArch64 postdates glibc support for .init_array/.fini_array,\n+\t# so we don't need the preprocessor test above.\n+\tgcc_cv_initfini_array=yes\n+\t;;\n+\n+      *)\n+\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking cross compile... guessing\" >&5\n $as_echo_n \"checking cross compile... guessing... \" >&6; }\n-    gcc_cv_initfini_array=no\n+\tgcc_cv_initfini_array=no\n+\t;;\n+    esac\n   fi\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_initfini_array\" >&5"}]}