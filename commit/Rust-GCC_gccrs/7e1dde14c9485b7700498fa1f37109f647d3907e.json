{"sha": "7e1dde14c9485b7700498fa1f37109f647d3907e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxZGRlMTRjOTQ4NWI3NzAwNDk4ZmExZjM3MTA5ZjY0N2QzOTA3ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-08-15T13:05:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-08-15T13:05:37Z"}, "message": "c-ada-spec.c (dump_number): New function.\n\n\t* c-ada-spec.c (dump_number): New function.\n\t(handle_escape_character): Likewise.\n\t(print_ada_macros): Add handling of constant integers and strings.\n\nCo-Authored-By: Arnaud Charlet <charlet@adacore.com>\n\nFrom-SVN: r239481", "tree": {"sha": "8940c49d7d12dbdfc36e09c3b6ff5bf406992517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8940c49d7d12dbdfc36e09c3b6ff5bf406992517"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e1dde14c9485b7700498fa1f37109f647d3907e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1dde14c9485b7700498fa1f37109f647d3907e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1dde14c9485b7700498fa1f37109f647d3907e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1dde14c9485b7700498fa1f37109f647d3907e/comments", "author": null, "committer": null, "parents": [{"sha": "24299f6544bebf5d462437118ad96f1fa63d813b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24299f6544bebf5d462437118ad96f1fa63d813b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24299f6544bebf5d462437118ad96f1fa63d813b"}], "stats": {"total": 163, "additions": 160, "deletions": 3}, "files": [{"sha": "84f8007bd91d50cc2ff5a702b94f6977c2fee7ec", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1dde14c9485b7700498fa1f37109f647d3907e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1dde14c9485b7700498fa1f37109f647d3907e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7e1dde14c9485b7700498fa1f37109f647d3907e", "patch": "@@ -1,3 +1,10 @@\n+2016-08-16  Eric Botcazou  <ebotcazou@adacore.com>\n+            Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* c-ada-spec.c (dump_number): New function.\n+\t(handle_escape_character): Likewise.\n+\t(print_ada_macros): Add handling of constant integers and strings.\n+\n 2016-08-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/7652"}, {"sha": "a4e0c38cef9f0a52beea23bdb981d933dacbfc5d", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 140, "deletions": 3, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1dde14c9485b7700498fa1f37109f647d3907e/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1dde14c9485b7700498fa1f37109f647d3907e/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=7e1dde14c9485b7700498fa1f37109f647d3907e", "patch": "@@ -116,6 +116,58 @@ macro_length (const cpp_macro *macro, int *supported, int *buffer_len,\n   (*buffer_len)++;\n }\n \n+/* Dump all digits/hex chars from NUMBER to BUFFER and return a pointer\n+   to the character after the last character written.  */\n+\n+static unsigned char *\n+dump_number (unsigned char *number, unsigned char *buffer)\n+{\n+  while (*number != '\\0'\n+\t && *number != 'U'\n+\t && *number != 'u'\n+\t && *number != 'l'\n+\t && *number != 'L')\n+    *buffer++ = *number++;\n+\n+  return buffer;\n+}\n+\n+/* Handle escape character C and convert to an Ada character into BUFFER.\n+   Return a pointer to the character after the last character written, or\n+   NULL if the escape character is not supported.  */\n+\n+static unsigned char *\n+handle_escape_character (unsigned char *buffer, char c)\n+{\n+  switch (c)\n+    {\n+      case '\"':\n+\t*buffer++ = '\"';\n+\t*buffer++ = '\"';\n+\tbreak;\n+\n+      case 'n':\n+\tstrcpy ((char *) buffer, \"\\\" & ASCII.LF & \\\"\");\n+\tbuffer += 16;\n+\tbreak;\n+\n+      case 'r':\n+\tstrcpy ((char *) buffer, \"\\\" & ASCII.CR & \\\"\");\n+\tbuffer += 16;\n+\tbreak;\n+\n+      case 't':\n+\tstrcpy ((char *) buffer, \"\\\" & ASCII.HT & \\\"\");\n+\tbuffer += 16;\n+\tbreak;\n+\n+      default:\n+\treturn NULL;\n+    }\n+\n+  return buffer;\n+}\n+\n /* Dump into PP a set of MAX_ADA_MACROS MACROS (C/C++) as Ada constants when\n    possible.  */\n \n@@ -132,7 +184,7 @@ print_ada_macros (pretty_printer *pp, cpp_hashnode **macros, int max_ada_macros)\n       int supported = 1, prev_is_one = 0, buffer_len, param_len;\n       int is_string = 0, is_char = 0;\n       char *ada_name;\n-      unsigned char *s, *params, *buffer, *buf_param, *char_one = NULL;\n+      unsigned char *s, *params, *buffer, *buf_param, *char_one = NULL, *tmp;\n \n       macro_length (macro, &supported, &buffer_len, &param_len);\n       s = buffer = XALLOCAVEC (unsigned char, buffer_len);\n@@ -246,14 +298,33 @@ print_ada_macros (pretty_printer *pp, cpp_hashnode **macros, int max_ada_macros)\n \t\t  case CPP_CHAR32:\n \t\t  case CPP_UTF8CHAR:\n \t\t  case CPP_NAME:\n-\t\t  case CPP_STRING:\n-\t\t  case CPP_NUMBER:\n \t\t    if (!macro->fun_like)\n \t\t      supported = 0;\n \t\t    else\n \t\t      buffer = cpp_spell_token (parse_in, token, buffer, false);\n \t\t    break;\n \n+\t\t  case CPP_STRING:\n+\t\t    is_string = 1;\n+\t\t    {\n+\t\t      const unsigned char *s = token->val.str.text;\n+\n+\t\t      for (; *s; s++)\n+\t\t\tif (*s == '\\\\')\n+\t\t\t  {\n+\t\t\t    s++;\n+\t\t\t    buffer = handle_escape_character (buffer, *s);\n+\t\t\t    if (buffer == NULL)\n+\t\t\t      {\n+\t\t\t\tsupported = 0;\n+\t\t\t\tbreak;\n+\t\t\t      }\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  *buffer++ = *s;\n+\t\t    }\n+\t\t    break;\n+\n \t\t  case CPP_CHAR:\n \t\t    is_char = 1;\n \t\t    {\n@@ -278,6 +349,72 @@ print_ada_macros (pretty_printer *pp, cpp_hashnode **macros, int max_ada_macros)\n \t\t    }\n \t\t    break;\n \n+\t\t  case CPP_NUMBER:\n+\t\t    tmp = cpp_token_as_text (parse_in, token);\n+\n+\t\t    switch (*tmp)\n+\t\t      {\n+\t\t\tcase '0':\n+\t\t\t  switch (tmp[1])\n+\t\t\t    {\n+\t\t\t      case '\\0':\n+\t\t\t      case 'l':\n+\t\t\t      case 'L':\n+\t\t\t      case 'u':\n+\t\t\t      case 'U':\n+\t\t\t\t*buffer++ = '0';\n+\t\t\t\tbreak;\n+\n+\t\t\t      case 'x':\n+\t\t\t      case 'X':\n+\t\t\t\t*buffer++ = '1';\n+\t\t\t\t*buffer++ = '6';\n+\t\t\t\t*buffer++ = '#';\n+\t\t\t\tbuffer = dump_number (tmp + 2, buffer);\n+\t\t\t\t*buffer++ = '#';\n+\t\t\t\tbreak;\n+\n+\t\t\t      case 'b':\n+\t\t\t      case 'B':\n+\t\t\t\t*buffer++ = '2';\n+\t\t\t\t*buffer++ = '#';\n+\t\t\t\tbuffer = dump_number (tmp + 2, buffer);\n+\t\t\t\t*buffer++ = '#';\n+\t\t\t\tbreak;\n+\n+\t\t\t      default:\n+\t\t\t\t/* Dump floating constants unmodified.  */\n+\t\t\t\tif (strchr ((const char *)tmp, '.'))\n+\t\t\t\t  buffer = dump_number (tmp, buffer);\n+\t\t\t\telse\n+\t\t\t\t  {\n+\t\t\t\t    *buffer++ = '8';\n+\t\t\t\t    *buffer++ = '#';\n+\t\t\t\t    buffer = dump_number (tmp + 1, buffer);\n+\t\t\t\t    *buffer++ = '#';\n+\t\t\t\t  }\n+\t\t\t\tbreak;\n+\t\t\t    }\n+\t\t\t  break;\n+\n+\t\t\tcase '1':\n+\t\t\t  if (tmp[1] == '\\0' || tmp[1] == 'l' || tmp[1] == 'u'\n+\t\t\t      || tmp[1] == 'L' || tmp[1] == 'U')\n+\t\t\t    {\n+\t\t\t      is_one = 1;\n+\t\t\t      char_one = buffer;\n+\t\t\t      *buffer++ = '1';\n+\t\t\t    }\n+\t\t\t  else\n+\t\t\t    buffer = dump_number (tmp, buffer);\n+\t\t\t  break;\n+\n+\t\t\tdefault:\n+\t\t\t  buffer = dump_number (tmp, buffer);\n+\t\t\t  break;\n+\t\t      }\n+\t\t    break;\n+\n \t\t  case CPP_LSHIFT:\n \t\t    if (prev_is_one)\n \t\t      {"}, {"sha": "eeaa5d5bc2c74fb37b414cb14c55ffa1edfa2a3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1dde14c9485b7700498fa1f37109f647d3907e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1dde14c9485b7700498fa1f37109f647d3907e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e1dde14c9485b7700498fa1f37109f647d3907e", "patch": "@@ -1,3 +1,7 @@\n+2016-08-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-c++-common/dump-ada-spec-5.c: New test.\n+\n 2016-08-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/73434"}, {"sha": "722110906ad01c1ddfac103b6b26ac9af98db232", "filename": "gcc/testsuite/c-c++-common/dump-ada-spec-5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1dde14c9485b7700498fa1f37109f647d3907e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1dde14c9485b7700498fa1f37109f647d3907e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-5.c?ref=7e1dde14c9485b7700498fa1f37109f647d3907e", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-ada-spec\" } */\n+\n+#define not_octal_constant 0.627\n+\n+extern double foo (double);\n+\n+/* { dg-final { scan-ada-spec-not \"unsupported macro\" } } */\n+/* { dg-final { cleanup-ada-spec } } */"}]}