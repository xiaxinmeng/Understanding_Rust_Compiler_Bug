{"sha": "61039cd09eed677f690943bca7dc0d122e19ddcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEwMzljZDA5ZWVkNjc3ZjY5MDk0M2JjYTdkYzBkMTIyZTE5ZGRjYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-05-19T17:36:14Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-05-19T17:36:14Z"}, "message": "irix_threads.cc (GC_pthread_detach): Do not use REAL_FUNC.\n\n\t* irix_threads.cc (GC_pthread_detach): Do not use REAL_FUNC.\n\t(GC_pthread_create): Fix typo.\n\t(GC_TRY_LOCK): Likewise.\n\t* include/private/gc_locks.h (GC_test_and_set): Only take one\n\tone argument.\n\t(LOCK): Adjust appropriately.\n\t* include/private/gc_priv.h (SIG_SUSPEND): Use SIGRTMIN if\n\t_SIGRTMIN is unavailable.\n\nFrom-SVN: r53636", "tree": {"sha": "1f800047367210ef317746691a9f99de9e9d83a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f800047367210ef317746691a9f99de9e9d83a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61039cd09eed677f690943bca7dc0d122e19ddcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61039cd09eed677f690943bca7dc0d122e19ddcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61039cd09eed677f690943bca7dc0d122e19ddcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61039cd09eed677f690943bca7dc0d122e19ddcb/comments", "author": null, "committer": null, "parents": [{"sha": "bce0deb2b67e54e705e83b6236445d743468c1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce0deb2b67e54e705e83b6236445d743468c1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce0deb2b67e54e705e83b6236445d743468c1f2"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "9014d318310b7cc7cdbec28e4edbc3a1003096b5", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61039cd09eed677f690943bca7dc0d122e19ddcb/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61039cd09eed677f690943bca7dc0d122e19ddcb/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=61039cd09eed677f690943bca7dc0d122e19ddcb", "patch": "@@ -1,3 +1,14 @@\n+Sun May 19 11:32:03 2002  Mark P Mitchell  <mark@codesourcery.com>\n+\n+\t* irix_threads.cc (GC_pthread_detach): Do not use REAL_FUNC.\n+\t(GC_pthread_create): Fix typo.\n+\t(GC_TRY_LOCK): Likewise.\n+\t* include/private/gc_locks.h (GC_test_and_set): Only take one\n+\tone argument.\n+\t(LOCK): Adjust appropriately.\n+\t* include/private/gc_priv.h (SIG_SUSPEND): Use SIGRTMIN if \n+\t_SIGRTMIN is unavailable.\n+\n 2002-05-16  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* acinclude.m4: Allow for PWDCMD to override hardcoded pwd."}, {"sha": "95beeddbadbecbe1ff4a0e35efb7408e233ae0dc", "filename": "boehm-gc/include/private/gc_locks.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61039cd09eed677f690943bca7dc0d122e19ddcb/boehm-gc%2Finclude%2Fprivate%2Fgc_locks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61039cd09eed677f690943bca7dc0d122e19ddcb/boehm-gc%2Finclude%2Fprivate%2Fgc_locks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgc_locks.h?ref=61039cd09eed677f690943bca7dc0d122e19ddcb", "patch": "@@ -221,9 +221,9 @@\n #  ifdef MIPS\n #    if __mips < 3 || !(defined (_ABIN32) || defined(_ABI64)) \\\n \t|| !defined(_COMPILER_VERSION) || _COMPILER_VERSION < 700\n-#        define GC_test_and_set(addr, v) test_and_set(addr,v)\n+#        define GC_test_and_set(addr) test_and_set(addr, 1)\n #    else\n-#\t define GC_test_and_set(addr, v) __test_and_set(addr,v)\n+#\t define GC_test_and_set(addr) __test_and_set(addr,1)\n #\t define GC_clear(addr) __lock_release(addr);\n #\t define GC_CLEAR_DEFINED\n #    endif\n@@ -431,7 +431,7 @@\n #    define NO_THREAD (pthread_t)(-1)\n #    define UNSET_LOCK_HOLDER() GC_lock_holder = NO_THREAD\n #    define I_HOLD_LOCK() (pthread_equal(GC_lock_holder, pthread_self()))\n-#    define LOCK() { if (GC_test_and_set(&GC_allocate_lock, 1)) GC_lock(); }\n+#    define LOCK() { if (GC_test_and_set(&GC_allocate_lock)) GC_lock(); }\n #    define UNLOCK() GC_clear(&GC_allocate_lock);\n      extern VOLATILE GC_bool GC_collecting;\n #    define ENTER_GC() \\"}, {"sha": "5465c78b6e41cc19fb3373435ba86a7109e839a3", "filename": "boehm-gc/include/private/gc_priv.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61039cd09eed677f690943bca7dc0d122e19ddcb/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61039cd09eed677f690943bca7dc0d122e19ddcb/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h?ref=61039cd09eed677f690943bca7dc0d122e19ddcb", "patch": "@@ -1916,7 +1916,11 @@ void GC_err_puts GC_PROTO((GC_CONST char *s));\n #      define SIG_SUSPEND SIGPWR\n #    endif\n #   else  /* !GC_LINUX_THREADS */\n-#    define SIG_SUSPEND _SIGRTMIN + 6\n+#     if defined(_SIGRTMIN)\n+#       define SIG_SUSPEND _SIGRTMIN + 6\n+#     else\n+#       define SIG_SUSPEND SIGRTMIN + 6\n+#     endif       \n #   endif\n #  endif /* !SIG_SUSPEND */\n   "}, {"sha": "75b7c63125eb751be7f6db43c1847d4b7c2d6ff4", "filename": "boehm-gc/irix_threads.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61039cd09eed677f690943bca7dc0d122e19ddcb/boehm-gc%2Firix_threads.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61039cd09eed677f690943bca7dc0d122e19ddcb/boehm-gc%2Firix_threads.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Firix_threads.c?ref=61039cd09eed677f690943bca7dc0d122e19ddcb", "patch": "@@ -519,7 +519,7 @@ int GC_pthread_detach(pthread_t thread)\n     LOCK();\n     thread_gc_id = GC_lookup_thread(thread);\n     UNLOCK();\n-    result = REAL_FUNC(pthread_detach)(thread);\n+    result = pthread_detach(thread);\n     if (result == 0) {\n       LOCK();\n       thread_gc_id -> flags |= DETACHED;\n@@ -599,7 +599,7 @@ GC_pthread_create(pthread_t *new_thread,\n     si -> start_routine = start_routine;\n     si -> arg = arg;\n     LOCK();\n-    if (!GC_initialized) GC_init();\n+    if (!GC_is_initialized) GC_init();\n     if (NULL == attr) {\n         stack = 0;\n \t(void) pthread_attr_init(&new_attr);\n@@ -655,7 +655,7 @@ VOLATILE GC_bool GC_collecting = 0;\n #define SLEEP_THRESHOLD 3\n \n unsigned long GC_allocate_lock = 0;\n-# define GC_TRY_LOCK() !GC_test_and_set(&GC_allocate_lock,1)\n+# define GC_TRY_LOCK() !GC_test_and_set(&GC_allocate_lock)\n # define GC_LOCK_TAKEN GC_allocate_lock\n \n void GC_lock()"}]}