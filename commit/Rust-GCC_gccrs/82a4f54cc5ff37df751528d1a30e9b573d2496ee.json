{"sha": "82a4f54cc5ff37df751528d1a30e9b573d2496ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhNGY1NGNjNWZmMzdkZjc1MTUyOGQxYTMwZTliNTczZDI0OTZlZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-07-21T11:54:27Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-07-21T11:54:27Z"}, "message": "re PR libfortran/35862 ([F2003] Implement new rounding modes for run time)\n\n2013-07-21  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/35862\n        * libgfortran.h (GFC_FPE_DOWNWARD, GFC_FPE_TONEAREST,\n        GFC_FPE_TOWARDZERO, GFC_FPE_UPWARD): New defines.\n\n2013-07-21  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/35862\n        * libgfortran.h (set_fpu_rounding_mode,\n        get_fpu_rounding_mode): New prototypes.\n        * config/fpu-387.h (set_fpu_rounding_mode,\n        get_fpu_rounding_mode): New functions.\n        * config/fpu-aix.h (set_fpu_rounding_mode,\n        get_fpu_rounding_mode): Ditto.\n        * config/fpu-generic.h (set_fpu_rounding_mode,\n        get_fpu_rounding_mode): Ditto.\n        * config/fpu-glibc.h (set_fpu_rounding_mode,\n        get_fpu_rounding_mode): Ditto.\n        * config/fpu-sysv.h (set_fpu_rounding_mode,\n        get_fpu_rounding_mode): Ditto.\n        * configure.ac: Check for fp_rnd and fp_rnd_t.\n        * io/io.h (enum unit_round): Use GFC_FPE_* for the value.\n        * io/read.c (convert_real): Set FP ronding mode.\n        * Makefile.in: Regenerate.\n        * aclocal.m4: Regenerate.\n        * config.h.in: Regenerate.\n        * configure: Regenerate.\n\n2013-07-21  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/35862\n        * gfortran.dg/round_4.f90: New.\n\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r201093", "tree": {"sha": "eb32a590b892e8caf501e4b6d7803bb72a37b2fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb32a590b892e8caf501e4b6d7803bb72a37b2fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82a4f54cc5ff37df751528d1a30e9b573d2496ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a4f54cc5ff37df751528d1a30e9b573d2496ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a4f54cc5ff37df751528d1a30e9b573d2496ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a4f54cc5ff37df751528d1a30e9b573d2496ee/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b833dcda53c814695ce250f91ae769d20962d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b833dcda53c814695ce250f91ae769d20962d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b833dcda53c814695ce250f91ae769d20962d75"}], "stats": {"total": 659, "additions": 571, "deletions": 88}, "files": [{"sha": "785cf42e9e885d3182ae5d9c3955097002ef0a15", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -1,3 +1,9 @@\n+2013-07-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/35862\n+\t* libgfortran.h (GFC_FPE_DOWNWARD, GFC_FPE_TONEAREST,\n+\tGFC_FPE_TOWARDZERO, GFC_FPE_UPWARD): New defines.\n+\n 2013-07-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57894"}, {"sha": "fce52942c88df08164efad6b3127fed89ec25c66", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -43,6 +43,12 @@ along with GCC; see the file COPYING3.  If not see\n #define GFC_FPE_UNDERFLOW  (1<<4)\n #define GFC_FPE_INEXACT    (1<<5)\n \n+/* Defines for floating-point rounding modes.  */\n+#define GFC_FPE_DOWNWARD   1\n+#define GFC_FPE_TONEAREST  2\n+#define GFC_FPE_TOWARDZERO 3\n+#define GFC_FPE_UPWARD     4\n+\n \n /* Bitmasks for the various runtime checks that can be enabled.  */\n #define GFC_RTCHECK_BOUNDS      (1<<0)"}, {"sha": "cf6cef65b8cadce46b5cdf716475239e1cb36fb8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -1,3 +1,8 @@\n+2013-07-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/35862\n+\t* gfortran.dg/round_4.f90: New.\n+\n 2013-07-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57894"}, {"sha": "8a7d95bb456bbe7ed52b1d66baa3b56da1ccf155", "filename": "gcc/testsuite/gfortran.dg/round_4.f90", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_4.f90?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -0,0 +1,102 @@\n+! { dg-do run }\n+! { dg-add-options ieee }\n+!\n+! PR fortran/35862\n+!\n+! Test whether I/O rounding works. Uses internally (libgfortran) strtod\n+! for the conversion - and sets the CPU rounding mode accordingly.\n+!\n+! If it doesn't work on your system, please check whether strtod handles\n+! rounding and whether your system is supported in libgfortran/config/fpu*.c\n+!\n+! Please only add ... run { target { ! { triplets } } } if it is unfixable\n+! on your target - and a note why (strtod doesn't handle it, no rounding\n+! support, etc.)\n+!\n+program main\n+  use iso_fortran_env\n+  implicit none\n+\n+  ! The following uses kinds=10 and 16 if available or\n+  ! 8 and 10 - or 8 and 16 - or 4 and 8.\n+  integer, parameter :: xp = real_kinds(ubound(real_kinds,dim=1)-1)\n+  integer, parameter :: qp = real_kinds(ubound(real_kinds,dim=1))\n+\n+  real(4) :: r4p, r4m, ref4u, ref4d\n+  real(8) :: r8p, r8m, ref8u, ref8d\n+  real(xp) :: r10p, r10m, ref10u, ref10d\n+  real(qp) :: r16p, r16m, ref16u, ref16d\n+  character(len=20) :: str, round\n+\n+  ref4u = 0.100000001_4\n+  ref8u = 0.10000000000000001_8\n+\n+  if (xp == 4) then\n+    ref10u = 0.100000001_xp\n+  elseif (xp == 8) then\n+    ref10u = 0.10000000000000001_xp\n+  else ! xp == 10\n+    ref10u = 0.1000000000000000000014_xp\n+  end if\n+\n+  if (qp == 8) then\n+    ref16u = 0.10000000000000001_qp\n+  elseif (qp == 10) then\n+    ref16u = 0.1000000000000000000014_qp\n+  else ! qp == 16\n+    ref16u = 0.10000000000000000000000000000000000481_qp\n+  end if\n+\n+ ! ref*d = 9.999999...\n+ ref4d = nearest (ref4u, -1.0_4)\n+ ref8d = nearest (ref8u, -1.0_8)\n+ ref10d = nearest (ref10u, -1.0_xp)\n+ ref16d = nearest (ref16u, -1.0_qp)\n+\n+  round = 'up'\n+  call t()\n+  if (r4p  /= ref4u  .or. r4m  /= -ref4d)  call abort()\n+  if (r8p  /= ref8u  .or. r8m  /= -ref8d)  call abort()\n+  if (r10p /= ref10u .or. r10m /= -ref10d) call abort()\n+  if (r16p /= ref16u .or. r16m /= -ref16d) call abort()\n+\n+  round = 'down'\n+  call t()\n+  if (r4p  /= ref4d  .or. r4m  /= -ref4u)  call abort()\n+  if (r8p  /= ref8d  .or. r8m  /= -ref8u)  call abort()\n+  if (r10p /= ref10d .or. r10m /= -ref10u) call abort()\n+  if (r16p /= ref16d .or. r16m /= -ref16u) call abort()\n+\n+  round = 'zero'\n+  call t()\n+  if (r4p  /= ref4d  .or. r4m  /= -ref4d)  call abort()\n+  if (r8p  /= ref8d  .or. r8m  /= -ref8d)  call abort()\n+  if (r10p /= ref10d .or. r10m /= -ref10d) call abort()\n+  if (r16p /= ref16d .or. r16m /= -ref16d) call abort()\n+\n+  round = 'nearest'\n+  call t()\n+  if (r4p  /= ref4u  .or. r4m  /= -ref4u)  call abort()\n+  if (r8p  /= ref8u  .or. r8m  /= -ref8u)  call abort()\n+  if (r10p /= ref10u .or. r10m /= -ref10u) call abort()\n+  if (r16p /= ref16u .or. r16m /= -ref16u) call abort()\n+\n+! Same as nearest (but rounding towards zero if there is a tie\n+! [does not apply here])\n+  round = 'compatible'\n+  call t()\n+  if (r4p  /= ref4u  .or. r4m  /= -ref4u)  call abort()\n+  if (r8p  /= ref8u  .or. r8m  /= -ref8u)  call abort()\n+  if (r10p /= ref10u .or. r10m /= -ref10u) call abort()\n+  if (r16p /= ref16u .or. r16m /= -ref16u) call abort()\n+contains\n+  subroutine t()\n+!    print *, round\n+    str = \"0.1 0.1 0.1 0.1\"\n+    read (str, *,round=round) r4p, r8p, r10p, r16p\n+!    write (*, '(*(g0:\"  \"))') r4p, r8p, r10p, r16p\n+    str = \"-0.1 -0.1 -0.1 -0.1\"\n+    read (str, *,round=round) r4m, r8m, r10m, r16m\n+!    write (*, *) r4m, r8m, r10m, r16m\n+  end subroutine t\n+end program main"}, {"sha": "eacb01b62d5420ef6487e83b8040c87774622090", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -1,3 +1,27 @@\n+2013-07-21  Tobias Burnus  <burnus@net-b.de>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR fortran/35862\n+\t* libgfortran.h (set_fpu_rounding_mode,\n+\tget_fpu_rounding_mode): New prototypes.\n+\t* config/fpu-387.h (set_fpu_rounding_mode,\n+\tget_fpu_rounding_mode): New functions.\n+\t* config/fpu-aix.h (set_fpu_rounding_mode,\n+\tget_fpu_rounding_mode): Ditto.\n+\t* config/fpu-generic.h (set_fpu_rounding_mode,\n+\tget_fpu_rounding_mode): Ditto.\n+\t* config/fpu-glibc.h (set_fpu_rounding_mode,\n+\tget_fpu_rounding_mode): Ditto.\n+\t* config/fpu-sysv.h (set_fpu_rounding_mode,\n+\tget_fpu_rounding_mode): Ditto.\n+\t* configure.ac: Check for fp_rnd and fp_rnd_t.\n+\t* io/io.h (enum unit_round): Use GFC_FPE_* for the value.\n+\t* io/read.c (convert_real): Set FP ronding mode.\n+\t* Makefile.in: Regenerate.\n+\t* aclocal.m4: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2013-06-24  Tobias Burnus  <burnus@net-b.de>\n \n \t* configure.ac: Check for fp_except and fp_except_t."}, {"sha": "aa23e85e37b06a3a5309efa7df32d5e96517df54", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -1,9 +1,9 @@\n-# Makefile.in generated by automake 1.11.3 from Makefile.am.\n+# Makefile.in generated by automake 1.11.1 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n-# Foundation, Inc.\n+# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,\n+# Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -87,12 +87,6 @@ am__nobase_list = $(am__nobase_strip_setup); \\\n am__base_list = \\\n   sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\\n/ /g' | \\\n   sed '$$!N;$$!N;$$!N;$$!N;s/\\n/ /g'\n-am__uninstall_files_from_dir = { \\\n-  test -z \"$$files\" \\\n-    || { test ! -d \"$$dir\" && test ! -f \"$$dir\" && test ! -r \"$$dir\"; } \\\n-    || { echo \" ( cd '$$dir' && rm -f\" $$files \")\"; \\\n-         $(am__cd) \"$$dir\" && rm -f $$files; }; \\\n-  }\n am__installdirs = \"$(DESTDIR)$(cafexeclibdir)\" \\\n \t\"$(DESTDIR)$(myexeclibdir)\" \"$(DESTDIR)$(toolexeclibdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibdir)\"\n@@ -1282,7 +1276,7 @@ all: $(BUILT_SOURCES) config.h\n \n .SUFFIXES:\n .SUFFIXES: .F90 .c .f90 .lo .o .obj\n-am--refresh: Makefile\n+am--refresh:\n \t@:\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)\n \t@for dep in $?; do \\\n@@ -1318,8 +1312,10 @@ $(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)\n $(am__aclocal_m4_deps):\n \n config.h: stamp-h1\n-\t@if test ! -f $@; then rm -f stamp-h1; else :; fi\n-\t@if test ! -f $@; then $(MAKE) $(AM_MAKEFLAGS) stamp-h1; else :; fi\n+\t@if test ! -f $@; then \\\n+\t  rm -f stamp-h1; \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) stamp-h1; \\\n+\telse :; fi\n \n stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status\n \t@rm -f stamp-h1\n@@ -1426,11 +1422,11 @@ clean-toolexeclibLTLIBRARIES:\n \t  echo \"rm -f \\\"$${dir}/so_locations\\\"\"; \\\n \t  rm -f \"$${dir}/so_locations\"; \\\n \tdone\n-libcaf_single.la: $(libcaf_single_la_OBJECTS) $(libcaf_single_la_DEPENDENCIES) $(EXTRA_libcaf_single_la_DEPENDENCIES) \n+libcaf_single.la: $(libcaf_single_la_OBJECTS) $(libcaf_single_la_DEPENDENCIES) \n \t$(libcaf_single_la_LINK) -rpath $(cafexeclibdir) $(libcaf_single_la_OBJECTS) $(libcaf_single_la_LIBADD) $(LIBS)\n-libgfortran.la: $(libgfortran_la_OBJECTS) $(libgfortran_la_DEPENDENCIES) $(EXTRA_libgfortran_la_DEPENDENCIES) \n+libgfortran.la: $(libgfortran_la_OBJECTS) $(libgfortran_la_DEPENDENCIES) \n \t$(libgfortran_la_LINK) -rpath $(toolexeclibdir) $(libgfortran_la_OBJECTS) $(libgfortran_la_LIBADD) $(LIBS)\n-libgfortranbegin.la: $(libgfortranbegin_la_OBJECTS) $(libgfortranbegin_la_DEPENDENCIES) $(EXTRA_libgfortranbegin_la_DEPENDENCIES) \n+libgfortranbegin.la: $(libgfortranbegin_la_OBJECTS) $(libgfortranbegin_la_DEPENDENCIES) \n \t$(libgfortranbegin_la_LINK) -rpath $(myexeclibdir) $(libgfortranbegin_la_OBJECTS) $(libgfortranbegin_la_LIBADD) $(LIBS)\n \n mostlyclean-compile:\n@@ -5690,7 +5686,9 @@ uninstall-toolexeclibDATA:\n \t@$(NORMAL_UNINSTALL)\n \t@list='$(toolexeclib_DATA)'; test -n \"$(toolexeclibdir)\" || list=; \\\n \tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n-\tdir='$(DESTDIR)$(toolexeclibdir)'; $(am__uninstall_files_from_dir)\n+\ttest -n \"$$files\" || exit 0; \\\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibdir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibdir)\" && rm -f $$files\n \n ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)\n \tlist='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \\\n@@ -5762,15 +5760,10 @@ install-am: all-am\n \n installcheck: installcheck-am\n install-strip:\n-\tif test -z '$(STRIP)'; then \\\n-\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n-\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n-\t      install; \\\n-\telse \\\n-\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n-\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n-\t    \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\" install; \\\n-\tfi\n+\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t  install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t  `test -z '$(STRIP)' || \\\n+\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n mostlyclean-generic:\n \n clean-generic:"}, {"sha": "8673daa1a9d7d788aad4db25943230da0815944f", "filename": "libgfortran/aclocal.m4", "status": "modified", "additions": 27, "deletions": 47, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Faclocal.m4?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -1,8 +1,7 @@\n-# generated automatically by aclocal 1.11.3 -*- Autoconf -*-\n+# generated automatically by aclocal 1.11.1 -*- Autoconf -*-\n \n # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-# 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation,\n-# Inc.\n+# 2005, 2006, 2007, 2008, 2009  Free Software Foundation, Inc.\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -20,15 +19,12 @@ You have another version of autoconf.  It may work, but is not guaranteed to.\n If you have problems, you may need to regenerate the build system entirely.\n To do so, use the procedure documented by the package, typically `autoreconf'.])])\n \n-# Copyright (C) 2002, 2003, 2005, 2006, 2007, 2008, 2011 Free Software\n-# Foundation, Inc.\n+# Copyright (C) 2002, 2003, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n-# serial 1\n-\n # AM_AUTOMAKE_VERSION(VERSION)\n # ----------------------------\n # Automake X.Y traces this macro to ensure aclocal.m4 has been\n@@ -38,7 +34,7 @@ AC_DEFUN([AM_AUTOMAKE_VERSION],\n [am__api_version='1.11'\n dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to\n dnl require some minimum version.  Point them to the right macro.\n-m4_if([$1], [1.11.3], [],\n+m4_if([$1], [1.11.1], [],\n       [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl\n ])\n \n@@ -54,21 +50,19 @@ m4_define([_AM_AUTOCONF_VERSION], [])\n # Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.\n # This function is AC_REQUIREd by AM_INIT_AUTOMAKE.\n AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n-[AM_AUTOMAKE_VERSION([1.11.3])dnl\n+[AM_AUTOMAKE_VERSION([1.11.1])dnl\n m4_ifndef([AC_AUTOCONF_VERSION],\n   [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\n _AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])\n \n # AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-\n \n-# Copyright (C) 2001, 2003, 2005, 2011 Free Software Foundation, Inc.\n+# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n-# serial 1\n-\n # For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets\n # $ac_aux_dir to `$srcdir/foo'.  In other projects, it is set to\n # `$srcdir', `$srcdir/..', or `$srcdir/../..'.\n@@ -150,14 +144,14 @@ AC_CONFIG_COMMANDS_PRE(\n Usually this means the macro was only invoked conditionally.]])\n fi])])\n \n-# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009,\n-# 2010, 2011 Free Software Foundation, Inc.\n+# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009\n+# Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n-# serial 12\n+# serial 10\n \n # There are a few dirty hacks below to avoid letting `AC_PROG_CC' be\n # written in clear, in which case automake, when reading aclocal.m4,\n@@ -197,7 +191,6 @@ AC_CACHE_CHECK([dependency style of $depcc],\n   # instance it was reported that on HP-UX the gcc test will end up\n   # making a dummy file named `D' -- because `-MD' means `put the output\n   # in D'.\n-  rm -rf conftest.dir\n   mkdir conftest.dir\n   # Copy depcomp to subdir because otherwise we won't find it if we're\n   # using a relative directory.\n@@ -262,7 +255,7 @@ AC_CACHE_CHECK([dependency style of $depcc],\n \tbreak\n       fi\n       ;;\n-    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n+    msvisualcpp | msvcmsys)\n       # This compiler won't grok `-c -o', but also, the minuso test has\n       # not run yet.  These depmodes are late enough in the game, and\n       # so weak that their functioning should not be impacted.\n@@ -327,13 +320,10 @@ AC_DEFUN([AM_DEP_TRACK],\n if test \"x$enable_dependency_tracking\" != xno; then\n   am_depcomp=\"$ac_aux_dir/depcomp\"\n   AMDEPBACKSLASH='\\'\n-  am__nodep='_no'\n fi\n AM_CONDITIONAL([AMDEP], [test \"x$enable_dependency_tracking\" != xno])\n AC_SUBST([AMDEPBACKSLASH])dnl\n _AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl\n-AC_SUBST([am__nodep])dnl\n-_AM_SUBST_NOTMAKE([am__nodep])dnl\n ])\n \n # Generate code to set up dependency tracking.              -*- Autoconf -*-\n@@ -555,15 +545,12 @@ for _am_header in $config_headers :; do\n done\n echo \"timestamp for $_am_arg\" >`AS_DIRNAME([\"$_am_arg\"])`/stamp-h[]$_am_stamp_count])\n \n-# Copyright (C) 2001, 2003, 2005, 2008, 2011 Free Software Foundation,\n-# Inc.\n+# Copyright (C) 2001, 2003, 2005, 2008  Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n-# serial 1\n-\n # AM_PROG_INSTALL_SH\n # ------------------\n # Define $install_sh.\n@@ -582,8 +569,8 @@ AC_SUBST(install_sh)])\n # Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n # From Jim Meyering\n \n-# Copyright (C) 1996, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2008,\n-# 2011 Free Software Foundation, Inc.\n+# Copyright (C) 1996, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2008\n+# Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n@@ -603,7 +590,7 @@ AC_DEFUN([AM_MAINTAINER_MODE],\n        [disable], [m4_define([am_maintainer_other], [enable])],\n        [m4_define([am_maintainer_other], [enable])\n         m4_warn([syntax], [unexpected argument to AM@&t@_MAINTAINER_MODE: $1])])\n-AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n+AC_MSG_CHECKING([whether to am_maintainer_other maintainer-specific portions of Makefiles])\n   dnl maintainer-mode's default is 'disable' unless 'enable' is passed\n   AC_ARG_ENABLE([maintainer-mode],\n [  --][am_maintainer_other][-maintainer-mode  am_maintainer_other make rules and dependencies not useful\n@@ -749,15 +736,12 @@ else\n fi\n ])\n \n-# Copyright (C) 2003, 2004, 2005, 2006, 2011 Free Software Foundation,\n-# Inc.\n+# Copyright (C) 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n-# serial 1\n-\n # AM_PROG_MKDIR_P\n # ---------------\n # Check for `mkdir -p'.\n@@ -780,28 +764,27 @@ esac\n \n # Helper functions for option handling.                     -*- Autoconf -*-\n \n-# Copyright (C) 2001, 2002, 2003, 2005, 2008, 2010 Free Software\n-# Foundation, Inc.\n+# Copyright (C) 2001, 2002, 2003, 2005, 2008  Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n-# serial 5\n+# serial 4\n \n # _AM_MANGLE_OPTION(NAME)\n # -----------------------\n AC_DEFUN([_AM_MANGLE_OPTION],\n [[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])\n \n # _AM_SET_OPTION(NAME)\n-# --------------------\n+# ------------------------------\n # Set option NAME.  Presently that only means defining a flag for this option.\n AC_DEFUN([_AM_SET_OPTION],\n [m4_define(_AM_MANGLE_OPTION([$1]), 1)])\n \n # _AM_SET_OPTIONS(OPTIONS)\n-# ------------------------\n+# ----------------------------------\n # OPTIONS is a space-separated list of Automake options.\n AC_DEFUN([_AM_SET_OPTIONS],\n [m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])\n@@ -877,14 +860,12 @@ Check your system clock])\n fi\n AC_MSG_RESULT(yes)])\n \n-# Copyright (C) 2001, 2003, 2005, 2011 Free Software Foundation, Inc.\n+# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n-# serial 1\n-\n # AM_PROG_INSTALL_STRIP\n # ---------------------\n # One issue with vendor `install' (even GNU) is that you can't\n@@ -907,13 +888,13 @@ fi\n INSTALL_STRIP_PROGRAM=\"\\$(install_sh) -c -s\"\n AC_SUBST([INSTALL_STRIP_PROGRAM])])\n \n-# Copyright (C) 2006, 2008, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2006, 2008  Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n-# serial 3\n+# serial 2\n \n # _AM_SUBST_NOTMAKE(VARIABLE)\n # ---------------------------\n@@ -922,13 +903,13 @@ AC_SUBST([INSTALL_STRIP_PROGRAM])])\n AC_DEFUN([_AM_SUBST_NOTMAKE])\n \n # AM_SUBST_NOTMAKE(VARIABLE)\n-# --------------------------\n+# ---------------------------\n # Public sister of _AM_SUBST_NOTMAKE.\n AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])\n \n # Check how to create a tarball.                            -*- Autoconf -*-\n \n-# Copyright (C) 2004, 2005, 2012 Free Software Foundation, Inc.\n+# Copyright (C) 2004, 2005  Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n@@ -950,11 +931,10 @@ AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])\n # a tarball read from stdin.\n #     $(am__untar) < result.tar\n AC_DEFUN([_AM_PROG_TAR],\n-[# Always define AMTAR for backward compatibility.  Yes, it's still used\n-# in the wild :-(  We should find a proper way to deprecate it ...\n-AC_SUBST([AMTAR], ['$${TAR-tar}'])\n+[# Always define AMTAR for backward compatibility.\n+AM_MISSING_PROG([AMTAR], [tar])\n m4_if([$1], [v7],\n-     [am__tar='$${TAR-tar} chof - \"$$tardir\"' am__untar='$${TAR-tar} xf -'],\n+     [am__tar='${AMTAR} chof - \"$$tardir\"'; am__untar='${AMTAR} xf -'],\n      [m4_case([$1], [ustar],, [pax],,\n               [m4_fatal([Unknown tar format])])\n AC_MSG_CHECKING([how to create a $1 tar archive])"}, {"sha": "d7c5ceb864e13827a4e0b7130eaaf6f3844775cf", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -411,6 +411,12 @@\n /* Define to 1 if the system has the type `fp_except_t'. */\n #undef HAVE_FP_EXCEPT_T\n \n+/* Define to 1 if the system has the type `fp_rnd'. */\n+#undef HAVE_FP_RND\n+\n+/* Define to 1 if the system has the type `fp_rnd_t'. */\n+#undef HAVE_FP_RND_T\n+\n /* fp_trap is present */\n #undef HAVE_FP_TRAP\n "}, {"sha": "72d86f89ea3fb6e4e03d3ff9e8d4ebe6a5bb7af9", "filename": "libgfortran/config/fpu-387.h", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig%2Ffpu-387.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig%2Ffpu-387.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-387.h?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -88,7 +88,7 @@ has_sse (void)\n #endif\n }\n \n-/* i387 -- see linux <fpu_control.h> header file for details.  */\n+/* i387 exceptions -- see linux <fpu_control.h> header file for details.  */\n #define _FPU_MASK_IM  0x01\n #define _FPU_MASK_DM  0x02\n #define _FPU_MASK_ZM  0x04\n@@ -99,7 +99,18 @@ has_sse (void)\n \n #define _FPU_EX_ALL   0x3f\n \n-void set_fpu (void)\n+/* i387 rounding modes.  */\n+\n+#define _FPU_RC_NEAREST 0x0\n+#define _FPU_RC_DOWN    0x400\n+#define _FPU_RC_UP      0x800\n+#define _FPU_RC_ZERO    0xc00\n+\n+#define _FPU_RC_MASK    0xc00\n+\n+\n+void\n+set_fpu (void)\n {\n   int excepts = 0;\n   unsigned short cw;\n@@ -164,3 +175,72 @@ get_fpu_except_flags (void)\n \n   return result;\n }\n+\n+void\n+set_fpu_rounding_mode (int round)\n+{\n+  int round_mode;\n+  unsigned short cw;\n+\n+  switch (round)\n+    {\n+    case GFC_FPE_TONEAREST:\n+      round_mode = _FPU_RC_NEAREST;\n+      break;\n+    case GFC_FPE_UPWARD:\n+      round_mode = _FPU_RC_UP;\n+      break;\n+    case GFC_FPE_DOWNWARD:\n+      round_mode = _FPU_RC_DOWN;\n+      break;\n+    case GFC_FPE_TOWARDZERO:\n+      round_mode = _FPU_RC_ZERO;\n+      break;\n+    default:\n+      return; /* Should be unreachable.  */\n+    }\n+\n+  __asm__ __volatile__ (\"fnstcw\\t%0\" : \"=m\" (cw));\n+\n+  cw &= ~FPU_RC_MASK;\n+  cw |= round_mode;\n+\n+  __asm__ __volatile__ (\"fldcw\\t%0\" : : \"m\" (cw));\n+\n+  if (has_sse())\n+    {\n+      unsigned int cw_sse;\n+\n+      __asm__ __volatile__ (\"%vstmxcsr\\t%0\" : \"=m\" (cw_sse));\n+\n+      /* The SSE round control bits are shifted by 3 bits.  */\n+      cw_sse &= ~(FPU_RC_MASK << 3);\n+      cw_sse |= round_mode << 3;\n+\n+      __asm__ __volatile__ (\"%vldmxcsr\\t%0\" : : \"m\" (cw_sse));\n+    }\n+}\n+\n+int\n+get_fpu_rounding_mode (void)\n+{\n+  unsigned short cw;\n+\n+  __asm__ __volatile__ (\"fnstcw\\t%0\" : \"=m\" (cw));\n+\n+  cw &= FPU_RC_MASK;\n+\n+  switch (cw)\n+    {\n+    case _FPU_RC_NEAREST:\n+      return GFC_FPE_TONEAREST;\n+    case _FPU_RC_UP:\n+      return GFC_FPE_UPWARD;\n+    case _FPU_RC_DOWN:\n+      return GFC_FPE_DOWNWARD;\n+    case _FPU_RC_ZERO:\n+      return GFC_FPE_TOWARDZERO;\n+    default:\n+      return GFC_FPE_INVALID; /* Should be unreachable.  */\n+    }\n+}"}, {"sha": "a30d7d0666a16f02f2743f80b88efc834cdb5a29", "filename": "libgfortran/config/fpu-aix.h", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig%2Ffpu-aix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig%2Ffpu-aix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-aix.h?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -116,3 +116,75 @@ get_fpu_except_flags (void)\n \n   return result;\n }\n+\n+\n+int\n+get_fpu_rounding_mode (void)\n+{\n+  int rnd_mode;\n+\n+  rnd_mode = fegetround ();\n+\n+  switch (rnd_mode)\n+    {\n+#ifdef FE_TONEAREST\n+      case FE_TONEAREST:\n+\treturn GFC_FPE_TONEAREST;\n+#endif\n+\n+#ifdef FE_UPWARD\n+      case FE_UPWARD:\n+\treturn GFC_FPE_UPWARD;\n+#endif\n+\n+#ifdef FE_DOWNWARD\n+      case FE_DOWNWARD:\n+\treturn GFC_FPE_DOWNWARD;\n+#endif\n+\n+#ifdef FE_TOWARDZERO\n+      case FE_TOWARDZERO:\n+\treturn GFC_FPE_TOWARDZERO;\n+#endif\n+      default:\n+\treturn GFC_FPE_INVALID;\n+    }\n+}\n+\n+\n+void\n+set_fpu_rounding_mode (int mode)\n+{\n+  int rnd_mode;\n+\n+  switch (mode)\n+    {\n+#ifdef FE_TONEAREST\n+      case GFC_FPE_TONEAREST:\n+\trnd_mode = FE_TONEAREST;\n+\tbreak;\n+#endif\n+\n+#ifdef FE_UPWARD\n+      case GFC_FPE_UPWARD:\n+\trnd_mode = FE_UPWARD;\n+\tbreak;\n+#endif\n+\n+#ifdef FE_DOWNWARD\n+      case GFC_FPE_DOWNWARD:\n+\trnd_mode = FE_DOWNWARD;\n+\tbreak;\n+#endif\n+\n+#ifdef FE_TOWARDZERO\n+      case GFC_FPE_TOWARDZERO:\n+\trnd_mode = FE_TOWARDZERO;\n+\tbreak;\n+#endif\n+      default:\n+\treturn;\n+    }\n+\n+  fesetround (rnd_mode);\n+}"}, {"sha": "3ad0e8320554e3b5fc35aca675a5baa2a4c3ed39", "filename": "libgfortran/config/fpu-generic.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig%2Ffpu-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig%2Ffpu-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-generic.h?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -56,3 +56,16 @@ get_fpu_except_flags (void)\n {\n   return 0;\n }\n+\n+\n+int\n+get_fpu_rounding_mode (void)\n+{   \n+  return 0;\n+}               \n+\n+\n+void\n+set_fpu_rounding_mode (int round __attribute__((unused)))\n+{\n+}"}, {"sha": "66919b8b807f88aa7d60b8d7b8a52e909037c04a", "filename": "libgfortran/config/fpu-glibc.h", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig%2Ffpu-glibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig%2Ffpu-glibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-glibc.h?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -127,3 +127,75 @@ get_fpu_except_flags (void)\n \n   return result;\n }\n+\n+\n+int\n+get_fpu_rounding_mode (void)\n+{\n+  int rnd_mode;\n+\n+  rnd_mode = fegetround ();\n+\n+  switch (rnd_mode)\n+    {\n+#ifdef FE_TONEAREST\n+      case FE_TONEAREST:\n+\treturn GFC_FPE_TONEAREST;\n+#endif\n+\n+#ifdef FE_UPWARD\n+      case FE_UPWARD:\n+\treturn GFC_FPE_UPWARD;\n+#endif\n+\n+#ifdef FE_DOWNWARD\n+      case FE_DOWNWARD:\n+\treturn GFC_FPE_DOWNWARD;\n+#endif\n+\n+#ifdef FE_TOWARDZERO\n+      case FE_TOWARDZERO:\n+\treturn GFC_FPE_TOWARDZERO;\n+#endif\n+      default:\n+\treturn GFC_FPE_INVALID;\n+    }\n+}\n+\n+\n+void\n+set_fpu_rounding_mode (int mode)\n+{\n+  int rnd_mode;\n+\n+  switch (mode)\n+    {\n+#ifdef FE_TONEAREST\n+      case GFC_FPE_TONEAREST:\n+\trnd_mode = FE_TONEAREST;\n+\tbreak;\n+#endif\n+\n+#ifdef FE_UPWARD\n+      case GFC_FPE_UPWARD:\n+\trnd_mode = FE_UPWARD;\n+\tbreak;\n+#endif\n+\n+#ifdef FE_DOWNWARD\n+      case GFC_FPE_DOWNWARD:\n+\trnd_mode = FE_DOWNWARD;\n+\tbreak;\n+#endif\n+\n+#ifdef FE_TOWARDZERO\n+      case GFC_FPE_TOWARDZERO:\n+\trnd_mode = FE_TOWARDZERO;\n+\tbreak;\n+#endif\n+      default:\n+\treturn;\n+    }\n+\n+  fesetround (rnd_mode);\n+}"}, {"sha": "d7712562a4f89fc7eb1c6a112217aa68d5df9643", "filename": "libgfortran/config/fpu-sysv.h", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig%2Ffpu-sysv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfig%2Ffpu-sysv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-sysv.h?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -128,3 +128,76 @@ get_fpu_except_flags (void)\n \n   return result;\n }\n+\n+\n+int\n+get_fpu_rounding_mode (void)\n+{\n+  switch (fpgetround ())\n+    {\n+#ifdef FP_RN\n+      case FP_RN:\n+\treturn GFC_FPE_TONEAREST;\n+#endif\n+\n+#ifdef FP_RP\n+      case FP_RP:\n+\treturn GFC_FPE_UPWARD;\n+#endif\n+\n+#ifdef FP_RM\n+      case FP_RM:\n+\treturn GFC_FPE_DOWNWARD;\n+#endif\n+\n+#ifdef FP_RZ\n+      case FP_RZ:\n+\treturn GFC_FPE_TOWARDZERO;\n+#endif\n+      default:\n+\treturn GFC_FPE_INVALID;\n+    }\n+}\n+\n+\n+void\n+set_fpu_rounding_mode (int mode)\n+{\n+#if HAVE_FP_RND\n+  fp_rnd rnd_mode;\n+#elif HAVE_FP_RND_T\n+  fp_rnd_t rnd_mode;\n+#else\n+  choke me\n+#endif\n+\n+  switch (mode)\n+    {\n+#ifdef FP_RN\n+      case GFC_FPE_TONEAREST:\n+\trnd_mode = FP_RN;\n+        break;\n+#endif\n+\n+#ifdef FP_RP\n+      case GFC_FPE_UPWARD:\n+\trnd_mode = FP_RP;\n+        break;\n+#endif\n+\n+#ifdef FP_RM\n+      case GFC_FPE_DOWNWARD:\n+\trnd_mode = FP_RM;\n+        break;\n+#endif\n+\n+#ifdef FP_RZ\n+      case GFC_FPE_TOWARDZERO:\n+\trnd_mode = FP_RZ;\n+        break;\n+#endif\n+      default:\n+\treturn;\n+    }\n+  fpsetround (rnd_mode);\n+}"}, {"sha": "21c23107394a95d68d0908e293f8c47480ba5f19", "filename": "libgfortran/configure", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -654,7 +654,6 @@ CPP\n am__fastdepCC_FALSE\n am__fastdepCC_TRUE\n CCDEPMODE\n-am__nodep\n AMDEPBACKSLASH\n AMDEP_FALSE\n AMDEP_TRUE\n@@ -3387,11 +3386,11 @@ MAKEINFO=${MAKEINFO-\"${am_missing_run}makeinfo\"}\n \n # We need awk for the \"check\" target.  The system \"awk\" is bad on\n # some platforms.\n-# Always define AMTAR for backward compatibility.  Yes, it's still used\n-# in the wild :-(  We should find a proper way to deprecate it ...\n-AMTAR='$${TAR-tar}'\n+# Always define AMTAR for backward compatibility.\n \n-am__tar='$${TAR-tar} chof - \"$$tardir\"' am__untar='$${TAR-tar} xf -'\n+AMTAR=${AMTAR-\"${am_missing_run}tar\"}\n+\n+am__tar='${AMTAR} chof - \"$$tardir\"'; am__untar='${AMTAR} xf -'\n \n \n \n@@ -3524,7 +3523,6 @@ fi\n if test \"x$enable_dependency_tracking\" != xno; then\n   am_depcomp=\"$ac_aux_dir/depcomp\"\n   AMDEPBACKSLASH='\\'\n-  am__nodep='_no'\n fi\n  if test \"x$enable_dependency_tracking\" != xno; then\n   AMDEP_TRUE=\n@@ -4342,7 +4340,6 @@ else\n   # instance it was reported that on HP-UX the gcc test will end up\n   # making a dummy file named `D' -- because `-MD' means `put the output\n   # in D'.\n-  rm -rf conftest.dir\n   mkdir conftest.dir\n   # Copy depcomp to subdir because otherwise we won't find it if we're\n   # using a relative directory.\n@@ -4402,7 +4399,7 @@ else\n \tbreak\n       fi\n       ;;\n-    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n+    msvisualcpp | msvcmsys)\n       # This compiler won't grok `-c -o', but also, the minuso test has\n       # not run yet.  These depmodes are late enough in the game, and\n       # so weak that their functioning should not be impacted.\n@@ -5518,7 +5515,6 @@ else\n   # instance it was reported that on HP-UX the gcc test will end up\n   # making a dummy file named `D' -- because `-MD' means `put the output\n   # in D'.\n-  rm -rf conftest.dir\n   mkdir conftest.dir\n   # Copy depcomp to subdir because otherwise we won't find it if we're\n   # using a relative directory.\n@@ -5578,7 +5574,7 @@ else\n \tbreak\n       fi\n       ;;\n-    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n+    msvisualcpp | msvcmsys)\n       # This compiler won't grok `-c -o', but also, the minuso test has\n       # not run yet.  These depmodes are late enough in the game, and\n       # so weak that their functioning should not be impacted.\n@@ -12335,7 +12331,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12338 \"configure\"\n+#line 12334 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12441,7 +12437,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12444 \"configure\"\n+#line 12440 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -26030,6 +26026,27 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+fi\n+\n+ac_fn_c_check_type \"$LINENO\" \"fp_rnd\" \"ac_cv_type_fp_rnd\" \"#include <ieeefp.h>\n+\"\n+if test \"x$ac_cv_type_fp_rnd\" = x\"\"yes; then :\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_FP_RND 1\n+_ACEOF\n+\n+\n+fi\n+ac_fn_c_check_type \"$LINENO\" \"fp_rnd_t\" \"ac_cv_type_fp_rnd_t\" \"#include <ieeefp.h>\n+\"\n+if test \"x$ac_cv_type_fp_rnd_t\" = x\"\"yes; then :\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_FP_RND_T 1\n+_ACEOF\n+\n+\n fi\n \n "}, {"sha": "4609eba8aa1ac63a602d17dd6aae4ab6d1c4f2a8", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -513,6 +513,7 @@ fi\n # Check for SysV fpsetmask\n LIBGFOR_CHECK_FPSETMASK\n AC_CHECK_TYPES([fp_except,fp_except_t], [], [], [[#include <ieeefp.h>]])\n+AC_CHECK_TYPES([fp_rnd,fp_rnd_t], [], [], [[#include <ieeefp.h>]])\n \n # Check for AIX fp_trap and fp_enable\n AC_CHECK_FUNC([fp_trap],[have_fp_trap=yes AC_DEFINE([HAVE_FP_TRAP],[1],[fp_trap is present])])"}, {"sha": "1dcf72e7163f1c4370235db778e67eb915fe0e21", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -186,8 +186,14 @@ typedef enum\n unit_encoding;\n \n typedef enum\n-{ ROUND_UP, ROUND_DOWN, ROUND_ZERO, ROUND_NEAREST, ROUND_COMPATIBLE,\n-  ROUND_PROCDEFINED, ROUND_UNSPECIFIED }\n+{ ROUND_UP = GFC_FPE_UPWARD,\n+  ROUND_DOWN = GFC_FPE_DOWNWARD,\n+  ROUND_ZERO = GFC_FPE_TOWARDZERO,\n+  ROUND_NEAREST = GFC_FPE_TONEAREST,\n+  ROUND_COMPATIBLE = 10, /* round away from zero.  */\n+  ROUND_PROCDEFINED, /* Here as ROUND_NEAREST. */\n+  ROUND_UNSPECIFIED /* Should never occur. */\n+}\n unit_round;\n \n /* NOTE: unit_sign must correspond with the sign_status enumerator in"}, {"sha": "e35b1a061681504071a2f8d05221e2b80152db67", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -129,6 +129,24 @@ int\n convert_real (st_parameter_dt *dtp, void *dest, const char *buffer, int length)\n {\n   char *endptr = NULL;\n+  int round_mode, old_round_mode;\n+\n+  switch (dtp->u.p.current_unit->round_status)\n+    {\n+      case ROUND_COMPATIBLE:\n+\t/* FIXME: As NEAREST but round away from zero for a tie.  */\n+      case ROUND_UNSPECIFIED:\n+\t/* Should not occur.  */\n+      case ROUND_PROCDEFINED:\n+\tround_mode = ROUND_NEAREST;\n+\tbreak;\n+      default:\n+\tround_mode = dtp->u.p.current_unit->round_status;\n+\tbreak;\n+    }\n+\n+  old_round_mode = get_fpu_rounding_mode();\n+  set_fpu_rounding_mode (round_mode);\n \n   switch (length)\n     {\n@@ -167,6 +185,8 @@ convert_real (st_parameter_dt *dtp, void *dest, const char *buffer, int length)\n       internal_error (&dtp->common, \"Unsupported real kind during IO\");\n     }\n \n+  set_fpu_rounding_mode (old_round_mode);\n+\n   if (buffer == endptr)\n     {\n       generate_error (&dtp->common, LIBERROR_READ_VALUE,"}, {"sha": "6e5df5b1054d45aae02ffa5722555f6827a98a29", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a4f54cc5ff37df751528d1a30e9b573d2496ee/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=82a4f54cc5ff37df751528d1a30e9b573d2496ee", "patch": "@@ -743,9 +743,16 @@ internal_proto(gf_strerror);\n \n extern void set_fpu (void);\n internal_proto(set_fpu);\n+\n extern int get_fpu_except_flags (void);\n internal_proto(get_fpu_except_flags);\n \n+extern void set_fpu_rounding_mode (int round);\n+internal_proto(set_fpu_rounding_mode);\n+\n+extern int get_fpu_rounding_mode (void);\n+internal_proto(get_fpu_rounding_mode);\n+\n /* memory.c */\n \n extern void *xmalloc (size_t) __attribute__ ((malloc));"}]}