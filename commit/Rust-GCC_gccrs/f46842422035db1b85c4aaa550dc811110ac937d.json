{"sha": "f46842422035db1b85c4aaa550dc811110ac937d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ2ODQyNDIyMDM1ZGIxYjg1YzRhYWE1NTBkYzgxMTExMGFjOTM3ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-10-12T22:01:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-10-12T22:01:04Z"}, "message": "re PR fortran/45636 (Failed to fold simple Fortran string)\n\n\tPR fortran/45636\n\t* tree-ssa-forwprop.c: Include expr.h.\n\t(constant_pointer_difference, simplify_builtin_call): New functions.\n\t(tree_ssa_forward_propagate_single_use_vars): Call\n\tsimplify_builtin_call on builtin calls.\n\n\t* gcc.c-torture/execute/pr45636.c: New test.\n\t* gfortran.dg/pr45636.f90: New test.\n\nFrom-SVN: r165401", "tree": {"sha": "561536f5b3538b7ed56ec2e252ebba1d0fe89ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/561536f5b3538b7ed56ec2e252ebba1d0fe89ecc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f46842422035db1b85c4aaa550dc811110ac937d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46842422035db1b85c4aaa550dc811110ac937d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f46842422035db1b85c4aaa550dc811110ac937d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46842422035db1b85c4aaa550dc811110ac937d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad9eef11dfc362261d3de4231eab7eac352d7f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9eef11dfc362261d3de4231eab7eac352d7f9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9eef11dfc362261d3de4231eab7eac352d7f9f"}], "stats": {"total": 407, "additions": 406, "deletions": 1}, "files": [{"sha": "b58a88183125537c500a8c917a2e37cd1a3453e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f46842422035db1b85c4aaa550dc811110ac937d", "patch": "@@ -1,3 +1,11 @@\n+2010-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/45636\n+\t* tree-ssa-forwprop.c: Include expr.h.\n+\t(constant_pointer_difference, simplify_builtin_call): New functions.\n+\t(tree_ssa_forward_propagate_single_use_vars): Call\n+\tsimplify_builtin_call on builtin calls.\n+\n 2010-10-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.md (*adddi3_insn_sp32): Rename."}, {"sha": "a58f0265436e658b842854728185e327fbdefcca", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f46842422035db1b85c4aaa550dc811110ac937d", "patch": "@@ -2408,7 +2408,7 @@ tree-ssa-dse.o : tree-ssa-dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n tree-ssa-forwprop.o : tree-ssa-forwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(TREE_DUMP_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n-   langhooks.h $(FLAGS_H) $(GIMPLE_H) tree-pretty-print.h\n+   langhooks.h $(FLAGS_H) $(GIMPLE_H) tree-pretty-print.h $(EXPR_H)\n tree-ssa-phiprop.o : tree-ssa-phiprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(TREE_DUMP_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\"}, {"sha": "62aac64f5ce0e0e72a0176ff7ff29e37e103a9a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f46842422035db1b85c4aaa550dc811110ac937d", "patch": "@@ -1,3 +1,9 @@\n+2010-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/45636\n+\t* gcc.c-torture/execute/pr45636.c: New test.\n+\t* gfortran.dg/pr45636.f90: New test.\n+\n 2010-10-12  Richard Henderson  <rth@redhat.com>\n \n \t* g++.dg/abi/mangle40.C: Robustify tests for defined symbols."}, {"sha": "031c8037ffc9b0399888b175c098aced3d1dd96a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr45636.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45636.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45636.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45636.c?ref=f46842422035db1b85c4aaa550dc811110ac937d", "patch": "@@ -0,0 +1,75 @@\n+/* PR fortran/45636 */\n+\n+typedef __SIZE_TYPE__ size_t;\n+void *memcpy (void *__restrict__, const void *__restrict__, size_t);\n+void *mempcpy (void *__restrict__, const void *__restrict__, size_t);\n+void *memset (void *, int, size_t);\n+int memcmp (const void *, const void *, size_t);\n+extern void abort (void);\n+\n+struct A { int i; char c[32]; } a[2];\n+\n+__attribute__((noinline, noclone)) int\n+f1 (char *p, int q, int z)\n+{\n+  memcpy (p, \"abcd\", 4);\n+  if (q)\n+    z = z + 123;\n+  else\n+    z *= 114;\n+  memset (p + 4, ' ', 2);\n+  return z;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2 (void)\n+{\n+  char *p = mempcpy (&a[0].c[13], \"123456\", 4);\n+  memset (p, '7', 3);\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f3 (struct A *p)\n+{\n+  p++;\n+  char *q = &p->c[10];\n+  memcpy (q + 4, \"__1234567\" + 2, 7);\n+  memset (&p->c[21], '9', 3);\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f4 (void)\n+{\n+  memcpy (&a[0].c[10], \"0123456789\", 10);\n+  memset (&a[0].c[13], ' ', 3);\n+}\n+\n+__attribute__((noinline, noclone)) void\n+check (const char *p, const char *str, size_t size)\n+{\n+  const char *q;\n+  for (q = (const char *) &a; q < p; q++)\n+    if (*q)\n+      abort ();\n+  if (memcmp (p, str, size) != 0)\n+    abort ();\n+  for (q = p + size; q < (const char *) (&a[0] + 2); q++)\n+    if (*q)\n+      abort ();\n+  memset (&a, '\\0', sizeof a);\n+}\n+\n+int\n+main (void)\n+{\n+  if (f1 (&a[0].c[7], 1, 2) != 125)\n+    abort ();\n+  check (&a[0].c[7], \"abcd  \", 6);\n+  f2 ();\n+  check (&a[0].c[13], \"1234777\", 7);\n+  f3 (&a[0]);\n+  check (&a[1].c[14], \"1234567999\", 10);\n+  f4 ();\n+  check (&a[0].c[10], \"012   6789\", 10);\n+  return 0;\n+}"}, {"sha": "24447e8375cf7025aeb238bd211960bf73e0d85b", "filename": "gcc/testsuite/gfortran.dg/pr45636.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45636.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45636.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr45636.f90?ref=f46842422035db1b85c4aaa550dc811110ac937d", "patch": "@@ -0,0 +1,14 @@\n+! PR fortran/45636\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-forwprop2\" }\n+! PR 45636 - make sure no memset is needed for a short right-hand side.\n+program main\n+  character(len=2), parameter :: x='a '\n+  character(len=1), parameter :: y='b'\n+  character(len=4) :: a, b\n+  a = x\n+  b = y\n+  call sub(a, b)\n+end program main\n+! { dg-final { scan-tree-dump-times \"memset\" 0 \"forwprop2\" } }\n+! { dg-final { cleanup-tree-dump \"forwprop2\" } }"}, {"sha": "a68755e8b4032a059aebce5bb98986a2d115c51d", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 302, "deletions": 0, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46842422035db1b85c4aaa550dc811110ac937d/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=f46842422035db1b85c4aaa550dc811110ac937d", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"flags.h\"\n #include \"gimple.h\"\n+#include \"expr.h\"\n \n /* This pass propagates the RHS of assignment statements into use\n    sites of the LHS of the assignment.  It's basically a specialized\n@@ -1317,6 +1318,299 @@ simplify_gimple_switch (gimple stmt)\n     }\n }\n \n+/* For pointers p2 and p1 return p2 - p1 if the\n+   difference is known and constant, otherwise return NULL.  */\n+\n+static tree\n+constant_pointer_difference (tree p1, tree p2)\n+{\n+  int i, j;\n+#define CPD_ITERATIONS 5\n+  tree exps[2][CPD_ITERATIONS];\n+  tree offs[2][CPD_ITERATIONS];\n+  int cnt[2];\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      tree p = i ? p1 : p2;\n+      tree off = size_zero_node;\n+      gimple stmt;\n+      enum tree_code code;\n+\n+      /* For each of p1 and p2 we need to iterate at least\n+\t twice, to handle ADDR_EXPR directly in p1/p2,\n+\t SSA_NAME with ADDR_EXPR or POINTER_PLUS_EXPR etc.\n+\t on definition's stmt RHS.  Iterate a few extra times.  */\n+      j = 0;\n+      do\n+\t{\n+\t  if (!POINTER_TYPE_P (TREE_TYPE (p)))\n+\t    break;\n+\t  if (TREE_CODE (p) == ADDR_EXPR)\n+\t    {\n+\t      tree q = TREE_OPERAND (p, 0);\n+\t      HOST_WIDE_INT offset;\n+\t      tree base = get_addr_base_and_unit_offset (q, &offset);\n+\t      if (base)\n+\t\t{\n+\t\t  q = base;\n+\t\t  if (offset)\n+\t\t    off = size_binop (PLUS_EXPR, off, size_int (offset));\n+\t\t}\n+\t      if (TREE_CODE (q) == MEM_REF\n+\t\t  && TREE_CODE (TREE_OPERAND (q, 0)) == SSA_NAME)\n+\t\t{\n+\t\t  p = TREE_OPERAND (q, 0);\n+\t\t  off = size_binop (PLUS_EXPR, off,\n+\t\t\t\t    double_int_to_tree (sizetype,\n+\t\t\t\t\t\t\tmem_ref_offset (q)));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  exps[i][j] = q;\n+\t\t  offs[i][j++] = off;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  if (TREE_CODE (p) != SSA_NAME)\n+\t    break;\n+\t  exps[i][j] = p;\n+\t  offs[i][j++] = off;\n+\t  if (j == CPD_ITERATIONS)\n+\t    break;\n+\t  stmt = SSA_NAME_DEF_STMT (p);\n+\t  if (!is_gimple_assign (stmt) || gimple_assign_lhs (stmt) != p)\n+\t    break;\n+\t  code = gimple_assign_rhs_code (stmt);\n+\t  if (code == POINTER_PLUS_EXPR)\n+\t    {\n+\t      if (TREE_CODE (gimple_assign_rhs2 (stmt)) != INTEGER_CST)\n+\t\tbreak;\n+\t      off = size_binop (PLUS_EXPR, off, gimple_assign_rhs2 (stmt));\n+\t      p = gimple_assign_rhs1 (stmt);\n+\t    }\n+\t  else if (code == ADDR_EXPR || code == NOP_EXPR)\n+\t    p = gimple_assign_rhs1 (stmt);\n+\t  else\n+\t    break;\n+\t}\n+      while (1);\n+      cnt[i] = j;\n+    }\n+\n+  for (i = 0; i < cnt[0]; i++)\n+    for (j = 0; j < cnt[1]; j++)\n+      if (exps[0][i] == exps[1][j])\n+\treturn size_binop (MINUS_EXPR, offs[0][i], offs[1][j]);\n+\n+  return NULL_TREE;\n+}\n+\n+/* *GSI_P is a GIMPLE_CALL to a builtin function.\n+   Optimize\n+   memcpy (p, \"abcd\", 4);\n+   memset (p + 4, ' ', 3);\n+   into\n+   memcpy (p, \"abcd   \", 7);\n+   call if the latter can be stored by pieces during expansion.  */\n+\n+static bool\n+simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n+{\n+  gimple stmt1, stmt2 = gsi_stmt (*gsi_p);\n+  tree vuse = gimple_vuse (stmt2);\n+  if (vuse == NULL)\n+    return false;\n+  stmt1 = SSA_NAME_DEF_STMT (vuse);\n+\n+  switch (DECL_FUNCTION_CODE (callee2))\n+    {\n+    case BUILT_IN_MEMSET:\n+      if (gimple_call_num_args (stmt2) != 3\n+\t  || gimple_call_lhs (stmt2)\n+\t  || CHAR_BIT != 8\n+\t  || BITS_PER_UNIT != 8)\n+\tbreak;\n+      else\n+\t{\n+\t  tree callee1;\n+\t  tree ptr1, src1, str1, off1, len1, lhs1;\n+\t  tree ptr2 = gimple_call_arg (stmt2, 0);\n+\t  tree val2 = gimple_call_arg (stmt2, 1);\n+\t  tree len2 = gimple_call_arg (stmt2, 2);\n+\t  tree diff, vdef, new_str_cst;\n+\t  gimple use_stmt;\n+\t  unsigned int ptr1_align;\n+\t  unsigned HOST_WIDE_INT src_len;\n+\t  char *src_buf;\n+\t  use_operand_p use_p;\n+\n+\t  if (!host_integerp (val2, 0)\n+\t      || !host_integerp (len2, 1))\n+\t    break;\n+\t  if (is_gimple_call (stmt1))\n+\t    {\n+\t      /* If first stmt is a call, it needs to be memcpy\n+\t\t or mempcpy, with string literal as second argument and\n+\t\t constant length.  */\n+\t      callee1 = gimple_call_fndecl (stmt1);\n+\t      if (callee1 == NULL_TREE\n+\t\t  || DECL_BUILT_IN_CLASS (callee1) != BUILT_IN_NORMAL\n+\t\t  || gimple_call_num_args (stmt1) != 3)\n+\t\tbreak;\n+\t      if (DECL_FUNCTION_CODE (callee1) != BUILT_IN_MEMCPY\n+\t\t  && DECL_FUNCTION_CODE (callee1) != BUILT_IN_MEMPCPY)\n+\t\tbreak;\n+\t      ptr1 = gimple_call_arg (stmt1, 0);\n+\t      src1 = gimple_call_arg (stmt1, 1);\n+\t      len1 = gimple_call_arg (stmt1, 2);\n+\t      lhs1 = gimple_call_lhs (stmt1);\n+\t      if (!host_integerp (len1, 1))\n+\t\tbreak;\n+\t      str1 = string_constant (src1, &off1);\n+\t      if (str1 == NULL_TREE)\n+\t\tbreak;\n+\t      if (!host_integerp (off1, 1)\n+\t\t  || compare_tree_int (off1, TREE_STRING_LENGTH (str1) - 1) > 0\n+\t\t  || compare_tree_int (len1, TREE_STRING_LENGTH (str1)\n+\t\t\t\t\t     - tree_low_cst (off1, 1)) > 0\n+\t\t  || TREE_CODE (TREE_TYPE (str1)) != ARRAY_TYPE\n+\t\t  || TYPE_MODE (TREE_TYPE (TREE_TYPE (str1)))\n+\t\t     != TYPE_MODE (char_type_node))\n+\t\tbreak;\n+\t    }\n+\t  else if (gimple_assign_single_p (stmt1))\n+\t    {\n+\t      /* Otherwise look for length 1 memcpy optimized into\n+\t\t assignment.  */\n+    \t      ptr1 = gimple_assign_lhs (stmt1);\n+\t      src1 = gimple_assign_rhs1 (stmt1);\n+\t      if (TREE_CODE (ptr1) != MEM_REF\n+\t\t  || TYPE_MODE (TREE_TYPE (ptr1)) != TYPE_MODE (char_type_node)\n+\t\t  || !host_integerp (src1, 0))\n+\t\tbreak;\n+\t      ptr1 = build_fold_addr_expr (ptr1);\n+\t      callee1 = NULL_TREE;\n+\t      len1 = size_one_node;\n+\t      lhs1 = NULL_TREE;\n+\t      off1 = size_zero_node;\n+\t      str1 = NULL_TREE;\n+\t    }\n+\t  else\n+\t    break;\n+\n+\t  diff = constant_pointer_difference (ptr1, ptr2);\n+\t  if (diff == NULL && lhs1 != NULL)\n+\t    {\n+\t      diff = constant_pointer_difference (lhs1, ptr2);\n+\t      if (DECL_FUNCTION_CODE (callee1) == BUILT_IN_MEMPCPY\n+\t\t  && diff != NULL)\n+\t\tdiff = size_binop (PLUS_EXPR, diff,\n+\t\t\t\t   fold_convert (sizetype, len1));\n+\t    }\n+\t  /* If the difference between the second and first destination pointer\n+\t     is not constant, or is bigger than memcpy length, bail out.  */\n+\t  if (diff == NULL\n+\t      || !host_integerp (diff, 1)\n+\t      || tree_int_cst_lt (len1, diff))\n+\t    break;\n+\n+\t  /* Use maximum of difference plus memset length and memcpy length\n+\t     as the new memcpy length, if it is too big, bail out.  */\n+\t  src_len = tree_low_cst (diff, 1);\n+\t  src_len += tree_low_cst (len2, 1);\n+\t  if (src_len < (unsigned HOST_WIDE_INT) tree_low_cst (len1, 1))\n+\t    src_len = tree_low_cst (len1, 1);\n+\t  if (src_len > 1024)\n+\t    break;\n+\n+\t  /* If mempcpy value is used elsewhere, bail out, as mempcpy\n+\t     with bigger length will return different result.  */\n+\t  if (lhs1 != NULL_TREE\n+\t      && DECL_FUNCTION_CODE (callee1) == BUILT_IN_MEMPCPY\n+\t      && (TREE_CODE (lhs1) != SSA_NAME\n+\t\t  || !single_imm_use (lhs1, &use_p, &use_stmt)\n+\t\t  || use_stmt != stmt2))\n+\t    break;\n+\n+\t  /* If anything reads memory in between memcpy and memset\n+\t     call, the modified memcpy call might change it.  */\n+\t  vdef = gimple_vdef (stmt1);\n+\t  if (vdef != NULL\n+\t      && (!single_imm_use (vdef, &use_p, &use_stmt)\n+\t\t  || use_stmt != stmt2))\n+\t    break;\n+\n+\t  ptr1_align = get_pointer_alignment (ptr1, BIGGEST_ALIGNMENT);\n+\t  /* Construct the new source string literal.  */\n+\t  src_buf = XALLOCAVEC (char, src_len + 1);\n+\t  if (callee1)\n+\t    memcpy (src_buf,\n+\t\t    TREE_STRING_POINTER (str1) + tree_low_cst (off1, 1),\n+\t\t    tree_low_cst (len1, 1));\n+\t  else\n+\t    src_buf[0] = tree_low_cst (src1, 0);\n+\t  memset (src_buf + tree_low_cst (diff, 1),\n+\t\t  tree_low_cst (val2, 1), tree_low_cst (len2, 1));\n+\t  src_buf[src_len] = '\\0';\n+\t  /* Neither builtin_strncpy_read_str nor builtin_memcpy_read_str\n+\t     handle embedded '\\0's.  */\n+\t  if (strlen (src_buf) != src_len)\n+\t    break;\n+\t  rtl_profile_for_bb (gimple_bb (stmt2));\n+\t  /* If the new memcpy wouldn't be emitted by storing the literal\n+\t     by pieces, this optimization might enlarge .rodata too much,\n+\t     as commonly used string literals couldn't be shared any\n+\t     longer.  */\n+\t  if (!can_store_by_pieces (src_len,\n+\t\t\t\t    builtin_strncpy_read_str,\n+\t\t\t\t    src_buf, ptr1_align, false))\n+\t    break;\n+\n+\t  new_str_cst = build_string_literal (src_len, src_buf);\n+\t  if (callee1)\n+\t    {\n+\t      /* If STMT1 is a mem{,p}cpy call, adjust it and remove\n+\t\t memset call.  */\n+\t      if (lhs1 && DECL_FUNCTION_CODE (callee1) == BUILT_IN_MEMPCPY)\n+\t\tgimple_call_set_lhs (stmt1, NULL_TREE);\n+\t      gimple_call_set_arg (stmt1, 1, new_str_cst);\n+\t      gimple_call_set_arg (stmt1, 2,\n+\t\t\t\t   build_int_cst (TREE_TYPE (len1), src_len));\n+\t      update_stmt (stmt1);\n+\t      unlink_stmt_vdef (stmt2);\n+\t      gsi_remove (gsi_p, true);\n+\t      release_defs (stmt2);\n+\t      if (lhs1 && DECL_FUNCTION_CODE (callee1) == BUILT_IN_MEMPCPY)\n+\t\trelease_ssa_name (lhs1);\n+\t      return true;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Otherwise, if STMT1 is length 1 memcpy optimized into\n+\t\t assignment, remove STMT1 and change memset call into\n+\t\t memcpy call.  */\n+\t      gimple_stmt_iterator gsi = gsi_for_stmt (stmt1);\n+\n+\t      gimple_call_set_fndecl (stmt2, built_in_decls [BUILT_IN_MEMCPY]);\n+\t      gimple_call_set_arg (stmt2, 0, ptr1);\n+\t      gimple_call_set_arg (stmt2, 1, new_str_cst);\n+\t      gimple_call_set_arg (stmt2, 2,\n+\t\t\t\t   build_int_cst (TREE_TYPE (len2), src_len));\n+\t      unlink_stmt_vdef (stmt1);\n+\t      gsi_remove (&gsi, true);\n+\t      release_defs (stmt1);\n+\t      update_stmt (stmt2);\n+\t      return false;\n+\t    }\n+\t}\n+      break;\n+    default:\n+      break;\n+    }\n+  return false;\n+}\n+\n /* Run bitwise and assignments throug the folder.  If the first argument is an\n    ssa name that is itself a result of a typecast of an ADDR_EXPR to an\n    integer, feed the ADDR_EXPR to the folder rather than the ssa name.\n@@ -1784,6 +2078,14 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t\t\t\t\t      WARN_STRICT_OVERFLOW_CONDITIONAL);\n \t      gsi_next (&gsi);\n \t    }\n+\t  else if (is_gimple_call (stmt))\n+\t    {\n+\t      tree callee = gimple_call_fndecl (stmt);\n+\t      if (callee == NULL_TREE\n+\t\t  || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL\n+\t\t  || !simplify_builtin_call (&gsi, callee))\n+\t\tgsi_next (&gsi);\n+\t    }\n \t  else\n \t    gsi_next (&gsi);\n \t}"}]}