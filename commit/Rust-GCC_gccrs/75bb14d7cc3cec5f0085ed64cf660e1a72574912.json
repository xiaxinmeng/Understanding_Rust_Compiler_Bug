{"sha": "75bb14d7cc3cec5f0085ed64cf660e1a72574912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzViYjE0ZDdjYzNjZWM1ZjAwODVlZDY0Y2Y2NjBlMWE3MjU3NDkxMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-03-22T21:32:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-03-22T21:32:34Z"}, "message": "re PR target/70232 (excessive stack usage with -O2)\n\n\tPR target/70232\n\ttree-ssa-threadbackward.c\n\t(fsm_find_control_statement_thread_paths): Correctly distinguish\n\tbetween old style jump threads vs FSM jump threads.\n\n\tPR target/70232\n\t* gcc.dg/tree-ssa/pr70232.c: New test.\n\nFrom-SVN: r234409", "tree": {"sha": "eb3865559a521e6eaba78f21f692deb765bb08e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb3865559a521e6eaba78f21f692deb765bb08e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75bb14d7cc3cec5f0085ed64cf660e1a72574912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75bb14d7cc3cec5f0085ed64cf660e1a72574912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75bb14d7cc3cec5f0085ed64cf660e1a72574912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75bb14d7cc3cec5f0085ed64cf660e1a72574912/comments", "author": null, "committer": null, "parents": [{"sha": "104cdaf14f5ba38bda091ecc1a6f028c8d21586b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104cdaf14f5ba38bda091ecc1a6f028c8d21586b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/104cdaf14f5ba38bda091ecc1a6f028c8d21586b"}], "stats": {"total": 143, "additions": 142, "deletions": 1}, "files": [{"sha": "a7f7933ac79ab67ff44c3e62008f8c81b8c5e4cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75bb14d7cc3cec5f0085ed64cf660e1a72574912/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75bb14d7cc3cec5f0085ed64cf660e1a72574912/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75bb14d7cc3cec5f0085ed64cf660e1a72574912", "patch": "@@ -1,3 +1,10 @@\n+2016-03-22  Jeff Law  <law@redhat.com>\n+\n+\tPR target/70232\n+\ttree-ssa-threadbackward.c\n+\t(fsm_find_control_statement_thread_paths): Correctly distinguish\n+\tbetween old style jump threads vs FSM jump threads.\n+\n 2016-03-22  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR target/70302"}, {"sha": "eda8a9acc975382c887d0e37e687b6a294ffe154", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75bb14d7cc3cec5f0085ed64cf660e1a72574912/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75bb14d7cc3cec5f0085ed64cf660e1a72574912/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75bb14d7cc3cec5f0085ed64cf660e1a72574912", "patch": "@@ -1,3 +1,8 @@\n+2016-03-22  Jeff Law  <law@redhat.com>\n+\n+\tPR target/70232\n+\t* gcc.dg/tree-ssa/pr70232.c: New test.\n+\n 2016-03-22  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR target/70302"}, {"sha": "6cc987a722a83ca467a810ea8ada63ba3f3867ec", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr70232.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75bb14d7cc3cec5f0085ed64cf660e1a72574912/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr70232.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75bb14d7cc3cec5f0085ed64cf660e1a72574912/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr70232.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr70232.c?ref=75bb14d7cc3cec5f0085ed64cf660e1a72574912", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -w -fdump-tree-vrp1-details -fdump-tree-vrp2-details -fdump-tree-dom2-details -fdump-tree-dom3-details\" } */\n+\n+/* All the threads found by the FSM threader should have too\n+   many statements to be profitable.  */\n+/* { dg-final { scan-tree-dump-not \"Registering FSM \" \"dom2\"} } */\n+/* { dg-final { scan-tree-dump-not \"Registering FSM \" \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-not \"Registering FSM \" \"vrp1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Registering FSM \" \"vrp2\"} } */\n+\n+typedef _Bool bool;\n+typedef unsigned char uint8_t;\n+typedef unsigned long uint32_t;\n+typedef unsigned long long uint64_t;\n+typedef unsigned int size_t;\n+\n+enum {\n+ false = 0,\n+ true = 1\n+};\n+\n+struct list_head {\n+ struct list_head *next, *prev;\n+};\n+\n+\n+extern void * memcpy(void *, const void *, size_t);\n+extern int memcmp(const void *,const void *,size_t);\n+extern void * memset(void *, int, size_t);\n+extern void __memzero(void *ptr, size_t n);\n+\n+static inline uint64_t wwn_to_uint64_t(uint8_t *wwn)\n+{\n+ return (uint64_t)wwn[0] << 56 | (uint64_t)wwn[1] << 48 |\n+     (uint64_t)wwn[2] << 40 | (uint64_t)wwn[3] << 32 |\n+     (uint64_t)wwn[4] << 24 | (uint64_t)wwn[5] << 16 |\n+     (uint64_t)wwn[6] << 8 | (uint64_t)wwn[7];\n+}\n+\n+struct lpfc_name {\n+ union {\n+  uint8_t wwn[8];\n+ } u;\n+};\n+\n+struct lpfc_hba {\n+ uint32_t cfg_fof;\n+ uint32_t cfg_oas_flags;\n+ struct list_head luns;\n+};\n+\n+struct lpfc_device_id {\n+ struct lpfc_name vport_wwpn;\n+ struct lpfc_name target_wwpn;\n+ uint64_t lun;\n+};\n+\n+struct lpfc_device_data {\n+ struct list_head listentry;\n+ struct lpfc_device_id device_id;\n+ bool oas_enabled;\n+ bool available;\n+};\n+\n+bool\n+lpfc_find_next_oas_lun(struct lpfc_hba *phba, struct lpfc_name *vport_wwpn,\n+         struct lpfc_name *target_wwpn, uint64_t *starting_lun,\n+         struct lpfc_name *found_vport_wwpn,\n+         struct lpfc_name *found_target_wwpn,\n+         uint64_t *found_lun,\n+         uint32_t *found_lun_status)\n+{\n+\n+ struct lpfc_device_data *lun_info;\n+ struct lpfc_device_id *device_id;\n+ uint64_t lun;\n+ bool found = false;\n+\n+ if (__builtin_expect(!!(!phba), 0) || !vport_wwpn || !target_wwpn ||\n+     !starting_lun || !found_vport_wwpn ||\n+     !found_target_wwpn || !found_lun || !found_lun_status ||\n+     (*starting_lun == -1u) ||\n+     !phba->cfg_fof)\n+  return false;\n+\n+ lun = *starting_lun;\n+ *found_lun = -1;\n+ *starting_lun = -1;\n+\n+\n+\n+ for (lun_info = ({ const typeof( ((typeof(*lun_info) *)0)->listentry ) *__mptr = ((&phba->luns)->next); (typeof(*lun_info) *)( (char *)__mptr - __builtin_offsetof(typeof(*lun_info), listentry) );}); &lun_info->listentry != (&phba->luns); lun_info = ({ const typeof( ((typeof(*(lun_info)) *)0)->listentry ) *__mptr = ((lun_info)->listentry.next); (typeof(*(lun_info)) *)( (char *)__mptr - __builtin_offsetof(typeof(*(lun_info)), listentry) );})) {\n+  if (((wwn_to_uint64_t(vport_wwpn->u.wwn) == 0) ||\n+       (memcmp(&lun_info->device_id.vport_wwpn, vport_wwpn,\n+       sizeof(struct lpfc_name)) == 0)) &&\n+      ((wwn_to_uint64_t(target_wwpn->u.wwn) == 0) ||\n+       (memcmp(&lun_info->device_id.target_wwpn, target_wwpn,\n+       sizeof(struct lpfc_name)) == 0)) &&\n+      (lun_info->oas_enabled)) {\n+   device_id = &lun_info->device_id;\n+   if ((!found) && ((lun == 0) || (device_id->lun == lun))) {\n+    *found_lun = device_id->lun;\n+    memcpy(found_vport_wwpn, &device_id->vport_wwpn, sizeof(struct lpfc_name));\n+    memcpy(found_target_wwpn, &device_id->target_wwpn, sizeof(struct lpfc_name));\n+    if (lun_info->available)\n+     *found_lun_status = 0x01;\n+    else\n+     *found_lun_status = 0;\n+    if (phba->cfg_oas_flags & 0x01)\n+     ({ void *__p = (vport_wwpn); size_t __n = sizeof(struct lpfc_name); if ((__n) != 0) { if (__builtin_constant_p((0x0)) && (0x0) == 0) __memzero((__p),(__n)); else memset((__p),(0x0),(__n)); } (__p); })\n+                                     ;\n+    if (phba->cfg_oas_flags & 0x02)\n+     ({ void *__p = (target_wwpn); size_t __n = sizeof(struct lpfc_name); if ((__n) != 0) { if (__builtin_constant_p((0x0)) && (0x0) == 0) __memzero((__p),(__n)); else memset((__p),(0x0),(__n)); } (__p); })\n+                                     ;\n+    found = true;\n+   } else if (found) {\n+    *starting_lun = device_id->lun;\n+    memcpy(vport_wwpn, &device_id->vport_wwpn,\n+           sizeof(struct lpfc_name));\n+    memcpy(target_wwpn, &device_id->target_wwpn,\n+           sizeof(struct lpfc_name));\n+    break;\n+   }\n+  }\n+ }\n+ return found;\n+}\n+\n+"}, {"sha": "44b1b470f3a6d4ce2db6b412976034f1c1d62176", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75bb14d7cc3cec5f0085ed64cf660e1a72574912/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75bb14d7cc3cec5f0085ed64cf660e1a72574912/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=75bb14d7cc3cec5f0085ed64cf660e1a72574912", "patch": "@@ -451,7 +451,7 @@ fsm_find_control_statement_thread_paths (tree name,\n \n \t     So for that case, drastically reduce the number of statements\n \t     we are allowed to copy.  */\n-\t  if (!threaded_through_latch\n+\t  if (!(threaded_through_latch && threaded_multiway_branch)\n \t      && (n_insns * PARAM_VALUE (PARAM_FSM_SCALE_PATH_STMTS)\n \t\t  >= PARAM_VALUE (PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS)))\n \t    {"}]}