{"sha": "2e2255ffff45da118ea54715fbe880624f29b9cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUyMjU1ZmZmZjQ1ZGExMThlYTU0NzE1ZmJlODgwNjI0ZjI5YjljZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-03-25T20:24:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-03-25T20:24:42Z"}, "message": "re PR rtl-optimization/10171 (wrong code for inlined function)\n\n        PR optimization/10171\n        * unroll.c (unroll_loop): Don't delete the jump at the end unless\n        we also delete a jump at the beginning.\n\nFrom-SVN: r64863", "tree": {"sha": "c48ce8d00c0de5784247bb6050aa914358fd8591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c48ce8d00c0de5784247bb6050aa914358fd8591"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e2255ffff45da118ea54715fbe880624f29b9cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2255ffff45da118ea54715fbe880624f29b9cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e2255ffff45da118ea54715fbe880624f29b9cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2255ffff45da118ea54715fbe880624f29b9cf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8725a499793a072329573c0f71fbd703c09feef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8725a499793a072329573c0f71fbd703c09feef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8725a499793a072329573c0f71fbd703c09feef2"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "791d08cbf6515a1ffbab4ffe09183e5920faf1b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2255ffff45da118ea54715fbe880624f29b9cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2255ffff45da118ea54715fbe880624f29b9cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e2255ffff45da118ea54715fbe880624f29b9cf", "patch": "@@ -1,3 +1,9 @@\n+2003-03-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR optimization/10171\n+\t* unroll.c (unroll_loop): Don't delete the jump at the end unless\n+\twe also delete a jump at the beginning.\n+\n 2003-03-25  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* doc/contrib.texi (Contributors): Mention self as 68HC11/68HC12"}, {"sha": "e939f327bacf6616f76a48c07982bf7061af6818", "filename": "gcc/testsuite/gcc.dg/loop-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2255ffff45da118ea54715fbe880624f29b9cf/gcc%2Ftestsuite%2Fgcc.dg%2Floop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2255ffff45da118ea54715fbe880624f29b9cf/gcc%2Ftestsuite%2Fgcc.dg%2Floop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-2.c?ref=2e2255ffff45da118ea54715fbe880624f29b9cf", "patch": "@@ -0,0 +1,20 @@\n+/* PR optimization/10171 */\n+/* Bug: unroll_loop misoptimized the function so that we got\n+   0 iterations of the loop rather than the correct 1.  */\n+/* { dg-do run } */\n+\n+inline int tag() { return 0; }\n+\n+void f ();\n+\n+int main() {\n+  int i;\n+  for (i = 0; i < (tag() ? 2 : 1); i++)\n+    f();\n+  abort ();\n+}\n+\n+void f ()\n+{\n+  exit (0);\n+}"}, {"sha": "9db997512c1acf75ba22c9665e56f460ad32840d", "filename": "gcc/unroll.c", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2255ffff45da118ea54715fbe880624f29b9cf/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2255ffff45da118ea54715fbe880624f29b9cf/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=2e2255ffff45da118ea54715fbe880624f29b9cf", "patch": "@@ -305,9 +305,11 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n \t jump to the loop condition.  Make sure to delete the jump\n \t insn, otherwise the loop body will never execute.  */\n \n+      /* FIXME this actually checks for a jump to the continue point, which\n+\t is not the same as the condition in a for loop.  As a result, this\n+\t optimization fails for most for loops.  We should really use flow\n+\t information rather than instruction pattern matching.  */\n       rtx ujump = ujump_to_loop_cont (loop->start, loop->cont);\n-      if (ujump)\n-\tdelete_related_insns (ujump);\n \n       /* If number of iterations is exactly 1, then eliminate the compare and\n \t branch at the end of the loop since they will never be taken.\n@@ -319,9 +321,10 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n       if (GET_CODE (last_loop_insn) == BARRIER)\n \t{\n \t  /* Delete the jump insn.  This will delete the barrier also.  */\n-\t  delete_related_insns (PREV_INSN (last_loop_insn));\n+\t  last_loop_insn = PREV_INSN (last_loop_insn);\n \t}\n-      else if (GET_CODE (last_loop_insn) == JUMP_INSN)\n+\n+      if (ujump && GET_CODE (last_loop_insn) == JUMP_INSN)\n \t{\n #ifdef HAVE_cc0\n \t  rtx prev = PREV_INSN (last_loop_insn);\n@@ -333,24 +336,27 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n \t  if (only_sets_cc0_p (prev))\n \t    delete_related_insns (prev);\n #endif\n-\t}\n \n-      /* Remove the loop notes since this is no longer a loop.  */\n-      if (loop->vtop)\n-\tdelete_related_insns (loop->vtop);\n-      if (loop->cont)\n-\tdelete_related_insns (loop->cont);\n-      if (loop_start)\n-\tdelete_related_insns (loop_start);\n-      if (loop_end)\n-\tdelete_related_insns (loop_end);\n+\t  delete_related_insns (ujump);\n \n-      return;\n+\t  /* Remove the loop notes since this is no longer a loop.  */\n+\t  if (loop->vtop)\n+\t    delete_related_insns (loop->vtop);\n+\t  if (loop->cont)\n+\t    delete_related_insns (loop->cont);\n+\t  if (loop_start)\n+\t    delete_related_insns (loop_start);\n+\t  if (loop_end)\n+\t    delete_related_insns (loop_end);\n+\n+\t  return;\n+\t}\n     }\n-  else if (loop_info->n_iterations > 0\n-\t   /* Avoid overflow in the next expression.  */\n-\t   && loop_info->n_iterations < (unsigned) MAX_UNROLLED_INSNS\n-\t   && loop_info->n_iterations * insn_count < (unsigned) MAX_UNROLLED_INSNS)\n+\n+  if (loop_info->n_iterations > 0\n+      /* Avoid overflow in the next expression.  */\n+      && loop_info->n_iterations < (unsigned) MAX_UNROLLED_INSNS\n+      && loop_info->n_iterations * insn_count < (unsigned) MAX_UNROLLED_INSNS)\n     {\n       unroll_number = loop_info->n_iterations;\n       unroll_type = UNROLL_COMPLETELY;"}]}