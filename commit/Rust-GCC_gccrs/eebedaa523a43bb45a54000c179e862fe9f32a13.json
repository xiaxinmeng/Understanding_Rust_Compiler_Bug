{"sha": "eebedaa523a43bb45a54000c179e862fe9f32a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViZWRhYTUyM2E0M2JiNDVhNTQwMDBjMTc5ZTg2MmZlOWYzMmExMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-10-11T12:43:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-10-11T12:43:43Z"}, "message": "calls.c: Fix formatting.\n\n\t* calls.c: Fix formatting.\n\t* c-decl.c: Likewise.\n\t* cfgcleanup.c: Likewise.\n\t* combine.c: Likewise.\n\t* cppfiles.c: Likewise.\n\t* cpplib.c: Likewise.\n\t* cppmacro.c: Likewise.\n\t* crtstuff.c: Likewise.\n\t* cse.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* expmed.c: Likewise.\n\t* expr.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* function.c: Likewise.\n\t* gcse.c: Likewise.\n\t* genattrtab.c: Likewise.\n\t* ggc-page.c: Likewise.\n\t* integrate.c: Likewise.\n\t* libgcc2.c: Likewise.\n\t* loop.c: Likewise.\n\t* optabs.c: Likewise.\n\t* profile.c: Likewise.\n\t* protoize.c: Likewise.\n\t* real.c: Likewise.\n\t* recog.c: Likewise.\n\t* reload1.c: Likewise.\n\t* reload.c: Likewise.\n\t* reorg.c: Likewise.\n\t* resource.c: Likewise.\n\t* sched-rgn.c: Likewise.\n\t* sdbout.c: Likewise.\n\t* stmt.c: Likewise.\n\t* toplev.c: Likewise.\n\t* varasm.c: Likewise.\n\nFrom-SVN: r46182", "tree": {"sha": "0a6c2fe46008d6816c9ccb0e2dbdd0a8f343664e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a6c2fe46008d6816c9ccb0e2dbdd0a8f343664e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eebedaa523a43bb45a54000c179e862fe9f32a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebedaa523a43bb45a54000c179e862fe9f32a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eebedaa523a43bb45a54000c179e862fe9f32a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebedaa523a43bb45a54000c179e862fe9f32a13/comments", "author": null, "committer": null, "parents": [{"sha": "fd079ba91c196e1d50a170409e6a23b74c852aab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd079ba91c196e1d50a170409e6a23b74c852aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd079ba91c196e1d50a170409e6a23b74c852aab"}], "stats": {"total": 167, "additions": 91, "deletions": 76}, "files": [{"sha": "237ca1b5447042e2cb1b2278bb4bc9b2cee0aed1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -1,3 +1,18 @@\n+2001-10-11  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* basic-block.h: Fix formatting.\n+\t* bitmap.h: Likewise.\n+\t* cpplib.h: Likewise.\n+\t* c-tree.h: Likewise.\n+\t* diagnostic.h: Likewise.\n+\t* flags.h: Likewise.\n+\t* ggc.h: Likewise.\n+\t* longlong.h: Likewise.\n+\t* real.h: Likewise.\n+\t* reload.h: Likewise.\n+\t* rtl.h: Likewise.\n+\t* tree.h: Likewise.\n+\n 2001-10-10  Richard Henderson  <rth@redhat.com>\n \n \t* c-parse.in (asm_operand): Allow named operands."}, {"sha": "c56ea772c6e95b00bec829a188dddccad6cebb5f", "filename": "gcc/basic-block.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -83,19 +83,19 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n /* Loop over all registers in REGSET, starting with MIN, setting REGNUM to the\n-   register number and executing CODE for all registers that are set. */\n+   register number and executing CODE for all registers that are set.  */\n #define EXECUTE_IF_SET_IN_REG_SET(REGSET, MIN, REGNUM, CODE)\t\t\\\n   EXECUTE_IF_SET_IN_BITMAP (REGSET, MIN, REGNUM, CODE)\n \n /* Loop over all registers in REGSET1 and REGSET2, starting with MIN, setting\n    REGNUM to the register number and executing CODE for all registers that are\n-   set in the first regset and not set in the second. */\n+   set in the first regset and not set in the second.  */\n #define EXECUTE_IF_AND_COMPL_IN_REG_SET(REGSET1, REGSET2, MIN, REGNUM, CODE) \\\n   EXECUTE_IF_AND_COMPL_IN_BITMAP (REGSET1, REGSET2, MIN, REGNUM, CODE)\n \n /* Loop over all registers in REGSET1 and REGSET2, starting with MIN, setting\n    REGNUM to the register number and executing CODE for all registers that are\n-   set in both regsets. */\n+   set in both regsets.  */\n #define EXECUTE_IF_AND_IN_REG_SET(REGSET1, REGSET2, MIN, REGNUM, CODE) \\\n   EXECUTE_IF_AND_IN_BITMAP (REGSET1, REGSET2, MIN, REGNUM, CODE)\n \n@@ -275,7 +275,7 @@ extern struct obstack flow_obstack;\n #define ENTRY_BLOCK (-1)\n #define EXIT_BLOCK (-2)\n \n-/* Special block number not valid for any block. */\n+/* Special block number not valid for any block.  */\n #define INVALID_BLOCK (-3)\n \n /* Similarly, block pointers for the edge list.  */\n@@ -654,7 +654,7 @@ extern void free_aux_for_edges\t\tPARAMS ((void));\n \n /* This function is always defined so it can be called from the\n    debugger, and it is declared extern so we don't get warnings about\n-   it being unused. */\n+   it being unused.  */\n extern void verify_flow_info\t\tPARAMS ((void));\n extern int flow_loop_outside_edge_p\tPARAMS ((const struct loop *, edge));\n "}, {"sha": "802642af8044bb9fd4677a419cfcd650d3b9e874", "filename": "gcc/bitmap.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -41,17 +41,17 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n typedef struct bitmap_element_def\n {\n-  struct bitmap_element_def *next;\t\t/* Next element. */\n-  struct bitmap_element_def *prev;\t\t/* Previous element. */\n-  unsigned int indx;\t\t\t/* regno/BITMAP_ELEMENT_ALL_BITS. */\n-  unsigned HOST_WIDE_INT bits[BITMAP_ELEMENT_WORDS]; /* Bits that are set. */\n+  struct bitmap_element_def *next;\t\t/* Next element.  */\n+  struct bitmap_element_def *prev;\t\t/* Previous element.  */\n+  unsigned int indx;\t\t\t/* regno/BITMAP_ELEMENT_ALL_BITS.  */\n+  unsigned HOST_WIDE_INT bits[BITMAP_ELEMENT_WORDS]; /* Bits that are set.  */\n } bitmap_element;\n \n /* Head of bitmap linked list.  */\n typedef struct bitmap_head_def {\n-  bitmap_element *first;\t/* First element in linked list. */\n-  bitmap_element *current;\t/* Last element looked at. */\n-  unsigned int indx;\t\t/* Index of last element looked at. */\n+  bitmap_element *first;\t/* First element in linked list.  */\n+  bitmap_element *current;\t/* Last element looked at.  */\n+  unsigned int indx;\t\t/* Index of last element looked at.  */\n \n } bitmap_head, *bitmap;\n \n@@ -70,7 +70,7 @@ extern bitmap_element bitmap_zero_bits;\t/* Zero bitmap element */\n /* Clear a bitmap by freeing up the linked list.  */\n extern void bitmap_clear PARAMS ((bitmap));\n \n-/* Copy a bitmap to another bitmap. */\n+/* Copy a bitmap to another bitmap.  */\n extern void bitmap_copy PARAMS ((bitmap, bitmap));\n \n /* True if two bitmaps are identical.  */\n@@ -158,7 +158,7 @@ do {\t\t\t\t\t\t\\\n #define BITMAP_INIT_ONCE()\n \n /* Loop over all bits in BITMAP, starting with MIN, setting BITNUM to the\n-   bit number and executing CODE for all bits that are set. */\n+   bit number and executing CODE for all bits that are set.  */\n \n #define EXECUTE_IF_SET_IN_BITMAP(BITMAP, MIN, BITNUM, CODE)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n@@ -215,7 +215,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Loop over all bits in BITMAP1 and BITMAP2, starting with MIN, setting\n    BITNUM to the bit number and executing CODE for all bits that are set in\n-   the first bitmap and not set in the second. */\n+   the first bitmap and not set in the second.  */\n \n #define EXECUTE_IF_AND_COMPL_IN_BITMAP(BITMAP1, BITMAP2, MIN, BITNUM, CODE) \\\n do {\t\t\t\t\t\t\t\t\t\\\n@@ -282,7 +282,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Loop over all bits in BITMAP1 and BITMAP2, starting with MIN, setting\n    BITNUM to the bit number and executing CODE for all bits that are set in\n-   the both bitmaps. */\n+   the both bitmaps.  */\n \n #define EXECUTE_IF_AND_IN_BITMAP(BITMAP1, BITMAP2, MIN, BITNUM, CODE)\t\\\n do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "09297a83661b8066689d812f6e25f34ae017e56a", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -277,7 +277,7 @@ extern int skip_evaluation;\n extern int dollars_in_ident;\n \n /* Nonzero means allow type mismatches in conditional expressions;\n-   just make their values `void'.   */\n+   just make their values `void'.  */\n \n extern int flag_cond_mismatch;\n "}, {"sha": "d9f5d988f80ec3816707a20d7ecc6939ce021634", "filename": "gcc/cpplib.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -211,7 +211,7 @@ struct cpp_options\n   /* Characters between tab stops.  */\n   unsigned int tabstop;\n \n-  /* Pending options - -D, -U, -A, -I, -ixxx. */\n+  /* Pending options - -D, -U, -A, -I, -ixxx.  */\n   struct cpp_pending *pending;\n \n   /* File name which deps are being written to.  This is 0 if deps are\n@@ -273,7 +273,7 @@ struct cpp_options\n      generated files and not errors.  */\n   unsigned char print_deps_missing_files;\n \n-  /* If true, fopen (deps_file, \"a\") else fopen (deps_file, \"w\"). */\n+  /* If true, fopen (deps_file, \"a\") else fopen (deps_file, \"w\").  */\n   unsigned char print_deps_append;\n \n   /* Nonzero means print names of header files (-H).  */\n@@ -323,7 +323,7 @@ struct cpp_options\n      the source-file directory.  */\n   unsigned char ignore_srcdir;\n \n-  /* Zero means dollar signs are punctuation. */\n+  /* Zero means dollar signs are punctuation.  */\n   unsigned char dollars_in_ident;\n \n   /* Nonzero means warn if undefined identifiers are evaluated in an #if.  */\n@@ -378,7 +378,7 @@ struct cpp_callbacks\n };\n \n #define CPP_FATAL_LIMIT 1000\n-/* True if we have seen a \"fatal\" error. */\n+/* True if we have seen a \"fatal\" error.  */\n #define CPP_FATAL_ERRORS(PFILE) (cpp_errors (PFILE) >= CPP_FATAL_LIMIT)\n \n /* Name under which this program was invoked.  */"}, {"sha": "403941ca43f7c22b14a92d15a15eb1b395d71928", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -61,7 +61,7 @@ typedef int (*printer_fn) PARAMS ((output_buffer *));\n /* This data structure encapsulates an output_buffer's state.  */\n typedef struct\n {\n-  /* The prefix for each new line.   */\n+  /* The prefix for each new line.  */\n   const char *prefix;\n \n   /* The real upper bound of number of characters per line, taking into\n@@ -191,7 +191,7 @@ struct diagnostic_context\n   */\n   void (*begin_diagnostic) PARAMS ((output_buffer *, diagnostic_context *));\n \n-  /* This function is called after the diagnostic message is printed.   */\n+  /* This function is called after the diagnostic message is printed.  */\n   void (*end_diagnostic) PARAMS ((output_buffer *, diagnostic_context *));\n \n   /* Hook for front-end extensions.  */"}, {"sha": "bf9e2af95ec553d4c5abc12cb8160b6e32609faa", "filename": "gcc/flags.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -42,7 +42,7 @@ enum debug_info_level\n {\n   DINFO_LEVEL_NONE,\t/* Write no debugging info.  */\n   DINFO_LEVEL_TERSE,\t/* Write minimal info to support tracebacks only.  */\n-  DINFO_LEVEL_NORMAL,\t/* Write info for all declarations (and line table). */\n+  DINFO_LEVEL_NORMAL,\t/* Write info for all declarations (and line table).  */\n   DINFO_LEVEL_VERBOSE\t/* Write normal info plus #define/#undef info.  */\n };\n \n@@ -89,7 +89,7 @@ extern int extra_warnings;\n \n /* Nonzero to warn about unused variables, functions et.al.  Use\n    set_Wunused() to update the -Wunused-* flags that correspond to the\n-   -Wunused option. */\n+   -Wunused option.  */\n \n extern void set_Wunused PARAMS ((int setting));\n \n@@ -119,7 +119,7 @@ extern int warn_uninitialized;\n \n extern int warn_unknown_pragmas;\n \n-/* Nonzero means warn about all declarations which shadow others.   */\n+/* Nonzero means warn about all declarations which shadow others.  */\n \n extern int warn_shadow;\n \n@@ -132,7 +132,7 @@ extern int warn_switch;\n \n extern int warn_return_type;\n \n-/* Warn about functions which might be candidates for attribute noreturn. */\n+/* Warn about functions which might be candidates for attribute noreturn.  */\n \n extern int warn_missing_noreturn;\n \n@@ -174,15 +174,15 @@ extern int profile_flag;\n \n extern int profile_block_flag;\n \n-/* Nonzero if generating code to profile program flow graph arcs. */\n+/* Nonzero if generating code to profile program flow graph arcs.  */\n \n extern int profile_arc_flag;\n \n-/* Nonzero if generating info for gcov to calculate line test coverage. */\n+/* Nonzero if generating info for gcov to calculate line test coverage.  */\n \n extern int flag_test_coverage;\n \n-/* Nonzero indicates that branch taken probabilities should be calculated. */\n+/* Nonzero indicates that branch taken probabilities should be calculated.  */\n \n extern int flag_branch_probabilities;\n \n@@ -266,12 +266,12 @@ extern int flag_unroll_loops;\n extern int flag_unroll_all_loops;\n \n /* Nonzero forces all invariant computations in loops to be moved\n-   outside the loop. */\n+   outside the loop.  */\n \n extern int flag_move_all_movables;\n \n /* Nonzero forces all general induction variables in loops to be\n-   strength reduced. */\n+   strength reduced.  */\n \n extern int flag_reduce_all_givs;\n \n@@ -408,16 +408,16 @@ extern int flag_schedule_speculative_load;\n extern int flag_schedule_speculative_load_dangerous;\n \n /* flag_branch_on_count_reg means try to replace add-1,compare,branch tupple\n-   by a cheaper branch, on a count register. */\n+   by a cheaper branch, on a count register.  */\n extern int flag_branch_on_count_reg;\n \n /* This option is set to 1 on -fsingle-precision-constant option which is\n    used to convert the floating point constants to single precision \n-   constants. */\n+   constants.  */\n \n extern int flag_single_precision_constant;\n \n-/* Nonzero means put things in delayed-branch slots if supported. */\n+/* Nonzero means put things in delayed-branch slots if supported.  */\n \n extern int flag_delayed_branch;\n \n@@ -523,7 +523,7 @@ extern int flag_regmove;\n /* Instrument functions with calls at entry and exit, for profiling.  */\n extern int flag_instrument_function_entry_exit;\n \n-/* Perform a peephole pass before sched2. */\n+/* Perform a peephole pass before sched2.  */\n extern int flag_peephole2;\n \n /* Try to guess branch probablities.  */"}, {"sha": "ae021fc203afea2382972c7794629ff998c00ce9", "filename": "gcc/ggc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -123,7 +123,7 @@ extern void ggc_mark_rtvec_children\tPARAMS ((struct rtvec_def *));\n \n /* A GC implementation must provide these functions.  */\n \n-/* Initialize the garbage collector.   */\n+/* Initialize the garbage collector.  */\n extern void init_ggc\t\tPARAMS ((void));\n extern void init_stringpool\tPARAMS ((void));\n "}, {"sha": "f218a027f8ca1a2585fa4af9799a3e5f113bab89", "filename": "gcc/longlong.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -585,7 +585,7 @@ UDItype __umulsidi3 (USItype, USItype);\n \t     \"1\" ((USItype) (al)),\t\t\t\t\t\\\n \t     \"g\" ((USItype) (bl)))\n \n-/* The '020, '030, '040 and CPU32 have 32x32->64 and 64/32->32q-32r. */\n+/* The '020, '030, '040 and CPU32 have 32x32->64 and 64/32->32q-32r.  */\n #if defined (__mc68020__) || defined(mc68020) \\\n \t|| defined(__mc68030__) || defined(mc68030) \\\n \t|| defined(__mc68040__) || defined(mc68040) \\\n@@ -654,7 +654,7 @@ UDItype __umulsidi3 (USItype, USItype);\n #endif /* not mcf5200 */\n #endif /* not mc68020 */\n \n-/* The '020, '030, '040 and '060 have bitfield insns. */\n+/* The '020, '030, '040 and '060 have bitfield insns.  */\n #if defined (__mc68020__) || defined(mc68020) \\\n \t|| defined(__mc68030__) || defined(mc68030) \\\n \t|| defined(__mc68040__) || defined(mc68040) \\\n@@ -1184,7 +1184,7 @@ UDItype __umulsidi3 (USItype, USItype);\n \t   : \"r\" ((USItype) (__d)),\t\t\t\t\t\\\n \t     \"1\" ((USItype) (__n1)),\t\t\t\t\t\\\n \t     \"0\" ((USItype) (__n0)) : \"g1\" __AND_CLOBBER_CC)\n-#define UDIV_TIME (3+7*32)\t/* 7 instructions/iteration. 32 iterations. */\n+#define UDIV_TIME (3+7*32)\t/* 7 instructions/iteration. 32 iterations.  */\n #endif /* __sparclite__ */\n #endif /* __sparc_v8__ */\n #endif /* sparc32 */\n@@ -1377,7 +1377,7 @@ UDItype __umulsidi3 (USItype, USItype);\n     __x1 += __ll_highpart (__x0);/* this can't give carry */\t\t\\\n     __x1 += __x2;\t\t/* but this indeed can */\t\t\\\n     if (__x1 < __x2)\t\t/* did we get it? */\t\t\t\\\n-      __x3 += __ll_B;\t\t/* yes, add it in the proper pos. */\t\\\n+      __x3 += __ll_B;\t\t/* yes, add it in the proper pos.  */\t\\\n \t\t\t\t\t\t\t\t\t\\\n     (w1) = __x3 + __ll_highpart (__x1);\t\t\t\t\t\\\n     (w0) = __ll_lowpart (__x1) * __ll_B + __ll_lowpart (__x0);\t\t\\"}, {"sha": "1e4dab188e25a9dc99e13dd4c8b0fa6ca6cdba10", "filename": "gcc/real.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -89,7 +89,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* **** Start of software floating point emulator interface macros **** */\n \n /* Support 80-bit extended real XFmode if LONG_DOUBLE_TYPE_SIZE\n-   has been defined to be 96 in the tm.h machine file. */\n+   has been defined to be 96 in the tm.h machine file.  */\n #if (MAX_LONG_DOUBLE_TYPE_SIZE == 96)\n #define REAL_IS_NOT_DOUBLE\n #define REAL_ARITHMETIC\n@@ -113,15 +113,15 @@ typedef struct {\n \n #if HOST_FLOAT_FORMAT != TARGET_FLOAT_FORMAT\n /* If no XFmode support, then a REAL_VALUE_TYPE is 64 bits wide\n-   but it is not necessarily a host machine double. */\n+   but it is not necessarily a host machine double.  */\n #define REAL_IS_NOT_DOUBLE\n typedef struct {\n   HOST_WIDE_INT r[(7 + sizeof (HOST_WIDE_INT))/(sizeof (HOST_WIDE_INT))];\n } realvaluetype;\n #define REAL_VALUE_TYPE realvaluetype\n #else\n /* If host and target formats are compatible, then a REAL_VALUE_TYPE\n-   is actually a host machine double. */\n+   is actually a host machine double.  */\n #define REAL_VALUE_TYPE double\n #endif\n \n@@ -140,7 +140,7 @@ extern unsigned int significand_size\tPARAMS ((enum machine_mode));\n #define REAL_ARITHMETIC(value, code, d1, d2) \\\n   earith (&(value), (code), &(d1), &(d2))\n \n-/* Declare functions in real.c. */\n+/* Declare functions in real.c.  */\n extern void earith\t\tPARAMS ((REAL_VALUE_TYPE *, int,\n \t\t\t\t       REAL_VALUE_TYPE *, REAL_VALUE_TYPE *));\n extern REAL_VALUE_TYPE etrunci\tPARAMS ((REAL_VALUE_TYPE));\n@@ -185,7 +185,7 @@ extern REAL_VALUE_TYPE ereal_from_double PARAMS ((HOST_WIDE_INT *));\n /* Convert a floating-point value to integer, rounding toward zero.  */\n #define REAL_VALUE_FIX(x) (efixi (x))\n /* Convert a floating-point value to unsigned integer, rounding\n-   toward zero. */\n+   toward zero.  */\n #define REAL_VALUE_UNSIGNED_FIX(x) (efixui (x))\n \n /* Convert ASCII string S to floating point in mode M.\n@@ -207,7 +207,7 @@ extern REAL_VALUE_TYPE ereal_from_double PARAMS ((HOST_WIDE_INT *));\n #define REAL_VALUE_FROM_UNSIGNED_INT(d, lo, hi, mode) \\\n   ereal_from_uint (&d, lo, hi, mode)\n \n-/* IN is a REAL_VALUE_TYPE.  OUT is an array of longs. */\n+/* IN is a REAL_VALUE_TYPE.  OUT is an array of longs.  */\n #if (INTEL_EXTENDED_IEEE_FORMAT != 0) && (MAX_LONG_DOUBLE_TYPE_SIZE == 128)\n #define REAL_VALUE_TO_TARGET_LONG_DOUBLE(IN, OUT) (etarldouble ((IN), (OUT)))\n #else\n@@ -219,20 +219,20 @@ extern REAL_VALUE_TYPE ereal_from_double PARAMS ((HOST_WIDE_INT *));\n #endif\n #define REAL_VALUE_TO_TARGET_DOUBLE(IN, OUT) (etardouble ((IN), (OUT)))\n \n-/* IN is a REAL_VALUE_TYPE.  OUT is a long. */\n+/* IN is a REAL_VALUE_TYPE.  OUT is a long.  */\n #define REAL_VALUE_TO_TARGET_SINGLE(IN, OUT) ((OUT) = etarsingle ((IN)))\n \n-/* Inverse of REAL_VALUE_TO_TARGET_DOUBLE. */\n+/* Inverse of REAL_VALUE_TO_TARGET_DOUBLE.  */\n #define REAL_VALUE_UNTO_TARGET_DOUBLE(d)  (ereal_unto_double (d))\n \n-/* Inverse of REAL_VALUE_TO_TARGET_SINGLE. */\n+/* Inverse of REAL_VALUE_TO_TARGET_SINGLE.  */\n #define REAL_VALUE_UNTO_TARGET_SINGLE(f)  (ereal_unto_float (f))\n \n /* d is an array of HOST_WIDE_INT that holds a double precision\n-   value in the target computer's floating point format. */\n+   value in the target computer's floating point format.  */\n #define REAL_VALUE_FROM_TARGET_DOUBLE(d)  (ereal_from_double (d))\n \n-/* f is a HOST_WIDE_INT containing a single precision target float value. */\n+/* f is a HOST_WIDE_INT containing a single precision target float value.  */\n #define REAL_VALUE_FROM_TARGET_SINGLE(f)  (ereal_from_float (f))\n \n /* Conversions to decimal ASCII string.  */\n@@ -318,7 +318,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #endif\n #endif /* HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT */\n \n-/* In this configuration, double and long double are the same. */\n+/* In this configuration, double and long double are the same.  */\n #ifndef REAL_VALUE_TO_TARGET_LONG_DOUBLE\n #define REAL_VALUE_TO_TARGET_LONG_DOUBLE(a, b) REAL_VALUE_TO_TARGET_DOUBLE (a, b)\n #endif\n@@ -356,7 +356,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #endif\n \n /* Convert a floating-point value to unsigned integer, rounding\n-   toward zero. */\n+   toward zero.  */\n #ifndef REAL_VALUE_UNSIGNED_FIX\n #define REAL_VALUE_UNSIGNED_FIX(x) ((unsigned int) (x))\n #endif\n@@ -370,7 +370,7 @@ extern double ldexp PARAMS ((double, int));\n /* Convert the string X to a floating-point value.  */\n #ifndef REAL_VALUE_ATOF\n #if 1\n-/* Use real.c to convert decimal numbers to binary, ... */\n+/* Use real.c to convert decimal numbers to binary, ...  */\n #define REAL_VALUE_ATOF(x, s) ereal_atof (x, s)\n /* Could use ereal_atof here for hexadecimal floats too, but real_hex_to_f\n    is OK and it uses faster native fp arithmetic.  */\n@@ -416,22 +416,22 @@ extern REAL_VALUE_TYPE real_value_truncate PARAMS ((enum machine_mode,\n   ? (float) (x) : (x))\n #endif\n \n-/* Determine whether a floating-point value X is infinite. */\n+/* Determine whether a floating-point value X is infinite.  */\n #ifndef REAL_VALUE_ISINF\n #define REAL_VALUE_ISINF(x) (target_isinf (x))\n #endif\n \n-/* Determine whether a floating-point value X is a NaN. */\n+/* Determine whether a floating-point value X is a NaN.  */\n #ifndef REAL_VALUE_ISNAN\n #define REAL_VALUE_ISNAN(x) (target_isnan (x))\n #endif\n \n-/* Determine whether a floating-point value X is negative. */\n+/* Determine whether a floating-point value X is negative.  */\n #ifndef REAL_VALUE_NEGATIVE\n #define REAL_VALUE_NEGATIVE(x) (target_negative (x))\n #endif\n \n-/* Determine whether a floating-point value X is minus 0. */\n+/* Determine whether a floating-point value X is minus 0.  */\n #ifndef REAL_VALUE_MINUS_ZERO\n #define REAL_VALUE_MINUS_ZERO(x) ((x) == 0 && REAL_VALUE_NEGATIVE (x))\n #endif"}, {"sha": "e832ed98ea4db503e6fc9e0170773a6f4e21fddb", "filename": "gcc/reload.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -183,7 +183,7 @@ extern int reload_first_uid;\n \n /* Nonzero if indirect addressing is supported when the innermost MEM is\n    of the form (MEM (SYMBOL_REF sym)).  It is assumed that the level to\n-   which these are valid is the same as spill_indirect_levels, above.   */\n+   which these are valid is the same as spill_indirect_levels, above.  */\n \n extern char indirect_symref_ok;\n "}, {"sha": "37a204c95d695a6bb50ea8c1834bd31cc145acd6", "filename": "gcc/rtl.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -32,7 +32,7 @@ struct function;\n #undef PC /* Likewise.  */\n \n /* Value used by some passes to \"recognize\" noop moves as valid\n- instructions. */\n+ instructions.  */\n #define NOOP_MOVE_INSN_CODE\tINT_MAX\n \n /* Register Transfer Language EXPRESSIONS CODES */\n@@ -91,9 +91,9 @@ typedef struct\n    the value of the corresponding attribute is unknown.  */\n typedef struct\n {\n-  HOST_WIDE_INT alias;\t\t/* Memory alias set. */\n-  tree decl;\t\t\t/* decl corresponding to MEM. */\n-  rtx offset;\t\t\t/* Offset from start of DECL, as CONST_INT. */\n+  HOST_WIDE_INT alias;\t\t/* Memory alias set.  */\n+  tree decl;\t\t\t/* decl corresponding to MEM.  */\n+  rtx offset;\t\t\t/* Offset from start of DECL, as CONST_INT.  */\n   rtx size;\t\t\t/* Size in bytes, as a CONST_INT.  */\n   unsigned int align;\t\t/* Alignment of MEM in bytes.  */\n } mem_attrs;\n@@ -169,7 +169,7 @@ struct rtx_def\n      from the target of a branch.  Valid from reorg until end of compilation;\n      cleared before used.\n      1 in an INSN if this insn is dead code.  Valid only during\n-     dead-code elimination phase; cleared before use. */\n+     dead-code elimination phase; cleared before use.  */\n   unsigned int in_struct : 1;\n   /* 1 if this rtx is used.  This is used for copying shared structure.\n      See `unshare_all_rtl'.\n@@ -415,10 +415,10 @@ extern void rtvec_check_failed_bounds PARAMS ((rtvec, int,\n #define SIBLING_CALL_P(INSN) ((INSN)->jump)\n \n /* 1 if insn is a branch that should not unconditionally execute its\n-   delay slots, i.e., it is an annulled branch.   */\n+   delay slots, i.e., it is an annulled branch.  */\n #define INSN_ANNULLED_BRANCH_P(INSN) ((INSN)->unchanging)\n \n-/* 1 if insn is a dead code.  Valid only for dead-code elimination phase. */\n+/* 1 if insn is a dead code.  Valid only for dead-code elimination phase.  */\n #define INSN_DEAD_CODE_P(INSN) ((INSN)->in_struct)\n \n /* 1 if insn is in a delay slot and is from the target of the branch.  If\n@@ -698,7 +698,7 @@ enum insn_note\n \n   /* Generated whenever a duplicate line number note is output.  For example,\n      one is output after the end of an inline function, in order to prevent\n-     the line containing the inline call from being counted twice in gcov. */\n+     the line containing the inline call from being counted twice in gcov.  */\n   NOTE_INSN_REPEATED_LINE_NUMBER,\n \n   /* Start/end of a live range region, where pseudos allocated on the stack\n@@ -709,7 +709,7 @@ enum insn_note\n   /* Record which registers are currently live.  Uses NOTE_LIVE_INFO.  */\n   NOTE_INSN_LIVE,\n \n-  /* Record the struct for the following basic block.  Uses NOTE_BASIC_BLOCK. */\n+  /* Record the struct for the following basic block.  Uses NOTE_BASIC_BLOCK.  */\n   NOTE_INSN_BASIC_BLOCK,\n \n   /* Record the expected value of a register at a location.  Uses\n@@ -1090,10 +1090,10 @@ extern unsigned int subreg_regno \tPARAMS ((rtx));\n /* For RANGE_{START,END} notes, a unique # to identify this range.  */\n #define RANGE_INFO_UNIQUE(INSN) XCINT (INSN, 5, RANGE_INFO)\n \n-/* For RANGE_{START,END} notes, the basic block # the range starts with. */\n+/* For RANGE_{START,END} notes, the basic block # the range starts with.  */\n #define RANGE_INFO_BB_START(INSN) XCINT (INSN, 6, RANGE_INFO)\n \n-/* For RANGE_{START,END} notes, the basic block # the range ends with. */\n+/* For RANGE_{START,END} notes, the basic block # the range ends with.  */\n #define RANGE_INFO_BB_END(INSN) XCINT (INSN, 7, RANGE_INFO)\n \n /* For RANGE_{START,END} notes, the loop depth the range is in.  */\n@@ -1129,7 +1129,7 @@ extern unsigned int subreg_regno \tPARAMS ((rtx));\n #define RANGE_REG_DEATHS(INSN,N) XINT (XCVECEXP (INSN, 2, N, RANGE_INFO), 4)\n \n /* Whether the original value is needed to be copied into the range register at\n-   the start of the range. */\n+   the start of the range.  */\n #define RANGE_REG_COPY_FLAGS(INSN,N) XINT (XCVECEXP (INSN, 2, N, RANGE_INFO), 5)\n \n /* # of insns the register copy is live over.  */\n@@ -1530,7 +1530,7 @@ extern rtx const_tiny_rtx[3][(int) MAX_MACHINE_MODE];\n    hard frame pointer and the automatic variables are separated by an amount\n    that cannot be determined until after register allocation.  We can assume\n    that in this case ELIMINABLE_REGS will be defined, one action of which\n-   will be to eliminate FRAME_POINTER_REGNUM into HARD_FRAME_POINTER_REGNUM. */\n+   will be to eliminate FRAME_POINTER_REGNUM into HARD_FRAME_POINTER_REGNUM.  */\n #ifndef HARD_FRAME_POINTER_REGNUM\n #define HARD_FRAME_POINTER_REGNUM FRAME_POINTER_REGNUM\n #endif\n@@ -1771,7 +1771,7 @@ extern void never_reached_warning\tPARAMS ((rtx));\n extern void purge_line_number_notes\tPARAMS ((rtx));\n extern void copy_loop_headers\t\tPARAMS ((rtx));\n \n-/* In emit-rtl.c. */\n+/* In emit-rtl.c.  */\n extern int max_reg_num\t\t\t\tPARAMS ((void));\n extern int max_label_num\t\t\tPARAMS ((void));\n extern int get_first_label_num\t\t\tPARAMS ((void));\n@@ -1824,7 +1824,7 @@ extern void dump_combine_stats\t\tPARAMS ((FILE *));\n extern void dump_combine_total_stats\tPARAMS ((FILE *));\n #endif\n \n-/* In sched.c. */\n+/* In sched.c.  */\n #ifdef BUFSIZ\n extern void schedule_insns\t\tPARAMS ((FILE *));\n extern void schedule_ebbs\t\tPARAMS ((FILE *));"}, {"sha": "5c35fd730c231022a4809bea6cea30cb7c2e5aa8", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebedaa523a43bb45a54000c179e862fe9f32a13/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=eebedaa523a43bb45a54000c179e862fe9f32a13", "patch": "@@ -116,7 +116,7 @@ extern tree built_in_decls[(int) END_BUILTINS];\n    so all nodes have these fields.\n \n    See the accessor macros, defined below, for documentation of the\n-   fields.   */\n+   fields.  */\n \n struct tree_common\n {"}]}