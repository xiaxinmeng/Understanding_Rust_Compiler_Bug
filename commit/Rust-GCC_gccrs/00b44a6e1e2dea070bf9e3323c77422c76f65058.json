{"sha": "00b44a6e1e2dea070bf9e3323c77422c76f65058", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBiNDRhNmUxZTJkZWEwNzBiZjllMzMyM2M3NzQyMmM3NmY2NTA1OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-04-15T21:18:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-15T21:18:58Z"}, "message": "Add compound_list to backend interface.\n\n\t* go-gcc.cc (Gcc_backend::compound_statement): New function.\n\t(Gcc_backend::assignment_statement): Use error_statement.\n\t(Gcc_backend::return_statement): Likewise.\n\t(Gcc_backend::if_statement): Likewise.\n\t(Gcc_backend::switch_statement): Likewise.\n\t(Gcc_backend::statement_list): Likewise.\n\nFrom-SVN: r172521", "tree": {"sha": "3e1ab62aa60980f2a3e9ed7cc27f39ca7964b8ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e1ab62aa60980f2a3e9ed7cc27f39ca7964b8ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00b44a6e1e2dea070bf9e3323c77422c76f65058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b44a6e1e2dea070bf9e3323c77422c76f65058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b44a6e1e2dea070bf9e3323c77422c76f65058", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b44a6e1e2dea070bf9e3323c77422c76f65058/comments", "author": null, "committer": null, "parents": [{"sha": "eb229cf45a207f2c75bbab37ecbe7caa4f23b853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb229cf45a207f2c75bbab37ecbe7caa4f23b853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb229cf45a207f2c75bbab37ecbe7caa4f23b853"}], "stats": {"total": 87, "additions": 50, "deletions": 37}, "files": [{"sha": "b6f91c45edc7344ed41cd03c6959351daf544c1e", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b44a6e1e2dea070bf9e3323c77422c76f65058/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b44a6e1e2dea070bf9e3323c77422c76f65058/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=00b44a6e1e2dea070bf9e3323c77422c76f65058", "patch": "@@ -1,3 +1,12 @@\n+2011-04-15  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::compound_statement): New function.\n+\t(Gcc_backend::assignment_statement): Use error_statement.\n+\t(Gcc_backend::return_statement): Likewise.\n+\t(Gcc_backend::if_statement): Likewise.\n+\t(Gcc_backend::switch_statement): Likewise.\n+\t(Gcc_backend::statement_list): Likewise.\n+\n 2011-04-14  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (Backend::error_statement): New function."}, {"sha": "6cd402ec854c352240b45e23b8f82f1193c2e4b0", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b44a6e1e2dea070bf9e3323c77422c76f65058/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b44a6e1e2dea070bf9e3323c77422c76f65058/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=00b44a6e1e2dea070bf9e3323c77422c76f65058", "patch": "@@ -190,6 +190,9 @@ class Gcc_backend : public Backend\n \t\t   const std::vector<Bstatement*>& statements,\n \t\t   source_location);\n \n+  Bstatement*\n+  compound_statement(Bstatement*, Bstatement*);\n+\n   Bstatement*\n   statement_list(const std::vector<Bstatement*>&);\n \n@@ -244,7 +247,7 @@ Gcc_backend::assignment_statement(Bexpression* lhs, Bexpression* rhs,\n   tree lhs_tree = lhs->get_tree();\n   tree rhs_tree = rhs->get_tree();\n   if (lhs_tree == error_mark_node || rhs_tree == error_mark_node)\n-    return this->make_statement(error_mark_node);\n+    return this->error_statement();\n   return this->make_statement(fold_build2_loc(location, MODIFY_EXPR,\n \t\t\t\t\t      void_type_node,\n \t\t\t\t\t      lhs_tree, rhs_tree));\n@@ -259,18 +262,18 @@ Gcc_backend::return_statement(Bfunction* bfunction,\n {\n   tree fntree = bfunction->get_tree();\n   if (fntree == error_mark_node)\n-    return this->make_statement(error_mark_node);\n+    return this->error_statement();\n   tree result = DECL_RESULT(fntree);\n   if (result == error_mark_node)\n-    return this->make_statement(error_mark_node);\n+    return this->error_statement();\n   tree ret;\n   if (vals.empty())\n     ret = fold_build1_loc(location, RETURN_EXPR, void_type_node, NULL_TREE);\n   else if (vals.size() == 1)\n     {\n       tree val = vals.front()->get_tree();\n       if (val == error_mark_node)\n-\treturn this->make_statement(error_mark_node);\n+\treturn this->error_statement();\n       tree set = fold_build2_loc(location, MODIFY_EXPR, void_type_node,\n \t\t\t\t result, vals.front()->get_tree());\n       ret = fold_build1_loc(location, RETURN_EXPR, void_type_node, set);\n@@ -294,7 +297,7 @@ Gcc_backend::return_statement(Bfunction* bfunction,\n \t\t\t\t     rettmp, field, NULL_TREE);\n \t  tree val = (*p)->get_tree();\n \t  if (val == error_mark_node)\n-\t    return this->make_statement(error_mark_node);\n+\t    return this->error_statement();\n \t  tree set = fold_build2_loc(location, MODIFY_EXPR, void_type_node,\n \t\t\t\t     ref, (*p)->get_tree());\n \t  append_to_statement_list(set, &stmt_list);\n@@ -322,7 +325,7 @@ Gcc_backend::if_statement(Bexpression* condition, Bstatement* then_block,\n   if (cond_tree == error_mark_node\n       || then_tree == error_mark_node\n       || else_tree == error_mark_node)\n-    return this->make_statement(error_mark_node);\n+    return this->error_statement();\n   tree ret = build3_loc(location, COND_EXPR, void_type_node, cond_tree,\n \t\t\tthen_tree, else_tree);\n   return this->make_statement(ret);\n@@ -363,7 +366,7 @@ Gcc_backend::switch_statement(\n \t    {\n \t      tree t = (*pcv)->get_tree();\n \t      if (t == error_mark_node)\n-\t\treturn this->make_statement(error_mark_node);\n+\t\treturn this->error_statement();\n \t      source_location loc = EXPR_LOCATION(t);\n \t      tree label = create_artificial_label(loc);\n \t      tree c = build3_loc(loc, CASE_LABEL_EXPR, void_type_node,\n@@ -376,19 +379,36 @@ Gcc_backend::switch_statement(\n \t{\n \t  tree t = (*ps)->get_tree();\n \t  if (t == error_mark_node)\n-\t    return this->make_statement(error_mark_node);\n+\t    return this->error_statement();\n \t  append_to_statement_list(t, &stmt_list);\n \t}\n     }\n \n   tree tv = value->get_tree();\n   if (tv == error_mark_node)\n-    return this->make_statement(error_mark_node);\n+    return this->error_statement();\n   tree t = build3_loc(switch_location, SWITCH_EXPR, void_type_node,\n \t\t      tv, stmt_list, NULL_TREE);\n   return this->make_statement(t);\n }\n \n+// Pair of statements.\n+\n+Bstatement*\n+Gcc_backend::compound_statement(Bstatement* s1, Bstatement* s2)\n+{\n+  tree stmt_list = NULL_TREE;\n+  tree t = s1->get_tree();\n+  if (t == error_mark_node)\n+    return this->error_statement();\n+  append_to_statement_list(t, &stmt_list);\n+  t = s2->get_tree();\n+  if (t == error_mark_node)\n+    return this->error_statement();\n+  append_to_statement_list(t, &stmt_list);\n+  return this->make_statement(stmt_list);\n+}\n+\n // List of statements.\n \n Bstatement*\n@@ -401,7 +421,7 @@ Gcc_backend::statement_list(const std::vector<Bstatement*>& statements)\n     {\n       tree t = (*p)->get_tree();\n       if (t == error_mark_node)\n-\treturn this->make_statement(error_mark_node);\n+\treturn this->error_statement();\n       append_to_statement_list(t, &stmt_list);\n     }\n   return this->make_statement(stmt_list);"}, {"sha": "bd761bda2bed8b164a5550a452aa847299c9bda2", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b44a6e1e2dea070bf9e3323c77422c76f65058/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b44a6e1e2dea070bf9e3323c77422c76f65058/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=00b44a6e1e2dea070bf9e3323c77422c76f65058", "patch": "@@ -146,6 +146,10 @@ class Backend\n \t\t   const std::vector<Bstatement*>& statements,\n \t\t   source_location) = 0;\n \n+  // Create a single statement from two statements.\n+  virtual Bstatement*\n+  compound_statement(Bstatement*, Bstatement*) = 0;\n+\n   // Create a single statement from a list of statements.\n   virtual Bstatement*\n   statement_list(const std::vector<Bstatement*>&) = 0;"}, {"sha": "8e00d37b2911ae8bb357fb7d40f84db5ff745191", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b44a6e1e2dea070bf9e3323c77422c76f65058/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b44a6e1e2dea070bf9e3323c77422c76f65058/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=00b44a6e1e2dea070bf9e3323c77422c76f65058", "patch": "@@ -3058,12 +3058,7 @@ Case_clauses::Case_clause::get_backend(Translate_context* context,\n   else if (break_stat == NULL)\n     return statements;\n   else\n-    {\n-      std::vector<Bstatement*> list(2);\n-      list[0] = statements;\n-      list[1] = break_stat;\n-      return context->backend()->statement_list(list);\n-    }\n+    return context->backend()->compound_statement(statements, break_stat);\n }\n \n // Class Case_clauses.\n@@ -3332,11 +3327,9 @@ Constant_switch_statement::do_get_tree(Translate_context* context)\n \t\t\t\t\t\t\t  all_cases,\n \t\t\t\t\t\t\t  all_statements,\n \t\t\t\t\t\t\t  this->location());\n-\n-  std::vector<Bstatement*> stats(2);\n-  stats[0] = switch_statement;\n-  stats[1] = break_label->get_definition(context);\n-  Bstatement* ret = context->backend()->statement_list(stats);\n+  Bstatement* ldef = break_label->get_definition(context);\n+  Bstatement* ret = context->backend()->compound_statement(switch_statement,\n+\t\t\t\t\t\t\t   ldef);\n   return stat_to_tree(ret);\n }\n \n@@ -3876,12 +3869,7 @@ Send_statement::do_get_tree(Translate_context* context)\n   if (btemp == NULL)\n     return stat_to_tree(s);\n   else\n-    {\n-      std::vector<Bstatement*> stats(2);\n-      stats[0] = btemp;\n-      stats[1] = s;\n-      return stat_to_tree(context->backend()->statement_list(stats));\n-    }\n+    return stat_to_tree(context->backend()->compound_statement(btemp, s));\n }\n \n // Make a send statement.\n@@ -4218,10 +4206,7 @@ Select_clauses::get_backend(Translate_context* context,\n \t}\n       if (s == NULL)\n \treturn ldef;\n-      std::vector<Bstatement*> stats(2);\n-      stats[0] = s;\n-      stats[1] = ldef;\n-      return context->backend()->statement_list(stats);\n+      return context->backend()->compound_statement(s, ldef);\n     }\n   gcc_assert(count > 0);\n \n@@ -4347,12 +4332,7 @@ Select_clauses::add_clause_backend(\n   if (s == NULL)\n     (*clauses)[index] = g;\n   else\n-    {\n-      std::vector<Bstatement*> stats(2);\n-      stats[0] = s;\n-      stats[1] = g;\n-      (*clauses)[index] = context->backend()->statement_list(stats);\n-    }\n+    (*clauses)[index] = context->backend()->compound_statement(s, g);\n }\n \n // Class Select_statement."}]}