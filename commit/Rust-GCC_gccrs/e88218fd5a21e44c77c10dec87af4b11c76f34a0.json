{"sha": "e88218fd5a21e44c77c10dec87af4b11c76f34a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg4MjE4ZmQ1YTIxZTQ0Yzc3YzEwZGVjODdhZjRiMTFjNzZmMzRhMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-06T16:54:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-06T17:02:46Z"}, "message": "c++: Always use pushdecl for exception library helpers\n\nThe ABI exception helpers like __throw were being created by first\nlooking for them, and then adding if not found.  Primarily because\nlibitm wasn't declaring them with the correct exception specifiers.  I\nfixed libitm a while back, so let's just use push_library_fn and let\nthe symbol table machinery deal with duplicates.  push_library_fn was\nmaking the assumtion there wasn't already a decl available, by always\nreturning the new decl.  Bad things would happen if there was a\nduplicate, because duplicate_decls explicitly gcc_frees the new decl.\nFixed by having it return whatever pushdecl returns.\n\n\tgcc/cp/\n\t* decl.c (push_library_fn): Return the decl pushdecl_toplevel returns.\n\t* except.c (verify_library_fn): Replace with ...\n\t(declare_library_fn_1): ... this fn.  Always push the fn.\n\t(declare_library_fn): Call it.\n\t(build_throw): Call declare_library_fn_1.\n\tgcc/testsuite/\n\t* g++.dg/eh/builtin10.C: Adjust expected errors.\n\t* g++.dg/eh/builtin11.C: Likewise.\n\t* g++.dg/eh/builtin5.C: Likewise.\n\t* g++.dg/eh/builtin6.C: Likewise.\n\t* g++.dg/eh/builtin7.C: Likewise.\n\t* g++.dg/eh/builtin9.C: Likewise.\n\t* g++.dg/parse/crash55.C: Likewise.", "tree": {"sha": "ee1cbca72c47e5a0af0ae3e8193b043751aea610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee1cbca72c47e5a0af0ae3e8193b043751aea610"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e88218fd5a21e44c77c10dec87af4b11c76f34a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88218fd5a21e44c77c10dec87af4b11c76f34a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88218fd5a21e44c77c10dec87af4b11c76f34a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88218fd5a21e44c77c10dec87af4b11c76f34a0/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2151227dfe90a5fe73297c370786be98b0b090f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2151227dfe90a5fe73297c370786be98b0b090f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2151227dfe90a5fe73297c370786be98b0b090f"}], "stats": {"total": 261, "additions": 90, "deletions": 171}, "files": [{"sha": "60a09e9497a6f4741992d0fa0c47a7d0e62620ae", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e88218fd5a21e44c77c10dec87af4b11c76f34a0", "patch": "@@ -4819,14 +4819,11 @@ build_cp_library_fn_ptr (const char* name, tree type, int ecf_flags)\n tree\n push_library_fn (tree name, tree type, tree raises, int ecf_flags)\n {\n-  tree fn;\n-\n   if (raises)\n     type = build_exception_variant (type, raises);\n \n-  fn = build_library_fn (name, ERROR_MARK, type, ecf_flags);\n-  pushdecl_top_level (fn);\n-  return fn;\n+  tree fn = build_library_fn (name, ERROR_MARK, type, ecf_flags);\n+  return pushdecl_top_level (fn);\n }\n \n /* Like build_cp_library_fn, but also pushes the function so that it"}, {"sha": "aca54f136ba1e5095b6cbd1f5d3fec83f5846615", "filename": "gcc/cp/except.c", "status": "modified", "additions": 42, "deletions": 120, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=e88218fd5a21e44c77c10dec87af4b11c76f34a0", "patch": "@@ -133,47 +133,27 @@ build_exc_ptr (void)\n \t\t       1, integer_zero_node);\n }\n \n-/* Check that user declared function FN is a function and has return\n-   type RTYPE and argument types ARG{1,2,3}TYPE.  */\n+/* Declare an exception ABI entry point called NAME.\n+   ECF are the library flags, RTYPE the return type and ARGS[NARGS]\n+   the parameter types.  We return the DECL -- which might be one\n+   found via the symbol table pushing, if the user already declared\n+   it.  If we pushed a new decl, the user will see it.  */\n \n-static bool\n-verify_library_fn (tree fn, const char *name, tree rtype,\n-\t\t   tree arg1type, tree arg2type, tree arg3type)\n+static tree\n+declare_library_fn_1 (const char *name, int ecf,\n+\t\t      tree rtype, int nargs, tree args[])\n {\n-  if (TREE_CODE (fn) != FUNCTION_DECL\n-      || TREE_CODE (TREE_TYPE (fn)) != FUNCTION_TYPE)\n-    {\n-  bad:\n-      error_at (DECL_SOURCE_LOCATION (fn), \"%qs declared incorrectly\", name);\n-      return false;\n-    }\n-  tree fntype = TREE_TYPE (fn);\n-  if (!same_type_p (TREE_TYPE (fntype), rtype))\n-    goto bad;\n-  tree targs = TYPE_ARG_TYPES (fntype);\n-  tree args[3] = { arg1type, arg2type, arg3type };\n-  for (int i = 0; i < 3 && args[i]; i++)\n-    {\n-      if (targs == NULL_TREE)\n-\tgoto bad;\n-      if (!same_type_p (TREE_VALUE (targs), args[i]))\n-\t{\n-\t  if (i == 0)\n-\t    goto bad;\n-\t  /* Be less strict for second and following arguments, __cxa_throw\n-\t     needs to be more permissive.  */\n-\t  if (TYPE_PTROBV_P (TREE_VALUE (targs)) && TYPE_PTROBV_P (args[i]))\n-\t    /* Both object pointers.  */;\n-\t  else if (TYPE_PTRFN_P (TREE_VALUE (targs)) && TYPE_PTRFN_P (args[i]))\n-\t    /* Both function pointers.  */;\n-\t  else\n-\t    goto bad;\n-\t}\n-      targs = TREE_CHAIN (targs);\n-    }\n-  if (targs != void_list_node)\n-    goto bad;\n-  return true;\n+  tree ident = get_identifier (name);\n+  tree except = ecf & ECF_NOTHROW ? empty_except_spec : NULL_TREE;\n+\n+  /* Make a new decl.  */\n+  tree arg_list = void_list_node;\n+  for (unsigned ix = nargs; ix--;)\n+    arg_list = tree_cons (NULL_TREE, args[ix], arg_list);\n+  tree fntype = build_function_type (rtype, arg_list);\n+  tree res = push_library_fn (ident, fntype, except, ecf);\n+\n+  return res;\n }\n \n /* Find or declare a function NAME, returning RTYPE, taking a single\n@@ -190,42 +170,21 @@ static tree\n declare_library_fn (const char *name, tree rtype, tree ptype,\n \t\t    int ecf, int tm_ecf)\n {\n-  tree ident = get_identifier (name);\n-  tree res = get_global_binding (ident);\n-  tree fntype = NULL_TREE;\n-  tree except = NULL_TREE;\n-  if (!res)\n-    {\n-      fntype = build_function_type_list (rtype, ptype, NULL_TREE);\n-      if (ecf & ECF_NOTHROW)\n-\texcept = empty_except_spec;\n-      res = push_library_fn (ident, fntype, except, ecf);\n-    }\n-  else if (!verify_library_fn (res, name, rtype, ptype, NULL_TREE, NULL_TREE))\n-    return error_mark_node;\n+  tree res = declare_library_fn_1 (name, ecf, rtype, ptype ? 1 : 0, &ptype);\n+  if (res == error_mark_node)\n+    return res;\n \n   if (tm_ecf && flag_tm)\n     {\n       char *tm_name = concat (\"_ITM_\", name + 2, NULL_TREE);\n-      tree tm_ident = get_identifier (tm_name);\n-      tree tm_fn = get_global_binding (tm_ident);\n-      if (!tm_fn)\n-\t{\n-\t  if (!fntype)\n-\t    {\n-\t      fntype = build_function_type_list (rtype, ptype, NULL_TREE);\n-\t      if (ecf & ECF_NOTHROW)\n-\t\texcept = empty_except_spec;\n-\t    }\n-\t  tm_fn = push_library_fn (tm_ident, fntype, except, ecf | tm_ecf);\n-\t}\n-      else if (!verify_library_fn (tm_fn, tm_name, rtype, ptype,\n-\t\t\t\t   NULL_TREE, NULL_TREE))\n-\ttm_fn = error_mark_node;\n+\n+      tree tm_fn = declare_library_fn_1 (tm_name, ecf | tm_ecf, rtype,\n+\t\t\t\t\t ptype ? 1 : 0, &ptype);\n       free (tm_name);\n       if (tm_fn != error_mark_node)\n \trecord_tm_replacement (res, tm_fn);\n     }\n+\n   return res;\n }\n \n@@ -660,55 +619,28 @@ build_throw (location_t loc, tree exp)\n       tree temp_type;\n       tree cleanup;\n       tree object, ptr;\n-      tree tmp;\n       tree allocate_expr;\n \n       /* The CLEANUP_TYPE is the internal type of a destructor.  */\n       if (!cleanup_type)\n \t{\n-\t  tmp = build_function_type_list (void_type_node,\n-\t\t\t\t\t  ptr_type_node, NULL_TREE);\n+\t  tree tmp = build_function_type_list (void_type_node,\n+\t\t\t\t\t       ptr_type_node, NULL_TREE);\n \t  cleanup_type = build_pointer_type (tmp);\n \t}\n \n       if (!throw_fn)\n \t{\n-\t  const char *name = \"__cxa_throw\";\n-\t  tree ident = get_identifier (name);\n-\t  tree fntype = NULL_TREE;\n-\t  throw_fn = get_global_binding (ident);\n-\t  if (!throw_fn)\n-\t    {\n-\t      /* Declare void __cxa_throw (void*, void*, void (*)(void*)).  */\n-\t      /* ??? Second argument is supposed to be \"std::type_info*\".  */\n-\t      fntype = build_function_type_list (void_type_node,\n-\t\t\t\t\t\t ptr_type_node, ptr_type_node,\n-\t\t\t\t\t\t cleanup_type, NULL_TREE);\n-\t      throw_fn = push_throw_library_fn (ident, fntype);\n-\t    }\n-\t  else if (!verify_library_fn (throw_fn, name, void_type_node,\n-\t\t\t\t       ptr_type_node, ptr_type_node,\n-\t\t\t\t       cleanup_type))\n-\t    throw_fn = error_mark_node;\n+\t  tree args[3] = {ptr_type_node, ptr_type_node, cleanup_type};\n \n+\t  throw_fn = declare_library_fn_1 (\"__cxa_throw\",\n+\t\t\t\t\t   ECF_NORETURN | ECF_COLD,\n+\t\t\t\t\t   void_type_node, 3, args);\n \t  if (flag_tm && throw_fn != error_mark_node)\n \t    {\n-\t      const char *itm_name = \"_ITM_cxa_throw\";\n-\t      tree itm_ident = get_identifier (itm_name);\n-\t      tree itm_fn = get_global_binding (itm_ident);\n-\t      if (!itm_fn)\n-\t\t{\n-\t\t  if (!fntype)\n-\t\t    fntype\n-\t\t      = build_function_type_list (void_type_node,\n-\t\t\t\t\t\t  ptr_type_node, ptr_type_node,\n-\t\t\t\t\t\t  cleanup_type, NULL_TREE);\n-\t\t  itm_fn = push_throw_library_fn (itm_ident, fntype);\n-\t\t}\n-\t      else if (!verify_library_fn (itm_fn, itm_name, void_type_node,\n-\t\t\t\t\t   ptr_type_node, ptr_type_node,\n-\t\t\t\t\t   cleanup_type))\n-\t\titm_fn = error_mark_node;\n+\t      tree itm_fn = declare_library_fn_1 (\"_ITM_cxa_throw\",\n+\t\t\t\t\t\t  ECF_NORETURN | ECF_COLD,\n+\t\t\t\t\t\t  void_type_node, 3, args);\n \t      if (itm_fn != error_mark_node)\n \t\t{\n \t\t  apply_tm_attr (itm_fn, get_identifier (\"transaction_pure\"));\n@@ -798,7 +730,7 @@ build_throw (location_t loc, tree exp)\n \t}\n       else\n \t{\n-\t  tmp = decay_conversion (exp, tf_warning_or_error);\n+\t  tree tmp = decay_conversion (exp, tf_warning_or_error);\n \t  if (tmp == error_mark_node)\n \t    return error_mark_node;\n \t  exp = build2 (INIT_EXPR, temp_type, object, tmp);\n@@ -836,8 +768,9 @@ build_throw (location_t loc, tree exp)\n \tcleanup = build_int_cst (cleanup_type, 0);\n \n       /* ??? Indicate that this function call throws throw_type.  */\n-      tmp = cp_build_function_call_nary (throw_fn, tf_warning_or_error,\n-\t\t\t\t\t ptr, throw_type, cleanup, NULL_TREE);\n+      tree tmp = cp_build_function_call_nary (throw_fn, tf_warning_or_error,\n+\t\t\t\t\t      ptr, throw_type, cleanup,\n+\t\t\t\t\t      NULL_TREE);\n \n       /* Tack on the initialization stuff.  */\n       exp = build2 (COMPOUND_EXPR, TREE_TYPE (tmp), exp, tmp);\n@@ -847,20 +780,9 @@ build_throw (location_t loc, tree exp)\n       /* Rethrow current exception.  */\n       if (!rethrow_fn)\n \t{\n-\t  const char *name = \"__cxa_rethrow\";\n-\t  tree ident = get_identifier (name);\n-\t  rethrow_fn = get_global_binding (ident);\n-\t  if (!rethrow_fn)\n-\t    {\n-\t      /* Declare void __cxa_rethrow (void).  */\n-\t      tree fntype\n-\t\t= build_function_type_list (void_type_node, NULL_TREE);\n-\t      rethrow_fn = push_throw_library_fn (ident, fntype);\n-\t    }\n-\t  else if (!verify_library_fn (rethrow_fn, name, void_type_node,\n-\t\t\t\t       NULL_TREE, NULL_TREE, NULL_TREE))\n-\t    rethrow_fn = error_mark_node;\n-\n+\t  rethrow_fn = declare_library_fn_1 (\"__cxa_rethrow\",\n+\t\t\t\t\t     ECF_NORETURN | ECF_COLD,\n+\t\t\t\t\t     void_type_node, 0, NULL);\n \t  if (flag_tm && rethrow_fn != error_mark_node)\n \t    apply_tm_attr (rethrow_fn, get_identifier (\"transaction_pure\"));\n \t}"}, {"sha": "6c34f1f6d5cd5bddcbf687a2fd56137ea533c31b", "filename": "gcc/testsuite/g++.dg/eh/builtin10.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin10.C?ref=e88218fd5a21e44c77c10dec87af4b11c76f34a0", "patch": "@@ -2,26 +2,26 @@\n // { dg-do compile }\n \n extern \"C\" void __cxa_throw (void *, void *, void (*) (void *));\n-extern \"C\" float __cxa_get_exception_ptr (void *);\t\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" void *__cxa_begin_catch (void *);\n+extern \"C\" float __cxa_get_exception_ptr (void *) throw ();\t// { dg-message \"previous declaration\" }\n+extern \"C\" void *__cxa_begin_catch (void *) throw ();\n extern \"C\" void __cxa_end_catch ();\n extern \"C\" void __cxa_rethrow ();\n-extern \"C\" void *__cxa_allocate_exception (__SIZE_TYPE__);\n-extern \"C\" int __cxa_free_exception (void *);\t\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void *__cxa_allocate_exception (__SIZE_TYPE__) throw ();\n+extern \"C\" int __cxa_free_exception (void *) throw ();\t\t// { dg-message \"previous declaration\" }\n \n struct S { S (); S (const S &); ~S (); };\n \n int\n foo (int x)\n {\n   if (x > 27)\n-    throw 19;\n+    throw 19; // { dg-error \"conflicting\"  }\n   try\n     {\n       if (x > 15)\n \tthrow S ();\n     }\n-  catch (S s)\n+  catch (S s) // { dg-error \"conflicting\"  }\n     {\n       throw;\n     }"}, {"sha": "abc8c1af535aa4ea4c05b3411b21e10fe8d94fec", "filename": "gcc/testsuite/g++.dg/eh/builtin11.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin11.C?ref=e88218fd5a21e44c77c10dec87af4b11c76f34a0", "patch": "@@ -1,29 +1,29 @@\n // PR c++/88482\n // { dg-do compile }\n \n-extern \"C\" void __cxa_throw (float, void *, void (*) (void *));\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" void *__cxa_get_exception_ptr (void *);\n-extern \"C\" void *__cxa_begin_catch (int);\t\t\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" void __cxa_end_catch (long long);\t\t\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" void __cxa_rethrow (int);\t\t\t\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" void *__cxa_allocate_exception (void *);\t\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" void __cxa_free_exception (void *);\n+extern \"C\" void __cxa_throw (float, void *, void (*) (void *));\t// { dg-message \"previous declaration\" }\n+extern \"C\" void *__cxa_get_exception_ptr (void *) throw ();\n+extern \"C\" void *__cxa_begin_catch (int) throw ();\t\t// { dg-message \"previous declaration\" }\n+extern \"C\" void __cxa_end_catch (long long) throw ();\t\t// { dg-message \"previous declaration\" }\n+extern \"C\" void __cxa_rethrow (int);\t\t\t\t// { dg-message \"previous declaration\" }\n+extern \"C\" void *__cxa_allocate_exception (void *) throw ();\t// { dg-message \"previous declaration\" }\n+extern \"C\" void __cxa_free_exception (void *) throw ();\n \n struct S { S (); S (const S &); ~S (); };\n \n int\n foo (int x)\n {\n   if (x > 27)\n-    throw 19;\n+    throw 19; // { dg-error \"conflicting\"  }\n   try\n     {\n       if (x > 15)\n \tthrow S ();\n     }\n-  catch (S s)\n+  catch (S s) // { dg-error \"conflicting\"  }\n     {\n-      throw;\n+      throw; // { dg-error \"conflicting\"  }\n     }\n   return x + 3;\n }"}, {"sha": "1ab9c7498671267071dbc803748d370282035326", "filename": "gcc/testsuite/g++.dg/eh/builtin5.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin5.C?ref=e88218fd5a21e44c77c10dec87af4b11c76f34a0", "patch": "@@ -2,12 +2,12 @@\n // { dg-do compile }\n \n extern \"C\" void __cxa_throw (void *, void *, void (*) (void *));\n-extern \"C\" void *__cxa_get_exception_ptr (void *);\n-extern \"C\" void *__cxa_begin_catch (void *);\n+extern \"C\" void *__cxa_get_exception_ptr (void *) throw ();\n+extern \"C\" void *__cxa_begin_catch (void *) throw ();\n extern \"C\" void __cxa_end_catch ();\n extern \"C\" void __cxa_rethrow ();\n-extern \"C\" void *__cxa_allocate_exception (__SIZE_TYPE__);\n-extern \"C\" void __cxa_free_exception (void *);\n+extern \"C\" void *__cxa_allocate_exception (__SIZE_TYPE__) throw ();\n+extern \"C\" void __cxa_free_exception (void *)  throw ();\n \n struct S { S (); S (const S &); ~S (); };\n "}, {"sha": "c05abdc8f51b6672a629405d84a944f0a96fd6ee", "filename": "gcc/testsuite/g++.dg/eh/builtin6.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin6.C?ref=e88218fd5a21e44c77c10dec87af4b11c76f34a0", "patch": "@@ -1,12 +1,12 @@\n // PR c++/88482\n // { dg-do compile }\n \n-float __cxa_throw;\t\t// { dg-error \"declared incorrectly\" }\n+float __cxa_throw;\t\t// { dg-message \"previous declaration\" }\n extern \"C\" void *__cxa_get_exception_ptr (void *);\n-float __cxa_begin_catch;\t// { dg-error \"declared incorrectly\" }\n-float __cxa_end_catch;\t\t// { dg-error \"declared incorrectly\" }\n-float __cxa_rethrow;\t\t// { dg-error \"declared incorrectly\" }\n-float __cxa_allocate_exception;\t// { dg-error \"declared incorrectly\" }\n+float __cxa_begin_catch;\t// { dg-message \"previous declaration\" }\n+float __cxa_end_catch;\t\t// { dg-message \"previous declaration\" }\n+float __cxa_rethrow;\t\t// { dg-message \"previous declaration\" }\n+float __cxa_allocate_exception;\t// { dg-message \"previous declaration\" }\n extern \"C\" void __cxa_free_exception (void *);\n \n struct S { S (); S (const S &); ~S (); };\n@@ -15,15 +15,15 @@ int\n foo (int x)\n {\n   if (x > 27)\n-    throw 19;\n+    throw 19; // { dg-error \"redeclared\"  }\n   try\n     {\n       if (x > 15)\n \tthrow S ();\n     }\n-  catch (S s)\n+  catch (S s) // { dg-error \"redeclared\"  }\n     {\n-      throw;\n+      throw;  // { dg-error \"redeclared\"  }\n     }\n   return x + 3;\n }"}, {"sha": "0ef279d09c1b39e0514dbdeab75e29a4f2da2b0c", "filename": "gcc/testsuite/g++.dg/eh/builtin7.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin7.C?ref=e88218fd5a21e44c77c10dec87af4b11c76f34a0", "patch": "@@ -2,26 +2,26 @@\n // { dg-do compile }\n \n extern \"C\" void __cxa_throw (void *, void *, void (*) (void *));\n-int __cxa_get_exception_ptr;\t\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" void *__cxa_begin_catch (void *);\n+int __cxa_get_exception_ptr;\t\t// { dg-message \"previous declaration\" }\n+extern \"C\" void *__cxa_begin_catch (void *) throw ();\n extern \"C\" void __cxa_end_catch ();\n extern \"C\" void __cxa_rethrow ();\n-extern \"C\" void *__cxa_allocate_exception (__SIZE_TYPE__);\n-int __cxa_free_exception;\t\t// { dg-error \"declared incorrectly\" }\n+extern \"C\" void *__cxa_allocate_exception (__SIZE_TYPE__) throw ();\n+int __cxa_free_exception;\t\t// { dg-message \"previous declaration\" }\n \n struct S { S (); S (const S &); ~S (); };\n \n int\n foo (int x)\n {\n   if (x > 27)\n-    throw 19;\n+    throw 19; // { dg-error \"redeclared\"  }\n   try\n     {\n       if (x > 15)\n \tthrow S ();\n     }\n-  catch (S s)\n+  catch (S s) // { dg-error \"redeclared\"  }\n     {\n       throw;\n     }"}, {"sha": "591a622630ce2dc3176eb9edcb5b0f7cf86fa95b", "filename": "gcc/testsuite/g++.dg/eh/builtin9.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin9.C?ref=e88218fd5a21e44c77c10dec87af4b11c76f34a0", "patch": "@@ -1,29 +1,29 @@\n // PR c++/88482\n // { dg-do compile }\n \n-extern \"C\" int __cxa_throw (void *, void *, void (*) (void *));\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" void *__cxa_get_exception_ptr (void *);\n-extern \"C\" double __cxa_begin_catch (void *);\t\t\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" long *__cxa_end_catch ();\t\t\t\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" char __cxa_rethrow ();\t\t\t\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" void __cxa_allocate_exception (__SIZE_TYPE__);\t// { dg-error \"declared incorrectly\" }\n-extern \"C\" void __cxa_free_exception (void *);\n+extern \"C\" int __cxa_throw (void *, void *, void (*) (void *));\t// { dg-message \"previous declaration\" }\n+extern \"C\" void *__cxa_get_exception_ptr (void *) throw ();\n+extern \"C\" double __cxa_begin_catch (void *) throw ();\t\t// { dg-message \"previous declaration\" }\n+extern \"C\" long *__cxa_end_catch () throw ();\t\t\t// { dg-message \"previous declaration\" }\n+extern \"C\" char __cxa_rethrow ();\t\t\t\t// { dg-message \"previous declaration\" }\n+extern \"C\" void __cxa_allocate_exception (__SIZE_TYPE__) throw ();// { dg-message \"previous declaration\" }\n+extern \"C\" void __cxa_free_exception (void *) throw ();\n \n struct S { S (); S (const S &); ~S (); };\n \n int\n foo (int x)\n {\n   if (x > 27)\n-    throw 19;\n+    throw 19; // { dg-error \"conflicting\"  }\n   try\n     {\n       if (x > 15)\n \tthrow S ();\n     }\n-  catch (S s)\n+  catch (S s) // { dg-error \"conflicting\"  }\n     {\n-      throw;\n+      throw; // { dg-error \"conflicting\"  }\n     }\n   return x + 3;\n }"}, {"sha": "2e88c476fc7aafd2bc00ad655c01c483d26d03db", "filename": "gcc/testsuite/g++.dg/parse/crash55.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88218fd5a21e44c77c10dec87af4b11c76f34a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash55.C?ref=e88218fd5a21e44c77c10dec87af4b11c76f34a0", "patch": "@@ -1,8 +1,8 @@\n // PR c++/42038\n \n-extern int __cxa_begin_catch;\t// { dg-error \"declared incorrectly\" }\n+extern int __cxa_begin_catch;\t// { dg-message \"previous declaration\" }\n \n void f(void)\n {\n-  try { } catch (int) { }\n+  try { } catch (int) { }  // { dg-error \"redeclared\"  }\n }"}]}