{"sha": "1bded8e1a0abebabf1f2d6323ec859b10641b45b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJkZWQ4ZTFhMGFiZWJhYmYxZjJkNjMyM2VjODU5YjEwNjQxYjQ1Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-09-20T21:09:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-09-20T21:09:42Z"}, "message": "mips.c (CODE_FOR_mips_abs_ps): Delete.\n\ngcc/\n\t* config/mips/mips.c (CODE_FOR_mips_abs_ps): Delete.\n\t* config/mips/mips.md (UNSPEC_ABS_PS): New constant.\n\t(UNSPEC_RSQRT1, UNSPEC_RSQRT2, UNSPEC_RECIP1, UNSPEC_RECIP2)\n\t(UNSPEC_SINGLE_CC, UNSPEC_SCC): Bump values by 1.\n\t(*nmadd<mode>, *nmadd<mode>_fastmath): Require !HONOR_NANS.\n\t(*nmsub<mode>, *nmsub<mode>_fastmath): Likewise.\n\t(abs<mode>2, neg<mode>2): Likewise.\n\t* config/mips/mips-ps-3d.md (mips_abs_ps): New define_expand.\n\t(*mips_abs_ps): New define_insn.\n\ngcc/testsuite/\n\t* gcc.target/mips/mips-ps-type.c: Add -ffinite-math-only.\n\t* gcc.target/mips/nmadd-2.c: Likewise.\n\t* gcc.target/mips/mips-ps-6.c: New test.\n\t* gcc.target/mips/neg-abs-1.c: Likewise.\n\t* gcc.target/mips/neg-abs-2.c: Likewise.\n\t* gcc.target/mips/nmadd-3.c: New test.\n\nFrom-SVN: r117093", "tree": {"sha": "605b63641b86dde655cfed36b185424554ce5ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/605b63641b86dde655cfed36b185424554ce5ca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bded8e1a0abebabf1f2d6323ec859b10641b45b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bded8e1a0abebabf1f2d6323ec859b10641b45b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bded8e1a0abebabf1f2d6323ec859b10641b45b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bded8e1a0abebabf1f2d6323ec859b10641b45b/comments", "author": null, "committer": null, "parents": [{"sha": "d2b40c0921356a20361e8a740d5502824065d003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b40c0921356a20361e8a740d5502824065d003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b40c0921356a20361e8a740d5502824065d003"}], "stats": {"total": 287, "additions": 269, "deletions": 18}, "files": [{"sha": "e77633305dfcbc35a6a6a41b6687bed1d28c6e99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -1,3 +1,15 @@\n+2006-09-20  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips.c (CODE_FOR_mips_abs_ps): Delete.\n+\t* config/mips/mips.md (UNSPEC_ABS_PS): New constant.\n+\t(UNSPEC_RSQRT1, UNSPEC_RSQRT2, UNSPEC_RECIP1, UNSPEC_RECIP2)\n+\t(UNSPEC_SINGLE_CC, UNSPEC_SCC): Bump values by 1.\n+\t(*nmadd<mode>, *nmadd<mode>_fastmath): Require !HONOR_NANS.\n+\t(*nmsub<mode>, *nmsub<mode>_fastmath): Likewise.\n+\t(abs<mode>2, neg<mode>2): Likewise.\n+\t* config/mips/mips-ps-3d.md (mips_abs_ps): New define_expand.\n+\t(*mips_abs_ps): New define_insn.\n+\n 2006-09-20  Josh Conner  <jconner@apple.com>\n \n \tPR middle-end/25505"}, {"sha": "c817f4df69ecdbab74e0092a9edb6acdb2f5492a", "filename": "gcc/config/mips/mips-ps-3d.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -276,6 +276,31 @@\n   [(set_attr \"type\" \"fmul\")\n    (set_attr \"mode\" \"SF\")])\n \n+; abs.ps\n+(define_expand \"mips_abs_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\")]\n+\t\t     UNSPEC_ABS_PS))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  /* If we can ignore NaNs, this operation is equivalent to the\n+     rtl ABS code.  */\n+  if (!HONOR_NANS (V2SFmode))\n+    {\n+      emit_insn (gen_absv2sf2 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*mips_abs_ps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_ABS_PS))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"abs.ps\\t%0,%1\"\n+  [(set_attr \"type\" \"fabs\")\n+   (set_attr \"mode\" \"SF\")])\n+\n ;----------------------------------------------------------------------------\n ; Floating Point Comparisons for Scalars\n ;----------------------------------------------------------------------------"}, {"sha": "7110a2d764429ee33a18d17f38601130109a7136", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -10084,9 +10084,6 @@ struct builtin_description\n   CMP_4S_BUILTINS (c, COND),\t\t\t\t\t\t\\\n   CMP_4S_BUILTINS (cabs, COND)\n \n-/* __builtin_mips_abs_ps() maps to the standard absM2 pattern.  */\n-#define CODE_FOR_mips_abs_ps CODE_FOR_absv2sf2\n-\n static const struct builtin_description mips_bdesc[] =\n {\n   DIRECT_BUILTIN (pll_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, MASK_PAIRED_SINGLE_FLOAT),"}, {"sha": "969d22fa00f55691c4c74076e2ee9c9006862cb1", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -67,13 +67,14 @@\n    (UNSPEC_CVT_PW_PS\t\t205)\n    (UNSPEC_CVT_PS_PW\t\t206)\n    (UNSPEC_MULR_PS\t\t207)\n+   (UNSPEC_ABS_PS\t\t208)\n \n-   (UNSPEC_RSQRT1\t\t208)\n-   (UNSPEC_RSQRT2\t\t209)\n-   (UNSPEC_RECIP1\t\t210)\n-   (UNSPEC_RECIP2\t\t211)\n-   (UNSPEC_SINGLE_CC\t\t212)\n-   (UNSPEC_SCC\t\t\t213)\n+   (UNSPEC_RSQRT1\t\t209)\n+   (UNSPEC_RSQRT2\t\t210)\n+   (UNSPEC_RECIP1\t\t211)\n+   (UNSPEC_RECIP2\t\t212)\n+   (UNSPEC_SINGLE_CC\t\t213)\n+   (UNSPEC_SCC\t\t\t214)\n \n    ;; MIPS DSP ASE Revision 0.98 3/24/2005\n    (UNSPEC_ADDQ\t\t\t300)\n@@ -1765,7 +1766,8 @@\n \t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n \t\t   (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n   \"ISA_HAS_NMADD_NMSUB && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+   && HONOR_SIGNED_ZEROS (<MODE>mode)\n+   && !HONOR_NANS (<MODE>mode)\"\n   \"nmadd.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1777,7 +1779,8 @@\n \t\t    (match_operand:ANYF 2 \"register_operand\" \"f\"))\n \t (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n   \"ISA_HAS_NMADD_NMSUB && TARGET_FUSED_MADD\n-   && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+   && !HONOR_SIGNED_ZEROS (<MODE>mode)\n+   && !HONOR_NANS (<MODE>mode)\"\n   \"nmadd.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1789,7 +1792,8 @@\n \t\t\t      (match_operand:ANYF 3 \"register_operand\" \"f\"))\n \t\t   (match_operand:ANYF 1 \"register_operand\" \"f\"))))]\n   \"ISA_HAS_NMADD_NMSUB && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+   && HONOR_SIGNED_ZEROS (<MODE>mode)\n+   && !HONOR_NANS (<MODE>mode)\"\n   \"nmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1801,7 +1805,8 @@\n \t (mult:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\")\n \t\t    (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n   \"ISA_HAS_NMADD_NMSUB && TARGET_FUSED_MADD\n-   && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+   && !HONOR_SIGNED_ZEROS (<MODE>mode)\n+   && !HONOR_NANS (<MODE>mode)\"\n   \"nmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1972,10 +1977,14 @@\n ;; Do not use the integer abs macro instruction, since that signals an\n ;; exception on -2147483648 (sigh).\n \n+;; abs.fmt is an arithmetic instruction and treats all NaN inputs as\n+;; invalid; it does not clear their sign bits.  We therefore can't use\n+;; abs.fmt if the signs of NaNs matter.\n+\n (define_insn \"abs<mode>2\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(abs:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"!HONOR_NANS (<MODE>mode)\"\n   \"abs.<fmt>\\t%0,%1\"\n   [(set_attr \"type\" \"fabs\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -2024,10 +2033,14 @@\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"DI\")])\n \n+;; neg.fmt is an arithmetic instruction and treats all NaN inputs as\n+;; invalid; it does not flip their sign bit.  We therefore can't use\n+;; neg.fmt if the signs of NaNs matter.\n+\n (define_insn \"neg<mode>2\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")))]\n-  \"\"\n+  \"!HONOR_NANS (<MODE>mode)\"\n   \"neg.<fmt>\\t%0,%1\"\n   [(set_attr \"type\" \"fneg\")\n    (set_attr \"mode\" \"<UNITMODE>\")])"}, {"sha": "0b539e6acb397686b62b56ea431812236bf98a67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -1,3 +1,12 @@\n+2006-09-20  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* gcc.target/mips/mips-ps-type.c: Add -ffinite-math-only.\n+\t* gcc.target/mips/nmadd-2.c: Likewise.\n+\t* gcc.target/mips/mips-ps-6.c: New test.\n+\t* gcc.target/mips/neg-abs-1.c: Likewise.\n+\t* gcc.target/mips/neg-abs-2.c: Likewise.\n+\t* gcc.target/mips/nmadd-3.c: New test.\n+\n 2006-09-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/28046"}, {"sha": "75de478dc8cf4c43b3a0dd90ad782eda6a094737", "filename": "gcc/testsuite/gcc.target/mips/mips-ps-6.c", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-6.c?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -0,0 +1,136 @@\n+/* mips-ps-2.c with an extra -ffinite-math-only option.  This option\n+   changes the way that abs.ps is handled.  */\n+/* { dg-do run { target mipsisa64*-*-* } } */\n+/* { dg-mips-options \"-mips64 -O2 -mpaired-single -mhard-float -mgp64 -ffinite-math-only\" } */\n+\n+/* Test MIPS paired-single builtin functions */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef float v2sf __attribute__ ((vector_size(8)));\n+\n+int main ()\n+{\n+  int little_endian;\n+  v2sf a, b, c, d;\n+  float e,f;\n+  int i;\n+\n+  union { long long ll; int i[2]; } endianness_test;\n+  endianness_test.ll = 1;\n+  little_endian = endianness_test.i[0];\n+\n+  /* pll.ps */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  c = __builtin_mips_pll_ps (a, b);\n+  if (little_endian) // little endian\n+    d = (v2sf) {3, 1};\n+  else // big endian\n+    d = (v2sf) {2, 4};\n+\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  /* pul.ps */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  c = __builtin_mips_pul_ps (a, b);\n+  if (little_endian) // little endian\n+    d = (v2sf) {3, 2};\n+  else // big endian\n+    d = (v2sf) {1, 4};\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  /* plu.ps */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  c = __builtin_mips_plu_ps (a, b);\n+  if (little_endian) // little endian\n+    d = (v2sf) {4, 1};\n+  else // big endian\n+    d = (v2sf) {2, 3};\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  /* puu.ps */\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  c = __builtin_mips_puu_ps (a, b);\n+  if (little_endian) // little endian\n+    d = (v2sf) {4, 2};\n+  else // big endian\n+    d = (v2sf) {1, 3};\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  /* cvt.ps.s */\n+  e = 3.4;\n+  f = 4.5; \n+  a = __builtin_mips_cvt_ps_s (e, f);\n+  if (little_endian) // little endian\n+    b = (v2sf) {4.5, 3.4};\n+  else // big endian\n+    b = (v2sf) {3.4, 4.5};\n+  if (!__builtin_mips_upper_c_eq_ps (a, b) ||\n+      !__builtin_mips_lower_c_eq_ps (a, b))\n+    abort ();\n+\n+  /* cvt.s.pl */\n+  a = (v2sf) {35.1, 120.2};\n+  e = __builtin_mips_cvt_s_pl (a);\n+  if (little_endian) // little endian\n+    f = 35.1; \n+  else // big endian\n+    f = 120.2;\n+  if (e != f)\n+    abort ();\n+\n+  /* cvt.s.pu */\n+  a = (v2sf) {30.0, 100.0};\n+  e = __builtin_mips_cvt_s_pu (a);\n+  if (little_endian) // little endian\n+    f = 100.0;\n+  else // big endian\n+    f = 30.0; \n+  if (e != f)\n+    abort ();\n+\n+  /* abs.ps */\n+  a = (v2sf) {-3.4, -5.8};\n+  b = __builtin_mips_abs_ps (a);\n+  c = (v2sf) {3.4, 5.8};\n+  if (!__builtin_mips_upper_c_eq_ps (b, c) ||\n+      !__builtin_mips_lower_c_eq_ps (b, c))\n+    abort ();\n+\n+  /* alnv.ps with rs = 4*/\n+  a = (v2sf) {1, 2};\n+  b = (v2sf) {3, 4};\n+  i = 4;\n+  c = __builtin_mips_alnv_ps (a, b, i);\n+  d = (v2sf) {2, 3};\n+\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  /* alnv.ps with rs = 0 */\n+  a = (v2sf) {5, 6};\n+  b = (v2sf) {7, 8};\n+  i = 0;\n+  c = __builtin_mips_alnv_ps (a, b, i);\n+  d = (v2sf) {5, 6};\n+\n+  if (!__builtin_mips_upper_c_eq_ps (c, d) ||\n+      !__builtin_mips_lower_c_eq_ps (c, d))\n+    abort ();\n+\n+  printf (\"Test Passes\\n\");\n+  exit (0);\n+}"}, {"sha": "aca3625ab78aa5bf9e5448077dd6188616814cc3", "filename": "gcc/testsuite/gcc.target/mips/mips-ps-type.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-type.c?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -1,6 +1,7 @@\n-/* Test v2sf calculations */\n+/* Test v2sf calculations.  The nmadd and nmsub patterns need\n+   -ffinite-math-only.  */\n /* { dg-do compile } */ \n-/* { dg-mips-options \"-mips64 -O2 -mpaired-single -mhard-float -mgp64\" } */\n+/* { dg-mips-options \"-mips64 -O2 -mpaired-single -mhard-float -mgp64 -ffinite-math-only\" } */\n /* { dg-final { scan-assembler \"cvt.ps.s\" } } */ \n /* { dg-final { scan-assembler \"mov.ps\" } } */ \n /* { dg-final { scan-assembler \"ldc1\" } } */ "}, {"sha": "038b8983cb7426458f509040cef1e00cdeaabbe6", "filename": "gcc/testsuite/gcc.target/mips/neg-abs-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-1.c?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -0,0 +1,13 @@\n+/* Make sure that we use abs.fmt and neg.fmt when the signs of NaNs don't\n+   matter.  */\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -mhard-float -ffinite-math-only\" } */\n+/* { dg-final { scan-assembler \"neg.s\" } } */\n+/* { dg-final { scan-assembler \"neg.d\" } } */\n+/* { dg-final { scan-assembler \"abs.s\" } } */\n+/* { dg-final { scan-assembler \"abs.d\" } } */\n+\n+float f1 (float f) { return -f; }\n+float f2 (float f) { return __builtin_fabsf (f); }\n+double d1 (double d) { return -d; }\n+double d2 (double d) { return __builtin_fabs (d); }"}, {"sha": "5ef08da6f3491332c8b39b3f62d6fa148461d7da", "filename": "gcc/testsuite/gcc.target/mips/neg-abs-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-2.c?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -0,0 +1,13 @@\n+/* Make sure that we avoid abs.fmt and neg.fmt when the signs of NaNs\n+   matter.  */\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -mhard-float -fno-finite-math-only\" } */\n+/* { dg-final { scan-assembler-not \"neg.s\" } } */\n+/* { dg-final { scan-assembler-not \"neg.d\" } } */\n+/* { dg-final { scan-assembler-not \"abs.s\" } } */\n+/* { dg-final { scan-assembler-not \"abs.d\" } } */\n+\n+float f1 (float f) { return -f; }\n+float f2 (float f) { return __builtin_fabsf (f); }\n+double d1 (double d) { return -d; }\n+double d2 (double d) { return __builtin_fabs (d); }"}, {"sha": "df84a76aad59b2ac8b53765121feb84a2bbd604a", "filename": "gcc/testsuite/gcc.target/mips/nmadd-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnmadd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnmadd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnmadd-2.c?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-mips-options \"-O2 -fno-fast-math -mips4 -mhard-float\" } */\n+/* { dg-mips-options \"-O2 -fno-fast-math -ffinite-math-only -mips4 -mhard-float\" } */\n /* { dg-final { scan-assembler \"nmadd.s\" } } */\n /* { dg-final { scan-assembler \"nmadd.d\" } } */\n /* { dg-final { scan-assembler \"nmsub.s\" } } */"}, {"sha": "381fdef08fb4845235e1f41422d4ce99a03394e3", "filename": "gcc/testsuite/gcc.target/mips/nmadd-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnmadd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bded8e1a0abebabf1f2d6323ec859b10641b45b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnmadd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnmadd-3.c?ref=1bded8e1a0abebabf1f2d6323ec859b10641b45b", "patch": "@@ -0,0 +1,32 @@\n+/* The same code as nmadd-2.c, but compiled with -fno-finite-math-only.\n+   We can't use nmadd and nmsub in that case.  */\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -fno-fast-math -fno-finite-math-only -mips4 -mhard-float\" } */\n+/* { dg-final { scan-assembler-not \"nmadd.s\" } } */\n+/* { dg-final { scan-assembler-not \"nmadd.d\" } } */\n+/* { dg-final { scan-assembler-not \"nmsub.s\" } } */\n+/* { dg-final { scan-assembler-not \"nmsub.d\" } } */\n+\n+float\n+sub1 (float f, float g, float h)\n+{\n+  return -((f * g) + h);\n+}\n+\n+double\n+sub2 (double f, double g, double h)\n+{\n+  return -((f * g) + h);\n+}\n+\n+float\n+sub3 (float f, float g, float h)\n+{\n+  return -((f * g) - h);\n+}\n+\n+double\n+sub4 (double f, double g, double h)\n+{\n+  return -((f * g) - h);\n+}"}]}