{"sha": "fc7ca5fd397370a7c606e631b399e43b22397ef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3Y2E1ZmQzOTczNzBhN2M2MDZlNjMxYjM5OWU0M2IyMjM5N2VmOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-10-09T19:27:55Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-10-09T19:27:55Z"}, "message": "[multiple changes]\n\n2004-10-09  Roger Sayle  <roger@eyesopen.com>\n\n\tPR rtl-optimization/17853\n\t* simplify-rtx.c (simplify_relational_operation): Correct comment.\n\tReorganize handling of comparison operations with floating point\n\tresults (always return 0.0 even without FLOAT_STORE_FLAG_VALUE).\n\tLikewise, introduce support for comparison operations with vector\n\tresult types, introducing a new VECTOR_STORE_FLAG_VALUE target macro.\n\n\t* doc/rtl.texi: Document new VECTOR_STORE_FLAG_VALUE target macro.\n\t* doc/tm.texi: Likewise.\n\n2004-10-09  Stuart Hastings  <stuart@apple.com>\n\t    Roger Sayle  <roger@eyesopen.com>\n\n\tPR rtl-optimization/17853\n\t* gcc.dg/i386-mmx-5.c: New testcase.\n\nFrom-SVN: r88826", "tree": {"sha": "96aa90127b4a4b4bb4eebac21fbf671df91a35bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96aa90127b4a4b4bb4eebac21fbf671df91a35bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc7ca5fd397370a7c606e631b399e43b22397ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7ca5fd397370a7c606e631b399e43b22397ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7ca5fd397370a7c606e631b399e43b22397ef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7ca5fd397370a7c606e631b399e43b22397ef9/comments", "author": null, "committer": null, "parents": [{"sha": "35ed0a936a8269de89d1bc62ff63fb725a919b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ed0a936a8269de89d1bc62ff63fb725a919b16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35ed0a936a8269de89d1bc62ff63fb725a919b16"}], "stats": {"total": 99, "additions": 88, "deletions": 11}, "files": [{"sha": "1107817bc82e8b8a9becb0c960359e50daccced0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc7ca5fd397370a7c606e631b399e43b22397ef9", "patch": "@@ -1,3 +1,15 @@\n+2004-10-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/17853\n+\t* simplify-rtx.c (simplify_relational_operation): Correct comment.\n+\tReorganize handling of comparison operations with floating point\n+\tresults (always return 0.0 even without FLOAT_STORE_FLAG_VALUE).\n+\tLikewise, introduce support for comparison operations with vector\n+\tresult types, introducing a new VECTOR_STORE_FLAG_VALUE target macro.\n+\n+\t* doc/rtl.texi: Document new VECTOR_STORE_FLAG_VALUE target macro.\n+\t* doc/tm.texi: Likewise.\n+\n 2004-10-09  Steven Bosscher  <stevenb@suse.de>\n \n \t* regs.h (struct reg_info_def): Remove the last_node_uid and"}, {"sha": "3a72c1673413dc100638a66d0e6e07ef9ded5953", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=fc7ca5fd397370a7c606e631b399e43b22397ef9", "patch": "@@ -2028,10 +2028,13 @@ Comparison operators test a relation on two operands and are considered\n to represent a machine-dependent nonzero value described by, but not\n necessarily equal to, @code{STORE_FLAG_VALUE} (@pxref{Misc})\n if the relation holds, or zero if it does not, for comparison operators\n-whose results have a `MODE_INT' mode, and\n+whose results have a `MODE_INT' mode,\n @code{FLOAT_STORE_FLAG_VALUE} (@pxref{Misc}) if the relation holds, or\n zero if it does not, for comparison operators that return floating-point\n-values.  The mode of the comparison operation is independent of the mode\n+values, and a vector of either @code{VECTOR_STORE_FLAG_VALUE} (@pxref{Misc})\n+if the relation holds, or of zeros if it does not, for comparison operators\n+that return vector results.\n+The mode of the comparison operation is independent of the mode\n of the data being compared.  If the comparison operation is being tested\n (e.g., the first operand of an @code{if_then_else}), the mode must be\n @code{VOIDmode}."}, {"sha": "69f60c14335e15b9c1bba50cd4b41ba2b132462e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=fc7ca5fd397370a7c606e631b399e43b22397ef9", "patch": "@@ -8920,11 +8920,23 @@ instructions, or if the value generated by these instructions is 1.\n @defmac FLOAT_STORE_FLAG_VALUE (@var{mode})\n A C expression that gives a nonzero @code{REAL_VALUE_TYPE} value that is\n returned when comparison operators with floating-point results are true.\n-Define this macro on machine that have comparison operations that return\n+Define this macro on machines that have comparison operations that return\n floating-point values.  If there are no such operations, do not define\n this macro.\n @end defmac\n \n+@defmac VECTOR_STORE_FLAG_VALUE (@var{mode})\n+A C expression that gives a rtx representing the non-zero true element\n+for vector comparisons.  The returned rtx should be valid for the inner\n+mode of @var{mode} which is guaranteed to be a vector mode.  Define\n+this macro on machines that have vector comparison operations that\n+return a vector result.  If there are no such operations, do not define\n+this macro.  Typically, this macro is defined as @code{const1_rtx} or\n+@code{constm1_rtx}.  This macro may return @code{NULL_RTX} to prevent\n+the compiler optimizing such vector comparison operations for the\n+given mode.\n+@end defmac\n+\n @defmac CLZ_DEFINED_VALUE_AT_ZERO (@var{mode}, @var{value})\n @defmacx CTZ_DEFINED_VALUE_AT_ZERO (@var{mode}, @var{value})\n A C expression that evaluates to true if the architecture defines a value"}, {"sha": "7236bbfc064645bbc23445cf82145bedd287c5ce", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=fc7ca5fd397370a7c606e631b399e43b22397ef9", "patch": "@@ -2679,7 +2679,7 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n \n /* Like simplify_binary_operation except used for relational operators.\n    MODE is the mode of the result. If MODE is VOIDmode, both operands must\n-   also be VOIDmode.\n+   not also be VOIDmode.\n \n    CMP_MODE specifies in which mode the comparison is done in, so it is\n    the mode of the operands.  If CMP_MODE is VOIDmode, it is taken from\n@@ -2699,19 +2699,45 @@ simplify_relational_operation (enum rtx_code code, enum machine_mode mode,\n   tem = simplify_const_relational_operation (code, cmp_mode, op0, op1);\n   if (tem)\n     {\n-#ifdef FLOAT_STORE_FLAG_VALUE\n       if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \t{\n           if (tem == const0_rtx)\n             return CONST0_RTX (mode);\n-          else if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n-\t    {\n-\t      REAL_VALUE_TYPE val;\n-\t      val = FLOAT_STORE_FLAG_VALUE (mode);\n-\t      return CONST_DOUBLE_FROM_REAL_VALUE (val, mode);\n-\t    }\n+#ifdef FLOAT_STORE_FLAG_VALUE\n+\t  {\n+\t    REAL_VALUE_TYPE val;\n+\t    val = FLOAT_STORE_FLAG_VALUE (mode);\n+\t    return CONST_DOUBLE_FROM_REAL_VALUE (val, mode);\n+\t  }\n+#else\n+\t  return NULL_RTX;\n+#endif \n \t}\n+      if (VECTOR_MODE_P (mode))\n+\t{\n+\t  if (tem == const0_rtx)\n+\t    return CONST0_RTX (mode);\n+#ifdef VECTOR_STORE_FLAG_VALUE\n+\t  {\n+\t    int i, units;\n+\t    rtvec c;\n+\n+\t    rtx val = VECTOR_STORE_FLAG_VALUE (mode);\n+\t    if (val == NULL_RTX)\n+\t      return NULL_RTX;\n+\t    if (val == const1_rtx)\n+\t      return CONST1_RTX (mode);\n+\n+\t    units = GET_MODE_NUNITS (mode);\n+\t    v = rtvec_alloc (units);\n+\t    for (i = 0; i < units; i++)\n+\t      RTVEC_ELT (v, i) = val;\n+\t    return gen_rtx_raw_CONST_VECTOR (mode, v);\n+\t  }\n+#else\n+\t  return NULL_RTX;\n #endif\n+\t}\n \n       return tem;\n     }"}, {"sha": "5fc35b8cc988c3cbd676624fa27e86dbd6836ba6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc7ca5fd397370a7c606e631b399e43b22397ef9", "patch": "@@ -1,3 +1,9 @@\n+2004-10-09  Stuart Hastings  <stuart@apple.com>\n+\t    Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/17853\n+\t* gcc.dg/i386-mmx-5.c: New testcase.\n+\n 2004-10-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* g++.dg/opt/pr17902.C: Fix typo in dg-do."}, {"sha": "6021825a47d8216390fae13027afd10b8f17f69c", "filename": "gcc/testsuite/gcc.dg/i386-mmx-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-mmx-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7ca5fd397370a7c606e631b399e43b22397ef9/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-mmx-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-mmx-5.c?ref=fc7ca5fd397370a7c606e631b399e43b22397ef9", "patch": "@@ -0,0 +1,18 @@\n+/* PR rtl-optimization/17853 */\n+/* Contributed by Stuart Hastings <stuart@apple.com> */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -mmmx\" } */\n+#include <mmintrin.h>\n+#include <stdlib.h>\n+\n+__m64 global_mask;\n+\n+int main()\n+{\n+    __m64 zero = _mm_setzero_si64();\n+    __m64 mask = _mm_cmpeq_pi8( zero, zero );\n+    mask = _mm_unpacklo_pi8( mask, zero );\n+    global_mask = mask;\n+    return 0;\n+}\n+"}]}