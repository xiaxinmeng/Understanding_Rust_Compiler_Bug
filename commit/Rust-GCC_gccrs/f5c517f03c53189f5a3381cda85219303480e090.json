{"sha": "f5c517f03c53189f5a3381cda85219303480e090", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjNTE3ZjAzYzUzMTg5ZjVhMzM4MWNkYTg1MjE5MzAzNDgwZTA5MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-22T22:59:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-22T22:59:33Z"}, "message": "re PR tree-optimization/83081 ([arm] gcc.dg/pr80218.c fails since r254888)\n\n\tPR tree-optimization/83081\n\t* profile-count.h (profile_probability::split): New method.\n\t* dojump.c (do_jump_1) <case TRUTH_ANDIF_EXPR, case TRUTH_ORIF_EXPR>:\n\tUse profile_probability::split.\n\t(do_compare_rtx_and_jump): Fix adjustment of probabilities\n\twhen splitting a single conditional jump into 2.\n\n\t* gcc.dg/predict-8.c: Adjust expected probability.\n\nFrom-SVN: r256966", "tree": {"sha": "ec53e921f56d5c6c55a4eb908681b7412e7ba5e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec53e921f56d5c6c55a4eb908681b7412e7ba5e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5c517f03c53189f5a3381cda85219303480e090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c517f03c53189f5a3381cda85219303480e090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c517f03c53189f5a3381cda85219303480e090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c517f03c53189f5a3381cda85219303480e090/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3b56023072707b09634953e4c4021e604896f2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b56023072707b09634953e4c4021e604896f2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b56023072707b09634953e4c4021e604896f2f"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "d8c30e719166bca8d0afee38ae6eda0861b5daf8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c517f03c53189f5a3381cda85219303480e090/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c517f03c53189f5a3381cda85219303480e090/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5c517f03c53189f5a3381cda85219303480e090", "patch": "@@ -1,3 +1,12 @@\n+2018-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/83081\n+\t* profile-count.h (profile_probability::split): New method.\n+\t* dojump.c (do_jump_1) <case TRUTH_ANDIF_EXPR, case TRUTH_ORIF_EXPR>:\n+\tUse profile_probability::split.\n+\t(do_compare_rtx_and_jump): Fix adjustment of probabilities\n+\twhen splitting a single conditional jump into 2.\n+\n 2018-01-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR tree-optimization/69452"}, {"sha": "9da8a0e3091fe78836ea14af75b8035aa09115a9", "filename": "gcc/dojump.c", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c517f03c53189f5a3381cda85219303480e090/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c517f03c53189f5a3381cda85219303480e090/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=f5c517f03c53189f5a3381cda85219303480e090", "patch": "@@ -347,13 +347,11 @@ do_jump_1 (enum tree_code code, tree op0, tree op1,\n         profile_probability op1_prob = profile_probability::uninitialized ();\n         if (prob.initialized_p ())\n           {\n-            profile_probability false_prob = prob.invert ();\n-            profile_probability op0_false_prob = false_prob.apply_scale (1, 2);\n-\t    profile_probability op1_false_prob = false_prob.apply_scale (1, 2)\n-\t\t\t\t/ op0_false_prob.invert ();\n+\t    op1_prob = prob.invert ();\n+\t    op0_prob = op1_prob.split (profile_probability::even ());\n             /* Get the probability that each jump below is true.  */\n-            op0_prob = op0_false_prob.invert ();\n-            op1_prob = op1_false_prob.invert ();\n+\t    op0_prob = op0_prob.invert ();\n+\t    op1_prob = op1_prob.invert ();\n           }\n \tif (if_false_label == NULL)\n           {\n@@ -380,8 +378,8 @@ do_jump_1 (enum tree_code code, tree op0, tree op1,\n         profile_probability op1_prob = profile_probability::uninitialized ();\n         if (prob.initialized_p ())\n           {\n-            op0_prob = prob.apply_scale (1, 2);\n-            op1_prob = prob.apply_scale (1, 2) / op0_prob.invert ();\n+\t    op1_prob = prob;\n+\t    op0_prob = op1_prob.split (profile_probability::even ());\n \t  }\n \tif (if_true_label == NULL)\n \t  {\n@@ -1120,16 +1118,27 @@ do_compare_rtx_and_jump (rtx op0, rtx op1, enum rtx_code code, int unsignedp,\n \n \t  else\n \t    {\n-\t      profile_probability first_prob = prob;\n+\t      profile_probability cprob\n+\t\t= profile_probability::guessed_always ();\n \t      if (first_code == UNORDERED)\n-\t\tfirst_prob = profile_probability::guessed_always ().apply_scale\n-\t\t\t\t (1, 100);\n+\t\tcprob = cprob.apply_scale (1, 100);\n \t      else if (first_code == ORDERED)\n-\t\tfirst_prob = profile_probability::guessed_always ().apply_scale\n-\t\t\t\t (99, 100);\n+\t\tcprob = cprob.apply_scale (99, 100);\n+\t      else\n+\t\tcprob = profile_probability::even ();\n+\t      /* We want to split:\n+\t\t if (x) goto t; // prob;\n+\t\t into\n+\t\t if (a) goto t; // first_prob;\n+\t\t if (b) goto t; // prob;\n+\t\t such that the overall probability of jumping to t\n+\t\t remains the same and first_prob is prob * cprob.  */\n \t      if (and_them)\n \t\t{\n \t\t  rtx_code_label *dest_label;\n+\t\t  prob = prob.invert ();\n+\t\t  profile_probability first_prob = prob.split (cprob).invert ();\n+\t\t  prob = prob.invert ();\n \t\t  /* If we only jump if true, just bypass the second jump.  */\n \t\t  if (! if_false_label)\n \t\t    {\n@@ -1143,8 +1152,11 @@ do_compare_rtx_and_jump (rtx op0, rtx op1, enum rtx_code code, int unsignedp,\n \t\t\t\t\t   size, dest_label, NULL, first_prob);\n \t\t}\n               else\n-                do_compare_rtx_and_jump (op0, op1, first_code, unsignedp, mode,\n-\t\t\t\t\t size, NULL, if_true_label, first_prob);\n+\t\t{\n+\t\t  profile_probability first_prob = prob.split (cprob);\n+\t\t  do_compare_rtx_and_jump (op0, op1, first_code, unsignedp, mode,\n+\t\t\t\t\t   size, NULL, if_true_label, first_prob);\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "db274f4c5afddcd336b47b398c2c0f1c15e2b2b0", "filename": "gcc/profile-count.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c517f03c53189f5a3381cda85219303480e090/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c517f03c53189f5a3381cda85219303480e090/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=f5c517f03c53189f5a3381cda85219303480e090", "patch": "@@ -410,6 +410,30 @@ class GTY((user)) profile_probability\n       return *this;\n     }\n \n+  /* Split *THIS (ORIG) probability into 2 probabilities, such that\n+     the returned one (FIRST) is *THIS * CPROB and *THIS is\n+     adjusted (SECOND) so that FIRST + FIRST.invert () * SECOND\n+     == ORIG.  This is useful e.g. when splitting a conditional\n+     branch like:\n+     if (cond)\n+       goto lab; // ORIG probability\n+     into\n+     if (cond1)\n+       goto lab; // FIRST = ORIG * CPROB probability\n+     if (cond2)\n+       goto lab; // SECOND probability\n+     such that the overall probability of jumping to lab remains\n+     the same.  CPROB gives the relative probability between the\n+     branches.  */\n+  profile_probability split (const profile_probability &cprob)\n+    {\n+      profile_probability ret = *this * cprob;\n+      /* The following is equivalent to:\n+         *this = cprob.invert () * *this / ret.invert ();  */\n+      *this = (*this - ret) / ret.invert ();\n+      return ret;\n+    }\n+\n   gcov_type apply (gcov_type val) const\n     {\n       if (*this == profile_probability::uninitialized ())"}, {"sha": "23cef820eeade5f2cafb2a4248b0dc7a7a2bbd26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c517f03c53189f5a3381cda85219303480e090/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c517f03c53189f5a3381cda85219303480e090/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5c517f03c53189f5a3381cda85219303480e090", "patch": "@@ -1,3 +1,8 @@\n+2018-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/83081\n+\t* gcc.dg/predict-8.c: Adjust expected probability.\n+\n 2018-01-22  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/83862"}, {"sha": "5578175ec8048b835708bf56c4fa8a7ea84b54a5", "filename": "gcc/testsuite/gcc.dg/predict-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c517f03c53189f5a3381cda85219303480e090/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c517f03c53189f5a3381cda85219303480e090/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-8.c?ref=f5c517f03c53189f5a3381cda85219303480e090", "patch": "@@ -8,4 +8,4 @@ int foo(float a, float b) {\n     return 2;\n }\n \n-/* { dg-final { scan-rtl-dump-times \"99.0. .guessed\" 2 \"expand\"} } */\n+/* { dg-final { scan-rtl-dump-times \"65.\\[34]. .guessed\" 2 \"expand\"} } */"}]}