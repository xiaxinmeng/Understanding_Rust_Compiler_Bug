{"sha": "7d112d6670a0e0e662f8a7e64c33686e475832c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QxMTJkNjY3MGEwZTBlNjYyZjhhN2U2NGMzMzY4NmU0NzU4MzJjOA==", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2019-09-19T19:56:11Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-09-19T19:56:11Z"}, "message": "Support extended characters in C/C++ identifiers (PR c/67224)\n\nlibcpp/ChangeLog\n2019-09-19  Lewis Hyatt  <lhyatt@gmail.com>\n\n\tPR c/67224\n\t* charset.c (_cpp_valid_utf8): New function to help lex UTF-8 tokens.\n\t* internal.h (_cpp_valid_utf8): Declare.\n\t* lex.c (forms_identifier_p): Use it to recognize UTF-8 identifiers.\n\t(_cpp_lex_direct): Handle UTF-8 in identifiers and CPP_OTHER tokens.\n\tDo all work in \"default\" case to avoid slowing down typical code paths.\n\tAlso handle $ and UCN in the default case for consistency.\n\ngcc/Changelog\n2019-09-19  Lewis Hyatt  <lhyatt@gmail.com>\n\n\tPR c/67224\n\t* doc/cpp.texi: Document support for extended characters in\n\tidentifiers.\n\t* doc/cppopts.texi: Likewise.\n\ngcc/testsuite/ChangeLog\n2019-09-19  Lewis Hyatt  <lhyatt@gmail.com>\n\n\tPR c/67224\n\t* c-c++-common/cpp/ucnid-2011-1-utf8.c: New test.\n\t* g++.dg/cpp/ucnid-1-utf8.C: New test.\n\t* g++.dg/cpp/ucnid-2-utf8.C: New test.\n\t* g++.dg/cpp/ucnid-3-utf8.C: New test.\n\t* g++.dg/cpp/ucnid-4-utf8.C: New test.\n\t* g++.dg/other/ucnid-1-utf8.C: New test.\n\t* gcc.dg/cpp/ucnid-1-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-10-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-11-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-12-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-13-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-14-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-15-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-2-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-3-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-4-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-6-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-7-utf8.c: New test.\n\t* gcc.dg/cpp/ucnid-9-utf8.c: New test.\n\t* gcc.dg/ucnid-1-utf8.c: New test.\n\t* gcc.dg/ucnid-10-utf8.c: New test.\n\t* gcc.dg/ucnid-11-utf8.c: New test.\n\t* gcc.dg/ucnid-12-utf8.c: New test.\n\t* gcc.dg/ucnid-13-utf8.c: New test.\n\t* gcc.dg/ucnid-14-utf8.c: New test.\n\t* gcc.dg/ucnid-15-utf8.c: New test.\n\t* gcc.dg/ucnid-16-utf8.c: New test.\n\t* gcc.dg/ucnid-2-utf8.c: New test.\n\t* gcc.dg/ucnid-3-utf8.c: New test.\n\t* gcc.dg/ucnid-4-utf8.c: New test.\n\t* gcc.dg/ucnid-5-utf8.c: New test.\n\t* gcc.dg/ucnid-6-utf8.c: New test.\n\t* gcc.dg/ucnid-7-utf8.c: New test.\n\t* gcc.dg/ucnid-8-utf8.c: New test.\n\t* gcc.dg/ucnid-9-utf8.c: New test.\n\nFrom-SVN: r275979", "tree": {"sha": "983eb23217b2572ff4fe5a7f7fe0e5c0c0b9a48d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/983eb23217b2572ff4fe5a7f7fe0e5c0c0b9a48d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d112d6670a0e0e662f8a7e64c33686e475832c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d112d6670a0e0e662f8a7e64c33686e475832c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d112d6670a0e0e662f8a7e64c33686e475832c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d112d6670a0e0e662f8a7e64c33686e475832c8/comments", "author": null, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0710fcf7dc70054a9a20ab1b8d77f4fef26ef2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0710fcf7dc70054a9a20ab1b8d77f4fef26ef2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0710fcf7dc70054a9a20ab1b8d77f4fef26ef2c"}], "stats": {"total": 844, "additions": 807, "deletions": 37}, "files": [{"sha": "7f16c16e6a13e8680eb1aa48606d42849800ac13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -1,3 +1,10 @@\n+2019-09-19  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR c/67224\n+\t* doc/cpp.texi: Document support for extended characters in\n+\tidentifiers.\n+\t* doc/cppopts.texi: Likewise.\n+\n 2019-09-19  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vect_is_slp_reduction): Remove."}, {"sha": "f2de39a270c4a033e4aa0e8efbf79d80fdbf18c9", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -274,11 +274,11 @@ the character in the source character set that they represent, then\n converted to the execution character set, just like unescaped\n characters.\n \n-In identifiers, characters outside the ASCII range can only be\n-specified with the @samp{\\u} and @samp{\\U} escapes, not used\n-directly.  If strict ISO C90 conformance is specified with an option\n+In identifiers, characters outside the ASCII range can be specified\n+with the @samp{\\u} and @samp{\\U} escapes or used directly in the input\n+encoding.  If strict ISO C90 conformance is specified with an option\n such as @option{-std=c90}, or @option{-fno-extended-identifiers} is\n-used, then those escapes are not permitted in identifiers.\n+used, then those constructs are not permitted in identifiers.\n \n @node Initial processing\n @section Initial processing\n@@ -503,8 +503,7 @@ In the 1999 C standard, identifiers may contain letters which are not\n part of the ``basic source character set'', at the implementation's\n discretion (such as accented Latin letters, Greek letters, or Chinese\n ideograms).  This may be done with an extended character set, or the\n-@samp{\\u} and @samp{\\U} escape sequences.  GCC only accepts such\n-characters in the @samp{\\u} and @samp{\\U} forms.\n+@samp{\\u} and @samp{\\U} escape sequences.\n \n As an extension, GCC treats @samp{$} as a letter.  This is for\n compatibility with some systems, such as VMS, where @samp{$} is commonly\n@@ -584,15 +583,15 @@ Punctuator:      @{   @}   [   ]   #    ##\n @end smallexample\n \n @cindex other tokens\n-Any other single character is considered ``other''.  It is passed on to\n-the preprocessor's output unmolested.  The C compiler will almost\n-certainly reject source code containing ``other'' tokens.  In ASCII, the\n-only other characters are @samp{@@}, @samp{$}, @samp{`}, and control\n+Any other single byte is considered ``other'' and passed on to the\n+preprocessor's output unchanged.  The C compiler will almost certainly\n+reject source code containing ``other'' tokens.  In ASCII, the only\n+``other'' characters are @samp{@@}, @samp{$}, @samp{`}, and control\n characters other than NUL (all bits zero).  (Note that @samp{$} is\n-normally considered a letter.)  All characters with the high bit set\n-(numeric range 0x7F--0xFF) are also ``other'' in the present\n-implementation.  This will change when proper support for international\n-character sets is added to GCC@.\n+normally considered a letter.)  All bytes with the high bit set\n+(numeric range 0x7F--0xFF) that were not succesfully interpreted as\n+part of an extended character in the input encoding are also ``other''\n+in the present implementation.\n \n NUL is a special case because of the high probability that its\n appearance is accidental, and because it may be invisible to the user\n@@ -4179,7 +4178,10 @@ be controlled using the @option{-fexec-charset} and\n The C and C++ standards allow identifiers to be composed of @samp{_}\n and the alphanumeric characters.  C++ also allows universal character\n names.  C99 and later C standards permit both universal character\n-names and implementation-defined characters.\n+names and implementation-defined characters.  In both C and C++ modes,\n+GCC accepts in identifiers exactly those extended characters that\n+correspond to universal character names permitted by the chosen\n+standard.\n \n GCC allows the @samp{$} character in identifiers as an extension for\n most targets.  This is true regardless of the @option{std=} switch,"}, {"sha": "f4bc3f546f82742dc89e4c1d34175e44eafcaa8f", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -254,8 +254,9 @@ Accept @samp{$} in identifiers.\n \n @item -fextended-identifiers\n @opindex fextended-identifiers\n-Accept universal character names in identifiers.  This option is\n-enabled by default for C99 (and later C standard versions) and C++.\n+Accept universal character names and extended characters in\n+identifiers.  This option is enabled by default for C99 (and later C\n+standard versions) and C++.\n \n @item -fno-canonical-system-headers\n @opindex fno-canonical-system-headers"}, {"sha": "1f9b5ac567b22cb41eaedda99d646cbe7058389e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -1,3 +1,42 @@\n+2019-09-19  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR c/67224\n+\t* c-c++-common/cpp/ucnid-2011-1-utf8.c: New test.\n+\t* g++.dg/cpp/ucnid-1-utf8.C: New test.\n+\t* g++.dg/cpp/ucnid-2-utf8.C: New test.\n+\t* g++.dg/cpp/ucnid-3-utf8.C: New test.\n+\t* g++.dg/cpp/ucnid-4-utf8.C: New test.\n+\t* g++.dg/other/ucnid-1-utf8.C: New test.\n+\t* gcc.dg/cpp/ucnid-1-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-10-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-11-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-12-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-13-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-14-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-15-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-2-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-3-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-4-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-6-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-7-utf8.c: New test.\n+\t* gcc.dg/cpp/ucnid-9-utf8.c: New test.\n+\t* gcc.dg/ucnid-1-utf8.c: New test.\n+\t* gcc.dg/ucnid-10-utf8.c: New test.\n+\t* gcc.dg/ucnid-11-utf8.c: New test.\n+\t* gcc.dg/ucnid-12-utf8.c: New test.\n+\t* gcc.dg/ucnid-13-utf8.c: New test.\n+\t* gcc.dg/ucnid-14-utf8.c: New test.\n+\t* gcc.dg/ucnid-15-utf8.c: New test.\n+\t* gcc.dg/ucnid-16-utf8.c: New test.\n+\t* gcc.dg/ucnid-2-utf8.c: New test.\n+\t* gcc.dg/ucnid-3-utf8.c: New test.\n+\t* gcc.dg/ucnid-4-utf8.c: New test.\n+\t* gcc.dg/ucnid-5-utf8.c: New test.\n+\t* gcc.dg/ucnid-6-utf8.c: New test.\n+\t* gcc.dg/ucnid-7-utf8.c: New test.\n+\t* gcc.dg/ucnid-8-utf8.c: New test.\n+\t* gcc.dg/ucnid-9-utf8.c: New test.\n+\n 2019-09-19  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.dg/pr89313.c: Test for __POWERPC__ in addition to"}, {"sha": "02c5fc08f8452344d11aa17a7ed9e53718ca5d77", "filename": "gcc/testsuite/c-c++-common/cpp/ucnid-2011-1-utf8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fucnid-2011-1-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fucnid-2011-1-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fucnid-2011-1-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c11 -pedantic\" { target c } } */\n+/* { dg-options \"-std=c++11 -pedantic\" { target c++ } } */\n+\n+\u00a8\n+\n+B\u0300\n+\n+\u0300 /* { dg-error \"not valid at the start of an identifier\" } */\n+\n+A\u0300 /* { dg-warning \"not in NFC\" } */\n+\n+\ud800\udc00\n+\ud83f\udffd\n+\udb44\ude34"}, {"sha": "839b1881bf41e49d0e3f0ead78f5dee5c253eb9d", "filename": "gcc/testsuite/g++.dg/cpp/ucnid-1-utf8.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1-utf8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1-utf8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1-utf8.C?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu++98 -pedantic\" } */\n+\n+\u00aa /* { dg-error \"not valid in an identifier\" } */\n+\u00ab /* { dg-error \"not valid in an identifier\" } */\n+\u00b6 /* { dg-error \"not valid in an identifier\" } */\n+\u00ba /* { dg-error \"not valid in an identifier\" } */\n+\u00c0\n+\u00d6\n+\u0384\n+\n+\u0669 /* { dg-error \"not valid in an identifier\" } */\n+A\u0669 /* { dg-error \"not valid in an identifier\" } */\n+0\u00ba /* { dg-error \"not valid in an identifier\" } */\n+0\u0669 /* { dg-error \"not valid in an identifier\" } */\n+\u0e59\n+A\u0e59"}, {"sha": "0381452d89858561da5f80ffaa7f66c4bec7f3ce", "filename": "gcc/testsuite/g++.dg/cpp/ucnid-2-utf8.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-2-utf8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-2-utf8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-2-utf8.C?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,24 @@\n+/* Test stringization of identifiers with extended characters works.  */\n+\n+/* Note: The results expected in these tests are what GCC currently\n+outputs, but they are not technically standard-conforming.  If GCC is\n+changed in the future to produce the standard-conforming output, then\n+this test will fail and should be adjusted to check for UCNs in the\n+output rather than UTF-8.  See PR 91755 for more details.  */\n+\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#define h(s) #s\n+#define str(s) h(s)\n+\n+int\n+main ()\n+{\n+  if (strcmp (str (str (\u00c1)), \"\\\"\u00c1\\\"\"))\n+    abort ();\n+  if (strcmp (str (str (\u00c1)), \"\\\"\u00c1\\\"\"))\n+    abort ();\n+}"}, {"sha": "5c3044a171d5cab1a45981aee01654d3b4f6edcf", "filename": "gcc/testsuite/g++.dg/cpp/ucnid-3-utf8.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-3-utf8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-3-utf8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-3-utf8.C?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,23 @@\n+/* Test pasting of identifiers with extended characters works.  */\n+\n+/* Note: The results expected in these tests are what GCC currently\n+outputs, but they are not technically standard-conforming.  If GCC is\n+changed in the future to produce the standard-conforming output, then\n+this test will fail and should be adjusted to check for UCNs in the\n+output rather than UTF-8.  See PR 91755 for more details.  */\n+\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#define c(s1, s2) s1 ## s2\n+#define h(s) #s\n+#define str(s) h(s)\n+\n+int\n+main ()\n+{\n+  if (strcmp (str (str (c (\u00c1, \u00c1))), \"\\\"\u00c1\u00c1\\\"\"))\n+    abort ();\n+}"}, {"sha": "de252e87165da541a0cd197248b96dc408ed2162", "filename": "gcc/testsuite/g++.dg/cpp/ucnid-4-utf8.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-4-utf8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-4-utf8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-4-utf8.C?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu++98\"} */\n+\n+\u00aa\n+\u00ab /* { dg-error \"not valid in an identifier\" } */\n+\u00b6 /* { dg-error \"not valid in an identifier\" } */\n+\u00ba\n+\u00c0\n+\u00d6\n+\u0384\n+\n+\u0669 /* OK in C++ */\n+A\u0669\n+0\u00ba\n+0\u0669\n+\u0e59 /* OK in C++ */\n+A\u0e59"}, {"sha": "dab415235951fa14276a1020d54b545fd4165d6a", "filename": "gcc/testsuite/g++.dg/other/ucnid-1-utf8.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fucnid-1-utf8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fucnid-1-utf8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fucnid-1-utf8.C?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-xfail-if \"\" { powerpc-ibm-aix* } } */\n+/* { dg-skip-if \"\" { ! ucn } } */\n+#include <cstdlib>\n+\n+int \u00c0(void) { return 1; }\n+int \u00c1(void) { return 2; }\n+int \u00c2(void) { return 3; }\n+int wh\u00ff(void) { return 4; }\n+int a\u00c4b\u0441\u03b4e(void) { return 5; }\n+\n+int main (void)\n+{\n+  \n+  if (\u00c0() != 1)\n+    abort ();\n+  if (\u00c1() != 2)\n+    abort ();\n+  if (\u00c2() != 3)\n+    abort ();\n+  if (wh\u00ff() != 4)\n+    abort ();\n+  if (a\u00c4b\u0441\u03b4e() != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "9100b980960eb3a9c4cc274f2ce9db275ffb9e00", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-1-utf8.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-1-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-1-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-1-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99 -g3\" } */\n+void abort (void);\n+\n+#define \u00c0 1\n+#define \u00c1 2\n+#define \u00c2 3\n+#define wh\u00ff 4\n+#define a\u00c4b\u0441\u03b4e 5\n+\n+int main (void)\n+{\n+  \n+  if (\u00c0 != 1)\n+    abort ();\n+  if (\u00c1 != 2)\n+    abort ();\n+  if (\u00c2 != 3)\n+    abort ();\n+  if (wh\u00ff != 4)\n+    abort ();\n+  if (a\u00c4b\u0441\u03b4e != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "7eeb026ba7c0879c522434b1bc0294ef548fb3bb", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-10-utf8.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-10-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-10-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-10-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,8 @@\n+/* Test UTF-8 is allowed in preprocessing numbers.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#define a(x) b(x)\n+#define b(x) 0\n+#define p )\n+int c = a(0\u00c0.p);"}, {"sha": "56b88f8be6136deb292a6b339333534c444a1a2d", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-11-utf8.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-11-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-11-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-11-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,30 @@\n+/* Test spelling differences in UCNs are properly diagnosed for macro\n+   redefinitions.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+/* Different spelling of UCN in expansion.  */\n+#define m1 \\u00c1 /* { dg-message \"-:previous definition\" } */\n+#define m1 \u00c1 /* { dg-error \"-:redefined\" } */\n+\n+#define m1ok \u00c1\n+#define m1ok \u00c1\n+\n+/* Different spelling of UCN in argument name.  */\n+#define m2(\\u00c1) /* { dg-message \"-:previous definition\" } */\n+#define m2(\u00c1) /* { dg-error \"-:redefined\" } */\n+\n+#define m2ok(\u00c1)\n+#define m2ok(\u00c1)\n+\n+/* Same spelling in argument name but different spelling when used in\n+   expansion.  */\n+#define m3(\\u00c1) \\u00c1 /* { dg-message \"-:previous definition\" } */\n+#define m3(\\u00c1) \u00c1 /* { dg-error \"-:redefined\" } */\n+\n+#define m3ok(\\u00c1) \u00c1\n+#define m3ok(\\u00c1) \u00c1\n+\n+/* Different spelling of the macro name itself is OK.  */\n+#define m4ok\\u00c1\n+#define m4ok\u00c1"}, {"sha": "9b54249c6a36f0d675e94fd1e99b958c8354f247", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-12-utf8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-12-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-12-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-12-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,13 @@\n+/* Test spelling differences in UCNs in macro definitions still count\n+   as the same identifier for macro expansion.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+#define m1\\u00c1\n+#ifndef m1\u00c1\n+#error not defined\n+#endif\n+\n+#define m2(\\u00c1) \u00c1\n+\n+int i = m2 (0);"}, {"sha": "aff39b635db3affb96d401da99fbf6d6d0c6ae53", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-13-utf8.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-13-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-13-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-13-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,5 @@\n+/* Verify macros named with UTF-8 are output in -dD output with UCNs.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99 -dD\" } */\n+/* { dg-final { scan-file ucnid-13-utf8.i \"\\\\\\\\U000000c1\" } } */\n+#define \u00c1 1"}, {"sha": "6ea14ebbaa282ce6d24854687048e0d25eaa54f4", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-14-utf8.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-14-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-14-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-14-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,6 @@\n+/* Verify macro definitions with UTF-8 are output in -dD output with\n+   the original spelling.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99 -dD\" } */\n+/* { dg-final { scan-file ucnid-14-utf8.i \"\u00c1\" } } */\n+#define a \u00c1"}, {"sha": "cf2289a80aa05bcc11b1091d201f7e9bfdd547bd", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-15-utf8.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-15-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-15-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-15-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,6 @@\n+/* Verify macro definitions with UTF-8 in argument names are output in\n+   -dD output with the original spelling.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99 -dD\" } */\n+/* { dg-final { scan-file ucnid-15-utf8.i \"#define a\\\\(\u00c1\\\\) x:\u00c1:y:\u00c1:z\" } } */\n+#define a(\u00c1) x:\u00c1:y:\u00c1:z"}, {"sha": "e3730f8641a1cb6ac5436079320a0c2f1fba8d82", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-2-utf8.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-2-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-2-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-2-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#define str(t) #t\n+\n+int main (void)\n+{\n+  const char s[] = str (\u30b2);\n+\n+  if (strcmp (s, \"\u30b2\") != 0)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "4c9ed25b590fae09dd9c644c3fff00397004bf14", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-3-utf8.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-3-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-3-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-3-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#define paste(x, y) x ## y\n+\n+int paste(\u00aa, \u0531) = 3;\n+"}, {"sha": "ccc7a1e02960f34fbc13db5946cc6c7873d40416", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-4-utf8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-4-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99\" } */\n+\n+\u00aa\n+\u00ab /* not a preprocessing error because we lex it into its own token */\n+\u00b6 /* not a preprocessing error because we lex it into its own token */\n+\u00ba\n+\u00c0\n+\u00d6\n+\u0384\n+\n+\u0669 /* { dg-error \"not valid at the start of an identifier\" } */\n+A\u0669\n+0\u00ba\n+0\u0669\n+\u0e59 /* { dg-error \"not valid at the start of an identifier\" } */\n+A\u0e59"}, {"sha": "b4dd0946142393567ae3ec88ac2adaedd26a68ff", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-6-utf8.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-6-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-6-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-6-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89\" } */\n+#define a b(\n+#define b(x) q\n+int a\u00aa);"}, {"sha": "22aff7eaed5c09208c588d6c47257e9dab60de52", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-7-utf8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-7-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-7-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-7-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+/* When GCC reads UTF-8-encoded input into its internal UTF-8\n+representation, it does not apply any transformation to the data, and\n+in particular it makes no attempt to verify that the encoding is valid\n+UTF-8.  Historically, if any non-ASCII characters were found outside a\n+string or comment, they were treated as stray tokens and did not\n+necessarily produce an error, e.g. if, as in this test, they disappear\n+in the preprocessor.  Now that UTF-8 is also supported in identifiers,\n+the basic structure of this process has not changed; GCC just treats\n+invalid UTF-8 as a stray token.  This test verifies that the historical\n+behavior is unchanged.  In the future, if GCC were changed, say, to\n+validate the UTF-8 on input, then this test would no longer be\n+appropriate.  */\n+\n+\n+#define a b(\n+#define b(x) q\n+/* The line below contains invalid UTF-8.  */\n+int a\ufffd);"}, {"sha": "1558eca8bd0f007991eb716b32b9ec84948ca66f", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-9-utf8.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-9-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-9-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-9-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99 -pedantic\" } */\n+\n+\u2160\n+\u2182\n+\u3007\n+\u3021\n+\u3029"}, {"sha": "72136737b62e7888a6263964803df7af3bfbbdab", "filename": "gcc/testsuite/gcc.dg/ucnid-1-utf8.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-1-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-1-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-1-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99 -g\" } */\n+void abort (void);\n+\n+int main (void)\n+{\n+  int \u00c0 = 1;\n+  int \u00c1 = 2;\n+  int \u00c2 = 3;\n+  int wh\u00ff = 4;\n+  int a\u00c4b\u0441\u03b4e = 5;\n+  \n+  if (\u00c0 != 1)\n+    abort ();\n+  if (\u00c1 != 2)\n+    abort ();\n+  if (\u00c2 != 3)\n+    abort ();\n+  if (wh\u00ff != 4)\n+    abort ();\n+  if (a\u00c4b\u0441\u03b4e != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "86830b8b22873ddf11621444ea95b39521ce1acc", "filename": "gcc/testsuite/gcc.dg/ucnid-10-utf8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,11 @@\n+/* Verify diagnostics for extended identifiers refer to UCNs (in the C\n+   locale).  Test #pragma pack diagnostics.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+/* { dg-require-ascii-locale \"\" } */\n+/* { dg-skip-if \"\" { powerpc-ibm-aix* } } */\n+\n+#pragma pack(push)\n+#pragma pack(pop, \u00f3) /* { dg-warning \"pop, \\\\\\\\U000000f3.*push, \\\\\\\\U000000f3\" } */\n+#pragma pack(\u00e7) /* { dg-warning \"unknown action '\\\\\\\\U000000e7'\" } */\n+"}, {"sha": "c6a89bae774daaf29802d33f4b217f9bda3aa000", "filename": "gcc/testsuite/gcc.dg/ucnid-11-utf8.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-11-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-11-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-11-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { powerpc-ibm-aix* } } */\n+/* { dg-skip-if \"\" { ! ucn } } */\n+/* { dg-skip-if \"-fdata-sections not supported\" { { hppa*-*-hpux* } && { ! lp64 } } } */\n+/* { dg-options \"-std=c99 -fdata-sections -g\" } */\n+\n+#include \"ucnid-3-utf8.c\""}, {"sha": "cfdffba8f6cf1c5399f90bacb867f405cac4b797", "filename": "gcc/testsuite/gcc.dg/ucnid-12-utf8.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-12-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-12-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-12-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { powerpc-ibm-aix* } } */\n+/* { dg-skip-if \"\" { ! ucn } } */\n+/* { dg-skip-if \"-ffunction-sections not supported\" { { hppa*-*-hpux* } && { ! lp64 } } } */\n+/* { dg-options \"-std=c99 -ffunction-sections -g\" } */\n+\n+#include \"ucnid-4-utf8.c\""}, {"sha": "41536c3a7427bf3053325c01d08a79524f3264b5", "filename": "gcc/testsuite/gcc.dg/ucnid-13-utf8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-13-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-13-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-13-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,15 @@\n+/* Verify diagnostics for extended identifiers refer to UCNs (in the C\n+   locale).  Miscellaneous diagnostics.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wpacked\" } */\n+/* { dg-require-ascii-locale \"\" } */\n+/* { dg-skip-if \"\" { powerpc-ibm-aix* } } */\n+\n+int a __attribute__((\u00c0)); /* { dg-warning \"'\\\\\\\\U000000c0' attribute directive ignored\" } */\n+\n+extern void \u00c1 (void) __attribute__((deprecated));\n+void g (void) { \u00c1 (); } /* { dg-warning \"'\\\\\\\\U000000c1' is deprecated\" } */\n+\n+struct \u00c2 { char c; } __attribute__((packed)); /* { dg-warning \"'\\\\\\\\U000000c2'\" } */\n+\n+void h (void) { asm (\"%[\u00c3]\" : : ); } /* { dg-error \"undefined named operand '\\\\\\\\U000000c3'\" } */"}, {"sha": "e781ed6b4ed0c24100a20621321830b05cf6768b", "filename": "gcc/testsuite/gcc.dg/ucnid-14-utf8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-14-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-14-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-14-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,23 @@\n+/* Test miscellaneous uses of UTF-8 in identifiers compile and run OK,\n+   with debug info enabled.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99 -g\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  struct \u00c0 { int \u00c1; } x;\n+  struct \u00c0 *y = &x;\n+  y->\u00c1 = 1;\n+  if (x.\u00c1 != 1)\n+    abort ();\n+  goto \u00ff;\n+ \u00ff: ;\n+  enum e { \u00c2 = 4 };\n+  if (\u00c2 != 4)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "e2336891b0dc7a079a32962a6ea6c101e49d8a11", "filename": "gcc/testsuite/gcc.dg/ucnid-15-utf8.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-15-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-15-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-15-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,38 @@\n+/* Test combinations of UTF-8 in various parts of identifiers.  */\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { \"powerpc-ibm-aix*\" } } */\n+/* { dg-skip-if \"\" { ! ucn } } */\n+/* { dg-options \"-std=c99\" } */\n+\n+extern void abort (void);\n+\n+int \u03c0 = 3;\n+int \u03c0\u00b2 = 9;\n+int \u03c0p1 = 4;\n+int two\u03c0 = 6;\n+int four_plus_\u03c0_ = 7;\n+int \ud83d\ude00\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00df\u00e0\u00e1\u00e2\u00e3\u00e4a\u00e5b\u00e6\u00e7\u00e8\u00e9\u00eac\u00eb\u00ec\u00edg\u00ee\u00ef\u00f07\u00f19__\u00f2\u00f3\u00f44\u00f5\u00f6\u00c63\u00c7\u00c8\u00c9\u00ca\u00cbabc\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\ud83d\ude04\ud83d\ude05\ud83e\udd23\ud83d\ude02_\u00ff = 2;\n+int \u03c0\\u03C0 = 9;\n+\n+int main() {\n+  if (\u03c0 != 3)\n+\tabort ();\n+\n+  if (\u03c0\u00b2 != 9)\n+\tabort ();\n+\n+  if (\u03c0p1 != 4)\n+\tabort ();\n+\n+  if (two\u03c0 != 6)\n+\tabort ();\n+\n+  if (four_plus_\u03c0_ != 7)\n+\tabort () ;\n+\n+  if (\ud83d\ude00\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00df\u00e0\u00e1\u00e2\u00e3\u00e4a\u00e5b\u00e6\u00e7\u00e8\u00e9\u00eac\u00eb\u00ec\u00edg\u00ee\u00ef\u00f07\u00f19__\u00f2\u00f3\u00f44\u00f5\u00f6\u00c63\u00c7\u00c8\u00c9\u00ca\u00cbabc\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\ud83d\ude04\ud83d\ude05\ud83e\udd23\ud83d\ude02_\u00ff != 2)\n+    abort ();\n+\n+  if(\u03c0\u03c0 != \u03c0\u00b2)\n+    abort ();\n+}"}, {"sha": "5d000a0758a0a4ffb4400679d43504bd7527e2fb", "filename": "gcc/testsuite/gcc.dg/ucnid-16-utf8.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-16-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-16-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-16-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -g -finput-charset=latin1\" } */\n+/* { dg-final { scan-file ucnid-16-utf8.s \"\u00b2\" } } */\n+\n+/* This superscript is encoded in latin1; verify that we still get UTF-8 in the output.  */\n+int x\ufffd = 9;"}, {"sha": "70f9464638cca79bc10456d8332ab723ae46cb76", "filename": "gcc/testsuite/gcc.dg/ucnid-2-utf8.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-2-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-2-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-2-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { powerpc-ibm-aix* } } */\n+/* { dg-skip-if \"\" { ! ucn } } */\n+/* { dg-options \"-std=c99 -g\" } */\n+void abort (void);\n+\n+static int \u00c0 = 1;\n+static int \u00c1 = 2;\n+static int \u00c2 = 3;\n+static int wh\u00ff = 4;\n+static int a\u00c4b\u0441\u03b4e = 5;\n+\n+int main (void)\n+{\n+  \n+  if (\u00c0 != 1)\n+    abort ();\n+  if (\u00c1 != 2)\n+    abort ();\n+  if (\u00c2 != 3)\n+    abort ();\n+  if (wh\u00ff != 4)\n+    abort ();\n+  if (a\u00c4b\u0441\u03b4e != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "f8509a64323f58f54815e7ee2bd6029c5a7b02e7", "filename": "gcc/testsuite/gcc.dg/ucnid-3-utf8.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-3-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-3-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-3-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { powerpc-ibm-aix* } } */\n+/* { dg-skip-if \"\" { ! ucn } } */\n+/* { dg-options \"-std=c99 -g\" } */\n+void abort (void);\n+\n+int \u00c0 = 1;\n+int \u00c1 = 2;\n+int \u00c2 = 3;\n+int wh\u00ff = 4;\n+int a\u00c4b\u0441\u03b4e = 5;\n+\n+int main (void)\n+{\n+  \n+  if (\u00c0 != 1)\n+    abort ();\n+  if (\u00c1 != 2)\n+    abort ();\n+  if (\u00c2 != 3)\n+    abort ();\n+  if (wh\u00ff != 4)\n+    abort ();\n+  if (a\u00c4b\u0441\u03b4e != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "bf1c403b48a2cc1b24de02881dbc6edba567e4a9", "filename": "gcc/testsuite/gcc.dg/ucnid-4-utf8.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-4-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-4-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-4-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { powerpc-ibm-aix* } } */\n+/* { dg-skip-if \"\" { ! ucn } } */\n+/* { dg-options \"-std=c99 -g\" } */\n+void abort (void);\n+\n+int \u00c0(void) { return 1; }\n+int \u00c1(void) { return 2; }\n+int \u00c2(void) { return 3; }\n+int wh\u00ff(void) { return 4; }\n+int a\u00c4b\u0441\u03b4e(void) { return 5; }\n+\n+int main (void)\n+{\n+  \n+  if (\u00c0() != 1)\n+    abort ();\n+  if (\u00c1() != 2)\n+    abort ();\n+  if (\u00c2() != 3)\n+    abort ();\n+  if (wh\u00ff() != 4)\n+    abort ();\n+  if (a\u00c4b\u0441\u03b4e() != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "f4473e1df1743d3e5f03c8ad630fe8a0df41b222", "filename": "gcc/testsuite/gcc.dg/ucnid-5-utf8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-skip-if \"No dollar in identfiers\" { avr-*-* powerpc-ibm-aix* } } */\n+/* { dg-options \"-std=c99 -fdollars-in-identifiers -g\" } */\n+void abort (void);\n+\n+int a$b(void) { return 1; }\n+int a$b\ud83d\ude00(void) { return 2; }\n+\n+int main (void)\n+{\n+  \n+  if (a$b() != 1)\n+    abort ();\n+\n+  if (a$b\ud83d\ude00() != 2)\n+\t  abort ();\n+  \n+  return 0;\n+}"}, {"sha": "36ce52bc571f3f2505c2efdece8df4b6dd67b96c", "filename": "gcc/testsuite/gcc.dg/ucnid-6-utf8.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-6-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-6-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-6-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { \"powerpc-ibm-aix*\" } } */\n+/* { dg-skip-if \"\" { ! ucn } } */\n+/* { dg-options \"-std=c99 -save-temps -g\" } */\n+void abort (void);\n+\n+int \u00c0(void) { return 1; }\n+int \u00c1(void) { return 2; }\n+int \u00c2(void) { return 3; }\n+int wh\u00ff(void) { return 4; }\n+int a\u00c4b\u0441\u03b4e(void) { return 5; }\n+\n+int main (void)\n+{\n+  \n+  if (\u00c0() != 1)\n+    abort ();\n+  if (\u00c1() != 2)\n+    abort ();\n+  if (\u00c2() != 3)\n+    abort ();\n+  if (wh\u00ff() != 4)\n+    abort ();\n+  if (a\u00c4b\u0441\u03b4e() != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "07f5ca0f9d37c3a66fcdb4c51c4a97929ab0f1c6", "filename": "gcc/testsuite/gcc.dg/ucnid-7-utf8.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-7-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-7-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-7-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,9 @@\n+/* Verify diagnostics for extended identifiers refer to UCNs (in the C\n+   locale).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+/* { dg-require-ascii-locale \"\" } */\n+/* { dg-skip-if \"\" { \"powerpc-ibm-aix*\" } } */\n+\n+void *p = &\u00e9; /* { dg-error \"'\\\\\\\\U000000e9' undeclared\" } */\n+void *q = &\u1e00; /* { dg-error \"'\\\\\\\\U00001e00' undeclared\" } */"}, {"sha": "e6c440d977566d9bce67ddaa46345b53c3f353d9", "filename": "gcc/testsuite/gcc.dg/ucnid-8-utf8.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-8-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,16 @@\n+/* Verify diagnostics for extended identifiers refer to UCNs (in the C\n+   locale).  Further tests of C front-end diagnostics.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wvla\" } */\n+/* { dg-require-ascii-locale \"\" } */\n+/* { dg-skip-if \"\" { powerpc-ibm-aix* } } */\n+\n+int a __attribute__((__mode__(\u00e9))); /* { dg-error \"unknown machine mode '\\\\\\\\U000000e9'\" } */\n+struct s1 { int \u00e9 : 0; }; /* { dg-error \"zero width for bit-field '\\\\\\\\U000000e9'\" } */\n+\n+void f (int b) { int \u00e9[b]; } /* { dg-warning \"variable length array '\\\\\\\\U000000e9'\" } */\n+\n+void g (static int \u00e9); /* { dg-error \"storage class specified for parameter '\\\\\\\\U000000e9'\" } */\n+\n+struct s2 { int \u00e1; } \u00e9 = { { 0 } }; /* { dg-warning \"braces around scalar initializer\" } */\n+/* { dg-message \"near initialization for '\\\\\\\\U000000e9\\\\.\\\\\\\\U000000e1'\" \"UCN diag\" { target *-*-* } .-1 } */"}, {"sha": "c9371966da5545d6a5c0ee22d64a2c9ef0a9115f", "filename": "gcc/testsuite/gcc.dg/ucnid-9-utf8.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-9-utf8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-9-utf8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-9-utf8.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -0,0 +1,25 @@\n+/* Test __func__ with extended identifiers and character set\n+   conversions.  */\n+/* { dg-do run } */\n+/* { dg-xfail-if \"\" { \"powerpc-ibm-aix*\" } } */\n+/* { dg-skip-if \"\" { ! ucn } } */\n+/* { dg-options \"-std=c99 -fexec-charset=ISO-8859-1 -g\" } */\n+/* { dg-require-iconv \"ISO-8859-1\" } */\n+\n+extern int strcmp (const char *, const char *);\n+extern void abort (void);\n+extern void exit (int);\n+\n+void\n+\u00e9 (void)\n+{\n+  if (strcmp (__func__, \"\u00e9\") != 0)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  \u00e9 ();\n+  exit (0);\n+}"}, {"sha": "0c851952b55df1a2192d0a4a391c0b82ed4b81d8", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -1,3 +1,13 @@\n+2019-09-19  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR c/67224\n+\t* charset.c (_cpp_valid_utf8): New function to help lex UTF-8 tokens.\n+\t* internal.h (_cpp_valid_utf8): Declare.\n+\t* lex.c (forms_identifier_p): Use it to recognize UTF-8 identifiers.\n+\t(_cpp_lex_direct): Handle UTF-8 in identifiers and CPP_OTHER tokens.\n+\tDo all work in \"default\" case to avoid slowing down typical code paths.\n+\tAlso handle $ and UCN in the default case for consistency.\n+\n 2019-08-30  Nathan Sidwell  <nathan@acm.org>\n \n \tNew # semantics for popping to \"\" name."}, {"sha": "10286219bd6d338d1935de84a164b1e5db60f1f8", "filename": "libcpp/charset.c", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -1198,6 +1198,84 @@ convert_ucn (cpp_reader *pfile, const uchar *from, const uchar *limit,\n   return from;\n }\n \n+/*  Performs a similar task as _cpp_valid_ucn, but parses UTF-8-encoded\n+    extended characters rather than UCNs.  If the return value is TRUE, then a\n+    character was successfully decoded and stored in *CP; *PSTR has been\n+    updated to point one past the valid UTF-8 sequence.  Diagnostics may have\n+    been emitted if the character parsed is not allowed in the current context.\n+    If the return value is FALSE, then *PSTR has not been modified and *CP may\n+    equal 0, to indicate that *PSTR does not form a valid UTF-8 sequence, or it\n+    may, when processing an identifier in C mode, equal a codepoint that was\n+    validly encoded but is not allowed to appear in an identifier.  In either\n+    case, no diagnostic is emitted, and the return value of FALSE should cause\n+    a new token to be formed.\n+\n+    Unlike _cpp_valid_ucn, this will never be called when lexing a string; only\n+    a potential identifier, or a CPP_OTHER token.  NST is unused in the latter\n+    case.\n+\n+    As in _cpp_valid_ucn, IDENTIFIER_POS is 0 when not in an identifier, 1 for\n+    the start of an identifier, or 2 otherwise.  */\n+\n+extern bool\n+_cpp_valid_utf8 (cpp_reader *pfile,\n+\t\t const uchar **pstr,\n+\t\t const uchar *limit,\n+\t\t int identifier_pos,\n+\t\t struct normalize_state *nst,\n+\t\t cppchar_t *cp)\n+{\n+  const uchar *base = *pstr;\n+  size_t inbytesleft = limit - base;\n+  if (one_utf8_to_cppchar (pstr, &inbytesleft, cp))\n+    {\n+      /* No diagnostic here as this byte will rather become a\n+\t new token.  */\n+      *cp = 0;\n+      return false;\n+    }\n+\n+  if (identifier_pos)\n+    {\n+      switch (ucn_valid_in_identifier (pfile, *cp, nst))\n+\t{\n+\n+\tcase 0:\n+\t  /* In C++, this is an error for invalid character in an identifier\n+\t     because logically, the UTF-8 was converted to a UCN during\n+\t     translation phase 1 (even though we don't physically do it that\n+\t     way).  In C, this byte rather becomes grammatically a separate\n+\t     token.  */\n+\n+\t  if (CPP_OPTION (pfile, cplusplus))\n+\t    cpp_error (pfile, CPP_DL_ERROR,\n+\t\t       \"extended character %.*s is not valid in an identifier\",\n+\t\t       (int) (*pstr - base), base);\n+\t  else\n+\t    {\n+\t      *pstr = base;\n+\t      return false;\n+\t    }\n+\n+\t  break;\n+\n+\tcase 2:\n+\t  if (identifier_pos == 1)\n+\t    {\n+\t      /* This is treated the same way in C++ or C99 -- lexed as an\n+\t\t identifier which is then invalid because an identifier is\n+\t\t not allowed to start with this character.  */\n+\t      cpp_error (pfile, CPP_DL_ERROR,\n+\t  \"extended character %.*s is not valid at the start of an identifier\",\n+\t\t\t (int) (*pstr - base), base);\n+\t    }\n+\t  break;\n+\t}\n+    }\n+\n+  return true;\n+}\n+\n /* Subroutine of convert_hex and convert_oct.  N is the representation\n    in the execution character set of a numeric escape; write it into the\n    string buffer TBUF and update the end-of-string pointer therein.  WIDE\n@@ -1956,8 +2034,9 @@ cpp_interpret_charconst (cpp_reader *pfile, const cpp_token *token,\n }\n \f\n /* Convert an identifier denoted by ID and LEN, which might contain\n-   UCN escapes, to the source character set, either UTF-8 or\n-   UTF-EBCDIC.  Assumes that the identifier is actually a valid identifier.  */\n+   UCN escapes or UTF-8 multibyte chars, to the source character set,\n+   either UTF-8 or UTF-EBCDIC.  Assumes that the identifier is actually\n+   a valid identifier.  */\n cpp_hashnode *\n _cpp_interpret_identifier (cpp_reader *pfile, const uchar *id, size_t len)\n {"}, {"sha": "90263bde47dd87a74e46752369be03cf328bde83", "filename": "libcpp/internal.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -791,6 +791,14 @@ extern bool _cpp_valid_ucn (cpp_reader *, const unsigned char **,\n \t\t\t    cppchar_t *,\n \t\t\t    source_range *char_range,\n \t\t\t    cpp_string_location_reader *loc_reader);\n+\n+extern bool _cpp_valid_utf8 (cpp_reader *pfile,\n+\t\t\t     const uchar **pstr,\n+\t\t\t     const uchar *limit,\n+\t\t\t     int identifier_pos,\n+\t\t\t     struct normalize_state *nst,\n+\t\t\t     cppchar_t *cp);\n+\n extern void _cpp_destroy_iconv (cpp_reader *);\n extern unsigned char *_cpp_convert_input (cpp_reader *, const char *,\n \t\t\t\t\t  unsigned char *, size_t, size_t,"}, {"sha": "0e8de3807b3c38b18c27255eeea7b5e83f457ba5", "filename": "libcpp/lex.c", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d112d6670a0e0e662f8a7e64c33686e475832c8/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d112d6670a0e0e662f8a7e64c33686e475832c8/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=7d112d6670a0e0e662f8a7e64c33686e475832c8", "patch": "@@ -1313,7 +1313,9 @@ warn_about_normalization (cpp_reader *pfile,\n     }\n }\n \n-/* Returns TRUE if the sequence starting at buffer->cur is invalid in\n+static const cppchar_t utf8_signifier = 0xC0;\n+\n+/* Returns TRUE if the sequence starting at buffer->cur is valid in\n    an identifier.  FIRST is TRUE if this starts an identifier.  */\n static bool\n forms_identifier_p (cpp_reader *pfile, int first,\n@@ -1336,17 +1338,25 @@ forms_identifier_p (cpp_reader *pfile, int first,\n       return true;\n     }\n \n-  /* Is this a syntactically valid UCN?  */\n-  if (CPP_OPTION (pfile, extended_identifiers)\n-      && *buffer->cur == '\\\\'\n-      && (buffer->cur[1] == 'u' || buffer->cur[1] == 'U'))\n+  /* Is this a syntactically valid UCN or a valid UTF-8 char?  */\n+  if (CPP_OPTION (pfile, extended_identifiers))\n     {\n       cppchar_t s;\n-      buffer->cur += 2;\n-      if (_cpp_valid_ucn (pfile, &buffer->cur, buffer->rlimit, 1 + !first,\n-\t\t\t  state, &s, NULL, NULL))\n-\treturn true;\n-      buffer->cur -= 2;\n+      if (*buffer->cur >= utf8_signifier)\n+\t{\n+\t  if (_cpp_valid_utf8 (pfile, &buffer->cur, buffer->rlimit, 1 + !first,\n+\t\t\t       state, &s))\n+\t    return true;\n+\t}\n+      else if (*buffer->cur == '\\\\'\n+\t       && (buffer->cur[1] == 'u' || buffer->cur[1] == 'U'))\n+\t{\n+\t  buffer->cur += 2;\n+\t  if (_cpp_valid_ucn (pfile, &buffer->cur, buffer->rlimit, 1 + !first,\n+\t\t\t      state, &s, NULL, NULL))\n+\t    return true;\n+\t  buffer->cur -= 2;\n+\t}\n     }\n \n   return false;\n@@ -1464,7 +1474,8 @@ lex_identifier (cpp_reader *pfile, const uchar *base, bool starts_ucn,\n   pfile->buffer->cur = cur;\n   if (starts_ucn || forms_identifier_p (pfile, false, nst))\n     {\n-      /* Slower version for identifiers containing UCNs (or $).  */\n+      /* Slower version for identifiers containing UCNs\n+\t or extended chars (including $).  */\n       do {\n \twhile (ISIDNUM (*pfile->buffer->cur))\n \t  {\n@@ -3123,12 +3134,12 @@ _cpp_lex_direct (cpp_reader *pfile)\n       /* @ is a punctuator in Objective-C.  */\n     case '@': result->type = CPP_ATSIGN; break;\n \n-    case '$':\n-    case '\\\\':\n+    default:\n       {\n \tconst uchar *base = --buffer->cur;\n-\tstruct normalize_state nst = INITIAL_NORMALIZE_STATE;\n \n+\t/* Check for an extended identifier ($ or UCN or UTF-8).  */\n+\tstruct normalize_state nst = INITIAL_NORMALIZE_STATE;\n \tif (forms_identifier_p (pfile, true, &nst))\n \t  {\n \t    result->type = CPP_NAME;\n@@ -3137,13 +3148,21 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t    warn_about_normalization (pfile, result, &nst);\n \t    break;\n \t  }\n+\n+\t/* Otherwise this will form a CPP_OTHER token.  Parse valid UTF-8 as a\n+\t   single token.  */\n \tbuffer->cur++;\n+\tif (c >= utf8_signifier)\n+\t  {\n+\t    const uchar *pstr = base;\n+\t    cppchar_t s;\n+\t    if (_cpp_valid_utf8 (pfile, &pstr, buffer->rlimit, 0, NULL, &s))\n+\t      buffer->cur = pstr;\n+\t  }\n+\tcreate_literal (pfile, result, base, buffer->cur - base, CPP_OTHER);\n+\tbreak;\n       }\n-      /* FALLTHRU */\n \n-    default:\n-      create_literal (pfile, result, buffer->cur - 1, 1, CPP_OTHER);\n-      break;\n     }\n \n   /* Potentially convert the location of the token to a range.  */"}]}