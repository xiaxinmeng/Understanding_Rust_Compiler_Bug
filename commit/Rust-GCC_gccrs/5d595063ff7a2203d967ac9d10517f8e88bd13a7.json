{"sha": "5d595063ff7a2203d967ac9d10517f8e88bd13a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1OTUwNjNmZjdhMjIwM2Q5NjdhYzlkMTA1MTdmOGU4OGJkMTNhNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-21T20:30:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-21T20:30:16Z"}, "message": "(fold_rtx, case PLUS): When seeing if negative of constant is around,\n\nmake sure not dealing with largest negative.\n\nFrom-SVN: r13953", "tree": {"sha": "deb5b044b7ebfc328a26581631c3e0f1e5c47db2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deb5b044b7ebfc328a26581631c3e0f1e5c47db2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d595063ff7a2203d967ac9d10517f8e88bd13a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d595063ff7a2203d967ac9d10517f8e88bd13a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d595063ff7a2203d967ac9d10517f8e88bd13a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d595063ff7a2203d967ac9d10517f8e88bd13a7/comments", "author": null, "committer": null, "parents": [{"sha": "9ee3c6873784cc2f98e2fbdc55293dd76423aefa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee3c6873784cc2f98e2fbdc55293dd76423aefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee3c6873784cc2f98e2fbdc55293dd76423aefa"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "260da29e2d0cdd5ce6329333450bb95b798b5fad", "filename": "gcc/cse.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d595063ff7a2203d967ac9d10517f8e88bd13a7/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d595063ff7a2203d967ac9d10517f8e88bd13a7/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=5d595063ff7a2203d967ac9d10517f8e88bd13a7", "patch": "@@ -5581,11 +5581,17 @@ fold_rtx (x, insn)\n \t  /* If second operand is a register equivalent to a negative\n \t     CONST_INT, see if we can find a register equivalent to the\n \t     positive constant.  Make a MINUS if so.  Don't do this for\n-\t     a negative constant since we might then alternate between\n+\t     a non-negative constant since we might then alternate between\n \t     chosing positive and negative constants.  Having the positive\n-\t     constant previously-used is the more common case.  */\n-\t  if (const_arg1 && GET_CODE (const_arg1) == CONST_INT\n-\t      && INTVAL (const_arg1) < 0 && GET_CODE (folded_arg1) == REG)\n+\t     constant previously-used is the more common case.  Be sure\n+\t     the resulting constant is non-negative; if const_arg1 were\n+\t     the smallest negative number this would overflow: depending\n+\t     on the mode, this would either just be the same value (and\n+\t     hence not save anything) or be incorrect.  */\n+\t  if (const_arg1 != 0 && GET_CODE (const_arg1) == CONST_INT\n+\t      && INTVAL (const_arg1) < 0\n+\t      && - INTVAL (const_arg1) >= 0\n+\t      && GET_CODE (folded_arg1) == REG)\n \t    {\n \t      rtx new_const = GEN_INT (- INTVAL (const_arg1));\n \t      struct table_elt *p"}]}