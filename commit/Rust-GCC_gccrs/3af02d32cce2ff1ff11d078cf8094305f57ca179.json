{"sha": "3af02d32cce2ff1ff11d078cf8094305f57ca179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmMDJkMzJjY2UyZmYxZmYxMWQwNzhjZjgwOTQzMDVmNTdjYTE3OQ==", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2020-12-18T16:26:34Z"}, "committer": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2020-12-18T16:38:30Z"}, "message": "openmp: Implicitly add 'declare target' directives for dynamic initializers in C++\n\n2020-12-18  Kwok Cheung Yeung  <kcy@codesourcery.com>\n\n\tgcc/\n\t* langhooks-def.h (lhd_get_decl_init): New.\n\t(lhd_finish_decl_inits): New.\n\t(LANG_HOOKS_GET_DECL_INIT): New.\n\t(LANG_HOOKS_OMP_FINISH_DECL_INITS): New.\n\t(LANG_HOOKS_DECLS): Add LANG_HOOKS_GET_DECL_INIT and\n\tLANG_HOOKS_OMP_FINISH_DECL_INITS.\n\t* langhooks.c (lhd_omp_get_decl_init): New.\n\t(lhd_omp_finish_decl_inits): New.\n\t* langhooks.h (struct lang_hooks_for_decls): Add omp_get_decl_init\n\tand omp_finish_decl_inits.\n\t* omp-offload.c (omp_discover_declare_target_var_r): Use\n\tget_decl_init langhook in place of DECL_INITIAL.  Call\n\tomp_finish_decl_inits langhook at end of function.\n\n\tgcc/cp/\n\t* cp-lang.c (cxx_get_decl_init): New.\n\t(cxx_omp_finish_decl_inits): New.\n\t(LANG_HOOKS_GET_DECL_INIT): New.\n\t(LANG_HOOKS_OMP_FINISH_DECL_INITS): New.\n\t* cp-tree.h (dynamic_initializers): New.\n\t* decl.c (dynamic_initializers): New.\n\t* decl2.c (c_parse_final_cleanups): Add initializer entries\n\tfrom vars to dynamic_initializers.\n\n\tgcc/testsuite/\n\t* g++.dg/gomp/declare-target-3.C: New.", "tree": {"sha": "a9affc2bf477cd04d393cc9b5aa6392b54074a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9affc2bf477cd04d393cc9b5aa6392b54074a42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af02d32cce2ff1ff11d078cf8094305f57ca179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af02d32cce2ff1ff11d078cf8094305f57ca179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af02d32cce2ff1ff11d078cf8094305f57ca179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af02d32cce2ff1ff11d078cf8094305f57ca179/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ff5706fcd732b671afb2d308e8dab7e23050823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff5706fcd732b671afb2d308e8dab7e23050823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff5706fcd732b671afb2d308e8dab7e23050823"}], "stats": {"total": 123, "additions": 118, "deletions": 5}, "files": [{"sha": "0c3be0f5e77cddefad1840f8d14056e0675f3af8", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=3af02d32cce2ff1ff11d078cf8094305f57ca179", "patch": "@@ -34,6 +34,8 @@ static tree cp_eh_personality (void);\n static tree get_template_innermost_arguments_folded (const_tree);\n static tree get_template_argument_pack_elems_folded (const_tree);\n static tree cxx_enum_underlying_base_type (const_tree);\n+static tree *cxx_omp_get_decl_init (tree);\n+static void cxx_omp_finish_decl_inits (void);\n \n /* Lang hooks common to C++ and ObjC++ are declared in cp/cp-objcp-common.h;\n    consequently, there should be very few hooks below.  */\n@@ -92,6 +94,12 @@ static tree cxx_enum_underlying_base_type (const_tree);\n #undef LANG_HOOKS_GET_SUBSTRING_LOCATION\n #define LANG_HOOKS_GET_SUBSTRING_LOCATION c_get_substring_location\n \n+#undef LANG_HOOKS_OMP_GET_DECL_INIT\n+#define LANG_HOOKS_OMP_GET_DECL_INIT cxx_omp_get_decl_init\n+\n+#undef LANG_HOOKS_OMP_FINISH_DECL_INITS\n+#define LANG_HOOKS_OMP_FINISH_DECL_INITS cxx_omp_finish_decl_inits\n+\n /* Each front end provides its own lang hook initializer.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n@@ -233,6 +241,30 @@ tree cxx_enum_underlying_base_type (const_tree type)\n   return underlying_type;\n }\n \n+/* The C++ version of the omp_get_decl_init langhook returns the static\n+   initializer for a variable declaration if present, otherwise it\n+   tries to find and return the dynamic initializer.  If not present,\n+   it returns NULL.  */\n+\n+static tree *\n+cxx_omp_get_decl_init (tree decl)\n+{\n+  if (DECL_INITIAL (decl))\n+    return &DECL_INITIAL (decl);\n+\n+  return hash_map_safe_get (dynamic_initializers, decl);\n+}\n+\n+/* The C++ version of the omp_finish_decl_inits langhook allows GC to\n+   reclaim the memory used by the hash-map used to hold dynamic initializer\n+   information.  */\n+\n+static void\n+cxx_omp_finish_decl_inits (void)\n+{\n+  dynamic_initializers = NULL;\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "6cce9e2b4077337d08130e000ca28f963227989a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3af02d32cce2ff1ff11d078cf8094305f57ca179", "patch": "@@ -5631,6 +5631,10 @@ extern GTY(()) tree static_aggregates;\n /* Likewise, for thread local storage.  */\n extern GTY(()) tree tls_aggregates;\n \n+/* A hash-map mapping from variable decls to the dynamic initializer for\n+   the decl.  This is currently only used by OpenMP.  */\n+extern GTY(()) decl_tree_map *dynamic_initializers;\n+\n enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n \n /* These are uses as bits in flags passed to various functions to"}, {"sha": "8e6366797cb5787dc4234d2c223f912d312d6cdc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3af02d32cce2ff1ff11d078cf8094305f57ca179", "patch": "@@ -146,6 +146,10 @@ tree static_aggregates;\n /* Like static_aggregates, but for thread_local variables.  */\n tree tls_aggregates;\n \n+/* A hash-map mapping from variable decls to the dynamic initializer for\n+   the decl.  This is currently only used by OpenMP.  */\n+decl_tree_map *dynamic_initializers;\n+\n /* -- end of C++ */\n \n /* A node for the integer constant 2.  */"}, {"sha": "af88e7f5cab420894e0005ccd44ccf768959f223", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3af02d32cce2ff1ff11d078cf8094305f57ca179", "patch": "@@ -5006,6 +5006,13 @@ c_parse_final_cleanups (void)\n \t loop.  */\n       if (tree vars = prune_vars_needing_no_initialization (&static_aggregates))\n \t{\n+\t  if (flag_openmp)\n+\t    /* Add initializer information from VARS into\n+\t       DYNAMIC_INITIALIZERS.  */\n+\t    for (t = vars; t; t = TREE_CHAIN (t))\n+\t      hash_map_safe_put<hm_ggc> (dynamic_initializers,\n+\t\t\t\t\t TREE_VALUE (t), TREE_PURPOSE (t));\n+\n \t  /* We need to start a new initialization function each time\n \t     through the loop.  That's because we need to know which\n \t     vtables have been referenced, and TREE_SYMBOL_REFERENCED"}, {"sha": "c670b77161c06a1c529bae58e5782b8e130674f1", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=3af02d32cce2ff1ff11d078cf8094305f57ca179", "patch": "@@ -87,6 +87,8 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n \t\t\t\t\t       tree);\n extern bool lhd_omp_mappable_type (tree);\n extern bool lhd_omp_scalar_p (tree);\n+extern tree *lhd_omp_get_decl_init (tree);\n+extern void lhd_omp_finish_decl_inits ();\n \n extern const char *lhd_get_substring_location (const substring_loc &,\n \t\t\t\t\t       location_t *out_loc);\n@@ -265,6 +267,8 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n #define LANG_HOOKS_OMP_CLAUSE_DTOR hook_tree_tree_tree_null\n #define LANG_HOOKS_OMP_FINISH_CLAUSE lhd_omp_finish_clause\n #define LANG_HOOKS_OMP_SCALAR_P lhd_omp_scalar_p\n+#define LANG_HOOKS_OMP_GET_DECL_INIT lhd_omp_get_decl_init\n+#define LANG_HOOKS_OMP_FINISH_DECL_INITS lhd_omp_finish_decl_inits\n \n #define LANG_HOOKS_DECLS { \\\n   LANG_HOOKS_GLOBAL_BINDINGS_P, \\\n@@ -293,7 +297,9 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n   LANG_HOOKS_OMP_CLAUSE_LINEAR_CTOR, \\\n   LANG_HOOKS_OMP_CLAUSE_DTOR, \\\n   LANG_HOOKS_OMP_FINISH_CLAUSE, \\\n-  LANG_HOOKS_OMP_SCALAR_P \\\n+  LANG_HOOKS_OMP_SCALAR_P, \\\n+  LANG_HOOKS_OMP_GET_DECL_INIT, \\\n+  LANG_HOOKS_OMP_FINISH_DECL_INITS \\\n }\n \n /* LTO hooks.  */"}, {"sha": "23cbf066241b48b480e9fe64d5fe666b04a4421f", "filename": "gcc/langhooks.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=3af02d32cce2ff1ff11d078cf8094305f57ca179", "patch": "@@ -632,6 +632,22 @@ lhd_omp_scalar_p (tree decl)\n   return false;\n }\n \n+/* Return static initializer for DECL.  */\n+\n+tree *\n+lhd_omp_get_decl_init (tree decl)\n+{\n+  return &DECL_INITIAL (decl);\n+}\n+\n+/* Free any extra memory used to hold initializer information for\n+   variable declarations.  */\n+\n+void\n+lhd_omp_finish_decl_inits (void)\n+{\n+}\n+\n /* Register language specific type size variables as potentially OpenMP\n    firstprivate variables.  */\n "}, {"sha": "235ce991c10b9863928c120d7ee1ca1a588e12ea", "filename": "gcc/langhooks.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=3af02d32cce2ff1ff11d078cf8094305f57ca179", "patch": "@@ -299,6 +299,16 @@ struct lang_hooks_for_decls\n   /* Return true if DECL is a scalar variable (for the purpose of\n      implicit firstprivatization).  */\n   bool (*omp_scalar_p) (tree decl);\n+\n+  /* Return a pointer to the tree representing the initializer\n+     expression for the non-local variable DECL.  Return NULL if\n+     DECL is not initialized.  */\n+  tree *(*omp_get_decl_init) (tree decl);\n+\n+  /* Free any extra memory used to hold initializer information for\n+     variable declarations.  omp_get_decl_init must not be called\n+     after calling this.  */\n+  void (*omp_finish_decl_inits) (void);\n };\n \n /* Language hooks related to LTO serialization.  */"}, {"sha": "15b735b7e40d8974e7a1754c88cc24bbb2f260b3", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=3af02d32cce2ff1ff11d078cf8094305f57ca179", "patch": "@@ -315,7 +315,7 @@ omp_discover_declare_target_var_r (tree *tp, int *walk_subtrees, void *data)\n \t  DECL_ATTRIBUTES (*tp)\n \t    = remove_attribute (\"omp declare target link\", DECL_ATTRIBUTES (*tp));\n \t}\n-      if (TREE_STATIC (*tp) && DECL_INITIAL (*tp))\n+      if (TREE_STATIC (*tp) && lang_hooks.decls.omp_get_decl_init (*tp))\n \t((vec<tree> *) data)->safe_push (*tp);\n       DECL_ATTRIBUTES (*tp) = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (*tp));\n       symtab_node *node = symtab_node::get (*tp);\n@@ -361,14 +361,15 @@ omp_discover_implicit_declare_target (void)\n \t\t   && DECL_STRUCT_FUNCTION (cgn->decl)->has_omp_target)\n \t    worklist.safe_push (cgn->decl);\n       }\n-  FOR_EACH_STATIC_INITIALIZER (vnode)\n-    if (omp_declare_target_var_p (vnode->decl))\n+  FOR_EACH_VARIABLE (vnode)\n+    if (lang_hooks.decls.omp_get_decl_init (vnode->decl)\n+\t&& omp_declare_target_var_p (vnode->decl))\n       worklist.safe_push (vnode->decl);\n   while (!worklist.is_empty ())\n     {\n       tree decl = worklist.pop ();\n       if (VAR_P (decl))\n-\twalk_tree_without_duplicates (&DECL_INITIAL (decl),\n+\twalk_tree_without_duplicates (lang_hooks.decls.omp_get_decl_init (decl),\n \t\t\t\t      omp_discover_declare_target_var_r,\n \t\t\t\t      &worklist);\n       else if (omp_declare_target_fn_p (decl))\n@@ -380,6 +381,8 @@ omp_discover_implicit_declare_target (void)\n \t\t\t\t      omp_discover_declare_target_fn_r,\n \t\t\t\t      &worklist);\n     }\n+\n+  lang_hooks.decls.omp_finish_decl_inits ();\n }\n \n "}, {"sha": "d2dedaf21ab06699e59c3e7d5634f12ed7eab171", "filename": "gcc/testsuite/g++.dg/gomp/declare-target-3.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-target-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af02d32cce2ff1ff11d078cf8094305f57ca179/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-target-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-target-3.C?ref=3af02d32cce2ff1ff11d078cf8094305f57ca179", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+\n+// Test implicit marking of declare target to.\n+\n+int foo () { return 1; }\n+int bar () { return 2; }\t// Implicitly marked (due to b)\n+int baz () { return 3; }\t// Implicitly marked (due to d via c)\n+int qux () { return 4; }\t// Implicitly marked (due to g via f and e)\n+\n+int a = foo ();\n+int b = bar ();\t// Explicitly marked\n+int c = baz ();\t// Implicitly marked (due to d)\n+int *d = &c;\t// Explicitly marked\n+int e = qux ();\t// Implicitly marked (due to g via f)\n+int f = e + 1;\t// Implicitly marked (due to g)\n+int *g = &f;\t// Explicitly marked\n+\n+#pragma omp declare target to(b, d, g)\n+\n+// { dg-final { scan-tree-dump-not \"__attribute__\\\\\\(\\\\\\(omp declare target\\\\\\)\\\\\\)\\\\\\nint foo \\\\\\(\\\\\\)\" \"gimple\" } }\n+// { dg-final { scan-tree-dump \"__attribute__\\\\\\(\\\\\\(omp declare target\\\\\\)\\\\\\)\\\\\\nint bar \\\\\\(\\\\\\)\" \"gimple\" } }\n+// { dg-final { scan-tree-dump \"__attribute__\\\\\\(\\\\\\(omp declare target\\\\\\)\\\\\\)\\\\\\nint baz \\\\\\(\\\\\\)\" \"gimple\" } }\n+// { dg-final { scan-tree-dump \"__attribute__\\\\\\(\\\\\\(omp declare target\\\\\\)\\\\\\)\\\\\\nint qux \\\\\\(\\\\\\)\" \"gimple\" } }\n+// { dg-final { scan-assembler-not \"\\\\\\.offload_var_table:\\\\n.+\\\\\\.quad\\\\s+a\" } }\n+// { dg-final { scan-assembler \"\\\\\\.offload_var_table:\\\\n.+\\\\\\.quad\\\\s+b\" } }\n+// { dg-final { scan-assembler \"\\\\\\.offload_var_table:\\\\n.+\\\\\\.quad\\\\s+c\" } }\n+// { dg-final { scan-assembler \"\\\\\\.offload_var_table:\\\\n.+\\\\\\.quad\\\\s+d\" } }\n+// { dg-final { scan-assembler \"\\\\\\.offload_var_table:\\\\n.+\\\\\\.quad\\\\s+e\" } }\n+// { dg-final { scan-assembler \"\\\\\\.offload_var_table:\\\\n.+\\\\\\.quad\\\\s+f\" } }\n+// { dg-final { scan-assembler \"\\\\\\.offload_var_table:\\\\n.+\\\\\\.quad\\\\s+g\" } }"}]}