{"sha": "ab621f4ada197ec99f0b9673271c7accaa7925da", "node_id": "C_kwDOANBUbNoAKGFiNjIxZjRhZGExOTdlYzk5ZjBiOTY3MzI3MWM3YWNjYWE3OTI1ZGE", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2021-07-23T19:00:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-22T15:01:48Z"}, "message": "[Ada] VxWorks inconsistent use of return type (STATUS)\n\ngcc/ada/\n\n\t* libgnarl/s-interr__vxworks.adb (Interfaces.C): Remove as\n\tunused.\n\t(System.VxWorks.Ext): Import.\n\t(System.VxWorks.Ext.STATUS): use type.\n\t(STATUS): New subtype.\n\t(OK): New constant.\n\t(Interrupt_Connector): Return STATUS type vice int.\n\t(Interrupt_Connect, Notify_Interrupt, Unbind_Handler,\n\tInterrupt_Server_Task): Rename Status to Result. Assert Result =\n\tOK.\n\t* libgnarl/s-osinte__vxworks.adb (To_Clock_Ticks): Define constant\n\tIERR, and return it vice ERROR.\n\t(Binary_Semaphore_Delete): Return STATUS type vice int.\n\t(Binary_Semaphore_Obtain): Likewise.\n\t(Binary_Semaphore_Release): Likewise.\n\t(Binary_Semaphore_Flush): Likewise.\n\t* libgnarl/s-osinte__vxworks.ads (SVE): Renaming of\n\tSystem.VxWorks.Ext.\n\t(STATUS): Use SVE in declaration of subtype.\n\t(BOOL): Likewise.\n\t(vx_freq_t): Likewise.\n\t(t_id): Likewise.\n\t(gitpid): Use SVE in renaming of subprogram\n\t(Task_Stop): Likewise.\n\t(Task_Cont): Likewise.\n\t(Int_Lock): Likewise.\n\t(Int_Unlock): Likewise.\n\t(Set_Time_Slice): Likewise.\n\t(semDelete): Likewise.\n\t(taskCpuAffinitySet): Likewise.\n\t(taskMaskAffinitySet): Likewise.\n\t(sigset_t): Use SVE in declaration of type.\n\t(OK): Remove as unused.\n\t(ERROR): Likewise.\n\t(taskOptionsGet): return STATUS vice int.\n\t(taskSuspend): Likewise.\n\t(taskResume): Likewise.\n\t(taskDelay): Likewise.\n\t(taskVarAdd): Likewise.\n\t(taskVarDelete): Likewise.\n\t(taskVarSet): Likewise.\n\t(tlkKeyCreate): Likewise.\n\t(taskPrioritySet): Likewise.\n\t(semGive): Likewise.\n\t(semTake): Likewise.\n\t(Binary_Semaphore_Delete): Likewise.\n\t(Binary_Semaphore_Obtain): Likewise.\n\t(Binary_Semaphore_Release): Likewise.\n\t(Binary_Semaphore_Flush): Likewise.\n\t(Interrupt_Connect): Likewise.\n\t* libgnarl/s-taprop__vxworks.adb\n\t(System.VxWorks.Ext.STATUS): use type.\n\t(int): Syntactically align subtype.\n\t(STATUS): New subtype.\n\t(OK): New constant.\n\t(Finalize_Lock): Check STATUS vice int. Assert OK.\n\t(Finalize_Lock): Likewise.\n\t(Write_Lock): Likewise.\n\t(Write_Lock): Likewise.\n\t(Write_Lock): Likewise.\n\t(Unlock): Likewise.\n\t(Unlock): Likewise.\n\t(Unlock): Likewise.\n\t(Unlock): Likewise.\n\t(Sleep): Likewise.\n\t(Sleep): Likewise.\n\t(Sleep): Likewise.\n\t(Timed_Sleep): Likewise and test Result.\n\t(Timed_Delay): Likewise and test Result.\n\t(Wakeup): Likewise.\n\t(Yield): Likewise.\n\t(Finalize_TCB): Likewise.\n\t(Suspend_Until_True): Check OK.\n\t(Stop_All_Tasks): Declare Dummy STATUS vice in.  Check OK.\n\t(Is_Task_Context): Use OSI renaming.\n\t(Initialize): Use STATUS vice int.\n\t* libgnarl/s-vxwext.adb\n\t(IERR): Renamed from ERROR.\n\t(taskCpuAffinitySet): Return IERR (int).\n\t(taskMaskAffinitySet): Likewise.\n\t* libgnarl/s-vxwext.ads\n\t(STATUS): New subtype.\n\t(OK): New STATUS constant.\n\t(ERROR): Likewise.\n\t* libgnarl/s-vxwext__kernel-smp.adb\n\t(IERR): Renamed from ERROR.\n\t(Int_Lock): Return IERR.\n\t(semDelete): Return STATUS.\n\t(Task_Cont): Likewise.\n\t(Task_Stop): Likewise.\n\t* libgnarl/s-vxwext__kernel.adb\n\t(IERR): Renamed from ERROR.\n\t(semDelete): Return STATUS.\n\t(Task_Cont): Likewise.\n\t(Task_Stop): Likewise.\n\t(taskCpuAffinitySet): Return IERR (int)\n\t(taskMaskAffinitySet): Likewise.\n\t* libgnarl/s-vxwext__kernel.ads\n\t(STATUS): New subtype.\n\t(OK): New STATUS constant.\n\t(ERROR): Likewise.\n\t(Interrupt_Connect): Return STATUS\n\t(semDelete): Likewise.\n\t(Task_Cont): Likewise.\n\t(Task_Stop): Likewise.\n\t(Set_Time_Slice): Likewise.\n\t* libgnarl/s-vxwext__rtp-smp.adb\n\t(IERR): Renamed from ERROR.\n\t(Int_Lock): return IERR constant vice ERROR.\n\t(Interrupt_Connect): Return STATUS.\n\t(semDelete): Likewise.\n\t(Set_Time_Slice): Likewise.\n\t* libgnarl/s-vxwext__rtp.adb\n\t(IERR): Renamed from ERROR.\n\t(Int_Lock): return IERR constant vice ERROR.\n\t(Int_Unlock): Return STATUS.\n\t(semDelete): Likewise.\n\t(Set_Time_Slice): Likewise.\n\t(taskCpuAffinitySet): Return IERR (int)\n\t(taskMaskAffinitySet): Likewise.\n\t* libgnarl/s-vxwext__rtp.ads\n\t(STATUS): New subtype.\n\t(OK): New STATUS constant.\n\t(ERROR): Likewise.\n\t(Interrupt_Connect): Return STATUS\n\t(semDelete): Likewise.\n\t(Task_Cont): Likewise.\n\t(Task_Stop): Likewise.\n\t(Set_Time_Slice): Likewise.", "tree": {"sha": "f6f21f048efd94c0cc0b9683bb12e207c566be55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6f21f048efd94c0cc0b9683bb12e207c566be55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab621f4ada197ec99f0b9673271c7accaa7925da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab621f4ada197ec99f0b9673271c7accaa7925da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab621f4ada197ec99f0b9673271c7accaa7925da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab621f4ada197ec99f0b9673271c7accaa7925da/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d2226f1730e027808b8f9c17d4f6b7ac1eb7c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2226f1730e027808b8f9c17d4f6b7ac1eb7c44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d2226f1730e027808b8f9c17d4f6b7ac1eb7c44"}], "stats": {"total": 329, "additions": 177, "deletions": 152}, "files": [{"sha": "db2ca95c83b807f522f1647037f1a8f915a43c0d", "filename": "gcc/ada/libgnarl/s-interr__vxworks.adb", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-interr__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-interr__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-interr__vxworks.adb?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -66,7 +66,6 @@\n with Ada.Unchecked_Conversion;\n with Ada.Task_Identification;\n \n-with Interfaces.C; use Interfaces.C;\n with System.OS_Interface; use System.OS_Interface;\n with System.Interrupt_Management;\n with System.Task_Primitives.Operations;\n@@ -76,12 +75,18 @@ with System.Tasking.Utilities;\n with System.Tasking.Rendezvous;\n pragma Elaborate_All (System.Tasking.Rendezvous);\n \n+with System.VxWorks.Ext;\n+\n package body System.Interrupts is\n \n    use Tasking;\n \n    package POP renames System.Task_Primitives.Operations;\n \n+   use type System.VxWorks.Ext.STATUS;\n+   subtype STATUS is System.VxWorks.Ext.STATUS;\n+   OK : constant STATUS := System.VxWorks.Ext.OK;\n+\n    function To_Ada is new Ada.Unchecked_Conversion\n      (System.Tasking.Task_Id, Ada.Task_Identification.Task_Id);\n \n@@ -199,7 +204,7 @@ package body System.Interrupts is\n    type Interrupt_Connector is access function\n      (Vector    : Interrupt_Vector;\n       Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int;\n+      Parameter : System.Address := System.Null_Address) return STATUS;\n    --  Profile must match VxWorks intConnect()\n \n    Interrupt_Connect : Interrupt_Connector :=\n@@ -515,7 +520,7 @@ package body System.Interrupts is\n       Vec : constant Interrupt_Vector :=\n               Interrupt_Number_To_Vector (int (Interrupt));\n \n-      Status : int;\n+      Result : STATUS;\n \n    begin\n       --  Only install umbrella handler when no Ada handler has already been\n@@ -525,9 +530,9 @@ package body System.Interrupts is\n       --  number.\n \n       if not Handler_Installed (Interrupt) then\n-         Status :=\n+         Result :=\n            Interrupt_Connect.all (Vec, Handler, System.Address (Interrupt));\n-         pragma Assert (Status = 0);\n+         pragma Assert (Result = OK);\n \n          Handler_Installed (Interrupt) := True;\n       end if;\n@@ -646,11 +651,11 @@ package body System.Interrupts is\n    procedure Notify_Interrupt (Param : System.Address) is\n       Interrupt : constant Interrupt_ID := Interrupt_ID (Param);\n       Id        : constant Binary_Semaphore_Id := Semaphore_ID_Map (Interrupt);\n-      Status    : int;\n+      Result    : STATUS;\n    begin\n       if Id /= 0 then\n-         Status := Binary_Semaphore_Release (Id);\n-         pragma Assert (Status = 0);\n+         Result := Binary_Semaphore_Release (Id);\n+         pragma Assert (Result = OK);\n       end if;\n    end Notify_Interrupt;\n \n@@ -787,13 +792,13 @@ package body System.Interrupts is\n       --------------------\n \n       procedure Unbind_Handler (Interrupt : Interrupt_ID) is\n-         Status : int;\n+         Result : STATUS;\n \n       begin\n          --  Flush server task off semaphore, allowing it to terminate\n \n-         Status := Binary_Semaphore_Flush (Semaphore_ID_Map (Interrupt));\n-         pragma Assert (Status = 0);\n+         Result := Binary_Semaphore_Flush (Semaphore_ID_Map (Interrupt));\n+         pragma Assert (Result = OK);\n       end Unbind_Handler;\n \n       --------------------------------\n@@ -1067,7 +1072,7 @@ package body System.Interrupts is\n       Tmp_Handler     : Parameterless_Handler;\n       Tmp_ID          : Task_Id;\n       Tmp_Entry_Index : Task_Entry_Index;\n-      Status          : int;\n+      Result          : STATUS;\n \n    begin\n       Semaphore_ID_Map (Interrupt) := Int_Sema;\n@@ -1076,8 +1081,8 @@ package body System.Interrupts is\n          --  Pend on semaphore that will be triggered by the umbrella handler\n          --  when the associated interrupt comes in.\n \n-         Status := Binary_Semaphore_Obtain (Int_Sema);\n-         pragma Assert (Status = 0);\n+         Result := Binary_Semaphore_Obtain (Int_Sema);\n+         pragma Assert (Result = OK);\n \n          if User_Handler (Interrupt).H /= null then\n \n@@ -1109,9 +1114,9 @@ package body System.Interrupts is\n \n             --  Delete the associated semaphore\n \n-            Status := Binary_Semaphore_Delete (Int_Sema);\n+            Result := Binary_Semaphore_Delete (Int_Sema);\n \n-            pragma Assert (Status = 0);\n+            pragma Assert (Result = OK);\n \n             --  Set status for the Interrupt_Manager\n "}, {"sha": "fbc836727cd591457529b048076fddb83558766f", "filename": "gcc/ada/libgnarl/s-osinte__vxworks.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-osinte__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-osinte__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__vxworks.adb?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -100,10 +100,11 @@ package body System.OS_Interface is\n       Ticks          : Long_Long_Integer;\n       Rate_Duration  : Duration;\n       Ticks_Duration : Duration;\n+      IERR           : constant int := -1;\n \n    begin\n       if D < 0.0 then\n-         return ERROR;\n+         return IERR;\n       end if;\n \n       --  Ensure that the duration can be converted to ticks\n@@ -142,7 +143,8 @@ package body System.OS_Interface is\n    -- Binary_Semaphore_Delete --\n    -----------------------------\n \n-   function Binary_Semaphore_Delete (ID : Binary_Semaphore_Id) return int is\n+   function Binary_Semaphore_Delete (ID : Binary_Semaphore_Id)\n+     return STATUS is\n    begin\n       return semDelete (SEM_ID (ID));\n    end Binary_Semaphore_Delete;\n@@ -151,7 +153,8 @@ package body System.OS_Interface is\n    -- Binary_Semaphore_Obtain --\n    -----------------------------\n \n-   function Binary_Semaphore_Obtain (ID : Binary_Semaphore_Id) return int is\n+   function Binary_Semaphore_Obtain (ID : Binary_Semaphore_Id)\n+     return STATUS is\n    begin\n       return semTake (SEM_ID (ID), WAIT_FOREVER);\n    end Binary_Semaphore_Obtain;\n@@ -160,7 +163,8 @@ package body System.OS_Interface is\n    -- Binary_Semaphore_Release --\n    ------------------------------\n \n-   function Binary_Semaphore_Release (ID : Binary_Semaphore_Id) return int is\n+   function Binary_Semaphore_Release (ID : Binary_Semaphore_Id)\n+     return STATUS is\n    begin\n       return semGive (SEM_ID (ID));\n    end Binary_Semaphore_Release;\n@@ -169,7 +173,7 @@ package body System.OS_Interface is\n    -- Binary_Semaphore_Flush --\n    ----------------------------\n \n-   function Binary_Semaphore_Flush (ID : Binary_Semaphore_Id) return int is\n+   function Binary_Semaphore_Flush (ID : Binary_Semaphore_Id) return STATUS is\n    begin\n       return semFlush (SEM_ID (ID));\n    end Binary_Semaphore_Flush;\n@@ -190,7 +194,7 @@ package body System.OS_Interface is\n    function Interrupt_Connect\n      (Vector    : Interrupt_Vector;\n       Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int is\n+      Parameter : System.Address := System.Null_Address) return STATUS is\n    begin\n       return\n         System.VxWorks.Ext.Interrupt_Connect"}, {"sha": "a63b9223d6aba8240bcc7ab2ef0e45187f10bbac", "filename": "gcc/ada/libgnarl/s-osinte__vxworks.ads", "status": "modified", "additions": 35, "deletions": 41, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-osinte__vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-osinte__vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__vxworks.ads?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -47,6 +47,8 @@ with System.Parameters;\n package System.OS_Interface is\n    pragma Preelaborate;\n \n+   package SVE renames System.VxWorks.Ext;\n+\n    subtype int             is Interfaces.C.int;\n    subtype unsigned        is Interfaces.C.unsigned;\n    subtype short           is Short_Integer;\n@@ -57,8 +59,9 @@ package System.OS_Interface is\n    type unsigned_long_long is mod 2 ** long_long'Size;\n    type size_t             is mod 2 ** Standard'Address_Size;\n \n-   subtype BOOL            is System.VxWorks.Ext.BOOL;\n-   subtype vx_freq_t       is System.VxWorks.Ext.vx_freq_t;\n+   subtype STATUS    is SVE.STATUS;\n+   subtype BOOL      is SVE.BOOL;\n+   subtype vx_freq_t is SVE.vx_freq_t;\n \n    -----------\n    -- Errno --\n@@ -204,7 +207,7 @@ package System.OS_Interface is\n       oset : access sigset_t) return int;\n    pragma Import (C, pthread_sigmask, \"sigprocmask\");\n \n-   subtype t_id is System.VxWorks.Ext.t_id;\n+   subtype t_id is SVE.t_id;\n    subtype Thread_Id is t_id;\n    --  Thread_Id and t_id are VxWorks identifiers for tasks. This value,\n    --  although represented as a Long_Integer, is in fact an address. With\n@@ -214,26 +217,24 @@ package System.OS_Interface is\n    function kill (pid : t_id; sig : Signal) return int;\n    pragma Inline (kill);\n \n-   function getpid return t_id renames System.VxWorks.Ext.getpid;\n+   function getpid return t_id renames SVE.getpid;\n \n-   function Task_Stop (tid : t_id) return int\n-     renames System.VxWorks.Ext.Task_Stop;\n+   function Task_Stop (tid : t_id) return STATUS renames SVE.Task_Stop;\n    --  If we are in the kernel space, stop the task whose t_id is given in\n    --  parameter in such a way that it can be examined by the debugger. This\n    --  typically maps to taskSuspend on VxWorks 5 and to taskStop on VxWorks 6.\n \n-   function Task_Cont (tid : t_id) return int\n-     renames System.VxWorks.Ext.Task_Cont;\n+   function Task_Cont (tid : t_id) return STATUS renames SVE.Task_Cont;\n    --  If we are in the kernel space, continue the task whose t_id is given\n    --  in parameter if it has been stopped previously to be examined by the\n    --  debugger (e.g. by taskStop). It typically maps to taskResume on VxWorks\n    --  5 and to taskCont on VxWorks 6.\n \n-   function Int_Lock return int renames System.VxWorks.Ext.Int_Lock;\n+   function Int_Lock return int renames SVE.Int_Lock;\n    --  If we are in the kernel space, lock interrupts. It typically maps to\n    --  intLock.\n \n-   procedure Int_Unlock (Old : int) renames System.VxWorks.Ext.Int_Unlock;\n+   procedure Int_Unlock (Old : int) renames SVE.Int_Unlock;\n    --  If we are in the kernel space, unlock interrupts. It typically maps to\n    --  intUnlock. The parameter Old is only used on PowerPC where it contains\n    --  the returned value from Int_Lock (the old MPSR).\n@@ -287,31 +288,25 @@ package System.OS_Interface is\n    -- VxWorks specific API --\n    --------------------------\n \n-   subtype STATUS is int;\n-   --  Equivalent of the C type STATUS\n-\n-   OK    : constant STATUS := 0;\n-   ERROR : constant STATUS := Interfaces.C.int (-1);\n-\n    function taskIdVerify (tid : t_id) return STATUS;\n    pragma Import (C, taskIdVerify, \"taskIdVerify\");\n \n    function taskIdSelf return t_id;\n    pragma Import (C, taskIdSelf, \"taskIdSelf\");\n \n-   function taskOptionsGet (tid : t_id; pOptions : access int) return int;\n+   function taskOptionsGet (tid : t_id; pOptions : access int) return STATUS;\n    pragma Import (C, taskOptionsGet, \"taskOptionsGet\");\n \n-   function taskSuspend (tid : t_id) return int;\n+   function taskSuspend (tid : t_id) return STATUS;\n    pragma Import (C, taskSuspend, \"taskSuspend\");\n \n-   function taskResume (tid : t_id) return int;\n+   function taskResume (tid : t_id) return STATUS;\n    pragma Import (C, taskResume, \"taskResume\");\n \n    function taskIsSuspended (tid : t_id) return BOOL;\n    pragma Import (C, taskIsSuspended, \"taskIsSuspended\");\n \n-   function taskDelay (ticks : int) return int;\n+   function taskDelay (ticks : int) return STATUS;\n    pragma Import (C, taskDelay, \"taskDelay\");\n \n    function sysClkRateGet return vx_freq_t;\n@@ -322,17 +317,17 @@ package System.OS_Interface is\n    --  taskVarLib: eg VxWorks 6 RTPs\n \n    function taskVarAdd\n-     (tid : t_id; pVar : access System.Address) return int;\n+     (tid : t_id; pVar : access System.Address) return STATUS;\n    pragma Import (C, taskVarAdd, \"taskVarAdd\");\n \n    function taskVarDelete\n-     (tid : t_id; pVar : access System.Address) return int;\n+     (tid : t_id; pVar : access System.Address) return STATUS;\n    pragma Import (C, taskVarDelete, \"taskVarDelete\");\n \n    function taskVarSet\n      (tid   : t_id;\n       pVar  : access System.Address;\n-      value : System.Address) return int;\n+      value : System.Address) return STATUS;\n    pragma Import (C, taskVarSet, \"taskVarSet\");\n \n    function taskVarGet\n@@ -345,7 +340,7 @@ package System.OS_Interface is\n    --  Can only be called from the VxWorks 6 run-time libary that supports\n    --  tlsLib, and not by the VxWorks 6.6 SMP library\n \n-   function tlsKeyCreate return int;\n+   function tlsKeyCreate return STATUS;\n    pragma Import (C, tlsKeyCreate, \"tlsKeyCreate\");\n \n    function tlsValueGet (key : int) return System.Address;\n@@ -381,15 +376,15 @@ package System.OS_Interface is\n    procedure taskDelete (tid : t_id);\n    pragma Import (C, taskDelete, \"taskDelete\");\n \n-   function Set_Time_Slice (ticks : int) return int\n-     renames System.VxWorks.Ext.Set_Time_Slice;\n+   function Set_Time_Slice (ticks : int) return STATUS renames\n+     SVE.Set_Time_Slice;\n    --  Calls kernelTimeSlice under VxWorks 5.x, VxWorks 653, or in VxWorks 6\n    --  kernel apps. Returns ERROR for RTPs, VxWorks 5 /CERT\n \n-   function taskPriorityGet (tid : t_id; pPriority : access int) return int;\n+   function taskPriorityGet (tid : t_id; pPriority : access int) return STATUS;\n    pragma Import (C, taskPriorityGet, \"taskPriorityGet\");\n \n-   function taskPrioritySet (tid : t_id; newPriority : int) return int;\n+   function taskPrioritySet (tid : t_id; newPriority : int) return STATUS;\n    pragma Import (C, taskPrioritySet, \"taskPrioritySet\");\n \n    --  Semaphore creation flags\n@@ -421,7 +416,7 @@ package System.OS_Interface is\n    --  semTake() timeout with ticks > NO_WAIT\n    S_objLib_OBJ_TIMEOUT     : constant := M_objLib + 4;\n \n-   subtype SEM_ID is System.VxWorks.Ext.SEM_ID;\n+   subtype SEM_ID is SVE.SEM_ID;\n    --  typedef struct semaphore *SEM_ID;\n \n    --  We use two different kinds of VxWorks semaphores: mutex and binary\n@@ -435,14 +430,13 @@ package System.OS_Interface is\n    function semMCreate (options : int) return SEM_ID;\n    pragma Import (C, semMCreate, \"semMCreate\");\n \n-   function semDelete (Sem : SEM_ID) return int\n-     renames System.VxWorks.Ext.semDelete;\n+   function semDelete (Sem : SEM_ID) return STATUS renames SVE.semDelete;\n    --  Delete a semaphore\n \n-   function semGive (Sem : SEM_ID) return int;\n+   function semGive (Sem : SEM_ID) return STATUS;\n    pragma Import (C, semGive, \"semGive\");\n \n-   function semTake (Sem : SEM_ID; timeout : int) return int;\n+   function semTake (Sem : SEM_ID; timeout : int) return STATUS;\n    pragma Import (C, semTake, \"semTake\");\n    --  Attempt to take binary semaphore.  Error is returned if operation\n    --  times out\n@@ -460,16 +454,16 @@ package System.OS_Interface is\n    function Binary_Semaphore_Create return Binary_Semaphore_Id;\n    pragma Inline (Binary_Semaphore_Create);\n \n-   function Binary_Semaphore_Delete (ID : Binary_Semaphore_Id) return int;\n+   function Binary_Semaphore_Delete (ID : Binary_Semaphore_Id) return STATUS;\n    pragma Inline (Binary_Semaphore_Delete);\n \n-   function Binary_Semaphore_Obtain (ID : Binary_Semaphore_Id) return int;\n+   function Binary_Semaphore_Obtain (ID : Binary_Semaphore_Id) return STATUS;\n    pragma Inline (Binary_Semaphore_Obtain);\n \n-   function Binary_Semaphore_Release (ID : Binary_Semaphore_Id) return int;\n+   function Binary_Semaphore_Release (ID : Binary_Semaphore_Id) return STATUS;\n    pragma Inline (Binary_Semaphore_Release);\n \n-   function Binary_Semaphore_Flush (ID : Binary_Semaphore_Id) return int;\n+   function Binary_Semaphore_Flush (ID : Binary_Semaphore_Id) return STATUS;\n    pragma Inline (Binary_Semaphore_Flush);\n \n    ------------------------------------------------------------\n@@ -484,7 +478,7 @@ package System.OS_Interface is\n    function Interrupt_Connect\n      (Vector    : Interrupt_Vector;\n       Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int;\n+      Parameter : System.Address := System.Null_Address) return STATUS;\n    pragma Inline (Interrupt_Connect);\n    --  Use this to set up an user handler. The routine installs a user handler\n    --  which is invoked after the OS has saved enough context for a high-level\n@@ -505,12 +499,12 @@ package System.OS_Interface is\n    --------------------------------\n \n    function taskCpuAffinitySet (tid : t_id; CPU : int) return int\n-     renames System.VxWorks.Ext.taskCpuAffinitySet;\n+    renames SVE.taskCpuAffinitySet;\n    --  For SMP run-times the affinity to CPU.\n    --  For uniprocessor systems return ERROR status.\n \n    function taskMaskAffinitySet (tid : t_id; CPU_Set : unsigned) return int\n-     renames System.VxWorks.Ext.taskMaskAffinitySet;\n+     renames SVE.taskMaskAffinitySet;\n    --  For SMP run-times the affinity to CPU_Set.\n    --  For uniprocessor systems return ERROR status.\n \n@@ -526,5 +520,5 @@ private\n \n    ERROR_PID : constant pid_t := -1;\n \n-   type sigset_t is new System.VxWorks.Ext.sigset_t;\n+   type sigset_t is new SVE.sigset_t;\n end System.OS_Interface;"}, {"sha": "273aca800e703276473d908ec856e925c35e9c19", "filename": "gcc/ada/libgnarl/s-taprop__vxworks.adb", "status": "modified", "additions": 50, "deletions": 46, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__vxworks.adb?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -65,10 +65,14 @@ package body System.Task_Primitives.Operations is\n    use type Interfaces.C.int;\n    use type System.OS_Interface.unsigned;\n    use type System.VxWorks.Ext.t_id;\n+   use type System.VxWorks.Ext.STATUS;\n    use type System.VxWorks.Ext.BOOL;\n \n-   subtype int is System.OS_Interface.int;\n+   subtype int      is System.OS_Interface.int;\n    subtype unsigned is System.OS_Interface.unsigned;\n+   subtype STATUS   is System.VxWorks.Ext.STATUS;\n+\n+   OK  : constant STATUS := System.VxWorks.Ext.OK;\n \n    Relative : constant := 0;\n \n@@ -334,17 +338,17 @@ package body System.Task_Primitives.Operations is\n    -------------------\n \n    procedure Finalize_Lock (L : not null access Lock) is\n-      Result : int;\n+      Result : STATUS;\n    begin\n       Result := semDelete (L.Mutex);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n    end Finalize_Lock;\n \n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n-      Result : int;\n+      Result : STATUS;\n    begin\n       Result := semDelete (L.Mutex);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n    end Finalize_Lock;\n \n    ----------------\n@@ -355,7 +359,7 @@ package body System.Task_Primitives.Operations is\n      (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean)\n    is\n-      Result : int;\n+      Result : STATUS;\n \n    begin\n       if L.Protocol = Prio_Protect\n@@ -368,21 +372,21 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Result := semTake (L.Mutex, WAIT_FOREVER);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n    end Write_Lock;\n \n    procedure Write_Lock (L : not null access RTS_Lock) is\n-      Result : int;\n+      Result : STATUS;\n    begin\n       Result := semTake (L.Mutex, WAIT_FOREVER);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n    end Write_Lock;\n \n    procedure Write_Lock (T : Task_Id) is\n-      Result : int;\n+      Result : STATUS;\n    begin\n       Result := semTake (T.Common.LL.L.Mutex, WAIT_FOREVER);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n    end Write_Lock;\n \n    ---------------\n@@ -401,24 +405,24 @@ package body System.Task_Primitives.Operations is\n    ------------\n \n    procedure Unlock (L : not null access Lock) is\n-      Result : int;\n+      Result : STATUS;\n    begin\n       Result := semGive (L.Mutex);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n    end Unlock;\n \n    procedure Unlock (L : not null access RTS_Lock) is\n-      Result : int;\n+      Result : STATUS;\n    begin\n       Result := semGive (L.Mutex);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n    end Unlock;\n \n    procedure Unlock (T : Task_Id) is\n-      Result : int;\n+      Result : STATUS;\n    begin\n       Result := semGive (T.Common.LL.L.Mutex);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n    end Unlock;\n \n    -----------------\n@@ -443,28 +447,28 @@ package body System.Task_Primitives.Operations is\n    procedure Sleep (Self_ID : Task_Id; Reason : System.Tasking.Task_States) is\n       pragma Unreferenced (Reason);\n \n-      Result : int;\n+      Result : STATUS;\n \n    begin\n       pragma Assert (Self_ID = Self);\n \n       --  Release the mutex before sleeping\n \n       Result := semGive (Self_ID.Common.LL.L.Mutex);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n \n       --  Perform a blocking operation to take the CV semaphore. Note that a\n       --  blocking operation in VxWorks will reenable task scheduling. When we\n       --  are no longer blocked and control is returned, task scheduling will\n       --  again be disabled.\n \n       Result := semTake (Self_ID.Common.LL.CV, WAIT_FOREVER);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n \n       --  Take the mutex back\n \n       Result := semTake (Self_ID.Common.LL.L.Mutex, WAIT_FOREVER);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n    end Sleep;\n \n    -----------------\n@@ -487,7 +491,7 @@ package body System.Task_Primitives.Operations is\n       Orig     : constant Duration := Monotonic_Clock;\n       Absolute : Duration;\n       Ticks    : int;\n-      Result   : int;\n+      Result   : STATUS;\n       Wakeup   : Boolean := False;\n \n    begin\n@@ -517,7 +521,7 @@ package body System.Task_Primitives.Operations is\n             --  Release the mutex before sleeping\n \n             Result := semGive (Self_ID.Common.LL.L.Mutex);\n-            pragma Assert (Result = 0);\n+            pragma Assert (Result = OK);\n \n             --  Perform a blocking operation to take the CV semaphore. Note\n             --  that a blocking operation in VxWorks will reenable task\n@@ -526,7 +530,7 @@ package body System.Task_Primitives.Operations is\n \n             Result := semTake (Self_ID.Common.LL.CV, Ticks);\n \n-            if Result = 0 then\n+            if Result = OK then\n \n                --  Somebody may have called Wakeup for us\n \n@@ -557,7 +561,7 @@ package body System.Task_Primitives.Operations is\n             --  Take the mutex back\n \n             Result := semTake (Self_ID.Common.LL.L.Mutex, WAIT_FOREVER);\n-            pragma Assert (Result = 0);\n+            pragma Assert (Result = OK);\n \n             exit when Timedout or Wakeup;\n          end loop;\n@@ -591,7 +595,7 @@ package body System.Task_Primitives.Operations is\n       Timedout : Boolean;\n       Aborted  : Boolean := False;\n \n-      Result : int;\n+      Result   : STATUS;\n       pragma Warnings (Off, Result);\n \n    begin\n@@ -618,7 +622,7 @@ package body System.Task_Primitives.Operations is\n \n          Result := semTake (Self_ID.Common.LL.L.Mutex, WAIT_FOREVER);\n \n-         pragma Assert (Result = 0);\n+         pragma Assert (Result = OK);\n \n          Self_ID.Common.State := Delay_Sleep;\n          Timedout := False;\n@@ -629,13 +633,13 @@ package body System.Task_Primitives.Operations is\n             --  Release the TCB before sleeping\n \n             Result := semGive (Self_ID.Common.LL.L.Mutex);\n-            pragma Assert (Result = 0);\n+            pragma Assert (Result = OK);\n \n             exit when Aborted;\n \n             Result := semTake (Self_ID.Common.LL.CV, Ticks);\n \n-            if Result /= 0 then\n+            if Result /= OK then\n \n                --  If Ticks = int'last, it was most probably truncated, so make\n                --  another round after recomputing Ticks from absolute time.\n@@ -656,7 +660,7 @@ package body System.Task_Primitives.Operations is\n \n             Result := semTake (Self_ID.Common.LL.L.Mutex, WAIT_FOREVER);\n \n-            pragma Assert (Result = 0);\n+            pragma Assert (Result = OK);\n \n             exit when Timedout;\n          end loop;\n@@ -698,10 +702,10 @@ package body System.Task_Primitives.Operations is\n \n    procedure Wakeup (T : Task_Id; Reason : System.Tasking.Task_States) is\n       pragma Unreferenced (Reason);\n-      Result : int;\n+      Result : STATUS;\n    begin\n       Result := semGive (T.Common.LL.CV);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n    end Wakeup;\n \n    -----------\n@@ -710,7 +714,7 @@ package body System.Task_Primitives.Operations is\n \n    procedure Yield (Do_Yield : Boolean := True) is\n       pragma Unreferenced (Do_Yield);\n-      Result : int;\n+      Result : STATUS;\n       pragma Unreferenced (Result);\n    begin\n       Result := taskDelay (0);\n@@ -727,13 +731,13 @@ package body System.Task_Primitives.Operations is\n    is\n       pragma Unreferenced (Loss_Of_Inheritance);\n \n-      Result     : int;\n+      Result     : STATUS;\n \n    begin\n       Result :=\n         taskPrioritySet\n           (T.Common.LL.Thread, To_VxWorks_Priority (int (Prio)));\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n \n       --  Note: in VxWorks 6.6 (or earlier), the task is placed at the end of\n       --  the priority queue instead of the head. This is not the behavior\n@@ -939,16 +943,16 @@ package body System.Task_Primitives.Operations is\n    ------------------\n \n    procedure Finalize_TCB (T : Task_Id) is\n-      Result : int;\n+      Result : STATUS;\n \n    begin\n       Result := semDelete (T.Common.LL.L.Mutex);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n \n       T.Common.LL.Thread := Null_Thread_Id;\n \n       Result := semDelete (T.Common.LL.CV);\n-      pragma Assert (Result = 0);\n+      pragma Assert (Result = OK);\n \n       if T.Known_Tasks_Index /= -1 then\n          Known_Tasks (T.Known_Tasks_Index) := null;\n@@ -1138,7 +1142,7 @@ package body System.Task_Primitives.Operations is\n             S.State := False;\n \n             Result := semGive (S.L);\n-            pragma Assert (Result = 0);\n+            pragma Assert (Result = OK);\n \n             SSL.Abort_Undefer.all;\n \n@@ -1219,7 +1223,7 @@ package body System.Task_Primitives.Operations is\n       if T.Common.LL.Thread /= Null_Thread_Id\n         and then T.Common.LL.Thread /= Thread_Self\n       then\n-         return taskSuspend (T.Common.LL.Thread) = 0;\n+         return taskSuspend (T.Common.LL.Thread) = OK;\n       else\n          return True;\n       end if;\n@@ -1237,7 +1241,7 @@ package body System.Task_Primitives.Operations is\n       if T.Common.LL.Thread /= Null_Thread_Id\n         and then T.Common.LL.Thread /= Thread_Self\n       then\n-         return taskResume (T.Common.LL.Thread) = 0;\n+         return taskResume (T.Common.LL.Thread) = OK;\n       else\n          return True;\n       end if;\n@@ -1252,7 +1256,7 @@ package body System.Task_Primitives.Operations is\n       Thread_Self : constant Thread_Id := taskIdSelf;\n       C           : Task_Id;\n \n-      Dummy : int;\n+      Dummy : STATUS;\n       Old   : int;\n \n    begin\n@@ -1279,7 +1283,7 @@ package body System.Task_Primitives.Operations is\n    function Stop_Task (T : ST.Task_Id) return Boolean is\n    begin\n       if T.Common.LL.Thread /= Null_Thread_Id then\n-         return Task_Stop (T.Common.LL.Thread) = 0;\n+         return Task_Stop (T.Common.LL.Thread) = OK;\n       else\n          return True;\n       end if;\n@@ -1293,7 +1297,7 @@ package body System.Task_Primitives.Operations is\n    is\n    begin\n       if T.Common.LL.Thread /= Null_Thread_Id then\n-         return Task_Cont (T.Common.LL.Thread) = 0;\n+         return Task_Cont (T.Common.LL.Thread) = OK;\n       else\n          return True;\n       end if;\n@@ -1305,15 +1309,15 @@ package body System.Task_Primitives.Operations is\n \n    function Is_Task_Context return Boolean is\n    begin\n-      return System.OS_Interface.Interrupt_Context = 0;\n+      return OSI.Interrupt_Context = 0;\n    end Is_Task_Context;\n \n    ----------------\n    -- Initialize --\n    ----------------\n \n    procedure Initialize (Environment_Task : Task_Id) is\n-      Result : int;\n+      Result : STATUS;\n       pragma Unreferenced (Result);\n \n    begin"}, {"sha": "d50d93d58351333c4631c410f09162562b1d0a6a", "filename": "gcc/ada/libgnarl/s-vxwext.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwext.adb?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -30,7 +30,7 @@\n \n package body System.VxWorks.Ext is\n \n-   ERROR : constant := -1;\n+   IERR : constant := -1;\n \n    ------------------------\n    -- taskCpuAffinitySet --\n@@ -39,7 +39,7 @@ package body System.VxWorks.Ext is\n    function taskCpuAffinitySet (tid : t_id; CPU : int) return int is\n       pragma Unreferenced (tid, CPU);\n    begin\n-      return ERROR;\n+      return IERR;\n    end taskCpuAffinitySet;\n \n    -------------------------\n@@ -49,7 +49,7 @@ package body System.VxWorks.Ext is\n    function taskMaskAffinitySet (tid : t_id; CPU_Set : unsigned) return int is\n       pragma Unreferenced (tid, CPU_Set);\n    begin\n-      return ERROR;\n+      return IERR;\n    end taskMaskAffinitySet;\n \n end System.VxWorks.Ext;"}, {"sha": "ab734155797a161fd25fe4268d953a92c8c944fb", "filename": "gcc/ada/libgnarl/s-vxwext.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwext.ads?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -46,6 +46,12 @@ package System.VxWorks.Ext is\n    subtype int is Interfaces.C.int;\n    subtype unsigned is Interfaces.C.unsigned;\n \n+   type STATUS is new int;\n+   --  Equivalent of the C type STATUS\n+\n+   OK    : constant STATUS := 0;\n+   ERROR : constant STATUS := -1;\n+\n    type BOOL is new int;\n    --  Equivalent of the C type BOOL\n "}, {"sha": "b78e0781e35a11671fd0186dafec19f1ab3fa081", "filename": "gcc/ada/libgnarl/s-vxwext__kernel-smp.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__kernel-smp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__kernel-smp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwext__kernel-smp.adb?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -33,15 +33,15 @@\n \n package body System.VxWorks.Ext is\n \n-   ERROR : constant := -1;\n+   IERR : constant := -1;\n \n    --------------\n    -- Int_Lock --\n    --------------\n \n    function Int_Lock return int is\n    begin\n-      return ERROR;\n+      return IERR;\n    end Int_Lock;\n \n    ----------------\n@@ -58,8 +58,8 @@ package body System.VxWorks.Ext is\n    -- semDelete --\n    ---------------\n \n-   function semDelete (Sem : SEM_ID) return int is\n-      function Os_Sem_Delete (Sem : SEM_ID) return int;\n+   function semDelete (Sem : SEM_ID) return STATUS is\n+      function Os_Sem_Delete (Sem : SEM_ID) return STATUS;\n       pragma Import (C, Os_Sem_Delete, \"semDelete\");\n    begin\n       return Os_Sem_Delete (Sem);\n@@ -92,8 +92,8 @@ package body System.VxWorks.Ext is\n    -- Task_Cont --\n    ---------------\n \n-   function Task_Cont (tid : t_id) return int is\n-      function taskCont (tid : t_id) return int;\n+   function Task_Cont (tid : t_id) return STATUS is\n+      function taskCont (tid : t_id) return STATUS;\n       pragma Import (C, taskCont, \"taskCont\");\n    begin\n       return taskCont (tid);\n@@ -103,8 +103,8 @@ package body System.VxWorks.Ext is\n    -- Task_Stop --\n    ---------------\n \n-   function Task_Stop (tid : t_id) return int is\n-      function taskStop (tid : t_id) return int;\n+   function Task_Stop (tid : t_id) return STATUS is\n+      function taskStop (tid : t_id) return STATUS;\n       pragma Import (C, taskStop, \"taskStop\");\n    begin\n       return taskStop (tid);"}, {"sha": "b3b7f5415d2b6593106808b4058dbd342af7ca09", "filename": "gcc/ada/libgnarl/s-vxwext__kernel.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__kernel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__kernel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwext__kernel.adb?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -34,7 +34,7 @@\n \n package body System.VxWorks.Ext is\n \n-   ERROR : constant := -1;\n+   IERR : constant := -1;\n \n    --------------\n    -- Int_Lock --\n@@ -58,7 +58,7 @@ package body System.VxWorks.Ext is\n    -- semDelete --\n    ---------------\n \n-   function semDelete (Sem : SEM_ID) return int is\n+   function semDelete (Sem : SEM_ID) return STATUS is\n       function Os_Sem_Delete (Sem : SEM_ID) return int;\n       pragma Import (C, Os_Sem_Delete, \"semDelete\");\n    begin\n@@ -72,7 +72,7 @@ package body System.VxWorks.Ext is\n    function taskCpuAffinitySet (tid : t_id; CPU : int) return int is\n       pragma Unreferenced (tid, CPU);\n    begin\n-      return ERROR;\n+      return IERR;\n    end taskCpuAffinitySet;\n \n    -------------------------\n@@ -82,15 +82,15 @@ package body System.VxWorks.Ext is\n    function taskMaskAffinitySet (tid : t_id; CPU_Set : unsigned) return int is\n       pragma Unreferenced (tid, CPU_Set);\n    begin\n-      return ERROR;\n+      return IERR;\n    end taskMaskAffinitySet;\n \n    ---------------\n    -- Task_Cont --\n    ---------------\n \n-   function Task_Cont (tid : t_id) return int is\n-      function taskCont (tid : t_id) return int;\n+   function Task_Cont (tid : t_id) return STATUS is\n+      function taskCont (tid : t_id) return STATUS;\n       pragma Import (C, taskCont, \"taskCont\");\n    begin\n       return taskCont (tid);\n@@ -100,8 +100,8 @@ package body System.VxWorks.Ext is\n    -- Task_Stop --\n    ---------------\n \n-   function Task_Stop (tid : t_id) return int is\n-      function taskStop (tid : t_id) return int;\n+   function Task_Stop (tid : t_id) return STATUS is\n+      function taskStop (tid : t_id) return STATUS;\n       pragma Import (C, taskStop, \"taskStop\");\n    begin\n       return taskStop (tid);"}, {"sha": "7b299b9184cf91422d2a159618d60f015fd63c55", "filename": "gcc/ada/libgnarl/s-vxwext__kernel.ads", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwext__kernel.ads?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -45,6 +45,12 @@ package System.VxWorks.Ext is\n    subtype int is Interfaces.C.int;\n    subtype unsigned is Interfaces.C.unsigned;\n \n+   type STATUS is new int;\n+   --  Equivalent of the C type STATUS\n+\n+   OK    : constant STATUS := 0;\n+   ERROR : constant STATUS := -1;\n+\n    type BOOL is new int;\n    --  Equivalent of the C type BOOL\n \n@@ -65,7 +71,7 @@ package System.VxWorks.Ext is\n    function Interrupt_Connect\n      (Vector    : Interrupt_Vector;\n       Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int;\n+      Parameter : System.Address := System.Null_Address) return STATUS;\n    pragma Import (C, Interrupt_Connect, \"intConnect\");\n \n    function Interrupt_Context return BOOL;\n@@ -75,13 +81,13 @@ package System.VxWorks.Ext is\n      (intNum : int) return Interrupt_Vector;\n    pragma Import (C, Interrupt_Number_To_Vector, \"__gnat_inum_to_ivec\");\n \n-   function semDelete (Sem : SEM_ID) return int;\n+   function semDelete (Sem : SEM_ID) return STATUS;\n    pragma Convention (C, semDelete);\n \n-   function Task_Cont (tid : t_id) return int;\n+   function Task_Cont (tid : t_id) return STATUS;\n    pragma Convention (C, Task_Cont);\n \n-   function Task_Stop (tid : t_id) return int;\n+   function Task_Stop (tid : t_id) return STATUS;\n    pragma Convention (C, Task_Stop);\n \n    function kill (pid : t_id; sig : int) return int;\n@@ -90,7 +96,7 @@ package System.VxWorks.Ext is\n    function getpid return t_id;\n    pragma Import (C, getpid, \"taskIdSelf\");\n \n-   function Set_Time_Slice (ticks : int) return int;\n+   function Set_Time_Slice (ticks : int) return STATUS;\n    pragma Import (C, Set_Time_Slice, \"kernelTimeSlice\");\n \n    type UINT64 is mod 2 ** Long_Long_Integer'Size;"}, {"sha": "5bf6ae55241610557a417df5a26534607312833f", "filename": "gcc/ada/libgnarl/s-vxwext__rtp-smp.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__rtp-smp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__rtp-smp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwext__rtp-smp.adb?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -33,15 +33,15 @@\n \n package body System.VxWorks.Ext is\n \n-   ERROR : constant := -1;\n+   IERR : constant := -1;\n \n    --------------\n    -- Int_Lock --\n    --------------\n \n    function Int_Lock return int is\n    begin\n-      return ERROR;\n+      return IERR;\n    end Int_Lock;\n \n    ----------------\n@@ -61,7 +61,7 @@ package body System.VxWorks.Ext is\n    function Interrupt_Connect\n      (Vector    : Interrupt_Vector;\n       Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int\n+      Parameter : System.Address := System.Null_Address) return STATUS\n    is\n       pragma Unreferenced (Vector, Handler, Parameter);\n    begin\n@@ -95,8 +95,8 @@ package body System.VxWorks.Ext is\n    -- semDelete --\n    ---------------\n \n-   function semDelete (Sem : SEM_ID) return int is\n-      function OS_semDelete (Sem : SEM_ID) return int;\n+   function semDelete (Sem : SEM_ID) return STATUS is\n+      function OS_semDelete (Sem : SEM_ID) return STATUS;\n       pragma Import (C, OS_semDelete, \"semDelete\");\n    begin\n       return OS_semDelete (Sem);\n@@ -106,7 +106,7 @@ package body System.VxWorks.Ext is\n    -- Set_Time_Slice --\n    --------------------\n \n-   function Set_Time_Slice (ticks : int) return int is\n+   function Set_Time_Slice (ticks : int) return STATUS is\n       pragma Unreferenced (ticks);\n    begin\n       return ERROR;"}, {"sha": "543f152675e9e6866382178b218b4d5fbcde7fc4", "filename": "gcc/ada/libgnarl/s-vxwext__rtp.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__rtp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__rtp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwext__rtp.adb?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -33,15 +33,15 @@\n \n package body System.VxWorks.Ext is\n \n-   ERROR : constant := -1;\n+   IERR : constant := -1;\n \n    --------------\n    -- Int_Lock --\n    --------------\n \n    function Int_Lock return int is\n    begin\n-      return ERROR;\n+      return IERR;\n    end Int_Lock;\n \n    ----------------\n@@ -61,7 +61,7 @@ package body System.VxWorks.Ext is\n    function Interrupt_Connect\n      (Vector    : Interrupt_Vector;\n       Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int\n+      Parameter : System.Address := System.Null_Address) return STATUS\n    is\n       pragma Unreferenced (Vector, Handler, Parameter);\n    begin\n@@ -95,8 +95,8 @@ package body System.VxWorks.Ext is\n    -- semDelete --\n    ---------------\n \n-   function semDelete (Sem : SEM_ID) return int is\n-      function OS_semDelete (Sem : SEM_ID) return int;\n+   function semDelete (Sem : SEM_ID) return STATUS is\n+      function OS_semDelete (Sem : SEM_ID) return STATUS;\n       pragma Import (C, OS_semDelete, \"semDelete\");\n    begin\n       return OS_semDelete (Sem);\n@@ -106,7 +106,7 @@ package body System.VxWorks.Ext is\n    -- Set_Time_Slice --\n    --------------------\n \n-   function Set_Time_Slice (ticks : int) return int is\n+   function Set_Time_Slice (ticks : int) return STATUS is\n       pragma Unreferenced (ticks);\n    begin\n       return ERROR;\n@@ -119,7 +119,7 @@ package body System.VxWorks.Ext is\n    function taskCpuAffinitySet (tid : t_id; CPU : int) return int is\n       pragma Unreferenced (tid, CPU);\n    begin\n-      return ERROR;\n+      return IERR;\n    end taskCpuAffinitySet;\n \n    -------------------------\n@@ -129,7 +129,7 @@ package body System.VxWorks.Ext is\n    function taskMaskAffinitySet (tid : t_id; CPU_Set : unsigned) return int is\n       pragma Unreferenced (tid, CPU_Set);\n    begin\n-      return ERROR;\n+      return IERR;\n    end taskMaskAffinitySet;\n \n end System.VxWorks.Ext;"}, {"sha": "995d0989439a9636fc71f8ca383008259b006610", "filename": "gcc/ada/libgnarl/s-vxwext__rtp.ads", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__rtp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab621f4ada197ec99f0b9673271c7accaa7925da/gcc%2Fada%2Flibgnarl%2Fs-vxwext__rtp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwext__rtp.ads?ref=ab621f4ada197ec99f0b9673271c7accaa7925da", "patch": "@@ -45,6 +45,12 @@ package System.VxWorks.Ext is\n    subtype int is Interfaces.C.int;\n    subtype unsigned is Interfaces.C.unsigned;\n \n+   type STATUS is new int;\n+   --  Equivalent of the C type STATUS\n+\n+   OK    : constant STATUS := 0;\n+   ERROR : constant STATUS := -1;\n+\n    type BOOL is new int;\n    --  Equivalent of the C type BOOL\n \n@@ -65,7 +71,7 @@ package System.VxWorks.Ext is\n    function Interrupt_Connect\n      (Vector    : Interrupt_Vector;\n       Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int;\n+      Parameter : System.Address := System.Null_Address) return STATUS;\n    pragma Convention (C, Interrupt_Connect);\n \n    function Interrupt_Context return BOOL;\n@@ -75,13 +81,13 @@ package System.VxWorks.Ext is\n      (intNum : int) return Interrupt_Vector;\n    pragma Convention (C, Interrupt_Number_To_Vector);\n \n-   function semDelete (Sem : SEM_ID) return int;\n+   function semDelete (Sem : SEM_ID) return STATUS;\n    pragma Convention (C, semDelete);\n \n-   function Task_Cont (tid : t_id) return int;\n+   function Task_Cont (tid : t_id) return STATUS;\n    pragma Import (C, Task_Cont, \"taskResume\");\n \n-   function Task_Stop (tid : t_id) return int;\n+   function Task_Stop (tid : t_id) return STATUS;\n    pragma Import (C, Task_Stop, \"taskSuspend\");\n \n    function kill (pid : t_id; sig : int) return int;\n@@ -90,7 +96,7 @@ package System.VxWorks.Ext is\n    function getpid return t_id;\n    pragma Import (C, getpid, \"getpid\");\n \n-   function Set_Time_Slice (ticks : int) return int;\n+   function Set_Time_Slice (ticks : int) return STATUS;\n    pragma Inline (Set_Time_Slice);\n \n    --------------------------------"}]}