{"sha": "98ae260da1002b9bbf803a267407d84a76076191", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThhZTI2MGRhMTAwMmI5YmJmODAzYTI2NzQwN2Q4NGE3NjA3NjE5MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-10-27T11:40:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-10-27T11:40:47Z"}, "message": "misc.c (gnat_init_options_struct): Parameterize errno support here instead of...\n\n\t* gcc-interface/misc.c (gnat_init_options_struct): Parameterize errno\n\tsupport here instead of...\n\tDo not set flag_delete_dead_exceptions to 1 unconditionally.\n\t(gnat_init_gcc_eh): Set flag_delete_dead_exceptions to 1.\n\t(gnat_init_gcc_fp): ...here.\n\nFrom-SVN: r216731", "tree": {"sha": "74abf33f8a567ef3beb533cef570ea297796fc14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74abf33f8a567ef3beb533cef570ea297796fc14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ae260da1002b9bbf803a267407d84a76076191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ae260da1002b9bbf803a267407d84a76076191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ae260da1002b9bbf803a267407d84a76076191", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ae260da1002b9bbf803a267407d84a76076191/comments", "author": null, "committer": null, "parents": [{"sha": "084770317e9443ada06ea9d9c914504f0df2487e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084770317e9443ada06ea9d9c914504f0df2487e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084770317e9443ada06ea9d9c914504f0df2487e"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "64fa248c58a3ae38e3ae1288ca5b759efac84054", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ae260da1002b9bbf803a267407d84a76076191/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ae260da1002b9bbf803a267407d84a76076191/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=98ae260da1002b9bbf803a267407d84a76076191", "patch": "@@ -1,3 +1,11 @@\n+2014-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/misc.c (gnat_init_options_struct): Parameterize errno\n+\tsupport here instead of...\n+\tDo not set flag_delete_dead_exceptions to 1 unconditionally.\n+\t(gnat_init_gcc_eh): Set flag_delete_dead_exceptions to 1.\n+\t(gnat_init_gcc_fp): ...here.\n+\n 2014-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu) <N_Real_Literal>: Minor tweaks."}, {"sha": "95b5b27281cd4807be25d0ffb05438ba6a70c6ba", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ae260da1002b9bbf803a267407d84a76076191/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ae260da1002b9bbf803a267407d84a76076191/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=98ae260da1002b9bbf803a267407d84a76076191", "patch": "@@ -180,8 +180,10 @@ gnat_init_options_struct (struct gcc_options *opts)\n   /* Uninitialized really means uninitialized in Ada.  */\n   opts->x_flag_zero_initialized_in_bss = 0;\n \n-  /* We can delete dead instructions that may throw exceptions in Ada.  */\n-  opts->x_flag_delete_dead_exceptions = 1;\n+  /* We don't care about errno in Ada and it causes __builtin_sqrt to\n+     call the libm function rather than do it inline.  */\n+  opts->x_flag_errno_math = 0;\n+  opts->frontend_set_flag_errno_math = true;\n }\n \n /* Initialize for option processing.  */\n@@ -385,17 +387,21 @@ gnat_init_gcc_eh (void)\n      right exception regions.  */\n   using_eh_for_cleanups ();\n \n-  /* Turn on -fexceptions and -fnon-call-exceptions.  The first one triggers\n-     the generation of the necessary exception tables.  The second one is\n-     useful for two reasons: 1/ we map some asynchronous signals like SEGV to\n-     exceptions, so we need to ensure that the insns which can lead to such\n-     signals are correctly attached to the exception region they pertain to,\n-     2/ Some calls to pure subprograms are handled as libcall blocks and then\n-     marked as \"cannot trap\" if the flag is not set (see emit_libcall_block).\n-     We should not let this be since it is possible for such calls to actually\n-     raise in Ada.  */\n+  /* Turn on -fexceptions, -fnon-call-exceptions and -fdelete-dead-exceptions.\n+     The first one triggers the generation of the necessary exception tables.\n+     The second one is useful for two reasons: 1/ we map some asynchronous\n+     signals like SEGV to exceptions, so we need to ensure that the insns\n+     which can lead to such signals are correctly attached to the exception\n+     region they pertain to, 2/ some calls to pure subprograms are handled as\n+     libcall blocks and then marked as \"cannot trap\" if the flag is not set\n+     (see emit_libcall_block).  We should not let this be since it is possible\n+     for such calls to actually raise in Ada.\n+     The third one is an optimization that makes it possible to delete dead\n+     instructions that may throw exceptions, most notably loads and stores,\n+     as permitted in Ada.  */\n   flag_exceptions = 1;\n   flag_non_call_exceptions = 1;\n+  flag_delete_dead_exceptions = 1;\n \n   init_eh ();\n }\n@@ -418,11 +424,6 @@ gnat_init_gcc_fp (void)\n     flag_trapping_math = 1;\n   else if (!global_options_set.x_flag_trapping_math)\n     flag_trapping_math = 0;\n-\n-  /* We don't care in Ada about errno, and it causes __builtin_sqrt to\n-     to call the libm function rather than do it inline.  */\n-  if (!global_options_set.x_flag_errno_math)\n-    flag_errno_math = 0;\n }\n \n /* Print language-specific items in declaration NODE.  */"}]}