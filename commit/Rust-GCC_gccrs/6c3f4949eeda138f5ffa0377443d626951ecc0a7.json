{"sha": "6c3f4949eeda138f5ffa0377443d626951ecc0a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzZjQ5NDllZWRhMTM4ZjVmZmEwMzc3NDQzZDYyNjk1MWVjYzBhNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-10-17T06:11:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-10-17T06:11:08Z"}, "message": "re PR c++/38798 ([c++0x] Trouble with struct/class/enum keyword in late return types)\n\n\tPR c++/38798\n\t* parser.c (CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS): New.\n\t(cp_parser_type_specifier): Don't try to parse a class-specifier\n\tor enum-specifier in that case.\n\t(cp_parser_trailing_type_id): New.\n\t(cp_parser_late_return_type_opt): Call it.\n\t(cp_parser_type_id_1): Add is_trailing_return parm.\n\t(cp_parser_type_specifier_seq): Likewise.\n\nFrom-SVN: r152924", "tree": {"sha": "9b15630abf437c27a20a3a76ca381a953f3d6109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b15630abf437c27a20a3a76ca381a953f3d6109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c3f4949eeda138f5ffa0377443d626951ecc0a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c3f4949eeda138f5ffa0377443d626951ecc0a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c3f4949eeda138f5ffa0377443d626951ecc0a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c3f4949eeda138f5ffa0377443d626951ecc0a7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3dab3bade514a8bc1da85da5b19fc482e275864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3dab3bade514a8bc1da85da5b19fc482e275864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3dab3bade514a8bc1da85da5b19fc482e275864"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "d842d8e041420d4615284ece16ab4a63eb7254e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6c3f4949eeda138f5ffa0377443d626951ecc0a7", "patch": "@@ -1,3 +1,14 @@\n+2009-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/38798\n+\t* parser.c (CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS): New.\n+\t(cp_parser_type_specifier): Don't try to parse a class-specifier\n+\tor enum-specifier in that case.\n+\t(cp_parser_trailing_type_id): New.\n+\t(cp_parser_late_return_type_opt): Call it.\n+\t(cp_parser_type_id_1): Add is_trailing_return parm.\n+\t(cp_parser_type_specifier_seq): Likewise.\n+\n 2009-10-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/39866"}, {"sha": "b9b53e5ebaf301fb26b2f5522e25b70bc5ac349a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6c3f4949eeda138f5ffa0377443d626951ecc0a7", "patch": "@@ -1194,8 +1194,12 @@ enum\n   /* The construct is optional.  If it is not present, then no error\n      should be issued.  */\n   CP_PARSER_FLAGS_OPTIONAL = 0x1,\n-  /* When parsing a type-specifier, do not allow user-defined types.  */\n-  CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES = 0x2\n+  /* When parsing a type-specifier, treat user-defined type-names\n+     as non-type identifiers.  */\n+  CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES = 0x2,\n+  /* When parsing a type-specifier, do not try to parse a class-specifier\n+     or enum-specifier.  */\n+  CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS = 0x4\n };\n \n /* This type is used for parameters and variables which hold\n@@ -1741,10 +1745,11 @@ static tree cp_parser_type_id\n   (cp_parser *);\n static tree cp_parser_template_type_arg\n   (cp_parser *);\n+static tree cp_parser_trailing_type_id (cp_parser *);\n static tree cp_parser_type_id_1\n-  (cp_parser *, bool);\n+  (cp_parser *, bool, bool);\n static void cp_parser_type_specifier_seq\n-  (cp_parser *, bool, cp_decl_specifier_seq *);\n+  (cp_parser *, bool, bool, cp_decl_specifier_seq *);\n static tree cp_parser_parameter_declaration_clause\n   (cp_parser *);\n static tree cp_parser_parameter_declaration_list\n@@ -5795,6 +5800,7 @@ cp_parser_new_type_id (cp_parser* parser, tree *nelts)\n     = \"types may not be defined in a new-type-id\";\n   /* Parse the type-specifier-seq.  */\n   cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifier_seq);\n   /* Restore the old message.  */\n   parser->type_definition_forbidden_message = saved_message;\n@@ -8028,6 +8034,7 @@ cp_parser_condition (cp_parser* parser)\n     = \"types may not be defined in conditions\";\n   /* Parse the type-specifier-seq.  */\n   cp_parser_type_specifier_seq (parser, /*is_condition==*/true,\n+\t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifiers);\n   /* Restore the saved message.  */\n   parser->type_definition_forbidden_message = saved_message;\n@@ -9669,6 +9676,7 @@ cp_parser_conversion_type_id (cp_parser* parser)\n   attributes = cp_parser_attributes_opt (parser);\n   /* Parse the type-specifiers.  */\n   cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifiers);\n   /* If that didn't work, stop.  */\n   if (type_specifiers.type == error_mark_node)\n@@ -11644,6 +11652,9 @@ cp_parser_type_specifier (cp_parser* parser,\n   switch (keyword)\n     {\n     case RID_ENUM:\n+      if ((flags & CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS))\n+\tgoto elaborated_type_specifier;\n+\n       /* Look for the enum-specifier.  */\n       type_spec = cp_parser_enum_specifier (parser);\n       /* If that worked, we're done.  */\n@@ -11666,6 +11677,9 @@ cp_parser_type_specifier (cp_parser* parser,\n     case RID_CLASS:\n     case RID_STRUCT:\n     case RID_UNION:\n+      if ((flags & CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS))\n+\tgoto elaborated_type_specifier;\n+\n       /* Parse tentatively so that we can back up if we don't find a\n \t class-specifier.  */\n       cp_parser_parse_tentatively (parser);\n@@ -12532,6 +12546,7 @@ cp_parser_enum_specifier (cp_parser* parser)\n \n       /* Parse the type-specifier-seq.  */\n       cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t\t\t\t    /*is_trailing_return=*/false,\n                                     &type_specifiers);\n \n       /* At this point this is surely not elaborated type specifier.  */\n@@ -14422,7 +14437,7 @@ cp_parser_cv_qualifier_seq_opt (cp_parser* parser)\n /* Parse a late-specified return type, if any.  This is not a separate\n    non-terminal, but part of a function declarator, which looks like\n \n-   -> type-id\n+   -> trailing-type-specifier-seq abstract-declarator(opt)\n \n    Returns the type indicated by the type-id.  */\n \n@@ -14440,7 +14455,7 @@ cp_parser_late_return_type_opt (cp_parser* parser)\n   /* Consume the ->.  */\n   cp_lexer_consume_token (parser->lexer);\n \n-  return cp_parser_type_id (parser);\n+  return cp_parser_trailing_type_id (parser);\n }\n \n /* Parse a declarator-id.\n@@ -14493,13 +14508,15 @@ cp_parser_declarator_id (cp_parser* parser, bool optional_p)\n    Returns the TYPE specified.  */\n \n static tree\n-cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg)\n+cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n+\t\t     bool is_trailing_return)\n {\n   cp_decl_specifier_seq type_specifier_seq;\n   cp_declarator *abstract_declarator;\n \n   /* Parse the type-specifier-seq.  */\n   cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t\t\t\tis_trailing_return,\n \t\t\t\t&type_specifier_seq);\n   if (type_specifier_seq.type == error_mark_node)\n     return error_mark_node;\n@@ -14537,12 +14554,17 @@ cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg)\n \n static tree cp_parser_type_id (cp_parser *parser)\n {\n-  return cp_parser_type_id_1 (parser, false);\n+  return cp_parser_type_id_1 (parser, false, false);\n }\n \n static tree cp_parser_template_type_arg (cp_parser *parser)\n {\n-  return cp_parser_type_id_1 (parser, true);\n+  return cp_parser_type_id_1 (parser, true, false);\n+}\n+\n+static tree cp_parser_trailing_type_id (cp_parser *parser)\n+{\n+  return cp_parser_type_id_1 (parser, false, true);\n }\n \n /* Parse a type-specifier-seq.\n@@ -14558,11 +14580,15 @@ static tree cp_parser_template_type_arg (cp_parser *parser)\n    If IS_CONDITION is true, we are at the start of a \"condition\",\n    e.g., we've just seen \"if (\".\n \n+   If IS_TRAILING_RETURN is true, we are in a trailing-return-type,\n+   i.e. we've just seen \"->\".\n+\n    Sets *TYPE_SPECIFIER_SEQ to represent the sequence.  */\n \n static void\n cp_parser_type_specifier_seq (cp_parser* parser,\n \t\t\t      bool is_condition,\n+\t\t\t      bool is_trailing_return,\n \t\t\t      cp_decl_specifier_seq *type_specifier_seq)\n {\n   bool seen_type_specifier = false;\n@@ -14572,6 +14598,12 @@ cp_parser_type_specifier_seq (cp_parser* parser,\n   /* Clear the TYPE_SPECIFIER_SEQ.  */\n   clear_decl_specs (type_specifier_seq);\n \n+  /* In the context of a trailing return type, enum E { } is an\n+     elaborated-type-specifier followed by a function-body, not an\n+     enum-specifier.  */\n+  if (is_trailing_return)\n+    flags |= CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS;\n+\n   /* Parse the type-specifiers and attributes.  */\n   while (true)\n     {\n@@ -17283,6 +17315,7 @@ cp_parser_exception_declaration (cp_parser* parser)\n \n   /* Parse the type-specifier-seq.  */\n   cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifiers);\n   /* If it's a `)', then there is no declarator.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))\n@@ -22056,6 +22089,7 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \n \t  cp_parser_parse_tentatively (parser);\n \t  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t\t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t\t&type_specifiers);\n \t  if (cp_parser_parse_definitely (parser))\n \t    {"}, {"sha": "8970e1c8ebb134c76fad0acb52a6e6f9966a40f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c3f4949eeda138f5ffa0377443d626951ecc0a7", "patch": "@@ -1,3 +1,8 @@\n+2009-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/38798\n+\t* g++.dg/cpp0x/trailing5.C: New.\n+\n 2009-10-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41719"}, {"sha": "11e73d2e716975911b0ede1004528bda95f17805", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing1.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing1.C?ref=6c3f4949eeda138f5ffa0377443d626951ecc0a7", "previous_filename": "gcc/testsuite/g++.dg/cpp0x/auto6.C"}, {"sha": "e45204fe715f593785a1964e353a627b72c621b3", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing2.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing2.C?ref=6c3f4949eeda138f5ffa0377443d626951ecc0a7", "previous_filename": "gcc/testsuite/g++.dg/cpp0x/auto8.C"}, {"sha": "82d36f0d0d2e2d77a26be94194a16dd73e396d18", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing3.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing3.C?ref=6c3f4949eeda138f5ffa0377443d626951ecc0a7", "previous_filename": "gcc/testsuite/g++.dg/cpp0x/auto12.C"}, {"sha": "dc7e35aabaa4afecaf293be3869659c46fa879a3", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing4.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing4.C?ref=6c3f4949eeda138f5ffa0377443d626951ecc0a7", "previous_filename": "gcc/testsuite/g++.dg/cpp0x/auto13.C"}, {"sha": "b97d362be2fce821d2e16735bb168c4628fe550e", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing5.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3f4949eeda138f5ffa0377443d626951ecc0a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing5.C?ref=6c3f4949eeda138f5ffa0377443d626951ecc0a7", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/38798, DR 770\n+// { dg-options -std=c++0x }\n+\n+struct A {};\n+auto foo() -> struct A {}\n+\n+enum B {};\n+auto bar() -> enum B {}\n+\n+auto baz() -> struct C {} {}\t// { dg-error \"\" }"}]}