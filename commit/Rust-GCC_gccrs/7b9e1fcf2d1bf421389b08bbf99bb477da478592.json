{"sha": "7b9e1fcf2d1bf421389b08bbf99bb477da478592", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5ZTFmY2YyZDFiZjQyMTM4OWIwOGJiZjk5YmI0NzdkYTQ3ODU5Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-09-07T16:52:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-09-07T16:52:26Z"}, "message": "genattrtab.c (attr_printf): First arg is unsigned.\n\n\t* genattrtab.c (attr_printf): First arg is unsigned.\n\tClean up formatting of callers.\n\nFrom-SVN: r45469", "tree": {"sha": "8158dd39b5792996fd718b6f01d2f403a4c9031d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8158dd39b5792996fd718b6f01d2f403a4c9031d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b9e1fcf2d1bf421389b08bbf99bb477da478592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9e1fcf2d1bf421389b08bbf99bb477da478592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9e1fcf2d1bf421389b08bbf99bb477da478592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9e1fcf2d1bf421389b08bbf99bb477da478592/comments", "author": null, "committer": null, "parents": [{"sha": "08dc0e10f4c6528bdb8207230edbbc5e8e2fce2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08dc0e10f4c6528bdb8207230edbbc5e8e2fce2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08dc0e10f4c6528bdb8207230edbbc5e8e2fce2f"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "26367f4137c0793b208a1063109cb857b6cfcbed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9e1fcf2d1bf421389b08bbf99bb477da478592/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9e1fcf2d1bf421389b08bbf99bb477da478592/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b9e1fcf2d1bf421389b08bbf99bb477da478592", "patch": "@@ -1,3 +1,8 @@\n+Fri Sep  7 12:56:26 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* genattrtab.c (attr_printf): First arg is unsigned.\n+\tClean up formatting of callers.\n+\n 2001-09-06  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/mips/mips.c (override_options): Allow abi32 with 64 bit"}, {"sha": "3006ec81411bc121cb2728ae72e51bba8cba74a7", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9e1fcf2d1bf421389b08bbf99bb477da478592/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9e1fcf2d1bf421389b08bbf99bb477da478592/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=7b9e1fcf2d1bf421389b08bbf99bb477da478592", "patch": "@@ -365,7 +365,7 @@ rtx pic_offset_table_rtx;\n static void attr_hash_add_rtx\tPARAMS ((int, rtx));\n static void attr_hash_add_string PARAMS ((int, char *));\n static rtx attr_rtx\t\tPARAMS ((enum rtx_code, ...));\n-static char *attr_printf\tPARAMS ((int, const char *, ...))\n+static char *attr_printf\tPARAMS ((unsigned int, const char *, ...))\n   ATTRIBUTE_PRINTF_2;\n static char *attr_string        PARAMS ((const char *, int));\n static rtx check_attr_test\tPARAMS ((rtx, int, int));\n@@ -743,15 +743,15 @@ attr_rtx VPARAMS ((enum rtx_code code, ...))\n    rtx attr_printf (len, format, [arg1, ..., argn])  */\n \n static char *\n-attr_printf VPARAMS ((register int len, const char *fmt, ...))\n+attr_printf VPARAMS ((register unsigned int len, const char *fmt, ...))\n {\n   char str[256];\n \n   VA_OPEN (p, fmt);\n-  VA_FIXEDARG (p, int, len);\n+  VA_FIXEDARG (p, unsigned int, len);\n   VA_FIXEDARG (p, const char *, fmt);\n   \n-  if (len > (sizeof(str) - 1)) /* leave room for \\0 */\n+  if (len > sizeof str - 1) /* leave room for \\0. */\n     abort ();\n \n   vsprintf (str, fmt, p);\n@@ -1637,9 +1637,8 @@ expand_delays ()\n \t  newexp = attr_rtx (IF_THEN_ELSE, condexp,\n \t\t\t     make_numeric_value (1), make_numeric_value (0));\n \n-\t  p = attr_printf (sizeof (\"*delay__\") + MAX_DIGITS * 2,\n-\t\t\t   \"*delay_%d_%d\",\n-\t\t\t   delay->num, i / 3);\n+\t  p = attr_printf (sizeof \"*delay__\" + MAX_DIGITS * 2,\n+\t\t\t   \"*delay_%d_%d\", delay->num, i / 3);\n \t  make_internal_attr (p, newexp, 1);\n \n \t  if (have_annul_true)\n@@ -1649,7 +1648,7 @@ expand_delays ()\n \t      newexp = attr_rtx (IF_THEN_ELSE, condexp,\n \t\t\t\t make_numeric_value (1),\n \t\t\t\t make_numeric_value (0));\n-\t      p = attr_printf (sizeof (\"*annul_true__\") + MAX_DIGITS * 2,\n+\t      p = attr_printf (sizeof \"*annul_true__\" + MAX_DIGITS * 2,\n \t\t\t       \"*annul_true_%d_%d\", delay->num, i / 3);\n \t      make_internal_attr (p, newexp, 1);\n \t    }\n@@ -1661,7 +1660,7 @@ expand_delays ()\n \t      newexp = attr_rtx (IF_THEN_ELSE, condexp,\n \t\t\t\t make_numeric_value (1),\n \t\t\t\t make_numeric_value (0));\n-\t      p = attr_printf (sizeof (\"*annul_false__\") + MAX_DIGITS * 2,\n+\t      p = attr_printf (sizeof \"*annul_false__\" + MAX_DIGITS * 2,\n \t\t\t       \"*annul_false_%d_%d\", delay->num, i / 3);\n \t      make_internal_attr (p, newexp, 1);\n \t    }\n@@ -1914,7 +1913,8 @@ expand_units ()\n \t\t\t\t\t   != unit->issue_delay.max);\n \t  if (unit->needs_conflict_function)\n \t    {\n-\t      str = attr_printf (strlen (unit->name) + sizeof (\"*_cost_\") + MAX_DIGITS,\n+\t      str = attr_printf ((strlen (unit->name) + sizeof \"*_cost_\"\n+\t\t\t\t  + MAX_DIGITS),\n \t\t\t\t \"*%s_cost_%d\", unit->name, op->num);\n \t      make_internal_attr (str, issue_exp, 1);\n \t    }\n@@ -2143,7 +2143,8 @@ expand_units ()\n \t\t}\n \n \t      /* Make an attribute for use in the blockage function.  */\n-\t      str = attr_printf (strlen (unit->name) + sizeof (\"*_block_\") + MAX_DIGITS,\n+\t      str = attr_printf ((strlen (unit->name) + sizeof \"*_block_\"\n+\t\t\t\t  + MAX_DIGITS),\n \t\t\t\t \"*%s_block_%d\", unit->name, op->num);\n \t      make_internal_attr (str, blockage, 1);\n \t    }\n@@ -2176,12 +2177,13 @@ expand_units ()\n \t      newexp = operate_exp (RANGE_OP, min_blockage, max_blockage);\n \t      newexp = simplify_knowing (newexp, unit->condexp);\n \n-\t      str = attr_printf (strlen (unit->name) + sizeof (\"*_unit_blockage_range\"),\n+\t      str = attr_printf ((strlen (unit->name)\n+\t\t\t\t  + sizeof \"*_unit_blockage_range\"),\n \t\t\t\t \"*%s_unit_blockage_range\", unit->name);\n \t      make_internal_attr (str, newexp, 20);\n \t    }\n \n-\t  str = attr_printf (strlen (unit->name) + sizeof (\"*_unit_ready_cost\"),\n+\t  str = attr_printf (strlen (unit->name) + sizeof \"*_unit_ready_cost\",\n \t\t\t     \"*%s_unit_ready_cost\", unit->name);\n \t}\n       else\n@@ -2223,7 +2225,7 @@ expand_units ()\n \t}\n \n       /* Simplifying caseexp with simplify_by_exploding doesn't win.  */\n-      str = attr_printf (strlen (unit->name) + sizeof (\"*_cases\"),\n+      str = attr_printf (strlen (unit->name) + sizeof \"*_cases\",\n \t\t\t \"*%s_cases\", unit->name);\n       make_internal_attr (str, caseexp, 1);\n     }"}]}