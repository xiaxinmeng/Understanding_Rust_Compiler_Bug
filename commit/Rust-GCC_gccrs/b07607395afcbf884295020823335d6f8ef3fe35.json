{"sha": "b07607395afcbf884295020823335d6f8ef3fe35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA3NjA3Mzk1YWZjYmY4ODQyOTUwMjA4MjMzMzVkNmY4ZWYzZmUzNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T13:23:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T13:23:55Z"}, "message": "[multiple changes]\n\n2010-06-17  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_ugn.texi: Update gnatcheck doc.\n\n2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Build_Incomplete_Type_Declaration): If there is an\n\tincomplete view of the type that is not tagged, and the full type is a\n\ttagged extension, create class_wide type now, and warn that the\n\tincomplete view should be tagged as well.\n\nFrom-SVN: r160913", "tree": {"sha": "79e33f2acfa690224de1e65c4ba3fe37f73caf9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79e33f2acfa690224de1e65c4ba3fe37f73caf9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b07607395afcbf884295020823335d6f8ef3fe35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07607395afcbf884295020823335d6f8ef3fe35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07607395afcbf884295020823335d6f8ef3fe35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07607395afcbf884295020823335d6f8ef3fe35/comments", "author": null, "committer": null, "parents": [{"sha": "aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9ea6a1ac7e1eb68bdc789ab6855e6bdca554f4"}], "stats": {"total": 1827, "additions": 26, "deletions": 1801}, "files": [{"sha": "b5944eea6f2b7bcf5264a8174c45289314d13da4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07607395afcbf884295020823335d6f8ef3fe35/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07607395afcbf884295020823335d6f8ef3fe35/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b07607395afcbf884295020823335d6f8ef3fe35", "patch": "@@ -1,3 +1,14 @@\n+2010-06-17  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_ugn.texi: Update gnatcheck doc.\n+\n+2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Incomplete_Type_Declaration): If there is an\n+\tincomplete view of the type that is not tagged, and the full type is a\n+\ttagged extension, create class_wide type now, and warn that the\n+\tincomplete view should be tagged as well.\n+\n 2010-06-17  Vincent Celier  <celier@adacore.com>\n \n \t* gnatcmd.adb (Non_VMS_Usage): Do not issue usage for gnat sync."}, {"sha": "2d4c86fbaa88cdda1c81b76c175d8dd5a600e1f3", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 6, "deletions": 1801, "changes": 1807, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07607395afcbf884295020823335d6f8ef3fe35/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07607395afcbf884295020823335d6f8ef3fe35/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=b07607395afcbf884295020823335d6f8ef3fe35", "patch": "@@ -21141,1808 +21141,13 @@ release.\n @end ignore\n \n @noindent\n-The following subsections document the rules implemented in\n-@command{gnatcheck}.\n-The subsection title is the same as the rule identifier, which may be\n-used as a parameter of the @option{+R} or @option{-R} options.\n-\n-\n-@menu\n-* Abstract_Type_Declarations::\n-* Anonymous_Arrays::\n-* Anonymous_Subtypes::\n-* Blocks::\n-* Boolean_Relational_Operators::\n-@ignore\n-* Ceiling_Violations::\n-@end ignore\n-* Complex_Inlined_Subprograms::\n-* Controlled_Type_Declarations::\n-* Declarations_In_Blocks::\n-* Deep_Inheritance_Hierarchies::\n-* Deeply_Nested_Generics::\n-* Deeply_Nested_Inlining::\n-@ignore\n-* Deeply_Nested_Local_Inlining::\n-@end ignore\n-* Default_Parameters::\n-* Direct_Calls_To_Primitives::\n-* Discriminated_Records::\n-* Enumeration_Ranges_In_CASE_Statements::\n-* Exceptions_As_Control_Flow::\n-* Exits_From_Conditional_Loops::\n-* EXIT_Statements_With_No_Loop_Name::\n-* Expanded_Loop_Exit_Names::\n-* Explicit_Full_Discrete_Ranges::\n-* Float_Equality_Checks::\n-* Forbidden_Attributes::\n-* Forbidden_Pragmas::\n-* Function_Style_Procedures::\n-* Generics_In_Subprograms::\n-* GOTO_Statements::\n-* Implicit_IN_Mode_Parameters::\n-* Implicit_SMALL_For_Fixed_Point_Types::\n-* Improperly_Located_Instantiations::\n-* Improper_Returns::\n-* Library_Level_Subprograms::\n-* Local_Packages::\n-@ignore\n-* Improperly_Called_Protected_Entries::\n-@end ignore\n-* Metrics::\n-* Misnamed_Controlling_Parameters::\n-* Misnamed_Identifiers::\n-* Multiple_Entries_In_Protected_Definitions::\n-* Name_Clashes::\n-* Non_Qualified_Aggregates::\n-* Non_Short_Circuit_Operators::\n-* Non_SPARK_Attributes::\n-* Non_Tagged_Derived_Types::\n-* Non_Visible_Exceptions::\n-* Numeric_Literals::\n-* OTHERS_In_Aggregates::\n-* OTHERS_In_CASE_Statements::\n-* OTHERS_In_Exception_Handlers::\n-* Outer_Loop_Exits::\n-* Overloaded_Operators::\n-* Overly_Nested_Control_Structures::\n-* Parameters_Out_Of_Order::\n-* Positional_Actuals_For_Defaulted_Generic_Parameters::\n-* Positional_Actuals_For_Defaulted_Parameters::\n-* Positional_Components::\n-* Positional_Generic_Parameters::\n-* Positional_Parameters::\n-* Predefined_Numeric_Types::\n-* Raising_External_Exceptions::\n-* Raising_Predefined_Exceptions::\n-* Separate_Numeric_Error_Handlers::\n-@ignore\n-* Recursion::\n-* Side_Effect_Functions::\n-@end ignore\n-* Slices::\n-* Too_Many_Parents::\n-* Unassigned_OUT_Parameters::\n-* Uncommented_BEGIN_In_Package_Bodies::\n-* Unconditional_Exits::\n-* Unconstrained_Array_Returns::\n-* Universal_Ranges::\n-* Unnamed_Blocks_And_Loops::\n-@ignore\n-* Unused_Subprograms::\n-@end ignore\n-* USE_PACKAGE_Clauses::\n-* Visible_Components::\n-* Volatile_Objects_Without_Address_Clauses::\n-@end menu\n-\n-\n-@node Abstract_Type_Declarations\n-@subsection @code{Abstract_Type_Declarations}\n-@cindex @code{Abstract_Type_Declarations} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all declarations of abstract types. For an abstract private\n-type, both the private and full type declarations are flagged.\n-\n-This rule has no parameters.\n-\n-\n-@node Anonymous_Arrays\n-@subsection @code{Anonymous_Arrays}\n-@cindex @code{Anonymous_Arrays} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all anonymous array type definitions (by Ada semantics these can only\n-occur in object declarations).\n-\n-This rule has no parameters.\n-\n-@node Anonymous_Subtypes\n-@subsection @code{Anonymous_Subtypes}\n-@cindex @code{Anonymous_Subtypes} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all uses of anonymous subtypes (except cases when subtype indication\n-is a part of a record component definition, and this subtype indication\n-depends on a discriminant). A use of an anonymous subtype is\n-any instance of a subtype indication with a constraint, other than one\n-that occurs immediately within a subtype declaration. Any use of a range\n-other than as a constraint used immediately within a subtype declaration\n-is considered as an anonymous subtype.\n-\n-An effect of this rule is that @code{for} loops such as the following are\n-flagged (since @code{1..N} is formally a ``range''):\n-\n-@smallexample @c ada\n-for I in 1 .. N loop\n-   @dots{}\n-end loop;\n-@end smallexample\n-\n-@noindent\n-Declaring an explicit subtype solves the problem:\n-\n-@smallexample @c ada\n-subtype S is Integer range 1..N;\n-@dots{}\n-for I in S loop\n-   @dots{}\n-end loop;\n-@end smallexample\n-\n-@noindent\n-This rule has no parameters.\n-\n-@node Blocks\n-@subsection @code{Blocks}\n-@cindex @code{Blocks} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each block statement.\n-\n-This rule has no parameters.\n-\n-@node Boolean_Relational_Operators\n-@subsection @code{Boolean_Relational_Operators}\n-@cindex @code{Boolean_Relational_Operators} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each call to a predefined relational operator (``<'', ``>'', ``<='',\n-``>='', ``='' and ``/='') for the predefined Boolean type.\n-(This rule is useful in enforcing the SPARK language restrictions.)\n-\n-Calls to predefined relational operators of any type derived from\n-@code{Standard.Boolean} are not detected.  Calls to user-defined functions\n-with these designators, and uses of operators that are renamings\n-of the predefined relational operators for @code{Standard.Boolean},\n-are likewise not detected.\n-\n-This rule has no parameters.\n-\n-@ignore\n-@node Ceiling_Violations\n-@subsection @code{Ceiling5_Violations} (under construction, GLOBAL)\n-@cindex @code{Ceiling_Violations} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag invocations of a protected operation by a task whose priority exceeds\n-the protected object's ceiling.\n-\n-As of @value{NOW}, this rule has the following limitations:\n-\n-@itemize @bullet\n-\n-@item\n- We consider only pragmas Priority and Interrupt_Priority as means to define\n-  a task/protected operation priority. We do not consider the effect of using\n-  Ada.Dynamic_Priorities.Set_Priority procedure;\n-\n-@item\n- We consider only base task priorities, and no priority inheritance. That is,\n-  we do not make a difference between calls issued during task activation and\n-  execution of the sequence of statements from task body;\n-\n-@item\n- Any situation when the priority of protected operation caller is set by a\n-  dynamic expression (that is, the corresponding Priority or\n-  Interrupt_Priority pragma has a non-static expression as an argument) we\n-  treat as a priority inconsistency (and, therefore, detect this situation).\n-@end itemize\n-\n-@noindent\n-At the moment the notion of the main subprogram is not implemented in\n-gnatcheck, so any pragma Priority in a library level subprogram body (in case\n-if this subprogram can be a main subprogram of a partition) changes the\n-priority of an environment task. So if we have more then one such pragma in\n-the set of processed sources, the pragma that is processed last, defines the\n-priority of an environment task.\n-\n-This rule has no parameters.\n-@end ignore\n-\n-@node Controlled_Type_Declarations\n-@subsection @code{Controlled_Type_Declarations}\n-@cindex @code{Controlled_Type_Declarations} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all declarations of controlled types. A declaration of a private type\n-is flagged if its full declaration declares a controlled type. A declaration\n-of a derived type is flagged if its ancestor type is controlled. Subtype\n-declarations are not checked. A declaration of a type that itself is not a\n-descendant of a type declared in @code{Ada.Finalization} but has a controlled\n-component is not checked.\n-\n-This rule has no parameters.\n-\n-\n-@node Complex_Inlined_Subprograms\n-@subsection @code{Complex_Inlined_Subprograms}\n-@cindex @code{Complex_Inlined_Subprograms} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags a subprogram (or generic subprogram) if\n-pragma Inline is applied to the subprogram and at least one of the following\n-conditions is met:\n-\n-@itemize @bullet\n-@item\n-it contains at least one complex declaration such as a subprogram body,\n-package, task, protected declaration, or a generic instantiation\n-(except instantiation of @code{Ada.Unchecked_Conversion});\n-\n-@item\n-it contains at least one complex statement such as a loop, a case\n-or a if statement, or a short circuit control form;\n-\n-@item\n-the number of statements exceeds\n-a value specified by the @option{N} rule parameter;\n-@end itemize\n-\n-@noindent\n-This rule has the following (mandatory) parameter for the @option{+R} option:\n-\n-@table @emph\n-@item N\n-Positive integer specifying the maximum allowed total number of statements\n-in the subprogram body.\n-@end table\n-\n-\n-@node Declarations_In_Blocks\n-@subsection @code{Declarations_In_Blocks}\n-@cindex @code{Declarations_In_Blocks} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all block statements containing local declarations. A @code{declare}\n-block with an empty @i{declarative_part} or with a @i{declarative part}\n-containing only pragmas and/or @code{use} clauses is not flagged.\n-\n-This rule has no parameters.\n-\n-\n-@node Deep_Inheritance_Hierarchies\n-@subsection @code{Deep_Inheritance_Hierarchies}\n-@cindex @code{Deep_Inheritance_Hierarchies} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags a tagged derived type declaration or an interface type declaration if\n-its depth (in its inheritance\n-hierarchy) exceeds the value specified by the @option{N} rule parameter.\n-\n-The inheritance depth of a tagged type or interface type is defined as 0 for\n-a type  with no parent and no progenitor, and otherwise as 1 + max of the\n-depths of the immediate parent and immediate progenitors.\n-\n-This rule does not flag private extension\n-declarations. In the case of a private extension, the corresponding full\n-declaration is checked.\n-\n-This rule has the following (mandatory) parameter for the @option{+R} option:\n-\n-@table @emph\n-@item N\n-Integer not less than -1 specifying the maximal allowed depth of any inheritance\n-hierarchy. If the rule parameter is set to -1, the rule flags all the declarations\n-of tagged and interface types.\n-@end table\n-\n-\n-@node Deeply_Nested_Generics\n-@subsection @code{Deeply_Nested_Generics}\n-@cindex @code{Deeply_Nested_Generics} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags a generic declaration nested in another generic declaration if\n-the nesting level of the inner generic exceeds\n-a value specified by the @option{N} rule parameter.\n-The nesting level is the number of generic declaratons that enclose the given\n-(generic) declaration. Formal packages are not flagged by this rule.\n-\n-This rule has the following (mandatory) parameters for the @option{+R} option:\n-\n-@table @emph\n-@item N\n-Positive integer specifying the maximal allowed nesting level\n-for a generic declaration.\n-@end table\n-\n-@node Deeply_Nested_Inlining\n-@subsection @code{Deeply_Nested_Inlining}\n-@cindex @code{Deeply_Nested_Inlining} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags a subprogram (or generic subprogram) if\n-pragma Inline has been applied to the subprogram but the subprogram\n-calls to another inlined subprogram that results in nested inlining\n-with nesting depth exceeding the value specified by the\n-@option{N} rule parameter.\n-\n-This rule requires the global analysis of all the compilation units that\n-are @command{gnatcheck} arguments; such analysis may affect the tool's\n-performance.\n-\n-This rule has the following (mandatory) parameter for the @option{+R} option:\n-\n-@table @emph\n-@item N\n-Positive integer specifying the maximal allowed level of nested inlining.\n-@end table\n-\n-\n-@ignore\n-@node Deeply_Nested_Local_Inlining\n-@subsection @code{Deeply_Nested_Local_Inlining}\n-@cindex @code{Deeply_Nested_Local_Inlining} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags a subprogram body if a pragma @code{Inline} is applied to the\n-corresponding subprogram (or generic subprogram) and the body contains a call\n-to another inlined subprogram that results in nested inlining with nesting\n-depth more then a value specified by the @option{N} rule parameter.\n-This rule is similar to @code{Deeply_Nested_Inlining} rule, but it\n-assumes that calls to subprograms in\n-with'ed units are not inlided, so all the analysis of the depth of inlining is\n-limited by the compilation unit where the subprogram body is located and the\n-units it depends semantically upon. Such analysis may be usefull for the case\n-when neiter @option{-gnatn} nor @option{-gnatN} option is used when building\n-the executable.\n-\n-This rule has the following (mandatory) parameters for the @option{+R} option:\n-\n-@table @emph\n-@item N\n-Positive integer specifying the maximal allowed level of nested inlining.\n-@end table\n-\n-@end ignore\n-\n-@node Default_Parameters\n-@subsection @code{Default_Parameters}\n-@cindex @code{Default_Parameters} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all default expressions for subprogram parameters. Parameter\n-declarations of formal and generic subprograms are also checked.\n-\n-This rule has no parameters.\n-\n-\n-@node Direct_Calls_To_Primitives\n-@subsection @code{Direct_Calls_To_Primitives}\n-@cindex @code{Direct_Calls_To_Primitives} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags any non-dispatching call to a dispatching primitive operation, except\n-for the common idiom where a primitive subprogram for a tagged type\n-directly calls the same primitive subprogram of the type's immediate ancestor.\n-\n-This rule has no parameters.\n-\n-\n-@node Discriminated_Records\n-@subsection @code{Discriminated_Records}\n-@cindex @code{Discriminated_Records} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all declarations of record types with discriminants. Only the\n-declarations of record and record extension types are checked. Incomplete,\n-formal, private, derived and private extension type declarations are not\n-checked. Task and protected type declarations also are not checked.\n-\n-This rule has no parameters.\n-\n-\n-@node Enumeration_Ranges_In_CASE_Statements\n-@subsection @code{Enumeration_Ranges_In_CASE_Statements}\n-@cindex @code{Enumeration_Ranges_In_CASE_Statements} (for @command{gnatcheck})\n-\n-@noindent\n-Flag each use of a range of enumeration literals as a choice in a\n-@code{case} statement.\n-All forms for specifying a range (explicit ranges\n-such as @code{A .. B}, subtype marks and @code{'Range} attributes) are flagged.\n-An enumeration range is\n-flagged even if contains exactly one enumeration value or no values at all. A\n-type derived from an enumeration type is considered as an enumeration type.\n-\n-This rule helps prevent maintenance problems arising from adding an\n-enumeration value to a type and having it implicitly handled by an existing\n-@code{case} statement with an enumeration range that includes the new literal.\n-\n-This rule has no parameters.\n-\n-\n-@node Exceptions_As_Control_Flow\n-@subsection @code{Exceptions_As_Control_Flow}\n-@cindex @code{Exceptions_As_Control_Flow} (for @command{gnatcheck})\n-\n-@noindent\n-Flag each place where an exception is explicitly raised and handled in the\n-same subprogram body. A @code{raise} statement in an exception handler,\n-package body, task body or entry body is not flagged.\n-\n-The rule has no parameters.\n-\n-@node Exits_From_Conditional_Loops\n-@subsection @code{Exits_From_Conditional_Loops}\n-@cindex @code{Exits_From_Conditional_Loops} (for @command{gnatcheck})\n-\n-@noindent\n-Flag any exit statement if it transfers the control out of a @code{for} loop\n-or a @code{while} loop. This includes cases when the @code{exit} statement\n-applies to a @code{FOR} or @code{while} loop, and cases when it is enclosed\n-in some @code{for} or @code{while} loop, but transfers the control from some\n-outer (inconditional) @code{loop} statement.\n-\n-The rule has no parameters.\n-\n-\n-@node EXIT_Statements_With_No_Loop_Name\n-@subsection @code{EXIT_Statements_With_No_Loop_Name}\n-@cindex @code{EXIT_Statements_With_No_Loop_Name} (for @command{gnatcheck})\n-\n-@noindent\n-Flag each @code{exit} statement that does not specify the name of the loop\n-being exited.\n-\n-The rule has no parameters.\n-\n-\n-@node Expanded_Loop_Exit_Names\n-@subsection @code{Expanded_Loop_Exit_Names}\n-@cindex @code{Expanded_Loop_Exit_Names} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all expanded loop names in @code{exit} statements.\n-\n-This rule has no parameters.\n-\n-@node Explicit_Full_Discrete_Ranges\n-@subsection @code{Explicit_Full_Discrete_Ranges}\n-@cindex @code{Explicit_Full_Discrete_Ranges} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each discrete range that has the form @code{A'First .. A'Last}.\n-\n-This rule has no parameters.\n-\n-@node Float_Equality_Checks\n-@subsection @code{Float_Equality_Checks}\n-@cindex @code{Float_Equality_Checks} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all calls to the predefined equality operations for floating-point types.\n-Both ``@code{=}'' and ``@code{/=}'' operations are checked.\n-User-defined equality operations are not flagged, nor are ``@code{=}''\n-and ``@code{/=}'' operations for fixed-point types.\n-\n-This rule has no parameters.\n-\n-\n-@node Forbidden_Attributes\n-@subsection @code{Forbidden_Attributes}\n-@cindex @code{Forbidden_Attributes} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each use of the specified attributes. The attributes to be detected are\n-named in the rule's parameters.\n-\n-This rule has the following parameters:\n-\n-@itemize @bullet\n-@item For the @option{+R} option\n-\n-@table @asis\n-@item @emph{Attribute_Designator}\n-Adds the specified attribute to the set of attributes to be detected and sets\n-the detection checks for all the specified attributes ON.\n-If @emph{Attribute_Designator}\n-does not denote any attribute defined in the Ada standard\n-or in\n-@ref{Implementation Defined Attributes,,, gnat_rm, GNAT Reference\n-Manual}, it is treated as the name of unknown attribute.\n-\n-@item @code{GNAT}\n-All the GNAT-specific attributes are detected; this sets\n-the detection checks for all the specified attributes ON.\n-\n-@item @code{ALL}\n-All attributes are detected; this sets the rule ON.\n-@end table\n-\n-@item For the @option{-R} option\n-@table @asis\n-@item @emph{Attribute_Designator}\n-Removes the specified attribute from the set of attributes to be\n-detected without affecting detection checks for\n-other attributes. If @emph{Attribute_Designator} does not correspond to any\n-attribute defined in the Ada standard or in\n-@ref{Implementation Defined Attributes,,, gnat_rm, GNAT Reference Manual},\n-this option is treated as turning OFF detection of all unknown attributes.\n-\n-@item GNAT\n-Turn OFF detection of all GNAT-specific attributes\n-\n-@item ALL\n-Clear the list of the attributes to be detected and\n-turn the rule OFF.\n-@end table\n-@end itemize\n-\n-@noindent\n-Parameters are not case sensitive. If @emph{Attribute_Designator} does not\n-have the syntax of an Ada identifier and therefore can not be considered as a\n-(part of an) attribute designator, a diagnostic message is generated and the\n-corresponding parameter is ignored. (If an attribute allows a static\n-expression to be a part of the attribute designator, this expression is\n-ignored by this rule.)\n-\n-When more then one parameter is given in the same rule option, the parameters\n-must be separated by commas.\n-\n-If more then one option for this rule is specified for the gnatcheck call, a\n-new option overrides the previous one(s).\n-\n-The @option{+R} option with no parameters turns the rule ON, with the set of\n-attributes to be detected defined by the previous rule options.\n-(By default this set is empty, so if the only option specified for the rule is\n-@option{+RForbidden_Attributes} (with\n-no parameter), then the rule is enabled, but it does not detect anything).\n-The @option{-R} option with no parameter turns the rule OFF, but it does not\n-affect the set of attributes to be detected.\n-\n-\n-@node Forbidden_Pragmas\n-@subsection @code{Forbidden_Pragmas}\n-@cindex @code{Forbidden_Pragmas} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each use of the specified pragmas.  The pragmas to be detected\n-are named in the rule's  parameters.\n-\n-This rule has the following parameters:\n-\n-@itemize @bullet\n-@item For the @option{+R} option\n-\n-@table @asis\n-@item @emph{Pragma_Name}\n-Adds the specified pragma to the set of pragmas to be\n-checked and sets the checks for all the specified pragmas\n-ON. @emph{Pragma_Name} is treated as a name of a pragma. If it\n-does not correspond to any pragma name defined in the Ada\n-standard or to the name of a GNAT-specific pragma defined\n-in @ref{Implementation Defined Pragmas,,, gnat_rm, GNAT Reference\n-Manual}, it is treated as the name of unknown pragma.\n-\n-@item @code{GNAT}\n-All the GNAT-specific pragmas are detected; this sets\n-the checks for all the specified pragmas ON.\n-\n-@item @code{ALL}\n-All pragmas are detected; this sets the rule ON.\n-@end table\n-\n-@item For the @option{-R} option\n-@table @asis\n-@item @emph{Pragma_Name}\n-Removes the specified pragma from the set of pragmas to be\n-checked without affecting checks for\n-other pragmas. @emph{Pragma_Name} is treated as a name\n-of a pragma. If it does not correspond to any pragma\n-defined in the Ada standard or to any name defined in\n-@ref{Implementation Defined Pragmas,,, gnat_rm, GNAT Reference Manual},\n-this option is treated as turning OFF detection of all unknown pragmas.\n-\n-@item GNAT\n-Turn OFF detection of all GNAT-specific pragmas\n-\n-@item ALL\n-Clear the list of the pragmas to be detected and\n-turn the rule OFF.\n-@end table\n-@end itemize\n-\n-@noindent\n-Parameters are not case sensitive. If @emph{Pragma_Name} does not have\n-the syntax of an Ada identifier and therefore can not be considered\n-as a pragma name, a diagnostic message is generated and the corresponding\n-parameter is ignored.\n-\n-When more then one parameter is given in the same rule option, the parameters\n-must be separated by a comma.\n-\n-If more then one option for this rule is specified for the @command{gnatcheck}\n-call, a new option overrides the previous one(s).\n-\n-The @option{+R} option with no parameters turns the rule ON with the set of\n-pragmas to be detected defined by the previous rule options.\n-(By default this set is empty, so if the only option specified for the rule is\n-@option{+RForbidden_Pragmas} (with\n-no parameter), then the rule is enabled, but it does not detect anything).\n-The @option{-R} option with no parameter turns the rule OFF, but it does not\n-affect the set of pragmas to be detected.\n-\n-\n-\n-\n-@node Function_Style_Procedures\n-@subsection @code{Function_Style_Procedures}\n-@cindex @code{Function_Style_Procedures} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each procedure that can be rewritten as a function. A procedure can be\n-converted into a function if it has exactly one parameter of mode @code{out}\n-and no parameters of mode @code{in out}. Procedure declarations,\n-formal procedure declarations, and generic procedure declarations are always\n-checked. Procedure\n-bodies and body stubs are flagged only if they do not have corresponding\n-separate declarations. Procedure renamings and procedure instantiations are\n-not flagged.\n-\n-If a procedure can be rewritten as a function, but its @code{out} parameter is\n-of a limited type, it is not flagged.\n-\n-Protected procedures are not flagged. Null procedures also are not flagged.\n-\n-This rule has no parameters.\n-\n-\n-@node Generics_In_Subprograms\n-@subsection @code{Generics_In_Subprograms}\n-@cindex @code{Generics_In_Subprograms} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each declaration of a generic unit in a subprogram. Generic\n-declarations in the bodies of generic subprograms are also flagged.\n-A generic unit nested in another generic unit is not flagged.\n-If a generic unit is\n-declared in a local package that is declared in a subprogram body, the\n-generic unit is flagged.\n-\n-This rule has no parameters.\n-\n-\n-@node GOTO_Statements\n-@subsection @code{GOTO_Statements}\n-@cindex @code{GOTO_Statements} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each occurrence of a @code{goto} statement.\n-\n-This rule has no parameters.\n-\n-\n-@node Implicit_IN_Mode_Parameters\n-@subsection @code{Implicit_IN_Mode_Parameters}\n-@cindex @code{Implicit_IN_Mode_Parameters} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each occurrence of a formal parameter with an implicit @code{in} mode.\n-Note that @code{access} parameters, although they technically behave\n-like @code{in} parameters, are not flagged.\n-\n-This rule has no parameters.\n-\n-\n-@node Implicit_SMALL_For_Fixed_Point_Types\n-@subsection @code{Implicit_SMALL_For_Fixed_Point_Types}\n-@cindex @code{Implicit_SMALL_For_Fixed_Point_Types} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each fixed point type declaration that lacks an explicit\n-representation  clause to define its @code{'Small} value.\n-Since @code{'Small} can be  defined only for ordinary fixed point types,\n-decimal fixed point type declarations are not checked.\n-\n-This rule has no parameters.\n-\n-\n-@node Improperly_Located_Instantiations\n-@subsection @code{Improperly_Located_Instantiations}\n-@cindex @code{Improperly_Located_Instantiations} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all generic instantiations in library-level package specs\n-(including library generic packages) and in all subprogram bodies.\n-\n-Instantiations in task and entry bodies are not flagged. Instantiations in the\n-bodies of protected subprograms are flagged.\n-\n-This rule has no parameters.\n-\n-\n-\n-@node Improper_Returns\n-@subsection @code{Improper_Returns}\n-@cindex @code{Improper_Returns} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each explicit @code{return} statement in procedures, and\n-multiple @code{return} statements in functions.\n-Diagnostic messages are generated for all @code{return} statements\n-in a procedure (thus each procedure must be written so that it\n-returns implicitly at the end of its statement part),\n-and for all @code{return} statements in a function after the first one.\n-This rule supports the stylistic convention that each subprogram\n-should have no more than one point of normal return.\n-\n-This rule has no parameters.\n-\n-\n-@node Library_Level_Subprograms\n-@subsection @code{Library_Level_Subprograms}\n-@cindex @code{Library_Level_Subprograms} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all library-level subprograms (including generic subprogram instantiations).\n-\n-This rule has no parameters.\n-\n-\n-@node Local_Packages\n-@subsection @code{Local_Packages}\n-@cindex @code{Local_Packages} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all local packages declared in package and generic package\n-specs.\n-Local packages in bodies are not flagged.\n-\n-This rule has no parameters.\n-\n-@ignore\n-@node Improperly_Called_Protected_Entries\n-@subsection @code{Improperly_Called_Protected_Entries} (under construction, GLOBAL)\n-@cindex @code{Improperly_Called_Protected_Entries} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each protected entry that can be called from more than one task.\n-\n-This rule has no parameters.\n-@end ignore\n-\n-@node Metrics\n-@subsection @code{Metrics}\n-@cindex @code{Metrics} rule (for @command{gnatcheck})\n-\n-@noindent\n-There is a set of checks based on computing a metric value and comparing the\n-result with the specified upper (or lower, depending on a specific metric)\n-value specified for a given metric. A construct is flagged if a given metric\n-is applicable (can be computed) for it and the computed value is greater\n-then (lover then) the specified upper (lower) bound.\n-\n-The name of any metric-based rule consists of the prefix @code{Metrics_}\n-followed by the name of the corresponding metric (see the table below).\n-For @option{+R} option, each metric-based rule has a numeric parameter\n-specifying the bound (integer or real, depending on a metric), @option{-R}\n-option for metric rules does not have a parameter.\n-\n-The following table shows the metric names for that the corresponding\n-metrics-based checks are supported by gnatcheck, including the\n-constraint that must be satisfied by the bound that is specified for the check\n-and what bound - upper (U) or lower (L) - should be specified.\n-\n-@multitable {@code{Cyclomatic_Complexity}}{Cyclomatic complexity}{Positive integer}\n-@ifnothtml\n-@headitem Check Name @tab Description @tab Bounds Value\n-@end ifnothtml\n-@ifhtml\n-@item @b{Check Name} @tab @b{Description} @tab @b{Bounds Value}\n-@end ifhtml\n-@c Above conditional code is workaround to bug in texi2html (Feb 2008)\n-@item @code{Essential_Complexity} @tab Essential complexity @tab Positive integer (U)\n-@item @code{Cyclomatic_Complexity} @tab Cyclomatic complexity @tab Positive integer (U)\n-@item @code{LSLOC} @tab Logical Source Lines of Code @tab Positive integer (U)\n-@end multitable\n-\n-@noindent\n-The meaning and the computed values for all these metrics are exactly\n-the same as for the corresponding metrics in @command{gnatmetric}.\n-\n-@emph{Example:} the rule\n-@smallexample\n-+RMetrics_Cyclomatic_Complexity : 7\n-@end smallexample\n-@noindent\n-means that all bodies with cyclomatic complexity exceeding 7 will be flagged.\n-\n-To turn OFF the check for cyclomatic complexity metric, use the following option:\n-@smallexample\n--RMetrics_Cyclomatic_Complexity\n-@end smallexample\n-\n-\n-@node Misnamed_Controlling_Parameters\n-@subsection @code{Misnamed_Controlling_Parameters}\n-@cindex @code{Misnamed_Controlling_Parameters} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags a declaration of a dispatching operation, if the first parameter is\n-not a controlling one and its name is not @code{This} (the check for\n-parameter name is not case-sensitive). Declarations of dispatching functions\n-with controlling result and no controlling parameter are never flagged.\n-\n-A subprogram body declaration, subprogram renaming declaration or subprogram\n-body stub is flagged only if it is not a completion of a prior subprogram\n-declaration.\n-\n-This rule has no parameters.\n-\n-\n-\n-@node Misnamed_Identifiers\n-@subsection @code{Misnamed_Identifiers}\n-@cindex @code{Misnamed_Identifiers} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag the declaration of each identifier that does not have a suffix\n-corresponding to the kind of entity being declared.\n-The following declarations are checked:\n-\n-@itemize @bullet\n-@item\n-type declarations\n-\n-@item\n-subtype declarations\n-\n-@item\n-constant declarations (but not number declarations)\n-\n-@item\n-package renaming declarations (but not generic package renaming\n-declarations)\n-@end itemize\n-\n-@noindent\n-This rule may have parameters. When used without parameters, the rule enforces\n-the following checks:\n-\n-@itemize @bullet\n-@item\n-type-defining names end with @code{_T}, unless the type is an access type,\n-in which case the suffix must be @code{_A}\n-@item\n-constant names end with @code{_C}\n-@item\n-names defining package renamings end with @code{_R}\n-@end itemize\n-\n-@noindent\n-Defining identifiers from incomplete type declarations are never flagged.\n-\n-For a private type declaration (including private extensions), the defining\n-identifier from the private type declaration is checked against the type\n-suffix (even if the corresponding full declaration is an access type\n-declaration), and the defining identifier from the corresponding full type\n-declaration is not checked.\n-\n-@noindent\n-For a deferred constant, the defining name in the corresponding full constant\n-declaration is not checked.\n-\n-Defining names of formal types are not checked.\n-\n-The rule may have the following parameters:\n-\n-@itemize @bullet\n-@item\n-For the @option{+R} option:\n-@table @code\n-@item Default\n-Sets the default listed above for all the names to be checked.\n-\n-@item Type_Suffix=@emph{string}\n-Specifies the suffix for a type name.\n-\n-@item Access_Suffix=@emph{string}\n-Specifies the suffix for an access type name. If\n-this parameter is set, it overrides for access\n-types the suffix set by the @code{Type_Suffix} parameter.\n-For access types, @emph{string} may have the following format:\n-@emph{suffix1(suffix2)}. That means that an access type name\n-should have the @emph{suffix1} suffix except for the case when\n-the designated type is also an access type, in this case the\n-type name should have the @emph{suffix1 & suffix2} suffix.\n-\n-@item Class_Access_Suffix=@emph{string}\n-Specifies the suffix for the name of an access type that points to some class-wide\n-type. If this parameter is set, it overrides for such access\n-types the suffix set by the @code{Type_Suffix} or @code{Access_Suffix}\n-parameter.\n-\n-@item Class_Subtype_Suffix=@emph{string}\n-Specifies the suffix for the name of a subtype that denotes a class-wide type.\n-\n-@item Constant_Suffix=@emph{string}\n-Specifies the suffix for a constant name.\n-\n-@item Renaming_Suffix=@emph{string}\n-Specifies the suffix for a package renaming name.\n-@end table\n-\n-@item\n-For the @option{-R} option:\n-@table @code\n-@item All_Suffixes\n-Remove all the suffixes specified for the\n-identifier suffix checks, whether by default or\n-as specified by other rule parameters. All the\n-checks for this rule are disabled as a result.\n-\n-@item Type_Suffix\n-Removes the suffix specified for types. This\n-disables checks for types but does not disable\n-any other checks for this rule (including the\n-check for access type names if @code{Access_Suffix} is\n-set).\n-\n-@item Access_Suffix\n-Removes the suffix specified for access types.\n-This disables checks for access type names but\n-does not disable any other checks for this rule.\n-If @code{Type_Suffix} is set, access type names are\n-checked as ordinary type names.\n-\n-@item Class_Access_Suffix\n-Removes the suffix specified for access types pointing to class-wide\n-type. This disables specific checks for names of access types pointing to\n-class-wide types but does not disable any other checks for this rule.\n-If @code{Type_Suffix} is set, access type names are\n-checked as ordinary type names. If @code{Access_Suffix} is set, these\n-access types are checked as any other access type name.\n-\n-@item Class_Subtype_Suffix=@emph{string}\n-Removes the suffix specified for subtype names.\n-This disables checks for subtype names but\n-does not disable any other checks for this rule.\n-\n-@item Constant_Suffix\n-Removes the suffix specified for constants. This\n-disables checks for constant names but does not\n-disable any other checks for this rule.\n-\n-@item Renaming_Suffix\n-Removes the suffix specified for package\n-renamings. This disables checks for package\n-renamings but does not disable any other checks\n-for this rule.\n-@end table\n-@end itemize\n-\n-@noindent\n-If more than one parameter is used, parameters must be separated by commas.\n-\n-If more than one  option is specified for the @command{gnatcheck} invocation,\n-a new option overrides the previous one(s).\n-\n-The @option{+RMisnamed_Identifiers} option (with no parameter) enables\n-checks for all the\n-name suffixes specified by previous options used for this rule.\n-\n-The @option{-RMisnamed_Identifiers} option (with no parameter) disables\n-all the checks but keeps\n-all the suffixes specified by previous options used for this rule.\n-\n-The @emph{string} value must be a valid suffix for an Ada identifier (after\n-trimming all the leading and trailing space characters, if any).\n-Parameters are not case sensitive, except the @emph{string} part.\n-\n-If any error is detected in a rule parameter, the parameter is ignored.\n-In such a case the options that are set for the rule are not\n-specified.\n-\n-\n-\n-@node Multiple_Entries_In_Protected_Definitions\n-@subsection @code{Multiple_Entries_In_Protected_Definitions}\n-@cindex @code{Multiple_Entries_In_Protected_Definitions} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each protected definition (i.e., each protected object/type declaration)\n-that defines more than one entry.\n-Diagnostic messages are generated for all the entry declarations\n-except the first one. An entry family is counted as one entry. Entries from\n-the private part of the protected definition are also checked.\n-\n-This rule has no parameters.\n-\n-@node Name_Clashes\n-@subsection @code{Name_Clashes}\n-@cindex @code{Name_Clashes} rule (for @command{gnatcheck})\n-\n-@noindent\n-Check that certain names are not used as defining identifiers. To activate\n-this rule, you need to supply a reference to the dictionary file(s) as a rule\n-parameter(s) (more then one dictionary file can be specified). If no\n-dictionary file is set, this rule will not cause anything to be flagged.\n-Only defining occurrences, not references, are checked.\n-The check is not case-sensitive.\n-\n-This rule is enabled by default, but without setting any corresponding\n-dictionary file(s); thus the default effect is to do no checks.\n-\n-A dictionary file is a plain text file. The maximum line length for this file\n-is 1024 characters.  If the line is longer then this limit, extra characters\n-are ignored.\n-\n-Each line can be either an empty line, a comment line, or a line containing\n-a list of identifiers separated by space or HT characters.\n-A comment is an Ada-style comment (from @code{--} to end-of-line).\n-Identifiers must follow the Ada syntax for identifiers.\n-A line containing one or more identifiers may end with a comment.\n-\n-@node Non_Qualified_Aggregates\n-@subsection @code{Non_Qualified_Aggregates}\n-@cindex @code{Non_Qualified_Aggregates} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each non-qualified aggregate.\n-A non-qualified aggregate is an\n-aggregate that is not the expression of a qualified expression. A\n-string literal is not considered an aggregate, but an array\n-aggregate of a string type is considered as a normal aggregate.\n-Aggregates of anonymous array types are not flagged.\n-\n-This rule has no parameters.\n-\n-\n-@node Non_Short_Circuit_Operators\n-@subsection @code{Non_Short_Circuit_Operators}\n-@cindex @code{Non_Short_Circuit_Operators} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all calls to predefined @code{and} and @code{or} operators for\n-any boolean type. Calls to\n-user-defined @code{and} and @code{or} and to operators defined by renaming\n-declarations are not flagged. Calls to predefined @code{and} and @code{or}\n-operators for modular types or boolean array types are not flagged.\n-\n-This rule has no parameters.\n-\n-\n-\n-@node Non_SPARK_Attributes\n-@subsection @code{Non_SPARK_Attributes}\n-@cindex @code{Non_SPARK_Attributes} rule (for @command{gnatcheck})\n-\n-@noindent\n-The SPARK language defines the following subset of Ada 95 attribute\n-designators as those that can be used in SPARK programs. The use of\n-any other attribute is flagged.\n-\n-@itemize @bullet\n-@item @code{'Adjacent}\n-@item @code{'Aft}\n-@item @code{'Base}\n-@item @code{'Ceiling}\n-@item @code{'Component_Size}\n-@item @code{'Compose}\n-@item @code{'Copy_Sign}\n-@item @code{'Delta}\n-@item @code{'Denorm}\n-@item @code{'Digits}\n-@item @code{'Exponent}\n-@item @code{'First}\n-@item @code{'Floor}\n-@item @code{'Fore}\n-@item @code{'Fraction}\n-@item @code{'Last}\n-@item @code{'Leading_Part}\n-@item @code{'Length}\n-@item @code{'Machine}\n-@item @code{'Machine_Emax}\n-@item @code{'Machine_Emin}\n-@item @code{'Machine_Mantissa}\n-@item @code{'Machine_Overflows}\n-@item @code{'Machine_Radix}\n-@item @code{'Machine_Rounds}\n-@item @code{'Max}\n-@item @code{'Min}\n-@item @code{'Model}\n-@item @code{'Model_Emin}\n-@item @code{'Model_Epsilon}\n-@item @code{'Model_Mantissa}\n-@item @code{'Model_Small}\n-@item @code{'Modulus}\n-@item @code{'Pos}\n-@item @code{'Pred}\n-@item @code{'Range}\n-@item @code{'Remainder}\n-@item @code{'Rounding}\n-@item @code{'Safe_First}\n-@item @code{'Safe_Last}\n-@item @code{'Scaling}\n-@item @code{'Signed_Zeros}\n-@item @code{'Size}\n-@item @code{'Small}\n-@item @code{'Succ}\n-@item @code{'Truncation}\n-@item @code{'Unbiased_Rounding}\n-@item @code{'Val}\n-@item @code{'Valid}\n-@end itemize\n-\n-@noindent\n-This rule has no parameters.\n-\n-\n-@node Non_Tagged_Derived_Types\n-@subsection @code{Non_Tagged_Derived_Types}\n-@cindex @code{Non_Tagged_Derived_Types} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all derived type declarations that do not have a record extension part.\n-\n-This rule has no parameters.\n-\n-\n-\n-@node Non_Visible_Exceptions\n-@subsection @code{Non_Visible_Exceptions}\n-@cindex @code{Non_Visible_Exceptions} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag constructs leading to the possibility of propagating an exception\n-out of the scope in which the exception is declared.\n-Two cases are detected:\n-\n-@itemize @bullet\n-@item\n-An exception declaration in a subprogram body, task body or block\n-statement is flagged if the body or statement does not contain a handler for\n-that exception or a handler with an @code{others} choice.\n-\n-@item\n-A @code{raise} statement in an exception handler of a subprogram body,\n-task body or block statement is flagged if it (re)raises a locally\n-declared exception.  This may occur under the following circumstances:\n-@itemize @minus\n-@item\n-it explicitly raises a locally declared exception, or\n-@item\n-it does not specify an exception name (i.e., it is simply @code{raise;})\n-and the enclosing handler contains a locally declared exception in its\n-exception choices.\n-@end itemize\n-@end itemize\n-\n-@noindent\n-Renamings of local exceptions are not flagged.\n-\n-This rule has no parameters.\n-\n-\n-@node Numeric_Literals\n-@subsection @code{Numeric_Literals}\n-@cindex @code{Numeric_Literals} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each use of a numeric literal in an index expression, and in any\n-circumstance except for the following:\n-\n-@itemize @bullet\n-@item\n-a literal occurring in the initialization expression for a constant\n-declaration or a named number declaration, or\n-\n-@item\n-an integer literal that is less than or equal to a value\n-specified by the @option{N} rule parameter.\n-@end itemize\n-\n-@noindent\n-This rule may have the following parameters for the @option{+R} option:\n-\n-@table @asis\n-@item @emph{N}\n-@emph{N} is an integer literal used as the maximal value that is not flagged\n-(i.e., integer literals not exceeding this value are allowed)\n-\n-@item @code{ALL}\n-All integer literals are flagged\n-@end table\n-\n-@noindent\n-If no parameters are set, the maximum unflagged value is 1.\n-\n-The last specified check limit (or the fact that there is no limit at\n-all) is used when multiple @option{+R} options appear.\n-\n-The @option{-R} option for this rule has no parameters.\n-It disables the rule but retains the last specified maximum unflagged value.\n-If the @option{+R} option subsequently appears, this value is used as the\n-threshold for the check.\n-\n-\n-@node OTHERS_In_Aggregates\n-@subsection @code{OTHERS_In_Aggregates}\n-@cindex @code{OTHERS_In_Aggregates} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each use of an @code{others} choice in extension aggregates.\n-In record and array aggregates, an @code{others} choice is flagged unless\n-it is used to refer to all components, or to all but one component.\n-\n-If, in case of a named array aggregate, there are two associations, one\n-with an @code{others} choice and another with a discrete range, the\n-@code{others} choice is flagged even if the discrete range specifies\n-exactly one component; for example, @code{(1..1 => 0, others => 1)}.\n-\n-This rule has no parameters.\n-\n-@node OTHERS_In_CASE_Statements\n-@subsection @code{OTHERS_In_CASE_Statements}\n-@cindex @code{OTHERS_In_CASE_Statements} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag any use of an @code{others} choice in a @code{case} statement.\n-\n-This rule has no parameters.\n-\n-@node OTHERS_In_Exception_Handlers\n-@subsection @code{OTHERS_In_Exception_Handlers}\n-@cindex @code{OTHERS_In_Exception_Handlers} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag any use of an @code{others} choice in an exception handler.\n-\n-This rule has no parameters.\n-\n-\n-@node Outer_Loop_Exits\n-@subsection @code{Outer_Loop_Exits}\n-@cindex @code{Outer_Loop_Exits} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each @code{exit} statement containing a loop name that is not the name\n-of the immediately enclosing @code{loop} statement.\n-\n-This rule has no parameters.\n-\n-\n-@node Overloaded_Operators\n-@subsection @code{Overloaded_Operators}\n-@cindex @code{Overloaded_Operators} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each function declaration that overloads an operator symbol.\n-A function body is checked only if the body does not have a\n-separate spec. Formal functions are also checked. For a\n-renaming declaration, only renaming-as-declaration is checked\n-\n-This rule has no parameters.\n-\n-\n-@node Overly_Nested_Control_Structures\n-@subsection @code{Overly_Nested_Control_Structures}\n-@cindex @code{Overly_Nested_Control_Structures} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each control structure whose nesting level exceeds the value provided\n-in the rule parameter.\n-\n-The control structures checked are the following:\n-\n-@itemize @bullet\n-@item    @code{if} statement\n-@item    @code{case} statement\n-@item    @code{loop} statement\n-@item    Selective accept statement\n-@item    Timed entry call statement\n-@item    Conditional entry call\n-@item    Asynchronous select statement\n-@end itemize\n-\n-@noindent\n-The rule has the following parameter for the @option{+R} option:\n-\n-@table @emph\n-@item N\n-Positive integer specifying the maximal control structure nesting\n-level that is not flagged\n-@end table\n-\n-@noindent\n-If the parameter for the @option{+R} option is not specified or\n-if it is not a positive integer, @option{+R} option is ignored.\n-\n-If more then one  option is specified for the gnatcheck call, the later option and\n-new parameter override the previous one(s).\n-\n-\n-@node Parameters_Out_Of_Order\n-@subsection @code{Parameters_Out_Of_Order}\n-@cindex @code{Parameters_Out_Of_Order} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each subprogram and entry declaration whose formal parameters are not\n-ordered according to the following scheme:\n-\n-@itemize @bullet\n-\n-@item @code{in} and @code{access} parameters first,\n-then @code{in out} parameters,\n-and then @code{out} parameters;\n-\n-@item for @code{in} mode, parameters with default initialization expressions\n-occur last\n-@end itemize\n-\n-@noindent\n-Only the first violation of the described order is flagged.\n-\n-The following constructs are checked:\n-\n-@itemize @bullet\n-@item   subprogram declarations (including null procedures);\n-@item   generic subprogram declarations;\n-@item   formal subprogram declarations;\n-@item   entry declarations;\n-@item   subprogram bodies and subprogram body stubs that do not\n-have separate specifications\n-@end itemize\n-\n-@noindent\n-Subprogram renamings are not checked.\n-\n-This rule has no parameters.\n-\n-\n-@node Positional_Actuals_For_Defaulted_Generic_Parameters\n-@subsection @code{Positional_Actuals_For_Defaulted_Generic_Parameters}\n-@cindex @code{Positional_Actuals_For_Defaulted_Generic_Parameters} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each generic actual parameter corresponding to a generic formal\n-parameter with a default initialization, if positional notation is used.\n-\n-This rule has no parameters.\n-\n-@node Positional_Actuals_For_Defaulted_Parameters\n-@subsection @code{Positional_Actuals_For_Defaulted_Parameters}\n-@cindex @code{Positional_Actuals_For_Defaulted_Parameters} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each actual parameter to a subprogram or entry call where the\n-corresponding formal parameter has a default expression, if positional\n-notation is used.\n-\n-This rule has no parameters.\n-\n-@node Positional_Components\n-@subsection @code{Positional_Components}\n-@cindex @code{Positional_Components} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each array, record and extension aggregate that includes positional\n-notation.\n-\n-This rule has no parameters.\n-\n-\n-@node Positional_Generic_Parameters\n-@subsection @code{Positional_Generic_Parameters}\n-@cindex @code{Positional_Generic_Parameters} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each positional actual generic parameter except for the case when\n-the generic unit being iinstantiated has exactly one generic formal\n-parameter.\n-\n-This rule has no parameters.\n-\n-\n-@node Positional_Parameters\n-@subsection @code{Positional_Parameters}\n-@cindex @code{Positional_Parameters} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each positional parameter notation in a subprogram or entry call,\n-except for the following:\n-\n-@itemize @bullet\n-@item\n-Parameters of calls to of prefix or infix operators are not flagged\n-@item\n-If the called subprogram or entry has only one formal parameter,\n-the parameter of the call is not flagged;\n-@item\n-If a subprogram call uses the @emph{Object.Operation} notation, then\n-@itemize @minus\n-@item\n-the first parameter (that is, @emph{Object}) is not flagged;\n-@item\n-if the called subprogram has only two parameters, the second parameter\n-of the call is not flagged;\n-@end itemize\n-@end itemize\n-\n-@noindent\n-This rule has no parameters.\n-\n-\n-\n-\n-@node Predefined_Numeric_Types\n-@subsection @code{Predefined_Numeric_Types}\n-@cindex @code{Predefined_Numeric_Types} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each explicit use of the name of any numeric type or subtype defined\n-in package @code{Standard}.\n-\n-The rationale for this rule is to detect when the\n-program may depend on platform-specific characteristics of the implementation\n-of the predefined numeric types. Note that this rule is over-pessimistic;\n-for example, a program that uses @code{String} indexing\n-likely needs a variable of type @code{Integer}.\n-Another example is the flagging of predefined numeric types with explicit\n-constraints:\n-\n-@smallexample @c ada\n-    subtype My_Integer is Integer range Left .. Right;\n-    Vy_Var : My_Integer;\n-@end smallexample\n-\n-@noindent\n-This rule detects only numeric types and subtypes defined in\n-@code{Standard}. The use of numeric types and subtypes defined in other\n-predefined packages (such as @code{System.Any_Priority} or\n-@code{Ada.Text_IO.Count}) is not flagged\n-\n-This rule has no parameters.\n-\n-\n-\n-@node Raising_External_Exceptions\n-@subsection @code{Raising_External_Exceptions}\n-@cindex @code{Raising_External_Exceptions} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag any @code{raise} statement, in a program unit declared in a library\n-package or in a generic library package, for an exception that is\n-neither a predefined exception nor an exception that is also declared (or\n-renamed) in the visible part of the package.\n-\n-This rule has no parameters.\n-\n-\n-\n-@node Raising_Predefined_Exceptions\n-@subsection @code{Raising_Predefined_Exceptions}\n-@cindex @code{Raising_Predefined_Exceptions} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each @code{raise} statement that raises a predefined exception\n-(i.e., one of the exceptions @code{Constraint_Error}, @code{Numeric_Error},\n-@code{Program_Error}, @code{Storage_Error}, or @code{Tasking_Error}).\n-\n-This rule has no parameters.\n-\n-@node Separate_Numeric_Error_Handlers\n-@subsection @code{Separate_Numeric_Error_Handlers}\n-@cindex @code{Separate_Numeric_Error_Handlers} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags each exception handler that contains a choice for\n-the predefined @code{Constraint_Error} exception, but does not contain\n-the choice for the predefined @code{Numeric_Error} exception, or\n-that contains the choice for @code{Numeric_Error}, but does not contain the\n-choice for @code{Constraint_Error}.\n-\n-This rule has no parameters.\n-\n-@ignore\n-@node Recursion\n-@subsection @code{Recursion} (under construction, GLOBAL)\n-@cindex @code{Recursion} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag recursive subprograms (cycles in the call graph). Declarations, and not\n-calls, of recursive subprograms are detected.\n-\n-This rule has no parameters.\n-@end ignore\n-\n-@ignore\n-@node Side_Effect_Functions\n-@subsection @code{Side_Effect_Functions} (under construction, GLOBAL)\n-@cindex @code{Side_Effect_Functions} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag functions with side effects.\n-\n-We define a side effect as changing any data object that is not local for the\n-body of this function.\n-\n-At the moment, we do NOT consider a side effect any input-output operations\n-(changing a state or a content of any file).\n-\n-We do not consider protected functions for this rule (???)\n-\n-There are the following sources of side effect:\n-\n-@enumerate\n-@item Explicit (or direct) side-effect:\n-\n-@itemize @bullet\n-@item\n-direct assignment to a non-local variable;\n-\n-@item\n-direct call to an entity that is known to change some data object that is\n-     not local for the body of this function (Note, that if F1 calls F2 and F2\n-     does have a side effect, this does not automatically mean that F1 also\n-     have a side effect, because it may be the case that F2 is declared in\n-     F1's body and it changes some data object that is global for F2, but\n-     local for F1);\n-@end itemize\n-\n-@item Indirect side-effect:\n-@itemize @bullet\n-@item\n-Subprogram calls implicitly issued by:\n-@itemize @bullet\n-@item\n-computing initialization expressions from type declarations as a part\n-         of object elaboration or allocator evaluation;\n-@item\n-computing implicit parameters of subprogram or entry calls or generic\n-         instantiations;\n-@end itemize\n-\n-@item\n-activation of a task that change some non-local data object (directly or\n-     indirectly);\n-\n-@item\n-elaboration code of a package that is a result of a package instantiation;\n-\n-@item\n-controlled objects;\n-@end itemize\n-\n-@item Situations when we can suspect a side-effect, but the full static check\n-is either impossible or too hard:\n-@itemize @bullet\n-@item\n-assignment to access variables or to the objects pointed by access\n-     variables;\n-\n-@item\n-call to a subprogram pointed by access-to-subprogram value\n-\n-@item\n-dispatching calls;\n-@end itemize\n-@end enumerate\n-\n-@noindent\n-This rule has no parameters.\n-@end ignore\n-\n-@node Slices\n-@subsection @code{Slices}\n-@cindex @code{Slices} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all uses of array slicing\n-\n-This rule has no parameters.\n-\n-\n-@node Too_Many_Parents\n-@subsection @code{Too_Many_Parents}\n-@cindex @code{Too_Many_Parents} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags any type declaration, single task declaration or single protected\n-declaration that has more then  @option{N} parents,  @option{N} is a parameter\n-of the rule.\n-A parent here is either a (sub)type denoted by the subtype mark from the\n-parent_subtype_indication (in case of a derived type declaration), or\n-any of the progenitors from the interface list, if any.\n-\n-This rule has the following (mandatory) parameters for the @option{+R} option:\n-\n-@table @emph\n-@item N\n-Positive integer specifying the maximal allowed number of parents.\n-@end table\n-\n-\n-@node Unassigned_OUT_Parameters\n-@subsection @code{Unassigned_OUT_Parameters}\n-@cindex @code{Unassigned_OUT_Parameters} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags procedures' @code{out} parameters that are not assigned, and\n-identifies the contexts in which the assignments are missing.\n-\n-An @code{out} parameter is flagged in the statements in the procedure\n-body's handled sequence of statements (before the procedure body's\n-@code{exception} part, if any) if this sequence of statements contains\n-no assignments to the parameter.\n-\n-An @code{out} parameter is flagged in an exception handler in the exception\n-part of the procedure body's handled sequence of statements if the handler\n-contains no assignment to the parameter.\n-\n-Bodies of generic procedures are also considered.\n-\n-The following are treated as assignments to an @code{out} parameter:\n-\n-@itemize @bullet\n-@item\n-an assignment statement, with the parameter or some component as the target;\n-\n-@item\n-passing the parameter (or one of its components) as an @code{out} or\n-@code{in out} parameter.\n-@end itemize\n-\n-@noindent\n-This rule does not have any parameters.\n-\n-\n-\n-@node Uncommented_BEGIN_In_Package_Bodies\n-@subsection @code{Uncommented_BEGIN_In_Package_Bodies}\n-@cindex @code{Uncommented_BEGIN_In_Package_Bodies} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags each package body with declarations and a statement part that does not\n-include a trailing comment on the line containing the @code{begin} keyword;\n-this trailing comment needs to specify the package name and nothing else.\n-The @code{begin} is not flagged if the package body does not\n-contain any declarations.\n-\n-If the @code{begin} keyword is placed on the\n-same line as the last declaration or the first statement, it is flagged\n-independently of whether the line contains a trailing comment. The\n-diagnostic message is attached to the line containing the first statement.\n-\n-This rule has no parameters.\n-\n-@node Unconditional_Exits\n-@subsection @code{Unconditional_Exits}\n-@cindex @code{Unconditional_Exits} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag unconditional @code{exit} statements.\n-\n-This rule has no parameters.\n-\n-@node Unconstrained_Array_Returns\n-@subsection @code{Unconstrained_Array_Returns}\n-@cindex @code{Unconstrained_Array_Returns} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each function returning an unconstrained array. Function declarations,\n-function bodies (and body stubs) having no separate specifications,\n-and generic function instantiations are checked.\n-Function calls and function renamings are\n-not checked.\n-\n-Generic function declarations, and function declarations in generic\n-packages are not checked, instead this rule checks the results of\n-generic instantiations (that is, expanded specification and expanded\n-body corresponding to an instantiation).\n-\n-This rule has no parameters.\n-\n-@node Universal_Ranges\n-@subsection @code{Universal_Ranges}\n-@cindex @code{Universal_Ranges} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag discrete ranges that are a part of an index constraint, constrained\n-array definition, or @code{for}-loop parameter specification, and whose bounds\n-are both of type @i{universal_integer}. Ranges that have at least one\n-bound of a specific type (such as @code{1 .. N}, where @code{N} is a variable\n-or an expression of non-universal type) are not flagged.\n-\n-This rule has no parameters.\n-\n-\n-@node Unnamed_Blocks_And_Loops\n-@subsection @code{Unnamed_Blocks_And_Loops}\n-@cindex @code{Unnamed_Blocks_And_Loops} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each unnamed block statement and loop statement.\n-\n-The rule has no parameters.\n-\n-\n-\n-@ignore\n-@node Unused_Subprograms\n-@subsection @code{Unused_Subprograms} (under construction, GLOBAL)\n-@cindex @code{Unused_Subprograms} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all unused subprograms.\n-\n-This rule has no parameters.\n-@end ignore\n-\n-\n-\n-\n-@node USE_PACKAGE_Clauses\n-@subsection @code{USE_PACKAGE_Clauses}\n-@cindex @code{USE_PACKAGE_Clauses} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag all @code{use} clauses for packages; @code{use type} clauses are\n-not flagged.\n-\n-This rule has no parameters.\n-\n-\n-@node Visible_Components\n-@subsection @code{Visible_Components}\n-@cindex @code{Visible_Components} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flags all the type declarations located in the visible part of a library\n-package or a library generic package that can declare a visible component. A\n-type is considered as declaring a visible component if it contains a record\n-definition by its own or as a part of a record extension. Type declaration is\n-flagged even if it contains a record definition that defines no components.\n-\n-Declarations located in private parts of local (generic) packages are not\n-flagged. Declarations in private packages are not flagged.\n-\n-This rule has no parameters.\n-\n-\n-@node Volatile_Objects_Without_Address_Clauses\n-@subsection @code{Volatile_Objects_Without_Address_Clauses}\n-@cindex @code{Volatile_Objects_Without_Address_Clauses} rule (for @command{gnatcheck})\n-\n-@noindent\n-Flag each volatile object that does not have an address clause.\n-\n-The following check is made: if the pragma @code{Volatile} is applied to a\n-data object or to its type, then an address clause must\n-be supplied for this object.\n-\n-This rule does not check the components of data objects,\n-array components that are volatile as a result of the pragma\n-@code{Volatile_Components}, or objects that are volatile because\n-they are atomic as a result of pragmas @code{Atomic} or\n-@code{Atomic_Components}.\n-\n-Only variable declarations, and not constant declarations, are checked.\n+The predefined rules implemented in @command{gnatcheck}\n+are described in a companion document,\n+@cite{GNATcheck Reference Manual -- Predefined Rules}.\n+The rule identifier is\n+used as a parameter of @command{gnatcheck}'s @option{+R} or @option{-R}\n+switches.\n \n-This rule has no parameters.\n \n @node Example of gnatcheck Usage\n @section Example of @command{gnatcheck} Usage"}, {"sha": "74a39ed83f99b1b4f4d0c84d3f8d5db54892d40e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07607395afcbf884295020823335d6f8ef3fe35/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07607395afcbf884295020823335d6f8ef3fe35/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b07607395afcbf884295020823335d6f8ef3fe35", "patch": "@@ -17484,6 +17484,15 @@ package body Sem_Ch3 is\n            and then Ekind (Current_Entity (Typ)) = E_Incomplete_Type\n            and then Full_View (Current_Entity (Typ)) = Typ\n          then\n+            if Is_Tagged\n+              and then Comes_From_Source (Current_Entity (Typ))\n+              and then not Is_Tagged_Type (Current_Entity (Typ))\n+            then\n+               Make_Class_Wide_Type (Typ);\n+               Error_Msg_N\n+                 (\"incomplete view of tagged type should be declared tagged?\",\n+                    Parent (Current_Entity (Typ)));\n+            end if;\n             return;\n \n          else"}]}