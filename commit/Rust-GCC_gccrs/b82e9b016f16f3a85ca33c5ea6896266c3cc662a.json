{"sha": "b82e9b016f16f3a85ca33c5ea6896266c3cc662a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgyZTliMDE2ZjE2ZjNhODVjYTMzYzVlYTY4OTYyNjZjM2NjNjYyYQ==", "commit": {"author": {"name": "Daniel Kruegler", "email": "daniel.kruegler@gmail.com", "date": "2014-11-14T04:23:06Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2014-11-14T04:23:06Z"}, "message": "regex.h: Support embedded zeros in sub_match comparisons (DR 2217)\n\n2014-11-13  Daniel Kruegler  <daniel.kruegler@gmail.com>\n\n\t* include/bits/regex.h: Support embedded zeros in sub_match\n\tcomparisons (DR 2217)\n\t* testsuite/28_regex/sub_match/embedded_zeros_cmp.cc:\n\tAdd test cases for embedded zeros\n\nFrom-SVN: r217535", "tree": {"sha": "6999198d8307e49738d059c7442900ec953ee5c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6999198d8307e49738d059c7442900ec953ee5c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b82e9b016f16f3a85ca33c5ea6896266c3cc662a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82e9b016f16f3a85ca33c5ea6896266c3cc662a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b82e9b016f16f3a85ca33c5ea6896266c3cc662a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82e9b016f16f3a85ca33c5ea6896266c3cc662a/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b16abbcb8530ab4601873c978c50422960d0faee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16abbcb8530ab4601873c978c50422960d0faee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16abbcb8530ab4601873c978c50422960d0faee"}], "stats": {"total": 82, "additions": 78, "deletions": 4}, "files": [{"sha": "65408784c893f27950de8f5f6b8ade56d01dc1d3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82e9b016f16f3a85ca33c5ea6896266c3cc662a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82e9b016f16f3a85ca33c5ea6896266c3cc662a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b82e9b016f16f3a85ca33c5ea6896266c3cc662a", "patch": "@@ -1,3 +1,10 @@\n+2014-11-13  Daniel Kruegler  <daniel.kruegler@gmail.com>\n+\n+\t* include/bits/regex.h: Support embedded zeros in sub_match\n+\tcomparisons (DR 2217)\n+\t* testsuite/28_regex/sub_match/embedded_zeros_cmp.cc:\n+\tAdd test cases for embedded zeros\n+\n 2014-11-13  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/63775"}, {"sha": "6ff9a82bded847c1796859c36d8708a5b13cc203", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82e9b016f16f3a85ca33c5ea6896266c3cc662a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82e9b016f16f3a85ca33c5ea6896266c3cc662a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=b82e9b016f16f3a85ca33c5ea6896266c3cc662a", "patch": "@@ -1006,7 +1006,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n-    { return __rhs.compare(__lhs.c_str()) == 0; }\n+    {\n+      typedef typename sub_match<_Bi_iter>::string_type string_type;\n+      return __rhs.compare(string_type(__lhs.data(), __lhs.size())) == 0;\n+    }\n \n   /**\n    * @brief Tests the inequivalence of a string and a regular expression\n@@ -1031,7 +1034,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator<(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n \t      const sub_match<_Bi_iter>& __rhs)\n-     { return __rhs.compare(__lhs.c_str()) > 0; }\n+    {\n+      typedef typename sub_match<_Bi_iter>::string_type string_type;\n+      return __rhs.compare(string_type(__lhs.data(), __lhs.size())) > 0;\n+    }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -1080,7 +1086,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator==(const sub_match<_Bi_iter>& __lhs,\n \t       const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __rhs)\n-    { return __lhs.compare(__rhs.c_str()) == 0; }\n+    {\n+      typedef typename sub_match<_Bi_iter>::string_type string_type;\n+      return __lhs.compare(string_type(__rhs.data(), __rhs.size())) == 0;\n+    }\n \n   /**\n    * @brief Tests the inequivalence of a regular expression submatch and a\n@@ -1105,7 +1114,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator<(const sub_match<_Bi_iter>& __lhs,\n \t      const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __rhs)\n-    { return __lhs.compare(__rhs.c_str()) < 0; }\n+    {\n+      typedef typename sub_match<_Bi_iter>::string_type string_type;\n+      return __lhs.compare(string_type(__rhs.data(), __rhs.size())) < 0;\n+    }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string."}, {"sha": "0908f124c6e44a4a3d1b17c409be95bdee96419b", "filename": "libstdc++-v3/testsuite/28_regex/sub_match/embedded_zeros_cmp.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82e9b016f16f3a85ca33c5ea6896266c3cc662a/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fembedded_zeros_cmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82e9b016f16f3a85ca33c5ea6896266c3cc662a/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fembedded_zeros_cmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fembedded_zeros_cmp.cc?ref=b82e9b016f16f3a85ca33c5ea6896266c3cc662a", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+//\n+// 2014-11-13  Daniel Kruegler <daniel.kruegler@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.9.2 [re.submatch.op] sub_match members, [DR 2217]\n+\n+#include <regex>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef char                          value_type;\n+  typedef std::basic_string<value_type> string_type;\n+  typedef std::sub_match<value_type*>   sub_match_type;\n+  const string_type test_data1(\"abc\\0d\", 4);\n+  value_type test_data2[] = {'a', 'b', 'c'};\n+  const string_type test_data3(\"abc\");\n+\n+\tsub_match_type sm;\n+\tsm.first = std::begin(test_data2);\n+\tsm.second  = std::end(test_data2);\n+\tsm.matched = true;\n+\n+\tVERIFY( test_data1 != sm );\n+\tVERIFY( sm != test_data1 );\n+\tVERIFY( sm < test_data1 );\n+\tVERIFY( !(test_data1 < sm) );\n+\tVERIFY( test_data1 > sm );\n+\n+\tVERIFY( test_data3 == sm );\n+\tVERIFY( sm == test_data3 );\n+\tVERIFY( !(sm < test_data3) );\n+\tVERIFY( !(test_data3 < sm) );\n+}"}]}