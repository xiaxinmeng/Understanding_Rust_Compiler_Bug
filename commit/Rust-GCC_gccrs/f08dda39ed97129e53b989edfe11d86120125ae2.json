{"sha": "f08dda39ed97129e53b989edfe11d86120125ae2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA4ZGRhMzllZDk3MTI5ZTUzYjk4OWVkZmUxMWQ4NjEyMDEyNWFlMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "sidwell@codesourcery.com", "date": "2000-01-20T11:05:19Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-01-20T11:05:19Z"}, "message": "Remap dynamic cast hint values to be consistent across ABIs.\n\n\t* search.c (dynamic_cast_base_recurse): Remap generated value.\n\t(get_dynamic_cast_base_type): Adjust documentation.\n\t* tinfo.h (__user_type_info::dyncast): Likewise.\n\t(__user_type_info::find_public_subobj): Remap BOFF meaning.\n\t* tinfo.cc (__si_type_info::do_dyncast): Remap BOFF meaning.\n\t(__class_type_info::do_dyncast): Likewise.\n\t(__class_type_info::do_find_public_subobj): Likewise.\n\t* tinfo2.cc (__dynamic_cast): Remap BOFF parameter.\n\nFrom-SVN: r31538", "tree": {"sha": "adda0800d4ed48ea9cf1709bae1b8f19597984ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adda0800d4ed48ea9cf1709bae1b8f19597984ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f08dda39ed97129e53b989edfe11d86120125ae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08dda39ed97129e53b989edfe11d86120125ae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f08dda39ed97129e53b989edfe11d86120125ae2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08dda39ed97129e53b989edfe11d86120125ae2/comments", "author": null, "committer": null, "parents": [{"sha": "f621dedc052d7946216d4bf5c45841f687fb881b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f621dedc052d7946216d4bf5c45841f687fb881b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f621dedc052d7946216d4bf5c45841f687fb881b"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "074c0b026f599c8c701410234e943bc6c6e40101", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08dda39ed97129e53b989edfe11d86120125ae2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08dda39ed97129e53b989edfe11d86120125ae2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f08dda39ed97129e53b989edfe11d86120125ae2", "patch": "@@ -1,3 +1,15 @@\n+2000-01-20  Nathan Sidwell  <sidwell@codesourcery.com>\n+\n+\tRemap dynamic cast hint values to be consistent across ABIs.\n+\t* search.c (dynamic_cast_base_recurse): Remap generated value.\n+\t(get_dynamic_cast_base_type): Adjust documentation.\n+\t* tinfo.h (__user_type_info::dyncast): Likewise.\n+\t(__user_type_info::find_public_subobj): Remap BOFF meaning.\n+\t* tinfo.cc (__si_type_info::do_dyncast): Remap BOFF meaning.\n+\t(__class_type_info::do_dyncast): Likewise.\n+\t(__class_type_info::do_find_public_subobj): Likewise.\n+\t* tinfo2.cc (__dynamic_cast): Remap BOFF parameter.\t\n+\n 2000-01-19  Gabriel Dos Reis  <gdr@codesourcery.coom>\n \n         * typeck.c (build_unary_op): Use cp_pedwarn, not pedwarn."}, {"sha": "390c97475514752962d9e440fafd2569dace989d", "filename": "gcc/cp/search.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08dda39ed97129e53b989edfe11d86120125ae2/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08dda39ed97129e53b989edfe11d86120125ae2/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=f08dda39ed97129e53b989edfe11d86120125ae2", "patch": "@@ -503,12 +503,12 @@ dynamic_cast_base_recurse (subtype, binfo, via_virtual, offset_ptr)\n {\n   tree binfos;\n   int i, n_baselinks;\n-  int worst = -3;\n+  int worst = -2;\n   \n   if (BINFO_TYPE (binfo) == subtype)\n     {\n       if (via_virtual)\n-        return -2;\n+        return -1;\n       else\n         {\n           *offset_ptr = BINFO_OFFSET (binfo);\n@@ -528,26 +528,28 @@ dynamic_cast_base_recurse (subtype, binfo, via_virtual, offset_ptr)\n       rval = dynamic_cast_base_recurse\n              (subtype, base_binfo,\n               via_virtual || TREE_VIA_VIRTUAL (base_binfo), offset_ptr);\n-      if (worst == -3)\n+      if (worst == -2)\n         worst = rval;\n       else if (rval >= 0)\n-        worst = worst >= 0 ? -1 : worst;\n-      else if (rval > -3)\n-        worst = worst < rval ? worst : rval;\n+        worst = worst >= 0 ? -3 : worst;\n+      else if (rval == -1)\n+        worst = -1;\n+      else if (rval == -3 && worst != -1)\n+        worst = -3;\n     }\n   return worst;\n }\n \n-/* The dynamic cast runtime needs a hint about how the static SUBTYPE type started\n-   from is related to the required TARGET type, in order to optimize the\n-   inheritance graph search. This information is independant of the\n+/* The dynamic cast runtime needs a hint about how the static SUBTYPE type\n+   started from is related to the required TARGET type, in order to optimize\n+   the inheritance graph search. This information is independant of the\n    current context, and ignores private paths, hence get_base_distance is\n    inappropriate. Return a TREE specifying the base offset, BOFF.\n    BOFF >= 0, there is only one public non-virtual SUBTYPE base at offset BOFF,\n       and there are no public virtual SUBTYPE bases.\n-   BOFF == -1, SUBTYPE occurs as multiple public non-virtual bases.\n-   BOFF == -2, SUBTYPE occurs as multiple public virtual or non-virtual bases.\n-   BOFF == -3, SUBTYPE is not a public base.  */\n+   BOFF == -1, SUBTYPE occurs as multiple public virtual or non-virtual bases.\n+   BOFF == -2, SUBTYPE is not a public base.\n+   BOFF == -3, SUBTYPE occurs as multiple public non-virtual bases.  */\n \n tree\n get_dynamic_cast_base_type (subtype, target)"}, {"sha": "1ad584070b74a1993bebb0d0fc602cbf7451b002", "filename": "gcc/cp/tinfo.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08dda39ed97129e53b989edfe11d86120125ae2/gcc%2Fcp%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08dda39ed97129e53b989edfe11d86120125ae2/gcc%2Fcp%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo.cc?ref=f08dda39ed97129e53b989edfe11d86120125ae2", "patch": "@@ -243,7 +243,7 @@ do_dyncast (int boff, sub_kind access_path,\n       if (boff >= 0)\n         result.target2sub = ((char *)subptr - (char *)objptr) == boff\n               ? contained_public : not_contained;\n-      else if (boff == -3)\n+      else if (boff == -2)\n         result.target2sub = not_contained;\n       return false;\n     }\n@@ -361,7 +361,7 @@ do_dyncast (int boff, sub_kind access_path,\n       if (boff >= 0)\n         result.target2sub = ((char *)subptr - (char *)objptr) == boff\n               ? contained_public : not_contained;\n-      else if (boff == -3)\n+      else if (boff == -2)\n         result.target2sub = not_contained;\n       return false;\n     }\n@@ -519,7 +519,7 @@ do_find_public_subobj (int boff, const type_info &subtype, void *objptr, void *s\n         continue; // Not public, can't be here.\n       void *p;\n \n-      if (base_list[i].is_virtual && boff == -1)\n+      if (base_list[i].is_virtual && boff == -3)\n \t// Not a virtual base, so can't be here.\n \tcontinue;\n       "}, {"sha": "91d52bdce0f6b5a9d33ca5d2302b6931d5f368e3", "filename": "gcc/cp/tinfo.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08dda39ed97129e53b989edfe11d86120125ae2/gcc%2Fcp%2Ftinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08dda39ed97129e53b989edfe11d86120125ae2/gcc%2Fcp%2Ftinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo.h?ref=f08dda39ed97129e53b989edfe11d86120125ae2", "patch": "@@ -24,12 +24,12 @@ struct __user_type_info : public std::type_info {\n   // BOFF >= 0, there is only one public non-virtual SUBTYPE base at offset\n   //    BOFF, and there are no public virtual SUBTYPE bases.\n   //    Therefore check if SUBOBJ is at offset BOFF when we find a target\n-  // BOFF == -1, SUBTYPE occurs as multiple public non-virtual bases.\n-  //    Lazily search the non-virtual bases of TARGET.\n-  // BOFF == -2, SUBTYPE occurs as multiple public virtual or non-virtual bases.\n+  // BOFF == -1, SUBTYPE occurs as multiple public virtual or non-virtual bases.\n   //    Lazily search all the bases of TARGET.\n-  // BOFF == -3, SUBTYPE is not a public base.\n-  // For backwards compatibility set BOFF to -2, that is the safe `don't know'\n+  // BOFF == -2, SUBTYPE is not a public base.\n+  // BOFF == -3, SUBTYPE occurs as multiple public non-virtual bases.\n+  //    Lazily search the non-virtual bases of TARGET.\n+  // For backwards compatibility set BOFF to -1, that is the safe `don't know'\n   // value. We don't care about SUBTYPES as private bases of TARGET, as they\n   // can never succeed as downcasts, only as crosscasts -- and then only if\n   // they are virtual. This is more complicated that it might seem.\n@@ -131,7 +131,7 @@ struct __user_type_info : public std::type_info {\n     if (boff >= 0)\n       return ((char *)subptr - (char *)objptr) == boff\n               ? contained_public : not_contained;\n-    if (boff == -3)\n+    if (boff == -2)\n       return not_contained;\n     return do_find_public_subobj (boff, subtype, objptr, subptr);\n   }"}, {"sha": "f1b9d92f8f5b63bdc3006e8da4a66b204da824ea", "filename": "gcc/cp/tinfo2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08dda39ed97129e53b989edfe11d86120125ae2/gcc%2Fcp%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08dda39ed97129e53b989edfe11d86120125ae2/gcc%2Fcp%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo2.cc?ref=f08dda39ed97129e53b989edfe11d86120125ae2", "patch": "@@ -1,5 +1,5 @@\n // Methods for type_info for -*- C++ -*- Run Time Type Identification.\n-// Copyright (C) 1994, 96-97, 1998, 1999 Free Software Foundation\n+// Copyright (C) 1994, 96-97, 1998, 1999, 2000 Free Software Foundation\n \n // This file is part of GNU CC.\n \n@@ -274,7 +274,7 @@ __dynamic_cast (const type_info& (*from)(void), const type_info& (*to)(void),\n {\n   if (!require_public) abort();\n   return static_cast <__user_type_info const &> (from ()).dyncast\n-      (/*boff=*/-2, to (), address, sub (), subptr);\n+      (/*boff=*/-1, to (), address, sub (), subptr);\n }\n \n extern \"C\" void *"}]}