{"sha": "7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxN2VmNGFlNWJkOGFkMDZmMzdhODEwMWQyMWMwNWIzMGEwNGE2Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-27T11:52:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-27T11:52:54Z"}, "message": "Move signbit folds to match.pd\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* builtins.c (fold_builtin_signbit): Delete.\n\t(fold_builtin_2): Handle constant signbit arguments here.\n\t* match.pd: Add rules previously handled by fold_builtin_signbit.\n\ngcc/testsuite/\n\tPR tree-optimization/68097\n\t* gcc.dg/torture/builtin-nonneg-1.c: Skip at -O0.  Add\n\t--param max-ssa-name-query-depth=3 to dg-options.\n\nFrom-SVN: r229423", "tree": {"sha": "abdbb1fb644bca2bb6769669ac4932f868b34814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abdbb1fb644bca2bb6769669ac4932f868b34814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c53233c660496efed5115ec1f30d3009ecf716d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c53233c660496efed5115ec1f30d3009ecf716d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c53233c660496efed5115ec1f30d3009ecf716d6"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "dc2638aa6d58c545d0f360c2682f3cc955966f19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "patch": "@@ -1,3 +1,9 @@\n+2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.c (fold_builtin_signbit): Delete.\n+\t(fold_builtin_2): Handle constant signbit arguments here.\n+\t* match.pd: Add rules previously handled by fold_builtin_signbit.\n+\n 2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* match.pd: Handle sqrt(x) cmp 0 specially."}, {"sha": "ae7e7ef589072e31ec787536c526f6be6c12b7af", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "patch": "@@ -162,7 +162,6 @@ static tree fold_builtin_memchr (location_t, tree, tree, tree, tree);\n static tree fold_builtin_memcmp (location_t, tree, tree, tree);\n static tree fold_builtin_strcmp (location_t, tree, tree);\n static tree fold_builtin_strncmp (location_t, tree, tree, tree);\n-static tree fold_builtin_signbit (location_t, tree, tree);\n static tree fold_builtin_isascii (location_t, tree);\n static tree fold_builtin_toascii (location_t, tree);\n static tree fold_builtin_isdigit (location_t, tree);\n@@ -7782,40 +7781,6 @@ fold_builtin_strncmp (location_t loc, tree arg1, tree arg2, tree len)\n   return NULL_TREE;\n }\n \n-/* Fold function call to builtin signbit, signbitf or signbitl with argument\n-   ARG.  Return NULL_TREE if no simplification can be made.  */\n-\n-static tree\n-fold_builtin_signbit (location_t loc, tree arg, tree type)\n-{\n-  if (!validate_arg (arg, REAL_TYPE))\n-    return NULL_TREE;\n-\n-  /* If ARG is a compile-time constant, determine the result.  */\n-  if (TREE_CODE (arg) == REAL_CST\n-      && !TREE_OVERFLOW (arg))\n-    {\n-      REAL_VALUE_TYPE c;\n-\n-      c = TREE_REAL_CST (arg);\n-      return (REAL_VALUE_NEGATIVE (c)\n-\t      ? build_one_cst (type)\n-\t      : build_zero_cst (type));\n-    }\n-\n-  /* If ARG is non-negative, the result is always zero.  */\n-  if (tree_expr_nonnegative_p (arg))\n-    return omit_one_operand_loc (loc, type, integer_zero_node, arg);\n-\n-  /* If ARG's format doesn't have signed zeros, return \"arg < 0.0\".  */\n-  if (!HONOR_SIGNED_ZEROS (arg))\n-    return fold_convert (type,\n-\t\t\t fold_build2_loc (loc, LT_EXPR, boolean_type_node, arg,\n-\t\t\tbuild_real (TREE_TYPE (arg), dconst0)));\n-\n-  return NULL_TREE;\n-}\n-\n /* Fold function call to builtin copysign, copysignf or copysignl with\n    arguments ARG1 and ARG2.  Return NULL_TREE if no simplification can\n    be made.  */\n@@ -9124,7 +9089,11 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n       return fold_builtin_bitop (fndecl, arg0);\n \n     CASE_FLT_FN (BUILT_IN_SIGNBIT):\n-      return fold_builtin_signbit (loc, arg0, type);\n+      if (TREE_CODE (arg0) == REAL_CST && !TREE_OVERFLOW (arg0))\n+\treturn (REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg0))\n+\t\t? build_one_cst (type)\n+\t\t: build_zero_cst (type));\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_SIGNIFICAND):\n       return fold_builtin_significand (loc, arg0, type);"}, {"sha": "b397f0f8a1f601c9b4e4a877663b753b59d5e8a7", "filename": "gcc/match.pd", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "patch": "@@ -102,6 +102,7 @@ DEFINE_MATH_FN (COPYSIGN)\n DEFINE_MATH_FN (CABS)\n DEFINE_MATH_FN (TRUNC)\n DEFINE_MATH_FN (NEARBYINT)\n+DEFINE_MATH_FN (SIGNBIT)\n \n DEFINE_INT_AND_FLOAT_ROUND_FN (FLOOR)\n DEFINE_INT_AND_FLOAT_ROUND_FN (CEIL)\n@@ -2942,3 +2943,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (INTEGRAL_TYPE_P (TREE_TYPE (@0)))\n    (op @0 (ext @1 @2)))))\n \n+(simplify\n+ /* signbit(x) -> 0 if x is nonnegative.  */\n+ (SIGNBIT tree_expr_nonnegative_p@0)\n+ { integer_zero_node; })\n+\n+(simplify\n+ /* signbit(x) -> x<0 if x doesn't have signed zeros.  */\n+ (SIGNBIT @0)\n+ (if (!HONOR_SIGNED_ZEROS (@0))\n+  (convert (lt @0 { build_real (TREE_TYPE (@0), dconst0); }))))"}, {"sha": "355059c09e1e1b8bd27066c8ed3c6ba3a9beadbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "patch": "@@ -1,3 +1,9 @@\n+2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/68097\n+\t* gcc.dg/torture/builtin-nonneg-1.c: Skip at -O0.  Add\n+\t--param max-ssa-name-query-depth=3 to dg-options.\n+\n 2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/torture/builtin-sqrt-cmp-1.c: New test."}, {"sha": "46f6fa6e273460a739deb007ab3b5850d4b6a842", "filename": "gcc/testsuite/gcc.dg/torture/builtin-nonneg-1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7317ef4ae5bd8ad06f37a8101d21c05b30a04a66/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-nonneg-1.c?ref=7317ef4ae5bd8ad06f37a8101d21c05b30a04a66", "patch": "@@ -6,7 +6,11 @@\n    Written by Kaveh Ghazi, 2004-03-10.  */\n \n /* { dg-do link } */\n-/* { dg-options \"-ffast-math\" } */\n+/* This test needs more recursion than the default.  PR 68097 is about\n+   adding proper range information for reals, so that no recursion\n+   would be necessary.  */\n+/* { dg-options \"-ffast-math --param max-ssa-name-query-depth=3\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n \n #define PROTOTYPE_RTYPE(FN,RTYPE) extern RTYPE FN(double); \\\n   extern RTYPE FN##f(float); \\"}]}