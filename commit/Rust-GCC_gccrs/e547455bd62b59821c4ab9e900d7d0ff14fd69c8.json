{"sha": "e547455bd62b59821c4ab9e900d7d0ff14fd69c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU0NzQ1NWJkNjJiNTk4MjFjNGFiOWU5MDBkN2QwZmYxNGZkNjljOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-06-21T18:17:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-06-21T18:17:01Z"}, "message": "Fix type_dependent_expression_p of member templates.\n\n\t* pt.c (template_parm_outer_level, uses_outer_template_parms): New.\n\t(type_dependent_expression_p): Use uses_outer_template_parms.\n\nFrom-SVN: r237654", "tree": {"sha": "910a4bc2bef89f21068d13e924412267a208fe6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/910a4bc2bef89f21068d13e924412267a208fe6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e547455bd62b59821c4ab9e900d7d0ff14fd69c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e547455bd62b59821c4ab9e900d7d0ff14fd69c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e547455bd62b59821c4ab9e900d7d0ff14fd69c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e547455bd62b59821c4ab9e900d7d0ff14fd69c8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89192c3c536188bcbb2c99e47106b66eb520bd42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89192c3c536188bcbb2c99e47106b66eb520bd42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89192c3c536188bcbb2c99e47106b66eb520bd42"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "c8aa71360e2a98ec29f19ccb72091c8a32913055", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e547455bd62b59821c4ab9e900d7d0ff14fd69c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e547455bd62b59821c4ab9e900d7d0ff14fd69c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e547455bd62b59821c4ab9e900d7d0ff14fd69c8", "patch": "@@ -1,3 +1,8 @@\n+2016-06-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (template_parm_outer_level, uses_outer_template_parms): New.\n+\t(type_dependent_expression_p): Use uses_outer_template_parms.\n+\n 2016-06-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* parser.c (cp_parser_string_literal): Convert non-standard"}, {"sha": "c5f65a7f6772b8b5dd2ba4048ddd63c8b4f3ae73", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e547455bd62b59821c4ab9e900d7d0ff14fd69c8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e547455bd62b59821c4ab9e900d7d0ff14fd69c8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e547455bd62b59821c4ab9e900d7d0ff14fd69c8", "patch": "@@ -5064,6 +5064,24 @@ template_parm_this_level_p (tree t, void* data)\n   return level == this_level;\n }\n \n+/* Worker for uses_outer_template_parms, called via for_each_template_parm.\n+   DATA is really an int, indicating the innermost outer level of parameters.\n+   If T is a template parameter of that level or further out, return\n+   nonzero.  */\n+\n+static int\n+template_parm_outer_level (tree t, void *data)\n+{\n+  int this_level = *(int *)data;\n+  int level;\n+\n+  if (TREE_CODE (t) == TEMPLATE_PARM_INDEX)\n+    level = TEMPLATE_PARM_LEVEL (t);\n+  else\n+    level = TEMPLATE_TYPE_LEVEL (t);\n+  return level <= this_level;\n+}\n+\n /* Creates a TEMPLATE_DECL for the indicated DECL using the template\n    parameters given by current_template_args, or reuses a\n    previously existing one, if appropriate.  Returns the DECL, or an\n@@ -9032,6 +9050,33 @@ uses_template_parms_level (tree t, int level)\n \t\t\t\t /*include_nondeduced_p=*/true);\n }\n \n+/* Returns true if the signature of DECL depends on any template parameter from\n+   its enclosing class.  */\n+\n+bool\n+uses_outer_template_parms (tree decl)\n+{\n+  int depth = template_class_depth (CP_DECL_CONTEXT (decl));\n+  if (depth == 0)\n+    return false;\n+  if (for_each_template_parm (TREE_TYPE (decl), template_parm_outer_level,\n+\t\t\t      &depth, NULL, /*include_nondeduced_p=*/true))\n+    return true;\n+  if (PRIMARY_TEMPLATE_P (decl)\n+      && for_each_template_parm (INNERMOST_TEMPLATE_PARMS\n+\t\t\t\t (DECL_TEMPLATE_PARMS (decl)),\n+\t\t\t\t template_parm_outer_level,\n+\t\t\t\t &depth, NULL, /*include_nondeduced_p=*/true))\n+    return true;\n+  tree ci = get_constraints (decl);\n+  if (ci)\n+    ci = CI_NORMALIZED_CONSTRAINTS (ci);\n+  if (ci && for_each_template_parm (ci, template_parm_outer_level,\n+\t\t\t\t    &depth, NULL, /*nondeduced*/true))\n+    return true;\n+  return false;\n+}\n+\n /* Returns TRUE iff INST is an instantiation we don't need to do in an\n    ill-formed translation unit, i.e. a variable or function that isn't\n    usable in a constant expression.  */\n@@ -23008,7 +23053,7 @@ type_dependent_expression_p (tree expression)\n \n   if (TREE_CODE (expression) == TEMPLATE_DECL\n       && !DECL_TEMPLATE_TEMPLATE_PARM_P (expression))\n-    return false;\n+    return uses_outer_template_parms (expression);\n \n   if (TREE_CODE (expression) == STMT_EXPR)\n     expression = stmt_expr_value_expr (expression);"}]}