{"sha": "b0e982be47fc5fe1747ce9dd1d7b08d50a511d94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBlOTgyYmU0N2ZjNWZlMTc0N2NlOWRkMWQ3YjA4ZDUwYTUxMWQ5NA==", "commit": {"author": {"name": "Kamil Iskra", "email": "iskra@student.uci.agh.edu.pl", "date": "1998-09-16T00:13:43Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-16T00:13:43Z"}, "message": "m68k.c (output_function_prologue): Reverse NO_ADDSUB_Q condition, fix format strings.\n\n        * m68k/m68k.c (output_function_prologue): Reverse NO_ADDSUB_Q\n        condition, fix format strings.\n        (output_function_epilogue): Likewise.\n\nFrom-SVN: r22445", "tree": {"sha": "36afdf414aa536049e4289796dd6a378373801ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36afdf414aa536049e4289796dd6a378373801ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0e982be47fc5fe1747ce9dd1d7b08d50a511d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e982be47fc5fe1747ce9dd1d7b08d50a511d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e982be47fc5fe1747ce9dd1d7b08d50a511d94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e982be47fc5fe1747ce9dd1d7b08d50a511d94/comments", "author": null, "committer": null, "parents": [{"sha": "3dbf3a22dfdd6ac39dee9417606b7bab66fe4eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbf3a22dfdd6ac39dee9417606b7bab66fe4eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbf3a22dfdd6ac39dee9417606b7bab66fe4eac"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "69a074a8a3469ce5ea22fd3dbd6e1d005e77ab54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e982be47fc5fe1747ce9dd1d7b08d50a511d94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e982be47fc5fe1747ce9dd1d7b08d50a511d94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0e982be47fc5fe1747ce9dd1d7b08d50a511d94", "patch": "@@ -1,5 +1,9 @@\n Wed Sep 16 01:09:01 1998  Kamil Iskra  <iskra@student.uci.agh.edu.pl>\n \n+\t* m68k/m68k.c (output_function_prologue): Reverse NO_ADDSUB_Q\n+\tcondition, fix format strings.\n+\t(output_function_epilogue): Likewise.\n+\n \t* m68k/m68k.c: Don't include <stdlib.h> directly.\n \n Wed Sep 16 00:30:56 1998  Geoff Keating  <geoffk@ozemail.com.au>"}, {"sha": "9303c6f2b764c63578242e7a02780a53ca3bef5e", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e982be47fc5fe1747ce9dd1d7b08d50a511d94/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e982be47fc5fe1747ce9dd1d7b08d50a511d94/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=b0e982be47fc5fe1747ce9dd1d7b08d50a511d94", "patch": "@@ -231,25 +231,25 @@ output_function_prologue (stream, size)\n     {\n       if (fsize + 4 < 0x8000)\n \t{\n-#ifdef NO_ADDSUB_Q\n+#ifndef NO_ADDSUB_Q\n \t  if (fsize + 4 <= 8)\n \t    {\n \t      if (!TARGET_5200)\n \t\t{\n \t\t  /* asm_fprintf() cannot handle %. */\n #ifdef MOTOROLA\n-\t\t  asm_fprintf (stream, \"\\tsubq.w %OI%d,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubq.w %0I%d,%Rsp\\n\", fsize + 4);\n #else\n-\t\t  asm_fprintf (stream, \"\\tsubqw %OI%d,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubqw %0I%d,%Rsp\\n\", fsize + 4);\n #endif\n \t\t}\n \t      else\n \t\t{\n \t\t  /* asm_fprintf() cannot handle %. */\n #ifdef MOTOROLA\n-\t\t  asm_fprintf (stream, \"\\tsubq.l %OI%d,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubq.l %0I%d,%Rsp\\n\", fsize + 4);\n #else\n-\t\t  asm_fprintf (stream, \"\\tsubql %OI%d,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubql %0I%d,%Rsp\\n\", fsize + 4);\n #endif\n \t\t}\n \t    }\n@@ -259,15 +259,15 @@ output_function_prologue (stream, size)\n \t\t subtract a small integer (8 < N <= 16) to a register. */\n \t      /* asm_fprintf() cannot handle %. */\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tsubq.w %OI8,%Rsp\\n\\tsubq.w %OI%d,%Rsp\\n\",\n+\t      asm_fprintf (stream, \"\\tsubq.w %0I8,%Rsp\\n\\tsubq.w %0I%d,%Rsp\\n\",\n \t\t\t   fsize + 4);\n #else\n-\t      asm_fprintf (stream, \"\\tsubqw %OI8,%Rsp\\n\\tsubqw %OI%d,%Rsp\\n\",\n+\t      asm_fprintf (stream, \"\\tsubqw %0I8,%Rsp\\n\\tsubqw %0I%d,%Rsp\\n\",\n \t\t\t   fsize + 4);\n #endif\n \t    }\n \t  else \n-#endif /* NO_ADDSUB_Q */\n+#endif /* not NO_ADDSUB_Q */\n \t  if (TARGET_68040)\n \t    {\n \t      /* Adding negative number is faster on the 68040.  */\n@@ -771,23 +771,23 @@ output_function_epilogue (stream, size)\n \t     reg_names[FRAME_POINTER_REGNUM]);\n   else if (fsize)\n     {\n-#ifdef NO_ADDSUB_Q\n+#ifndef NO_ADDSUB_Q\n       if (fsize + 4 <= 8) \n \t{\n \t  if (!TARGET_5200)\n \t    {\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\taddq.w %OI%d,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddq.w %0I%d,%Rsp\\n\", fsize + 4);\n #else\n-\t      asm_fprintf (stream, \"\\taddqw %OI%d,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddqw %0I%d,%Rsp\\n\", fsize + 4);\n #endif\n \t    }\n \t  else\n \t    {\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\taddq.l %OI%d,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddq.l %0I%d,%Rsp\\n\", fsize + 4);\n #else\n-\t      asm_fprintf (stream, \"\\taddql %OI%d,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddql %0I%d,%Rsp\\n\", fsize + 4);\n #endif\n \t    }\n \t}\n@@ -797,15 +797,15 @@ output_function_epilogue (stream, size)\n \t     add a small integer (8 < N <= 16) to a register. */\n \t  /* asm_fprintf() cannot handle %. */\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\taddq.w %OI8,%Rsp\\n\\taddq.w %OI%d,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\taddq.w %0I8,%Rsp\\n\\taddq.w %0I%d,%Rsp\\n\",\n \t\t       fsize + 4);\n #else\n-\t  asm_fprintf (stream, \"\\taddqw %OI8,%Rsp\\n\\taddqw %OI%d,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\taddqw %0I8,%Rsp\\n\\taddqw %0I%d,%Rsp\\n\",\n \t\t       fsize + 4);\n #endif\n \t}\n       else\n-#endif /* NO_ADDSUB_Q */\n+#endif /* not NO_ADDSUB_Q */\n       if (fsize + 4 < 0x8000)\n \t{\n \t  if (TARGET_68040)"}]}