{"sha": "8ca597af97cb20a9a0b98358880bd3a488d49cc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhNTk3YWY5N2NiMjBhOWEwYjk4MzU4ODgwYmQzYTQ4OGQ0OWNjMg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-18T09:48:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T09:48:47Z"}, "message": "sem_aggr.adb, [...]: Change name Packed_Array_Type to Packed_Array_Impl_Type.\n\n2014-07-18  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aggr.adb, exp_ch5.adb, sem_ch3.adb, layout.adb, sem_type.adb,\n\texp_util.adb, exp_attr.adb, einfo.adb, einfo.ads, exp_pakd.adb,\n\tchecks.adb, exp_pakd.ads, freeze.adb, sem_util.adb, exp_dbug.adb,\n\texp_dbug.ads, exp_ch4.adb, sem_ch8.adb, exp_aggr.adb, sem_eval.adb,\n\tsem_ch13.adb: Change name Packed_Array_Type to Packed_Array_Impl_Type.\n\nFrom-SVN: r212797", "tree": {"sha": "f3806f298062cc781b6b88cd15f5972394056d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3806f298062cc781b6b88cd15f5972394056d65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ca597af97cb20a9a0b98358880bd3a488d49cc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca597af97cb20a9a0b98358880bd3a488d49cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca597af97cb20a9a0b98358880bd3a488d49cc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca597af97cb20a9a0b98358880bd3a488d49cc2/comments", "author": null, "committer": null, "parents": [{"sha": "5aa0548d689468fde141ada9f33dc823e2de5a72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa0548d689468fde141ada9f33dc823e2de5a72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aa0548d689468fde141ada9f33dc823e2de5a72"}], "stats": {"total": 299, "additions": 159, "deletions": 140}, "files": [{"sha": "965216ca1e3fcc19e8a0221d62bb945bf5d318f0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -1,3 +1,11 @@\n+2014-07-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aggr.adb, exp_ch5.adb, sem_ch3.adb, layout.adb, sem_type.adb,\n+\texp_util.adb, exp_attr.adb, einfo.adb, einfo.ads, exp_pakd.adb,\n+\tchecks.adb, exp_pakd.ads, freeze.adb, sem_util.adb, exp_dbug.adb,\n+\texp_dbug.ads, exp_ch4.adb, sem_ch8.adb, exp_aggr.adb, sem_eval.adb,\n+\tsem_ch13.adb: Change name Packed_Array_Type to Packed_Array_Impl_Type.\n+\n 2014-07-18  Robert Dewar  <dewar@adacore.com>\n \n \t* lib-writ.adb, makeutl.adb, ali.ads: Minor reformatting."}, {"sha": "d055306edd1da1b2dc259ca69e1720cf8f3f5329", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -5307,7 +5307,7 @@ package body Checks is\n       --  so they are also always valid (in particular, the unused bits can be\n       --  random rubbish without affecting the validity of the array value).\n \n-      if not Is_Scalar_Type (Typ) or else Is_Packed_Array_Type (Typ) then\n+      if not Is_Scalar_Type (Typ) or else Is_Packed_Array_Impl_Type (Typ) then\n          return True;\n \n       --  If no validity checking, then everything is considered valid\n@@ -6526,7 +6526,7 @@ package body Checks is\n \n          if Analyzed (PV)\n            and then Nkind (PV) = N_Indexed_Component\n-           and then Present (Packed_Array_Type (Etype (Prefix (PV))))\n+           and then Present (Packed_Array_Impl_Type (Etype (Prefix (PV))))\n          then\n             Set_Analyzed (PV, False);\n          end if;"}, {"sha": "34916804233aee2ec1087ce399dad16bb38304dc", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -211,7 +211,7 @@ package body Einfo is\n    --    Generic_Renamings               Elist23\n    --    Inner_Instances                 Elist23\n    --    Limited_View                    Node23\n-   --    Packed_Array_Type               Node23\n+   --    Packed_Array_Impl_Type               Node23\n    --    Protection_Object               Node23\n    --    Stored_Constraint               Elist23\n \n@@ -415,7 +415,7 @@ package body Einfo is\n    --    Has_Aliased_Components          Flag135\n    --    No_Strict_Aliasing              Flag136\n    --    Is_Machine_Code_Subprogram      Flag137\n-   --    Is_Packed_Array_Type            Flag138\n+   --    Is_Packed_Array_Impl_Type            Flag138\n    --    Has_Biased_Representation       Flag139\n    --    Has_Complex_Representation      Flag140\n \n@@ -2201,10 +2201,10 @@ package body Einfo is\n       return Flag51 (Implementation_Base_Type (Id));\n    end Is_Packed;\n \n-   function Is_Packed_Array_Type (Id : E) return B is\n+   function Is_Packed_Array_Impl_Type (Id : E) return B is\n    begin\n       return Flag138 (Id);\n-   end Is_Packed_Array_Type;\n+   end Is_Packed_Array_Impl_Type;\n \n    function Is_Potentially_Use_Visible (Id : E) return B is\n    begin\n@@ -2656,11 +2656,11 @@ package body Einfo is\n       return Node26 (Id);\n    end Package_Instantiation;\n \n-   function Packed_Array_Type (Id : E) return E is\n+   function Packed_Array_Impl_Type (Id : E) return E is\n    begin\n       pragma Assert (Is_Array_Type (Id));\n       return Node23 (Id);\n-   end Packed_Array_Type;\n+   end Packed_Array_Impl_Type;\n \n    function Parent_Subtype (Id : E) return E is\n    begin\n@@ -4946,10 +4946,10 @@ package body Einfo is\n       Set_Flag51 (Id, V);\n    end Set_Is_Packed;\n \n-   procedure Set_Is_Packed_Array_Type (Id : E; V : B := True) is\n+   procedure Set_Is_Packed_Array_Impl_Type (Id : E; V : B := True) is\n    begin\n       Set_Flag138 (Id, V);\n-   end Set_Is_Packed_Array_Type;\n+   end Set_Is_Packed_Array_Impl_Type;\n \n    procedure Set_Is_Potentially_Use_Visible (Id : E; V : B := True) is\n    begin\n@@ -5414,11 +5414,11 @@ package body Einfo is\n       Set_Node26 (Id, V);\n    end Set_Package_Instantiation;\n \n-   procedure Set_Packed_Array_Type (Id : E; V : E) is\n+   procedure Set_Packed_Array_Impl_Type (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Array_Type (Id));\n       Set_Node23 (Id, V);\n-   end Set_Packed_Array_Type;\n+   end Set_Packed_Array_Impl_Type;\n \n    procedure Set_Parent_Subtype (Id : E; V : E) is\n    begin\n@@ -8325,7 +8325,7 @@ package body Einfo is\n       W (\"Is_Optional_Parameter\",           Flag134 (Id));\n       W (\"Is_Package_Body_Entity\",          Flag160 (Id));\n       W (\"Is_Packed\",                       Flag51  (Id));\n-      W (\"Is_Packed_Array_Type\",            Flag138 (Id));\n+      W (\"Is_Packed_Array_Impl_Type\",            Flag138 (Id));\n       W (\"Is_Potentially_Use_Visible\",      Flag9   (Id));\n       W (\"Is_Predicate_Function\",           Flag255 (Id));\n       W (\"Is_Predicate_Function_M\",         Flag256 (Id));\n@@ -9277,7 +9277,7 @@ package body Einfo is\n             Write_Str (\"Inner_Instances\");\n \n          when Array_Kind                                   =>\n-            Write_Str (\"Packed_Array_Type\");\n+            Write_Str (\"Packed_Array_Impl_Type\");\n \n          when Entry_Kind                                   =>\n             Write_Str (\"Protection_Object\");"}, {"sha": "a6a41b7b424c48655342bb8532d66fe6bcbec28e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -2706,16 +2706,16 @@ package Einfo is\n --    Is_Packed_Array (synth)\n --       Applies to all entities, true if entity is for a packed array.\n \n---    Is_Packed_Array_Type (Flag138)\n+--    Is_Packed_Array_Impl_Type (Flag138)\n --       Defined in all entities. This flag is set on the entity for the type\n --       used to implement a packed array (either a modular type, or a subtype\n --       of Packed_Bytes{1,2,4} as appropriate). The flag is set if and only\n---       if the type appears in the Packed_Array_Type field of some other type\n+--       if the type appears in the Packed_Array_Impl_Type field of some other\n --       entity. It is used by the backend to activate the special processing\n --       for such types (unchecked conversions that would not otherwise be\n---       allowed are allowed for such types). If the Is_Packed_Array_Type flag\n---       is set in an entity, then the Original_Array_Type field of this entity\n---       points to the array type for which this is the packed array type.\n+--       allowed are allowed for such types). If Is_Packed_Array_Impl_Type is\n+--       set in an entity, then the Original_Array_Type field of this entity\n+--       points to the array type for which this is the Packed_Array_Impl_Type.\n \n --    Is_Potentially_Use_Visible (Flag9)\n --       Defined in all entities. Set if entity is potentially use visible,\n@@ -3402,8 +3402,8 @@ package Einfo is\n --       subprogram type.\n \n --    Original_Array_Type (Node21)\n---       Defined in modular types and array types and subtypes. Set only\n---       if the Is_Packed_Array_Type flag is set, indicating that the type\n+--       Defined in modular types and array types and subtypes. Set only if\n+--       the Is_Packed_Array_Impl_Type flag is set, indicating that the type\n --       is the implementation type for a packed array, and in this case it\n --       points to the original array type for which this is the packed\n --       array implementation type.\n@@ -3452,17 +3452,17 @@ package Einfo is\n --       it should be set in all cases, including package entities associated\n --       with formal packages. ???\n \n---    Packed_Array_Type (Node23)\n+--    Packed_Array_Impl_Type (Node23)\n --       Defined in array types and subtypes, including the string literal\n --       subtype case, if the corresponding type is packed (either bit packed\n --       or packed to eliminate holes in non-contiguous enumeration type index\n --       types). References the type used to represent the packed array, which\n --       is either a modular type for short static arrays, or an array of\n --       System.Unsigned. Note that in some situations (internal types, and\n --       references to fields of variant records), it is not always possible\n---       to construct this type in advance of its use. If Packed_Array_Type\n---       is empty, then the necessary type is declared on the fly for each\n---       reference to the array.\n+--       to construct this type in advance of its use. If this field is empty,\n+--       then the necessary type is declared on the fly for each reference to\n+--       the array.\n \n --    Parameter_Mode (synthesized)\n --       Applies to formal parameter entities. This is a synonym for Ekind,\n@@ -5098,7 +5098,7 @@ package Einfo is\n    --    Is_Limited_Record                   (Flag25)\n    --    Is_Obsolescent                      (Flag153)\n    --    Is_Package_Body_Entity              (Flag160)\n-   --    Is_Packed_Array_Type                (Flag138)\n+   --    Is_Packed_Array_Impl_Type           (Flag138)\n    --    Is_Potentially_Use_Visible          (Flag9)\n    --    Is_Preelaborated                    (Flag59)\n    --    Is_Primitive_Wrapper                (Flag195)\n@@ -5309,7 +5309,7 @@ package Einfo is\n    --    Component_Type                      (Node20)   (base type only)\n    --    Original_Array_Type                 (Node21)\n    --    Component_Size                      (Uint22)   (base type only)\n-   --    Packed_Array_Type                   (Node23)\n+   --    Packed_Array_Impl_Type              (Node23)\n    --    Related_Array_Object                (Node25)\n    --    Component_Alignment                 (special)  (base type only)\n    --    Has_Component_Size_Clause           (Flag68)   (base type only)\n@@ -6024,7 +6024,7 @@ package Einfo is\n    --    String_Literal_Low_Bound            (Node15)\n    --    String_Literal_Length               (Uint16)\n    --    First_Index                         (Node17)   (always Empty)\n-   --    Packed_Array_Type                   (Node23)\n+   --    Packed_Array_Impl_Type              (Node23)\n    --    (plus type attributes)\n \n    --  E_Subprogram_Body\n@@ -6625,7 +6625,7 @@ package Einfo is\n    function Is_Optional_Parameter               (Id : E) return B;\n    function Is_Package_Body_Entity              (Id : E) return B;\n    function Is_Packed                           (Id : E) return B;\n-   function Is_Packed_Array_Type                (Id : E) return B;\n+   function Is_Packed_Array_Impl_Type           (Id : E) return B;\n    function Is_Potentially_Use_Visible          (Id : E) return B;\n    function Is_Predicate_Function               (Id : E) return B;\n    function Is_Predicate_Function_M             (Id : E) return B;\n@@ -6705,7 +6705,7 @@ package Einfo is\n    function Overridden_Operation                (Id : E) return E;\n    function PPC_Wrapper                         (Id : E) return E;\n    function Package_Instantiation               (Id : E) return N;\n-   function Packed_Array_Type                   (Id : E) return E;\n+   function Packed_Array_Impl_Type              (Id : E) return E;\n    function Parent_Subtype                      (Id : E) return E;\n    function Part_Of_Constituents                (Id : E) return L;\n    function Postcondition_Proc                  (Id : E) return E;\n@@ -7256,7 +7256,7 @@ package Einfo is\n    procedure Set_Is_Optional_Parameter           (Id : E; V : B := True);\n    procedure Set_Is_Package_Body_Entity          (Id : E; V : B := True);\n    procedure Set_Is_Packed                       (Id : E; V : B := True);\n-   procedure Set_Is_Packed_Array_Type            (Id : E; V : B := True);\n+   procedure Set_Is_Packed_Array_Impl_Type       (Id : E; V : B := True);\n    procedure Set_Is_Potentially_Use_Visible      (Id : E; V : B := True);\n    procedure Set_Is_Predicate_Function           (Id : E; V : B := True);\n    procedure Set_Is_Predicate_Function_M         (Id : E; V : B := True);\n@@ -7336,7 +7336,7 @@ package Einfo is\n    procedure Set_Overridden_Operation            (Id : E; V : E);\n    procedure Set_PPC_Wrapper                     (Id : E; V : E);\n    procedure Set_Package_Instantiation           (Id : E; V : N);\n-   procedure Set_Packed_Array_Type               (Id : E; V : E);\n+   procedure Set_Packed_Array_Impl_Type          (Id : E; V : E);\n    procedure Set_Parent_Subtype                  (Id : E; V : E);\n    procedure Set_Part_Of_Constituents            (Id : E; V : L);\n    procedure Set_Postcondition_Proc              (Id : E; V : E);\n@@ -8026,7 +8026,7 @@ package Einfo is\n    pragma Inline (Is_Overloadable);\n    pragma Inline (Is_Package_Body_Entity);\n    pragma Inline (Is_Packed);\n-   pragma Inline (Is_Packed_Array_Type);\n+   pragma Inline (Is_Packed_Array_Impl_Type);\n    pragma Inline (Is_Potentially_Use_Visible);\n    pragma Inline (Is_Predicate_Function);\n    pragma Inline (Is_Predicate_Function_M);\n@@ -8116,7 +8116,7 @@ package Einfo is\n    pragma Inline (Overridden_Operation);\n    pragma Inline (PPC_Wrapper);\n    pragma Inline (Package_Instantiation);\n-   pragma Inline (Packed_Array_Type);\n+   pragma Inline (Packed_Array_Impl_Type);\n    pragma Inline (Parameter_Mode);\n    pragma Inline (Parent_Subtype);\n    pragma Inline (Part_Of_Constituents);\n@@ -8467,7 +8467,7 @@ package Einfo is\n    pragma Inline (Set_Is_Optional_Parameter);\n    pragma Inline (Set_Is_Package_Body_Entity);\n    pragma Inline (Set_Is_Packed);\n-   pragma Inline (Set_Is_Packed_Array_Type);\n+   pragma Inline (Set_Is_Packed_Array_Impl_Type);\n    pragma Inline (Set_Is_Potentially_Use_Visible);\n    pragma Inline (Set_Is_Predicate_Function);\n    pragma Inline (Set_Is_Predicate_Function_M);\n@@ -8547,7 +8547,7 @@ package Einfo is\n    pragma Inline (Set_Overridden_Operation);\n    pragma Inline (Set_PPC_Wrapper);\n    pragma Inline (Set_Package_Instantiation);\n-   pragma Inline (Set_Packed_Array_Type);\n+   pragma Inline (Set_Packed_Array_Impl_Type);\n    pragma Inline (Set_Parent_Subtype);\n    pragma Inline (Set_Part_Of_Constituents);\n    pragma Inline (Set_Postcondition_Proc);"}, {"sha": "3c2101f218be3c86231884c231cc79f252d517cf", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -1607,7 +1607,7 @@ package body Exp_Aggr is\n \n       if Present (Typ)\n         and then Is_Bit_Packed_Array (Typ)\n-        and then Is_Modular_Integer_Type (Packed_Array_Type (Typ))\n+        and then Is_Modular_Integer_Type (Packed_Array_Impl_Type (Typ))\n       then\n          Append_To (New_Code,\n            Make_Assignment_Statement (Loc,\n@@ -6317,14 +6317,14 @@ package body Exp_Aggr is\n       end if;\n \n       --  If two-dimensional, check whether it can be folded, and transformed\n-      --  into a one-dimensional aggregate for the Packed_Array_Type of the\n-      --  original type.\n+      --  into a one-dimensional aggregate for the Packed_Array_Impl_Type of\n+      --  the original type.\n \n       if Number_Dimensions (Typ) = 2 then\n          return Two_Dim_Packed_Array_Handled (N);\n       end if;\n \n-      if not Is_Modular_Integer_Type (Packed_Array_Type (Typ)) then\n+      if not Is_Modular_Integer_Type (Packed_Array_Impl_Type (Typ)) then\n          return False;\n       end if;\n \n@@ -6523,7 +6523,7 @@ package body Exp_Aggr is\n               Unchecked_Convert_To (Typ,\n                 Make_Qualified_Expression (Loc,\n                   Subtype_Mark =>\n-                    New_Occurrence_Of (Packed_Array_Type (Typ), Loc),\n+                    New_Occurrence_Of (Packed_Array_Impl_Type (Typ), Loc),\n                   Expression   => Lit)));\n \n             Analyze_And_Resolve (N, Typ);\n@@ -6705,10 +6705,11 @@ package body Exp_Aggr is\n \n    function Two_Dim_Packed_Array_Handled (N : Node_Id) return Boolean is\n       Loc          : constant Source_Ptr := Sloc (N);\n-      Typ          : constant Entity_Id := Etype (N);\n-      Ctyp         : constant Entity_Id := Component_Type (Typ);\n-      Comp_Size    : constant Int := UI_To_Int (Component_Size (Typ));\n-      Packed_Array : constant Entity_Id := Packed_Array_Type (Base_Type (Typ));\n+      Typ          : constant Entity_Id  := Etype (N);\n+      Ctyp         : constant Entity_Id  := Component_Type (Typ);\n+      Comp_Size    : constant Int        := UI_To_Int (Component_Size (Typ));\n+      Packed_Array : constant Entity_Id  :=\n+                       Packed_Array_Impl_Type (Base_Type (Typ));\n \n       One_Comp  : Node_Id;\n       --  Expression in original aggregate"}, {"sha": "a0a147fd11b05bb2725ab635052e5a521e07f395", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -2863,7 +2863,7 @@ package body Exp_Attr is\n       when Attribute_First =>\n \n          --  If the prefix type is a constrained packed array type which\n-         --  already has a Packed_Array_Type representation defined, then\n+         --  already has a Packed_Array_Impl_Type representation defined, then\n          --  replace this attribute with a direct reference to 'First of the\n          --  appropriate index subtype (since otherwise the back end will try\n          --  to give us the value of 'First for this implementation type).\n@@ -3526,7 +3526,7 @@ package body Exp_Attr is\n       when Attribute_Last =>\n \n          --  If the prefix type is a constrained packed array type which\n-         --  already has a Packed_Array_Type representation defined, then\n+         --  already has a Packed_Array_Impl_Type representation defined, then\n          --  replace this attribute with a direct reference to 'Last of the\n          --  appropriate index subtype (since otherwise the back end will try\n          --  to give us the value of 'Last for this implementation type).\n@@ -3676,11 +3676,11 @@ package body Exp_Attr is\n                return;\n \n             --  If the prefix type is a constrained packed array type which\n-            --  already has a Packed_Array_Type representation defined, then\n-            --  replace this attribute with a direct reference to 'Range_Length\n-            --  of the appropriate index subtype (since otherwise the back end\n-            --  will try to give us the value of 'Length for this\n-            --  implementation type).\n+            --  already has a Packed_Array_Impl_Type representation defined,\n+            --  then replace this attribute with a reference to 'Range_Length\n+            --  of the appropriate index subtype (since otherwise the\n+            --  back end will try to give us the value of 'Length for\n+            --  this implementation type).s\n \n             elsif Is_Constrained (Ptyp) then\n                Rewrite (N,\n@@ -7663,7 +7663,7 @@ package body Exp_Attr is\n \n       return Is_Array_Type (Arr)\n         and then Is_Constrained (Arr)\n-        and then Present (Packed_Array_Type (Arr));\n+        and then Present (Packed_Array_Impl_Type (Arr));\n    end Is_Constrained_Packed_Array;\n \n    ----------------------------------------"}, {"sha": "adf8dfce8e6e7f7decd8e39ddb50310c5921eb3d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -6189,9 +6189,9 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n-      --  For a reference to a component of a bit packed array, we have to\n-      --  convert it to a reference to the corresponding Packed_Array_Type.\n-      --  We only want to do this for simple references, and not for:\n+      --  For a reference to a component of a bit packed array, we convert it\n+      --  to a reference to the corresponding Packed_Array_Impl_Type. We only\n+      --  want to do this for simple references, and not for:\n \n       --    Left side of assignment, or prefix of left side of assignment, or\n       --    prefix of the prefix, to handle packed arrays of packed arrays,"}, {"sha": "eb621b312d98dd9fc53a9bad79262afbc21c0c72", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -503,9 +503,9 @@ package body Exp_Ch5 is\n                Des_Type : Entity_Id;\n \n             begin\n-               if Present (Packed_Array_Type (Typ))\n-                 and then Is_Array_Type (Packed_Array_Type (Typ))\n-                 and then not Is_Constrained (Packed_Array_Type (Typ))\n+               if Present (Packed_Array_Impl_Type (Typ))\n+                 and then Is_Array_Type (Packed_Array_Impl_Type (Typ))\n+                 and then not Is_Constrained (Packed_Array_Impl_Type (Typ))\n                then\n                   return True;\n "}, {"sha": "cbd4c55d949fc81f21b2854941b551f3beda07fa", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -958,10 +958,10 @@ package body Exp_Dbug is\n    end Get_Secondary_DT_External_Name;\n \n    ---------------------------------\n-   -- Make_Packed_Array_Type_Name --\n+   -- Make_Packed_Array_Impl_Type_Name --\n    ---------------------------------\n \n-   function Make_Packed_Array_Type_Name\n+   function Make_Packed_Array_Impl_Type_Name\n      (Typ   : Entity_Id;\n       Csize : Uint)\n       return  Name_Id\n@@ -971,7 +971,7 @@ package body Exp_Dbug is\n       Add_Str_To_Name_Buffer (\"___XP\");\n       Add_Uint_To_Buffer (Csize);\n       return Name_Find;\n-   end Make_Packed_Array_Type_Name;\n+   end Make_Packed_Array_Impl_Type_Name;\n \n    -----------------------------------\n    -- Output_Homonym_Numbers_Suffix --"}, {"sha": "c687cdde9d5407ffd83096b8fc2f13b83aae806f", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1206,7 +1206,7 @@ package Exp_Dbug is\n    -- Subprograms for Handling Packed Array Type Names --\n    ------------------------------------------------------\n \n-   function Make_Packed_Array_Type_Name\n+   function Make_Packed_Array_Impl_Type_Name\n      (Typ   : Entity_Id;\n       Csize : Uint)\n       return  Name_Id;"}, {"sha": "7455e25eeb2cb6b4cd2d637f48b0c5d1105a797d", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -519,7 +519,7 @@ package body Exp_Pakd is\n    --\n    --    Atyp is the constrained array type (the actual subtype has been\n    --    computed if necessary to obtain the constraints, but this is still\n-   --    the original array type, not the Packed_Array_Type value).\n+   --    the original array type, not the Packed_Array_Impl_Type value).\n    --\n    --    Obj is the object which is to be indexed. It is always of type Atyp.\n    --\n@@ -767,7 +767,7 @@ package body Exp_Pakd is\n    begin\n       Convert_To_Actual_Subtype (Aexp);\n       Act_ST := Underlying_Type (Etype (Aexp));\n-      Create_Packed_Array_Type (Act_ST);\n+      Create_Packed_Array_Impl_Type (Act_ST);\n \n       --  Just replace the etype with the packed array type. This works because\n       --  the expression will not be further analyzed, and Gigi considers the\n@@ -784,7 +784,7 @@ package body Exp_Pakd is\n       --  more complex packed expressions in actuals is confused. Probably the\n       --  problem only remains for actuals in calls.\n \n-      Set_Etype (Aexp, Packed_Array_Type (Act_ST));\n+      Set_Etype (Aexp, Packed_Array_Impl_Type (Act_ST));\n \n       if Is_Entity_Name (Aexp)\n         or else\n@@ -797,10 +797,10 @@ package body Exp_Pakd is\n    end Convert_To_PAT_Type;\n \n    ------------------------------\n-   -- Create_Packed_Array_Type --\n+   -- Create_Packed_Array_Impl_Type --\n    ------------------------------\n \n-   procedure Create_Packed_Array_Type (Typ : Entity_Id) is\n+   procedure Create_Packed_Array_Impl_Type (Typ : Entity_Id) is\n       Loc      : constant Source_Ptr := Sloc (Typ);\n       Ctyp     : constant Entity_Id  := Component_Type (Typ);\n       Csize    : constant Uint       := Component_Size (Typ);\n@@ -865,7 +865,7 @@ package body Exp_Pakd is\n          end if;\n \n          Set_Is_Itype (PAT, True);\n-         Set_Packed_Array_Type (Typ, PAT);\n+         Set_Packed_Array_Impl_Type (Typ, PAT);\n          Analyze (Decl, Suppress => All_Checks);\n \n          if Pushed_Scope then\n@@ -891,7 +891,7 @@ package body Exp_Pakd is\n          Init_Alignment                (PAT);\n          Set_Parent                    (PAT, Empty);\n          Set_Associated_Node_For_Itype (PAT, Typ);\n-         Set_Is_Packed_Array_Type      (PAT, True);\n+         Set_Is_Packed_Array_Impl_Type      (PAT, True);\n          Set_Original_Array_Type       (PAT, Typ);\n \n          --  For a non-bit-packed array, propagate reverse storage order\n@@ -942,12 +942,12 @@ package body Exp_Pakd is\n          end if;\n       end Set_PB_Type;\n \n-   --  Start of processing for Create_Packed_Array_Type\n+   --  Start of processing for Create_Packed_Array_Impl_Type\n \n    begin\n       --  If we already have a packed array type, nothing to do\n \n-      if Present (Packed_Array_Type (Typ)) then\n+      if Present (Packed_Array_Impl_Type (Typ)) then\n          return;\n       end if;\n \n@@ -963,9 +963,9 @@ package body Exp_Pakd is\n          if Present (Ancest)\n            and then Is_Array_Type (Ancest)\n            and then Is_Constrained (Ancest)\n-           and then Present (Packed_Array_Type (Ancest))\n+           and then Present (Packed_Array_Impl_Type (Ancest))\n          then\n-            Set_Packed_Array_Type (Typ, Packed_Array_Type (Ancest));\n+            Set_Packed_Array_Impl_Type (Typ, Packed_Array_Impl_Type (Ancest));\n             return;\n          end if;\n       end if;\n@@ -1015,7 +1015,7 @@ package body Exp_Pakd is\n            Make_Defining_Identifier (Loc,\n              Chars => New_External_Name (Chars (Typ), 'P'));\n \n-         Set_Packed_Array_Type (Typ, PAT);\n+         Set_Packed_Array_Impl_Type (Typ, PAT);\n \n          declare\n             Indexes   : constant List_Id := New_List;\n@@ -1114,7 +1114,7 @@ package body Exp_Pakd is\n \n          --  Set type as packed array type and install it\n \n-         Set_Is_Packed_Array_Type (PAT);\n+         Set_Is_Packed_Array_Impl_Type (PAT);\n          Install_PAT;\n          return;\n \n@@ -1124,9 +1124,9 @@ package body Exp_Pakd is\n       elsif not Is_Constrained (Typ) then\n          PAT :=\n            Make_Defining_Identifier (Loc,\n-             Chars => Make_Packed_Array_Type_Name (Typ, Csize));\n+             Chars => Make_Packed_Array_Impl_Type_Name (Typ, Csize));\n \n-         Set_Packed_Array_Type (Typ, PAT);\n+         Set_Packed_Array_Impl_Type (Typ, PAT);\n          Set_PB_Type;\n \n          Decl :=\n@@ -1148,9 +1148,9 @@ package body Exp_Pakd is\n       else\n          PAT :=\n            Make_Defining_Identifier (Loc,\n-             Chars => Make_Packed_Array_Type_Name (Typ, Csize));\n+             Chars => Make_Packed_Array_Impl_Type_Name (Typ, Csize));\n \n-         Set_Packed_Array_Type (Typ, PAT);\n+         Set_Packed_Array_Impl_Type (Typ, PAT);\n \n          --  Build an expression for the length of the array in bits.\n          --  This is the product of the length of each of the dimensions\n@@ -1350,7 +1350,7 @@ package body Exp_Pakd is\n             Set_Must_Be_On_Byte_Boundary (Typ);\n          end if;\n       end if;\n-   end Create_Packed_Array_Type;\n+   end Create_Packed_Array_Impl_Type;\n \n    -----------------------------------\n    -- Expand_Bit_Packed_Element_Set --\n@@ -1424,7 +1424,7 @@ package body Exp_Pakd is\n       Obj := Relocate_Node (Prefix (Lhs));\n       Convert_To_Actual_Subtype (Obj);\n       Atyp := Etype (Obj);\n-      PAT  := Packed_Array_Type (Atyp);\n+      PAT  := Packed_Array_Impl_Type (Atyp);\n       Ctyp := Component_Type (Atyp);\n       Csiz := UI_To_Int (Component_Size (Atyp));\n \n@@ -2048,7 +2048,7 @@ package body Exp_Pakd is\n       Obj := Relocate_Node (Prefix (N));\n       Convert_To_Actual_Subtype (Obj);\n       Atyp := Etype (Obj);\n-      PAT  := Packed_Array_Type (Atyp);\n+      PAT  := Packed_Array_Impl_Type (Atyp);\n       Ctyp := Component_Type (Atyp);\n       Csiz := UI_To_Int (Component_Size (Atyp));\n \n@@ -2696,7 +2696,7 @@ package body Exp_Pakd is\n       --  with its actual subtype. This actual subtype will have a packed array\n       --  type with appropriate bounds.\n \n-      if not Is_Constrained (Packed_Array_Type (Etype (Pfx))) then\n+      if not Is_Constrained (Packed_Array_Impl_Type (Etype (Pfx))) then\n          Convert_To_Actual_Subtype (Pfx);\n       end if;\n \n@@ -2725,7 +2725,7 @@ package body Exp_Pakd is\n       Rewrite (N,\n         Make_Indexed_Component (Sloc (N),\n           Prefix      =>\n-            Unchecked_Convert_To (Packed_Array_Type (Etype (Pfx)), Pfx),\n+            Unchecked_Convert_To (Packed_Array_Impl_Type (Etype (Pfx)), Pfx),\n           Expressions => Exprs));\n \n       Analyze_And_Resolve (N, Typ);"}, {"sha": "586d80687e8dc570980074c5811739d8547034d8", "filename": "gcc/ada/exp_pakd.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_pakd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_pakd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.ads?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,8 +34,8 @@ package Exp_Pakd is\n    -------------------------------------\n \n    --  When a packed array (sub)type is frozen, we create a corresponding\n-   --  type that will be used to hold the bits of the packed value, and\n-   --  store the entity for this type in the Packed_Array_Type field of the\n+   --  type that will be used to hold the bits of the packed value, and store\n+   --  the entity for this type in the Packed_Array_Impl_Type field of the\n    --  E_Array_Type or E_Array_Subtype entity for the packed array.\n \n    --  This packed array type has the name xxxPn, where xxx is the name\n@@ -207,11 +207,11 @@ package Exp_Pakd is\n    -- Subprograms --\n    -----------------\n \n-   procedure Create_Packed_Array_Type (Typ  : Entity_Id);\n+   procedure Create_Packed_Array_Impl_Type (Typ  : Entity_Id);\n    --  Typ is a array type or subtype to which pragma Pack applies. If the\n-   --  Packed_Array_Type field of Typ is already set, then the call has no\n-   --  effect, otherwise a suitable type or subtype is created and stored\n-   --  in the Packed_Array_Type field of Typ. This created type is an Itype\n+   --  Packed_Array_Impl_Type field of Typ is already set, then the call has\n+   --  no effect, otherwise a suitable type or subtype is created and stored in\n+   --  the Packed_Array_Impl_Type field of Typ. This created type is an Itype\n    --  so that Gigi will simply elaborate and freeze the type on first use\n    --  (which is typically the definition of the corresponding array type).\n    --"}, {"sha": "6db424c1708f3800494f937459644f0b34dc86a2", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -6272,8 +6272,10 @@ package body Exp_Util is\n       elsif Esize (Typ) /= 0 and then Esize (Typ) <= 256 then\n          return False;\n \n-      elsif Is_Array_Type (Typ) and then Present (Packed_Array_Type (Typ)) then\n-         return May_Generate_Large_Temp (Packed_Array_Type (Typ));\n+      elsif Is_Array_Type (Typ)\n+        and then Present (Packed_Array_Impl_Type (Typ))\n+      then\n+         return May_Generate_Large_Temp (Packed_Array_Impl_Type (Typ));\n \n       --  We could do more here to find other small types ???\n \n@@ -6403,7 +6405,7 @@ package body Exp_Util is\n         or else Is_Access_Type (Typ)\n         or else\n           (Is_Bit_Packed_Array (Typ)\n-            and then Is_Modular_Integer_Type (Packed_Array_Type (Typ)))\n+            and then Is_Modular_Integer_Type (Packed_Array_Impl_Type (Typ)))\n       then\n          return False;\n \n@@ -7283,7 +7285,7 @@ package body Exp_Util is\n    begin\n       return Is_Scalar_Type (UT)\n         or else (Is_Bit_Packed_Array (UT)\n-                  and then Is_Scalar_Type (Packed_Array_Type (UT)));\n+                  and then Is_Scalar_Type (Packed_Array_Impl_Type (UT)));\n    end Represented_As_Scalar;\n \n    ------------------------------\n@@ -7713,8 +7715,8 @@ package body Exp_Util is\n       --  Conversions to and from packed array types are always ignored and\n       --  hence are safe.\n \n-      elsif Is_Packed_Array_Type (Otyp)\n-        or else Is_Packed_Array_Type (Ityp)\n+      elsif Is_Packed_Array_Impl_Type (Otyp)\n+        or else Is_Packed_Array_Impl_Type (Ityp)\n       then\n          return True;\n       end if;"}, {"sha": "bf678b6aa2a756a76acfe9a19a187ac45b69a77f", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -918,7 +918,7 @@ package body Freeze is\n                   --  directly, where all the information is at hand ???\n \n                   if Is_Array_Type (Etype (Comp))\n-                    and then Present (Packed_Array_Type (Etype (Comp)))\n+                    and then Present (Packed_Array_Impl_Type (Etype (Comp)))\n                   then\n                      declare\n                         Ocomp  : constant Entity_Id :=\n@@ -975,9 +975,10 @@ package body Freeze is\n \n                      if Is_Elementary_Type (Ctyp)\n                        or else (Is_Array_Type (Ctyp)\n-                                 and then Present (Packed_Array_Type (Ctyp))\n+                                 and then Present\n+                                            (Packed_Array_Impl_Type (Ctyp))\n                                  and then Is_Modular_Integer_Type\n-                                            (Packed_Array_Type (Ctyp)))\n+                                            (Packed_Array_Impl_Type (Ctyp)))\n                      then\n                         --  Packed size unknown if we have an atomic type\n                         --  or a by reference type, since the back end\n@@ -2523,27 +2524,27 @@ package body Freeze is\n          if Is_Packed (Arr)\n            and then Ekind (Arr) /= E_String_Literal_Subtype\n          then\n-            Create_Packed_Array_Type (Arr);\n-            Freeze_And_Append (Packed_Array_Type (Arr), N, Result);\n+            Create_Packed_Array_Impl_Type (Arr);\n+            Freeze_And_Append (Packed_Array_Impl_Type (Arr), N, Result);\n \n             --  Size information of packed array type is copied to the array\n             --  type, since this is really the representation. But do not\n             --  override explicit existing size values. If the ancestor subtype\n-            --  is constrained the packed_array_type will be inherited from it,\n-            --  but the size may have been provided already, and must not be\n-            --  overridden either.\n+            --  is constrained the Packed_Array_Impl_Type will be inherited\n+            --  from it, but the size may have been provided already, and\n+            --  must not be overridden either.\n \n             if not Has_Size_Clause (Arr)\n               and then\n                 (No (Ancestor_Subtype (Arr))\n                   or else not Has_Size_Clause (Ancestor_Subtype (Arr)))\n             then\n-               Set_Esize     (Arr, Esize     (Packed_Array_Type (Arr)));\n-               Set_RM_Size   (Arr, RM_Size   (Packed_Array_Type (Arr)));\n+               Set_Esize     (Arr, Esize     (Packed_Array_Impl_Type (Arr)));\n+               Set_RM_Size   (Arr, RM_Size   (Packed_Array_Impl_Type (Arr)));\n             end if;\n \n             if not Has_Alignment_Clause (Arr) then\n-               Set_Alignment (Arr, Alignment (Packed_Array_Type (Arr)));\n+               Set_Alignment (Arr, Alignment (Packed_Array_Impl_Type (Arr)));\n             end if;\n          end if;\n \n@@ -7321,7 +7322,7 @@ package body Freeze is\n                   then\n                      exit;\n                   elsif Is_Array_Type (Etype (Comp))\n-                     and then Present (Packed_Array_Type (Etype (Comp)))\n+                     and then Present (Packed_Array_Impl_Type (Etype (Comp)))\n                   then\n                      Error_Msg_NE\n                        (\"\\packed array component& \" &"}, {"sha": "d9108c9803c4879e4262fcddec5521b787ce659c", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -1724,7 +1724,7 @@ package body Layout is\n \n             elsif Is_Array_Type (Ctyp)\n               and then Is_Bit_Packed_Array (Ctyp)\n-              and then Is_Modular_Integer_Type (Packed_Array_Type (Ctyp))\n+              and then Is_Modular_Integer_Type (Packed_Array_Impl_Type (Ctyp))\n             then\n                Forc := False;\n \n@@ -2624,9 +2624,11 @@ package body Layout is\n          --  array type if a packed array type has been created and the fields\n          --  are not currently set.\n \n-         if Is_Array_Type (E) and then Present (Packed_Array_Type (E)) then\n+         if Is_Array_Type (E)\n+           and then Present (Packed_Array_Impl_Type (E))\n+         then\n             declare\n-               PAT : constant Entity_Id := Packed_Array_Type (E);\n+               PAT : constant Entity_Id := Packed_Array_Impl_Type (E);\n \n             begin\n                if Unknown_Esize (E) then\n@@ -3169,7 +3171,9 @@ package body Layout is\n       --  front end layout, because otherwise this is always handled in the\n       --  backend.\n \n-      if Is_Packed_Array_Type (E) and then not Frontend_Layout_On_Target then\n+      if Is_Packed_Array_Impl_Type (E)\n+        and then not Frontend_Layout_On_Target\n+      then\n          return;\n \n       --  If there is an alignment clause, then we respect it"}, {"sha": "b11b10a90ec0dc7e6b264ff20cb3fa601251a6db", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -610,7 +610,7 @@ package body Sem_Aggr is\n            and then Size_Known_At_Compile_Time (Component_Type (Typ)));\n \n       --  We always need a freeze node for a packed array subtype, so that we\n-      --  can build the Packed_Array_Type corresponding to the subtype. If\n+      --  can build the Packed_Array_Impl_Type corresponding to the subtype. If\n       --  expansion is disabled, the packed array subtype is not built, and we\n       --  must not generate a freeze node for the type, or else it will appear\n       --  incomplete to gigi."}, {"sha": "84e62db555ead2daefe56f4f950ac9db8ec64651", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -890,7 +890,8 @@ package body Sem_Ch13 is\n \n                            if Is_Bit_Packed_Array (P) then\n                               Set_Is_Bit_Packed_Array (Base_Type (E));\n-                              Set_Packed_Array_Type (E, Packed_Array_Type (P));\n+                              Set_Packed_Array_Impl_Type\n+                                (E, Packed_Array_Impl_Type (P));\n                            end if;\n                         end if;\n "}, {"sha": "e3bf564d62fa7e064c329ba0993485c914a0224a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -5165,7 +5165,7 @@ package body Sem_Ch3 is\n          Set_Component_Type    (Implicit_Base, Element_Type);\n          Set_Has_Task          (Implicit_Base, Has_Task (Element_Type));\n          Set_Component_Size    (Implicit_Base, Uint_0);\n-         Set_Packed_Array_Type (Implicit_Base, Empty);\n+         Set_Packed_Array_Impl_Type (Implicit_Base, Empty);\n          Set_Has_Controlled_Component\n                                (Implicit_Base, Has_Controlled_Component\n                                                         (Element_Type)\n@@ -5198,7 +5198,7 @@ package body Sem_Ch3 is\n       --  Common attributes for both cases\n \n       Set_Component_Type (Base_Type (T), Element_Type);\n-      Set_Packed_Array_Type (T, Empty);\n+      Set_Packed_Array_Impl_Type (T, Empty);\n \n       if Aliased_Present (Component_Definition (Def)) then\n          Check_SPARK_Restriction\n@@ -5269,7 +5269,9 @@ package body Sem_Ch3 is\n       --  types created for packed entities do not need such, they are\n       --  compatible with the user-defined type.\n \n-      if Number_Dimensions (T) = 1 and then not Is_Packed_Array_Type (T) then\n+      if Number_Dimensions (T) = 1\n+        and then not Is_Packed_Array_Impl_Type (T)\n+      then\n          New_Concatenation_Op (T);\n       end if;\n \n@@ -11473,13 +11475,13 @@ package body Sem_Ch3 is\n       Set_Is_Private_Composite (Def_Id, Is_Private_Composite (T));\n       Set_Is_Limited_Composite (Def_Id, Is_Limited_Composite (T));\n \n-      --  A subtype does not inherit the packed_array_type of is parent. We\n-      --  need to initialize the attribute because if Def_Id is previously\n+      --  A subtype does not inherit the Packed_Array_Impl_Type of is parent.\n+      --  We need to initialize the attribute because if Def_Id is previously\n       --  analyzed through a limited_with clause, it will have the attributes\n       --  of an incomplete type, one of which is an Elist that overlaps the\n-      --  Packed_Array_Type field.\n+      --  Packed_Array_Impl_Type field.\n \n-      Set_Packed_Array_Type (Def_Id, Empty);\n+      Set_Packed_Array_Impl_Type (Def_Id, Empty);\n \n       --  Build a freeze node if parent still needs one. Also make sure that\n       --  the Depends_On_Private status is set because the subtype will need\n@@ -11913,7 +11915,7 @@ package body Sem_Ch3 is\n            and then Is_Packed (Compon_Type)\n            and then Is_Frozen (Current_Scope)\n          then\n-            Create_Packed_Array_Type (Array_Comp);\n+            Create_Packed_Array_Impl_Type (Array_Comp);\n          end if;\n \n          return Array_Comp;\n@@ -12775,7 +12777,7 @@ package body Sem_Ch3 is\n       Set_Convention           (T1, Convention            (T2));\n       Set_Is_Limited_Composite (T1, Is_Limited_Composite  (T2));\n       Set_Is_Private_Composite (T1, Is_Private_Composite  (T2));\n-      Set_Packed_Array_Type    (T1, Packed_Array_Type     (T2));\n+      Set_Packed_Array_Impl_Type    (T1, Packed_Array_Impl_Type     (T2));\n    end Copy_Array_Subtype_Attributes;\n \n    -----------------------------------"}, {"sha": "e085cd203c0186c2060e6ab78cb429a05a4b1646", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -4767,7 +4767,7 @@ package body Sem_Ch8 is\n                if Is_Array_Type (Entyp)\n                  and then Is_Packed (Entyp)\n                  and then Present (Etype (N))\n-                 and then Etype (N) = Packed_Array_Type (Entyp)\n+                 and then Etype (N) = Packed_Array_Impl_Type (Entyp)\n                then\n                   null;\n "}, {"sha": "4ee8297530c120cb7b66c833a31b85efc6cca8e5", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -780,7 +780,7 @@ package body Sem_Eval is\n       --  We do not attempt comparisons for packed arrays arrays represented as\n       --  modular types, where the semantics of comparison is quite different.\n \n-      elsif Is_Packed_Array_Type (Ltyp)\n+      elsif Is_Packed_Array_Impl_Type (Ltyp)\n         and then Is_Modular_Integer_Type (Ltyp)\n       then\n          return Unknown;\n@@ -1317,7 +1317,7 @@ package body Sem_Eval is\n             --  We might want to try to evaluate these at compile time one\n             --  day, but we do not make that attempt now.\n \n-            if Is_Packed_Array_Type (Etype (Op)) then\n+            if Is_Packed_Array_Impl_Type (Etype (Op)) then\n                return False;\n             end if;\n \n@@ -4620,7 +4620,7 @@ package body Sem_Eval is\n       then\n          if Nkind (Parent (N)) = N_Defining_Identifier\n            and then Is_Array_Type (Parent (N))\n-           and then Present (Packed_Array_Type (Parent (N)))\n+           and then Present (Packed_Array_Impl_Type (Parent (N)))\n            and then Present (First_Rep_Item (Parent (N)))\n          then\n             Error_Msg_N"}, {"sha": "be2b4c19daf25fbf6d81ef51c3b3a9f799074d6a", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1140,15 +1140,15 @@ package body Sem_Type is\n \n       elsif Is_Array_Type (T2)\n         and then Is_Packed (T2)\n-        and then T1 = Packed_Array_Type (T2)\n+        and then T1 = Packed_Array_Impl_Type (T2)\n       then\n          return True;\n \n       --  Similarly an array type covers its corresponding packed array type\n \n       elsif Is_Array_Type (T1)\n         and then Is_Packed (T1)\n-        and then T2 = Packed_Array_Type (T1)\n+        and then T2 = Packed_Array_Impl_Type (T1)\n       then\n          return True;\n "}, {"sha": "06f281591d88d14ed84cbae52fda7b5e4c3b01f7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca597af97cb20a9a0b98358880bd3a488d49cc2/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8ca597af97cb20a9a0b98358880bd3a488d49cc2", "patch": "@@ -13167,9 +13167,9 @@ package body Sem_Util is\n             end if;\n \n             if Is_Packed (New_Itype) then\n-               Set_Packed_Array_Type (New_Itype,\n+               Set_Packed_Array_Impl_Type (New_Itype,\n                  Copy_Node_With_Replacement\n-                   (Packed_Array_Type (New_Itype)));\n+                   (Packed_Array_Impl_Type (New_Itype)));\n             end if;\n          end if;\n       end Copy_Itype_With_Replacement;\n@@ -13675,7 +13675,7 @@ package body Sem_Util is\n             end if;\n \n             if Is_Packed (Old_Itype) then\n-               Visit_Field (Union_Id (Packed_Array_Type (Old_Itype)),\n+               Visit_Field (Union_Id (Packed_Array_Impl_Type (Old_Itype)),\n                             Old_Itype);\n             end if;\n          end if;\n@@ -16057,10 +16057,10 @@ package body Sem_Util is\n             --  also need it for the former if we need it for the latter.\n \n             if Is_Packed (T) then\n-               Set_Debug_Info_Needed_If_Not_Set (Packed_Array_Type (T));\n+               Set_Debug_Info_Needed_If_Not_Set (Packed_Array_Impl_Type (T));\n             end if;\n \n-            if Is_Packed_Array_Type (T) then\n+            if Is_Packed_Array_Impl_Type (T) then\n                Set_Debug_Info_Needed_If_Not_Set (Original_Array_Type (T));\n             end if;\n "}]}