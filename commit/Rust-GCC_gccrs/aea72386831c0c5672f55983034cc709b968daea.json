{"sha": "aea72386831c0c5672f55983034cc709b968daea", "node_id": "C_kwDOANBUbNoAKGFlYTcyMzg2ODMxYzBjNTY3MmY1NTk4MzAzNGNjNzA5Yjk2OGRhZWE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-15T12:20:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-15T12:20:53Z"}, "message": "openmp: Add support for thread_limit clause on target\n\nOpenMP 5.1 says that thread_limit clause can also appear on target,\nand similarly to teams should affect the thread-limit-var ICV.\nOn combined target teams, the clause goes to both.\n\nWe actually passed thread_limit internally on target already before,\nbut only used it for gcn/ptx offloading to hint how many threads should be\ncreated and for ptx didn't set thread_limit_var in that case.\nSimilarly for host fallback.\nAlso, I found that we weren't copying the args array that contains encoded\nthread_limit and num_teams clause for target (etc.) for async target.\n\n2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* gimplify.c (optimize_target_teams): Only add OMP_CLAUSE_THREAD_LIMIT\n\tto OMP_TARGET_CLAUSES if it isn't there already.\ngcc/c-family/\n\t* c-omp.c (c_omp_split_clauses) <case OMP_CLAUSE_THREAD_LIMIT>:\n\tDuplicate to both OMP_TARGET and OMP_TEAMS.\ngcc/c/\n\t* c-parser.c (OMP_TARGET_CLAUSE_MASK): Add\n\tPRAGMA_OMP_CLAUSE_THREAD_LIMIT.\ngcc/cp/\n\t* parser.c (OMP_TARGET_CLAUSE_MASK): Add\n\tPRAGMA_OMP_CLAUSE_THREAD_LIMIT.\nlibgomp/\n\t* task.c (gomp_create_target_task): Copy args array as well.\n\t* target.c (gomp_target_fallback): Add args argument.\n\tSet gomp_icv (true)->thread_limit_var if thread_limit is present.\n\t(GOMP_target): Adjust gomp_target_fallback caller.\n\t(GOMP_target_ext): Likewise.\n\t(gomp_target_task_fn): Likewise.\n\t* config/nvptx/team.c (gomp_nvptx_main): Set\n\tgomp_global_icv.thread_limit_var.\n\t* testsuite/libgomp.c-c++-common/thread-limit-1.c: New test.", "tree": {"sha": "ab7e82602a7dc1f8e6fefcc5ef16520eea238392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab7e82602a7dc1f8e6fefcc5ef16520eea238392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aea72386831c0c5672f55983034cc709b968daea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea72386831c0c5672f55983034cc709b968daea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea72386831c0c5672f55983034cc709b968daea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea72386831c0c5672f55983034cc709b968daea/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcdf49a0ad3282761c7ac72103407ca4ec4d6968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcdf49a0ad3282761c7ac72103407ca4ec4d6968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcdf49a0ad3282761c7ac72103407ca4ec4d6968"}], "stats": {"total": 116, "additions": 105, "deletions": 11}, "files": [{"sha": "3f84fd1b5cbb9101e35205af69102adf23677af6", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea72386831c0c5672f55983034cc709b968daea/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea72386831c0c5672f55983034cc709b968daea/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=aea72386831c0c5672f55983034cc709b968daea", "patch": "@@ -1867,7 +1867,6 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t  s = C_OMP_CLAUSE_SPLIT_TARGET;\n \t  break;\n \tcase OMP_CLAUSE_NUM_TEAMS:\n-\tcase OMP_CLAUSE_THREAD_LIMIT:\n \t  s = C_OMP_CLAUSE_SPLIT_TEAMS;\n \t  break;\n \tcase OMP_CLAUSE_DIST_SCHEDULE:\n@@ -2531,6 +2530,30 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t  else\n \t    s = C_OMP_CLAUSE_SPLIT_FOR;\n \t  break;\n+\t  /* thread_limit is allowed on target and teams.  Distribute it\n+\t     to all.  */\n+\tcase OMP_CLAUSE_THREAD_LIMIT:\n+\t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_MAP))\n+\t      != 0)\n+\t    {\n+\t      if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_TEAMS))\n+\t\t  != 0)\n+\t\t{\n+\t\t  c = build_omp_clause (OMP_CLAUSE_LOCATION (clauses),\n+\t\t\t\t\tOMP_CLAUSE_THREAD_LIMIT);\n+\t\t  OMP_CLAUSE_THREAD_LIMIT_EXPR (c)\n+\t\t    = OMP_CLAUSE_THREAD_LIMIT_EXPR (clauses);\n+\t\t  OMP_CLAUSE_CHAIN (c) = cclauses[C_OMP_CLAUSE_SPLIT_TARGET];\n+\t\t  cclauses[C_OMP_CLAUSE_SPLIT_TARGET] = c;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  s = C_OMP_CLAUSE_SPLIT_TARGET;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  s = C_OMP_CLAUSE_SPLIT_TEAMS;\n+\t  break;\n \t/* Allocate clause is allowed on target, teams, distribute, parallel,\n \t   for, sections and taskloop.  Distribute it to all.  */\n \tcase OMP_CLAUSE_ALLOCATE:"}, {"sha": "83e837c8c1757295443f8e951be31610708d6eb7", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea72386831c0c5672f55983034cc709b968daea/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea72386831c0c5672f55983034cc709b968daea/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=aea72386831c0c5672f55983034cc709b968daea", "patch": "@@ -20963,6 +20963,7 @@ c_parser_omp_target_exit_data (location_t loc, c_parser *parser,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ALLOCATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEFAULTMAP)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IN_REDUCTION)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_THREAD_LIMIT)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR))\n \n static bool"}, {"sha": "e86e2b510d92702dc65197e94e78f47a8220f45b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea72386831c0c5672f55983034cc709b968daea/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea72386831c0c5672f55983034cc709b968daea/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=aea72386831c0c5672f55983034cc709b968daea", "patch": "@@ -44015,6 +44015,7 @@ cp_parser_omp_target_update (cp_parser *parser, cp_token *pragma_tok,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEFAULTMAP)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ALLOCATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IN_REDUCTION)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_THREAD_LIMIT)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR))\n \n static bool"}, {"sha": "1602a622628f74e1af5cc623231f177596b49fc7", "filename": "gcc/gimplify.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea72386831c0c5672f55983034cc709b968daea/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea72386831c0c5672f55983034cc709b968daea/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=aea72386831c0c5672f55983034cc709b968daea", "patch": "@@ -13637,10 +13637,13 @@ optimize_target_teams (tree target, gimple_seq *pre_p)\n \tif (!DECL_P (expr) && TREE_CODE (expr) != TARGET_EXPR)\n \t  OMP_CLAUSE_OPERAND (c, 0) = *p;\n       }\n-  c = build_omp_clause (thread_limit_loc, OMP_CLAUSE_THREAD_LIMIT);\n-  OMP_CLAUSE_THREAD_LIMIT_EXPR (c) = thread_limit;\n-  OMP_CLAUSE_CHAIN (c) = OMP_TARGET_CLAUSES (target);\n-  OMP_TARGET_CLAUSES (target) = c;\n+  if (!omp_find_clause (OMP_TARGET_CLAUSES (target), OMP_CLAUSE_THREAD_LIMIT))\n+    {\n+      c = build_omp_clause (thread_limit_loc, OMP_CLAUSE_THREAD_LIMIT);\n+      OMP_CLAUSE_THREAD_LIMIT_EXPR (c) = thread_limit;\n+      OMP_CLAUSE_CHAIN (c) = OMP_TARGET_CLAUSES (target);\n+      OMP_TARGET_CLAUSES (target) = c;\n+    }\n   c = build_omp_clause (num_teams_loc, OMP_CLAUSE_NUM_TEAMS);\n   OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR (c) = num_teams_upper;\n   OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c) = num_teams_lower;"}, {"sha": "310eb2832939aae202732a25a317b9bfbaea92d7", "filename": "libgomp/config/nvptx/team.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea72386831c0c5672f55983034cc709b968daea/libgomp%2Fconfig%2Fnvptx%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea72386831c0c5672f55983034cc709b968daea/libgomp%2Fconfig%2Fnvptx%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fnvptx%2Fteam.c?ref=aea72386831c0c5672f55983034cc709b968daea", "patch": "@@ -55,6 +55,7 @@ gomp_nvptx_main (void (*fn) (void *), void *fn_data)\n   if (tid == 0)\n     {\n       gomp_global_icv.nthreads_var = ntids;\n+      gomp_global_icv.thread_limit_var = ntids;\n       /* Starting additional threads is not supported.  */\n       gomp_global_icv.dyn_var = true;\n "}, {"sha": "5d3103a40c2fafa06de00cfbf80646d92261a7fa", "filename": "libgomp/target.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea72386831c0c5672f55983034cc709b968daea/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea72386831c0c5672f55983034cc709b968daea/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=aea72386831c0c5672f55983034cc709b968daea", "patch": "@@ -2362,7 +2362,7 @@ gomp_unload_device (struct gomp_device_descr *devicep)\n \n static void\n gomp_target_fallback (void (*fn) (void *), void **hostaddrs,\n-\t\t      struct gomp_device_descr *devicep)\n+\t\t      struct gomp_device_descr *devicep, void **args)\n {\n   struct gomp_thread old_thr, *thr = gomp_thread ();\n \n@@ -2378,6 +2378,25 @@ gomp_target_fallback (void (*fn) (void *), void **hostaddrs,\n       thr->place = old_thr.place;\n       thr->ts.place_partition_len = gomp_places_list_len;\n     }\n+  if (args)\n+    while (*args)\n+      {\n+\tintptr_t id = (intptr_t) *args++, val;\n+\tif (id & GOMP_TARGET_ARG_SUBSEQUENT_PARAM)\n+\t  val = (intptr_t) *args++;\n+\telse\n+\t  val = id >> GOMP_TARGET_ARG_VALUE_SHIFT;\n+\tif ((id & GOMP_TARGET_ARG_DEVICE_MASK) != GOMP_TARGET_ARG_DEVICE_ALL)\n+\t  continue;\n+\tid &= GOMP_TARGET_ARG_ID_MASK;\n+\tif (id != GOMP_TARGET_ARG_THREAD_LIMIT)\n+\t  continue;\n+\tval = val > INT_MAX ? INT_MAX : val;\n+\tif (val)\n+\t  gomp_icv (true)->thread_limit_var = val;\n+\tbreak;\n+      }\n+\n   fn (hostaddrs);\n   gomp_free_thread (thr);\n   *thr = old_thr;\n@@ -2478,7 +2497,7 @@ GOMP_target (int device, void (*fn) (void *), const void *unused,\n       /* All shared memory devices should use the GOMP_target_ext function.  */\n       || devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM\n       || !(fn_addr = gomp_get_target_fn_addr (devicep, fn)))\n-    return gomp_target_fallback (fn, hostaddrs, devicep);\n+    return gomp_target_fallback (fn, hostaddrs, devicep, NULL);\n \n   htab_t refcount_set = htab_create (mapnum);\n   struct target_mem_desc *tgt_vars\n@@ -2617,7 +2636,7 @@ GOMP_target_ext (int device, void (*fn) (void *), size_t mapnum,\n \t\t\t\t      tgt_align, tgt_size);\n \t    }\n \t}\n-      gomp_target_fallback (fn, hostaddrs, devicep);\n+      gomp_target_fallback (fn, hostaddrs, devicep, args);\n       return;\n     }\n \n@@ -3052,7 +3071,8 @@ gomp_target_task_fn (void *data)\n \t  || (devicep->can_run_func && !devicep->can_run_func (fn_addr)))\n \t{\n \t  ttask->state = GOMP_TARGET_TASK_FALLBACK;\n-\t  gomp_target_fallback (ttask->fn, ttask->hostaddrs, devicep);\n+\t  gomp_target_fallback (ttask->fn, ttask->hostaddrs, devicep,\n+\t\t\t\tttask->args);\n \t  return false;\n \t}\n "}, {"sha": "414ca6e89aed7f2edcda3ae7285382fe5aef436e", "filename": "libgomp/task.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea72386831c0c5672f55983034cc709b968daea/libgomp%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea72386831c0c5672f55983034cc709b968daea/libgomp%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftask.c?ref=aea72386831c0c5672f55983034cc709b968daea", "patch": "@@ -745,6 +745,7 @@ gomp_create_target_task (struct gomp_device_descr *devicep,\n   size_t depend_size = 0;\n   uintptr_t depend_cnt = 0;\n   size_t tgt_align = 0, tgt_size = 0;\n+  uintptr_t args_cnt = 0;\n \n   if (depend != NULL)\n     {\n@@ -769,10 +770,22 @@ gomp_create_target_task (struct gomp_device_descr *devicep,\n \ttgt_size += tgt_align - 1;\n       else\n \ttgt_size = 0;\n+      if (args)\n+\t{\n+\t  void **cargs = args;\n+\t  while (*cargs)\n+\t    {\n+\t      intptr_t id = (intptr_t) *cargs++;\n+\t      if (id & GOMP_TARGET_ARG_SUBSEQUENT_PARAM)\n+\t\tcargs++;\n+\t    }\n+\t  args_cnt = cargs + 1 - args;\n+\t}\n     }\n \n   task = gomp_malloc (sizeof (*task) + depend_size\n \t\t      + sizeof (*ttask)\n+\t\t      + args_cnt * sizeof (void *)\n \t\t      + mapnum * (sizeof (void *) + sizeof (size_t)\n \t\t\t\t  + sizeof (unsigned short))\n \t\t      + tgt_size);\n@@ -785,9 +798,18 @@ gomp_create_target_task (struct gomp_device_descr *devicep,\n   ttask->devicep = devicep;\n   ttask->fn = fn;\n   ttask->mapnum = mapnum;\n-  ttask->args = args;\n   memcpy (ttask->hostaddrs, hostaddrs, mapnum * sizeof (void *));\n-  ttask->sizes = (size_t *) &ttask->hostaddrs[mapnum];\n+  if (args_cnt)\n+    {\n+      ttask->args = (void **) &ttask->hostaddrs[mapnum];\n+      memcpy (ttask->args, args, args_cnt * sizeof (void *));\n+      ttask->sizes = (size_t *) &ttask->args[args_cnt];\n+    }\n+  else\n+    {\n+      ttask->args = args;\n+      ttask->sizes = (size_t *) &ttask->hostaddrs[mapnum];\n+    }\n   memcpy (ttask->sizes, sizes, mapnum * sizeof (size_t));\n   ttask->kinds = (unsigned short *) &ttask->sizes[mapnum];\n   memcpy (ttask->kinds, kinds, mapnum * sizeof (unsigned short));"}, {"sha": "cac220246d8209caad69cb9e01b8c92f07dceac1", "filename": "libgomp/testsuite/libgomp.c-c++-common/thread-limit-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea72386831c0c5672f55983034cc709b968daea/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fthread-limit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea72386831c0c5672f55983034cc709b968daea/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fthread-limit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fthread-limit-1.c?ref=aea72386831c0c5672f55983034cc709b968daea", "patch": "@@ -0,0 +1,23 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+void\n+foo ()\n+{\n+  {\n+    #pragma omp target parallel nowait thread_limit (4) num_threads (1)\n+    if (omp_get_thread_limit () > 4)\n+      abort ();\n+  }\n+  #pragma omp taskwait\n+}\n+\n+int\n+main ()\n+{\n+  #pragma omp target thread_limit (6)\n+  if (omp_get_thread_limit () > 6)\n+    abort ();\n+  foo ();\n+  return 0;\n+}"}]}