{"sha": "f39b92e2c485be81ec154d2986495305d5926688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM5YjkyZTJjNDg1YmU4MWVjMTU0ZDI5ODY0OTUzMDVkNTkyNjY4OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-25T13:26:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-25T13:26:12Z"}, "message": "Change permute index type to unsigned short\n\nThis patch changes the element type of (auto_)vec_perm_indices from\nunsigned char to unsigned short.  This is needed for fixed-length\n2048-bit SVE.  (SVE is variable-length by default, but it's possible\nto ask for specific vector lengths if you want to.)\n\n2017-09-25  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* target.h (vec_perm_indices): Use unsigned short rather than\n\tunsigned char.\n\t(auto_vec_perm_indices): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_vectorize_vec_perm_const_ok):\n\tUse unsigned int rather than unsigned char.\n\t* config/arm/arm.c (arm_vectorize_vec_perm_const_ok): Likewise.\n\nFrom-SVN: r253150", "tree": {"sha": "7589661abbc6bc69107b22987102175aab90b863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7589661abbc6bc69107b22987102175aab90b863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f39b92e2c485be81ec154d2986495305d5926688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39b92e2c485be81ec154d2986495305d5926688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f39b92e2c485be81ec154d2986495305d5926688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39b92e2c485be81ec154d2986495305d5926688/comments", "author": null, "committer": null, "parents": [{"sha": "26993e95b9e5d4c79ee6c9b16307046383590748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26993e95b9e5d4c79ee6c9b16307046383590748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26993e95b9e5d4c79ee6c9b16307046383590748"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "b53da5390d564b052b6d6da8f62c89c0f40ea378", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39b92e2c485be81ec154d2986495305d5926688/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39b92e2c485be81ec154d2986495305d5926688/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f39b92e2c485be81ec154d2986495305d5926688", "patch": "@@ -1,3 +1,12 @@\n+2017-09-25  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* target.h (vec_perm_indices): Use unsigned short rather than\n+\tunsigned char.\n+\t(auto_vec_perm_indices): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_vectorize_vec_perm_const_ok):\n+\tUse unsigned int rather than unsigned char.\n+\t* config/arm/arm.c (arm_vectorize_vec_perm_const_ok): Likewise.\n+\n 2017-09-25  Richard Biener  <rguenther@suse.de>\n \n \t* cfgloop.h (sort_sibling_loops): Declare."}, {"sha": "9b02c6e85e4a10932c2fb49a6637e29ed5fb0115", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39b92e2c485be81ec154d2986495305d5926688/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39b92e2c485be81ec154d2986495305d5926688/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f39b92e2c485be81ec154d2986495305d5926688", "patch": "@@ -13820,7 +13820,7 @@ aarch64_vectorize_vec_perm_const_ok (machine_mode vmode, vec_perm_indices sel)\n   nelt = sel.length ();\n   for (i = which = 0; i < nelt; ++i)\n     {\n-      unsigned char e = d.perm[i];\n+      unsigned int e = d.perm[i];\n       gcc_assert (e < 2 * nelt);\n       which |= (e < nelt ? 1 : 2);\n     }"}, {"sha": "f9c1ce35f37dad962ab8b6cdfb407bb836fce599", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39b92e2c485be81ec154d2986495305d5926688/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39b92e2c485be81ec154d2986495305d5926688/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f39b92e2c485be81ec154d2986495305d5926688", "patch": "@@ -29261,7 +29261,7 @@ arm_vectorize_vec_perm_const_ok (machine_mode vmode, vec_perm_indices sel)\n   nelt = GET_MODE_NUNITS (d.vmode);\n   for (i = which = 0; i < nelt; ++i)\n     {\n-      unsigned char e = d.perm[i];\n+      unsigned int e = d.perm[i];\n       gcc_assert (e < 2 * nelt);\n       which |= (e < nelt ? 1 : 2);\n     }"}, {"sha": "ac43b16a549cf6efba7a9372bfb2d62355254c81", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39b92e2c485be81ec154d2986495305d5926688/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39b92e2c485be81ec154d2986495305d5926688/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=f39b92e2c485be81ec154d2986495305d5926688", "patch": "@@ -193,11 +193,11 @@ enum vect_cost_model_location {\n \n /* The type to use for vector permutes with a constant permute vector.\n    Each entry is an index into the concatenated input vectors.  */\n-typedef vec<unsigned char> vec_perm_indices;\n+typedef vec<unsigned short> vec_perm_indices;\n \n /* Same, but can be used to construct local permute vectors that are\n    automatically freed.  */\n-typedef auto_vec<unsigned char, 32> auto_vec_perm_indices;\n+typedef auto_vec<unsigned short, 32> auto_vec_perm_indices;\n \n /* The target structure.  This holds all the backend hooks.  */\n #define DEFHOOKPOD(NAME, DOC, TYPE, INIT) TYPE NAME;"}]}