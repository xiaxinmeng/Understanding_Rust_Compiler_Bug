{"sha": "1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM2NmM0ZjViN2ZkYzUyNWViNGViZWVhMWRjMzgwNmZkOThhNDYwOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T11:21:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T11:21:32Z"}, "message": "[multiple changes]\n\n2012-12-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb (Traverse_Aspects): Ensure we always have\n\tan entry in the sloc -> SCO map for invariants, since\n\tSet_SCO_Pragma_Enabled is called with that sloc when checks\n\tare enabled.\n\n2012-12-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch4.adb: Minor reformatting.\n\n2012-12-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* par-prag.adb: Checks and processing of pragma Assume are\n\tcarried out by Sem_Prag.\n\t* sem_prag.adb (Analyze_Pragma): Check the legality of pragma\n\tAssume.\n\t* snames.ads-tmpl: Add new name Assume. Add a pragma identifier\n\tfor Assume.\n\nFrom-SVN: r194215", "tree": {"sha": "c8503545c9acec5c331a2ce08b95dbe7d391687e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8503545c9acec5c331a2ce08b95dbe7d391687e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/comments", "author": null, "committer": null, "parents": [{"sha": "c116143c22e88b7acd0ec5a1e5f9707758875bb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c116143c22e88b7acd0ec5a1e5f9707758875bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c116143c22e88b7acd0ec5a1e5f9707758875bb9"}], "stats": {"total": 122, "additions": 90, "deletions": 32}, "files": [{"sha": "eea922d6000ab6f34b4153d1d5e09548d63451ef", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609", "patch": "@@ -1,3 +1,23 @@\n+2012-12-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb (Traverse_Aspects): Ensure we always have\n+\tan entry in the sloc -> SCO map for invariants, since\n+\tSet_SCO_Pragma_Enabled is called with that sloc when checks\n+\tare enabled.\n+\n+2012-12-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch4.adb: Minor reformatting.\n+\n+2012-12-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* par-prag.adb: Checks and processing of pragma Assume are\n+\tcarried out by Sem_Prag.\n+\t* sem_prag.adb (Analyze_Pragma): Check the legality of pragma\n+\tAssume.\n+\t* snames.ads-tmpl: Add new name Assume. Add a pragma identifier\n+\tfor Assume.\n+\n 2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n \n \t* aspects.ads, aspects.adb: Add aspect Relative_Deadline."}, {"sha": "b7ecd8300488e80ccd6ace4cdc54aaa20cc0d6e2", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609", "patch": "@@ -10405,14 +10405,14 @@ package body Exp_Ch4 is\n             --  Convert: x(y) to x'val (ytyp'val (y))\n \n             Rewrite (N,\n-               Make_Attribute_Reference (Loc,\n-                 Prefix => New_Occurrence_Of (Target_Type, Loc),\n-                 Attribute_Name => Name_Val,\n-                 Expressions => New_List (\n-                   Make_Attribute_Reference (Loc,\n-                     Prefix => New_Occurrence_Of (Operand_Type, Loc),\n-                     Attribute_Name => Name_Pos,\n-                     Expressions => New_List (Operand)))));\n+              Make_Attribute_Reference (Loc,\n+                Prefix         => New_Occurrence_Of (Target_Type, Loc),\n+                Attribute_Name => Name_Val,\n+                Expressions    => New_List (\n+                  Make_Attribute_Reference (Loc,\n+                    Prefix         => New_Occurrence_Of (Operand_Type, Loc),\n+                    Attribute_Name => Name_Pos,\n+                    Expressions    => New_List (Operand)))));\n \n             Analyze_And_Resolve (N, Target_Type);\n          end if;"}, {"sha": "e1f394b285373b505eeaddf38d370e69c7d9c404", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609", "patch": "@@ -1093,6 +1093,7 @@ begin\n \n       when Pragma_Abort_Defer                    |\n            Pragma_Assertion_Policy               |\n+           Pragma_Assume                         |\n            Pragma_Assume_No_Invalid_Values       |\n            Pragma_AST_Entry                      |\n            Pragma_All_Calls_Remote               |"}, {"sha": "1149a2ec37b485b322e111cf5da2db1c0aa39d39", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609", "patch": "@@ -493,14 +493,14 @@ package body Par_SCO is\n \n       begin\n          case T is\n-            when 'I' | 'E' | 'W' | 'a' =>\n+            when 'I' | 'E' | 'W' | 'a' | 'A' =>\n \n                --  For IF, EXIT, WHILE, or aspects, the token SLOC is that of\n                --  the parent of the expression.\n \n                Loc := Sloc (Parent (N));\n \n-               if T = 'a' then\n+               if T = 'a' or else T = 'A' then\n                   Nam := Chars (Identifier (Parent (N)));\n                end if;\n \n@@ -1378,12 +1378,20 @@ package body Par_SCO is\n       procedure Traverse_Aspects (N : Node_Id) is\n          AN : Node_Id;\n          AE : Node_Id;\n+         C1 : Character;\n \n       begin\n          AN := First (Aspect_Specifications (N));\n          while Present (AN) loop\n             AE := Expression (AN);\n \n+            --  SCOs are generated before semantic analysis/expansion:\n+            --  PPCs are not split yet.\n+\n+            pragma Assert (not Split_PPC (AN));\n+\n+            C1 := ASCII.NUL;\n+\n             case Get_Aspect_Id (Chars (Identifier (AN))) is\n \n                --  Aspects rewritten into pragmas controlled by a Check_Policy:\n@@ -1394,49 +1402,48 @@ package body Par_SCO is\n                when Aspect_Pre               |\n                     Aspect_Precondition      |\n                     Aspect_Post              |\n-                    Aspect_Postcondition     =>\n-\n-                  --  SCOs are generated before semantic analysis/expansion:\n-                  --  PPCs are not split yet.\n-\n-                  pragma Assert (not Split_PPC (AN));\n+                    Aspect_Postcondition     |\n+                    Aspect_Invariant         =>\n \n-                  --  A Pre/Post aspect will be rewritten into a pragma\n-                  --  Precondition/Postcondition with the same sloc.\n-\n-                  pragma Assert (Current_Pragma_Sloc = No_Location);\n-\n-                  Current_Pragma_Sloc := Sloc (AN);\n-\n-                  --  Create the decision as potentially disabled aspect ('a').\n-                  --  Set_SCO_Pragma_Enabled will subsequently switch to 'A'.\n-\n-                  Process_Decisions_Defer (AE, 'a');\n-                  Current_Pragma_Sloc := No_Location;\n+                  C1 := 'a';\n \n                --  Aspects whose checks are generated in client units,\n                --  regardless of whether or not the check is activated in the\n-               --  unit which contains the declaration.\n+               --  unit which contains the declaration: create decision as\n+               --  unconditionally enabled aspect (but still make a pragma\n+               --  entry since Set_SCO_Pragma_Enabled will be called when\n+               --  analyzing actual checks, possibly in other units).\n \n                when Aspect_Predicate         |\n                     Aspect_Static_Predicate  |\n                     Aspect_Dynamic_Predicate |\n-                    Aspect_Invariant         |\n                     Aspect_Type_Invariant    =>\n \n-                  Process_Decisions_Defer (AE, 'A');\n+                  C1 := 'A';\n \n                --  Other aspects: just process any decision nested in the\n                --  aspect expression.\n \n                when others =>\n \n                   if Has_Decision (AE) then\n-                     Process_Decisions_Defer (AE, 'X');\n+                     C1 := 'X';\n                   end if;\n \n             end case;\n \n+            if C1 /= ASCII.NUL then\n+               pragma Assert (Current_Pragma_Sloc = No_Location);\n+\n+               if C1 = 'a' or else C1 = 'A' then\n+                  Current_Pragma_Sloc := Sloc (AN);\n+               end if;\n+\n+               Process_Decisions_Defer (AE, C1);\n+\n+               Current_Pragma_Sloc := No_Location;\n+            end if;\n+\n             Next (AN);\n          end loop;\n       end Traverse_Aspects;"}, {"sha": "36251b8bad163ddc42863be8aba7dd2277b54d00", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609", "patch": "@@ -2233,6 +2233,18 @@ package body Sem_Prag is\n               (Get_Pragma_Arg (Arg2), Standard_String);\n          end if;\n \n+         --  For a pragma in the extended main source unit, record enabled\n+         --  status in SCO.\n+\n+         --  This may seem redundant with the call to Check_Enabled occurring\n+         --  later on when the pragma is rewritten into a pragma Check but\n+         --  is actually required in the case of a postcondition within a\n+         --  generic.\n+\n+         if Check_Enabled (Pname) and then not Split_PPC (N) then\n+            Set_SCO_Pragma_Enabled (Loc);\n+         end if;\n+\n          --  If we are within an inlined body, the legality of the pragma\n          --  has been checked already.\n \n@@ -6995,6 +7007,21 @@ package body Sem_Prag is\n             Opt.Check_Policy_List := N;\n          end Assertion_Policy;\n \n+         ------------\n+         -- Assume --\n+         ------------\n+\n+         --  pragma Assume (boolean_EXPRESSION);\n+\n+         when Pragma_Assume => Assume : declare\n+         begin\n+            GNAT_Pragma;\n+            S14_Pragma;\n+            Check_Arg_Count (1);\n+\n+            Analyze_And_Resolve (Expression (Arg1), Any_Boolean);\n+         end Assume;\n+\n          ------------------------------\n          -- Assume_No_Invalid_Values --\n          ------------------------------\n@@ -15668,6 +15695,7 @@ package body Sem_Prag is\n       Pragma_Assert                         => -1,\n       Pragma_Assert_And_Cut                 => -1,\n       Pragma_Assertion_Policy               =>  0,\n+      Pragma_Assume                         =>  0,\n       Pragma_Assume_No_Invalid_Values       =>  0,\n       Pragma_Attribute_Definition           => +3,\n       Pragma_Asynchronous                   => -1,"}, {"sha": "bffa6004ba73c47663529ddad531ad71f9cb3093", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=1c66c4f5b7fdc525eb4ebeea1dc3806fd98a4609", "patch": "@@ -362,6 +362,7 @@ package Snames is\n    Name_Ada_2012                       : constant Name_Id := N + $; -- GNAT\n    Name_Annotate                       : constant Name_Id := N + $; -- GNAT\n    Name_Assertion_Policy               : constant Name_Id := N + $; -- Ada 05\n+   Name_Assume                         : constant Name_Id := N + $; -- GNAT\n    Name_Assume_No_Invalid_Values       : constant Name_Id := N + $; -- GNAT\n    Name_Attribute_Definition           : constant Name_Id := N + $; -- GNAT\n    Name_C_Pass_By_Copy                 : constant Name_Id := N + $; -- GNAT\n@@ -1660,6 +1661,7 @@ package Snames is\n       Pragma_Ada_2012,\n       Pragma_Annotate,\n       Pragma_Assertion_Policy,\n+      Pragma_Assume,\n       Pragma_Assume_No_Invalid_Values,\n       Pragma_Attribute_Definition,\n       Pragma_C_Pass_By_Copy,"}]}