{"sha": "4214bdb1d77ebee04d12f66c831730ed67fedf55", "node_id": "C_kwDOANBUbNoAKDQyMTRiZGIxZDc3ZWJlZTA0ZDEyZjY2YzgzMTczMGVkNjdmZWRmNTU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-09T21:21:02Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-09T21:21:02Z"}, "message": "testsuite: add various -Wanalyzer-null-dereference false +ve test cases\n\nThere are various -Wanalyzer-null-dereference false +ves in bugzilla\nthat I've been attempting to fix.  Unfortunately I haven't made much\nprogress, but it seems worth at least capturing the reduced\nreproducers as test cases, to make it easier to spot changes in\nbehavior.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/102671\n\tPR analyzer/105755\n\tPR analyzer/108251\n\tPR analyzer/108400\n\t* gcc.dg/analyzer/null-deref-pr102671-1.c: New test, reduced\n\tfrom Emacs.\n\t* gcc.dg/analyzer/null-deref-pr102671-2.c: Likewise.\n\t* gcc.dg/analyzer/null-deref-pr105755.c: Likewise.\n\t* gcc.dg/analyzer/null-deref-pr108251-smp_fetch_ssl_fc_has_early-O2.c:\n\tNew test, reduced from haproxy's src/ssl_sample.c.\n\t* gcc.dg/analyzer/null-deref-pr108251-smp_fetch_ssl_fc_has_early.c:\n\tLikewise.\n\t* gcc.dg/analyzer/null-deref-pr108400-SoftEtherVPN-WebUi.c: New\n\ttest, reduced from SoftEtherVPN's src/Cedar/WebUI.c.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "21361c3942258def2c5bc53973b93c24d28c7644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21361c3942258def2c5bc53973b93c24d28c7644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4214bdb1d77ebee04d12f66c831730ed67fedf55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4214bdb1d77ebee04d12f66c831730ed67fedf55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4214bdb1d77ebee04d12f66c831730ed67fedf55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4214bdb1d77ebee04d12f66c831730ed67fedf55/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec4bc86b4399e50a0c848472126dad776772ee1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4bc86b4399e50a0c848472126dad776772ee1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4bc86b4399e50a0c848472126dad776772ee1c"}], "stats": {"total": 709, "additions": 709, "deletions": 0}, "files": [{"sha": "12a0a48d6580f5f5a76cfbc755e8a7402256c717", "filename": "gcc/testsuite/gcc.dg/analyzer/null-deref-pr102671-1.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr102671-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr102671-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr102671-1.c?ref=4214bdb1d77ebee04d12f66c831730ed67fedf55", "patch": "@@ -0,0 +1,167 @@\n+/* { dg-additional-options \"-O2 -Wno-shift-count-overflow\" } */\n+\n+struct lisp;\n+union vectorlike_header { long size; };\n+struct Lisp_Symbol { void *unused; };\n+extern struct Lisp_Symbol lispsym[];\n+\n+static _Bool\n+TAGGEDP (struct lisp *a, unsigned tag)\n+{\n+  return ! (((unsigned) (long) a - tag) & 7);\n+}\n+\n+static _Bool\n+VECTORLIKEP (struct lisp *x)\n+{\n+  return TAGGEDP (x, 5);\n+}\n+\n+static _Bool\n+PSEUDOVECTOR_TYPEP (union vectorlike_header const *a, int code)\n+{\n+  long PSEUDOVECTOR_FLAG = 1L << 62;\n+  long PVEC_TYPE_MASK = 0x3fL << 24;\n+  return ((a->size & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK))\n+\t  == (PSEUDOVECTOR_FLAG | (code << 24)));\n+}\n+\n+static _Bool\n+PSEUDOVECTORP (struct lisp *a, int code)\n+{\n+  if (! VECTORLIKEP (a))\n+    return 0;\n+  else\n+    return PSEUDOVECTOR_TYPEP ((union vectorlike_header *) ((char *) a - 5),\n+\t\t\t       code);\n+}\n+\n+static struct lisp *\n+builtin_lisp_symbol (int index)\n+{\n+  return (struct lisp *) (index * sizeof *lispsym);\n+}\n+\n+static _Bool\n+NILP (struct lisp *x)\n+{\n+  return x == builtin_lisp_symbol (0);\n+}\n+\n+\n+void wrong_type_argument (struct lisp *, struct lisp *);\n+\n+static void\n+CHECK_TYPE (int ok, struct lisp *predicate, struct lisp *x)\n+{\n+  if (!ok)\n+    wrong_type_argument (predicate, x);\n+}\n+\n+\n+struct buffer\n+{\n+  union vectorlike_header header;\n+  struct buffer *base_buffer;\n+  int window_count;\n+};\n+\n+static _Bool\n+BUFFERP (struct lisp *a)\n+{\n+  return PSEUDOVECTORP (a, 12);\n+}\n+\n+static struct buffer *\n+XBUFFER (struct lisp *a)\n+{\n+  return (struct buffer *) ((char *) a - 5);\n+}\n+\n+\n+struct window\n+{\n+  union vectorlike_header header;\n+  struct lisp *next;\n+  struct lisp *contents;\n+};\n+\n+static _Bool\n+WINDOWP (struct lisp *a)\n+{\n+  return PSEUDOVECTORP (a, 12);\n+}\n+\n+static void\n+CHECK_WINDOW (struct lisp *x)\n+{\n+  CHECK_TYPE (WINDOWP (x), builtin_lisp_symbol (1360), x);\n+}\n+\n+static struct window *\n+XWINDOW (struct lisp *a)\n+{\n+  return (struct window *) ((char *) a - 5);\n+}\n+\n+static void\n+wset_combination (struct window *w, _Bool horflag, struct lisp *val)\n+{\n+  w->contents = val;\n+}\n+\n+extern struct lisp *selected_window;\n+\n+struct window *\n+decode_live_window (register struct lisp *window)\n+{\n+  if (NILP (window))\n+    return XWINDOW (selected_window);\n+  CHECK_TYPE (WINDOWP (window) && BUFFERP (XWINDOW (window)->contents),\n+\t      builtin_lisp_symbol (1351), window);\n+  return XWINDOW (window);\n+}\n+\n+struct window *\n+decode_any_window (register struct lisp *window)\n+{\n+  struct window *w;\n+  if (NILP (window))\n+    return XWINDOW (selected_window);\n+  CHECK_WINDOW (window);\n+  w = XWINDOW (window);\n+  return w;\n+}\n+\n+static void\n+adjust_window_count (struct window *w, int arg)\n+{\n+  if (BUFFERP (w->contents))\n+    {\n+      struct buffer *b = XBUFFER (w->contents);\n+      if (b->base_buffer)\n+\tb = b->base_buffer;\n+      b->window_count += arg;\n+    }\n+}\n+\n+void\n+wset_buffer (struct window *w, struct lisp *val)\n+{\n+  adjust_window_count (w, -1);\n+  w->contents = val;\n+  adjust_window_count (w, 1);\n+}\n+\n+void\n+delete_all_child_windows (struct lisp *window)\n+{\n+  struct window *w = XWINDOW (window);\n+  if (!NILP (w->next))\n+    delete_all_child_windows (w->next);\n+  if (WINDOWP (w->contents))\n+    {\n+      delete_all_child_windows (w->contents);\n+      wset_combination (w, 0, builtin_lisp_symbol (0));\n+    }\n+}"}, {"sha": "5108182a6c300b2e5213898673b14b8bd59f798c", "filename": "gcc/testsuite/gcc.dg/analyzer/null-deref-pr102671-2.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr102671-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr102671-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr102671-2.c?ref=4214bdb1d77ebee04d12f66c831730ed67fedf55", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-additional-options \"-O2 -Wno-shift-count-overflow\" } */\n+\n+struct lisp;\n+union vectorlike_header { long size; };\n+struct Lisp_Symbol { void *unused; };\n+extern struct Lisp_Symbol lispsym[];\n+struct Lisp_Cons { struct lisp *cdr; };\n+\n+static struct Lisp_Cons *\n+XCONS (struct lisp *a)\n+{\n+  return (struct Lisp_Cons *) ((char *) a - 3);\n+}\n+\n+static struct lisp *\n+XCDR (struct lisp *c)\n+{\n+  return XCONS (c)->cdr;\n+}\n+\n+static _Bool\n+TAGGEDP (struct lisp *a, unsigned tag)\n+{\n+  return ! (((unsigned) (long) a - tag) & 7);\n+}\n+\n+static _Bool\n+VECTORLIKEP (struct lisp *x)\n+{\n+  return TAGGEDP (x, 5);\n+}\n+\n+static _Bool\n+PSEUDOVECTOR_TYPEP (union vectorlike_header const *a, int code)\n+{\n+  long PSEUDOVECTOR_FLAG = 1L << 62;\n+  long PVEC_TYPE_MASK = 0x3fL << 24;\n+  return ((a->size & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK)) /* { dg-bogus \"dereference of NULL 'time'\" \"PR analyzer/107526\" { xfail *-*-* } } */\n+\t  == (PSEUDOVECTOR_FLAG | (code << 24)));\n+}\n+\n+static _Bool\n+PSEUDOVECTORP (struct lisp *a, int code)\n+{\n+  if (! VECTORLIKEP (a))\n+    return 0;\n+  else\n+    return PSEUDOVECTOR_TYPEP ((union vectorlike_header *) ((char *) a - 5),\n+\t\t\t       code);\n+}\n+\n+static _Bool\n+FIXNUMP (struct lisp *x)\n+{\n+  return ! (((unsigned) (long) x - 2) & 3);\n+}\n+\n+static _Bool\n+BIGNUMP (struct lisp *x)\n+{\n+  return PSEUDOVECTORP (x, 2);\n+}\n+\n+void some_function ();\n+\n+static void\n+decode_time_components (struct lisp *low)\n+{\n+  if (BIGNUMP (low))\n+    some_function ();\n+}\n+\n+_Bool\n+Ftime_convert (struct lisp *time)\n+{\n+  decode_time_components (time ? XCDR (time) : time);\n+  return BIGNUMP (time);\n+}"}, {"sha": "f6bf3830908dc06b7c49402868c693f48170d04d", "filename": "gcc/testsuite/gcc.dg/analyzer/null-deref-pr105755.c", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr105755.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr105755.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr105755.c?ref=4214bdb1d77ebee04d12f66c831730ed67fedf55", "patch": "@@ -0,0 +1,193 @@\n+/* { dg-additional-options \"-Wno-analyzer-too-complex -O2\" } */\n+\n+typedef long int ptrdiff_t;\n+typedef long int EMACS_INT;\n+typedef long int intmax_t;\n+\n+enum Lisp_Type\n+  {\n+    Lisp_Symbol = 0,\n+    Lisp_Vectorlike = 5,\n+  };\n+typedef struct Lisp_X *Lisp_Object;\n+\n+static inline EMACS_INT\n+XLI (Lisp_Object o)\n+{\n+  return (EMACS_INT) o;\n+}\n+\n+static inline void *\n+XLP (Lisp_Object o)\n+{\n+  return (void *) o;\n+}\n+\n+struct Lisp_Symbol\n+{\n+  Lisp_Object name;\n+  Lisp_Object value;\n+};\n+extern struct Lisp_Symbol lispsym[1455];\n+\n+union vectorlike_header\n+  {\n+    ptrdiff_t size;\n+  };\n+static inline _Bool\n+TAGGEDP (Lisp_Object a, enum Lisp_Type tag)\n+{\n+  return (! (((unsigned) XLI (a) - (unsigned) (tag)) & 7));\n+}\n+\n+struct Lisp_Symbol_With_Pos\n+{\n+  union vectorlike_header header;\n+  Lisp_Object sym;\n+  Lisp_Object pos;\n+};\n+\n+static inline _Bool\n+PSEUDOVECTORP (Lisp_Object a, int code)\n+{\n+  return (TAGGEDP (a, Lisp_Vectorlike)\n+\t  && ((((union vectorlike_header *)\n+\t\t((char *) XLP ((a)) - Lisp_Vectorlike))->size\n+\t       & 0x400000003f000000)\n+\t      == (0x4000000000000000 | (code << 24))));\n+}\n+\n+static inline _Bool\n+BARE_SYMBOL_P (Lisp_Object x)\n+{\n+  return TAGGEDP (x, Lisp_Symbol);\n+}\n+\n+static inline _Bool\n+SYMBOL_WITH_POS_P (Lisp_Object x)\n+{\n+  return PSEUDOVECTORP (x, 6);\n+}\n+\n+static inline struct Lisp_Symbol_With_Pos *\n+XSYMBOL_WITH_POS (Lisp_Object a)\n+{\n+  return (struct Lisp_Symbol_With_Pos *) ((char *) XLP (a) - Lisp_Vectorlike);\n+}\n+\n+static inline Lisp_Object\n+make_lisp_symbol (struct Lisp_Symbol *sym)\n+{\n+  return (Lisp_Object) ((char *) sym - (char *) lispsym);\n+}\n+\n+static inline Lisp_Object\n+builtin_lisp_symbol (int index)\n+{\n+  return make_lisp_symbol (&lispsym[index]);\n+}\n+\n+static inline _Bool\n+BASE_EQ (Lisp_Object x, Lisp_Object y)\n+{\n+  return XLI (x) == XLI (y);\n+}\n+\n+extern _Bool symbols_with_pos_enabled;\n+\n+static inline _Bool\n+EQ (Lisp_Object x, Lisp_Object y)\n+{\n+  return (XLI (x) == XLI (y)\n+\t  || (symbols_with_pos_enabled\n+\t      && (SYMBOL_WITH_POS_P (x)\n+\t\t  ? (BARE_SYMBOL_P (y)\n+\t\t     ? XLI (XSYMBOL_WITH_POS(x)->sym) == XLI (y)\n+\t\t     : (SYMBOL_WITH_POS_P(y)\n+\t\t\t&& (XLI (XSYMBOL_WITH_POS(x)->sym)\n+\t\t\t    == XLI (XSYMBOL_WITH_POS(y)->sym))))\n+\t\t  : (SYMBOL_WITH_POS_P (y) && BARE_SYMBOL_P (x)\n+\t\t     && (XLI (x) == XLI ((XSYMBOL_WITH_POS (y))->sym))))));\n+}\n+\n+static inline _Bool\n+NILP (Lisp_Object x)\n+{\n+  return BASE_EQ (x, builtin_lisp_symbol (0));\n+}\n+\n+static inline _Bool\n+ASCII_CHAR_P (intmax_t c)\n+{\n+  return 0 <= c && c < 0x80;\n+}\n+\n+struct Lisp_Char_Table\n+  {\n+    union vectorlike_header header;\n+    Lisp_Object defalt;\n+    Lisp_Object parent;\n+    Lisp_Object ascii;\n+};\n+\n+extern Lisp_Object char_table_ref (Lisp_Object, int);\n+\n+static inline _Bool\n+CHAR_TABLE_P (Lisp_Object a)\n+{\n+  return PSEUDOVECTORP (a, 28);\n+}\n+\n+static inline struct Lisp_Char_Table *\n+XCHAR_TABLE (Lisp_Object a)\n+{\n+  return (struct Lisp_Char_Table *) ((char *) XLP (a) - Lisp_Vectorlike);\n+}\n+\n+struct Lisp_Sub_Char_Table\n+{\n+  union vectorlike_header header;\n+  Lisp_Object contents[];\n+};\n+\n+static inline _Bool\n+SUB_CHAR_TABLE_P (Lisp_Object a)\n+{\n+  return PSEUDOVECTORP (a, 29);\n+}\n+\n+static inline struct Lisp_Sub_Char_Table *\n+XSUB_CHAR_TABLE (Lisp_Object a)\n+{\n+  return (struct Lisp_Sub_Char_Table *) ((char *) XLP (a) - Lisp_Vectorlike);\n+}\n+\n+static inline Lisp_Object\n+CHAR_TABLE_REF_ASCII (Lisp_Object ct, ptrdiff_t idx)\n+{\n+  for (struct Lisp_Char_Table *tbl = XCHAR_TABLE (ct); ;\n+       tbl = XCHAR_TABLE (tbl->parent))\n+    {\n+      Lisp_Object val = (! SUB_CHAR_TABLE_P (tbl->ascii) ? tbl->ascii\n+\t\t\t : XSUB_CHAR_TABLE (tbl->ascii)->contents[idx]);\n+      if (NILP (val))\n+\tval = tbl->defalt;\n+      if (!NILP (val) || NILP (tbl->parent))\n+\treturn val;\n+    }\n+}\n+\n+static inline Lisp_Object\n+CHAR_TABLE_REF (Lisp_Object ct, int idx)\n+{\n+  return (ASCII_CHAR_P (idx)\n+\t  ? CHAR_TABLE_REF_ASCII (ct, idx)\n+\t  : char_table_ref (ct, idx));\n+}\n+\n+_Bool\n+word_boundary_p (Lisp_Object char_script_table, int c1, int c2)\n+{\n+  return EQ (CHAR_TABLE_REF (char_script_table, c1),\n+\t     CHAR_TABLE_REF (char_script_table, c2));\n+}"}, {"sha": "2a9c715c32c40a0be4802b737788dd083552484a", "filename": "gcc/testsuite/gcc.dg/analyzer/null-deref-pr108251-smp_fetch_ssl_fc_has_early-O2.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108251-smp_fetch_ssl_fc_has_early-O2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108251-smp_fetch_ssl_fc_has_early-O2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108251-smp_fetch_ssl_fc_has_early-O2.c?ref=4214bdb1d77ebee04d12f66c831730ed67fedf55", "patch": "@@ -0,0 +1,98 @@\n+/* Reduced from haproxy's src/ssl_sample.c  */\n+\n+/* { dg-additional-options \"-O2\" } */\n+\n+union sample_value {\n+  long long int sint;\n+  /* [...snip...]  */\n+};\n+\n+struct sample_data {\n+ int type;\n+ union sample_value u;\n+};\n+\n+enum {\n+  /* [...snip...]  */\n+ SMP_T_BOOL,\n+  /* [...snip...]  */\n+};\n+struct sample {\n+ unsigned int flags;\n+ struct sample_data data;\n+  /* [...snip...]  */\n+ struct session *sess;\n+ struct stream *strm;\n+  /* [...snip...]  */\n+};\n+struct arg {\n+  /* [...snip...]  */\n+};\n+enum obj_type {\n+ OBJ_TYPE_NONE = 0,\n+  /* [...snip...]  */\n+ OBJ_TYPE_CONN,\n+  /* [...snip...]  */\n+ OBJ_TYPE_CHECK,\n+ OBJ_TYPE_ENTRIES\n+};\n+enum {\n+  /* [...snip...]  */\n+ CO_FL_EARLY_SSL_HS = 0x00004000,\n+ CO_FL_EARLY_DATA = 0x00008000,\n+  /* [...snip...]  */\n+ CO_FL_SSL_WAIT_HS = 0x08000000,\n+  /* [...snip...]  */\n+};\n+struct connection {\n+ enum obj_type obj_type;\n+ unsigned char err_code;\n+  /* [...snip...]  */\n+ unsigned int flags;\n+  /* [...snip...]  */\n+};\n+\n+static inline enum obj_type obj_type(const enum obj_type *t)\n+{\n+ if (!t || *t >= OBJ_TYPE_ENTRIES)\n+  return OBJ_TYPE_NONE;\n+ return *t;\n+}\n+static inline struct connection *__objt_conn(enum obj_type *t)\n+{\n+ return ((struct connection *)(((void *)(t)) - ((long)&((struct connection *)0)->obj_type)));\n+}\n+static inline struct connection *objt_conn(enum obj_type *t)\n+{\n+ if (!t || *t != OBJ_TYPE_CONN)\n+   return ((void *)0);\n+ return __objt_conn(t);\n+}\n+struct session {\n+  /* [...snip...]  */\n+ enum obj_type *origin;\n+  /* [...snip...]  */\n+};\n+typedef struct ssl_st SSL;\n+SSL *ssl_sock_get_ssl_object(struct connection *conn);\n+\n+/*****************************************************************************/\n+\n+int\n+smp_fetch_ssl_fc_has_early(const struct arg *args, struct sample *smp, const char *kw, void *private)\n+{\n+ SSL *ssl;\n+ struct connection *conn;\n+\n+ conn = objt_conn(smp->sess->origin);\n+ ssl = ssl_sock_get_ssl_object(conn);\n+ if (!ssl)\n+  return 0;\n+\n+ smp->flags = 0;\n+ smp->data.type = SMP_T_BOOL;\n+ smp->data.u.sint = ((conn->flags & CO_FL_EARLY_DATA) && /* { dg-bogus \"dereference of NULL\" \"PR analyzer/108251\" { xfail *-*-*} } */\n+     (conn->flags & (CO_FL_EARLY_SSL_HS | CO_FL_SSL_WAIT_HS))) ? 1 : 0;\n+\n+ return 1;\n+}"}, {"sha": "d83af19788c489c8fa527b40630f07c5711b2c7d", "filename": "gcc/testsuite/gcc.dg/analyzer/null-deref-pr108251-smp_fetch_ssl_fc_has_early.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108251-smp_fetch_ssl_fc_has_early.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108251-smp_fetch_ssl_fc_has_early.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108251-smp_fetch_ssl_fc_has_early.c?ref=4214bdb1d77ebee04d12f66c831730ed67fedf55", "patch": "@@ -0,0 +1,96 @@\n+/* Reduced from haproxy's src/ssl_sample.c  */\n+\n+union sample_value {\n+  long long int sint;\n+  /* [...snip...]  */\n+};\n+\n+struct sample_data {\n+ int type;\n+ union sample_value u;\n+};\n+\n+enum {\n+  /* [...snip...]  */\n+ SMP_T_BOOL,\n+  /* [...snip...]  */\n+};\n+struct sample {\n+ unsigned int flags;\n+ struct sample_data data;\n+  /* [...snip...]  */\n+ struct session *sess;\n+ struct stream *strm;\n+  /* [...snip...]  */\n+};\n+struct arg {\n+  /* [...snip...]  */\n+};\n+enum obj_type {\n+ OBJ_TYPE_NONE = 0,\n+  /* [...snip...]  */\n+ OBJ_TYPE_CONN,\n+  /* [...snip...]  */\n+ OBJ_TYPE_CHECK,\n+ OBJ_TYPE_ENTRIES\n+};\n+enum {\n+  /* [...snip...]  */\n+ CO_FL_EARLY_SSL_HS = 0x00004000,\n+ CO_FL_EARLY_DATA = 0x00008000,\n+  /* [...snip...]  */\n+ CO_FL_SSL_WAIT_HS = 0x08000000,\n+  /* [...snip...]  */\n+};\n+struct connection {\n+ enum obj_type obj_type;\n+ unsigned char err_code;\n+  /* [...snip...]  */\n+ unsigned int flags;\n+  /* [...snip...]  */\n+};\n+\n+static inline enum obj_type obj_type(const enum obj_type *t)\n+{\n+ if (!t || *t >= OBJ_TYPE_ENTRIES)\n+  return OBJ_TYPE_NONE;\n+ return *t;\n+}\n+static inline struct connection *__objt_conn(enum obj_type *t)\n+{\n+ return ((struct connection *)(((void *)(t)) - ((long)&((struct connection *)0)->obj_type)));\n+}\n+static inline struct connection *objt_conn(enum obj_type *t)\n+{\n+ if (!t || *t != OBJ_TYPE_CONN)\n+   return ((void *)0);\n+ return __objt_conn(t);\n+}\n+struct session {\n+  /* [...snip...]  */\n+ enum obj_type *origin;\n+  /* [...snip...]  */\n+};\n+typedef struct ssl_st SSL;\n+SSL *ssl_sock_get_ssl_object(struct connection *conn);\n+\n+/*****************************************************************************/\n+\n+int\n+smp_fetch_ssl_fc_has_early(const struct arg *args, struct sample *smp, const char *kw, void *private)\n+{\n+ SSL *ssl;\n+ struct connection *conn;\n+\n+ conn = objt_conn(smp->sess->origin);\n+ ssl = ssl_sock_get_ssl_object(conn);\n+ if (!ssl)\n+  return 0;\n+\n+ smp->flags = 0;\n+ smp->data.type = SMP_T_BOOL;\n+ smp->data.u.sint = ((conn->flags & CO_FL_EARLY_DATA) && /* { dg-bogus \"dereference of NULL 'conn'\" \"PR analyzer/108251\" { xfail *-*-*} } */\n+     (conn->flags & (CO_FL_EARLY_SSL_HS | CO_FL_SSL_WAIT_HS))) ? 1 : 0;\n+\n+ return 1;\n+}"}, {"sha": "1e4613cd1b1019e809b227f5fd02caae70999792", "filename": "gcc/testsuite/gcc.dg/analyzer/null-deref-pr108400-SoftEtherVPN-WebUi.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108400-SoftEtherVPN-WebUi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4214bdb1d77ebee04d12f66c831730ed67fedf55/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108400-SoftEtherVPN-WebUi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108400-SoftEtherVPN-WebUi.c?ref=4214bdb1d77ebee04d12f66c831730ed67fedf55", "patch": "@@ -0,0 +1,77 @@\n+/* Reduced from SoftEtherVPN's src/Cedar/WebUI.c.   */\n+\n+#define NULL ((void *)0)\n+typedef int (COMPARE)(void *p1, void *p2);\n+typedef unsigned int UINT;\n+typedef unsigned long int UINT64;\n+typedef struct LIST LIST;\n+typedef struct STRMAP_ENTRY STRMAP_ENTRY;\n+typedef struct WEBUI\n+{\n+\t/* [...snip...] */\n+\tLIST *Contexts;\n+} WEBUI;\n+\n+typedef struct WU_CONTEXT\n+{\n+\t/* [...snip...] */\n+\tUINT64 ExpireDate;\n+} WU_CONTEXT;\n+\n+struct LIST\n+{\n+\t/* [...snip...] */\n+\tUINT num_item, num_reserved;\n+\tvoid **p;\n+\t/* [...snip...] */\n+};\n+\n+#define\tLIST_DATA(o, i)\t\t(((o) != NULL) ? ((o)->p[(i)]) : NULL)\n+#define\tLIST_NUM(o)\t\t\t(((o) != NULL) ? (o)->num_item : 0)\n+\n+\n+struct STRMAP_ENTRY\n+{\n+\tchar *Name;\n+\tvoid *Value;\n+};\n+\n+void Free(void *addr);\n+void Add(LIST *o, void *p);\n+_Bool Delete(LIST *o, void *p);\n+void LockList(LIST *o);\n+void UnlockList(LIST *o);\n+void ReleaseList(LIST *o);\n+LIST *NewList(COMPARE *cmp);\n+UINT64 Tick64();\n+void WuFreeContext(WU_CONTEXT *context);\n+\n+void WuExpireSessionKey(WEBUI *wu)\n+{\n+\tLIST *Expired = NewList(NULL);\n+\tUINT i;\n+\n+\tLockList(wu->Contexts);\n+\n+\tfor(i=0; i<LIST_NUM(wu->Contexts); i++)\n+\t{\n+\t\tSTRMAP_ENTRY *entry = (STRMAP_ENTRY*)LIST_DATA(wu->Contexts, i);\n+\t\tWU_CONTEXT *context = (WU_CONTEXT*)entry->Value; /* { dg-bogus \"dereference of NULL 'entry'\" \"PR analyzer/108400\" { xfail *-*-* } } */\n+\t\tif(context->ExpireDate < Tick64())\n+\t\t{\n+\t\t\tAdd(Expired, entry);\n+\t\t}\n+\t}\n+\n+\tfor(i=0; i<LIST_NUM(Expired); i++)\n+\t{\n+\t\tSTRMAP_ENTRY *entry = LIST_DATA(Expired, i);\n+\t\tDelete(wu->Contexts, entry);\n+\t\tFree(entry->Name);\n+\t\tWuFreeContext(entry->Value);\n+\t\tFree(entry);\n+\t}\n+\tReleaseList(Expired);\n+\n+\tUnlockList(wu->Contexts);\n+}"}]}