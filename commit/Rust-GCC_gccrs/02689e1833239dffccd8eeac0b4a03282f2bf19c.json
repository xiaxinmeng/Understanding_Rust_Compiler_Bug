{"sha": "02689e1833239dffccd8eeac0b4a03282f2bf19c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI2ODllMTgzMzIzOWRmZmNjZDhlZWFjMGI0YTAzMjgyZjJiZjE5Yw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2000-08-23T19:37:09Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-08-23T19:37:09Z"}, "message": "Replace upper case condition code strings with lower case.\n\nFrom-SVN: r35920", "tree": {"sha": "08c292c40f96ee40001f48bfe77ac425aa47b86d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08c292c40f96ee40001f48bfe77ac425aa47b86d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02689e1833239dffccd8eeac0b4a03282f2bf19c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02689e1833239dffccd8eeac0b4a03282f2bf19c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02689e1833239dffccd8eeac0b4a03282f2bf19c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02689e1833239dffccd8eeac0b4a03282f2bf19c/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64a7723db4a26591bf3522b54da517ff3972285e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a7723db4a26591bf3522b54da517ff3972285e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a7723db4a26591bf3522b54da517ff3972285e"}], "stats": {"total": 161, "additions": 82, "deletions": 79}, "files": [{"sha": "0ada585abdb57f26da924215ed9c8e2ef792b43c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02689e1833239dffccd8eeac0b4a03282f2bf19c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02689e1833239dffccd8eeac0b4a03282f2bf19c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02689e1833239dffccd8eeac0b4a03282f2bf19c", "patch": "@@ -1,5 +1,8 @@\n 2000-08-23  Nick Clifton  <nickc@redhat.com>\n \n+\t* config/arm/lib1funcs.asm: Replace upper case condition codes\n+\twith lower case versions.\n+\n \t* config/arm/arm.h (STRUCT_VALUE): Define.\n \t(STRUCT_VALUE_REGNUM): Delete.\n "}, {"sha": "f1ff31435f493507fc50fdc1d567d1c0ee826d24", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02689e1833239dffccd8eeac0b4a03282f2bf19c/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02689e1833239dffccd8eeac0b4a03282f2bf19c/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=02689e1833239dffccd8eeac0b4a03282f2bf19c", "patch": "@@ -171,19 +171,19 @@ Loop1:\n \t@ division loop.  Continue shifting until the divisor is \n \t@ larger than the dividend.\n \tcmp\tdivisor, #0x10000000\n-\tcmpLO\tdivisor, dividend\n-\tmovLO\tdivisor, divisor, lsl #4\n-\tmovLO\tcurbit,  curbit,  lsl #4\n-\tbLO\tLoop1\n+\tcmplo\tdivisor, dividend\n+\tmovlo\tdivisor, divisor, lsl #4\n+\tmovlo\tcurbit,  curbit,  lsl #4\n+\tblo\tLoop1\n \n Lbignum:\n \t@ For very big divisors, we must shift it a bit at a time, or\n \t@ we will be in danger of overflowing.\n \tcmp\tdivisor, #0x80000000\n-\tcmpLO\tdivisor, dividend\n-\tmovLO\tdivisor, divisor, lsl #1\n-\tmovLO\tcurbit,  curbit,  lsl #1\n-\tbLO\tLbignum\n+\tcmplo\tdivisor, dividend\n+\tmovlo\tdivisor, divisor, lsl #1\n+\tmovlo\tcurbit,  curbit,  lsl #1\n+\tblo\tLbignum\n \n Loop3:\n \t@ Test for possible subtractions.  On the final pass, this may \n@@ -194,38 +194,38 @@ Loop3:\n \t@ We can fix them up afterwards.\n \tmov\toverdone, #0\n \tcmp\tdividend, divisor\n-\tsubHS\tdividend, dividend, divisor\n+\tsubhs\tdividend, dividend, divisor\n \tcmp\tdividend, divisor,  lsr #1\n-\tsubHS\tdividend, dividend, divisor, lsr #1\n-\torrHS\toverdone, overdone, curbit,  ror #1\n+\tsubhs\tdividend, dividend, divisor, lsr #1\n+\torrhs\toverdone, overdone, curbit,  ror #1\n \tcmp\tdividend, divisor,  lsr #2\n-\tsubHS\tdividend, dividend, divisor, lsr #2\n-\torrHS\toverdone, overdone, curbit,  ror #2\n+\tsubhs\tdividend, dividend, divisor, lsr #2\n+\torrhs\toverdone, overdone, curbit,  ror #2\n \tcmp\tdividend, divisor,  lsr #3\n-\tsubHS\tdividend, dividend, divisor, lsr #3\n-\torrHS\toverdone, overdone, curbit,  ror #3\n+\tsubhs\tdividend, dividend, divisor, lsr #3\n+\torrhs\toverdone, overdone, curbit,  ror #3\n \tmov\tip,       curbit\n   .else\n \t@ ... so keep track of which subtractions are done in RESULT.\n \t@ The result will be ok, since the \"bit\" will have been \n \t@ shifted out at the bottom.\n \tcmp\tdividend, divisor\n-\tsubHS\tdividend, dividend, divisor\n-\torrHS\tresult,   result,   curbit\n+\tsubhs\tdividend, dividend, divisor\n+\torrhs\tresult,   result,   curbit\n \tcmp\tdividend, divisor,  lsr #1\n-\tsubHS\tdividend, dividend, divisor, lsr #1\n-\torrHS\tresult,   result,   curbit,  lsr #1\n+\tsubhs\tdividend, dividend, divisor, lsr #1\n+\torrhs\tresult,   result,   curbit,  lsr #1\n \tcmp\tdividend, divisor,  lsr #2\n-\tsubHS\tdividend, dividend, divisor, lsr #2\n-\torrHS\tresult,   result,   curbit,  lsr #2\n+\tsubhs\tdividend, dividend, divisor, lsr #2\n+\torrhs\tresult,   result,   curbit,  lsr #2\n \tcmp\tdividend, divisor,  lsr #3\n-\tsubHS\tdividend, dividend, divisor, lsr #3\n-\torrHS\tresult,   result,   curbit,  lsr #3\n+\tsubhs\tdividend, dividend, divisor, lsr #3\n+\torrhs\tresult,   result,   curbit,  lsr #3\n   .endif\n \n \tcmp\tdividend, #0\t\t\t@ Early termination?\n-\tmovNEs\tcurbit,   curbit,  lsr #4\t@ No, any more bits to do?\n-\tmovNE\tdivisor,  divisor, lsr #4\n+\tmovnes\tcurbit,   curbit,  lsr #4\t@ No, any more bits to do?\n+\tmovne\tdivisor,  divisor, lsr #4\n \tbNE\tLoop3\n \n   .if \\modulo\n@@ -240,14 +240,14 @@ Lfixup_dividend:\n \t@ (rather relying upon the TSTs to prevent the additions) since\n \t@ the bit in ip could be in the top two bits which might then match\n \t@ with one of the smaller RORs.\n-\ttstNE\tip, #0x7\n-\tbEQ\tLgot_result\n+\ttstne\tip, #0x7\n+\tbeq\tLgot_result\n \ttst\toverdone, ip, ror #3\n-\taddNE\tdividend, dividend, divisor, lsr #3\n+\taddne\tdividend, dividend, divisor, lsr #3\n \ttst\toverdone, ip, ror #2\n-\taddNE\tdividend, dividend, divisor, lsr #2\n+\taddne\tdividend, dividend, divisor, lsr #2\n \ttst\toverdone, ip, ror #1\n-\taddNE\tdividend, dividend, divisor, lsr #1\n+\taddne\tdividend, dividend, divisor, lsr #1\n   .endif\n \n Lgot_result:\n@@ -263,9 +263,9 @@ Loop1:\n \t@ division loop.  Continue shifting until the divisor is \n \t@ larger than the dividend.\n \tcmp\tdivisor, work\n-\tbHS\tLbignum\n+\tbhs\tLbignum\n \tcmp\tdivisor, dividend\n-\tbHS\tLbignum\n+\tbhs\tLbignum\n \tlsl\tdivisor, #4\n \tlsl\tcurbit,  #4\n \tb\tLoop1\n@@ -276,9 +276,9 @@ Loop2:\n \t@ For very big divisors, we must shift it a bit at a time, or\n \t@ we will be in danger of overflowing.\n \tcmp\tdivisor, work\n-\tbHS\tLoop3\n+\tbhs\tLoop3\n \tcmp\tdivisor, dividend\n-\tbHS\tLoop3\n+\tbhs\tLoop3\n \tlsl\tdivisor, #1\n \tlsl\tcurbit,  #1\n \tb\tLoop2\n@@ -290,12 +290,12 @@ Loop3:\n \t@ afterwards.\n \tmov\toverdone, #0\n \tcmp\tdividend, divisor\n-\tbLO\tLover1\n+\tblo\tLover1\n \tsub\tdividend, dividend, divisor\n Lover1:\n \tlsr\twork, divisor, #1\n \tcmp\tdividend, work\n-\tbLO\tLover2\n+\tblo\tLover2\n \tsub\tdividend, dividend, work\n \tmov\tip, curbit\n \tmov\twork, #1\n@@ -305,7 +305,7 @@ Lover1:\n Lover2:\n \tlsr\twork, divisor, #2\n \tcmp\tdividend, work\n-\tbLO\tLover3\n+\tblo\tLover3\n \tsub\tdividend, dividend, work\n \tmov\tip, curbit\n \tmov\twork, #2\n@@ -315,7 +315,7 @@ Lover2:\n Lover3:\n \tlsr\twork, divisor, #3\n \tcmp\tdividend, work\n-\tbLO\tLover4\n+\tblo\tLover4\n \tsub\tdividend, dividend, work\n \tmov\tip, curbit\n \tmov\twork, #3\n@@ -329,37 +329,37 @@ Lover4:\n \t@ this may subtract too much from the dividend, but the result will be ok,\n \t@ since the \"bit\" will have been shifted out at the bottom.\n \tcmp\tdividend, divisor\n-\tbLO\tLover1\n+\tblo\tLover1\n \tsub\tdividend, dividend, divisor\n \torr\tresult, result, curbit\n Lover1:\n \tlsr\twork, divisor, #1\n \tcmp\tdividend, work\n-\tbLO\tLover2\n+\tblo\tLover2\n \tsub\tdividend, dividend, work\n \tlsr\twork, curbit, #1\n \torr\tresult, work\n Lover2:\n \tlsr\twork, divisor, #2\n \tcmp\tdividend, work\n-\tbLO\tLover3\n+\tblo\tLover3\n \tsub\tdividend, dividend, work\n \tlsr\twork, curbit, #2\n \torr\tresult, work\n Lover3:\n \tlsr\twork, divisor, #3\n \tcmp\tdividend, work\n-\tbLO\tLover4\n+\tblo\tLover4\n \tsub\tdividend, dividend, work\n \tlsr\twork, curbit, #3\n \torr\tresult, work\n Lover4:\n   .endif\n \t\n \tcmp\tdividend, #0\t\t\t@ Early termination?\n-\tbEQ\tLover5\n+\tbeq\tLover5\n \tlsr\tcurbit,  #4\t\t\t@ No, any more bits to do?\n-\tbEQ\tLover5\n+\tbeq\tLover5\n \tlsr\tdivisor, #4\n \tb\tLoop3\n Lover5:\n@@ -370,7 +370,7 @@ Lover5:\n \tmov\twork, #0xe\n \tlsl\twork, #28\n \tand\toverdone, work\n-\tbEQ\tLgot_result\n+\tbeq\tLgot_result\n \t\n \t@ If we terminated early, because dividend became zero, then the \n \t@ bit in ip will not be in the bottom nibble, and we should not\n@@ -381,29 +381,29 @@ Lover5:\n \tmov\tcurbit, ip\n \tmov\twork, #0x7\n \ttst\tcurbit, work\n-\tbEQ\tLgot_result\n+\tbeq\tLgot_result\n \t\n \tmov\tcurbit, ip\n \tmov\twork, #3\n \tror\tcurbit, work\n \ttst\toverdone, curbit\n-\tbEQ\tLover6\n+\tbeq\tLover6\n \tlsr\twork, divisor, #3\n \tadd\tdividend, work\n Lover6:\n \tmov\tcurbit, ip\n \tmov\twork, #2\n \tror\tcurbit, work\n \ttst\toverdone, curbit\n-\tbEQ\tLover7\n+\tbeq\tLover7\n \tlsr\twork, divisor, #2\n \tadd\tdividend, work\n Lover7:\n \tmov\tcurbit, ip\n \tmov\twork, #1\n \tror\tcurbit, work\n \ttst\toverdone, curbit\n-\tbEQ\tLgot_result\n+\tbeq\tLgot_result\n \tlsr\twork, divisor, #1\n \tadd\tdividend, work\n   .endif\n@@ -419,13 +419,13 @@ Lgot_result:\n #ifdef __thumb__\n \n \tcmp\tdivisor, #0\n-\tbEQ\tLdiv0\n+\tbeq\tLdiv0\n \tmov\tcurbit, #1\n \tmov\tresult, #0\n \t\n \tpush\t{ work }\n \tcmp\tdividend, divisor\n-\tbLO\tLgot_result\n+\tblo\tLgot_result\n \n \tTHUMB_DIV_MOD_BODY 0\n \t\n@@ -436,11 +436,11 @@ Lgot_result:\n #else /* ARM version.  */\n \t\n \tcmp\tdivisor, #0\n-\tbEQ\tLdiv0\n+\tbeq\tLdiv0\n \tmov\tcurbit, #1\n \tmov\tresult, #0\n \tcmp\tdividend, divisor\n-\tbLO\tLgot_result\n+\tblo\tLgot_result\n \t\n \tARM_DIV_MOD_BODY 0\n \t\n@@ -460,10 +460,10 @@ Lgot_result:\n #ifdef __thumb__\n \n \tcmp\tdivisor, #0\n-\tbEQ\tLdiv0\n+\tbeq\tLdiv0\n \tmov\tcurbit, #1\n \tcmp\tdividend, divisor\n-\tbHS\tLover10\n+\tbhs\tLover10\n \tRET\t\n \n Lover10:\n@@ -477,11 +477,11 @@ Lover10:\n #else  /* ARM version.  */\n \t\n \tcmp\tdivisor, #0\n-\tbEQ\tLdiv0\n+\tbeq\tLdiv0\n \tcmp     divisor, #1\n-\tcmpNE\tdividend, divisor\n-\tmovEQ   dividend, #0\n-\tRETc(LO)\n+\tcmpne\tdividend, divisor\n+\tmoveq   dividend, #0\n+\tRETc(lo)\n \tmov\tcurbit, #1\n \n \tARM_DIV_MOD_BODY 1\n@@ -500,7 +500,7 @@ Lover10:\n \n #ifdef __thumb__\n \tcmp\tdivisor, #0\n-\tbEQ\tLdiv0\n+\tbeq\tLdiv0\n \t\n \tpush\t{ work }\n \tmov\twork, dividend\n@@ -509,22 +509,22 @@ Lover10:\n \tmov\tcurbit, #1\n \tmov\tresult, #0\n \tcmp\tdivisor, #0\n-\tbPL\tLover10\n+\tbpl\tLover10\n \tneg\tdivisor, divisor\t@ Loops below use unsigned.\n Lover10:\n \tcmp\tdividend, #0\n-\tbPL\tLover11\n+\tbpl\tLover11\n \tneg\tdividend, dividend\n Lover11:\n \tcmp\tdividend, divisor\n-\tbLO\tLgot_result\n+\tblo\tLgot_result\n \n \tTHUMB_DIV_MOD_BODY 0\n \t\n \tmov\tr0, result\n \tmov\twork, ip\n \tcmp\twork, #0\n-\tbPL\tLover12\n+\tbpl\tLover12\n \tneg\tr0, r0\n Lover12:\n \tpop\t{ work }\n@@ -536,18 +536,18 @@ Lover12:\n \tmov\tcurbit, #1\n \tmov\tresult, #0\n \tcmp\tdivisor, #0\n-\trsbMI\tdivisor, divisor, #0\t\t@ Loops below use unsigned.\n-\tbEQ\tLdiv0\n+\trsbmi\tdivisor, divisor, #0\t\t@ Loops below use unsigned.\n+\tbeq\tLdiv0\n \tcmp\tdividend, #0\n-\trsbMI\tdividend, dividend, #0\n+\trsbmi\tdividend, dividend, #0\n \tcmp\tdividend, divisor\n-\tbLO\tLgot_result\n+\tblo\tLgot_result\n \n \tARM_DIV_MOD_BODY 0\n \t\n \tmov\tr0, result\n \tcmp\tip, #0\n-\trsbMI\tr0, r0, #0\n+\trsbmi\tr0, r0, #0\n \tRET\t\n \n #endif /* ARM version */\n@@ -564,8 +564,8 @@ Lover12:\n \n \tmov\tcurbit, #1\n \tcmp\tdivisor, #0\n-\tbEQ\tLdiv0\n-\tbPL\tLover10\n+\tbeq\tLdiv0\n+\tbpl\tLover10\n \tneg\tdivisor, divisor\t\t@ Loops below use unsigned.\n Lover10:\n \tpush\t{ work }\n@@ -574,17 +574,17 @@ Lover10:\n \t@ the work register, because we will pop this value off first.\n \tpush\t{ dividend }\n \tcmp\tdividend, #0\n-\tbPL\tLover11\n+\tbpl\tLover11\n \tneg\tdividend, dividend\n Lover11:\n \tcmp\tdividend, divisor\n-\tbLO\tLgot_result\n+\tblo\tLgot_result\n \n \tTHUMB_DIV_MOD_BODY 1\n \t\t\n \tpop\t{ work }\n \tcmp\twork, #0\n-\tbPL\tLover12\n+\tbpl\tLover12\n \tneg\tdividend, dividend\n Lover12:\n \tpop\t{ work }\n@@ -593,22 +593,22 @@ Lover12:\n #else /* ARM version.  */\n \t\n \tcmp\tdivisor, #0\n-\trsbMI\tdivisor, divisor, #0\t\t@ Loops below use unsigned.\n-\tbEQ\tLdiv0\n+\trsbmi\tdivisor, divisor, #0\t\t@ Loops below use unsigned.\n+\tbeq\tLdiv0\n \t@ Need to save the sign of the dividend, unfortunately, we need\n \t@ ip later on; this is faster than pushing lr and using that.\n \tstr\tdividend, [sp, #-4]!\n \tcmp\tdividend, #0\t\t\t@ Test dividend against zero\n-\trsbMI\tdividend, dividend, #0\t\t@ If negative make positive\n+\trsbmi\tdividend, dividend, #0\t\t@ If negative make positive\n \tcmp\tdividend, divisor\t\t@ else if zero return zero\n-\tbLO\tLgot_result\t\t\t@ if smaller return dividend\n+\tblo\tLgot_result\t\t\t@ if smaller return dividend\n \tmov\tcurbit, #1\n \n \tARM_DIV_MOD_BODY 1\n \n \tldr\tip, [sp], #4\n \tcmp\tip, #0\n-\trsbMI\tdividend, dividend, #0\n+\trsbmi\tdividend, dividend, #0\n \tRET\t\n \n #endif /* ARM version */"}]}