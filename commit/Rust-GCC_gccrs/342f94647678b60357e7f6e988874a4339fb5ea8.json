{"sha": "342f94647678b60357e7f6e988874a4339fb5ea8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyZjk0NjQ3Njc4YjYwMzU3ZTdmNmU5ODg4NzRhNDMzOWZiNWVhOA==", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2019-11-15T15:36:34Z"}, "committer": {"name": "Kwok Cheung Yeung", "email": "kcy@gcc.gnu.org", "date": "2019-11-15T15:36:34Z"}, "message": "[amdgcn] Restrict registers available to non-kernel functions\n\nRestrict the number of SGPRs and VGPRs available to non-kernel functions\nto improve compute-unit occupancy with multiple threads.\n\n2019-11-15  Kwok Cheung Yeung  <kcy@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn.c (default_requested_args): New.\n\t(gcn_parse_amdgpu_hsa_kernel_attribute): Initialize requested args\n\tset with default_requested_args.\n\t(gcn_conditional_register_usage): Limit register usage of non-kernel\n\tfunctions.  Reassign fixed registers if a non-standard set of args is\n\trequested.\n\t* config/gcn/gcn.h (FIXED_REGISTERS): Fix registers according to ABI.\n\nFrom-SVN: r278301", "tree": {"sha": "1b79b3bfb2cb54852ce253822d74164e784e1323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b79b3bfb2cb54852ce253822d74164e784e1323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/342f94647678b60357e7f6e988874a4339fb5ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342f94647678b60357e7f6e988874a4339fb5ea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342f94647678b60357e7f6e988874a4339fb5ea8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342f94647678b60357e7f6e988874a4339fb5ea8/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c3c3f455021130c429f57b09ef39bc218bd7fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3c3f455021130c429f57b09ef39bc218bd7fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c3c3f455021130c429f57b09ef39bc218bd7fff"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "4de97a07de8115ef73dbfeeecc9870ae5ca786df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342f94647678b60357e7f6e988874a4339fb5ea8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342f94647678b60357e7f6e988874a4339fb5ea8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=342f94647678b60357e7f6e988874a4339fb5ea8", "patch": "@@ -1,3 +1,13 @@\n+2019-11-15  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (default_requested_args): New.\n+\t(gcn_parse_amdgpu_hsa_kernel_attribute): Initialize requested args\n+\tset with default_requested_args.\n+\t(gcn_conditional_register_usage): Limit register usage of non-kernel\n+\tfunctions.  Reassign fixed registers if a non-standard set of args is\n+\trequested.\n+\t* config/gcn/gcn.h (FIXED_REGISTERS): Fix registers according to ABI.\n+\n 2019-11-15  Feng Xue  <fxue@os.amperecomputing.com>\n \n \tPR ipa/92528"}, {"sha": "383e0aa2c5489b7c7cf3c092faaf977b59d253dd", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342f94647678b60357e7f6e988874a4339fb5ea8/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342f94647678b60357e7f6e988874a4339fb5ea8/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=342f94647678b60357e7f6e988874a4339fb5ea8", "patch": "@@ -191,6 +191,17 @@ static const struct gcn_kernel_arg_type\n   {\"work_item_id_Z\", NULL, V64SImode, FIRST_VGPR_REG + 2}\n };\n \n+static const long default_requested_args\n+\t= (1 << PRIVATE_SEGMENT_BUFFER_ARG)\n+\t  | (1 << DISPATCH_PTR_ARG)\n+\t  | (1 << QUEUE_PTR_ARG)\n+\t  | (1 << KERNARG_SEGMENT_PTR_ARG)\n+\t  | (1 << PRIVATE_SEGMENT_WAVE_OFFSET_ARG)\n+\t  | (1 << WORKGROUP_ID_X_ARG)\n+\t  | (1 << WORK_ITEM_ID_X_ARG)\n+\t  | (1 << WORK_ITEM_ID_Y_ARG)\n+\t  | (1 << WORK_ITEM_ID_Z_ARG);\n+\n /* Extract parameter settings from __attribute__((amdgpu_hsa_kernel ())).\n    This function also sets the default values for some arguments.\n  \n@@ -201,10 +212,7 @@ gcn_parse_amdgpu_hsa_kernel_attribute (struct gcn_kernel_args *args,\n \t\t\t\t       tree list)\n {\n   bool err = false;\n-  args->requested = ((1 << PRIVATE_SEGMENT_BUFFER_ARG)\n-\t\t     | (1 << QUEUE_PTR_ARG)\n-\t\t     | (1 << KERNARG_SEGMENT_PTR_ARG)\n-\t\t     | (1 << PRIVATE_SEGMENT_WAVE_OFFSET_ARG));\n+  args->requested = default_requested_args;\n   args->nargs = 0;\n \n   for (int a = 0; a < GCN_KERNEL_ARG_TYPES; a++)\n@@ -242,8 +250,6 @@ gcn_parse_amdgpu_hsa_kernel_attribute (struct gcn_kernel_args *args,\n       args->requested |= (1 << a);\n       args->order[args->nargs++] = a;\n     }\n-  args->requested |= (1 << WORKGROUP_ID_X_ARG);\n-  args->requested |= (1 << WORK_ITEM_ID_Z_ARG);\n \n   /* Requesting WORK_ITEM_ID_Z_ARG implies requesting WORK_ITEM_ID_X_ARG and\n      WORK_ITEM_ID_Y_ARG.  Similarly, requesting WORK_ITEM_ID_Y_ARG implies\n@@ -253,10 +259,6 @@ gcn_parse_amdgpu_hsa_kernel_attribute (struct gcn_kernel_args *args,\n   if (args->requested & (1 << WORK_ITEM_ID_Y_ARG))\n     args->requested |= (1 << WORK_ITEM_ID_X_ARG);\n \n-  /* Always enable this so that kernargs is in a predictable place for\n-     gomp_print, etc.  */\n-  args->requested |= (1 << DISPATCH_PTR_ARG);\n-\n   int sgpr_regno = FIRST_SGPR_REG;\n   args->nsgprs = 0;\n   for (int a = 0; a < GCN_KERNEL_ARG_TYPES; a++)\n@@ -2045,38 +2047,45 @@ gcn_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n static void\n gcn_conditional_register_usage (void)\n {\n-  int i;\n+  if (!cfun || !cfun->machine)\n+    return;\n \n-  /* FIXME: Do we need to reset fixed_regs?  */\n+  if (cfun->machine->normal_function)\n+    {\n+      /* Restrict the set of SGPRs and VGPRs used by non-kernel functions.  */\n+      for (int i = SGPR_REGNO (62); i <= LAST_SGPR_REG; i++)\n+\tfixed_regs[i] = 1, call_used_regs[i] = 1;\n \n-/* Limit ourselves to 1/16 the register file for maximimum sized workgroups.\n-   There are enough SGPRs not to limit those.\n-   TODO: Adjust this more dynamically.  */\n-  for (i = FIRST_VGPR_REG + 64; i <= LAST_VGPR_REG; i++)\n-    fixed_regs[i] = 1, call_used_regs[i] = 1;\n+      for (int i = VGPR_REGNO (24); i <= LAST_VGPR_REG; i++)\n+\tfixed_regs[i] = 1, call_used_regs[i] = 1;\n \n-  if (!cfun || !cfun->machine || cfun->machine->normal_function)\n-    {\n-      /* Normal functions can't know what kernel argument registers are\n-         live, so just fix the bottom 16 SGPRs, and bottom 3 VGPRs.  */\n-      for (i = 0; i < 16; i++)\n-\tfixed_regs[FIRST_SGPR_REG + i] = 1;\n-      for (i = 0; i < 3; i++)\n-\tfixed_regs[FIRST_VGPR_REG + i] = 1;\n       return;\n     }\n \n+  /* If the set of requested args is the default set, nothing more needs to\n+     be done.  */\n+  if (cfun->machine->args.requested == default_requested_args)\n+    return;\n+\n+  /* Requesting a set of args different from the default violates the ABI.  */\n+  if (!leaf_function_p ())\n+    warning (0, \"A non-default set of initial values has been requested, \"\n+\t\t\"which violates the ABI!\");\n+\n+  for (int i = SGPR_REGNO (0); i < SGPR_REGNO (14); i++)\n+    fixed_regs[i] = 0;\n+\n   /* Fix the runtime argument register containing values that may be\n      needed later.  DISPATCH_PTR_ARG and FLAT_SCRATCH_* should not be\n      needed after the prologue so there's no need to fix them.  */\n   if (cfun->machine->args.reg[PRIVATE_SEGMENT_WAVE_OFFSET_ARG] >= 0)\n     fixed_regs[cfun->machine->args.reg[PRIVATE_SEGMENT_WAVE_OFFSET_ARG]] = 1;\n   if (cfun->machine->args.reg[PRIVATE_SEGMENT_BUFFER_ARG] >= 0)\n     {\n+      /* The upper 32-bits of the 64-bit descriptor are not used, so allow\n+\tthe containing registers to be used for other purposes.  */\n       fixed_regs[cfun->machine->args.reg[PRIVATE_SEGMENT_BUFFER_ARG]] = 1;\n       fixed_regs[cfun->machine->args.reg[PRIVATE_SEGMENT_BUFFER_ARG] + 1] = 1;\n-      fixed_regs[cfun->machine->args.reg[PRIVATE_SEGMENT_BUFFER_ARG] + 2] = 1;\n-      fixed_regs[cfun->machine->args.reg[PRIVATE_SEGMENT_BUFFER_ARG] + 3] = 1;\n     }\n   if (cfun->machine->args.reg[KERNARG_SEGMENT_PTR_ARG] >= 0)\n     {"}, {"sha": "dd3789b9f7d78194c91861c27b76bd39fb2854ff", "filename": "gcc/config/gcn/gcn.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342f94647678b60357e7f6e988874a4339fb5ea8/gcc%2Fconfig%2Fgcn%2Fgcn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342f94647678b60357e7f6e988874a4339fb5ea8/gcc%2Fconfig%2Fgcn%2Fgcn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.h?ref=342f94647678b60357e7f6e988874a4339fb5ea8", "patch": "@@ -160,9 +160,9 @@\n \f\n #define FIXED_REGISTERS {\t\t\t    \\\n     /* Scalars.  */\t\t\t\t    \\\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t    \\\n+    1, 1, 0, 0, 1, 1, 0, 0, 1, 1,\t\t    \\\n /*\t\tfp    sp    lr.  */\t\t    \\\n-    0, 0, 0, 0, 1, 1, 1, 1, 0, 0,\t\t    \\\n+    1, 1, 0, 0, 1, 1, 1, 1, 0, 0,\t\t    \\\n /*  exec_save, cc_save */\t\t\t    \\\n     1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\t\t    \\\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t    \\\n@@ -180,7 +180,7 @@\n     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n     1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t    \\\n     /* VGRPs */\t\t\t\t\t    \\\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+    0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\"}]}