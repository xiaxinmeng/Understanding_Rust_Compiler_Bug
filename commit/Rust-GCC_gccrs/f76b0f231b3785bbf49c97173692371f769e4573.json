{"sha": "f76b0f231b3785bbf49c97173692371f769e4573", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2YjBmMjMxYjM3ODViYmY0OWM5NzE3MzY5MjM3MWY3NjllNDU3Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-11T20:42:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-11T20:55:45Z"}, "message": "c++: Concepts and local externs\n\nI discovered that we'd accept constraints on block-scope function\ndecls inside templates.  This fixes that.\n\n\tgcc/cp/\n\t* decl.c (grokfndecl): Don't attach to local extern.", "tree": {"sha": "20ab01a07101e6130a2ad0680347feea9db02ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20ab01a07101e6130a2ad0680347feea9db02ef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76b0f231b3785bbf49c97173692371f769e4573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76b0f231b3785bbf49c97173692371f769e4573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76b0f231b3785bbf49c97173692371f769e4573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76b0f231b3785bbf49c97173692371f769e4573/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fda9e9badbd78d1033075a44a7d6c1b33de239c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fda9e9badbd78d1033075a44a7d6c1b33de239c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fda9e9badbd78d1033075a44a7d6c1b33de239c"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "ad2a30fcf71867bf2347b6fda2773211d6ec7e1a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76b0f231b3785bbf49c97173692371f769e4573/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76b0f231b3785bbf49c97173692371f769e4573/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f76b0f231b3785bbf49c97173692371f769e4573", "patch": "@@ -9457,7 +9457,10 @@ grokfndecl (tree ctype,\n     {\n       tree tmpl_reqs = NULL_TREE;\n       tree ctx = friendp ? current_class_type : ctype;\n-      bool memtmpl = (processing_template_decl > template_class_depth (ctx));\n+      bool block_local = TREE_CODE (current_scope ()) == FUNCTION_DECL;\n+      bool memtmpl = (!block_local\n+\t\t      && (processing_template_decl\n+\t\t\t  > template_class_depth (ctx)));\n       if (memtmpl)\n         tmpl_reqs = TEMPLATE_PARMS_CONSTRAINTS (current_template_parms);\n       tree ci = build_constraints (tmpl_reqs, decl_reqs);\n@@ -9467,9 +9470,11 @@ grokfndecl (tree ctype,\n           ci = NULL_TREE;\n         }\n       /* C++20 CA378: Remove non-templated constrained functions.  */\n-      if (ci && !flag_concepts_ts\n-\t  && (!processing_template_decl\n-\t      || (friendp && !memtmpl && !funcdef_flag)))\n+      if (ci\n+\t  && (block_local\n+\t      || (!flag_concepts_ts\n+\t\t  && (!processing_template_decl\n+\t\t      || (friendp && !memtmpl && !funcdef_flag)))))\n \t{\n \t  error_at (location, \"constraints on a non-templated function\");\n \t  ci = NULL_TREE;"}, {"sha": "69ecc2361c076e0423cf0adcf1ed5b5fbfd992dd", "filename": "gcc/testsuite/g++.dg/concepts/local-extern.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76b0f231b3785bbf49c97173692371f769e4573/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Flocal-extern.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76b0f231b3785bbf49c97173692371f769e4573/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Flocal-extern.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Flocal-extern.C?ref=f76b0f231b3785bbf49c97173692371f769e4573", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile { target c++17 } }\n+// { dg-additional-options -fconcepts }\n+\n+// Don't attach constraints to block-scope fn-decls and ICE\n+\n+template<typename _Iter>\n+    concept input_or_output_iterator\n+      = requires(_Iter __i) { { *__i } ; };\n+\n+\n+  template<input_or_output_iterator _It>\n+  class common_iterator\n+  {\n+\n+  public:\n+    \n+void\n+      frob ()\n+    {\n+      if (__builtin_is_constant_evaluated())\n+\t{\n+\t  void __failed_assertion(); // ICEd\n+\t  if (!bool(_M_index == 0)) __failed_assertion();\n+\t}\n+\n+    }\n+\n+  private:\n+    unsigned char _M_index;\n+  };\n+\n+template <typename T> concept C = true;\n+\n+template<typename T>\n+void F ()\n+{\n+  void bad () requires C<T>; // { dg-error \"a non-templated function\" }\n+  \n+}"}]}