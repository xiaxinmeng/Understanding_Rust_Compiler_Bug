{"sha": "9d54866d5491de12e6ccdc031516595d3c2d9077", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ1NDg2NmQ1NDkxZGUxMmU2Y2NkYzAzMTUxNjU5NWQzYzJkOTA3Nw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2008-10-28T09:45:37Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2008-10-28T09:45:37Z"}, "message": "mn10300.h (CALL_REALLY_USED_REGISTERS): Define.\n\n        * config/mn10300/mn10300.h (CALL_REALLY_USED_REGISTERS): Define.\n        * config/mn10300/mn10300.c (fp_regs_to_save): Test the\n        call_really_used_regs array rather than the call_used_regs array.\n        (mn10300_get_live_callee_saved_regs, expand_prologue,\n        expand_epilogue, output_tst): Likewise.\n\nFrom-SVN: r141405", "tree": {"sha": "d365b7dbccc3e30d1477bdb69e88645f3bce536a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d365b7dbccc3e30d1477bdb69e88645f3bce536a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d54866d5491de12e6ccdc031516595d3c2d9077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d54866d5491de12e6ccdc031516595d3c2d9077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d54866d5491de12e6ccdc031516595d3c2d9077", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d54866d5491de12e6ccdc031516595d3c2d9077/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2057f26d0e943ac6ef2586387d4960fbf5c4ad65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2057f26d0e943ac6ef2586387d4960fbf5c4ad65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2057f26d0e943ac6ef2586387d4960fbf5c4ad65"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "44432df823c4acd4ffd7ded7da10c0453a45f5c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54866d5491de12e6ccdc031516595d3c2d9077/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54866d5491de12e6ccdc031516595d3c2d9077/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d54866d5491de12e6ccdc031516595d3c2d9077", "patch": "@@ -1,3 +1,11 @@\n+2008-10-28  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/mn10300/mn10300.h (CALL_REALLY_USED_REGISTERS): Define.\n+\t* config/mn10300/mn10300.c (fp_regs_to_save): Test the\n+\tcall_really_used_regs array rather than the call_used_regs array.\n+\t(mn10300_get_live_callee_saved_regs, expand_prologue,\n+\texpand_epilogue, output_tst): Likewise.\n+\n 2008-10-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/37378"}, {"sha": "7ee72699770bb3c9c2db5e24281dbcfeba127e3c", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54866d5491de12e6ccdc031516595d3c2d9077/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54866d5491de12e6ccdc031516595d3c2d9077/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=9d54866d5491de12e6ccdc031516595d3c2d9077", "patch": "@@ -540,7 +540,7 @@ fp_regs_to_save (void)\n     return 0;\n \n   for (i = FIRST_FP_REGNUM; i <= LAST_FP_REGNUM; ++i)\n-    if (df_regs_ever_live_p (i) && ! call_used_regs[i])\n+    if (df_regs_ever_live_p (i) && ! call_really_used_regs[i])\n       ++n;\n \n   return n;\n@@ -617,7 +617,7 @@ mn10300_get_live_callee_saved_regs (void)\n \n   mask = 0;\n   for (i = 0; i <= LAST_EXTENDED_REGNUM; i++)\n-    if (df_regs_ever_live_p (i) && ! call_used_regs[i])\n+    if (df_regs_ever_live_p (i) && ! call_really_used_regs[i])\n       mask |= (1 << i);\n   if ((mask & 0x3c000) != 0)\n     mask |= 0x3c000;\n@@ -804,7 +804,7 @@ expand_prologue (void)\n \t frame pointer, size is nonzero and the user hasn't\n \t changed the calling conventions of a0.  */\n       if (! frame_pointer_needed && size\n-\t  && call_used_regs[FIRST_ADDRESS_REGNUM]\n+\t  && call_really_used_regs [FIRST_ADDRESS_REGNUM]\n \t  && ! fixed_regs[FIRST_ADDRESS_REGNUM])\n \t{\n \t  /* Insn: add -(size + 4 * num_regs_to_save), sp.  */\n@@ -828,7 +828,7 @@ expand_prologue (void)\n \n       /* Consider alternative save_a0_no_merge if the user hasn't\n \t changed the calling conventions of a0.  */\n-      if (call_used_regs[FIRST_ADDRESS_REGNUM]\n+      if (call_really_used_regs [FIRST_ADDRESS_REGNUM]\n \t  && ! fixed_regs[FIRST_ADDRESS_REGNUM])\n \t{\n \t  /* Insn: add -4 * num_regs_to_save, sp.  */\n@@ -910,7 +910,7 @@ expand_prologue (void)\n \n       /* Now actually save the FP registers.  */\n       for (i = FIRST_FP_REGNUM; i <= LAST_FP_REGNUM; ++i)\n-\tif (df_regs_ever_live_p (i) && ! call_used_regs[i])\n+\tif (df_regs_ever_live_p (i) && ! call_really_used_regs [i])\n \t  {\n \t    rtx addr;\n \n@@ -1046,7 +1046,7 @@ expand_epilogue (void)\n \n \t  /* Consider using a1 in post-increment mode, as long as the\n \t     user hasn't changed the calling conventions of a1.  */\n-\t  if (call_used_regs[FIRST_ADDRESS_REGNUM+1]\n+\t  if (call_really_used_regs [FIRST_ADDRESS_REGNUM + 1]\n \t      && ! fixed_regs[FIRST_ADDRESS_REGNUM+1])\n \t    {\n \t      /* Insn: mov sp,a1.  */\n@@ -1114,7 +1114,7 @@ expand_epilogue (void)\n \treg = gen_rtx_POST_INC (SImode, reg);\n \n       for (i = FIRST_FP_REGNUM; i <= LAST_FP_REGNUM; ++i)\n-\tif (df_regs_ever_live_p (i) && ! call_used_regs[i])\n+\tif (df_regs_ever_live_p (i) && ! call_really_used_regs [i])\n \t  {\n \t    rtx addr;\n \n@@ -1687,7 +1687,7 @@ output_tst (rtx operand, rtx insn)\n \t  && REGNO_REG_CLASS (REGNO (SET_DEST (set))) != EXTENDED_REGS\n \t  && REGNO (SET_DEST (set)) != REGNO (operand)\n \t  && (!past_call\n-\t      || !call_used_regs[REGNO (SET_DEST (set))]))\n+\t      || ! call_really_used_regs [REGNO (SET_DEST (set))]))\n \t{\n \t  rtx xoperands[2];\n \t  xoperands[0] = operand;\n@@ -1706,7 +1706,7 @@ output_tst (rtx operand, rtx insn)\n \t  && REGNO_REG_CLASS (REGNO (SET_DEST (set))) == EXTENDED_REGS\n \t  && REGNO (SET_DEST (set)) != REGNO (operand)\n \t  && (!past_call\n-\t      || !call_used_regs[REGNO (SET_DEST (set))]))\n+\t      || ! call_really_used_regs [REGNO (SET_DEST (set))]))\n \t{\n \t  rtx xoperands[2];\n \t  xoperands[0] = operand;"}, {"sha": "62dc512bc0e4cb99e2d36706182f70275f60ebeb", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54866d5491de12e6ccdc031516595d3c2d9077/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54866d5491de12e6ccdc031516595d3c2d9077/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=9d54866d5491de12e6ccdc031516595d3c2d9077", "patch": "@@ -171,6 +171,13 @@ extern enum processor_type mn10300_processor;\n   , 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 \\\n   }\n \n+/* Note: The definition of CALL_REALLY_USED_REGISTERS is not\n+   redundant.  It is needed when compiling in PIC mode because\n+   the a2 register becomes fixed (and hence must be marked as\n+   call_used) but in order to preserve the ABI it is not marked\n+   as call_really_used.  */\n+#define CALL_REALLY_USED_REGISTERS CALL_USED_REGISTERS\n+\n #define REG_ALLOC_ORDER \\\n   { 0, 1, 4, 5, 2, 3, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9 \\\n   , 42, 43, 44, 45, 46, 47, 48, 49, 34, 35, 36, 37, 38, 39, 40, 41 \\"}]}