{"sha": "836328b2c99f5b8d45dcca5797f162af322e74da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM2MzI4YjJjOTlmNWI4ZDQ1ZGNjYTU3OTdmMTYyYWYzMjJlNzRkYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-24T13:39:26Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-24T13:40:28Z"}, "message": "i386: Add pack/unpack patterns for 64bit vectors [PR89021]\n\n2021-06-24  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/89021\n\t* config/i386/i386-expand.c (ix86_expand_sse_unpack):\n\tHandle V8QI and V4HI modes.\n\t* config/i386/mmx.md (sse4_1_<any_extend:code>v4qiv4hi2):\n\tNew insn pattern.\n\t(sse4_1_<any_extend:code>v4qiv4hi2): Ditto.\n\t(mmxpackmode): New mode attribute.\n\t(vec_pack_trunc_<mmxpackmode:mode>): New expander.\n\t(mmxunpackmode): New mode attribute.\n\t(vec_unpacks_lo_<mmxunpackmode:mode>): New expander.\n\t(vec_unpacks_hi_<mmxunpackmode:mode>): Ditto.\n\t(vec_unpacku_lo_<mmxunpackmode:mode>): Ditto.\n\t(vec_unpacku_hi_<mmxunpackmode:mode>): Ditto.\n\t* config/i386/i386.md (extsuffix): Move from ...\n\t* config/i386/sse.md: ... here.\n\ngcc/testsuite/\n\n\tPR target/89021\n\t* gcc.dg/vect/vect-nb-iter-ub-3.c (dg-additional-options):\n\tAdd --param vect-epilogues-nomask=0.\n\t* gcc.target/i386/pr97249-1.c (foo): Add #pragma GCC unroll\n\tto avoid loop vectorization.\n\t(foo1): Ditto.\n\t(foo2): Ditto.", "tree": {"sha": "267e416f036229044f1207537b90f8ea4d508d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/267e416f036229044f1207537b90f8ea4d508d43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/836328b2c99f5b8d45dcca5797f162af322e74da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/836328b2c99f5b8d45dcca5797f162af322e74da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/836328b2c99f5b8d45dcca5797f162af322e74da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/836328b2c99f5b8d45dcca5797f162af322e74da/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "addd5f0e61f73659c29f47a02e93bfc5e534dbf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/addd5f0e61f73659c29f47a02e93bfc5e534dbf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/addd5f0e61f73659c29f47a02e93bfc5e534dbf6"}], "stats": {"total": 147, "additions": 130, "deletions": 17}, "files": [{"sha": "e9763eb5b3e924d19d92248ac78b22a5d917c828", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=836328b2c99f5b8d45dcca5797f162af322e74da", "patch": "@@ -5161,6 +5161,18 @@ ix86_expand_sse_unpack (rtx dest, rtx src, bool unsigned_p, bool high_p)\n \t  else\n \t    unpack = gen_sse4_1_sign_extendv2siv2di2;\n \t  break;\n+\tcase E_V8QImode:\n+\t  if (unsigned_p)\n+\t    unpack = gen_sse4_1_zero_extendv4qiv4hi2;\n+\t  else\n+\t    unpack = gen_sse4_1_sign_extendv4qiv4hi2;\n+\t  break;\n+\tcase E_V4HImode:\n+\t  if (unsigned_p)\n+\t    unpack = gen_sse4_1_zero_extendv2hiv2si2;\n+\t  else\n+\t    unpack = gen_sse4_1_sign_extendv2hiv2si2;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -5172,10 +5184,24 @@ ix86_expand_sse_unpack (rtx dest, rtx src, bool unsigned_p, bool high_p)\n \t}\n       else if (high_p)\n \t{\n-\t  /* Shift higher 8 bytes to lower 8 bytes.  */\n-\t  tmp = gen_reg_rtx (V1TImode);\n-\t  emit_insn (gen_sse2_lshrv1ti3 (tmp, gen_lowpart (V1TImode, src),\n-\t\t\t\t\t GEN_INT (64)));\n+\t  switch (GET_MODE_SIZE (imode))\n+\t    {\n+\t    case 16:\n+\t      /* Shift higher 8 bytes to lower 8 bytes.  */\n+\t      tmp = gen_reg_rtx (V1TImode);\n+\t      emit_insn (gen_sse2_lshrv1ti3 (tmp, gen_lowpart (V1TImode, src),\n+\t\t\t\t\t     GEN_INT (64)));\n+\t      break;\n+\t    case 8:\n+\t      /* Shift higher 4 bytes to lower 4 bytes.  */\n+\t      tmp = gen_reg_rtx (V1DImode);\n+\t      emit_insn (gen_mmx_lshrv1di3 (tmp, gen_lowpart (V1DImode, src),\n+\t\t\t\t\t    GEN_INT (32)));\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\n \t  tmp = gen_lowpart (imode, tmp);\n \t}\n       else\n@@ -5207,6 +5233,18 @@ ix86_expand_sse_unpack (rtx dest, rtx src, bool unsigned_p, bool high_p)\n \t  else\n \t    unpack = gen_vec_interleave_lowv4si;\n \t  break;\n+\tcase E_V8QImode:\n+\t  if (high_p)\n+\t    unpack = gen_mmx_punpckhbw;\n+\t  else\n+\t    unpack = gen_mmx_punpcklbw;\n+\t  break;\n+\tcase E_V4HImode:\n+\t  if (high_p)\n+\t    unpack = gen_mmx_punpckhwd;\n+\t  else\n+\t    unpack = gen_mmx_punpcklwd;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "9b619e2f78f5f7016efe6ea75744a7e1ba83e969", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=836328b2c99f5b8d45dcca5797f162af322e74da", "patch": "@@ -1000,6 +1000,9 @@\n (define_code_attr trunsuffix\n   [(ss_truncate \"s\") (truncate \"\") (us_truncate \"us\")])\n \n+;; Instruction suffix for SSE sign and zero extensions.\n+(define_code_attr extsuffix [(sign_extend \"sx\") (zero_extend \"zx\")])\n+\n ;; Used in signed and unsigned fix.\n (define_code_iterator any_fix [fix unsigned_fix])\n (define_code_attr fixsuffix [(fix \"\") (unsigned_fix \"u\")])"}, {"sha": "e887f03474d03d6e887fd18da11c0c78048e0575", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=836328b2c99f5b8d45dcca5797f162af322e74da", "patch": "@@ -2639,6 +2639,78 @@\n    (set_attr \"type\" \"mmxcvt,sselog,sselog\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_insn \"sse4_1_<code>v4qiv4hi2\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=Yr,*x,Yw\")\n+\t(any_extend:V4HI\n+\t  (vec_select:V4QI\n+\t    (match_operand:V8QI 1 \"register_operand\" \"Yr,*x,Yw\")\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n+  \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n+  \"%vpmov<extsuffix>bw\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"sse4_1_<code>v2hiv2si2\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(any_extend:V2SI\n+\t  (vec_select:V2HI\n+\t    (match_operand:V4HI 1 \"register_operand\" \"Yr,*x,v\")\n+\t    (parallel [(const_int 0) (const_int 1)]))))]\n+  \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n+  \"%vpmov<extsuffix>wd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+;; Pack/unpack vector modes\n+(define_mode_attr mmxpackmode\n+  [(V4HI \"V8QI\") (V2SI \"V4HI\")])\n+\n+(define_expand \"vec_pack_trunc_<mode>\"\n+  [(match_operand:<mmxpackmode> 0 \"register_operand\")\n+   (match_operand:MMXMODE24 1 \"register_operand\")\n+   (match_operand:MMXMODE24 2 \"register_operand\")]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  rtx op1 = gen_lowpart (<mmxpackmode>mode, operands[1]);\n+  rtx op2 = gen_lowpart (<mmxpackmode>mode, operands[2]);\n+  ix86_expand_vec_extract_even_odd (operands[0], op1, op2, 0);\n+  DONE;\n+})\n+\n+(define_mode_attr mmxunpackmode\n+  [(V8QI \"V4HI\") (V4HI \"V2SI\")])\n+\n+(define_expand \"vec_unpacks_lo_<mode>\"\n+  [(match_operand:<mmxunpackmode> 0 \"register_operand\")\n+   (match_operand:MMXMODE12 1 \"register_operand\")]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"ix86_expand_sse_unpack (operands[0], operands[1], false, false); DONE;\")\n+\n+(define_expand \"vec_unpacks_hi_<mode>\"\n+  [(match_operand:<mmxunpackmode> 0 \"register_operand\")\n+   (match_operand:MMXMODE12 1 \"register_operand\")]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"ix86_expand_sse_unpack (operands[0], operands[1], false, true); DONE;\")\n+\n+(define_expand \"vec_unpacku_lo_<mode>\"\n+  [(match_operand:<mmxunpackmode> 0 \"register_operand\")\n+   (match_operand:MMXMODE12 1 \"register_operand\")]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"ix86_expand_sse_unpack (operands[0], operands[1], true, false); DONE;\")\n+\n+(define_expand \"vec_unpacku_hi_<mode>\"\n+  [(match_operand:<mmxunpackmode> 0 \"register_operand\")\n+   (match_operand:MMXMODE12 1 \"register_operand\")]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"ix86_expand_sse_unpack (operands[0], operands[1], true, true); DONE;\")\n+\n (define_insn \"*mmx_pinsrd\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=x,Yv\")\n         (vec_merge:V2SI"}, {"sha": "e4f01e64bc161747258749dd896e3e652a391f09", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=836328b2c99f5b8d45dcca5797f162af322e74da", "patch": "@@ -976,9 +976,6 @@\n  [(V8SI \"si\") (V8SF \"ps\") (V4DF \"pd\")\n   (V16SI \"si\") (V16SF \"ps\") (V8DF \"pd\")])\n \n-;; Instruction suffix for sign and zero extensions.\n-(define_code_attr extsuffix [(sign_extend \"sx\") (zero_extend \"zx\")])\n-\n ;; i128 for integer vectors and TARGET_AVX2, f128 otherwise.\n ;; i64x4 or f64x4 for 512bit modes.\n (define_mode_attr i128"}, {"sha": "16665265c4062c0a3acb31e01a1473dea3125685", "filename": "gcc/testsuite/gcc.dg/vect/vect-nb-iter-ub-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-3.c?ref=836328b2c99f5b8d45dcca5797f162af322e74da", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-additional-options \"-fdump-tree-cunroll-details\" } */\n+/* { dg-additional-options \"-fdump-tree-cunroll-details --param vect-epilogues-nomask=0\" } */\n \n #include \"tree-vect.h\"\n "}, {"sha": "e7d1d74a208ac2ab928853ee118a429c151fd856", "filename": "gcc/testsuite/gcc.target/i386/pr97249-1.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97249-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836328b2c99f5b8d45dcca5797f162af322e74da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97249-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97249-1.c?ref=836328b2c99f5b8d45dcca5797f162af322e74da", "patch": "@@ -8,23 +8,26 @@\n void\n foo (unsigned char* p1, unsigned char* p2, short* __restrict p3)\n {\n-    for (int i = 0 ; i != 8; i++)\n-     p3[i] = p1[i] + p2[i];\n-     return;\n+  /* Avoid loop vectorization.  */\n+#pragma GCC unroll 8\n+  for (int i = 0 ; i != 8; i++)\n+    p3[i] = p1[i] + p2[i];\n }\n \n void\n foo1 (unsigned short* p1, unsigned short* p2, int* __restrict p3)\n {\n-    for (int i = 0 ; i != 4; i++)\n-     p3[i] = p1[i] + p2[i];\n-     return;\n+  /* Avoid loop vectorization.  */\n+#pragma GCC unroll 4\n+  for (int i = 0 ; i != 4; i++)\n+    p3[i] = p1[i] + p2[i];\n }\n \n void\n foo2 (unsigned int* p1, unsigned int* p2, long long* __restrict p3)\n {\n-    for (int i = 0 ; i != 2; i++)\n-      p3[i] = (long long)p1[i] + (long long)p2[i];\n-     return;\n+  /* Avoid loop vectorization.  */\n+#pragma GCC unroll 2\n+  for (int i = 0 ; i != 2; i++)\n+    p3[i] = (long long)p1[i] + (long long)p2[i];\n }"}]}