{"sha": "8ad68a6d87ff1978a7ef9228e79795711aed4d61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFkNjhhNmQ4N2ZmMTk3OGE3ZWY5MjI4ZTc5Nzk1NzExYWVkNGQ2MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-08T12:35:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-08T12:35:22Z"}, "message": "re PR rtl-optimization/89865 (FAIL: gcc.target/i386/pr49095.c scan-assembler-times \\\\\\\\), % 45)\n\n\tPR rtl-optimization/89865\n\t* config/i386/i386.md\n\t(SWI12 peephole for mem {+,-,&,|,^}= x; mem != 0): Fix up operand\n\tnumbers not to clash with the additional operands[4].\n\t(peepholes for mem {+,-,&,|,^}= x; mem != 0): New peephole2s\n\twith extra register copy in the middle.\n\n\t* gcc.target/i386/pr49095.c: Adjust number of expected RMW spots\n\ton ia32.\n\nFrom-SVN: r270205", "tree": {"sha": "605a289ffe9ec300f006f1f76825bb9b0aabf980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/605a289ffe9ec300f006f1f76825bb9b0aabf980"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ad68a6d87ff1978a7ef9228e79795711aed4d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad68a6d87ff1978a7ef9228e79795711aed4d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad68a6d87ff1978a7ef9228e79795711aed4d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad68a6d87ff1978a7ef9228e79795711aed4d61/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99603e904420a449d2e9e674cc3d696b9695eb69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99603e904420a449d2e9e674cc3d696b9695eb69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99603e904420a449d2e9e674cc3d696b9695eb69"}], "stats": {"total": 142, "additions": 135, "deletions": 7}, "files": [{"sha": "5ee20a9bbaa5d5a0e5190968005ed39c263be712", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad68a6d87ff1978a7ef9228e79795711aed4d61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad68a6d87ff1978a7ef9228e79795711aed4d61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ad68a6d87ff1978a7ef9228e79795711aed4d61", "patch": "@@ -1,3 +1,12 @@\n+2019-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/89865\n+\t* config/i386/i386.md\n+\t(SWI12 peephole for mem {+,-,&,|,^}= x; mem != 0): Fix up operand\n+\tnumbers not to clash with the additional operands[4].\n+\t(peepholes for mem {+,-,&,|,^}= x; mem != 0): New peephole2s\n+\twith extra register copy in the middle.\n+\n 2019-04-08  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/89961"}, {"sha": "b797e406a9202b670d958562f35ef0d6d291fb69", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 119, "deletions": 6, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad68a6d87ff1978a7ef9228e79795711aed4d61/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad68a6d87ff1978a7ef9228e79795711aed4d61/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8ad68a6d87ff1978a7ef9228e79795711aed4d61", "patch": "@@ -18804,17 +18804,130 @@\n \t\t\t (GET_CODE (operands[3]) == PLUS\n \t\t\t  || GET_CODE (operands[3]) == MINUS)\n \t\t\t ? CCGOCmode : CCNOmode)\"\n-  [(parallel [(set (match_dup 4) (match_dup 6))\n-\t      (set (match_dup 1) (match_dup 5))])]\n+  [(parallel [(set (match_dup 5) (match_dup 7))\n+\t      (set (match_dup 1) (match_dup 6))])]\n {\n-  operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n-  operands[5]\n+  operands[5] = SET_DEST (PATTERN (peep2_next_insn (3)));\n+  operands[6]\n     = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n \t\t      copy_rtx (operands[1]),\n \t\t      gen_lowpart (<MODE>mode, operands[2]));\n+  operands[7]\n+    = gen_rtx_COMPARE (GET_MODE (operands[5]),\n+\t\t       copy_rtx (operands[6]),\n+\t\t       const0_rtx);\n+})\n+\n+;; peephole2 comes before regcprop, so deal also with a case that\n+;; would be cleaned up by regcprop.\n+(define_peephole2\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(match_operand:SWI 1 \"memory_operand\"))\n+   (parallel [(set (match_dup 0)\n+\t\t   (match_operator:SWI 3 \"plusminuslogic_operator\"\n+\t\t     [(match_dup 0)\n+\t\t      (match_operand:SWI 2 \"<nonmemory_operand>\")]))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (match_operand:SWI 4 \"register_operand\") (match_dup 0))\n+   (set (match_dup 1) (match_dup 4))\n+   (set (reg FLAGS_REG) (compare (match_dup 4) (const_int 0)))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && peep2_reg_dead_p (3, operands[0])\n+   && peep2_reg_dead_p (5, operands[4])\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\n+   && !reg_overlap_mentioned_p (operands[4], operands[1])\n+   && (<MODE>mode != QImode\n+       || immediate_operand (operands[2], QImode)\n+       || any_QIreg_operand (operands[2], QImode))\n+   && ix86_match_ccmode (peep2_next_insn (4),\n+\t\t\t (GET_CODE (operands[3]) == PLUS\n+\t\t\t  || GET_CODE (operands[3]) == MINUS)\n+\t\t\t ? CCGOCmode : CCNOmode)\"\n+  [(parallel [(set (match_dup 5) (match_dup 7))\n+\t      (set (match_dup 1) (match_dup 6))])]\n+{\n+  operands[5] = SET_DEST (PATTERN (peep2_next_insn (4)));\n   operands[6]\n-    = gen_rtx_COMPARE (GET_MODE (operands[4]),\n-\t\t       copy_rtx (operands[5]),\n+    = gen_rtx_fmt_ee (GET_CODE (operands[3]), GET_MODE (operands[3]),\n+\t\t      copy_rtx (operands[1]),\n+\t\t      operands[2]);\n+  operands[7]\n+    = gen_rtx_COMPARE (GET_MODE (operands[5]),\n+\t\t       copy_rtx (operands[6]),\n+\t\t       const0_rtx);\n+})\n+\n+(define_peephole2\n+  [(set (match_operand:SWI12 0 \"register_operand\")\n+\t(match_operand:SWI12 1 \"memory_operand\"))\n+   (parallel [(set (match_operand:SI 4 \"register_operand\")\n+\t\t   (match_operator:SI 3 \"plusminuslogic_operator\"\n+\t\t     [(match_dup 4)\n+\t\t      (match_operand:SI 2 \"nonmemory_operand\")]))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (match_operand:SWI12 5 \"register_operand\") (match_dup 0))\n+   (set (match_dup 1) (match_dup 5))\n+   (set (reg FLAGS_REG) (compare (match_dup 5) (const_int 0)))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && REGNO (operands[0]) == REGNO (operands[4])\n+   && peep2_reg_dead_p (3, operands[0])\n+   && peep2_reg_dead_p (5, operands[5])\n+   && (<MODE>mode != QImode\n+       || immediate_operand (operands[2], SImode)\n+       || any_QIreg_operand (operands[2], SImode))\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\n+   && !reg_overlap_mentioned_p (operands[5], operands[1])\n+   && ix86_match_ccmode (peep2_next_insn (4),\n+\t\t\t (GET_CODE (operands[3]) == PLUS\n+\t\t\t  || GET_CODE (operands[3]) == MINUS)\n+\t\t\t ? CCGOCmode : CCNOmode)\"\n+  [(parallel [(set (match_dup 6) (match_dup 8))\n+\t      (set (match_dup 1) (match_dup 7))])]\n+{\n+  operands[6] = SET_DEST (PATTERN (peep2_next_insn (4)));\n+  operands[7]\n+    = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n+\t\t      copy_rtx (operands[1]),\n+\t\t      gen_lowpart (<MODE>mode, operands[2]));\n+  operands[8]\n+    = gen_rtx_COMPARE (GET_MODE (operands[6]),\n+\t\t       copy_rtx (operands[7]),\n+\t\t       const0_rtx);\n+})\n+\n+;; Likewise for cmpelim optimized pattern.\n+(define_peephole2\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(match_operand:SWI 1 \"memory_operand\"))\n+   (parallel [(set (reg FLAGS_REG)\n+\t\t   (compare (match_operator:SWI 3 \"plusminuslogic_operator\"\n+\t\t\t      [(match_dup 0)\n+\t\t\t       (match_operand:SWI 2 \"<nonmemory_operand>\")])\n+\t\t\t    (const_int 0)))\n+\t      (set (match_dup 0) (match_dup 3))])\n+   (set (match_operand:SWI 4 \"register_operand\") (match_dup 0))\n+   (set (match_dup 1) (match_dup 4))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && peep2_reg_dead_p (3, operands[0])\n+   && peep2_reg_dead_p (4, operands[4])\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\n+   && !reg_overlap_mentioned_p (operands[4], operands[1])\n+   && ix86_match_ccmode (peep2_next_insn (1),\n+\t\t\t (GET_CODE (operands[3]) == PLUS\n+\t\t\t  || GET_CODE (operands[3]) == MINUS)\n+\t\t\t ? CCGOCmode : CCNOmode)\"\n+  [(parallel [(set (match_dup 5) (match_dup 7))\n+\t      (set (match_dup 1) (match_dup 6))])]\n+{\n+  operands[5] = SET_DEST (XVECEXP (PATTERN (peep2_next_insn (1)), 0, 0));\n+  operands[6]\n+    = gen_rtx_fmt_ee (GET_CODE (operands[3]), GET_MODE (operands[3]),\n+\t\t      copy_rtx (operands[1]), operands[2]);\n+  operands[7]\n+    = gen_rtx_COMPARE (GET_MODE (operands[5]), copy_rtx (operands[6]),\n \t\t       const0_rtx);\n })\n "}, {"sha": "087c58b2e4f78858bcf5dab58d10bacb7e05db54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad68a6d87ff1978a7ef9228e79795711aed4d61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad68a6d87ff1978a7ef9228e79795711aed4d61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ad68a6d87ff1978a7ef9228e79795711aed4d61", "patch": "@@ -1,3 +1,9 @@\n+2019-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/89865\n+\t* gcc.target/i386/pr49095.c: Adjust number of expected RMW spots\n+\ton ia32.\n+\n 2019-04-01  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \tPR tree-optimization/89725"}, {"sha": "3ae14e3d4e0ef9345ba61818a7f26f3cd233c99b", "filename": "gcc/testsuite/gcc.target/i386/pr49095.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad68a6d87ff1978a7ef9228e79795711aed4d61/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad68a6d87ff1978a7ef9228e79795711aed4d61/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c?ref=8ad68a6d87ff1978a7ef9228e79795711aed4d61", "patch": "@@ -73,5 +73,5 @@ G (long)\n /* { dg-final { scan-assembler-not \"test\\[lq\\]\" } } */\n /* The {f,h}{char,short,int,long}xor functions aren't optimized into\n    a RMW instruction, so need load, modify and store.  FIXME eventually.  */\n-/* { dg-final { scan-assembler-times \"\\\\(%eax\\\\), %\" 12 { target { ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\\\(%eax\\\\), %\" 8 { target { ia32 } } } } */\n /* { dg-final { scan-assembler-times \"\\\\(%\\[re\\]di\\\\), %\" 8 { target { ! ia32 } } } } */"}]}