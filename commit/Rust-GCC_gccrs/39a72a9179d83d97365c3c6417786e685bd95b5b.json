{"sha": "39a72a9179d83d97365c3c6417786e685bd95b5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhNzJhOTE3OWQ4M2Q5NzM2NWMzYzY0MTc3ODZlNjg1YmQ5NWI1Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-07-18T17:42:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-07-18T17:42:32Z"}, "message": "ctype_members.cc (do_is(mask, wchar_t)): Speed-up for the common case of mask == ctype_base::space...\n\n2005-07-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* config/locale/gnu/ctype_members.cc (do_is(mask, wchar_t)):\n\tSpeed-up for the common case of mask == ctype_base::space;\n\totherwise, exit the loop earlier if the mask is one of the\n\telementary ones.\n\nFrom-SVN: r102137", "tree": {"sha": "d3138d3871b9a0e258c85e2c7513f5adcdaafdd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3138d3871b9a0e258c85e2c7513f5adcdaafdd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39a72a9179d83d97365c3c6417786e685bd95b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a72a9179d83d97365c3c6417786e685bd95b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a72a9179d83d97365c3c6417786e685bd95b5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a72a9179d83d97365c3c6417786e685bd95b5b/comments", "author": null, "committer": null, "parents": [{"sha": "eba839f9719e66195f75207b377593c025c71b82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba839f9719e66195f75207b377593c025c71b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eba839f9719e66195f75207b377593c025c71b82"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "4f7b8db3831b087b09769f72e9bea13dd718fe39", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a72a9179d83d97365c3c6417786e685bd95b5b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a72a9179d83d97365c3c6417786e685bd95b5b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=39a72a9179d83d97365c3c6417786e685bd95b5b", "patch": "@@ -1,3 +1,10 @@\n+2005-07-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* config/locale/gnu/ctype_members.cc (do_is(mask, wchar_t)):\n+\tSpeed-up for the common case of mask == ctype_base::space;\n+\totherwise, exit the loop earlier if the mask is one of the\n+\telementary ones.\n+\n 2005-07-14  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/21193 (float, double, long double)"}, {"sha": "a006929ac8e54de474a0bb8136b474a97444a5aa", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a72a9179d83d97365c3c6417786e685bd95b5b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a72a9179d83d97365c3c6417786e685bd95b5b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=39a72a9179d83d97365c3c6417786e685bd95b5b", "patch": "@@ -134,20 +134,34 @@ namespace std\n   ctype<wchar_t>::\n   do_is(mask __m, wchar_t __c) const\n   { \n-    // Highest bitmask in ctype_base == 10, but extra in \"C\"\n-    // library for blank.\n+    // The case of __m == ctype_base::space is particularly important,\n+    // due to its use in many istream functions.  Therefore we deal with\n+    // it first, exploiting the knowledge that on GNU systems _M_bit[5]\n+    // is the mask corresponding to ctype_base::space.  NB: an encoding\n+    // change would not affect correctness!\n     bool __ret = false;\n-    const size_t __bitmasksize = 11; \n-    for (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n-      if (__m & _M_bit[__bitcur]\n-\t  && __iswctype_l(__c, _M_wmask[__bitcur], _M_c_locale_ctype))\n-\t{\n-\t  __ret = true;\n-\t  break;\n-\t}\n+    if (__m == _M_bit[5])\n+      __ret = __iswctype_l(__c, _M_wmask[5], _M_c_locale_ctype);\n+    else\n+      {\n+\t// Highest bitmask in ctype_base == 10, but extra in \"C\"\n+\t// library for blank.\n+\tconst size_t __bitmasksize = 11;\n+\tfor (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n+\t  if (__m & _M_bit[__bitcur])\n+\t    {\n+\t      if (__iswctype_l(__c, _M_wmask[__bitcur], _M_c_locale_ctype))\n+\t\t{\n+\t\t  __ret = true;\n+\t\t  break;\n+\t\t}\n+\t      else if (__m == _M_bit[__bitcur])\n+\t\tbreak;\n+\t    }\n+      }\n     return __ret;    \n   }\n-  \n+\n   const wchar_t* \n   ctype<wchar_t>::\n   do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __vec) const"}]}