{"sha": "defe97ea4dfd5d0e77ec2a8401c987772d96884f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmZTk3ZWE0ZGZkNWQwZTc3ZWMyYTg0MDFjOTg3NzcyZDk2ODg0Zg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-26T21:15:53Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-27T11:32:25Z"}, "message": "Add mappings for external items", "tree": {"sha": "b64c8b267deecaf1169138d332f03136aa9044b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b64c8b267deecaf1169138d332f03136aa9044b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/defe97ea4dfd5d0e77ec2a8401c987772d96884f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defe97ea4dfd5d0e77ec2a8401c987772d96884f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defe97ea4dfd5d0e77ec2a8401c987772d96884f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defe97ea4dfd5d0e77ec2a8401c987772d96884f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3bf1f293d9c6cab7ccebdaa96433208f2c79057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bf1f293d9c6cab7ccebdaa96433208f2c79057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3bf1f293d9c6cab7ccebdaa96433208f2c79057"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "4ea0019d71952105d10aad4a1e34acea84578bc9", "filename": "gcc/rust/hir/rust-ast-lower-extern.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defe97ea4dfd5d0e77ec2a8401c987772d96884f/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defe97ea4dfd5d0e77ec2a8401c987772d96884f/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h?ref=defe97ea4dfd5d0e77ec2a8401c987772d96884f", "patch": "@@ -47,8 +47,6 @@ class ASTLoweringExternItem : public ASTLoweringBase\n     Analysis::NodeMapping mapping (crate_num, item.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       item.get_locus ());\n \n     HIR::ExternalStaticItem *static_item\n       = new HIR::ExternalStaticItem (mapping, item.get_identifier (),\n@@ -58,6 +56,11 @@ class ASTLoweringExternItem : public ASTLoweringBase\n \t\t\t\t     item.get_locus ());\n \n     translated = static_item;\n+\n+    mappings->insert_hir_extern_item (crate_num, mapping.get_hirid (),\n+\t\t\t\t      translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       item.get_locus ());\n   }\n \n   void visit (AST::ExternalFunctionItem &function) override\n@@ -97,8 +100,6 @@ class ASTLoweringExternItem : public ASTLoweringBase\n     Analysis::NodeMapping mapping (crate_num, function.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       function.get_locus ());\n \n     HIR::ExternalFunctionItem *function_item = new HIR::ExternalFunctionItem (\n       mapping, function.get_identifier (), std::move (generic_params),\n@@ -107,6 +108,11 @@ class ASTLoweringExternItem : public ASTLoweringBase\n       function.get_outer_attrs (), function.get_locus ());\n \n     translated = function_item;\n+\n+    mappings->insert_hir_extern_item (crate_num, mapping.get_hirid (),\n+\t\t\t\t      translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       function.get_locus ());\n   }\n \n private:"}, {"sha": "80ca29859fba2cf5aeded2a27da643be7d7ccfa8", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defe97ea4dfd5d0e77ec2a8401c987772d96884f/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defe97ea4dfd5d0e77ec2a8401c987772d96884f/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=defe97ea4dfd5d0e77ec2a8401c987772d96884f", "patch": "@@ -571,10 +571,6 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       extern_block.get_locus ());\n-\n     HIR::ExternBlock *hir_extern_block\n       = new HIR::ExternBlock (mapping, extern_block.get_abi (),\n \t\t\t      std::move (extern_items), std::move (vis),\n@@ -583,6 +579,12 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t      extern_block.get_locus ());\n \n     translated = hir_extern_block;\n+\n+    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n+    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       extern_block.get_locus ());\n   }\n \n private:"}, {"sha": "7d976c5c991c69e0de6043d54d4c69435979e42a", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defe97ea4dfd5d0e77ec2a8401c987772d96884f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defe97ea4dfd5d0e77ec2a8401c987772d96884f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=defe97ea4dfd5d0e77ec2a8401c987772d96884f", "patch": "@@ -2713,6 +2713,8 @@ class ExternalItem\n \n   Analysis::NodeMapping get_mappings () const { return mappings; }\n \n+  Identifier get_item_name () const { return item_name; }\n+\n protected:\n   ExternalItem (Analysis::NodeMapping mappings, Identifier item_name,\n \t\tVisibility vis, AST::AttrVec outer_attrs, Location locus)\n@@ -2746,9 +2748,6 @@ class ExternalItem\n \n   // Clone function implementation as pure virtual method\n   virtual ExternalItem *clone_external_item_impl () const = 0;\n-\n-  // possibly make this public if required\n-  std::string get_item_name () const { return item_name; }\n };\n \n // A static item used in an extern block\n@@ -2790,6 +2789,8 @@ class ExternalStaticItem : public ExternalItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<Type> &get_item_type () { return item_type; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2840,6 +2841,12 @@ struct NamedFunctionParam\n   NamedFunctionParam &operator= (NamedFunctionParam &&other) = default;\n \n   std::string as_string () const;\n+\n+  Identifier get_param_name () const { return name; }\n+\n+  std::unique_ptr<Type> &get_type () { return param_type; }\n+\n+  Analysis::NodeMapping get_mappings () const { return mappings; }\n };\n \n // A function item used in an extern block\n@@ -2920,6 +2927,20 @@ class ExternalFunctionItem : public ExternalItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  {\n+    return generic_params;\n+  }\n+\n+  std::unique_ptr<Type> &get_return_type () { return return_type; }\n+\n+  std::vector<NamedFunctionParam> &get_function_params ()\n+  {\n+    return function_params;\n+  }\n+\n+  bool is_variadic () const { return has_variadics; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2999,6 +3020,11 @@ class ExternBlock : public VisItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::vector<std::unique_ptr<ExternalItem> > &get_extern_items ()\n+  {\n+    return extern_items;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "0dcb2e9df00fcc7209698b5dd265b364de811800", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defe97ea4dfd5d0e77ec2a8401c987772d96884f/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defe97ea4dfd5d0e77ec2a8401c987772d96884f/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=defe97ea4dfd5d0e77ec2a8401c987772d96884f", "patch": "@@ -283,6 +283,30 @@ Mappings::lookup_hir_trait_item (CrateNum crateNum, HirId id)\n   return iy->second;\n }\n \n+void\n+Mappings::insert_hir_extern_item (CrateNum crateNum, HirId id,\n+\t\t\t\t  HIR::ExternalItem *item)\n+{\n+  rust_assert (lookup_hir_extern_item (crateNum, id) == nullptr);\n+\n+  hirExternItemMappings[crateNum][id] = item;\n+  nodeIdToHirMappings[crateNum][item->get_mappings ().get_nodeid ()] = id;\n+}\n+\n+HIR::ExternalItem *\n+Mappings::lookup_hir_extern_item (CrateNum crateNum, HirId id)\n+{\n+  auto it = hirExternItemMappings.find (crateNum);\n+  if (it == hirExternItemMappings.end ())\n+    return nullptr;\n+\n+  auto iy = it->second.find (id);\n+  if (iy == it->second.end ())\n+    return nullptr;\n+\n+  return iy->second;\n+}\n+\n void\n Mappings::insert_hir_impl_block (CrateNum crateNum, HirId id,\n \t\t\t\t HIR::ImplBlock *item)"}, {"sha": "7e5449c701400e4e1aa4cb20b84fa5c4bb8af690", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defe97ea4dfd5d0e77ec2a8401c987772d96884f/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defe97ea4dfd5d0e77ec2a8401c987772d96884f/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=defe97ea4dfd5d0e77ec2a8401c987772d96884f", "patch": "@@ -132,6 +132,10 @@ class Mappings\n \t\t\t      HIR::TraitItem *item);\n   HIR::TraitItem *lookup_hir_trait_item (CrateNum crateNum, HirId id);\n \n+  void insert_hir_extern_item (CrateNum crateNum, HirId id,\n+\t\t\t       HIR::ExternalItem *item);\n+  HIR::ExternalItem *lookup_hir_extern_item (CrateNum crateNum, HirId id);\n+\n   void insert_hir_impl_block (CrateNum crateNum, HirId id,\n \t\t\t      HIR::ImplBlock *item);\n   HIR::ImplBlock *lookup_hir_impl_block (CrateNum crateNum, HirId id);\n@@ -239,6 +243,8 @@ class Mappings\n   std::map<HirId, HIR::ImplBlock *> hirImplItemsToImplMappings;\n   std::map<CrateNum, std::map<HirId, HIR::ImplBlock *> > hirImplBlockMappings;\n   std::map<CrateNum, std::map<HirId, HIR::TraitItem *> > hirTraitItemMappings;\n+  std::map<CrateNum, std::map<HirId, HIR::ExternalItem *> >\n+    hirExternItemMappings;\n \n   // location info\n   std::map<CrateNum, std::map<NodeId, Location> > locations;"}]}