{"sha": "0058a283e1bfe9130f04a0aef76b9ab863a6b22e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA1OGEyODNlMWJmZTkxMzBmMDRhMGFlZjc2YjlhYjg2M2E2YjIyZQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2019-02-04T15:00:41Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2019-02-04T15:00:41Z"}, "message": "doc: showcase a \"union of vectors\" pattern (PR 88698)\n\n\tPR c/88698\n\t* doc/extend.texi (Vector Extensions): Add an example of using vector\n\ttypes together with x86 intrinsics.\n\nFrom-SVN: r268522", "tree": {"sha": "b878f291d10e9abdee64994807428da42c06e377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b878f291d10e9abdee64994807428da42c06e377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0058a283e1bfe9130f04a0aef76b9ab863a6b22e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0058a283e1bfe9130f04a0aef76b9ab863a6b22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0058a283e1bfe9130f04a0aef76b9ab863a6b22e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0058a283e1bfe9130f04a0aef76b9ab863a6b22e/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a693d9b3d69d905d4270c9d1b9fe0bc8d19a932e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a693d9b3d69d905d4270c9d1b9fe0bc8d19a932e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a693d9b3d69d905d4270c9d1b9fe0bc8d19a932e"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "21d80ad5f9d8caa4e056697608c75ba9c428da34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0058a283e1bfe9130f04a0aef76b9ab863a6b22e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0058a283e1bfe9130f04a0aef76b9ab863a6b22e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0058a283e1bfe9130f04a0aef76b9ab863a6b22e", "patch": "@@ -1,3 +1,9 @@\n+2019-02-04  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR c/88698\n+\t* doc/extend.texi (Vector Extensions): Add an example of using vector\n+\ttypes together with x86 intrinsics.\n+\n 2019-02-04  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_indirect_call_template_1): Increase"}, {"sha": "815788c40abe1c142331bc7dc545000c09ca0365", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0058a283e1bfe9130f04a0aef76b9ab863a6b22e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0058a283e1bfe9130f04a0aef76b9ab863a6b22e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0058a283e1bfe9130f04a0aef76b9ab863a6b22e", "patch": "@@ -11054,6 +11054,47 @@ v4si g = __builtin_convertvector (f, v4si); /* g is @{1,-2,3,7@} */\n v4si h = __builtin_convertvector (c, v4si); /* h is @{1,5,0,10@} */\n @end smallexample\n \n+@cindex vector types, using with x86 intrinsics\n+Sometimes it is desirable to write code using a mix of generic vector\n+operations (for clarity) and machine-specific vector intrinsics (to\n+access vector instructions that are not exposed via generic built-ins).\n+On x86, intrinsic functions for integer vectors typically use the same\n+vector type @code{__m128i} irrespective of how they interpret the vector,\n+making it necessary to cast their arguments and return values from/to\n+other vector types.  In C, you can make use of a @code{union} type:\n+@c In C++ such type punning via a union is not allowed by the language\n+@smallexample\n+#include <immintrin.h>\n+\n+typedef unsigned char u8x16 __attribute__ ((vector_size (16)));\n+typedef unsigned int  u32x4 __attribute__ ((vector_size (16)));\n+\n+typedef union @{\n+        __m128i mm;\n+        u8x16   u8;\n+        u32x4   u32;\n+@} v128;\n+@end smallexample\n+\n+@noindent\n+for variables that can be used with both built-in operators and x86\n+intrinsics:\n+\n+@smallexample\n+v128 x, y = @{ 0 @};\n+memcpy (&x, ptr, sizeof x);\n+y.u8  += 0x80;\n+x.mm  = _mm_adds_epu8 (x.mm, y.mm);\n+x.u32 &= 0xffffff;\n+\n+/* Instead of a variable, a compound literal may be used to pass the\n+   return value of an intrinsic call to a function expecting the union: */\n+v128 foo (v128);\n+x = foo ((v128) @{_mm_adds_epu8 (x.mm, y.mm)@});\n+@c This could be done implicitly with __attribute__((transparent_union)),\n+@c but GCC does not accept it for unions of vector types (PR 88955).\n+@end smallexample\n+\n @node Offsetof\n @section Support for @code{offsetof}\n @findex __builtin_offsetof"}]}