{"sha": "3115f94f7fe0388f026837b36d165b026032093e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzExNWY5NGY3ZmUwMzg4ZjAyNjgzN2IzNmQxNjViMDI2MDMyMDkzZQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2016-11-21T16:09:47Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2016-11-21T16:09:47Z"}, "message": "Don't define libstdc++-internal macros in Solaris 10+ <math.h>\n\n\tlibstdc++-v3:\n\t* acinclude.m4 (GLIBCXX_CHECK_MATH11_PROTO): Update comments.\n\t(__CORRECT_ISO_CPP11_MATH_H_PROTO): Rename to ...\n\t(__CORRECT_ISO_CPP11_MATH_H_PROTO_FP): ... this.\n\tAdd test for C++11 <math.h> integral overloads.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\n\t* include/c_global/cmath [__cplusplus >= 201103L]: Reflect\n\t__CORRECT_ISO_CPP11_MATH_H_PROTO to\n\t__CORRECT_ISO_CPP11_MATH_H_PROTO_FP rename.\n\t* include/c_global/cmath [_GLIBCXX_USE_C99_MATH &&\n\t!_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC && __cplusplus >= 201103L]\n\t(std::fpclassify): Wrap in !__CORRECT_ISO_CPP11_MATH_H_PROTO_INT.\n\t(std::isfinite): Likewise.\n\t(std::isinf): Likewise.\n\t(std::isnan): Likewise.\n\t(std::isnormal): Likewise.\n\t(std::signbit): Likewise.\n\t(std::isgreater): Likewise.\n\t(std::isgreaterequal): Likewise.\n\t(std::isless): Likewise.\n\t(std::islessequal): Likewise.\n\t(std::islessgreater): Likewise.\n\t(std::isunordered): Likewise.\n\t[__cplusplus >= 201103L && _GLIBCXX_USE_C99_MATH_TR1]\n\t(std::acosh): Likewise.\n\t(std::asinh): Likewise.\n\t(std::atanh): Likewise.\n\t(std::cbrt): Likewise.\n\t(std::copysign): Likewise.\n\t(std::erf): Likewise.\n\t(std::erfc): Likewise.\n\t(std::exp2): Likewise.\n\t(std::expm1): Likewise.\n\t(std::fdim): Likewise.\n\t(std::fma): Likewise.\n\t(std::fmax): Likewise.\n\t(std::fmin): Likewise.\n\t(std::hypot): Likewise.\n\t(std::ilogb): Likewise.\n\t(std::lgamma): Likewise.\n\t(std::llrint): Likewise.\n\t(std::llround): Likewise.\n\t(std::log1p): Likewise.\n\t(std::log2): Likewise.\n\t(std::logb): Likewise.\n\t(std::lrint): Likewise.\n\t(std::lround): Likewise.\n\t(std::nearbyint): Likewise.\n\t(std::nextafter): Likewise.\n\t(std::nexttoward): Likewise.\n\t(std::remainder): Likewise.\n\t(std::remquo): Likewise.\n\t(std::rint): Likewise.\n\t(std::round): Likewise.\n\t(std::scalbln): Likewise.\n\t(std::scalbn): Likewise.\n\t(std::tgamma): Likewise.\n\t(std::trunc): Likewise.\n\t* include/tr1/cmath [_GLIBCXX_USE_C99_MATH_TR1 && __cplusplus >=\n\t201103L]: Reflect __CORRECT_ISO_CPP11_MATH_H_PROTO to\n\t__CORRECT_ISO_CPP11_MATH_H_PROTO_FP rename.\n\n\tfixincludes:\n\t* inclhack.def (solaris_math_12): New fix.\n\t(hpux11_fabsf): Replace bypass by *-hp-hpux11* mach selector.\n\t* fixincl.x: Regenerate.\n\t* tests/base/math.h [SOLARIS_MATH_12_CHECK]: New test.\n\nFrom-SVN: r242671", "tree": {"sha": "8f502695fd5b7d4aade9b6b924f17b355a3f0403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f502695fd5b7d4aade9b6b924f17b355a3f0403"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3115f94f7fe0388f026837b36d165b026032093e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3115f94f7fe0388f026837b36d165b026032093e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3115f94f7fe0388f026837b36d165b026032093e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3115f94f7fe0388f026837b36d165b026032093e/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fce0013981ae41c0b44baa4cd59904ff5762bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fce0013981ae41c0b44baa4cd59904ff5762bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fce0013981ae41c0b44baa4cd59904ff5762bfc"}], "stats": {"total": 588, "additions": 466, "deletions": 122}, "files": [{"sha": "d447171a8dac9836808c112706758f6e036f7f17", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115f94f7fe0388f026837b36d165b026032093e/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115f94f7fe0388f026837b36d165b026032093e/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=3115f94f7fe0388f026837b36d165b026032093e", "patch": "@@ -1,3 +1,10 @@\n+2016-11-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* inclhack.def (solaris_math_12): New fix.\n+\t(hpux11_fabsf): Replace bypass by *-hp-hpux11* mach selector.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/math.h [SOLARIS_MATH_12_CHECK]: New test.\n+\n 2016-11-20  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR sanitizer/78267"}, {"sha": "b0eeef9dfdf1387e5dd0ba39754d30e758b99621", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115f94f7fe0388f026837b36d165b026032093e/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115f94f7fe0388f026837b36d165b026032093e/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=3115f94f7fe0388f026837b36d165b026032093e", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  November 20, 2016 at 11:44:36 AM by AutoGen 5.16.2\n+ * It has been AutoGen-ed  November 20, 2016 at 12:02:46 PM by AutoGen 5.16.2\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Nov 20 11:44:37 MET 2016\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Nov 20 12:02:47 MET 2016\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 241 fixup descriptions.\n+ * This file contains 242 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4507,23 +4507,18 @@ tSCC zHpux11_FabsfList[] =\n /*\n  *  Machine/OS name selection pattern\n  */\n-#define apzHpux11_FabsfMachs (const char**)NULL\n+tSCC* apzHpux11_FabsfMachs[] = {\n+        \"*-hp-hpux11*\",\n+        (const char*)NULL };\n \n /*\n  *  content selection pattern - do fix if pattern found\n  */\n tSCC zHpux11_FabsfSelect0[] =\n        \"^[ \\t]*#[ \\t]*define[ \\t]+fabsf\\\\(.*\";\n \n-/*\n- *  content bypass pattern - skip fix if pattern found\n- */\n-tSCC zHpux11_FabsfBypass0[] =\n-       \"__cplusplus\";\n-\n-#define    HPUX11_FABSF_TEST_CT  2\n+#define    HPUX11_FABSF_TEST_CT  1\n static tTestDesc aHpux11_FabsfTests[] = {\n-  { TT_NEGREP,   zHpux11_FabsfBypass0, (regex_t*)NULL },\n   { TT_EGREP,    zHpux11_FabsfSelect0, (regex_t*)NULL }, };\n \n /*\n@@ -7581,6 +7576,42 @@ static const char* apzSolaris_Math_11Patch[] = {\n #endif\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Math_12 fix\n+ */\n+tSCC zSolaris_Math_12Name[] =\n+     \"solaris_math_12\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Math_12List[] =\n+  \"math.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Math_12Machs[] = {\n+        \"*-*-solaris2*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Math_12Select0[] =\n+       \"#undef.*_GLIBCXX_USE_C99_MATH\";\n+\n+#define    SOLARIS_MATH_12_TEST_CT  1\n+static tTestDesc aSolaris_Math_12Tests[] = {\n+  { TT_EGREP,    zSolaris_Math_12Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Math_12\n+ */\n+static const char* apzSolaris_Math_12Patch[] = { sed_cmd_z,\n+    \"-e\", \"/#undef[ \\t]*_GLIBCXX_USE_C99_MATH/d\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Once_Init_1 fix\n@@ -9879,7 +9910,7 @@ static const char* apzX11_SprintfPatch[] = {\n  */\n #define REGEX_COUNT          279\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            241\n+#define FIX_COUNT            242\n \n /*\n  *  Enumerate the fixes\n@@ -10068,6 +10099,7 @@ typedef enum {\n     SOLARIS_MATH_8_FIXIDX,\n     SOLARIS_MATH_9_FIXIDX,\n     SOLARIS_MATH_11_FIXIDX,\n+    SOLARIS_MATH_12_FIXIDX,\n     SOLARIS_ONCE_INIT_1_FIXIDX,\n     SOLARIS_POSIX_SPAWN_RESTRICT_FIXIDX,\n     SOLARIS_POW_INT_OVERLOAD_FIXIDX,\n@@ -11044,6 +11076,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_MATH_11_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Math_11Tests,   apzSolaris_Math_11Patch, 0 },\n \n+  {  zSolaris_Math_12Name,    zSolaris_Math_12List,\n+     apzSolaris_Math_12Machs,\n+     SOLARIS_MATH_12_TEST_CT, FD_MACH_ONLY,\n+     aSolaris_Math_12Tests,   apzSolaris_Math_12Patch, 0 },\n+\n   {  zSolaris_Once_Init_1Name,    zSolaris_Once_Init_1List,\n      apzSolaris_Once_Init_1Machs,\n      SOLARIS_ONCE_INIT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "240fc7437e69f90e50e308cd13d98c2662e54b77", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115f94f7fe0388f026837b36d165b026032093e/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115f94f7fe0388f026837b36d165b026032093e/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=3115f94f7fe0388f026837b36d165b026032093e", "patch": "@@ -2334,9 +2334,9 @@ fix = {\n  */\n fix = {\n     hackname  = hpux11_fabsf;\n+    mach      = \"*-hp-hpux11*\";\n     files     = math.h;\n     select    = \"^[ \\t]*#[ \\t]*define[ \\t]+fabsf\\\\(.*\";\n-    bypass    = \"__cplusplus\";\n \n     c_fix     = format;\n     c_fix_arg = \"#ifndef __cplusplus\\n%0\\n#endif\";\n@@ -3867,6 +3867,23 @@ _EOArg_;\n _EOText_;\n };\n \n+/*\n+ * Some versions of Solaris 10+ <math.h> #undef libstdc++-internal macros.\n+ */\n+fix = {\n+    hackname  = solaris_math_12;\n+    files     = math.h;\n+    mach      = '*-*-solaris2*';\n+    select    = '#undef.*_GLIBCXX_USE_C99_MATH';\n+    sed       = \"/#undef[ \\t]*_GLIBCXX_USE_C99_MATH/d\";\n+    test_text = << _EOText_\n+#if __cplusplus >= 201103L\n+#undef  _GLIBCXX_USE_C99_MATH\n+#undef  _GLIBCXX_USE_C99_MATH_TR1\n+#endif\n+_EOText_;\n+};\n+\n /*\n  * Sun Solaris defines PTHREAD_ONCE_INIT as an array containing a\n  * structure.  As such, it need two levels of brackets, but only"}, {"sha": "c7da15ad2c7c449e5dd59761541cd5b793dc9472", "filename": "fixincludes/tests/base/math.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115f94f7fe0388f026837b36d165b026032093e/fixincludes%2Ftests%2Fbase%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115f94f7fe0388f026837b36d165b026032093e/fixincludes%2Ftests%2Fbase%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fmath.h?ref=3115f94f7fe0388f026837b36d165b026032093e", "patch": "@@ -85,6 +85,12 @@ extern int class();\n #endif  /* RS6000_DOUBLE_CHECK */\n \n \n+#if defined( SOLARIS_MATH_12_CHECK )\n+#if __cplusplus >= 201103L\n+#endif\n+#endif  /* SOLARIS_MATH_12_CHECK */\n+\n+\n #if defined( STRICT_ANSI_NOT_CTD_CHECK )\n #if 1 && \\\n && defined(mumbling) |& ( !defined(__STRICT_ANSI__)) \\"}, {"sha": "d364e2e48a84c2b63cec220e1d3984ed9f9656f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3115f94f7fe0388f026837b36d165b026032093e", "patch": "@@ -1,3 +1,68 @@\n+2016-11-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_MATH11_PROTO): Update comments.\n+\t(__CORRECT_ISO_CPP11_MATH_H_PROTO): Rename to ...\n+\t(__CORRECT_ISO_CPP11_MATH_H_PROTO_FP): ... this.\n+\tAdd test for C++11 <math.h> integral overloads.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n+\t* include/c_global/cmath [__cplusplus >= 201103L]: Reflect\n+\t__CORRECT_ISO_CPP11_MATH_H_PROTO to\n+\t__CORRECT_ISO_CPP11_MATH_H_PROTO_FP rename.\n+\t* include/c_global/cmath [_GLIBCXX_USE_C99_MATH &&\n+\t!_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC && __cplusplus >= 201103L]\n+\t(std::fpclassify): Wrap in !__CORRECT_ISO_CPP11_MATH_H_PROTO_INT.\n+\t(std::isfinite): Likewise.\n+\t(std::isinf): Likewise.\n+\t(std::isnan): Likewise.\n+\t(std::isnormal): Likewise.\n+\t(std::signbit): Likewise.\n+\t(std::isgreater): Likewise.\n+\t(std::isgreaterequal): Likewise.\n+\t(std::isless): Likewise.\n+\t(std::islessequal): Likewise.\n+\t(std::islessgreater): Likewise.\n+\t(std::isunordered): Likewise.\n+\t[__cplusplus >= 201103L && _GLIBCXX_USE_C99_MATH_TR1]\n+\t(std::acosh): Likewise.\n+\t(std::asinh): Likewise.\n+\t(std::atanh): Likewise.\n+\t(std::cbrt): Likewise.\n+\t(std::copysign): Likewise.\n+\t(std::erf): Likewise.\n+\t(std::erfc): Likewise.\n+\t(std::exp2): Likewise.\n+\t(std::expm1): Likewise.\n+\t(std::fdim): Likewise.\n+\t(std::fma): Likewise.\n+\t(std::fmax): Likewise.\n+\t(std::fmin): Likewise.\n+\t(std::hypot): Likewise.\n+\t(std::ilogb): Likewise.\n+\t(std::lgamma): Likewise.\n+\t(std::llrint): Likewise.\n+\t(std::llround): Likewise.\n+\t(std::log1p): Likewise.\n+\t(std::log2): Likewise.\n+\t(std::logb): Likewise.\n+\t(std::lrint): Likewise.\n+\t(std::lround): Likewise.\n+\t(std::nearbyint): Likewise.\n+\t(std::nextafter): Likewise.\n+\t(std::nexttoward): Likewise.\n+\t(std::remainder): Likewise.\n+\t(std::remquo): Likewise.\n+\t(std::rint): Likewise.\n+\t(std::round): Likewise.\n+\t(std::scalbln): Likewise.\n+\t(std::scalbn): Likewise.\n+\t(std::tgamma): Likewise.\n+\t(std::trunc): Likewise.\n+\t* include/tr1/cmath [_GLIBCXX_USE_C99_MATH_TR1 && __cplusplus >=\n+\t201103L]: Reflect __CORRECT_ISO_CPP11_MATH_H_PROTO to\n+\t__CORRECT_ISO_CPP11_MATH_H_PROTO_FP rename.\n+\n 2016-11-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/59406"}, {"sha": "c88e4732d0bd80c8546931c188ca53e77bf87e62", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 66, "deletions": 13, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=3115f94f7fe0388f026837b36d165b026032093e", "patch": "@@ -2181,7 +2181,8 @@ AC_DEFUN([GLIBCXX_CHECK_STDIO_PROTO], [\n ])\n \n dnl\n-dnl Check whether required C++11 overloads are present in <math.h>.\n+dnl Check whether required C++11 overloads for floating point and integral\n+dnl types are present in <math.h>.\n dnl\n AC_DEFUN([GLIBCXX_CHECK_MATH11_PROTO], [\n \n@@ -2192,10 +2193,10 @@ AC_DEFUN([GLIBCXX_CHECK_MATH11_PROTO], [\n \n   case \"$host\" in\n     *-*-solaris2.*)\n-      # Solaris 12 introduced the C++11 <math.h> overloads.  A backport to\n-      # a Solaris 11.3 SRU is likely, maybe even a Solaris 10 patch.\n-      AC_MSG_CHECKING([for C++11 <math.h> overloads])\n-      AC_CACHE_VAL(glibcxx_cv_math11_overload, [\n+      # Solaris 12 Build 86, Solaris 11.3 SRU 3.6, and Solaris 10 Patch\n+      # 11996[67]-02 introduced the C++11 <math.h> floating point overloads.\n+      AC_MSG_CHECKING([for C++11 <math.h> floating point overloads])\n+      AC_CACHE_VAL(glibcxx_cv_math11_fp_overload, [\n \tAC_COMPILE_IFELSE([AC_LANG_SOURCE(\n \t  [#include <math.h>\n \t   #undef isfinite\n@@ -2204,21 +2205,73 @@ AC_DEFUN([GLIBCXX_CHECK_MATH11_PROTO], [\n \t     { return __builtin_isfinite(__x); }\n \t   }\n \t])],\n-\t[glibcxx_cv_math11_overload=no],\n-\t[glibcxx_cv_math11_overload=yes]\n+\t[glibcxx_cv_math11_fp_overload=no],\n+\t[glibcxx_cv_math11_fp_overload=yes]\n       )])\n \n       # autoheader cannot handle indented templates.\n-      AH_VERBATIM([__CORRECT_ISO_CPP11_MATH_H_PROTO],\n-        [/* Define if all C++11 overloads are available in <math.h>.  */\n+      AH_VERBATIM([__CORRECT_ISO_CPP11_MATH_H_PROTO_FP],\n+        [/* Define if all C++11 floating point overloads are available in <math.h>.  */\n #if __cplusplus >= 201103L\n-#undef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#undef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n #endif])\n \n-      if test $glibcxx_cv_math11_overload = yes; then\n-        AC_DEFINE(__CORRECT_ISO_CPP11_MATH_H_PROTO)\n+      if test $glibcxx_cv_math11_fp_overload = yes; then\n+        AC_DEFINE(__CORRECT_ISO_CPP11_MATH_H_PROTO_FP)\n       fi\n-      AC_MSG_RESULT([$glibcxx_cv_math11_overload])\n+      AC_MSG_RESULT([$glibcxx_cv_math11_fp_overload])\n+\n+      # Solaris 12 Build 90, Solaris 11.3 SRU 5.6, and Solaris 10 Patch\n+      # 11996[67]-02 introduced the C++11 <math.h> integral type overloads.\n+      AC_MSG_CHECKING([for C++11 <math.h> integral type overloads])\n+      AC_CACHE_VAL(glibcxx_cv_math11_int_overload, [\n+\tAC_COMPILE_IFELSE([AC_LANG_SOURCE(\n+\t  [#include <math.h>\n+\t   namespace std {\n+\t     template<typename _Tp>\n+\t       struct __is_integer;\n+\t     template<>\n+\t       struct __is_integer<int>\n+\t       {\n+\t         enum { __value = 1 };\n+\t       };\n+\t   }\n+\t   namespace __gnu_cxx {\n+\t     template<bool, typename>\n+\t       struct __enable_if;\n+\t     template<typename _Tp>\n+\t       struct __enable_if<true, _Tp>\n+\t       { typedef _Tp __type; };\n+\t   }\n+\t   namespace std {\n+\t     template<typename _Tp>\n+\t       constexpr typename __gnu_cxx::__enable_if\n+\t       \t\t <__is_integer<_Tp>::__value, double>::__type\n+\t       log2(_Tp __x)\n+\t       { return __builtin_log2(__x); }\n+\t   }\n+\t   int\n+\t   main (void)\n+\t   {\n+\t     int i = 1000;\n+\t     return std::log2(i);\n+\t   }\n+\t])],\n+\t[glibcxx_cv_math11_int_overload=no],\n+\t[glibcxx_cv_math11_int_overload=yes]\n+      )])\n+\n+      # autoheader cannot handle indented templates.\n+      AH_VERBATIM([__CORRECT_ISO_CPP11_MATH_H_PROTO_INT],\n+        [/* Define if all C++11 integral type overloads are available in <math.h>.  */\n+#if __cplusplus >= 201103L\n+#undef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n+#endif])\n+\n+      if test $glibcxx_cv_math11_int_overload = yes; then\n+        AC_DEFINE(__CORRECT_ISO_CPP11_MATH_H_PROTO_INT)\n+      fi\n+      AC_MSG_RESULT([$glibcxx_cv_math11_int_overload])\n       ;;\n     *)\n       # If <math.h> defines the obsolete isinf(double) and isnan(double)"}, {"sha": "09ddfeb7993c26a10a60fe7f263b467ad397eaa5", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=3115f94f7fe0388f026837b36d165b026032093e", "patch": "@@ -977,9 +977,14 @@\n /* Define to 1 if mutex_timedlock is available. */\n #undef _GTHREAD_USE_MUTEX_TIMEDLOCK\n \n-/* Define if all C++11 overloads are available in <math.h>.  */\n+/* Define if all C++11 floating point overloads are available in <math.h>.  */\n #if __cplusplus >= 201103L\n-#undef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#undef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n+#endif\n+\n+/* Define if all C++11 integral type overloads are available in <math.h>.  */\n+#if __cplusplus >= 201103L\n+#undef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n #endif\n \n #if defined (HAVE__ACOSF) && ! defined (HAVE_ACOSF)"}, {"sha": "f32197e0fabd56a1e5efa83dc845d5be1e192daa", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 73, "deletions": 11, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3115f94f7fe0388f026837b36d165b026032093e", "patch": "@@ -18236,11 +18236,11 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n   case \"$host\" in\n     *-*-solaris2.*)\n-      # Solaris 12 introduced the C++11 <math.h> overloads.  A backport to\n-      # a Solaris 11.3 SRU is likely, maybe even a Solaris 10 patch.\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for C++11 <math.h> overloads\" >&5\n-$as_echo_n \"checking for C++11 <math.h> overloads... \" >&6; }\n-      if test \"${glibcxx_cv_math11_overload+set}\" = set; then :\n+      # Solaris 12 Build 86, Solaris 11.3 SRU 3.6, and Solaris 10 Patch\n+      # 11996[67]-02 introduced the C++11 <math.h> floating point overloads.\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for C++11 <math.h> floating point overloads\" >&5\n+$as_echo_n \"checking for C++11 <math.h> floating point overloads... \" >&6; }\n+      if test \"${glibcxx_cv_math11_fp_overload+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n \n@@ -18255,9 +18255,9 @@ else\n \n _ACEOF\n if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_math11_overload=no\n+  glibcxx_cv_math11_fp_overload=no\n else\n-  glibcxx_cv_math11_overload=yes\n+  glibcxx_cv_math11_fp_overload=yes\n \n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n@@ -18267,12 +18267,74 @@ fi\n       # autoheader cannot handle indented templates.\n \n \n-      if test $glibcxx_cv_math11_overload = yes; then\n-        $as_echo \"#define __CORRECT_ISO_CPP11_MATH_H_PROTO 1\" >>confdefs.h\n+      if test $glibcxx_cv_math11_fp_overload = yes; then\n+        $as_echo \"#define __CORRECT_ISO_CPP11_MATH_H_PROTO_FP 1\" >>confdefs.h\n \n       fi\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_math11_overload\" >&5\n-$as_echo \"$glibcxx_cv_math11_overload\" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_math11_fp_overload\" >&5\n+$as_echo \"$glibcxx_cv_math11_fp_overload\" >&6; }\n+\n+      # Solaris 12 Build 90, Solaris 11.3 SRU 5.6, and Solaris 10 Patch\n+      # 11996[67]-02 introduced the C++11 <math.h> integral type overloads.\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for C++11 <math.h> integral type overloads\" >&5\n+$as_echo_n \"checking for C++11 <math.h> integral type overloads... \" >&6; }\n+      if test \"${glibcxx_cv_math11_int_overload+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <math.h>\n+\t   namespace std {\n+\t     template<typename _Tp>\n+\t       struct __is_integer;\n+\t     template<>\n+\t       struct __is_integer<int>\n+\t       {\n+\t         enum { __value = 1 };\n+\t       };\n+\t   }\n+\t   namespace __gnu_cxx {\n+\t     template<bool, typename>\n+\t       struct __enable_if;\n+\t     template<typename _Tp>\n+\t       struct __enable_if<true, _Tp>\n+\t       { typedef _Tp __type; };\n+\t   }\n+\t   namespace std {\n+\t     template<typename _Tp>\n+\t       constexpr typename __gnu_cxx::__enable_if\n+\t       \t\t <__is_integer<_Tp>::__value, double>::__type\n+\t       log2(_Tp __x)\n+\t       { return __builtin_log2(__x); }\n+\t   }\n+\t   int\n+\t   main (void)\n+\t   {\n+\t     int i = 1000;\n+\t     return std::log2(i);\n+\t   }\n+\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_math11_int_overload=no\n+else\n+  glibcxx_cv_math11_int_overload=yes\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+\n+\n+      # autoheader cannot handle indented templates.\n+\n+\n+      if test $glibcxx_cv_math11_int_overload = yes; then\n+        $as_echo \"#define __CORRECT_ISO_CPP11_MATH_H_PROTO_INT 1\" >>confdefs.h\n+\n+      fi\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_math11_int_overload\" >&5\n+$as_echo \"$glibcxx_cv_math11_int_overload\" >&6; }\n       ;;\n     *)\n       # If <math.h> defines the obsolete isinf(double) and isnan(double)"}, {"sha": "bea9b18ef58308f63a7b105c346e652b2be85426", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 138, "deletions": 46, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=3115f94f7fe0388f026837b36d165b026032093e", "patch": "@@ -539,7 +539,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr int\n   fpclassify(float __x)\n   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,\n@@ -556,13 +556,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\tFP_SUBNORMAL, FP_ZERO, __x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               int>::__type\n     fpclassify(_Tp __x)\n     { return __x != 0 ? FP_NORMAL : FP_ZERO; }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr bool\n   isfinite(float __x)\n   { return __builtin_isfinite(__x); }\n@@ -576,13 +578,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_isfinite(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               bool>::__type\n     isfinite(_Tp __x)\n     { return true; }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr bool\n   isinf(float __x)\n   { return __builtin_isinf(__x); }\n@@ -601,13 +605,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_isinf(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               bool>::__type\n     isinf(_Tp __x)\n     { return false; }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr bool\n   isnan(float __x)\n   { return __builtin_isnan(__x); }\n@@ -626,13 +632,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_isnan(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               bool>::__type\n     isnan(_Tp __x)\n     { return false; }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr bool\n   isnormal(float __x)\n   { return __builtin_isnormal(__x); }\n@@ -646,13 +654,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_isnormal(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               bool>::__type\n     isnormal(_Tp __x)\n     { return __x != 0 ? true : false; }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   // Note: middle-end/36757 is fixed, __builtin_signbit is type-generic.\n   constexpr bool\n   signbit(float __x)\n@@ -667,13 +677,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_signbit(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n                                               bool>::__type\n     signbit(_Tp __x)\n     { return __x < 0 ? true : false; }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr bool\n   isgreater(float __x, float __y)\n   { return __builtin_isgreater(__x, __y); }\n@@ -687,6 +699,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_isgreater(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n@@ -696,8 +709,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return __builtin_isgreater(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr bool\n   isgreaterequal(float __x, float __y)\n   { return __builtin_isgreaterequal(__x, __y); }\n@@ -711,6 +725,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_isgreaterequal(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n@@ -720,8 +735,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return __builtin_isgreaterequal(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr bool\n   isless(float __x, float __y)\n   { return __builtin_isless(__x, __y); }\n@@ -735,6 +751,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_isless(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n@@ -744,8 +761,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return __builtin_isless(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr bool\n   islessequal(float __x, float __y)\n   { return __builtin_islessequal(__x, __y); }\n@@ -759,6 +777,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_islessequal(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n@@ -768,8 +787,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return __builtin_islessequal(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr bool\n   islessgreater(float __x, float __y)\n   { return __builtin_islessgreater(__x, __y); }\n@@ -783,6 +803,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_islessgreater(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n@@ -792,8 +813,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return __builtin_islessgreater(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr bool\n   isunordered(float __x, float __y)\n   { return __builtin_isunordered(__x, __y); }\n@@ -807,6 +829,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_isunordered(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n@@ -816,6 +839,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return __builtin_isunordered(__type(__x), __type(__y));\n     }\n+#endif\n \n #else\n \n@@ -1196,7 +1220,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using ::truncl;\n \n   /// Additional overloads.\n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   acosh(float __x)\n   { return __builtin_acoshf(__x); }\n@@ -1206,13 +1230,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_acoshl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     acosh(_Tp __x)\n     { return __builtin_acosh(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   asinh(float __x)\n   { return __builtin_asinhf(__x); }\n@@ -1222,13 +1248,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_asinhl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     asinh(_Tp __x)\n     { return __builtin_asinh(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   atanh(float __x)\n   { return __builtin_atanhf(__x); }\n@@ -1238,13 +1266,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_atanhl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     atanh(_Tp __x)\n     { return __builtin_atanh(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   cbrt(float __x)\n   { return __builtin_cbrtf(__x); }\n@@ -1254,13 +1284,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_cbrtl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     cbrt(_Tp __x)\n     { return __builtin_cbrt(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   copysign(float __x, float __y)\n   { return __builtin_copysignf(__x, __y); }\n@@ -1270,15 +1302,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_copysignl(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     copysign(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return copysign(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   erf(float __x)\n   { return __builtin_erff(__x); }\n@@ -1288,13 +1322,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_erfl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     erf(_Tp __x)\n     { return __builtin_erf(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   erfc(float __x)\n   { return __builtin_erfcf(__x); }\n@@ -1304,13 +1340,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_erfcl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     erfc(_Tp __x)\n     { return __builtin_erfc(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   exp2(float __x)\n   { return __builtin_exp2f(__x); }\n@@ -1320,13 +1358,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_exp2l(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     exp2(_Tp __x)\n     { return __builtin_exp2(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   expm1(float __x)\n   { return __builtin_expm1f(__x); }\n@@ -1336,13 +1376,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_expm1l(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     expm1(_Tp __x)\n     { return __builtin_expm1(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   fdim(float __x, float __y)\n   { return __builtin_fdimf(__x, __y); }\n@@ -1352,15 +1394,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fdiml(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     fdim(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return fdim(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   fma(float __x, float __y, float __z)\n   { return __builtin_fmaf(__x, __y, __z); }\n@@ -1370,15 +1414,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fmal(__x, __y, __z); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up, typename _Vp>\n     constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type\n     fma(_Tp __x, _Up __y, _Vp __z)\n     {\n       typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;\n       return fma(__type(__x), __type(__y), __type(__z));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   fmax(float __x, float __y)\n   { return __builtin_fmaxf(__x, __y); }\n@@ -1388,15 +1434,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fmaxl(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     fmax(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return fmax(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   fmin(float __x, float __y)\n   { return __builtin_fminf(__x, __y); }\n@@ -1406,15 +1454,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fminl(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     fmin(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return fmin(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   hypot(float __x, float __y)\n   { return __builtin_hypotf(__x, __y); }\n@@ -1424,15 +1474,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_hypotl(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     hypot(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return hypot(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr int\n   ilogb(float __x)\n   { return __builtin_ilogbf(__x); }\n@@ -1442,14 +1494,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_ilogbl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr\n     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                     int>::__type\n     ilogb(_Tp __x)\n     { return __builtin_ilogb(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   lgamma(float __x)\n   { return __builtin_lgammaf(__x); }\n@@ -1459,13 +1513,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_lgammal(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     lgamma(_Tp __x)\n     { return __builtin_lgamma(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr long long\n   llrint(float __x)\n   { return __builtin_llrintf(__x); }\n@@ -1475,13 +1531,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_llrintl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               long long>::__type\n     llrint(_Tp __x)\n     { return __builtin_llrint(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr long long\n   llround(float __x)\n   { return __builtin_llroundf(__x); }\n@@ -1491,13 +1549,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_llroundl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               long long>::__type\n     llround(_Tp __x)\n     { return __builtin_llround(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   log1p(float __x)\n   { return __builtin_log1pf(__x); }\n@@ -1507,13 +1567,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_log1pl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     log1p(_Tp __x)\n     { return __builtin_log1p(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   // DR 568.\n   constexpr float\n   log2(float __x)\n@@ -1524,13 +1586,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_log2l(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     log2(_Tp __x)\n     { return __builtin_log2(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   logb(float __x)\n   { return __builtin_logbf(__x); }\n@@ -1540,13 +1604,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_logbl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     logb(_Tp __x)\n     { return __builtin_logb(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr long\n   lrint(float __x)\n   { return __builtin_lrintf(__x); }\n@@ -1556,13 +1622,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_lrintl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               long>::__type\n     lrint(_Tp __x)\n     { return __builtin_lrint(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr long\n   lround(float __x)\n   { return __builtin_lroundf(__x); }\n@@ -1572,13 +1640,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_lroundl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               long>::__type\n     lround(_Tp __x)\n     { return __builtin_lround(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   nearbyint(float __x)\n   { return __builtin_nearbyintf(__x); }\n@@ -1588,13 +1658,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nearbyintl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     nearbyint(_Tp __x)\n     { return __builtin_nearbyint(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   nextafter(float __x, float __y)\n   { return __builtin_nextafterf(__x, __y); }\n@@ -1604,15 +1676,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nextafterl(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     nextafter(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return nextafter(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   nexttoward(float __x, long double __y)\n   { return __builtin_nexttowardf(__x, __y); }\n@@ -1622,13 +1696,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nexttowardl(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     nexttoward(_Tp __x, long double __y)\n     { return __builtin_nexttoward(__x, __y); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   remainder(float __x, float __y)\n   { return __builtin_remainderf(__x, __y); }\n@@ -1638,15 +1714,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_remainderl(__x, __y); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     remainder(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return remainder(__type(__x), __type(__y));\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   remquo(float __x, float __y, int* __pquo)\n   { return __builtin_remquof(__x, __y, __pquo); }\n@@ -1656,15 +1734,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_remquol(__x, __y, __pquo); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp, typename _Up>\n     inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     remquo(_Tp __x, _Up __y, int* __pquo)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return remquo(__type(__x), __type(__y), __pquo);\n     }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   rint(float __x)\n   { return __builtin_rintf(__x); }\n@@ -1674,13 +1754,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_rintl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     rint(_Tp __x)\n     { return __builtin_rint(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   round(float __x)\n   { return __builtin_roundf(__x); }\n@@ -1690,13 +1772,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_roundl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     round(_Tp __x)\n     { return __builtin_round(__x); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   scalbln(float __x, long __ex)\n   { return __builtin_scalblnf(__x, __ex); }\n@@ -1706,13 +1790,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_scalblnl(__x, __ex); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     scalbln(_Tp __x, long __ex)\n     { return __builtin_scalbln(__x, __ex); }\n+#endif\n  \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   scalbn(float __x, int __ex)\n   { return __builtin_scalbnf(__x, __ex); }\n@@ -1722,13 +1808,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_scalbnl(__x, __ex); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     scalbn(_Tp __x, int __ex)\n     { return __builtin_scalbn(__x, __ex); }\n+#endif\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   tgamma(float __x)\n   { return __builtin_tgammaf(__x); }\n@@ -1738,13 +1826,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_tgammal(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     tgamma(_Tp __x)\n     { return __builtin_tgamma(__x); }\n+#endif\n  \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   constexpr float\n   trunc(float __x)\n   { return __builtin_truncf(__x); }\n@@ -1754,11 +1844,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_truncl(__x); }\n #endif\n \n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT\n   template<typename _Tp>\n     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n                                               double>::__type\n     trunc(_Tp __x)\n     { return __builtin_trunc(__x); }\n+#endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "9a4a1764ca198670a640b5db7c11c99c3ed1a4ff", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115f94f7fe0388f026837b36d165b026032093e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=3115f94f7fe0388f026837b36d165b026032093e", "patch": "@@ -490,7 +490,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // In C++03 we need to provide the additional overloads.\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   acosh(float __x)\n   { return __builtin_acoshf(__x); }\n@@ -506,7 +506,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     acosh(_Tp __x)\n     { return __builtin_acosh(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   asinh(float __x)\n   { return __builtin_asinhf(__x); }\n@@ -522,7 +522,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     asinh(_Tp __x)\n     { return __builtin_asinh(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   atanh(float __x)\n   { return __builtin_atanhf(__x); }\n@@ -538,7 +538,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     atanh(_Tp __x)\n     { return __builtin_atanh(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   cbrt(float __x)\n   { return __builtin_cbrtf(__x); }\n@@ -554,7 +554,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     cbrt(_Tp __x)\n     { return __builtin_cbrt(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   copysign(float __x, float __y)\n   { return __builtin_copysignf(__x, __y); }\n@@ -572,7 +572,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return copysign(__type(__x), __type(__y));\n     }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   erf(float __x)\n   { return __builtin_erff(__x); }\n@@ -588,7 +588,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erf(_Tp __x)\n     { return __builtin_erf(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   erfc(float __x)\n   { return __builtin_erfcf(__x); }\n@@ -604,7 +604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erfc(_Tp __x)\n     { return __builtin_erfc(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   exp2(float __x)\n   { return __builtin_exp2f(__x); }\n@@ -620,7 +620,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     exp2(_Tp __x)\n     { return __builtin_exp2(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   expm1(float __x)\n   { return __builtin_expm1f(__x); }\n@@ -636,7 +636,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     expm1(_Tp __x)\n     { return __builtin_expm1(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   fdim(float __x, float __y)\n   { return __builtin_fdimf(__x, __y); }\n@@ -654,7 +654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fdim(__type(__x), __type(__y));\n     }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   fma(float __x, float __y, float __z)\n   { return __builtin_fmaf(__x, __y, __z); }\n@@ -672,7 +672,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fma(__type(__x), __type(__y), __type(__z));\n     }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   fmax(float __x, float __y)\n   { return __builtin_fmaxf(__x, __y); }\n@@ -690,7 +690,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fmax(__type(__x), __type(__y));\n     }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   fmin(float __x, float __y)\n   { return __builtin_fminf(__x, __y); }\n@@ -708,7 +708,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fmin(__type(__x), __type(__y));\n     }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   hypot(float __x, float __y)\n   { return __builtin_hypotf(__x, __y); }\n@@ -726,7 +726,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return hypot(__type(__y), __type(__x));\n     }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline int\n   ilogb(float __x)\n   { return __builtin_ilogbf(__x); }\n@@ -742,7 +742,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     ilogb(_Tp __x)\n     { return __builtin_ilogb(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   lgamma(float __x)\n   { return __builtin_lgammaf(__x); }\n@@ -758,7 +758,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     lgamma(_Tp __x)\n     { return __builtin_lgamma(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline long long\n   llrint(float __x)\n   { return __builtin_llrintf(__x); }\n@@ -774,7 +774,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     llrint(_Tp __x)\n     { return __builtin_llrint(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline long long\n   llround(float __x)\n   { return __builtin_llroundf(__x); }\n@@ -790,7 +790,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     llround(_Tp __x)\n     { return __builtin_llround(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   log1p(float __x)\n   { return __builtin_log1pf(__x); }\n@@ -807,7 +807,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __builtin_log1p(__x); }\n \n   // DR 568.\n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   log2(float __x)\n   { return __builtin_log2f(__x); }\n@@ -823,7 +823,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     log2(_Tp __x)\n     { return __builtin_log2(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   logb(float __x)\n   { return __builtin_logbf(__x); }\n@@ -841,7 +841,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_logb(__x);\n     }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline long\n   lrint(float __x)\n   { return __builtin_lrintf(__x); }\n@@ -857,7 +857,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     lrint(_Tp __x)\n     { return __builtin_lrint(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline long\n   lround(float __x)\n   { return __builtin_lroundf(__x); }\n@@ -873,7 +873,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     lround(_Tp __x)\n     { return __builtin_lround(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   nearbyint(float __x)\n   { return __builtin_nearbyintf(__x); }\n@@ -889,7 +889,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     nearbyint(_Tp __x)\n     { return __builtin_nearbyint(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   nextafter(float __x, float __y)\n   { return __builtin_nextafterf(__x, __y); }\n@@ -907,7 +907,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return nextafter(__type(__x), __type(__y));\n     }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   nexttoward(float __x, long double __y)\n   { return __builtin_nexttowardf(__x, __y); }\n@@ -923,7 +923,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     nexttoward(_Tp __x, long double __y)\n     { return __builtin_nexttoward(__x, __y); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   remainder(float __x, float __y)\n   { return __builtin_remainderf(__x, __y); }\n@@ -941,7 +941,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return remainder(__type(__x), __type(__y));\n     }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   remquo(float __x, float __y, int* __pquo)\n   { return __builtin_remquof(__x, __y, __pquo); }\n@@ -959,7 +959,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return remquo(__type(__x), __type(__y), __pquo);\n     }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   rint(float __x)\n   { return __builtin_rintf(__x); }\n@@ -975,7 +975,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     rint(_Tp __x)\n     { return __builtin_rint(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   round(float __x)\n   { return __builtin_roundf(__x); }\n@@ -991,7 +991,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     round(_Tp __x)\n     { return __builtin_round(__x); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   scalbln(float __x, long __ex)\n   { return __builtin_scalblnf(__x, __ex); }\n@@ -1007,7 +1007,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     scalbln(_Tp __x, long __ex)\n     { return __builtin_scalbln(__x, __ex); }\n  \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   scalbn(float __x, int __ex)\n   { return __builtin_scalbnf(__x, __ex); }\n@@ -1023,7 +1023,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     scalbn(_Tp __x, int __ex)\n     { return __builtin_scalbn(__x, __ex); }\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   tgamma(float __x)\n   { return __builtin_tgammaf(__x); }\n@@ -1039,7 +1039,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     tgamma(_Tp __x)\n     { return __builtin_tgamma(__x); }\n  \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   trunc(float __x)\n   { return __builtin_truncf(__x); }\n@@ -1084,7 +1084,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // the discussion about this issue here:\n   // http://gcc.gnu.org/ml/gcc-patches/2012-09/msg01278.html\n \n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   pow(float __x, float __y)\n   { return std::pow(__x, __y); }\n@@ -1112,7 +1112,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // to std::fabs.\n \n #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n-#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n+#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n   inline float\n   fabs(float __x)\n   { return __builtin_fabsf(__x); }"}]}