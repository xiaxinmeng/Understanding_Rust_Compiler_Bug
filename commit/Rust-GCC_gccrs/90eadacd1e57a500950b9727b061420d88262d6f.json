{"sha": "90eadacd1e57a500950b9727b061420d88262d6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlYWRhY2QxZTU3YTUwMDk1MGI5NzI3YjA2MTQyMGQ4ODI2MmQ2Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-22T18:23:47Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-22T18:23:47Z"}, "message": "re PR go/48503 (http/cgi FAILs if libgcc_s.so.1 isn't in default ld.so.1 search path)\n\n\tPR go/48503\nlibgo: Bring over http/cgi environment inheritance patches.\n\nFrom-SVN: r172864", "tree": {"sha": "a27876eac4e812e9dfce057f5322e9f7179de3c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a27876eac4e812e9dfce057f5322e9f7179de3c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90eadacd1e57a500950b9727b061420d88262d6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90eadacd1e57a500950b9727b061420d88262d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90eadacd1e57a500950b9727b061420d88262d6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90eadacd1e57a500950b9727b061420d88262d6f/comments", "author": null, "committer": null, "parents": [{"sha": "eb601ae15ac9daf8381c0312c15bf7ae24b0ee38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb601ae15ac9daf8381c0312c15bf7ae24b0ee38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb601ae15ac9daf8381c0312c15bf7ae24b0ee38"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "af082e1a7ec2b22c7363d6c3dda811ba85bebc25", "filename": "libgo/go/http/cgi/host.go", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90eadacd1e57a500950b9727b061420d88262d6f/libgo%2Fgo%2Fhttp%2Fcgi%2Fhost.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90eadacd1e57a500950b9727b061420d88262d6f/libgo%2Fgo%2Fhttp%2Fcgi%2Fhost.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhttp%2Fcgi%2Fhost.go?ref=90eadacd1e57a500950b9727b061420d88262d6f", "patch": "@@ -25,20 +25,30 @@ import (\n \t\"os\"\n \t\"path/filepath\"\n \t\"regexp\"\n+\t\"runtime\"\n \t\"strconv\"\n \t\"strings\"\n )\n \n var trailingPort = regexp.MustCompile(`:([0-9]+)$`)\n \n+var osDefaultInheritEnv = map[string][]string{\n+\t\"darwin\":  []string{\"DYLD_LIBRARY_PATH\"},\n+\t\"freebsd\": []string{\"LD_LIBRARY_PATH\"},\n+\t\"hpux\":    []string{\"LD_LIBRARY_PATH\", \"SHLIB_PATH\"},\n+\t\"linux\":   []string{\"LD_LIBRARY_PATH\"},\n+\t\"windows\": []string{\"SystemRoot\", \"COMSPEC\", \"PATHEXT\", \"WINDIR\"},\n+}\n+\n // Handler runs an executable in a subprocess with a CGI environment.\n type Handler struct {\n \tPath string // path to the CGI executable\n \tRoot string // root URI prefix of handler or empty for \"/\"\n \n-\tEnv    []string    // extra environment variables to set, if any\n-\tLogger *log.Logger // optional log for errors or nil to use log.Print\n-\tArgs   []string    // optional arguments to pass to child process\n+\tEnv        []string    // extra environment variables to set, if any, as \"key=value\"\n+\tInheritEnv []string    // environment variables to inherit from host, as \"key\"\n+\tLogger     *log.Logger // optional log for errors or nil to use log.Print\n+\tArgs       []string    // optional arguments to pass to child process\n }\n \n func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n@@ -110,6 +120,24 @@ func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n \t\tenv = append(env, h.Env...)\n \t}\n \n+\tpath := os.Getenv(\"PATH\")\n+\tif path == \"\" {\n+\t\tpath = \"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin\"\n+\t}\n+\tenv = append(env, \"PATH=\"+path)\n+\n+\tfor _, e := range h.InheritEnv {\n+\t\tif v := os.Getenv(e); v != \"\" {\n+\t\t\tenv = append(env, e+\"=\"+v)\n+\t\t}\n+\t}\n+\n+\tfor _, e := range osDefaultInheritEnv[runtime.GOOS] {\n+\t\tif v := os.Getenv(e); v != \"\" {\n+\t\t\tenv = append(env, e+\"=\"+v)\n+\t\t}\n+\t}\n+\n \tcwd, pathBase := filepath.Split(h.Path)\n \tif cwd == \"\" {\n \t\tcwd = \".\""}]}