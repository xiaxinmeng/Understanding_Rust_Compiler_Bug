{"sha": "fe621379bc0971b041a5ea01933135666cebfc2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU2MjEzNzliYzA5NzFiMDQxYTVlYTAxOTMzMTM1NjY2Y2ViZmMyZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2016-01-29T22:53:28Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2016-01-29T22:53:28Z"}, "message": "[hsa] Atomic assess memory model fixes\n\n2016-01-29  Martin Jambor  <mjambor@suse.cz>\n\n\t* hsa-gen.c (get_memory_order_name): Mask with MEMMODEL_BASE_MASK.\n\tUse short lowercase names.\n\t(get_memory_order): Mask with MEMMODEL_BASE_MASK.  Support\n\tMEMMODEL_CONSUME with acquire semantics and MEMMODEL_SEQ_CST with\n\tacq_rel one.  Protect warning agains segfaults if\n\tget_memory_order_name returns NULL.\n\t(gen_hsa_ternary_atomic_for_builtin): Support with MEMMODEL_SEQ_CST\n\twith release semantics.  Do not warn if get_memory_order already did.\n\t(gen_hsa_insns_for_call): Support with MEMMODEL_SEQ_CST with acquire\n\tsemantics.  Fix check for relaxed or acquire semantics.  Do not warn\n\tif get_memory_order already did.\n\nFrom-SVN: r233000", "tree": {"sha": "bb9709771836ac14d33e4db0125d28195e4aba19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb9709771836ac14d33e4db0125d28195e4aba19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe621379bc0971b041a5ea01933135666cebfc2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe621379bc0971b041a5ea01933135666cebfc2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe621379bc0971b041a5ea01933135666cebfc2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe621379bc0971b041a5ea01933135666cebfc2f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a5d2ba4fc106dd53470c5cc52c8262e36e905d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5d2ba4fc106dd53470c5cc52c8262e36e905d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5d2ba4fc106dd53470c5cc52c8262e36e905d2"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "1d60690d27c56a7a6a07dc028caa0649e3e4ef1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe621379bc0971b041a5ea01933135666cebfc2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe621379bc0971b041a5ea01933135666cebfc2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe621379bc0971b041a5ea01933135666cebfc2f", "patch": "@@ -1,3 +1,17 @@\n+2016-01-29  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* hsa-gen.c (get_memory_order_name): Mask with MEMMODEL_BASE_MASK.\n+\tUse short lowercase names.\n+\t(get_memory_order): Mask with MEMMODEL_BASE_MASK.  Support\n+\tMEMMODEL_CONSUME with acquire semantics and MEMMODEL_SEQ_CST with\n+\tacq_rel one.  Protect warning agains segfaults if\n+\tget_memory_order_name returns NULL.\n+\t(gen_hsa_ternary_atomic_for_builtin): Support with MEMMODEL_SEQ_CST\n+\twith release semantics.  Do not warn if get_memory_order already did.\n+\t(gen_hsa_insns_for_call): Support with MEMMODEL_SEQ_CST with acquire\n+\tsemantics.  Fix check for relaxed or acquire semantics.  Do not warn\n+\tif get_memory_order already did.\n+\n 2016-01-29  Sebastian Pop  <s.pop@samsung.com>\n \n \t* doc/install.texi: Document that isl-0.16 is supported."}, {"sha": "768c2cf8f7853116fcd41c678f608f7c548af6cd", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe621379bc0971b041a5ea01933135666cebfc2f/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe621379bc0971b041a5ea01933135666cebfc2f/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=fe621379bc0971b041a5ea01933135666cebfc2f", "patch": "@@ -4415,20 +4415,20 @@ get_address_from_value (tree val, hsa_bb *hbb)\n static const char *\n get_memory_order_name (unsigned memmodel)\n {\n-  switch (memmodel)\n+  switch (memmodel & MEMMODEL_BASE_MASK)\n     {\n     case MEMMODEL_RELAXED:\n-      return \"__ATOMIC_RELAXED\";\n+      return \"relaxed\";\n     case MEMMODEL_CONSUME:\n-      return \"__ATOMIC_CONSUME\";\n+      return \"consume\";\n     case MEMMODEL_ACQUIRE:\n-      return \"__ATOMIC_ACQUIRE\";\n+      return \"acquire\";\n     case MEMMODEL_RELEASE:\n-      return \"__ATOMIC_RELEASE\";\n+      return \"release\";\n     case MEMMODEL_ACQ_REL:\n-      return \"__ATOMIC_ACQ_REL\";\n+      return \"acq_rel\";\n     case MEMMODEL_SEQ_CST:\n-      return \"__ATOMIC_SEQ_CST\";\n+      return \"seq_cst\";\n     default:\n       return NULL;\n     }\n@@ -4440,21 +4440,31 @@ get_memory_order_name (unsigned memmodel)\n static BrigMemoryOrder\n get_memory_order (unsigned memmodel, location_t location)\n {\n-  switch (memmodel)\n+  switch (memmodel & MEMMODEL_BASE_MASK)\n     {\n     case MEMMODEL_RELAXED:\n       return BRIG_MEMORY_ORDER_RELAXED;\n+    case MEMMODEL_CONSUME:\n+      /* HSA does not have an equivalent, but we can use the slightly stronger\n+\t ACQUIRE.  */\n     case MEMMODEL_ACQUIRE:\n       return BRIG_MEMORY_ORDER_SC_ACQUIRE;\n     case MEMMODEL_RELEASE:\n       return BRIG_MEMORY_ORDER_SC_RELEASE;\n     case MEMMODEL_ACQ_REL:\n+    case MEMMODEL_SEQ_CST:\n+      /* Callers implementing a simple load or store need to remove the release\n+\t or acquire part respectively.  */\n       return BRIG_MEMORY_ORDER_SC_ACQUIRE_RELEASE;\n     default:\n-      HSA_SORRY_ATV (location,\n-\t\t     \"support for HSA does not implement memory model: %s\",\n-\t\t     get_memory_order_name (memmodel));\n-      return BRIG_MEMORY_ORDER_NONE;\n+      {\n+\tconst char *mmname = get_memory_order_name (memmodel);\n+\tHSA_SORRY_ATV (location,\n+\t\t       \"support for HSA does not implement the specified \"\n+\t\t       \" memory model%s %s\",\n+\t\t       mmname ? \": \" : \"\", mmname ? mmname : \"\");\n+\treturn BRIG_MEMORY_ORDER_NONE;\n+      }\n     }\n }\n \n@@ -4523,13 +4533,20 @@ gen_hsa_ternary_atomic_for_builtin (bool ret_orig,\n       nops = 2;\n     }\n \n-  if (acode == BRIG_ATOMIC_ST && memorder != BRIG_MEMORY_ORDER_RELAXED\n-      && memorder != BRIG_MEMORY_ORDER_SC_RELEASE)\n+  if (acode == BRIG_ATOMIC_ST)\n     {\n-      HSA_SORRY_ATV (gimple_location (stmt),\n-\t\t     \"support for HSA does not implement memory model for \"\n-\t\t     \"ATOMIC_ST: %s\", get_memory_order_name (mmodel));\n-      return;\n+      if (memorder == BRIG_MEMORY_ORDER_SC_ACQUIRE_RELEASE)\n+\tmemorder = BRIG_MEMORY_ORDER_SC_RELEASE;\n+\n+      if (memorder != BRIG_MEMORY_ORDER_RELAXED\n+\t  && memorder != BRIG_MEMORY_ORDER_SC_RELEASE\n+\t  && memorder != BRIG_MEMORY_ORDER_NONE)\n+\t{\n+\t  HSA_SORRY_ATV (gimple_location (stmt),\n+\t\t\t \"support for HSA does not implement memory model for \"\n+\t\t\t \"ATOMIC_ST: %s\", get_memory_order_name (mmodel));\n+\t  return;\n+\t}\n     }\n \n   hsa_insn_atomic *atominsn = new hsa_insn_atomic (nops, opcode, acode, mtype,\n@@ -4872,8 +4889,12 @@ gen_hsa_insns_for_call (gimple *stmt, hsa_bb *hbb)\n \tBrigMemoryOrder memorder = get_memory_order (mmodel,\n \t\t\t\t\t\t     gimple_location (stmt));\n \n+\tif (memorder == BRIG_MEMORY_ORDER_SC_ACQUIRE_RELEASE)\n+\t  memorder = BRIG_MEMORY_ORDER_SC_ACQUIRE;\n+\n \tif (memorder != BRIG_MEMORY_ORDER_RELAXED\n-\t    && memorder != BRIG_MEMORY_ORDER_SC_RELEASE)\n+\t    && memorder != BRIG_MEMORY_ORDER_SC_ACQUIRE\n+\t    && memorder != BRIG_MEMORY_ORDER_NONE)\n \t  {\n \t    HSA_SORRY_ATV (gimple_location (stmt),\n \t\t\t   \"support for HSA does not implement \""}]}