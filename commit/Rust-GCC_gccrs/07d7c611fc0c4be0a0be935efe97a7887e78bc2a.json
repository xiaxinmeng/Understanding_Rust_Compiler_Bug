{"sha": "07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdkN2M2MTFmYzBjNGJlMGEwYmU5MzVlZmU5N2E3ODg3ZTc4YmMyYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-19T12:09:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-19T12:09:52Z"}, "message": "flag-types.h (enum sanitize_code): Add SANITIZE_BUILTIN.\n\n\t* flag-types.h (enum sanitize_code): Add SANITIZE_BUILTIN.  Or\n\tSANITIZE_BUILTIN into SANITIZE_UNDEFINED.\n\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN,\n\tBUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT): New builtins.\n\t* opts.c (sanitizer_opts): Add builtin.\n\t* ubsan.c (instrument_builtin): New function.\n\t(pass_ubsan::execute): Call it.\n\t(pass_ubsan::gate): Enable even for SANITIZE_BUILTIN.\n\t* doc/invoke.texi: Document -fsanitize=builtin.\n\n\t* c-c++-common/ubsan/builtin-1.c: New test.\n\nFrom-SVN: r253888", "tree": {"sha": "def604d8db44c55f5de1bb611ed83a32c753321d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/def604d8db44c55f5de1bb611ed83a32c753321d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d3805fca3e9a199fbaa18aee3c05ecb30ebca61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3805fca3e9a199fbaa18aee3c05ecb30ebca61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d3805fca3e9a199fbaa18aee3c05ecb30ebca61"}], "stats": {"total": 145, "additions": 143, "deletions": 2}, "files": [{"sha": "7865a036a219f41d9c61e661d02741b008ea5fc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "patch": "@@ -1,5 +1,15 @@\n 2017-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* flag-types.h (enum sanitize_code): Add SANITIZE_BUILTIN.  Or\n+\tSANITIZE_BUILTIN into SANITIZE_UNDEFINED.\n+\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN,\n+\tBUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT): New builtins.\n+\t* opts.c (sanitizer_opts): Add builtin.\n+\t* ubsan.c (instrument_builtin): New function.\n+\t(pass_ubsan::execute): Call it.\n+\t(pass_ubsan::gate): Enable even for SANITIZE_BUILTIN.\n+\t* doc/invoke.texi: Document -fsanitize=builtin.\n+\n \t* ubsan.c (ubsan_expand_null_ifn): Use _v1 suffixed type mismatch\n \tbuiltins, store max (log2 (align), 0) into uchar field instead of\n \talign into uptr field."}, {"sha": "a2ef6fe023f535663d51ea8382a6b45231e650bb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "patch": "@@ -11149,6 +11149,15 @@ to verify the referenced object has the correct dynamic type.\n This option enables instrumentation of pointer arithmetics.  If the pointer\n arithmetics overflows, a run-time error is issued.\n \n+@item -fsanitize=builtin\n+@opindex fsanitize=builtin\n+\n+This option enables instrumentation of arguments to selected builtin\n+functions.  If an invalid value is passed to such arguments, a run-time\n+error is issued.  E.g.@ passing 0 as the argument to @code{__builtin_ctz}\n+or @code{__builtin_clz} invokes undefined behavior and is diagnosed\n+by this option.\n+\n @end table\n \n While @option{-ftrapv} causes traps for signed overflows to be emitted,"}, {"sha": "bfea17408cb5954f3a2fc5634959bfd0fa411fc2", "filename": "gcc/flag-types.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "patch": "@@ -246,6 +246,7 @@ enum sanitize_code {\n   SANITIZE_VPTR = 1UL << 22,\n   SANITIZE_BOUNDS_STRICT = 1UL << 23,\n   SANITIZE_POINTER_OVERFLOW = 1UL << 24,\n+  SANITIZE_BUILTIN = 1UL << 25,\n   SANITIZE_SHIFT = SANITIZE_SHIFT_BASE | SANITIZE_SHIFT_EXPONENT,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n \t\t       | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN\n@@ -254,7 +255,7 @@ enum sanitize_code {\n \t\t       | SANITIZE_NONNULL_ATTRIBUTE\n \t\t       | SANITIZE_RETURNS_NONNULL_ATTRIBUTE\n \t\t       | SANITIZE_OBJECT_SIZE | SANITIZE_VPTR\n-\t\t       | SANITIZE_POINTER_OVERFLOW,\n+\t\t       | SANITIZE_POINTER_OVERFLOW | SANITIZE_BUILTIN,\n   SANITIZE_UNDEFINED_NONDEFAULT = SANITIZE_FLOAT_DIVIDE | SANITIZE_FLOAT_CAST\n \t\t\t\t  | SANITIZE_BOUNDS_STRICT\n };"}, {"sha": "ee95c84cdef93b568aee0c0ee185332cc89870f6", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "patch": "@@ -1521,6 +1521,7 @@ const struct sanitizer_opts_s sanitizer_opts[] =\n   SANITIZER_OPT (object-size, SANITIZE_OBJECT_SIZE, true),\n   SANITIZER_OPT (vptr, SANITIZE_VPTR, true),\n   SANITIZER_OPT (pointer-overflow, SANITIZE_POINTER_OVERFLOW, true),\n+  SANITIZER_OPT (builtin, SANITIZE_BUILTIN, true),\n   SANITIZER_OPT (all, ~0U, true),\n #undef SANITIZER_OPT\n   { NULL, 0U, 0UL, false }"}, {"sha": "00e7ae031e677cc3eac176d4a35c92e353f7eb9f", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "patch": "@@ -524,6 +524,14 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT,\n \t\t      \"__ubsan_handle_nonnull_return_v1_abort\",\n \t\t      BT_FN_VOID_PTR_PTR,\n \t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN,\n+\t\t      \"__ubsan_handle_invalid_builtin\",\n+\t\t      BT_FN_VOID_PTR,\n+\t\t      ATTR_COLD_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT,\n+\t\t      \"__ubsan_handle_invalid_builtin_abort\",\n+\t\t      BT_FN_VOID_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS,\n \t\t      \"__ubsan_handle_dynamic_type_cache_miss\",\n \t\t      BT_FN_VOID_PTR_PTR_PTR,"}, {"sha": "0d812b696546a4077915c163e5bfdebf27762dc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "patch": "@@ -1,5 +1,7 @@\n 2017-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-c++-common/ubsan/builtin-1.c: New test.\n+\n \t* c-c++-common/ubsan/float-cast-overflow-1.c: Drop value keyword\n \tfrom expected output regexps.\n \t* c-c++-common/ubsan/float-cast-overflow-2.c: Likewise."}, {"sha": "2f340e3e70f1795d62ced9f0937c51b69a8993f4", "filename": "gcc/testsuite/c-c++-common/ubsan/builtin-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbuiltin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbuiltin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbuiltin-1.c?ref=07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__((noinline, noclone)) unsigned long long\n+foo (unsigned int x, unsigned long int y, unsigned long long int z, __UINTMAX_TYPE__ w)\n+{\n+  unsigned long long ret = 0;\n+  fprintf (stderr, \"FOO MARKER1\\n\");\n+  ret += __builtin_ctz (x);\n+  ret += __builtin_ctzl (y);\n+  ret += __builtin_ctzll (z);\n+  ret += __builtin_ctzimax (w);\n+  fprintf (stderr, \"FOO MARKER2\\n\");\n+  ret += __builtin_clz (x);\n+  ret += __builtin_clzl (y);\n+  ret += __builtin_clzll (z);\n+  ret += __builtin_clzimax (w);\n+  fprintf (stderr, \"FOO MARKER3\\n\");\n+  return ret;\n+}\n+\n+int\n+main ()\n+{\n+  volatile __UINTMAX_TYPE__ t = 0;\n+  t = foo (t, t, t, t);\n+  return 0;\n+}\n+\n+/* { dg-output \"FOO MARKER1(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"(\\[^\\n\\r]*runtime error: passing zero to ctz\\\\\\(\\\\\\), which is not a valid argument\\[^\\n\\r]*(\\n|\\r\\n|\\r)){4}\" } */\n+/* { dg-output \"FOO MARKER2(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"(\\[^\\n\\r]*runtime error: passing zero to clz\\\\\\(\\\\\\), which is not a valid argument\\[^\\n\\r]*(\\n|\\r\\n|\\r)){4}\" } */\n+/* { dg-output \"FOO MARKER3\" } */"}, {"sha": "a73061b6ae2c563432ea0617ce980e80dbf8551e", "filename": "gcc/ubsan.c", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d7c611fc0c4be0a0be935efe97a7887e78bc2a/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "patch": "@@ -2221,6 +2221,72 @@ instrument_object_size (gimple_stmt_iterator *gsi, tree t, bool is_lhs)\n   gsi_insert_before (gsi, g, GSI_SAME_STMT);\n }\n \n+/* Instrument values passed to builtin functions.  */\n+\n+static void\n+instrument_builtin (gimple_stmt_iterator *gsi)\n+{\n+  gimple *stmt = gsi_stmt (*gsi);\n+  location_t loc = gimple_location (stmt);\n+  tree arg;\n+  enum built_in_function fcode\n+    = DECL_FUNCTION_CODE (gimple_call_fndecl (stmt));\n+  int kind = 0;\n+  switch (fcode)\n+    {\n+    CASE_INT_FN (BUILT_IN_CLZ):\n+      kind = 1;\n+      gcc_fallthrough ();\n+    CASE_INT_FN (BUILT_IN_CTZ):\n+      arg = gimple_call_arg (stmt, 0);\n+      if (!integer_nonzerop (arg))\n+\t{\n+\t  gimple *g;\n+\t  if (!is_gimple_val (arg))\n+\t    {\n+\t      g = gimple_build_assign (make_ssa_name (TREE_TYPE (arg)), arg);\n+\t      gimple_set_location (g, loc);\n+\t      gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t      arg = gimple_assign_lhs (g);\n+\t    }\n+\n+\t  basic_block then_bb, fallthru_bb;\n+\t  *gsi = create_cond_insert_point (gsi, true, false, true,\n+\t\t\t\t\t   &then_bb, &fallthru_bb);\n+\t  g = gimple_build_cond (EQ_EXPR, arg,\n+\t\t\t\t build_zero_cst (TREE_TYPE (arg)),\n+\t\t\t\t NULL_TREE, NULL_TREE);\n+\t  gimple_set_location (g, loc);\n+\t  gsi_insert_after (gsi, g, GSI_NEW_STMT);\n+\n+\t  *gsi = gsi_after_labels (then_bb);\n+\t  if (flag_sanitize_undefined_trap_on_error)\n+\t    g = gimple_build_call (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+\t  else\n+\t    {\n+\t      tree t = build_int_cst (unsigned_char_type_node, kind);\n+\t      tree data = ubsan_create_data (\"__ubsan_builtin_data\",\n+\t\t\t\t\t     1, &loc, NULL_TREE, t, NULL_TREE);\n+\t      data = build_fold_addr_expr_loc (loc, data);\n+\t      enum built_in_function bcode\n+\t\t= (flag_sanitize_recover & SANITIZE_BUILTIN)\n+\t\t  ? BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN\n+\t\t  : BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT;\n+\t      tree fn = builtin_decl_explicit (bcode);\n+\n+\t      g = gimple_build_call (fn, 1, data);\n+\t    }\n+\t  gimple_set_location (g, loc);\n+\t  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t  ubsan_create_edge (g);\n+\t}\n+      *gsi = gsi_for_stmt (stmt);\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n namespace {\n \n const pass_data pass_data_ubsan =\n@@ -2252,7 +2318,8 @@ class pass_ubsan : public gimple_opt_pass\n \t\t\t\t| SANITIZE_NONNULL_ATTRIBUTE\n \t\t\t\t| SANITIZE_RETURNS_NONNULL_ATTRIBUTE\n \t\t\t\t| SANITIZE_OBJECT_SIZE\n-\t\t\t\t| SANITIZE_POINTER_OVERFLOW));\n+\t\t\t\t| SANITIZE_POINTER_OVERFLOW\n+\t\t\t\t| SANITIZE_BUILTIN));\n     }\n \n   virtual unsigned int execute (function *);\n@@ -2317,6 +2384,13 @@ pass_ubsan::execute (function *fun)\n \t      bb = gimple_bb (stmt);\n \t    }\n \n+\t  if (sanitize_flags_p (SANITIZE_BUILTIN, fun->decl)\n+\t      && gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n+\t    {\n+\t      instrument_builtin (&gsi);\n+\t      bb = gimple_bb (stmt);\n+\t    }\n+\n \t  if (sanitize_flags_p (SANITIZE_RETURNS_NONNULL_ATTRIBUTE, fun->decl)\n \t      && gimple_code (stmt) == GIMPLE_RETURN)\n \t    {"}]}