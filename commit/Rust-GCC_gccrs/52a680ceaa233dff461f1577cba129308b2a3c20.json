{"sha": "52a680ceaa233dff461f1577cba129308b2a3c20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJhNjgwY2VhYTIzM2RmZjQ2MWYxNTc3Y2JhMTI5MzA4YjJhM2MyMA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-05-12T13:47:04Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-05-12T13:47:04Z"}, "message": "rs6000.md (extzv): FAIL for SImode.\n\n\t* config/rs6000/rs6000.md (extzv): FAIL for SImode.\n\t(extzvsi_internal, *extzvsi_internal1, *extzvsi_internal2,\n\t*rotlsi3_internal7le, *rotlsi3_internal7be, *rotlsi3_internal8le,\n\t*rotlsi3_internal8be, *rotlsi3_internal9le, *rotlsi3_internal9be,\n\t*rotlsi3_internal10le, *rotlsi3_internal10be, *rotlsi3_internal11le,\n\t*rotlsi3_internal11be, *rotlsi3_internal12le, *rotlsi3_internal12be,\n\t*lshiftrt_internal1le, *lshiftrt_internal1be, *lshiftrt_internal2le,\n\t*lshiftrt_internal2be, *lshiftrt_internal3le, *lshiftrt_internal3be,\n\t*lshiftrt_internal4le, *lshiftrt_internal4be, *lshiftrt_internal5le,\n\t*lshiftrt_internal5be, *lshiftrt_internal5le, *lshiftrt_internal5be,\n\t*rotldi3_internal7le, *rotldi3_internal7be, *rotldi3_internal8le,\n\t*rotldi3_internal8be, *rotldi3_internal9le, *rotldi3_internal9be,\n\t*rotldi3_internal10le, *rotldi3_internal10be, *rotldi3_internal11le,\n\t*rotldi3_internal11be, *rotldi3_internal12le, *rotldi3_internal12be,\n\t*rotldi3_internal13le, *rotldi3_internal13be, *rotldi3_internal14le,\n\t*rotldi3_internal14be, *rotldi3_internal15le, *rotldi3_internal15be,\n\tand 30 corresponding splitters): Delete.\n\nFrom-SVN: r223070", "tree": {"sha": "dcd3e955d51cf6fa9fc2662d8c99b731f4c36f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcd3e955d51cf6fa9fc2662d8c99b731f4c36f09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52a680ceaa233dff461f1577cba129308b2a3c20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a680ceaa233dff461f1577cba129308b2a3c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a680ceaa233dff461f1577cba129308b2a3c20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a680ceaa233dff461f1577cba129308b2a3c20/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f369372b41c29447cdfdbe227d74a41c4e0327c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f369372b41c29447cdfdbe227d74a41c4e0327c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f369372b41c29447cdfdbe227d74a41c4e0327c5"}], "stats": {"total": 1305, "additions": 26, "deletions": 1279}, "files": [{"sha": "e605c56a5e5957eb2e54d6633028321c8ad81c93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a680ceaa233dff461f1577cba129308b2a3c20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a680ceaa233dff461f1577cba129308b2a3c20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52a680ceaa233dff461f1577cba129308b2a3c20", "patch": "@@ -1,3 +1,23 @@\n+2015-05-12  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (extzv): FAIL for SImode.\n+\t(extzvsi_internal, *extzvsi_internal1, *extzvsi_internal2,\n+\t*rotlsi3_internal7le, *rotlsi3_internal7be, *rotlsi3_internal8le,\n+\t*rotlsi3_internal8be, *rotlsi3_internal9le, *rotlsi3_internal9be,\n+\t*rotlsi3_internal10le, *rotlsi3_internal10be, *rotlsi3_internal11le,\n+\t*rotlsi3_internal11be, *rotlsi3_internal12le, *rotlsi3_internal12be,\n+\t*lshiftrt_internal1le, *lshiftrt_internal1be, *lshiftrt_internal2le,\n+\t*lshiftrt_internal2be, *lshiftrt_internal3le, *lshiftrt_internal3be,\n+\t*lshiftrt_internal4le, *lshiftrt_internal4be, *lshiftrt_internal5le,\n+\t*lshiftrt_internal5be, *lshiftrt_internal5le, *lshiftrt_internal5be,\n+\t*rotldi3_internal7le, *rotldi3_internal7be, *rotldi3_internal8le,\n+\t*rotldi3_internal8be, *rotldi3_internal9le, *rotldi3_internal9be,\n+\t*rotldi3_internal10le, *rotldi3_internal10be, *rotldi3_internal11le,\n+\t*rotldi3_internal11be, *rotldi3_internal12le, *rotldi3_internal12be,\n+\t*rotldi3_internal13le, *rotldi3_internal13be, *rotldi3_internal14le,\n+\t*rotldi3_internal14be, *rotldi3_internal15le, *rotldi3_internal15be,\n+\tand 30 corresponding splitters): Delete.\n+\n 2015-05-12  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (define_split for bswaphi): Don't use"}, {"sha": "d3b1a7a0df4791e2bc1f02cb3911d4eb920a6319", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 1279, "changes": 1285, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a680ceaa233dff461f1577cba129308b2a3c20/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a680ceaa233dff461f1577cba129308b2a3c20/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=52a680ceaa233dff461f1577cba129308b2a3c20", "patch": "@@ -3604,141 +3604,11 @@\n     emit_insn (gen_extzvdi_internal (operands[0], operands[1], operands[2],\n \t\t\t\t     operands[3]));\n   else\n-    emit_insn (gen_extzvsi_internal (operands[0], operands[1], operands[2],\n-\t\t\t\t     operands[3]));\n+    FAIL;\n+\n   DONE;\n }\")\n \n-(define_insn \"extzvsi_internal\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\")))]\n-  \"\"\n-  \"*\n-{\n-  int start = INTVAL (operands[3]) & 31;\n-  int size = INTVAL (operands[2]) & 31;\n-\n-  if (start + size >= 32)\n-    operands[3] = const0_rtx;\n-  else\n-    operands[3] = GEN_INT (start + size);\n-  return \\\"rlwinm %0,%1,%3,%s2,31\\\";\n-}\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"*extzvsi_internal1\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i,i\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i,i\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"=r,r\"))]\n-  \"\"\n-  \"*\n-{\n-  int start = INTVAL (operands[3]) & 31;\n-  int size = INTVAL (operands[2]) & 31;\n-\n-  /* Force split for non-cc0 compare.  */\n-  if (which_alternative == 1)\n-     return \\\"#\\\";\n-\n-  /* If the bit-field being tested fits in the upper or lower half of a\n-     word, it is possible to use andiu. or andil. to test it.  This is\n-     useful because the condition register set-use delay is smaller for\n-     andi[ul]. than for rlinm.  This doesn't work when the starting bit\n-     position is 0 because the LT and GT bits may be set wrong.  */\n-\n-  if ((start > 0 && start + size <= 16) || start >= 16)\n-    {\n-      operands[3] = GEN_INT (((1 << (16 - (start & 15)))\n-\t\t\t      - (1 << (16 - (start & 15) - size))));\n-      if (start < 16)\n-\treturn \\\"andis. %4,%1,%3\\\";\n-      else\n-\treturn \\\"andi. %4,%1,%3\\\";\n-    }\n-\n-  if (start + size >= 32)\n-    operands[3] = const0_rtx;\n-  else\n-    operands[3] = GEN_INT (start + size);\n-  return \\\"rlwinm. %4,%1,%3,%s2,31\\\";\n-}\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"reload_completed\"\n-  [(set (match_dup 4)\n-\t(zero_extract:SI (match_dup 1) (match_dup 2)\n-\t\t\t (match_dup 3)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 4)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*extzvsi_internal2\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i,i\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i,i\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extract:SI (match_dup 1) (match_dup 2) (match_dup 3)))]\n-  \"\"\n-  \"*\n-{\n-  int start = INTVAL (operands[3]) & 31;\n-  int size = INTVAL (operands[2]) & 31;\n-\n-  /* Force split for non-cc0 compare.  */\n-  if (which_alternative == 1)\n-     return \\\"#\\\";\n-\n-  /* Since we are using the output value, we can't ignore any need for\n-     a shift.  The bit-field must end at the LSB.  */\n-  if (start >= 16 && start + size == 32)\n-    {\n-      operands[3] = GEN_INT ((1 << size) - 1);\n-      return \\\"andi. %0,%1,%3\\\";\n-    }\n-\n-  if (start + size >= 32)\n-    operands[3] = const0_rtx;\n-  else\n-    operands[3] = GEN_INT (start + size);\n-  return \\\"rlwinm. %0,%1,%3,%s2,31\\\";\n-}\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extract:SI (match_dup 1) (match_dup 2) (match_dup 3)))]\n-  \"reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extract:SI (match_dup 1) (match_dup 2) (match_dup 3)))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_insn \"extzvdi_internal\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(zero_extract:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n@@ -3955,336 +3825,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"*rotlsi3_internal7le\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (subreg:QI\n-\t  (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")) 0)))]\n-  \"!BYTES_BIG_ENDIAN\"\n-  \"rlw%I2nm %0,%1,%h2,0xff\"\n-  [(set (attr \"cell_micro\")\n-     (if_then_else (match_operand:SI 2 \"const_int_operand\" \"\")\n-\t(const_string \"not\")\n-\t(const_string \"always\")))\n-   (set_attr \"type\" \"shift\")])\n-\n-(define_insn \"*rotlsi3_internal7be\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (subreg:QI\n-\t  (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")) 3)))]\n-  \"BYTES_BIG_ENDIAN\"\n-  \"rlw%I2nm %0,%1,%h2,0xff\"\n-  [(set (attr \"cell_micro\")\n-     (if_then_else (match_operand:SI 2 \"const_int_operand\" \"\")\n-\t(const_string \"not\")\n-\t(const_string \"always\")))\n-   (set_attr \"type\" \"shift\")])\n-\n-(define_insn \"*rotlsi3_internal8le\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:QI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\")) 0))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"!BYTES_BIG_ENDIAN\"\n-  \"@\n-   rlw%I2nm. %3,%1,%h2,0xff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*rotlsi3_internal8be\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:QI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\")) 3))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"BYTES_BIG_ENDIAN\"\n-  \"@\n-   rlw%I2nm. %3,%1,%h2,0xff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:QI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\")) 0))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"!BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:SI (subreg:QI\n-\t\t      (rotate:SI (match_dup 1)\n-\t\t\t\t (match_dup 2)) 0)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:QI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\")) 3))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:SI (subreg:QI\n-\t\t      (rotate:SI (match_dup 1)\n-\t\t\t\t (match_dup 2)) 3)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*rotlsi3_internal9le\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:QI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\")) 0))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI (subreg:QI (rotate:SI (match_dup 1) (match_dup 2)) 0)))]\n-  \"!BYTES_BIG_ENDIAN\"\n-  \"@\n-   rlw%I2nm. %0,%1,%h2,0xff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*rotlsi3_internal9be\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:QI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\")) 3))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI (subreg:QI (rotate:SI (match_dup 1) (match_dup 2)) 3)))]\n-  \"BYTES_BIG_ENDIAN\"\n-  \"@\n-   rlw%I2nm. %0,%1,%h2,0xff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:QI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\")) 0))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:SI (subreg:QI (rotate:SI (match_dup 1) (match_dup 2)) 0)))]\n-  \"!BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:SI (subreg:QI (rotate:SI (match_dup 1) (match_dup 2)) 0)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:QI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\")) 3))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:SI (subreg:QI (rotate:SI (match_dup 1) (match_dup 2)) 3)))]\n-  \"BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:SI (subreg:QI (rotate:SI (match_dup 1) (match_dup 2)) 3)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*rotlsi3_internal10le\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (subreg:HI\n-\t  (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"rn\")) 0)))]\n-  \"!BYTES_BIG_ENDIAN\"\n-  \"rlw%I2nm %0,%1,%h2,0xffff\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")])\n-\n-(define_insn \"*rotlsi3_internal10be\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (subreg:HI\n-\t  (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"rn\")) 2)))]\n-  \"BYTES_BIG_ENDIAN\"\n-  \"rlw%I2nm %0,%1,%h2,0xffff\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")])\n-\n-(define_insn \"*rotlsi3_internal11le\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:HI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\")) 0))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"!BYTES_BIG_ENDIAN\"\n-  \"@\n-   rlw%I2nm. %3,%1,%h2,0xffff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*rotlsi3_internal11be\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:HI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\")) 2))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"BYTES_BIG_ENDIAN\"\n-  \"@\n-   rlw%I2nm. %3,%1,%h2,0xffff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:HI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\")) 0))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"!BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:SI (subreg:HI\n-\t\t      (rotate:SI (match_dup 1)\n-\t\t\t\t (match_dup 2)) 0)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:HI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\")) 2))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:SI (subreg:HI\n-\t\t      (rotate:SI (match_dup 1)\n-\t\t\t\t (match_dup 2)) 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*rotlsi3_internal12le\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:HI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\")) 0))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI (subreg:HI (rotate:SI (match_dup 1) (match_dup 2)) 0)))]\n-  \"!BYTES_BIG_ENDIAN\"\n-  \"@\n-   rlw%I2nm. %0,%1,%h2,0xffff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*rotlsi3_internal12be\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:HI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\")) 2))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI (subreg:HI (rotate:SI (match_dup 1) (match_dup 2)) 2)))]\n-  \"BYTES_BIG_ENDIAN\"\n-  \"@\n-   rlw%I2nm. %0,%1,%h2,0xffff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:HI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\")) 0))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:SI (subreg:HI (rotate:SI (match_dup 1) (match_dup 2)) 0)))]\n-  \"!BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:SI (subreg:HI (rotate:SI (match_dup 1) (match_dup 2)) 0)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:SI\n-\t\t     (subreg:HI\n-\t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\")) 2))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:SI (subreg:HI (rotate:SI (match_dup 1) (match_dup 2)) 2)))]\n-  \"BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:SI (subreg:HI (rotate:SI (match_dup 1) (match_dup 2)) 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n \n (define_insn \"ashl<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n@@ -4566,339 +4106,11 @@\n \t\t (match_operand:SI 3 \"mask_operand\" \"\"))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(and:SI (lshiftrt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"includes_rshift_p (operands[2], operands[3]) && reload_completed\"\n-  [(set (match_dup 0)\n-\t(and:SI (lshiftrt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*lshiftrt_internal1le\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (subreg:QI\n-\t  (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t       (match_operand:SI 2 \"const_int_operand\" \"i\")) 0)))]\n-  \"!BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (255))\"\n-  \"rlwinm %0,%1,%s2,0xff\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"*lshiftrt_internal1be\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (subreg:QI\n-\t  (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t       (match_operand:SI 2 \"const_int_operand\" \"i\")) 3)))]\n-  \"BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (255))\"\n-  \"rlwinm %0,%1,%s2,0xff\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"*lshiftrt_internal2le\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:QI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"i,i\")) 0))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"!BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (255))\"\n-  \"@\n-   rlwinm. %3,%1,%s2,0xff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*lshiftrt_internal2be\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:QI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"i,i\")) 3))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (255))\"\n-  \"@\n-   rlwinm. %3,%1,%s2,0xff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:QI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\")) 0))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"!BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (255)) && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:SI (subreg:QI\n-\t   (lshiftrt:SI (match_dup 1)\n-\t\t\t(match_dup 2)) 0)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:QI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\")) 3))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (255)) && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:SI (subreg:QI\n-\t   (lshiftrt:SI (match_dup 1)\n-\t\t\t(match_dup 2)) 3)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*lshiftrt_internal3le\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:QI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"i,i\")) 0))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI (subreg:QI (lshiftrt:SI (match_dup 1) (match_dup 2)) 0)))]\n-  \"!BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (255))\"\n-  \"@\n-   rlwinm. %0,%1,%s2,0xff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*lshiftrt_internal3be\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:QI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"i,i\")) 3))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI (subreg:QI (lshiftrt:SI (match_dup 1) (match_dup 2)) 3)))]\n-  \"BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (255))\"\n-  \"@\n-   rlwinm. %0,%1,%s2,0xff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:QI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\")) 0))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:SI (subreg:QI (lshiftrt:SI (match_dup 1) (match_dup 2)) 0)))]\n-  \"!BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (255)) && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:SI (subreg:QI (lshiftrt:SI (match_dup 1) (match_dup 2)) 0)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:QI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\")) 3))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:SI (subreg:QI (lshiftrt:SI (match_dup 1) (match_dup 2)) 3)))]\n-  \"BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (255)) && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:SI (subreg:QI (lshiftrt:SI (match_dup 1) (match_dup 2)) 3)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*lshiftrt_internal4le\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (subreg:HI\n-\t  (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t       (match_operand:SI 2 \"const_int_operand\" \"i\")) 0)))]\n-  \"!BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (65535))\"\n-  \"rlwinm %0,%1,%s2,0xffff\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"*lshiftrt_internal4be\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (subreg:HI\n-\t  (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t       (match_operand:SI 2 \"const_int_operand\" \"i\")) 2)))]\n-  \"BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (65535))\"\n-  \"rlwinm %0,%1,%s2,0xffff\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"*lshiftrt_internal5le\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:HI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"i,i\")) 0))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"!BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (65535))\"\n-  \"@\n-   rlwinm. %3,%1,%s2,0xffff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*lshiftrt_internal5be\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:HI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"i,i\")) 2))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (65535))\"\n-  \"@\n-   rlwinm. %3,%1,%s2,0xffff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:HI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\")) 0))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"!BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (65535)) && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:SI (subreg:HI\n-\t   (lshiftrt:SI (match_dup 1)\n-\t\t\t(match_dup 2)) 0)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:HI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\")) 2))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (65535)) && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:SI (subreg:HI\n-\t   (lshiftrt:SI (match_dup 1)\n-\t\t\t(match_dup 2)) 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*lshiftrt_internal5le\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:HI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"i,i\")) 0))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI (subreg:HI (lshiftrt:SI (match_dup 1) (match_dup 2)) 0)))]\n-  \"!BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (65535))\"\n-  \"@\n-   rlwinm. %0,%1,%s2,0xffff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*lshiftrt_internal5be\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:HI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"i,i\")) 2))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI (subreg:HI (lshiftrt:SI (match_dup 1) (match_dup 2)) 2)))]\n-  \"BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (65535))\"\n-  \"@\n-   rlwinm. %0,%1,%s2,0xffff\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:HI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\")) 0))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:SI (subreg:HI (lshiftrt:SI (match_dup 1) (match_dup 2)) 0)))]\n-  \"!BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (65535)) && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:SI (subreg:HI (lshiftrt:SI (match_dup 1) (match_dup 2)) 0)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (zero_extend:SI\n-\t  (subreg:HI\n-\t   (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\")) 2))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:SI (subreg:HI (lshiftrt:SI (match_dup 1) (match_dup 2)) 2)))]\n-  \"BYTES_BIG_ENDIAN && includes_rshift_p (operands[2], GEN_INT (65535)) && reload_completed\"\n+\t(and:SI (lshiftrt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n+  \"includes_rshift_p (operands[2], operands[3]) && reload_completed\"\n   [(set (match_dup 0)\n-\t(zero_extend:SI (subreg:HI (lshiftrt:SI (match_dup 1) (match_dup 2)) 2)))\n-   (set (match_dup 3)\n+\t(and:SI (lshiftrt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 4)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n@@ -6682,491 +5894,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"*rotldi3_internal7le\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (subreg:QI\n-\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"rn\")) 0)))]\n-  \"TARGET_POWERPC64 && !BYTES_BIG_ENDIAN\"\n-  \"rld%I2cl %0,%1,%H2,56\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")])\n-\n-(define_insn \"*rotldi3_internal7be\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (subreg:QI\n-\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"rn\")) 7)))]\n-  \"TARGET_POWERPC64 && BYTES_BIG_ENDIAN\"\n-  \"rld%I2cl %0,%1,%H2,56\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")])\n-\n-(define_insn \"*rotldi3_internal8le\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:QI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 0))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_64BIT && !BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %3,%1,%H2,56\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*rotldi3_internal8be\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:QI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 7))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_64BIT && BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %3,%1,%H2,56\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:QI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 0))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && !BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:DI (subreg:QI\n-\t\t      (rotate:DI (match_dup 1)\n-\t\t\t\t (match_dup 2)) 0)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:QI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 7))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:DI (subreg:QI\n-\t\t      (rotate:DI (match_dup 1)\n-\t\t\t\t (match_dup 2)) 7)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*rotldi3_internal9le\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:QI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 0))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (subreg:QI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n-  \"TARGET_64BIT && !BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %0,%1,%H2,56\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*rotldi3_internal9be\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:QI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 7))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (subreg:QI (rotate:DI (match_dup 1) (match_dup 2)) 7)))]\n-  \"TARGET_64BIT && BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %0,%1,%H2,56\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:QI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 0))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (subreg:QI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n-  \"TARGET_POWERPC64 && !BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (subreg:QI (rotate:DI (match_dup 1) (match_dup 2)) 0)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:QI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 7))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (subreg:QI (rotate:DI (match_dup 1) (match_dup 2)) 7)))]\n-  \"TARGET_POWERPC64 && BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (subreg:QI (rotate:DI (match_dup 1) (match_dup 2)) 7)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*rotldi3_internal10le\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (subreg:HI\n-\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"rn\")) 0)))]\n-  \"TARGET_POWERPC64 && !BYTES_BIG_ENDIAN\"\n-  \"rld%I2cl %0,%1,%H2,48\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")])\n-\n-(define_insn \"*rotldi3_internal10be\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (subreg:HI\n-\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"rn\")) 6)))]\n-  \"TARGET_POWERPC64 && BYTES_BIG_ENDIAN\"\n-  \"rld%I2cl %0,%1,%H2,48\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")])\n-\n-(define_insn \"*rotldi3_internal11le\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:HI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 0))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_64BIT && !BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %3,%1,%H2,48\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*rotldi3_internal11be\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:HI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 6))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_64BIT && BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %3,%1,%H2,48\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:HI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 0))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && !BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:DI (subreg:HI\n-\t\t      (rotate:DI (match_dup 1)\n-\t\t\t\t (match_dup 2)) 0)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:HI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 6))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:DI (subreg:HI\n-\t\t      (rotate:DI (match_dup 1)\n-\t\t\t\t (match_dup 2)) 6)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*rotldi3_internal12le\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:HI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 0))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (subreg:HI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n-  \"TARGET_64BIT && !BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %0,%1,%H2,48\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*rotldi3_internal12be\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:HI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 6))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (subreg:HI (rotate:DI (match_dup 1) (match_dup 2)) 6)))]\n-  \"TARGET_64BIT && BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %0,%1,%H2,48\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:HI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 0))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (subreg:HI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n-  \"TARGET_POWERPC64 && !BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (subreg:HI (rotate:DI (match_dup 1) (match_dup 2)) 0)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:HI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 6))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (subreg:HI (rotate:DI (match_dup 1) (match_dup 2)) 6)))]\n-  \"TARGET_POWERPC64 && BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (subreg:HI (rotate:DI (match_dup 1) (match_dup 2)) 6)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*rotldi3_internal13le\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (subreg:SI\n-\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"rn\")) 0)))]\n-  \"TARGET_POWERPC64 && !BYTES_BIG_ENDIAN\"\n-  \"rld%I2cl %0,%1,%H2,32\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")])\n-\n-(define_insn \"*rotldi3_internal13be\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (subreg:SI\n-\t  (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_cint_operand\" \"rn\")) 4)))]\n-  \"TARGET_POWERPC64 && BYTES_BIG_ENDIAN\"\n-  \"rld%I2cl %0,%1,%H2,32\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")])\n-\n-(define_insn \"*rotldi3_internal14le\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:SI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 0))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_64BIT && !BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %3,%1,%H2,32\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*rotldi3_internal14be\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:SI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 4))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_64BIT && BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %3,%1,%H2,32\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:SI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 0))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && !BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:DI (subreg:SI\n-\t\t      (rotate:DI (match_dup 1)\n-\t\t\t\t (match_dup 2)) 0)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:SI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 4))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 3)\n-\t(zero_extend:DI (subreg:SI\n-\t\t      (rotate:DI (match_dup 1)\n-\t\t\t\t (match_dup 2)) 4)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*rotldi3_internal15le\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:SI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 0))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (subreg:SI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n-  \"TARGET_64BIT && !BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %0,%1,%H2,32\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*rotldi3_internal15be\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:SI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"rn,rn\")) 4))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (subreg:SI (rotate:DI (match_dup 1) (match_dup 2)) 4)))]\n-  \"TARGET_64BIT && BYTES_BIG_ENDIAN\"\n-  \"@\n-   rld%I2cl. %0,%1,%H2,32\n-   #\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"maybe_var_shift\" \"yes\")\n-   (set_attr \"dot\" \"yes\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:SI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 0))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (subreg:SI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n-  \"TARGET_POWERPC64 && !BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (subreg:SI (rotate:DI (match_dup 1) (match_dup 2)) 0)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI\n-\t\t     (subreg:SI\n-\t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"\")) 4))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (subreg:SI (rotate:DI (match_dup 1) (match_dup 2)) 4)))]\n-  \"TARGET_POWERPC64 && BYTES_BIG_ENDIAN && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (subreg:SI (rotate:DI (match_dup 1) (match_dup 2)) 4)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n \n (define_insn \"*ashldi3_internal4\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")"}]}