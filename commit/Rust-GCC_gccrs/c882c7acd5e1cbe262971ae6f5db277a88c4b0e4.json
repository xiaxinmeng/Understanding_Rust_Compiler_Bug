{"sha": "c882c7acd5e1cbe262971ae6f5db277a88c4b0e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg4MmM3YWNkNWUxY2JlMjYyOTcxYWU2ZjVkYjI3N2E4OGM0YjBlNA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2002-03-14T15:09:13Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2002-03-14T15:09:13Z"}, "message": "re PR target/5828 (gcc-3.0.4 on arm : floating point registers incorrectly reloaded)\n\nPR target/5828\n* arm.c (arm_output_epilogue): Fix floating-point register save\nadjustment when using a frame pointer.\n\nCo-Authored-By: Jeroen Dobbelaere <jeroen.dobbelaere@acunia.com>\n\nFrom-SVN: r50771", "tree": {"sha": "091a77383d5e02779d037a032b80317e6972c046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/091a77383d5e02779d037a032b80317e6972c046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c882c7acd5e1cbe262971ae6f5db277a88c4b0e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c882c7acd5e1cbe262971ae6f5db277a88c4b0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c882c7acd5e1cbe262971ae6f5db277a88c4b0e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c882c7acd5e1cbe262971ae6f5db277a88c4b0e4/comments", "author": null, "committer": null, "parents": [{"sha": "d3f129b340ca8a3b6d67518791ea962db9c3e3f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3f129b340ca8a3b6d67518791ea962db9c3e3f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3f129b340ca8a3b6d67518791ea962db9c3e3f8"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "709590399299a0a929e97e03028c245bcd2726a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c882c7acd5e1cbe262971ae6f5db277a88c4b0e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c882c7acd5e1cbe262971ae6f5db277a88c4b0e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c882c7acd5e1cbe262971ae6f5db277a88c4b0e4", "patch": "@@ -1,3 +1,10 @@\n+2002-03-14  Richard Earnshaw  <rearnsha@arm.com>\n+\t    Jeroen Dobbelaere  <jeroen.dobbelaere@acunia.com>\n+\n+\tPR target/5828\n+\t* arm.c (arm_output_epilogue): Fix floating-point register save\n+\tadjustment when using a frame pointer.\n+\n 2002-03-14  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (FP_INC, UNITS_PER_FPVALUE): New macros."}, {"sha": "921411a983afe59fbc2bb0605951cf79ecd80697", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c882c7acd5e1cbe262971ae6f5db277a88c4b0e4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c882c7acd5e1cbe262971ae6f5db277a88c4b0e4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c882c7acd5e1cbe262971ae6f5db277a88c4b0e4", "patch": "@@ -7467,8 +7467,9 @@ arm_output_epilogue (really_return)\n   int reg;\n   unsigned long saved_regs_mask;\n   unsigned long func_type;\n-  /* If we need this, then it will always be at least this much.  */\n-  int floats_offset = 12;\n+  /* Floats_offset is the offset from the \"virtual\" frame.  In an APCS \n+     frame that is $fp + 4 for a non-variadic function.  */\n+  int floats_offset = 0;\n   rtx operands[3];\n   int frame_size = get_frame_size ();\n   FILE * f = asm_out_file;\n@@ -7505,21 +7506,26 @@ arm_output_epilogue (really_return)\n   \n   saved_regs_mask = arm_compute_save_reg_mask ();\n   \n+  /* XXX We should adjust floats_offset for any anonymous args, and then\n+     re-adjust vfp_offset below to compensate.  */\n+\n   /* Compute how far away the floats will be.  */\n   for (reg = 0; reg <= LAST_ARM_REGNUM; reg ++)\n     if (saved_regs_mask & (1 << reg))\n       floats_offset += 4;\n   \n   if (frame_pointer_needed)\n     {\n+      int vfp_offset = 4;\n+\n       if (arm_fpu_arch == FP_SOFT2)\n \t{\n \t  for (reg = LAST_ARM_FP_REGNUM; reg >= FIRST_ARM_FP_REGNUM; reg--)\n \t    if (regs_ever_live[reg] && !call_used_regs[reg])\n \t      {\n \t\tfloats_offset += 12;\n \t\tasm_fprintf (f, \"\\tldfe\\t%r, [%r, #-%d]\\n\", \n-\t\t\t     reg, FP_REGNUM, floats_offset);\n+\t\t\t     reg, FP_REGNUM, floats_offset - vfp_offset);\n \t      }\n \t}\n       else\n@@ -7536,7 +7542,7 @@ arm_output_epilogue (really_return)\n \t\t  if (start_reg - reg == 3)\n \t\t    {\n \t\t      asm_fprintf (f, \"\\tlfm\\t%r, 4, [%r, #-%d]\\n\",\n-\t\t\t           reg, FP_REGNUM, floats_offset);\n+\t\t\t           reg, FP_REGNUM, floats_offset - vfp_offset);\n \t\t      start_reg = reg - 1;\n \t\t    }\n \t\t}\n@@ -7545,7 +7551,7 @@ arm_output_epilogue (really_return)\n \t\t  if (reg != start_reg)\n \t\t    asm_fprintf (f, \"\\tlfm\\t%r, %d, [%r, #-%d]\\n\",\n \t\t\t\t reg + 1, start_reg - reg,\n-\t\t\t\t FP_REGNUM, floats_offset);\n+\t\t\t\t FP_REGNUM, floats_offset - vfp_offset);\n \t\t  start_reg = reg - 1;\n \t\t}\n \t    }\n@@ -7554,7 +7560,7 @@ arm_output_epilogue (really_return)\n \t  if (reg != start_reg)\n \t    asm_fprintf (f, \"\\tlfm\\t%r, %d, [%r, #-%d]\\n\",\n \t\t\t reg + 1, start_reg - reg,\n-\t\t\t FP_REGNUM, floats_offset);\n+\t\t\t FP_REGNUM, floats_offset - vfp_offset);\n \t}\n \n       /* saved_regs_mask should contain the IP, which at the time of stack"}]}