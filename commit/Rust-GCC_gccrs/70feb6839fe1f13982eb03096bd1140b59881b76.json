{"sha": "70feb6839fe1f13982eb03096bd1140b59881b76", "node_id": "C_kwDOANBUbNoAKDcwZmViNjgzOWZlMWYxMzk4MmViMDMwOTZiZDExNDBiNTk4ODFiNzY", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-09T04:22:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-09T22:11:11Z"}, "message": "compiler: treat notinheap types as not being pointers\n\nBy definition, a type is marked notinheap doesn't contain any pointers\nthat the garbage collector cares about, and neither does a pointer to\nsuch a type.  Change the type descriptors to consistently treat such\ntypes as not being pointers, by setting ptrdata to 0 and gcdata to nil.\n\nChange-Id: Id8466555ec493456ff5ff09f1670551414619bd2\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/384118\nTrust: Ian Lance Taylor <iant@golang.org>\nReviewed-by: Cherry Mui <cherryyz@google.com>", "tree": {"sha": "491de9cd26e2d315bb4ba389bea9e969700793c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/491de9cd26e2d315bb4ba389bea9e969700793c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70feb6839fe1f13982eb03096bd1140b59881b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70feb6839fe1f13982eb03096bd1140b59881b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70feb6839fe1f13982eb03096bd1140b59881b76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70feb6839fe1f13982eb03096bd1140b59881b76/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ffea93ef31c03ad8cdcb54e71ec868b57b264f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ffea93ef31c03ad8cdcb54e71ec868b57b264f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ffea93ef31c03ad8cdcb54e71ec868b57b264f"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "3ea7aed35066907fbc1a03e5f845bf099e200dea", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70feb6839fe1f13982eb03096bd1140b59881b76/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70feb6839fe1f13982eb03096bd1140b59881b76/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=70feb6839fe1f13982eb03096bd1140b59881b76", "patch": "@@ -1,4 +1,4 @@\n-3b1e46937d11b043d0986a3dfefaee27454c3da0\n+7dffb933d33ff288675c8094d05c31b35cbf7e4d\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "30d5c9fcb0b841db2b1b45884fa603267ab70a38", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70feb6839fe1f13982eb03096bd1140b59881b76/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70feb6839fe1f13982eb03096bd1140b59881b76/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=70feb6839fe1f13982eb03096bd1140b59881b76", "patch": "@@ -8869,10 +8869,13 @@ Named_object::get_backend(Gogo* gogo, std::vector<Bexpression*>& const_decls,\n           {\n             named_type->\n                 type_descriptor_pointer(gogo, Linemap::predeclared_location());\n-\t    named_type->gc_symbol_pointer(gogo);\n             Type* pn = Type::make_pointer_type(named_type);\n             pn->type_descriptor_pointer(gogo, Linemap::predeclared_location());\n-\t    pn->gc_symbol_pointer(gogo);\n+\t    if (named_type->in_heap())\n+\t      {\n+\t\tnamed_type->gc_symbol_pointer(gogo);\n+\t\tpn->gc_symbol_pointer(gogo);\n+\t      }\n           }\n       }\n       break;"}, {"sha": "ee3467666d87caac60cb29fb35f28e07cae5fa05", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70feb6839fe1f13982eb03096bd1140b59881b76/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70feb6839fe1f13982eb03096bd1140b59881b76/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=70feb6839fe1f13982eb03096bd1140b59881b76", "patch": "@@ -2513,13 +2513,18 @@ Type::type_descriptor_constructor(Gogo* gogo, int runtime_type_kind,\n   Expression_list* vals = new Expression_list();\n   vals->reserve(12);\n \n-  if (!this->has_pointer())\n+  bool has_pointer;\n+  if (name != NULL)\n+    has_pointer = name->has_pointer();\n+  else\n+    has_pointer = this->has_pointer();\n+  if (!has_pointer)\n     runtime_type_kind |= RUNTIME_TYPE_KIND_NO_POINTERS;\n   if (this->is_direct_iface_type())\n     runtime_type_kind |= RUNTIME_TYPE_KIND_DIRECT_IFACE;\n   int64_t ptrsize;\n   int64_t ptrdata;\n-  if (this->needs_gcprog(gogo, &ptrsize, &ptrdata))\n+  if (has_pointer && this->needs_gcprog(gogo, &ptrsize, &ptrdata))\n     runtime_type_kind |= RUNTIME_TYPE_KIND_GC_PROG;\n \n   Struct_field_list::const_iterator p = fields->begin();\n@@ -2530,7 +2535,10 @@ Type::type_descriptor_constructor(Gogo* gogo, int runtime_type_kind,\n   ++p;\n   go_assert(p->is_field_name(\"ptrdata\"));\n   type_info = Expression::TYPE_INFO_DESCRIPTOR_PTRDATA;\n-  vals->push_back(Expression::make_type_info(this, type_info));\n+  if (has_pointer)\n+    vals->push_back(Expression::make_type_info(this, type_info));\n+  else\n+    vals->push_back(Expression::make_integer_ul(0, p->type(), bloc));\n \n   ++p;\n   go_assert(p->is_field_name(\"hash\"));\n@@ -2576,7 +2584,12 @@ Type::type_descriptor_constructor(Gogo* gogo, int runtime_type_kind,\n \n   ++p;\n   go_assert(p->is_field_name(\"gcdata\"));\n-  vals->push_back(Expression::make_gc_symbol(this));\n+  if (has_pointer)\n+    vals->push_back(Expression::make_gc_symbol(this));\n+  else\n+    vals->push_back(Expression::make_cast(p->type(),\n+\t\t\t\t\t  Expression::make_nil(bloc),\n+\t\t\t\t\t  bloc));\n \n   ++p;\n   go_assert(p->is_field_name(\"string\"));\n@@ -10894,6 +10907,10 @@ Named_type::do_verify()\n bool\n Named_type::do_has_pointer() const\n {\n+  // A type that is not in the heap has no pointers that we care about.\n+  if (!this->in_heap_)\n+    return false;\n+\n   if (this->seen_)\n     return false;\n   this->seen_ = true;"}, {"sha": "c55345a9d642f20ef2344ee82720a4be193df96b", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70feb6839fe1f13982eb03096bd1140b59881b76/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70feb6839fe1f13982eb03096bd1140b59881b76/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=70feb6839fe1f13982eb03096bd1140b59881b76", "patch": "@@ -2300,9 +2300,12 @@ class Pointer_type : public Type\n   do_verify()\n   { return this->to_type_->verify(); }\n \n+  // If this is a pointer to a type that can't be in the heap, then\n+  // the garbage collector does not have to look at this, so pretend\n+  // that this is not a pointer at all.\n   bool\n   do_has_pointer() const\n-  { return true; }\n+  { return this->to_type_->in_heap(); }\n \n   bool\n   do_compare_is_identity(Gogo*)"}]}