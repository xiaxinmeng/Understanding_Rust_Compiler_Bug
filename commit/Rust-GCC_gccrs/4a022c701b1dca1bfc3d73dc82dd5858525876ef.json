{"sha": "4a022c701b1dca1bfc3d73dc82dd5858525876ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEwMjJjNzAxYjFkY2ExYmZjM2Q3M2RjODJkZDU4NTg1MjU4NzZlZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-20T12:55:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-20T12:55:57Z"}, "message": "poly_int: symbolic_number\n\nThis patch changes symbol_number::bytepos from a HOST_WIDE_INT\nto a poly_int64.  perform_symbolic_merge can cope with symbolic\noffsets as long as the difference between the two offsets is\nconstant.  (This could happen for a constant-sized field that\noccurs at a variable offset, for example.)\n\n2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* gimple-ssa-store-merging.c (symbolic_number::bytepos): Change from\n\tHOST_WIDE_INT to poly_int64_pod.\n\t(perform_symbolic_merge): Update accordingly.\n\t(bswap_replace): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255889", "tree": {"sha": "b5141fcb9c93c0793610d79602133e6aa7a1ff4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5141fcb9c93c0793610d79602133e6aa7a1ff4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a022c701b1dca1bfc3d73dc82dd5858525876ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a022c701b1dca1bfc3d73dc82dd5858525876ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a022c701b1dca1bfc3d73dc82dd5858525876ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a022c701b1dca1bfc3d73dc82dd5858525876ef/comments", "author": null, "committer": null, "parents": [{"sha": "cc8bea091633989bef6d665c40193a9e255ceb81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8bea091633989bef6d665c40193a9e255ceb81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc8bea091633989bef6d665c40193a9e255ceb81"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "d3b8c8db09a58f7affc95043fdebe782ec5bdbf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a022c701b1dca1bfc3d73dc82dd5858525876ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a022c701b1dca1bfc3d73dc82dd5858525876ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a022c701b1dca1bfc3d73dc82dd5858525876ef", "patch": "@@ -1,3 +1,12 @@\n+2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gimple-ssa-store-merging.c (symbolic_number::bytepos): Change from\n+\tHOST_WIDE_INT to poly_int64_pod.\n+\t(perform_symbolic_merge): Update accordingly.\n+\t(bswap_replace): Likewise.\n+\n 2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "9c1d97ac657a3af305995ac0ca01fc3423245584", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a022c701b1dca1bfc3d73dc82dd5858525876ef/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a022c701b1dca1bfc3d73dc82dd5858525876ef/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=4a022c701b1dca1bfc3d73dc82dd5858525876ef", "patch": "@@ -216,7 +216,7 @@ struct symbolic_number {\n   tree type;\n   tree base_addr;\n   tree offset;\n-  HOST_WIDE_INT bytepos;\n+  poly_int64_pod bytepos;\n   tree src;\n   tree alias_set;\n   tree vuse;\n@@ -452,7 +452,7 @@ perform_symbolic_merge (gimple *source_stmt1, struct symbolic_number *n1,\n   if (rhs1 != rhs2)\n     {\n       uint64_t inc;\n-      HOST_WIDE_INT start_sub, end_sub, end1, end2, end;\n+      HOST_WIDE_INT start1, start2, start_sub, end_sub, end1, end2, end;\n       struct symbolic_number *toinc_n_ptr, *n_end;\n       basic_block bb1, bb2;\n \n@@ -464,15 +464,19 @@ perform_symbolic_merge (gimple *source_stmt1, struct symbolic_number *n1,\n \t  || (n1->offset && !operand_equal_p (n1->offset, n2->offset, 0)))\n \treturn NULL;\n \n-      if (n1->bytepos < n2->bytepos)\n+      start1 = 0;\n+      if (!(n2->bytepos - n1->bytepos).is_constant (&start2))\n+\treturn NULL;\n+\n+      if (start1 < start2)\n \t{\n \t  n_start = n1;\n-\t  start_sub = n2->bytepos - n1->bytepos;\n+\t  start_sub = start2 - start1;\n \t}\n       else\n \t{\n \t  n_start = n2;\n-\t  start_sub = n1->bytepos - n2->bytepos;\n+\t  start_sub = start1 - start2;\n \t}\n \n       bb1 = gimple_bb (source_stmt1);\n@@ -484,8 +488,8 @@ perform_symbolic_merge (gimple *source_stmt1, struct symbolic_number *n1,\n \n       /* Find the highest address at which a load is performed and\n \t compute related info.  */\n-      end1 = n1->bytepos + (n1->range - 1);\n-      end2 = n2->bytepos + (n2->range - 1);\n+      end1 = start1 + (n1->range - 1);\n+      end2 = start2 + (n2->range - 1);\n       if (end1 < end2)\n \t{\n \t  end = end2;\n@@ -504,7 +508,7 @@ perform_symbolic_merge (gimple *source_stmt1, struct symbolic_number *n1,\n       else\n \ttoinc_n_ptr = (n_start == n1) ? n2 : n1;\n \n-      n->range = end - n_start->bytepos + 1;\n+      n->range = end - MIN (start1, start2) + 1;\n \n       /* Check that the range of memory covered can be represented by\n \t a symbolic number.  */\n@@ -933,7 +937,7 @@ bswap_replace (gimple_stmt_iterator gsi, gimple *ins_stmt, tree fndecl,\n       tree load_offset_ptr, aligned_load_type;\n       gimple *load_stmt;\n       unsigned align = get_object_alignment (src);\n-      HOST_WIDE_INT load_offset = 0;\n+      poly_int64 load_offset = 0;\n \n       if (cur_stmt)\n \t{"}]}