{"sha": "a4536c7a944127cec1e9e20f57afb5f20c8ba068", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1MzZjN2E5NDQxMjdjZWMxZTllMjBmNTdhZmI1ZjIwYzhiYTA2OA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-11-29T09:57:05Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-29T09:57:05Z"}, "message": "2002-11-29  Michael Koch <konqueror@gmx.de>\n\n\t* gnu/java/nio/DatagramChannelImpl:\n\t(fd): New member variable to store file descriptor of socket.\n\t* gnu/java/nio/SelectionKeyImpl.java:\n\t(ops): Removed.\n\t(readyOps): New member variable.\n\t(interestOps): New member variable.\n\t(readyOps): Implemented.\n\t(readyOps): New method to set member variable readyOps.\n\t(interestOps): Replaced ops by interestOps.\n\t* gnu/java/nio/SelectorImpl.java:\n\t(SelectorImpl): Initialize key sets.\n\t(select): Call select with -1 instead of Long.MAX_VALUE).\n\t(java_do_select): Make it a native method.\n\t(getFDsAsArray): New helper method.\n\t(select): Remove canceled keys, give only interested file discriptors\n\tto java_do_select, set ready ops.\n\t(add): No need to initialize keys set here.\n\t(add_selected): No need to initialize selected set here.\n\t(deregisterCanceledKeys): New helper method.\n\t(register): Set interest ops, set attachments, added handling of datagram\n\tchannels.\n\t* gnu/java/nio/ServerSocketChannelImpl:\n\t(SocketAccept): Renamed from NioSocketAccept.\n\t(implConfigureBlocking): Implemented.\n\t(accept): Use SocketAccept instead of NioSocketAccept.\n\t* gnu/java/nio/SocketChannelImpl:\n\tReactivate native methods.\n\nFrom-SVN: r59632", "tree": {"sha": "adcaaa3a449aead6635ab9800c8f3f5ba50315d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adcaaa3a449aead6635ab9800c8f3f5ba50315d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4536c7a944127cec1e9e20f57afb5f20c8ba068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4536c7a944127cec1e9e20f57afb5f20c8ba068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4536c7a944127cec1e9e20f57afb5f20c8ba068", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4536c7a944127cec1e9e20f57afb5f20c8ba068/comments", "author": null, "committer": null, "parents": [{"sha": "45596747cafe87cb8884a424359a9cb868977273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45596747cafe87cb8884a424359a9cb868977273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45596747cafe87cb8884a424359a9cb868977273"}], "stats": {"total": 247, "additions": 183, "deletions": 64}, "files": [{"sha": "72d1abd8e2f9fe343d3fdb7d7010d5e5d6f72f68", "filename": "libjava/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a4536c7a944127cec1e9e20f57afb5f20c8ba068", "patch": "@@ -1,3 +1,33 @@\n+2002-11-29  Michael Koch <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/DatagramChannelImpl:\n+\t(fd): New member variable to store file descriptor of socket.\n+\t* gnu/java/nio/SelectionKeyImpl.java:\n+\t(ops): Removed.\n+\t(readyOps): New member variable.\n+\t(interestOps): New member variable.\n+\t(readyOps): Implemented.\n+\t(readyOps): New method to set member variable readyOps.\n+\t(interestOps): Replaced ops by interestOps.\n+\t* gnu/java/nio/SelectorImpl.java:\n+\t(SelectorImpl): Initialize key sets.\n+\t(select): Call select with -1 instead of Long.MAX_VALUE).\n+\t(java_do_select): Make it a native method.\n+\t(getFDsAsArray): New helper method.\n+\t(select): Remove canceled keys, give only interested file discriptors\n+\tto java_do_select, set ready ops.\n+\t(add): No need to initialize keys set here.\n+\t(add_selected): No need to initialize selected set here.\n+\t(deregisterCanceledKeys): New helper method.\n+\t(register): Set interest ops, set attachments, added handling of datagram\n+\tchannels.\n+\t* gnu/java/nio/ServerSocketChannelImpl:\n+\t(SocketAccept): Renamed from NioSocketAccept.\n+\t(implConfigureBlocking): Implemented.\n+\t(accept): Use SocketAccept instead of NioSocketAccept.\t\n+\t* gnu/java/nio/SocketChannelImpl:\n+\tReactivate native methods.\n+\t\n 2002-11-29  Michael Koch <konqueror@gmx.de>\n \n \t* gnu/java/nio/natByteBufferImpl.cc,"}, {"sha": "a1e0be15912ee8fd6bfa68c5860ad6e32bd94a04", "filename": "libjava/gnu/java/nio/DatagramChannelImpl.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java?ref=a4536c7a944127cec1e9e20f57afb5f20c8ba068", "patch": "@@ -45,6 +45,8 @@\n \n public class DatagramChannelImpl extends DatagramChannel\n {\n+  int fd;\n+\n   protected DatagramChannelImpl (SelectorProvider provider)\n   {\n     super (provider);"}, {"sha": "5763d6880d3a6c5951e9e9382b25854a1e0a2856", "filename": "libjava/gnu/java/nio/SelectionKeyImpl.java", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2Fgnu%2Fjava%2Fnio%2FSelectionKeyImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2Fgnu%2Fjava%2Fnio%2FSelectionKeyImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectionKeyImpl.java?ref=a4536c7a944127cec1e9e20f57afb5f20c8ba068", "patch": "@@ -44,7 +44,9 @@\n \n public class SelectionKeyImpl extends AbstractSelectionKey\n {\n-  int fd, ops;\n+  int fd;\n+  int readyOps;\n+  int interestOps;\n   SelectorImpl impl;\n   SelectableChannel ch;\n \n@@ -62,17 +64,23 @@ public SelectableChannel channel ()\n \n   public int readyOps ()\n   {\n-    return 0;\n+    return readyOps;\n+  }\n+\n+  public SelectionKey readyOps (int ops)\n+  {\n+    readyOps = ops;\n+    return this;\n   }\n \n   public int interestOps ()\n   {\n-    return ops;    \n+    return interestOps;    \n   }\n \n   public SelectionKey interestOps (int ops)\n   {\n-    this.ops = ops;\n+    interestOps = ops;\n     return this;\n   }\n     "}, {"sha": "0b513f9da5216ba276bc409975269030282d9d4f", "filename": "libjava/gnu/java/nio/SelectorImpl.java", "status": "modified", "additions": 132, "deletions": 37, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java?ref=a4536c7a944127cec1e9e20f57afb5f20c8ba068", "patch": "@@ -56,6 +56,10 @@ public class SelectorImpl extends AbstractSelector\n   public SelectorImpl (SelectorProvider provider)\n   {\n     super (provider);\n+    \n+    keys = new HashSet ();\n+    selected = new HashSet ();\n+    canceled = new HashSet ();\n   }\n \n   public Set keys ()\n@@ -70,16 +74,48 @@ public int selectNow ()\n \n   public int select ()\n   {\n-    return select (Long.MAX_VALUE);\n+    return select (-1);\n   }\n \n-//   private static native int java_do_select(int[] read, int[] write,\n-//                                            int[] except, long timeout);\n+  // A timeout value of -1 means block forever.\n+  private static native int java_do_select (int[] read, int[] write,\n+                                            int[] except, long timeout);\n \n-  private static int java_do_select(int[] read, int[] write,\n-                                    int[] except, long timeout)\n+  private int[] getFDsAsArray (int ops)\n   {\n-    return 0;\n+    int[] result;\n+    int counter = 0;\n+    Iterator it = keys.iterator ();\n+\n+    // Count the number of file descriptors needed\n+    while (it.hasNext ())\n+      {\n+        SelectionKeyImpl key = (SelectionKeyImpl) it.next ();\n+\n+        if ((key.interestOps () & ops) != 0)\n+          {\n+            counter++;\n+          }\n+      }\n+\n+    result = new int[counter];\n+\n+    counter = 0;\n+    it = keys.iterator ();\n+\n+    // Fill the array with the file descriptors\n+    while (it.hasNext ())\n+      {\n+        SelectionKeyImpl key = (SelectionKeyImpl) it.next ();\n+\n+        if ((key.interestOps () & ops) != 0)\n+          {\n+            result[counter] = key.fd;\n+            counter++;\n+          }\n+      }\n+\n+    return result;\n   }\n \n   public int select (long timeout)\n@@ -94,40 +130,79 @@ public int select (long timeout)\n         return 0;\n \t    }\n \n-    int[] read = new int[keys.size ()];\n-    int[] write = new int[keys.size ()];\n-    int[] except = new int[keys.size ()];\n-    int i = 0;\n+    int ret = 0;\n+\n+    deregisterCanceledKeys ();\n+\n+    // Set only keys with the needed interest ops into the arrays.\n+    int[] read = getFDsAsArray (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT);\n+    int[] write = getFDsAsArray (SelectionKey.OP_WRITE | SelectionKey.OP_CONNECT);\n+    int[] except = new int [0]; // FIXME: We dont need to check this yet\n+\n+    // Call the native select () on all file descriptors.\n+    int anzahl = read.length + write.length + except.length;\n+    ret = java_do_select (read, write, except, timeout);\n+\n     Iterator it = keys.iterator ();\n \n     while (it.hasNext ())\n-\t    {\n-        SelectionKeyImpl k = (SelectionKeyImpl) it.next ();\n-        read[i] = k.fd;\n-        write[i] = k.fd;\n-        except[i] = k.fd;\n-        i++;\n-\t    }\n+      {\n+        int ops = 0;\n+        SelectionKeyImpl key = (SelectionKeyImpl) it.next ();\n \n-    int ret = java_do_select (read, write, except, timeout);\n+        // If key is already selected retrieve old ready ops.\n+        if (selected.contains (key))\n+          {\n+            ops = key.readyOps ();\n+          }\n \n-    i = 0;\n-    it = keys.iterator ();\n+        // Set new ready read/accept ops\n+        for (int i = 0; i < read.length; i++)\n+          {\n+            if (key.fd == read[i])\n+              {\n+                if (key.channel () instanceof ServerSocketChannelImpl)\n+                  {\n+                    ops = ops | SelectionKey.OP_ACCEPT;\n+                  }\n+                else\n+                  {\n+                    ops = ops | SelectionKey.OP_READ;\n+                  }\n+              }\n+          }\n \n-    while (it.hasNext ())\n-\t    {\n-        SelectionKeyImpl k = (SelectionKeyImpl) it.next ();\n+        // Set new ready write ops\n+        for (int i = 0; i < write.length; i++)\n+          {\n+            if (key.fd == write[i])\n+              {\n+                ops = ops | SelectionKey.OP_WRITE;\n+                \n+//                 if (key.channel ().isConnected ())\n+//                   {\n+//                     ops = ops | SelectionKey.OP_WRITE;\n+//                   }\n+//                 else\n+//                   {\n+//                     ops = ops | SelectionKey.OP_CONNECT;\n+//                   }\n+             }\n+          }\n+\n+        // FIXME: We dont handle exceptional file descriptors yet.\n \n-        if (read[i] != -1 ||\n-            write[i] != -1 ||\n-            except[i] != -1)\n+        // If key is not yet selected add it.\n+        if (!selected.contains (key))\n           {\n-            add_selected (k);\n+            add_selected (key);\n           }\n \n-        i++;\n-\t    }\n+        // Set new ready ops\n+        key.readyOps (key.interestOps () & ops);\n+      }\n \n+    deregisterCanceledKeys ();\n     return ret;\n   }\n     \n@@ -143,25 +218,30 @@ public Selector wakeup ()\n \n   public void add (SelectionKeyImpl k)\n   {\n-    if (keys == null)\n-\t    keys = new HashSet ();\n-\n     keys.add (k);\n   }\n \n   void add_selected (SelectionKeyImpl k)\n   {\n-    if (selected == null)\n-\t    selected = new HashSet ();\n-\n-    selected.add(k);\n+    selected.add (k);\n   }\n \n   protected void implCloseSelector ()\n   {\n     closed = true;\n   }\n-    \n+\n+  private void deregisterCanceledKeys ()\n+  {\n+    Iterator it = canceled.iterator ();\n+\n+    while (it.hasNext ())\n+      {\n+        keys.remove ((SelectionKeyImpl) it.next ());\n+        it.remove ();\n+      }\n+  }\n+\n   protected SelectionKey register (SelectableChannel ch, int ops, Object att)\n   {\n     return register ((AbstractSelectableChannel) ch, ops, att);\n@@ -176,6 +256,8 @@ protected SelectionKey register (AbstractSelectableChannel ch, int ops,\n //         FileChannelImpl fc = (FileChannelImpl) ch;\n //         SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, fc.fd);\n //         keys.add (impl);\n+//         impl.interestOps (ops);\n+//         impl.attach (att);\n //         return impl;\n //       }\n //     else\n@@ -185,13 +267,26 @@ protected SelectionKey register (AbstractSelectableChannel ch, int ops,\n         SocketChannelImpl sc = (SocketChannelImpl) ch;\n         SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, sc.fd);\n         add (impl);\n+        impl.interestOps (ops);\n+        impl.attach (att);\n         return impl;\n \t    }\n+    else if (ch instanceof DatagramChannelImpl)\n+      {\n+        DatagramChannelImpl dc = (DatagramChannelImpl) ch;\n+        SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, dc.fd);\n+        add (impl);\n+        impl.interestOps (ops);\n+        impl.attach (att);\n+        return impl;\n+      }\n     else if (ch instanceof ServerSocketChannelImpl)\n       {\n         ServerSocketChannelImpl ssc = (ServerSocketChannelImpl) ch;\n         SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, ssc.fd);\n         add (impl);\n+        impl.interestOps (ops);\n+        impl.attach (att);\n         return impl;\n       }\n     else"}, {"sha": "4a51f2a4b61b2d7aeb9d362964185efc7c33a3f5", "filename": "libjava/gnu/java/nio/ServerSocketChannelImpl.java", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java?ref=a4536c7a944127cec1e9e20f57afb5f20c8ba068", "patch": "@@ -54,14 +54,8 @@ class ServerSocketChannelImpl extends ServerSocketChannel\n   boolean connected = false;\n //   InetSocketAddress sa;\n \n-//   private static native int NioSocketAccept (ServerSocketChannelImpl server, \n-//                                              SocketChannelImpl s);\n-\n-  private static int NioSocketAccept (ServerSocketChannelImpl server, \n-                                      SocketChannelImpl s)\n-  {\n-    return 0;\n-  }\n+  private static native int SocketAccept (ServerSocketChannelImpl server,\n+                                          SocketChannelImpl s);\n \n   protected ServerSocketChannelImpl (SelectorProvider provider)\n   {\n@@ -101,13 +95,14 @@ protected void implCloseSelectableChannel ()\n \n   protected void implConfigureBlocking (boolean block)\n   {\n+    blocking = block;\n   }\n \n   public SocketChannel accept ()\n   {\n     SocketChannelImpl result = new SocketChannelImpl (provider ());\n     result.sa = new InetSocketAddress (0);\n-    int res = NioSocketAccept (this, result);\n+    int res = SocketAccept (this,result);\n     return result;\n   }\n "}, {"sha": "9f2de278d811a26314ca0b9662786c880e06859c", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4536c7a944127cec1e9e20f57afb5f20c8ba068/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=a4536c7a944127cec1e9e20f57afb5f20c8ba068", "patch": "@@ -57,25 +57,14 @@ public class SocketChannelImpl extends SocketChannel\n   boolean connected = false;\n   InetSocketAddress sa;\n \n-/*    \n   static native int SocketCreate();\n-  static native int SocketConnect(int fd, InetAddress a, int port);\n-  static native int SocketBind(int fd, InetAddress host, int port);\n+  static native int SocketConnect(int fd, InetAddress addr, int port);\n+  static native int SocketBind(int fd, InetAddress addr, int port);\n   static native int SocketListen(int fd, int backlog);\n   static native int SocketAvailable(int fd);\n   static native int SocketClose(int fd);\n   static native int SocketRead(int fd, byte b[], int off, int len);\n   static native int SocketWrite(int fd, byte b[], int off, int len);\n-*/\n-\n-  static int SocketCreate() { return 0; };\n-  static int SocketConnect(int fd, InetAddress a, int port) { return 0; };\n-  static int SocketBind(int fd, InetAddress host, int port) { return 0; };\n-  static int SocketListen(int fd, int backlog) { return 0; };\n-  static int SocketAvailable(int fd) { return 0; };\n-  static int SocketClose(int fd) { return 0; };\n-  static int SocketRead(int fd, byte b[], int off, int len) { return 0; };\n-  static int SocketWrite(int fd, byte b[], int off, int len) { return 0; };\n \n   public SocketChannelImpl(SelectorProvider provider)\t\t      \n   {\n@@ -87,7 +76,7 @@ public SocketChannelImpl(SelectorProvider provider)\n         System.err.println(\"failed to create socket:\"+fd);\n \t    }\n   }\n-    \n+\n   public void finalizer()\n   {\n     if (connected)"}]}