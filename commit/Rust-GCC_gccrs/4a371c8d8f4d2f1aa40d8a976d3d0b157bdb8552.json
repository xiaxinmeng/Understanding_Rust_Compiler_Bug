{"sha": "4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzNzFjOGQ4ZjRkMmYxYWE0MGQ4YTk3NmQzZDBiMTU3YmRiODU1Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-03-28T10:48:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-03-28T10:48:04Z"}, "message": "cgraph.c (cgraph_function_body_availability): Functions declared inline are always safe to assume that it is not going to be...\n\n\n\t* cgraph.c (cgraph_function_body_availability): Functions declared\n\tinline are always safe to assume that it is not going to be replaced.\n\nFrom-SVN: r145174", "tree": {"sha": "794e1ba9ea7bc97ee55a7176950e8b447b3fafb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/794e1ba9ea7bc97ee55a7176950e8b447b3fafb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552/comments", "author": null, "committer": null, "parents": [{"sha": "6cdb0ee3658b05acfd6e3ffa51047dc4558b14cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdb0ee3658b05acfd6e3ffa51047dc4558b14cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cdb0ee3658b05acfd6e3ffa51047dc4558b14cb"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "ce250d55bb080327c207f08041939a4ac0f734d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552", "patch": "@@ -1,3 +1,8 @@\n+2009-03-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_function_body_availability): Functions declared\n+\tinline are always safe to assume that it is not going to be replaced.\n+\n 2009-03-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/38513"}, {"sha": "38de8e490d78b817b46ff75b2da027241b450ceb", "filename": "gcc/cgraph.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=4a371c8d8f4d2f1aa40d8a976d3d0b157bdb8552", "patch": "@@ -1429,6 +1429,11 @@ cgraph_function_body_availability (struct cgraph_node *node)\n     avail = AVAIL_LOCAL;\n   else if (!node->local.externally_visible)\n     avail = AVAIL_AVAILABLE;\n+  /* Inline functions are safe to be analyzed even if their sybol can\n+     be overwritten at runtime.  It is not meaningful to enfore any sane\n+     behaviour on replacing inline function by different body.  */\n+  else if (DECL_DECLARED_INLINE_P (node->decl))\n+    avail = AVAIL_AVAILABLE;\n \n   /* If the function can be overwritten, return OVERWRITABLE.  Take\n      care at least of two notable extensions - the COMDAT functions\n@@ -1438,15 +1443,9 @@ cgraph_function_body_availability (struct cgraph_node *node)\n \n      ??? Does the C++ one definition rule allow us to always return\n      AVAIL_AVAILABLE here?  That would be good reason to preserve this\n-     hook Similarly deal with extern inline functions - this is again\n-     necessary to get C++ shared functions having keyed templates\n-     right and in the C extension documentation we probably should\n-     document the requirement of both versions of function (extern\n-     inline and offline) having same side effect characteristics as\n-     good optimization is what this optimization is about.  */\n-\n-  else if (!(*targetm.binds_local_p) (node->decl)\n-\t   && !DECL_COMDAT (node->decl) && !DECL_EXTERNAL (node->decl))\n+     bit.  */\n+\n+  else if (DECL_REPLACEABLE_P (node->decl) && !DECL_EXTERNAL (node->decl))\n     avail = AVAIL_OVERWRITABLE;\n   else avail = AVAIL_AVAILABLE;\n "}]}