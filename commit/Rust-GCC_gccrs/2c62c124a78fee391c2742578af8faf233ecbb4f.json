{"sha": "2c62c124a78fee391c2742578af8faf233ecbb4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM2MmMxMjRhNzhmZWUzOTFjMjc0MjU3OGFmOGZhZjIzM2VjYmI0Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-02-13T22:08:25Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-02-13T22:08:25Z"}, "message": "Don't call write ifdef inhibit_libc.\n\nFrom-SVN: r8941", "tree": {"sha": "39a87a7060bcc2140853d1091a9f190799f9b658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39a87a7060bcc2140853d1091a9f190799f9b658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c62c124a78fee391c2742578af8faf233ecbb4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c62c124a78fee391c2742578af8faf233ecbb4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c62c124a78fee391c2742578af8faf233ecbb4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c62c124a78fee391c2742578af8faf233ecbb4f/comments", "author": null, "committer": null, "parents": [{"sha": "d01bc86269272c57aef10de19558881bfece420e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01bc86269272c57aef10de19558881bfece420e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d01bc86269272c57aef10de19558881bfece420e"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "e5a1e09ed575127d4cb3971d19e538b71fec3321", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c62c124a78fee391c2742578af8faf233ecbb4f/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c62c124a78fee391c2742578af8faf233ecbb4f/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=2c62c124a78fee391c2742578af8faf233ecbb4f", "patch": "@@ -1671,10 +1671,12 @@ set_new_handler (vfp handler)\n void\n __default_new_handler ()\n {\n+#ifndef inhibit_libc\n   /* don't use fprintf (stderr, ...) because it may need to call malloc.  */\n   /* This should really print the name of the program, but that is hard to\n      do.  We need a standard, clean way to get at the name.  */\n   write (2, MESSAGE, sizeof (MESSAGE));\n+#endif\n   /* don't call exit () because that may call global destructors which\n      may cause a loop.  */\n   _exit (-1);\n@@ -2276,11 +2278,26 @@ __unwind_function(void *ptr)\n #endif /* L_eh */\n \f\n #ifdef L_pure\n+#ifndef inhibit_libc\n+/* This gets us __GNU_LIBRARY__.  */\n+#undef NULL /* Avoid errors if stdio.h and our stddef.h mismatch.  */\n+#include <stdio.h>\n+\n+#ifdef __GNU_LIBRARY__\n+  /* Avoid forcing the library's meaning of `write' on the user program\n+     by using the \"internal\" name (for use within the library)  */\n+#define write(fd, buf, n)\t__write((fd), (buf), (n))\n+#endif\n+#endif /* inhibit_libc */\n+\n #define MESSAGE \"pure virtual method called\\n\"\n+\n void\n __pure_virtual ()\n {\n+#ifndef inhibit_libc\n   write (2, MESSAGE, sizeof (MESSAGE) - 1);\n+#endif\n   _exit (-1);\n }\n #endif"}]}