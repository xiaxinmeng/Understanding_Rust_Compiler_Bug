{"sha": "a0f4cca64282e20ad9736528dc5d1b20ce4536e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBmNGNjYTY0MjgyZTIwYWQ5NzM2NTI4ZGM1ZDFiMjBjZTQ1MzZlMA==", "commit": {"author": {"name": "Pekka Nikander", "email": "pekka.nikander@hut.fi", "date": "2000-02-18T18:17:37Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-02-18T18:17:37Z"}, "message": "re GNATS gcj/82 (code generation for jvm IRETURN fails on boolean/byte/short methods if INT_TYPE_SIZE < 32)\n\nWed Nov 03 02:16:00 PST 1999  Pekka Nikander  <pekka.nikander@hut.fi>\n\n\t* decl.c (INT_TYPE_SIZE): Define if necessary.\n\t(expand_java_return): Handle the case of a native integer smaller\n \tthan a JVM integer.\n\n(Fix to the Java PR #82:\n  http://sourceware.cygnus.com/ml/java-prs/1999-q4/msg00078.html)\n\nFrom-SVN: r32051", "tree": {"sha": "514d2fe3a7cfa69627198630a7687b4e7d0fd84c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/514d2fe3a7cfa69627198630a7687b4e7d0fd84c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0f4cca64282e20ad9736528dc5d1b20ce4536e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f4cca64282e20ad9736528dc5d1b20ce4536e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0f4cca64282e20ad9736528dc5d1b20ce4536e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f4cca64282e20ad9736528dc5d1b20ce4536e0/comments", "author": null, "committer": null, "parents": [{"sha": "8b97e23b7601eec320ef0600448a9ee686fde12b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b97e23b7601eec320ef0600448a9ee686fde12b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b97e23b7601eec320ef0600448a9ee686fde12b"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "e3b199277581b3f9be42989edda3ff2d43410fcb", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f4cca64282e20ad9736528dc5d1b20ce4536e0/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f4cca64282e20ad9736528dc5d1b20ce4536e0/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a0f4cca64282e20ad9736528dc5d1b20ce4536e0", "patch": "@@ -1,3 +1,9 @@\n+Wed Nov 03 02:16:00 PST 1999  Pekka Nikander  <pekka.nikander@hut.fi>\n+\n+\t* decl.c (INT_TYPE_SIZE): Define if necessary.\n+\t(expand_java_return): Handle the case of a native integer smaller\n+ \tthan a JVM integer.\n+\n 2000-02-18  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n \n \t* gjavah.c (help): Use GCCBUGURL."}, {"sha": "f25b1940a91fb7a993e7011915eb39085b221054", "filename": "gcc/java/expr.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f4cca64282e20ad9736528dc5d1b20ce4536e0/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f4cca64282e20ad9736528dc5d1b20ce4536e0/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=a0f4cca64282e20ad9736528dc5d1b20ce4536e0", "patch": "@@ -981,6 +981,10 @@ expand_java_pushc (ival, type)\n   push_value (value);\n }\n \n+#ifndef INT_TYPE_SIZE\n+#define INT_TYPE_SIZE BITS_PER_WORD\n+#endif\n+\n static void\n expand_java_return (type)\n      tree type;\n@@ -992,6 +996,16 @@ expand_java_return (type)\n       tree retval = pop_value (type);\n       tree res = DECL_RESULT (current_function_decl);\n       retval = build (MODIFY_EXPR, TREE_TYPE (res), res, retval);\n+\n+      /* Handle the situation where the native integer type is smaller\n+\t than the JVM integer. It can happen for many cross compilers.\n+\t The whole if expression just goes away if INT_TYPE_SIZE < 32\n+\t is false. */\n+      if (INT_TYPE_SIZE < 32\n+\t  && (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (res)))\n+\t      < GET_MODE_SIZE (TYPE_MODE (type))))\n+\tretval = build1(NOP_EXPR, TREE_TYPE(res), retval);\n+      \n       TREE_SIDE_EFFECTS (retval) = 1;\n       expand_return (retval);\n     }"}]}