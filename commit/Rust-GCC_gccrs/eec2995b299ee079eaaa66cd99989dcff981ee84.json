{"sha": "eec2995b299ee079eaaa66cd99989dcff981ee84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjMjk5NWIyOTllZTA3OWVhYWE2NmNkOTk5ODlkY2ZmOTgxZWU4NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-27T23:47:15Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-27T23:47:15Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r602", "tree": {"sha": "7d5403a16f4cc03cc39c5a0dda934f57a5664131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d5403a16f4cc03cc39c5a0dda934f57a5664131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eec2995b299ee079eaaa66cd99989dcff981ee84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec2995b299ee079eaaa66cd99989dcff981ee84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eec2995b299ee079eaaa66cd99989dcff981ee84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec2995b299ee079eaaa66cd99989dcff981ee84/comments", "author": null, "committer": null, "parents": [{"sha": "8fd297fb3b1da2c0c2c1704467734f2dee3d94c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd297fb3b1da2c0c2c1704467734f2dee3d94c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd297fb3b1da2c0c2c1704467734f2dee3d94c5"}], "stats": {"total": 15, "additions": 0, "deletions": 15}, "files": [{"sha": "023e33791901708cafd2575c7ff52b2cf0874889", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec2995b299ee079eaaa66cd99989dcff981ee84/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec2995b299ee079eaaa66cd99989dcff981ee84/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=eec2995b299ee079eaaa66cd99989dcff981ee84", "patch": "@@ -447,8 +447,6 @@ expand_call (exp, target, ignore, modifier)\n   int is_longjmp;\n   /* Nonzero if this is a call to an inline function.  */\n   int is_integrable = 0;\n-  /* Nonzero if this is a call to __builtin_new.  */\n-  int is_builtin_new;\n   /* Nonzero if this is a call to a `const' function.\n      Note that only explicitly named functions are handled as `const' here.  */\n   int is_const = 0;\n@@ -665,11 +663,6 @@ expand_call (exp, target, ignore, modifier)\n \tis_longjmp = 1;\n     }\n \n-  is_builtin_new\n-    = (name != 0\n-       && IDENTIFIER_LENGTH (DECL_NAME (fndecl)) == 13\n-       && (!strcmp (name, \"__builtin_new\")));\n-\n   if (may_be_alloca)\n     current_function_calls_alloca = 1;\n \n@@ -1459,14 +1452,6 @@ expand_call (exp, target, ignore, modifier)\n   if (is_volatile || is_longjmp)\n     emit_barrier ();\n \n-  /* For calls to __builtin_new, note that it can never return 0.\n-     This is because a new handler will be called, and 0 it not\n-     among the numbers it is supposed to return.  */\n-#if 0\n-  if (is_builtin_new)\n-    emit_note (name, NOTE_INSN_BUILTIN_NEW);\n-#endif\n-\n   /* If value type not void, return an rtx for the value.  */\n \n   /* If there are cleanups to be called, don't use a hard reg as target.  */"}]}