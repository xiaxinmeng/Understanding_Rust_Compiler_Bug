{"sha": "b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlhY2M5ZjFkZTRlZjhhMWNmZjdjNDk1YTNiMjZmY2QzZTI0NDhjNA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-31T02:20:22Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-31T02:20:22Z"}, "message": "fold-const.c (build_zero_vector): Use build_vector_from_val.\n\n\t* fold-const.c (build_zero_vector): Use build_vector_from_val.\n\t* tree-vect-loop.c (get_initial_def_for_induction): Likewise.\n\t(get_initial_def_for_reduction): Likewise.\n\t* tree-vect-slp.c (vect_get_constant_vectors): Likewise.\n\t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Likewise.\n\t* tree.c (build_one_cst): Likewise.\n\t(build_vector_from_val): Use types_compatible_p for assert.\n\nFrom-SVN: r166102", "tree": {"sha": "1690b9c80ac2985f27e7ba09fccad0152877304c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1690b9c80ac2985f27e7ba09fccad0152877304c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/comments", "author": null, "committer": null, "parents": [{"sha": "76369a821b895c4d4bf1412d108716c4bb0a90de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76369a821b895c4d4bf1412d108716c4bb0a90de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76369a821b895c4d4bf1412d108716c4bb0a90de"}], "stats": {"total": 81, "additions": 25, "deletions": 56}, "files": [{"sha": "660e3392703664c8a3cac25bb544be920970eb65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4", "patch": "@@ -1,3 +1,13 @@\n+2010-10-30  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* fold-const.c (build_zero_vector): Use build_vector_from_val.\n+\t* tree-vect-loop.c (get_initial_def_for_induction): Likewise.\n+\t(get_initial_def_for_reduction): Likewise.\n+\t* tree-vect-slp.c (vect_get_constant_vectors): Likewise.\n+\t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Likewise.\n+\t* tree.c (build_one_cst): Likewise.\n+\t(build_vector_from_val): Use types_compatible_p for assert.\n+\n 2010-10-30  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* emit-rtl.c (mark_used_flags): New function."}, {"sha": "4599a69d50cadbf17b845804fddfd1d3af9e9c79", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4", "patch": "@@ -1796,16 +1796,10 @@ fold_convert_const (enum tree_code code, tree type, tree arg1)\n static tree\n build_zero_vector (tree type)\n {\n-  tree elem, list;\n-  int i, units;\n-\n-  elem = fold_convert_const (NOP_EXPR, TREE_TYPE (type), integer_zero_node);\n-  units = TYPE_VECTOR_SUBPARTS (type);\n+  tree t;\n \n-  list = NULL_TREE;\n-  for (i = 0; i < units; i++)\n-    list = tree_cons (NULL_TREE, elem, list);\n-  return build_vector (type, list);\n+  t = fold_convert_const (NOP_EXPR, TREE_TYPE (type), integer_zero_node);\n+  return build_vector_from_val (type, t);\n }\n \n /* Returns true, if ARG is convertible to TYPE using a NOP_EXPR.  */"}, {"sha": "c213673e20bf5a298fa8327d2614d0be2c6d5dd8", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4", "patch": "@@ -2725,13 +2725,11 @@ get_initial_def_for_induction (gimple iv_phi)\n \t\t\t      expr, step_expr);\n     }\n \n-  t = NULL_TREE;\n-  for (i = 0; i < nunits; i++)\n-    t = tree_cons (NULL_TREE, unshare_expr (new_name), t);\n+  t = unshare_expr (new_name);\n   gcc_assert (CONSTANT_CLASS_P (new_name));\n   stepvectype = get_vectype_for_scalar_type (TREE_TYPE (new_name));\n   gcc_assert (stepvectype);\n-  vec = build_vector (stepvectype, t);\n+  vec = build_vector_from_val (stepvectype, t);\n   vec_step = vect_init_vector (iv_phi, vec, stepvectype, NULL);\n \n \n@@ -2785,11 +2783,9 @@ get_initial_def_for_induction (gimple iv_phi)\n       expr = build_int_cst (TREE_TYPE (step_expr), nunits);\n       new_name = fold_build2 (MULT_EXPR, TREE_TYPE (step_expr),\n \t\t\t      expr, step_expr);\n-      t = NULL_TREE;\n-      for (i = 0; i < nunits; i++)\n-\tt = tree_cons (NULL_TREE, unshare_expr (new_name), t);\n+      t = unshare_expr (new_name);\n       gcc_assert (CONSTANT_CLASS_P (new_name));\n-      vec = build_vector (stepvectype, t);\n+      vec = build_vector_from_val (stepvectype, t);\n       vec_step = vect_init_vector (iv_phi, vec, stepvectype, NULL);\n \n       vec_def = induc_def;\n@@ -3021,14 +3017,7 @@ get_initial_def_for_reduction (gimple stmt, tree init_val,\n             break;\n           }\n \n-        for (i = nunits - 1; i >= 0; --i)\n-          t = tree_cons (NULL_TREE, init_value, t);\n-\n-        if (TREE_CONSTANT (init_val))\n-          init_def = build_vector (vectype, t);\n-        else\n-          init_def = build_constructor_from_list (vectype, t);\n-\n+\tinit_def = build_vector_from_val (vectype, init_value);\n         break;\n \n       default:"}, {"sha": "fdaaff2865b5da4b7b5895fadd22517f4932aea7", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4", "patch": "@@ -1986,12 +1986,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n       if (neutral_op)\n         {\n           if (!neutral_vec)\n-            {\n-              t = NULL;\n-              for (i = 0; i < (unsigned) nunits; i++)\n-                 t = tree_cons (NULL_TREE, neutral_op, t);\n-              neutral_vec = build_vector (vector_type, t);\n-            }\n+\t    neutral_vec = build_vector_from_val (vector_type, neutral_op);\n \n           VEC_quick_push (tree, *vec_oprnds, neutral_vec);\n         }"}, {"sha": "6f4f56861d0b8c9dd08af36c276a98510ec55460", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4", "patch": "@@ -987,9 +987,7 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   tree vec_inv;\n   tree vec_cst;\n-  tree t = NULL_TREE;\n   tree def;\n-  int i;\n   enum vect_def_type dt;\n   bool is_simple_use;\n   tree vector_type;\n@@ -1033,11 +1031,7 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n         if (vect_print_dump_info (REPORT_DETAILS))\n           fprintf (vect_dump, \"Create vector_cst. nunits = %d\", nunits);\n \n-        for (i = nunits - 1; i >= 0; --i)\n-          {\n-            t = tree_cons (NULL_TREE, op, t);\n-          }\n-        vec_cst = build_vector (vector_type, t);\n+        vec_cst = build_vector_from_val (vector_type, op);\n         return vect_init_vector (stmt, vec_cst, vector_type, NULL);\n       }\n \n@@ -1055,13 +1049,7 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n         if (vect_print_dump_info (REPORT_DETAILS))\n           fprintf (vect_dump, \"Create vector_inv.\");\n \n-        for (i = nunits - 1; i >= 0; --i)\n-          {\n-            t = tree_cons (NULL_TREE, def, t);\n-          }\n-\n-\t/* FIXME: use build_constructor directly.  */\n-        vec_inv = build_constructor_from_list (vector_type, t);\n+        vec_inv = build_vector_from_val (vector_type, def);\n         return vect_init_vector (stmt, vec_inv, vector_type, NULL);\n       }\n "}, {"sha": "4de73ee4d2c75c3eb55c7f850cdb08603fcef71f", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b9acc9f1de4ef8a1cff7c495a3b26fcd3e2448c4", "patch": "@@ -1376,7 +1376,8 @@ build_vector_from_val (tree vectype, tree sc)\n   if (sc == error_mark_node)\n     return sc;\n \n-  gcc_assert (TREE_TYPE (sc) == TREE_TYPE (vectype));\n+  gcc_assert (lang_hooks.types_compatible_p (TREE_TYPE (sc),\n+\t\t\t\t\t     TREE_TYPE (vectype)));\n \n   v = VEC_alloc (constructor_elt, gc, nunits);\n   for (i = 0; i < nunits; ++i)\n@@ -1590,17 +1591,9 @@ build_one_cst (tree type)\n \n     case VECTOR_TYPE:\n       {\n-\ttree scalar, cst;\n-\tint i;\n-\n-\tscalar = build_one_cst (TREE_TYPE (type));\n-\n-\t/* Create 'vect_cst_ = {cst,cst,...,cst}'  */\n-\tcst = NULL_TREE;\n-\tfor (i = TYPE_VECTOR_SUBPARTS (type); --i >= 0; )\n-\t  cst = tree_cons (NULL_TREE, scalar, cst);\n+\ttree scalar = build_one_cst (TREE_TYPE (type));\n \n-\treturn build_vector (type, cst);\n+\treturn build_vector_from_val (type, scalar);\n       }\n \n     case COMPLEX_TYPE:"}]}