{"sha": "0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ2YjQxZjJkZGI3ZDBmYzA0YTQzZjUwNTU5OGJhOTRhNTVmYTRlZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-10-15T10:54:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-15T10:54:57Z"}, "message": "bitmap_allocator.h: Qualify ::operator delete.\n\n2004-10-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/bitmap_allocator.h: Qualify ::operator delete.\n\t* src/bitmap_allocator.cc: Likewise.\n\t* src/mt_allocator.cc: Use ::operator delete, not delete,\n\tconsistently with ::operator new.\n\n\t* include/ext/bitmap_allocator.h (deallocate): Check for null\n\tpointer.\n\t* testsuite/ext/bitmap_allocator/check_deallocate_null.cc: New.\n\t* testsuite/testsuite_allocator.h (check_deallocate_null): Add test.\n\nFrom-SVN: r89089", "tree": {"sha": "73e97e39264f0d50f4b69d5007c1a70b6717fd2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73e97e39264f0d50f4b69d5007c1a70b6717fd2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/comments", "author": null, "committer": null, "parents": [{"sha": "31246b8f0d515137f28162a8e856b5b9faff6339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31246b8f0d515137f28162a8e856b5b9faff6339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31246b8f0d515137f28162a8e856b5b9faff6339"}], "stats": {"total": 81, "additions": 64, "deletions": 17}, "files": [{"sha": "7819e9e679ae7de92f96e731a8a9a98e23db9b14", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee", "patch": "@@ -1,3 +1,15 @@\n+2004-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/bitmap_allocator.h: Qualify ::operator delete.\n+\t* src/bitmap_allocator.cc: Likewise.\n+\t* src/mt_allocator.cc: Use ::operator delete, not delete,\n+\tconsistently with ::operator new.\n+\n+\t* include/ext/bitmap_allocator.h (deallocate): Check for null\n+\tpointer.\n+\t* testsuite/ext/bitmap_allocator/check_deallocate_null.cc: New.\n+\t* testsuite/testsuite_allocator.h (check_deallocate_null): Add test.\n+\n 2004-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/mt_allocator.h (__mt_alloc::deallocate): Check for"}, {"sha": "2328e145c95b62e25772cfde958419af0d7aac64", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee", "patch": "@@ -674,14 +674,14 @@ namespace __gnu_cxx\n \t      // Ok, the new block is greater than or equal to the\n \t      // last block in the list of free blocks. We just free\n \t      // the new block.\n-\t      operator delete(static_cast<void*>(__addr));\n+\t      ::operator delete(static_cast<void*>(__addr));\n \t      return;\n \t    }\n \t  else\n \t    {\n \t      // Deallocate the last block in the list of free lists,\n \t      // and insert the new one in it's correct position.\n-\t      operator delete(static_cast<void*>(_S_free_list.back()));\n+\t      ::operator delete(static_cast<void*>(_S_free_list.back()));\n \t      _S_free_list.pop_back();\n \t    }\n \t}\n@@ -1095,10 +1095,13 @@ namespace __gnu_cxx\n       void \n       deallocate(pointer __p, size_type __n) throw()\n       {\n-\tif (__builtin_expect(__n == 1, true))\n-\t  this->_M_deallocate_single_object(__p);\n-\telse\n-\t  ::operator delete(__p);\n+\tif (__builtin_expect(__p != 0, true))\n+\t  {\n+\t    if (__builtin_expect(__n == 1, true))\n+\t      this->_M_deallocate_single_object(__p);\n+\t    else\n+\t      ::operator delete(__p);\n+\t  }\n       }\n \n       pointer "}, {"sha": "3cd0fb90e3f4cb908a85f5e0ee6b865d489a164e", "filename": "libstdc++-v3/src/bitmap_allocator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc?ref=0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee", "patch": "@@ -121,7 +121,7 @@ namespace __gnu_cxx\n     iterator __iter = _S_free_list.begin();\n     while (__iter != _S_free_list.end())\n       {\n-\toperator delete((void*)*__iter);\n+\t::operator delete((void*)*__iter);\n \t++__iter;\n       }\n     _S_free_list.clear();"}, {"sha": "08f5c87c0dd9493225489e5c15e80823aca0198a", "filename": "libstdc++-v3/src/mt_allocator.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc?ref=0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee", "patch": "@@ -61,10 +61,10 @@ namespace __gnu_cxx\n \t\tdelete __bin._M_address;\n \t\t__bin._M_address = __tmp;\n \t      }\n-\t    delete __bin._M_first;\n+\t    ::operator delete(__bin._M_first);\n \t  }\n-\tdelete _M_bin;\n-\tdelete _M_binmap;\n+\t::operator delete(_M_bin);\n+\t::operator delete(_M_binmap);\n       }\n   }\n \n@@ -190,10 +190,10 @@ namespace __gnu_cxx\n \t\t    delete __bin._M_address;\n \t\t    __bin._M_address = __tmp;\n \t\t  }\n-\t\tdelete __bin._M_first;\n-\t\tdelete __bin._M_free;\n-\t\tdelete __bin._M_used;\n-\t\tdelete __bin._M_mutex;\n+\t\t::operator delete(__bin._M_first);\n+\t\t::operator delete(__bin._M_free);\n+\t\t::operator delete(__bin._M_used);\n+\t\t::operator delete(__bin._M_mutex);\n \t      }\n \t    ::operator delete(_M_thread_freelist_initial);\n \t  }\n@@ -209,11 +209,11 @@ namespace __gnu_cxx\n \t\t    delete __bin._M_address;\n \t\t    __bin._M_address = __tmp;\n \t\t  }\n-\t\tdelete __bin._M_first;\n+\t\t::operator delete(__bin._M_first);\n \t      }\n \t  }\n-\tdelete _M_bin;\n-\tdelete _M_binmap;\n+\t::operator delete(_M_bin);\n+\t::operator delete(_M_binmap);\n       }\n   }\n "}, {"sha": "ebe8114793b41bd5e7345d3f547f9589d81bd74f", "filename": "libstdc++-v3/testsuite/ext/bitmap_allocator/check_deallocate_null.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_deallocate_null.cc?ref=0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee", "patch": "@@ -0,0 +1,31 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/bitmap_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::bitmap_allocator<value_type> allocator_type;\n+  __gnu_test::check_deallocate_null<allocator_type>(); \n+  return 0;\n+}"}, {"sha": "c10be5315d9da02404eea2277b9587fc9fa3ce07", "filename": "libstdc++-v3/testsuite/testsuite_allocator.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h?ref=0d6b41f2ddb7d0fc04a43f505598ba94a55fa4ee", "patch": "@@ -202,6 +202,7 @@ namespace __gnu_test\n     {\n       // Let's not core here...\n       Alloc  a;\n+      a.deallocate(NULL, 1);\n       a.deallocate(NULL, 10);\n     }\n }; // namespace __gnu_test"}]}