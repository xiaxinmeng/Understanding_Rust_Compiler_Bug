{"sha": "92c52eab974ce9e1c81d770724adb56846bcaa4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJjNTJlYWI5NzRjZTllMWM4MWQ3NzA3MjRhZGI1Njg0NmJjYWE0Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-22T08:27:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-22T08:27:04Z"}, "message": "Move more cproj simplifications to match.pd\n\nAlso make build_complex_cproj available globally and use\nit for the existing match.pd rules.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* builtins.c (fold_builtin_cproj): Delete.\n\t(fold_builtin_1): Handle constant arguments here.\n\t(build_complex_cproj): Move and rename to...\n\t* tree.c: (build_complex_inf): ...this.\n\t* tree.h (build_complex_inf): Declare.\n\t* match.pd: Fold cproj(x)->x if x has no infinity.\n\tUse build_complex_inf for existing cproj rules.\n\nFrom-SVN: r229164", "tree": {"sha": "84842493f9d814e607d6df00c0278469f3159f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84842493f9d814e607d6df00c0278469f3159f10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92c52eab974ce9e1c81d770724adb56846bcaa4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c52eab974ce9e1c81d770724adb56846bcaa4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92c52eab974ce9e1c81d770724adb56846bcaa4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c52eab974ce9e1c81d770724adb56846bcaa4b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7477de01a8c9c4f496d6f4daea90255ec0aad272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7477de01a8c9c4f496d6f4daea90255ec0aad272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7477de01a8c9c4f496d6f4daea90255ec0aad272"}], "stats": {"total": 109, "additions": 49, "deletions": 60}, "files": [{"sha": "bd5aef52c9100d1d9fc771a31f2b09c53ef75761", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c52eab974ce9e1c81d770724adb56846bcaa4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c52eab974ce9e1c81d770724adb56846bcaa4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92c52eab974ce9e1c81d770724adb56846bcaa4b", "patch": "@@ -1,3 +1,13 @@\n+2015-10-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.c (fold_builtin_cproj): Delete.\n+\t(fold_builtin_1): Handle constant arguments here.\n+\t(build_complex_cproj): Move and rename to...\n+\t* tree.c: (build_complex_inf): ...this.\n+\t* tree.h (build_complex_inf): Declare.\n+\t* match.pd: Fold cproj(x)->x if x has no infinity.\n+\tUse build_complex_inf for existing cproj rules.\n+\n 2015-10-22  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR target/68015"}, {"sha": "eec4b8898c16f05dfc8646ee0c1e5889723acbd4", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 45, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c52eab974ce9e1c81d770724adb56846bcaa4b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c52eab974ce9e1c81d770724adb56846bcaa4b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=92c52eab974ce9e1c81d770724adb56846bcaa4b", "patch": "@@ -7538,50 +7538,6 @@ fold_fixed_mathfn (location_t loc, tree fndecl, tree arg)\n   return NULL_TREE;\n }\n \n-/* Build a complex (inf +- 0i) for the result of cproj.  TYPE is the\n-   complex tree type of the result.  If NEG is true, the imaginary\n-   zero is negative.  */\n-\n-static tree\n-build_complex_cproj (tree type, bool neg)\n-{\n-  REAL_VALUE_TYPE rinf, rzero = dconst0;\n-  \n-  real_inf (&rinf);\n-  rzero.sign = neg;\n-  return build_complex (type, build_real (TREE_TYPE (type), rinf),\n-\t\t\tbuild_real (TREE_TYPE (type), rzero));\n-}\n-\n-/* Fold call to builtin cproj, cprojf or cprojl with argument ARG.  TYPE is the\n-   return type.  Return NULL_TREE if no simplification can be made.  */\n-\n-static tree\n-fold_builtin_cproj (location_t loc, tree arg, tree type)\n-{\n-  if (!validate_arg (arg, COMPLEX_TYPE)\n-      || TREE_CODE (TREE_TYPE (TREE_TYPE (arg))) != REAL_TYPE)\n-    return NULL_TREE;\n-\n-  /* If there are no infinities, return arg.  */\n-  if (! HONOR_INFINITIES (type))\n-    return non_lvalue_loc (loc, arg);\n-\n-  /* Calculate the result when the argument is a constant.  */\n-  if (TREE_CODE (arg) == COMPLEX_CST)\n-    {\n-      const REAL_VALUE_TYPE *real = TREE_REAL_CST_PTR (TREE_REALPART (arg));\n-      const REAL_VALUE_TYPE *imag = TREE_REAL_CST_PTR (TREE_IMAGPART (arg));\n-      \n-      if (real_isinf (real) || real_isinf (imag))\n-\treturn build_complex_cproj (type, imag->sign);\n-      else\n-\treturn arg;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Fold function call to builtin tan, tanf, or tanl with argument ARG.\n    Return NULL_TREE if no simplification can be made.  */\n \n@@ -9504,7 +9460,20 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n       break;\n \n     CASE_FLT_FN (BUILT_IN_CPROJ):\n-      return fold_builtin_cproj (loc, arg0, type);\n+      if (TREE_CODE (arg0) == COMPLEX_CST\n+\t  && TREE_CODE (TREE_TYPE (TREE_TYPE (arg0))) == REAL_TYPE)\n+\t{\n+\t  const REAL_VALUE_TYPE *real\n+\t    = TREE_REAL_CST_PTR (TREE_REALPART (arg0));\n+\t  const REAL_VALUE_TYPE *imag\n+\t    = TREE_REAL_CST_PTR (TREE_IMAGPART (arg0));\n+\n+\t  if (real_isinf (real) || real_isinf (imag))\n+\t    return build_complex_inf (type, imag->sign);\n+\t  else\n+\t    return arg0;\n+\t}\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_CSIN):\n       if (validate_arg (arg0, COMPLEX_TYPE)"}, {"sha": "6b181897e2b2b429492d60de54d93b7a6bf219da", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c52eab974ce9e1c81d770724adb56846bcaa4b/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c52eab974ce9e1c81d770724adb56846bcaa4b/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=92c52eab974ce9e1c81d770724adb56846bcaa4b", "patch": "@@ -2479,30 +2479,24 @@ along with GCC; see the file COPYING3.  If not see\n   (CABS (complex @0 @0))\n   (mult (abs @0) { build_real_truncate (type, dconst_sqrt2 ()); })))\n \n+/* cproj(x) -> x if we're ignoring infinities.  */\n+(simplify\n+ (CPROJ @0)\n+ (if (!HONOR_INFINITIES (type))\n+   @0))\n+\n /* If the real part is inf and the imag part is known to be\n    nonnegative, return (inf + 0i).  */\n (simplify\n  (CPROJ (complex REAL_CST@0 tree_expr_nonnegative_p@1))\n  (if (real_isinf (TREE_REAL_CST_PTR (@0)))\n-  (with\n-    {\n-      REAL_VALUE_TYPE rinf;\n-      real_inf (&rinf);\n-    }\n-   { build_complex (type, build_real (TREE_TYPE (type), rinf),\n-\t\t    build_zero_cst (TREE_TYPE (type))); })))\n+  { build_complex_inf (type, false); }))\n+\n /* If the imag part is inf, return (inf+I*copysign(0,imag)).  */\n (simplify\n  (CPROJ (complex @0 REAL_CST@1))\n  (if (real_isinf (TREE_REAL_CST_PTR (@1)))\n-  (with\n-    {\n-      REAL_VALUE_TYPE rinf, rzero = dconst0;\n-      real_inf (&rinf);\n-      rzero.sign = TREE_REAL_CST_PTR (@1)->sign;\n-    }\n-   { build_complex (type, build_real (TREE_TYPE (type), rinf),\n-\t\t    build_real (TREE_TYPE (type), rzero)); })))\n+  { build_complex_inf (type, TREE_REAL_CST_PTR (@1)->sign); }))\n \n \n /* Narrowing of arithmetic and logical operations. "}, {"sha": "09df67ebf881c3eb2700816e011293624f89f17b", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c52eab974ce9e1c81d770724adb56846bcaa4b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c52eab974ce9e1c81d770724adb56846bcaa4b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=92c52eab974ce9e1c81d770724adb56846bcaa4b", "patch": "@@ -1986,6 +1986,21 @@ build_complex (tree type, tree real, tree imag)\n   return t;\n }\n \n+/* Build a complex (inf +- 0i), such as for the result of cproj.\n+   TYPE is the complex tree type of the result.  If NEG is true, the\n+   imaginary zero is negative.  */\n+\n+tree\n+build_complex_inf (tree type, bool neg)\n+{\n+  REAL_VALUE_TYPE rinf, rzero = dconst0;\n+\n+  real_inf (&rinf);\n+  rzero.sign = neg;\n+  return build_complex (type, build_real (TREE_TYPE (type), rinf),\n+\t\t\tbuild_real (TREE_TYPE (type), rzero));\n+}\n+\n /* Return the constant 1 in type TYPE.  If TYPE has several elements, each\n    element is set to 1.  In particular, this is 1 + i for complex types.  */\n "}, {"sha": "ece083bed3eb1184c600ae995c18c18f7d5264bd", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c52eab974ce9e1c81d770724adb56846bcaa4b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c52eab974ce9e1c81d770724adb56846bcaa4b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=92c52eab974ce9e1c81d770724adb56846bcaa4b", "patch": "@@ -3853,6 +3853,7 @@ extern tree build_constructor_from_list (tree, tree);\n extern tree build_constructor_va (tree, int, ...);\n extern tree build_real_from_int_cst (tree, const_tree);\n extern tree build_complex (tree, tree, tree);\n+extern tree build_complex_inf (tree, bool);\n extern tree build_each_one_cst (tree);\n extern tree build_one_cst (tree);\n extern tree build_minus_one_cst (tree);"}]}