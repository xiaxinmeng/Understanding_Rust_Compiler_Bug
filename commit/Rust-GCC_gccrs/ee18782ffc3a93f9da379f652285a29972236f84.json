{"sha": "ee18782ffc3a93f9da379f652285a29972236f84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxODc4MmZmYzNhOTNmOWRhMzc5ZjY1MjI4NWEyOTk3MjIzNmY4NA==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2005-06-24T01:03:21Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2005-06-24T01:03:21Z"}, "message": "proto-lossage-[1-4].mm: New.\n\n[gcc/testsuite/ChangeLog]\n2005-06-23  Ziemowit Laski  <zlaski@apple.com>\n\n        * obj-c++.dg/proto-lossage-[1-4].mm: New.\n\nFrom-SVN: r101284", "tree": {"sha": "4325b2700014ca08d2b701e3e38eae585599690c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4325b2700014ca08d2b701e3e38eae585599690c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee18782ffc3a93f9da379f652285a29972236f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee18782ffc3a93f9da379f652285a29972236f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee18782ffc3a93f9da379f652285a29972236f84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee18782ffc3a93f9da379f652285a29972236f84/comments", "author": null, "committer": null, "parents": [{"sha": "0c9b7e9b5a0aa61d944c40759911d9b3638e1ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c9b7e9b5a0aa61d944c40759911d9b3638e1ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c9b7e9b5a0aa61d944c40759911d9b3638e1ab4"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "3a096e7a5bd87be34f2f36c1a851ccc19a880bfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18782ffc3a93f9da379f652285a29972236f84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18782ffc3a93f9da379f652285a29972236f84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee18782ffc3a93f9da379f652285a29972236f84", "patch": "@@ -1,3 +1,7 @@\n+2005-06-23  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* obj-c++.dg/proto-lossage-[1-4].mm: New.\n+\n 2005-06-23  Ziemowit Laski  <zlaski@apple.com>\n \n \t* obj-c++.dg/typedef-alias-1.mm: New."}, {"sha": "2f7eb9861400dd2d08f18044f0735d39096828a8", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-1.mm", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18782ffc3a93f9da379f652285a29972236f84/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18782ffc3a93f9da379f652285a29972236f84/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-1.mm?ref=ee18782ffc3a93f9da379f652285a29972236f84", "patch": "@@ -0,0 +1,44 @@\n+/* Test for situations in which protocol conformance information\n+   may be lost, leading to superfluous warnings.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+/* One-line substitute for objc/objc.h */\n+typedef struct objc_object { struct objc_class *class_pointer; } *id;\n+\n+@protocol NSObject\n+- (int)someValue;\n+@end\n+\n+@interface NSObject <NSObject>\n+@end\n+\n+@protocol PlateMethods\n+- (void)someMethod;\n+@end\n+\n+@interface Foo {\n+  NSObject <PlateMethods> *plate;\n+  id <PlateMethods> plate1;\n+  NSObject *plate2;\n+}\n+- (id <PlateMethods>) getPlate;\n+- (id <NSObject>) getPlate1;\n+- (int) getValue;\n+@end\n+\n+@implementation Foo\n+- (id <PlateMethods>) getPlate {\n+  return plate;  /* { dg-bogus \"does not implement\" } */\n+}\n+- (id <NSObject>) getPlate1 {\n+  return (id <NSObject>)plate1; /* { dg-bogus \"does not conform\" } */\n+}\n+- (int) getValue {\n+  int i = [plate1 someValue];   /* { dg-warning \".\\\\-someValue. not found in protocol\\\\(s\\\\)\" } */\n+\n+  int j = [(id <NSObject>)plate1 someValue];  /* { dg-bogus \"not found in protocol\" } */\n+  int k = [(id)plate1 someValue]; /* { dg-bogus \"not found in protocol\" } */\n+  return i + j + k;\n+}\n+@end"}, {"sha": "b3ab9681f6273ef5d1a727a15a9cb006b7a3fba8", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-2.mm", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18782ffc3a93f9da379f652285a29972236f84/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18782ffc3a93f9da379f652285a29972236f84/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-2.mm?ref=ee18782ffc3a93f9da379f652285a29972236f84", "patch": "@@ -0,0 +1,20 @@\n+/* Don't forget to look in protocols if a class (and its superclasses) do not\n+   provide a suitable method.  */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@protocol Zot\n+-(void) zot;\n+@end\n+\n+@interface Foo : Object <Zot>\n+@end\n+\n+int foo()\n+{\n+\tFoo *f=nil;\n+\t[f zot]; /* There should be no warnings here! */\n+\treturn 0;\n+}\n+"}, {"sha": "512a59ee6dc9a80283d8ed0c4abaa00d034d3585", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-3.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18782ffc3a93f9da379f652285a29972236f84/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18782ffc3a93f9da379f652285a29972236f84/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm?ref=ee18782ffc3a93f9da379f652285a29972236f84", "patch": "@@ -0,0 +1,25 @@\n+/* Crash due to descriptionFor(Instance|Class)Method applied to\n+   a protocol with no instance/class methods respectively.\n+   Problem report and original fix by richard@brainstorm.co.uk.  */\n+/* { dg-do run } */\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+#include <objc/Protocol.h>\n+\n+@protocol NoInstanceMethods\n++ testMethod;\n+@end\n+\n+@protocol NoClassMethods\n+- testMethod;\n+@end\n+\n+int\n+main()\n+{\n+[@protocol(NoInstanceMethods) descriptionForInstanceMethod: @selector(name)];\n+[@protocol(NoInstanceMethods) descriptionForClassMethod: @selector(name)];\n+[@protocol(NoClassMethods) descriptionForInstanceMethod: @selector(name)];\n+[@protocol(NoClassMethods) descriptionForClassMethod: @selector(name)];\n+return 0;\n+}"}, {"sha": "a5092a11a62eac78cc2ffad700529a3d1f36eb4a", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-4.mm", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18782ffc3a93f9da379f652285a29972236f84/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18782ffc3a93f9da379f652285a29972236f84/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-4.mm?ref=ee18782ffc3a93f9da379f652285a29972236f84", "patch": "@@ -0,0 +1,52 @@\n+/* Test for situations in which protocol conformance information\n+   may be lost while casting.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+/* One-line substitute for objc/objc.h */\n+typedef struct objc_object { struct objc_class *class_pointer; } *id;\n+\n+@protocol Proto\n+- (long)someValue;\n+@end\n+\n+@interface Obj\n+- (long)anotherValue;\n+@end\n+\n+long foo(void) {\n+  long receiver = 2;\n+  Obj *objrcvr;\n+  Obj <Proto> *objrcvr2;\n+\n+  /* NB: Since 'receiver' is an invalid ObjC message receiver, the compiler\n+     should warn but then search for methods as if we were messaging 'id'.  */\n+\n+  receiver += [receiver someValue]; /* { dg-warning \"invalid receiver type .long int.\" } */\n+  receiver += [receiver anotherValue]; /* { dg-warning \"invalid receiver type .long int.\" } */\n+\n+  receiver += [(Obj *)receiver someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n+/* { dg-error \"invalid conversion\" \"\" { target *-*-* } 28 } */\n+\n+  receiver += [(Obj *)receiver anotherValue];\n+  receiver += [(Obj <Proto> *)receiver someValue];\n+  receiver += [(Obj <Proto> *)receiver anotherValue];\n+  receiver += [objrcvr someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n+/* { dg-error \"invalid conversion\" \"\" { target *-*-* } 34 } */\n+\n+  receiver += [objrcvr anotherValue];\n+  receiver += [(Obj <Proto> *)objrcvr someValue];\n+  receiver += [(Obj <Proto> *)objrcvr anotherValue];\n+  receiver += [objrcvr2 someValue];\n+  receiver += [objrcvr2 anotherValue];\n+  receiver += [(Obj *)objrcvr2 someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n+/* { dg-warning \"invalid conversion\" \"\" { target *-*-* } 42 } */\n+\n+  receiver += [(Obj *)objrcvr2 anotherValue];\n+\n+  return receiver;\n+}\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}]}