{"sha": "5c3bb9eb9ed5f92b376c048460d515416fad962b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzYmI5ZWI5ZWQ1ZjkyYjM3NmMwNDg0NjBkNTE1NDE2ZmFkOTYyYg==", "commit": {"author": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2005-12-28T17:46:21Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2005-12-28T17:46:21Z"}, "message": "[multiple changes]\n\n2005-12-27  Tom Tromey  <tromey@redhat.com>\n\n\t* gnu/java/nio/SelectorImpl.java: Added import.\n\n2005-12-26  Anthony Green  <green@redhat.com>\n\n        * java/net/Socket.java (connect): Don't close the socket on\n        exceptions.\n\n        * gnu/java/nio/SocketChannelImpl.java (read): Compute the right amount\n        of data to read (dst.remaining()).\n        * gnu/java/nio/DatagramChannelImpl.java (receive): Ditto.\n\n        * gnu/java/nio/SelectorImpl.java (select): Handle OP_CONNECT\n        properly.\n\nFrom-SVN: r109114", "tree": {"sha": "15dd1635f8c865e018064a4aa8d7cfaa79c78f5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15dd1635f8c865e018064a4aa8d7cfaa79c78f5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c3bb9eb9ed5f92b376c048460d515416fad962b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3bb9eb9ed5f92b376c048460d515416fad962b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c3bb9eb9ed5f92b376c048460d515416fad962b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3bb9eb9ed5f92b376c048460d515416fad962b/comments", "author": null, "committer": null, "parents": [{"sha": "3779973b0b163d0323aa679f9ec81c8caae5c427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3779973b0b163d0323aa679f9ec81c8caae5c427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3779973b0b163d0323aa679f9ec81c8caae5c427"}], "stats": {"total": 66, "additions": 32, "deletions": 34}, "files": [{"sha": "85df787cc4d6a265db7bef4c2c0f4d14988b0cd7", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3bb9eb9ed5f92b376c048460d515416fad962b/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3bb9eb9ed5f92b376c048460d515416fad962b/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=5c3bb9eb9ed5f92b376c048460d515416fad962b", "patch": "@@ -1,3 +1,19 @@\n+2005-12-27  Tom Tromey  <tromey@redhat.com>\n+\n+\t* gnu/java/nio/SelectorImpl.java: Added import.\n+\n+2005-12-26  Anthony Green  <green@redhat.com>\n+\n+        * java/net/Socket.java (connect): Don't close the socket on\n+        exceptions.\n+\n+        * gnu/java/nio/SocketChannelImpl.java (read): Compute the right amount\n+        of data to read (dst.remaining()).\n+        * gnu/java/nio/DatagramChannelImpl.java (receive): Ditto.\n+\n+        * gnu/java/nio/SelectorImpl.java (select): Handle OP_CONNECT\n+        properly.\n+\n 2005-11-17  Roman Kennke  <kennke@aicas.com>\n \n \t* javax/swing/JEditorPane.java"}, {"sha": "4687bf3f59ec729f8fc30a182683cce56e64f885", "filename": "libjava/classpath/gnu/java/nio/DatagramChannelImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3bb9eb9ed5f92b376c048460d515416fad962b/libjava%2Fclasspath%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3bb9eb9ed5f92b376c048460d515416fad962b/libjava%2Fclasspath%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java?ref=5c3bb9eb9ed5f92b376c048460d515416fad962b", "patch": "@@ -201,7 +201,7 @@ public SocketAddress receive (ByteBuffer dst)\n     try\n       {\n         DatagramPacket packet;\n-        int len = dst.capacity() - dst.position();\n+        int len = dst.remaining();\n         \n         if (dst.hasArray())\n           {"}, {"sha": "e10f71574432b692fcf4e255626300c0dfa59b48", "filename": "libjava/classpath/gnu/java/nio/SelectorImpl.java", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3bb9eb9ed5f92b376c048460d515416fad962b/libjava%2Fclasspath%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3bb9eb9ed5f92b376c048460d515416fad962b/libjava%2Fclasspath%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java?ref=5c3bb9eb9ed5f92b376c048460d515416fad962b", "patch": "@@ -43,6 +43,7 @@\n import java.nio.channels.SelectableChannel;\n import java.nio.channels.SelectionKey;\n import java.nio.channels.Selector;\n+import java.nio.channels.SocketChannel;\n import java.nio.channels.spi.AbstractSelectableChannel;\n import java.nio.channels.spi.AbstractSelector;\n import java.nio.channels.spi.SelectorProvider;\n@@ -284,19 +285,18 @@ public synchronized int select (long timeout)\n                 // Set new ready write ops\n                 for (int i = 0; i < write.length; i++)\n                   {\n-                    if (key.getNativeFD() == write[i])\n-                      {\n-                        ops = ops | SelectionKey.OP_WRITE;\n-\n-        //                 if (key.channel ().isConnected ())\n-        //                   {\n-        //                     ops = ops | SelectionKey.OP_WRITE;\n-        //                   }\n-        //                 else\n-        //                   {\n-        //                     ops = ops | SelectionKey.OP_CONNECT;\n-        //                   }\n-                     }\n+\t\t    if (key.getNativeFD() == write[i])\n+\t\t      {\n+\t\t\tif (key.channel() instanceof SocketChannel)\n+\t\t\t  {\n+\t\t\t    if (((SocketChannel) key.channel ()).isConnected ())\n+\t\t\t      ops = ops | SelectionKey.OP_WRITE;\n+\t\t\t    else\n+\t\t\t      ops = ops | SelectionKey.OP_CONNECT;\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  ops = ops | SelectionKey.OP_WRITE;\n+\t\t      }\n                   }\n \n                 // FIXME: We dont handle exceptional file descriptors yet."}, {"sha": "680eba2f92b68b9857dfb02b41fd19c0234e4f2d", "filename": "libjava/classpath/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3bb9eb9ed5f92b376c048460d515416fad962b/libjava%2Fclasspath%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3bb9eb9ed5f92b376c048460d515416fad962b/libjava%2Fclasspath%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=5c3bb9eb9ed5f92b376c048460d515416fad962b", "patch": "@@ -220,7 +220,7 @@ public int read(ByteBuffer dst) throws IOException\n     int offset = 0;\n     InputStream input = socket.getInputStream();\n     int available = input.available();\n-    int len = dst.capacity() - dst.position();\n+    int len = dst.remaining();\n \t\n     if ((! isBlocking()) && available == 0)\n       return 0;"}, {"sha": "b2249ffaa0dded08b9dbbf42b112fec7157a5e37", "filename": "libjava/classpath/java/net/Socket.java", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3bb9eb9ed5f92b376c048460d515416fad962b/libjava%2Fclasspath%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3bb9eb9ed5f92b376c048460d515416fad962b/libjava%2Fclasspath%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjava%2Fnet%2FSocket.java?ref=5c3bb9eb9ed5f92b376c048460d515416fad962b", "patch": "@@ -437,25 +437,7 @@ public void connect(SocketAddress endpoint, int timeout)\n     if (! isBound())\n       bind(null);\n \n-    try\n-      {\n-\tgetImpl().connect(endpoint, timeout);\n-      }\n-    catch (IOException exception)\n-      {\n-\tclose();\n-\tthrow exception;\n-      }\n-    catch (RuntimeException exception)\n-      {\n-\tclose();\n-\tthrow exception;\n-      }\n-    catch (Error error)\n-      {\n-\tclose();\n-\tthrow error;\n-      }\n+    getImpl().connect(endpoint, timeout);\n   }\n \n   /**"}]}