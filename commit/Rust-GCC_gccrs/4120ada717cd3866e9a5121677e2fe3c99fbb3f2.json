{"sha": "4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEyMGFkYTcxN2NkMzg2NmU5YTUxMjE2NzdlMmZlM2M5OWZiYjNmMg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-09-10T10:06:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T10:06:37Z"}, "message": "gnatlink.adb, [...]: Minor reformatting.\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* gnatlink.adb, prj-ext.adb, prj-util.adb, s-tporft.adb,\n\tsem_ch3.adb: Minor reformatting.\n\nFrom-SVN: r164156", "tree": {"sha": "b65d5f0cbfd730d7df85bb406d6796438460078f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b65d5f0cbfd730d7df85bb406d6796438460078f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/comments", "author": null, "committer": null, "parents": [{"sha": "46f52a47acfc74e3f9cdc28bf30411095270e640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46f52a47acfc74e3f9cdc28bf30411095270e640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46f52a47acfc74e3f9cdc28bf30411095270e640"}], "stats": {"total": 72, "additions": 38, "deletions": 34}, "files": [{"sha": "e03ced62b80b21082ade7612fc64c78d6e36499c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "patch": "@@ -1,3 +1,8 @@\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnatlink.adb, prj-ext.adb, prj-util.adb, s-tporft.adb,\n+\tsem_ch3.adb: Minor reformatting.\n+\n 2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Derive_Subprograms): An interface primitive operation"}, {"sha": "47397c5c92c59e780331fec3a441fab7d57e3470", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "patch": "@@ -41,10 +41,10 @@ with Table;\n with Targparm; use Targparm;\n with Types;\n \n-with Ada.Command_Line;     use Ada.Command_Line;\n-with Ada.Exceptions;       use Ada.Exceptions;\n+with Ada.Command_Line; use Ada.Command_Line;\n+with Ada.Exceptions;   use Ada.Exceptions;\n \n-with System.OS_Lib;        use System.OS_Lib;\n+with System.OS_Lib; use System.OS_Lib;\n with System.CRTL;\n \n with Interfaces.C_Streams; use Interfaces.C_Streams;\n@@ -200,11 +200,11 @@ procedure Gnatlink is\n    --  Return just the file name part without the extension (if present)\n \n    procedure Check_Existing_Executable (File_Name : String);\n-   --  Delete any existing executable to avoid accidentally updating\n-   --  the target of a symbolic link, but produce a Fatail_Error if\n-   --  File_Name matches any of the source file names. This avoids\n-   --  overwriting of extensionless source files by accident on systems\n-   --  where executables do not have extensions.\n+   --  Delete any existing executable to avoid accidentally updating the target\n+   --  of a symbolic link, but produce a Fatail_Error if File_Name matches any\n+   --  of the source file names. This avoids overwriting of extensionless\n+   --  source files by accident on systems where executables do not have\n+   --  extensions.\n \n    procedure Delete (Name : String);\n    --  Wrapper to unlink as status is ignored by this application\n@@ -273,6 +273,7 @@ procedure Gnatlink is\n       Ename : String := File_Name;\n       Efile : File_Name_Type;\n       Sfile : File_Name_Type;\n+\n    begin\n       Canonical_Case_File_Name (Ename);\n       Name_Len := 0;"}, {"sha": "40816cf24decb0c8eb4d68b798cd90fc963cc2e5", "filename": "gcc/ada/prj-ext.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2Fprj-ext.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2Fprj-ext.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-ext.adb?ref=4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "patch": "@@ -250,8 +250,8 @@ package body Prj.Ext is\n                Prefix := new String'(Executable_Prefix_Path);\n \n                if Prefix.all /= \"\" then\n-                  if Tree.Target_Name /= null and then\n-                    Tree.Target_Name.all /= \"\"\n+                  if Tree.Target_Name /= null\n+                    and then Tree.Target_Name.all /= \"\"\n                   then\n                      Add_Str_To_Name_Buffer\n                        (Path_Separator & Prefix.all &"}, {"sha": "43e51012dcff9e0a295d093ea453c3b5283af0a3", "filename": "gcc/ada/prj-util.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2Fprj-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2Fprj-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-util.adb?ref=4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "patch": "@@ -188,11 +188,12 @@ package body Prj.Util is\n             return Result;\n \n          elsif Builder_Package /= No_Package then\n-            --  We still want to take into account cases where the suffix is\n-            --  specified in the project itself, as opposed to the config file.\n-            --  Unfortunately, when the project was processed, they are both\n-            --  stored in Project.Config, so we need to get it from the project\n-            --  again\n+\n+            --  If the suffix is specified in the project itself, as\n+            --  opposed to the config file, it needs to be taken into account.\n+            --  Unfortunately, when the project was processed, in both cases\n+            --  the suffix is stored in Project.Config, so get it from the\n+            --  project again.\n \n             Suffix_From_Project :=\n               Prj.Util.Value_Of"}, {"sha": "58badd6722a1a41a0a1af56ee6d157f430b3480a", "filename": "gcc/ada/s-tporft.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2Fs-tporft.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2Fs-tporft.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tporft.adb?ref=4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "patch": "@@ -93,13 +93,11 @@ begin\n    System.Soft_Links.Create_TSD (Self_Id.Common.Compiler_Data);\n \n    --  ???\n-   --  The following call is commented out to avoid dependence on\n-   --  the System.Tasking.Initialization package.\n-   --  It seems that if we want Ada.Task_Attributes to work correctly\n-   --  for C threads we will need to raise the visibility of this soft\n-   --  link to System.Soft_Links.\n-   --  We are putting that off until this new functionality is otherwise\n-   --  stable.\n+   --  The following call is commented out to avoid dependence on the\n+   --  System.Tasking.Initialization package. It seems that if we want\n+   --  Ada.Task_Attributes to work correctly for C threads we will need to\n+   --  raise the visibility of this soft link to System.Soft_Links. We are\n+   --  putting that off until this new functionality is otherwise stable.\n \n    --  System.Tasking.Initialization.Initialize_Attributes_Link.all (T);\n "}, {"sha": "1a43ed6b8e592f7e3963ea9faf3b01299a6b67a3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4120ada717cd3866e9a5121677e2fe3c99fbb3f2/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4120ada717cd3866e9a5121677e2fe3c99fbb3f2", "patch": "@@ -12962,20 +12962,19 @@ package body Sem_Ch3 is\n             then\n                null;\n \n-            --  Case 2: Inherit entities associated with interfaces that\n-            --  were not covered by the parent type. We exclude here null\n-            --  interface primitives because they do not need special\n-            --  management.\n-            --  We also exclude interface operations that are renamings.\n-            --  If the subprogram is an explicit renaming of an interface\n-            --  primitive, it is a regular primitive operation, and the\n-            --  presence of its alias is not relevant: it has to be derived\n-            --  like any other primitive.\n+            --  Case 2: Inherit entities associated with interfaces that were\n+            --  not covered by the parent type. We exclude here null interface\n+            --  primitives because they do not need special management.\n+\n+            --  We also exclude interface operations that are renamings. If the\n+            --  subprogram is an explicit renaming of an interface primitive,\n+            --  it is a regular primitive operation, and the presence of its\n+            --  alias is not relevant: it has to be derived like any other\n+            --  primitive.\n \n             elsif Present (Alias (Subp))\n-              and then\n-                Nkind (Unit_Declaration_Node (Subp))\n-                  /= N_Subprogram_Renaming_Declaration\n+              and then Nkind (Unit_Declaration_Node (Subp)) /=\n+                                            N_Subprogram_Renaming_Declaration\n               and then Is_Interface (Find_Dispatching_Type (Alias_Subp))\n               and then not\n                 (Nkind (Parent (Alias_Subp)) = N_Procedure_Specification"}]}