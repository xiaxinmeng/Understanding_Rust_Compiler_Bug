{"sha": "d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI5ZjdkZDUwZGU5ZThlNDZmN2UyNDdjNTNmM2IwNDA1YTNkYWRkOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T09:18:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T09:18:14Z"}, "message": "[AArch64] Make more use of SVE conditional constant moves\n\nThis patch extends the SVE UNSPEC_SEL patterns so that they can use:\n\n(1) MOV /M of a duplicated integer constant\n(2) MOV /M of a duplicated floating-point constant bitcast to an integer,\n    accepting the same constants as (1)\n(3) FMOV /M of a duplicated floating-point constant\n(4) MOV /Z of a duplicated integer constant\n(5) MOV /Z of a duplicated floating-point constant bitcast to an integer,\n    accepting the same constants as (4)\n(6) MOVPRFXed FMOV /M of a duplicated floating-point constant\n\nWe already handled (4) with a special pattern; the rest are new.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_bit_representation): New function.\n\t(aarch64_print_vector_float_operand): Also handle 8-bit floats.\n\t(aarch64_print_operand): Add support for %I.\n\t(aarch64_sve_dup_immediate_p): Handle scalars as well as vectors.\n\tBitcast floating-point constants to the corresponding integer constant.\n\t(aarch64_float_const_representable_p): Handle vectors as well\n\tas scalars.\n\t(aarch64_expand_sve_vcond): Make sure that the operands are valid\n\tfor the new vcond_mask_<mode><vpred> expander.\n\t* config/aarch64/predicates.md (aarch64_sve_dup_immediate): Also\n\ttest aarch64_float_const_representable_p.\n\t(aarch64_sve_reg_or_dup_imm): New predicate.\n\t* config/aarch64/aarch64-sve.md (vec_extract<vpred><Vel>): Use\n\tgen_vcond_mask_<mode><vpred> instead of\n\tgen_aarch64_sve_dup<mode>_const.\n\t(vcond_mask_<mode><vpred>): Turn into a define_expand that\n\taccepts aarch64_sve_reg_or_dup_imm and aarch64_simd_reg_or_zero\n\tfor operands 1 and 2 respectively.  Force operand 2 into a\n\tregister if operand 1 is a register.  Fold old define_insn...\n\t(aarch64_sve_dup<mode>_const): ...and this define_insn...\n\t(*vcond_mask_<mode><vpred>): ...into this new pattern.  Handle\n\tfloating-point constants that can be moved as integers.  Add\n\talternatives for MOV /M and FMOV /M.\n\t(vcond<mode><v_int_equiv>, vcondu<mode><v_int_equiv>)\n\t(vcond<mode><v_fp_equiv>): Accept nonmemory_operand for operands\n\t1 and 2 respectively.\n\t* config/aarch64/constraints.md (Ufc): Handle vectors as well\n\tas scalars.\n\t(vss): New constraint.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/vcond_18.c: New test.\n\t* gcc.target/aarch64/sve/vcond_18_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_19.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_19_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_20.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_20_run.c: Likewise.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274441", "tree": {"sha": "816c7bc8471831a06d301d045e93966e86fe22fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/816c7bc8471831a06d301d045e93966e86fe22fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75079ddf9cb867576bbef66f3e8370d9fdeea3b8"}], "stats": {"total": 404, "additions": 371, "deletions": 33}, "files": [{"sha": "777f1c87874c3932e6e6bd8cb54ace7aa8b510df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -1,3 +1,36 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64.c (aarch64_bit_representation): New function.\n+\t(aarch64_print_vector_float_operand): Also handle 8-bit floats.\n+\t(aarch64_print_operand): Add support for %I.\n+\t(aarch64_sve_dup_immediate_p): Handle scalars as well as vectors.\n+\tBitcast floating-point constants to the corresponding integer constant.\n+\t(aarch64_float_const_representable_p): Handle vectors as well\n+\tas scalars.\n+\t(aarch64_expand_sve_vcond): Make sure that the operands are valid\n+\tfor the new vcond_mask_<mode><vpred> expander.\n+\t* config/aarch64/predicates.md (aarch64_sve_dup_immediate): Also\n+\ttest aarch64_float_const_representable_p.\n+\t(aarch64_sve_reg_or_dup_imm): New predicate.\n+\t* config/aarch64/aarch64-sve.md (vec_extract<vpred><Vel>): Use\n+\tgen_vcond_mask_<mode><vpred> instead of\n+\tgen_aarch64_sve_dup<mode>_const.\n+\t(vcond_mask_<mode><vpred>): Turn into a define_expand that\n+\taccepts aarch64_sve_reg_or_dup_imm and aarch64_simd_reg_or_zero\n+\tfor operands 1 and 2 respectively.  Force operand 2 into a\n+\tregister if operand 1 is a register.  Fold old define_insn...\n+\t(aarch64_sve_dup<mode>_const): ...and this define_insn...\n+\t(*vcond_mask_<mode><vpred>): ...into this new pattern.  Handle\n+\tfloating-point constants that can be moved as integers.  Add\n+\talternatives for MOV /M and FMOV /M.\n+\t(vcond<mode><v_int_equiv>, vcondu<mode><v_int_equiv>)\n+\t(vcond<mode><v_fp_equiv>): Accept nonmemory_operand for operands\n+\t1 and 2 respectively.\n+\t* config/aarch64/constraints.md (Ufc): Handle vectors as well\n+\tas scalars.\n+\t(vss): New constraint.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/predicates.md (aarch64_sve_float_maxmin_immediate)"}, {"sha": "1bdfc4706d14052c6345ba1af577c8102b2dde7a", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 41, "deletions": 24, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -1404,9 +1404,9 @@\n   \"TARGET_SVE\"\n   {\n     rtx tmp = gen_reg_rtx (<MODE>mode);\n-    emit_insn (gen_aarch64_sve_dup<mode>_const (tmp, operands[1],\n-\t\t\t\t\t\tCONST1_RTX (<MODE>mode),\n-\t\t\t\t\t\tCONST0_RTX (<MODE>mode)));\n+    emit_insn (gen_vcond_mask_<mode><vpred> (tmp, operands[1],\n+\t\t\t\t\t     CONST1_RTX (<MODE>mode),\n+\t\t\t\t\t     CONST0_RTX (<MODE>mode)));\n     emit_insn (gen_vec_extract<mode><Vel> (operands[0], tmp, operands[2]));\n     DONE;\n   }\n@@ -3023,34 +3023,51 @@\n ;; ---- [INT,FP] Select based on predicates\n ;; -------------------------------------------------------------------------\n ;; Includes merging patterns for:\n+;; - FMOV\n ;; - MOV\n ;; - SEL\n ;; -------------------------------------------------------------------------\n \n ;; vcond_mask operand order: true, false, mask\n ;; UNSPEC_SEL operand order: mask, true, false (as for VEC_COND_EXPR)\n ;; SEL operand order:        mask, true, false\n-(define_insn \"vcond_mask_<mode><vpred>\"\n-  [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=w\")\n+(define_expand \"vcond_mask_<mode><vpred>\"\n+  [(set (match_operand:SVE_ALL 0 \"register_operand\")\n \t(unspec:SVE_ALL\n-\t  [(match_operand:<VPRED> 3 \"register_operand\" \"Upa\")\n-\t   (match_operand:SVE_ALL 1 \"register_operand\" \"w\")\n-\t   (match_operand:SVE_ALL 2 \"register_operand\" \"w\")]\n+\t  [(match_operand:<VPRED> 3 \"register_operand\")\n+\t   (match_operand:SVE_ALL 1 \"aarch64_sve_reg_or_dup_imm\")\n+\t   (match_operand:SVE_ALL 2 \"aarch64_simd_reg_or_zero\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n-  \"sel\\t%0.<Vetype>, %3, %1.<Vetype>, %2.<Vetype>\"\n+  {\n+    if (register_operand (operands[1], <MODE>mode))\n+      operands[2] = force_reg (<MODE>mode, operands[2]);\n+  }\n )\n \n-;; Selects between a duplicated immediate and zero.\n-(define_insn \"aarch64_sve_dup<mode>_const\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_I\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (match_operand:SVE_I 2 \"aarch64_sve_dup_immediate\")\n-\t   (match_operand:SVE_I 3 \"aarch64_simd_imm_zero\")]\n+;; Selects between:\n+;; - two registers\n+;; - a duplicated immediate and a register\n+;; - a duplicated immediate and zero\n+(define_insn \"*vcond_mask_<mode><vpred>\"\n+  [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=w, w, w, w, ?w, ?&w, ?&w\")\n+\t(unspec:SVE_ALL\n+\t  [(match_operand:<VPRED> 3 \"register_operand\" \"Upa, Upa, Upa, Upa, Upl, Upl, Upl\")\n+\t   (match_operand:SVE_ALL 1 \"aarch64_sve_reg_or_dup_imm\" \"w, vss, vss, Ufc, Ufc, vss, Ufc\")\n+\t   (match_operand:SVE_ALL 2 \"aarch64_simd_reg_or_zero\" \"w, 0, Dz, 0, Dz, w, w\")]\n \t  UNSPEC_SEL))]\n-  \"TARGET_SVE\"\n-  \"mov\\t%0.<Vetype>, %1/z, #%2\"\n+  \"TARGET_SVE\n+   && (!register_operand (operands[1], <MODE>mode)\n+       || register_operand (operands[2], <MODE>mode))\"\n+  \"@\n+   sel\\t%0.<Vetype>, %3, %1.<Vetype>, %2.<Vetype>\n+   mov\\t%0.<Vetype>, %3/m, #%I1\n+   mov\\t%0.<Vetype>, %3/z, #%I1\n+   fmov\\t%0.<Vetype>, %3/m, #%1\n+   movprfx\\t%0.<Vetype>, %3/z, %0.<Vetype>\\;fmov\\t%0.<Vetype>, %3/m, #%1\n+   movprfx\\t%0, %2\\;mov\\t%0.<Vetype>, %3/m, #%I1\n+   movprfx\\t%0, %2\\;fmov\\t%0.<Vetype>, %3/m, #%1\"\n+  [(set_attr \"movprfx\" \"*,*,*,*,yes,yes,yes\")]\n )\n \n ;; -------------------------------------------------------------------------\n@@ -3067,8 +3084,8 @@\n \t  (match_operator 3 \"comparison_operator\"\n \t    [(match_operand:<V_INT_EQUIV> 4 \"register_operand\")\n \t     (match_operand:<V_INT_EQUIV> 5 \"nonmemory_operand\")])\n-\t  (match_operand:SVE_ALL 1 \"register_operand\")\n-\t  (match_operand:SVE_ALL 2 \"register_operand\")))]\n+\t  (match_operand:SVE_ALL 1 \"nonmemory_operand\")\n+\t  (match_operand:SVE_ALL 2 \"nonmemory_operand\")))]\n   \"TARGET_SVE\"\n   {\n     aarch64_expand_sve_vcond (<MODE>mode, <V_INT_EQUIV>mode, operands);\n@@ -3084,8 +3101,8 @@\n \t  (match_operator 3 \"comparison_operator\"\n \t    [(match_operand:<V_INT_EQUIV> 4 \"register_operand\")\n \t     (match_operand:<V_INT_EQUIV> 5 \"nonmemory_operand\")])\n-\t  (match_operand:SVE_ALL 1 \"register_operand\")\n-\t  (match_operand:SVE_ALL 2 \"register_operand\")))]\n+\t  (match_operand:SVE_ALL 1 \"nonmemory_operand\")\n+\t  (match_operand:SVE_ALL 2 \"nonmemory_operand\")))]\n   \"TARGET_SVE\"\n   {\n     aarch64_expand_sve_vcond (<MODE>mode, <V_INT_EQUIV>mode, operands);\n@@ -3101,8 +3118,8 @@\n \t  (match_operator 3 \"comparison_operator\"\n \t    [(match_operand:<V_FP_EQUIV> 4 \"register_operand\")\n \t     (match_operand:<V_FP_EQUIV> 5 \"aarch64_simd_reg_or_zero\")])\n-\t  (match_operand:SVE_HSD 1 \"register_operand\")\n-\t  (match_operand:SVE_HSD 2 \"register_operand\")))]\n+\t  (match_operand:SVE_HSD 1 \"nonmemory_operand\")\n+\t  (match_operand:SVE_HSD 2 \"nonmemory_operand\")))]\n   \"TARGET_SVE\"\n   {\n     aarch64_expand_sve_vcond (<MODE>mode, <V_FP_EQUIV>mode, operands);"}, {"sha": "aaf9e80aea5e8332b5bdccace63174a5912bf36a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -1482,6 +1482,16 @@ aarch64_dbx_register_number (unsigned regno)\n    return DWARF_FRAME_REGISTERS;\n }\n \n+/* If X is a CONST_DOUBLE, return its bit representation as a constant\n+   integer, otherwise return X unmodified.  */\n+static rtx\n+aarch64_bit_representation (rtx x)\n+{\n+  if (CONST_DOUBLE_P (x))\n+    x = gen_lowpart (int_mode_for_mode (GET_MODE (x)).require (), x);\n+  return x;\n+}\n+\n /* Return true if MODE is any of the Advanced SIMD structure modes.  */\n static bool\n aarch64_advsimd_struct_mode_p (machine_mode mode)\n@@ -8275,15 +8285,22 @@ aarch64_print_vector_float_operand (FILE *f, rtx x, bool negate)\n   if (negate)\n     r = real_value_negate (&r);\n \n-  /* We only handle the SVE single-bit immediates here.  */\n+  /* Handle the SVE single-bit immediates specially, since they have a\n+     fixed form in the assembly syntax.  */\n   if (real_equal (&r, &dconst0))\n     asm_fprintf (f, \"0.0\");\n   else if (real_equal (&r, &dconst1))\n     asm_fprintf (f, \"1.0\");\n   else if (real_equal (&r, &dconsthalf))\n     asm_fprintf (f, \"0.5\");\n   else\n-    return false;\n+    {\n+      const int buf_size = 20;\n+      char float_buf[buf_size] = {'\\0'};\n+      real_to_decimal_for_mode (float_buf, &r, buf_size, buf_size,\n+\t\t\t\t1, GET_MODE (elt));\n+      asm_fprintf (f, \"%s\", float_buf);\n+    }\n \n   return true;\n }\n@@ -8312,6 +8329,11 @@ sizetochar (int size)\n \t\t\tand print it as an unsigned integer, in decimal.\n      'e':\t\tPrint the sign/zero-extend size as a character 8->b,\n \t\t\t16->h, 32->w.\n+     'I':\t\tIf the operand is a duplicated vector constant,\n+\t\t\treplace it with the duplicated scalar.  If the\n+\t\t\toperand is then a floating-point constant, replace\n+\t\t\tit with the integer bit representation.  Print the\n+\t\t\ttransformed constant as a signed decimal number.\n      'p':\t\tPrints N such that 2^N == X (X must be power of 2 and\n \t\t\tconst int).\n      'P':\t\tPrint the number of non-zero bits in X (a const_int).\n@@ -8444,6 +8466,19 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       asm_fprintf (f, \"%s\", reg_names [REGNO (x) + 1]);\n       break;\n \n+    case 'I':\n+      {\n+\tx = aarch64_bit_representation (unwrap_const_vec_duplicate (x));\n+\tif (CONST_INT_P (x))\n+\t  asm_fprintf (f, \"%wd\", INTVAL (x));\n+\telse\n+\t  {\n+\t    output_operand_lossage (\"invalid operand for '%%%c'\", code);\n+\t    return;\n+\t  }\n+\tbreak;\n+      }\n+\n     case 'M':\n     case 'm':\n       {\n@@ -15116,13 +15151,11 @@ aarch64_sve_bitmask_immediate_p (rtx x)\n bool\n aarch64_sve_dup_immediate_p (rtx x)\n {\n-  rtx elt;\n-\n-  if (!const_vec_duplicate_p (x, &elt)\n-      || !CONST_INT_P (elt))\n+  x = aarch64_bit_representation (unwrap_const_vec_duplicate (x));\n+  if (!CONST_INT_P (x))\n     return false;\n \n-  HOST_WIDE_INT val = INTVAL (elt);\n+  HOST_WIDE_INT val = INTVAL (x);\n   if (val & 0xff)\n     return IN_RANGE (val, -0x80, 0x7f);\n   return IN_RANGE (val, -0x8000, 0x7f00);\n@@ -16965,6 +16998,7 @@ aarch64_float_const_representable_p (rtx x)\n   REAL_VALUE_TYPE r, m;\n   bool fail;\n \n+  x = unwrap_const_vec_duplicate (x);\n   if (!CONST_DOUBLE_P (x))\n     return false;\n \n@@ -18086,6 +18120,13 @@ aarch64_expand_sve_vcond (machine_mode data_mode, machine_mode cmp_mode,\n   else\n     aarch64_expand_sve_vec_cmp_int (pred, GET_CODE (ops[3]), ops[4], ops[5]);\n \n+  if (!aarch64_sve_reg_or_dup_imm (ops[1], data_mode))\n+    ops[1] = force_reg (data_mode, ops[1]);\n+  /* The \"false\" value can only be zero if the \"true\" value is a constant.  */\n+  if (register_operand (ops[1], data_mode)\n+      || !aarch64_simd_reg_or_zero (ops[2], data_mode))\n+    ops[2] = force_reg (data_mode, ops[2]);\n+\n   rtvec vec = gen_rtvec (3, pred, ops[1], ops[2]);\n   emit_set_insn (ops[0], gen_rtx_UNSPEC (data_mode, vec, UNSPEC_SEL));\n }"}, {"sha": "28734b46009a09d60a0c34b58e1ac73471cc3f97", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -293,7 +293,7 @@\n (define_constraint \"Ufc\"\n   \"A floating point constant which can be used with an\\\n    FMOV immediate operation.\"\n-  (and (match_code \"const_double\")\n+  (and (match_code \"const_double,const_vector\")\n        (match_test \"aarch64_float_const_representable_p (op)\")))\n \n (define_constraint \"Uvi\"\n@@ -400,6 +400,12 @@\n    CMP instructions.\"\n  (match_operand 0 \"aarch64_sve_cmp_vsc_immediate\"))\n \n+(define_constraint \"vss\"\n+  \"@internal\n+   A constraint that matches a signed immediate operand valid for SVE\n+   DUP instructions.\"\n+ (match_test \"aarch64_sve_dup_immediate_p (op)\"))\n+\n (define_constraint \"vsd\"\n   \"@internal\n    A constraint that matches an unsigned immediate operand valid for SVE"}, {"sha": "b7230ca32c61b7e875ba9f9ddc88ae108c19ad06", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -629,7 +629,8 @@\n \n (define_predicate \"aarch64_sve_dup_immediate\"\n   (and (match_code \"const,const_vector\")\n-       (match_test \"aarch64_sve_dup_immediate_p (op)\")))\n+       (ior (match_test \"aarch64_sve_dup_immediate_p (op)\")\n+\t    (match_test \"aarch64_float_const_representable_p (op)\"))))\n \n (define_predicate \"aarch64_sve_cmp_vsc_immediate\"\n   (and (match_code \"const,const_vector\")\n@@ -689,6 +690,10 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_sve_vsm_immediate\")))\n \n+(define_predicate \"aarch64_sve_reg_or_dup_imm\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"aarch64_sve_dup_immediate\")))\n+\n (define_predicate \"aarch64_sve_cmp_vsc_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_sve_cmp_vsc_immediate\")))"}, {"sha": "a2507f729c00de8a074a406a91c8a76f2ac3af46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -1,3 +1,13 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/vcond_18.c: New test.\n+\t* gcc.target/aarch64/sve/vcond_18_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_19.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_19_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_20.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_20_run.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/fmaxnm_1.c: New test."}, {"sha": "a2590b9ee2b173259bfa14bb0bda6d6175b06d40", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_18.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_18.c?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define DEF_LOOP(TYPE, NAME, CONST)\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *restrict x,\t\t\\\n+\t\t\tTYPE *restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] > 0 ? CONST : 0;\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE)\t\t\t\\\n+  T (TYPE, 2, 2.0)\t\t\t\t\\\n+  T (TYPE, 1p25, 1.25)\t\t\t\t\\\n+  T (TYPE, 32p25, 32.25)\t\t\t\\\n+  T (TYPE, m4, -4.0)\t\t\t\t\\\n+  T (TYPE, m2p5, -2.5)\t\t\t\t\\\n+  T (TYPE, m64p5, -64.5)\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  TEST_TYPE (T, _Float16)\t\t\t\\\n+  TEST_TYPE (T, float)\t\t\t\t\\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/z, #16384\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/z, #15616\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/z, #-15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/z, #-16128\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.s), (p[0-7])/z, \\1\\n\\tfmov\\t\\1, \\2/m, #2\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.s), (p[0-7])/z, \\1\\n\\tfmov\\t\\1, \\2/m, #1\\.25(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.s), (p[0-7])/z, \\1\\n\\tfmov\\t\\1, \\2/m, #-4\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.s), (p[0-7])/z, \\1\\n\\tfmov\\t\\1, \\2/m, #-2\\.5(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s, p[0-7], z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.d), (p[0-7])/z, \\1\\n\\tfmov\\t\\1, \\2/m, #2\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.d), (p[0-7])/z, \\1\\n\\tfmov\\t\\1, \\2/m, #1\\.25(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.d), (p[0-7])/z, \\1\\n\\tfmov\\t\\1, \\2/m, #-4\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.d), (p[0-7])/z, \\1\\n\\tfmov\\t\\1, \\2/m, #-2\\.5(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.d, p[0-7], z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */"}, {"sha": "279b0a3ba526513ec344ae30916e6a64b7839ad8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_18_run.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_18_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_18_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_18_run.c?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"vcond_18.c\"\n+\n+#define N 97\n+\n+#define TEST_LOOP(TYPE, NAME, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], pred[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 5 <= i % 6;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (x[i] != (TYPE) (pred[i] > 0 ? CONST : 0))\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (int argc, char **argv)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "2347b7f285314173862b43a56d55a7c591fdd011", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_19.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_19.c?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define DEF_LOOP(TYPE, NAME, CONST)\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *restrict x,\t\t\\\n+\t\t\tTYPE *restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] > 0 ? CONST : pred[i];\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE)\t\t\t\\\n+  T (TYPE, 2, 2.0)\t\t\t\t\\\n+  T (TYPE, 1p25, 1.25)\t\t\t\t\\\n+  T (TYPE, 32p25, 32.25)\t\t\t\\\n+  T (TYPE, m4, -4.0)\t\t\t\t\\\n+  T (TYPE, m2p5, -2.5)\t\t\t\t\\\n+  T (TYPE, m64p5, -64.5)\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  TEST_TYPE (T, _Float16)\t\t\t\\\n+  TEST_TYPE (T, float)\t\t\t\t\\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/m, #16384\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/m, #15616\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/m, #-15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/m, #-16128\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.s), p[0-7]/m, #2\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.s), p[0-7]/m, #1\\.25(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.s), p[0-7]/m, #-4\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.s), p[0-7]/m, #-2\\.5(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s, p[0-7], z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.d), p[0-7]/m, #2\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.d), p[0-7]/m, #1\\.25(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.d), p[0-7]/m, #-4\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.d), p[0-7]/m, #-2\\.5(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.d, p[0-7], z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */"}, {"sha": "d93d8aa45097ccdc44a3ef70580f0e43f58c4073", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_19_run.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_19_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_19_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_19_run.c?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"vcond_19.c\"\n+\n+#define N 97\n+\n+#define TEST_LOOP(TYPE, NAME, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], pred[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 5 <= i % 6 ? i : 0;\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (x[i] != (TYPE) (pred[i] > 0 ? CONST : pred[i]))\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (int argc, char **argv)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "bf2af1c62f8ed3856b3d110af3a3b3290fe37e30", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_20.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_20.c?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define DEF_LOOP(TYPE, NAME, CONST)\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *restrict x,\t\t\\\n+\t\t\tTYPE *restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = pred[i] > 0 ? CONST : 12.0;\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE)\t\t\t\\\n+  T (TYPE, 2, 2.0)\t\t\t\t\\\n+  T (TYPE, 1p25, 1.25)\t\t\t\t\\\n+  T (TYPE, 32p25, 32.25)\t\t\t\\\n+  T (TYPE, m4, -4.0)\t\t\t\t\\\n+  T (TYPE, m2p5, -2.5)\t\t\t\t\\\n+  T (TYPE, m64p5, -64.5)\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  TEST_TYPE (T, _Float16)\t\t\t\\\n+  TEST_TYPE (T, float)\t\t\t\t\\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/m, #16384\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/m, #15616\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/m, #-15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, p[0-7]/m, #-16128\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.s), p[0-7]/m, #2\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.s), p[0-7]/m, #1\\.25(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.s), p[0-7]/m, #-4\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.s), p[0-7]/m, #-2\\.5(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s, p[0-7], z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.d), p[0-7]/m, #2\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.d), p[0-7]/m, #1\\.25(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.d), p[0-7]/m, #-4\\.0(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler {\\tfmov\\t(z[0-9]+\\.d), p[0-7]/m, #-2\\.5(?:e[+]0)?\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.d, p[0-7], z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 12 } } */"}, {"sha": "33c81deaa6dada350aa7b99cb38f7ad55b246a17", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_20_run.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_20_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_20_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_20_run.c?ref=d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"vcond_20.c\"\n+\n+#define N 97\n+\n+#define TEST_LOOP(TYPE, NAME, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE x[N], pred[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tpred[i] = i % 5 <= i % 6;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (x, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (x[i] != (TYPE) (pred[i] > 0 ? CONST : 12.0))\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (int argc, char **argv)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}