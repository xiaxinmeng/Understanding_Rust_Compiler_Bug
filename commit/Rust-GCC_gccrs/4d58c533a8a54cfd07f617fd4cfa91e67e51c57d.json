{"sha": "4d58c533a8a54cfd07f617fd4cfa91e67e51c57d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ1OGM1MzNhOGE1NGNmZDA3ZjYxN2ZkNGNmYTkxZTY3ZTUxYzU3ZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2016-09-27T16:46:21Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-09-27T16:46:21Z"}, "message": "internal-fn.h (IFN_UNIQUE_CODES, [...]): New.\n\n\t* internal-fn.h (IFN_UNIQUE_CODES, IFN_GOACC_LOOP_CODES,\n\tIFN_GOACC_REDUCTION_CODES): New.\n\t(enum ifn_unique_kind, enum ifn_goacc_loop_kind, enum\n\tifn_goacc_reduction_kind): Use them.\n\t* gimple-pretty-print.c (dump_gimple_call_args): Decode first arg\n\tof internal functions, when applicable.\n\nFrom-SVN: r240552", "tree": {"sha": "84caeb9c679772ac95d97b5cecf4031d435f5bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84caeb9c679772ac95d97b5cecf4031d435f5bed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d58c533a8a54cfd07f617fd4cfa91e67e51c57d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d58c533a8a54cfd07f617fd4cfa91e67e51c57d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d58c533a8a54cfd07f617fd4cfa91e67e51c57d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d58c533a8a54cfd07f617fd4cfa91e67e51c57d/comments", "author": null, "committer": null, "parents": [{"sha": "20fba714a24284d708324e293da17355cbfb9fe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fba714a24284d708324e293da17355cbfb9fe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fba714a24284d708324e293da17355cbfb9fe9"}], "stats": {"total": 125, "additions": 96, "deletions": 29}, "files": [{"sha": "39e18fdf0ec0a210a6edefe7abca014134cc04d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d58c533a8a54cfd07f617fd4cfa91e67e51c57d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d58c533a8a54cfd07f617fd4cfa91e67e51c57d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d58c533a8a54cfd07f617fd4cfa91e67e51c57d", "patch": "@@ -1,3 +1,12 @@\n+2016-09-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* internal-fn.h (IFN_UNIQUE_CODES, IFN_GOACC_LOOP_CODES,\n+\tIFN_GOACC_REDUCTION_CODES): New.\n+\t(enum ifn_unique_kind, enum ifn_goacc_loop_kind, enum\n+\tifn_goacc_reduction_kind): Use them.\n+\t* gimple-pretty-print.c (dump_gimple_call_args): Decode first arg\n+\tof internal functions, when applicable.\n+\n 2016-09-27  Maciej W. Rozycki  <macro@imgtec.com>\n \n \t* config/mips/constraints.md (d): Fix documentation."}, {"sha": "10cb168af74c528e18d51760ba2306889b43a7a3", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d58c533a8a54cfd07f617fd4cfa91e67e51c57d/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d58c533a8a54cfd07f617fd4cfa91e67e51c57d/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=4d58c533a8a54cfd07f617fd4cfa91e67e51c57d", "patch": "@@ -599,9 +599,63 @@ dump_gimple_return (pretty_printer *buffer, greturn *gs, int spc, int flags)\n static void\n dump_gimple_call_args (pretty_printer *buffer, gcall *gs, int flags)\n {\n-  size_t i;\n+  size_t i = 0;\n+\n+  /* Pretty print first arg to certain internal fns.  */\n+  if (gimple_call_internal_p (gs))\n+    {\n+      const char *const *enums = NULL;\n+      unsigned limit = 0;\n+\n+      switch (gimple_call_internal_fn (gs))\n+\t{\n+\tcase IFN_UNIQUE:\n+#define DEF(X) #X\n+\t  static const char *const unique_args[] = {IFN_UNIQUE_CODES};\n+#undef DEF\n+\t  enums = unique_args;\n+\t  \n+\t  limit = ARRAY_SIZE (unique_args);\n+\t  break;\n+\t  \n+\tcase IFN_GOACC_LOOP:\n+#define DEF(X) #X\n+\t  static const char *const loop_args[] = {IFN_GOACC_LOOP_CODES};\n+#undef DEF\n+\t  enums = loop_args;\n+\t  limit = ARRAY_SIZE (loop_args);\n+\t  break;\n+\n+\tcase IFN_GOACC_REDUCTION:\n+#define DEF(X) #X\n+\t  static const char *const reduction_args[]\n+\t    = {IFN_GOACC_REDUCTION_CODES};\n+#undef DEF\n+\t  enums = reduction_args;\n+\t  limit = ARRAY_SIZE (reduction_args);\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+      if (limit)\n+\t{\n+\t  tree arg0 = gimple_call_arg (gs, 0);\n+\t  HOST_WIDE_INT v;\n+\n+\t  if (TREE_CODE (arg0) == INTEGER_CST\n+\t      && tree_fits_shwi_p (arg0)\n+\t      && (v = tree_to_shwi (arg0)) >= 0 && v < limit)\n+\t    {\n+\t      i++;\n+\t      pp_string (buffer, enums[v]);\n+\t      if (i < gimple_call_num_args (gs))\n+\t\tpp_string (buffer, \", \");\n+\t    }\n+\t}\n+    }\n \n-  for (i = 0; i < gimple_call_num_args (gs); i++)\n+  for (; i < gimple_call_num_args (gs); i++)\n     {\n       dump_generic_node (buffer, gimple_call_arg (gs, i), 0, flags, false);\n       if (i < gimple_call_num_args (gs) - 1)"}, {"sha": "4e5dbaa79d4aaf510fda7cd35a2be6c70e5e1b25", "filename": "gcc/internal-fn.h", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d58c533a8a54cfd07f617fd4cfa91e67e51c57d/gcc%2Finternal-fn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d58c533a8a54cfd07f617fd4cfa91e67e51c57d/gcc%2Finternal-fn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.h?ref=4d58c533a8a54cfd07f617fd4cfa91e67e51c57d", "patch": "@@ -20,26 +20,28 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_INTERNAL_FN_H\n #define GCC_INTERNAL_FN_H\n \n-/* INTEGER_CST values for IFN_UNIQUE function arg-0.  */\n+/* INTEGER_CST values for IFN_UNIQUE function arg-0.\n+\n+   UNSPEC: Undifferentiated UNIQUE.\n+\n+   FORK and JOIN mark the points at which OpenACC partitioned\n+   execution is entered or exited.\n+      DEP_VAR = UNIQUE ({FORK,JOIN}, DEP_VAR, AXIS)\n+\n+   HEAD_MARK and TAIL_MARK are used to demark the sequence entering\n+   or leaving partitioned execution.\n+      DEP_VAR = UNIQUE ({HEAD,TAIL}_MARK, REMAINING_MARKS, ...PRIMARY_FLAGS)\n+\n+   The PRIMARY_FLAGS only occur on the first HEAD_MARK of a sequence.  */\n+#define IFN_UNIQUE_CODES\t\t\t\t  \\\n+  DEF(UNSPEC),\t\\\n+    DEF(OACC_FORK), DEF(OACC_JOIN),\t\t\\\n+    DEF(OACC_HEAD_MARK), DEF(OACC_TAIL_MARK)\n+\n enum ifn_unique_kind {\n-  IFN_UNIQUE_UNSPEC,  /* Undifferentiated UNIQUE.  */\n-\n-  /* FORK and JOIN mark the points at which OpenACC partitioned\n-     execution is entered or exited.\n-     return: data dependency value\n-     arg-1: data dependency var\n-     arg-2: INTEGER_CST argument, indicating the axis.  */\n-  IFN_UNIQUE_OACC_FORK,\n-  IFN_UNIQUE_OACC_JOIN,\n-\n-  /* HEAD_MARK and TAIL_MARK are used to demark the sequence entering\n-     or leaving partitioned execution.\n-     return: data dependency value\n-     arg-1: data dependency var\n-     arg-2: INTEGER_CST argument, remaining markers in this sequence\n-     arg-3...: varargs on primary header  */\n-  IFN_UNIQUE_OACC_HEAD_MARK,\n-  IFN_UNIQUE_OACC_TAIL_MARK\n+#define DEF(X) IFN_UNIQUE_##X\n+  IFN_UNIQUE_CODES\n+#undef DEF\n };\n \n /* INTEGER_CST values for IFN_GOACC_LOOP arg-0.  Allows the precise\n@@ -59,11 +61,12 @@ enum ifn_unique_kind {\n      CHUNK_NO - chunk number\n      MASK - partitioning mask.  */\n \n+#define IFN_GOACC_LOOP_CODES \\\n+  DEF(CHUNKS), DEF(STEP), DEF(OFFSET), DEF(BOUND)\n enum ifn_goacc_loop_kind {\n-  IFN_GOACC_LOOP_CHUNKS,  /* Number of chunks.  */\n-  IFN_GOACC_LOOP_STEP,    /* Size of each thread's step.  */\n-  IFN_GOACC_LOOP_OFFSET,  /* Initial iteration value.  */\n-  IFN_GOACC_LOOP_BOUND    /* Limit of iteration value.  */\n+#define DEF(X) IFN_GOACC_LOOP_##X\n+  IFN_GOACC_LOOP_CODES\n+#undef DEF\n };\n \n /* The GOACC_REDUCTION function defines a generic interface to support\n@@ -81,11 +84,12 @@ enum ifn_goacc_loop_kind {\n    In general the return value is LOCAL_VAR, which creates a data\n    dependency between calls operating on the same reduction.  */\n \n+#define IFN_GOACC_REDUCTION_CODES \\\n+  DEF(SETUP), DEF(INIT), DEF(FINI), DEF(TEARDOWN)\n enum ifn_goacc_reduction_kind {\n-  IFN_GOACC_REDUCTION_SETUP,\n-  IFN_GOACC_REDUCTION_INIT,\n-  IFN_GOACC_REDUCTION_FINI,\n-  IFN_GOACC_REDUCTION_TEARDOWN\n+#define DEF(X) IFN_GOACC_REDUCTION_##X\n+  IFN_GOACC_REDUCTION_CODES\n+#undef DEF\n };\n \n /* Initialize internal function tables.  */"}]}