{"sha": "d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmMDY5YWI0ZjY0NTA4NWI3ZDQzOWUxNjZiNzUwMWI5ZmI2Y2U4YQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2014-04-22T12:30:59Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2014-04-22T12:30:59Z"}, "message": "Remove obsolete Solaris 9 support\n\n\tlibstdc++-v3:\n\t* configure.host: Remove solaris2.9 handling.\n\tChange os_include_dir to os/solaris/solaris2.10.\n\t* acinclude.m4 (ac_has_gthreads): Remove solaris2.9* handling.\n\t* crossconfig.m4: Remove *-solaris2.9 handling, simplify.\n\t* configure: Regenerate.\n\t* config/abi/post/solaris2.9: Remove.\n\t* config/os/solaris/solaris2.9: Rename to ...\n\t* config/os/solaris/solaris2.10: ... this.\n\t* config/os/solaris/solaris2.10/os_defines.h (CLOCK_MONOTONIC):\n\tRemove.\n\n\t* doc/xml/manual/configure.xml (--enable-libstdcxx-threads):\n\tRemove Solaris 9 reference.\n\t* doc/html/manual/configure.html: Regenerate.\n\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc:\n\tRemove *-*-solaris2.9 xfail.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/12.cc:\n\tLikewise.\n\n\t* testsuite/ext/enc_filebuf/char/13598.cc: Remove *-*-solaris2.9\n\txfail.\n\n\tlibjava:\n\t* configure.ac (THREADLIBS, THREADSPEC): Remove *-*-solaris2.9\n\thandling.\n\t* configure: Regenerate.\n\n\tlibgfortran:\n\t* config/fpu-387.h [__sun__ && __svr4__]: Remove SSE execution\n\tcheck.\n\n\tlibgcc:\n\t* config/i386/crtfastmath.c (set_fast_math): Remove SSE execution\n\tcheck.\n\t* config/i386/sol2-unwind.h (x86_fallback_frame_state): Remove\n\tSolaris 9 single-threaded support.\n\t* config/sparc/sol2-unwind.h (sparc64_is_sighandler): Remove\n\tSolaris 9 single-threaded support.  Add call_user_handler code\n\tsequences.\n\t(sparc_is_sighandler): Likewise.\n\n\tlibcpp:\n\t* lex.c: Remove Solaris 9 reference.\n\n\tgcc/testsuite:\n\t* gcc.c-torture/compile/pr28865.c: Remove dg-xfail-if.\n\n\t* gcc.dg/c99-stdint-6.c: Remove dg-options for *-*-solaris2.9.\n\t* gcc.dg/lto/20090210_0.c: Remove dg-extra-ld-options for\n\t*-*-solaris2.9.\n\t* gcc.dg/torture/pr47917.c: Remove dg-options for *-*-solaris2.9.\n\t* gcc.target/i386/pr22076.c: Remove i?86-*-solaris2.9 handling\n\tfrom dg-options.\n\t* gcc.target/i386/pr22152.c: Remove i?86-*-solaris2.9 handling\n\tfrom dg-additional-options.\n\t* gcc.target/i386/vect8-ret.c: Remove i?86-*-solaris2.9 handling\n\tfrom dg-options.\n\n\t* gcc.dg/vect/tree-vect.h (check_vect): Remove Solaris 9 SSE2\n\texecution check.\n\t* gcc.target/i386/sse-os-support.h [__sun__ && __svr4__]\n\t(sigill_hdlr): Remove.\n\t(sse_os_support) [__sun__ && __svr4__]: Remove SSE execution\n\tcheck.\n\n\t* gfortran.dg/erf_3.F90: Remove sparc*-*-solaris2.9* handling.\n\t* gfortran.dg/fmt_en.f90: Remove i?86-*-solaris2.9* handling.\n\t* gfortran.dg/round_4.f90: Remove *-*-solaris2.9* handling.\n\n\t* lib/target-supports.exp (add_options_for_tls): Remove\n\t*-*-solaris2.9* handling.\n\n\tgcc:\n\t* config.gcc (enable_obsolete): Remove *-*-solaris2.9*.\n\t(*-*-solaris2.[0-9] | *-*-solaris2.[0-9].*): Mark unsupported.\n\t(*-*-solaris2*): Simplify.\n\t(i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*): Likewise.\n\t(i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*): Remove\n\t*-*-solaris2.9* handling.\n\n\t* configure.ac (gcc_cv_as_hidden): Remove test for Solaris 9/x86\n\tas bug.\n\t(gcc_cv_ld_hidden): Remove *-*-solaris2.9* handling.\n\t(ld_tls_support): Remove i?86-*-solaris2.9, sparc*-*-solaris2.9\n\thandling, simplify.\n\t(gcc_cv_as_gstabs_flag): Remove workaround for Solaris 9/x86 as bug.\n\t* configure: Regenerate.\n\n\t* config/i386/sol2-9.h: Remove.\n\n\t* doc/install.texi (Specific, i?86-*-solaris2.9): Remove.\n\t(Specific, *-*-solaris2*): Mention Solaris 9 support removal.\n\tRemove Solaris 9 references.\n\n\tfixincludes:\n\t* inclhack.def (math_exception): Bypass on *-*-solaris2.1[0-9]*.\n\t(solaris_int_types): Remove.\n\t(solaris_longjmp_noreturn): Remove.\n\t(solaris_mutex_init_2): Remove.\n\t(solaris_once_init_2): Remove.\n\t(solaris_sys_va_list): Remove.\n\t* fixincl.x: Regenerate.\n\t* tests/base/iso/setjmp_iso.h: Remove.\n\t* tests/base/pthread.h [SOLARIS_MUTEX_INIT_2_CHECK]: Remove.\n\t[SOLARIS_ONCE_INIT_1_CHECK]: Remove wrapping done by\n\tsolaris_once_init_2.\n\t[SOLARIS_ONCE_INIT_2_CHECK]: Remove.\n\t* tests/base/sys/int_types.h: Remove.\n\t* tests/base/sys/va_list.h: Remove.\n\n\tcontrib:\n\t* config-list.mk (LIST): Remove sparc-sun-solaris2.9, i686-solaris2.9.\n\nFrom-SVN: r209621", "tree": {"sha": "dc262938d0bcc70f7ed2959c307bd2e93a046b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc262938d0bcc70f7ed2959c307bd2e93a046b3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d35c5c2708d881e731a276b93caecc068f5678d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d35c5c2708d881e731a276b93caecc068f5678d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d35c5c2708d881e731a276b93caecc068f5678d"}], "stats": {"total": 8704, "additions": 270, "deletions": 8434}, "files": [{"sha": "4d98be736e56f56943f24f1304b506ba7cfbd26d", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,3 +1,7 @@\n+2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config-list.mk (LIST): Remove sparc-sun-solaris2.9, i686-solaris2.9.\n+\n 2013-04-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gennews (files): Add files for GCC 4.9."}, {"sha": "ddf24a286efcfcdd1335fa301fc70b4382915ab5", "filename": "contrib/config-list.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/contrib%2Fconfig-list.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/contrib%2Fconfig-list.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fconfig-list.mk?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -75,7 +75,6 @@ LIST = aarch64-elf aarch64-linux-gnu \\\n   x86_64-knetbsd-gnu x86_64-w64-mingw32 \\\n   x86_64-mingw32OPT-enable-sjlj-exceptions=yes xstormy16-elf xtensa-elf \\\n   xtensa-linux \\\n-  sparc-sun-solaris2.9OPT-enable-obsolete i686-solaris2.9OPT-enable-obsolete \\\n   i686-interix3OPT-enable-obsolete score-elfOPT-enable-obsolete\n \n LOGFILES = $(patsubst %,log/%-make.out,$(LIST))"}, {"sha": "f7effee78934f93007d826b08a2c4e512594b749", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,3 +1,20 @@\n+2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* inclhack.def (math_exception): Bypass on *-*-solaris2.1[0-9]*.\n+\t(solaris_int_types): Remove.\n+\t(solaris_longjmp_noreturn): Remove.\n+\t(solaris_mutex_init_2): Remove.\n+\t(solaris_once_init_2): Remove.\n+\t(solaris_sys_va_list): Remove.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/iso/setjmp_iso.h: Remove.\n+\t* tests/base/pthread.h [SOLARIS_MUTEX_INIT_2_CHECK]: Remove.\n+\t[SOLARIS_ONCE_INIT_1_CHECK]: Remove wrapping done by\n+\tsolaris_once_init_2.\n+\t[SOLARIS_ONCE_INIT_2_CHECK]: Remove.\n+\t* tests/base/sys/int_types.h: Remove.\n+\t* tests/base/sys/va_list.h: Remove.\n+\n 2013-12-20  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \tMakefile.in: Use $(FI) instead of fixincl@EXEEXT@."}, {"sha": "dd458023531742a1835ae9280b7bdf28e313e656", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 11, "deletions": 257, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,12 +1,12 @@\n /*  -*- buffer-read-only: t -*- vi: set ro:\n- *\n+ * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n- *\n- * It has been AutoGen-ed  December  8, 2013 at 12:24:14 PM by AutoGen 5.18.2\n+ * \n+ * It has been AutoGen-ed  Tuesday January  7, 2014 at 12:02:54 PM MET\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Dec  8 12:24:14 PST 2013\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Tue Jan  7 12:02:54 MET 2014\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 229 fixup descriptions.\n+ * This file contains 224 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -5264,7 +5264,9 @@ tSCC zMath_ExceptionList[] =\n /*\n  *  Machine/OS name selection pattern\n  */\n-#define apzMath_ExceptionMachs (const char**)NULL\n+tSCC* apzMath_ExceptionMachs[] = {\n+        \"*-*-solaris2.1[0-9]*\",\n+        (const char*)NULL };\n \n /*\n  *  content selection pattern - do fix if pattern found\n@@ -6587,92 +6589,6 @@ static const char* apzSolaris_Int_Limits_3Patch[] = {\n     \"#define\\tSIZE_MAX\\t4294967295U\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Solaris_Int_Types fix\n- */\n-tSCC zSolaris_Int_TypesName[] =\n-     \"solaris_int_types\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zSolaris_Int_TypesList[] =\n-  \"sys/int_types.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-#define apzSolaris_Int_TypesMachs (const char**)NULL\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zSolaris_Int_TypesSelect0[] =\n-       \"__STDC__ - 0 == 0\";\n-\n-/*\n- *  content bypass pattern - skip fix if pattern found\n- */\n-tSCC zSolaris_Int_TypesBypass0[] =\n-       \"_LONGLONG_TYPE\";\n-\n-#define    SOLARIS_INT_TYPES_TEST_CT  2\n-static tTestDesc aSolaris_Int_TypesTests[] = {\n-  { TT_NEGREP,   zSolaris_Int_TypesBypass0, (regex_t*)NULL },\n-  { TT_EGREP,    zSolaris_Int_TypesSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Solaris_Int_Types\n- */\n-static const char* apzSolaris_Int_TypesPatch[] = {\n-    \"format\",\n-    \"(defined(_STDC_C99) || !defined(_STRICT_STDC) || defined(__GNUC__))\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Solaris_Longjmp_Noreturn fix\n- */\n-tSCC zSolaris_Longjmp_NoreturnName[] =\n-     \"solaris_longjmp_noreturn\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zSolaris_Longjmp_NoreturnList[] =\n-  \"iso/setjmp_iso.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzSolaris_Longjmp_NoreturnMachs[] = {\n-        \"*-*-solaris2*\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zSolaris_Longjmp_NoreturnSelect0[] =\n-       \"(.*longjmp\\\\(jmp_buf.*[^)]+\\\\));\";\n-\n-/*\n- *  content bypass pattern - skip fix if pattern found\n- */\n-tSCC zSolaris_Longjmp_NoreturnBypass0[] =\n-       \"__NORETURN\";\n-\n-#define    SOLARIS_LONGJMP_NORETURN_TEST_CT  2\n-static tTestDesc aSolaris_Longjmp_NoreturnTests[] = {\n-  { TT_NEGREP,   zSolaris_Longjmp_NoreturnBypass0, (regex_t*)NULL },\n-  { TT_EGREP,    zSolaris_Longjmp_NoreturnSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Solaris_Longjmp_Noreturn\n- */\n-static const char* apzSolaris_Longjmp_NoreturnPatch[] = {\n-    \"format\",\n-    \"%1 __attribute__ ((__noreturn__));\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Math_1 fix\n@@ -6975,50 +6891,6 @@ static const char* apzSolaris_Math_9Patch[] = {\n     \"^#define[ \\t]+([a-z]+)\\\\(x, y\\\\)([ \\t]+)\\\\(\\\\(x\\\\) __builtin_[a-z]+\\\\(y\\\\)\\\\)\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Solaris_Mutex_Init_2 fix\n- */\n-tSCC zSolaris_Mutex_Init_2Name[] =\n-     \"solaris_mutex_init_2\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zSolaris_Mutex_Init_2List[] =\n-  \"pthread.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzSolaris_Mutex_Init_2Machs[] = {\n-        \"*-*-solaris2.[0-9]\",\n-        \"*-*-solaris2.[0-9][!0-9]*\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zSolaris_Mutex_Init_2Select0[] =\n-       \"@\\\\(#\\\\)pthread.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-\n-#define    SOLARIS_MUTEX_INIT_2_TEST_CT  1\n-static tTestDesc aSolaris_Mutex_Init_2Tests[] = {\n-  { TT_EGREP,    zSolaris_Mutex_Init_2Select0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Solaris_Mutex_Init_2\n- */\n-static const char* apzSolaris_Mutex_Init_2Patch[] = {\n-    \"format\",\n-    \"#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\\n\\\n-%0\\n\\\n-#else\\n\\\n-%1, {0}}%4\\n\\\n-#endif\",\n-    \"(^#define[ \\t]+PTHREAD_(MUTEX|COND)_INITIALIZER[ \\t]+(|/*.**/[ \\t]*\\\\\\\\\\n\\\n-[ \\t]*)\\\\{.*),[ \\t]*0\\\\}(|[ \\t].*)$\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Once_Init_1 fix\n@@ -7057,49 +6929,6 @@ static const char* apzSolaris_Once_Init_1Patch[] = {\n     \"(^#define[ \\t]+PTHREAD_ONCE_INIT[ \\t]+\\\\{)([^}]+)(\\\\})[ \\t]*$\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Solaris_Once_Init_2 fix\n- */\n-tSCC zSolaris_Once_Init_2Name[] =\n-     \"solaris_once_init_2\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zSolaris_Once_Init_2List[] =\n-  \"pthread.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzSolaris_Once_Init_2Machs[] = {\n-        \"*-*-solaris2.[0-9]\",\n-        \"*-*-solaris2.[0-9][!0-9]*\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zSolaris_Once_Init_2Select0[] =\n-       \"@\\\\(#\\\\)pthread.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-\n-#define    SOLARIS_ONCE_INIT_2_TEST_CT  1\n-static tTestDesc aSolaris_Once_Init_2Tests[] = {\n-  { TT_EGREP,    zSolaris_Once_Init_2Select0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Solaris_Once_Init_2\n- */\n-static const char* apzSolaris_Once_Init_2Patch[] = {\n-    \"format\",\n-    \"#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\\n\\\n-%0\\n\\\n-#else\\n\\\n-%1{0}, {0}, {0}, {%3}%4\\n\\\n-#endif\",\n-    \"(^#define[ \\t]+PTHREAD_ONCE_INIT[ \\t]+\\\\{\\\\{)(0, 0, 0, )(PTHREAD_[A-Z_]+)(\\\\}\\\\})[ \\t]*$\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Posix_Spawn_Restrict fix\n@@ -7309,51 +7138,6 @@ static const char* apzSolaris_Stdio_TagPatch[] = { sed_cmd_z,\n     \"-e\", \"s/defined(__cplusplus) && (__cplusplus < 54321L)/0/\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Solaris_Sys_Va_List fix\n- */\n-tSCC zSolaris_Sys_Va_ListName[] =\n-     \"solaris_sys_va_list\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zSolaris_Sys_Va_ListList[] =\n-  \"sys/va_list.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzSolaris_Sys_Va_ListMachs[] = {\n-        \"*-*-solaris2.9\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zSolaris_Sys_Va_ListSelect0[] =\n-       \"#if.*__STDC__.*\\n\\\n-typedef void \\\\*__va_list;\\n\\\n-#else\\n\\\n-typedef char \\\\*__va_list;\\n\\\n-#endif\";\n-\n-#define    SOLARIS_SYS_VA_LIST_TEST_CT  1\n-static tTestDesc aSolaris_Sys_Va_ListTests[] = {\n-  { TT_EGREP,    zSolaris_Sys_Va_ListSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Solaris_Sys_Va_List\n- */\n-static const char* apzSolaris_Sys_Va_ListPatch[] = {\n-    \"format\",\n-    \"#ifdef __GNUC__\\n\\\n-typedef __builtin_va_list __va_list;\\n\\\n-#else\\n\\\n-%0\\n\\\n-#endif\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Statsswtch fix\n@@ -9403,9 +9187,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          268\n+#define REGEX_COUNT          261\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            229\n+#define FIX_COUNT            224\n \n /*\n  *  Enumerate the fixes\n@@ -9570,24 +9354,19 @@ typedef enum {\n     SOLARIS_INT_LIMITS_1_FIXIDX,\n     SOLARIS_INT_LIMITS_2_FIXIDX,\n     SOLARIS_INT_LIMITS_3_FIXIDX,\n-    SOLARIS_INT_TYPES_FIXIDX,\n-    SOLARIS_LONGJMP_NORETURN_FIXIDX,\n     SOLARIS_MATH_1_FIXIDX,\n     SOLARIS_MATH_10_FIXIDX,\n     SOLARIS_MATH_2_FIXIDX,\n     SOLARIS_MATH_3_FIXIDX,\n     SOLARIS_MATH_4_FIXIDX,\n     SOLARIS_MATH_8_FIXIDX,\n     SOLARIS_MATH_9_FIXIDX,\n-    SOLARIS_MUTEX_INIT_2_FIXIDX,\n     SOLARIS_ONCE_INIT_1_FIXIDX,\n-    SOLARIS_ONCE_INIT_2_FIXIDX,\n     SOLARIS_POSIX_SPAWN_RESTRICT_FIXIDX,\n     SOLARIS_POW_INT_OVERLOAD_FIXIDX,\n     SOLARIS_RWLOCK_INIT_1_FIXIDX,\n     SOLARIS_STD___FILBUF_FIXIDX,\n     SOLARIS_STDIO_TAG_FIXIDX,\n-    SOLARIS_SYS_VA_LIST_FIXIDX,\n     STATSSWTCH_FIXIDX,\n     STDIO_STDARG_H_FIXIDX,\n     STDIO_VA_LIST_FIXIDX,\n@@ -10270,7 +10049,7 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n \n   {  zMath_ExceptionName,    zMath_ExceptionList,\n      apzMath_ExceptionMachs,\n-     MATH_EXCEPTION_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     MATH_EXCEPTION_TEST_CT, FD_MACH_IFNOT | FD_SUBROUTINE,\n      aMath_ExceptionTests,   apzMath_ExceptionPatch, 0 },\n \n   {  zMath_Huge_Val_From_Dbl_MaxName,    zMath_Huge_Val_From_Dbl_MaxList,\n@@ -10438,16 +10217,6 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_INT_LIMITS_3_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Int_Limits_3Tests,   apzSolaris_Int_Limits_3Patch, 0 },\n \n-  {  zSolaris_Int_TypesName,    zSolaris_Int_TypesList,\n-     apzSolaris_Int_TypesMachs,\n-     SOLARIS_INT_TYPES_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aSolaris_Int_TypesTests,   apzSolaris_Int_TypesPatch, 0 },\n-\n-  {  zSolaris_Longjmp_NoreturnName,    zSolaris_Longjmp_NoreturnList,\n-     apzSolaris_Longjmp_NoreturnMachs,\n-     SOLARIS_LONGJMP_NORETURN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aSolaris_Longjmp_NoreturnTests,   apzSolaris_Longjmp_NoreturnPatch, 0 },\n-\n   {  zSolaris_Math_1Name,    zSolaris_Math_1List,\n      apzSolaris_Math_1Machs,\n      SOLARIS_MATH_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n@@ -10483,21 +10252,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_MATH_9_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Math_9Tests,   apzSolaris_Math_9Patch, 0 },\n \n-  {  zSolaris_Mutex_Init_2Name,    zSolaris_Mutex_Init_2List,\n-     apzSolaris_Mutex_Init_2Machs,\n-     SOLARIS_MUTEX_INIT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aSolaris_Mutex_Init_2Tests,   apzSolaris_Mutex_Init_2Patch, 0 },\n-\n   {  zSolaris_Once_Init_1Name,    zSolaris_Once_Init_1List,\n      apzSolaris_Once_Init_1Machs,\n      SOLARIS_ONCE_INIT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Once_Init_1Tests,   apzSolaris_Once_Init_1Patch, 0 },\n \n-  {  zSolaris_Once_Init_2Name,    zSolaris_Once_Init_2List,\n-     apzSolaris_Once_Init_2Machs,\n-     SOLARIS_ONCE_INIT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aSolaris_Once_Init_2Tests,   apzSolaris_Once_Init_2Patch, 0 },\n-\n   {  zSolaris_Posix_Spawn_RestrictName,    zSolaris_Posix_Spawn_RestrictList,\n      apzSolaris_Posix_Spawn_RestrictMachs,\n      SOLARIS_POSIX_SPAWN_RESTRICT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n@@ -10523,11 +10282,6 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_STDIO_TAG_TEST_CT, FD_MACH_ONLY,\n      aSolaris_Stdio_TagTests,   apzSolaris_Stdio_TagPatch, 0 },\n \n-  {  zSolaris_Sys_Va_ListName,    zSolaris_Sys_Va_ListList,\n-     apzSolaris_Sys_Va_ListMachs,\n-     SOLARIS_SYS_VA_LIST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aSolaris_Sys_Va_ListTests,   apzSolaris_Sys_Va_ListPatch, 0 },\n-\n   {  zStatsswtchName,    zStatsswtchList,\n      apzStatsswtchMachs,\n      STATSSWTCH_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "6a1136ce557e66d29d8a3f9b1cbb2e526d98975b", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 3, "deletions": 133, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -2767,6 +2767,9 @@ fix = {\n      */\n     bypass    = 'We have a problem when using C\\+\\+|for C\\+\\+, '\n \t\t'_[a-z0-9A-Z_]+_exception; for C, exception';\n+    /* The Solaris 10 headers already get this right.  */\n+    mach   = '*-*-solaris2.1[0-9]*';\n+    not_machine = true;\n     c_fix     = wrap;\n \n     c_fix_arg = \"#ifdef __cplusplus\\n\"\n@@ -3406,42 +3409,6 @@ fix = {\n     \"#define\tSIZE_MAX\t4294967295UL\";\n };\n \n-/*\n- * Sun Solaris up to 9 has a version of sys/int_types.h that forbids use\n- * of Standard C99 64-bit types in 32-bit mode.\n- */\n-fix = {\n-    hackname  = solaris_int_types;\n-    select    = \"__STDC__ - 0 == 0\";\n-    bypass    = \"_LONGLONG_TYPE\";\n-    files     = sys/int_types.h;\n-    c_fix     = format;\n-    c_fix_arg =\n-    \"(defined(_STDC_C99) || !defined(_STRICT_STDC) || defined(__GNUC__))\";\n-    test_text =\n-    \"#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\\n\"\n-    \"typedef\tlong long\t\tint64_t;\\n\"\n-    \"#endif\\n\\n\"\n-    \"#if defined(_LP64) || (__STDC__ - 0 == 0 && !defined(_NO_LONGLONG))\\n\"\n-    \"typedef int64_t\t\t\tintmax_t;\\n\"\n-    \"#endif\";\n-};\n-\n-/*\n- *  Before Solaris 10, <iso/setjmp_iso.h> doesn't mark longjump noreturn.\n- */\n-fix = {\n-    hackname  = solaris_longjmp_noreturn;\n-    mach      = \"*-*-solaris2*\";\n-    files     = \"iso/setjmp_iso.h\";\n-    bypass    = \"__NORETURN\";\n-    select    = \"(.*longjmp\\\\(jmp_buf.*[^)]+\\\\));\";\n-    c_fix     = format;\n-    c_fix_arg = \"%1 __attribute__ ((__noreturn__));\";\n-\n-    test_text = \"extern void longjmp(jmp_buf, int);\";\n-};\n-\n /*\n  * Sun Solaris 10 defines several C99 math macros in terms of\n  * builtins specific to the Studio compiler, in particular not\n@@ -3594,44 +3561,6 @@ fix = {\n     \"#define\tisunordered(x, y)\t((x) __builtin_isunordered(y))\";\n };\n \n-/*\n- * Sun Solaris defines PTHREAD_MUTEX_INITIALIZER with a trailing\n- * \"0\" for the last field of the pthread_mutex_t structure, which is\n- * of type upad64_t, which itself is typedef'd to int64_t, but with\n- * __STDC__ defined (e.g. by -ansi) it is a union. So change the\n- * initializer to \"{0}\" instead\n- */\n-fix = {\n-    hackname = solaris_mutex_init_2;\n-    select = '@\\(#\\)pthread.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-    files = pthread.h;\n-    /*\n-     * On Solaris 10, this fix is unnecessary because upad64_t is\n-     * always defined correctly regardless of the definition of the\n-     * __STDC__ macro.  The first \"mach\" pattern matches up to\n-     * solaris9.  The second \"mach\" pattern will not match any two (or\n-     * more) digit solaris version, but it will match e.g. 2.5.1.\n-     */\n-    mach = '*-*-solaris2.[0-9]', '*-*-solaris2.[0-9][!0-9]*';\n-    c_fix = format;\n-    c_fix_arg = \"#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\\n\"\n-                \"%0\\n\"\n-                \"#else\\n\"\n-                \"%1, {0}}%4\\n\"\n-                \"#endif\";\n-    c_fix_arg = \"(^#define[ \\t]+PTHREAD_(MUTEX|COND)_INITIALIZER[ \\t]+\"\n-                \"(|/\\*.*\\*/[ \\t]*\\\\\\\\\\n[ \\t]*)\\\\{.*)\"\n-                \",[ \\t]*0\\\\}\" \"(|[ \\t].*)$\";\n-    test_text =\n-    '#ident \"@(#)pthread.h  1.26  98/04/12 SMI\"'\"\\n\"\n-    \"#define PTHREAD_MUTEX_INITIALIZER\\t{{{0},0}, {{{0}}}, 0}\\n\"\n-    \"#define PTHREAD_COND_INITIALIZER\\t{{{0}, 0}, 0}\\t/* DEFAULTCV */\\n\"\n-    \"#define\tPTHREAD_MUTEX_INITIALIZER\t\t/* = DEFAULTMUTEX */\t\\\\\\\\\\n\"\n-    \"\t{{0, 0, 0, DEFAULT_TYPE, _MUTEX_MAGIC}, {{{0}}}, 0}\\n\"\n-    \"#define\tPTHREAD_COND_INITIALIZER\t\t/* = DEFAULTCV */\t\\\\\\\\\\n\"\n-    \"\t{{{0, 0, 0, 0}, DEFAULT_TYPE, _COND_MAGIC}, 0}\";\n-};\n-\n /*\n  * Sun Solaris defines PTHREAD_ONCE_INIT as an array containing a\n  * structure.  As such, it need two levels of brackets, but only\n@@ -3650,38 +3579,6 @@ fix = {\n     \"#define PTHREAD_ONCE_INIT\\t{0, 0, 0, PTHREAD_ONCE_NOTDONE}\";\n };\n \n-/*\n- * Sun Solaris defines PTHREAD_ONCE_INIT with a \"0\" for some\n- *  fields of the pthread_once_t structure, which are of type\n- *  upad64_t, which itself is typedef'd to int64_t, but with __STDC__\n- *  defined (e.g. by -ansi) it is a union. So change the initializer\n- *  to \"{0}\" instead.  This test relies on solaris_once_init_1.\n- */\n-fix = {\n-    hackname = solaris_once_init_2;\n-    select = '@\\(#\\)pthread.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-    files = pthread.h;\n-    /*\n-     * On Solaris 10, this fix is unnecessary because upad64_t is\n-     * always defined correctly regardless of the definition of the\n-     * __STDC__ macro.  The first \"mach\" pattern matches up to\n-     * solaris9.  The second \"mach\" pattern will not match any two (or\n-     * more) digit solaris version, but it will match e.g. 2.5.1.\n-     */\n-    mach = '*-*-solaris2.[0-9]', '*-*-solaris2.[0-9][!0-9]*';\n-    c_fix = format;\n-    c_fix_arg = \"#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\\n\"\n-                \"%0\\n\"\n-                \"#else\\n\"\n-                \"%1{0}, {0}, {0}, {%3}%4\\n\"\n-                \"#endif\";\n-    c_fix_arg = \"(^#define[ \\t]+PTHREAD_ONCE_INIT[ \\t]+\\\\{\\\\{)\"\n-                \"(0, 0, 0, )(PTHREAD_[A-Z_]+)(\\\\}\\\\})[ \\t]*$\";\n-    test_text =\n-    '#ident \"@(#)pthread.h  1.26  98/04/12 SMI\"'\"\\n\"\n-    \"#define PTHREAD_ONCE_INIT\\t{{0, 0, 0, PTHREAD_ONCE_NOTDONE}}\\n\";\n-};\n-\n /*\n  * Solaris 10+ <spawn.h> uses char *const argv[_RESTRICT_KYWD] in the\n  * posix_spawn declarations, which doesn't work with C++.\n@@ -3779,33 +3676,6 @@ fix = {\n     test_text = \"#if\\tdefined(__cplusplus) && (__cplusplus < 54321L)\";\n };\n \n-/*\n- * On Solaris 9, __va_list needs to become a typedef for\n- * __builtin_va_list to make -Wmissing-format-attribute work.\n- */\n-fix = {\n-    hackname = solaris_sys_va_list;\n-    files    = sys/va_list.h;\n-    mach     = '*-*-solaris2.9';\n-    select   = \"#if.*__STDC__.*\\n\"\n-\t       \"typedef void \\\\*__va_list;\\n\"\n-\t       \"#else\\n\"\n-\t       \"typedef char \\\\*__va_list;\\n\"\n-\t       \"#endif\";\n-\n-    c_fix    = format;\n-    c_fix_arg = \"#ifdef __GNUC__\\n\"\n-\t\t\"typedef __builtin_va_list __va_list;\\n\"\n-\t\t\"#else\\n\"\n-\t\t\"%0\\n\"\n-\t\t\"#endif\";\n-    test_text = \"#if defined(__STDC__) && !defined(__ia64)\\n\"\n-    \t\t\"typedef void *__va_list;\\n\"\n-\t        \"#else\\n\"\n-\t        \"typedef char *__va_list;\\n\"\n-\t        \"#endif\";\n-};\n-\n /*\n  *  a missing semi-colon at the end of the statsswtch structure definition.\n  */"}, {"sha": "4cf872007cf5989a89f0e40bfba984fbfe55c70b", "filename": "fixincludes/tests/base/iso/setjmp_iso.h", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d35c5c2708d881e731a276b93caecc068f5678d/fixincludes%2Ftests%2Fbase%2Fiso%2Fsetjmp_iso.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d35c5c2708d881e731a276b93caecc068f5678d/fixincludes%2Ftests%2Fbase%2Fiso%2Fsetjmp_iso.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fsetjmp_iso.h?ref=0d35c5c2708d881e731a276b93caecc068f5678d", "patch": "@@ -1,14 +0,0 @@\n-/*  DO NOT EDIT THIS FILE.\n-\n-    It has been auto-edited by fixincludes from:\n-\n-\t\"fixinc/tests/inc/iso/setjmp_iso.h\"\n-\n-    This had to be done to correct non-standard usages in the\n-    original, manufacturer supplied header file.  */\n-\n-\n-\n-#if defined( SOLARIS_LONGJMP_NORETURN_CHECK )\n-extern void longjmp(jmp_buf, int) __attribute__ ((__noreturn__));\n-#endif  /* SOLARIS_LONGJMP_NORETURN_CHECK */"}, {"sha": "5df290965a43488a373d555051faa8f8f94e937c", "filename": "fixincludes/tests/base/pthread.h", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/fixincludes%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/fixincludes%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fpthread.h?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -96,56 +96,12 @@ extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask);\n #endif  /* PTHREAD_INCOMPLETE_STRUCT_ARGUMENT_CHECK */\n \n \n-#if defined( SOLARIS_MUTEX_INIT_2_CHECK )\n-#ident \"@(#)pthread.h  1.26  98/04/12 SMI\"\n-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n-#define PTHREAD_MUTEX_INITIALIZER\t{{{0},0}, {{{0}}}, 0}\n-#else\n-#define PTHREAD_MUTEX_INITIALIZER\t{{{0},0}, {{{0}}}, {0}}\n-#endif\n-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n-#define PTHREAD_COND_INITIALIZER\t{{{0}, 0}, 0}\t/* DEFAULTCV */\n-#else\n-#define PTHREAD_COND_INITIALIZER\t{{{0}, 0}, {0}}\t/* DEFAULTCV */\n-#endif\n-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n-#define\tPTHREAD_MUTEX_INITIALIZER\t\t/* = DEFAULTMUTEX */\t\\\n-\t{{0, 0, 0, DEFAULT_TYPE, _MUTEX_MAGIC}, {{{0}}}, 0}\n-#else\n-#define\tPTHREAD_MUTEX_INITIALIZER\t\t/* = DEFAULTMUTEX */\t\\\n-\t{{0, 0, 0, DEFAULT_TYPE, _MUTEX_MAGIC}, {{{0}}}, {0}}\n-#endif\n-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n-#define\tPTHREAD_COND_INITIALIZER\t\t/* = DEFAULTCV */\t\\\n-\t{{{0, 0, 0, 0}, DEFAULT_TYPE, _COND_MAGIC}, 0}\n-#else\n-#define\tPTHREAD_COND_INITIALIZER\t\t/* = DEFAULTCV */\t\\\n-\t{{{0, 0, 0, 0}, DEFAULT_TYPE, _COND_MAGIC}, {0}}\n-#endif\n-#endif  /* SOLARIS_MUTEX_INIT_2_CHECK */\n-\n-\n #if defined( SOLARIS_ONCE_INIT_1_CHECK )\n #pragma ident\t\"@(#)pthread.h\t1.37\t04/09/28 SMI\"\n-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n #define PTHREAD_ONCE_INIT\t{{0, 0, 0, PTHREAD_ONCE_NOTDONE}}\n-#else\n-#define PTHREAD_ONCE_INIT\t{{{0}, {0}, {0}, {PTHREAD_ONCE_NOTDONE}}}\n-#endif\n #endif  /* SOLARIS_ONCE_INIT_1_CHECK */\n \n \n-#if defined( SOLARIS_ONCE_INIT_2_CHECK )\n-#ident \"@(#)pthread.h  1.26  98/04/12 SMI\"\n-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n-#define PTHREAD_ONCE_INIT\t{{0, 0, 0, PTHREAD_ONCE_NOTDONE}}\n-#else\n-#define PTHREAD_ONCE_INIT\t{{{0}, {0}, {0}, {PTHREAD_ONCE_NOTDONE}}}\n-#endif\n-\n-#endif  /* SOLARIS_ONCE_INIT_2_CHECK */\n-\n-\n #if defined( SOLARIS_RWLOCK_INIT_1_CHECK )\n #ident \"@(#)pthread.h  1.26  98/04/12 SMI\"\n #if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)"}, {"sha": "39bb68acd784ebbb5d834ab473033da0ce2cc41b", "filename": "fixincludes/tests/base/sys/int_types.h", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d35c5c2708d881e731a276b93caecc068f5678d/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d35c5c2708d881e731a276b93caecc068f5678d/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_types.h?ref=0d35c5c2708d881e731a276b93caecc068f5678d", "patch": "@@ -1,20 +0,0 @@\n-/*  DO NOT EDIT THIS FILE.\n-\n-    It has been auto-edited by fixincludes from:\n-\n-\t\"fixinc/tests/inc/sys/int_types.h\"\n-\n-    This had to be done to correct non-standard usages in the\n-    original, manufacturer supplied header file.  */\n-\n-\n-\n-#if defined( SOLARIS_INT_TYPES_CHECK )\n-#if (defined(_STDC_C99) || !defined(_STRICT_STDC) || defined(__GNUC__)) && !defined(_NO_LONGLONG)\n-typedef\tlong long\t\tint64_t;\n-#endif\n-\n-#if defined(_LP64) || ((defined(_STDC_C99) || !defined(_STRICT_STDC) || defined(__GNUC__)) && !defined(_NO_LONGLONG))\n-typedef int64_t\t\t\tintmax_t;\n-#endif\n-#endif  /* SOLARIS_INT_TYPES_CHECK */"}, {"sha": "8c69e2d574b519851316540c9b6b1cfb44599e4e", "filename": "fixincludes/tests/base/sys/va_list.h", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d35c5c2708d881e731a276b93caecc068f5678d/fixincludes%2Ftests%2Fbase%2Fsys%2Fva_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d35c5c2708d881e731a276b93caecc068f5678d/fixincludes%2Ftests%2Fbase%2Fsys%2Fva_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fva_list.h?ref=0d35c5c2708d881e731a276b93caecc068f5678d", "patch": "@@ -1,22 +0,0 @@\n-/*  DO NOT EDIT THIS FILE.\n-\n-    It has been auto-edited by fixincludes from:\n-\n-\t\"fixinc/tests/inc/sys/va_list.h\"\n-\n-    This had to be done to correct non-standard usages in the\n-    original, manufacturer supplied header file.  */\n-\n-\n-\n-#if defined( SOLARIS_SYS_VA_LIST_CHECK )\n-#ifdef __GNUC__\n-typedef __builtin_va_list __va_list;\n-#else\n-#if defined(__STDC__) && !defined(__ia64)\n-typedef void *__va_list;\n-#else\n-typedef char *__va_list;\n-#endif\n-#endif\n-#endif  /* SOLARIS_SYS_VA_LIST_CHECK */"}, {"sha": "a0220156d8ed662172ddca7ad51b4f672ceafde1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,3 +1,26 @@\n+2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.gcc (enable_obsolete): Remove *-*-solaris2.9*.\n+\t(*-*-solaris2.[0-9] | *-*-solaris2.[0-9].*): Mark unsupported.\n+\t(*-*-solaris2*): Simplify.\n+\t(i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*): Likewise.\n+\t(i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*): Remove\n+\t*-*-solaris2.9* handling.\n+\n+\t* configure.ac (gcc_cv_as_hidden): Remove test for Solaris 9/x86\n+\tas bug.\n+\t(gcc_cv_ld_hidden): Remove *-*-solaris2.9* handling.\n+\t(ld_tls_support): Remove i?86-*-solaris2.9, sparc*-*-solaris2.9\n+\thandling, simplify.\n+\t(gcc_cv_as_gstabs_flag): Remove workaround for Solaris 9/x86 as bug.\n+\t* configure: Regenerate.\n+\n+\t* config/i386/sol2-9.h: Remove.\n+\n+\t* doc/install.texi (Specific, i?86-*-solaris2.9): Remove.\n+\t(Specific, *-*-solaris2*): Mention Solaris 9 support removal.\n+\tRemove Solaris 9 references.\n+\n 2014-04-22  Vidya Praveen  <vidyapraveen@arm.com>\n \n \t* aarch64.md (float<GPI:mode><GPF:mode>2): Remove."}, {"sha": "926b1b0758c1549cc95a7bd9feda3aaac441b2c6", "filename": "gcc/config.gcc", "status": "modified", "additions": 23, "deletions": 46, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -246,7 +246,6 @@ md_file=\n case ${target} in\n    picochip-*\t\t\t\t\\\n  | score-*\t\t\t\t\\\n- | *-*-solaris2.9*\t\t\t\\\n  )\n     if test \"x$enable_obsolete\" != xyes; then\n       echo \"*** Configuration ${target} is obsolete.\" >&2\n@@ -287,8 +286,8 @@ case ${target} in\n  | *-*-rtemsaout*\t\t\t\\\n  | *-*-rtemscoff*\t\t\t\\\n  | *-*-solaris2\t\t\t\t\\\n- | *-*-solaris2.[0-8]\t\t\t\\\n- | *-*-solaris2.[0-8].*\t\t\t\\\n+ | *-*-solaris2.[0-9]\t\t\t\\\n+ | *-*-solaris2.[0-9].*\t\t\t\\\n  | *-*-sysv*\t\t\t\t\\\n  | vax-*-vms*\t\t\t\t\\\n  )\n@@ -810,15 +809,8 @@ case ${target} in\n   # i?86-*-solaris2* needs to insert headers between cpu default and\n   # Solaris 2 specific ones.\n   sol2_tm_file=\"dbxelf.h elfos.h ${cpu_type}/sysv4.h sol2.h ${cpu_type}/sol2.h\"\n-  case ${target} in\n-    *-*-solaris2.1[0-9]*)\n-      sol2_tm_file=\"${sol2_tm_file} sol2-10.h\"\n-      use_gcc_stdint=wrap\n-      ;;\n-    *)\n-      use_gcc_stdint=provide\n-      ;;\n-  esac\n+  sol2_tm_file=\"${sol2_tm_file} sol2-10.h\"\n+  use_gcc_stdint=wrap\n   if test x$gnu_ld = xyes; then\n     tm_file=\"usegld.h ${tm_file}\"\n   fi\n@@ -1526,42 +1518,27 @@ i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h ${sol2_tm_file}\"\n \t# Set default arch_32 to pentium4, tune_32 to generic like the other\n \t# i386 targets, although config.guess defaults to i386-pc-solaris2*.\n-\tcase ${target} in\n-\t*-*-solaris2.9*)\n-\t\t# Solaris 9/x86 cannot execute SSE/SSE2 instructions by default.\n-\t\twith_arch_32=${with_arch_32:-pentiumpro}\n-\t\t;;\n-\t*)\n-\t\twith_arch_32=${with_arch_32:-pentium4}\n-\t\t;;\n-\tesac\n+\twith_arch_32=${with_arch_32:-pentium4}\n \twith_tune_32=${with_tune_32:-generic}\n-\tcase ${target} in\n-\t*-*-solaris2.9*)\n-\t\ttm_file=\"${tm_file} i386/sol2-9.h\"\n-\t\t;;\n-\t*-*-solaris2.1[0-9]*)\n-\t\ttm_file=\"${tm_file} i386/x86-64.h i386/sol2-bi.h sol2-bi.h\"\n-\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n-\t\ttmake_file=\"$tmake_file i386/t-sol2-64\"\n-\t\tneed_64bit_isa=yes\n-\t\tif test x$with_cpu = x; then\n-\t\t\tif test x$with_cpu_64 = x; then\n-\t\t\t\twith_cpu_64=generic\n-\t\t\tfi\n-\t\telse\n-\t\t\tcase \" $x86_cpus $x86_archs $x86_64_archs \" in\n-\t\t\t*\" $with_cpu \"*)\n-\t\t\t\t;;\n-\t\t\t*)\n-\t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\t\techo \"$x86_cpus $x86_archs $x86_64_archs\" 1>&2\n-\t\t\t\texit 1\n-\t\t\t\t;;\n-\t\t\tesac\n+\ttm_file=\"${tm_file} i386/x86-64.h i386/sol2-bi.h sol2-bi.h\"\n+\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n+\ttmake_file=\"$tmake_file i386/t-sol2-64\"\n+\tneed_64bit_isa=yes\n+\tif test x$with_cpu = x; then\n+\t\tif test x$with_cpu_64 = x; then\n+\t\t\twith_cpu_64=generic\n \t\tfi\n-\t\t;;\n-\tesac\n+\telse\n+\t\tcase \" $x86_cpus $x86_archs $x86_64_archs \" in\n+\t\t*\" $with_cpu \"*)\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n+\t\t\techo \"$x86_cpus $x86_archs $x86_64_archs\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\tfi\n \t;;\n i[4567]86-wrs-vxworks|i[4567]86-wrs-vxworksae)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h elfos.h vx-common.h\""}, {"sha": "9ae88aae5dc98280f57063dd29b06a097013ea86", "filename": "gcc/config/i386/sol2-9.h", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d35c5c2708d881e731a276b93caecc068f5678d/gcc%2Fconfig%2Fi386%2Fsol2-9.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d35c5c2708d881e731a276b93caecc068f5678d/gcc%2Fconfig%2Fi386%2Fsol2-9.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-9.h?ref=0d35c5c2708d881e731a276b93caecc068f5678d", "patch": "@@ -1,23 +0,0 @@\n-/* Target definitions for GCC for Intel 80386 running Solaris 9\n-   Copyright (C) 2014 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Solaris 9 only guarantees 4-byte stack alignment as required by the i386\n-   psABI, so realign it as necessary for SSE instructions.  */\n-#undef STACK_REALIGN_DEFAULT\n-#define STACK_REALIGN_DEFAULT 1"}, {"sha": "fe6f31e77f90b6c6bb885c2ffefc9e926f9c6a30", "filename": "gcc/configure", "status": "modified", "additions": 4, "deletions": 70, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -22191,35 +22191,7 @@ foobar:' > conftest.s\n   $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n   test $ac_status = 0; }; }\n     then\n-\n-# Solaris 9/x86 as incorrectly emits an alias for a hidden symbol with\n-# STV_HIDDEN, so disable .hidden support if so.\n-case \"${target}\" in\n-  i?86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n-    if test x$gcc_cv_as != x && test x$gcc_cv_objdump != x; then\n-      cat > conftest.s <<EOF\n-.globl hidden\n-        .hidden hidden\n-hidden:\n-.globl default\n-        .set    default,hidden\n-EOF\n-      if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n-        && $gcc_cv_objdump -t conftest.o 2>/dev/null | \\\n-        grep '\\.hidden default' > /dev/null; then\n-        gcc_cv_as_hidden=no\n-      else\n-        gcc_cv_as_hidden=yes\n-      fi\n-    else\n-      # Assume bug is present if objdump is missing.\n-      gcc_cv_as_hidden=no\n-    fi\n-    ;;\n-  *)\n-    gcc_cv_as_hidden=yes\n-    ;;\n-esac\n+\tgcc_cv_as_hidden=yes\n     else\n       echo \"configure: failed program was\" >&5\n       cat conftest.s >&5\n@@ -22352,7 +22324,7 @@ else\n       hppa64*-*-hpux* | ia64*-*-hpux*)\n \tgcc_cv_ld_hidden=yes\n \t;;\n-      *-*-solaris2.9* | *-*-solaris2.1[0-9]*)\n+      *-*-solaris2.1[0-9]*)\n \t# Support for .hidden in Sun ld appeared in Solaris 9 FCS, but\n \t# .symbolic was only added in Solaris 9 12/02.\n         gcc_cv_ld_hidden=yes\n@@ -23739,34 +23711,7 @@ case \"$target\" in\n   # TLS on x86 was only introduced in Solaris 9 4/04, replacing the earlier\n   # Sun style that Sun ld and GCC don't support any longer.\n   *-*-solaris2.*)\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker and ld.so.1 TLS support\" >&5\n-$as_echo_n \"checking linker and ld.so.1 TLS support... \" >&6; }\n-    ld_tls_support=no\n-    # Check ld and ld.so.1 TLS support.\n-    if echo \"$ld_ver\" | grep GNU > /dev/null; then\n-      # Assume all interesting versions of GNU ld have TLS support.\n-      # FIXME: still need ld.so.1 support, i.e. ld version checks below.\n-      ld_tls_support=yes\n-    else\n-      case \"$target\" in\n-\t# Solaris 9/x86 ld has GNU style TLS support since version 1.374.\n-        i?86-*-solaris2.9)\n-          min_tls_ld_vers_minor=374\n-          ;;\n-\t# Solaris 9/SPARC and Solaris 10+ ld have TLS support since FCS.\n-        sparc*-*-solaris2.9 | *-*-solaris2.1[0-9]*)\n-\t  min_tls_ld_vers_minor=343\n-          ;;\n-      esac\n-      if test \"$ld_vers_major\" -gt 1 || \\\n-        test \"$ld_vers_minor\" -ge \"$min_tls_ld_vers_minor\"; then\n- \tld_tls_support=yes\n-      else\n-        set_have_as_tls=no\n-      fi\n-    fi\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ld_tls_support\" >&5\n-$as_echo \"$ld_tls_support\" >&6; }\n+    ld_tls_support=yes\n \n     save_LIBS=\"$LIBS\"\n     save_LDFLAGS=\"$LDFLAGS\"\n@@ -26568,18 +26513,7 @@ fi\n   $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n   test $ac_status = 0; }; }\n     then\n-\t# The native Solaris 9/Intel assembler doesn't understand --gstabs\n-   # and warns about it, but still exits successfully.  So check for\n-   # this.\n-   if { ac_try='$gcc_cv_as --gstabs -o conftest.o conftest.s 2>&1 | grep -i warning > /dev/null'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-   then :\n-   else gcc_cv_as_gstabs_flag=yes\n-   fi\n+\tgcc_cv_as_gstabs_flag=yes\n     else\n       echo \"configure: failed program was\" >&5\n       cat conftest.s >&5"}, {"sha": "d78955774c4395d8a08830e5fab0859a6b7a919f", "filename": "gcc/configure.ac", "status": "modified", "additions": 4, "deletions": 64, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -2316,35 +2316,7 @@ gcc_GAS_CHECK_FEATURE([.nsubspa comdat], gcc_cv_as_nsubspa_comdat,\n gcc_GAS_CHECK_FEATURE([.hidden], gcc_cv_as_hidden,\n  [elf,2,13,0],,\n [\t.hidden foobar\n-foobar:],[\n-# Solaris 9/x86 as incorrectly emits an alias for a hidden symbol with\n-# STV_HIDDEN, so disable .hidden support if so.\n-case \"${target}\" in\n-  i?86-*-solaris2* | x86_64-*-solaris2.1[[0-9]]*)\n-    if test x$gcc_cv_as != x && test x$gcc_cv_objdump != x; then\n-      cat > conftest.s <<EOF\n-.globl hidden\n-        .hidden hidden\n-hidden:\n-.globl default\n-        .set    default,hidden\n-EOF\n-      if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n-        && $gcc_cv_objdump -t conftest.o 2>/dev/null | \\\n-        grep '\\.hidden default' > /dev/null; then\n-        gcc_cv_as_hidden=no\n-      else\n-        gcc_cv_as_hidden=yes\n-      fi\n-    else\n-      # Assume bug is present if objdump is missing.\n-      gcc_cv_as_hidden=no\n-    fi\n-    ;;\n-  *)\n-    gcc_cv_as_hidden=yes\n-    ;;\n-esac])\n+foobar:])\n case \"${target}\" in\n   *-*-darwin*)\n     # Darwin as has some visibility support, though with a different syntax.\n@@ -2460,7 +2432,7 @@ else\n       hppa64*-*-hpux* | ia64*-*-hpux*)\n \tgcc_cv_ld_hidden=yes\n \t;;\n-      *-*-solaris2.9* | *-*-solaris2.1[0-9]*)\n+      *-*-solaris2.1[0-9]*)\n \t# Support for .hidden in Sun ld appeared in Solaris 9 FCS, but\n \t# .symbolic was only added in Solaris 9 12/02.\n         gcc_cv_ld_hidden=yes\n@@ -3341,32 +3313,7 @@ case \"$target\" in\n   # TLS on x86 was only introduced in Solaris 9 4/04, replacing the earlier\n   # Sun style that Sun ld and GCC don't support any longer.\n   *-*-solaris2.*)\n-    AC_MSG_CHECKING(linker and ld.so.1 TLS support)\n-    ld_tls_support=no\n-    # Check ld and ld.so.1 TLS support.\n-    if echo \"$ld_ver\" | grep GNU > /dev/null; then\n-      # Assume all interesting versions of GNU ld have TLS support.\n-      # FIXME: still need ld.so.1 support, i.e. ld version checks below.\n-      ld_tls_support=yes\n-    else\n-      case \"$target\" in\n-\t# Solaris 9/x86 ld has GNU style TLS support since version 1.374.\n-        i?86-*-solaris2.9)\n-          min_tls_ld_vers_minor=374\n-          ;;\n-\t# Solaris 9/SPARC and Solaris 10+ ld have TLS support since FCS.\n-        sparc*-*-solaris2.9 | *-*-solaris2.1[[0-9]]*)\n-\t  min_tls_ld_vers_minor=343\n-          ;;\n-      esac\n-      if test \"$ld_vers_major\" -gt 1 || \\\n-        test \"$ld_vers_minor\" -ge \"$min_tls_ld_vers_minor\"; then\n- \tld_tls_support=yes\n-      else\n-        set_have_as_tls=no\n-      fi\n-    fi\n-    AC_MSG_RESULT($ld_tls_support)\n+    ld_tls_support=yes\n \n     save_LIBS=\"$LIBS\"\n     save_LDFLAGS=\"$LDFLAGS\"\n@@ -4433,14 +4380,7 @@ if test x\"$insn\" != x; then\n \n  gcc_GAS_CHECK_FEATURE([--gstabs option],\n   gcc_cv_as_gstabs_flag,\n-  [elf,2,11,0], [--gstabs], [$insn],\n-  [# The native Solaris 9/Intel assembler doesn't understand --gstabs\n-   # and warns about it, but still exits successfully.  So check for\n-   # this.\n-   if AC_TRY_COMMAND([$gcc_cv_as --gstabs -o conftest.o conftest.s 2>&1 | grep -i warning > /dev/null])\n-   then :\n-   else gcc_cv_as_gstabs_flag=yes\n-   fi],\n+  [elf,2,11,0], [--gstabs], [$insn],,\n   [AC_DEFINE(HAVE_AS_GSTABS_DEBUG_FLAG, 1,\n [Define if your assembler supports the --gstabs option.])])\n "}, {"sha": "0b2b36575775b8c9e21e00b74c7e16a1cf5a4dfe", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 3, "deletions": 46, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -3110,8 +3110,6 @@ information have to.\n @item\n @uref{#ix86-x-linux,,i?86-*-linux*}\n @item\n-@uref{#ix86-x-solaris289,,i?86-*-solaris2.9}\n-@item\n @uref{#ix86-x-solaris210,,i?86-*-solaris2.10}\n @item\n @uref{#ia64-x-linux,,ia64-*-linux}\n@@ -3673,27 +3671,6 @@ If you receive Signal 11 errors when building on GNU/Linux, then it is\n possible you have a hardware problem.  Further information on this can be\n found on @uref{http://www.bitwizard.nl/sig11/,,www.bitwizard.nl}.\n \n-@html\n-<hr />\n-@end html\n-@anchor{ix86-x-solaris29}\n-@heading i?86-*-solaris2.9\n-The Sun assembler in Solaris 9 has several bugs and limitations.\n-While GCC works around them, several features are missing, so it is\n-@c FIXME: which ones?\n-recommended to use the GNU assembler instead.  There is no bundled\n-version, but the current version, from GNU binutils 2.22, is known to\n-work.\n-\n-Solaris@tie{}2/x86 doesn't support the execution of SSE/SSE2 instructions\n-before Solaris@tie{}9 4/04, even if the CPU supports them.  Programs will\n-receive @code{SIGILL} if they try.  The fix is available both in\n-Solaris@tie{}9 Update@tie{}6 and kernel patch 112234-12 or newer.  To\n-avoid this problem,\n-@option{-march} defaults to @samp{pentiumpro} on Solaris 9.  If\n-you have the patch installed, you can configure GCC with an appropriate\n-@option{--with-arch} option, but need GNU @command{as} for SSE2 support.\n-\n @html\n <hr />\n @end html\n@@ -4250,10 +4227,9 @@ supported as cross-compilation target only.\n @c alone is too unspecific and must be avoided.\n @anchor{x-x-solaris2}\n @heading *-*-solaris2*\n-Support for Solaris 9 has been obsoleted in GCC 4.9, but can still be\n-enabled by configuring with @option{--enable-obsolete}.  Support will be\n-removed in GCC 4.10.  Support for Solaris 8 has removed in GCC 4.8.\n-Support for Solaris 7 has been removed in GCC 4.6.\n+Support for Solaris 9 has been removed in GCC 4.10.  Support for Solaris\n+8 has been removed in GCC 4.8.  Support for Solaris 7 has been removed\n+in GCC 4.6.\n \n Sun does not ship a C compiler with Solaris 2 before Solaris 10, though\n you can download the Sun Studio compilers for free.  In Solaris 10 and\n@@ -4333,25 +4309,6 @@ program which is used only by the GCC testsuite driver.  When the bug\n causes the @command{expect} program to miss anticipated output, extra\n testsuite failures appear.\n \n-There are patches for Solaris 9 (117171-11 or newer for\n-SPARC, 117172-11 or newer for Intel) that address this problem.\n-\n-Thread-local storage (TLS) is supported in Solaris@tie{}9, but requires\n-some patches.  The @samp{libthread} patches provide the\n-@code{__tls_get_addr} (SPARC, 64-bit x86) resp.@ @code{___tls_get_addr}\n-(32-bit x86) functions.  On Solaris@tie{}9, the necessary support\n-on SPARC is present since FCS, while 114432-05 or newer is required on\n-Intel.  Additionally, on Solaris@tie{}9/x86, patch 113986-02 or newer is\n-required for the Sun @command{ld} and runtime linker (@command{ld.so.1})\n-support, while Solaris@tie{}9/SPARC works since FCS.  The linker\n-patches must be installed even if GNU @command{ld} is used. Sun\n-@command{as} in Solaris@tie{}9 doesn't support the necessary\n-relocations, so GNU @command{as} must be used.  The @command{configure}\n-script checks for those prerequisites and automatically enables TLS\n-support if they are met.  Although those minimal patch versions should\n-work, it is recommended to use the latest patch versions which include\n-additional bug fixes.\n-\n @html\n <hr />\n @end html"}, {"sha": "a721c7b7b05e4e5f858070e80c14f30f31197750", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,3 +1,32 @@\n+2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc.c-torture/compile/pr28865.c: Remove dg-xfail-if.\n+\n+\t* gcc.dg/c99-stdint-6.c: Remove dg-options for *-*-solaris2.9.\n+\t* gcc.dg/lto/20090210_0.c: Remove dg-extra-ld-options for\n+\t*-*-solaris2.9.\n+\t* gcc.dg/torture/pr47917.c: Remove dg-options for *-*-solaris2.9.\n+\t* gcc.target/i386/pr22076.c: Remove i?86-*-solaris2.9 handling\n+\tfrom dg-options.\n+\t* gcc.target/i386/pr22152.c: Remove i?86-*-solaris2.9 handling\n+\tfrom dg-additional-options.\n+\t* gcc.target/i386/vect8-ret.c: Remove i?86-*-solaris2.9 handling\n+\tfrom dg-options.\n+\n+\t* gcc.dg/vect/tree-vect.h (check_vect): Remove Solaris 9 SSE2\n+\texecution check.\n+\t* gcc.target/i386/sse-os-support.h [__sun__ && __svr4__]\n+\t(sigill_hdlr): Remove.\n+\t(sse_os_support) [__sun__ && __svr4__]: Remove SSE execution\n+\tcheck.\n+\n+\t* gfortran.dg/erf_3.F90: Remove sparc*-*-solaris2.9* handling.\n+\t* gfortran.dg/fmt_en.f90: Remove i?86-*-solaris2.9* handling.\n+\t* gfortran.dg/round_4.f90: Remove *-*-solaris2.9* handling.\n+\n+\t* lib/target-supports.exp (add_options_for_tls): Remove\n+\t*-*-solaris2.9* handling.\n+\n 2014-04-22  Vidya Praveen  <vidyapraveen@arm.com>\n \n \t* gcc.target/aarch64/vect_cvtf_1.c: New."}, {"sha": "aa6ae078acaba257ac4e2644f480ec6496fff188", "filename": "gcc/testsuite/gcc.c-torture/compile/pr28865.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28865.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28865.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28865.c?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-xfail-if \"PR target/60602\" { sparc*-*-solaris2.9* && { ! gas } } { \"-O0\" } } */\n-\n struct var_len\n {\n   int field1;"}, {"sha": "150666ce6898121cb9d57ad6176e381e435f6161", "filename": "gcc/testsuite/gcc.dg/c99-stdint-6.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-6.c?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -2,7 +2,6 @@\n    with any system <inttypes.h> header.  */\n /* { dg-do compile { target inttypes_types } } */\n /* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n-/* { dg-options \"-std=gnu99 -pedantic-errors -DNO_FAST_TYPES\" { target *-*-solaris2.9* } } */\n \n #include <inttypes.h>\n #ifndef SIGNAL_SUPPRESS"}, {"sha": "78e7d03bddb33f392672a05e610031c713f0964a", "filename": "gcc/testsuite/gcc.dg/lto/20090210_0.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090210_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090210_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090210_0.c?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -2,7 +2,6 @@\n /* { dg-require-effective-target fpic } */\n /* { dg-suppress-ld-options {-fPIC} }  */\n /* { dg-require-effective-target tls_runtime } */\n-/* { dg-extra-ld-options \"-pthread\" { target *-*-solaris2.9 } } */\n int foo (int x)\n {\n   return x;"}, {"sha": "0b45e064e360249b8b4ecf434e0aa8d32bffc255", "filename": "gcc/testsuite/gcc.dg/torture/pr47917.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do run } */\n /* { dg-options \"-std=c99\" } */\n-/* { dg-options \"-std=c99 -D_XOPEN_SOURCE=500\" { target *-*-solaris2.9 } } */\n /* { dg-options \"-std=gnu99\" { target *-*-hpux* } } */\n /* { dg-additional-options \"-D__USE_MINGW_ANSI_STDIO=1\" { target *-*-mingw* } } */\n /* { dg-xfail-run-if \"no C99 snprintf function\" { *-*-hpux10* } } */"}, {"sha": "2f21c2b167350ea118413f76f4bb56af9acd7c24", "filename": "gcc/testsuite/gcc.dg/vect/tree-vect.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -41,11 +41,6 @@ check_vect (void)\n     want_level = 1, want_c = bit_SSSE3, want_d = 0;\n # else\n     want_level = 1, want_c = 0, want_d = bit_SSE2;\n-#  if defined(__sun__) && defined(__svr4__)\n-    /* Before Solaris 9 4/04, trying to execute an SSE2 instruction gives\n-       SIGILL even if the CPU can handle them.  */\n-    asm volatile (\"unpcklpd %xmm0,%xmm2\");\n-#  endif\n # endif\n \n     if (!__get_cpuid (want_level, &a, &b, &c, &d)"}, {"sha": "e9916c9a5832df2effc5be70c107ce98a0004e23", "filename": "gcc/testsuite/gcc.target/i386/pr22076.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx\" } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx -mno-vect8-ret-in-mem\" { target i?86-*-solaris2.9 *-*-vxworks* } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx -mno-vect8-ret-in-mem\" { target *-*-vxworks* } } */\n \n #include <mmintrin.h>\n "}, {"sha": "5e2d4ac731baeacd1d5bb7ca6d3374baaf54710f", "filename": "gcc/testsuite/gcc.target/i386/pr22152.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msse2 -mtune=core2\" } */\n-/* { dg-additional-options \"-mno-vect8-ret-in-mem\" { target i?86-*-solaris2.9 *-*-vxworks* } } */\n+/* { dg-additional-options \"-mno-vect8-ret-in-mem\" { target *-*-vxworks* } } */\n /* { dg-additional-options \"-mabi=sysv\" { target x86_64-*-mingw* } } */\n \n #include <mmintrin.h>"}, {"sha": "4830b7e4ce9ecc478f941ec9b8dcbe4047d3cd3b", "filename": "gcc/testsuite/gcc.target/i386/sse-os-support.h", "status": "modified", "additions": 2, "deletions": 49, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-os-support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-os-support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-os-support.h?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,55 +1,8 @@\n-#if defined(__sun__) && defined(__svr4__)\n-/* Make sure sigaction() is declared even with -std=c99.  */\n-#define __EXTENSIONS__\n-#include <signal.h>\n-#include <ucontext.h>\n-\n-static volatile sig_atomic_t sigill_caught;\n-\n-static void\n-sigill_hdlr (int sig __attribute((unused)),\n-\t     siginfo_t *sip __attribute__((unused)),\n-\t     ucontext_t *ucp)\n-{\n-  sigill_caught = 1;\n-  /* Set PC to the instruction after the faulting one to skip over it,\n-     otherwise we enter an infinite loop.  */\n-  ucp->uc_mcontext.gregs[EIP] += 4;\n-  setcontext (ucp);\n-}\n-#endif\n-\n-/* Check if the OS supports executing SSE instructions.  This function is\n-   only used in sse-check.h, sse2-check.h, and sse3-check.h so far since\n-   Solaris 8 and 9 won't run on newer CPUs anyway.  */\n+/* Check if the OS supports executing SSE instructions.  */\n \n static int\n sse_os_support (void)\n {\n-#if defined(__sun__) && defined(__svr4__)\n-  /* Solaris 2 before Solaris 9 4/04 cannot execute SSE instructions\n-     even if the CPU supports them.  Programs receive SIGILL instead, so\n-     check for that at runtime.  */\n-\n-  struct sigaction act, oact;\n-\n-  act.sa_handler = sigill_hdlr;\n-  sigemptyset (&act.sa_mask);\n-  /* Need to set SA_SIGINFO so a ucontext_t * is passed to the handler.  */\n-  act.sa_flags = SA_SIGINFO;\n-  sigaction (SIGILL, &act, &oact);\n-\n-  /* We need a single SSE instruction here so the handler can safely skip\n-     over it.  */\n-  __asm__ volatile (\"movss %xmm2,%xmm1\");\n-\n-  sigaction (SIGILL, &oact, NULL);\n-\n-  if (sigill_caught)\n-    exit (0);\n-  else\n-    return 1;\n-#else\n+  /* All currently supported OSes do.  */\n   return 1;\n-#endif /* __sun__ && __svr4__ */\n }"}, {"sha": "09283d72bef5cfc7cc59952e6ae9205b6afec5a0", "filename": "gcc/testsuite/gcc.target/i386/vect8-ret.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target ia32 } } */\n-/* { dg-options \"-mmmx\" { target i?86-*-solaris2.9 *-*-vxworks* } } */\n+/* { dg-options \"-mmmx\" { target *-*-vxworks* } } */\n /* { dg-options \"-mmmx -mvect8-ret-in-mem\" } */\n \n #include <mmintrin.h>"}, {"sha": "df82e126bd8c6183adfba58adcec876f012b00fb", "filename": "gcc/testsuite/gfortran.dg/erf_3.F90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_3.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_3.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_3.F90?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do run { xfail spu-*-* ia64-*-linux* } }\n ! { dg-options \"-fno-range-check -ffree-line-length-none -O0\" }\n ! { dg-add-options ieee }\n-! { dg-skip-if \"PR libfortran/59313\" { sparc*-*-solaris2.9* hppa*-*-hpux* } }\n+! { dg-skip-if \"PR libfortran/59313\" { hppa*-*-hpux* } }\n !\n ! Check that simplification functions and runtime library agree on ERF,\n ! ERFC and ERFC_SCALED, for quadruple-precision."}, {"sha": "89a6d95adb6622671fd2f45e6035fdcd64559ac8", "filename": "gcc/testsuite/gfortran.dg/fmt_en.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en.f90?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -182,5 +182,5 @@ subroutine checkfmt(fmt, x, cmp)\n         \n     end subroutine\n end program\n-! { dg-final { scan-file fmt_en.res \"All kinds rounded to nearest\" { xfail { i?86-*-solaris2.9* hppa*-*-hpux* } } } }\n+! { dg-final { scan-file fmt_en.res \"All kinds rounded to nearest\" { xfail hppa*-*-hpux* } } }\n ! { dg-final { cleanup-saved-temps } }"}, {"sha": "ffeb9508377f07bc16a289dde917cd75f58b7312", "filename": "gcc/testsuite/gfortran.dg/round_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_4.f90?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do run }\n ! { dg-add-options ieee }\n-! { dg-skip-if \"PR libfortran/58015\" { *-*-solaris2.9* hppa*-*-hpux* } }\n+! { dg-skip-if \"PR libfortran/58015\" { hppa*-*-hpux* } }\n !\n ! PR fortran/35862\n !"}, {"sha": "541a428efbc96b9ab24968ea3c04b5c1012a0c3f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -593,7 +593,7 @@ proc add_options_for_tls { flags } {\n     # libthread, so always pass -pthread for native TLS. Same for AIX.\n     # Need to duplicate native TLS check from\n     # check_effective_target_tls_native to avoid recursion.\n-    if { ([istarget *-*-solaris2.9*] || [istarget powerpc-ibm-aix*]) &&\n+    if { ([istarget powerpc-ibm-aix*]) &&\n \t [check_no_messages_and_pattern tls_native \"!emutls\" assembly {\n \t     __thread int i;\n \t     int f (void) { return i; }"}, {"sha": "ce417632b199ed81ab5192404b02e55927362b5e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,3 +1,7 @@\n+2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* lex.c: Remove Solaris 9 reference.\n+\n 2014-02-24  Walter Lee  <walt@tilera.com>\n \n \t* configure.ac: Change \"tilepro\" triplet to \"tilepro*\"."}, {"sha": "b7836225332bdba04f4ab123cfb84624fbeb7d65", "filename": "libcpp/lex.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -263,11 +263,9 @@ search_line_acc_char (const uchar *s, const uchar *end ATTRIBUTE_UNUSED)\n     }\n }\n \n-/* Disable on Solaris 2/x86 until the following problems can be properly\n+/* Disable on Solaris 2/x86 until the following problem can be properly\n    autoconfed:\n \n-   The Solaris 9 assembler cannot assemble SSE4.2 insns.\n-   Before Solaris 9 Update 6, SSE insns cannot be executed.\n    The Solaris 10+ assembler tags objects with the instruction set\n    extensions used, so SSE4.2 executables cannot run on machines that\n    don't support that extension.  */"}, {"sha": "d128b08a8ad6d926f43cbaeeee6e9a3dfcf44931", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,3 +1,14 @@\n+2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/i386/crtfastmath.c (set_fast_math): Remove SSE execution\n+\tcheck.\n+\t* config/i386/sol2-unwind.h (x86_fallback_frame_state): Remove\n+\tSolaris 9 single-threaded support.\n+\t* config/sparc/sol2-unwind.h (sparc64_is_sighandler): Remove\n+\tSolaris 9 single-threaded support.  Add call_user_handler code\n+\tsequences.\n+\t(sparc_is_sighandler): Likewise.\n+\n 2014-03-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config.host: Append t-floattodi to tmake_file depending on"}, {"sha": "24a08843286cfbd54177149c8379f63b051f691e", "filename": "libgcc/config/i386/crtfastmath.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgcc%2Fconfig%2Fi386%2Fcrtfastmath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgcc%2Fconfig%2Fi386%2Fcrtfastmath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcrtfastmath.c?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -70,28 +70,6 @@ set_fast_math (void)\n     {\n       unsigned int mxcsr;\n   \n-#if defined __sun__ && defined __svr4__\n-      /* Solaris 2 before Solaris 9 4/04 cannot execute SSE instructions even\n-\t if the CPU supports them.  Programs receive SIGILL instead, so check\n-\t for that at runtime.  */\n-      struct sigaction act, oact;\n-\n-      act.sa_handler = sigill_hdlr;\n-      sigemptyset (&act.sa_mask);\n-      /* Need to set SA_SIGINFO so a ucontext_t * is passed to the handler.  */\n-      act.sa_flags = SA_SIGINFO;\n-      sigaction (SIGILL, &act, &oact);\n-\n-      /* We need a single SSE instruction here so the handler can safely skip\n-\t over it.  */\n-      __asm__ volatile (\"movaps %xmm0,%xmm0\");\n-\n-      sigaction (SIGILL, &oact, NULL);\n-\n-      if (sigill_caught)\n-\treturn;\n-#endif /* __sun__ && __svr4__ */\n-\n       if (edx & bit_FXSAVE)\n \t{\n \t  /* Check if DAZ is available.  */"}, {"sha": "1a1770cc82274141b3a6f3f7a35a09e1eaffa3f8", "filename": "libgcc/config/i386/sol2-unwind.h", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgcc%2Fconfig%2Fi386%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgcc%2Fconfig%2Fi386%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fsol2-unwind.h?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -144,26 +144,8 @@ x86_fallback_frame_state (struct _Unwind_Context *context,\n   mcontext_t *mctx;\n   long new_cfa;\n \n-  if (/* Solaris 9 - single-threaded\n-\t----------------------------\n-         <sigacthandler+16>:    mov    0x244(%ebx),%ecx\n-\t <sigacthandler+22>:    mov    0x8(%ebp),%eax\n-\t <sigacthandler+25>:    mov    (%ecx,%eax,4),%ecx\n-\t <sigacthandler+28>:    pushl  0x10(%ebp)\n-\t <sigacthandler+31>:    pushl  0xc(%ebp)\n-\t <sigacthandler+34>:    push   %eax\n-\t <sigacthandler+35>:    call   *%ecx\n-\t <sigacthandler+37>:    add    $0xc,%esp\t<--- PC\n-\t <sigacthandler+40>:    pushl  0x10(%ebp) */\n-      (*(unsigned long *)(pc - 21) == 0x2448b8b\n-       && *(unsigned long *)(pc - 17) == 0x458b0000\n-       && *(unsigned long *)(pc - 13) == 0x810c8b08\n-       && *(unsigned long *)(pc - 9)  == 0xff1075ff\n-       && *(unsigned long *)(pc - 5)  == 0xff500c75\n-       && *(unsigned long *)(pc - 1)  == 0xcc483d1)\n-\n-      || /* Solaris 9 - multi-threaded, Solaris 10\n-\t   ---------------------------------------\n+  if (/* Solaris 10\n+\t-----------\n \t   <__sighndlr+0>:      push   %ebp\n \t   <__sighndlr+1>:      mov    %esp,%ebp\n \t   <__sighndlr+3>:      pushl  0x10(%ebp)"}, {"sha": "f0ececa3c96598fca18f9558151c8d6a1514a5e4", "filename": "libgcc/config/sparc/sol2-unwind.h", "status": "modified", "additions": 57, "deletions": 105, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -36,44 +36,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n static int\n sparc64_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n {\n-  if (/* Solaris 9 - single-threaded\n-\t----------------------------\n-\tThe pattern changes slightly in different versions of the\n-\toperating system, so we skip the comparison against pc[-6] for\n-\tSolaris 9.\n-\n-\t<sigacthandler+24>:  sra  %i0, 0, %l1\n-\n-\tSolaris 9 5/02:\n-\t<sigacthandler+28>:  ldx  [ %o2 + 0xf68 ], %g5\n-\tSolaris 9 9/05:\n-\t<sigacthandler+28>:  ldx  [ %o2 + 0xe50 ], %g5\n-\n-\t<sigacthandler+32>:  sllx  %l1, 3, %g4\n-\t<sigacthandler+36>:  mov  %l1, %o0\n-\t<sigacthandler+40>:  ldx  [ %g4 + %g5 ], %l0\n-\t<sigacthandler+44>:  call  %l0\n-\t<sigacthandler+48>:  mov  %i2, %o2\n-\t<sigacthandler+52>:  cmp  %l1, 8\t<--- PC  */\n-      (   pc[-7] == 0xa33e2000\n-       /* skip pc[-6] */\n-       && pc[-5] == 0x892c7003\n-       && pc[-4] == 0x90100011\n-       && pc[-3] == 0xe0590005\n-       && pc[-2] == 0x9fc40000\n-       && pc[-1] == 0x9410001a\n-       && pc[ 0] == 0x80a46008))\n-    {\n-      /* We need to move up one frame:\n-\n-\t\t<signal handler>\t<-- context->cfa\n-\t\tsigacthandler\n-\t\t<kernel>\n-      */\n-      *nframes = 1;\n-      return 1;\n-    }\n-\n   if (/* Solaris 8+ - multi-threaded\n \t----------------------------\n \t<__sighndlr>:        save  %sp, -176, %sp\n@@ -101,42 +63,55 @@ sparc64_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n \t= *(unsigned int *)(*(unsigned long *)(cfa + 15*8) - 4);\n \n       if (cuh_pattern == 0x92100019)\n-\t/* This matches the call_user_handler pattern for Solaris 11.\n-\t   This is the same setup as for Solaris 9, see below.  */\n+\t/* This matches the call_user_handler pattern in Solaris 11\n+\t   libc.so.1:\n+\n+\t   <call_user_handler+864>:     mov  %i1, %o1\n+\t   <call_user_handler+868>:     call __sighndlr\n+\n+\t   This is the same setup as for Solaris 10, see below.  */\n \t*nframes = 3;\n \n       else if (cuh_pattern == 0xd25fa7ef)\n \t{\n-\t  /* This matches the call_user_handler pattern for Solaris 10.\n+\t  /* This matches the call_user_handler pattern in Solaris 10\n+\t     libc.so.1:\n+\n+\t     <call_user_handler+988>:     ldx  [ %fp + 0x7ef ], %o1\n+\t     <call_user_handler+992>:     call __sighndlr\n+\n \t     There are 2 cases so we look for the return address of the\n \t     caller's caller frame in order to do more pattern matching.  */\n \t  unsigned long sah_address = *(unsigned long *)(cfa + 176 + 15*8);\n \n           if (sah_address && *(unsigned int *)(sah_address - 4) == 0x92100019)\n-\t    /* This is the same setup as for Solaris 9, see below.  */\n+\t    /* We need to move up three frames:\n+\n+\t\t<signal handler>\t<-- context->cfa\n+\t\t__sighndlr\n+\t\tcall_user_handler\n+\t\tsigacthandler\n+\t\t<kernel>  */\n \t    *nframes = 3;\n \t  else\n \t    /* The sigacthandler frame isn't present in the chain.\n \t       We need to move up two frames:\n \n \t\t<signal handler>\t<-- context->cfa\n \t\t__sighndlr\n-\t\tcall_user_handler frame\n-\t\t<kernel>\n-\t    */\n+\t\tcall_user_handler\n+\t\t<kernel>  */\n \t    *nframes = 2;\n \t}\n \n-      else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x94100013)\n-\t/* This matches the call_user_handler pattern for Solaris 9.\n-\t   We need to move up three frames:\n+      else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x9410001b)\n+\t/* This matches the call_user_handler pattern in Solaris 9\n+\t   libthread.so.1:\n \n-\t\t<signal handler>\t<-- context->cfa\n-\t\t__sighndlr\n-\t\tcall_user_handler\n-\t\tsigacthandler\n-\t\t<kernel>\n-\t*/\n+\t   <call_user_handler+600>:     mov  %i2, %o2\n+\t   <call_user_handler+604>:     call  __sighndlr\n+\n+\t   This is the same setup as for Solaris 10, see above.  */\n \t*nframes = 3;\n \n       return 1;\n@@ -178,42 +153,6 @@ sparc64_frob_update_context (struct _Unwind_Context *context,\n static int\n sparc_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n {\n-  if (/* Solaris 9 - single-threaded\n-        ----------------------------\n-\tThe pattern changes slightly in different versions of the operating\n-\tsystem, so we skip the comparison against pc[-6].\n-\n-\t<sigacthandler+16>:  add  %o1, %o7, %o3\n-\t<sigacthandler+20>:  mov  %i1, %o1\n-\n-\t<sigacthandler+24>:  ld  [ %o3 + <offset> ], %o2\n-\n-\t<sigacthandler+28>:  sll  %i0, 2, %o0\n-\t<sigacthandler+32>:  ld  [ %o0 + %o2 ], %l0\n-\t<sigacthandler+36>:  mov  %i0, %o0\n-\t<sigacthandler+40>:  call  %l0\n-\t<sigacthandler+44>:  mov  %i2, %o2\n-\t<sigacthandler+48>:  cmp  %i0, 8\t<--- PC  */\n-         pc[-8] == 0x9602400f\n-      && pc[-7] == 0x92100019\n-      /* skip pc[-6] */\n-      && pc[-5] == 0x912e2002\n-      && pc[-4] == 0xe002000a\n-      && pc[-3] == 0x90100018\n-      && pc[-2] == 0x9fc40000\n-      && pc[-1] == 0x9410001a\n-      && pc[ 0] == 0x80a62008)\n-    {\n-      /* We need to move up one frame:\n-\n-\t\t<signal handler>\t<-- context->cfa\n-\t\tsigacthandler\n-\t\t<kernel>\n-      */\n-      *nframes = 1;\n-      return 1;\n-    }\n-\n   if(/* Solaris 8+ - multi-threaded\n        ----------------------------\n        <__sighndlr>:\tsave  %sp, -96, %sp\n@@ -241,42 +180,55 @@ sparc_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n \t= *(unsigned int *)(*(unsigned int *)(cfa + 15*4) - 4);\n \n       if (cuh_pattern == 0x92100019)\n-\t/* This matches the call_user_handler pattern for Solaris 11.\n-\t   This is the same setup as for Solaris 9, see below.  */\n+\t/* This matches the call_user_handler pattern in Solaris 11\n+\t   libc.so.1:\n+\n+\t   <call_user_handler+876>:     mov  %i1, %o1\n+\t   <call_user_handler+880>:     call __sighndlr\n+\n+\t   This is the same setup as for Solaris 10, see below.  */\n \t*nframes = 3;\n \n       else if (cuh_pattern == 0xd407a04c)\n \t{\n-\t  /* This matches the call_user_handler pattern for Solaris 10.\n+\t  /* This matches the call_user_handler pattern in Solaris 10\n+\t     libc.so.1:\n+\n+\t     <call_user_handler+948>:     ld  [ %fp + 0x4c ], %o2\n+\t     <call_user_handler+952>:     call __sighndlr\n+\n \t     There are 2 cases so we look for the return address of the\n \t     caller's caller frame in order to do more pattern matching.  */\n \t  unsigned int sah_address = *(unsigned int *)(cfa + 96 + 15*4);\n \n           if (sah_address && *(unsigned int *)(sah_address - 4) == 0x92100019)\n-\t    /* This is the same setup as for Solaris 9, see below.  */\n+\t    /* We need to move up three frames:\n+\n+\t\t<signal handler>\t<-- context->cfa\n+\t\t__sighndlr\n+\t\tcall_user_handler\n+\t\tsigacthandler\n+\t\t<kernel>  */\n \t    *nframes = 3;\n \t  else\n \t    /* The sigacthandler frame isn't present in the chain.\n \t       We need to move up two frames:\n \n \t\t<signal handler>\t<-- context->cfa\n \t\t__sighndlr\n-\t\tcall_user_handler frame\n-\t\t<kernel>\n-\t    */\n+\t\tcall_user_handler\n+\t\t<kernel>  */\n \t    *nframes = 2;\n \t}\n \n       else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x9410001b)\n-\t/* This matches the call_user_handler pattern for Solaris 9.\n-\t   We need to move up three frames:\n+\t/* This matches the call_user_handler pattern in Solaris 9\n+\t   libthread.so.1:\n \n-\t\t<signal handler>\t<-- context->cfa\n-\t\t__sighndlr\n-\t\tcall_user_handler\n-\t\tsigacthandler\n-\t\t<kernel>\n-\t*/\n+\t   <call_user_handler+560>:      mov  %i2, %o2\n+\t   <call_user_handler+564>:      call  __sighndlr\n+\n+\t   This is the same setup as for Solaris 10, see above.  */\n \t*nframes = 3;\n \n       return 1;"}, {"sha": "33e054b9bfbe40962f1f529838cabc56fb814fa2", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,3 +1,8 @@\n+2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/fpu-387.h [__sun__ && __svr4__]: Remove SSE execution\n+\tcheck.\n+\n 2014-04-11  Jerry DeLisle  <jvdelisle@gcc.gnu>\n \n \tPR libfortran/60810"}, {"sha": "7b5629307313a260fc03927658fa2d2cdcf8b00b", "filename": "libgfortran/config/fpu-387.h", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgfortran%2Fconfig%2Ffpu-387.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libgfortran%2Fconfig%2Ffpu-387.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-387.h?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -27,26 +27,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"cpuid.h\"\n #endif\n \n-#if defined(__sun__) && defined(__svr4__)\n-#include <signal.h>\n-#include <ucontext.h>\n-\n-static volatile sig_atomic_t sigill_caught;\n-\n-static void\n-sigill_hdlr (int sig __attribute((unused)),\n-\t     siginfo_t *sip __attribute__((unused)),\n-\t     ucontext_t *ucp)\n-{\n-  sigill_caught = 1;\n-  /* Set PC to the instruction after the faulting one to skip over it,\n-     otherwise we enter an infinite loop.  3 is the size of the movaps\n-     instruction.  */\n-  ucp->uc_mcontext.gregs[EIP] += 3;\n-  setcontext (ucp);\n-}\n-#endif\n-\n static int\n has_sse (void)\n {\n@@ -56,32 +36,6 @@ has_sse (void)\n   if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n     return 0;\n \n-#if defined(__sun__) && defined(__svr4__)\n-  /* Solaris 2 before Solaris 9 4/04 cannot execute SSE instructions even\n-     if the CPU supports them.  Programs receive SIGILL instead, so check\n-     for that at runtime.  */\n-\n-  if (edx & bit_SSE)\n-    {\n-      struct sigaction act, oact;\n-\n-      act.sa_handler = sigill_hdlr;\n-      sigemptyset (&act.sa_mask);\n-      /* Need to set SA_SIGINFO so a ucontext_t * is passed to the handler.  */\n-      act.sa_flags = SA_SIGINFO;\n-      sigaction (SIGILL, &act, &oact);\n-\n-      /* We need a single SSE instruction here so the handler can safely skip\n-\t over it.  */\n-      __asm__ __volatile__ (\"movaps\\t%xmm0,%xmm0\");\n-\n-      sigaction (SIGILL, &oact, NULL);\n-\n-      if (sigill_caught)\n-\treturn 0;\n-    }\n-#endif /* __sun__ && __svr4__ */\n-\n   return edx & bit_SSE;\n #else\n   return 1;"}, {"sha": "661bb7a30c1e245b6f1fe4f7634b9d231c150ec4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,3 +1,9 @@\n+2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (THREADLIBS, THREADSPEC): Remove *-*-solaris2.9\n+\thandling.\n+\t* configure: Regenerate.\n+\n 2014-03-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* include/dwarf2-signal.h: Update copyright year."}, {"sha": "afbc9967c5671573f7cd1b57aedffccce3215001", "filename": "libjava/configure", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -20772,11 +20772,6 @@ case \"$THREADS\" in\n \tTHREADLIBS='-lpthread -lrt'\n \tTHREADSPEC='-lpthread -lrt'\n \t;;\n-     *-*-solaris2.9)\n-\t# Need libthread for TLS support.\n-\tTHREADLIBS='-lpthread -lthread'\n-\tTHREADSPEC='-lpthread -lthread'\n-\t;;\n      *-*-darwin*)\n \t# Don't set THREADLIBS or THREADSPEC as Darwin already\n \t# provides pthread via libSystem."}, {"sha": "01c436d852d32e029343b98753b2ca128cb1cee0", "filename": "libjava/configure.ac", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1088,11 +1088,6 @@ case \"$THREADS\" in\n \tTHREADLIBS='-lpthread -lrt'\n \tTHREADSPEC='-lpthread -lrt'\n \t;;\n-     *-*-solaris2.9)\n-\t# Need libthread for TLS support.\n-\tTHREADLIBS='-lpthread -lthread'\n-\tTHREADSPEC='-lpthread -lthread'\n-\t;;\n      *-*-darwin*)\n \t# Don't set THREADLIBS or THREADSPEC as Darwin already\n \t# provides pthread via libSystem."}, {"sha": "ca277836a1176da4015ecf794effa4cbbc881cca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,3 +1,28 @@\n+2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.host: Remove solaris2.9 handling.\n+\tChange os_include_dir to os/solaris/solaris2.10.\n+\t* acinclude.m4 (ac_has_gthreads): Remove solaris2.9* handling.\n+\t* crossconfig.m4: Remove *-solaris2.9 handling, simplify.\n+\t* configure: Regenerate.\n+\t* config/abi/post/solaris2.9: Remove.\n+\t* config/os/solaris/solaris2.9: Rename to ...\n+\t* config/os/solaris/solaris2.10: ... this.\n+\t* config/os/solaris/solaris2.10/os_defines.h (CLOCK_MONOTONIC):\n+\tRemove.\n+\n+\t* doc/xml/manual/configure.xml (--enable-libstdcxx-threads):\n+\tRemove Solaris 9 reference.\n+\t* doc/html/manual/configure.html: Regenerate.\n+\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc:\n+\tRemove *-*-solaris2.9 xfail.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/12.cc:\n+\tLikewise.\n+\n+\t* testsuite/ext/enc_filebuf/char/13598.cc: Remove *-*-solaris2.9\n+\txfail.\n+\n 2014-04-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/functional (__is_location_invariant): Use __or_ helper."}, {"sha": "437221f3ab1d0d5525c667b5611fc4aafb2aab40", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -3523,25 +3523,7 @@ AC_DEFUN([GLIBCXX_CHECK_GTHREADS], [\n       #ifndef __GTHREADS_CXX0X\n       #error\n       #endif\n-    ], [case $target_os in\n-\t  # gthreads support breaks symbol versioning on Solaris 9 (PR\n-\t  # libstdc++/52189).\n-          solaris2.9*)\n-\t    if test x$enable_symvers = xno; then\n-\t      ac_has_gthreads=yes\n-\t    elif test x$enable_libstdcxx_threads = xyes; then\n-\t      AC_MSG_WARN([You have requested C++11 threads support, but])\n-\t      AC_MSG_WARN([this breaks symbol versioning.])\n-\t      ac_has_gthreads=yes\n-\t    else\n-\t      ac_has_gthreads=no\n-\t    fi\n-\t    ;;\n-\t  *)\n-\t    ac_has_gthreads=yes\n-\t    ;;\n-        esac],\n-       [ac_has_gthreads=no])\n+    ], [ac_has_gthreads=yes], [ac_has_gthreads=no])\n   else\n     ac_has_gthreads=no\n   fi"}, {"sha": "a1dfa30bb48655fea5a6c006e3ee95d2cdbde47e", "filename": "libstdc++-v3/config/abi/post/solaris2.9/baseline_symbols.txt", "status": "removed", "additions": 0, "deletions": 3636, "changes": 3636, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d35c5c2708d881e731a276b93caecc068f5678d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d35c5c2708d881e731a276b93caecc068f5678d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fbaseline_symbols.txt?ref=0d35c5c2708d881e731a276b93caecc068f5678d"}, {"sha": "24a218125cd9bf9d2b4034dee7cbab56a6cff6a6", "filename": "libstdc++-v3/config/abi/post/solaris2.9/sparcv9/baseline_symbols.txt", "status": "removed", "additions": 0, "deletions": 3688, "changes": 3688, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d35c5c2708d881e731a276b93caecc068f5678d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fsparcv9%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d35c5c2708d881e731a276b93caecc068f5678d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fsparcv9%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fsolaris2.9%2Fsparcv9%2Fbaseline_symbols.txt?ref=0d35c5c2708d881e731a276b93caecc068f5678d"}, {"sha": "c584feea48d66eb789cc24d65dc76d0ae945cd2f", "filename": "libstdc++-v3/config/os/solaris/solaris2.10/ctype_base.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_base.h?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_base.h"}, {"sha": "510796bc6c6d439a50c0f1d5e3f57625ae9924b6", "filename": "libstdc++-v3/config/os/solaris/solaris2.10/ctype_configure_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_configure_char.cc?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_configure_char.cc"}, {"sha": "cde022f9896c8c046ff13f0435cf3fafd4c60a5e", "filename": "libstdc++-v3/config/os/solaris/solaris2.10/ctype_inline.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fctype_inline.h?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_inline.h"}, {"sha": "2e3c96a3d59ad2169596c69e25ed3ebaac9e72aa", "filename": "libstdc++-v3/config/os/solaris/solaris2.10/os_defines.h", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.10%2Fos_defines.h?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,4 +1,4 @@\n-// Specific definitions for Solaris 9+  -*- C++ -*-\n+// Specific definitions for Solaris 10+  -*- C++ -*-\n \n // Copyright (C) 2000-2014 Free Software Foundation, Inc.\n //\n@@ -35,10 +35,5 @@\n #define __CORRECT_ISO_CPP_WCHAR_H_PROTO\n #endif\n \n-/* Solaris 9 uses the non-standard CLOCK_HIGHRES instead.  */\n-#ifndef CLOCK_MONOTONIC\n-#define CLOCK_MONOTONIC CLOCK_HIGHRES\n-#endif\n-\n #endif\n ", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.9/os_defines.h"}, {"sha": "9b842c709379d053f7aaeda5c149fed2cd2c9fd3", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 10, "deletions": 37, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -71038,8 +71038,6 @@ done\n \n     ;;\n   *-solaris*)\n-    case \"$target\" in\n-      *-solaris2.9 | *-solaris2.10)\n \n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n@@ -71179,27 +71177,21 @@ $as_echo \"$ac_ld_relro\" >&6; }\n \n \n \n-         $as_echo \"#define HAVE_MBSTATE_T 1\" >>confdefs.h\n+    $as_echo \"#define HAVE_MBSTATE_T 1\" >>confdefs.h\n \n-         $as_echo \"#define HAVE_FINITE 1\" >>confdefs.h\n+    $as_echo \"#define HAVE_FINITE 1\" >>confdefs.h\n \n-         $as_echo \"#define HAVE_FPCLASS 1\" >>confdefs.h\n+    $as_echo \"#define HAVE_FPCLASS 1\" >>confdefs.h\n \n-         # All of the dependencies for wide character support are here, so\n-         # turn it on.\n-         $as_echo \"#define _GLIBCXX_USE_WCHAR_T 1\" >>confdefs.h\n+    # All of the dependencies for wide character support are here, so\n+    # turn it on.\n+    $as_echo \"#define _GLIBCXX_USE_WCHAR_T 1\" >>confdefs.h\n \n-        ;;\n-    esac\n-    case \"$target\" in\n-      *-*-solaris2.10)\n-      # These two C99 functions are present only in Solaris >= 10\n-      $as_echo \"#define HAVE_STRTOF 1\" >>confdefs.h\n+    # These two C99 functions are present only in Solaris >= 10\n+    $as_echo \"#define HAVE_STRTOF 1\" >>confdefs.h\n \n-      $as_echo \"#define HAVE_STRTOLD 1\" >>confdefs.h\n+    $as_echo \"#define HAVE_STRTOLD 1\" >>confdefs.h\n \n-     ;;\n-    esac\n     $as_echo \"#define HAVE_ISNAN 1\" >>confdefs.h\n \n     $as_echo \"#define HAVE_ISNANF 1\" >>confdefs.h\n@@ -78671,26 +78663,7 @@ main ()\n }\n _ACEOF\n if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  case $target_os in\n-\t  # gthreads support breaks symbol versioning on Solaris 9 (PR\n-\t  # libstdc++/52189).\n-          solaris2.9*)\n-\t    if test x$enable_symvers = xno; then\n-\t      ac_has_gthreads=yes\n-\t    elif test x$enable_libstdcxx_threads = xyes; then\n-\t      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: You have requested C++11 threads support, but\" >&5\n-$as_echo \"$as_me: WARNING: You have requested C++11 threads support, but\" >&2;}\n-\t      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: this breaks symbol versioning.\" >&5\n-$as_echo \"$as_me: WARNING: this breaks symbol versioning.\" >&2;}\n-\t      ac_has_gthreads=yes\n-\t    else\n-\t      ac_has_gthreads=no\n-\t    fi\n-\t    ;;\n-\t  *)\n-\t    ac_has_gthreads=yes\n-\t    ;;\n-        esac\n+  ac_has_gthreads=yes\n else\n   ac_has_gthreads=no\n fi"}, {"sha": "dc6c977bcc4581392d737947931834001532b39a", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -301,11 +301,11 @@ case \"${host_os}\" in\n   solaris2)\n     # This too-vague configuration does not provide enough information\n     # to select a ctype include, and thus os_include_dir is a crap shoot.\n-    echo \"Please specify the full version of Solaris, ie. solaris2.9 \" 1>&2\n+    echo \"Please specify the full version of Solaris, ie. solaris2.10 \" 1>&2\n     exit 1\n     ;;\n-  solaris2.9 | solaris2.1[0-9])\n-    os_include_dir=\"os/solaris/solaris2.9\"\n+  solaris2.1[0-9])\n+    os_include_dir=\"os/solaris/solaris2.10\"\n     ;;\n   tpf)\n     os_include_dir=\"os/tpf\"\n@@ -356,10 +356,6 @@ case \"${host}\" in\n   powerpc*-*-darwin*)\n     port_specific_symbol_files=\"\\$(srcdir)/../config/os/bsd/darwin/ppc-extra.ver\"\n     ;;\n-  *-*-solaris2.9)\n-    abi_baseline_pair=solaris2.9\n-    abi_baseline_subdir_switch=--print-multi-os-directory\n-    ;;\n   *-*-solaris2.1[0-9])\n     abi_baseline_pair=solaris2.10\n     abi_baseline_subdir_switch=--print-multi-os-directory"}, {"sha": "10247f940b55ee77df940044c3889b08b51cfb4c", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -205,24 +205,16 @@ case \"${host}\" in\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n     ;;\n   *-solaris*)\n-    case \"$target\" in\n-      *-solaris2.9 | *-solaris2.10)\n-         GLIBCXX_CHECK_LINKER_FEATURES\n-         AC_DEFINE(HAVE_MBSTATE_T)\n-         AC_DEFINE(HAVE_FINITE)\n-         AC_DEFINE(HAVE_FPCLASS)\n-         # All of the dependencies for wide character support are here, so\n-         # turn it on. \n-         AC_DEFINE(_GLIBCXX_USE_WCHAR_T) \n-        ;;\n-    esac\n-    case \"$target\" in\n-      *-*-solaris2.10)\n-      # These two C99 functions are present only in Solaris >= 10\n-      AC_DEFINE(HAVE_STRTOF)\n-      AC_DEFINE(HAVE_STRTOLD)\n-     ;;\n-    esac\n+    GLIBCXX_CHECK_LINKER_FEATURES\n+    AC_DEFINE(HAVE_MBSTATE_T)\n+    AC_DEFINE(HAVE_FINITE)\n+    AC_DEFINE(HAVE_FPCLASS)\n+    # All of the dependencies for wide character support are here, so\n+    # turn it on. \n+    AC_DEFINE(_GLIBCXX_USE_WCHAR_T) \n+    # These two C99 functions are present only in Solaris >= 10\n+    AC_DEFINE(HAVE_STRTOF)\n+    AC_DEFINE(HAVE_STRTOLD)\n     AC_DEFINE(HAVE_ISNAN)\n     AC_DEFINE(HAVE_ISNANF)\n     AC_DEFINE(HAVE_MODFF)"}, {"sha": "1c0997225492517e3401f2b1389fef272fc5fc94", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -162,8 +162,7 @@\n \n  <varlistentry><term><code>--enable-libstdcxx-threads</code></term>\n  <listitem><para>Enable C++11 threads support.  If not explicitly specified,\n-        the  configure process enables it if possible.  It defaults to 'off'\n-\ton Solaris 9, where it would break symbol versioning.   This\n+        the  configure process enables it if possible.  This\n \toption can change the library ABI.\n      </para>\n  </listitem></varlistentry>"}, {"sha": "76ebbb49a7df0edc0fe63ebbd40c7e888ae544d9", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -19,10 +19,7 @@\n \n // 27.6.1.2.2 arithmetic extractors\n \n-// XXX This test fails on Solaris 9 because of a bug in libc\n-// XXX sscanf for very long input.  See:\n-// XXX http://gcc.gnu.org/ml/gcc/2002-12/msg01422.html\n-// { dg-do run { xfail { { *-*-solaris2.9 } || lax_strtofp } } }\n+// { dg-do run { xfail { lax_strtofp } } }\n \n #include <istream>\n #include <sstream>"}, {"sha": "e117e4957aed1775a20898bb8db4777c2fd7be0d", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/12.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -17,10 +17,7 @@\n \n // 27.6.1.2.2 arithmetic extractors\n \n-// XXX This test fails on Solaris 9 because of a bug in libc\n-// XXX sscanf for very long input.  See:\n-// XXX http://gcc.gnu.org/ml/gcc/2002-12/msg01422.html\n-// { dg-do run { xfail { { *-*-solaris2.9 } || lax_strtofp } } }\n+// { dg-do run { xfail { lax_strtofp } } }\n \n #include <istream>\n #include <sstream>"}, {"sha": "403fb6d176949a12f59c11ac86bfe703bb7d6347", "filename": "libstdc++-v3/testsuite/ext/enc_filebuf/char/13598.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f069ab4f645085b7d439e166b7501b9fb6ce8a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc?ref=d9f069ab4f645085b7d439e166b7501b9fb6ce8a", "patch": "@@ -1,7 +1,7 @@\n // Before Solaris 11, iconv -f ISO-8859-1 -t ISO-8859-1 fails with\n // Not supported ISO-8859-1 to ISO-8859-1\n //\n-// { dg-do run { xfail *-*-solaris2.9 *-*-solaris2.10 } }\n+// { dg-do run { xfail *-*-solaris2.10 } }\n // { dg-require-iconv \"ISO-8859-1\" }\n \n // Copyright (C) 2004-2014 Free Software Foundation, Inc."}]}