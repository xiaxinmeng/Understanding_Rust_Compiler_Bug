{"sha": "37ae92c459ceb0fa65ff4041403f918d286ece25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdhZTkyYzQ1OWNlYjBmYTY1ZmY0MDQxNDAzZjkxOGQyODZlY2UyNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-29T09:58:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-29T09:58:27Z"}, "message": "[multiple changes]\n\n2012-10-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_elab.adb: Minor reformatting and code reorganization.\n\n2012-10-29  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch4.adb (P_Primary): Warn on bad use of unary minus.\n\n2012-10-29  Robert Dewar  <dewar@adacore.com>\n\n\t* s-valuti.ads, s-valuti.adb (Bad_Value): New procedure.\n\t* s-valllu.adb, s-valwch.adb, s-valcha.adb, s-valint.adb,\n\ts-valuns.adb, s-valrea.adb, s-valboo.adb, s-valenu.adb,\n\ts-vallli.adb: Use Bad_Value everywhere.\n\n2012-10-29  Yannick Moy  <moy@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Do not suppress checks\n\tin Alfa mode.\n\nFrom-SVN: r192915", "tree": {"sha": "354f2de1a761336bda0e224a467b6aa61a899b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/354f2de1a761336bda0e224a467b6aa61a899b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37ae92c459ceb0fa65ff4041403f918d286ece25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ae92c459ceb0fa65ff4041403f918d286ece25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ae92c459ceb0fa65ff4041403f918d286ece25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ae92c459ceb0fa65ff4041403f918d286ece25/comments", "author": null, "committer": null, "parents": [{"sha": "f66369942fcc7a0c39398541e17a82fba7e0518e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66369942fcc7a0c39398541e17a82fba7e0518e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66369942fcc7a0c39398541e17a82fba7e0518e"}], "stats": {"total": 195, "additions": 107, "deletions": 88}, "files": [{"sha": "73abf151ff5233fab9626a0cbed269dd4c8799c0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -1,3 +1,23 @@\n+2012-10-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_elab.adb: Minor reformatting and code reorganization.\n+\n+2012-10-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch4.adb (P_Primary): Warn on bad use of unary minus.\n+\n+2012-10-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-valuti.ads, s-valuti.adb (Bad_Value): New procedure.\n+\t* s-valllu.adb, s-valwch.adb, s-valcha.adb, s-valint.adb,\n+\ts-valuns.adb, s-valrea.adb, s-valboo.adb, s-valenu.adb,\n+\ts-vallli.adb: Use Bad_Value everywhere.\n+\n+2012-10-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Do not suppress checks\n+\tin Alfa mode.\n+\n 2012-10-29  Yannick Moy  <moy@adacore.com>\n \n \t* checks.adb (Apply_Arithmetic_Overflow_Minimized_Eliminated):"}, {"sha": "a8eb320667aaebf5c2a476c0e750cd44eea80281", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -419,7 +419,6 @@ procedure Gnat1drv is\n       --  Set switches for formal verification mode\n \n       if Debug_Flag_Dot_FF then\n-\n          Alfa_Mode := True;\n \n          --  Set strict standard interpretation of compiler permissions\n@@ -448,15 +447,13 @@ procedure Gnat1drv is\n \n          Restrict.Restrictions.Set (No_Initialize_Scalars) := True;\n \n-         --  Suppress all language checks since they are handled implicitly by\n-         --    the formal verification backend.\n-         --  Turn off dynamic elaboration checks.\n-         --  Turn off alignment checks.\n-         --  Turn off validity checking.\n-\n-         Suppress_Options           := Suppress_All;\n-         Dynamic_Elaboration_Checks := False;\n-         Reset_Validity_Check_Options;\n+         --  Note: at this point we used to suppress various checks, but that\n+         --  is not what we want. We need the semantic processing for these\n+         --  checks (which will set flags like Do_Overflow_Check, showing the\n+         --  points at which potential checks are required semantically). We\n+         --  don't want the expansion associated with these checks, but that\n+         --  happens anyway because this expansion is simply not done in the\n+         --  Alfa version of the expander.\n \n          --  Kill debug of generated code, since it messes up sloc values\n "}, {"sha": "352feeaf86e258ea71ac587584ff3ee9386d3f86", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -2364,6 +2364,7 @@ package body Ch4 is\n \n    begin\n       --  The loop runs more than once only if misplaced pragmas are found\n+      --  or if a misplaced unary minus is skipped.\n \n       loop\n          case Token is\n@@ -2537,8 +2538,15 @@ package body Ch4 is\n                   return P_Identifier;\n                end if;\n \n+            --  Minus may well be an improper attempt at a unary minus. Give\n+            --  a message, skip the minus and keep going!\n+\n+            when Tok_Minus =>\n+               Error_Msg_SC (\"parentheses required for unary minus\");\n+               Scan; -- past minus\n+\n             --  Anything else is illegal as the first token of a primary, but\n-            --  we test for a reserved identifier so that it is treated nicely\n+            --  we test for some common errors, to improve error messages.\n \n             when others =>\n                if Is_Reserved_Identifier then"}, {"sha": "59c79ef15a98591d8e0e6458725cfe893242ba47", "filename": "gcc/ada/s-valboo.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valboo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valboo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valboo.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,7 +52,7 @@ package body System.Val_Bool is\n          return False;\n \n       else\n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       end if;\n    end Value_Boolean;\n "}, {"sha": "799145fa8936233ffab71545b25bb9630f289c00", "filename": "gcc/ada/s-valcha.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valcha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valcha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valcha.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -69,7 +69,7 @@ package body System.Val_Char is\n             return Character'Val (16#AD#);\n          end if;\n \n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       end if;\n    end Value_Character;\n "}, {"sha": "0de1a9520ee3bb09ed277a380e950a473a424b53", "filename": "gcc/ada/s-valenu.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valenu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valenu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valenu.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,6 +30,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Unchecked_Conversion;\n+\n with System.Val_Util; use System.Val_Util;\n \n package body System.Val_Enum is\n@@ -70,7 +71,7 @@ package body System.Val_Enum is\n          end if;\n       end loop;\n \n-      raise Constraint_Error;\n+      Bad_Value (Str);\n    end Value_Enumeration_8;\n \n    --------------------------\n@@ -109,7 +110,7 @@ package body System.Val_Enum is\n          end if;\n       end loop;\n \n-      raise Constraint_Error;\n+      Bad_Value (Str);\n    end Value_Enumeration_16;\n \n    --------------------------\n@@ -148,7 +149,7 @@ package body System.Val_Enum is\n          end if;\n       end loop;\n \n-      raise Constraint_Error;\n+      Bad_Value (Str);\n    end Value_Enumeration_32;\n \n end System.Val_Enum;"}, {"sha": "d77de09ef2f906ac0f24a96c79d0a7dd3b85f805", "filename": "gcc/ada/s-valint.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valint.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -58,7 +58,7 @@ package body System.Val_Int is\n \n       if Str (Ptr.all) not in '0' .. '9' then\n          Ptr.all := Start;\n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       end if;\n \n       Uval := Scan_Raw_Unsigned (Str, Ptr, Max);\n@@ -69,7 +69,7 @@ package body System.Val_Int is\n          if Minus and then Uval = Unsigned (-(Integer'First)) then\n             return Integer'First;\n          else\n-            raise Constraint_Error;\n+            Bad_Value (Str);\n          end if;\n \n       --  Negative values"}, {"sha": "035a95d0c9940724b6c426a0aa4cf3533a4e88b8", "filename": "gcc/ada/s-vallli.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-vallli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-vallli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vallli.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -58,7 +58,7 @@ package body System.Val_LLI is\n \n       if Str (Ptr.all) not in '0' .. '9' then\n          Ptr.all := Start;\n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       end if;\n \n       Uval := Scan_Raw_Long_Long_Unsigned (Str, Ptr, Max);\n@@ -71,7 +71,7 @@ package body System.Val_LLI is\n          then\n             return Long_Long_Integer'First;\n          else\n-            raise Constraint_Error;\n+            Bad_Value (Str);\n          end if;\n \n       --  Negative values"}, {"sha": "c37781fca2ef1a1604edad6b728659b62ae64d64", "filename": "gcc/ada/s-valllu.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valllu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valllu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valllu.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -207,7 +207,7 @@ package body System.Val_LLU is\n \n                if P > Max then\n                   Ptr.all := P;\n-                  raise Constraint_Error;\n+                  Bad_Value (Str);\n                end if;\n \n                --  If terminating base character, we are done with loop\n@@ -257,7 +257,7 @@ package body System.Val_LLU is\n       --  Return result, dealing with sign and overflow\n \n       if Overflow then\n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       else\n          return Uval;\n       end if;"}, {"sha": "e8debff1e4632a6cf927c64c1ad6cc0edea134f0", "filename": "gcc/ada/s-valrea.adb", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valrea.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,8 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System.Powten_Table; use System.Powten_Table;\n-with System.Val_Util;     use System.Val_Util;\n+with System.Powten_Table;  use System.Powten_Table;\n+with System.Val_Util;      use System.Val_Util;\n with System.Float_Control;\n \n package body System.Val_Real is\n@@ -82,10 +82,6 @@ package body System.Val_Real is\n       --  necessarily required in a case like this where the result is not\n       --  a machine number, but it is certainly a desirable behavior.\n \n-      procedure Bad_Based_Value;\n-      pragma No_Return (Bad_Based_Value);\n-      --  Raise exception for bad based value\n-\n       procedure Scanf;\n       --  Scans integer literal value starting at current character position.\n       --  For each digit encountered, Uval is multiplied by 10.0, and the new\n@@ -95,16 +91,6 @@ package body System.Val_Real is\n       --  return P points past the last character. On entry, the current\n       --  character is known to be a digit, so a numeral is definitely present.\n \n-      ---------------------\n-      -- Bad_Based_Value --\n-      ---------------------\n-\n-      procedure Bad_Based_Value is\n-      begin\n-         raise Constraint_Error with\n-           \"invalid based literal for 'Value\";\n-      end Bad_Based_Value;\n-\n       -----------\n       -- Scanf --\n       -----------\n@@ -194,8 +180,7 @@ package body System.Val_Real is\n       --  Any other initial character is an error\n \n       else\n-         raise Constraint_Error with\n-           \"invalid character in 'Value string\";\n+         Bad_Value (Str);\n       end if;\n \n       --  Deal with based case\n@@ -233,7 +218,7 @@ package body System.Val_Real is\n \n             loop\n                if P > Max then\n-                  Bad_Based_Value;\n+                  Bad_Value (Str);\n \n                elsif Str (P) in Digs then\n                   Digit := Character'Pos (Str (P)) - Character'Pos ('0');\n@@ -247,7 +232,7 @@ package body System.Val_Real is\n                     Character'Pos (Str (P)) - (Character'Pos ('a') - 10);\n \n                else\n-                  Bad_Based_Value;\n+                  Bad_Value (Str);\n                end if;\n \n                --  Save up trailing zeroes after the decimal point\n@@ -281,7 +266,7 @@ package body System.Val_Real is\n                P := P + 1;\n \n                if P > Max then\n-                  Bad_Based_Value;\n+                  Bad_Value (Str);\n \n                elsif Str (P) = '_' then\n                   Scan_Underscore (Str, P, Ptr, Max, True);\n@@ -296,7 +281,7 @@ package body System.Val_Real is\n                      After_Point := 1;\n \n                      if P > Max then\n-                        Bad_Based_Value;\n+                        Bad_Value (Str);\n                      end if;\n                   end if;\n \n@@ -372,7 +357,7 @@ package body System.Val_Real is\n       --  Here is where we check for a bad based number\n \n       if Bad_Base then\n-         Bad_Based_Value;\n+         Bad_Value (Str);\n \n       --  If OK, then deal with initial minus sign, note that this processing\n       --  is done even if Uval is zero, so that -0.0 is correctly interpreted."}, {"sha": "84da2b16e08f8e1c23c5ffea2c744a2985cc6abf", "filename": "gcc/ada/s-valuns.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valuns.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valuns.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuns.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -205,7 +205,7 @@ package body System.Val_Uns is\n \n                if P > Max then\n                   Ptr.all := P;\n-                  raise Constraint_Error;\n+                  Bad_Value (Str);\n                end if;\n \n                --  If terminating base character, we are done with loop\n@@ -254,7 +254,7 @@ package body System.Val_Uns is\n       --  Return result, dealing with sign and overflow\n \n       if Overflow then\n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       else\n          return Uval;\n       end if;\n@@ -277,7 +277,7 @@ package body System.Val_Uns is\n \n       if Str (Ptr.all) not in '0' .. '9' then\n          Ptr.all := Start;\n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       end if;\n \n       return Scan_Raw_Unsigned (Str, Ptr, Max);"}, {"sha": "e25f78c4501cf6c899ac204a8413927db918c27a", "filename": "gcc/ada/s-valuti.adb", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuti.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,6 +33,15 @@ with System.Case_Util; use System.Case_Util;\n \n package body System.Val_Util is\n \n+   ---------------\n+   -- Bad_Value --\n+   ---------------\n+\n+   procedure Bad_Value (S : String) is\n+   begin\n+      raise Constraint_Error with \"bad input for 'Value: \"\"\" & S & '\"';\n+   end Bad_Value;\n+\n    ----------------------\n    -- Normalize_String --\n    ----------------------\n@@ -54,7 +63,7 @@ package body System.Val_Util is\n       --  Check for case when the string contained no characters\n \n       if F > L then\n-         raise Constraint_Error;\n+         Bad_Value (S);\n       end if;\n \n       --  Scan for trailing spaces\n@@ -169,7 +178,7 @@ package body System.Val_Util is\n \n    begin\n       if P > Max then\n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       end if;\n \n       --  Scan past initial blanks\n@@ -179,7 +188,7 @@ package body System.Val_Util is\n \n          if P > Max then\n             Ptr.all := P;\n-            raise Constraint_Error;\n+            Bad_Value (Str);\n          end if;\n       end loop;\n \n@@ -192,7 +201,7 @@ package body System.Val_Util is\n \n          if P > Max then\n             Ptr.all := Start;\n-            raise Constraint_Error;\n+            Bad_Value (Str);\n          end if;\n       end if;\n \n@@ -217,7 +226,7 @@ package body System.Val_Util is\n       --  raise constraint error, with Ptr unchanged, and thus > Max.\n \n       if P > Max then\n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       end if;\n \n       --  Scan past initial blanks\n@@ -227,7 +236,7 @@ package body System.Val_Util is\n \n          if P > Max then\n             Ptr.all := P;\n-            raise Constraint_Error;\n+            Bad_Value (Str);\n          end if;\n       end loop;\n \n@@ -241,7 +250,7 @@ package body System.Val_Util is\n \n          if P > Max then\n             Ptr.all := Start;\n-            raise Constraint_Error;\n+            Bad_Value (Str);\n          end if;\n \n       --  Skip past an initial plus sign\n@@ -252,7 +261,7 @@ package body System.Val_Util is\n \n          if P > Max then\n             Ptr.all := Start;\n-            raise Constraint_Error;\n+            Bad_Value (Str);\n          end if;\n \n       else\n@@ -270,7 +279,7 @@ package body System.Val_Util is\n    begin\n       for J in P .. Str'Last loop\n          if Str (J) /= ' ' then\n-            raise Constraint_Error;\n+            Bad_Value (Str);\n          end if;\n       end loop;\n    end Scan_Trailing_Blanks;\n@@ -304,7 +313,7 @@ package body System.Val_Util is\n \n       if P > Max then\n          Ptr.all := P;\n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       end if;\n \n       --  Similarly, if no digit follows the underscore raise an error. This\n@@ -313,13 +322,12 @@ package body System.Val_Util is\n       C := Str (P);\n \n       if C in '0' .. '9'\n-        or else\n-          (Ext and then (C in 'A' .. 'F' or else C in 'a' .. 'f'))\n+        or else (Ext and then (C in 'A' .. 'F' or else C in 'a' .. 'f'))\n       then\n          return;\n       else\n          Ptr.all := P;\n-         raise Constraint_Error;\n+         Bad_Value (Str);\n       end if;\n    end Scan_Underscore;\n "}, {"sha": "ce9dc3b8ff101a663fc93170a5744ded2916c123", "filename": "gcc/ada/s-valuti.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuti.ads?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,6 +34,10 @@\n package System.Val_Util is\n    pragma Pure;\n \n+   procedure Bad_Value (S : String);\n+   pragma No_Return (Bad_Value);\n+   --  Raises constraint error with message: bad input for 'Value: \"xxx\"\n+\n    procedure Normalize_String\n      (S    : in out String;\n       F, L : out Integer);"}, {"sha": "87e85464301e9f0ae7cd1784d4427ca3b4606aaa", "filename": "gcc/ada/s-valwch.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valwch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fs-valwch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valwch.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,8 +48,7 @@ package body System.Val_WChar is\n       WV : constant Unsigned_32         := Wide_Wide_Character'Pos (WC);\n    begin\n       if WV > 16#FFFF# then\n-         raise Constraint_Error with\n-           \"out of range character for Value attribute\";\n+         Bad_Value (Str);\n       else\n          return Wide_Character'Val (WV);\n       end if;\n@@ -77,7 +76,7 @@ package body System.Val_WChar is\n          --  Must be at least three characters\n \n          if L - F < 2 then\n-            raise Constraint_Error;\n+            Bad_Value (Str);\n \n          --  If just three characters, simple character case\n \n@@ -103,7 +102,7 @@ package body System.Val_WChar is\n                   P := P + 1;\n \n                   if P = Str'Last then\n-                     raise Constraint_Error;\n+                     Bad_Value (Str);\n                   end if;\n \n                   return Str (P);\n@@ -124,7 +123,7 @@ package body System.Val_WChar is\n                end if;\n \n                if P /= L - 1 then\n-                  raise Constraint_Error;\n+                  Bad_Value (Str);\n                end if;\n \n                return W;\n@@ -150,12 +149,12 @@ package body System.Val_WChar is\n                elsif Str (J) in 'a' .. 'f' then\n                   W := W - Character'Pos ('a') + 10;\n                else\n-                  raise Constraint_Error;\n+                  Bad_Value (Str);\n                end if;\n             end loop;\n \n             if W > 16#7FFF_FFFF# then\n-               raise Constraint_Error;\n+               Bad_Value (Str);\n             else\n                return Wide_Wide_Character'Val (W);\n             end if;\n@@ -170,7 +169,7 @@ package body System.Val_WChar is\n \n    exception\n       when Constraint_Error =>\n-         raise Constraint_Error with \"invalid string for value attribute\";\n+         Bad_Value (Str);\n    end Value_Wide_Wide_Character;\n \n end System.Val_WChar;"}, {"sha": "34aa69169d1de9cf908a775557d748015bfd9061", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ae92c459ceb0fa65ff4041403f918d286ece25/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=37ae92c459ceb0fa65ff4041403f918d286ece25", "patch": "@@ -1884,18 +1884,15 @@ package body Sem_Elab is\n \n    begin\n       --  If not function or procedure call or instantiation, then ignore\n-      --  call (this happens in some error case and rewriting cases)\n+      --  call (this happens in some error cases and rewriting cases).\n \n-      if Nkind (N) /= N_Function_Call\n-           and then\n-         Nkind (N) /= N_Procedure_Call_Statement\n-           and then\n-         not Inst_Case\n+      if not Nkind_In (N, N_Function_Call, N_Procedure_Call_Statement)\n+        and then not Inst_Case\n       then\n          return;\n \n-      --  Nothing to do if this is a call or instantiation that has\n-      --  already been found to be a sure ABE\n+      --  Nothing to do if this is a call or instantiation that has already\n+      --  been found to be a sure ABE.\n \n       elsif ABE_Is_Certain (N) then\n          return;"}]}