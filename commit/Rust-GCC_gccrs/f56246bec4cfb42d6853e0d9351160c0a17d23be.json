{"sha": "f56246bec4cfb42d6853e0d9351160c0a17d23be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU2MjQ2YmVjNGNmYjQyZDY4NTNlMGQ5MzUxMTYwYzBhMTdkMjNiZQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-01-28T16:19:58Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-01-28T16:19:58Z"}, "message": "loop.c (strength_reduce): Grow set_in_loop / n_times_set / may_not_optimize to proper size when...\n\n\t* loop.c (strength_reduce): Grow set_in_loop / n_times_set /\n\tmay_not_optimize to proper size when converting biv increments\n\tinto givs.\n\tIf necessary, reallocate reg_iv_type / reg_iv_info before calling\n\trecombine_givs.\n\nFrom-SVN: r24898", "tree": {"sha": "f754f8d32f51172225165cc74a0c687a94ba9077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f754f8d32f51172225165cc74a0c687a94ba9077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f56246bec4cfb42d6853e0d9351160c0a17d23be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56246bec4cfb42d6853e0d9351160c0a17d23be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f56246bec4cfb42d6853e0d9351160c0a17d23be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56246bec4cfb42d6853e0d9351160c0a17d23be/comments", "author": null, "committer": null, "parents": [{"sha": "07b1b0304a88aa46e39208747b5438ffef317617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b1b0304a88aa46e39208747b5438ffef317617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b1b0304a88aa46e39208747b5438ffef317617"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "338352e29e2416f28cd68c3fd3f6683372adb54a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56246bec4cfb42d6853e0d9351160c0a17d23be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56246bec4cfb42d6853e0d9351160c0a17d23be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f56246bec4cfb42d6853e0d9351160c0a17d23be", "patch": "@@ -1,3 +1,11 @@\n+Fri Jan 29 00:14:55 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* loop.c (strength_reduce): Grow set_in_loop / n_times_set /\n+\tmay_not_optimize to proper size when converting biv increments\n+\tinto givs.\n+\tIf necessary, reallocate reg_iv_type / reg_iv_info before calling\n+\trecombine_givs.\n+\n Thu Jan 28 23:24:08 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* loop.c (recombine_givs): New parameter unroll_p.  If set, don't"}, {"sha": "1acbb33ab1cf72091d52fb1dff2a8b8341b312ba", "filename": "gcc/loop.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56246bec4cfb42d6853e0d9351160c0a17d23be/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56246bec4cfb42d6853e0d9351160c0a17d23be/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=f56246bec4cfb42d6853e0d9351160c0a17d23be", "patch": "@@ -4143,11 +4143,13 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t      old_reg = v->dest_reg;\n \t      dest_reg = gen_reg_rtx (v->mode);\n     \n+\t      /* Unlike reg_iv_type / reg_iv_info, the other three arrays\n+\t\t have been allocated with some slop space, so we may not\n+\t\t actually need to reallocate them.  If we do, the following\n+\t\t if statement will be executed just once in this loop.  */\n \t      if ((unsigned) max_reg_num () > n_times_set->num_elements)\n \t\t{\n-\t\t  int nregs = max_reg_before_loop + n_extra_increment;\n-    \n-\t\t  /* Grow all the arrays.  */\n+\t\t  /* Grow all the remaining arrays.  */\n \t\t  VARRAY_GROW (set_in_loop, nregs);\n \t\t  VARRAY_GROW (n_times_set, nregs);\n \t\t  VARRAY_GROW (may_not_optimize, nregs);\n@@ -4431,6 +4433,7 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n       int benefit;\n       int all_reduced;\n       rtx final_value = 0;\n+      unsigned nregs;\n \n       /* Test whether it will be possible to eliminate this biv\n \t provided all givs are reduced.  This is possible if either\n@@ -4582,7 +4585,22 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t}\n \n       /* Now that we know which givs will be reduced, try to rearrange the\n-         combinations to reduce register pressure.  */\n+         combinations to reduce register pressure.\n+         recombine_givs calls find_life_end, which needs reg_iv_type and\n+\t reg_iv_info to be valid for all pseudos.  We do the necessary\n+\t reallocation here since it allows to check if there are still\n+\t more bivs to process.  */\n+      nregs = max_reg_num ();\n+      if (nregs > reg_iv_type->num_elements)\n+\t{\n+\t  /* If there are still more bivs to process, allocate some slack\n+\t     space so that we're not constantly reallocating these arrays.  */\n+\t  if (bl->next)\n+\t    nregs += nregs / 4;\n+\t  /* Reallocate reg_iv_type and reg_iv_info.  */\n+\t  VARRAY_GROW (reg_iv_type, nregs);\n+\t  VARRAY_GROW (reg_iv_info, nregs);\n+\t}\n       recombine_givs (bl, loop_start, loop_end, unroll_p);\n \n       /* Reduce each giv that we decided to reduce.  */"}]}