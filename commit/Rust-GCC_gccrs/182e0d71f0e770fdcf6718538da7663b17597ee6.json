{"sha": "182e0d71f0e770fdcf6718538da7663b17597ee6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgyZTBkNzFmMGU3NzBmZGNmNjcxODUzOGRhNzY2M2IxNzU5N2VlNg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-11-26T17:33:23Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-11-26T17:33:23Z"}, "message": "PR 34081/C++\n\n2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR 34081/C++\n\t* c-decl.c (store_parm_decls): Pass 'false' for the new\n\tallocate_struct_function parameter.\n\t* cgraphunit.c (cgraph_build_static_cdtor): Likewise.\n\t* tree-parloops.c (create_loop_fn): Likewise.\n\t* function.c (push_function_context_to, push_struct_function,\n\tinit_function_start): Likewise.\n\t(allocate_struct_function): Add boolean parameter.\n\t* tree.h (allocate_struct_function): Add boolean parameter.\n\t* function.h (struct function): Move returns_struct and\n\treturns_pcc_struct to the end of the structure definiton.\n\n2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n        PR 34081/C++\n        * trans.c (Subprogram_Body_to_gnu, Compilation_Unit_to_gnu):\n        Pass 'false' for the new allocate_struct_function parameter.\n        * utils.c (build_function_stub): Likewise.\n\n2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR 34081/C++\n\t* decl.c (finish_method): Pass 'false' for the new\n\tallocate_struct_function parameter.\n\n2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR 34081/C++\n\t* treetree.c (tree_code_create_function_wrapup): Pass 'false' \n\tfor the new allocate_struct_function parameter.\n\n2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR 34081/C++\n\t* decl.c (start_preparsed_function): Pass \n\tprocessing_template_decl for the new allocate_struct_function\n\tparameter.\n\n2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR 34081/C++\n\t* g++.dg/template/dependent-expr6.C: New testcase.\n\nFrom-SVN: r130441", "tree": {"sha": "5355897f41e887fd0f27f37fba51dcd93a9b5fb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5355897f41e887fd0f27f37fba51dcd93a9b5fb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/182e0d71f0e770fdcf6718538da7663b17597ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182e0d71f0e770fdcf6718538da7663b17597ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/182e0d71f0e770fdcf6718538da7663b17597ee6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182e0d71f0e770fdcf6718538da7663b17597ee6/comments", "author": null, "committer": null, "parents": [{"sha": "be0c460344d0077ede335b6121785f8cda2c7224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0c460344d0077ede335b6121785f8cda2c7224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0c460344d0077ede335b6121785f8cda2c7224"}], "stats": {"total": 121, "additions": 97, "deletions": 24}, "files": [{"sha": "41aaf4b3ba84a3e8c6fea661395f4b00463941dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -1,3 +1,17 @@\n+2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR 34081/C++\n+\t* c-decl.c (store_parm_decls): Pass 'false' for the new\n+\tallocate_struct_function parameter.\n+\t* cgraphunit.c (cgraph_build_static_cdtor): Likewise.\n+\t* tree-parloops.c (create_loop_fn): Likewise.\n+\t* function.c (push_function_context_to, push_struct_function,\n+\tinit_function_start): Likewise.\n+\t(allocate_struct_function): Add boolean parameter.\n+\t* tree.h (allocate_struct_function): Add boolean parameter.\n+\t* function.h (struct function): Move returns_struct and\n+\treturns_pcc_struct to the end of the structure definiton.\n+\n 2007-11-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/34215"}, {"sha": "9ec417833d6ec84d73898485ffe5079d0c3ce521", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -1,3 +1,10 @@\n+2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+        PR 34081/C++\n+        * trans.c (Subprogram_Body_to_gnu, Compilation_Unit_to_gnu):\n+        Pass 'false' for the new allocate_struct_function parameter.\n+        * utils.c (build_function_stub): Likewise.\n+\n 2007-11-25  Richard Guenther  <rguenther@suse.de>\n \n \tutils.c (gnat_pushlevel): Use BLOCK_CHAIN."}, {"sha": "9f7ea2ea08db37af1513f4f6cabba92f377c3a4d", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -1776,7 +1776,7 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n   Sloc_to_locus (Sloc (gnat_node), &DECL_SOURCE_LOCATION (gnu_subprog_decl));\n \n   /* Initialize the information structure for the function.  */\n-  allocate_struct_function (gnu_subprog_decl);\n+  allocate_struct_function (gnu_subprog_decl, false);\n   DECL_STRUCT_FUNCTION (gnu_subprog_decl)->language\n     = GGC_CNEW (struct language_function);\n \n@@ -2914,7 +2914,7 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   push_stack (&gnu_elab_proc_stack, NULL_TREE, gnu_elab_proc_decl);\n \n   DECL_ELABORATION_PROC_P (gnu_elab_proc_decl) = 1;\n-  allocate_struct_function (gnu_elab_proc_decl);\n+  allocate_struct_function (gnu_elab_proc_decl, false);\n   Sloc_to_locus (Sloc (gnat_unit_entity), &cfun->function_end_locus);\n   set_cfun (NULL);\n "}, {"sha": "e11ce2bef1f32a9827bfecc8dbd09269085005e2", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -2983,7 +2983,7 @@ build_function_stub (tree gnu_subprog, Entity_Id gnat_subprog)\n \n   gnat_poplevel ();\n \n-  allocate_struct_function (gnu_stub_decl);\n+  allocate_struct_function (gnu_stub_decl, false);\n   end_subprog_body (gnu_body);\n }\n \f"}, {"sha": "1da57c2c998202d579cf4730d20245b1cd7c2399", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -6625,7 +6625,7 @@ store_parm_decls (void)\n   gen_aux_info_record (fndecl, 1, 0, proto);\n \n   /* Initialize the RTL code for the function.  */\n-  allocate_struct_function (fndecl);\n+  allocate_struct_function (fndecl, false);\n \n   /* Begin the statement tree for this function.  */\n   DECL_SAVED_TREE (fndecl) = push_stmt_list ();"}, {"sha": "7215f1a10f85670c4ce729196928d2bd89b4a7f2", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -1481,7 +1481,7 @@ cgraph_build_static_cdtor (char which, tree body, int priority)\n   DECL_ARTIFICIAL (resdecl) = 1;\n   DECL_RESULT (decl) = resdecl;\n \n-  allocate_struct_function (decl);\n+  allocate_struct_function (decl, false);\n \n   TREE_STATIC (decl) = 1;\n   TREE_USED (decl) = 1;"}, {"sha": "293238eab30fcebf066b0c8f6d3380c328153322", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -1,3 +1,10 @@\n+2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR 34081/C++\n+\t* decl.c (start_preparsed_function): Pass \n+\tprocessing_template_decl for the new allocate_struct_function\n+\tparameter.\n+\n 2007-11-25  Richard Guenther  <rguenther@suse.de>\n \n \tdecl.c (poplevel): Use BLOCK_CHAIN."}, {"sha": "6cbf1f142c365d693195d63a7a7f56d44bed08ba", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -11211,7 +11211,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n      CFUN set up, and our per-function variables initialized.\n      FIXME factor out the non-RTL stuff.  */\n   bl = current_binding_level;\n-  allocate_struct_function (decl1);\n+  allocate_struct_function (decl1, processing_template_decl);\n   current_binding_level = bl;\n \n   /* Even though we're inside a function body, we still don't want to"}, {"sha": "fe70cbf47acc44c00f2ffca3d1623e32fe8c6fa8", "filename": "gcc/function.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -247,7 +247,7 @@ push_function_context_to (tree context ATTRIBUTE_UNUSED)\n   struct function *p;\n \n   if (cfun == 0)\n-    allocate_struct_function (NULL);\n+    allocate_struct_function (NULL, false);\n   p = cfun;\n \n   p->outer = outer_function_chain;\n@@ -3881,10 +3881,14 @@ get_next_funcdef_no (void)\n    directly into cfun and invoke the back end hook explicitly at the\n    very end, rather than initializing a temporary and calling set_cfun\n    on it.\n-*/\n+\n+   ABSTRACT_P is true if this is a function that will never be seen by\n+   the middle-end.  Such functions are front-end concepts (like C++\n+   function templates) that do not correspond directly to functions\n+   placed in object files.  */\n \n void\n-allocate_struct_function (tree fndecl)\n+allocate_struct_function (tree fndecl, bool abstract_p)\n {\n   tree result;\n   tree fntype = fndecl ? TREE_TYPE (fndecl) : NULL_TREE;\n@@ -3910,7 +3914,7 @@ allocate_struct_function (tree fndecl)\n       cfun->decl = fndecl;\n \n       result = DECL_RESULT (fndecl);\n-      if (aggregate_value_p (result, fndecl))\n+      if (!abstract_p && aggregate_value_p (result, fndecl))\n \t{\n #ifdef PCC_STATIC_STRUCT_RETURN\n \t  current_function_returns_pcc_struct = 1;\n@@ -3943,7 +3947,7 @@ push_struct_function (tree fndecl)\n   VEC_safe_push (function_p, heap, cfun_stack, cfun);\n   if (fndecl)\n     in_system_header = DECL_IN_SYSTEM_HEADER (fndecl);\n-  allocate_struct_function (fndecl);\n+  allocate_struct_function (fndecl, false);\n }\n \n /* Reset cfun, and other non-struct-function variables to defaults as\n@@ -3998,7 +4002,7 @@ init_function_start (tree subr)\n   if (subr && DECL_STRUCT_FUNCTION (subr))\n     set_cfun (DECL_STRUCT_FUNCTION (subr));\n   else\n-    allocate_struct_function (subr);\n+    allocate_struct_function (subr, false);\n   prepare_function_start ();\n \n   /* Warn if this value is an aggregate type,"}, {"sha": "eb2a7530b9f04419681a7cde6a59ef4d13facd53", "filename": "gcc/function.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -360,14 +360,6 @@ struct function GTY(())\n      probabilities pass.  */\n   ENUM_BITFIELD (function_frequency) function_frequency : 2;\n \n-  /* Nonzero if function being compiled needs to be given an address\n-     where the value should be stored.  */\n-  unsigned int returns_struct : 1;\n-\n-  /* Nonzero if function being compiled needs to\n-     return the address of where it has put a structure value.  */\n-  unsigned int returns_pcc_struct : 1;\n-\n   /* Nonzero if function being compiled can call setjmp.  */\n   unsigned int calls_setjmp : 1;\n \n@@ -456,6 +448,17 @@ struct function GTY(())\n      function has been gimplified, so we can make sure we're not\n      creating non GIMPLE tuples after gimplification.  */\n   unsigned int gimplified : 1;\n+\n+  /* Fields below this point are not set for abstract functions; see\n+     allocate_struct_function.  */\n+\n+  /* Nonzero if function being compiled needs to be given an address\n+     where the value should be stored.  */\n+  unsigned int returns_struct : 1;\n+\n+  /* Nonzero if function being compiled needs to\n+     return the address of where it has put a structure value.  */\n+  unsigned int returns_pcc_struct : 1;\n };\n \n /* If va_list_[gf]pr_size is set to this, it means we don't know how"}, {"sha": "354a25700a64e3c8a02c22f1689549f9eb895e5c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -1,3 +1,9 @@\n+2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR 34081/C++\n+\t* decl.c (finish_method): Pass 'false' for the new\n+\tallocate_struct_function parameter.\n+\n 2007-11-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* expr.c (build_jni_stub): Use the computed jni func type for"}, {"sha": "d60af8d0e29d9925711e66d06a8bc047390e8ae8", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -1850,7 +1850,7 @@ finish_method (tree fndecl)\n   if (DECL_STRUCT_FUNCTION (fndecl))\n     set_cfun (DECL_STRUCT_FUNCTION (fndecl));\n   else\n-    allocate_struct_function (fndecl);\n+    allocate_struct_function (fndecl, false);\n #ifdef USE_MAPPED_LOCATION\n   cfun->function_end_locus = DECL_FUNCTION_LAST_LINE (fndecl);\n #else"}, {"sha": "05e3960c5d6e0de6f11975ef62efc9498257bf77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -1,3 +1,8 @@\n+2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR 34081/C++\n+\t* g++.dg/template/dependent-expr6.C: New testcase.\n+\n 2007-11-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/34215"}, {"sha": "423f1aeeceacdf969f52d4216f5142dfc8cf8c60", "filename": "gcc/testsuite/g++.dg/template/dependent-expr6.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr6.C?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+\n+// Copyright 2007 Free Software Foundation\n+// Contributed by Andreas Krebbel <Andreas.Krebbel@de.ibm.com>\n+\n+// PR C++ 34081 ICE\n+\n+class Foo;\n+\n+template < class Foo > class Bar\n+{\n+  enum Status\n+  { OK, NO };\n+\n+  enum Status getStatus ()\n+  {\n+    return status;\n+  }\n+\n+  Status status;\n+};"}, {"sha": "dafcdaa569fbe676b800f8cdc702d8daa732a5e3", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -1248,7 +1248,7 @@ create_loop_fn (void)\n   TREE_USED (t) = 1;\n   DECL_ARGUMENTS (decl) = t;\n \n-  allocate_struct_function (decl);\n+  allocate_struct_function (decl, false);\n \n   /* The call to allocate_struct_function clobbers CFUN, so we need to restore\n      it.  */"}, {"sha": "c98a921fec6a70d8a4a13f1f747cc511e756c61b", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -4936,7 +4936,7 @@ extern void expand_main_function (void);\n extern void init_dummy_function_start (void);\n extern void expand_dummy_function_end (void);\n extern unsigned int init_function_for_compilation (void);\n-extern void allocate_struct_function (tree);\n+extern void allocate_struct_function (tree, bool);\n extern void push_struct_function (tree fndecl);\n extern void init_function_start (tree);\n extern bool use_register_for_decl (const_tree);"}, {"sha": "428c37ccc8123da9e8481a8c4f482657eb04dae9", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -1,3 +1,9 @@\n+2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR 34081/C++\n+\t* treetree.c (tree_code_create_function_wrapup): Pass 'false' \n+\tfor the new allocate_struct_function parameter.\n+\n 2007-09-12  Jan Hubicka  <jh@suse.cz>\n \n \t* treetree.c (LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill."}, {"sha": "18354dc79f36c2634df131786558a29865272d08", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182e0d71f0e770fdcf6718538da7663b17597ee6/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=182e0d71f0e770fdcf6718538da7663b17597ee6", "patch": "@@ -457,7 +457,7 @@ tree_code_create_function_wrapup (location_t loc)\n                                       BLOCK_VARS (block),\n \t\t\t              stmts, block);\n \n-  allocate_struct_function (fn_decl);\n+  allocate_struct_function (fn_decl, false);\n   cfun->function_end_locus = loc;\n \n   /* Dump the original tree to a file.  */"}]}