{"sha": "c867aba0c04643ea47cec651cb270e6d09c17f28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2N2FiYTBjMDQ2NDNlYTQ3Y2VjNjUxY2IyNzBlNmQwOWMxN2YyOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-10-05T14:35:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-05T14:35:15Z"}, "message": "re PR tree-optimization/38885 (missed FRE with BIT_FIELD_REF and vectors)\n\n2011-10-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/38885\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle partial reads\n\tfrom constants.\n\n\t* gcc.dg/tree-ssa/ssa-fre-33.c: New testcase.\n\nFrom-SVN: r179556", "tree": {"sha": "3088e902d6379ea1f7ad70c2358f94e554dcb80d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3088e902d6379ea1f7ad70c2358f94e554dcb80d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c867aba0c04643ea47cec651cb270e6d09c17f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c867aba0c04643ea47cec651cb270e6d09c17f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c867aba0c04643ea47cec651cb270e6d09c17f28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c867aba0c04643ea47cec651cb270e6d09c17f28/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "484db665a35edd7c5e4112331665da4dfe57affd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484db665a35edd7c5e4112331665da4dfe57affd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484db665a35edd7c5e4112331665da4dfe57affd"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "e6bf96d9c92fe18d96ca79b9ec74bd8df4aef26d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c867aba0c04643ea47cec651cb270e6d09c17f28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c867aba0c04643ea47cec651cb270e6d09c17f28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c867aba0c04643ea47cec651cb270e6d09c17f28", "patch": "@@ -1,3 +1,9 @@\n+2011-10-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38885\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle partial reads\n+\tfrom constants.\n+\n 2011-10-05  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* doc/invoke.texi (-fshrink-wrap): Document."}, {"sha": "4a09d43266d8b245438e709ddabbfcd6f4559e91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c867aba0c04643ea47cec651cb270e6d09c17f28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c867aba0c04643ea47cec651cb270e6d09c17f28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c867aba0c04643ea47cec651cb270e6d09c17f28", "patch": "@@ -1,3 +1,8 @@\n+2011-10-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38885\n+\t* gcc.dg/tree-ssa/ssa-fre-33.c: New testcase.\n+\n 2011-10-05  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* gcc.target/i386/sw-1.c: New test."}, {"sha": "daba77d9822e9e68ce6aece186627b573a852dc5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-33.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c867aba0c04643ea47cec651cb270e6d09c17f28/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c867aba0c04643ea47cec651cb270e6d09c17f28/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-33.c?ref=c867aba0c04643ea47cec651cb270e6d09c17f28", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+\n+#define vector __attribute__((vector_size(16) ))\n+\n+struct {\n+    float i;\n+    vector float global_res;\n+} s;\n+float x;\n+int main(int argc)\n+{\n+  vector float res = (vector float){0.0f,0.0f,0.0f,1.0f};\n+  res += (vector float){1.0f,2.0f,3.0f,4.0f};\n+  s.global_res = res;\n+  x = *((float*)&s.global_res + 1);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced BIT_FIELD_REF.*with 2\" \"fre1\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "3b1ad3da269f918ccac73f3c3907714f143e17bd", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c867aba0c04643ea47cec651cb270e6d09c17f28/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c867aba0c04643ea47cec651cb270e6d09c17f28/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=c867aba0c04643ea47cec651cb270e6d09c17f28", "patch": "@@ -1442,7 +1442,54 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t}\n     }\n \n-  /* 3) For aggregate copies translate the reference through them if\n+  /* 3) Assignment from a constant.  We can use folds native encode/interpret\n+     routines to extract the assigned bits.  */\n+  else if (CHAR_BIT == 8 && BITS_PER_UNIT == 8\n+\t   && ref->size == maxsize\n+\t   && maxsize % BITS_PER_UNIT == 0\n+\t   && offset % BITS_PER_UNIT == 0\n+\t   && is_gimple_reg_type (vr->type)\n+\t   && gimple_assign_single_p (def_stmt)\n+\t   && is_gimple_min_invariant (gimple_assign_rhs1 (def_stmt)))\n+    {\n+      tree base2;\n+      HOST_WIDE_INT offset2, size2, maxsize2;\n+      base2 = get_ref_base_and_extent (gimple_assign_lhs (def_stmt),\n+\t\t\t\t       &offset2, &size2, &maxsize2);\n+      if (maxsize2 != -1\n+\t  && maxsize2 == size2\n+\t  && size2 % BITS_PER_UNIT == 0\n+\t  && offset2 % BITS_PER_UNIT == 0\n+\t  && operand_equal_p (base, base2, 0)\n+\t  && offset2 <= offset\n+\t  && offset2 + size2 >= offset + maxsize)\n+\t{\n+\t  /* We support up to 512-bit values (for V8DFmode).  */\n+\t  unsigned char buffer[64];\n+\t  int len;\n+\n+\t  len = native_encode_expr (gimple_assign_rhs1 (def_stmt),\n+\t\t\t\t    buffer, sizeof (buffer));\n+\t  if (len > 0)\n+\t    {\n+\t      tree val = native_interpret_expr (vr->type,\n+\t\t\t\t\t\tbuffer\n+\t\t\t\t\t\t+ ((offset - offset2)\n+\t\t\t\t\t\t   / BITS_PER_UNIT),\n+\t\t\t\t\t\tref->size / BITS_PER_UNIT);\n+\t      if (val)\n+\t\t{\n+\t\t  unsigned int value_id = get_or_alloc_constant_value_id (val);\n+\t\t  return vn_reference_insert_pieces\n+\t\t           (vuse, vr->set, vr->type,\n+\t\t\t    VEC_copy (vn_reference_op_s, heap, vr->operands),\n+\t\t\t    val, value_id);\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  /* 4) For aggregate copies translate the reference through them if\n      the copy kills ref.  */\n   else if (vn_walk_kind == VN_WALKREWRITE\n \t   && gimple_assign_single_p (def_stmt)\n@@ -1540,7 +1587,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n       return NULL;\n     }\n \n-  /* 4) For memcpy copies translate the reference through them if\n+  /* 5) For memcpy copies translate the reference through them if\n      the copy kills ref.  */\n   else if (vn_walk_kind == VN_WALKREWRITE\n \t   && is_gimple_reg_type (vr->type)"}]}