{"sha": "bf19cbc9cea6161f3deb63040601090828c44c53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxOWNiYzljZWE2MTYxZjNkZWI2MzA0MDYwMTA5MDgyOGM0NGM1Mw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T04:50:38Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-26T14:03:00Z"}, "message": "Adjust tree-ssa-dom.c for irange API.\n\nThis removes all uses of VR_ANTI_RANGE.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-dom.c (simplify_stmt_for_jump_threading): Abstract code out to...\n\t* tree-vrp.c (find_case_label_range): ...here.  Rewrite for to use irange\n\tAPI.\n\t(simplify_stmt_for_jump_threading): Call find_case_label_range instead of\n\tduplicating the code in simplify_stmt_for_jump_threading.\n\t* tree-vrp.h (find_case_label_range): New prototype.", "tree": {"sha": "441f6e95f636b54984609ee2b9e99c1cd2e34ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/441f6e95f636b54984609ee2b9e99c1cd2e34ee6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf19cbc9cea6161f3deb63040601090828c44c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf19cbc9cea6161f3deb63040601090828c44c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf19cbc9cea6161f3deb63040601090828c44c53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf19cbc9cea6161f3deb63040601090828c44c53/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2130efe6ac7beba72d289e3dd145daa10aeaed54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2130efe6ac7beba72d289e3dd145daa10aeaed54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2130efe6ac7beba72d289e3dd145daa10aeaed54"}], "stats": {"total": 174, "additions": 67, "deletions": 107}, "files": [{"sha": "de5025f3879b1b2d6ace448e90c727ab0cece632", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 6, "deletions": 50, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf19cbc9cea6161f3deb63040601090828c44c53/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf19cbc9cea6161f3deb63040601090828c44c53/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=bf19cbc9cea6161f3deb63040601090828c44c53", "patch": "@@ -868,7 +868,11 @@ make_pass_dominator (gcc::context *ctxt)\n static class vr_values *x_vr_values;\n \n /* A trivial wrapper so that we can present the generic jump\n-   threading code with a simple API for simplifying statements.  */\n+   threading code with a simple API for simplifying statements.\n+\n+   ?? This should be cleaned up.  There's a virtually identical copy\n+   of this function in tree-vrp.c.  */\n+\n static tree\n simplify_stmt_for_jump_threading (gimple *stmt,\n \t\t\t\t  gimple *within_stmt ATTRIBUTE_UNUSED,\n@@ -901,55 +905,7 @@ simplify_stmt_for_jump_threading (gimple *stmt,\n \treturn NULL_TREE;\n \n       const value_range_equiv *vr = x_vr_values->get_value_range (op);\n-      if (vr->undefined_p ()\n-\t  || vr->varying_p ()\n-\t  || vr->symbolic_p ())\n-\treturn NULL_TREE;\n-\n-      if (vr->kind () == VR_RANGE)\n-\t{\n-\t  size_t i, j;\n-\n-\t  find_case_label_range (switch_stmt, vr->min (), vr->max (), &i, &j);\n-\n-\t  /* Is there only one such label?  */\n-\t  if (i == j)\n-\t    {\n-\t      tree label = gimple_switch_label (switch_stmt, i);\n-\t      tree singleton;\n-\n-\t      /* The i'th label will only be taken if the value range of the\n-\t\t operand is entirely within the bounds of this label.  */\n-\t      if (CASE_HIGH (label) != NULL_TREE\n-\t\t  ? (tree_int_cst_compare (CASE_LOW (label), vr->min ()) <= 0\n-\t\t     && tree_int_cst_compare (CASE_HIGH (label), vr->max ()) >= 0)\n-\t\t  : (vr->singleton_p (&singleton)\n-\t\t     && tree_int_cst_equal (CASE_LOW (label), singleton)))\n-\t\treturn label;\n-\t    }\n-\n-\t  /* If there are no such labels, then the default label\n-\t     will be taken.  */\n-\t  if (i > j)\n-\t    return gimple_switch_label (switch_stmt, 0);\n-\t}\n-\n-      if (vr->kind () == VR_ANTI_RANGE)\n-          {\n-            unsigned n = gimple_switch_num_labels (switch_stmt);\n-            tree min_label = gimple_switch_label (switch_stmt, 1);\n-            tree max_label = gimple_switch_label (switch_stmt, n - 1);\n-\n-            /* The default label will be taken only if the anti-range of the\n-               operand is entirely outside the bounds of all the (non-default)\n-               case labels.  */\n-            if (tree_int_cst_compare (vr->min (), CASE_LOW (min_label)) <= 0\n-                && (CASE_HIGH (max_label) != NULL_TREE\n-                    ? tree_int_cst_compare (vr->max (), CASE_HIGH (max_label)) >= 0\n-                    : tree_int_cst_compare (vr->max (), CASE_LOW (max_label)) >= 0))\n-            return gimple_switch_label (switch_stmt, 0);\n-          }\n-\treturn NULL_TREE;\n+      return find_case_label_range (switch_stmt, vr);\n     }\n \n   if (gassign *assign_stmt = dyn_cast <gassign *> (stmt))"}, {"sha": "8c1a1854daafe722785b0b05f8e02bd2bbf205ec", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 60, "deletions": 57, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf19cbc9cea6161f3deb63040601090828c44c53/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf19cbc9cea6161f3deb63040601090828c44c53/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=bf19cbc9cea6161f3deb63040601090828c44c53", "patch": "@@ -3802,6 +3802,61 @@ find_case_label_range (gswitch *stmt, tree min, tree max, size_t *min_idx,\n     }\n }\n \n+/* Given a SWITCH_STMT, return the case label that encompasses the\n+   known possible values for the switch operand.  RANGE_OF_OP is a\n+   range for the known values of the switch operand.  */\n+\n+tree\n+find_case_label_range (gswitch *switch_stmt, const irange *range_of_op)\n+{\n+  if (range_of_op->undefined_p ()\n+      || range_of_op->varying_p ()\n+      || range_of_op->symbolic_p ())\n+    return NULL_TREE;\n+\n+  size_t i, j;\n+  tree op = gimple_switch_index (switch_stmt);\n+  tree type = TREE_TYPE (op);\n+  tree tmin = wide_int_to_tree (type, range_of_op->lower_bound ());\n+  tree tmax = wide_int_to_tree (type, range_of_op->upper_bound ());\n+  find_case_label_range (switch_stmt, tmin, tmax, &i, &j);\n+  if (i == j)\n+    {\n+      /* Look for exactly one label that encompasses the range of\n+\t the operand.  */\n+      tree label = gimple_switch_label (switch_stmt, i);\n+      tree case_high\n+\t= CASE_HIGH (label) ? CASE_HIGH (label) : CASE_LOW (label);\n+      widest_irange label_range (CASE_LOW (label), case_high);\n+      label_range.intersect (range_of_op);\n+      if (label_range == *range_of_op)\n+\treturn label;\n+    }\n+  else if (i > j)\n+    {\n+      /* If there are no labels at all, take the default.  */\n+      return gimple_switch_label (switch_stmt, 0);\n+    }\n+  else\n+    {\n+      /* Otherwise, there are various labels that can encompass\n+\t the range of operand.  In which case, see if the range of\n+\t the operand is entirely *outside* the bounds of all the\n+\t (non-default) case labels.  If so, take the default.  */\n+      unsigned n = gimple_switch_num_labels (switch_stmt);\n+      tree min_label = gimple_switch_label (switch_stmt, 1);\n+      tree max_label = gimple_switch_label (switch_stmt, n - 1);\n+      tree case_high = CASE_HIGH (max_label);\n+      if (!case_high)\n+\tcase_high = CASE_LOW (max_label);\n+      widest_irange label_range (CASE_LOW (min_label), case_high);\n+      label_range.intersect (range_of_op);\n+      if (label_range.undefined_p ())\n+\treturn gimple_switch_label (switch_stmt, 0);\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Evaluate statement STMT.  If the statement produces a useful range,\n    return SSA_PROP_INTERESTING and record the SSA name with the\n    interesting range into *OUTPUT_P.\n@@ -4088,7 +4143,10 @@ static class vr_values *x_vr_values;\n /* A trivial wrapper so that we can present the generic jump threading\n    code with a simple API for simplifying statements.  STMT is the\n    statement we want to simplify, WITHIN_STMT provides the location\n-   for any overflow warnings.  */\n+   for any overflow warnings.\n+\n+   ?? This should be cleaned up.  There's a virtually identical copy\n+   of this function in tree-ssa-dom.c.  */\n \n static tree\n simplify_stmt_for_jump_threading (gimple *stmt, gimple *within_stmt,\n@@ -4114,9 +4172,6 @@ simplify_stmt_for_jump_threading (gimple *stmt, gimple *within_stmt,\n \t\t\t\t\t\t  op0, op1, within_stmt);\n     }\n \n-  /* We simplify a switch statement by trying to determine which case label\n-     will be taken.  If we are successful then we return the corresponding\n-     CASE_LABEL_EXPR.  */\n   if (gswitch *switch_stmt = dyn_cast <gswitch *> (stmt))\n     {\n       tree op = gimple_switch_index (switch_stmt);\n@@ -4126,59 +4181,7 @@ simplify_stmt_for_jump_threading (gimple *stmt, gimple *within_stmt,\n       op = lhs_of_dominating_assert (op, bb, stmt);\n \n       const value_range_equiv *vr = vr_values->get_value_range (op);\n-      if (vr->undefined_p ()\n-\t  || vr->varying_p ()\n-\t  || vr->symbolic_p ())\n-\treturn NULL_TREE;\n-\n-      if (vr->kind () == VR_RANGE)\n-\t{\n-\t  size_t i, j;\n-\t  /* Get the range of labels that contain a part of the operand's\n-\t     value range.  */\n-\t  find_case_label_range (switch_stmt, vr->min (), vr->max (), &i, &j);\n-\n-\t  /* Is there only one such label?  */\n-\t  if (i == j)\n-\t    {\n-\t      tree label = gimple_switch_label (switch_stmt, i);\n-\n-\t      /* The i'th label will be taken only if the value range of the\n-\t\t operand is entirely within the bounds of this label.  */\n-\t      if (CASE_HIGH (label) != NULL_TREE\n-\t\t  ? (tree_int_cst_compare (CASE_LOW (label), vr->min ()) <= 0\n-\t\t     && tree_int_cst_compare (CASE_HIGH (label),\n-\t\t\t\t\t      vr->max ()) >= 0)\n-\t\t  : (tree_int_cst_equal (CASE_LOW (label), vr->min ())\n-\t\t     && tree_int_cst_equal (vr->min (), vr->max ())))\n-\t\treturn label;\n-\t    }\n-\n-\t  /* If there are no such labels then the default label will be\n-\t     taken.  */\n-\t  if (i > j)\n-\t    return gimple_switch_label (switch_stmt, 0);\n-\t}\n-\n-      if (vr->kind () == VR_ANTI_RANGE)\n-\t{\n-\t  unsigned n = gimple_switch_num_labels (switch_stmt);\n-\t  tree min_label = gimple_switch_label (switch_stmt, 1);\n-\t  tree max_label = gimple_switch_label (switch_stmt, n - 1);\n-\n-\t  /* The default label will be taken only if the anti-range of the\n-\t     operand is entirely outside the bounds of all the (non-default)\n-\t     case labels.  */\n-\t  if (tree_int_cst_compare (vr->min (), CASE_LOW (min_label)) <= 0\n-\t      && (CASE_HIGH (max_label) != NULL_TREE\n-\t\t  ? tree_int_cst_compare (vr->max (),\n-\t\t\t\t\t  CASE_HIGH (max_label)) >= 0\n-\t\t  : tree_int_cst_compare (vr->max (),\n-\t\t\t\t\t  CASE_LOW (max_label)) >= 0))\n-\t  return gimple_switch_label (switch_stmt, 0);\n-\t}\n-\n-      return NULL_TREE;\n+      return find_case_label_range (switch_stmt, vr);\n     }\n \n   if (gassign *assign_stmt = dyn_cast <gassign *> (stmt))"}, {"sha": "eadfd71e1b978756836cca34c9f5af2b3607b3f7", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf19cbc9cea6161f3deb63040601090828c44c53/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf19cbc9cea6161f3deb63040601090828c44c53/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=bf19cbc9cea6161f3deb63040601090828c44c53", "patch": "@@ -57,6 +57,7 @@ extern enum value_range_kind intersect_range_with_nonzero_bits\n   (enum value_range_kind, wide_int *, wide_int *, const wide_int &, signop);\n \n extern bool find_case_label_range (gswitch *, tree, tree, size_t *, size_t *);\n+extern tree find_case_label_range (gswitch *, const irange *vr);\n extern bool find_case_label_index (gswitch *, size_t, tree, size_t *);\n extern bool overflow_comparison_p (tree_code, tree, tree, bool, tree *);\n extern tree get_single_symbol (tree, bool *, tree *);"}]}