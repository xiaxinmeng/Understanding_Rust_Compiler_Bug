{"sha": "2ba08201d78ae1882da2fcee0e8ebb0d2a069152", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJhMDgyMDFkNzhhZTE4ODJkYTJmY2VlMGU4ZWJiMGQyYTA2OTE1Mg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-10-24T10:45:19Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-10-24T10:45:19Z"}, "message": "h8300.h (EIGHTBIT_CONSTANT_ADDRESS_P): Make it 64-bit safe.\n\n\t* config/h8300/h8300.h (EIGHTBIT_CONSTANT_ADDRESS_P): Make it\n\t64-bit safe.\n\t(TINY_CONSTANT_ADDRESS_P): Likewise.\n\nFrom-SVN: r58492", "tree": {"sha": "121c4d11fb307ce9d67886d719b2efe84feb1df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/121c4d11fb307ce9d67886d719b2efe84feb1df8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ba08201d78ae1882da2fcee0e8ebb0d2a069152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba08201d78ae1882da2fcee0e8ebb0d2a069152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba08201d78ae1882da2fcee0e8ebb0d2a069152", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba08201d78ae1882da2fcee0e8ebb0d2a069152/comments", "author": null, "committer": null, "parents": [{"sha": "5f13cfc6176adc33d11114023cc41b5e61e6b250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f13cfc6176adc33d11114023cc41b5e61e6b250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f13cfc6176adc33d11114023cc41b5e61e6b250"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "59b5457190123b0b0b8241bc77ecebb9803007f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba08201d78ae1882da2fcee0e8ebb0d2a069152/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba08201d78ae1882da2fcee0e8ebb0d2a069152/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ba08201d78ae1882da2fcee0e8ebb0d2a069152", "patch": "@@ -1,3 +1,9 @@\n+2002-10-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.h (EIGHTBIT_CONSTANT_ADDRESS_P): Make it\n+\t64-bit safe.\n+\t(TINY_CONSTANT_ADDRESS_P): Likewise.\n+\n 2002-10-24  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK): True."}, {"sha": "38b7af795c2aed7401a221ea58e26b19b4559a77", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba08201d78ae1882da2fcee0e8ebb0d2a069152/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba08201d78ae1882da2fcee0e8ebb0d2a069152/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=2ba08201d78ae1882da2fcee0e8ebb0d2a069152", "patch": "@@ -825,23 +825,27 @@ struct cum_arg\n /* Nonzero if X is a constant address suitable as an 8-bit absolute,\n    which is a special case of the 'R' operand.  */\n \n-#define EIGHTBIT_CONSTANT_ADDRESS_P(X)\t\t\t\t\t\t\\\n-  ((GET_CODE (X) == CONST_INT)\t\t\t\t\t\t\t\\\n-   && ((TARGET_H8300 && IN_RANGE (INTVAL (X) & 0xffff, 0xff00, 0xffff))\t\t\\\n-       || (TARGET_H8300H && IN_RANGE (INTVAL (X), 0xffff00, 0xffffff))\t\t\\\n-       || (TARGET_H8300S && IN_RANGE (INTVAL (X), 0xffffff00, 0xffffffff))))\n+#define EIGHTBIT_CONSTANT_ADDRESS_P(X)\t\t\t\t\t\\\n+  ((GET_CODE (X) == CONST_INT)\t\t\t\t\t\t\\\n+   && ((TARGET_H8300 && IN_RANGE (INTVAL (X) & 0xffff, 0xff00, 0xffff))\t\\\n+       || (TARGET_H8300H && IN_RANGE (INTVAL (X) & 0xffffffff,\t\t\\\n+\t\t\t\t      0xffff00, 0xffffff))\t\t\\\n+       || (TARGET_H8300S && IN_RANGE (INTVAL (X) & 0xffffffff,\t\t\\\n+\t\t\t\t      0xffffff00, 0xffffffff))))\n \n /* Nonzero if X is a constant address suitable as an 16-bit absolute\n    on H8/300H and H8S.  */\n \n #define TINY_CONSTANT_ADDRESS_P(X)\t\t\t\t\t\\\n   ((GET_CODE (X) == CONST_INT)\t\t\t\t\t\t\\\n    && ((TARGET_H8300H\t\t\t\t\t\t\t\\\n-\t&& (IN_RANGE (INTVAL (X), 0x000000, 0x007fff)\t\t\t\\\n-\t    || IN_RANGE (INTVAL (X), 0xff8000, 0xffffff)))\t\t\\\n+\t&& (IN_RANGE (INTVAL (X) & 0xffffffff, 0x000000, 0x007fff)\t\\\n+\t    || IN_RANGE (INTVAL (X) & 0xffffffff, 0xff8000, 0xffffff)))\t\\\n        || (TARGET_H8300S\t\t\t\t\t\t\\\n-\t   && (IN_RANGE (INTVAL (X), 0x00000000, 0x00007fff)\t\t\\\n-\t       || IN_RANGE (INTVAL (X), 0xffff8000, 0xffffffff)))))\n+\t   && (IN_RANGE (INTVAL (X) & 0xffffffff,\t\t\t\\\n+\t\t\t 0x00000000, 0x00007fff)\t\t\t\\\n+\t       || IN_RANGE (INTVAL (X) & 0xffffffff,\t\t\t\\\n+\t\t\t    0xffff8000, 0xffffffff)))))\n \n /* 'U' if valid for a bset destination;\n    i.e. a register, register indirect, or the eightbit memory region"}]}