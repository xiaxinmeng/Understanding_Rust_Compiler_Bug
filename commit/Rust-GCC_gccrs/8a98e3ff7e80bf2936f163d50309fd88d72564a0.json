{"sha": "8a98e3ff7e80bf2936f163d50309fd88d72564a0", "node_id": "C_kwDOANBUbNoAKDhhOThlM2ZmN2U4MGJmMjkzNmYxNjNkNTAzMDlmZDg4ZDcyNTY0YTA", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-04T21:08:08Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-04T21:08:08Z"}, "message": "c++: ICE during aggr CTAD for member tmpl [PR105476]\n\nHere we're crashing from maybe_aggr_guide ultimately because\nprocessing_template_decl isn't set when partially instantiating the\nguide's parameter list; this causes us to force completion of the\ndependent type Visitor_functior<Fn>, which of course fails and results\nin an unexpected error_mark_node (the instantation should always succeed).\n\n\tPR c++/105476\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (maybe_aggr_guide): Set processing_template_decl when\n\tpartially instantiating the guide's parameter list.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/class-deduction-aggr13.C: New test.\n\t* g++.dg/cpp2a/class-deduction-aggr13a.C: New test.", "tree": {"sha": "ef4eb4a80f638857f2e3e3e62fe8a3eeabc6d1a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef4eb4a80f638857f2e3e3e62fe8a3eeabc6d1a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a98e3ff7e80bf2936f163d50309fd88d72564a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a98e3ff7e80bf2936f163d50309fd88d72564a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a98e3ff7e80bf2936f163d50309fd88d72564a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a98e3ff7e80bf2936f163d50309fd88d72564a0/comments", "author": null, "committer": null, "parents": [{"sha": "1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "2bec47dc2956c0af4055fb411d15c1beed6d827c", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a98e3ff7e80bf2936f163d50309fd88d72564a0/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a98e3ff7e80bf2936f163d50309fd88d72564a0/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=8a98e3ff7e80bf2936f163d50309fd88d72564a0", "patch": "@@ -29569,7 +29569,11 @@ maybe_aggr_guide (tree tmpl, tree init, vec<tree,va_gc> *args)\n \t PARMS, so that its template level is properly reduced and we don't get\n \t mismatches when deducing types using the guide with PARMS.  */\n       if (member_template_p)\n-\tparms = tsubst (parms, DECL_TI_ARGS (tmpl), complain, init);\n+\t{\n+\t  ++processing_template_decl;\n+\t  parms = tsubst (parms, DECL_TI_ARGS (tmpl), complain, init);\n+\t  --processing_template_decl;\n+\t}\n     }\n   else if (TREE_CODE (init) == TREE_LIST)\n     {"}, {"sha": "d3b21c722c88122cdc3a2319968b03ff973609c0", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-aggr13.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a98e3ff7e80bf2936f163d50309fd88d72564a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a98e3ff7e80bf2936f163d50309fd88d72564a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr13.C?ref=8a98e3ff7e80bf2936f163d50309fd88d72564a0", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/105476\n+// { dg-do compile { target c++17 } }\n+\n+template<class> struct Visitor_functor;\n+\n+template<class> struct Events {\n+  template<class... Fn> struct Visitor : Visitor_functor<Fn>::type_t... { };\n+};\n+\n+using ev_t = Events<int>;\n+ev_t::Visitor v = { {} }; // { dg-error \"too many initializers\" }"}, {"sha": "69ae5dd4b60cc5ab17920219ab0d56a1d038de65", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-aggr13a.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a98e3ff7e80bf2936f163d50309fd88d72564a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr13a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a98e3ff7e80bf2936f163d50309fd88d72564a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr13a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr13a.C?ref=8a98e3ff7e80bf2936f163d50309fd88d72564a0", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/105476\n+// { dg-do compile { target c++20 } }\n+// A valid version of class-deduction-aggr13.C.\n+\n+template<class> struct Visitor_functor;\n+\n+template<> struct Visitor_functor<int> {\n+  using type_t = int;\n+};\n+\n+template<class T> struct Events {\n+  template<class Fn=T> struct Visitor {\n+    Visitor_functor<Fn>::type_t t;\n+  };\n+};\n+\n+using ev_t = Events<int>;\n+ev_t::Visitor v = { {} };"}]}