{"sha": "83ecd27e96299f3cbcf0421151884d3ea0a31b4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNlY2QyN2U5NjI5OWYzY2JjZjA0MjExNTE4ODRkM2VhMGEzMWI0YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-03-03T00:09:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-03T00:09:22Z"}, "message": "cpplib.h (CPP_PEDANTIC): Only true if system_header_p is not set for the buffer.\n\n        * cpplib.h (CPP_PEDANTIC): Only true if system_header_p is not set\n        for the buffer.\n        (SET_CPP_PEDANTIC): New macro.\n        * cpplib.c (do_include): Don't bother checking system_header_p.\n        (do_warning, do_ident, do_assert, do_unassert): Likewise.\n\nFrom-SVN: r32299", "tree": {"sha": "6ae7469aecef9b478b6f1cf73428e74a1fc25072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ae7469aecef9b478b6f1cf73428e74a1fc25072"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83ecd27e96299f3cbcf0421151884d3ea0a31b4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ecd27e96299f3cbcf0421151884d3ea0a31b4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ecd27e96299f3cbcf0421151884d3ea0a31b4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ecd27e96299f3cbcf0421151884d3ea0a31b4a/comments", "author": null, "committer": null, "parents": [{"sha": "3b18cdf955773fdf277d7ac5c571de1c6bc9cb0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b18cdf955773fdf277d7ac5c571de1c6bc9cb0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b18cdf955773fdf277d7ac5c571de1c6bc9cb0b"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "799ca9e4fdbe6bf40da1a2f19b02cce600714216", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ecd27e96299f3cbcf0421151884d3ea0a31b4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ecd27e96299f3cbcf0421151884d3ea0a31b4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83ecd27e96299f3cbcf0421151884d3ea0a31b4a", "patch": "@@ -1,5 +1,11 @@\n 2000-03-02  Jason Merrill  <jason@casey.cygnus.com>\n \n+\t* cpplib.h (CPP_PEDANTIC): Only true if system_header_p is not set\n+\tfor the buffer.\n+\t(SET_CPP_PEDANTIC): New macro.\n+\t* cpplib.c (do_include): Don't bother checking system_header_p.\n+\t(do_warning, do_ident, do_assert, do_unassert): Likewise.\n+\n \t* function.h (struct expr_status): Add x_arg_space_so_far.\n \t(arg_space_so_far): New macro.\n \t* expr.c (init_expr): Initialize it."}, {"sha": "96f2ca998e9af9a2a61fa9d02f09f336340bae38", "filename": "gcc/cpplib.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ecd27e96299f3cbcf0421151884d3ea0a31b4a/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ecd27e96299f3cbcf0421151884d3ea0a31b4a/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=83ecd27e96299f3cbcf0421151884d3ea0a31b4a", "patch": "@@ -1068,7 +1068,7 @@ do_include (pfile, keyword)\n \n   int fd;\n \n-  if (CPP_PEDANTIC (pfile) && !CPP_BUFFER (pfile)->system_header_p)\n+  if (CPP_PEDANTIC (pfile))\n     {\n       if (importing)\n \tcpp_pedwarn (pfile, \"ANSI C does not allow `#import'\");\n@@ -1555,7 +1555,7 @@ do_warning (pfile, keyword)\n   skip_rest_of_line (pfile);\n   limit = CPP_BUFFER (pfile)->cur;\n \n-  if (CPP_PEDANTIC (pfile) && !CPP_BUFFER (pfile)->system_header_p)\n+  if (CPP_PEDANTIC (pfile))\n     cpp_pedwarn (pfile, \"ANSI C does not allow `#warning'\");\n \n   cpp_warning (pfile, \"#warning %.*s\", (int)(limit - text), text);\n@@ -1572,7 +1572,7 @@ do_ident (pfile, keyword)\n   long old_written = CPP_WRITTEN (pfile);\n \n   /* Allow #ident in system headers, since that's not user's fault.  */\n-  if (CPP_PEDANTIC (pfile) && !CPP_BUFFER (pfile)->system_header_p)\n+  if (CPP_PEDANTIC (pfile))\n     cpp_pedwarn (pfile, \"ANSI C does not allow `#ident'\");\n \n   CPP_PUTS (pfile, \"#ident \", 7);\n@@ -2292,7 +2292,7 @@ validate_else (pfile, directive)\n      cpp_reader *pfile;\n      const char *directive;\n {\n-  if (! CPP_PEDANTIC (pfile) || CPP_BUFFER (pfile)->system_header_p)\n+  if (! CPP_PEDANTIC (pfile))\n     return;\n \n   cpp_skip_hspace (pfile);\n@@ -3060,8 +3060,7 @@ do_assert (pfile, keyword)\n   HASHNODE *base, *this;\n   int baselen, thislen;\n \n-  if (CPP_PEDANTIC (pfile) && CPP_OPTIONS (pfile)->done_initializing\n-      && !CPP_BUFFER (pfile)->system_header_p)\n+  if (CPP_PEDANTIC (pfile) && CPP_OPTIONS (pfile)->done_initializing)\n     cpp_pedwarn (pfile, \"ANSI C does not allow `#assert'\");\n \n   cpp_skip_hspace (pfile);\n@@ -3125,8 +3124,7 @@ do_unassert (pfile, keyword)\n   long baselen, thislen;\n   HASHNODE *base, *this, *next;\n   \n-  if (CPP_PEDANTIC (pfile) && CPP_OPTIONS (pfile)->done_initializing\n-      && !CPP_BUFFER (pfile)->system_header_p)\n+  if (CPP_PEDANTIC (pfile) && CPP_OPTIONS (pfile)->done_initializing)\n     cpp_pedwarn (pfile, \"ANSI C does not allow `#unassert'\");\n \n   cpp_skip_hspace (pfile);"}, {"sha": "5a69064324bc8aa7ceb003863c4aaa92dc1fbe38", "filename": "gcc/cpplib.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ecd27e96299f3cbcf0421151884d3ea0a31b4a/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ecd27e96299f3cbcf0421151884d3ea0a31b4a/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=83ecd27e96299f3cbcf0421151884d3ea0a31b4a", "patch": "@@ -508,10 +508,14 @@ struct cpp_options {\n #define CPP_TRADITIONAL(PFILE) (CPP_OPTIONS(PFILE)-> traditional)\n #define CPP_WARN_UNDEF(PFILE) (CPP_OPTIONS(PFILE)->warn_undef)\n #define CPP_C89(PFILE) (CPP_OPTIONS(PFILE)->c89)\n-#define CPP_PEDANTIC(PFILE) (CPP_OPTIONS (PFILE)->pedantic)\n #define CPP_PREPROCESSED(PFILE) (CPP_OPTIONS (PFILE)->preprocessed)\n #define CPP_PRINT_DEPS(PFILE) (CPP_OPTIONS (PFILE)->print_deps)\n \n+#define CPP_PEDANTIC(PFILE) \\\n+  (CPP_OPTIONS (PFILE)->pedantic && !CPP_BUFFER (pfile)->system_header_p)\n+\n+#define SET_CPP_PEDANTIC(PFILE) (CPP_OPTIONS (PFILE)->pedantic = 1)\n+\n /* List of directories to look for include files in. */\n struct file_name_list\n {"}]}