{"sha": "41676a36a04d5ef86012195d84830df191ee6790", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2NzZhMzZhMDRkNWVmODYwMTIxOTVkODQ4MzBkZjE5MWVlNjc5MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-01T19:44:34Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-01T19:47:32Z"}, "message": "C++ Module keywords\n\nThis adds the module keywords.  These are special internal tokens\ngenerated by the preprocessor's module-control-line token peeking\nlogic.  Spelling them with a space means that they turn back into\nregular tokens in preprocessor output (but do skew the column\nnumbering :()\n\n\tgcc/c-family/\n\t* c-common.c (module, import, export): New internal tokens (with\n\ttrailing space).\n\t* c-common.h (RID__MODULE, RID__IMPORT & RID__EXPORT): Enumerate\n\tthem.\n\t(D_CXX_MODULES, D_CXX_MODULES_FLAGS): Enable them.\n\t* c-cppbuiltin.c (c_cpp_builtins): Feature macro.\n\tgcc/cp/\n\t* lex.c (init_reswords): Maybe enable module keywords.", "tree": {"sha": "c76e3047ed1adb2472ccc0bf119b43d51b3e5c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c76e3047ed1adb2472ccc0bf119b43d51b3e5c96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41676a36a04d5ef86012195d84830df191ee6790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41676a36a04d5ef86012195d84830df191ee6790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41676a36a04d5ef86012195d84830df191ee6790", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41676a36a04d5ef86012195d84830df191ee6790/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e3603e62ac3a811e0a1032821b8d045b020a9c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3603e62ac3a811e0a1032821b8d045b020a9c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e3603e62ac3a811e0a1032821b8d045b020a9c1"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "cae883b530974aaf9a9951ce880c1a56272f13e8", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41676a36a04d5ef86012195d84830df191ee6790/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41676a36a04d5ef86012195d84830df191ee6790/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=41676a36a04d5ef86012195d84830df191ee6790", "patch": "@@ -540,6 +540,12 @@ const struct c_common_resword c_common_reswords[] =\n   { \"concept\",\t\tRID_CONCEPT,\tD_CXX_CONCEPTS_FLAGS | D_CXXWARN },\n   { \"requires\", \tRID_REQUIRES,\tD_CXX_CONCEPTS_FLAGS | D_CXXWARN },\n \n+  /* Modules-related keywords, these are internal unspellable tokens,\n+     created by the preprocessor.  */\n+  { \"module \",\t\tRID__MODULE,\tD_CXX_MODULES_FLAGS | D_CXXWARN },\n+  { \"import \",\t\tRID__IMPORT,\tD_CXX_MODULES_FLAGS | D_CXXWARN },\n+  { \"export \",\t\tRID__EXPORT,\tD_CXX_MODULES_FLAGS | D_CXXWARN },\n+\n   /* Coroutines-related keywords */\n   { \"co_await\",\t\tRID_CO_AWAIT,\tD_CXX_COROUTINES_FLAGS | D_CXXWARN },\n   { \"co_yield\",\t\tRID_CO_YIELD,\tD_CXX_COROUTINES_FLAGS | D_CXXWARN },"}, {"sha": "8c17067e63c7ef23b2b227ad9c57fed13eee2744", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41676a36a04d5ef86012195d84830df191ee6790/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41676a36a04d5ef86012195d84830df191ee6790/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=41676a36a04d5ef86012195d84830df191ee6790", "patch": "@@ -195,6 +195,9 @@ enum rid\n   /* C++ concepts */\n   RID_CONCEPT, RID_REQUIRES,\n \n+  /* C++ modules.  */\n+  RID__MODULE, RID__IMPORT, RID__EXPORT, /* Internal tokens.  */\n+\n   /* C++ coroutines */\n   RID_CO_AWAIT, RID_CO_YIELD, RID_CO_RETURN,\n \n@@ -449,9 +452,11 @@ extern machine_mode c_default_pointer_mode;\n #define D_CXX_CHAR8_T\t0X1000\t/* In C++, only with -fchar8_t.  */\n #define D_CXX20\t\t0x2000  /* In C++, C++20 only.  */\n #define D_CXX_COROUTINES 0x4000  /* In C++, only with coroutines.  */\n+#define D_CXX_MODULES\t0x8000  /* In C++, only with modules.  */\n \n #define D_CXX_CONCEPTS_FLAGS D_CXXONLY | D_CXX_CONCEPTS\n #define D_CXX_CHAR8_T_FLAGS D_CXXONLY | D_CXX_CHAR8_T\n+#define D_CXX_MODULES_FLAGS (D_CXXONLY | D_CXX_MODULES)\n #define D_CXX_COROUTINES_FLAGS (D_CXXONLY | D_CXX_COROUTINES)\n \n /* The reserved keyword table.  */"}, {"sha": "41914f64874a21012513bfbc047e2f9d1bafe51c", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41676a36a04d5ef86012195d84830df191ee6790/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41676a36a04d5ef86012195d84830df191ee6790/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=41676a36a04d5ef86012195d84830df191ee6790", "patch": "@@ -1025,6 +1025,10 @@ c_cpp_builtins (cpp_reader *pfile)\n           else\n             cpp_define (pfile, \"__cpp_concepts=201507L\");\n         }\n+      if (flag_modules)\n+\t/* The std-defined value is 201907L, but I don't think we can\n+\t   claim victory yet.  201810 is the p1103 date. */\n+\tcpp_define (pfile, \"__cpp_modules=201810L\");\n       if (flag_coroutines)\n \tcpp_define (pfile, \"__cpp_impl_coroutine=201902L\"); /* n4861, DIS */\n       if (flag_tm)"}, {"sha": "21e33d69c089fd5bb3c90d4ea50cc1da5bfb823a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41676a36a04d5ef86012195d84830df191ee6790/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41676a36a04d5ef86012195d84830df191ee6790/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=41676a36a04d5ef86012195d84830df191ee6790", "patch": "@@ -235,6 +235,8 @@ init_reswords (void)\n     mask |= D_CXX_CONCEPTS;\n   if (!flag_coroutines)\n     mask |= D_CXX_COROUTINES;\n+  if (!flag_modules)\n+    mask |= D_CXX_MODULES;\n   if (!flag_tm)\n     mask |= D_TRANSMEM;\n   if (!flag_char8_t)"}]}