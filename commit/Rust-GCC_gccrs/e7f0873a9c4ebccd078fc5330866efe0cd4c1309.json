{"sha": "e7f0873a9c4ebccd078fc5330866efe0cd4c1309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmMDg3M2E5YzRlYmNjZDA3OGZjNTMzMDg2NmVmZTBjZDRjMTMwOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-07-08T23:45:34Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-07-17T15:43:39Z"}, "message": "c++: Diagnose cv-qualified decltype(auto) [PR79815]\n\n\"If the placeholder is the decltype(auto) type-specifier, T shall be the\nplaceholder alone.\" but we weren't detecting \"const decltype(auto)\".\n\nI've just expanded the existing diagnostic detecting \"decltype(auto) &\"\nand similar.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/79815\n\t* decl.c (grokdeclarator): Detect cv-qual decltype(auto).\n\t* pt.c (do_auto_deduction): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/79815\n\t* g++.dg/cpp1y/auto-fn59.C: New test.", "tree": {"sha": "aa7a95a573fcb4e35b6dfd38f472cb714fa65944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa7a95a573fcb4e35b6dfd38f472cb714fa65944"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f0873a9c4ebccd078fc5330866efe0cd4c1309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f0873a9c4ebccd078fc5330866efe0cd4c1309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f0873a9c4ebccd078fc5330866efe0cd4c1309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f0873a9c4ebccd078fc5330866efe0cd4c1309/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c08ff9f81914c6028c586e5ecdec3736cd9a4fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08ff9f81914c6028c586e5ecdec3736cd9a4fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08ff9f81914c6028c586e5ecdec3736cd9a4fec"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "db91b50a4f0d36d58868575c9c3e2597f52c7c38", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f0873a9c4ebccd078fc5330866efe0cd4c1309/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f0873a9c4ebccd078fc5330866efe0cd4c1309/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e7f0873a9c4ebccd078fc5330866efe0cd4c1309", "patch": "@@ -12250,11 +12250,20 @@ grokdeclarator (const cp_declarator *declarator,\n \t    /* Only plain decltype(auto) is allowed.  */\n \t    if (tree a = type_uses_auto (type))\n \t      {\n-\t\tif (AUTO_IS_DECLTYPE (a) && a != type)\n+\t\tif (AUTO_IS_DECLTYPE (a))\n \t\t  {\n-\t\t    error_at (typespec_loc, \"%qT as type rather than \"\n-\t\t\t      \"plain %<decltype(auto)%>\", type);\n-\t\t    return error_mark_node;\n+\t\t    if (a != type)\n+\t\t      {\n+\t\t\terror_at (typespec_loc, \"%qT as type rather than \"\n+\t\t\t\t  \"plain %<decltype(auto)%>\", type);\n+\t\t\treturn error_mark_node;\n+\t\t      }\n+\t\t    else if (TYPE_QUALS (type) != TYPE_UNQUALIFIED)\n+\t\t      {\n+\t\t\terror_at (typespec_loc, \"%<decltype(auto)%> cannot be \"\n+\t\t\t\t  \"cv-qualified\");\n+\t\t\treturn error_mark_node;\n+\t\t      }\n \t\t  }\n \t      }\n "}, {"sha": "defc2a9abd840a5183b20ff25bbb1335804c855f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f0873a9c4ebccd078fc5330866efe0cd4c1309/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f0873a9c4ebccd078fc5330866efe0cd4c1309/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e7f0873a9c4ebccd078fc5330866efe0cd4c1309", "patch": "@@ -28993,6 +28993,12 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t    error (\"%qT as type rather than plain %<decltype(auto)%>\", type);\n \t  return error_mark_node;\n \t}\n+      else if (TYPE_QUALS (type) != TYPE_UNQUALIFIED)\n+\t{\n+\t  if (complain & tf_error)\n+\t    error (\"%<decltype(auto)%> cannot be cv-qualified\");\n+\t  return error_mark_node;\n+\t}\n     }\n   else\n     {"}, {"sha": "8f6ec9b79abe5b5e7f4d0339d0fe78c3df9fd439", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn59.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f0873a9c4ebccd078fc5330866efe0cd4c1309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f0873a9c4ebccd078fc5330866efe0cd4c1309/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn59.C?ref=e7f0873a9c4ebccd078fc5330866efe0cd4c1309", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/79815\n+// { dg-do compile { target c++14 } }\n+\n+decltype(auto) const x = 1; // { dg-error \"cannot be cv-qualified\" }\n+volatile decltype(auto) x2 = 1; // { dg-error \"cannot be cv-qualified\" }\n+const volatile decltype(auto) x3 = 1; // { dg-error \"cannot be cv-qualified\" }\n+const decltype(auto) fn() { return 42; } // { dg-error \"cannot be cv-qualified\" }\n+const decltype(auto) fn2(); // { dg-error \"cannot be cv-qualified\" }"}]}