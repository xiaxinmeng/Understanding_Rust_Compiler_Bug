{"sha": "d14774f07b73301fc68aae6bfc7e04f5de1c498d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0Nzc0ZjA3YjczMzAxZmM2OGFhZTZiZmM3ZTA0ZjVkZTFjNDk4ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-10T14:20:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-10T14:20:47Z"}, "message": "(process_init_constructor): Strip NOP_EXPR from indices.\n\nClear end_index if there's an error in a range.\n\nFrom-SVN: r2730", "tree": {"sha": "ef7f6420fe6451f90943fbfadac7f7206be2858b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef7f6420fe6451f90943fbfadac7f7206be2858b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d14774f07b73301fc68aae6bfc7e04f5de1c498d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14774f07b73301fc68aae6bfc7e04f5de1c498d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d14774f07b73301fc68aae6bfc7e04f5de1c498d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14774f07b73301fc68aae6bfc7e04f5de1c498d/comments", "author": null, "committer": null, "parents": [{"sha": "385a69e916120dea059684f91409e2b277f8eaa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385a69e916120dea059684f91409e2b277f8eaa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385a69e916120dea059684f91409e2b277f8eaa5"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "1739805e96b138d3d6ea9a95d2c4b04abbec5b99", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14774f07b73301fc68aae6bfc7e04f5de1c498d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14774f07b73301fc68aae6bfc7e04f5de1c498d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=d14774f07b73301fc68aae6bfc7e04f5de1c498d", "patch": "@@ -4970,7 +4970,8 @@ process_init_constructor (type, init, elts, constant_value, constant_element,\n \t      int win = 0;\n \t      tree index = TREE_PURPOSE (tail);\n \n-\t      if (index && TREE_CODE (index) == NON_LVALUE_EXPR)\n+\t      if (index && (TREE_CODE (index) == NON_LVALUE_EXPR\n+\t\t\t    || TREE_CODE (index) == NOP_EXPR))\n \t\tindex = TREE_OPERAND (index, 0);\n \n \t      /* Begin a range.  */\n@@ -4979,10 +4980,15 @@ process_init_constructor (type, init, elts, constant_value, constant_element,\n \t\t  start_index = TREE_PURPOSE (index);\n \t\t  end_index = TREE_PURPOSE (TREE_CHAIN (index));\n \n-\t\t  /* Expose constants.  */\n-\t\t  if (end_index && TREE_CODE (end_index) == NON_LVALUE_EXPR)\n+\t\t  /* Expose constants.  It Doesn't matter if we change\n+\t\t     the mode.*/\n+\t\t  if (end_index\n+\t\t      && (TREE_CODE (end_index) == NON_LVALUE_EXPR\n+\t\t\t  || TREE_CODE (end_index) == NOP_EXPR))\n \t\t    end_index = TREE_OPERAND (end_index, 0);\n-\t\t  if (start_index && TREE_CODE (start_index) == NON_LVALUE_EXPR)\n+\t\t  if (start_index\n+\t\t      && (TREE_CODE (start_index) == NON_LVALUE_EXPR\n+\t\t\t  || TREE_CODE (start_index) == NOP_EXPR))\n \t\t    start_index = TREE_OPERAND (start_index, 0);\n \n \t\t  if ((TREE_CODE (start_index) == IDENTIFIER_NODE) \n@@ -5026,7 +5032,11 @@ process_init_constructor (type, init, elts, constant_value, constant_element,\n \t\tcurrent_index = index, win = 1;\n \n \t      if (!win)\n-\t\tTREE_VALUE (tail) = error_mark_node;\n+\t\t{\n+\t\t  /* If there was an error, end the current range.  */\n+\t\t  end_index = 0;\n+\t\t  TREE_VALUE (tail) = error_mark_node;\n+\t\t}\n \t    }\n \n \t  if (max_index && tree_int_cst_lt (max_index, current_index))"}]}