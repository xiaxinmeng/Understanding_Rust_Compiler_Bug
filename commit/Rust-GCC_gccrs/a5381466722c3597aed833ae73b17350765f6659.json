{"sha": "a5381466722c3597aed833ae73b17350765f6659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzODE0NjY3MjJjMzU5N2FlZDgzM2FlNzNiMTczNTA3NjVmNjY1OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-06-10T22:35:56Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-06-10T22:35:56Z"}, "message": "Makefile.in (MACHMODE_H): Add @extra_modes_file@.\n\n\t* Makefile.in (MACHMODE_H): Add @extra_modes_file@.\n\t* configure.in: If $srcdir/config/${cpu_type}/${cpu_type}-modes.def\n\texists, substitute its pathname as @extra_modes_file@, define\n\tEXTRA_MODES_FILE to be an appropriate string to #include it\n\twith, and define EXTRA_CC_MODES to 1.\n\n\t* machmode.def: Update comments.  Include EXTRA_MODES_FILE if\n\tit's defined.  Get rid of redundancy in calling sequence for\n\tCC; don't use it to define CCmode, to avoid a warning.\n\t* libgcc2.c: Include symcat.h for the sake of machmode.def.\n\n\t* arc-modes.def, arm-modes.def, c4x-modes.def, i386-modes.def,\n\ti960-modes.def, ia64-modes.def, m88k-modes.def, mmix-modes.def,\n\tpa-modes.def, pdp11-modes.def, rs6000-modes.def, sparc-modes.def:\n\tNew files.\n\t* arc.h, arm.h, c4x.h, i386.h, i960.h, ia64.h, m88k.h, mmix.h,\n\tpa.h, pdp11.h, rs6000.h, sparc.h: Don't define EXTRA_CC_MODES.\n\n\t* doc/sourcebuild.texi, doc/tm.texi: Document new scheme for\n\tdefining extra CC modes.\n\nFrom-SVN: r54478", "tree": {"sha": "3704f68e05aa74e7be1ef03c29f2586c2068a4d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3704f68e05aa74e7be1ef03c29f2586c2068a4d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5381466722c3597aed833ae73b17350765f6659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5381466722c3597aed833ae73b17350765f6659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5381466722c3597aed833ae73b17350765f6659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5381466722c3597aed833ae73b17350765f6659/comments", "author": null, "committer": null, "parents": [{"sha": "852c6ec7ac379280e79ba706c60f2f1aad152f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852c6ec7ac379280e79ba706c60f2f1aad152f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852c6ec7ac379280e79ba706c60f2f1aad152f67"}], "stats": {"total": 1034, "additions": 690, "deletions": 344}, "files": [{"sha": "a6637ed3fa3ac93c9457b27939970a413256f314", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -1,3 +1,26 @@\n+2002-06-10  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Makefile.in (MACHMODE_H): Add @extra_modes_file@.\n+\t* configure.in: If $srcdir/config/${cpu_type}/${cpu_type}-modes.def \n+\texists, substitute its pathname as @extra_modes_file@, define\n+\tEXTRA_MODES_FILE to be an appropriate string to #include it\n+\twith, and define EXTRA_CC_MODES to 1.\n+\n+\t* machmode.def: Update comments.  Include EXTRA_MODES_FILE if\n+\tit's defined.  Get rid of redundancy in calling sequence for\n+\tCC; don't use it to define CCmode, to avoid a warning.\n+\t* libgcc2.c: Include symcat.h for the sake of machmode.def.\n+\n+\t* arc-modes.def, arm-modes.def, c4x-modes.def, i386-modes.def,\n+\ti960-modes.def, ia64-modes.def, m88k-modes.def, mmix-modes.def,\n+\tpa-modes.def, pdp11-modes.def, rs6000-modes.def, sparc-modes.def:\n+\tNew files.\n+\t* arc.h, arm.h, c4x.h, i386.h, i960.h, ia64.h, m88k.h, mmix.h,\n+\tpa.h, pdp11.h, rs6000.h, sparc.h: Don't define EXTRA_CC_MODES.\n+\n+\t* doc/sourcebuild.texi, doc/tm.texi: Document new scheme for\n+\tdefining extra CC modes.\n+\n 2002-06-10  Roger Sayle  <roger@eyesopen.com>\n \t    Andreas Jaeger <aj@suse.de>\n "}, {"sha": "0dbb2d99769157dca8d5e89c8527f2d670af1894", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -548,7 +548,7 @@ LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h $(HOOKS_H)\n TM_P_H = tm_p.h $(tm_p_file_list) tm-preds.h\n \n-MACHMODE_H = machmode.h machmode.def\n+MACHMODE_H = machmode.h machmode.def @extra_modes_file@\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H)\n RTL_H = $(RTL_BASE_H) genrtl.h\n PARAMS_H = params.h params.def"}, {"sha": "eeef49b05389eccefed89c072c5cf267f4ececce", "filename": "gcc/config.in", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -1,4 +1,4 @@\n-/* config.in.  Generated automatically from configure.in by autoheader.  */\n+/* config.in.  Generated automatically from configure.in by autoheader 2.13.  */\n \n /* Define if using alloca.c.  */\n #undef C_ALLOCA\n@@ -482,6 +482,14 @@\n /* Define if host mkdir takes a single argument. */\n #undef MKDIR_TAKES_ONE_ARG\n \n+/* Define if the target architecture needs extra machine modes to represent\n+   the results of comparisons. */\n+#undef EXTRA_CC_MODES\n+\n+/* Define to the name of a file containing a list of extra machine modes\n+   for this architecture. */\n+#undef EXTRA_MODES_FILE\n+\n /* Define if you have the iconv() function. */\n #undef HAVE_ICONV\n "}, {"sha": "0c9d4f5bfc5bb0b9932f5fbb7ce25e369dd5cbad", "filename": "gcc/config/arc/arc-modes.def", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Farc%2Farc-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Farc%2Farc-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,25 @@\n+/* Definitions of target machine for GNU compiler, Argonaut ARC cpu.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Some insns set all condition code flags, some only set the ZNC flags, and\n+   some only set the ZN flags.  */\n+\n+CC (CCZNC)\n+CC (CCZN)"}, {"sha": "1390d6bc2a17347c7e454c807ea73637a97c2e2b", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -990,15 +990,6 @@ do { \\\n     goto LABEL;\t\t\t\t\\\n }\n \f\n-/* Condition code usage.  */\n-\n-/* Some insns set all condition code flags, some only set the ZNC flags, and\n-   some only set the ZN flags.  */\n-\n-#define EXTRA_CC_MODES \\\n-\tCC(CCZNCmode, \"CCZNC\") \\\n-\tCC(CCZNmode, \"CCZN\")\n-\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  */\n #define SELECT_CC_MODE(OP, X, Y) \\"}, {"sha": "48f9ddfb0bd178728d3b72bca0e653ded515ddc6", "filename": "gcc/config/arm/arm-modes.def", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Farm%2Farm-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Farm%2Farm-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,46 @@\n+/* Definitions of target machine for GNU compiler, for ARM.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n+   and Martin Simmons (@harleqn.co.uk).\n+   More major hacks by Richard Earnshaw (rearnsha@arm.com)\n+   Minor hacks by Nick Clifton (nickc@cygnus.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* CCFPEmode should be used with floating inequalities,\n+   CCFPmode should be used with floating equalities.\n+   CC_NOOVmode should be used with SImode integer equalities.\n+   CC_Zmode should be used if only the Z flag is set correctly\n+   CCmode should be used otherwise. */\n+\n+CC (CC_NOOV)\n+CC (CC_Z)\n+CC (CC_SWP)\n+CC (CCFP)\n+CC (CCFPE)\n+CC (CC_DNE)\n+CC (CC_DEQ)\n+CC (CC_DLE)\n+CC (CC_DLT)\n+CC (CC_DGE)\n+CC (CC_DGT)\n+CC (CC_DLEU)\n+CC (CC_DLTU)\n+CC (CC_DGEU)\n+CC (CC_DGTU)\n+CC (CC_C)"}, {"sha": "e74698a1737736c9c99bc4529d010d72f81edd9b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -2417,30 +2417,7 @@ extern int making_const_table;\n \n /* Condition code information. */\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n-   return the mode to be used for the comparison. \n-   CCFPEmode should be used with floating inequalities,\n-   CCFPmode should be used with floating equalities.\n-   CC_NOOVmode should be used with SImode integer equalities.\n-   CC_Zmode should be used if only the Z flag is set correctly\n-   CCmode should be used otherwise. */\n-\n-#define EXTRA_CC_MODES \\\n-        CC(CC_NOOVmode, \"CC_NOOV\") \\\n-        CC(CC_Zmode, \"CC_Z\") \\\n-        CC(CC_SWPmode, \"CC_SWP\") \\\n-        CC(CCFPmode, \"CCFP\") \\\n-        CC(CCFPEmode, \"CCFPE\") \\\n-        CC(CC_DNEmode, \"CC_DNE\") \\\n-        CC(CC_DEQmode, \"CC_DEQ\") \\\n-        CC(CC_DLEmode, \"CC_DLE\") \\\n-        CC(CC_DLTmode, \"CC_DLT\") \\\n-        CC(CC_DGEmode, \"CC_DGE\") \\\n-        CC(CC_DGTmode, \"CC_DGT\") \\\n-        CC(CC_DLEUmode, \"CC_DLEU\") \\\n-        CC(CC_DLTUmode, \"CC_DLTU\") \\\n-        CC(CC_DGEUmode, \"CC_DGEU\") \\\n-        CC(CC_DGTUmode, \"CC_DGTU\") \\\n-        CC(CC_Cmode, \"CC_C\")\n+   return the mode to be used for the comparison.  */\n \n #define SELECT_CC_MODE(OP, X, Y)  arm_select_cc_mode (OP, X, Y)\n "}, {"sha": "c2cbf3099b8f2fc8e487583200e9599faa22f252", "filename": "gcc/config/c4x/c4x-modes.def", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fc4x%2Fc4x-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fc4x%2Fc4x-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,102 @@\n+/* Definitions of target machine for GNU compiler.  TMS320C[34]x\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+   Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)\n+              and Herman Ten Brugge (Haj.Ten.Brugge@net.HCC.nl).\n+\n+   This file is part of GNU CC.\n+\n+   GNU CC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* Add any extra modes needed to represent the condition code.\n+\n+   On the C4x, we have a \"no-overflow\" mode which is used when an ADD,\n+   SUB, NEG, or MPY insn is used to set the condition code.  This is\n+   to prevent the combiner from optimising away a following CMP of the\n+   result with zero when a signed conditional branch or load insn\n+   follows.\n+\n+   The problem is a subtle one and deals with the manner in which the\n+   negative condition (N) flag is used on the C4x.  This flag does not\n+   reflect the status of the actual result but of the ideal result had\n+   no overflow occurred (when considering signed operands).\n+\n+   For example, 0x7fffffff + 1 => 0x80000000 Z=0 V=1 N=0 C=0.  Here\n+   the flags reflect the untruncated result, not the actual result.\n+   While the actual result is less than zero, the N flag is not set\n+   since the ideal result of the addition without truncation would\n+   have been positive.\n+   \n+   Note that the while the N flag is handled differently to most other\n+   architectures, the use of it is self consistent and is not the\n+   cause of the problem.\n+\n+   Logical operations set the N flag to the MSB of the result so if\n+   the result is negative, N is 1.  However, integer and floating\n+   point operations set the N flag to be the MSB of the result\n+   exclusive ored with the overflow (V) flag.  Thus if an overflow\n+   occurs and the result does not have the MSB set (i.e., the result\n+   looks like a positive number), the N flag is set.  Conversely, if\n+   an overflow occurs and the MSB of the result is set, N is set to 0.\n+   Thus the N flag represents the sign of the result if it could have\n+   been stored without overflow but does not represent the apparent\n+   sign of the result.  Note that most architectures set the N flag to\n+   be the MSB of the result.\n+\n+   The C4x approach to setting the N flag simplifies signed\n+   conditional branches and loads which only have to test the state of\n+   the N flag, whereas most architectures have to look at both the N\n+   and V flags.  The disadvantage is that there is no flag giving the\n+   status of the sign bit of the operation.  However, there are no\n+   conditional load or branch instructions that make use of this\n+   feature (e.g., BMI---branch minus) instruction.  Note that BN and\n+   BLT are identical in the C4x.\n+   \n+   To handle the problem where the N flag is set differently whenever\n+   there is an overflow we use a different CC mode, CC_NOOVmode which\n+   says that the CC reflects the comparison of the result against zero\n+   if no overflow occurred.\n+\n+   For example, \n+\n+   [(set (reg:CC_NOOV 21)\n+         (compare:CC_NOOV (minus:QI (match_operand:QI 1 \"src_operand\" \"\")\n+                                    (match_operand:QI 2 \"src_operand\" \"\"))\n+                          (const_int 0)))\n+    (set (match_operand:QI 0 \"ext_reg_operand\" \"\")\n+         (minus:QI (match_dup 1)\n+                   (match_dup 2)))]\n+\n+   Note that there is no problem for insns that don't return a result\n+   like CMP, since the CC reflects the effect of operation.\n+\n+   An example of a potential problem is when GCC\n+   converts   (LTU (MINUS (0x80000000) (0x7fffffff) (0x80000000)))\n+   to         (LEU (MINUS (0x80000000) (0x7fffffff) (0x7fffffff)))\n+   to         (GE  (MINUS (0x80000000) (0x7fffffff) (0x00000000)))\n+\n+   Now (MINUS (0x80000000) (0x7fffffff)) returns 0x00000001 but the\n+   C4x sets the N flag since the result without overflow would have\n+   been 0xffffffff when treating the operands as signed integers.\n+   Thus (GE (MINUS (0x80000000) (0x7fffffff) (0x00000000))) sets the N\n+   flag but (GE (0x00000001)) does not set the N flag.\n+\n+   The upshot is that we can not use signed branch and conditional\n+   load instructions after an add, subtract, neg, abs or multiply.\n+   We must emit a compare insn to check the result against 0.  */\n+\n+CC (CC_NOOV)\n+"}, {"sha": "a18dbebcd743ca4e362bde2eefdebae2e1b1018e", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -1284,85 +1284,6 @@ CUMULATIVE_ARGS;\n \n #define TARGET_MEM_FUNCTIONS\n \n-/* Add any extra modes needed to represent the condition code.\n-\n-   On the C4x, we have a \"no-overflow\" mode which is used when an ADD,\n-   SUB, NEG, or MPY insn is used to set the condition code.  This is\n-   to prevent the combiner from optimising away a following CMP of the\n-   result with zero when a signed conditional branch or load insn\n-   follows.\n-\n-   The problem is a subtle one and deals with the manner in which the\n-   negative condition (N) flag is used on the C4x.  This flag does not\n-   reflect the status of the actual result but of the ideal result had\n-   no overflow occurred (when considering signed operands).\n-\n-   For example, 0x7fffffff + 1 => 0x80000000 Z=0 V=1 N=0 C=0.  Here\n-   the flags reflect the untruncated result, not the actual result.\n-   While the actual result is less than zero, the N flag is not set\n-   since the ideal result of the addition without truncation would\n-   have been positive.\n-   \n-   Note that the while the N flag is handled differently to most other\n-   architectures, the use of it is self consistent and is not the\n-   cause of the problem.\n-\n-   Logical operations set the N flag to the MSB of the result so if\n-   the result is negative, N is 1.  However, integer and floating\n-   point operations set the N flag to be the MSB of the result\n-   exclusive ored with the overflow (V) flag.  Thus if an overflow\n-   occurs and the result does not have the MSB set (i.e., the result\n-   looks like a positive number), the N flag is set.  Conversely, if\n-   an overflow occurs and the MSB of the result is set, N is set to 0.\n-   Thus the N flag represents the sign of the result if it could have\n-   been stored without overflow but does not represent the apparent\n-   sign of the result.  Note that most architectures set the N flag to\n-   be the MSB of the result.\n-\n-   The C4x approach to setting the N flag simplifies signed\n-   conditional branches and loads which only have to test the state of\n-   the N flag, whereas most architectures have to look at both the N\n-   and V flags.  The disadvantage is that there is no flag giving the\n-   status of the sign bit of the operation.  However, there are no\n-   conditional load or branch instructions that make use of this\n-   feature (e.g., BMI---branch minus) instruction.  Note that BN and\n-   BLT are identical in the C4x.\n-   \n-   To handle the problem where the N flag is set differently whenever\n-   there is an overflow we use a different CC mode, CC_NOOVmode which\n-   says that the CC reflects the comparison of the result against zero\n-   if no overflow occurred.\n-\n-   For example, \n-\n-   [(set (reg:CC_NOOV 21)\n-         (compare:CC_NOOV (minus:QI (match_operand:QI 1 \"src_operand\" \"\")\n-                                    (match_operand:QI 2 \"src_operand\" \"\"))\n-                          (const_int 0)))\n-    (set (match_operand:QI 0 \"ext_reg_operand\" \"\")\n-         (minus:QI (match_dup 1)\n-                   (match_dup 2)))]\n-\n-   Note that there is no problem for insns that don't return a result\n-   like CMP, since the CC reflects the effect of operation.\n-\n-   An example of a potential problem is when GCC\n-   converts   (LTU (MINUS (0x80000000) (0x7fffffff) (0x80000000)))\n-   to         (LEU (MINUS (0x80000000) (0x7fffffff) (0x7fffffff)))\n-   to         (GE  (MINUS (0x80000000) (0x7fffffff) (0x00000000)))\n-\n-   Now (MINUS (0x80000000) (0x7fffffff)) returns 0x00000001 but the\n-   C4x sets the N flag since the result without overflow would have\n-   been 0xffffffff when treating the operands as signed integers.\n-   Thus (GE (MINUS (0x80000000) (0x7fffffff) (0x00000000))) sets the N\n-   flag but (GE (0x00000001)) does not set the N flag.\n-\n-   The upshot is that we can not use signed branch and conditional\n-   load instructions after an add, subtract, neg, abs or multiply.\n-   We must emit a compare insn to check the result against 0.  */\n-\n-#define EXTRA_CC_MODES CC(CC_NOOVmode, \"CC_NOOV\")\n-\n /* CC_NOOVmode should be used when the first operand is a PLUS, MINUS, NEG\n    or MULT.\n    CCmode should be used when no special processing is needed.  */"}, {"sha": "5ef800ffcf5e60c41e1318d19c4753a869169df0", "filename": "gcc/config/i386/i386-modes.def", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,46 @@\n+/* Definitions of target machine for GNU compiler for IA-32.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Add any extra modes needed to represent the condition code.\n+\n+   For the i386, we need separate modes when floating-point\n+   equality comparisons are being done.\n+\n+   Add CCNO to indicate comparisons against zero that requires\n+   Overflow flag to be unset.  Sign bit test is used instead and\n+   thus can be used to form \"a&b>0\" type of tests.\n+\n+   Add CCGC to indicate comparisons agains zero that allows\n+   unspecified garbage in the Carry flag.  This mode is used\n+   by inc/dec instructions.\n+\n+   Add CCGOC to indicate comparisons agains zero that allows\n+   unspecified garbage in the Carry and Overflow flag. This\n+   mode is used to simulate comparisons of (a-b) and (a+b)\n+   against zero using sub/cmp/add operations.\n+\n+   Add CCZ to indicate that only the Zero flag is valid.  */\n+\n+CC (CCGC)\n+CC (CCGOC)\n+CC (CCNO)\n+CC (CCZ)\n+CC (CCFP)\n+CC (CCFPU)"}, {"sha": "958ef58aa04c42130a347e1e958f4feb58917e62", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -2834,34 +2834,6 @@ do {\t\t\t\t\t\t\t\\\n \n #define NO_RECURSIVE_FUNCTION_CSE\n \f\n-/* Add any extra modes needed to represent the condition code.\n-\n-   For the i386, we need separate modes when floating-point\n-   equality comparisons are being done.\n-\n-   Add CCNO to indicate comparisons against zero that requires\n-   Overflow flag to be unset.  Sign bit test is used instead and\n-   thus can be used to form \"a&b>0\" type of tests.\n-\n-   Add CCGC to indicate comparisons agains zero that allows\n-   unspecified garbage in the Carry flag.  This mode is used\n-   by inc/dec instructions.\n-\n-   Add CCGOC to indicate comparisons agains zero that allows\n-   unspecified garbage in the Carry and Overflow flag. This\n-   mode is used to simulate comparisons of (a-b) and (a+b)\n-   against zero using sub/cmp/add operations.\n-\n-   Add CCZ to indicate that only the Zero flag is valid.  */\n-\n-#define EXTRA_CC_MODES\t\t\\\n-\tCC (CCGCmode, \"CCGC\")\t\\\n-\tCC (CCGOCmode, \"CCGOC\")\t\\\n-\tCC (CCNOmode, \"CCNO\")\t\\\n-\tCC (CCZmode, \"CCZ\")\t\\\n-\tCC (CCFPmode, \"CCFP\")\t\\\n-\tCC (CCFPUmode, \"CCFPU\")\n-\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.\n "}, {"sha": "05fd40dbb16532cbc0455829170f0df39e1d85cc", "filename": "gcc/config/i960/i960-modes.def", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fi960%2Fi960-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fi960%2Fi960-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,30 @@\n+/* Definitions of target machine for GNU compiler, for Intel 80960\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Steven McGeady, Intel Corp.\n+   Additional Work by Glenn Colon-Bonet, Jonathan Shapiro, Andy Wilson\n+   Converted to GCC 2.0 by Jim Wilson and Michael Tiemann, Cygnus Support.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Add any extra modes needed to represent the condition code.\n+\n+   Also, signed and unsigned comparisons are distinguished, as\n+   are operations which are compatible with chkbit insns.  */\n+\n+CC (CC_UNS)\n+CC (CC_CHK)"}, {"sha": "54dc02f297fc8dbeeef33cbf95116dc0acc05a56", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -1200,14 +1200,6 @@ struct cum_args { int ca_nregparms; int ca_nstackparms; };\n \n extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n \n-/* Add any extra modes needed to represent the condition code.\n-\n-   Also, signed and unsigned comparisons are distinguished, as\n-   are operations which are compatible with chkbit insns.  */\n-#define EXTRA_CC_MODES\t\t\\\n-    CC(CC_UNSmode, \"CC_UNS\")\t\\\n-    CC(CC_CHKmode, \"CC_CHK\")\n-\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  For floating-point, CCFPmode\n    should be used.  CC_NOOVmode should be used when the first operand is a"}, {"sha": "0c3eb127674cf7b6011c264a59ee7e78c6a7be2c", "filename": "gcc/config/ia64/ia64-modes.def", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fia64%2Fia64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fia64%2Fia64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,29 @@\n+/* Definitions of target machine GNU compiler.  IA-64 version.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by James E. Wilson <wilson@cygnus.com> and\n+   \t\t  David Mosberger <davidm@hpl.hp.com>.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Add any extra modes needed to represent the condition code.\n+\n+   CCImode is used to mark a single predicate register instead\n+   of a register pair.  This is currently only used in reg_raw_mode\n+   so that flow doesn't do something stupid.  */\n+\n+CC (CCI)"}, {"sha": "ab265ca7a0642075452fb7886708c592edc86040", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -595,14 +595,6 @@ while (0)\n #define LOCAL_REGNO(REGNO) \\\n   (IN_REGNO_P (REGNO) || LOC_REGNO_P (REGNO))\n \n-/* Add any extra modes needed to represent the condition code.\n-\n-   CCImode is used to mark a single predicate register instead\n-   of a register pair.  This is currently only used in reg_raw_mode\n-   so that flow doesn't do something stupid.  */\n-\n-#define EXTRA_CC_MODES\t\tCC(CCImode, \"CCI\")\n-\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  Must be defined if\n    EXTRA_CC_MODES is defined.  */"}, {"sha": "b5edc6cb82e3a70adbb93a6568e61053d986ca86", "filename": "gcc/config/m88k/m88k-modes.def", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fm88k%2Fm88k-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fm88k%2Fm88k-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,27 @@\n+/* Definitions of target machine for GNU compiler for Motorola m88100.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Michael Tiemann (tiemann@cygnus.com).\n+   Currently maintained by (gcc@dg-rtp.dg.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Extra machine modes to represent the condition code.  */\n+\n+CC (CCEVEN)\n+\n+"}, {"sha": "1678b6bcf7e3bb53dfd61a87642d9f76bfa09dd5", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -1162,8 +1162,6 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \f\n /*** Addressing Modes ***/\n \n-#define EXTRA_CC_MODES CC(CCEVENmode, \"CCEVEN\")\n-\n #define SELECT_CC_MODE(OP,X,Y) CCmode\n \n /* #define HAVE_POST_INCREMENT 0 */"}, {"sha": "563931a9a756962ef57f144e52e12ce44d72d7df", "filename": "gcc/config/mmix/mmix-modes.def", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fmmix%2Fmmix-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fmmix%2Fmmix-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,27 @@\n+/* Definitions of target machine for GNU compiler, for MMIX.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Extra machine modes to represent the condition code.  */\n+\n+CC (CC_UNS)\n+CC (CC_FP)\n+CC (CC_FPEQ)\n+CC (CC_FUN)"}, {"sha": "8ffef0b96e7abd8f7142cd79ae25b91e8d8e3643", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -851,12 +851,6 @@ typedef struct { int regs; int lib; int now_varargs; } CUMULATIVE_ARGS;\n \n /* Node: Condition Code */\n \n-#define EXTRA_CC_MODES\t\t\t\t\\\n- CC(CC_UNSmode, \"CC_UNS\")\t\t\t\\\n- CC(CC_FPmode, \"CC_FP\")\t\t\t\t\\\n- CC(CC_FPEQmode, \"CC_FPEQ\")\t\t\t\\\n- CC(CC_FUNmode, \"CC_FUN\")\n-\n #define SELECT_CC_MODE(OP, X, Y)\t\t\\\n  mmix_select_cc_mode (OP, X, Y)\n "}, {"sha": "75fba097ee0669e443a21516813d8001acefaf8e", "filename": "gcc/config/pa/pa-modes.def", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fpa%2Fpa-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fpa%2Fpa-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,30 @@\n+/* Definitions of target machine for GNU compiler, for the HP Spectrum.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Michael Tiemann (tiemann@cygnus.com) of Cygnus Support\n+   and Tim Moore (moore@defmacro.cs.utah.edu) of the Center for\n+   Software Science at the University of Utah.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Add any extra modes needed to represent the condition code.\n+\n+   HPPA floating comparisons produce condition codes.  */\n+\n+CC (CCFP)\n+\n+"}, {"sha": "d71328b563e4f870252a8530098e8fa962114cef", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -1515,11 +1515,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n    between pointers and any other objects of this machine mode.  */\n #define Pmode word_mode\n \n-/* Add any extra modes needed to represent the condition code.\n-\n-   HPPA floating comparisons produce condition codes.  */\n-#define EXTRA_CC_MODES CC(CCFPmode, \"CCFP\")\n-\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  For floating-point, CCFPmode\n    should be used.  CC_NOOVmode should be used when the first operand is a"}, {"sha": "494d96ab0db67b92b677f6bccc2ed2a2199e0d3e", "filename": "gcc/config/pdp11/pdp11-modes.def", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fpdp11%2Fpdp11-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fpdp11%2Fpdp11-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,26 @@\n+/* Definitions of target machine for GNU compiler, for the pdp-11\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Add any extra modes needed to represent the condition code.\n+   CCFPmode is used for FPU, but should we use a separate reg? */\n+\n+CC (CCFP)\n+"}, {"sha": "58562b5bf82214598a2bf721256e223282133521", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -884,12 +884,6 @@ extern int may_call_alloca;\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-\n-/* Add any extra modes needed to represent the condition code.\n-\n-   CCFPmode is used for FPU, but should we use a separate reg? */\n-#define EXTRA_CC_MODES CC(CCFPmode, \"CCFP\")\n-\n /* Give a comparison code (EQ, NE etc) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  For floating-point, CCFPmode\n    should be used. */"}, {"sha": "ac4112ca8edc3b99d76a098bbf70e2471b00b18d", "filename": "gcc/config/rs6000/rs6000-modes.def", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,31 @@\n+/* Definitions of target machine for GNU compiler, for IBM RS/6000.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Add any extra modes needed to represent the condition code.\n+\n+   For the RS/6000, we need separate modes when unsigned (logical) comparisons\n+   are being done and we need a separate mode for floating-point.  We also\n+   use a mode for the case when we are comparing the results of two\n+   comparisons, as then only the EQ bit is valid in the register.  */\n+\n+CC (CCUNS)\n+CC (CCFP)\n+CC (CCEQ)"}, {"sha": "19b359088302b70b2aa0c6a4b938166411ab157b", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -2379,18 +2379,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n /* #define ADJUST_INSN_LENGTH(X,LENGTH) */\n \n-/* Add any extra modes needed to represent the condition code.\n-\n-   For the RS/6000, we need separate modes when unsigned (logical) comparisons\n-   are being done and we need a separate mode for floating-point.  We also\n-   use a mode for the case when we are comparing the results of two\n-   comparisons, as then only the EQ bit is valid in the register.  */\n-\n-#define EXTRA_CC_MODES\t\t\\\n-    CC(CCUNSmode,  \"CCUNS\")\t\\\n-    CC(CCFPmode,   \"CCFP\")\t\\\n-    CC(CCEQmode,   \"CCEQ\")\n-\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a\n    COMPARE, return the mode to be used for the comparison.  For\n    floating-point, CCFPmode should be used.  CCUNSmode should be used"}, {"sha": "d4729990a4496e864f65b3cabb95af973dc83864", "filename": "gcc/config/s390/s390-modes.def", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fs390%2Fs390-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fs390%2Fs390-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,29 @@\n+/* Definitions of target machine for GNU compiler, for IBM S/390\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n+                  Ulrich Weigand (uweigand@de.ibm.com).\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Add any extra modes needed to represent the condition code.  */\n+\n+CC (CCZ)\n+CC (CCA)\n+CC (CCL)\n+CC (CCU)\n+CC (CCS)\n+CC (CCT)"}, {"sha": "0a047965d9a2e3775e573b149f32e415f8aab36c", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -1207,15 +1207,6 @@ CUMULATIVE_ARGS;\n \n #define BRANCH_COST 1\n \n-/* Add any extra modes needed to represent the condition code.  */\n-#define EXTRA_CC_MODES \\\n-\tCC (CCZmode, \"CCZ\") \\\n-\tCC (CCAmode, \"CCA\") \\\n-\tCC (CCLmode, \"CCL\") \\\n-\tCC (CCUmode, \"CCU\") \\\n-\tCC (CCSmode, \"CCS\") \\\n-\tCC (CCTmode, \"CCT\")\n- \n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  */\n  "}, {"sha": "e30175521127978588823a2279967509bd878e9a", "filename": "gcc/config/sparc/sparc-modes.def", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-modes.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -0,0 +1,42 @@\n+/* Definitions of target machine for GNU compiler, for Sun SPARC.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Michael Tiemann (tiemann@cygnus.com).\n+   64 bit SPARC V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n+   at Cygnus Support.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Add any extra modes needed to represent the condition code.\n+\n+   On the Sparc, we have a \"no-overflow\" mode which is used when an add or\n+   subtract insn is used to set the condition code.  Different branches are\n+   used in this case for some operations.\n+\n+   We also have two modes to indicate that the relevant condition code is\n+   in the floating-point condition code register.  One for comparisons which\n+   will generate an exception if the result is unordered (CCFPEmode) and\n+   one for comparisons which will never trap (CCFPmode).\n+\n+   CCXmode and CCX_NOOVmode are only used by v9.  */\n+\n+CC (CCX)\n+CC (CC_NOOV)\n+CC (CCX_NOOV)\n+CC (CCFP)\n+CC (CCFPE)\n+"}, {"sha": "58f3b696a356fbe7ab74488512af2dd936b072ce", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -2484,26 +2484,6 @@ do {                                                                    \\\n /* Generate calls to memcpy, memcmp and memset.  */\n #define TARGET_MEM_FUNCTIONS\n \n-/* Add any extra modes needed to represent the condition code.\n-\n-   On the Sparc, we have a \"no-overflow\" mode which is used when an add or\n-   subtract insn is used to set the condition code.  Different branches are\n-   used in this case for some operations.\n-\n-   We also have two modes to indicate that the relevant condition code is\n-   in the floating-point condition code register.  One for comparisons which\n-   will generate an exception if the result is unordered (CCFPEmode) and\n-   one for comparisons which will never trap (CCFPmode).\n-\n-   CCXmode and CCX_NOOVmode are only used by v9.  */\n-\n-#define EXTRA_CC_MODES\t\t\t\\\n-    CC(CCXmode,\t     \"CCX\")\t\t\\\n-    CC(CC_NOOVmode,  \"CC_NOOV\")\t\t\\\n-    CC(CCX_NOOVmode, \"CCX_NOOV\")\t\\\n-    CC(CCFPmode,     \"CCFP\")\t\t\\\n-    CC(CCFPEmode,    \"CCFPE\")\n-\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  For floating-point,\n    CCFP[E]mode is used.  CC_NOOVmode should be used when the first operand"}, {"sha": "f3fb447f4080a5bb73d0feb4891ee79a004caa0f", "filename": "gcc/configure", "status": "modified", "additions": 119, "deletions": 104, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -2242,7 +2242,7 @@ EOF\n fi\n \n # Find some useful tools\n-for ac_prog in gawk mawk nawk awk\n+for ac_prog in mawk gawk nawk awk\n do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n@@ -5077,6 +5077,20 @@ if test x$thread_file = x; then\n \tfi\n fi\n \n+# Look for a file containing extra machine modes.\n+if test -f $srcdir/config/${cpu_type}/${cpu_type}-modes.def; then\n+  extra_modes_file='$(srcdir)/config/'${cpu_type}/${cpu_type}-modes.def\n+  \n+  cat >> confdefs.h <<EOF\n+#define EXTRA_MODES_FILE \"${cpu_type}/${cpu_type}-modes.def\"\n+EOF\n+\n+  cat >> confdefs.h <<\\EOF\n+#define EXTRA_CC_MODES 1\n+EOF\n+\n+fi\n+\n # auto-host.h is the file containing items generated by autoconf and is\n # the first file included by config.h.\n # If host=build, it is correct to have hconfig include auto-host.h\n@@ -5175,14 +5189,14 @@ fi\n \n             \n echo $ac_n \"checking for library containing strerror\"\"... $ac_c\" 1>&6\n-echo \"configure:5179: checking for library containing strerror\" >&5\n+echo \"configure:5193: checking for library containing strerror\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_search_strerror'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_func_search_save_LIBS=\"$LIBS\"\n ac_cv_search_strerror=\"no\"\n cat > conftest.$ac_ext <<EOF\n-#line 5186 \"configure\"\n+#line 5200 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -5193,7 +5207,7 @@ int main() {\n strerror()\n ; return 0; }\n EOF\n-if { (eval echo configure:5197: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5211: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_search_strerror=\"none required\"\n else\n@@ -5204,7 +5218,7 @@ rm -f conftest*\n test \"$ac_cv_search_strerror\" = \"no\" && for i in cposix; do\n LIBS=\"-l$i  $ac_func_search_save_LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 5208 \"configure\"\n+#line 5222 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -5215,7 +5229,7 @@ int main() {\n strerror()\n ; return 0; }\n EOF\n-if { (eval echo configure:5219: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5233: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_search_strerror=\"-l$i\"\n break\n@@ -5238,12 +5252,12 @@ fi\n   \n \n echo $ac_n \"checking for working const\"\"... $ac_c\" 1>&6\n-echo \"configure:5242: checking for working const\" >&5\n+echo \"configure:5256: checking for working const\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_c_const'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5247 \"configure\"\n+#line 5261 \"configure\"\n #include \"confdefs.h\"\n \n int main() {\n@@ -5292,7 +5306,7 @@ ccp = (char const *const *) p;\n \n ; return 0; }\n EOF\n-if { (eval echo configure:5296: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:5310: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_cv_c_const=yes\n else\n@@ -5313,12 +5327,12 @@ EOF\n fi\n \n echo $ac_n \"checking for off_t\"\"... $ac_c\" 1>&6\n-echo \"configure:5317: checking for off_t\" >&5\n+echo \"configure:5331: checking for off_t\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_type_off_t'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5322 \"configure\"\n+#line 5336 \"configure\"\n #include \"confdefs.h\"\n #include <sys/types.h>\n #if STDC_HEADERS\n@@ -5346,12 +5360,12 @@ EOF\n fi\n \n echo $ac_n \"checking for size_t\"\"... $ac_c\" 1>&6\n-echo \"configure:5350: checking for size_t\" >&5\n+echo \"configure:5364: checking for size_t\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_type_size_t'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5355 \"configure\"\n+#line 5369 \"configure\"\n #include \"confdefs.h\"\n #include <sys/types.h>\n #if STDC_HEADERS\n@@ -5381,19 +5395,19 @@ fi\n # The Ultrix 4.2 mips builtin alloca declared by alloca.h only works\n # for constant arguments.  Useless!\n echo $ac_n \"checking for working alloca.h\"\"... $ac_c\" 1>&6\n-echo \"configure:5385: checking for working alloca.h\" >&5\n+echo \"configure:5399: checking for working alloca.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_alloca_h'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5390 \"configure\"\n+#line 5404 \"configure\"\n #include \"confdefs.h\"\n #include <alloca.h>\n int main() {\n char *p = alloca(2 * sizeof(int));\n ; return 0; }\n EOF\n-if { (eval echo configure:5397: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5411: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_header_alloca_h=yes\n else\n@@ -5414,12 +5428,12 @@ EOF\n fi\n \n echo $ac_n \"checking for alloca\"\"... $ac_c\" 1>&6\n-echo \"configure:5418: checking for alloca\" >&5\n+echo \"configure:5432: checking for alloca\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_alloca_works'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5423 \"configure\"\n+#line 5437 \"configure\"\n #include \"confdefs.h\"\n \n #ifdef __GNUC__\n@@ -5447,7 +5461,7 @@ int main() {\n char *p = (char *) alloca(1);\n ; return 0; }\n EOF\n-if { (eval echo configure:5451: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5465: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_func_alloca_works=yes\n else\n@@ -5479,12 +5493,12 @@ EOF\n \n \n echo $ac_n \"checking whether alloca needs Cray hooks\"\"... $ac_c\" 1>&6\n-echo \"configure:5483: checking whether alloca needs Cray hooks\" >&5\n+echo \"configure:5497: checking whether alloca needs Cray hooks\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_os_cray'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5488 \"configure\"\n+#line 5502 \"configure\"\n #include \"confdefs.h\"\n #if defined(CRAY) && ! defined(CRAY2)\n webecray\n@@ -5509,12 +5523,12 @@ echo \"$ac_t\"\"$ac_cv_os_cray\" 1>&6\n if test $ac_cv_os_cray = yes; then\n for ac_func in _getb67 GETB67 getb67; do\n   echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:5513: checking for $ac_func\" >&5\n+echo \"configure:5527: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5518 \"configure\"\n+#line 5532 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -5537,7 +5551,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:5541: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5555: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -5564,15 +5578,15 @@ done\n fi\n \n echo $ac_n \"checking stack direction for C alloca\"\"... $ac_c\" 1>&6\n-echo \"configure:5568: checking stack direction for C alloca\" >&5\n+echo \"configure:5582: checking stack direction for C alloca\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_c_stack_direction'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_c_stack_direction=0\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5576 \"configure\"\n+#line 5590 \"configure\"\n #include \"confdefs.h\"\n find_stack_direction ()\n {\n@@ -5591,7 +5605,7 @@ main ()\n   exit (find_stack_direction() < 0);\n }\n EOF\n-if { (eval echo configure:5595: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:5609: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_c_stack_direction=1\n else\n@@ -5614,12 +5628,12 @@ fi\n \n \n     echo $ac_n \"checking whether we are using the GNU C Library 2.1 or newer\"\"... $ac_c\" 1>&6\n-echo \"configure:5618: checking whether we are using the GNU C Library 2.1 or newer\" >&5\n+echo \"configure:5632: checking whether we are using the GNU C Library 2.1 or newer\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_gnu_library_2_1'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5623 \"configure\"\n+#line 5637 \"configure\"\n #include \"confdefs.h\"\n \n #include <features.h>\n@@ -5655,17 +5669,17 @@ stdlib.h string.h unistd.h sys/param.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:5659: checking for $ac_hdr\" >&5\n+echo \"configure:5673: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5664 \"configure\"\n+#line 5678 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:5669: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:5683: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -5696,12 +5710,12 @@ getgid getuid mempcpy munmap putenv setenv setlocale stpcpy strchr strcasecmp \\\n strdup strtoul tsearch __argz_count __argz_stringify __argz_next\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:5700: checking for $ac_func\" >&5\n+echo \"configure:5714: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5705 \"configure\"\n+#line 5719 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -5724,7 +5738,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:5728: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5742: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -5765,15 +5779,15 @@ fi\n \n \n   echo $ac_n \"checking for iconv\"\"... $ac_c\" 1>&6\n-echo \"configure:5769: checking for iconv\" >&5\n+echo \"configure:5783: checking for iconv\" >&5\n if eval \"test \\\"`echo '$''{'am_cv_func_iconv'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   \n     am_cv_func_iconv=\"no, consider installing GNU libiconv\"\n     am_cv_lib_iconv=no\n     cat > conftest.$ac_ext <<EOF\n-#line 5777 \"configure\"\n+#line 5791 \"configure\"\n #include \"confdefs.h\"\n #include <stdlib.h>\n #include <iconv.h>\n@@ -5783,7 +5797,7 @@ iconv_t cd = iconv_open(\"\",\"\");\n        iconv_close(cd);\n ; return 0; }\n EOF\n-if { (eval echo configure:5787: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5801: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   am_cv_func_iconv=yes\n else\n@@ -5795,7 +5809,7 @@ rm -f conftest*\n       am_save_LIBS=\"$LIBS\"\n       LIBS=\"$LIBS $am_cv_libiconv_ldpath -liconv\"\n       cat > conftest.$ac_ext <<EOF\n-#line 5799 \"configure\"\n+#line 5813 \"configure\"\n #include \"confdefs.h\"\n #include <stdlib.h>\n #include <iconv.h>\n@@ -5805,7 +5819,7 @@ iconv_t cd = iconv_open(\"\",\"\");\n          iconv_close(cd);\n ; return 0; }\n EOF\n-if { (eval echo configure:5809: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5823: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   am_cv_lib_iconv=yes\n         am_cv_func_iconv=yes\n@@ -5826,13 +5840,13 @@ echo \"$ac_t\"\"$am_cv_func_iconv\" 1>&6\n EOF\n \n     echo $ac_n \"checking for iconv declaration\"\"... $ac_c\" 1>&6\n-echo \"configure:5830: checking for iconv declaration\" >&5\n+echo \"configure:5844: checking for iconv declaration\" >&5\n     if eval \"test \\\"`echo '$''{'am_cv_proto_iconv'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   \n       cat > conftest.$ac_ext <<EOF\n-#line 5836 \"configure\"\n+#line 5850 \"configure\"\n #include \"confdefs.h\"\n \n #include <stdlib.h>\n@@ -5851,7 +5865,7 @@ int main() {\n \n ; return 0; }\n EOF\n-if { (eval echo configure:5855: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:5869: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   am_cv_proto_iconv_arg1=\"\"\n else\n@@ -5880,19 +5894,19 @@ EOF\n \n    \n   echo $ac_n \"checking for nl_langinfo and CODESET\"\"... $ac_c\" 1>&6\n-echo \"configure:5884: checking for nl_langinfo and CODESET\" >&5\n+echo \"configure:5898: checking for nl_langinfo and CODESET\" >&5\n if eval \"test \\\"`echo '$''{'am_cv_langinfo_codeset'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5889 \"configure\"\n+#line 5903 \"configure\"\n #include \"confdefs.h\"\n #include <langinfo.h>\n int main() {\n char* cs = nl_langinfo(CODESET);\n ; return 0; }\n EOF\n-if { (eval echo configure:5896: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5910: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   am_cv_langinfo_codeset=yes\n else\n@@ -5915,19 +5929,19 @@ EOF\n \n    if test $ac_cv_header_locale_h = yes; then\n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:5919: checking for LC_MESSAGES\" >&5\n+echo \"configure:5933: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'am_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5924 \"configure\"\n+#line 5938 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:5931: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5945: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   am_cv_val_LC_MESSAGES=yes\n else\n@@ -5948,7 +5962,7 @@ EOF\n     fi\n   fi\n    echo $ac_n \"checking whether NLS is requested\"\"... $ac_c\" 1>&6\n-echo \"configure:5952: checking whether NLS is requested\" >&5\n+echo \"configure:5966: checking whether NLS is requested\" >&5\n         # Check whether --enable-nls or --disable-nls was given.\n if test \"${enable_nls+set}\" = set; then\n   enableval=\"$enable_nls\"\n@@ -5971,7 +5985,7 @@ fi\n EOF\n \n       echo $ac_n \"checking whether included gettext is requested\"\"... $ac_c\" 1>&6\n-echo \"configure:5975: checking whether included gettext is requested\" >&5\n+echo \"configure:5989: checking whether included gettext is requested\" >&5\n       # Check whether --with-included-gettext or --without-included-gettext was given.\n if test \"${with_included_gettext+set}\" = set; then\n   withval=\"$with_included_gettext\"\n@@ -5991,17 +6005,17 @@ fi\n \n \tac_safe=`echo \"libintl.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for libintl.h\"\"... $ac_c\" 1>&6\n-echo \"configure:5995: checking for libintl.h\" >&5\n+echo \"configure:6009: checking for libintl.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 6000 \"configure\"\n+#line 6014 \"configure\"\n #include \"confdefs.h\"\n #include <libintl.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:6005: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:6019: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -6022,12 +6036,12 @@ if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n EOF\n \n            echo $ac_n \"checking for GNU gettext in libc\"\"... $ac_c\" 1>&6\n-echo \"configure:6026: checking for GNU gettext in libc\" >&5\n+echo \"configure:6040: checking for GNU gettext in libc\" >&5\n if eval \"test \\\"`echo '$''{'gt_cv_func_gnugettext1_libc'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 6031 \"configure\"\n+#line 6045 \"configure\"\n #include \"confdefs.h\"\n #include <libintl.h>\n extern int _nl_msg_cat_cntr;\n@@ -6036,7 +6050,7 @@ bindtextdomain (\"\", \"\");\n return (int) gettext (\"\") + _nl_msg_cat_cntr\n ; return 0; }\n EOF\n-if { (eval echo configure:6040: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:6054: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   gt_cv_func_gnugettext1_libc=yes\n else\n@@ -6052,14 +6066,14 @@ echo \"$ac_t\"\"$gt_cv_func_gnugettext1_libc\" 1>&6\n \n \t   if test \"$gt_cv_func_gnugettext1_libc\" != \"yes\"; then\n \t     echo $ac_n \"checking for GNU gettext in libintl\"\"... $ac_c\" 1>&6\n-echo \"configure:6056: checking for GNU gettext in libintl\" >&5\n+echo \"configure:6070: checking for GNU gettext in libintl\" >&5\n if eval \"test \\\"`echo '$''{'gt_cv_func_gnugettext1_libintl'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   gt_save_LIBS=\"$LIBS\"\n \t\tLIBS=\"$LIBS -lintl $LIBICONV\"\n \t\tcat > conftest.$ac_ext <<EOF\n-#line 6063 \"configure\"\n+#line 6077 \"configure\"\n #include \"confdefs.h\"\n #include <libintl.h>\n extern int _nl_msg_cat_cntr;\n@@ -6068,7 +6082,7 @@ bindtextdomain (\"\", \"\");\n return (int) gettext (\"\") + _nl_msg_cat_cntr\n ; return 0; }\n EOF\n-if { (eval echo configure:6072: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:6086: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   gt_cv_func_gnugettext1_libintl=yes\n else\n@@ -6101,12 +6115,12 @@ EOF\n \t     for ac_func in dcgettext\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:6105: checking for $ac_func\" >&5\n+echo \"configure:6119: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 6110 \"configure\"\n+#line 6124 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -6129,7 +6143,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:6133: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:6147: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -6158,7 +6172,7 @@ done\n \t     \t     # Extract the first word of \"msgfmt\", so it can be a program name with args.\n set dummy msgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:6162: checking for $ac_word\" >&5\n+echo \"configure:6176: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_path_MSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6192,7 +6206,7 @@ fi\n \t     # Extract the first word of \"gmsgfmt\", so it can be a program name with args.\n set dummy gmsgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:6196: checking for $ac_word\" >&5\n+echo \"configure:6210: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_path_GMSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6229,7 +6243,7 @@ fi\n \t     \t     # Extract the first word of \"xgettext\", so it can be a program name with args.\n set dummy xgettext; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:6233: checking for $ac_word\" >&5\n+echo \"configure:6247: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_path_XGETTEXT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6279,7 +6293,7 @@ fi\n         # Extract the first word of \"msgfmt\", so it can be a program name with args.\n set dummy msgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:6283: checking for $ac_word\" >&5\n+echo \"configure:6297: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_path_MSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6313,7 +6327,7 @@ fi\n         # Extract the first word of \"gmsgfmt\", so it can be a program name with args.\n set dummy gmsgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:6317: checking for $ac_word\" >&5\n+echo \"configure:6331: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_path_GMSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6349,7 +6363,7 @@ fi\n         # Extract the first word of \"xgettext\", so it can be a program name with args.\n set dummy xgettext; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:6353: checking for $ac_word\" >&5\n+echo \"configure:6367: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_path_XGETTEXT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6421,7 +6435,7 @@ do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:6425: checking for $ac_word\" >&5\n+echo \"configure:6439: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_INTLBISON'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6454,7 +6468,7 @@ done\n       ac_verc_fail=yes\n     else\n             echo $ac_n \"checking version of bison\"\"... $ac_c\" 1>&6\n-echo \"configure:6458: checking version of bison\" >&5\n+echo \"configure:6472: checking version of bison\" >&5\n       ac_prog_version=`$INTLBISON --version 2>&1 | sed -n 's/^.*GNU Bison.* \\([0-9]*\\.[0-9.]*\\).*$/\\1/p'`\n       case $ac_prog_version in\n         '') ac_prog_version=\"v. ?.??, bad\"; ac_verc_fail=yes;;\n@@ -6499,7 +6513,7 @@ EOF\n \n          if test \"x$CATOBJEXT\" != x; then\n      echo $ac_n \"checking for catalogs to be installed\"\"... $ac_c\" 1>&6\n-echo \"configure:6503: checking for catalogs to be installed\" >&5\n+echo \"configure:6517: checking for catalogs to be installed\" >&5\n      # Look for .po and .gmo files in the source directory.\n      CATALOGS=\n      XLINGUAS=\n@@ -6557,7 +6571,7 @@ fi\n case $host_os in\n \twin32 | pe | cygwin* | mingw32* | uwin*)\n echo $ac_n \"checking whether windows registry support is requested\"\"... $ac_c\" 1>&6\n-echo \"configure:6561: checking whether windows registry support is requested\" >&5\n+echo \"configure:6575: checking whether windows registry support is requested\" >&5\n if test \"x$enable_win32_registry\" != xno; then\n   cat >> confdefs.h <<\\EOF\n #define ENABLE_WIN32_REGISTRY 1\n@@ -6566,14 +6580,14 @@ EOF\n   echo \"$ac_t\"\"yes\" 1>&6\n   \n echo $ac_n \"checking for library containing RegOpenKeyExA\"\"... $ac_c\" 1>&6\n-echo \"configure:6570: checking for library containing RegOpenKeyExA\" >&5\n+echo \"configure:6584: checking for library containing RegOpenKeyExA\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_search_RegOpenKeyExA'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_func_search_save_LIBS=\"$LIBS\"\n ac_cv_search_RegOpenKeyExA=\"no\"\n cat > conftest.$ac_ext <<EOF\n-#line 6577 \"configure\"\n+#line 6591 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -6584,7 +6598,7 @@ int main() {\n RegOpenKeyExA()\n ; return 0; }\n EOF\n-if { (eval echo configure:6588: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:6602: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_search_RegOpenKeyExA=\"none required\"\n else\n@@ -6595,7 +6609,7 @@ rm -f conftest*\n test \"$ac_cv_search_RegOpenKeyExA\" = \"no\" && for i in advapi32; do\n LIBS=\"-l$i  $ac_func_search_save_LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 6599 \"configure\"\n+#line 6613 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -6606,7 +6620,7 @@ int main() {\n RegOpenKeyExA()\n ; return 0; }\n EOF\n-if { (eval echo configure:6610: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:6624: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_search_RegOpenKeyExA=\"-l$i\"\n break\n@@ -6648,7 +6662,7 @@ esac\n \n if test \"x$enable_win32_registry\" != xno; then\n   echo $ac_n \"checking registry key on windows hosts\"\"... $ac_c\" 1>&6\n-echo \"configure:6652: checking registry key on windows hosts\" >&5\n+echo \"configure:6666: checking registry key on windows hosts\" >&5\n   cat >> confdefs.h <<EOF\n #define WIN32_REGISTRY_KEY \"$gcc_cv_win32_registry_key\"\n EOF\n@@ -6862,7 +6876,7 @@ fi\n \n # Figure out what assembler we will be using.\n echo $ac_n \"checking what assembler to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6866: checking what assembler to use\" >&5\n+echo \"configure:6880: checking what assembler to use\" >&5\n gcc_cv_as=\n gcc_cv_gas_major_version=\n gcc_cv_gas_minor_version=\n@@ -6956,7 +6970,7 @@ fi\n \n # Figure out what linker we will be using.\n echo $ac_n \"checking what linker to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6960: checking what linker to use\" >&5\n+echo \"configure:6974: checking what linker to use\" >&5\n gcc_cv_ld=\n gcc_cv_gld_major_version=\n gcc_cv_gld_minor_version=\n@@ -7049,7 +7063,7 @@ fi\n \n # Figure out what nm we will be using.\n echo $ac_n \"checking what nm to use\"\"... $ac_c\" 1>&6\n-echo \"configure:7053: checking what nm to use\" >&5\n+echo \"configure:7067: checking what nm to use\" >&5\n if test -x nm$host_exeext; then\n \tgcc_cv_nm=./nm$host_exeext\n elif test \"x$program_prefix\" != xNONE; then\n@@ -7061,7 +7075,7 @@ echo \"$ac_t\"\"$gcc_cv_nm\" 1>&6\n \n # Figure out what objdump we will be using.\n echo $ac_n \"checking what objdump to use\"\"... $ac_c\" 1>&6\n-echo \"configure:7065: checking what objdump to use\" >&5\n+echo \"configure:7079: checking what objdump to use\" >&5\n if test -x objdump$host_exeext; then\n \tgcc_cv_objdump=./objdump$host_exeext\n elif test \"x$program_prefix\" != xNONE; then\n@@ -7073,7 +7087,7 @@ echo \"$ac_t\"\"$gcc_cv_objdump\" 1>&6\n \n # Figure out what assembler alignment features are present.\n echo $ac_n \"checking assembler alignment features\"\"... $ac_c\" 1>&6\n-echo \"configure:7077: checking assembler alignment features\" >&5\n+echo \"configure:7091: checking assembler alignment features\" >&5\n gcc_cv_as_alignment_features=none\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n \t# Gas version 2.6 and later support for .balign and .p2align.\n@@ -7121,7 +7135,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_alignment_features\" 1>&6\n \n echo $ac_n \"checking assembler subsection support\"\"... $ac_c\" 1>&6\n-echo \"configure:7125: checking assembler subsection support\" >&5\n+echo \"configure:7139: checking assembler subsection support\" >&5\n gcc_cv_as_subsections=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7161,7 +7175,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_subsections\" 1>&6\n \n echo $ac_n \"checking assembler weak support\"\"... $ac_c\" 1>&6\n-echo \"configure:7165: checking assembler weak support\" >&5\n+echo \"configure:7179: checking assembler weak support\" >&5\n gcc_cv_as_weak=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 2 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7184,7 +7198,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_weak\" 1>&6\n \n echo $ac_n \"checking assembler hidden support\"\"... $ac_c\" 1>&6\n-echo \"configure:7188: checking assembler hidden support\" >&5\n+echo \"configure:7202: checking assembler hidden support\" >&5\n gcc_cv_as_hidden=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2\t\\\n@@ -7247,7 +7261,7 @@ libgcc_visibility=$gcc_cv_as_hidden\n \n \n echo $ac_n \"checking assembler leb128 support\"\"... $ac_c\" 1>&6\n-echo \"configure:7251: checking assembler leb128 support\" >&5\n+echo \"configure:7265: checking assembler leb128 support\" >&5\n gcc_cv_as_leb128=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 11 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7292,7 +7306,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_leb128\" 1>&6\n \n echo $ac_n \"checking assembler eh_frame optimization\"\"... $ac_c\" 1>&6\n-echo \"configure:7296: checking assembler eh_frame optimization\" >&5\n+echo \"configure:7310: checking assembler eh_frame optimization\" >&5\n gcc_cv_as_eh_frame=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7373,7 +7387,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_eh_frame\" 1>&6\n \n echo $ac_n \"checking assembler section merging support\"\"... $ac_c\" 1>&6\n-echo \"configure:7377: checking assembler section merging support\" >&5\n+echo \"configure:7391: checking assembler section merging support\" >&5\n gcc_cv_as_shf_merge=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7396,7 +7410,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_shf_merge\" 1>&6\n \n echo $ac_n \"checking assembler thread-local storage support\"\"... $ac_c\" 1>&6\n-echo \"configure:7400: checking assembler thread-local storage support\" >&5\n+echo \"configure:7414: checking assembler thread-local storage support\" >&5\n gcc_cv_as_tls=no\n conftest_s=\n tls_first_major=\n@@ -7488,7 +7502,7 @@ case \"$target\" in\n   # All TARGET_ABI_OSF targets.\n   alpha*-*-osf* | alpha*-*-linux* | alpha*-*-*bsd*)\n     echo $ac_n \"checking assembler supports explicit relocations\"\"... $ac_c\" 1>&6\n-echo \"configure:7492: checking assembler supports explicit relocations\" >&5\n+echo \"configure:7506: checking assembler supports explicit relocations\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_explicit_relocs'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7538,7 +7552,7 @@ EOF\n     ;;\n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n-echo \"configure:7542: checking assembler .register pseudo-op support\" >&5\n+echo \"configure:7556: checking assembler .register pseudo-op support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7566,7 +7580,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler supports -relax\"\"... $ac_c\" 1>&6\n-echo \"configure:7570: checking assembler supports -relax\" >&5\n+echo \"configure:7584: checking assembler supports -relax\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_relax_opt'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7594,7 +7608,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler and linker support unaligned pc related relocs\"\"... $ac_c\" 1>&6\n-echo \"configure:7598: checking assembler and linker support unaligned pc related relocs\" >&5\n+echo \"configure:7612: checking assembler and linker support unaligned pc related relocs\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_sparc_ua_pcrel'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7621,7 +7635,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler and linker support unaligned pc related relocs against hidden symbols\"\"... $ac_c\" 1>&6\n-echo \"configure:7625: checking assembler and linker support unaligned pc related relocs against hidden symbols\" >&5\n+echo \"configure:7639: checking assembler and linker support unaligned pc related relocs against hidden symbols\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_sparc_ua_pcrel_hidden'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7662,7 +7676,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:7666: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:7680: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7702,7 +7716,7 @@ EOF\n \n   i[34567]86-*-* | x86_64-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:7706: checking assembler instructions\" >&5\n+echo \"configure:7720: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7729,7 +7743,7 @@ EOF\n     echo \"$ac_t\"\"$gcc_cv_as_instructions\" 1>&6\n \n     echo $ac_n \"checking assembler GOTOFF in data directives\"\"... $ac_c\" 1>&6\n-echo \"configure:7733: checking assembler GOTOFF in data directives\" >&5\n+echo \"configure:7747: checking assembler GOTOFF in data directives\" >&5\n     gcc_cv_as_gotoff_in_data=no\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x\n     then\n@@ -7759,7 +7773,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:7763: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:7777: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -7815,7 +7829,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_dwarf2_debug_line\" 1>&6\n \n echo $ac_n \"checking assembler --gdwarf2 support\"\"... $ac_c\" 1>&6\n-echo \"configure:7819: checking assembler --gdwarf2 support\" >&5\n+echo \"configure:7833: checking assembler --gdwarf2 support\" >&5\n gcc_cv_as_gdwarf2_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -7844,7 +7858,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gdwarf2_flag\" 1>&6\n \n echo $ac_n \"checking assembler --gstabs support\"\"... $ac_c\" 1>&6\n-echo \"configure:7848: checking assembler --gstabs support\" >&5\n+echo \"configure:7862: checking assembler --gstabs support\" >&5\n gcc_cv_as_gstabs_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -7872,7 +7886,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gstabs_flag\" 1>&6\n \n echo $ac_n \"checking linker PT_GNU_EH_FRAME support\"\"... $ac_c\" 1>&6\n-echo \"configure:7876: checking linker PT_GNU_EH_FRAME support\" >&5\n+echo \"configure:7890: checking linker PT_GNU_EH_FRAME support\" >&5\n gcc_cv_ld_eh_frame_hdr=no\n if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n   if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 12 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n@@ -8044,7 +8058,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:8048: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:8062: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\"\n@@ -8555,6 +8569,7 @@ s%@TARGET_GETGROUPS_T@%$TARGET_GETGROUPS_T%g\n s%@LIBICONV@%$LIBICONV%g\n s%@manext@%$manext%g\n s%@objext@%$objext%g\n+s%@extra_modes_file@%$extra_modes_file%g\n s%@FORBUILD@%$FORBUILD%g\n s%@PACKAGE@%$PACKAGE%g\n s%@VERSION@%$VERSION%g"}, {"sha": "418fba771cbc4d960502ec0a9e726d322ae248c4", "filename": "gcc/configure.in", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -869,6 +869,19 @@ if test x$thread_file = x; then\n \tfi\n fi\n \n+# Look for a file containing extra machine modes.\n+if test -f $srcdir/config/${cpu_type}/${cpu_type}-modes.def; then\n+  extra_modes_file='$(srcdir)/config/'${cpu_type}/${cpu_type}-modes.def\n+  AC_SUBST(extra_modes_file)\n+  AC_DEFINE_UNQUOTED(EXTRA_MODES_FILE,\n+\t\t\t   \"${cpu_type}/${cpu_type}-modes.def\",\n+  [Define to the name of a file containing a list of extra machine modes\n+   for this architecture.])\n+  AC_DEFINE(EXTRA_CC_MODES, 1,\n+  [Define if the target architecture needs extra machine modes to represent\n+   the results of comparisons.])\n+fi\n+\n # auto-host.h is the file containing items generated by autoconf and is\n # the first file included by config.h.\n # If host=build, it is correct to have hconfig include auto-host.h"}, {"sha": "24ed26be88d81c8c8ae242384d14c34b4f742693", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -674,6 +674,10 @@ possibly a target Makefile fragment @file{t-@var{machine}}\n some other files.  The names of these files may be changed from the\n defaults given by explicit specifications in @file{config.gcc}.\n @item\n+If necessary, a file @file{@var{machine}-modes.def} in the\n+@file{@var{machine}} directory, containing additional machine modes to\n+represent condition codes.  @xref{Condition Code}, for further details.\n+@item\n Entries in @file{config.gcc} (@pxref{System Config, , The\n @file{config.gcc} File}) for the systems with this target\n architecture."}, {"sha": "fe712dc7d812edef5b6ed9f2bfce1fb78c3fa1d9", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -4985,24 +4985,29 @@ two places, the @file{md} file and in @code{NOTICE_UPDATE_CC}.\n \n @findex EXTRA_CC_MODES\n @item EXTRA_CC_MODES\n-A list of additional modes for condition code values in registers\n-(@pxref{Jump Patterns}).  This macro should expand to a sequence of\n-calls of the macro @code{CC} separated by white space.  @code{CC} takes\n-two arguments.  The first is the enumeration name of the mode, which\n-should begin with @samp{CC} and end with @samp{mode}.  The second is a C\n-string giving the printable name of the mode; it should be the same as\n-the first argument, but with the trailing @samp{mode} removed.\n+Condition codes are represented in registers by machine modes of class\n+@code{MODE_CC}.  By default, there is just one mode, @code{CCmode}, with\n+this class.  If you need more such modes, create a file named\n+@file{@var{machine}-modes.def} in your @file{config/@var{machine}}\n+directory (@pxref{Back End, , Anatomy of a Target Back End}), containing\n+a list of these modes.  Each entry in the list should be a call to the\n+macro @code{CC}.  This macro takes one argument, which is the name of\n+the mode: it should begin with @samp{CC}.  Do not put quotation marks\n+around the name, or include the trailing @samp{mode}; these are\n+automatically added.  There should not be anything else in the file\n+except comments.\n+\n+A sample @file{@var{machine}-modes.def} file might look like this:\n \n-You should only define this macro if additional modes are required.\n-\n-A sample definition of @code{EXTRA_CC_MODES} is:\n @smallexample\n-#define EXTRA_CC_MODES            \\\n-    CC(CC_NOOVmode, \"CC_NOOV\")    \\\n-    CC(CCFPmode, \"CCFP\")          \\\n-    CC(CCFPEmode, \"CCFPE\")\n+CC (CC_NOOV)   /* @r{Comparison only valid if there was no overflow.} */\n+CC (CCFP)      /* @r{Floating point comparison that cannot trap.} */\n+CC (CCFPE)     /* @r{Floating point comparison that may trap.} */\n @end smallexample\n \n+When you create this file, the macro @code{EXTRA_CC_MODES} is\n+automatically defined by @command{configure}, with value @samp{1}.\n+\n @findex SELECT_CC_MODE\n @item SELECT_CC_MODE (@var{op}, @var{x}, @var{y})\n Returns a mode from class @code{MODE_CC} to be used when comparison"}, {"sha": "13da298fd268f3d85d12d68d4c5c43de01711d9b", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -36,6 +36,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n \n+#include \"symcat.h\"\n #include \"machmode.h\"\n \n /* Don't use `fancy_abort' here even if config.h says to use it.  */"}, {"sha": "fe4b96eca209dc68a3b9eb478126cd2a2f5cbccc", "filename": "gcc/machmode.def", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5381466722c3597aed833ae73b17350765f6659/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=a5381466722c3597aed833ae73b17350765f6659", "patch": "@@ -151,18 +151,20 @@ DEF_MACHMODE (BLKmode, \"BLK\", MODE_RANDOM, 0, 0, 0, VOIDmode, VOIDmode)\n \n /* The modes for representing the condition codes come last.  CCmode\n    is always defined.  Additional modes for the condition code can be\n-   specified in the EXTRA_CC_MODES macro.  All MODE_CC modes are the\n+   specified in the EXTRA_CC_MODES header.  All MODE_CC modes are the\n    same width as SImode and have VOIDmode as their next wider mode.  */\n \n-#define CC(E, M)  DEF_MACHMODE (E, M, MODE_CC, BITS_PER_UNIT*4, 4, 4, VOIDmode, VOIDmode)\n-\n-CC (CCmode, \"CC\")\n-\n-#ifdef EXTRA_CC_MODES\n-EXTRA_CC_MODES\n-#endif\n+/* We do not use CC() for CCmode to avoid a warning about use of\n+   function-like macros with no arguments.  */\n+DEF_MACHMODE (CCmode, \"CC\", MODE_CC, BITS_PER_UNIT*4, 4, 4, VOIDmode, VOIDmode)\n \n+#ifdef EXTRA_MODES_FILE\n+#define CC(N)  \\\n+  DEF_MACHMODE (CONCAT2 (N,mode), STRINGX (N), \\\n+                MODE_CC, BITS_PER_UNIT*4, 4, 4, VOIDmode, VOIDmode)\n+#include EXTRA_MODES_FILE\n #undef CC\n+#endif\n \n /* The symbol Pmode stands for one of the above machine modes (usually SImode).\n    The tm file specifies which one.  It is not a distinct mode.  */"}]}