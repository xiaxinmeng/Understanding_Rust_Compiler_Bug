{"sha": "302486f4fb52bf49b2a3b581e24c30b9a680da91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyNDg2ZjRmYjUyYmY0OWIyYTNiNTgxZTI0YzMwYjlhNjgwZGE5MQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2009-12-26T12:40:27Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2009-12-26T12:40:27Z"}, "message": "ffi.c (ffi_prep_args_SYSV): Advance intarg_count when a float arguments is passed in memory.\n\n* src/powerpc/ffi.c (ffi_prep_args_SYSV): Advance intarg_count\nwhen a float arguments is passed in memory.\n(ffi_closure_helper_SYSV): Mark general registers as used up when\na 64bit or soft-float long double argument is passed in memory.\n\nFrom-SVN: r155473", "tree": {"sha": "9935e6a734031f551b99d61c12d084336d953765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9935e6a734031f551b99d61c12d084336d953765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/302486f4fb52bf49b2a3b581e24c30b9a680da91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302486f4fb52bf49b2a3b581e24c30b9a680da91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302486f4fb52bf49b2a3b581e24c30b9a680da91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302486f4fb52bf49b2a3b581e24c30b9a680da91/comments", "author": null, "committer": null, "parents": [{"sha": "b8f38e89177827e3536d9e5f930a4fb025c741eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f38e89177827e3536d9e5f930a4fb025c741eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8f38e89177827e3536d9e5f930a4fb025c741eb"}], "stats": {"total": 362, "additions": 186, "deletions": 176}, "files": [{"sha": "cf3605016e1ccc222cff31d669adc42b06c24db0", "filename": "libffi/ChangeLog", "status": "modified", "additions": 183, "deletions": 176, "changes": 359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302486f4fb52bf49b2a3b581e24c30b9a680da91/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302486f4fb52bf49b2a3b581e24c30b9a680da91/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=302486f4fb52bf49b2a3b581e24c30b9a680da91", "patch": "@@ -1,3 +1,10 @@\n+2009-12-26  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\t* src/powerpc/ffi.c (ffi_prep_args_SYSV): Advance intarg_count\n+\twhen a float arguments is passed in memory.\n+\t(ffi_closure_helper_SYSV): Mark general registers as used up when\n+\ta 64bit or soft-float long double argument is passed in memory.\n+\n 2009-12-25  Matthias Klose  <doko@ubuntu.com>\n \n \t* man/ffi_call.3: Fix #include in examples.\n@@ -10,7 +17,7 @@\n \tIRIX MIPSPro c99.\n \t* include/ffi_common.h: Added '__sgi' define to non\n \t'__attribute__((__mode__()))' integer typedefs.\n-        * src/mips/ffi.c (ffi_call, ffi_closure_mips_inner_O32,\n+\t* src/mips/ffi.c (ffi_call, ffi_closure_mips_inner_O32,\n \tffi_closure_mips_inner_N32): Added 'defined(_MIPSEB)' to BE check.\n \t(ffi_closure_mips_inner_O32, ffi_closure_mips_inner_N32): Added\n \tFFI_LONGDOUBLE support and alignment(N32 only).\n@@ -86,7 +93,7 @@\n 2009-12-04  David Edelsohn  <edelsohn@gnu.org>\n \n \t* src/powerpc/aix_closure.S: Reorganize 64-bit code to match\n-        linux64_closure.S.\n+\tlinux64_closure.S.\n \n 2009-12-04  Uros Bizjak  <ubizjak@gmail.com>\n \n@@ -292,7 +299,7 @@\n \n \t* testsuite/libffi.call/err_bad_typedef.c: xfail everywhere.\n \t* testsuite/libffi.call/err_bad_abi.c: Likewise.\n-\t\n+\n 2009-06-12  Andrew Haley  <aph@redhat.com>\n \n \t* Makefile.am: Remove info_TEXINFOS.\n@@ -310,33 +317,33 @@\n 2009-06-11  Timothy Wall  <twall@users.sf.net>\n \n \t* Makefile.am,\n-        configure.ac,\n-        include/ffi.h.in,\n-        include/ffi_common.h,\n-        src/closures.c,\n-        src/dlmalloc.c,\n-        src/x86/ffi.c,\n-        src/x86/ffitarget.h,\n-        src/x86/win64.S (new),\n+\tconfigure.ac,\n+\tinclude/ffi.h.in,\n+\tinclude/ffi_common.h,\n+\tsrc/closures.c,\n+\tsrc/dlmalloc.c,\n+\tsrc/x86/ffi.c,\n+\tsrc/x86/ffitarget.h,\n+\tsrc/x86/win64.S (new),\n \tREADME: Added win64 support (mingw or MSVC)\n-        * Makefile.in,\n-        include/Makefile.in,\n-        man/Makefile.in,\n-        testsuite/Makefile.in,\n-        configure,\n-        aclocal.m4: Regenerated\n-        * ltcf-c.sh: properly escape cygwin/w32 path\n-        * man/ffi_call.3: Clarify size requirements for return value.\n-        * src/x86/ffi64.c: Fix filename in comment.\n-        * src/x86/win32.S: Remove unused extern.\n-\n-        * testsuite/libffi.call/closure_fn0.c,\n-        testsuite/libffi.call/closure_fn1.c,\n-        testsuite/libffi.call/closure_fn2.c,\n-        testsuite/libffi.call/closure_fn3.c,\n-        testsuite/libffi.call/closure_fn4.c,\n-        testsuite/libffi.call/closure_fn5.c,\n-        testsuite/libffi.call/closure_fn6.c,\n+\t* Makefile.in,\n+\tinclude/Makefile.in,\n+\tman/Makefile.in,\n+\ttestsuite/Makefile.in,\n+\tconfigure,\n+\taclocal.m4: Regenerated\n+\t* ltcf-c.sh: properly escape cygwin/w32 path\n+\t* man/ffi_call.3: Clarify size requirements for return value.\n+\t* src/x86/ffi64.c: Fix filename in comment.\n+\t* src/x86/win32.S: Remove unused extern.\n+\n+\t* testsuite/libffi.call/closure_fn0.c,\n+\ttestsuite/libffi.call/closure_fn1.c,\n+\ttestsuite/libffi.call/closure_fn2.c,\n+\ttestsuite/libffi.call/closure_fn3.c,\n+\ttestsuite/libffi.call/closure_fn4.c,\n+\ttestsuite/libffi.call/closure_fn5.c,\n+\ttestsuite/libffi.call/closure_fn6.c,\n \ttestsuite/libffi.call/closure_stdcall.c,\n \ttestsuite/libffi.call/cls_12byte.c,\n \ttestsuite/libffi.call/cls_16byte.c,\n@@ -417,8 +424,8 @@\n  \ttestsuite/libffi.call/stret_large2.c,\n  \ttestsuite/libffi.call/stret_medium.c,\n  \ttestsuite/libffi.call/stret_medium2.c,\n-        testsuite/libffi.special/unwindtest.cc: use ffi_closure_alloc instead\n-        of checking for MMAP.  Use intptr_t instead of long casts.\n+\ttestsuite/libffi.special/unwindtest.cc: use ffi_closure_alloc instead\n+\tof checking for MMAP.  Use intptr_t instead of long casts.\n \n 2009-06-11  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n@@ -471,59 +478,59 @@\n \n 2008-12-26  Timothy Wall  <twall@users.sf.net>\n \n-        * testsuite/libffi.call/cls_longdouble.c,\n-        testsuite/libffi.call/cls_longdouble_va.c,\n-        testsuite/libffi.call/cls_align_longdouble.c,\n-        testsuite/libffi.call/cls_align_longdouble_split.c,\n-        testsuite/libffi.call/cls_align_longdouble_split2.c: mark expected\n-        failures on x86_64 cygwin/mingw.\n+\t* testsuite/libffi.call/cls_longdouble.c,\n+\ttestsuite/libffi.call/cls_longdouble_va.c,\n+\ttestsuite/libffi.call/cls_align_longdouble.c,\n+\ttestsuite/libffi.call/cls_align_longdouble_split.c,\n+\ttestsuite/libffi.call/cls_align_longdouble_split2.c: mark expected\n+\tfailures on x86_64 cygwin/mingw.\n \n 2008-12-22  Timothy Wall  <twall@users.sf.net>\n \n-        * testsuite/libffi.call/closure_fn0.c,\n-        testsuite/libffi.call/closure_fn1.c,\n-        testsuite/libffi.call/closure_fn2.c,\n-        testsuite/libffi.call/closure_fn3.c,\n-        testsuite/libffi.call/closure_fn4.c,\n-        testsuite/libffi.call/closure_fn5.c,\n-        testsuite/libffi.call/closure_fn6.c,\n-        testsuite/libffi.call/closure_loc_fn0.c,\n-        testsuite/libffi.call/closure_stdcall.c,\n-        testsuite/libffi.call/cls_align_pointer.c,\n-        testsuite/libffi.call/cls_pointer.c,\n-        testsuite/libffi.call/cls_pointer_stack.c: use portable cast from\n-        pointer to integer (intptr_t).\n-        * testsuite/libffi.call/cls_longdouble.c: disable for win64.\n+\t* testsuite/libffi.call/closure_fn0.c,\n+\ttestsuite/libffi.call/closure_fn1.c,\n+\ttestsuite/libffi.call/closure_fn2.c,\n+\ttestsuite/libffi.call/closure_fn3.c,\n+\ttestsuite/libffi.call/closure_fn4.c,\n+\ttestsuite/libffi.call/closure_fn5.c,\n+\ttestsuite/libffi.call/closure_fn6.c,\n+\ttestsuite/libffi.call/closure_loc_fn0.c,\n+\ttestsuite/libffi.call/closure_stdcall.c,\n+\ttestsuite/libffi.call/cls_align_pointer.c,\n+\ttestsuite/libffi.call/cls_pointer.c,\n+\ttestsuite/libffi.call/cls_pointer_stack.c: use portable cast from\n+\tpointer to integer (intptr_t).\n+\t* testsuite/libffi.call/cls_longdouble.c: disable for win64.\n \n 2008-07-24  Anthony Green  <green@redhat.com>\n \n-        * testsuite/libffi.call/cls_dbls_struct.c,\n-        testsuite/libffi.call/cls_double_va.c,\n-        testsuite/libffi.call/cls_longdouble.c,\n-        testsuite/libffi.call/cls_longdouble_va.c,\n-        testsuite/libffi.call/cls_pointer.c,\n-        testsuite/libffi.call/cls_pointer_stack.c,\n-        testsuite/libffi.call/err_bad_abi.c: Clean up failures from\n-        compiler warnings.\n+\t* testsuite/libffi.call/cls_dbls_struct.c,\n+\ttestsuite/libffi.call/cls_double_va.c,\n+\ttestsuite/libffi.call/cls_longdouble.c,\n+\ttestsuite/libffi.call/cls_longdouble_va.c,\n+\ttestsuite/libffi.call/cls_pointer.c,\n+\ttestsuite/libffi.call/cls_pointer_stack.c,\n+\ttestsuite/libffi.call/err_bad_abi.c: Clean up failures from\n+\tcompiler warnings.\n \n 2008-03-04  Anthony Green  <green@redhat.com>\n-            Blake Chaffin\n-            hos@tamanegi.org\n-\n-        * testsuite/libffi.call/cls_align_longdouble_split2.c\n-          testsuite/libffi.call/cls_align_longdouble_split.c\n-          testsuite/libffi.call/cls_dbls_struct.c\n-          testsuite/libffi.call/cls_double_va.c\n-          testsuite/libffi.call/cls_longdouble.c\n-          testsuite/libffi.call/cls_longdouble_va.c\n-          testsuite/libffi.call/cls_pointer.c\n-          testsuite/libffi.call/cls_pointer_stack.c\n-          testsuite/libffi.call/err_bad_abi.c\n-          testsuite/libffi.call/err_bad_typedef.c\n-          testsuite/libffi.call/stret_large2.c\n-          testsuite/libffi.call/stret_large.c\n-          testsuite/libffi.call/stret_medium2.c\n-          testsuite/libffi.call/stret_medium.c: New tests from Apple.\n+\t    Blake Chaffin\n+\t    hos@tamanegi.org\n+\n+\t* testsuite/libffi.call/cls_align_longdouble_split2.c\n+\t  testsuite/libffi.call/cls_align_longdouble_split.c\n+\t  testsuite/libffi.call/cls_dbls_struct.c\n+\t  testsuite/libffi.call/cls_double_va.c\n+\t  testsuite/libffi.call/cls_longdouble.c\n+\t  testsuite/libffi.call/cls_longdouble_va.c\n+\t  testsuite/libffi.call/cls_pointer.c\n+\t  testsuite/libffi.call/cls_pointer_stack.c\n+\t  testsuite/libffi.call/err_bad_abi.c\n+\t  testsuite/libffi.call/err_bad_typedef.c\n+\t  testsuite/libffi.call/stret_large2.c\n+\t  testsuite/libffi.call/stret_large.c\n+\t  testsuite/libffi.call/stret_medium2.c\n+\t  testsuite/libffi.call/stret_medium.c: New tests from Apple.\n \n 2009-06-05  Andrew Haley  <aph@redhat.com>\n \n@@ -536,24 +543,24 @@\n \tstdcall changes.\n \n 2008-02-26  Anthony Green  <green@redhat.com>\n-            Thomas Heller  <theller@ctypes.org>\n+\t    Thomas Heller  <theller@ctypes.org>\n \n-        * src/x86/ffi.c (ffi_closure_SYSV_inner): Change C++ comment to C\n-        comment.\n+\t* src/x86/ffi.c (ffi_closure_SYSV_inner): Change C++ comment to C\n+\tcomment.\n \n 2008-02-03  Timothy Wall  <twall@users.sf.net>\n \n-        * src/x86/ffi.c (FFI_INIT_TRAMPOLINE_STDCALL): Calculate jump return\n-          offset based on code pointer, not data pointer.\n+\t* src/x86/ffi.c (FFI_INIT_TRAMPOLINE_STDCALL): Calculate jump return\n+\t  offset based on code pointer, not data pointer.\n \n 2008-01-31  Timothy Wall <twall@users.sf.net>\n \n-        * testsuite/libffi.call/closure_stdcall.c: Add test for stdcall\n-        closures.\n-        * src/x86/ffitarget.h: Increase size of trampoline for stdcall\n-        closures.\n-        * src/x86/win32.S: Add assembly for stdcall closure.\n-        * src/x86/ffi.c: Initialize stdcall closure trampoline.\n+\t* testsuite/libffi.call/closure_stdcall.c: Add test for stdcall\n+\tclosures.\n+\t* src/x86/ffitarget.h: Increase size of trampoline for stdcall\n+\tclosures.\n+\t* src/x86/win32.S: Add assembly for stdcall closure.\n+\t* src/x86/ffi.c: Initialize stdcall closure trampoline.\n \n 2009-06-04  Andrew Haley  <aph@redhat.com>\n \n@@ -586,10 +593,10 @@\n \n 2008-02-15  David Daney  <ddaney@avtrex.com>\n \n-        * src/mips/ffi.c (USE__BUILTIN___CLEAR_CACHE):\n-        Define (conditionally), and use it to include cachectl.h.\n-        (ffi_prep_closure_loc): Fix cache flushing.\n-        * src/mips/ffitarget.h (_ABIN32, _ABI64, _ABIO32): Define.\n+\t* src/mips/ffi.c (USE__BUILTIN___CLEAR_CACHE):\n+\tDefine (conditionally), and use it to include cachectl.h.\n+\t(ffi_prep_closure_loc): Fix cache flushing.\n+\t* src/mips/ffitarget.h (_ABIN32, _ABI64, _ABIO32): Define.\n \n 2009-06-04  Andrew Haley  <aph@redhat.com>\n \n@@ -698,7 +705,7 @@\n \t(ffi_closure_v8): Likewise.\n \n 2008-09-26  Peter O'Gorman  <pogma@thewrittenword.com>\n-            Steve Ellcey  <sje@cup.hp.com>\n+\t    Steve Ellcey  <sje@cup.hp.com>\n \n \t* configure: Regenerate for new libtool.\n \t* Makefile.in: Ditto.\n@@ -820,7 +827,7 @@\n \n 2007-12-08  David Daney  <ddaney@avtrex.com>\n \n-\t* src/mips/n32.S (ffi_call_N32):  Replace dadd with ADDU, dsub with \n+\t* src/mips/n32.S (ffi_call_N32):  Replace dadd with ADDU, dsub with\n \tSUBU, add with ADDU and use smaller code sequences.\n \n 2007-12-07  David Daney  <ddaney@avtrex.com>\n@@ -846,7 +853,7 @@\n \tsizeof(ffi_java_raw) for alignment calculations.\n \t(ffi_java_ptrarray_to_raw): Same.\n \t(ffi_java_rvalue_to_raw): Add special handling for FFI_TYPE_POINTER\n-        if FFI_SIZEOF_JAVA_RAW == 4.\n+\tif FFI_SIZEOF_JAVA_RAW == 4.\n \t(ffi_java_raw_to_rvalue): Same.\n \t(ffi_java_raw_call): Change type of raw to ffi_java_raw.\n \t(ffi_java_translate_args): Same.\n@@ -856,7 +863,7 @@\n \n 2007-12-06  David Daney  <ddaney@avtrex.com>\n \n-\t* src/mips/n32.S (ffi_closure_N32): Use 64-bit add instruction on \n+\t* src/mips/n32.S (ffi_closure_N32): Use 64-bit add instruction on\n \tpointer values.\n \n 2007-12-01  Andreas Tobler  <a.tobler@schweiz.org>\n@@ -910,7 +917,7 @@\n \n 2007-08-05  Steven Newbury  <s_j_newbury@yahoo.co.uk>\n \n-\t* src/arm/ffi.c (FFI_INIT_TRAMPOLINE): Use __clear_cache instead of \n+\t* src/arm/ffi.c (FFI_INIT_TRAMPOLINE): Use __clear_cache instead of\n \tdirectly using the sys_cacheflush syscall.\n \n 2007-07-27  Andrew Haley  <aph@redhat.com>\n@@ -1089,7 +1096,7 @@\n \n \t* testsuite/libffi.call/return_ul.c (main): Define return type as\n \tffi_arg.  Use proper printf conversion specifier.\n-\t\n+\n 2007-07-30  Andrew Haley  <aph@redhat.com>\n \n \tPR testsuite/32843\n@@ -1126,84 +1133,84 @@\n \n 2005-12-31  Phil Blundell  <pb@reciva.com>\n \n-\t* src/arm/ffi.c (ffi_prep_incoming_args_SYSV, \n-        ffi_closure_SYSV_inner, ffi_prep_closure): New, add closure support.\n+\t* src/arm/ffi.c (ffi_prep_incoming_args_SYSV,\n+\tffi_closure_SYSV_inner, ffi_prep_closure): New, add closure support.\n \t* src/arm/sysv.S(ffi_closure_SYSV): Likewise.\n \t* src/arm/ffitarget.h (FFI_TRAMPOLINE_SIZE): Likewise.\n \t(FFI_CLOSURES): Enable closure support.\n \n 2007-07-03  Andrew Haley  <aph@hedges.billgatliff.com>\n \n-        * testsuite/libffi.call/cls_multi_ushort.c,\n-        testsuite/libffi.call/cls_align_uint16.c,\n-        testsuite/libffi.call/nested_struct1.c,\n-        testsuite/libffi.call/nested_struct3.c,\n-        testsuite/libffi.call/cls_7_1_byte.c,\n-        testsuite/libffi.call/cls_double.c,\n-        testsuite/libffi.call/nested_struct5.c,\n-        testsuite/libffi.call/nested_struct7.c,\n-        testsuite/libffi.call/cls_sint.c,\n-        testsuite/libffi.call/nested_struct9.c,\n-        testsuite/libffi.call/cls_20byte1.c,\n-        testsuite/libffi.call/cls_multi_sshortchar.c,\n-        testsuite/libffi.call/cls_align_sint64.c,\n-        testsuite/libffi.call/cls_3byte2.c,\n-        testsuite/libffi.call/cls_multi_schar.c,\n-        testsuite/libffi.call/cls_multi_uchar.c,\n-        testsuite/libffi.call/cls_19byte.c,\n-        testsuite/libffi.call/cls_9byte1.c,\n-        testsuite/libffi.call/cls_align_float.c,\n-        testsuite/libffi.call/closure_fn1.c,\n-        testsuite/libffi.call/problem1.c,\n-        testsuite/libffi.call/closure_fn3.c,\n-        testsuite/libffi.call/cls_sshort.c,\n-        testsuite/libffi.call/closure_fn5.c,\n-        testsuite/libffi.call/cls_align_double.c,\n-        testsuite/libffi.call/cls_2byte.c,\n-        testsuite/libffi.call/nested_struct.c,\n-        testsuite/libffi.call/nested_struct10.c,\n-        testsuite/libffi.call/cls_4byte.c,\n-        testsuite/libffi.call/cls_6byte.c,\n-        testsuite/libffi.call/cls_8byte.c,\n-        testsuite/libffi.call/cls_multi_sshort.c,\n-        testsuite/libffi.call/cls_align_uint32.c,\n-        testsuite/libffi.call/cls_align_sint16.c,\n-        testsuite/libffi.call/cls_float.c,\n-        testsuite/libffi.call/cls_20byte.c,\n-        testsuite/libffi.call/cls_5_1_byte.c,\n-        testsuite/libffi.call/nested_struct2.c,\n-        testsuite/libffi.call/cls_24byte.c,\n-        testsuite/libffi.call/nested_struct4.c,\n-        testsuite/libffi.call/nested_struct6.c,\n-        testsuite/libffi.call/cls_64byte.c,\n-        testsuite/libffi.call/nested_struct8.c,\n-        testsuite/libffi.call/cls_uint.c,\n-        testsuite/libffi.call/cls_multi_ushortchar.c,\n-        testsuite/libffi.call/cls_schar.c,\n-        testsuite/libffi.call/cls_uchar.c,\n-        testsuite/libffi.call/cls_align_uint64.c,\n-        testsuite/libffi.call/cls_ulonglong.c,\n-        testsuite/libffi.call/cls_align_longdouble.c,\n-        testsuite/libffi.call/cls_1_1byte.c,\n-        testsuite/libffi.call/cls_12byte.c,\n-        testsuite/libffi.call/cls_3_1byte.c,\n-        testsuite/libffi.call/cls_3byte1.c,\n-        testsuite/libffi.call/cls_4_1byte.c,\n-        testsuite/libffi.call/cls_6_1_byte.c,\n-        testsuite/libffi.call/cls_16byte.c,\n-        testsuite/libffi.call/cls_18byte.c,\n-        testsuite/libffi.call/closure_fn0.c,\n-        testsuite/libffi.call/cls_9byte2.c,\n-        testsuite/libffi.call/closure_fn2.c,\n-        testsuite/libffi.call/closure_fn4.c,\n-        testsuite/libffi.call/cls_ushort.c,\n-        testsuite/libffi.call/closure_fn6.c,\n-        testsuite/libffi.call/cls_5byte.c,\n-        testsuite/libffi.call/cls_align_pointer.c,\n-        testsuite/libffi.call/cls_7byte.c,\n-        testsuite/libffi.call/cls_align_sint32.c,\n-        testsuite/libffi.special/unwindtest_ffi_call.cc,\n-        testsuite/libffi.special/unwindtest.cc: Enable for ARM.\n+\t* testsuite/libffi.call/cls_multi_ushort.c,\n+\ttestsuite/libffi.call/cls_align_uint16.c,\n+\ttestsuite/libffi.call/nested_struct1.c,\n+\ttestsuite/libffi.call/nested_struct3.c,\n+\ttestsuite/libffi.call/cls_7_1_byte.c,\n+\ttestsuite/libffi.call/cls_double.c,\n+\ttestsuite/libffi.call/nested_struct5.c,\n+\ttestsuite/libffi.call/nested_struct7.c,\n+\ttestsuite/libffi.call/cls_sint.c,\n+\ttestsuite/libffi.call/nested_struct9.c,\n+\ttestsuite/libffi.call/cls_20byte1.c,\n+\ttestsuite/libffi.call/cls_multi_sshortchar.c,\n+\ttestsuite/libffi.call/cls_align_sint64.c,\n+\ttestsuite/libffi.call/cls_3byte2.c,\n+\ttestsuite/libffi.call/cls_multi_schar.c,\n+\ttestsuite/libffi.call/cls_multi_uchar.c,\n+\ttestsuite/libffi.call/cls_19byte.c,\n+\ttestsuite/libffi.call/cls_9byte1.c,\n+\ttestsuite/libffi.call/cls_align_float.c,\n+\ttestsuite/libffi.call/closure_fn1.c,\n+\ttestsuite/libffi.call/problem1.c,\n+\ttestsuite/libffi.call/closure_fn3.c,\n+\ttestsuite/libffi.call/cls_sshort.c,\n+\ttestsuite/libffi.call/closure_fn5.c,\n+\ttestsuite/libffi.call/cls_align_double.c,\n+\ttestsuite/libffi.call/cls_2byte.c,\n+\ttestsuite/libffi.call/nested_struct.c,\n+\ttestsuite/libffi.call/nested_struct10.c,\n+\ttestsuite/libffi.call/cls_4byte.c,\n+\ttestsuite/libffi.call/cls_6byte.c,\n+\ttestsuite/libffi.call/cls_8byte.c,\n+\ttestsuite/libffi.call/cls_multi_sshort.c,\n+\ttestsuite/libffi.call/cls_align_uint32.c,\n+\ttestsuite/libffi.call/cls_align_sint16.c,\n+\ttestsuite/libffi.call/cls_float.c,\n+\ttestsuite/libffi.call/cls_20byte.c,\n+\ttestsuite/libffi.call/cls_5_1_byte.c,\n+\ttestsuite/libffi.call/nested_struct2.c,\n+\ttestsuite/libffi.call/cls_24byte.c,\n+\ttestsuite/libffi.call/nested_struct4.c,\n+\ttestsuite/libffi.call/nested_struct6.c,\n+\ttestsuite/libffi.call/cls_64byte.c,\n+\ttestsuite/libffi.call/nested_struct8.c,\n+\ttestsuite/libffi.call/cls_uint.c,\n+\ttestsuite/libffi.call/cls_multi_ushortchar.c,\n+\ttestsuite/libffi.call/cls_schar.c,\n+\ttestsuite/libffi.call/cls_uchar.c,\n+\ttestsuite/libffi.call/cls_align_uint64.c,\n+\ttestsuite/libffi.call/cls_ulonglong.c,\n+\ttestsuite/libffi.call/cls_align_longdouble.c,\n+\ttestsuite/libffi.call/cls_1_1byte.c,\n+\ttestsuite/libffi.call/cls_12byte.c,\n+\ttestsuite/libffi.call/cls_3_1byte.c,\n+\ttestsuite/libffi.call/cls_3byte1.c,\n+\ttestsuite/libffi.call/cls_4_1byte.c,\n+\ttestsuite/libffi.call/cls_6_1_byte.c,\n+\ttestsuite/libffi.call/cls_16byte.c,\n+\ttestsuite/libffi.call/cls_18byte.c,\n+\ttestsuite/libffi.call/closure_fn0.c,\n+\ttestsuite/libffi.call/cls_9byte2.c,\n+\ttestsuite/libffi.call/closure_fn2.c,\n+\ttestsuite/libffi.call/closure_fn4.c,\n+\ttestsuite/libffi.call/cls_ushort.c,\n+\ttestsuite/libffi.call/closure_fn6.c,\n+\ttestsuite/libffi.call/cls_5byte.c,\n+\ttestsuite/libffi.call/cls_align_pointer.c,\n+\ttestsuite/libffi.call/cls_7byte.c,\n+\ttestsuite/libffi.call/cls_align_sint32.c,\n+\ttestsuite/libffi.special/unwindtest_ffi_call.cc,\n+\ttestsuite/libffi.special/unwindtest.cc: Enable for ARM.\n \n 2007-07-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -1295,7 +1302,7 @@\n \t* testsuite/libffi.call/return_fl2.c (return_fl): Mark as static.\n \tUse 'volatile float sum' to create sum of floats to avoid false\n \tnegative due to excess precision on ix86 targets.\n-\t(main): Ditto. \n+\t(main): Ditto.\n \n 2007-03-08  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -1410,7 +1417,7 @@\n 2006-10-10  Paolo Bonzini  <bonzini@gnu.org>\n \t    Sandro Tolaini  <tolaini@libero.it>\n \n-\t* configure.ac [i*86-*-darwin*]: Set X86_DARWIN symbol and \n+\t* configure.ac [i*86-*-darwin*]: Set X86_DARWIN symbol and\n \tconditional.\n \t* configure: Regenerated.\n \t* Makefile.am (nodist_libffi_la_SOURCES) [X86_DARWIN]: New case.\n@@ -1745,7 +1752,7 @@\n \t* src/sh/ffi.c (ffi_closure_helper_SYSV): Remove unused variable\n \tand cast integer to void * if needed.  Update the pointer to\n \tthe FP register saved area correctly.\n-\t\n+\n 2006-02-17  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* testsuite/libffi.call/nested_struct6.c: XFAIL this test until PR25630\n@@ -1937,7 +1944,7 @@\n \n \t* configure.ac: Treat i*86-*-solaris2.10 and up as X86_64.\n \t* configure: Regenerate.\n-\t\n+\n 2005-06-01  Alan Modra  <amodra@bigpond.net.au>\n \n \t* src/powerpc/ppc_closure.S (ffi_closure_SYSV): Don't use JUMPTARGET\n@@ -1951,7 +1958,7 @@\n \t* Makefile.am (ACLOCAL_AMFLAGS): Remove -I ../config.\n \t* aclocal.m4, configure, fficonfig.h.in, Makefile.in,\n \tinclude/Makefile.in, testsuite/Makefile.in: Regenerate.\n-\t\n+\n 2005-05-09  Mike Stump  <mrs@apple.com>\n \n \t* configure: Regenerate.\n@@ -1983,7 +1990,7 @@\n \t* testsuite/lib/libffi-dg.exp (libffi-dg-test-1): In regsub use,\n \thave Tcl8.3-compatible intermediate variable.\n \n-2005-04-18  Simon Posnjak <simon.posnjak@siol.net> \n+2005-04-18  Simon Posnjak <simon.posnjak@siol.net>\n \t    Hans-Peter Nilsson  <hp@axis.com>\n \n \t* Makefile.am: Add CRIS support.\n@@ -2004,7 +2011,7 @@\n 2005-03-30  Hans Boehm  <Hans.Boehm@hp.com>\n \n \t* src/ia64/ffitarget.h (ffi_arg): Use long long instead of DI.\n-\t\n+\n 2005-03-30  Steve Ellcey  <sje@cup.hp.com>\n \n \t* src/ia64/ffitarget.h (ffi_arg) ADD DI attribute."}, {"sha": "75784a96d3b2efd6f7520a97a25c62efc3e2b7cb", "filename": "libffi/src/powerpc/ffi.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302486f4fb52bf49b2a3b581e24c30b9a680da91/libffi%2Fsrc%2Fpowerpc%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302486f4fb52bf49b2a3b581e24c30b9a680da91/libffi%2Fsrc%2Fpowerpc%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Fffi.c?ref=302486f4fb52bf49b2a3b581e24c30b9a680da91", "patch": "@@ -185,6 +185,7 @@ ffi_prep_args_SYSV (extended_cif *ecif, unsigned *const stack)\n \t    {\n \t      *next_arg.f = (float) double_tmp;\n \t      next_arg.u += 1;\n+\t      intarg_count++;\n \t    }\n \t  else\n \t    *fpr_base.d++ = double_tmp;\n@@ -1149,6 +1150,7 @@ ffi_closure_helper_SYSV (ffi_closure *closure, void *rvalue,\n \t\tpst++;\n \t      avalue[i] = pst;\n \t      pst += 2;\n+\t      ng = 8;\n \t    }\n \t  break;\n \n@@ -1222,6 +1224,7 @@ ffi_closure_helper_SYSV (ffi_closure *closure, void *rvalue,\n \t\t{\n \t\t  avalue[i] = pst;\n \t\t  pst += 4;\n+\t\t  ng = 8;\n \t\t}\n \t      break;\n \t    }"}]}