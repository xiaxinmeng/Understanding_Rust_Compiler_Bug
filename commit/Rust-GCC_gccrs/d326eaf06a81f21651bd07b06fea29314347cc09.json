{"sha": "d326eaf06a81f21651bd07b06fea29314347cc09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMyNmVhZjA2YTgxZjIxNjUxYmQwN2IwNmZlYTI5MzE0MzQ3Y2MwOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-01-19T17:10:24Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-01-19T17:10:24Z"}, "message": "invoke.texi (generic): Document (i686) Update.\n\n\t* invoke.texi (generic): Document\n\t(i686) Update.\n\t* config.gcc: Make x86_64-* and i686-* default to generic tunning.\n\t* i386.h (TARGET_GENERIC32, TARGET_GENERIC64, TARGET_GENERIC,\n\tTARGET_USE_INCDEC, TARGET_PAD_RETURNS): New macros.\n\t(x86_use_incdec, x86_pad_returns): New variables\n\t(TARGET_CPU_DEFAULT_generic): New constant\n\t(TARGET_CPU_DEFAULT_NAMES): Add generic.\n\t(enum processor_type): Add generic32 and generic64.\n\t* i386.md (cpu attribute): Add generic32/generic64\n\t(movhi splitter): Behave sanely when both partial_reg_dependency and\n\tpartial_reg_stall are set.\n\t(K8 splitters): Enable for generic as well.\n\t* predicates.md (incdec_operand): Use TARGET_INCDEC\n\t(aligned_operand): Avoid memory mismatch stalls.\n\t* athlon.md: Enable for generic64, new patterns for 128bit moves.\n\t* ppro.md: Enable for generic32\n\t* i386.c (generic64_cost, generic32_cost): New.\n\t(m_GENERIC32, m_GENERIC64, m_GENERIC): New macros.\n\t(x86_use_leave): Enable for generic64.  (x86_use_sahf,\n\tx86_ext_80387_constants): Enable for generic32.  (x86_push_memory,\n\tx86_movx, x86_unroll_strlen, x86_deep_branch, x86_use_simode_fiop,\n\tx86_use_cltd, x86_promote_QImode, x86_sub_esp_4, x86_sub_esp_8,\n\tx86_add_esp_4, x86_add_esp_8, x86_integer_DFmode_moves,\n\tx86_partial_reg_dependency, x86_memory_mismatch_stall,\n\tx86_accumulate_outgoing_args, x86_prologue_using_move,\n\tx86_epilogue_using_move, x86_arch_always_fancy_math_387,\n\tx86_sse_partial_reg_dependency, x86_four_jump_limit, x86_schedule):\n\tEnable for generic.\n\t(x86_use_incdec, x86_pad_returns): New.\n\t(override_options): Add generic32 and generic64, translate \"generic\"\n\tto generic32/generic64 and \"i686\" to \"generic32\", refuse\n\t\"generic32\"/\"generic64\" as arch target.\n\t(ix86_issue_rate, ix86_adjust_cost): Handle generic as athlon.\n\t(ix86_reorg): Honor PAD_RETURNS.\n\nCo-Authored-By: Evandro Menezes <evandro.menezes@amd.com>\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\n\nFrom-SVN: r109971", "tree": {"sha": "663b0dfc372983eeaa2731df2996175f8675550a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/663b0dfc372983eeaa2731df2996175f8675550a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d326eaf06a81f21651bd07b06fea29314347cc09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d326eaf06a81f21651bd07b06fea29314347cc09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d326eaf06a81f21651bd07b06fea29314347cc09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d326eaf06a81f21651bd07b06fea29314347cc09/comments", "author": null, "committer": null, "parents": [{"sha": "d103fa240f8cd5cbde8329a390e7b7430c4b5b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d103fa240f8cd5cbde8329a390e7b7430c4b5b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d103fa240f8cd5cbde8329a390e7b7430c4b5b1a"}], "stats": {"total": 749, "additions": 511, "deletions": 238}, "files": [{"sha": "dfd0290513921994d343039663af1f2c95fed6bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d326eaf06a81f21651bd07b06fea29314347cc09", "patch": "@@ -1,3 +1,43 @@\n+2006-01-19  Jan Hubicka  <jh@suse.cz>\n+            H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Evandro Menezes <evandro.menezes@amd.com>\n+\n+\t* invoke.texi (generic): Document\n+\t(i686) Update.\n+\t* config.gcc: Make x86_64-* and i686-* default to generic tunning.\n+\t* i386.h (TARGET_GENERIC32, TARGET_GENERIC64, TARGET_GENERIC,\n+\tTARGET_USE_INCDEC, TARGET_PAD_RETURNS): New macros.\n+\t(x86_use_incdec, x86_pad_returns): New variables\n+\t(TARGET_CPU_DEFAULT_generic): New constant\n+\t(TARGET_CPU_DEFAULT_NAMES): Add generic.\n+\t(enum processor_type): Add generic32 and generic64.\n+\t* i386.md (cpu attribute): Add generic32/generic64\n+\t(movhi splitter): Behave sanely when both partial_reg_dependency and\n+\tpartial_reg_stall are set.\n+\t(K8 splitters): Enable for generic as well.\n+\t* predicates.md (incdec_operand): Use TARGET_INCDEC\n+\t(aligned_operand): Avoid memory mismatch stalls.\n+\t* athlon.md: Enable for generic64, new patterns for 128bit moves.\n+\t* ppro.md: Enable for generic32\n+\t* i386.c (generic64_cost, generic32_cost): New.\n+\t(m_GENERIC32, m_GENERIC64, m_GENERIC): New macros.\n+\t(x86_use_leave): Enable for generic64.  (x86_use_sahf,\n+\tx86_ext_80387_constants): Enable for generic32.  (x86_push_memory,\n+\tx86_movx, x86_unroll_strlen, x86_deep_branch, x86_use_simode_fiop,\n+\tx86_use_cltd, x86_promote_QImode, x86_sub_esp_4, x86_sub_esp_8,\n+\tx86_add_esp_4, x86_add_esp_8, x86_integer_DFmode_moves,\n+\tx86_partial_reg_dependency, x86_memory_mismatch_stall,\n+\tx86_accumulate_outgoing_args, x86_prologue_using_move,\n+\tx86_epilogue_using_move, x86_arch_always_fancy_math_387,\n+\tx86_sse_partial_reg_dependency, x86_four_jump_limit, x86_schedule):\n+\tEnable for generic.\n+\t(x86_use_incdec, x86_pad_returns): New.\n+\t(override_options): Add generic32 and generic64, translate \"generic\"\n+\tto generic32/generic64 and \"i686\" to \"generic32\", refuse\n+\t\"generic32\"/\"generic64\" as arch target.\n+\t(ix86_issue_rate, ix86_adjust_cost): Handle generic as athlon.\n+\t(ix86_reorg): Honor PAD_RETURNS.\n+\n 2006-01-19  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-pretty-print.c (dump_generic_node): Handle"}, {"sha": "252f10c80adecc49bb0b7df0c43fe4ba29f0b2bf", "filename": "gcc/config.gcc", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d326eaf06a81f21651bd07b06fea29314347cc09", "patch": "@@ -2366,6 +2366,9 @@ if test x$with_cpu = x ; then\n       # A Cirrus ARM variant.\n       with_cpu=\"ep9312\"\n       ;;\n+    i386-*-*)\n+      with_cpu=i386\n+      ;;\n     i486-*-*)\n       with_cpu=i486\n       ;;\n@@ -2417,13 +2420,26 @@ if test x$with_cpu = x ; then\n         pentium_m-*)\n           with_cpu=pentium-m\n           ;;\n-        *)\n+        pentiumpro-*)\n           with_cpu=pentiumpro\n           ;;\n+        *)\n+          with_cpu=generic\n+          ;;\n       esac\n       ;;\n     x86_64-*-*)\n-      with_cpu=k8\n+      case ${target_noncanonical} in\n+        k8-*|opteron-*|athlon_64-*)\n+          with_cpu=k8\n+          ;;\n+        nocona-*)\n+          with_cpu=nocona\n+          ;;\n+        *)\n+          with_cpu=generic\n+          ;;\n+      esac\n       ;;\n     alphaev6[78]*-*-*)\n       with_cpu=ev67\n@@ -2629,13 +2645,21 @@ case \"${target}\" in\n \t\tfor which in arch cpu tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | i386 | i486 \\\n+\t\t\ti386 | i486 \\\n \t\t\t| i586 | pentium | pentium-mmx | winchip-c6 | winchip2 \\\n \t\t\t| c3 | c3-2 | i686 | pentiumpro | pentium2 | pentium3 \\\n \t\t\t| pentium4 | k6 | k6-2 | k6-3 | athlon | athlon-tbird \\\n-\t\t\t| athlon-4 | athlon-xp | athlon-mp | k8 | opteron \\\n-\t\t\t| athlon64 | athlon-fx | prescott | pentium-m \\\n-\t\t\t| pentium4m | pentium3m| nocona)\n+\t\t\t| athlon-4 | athlon-xp | athlon-mp \\\n+\t\t\t| prescott | pentium-m | pentium4m | pentium3m)\n+\t\t\t\tcase \"${target}\" in\n+\t\t\t\t  x86_64-*-*)\n+\t\t\t\t      echo \"CPU given in --with-$which=$val doesn't support 64bit mode.\" 1>&2\n+\t\t\t\t      exit 1\n+\t\t\t\t      ;;\n+\t\t\t\tesac\n+\t\t\t\t# OK\n+\t\t\t\t;;\n+\t\t\t\"\" | k8 | opteron | athlon64 | athlon-fx | nocona | generic)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "86130b778089082c41e8292378bd0a573c74b790", "filename": "gcc/config/i386/athlon.md", "status": "modified", "additions": 100, "deletions": 95, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fathlon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fathlon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fathlon.md?ref=d326eaf06a81f21651bd07b06fea29314347cc09", "patch": "@@ -123,48 +123,48 @@\n (define_cpu_unit \"athlon-fmul\" \"athlon_fp\")\n (define_cpu_unit \"athlon-fstore\" \"athlon_fp\")\n (define_reservation \"athlon-fany\" \"(athlon-fstore | athlon-fmul | athlon-fadd)\")\n-(define_reservation \"athlon-faddmul\" \"(athlon-fmul | athlon-fadd)\")\n+(define_reservation \"athlon-faddmul\" \"(athlon-fadd | athlon-fmul)\")\n \n ;; Vector operations usually consume many of pipes.\n (define_reservation \"athlon-fvector\" \"(athlon-fadd + athlon-fmul + athlon-fstore)\")\n \n \n ;; Jump instructions are executed in the branch unit completely transparent to us\n (define_insn_reservation \"athlon_branch\" 0\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"ibr\"))\n \t\t\t \"athlon-direct,athlon-ieu\")\n (define_insn_reservation \"athlon_call\" 0\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"call,callv\"))\n \t\t\t \"athlon-vector,athlon-ieu\")\n \n ;; Latency of push operation is 3 cycles, but ESP value is available\n ;; earlier\n (define_insn_reservation \"athlon_push\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"push\"))\n \t\t\t \"athlon-direct,athlon-agu,athlon-store\")\n (define_insn_reservation \"athlon_pop\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"pop\"))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu\")\n (define_insn_reservation \"athlon_pop_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"pop\"))\n \t\t\t \"athlon-double,(athlon-ieu+athlon-load)\")\n (define_insn_reservation \"athlon_leave\" 3\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n \t\t\t      (eq_attr \"type\" \"leave\"))\n \t\t\t \"athlon-vector,(athlon-ieu+athlon-load)\")\n (define_insn_reservation \"athlon_leave_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"leave\"))\n \t\t\t \"athlon-double,(athlon-ieu+athlon-load)\")\n \n ;; Lea executes in AGU unit with 2 cycles latency.\n (define_insn_reservation \"athlon_lea\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"lea\"))\n \t\t\t \"athlon-direct,athlon-agu,nothing\")\n \n@@ -176,13 +176,13 @@\n \t\t\t \"athlon-vector,athlon-ieu0,athlon-mult,nothing,nothing,athlon-ieu0\")\n ;; ??? Widening multiply is vector or double.\n (define_insn_reservation \"athlon_imul_k8_DI\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"imul\")\n \t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n \t\t\t\t\t(eq_attr \"memory\" \"none,unknown\"))))\n \t\t\t \"athlon-direct0,athlon-ieu0,athlon-mult,nothing,athlon-ieu0\")\n (define_insn_reservation \"athlon_imul_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"imul\")\n \t\t\t\t   (eq_attr \"memory\" \"none,unknown\")))\n \t\t\t \"athlon-direct0,athlon-ieu0,athlon-mult,athlon-ieu0\")\n@@ -192,13 +192,13 @@\n \t\t\t\t   (eq_attr \"memory\" \"load,both\")))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu,athlon-mult,nothing,nothing,athlon-ieu\")\n (define_insn_reservation \"athlon_imul_mem_k8_DI\" 7\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"imul\")\n \t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load,both\"))))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu,athlon-mult,nothing,athlon-ieu\")\n (define_insn_reservation \"athlon_imul_mem_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"imul\")\n \t\t\t\t   (eq_attr \"memory\" \"load,both\")))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu,athlon-mult,athlon-ieu\")\n@@ -211,67 +211,67 @@\n ;; of the other code\n \n (define_insn_reservation \"athlon_idiv\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"idiv\")\n \t\t\t\t   (eq_attr \"memory\" \"none,unknown\")))\n \t\t\t \"athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))\")\n (define_insn_reservation \"athlon_idiv_mem\" 9\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"idiv\")\n \t\t\t\t   (eq_attr \"memory\" \"load,both\")))\n \t\t\t \"athlon-vector,((athlon-load,athlon-ieu0*6)+(athlon-fpsched,athlon-fvector))\")\n ;; The parallelism of string instructions is not documented.  Model it same way\n ;; as idiv to create smaller automata.  This probably does not matter much.\n (define_insn_reservation \"athlon_str\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"str\")\n \t\t\t\t   (eq_attr \"memory\" \"load,both,store\")))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu0*6\")\n \n (define_insn_reservation \"athlon_idirect\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"none,unknown\"))))\n \t\t\t \"athlon-direct,athlon-ieu\")\n (define_insn_reservation \"athlon_ivector\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"none,unknown\"))))\n \t\t\t \"athlon-vector,athlon-ieu,athlon-ieu\")\n (define_insn_reservation \"athlon_idirect_loadmov\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"imov\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-load\")\n (define_insn_reservation \"athlon_idirect_load\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-load,athlon-ieu\")\n (define_insn_reservation \"athlon_ivector_load\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu,athlon-ieu\")\n (define_insn_reservation \"athlon_idirect_movstore\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"imov\")\n \t\t\t\t   (eq_attr \"memory\" \"store\")))\n \t\t\t \"athlon-direct,athlon-agu,athlon-store\")\n (define_insn_reservation \"athlon_idirect_both\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"both\"))))\n \t\t\t \"athlon-direct,athlon-load,\n \t\t\t  athlon-ieu,athlon-store,\n \t\t\t  athlon-store\")\n (define_insn_reservation \"athlon_ivector_both\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"both\"))))\n@@ -280,14 +280,14 @@\n \t\t\t  athlon-ieu,\n \t\t\t  athlon-store\")\n (define_insn_reservation \"athlon_idirect_store\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"store\"))))\n \t\t\t \"athlon-direct,(athlon-ieu+athlon-agu),\n \t\t\t  athlon-store\")\n (define_insn_reservation \"athlon_ivector_store\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"store\"))))\n@@ -302,7 +302,7 @@\n \t\t\t\t\t(eq_attr \"mode\" \"XF\"))))\n \t\t\t \"athlon-vector,athlon-fpload2,athlon-fvector*9\")\n (define_insn_reservation \"athlon_fldxf_k8\" 13\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fmov\")\n \t\t\t\t   (and (eq_attr \"memory\" \"load\")\n \t\t\t\t\t(eq_attr \"mode\" \"XF\"))))\n@@ -314,7 +314,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fany\")\n (define_insn_reservation \"athlon_fld_k8\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fmov\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fstore\")\n@@ -326,7 +326,7 @@\n \t\t\t\t\t(eq_attr \"mode\" \"XF\"))))\n \t\t\t \"athlon-vector,(athlon-fpsched+athlon-agu),(athlon-store2+(athlon-fvector*7))\")\n (define_insn_reservation \"athlon_fstxf_k8\" 8\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fmov\")\n \t\t\t\t   (and (eq_attr \"memory\" \"store,both\")\n \t\t\t\t\t(eq_attr \"mode\" \"XF\"))))\n@@ -337,16 +337,16 @@\n \t\t\t\t   (eq_attr \"memory\" \"store,both\")))\n \t\t\t \"athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)\")\n (define_insn_reservation \"athlon_fst_k8\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fmov\")\n \t\t\t\t   (eq_attr \"memory\" \"store,both\")))\n \t\t\t \"athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)\")\n (define_insn_reservation \"athlon_fist\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"fistp\"))\n \t\t\t \"athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)\")\n (define_insn_reservation \"athlon_fmov\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"fmov\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-faddmul\")\n (define_insn_reservation \"athlon_fadd_load\" 4\n@@ -355,12 +355,12 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_fadd_load_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fop\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_fadd\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"fop\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n (define_insn_reservation \"athlon_fmul_load\" 4\n@@ -369,16 +369,16 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fmul\")\n (define_insn_reservation \"athlon_fmul_load_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fmul\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fmul\")\n (define_insn_reservation \"athlon_fmul\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"fmul\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_fsgn\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"fsgn\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_fdiv_load\" 24\n@@ -387,7 +387,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fmul\")\n (define_insn_reservation \"athlon_fdiv_load_k8\" 13\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fdiv\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fmul\")\n@@ -396,16 +396,16 @@\n \t\t\t      (eq_attr \"type\" \"fdiv\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_fdiv_k8\" 11\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"fdiv\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_fpspc_load\" 103\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fpspc\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload,athlon-fvector\")\n (define_insn_reservation \"athlon_fpspc\" 100\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"fpspc\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fvector\")\n (define_insn_reservation \"athlon_fcmov_load\" 7\n@@ -418,12 +418,12 @@\n \t\t\t      (eq_attr \"type\" \"fcmov\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fvector\")\n (define_insn_reservation \"athlon_fcmov_load_k8\" 17\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fcmov\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fploadk8,athlon-fvector\")\n (define_insn_reservation \"athlon_fcmov_k8\" 15\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"fcmov\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fvector\")\n ;; fcomi is vector decoded by uses only one pipe.\n@@ -434,13 +434,13 @@\n \t\t\t\t        (eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-vector,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_fcomi_load_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fcmp\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t        (eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-vector,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_fcomi\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t   (eq_attr \"type\" \"fcmp\")))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fadd\")\n@@ -450,18 +450,18 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_fcom_load_k8\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"fcmp\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_fcom\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"fcmp\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n ;; Never seen by the scheduler because we still don't do post reg-stack\n ;; scheduling.\n ;(define_insn_reservation \"athlon_fxch\" 2\n-;\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+;\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n ;\t\t\t      (eq_attr \"type\" \"fxch\"))\n ;\t\t\t \"athlon-direct,athlon-fpsched,athlon-fany\")\n \n@@ -477,8 +477,13 @@\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n \t\t\t\t   (match_operand:DF 1 \"memory_operand\" \"\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fstore\")\n+(define_insn_reservation \"athlon_movsd_load_generic64\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"generic64\")\n+\t\t\t      (and (eq_attr \"type\" \"ssemov\")\n+\t\t\t\t   (match_operand:DF 1 \"memory_operand\" \"\")))\n+\t\t\t \"athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fmul)\")\n (define_insn_reservation \"athlon_movaps_load_k8\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n@@ -496,7 +501,7 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-vector,athlon-fpload,(athlon-fany*2)\")\n (define_insn_reservation \"athlon_movss_load_k8\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n@@ -507,57 +512,57 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fany\")\n (define_insn_reservation \"athlon_mmxsseld_k8\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"mmxmov,ssemov\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fstore\")\n (define_insn_reservation \"athlon_mmxssest\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"mmxmov,ssemov\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n \t\t\t\t\t(eq_attr \"memory\" \"store,both\"))))\n \t\t\t \"athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2)*2)\")\n (define_insn_reservation \"athlon_mmxssest_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"mmxmov,ssemov\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n \t\t\t\t\t(eq_attr \"memory\" \"store,both\"))))\n \t\t\t \"athlon-double,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2)*2)\")\n (define_insn_reservation \"athlon_mmxssest_short\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"mmxmov,ssemov\")\n \t\t\t\t   (eq_attr \"memory\" \"store,both\")))\n \t\t\t \"athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)\")\n-(define_insn_reservation \"athlon_movaps\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+(define_insn_reservation \"athlon_movaps_k8\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n \t\t\t\t   (eq_attr \"mode\" \"V4SF,V2DF,TI\")))\n-\t\t\t \"athlon-double,athlon-fpsched,(athlon-faddmul+athlon-faddmul)\")\n-(define_insn_reservation \"athlon_movaps_k8\" 2\n+\t\t\t \"athlon-double,athlon-fpsched,((athlon-faddmul+athlon-faddmul) | (athlon-faddmul, athlon-faddmul))\")\n+(define_insn_reservation \"athlon_movaps\" 2\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n \t\t\t\t   (eq_attr \"mode\" \"V4SF,V2DF,TI\")))\n \t\t\t \"athlon-vector,athlon-fpsched,(athlon-faddmul+athlon-faddmul)\")\n (define_insn_reservation \"athlon_mmxssemov\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"mmxmov,ssemov\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-faddmul\")\n (define_insn_reservation \"athlon_mmxmul_load\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"mmxmul\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fmul\")\n (define_insn_reservation \"athlon_mmxmul\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"mmxmul\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_mmx_load\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"unit\" \"mmx\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-faddmul\")\n (define_insn_reservation \"athlon_mmx\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"unit\" \"mmx\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-faddmul\")\n ;; SSE operations are handled by the i387 unit as well.  The latency\n@@ -569,7 +574,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,(athlon-fmul*2)\")\n (define_insn_reservation \"athlon_sselog_load_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"sselog,sselog1\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fmul*2)\")\n@@ -578,7 +583,7 @@\n \t\t\t      (eq_attr \"type\" \"sselog,sselog1\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fmul*2\")\n (define_insn_reservation \"athlon_sselog_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"sselog,sselog1\"))\n \t\t\t \"athlon-double,athlon-fpsched,athlon-fmul\")\n ;; ??? pcmp executes in addmul, probably not worthwhile to bother about that.\n@@ -589,13 +594,13 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecmp_load_k8\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecmp\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF,DI,TI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecmp\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecmp\")\n \t\t\t\t   (eq_attr \"mode\" \"SF,DF,DI,TI\")))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n@@ -605,7 +610,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_ssecmpvector_load_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecmp\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fadd*2)\")\n@@ -614,7 +619,7 @@\n \t\t\t      (eq_attr \"type\" \"ssecmp\"))\n \t\t\t \"athlon-vector,athlon-fpsched,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_ssecmpvector_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"ssecmp\"))\n \t\t\t \"athlon-double,athlon-fpsched,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_ssecomi_load\" 4\n@@ -623,12 +628,12 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecomi_load_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecomi\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecomi\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"ssecmp\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fadd\")\n (define_insn_reservation \"athlon_sseadd_load\" 4\n@@ -638,13 +643,13 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_sseadd_load_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"sseadd\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF,DI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_sseadd\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"sseadd\")\n \t\t\t\t   (eq_attr \"mode\" \"SF,DF,DI\")))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n@@ -654,7 +659,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_sseaddvector_load_k8\" 7\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"sseadd\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fadd*2)\")\n@@ -663,7 +668,7 @@\n \t\t\t      (eq_attr \"type\" \"sseadd\"))\n \t\t\t \"athlon-vector,athlon-fpsched,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_sseaddvector_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"sseadd\"))\n \t\t\t \"athlon-double,athlon-fpsched,(athlon-fadd*2)\")\n \n@@ -673,28 +678,28 @@\n \n ;; cvtss2sd\n (define_insn_reservation \"athlon_ssecvt_cvtss2sd_load_k8\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"k8,athlon\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"DF\")\n \t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fstore\")\n (define_insn_reservation \"athlon_ssecvt_cvtss2sd\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t\t(eq_attr \"mode\" \"DF\"))))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fstore\")\n ;; cvtps2pd.  Model same way the other double decoded FP conversions.\n (define_insn_reservation \"athlon_ssecvt_cvtps2pd_load_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8,athlon\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"V2DF,V4SF,TI\")\n \t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fstore*2)\")\n (define_insn_reservation \"athlon_ssecvt_cvtps2pd_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8,athlon\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(eq_attr \"mode\" \"V2DF,V4SF,TI\"))))\n@@ -717,46 +722,46 @@\n \t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n \t\t\t \"athlon-vector,athlon-fpload,(athlon-fstore*2)\")\n (define_insn_reservation \"athlon_sseicvt_cvtsi2ss_load_k8\" 9\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"sseicvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SF,DF\")\n \t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n \t\t\t \"athlon-double,athlon-fploadk8,(athlon-fstore*2)\")\n ;; cvtsi2sd reg,reg is double decoded (vector on Athlon)\n (define_insn_reservation \"athlon_sseicvt_cvtsi2sd_k8\" 11\n-\t\t\t (and (eq_attr \"cpu\" \"k8,athlon\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"sseicvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SF,DF\")\n \t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n \t\t\t \"athlon-double,athlon-fploadk8,athlon-fstore\")\n ;; cvtsi2ss reg, reg is doublepath\n (define_insn_reservation \"athlon_sseicvt_cvtsi2ss\" 14\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"sseicvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SF,DF\")\n \t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n \t\t\t \"athlon-vector,athlon-fploadk8,(athlon-fvector*2)\")\n ;; cvtsd2ss mem,reg is doublepath, troughput unknown, latency 9\n (define_insn_reservation \"athlon_ssecvt_cvtsd2ss_load_k8\" 9\n-\t\t\t (and (eq_attr \"cpu\" \"k8,athlon\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n \t\t\t \"athlon-double,athlon-fploadk8,(athlon-fstore*3)\")\n ;; cvtsd2ss reg,reg is vectorpath, troughput unknown, latency 12\n (define_insn_reservation \"athlon_ssecvt_cvtsd2ss\" 12\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n \t\t\t \"athlon-vector,athlon-fpsched,(athlon-fvector*3)\")\n (define_insn_reservation \"athlon_ssecvt_cvtpd2ps_load_k8\" 8\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n@@ -765,15 +770,15 @@\n ;; cvtpd2ps mem,reg is vectorpath, troughput unknown, latency 10\n ;; ??? Why it is fater than cvtsd2ss?\n (define_insn_reservation \"athlon_ssecvt_cvtpd2ps\" 8\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n \t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fvector*2\")\n ;; cvtsd2si mem,reg is doublepath, troughput 1, latency 9\n (define_insn_reservation \"athlon_secvt_cvtsX2si_load\" 9\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"sseicvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SI,DI\")\n@@ -788,7 +793,7 @@\n \t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fvector\")\n (define_insn_reservation \"athlon_ssecvt_cvtsX2si_k8\" 9\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"sseicvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SI,DI\")\n@@ -803,13 +808,13 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fmul\")\n (define_insn_reservation \"athlon_ssemul_load_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssemul\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fmul\")\n (define_insn_reservation \"athlon_ssemul\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssemul\")\n \t\t\t\t   (eq_attr \"mode\" \"SF,DF\")))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n@@ -819,7 +824,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,(athlon-fmul*2)\")\n (define_insn_reservation \"athlon_ssemulvector_load_k8\" 7\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssemul\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fmul*2)\")\n@@ -828,7 +833,7 @@\n \t\t\t      (eq_attr \"type\" \"ssemul\"))\n \t\t\t \"athlon-vector,athlon-fpsched,(athlon-fmul*2)\")\n (define_insn_reservation \"athlon_ssemulvector_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"ssemul\"))\n \t\t\t \"athlon-double,athlon-fpsched,(athlon-fmul*2)\")\n ;; divsd timings.  divss is faster\n@@ -839,13 +844,13 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fmul*17\")\n (define_insn_reservation \"athlon_ssediv_load_k8\" 22\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssediv\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fmul*17\")\n (define_insn_reservation \"athlon_ssediv\" 20\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssediv\")\n \t\t\t\t   (eq_attr \"mode\" \"SF,DF\")))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul*17\")\n@@ -855,7 +860,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,athlon-fmul*34\")\n (define_insn_reservation \"athlon_ssedivvector_load_k8\" 35\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssediv\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,athlon-fmul*34\")\n@@ -864,6 +869,6 @@\n \t\t\t      (eq_attr \"type\" \"ssediv\"))\n \t\t\t \"athlon-vector,athlon-fmul*34\")\n (define_insn_reservation \"athlon_ssedivvector_k8\" 39\n-\t\t\t (and (eq_attr \"cpu\" \"k8\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n \t\t\t      (eq_attr \"type\" \"ssediv\"))\n \t\t\t \"athlon-double,athlon-fmul*34\")"}, {"sha": "107545ec185526502d19424784ef0a48dfed49a3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 221, "deletions": 33, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d326eaf06a81f21651bd07b06fea29314347cc09", "patch": "@@ -587,6 +587,118 @@ struct processor_costs nocona_cost = {\n   COSTS_N_INSNS (44),\t\t\t/* cost of FSQRT instruction.  */\n };\n \n+/* Generic64 should produce code tuned for Nocona and K8.  */\n+static const\n+struct processor_costs generic64_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  /* On all chips taken into consideration lea is 2 cycles and more.  With\n+     this cost however our current implementation of synth_mult results in\n+     use of unnecesary temporary registers causing regression on several\n+     SPECfp benchmarks.  */\n+  COSTS_N_INSNS (1) + 1,\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*                               HI */\n+   COSTS_N_INSNS (3),\t\t\t/*                               SI */\n+   COSTS_N_INSNS (4),\t\t\t/*                               DI */\n+   COSTS_N_INSNS (2)},\t\t\t/*                               other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (18),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (26),\t\t\t/*                          HI */\n+   COSTS_N_INSNS (42),\t\t\t/*                          SI */\n+   COSTS_N_INSNS (74),\t\t\t/*                          DI */\n+   COSTS_N_INSNS (74)},\t\t\t/*                          other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  17,\t\t\t\t\t/* MOVE_RATIO */\n+  4,\t\t\t\t\t/* cost for loading QImode using movzbl */\n+  {4, 4, 4},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {4, 4, 4},\t\t\t\t/* cost of storing integer registers */\n+  4,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {12, 12, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {6, 6, 8},\t\t\t\t/* cost of loading integer registers */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {8, 8},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {8, 8},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  2,\t\t\t\t\t/* cost of moving SSE register */\n+  {8, 8, 8},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  {8, 8, 8},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  5,\t\t\t\t\t/* MMX or SSE register to integer */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  6,\t\t\t\t\t/* number of parallel prefetches */\n+  /* Benchmarks shows large regressions on K8 sixtrack benchmark when this value\n+     is increased to perhaps more appropriate value of 5.  */\n+  3,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (40),\t\t\t/* cost of FSQRT instruction.  */\n+};\n+\n+/* Generic32 should produce code tuned for Athlon, PPro, Pentium4, Nocona and K8.  */\n+static const\n+struct processor_costs generic32_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  COSTS_N_INSNS (1) + 1,\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*                               HI */\n+   COSTS_N_INSNS (3),\t\t\t/*                               SI */\n+   COSTS_N_INSNS (4),\t\t\t/*                               DI */\n+   COSTS_N_INSNS (2)},\t\t\t/*                               other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (18),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (26),\t\t\t/*                          HI */\n+   COSTS_N_INSNS (42),\t\t\t/*                          SI */\n+   COSTS_N_INSNS (74),\t\t\t/*                          DI */\n+   COSTS_N_INSNS (74)},\t\t\t/*                          other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  17,\t\t\t\t\t/* MOVE_RATIO */\n+  4,\t\t\t\t\t/* cost for loading QImode using movzbl */\n+  {4, 4, 4},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {4, 4, 4},\t\t\t\t/* cost of storing integer registers */\n+  4,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {12, 12, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {6, 6, 8},\t\t\t\t/* cost of loading integer registers */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {8, 8},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {8, 8},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  2,\t\t\t\t\t/* cost of moving SSE register */\n+  {8, 8, 8},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  {8, 8, 8},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  5,\t\t\t\t\t/* MMX or SSE register to integer */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  6,\t\t\t\t\t/* number of parallel prefetches */\n+  3,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (40),\t\t\t/* cost of FSQRT instruction.  */\n+};\n+\n const struct processor_costs *ix86_cost = &pentium_cost;\n \n /* Processor feature/optimization bitmasks.  */\n@@ -600,52 +712,81 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_K8  (1<<PROCESSOR_K8)\n #define m_ATHLON_K8  (m_K8 | m_ATHLON)\n #define m_NOCONA  (1<<PROCESSOR_NOCONA)\n-\n-const int x86_use_leave = m_386 | m_K6 | m_ATHLON_K8;\n-const int x86_push_memory = m_386 | m_K6 | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n+#define m_GENERIC32 (1<<PROCESSOR_GENERIC32)\n+#define m_GENERIC64 (1<<PROCESSOR_GENERIC64)\n+#define m_GENERIC (m_GENERIC32 | m_GENERIC64)\n+\n+/* Generic instruction choice should be common subset of supported CPUs\n+   (PPro/PENT4/NOCONA/Athlon/K8).  */\n+\n+/* Leave is not affecting Nocona SPEC2000 results negatively, so enabling for\n+   Generic64 seems like good code size tradeoff.  We can't enable it for 32bit\n+   generic because it is not working well with PPro base chips.  */\n+const int x86_use_leave = m_386 | m_K6 | m_ATHLON_K8 | m_GENERIC64;\n+const int x86_push_memory = m_386 | m_K6 | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n const int x86_zero_extend_with_and = m_486 | m_PENT;\n-const int x86_movx = m_ATHLON_K8 | m_PPRO | m_PENT4 | m_NOCONA /* m_386 | m_K6 */;\n+const int x86_movx = m_ATHLON_K8 | m_PPRO | m_PENT4 | m_NOCONA | m_GENERIC /* m_386 | m_K6 */;\n const int x86_double_with_add = ~m_386;\n const int x86_use_bit_test = m_386;\n-const int x86_unroll_strlen = m_486 | m_PENT | m_PPRO | m_ATHLON_K8 | m_K6;\n-const int x86_cmove = m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n+const int x86_unroll_strlen = m_486 | m_PENT | m_PPRO | m_ATHLON_K8 | m_K6 | m_GENERIC;\n+const int x86_cmove = m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA; \n const int x86_fisttp = m_NOCONA;\n const int x86_3dnow_a = m_ATHLON_K8;\n-const int x86_deep_branch = m_PPRO | m_K6 | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n+const int x86_deep_branch = m_PPRO | m_K6 | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n /* Branch hints were put in P4 based on simulation result. But\n    after P4 was made, no performance benefit was observed with\n    branch hints. It also increases the code size. As the result,\n    icc never generates branch hints.  */\n const int x86_branch_hints = 0;\n-const int x86_use_sahf = m_PPRO | m_K6 | m_PENT4 | m_NOCONA;\n+const int x86_use_sahf = m_PPRO | m_K6 | m_PENT4 | m_NOCONA | m_GENERIC32; /*m_GENERIC | m_ATHLON_K8 ? */\n+/* We probably ought to watch for partial register stalls on Generic32\n+   compilation setting as well.  However in current implementation the\n+   partial register stalls are not eliminated very well - they can\n+   be introduced via subregs synthetized by combine and can happen\n+   in caller/callee saving sequences.\n+   Because this option pays back little on PPro based chips and is in conflict\n+   with partial reg. dependencies used by Athlon/P4 based chips, it is better\n+   to leave it off for generic32 for now.  */\n const int x86_partial_reg_stall = m_PPRO;\n const int x86_use_himode_fiop = m_386 | m_486 | m_K6;\n-const int x86_use_simode_fiop = ~(m_PPRO | m_ATHLON_K8 | m_PENT);\n+const int x86_use_simode_fiop = ~(m_PPRO | m_ATHLON_K8 | m_PENT | m_GENERIC);\n const int x86_use_mov0 = m_K6;\n-const int x86_use_cltd = ~(m_PENT | m_K6);\n+const int x86_use_cltd = ~(m_PENT | m_K6 | m_GENERIC);\n const int x86_read_modify_write = ~m_PENT;\n const int x86_read_modify = ~(m_PENT | m_PPRO);\n const int x86_split_long_moves = m_PPRO;\n-const int x86_promote_QImode = m_K6 | m_PENT | m_386 | m_486 | m_ATHLON_K8;\n+const int x86_promote_QImode = m_K6 | m_PENT | m_386 | m_486 | m_ATHLON_K8 | m_GENERIC; /* m_PENT4 ? */\n const int x86_fast_prefix = ~(m_PENT | m_486 | m_386);\n const int x86_single_stringop = m_386 | m_PENT4 | m_NOCONA;\n const int x86_qimode_math = ~(0);\n const int x86_promote_qi_regs = 0;\n+/* On PPro this flag is meant to avoid partial register stalls.  Just like\n+   the x86_partial_reg_stall this option might be considered for Generic32\n+   if our scheme for avoiding partial stalls was more effective.  */\n const int x86_himode_math = ~(m_PPRO);\n const int x86_promote_hi_regs = m_PPRO;\n-const int x86_sub_esp_4 = m_ATHLON_K8 | m_PPRO | m_PENT4 | m_NOCONA;\n-const int x86_sub_esp_8 = m_ATHLON_K8 | m_PPRO | m_386 | m_486 | m_PENT4 | m_NOCONA;\n-const int x86_add_esp_4 = m_ATHLON_K8 | m_K6 | m_PENT4 | m_NOCONA;\n-const int x86_add_esp_8 = m_ATHLON_K8 | m_PPRO | m_K6 | m_386 | m_486 | m_PENT4 | m_NOCONA;\n-const int x86_integer_DFmode_moves = ~(m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO);\n-const int x86_partial_reg_dependency = m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n-const int x86_memory_mismatch_stall = m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n-const int x86_accumulate_outgoing_args = m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO;\n-const int x86_prologue_using_move = m_ATHLON_K8 | m_PPRO;\n-const int x86_epilogue_using_move = m_ATHLON_K8 | m_PPRO;\n+const int x86_sub_esp_4 = m_ATHLON_K8 | m_PPRO | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_sub_esp_8 = m_ATHLON_K8 | m_PPRO | m_386 | m_486 | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_add_esp_4 = m_ATHLON_K8 | m_K6 | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_add_esp_8 = m_ATHLON_K8 | m_PPRO | m_K6 | m_386 | m_486 | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_integer_DFmode_moves = ~(m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO | m_GENERIC);\n+const int x86_partial_reg_dependency = m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_memory_mismatch_stall = m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_accumulate_outgoing_args = m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO | m_GENERIC;\n+const int x86_prologue_using_move = m_ATHLON_K8 | m_PPRO | m_GENERIC;\n+const int x86_epilogue_using_move = m_ATHLON_K8 | m_PPRO | m_GENERIC;\n const int x86_shift1 = ~m_486;\n-const int x86_arch_always_fancy_math_387 = m_PENT | m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n-const int x86_sse_partial_reg_dependency = m_PENT4 | m_NOCONA | m_PPRO;\n+const int x86_arch_always_fancy_math_387 = m_PENT | m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n+/* In Generic model we have an confict here in between PPro/Pentium4 based chips\n+   that thread 128bit SSE registers as single units versus K8 based chips that\n+   divide SSE registers to two 64bit halves.\n+   x86_sse_partial_reg_dependency promote all store destinations to be 128bit\n+   to allow register renaming on 128bit SSE units, but usually results in one\n+   extra microop on 64bit SSE units.  Experimental results shows that disabling\n+   this option on P4 brings over 20% SPECfp regression, while enabling it on\n+   K8 brings roughly 2.4% regression that can be partly masked by careful scheduling\n+   of moves.  */\n+const int x86_sse_partial_reg_dependency = m_PENT4 | m_NOCONA | m_PPRO | m_GENERIC;\n /* Set for machines where the type and dependencies are resolved on SSE\n    register parts instead of whole registers, so we may maintain just\n    lower part of scalar values in proper format leaving the upper part\n@@ -655,16 +796,17 @@ const int x86_sse_typeless_stores = m_ATHLON_K8;\n const int x86_sse_load0_by_pxor = m_PPRO | m_PENT4 | m_NOCONA;\n const int x86_use_ffreep = m_ATHLON_K8;\n const int x86_rep_movl_optimal = m_386 | m_PENT | m_PPRO | m_K6;\n+const int x86_use_incdec = ~(m_PENT4 | m_NOCONA | m_GENERIC);\n \n /* ??? Allowing interunit moves makes it all too easy for the compiler to put\n    integer data in xmm registers.  Which results in pretty abysmal code.  */\n const int x86_inter_unit_moves = 0 /* ~(m_ATHLON_K8) */;\n \n-const int x86_ext_80387_constants = m_K6 | m_ATHLON | m_PENT4 | m_NOCONA | m_PPRO;\n+const int x86_ext_80387_constants = m_K6 | m_ATHLON | m_PENT4 | m_NOCONA | m_PPRO | m_GENERIC32;\n /* Some CPU cores are not able to predict more than 4 branch instructions in\n    the 16 byte window.  */\n-const int x86_four_jump_limit = m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n-const int x86_schedule = m_PPRO | m_ATHLON_K8 | m_K6 | m_PENT;\n+const int x86_four_jump_limit = m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_schedule = m_PPRO | m_ATHLON_K8 | m_K6 | m_PENT | m_GENERIC;\n const int x86_use_bt = m_ATHLON_K8;\n /* Compare and exchange was added for 80486.  */\n const int x86_cmpxchg = ~m_386;\n@@ -674,6 +816,7 @@ const int x86_cmpxchg8b = ~(m_386 | m_486);\n const int x86_cmpxchg16b = m_NOCONA;\n /* Exchange and add was added for 80486.  */\n const int x86_xadd = ~m_386;\n+const int x86_pad_returns = m_ATHLON_K8 | m_GENERIC;\n \n /* In case the average insn count for single function invocation is\n    lower than this constant, emit fast (but longer) prologue and\n@@ -1291,7 +1434,9 @@ override_options (void)\n       {&athlon_cost, 0, 0, 16, 7, 16, 7, 16},\n       {&pentium4_cost, 0, 0, 0, 0, 0, 0, 0},\n       {&k8_cost, 0, 0, 16, 7, 16, 7, 16},\n-      {&nocona_cost, 0, 0, 0, 0, 0, 0, 0}\n+      {&nocona_cost, 0, 0, 0, 0, 0, 0, 0},\n+      {&generic32_cost, 0, 0, 16, 7, 16, 7, 16},\n+      {&generic64_cost, 0, 0, 16, 7, 16, 7, 16}\n     };\n \n   static const char * const cpu_names[] = TARGET_CPU_DEFAULT_NAMES;\n@@ -1359,6 +1504,8 @@ override_options (void)\n \t\t\t\t      | PTA_3DNOW_A | PTA_SSE | PTA_SSE2},\n       {\"athlon-fx\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW | PTA_64BIT\n \t\t\t\t      | PTA_3DNOW_A | PTA_SSE | PTA_SSE2},\n+      {\"generic32\", PROCESSOR_GENERIC32, 0 /* flags are only used for -march switch.  */ },\n+      {\"generic64\", PROCESSOR_GENERIC64, PTA_64BIT /* flags are only used for -march switch.  */ },\n     };\n \n   int const pta_size = ARRAY_SIZE (processor_alias_table);\n@@ -1388,15 +1535,52 @@ override_options (void)\n \tflag_pcc_struct_return = DEFAULT_PCC_STRUCT_RETURN;\n     }\n \n-  if (!ix86_tune_string && ix86_arch_string)\n-    ix86_tune_string = ix86_arch_string;\n-  if (!ix86_tune_string)\n+  /* Need to check -mtune=generic first.  */\n+  if (ix86_tune_string)\n     {\n-      ix86_tune_string = cpu_names [TARGET_CPU_DEFAULT];\n-      ix86_tune_defaulted = 1;\n+      if (!strcmp (ix86_tune_string, \"generic\")\n+\t  || !strcmp (ix86_tune_string, \"i686\"))\n+\t{\n+\t  if (TARGET_64BIT)\n+\t    ix86_tune_string = \"generic64\";\n+\t  else\n+\t    ix86_tune_string = \"generic32\";\n+\t}\n+      else if (!strncmp (ix86_tune_string, \"generic\", 7))\n+\terror (\"bad value (%s) for -mtune= switch\", ix86_tune_string);\n     }\n+  else\n+    {\n+      if (ix86_arch_string)\n+\tix86_tune_string = ix86_arch_string;\n+      if (!ix86_tune_string)\n+\t{\n+\t  ix86_tune_string = cpu_names [TARGET_CPU_DEFAULT];\n+\t  ix86_tune_defaulted = 1;\n+\t}\n+\n+      /* ix86_tune_string is set to ix86_arch_string or defaulted.  We\n+\t need to use a sensible tune option.  */\n+      if (!strcmp (ix86_tune_string, \"generic\")\n+\t  || !strcmp (ix86_tune_string, \"x86-64\")\n+\t  || !strcmp (ix86_tune_string, \"i686\"))\n+\t{\n+\t  if (TARGET_64BIT)\n+\t    ix86_tune_string = \"generic64\";\n+\t  else\n+\t    ix86_tune_string = \"generic32\";\n+\t}\n+    }\n+  if (!strcmp (ix86_tune_string, \"x86-64\"))\n+    warning (OPT_Wdeprecated, \"-mtune=x86-64 is deprecated.  Use -mtune=k8 or \"\n+\t     \"-mtune=generic instead as appropriate.\");\n+\n   if (!ix86_arch_string)\n     ix86_arch_string = TARGET_64BIT ? \"x86-64\" : \"i386\";\n+  if (!strcmp (ix86_arch_string, \"generic\"))\n+    error (\"generic CPU can be used only for -mtune= switch\");\n+  if (!strncmp (ix86_arch_string, \"generic\", 7))\n+    error (\"bad value (%s) for -march= switch\", ix86_arch_string);\n \n   if (ix86_cmodel_string != 0)\n     {\n@@ -13164,6 +13348,8 @@ ix86_issue_rate (void)\n     case PROCESSOR_ATHLON:\n     case PROCESSOR_K8:\n     case PROCESSOR_NOCONA:\n+    case PROCESSOR_GENERIC32:\n+    case PROCESSOR_GENERIC64:\n       return 3;\n \n     default:\n@@ -13356,6 +13542,8 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \n     case PROCESSOR_ATHLON:\n     case PROCESSOR_K8:\n+    case PROCESSOR_GENERIC32:\n+    case PROCESSOR_GENERIC64:\n       memory = get_attr_memory (insn);\n \n       /* Show ability of reorder buffer to hide latency of load by executing\n@@ -17326,7 +17514,7 @@ ix86_pad_returns (void)\n static void\n ix86_reorg (void)\n {\n-  if (TARGET_ATHLON_K8 && optimize && !optimize_size)\n+  if (TARGET_PAD_RETURNS && optimize && !optimize_size)\n     ix86_pad_returns ();\n   if (TARGET_FOUR_JUMP_LIMIT && optimize && !optimize_size)\n     ix86_avoid_jump_misspredicts ();"}, {"sha": "628a5dd65a399d7e281e95ca948fcf839849026c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d326eaf06a81f21651bd07b06fea29314347cc09", "patch": "@@ -93,11 +93,7 @@ extern const struct processor_costs *ix86_cost;\n /* configure can arrange to make this 2, to force a 486.  */\n \n #ifndef TARGET_CPU_DEFAULT\n-#ifdef TARGET_64BIT_DEFAULT\n-#define TARGET_CPU_DEFAULT TARGET_CPU_DEFAULT_k8\n-#else\n-#define TARGET_CPU_DEFAULT 0\n-#endif\n+#define TARGET_CPU_DEFAULT TARGET_CPU_DEFAULT_generic\n #endif\n \n #ifndef TARGET_FPMATH_DEFAULT\n@@ -140,6 +136,9 @@ extern const struct processor_costs *ix86_cost;\n #define TARGET_K8 (ix86_tune == PROCESSOR_K8)\n #define TARGET_ATHLON_K8 (TARGET_K8 || TARGET_ATHLON)\n #define TARGET_NOCONA (ix86_tune == PROCESSOR_NOCONA)\n+#define TARGET_GENERIC32 (ix86_tune == PROCESSOR_GENERIC32)\n+#define TARGET_GENERIC64 (ix86_tune == PROCESSOR_GENERIC64)\n+#define TARGET_GENERIC (TARGET_GENERIC32 || TARGET_GENERIC64)\n \n #define TUNEMASK (1 << ix86_tune)\n extern const int x86_use_leave, x86_push_memory, x86_zero_extend_with_and;\n@@ -163,6 +162,8 @@ extern const int x86_use_ffreep;\n extern const int x86_inter_unit_moves, x86_schedule;\n extern const int x86_use_bt;\n extern const int x86_cmpxchg, x86_cmpxchg8b, x86_cmpxchg16b, x86_xadd;\n+extern const int x86_use_incdec;\n+extern const int x86_pad_returns;\n extern int x86_prefetch_sse;\n \n #define TARGET_USE_LEAVE (x86_use_leave & TUNEMASK)\n@@ -217,6 +218,8 @@ extern int x86_prefetch_sse;\n #define TARGET_FOUR_JUMP_LIMIT (x86_four_jump_limit & TUNEMASK)\n #define TARGET_SCHEDULE (x86_schedule & TUNEMASK)\n #define TARGET_USE_BT (x86_use_bt & TUNEMASK)\n+#define TARGET_USE_INCDEC (x86_use_incdec & TUNEMASK)\n+#define TARGET_PAD_RETURNS (x86_pad_returns & TUNEMASK)\n \n #define ASSEMBLER_DIALECT (ix86_asm_dialect)\n \n@@ -464,12 +467,14 @@ extern int x86_prefetch_sse;\n #define TARGET_CPU_DEFAULT_pentium_m 14\n #define TARGET_CPU_DEFAULT_prescott 15\n #define TARGET_CPU_DEFAULT_nocona 16\n+#define TARGET_CPU_DEFAULT_generic 17\n \n #define TARGET_CPU_DEFAULT_NAMES {\"i386\", \"i486\", \"pentium\", \"pentium-mmx\",\\\n \t\t\t\t  \"pentiumpro\", \"pentium2\", \"pentium3\", \\\n \t\t\t\t  \"pentium4\", \"k6\", \"k6-2\", \"k6-3\",\\\n \t\t\t\t  \"athlon\", \"athlon-4\", \"k8\", \\\n-\t\t\t\t  \"pentium-m\", \"prescott\", \"nocona\"}\n+\t\t\t\t  \"pentium-m\", \"prescott\", \"nocona\", \\\n+\t\t\t\t  \"generic\"}\n \n #ifndef CC1_SPEC\n #define CC1_SPEC \"%(cc1_cpu) \"\n@@ -2119,6 +2124,8 @@ enum processor_type\n   PROCESSOR_PENTIUM4,\n   PROCESSOR_K8,\n   PROCESSOR_NOCONA,\n+  PROCESSOR_GENERIC32,\n+  PROCESSOR_GENERIC64,\n   PROCESSOR_max\n };\n "}, {"sha": "40fc24496a6be24ad1dea3e384fd514c8ede97fa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d326eaf06a81f21651bd07b06fea29314347cc09", "patch": "@@ -187,7 +187,7 @@\n \f\n ;; Processor type.  This attribute must exactly match the processor_type\n ;; enumeration in i386.h.\n-(define_attr \"cpu\" \"i386,i486,pentium,pentiumpro,k6,athlon,pentium4,k8,nocona\"\n+(define_attr \"cpu\" \"i386,i486,pentium,pentiumpro,k6,athlon,pentium4,k8,nocona,generic32,generic64\"\n   (const (symbol_ref \"ix86_tune\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be\n@@ -1511,8 +1511,12 @@\n \t       (const_string \"SI\")\n \t     (and (eq_attr \"type\" \"imov\")\n \t\t  (and (eq_attr \"alternative\" \"0,1\")\n-\t\t       (ne (symbol_ref \"TARGET_PARTIAL_REG_DEPENDENCY\")\n-\t\t\t   (const_int 0))))\n+\t\t       (and (ne (symbol_ref \"TARGET_PARTIAL_REG_DEPENDENCY\")\n+\t\t\t\t(const_int 0))\n+\t\t\t    (and (eq (symbol_ref \"optimize_size\")\n+\t\t\t\t     (const_int 0))\n+\t\t\t    \t (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n+\t\t\t\t     (const_int 0))))))\n \t       (const_string \"SI\")\n \t     ;; Avoid partial register stalls when not using QImode arithmetic\n \t     (and (eq_attr \"type\" \"imov\")\n@@ -4145,7 +4149,7 @@\n   [(match_scratch:DF 2 \"Y\")\n    (set (match_operand:SSEMODEI24 0 \"register_operand\" \"\")\n \t(fix:SSEMODEI24 (match_operand:DF 1 \"memory_operand\" \"\")))]\n-  \"TARGET_K8 && !optimize_size\"\n+  \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (fix:SSEMODEI24 (match_dup 2)))]\n   \"\")\n@@ -4154,7 +4158,7 @@\n   [(match_scratch:SF 2 \"x\")\n    (set (match_operand:SSEMODEI24 0 \"register_operand\" \"\")\n \t(fix:SSEMODEI24 (match_operand:SF 1 \"memory_operand\" \"\")))]\n-  \"TARGET_K8 && !optimize_size\"\n+  \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (fix:SSEMODEI24 (match_dup 2)))]\n   \"\")\n@@ -19896,7 +19900,7 @@\n \t\t   (mult:DI (match_operand:DI 1 \"memory_operand\" \"\")\n \t\t\t    (match_operand:DI 2 \"immediate_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_K8 && !optimize_size\n+  \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\n    && (GET_CODE (operands[2]) != CONST_INT\n        || !CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K'))\"\n   [(set (match_dup 3) (match_dup 1))\n@@ -19910,7 +19914,7 @@\n \t\t   (mult:SI (match_operand:SI 1 \"memory_operand\" \"\")\n \t\t\t    (match_operand:SI 2 \"immediate_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_K8 && !optimize_size\n+  \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\n    && (GET_CODE (operands[2]) != CONST_INT\n        || !CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K'))\"\n   [(set (match_dup 3) (match_dup 1))\n@@ -19925,7 +19929,7 @@\n \t\t     (mult:SI (match_operand:SI 1 \"memory_operand\" \"\")\n \t\t\t      (match_operand:SI 2 \"immediate_operand\" \"\"))))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_K8 && !optimize_size\n+  \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\n    && (GET_CODE (operands[2]) != CONST_INT\n        || !CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K'))\"\n   [(set (match_dup 3) (match_dup 1))\n@@ -19943,7 +19947,7 @@\n \t\t\t    (match_operand:DI 2 \"const_int_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (match_scratch:DI 3 \"r\")]\n-  \"TARGET_K8 && !optimize_size\n+  \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\n    && CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K')\"\n   [(set (match_dup 3) (match_dup 2))\n    (parallel [(set (match_dup 0) (mult:DI (match_dup 0) (match_dup 3)))\n@@ -19959,7 +19963,7 @@\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (match_scratch:SI 3 \"r\")]\n-  \"TARGET_K8 && !optimize_size\n+  \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\n    && CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'K')\"\n   [(set (match_dup 3) (match_dup 2))\n    (parallel [(set (match_dup 0) (mult:SI (match_dup 0) (match_dup 3)))\n@@ -19975,7 +19979,7 @@\n \t\t\t    (match_operand:HI 2 \"immediate_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (match_scratch:HI 3 \"r\")]\n-  \"TARGET_K8 && !optimize_size\"\n+  \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\"\n   [(set (match_dup 3) (match_dup 2))\n    (parallel [(set (match_dup 0) (mult:HI (match_dup 0) (match_dup 3)))\n \t      (clobber (reg:CC FLAGS_REG))])]"}, {"sha": "9f06989148464547598f4cb8d19b7115387f87e3", "filename": "gcc/config/i386/ppro.md", "status": "modified", "additions": 86, "deletions": 86, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fppro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fppro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fppro.md?ref=d326eaf06a81f21651bd07b06fea29314347cc09", "patch": "@@ -137,46 +137,46 @@\n ;; on decoder 0, and say that it takes a little while before the result\n ;; is available.\n (define_insn_reservation \"ppro_complex_insn\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (eq_attr \"type\" \"other,multi,call,callv,str\"))\n \t\t\t \"decoder0\")\n \n ;; imov with memory operands does not use the integer units.\n (define_insn_reservation \"ppro_imov\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"imov\")))\n \t\t\t \"decodern,(p0|p1)\")\n \n (define_insn_reservation \"ppro_imov_load\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (eq_attr \"type\" \"imov\")))\n \t\t\t \"decodern,p2\")\n \n (define_insn_reservation \"ppro_imov_store\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"store\")\n \t\t\t\t   (eq_attr \"type\" \"imov\")))\n \t\t\t \"decoder0,p4+p3\")\n \n ;; imovx always decodes to one uop, and also doesn't use the integer\n ;; units if it has memory operands.\n (define_insn_reservation \"ppro_imovx\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"imovx\")))\n \t\t\t \"decodern,(p0|p1)\")\n \n (define_insn_reservation \"ppro_imovx_load\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (eq_attr \"type\" \"imovx\")))\n \t\t\t \"decodern,p2\")\n \n ;; lea executes on port 0 with latency one and throughput 1.\n (define_insn_reservation \"ppro_lea\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"lea\")))\n \t\t\t \"decodern,p0\")\n@@ -185,19 +185,19 @@\n ;; The load and store units need to be reserved when memory operands\n ;; are involved.\n (define_insn_reservation \"ppro_shift_rotate\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1\")))\n \t\t\t \"decodern,p0\")\n \n (define_insn_reservation \"ppro_shift_rotate_mem\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"!none\")\n \t\t\t\t   (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1\")))\n \t\t\t \"decoder0,p2+p0,p4+p3\")\n \n (define_insn_reservation \"ppro_cld\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (eq_attr \"type\" \"cld\"))\n \t\t\t \"decoder0,(p0+p1)*2\")\n \n@@ -219,32 +219,32 @@\n ;; results because we can assume these instructions can decode on all\n ;; decoders.\n (define_insn_reservation \"ppro_branch\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"ibr\")))\n \t\t\t \"decodern,p1\")\n \n ;; ??? Indirect branches probably have worse latency than this.\n (define_insn_reservation \"ppro_indirect_branch\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"!none\")\n \t\t\t\t   (eq_attr \"type\" \"ibr\")))\n \t\t\t \"decoder0,p2+p1\")\n \n (define_insn_reservation \"ppro_leave\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (eq_attr \"type\" \"leave\"))\n \t\t\t \"decoder0,p2+(p0|p1),(p0|p1)\")\n \n ;; imul has throughput one, but latency 4, and can only execute on port 0.\n (define_insn_reservation \"ppro_imul\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"imul\")))\n \t\t\t \"decodern,p0\")\n \n (define_insn_reservation \"ppro_imul_mem\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"!none\")\n \t\t\t\t   (eq_attr \"type\" \"imul\")))\n \t\t\t \"decoder0,p2+p0\")\n@@ -253,42 +253,42 @@\n ;; QI, HI, and SI have issue latency 12, 21, and 37, respectively.\n ;; These issue latencies are modelled via the ppro_div automaton.\n (define_insn_reservation \"ppro_idiv_QI\" 19\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"QI\")\n \t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n \t\t\t \"decoder0,(p0+idiv)*2,(p0|p1)+idiv,idiv*9\")\n \n (define_insn_reservation \"ppro_idiv_QI_load\" 19\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"QI\")\n \t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n \t\t\t \"decoder0,p2+p0+idiv,p0+idiv,(p0|p1)+idiv,idiv*9\")\n \n (define_insn_reservation \"ppro_idiv_HI\" 23\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"HI\")\n \t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n \t\t\t \"decoder0,(p0+idiv)*3,(p0|p1)+idiv,idiv*17\")\n \n (define_insn_reservation \"ppro_idiv_HI_load\" 23\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"HI\")\n \t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n \t\t\t \"decoder0,p2+p0+idiv,p0+idiv,(p0|p1)+idiv,idiv*18\")\n \n (define_insn_reservation \"ppro_idiv_SI\" 39\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n \t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n \t\t\t \"decoder0,(p0+idiv)*3,(p0|p1)+idiv,idiv*33\")\n \n (define_insn_reservation \"ppro_idiv_SI_load\" 39\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n \t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n@@ -299,85 +299,85 @@\n ;;     has throughput \"1/cycle (align with FADD)\".  What do they\n ;;     mean and how can we model that?\n (define_insn_reservation \"ppro_fop\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n \t\t\t\t   (eq_attr \"type\" \"fop\")))\n \t\t\t \"decodern,p0\")\n \n (define_insn_reservation \"ppro_fop_load\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (eq_attr \"type\" \"fop\")))\n \t\t\t \"decoder0,p2+p0,p0\")\n \n (define_insn_reservation \"ppro_fop_store\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"store\")\n \t\t\t\t   (eq_attr \"type\" \"fop\")))\n \t\t\t \"decoder0,p0,p0,p0+p4+p3\")\n \n (define_insn_reservation \"ppro_fop_both\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"both\")\n \t\t\t\t   (eq_attr \"type\" \"fop\")))\n \t\t\t \"decoder0,p2+p0,p0+p4+p3\")\n \n (define_insn_reservation \"ppro_fsgn\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (eq_attr \"type\" \"fsgn\"))\n \t\t\t \"decodern,p0\")\n \n (define_insn_reservation \"ppro_fistp\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (eq_attr \"type\" \"fistp\"))\n \t\t\t \"decoder0,p0*2,p4+p3\")\n \n (define_insn_reservation \"ppro_fcmov\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (eq_attr \"type\" \"fcmov\"))\n \t\t\t \"decoder0,p0*2\")\n \n (define_insn_reservation \"ppro_fcmp\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"fcmp\")))\n \t\t\t \"decodern,p0\")\n \n (define_insn_reservation \"ppro_fcmp_load\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (eq_attr \"type\" \"fcmp\")))\n \t\t\t \"decoder0,p2+p0\")\n \n (define_insn_reservation \"ppro_fmov\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"fmov\")))\n \t\t\t \"decodern,p0\")\n \n (define_insn_reservation \"ppro_fmov_load\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"!XF\")\n \t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n \t\t\t \"decodern,p2\")\n \n (define_insn_reservation \"ppro_fmov_XF_load\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n \t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n \t\t\t \"decoder0,(p2+p0)*2\")\n \n (define_insn_reservation \"ppro_fmov_store\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"store\")\n \t\t\t\t   (and (eq_attr \"mode\" \"!XF\")\n \t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n \t\t\t \"decodern,p0\")\n \n (define_insn_reservation \"ppro_fmov_XF_store\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"store\")\n \t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n \t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n@@ -386,13 +386,13 @@\n ;; fmul executes on port 0 with latency 5.  It has issue latency 2,\n ;; but we don't model this.\n (define_insn_reservation \"ppro_fmul\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"fmul\")))\n \t\t\t \"decoder0,p0*2\")\n \n (define_insn_reservation \"ppro_fmul_load\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (eq_attr \"type\" \"fmul\")))\n \t\t\t \"decoder0,p2+p0,p0\")\n@@ -403,42 +403,42 @@\n ;; that.  Throughput is equal to latency - 1, which we model using the\n ;; ppro_div automaton.\n (define_insn_reservation \"ppro_fdiv_SF\" 18\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n \t\t\t \"decodern,p0+fdiv,fdiv*16\")\n \n (define_insn_reservation \"ppro_fdiv_SF_load\" 19\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n \t\t\t \"decoder0,p2+p0+fdiv,fdiv*16\")\n \n (define_insn_reservation \"ppro_fdiv_DF\" 32\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"DF\")\n \t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n \t\t\t \"decodern,p0+fdiv,fdiv*30\")\n \n (define_insn_reservation \"ppro_fdiv_DF_load\" 33\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"DF\")\n \t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n \t\t\t \"decoder0,p2+p0+fdiv,fdiv*30\")\n \n (define_insn_reservation \"ppro_fdiv_XF\" 38\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n \t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n \t\t\t \"decodern,p0+fdiv,fdiv*36\")\n \n (define_insn_reservation \"ppro_fdiv_XF_load\" 39\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n \t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n@@ -456,39 +456,39 @@\n ;; so they behave as \"simple\" instructions that need no special modelling.\n ;; We only have to model mmxshft and mmxmul.\n (define_insn_reservation \"ppro_mmx_shft\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"mmxshft\")))\n \t\t\t \"decodern,p1\")\n \n (define_insn_reservation \"ppro_mmx_shft_load\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"mmxshft\")))\n \t\t\t \"decoder0,p2+p1\")\n \n (define_insn_reservation \"ppro_mmx_mul\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"mmxmul\")))\n \t\t\t \"decodern,p0\")\n \n (define_insn_reservation \"ppro_mmx_mul_load\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (eq_attr \"type\" \"mmxmul\")))\n \t\t\t \"decoder0,p2+p0\")\n \n (define_insn_reservation \"ppro_sse_mmxcvt\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"mode\" \"DI\")\n \t\t\t\t   (eq_attr \"type\" \"mmxcvt\")))\n \t\t\t \"decodern,p1\")\n \n ;; FIXME: These are Pentium III only, but we cannot tell here if\n ;; we're generating code for PentiumPro/Pentium II or Pentium III\n ;; (define_insn_reservation \"ppro_sse_mmxshft\" 2\n-;;\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+;;\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n ;;\t\t\t      (and (eq_attr \"mode\" \"DI\")\n ;;\t\t\t\t   (eq_attr \"type\" \"mmxshft\")))\n ;;\t\t\t \"decodern,p0\")\n@@ -499,229 +499,229 @@\n \n ;; The sfence instruction.\n (define_insn_reservation \"ppro_sse_sfence\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"unknown\")\n \t\t\t\t   (eq_attr \"type\" \"sse\")))\n \t\t\t \"decoder0,p4+p3\")\n \n ;; FIXME: This reservation is all wrong when we're scheduling sqrtss.\n (define_insn_reservation \"ppro_sse_SF\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t   (eq_attr \"type\" \"sse\")))\n \t\t\t \"decodern,p0\")\n \n (define_insn_reservation \"ppro_sse_add_SF\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"sseadd\"))))\n \t\t\t \"decodern,p1\")\n \n (define_insn_reservation \"ppro_sse_add_SF_load\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"sseadd\"))))\n \t\t\t \"decoder0,p2+p1\")\n \n (define_insn_reservation \"ppro_sse_cmp_SF\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssecmp\"))))\n \t\t\t \"decoder0,p1\")\n \n (define_insn_reservation \"ppro_sse_cmp_SF_load\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssecmp\"))))\n \t\t\t \"decoder0,p2+p1\")\n \n (define_insn_reservation \"ppro_sse_comi_SF\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssecomi\"))))\n \t\t\t \"decodern,p0\")\n \n (define_insn_reservation \"ppro_sse_comi_SF_load\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssecomi\"))))\n \t\t\t \"decoder0,p2+p0\")\n \n (define_insn_reservation \"ppro_sse_mul_SF\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n \t\t\t\"decodern,p0\")\n \n (define_insn_reservation \"ppro_sse_mul_SF_load\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n \t\t\t\"decoder0,p2+p0\")\n \n ;; FIXME: ssediv doesn't close p0 for 17 cycles, surely???\n (define_insn_reservation \"ppro_sse_div_SF\" 18\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n \t\t\t \"decoder0,p0*17\")\n \n (define_insn_reservation \"ppro_sse_div_SF_load\" 18\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n \t\t\t \"decoder0,(p2+p0),p0*16\")\n \n (define_insn_reservation \"ppro_sse_icvt_SF\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t   (eq_attr \"type\" \"sseicvt\")))\n \t\t\t \"decoder0,(p2+p1)*2\")\n \n (define_insn_reservation \"ppro_sse_icvt_SI\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"mode\" \"SI\")\n \t\t\t\t   (eq_attr \"type\" \"sseicvt\")))\n \t\t\t \"decoder0,(p2+p1)\")\n \n (define_insn_reservation \"ppro_sse_mov_SF\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssemov\"))))\n \t\t\t \"decoder0,(p0|p1)\")\n \n (define_insn_reservation \"ppro_sse_mov_SF_load\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssemov\"))))\n \t\t\t \"decoder0,p2+(p0|p1)\")\n \n (define_insn_reservation \"ppro_sse_mov_SF_store\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"store\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssemov\"))))\n \t\t\t \"decoder0,p4+p3\")\n \n (define_insn_reservation \"ppro_sse_V4SF\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t   (eq_attr \"type\" \"sse\")))\n \t\t\t \"decoder0,p1*2\")\n \n (define_insn_reservation \"ppro_sse_add_V4SF\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"sseadd\"))))\n \t\t\t \"decoder0,p1*2\")\n \n (define_insn_reservation \"ppro_sse_add_V4SF_load\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"sseadd\"))))\n \t\t\t \"decoder0,(p2+p1)*2\")\n \n (define_insn_reservation \"ppro_sse_cmp_V4SF\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssecmp\"))))\n \t\t\t \"decoder0,p1*2\")\n \n (define_insn_reservation \"ppro_sse_cmp_V4SF_load\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssecmp\"))))\n \t\t\t \"decoder0,(p2+p1)*2\")\n \n (define_insn_reservation \"ppro_sse_cvt_V4SF\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssecvt\"))))\n \t\t\t \"decoder0,p1*2\")\n \n (define_insn_reservation \"ppro_sse_cvt_V4SF_other\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"!none,unknown\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssecmp\"))))\n \t\t\t \"decoder0,p1,p4+p3\")\n \n (define_insn_reservation \"ppro_sse_mul_V4SF\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n \t\t\t\"decoder0,p0*2\")\n \n (define_insn_reservation \"ppro_sse_mul_V4SF_load\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n \t\t\t\"decoder0,(p2+p0)*2\")\n \n ;; FIXME: p0 really closed this long???\n (define_insn_reservation \"ppro_sse_div_V4SF\" 48\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n \t\t\t \"decoder0,p0*34\")\n \n (define_insn_reservation \"ppro_sse_div_V4SF_load\" 48\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n \t\t\t \"decoder0,(p2+p0)*2,p0*32\")\n \n (define_insn_reservation \"ppro_sse_log_V4SF\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"sselog,sselog1\"))))\n \t\t\t \"decodern,p1\")\n \n (define_insn_reservation \"ppro_sse_log_V4SF_load\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"sselog,sselog1\"))))\n \t\t\t \"decoder0,(p2+p1)\")\n \n (define_insn_reservation \"ppro_sse_mov_V4SF\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssemov\"))))\n \t\t\t \"decoder0,(p0|p1)*2\")\n \n (define_insn_reservation \"ppro_sse_mov_V4SF_load\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssemov\"))))\n \t\t\t \"decoder0,p2*2\")\n \n (define_insn_reservation \"ppro_sse_mov_V4SF_store\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"store\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n \t\t\t\t\t(eq_attr \"type\" \"ssemov\"))))\n@@ -735,29 +735,29 @@\n ;; reg-reg instructions produce 1 uop so they can be decoded on any of\n ;; the three decoders.\n (define_insn_reservation \"ppro_insn\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n \t\t\t\t   (eq_attr \"type\" \"alu,alu1,negnot,incdec,icmp,test,setcc,icmov,push,pop,fxch,sseiadd,sseishft,sseimul,mmx,mmxadd,mmxcmp\")))\n \t\t\t \"decodern,(p0|p1)\")\n \n ;; read-modify and register-memory instructions have 2 or three uops,\n ;; so they have to be decoded on decoder0.\n (define_insn_reservation \"ppro_insn_load\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (eq_attr \"type\" \"alu,alu1,negnot,incdec,icmp,test,setcc,icmov,push,pop,fxch,sseiadd,sseishft,sseimul,mmx,mmxadd,mmxcmp\")))\n \t\t\t \"decoder0,p2+(p0|p1)\")\n \n (define_insn_reservation \"ppro_insn_store\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"store\")\n \t\t\t\t   (eq_attr \"type\" \"alu,alu1,negnot,incdec,icmp,test,setcc,icmov,push,pop,fxch,sseiadd,sseishft,sseimul,mmx,mmxadd,mmxcmp\")))\n \t\t\t \"decoder0,(p0|p1),p4+p3\")\n \n ;; read-modify-store instructions produce 4 uops so they have to be\n ;; decoded on decoder0 as well.\n (define_insn_reservation \"ppro_insn_both\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n+\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n \t\t\t      (and (eq_attr \"memory\" \"both\")\n \t\t\t\t   (eq_attr \"type\" \"alu,alu1,negnot,incdec,icmp,test,setcc,icmov,push,pop,fxch,sseiadd,sseishft,sseimul,mmx,mmxadd,mmxcmp\")))\n \t\t\t \"decoder0,p2+(p0|p1),p4+p3\")"}, {"sha": "2d423d4053a8de3d6a90e0ebd6ed407085b009cb", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d326eaf06a81f21651bd07b06fea29314347cc09/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=d326eaf06a81f21651bd07b06fea29314347cc09", "patch": "@@ -628,7 +628,7 @@\n {\n   /* On Pentium4, the inc and dec operations causes extra dependency on flag\n      registers, since carry flag is not set.  */\n-  if ((TARGET_PENTIUM4 || TARGET_NOCONA) && !optimize_size)\n+  if (!TARGET_USE_INCDEC && !optimize_size)\n     return 0;\n   return op == const1_rtx || op == constm1_rtx;\n })\n@@ -707,6 +707,11 @@\n   if (GET_CODE (op) != MEM)\n     return 1;\n \n+  /* All patterns using aligned_operand on memory operands ends up\n+     in promoting memory operand to 64bit and thus causing memory mismatch.  */\n+  if (TARGET_MEMORY_MISMATCH_STALL && !optimize_size)\n+    return 0;\n+\n   /* Don't even try to do any aligned optimizations with volatiles.  */\n   if (MEM_VOLATILE_P (op))\n     return 0;"}]}