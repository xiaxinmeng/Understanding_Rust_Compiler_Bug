{"sha": "a5bfb13a75be342bbe6296a95b8e61bdef02a684", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTViZmIxM2E3NWJlMzQyYmJlNjI5NmE5NWI4ZTYxYmRlZjAyYTY4NA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2008-02-14T12:54:30Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2008-02-14T12:54:30Z"}, "message": "re PR target/34930 (ICE in instantiate_virtual_regs_in_insn with vector splat load)\n\n        PR target/34930\n        * function.c (instantiate_virtual_regs_in_insn): Reload address\n        before falling back to reloading the whole operand.\n\nFrom-SVN: r132317", "tree": {"sha": "a8607afb67b997f07d80e43d011cb3e6d302ae78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8607afb67b997f07d80e43d011cb3e6d302ae78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5bfb13a75be342bbe6296a95b8e61bdef02a684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5bfb13a75be342bbe6296a95b8e61bdef02a684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5bfb13a75be342bbe6296a95b8e61bdef02a684", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5bfb13a75be342bbe6296a95b8e61bdef02a684/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4571259b7a5875586d1579334aa9b944b103216b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4571259b7a5875586d1579334aa9b944b103216b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4571259b7a5875586d1579334aa9b944b103216b"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "936ae64ffbf85f9d41e17d84c8d7a46568fa1743", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bfb13a75be342bbe6296a95b8e61bdef02a684/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bfb13a75be342bbe6296a95b8e61bdef02a684/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5bfb13a75be342bbe6296a95b8e61bdef02a684", "patch": "@@ -1,3 +1,9 @@\n+2008-02-14  Michael Matz  <matz@suse.de>\n+\n+\tPR target/34930\n+\t* function.c (instantiate_virtual_regs_in_insn): Reload address\n+\tbefore falling back to reloading the whole operand.\n+\n 2008-02-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_mainpool_start): Emit the pool"}, {"sha": "d3fbd17c8cceee79e8a7a1801bbd91a5b5247738", "filename": "gcc/function.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bfb13a75be342bbe6296a95b8e61bdef02a684/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bfb13a75be342bbe6296a95b8e61bdef02a684/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a5bfb13a75be342bbe6296a95b8e61bdef02a684", "patch": "@@ -1468,6 +1468,20 @@ instantiate_virtual_regs_in_insn (rtx insn)\n \n \t    start_sequence ();\n \t    x = replace_equiv_address (x, addr);\n+\t    /* It may happen that the address with the virtual reg\n+\t       was valid (e.g. based on the virtual stack reg, which might\n+\t       be acceptable to the predicates with all offsets), whereas\n+\t       the address now isn't anymore, for instance when the address\n+\t       is still offsetted, but the base reg isn't virtual-stack-reg\n+\t       anymore.  Below we would do a force_reg on the whole operand,\n+\t       but this insn might actually only accept memory.  Hence,\n+\t       before doing that last resort, try to reload the address into\n+\t       a register, so this operand stays a MEM.  */\n+\t    if (!safe_insn_predicate (insn_code, i, x))\n+\t      {\n+\t\taddr = force_reg (GET_MODE (addr), addr);\n+\t\tx = replace_equiv_address (x, addr);\n+\t      }\n \t    seq = get_insns ();\n \t    end_sequence ();\n \t    if (seq)"}]}