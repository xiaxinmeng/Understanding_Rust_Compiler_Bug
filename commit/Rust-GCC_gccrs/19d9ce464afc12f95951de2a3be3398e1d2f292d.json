{"sha": "19d9ce464afc12f95951de2a3be3398e1d2f292d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkOWNlNDY0YWZjMTJmOTU5NTFkZTJhM2JlMzM5OGUxZDJmMjkyZA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2019-07-08T08:13:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-08T08:13:34Z"}, "message": "[Ada] Arrange not to set DECL_ARTIFICIAL on elab procs\n\nUnlike, say, clones created internally by the compiler, elab procs\nmaterialize specific user code and flagging them artificial now takes\nelab code away from gcov's analysis, a regression compared to previous\nreleases.\n\nOn the testcase below:\n\npackage Gcov_Q is\n   function F (X : Integer) return Integer is (X + 1);\nend;\n\nwith Gcov_Q;\npackage Gcov_P is\n   Y : Integer := Gcov_Q.F (X => 1);\nend;\n\nwith Gcov_P;\nprocedure Gcov_Test is\nbegin\n   if Gcov_P.Y /= 2 then\n      raise Program_Error;\n   end if;\nend;\n\nAfter compiling with:\n\n  gnatmake -f -g gcov_test.adb \\\n    -cargs -ftest-coverage -fprofile-arcs \\\n    -largs -fprofile-generate\n\nand executing with\n\n  ./gcov_test\n\nWe expect\n\n   gcov gcov_p\n\nto produce a gcov_p.ads.gcov report.\n\n2019-07-08  Olivier Hainque  <hainque@adacore.com>\n\ngcc/ada/\n\n\t* gcc-interface/trans.c (Compilation_Unit_to_gnu): Don't request\n\tDECL_ARTIFICIAL_P on elab proc declarations.\n\nFrom-SVN: r273207", "tree": {"sha": "cfaf246522d4a6ae982462e79ff8c8cbec803011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfaf246522d4a6ae982462e79ff8c8cbec803011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19d9ce464afc12f95951de2a3be3398e1d2f292d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d9ce464afc12f95951de2a3be3398e1d2f292d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d9ce464afc12f95951de2a3be3398e1d2f292d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d9ce464afc12f95951de2a3be3398e1d2f292d/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abbc45464b1be9895a4842903a5c75b6dd085b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbc45464b1be9895a4842903a5c75b6dd085b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abbc45464b1be9895a4842903a5c75b6dd085b9a"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "81ef99e4be57dc46b5ce10c34a2a81a34f9045bf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d9ce464afc12f95951de2a3be3398e1d2f292d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d9ce464afc12f95951de2a3be3398e1d2f292d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=19d9ce464afc12f95951de2a3be3398e1d2f292d", "patch": "@@ -1,3 +1,8 @@\n+2019-07-08  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc-interface/trans.c (Compilation_Unit_to_gnu): Don't request\n+\tDECL_ARTIFICIAL_P on elab proc declarations.\n+\n 2019-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* repinfo.adb (List_Record_Info): Declare Incomplete_Layout and"}, {"sha": "6cd37598d396240d743ca3235b201556987951a6", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d9ce464afc12f95951de2a3be3398e1d2f292d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d9ce464afc12f95951de2a3be3398e1d2f292d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=19d9ce464afc12f95951de2a3be3398e1d2f292d", "patch": "@@ -6276,13 +6276,17 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   Node_Id gnat_pragma;\n   /* Make the decl for the elaboration procedure.  Emit debug info for it, so\n      that users can break into their elaboration code in debuggers.  Kludge:\n-     don't consider it as a definition so that we have a line map for its body,\n-     but no subprogram description in debug info. */\n+     don't consider it as a definition so that we have a line map for its\n+     body, but no subprogram description in debug info.  In addition, don't\n+     qualify it as artificial, even though it is not a user subprogram per se,\n+     in particular for specs.  Unlike, say, clones created internally by the\n+     compiler, this subprogram materializes specific user code and flagging it\n+     artificial would take elab code away from gcov's analysis.  */\n   tree gnu_elab_proc_decl\n     = create_subprog_decl\n       (create_concat_name (gnat_unit_entity, body_p ? \"elabb\" : \"elabs\"),\n        NULL_TREE, void_ftype, NULL_TREE,\n-       is_default, true, false, true, true, false, NULL, gnat_unit);\n+       is_default, true, false, false, true, false, NULL, gnat_unit);\n   struct elab_info *info;\n \n   vec_safe_push (gnu_elab_proc_stack, gnu_elab_proc_decl);"}]}