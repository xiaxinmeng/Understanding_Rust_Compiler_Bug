{"sha": "94986f6d3503507f78d2d9d10cd0b98f8f65ce3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ5ODZmNmQzNTAzNTA3Zjc4ZDJkOWQxMGNkMGI5OGY4ZjY1Y2UzZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-04-06T13:31:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-04-06T13:31:12Z"}, "message": "random.h (operator==): Mark all inline.\n\n2009-04-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.h (operator==): Mark all inline.\n\t(mersenne_twister_engine): Enable #if 0 checks.\n\n\t* include/bits/random.h: Formatting tweaks.\n\nFrom-SVN: r145602", "tree": {"sha": "678d04594c0335ab9527de01acdf8c6612b3c9ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/678d04594c0335ab9527de01acdf8c6612b3c9ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94986f6d3503507f78d2d9d10cd0b98f8f65ce3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94986f6d3503507f78d2d9d10cd0b98f8f65ce3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94986f6d3503507f78d2d9d10cd0b98f8f65ce3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94986f6d3503507f78d2d9d10cd0b98f8f65ce3f/comments", "author": null, "committer": null, "parents": [{"sha": "2e698f677d668c5c09319abf53a33fc473a69f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e698f677d668c5c09319abf53a33fc473a69f29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e698f677d668c5c09319abf53a33fc473a69f29"}], "stats": {"total": 383, "additions": 195, "deletions": 188}, "files": [{"sha": "62c741154ba0b3621c26669e79e4c258b9a05179", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94986f6d3503507f78d2d9d10cd0b98f8f65ce3f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94986f6d3503507f78d2d9d10cd0b98f8f65ce3f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=94986f6d3503507f78d2d9d10cd0b98f8f65ce3f", "patch": "@@ -1,3 +1,10 @@\n+2009-04-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.h (operator==): Mark all inline.\n+\t(mersenne_twister_engine): Enable #if 0 checks.\n+\n+\t* include/bits/random.h: Formatting tweaks.\n+\n 2009-04-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/random.tcc (piecewise_linear_distribution<>::"}, {"sha": "55c7b5ad05c20e69b75414282d340f5378359c16", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 188, "deletions": 188, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94986f6d3503507f78d2d9d10cd0b98f8f65ce3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94986f6d3503507f78d2d9d10cd0b98f8f65ce3f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=94986f6d3503507f78d2d9d10cd0b98f8f65ce3f", "patch": "@@ -319,9 +319,9 @@ namespace std\n \t       _UIntType1 __m1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const linear_congruential_engine<_UIntType1, __a1, __c1,\n-\t\t   __m1>& __lcr);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::linear_congruential_engine<_UIntType1,\n+\t\t   __a1, __c1, __m1>&);\n \n       /**\n        * @brief Sets the state of the engine by reading its textual\n@@ -340,9 +340,9 @@ namespace std\n \t       _UIntType1 __m1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   linear_congruential_engine<_UIntType1,\n-\t\t\t\t\t      __a1, __c1, __m1>& __lcr);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::linear_congruential_engine<_UIntType1, __a1,\n+\t\t   __c1, __m1>&);\n \n     private:\n       template<typename _Gen>\n@@ -406,18 +406,15 @@ namespace std\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n       static_assert(__w >= __l,\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__w <= static_cast<size_t>(numeric_limits<_UIntType>::digits), \n+      static_assert(__w <=\n+\t\t    static_cast<size_t>(numeric_limits<_UIntType>::digits),\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-\n-#if 0\n-      // XXX\n       static_assert(__a <= __detail::_ShiftMin1<_UIntType, __w>::__value,\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n       static_assert(__b <= __detail::_ShiftMin1<_UIntType, __w>::__value,\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n       static_assert(__c <= __detail::_ShiftMin1<_UIntType, __w>::__value,\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-#endif\n \n     public:\n       /** The type of the generated random value. */\n@@ -530,9 +527,10 @@ namespace std\n \t       _UIntType1 __c1, size_t __l1, _UIntType1 __f1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const mersenne_twister_engine<_UIntType1, __w1, __n1, __m1, __r1,\n-\t\t   __a1, __u1, __d1, __s1, __b1, __t1, __c1, __l1, __f1>& __x);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::mersenne_twister_engine<_UIntType1, __w1, __n1,\n+\t\t   __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,\n+\t\t   __l1, __f1>&);\n \n       /**\n        * @brief Extracts the current state of a % mersenne_twister_engine\n@@ -555,9 +553,10 @@ namespace std\n \t       _UIntType1 __c1, size_t __l1, _UIntType1 __f1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   mersenne_twister_engine<_UIntType1, __w1, __n1, __m1, __r1,\n-\t\t   __a1, __u1, __d1, __s1, __b1, __t1, __c1, __l1, __f1>& __x);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::mersenne_twister_engine<_UIntType1, __w1, __n1, __m1,\n+\t\t   __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,\n+\t\t   __l1, __f1>&);\n \n     private:\n       template<typename _Gen>\n@@ -719,9 +718,9 @@ namespace std\n       template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const subtract_with_carry_engine<_UIntType1, __w1, __s1,\n-\t\t   __r1>& __x);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::subtract_with_carry_engine<_UIntType1, __w1,\n+\t\t   __s1, __r1>&);\n \n       /**\n        * @brief Extracts the current state of a % subtract_with_carry_engine\n@@ -737,8 +736,9 @@ namespace std\n       template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   subtract_with_carry_engine<_UIntType1, __w1, __s1, __r1>& __x);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::subtract_with_carry_engine<_UIntType1, __w1,\n+\t\t   __s1, __r1>&);\n \n     private:\n       template<typename _Gen>\n@@ -934,9 +934,9 @@ namespace std\n       template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const discard_block_engine<_RandomNumberEngine1,\n-\t\t   __p1, __r1>& __x);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::discard_block_engine<_RandomNumberEngine1,\n+\t\t   __p1, __r1>&);\n \n       /**\n        * @brief Extracts the current state of a % subtract_with_carry_engine\n@@ -952,9 +952,9 @@ namespace std\n       template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   discard_block_engine<_RandomNumberEngine1,\n-\t\t   __p1, __r1>& __x);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::discard_block_engine<_RandomNumberEngine1,\n+\t\t   __p1, __r1>&);\n \n     private:\n       _RandomNumberEngine _M_b;\n@@ -969,9 +969,10 @@ namespace std\n     class independent_bits_engine\n     {\n       static_assert(__w > 0U\n-\t\t && __w <= static_cast<size_t>(numeric_limits<_UIntType>::digits),\n-\t\t    \"template arguments out of bounds\"\n-\t\t    \" in independent_bits_engine\");\n+\t\t    && __w <=\n+\t\t    static_cast<size_t>(numeric_limits<_UIntType>::digits),\n+\t\t    \"template arguments out of bounds \"\n+\t\t    \"in independent_bits_engine\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -1125,7 +1126,7 @@ namespace std\n       template<typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n \toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   independent_bits_engine<_RandomNumberEngine,\n+\t\t   std::independent_bits_engine<_RandomNumberEngine,\n \t\t   __w, _UIntType>& __x)\n \t{\n \t  __is >> __x._M_b;\n@@ -1150,7 +1151,7 @@ namespace std\n \t   typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const independent_bits_engine<_RandomNumberEngine,\n+\t       const std::independent_bits_engine<_RandomNumberEngine,\n \t       __w, _UIntType>& __x)\n     {\n       __os << __x.base();\n@@ -1228,8 +1229,8 @@ namespace std\n       { _M_initialize(); }\n \n       /**\n-       * @brief Reseeds the %shuffle_order_engine object with the default seed for\n-       *        the underlying base class generator engine.\n+       * @brief Reseeds the %shuffle_order_engine object with the default seed\n+                for the underlying base class generator engine.\n        */\n       void\n       seed()\n@@ -1333,9 +1334,9 @@ namespace std\n       template<typename _RandomNumberEngine1, size_t __k1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const shuffle_order_engine<_RandomNumberEngine1,\n-\t\t   __k1>& __x);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::shuffle_order_engine<_RandomNumberEngine1,\n+\t\t   __k1>&);\n \n       /**\n        * @brief Extracts the current state of a % subtract_with_carry_engine\n@@ -1351,9 +1352,8 @@ namespace std\n       template<typename _RandomNumberEngine1, size_t __k1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   shuffle_order_engine<_RandomNumberEngine1,\n-\t\t   __k1>& __x);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::shuffle_order_engine<_RandomNumberEngine1, __k1>&);\n \n     private:\n       void _M_initialize()\n@@ -1691,9 +1691,9 @@ namespace std\n    *        the same parameters.\n    */\n   template<typename _IntType>\n-    bool\n-    operator==(const uniform_int_distribution<_IntType>& __d1,\n-\t       const uniform_int_distribution<_IntType>& __d2)\n+    inline bool\n+    operator==(const std::uniform_int_distribution<_IntType>& __d1,\n+\t       const std::uniform_int_distribution<_IntType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -1708,8 +1708,8 @@ namespace std\n    */\n   template<typename _IntType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const uniform_int_distribution<_IntType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::uniform_int_distribution<_IntType>&);\n \n   /**\n    * @brief Extracts a %uniform_int_distribution random number distribution\n@@ -1722,8 +1722,8 @@ namespace std\n    */\n   template<typename _IntType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       uniform_int_distribution<_IntType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::uniform_int_distribution<_IntType>&);\n \n \n   /**\n@@ -1860,9 +1860,9 @@ namespace std\n    *        the same parameters.\n    */\n   template<typename _IntType>\n-    bool\n-    operator==(const uniform_real_distribution<_IntType>& __d1,\n-\t       const uniform_real_distribution<_IntType>& __d2)\n+    inline bool\n+    operator==(const std::uniform_real_distribution<_IntType>& __d1,\n+\t       const std::uniform_real_distribution<_IntType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -1877,8 +1877,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const uniform_real_distribution<_RealType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::uniform_real_distribution<_RealType>&);\n \n   /**\n    * @brief Extracts a %uniform_real_distribution random number distribution\n@@ -1891,8 +1891,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       uniform_real_distribution<_RealType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::uniform_real_distribution<_RealType>&);\n \n   /* @} */ // group std_random_distributions_uniform\n \n@@ -2028,8 +2028,8 @@ namespace std\n        */\n       template<typename _RealType1>\n \tfriend bool\n-\toperator==(const normal_distribution<_RealType1>& __d1,\n-\t\t   const normal_distribution<_RealType1>& __d2);\n+        operator==(const std::normal_distribution<_RealType1>& __d1,\n+\t\t   const std::normal_distribution<_RealType1>& __d2);\n \n       /**\n        * @brief Inserts a %normal_distribution random number distribution\n@@ -2043,8 +2043,8 @@ namespace std\n        */\n       template<typename _RealType1, typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const normal_distribution<_RealType1>& __x);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::normal_distribution<_RealType1>&);\n \n       /**\n        * @brief Extracts a %normal_distribution random number distribution\n@@ -2058,8 +2058,8 @@ namespace std\n        */\n       template<typename _RealType1, typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   normal_distribution<_RealType1>& __x);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::normal_distribution<_RealType1>&);\n \n     private:\n       param_type  _M_param;\n@@ -2186,9 +2186,9 @@ namespace std\n    *        the same parameters.\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const lognormal_distribution<_RealType>& __d1,\n-\t       const lognormal_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::lognormal_distribution<_RealType>& __d1,\n+\t       const std::lognormal_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -2203,8 +2203,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const lognormal_distribution<_RealType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::lognormal_distribution<_RealType>&);\n \n   /**\n    * @brief Extracts a %lognormal_distribution random number distribution\n@@ -2218,8 +2218,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       lognormal_distribution<_RealType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::lognormal_distribution<_RealType>&);\n \n \n   /**\n@@ -2328,9 +2328,9 @@ namespace std\n    *        the same parameters.\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const chi_squared_distribution<_RealType>& __d1,\n-\t       const chi_squared_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::chi_squared_distribution<_RealType>& __d1,\n+\t       const std::chi_squared_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -2345,8 +2345,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const chi_squared_distribution<_RealType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::chi_squared_distribution<_RealType>&);\n \n   /**\n    * @brief Extracts a %chi_squared_distribution random number distribution\n@@ -2360,8 +2360,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       chi_squared_distribution<_RealType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::chi_squared_distribution<_RealType>&);\n \n \n   /**\n@@ -2481,9 +2481,9 @@ namespace std\n    *        the same parameters.\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const cauchy_distribution<_RealType>& __d1,\n-\t       const cauchy_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::cauchy_distribution<_RealType>& __d1,\n+\t       const std::cauchy_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -2498,8 +2498,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const cauchy_distribution<_RealType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::cauchy_distribution<_RealType>&);\n \n   /**\n    * @brief Extracts a %cauchy_distribution random number distribution\n@@ -2513,8 +2513,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       cauchy_distribution<_RealType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::cauchy_distribution<_RealType>&);\n \n \n   /**\n@@ -2636,9 +2636,9 @@ namespace std\n    *        the same parameters.\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const fisher_f_distribution<_RealType>& __d1,\n-\t       const fisher_f_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::fisher_f_distribution<_RealType>& __d1,\n+\t       const std::fisher_f_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -2653,8 +2653,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const fisher_f_distribution<_RealType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::fisher_f_distribution<_RealType>&);\n \n   /**\n    * @brief Extracts a %fisher_f_distribution random number distribution\n@@ -2668,8 +2668,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       fisher_f_distribution<_RealType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::fisher_f_distribution<_RealType>&);\n \n \n   /**\n@@ -2784,9 +2784,9 @@ namespace std\n    *        the same parameters.\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const student_t_distribution<_RealType>& __d1,\n-\t       const student_t_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::student_t_distribution<_RealType>& __d1,\n+\t       const std::student_t_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -2801,8 +2801,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const student_t_distribution<_RealType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::student_t_distribution<_RealType>&);\n \n   /**\n    * @brief Extracts a %student_t_distribution random number distribution\n@@ -2816,8 +2816,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       student_t_distribution<_RealType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::student_t_distribution<_RealType>&);\n \n   /* @} */ // group std_random_distributions_normal\n \n@@ -2959,9 +2959,9 @@ namespace std\n    * @brief Return true if two Bernoulli distributions have\n    *        the same parameters.\n    */\n-  bool\n-  operator==(const bernoulli_distribution& __d1,\n-\t     const bernoulli_distribution& __d2)\n+  inline bool\n+  operator==(const std::bernoulli_distribution& __d1,\n+\t     const std::bernoulli_distribution& __d2)\n   { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -2976,8 +2976,8 @@ namespace std\n    */\n   template<typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const bernoulli_distribution& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::bernoulli_distribution&);\n \n   /**\n    * @brief Extracts a %bernoulli_distribution random number distribution\n@@ -2991,7 +2991,7 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n     operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       bernoulli_distribution& __x)\n+\t       std::bernoulli_distribution& __x)\n     {\n       double __p;\n       __is >> __p;\n@@ -3026,8 +3026,8 @@ namespace std\n \t: _M_t(__t), _M_p(__p)\n \t{\n \t  _GLIBCXX_DEBUG_ASSERT((_M_t >= _IntType(0))\n-\t\t\t     && (_M_p >= 0.0)\n-\t\t\t     && (_M_p <= 1.0));\n+\t\t\t\t&& (_M_p >= 0.0)\n+\t\t\t\t&& (_M_p <= 1.0));\n \t  _M_initialize();\n \t}\n \n@@ -3126,10 +3126,10 @@ namespace std\n        */\n       template<typename _IntType1>\n \tfriend bool\n-\toperator==(const binomial_distribution<_IntType1>& __d1,\n-\t\t   const binomial_distribution<_IntType1>& __d2)\n-\t{ return (__d1.param() == __d2.param())\n-\t      && (__d1._M_nd == __d2._M_nd); }\n+        operator==(const std::binomial_distribution<_IntType1>& __d1,\n+\t\t   const std::binomial_distribution<_IntType1>& __d2)\n+\t{ return ((__d1.param() == __d2.param())\n+\t\t  && (__d1._M_nd == __d2._M_nd)); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -3154,8 +3154,8 @@ namespace std\n       template<typename _IntType1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const binomial_distribution<_IntType1>& __x);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::binomial_distribution<_IntType1>&);\n \n       /**\n        * @brief Extracts a %binomial_distribution random number distribution\n@@ -3170,8 +3170,8 @@ namespace std\n       template<typename _IntType1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   binomial_distribution<_IntType1>& __x);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::binomial_distribution<_IntType1>&);\n \n     private:\n       template<typename _UniformRandomNumberGenerator>\n@@ -3307,7 +3307,7 @@ namespace std\n    *        the same parameters.\n    */\n   template<typename _IntType>\n-    bool\n+    inline bool\n     operator==(const geometric_distribution<_IntType>& __d1,\n \t       const geometric_distribution<_IntType>& __d2)\n     { return __d1.param() == __d2.param(); }\n@@ -3325,8 +3325,8 @@ namespace std\n   template<typename _IntType,\n \t   typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const geometric_distribution<_IntType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::geometric_distribution<_IntType>&);\n \n   /**\n    * @brief Extracts a %geometric_distribution random number distribution\n@@ -3340,8 +3340,8 @@ namespace std\n   template<typename _IntType,\n \t   typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       geometric_distribution<_IntType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::geometric_distribution<_IntType>&);\n \n \n   /**\n@@ -3465,9 +3465,9 @@ namespace std\n    *        the same parameters.\n    */\n   template<typename _IntType>\n-    bool\n-    operator==(const negative_binomial_distribution<_IntType>& __d1,\n-\t       const negative_binomial_distribution<_IntType>& __d2)\n+    inline bool\n+    operator==(const std::negative_binomial_distribution<_IntType>& __d1,\n+\t       const std::negative_binomial_distribution<_IntType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -3483,8 +3483,8 @@ namespace std\n    */\n   template<typename _IntType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const negative_binomial_distribution<_IntType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::negative_binomial_distribution<_IntType>&);\n \n   /**\n    * @brief Extracts a %negative_binomial_distribution random number\n@@ -3498,8 +3498,8 @@ namespace std\n    */\n   template<typename _IntType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       negative_binomial_distribution<_IntType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::negative_binomial_distribution<_IntType>&);\n \n   /* @} */ // group std_random_distributions_bernoulli\n \n@@ -3629,10 +3629,10 @@ namespace std\n        */\n       template<typename _IntType1>\n \tfriend bool\n-\toperator==(const poisson_distribution<_IntType1>& __d1,\n-\t\t   const poisson_distribution<_IntType1>& __d2)\n-\t{ return (__d1.param() == __d2.param())\n-\t      && (__d1._M_nd == __d2._M_nd); }\n+        operator==(const std::poisson_distribution<_IntType1>& __d1,\n+\t\t   const std::poisson_distribution<_IntType1>& __d2)\n+\t{ return ((__d1.param() == __d2.param())\n+\t\t  && (__d1._M_nd == __d2._M_nd)); }\n \n       /**\n        * @brief Inserts a %poisson_distribution random number distribution\n@@ -3646,8 +3646,8 @@ namespace std\n        */\n       template<typename _IntType1, typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const poisson_distribution<_IntType1>& __x);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::poisson_distribution<_IntType1>&);\n \n       /**\n        * @brief Extracts a %poisson_distribution random number distribution\n@@ -3661,8 +3661,8 @@ namespace std\n        */\n       template<typename _IntType1, typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   poisson_distribution<_IntType1>& __x);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::poisson_distribution<_IntType1>&);\n \n     private:\n       param_type _M_param;\n@@ -3803,9 +3803,9 @@ namespace std\n    *        parameters.\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const exponential_distribution<_RealType>& __d1,\n-\t       const exponential_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::exponential_distribution<_RealType>& __d1,\n+\t       const std::exponential_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -3820,8 +3820,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const exponential_distribution<_RealType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::exponential_distribution<_RealType>&);\n \n   /**\n    * @brief Extracts a %exponential_distribution random number distribution\n@@ -3835,8 +3835,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       exponential_distribution<_RealType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::exponential_distribution<_RealType>&);\n \n \n   /**\n@@ -3877,8 +3877,8 @@ namespace std\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_alpha == __p2._M_alpha)\n-\t      && (__p1._M_beta == __p2._M_beta); }\n+\t{ return ((__p1._M_alpha == __p2._M_alpha)\n+\t\t  && (__p1._M_beta == __p2._M_beta)); }\n \n       private:\n \tvoid\n@@ -3977,9 +3977,9 @@ namespace std\n    *        parameters.\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const gamma_distribution<_RealType>& __d1,\n-\t       const gamma_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::gamma_distribution<_RealType>& __d1,\n+\t       const std::gamma_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -3994,8 +3994,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const gamma_distribution<_RealType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::gamma_distribution<_RealType>&);\n \n   /**\n    * @brief Extracts a %gamma_distribution random number distribution\n@@ -4008,8 +4008,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       gamma_distribution<_RealType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::gamma_distribution<_RealType>&);\n \n \n   /**\n@@ -4139,9 +4139,9 @@ namespace std\n    *        parameters.\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const weibull_distribution<_RealType>& __d1,\n-\t       const weibull_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::weibull_distribution<_RealType>& __d1,\n+\t       const std::weibull_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -4156,8 +4156,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const weibull_distribution<_RealType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::weibull_distribution<_RealType>&);\n \n   /**\n    * @brief Extracts a %weibull_distribution random number distribution\n@@ -4171,8 +4171,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       weibull_distribution<_RealType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::weibull_distribution<_RealType>&);\n \n \n   /**\n@@ -4295,9 +4295,9 @@ namespace std\n    *\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const extreme_value_distribution<_RealType>& __d1,\n-\t       const extreme_value_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::extreme_value_distribution<_RealType>& __d1,\n+\t       const std::extreme_value_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /**\n@@ -4312,8 +4312,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const extreme_value_distribution<_RealType>& __x);\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::extreme_value_distribution<_RealType>&);\n \n   /**\n    * @brief Extracts a %extreme_value_distribution random number\n@@ -4327,8 +4327,8 @@ namespace std\n    */\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       extreme_value_distribution<_RealType>& __x);\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::extreme_value_distribution<_RealType>&);\n \n \n   /**\n@@ -4475,8 +4475,8 @@ namespace std\n        */\n       template<typename _IntType1, typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const discrete_distribution<_IntType1>& __x);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::discrete_distribution<_IntType1>&);\n \n       /**\n        * @brief Extracts a %discrete_distribution random number distribution\n@@ -4491,8 +4491,8 @@ namespace std\n        */\n       template<typename _IntType1, typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   discrete_distribution<_IntType1>& __x);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::discrete_distribution<_IntType1>&);\n \n     private:\n       param_type _M_param;\n@@ -4502,9 +4502,9 @@ namespace std\n    *\n    */\n   template<typename _IntType>\n-    bool\n-    operator==(const discrete_distribution<_IntType>& __d1,\n-\t       const discrete_distribution<_IntType>& __d2)\n+    inline bool\n+    operator==(const std::discrete_distribution<_IntType>& __d1,\n+\t       const std::discrete_distribution<_IntType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n \n@@ -4550,8 +4550,8 @@ namespace std\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_int == __p2._M_int)\n-\t      && (__p1._M_den == __p2._M_den); }\n+\t{ return ((__p1._M_int == __p2._M_int)\n+\t\t  && (__p1._M_den == __p2._M_den)); }\n \n       private:\n \tvoid\n@@ -4665,8 +4665,8 @@ namespace std\n        */\n       template<typename _RealType1, typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const piecewise_constant_distribution<_RealType1>& __x);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::piecewise_constant_distribution<_RealType1>&);\n \n       /**\n        * @brief Extracts a %piecewise_constan_distribution random\n@@ -4681,8 +4681,8 @@ namespace std\n        */\n       template<typename _RealType1, typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   piecewise_constant_distribution<_RealType1>& __x);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::piecewise_constant_distribution<_RealType1>&);\n \n     private:\n       param_type _M_param;\n@@ -4692,9 +4692,9 @@ namespace std\n    *\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const piecewise_constant_distribution<_RealType>& __d1,\n-\t       const piecewise_constant_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::piecewise_constant_distribution<_RealType>& __d1,\n+\t       const std::piecewise_constant_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n \n@@ -4740,8 +4740,8 @@ namespace std\n \n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_int == __p2._M_int)\n-\t      && (__p1._M_den == __p2._M_den); }\n+\t{ return ((__p1._M_int == __p2._M_int)\n+\t\t  && (__p1._M_den == __p2._M_den)); }\n \n       private:\n \tvoid\n@@ -4857,8 +4857,8 @@ namespace std\n        */\n       template<typename _RealType1, typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const piecewise_linear_distribution<_RealType1>& __x);\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::piecewise_linear_distribution<_RealType1>&);\n \n       /**\n        * @brief Extracts a %piecewise_linear_distribution random number\n@@ -4873,8 +4873,8 @@ namespace std\n        */\n       template<typename _RealType1, typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   piecewise_linear_distribution<_RealType1>& __x);\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::piecewise_linear_distribution<_RealType1>&);\n \n     private:\n       param_type _M_param;\n@@ -4884,9 +4884,9 @@ namespace std\n    *\n    */\n   template<typename _RealType>\n-    bool\n-    operator==(const piecewise_linear_distribution<_RealType>& __d1,\n-\t       const piecewise_linear_distribution<_RealType>& __d2)\n+    inline bool\n+    operator==(const std::piecewise_linear_distribution<_RealType>& __d1,\n+\t       const std::piecewise_linear_distribution<_RealType>& __d2)\n     { return __d1.param() == __d2.param(); }\n \n   /* @} */ // group std_random_distributions_poisson\n@@ -4937,7 +4937,7 @@ namespace std\n \n   private:\n     ///\n-    vector<result_type> _M_v;\n+    std::vector<result_type> _M_v;\n   };\n \n   /* @} */ // group std_random_utilities"}]}