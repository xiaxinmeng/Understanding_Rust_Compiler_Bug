{"sha": "7d9cb05400f69764e2f9c3065c8024795c7a9a69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5Y2IwNTQwMGY2OTc2NGUyZjljMzA2NWM4MDI0Nzk1YzdhOWE2OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-06-10T17:14:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-06-10T17:14:40Z"}, "message": "throw_allocator.h: Use noexcept.\n\n2011-06-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/ext/throw_allocator.h: Use noexcept.\n\t* include/ext/pool_allocator.h: Likewise.\n\t* include/ext/bitmap_allocator.h: Likewise.\n\t* include/ext/new_allocator.h: Likewise.\n\t* include/ext/malloc_allocator.h: Likewise.\n\t* include/ext/array_allocator.h: Likewise.\n\t* include/ext/mt_allocator.h: Likewise.\n\t* include/ext/extptr_allocator.h: Likewise.\n\t* testsuite/util/testsuite_allocator.h: Likewise; do not include\n\t<cassert> directly, include <testsuite_hooks.h> instead.\n\nFrom-SVN: r174918", "tree": {"sha": "3832bd31ced556e39afeabed732fc2ec9d262570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3832bd31ced556e39afeabed732fc2ec9d262570"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9cb05400f69764e2f9c3065c8024795c7a9a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9cb05400f69764e2f9c3065c8024795c7a9a69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9cb05400f69764e2f9c3065c8024795c7a9a69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9cb05400f69764e2f9c3065c8024795c7a9a69/comments", "author": null, "committer": null, "parents": [{"sha": "30a96b3b0c49394c861df8c07a7c506b95082937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a96b3b0c49394c861df8c07a7c506b95082937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a96b3b0c49394c861df8c07a7c506b95082937"}], "stats": {"total": 228, "additions": 132, "deletions": 96}, "files": [{"sha": "f96b961c2f50ce1cadd0b68c85ab532e6144cdec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7d9cb05400f69764e2f9c3065c8024795c7a9a69", "patch": "@@ -1,3 +1,16 @@\n+2011-06-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/ext/throw_allocator.h: Use noexcept.\n+\t* include/ext/pool_allocator.h: Likewise.\n+\t* include/ext/bitmap_allocator.h: Likewise.\n+\t* include/ext/new_allocator.h: Likewise.\n+\t* include/ext/malloc_allocator.h: Likewise.\n+\t* include/ext/array_allocator.h: Likewise.\n+\t* include/ext/mt_allocator.h: Likewise.\n+\t* include/ext/extptr_allocator.h: Likewise.\n+\t* testsuite/util/testsuite_allocator.h: Likewise; do not include\n+\t<cassert> directly, include <testsuite_hooks.h> instead.\n+\n 2011-06-10  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/pb_ds/*: Doxygen markup redo."}, {"sha": "2c9666a72486562223c5d6bb27d356823add8713", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=7d9cb05400f69764e2f9c3065c8024795c7a9a69", "patch": "@@ -1,6 +1,6 @@\n // array allocator -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -57,10 +57,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp        \tvalue_type;\n \n       pointer\n-      address(reference __x) const { return std::__addressof(__x); }\n+      address(reference __x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(__x); }\n \n       const_pointer\n-      address(const_reference __x) const { return std::__addressof(__x); }\n+      address(const_reference __x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(__x); }\n \n       void\n       deallocate(pointer, size_type)\n@@ -69,7 +71,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       size_type\n-      max_size() const throw() \n+      max_size() const _GLIBCXX_USE_NOEXCEPT \n       { return size_t(-1) / sizeof(_Tp); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -120,17 +122,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         struct rebind\n         { typedef array_allocator<_Tp1, _Array1> other; };\n \n-      array_allocator(array_type* __array = 0) throw() \n+      array_allocator(array_type* __array = 0) _GLIBCXX_USE_NOEXCEPT \n       : _M_array(__array), _M_used(size_type()) { }\n \n-      array_allocator(const array_allocator& __o)  throw() \n+      array_allocator(const array_allocator& __o) _GLIBCXX_USE_NOEXCEPT \n       : _M_array(__o._M_array), _M_used(__o._M_used) { }\n \n       template<typename _Tp1, typename _Array1>\n-        array_allocator(const array_allocator<_Tp1, _Array1>&) throw()\n+        array_allocator(const array_allocator<_Tp1, _Array1>&)\n+\t_GLIBCXX_USE_NOEXCEPT\n \t: _M_array(0), _M_used(size_type()) { }\n \n-      ~array_allocator() throw() { }\n+      ~array_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n       pointer\n       allocate(size_type __n, const void* = 0)"}, {"sha": "dd0634be0026a1dc88c11831677710be8f35dbad", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=7d9cb05400f69764e2f9c3065c8024795c7a9a69", "patch": "@@ -997,17 +997,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     public:\n-      bitmap_allocator() throw()\n+      bitmap_allocator() _GLIBCXX_USE_NOEXCEPT\n       { }\n \n-      bitmap_allocator(const bitmap_allocator&)\n+      bitmap_allocator(const bitmap_allocator&) _GLIBCXX_USE_NOEXCEPT\n       { }\n \n       template<typename _Tp1>\n-        bitmap_allocator(const bitmap_allocator<_Tp1>&) throw()\n+        bitmap_allocator(const bitmap_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT\n         { }\n \n-      ~bitmap_allocator() throw()\n+      ~bitmap_allocator() _GLIBCXX_USE_NOEXCEPT\n       { }\n \n       pointer \n@@ -1042,15 +1042,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       pointer \n-      address(reference __r) const\n+      address(reference __r) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__r); }\n \n       const_pointer \n-      address(const_reference __r) const\n+      address(const_reference __r) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__r); }\n \n       size_type \n-      max_size() const throw()\n+      max_size() const _GLIBCXX_USE_NOEXCEPT\n       { return size_type(-1) / sizeof(value_type); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "96aea72cc884c2b188db244b10b3f22c2ffc3b4f", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=7d9cb05400f69764e2f9c3065c8024795c7a9a69", "patch": "@@ -72,23 +72,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         struct rebind\n         { typedef _ExtPtr_allocator<_Up> other; };\n \n-      _ExtPtr_allocator() throw() \n+      _ExtPtr_allocator() _GLIBCXX_USE_NOEXCEPT \n       : _M_real_alloc() { }\n \n-      _ExtPtr_allocator(const _ExtPtr_allocator &__rarg) throw()\n+      _ExtPtr_allocator(const _ExtPtr_allocator& __rarg) _GLIBCXX_USE_NOEXCEPT\n       : _M_real_alloc(__rarg._M_real_alloc) { }\n \n       template<typename _Up>\n-        _ExtPtr_allocator(const _ExtPtr_allocator<_Up>& __rarg) throw()\n+        _ExtPtr_allocator(const _ExtPtr_allocator<_Up>& __rarg)\n+\t_GLIBCXX_USE_NOEXCEPT\n         : _M_real_alloc(__rarg._M_getUnderlyingImp()) { }\n \n-      ~_ExtPtr_allocator() throw()\n+      ~_ExtPtr_allocator() _GLIBCXX_USE_NOEXCEPT\n       { }\n \n-      pointer address(reference __x) const\n+      pointer address(reference __x) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__x); }\n \n-      const_pointer address(const_reference __x) const\n+      const_pointer address(const_reference __x) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__x); }\n \n       pointer allocate(size_type __n, void* __hint = 0)\n@@ -97,7 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void deallocate(pointer __p, size_type __n)\n       { _M_real_alloc.deallocate(__p.get(), __n); }\n \n-      size_type max_size() const throw()\n+      size_type max_size() const _GLIBCXX_USE_NOEXCEPT\n       { return __numeric_traits<size_type>::__max / sizeof(_Tp); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "4900723399324c61f57b5f244c0c13db193b90d7", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=7d9cb05400f69764e2f9c3065c8024795c7a9a69", "patch": "@@ -1,6 +1,7 @@\n // Allocator that wraps \"C\" malloc -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+// 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -66,20 +67,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         struct rebind\n         { typedef malloc_allocator<_Tp1> other; };\n \n-      malloc_allocator() throw() { }\n+      malloc_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n-      malloc_allocator(const malloc_allocator&) throw() { }\n+      malloc_allocator(const malloc_allocator&) _GLIBCXX_USE_NOEXCEPT { }\n \n       template<typename _Tp1>\n-        malloc_allocator(const malloc_allocator<_Tp1>&) throw() { }\n+        malloc_allocator(const malloc_allocator<_Tp1>&)\n+\t_GLIBCXX_USE_NOEXCEPT { }\n \n-      ~malloc_allocator() throw() { }\n+      ~malloc_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n       pointer\n-      address(reference __x) const { return std::__addressof(__x); }\n+      address(reference __x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(__x); }\n \n       const_pointer\n-      address(const_reference __x) const { return std::__addressof(__x); }\n+      address(const_reference __x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(__x); }\n \n       // NB: __n is permitted to be 0.  The C++ standard says nothing\n       // about what the return value is when __n == 0.\n@@ -101,7 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::free(static_cast<void*>(__p)); }\n \n       size_type\n-      max_size() const throw() \n+      max_size() const _GLIBCXX_USE_NOEXCEPT \n       { return size_t(-1) / sizeof(_Tp); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "069476bafe7f7dc20b965ebc852eafaaaad145cc", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=7d9cb05400f69764e2f9c3065c8024795c7a9a69", "patch": "@@ -1,6 +1,6 @@\n // MT-optimized allocator -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -577,15 +577,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp                       value_type;\n \n       pointer\n-      address(reference __x) const\n+      address(reference __x) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__x); }\n \n       const_pointer\n-      address(const_reference __x) const\n+      address(const_reference __x) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__x); }\n \n       size_type\n-      max_size() const throw() \n+      max_size() const _GLIBCXX_USE_NOEXCEPT \n       { return size_t(-1) / sizeof(_Tp); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -648,14 +648,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  typedef __mt_alloc<_Tp1, pol_type> other;\n \t};\n \n-      __mt_alloc() throw() { }\n+      __mt_alloc() _GLIBCXX_USE_NOEXCEPT { }\n \n-      __mt_alloc(const __mt_alloc&) throw() { }\n+      __mt_alloc(const __mt_alloc&) _GLIBCXX_USE_NOEXCEPT { }\n \n       template<typename _Tp1, typename _Poolp1>\n-        __mt_alloc(const __mt_alloc<_Tp1, _Poolp1>&) throw() { }\n+        __mt_alloc(const __mt_alloc<_Tp1, _Poolp1>&) _GLIBCXX_USE_NOEXCEPT { }\n \n-      ~__mt_alloc() throw() { }\n+      ~__mt_alloc() _GLIBCXX_USE_NOEXCEPT { }\n \n       pointer\n       allocate(size_type __n, const void* = 0);"}, {"sha": "0c82bd0ae900f1d5bc859ae30660a8b3f7e7b0e0", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=7d9cb05400f69764e2f9c3065c8024795c7a9a69", "patch": "@@ -66,20 +66,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         struct rebind\n         { typedef new_allocator<_Tp1> other; };\n \n-      new_allocator() throw() { }\n+      new_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n-      new_allocator(const new_allocator&) throw() { }\n+      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }\n \n       template<typename _Tp1>\n-        new_allocator(const new_allocator<_Tp1>&) throw() { }\n+        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }\n \n-      ~new_allocator() throw() { }\n+      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n       pointer\n-      address(reference __x) const { return std::__addressof(__x); }\n+      address(reference __x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(__x); }\n \n       const_pointer\n-      address(const_reference __x) const { return std::__addressof(__x); }\n+      address(const_reference __x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(__x); }\n \n       // NB: __n is permitted to be 0.  The C++ standard says nothing\n       // about what the return value is when __n == 0.\n@@ -98,7 +100,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { ::operator delete(__p); }\n \n       size_type\n-      max_size() const throw() \n+      max_size() const _GLIBCXX_USE_NOEXCEPT\n       { return size_t(-1) / sizeof(_Tp); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "03d167ca23129c8947142e3d4190b82f9fed58f8", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=7d9cb05400f69764e2f9c3065c8024795c7a9a69", "patch": "@@ -1,6 +1,7 @@\n // Allocators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+// 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -139,23 +140,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         struct rebind\n         { typedef __pool_alloc<_Tp1> other; };\n \n-      __pool_alloc() throw() { }\n+      __pool_alloc() _GLIBCXX_USE_NOEXCEPT { }\n \n-      __pool_alloc(const __pool_alloc&) throw() { }\n+      __pool_alloc(const __pool_alloc&) _GLIBCXX_USE_NOEXCEPT { }\n \n       template<typename _Tp1>\n-        __pool_alloc(const __pool_alloc<_Tp1>&) throw() { }\n+        __pool_alloc(const __pool_alloc<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }\n \n-      ~__pool_alloc() throw() { }\n+      ~__pool_alloc() _GLIBCXX_USE_NOEXCEPT { }\n \n       pointer\n-      address(reference __x) const { return std::__addressof(__x); }\n+      address(reference __x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(__x); }\n \n       const_pointer\n-      address(const_reference __x) const { return std::__addressof(__x); }\n+      address(const_reference __x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(__x); }\n \n       size_type\n-      max_size() const throw() \n+      max_size() const _GLIBCXX_USE_NOEXCEPT \n       { return size_t(-1) / sizeof(_Tp); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "4988f8a8a15fddd81e96602658b5cd77290024a0", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=7d9cb05400f69764e2f9c3065c8024795c7a9a69", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -618,14 +618,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n       size_type\n-      max_size() const throw()\n+      max_size() const _GLIBCXX_USE_NOEXCEPT\n       { return _M_allocator.max_size(); }\n \n       pointer\n-      address(reference __x) const { return std::__addressof(__x); }\n+      address(reference __x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(__x); }\n \n       const_pointer\n-      address(const_reference __x) const { return std::__addressof(__x); }\n+      address(const_reference __x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(__x); }\n \n       pointer\n       allocate(size_type __n, std::allocator<void>::const_pointer hint = 0)\n@@ -699,14 +701,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstruct rebind\n \t{ typedef throw_allocator_limit<_Tp1> other; };\n \n-      throw_allocator_limit() throw() { }\n+      throw_allocator_limit() _GLIBCXX_USE_NOEXCEPT { }\n \n-      throw_allocator_limit(const throw_allocator_limit&) throw() { }\n+      throw_allocator_limit(const throw_allocator_limit&)\n+      _GLIBCXX_USE_NOEXCEPT { }\n \n       template<typename _Tp1>\n-\tthrow_allocator_limit(const throw_allocator_limit<_Tp1>&) throw() { }\n+\tthrow_allocator_limit(const throw_allocator_limit<_Tp1>&)\n+\t_GLIBCXX_USE_NOEXCEPT { }\n \n-      ~throw_allocator_limit() throw() { }\n+      ~throw_allocator_limit() _GLIBCXX_USE_NOEXCEPT { }\n     };\n \n   /// Allocator throwing via random condition.\n@@ -718,14 +722,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstruct rebind\n \t{ typedef throw_allocator_random<_Tp1> other; };\n \n-      throw_allocator_random() throw() { }\n+      throw_allocator_random() _GLIBCXX_USE_NOEXCEPT { }\n \n-      throw_allocator_random(const throw_allocator_random&) throw() { }\n+      throw_allocator_random(const throw_allocator_random&)\n+      _GLIBCXX_USE_NOEXCEPT { }\n \n       template<typename _Tp1>\n-\tthrow_allocator_random(const throw_allocator_random<_Tp1>&) throw() { }\n+\tthrow_allocator_random(const throw_allocator_random<_Tp1>&)\n+\t_GLIBCXX_USE_NOEXCEPT { }\n \n-      ~throw_allocator_random() throw() { }\n+      ~throw_allocator_random() _GLIBCXX_USE_NOEXCEPT { }\n     };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "95e8d0dbaac193957d2695a68a8e1660d334cdaf", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cb05400f69764e2f9c3065c8024795c7a9a69/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=7d9cb05400f69764e2f9c3065c8024795c7a9a69", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Testing allocator for the C++ library testsuite.\n //\n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -28,11 +28,8 @@\n #define _GLIBCXX_TESTSUITE_ALLOCATOR_H\n \n #include <tr1/unordered_map>\n-#include <cassert>\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n #include <bits/move.h>\n-#endif\n+#include <testsuite_hooks.h>\n \n namespace __gnu_test\n {\n@@ -110,28 +107,28 @@ namespace __gnu_test\n     template<class U> struct rebind { typedef tracker_allocator<U> other; };\n     \n     pointer\n-    address(reference value) const\n-    { return &value; }\n-    \n+    address(reference value) const _GLIBCXX_NOEXCEPT\n+    { return std::__addressof(value); }\n+\n     const_pointer\n-    address(const_reference value) const\n-    { return &value; }\n-    \n-    tracker_allocator() throw()\n+    address(const_reference value) const _GLIBCXX_NOEXCEPT\n+    { return std::__addressof(value); }\n+\n+    tracker_allocator() _GLIBCXX_USE_NOEXCEPT\n     { }\n \n-    tracker_allocator(const tracker_allocator&) throw()\n+    tracker_allocator(const tracker_allocator&) _GLIBCXX_USE_NOEXCEPT\n     { }\n \n     template<class U>\n-      tracker_allocator(const tracker_allocator<U>&) throw()\n+      tracker_allocator(const tracker_allocator<U>&) _GLIBCXX_USE_NOEXCEPT\n       { }\n \n-    ~tracker_allocator() throw()\n+    ~tracker_allocator() _GLIBCXX_USE_NOEXCEPT\n     { }\n \n     size_type\n-    max_size() const throw()\n+    max_size() const _GLIBCXX_USE_NOEXCEPT\n     { return size_type(-1) / sizeof(T); }\n \n     pointer\n@@ -263,24 +260,29 @@ namespace __gnu_test\n         struct rebind\n \t{ typedef uneq_allocator<Tp1> other; };\n \n-      uneq_allocator() throw()\n+      uneq_allocator() _GLIBCXX_USE_NOEXCEPT\n       : personality(0) { }\n \n-      uneq_allocator(int person) throw()\n+      uneq_allocator(int person) _GLIBCXX_USE_NOEXCEPT\n       : personality(person) { }\n       \n       template<typename Tp1>\n-        uneq_allocator(const uneq_allocator<Tp1>& b) throw()\n+        uneq_allocator(const uneq_allocator<Tp1>& b) _GLIBCXX_USE_NOEXCEPT\n \t: personality(b.get_personality()) { }\n \n+      ~uneq_allocator() _GLIBCXX_USE_NOEXCEPT\n+      { }\n+\n       int get_personality() const { return personality; }\n       \n       pointer\n-      address(reference x) const { return &x; }\n+      address(reference x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(x); }\n     \n       const_pointer\n-      address(const_reference x) const { return &x; }\n-    \n+      address(const_reference x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(x); }\n+\n       pointer\n       allocate(size_type n, const void* = 0)\n       { \n@@ -300,27 +302,29 @@ namespace __gnu_test\n \t  }\n \treturn p;\n       }\n-      \n+\n       void\n       deallocate(pointer p, size_type)\n       {\n-\tassert( p );\n-\t\n+\tbool test __attribute__((unused)) = true;\n+\n+\tVERIFY( p );\n+\n \tmap_type::iterator it = get_map().find(reinterpret_cast<void*>(p));\n-\tassert( it != get_map().end() );\n+\tVERIFY( it != get_map().end() );\n \n \t// Enforce requirements in Table 32 about deallocation vs\n \t// allocator equality.\n-\tassert( it->second == personality );\n-\t\n+\tVERIFY( it->second == personality );\n+\n \tget_map().erase(it);\n \t::operator delete(p);\n       }\n-      \n+\n       size_type\n-      max_size() const throw() \n+      max_size() const _GLIBCXX_USE_NOEXCEPT \n       { return size_type(-1) / sizeof(Tp); }\n-      \n+\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename U, typename... Args>\n         void"}]}