{"sha": "8915876911d0ccd86ef397a49779e7352f0563f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxNTg3NjkxMWQwY2NkODZlZjM5N2E0OTc3OWU3MzUyZjA1NjNmNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-29T20:29:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-29T20:29:24Z"}, "message": "Update to current master Go testsuite.\n\nFrom-SVN: r171695", "tree": {"sha": "341e06883395d0c3eaf768f6ab170039419d84df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/341e06883395d0c3eaf768f6ab170039419d84df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8915876911d0ccd86ef397a49779e7352f0563f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8915876911d0ccd86ef397a49779e7352f0563f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8915876911d0ccd86ef397a49779e7352f0563f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8915876911d0ccd86ef397a49779e7352f0563f5/comments", "author": null, "committer": null, "parents": [{"sha": "3c844a6a13096f126522a0ea58a3e9ba503bd959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c844a6a13096f126522a0ea58a3e9ba503bd959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c844a6a13096f126522a0ea58a3e9ba503bd959"}], "stats": {"total": 4054, "additions": 3036, "deletions": 1018}, "files": [{"sha": "96421c36b8909bc498210dffb4d87078598ae761", "filename": "gcc/testsuite/go.test/test/append.go", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fappend.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fappend.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fappend.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,227 @@\n+// $G $F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Semi-exhaustive test for append()\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+)\n+\n+\n+func verify(name string, result, expected interface{}) {\n+\tif !reflect.DeepEqual(result, expected) {\n+\t\tpanic(name)\n+\t}\n+}\n+\n+\n+func main() {\n+\tfor _, t := range tests {\n+\t\tverify(t.name, t.result, t.expected)\n+\t}\n+\tverifyStruct()\n+\tverifyInterface()\n+}\n+\n+\n+var tests = []struct {\n+\tname             string\n+\tresult, expected interface{}\n+}{\n+\t{\"bool a\", append([]bool{}), []bool{}},\n+\t{\"bool b\", append([]bool{}, true), []bool{true}},\n+\t{\"bool c\", append([]bool{}, true, false, true, true), []bool{true, false, true, true}},\n+\n+\t{\"bool d\", append([]bool{true, false, true}), []bool{true, false, true}},\n+\t{\"bool e\", append([]bool{true, false, true}, false), []bool{true, false, true, false}},\n+\t{\"bool f\", append([]bool{true, false, true}, false, false, false), []bool{true, false, true, false, false, false}},\n+\n+\t{\"bool g\", append([]bool{}, []bool{true}...), []bool{true}},\n+\t{\"bool h\", append([]bool{}, []bool{true, false, true, false}...), []bool{true, false, true, false}},\n+\n+\t{\"bool i\", append([]bool{true, false, true}, []bool{true}...), []bool{true, false, true, true}},\n+\t{\"bool j\", append([]bool{true, false, true}, []bool{true, true, true}...), []bool{true, false, true, true, true, true}},\n+\n+\n+\t{\"byte a\", append([]byte{}), []byte{}},\n+\t{\"byte b\", append([]byte{}, 0), []byte{0}},\n+\t{\"byte c\", append([]byte{}, 0, 1, 2, 3), []byte{0, 1, 2, 3}},\n+\n+\t{\"byte d\", append([]byte{0, 1, 2}), []byte{0, 1, 2}},\n+\t{\"byte e\", append([]byte{0, 1, 2}, 3), []byte{0, 1, 2, 3}},\n+\t{\"byte f\", append([]byte{0, 1, 2}, 3, 4, 5), []byte{0, 1, 2, 3, 4, 5}},\n+\n+\t{\"byte g\", append([]byte{}, []byte{0}...), []byte{0}},\n+\t{\"byte h\", append([]byte{}, []byte{0, 1, 2, 3}...), []byte{0, 1, 2, 3}},\n+\n+\t{\"byte i\", append([]byte{0, 1, 2}, []byte{3}...), []byte{0, 1, 2, 3}},\n+\t{\"byte j\", append([]byte{0, 1, 2}, []byte{3, 4, 5}...), []byte{0, 1, 2, 3, 4, 5}},\n+\n+\n+\t{\"int16 a\", append([]int16{}), []int16{}},\n+\t{\"int16 b\", append([]int16{}, 0), []int16{0}},\n+\t{\"int16 c\", append([]int16{}, 0, 1, 2, 3), []int16{0, 1, 2, 3}},\n+\n+\t{\"int16 d\", append([]int16{0, 1, 2}), []int16{0, 1, 2}},\n+\t{\"int16 e\", append([]int16{0, 1, 2}, 3), []int16{0, 1, 2, 3}},\n+\t{\"int16 f\", append([]int16{0, 1, 2}, 3, 4, 5), []int16{0, 1, 2, 3, 4, 5}},\n+\n+\t{\"int16 g\", append([]int16{}, []int16{0}...), []int16{0}},\n+\t{\"int16 h\", append([]int16{}, []int16{0, 1, 2, 3}...), []int16{0, 1, 2, 3}},\n+\n+\t{\"int16 i\", append([]int16{0, 1, 2}, []int16{3}...), []int16{0, 1, 2, 3}},\n+\t{\"int16 j\", append([]int16{0, 1, 2}, []int16{3, 4, 5}...), []int16{0, 1, 2, 3, 4, 5}},\n+\n+\n+\t{\"uint32 a\", append([]uint32{}), []uint32{}},\n+\t{\"uint32 b\", append([]uint32{}, 0), []uint32{0}},\n+\t{\"uint32 c\", append([]uint32{}, 0, 1, 2, 3), []uint32{0, 1, 2, 3}},\n+\n+\t{\"uint32 d\", append([]uint32{0, 1, 2}), []uint32{0, 1, 2}},\n+\t{\"uint32 e\", append([]uint32{0, 1, 2}, 3), []uint32{0, 1, 2, 3}},\n+\t{\"uint32 f\", append([]uint32{0, 1, 2}, 3, 4, 5), []uint32{0, 1, 2, 3, 4, 5}},\n+\n+\t{\"uint32 g\", append([]uint32{}, []uint32{0}...), []uint32{0}},\n+\t{\"uint32 h\", append([]uint32{}, []uint32{0, 1, 2, 3}...), []uint32{0, 1, 2, 3}},\n+\n+\t{\"uint32 i\", append([]uint32{0, 1, 2}, []uint32{3}...), []uint32{0, 1, 2, 3}},\n+\t{\"uint32 j\", append([]uint32{0, 1, 2}, []uint32{3, 4, 5}...), []uint32{0, 1, 2, 3, 4, 5}},\n+\n+\n+\t{\"float64 a\", append([]float64{}), []float64{}},\n+\t{\"float64 b\", append([]float64{}, 0), []float64{0}},\n+\t{\"float64 c\", append([]float64{}, 0, 1, 2, 3), []float64{0, 1, 2, 3}},\n+\n+\t{\"float64 d\", append([]float64{0, 1, 2}), []float64{0, 1, 2}},\n+\t{\"float64 e\", append([]float64{0, 1, 2}, 3), []float64{0, 1, 2, 3}},\n+\t{\"float64 f\", append([]float64{0, 1, 2}, 3, 4, 5), []float64{0, 1, 2, 3, 4, 5}},\n+\n+\t{\"float64 g\", append([]float64{}, []float64{0}...), []float64{0}},\n+\t{\"float64 h\", append([]float64{}, []float64{0, 1, 2, 3}...), []float64{0, 1, 2, 3}},\n+\n+\t{\"float64 i\", append([]float64{0, 1, 2}, []float64{3}...), []float64{0, 1, 2, 3}},\n+\t{\"float64 j\", append([]float64{0, 1, 2}, []float64{3, 4, 5}...), []float64{0, 1, 2, 3, 4, 5}},\n+\n+\n+\t{\"complex128 a\", append([]complex128{}), []complex128{}},\n+\t{\"complex128 b\", append([]complex128{}, 0), []complex128{0}},\n+\t{\"complex128 c\", append([]complex128{}, 0, 1, 2, 3), []complex128{0, 1, 2, 3}},\n+\n+\t{\"complex128 d\", append([]complex128{0, 1, 2}), []complex128{0, 1, 2}},\n+\t{\"complex128 e\", append([]complex128{0, 1, 2}, 3), []complex128{0, 1, 2, 3}},\n+\t{\"complex128 f\", append([]complex128{0, 1, 2}, 3, 4, 5), []complex128{0, 1, 2, 3, 4, 5}},\n+\n+\t{\"complex128 g\", append([]complex128{}, []complex128{0}...), []complex128{0}},\n+\t{\"complex128 h\", append([]complex128{}, []complex128{0, 1, 2, 3}...), []complex128{0, 1, 2, 3}},\n+\n+\t{\"complex128 i\", append([]complex128{0, 1, 2}, []complex128{3}...), []complex128{0, 1, 2, 3}},\n+\t{\"complex128 j\", append([]complex128{0, 1, 2}, []complex128{3, 4, 5}...), []complex128{0, 1, 2, 3, 4, 5}},\n+\n+\n+\t{\"string a\", append([]string{}), []string{}},\n+\t{\"string b\", append([]string{}, \"0\"), []string{\"0\"}},\n+\t{\"string c\", append([]string{}, \"0\", \"1\", \"2\", \"3\"), []string{\"0\", \"1\", \"2\", \"3\"}},\n+\n+\t{\"string d\", append([]string{\"0\", \"1\", \"2\"}), []string{\"0\", \"1\", \"2\"}},\n+\t{\"string e\", append([]string{\"0\", \"1\", \"2\"}, \"3\"), []string{\"0\", \"1\", \"2\", \"3\"}},\n+\t{\"string f\", append([]string{\"0\", \"1\", \"2\"}, \"3\", \"4\", \"5\"), []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"}},\n+\n+\t{\"string g\", append([]string{}, []string{\"0\"}...), []string{\"0\"}},\n+\t{\"string h\", append([]string{}, []string{\"0\", \"1\", \"2\", \"3\"}...), []string{\"0\", \"1\", \"2\", \"3\"}},\n+\n+\t{\"string i\", append([]string{\"0\", \"1\", \"2\"}, []string{\"3\"}...), []string{\"0\", \"1\", \"2\", \"3\"}},\n+\t{\"string j\", append([]string{\"0\", \"1\", \"2\"}, []string{\"3\", \"4\", \"5\"}...), []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"}},\n+}\n+\n+\n+func verifyStruct() {\n+\ttype T struct {\n+\t\ta, b, c string\n+\t}\n+\ttype S []T\n+\te := make(S, 100)\n+\tfor i := range e {\n+\t\te[i] = T{\"foo\", fmt.Sprintf(\"%d\", i), \"bar\"}\n+\t}\n+\n+\tverify(\"struct a\", append(S{}), S{})\n+\tverify(\"struct b\", append(S{}, e[0]), e[0:1])\n+\tverify(\"struct c\", append(S{}, e[0], e[1], e[2]), e[0:3])\n+\n+\tverify(\"struct d\", append(e[0:1]), e[0:1])\n+\tverify(\"struct e\", append(e[0:1], e[1]), e[0:2])\n+\tverify(\"struct f\", append(e[0:1], e[1], e[2], e[3]), e[0:4])\n+\n+\tverify(\"struct g\", append(e[0:3]), e[0:3])\n+\tverify(\"struct h\", append(e[0:3], e[3]), e[0:4])\n+\tverify(\"struct i\", append(e[0:3], e[3], e[4], e[5], e[6]), e[0:7])\n+\n+\tfor i := range e {\n+\t\tverify(\"struct j\", append(S{}, e[0:i]...), e[0:i])\n+\t\tinput := make(S, i)\n+\t\tcopy(input, e[0:i])\n+\t\tverify(\"struct k\", append(input, e[i:]...), e)\n+\t\tverify(\"struct k - input modified\", input, e[0:i])\n+\t}\n+\n+\ts := make(S, 10, 20)\n+\tr := make(S, len(s)+len(e))\n+\tfor i, x := range e {\n+\t\tr[len(s)+i] = x\n+\t}\n+\tverify(\"struct l\", append(s), s)\n+\tverify(\"struct m\", append(s, e...), r)\n+}\n+\n+\n+func verifyInterface() {\n+\ttype T interface{}\n+\ttype S []T\n+\te := make(S, 100)\n+\tfor i := range e {\n+\t\tswitch i % 4 {\n+\t\tcase 0:\n+\t\t\te[i] = i\n+\t\tcase 1:\n+\t\t\te[i] = \"foo\"\n+\t\tcase 2:\n+\t\t\te[i] = fmt.Sprintf(\"%d\", i)\n+\t\tcase 3:\n+\t\t\te[i] = float64(i)\n+\t\t}\n+\t}\n+\n+\tverify(\"interface a\", append(S{}), S{})\n+\tverify(\"interface b\", append(S{}, e[0]), e[0:1])\n+\tverify(\"interface c\", append(S{}, e[0], e[1], e[2]), e[0:3])\n+\n+\tverify(\"interface d\", append(e[0:1]), e[0:1])\n+\tverify(\"interface e\", append(e[0:1], e[1]), e[0:2])\n+\tverify(\"interface f\", append(e[0:1], e[1], e[2], e[3]), e[0:4])\n+\n+\tverify(\"interface g\", append(e[0:3]), e[0:3])\n+\tverify(\"interface h\", append(e[0:3], e[3]), e[0:4])\n+\tverify(\"interface i\", append(e[0:3], e[3], e[4], e[5], e[6]), e[0:7])\n+\n+\tfor i := range e {\n+\t\tverify(\"interface j\", append(S{}, e[0:i]...), e[0:i])\n+\t\tinput := make(S, i)\n+\t\tcopy(input, e[0:i])\n+\t\tverify(\"interface k\", append(input, e[i:]...), e)\n+\t\tverify(\"interface k - input modified\", input, e[0:i])\n+\t}\n+\n+\ts := make(S, 10, 20)\n+\tr := make(S, len(s)+len(e))\n+\tfor i, x := range e {\n+\t\tr[len(s)+i] = x\n+\t}\n+\tverify(\"interface l\", append(s), s)\n+\tverify(\"interface m\", append(s, e...), r)\n+}"}, {"sha": "2c7230f100a01569a633ad3ccee74b8da5e97ee7", "filename": "gcc/testsuite/go.test/test/arm-pass.txt", "status": "removed", "additions": 0, "deletions": 488, "changes": 488, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Farm-pass.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Farm-pass.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Farm-pass.txt?ref=3c844a6a13096f126522a0ea58a3e9ba503bd959", "patch": "@@ -1,488 +0,0 @@\n-./235.go\n-# ./64bit.go\t# fail, flaky on android build\n-./args.go\n-./assign.go\n-./assign1.go\n-./bigalg.go\n-./bigmap.go\n-./blank.go\n-./blank1.go\n-./chancap.go\n-./char_lit.go\n-./char_lit1.go\n-./closedchan.go\n-./closure.go\n-./cmp1.go\n-./cmp2.go\n-./cmp3.go\n-./cmp4.go\n-./cmp5.go\n-./cmplx.go\n-# ./cmplxdivide.go\t# fail, BUG\n-./cmplxdivide1.go\n-./complit.go\n-./compos.go\n-./const.go\n-./const1.go\n-./const2.go\n-./const3.go\n-./convert.go\n-./convert3.go\n-./convlit.go\n-./convlit1.go\n-./copy.go\n-./ddd.go\n-./ddd1.go\n-./ddd2.go\n-./ddd3.go\n-./decl.go\n-./declbad.go\n-./defer.go\n-./deferprint.go\n-./empty.go\n-./env.go\n-./escape.go\n-./float_lit.go\n-./floatcmp.go\n-./for.go\n-./func.go\n-./func1.go\n-./func2.go\n-./func3.go\n-./func4.go\n-./func5.go\n-./gc.go\n-./gc1.go\n-./hashmap.go\n-./helloworld.go\n-./if.go\n-./if1.go\n-./import.go\n-./import1.go\n-./import2.go\n-./import3.go\n-./import4.go\n-./indirect.go\n-./indirect1.go\n-./initcomma.go\n-./initialize.go\n-./initializerr.go\n-./initsyscall.go\n-./int_lit.go\n-./intcvt.go\n-./iota.go\n-./literal.go\n-./malloc1.go\n-# ./mallocfin.go\t# fail\n-./mallocrand.go\n-./mallocrep.go\n-./mallocrep1.go\n-# ./map.go\t# fail\n-./method.go\n-./method1.go\n-./method2.go\n-./method3.go\n-./named.go\n-./named1.go\n-./nil.go\n-./nul1.go\n-./parentype.go\n-./peano.go\n-./printbig.go\n-./range.go\n-./recover.go\n-./recover1.go\n-./recover2.go\n-# ./recover3.go\t# fail\n-./rename.go\n-./rename1.go\n-./runtime.go\n-./sieve.go\n-./sigchld.go\n-./simassign.go\n-./sinit.go\n-./stack.go\n-./string_lit.go\n-./stringrange.go\n-./switch.go\n-./switch1.go\n-./test0.go\n-./turing.go\n-./typeswitch.go\n-./typeswitch1.go\n-./typeswitch2.go\n-./undef.go\n-./utf.go\n-./varerr.go\n-./varinit.go\n-./vectors.go\n-./zerodivide.go\n-ken/array.go\n-ken/chan.go\n-ken/chan1.go\n-ken/complit.go\n-# ken/cplx0.go\t# output fail\n-# ken/cplx1.go\t# fail\n-# ken/cplx2.go\t# fail\n-# ken/cplx3.go\t# output fail\n-# ken/cplx4.go\t# fail, BUG\n-# ken/cplx5.go\t# output fail\n-ken/divconst.go\n-ken/divmod.go\n-ken/embed.go\n-ken/for.go\n-ken/interbasic.go\n-ken/interfun.go\n-ken/intervar.go\n-ken/label.go\n-ken/litfun.go\n-ken/mfunc.go\n-ken/modconst.go\n-ken/ptrfun.go\n-ken/ptrvar.go\n-ken/range.go\n-ken/rob1.go\n-ken/rob2.go\n-ken/robfor.go\n-ken/robfunc.go\n-ken/robif.go\n-ken/shift.go\n-ken/simparray.go\n-ken/simpbool.go\n-ken/simpconv.go\n-ken/simpfun.go\n-ken/simpprint.go\n-ken/simpswitch.go\n-ken/simpvar.go\n-ken/slicearray.go\n-ken/sliceslice.go\n-ken/string.go\n-ken/strvar.go\n-chan/doubleselect.go\n-chan/fifo.go\n-chan/goroutines.go\n-chan/nonblock.go\n-chan/perm.go\n-chan/powser1.go\n-chan/powser2.go\n-chan/select.go\n-chan/select2.go\n-# chan/select3.go\t# fail\n-chan/sieve1.go\n-chan/sieve2.go\n-interface/bigdata.go\n-interface/convert.go\n-interface/convert1.go\n-interface/convert2.go\n-interface/embed.go\n-interface/embed0.go\n-interface/embed1.go\n-interface/explicit.go\n-interface/fail.go\n-interface/fake.go\n-interface/pointer.go\n-interface/receiver.go\n-interface/receiver1.go\n-interface/recursive.go\n-interface/returntype.go\n-interface/struct.go\n-nilptr/arrayindex.go\n-nilptr/arrayindex1.go\n-nilptr/arraytoslice.go\n-nilptr/arraytoslice1.go\n-nilptr/arraytoslice2.go\n-nilptr/slicearray.go\n-nilptr/structfield.go\n-nilptr/structfield1.go\n-nilptr/structfield2.go\n-nilptr/structfieldaddr.go\n-syntax/forvar.go\n-syntax/import.go\n-syntax/interface.go\n-syntax/semi1.go\n-syntax/semi2.go\n-syntax/semi3.go\n-syntax/semi4.go\n-syntax/semi5.go\n-syntax/semi6.go\n-syntax/semi7.go\n-syntax/slice.go\n-syntax/topexpr.go\n-syntax/vareq.go\n-syntax/vareq1.go\n-fixedbugs/bug000.go\n-fixedbugs/bug001.go\n-fixedbugs/bug002.go\n-fixedbugs/bug003.go\n-fixedbugs/bug004.go\n-fixedbugs/bug005.go\n-fixedbugs/bug006.go\n-fixedbugs/bug007.go\n-fixedbugs/bug008.go\n-fixedbugs/bug009.go\n-fixedbugs/bug010.go\n-fixedbugs/bug011.go\n-fixedbugs/bug012.go\n-fixedbugs/bug013.go\n-fixedbugs/bug014.go\n-fixedbugs/bug015.go\n-fixedbugs/bug016.go\n-fixedbugs/bug017.go\n-fixedbugs/bug020.go\n-fixedbugs/bug021.go\n-fixedbugs/bug022.go\n-fixedbugs/bug023.go\n-fixedbugs/bug024.go\n-fixedbugs/bug026.go\n-fixedbugs/bug027.go\n-fixedbugs/bug028.go\n-fixedbugs/bug030.go\n-fixedbugs/bug031.go\n-fixedbugs/bug035.go\n-fixedbugs/bug036.go\n-fixedbugs/bug037.go\n-fixedbugs/bug038.go\n-fixedbugs/bug039.go\n-fixedbugs/bug040.go\n-fixedbugs/bug045.go\n-fixedbugs/bug046.go\n-fixedbugs/bug047.go\n-fixedbugs/bug048.go\n-fixedbugs/bug049.go\n-fixedbugs/bug050.go\n-fixedbugs/bug051.go\n-fixedbugs/bug052.go\n-fixedbugs/bug053.go\n-fixedbugs/bug054.go\n-fixedbugs/bug055.go\n-fixedbugs/bug056.go\n-fixedbugs/bug057.go\n-fixedbugs/bug058.go\n-fixedbugs/bug059.go\n-fixedbugs/bug060.go\n-fixedbugs/bug061.go\n-fixedbugs/bug062.go\n-fixedbugs/bug063.go\n-fixedbugs/bug064.go\n-fixedbugs/bug065.go\n-fixedbugs/bug066.go\n-fixedbugs/bug067.go\n-fixedbugs/bug068.go\n-fixedbugs/bug069.go\n-fixedbugs/bug070.go\n-fixedbugs/bug071.go\n-fixedbugs/bug072.go\n-fixedbugs/bug073.go\n-fixedbugs/bug074.go\n-fixedbugs/bug075.go\n-fixedbugs/bug076.go\n-fixedbugs/bug077.go\n-fixedbugs/bug078.go\n-fixedbugs/bug080.go\n-fixedbugs/bug081.go\n-fixedbugs/bug082.go\n-fixedbugs/bug083.go\n-fixedbugs/bug084.go\n-fixedbugs/bug085.go\n-fixedbugs/bug086.go\n-fixedbugs/bug087.go\n-fixedbugs/bug088.go\n-fixedbugs/bug089.go\n-fixedbugs/bug090.go\n-fixedbugs/bug091.go\n-fixedbugs/bug092.go\n-fixedbugs/bug093.go\n-fixedbugs/bug094.go\n-fixedbugs/bug096.go\n-fixedbugs/bug097.go\n-fixedbugs/bug098.go\n-fixedbugs/bug099.go\n-fixedbugs/bug101.go\n-fixedbugs/bug102.go\n-fixedbugs/bug103.go\n-fixedbugs/bug104.go\n-fixedbugs/bug106.go\n-fixedbugs/bug107.go\n-fixedbugs/bug108.go\n-fixedbugs/bug109.go\n-fixedbugs/bug110.go\n-fixedbugs/bug111.go\n-fixedbugs/bug112.go\n-fixedbugs/bug113.go\n-fixedbugs/bug114.go\n-fixedbugs/bug115.go\n-fixedbugs/bug116.go\n-fixedbugs/bug117.go\n-fixedbugs/bug118.go\n-fixedbugs/bug119.go\n-fixedbugs/bug120.go\n-fixedbugs/bug121.go\n-fixedbugs/bug122.go\n-fixedbugs/bug123.go\n-fixedbugs/bug126.go\n-fixedbugs/bug127.go\n-fixedbugs/bug128.go\n-fixedbugs/bug129.go\n-fixedbugs/bug130.go\n-fixedbugs/bug131.go\n-fixedbugs/bug132.go\n-fixedbugs/bug133.go\n-fixedbugs/bug135.go\n-fixedbugs/bug136.go\n-fixedbugs/bug137.go\n-fixedbugs/bug139.go\n-fixedbugs/bug140.go\n-fixedbugs/bug141.go\n-fixedbugs/bug142.go\n-fixedbugs/bug143.go\n-fixedbugs/bug144.go\n-fixedbugs/bug145.go\n-fixedbugs/bug146.go\n-fixedbugs/bug147.go\n-fixedbugs/bug148.go\n-fixedbugs/bug149.go\n-fixedbugs/bug150.go\n-fixedbugs/bug151.go\n-fixedbugs/bug152.go\n-fixedbugs/bug154.go\n-fixedbugs/bug155.go\n-fixedbugs/bug156.go\n-fixedbugs/bug157.go\n-fixedbugs/bug158.go\n-fixedbugs/bug159.go\n-fixedbugs/bug160.go\n-fixedbugs/bug161.go\n-fixedbugs/bug163.go\n-fixedbugs/bug164.go\n-fixedbugs/bug165.go\n-fixedbugs/bug167.go\n-fixedbugs/bug168.go\n-fixedbugs/bug169.go\n-fixedbugs/bug170.go\n-fixedbugs/bug171.go\n-fixedbugs/bug172.go\n-fixedbugs/bug173.go\n-fixedbugs/bug174.go\n-fixedbugs/bug175.go\n-fixedbugs/bug176.go\n-fixedbugs/bug177.go\n-fixedbugs/bug178.go\n-fixedbugs/bug179.go\n-fixedbugs/bug180.go\n-fixedbugs/bug181.go\n-fixedbugs/bug182.go\n-fixedbugs/bug183.go\n-fixedbugs/bug184.go\n-fixedbugs/bug185.go\n-fixedbugs/bug186.go\n-fixedbugs/bug187.go\n-fixedbugs/bug188.go\n-fixedbugs/bug189.go\n-fixedbugs/bug190.go\n-fixedbugs/bug191.go\n-fixedbugs/bug192.go\n-fixedbugs/bug193.go\n-fixedbugs/bug194.go\n-fixedbugs/bug195.go\n-fixedbugs/bug196.go\n-fixedbugs/bug197.go\n-fixedbugs/bug198.go\n-fixedbugs/bug199.go\n-fixedbugs/bug200.go\n-fixedbugs/bug201.go\n-fixedbugs/bug202.go\n-fixedbugs/bug203.go\n-fixedbugs/bug204.go\n-fixedbugs/bug205.go\n-fixedbugs/bug206.go\n-fixedbugs/bug207.go\n-fixedbugs/bug208.go\n-fixedbugs/bug209.go\n-fixedbugs/bug211.go\n-fixedbugs/bug212.go\n-fixedbugs/bug213.go\n-fixedbugs/bug214.go\n-fixedbugs/bug215.go\n-fixedbugs/bug216.go\n-fixedbugs/bug217.go\n-fixedbugs/bug218.go\n-fixedbugs/bug219.go\n-fixedbugs/bug220.go\n-fixedbugs/bug221.go\n-fixedbugs/bug222.go\n-fixedbugs/bug223.go\n-fixedbugs/bug224.go\n-fixedbugs/bug225.go\n-fixedbugs/bug226.go\n-fixedbugs/bug227.go\n-fixedbugs/bug228.go\n-fixedbugs/bug229.go\n-fixedbugs/bug230.go\n-fixedbugs/bug231.go\n-fixedbugs/bug232.go\n-fixedbugs/bug233.go\n-fixedbugs/bug234.go\n-fixedbugs/bug235.go\n-fixedbugs/bug236.go\n-fixedbugs/bug237.go\n-fixedbugs/bug238.go\n-fixedbugs/bug239.go\n-fixedbugs/bug240.go\n-fixedbugs/bug241.go\n-fixedbugs/bug242.go\n-# fixedbugs/bug243.go\t# fail, flaky on android build\n-fixedbugs/bug244.go\n-fixedbugs/bug245.go\n-fixedbugs/bug246.go\n-fixedbugs/bug247.go\n-fixedbugs/bug248.go\n-fixedbugs/bug249.go\n-fixedbugs/bug250.go\n-fixedbugs/bug251.go\n-fixedbugs/bug252.go\n-fixedbugs/bug253.go\n-fixedbugs/bug254.go\n-fixedbugs/bug255.go\n-fixedbugs/bug256.go\n-fixedbugs/bug257.go\n-fixedbugs/bug258.go\n-fixedbugs/bug259.go\n-fixedbugs/bug261.go\n-fixedbugs/bug262.go\n-fixedbugs/bug263.go\n-fixedbugs/bug264.go\n-fixedbugs/bug265.go\n-fixedbugs/bug266.go\n-fixedbugs/bug267.go\n-fixedbugs/bug268.go\n-fixedbugs/bug269.go\n-fixedbugs/bug270.go\n-fixedbugs/bug271.go\n-fixedbugs/bug272.go\n-fixedbugs/bug273.go\n-fixedbugs/bug274.go\n-fixedbugs/bug275.go\n-fixedbugs/bug276.go\n-fixedbugs/bug277.go\n-fixedbugs/bug278.go\n-fixedbugs/bug279.go\n-fixedbugs/bug280.go\n-fixedbugs/bug281.go\n-fixedbugs/bug282.go\n-fixedbugs/bug283.go\n-fixedbugs/bug284.go\n-fixedbugs/bug285.go\n-fixedbugs/bug286.go\n-fixedbugs/bug287.go\n-fixedbugs/bug288.go\n-fixedbugs/bug289.go\n-fixedbugs/bug290.go\n-fixedbugs/bug291.go\n-fixedbugs/bug292.go\n-fixedbugs/bug293.go\n-fixedbugs/bug294.go\n-fixedbugs/bug295.go\n-fixedbugs/bug296.go\n-fixedbugs/bug297.go\n-fixedbugs/bug298.go\n-# bugs/bug260.go\t# fail, BUG"}, {"sha": "145fe0cea636af5727088c2b43e0584e93b38b4d", "filename": "gcc/testsuite/go.test/test/bench/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2FMakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2FMakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2FMakefile?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,14 @@\n+# Copyright 2011 The Go Authors. All rights reserved.\n+# Use of this source code is governed by a BSD-style\n+# license that can be found in the LICENSE file.\n+\n+include ../../src/Make.inc\n+\n+all:\n+\t@echo \"make clean or timing\"\n+\n+timing:\n+\t./timing.sh\n+\n+clean:\n+\trm -f [568].out *.[568]"}, {"sha": "d56c0e39405d4af111fff814627f0df37c341e20", "filename": "gcc/testsuite/go.test/test/bench/clean.bash", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fclean.bash", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fclean.bash", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fclean.bash?ref=3c844a6a13096f126522a0ea58a3e9ba503bd959", "patch": "@@ -1,4 +0,0 @@\n-#!/bin/sh\n-\n-OS=568\n-rm -f [$OS].out *.[$OS]"}, {"sha": "7e9b98d5051e953482502c0381c371fb0fb91f17", "filename": "gcc/testsuite/go.test/test/bench/fannkuch-parallel.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ffannkuch-parallel.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ffannkuch-parallel.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ffannkuch-parallel.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -44,7 +44,7 @@ import (\n )\n \n var n = flag.Int(\"n\", 7, \"count\")\n-var nCPU = flag.Int(\"ncpu\", 2, \"number of cpus\")\n+var nCPU = flag.Int(\"ncpu\", 4, \"number of cpus\")\n \n type Job struct {\n \tstart []int"}, {"sha": "64c1c5205817725cfbf4b5acd1c28224458bb4de", "filename": "gcc/testsuite/go.test/test/bench/fasta.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ffasta.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ffasta.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ffasta.c?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -41,10 +41,12 @@ POSSIBILITY OF SUCH DAMAGE.\n #include <stdlib.h>\n #include <string.h>\n \n+#ifndef fwrite_unlocked\n // not available on OS X \n #define fwrite_unlocked fwrite\n #define fputc_unlocked fputc\n #define fputs_unlocked fputs\n+#endif\n \n #define ARRAY_SIZE(a) (sizeof(a)/sizeof(a[0]))\n #define unlikely(x) __builtin_expect((x), 0)\n@@ -214,4 +216,4 @@ main(int argc, const char **argv) {\n             \">THREE Homo sapiens frequency\\n\", n*5, &rand);\n \n     return 0;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d13edd5dcfa039fc3cc7bf0ef7c843a578c3f220", "filename": "gcc/testsuite/go.test/test/bench/fasta.go", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ffasta.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ffasta.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ffasta.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -37,7 +37,6 @@ POSSIBILITY OF SUCH DAMAGE.\n package main\n \n import (\n-\t\"bytes\"\n \t\"flag\"\n \t\"os\"\n )\n@@ -49,7 +48,7 @@ var n = flag.Int(\"n\", 1000, \"length of result\")\n const Line = 60\n \n func Repeat(alu []byte, n int) {\n-\tbuf := bytes.Add(alu, alu)\n+\tbuf := append(alu, alu...)\n \toff := 0\n \tfor n > 0 {\n \t\tm := n\n@@ -138,28 +137,28 @@ func main() {\n \tflag.Parse()\n \n \tiub := []Acid{\n-\t\tAcid{prob: 0.27, sym: 'a'},\n-\t\tAcid{prob: 0.12, sym: 'c'},\n-\t\tAcid{prob: 0.12, sym: 'g'},\n-\t\tAcid{prob: 0.27, sym: 't'},\n-\t\tAcid{prob: 0.02, sym: 'B'},\n-\t\tAcid{prob: 0.02, sym: 'D'},\n-\t\tAcid{prob: 0.02, sym: 'H'},\n-\t\tAcid{prob: 0.02, sym: 'K'},\n-\t\tAcid{prob: 0.02, sym: 'M'},\n-\t\tAcid{prob: 0.02, sym: 'N'},\n-\t\tAcid{prob: 0.02, sym: 'R'},\n-\t\tAcid{prob: 0.02, sym: 'S'},\n-\t\tAcid{prob: 0.02, sym: 'V'},\n-\t\tAcid{prob: 0.02, sym: 'W'},\n-\t\tAcid{prob: 0.02, sym: 'Y'},\n+\t\t{prob: 0.27, sym: 'a'},\n+\t\t{prob: 0.12, sym: 'c'},\n+\t\t{prob: 0.12, sym: 'g'},\n+\t\t{prob: 0.27, sym: 't'},\n+\t\t{prob: 0.02, sym: 'B'},\n+\t\t{prob: 0.02, sym: 'D'},\n+\t\t{prob: 0.02, sym: 'H'},\n+\t\t{prob: 0.02, sym: 'K'},\n+\t\t{prob: 0.02, sym: 'M'},\n+\t\t{prob: 0.02, sym: 'N'},\n+\t\t{prob: 0.02, sym: 'R'},\n+\t\t{prob: 0.02, sym: 'S'},\n+\t\t{prob: 0.02, sym: 'V'},\n+\t\t{prob: 0.02, sym: 'W'},\n+\t\t{prob: 0.02, sym: 'Y'},\n \t}\n \n \thomosapiens := []Acid{\n-\t\tAcid{prob: 0.3029549426680, sym: 'a'},\n-\t\tAcid{prob: 0.1979883004921, sym: 'c'},\n-\t\tAcid{prob: 0.1975473066391, sym: 'g'},\n-\t\tAcid{prob: 0.3015094502008, sym: 't'},\n+\t\t{prob: 0.3029549426680, sym: 'a'},\n+\t\t{prob: 0.1979883004921, sym: 'c'},\n+\t\t{prob: 0.1975473066391, sym: 'g'},\n+\t\t{prob: 0.3015094502008, sym: 't'},\n \t}\n \n \talu := []byte(\n@@ -192,9 +191,7 @@ func (b *buffer) Flush() {\n \n func (b *buffer) WriteString(s string) {\n \tp := b.NextWrite(len(s))\n-\tfor i := 0; i < len(s); i++ {\n-\t\tp[i] = s[i]\n-\t}\n+\tcopy(p, s)\n }\n \n func (b *buffer) NextWrite(n int) []byte {\n@@ -204,6 +201,6 @@ func (b *buffer) NextWrite(n int) []byte {\n \t\tp = *b\n \t}\n \tout := p[len(p) : len(p)+n]\n-\t*b = p[0 : len(p)+n]\n+\t*b = p[:len(p)+n]\n \treturn out\n }"}, {"sha": "96c80d8f0c8021b4b9d7fcda536386cae8f7ea86", "filename": "gcc/testsuite/go.test/test/bench/k-nucleotide-parallel.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fk-nucleotide-parallel.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fk-nucleotide-parallel.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fk-nucleotide-parallel.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -41,6 +41,7 @@ import (\n \t\"fmt\"\n \t\"io/ioutil\"\n \t\"os\"\n+\t\"runtime\"\n \t\"sort\"\n )\n \n@@ -97,6 +98,7 @@ func printKnucs(a kNucArray) {\n }\n \n func main() {\n+\truntime.GOMAXPROCS(4)\n \tin := bufio.NewReader(os.Stdin)\n \tthree := []byte(\">THREE \")\n \tfor {"}, {"sha": "e59312177f4144705af7034c3c538aee134b397c", "filename": "gcc/testsuite/go.test/test/bench/pidigits.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fpidigits.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fpidigits.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fpidigits.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -49,6 +49,7 @@ var silent = flag.Bool(\"s\", false, \"don't print result\")\n var (\n \ttmp1  = big.NewInt(0)\n \ttmp2  = big.NewInt(0)\n+\ttmp3  = big.NewInt(0)\n \ty2    = big.NewInt(0)\n \tbigk  = big.NewInt(0)\n \tnumer = big.NewInt(1)\n@@ -80,7 +81,6 @@ func extract_digit() int64 {\n }\n \n func next_term(k int64) {\n-\t// TODO(eds) If big.Int ever gets a Scale method, y2 and bigk could be int64\n \ty2.SetInt64(k*2 + 1)\n \tbigk.SetInt64(k)\n \n@@ -92,15 +92,15 @@ func next_term(k int64) {\n }\n \n func eliminate_digit(d int64) {\n-\ttmp := big.NewInt(0).Set(denom)\n-\taccum.Sub(accum, tmp.Mul(tmp, big.NewInt(d)))\n+\ttmp3.SetInt64(d)\n+\taccum.Sub(accum, tmp3.Mul(denom, tmp3))\n \taccum.Mul(accum, ten)\n \tnumer.Mul(numer, ten)\n }\n \n func printf(s string, arg ...interface{}) {\n \tif !*silent {\n-\t\tfmt.Printf(s, arg)\n+\t\tfmt.Printf(s, arg...)\n \t}\n }\n "}, {"sha": "a967f27d22350e41ed3997b8af82e0964f8e4a27", "filename": "gcc/testsuite/go.test/test/bench/timing.log", "status": "modified", "additions": 183, "deletions": 7, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ftiming.log", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ftiming.log", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ftiming.log?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -90,7 +90,7 @@ mandelbrot 5500\n \tgc mandelbrot\t74.32u 0.00s 74.35r\n \tgc_B mandelbrot\t74.28u 0.01s 74.31r\n \n-meteor 16000\n+meteor 2100\n \t# we don't know\n \tgcc -O2 meteor-contest.c\t0.10u 0.00s 0.10r\n \tgccgo -O2 meteor-contest.go\t0.12u 0.00s 0.14r\n@@ -209,7 +209,7 @@ mandelbrot 16000\n \tgc mandelbrot\t64.05u 0.02s 64.08r\t# *** -14%\n \tgc_B mandelbrot\t64.10u 0.02s 64.14r\t# *** -14%\n \n-meteor 16000\n+meteor 2100\n \t# we don't know\n \tgcc -O2 meteor-contest.c\t0.10u 0.00s 0.10r\n \tgccgo -O2 meteor-contest.go\t0.12u 0.00s 0.12r\n@@ -307,7 +307,7 @@ mandelbrot 16000\n \tgc mandelbrot\t63.31u 0.01s 63.35r\t# -1%\n \tgc_B mandelbrot\t63.29u 0.00s 63.31r\t# -1%\n \n-meteor 16000\n+meteor 2100\n \t# we don't know\n \tgcc -O2 meteor-contest.c\t0.10u 0.00s 0.10r\n \tgccgo -O2 meteor-contest.go\t0.11u 0.00s 0.12r\n@@ -414,7 +414,7 @@ chameneos 6000000\n \tgcc -O2 chameneosredux.c -lpthread\t18.00u 303.29s 83.64r\n \tgc chameneosredux\t12.10u 0.00s 12.10r  # 2.22X faster\n \n-Jan 6, 2009\n+Jan 6, 2010\n \n # Long-overdue update.  All numbers included in this complete run.\n # Some programs (e.g. reverse-complement) rewritten for speed.\n@@ -429,7 +429,7 @@ fasta -n 25000000\n \n reverse-complement < output-of-fasta-25000000\n \tgcc -O2 reverse-complement.c\t2.00u 0.80s 9.54r\n-\tgccgo -O2 reverse-complement.go\t4.57u 0.35s 4.94r\t# 33% faster\n+#\tgccgo -O2 reverse-complement.go\t4.57u 0.35s 4.94r\t# 33% faster\n \tgc reverse-complement\t2.01u 0.38s 2.40r\t# 3.3X faster\n \tgc_B reverse-complement\t1.88u 0.36s 2.24r\t# 3.2X faster\n GOGC=off\n@@ -445,7 +445,6 @@ nbody -n 50000000\n binary-tree 15 # too slow to use 20\n \tgcc -O2 binary-tree.c -lm\t0.86u 0.00s 0.87r\n \tgccgo -O2 binary-tree.go\t4.82u 0.41s 5.24r\t# 2.5X slower\n-\tgccgo -O2 binary-tree-freelist.go\t0.00u 0.00s 0.00r\n \tgc binary-tree\t7.23u 0.01s 7.25r\t# # -19%\n \tgc binary-tree-freelist\t0.43u 0.00s 0.44r\t# -9%\n \n@@ -478,7 +477,7 @@ mandelbrot 16000\n \tgc mandelbrot\t66.05u 0.00s 66.07r\t# -3%\n \tgc_B mandelbrot\t66.06u 0.00s 66.07r\t# -3%\n \n-meteor 16000\n+meteor 2100\n \tgcc -O2 meteor-contest.c\t0.10u 0.00s 0.10r\n \tgccgo -O2 meteor-contest.go\t0.12u 0.00s 0.12r\n \tgc meteor-contest\t0.17u 0.00s 0.17r\n@@ -498,3 +497,180 @@ chameneos 6000000\n \tgcc -O2 chameneosredux.c -lpthread\t19.02u 331.08s 90.79r\n \tgc chameneosredux\t12.54u 0.00s 12.55r\n \n+Oct 19, 2010\n+\n+# Another long-overdue update. Some of the code is new; parallel versions\n+# of some are added.  A few significant improvements.\n+\n+fasta -n 25000000\n+\tgcc -O2 fasta.c\t4.92u 0.00s 4.93r\n+\tgccgo -O2 fasta.go\t3.31u 0.00s 3.34r  # new code\n+\tgc fasta\t3.68u 0.00s 3.69r  # 2.5X faster with no code\n+\tgc_B fasta\t3.68u 0.00s 3.69r  # 2.3X faster with no code\n+\n+reverse-complement < output-of-fasta-25000000\n+\tgcc -O2 reverse-complement.c\t1.93u 0.81s 11.24r\n+\tgccgo -O2 reverse-complement.go\t1.58u 0.43s 2.04r  # first run with new code?\n+\tgc reverse-complement\t1.84u 0.34s 2.20r  # 10% faster\n+\tgc_B reverse-complement\t1.85u 0.32s 2.18r\n+\n+nbody -n 50000000\n+\tgcc -O2 nbody.c\t21.35u 0.00s 21.36r\n+\tgccgo -O2 nbody.go\t21.62u 0.00s 21.66r  # 3.7X faster - why??\n+\tgc nbody\t29.78u 0.00s 29.79r\n+\tgc_B nbody\t29.72u 0.00s 29.72r\n+\n+binary-tree 15 # too slow to use 20\n+\tgcc -O2 binary-tree.c -lm\t0.86u 0.00s 0.88r\n+\tgccgo -O2 binary-tree.go\t4.05u 0.02s 4.08r  # 28% faster\n+\tgccgo -O2 binary-tree-freelist\t0.34u 0.08s 0.34r\n+\tgc binary-tree\t5.94u 0.00s 5.95r  # 20% faster\n+\tgc binary-tree-freelist\t0.50u 0.01s 0.54r\n+\n+fannkuch 12\n+\tgcc -O2 fannkuch.c\t60.45u 0.00s 60.45r\n+\tgccgo -O2 fannkuch.go\t64.64u 0.00s 64.64r\n+\tgccgo -O2 fannkuch-parallel.go\t115.63u 0.00s 31.58r\n+\tgc fannkuch\t126.52u 0.04s 126.68r\n+\tgc fannkuch-parallel\t238.82u 0.10s 65.93r  # GOMAXPROCS=4\n+\tgc_B fannkuch\t88.99u 0.00s 89.02r\n+\n+regex-dna 100000\n+\tgcc -O2 regex-dna.c -lpcre\t0.89u 0.00s 0.89r\n+\tgc regex-dna\t8.99u 0.02s 9.03r\n+\tgc regex-dna-parallel\t8.94u 0.02s 3.68r  # GOMAXPROCS=4\n+\tgc_B regex-dna\t9.12u 0.00s 9.14r\n+\n+spectral-norm 5500\n+\tgcc -O2 spectral-norm.c -lm\t11.55u 0.00s 11.57r\n+\tgccgo -O2 spectral-norm.go\t11.73u 0.00s 11.75r\n+\tgc spectral-norm\t23.74u 0.00s 23.79r\n+\tgc_B spectral-norm\t24.49u 0.02s 24.54r\n+\n+k-nucleotide 1000000\n+\tgcc -O2 k-nucleotide.c\t11.44u 0.06s 11.50r\n+\tgccgo -O2 k-nucleotide.go\t8.65u 0.04s 8.71r\n+\tgccgo -O2 k-nucleotide-parallel.go\t8.75u 0.03s 2.97r # set GOMAXPROCS=4\n+\tgc k-nucleotide\t14.92u 0.05s 15.01r\n+\tgc k-nucleotide-parallel\t16.96u 0.06s 6.53r  # set GOMAXPROCS=4\n+\tgc_B k-nucleotide\t15.97u 0.03s 16.08r\n+\n+mandelbrot 16000\n+\tgcc -O2 mandelbrot.c\t56.32u 0.00s 56.35r\n+\tgccgo -O2 mandelbrot.go\t55.62u 0.02s 55.77r\n+\tgc mandelbrot\t64.85u 0.01s 64.94r\n+\tgc_B mandelbrot\t65.02u 0.01s 65.14r\n+\n+meteor 2100\n+\tgcc -O2 meteor-contest.c\t0.10u 0.00s 0.10r\n+\tgccgo -O2 meteor-contest.go\t0.10u 0.00s 0.11r\n+\tgc meteor-contest\t0.17u 0.00s 0.18r\n+\tgc_B meteor-contest\t0.16u 0.00s 0.16r\n+\n+pidigits 10000\n+\tgcc -O2 pidigits.c -lgmp\t2.58u 0.00s 2.59r\n+\tgccgo -O2 pidigits.go\t14.06u 0.01s 14.09r # first run?\n+\tgc pidigits\t8.47u 0.05s 8.55r # 4.5X faster due to package big\n+\tgc_B pidigits\t8.33u 0.01s 8.36r # 4.5X faster due to package big\n+\n+threadring 50000000\n+\tgcc -O2 threadring.c\t28.18u 153.19s 186.47r\n+\tgccgo -O2 threadring.go\t110.10u 516.48s 515.25r\n+\tgc threadring\t40.39u 0.00s 40.40r\n+\n+chameneos 6000000\n+\tgcc -O2 chameneosredux.c -lpthread\t18.20u 301.55s 83.10r\n+\tgccgo -O2 chameneosredux.go\t52.22u 324.54s 201.21r\n+\tgc chameneosredux\t13.52u 0.00s 13.54r\n+\n+Dec 14, 2010\n+\n+# Improved regex code (same algorithm) gets ~30%.\n+\n+regex-dna 100000\n+\tgcc -O2 regex-dna.c -lpcre\t0.77u 0.01s 0.78r\n+\tgc regex-dna\t6.80u 0.00s 6.81r\n+\tgc regex-dna-parallel\t6.82u 0.01s 2.75r\n+\tgc_B regex-dna\t6.69u 0.02s 6.70r\n+\n+Feb 15, 2011\n+\n+# Improved GC, still single-threaded but more efficient\n+\n+fasta -n 25000000\n+\tgcc -O2 fasta.c\t3.40u 0.00s 3.40r\n+\tgccgo -O2 fasta.go\t3.51u 0.00s 3.50r\n+\tgc fasta\t3.66u 0.01s 3.66r\n+\tgc_B fasta\t3.66u 0.00s 3.66r\n+\n+reverse-complement < output-of-fasta-25000000\n+\tgcc -O2 reverse-complement.c\t1.86u 1.29s 4.93r\n+\tgccgo -O2 reverse-complement.go\t2.18u 0.41s 2.60r\n+\tgc reverse-complement\t1.67u 0.48s 2.15r\n+\tgc_B reverse-complement\t1.71u 0.45s 2.15r\n+\n+nbody -n 50000000\n+\tgcc -O2 -lm nbody.c\t21.64u 0.00s 21.64r\n+\tgccgo -O2 nbody.go\t21.46u 0.00s 21.45r\n+\tgc nbody\t29.07u 0.00s 29.06r\n+\tgc_B nbody\t31.61u 0.00s 31.61r\n+\n+binary-tree 15 # too slow to use 20\n+\tgcc -O2 binary-tree.c -lm\t0.88u 0.00s 0.87r\n+\tgccgo -O2 binary-tree.go\t2.74u 0.07s 2.81r\n+\tgccgo -O2 binary-tree-freelist.go\t0.01u 0.00s 0.00r\n+\tgc binary-tree\t4.22u 0.02s 4.24r\n+\tgc binary-tree-freelist\t0.54u 0.02s 0.55r\n+\n+fannkuch 12\n+\tgcc -O2 fannkuch.c\t57.64u 0.00s 57.64r\n+\tgccgo -O2 fannkuch.go\t65.79u 0.00s 65.82r\n+\tgccgo -O2 fannkuch-parallel.go\t160.91u 0.02s 43.90r\n+\tgc fannkuch\t126.36u 0.03s 126.53r\n+\tgc fannkuch-parallel\t175.23u 0.04s 45.49r\n+\tgc_B fannkuch\t89.23u 0.00s 89.24r\n+\n+regex-dna 100000\n+\tgcc -O2 regex-dna.c -lpcre\t0.77u 0.01s 0.80r\n+\tgccgo -O2 regex-dna.go\t12.38u 0.10s 12.52r\n+\tgccgo -O2 regex-dna-parallel.go\t43.96u 4.64s 15.11r\n+\tgc regex-dna\t7.03u 0.01s 7.05r\n+\tgc regex-dna-parallel\t6.85u 0.05s 2.70r\n+\tgc_B regex-dna\t6.87u 0.02s 6.89r\n+\n+spectral-norm 5500\n+\tgcc -O2 spectral-norm.c -lm\t12.29u 0.00s 12.28r\n+\tgccgo -O2 spectral-norm.go\t11.79u 0.00s 11.79r\n+\tgc spectral-norm\t24.00u 0.02s 24.05r\n+\tgc_B spectral-norm\t24.59u 0.01s 24.59r\n+\n+k-nucleotide 1000000\n+\tgcc -O2 k-nucleotide.c\t9.75u 0.07s 9.82r\n+\tgccgo -O2 k-nucleotide.go\t8.92u 0.06s 8.98r\n+\tgccgo -O2 k-nucleotide-parallel.go\t8.40u 0.04s 2.76r\n+\tgc k-nucleotide\t17.01u 0.03s 17.04r\n+\tgc k-nucleotide-parallel\t16.51u 0.08s 6.21r\n+\tgc_B k-nucleotide\t16.94u 0.08s 17.02r\n+\n+mandelbrot 16000\n+\tgcc -O2 mandelbrot.c\t54.60u 0.00s 54.66r\n+\tgccgo -O2 mandelbrot.go\t59.38u 0.00s 59.41r\n+\tgc mandelbrot\t64.93u 0.04s 65.08r\n+\tgc_B mandelbrot\t64.85u 0.03s 64.92r\n+\n+meteor 2098\n+\tgcc -O2 meteor-contest.c\t0.10u 0.01s 0.10r\n+\tgccgo -O2 meteor-contest.go\t0.11u 0.00s 0.11r\n+\tgc meteor-contest\t0.18u 0.00s 0.17r\n+\tgc_B meteor-contest\t0.17u 0.00s 0.16r\n+\n+pidigits 10000\n+\tgcc -O2 pidigits.c -lgmp\t2.24u 0.00s 2.23r\n+\tgccgo -O2 pidigits.go\t14.05u 0.00s 14.06r\n+\tgc pidigits\t6.34u 0.05s 6.38r\n+\tgc_B pidigits\t6.37u 0.02s 6.38r\n+\n+threadring 50000000\n+\tgcc -O2 threadring.c\t30.50u 258.05s 325.72r\n+\tgccgo -O2 threadring.go\t92.87u 748.39s 728.46r\n+\tgc threadring\t38.03u 0.01s 38.04r"}, {"sha": "473c9b312f81402c0ee72bbc2037ccf074b9a58f", "filename": "gcc/testsuite/go.test/test/bench/timing.sh", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ftiming.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ftiming.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Ftiming.sh?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -8,6 +8,12 @@ set -e\n eval $(gomake --no-print-directory -f ../../src/Make.inc go-env)\n PATH=.:$PATH\n \n+havegccgo=false\n+if which gccgo >/dev/null 2>&1\n+then\n+\thavegccgo=true\n+fi\n+\n mode=run\n case X\"$1\" in\n X-test)\n@@ -30,8 +36,6 @@ runonly() {\n \tfi\n }\n \n-\n-\n run() {\n \tif [ $mode = test ]\n \tthen\n@@ -57,6 +61,10 @@ run() {\n \t\tfi\n \t\treturn\n \tfi\n+\tif ! $havegccgo && echo $1 | grep -q '^gccgo '\n+\tthen\n+\t\treturn\n+\tfi\n \techo -n '\t'$1'\t'\n \t$1\n \tshift\n@@ -67,7 +75,7 @@ run() {\n fasta() {\n \trunonly echo 'fasta -n 25000000'\n \trun 'gcc -O2 fasta.c' a.out 25000000\n-\t#run 'gccgo -O2 fasta.go' a.out -n 25000000\t#commented out until WriteString is in bufio\n+\trun 'gccgo -O2 fasta.go' a.out -n 25000000\t#commented out until WriteString is in bufio\n \trun 'gc fasta' $O.out -n 25000000\n \trun 'gc_B fasta' $O.out -n 25000000\n }\n@@ -85,7 +93,7 @@ revcomp() {\n \n nbody() {\n \trunonly echo 'nbody -n 50000000'\n-\trun 'gcc -O2 nbody.c' a.out 50000000\n+\trun 'gcc -O2 -lm nbody.c' a.out 50000000\n \trun 'gccgo -O2 nbody.go' a.out -n 50000000\n \trun 'gc nbody' $O.out -n 50000000\n \trun 'gc_B nbody' $O.out -n 50000000\n@@ -115,7 +123,8 @@ regexdna() {\n \trunonly a.out 100000 > x\n \trunonly echo 'regex-dna 100000'\n \trun 'gcc -O2 regex-dna.c -lpcre' a.out <x\n-#\trun 'gccgo -O2 regex-dna.go' a.out <x\t# pages badly; don't run\n+\trun 'gccgo -O2 regex-dna.go' a.out <x\n+\trun 'gccgo -O2 regex-dna-parallel.go' a.out <x\n \trun 'gc regex-dna' $O.out <x\n \trun 'gc regex-dna-parallel' $O.out <x\n \trun 'gc_B regex-dna' $O.out <x\n@@ -135,8 +144,8 @@ knucleotide() {\n \trunonly a.out 1000000 > x  # should be using 25000000\n \trunonly echo 'k-nucleotide 1000000'\n \trun 'gcc -O2 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include k-nucleotide.c -lglib-2.0' a.out <x\n-\trun 'gccgo -O2 k-nucleotide.go' a.out <x\t# warning: pages badly!\n-\trun 'gccgo -O2 k-nucleotide-parallel.go' a.out <x\t# warning: pages badly!\n+\trun 'gccgo -O2 k-nucleotide.go' a.out <x\n+\trun 'gccgo -O2 k-nucleotide-parallel.go' a.out <x\n \trun 'gc k-nucleotide' $O.out <x\n \trun 'gc k-nucleotide-parallel' $O.out <x\n \trun 'gc_B k-nucleotide' $O.out <x\n@@ -152,17 +161,17 @@ mandelbrot() {\n }\n \n meteor() {\n-\trunonly echo 'meteor 16000'\n-\trun 'gcc -O2 meteor-contest.c' a.out\n-\trun 'gccgo -O2 meteor-contest.go' a.out\n-\trun 'gc meteor-contest' $O.out\n-\trun 'gc_B  meteor-contest' $O.out\n+\trunonly echo 'meteor 2098'\n+\trun 'gcc -O2 meteor-contest.c' a.out 2098\n+\trun 'gccgo -O2 meteor-contest.go' a.out -n 2098\n+\trun 'gc meteor-contest' $O.out -n 2098\n+\trun 'gc_B  meteor-contest' $O.out -n 2098\n }\n \n pidigits() {\n \trunonly echo 'pidigits 10000'\n \trun 'gcc -O2 pidigits.c -lgmp' a.out 10000\n-#\trun 'gccgo -O2 pidigits.go' a.out -n 10000  # uncomment when gccgo library updated\n+\trun 'gccgo -O2 pidigits.go' a.out -n 10000\n \trun 'gc pidigits' $O.out -n 10000\n \trun 'gc_B  pidigits' $O.out -n 10000\n }"}, {"sha": "0de56d3d649354e5196e2b2af18f520516083149", "filename": "gcc/testsuite/go.test/test/bugs/bug322.dir/lib.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug322.dir%2Flib.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug322.dir%2Flib.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug322.dir%2Flib.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package lib\n+\n+type T struct {\n+\tx int  // non-exported field\n+}\n+\n+func (t T) M() {\n+}\n+\n+func (t *T) PM() {\n+}"}, {"sha": "0ab5b32e4536429089ef075fee995a2fc9978388", "filename": "gcc/testsuite/go.test/test/bugs/bug322.dir/main.go", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug322.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug322.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug322.dir%2Fmain.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./lib\"\n+\n+type I interface {\n+\tM()\n+}\n+\n+type PI interface {\n+\tPM()\n+}\n+\n+func main() {\n+\tvar t lib.T\n+\tt.M()\n+\tt.PM()\n+\n+\t// This is still an error.\n+\t// var i1 I = t\n+\t// i1.M()\n+\t\n+\t// This combination is illegal because\n+\t// PM requires a pointer receiver.\n+\t// var pi1 PI = t\n+\t// pi1.PM()\n+\n+\tvar pt = &t\n+\tpt.M()\n+\tpt.PM()\n+\n+\tvar i2 I = pt\n+\ti2.M()\n+\n+\tvar pi2 PI = pt\n+\tpi2.PM()\n+}\n+\n+/*\n+These should not be errors anymore:\n+\n+bug322.dir/main.go:19: implicit assignment of unexported field 'x' of lib.T in method receiver\n+bug322.dir/main.go:32: implicit assignment of unexported field 'x' of lib.T in method receiver\n+*/"}, {"sha": "ad0e62dc8c97c9046f1c877f0b8c9aece5b16ebc", "filename": "gcc/testsuite/go.test/test/bugs/bug322.go", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug322.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug322.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug322.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,8 @@\n+// $G $D/$F.dir/lib.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out || echo BUG: fails incorrectly\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test case for issue 1402.\n+ignored"}, {"sha": "4c1a18d9ca2c5a231a9ffa0f0bdf7e22de45830c", "filename": "gcc/testsuite/go.test/test/bugs/bug324.dir/main.go", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug324.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug324.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug324.dir%2Fmain.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"./p\"\n+)\n+\n+type Exported interface {\n+\tprivate()\n+}\n+\n+type Implementation struct{}\n+\n+func (p *Implementation) private() { println(\"main.Implementation.private()\") }\n+\n+\n+func main() {\n+\t// nothing unusual here\n+\tvar x Exported\n+\tx = new(Implementation)\n+\tx.private()  //  main.Implementation.private()\n+\n+\t// same here - should be and is legal\n+\tvar px p.Exported\n+\tpx = p.X\n+\t\n+\t// this assignment is correctly illegal:\n+\t//\tpx.private undefined (cannot refer to unexported field or method private)\n+\t// px.private()\n+\n+\t// this assignment is correctly illegal:\n+\t//\t*Implementation does not implement p.Exported (missing p.private method)\n+\t// px = new(Implementation)\n+\n+\t// this assignment is correctly illegal:\n+\t//\tp.Exported does not implement Exported (missing private method)\n+\t// x = px\n+\n+\t// this assignment unexpectedly compiles and then executes\n+\tx = px.(Exported)\n+\n+\t// this is a legitimate call, but because of the previous assignment,\n+\t// it invokes the method private in p!\n+\tx.private()  // p.Implementation.private()\n+}"}, {"sha": "d1e3b991aada1d9775328bde4054610fd2255681", "filename": "gcc/testsuite/go.test/test/bugs/bug324.dir/p.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug324.dir%2Fp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug324.dir%2Fp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug324.dir%2Fp.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type Exported interface {\n+\tprivate()\n+}\n+\n+type Implementation struct{}\n+\n+func (p *Implementation) private() { println(\"p.Implementation.private()\") }\n+\n+var X = new(Implementation)"}, {"sha": "e188515d772a0ed398770f210840254f530bd694", "filename": "gcc/testsuite/go.test/test/bugs/bug324.go", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug324.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug324.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug324.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,8 @@\n+// $G $D/$F.dir/p.go && $G $D/$F.dir/main.go && $L main.$A && ! ./$A.out || echo BUG: should fail\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test case for issue 1550\n+ignored"}, {"sha": "46618ac881235978c00ef1f6dd49030a81677efb", "filename": "gcc/testsuite/go.test/test/chan/select4.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect4.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,25 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+package main\n+\n+func f() *int {\n+\tprintln(\"BUG: called f\")\n+\treturn new(int)\n+}\n+\n+func main() {\n+\tvar x struct {\n+\t\ta int\n+\t}\n+\tc := make(chan int, 1)\n+\tc1 := make(chan int)\n+\tc <- 42\n+\tselect {\n+\tcase *f() = <-c1:\n+\t\t// nothing\n+\tcase x.a = <-c:\n+\t\tif x.a != 42 {\n+\t\t\tprintln(\"BUG:\", x.a)\n+\t\t}\n+\t}\n+}"}, {"sha": "e7ca9e015c1c228d334151c4b0188a625ed7ff68", "filename": "gcc/testsuite/go.test/test/chan/select5.go", "status": "added", "additions": 482, "deletions": 0, "changes": 482, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect5.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect5.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect5.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,482 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out >tmp.go &&\n+// $G tmp.go && $L tmp.$A && ./$A.out || echo BUG: select5\n+// rm -f tmp.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Generate test of channel operations and simple selects.\n+// Only doing one real send or receive at a time, but phrased\n+// in various ways that the compiler may or may not rewrite\n+// into simpler expressions.\n+\n+package main\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"os\"\n+\t\"template\"\n+)\n+\n+func main() {\n+\tout := bufio.NewWriter(os.Stdout)\n+\tfmt.Fprintln(out, header)\n+\ta := new(arg)\n+\n+\t// Generate each kind of test as a separate function to avoid\n+\t// hitting the 6g optimizer with one enormous function.\n+\t// If we name all the functions init we don't have to\n+\t// maintain a list of which ones to run.\n+\tdo := func(t *template.Template) {\n+\t\tfmt.Fprintln(out, `func init() {`)\n+\t\tfor ; next(); a.reset() {\n+\t\t\trun(t, a, out)\n+\t\t}\n+\t\tfmt.Fprintln(out, `}`)\n+\t}\n+\t\n+\tdo(recv)\n+\tdo(send)\n+\tdo(recvOrder)\n+\tdo(sendOrder)\n+\tdo(nonblock)\n+\n+\tfmt.Fprintln(out, \"//\", a.nreset, \"cases\")\n+\tout.Flush()\n+}\n+\n+func run(t *template.Template, a interface{}, out io.Writer) {\n+\tif err := t.Execute(out, a); err != nil {\n+\t\tpanic(err)\n+\t}\n+}\n+\n+type arg struct{\n+\tdef bool\n+\tnreset int\n+}\n+\n+func (a *arg) Maybe() bool {\n+\treturn maybe()\n+}\n+\n+func (a *arg) MaybeDefault() bool {\n+\tif a.def {\n+\t\treturn false\n+\t}\n+\ta.def = maybe()\n+\treturn a.def\n+}\n+\n+func (a *arg) MustDefault() bool {\n+\treturn !a.def\n+}\n+\n+func (a *arg) reset() {\n+\ta.def = false\n+\ta.nreset++\n+}\n+\n+const header = `// GENERATED BY select5.go; DO NOT EDIT\n+\n+package main\n+\n+// channel is buffered so test is single-goroutine.\n+// we are not interested in the concurrency aspects\n+// of select, just testing that the right calls happen.\n+var c = make(chan int, 1)\n+var nilch chan int\n+var n = 1\n+var x int\n+var i interface{}\n+var dummy = make(chan int)\n+var m = make(map[int]int)\n+var order = 0\n+\n+func f(p *int) *int {\n+\treturn p\n+}\n+\n+// check order of operations by ensuring that\n+// successive calls to checkorder have increasing o values.\n+func checkorder(o int) {\n+\tif o <= order {\n+\t\tprintln(\"invalid order\", o, \"after\", order)\n+\t\tpanic(\"order\")\n+\t}\n+\torder = o\n+}\n+\n+func fc(c chan int, o int) chan int {\n+\tcheckorder(o)\n+\treturn c\n+}\n+\n+func fp(p *int, o int) *int {\n+\tcheckorder(o)\n+\treturn p\n+}\n+\n+func fn(n, o int) int {\n+\tcheckorder(o)\n+\treturn n\n+}\n+\n+func die(x int) {\n+\tprintln(\"have\", x, \"want\", n)\n+\tpanic(\"chan\")\n+}\n+\n+func main() {\n+\t// everything happens in init funcs\n+}\n+`\n+\n+func parse(s string) *template.Template {\n+\tt := template.New(nil)\n+\tt.SetDelims(\"\u2329\", \"\u232a\")\n+\tif err := t.Parse(s); err != nil {\n+\t\tpanic(s)\n+\t}\n+\treturn t\n+}\n+\n+var recv = parse(`\n+\t\u2329# Send n, receive it one way or another into x, check that they match.\u232a\n+\tc <- n\n+\t\u2329.section Maybe\u232a\n+\tx = <-c\n+\t\u2329.or\u232a\n+\tselect {\n+\t\u2329# Blocking or non-blocking, before the receive.\u232a\n+\t\u2329# The compiler implements two-case select where one is default with custom code,\u232a\n+\t\u2329# so test the default branch both before and after the send.\u232a\n+\t\u2329.section MaybeDefault\u232a\n+\tdefault:\n+\t\tpanic(\"nonblock\")\n+\t\u2329.end\u232a\n+\t\u2329# Receive from c.  Different cases are direct, indirect, :=, interface, and map assignment.\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase x = <-c:\n+\t\u2329.or\u232a\u2329.section Maybe\u232a\n+\tcase *f(&x) = <-c:\n+\t\u2329.or\u232a\u2329.section Maybe\u232a\n+\tcase y := <-c:\n+\t\tx = y\n+\t\u2329.or\u232a\u2329.section Maybe\u232a\n+\tcase i = <-c:\n+\t\tx = i.(int)\n+\t\u2329.or\u232a\n+\tcase m[13] = <-c:\n+\t\tx = m[13]\n+\t\u2329.end\u232a\u2329.end\u232a\u2329.end\u232a\u2329.end\u232a\n+\t\u2329# Blocking or non-blocking again, after the receive.\u232a\n+\t\u2329.section MaybeDefault\u232a\n+\tdefault:\n+\t\tpanic(\"nonblock\")\n+\t\u2329.end\u232a\n+\t\u2329# Dummy send, receive to keep compiler from optimizing select.\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase dummy <- 1:\n+\t\tpanic(\"dummy send\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase <-dummy:\n+\t\tpanic(\"dummy receive\")\n+\t\u2329.end\u232a\n+\t\u2329# Nil channel send, receive to keep compiler from optimizing select.\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase nilch <- 1:\n+\t\tpanic(\"nilch send\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase <-nilch:\n+\t\tpanic(\"nilch recv\")\n+\t\u2329.end\u232a\n+\t}\n+\t\u2329.end\u232a\n+\tif x != n {\n+\t\tdie(x)\n+\t}\n+\tn++\n+`)\n+\n+var recvOrder = parse(`\n+\t\u2329# Send n, receive it one way or another into x, check that they match.\u232a\n+\t\u2329# Check order of operations along the way by calling functions that check\u232a\n+\t\u2329# that the argument sequence is strictly increasing.\u232a\n+\torder = 0\n+\tc <- n\n+\t\u2329.section Maybe\u232a\n+\t\u2329# Outside of select, left-to-right rule applies.\u232a\n+\t\u2329# (Inside select, assignment waits until case is chosen,\u232a\n+\t\u2329# so right hand side happens before anything on left hand side.\u232a\n+\t*fp(&x, 1) = <-fc(c, 2)\n+\t\u2329.or\u232a\u2329.section Maybe\u232a\n+\tm[fn(13, 1)] = <-fc(c, 2)\n+\tx = m[13]\n+\t\u2329.or\u232a\n+\tselect {\n+\t\u2329# Blocking or non-blocking, before the receive.\u232a\n+\t\u2329# The compiler implements two-case select where one is default with custom code,\u232a\n+\t\u2329# so test the default branch both before and after the send.\u232a\n+\t\u2329.section MaybeDefault\u232a\n+\tdefault:\n+\t\tpanic(\"nonblock\")\n+\t\u2329.end\u232a\n+\t\u2329# Receive from c.  Different cases are direct, indirect, :=, interface, and map assignment.\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase *fp(&x, 100) = <-fc(c, 1):\n+\t\u2329.or\u232a\u2329.section Maybe\u232a\n+\tcase y := <-fc(c, 1):\n+\t\tx = y\n+\t\u2329.or\u232a\u2329.section Maybe\u232a\n+\tcase i = <-fc(c, 1):\n+\t\tx = i.(int)\n+\t\u2329.or\u232a\n+\tcase m[fn(13, 100)] = <-fc(c, 1):\n+\t\tx = m[13]\n+\t\u2329.end\u232a\u2329.end\u232a\u2329.end\u232a\n+\t\u2329# Blocking or non-blocking again, after the receive.\u232a\n+\t\u2329.section MaybeDefault\u232a\n+\tdefault:\n+\t\tpanic(\"nonblock\")\n+\t\u2329.end\u232a\n+\t\u2329# Dummy send, receive to keep compiler from optimizing select.\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase fc(dummy, 2) <- fn(1, 3):\n+\t\tpanic(\"dummy send\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase <-fc(dummy, 4):\n+\t\tpanic(\"dummy receive\")\n+\t\u2329.end\u232a\n+\t\u2329# Nil channel send, receive to keep compiler from optimizing select.\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase fc(nilch, 5) <- fn(1, 6):\n+\t\tpanic(\"nilch send\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase <-fc(nilch, 7):\n+\t\tpanic(\"nilch recv\")\n+\t\u2329.end\u232a\n+\t}\n+\t\u2329.end\u232a\u2329.end\u232a\n+\tif x != n {\n+\t\tdie(x)\n+\t}\n+\tn++\n+`)\n+\n+var send = parse(`\n+\t\u2329# Send n one way or another, receive it into x, check that they match.\u232a\n+\t\u2329.section Maybe\u232a\n+\tc <- n\n+\t\u2329.or\u232a\n+\tselect {\n+\t\u2329# Blocking or non-blocking, before the receive (same reason as in recv).\u232a\n+\t\u2329.section MaybeDefault\u232a\n+\tdefault:\n+\t\tpanic(\"nonblock\")\n+\t\u2329.end\u232a\n+\t\u2329# Send c <- n.  No real special cases here, because no values come back\u232a\n+\t\u2329# from the send operation.\u232a\n+\tcase c <- n:\n+\t\u2329# Blocking or non-blocking.\u232a\n+\t\u2329.section MaybeDefault\u232a\n+\tdefault:\n+\t\tpanic(\"nonblock\")\n+\t\u2329.end\u232a\n+\t\u2329# Dummy send, receive to keep compiler from optimizing select.\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase dummy <- 1:\n+\t\tpanic(\"dummy send\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase <-dummy:\n+\t\tpanic(\"dummy receive\")\n+\t\u2329.end\u232a\n+\t\u2329# Nil channel send, receive to keep compiler from optimizing select.\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase nilch <- 1:\n+\t\tpanic(\"nilch send\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase <-nilch:\n+\t\tpanic(\"nilch recv\")\n+\t\u2329.end\u232a\n+\t}\n+\t\u2329.end\u232a\n+\tx = <-c\n+\tif x != n {\n+\t\tdie(x)\n+\t}\n+\tn++\n+`)\n+\n+var sendOrder = parse(`\n+\t\u2329# Send n one way or another, receive it into x, check that they match.\u232a\n+\t\u2329# Check order of operations along the way by calling functions that check\u232a\n+\t\u2329# that the argument sequence is strictly increasing.\u232a\n+\torder = 0\n+\t\u2329.section Maybe\u232a\n+\tfc(c, 1) <- fn(n, 2)\n+\t\u2329.or\u232a\n+\tselect {\n+\t\u2329# Blocking or non-blocking, before the receive (same reason as in recv).\u232a\n+\t\u2329.section MaybeDefault\u232a\n+\tdefault:\n+\t\tpanic(\"nonblock\")\n+\t\u2329.end\u232a\n+\t\u2329# Send c <- n.  No real special cases here, because no values come back\u232a\n+\t\u2329# from the send operation.\u232a\n+\tcase fc(c, 1) <- fn(n, 2):\n+\t\u2329# Blocking or non-blocking.\u232a\n+\t\u2329.section MaybeDefault\u232a\n+\tdefault:\n+\t\tpanic(\"nonblock\")\n+\t\u2329.end\u232a\n+\t\u2329# Dummy send, receive to keep compiler from optimizing select.\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase fc(dummy, 3) <- fn(1, 4):\n+\t\tpanic(\"dummy send\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase <-fc(dummy, 5):\n+\t\tpanic(\"dummy receive\")\n+\t\u2329.end\u232a\n+\t\u2329# Nil channel send, receive to keep compiler from optimizing select.\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase fc(nilch, 6) <- fn(1, 7):\n+\t\tpanic(\"nilch send\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase <-fc(nilch, 8):\n+\t\tpanic(\"nilch recv\")\n+\t\u2329.end\u232a\n+\t}\n+\t\u2329.end\u232a\n+\tx = <-c\n+\tif x != n {\n+\t\tdie(x)\n+\t}\n+\tn++\n+`)\n+\n+var nonblock = parse(`\n+\tx = n\n+\t\u2329# Test various combinations of non-blocking operations.\u232a\n+\t\u2329# Receive assignments must not edit or even attempt to compute the address of the lhs.\u232a\n+\tselect {\n+\t\u2329.section MaybeDefault\u232a\n+\tdefault:\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase dummy <- 1:\n+\t\tpanic(\"dummy <- 1\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase nilch <- 1:\n+\t\tpanic(\"nilch <- 1\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase <-dummy:\n+\t\tpanic(\"<-dummy\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase x = <-dummy:\n+\t\tpanic(\"<-dummy x\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase **(**int)(nil) = <-dummy:\n+\t\tpanic(\"<-dummy (and didn't crash saving result!)\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase <-nilch:\n+\t\tpanic(\"<-nilch\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase x = <-nilch:\n+\t\tpanic(\"<-nilch x\")\n+\t\u2329.end\u232a\n+\t\u2329.section Maybe\u232a\n+\tcase **(**int)(nil) = <-nilch:\n+\t\tpanic(\"<-nilch (and didn't crash saving result!)\")\n+\t\u2329.end\u232a\n+\t\u2329.section MustDefault\u232a\n+\tdefault:\n+\t\u2329.end\u232a\n+\t}\n+\tif x != n {\n+\t\tdie(x)\n+\t}\n+\tn++\n+`)\n+\n+// Code for enumerating all possible paths through\n+// some logic.  The logic should call choose(n) when\n+// it wants to choose between n possibilities.\n+// On successive runs through the logic, choose(n)\n+// will return 0, 1, ..., n-1.  The helper maybe() is\n+// similar but returns true and then false.\n+//\n+// Given a function gen that generates an output\n+// using choose and maybe, code can generate all\n+// possible outputs using\n+//\n+//\tfor next() {\n+//\t\tgen()\n+//\t}\n+\n+type choice struct {\n+\ti, n int\n+}\n+\n+var choices []choice\n+var cp int = -1\n+\n+func maybe() bool {\n+\treturn choose(2) == 0\n+}\n+\n+func choose(n int) int {\n+\tif cp >= len(choices) {\n+\t\t// never asked this before: start with 0.\n+\t\tchoices = append(choices, choice{0, n})\n+\t\tcp = len(choices)\n+\t\treturn 0\n+\t}\n+\t// otherwise give recorded answer\n+\tif n != choices[cp].n {\n+\t\tpanic(\"inconsistent choices\")\n+\t}\n+\ti := choices[cp].i\n+\tcp++\n+\treturn i\n+}\n+\n+func next() bool {\n+\tif cp < 0 {\n+\t\t// start a new round\n+\t\tcp = 0\n+\t\treturn true\n+\t}\n+\n+\t// increment last choice sequence\n+\tcp = len(choices)-1\n+\tfor cp >= 0 && choices[cp].i == choices[cp].n-1 {\n+\t\tcp--\n+\t}\n+\tif cp < 0 {\n+\t\tchoices = choices[:0]\n+\t\treturn false\n+\t}\n+\tchoices[cp].i++\n+\tchoices = choices[:cp+1]\n+\tcp = 0\n+\treturn true\n+}\n+"}, {"sha": "ee6f765cf88324152ea7a3c50618bf460afaf40b", "filename": "gcc/testsuite/go.test/test/chan/sendstmt.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fsendstmt.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fsendstmt.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fsendstmt.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,37 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test various parsing cases that are a little\n+// different now that send is a statement, not a expression.\n+\n+package main\n+\n+func main() {\n+\tchanchan()\n+\tsendprec()\n+}\n+\n+func chanchan() {\n+\tcc := make(chan chan int, 1)\n+\tc := make(chan int, 1)\n+\tcc <- c\n+\tselect {\n+\tcase <-cc <- 2:\n+\tdefault:\n+\t\tpanic(\"nonblock\")\n+\t}\n+\tif <-c != 2 {\n+\t\tpanic(\"bad receive\")\n+\t}\n+}\n+\n+func sendprec() {\n+\tc := make(chan bool, 1)\n+\tc <- false || true\t// not a syntax error: same as c <- (false || true)\n+\tif !<-c {\n+\t\tpanic(\"sent false\")\n+\t}\n+}"}, {"sha": "3033c02ed8161c0f1e4a8cd6f010fba8fbc82ff9", "filename": "gcc/testsuite/go.test/test/closure.go", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosure.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosure.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosure.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -98,4 +98,15 @@ func main() {\n \t\tprintln(\"newfunc returned broken funcs\")\n \t\tpanic(\"fail\")\n \t}\n+\n+\tff(1)\n+}\n+\n+func ff(x int) {\n+\tcall(func() {\n+\t\t_ = x\n+\t})\n+}\n+\n+func call(func()) {\n }"}, {"sha": "698544c58219413651c0533fc7a36e457b45c1a3", "filename": "gcc/testsuite/go.test/test/cmp1.go", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -26,6 +26,8 @@ func istrue(b bool) {\n \t}\n }\n \n+type T *int\n+\n func main() {\n \tvar a []int\n \tvar b map[string]int\n@@ -55,6 +57,24 @@ func main() {\n \tisfalse(ib == id)\n \tistrue(ic == id)\n \tistrue(ie == ie)\n+\t\n+\t// these are okay because one side of the\n+\t// comparison need only be assignable to the other.\n+\tisfalse(a == ib)\n+\tisfalse(a == ic)\n+\tisfalse(a == id)\n+\tisfalse(b == ic)\n+\tisfalse(b == id)\n+\tistrue(c == id)\n+\tistrue(e == ie)\n+\n+\tisfalse(ia == b)\n+\tisfalse(ia == c)\n+\tisfalse(ia == d)\n+\tisfalse(ib == c)\n+\tisfalse(ib == d)\n+\tistrue(ic == d)\n+\tistrue(ie == e)\n \n \t// 6g used to let this go through as true.\n \tvar g uint64 = 123\n@@ -73,4 +93,38 @@ func main() {\n \t\tprintln(\"m[ic] = \", m[ic])\n \t\tpanic(\"bad m[ic]\")\n \t}\n+\t\n+\t// non-interface comparisons\n+\t{\n+\t\tc := make(chan int)\n+\t\tc1 := (<-chan int)(c)\n+\t\tc2 := (chan<- int)(c)\n+\t\tistrue(c == c1)\n+\t\tistrue(c == c2)\n+\t\tistrue(c1 == c)\n+\t\tistrue(c2 == c)\n+\t\t\n+\t\td := make(chan int)\n+\t\tisfalse(c == d)\n+\t\tisfalse(d == c)\n+\t\tisfalse(d == c1)\n+\t\tisfalse(d == c2)\n+\t\tisfalse(c1 == d)\n+\t\tisfalse(c2 == d)\n+\t}\n+\n+\t// named types vs not\n+\t{\n+\t\tvar x = new(int)\n+\t\tvar y T\n+\t\tvar z T = x\n+\t\t\n+\t\tisfalse(x == y)\n+\t\tistrue(x == z)\n+\t\tisfalse(y == z)\n+\n+\t\tisfalse(y == x)\n+\t\tistrue(z == x)\n+\t\tisfalse(z == y)\n+\t}\n }"}, {"sha": "b3ea8ffebfd502d60e89197dcf60d7fa834a9a77", "filename": "gcc/testsuite/go.test/test/cmp6.go", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp6.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp6.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp6.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,49 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func use(bool) {}\n+\n+type T1 *int\n+type T2 *int\n+\n+type T3 struct {}\n+\n+var t3 T3\n+\n+func main() {\n+\t// Arguments to comparison must be\n+\t// assignable one to the other (or vice versa)\n+\t// so chan int can be compared against\n+\t// directional channels but channel of different\n+\t// direction cannot be compared against each other.\n+\tvar c1 chan <-int\n+\tvar c2 <-chan int\n+\tvar c3 chan int\n+\t\n+\tuse(c1 == c2)\t// ERROR \"invalid operation|incompatible\"\n+\tuse(c2 == c1)\t// ERROR \"invalid operation|incompatible\"\n+\tuse(c1 == c3)\n+\tuse(c2 == c2)\n+\tuse(c3 == c1)\n+\tuse(c3 == c2)\n+\n+\t// Same applies to named types.\n+\tvar p1 T1\n+\tvar p2 T2\n+\tvar p3 *int\n+\t\n+\tuse(p1 == p2)\t// ERROR \"invalid operation|incompatible\"\n+\tuse(p2 == p1)\t// ERROR \"invalid operation|incompatible\"\n+\tuse(p1 == p3)\n+\tuse(p2 == p2)\n+\tuse(p3 == p1)\n+\tuse(p3 == p2)\n+\t\n+\t// Comparison of structs should have a good message\n+\tuse(t3 == t3)\t// ERROR \"struct|expected\"\n+}"}, {"sha": "b340f04d8873c5082711a811975cd155b73e1d26", "filename": "gcc/testsuite/go.test/test/cmplxdivide.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplxdivide.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplxdivide.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplxdivide.c?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -72,7 +72,7 @@ main(void)\n \t\tif(iscnan(n) && d == 0)\n \t\t\tq = (NAN+NAN*I) / zero;\n \n-\t\tprintf(\"\\tTest{cmplx(%s, %s), cmplx(%s, %s), cmplx(%s, %s)},\\n\",\n+\t\tprintf(\"\\tTest{complex(%s, %s), complex(%s, %s), complex(%s, %s)},\\n\",\n \t\t\tfmt(creal(n)), fmt(cimag(n)),\n \t\t\tfmt(creal(d)), fmt(cimag(d)),\n \t\t\tfmt(creal(q)), fmt(cimag(q)));"}, {"sha": "67f36e4fdc94816f61947e8e0d2959546a778501", "filename": "gcc/testsuite/go.test/test/const1.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -78,3 +78,5 @@ func main() {\n \tf(String)           // ERROR \"convert|wrong type|cannot|incompatible\"\n \tf(Bool)             // ERROR \"convert|wrong type|cannot|incompatible\"\n }\n+\n+const ptr = nil // ERROR \"const.*nil\""}, {"sha": "9bba6ced0b8bd109d02cfba5035302cc10475d3c", "filename": "gcc/testsuite/go.test/test/const3.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst3.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -26,4 +26,10 @@ func main() {\n \t\tprintln(\"type info didn't propagate in const: got\", s)\n \t\tpanic(\"fail\")\n \t}\n+\tx := uint(5)\n+\ty := float64(uint64(1)<<x)\t// used to fail to compile\n+\tif y != 32 {\n+\t\tprintln(\"wrong y\", y)\n+\t\tpanic(\"fail\")\n+\t}\n }"}, {"sha": "0b5bddbed5c44a66fd6d06c73abc09adf44ea26b", "filename": "gcc/testsuite/go.test/test/copy.go", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcopy.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcopy.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcopy.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -23,6 +23,15 @@ var input32 = make([]uint32, N)\n var output32 = make([]uint32, N)\n var input64 = make([]uint64, N)\n var output64 = make([]uint64, N)\n+var inputS string\n+var outputS = make([]uint8, N)\n+\n+type my8 []uint8\n+type my16 []uint16\n+type my32 []uint32\n+type my32b []uint32\n+type my64 []uint64\n+type myS string\n \n func u8(i int) uint8 {\n \ti = 'a' + i%26\n@@ -64,6 +73,7 @@ func reset() {\n \tfor i := range input8 {\n \t\tinput8[i] = u8(in)\n \t\toutput8[i] = u8(out)\n+\t\toutputS[i] = u8(out)\n \t\tinput16[i] = u16(in)\n \t\toutput16[i] = u16(out)\n \t\tinput32[i] = u32(in)\n@@ -73,6 +83,7 @@ func reset() {\n \t\tin++\n \t\tout++\n \t}\n+\tinputS = string(input8)\n }\n \n func clamp(n int) int {\n@@ -95,13 +106,15 @@ func ncopied(length, in, out int) int {\n \n func doAllSlices(length, in, out int) {\n \treset()\n-\tn := copy(output8[out:clamp(out+length)], input8[in:clamp(in+length)])\n+\tn := copy(my8(output8[out:clamp(out+length)]), input8[in:clamp(in+length)])\n \tverify8(length, in, out, n)\n-\tn = copy(output16[out:clamp(out+length)], input16[in:clamp(in+length)])\n+\tn = copy(my8(outputS[out:clamp(out+length)]), myS(inputS[in:clamp(in+length)]))\n+\tverifyS(length, in, out, n)\n+\tn = copy(my16(output16[out:clamp(out+length)]), input16[in:clamp(in+length)])\n \tverify16(length, in, out, n)\n-\tn = copy(output32[out:clamp(out+length)], input32[in:clamp(in+length)])\n+\tn = copy(my32(output32[out:clamp(out+length)]), my32b(input32[in:clamp(in+length)]))\n \tverify32(length, in, out, n)\n-\tn = copy(output64[out:clamp(out+length)], input64[in:clamp(in+length)])\n+\tn = copy(my64(output64[out:clamp(out+length)]), input64[in:clamp(in+length)])\n \tverify64(length, in, out, n)\n }\n \n@@ -145,6 +158,46 @@ func verify8(length, in, out, m int) {\n \t}\n }\n \n+func badS(state string, i, length, in, out int) {\n+\tfmt.Printf(\"%s bad(%d %d %d): %c not %c:\\n\\t%s\\n\\t%s\\n\",\n+\t\tstate,\n+\t\tlength, in, out,\n+\t\toutputS[i],\n+\t\tuint8(i+13),\n+\t\tinputS, outputS)\n+\tos.Exit(1)\n+}\n+\n+func verifyS(length, in, out, m int) {\n+\tn := ncopied(length, in, out)\n+\tif m != n {\n+\t\tfmt.Printf(\"count bad(%d %d %d): %d not %d\\n\", length, in, out, m, n)\n+\t\treturn\n+\t}\n+\t// before\n+\tvar i int\n+\tfor i = 0; i < out; i++ {\n+\t\tif outputS[i] != u8(i+13) {\n+\t\t\tbadS(\"beforeS\", i, length, in, out)\n+\t\t\treturn\n+\t\t}\n+\t}\n+\t// copied part\n+\tfor ; i < out+n; i++ {\n+\t\tif outputS[i] != u8(i+in-out) {\n+\t\t\tbadS(\"copiedS\", i, length, in, out)\n+\t\t\treturn\n+\t\t}\n+\t}\n+\t// after\n+\tfor ; i < len(outputS); i++ {\n+\t\tif outputS[i] != u8(i+13) {\n+\t\t\tbadS(\"afterS\", i, length, in, out)\n+\t\t\treturn\n+\t\t}\n+\t}\n+}\n+\n func bad16(state string, i, length, in, out int) {\n \tfmt.Printf(\"%s bad(%d %d %d): %x not %x:\\n\\t%v\\n\\t%v\\n\",\n \t\tstate,"}, {"sha": "ff6342843a96ce785bb11f89b53452e4a5d3ea12", "filename": "gcc/testsuite/go.test/test/ddd1.go", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -6,6 +6,8 @@\n \n package main\n \n+import \"unsafe\"\n+\n func sum(args ...int) int { return 0 }\n \n var (\n@@ -26,3 +28,19 @@ var (\n \t_ = funny(nil, nil)\n \t_ = funny([]T{}) // ok because []T{} is a T; passes []T{[]T{}}\n )\n+\n+func bad(args ...int) {\n+\tprint(1, 2, args...)\t// ERROR \"[.][.][.]\"\n+\tprintln(args...)\t// ERROR \"[.][.][.]\"\n+\tch := make(chan int)\n+\tclose(ch...)\t// ERROR \"[.][.][.]\"\n+\t_ = len(args...)\t// ERROR \"[.][.][.]\"\n+\t_ = new(int...)\t// ERROR \"[.][.][.]\"\n+\tn := 10\n+\t_ = make([]byte, n...)\t// ERROR \"[.][.][.]\"\n+\t// TODO(rsc): enable after gofmt bug is fixed\n+\t//\t_ = make([]byte, 10 ...)\t// error \"[.][.][.]\"\n+\tvar x int\n+\t_ = unsafe.Pointer(&x...)\t// ERROR \"[.][.][.]\"\n+\t_ = unsafe.Sizeof(x...)\t// ERROR \"[.][.][.]\"\n+}"}, {"sha": "bef8fbe26a6cd7a187269933acdfd84050296a28", "filename": "gcc/testsuite/go.test/test/defer.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdefer.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdefer.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdefer.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -26,7 +26,7 @@ func test1() {\n \t}\n }\n \n-func addDotDotDot(v ...interface{}) { result += fmt.Sprint(v) }\n+func addDotDotDot(v ...interface{}) { result += fmt.Sprint(v...) }\n \n func test2helper() {\n \tfor i := 0; i < 10; i++ {"}, {"sha": "16b2076447f4e0f6c89549166a10baf63385ff2e", "filename": "gcc/testsuite/go.test/test/env.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fenv.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fenv.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fenv.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # NaCl runner does not expose environment\n // $G $F.go && $L $F.$A && ./$A.out\n \n // Copyright 2009 The Go Authors. All rights reserved."}, {"sha": "81f9fd028ff73c3cd32d42be2186367f64b08ce8", "filename": "gcc/testsuite/go.test/test/eof.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Feof.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Feof.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Feof.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,9 @@\n+// $G $D/$F.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// No newline at the end of this file.\n+\n+package main\n\\ No newline at end of file"}, {"sha": "c39a3cfdb15987a11707c7fa912e896f9b6ca7f9", "filename": "gcc/testsuite/go.test/test/eof1.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Feof1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Feof1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Feof1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,9 @@\n+// $G $D/$F.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// No newline at the end of this comment.\n\\ No newline at end of file"}, {"sha": "fbb021ce41768cb6e1a49c954da39bb923e70724", "filename": "gcc/testsuite/go.test/test/errchk", "status": "modified", "additions": 60, "deletions": 41, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ferrchk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ferrchk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ferrchk?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -3,30 +3,38 @@\n # Use of this source code is governed by a BSD-style\n # license that can be found in the LICENSE file.\n \n-# This script checks that the compilers emits the errors which we\n-# expect.  Usage: errchk COMPILER [OPTS] SOURCEFILE.  This will run\n-# the command COMPILER [OPTS] SOURCEFILE.  The compilation is expected\n-# to fail; if it succeeds, this script will report an error.  The\n-# stderr output of the compiler will be matched against comments in\n-# SOURCEFILE.  For each line of the source file which should generate\n-# an error, there should be a comment of the form // ERROR \"regexp\".\n-# If the compiler generates an error for a line which has no such\n-# commnt, this script will report an error.  Likewise if the compiler\n-# does not generate an error for a line which has a comment, or if the\n-# error message does not match the <regexp>.  The <regexp> syntax\n-# is Perl but its best to stick to egrep.\n+# This script checks that the compilers emit the errors which we expect.\n+# Usage: errchk COMPILER [OPTS] SOURCEFILES.  This will run the command\n+# COMPILER [OPTS] SOURCEFILES.  The compilation is expected to fail; if\n+# it succeeds, this script will report an error.  The stderr output of\n+# the compiler will be matched against comments in SOURCEFILES.  For each\n+# line of the source files which should generate an error, there should\n+# be a comment of the form // ERROR \"regexp\".  If the compiler generates\n+# an error for a line which has no such comment, this script will report\n+# an error.  Likewise if the compiler does not generate an error for a\n+# line which has a comment, or if the error message does not match the\n+# <regexp>.  The <regexp> syntax is Perl but its best to stick to egrep.\n \n use POSIX;\n \n if(@ARGV < 1) {\n-\tprint STDERR \"Usage: errchk COMPILER [OPTS] SOURCEFILE\\n\";\n+\tprint STDERR \"Usage: errchk COMPILER [OPTS] SOURCEFILES\\n\";\n \texit 1;\n }\n \n-$file = $ARGV[@ARGV-1];\n-open(SRC, $file) || die \"BUG: errchk: open $file: $!\";\n-@src = <SRC>;\n-close(SRC);\n+# Grab SOURCEFILES\n+foreach(reverse 0 .. @ARGV-1) {\n+\tunless($ARGV[$_] =~ /\\.go$/) {\n+\t\t@file = @ARGV[$_+1 .. @ARGV-1];\n+\t\tlast;\n+\t}\n+}\n+\n+foreach $file (@file) {\n+\topen(SRC, $file) || die \"BUG: errchk: open $file: $!\";\n+\t$src{$file} = [<SRC>];\n+\tclose(SRC);\n+}\n \n # Run command\n $cmd = join(' ', @ARGV);\n@@ -57,35 +65,46 @@ sub bug() {\n \t}\n }\n \n-$line = 0;\n-foreach $src (@src) {\n-\t$line++;\n-\tnext unless $src =~ m|// (GC_)?ERROR (.*)|;\n-\t$regexp = $2;\n-\tif($regexp !~ /^\"([^\"]*)\"/) {\n-\t\tprint STDERR \"$file:$line: malformed regexp\\n\";\n-\t\tnext;\n-\t}\n-\t$regexp = $1;\n-\n-\t@errmsg = grep { /$file:$line:/ } @out;\n-\t@out = grep { !/$file:$line:/ } @out;\n-\tif(@errmsg == 0) {\n-\t\tbug();\n-\t\tprint STDERR \"errchk: $file:$line: missing expected error: '$regexp'\\n\";\n-\t\tnext;\n-\t}\n-\t@match = grep { /$regexp/ } @errmsg;\n-\tif(@match == 0) {\n-\t\tbug();\n-\t\tprint STDERR \"errchk: $file:$line: error message does not match '$regexp'\\n\";\n-\t\tnext;\n+sub chk {\n+\tmy $file = shift;\n+\tmy $line = 0;\n+\tmy $regexp;\n+\tmy @errmsg;\n+\tmy @match;\n+\tforeach my $src (@{$src{$file}}) {\n+\t\t$line++;\n+\t\tnext if $src =~ m|////|;  # double comment disables ERROR\n+\t\tnext unless $src =~ m|// (GC_)?ERROR (.*)|;\n+\t\t$regexp = $2;\n+\t\tif($regexp !~ /^\"([^\"]*)\"/) {\n+\t\t\tprint STDERR \"$file:$line: malformed regexp\\n\";\n+\t\t\tnext;\n+\t\t}\n+\t\t$regexp = $1;\n+\n+\t\t@errmsg = grep { /$file:$line[:[]/ } @out;\n+\t\t@out = grep { !/$file:$line[:[]/ } @out;\n+\t\tif(@errmsg == 0) {\n+\t\t\tbug();\n+\t\t\tprint STDERR \"errchk: $file:$line: missing expected error: '$regexp'\\n\";\n+\t\t\tnext;\n+\t\t}\n+\t\t@match = grep { /$regexp/ } @errmsg;\n+\t\tif(@match == 0) {\n+\t\t\tbug();\n+\t\t\tprint STDERR \"errchk: $file:$line: error message does not match '$regexp'\\n\";\n+\t\t\tnext;\n+\t\t}\n \t}\n }\n \n+foreach $file (@file) {\n+\tchk($file)\n+}\n+\n if(@out != 0) {\n \tbug();\n-\tprint STDERR \"errchk: $file: unmatched error messages:\\n\";\n+\tprint STDERR \"errchk: unmatched error messages:\\n\";\n \tprint STDERR \"==================================================\\n\";\n \tprint STDERR @out;\n \tprint STDERR \"==================================================\\n\";"}, {"sha": "4fbfd48fd97ef1e20224b22c59ab14ee28c475e9", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug016.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug016.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug016.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug016.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,4 @@\n-// ! $G $D/$F.go\n+// errchk $G -e $D/$F.go\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -7,8 +7,8 @@\n package main\n \n func main() {\n-\tvar i int = 100;\n-\ti = i << -3;  // BUG: should not compile (negative shift)\n+\tvar i int = 100\n+\ti = i << -3 // ERROR \"overflows|negative\"\n }\n \n /*"}, {"sha": "9038387ac8624de353e00e0cbf59cce144b10c9c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug069.go", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug069.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug069.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug069.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -7,15 +7,14 @@\n package main\n \n func main() {\n-\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n-\t//\tc := make(chan int);\n-\t//\tok := false;\n-\t//\tvar i int;\n-\t//\n-\t//\ti, ok = <-c;  // works\n-\t//\t_, _ = i, ok;\n-\t//\n-\t//\tca := new([2]chan int);\n-\t//\ti, ok = <-(ca[0]);  // fails: c.go:11: bad shape across assignment - cr=1 cl=2\n-\t//\t_, _ = i, ok;\n+\tc := make(chan int);\n+\tok := false;\n+\tvar i int;\n+\t\n+\ti, ok = <-c;  // works\n+\t_, _ = i, ok;\n+\t\n+\tca := new([2]chan int);\n+\ti, ok = <-(ca[0]);  // fails: c.go:11: bad shape across assignment - cr=1 cl=2\n+\t_, _ = i, ok;\n }"}, {"sha": "026ce8002f2f5669f3088f10bed268b8ede82244", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug081.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug081.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug081.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug081.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,12 +1,12 @@\n-// ! $G $D/$F.go\n+// errchk $G $D/$F.go\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package main\t\n- \t\n-const x x = 2;\n+package main\n+\n+const x x = 2 // ERROR \"loop|type\"\n \n /*\n bug081.go:3: first constant must evaluate an expression"}, {"sha": "7402525164fe74dc5c723c14e39e3f0e73c72fc7", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug1515.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug1515.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug1515.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug1515.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,20 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+const (\n+\tjoao = \"Jo\u00e3o\"\n+\tjose = \"Jos\u00e9\"\n+)\n+\n+func main() {\n+\ts1 := joao\n+\ts2 := jose\n+\tif (s1 < s2) != (joao < jose) {\n+\t\tpanic(\"unequal\")\n+\t}\n+}"}, {"sha": "ea8ab0dc193c71e82686a814d0c8fbd11e36b2bb", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug196.go", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug196.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug196.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug196.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -13,12 +13,11 @@ var i int\n func multi() (int, int) { return 1, 2 }\n \n func xxx() {\n-\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n-\t//\tvar c chan int\n-\t//\tx, ok := <-c\n+\tvar c chan int\n+\tx, ok := <-c\n \n \tvar m map[int]int\n-\tx, ok := m[1]\n+\tx, ok = m[1]\n \n \tvar i interface{}\n \tvar xx int"}, {"sha": "562109a058bbac650d95bda18fdf249c613eb33e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug234.go", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug234.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug234.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug234.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -7,17 +7,17 @@\n package main\n \n func main() {\n-\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n-\t//\tc := make(chan int, 1)\n-\t//\tc <- 100\n-\t//\tx, ok := <-c\n-\t//\tif x != 100 || !ok {\n-\t//\t\tprintln(\"x=\", x, \" ok=\", ok, \" want 100, true\")\n-\t//\t\tpanic(\"fail\")\n-\t//\t}\n-\t//\tx, ok = <-c\n-\t//\tif x != 0 || ok {\n-\t//\t\tprintln(\"x=\", x, \" ok=\", ok, \" want 0, false\")\n-\t//\t\tpanic(\"fail\")\n-\t//\t}\n+\tc := make(chan int, 1)\n+\tc <- 100\n+\tx, ok := <-c\n+\tif x != 100 || !ok {\n+\t\tprintln(\"x=\", x, \" ok=\", ok, \" want 100, true\")\n+\t\tpanic(\"fail\")\n+\t}\n+\tclose(c)\n+\tx, ok = <-c\n+\tif x != 0 || ok {\n+\t\tprintln(\"x=\", x, \" ok=\", ok, \" want 0, false\")\n+\t\tpanic(\"fail\")\n+\t}\n }"}, {"sha": "839dccd37410360c0c831afd77c46f48ce8effed", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug242.go", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug242.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug242.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug242.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -101,13 +101,11 @@ func main() {\n \n \tc := make(chan byte, 1)\n \tc <- 'C'\n-\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n \t// 15          16\n-\t//\t*f(), p1 = <-e1(c, 16)\n-\t*f(), p1 = <-e1(c, 16), true // delete uncommenting above\n+\t*f(), p1 = <-e1(c, 16)\n+\tclose(c)\n \t// 17          18\n-\t//\t*f(), p2 = <-e1(c, 18)\n-\t*f(), p2, _ = 0, false, e1(c, 18) // delete when uncommenting above\n+\t*f(), p2 = <-e1(c, 18)\n \ta[17] += '0'\n \tif !p1 || p2 {\n \t\tprintln(\"bad chan check\", i, p1, p2)"}, {"sha": "236c14402f7c653653c328fabf271e112be9ae14", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug243.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug243.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug243.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug243.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # no network\n // $G $D/$F.go && $L $F.$A && ./$A.out\n \n // Copyright 2010 The Go Authors.  All rights reserved."}, {"sha": "a2c1dab9d39027d3982c2b67cfe59ad51f05e1a3", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug252.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug252.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug252.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug252.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -11,5 +11,5 @@ func f(args ...int) {\n }\n \n func g(args ...interface{}) {\n-\tf(args)\t// ERROR \"[.][.][.]|incompatible\"\n+\tf(args)\t// ERROR \"cannot use|incompatible\"\n }"}, {"sha": "34757c70eefd70e46df756725c62edf4541a33ec", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug260.go", "status": "renamed", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug260.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug260.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug260.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -10,17 +10,23 @@ import (\n \t\"strconv\"\n )\n \n-type T1 struct { x uint8 }\n-type T2 struct { x uint16 }\n-type T4 struct { x uint32 }\n+type T1 struct {\n+\tx uint8\n+}\n+type T2 struct {\n+\tx uint16\n+}\n+type T4 struct {\n+\tx uint32\n+}\n \n func main() {\n \treport := len(os.Args) > 1\n \tstatus := 0\n \tvar b1 [10]T1\n \ta0, _ := strconv.Btoui64(fmt.Sprintf(\"%p\", &b1[0])[2:], 16)\n \ta1, _ := strconv.Btoui64(fmt.Sprintf(\"%p\", &b1[1])[2:], 16)\n-\tif a1 != a0 + 1 {\n+\tif a1 != a0+1 {\n \t\tfmt.Println(\"FAIL\")\n \t\tif report {\n \t\t\tfmt.Println(\"alignment should be 1, is\", a1-a0)\n@@ -30,7 +36,7 @@ func main() {\n \tvar b2 [10]T2\n \ta0, _ = strconv.Btoui64(fmt.Sprintf(\"%p\", &b2[0])[2:], 16)\n \ta1, _ = strconv.Btoui64(fmt.Sprintf(\"%p\", &b2[1])[2:], 16)\n-\tif a1 != a0 + 2 {\n+\tif a1 != a0+2 {\n \t\tif status == 0 {\n \t\t\tfmt.Println(\"FAIL\")\n \t\t\tstatus = 1\n@@ -42,7 +48,7 @@ func main() {\n \tvar b4 [10]T4\n \ta0, _ = strconv.Btoui64(fmt.Sprintf(\"%p\", &b4[0])[2:], 16)\n \ta1, _ = strconv.Btoui64(fmt.Sprintf(\"%p\", &b4[1])[2:], 16)\n-\tif a1 != a0 + 4 {\n+\tif a1 != a0+4 {\n \t\tif status == 0 {\n \t\t\tfmt.Println(\"FAIL\")\n \t\t\tstatus = 1", "previous_filename": "gcc/testsuite/go.test/test/bugs/bug260.go"}, {"sha": "758fee2698acdb8934868f0a0e901775d1c2c60e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug305.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug305.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug305.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug305.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,24 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Use //line to set the line number of the next line to 20.\n+//line fixedbugs/bug305.go:20\n+\n+package p\n+\n+// Introduce an error which should be reported on line 24.\n+var a int = \"bogus\"\n+\n+// Line 15 of file.\n+// 16\n+// 17\n+// 18\n+// 19\n+// 20\n+// 21\n+// 22\n+// 23\n+// ERROR \"cannot|incompatible\""}, {"sha": "bf87ea1491df88a3fdae226ec83700d49cf1a816", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug306.dir/p1.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug306.dir%2Fp1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug306.dir%2Fp1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug306.dir%2Fp1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p1\n+\n+type T <-chan int\n+var x = make(chan T)\n+"}, {"sha": "3f8bd9d49b57466d6a0e9d1ea842bdf7021fba29", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug306.dir/p2.go", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug306.dir%2Fp2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug306.dir%2Fp2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug306.dir%2Fp2.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,8 @@\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p2\n+\n+import _ \"./p1\"\n+"}, {"sha": "a0a43507dcb88552bb4c63cf1bbc1f841b371d19", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug306.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug306.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug306.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug306.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,7 @@\n+// $G $D/$F.dir/p1.go && $G $D/$F.dir/p2.go\n+\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+ignored"}, {"sha": "1b42c09ab1e3bcfcb5fe3874c0d960f966145e2d", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug307.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug307.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug307.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug307.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,15 @@\n+// $G $D/$F.go\n+\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Valid program, gccgo reported an error.\n+// bug307.go:14:6: error: complex arguments must have identical types\n+\n+package main\n+\n+func main() {\n+\tvar f float64\n+\t_ = complex(1/f, 0)\n+}"}, {"sha": "c2845f04213e733da9a628745d73df65b971c766", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug308.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug308.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug308.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug308.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,19 @@\n+// $G $D/$F.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1136\n+\n+package main\n+\n+import \"fmt\"\n+\n+func log1(f string, argv ...interface{}) {\n+\tfmt.Printf(\"log: %s\\n\", fmt.Sprintf(f, argv...))\n+}\n+\n+func main() {\n+\tlog1(\"%d\", 42)\n+}"}, {"sha": "07bebae74c17e8e1144f43e1411576687048a407", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug309.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug309.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug309.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug309.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,19 @@\n+// $G $D/$F.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1016\n+\n+package main\n+\n+func foo(t interface{}, c chan int) {\n+\tswitch v := t.(type) {\n+\tcase int:\n+\t\tselect {\n+\t\tcase <-c:\n+\t\t\t// bug was: internal compiler error: var without type, init: v\n+\t\t}\n+\t}\n+}"}, {"sha": "191f3ed2b4eef6ecf4e8058ec24ab2a903805c42", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug310.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug310.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug310.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug310.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,20 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+)\n+\n+type t int\n+\n+func main() {\n+\t_ = t.bar\t// ERROR \"no method\"\n+\tvar b bytes.Buffer\n+\tfmt.Print(b)\t// ERROR \"implicit assignment\"\n+}"}, {"sha": "ed937a674700d67b2b9494d821e89887bce047d3", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug311.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug311.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug311.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug311.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,20 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tm := make(map[string][1000]byte)\n+\tm[\"hi\"] = [1000]byte{1}\n+\t\n+\tv := m[\"hi\"]\n+\t\n+\tfor k, vv := range m {\n+\t\tif k != \"hi\" || string(v[:]) != string(vv[:]) {\n+\t\t\tpanic(\"bad iter\")\n+\t\t}\n+\t}\n+}"}, {"sha": "70888dd410f7c412e559701ae6d637d0ba03eb15", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug312.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug312.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug312.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug312.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,22 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1172\n+\n+package main\n+\n+func main() {\n+\tvar i interface{}\n+\tc := make(chan int, 1)\n+\tc <- 1\n+\tselect {\n+\tcase i = <-c: // error on this line\n+\t}\n+\tif i != 1 {\n+\t\tprintln(\"bad i\", i)\n+\t\tpanic(\"BUG\")\n+\t}\n+}"}, {"sha": "cb4ca7256b9da14ce35226b26f94abb3e6225423", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug313.dir/a.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.dir%2Fa.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func a() {\n+\tfmt.DoesNotExist() // ERROR \"undefined\"\n+}"}, {"sha": "7eda72b4f8b3c1deff6307f89015afefb70586aa", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug313.dir/b.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.dir%2Fb.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import . \"fmt\"\n+\n+func b() {\n+\tPrintln()\n+}"}, {"sha": "eb2a0223b6caf0e6087f9873c825ca477c841af9", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug313.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,19 @@\n+// errchk $G -e $D/$F.dir/[ab].go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1284\n+\n+package bug313\n+\n+/*\n+6g bug313.dir/[ab].go\n+\n+Before:\n+bug313.dir/b.go:7: internal compiler error: fault\n+\n+Now:\n+bug313.dir/a.go:10: undefined: fmt.DoesNotExist\n+*/"}, {"sha": "95d81d7951e6187cd514ba5d602ff54003c9d9cd", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug314.go", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug314.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug314.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug314.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,31 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug314\n+\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Used to call wrong methods; issue 1290.\n+\n+package main\n+\n+type S struct {\n+}\n+func (S) a() int{\n+\treturn 0\n+}\n+func (S) b() int{\n+\treturn 1\n+}\n+\n+func main() {\n+\tvar i interface {\n+\t\tb() int\n+\t\ta() int\n+\t} = S{}\n+\tif i.a() != 0 {\n+\t\tpanic(\"wrong method called\")\n+\t}\n+\tif i.b() != 1 {\n+\t\tpanic(\"wrong method called\")\n+\t}\n+}"}, {"sha": "c59ef29e6c031356d0ea0af2c356282890adaac6", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug315.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug315.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug315.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug315.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,18 @@\n+// $G $D/$F.go || echo BUG: bug315\n+\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1368.\n+\n+package main\n+\n+func main() {\n+\ta := complex(2, 2)\n+\ta /= 2\n+}\n+\n+/*\n+bug315.go:13: internal compiler error: optoas: no entry DIV-complex\n+*/"}, {"sha": "2146408a1e285804126cb2301df57ee870b5ea80", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug316.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug316.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug316.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug316.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,17 @@\n+// $G $D/$F.go || echo BUG: bug316\n+\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1369.\n+\n+package main\n+\n+const (\n+\tc = complex(1, 2)\n+\tr = real(c) // was: const initializer must be constant\n+\ti = imag(c) // was: const initializer must be constant\n+)\n+\n+func main() {}"}, {"sha": "0cb26c29ba1154a67850b4c88283759183171783", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug317.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug317.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug317.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug317.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,16 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug317\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tx := []uint{0}\n+\tx[0] &^= f()\n+}\n+\n+func f() uint {\n+\treturn 1<<31 // doesn't panic with 1<<31 - 1\n+}"}, {"sha": "9c46a04269cffee784f7d741c7a7083c455a6688", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug318.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug318.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug318.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug318.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,12 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1411.\n+\n+package main\n+\n+const ui uint = 0\n+const i int = ui // ERROR \"type\""}, {"sha": "f60eee4fb2313256e1c29821480283748cdf394f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug319.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug319.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug319.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug319.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,22 @@\n+// $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+func main() {\n+\tvar x int\n+\t\n+\ta := uint64(uintptr(unsafe.Pointer(&x)))\n+\tb := uint32(uintptr(unsafe.Pointer(&x)))\n+\tc := uint16(uintptr(unsafe.Pointer(&x)))\n+\td := int64(uintptr(unsafe.Pointer(&x)))\n+\te := int32(uintptr(unsafe.Pointer(&x)))\n+\tf := int16(uintptr(unsafe.Pointer(&x)))\n+\n+\t_, _, _, _, _, _ = a, b, c, d, e, f\n+}"}, {"sha": "06d41f2ed87ee06e79eec86757fc30581ed0eec1", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug320.go", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug320.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug320.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug320.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,45 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tc := make(chan int, 1)\n+\tdummy := make(chan int)\n+\tv := 0x12345678\n+\tfor i := 0; i < 10; i++ {\n+\t\t// 6g had a bug that caused select to pass &t to\n+\t\t// selectrecv before allocating the memory for t,\n+\t\t// which caused non-deterministic crashes.\n+\t\t// This test looks for the bug by checking that the\n+\t\t// value received actually ends up in t.\n+\t\t// If the allocation happens after storing through\n+\t\t// whatever garbage &t holds, the later reference\n+\t\t// to t in the case body will use the new pointer and\n+\t\t// not see the received value.\n+\t\tv += 0x1020304\n+\t\tc <- v\n+\t\tselect {\n+\t\tcase t := <-c:\n+\t\t\tgo func() {\n+\t\t\t\tf(t)\n+\t\t\t}()\n+\t\t\tescape(&t)\n+\t\t\tif t != v {\n+\t\t\t\tprintln(i, v, t)\n+\t\t\t\tpanic(\"wrong values\")\n+\t\t\t}\n+\t\tcase dummy <- 1:\n+\t\t}\n+\t}\n+}\n+\n+func escape(*int) {\n+}\n+\n+func f(int) {\n+}\n+"}, {"sha": "d0595ff59b60b26e66e78fd6dd50da6641a2fe35", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug321.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug321.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug321.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug321.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,30 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug321\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Troublesome floating point constants. Issue 1463.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func check(test string, got, want float64) bool {\n+\tif got != want {\n+\t\tfmt.Println(test, \"got\", got, \"want\", want)\n+\t\treturn false\n+\t}\n+\treturn true\n+}\n+\n+func main() {\n+\tgood := true\n+\t// http://www.exploringbinary.com/java-hangs-when-converting-2-2250738585072012e-308/\n+\tgood = good && check(\"2.2250738585072012e-308\", 2.2250738585072012e-308, 2.2250738585072014e-308)\n+\t// http://www.exploringbinary.com/php-hangs-on-numeric-value-2-2250738585072011e-308/\n+\tgood = good && check(\"2.2250738585072011e-308\", 2.2250738585072011e-308, 2.225073858507201e-308)\n+\tif !good {\n+\t\tpanic(\"fail\")\n+\t}\n+}"}, {"sha": "23e2be6603aaa14e7b0107d18a90d24825aefe68", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug323.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug323.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug323.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug323.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,20 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type T struct{}\n+type P *T\n+\n+func (t *T) Meth() {}\n+func (t T) Meth2() {}\n+\n+func main() {\n+\tt := &T{}\n+\tp := P(t)\n+\tp.Meth()  // ERROR \"undefined\"\n+\tp.Meth2() // ERROR \"undefined\"\n+}"}, {"sha": "b86740fff9342fedaa8e6be4af6f3f71de738131", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug325.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug325.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug325.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug325.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,15 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+func main() {\n+\tvar x unsafe.Pointer\n+\tprintln(*x) // ERROR \"invalid indirect.*unsafe.Pointer\"\n+\tvar _ = (unsafe.Pointer)(nil).foo  // ERROR \"foo\"\n+}"}, {"sha": "efdd0ef713178ebfc82f5237f7c72139ea96fb02", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug326.go", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug326.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug326.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug326.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,41 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+import \"os\"\n+\n+func f() (_ int, err os.Error) {\n+\treturn\n+}\n+\n+func g() (x int, _ os.Error) {\n+\treturn\n+}\n+\n+func h() (_ int, _ os.Error) {\n+\treturn\n+}\n+\n+func i() (int, os.Error) {\n+\treturn\t// ERROR \"not enough arguments to return\"\n+}\n+\n+func f1() (_ int, err os.Error) {\n+\treturn 1, nil\n+}\n+\n+func g1() (x int, _ os.Error) {\n+\treturn 1, nil\n+}\n+\n+func h1() (_ int, _ os.Error) {\n+\treturn 1, nil\n+}\n+\n+func ii() (int, os.Error) {\n+\treturn 1, nil\n+}"}, {"sha": "7b91d88e51a56a66e833bd52d1b9f81d2714b62f", "filename": "gcc/testsuite/go.test/test/float_lit.go", "status": "modified", "additions": 145, "deletions": 66, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffloat_lit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffloat_lit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffloat_lit.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -6,29 +6,19 @@\n \n package main\n \n-import \"os\"\n-\n-var deLim float64\n var bad bool\n \n-func\n-init() {\n-\tif os.Getenv(\"GOARCH\") == \"arm\" {\n-\t\tdeLim = 1.0e-8\n-\t} else {\n-\t\tdeLim = 10.e-14\n+func pow10(pow int) float64 {\n+\tif pow < 0 {\n+\t\treturn 1 / pow10(-pow)\n+\t}\n+\tif pow > 0 {\n+\t\treturn pow10(pow-1) * 10\n \t}\n-}\n-\n-func\n-pow10(pow int) float64 {\n-\tif pow < 0 { return 1/pow10(-pow); }\n-\tif pow > 0 { return pow10(pow-1)*10; }\n \treturn 1\n }\n \n-func\n-close(da float64, ia, ib int64, pow int) bool {\n+func close(da float64, ia, ib int64, pow int) bool {\n \tdb := float64(ia) / float64(ib)\n \tdb *= pow10(pow)\n \n@@ -39,12 +29,12 @@ close(da float64, ia, ib int64, pow int) bool {\n \t\treturn false\n \t}\n \n-\tde := (da-db) /da\n+\tde := (da - db) / da\n \tif de < 0 {\n \t\tde = -de\n \t}\n \n-\tif de < deLim {\n+\tif de < 1e-14 {\n \t\treturn true\n \t}\n \tif !bad {\n@@ -54,65 +44,154 @@ close(da float64, ia, ib int64, pow int) bool {\n \treturn false\n }\n \n-func\n-main() {\n-\tif !close(0., 0, 1, 0) { print(\"0. is \", 0., \"\\n\"); }\n-\tif !close(+10., 10, 1, 0) { print(\"+10. is \", +10., \"\\n\"); }\n-\tif !close(-210., -210, 1, 0) { print(\"-210. is \", -210., \"\\n\"); }\n+func main() {\n+\tif !close(0., 0, 1, 0) {\n+\t\tprint(\"0. is \", 0., \"\\n\")\n+\t}\n+\tif !close(+10., 10, 1, 0) {\n+\t\tprint(\"+10. is \", +10., \"\\n\")\n+\t}\n+\tif !close(-210., -210, 1, 0) {\n+\t\tprint(\"-210. is \", -210., \"\\n\")\n+\t}\n \n-\tif !close(.0, 0, 1, 0) { print(\".0 is \", .0, \"\\n\"); }\n-\tif !close(+.01, 1, 100, 0) { print(\"+.01 is \", +.01, \"\\n\"); }\n-\tif !close(-.012, -12, 1000, 0) { print(\"-.012 is \", -.012, \"\\n\"); }\n+\tif !close(.0, 0, 1, 0) {\n+\t\tprint(\".0 is \", .0, \"\\n\")\n+\t}\n+\tif !close(+.01, 1, 100, 0) {\n+\t\tprint(\"+.01 is \", +.01, \"\\n\")\n+\t}\n+\tif !close(-.012, -12, 1000, 0) {\n+\t\tprint(\"-.012 is \", -.012, \"\\n\")\n+\t}\n \n-\tif !close(0.0, 0, 1, 0) { print(\"0.0 is \", 0.0, \"\\n\"); }\n-\tif !close(+10.01, 1001, 100, 0) { print(\"+10.01 is \", +10.01, \"\\n\"); }\n-\tif !close(-210.012, -210012, 1000, 0) { print(\"-210.012 is \", -210.012, \"\\n\"); }\n+\tif !close(0.0, 0, 1, 0) {\n+\t\tprint(\"0.0 is \", 0.0, \"\\n\")\n+\t}\n+\tif !close(+10.01, 1001, 100, 0) {\n+\t\tprint(\"+10.01 is \", +10.01, \"\\n\")\n+\t}\n+\tif !close(-210.012, -210012, 1000, 0) {\n+\t\tprint(\"-210.012 is \", -210.012, \"\\n\")\n+\t}\n \n-\tif !close(0E+1, 0, 1, 0) { print(\"0E+1 is \", 0E+1, \"\\n\"); }\n-\tif !close(+10e2, 10, 1, 2) { print(\"+10e2 is \", +10e2, \"\\n\"); }\n-\tif !close(-210e3, -210, 1, 3) { print(\"-210e3 is \", -210e3, \"\\n\"); }\n+\tif !close(0E+1, 0, 1, 0) {\n+\t\tprint(\"0E+1 is \", 0E+1, \"\\n\")\n+\t}\n+\tif !close(+10e2, 10, 1, 2) {\n+\t\tprint(\"+10e2 is \", +10e2, \"\\n\")\n+\t}\n+\tif !close(-210e3, -210, 1, 3) {\n+\t\tprint(\"-210e3 is \", -210e3, \"\\n\")\n+\t}\n \n-\tif !close(0E-1, 0, 1, 0) { print(\"0E-1 is \", 0E-1, \"\\n\"); }\n-\tif !close(+0e23, 0, 1, 1) { print(\"+0e23 is \", +0e23, \"\\n\"); }\n-\tif !close(-0e345, 0, 1, 1) { print(\"-0e345 is \", -0e345, \"\\n\"); }\n+\tif !close(0E-1, 0, 1, 0) {\n+\t\tprint(\"0E-1 is \", 0E-1, \"\\n\")\n+\t}\n+\tif !close(+0e23, 0, 1, 1) {\n+\t\tprint(\"+0e23 is \", +0e23, \"\\n\")\n+\t}\n+\tif !close(-0e345, 0, 1, 1) {\n+\t\tprint(\"-0e345 is \", -0e345, \"\\n\")\n+\t}\n \n-\tif !close(0E1, 0, 1, 1) { print(\"0E1 is \", 0E1, \"\\n\"); }\n-\tif !close(+10e23, 10, 1, 23) { print(\"+10e23 is \", +10e23, \"\\n\"); }\n-\tif !close(-210e34, -210, 1, 34) { print(\"-210e34 is \", -210e34, \"\\n\"); }\n+\tif !close(0E1, 0, 1, 1) {\n+\t\tprint(\"0E1 is \", 0E1, \"\\n\")\n+\t}\n+\tif !close(+10e23, 10, 1, 23) {\n+\t\tprint(\"+10e23 is \", +10e23, \"\\n\")\n+\t}\n+\tif !close(-210e34, -210, 1, 34) {\n+\t\tprint(\"-210e34 is \", -210e34, \"\\n\")\n+\t}\n \n-\tif !close(0.E1, 0, 1, 1) { print(\"0.E1 is \", 0.E1, \"\\n\"); }\n-\tif !close(+10.e+2, 10, 1, 2) { print(\"+10.e+2 is \", +10.e+2, \"\\n\"); }\n-\tif !close(-210.e-3, -210, 1, -3) { print(\"-210.e-3 is \", -210.e-3, \"\\n\"); }\n+\tif !close(0.E1, 0, 1, 1) {\n+\t\tprint(\"0.E1 is \", 0.E1, \"\\n\")\n+\t}\n+\tif !close(+10.e+2, 10, 1, 2) {\n+\t\tprint(\"+10.e+2 is \", +10.e+2, \"\\n\")\n+\t}\n+\tif !close(-210.e-3, -210, 1, -3) {\n+\t\tprint(\"-210.e-3 is \", -210.e-3, \"\\n\")\n+\t}\n \n-\tif !close(.0E1, 0, 1, 1) { print(\".0E1 is \", .0E1, \"\\n\"); }\n-\tif !close(+.01e2, 1, 100, 2) { print(\"+.01e2 is \", +.01e2, \"\\n\"); }\n-\tif !close(-.012e3, -12, 1000, 3) { print(\"-.012e3 is \", -.012e3, \"\\n\"); }\n+\tif !close(.0E1, 0, 1, 1) {\n+\t\tprint(\".0E1 is \", .0E1, \"\\n\")\n+\t}\n+\tif !close(+.01e2, 1, 100, 2) {\n+\t\tprint(\"+.01e2 is \", +.01e2, \"\\n\")\n+\t}\n+\tif !close(-.012e3, -12, 1000, 3) {\n+\t\tprint(\"-.012e3 is \", -.012e3, \"\\n\")\n+\t}\n \n-\tif !close(0.0E1, 0, 1, 0) { print(\"0.0E1 is \", 0.0E1, \"\\n\"); }\n-\tif !close(+10.01e2, 1001, 100, 2) { print(\"+10.01e2 is \", +10.01e2, \"\\n\"); }\n-\tif !close(-210.012e3, -210012, 1000, 3) { print(\"-210.012e3 is \", -210.012e3, \"\\n\"); }\n+\tif !close(0.0E1, 0, 1, 0) {\n+\t\tprint(\"0.0E1 is \", 0.0E1, \"\\n\")\n+\t}\n+\tif !close(+10.01e2, 1001, 100, 2) {\n+\t\tprint(\"+10.01e2 is \", +10.01e2, \"\\n\")\n+\t}\n+\tif !close(-210.012e3, -210012, 1000, 3) {\n+\t\tprint(\"-210.012e3 is \", -210.012e3, \"\\n\")\n+\t}\n \n-\tif !close(0.E+12, 0, 1, 0) { print(\"0.E+12 is \", 0.E+12, \"\\n\"); }\n-\tif !close(+10.e23, 10, 1, 23) { print(\"+10.e23 is \", +10.e23, \"\\n\"); }\n-\tif !close(-210.e33, -210, 1, 33) { print(\"-210.e33 is \", -210.e33, \"\\n\"); }\n+\tif !close(0.E+12, 0, 1, 0) {\n+\t\tprint(\"0.E+12 is \", 0.E+12, \"\\n\")\n+\t}\n+\tif !close(+10.e23, 10, 1, 23) {\n+\t\tprint(\"+10.e23 is \", +10.e23, \"\\n\")\n+\t}\n+\tif !close(-210.e33, -210, 1, 33) {\n+\t\tprint(\"-210.e33 is \", -210.e33, \"\\n\")\n+\t}\n \n-\tif !close(.0E-12, 0, 1, 0) { print(\".0E-12 is \", .0E-12, \"\\n\"); }\n-\tif !close(+.01e23, 1, 100, 23) { print(\"+.01e23 is \", +.01e23, \"\\n\"); }\n-\tif !close(-.012e34, -12, 1000, 34) { print(\"-.012e34 is \", -.012e34, \"\\n\"); }\n+\tif !close(.0E-12, 0, 1, 0) {\n+\t\tprint(\".0E-12 is \", .0E-12, \"\\n\")\n+\t}\n+\tif !close(+.01e23, 1, 100, 23) {\n+\t\tprint(\"+.01e23 is \", +.01e23, \"\\n\")\n+\t}\n+\tif !close(-.012e34, -12, 1000, 34) {\n+\t\tprint(\"-.012e34 is \", -.012e34, \"\\n\")\n+\t}\n \n-\tif !close(0.0E12, 0, 1, 12) { print(\"0.0E12 is \", 0.0E12, \"\\n\"); }\n-\tif !close(+10.01e23, 1001, 100, 23) { print(\"+10.01e23 is \", +10.01e23, \"\\n\"); }\n-\tif !close(-210.012e33, -210012, 1000, 33) { print(\"-210.012e33 is \", -210.012e33, \"\\n\"); }\n+\tif !close(0.0E12, 0, 1, 12) {\n+\t\tprint(\"0.0E12 is \", 0.0E12, \"\\n\")\n+\t}\n+\tif !close(+10.01e23, 1001, 100, 23) {\n+\t\tprint(\"+10.01e23 is \", +10.01e23, \"\\n\")\n+\t}\n+\tif !close(-210.012e33, -210012, 1000, 33) {\n+\t\tprint(\"-210.012e33 is \", -210.012e33, \"\\n\")\n+\t}\n \n-\tif !close(0.E123, 0, 1, 123) { print(\"0.E123 is \", 0.E123, \"\\n\"); }\n-\tif !close(+10.e+23, 10, 1, 23) { print(\"+10.e+234 is \", +10.e+234, \"\\n\"); }\n-\tif !close(-210.e-35, -210, 1, -35) { print(\"-210.e-35 is \", -210.e-35, \"\\n\"); }\n+\tif !close(0.E123, 0, 1, 123) {\n+\t\tprint(\"0.E123 is \", 0.E123, \"\\n\")\n+\t}\n+\tif !close(+10.e+23, 10, 1, 23) {\n+\t\tprint(\"+10.e+234 is \", +10.e+234, \"\\n\")\n+\t}\n+\tif !close(-210.e-35, -210, 1, -35) {\n+\t\tprint(\"-210.e-35 is \", -210.e-35, \"\\n\")\n+\t}\n \n-\tif !close(.0E123, 0, 1, 123) { print(\".0E123 is \", .0E123, \"\\n\"); }\n-\tif !close(+.01e29, 1, 100, 29) { print(\"+.01e29 is \", +.01e29, \"\\n\"); }\n-\tif !close(-.012e29, -12, 1000, 29) { print(\"-.012e29 is \", -.012e29, \"\\n\"); }\n+\tif !close(.0E123, 0, 1, 123) {\n+\t\tprint(\".0E123 is \", .0E123, \"\\n\")\n+\t}\n+\tif !close(+.01e29, 1, 100, 29) {\n+\t\tprint(\"+.01e29 is \", +.01e29, \"\\n\")\n+\t}\n+\tif !close(-.012e29, -12, 1000, 29) {\n+\t\tprint(\"-.012e29 is \", -.012e29, \"\\n\")\n+\t}\n \n-\tif !close(0.0E123, 0, 1, 123) { print(\"0.0E123 is \", 0.0E123, \"\\n\"); }\n-\tif !close(+10.01e31, 1001, 100, 31) { print(\"+10.01e31 is \", +10.01e31, \"\\n\"); }\n-\tif !close(-210.012e19, -210012, 1000, 19) { print(\"-210.012e19 is \", -210.012e19, \"\\n\"); }\n+\tif !close(0.0E123, 0, 1, 123) {\n+\t\tprint(\"0.0E123 is \", 0.0E123, \"\\n\")\n+\t}\n+\tif !close(+10.01e31, 1001, 100, 31) {\n+\t\tprint(\"+10.01e31 is \", +10.01e31, \"\\n\")\n+\t}\n+\tif !close(-210.012e19, -210012, 1000, 19) {\n+\t\tprint(\"-210.012e19 is \", -210.012e19, \"\\n\")\n+\t}\n }"}, {"sha": "e833843826558b768f922049bd4085134ebcb13e", "filename": "gcc/testsuite/go.test/test/garbage/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2FMakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2FMakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2FMakefile?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -11,8 +11,8 @@ ALL=\\\n \n all: $(addsuffix .out, $(ALL))\n \n-%.$O: %.go\n-\t$(GC) $*.go\n+%.$O: %.go stats.go\n+\t$(GC) $*.go stats.go\n \n %.out: %.$O\n \t$(LD) -o $@ $*.$O"}, {"sha": "19a96bc63bd8f0fd859ac330bad681e87b78194e", "filename": "gcc/testsuite/go.test/test/garbage/parser.go", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Fparser.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -11,13 +11,19 @@ import (\n \t\"fmt\"\n \t\"go/ast\"\n \t\"go/parser\"\n+\t\"go/token\"\n \t\"os\"\n \t\"path\"\n \t\"runtime\"\n \t\"strings\"\n \t\"time\"\n+\t\"http\"\n+\t_ \"http/pprof\"\n+\t\"log\"\n )\n \n+var serve = flag.String(\"serve\", \"\", \"serve http on this address at end\")\n+\n func isGoFile(dir *os.FileInfo) bool {\n \treturn dir.IsRegular() &&\n \t\t!strings.HasPrefix(dir.Name, \".\") && // ignore .files\n@@ -30,7 +36,7 @@ func isPkgFile(dir *os.FileInfo) bool {\n }\n \n func pkgName(filename string) string {\n-\tfile, err := parser.ParseFile(filename, nil, parser.PackageClauseOnly)\n+\tfile, err := parser.ParseFile(token.NewFileSet(), filename, nil, parser.PackageClauseOnly)\n \tif err != nil || file == nil {\n \t\treturn \"\"\n \t}\n@@ -58,7 +64,7 @@ func parseDir(dirpath string) map[string]*ast.Package {\n \t}\n \n \t// get package AST\n-\tpkgs, err := parser.ParseDir(dirpath, filter, parser.ParseComments)\n+\tpkgs, err := parser.ParseDir(token.NewFileSet(), dirpath, filter, parser.ParseComments)\n \tif err != nil {\n \t\tprintln(\"parse\", dirpath, err.String())\n \t\tpanic(\"fail\")\n@@ -67,12 +73,19 @@ func parseDir(dirpath string) map[string]*ast.Package {\n }\n \n func main() {\n+\truntime.GOMAXPROCS(4)\n+\tgo func() {}()\n+\tgo func() {}()\n+\tgo func() {}()\n \tst := &runtime.MemStats\n+\tpackages = append(packages, packages...)\n+\tpackages = append(packages, packages...)\n \tn := flag.Int(\"n\", 4, \"iterations\")\n \tp := flag.Int(\"p\", len(packages), \"# of packages to keep in memory\")\n \tflag.BoolVar(&st.DebugGC, \"d\", st.DebugGC, \"print GC debugging info (pause times)\")\n \tflag.Parse()\n \n+\tvar lastParsed []map[string]*ast.Package\n \tvar t0 int64\n \tpkgroot := runtime.GOROOT() + \"/src/pkg/\"\n \tfor pass := 0; pass < 2; pass++ {\n@@ -81,33 +94,42 @@ func main() {\n \t\t// than the normal pauses and would otherwise make\n \t\t// the average look much better than it actually is.\n \t\tst.NumGC = 0\n-\t\tst.PauseNs = 0\n+\t\tst.PauseTotalNs = 0\n \t\tt0 = time.Nanoseconds()\n \n \t\tfor i := 0; i < *n; i++ {\n \t\t\tparsed := make([]map[string]*ast.Package, *p)\n \t\t\tfor j := range parsed {\n \t\t\t\tparsed[j] = parseDir(pkgroot + packages[j%len(packages)])\n \t\t\t}\n+\t\t\tif i+1 == *n && *serve != \"\" {\n+\t\t\t\tlastParsed = parsed\n+\t\t\t}\n \t\t}\n \t\truntime.GC()\n+\t\truntime.GC()\n \t}\n \tt1 := time.Nanoseconds()\n \n \tfmt.Printf(\"Alloc=%d/%d Heap=%d Mallocs=%d PauseTime=%.3f/%d = %.3f\\n\",\n \t\tst.Alloc, st.TotalAlloc,\n \t\tst.Sys,\n-\t\tst.Mallocs, float64(st.PauseNs)/1e9,\n-\t\tst.NumGC, float64(st.PauseNs)/1e9/float64(st.NumGC))\n-\n-\tfmt.Printf(\"%10s %10s %10s\\n\", \"size\", \"#alloc\", \"#free\")\n-\tfor _, s := range st.BySize {\n-\t\tfmt.Printf(\"%10d %10d %10d\\n\", s.Size, s.Mallocs, s.Frees)\n-\t}\n+\t\tst.Mallocs, float64(st.PauseTotalNs)/1e9,\n+\t\tst.NumGC, float64(st.PauseTotalNs)/1e9/float64(st.NumGC))\n \n+\t/*\n+\t\tfmt.Printf(\"%10s %10s %10s\\n\", \"size\", \"#alloc\", \"#free\")\n+\t\tfor _, s := range st.BySize {\n+\t\t\tfmt.Printf(\"%10d %10d %10d\\n\", s.Size, s.Mallocs, s.Frees)\n+\t\t}\n+\t*/\n \t// Standard gotest benchmark output, collected by build dashboard.\n-\tfmt.Printf(\"garbage.BenchmarkParser %d %d ns/op\\n\", *n, (t1-t0)/int64(*n))\n-\tfmt.Printf(\"garbage.BenchmarkParserPause %d %d ns/op\\n\", st.NumGC, int64(st.PauseNs)/int64(st.NumGC))\n+\tgcstats(\"BenchmarkParser\", *n, t1-t0)\n+\n+\tif *serve != \"\" {\n+\t\tlog.Fatal(http.ListenAndServe(*serve, nil))\n+\t\tprintln(lastParsed)\n+\t}\n }\n \n \n@@ -183,7 +205,6 @@ var packages = []string{\n \t\"math\",\n \t\"mime\",\n \t\"net\",\n-\t\"nntp\",\n \t\"os\",\n \t\"os/signal\",\n \t\"patch\",\n@@ -195,6 +216,7 @@ var packages = []string{\n \t\"runtime\",\n \t\"scanner\",\n \t\"sort\",\n+\t\"smtp\",\n \t\"strconv\",\n \t\"strings\",\n \t\"sync\","}, {"sha": "b4d31856126f11b444aae66af636dbd93776dfd2", "filename": "gcc/testsuite/go.test/test/garbage/peano.go", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Fpeano.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Fpeano.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Fpeano.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -123,7 +123,6 @@ func verify() {\n \n \n func main() {\n-\tst := &runtime.MemStats\n \tt0 := time.Nanoseconds()\n \tverify()\n \tfor i := 0; i <= 9; i++ {\n@@ -132,6 +131,5 @@ func main() {\n \truntime.GC()\n \tt1 := time.Nanoseconds()\n \n-\tfmt.Printf(\"garbage.BenchmarkPeano 1 %d ns/op\\n\", t1-t0)\n-\tfmt.Printf(\"garbage.BenchmarkPeanoPause %d %d ns/op\\n\", st.NumGC, int64(st.PauseNs)/int64(st.NumGC))\n+\tgcstats(\"BenchmarkPeano\", 1, t1-t0)\n }"}, {"sha": "474e6ad4abc55dd0cead932cedcdc12c5f9e1c05", "filename": "gcc/testsuite/go.test/test/garbage/stats.go", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Fstats.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Fstats.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Fstats.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"runtime\"\n+\t\"sort\"\n+)\n+\n+func gcstats(name string, n int, t int64) {\n+\tst := &runtime.MemStats\n+\tfmt.Printf(\"garbage.%sMem Alloc=%d/%d Heap=%d NextGC=%d Mallocs=%d\\n\", name, st.Alloc, st.TotalAlloc, st.Sys, st.NextGC, st.Mallocs)\n+\tfmt.Printf(\"garbage.%s %d %d ns/op\\n\", name, n, t/int64(n))\n+\tfmt.Printf(\"garbage.%sLastPause 1 %d ns/op\\n\", name, st.PauseNs[(st.NumGC-1)%uint32(len(st.PauseNs))])\n+\tfmt.Printf(\"garbage.%sPause %d %d ns/op\\n\", name, st.NumGC, int64(st.PauseTotalNs)/int64(st.NumGC))\n+\tnn := int(st.NumGC)\n+\tif nn >= len(st.PauseNs) {\n+\t\tnn = len(st.PauseNs)\n+\t}\n+\tt1, t2, t3, t4, t5 := tukey5(st.PauseNs[0:nn])\n+\tfmt.Printf(\"garbage.%sPause5: %d %d %d %d %d\\n\", name, t1, t2, t3, t4, t5)\n+\t\n+//\tfmt.Printf(\"garbage.%sScan: %v\\n\", name, st.ScanDist)\n+}\n+\n+type T []uint64\n+func (t T) Len() int { return len(t) }\n+func (t T) Swap(i, j int) { t[i], t[j] = t[j], t[i] }\n+func (t T) Less(i, j int) bool { return t[i] < t[j] }\n+\n+func tukey5(raw []uint64) (lo, q1, q2, q3, hi uint64) {\n+\tx := make(T, len(raw))\n+\tcopy(x, raw)\n+\tsort.Sort(T(x))\n+\tlo = x[0]\n+\tq1 = x[len(x)/4]\n+\tq2 = x[len(x)/2]\n+\tq3 = x[len(x)*3/4]\n+\thi = x[len(x)-1]\n+\treturn\n+}"}, {"sha": "c5eae9760f272278f145e5d74055320dfd9ca465", "filename": "gcc/testsuite/go.test/test/garbage/tree.go", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Ftree.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Ftree.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgarbage%2Ftree.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -39,7 +39,6 @@ package main\n import (\n \t\"flag\"\n \t\"fmt\"\n-\t\"runtime\"\n \t\"time\"\n )\n \n@@ -95,10 +94,7 @@ func main() {\n \tfmt.Printf(\"long lived tree of depth %d\\t check: %d\\n\", maxDepth, longLivedTree.itemCheck())\n \n \tt1 := time.Nanoseconds()\n-\tst := &runtime.MemStats\n \n \t// Standard gotest benchmark output, collected by build dashboard.\n-\tfmt.Printf(\"garbage.BenchmarkTree %d %d ns/op\\n\", *n, (t1-t0)/int64(*n))\n-\tfmt.Printf(\"garbage.BenchmarkTreePause %d %d ns/op\\n\", st.NumGC, int64(st.PauseNs)/int64(st.NumGC))\n-\n+\tgcstats(\"BenchmarkTree\", *n, t1-t0)\n }"}, {"sha": "41829fb03609d25048b7b58cdb368e33c7ad0364", "filename": "gcc/testsuite/go.test/test/golden-arm.out", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden-arm.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden-arm.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden-arm.out?ref=3c844a6a13096f126522a0ea58a3e9ba503bd959", "patch": "@@ -1,131 +0,0 @@\n-\n-=========== ./cmp2.go\n-panic: runtime error: comparing uncomparable type []int\n-\n-panic PC=xxx\n-\n-=========== ./cmp3.go\n-panic: runtime error: comparing uncomparable type []int\n-\n-panic PC=xxx\n-\n-=========== ./cmp4.go\n-panic: runtime error: hash of unhashable type []int\n-\n-panic PC=xxx\n-\n-=========== ./cmp5.go\n-panic: runtime error: hash of unhashable type []int\n-\n-panic PC=xxx\n-\n-=========== ./deferprint.go\n-printing: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n-42 true false true +1.500000e+000 world 0x0 [0/0]0x0 0x0 0x0 255\n-\n-=========== ./helloworld.go\n-hello, world\n-\n-=========== ./peano.go\n-0! = 1\n-1! = 1\n-2! = 2\n-3! = 6\n-4! = 24\n-5! = 120\n-6! = 720\n-7! = 5040\n-8! = 40320\n-9! = 362880\n-\n-=========== ./printbig.go\n--9223372036854775808\n-9223372036854775807\n-\n-=========== ./sigchld.go\n-survived SIGCHLD\n-\n-=========== ./sinit.go\n-FAIL\n-\n-=========== ./turing.go\n-Hello World!\n-\n-=========== ken/intervar.go\n- print 1 bio 2 file 3 -- abc\n-\n-=========== ken/label.go\n-100\n-\n-=========== ken/rob1.go\n-9876543210\n-\n-=========== ken/rob2.go\n-(defn foo (add 12 34))\n-\n-=========== ken/simpprint.go\n-hello world\n-\n-=========== ken/simpswitch.go\n-0out01out12out2aout34out4fiveout56out6aout78out89out9\n-\n-=========== ken/string.go\n-abcxyz-abcxyz-abcxyz-abcxyz-abcxyz-abcxyz-abcxyz\n-\n-=========== chan/doubleselect.go\n-PASS\n-\n-=========== chan/nonblock.go\n-PASS\n-\n-=========== interface/fail.go\n-panic: interface conversion: *main.S is not main.I: missing method Foo\n-\n-panic PC=xxx\n-\n-=========== interface/returntype.go\n-panic: interface conversion: *main.S is not main.I2: missing method Name\n-\n-panic PC=xxx\n-\n-=========== fixedbugs/bug016.go\n-fixedbugs/bug016.go:11: constant -3 overflows uint\n-\n-=========== fixedbugs/bug027.go\n-hi\n-0 44444\n-1 3333\n-2 222\n-3 11\n-4 0\n-0 44444\n-1 3333\n-2 222\n-3 11\n-4 0\n-\n-=========== fixedbugs/bug067.go\n-ok\n-\n-=========== fixedbugs/bug070.go\n-outer loop top k 0\n-inner loop top i 0\n-do break\n-broke\n-\n-=========== fixedbugs/bug081.go\n-fixedbugs/bug081.go:9: typechecking loop\n-\n-=========== fixedbugs/bug093.go\n-M\n-\n-=========== fixedbugs/bug113.go\n-panic: interface conversion: interface is int, not int32\n-\n-panic PC=xxx\n-\n-=========== fixedbugs/bug148.go\n-2 3\n-panic: interface conversion: interface is main.T, not main.T\n-\n-panic PC=xxx"}, {"sha": "cc699d4500e012d02fdf555f2b0e828ac20ff324", "filename": "gcc/testsuite/go.test/test/golden.out", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -4,22 +4,18 @@\n =========== ./cmp2.go\n panic: runtime error: comparing uncomparable type []int\n \n-panic PC=xxx\n \n =========== ./cmp3.go\n panic: runtime error: comparing uncomparable type []int\n \n-panic PC=xxx\n \n =========== ./cmp4.go\n panic: runtime error: hash of unhashable type []int\n \n-panic PC=xxx\n \n =========== ./cmp5.go\n panic: runtime error: hash of unhashable type []int\n \n-panic PC=xxx\n \n =========== ./deferprint.go\n printing: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n@@ -64,7 +60,6 @@ Hello World!\n =========== ken/cplx3.go\n (+1.292308e+000-1.384615e-001i)\n (+1.292308e+000-1.384615e-001i)\n-64\n \n =========== ken/cplx4.go\n c = (-5.000000-6.000000i)\n@@ -117,22 +112,17 @@ PASS\n =========== interface/fail.go\n panic: interface conversion: *main.S is not main.I: missing method Foo\n \n-panic PC=xxx\n \n =========== interface/returntype.go\n panic: interface conversion: *main.S is not main.I2: missing method Name\n \n-panic PC=xxx\n \n == nilptr/\n \n == syntax/\n \n == fixedbugs/\n \n-=========== fixedbugs/bug016.go\n-fixedbugs/bug016.go:11: constant -3 overflows uint\n-\n =========== fixedbugs/bug027.go\n hi\n 0 44444\n@@ -155,25 +145,25 @@ inner loop top i 0\n do break\n broke\n \n-=========== fixedbugs/bug081.go\n-fixedbugs/bug081.go:9: typechecking loop\n-\n =========== fixedbugs/bug093.go\n M\n \n =========== fixedbugs/bug113.go\n panic: interface conversion: interface is int, not int32\n \n-panic PC=xxx\n \n =========== fixedbugs/bug148.go\n 2 3\n panic: interface conversion: interface is main.T, not main.T\n \n-panic PC=xxx\n \n == bugs/\n \n-=========== bugs/bug260.go\n-FAIL\n-BUG: bug260 failed\n+=========== bugs/bug322.go\n+bugs/bug322.dir/main.go:19: implicit assignment of unexported field 'x' of lib.T in method receiver\n+bugs/bug322.dir/main.go:22: implicit assignment of unexported field 'x' of lib.T in assignment\n+bugs/bug322.dir/main.go:31: implicit assignment of unexported field 'x' of lib.T in method receiver\n+BUG: fails incorrectly\n+\n+=========== bugs/bug324.go\n+BUG: errchk: command succeeded unexpectedly"}, {"sha": "38aa33dd305927ae8d658db75a0295cec827c824", "filename": "gcc/testsuite/go.test/test/index.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,8 +1,8 @@\n // $G $D/$F.go && $L $F.$A &&\n-// ./$A.out -pass 0 >tmp.go && $G tmp.go && $L -o tmp1.$A tmp.$A && ./tmp1.$A &&\n+// ./$A.out -pass 0 >tmp.go && $G tmp.go && $L -o $A.out1 tmp.$A && ./$A.out1 &&\n // ./$A.out -pass 1 >tmp.go && errchk $G -e tmp.go &&\n // ./$A.out -pass 2 >tmp.go && errchk $G -e tmp.go\n-// rm -f tmp.go\n+// rm -f tmp.go $A.out1\n \n // Copyright 2010 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "74c2d5c26146d0e393af8a828b75bd80d00a8695", "filename": "gcc/testsuite/go.test/test/init.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finit.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,18 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"runtime\"\n+\n+func init() {\n+}\n+\n+func main() {\n+\tinit()         // ERROR \"undefined.*init\"\n+\truntime.init() // ERROR \"unexported.*runtime\\.init\"\n+\tvar _ = init   // ERROR \"undefined.*init\"\n+}"}, {"sha": "c18a1fecec2af129cfb189b70b2aacbe770a574b", "filename": "gcc/testsuite/go.test/test/interface/embed2.go", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed2.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,70 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check methods derived from embedded interface and *interface values.\n+\n+package main\n+\n+import \"os\"\n+\n+const Value = 1e12\n+\n+type Inter interface { M() int64 }\n+\n+type T int64\n+func (t T) M() int64 { return int64(t) }\n+var t = T(Value)\n+var pt = &t\n+var ti Inter = t\n+var pti = &ti\n+\n+type S struct { Inter }\n+var s = S{ ti }\n+var ps = &s\n+\n+type SP struct { *Inter }\t// ERROR \"interface\"\n+\n+var i Inter\n+var pi = &i\n+\n+var ok = true\n+\n+func check(s string, v int64) {\n+\tif v != Value {\n+\t\tprintln(s, v)\n+\t\tok = false\n+\t}\n+}\n+\n+func main() {\n+\tcheck(\"t.M()\", t.M())\n+\tcheck(\"pt.M()\", pt.M())\n+\tcheck(\"ti.M()\", ti.M())\n+\tcheck(\"pti.M()\", pti.M())\t// ERROR \"method\"\n+\tcheck(\"s.M()\", s.M())\n+\tcheck(\"ps.M()\", ps.M())\n+\n+\ti = t\n+\tcheck(\"i = t; i.M()\", i.M())\n+\tcheck(\"i = t; pi.M()\", pi.M())\t// ERROR \"method\"\n+\n+\ti = pt\n+\tcheck(\"i = pt; i.M()\", i.M())\n+\tcheck(\"i = pt; pi.M()\", pi.M())\t// ERROR \"method\"\n+\n+\ti = s\n+\tcheck(\"i = s; i.M()\", i.M())\n+\tcheck(\"i = s; pi.M()\", pi.M())\t// ERROR \"method\"\n+\n+\ti = ps\n+\tcheck(\"i = ps; i.M()\", i.M())\n+\tcheck(\"i = ps; pi.M()\", pi.M())\t// ERROR \"method\"\n+\n+\tif !ok {\n+\t\tprintln(\"BUG: interface10\")\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "3780ec886a4b52e4fe31ee08d3cfaf4691f09883", "filename": "gcc/testsuite/go.test/test/ken/convert.go", "status": "added", "additions": 431, "deletions": 0, "changes": 431, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fconvert.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fconvert.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fconvert.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,431 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2010 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// near-exhaustive test of converting numbers between types.\n+\n+package main\n+\n+var i8 int8;\n+var u8 uint8;\n+var i16 int16;\n+var u16 uint16;\n+var i32 int32;\n+var u32 uint32;\n+var i64 int64;\n+var u64 uint64;\n+var f32 float32;\n+var f64 float64;\n+\n+type\tbig\tfloat64\n+\n+type\tt\tstruct {\n+\tfrom, to\tint\n+\tval\t\tbig\n+}\n+\n+const (\n+\tti8\t= iota+1\n+\ttu8\n+\tti16\n+\ttu16\n+\tti32\n+\ttu32\n+\tti64\n+\ttu64\n+\ttf32\n+\ttf64\n+)\n+\n+var\tx = []t{\n+\n+\t/* value good in all types (10) */\n+\t{ ti8,  ti8,  10 }, { ti8,  tu8,  10 }, { ti8,  ti16, 10 }, { ti8,  tu16, 10 },\n+\t{ ti8,  ti32, 10 }, { ti8,  tu32, 10 }, { ti8,  ti64, 10 }, { ti8,  tu64, 10 },\n+\t{ ti8,  tf32, 10 }, { ti8,  tf64, 10 },\n+\n+\t{ tu8,  ti8,  10 }, { tu8,  tu8,  10 }, { tu8,  ti16, 10 }, { tu8,  tu16, 10 },\n+\t{ tu8,  ti32, 10 }, { tu8,  tu32, 10 }, { tu8,  ti64, 10 }, { tu8,  tu64, 10 },\n+\t{ tu8,  tf32, 10 }, { tu8,  tf64, 10 },\n+\n+\t{ ti16, ti8,  10 }, { ti16, tu8,  10 }, { ti16, ti16, 10 }, { ti16, tu16, 10 },\n+\t{ ti16, ti32, 10 }, { ti16, tu32, 10 }, { ti16, ti64, 10 }, { ti16, tu64, 10 },\n+\t{ ti16, tf32, 10 }, { ti16, tf64, 10 },\n+\n+\t{ tu16, ti8,  10 }, { tu16, tu8,  10 }, { tu16, ti16, 10 }, { tu16, tu16, 10 },\n+\t{ tu16, ti32, 10 }, { tu16, tu32, 10 }, { tu16, ti64, 10 }, { tu16, tu64, 10 },\n+\t{ tu16, tf32, 10 }, { tu16, tf64, 10 },\n+\n+\t{ ti32, ti8,  10 }, { ti32, tu8,  10 }, { ti32, ti16, 10 }, { ti32, tu16, 10 },\n+\t{ ti32, ti32, 10 }, { ti32, tu32, 10 }, { ti32, ti64, 10 }, { ti32, tu64, 10 },\n+\t{ ti32, tf32, 10 }, { ti32, tf64, 10 },\n+\n+\t{ tu32, ti8,  10 }, { tu32, tu8,  10 }, { tu32, ti16, 10 }, { tu32, tu16, 10 },\n+\t{ tu32, ti32, 10 }, { tu32, tu32, 10 }, { tu32, ti64, 10 }, { tu32, tu64, 10 },\n+\t{ tu32, tf32, 10 }, { tu32, tf64, 10 },\n+\n+\t{ ti64, ti8,  10 }, { ti64, tu8,  10 }, { ti64, ti16, 10 }, { ti64, tu16, 10 },\n+\t{ ti64, ti32, 10 }, { ti64, tu32, 10 }, { ti64, ti64, 10 }, { ti64, tu64, 10 },\n+\t{ ti64, tf32, 10 }, { ti64, tf64, 10 },\n+\n+\t{ tu64, ti8,  10 }, { tu64, tu8,  10 }, { tu64, ti16, 10 }, { tu64, tu16, 10 },\n+\t{ tu64, ti32, 10 }, { tu64, tu32, 10 }, { tu64, ti64, 10 }, { tu64, tu64, 10 },\n+\t{ tu64, tf32, 10 }, { tu64, tf64, 10 },\n+\n+\t{ tf32, ti8,  10 }, { tf32, tu8,  10 }, { tf32, ti16, 10 }, { tf32, tu16, 10 },\n+\t{ tf32, ti32, 10 }, { tf32, tu32, 10 }, { tf32, ti64, 10 }, { tf32, tu64, 10 },\n+\t{ tf32, tf32, 10 }, { tf32, tf64, 10 },\n+\n+\t{ tf64, ti8,  10 }, { tf64, tu8,  10 }, { tf64, ti16, 10 }, { tf64, tu16, 10 },\n+\t{ tf64, ti32, 10 }, { tf64, tu32, 10 }, { tf64, ti64, 10 }, { tf64, tu64, 10 },\n+\t{ tf64, tf32, 10 }, { tf64, tf64, 10 },\n+\n+\t/* value good in all signed types (-4) */\n+\t{ ti8,  ti8,  -4 }, { ti8,  ti16, -4 },\n+\t{ ti8,  ti32, -4 }, { ti8,  ti64, -4 },\n+\t{ ti8,  tf32, -4 }, { ti8,  tf64, -4 },\n+\n+\t{ ti16, ti8,  -4 }, { ti16, ti16, -4 },\n+\t{ ti16, ti32, -4 }, { ti16, ti64, -4 },\n+\t{ ti16, tf32, -4 },\n+\n+\t{ ti32, ti8,  -4 }, { ti32, ti16, -4 },\n+\t{ ti32, ti32, -4 }, { ti32, ti64, -4 },\n+\t{ ti32, tf32, -4 }, { ti32, tf64, -4 },\n+\n+\t{ ti64, ti8,  -4 }, { ti64, ti16, -4 },\n+\t{ ti64, ti32, -4 }, { ti64, ti64, -4 },\n+\t{ ti64, tf32, -4 },\n+\n+\t{ tf32, ti8,  -4 }, { tf32, ti16, -4 },\n+\t{ tf32, ti32, -4 }, { tf32, ti64, -4 },\n+\t{ tf32, tf32, -4 },\n+\n+\t{ tf64, ti8,  -4 }, { tf64, ti16, -4 },\n+\t{ tf64, ti32, -4 }, { tf64, ti64, -4 },\n+\t{ tf64, tf32, -4 }, { tf64, tf64, -4 },\n+\n+\t/* value good in u8 and up (175) */\n+\t{ tu8,  tu8,  175 }, { tu8,  ti16, 175 }, { tu8,  tu16, 175 },\n+\t{ tu8,  ti32, 175 }, { tu8,  tu32, 175 }, { tu8,  ti64, 175 }, { tu8,  tu64, 175 },\n+\t{ tu8,  tf32, 175 }, { tu8,  tf64, 175 },\n+\n+\t{ ti16, tu8,  175 }, { ti16, ti16, 175 }, { ti16, tu16, 175 },\n+\t{ ti16, ti32, 175 }, { ti16, tu32, 175 }, { ti16, ti64, 175 }, { ti16, tu64, 175 },\n+\t{ ti16, tf32, 175 }, { ti16, tf64, 175 },\n+\n+\t{ tu16, tu8,  175 }, { tu16, ti16, 175 }, { tu16, tu16, 175 },\n+\t{ tu16, ti32, 175 }, { tu16, tu32, 175 }, { tu16, ti64, 175 }, { tu16, tu64, 175 },\n+\t{ tu16, tf32, 175 }, { tu16, tf64, 175 },\n+\n+\t{ ti32, tu8,  175 }, { ti32, ti16, 175 }, { ti32, tu16, 175 },\n+\t{ ti32, ti32, 175 }, { ti32, tu32, 175 }, { ti32, ti64, 175 }, { ti32, tu64, 175 },\n+\t{ ti32, tf32, 175 }, { ti32, tf64, 175 },\n+\n+\t{ tu32, tu8,  175 }, { tu32, ti16, 175 }, { tu32, tu16, 175 },\n+\t{ tu32, ti32, 175 }, { tu32, tu32, 175 }, { tu32, ti64, 175 }, { tu32, tu64, 175 },\n+\t{ tu32, tf32, 175 }, { tu32, tf64, 175 },\n+\n+\t{ ti64, tu8,  175 }, { ti64, ti16, 175 }, { ti64, tu16, 175 },\n+\t{ ti64, ti32, 175 }, { ti64, tu32, 175 }, { ti64, ti64, 175 }, { ti64, tu64, 175 },\n+\t{ ti64, tf32, 175 }, { ti64, tf64, 175 },\n+\n+\t{ tu64, tu8,  175 }, { tu64, ti16, 175 }, { tu64, tu16, 175 },\n+\t{ tu64, ti32, 175 }, { tu64, tu32, 175 }, { tu64, ti64, 175 }, { tu64, tu64, 175 },\n+\t{ tu64, tf32, 175 }, { tu64, tf64, 175 },\n+\n+\t{ tf32, tu8,  175 }, { tf32, ti16, 175 }, { tf32, tu16, 175 },\n+\t{ tf32, ti32, 175 }, { tf32, tu32, 175 }, { tf32, ti64, 175 }, { tf32, tu64, 175 },\n+\t{ tf32, tf32, 175 }, { tf32, tf64, 175 },\n+\n+\t{ tf64, tu8,  175 }, { tf64, ti16, 175 }, { tf64, tu16, 175 },\n+\t{ tf64, ti32, 175 }, { tf64, tu32, 175 }, { tf64, ti64, 175 }, { tf64, tu64, 175 },\n+\t{ tf64, tf32, 175 }, { tf64, tf64, 175 },\n+\n+\t/* value good in u16 and up (41259) */\n+\t{ tu16, tu16, 41259 },\n+\t{ tu16, ti32, 41259 }, { tu16, ti64, 41259 }, { tu16, tu64, 41259 },\n+\t{ tu16, tf32, 41259 }, { tu16, tf64, 41259 },\n+\n+\t{ ti32, tu16, 41259 },\n+\t{ ti32, ti32, 41259 }, { ti32, tu32, 41259 }, { ti32, ti64, 41259 }, { ti32, tu64, 41259 },\n+\t{ ti32, tf32, 41259 }, { ti32, tf64, 41259 },\n+\n+\t{ tu32, tu16, 41259 },\n+\t{ tu32, ti32, 41259 }, { tu32, tu32, 41259 }, { tu32, ti64, 41259 }, { tu32, tu64, 41259 },\n+\t{ tu32, tf32, 41259 }, { tu32, tf64, 41259 },\n+\n+\t{ ti64, tu16, 41259 },\n+\t{ ti64, ti32, 41259 }, { ti64, tu32, 41259 }, { ti64, ti64, 41259 }, { ti64, tu64, 41259 },\n+\t{ ti64, tf32, 41259 }, { ti64, tf64, 41259 },\n+\n+\t{ tu64, tu16, 41259 },\n+\t{ tu64, ti32, 41259 }, { tu64, tu32, 41259 }, { tu64, ti64, 41259 }, { tu64, tu64, 41259 },\n+\t{ tu64, tf32, 41259 }, { tu64, tf64, 41259 },\n+\n+\t{ tf32, tu16, 41259 },\n+\t{ tf32, ti32, 41259 }, { tf32, tu32, 41259 }, { tf32, ti64, 41259 }, { tf32, tu64, 41259 },\n+\t{ tf32, tf32, 41259 }, { tf32, tf64, 41259 },\n+\n+\t{ tf64, tu16, 41259 },\n+\t{ tf64, ti32, 41259 }, { tf64, tu32, 41259 }, { tf64, ti64, 41259 }, { tf64, tu64, 41259 },\n+\t{ tf64, tf32, 41259 }, { tf64, tf64, 41259 },\n+\n+\t/* value good in u32 and up (3758096384) */\n+\t{ tu32, tu32, 3758096384 }, { tu32, ti64, 3758096384 }, { tu32, tu64, 3758096384 },\n+\t{ tu32, tf32, 3758096384 }, { tu32, tf64, 3758096384 },\n+\n+\t{ ti64, tu32, 3758096384 }, { ti64, ti64, 3758096384 }, { ti64, tu64, 3758096384 },\n+\t{ ti64, tf32, 3758096384 }, { ti64, tf64, 3758096384 },\n+\n+\t{ tu64, tu32, 3758096384 }, { tu64, ti64, 3758096384 }, { tu64, tu64, 3758096384 },\n+\t{ tu64, tf32, 3758096384 }, { tu64, tf64, 3758096384 },\n+\n+\t{ tf32, tu32, 3758096384 }, { tf32, ti64, 3758096384 }, { tf32, tu64, 3758096384 },\n+\t{ tf32, tf32, 3758096384 }, { tf32, tf64, 3758096384 },\n+\n+\t{ tf64, tu32, 3758096384 }, { tf64, ti64, 3758096384 }, { tf64, tu64, 3758096384 },\n+\t{ tf64, tf32, 3758096384 }, { tf64, tf64, 3758096384 },\n+\n+\t/* value good in u64 and up (16717361816799281152) */\n+\t{ tu64, tu64, 16717361816799281152 },\n+\t{ tu64, tf32, 16717361816799281152 }, { tu64, tf64, 16717361816799281152 },\n+\n+\t{ tf32, tu64, 16717361816799281152 },\n+\t{ tf32, tf32, 16717361816799281152 }, { tf32, tf64, 16717361816799281152 },\n+\n+\t{ tf64, tu64, 16717361816799281152 },\n+\t{ tf64, tf32, 16717361816799281152 }, { tf64, tf64, 16717361816799281152 },\n+}\n+\n+func main() {\n+\tfor i:=0; i<len(x); i++ {\n+\t\tv := x[i].val\t\t// input value\n+\t\tw := big(0)\t\t// output value\n+\t\tf := x[i].from\t\t// input type\n+\t\tt := x[i].to\t\t// output type\n+\n+\t\ti8  = 0; u8  = 0; i16 = 0; u16 = 0\n+\t\ti32 = 0; u32 = 0; i64 = 0; u64 = 0\n+\t\tf32 = 0; f64 = 0\n+\n+\t\tswitch f*100 + t {\n+\t\tdefault:\n+\t\t\tprintln(\"missing case\", i, v, f, t)\n+\t\t\tw = v\n+\n+\t\tcase ti8*100 + ti8:\n+\t\t\ti8 = int8(v); i8 = int8(i8); w = big(i8)\n+\t\tcase ti8*100 + tu8:\n+\t\t\ti8 = int8(v); u8 = uint8(i8); w = big(u8)\n+\t\tcase ti8*100 + ti16:\n+\t\t\ti8 = int8(v); i16 = int16(i8); w = big(i16)\n+\t\tcase ti8*100 + tu16:\n+\t\t\ti8 = int8(v); u16 = uint16(i8); w = big(u16)\n+\t\tcase ti8*100 + ti32:\n+\t\t\ti8 = int8(v); i32 = int32(i8); w = big(i32)\n+\t\tcase ti8*100 + tu32:\n+\t\t\ti8 = int8(v); u32 = uint32(i8); w = big(u32)\n+\t\tcase ti8*100 + ti64:\n+\t\t\ti8 = int8(v); i64 = int64(i8); w = big(i64)\n+\t\tcase ti8*100 + tu64:\n+\t\t\ti8 = int8(v); u64 = uint64(i8); w = big(u64)\n+\t\tcase ti8*100 + tf32:\n+\t\t\ti8 = int8(v); f32 = float32(i8); w = big(f32)\n+\t\tcase ti8*100 + tf64:\n+\t\t\ti8 = int8(v); f64 = float64(i8); w = big(f64)\n+\n+\t\tcase tu8*100 + ti8:\n+\t\t\tu8 = uint8(v); i8 = int8(u8); w = big(i8)\n+\t\tcase tu8*100 + tu8:\n+\t\t\tu8 = uint8(v); u8 = uint8(u8); w = big(u8)\n+\t\tcase tu8*100 + ti16:\n+\t\t\tu8 = uint8(v); i16 = int16(u8); w = big(i16)\n+\t\tcase tu8*100 + tu16:\n+\t\t\tu8 = uint8(v); u16 = uint16(u8); w = big(u16)\n+\t\tcase tu8*100 + ti32:\n+\t\t\tu8 = uint8(v); i32 = int32(u8); w = big(i32)\n+\t\tcase tu8*100 + tu32:\n+\t\t\tu8 = uint8(v); u32 = uint32(u8); w = big(u32)\n+\t\tcase tu8*100 + ti64:\n+\t\t\tu8 = uint8(v); i64 = int64(u8); w = big(i64)\n+\t\tcase tu8*100 + tu64:\n+\t\t\tu8 = uint8(v); u64 = uint64(u8); w = big(u64)\n+\t\tcase tu8*100 + tf32:\n+\t\t\tu8 = uint8(v); f32 = float32(u8); w = big(f32)\n+\t\tcase tu8*100 + tf64:\n+\t\t\tu8 = uint8(v); f64 = float64(u8); w = big(f64)\n+\n+\t\tcase ti16*100 + ti8:\n+\t\t\ti16 = int16(v); i8 = int8(i16); w = big(i8)\n+\t\tcase ti16*100 + tu8:\n+\t\t\ti16 = int16(v); u8 = uint8(i16); w = big(u8)\n+\t\tcase ti16*100 + ti16:\n+\t\t\ti16 = int16(v); i16 = int16(i16); w = big(i16)\n+\t\tcase ti16*100 + tu16:\n+\t\t\ti16 = int16(v); u16 = uint16(i16); w = big(u16)\n+\t\tcase ti16*100 + ti32:\n+\t\t\ti16 = int16(v); i32 = int32(i16); w = big(i32)\n+\t\tcase ti16*100 + tu32:\n+\t\t\ti16 = int16(v); u32 = uint32(i16); w = big(u32)\n+\t\tcase ti16*100 + ti64:\n+\t\t\ti16 = int16(v); i64 = int64(i16); w = big(i64)\n+\t\tcase ti16*100 + tu64:\n+\t\t\ti16 = int16(v); u64 = uint64(i16); w = big(u64)\n+\t\tcase ti16*100 + tf32:\n+\t\t\ti16 = int16(v); f32 = float32(i16); w = big(f32)\n+\t\tcase ti16*100 + tf64:\n+\t\t\ti16 = int16(v); f64 = float64(i16); w = big(f64)\n+\n+\t\tcase tu16*100 + ti8:\n+\t\t\tu16 = uint16(v); i8 = int8(u16); w = big(i8)\n+\t\tcase tu16*100 + tu8:\n+\t\t\tu16 = uint16(v); u8 = uint8(u16); w = big(u8)\n+\t\tcase tu16*100 + ti16:\n+\t\t\tu16 = uint16(v); i16 = int16(u16); w = big(i16)\n+\t\tcase tu16*100 + tu16:\n+\t\t\tu16 = uint16(v); u16 = uint16(u16); w = big(u16)\n+\t\tcase tu16*100 + ti32:\n+\t\t\tu16 = uint16(v); i32 = int32(u16); w = big(i32)\n+\t\tcase tu16*100 + tu32:\n+\t\t\tu16 = uint16(v); u32 = uint32(u16); w = big(u32)\n+\t\tcase tu16*100 + ti64:\n+\t\t\tu16 = uint16(v); i64 = int64(u16); w = big(i64)\n+\t\tcase tu16*100 + tu64:\n+\t\t\tu16 = uint16(v); u64 = uint64(u16); w = big(u64)\n+\t\tcase tu16*100 + tf32:\n+\t\t\tu16 = uint16(v); f32 = float32(u16); w = big(f32)\n+\t\tcase tu16*100 + tf64:\n+\t\t\tu16 = uint16(v); f64 = float64(u16); w = big(f64)\n+\n+\t\tcase ti32*100 + ti8:\n+\t\t\ti32 = int32(v); i8 = int8(i32); w = big(i8)\n+\t\tcase ti32*100 + tu8:\n+\t\t\ti32 = int32(v); u8 = uint8(i32); w = big(u8)\n+\t\tcase ti32*100 + ti16:\n+\t\t\ti32 = int32(v); i16 = int16(i32); w = big(i16)\n+\t\tcase ti32*100 + tu16:\n+\t\t\ti32 = int32(v); u16 = uint16(i32); w = big(u16)\n+\t\tcase ti32*100 + ti32:\n+\t\t\ti32 = int32(v); i32 = int32(i32); w = big(i32)\n+\t\tcase ti32*100 + tu32:\n+\t\t\ti32 = int32(v); u32 = uint32(i32); w = big(u32)\n+\t\tcase ti32*100 + ti64:\n+\t\t\ti32 = int32(v); i64 = int64(i32); w = big(i64)\n+\t\tcase ti32*100 + tu64:\n+\t\t\ti32 = int32(v); u64 = uint64(i32); w = big(u64)\n+\t\tcase ti32*100 + tf32:\n+\t\t\ti32 = int32(v); f32 = float32(i32); w = big(f32)\n+\t\tcase ti32*100 + tf64:\n+\t\t\ti32 = int32(v); f64 = float64(i32); w = big(f64)\n+\n+\t\tcase tu32*100 + ti8:\n+\t\t\tu32 = uint32(v); i8 = int8(u32); w = big(i8)\n+\t\tcase tu32*100 + tu8:\n+\t\t\tu32 = uint32(v); u8 = uint8(u32); w = big(u8)\n+\t\tcase tu32*100 + ti16:\n+\t\t\tu32 = uint32(v); i16 = int16(u32); w = big(i16)\n+\t\tcase tu32*100 + tu16:\n+\t\t\tu32 = uint32(v); u16 = uint16(u32); w = big(u16)\n+\t\tcase tu32*100 + ti32:\n+\t\t\tu32 = uint32(v); i32 = int32(u32); w = big(i32)\n+\t\tcase tu32*100 + tu32:\n+\t\t\tu32 = uint32(v); u32 = uint32(u32); w = big(u32)\n+\t\tcase tu32*100 + ti64:\n+\t\t\tu32 = uint32(v); i64 = int64(u32); w = big(i64)\n+\t\tcase tu32*100 + tu64:\n+\t\t\tu32 = uint32(v); u64 = uint64(u32); w = big(u64)\n+\t\tcase tu32*100 + tf32:\n+\t\t\tu32 = uint32(v); f32 = float32(u32); w = big(f32)\n+\t\tcase tu32*100 + tf64:\n+\t\t\tu32 = uint32(v); f64 = float64(u32); w = big(f64)\n+\n+\t\tcase ti64*100 + ti8:\n+\t\t\ti64 = int64(v); i8 = int8(i64); w = big(i8)\n+\t\tcase ti64*100 + tu8:\n+\t\t\ti64 = int64(v); u8 = uint8(i64); w = big(u8)\n+\t\tcase ti64*100 + ti16:\n+\t\t\ti64 = int64(v); i16 = int16(i64); w = big(i16)\n+\t\tcase ti64*100 + tu16:\n+\t\t\ti64 = int64(v); u16 = uint16(i64); w = big(u16)\n+\t\tcase ti64*100 + ti32:\n+\t\t\ti64 = int64(v); i32 = int32(i64); w = big(i32)\n+\t\tcase ti64*100 + tu32:\n+\t\t\ti64 = int64(v); u32 = uint32(i64); w = big(u32)\n+\t\tcase ti64*100 + ti64:\n+\t\t\ti64 = int64(v); i64 = int64(i64); w = big(i64)\n+\t\tcase ti64*100 + tu64:\n+\t\t\ti64 = int64(v); u64 = uint64(i64); w = big(u64)\n+\t\tcase ti64*100 + tf32:\n+\t\t\ti64 = int64(v); f32 = float32(i64); w = big(f32)\n+\t\tcase ti64*100 + tf64:\n+\t\t\ti64 = int64(v); f64 = float64(i64); w = big(f64)\n+\n+\t\tcase tu64*100 + ti8:\n+\t\t\tu64 = uint64(v); i8 = int8(u64); w = big(i8)\n+\t\tcase tu64*100 + tu8:\n+\t\t\tu64 = uint64(v); u8 = uint8(u64); w = big(u8)\n+\t\tcase tu64*100 + ti16:\n+\t\t\tu64 = uint64(v); i16 = int16(u64); w = big(i16)\n+\t\tcase tu64*100 + tu16:\n+\t\t\tu64 = uint64(v); u16 = uint16(u64); w = big(u16)\n+\t\tcase tu64*100 + ti32:\n+\t\t\tu64 = uint64(v); i32 = int32(u64); w = big(i32)\n+\t\tcase tu64*100 + tu32:\n+\t\t\tu64 = uint64(v); u32 = uint32(u64); w = big(u32)\n+\t\tcase tu64*100 + ti64:\n+\t\t\tu64 = uint64(v); i64 = int64(u64); w = big(i64)\n+\t\tcase tu64*100 + tu64:\n+\t\t\tu64 = uint64(v); u64 = uint64(u64); w = big(u64)\n+\t\tcase tu64*100 + tf32:\n+\t\t\tu64 = uint64(v); f32 = float32(u64); w = big(f32)\n+\t\tcase tu64*100 + tf64:\n+\t\t\tu64 = uint64(v); f64 = float64(u64); w = big(f64)\n+\n+\t\tcase tf32*100 + ti8:\n+\t\t\tf32 = float32(v); i8 = int8(f32); w = big(i8)\n+\t\tcase tf32*100 + tu8:\n+\t\t\tf32 = float32(v); u8 = uint8(f32); w = big(u8)\n+\t\tcase tf32*100 + ti16:\n+\t\t\tf32 = float32(v); i16 = int16(f32); w = big(i16)\n+\t\tcase tf32*100 + tu16:\n+\t\t\tf32 = float32(v); u16 = uint16(f32); w = big(u16)\n+\t\tcase tf32*100 + ti32:\n+\t\t\tf32 = float32(v); i32 = int32(f32); w = big(i32)\n+\t\tcase tf32*100 + tu32:\n+\t\t\tf32 = float32(v); u32 = uint32(f32); w = big(u32)\n+\t\tcase tf32*100 + ti64:\n+\t\t\tf32 = float32(v); i64 = int64(f32); w = big(i64)\n+\t\tcase tf32*100 + tu64:\n+\t\t\tf32 = float32(v); u64 = uint64(f32); w = big(u64)\n+\t\tcase tf32*100 + tf32:\n+\t\t\tf32 = float32(v); f32 = float32(f32); w = big(f32)\n+\t\tcase tf32*100 + tf64:\n+\t\t\tf32 = float32(v); f64 = float64(f32); w = big(f64)\n+\n+\t\tcase tf64*100 + ti8:\n+\t\t\tf64 = float64(v); i8 = int8(f64); w = big(i8)\n+\t\tcase tf64*100 + tu8:\n+\t\t\tf64 = float64(v); u8 = uint8(f64); w = big(u8)\n+\t\tcase tf64*100 + ti16:\n+\t\t\tf64 = float64(v); i16 = int16(f64); w = big(i16)\n+\t\tcase tf64*100 + tu16:\n+\t\t\tf64 = float64(v); u16 = uint16(f64); w = big(u16)\n+\t\tcase tf64*100 + ti32:\n+\t\t\tf64 = float64(v); i32 = int32(f64); w = big(i32)\n+\t\tcase tf64*100 + tu32:\n+\t\t\tf64 = float64(v); u32 = uint32(f64); w = big(u32)\n+\t\tcase tf64*100 + ti64:\n+\t\t\tf64 = float64(v); i64 = int64(f64); w = big(i64)\n+\t\tcase tf64*100 + tu64:\n+\t\t\tf64 = float64(v); u64 = uint64(f64); w = big(u64)\n+\t\tcase tf64*100 + tf32:\n+\t\t\tf64 = float64(v); f32 = float32(f64); w = big(f32)\n+\t\tcase tf64*100 + tf64:\n+\t\t\tf64 = float64(v); f64 = float64(f64); w = big(f64)\n+\t\t}\n+\t\tif v != w { println(i, v, w, f, t) }\n+\t}\n+}"}, {"sha": "b36e93ecd66493ef724b663bb051ac416a6b7458", "filename": "gcc/testsuite/go.test/test/ken/cplx2.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx2.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -28,13 +28,13 @@ const (\n \n func main() {\n \n-\tr := 5 + 0i\n+\tvar r complex64 = 5 + 0i\n \tif r != R {\n \t\tprintln(\"opcode 1\", r, R)\n \t\tpanic(\"fail\")\n \t}\n \n-\ti := 6i\n+\tvar i complex64 = 6i\n \tif i != I {\n \t\tprintln(\"opcode 2\", i, I)\n \t\tpanic(\"fail\")"}, {"sha": "e3d853266e14d8dae1a7121bd293a2dc4a48820f", "filename": "gcc/testsuite/go.test/test/label.go", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Flabel.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Flabel.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Flabel.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,60 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Pass 1 label errors.\n+\n+package main\n+\n+var x int\n+\n+func f() {\n+L1: // ERROR \"label .*L1.* defined and not used\"\n+\tfor {\n+\t}\n+L2: // ERROR \"label .*L2.* defined and not used\"\n+\tselect {\n+\t}\n+L3: // ERROR \"label .*L3.* defined and not used\"\n+\tswitch {\n+\t}\n+L4: // ERROR \"label .*L4.* defined and not used\"\n+\tif true {\n+\t}\n+L5: // ERROR \"label .*L5.* defined and not used\"\n+\tf()\n+L6: // GCCGO_ERROR \"previous\"\n+\tf()\n+L6: // ERROR \"label .*L6.* already defined\"\n+\tf()\n+\tif x == 20 {\n+\t\tgoto L6\n+\t}\n+\n+L7:\n+\tfor {\n+\t\tbreak L7\n+\t}\n+\n+L8:\n+\tfor {\n+\t\tif x == 21 {\n+\t\t\tcontinue L8\n+\t\t}\n+\t}\n+\n+L9:\n+\tswitch {\n+\tcase true:\n+\t\tbreak L9\n+\tdefalt: // ERROR \"label .*defalt.* defined and not used\"\n+\t}\n+\n+L10:\n+\tselect {\n+\tdefault:\n+\t\tbreak L10\n+\t}\n+}"}, {"sha": "656daaeea54e29f16312e128d6c0e390a3c6dcd2", "filename": "gcc/testsuite/go.test/test/label1.go", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Flabel1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Flabel1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Flabel1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,85 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Pass 2 label errors.\n+\n+package main\n+\n+var x int\n+\n+func f() {\n+L1:\n+\tfor {\n+\t\tif x == 0 {\n+\t\t\tbreak L1\n+\t\t}\n+\t\tif x == 1 {\n+\t\t\tcontinue L1\n+\t\t}\n+\t\tgoto L1\n+\t}\n+\n+L2:\n+\tselect {\n+\tdefault:\n+\t\tif x == 0 {\n+\t\t\tbreak L2\n+\t\t}\n+\t\tif x == 1 {\n+\t\t\tcontinue L2 // ERROR \"invalid continue label .*L2\"\n+\t\t}\n+\t\tgoto L2\n+\t}\n+\n+L3:\n+\tswitch {\n+\tcase x > 10:\n+\t\tif x == 11 {\n+\t\t\tbreak L3\n+\t\t}\n+\t\tif x == 12 {\n+\t\t\tcontinue L3 // ERROR \"invalid continue label .*L3\"\n+\t\t}\n+\t\tgoto L3\n+\t}\n+\n+L4:\n+\tif true {\n+\t\tif x == 13 {\n+\t\t\tbreak L4 // ERROR \"invalid break label .*L4\"\n+\t\t}\n+\t\tif x == 14 {\n+\t\t\tcontinue L4 // ERROR \"invalid continue label .*L4\"\n+\t\t}\n+\t\tif x == 15 {\n+\t\t\tgoto L4\n+\t\t}\n+\t}\n+\n+L5:\n+\tf()\n+\tif x == 16 {\n+\t\tbreak L5 // ERROR \"invalid break label .*L5\"\n+\t}\n+\tif x == 17 {\n+\t\tcontinue L5 // ERROR \"invalid continue label .*L5\"\n+\t}\n+\tif x == 18 {\n+\t\tgoto L5\n+\t}\n+\n+\tfor {\n+\t\tif x == 19 {\n+\t\t\tbreak L1 // ERROR \"invalid break label .*L1\"\n+\t\t}\n+\t\tif x == 20 {\n+\t\t\tcontinue L1 // ERROR \"invalid continue label .*L1\"\n+\t\t}\n+\t\tif x == 21 {\n+\t\t\tgoto L1\n+\t\t}\n+\t}\n+}"}, {"sha": "b5a02c6873ebca877c9a264f4aedf272f8910017", "filename": "gcc/testsuite/go.test/test/method.go", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -19,7 +19,7 @@ func (s S) val() int   { return 1 }\n func (s *S1) val() int { return 2 }\n func (i I) val() int   { return 3 }\n func (i *I1) val() int { return 4 }\n-//func (t T) val() int { return 7 }\n+func (t T) val() int   { return 7 }\n func (t *T1) val() int { return 8 }\n \n type Val interface {\n@@ -34,6 +34,8 @@ func main() {\n \tvar i I\n \tvar pi *I1\n \tvar pt *T1\n+\tvar t T\n+\tvar v Val\n \n \tif s.val() != 1 {\n \t\tprintln(\"s.val:\", s.val())\n@@ -75,7 +77,10 @@ func main() {\n \t\tprintln(\"(*I1).val(pi):\", (*I1).val(pi))\n \t\tpanic(\"fail\")\n \t}\n-\t//\tif t.val() != 7 { prinln(\"t.val:\", t.val()); panic(\"fail\") }\n+\tif t.val() != 7 {\n+\t\tprintln(\"t.val:\", t.val())\n+\t\tpanic(\"fail\")\n+\t}\n \tif pt.val() != 8 {\n \t\tprintln(\"pt.val:\", pt.val())\n \t\tpanic(\"fail\")\n@@ -101,11 +106,22 @@ func main() {\n \t\tprintln(\"pi.val:\", val(pi))\n \t\tpanic(\"fail\")\n \t}\n-\t//\tif val(t) != 7 { println(\"t.val:\", val(t)); panic(\"fail\") }\n+\tif val(t) != 7 {\n+\t\tprintln(\"t.val:\", val(t))\n+\t\tpanic(\"fail\")\n+\t}\n \tif val(pt) != 8 {\n \t\tprintln(\"pt.val:\", val(pt))\n \t\tpanic(\"fail\")\n \t}\n \n-\t//\tif Val.val(i) != 3 { println(\"Val.val(i):\", Val.val(i)); panic(\"fail\") }\n+\tif Val.val(i) != 3 {\n+\t\tprintln(\"Val.val(i):\", Val.val(i))\n+\t\tpanic(\"fail\")\n+\t}\n+\tv = i\n+\tif Val.val(v) != 3 {\n+\t\tprintln(\"Val.val(v):\", Val.val(v))\n+\t\tpanic(\"fail\")\n+\t}\n }"}, {"sha": "a72536e7b33da791d64ac328f778ada44d46fc31", "filename": "gcc/testsuite/go.test/test/method2.go", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod2.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -6,9 +6,22 @@\n \n package main\n \n-type T struct {a int}\n+type T struct {\n+\ta int\n+}\n type P *T\n type P1 *T\n \n-func (p P) val() int { return 1 }  // ERROR \"receiver\"\n-func (p *P1) val() int { return 1 }  // ERROR \"receiver\"\n+func (p P) val() int   { return 1 } // ERROR \"receiver\"\n+func (p *P1) val() int { return 1 } // ERROR \"receiver\"\n+\n+type Val interface {\n+\tval() int\n+}\n+\n+var _ = (*Val).val // ERROR \"method\"\n+\n+var v Val\n+var pv = &v\n+\n+var _ = pv.val()\t// ERROR \"method\""}, {"sha": "fa26532c67b49493baffc29cdcfd34a2a5090ddf", "filename": "gcc/testsuite/go.test/test/nilptr/arrayindex.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # do not bother on NaCl\n // $G $D/$F.go && $L $F.$A &&\n //\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n "}, {"sha": "64f46e14d19bc1b685ef9a7d5eae9fe6421136b0", "filename": "gcc/testsuite/go.test/test/nilptr/arrayindex1.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # do not bother on NaCl\n // $G $D/$F.go && $L $F.$A &&\n //\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n "}, {"sha": "03879fb42f7a6e983bd1864eb7a0027ca8fbe032", "filename": "gcc/testsuite/go.test/test/nilptr/arraytoslice.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # do not bother on NaCl\n // $G $D/$F.go && $L $F.$A &&\n //\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n "}, {"sha": "c86070fa4734719332bc9ef9888ff7c004ce682f", "filename": "gcc/testsuite/go.test/test/nilptr/arraytoslice1.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # do not bother on NaCl\n // $G $D/$F.go && $L $F.$A &&\n //\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n "}, {"sha": "68ea44083cb3dd18811f438338ae8c5c24373830", "filename": "gcc/testsuite/go.test/test/nilptr/arraytoslice2.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice2.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # do not bother on NaCl\n // $G $D/$F.go && $L $F.$A &&\n //\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n "}, {"sha": "26ca42773282e5b8155bf603bde3ecff417fdc6f", "filename": "gcc/testsuite/go.test/test/nilptr/slicearray.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fslicearray.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fslicearray.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fslicearray.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # do not bother on NaCl\n // $G $D/$F.go && $L $F.$A &&\n //\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n "}, {"sha": "35196bb68ddd96e7cc941ff6e12ed9ce94dadda0", "filename": "gcc/testsuite/go.test/test/nilptr/structfield.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # do not bother on NaCl\n // $G $D/$F.go && $L $F.$A &&\n //\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n "}, {"sha": "7c7abed1aa0ae3e4f846c9dbe31cb9e78ac4bbe9", "filename": "gcc/testsuite/go.test/test/nilptr/structfield1.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # do not bother on NaCl\n // $G $D/$F.go && $L $F.$A &&\n //\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n "}, {"sha": "02a44f17318279f849f935572053e48e7da371a3", "filename": "gcc/testsuite/go.test/test/nilptr/structfield2.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield2.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # do not bother on NaCl\n // $G $D/$F.go && $L $F.$A &&\n //\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n "}, {"sha": "f3177bafbaa3ecd41a6189329ff90b2e23784675", "filename": "gcc/testsuite/go.test/test/nilptr/structfieldaddr.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfieldaddr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfieldaddr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfieldaddr.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # do not bother on NaCl\n // $G $D/$F.go && $L $F.$A &&\n //\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n "}, {"sha": "9cf51125bcc6f11de4d8cb67abbb8af71a719e3f", "filename": "gcc/testsuite/go.test/test/nul1.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnul1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnul1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnul1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # NaCl runner elides NUL in output\n // [ \"$GORUN\" == \"\" ] || exit 0  # Android runner gets confused by the NUL output \n // $G $D/$F.go && $L $F.$A && ./$A.out >tmp.go &&\n // errchk $G -e tmp.go"}, {"sha": "2aa1df616dcae347f8cb64fef3eb7a3f9a064e9e", "filename": "gcc/testsuite/go.test/test/recover3.go", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frecover3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frecover3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frecover3.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// [ $GOOS != nacl ] || exit 0  # NaCl cannot recover from signals\n // $G $D/$F.go && $L $F.$A && ./$A.out\n \n // Copyright 2010 The Go Authors.  All rights reserved.\n@@ -10,7 +9,6 @@ package main\n import (\n \t\"runtime\"\n \t\"strings\"\n-\t\"syscall\"\n )\n \n var didbug bool\n@@ -44,7 +42,7 @@ func check(name string, f func(), err string) {\n \t\t\treturn\n \t\t}\n \t}()\n-\t\n+\n \tf()\n }\n \n@@ -55,11 +53,8 @@ func main() {\n \tvar q *[10000]int\n \tvar i int\n \n-\t// not catching divide by zero on the arm.  is that even possible?\n-\tif syscall.ARCH != \"arm\" {\n-\t\tcheck(\"int-div-zero\", func() { println(1/x) }, \"integer divide by zero\")\n-\t\tcheck(\"int64-div-zero\", func() { println(1/x64) }, \"integer divide by zero\")\n-\t}\n+\tcheck(\"int-div-zero\", func() { println(1 / x) }, \"integer divide by zero\")\n+\tcheck(\"int64-div-zero\", func() { println(1 / x64) }, \"integer divide by zero\")\n \n \tcheck(\"nil-deref\", func() { println(p[0]) }, \"nil pointer dereference\")\n \tcheck(\"nil-deref-1\", func() { println(p[1]) }, \"nil pointer dereference\")\n@@ -69,11 +64,13 @@ func main() {\n \tvar sl []int\n \tcheck(\"array-bounds\", func() { println(p[i]) }, \"index out of range\")\n \tcheck(\"slice-bounds\", func() { println(sl[i]) }, \"index out of range\")\n-\t\n+\n \tvar inter interface{}\n \tinter = 1\n \tcheck(\"type-concrete\", func() { println(inter.(string)) }, \"int, not string\")\n \tcheck(\"type-interface\", func() { println(inter.(m)) }, \"missing method m\")\n }\n \n-type m interface{ m() }\n+type m interface {\n+\tm()\n+}"}, {"sha": "28d0caa0f687a85b87b40f2a6fa1697727aa0e03", "filename": "gcc/testsuite/go.test/test/run", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -14,7 +14,7 @@ X386)\n \t;;\n Xarm)\n \texport A=5\n-\texport E=${GORUN:-qemu-arm -cpu cortex-a8}\n+\texport E=\"$GORUN\"\n \t;;\n *)\n \techo 1>&2 run: unsupported '$GOARCH'\n@@ -49,15 +49,25 @@ ulimit -c 0\n \n true >pass.out >times.out\n \n+exclude=false\t# exclude nothing\n+golden=golden.out\n+\n+filterout() {\n+\tgrep '^'\"$2\"'$' $1 >/dev/null\n+}\n+\n for dir in . ken chan interface nilptr syntax fixedbugs bugs\n do\n \techo\n \techo '==' $dir'/'\n \tfor i in $(ls $dir/*.go 2>/dev/null)\n-\tdo\n+\tdo (\n+\t\tif $exclude $i; then\n+\t\t\texit 0  # continues for loop\n+\t\tfi\n \t\texport F=$(basename $i .go)\n \t\texport D=$dir\n-\t\tsed '/^\\/\\//!q' $i | sed 's@//@@; $d' |sed 's|./\\$A.out|$E &|' >$RUNFILE\n+\t\tsed '/^\\/\\//!q' $i | sed 's@//@@; $d' |sed 's|./\\$A.out|$E &|g' >$RUNFILE\n \t\tif ! { time -p bash -c \"bash $RUNFILE >$TMP1FILE 2>&1\" ; } 2>$TMP2FILE\n \t\tthen\n \t\t\techo\n@@ -87,7 +97,7 @@ do\n \t\t\techo $i >>pass.out\n \t\tfi\n \t\techo $(awk 'NR==1{print $2}' $TMP2FILE) $D/$F >>times.out\n-\tdone\n+\t) done\n done | # clean up some stack noise\n \tegrep -v '^(r[0-9a-z]+|[cfg]s)  +0x'  |\n \tsed '/tmp.*Bus error/s/.*Bus/Bus/; /tmp.*Trace.BPT/s/.*Trace/Trace/\n@@ -99,12 +109,13 @@ done | # clean up some stack noise\n \t\t/^Trace\\/BPT trap/d\n \t\t/RUNFILE/ s/line 1: *[0-9]*/line 1: PID/\n \t\t/^\\$RUNFILE: line 1: PID Trace\\/breakpoint trap/d\n+\t\t/Fault in NaCl untrusted code/d\n \t\t/Segmentation fault/d\n \t\t/^qemu: uncaught target signal 11 (Segmentation fault) - exiting/d' > run.out\n \n-rm  -f $RUNFILE $TMP1FILE $TMP2FILE *.$A *.a $A.out\n+rm -f $RUNFILE $TMP1FILE $TMP2FILE *.$A *.a $A.out\n diffmsg=\"\"\n-if ! diff golden.out run.out\n+if ! diff $golden run.out\n then\n \tdiffmsg=\"; test output differs\"\n \tfailed=1"}, {"sha": "a62df10ca4b953a5bb93e1e76713c53964078fb0", "filename": "gcc/testsuite/go.test/test/run-arm", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun-arm?ref=3c844a6a13096f126522a0ea58a3e9ba503bd959", "patch": "@@ -1,102 +0,0 @@\n-#!/bin/sh\n-# Copyright 2009 The Go Authors. All rights reserved.\n-# Use of this source code is governed by a BSD-style\n-# license that can be found in the LICENSE file.\n-\n-export E=\"\"\n-case X\"$GOARCH\" in\n-Xamd64)\n-\texport A=6\n-\t;;\n-X386)\n-\texport A=8\n-\t;;\n-Xarm)\n-\texport A=5\n-\texport E=\"${GORUN:-qemu-arm -cpu cortex-a8}\"\n-\t;;\n-*)\n-\techo 1>&2 run: unsupported '$GOARCH'\n-\texit 1\n-esac\n-\n-export G=${A}g\n-export L=${A}l\n-export GOTRACEBACK=0\n-\n-PATH=/bin:/usr/bin:/usr/local/bin:${GOBIN:-$GOROOT/bin}:`pwd`\n-\n-RUNFILE=/tmp/gorun-$$-$USER\n-TMP1FILE=/tmp/gotest1-$$-$USER\n-TMP2FILE=/tmp/gotest2-$$-$USER\n-FAILEDFILE=/tmp/gotest3-$$-$USER\n-\n-# don't run the machine out of memory: limit individual processes to 4GB.\n-# on thresher, 3GB suffices to run the tests; with 2GB, peano fails.\n-ulimit -v 4000000\n-\n-# no core files please\n-ulimit -c 0\n-\n-true >times.out\n-\n-# TODO(kaib): figure out why the GC makes things so utterly slow.\n-export GOGC=off\n-export GOTRACEBACK=0\n-\n-for i in $(cat arm-pass.txt | sed 's/#.*//')\n-do\n-\texport F=$(basename $i .go)\n-\tdir=$(dirname $i)\n-\texport D=$dir\n-\tsed '/^\\/\\//!q' $i | sed 's@//@@; $d' |sed 's|./\\$A.out|$E &|' >$RUNFILE\n-\tif ! { time -p bash -c \"bash $RUNFILE >$TMP1FILE 2>&1\" ; } 2>$TMP2FILE\n-\tthen\n-\t\techo\n-\t\techo \"===========\" $i\n-\t\tcat $TMP1FILE\n-\t\techo >&2 fail: $i\n-\t\ttouch $FAILEDFILE\n-\telif test -s $TMP1FILE\n-\tthen\n-\t\techo\n-\t\techo \"===========\" $i\n-\t\tcat $TMP1FILE\n-\telif [ $dir = \"bugs\" ]\n-\tthen\n-\t\techo $i succeeded with no output.\n-\tfi\n-\techo $(awk 'NR==1{print $2}' $TMP2FILE) $D/$F >>times.out\n-done | # clean up some stack noise\n-\tegrep -v '^(r[0-9a-z]+|[cfg]s)  +0x'  |\n-\tsed '/tmp.*Bus error/s/.*Bus/Bus/; /tmp.*Trace.BPT/s/.*Trace/Trace/\n-\t\ts!'$RUNFILE'!$RUNFILE!g\n-\t\ts/ PC=0x[0-9a-f]*/ PC=xxx/\n-\t\ts/^pc: 0x[0-9a-f]*/pc: xxx/\n-\t\t/^Trace\\/breakpoint trap/d\n-\t\t/^Trace\\/BPT trap/d\n-\t\ts!'$GOROOT'!$GOROOT!g\n-\t\t/Segmentation fault/d\n-\t\t/RUNFILE/ s/line 1: *[0-9]*/line 1: PID/\n-\t\t/^\\$RUNFILE: line 1: PID Trace\\/breakpoint trap/d\n-\t\t/^qemu: uncaught target signal 11 (Segmentation fault) - exiting/d' > run.out\n-\n-failed=0\n-rm  -f $RUNFILE $TMP1FILE $TMP2FILE *.$A $A.out\n-diffmsg=\"\"\n-if ! diff -b golden-arm.out run.out\n-then\n-\tdiffmsg=\"; test output differs\"\n-\tfailed=1\n-fi\n-\n-notinbugs=$(sed '/== bugs/q' run.out | grep -c '^BUG')\n-inbugs=$(sed '1,/== bugs/d' run.out | grep -c '^BUG')\n-\n-echo 2>&1 $inbugs known bugs';' $notinbugs unexpected bugs$diffmsg\n-\n-if [ \"$failed\" != \"0\" ]; then\n-\techo FAILED\n-fi\n-\n-exit $failed"}, {"sha": "1fb2e21bd56cc3cc20467c86b16654be0727de30", "filename": "gcc/testsuite/go.test/test/sigchld.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsigchld.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsigchld.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsigchld.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -1,4 +1,3 @@\n-// if [ $GOOS == nacl ]; then echo survived SIGCHLD; exit 0; fi  # NaCl has no signals.\n // $G $D/$F.go && $L $F.$A && ./$A.out\n \n // Copyright 2009 The Go Authors. All rights reserved."}, {"sha": "1fd57161ff2903aff1bd3b15ff38cff561e8f8a1", "filename": "gcc/testsuite/go.test/test/stack.go", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstack.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstack.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstack.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -30,6 +30,32 @@ func d(t T) {\n \t}\n }\n \n+func f0() {\n+\t// likely to make a new stack for f0,\n+\t// because the call to f1 puts 3000 bytes\n+\t// in our frame.\n+\tf1()\n+}\n+\n+func f1() [3000]byte {\n+\t// likely to make a new stack for f1,\n+\t// because 3000 bytes were used by f0\n+\t// and we need 3000 more for the call\n+\t// to f2.  if the call to morestack in f1\n+\t// does not pass the frame size, the new\n+\t// stack (default size 5k) will not be big\n+\t// enough for the frame, and the morestack\n+\t// check in f2 will die, if we get that far \n+\t// without faulting.\n+\tf2()\n+\treturn [3000]byte{}\n+}\n+\n+func f2() [3000]byte {\n+\t// just take up space\n+\treturn [3000]byte{}\n+}\n+\n var c = make(chan int)\n var t T\n var b = []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n@@ -40,6 +66,7 @@ func recur(n int) {\n \t\tpanic(\"bad []byte -> string\")\n \t}\n \tgo g(c, t)\n+\tf0()\n \ts := <-c\n \tif s != len(t) {\n \t\tprintln(\"bad go\", s)"}, {"sha": "ff3577502f222c7b20ed30c24900054a1f9747a5", "filename": "gcc/testsuite/go.test/test/syntax/chan.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Fchan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Fchan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Fchan.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,17 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type xyz struct {\n+    ch chan\n+} // ERROR \"unexpected .*}.* in channel type\"\n+\n+func Foo(y chan) { // ERROR \"unexpected .*\\).* in channel type\"\n+}\n+\n+func Bar(x chan, y int) { // ERROR \"unexpected comma in channel type\"\n+}"}, {"sha": "9c12e5e6fedac3f4a0e9d32d9b7b2b2e26bd05d3", "filename": "gcc/testsuite/go.test/test/syntax/chan1.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Fchan1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Fchan1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Fchan1.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,17 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var c chan int\n+var v int\n+\n+func main() {\n+\tif c <- v { // ERROR \"send statement.*value.*select\"\n+\t}\n+}\n+\n+var _ = c <- v // ERROR \"send statement.*value.*select\""}, {"sha": "a3b51f0c07b1674937f245c70a2c94fc153da2f1", "filename": "gcc/testsuite/go.test/test/syntax/if.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Fif.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Fif.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Fif.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,18 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func x() {\n+}\n+\n+func main() {\n+\tif {  // ERROR \"missing condition\"\n+\t}\n+\t\n+\tif x(); {  // ERROR \"missing condition\"\n+\t}\n+}"}, {"sha": "47f683cdf2978e90902ef86cb09f1f4b88a1afa0", "filename": "gcc/testsuite/go.test/test/syntax/typesw.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Ftypesw.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8915876911d0ccd86ef397a49779e7352f0563f5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Ftypesw.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Ftypesw.go?ref=8915876911d0ccd86ef397a49779e7352f0563f5", "patch": "@@ -0,0 +1,13 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tswitch main() := interface{}(nil).(type) {\t// ERROR \"invalid variable name\"\n+\tdefault:\n+\t}\n+}"}]}