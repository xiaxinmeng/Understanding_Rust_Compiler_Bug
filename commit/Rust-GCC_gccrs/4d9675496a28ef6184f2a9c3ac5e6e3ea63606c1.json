{"sha": "4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5Njc1NDk2YTI4ZWY2MTg0ZjJhOWMzYWM1ZTZlM2VhNjM2MDZjMQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2012-10-17T20:12:38Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2012-10-17T20:12:38Z"}, "message": "rs6000.opt (rs6000_isa_flags): New flag word to replace target_flags that gives us 63 possible switches.\n\n2012-10-17  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.opt (rs6000_isa_flags): New flag word to\n\treplace target_flags that gives us 63 possible switches.\n\t(x_rs6000_isa_flags): Save area for rs6000_isa_flags.\n\t(x_rs6000_isa_flags_explicit): Save area for\n\trs6000_isa_flags_explicit.\n\t(rs6000_target_flags_explicit): Delete in favor of\n\tx_rs6000_isa_flags_explicit.\n\t(-mpowerpc64): Change all switches that used to be in target_flags\n\tto now be in rs6000_isa_flags.  In using rs6000_isa_flags, the\n\toptions machinary will generate names of the form OPITON_<xxx>\n\tinstead of TARGET_<xxx> and OPTION_MASK_<xxx> instead of\n\tMASK_<xxx>.\n\t(-mpowerpc-gpopt): Likewise.\n\t(-mpowerpc-gfxopt): Likewise.\n\t(-mmfcrf): Likewise.\n\t(-mpopcntb): Likewise.\n\t(-mfprnd): Likewise.\n\t(-mcmpb): Likewise.\n\t(-mmfpgpr): Likewise.\n\t(-maltivec): Likewise.\n\t(-mhard-dfp): Likewise.\n\t(-mmulhw): Likewise.\n\t(-mdlmzb): Likewise.\n\t(-mmultiple): Likewise.\n\t(-mstring): Likewise.\n\t(-msoft-float): Likewise.\n\t(-mhard-float): Likewise.\n\t(-mpopcntd): Likewise.\n\t(-mvsx): Likewise.\n\t(-mno-update): Likewise.\n\t(-mupdate): Likewise.\n\t(-mrecip-precision): Likewise.\n\t(-mminimal-toc): Likewise.\n\t(-misel): Likewise.\n\t* config/rs6000/aix64.opt (-maix64): Likewise.\n\t(-maix32): Likewise.\n\t* config/rs6000/sysv4.opt (-mstrict-align): Likewise.\n\t(-mrelocatable): Likewise.\n\t(-mlittle-endian): Likewise.\n\t(-mlittle): Likewise.\n\t(-mbig-endian): LIkewise.\n\t(-mbig): Likewise.\n\t(-meabi): Likewise.\n\t(-m64): Likewise.\n\t(-m32): Likewise.\n\t* config/rs6000/darwin.opt (-m64): Likewise.\n\t(-m32): Likewise.\n\n\t* config/rs6000/rs6000-cpus.def (ISA_2_1_MASKS): Move the various\n\tmasks used in rs6000.c here, since they are more logically in this\n\tfile.  Convert from being enums to just #defines, since the types\n\tof these masks is now HOST_WIDE_INT instead of int.  For\n\tPOWERPC_MASKS, add MASK_SOFT_FLOAT, since the only use case or'ed\n\tin the mask.  Change the use in rs6000.c not to do the OR of\n\tMASK_SOFT_FLOAT.\n\t(ISA_2_1_MASKS): Likewise.\n\t(ISA_2_2_MASKS): Likewise.\n\t(ISA_2_4_MASKS): Likewise.\n\t(ISA_2_5_MASKS_EMBEDDED): Likewise.\n\t(ISA_2_5_MASKS_SERVER): Likewise.\n\t(POWERPC_7400_MASK): Likewise.\n\t(POWERPC_MASKS): Likewise.\n\t* config/rs6000/rs6000.c (ISA_2_1_MASKS): Likewise.\n\t(ISA_2_1_MASKS): Likewise.\n\t(ISA_2_2_MASKS): Likewise.\n\t(ISA_2_4_MASKS): Likewise.\n\t(ISA_2_5_MASKS_EMBEDDED): Likewise.\n\t(ISA_2_5_MASKS_SERVER): Likewise.\n\t(POWERPC_7400_MASK): Likewise.\n\t(POWERPC_MASKS): Likewise.\n\t(rs6000_option_override_internal): Likewise.\n\n\t* config/rs6000/rs6000.c (darwin_rs6000_override_options): Change\n\tall uses of target_flags to rs6000_isa_flags.  Change all uses of\n\ttarget_flags_explicit to rs6000_isa_flags_explicit.  Change the\n\tuse of MASK_<xxx> to OPTION_MASK_<xxx> that options.h defines when\n\twe use a secondary flags word.  Save/restore/print the new flags\n\tword when switching contexts with different target attributes.\n\t(rs6000_option_override_internal): Likewise.\n\t(rs6000_darwin_file_start): Likewise.\n\t(rs6000_opt_masks): Likewise.\n\t(rs6000_inner_target_options): Likewise.\n\t(rs6000_pragma_target_parse): Likewise.\n\t(rs6000_set_current_function): Likewise.\n\t(rs6000_function_specific_save): Likewise.\n\t(rs6000_function_specific_restore): Likewise.\n\t(rs6000_function_specific_print): Likewise.\n\t(rs6000_can_inline_p): Likewise.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros):\n\tLikewise.\n\t(rs6000_cpu_cpp_builtins): Likewise.\n\t* common/config/rs6000/rs6000-driver.c (rs6000_handle_option):\n\tLikewise.\n\n\t* config/rs6000/rs6000.h (MASK_ALTIVEC): In moving to using\n\tVar(...) for all of the isa switches, the options machinery now\n\tuses OPTION_MASK_<xxx> instead of MASK_<xxx> for the mask name.\n\tUse #define to map the old name into the new name.  For switches\n\tthat are defined in aix64.opt, sysv4.opt, and darwin.opt, only do\n\tthe definition if those switches were defined.\n\t(MASK_ALTIVEC): Likewise.\n\t(MASK_CMPB): Likewise.\n\t(MASK_DFP): Likewise.\n\t(MASK_DLMZB): Likewise.\n\t(MASK_EABI): Likewise.\n\t(MASK_FPRND): Likewise.\n\t(MASK_HARD_FLOAT): Likewise.\n\t(MASK_ISEL): Likewise.\n\t(MASK_MFCRF): Likewise.\n\t(MASK_MFPGPR): Likewise.\n\t(MASK_MULHW): Likewise.\n\t(MASK_MULTIPLE): Likewise.\n\t(MASK_NO_UPDATE): Likewise.\n\t(MASK_POPCNTB): Likewise.\n\t(MASK_POPCNTD): Likewise.\n\t(MASK_PPC_GFXOPT): Likewise.\n\t(MASK_PPC_GPOPT): Likewise.\n\t(MASK_RECIP_PRECISION): Likewise.\n\t(MASK_SOFT_FLOAT): Likewise.\n\t(MASK_STRICT_ALIGN): Likewise.\n\t(MASK_STRING): Likewise.\n\t(MASK_UPDATE): Likewise.\n\t(MASK_VSX): Likewise.\n\t(MASK_POWERPC64): Likewise.\n\t(MASK_64BIT): Likewise.\n\t(MASK_RELOCATABLE): Likewise.\n\t(MASK_LITTLE_ENDIAN): Likewise.\n\t(MASK_MINIMAL_TOC): Likewise.\n\t(MASK_REGNAMES): Likewise.\n\t(MASK_PROTOTYPE): Likewise.\n\t(rs6000_isa_flags_explicit): Define in terms of the\n\tglobal_options_set structure.\n\n\t* gcc/config/rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS):\n\tChange use of target_flags to rs6000_isa_flags,\n\ttarget_flags_explicit to rs6000_isa_flags_explicit, and MASK_<xxx>\n\tto OPTION_MASK_<xxx>.\n\t* gcc/config/rs6000/aix51.h (SUBTARGET_OVERRIDE_OPTIONS):\n\tLikewise.\n\t* gcc/config/rs6000/aix52.h (SUBTARGET_OVERRIDE_OPTIONS):\n\tLikewise.\n\t* gcc/config/rs6000/aix53.h (SUBTARGET_OVERRIDE_OPTIONS):\n\tLikewise.\n\t* gcc/config/rs6000/aix61.h (SUBTARGET_OVERRIDE_OPTIONS):\n\tLikewise.\n\t* gcc/config/rs6000/freebsd64.h (RELOCATABLE_NEEDS_FIXUP):\n\tLikewise.\n\t(SUBSUBTARGET_OVERRIDE_OPTIONS): Likewise.\n\t* gcc/config/rs6000/freebsd.h (RELOCATABLE_NEEDS_FIXUP):\n\tLikewise.\n\t* gcc/config/rs6000/linux64.h (RELOCATABLE_NEEDS_FIXUP):\n\tLikewise.\n\t(SUBSUBTARGET_OVERRIDE_OPTIONS): Likewise.\n\t(OPTION_LITTLE_ENDIAN): Likewise.\n\t(OPTION_RELOCATABLE): Likewise.\n\t(OPTION_EABI): Likewise.\n\t(OPTION_PROTOTYPE): Likewise.\n\t* gcc/config/rs6000/linux.h (RELOCATABLE_NEEDS_FIXUP): Likewise.\n\t* gcc/config/rs6000/option-defaults.h (OPTION_MASK_64BIT):\n\tLikewise.\n\t(OPT_ARCH32): Likewise.\n\t(OPT_ARCH64): Likewise.\n\t* gcc/config/rs6000/sysv4.h (TARGET_TOC): Likewise.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n\t(SUBSUBTARGET_OVERRIDE_OPTIONS): Likewise.\n\t(TARGET_OS_SYSV_CPP_BUILTINS): Likewise.\n\n\t* config/rs6000/t-rs6000 (rs6000.o): Add rs6000-cpus.def as a\n\tdependency.\n\nFrom-SVN: r192545", "tree": {"sha": "07147aedf4e9447b2611c23161ddb9a069179176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07147aedf4e9447b2611c23161ddb9a069179176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/comments", "author": null, "committer": null, "parents": [{"sha": "bf45c4c0c13c77791f8ec5325706baef32ce6644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf45c4c0c13c77791f8ec5325706baef32ce6644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf45c4c0c13c77791f8ec5325706baef32ce6644"}], "stats": {"total": 794, "additions": 532, "deletions": 262}, "files": [{"sha": "6571fdcd1839fe5e1173c94e10b2cd9b9f1283e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -1,3 +1,175 @@\n+2012-10-17  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.opt (rs6000_isa_flags): New flag word to\n+\treplace target_flags that gives us 63 possible switches.\n+\t(x_rs6000_isa_flags): Save area for rs6000_isa_flags.\n+\t(x_rs6000_isa_flags_explicit): Save area for\n+\trs6000_isa_flags_explicit.\n+\t(rs6000_target_flags_explicit): Delete in favor of\n+\tx_rs6000_isa_flags_explicit.\n+\t(-mpowerpc64): Change all switches that used to be in target_flags\n+\tto now be in rs6000_isa_flags.  In using rs6000_isa_flags, the\n+\toptions machinary will generate names of the form OPITON_<xxx>\n+\tinstead of TARGET_<xxx> and OPTION_MASK_<xxx> instead of\n+\tMASK_<xxx>.\n+\t(-mpowerpc-gpopt): Likewise.\n+\t(-mpowerpc-gfxopt): Likewise.\n+\t(-mmfcrf): Likewise.\n+\t(-mpopcntb): Likewise.\n+\t(-mfprnd): Likewise.\n+\t(-mcmpb): Likewise.\n+\t(-mmfpgpr): Likewise.\n+\t(-maltivec): Likewise.\n+\t(-mhard-dfp): Likewise.\n+\t(-mmulhw): Likewise.\n+\t(-mdlmzb): Likewise.\n+\t(-mmultiple): Likewise.\n+\t(-mstring): Likewise.\n+\t(-msoft-float): Likewise.\n+\t(-mhard-float): Likewise.\n+\t(-mpopcntd): Likewise.\n+\t(-mvsx): Likewise.\n+\t(-mno-update): Likewise.\n+\t(-mupdate): Likewise.\n+\t(-mrecip-precision): Likewise.\n+\t(-mminimal-toc): Likewise.\n+\t(-misel): Likewise.\n+\t* config/rs6000/aix64.opt (-maix64): Likewise.\n+\t(-maix32): Likewise.\n+\t* config/rs6000/sysv4.opt (-mstrict-align): Likewise.\n+\t(-mrelocatable): Likewise.\n+\t(-mlittle-endian): Likewise.\n+\t(-mlittle): Likewise.\n+\t(-mbig-endian): LIkewise.\n+\t(-mbig): Likewise.\n+\t(-meabi): Likewise.\n+\t(-m64): Likewise.\n+\t(-m32): Likewise.\n+\t* config/rs6000/darwin.opt (-m64): Likewise.\n+\t(-m32): Likewise.\n+\n+\t* config/rs6000/rs6000-cpus.def (ISA_2_1_MASKS): Move the various\n+\tmasks used in rs6000.c here, since they are more logically in this\n+\tfile.  Convert from being enums to just #defines, since the types\n+\tof these masks is now HOST_WIDE_INT instead of int.  For\n+\tPOWERPC_MASKS, add MASK_SOFT_FLOAT, since the only use case or'ed\n+\tin the mask.  Change the use in rs6000.c not to do the OR of\n+\tMASK_SOFT_FLOAT.\n+\t(ISA_2_1_MASKS): Likewise.\n+\t(ISA_2_2_MASKS): Likewise.\n+\t(ISA_2_4_MASKS): Likewise.\n+\t(ISA_2_5_MASKS_EMBEDDED): Likewise.\n+\t(ISA_2_5_MASKS_SERVER): Likewise.\n+\t(POWERPC_7400_MASK): Likewise.\n+\t(POWERPC_MASKS): Likewise.\n+\t* config/rs6000/rs6000.c (ISA_2_1_MASKS): Likewise.\n+\t(ISA_2_1_MASKS): Likewise.\n+\t(ISA_2_2_MASKS): Likewise.\n+\t(ISA_2_4_MASKS): Likewise.\n+\t(ISA_2_5_MASKS_EMBEDDED): Likewise.\n+\t(ISA_2_5_MASKS_SERVER): Likewise.\n+\t(POWERPC_7400_MASK): Likewise.\n+\t(POWERPC_MASKS): Likewise.\n+\t(rs6000_option_override_internal): Likewise.\n+\n+\t* config/rs6000/rs6000.c (darwin_rs6000_override_options): Change\n+\tall uses of target_flags to rs6000_isa_flags.  Change all uses of\n+\ttarget_flags_explicit to rs6000_isa_flags_explicit.  Change the\n+\tuse of MASK_<xxx> to OPTION_MASK_<xxx> that options.h defines when\n+\twe use a secondary flags word.  Save/restore/print the new flags\n+\tword when switching contexts with different target attributes.\n+\t(rs6000_option_override_internal): Likewise.\n+\t(rs6000_darwin_file_start): Likewise.\n+\t(rs6000_opt_masks): Likewise.\n+\t(rs6000_inner_target_options): Likewise.\n+\t(rs6000_pragma_target_parse): Likewise.\n+\t(rs6000_set_current_function): Likewise.\n+\t(rs6000_function_specific_save): Likewise.\n+\t(rs6000_function_specific_restore): Likewise.\n+\t(rs6000_function_specific_print): Likewise.\n+\t(rs6000_can_inline_p): Likewise.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros):\n+\tLikewise.\n+\t(rs6000_cpu_cpp_builtins): Likewise.\n+\t* common/config/rs6000/rs6000-driver.c (rs6000_handle_option):\n+\tLikewise.\n+\n+\t* config/rs6000/rs6000.h (MASK_ALTIVEC): In moving to using\n+\tVar(...) for all of the isa switches, the options machinery now\n+\tuses OPTION_MASK_<xxx> instead of MASK_<xxx> for the mask name.\n+\tUse #define to map the old name into the new name.  For switches\n+\tthat are defined in aix64.opt, sysv4.opt, and darwin.opt, only do\n+\tthe definition if those switches were defined.\n+\t(MASK_ALTIVEC): Likewise.\n+\t(MASK_CMPB): Likewise.\n+\t(MASK_DFP): Likewise.\n+\t(MASK_DLMZB): Likewise.\n+\t(MASK_EABI): Likewise.\n+\t(MASK_FPRND): Likewise.\n+\t(MASK_HARD_FLOAT): Likewise.\n+\t(MASK_ISEL): Likewise.\n+\t(MASK_MFCRF): Likewise.\n+\t(MASK_MFPGPR): Likewise.\n+\t(MASK_MULHW): Likewise.\n+\t(MASK_MULTIPLE): Likewise.\n+\t(MASK_NO_UPDATE): Likewise.\n+\t(MASK_POPCNTB): Likewise.\n+\t(MASK_POPCNTD): Likewise.\n+\t(MASK_PPC_GFXOPT): Likewise.\n+\t(MASK_PPC_GPOPT): Likewise.\n+\t(MASK_RECIP_PRECISION): Likewise.\n+\t(MASK_SOFT_FLOAT): Likewise.\n+\t(MASK_STRICT_ALIGN): Likewise.\n+\t(MASK_STRING): Likewise.\n+\t(MASK_UPDATE): Likewise.\n+\t(MASK_VSX): Likewise.\n+\t(MASK_POWERPC64): Likewise.\n+\t(MASK_64BIT): Likewise.\n+\t(MASK_RELOCATABLE): Likewise.\n+\t(MASK_LITTLE_ENDIAN): Likewise.\n+\t(MASK_MINIMAL_TOC): Likewise.\n+\t(MASK_REGNAMES): Likewise.\n+\t(MASK_PROTOTYPE): Likewise.\n+\t(rs6000_isa_flags_explicit): Define in terms of the\n+\tglobal_options_set structure.\n+\n+\t* gcc/config/rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS):\n+\tChange use of target_flags to rs6000_isa_flags,\n+\ttarget_flags_explicit to rs6000_isa_flags_explicit, and MASK_<xxx>\n+\tto OPTION_MASK_<xxx>.\n+\t* gcc/config/rs6000/aix51.h (SUBTARGET_OVERRIDE_OPTIONS):\n+\tLikewise.\n+\t* gcc/config/rs6000/aix52.h (SUBTARGET_OVERRIDE_OPTIONS):\n+\tLikewise.\n+\t* gcc/config/rs6000/aix53.h (SUBTARGET_OVERRIDE_OPTIONS):\n+\tLikewise.\n+\t* gcc/config/rs6000/aix61.h (SUBTARGET_OVERRIDE_OPTIONS):\n+\tLikewise.\n+\t* gcc/config/rs6000/freebsd64.h (RELOCATABLE_NEEDS_FIXUP):\n+\tLikewise.\n+\t(SUBSUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t* gcc/config/rs6000/freebsd.h (RELOCATABLE_NEEDS_FIXUP):\n+\tLikewise.\n+\t* gcc/config/rs6000/linux64.h (RELOCATABLE_NEEDS_FIXUP):\n+\tLikewise.\n+\t(SUBSUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t(OPTION_LITTLE_ENDIAN): Likewise.\n+\t(OPTION_RELOCATABLE): Likewise.\n+\t(OPTION_EABI): Likewise.\n+\t(OPTION_PROTOTYPE): Likewise.\n+\t* gcc/config/rs6000/linux.h (RELOCATABLE_NEEDS_FIXUP): Likewise.\n+\t* gcc/config/rs6000/option-defaults.h (OPTION_MASK_64BIT):\n+\tLikewise.\n+\t(OPT_ARCH32): Likewise.\n+\t(OPT_ARCH64): Likewise.\n+\t* gcc/config/rs6000/sysv4.h (TARGET_TOC): Likewise.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t(SUBSUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t(TARGET_OS_SYSV_CPP_BUILTINS): Likewise.\n+\n+\t* config/rs6000/t-rs6000 (rs6000.o): Add rs6000-cpus.def as a\n+\tdependency.\n+\n 2012-10-17  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgloopmanip.c (copy_loop_info): New function."}, {"sha": "c1764bc93ac6900f145ab43615ef55e2943627ac", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -82,23 +82,23 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n   switch (code)\n     {\n     case OPT_mfull_toc:\n-      opts->x_target_flags &= ~MASK_MINIMAL_TOC;\n+      opts->x_rs6000_isa_flags &= ~OPTION_MASK_MINIMAL_TOC;\n       opts->x_TARGET_NO_FP_IN_TOC = 0;\n       opts->x_TARGET_NO_SUM_IN_TOC = 0;\n-      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n #ifdef TARGET_USES_SYSV4_OPT\n       /* Note, V.4 no longer uses a normal TOC, so make -mfull-toc, be\n \t just the same as -mminimal-toc.  */\n-      opts->x_target_flags |= MASK_MINIMAL_TOC;\n-      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n+      opts->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n #endif\n       break;\n \n #ifdef TARGET_USES_SYSV4_OPT\n     case OPT_mtoc:\n       /* Make -mtoc behave like -mminimal-toc.  */\n-      opts->x_target_flags |= MASK_MINIMAL_TOC;\n-      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n+      opts->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n       break;\n #endif\n \n@@ -107,18 +107,19 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n #else\n     case OPT_m64:\n #endif\n-      opts->x_target_flags |= MASK_POWERPC64;\n-      opts->x_target_flags |= ~opts_set->x_target_flags & MASK_PPC_GFXOPT;\n-      opts_set->x_target_flags |= MASK_POWERPC64;\n+      opts->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n+      opts->x_rs6000_isa_flags |= (~opts_set->x_rs6000_isa_flags\n+\t\t\t\t   & OPTION_MASK_PPC_GFXOPT);\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n       break;\n \n #ifdef TARGET_USES_AIX64_OPT\n     case OPT_maix32:\n #else\n     case OPT_m32:\n #endif\n-      opts->x_target_flags &= ~MASK_POWERPC64;\n-      opts_set->x_target_flags |= MASK_POWERPC64;\n+      opts->x_rs6000_isa_flags &= ~OPTION_MASK_POWERPC64;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n       break;\n \n     case OPT_mminimal_toc:\n@@ -181,23 +182,25 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n     case OPT_mrelocatable:\n       if (value == 1)\n \t{\n-\t  opts->x_target_flags |= MASK_MINIMAL_TOC;\n-\t  opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n+\t  opts->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n+\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n \t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n \t}\n       break;\n \n     case OPT_mrelocatable_lib:\n       if (value == 1)\n \t{\n-\t  opts->x_target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\n-\t  opts_set->x_target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\n+\t  opts->x_rs6000_isa_flags |= (OPTION_MASK_RELOCATABLE\n+\t\t\t\t       | OPTION_MASK_MINIMAL_TOC);\n+\t  opts_set->x_rs6000_isa_flags |= (OPTION_MASK_RELOCATABLE\n+\t\t\t\t\t   | OPTION_MASK_MINIMAL_TOC);\n \t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n \t}\n       else\n \t{\n-\t  opts->x_target_flags &= ~MASK_RELOCATABLE;\n-\t  opts_set->x_target_flags |= MASK_RELOCATABLE;\n+\t  opts->x_rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\n+\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_RELOCATABLE;\n \t}\n       break;\n #endif\n@@ -227,15 +230,15 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\t    \"-msingle-float option equivalent to -mhard-float\");\n       /* -msingle-float implies -mno-double-float and TARGET_HARD_FLOAT. */\n       opts->x_rs6000_double_float = 0;\n-      opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n-      opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n+      opts->x_rs6000_isa_flags &= ~OPTION_MASK_SOFT_FLOAT;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n       break;\n \n     case OPT_mdouble_float:\n       /* -mdouble-float implies -msingle-float and TARGET_HARD_FLOAT. */\n       opts->x_rs6000_single_float = 1;\n-      opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n-      opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n+      opts->x_rs6000_isa_flags &= ~OPTION_MASK_SOFT_FLOAT;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n       break;\n \n     case OPT_msimple_fpu:\n@@ -259,8 +262,8 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t{\n \t  /* If -mfpu is not none, then turn off SOFT_FLOAT, turn on\n \t     HARD_FLOAT. */\n-\t  opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n-\t  opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n+\t  opts->x_rs6000_isa_flags &= ~OPTION_MASK_SOFT_FLOAT;\n+\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n \t  opts->x_rs6000_xilinx_fpu = 1;\n \t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_SF_FULL) \n \t    opts->x_rs6000_single_float = 1;\n@@ -272,8 +275,8 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n       else\n \t{\n \t  /* -mfpu=none is equivalent to -msoft-float.  */\n-\t  opts->x_target_flags |= MASK_SOFT_FLOAT;\n-\t  opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n+\t  opts->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n+\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n \t  opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n \t}\n       break;\n@@ -297,8 +300,4 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE rs6000_option_optimization_table\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS \\\n-  (TARGET_DEFAULT)\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "091a462d1947ad8baf942a2d93ca16a47e89c154", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -26,7 +26,7 @@\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n       warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\"}, {"sha": "099c4dfd8ce9d4c2ee48c133df0ae3d006b1ade4", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -26,7 +26,7 @@\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n       warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\"}, {"sha": "a37ce622d4bfb1404455a7ecd3d6dbbd25f9c6a1", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -26,7 +26,7 @@\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n       warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\"}, {"sha": "7faba7318465883b72a2a4f8277932270d99c72e", "filename": "gcc/config/rs6000/aix53.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix53.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix53.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix53.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -26,7 +26,7 @@\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n       warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\"}, {"sha": "8de6fee3fd909633989d1df5264e11bd713a57e5", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -26,7 +26,7 @@\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n       warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\"}, {"sha": "2dabd809806fda98437d9d0e523ae7fa485160ae", "filename": "gcc/config/rs6000/aix64.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Faix64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix64.opt?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -20,11 +20,11 @@\n ; <http://www.gnu.org/licenses/>.\n \n maix64\n-Target Report RejectNegative Negative(maix32) Mask(64BIT)\n+Target Report RejectNegative Negative(maix32) Mask(64BIT) Var(rs6000_isa_flags)\n Compile for 64-bit pointers\n \n maix32\n-Target Report RejectNegative Negative(maix64) InverseMask(64BIT)\n+Target Report RejectNegative Negative(maix64) InverseMask(64BIT) Var(rs6000_isa_flags)\n Compile for 32-bit pointers\n \n mpe"}, {"sha": "2abba3482f70d40cce882a5263b1cb8989ced9db", "filename": "gcc/config/rs6000/darwin.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.opt?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -34,9 +34,9 @@ findirect-data\n Driver RejectNegative Alias(mfix-and-continue)\n \n m64\n-Target RejectNegative Negative(m32) Mask(64BIT)\n+Target RejectNegative Negative(m32) Mask(64BIT) Var(rs6000_isa_flags)\n Generate 64-bit code\n \n m32\n-Target RejectNegative Negative(m64) InverseMask(64BIT)\n+Target RejectNegative Negative(m64) InverseMask(64BIT) Var(rs6000_isa_flags)\n Generate 32-bit code"}, {"sha": "ee447195f2d4515c125cf715b1618fb498a36610", "filename": "gcc/config/rs6000/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -72,7 +72,7 @@\n    -mrelocatable or -mrelocatable-lib is given.  */\n #undef RELOCATABLE_NEEDS_FIXUP\n #define RELOCATABLE_NEEDS_FIXUP \\\n-  (target_flags & target_flags_explicit & MASK_RELOCATABLE)\n+  (rs6000_isa_flags & rs6000_isa_flags_explicit & OPTION_MASK_RELOCATABLE)\n \n #define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n "}, {"sha": "69e150705bd5c5575ad622a3dd73f6efde75ac25", "filename": "gcc/config/rs6000/freebsd64.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -57,7 +57,7 @@ extern int dot_symbols;\n    -mrelocatable or -mrelocatable-lib is given.  */\n #undef RELOCATABLE_NEEDS_FIXUP\n #define RELOCATABLE_NEEDS_FIXUP \\\n-  (target_flags & target_flags_explicit & MASK_RELOCATABLE)\n+  (rs6000_isa_flags & rs6000_isa_flags_explicit & OPTION_MASK_RELOCATABLE)\n \n #undef  RS6000_ABI_NAME\n #define RS6000_ABI_NAME \"freebsd\"\n@@ -79,27 +79,28 @@ extern int dot_symbols;\n \t      error (INVALID_64BIT, \"call\");\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  dot_symbols = !strcmp (rs6000_abi_name, \"aixdesc\");\t\\\n-\t  if (target_flags & MASK_RELOCATABLE)\t\t\t\\\n+\t  if (rs6000_isa_flags & OPTION_MASK_RELOCATABLE)\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      target_flags &= ~MASK_RELOCATABLE;\t\t\\\n+\t      rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\t\\\n \t      error (INVALID_64BIT, \"relocatable\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n-\t  if (target_flags & MASK_EABI)\t\t\t\t\\\n+\t  if (rs6000_isa_flags & OPTION_MASK_EABI)\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      target_flags &= ~MASK_EABI;\t\t\t\\\n+\t      rs6000_isa_flags &= ~OPTION_MASK_EABI;\t\t\\\n \t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      target_prototype = 0;\t\t\t\t\\\n \t      error (INVALID_64BIT, \"prototype\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n-\t  if ((target_flags & MASK_POWERPC64) == 0)\t\t\\\n+\t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      target_flags |= MASK_POWERPC64;\t\t\t\\\n+\t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n \t      error (\"-m64 requires a PowerPC64 cpu\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n-\t   if ((target_flags_explicit & MASK_MINIMAL_TOC) != 0)\t\\\n+\t   if ((rs6000_isa_flags_explicit\t\t\t\\\n+\t\t& OPTION_MASK_MINIMAL_TOC) != 0)\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      if (global_options_set.x_rs6000_current_cmodel\t\\\n \t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\"}, {"sha": "02477df7199f5b600e748c60a3003c3b64924f71", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -109,7 +109,7 @@\n    -mrelocatable or -mrelocatable-lib is given.  */\n #undef RELOCATABLE_NEEDS_FIXUP\n #define RELOCATABLE_NEEDS_FIXUP \\\n-  (target_flags & target_flags_explicit & MASK_RELOCATABLE)\n+  (rs6000_isa_flags & rs6000_isa_flags_explicit & OPTION_MASK_RELOCATABLE)\n \n #define TARGET_POSIX_IO\n "}, {"sha": "28ba8f8f6a87908173ac41538983d3e27b391837", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -81,7 +81,7 @@ extern int dot_symbols;\n    -mrelocatable or -mrelocatable-lib is given.  */\n #undef RELOCATABLE_NEEDS_FIXUP\n #define RELOCATABLE_NEEDS_FIXUP \\\n-  (target_flags & target_flags_explicit & MASK_RELOCATABLE)\n+  (rs6000_isa_flags & rs6000_isa_flags_explicit & OPTION_MASK_RELOCATABLE)\n \n #undef\tRS6000_ABI_NAME\n #define\tRS6000_ABI_NAME \"linux\"\n@@ -103,27 +103,28 @@ extern int dot_symbols;\n \t      error (INVALID_64BIT, \"call\");\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  dot_symbols = !strcmp (rs6000_abi_name, \"aixdesc\");\t\\\n-\t  if (target_flags & MASK_RELOCATABLE)\t\t\t\\\n+\t  if (rs6000_isa_flags & OPTION_MASK_RELOCATABLE)\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      target_flags &= ~MASK_RELOCATABLE;\t\t\\\n+\t      rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\t\\\n \t      error (INVALID_64BIT, \"relocatable\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n-\t  if (target_flags & MASK_EABI)\t\t\t\t\\\n+\t  if (rs6000_isa_flags & OPTION_MASK_EABI)\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      target_flags &= ~MASK_EABI;\t\t\t\\\n+\t      rs6000_isa_flags &= ~OPTION_MASK_EABI;\t\t\\\n \t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      target_prototype = 0;\t\t\t\t\\\n \t      error (INVALID_64BIT, \"prototype\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n-\t  if ((target_flags & MASK_POWERPC64) == 0)\t\t\\\n+\t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      target_flags |= MASK_POWERPC64;\t\t\t\\\n+\t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n \t      error (\"-m64 requires a PowerPC64 cpu\");\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n-\t  if ((target_flags_explicit & MASK_MINIMAL_TOC) != 0)\t\\\n+\t  if ((rs6000_isa_flags_explicit\t\t\t\\\n+\t       & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      if (global_options_set.x_rs6000_current_cmodel\t\\\n \t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n@@ -213,20 +214,20 @@ extern int dot_symbols;\n #ifndef RS6000_BI_ARCH\n \n /* 64-bit PowerPC Linux is always big-endian.  */\n-#undef\tTARGET_LITTLE_ENDIAN\n-#define TARGET_LITTLE_ENDIAN\t0\n+#undef\tOPTION_LITTLE_ENDIAN\n+#define OPTION_LITTLE_ENDIAN\t0\n \n /* 64-bit PowerPC Linux always has a TOC.  */\n #undef  TARGET_TOC\n #define\tTARGET_TOC\t\t1\n \n /* Some things from sysv4.h we don't do when 64 bit.  */\n-#undef\tTARGET_RELOCATABLE\n-#define\tTARGET_RELOCATABLE\t0\n-#undef\tTARGET_EABI\n-#define\tTARGET_EABI\t\t0\n-#undef\tTARGET_PROTOTYPE\n-#define\tTARGET_PROTOTYPE\t0\n+#undef\tOPTION_RELOCATABLE\n+#define\tOPTION_RELOCATABLE\t0\n+#undef\tOPTION_EABI\n+#define\tOPTION_EABI\t\t0\n+#undef\tOPTION_PROTOTYPE\n+#define\tOPTION_PROTOTYPE\t0\n #undef RELOCATABLE_NEEDS_FIXUP\n #define RELOCATABLE_NEEDS_FIXUP 0\n "}, {"sha": "aaa9b3dde46562b451a675d34ee990fbeab9db48", "filename": "gcc/config/rs6000/option-defaults.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Foption-defaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Foption-defaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Foption-defaults.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -35,11 +35,12 @@\n #define OPT_32 \"m32\"\n #endif\n \n-#ifndef MASK_64BIT\n+#ifndef OPTION_MASK_64BIT\n+#define OPTION_MASK_64BIT 0\n #define MASK_64BIT 0\n #endif\n \n-#if TARGET_DEFAULT & MASK_64BIT\n+#if TARGET_DEFAULT & OPTION_MASK_64BIT\n #define OPT_ARCH64 \"!\"OPT_32\n #define OPT_ARCH32 OPT_32\n #else"}, {"sha": "295015f6fd0303c6b841edd8c5fa49d77cfcdf8a", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -295,31 +295,31 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n \t     (define_p) ? \"define\" : \"undef\",\n \t     flags, bu_mask);\n \n-  /* target_flags based options.  */\n+  /* rs6000_isa_flags based options.  */\n   rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPC\");\n-  if ((flags & MASK_PPC_GPOPT) != 0)\n+  if ((flags & OPTION_MASK_PPC_GPOPT) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPCSQ\");\n-  if ((flags & MASK_PPC_GFXOPT) != 0)\n+  if ((flags & OPTION_MASK_PPC_GFXOPT) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPCGR\");\n-  if ((flags & MASK_POWERPC64) != 0)\n+  if ((flags & OPTION_MASK_POWERPC64) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPC64\");\n-  if ((flags & MASK_MFCRF) != 0)\n+  if ((flags & OPTION_MASK_MFCRF) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR4\");\n-  if ((flags & MASK_POPCNTB) != 0)\n+  if ((flags & OPTION_MASK_POPCNTB) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR5\");\n-  if ((flags & MASK_FPRND) != 0)\n+  if ((flags & OPTION_MASK_FPRND) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR5X\");\n-  if ((flags & MASK_CMPB) != 0)\n+  if ((flags & OPTION_MASK_CMPB) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR6\");\n-  if ((flags & MASK_MFPGPR) != 0)\n+  if ((flags & OPTION_MASK_MFPGPR) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR6X\");\n-  if ((flags & MASK_POPCNTD) != 0)\n+  if ((flags & OPTION_MASK_POPCNTD) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR7\");\n-  if ((flags & MASK_SOFT_FLOAT) != 0)\n+  if ((flags & OPTION_MASK_SOFT_FLOAT) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_SOFT_FLOAT\");\n-  if ((flags & MASK_RECIP_PRECISION) != 0)\n+  if ((flags & OPTION_MASK_RECIP_PRECISION) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__RECIP_PRECISION__\");\n-  if ((flags & MASK_ALTIVEC) != 0)\n+  if ((flags & OPTION_MASK_ALTIVEC) != 0)\n     {\n       const char *vec_str = (define_p) ? \"__VEC__=10206\" : \"__VEC__\";\n       rs6000_define_or_undefine_macro (define_p, \"__ALTIVEC__\");\n@@ -329,7 +329,7 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n       if (!flag_iso)\n \trs6000_define_or_undefine_macro (define_p, \"__APPLE_ALTIVEC__\");\n     }\n-  if ((flags & MASK_VSX) != 0)\n+  if ((flags & OPTION_MASK_VSX) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__VSX__\");\n \n   /* options from the builtin masks.  */\n@@ -345,7 +345,7 @@ void\n rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n {\n   /* Define all of the common macros.  */\n-  rs6000_target_modify_macros (true, target_flags,\n+  rs6000_target_modify_macros (true, rs6000_isa_flags,\n \t\t\t       rs6000_builtin_mask_calculate ());\n \n   if (TARGET_FRE)"}, {"sha": "fd43146495d9da4c8d0b8806a12602db1bf8da33", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -18,6 +18,57 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+/* ISA masks.  */\n+#ifndef ISA_2_1_MASKS\n+#define ISA_2_1_MASKS\t\tOPTION_MASK_MFCRF\n+#define ISA_2_2_MASKS\t\t(ISA_2_1_MASKS | OPTION_MASK_POPCNTB)\n+#define ISA_2_4_MASKS\t\t(ISA_2_2_MASKS | OPTION_MASK_FPRND)\n+\n+  /* For ISA 2.05, do not add MFPGPR, since it isn't in ISA 2.06, and don't add\n+     ALTIVEC, since in general it isn't a win on power6.  In ISA 2.04, fsel,\n+     fre, fsqrt, etc. were no longer documented as optional.  Group masks by\n+     server and embedded. */\n+#define ISA_2_5_MASKS_EMBEDDED\t(ISA_2_2_MASKS\t\t\t\t\\\n+\t\t\t\t | OPTION_MASK_CMPB\t\t\t\\\n+\t\t\t\t | OPTION_MASK_RECIP_PRECISION\t\t\\\n+\t\t\t\t | OPTION_MASK_PPC_GFXOPT\t\t\\\n+\t\t\t\t | OPTION_MASK_PPC_GPOPT)\n+\n+#define ISA_2_5_MASKS_SERVER\t(ISA_2_5_MASKS_EMBEDDED | OPTION_MASK_DFP)\n+\n+  /* For ISA 2.06, don't add ISEL, since in general it isn't a win, but\n+     altivec is a win so enable it.  */\n+#define ISA_2_6_MASKS_EMBEDDED\t(ISA_2_5_MASKS_EMBEDDED | OPTION_MASK_POPCNTD)\n+#define ISA_2_6_MASKS_SERVER\t(ISA_2_5_MASKS_SERVER\t\t\t\\\n+\t\t\t\t | OPTION_MASK_POPCNTD\t\t\t\\\n+\t\t\t\t | OPTION_MASK_ALTIVEC\t\t\t\\\n+\t\t\t\t | OPTION_MASK_VSX)\n+\n+#define POWERPC_7400_MASK\t(OPTION_MASK_PPC_GFXOPT | OPTION_MASK_ALTIVEC)\n+\n+/* Mask of all options to set the default isa flags based on -mcpu=<xxx>.  */\n+#define POWERPC_MASKS\t\t(OPTION_MASK_ALTIVEC\t\t\t\\\n+\t\t\t\t | OPTION_MASK_CMPB\t\t\t\\\n+\t\t\t\t | OPTION_MASK_DFP\t\t\t\\\n+\t\t\t\t | OPTION_MASK_DLMZB\t\t\t\\\n+\t\t\t\t | OPTION_MASK_FPRND\t\t\t\\\n+\t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n+\t\t\t\t | OPTION_MASK_MFCRF\t\t\t\\\n+\t\t\t\t | OPTION_MASK_MFPGPR\t\t\t\\\n+\t\t\t\t | OPTION_MASK_MULHW\t\t\t\\\n+\t\t\t\t | OPTION_MASK_NO_UPDATE\t\t\\\n+\t\t\t\t | OPTION_MASK_POPCNTB\t\t\t\\\n+\t\t\t\t | OPTION_MASK_POPCNTD\t\t\t\\\n+\t\t\t\t | OPTION_MASK_POWERPC64\t\t\\\n+\t\t\t\t | OPTION_MASK_PPC_GFXOPT\t\t\\\n+\t\t\t\t | OPTION_MASK_PPC_GPOPT\t\t\\\n+\t\t\t\t | OPTION_MASK_RECIP_PRECISION\t\t\\\n+\t\t\t\t | OPTION_MASK_SOFT_FLOAT\t\t\\\n+\t\t\t\t | OPTION_MASK_STRICT_ALIGN\t\t\\\n+\t\t\t\t | OPTION_MASK_VSX)\n+\n+#endif\n+\n /* This table occasionally claims that a processor does not support a\n    particular feature even though it does, but the feature is slower than the\n    alternative.  Thus, it shouldn't be relied on as a complete description of"}, {"sha": "81dc6f32daa18d92fc8a98421d920696de128353", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 107, "deletions": 129, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -1121,7 +1121,8 @@ static const struct attribute_spec rs6000_attribute_table[] =\n   { NULL,        0, 0, false, false, false, NULL, false }\n };\n \f\n-#ifndef MASK_STRICT_ALIGN\n+#ifndef OPTION_MASK_STRICT_ALIGN\n+#define OPTION_MASK_STRICT_ALIGN 0\n #define MASK_STRICT_ALIGN 0\n #endif\n #ifndef TARGET_PROFILE_KERNEL\n@@ -1464,48 +1465,7 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #define TARGET_VECTORIZE_VEC_PERM_CONST_OK rs6000_vectorize_vec_perm_const_ok\n \f\n \n-/* Simplifications for entries below.  */\n-\n-enum {\n-  POWERPC_7400_MASK = MASK_PPC_GFXOPT | MASK_ALTIVEC\n-};\n-\n-/* Some OSs don't support saving the high part of 64-bit registers on context\n-   switch.  Other OSs don't support saving Altivec registers.  On those OSs, we\n-   don't touch the MASK_POWERPC64 or MASK_ALTIVEC settings; if the user wants\n-   either, the user must explicitly specify them and we won't interfere with\n-   the user's specification.  */\n-\n-enum {\n-  POWERPC_MASKS = (MASK_PPC_GPOPT | MASK_STRICT_ALIGN\n-\t\t   | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC\n-\t\t   | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_MULHW\n-\t\t   | MASK_DLMZB | MASK_CMPB | MASK_MFPGPR | MASK_DFP\n-\t\t   | MASK_POPCNTD | MASK_VSX | MASK_ISEL | MASK_NO_UPDATE\n-\t\t   | MASK_RECIP_PRECISION)\n-};\n-\n-/* Masks for instructions set at various powerpc ISAs.  */\n-enum {\n-  ISA_2_1_MASKS = MASK_MFCRF,\n-  ISA_2_2_MASKS = (ISA_2_1_MASKS | MASK_POPCNTB),\n-  ISA_2_4_MASKS = (ISA_2_2_MASKS | MASK_FPRND),\n-\n-  /* For ISA 2.05, do not add MFPGPR, since it isn't in ISA 2.06, and don't add\n-     ALTIVEC, since in general it isn't a win on power6.  In ISA 2.04, fsel,\n-     fre, fsqrt, etc. were no longer documented as optional.  Group masks by\n-     server and embedded. */\n-  ISA_2_5_MASKS_EMBEDDED = (ISA_2_2_MASKS | MASK_CMPB | MASK_RECIP_PRECISION\n-\t\t\t    | MASK_PPC_GFXOPT | MASK_PPC_GPOPT),\n-  ISA_2_5_MASKS_SERVER = (ISA_2_5_MASKS_EMBEDDED | MASK_DFP),\n-\n-  /* For ISA 2.06, don't add ISEL, since in general it isn't a win, but\n-     altivec is a win so enable it.  */\n-  ISA_2_6_MASKS_EMBEDDED = (ISA_2_5_MASKS_EMBEDDED | MASK_POPCNTD),\n-  ISA_2_6_MASKS_SERVER = (ISA_2_5_MASKS_SERVER | MASK_POPCNTD | MASK_ALTIVEC\n-\t\t\t  | MASK_VSX)\n-};\n-\n+/* Processor table.  */\n struct rs6000_ptt\n {\n   const char *const name;\t\t/* Canonical processor name.  */\n@@ -2357,32 +2317,32 @@ darwin_rs6000_override_options (void)\n \n   if (TARGET_64BIT && ! TARGET_POWERPC64)\n     {\n-      target_flags |= MASK_POWERPC64;\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n       warning (0, \"-m64 requires PowerPC64 architecture, enabling\");\n     }\n   if (flag_mkernel)\n     {\n       rs6000_default_long_calls = 1;\n-      target_flags |= MASK_SOFT_FLOAT;\n+      rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n     }\n \n   /* Make -m64 imply -maltivec.  Darwin's 64-bit ABI includes\n      Altivec.  */\n   if (!flag_mkernel && !flag_apple_kext\n       && TARGET_64BIT\n-      && ! (target_flags_explicit & MASK_ALTIVEC))\n-    target_flags |= MASK_ALTIVEC;\n+      && ! (rs6000_isa_flags_explicit & OPTION_MASK_ALTIVEC))\n+    rs6000_isa_flags |= OPTION_MASK_ALTIVEC;\n \n   /* Unless the user (not the configurer) has explicitly overridden\n      it with -mcpu=G3 or -mno-altivec, then 10.5+ targets default to\n      G4 unless targeting the kernel.  */\n   if (!flag_mkernel\n       && !flag_apple_kext\n       && strverscmp (darwin_macosx_version_min, \"10.5\") >= 0\n-      && ! (target_flags_explicit & MASK_ALTIVEC)\n+      && ! (rs6000_isa_flags_explicit & OPTION_MASK_ALTIVEC)\n       && ! global_options_set.x_rs6000_cpu_index)\n     {\n-      target_flags |= MASK_ALTIVEC;\n+      rs6000_isa_flags |= OPTION_MASK_ALTIVEC;\n     }\n }\n #endif\n@@ -2463,18 +2423,24 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_pointer_size = 32;\n     }\n \n-  set_masks = POWERPC_MASKS | MASK_SOFT_FLOAT;\n+  /* Some OSs don't support saving the high part of 64-bit registers on context\n+     switch.  Other OSs don't support saving Altivec registers.  On those OSs,\n+     we don't touch the OPTION_MASK_POWERPC64 or OPTION_MASK_ALTIVEC settings;\n+     if the user wants either, the user must explicitly specify them and we\n+     won't interfere with the user's specification.  */\n+\n+  set_masks = POWERPC_MASKS;\n #ifdef OS_MISSING_POWERPC64\n   if (OS_MISSING_POWERPC64)\n-    set_masks &= ~MASK_POWERPC64;\n+    set_masks &= ~OPTION_MASK_POWERPC64;\n #endif\n #ifdef OS_MISSING_ALTIVEC\n   if (OS_MISSING_ALTIVEC)\n-    set_masks &= ~MASK_ALTIVEC;\n+    set_masks &= ~(OPTION_MASK_ALTIVEC | OPTION_MASK_VSX);\n #endif\n \n   /* Don't override by the processor default if given explicitly.  */\n-  set_masks &= ~target_flags_explicit;\n+  set_masks &= ~rs6000_isa_flags_explicit;\n \n   /* Process the -mcpu=<xxx> and -mtune=<xxx> argument.  If the user changed\n      the cpu in a target attribute or pragma, but did not specify a tuning\n@@ -2512,13 +2478,20 @@ rs6000_option_override_internal (bool global_init_p)\n      TARGET_DEFAULT.  */\n   if (have_cpu)\n     {\n-      target_flags &= ~set_masks;\n-      target_flags |= (processor_target_table[cpu_index].target_enable\n-\t\t       & set_masks);\n+      rs6000_isa_flags &= ~set_masks;\n+      rs6000_isa_flags |= (processor_target_table[cpu_index].target_enable\n+\t\t\t   & set_masks);\n     }\n   else\n-    target_flags |= (processor_target_table[cpu_index].target_enable\n-\t\t     & ~target_flags_explicit);\n+    rs6000_isa_flags |= (processor_target_table[cpu_index].target_enable\n+\t\t\t & ~rs6000_isa_flags_explicit);\n+\n+  /* If no -mcpu=<xxx>, inherit any default options that were cleared via\n+     POWERPC_MASKS.  Originally, TARGET_DEFAULT was used to initialize\n+     target_flags via the TARGET_DEFAULT_TARGET_FLAGS hook.  When we switched\n+     to using rs6000_isa_flags, we need to do the initialization here.  */\n+  if (!have_cpu)\n+    rs6000_isa_flags |= (TARGET_DEFAULT & ~rs6000_isa_flags_explicit);\n \n   if (rs6000_tune_index >= 0)\n     tune_index = rs6000_tune_index;\n@@ -2603,7 +2576,8 @@ rs6000_option_override_internal (bool global_init_p)\n      use instructions that would be microcoded on the Cell, use the\n      load/store multiple and string instructions.  */\n   if (BYTES_BIG_ENDIAN && optimize_size && rs6000_gen_cell_microcode)\n-    target_flags |= ~target_flags_explicit & (MASK_MULTIPLE | MASK_STRING);\n+    rs6000_isa_flags |= ~rs6000_isa_flags_explicit & (OPTION_MASK_MULTIPLE\n+\t\t\t\t\t\t      | OPTION_MASK_STRING);\n \n   /* Don't allow -mmultiple or -mstring on little endian systems\n      unless the cpu is a 750, because the hardware doesn't support the\n@@ -2615,15 +2589,15 @@ rs6000_option_override_internal (bool global_init_p)\n     {\n       if (TARGET_MULTIPLE)\n \t{\n-\t  target_flags &= ~MASK_MULTIPLE;\n-\t  if ((target_flags_explicit & MASK_MULTIPLE) != 0)\n+\t  rs6000_isa_flags &= ~OPTION_MASK_MULTIPLE;\n+\t  if ((rs6000_isa_flags_explicit & OPTION_MASK_MULTIPLE) != 0)\n \t    warning (0, \"-mmultiple is not supported on little endian systems\");\n \t}\n \n       if (TARGET_STRING)\n \t{\n-\t  target_flags &= ~MASK_STRING;\n-\t  if ((target_flags_explicit & MASK_STRING) != 0)\n+\t  rs6000_isa_flags &= ~OPTION_MASK_STRING;\n+\t  if ((rs6000_isa_flags_explicit & OPTION_MASK_STRING) != 0)\n \t    warning (0, \"-mstring is not supported on little endian systems\");\n \t}\n     }\n@@ -2635,10 +2609,10 @@ rs6000_option_override_internal (bool global_init_p)\n       if (!TARGET_HARD_FLOAT || !TARGET_FPRS\n \t  || !TARGET_SINGLE_FLOAT || !TARGET_DOUBLE_FLOAT)\n \t{\n-\t  if (target_flags_explicit & MASK_VSX)\n+\t  if (rs6000_isa_flags_explicit & OPTION_MASK_VSX)\n \t    msg = N_(\"-mvsx requires hardware floating point\");\n \t  else\n-\t    target_flags &= ~ MASK_VSX;\n+\t    rs6000_isa_flags &= ~ OPTION_MASK_VSX;\n \t}\n       else if (TARGET_PAIRED_FLOAT)\n \tmsg = N_(\"-mvsx and -mpaired are incompatible\");\n@@ -2649,9 +2623,10 @@ rs6000_option_override_internal (bool global_init_p)\n \tmsg = N_(\"-mvsx used with little endian code\");\n       else if (TARGET_AVOID_XFORM > 0)\n \tmsg = N_(\"-mvsx needs indexed addressing\");\n-      else if (!TARGET_ALTIVEC && (target_flags_explicit & MASK_ALTIVEC))\n+      else if (!TARGET_ALTIVEC && (rs6000_isa_flags_explicit\n+\t\t\t\t   & OPTION_MASK_ALTIVEC))\n         {\n-\t  if (target_flags_explicit & MASK_VSX)\n+\t  if (rs6000_isa_flags_explicit & OPTION_MASK_VSX)\n \t    msg = N_(\"-mvsx and -mno-altivec are incompatible\");\n \t  else\n \t    msg = N_(\"-mno-altivec disables vsx\");\n@@ -2660,27 +2635,27 @@ rs6000_option_override_internal (bool global_init_p)\n       if (msg)\n \t{\n \t  warning (0, msg);\n-\t  target_flags &= ~ MASK_VSX;\n-\t  target_flags_explicit |= MASK_VSX;\n+\t  rs6000_isa_flags &= ~ OPTION_MASK_VSX;\n+\t  rs6000_isa_flags_explicit |= OPTION_MASK_VSX;\n \t}\n     }\n \n   /* For the newer switches (vsx, dfp, etc.) set some of the older options,\n      unless the user explicitly used the -mno-<option> to disable the code.  */\n   if (TARGET_VSX)\n-    target_flags |= (ISA_2_6_MASKS_SERVER & ~target_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_6_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n   else if (TARGET_POPCNTD)\n-    target_flags |= (ISA_2_6_MASKS_EMBEDDED & ~target_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_6_MASKS_EMBEDDED & ~rs6000_isa_flags_explicit);\n   else if (TARGET_DFP)\n-    target_flags |= (ISA_2_5_MASKS_SERVER & ~target_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_5_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n   else if (TARGET_CMPB)\n-    target_flags |= (ISA_2_5_MASKS_EMBEDDED & ~target_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_5_MASKS_EMBEDDED & ~rs6000_isa_flags_explicit);\n   else if (TARGET_FPRND)\n-    target_flags |= (ISA_2_4_MASKS & ~target_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_4_MASKS & ~rs6000_isa_flags_explicit);\n   else if (TARGET_POPCNTB)\n-    target_flags |= (ISA_2_2_MASKS & ~target_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_2_MASKS & ~rs6000_isa_flags_explicit);\n   else if (TARGET_ALTIVEC)\n-    target_flags |= (MASK_PPC_GFXOPT & ~target_flags_explicit);\n+    rs6000_isa_flags |= (OPTION_MASK_PPC_GFXOPT & ~rs6000_isa_flags_explicit);\n \n   /* E500mc does \"better\" if we inline more aggressively.  Respect the\n      user's opinion, though.  */\n@@ -2759,7 +2734,8 @@ rs6000_option_override_internal (bool global_init_p)\n      unless the altivec ABI was set.  This is set by default for 64-bit, but\n      not for 32-bit.  */\n   if (main_target_opt != NULL && !main_target_opt->x_rs6000_altivec_abi)\n-    target_flags &= ~((MASK_VSX | MASK_ALTIVEC) & ~target_flags_explicit);\n+    rs6000_isa_flags &= ~((OPTION_MASK_VSX | OPTION_MASK_ALTIVEC)\n+\t\t\t  & ~rs6000_isa_flags_explicit);\n \n   /* Enable Altivec ABI for AIX -maltivec.  */\n   if (TARGET_XCOFF && (TARGET_ALTIVEC || TARGET_VSX))\n@@ -2837,14 +2813,14 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_single_float = TARGET_E500_SINGLE || TARGET_E500_DOUBLE;\n       rs6000_double_float = TARGET_E500_DOUBLE;\n \n-      target_flags &= ~MASK_STRING;\n+      rs6000_isa_flags &= ~OPTION_MASK_STRING;\n \n       break;\n \n     default:\n \n-      if (have_cpu && !(target_flags_explicit & MASK_ISEL))\n-\ttarget_flags &= ~MASK_ISEL;\n+      if (have_cpu && !(rs6000_isa_flags_explicit & OPTION_MASK_ISEL))\n+\trs6000_isa_flags &= ~OPTION_MASK_ISEL;\n \n       break;\n     }\n@@ -25330,7 +25306,7 @@ rs6000_darwin_file_start (void)\n   i = 0;\n   while (mapping[i].arg != NULL\n \t && strcmp (mapping[i].arg, cpu_id) != 0\n-\t && (mapping[i].if_set & target_flags) == 0)\n+\t && (mapping[i].if_set & rs6000_isa_flags) == 0)\n     i++;\n \n   fprintf (asm_out_file, \"\\t.machine %s\\n\", mapping[i].name);\n@@ -27431,48 +27407,48 @@ struct rs6000_opt_mask {\n \n static struct rs6000_opt_mask const rs6000_opt_masks[] =\n {\n-  { \"altivec\",\t\tMASK_ALTIVEC,\t\tfalse, true  },\n-  { \"cmpb\",\t\tMASK_CMPB,\t\tfalse, true  },\n-  { \"dlmzb\",\t\tMASK_DLMZB,\t\tfalse, true  },\n-  { \"fprnd\",\t\tMASK_FPRND,\t\tfalse, true  },\n-  { \"hard-dfp\",\t\tMASK_DFP,\t\tfalse, true  },\n-  { \"isel\",\t\tMASK_ISEL,\t\tfalse, true  },\n-  { \"mfcrf\",\t\tMASK_MFCRF,\t\tfalse, true  },\n-  { \"mfpgpr\",\t\tMASK_MFPGPR,\t\tfalse, true  },\n-  { \"mulhw\",\t\tMASK_MULHW,\t\tfalse, true  },\n-  { \"multiple\",\t\tMASK_MULTIPLE,\t\tfalse, true  },\n-  { \"update\",\t\tMASK_NO_UPDATE,\t\ttrue , true  },\n-  { \"popcntb\",\t\tMASK_POPCNTB,\t\tfalse, true  },\n-  { \"popcntd\",\t\tMASK_POPCNTD,\t\tfalse, true  },\n-  { \"powerpc-gfxopt\",\tMASK_PPC_GFXOPT,\tfalse, true  },\n-  { \"powerpc-gpopt\",\tMASK_PPC_GPOPT,\t\tfalse, true  },\n-  { \"recip-precision\",\tMASK_RECIP_PRECISION,\tfalse, true  },\n-  { \"string\",\t\tMASK_STRING,\t\tfalse, true  },\n-  { \"vsx\",\t\tMASK_VSX,\t\tfalse, true  },\n-#ifdef MASK_64BIT\n+  { \"altivec\",\t\t\tOPTION_MASK_ALTIVEC,\t\tfalse, true  },\n+  { \"cmpb\",\t\t\tOPTION_MASK_CMPB,\t\tfalse, true  },\n+  { \"dlmzb\",\t\t\tOPTION_MASK_DLMZB,\t\tfalse, true  },\n+  { \"fprnd\",\t\t\tOPTION_MASK_FPRND,\t\tfalse, true  },\n+  { \"hard-dfp\",\t\t\tOPTION_MASK_DFP,\t\tfalse, true  },\n+  { \"isel\",\t\t\tOPTION_MASK_ISEL,\t\tfalse, true  },\n+  { \"mfcrf\",\t\t\tOPTION_MASK_MFCRF,\t\tfalse, true  },\n+  { \"mfpgpr\",\t\t\tOPTION_MASK_MFPGPR,\t\tfalse, true  },\n+  { \"mulhw\",\t\t\tOPTION_MASK_MULHW,\t\tfalse, true  },\n+  { \"multiple\",\t\t\tOPTION_MASK_MULTIPLE,\t\tfalse, true  },\n+  { \"update\",\t\t\tOPTION_MASK_NO_UPDATE,\t\ttrue , true  },\n+  { \"popcntb\",\t\t\tOPTION_MASK_POPCNTB,\t\tfalse, true  },\n+  { \"popcntd\",\t\t\tOPTION_MASK_POPCNTD,\t\tfalse, true  },\n+  { \"powerpc-gfxopt\",\t\tOPTION_MASK_PPC_GFXOPT,\t\tfalse, true  },\n+  { \"powerpc-gpopt\",\t\tOPTION_MASK_PPC_GPOPT,\t\tfalse, true  },\n+  { \"recip-precision\",\t\tOPTION_MASK_RECIP_PRECISION,\tfalse, true  },\n+  { \"string\",\t\t\tOPTION_MASK_STRING,\t\tfalse, true  },\n+  { \"vsx\",\t\t\tOPTION_MASK_VSX,\t\tfalse, true  },\n+#ifdef OPTION_MASK_64BIT\n #if TARGET_AIX_OS\n-  { \"aix64\",\t\tMASK_64BIT,\t\tfalse, false },\n-  { \"aix32\",\t\tMASK_64BIT,\t\ttrue,  false },\n+  { \"aix64\",\t\t\tOPTION_MASK_64BIT,\t\tfalse, false },\n+  { \"aix32\",\t\t\tOPTION_MASK_64BIT,\t\ttrue,  false },\n #else\n-  { \"64\",\t\tMASK_64BIT,\t\tfalse, false },\n-  { \"32\",\t\tMASK_64BIT,\t\ttrue,  false },\n+  { \"64\",\t\t\tOPTION_MASK_64BIT,\t\tfalse, false },\n+  { \"32\",\t\t\tOPTION_MASK_64BIT,\t\ttrue,  false },\n #endif\n #endif\n-#ifdef MASK_EABI\n-  { \"eabi\",\t\tMASK_EABI,\t\tfalse, false },\n+#ifdef OPTION_MASK_EABI\n+  { \"eabi\",\t\t\tOPTION_MASK_EABI,\t\tfalse, false },\n #endif\n-#ifdef MASK_LITTLE_ENDIAN\n-  { \"little\",\t\tMASK_LITTLE_ENDIAN,\tfalse, false },\n-  { \"big\",\t\tMASK_LITTLE_ENDIAN,\ttrue,  false },\n+#ifdef OPTION_MASK_LITTLE_ENDIAN\n+  { \"little\",\t\t\tOPTION_MASK_LITTLE_ENDIAN,\tfalse, false },\n+  { \"big\",\t\t\tOPTION_MASK_LITTLE_ENDIAN,\ttrue,  false },\n #endif\n-#ifdef MASK_RELOCATABLE\n-  { \"relocatable\",\tMASK_RELOCATABLE,\tfalse, false },\n+#ifdef OPTION_MASK_RELOCATABLE\n+  { \"relocatable\",\t\tOPTION_MASK_RELOCATABLE,\tfalse, false },\n #endif\n-#ifdef MASK_STRICT_ALIGN\n-  { \"strict-align\",\tMASK_STRICT_ALIGN,\tfalse, false },\n+#ifdef OPTION_MASK_STRICT_ALIGN\n+  { \"strict-align\",\t\tOPTION_MASK_STRICT_ALIGN,\tfalse, false },\n #endif\n-  { \"soft-float\",\tMASK_SOFT_FLOAT,\tfalse, false },\n-  { \"string\",\t\tMASK_STRING,\t\tfalse, false },\n+  { \"soft-float\",\t\tOPTION_MASK_SOFT_FLOAT,\t\tfalse, false },\n+  { \"string\",\t\t\tOPTION_MASK_STRING,\t\tfalse, false },\n };\n \n /* Builtin mask mapping for printing the flags.  */\n@@ -27583,20 +27559,20 @@ rs6000_inner_target_options (tree args, bool attr_p)\n \t\t    else\n \t\t      {\n \t\t\terror_p = false;\n-\t\t\ttarget_flags_explicit |= mask;\n+\t\t\trs6000_isa_flags_explicit |= mask;\n \n \t\t\t/* VSX needs altivec, so -mvsx automagically sets\n \t\t\t   altivec.  */\n-\t\t\tif (mask == MASK_VSX && !invert)\n-\t\t\t  mask |= MASK_ALTIVEC;\n+\t\t\tif (mask == OPTION_MASK_VSX && !invert)\n+\t\t\t  mask |= OPTION_MASK_ALTIVEC;\n \n \t\t\tif (rs6000_opt_masks[i].invert)\n \t\t\t  invert = !invert;\n \n \t\t\tif (invert)\n-\t\t\t  target_flags &= ~mask;\n+\t\t\t  rs6000_isa_flags &= ~mask;\n \t\t\telse\n-\t\t\t  target_flags |= mask;\n+\t\t\t  rs6000_isa_flags |= mask;\n \t\t      }\n \t\t    break;\n \t\t  }\n@@ -27851,14 +27827,14 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n     {\n       prev_opt    = TREE_TARGET_OPTION (prev_tree);\n       prev_bumask = prev_opt->x_rs6000_builtin_mask;\n-      prev_flags  = prev_opt->x_target_flags;\n+      prev_flags  = prev_opt->x_rs6000_isa_flags;\n \n       cur_opt     = TREE_TARGET_OPTION (cur_tree);\n-      cur_flags   = cur_opt->x_target_flags;\n+      cur_flags   = cur_opt->x_rs6000_isa_flags;\n       cur_bumask  = cur_opt->x_rs6000_builtin_mask;\n \n       diff_bumask = (prev_bumask ^ cur_bumask);\n-      diff_flags  = (prev_flags  ^ cur_flags);\n+      diff_flags  = (prev_flags ^ cur_flags);\n \n       if ((diff_flags != 0) || (diff_bumask != 0))\n \t{\n@@ -27961,15 +27937,17 @@ rs6000_set_current_function (tree fndecl)\n static void\n rs6000_function_specific_save (struct cl_target_option *ptr)\n {\n-  ptr->rs6000_target_flags_explicit = target_flags_explicit;\n+  ptr->x_rs6000_isa_flags = rs6000_isa_flags;\n+  ptr->x_rs6000_isa_flags_explicit = rs6000_isa_flags_explicit;\n }\n \n /* Restore the current options */\n \n static void\n rs6000_function_specific_restore (struct cl_target_option *ptr)\n {\n-  target_flags_explicit = ptr->rs6000_target_flags_explicit;\n+  rs6000_isa_flags = ptr->x_rs6000_isa_flags;\n+  rs6000_isa_flags_explicit = ptr->x_rs6000_isa_flags_explicit;\n   (void) rs6000_option_override_internal (false);\n }\n \n@@ -27980,10 +27958,10 @@ rs6000_function_specific_print (FILE *file, int indent,\n \t\t\t\tstruct cl_target_option *ptr)\n {\n   rs6000_print_isa_options (file, indent, \"Isa options set\",\n-\t\t\t    ptr->x_target_flags);\n+\t\t\t    ptr->x_rs6000_isa_flags);\n \n   rs6000_print_isa_options (file, indent, \"Isa options explicit\",\n-\t\t\t    ptr->rs6000_target_flags_explicit);\n+\t\t\t    ptr->x_rs6000_isa_flags_explicit);\n }\n \n /* Helper function to print the current isa or misc options on a line.  */\n@@ -28093,8 +28071,8 @@ rs6000_can_inline_p (tree caller, tree callee)\n       /* Callee's options should a subset of the caller's, i.e. a vsx function\n \t can inline an altivec function but a non-vsx function can't inline a\n \t vsx function.  */\n-      if ((caller_opts->x_target_flags & callee_opts->x_target_flags)\n-\t  == callee_opts->x_target_flags)\n+      if ((caller_opts->x_rs6000_isa_flags & callee_opts->x_rs6000_isa_flags)\n+\t  == callee_opts->x_rs6000_isa_flags)\n \tret = true;\n     }\n "}, {"sha": "d299e6313704d6b35565f25befbf4f39c2441498", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -465,6 +465,64 @@ extern int rs6000_vector_align[];\n #define TARGET_FCTIDUZ\tTARGET_POPCNTD\n #define TARGET_FCTIWUZ\tTARGET_POPCNTD\n \n+/* In switching from using target_flags to using rs6000_isa_flags, the options\n+   machinery creates OPTION_MASK_<xxx> instead of MASK_<xxx>.  For now map\n+   OPTION_MASK_<xxx> back into MASK_<xxx>.  */\n+#define MASK_ALTIVEC\t\t\tOPTION_MASK_ALTIVEC\n+#define MASK_CMPB\t\t\tOPTION_MASK_CMPB\n+#define MASK_DFP\t\t\tOPTION_MASK_DFP\n+#define MASK_DLMZB\t\t\tOPTION_MASK_DLMZB\n+#define MASK_EABI\t\t\tOPTION_MASK_EABI\n+#define MASK_FPRND\t\t\tOPTION_MASK_FPRND\n+#define MASK_HARD_FLOAT\t\t\tOPTION_MASK_HARD_FLOAT\n+#define MASK_ISEL\t\t\tOPTION_MASK_ISEL\n+#define MASK_MFCRF\t\t\tOPTION_MASK_MFCRF\n+#define MASK_MFPGPR\t\t\tOPTION_MASK_MFPGPR\n+#define MASK_MULHW\t\t\tOPTION_MASK_MULHW\n+#define MASK_MULTIPLE\t\t\tOPTION_MASK_MULTIPLE\n+#define MASK_NO_UPDATE\t\t\tOPTION_MASK_NO_UPDATE\n+#define MASK_POPCNTB\t\t\tOPTION_MASK_POPCNTB\n+#define MASK_POPCNTD\t\t\tOPTION_MASK_POPCNTD\n+#define MASK_PPC_GFXOPT\t\t\tOPTION_MASK_PPC_GFXOPT\n+#define MASK_PPC_GPOPT\t\t\tOPTION_MASK_PPC_GPOPT\n+#define MASK_RECIP_PRECISION\t\tOPTION_MASK_RECIP_PRECISION\n+#define MASK_SOFT_FLOAT\t\t\tOPTION_MASK_SOFT_FLOAT\n+#define MASK_STRICT_ALIGN\t\tOPTION_MASK_STRICT_ALIGN\n+#define MASK_STRING\t\t\tOPTION_MASK_STRING\n+#define MASK_UPDATE\t\t\tOPTION_MASK_UPDATE\n+#define MASK_VSX\t\t\tOPTION_MASK_VSX\n+\n+#ifndef IN_LIBGCC2\n+#define MASK_POWERPC64\t\t\tOPTION_MASK_POWERPC64\n+#endif\n+\n+#ifdef TARGET_64BIT\n+#define MASK_64BIT\t\t\tOPTION_MASK_64BIT\n+#endif\n+\n+#ifdef TARGET_RELOCATABLE\n+#define MASK_RELOCATABLE\t\tOPTION_MASK_RELOCATABLE\n+#endif\n+\n+#ifdef TARGET_LITTLE_ENDIAN\n+#define MASK_LITTLE_ENDIAN\t\tOPTION_MASK_LITTLE_ENDIAN\n+#endif\n+\n+#ifdef TARGET_MINIMAL_TOC\n+#define MASK_MINIMAL_TOC\t\tOPTION_MASK_MINIMAL_TOC\n+#endif\n+\n+#ifdef TARGET_REGNAMES\n+#define MASK_REGNAMES\t\t\tOPTION_MASK_REGNAMES\n+#endif\n+\n+#ifdef TARGET_PROTOTYPE\n+#define MASK_PROTOTYPE\t\t\tOPTION_MASK_PROTOTYPE\n+#endif\n+\n+/* Explicit ISA options that were set.  */\n+#define rs6000_isa_flags_explicit\tglobal_options_set.x_rs6000_isa_flags\n+\n /* For power systems, we want to enable Altivec and VSX builtins even if the\n    user did not use -maltivec or -mvsx to allow the builtins to be used inside\n    of #pragma GCC target or the target attribute to change the code level for a"}, {"sha": "0f38e1792000695809db50dbf32cf7670726a8b3", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -22,6 +22,17 @@\n HeaderInclude\n config/rs6000/rs6000-opts.h\n \n+;; ISA flag bits (on/off)\n+Variable\n+HOST_WIDE_INT rs6000_isa_flags = TARGET_DEFAULT\n+\n+TargetSave\n+HOST_WIDE_INT x_rs6000_isa_flags\n+\n+;; Miscellaneous flag bits that were set explicitly by the user\n+TargetSave\n+HOST_WIDE_INT x_rs6000_isa_flags_explicit\n+\n ;; Current processor\n TargetVariable\n enum processor_type rs6000_cpu = PROCESSOR_PPC603\n@@ -86,80 +97,76 @@ HOST_WIDE_INT rs6000_builtin_mask\n TargetVariable\n unsigned int rs6000_debug\n \n-;; Save for target_flags_explicit\n-TargetSave\n-int rs6000_target_flags_explicit\n-\n ;; This option existed in the past, but now is always on.\n mpowerpc\n Target RejectNegative Undocumented Ignore\n \n mpowerpc64\n-Target Report Mask(POWERPC64)\n+Target Report Mask(POWERPC64) Var(rs6000_isa_flags)\n Use PowerPC-64 instruction set\n \n mpowerpc-gpopt\n-Target Report Mask(PPC_GPOPT) Save\n+Target Report Mask(PPC_GPOPT) Var(rs6000_isa_flags)\n Use PowerPC General Purpose group optional instructions\n \n mpowerpc-gfxopt\n-Target Report Mask(PPC_GFXOPT) Save\n+Target Report Mask(PPC_GFXOPT) Var(rs6000_isa_flags)\n Use PowerPC Graphics group optional instructions\n \n mmfcrf\n-Target Report Mask(MFCRF) Save\n+Target Report Mask(MFCRF) Var(rs6000_isa_flags)\n Use PowerPC V2.01 single field mfcr instruction\n \n mpopcntb\n-Target Report Mask(POPCNTB) Save\n+Target Report Mask(POPCNTB) Var(rs6000_isa_flags)\n Use PowerPC V2.02 popcntb instruction\n \n mfprnd\n-Target Report Mask(FPRND) Save\n+Target Report Mask(FPRND) Var(rs6000_isa_flags)\n Use PowerPC V2.02 floating point rounding instructions\n \n mcmpb\n-Target Report Mask(CMPB) Save\n+Target Report Mask(CMPB) Var(rs6000_isa_flags)\n Use PowerPC V2.05 compare bytes instruction\n \n mmfpgpr\n-Target Report Mask(MFPGPR) Save\n+Target Report Mask(MFPGPR) Var(rs6000_isa_flags)\n Use extended PowerPC V2.05 move floating point to/from GPR instructions\n \n maltivec\n-Target Report Mask(ALTIVEC) Save\n+Target Report Mask(ALTIVEC) Var(rs6000_isa_flags)\n Use AltiVec instructions\n \n mhard-dfp\n-Target Report Mask(DFP) Save\n+Target Report Mask(DFP) Var(rs6000_isa_flags)\n Use decimal floating point instructions\n \n mmulhw\n-Target Report Mask(MULHW) Save\n+Target Report Mask(MULHW) Var(rs6000_isa_flags)\n Use 4xx half-word multiply instructions\n \n mdlmzb\n-Target Report Mask(DLMZB) Save\n+Target Report Mask(DLMZB) Var(rs6000_isa_flags)\n Use 4xx string-search dlmzb instruction\n \n mmultiple\n-Target Report Mask(MULTIPLE) Save\n+Target Report Mask(MULTIPLE) Var(rs6000_isa_flags)\n Generate load/store multiple instructions\n \n mstring\n-Target Report Mask(STRING) Save\n+Target Report Mask(STRING) Var(rs6000_isa_flags)\n Generate string instructions for block moves\n \n msoft-float\n-Target Report RejectNegative Mask(SOFT_FLOAT)\n+Target Report RejectNegative Mask(SOFT_FLOAT) Var(rs6000_isa_flags)\n Do not use hardware floating point\n \n mhard-float\n-Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n+Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT) Var(rs6000_isa_flags)\n Use hardware floating point\n \n mpopcntd\n-Target Report Mask(POPCNTD) Save\n+Target Report Mask(POPCNTD) Var(rs6000_isa_flags)\n Use PowerPC V2.06 popcntd instruction\n \n mfriz\n@@ -171,7 +178,7 @@ Target RejectNegative Joined Var(rs6000_veclibabi_name)\n Vector library ABI to use\n \n mvsx\n-Target Report Mask(VSX) Save\n+Target Report Mask(VSX) Var(rs6000_isa_flags)\n Use vector/scalar (VSX) instructions\n \n mvsx-scalar-double\n@@ -211,11 +218,11 @@ Target Undocumented Report Var(TARGET_VECTORIZE_BUILTINS) Init(-1)\n ; Explicitly control whether we vectorize the builtins or not.\n \n mno-update\n-Target Report RejectNegative Mask(NO_UPDATE) Save\n+Target Report RejectNegative Mask(NO_UPDATE) Var(rs6000_isa_flags)\n Do not generate load/store with update instructions\n \n mupdate\n-Target Report RejectNegative InverseMask(NO_UPDATE, UPDATE)\n+Target Report RejectNegative InverseMask(NO_UPDATE, UPDATE) Var(rs6000_isa_flags)\n Generate load/store with update instructions\n \n msingle-pic-base\n@@ -258,7 +265,7 @@ Target Report RejectNegative Joined Var(rs6000_recip_name)\n Generate software reciprocal divide and square root for better throughput.\n \n mrecip-precision\n-Target Report Mask(RECIP_PRECISION) Save\n+Target Report Mask(RECIP_PRECISION) Var(rs6000_isa_flags)\n Assume that the reciprocal estimate instructions provide more accuracy.\n \n mno-fp-in-toc\n@@ -285,7 +292,7 @@ Place symbol+offset constants in TOC\n ;   This is at the cost of having 2 extra loads and one extra store per\n ;   function, and one less allocable register.\n mminimal-toc\n-Target Report Mask(MINIMAL_TOC)\n+Target Report Mask(MINIMAL_TOC) Var(rs6000_isa_flags)\n Use only one TOC entry per procedure\n \n mfull-toc\n@@ -309,7 +316,7 @@ Target Report Var(rs6000_block_move_inline_limit) Init(0) RejectNegative Joined\n Specify how many bytes should be moved inline before calling out to memcpy/memmove\n \n misel\n-Target Report Mask(ISEL) Save\n+Target Report Mask(ISEL) Var(rs6000_isa_flags)\n Generate isel instructions\n \n misel=no"}, {"sha": "70a5908fbea8d43661d0747e4fd5a001d893ac8e", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -40,9 +40,10 @@\n #undef\tASM_DEFAULT_SPEC\n #define\tASM_DEFAULT_SPEC \"-mppc\"\n \n-#define\tTARGET_TOC\t\t((target_flags & MASK_64BIT)\t\t\\\n-\t\t\t\t || ((target_flags & (MASK_RELOCATABLE\t\\\n-\t\t\t\t\t\t      | MASK_MINIMAL_TOC)) \\\n+#define\tTARGET_TOC\t\t((rs6000_isa_flags & OPTION_MASK_64BIT)\t\\\n+\t\t\t\t || ((rs6000_isa_flags\t\t\t\\\n+\t\t\t\t      & (OPTION_MASK_RELOCATABLE\t\\\n+\t\t\t\t\t | OPTION_MASK_MINIMAL_TOC))\t\\\n \t\t\t\t     && flag_pic > 1)\t\t\t\\\n \t\t\t\t || DEFAULT_ABI == ABI_AIX)\n \n@@ -77,13 +78,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n   else if (!strcmp (rs6000_abi_name, \"sysv-noeabi\"))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_current_abi = ABI_V4;\t\t\t\t\t\\\n-      target_flags &= ~ MASK_EABI;\t\t\t\t\t\\\n+      rs6000_isa_flags &= ~ OPTION_MASK_EABI;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else if (!strcmp (rs6000_abi_name, \"sysv-eabi\")\t\t\t\\\n \t   || !strcmp (rs6000_abi_name, \"eabi\"))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_current_abi = ABI_V4;\t\t\t\t\t\\\n-      target_flags |= MASK_EABI;\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_EABI;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else if (!strcmp (rs6000_abi_name, \"aixdesc\"))\t\t\t\\\n     rs6000_current_abi = ABI_AIX;\t\t\t\t\t\\\n@@ -102,8 +103,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   else if (!strcmp (rs6000_abi_name, \"i960-old\"))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_current_abi = ABI_V4;\t\t\t\t\t\\\n-      target_flags |= (MASK_LITTLE_ENDIAN | MASK_EABI);\t\t\t\\\n-      target_flags &= ~MASK_STRICT_ALIGN;\t\t\t\t\\\n+      rs6000_isa_flags |= (OPTION_MASK_LITTLE_ENDIAN | OPTION_MASK_EABI); \\\n+      rs6000_isa_flags &= ~OPTION_MASK_STRICT_ALIGN;\t\t\t\\\n       TARGET_NO_BITFIELD_WORD = 1;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n@@ -168,13 +169,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (TARGET_RELOCATABLE && !TARGET_MINIMAL_TOC)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      target_flags |= MASK_MINIMAL_TOC;\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\t\t\t\\\n       error (\"-mrelocatable and -mno-minimal-toc are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (TARGET_RELOCATABLE && rs6000_current_abi == ABI_AIX)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      target_flags &= ~MASK_RELOCATABLE;\t\t\t\t\\\n+      rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\t\t\t\\\n       error (\"-mrelocatable and -mcall-%s are incompatible\",\t\t\\\n \t     rs6000_abi_name);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -188,7 +189,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (rs6000_current_abi == ABI_AIX && TARGET_LITTLE_ENDIAN)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      target_flags &= ~MASK_LITTLE_ENDIAN;\t\t\t\t\\\n+      rs6000_isa_flags &= ~OPTION_MASK_LITTLE_ENDIAN;\t\t\t\\\n       error (\"-mcall-aixdesc must be big endian\");\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -200,7 +201,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   /* Treat -fPIC the same as -mrelocatable.  */\t\t\t\t\\\n   if (flag_pic > 1 && DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_RELOCATABLE | OPTION_MASK_MINIMAL_TOC; \\\n       TARGET_NO_FP_IN_TOC = 1;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -212,9 +213,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #ifndef RS6000_BI_ARCH\n # define SUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if ((TARGET_DEFAULT ^ target_flags) & MASK_64BIT)\t\t\t\\\n+  if ((TARGET_DEFAULT ^ rs6000_isa_flags) & OPTION_MASK_64BIT)\t\t\\\n     error (\"-m%s not supported in this configuration\",\t\t\t\\\n-\t   (target_flags & MASK_64BIT) ? \"64\" : \"32\");\t\t\t\\\n+\t   (rs6000_isa_flags & OPTION_MASK_64BIT) ? \"64\" : \"32\");\t\\\n } while (0)\n #endif\n \n@@ -500,8 +501,8 @@ extern int fixuplabelno;\n #define TARGET_OS_SYSV_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      if (target_flags_explicit\t\t\t\\\n-\t  & MASK_RELOCATABLE)\t\t\t\\\n+      if (rs6000_isa_flags_explicit\t\t\\\n+\t  & OPTION_MASK_RELOCATABLE)\t\t\\\n \tbuiltin_define (\"_RELOCATABLE\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "60ca4fd86153bda647867e41e03954e25f9aa8a3", "filename": "gcc/config/rs6000/sysv4.opt", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.opt?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -49,32 +49,32 @@ Target Report Var(TARGET_NO_BITFIELD_TYPE) Save\n Align to the base type of the bit-field\n \n mstrict-align\n-Target Report Mask(STRICT_ALIGN)\n+Target Report Mask(STRICT_ALIGN) Var(rs6000_isa_flags)\n Align to the base type of the bit-field\n Don't assume that unaligned accesses are handled by the system\n \n mrelocatable\n-Target Report Mask(RELOCATABLE)\n+Target Report Mask(RELOCATABLE) Var(rs6000_isa_flags)\n Produce code relocatable at runtime\n \n mrelocatable-lib\n Target\n Produce code relocatable at runtime\n \n mlittle-endian\n-Target Report RejectNegative Mask(LITTLE_ENDIAN)\n+Target Report RejectNegative Mask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n Produce little endian code\n \n mlittle\n-Target Report RejectNegative Mask(LITTLE_ENDIAN)\n+Target Report RejectNegative Mask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n Produce little endian code\n \n mbig-endian\n-Target Report RejectNegative InverseMask(LITTLE_ENDIAN)\n+Target Report RejectNegative InverseMask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n Produce big endian code\n \n mbig\n-Target Report RejectNegative InverseMask(LITTLE_ENDIAN)\n+Target Report RejectNegative InverseMask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n Produce big endian code\n \n ;; FIXME: This does nothing.  What should be done?\n@@ -96,7 +96,7 @@ Target RejectNegative\n no description yet\n \n meabi\n-Target Report Mask(EABI)\n+Target Report Mask(EABI) Var(rs6000_isa_flags)\n Use EABI\n \n mbit-word\n@@ -138,11 +138,11 @@ Target RejectNegative\n no description yet\n \n m64\n-Target Report RejectNegative Negative(m32) Mask(64BIT)\n+Target Report RejectNegative Negative(m32) Mask(64BIT) Var(rs6000_isa_flags)\n Generate 64-bit code\n \n m32\n-Target Report RejectNegative Negative(m64) InverseMask(64BIT)\n+Target Report RejectNegative Negative(m64) InverseMask(64BIT) Var(rs6000_isa_flags)\n Generate 32-bit code\n \n mnewlib"}, {"sha": "6135f52aefe9b4c92366a1608df467c23c70241b", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=4d9675496a28ef6184f2a9c3ac5e6e3ea63606c1", "patch": "@@ -26,7 +26,8 @@ rs6000.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(OBSTACK_H) $(TREE_H) $(EXPR_H) $(OPTABS_H) except.h function.h \\\n   output.h dbxout.h $(BASIC_BLOCK_H) toplev.h $(GGC_H) $(HASHTAB_H) \\\n   $(TM_P_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h reload.h gt-rs6000.h \\\n-  cfgloop.h $(OPTS_H) $(COMMON_TARGET_H) dumpfile.h\n+  cfgloop.h $(OPTS_H) $(COMMON_TARGET_H) dumpfile.h \\\n+  $(srcdir)/config/rs6000/rs6000-cpus.def\n \n rs6000-c.o: $(srcdir)/config/rs6000/rs6000-c.c \\\n     $(srcdir)/config/rs6000/rs6000-protos.h \\"}]}