{"sha": "56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmY2EyNGFkOGM2NDMzYTYxNDYxMjhmZDJjMmViNjRiNGYwYTFlNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-03-12T10:44:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-03-12T10:44:52Z"}, "message": "target-supports.exp (check_profiling_available): Return false for VxWorks.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_profiling_available): Return false\n\tfor VxWorks.\n\t(check_effective_target_vxworks_kernel): New procedure.\n\t* gcc.dg/20040813-1.c: Extend list of stabless targets to include\n\tVxWorks.\n\t* gcc.dg/builtins-config.h: Do not define HAVE_C99_RUNTIME on VxWorks.\n\t* gcc.dg/intmax_t-1.c: Extend the list of targets without inttypes.h\n\tto include VxWorks.\n\t* gcc.dg/vxworks/initpri2.c: Require vxworks_kernel.\n\nFrom-SVN: r122838", "tree": {"sha": "bd762c4da0258c53de1422f1bf44ebba8157a945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd762c4da0258c53de1422f1bf44ebba8157a945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/comments", "author": null, "committer": null, "parents": [{"sha": "8906bbc09ca885227108179b7b6a8343b304460e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8906bbc09ca885227108179b7b6a8343b304460e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8906bbc09ca885227108179b7b6a8343b304460e"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "2c3f7d8dcb410ca94d02c4894fec0f08f4c565a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "patch": "@@ -1,3 +1,15 @@\n+2007-03-12  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* lib/target-supports.exp (check_profiling_available): Return false\n+\tfor VxWorks.\n+\t(check_effective_target_vxworks_kernel): New procedure.\n+\t* gcc.dg/20040813-1.c: Extend list of stabless targets to include\n+\tVxWorks.\n+\t* gcc.dg/builtins-config.h: Do not define HAVE_C99_RUNTIME on VxWorks.\n+\t* gcc.dg/intmax_t-1.c: Extend the list of targets without inttypes.h\n+\tto include VxWorks.\n+\t* gcc.dg/vxworks/initpri2.c: Require vxworks_kernel.\n+\n 2007-03-12  Richard Sandiford  <richard@codesourcery.com>\n \n \t* gcc.c-torture/compile/981006-1.c: Use the non-PIC options if"}, {"sha": "df36058a4ca9853e8547e6d692d98575676f370c", "filename": "gcc/testsuite/gcc.dg/20040813-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c?ref=56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "patch": "@@ -2,7 +2,7 @@\n /* Contributed by Devang Patel  <dpatel@apple.com>  */\n \n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* *-*-netware* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-sysv5* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* *-*-netware* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-sysv5* *-*-vxworks* } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs\" } */\n \n int"}, {"sha": "060db4ffc189eac4a3078cbee71142037d662db3", "filename": "gcc/testsuite/gcc.dg/builtins-config.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h?ref=56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "patch": "@@ -17,6 +17,8 @@\n /* FreeBSD before version 5 doesn't have the entire C99 runtime. */\n #elif defined(__netware__)\n /* NetWare doesn't have the entire C99 runtime.  */\n+#elif defined(__vxworks)\n+/* VxWorks doesn't have a full C99 time.  (cabs is missing, for example.)  */\n #elif (defined(__APPLE__) && defined(__ppc__) \\\n        && ! defined (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__))\n /* MacOS versions before 10.3 don't have many C99 functions.  "}, {"sha": "8357aa961db49779adb90f2eade9459d750de0db", "filename": "gcc/testsuite/gcc.dg/intmax_t-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2Fgcc.dg%2Fintmax_t-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2Fgcc.dg%2Fintmax_t-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fintmax_t-1.c?ref=56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wall\" } */\n-/* { dg-error \"\" \"\" { target *-*-solaris2.5.1 *arm*-*-*elf* xscale*-*-elf* xtensa-*-elf* } 0 } */\n+/* { dg-error \"\" \"\" { target *-*-solaris2.5.1 *arm*-*-*elf* xscale*-*-elf* xtensa-*-elf* *-*-vxworks* } 0 } */\n \n /* Compile with -Wall to get a warning if built-in and system intmax_t don't\n    match.  */"}, {"sha": "7f483efadb2bc148bb1c65f68166bf3b4dacb29f", "filename": "gcc/testsuite/gcc.dg/vxworks/initpri2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Finitpri2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Finitpri2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvxworks%2Finitpri2.c?ref=56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "patch": "@@ -1,7 +1,7 @@\n /* On VxWorks, in kernel mode, there is no support for .ctors/.dtors.\n    Instead, initialization is handled by munch.  */\n \n-/* { dg-do compile { target *-*-vxworks* } } */\n+/* { dg-do compile { target vxworks_kernel } } */\n /* { dg-final { scan-assembler-not \"\\.ctors\" } } */\n /* { dg-final { scan-assembler-not \"\\.dtors\" } } */\n "}, {"sha": "e8efd58365dfeb12f133344dd1b85b86cc9ca96c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "patch": "@@ -350,6 +350,7 @@ proc check_profiling_available { test_what } {\n \t     || [istarget m68k-*-elf]\n \t     || [istarget mips*-*-elf]\n \t     || [istarget xtensa-*-elf]\n+\t     || [istarget *-*-vxworks*]\n \t     || [istarget *-*-windiss] } {\n \t    set profiling_available_saved 0\n \t} else {\n@@ -2186,3 +2187,13 @@ proc check_effective_target_simulator { } {\n \n     return 0\n }\n+\n+# Return 1 if the target is a VxWorks RTP.\n+\n+proc check_effective_target_vxworks_kernel { } {\n+    return [check_no_compiler_messages vxworks_kernel assembly {\n+\t#if !defined __vxworks || defined __RTP__\n+\t#error NO\n+\t#endif\n+    }]\n+}"}]}