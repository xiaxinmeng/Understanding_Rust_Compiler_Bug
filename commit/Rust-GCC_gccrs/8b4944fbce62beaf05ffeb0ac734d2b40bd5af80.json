{"sha": "8b4944fbce62beaf05ffeb0ac734d2b40bd5af80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0OTQ0ZmJjZTYyYmVhZjA1ZmZlYjBhYzczNGQyYjQwYmQ1YWY4MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-11T07:49:07Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-11T07:49:07Z"}, "message": "function.c (put_reg_into_stack): Allow type to be NULL.\n\n        * function.c (put_reg_into_stack): Allow type to be NULL.\n        (schedule_fixup_var_refs): Likewise.\n        (gen_mem_addressof): Allow decl to be NULL.\n        (put_addressof_into_stack): Likewise.\n\nFrom-SVN: r35625", "tree": {"sha": "0a2d8112f2387692de017ca46703a414342a5682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a2d8112f2387692de017ca46703a414342a5682"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b4944fbce62beaf05ffeb0ac734d2b40bd5af80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4944fbce62beaf05ffeb0ac734d2b40bd5af80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4944fbce62beaf05ffeb0ac734d2b40bd5af80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4944fbce62beaf05ffeb0ac734d2b40bd5af80/comments", "author": null, "committer": null, "parents": [{"sha": "6481aabdb48113dfafec8f0ac017c1f8832e0736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6481aabdb48113dfafec8f0ac017c1f8832e0736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6481aabdb48113dfafec8f0ac017c1f8832e0736"}], "stats": {"total": 73, "additions": 51, "deletions": 22}, "files": [{"sha": "fcc73dda3efb773af1a2482fc535b4bb61921eea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4944fbce62beaf05ffeb0ac734d2b40bd5af80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4944fbce62beaf05ffeb0ac734d2b40bd5af80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b4944fbce62beaf05ffeb0ac734d2b40bd5af80", "patch": "@@ -1,5 +1,10 @@\n 2000-08-11  Richard Henderson  <rth@cygnus.com>\n \n+\t* function.c (put_reg_into_stack): Allow type to be NULL.\n+\t(schedule_fixup_var_refs): Likewise.\n+\t(gen_mem_addressof): Allow decl to be NULL.\n+\t(put_addressof_into_stack): Likewise.\n+\n \t* flow.c (merge_blocks_nomove): Be more careful about\n \tlocating the beginning of block A.\n "}, {"sha": "62ae4824e7477df899be321da9332eafbff3704d", "filename": "gcc/function.c", "status": "modified", "additions": 46, "deletions": 22, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4944fbce62beaf05ffeb0ac734d2b40bd5af80/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4944fbce62beaf05ffeb0ac734d2b40bd5af80/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=8b4944fbce62beaf05ffeb0ac734d2b40bd5af80", "patch": "@@ -1481,6 +1481,7 @@ put_reg_into_stack (function, reg, type, promoted_mode, decl_mode, volatile_p,\n   struct function *func = function ? function : cfun;\n   rtx new = 0;\n   unsigned int regno = original_regno;\n+  int unsigned_p;\n \n   if (regno == 0)\n     regno = REGNO (reg);\n@@ -1502,9 +1503,12 @@ put_reg_into_stack (function, reg, type, promoted_mode, decl_mode, volatile_p,\n      previously generated stack slot, then we need to copy the bit in\n      case it was set for other reasons.  For instance, it is set for\n      __builtin_va_alist.  */\n-  MEM_SET_IN_STRUCT_P (reg,\n-\t\t       AGGREGATE_TYPE_P (type) || MEM_IN_STRUCT_P (new));\n-  MEM_ALIAS_SET (reg) = get_alias_set (type);\n+  if (type)\n+    {\n+      MEM_SET_IN_STRUCT_P (reg,\n+\t\t\t   AGGREGATE_TYPE_P (type) || MEM_IN_STRUCT_P (new));\n+      MEM_ALIAS_SET (reg) = get_alias_set (type);\n+    }\n   if (used_p)\n     schedule_fixup_var_refs (function, reg, type, promoted_mode, ht);\n }\n@@ -1520,6 +1524,8 @@ schedule_fixup_var_refs (function, reg, type, promoted_mode, ht)\n      enum machine_mode promoted_mode;\n      struct hash_table *ht;\n {\n+  int unsigned_p = type ? TREE_UNSIGNED (type) : 0;\n+\n   if (function != 0)\n     {\n       struct var_refs_queue *temp;\n@@ -1528,13 +1534,13 @@ schedule_fixup_var_refs (function, reg, type, promoted_mode, ht)\n \t= (struct var_refs_queue *) xmalloc (sizeof (struct var_refs_queue));\n       temp->modified = reg;\n       temp->promoted_mode = promoted_mode;\n-      temp->unsignedp = TREE_UNSIGNED (type);\n+      temp->unsignedp = unsigned_p;\n       temp->next = function->fixup_var_refs_queue;\n       function->fixup_var_refs_queue = temp;\n     }\n   else\n     /* Variable is local; fix it up now.  */\n-    fixup_var_refs (reg, promoted_mode, TREE_UNSIGNED (type), ht);\n+    fixup_var_refs (reg, promoted_mode, unsigned_p, ht);\n }\n \f\n static void\n@@ -2807,7 +2813,6 @@ gen_mem_addressof (reg, decl)\n      rtx reg;\n      tree decl;\n {\n-  tree type = TREE_TYPE (decl);\n   rtx r = gen_rtx_ADDRESSOF (Pmode, gen_reg_rtx (GET_MODE (reg)),\n \t\t\t     REGNO (reg), decl);\n \n@@ -2817,14 +2822,21 @@ gen_mem_addressof (reg, decl)\n   RTX_UNCHANGING_P (XEXP (r, 0)) = RTX_UNCHANGING_P (reg);\n \n   PUT_CODE (reg, MEM);\n-  PUT_MODE (reg, DECL_MODE (decl));\n   XEXP (reg, 0) = r;\n-  MEM_VOLATILE_P (reg) = TREE_SIDE_EFFECTS (decl);\n-  MEM_SET_IN_STRUCT_P (reg, AGGREGATE_TYPE_P (type));\n-  MEM_ALIAS_SET (reg) = get_alias_set (decl);\n+  if (decl)\n+    {\n+      tree type = TREE_TYPE (decl);\n+\n+      PUT_MODE (reg, DECL_MODE (decl));\n+      MEM_VOLATILE_P (reg) = TREE_SIDE_EFFECTS (decl);\n+      MEM_SET_IN_STRUCT_P (reg, AGGREGATE_TYPE_P (type));\n+      MEM_ALIAS_SET (reg) = get_alias_set (decl);\n \n-  if (TREE_USED (decl) || DECL_INITIAL (decl) != 0)\n-    fixup_var_refs (reg, GET_MODE (reg), TREE_UNSIGNED (type), 0);\n+      if (TREE_USED (decl) || DECL_INITIAL (decl) != 0)\n+\tfixup_var_refs (reg, GET_MODE (reg), TREE_UNSIGNED (type), 0);\n+    }\n+  else\n+    fixup_var_refs (reg, GET_MODE (reg), 0, 0);\n \n   return reg;\n }\n@@ -2850,21 +2862,33 @@ put_addressof_into_stack (r, ht)\n      rtx r;\n      struct hash_table *ht;\n {\n-  tree decl = ADDRESSOF_DECL (r);\n+  tree decl, type;\n+  int volatile_p, used_p;\n+\n   rtx reg = XEXP (r, 0);\n \n   if (GET_CODE (reg) != REG)\n     abort ();\n \n-  put_reg_into_stack (0, reg, TREE_TYPE (decl), GET_MODE (reg),\n-\t\t      GET_MODE (reg),\n-\t\t      (TREE_CODE (decl) != SAVE_EXPR\n-\t\t       && TREE_THIS_VOLATILE (decl)),\n-\t\t      ADDRESSOF_REGNO (r),\n-\t\t      (TREE_USED (decl)\n-\t\t       || (TREE_CODE (decl) != SAVE_EXPR\n-\t\t\t   && DECL_INITIAL (decl) != 0)),\n-\t\t      ht);\n+  decl = ADDRESSOF_DECL (r);\n+  if (decl)\n+    {\n+      type = TREE_TYPE (decl);\n+      volatile_p = (TREE_CODE (decl) != SAVE_EXPR\n+\t\t    && TREE_THIS_VOLATILE (decl));\n+      used_p = (TREE_USED (decl)\n+\t\t|| (TREE_CODE (decl) != SAVE_EXPR\n+\t\t    && DECL_INITIAL (decl) != 0));\n+    }\n+  else\n+    {\n+      type = NULL_TREE;\n+      volatile_p = 0;\n+      used_p = 1;\n+    }\n+\n+  put_reg_into_stack (0, reg, type, GET_MODE (reg), GET_MODE (reg),\n+\t\t      volatile_p, ADDRESSOF_REGNO (r), used_p, ht);\n }\n \n /* List of replacements made below in purge_addressof_1 when creating"}]}