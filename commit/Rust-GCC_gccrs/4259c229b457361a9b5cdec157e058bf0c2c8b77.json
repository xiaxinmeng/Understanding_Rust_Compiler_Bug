{"sha": "4259c229b457361a9b5cdec157e058bf0c2c8b77", "node_id": "C_kwDOANBUbNoAKDQyNTljMjI5YjQ1NzM2MWE5YjVjZGVjMTU3ZTA1OGJmMGMyYzhiNzc", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-27T15:13:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-29T21:24:27Z"}, "message": "c++: alias CTAD and member alias templates [PR104470]\n\nIn this testcase, we were trying to substitute into\nvariant<Foo<T>>::__accepted_type, but failed to look it up because\nvariant<Foo<T>> doesn't exist.  In other cases we already rewrite such\nthings into a dependent reference; we need to do that for alias templates as\nwell.\n\nThis caused some testsuite regressions on alias uses outside of deduction\nguides, so I've made all of this rewriting conditional on a new tf_dguide\ntsubst flag.\n\n\tPR c++/104470\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (enum tsubst_flags): Add tf_dguide.\n\t* pt.cc (tsubst_aggr_type): Check it.\n\t(tsubst_baselink, tsubst_copy): Check it.\n\t(maybe_dependent_member_ref): Check it.\n\t(instantiate_alias_template): Handle it.\n\t(build_deduction_guide): Set it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/explicit11.C: Second example also ill-formed.\n\t* g++.dg/cpp2a/class-deduction-alias12.C: New test.", "tree": {"sha": "b5b991c4bb1f2021423c93d57b8dbed42fdb5b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b991c4bb1f2021423c93d57b8dbed42fdb5b27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4259c229b457361a9b5cdec157e058bf0c2c8b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4259c229b457361a9b5cdec157e058bf0c2c8b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4259c229b457361a9b5cdec157e058bf0c2c8b77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4259c229b457361a9b5cdec157e058bf0c2c8b77/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53e7252140c95afc859ade521a61ab4115d7fb11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e7252140c95afc859ade521a61ab4115d7fb11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53e7252140c95afc859ade521a61ab4115d7fb11"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "72177999968ccd1475414cb555740e900e2db4cb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4259c229b457361a9b5cdec157e058bf0c2c8b77/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4259c229b457361a9b5cdec157e058bf0c2c8b77/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4259c229b457361a9b5cdec157e058bf0c2c8b77", "patch": "@@ -5565,6 +5565,7 @@ enum tsubst_flags {\n \t\t\t\t    constraint normalization.  */\n   tf_tst_ok = 1 << 12,\t\t /* Allow a typename-specifier to name\n \t\t\t\t    a template (C++17 or later).  */\n+  tf_dguide = 1 << 13,\t\t/* Building a deduction guide from a ctor.  */\n   /* Convenient substitution flags combinations.  */\n   tf_warning_or_error = tf_warning | tf_error\n };"}, {"sha": "81c3c598c71e04382b05adfc5bd790f44e75542e", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4259c229b457361a9b5cdec157e058bf0c2c8b77/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4259c229b457361a9b5cdec157e058bf0c2c8b77/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=4259c229b457361a9b5cdec157e058bf0c2c8b77", "patch": "@@ -13730,8 +13730,8 @@ tsubst_aggr_type (tree t,\n \t\t\t\t\t complain, in_decl);\n \t  if (argvec == error_mark_node)\n \t    r = error_mark_node;\n-\t  else if (!entering_scope\n-\t\t   && cxx_dialect >= cxx17 && dependent_scope_p (context))\n+\t  else if (!entering_scope && (complain & tf_dguide)\n+\t\t   && dependent_scope_p (context))\n \t    {\n \t      /* See maybe_dependent_member_ref.  */\n \t      tree name = TYPE_IDENTIFIER (t);\n@@ -16497,7 +16497,7 @@ tsubst_baselink (tree baselink, tree object_type,\n \tname = make_conv_op_name (optype);\n \n       /* See maybe_dependent_member_ref.  */\n-      if (dependent_scope_p (qualifying_scope))\n+      if ((complain & tf_dguide) && dependent_scope_p (qualifying_scope))\n \t{\n \t  if (template_id_p)\n \t    name = build2 (TEMPLATE_ID_EXPR, unknown_type_node, name,\n@@ -16817,7 +16817,7 @@ static tree\n maybe_dependent_member_ref (tree t, tree args, tsubst_flags_t complain,\n \t\t\t    tree in_decl)\n {\n-  if (cxx_dialect < cxx17)\n+  if (!(complain & tf_dguide))\n     return NULL_TREE;\n \n   tree ctx = context_for_name_lookup (t);\n@@ -17075,7 +17075,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t     have to substitute this with one having context `D<int>'.  */\n \n \t  tree context = tsubst (DECL_CONTEXT (t), args, complain, in_decl);\n-\t  if (dependent_scope_p (context))\n+\t  if ((complain & tf_dguide) && dependent_scope_p (context))\n \t    {\n \t      /* When rewriting a constructor into a deduction guide, a\n \t\t non-dependent name can become dependent, so memtmpl<args>\n@@ -21715,6 +21715,21 @@ instantiate_alias_template (tree tmpl, tree args, tsubst_flags_t complain)\n   if (tmpl == error_mark_node || args == error_mark_node)\n     return error_mark_node;\n \n+  /* See maybe_dependent_member_ref.  */\n+  if (complain & tf_dguide)\n+    {\n+      tree ctx = tsubst_aggr_type (DECL_CONTEXT (tmpl), args, complain,\n+\t\t\t\t   tmpl, true);\n+      if (dependent_scope_p (ctx))\n+\t{\n+\t  tree name = DECL_NAME (tmpl);\n+\t  tree fullname = build_nt (TEMPLATE_ID_EXPR, name,\n+\t\t\t\t    INNERMOST_TEMPLATE_ARGS (args));\n+\t  tree tname = build_typename_type (ctx, name, fullname, typename_type);\n+\t  return TYPE_NAME (tname);\n+\t}\n+    }\n+\n   args =\n     coerce_innermost_template_parms (DECL_TEMPLATE_PARMS (tmpl),\n \t\t\t\t     args, tmpl, complain,\n@@ -29279,6 +29294,8 @@ build_deduction_guide (tree type, tree ctor, tree outer_args, tsubst_flags_t com\n       ++processing_template_decl;\n       bool ok = true;\n \n+      complain |= tf_dguide;\n+\n       fn_tmpl\n \t= (TREE_CODE (ctor) == TEMPLATE_DECL ? ctor\n \t   : DECL_TI_TEMPLATE (ctor));"}, {"sha": "725e758018fb8d2ac7401cfc89f81a4cef9c5857", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias12.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4259c229b457361a9b5cdec157e058bf0c2c8b77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4259c229b457361a9b5cdec157e058bf0c2c8b77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias12.C?ref=4259c229b457361a9b5cdec157e058bf0c2c8b77", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/104470\n+// { dg-do compile { target c++20 } }\n+\n+template<typename _Types>\n+class variant\n+{\n+  template<typename _Tp>\n+    static constexpr int __accepted_index = 0;\n+  template<int _Np>\n+    using __to_type = int;\n+  template<typename _Tp>\n+    using __accepted_type = __to_type<__accepted_index<_Tp>>;\n+  template<typename _Tp, typename _Tj = __accepted_type<_Tp>>\n+    variant(_Tp __t)  { }\n+};\n+template <typename T>\n+struct Foo\n+{\n+  T value;\n+};\n+template <typename T>\n+using V = variant<Foo<T>>;\n+V e = Foo{1};\t\t\t// { dg-error \"\" }"}, {"sha": "b6adfd03749ba76288ccc5b6a086ccb2c24c4546", "filename": "gcc/testsuite/g++.dg/cpp2a/explicit11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4259c229b457361a9b5cdec157e058bf0c2c8b77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4259c229b457361a9b5cdec157e058bf0c2c8b77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit11.C?ref=4259c229b457361a9b5cdec157e058bf0c2c8b77", "patch": "@@ -26,4 +26,4 @@ struct B {\n   template<typename U> B(U, TA<U>);\n };\n \n-B b{(int *)0, (char *)0};\n+B b{(int *)0, (char *)0};\t// { dg-error \"deduction|no match\" }"}]}