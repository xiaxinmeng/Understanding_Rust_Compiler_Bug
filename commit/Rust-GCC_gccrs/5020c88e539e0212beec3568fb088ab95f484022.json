{"sha": "5020c88e539e0212beec3568fb088ab95f484022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAyMGM4OGU1MzllMDIxMmJlZWMzNTY4ZmIwODhhYjk1ZjQ4NDAyMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-08-31T11:19:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-08-31T11:19:33Z"}, "message": "[C++ PATCH] Remove K&R declaration hack.\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-08/msg01885.html\n\tgcc/\n\t* doc/extend.texi (Backwards Compatibility): Remove implicit\n\textern C leeway of () being (...).\n\tgcc/cp/\n\t* decl.c (decls_match): Remove SYSTEM_IMPLICIT_EXTERN_C matching\n\tof return types and parms.\n\t* parser.c (cp_parser_parameter_declaration_clause): Likewise,\n\t'()' always means '(void)'.\n\nFrom-SVN: r264013", "tree": {"sha": "c75d0f1844e0d348ab762f048d09ca137a0aaec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c75d0f1844e0d348ab762f048d09ca137a0aaec1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5020c88e539e0212beec3568fb088ab95f484022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5020c88e539e0212beec3568fb088ab95f484022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5020c88e539e0212beec3568fb088ab95f484022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5020c88e539e0212beec3568fb088ab95f484022/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "553bb257848e469053abe84abf8987f0bdbe315a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553bb257848e469053abe84abf8987f0bdbe315a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553bb257848e469053abe84abf8987f0bdbe315a"}], "stats": {"total": 49, "additions": 17, "deletions": 32}, "files": [{"sha": "1fbcbd5bea5b0cdfdfb52ba283a6f346e9d33910", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5020c88e539e0212beec3568fb088ab95f484022/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5020c88e539e0212beec3568fb088ab95f484022/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5020c88e539e0212beec3568fb088ab95f484022", "patch": "@@ -1,3 +1,8 @@\n+2018-08-31  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* doc/extend.texi (Backwards Compatibility): Remove implicit\n+\textern C leeway of () being (...).\n+\n 2018-08-31  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* ipa-inline.c (can_inline_edge_by_limits_p): Fix typos in comment."}, {"sha": "0c5a4bf71c59ca7adcd2ca835d01ae2a92e28699", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5020c88e539e0212beec3568fb088ab95f484022/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5020c88e539e0212beec3568fb088ab95f484022/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5020c88e539e0212beec3568fb088ab95f484022", "patch": "@@ -1,3 +1,10 @@\n+2018-08-31  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (decls_match): Remove SYSTEM_IMPLICIT_EXTERN_C matching\n+\tof return types and parms.\n+\t* parser.c (cp_parser_parameter_declaration_clause): Likewise,\n+\t'()' always means '(void)'.\n+\n 2018-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/87095"}, {"sha": "d743e6fef25f5707a8f840492383ebc5c6f00c6e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5020c88e539e0212beec3568fb088ab95f484022/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5020c88e539e0212beec3568fb088ab95f484022/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5020c88e539e0212beec3568fb088ab95f484022", "patch": "@@ -968,30 +968,12 @@ decls_match (tree newdecl, tree olddecl, bool record_versions /* = true */)\n       if (same_type_p (TREE_TYPE (f1), r2))\n \t{\n \t  if (!prototype_p (f2) && DECL_EXTERN_C_P (olddecl)\n-\t      && (fndecl_built_in_p (olddecl)\n-#ifdef SYSTEM_IMPLICIT_EXTERN_C\n-\t\t  || (DECL_IN_SYSTEM_HEADER (newdecl) && !DECL_CLASS_SCOPE_P (newdecl))\n-\t\t  || (DECL_IN_SYSTEM_HEADER (olddecl) && !DECL_CLASS_SCOPE_P (olddecl))\n-#endif\n-\t      ))\n+\t      && fndecl_built_in_p (olddecl))\n \t    {\n \t      types_match = self_promoting_args_p (p1);\n \t      if (p1 == void_list_node)\n \t\tTREE_TYPE (newdecl) = TREE_TYPE (olddecl);\n \t    }\n-#ifdef SYSTEM_IMPLICIT_EXTERN_C\n-\t  else if (!prototype_p (f1)\n-\t\t   && (DECL_EXTERN_C_P (olddecl)\n-\t\t       && DECL_IN_SYSTEM_HEADER (olddecl)\n-\t\t       && !DECL_CLASS_SCOPE_P (olddecl))\n-\t\t   && (DECL_EXTERN_C_P (newdecl)\n-\t\t       && DECL_IN_SYSTEM_HEADER (newdecl)\n-\t\t       && !DECL_CLASS_SCOPE_P (newdecl)))\n-\t    {\n-\t      types_match = self_promoting_args_p (p2);\n-\t      TREE_TYPE (newdecl) = TREE_TYPE (olddecl);\n-\t    }\n-#endif\n \t  else\n \t    types_match =\n \t      compparms (p1, p2)"}, {"sha": "f5e4fa4ff0730b378080791d733b05e23228691d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5020c88e539e0212beec3568fb088ab95f484022/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5020c88e539e0212beec3568fb088ab95f484022/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5020c88e539e0212beec3568fb088ab95f484022", "patch": "@@ -21378,16 +21378,7 @@ cp_parser_parameter_declaration_clause (cp_parser* parser)\n     }\n   else if (token->type == CPP_CLOSE_PAREN)\n     /* There are no parameters.  */\n-    {\n-#ifdef SYSTEM_IMPLICIT_EXTERN_C\n-      if (in_system_header_at (input_location)\n-\t  && current_class_type == NULL\n-\t  && current_lang_name == lang_name_c)\n-\treturn NULL_TREE;\n-      else\n-#endif\n-\treturn void_list_node;\n-    }\n+    return void_list_node;\n   /* Check for `(void)', too, which is a special case.  */\n   else if (token->keyword == RID_VOID\n \t   && (cp_lexer_peek_nth_token (parser->lexer, 2)->type"}, {"sha": "9c3cfdbf0229d5f3fb2dd93faf40cf3c0b91c1d6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5020c88e539e0212beec3568fb088ab95f484022/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5020c88e539e0212beec3568fb088ab95f484022/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5020c88e539e0212beec3568fb088ab95f484022", "patch": "@@ -23685,9 +23685,9 @@ deprecated.   @xref{Deprecated Features}.\n @item Implicit C language\n Old C system header files did not contain an @code{extern \"C\" @{@dots{}@}}\n scope to set the language.  On such systems, all system header files are\n-implicitly scoped inside a C language scope.  Also, an empty prototype\n-@code{()} is treated as an unspecified number of arguments, rather\n-than no arguments, as C++ demands.\n+implicitly scoped inside a C language scope.  Such headers must\n+correctly prototype function argument types, there is no leeway for\n+@code{()} to indicate an unspecified set of arguments.\n \n @end table\n "}]}