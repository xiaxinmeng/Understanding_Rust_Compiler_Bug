{"sha": "cb273d81a45092ceee793f0357526e291f03c7b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyNzNkODFhNDUwOTJjZWVlNzkzZjAzNTc1MjZlMjkxZjAzYzdiNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-05T17:09:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-06T19:44:23Z"}, "message": "analyzer: round-trip pointer-equality through intptr_t\n\nWhen investigating how the analyzer handles malloc/free of Cray pointers\nin gfortran I noticed that that analyzer was losing information on\npointers that were cast to an integer type, and then back to a pointer\ntype again.\n\nThe root cause is that region_model::maybe_cast_1 was only preserving\nthe region_svalue-ness of the result if both types were pointers,\ninstead returning an unknown_svalue for a pointer-to-int cast.\n\nThis patch updates the above code so that it attempts to use a\nregion_svalue if *either* type is a pointer\n\nDoing so allows the analyzer to recognize that the same underlying\nregion is in use through various casts through integer types.\n\ngcc/analyzer/ChangeLog:\n\t* region-model.cc (region_model::maybe_cast_1): Attempt to provide\n\ta region_svalue if either type is a pointer, rather than if both\n\ttypes are pointers.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/torture/intptr_t.c: New test.", "tree": {"sha": "ec55943171813f6aee0f75f7a08d3a5a74ec5783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec55943171813f6aee0f75f7a08d3a5a74ec5783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb273d81a45092ceee793f0357526e291f03c7b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb273d81a45092ceee793f0357526e291f03c7b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb273d81a45092ceee793f0357526e291f03c7b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb273d81a45092ceee793f0357526e291f03c7b7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ccdd460d1033f7e9158b1c6adfe208f315d1300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccdd460d1033f7e9158b1c6adfe208f315d1300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ccdd460d1033f7e9158b1c6adfe208f315d1300"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "ba59131ce4bdb36b16c470294a28511cf3cd7585", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb273d81a45092ceee793f0357526e291f03c7b7/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb273d81a45092ceee793f0357526e291f03c7b7/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=cb273d81a45092ceee793f0357526e291f03c7b7", "patch": "@@ -1,3 +1,9 @@\n+2020-02-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region_model::maybe_cast_1): Attempt to provide\n+\ta region_svalue if either type is a pointer, rather than if both\n+\ttypes are pointers.\n+\n 2020-02-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* engine.cc (exploded_node::dump_dot): Show merger enodes."}, {"sha": "60363c726d78e367fe7687262e1b8f2905ac5053", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb273d81a45092ceee793f0357526e291f03c7b7/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb273d81a45092ceee793f0357526e291f03c7b7/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=cb273d81a45092ceee793f0357526e291f03c7b7", "patch": "@@ -4977,7 +4977,7 @@ region_model::maybe_cast_1 (tree dst_type, svalue_id sid)\n     return sid;\n \n   if (POINTER_TYPE_P (dst_type)\n-      && POINTER_TYPE_P (src_type))\n+      || POINTER_TYPE_P (src_type))\n     {\n       /* Pointer to region.  */\n       if (region_svalue *ptr_sval = sval->dyn_cast_region_svalue ())"}, {"sha": "f6f12dd764c6e6dd8db4b1f9b2ca4d891f5f6754", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb273d81a45092ceee793f0357526e291f03c7b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb273d81a45092ceee793f0357526e291f03c7b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb273d81a45092ceee793f0357526e291f03c7b7", "patch": "@@ -1,3 +1,7 @@\n+2020-02-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/torture/intptr_t.c: New test.\n+\n 2020-02-06  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.target/powerpc/pr93012.c: New."}, {"sha": "847ba626350b9eb0e5062bf6b49b5a6a0ed4dc3d", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/intptr_t.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb273d81a45092ceee793f0357526e291f03c7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fintptr_t.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb273d81a45092ceee793f0357526e291f03c7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fintptr_t.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fintptr_t.c?ref=cb273d81a45092ceee793f0357526e291f03c7b7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+\n+#include <stdlib.h>\n+\n+typedef __INTPTR_TYPE__ intptr_t;\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+void test_1 (void)\n+{\n+  intptr_t ip;\n+  void *p = malloc (1024);\n+  ip = (intptr_t)p;\n+  free ((void *)ip);\n+} /* { dg-bogus \"leak\" } */\n+\n+void test_2 (void)\n+{\n+  uintptr_t uip;\n+  void *p = malloc (1024);\n+  uip = (uintptr_t)p;\n+  free ((void *)uip);\n+} /* { dg-bogus \"leak\" } */\n+\n+void test_3 (intptr_t ip)\n+{\n+  free ((void *)ip); /* { dg-message \"first 'free'\" } */\n+  free ((void *)ip); /* { dg-warning \"double-'free'\" } */\n+}"}]}