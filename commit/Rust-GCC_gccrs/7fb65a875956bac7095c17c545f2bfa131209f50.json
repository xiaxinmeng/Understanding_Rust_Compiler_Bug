{"sha": "7fb65a875956bac7095c17c545f2bfa131209f50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZiNjVhODc1OTU2YmFjNzA5NWMxN2M1NDVmMmJmYTEzMTIwOWY1MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-10T21:41:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-10T21:41:16Z"}, "message": "PR libstdc++/90388 fix std::hash<unique_ptr<T,D>> bugs\n\nA disabled specialization should not be callable, so move the function\ncall operator into a new base class which correctly implements the\ndisabled hash semantics. For the versioned namespace configuration do\nnot derive from __poison_hash in the enabled case, as the empty base\nclass serves no purpose but potentially increases the object size. For\nthe default configuration that base class must be kept, to preserve\nlayout.\n\nAn enabled specialization should not be unconditionally noexcept,\nbecause the underlying hash object might throw.\n\n\tPR libstdc++/90388\n\t* include/bits/unique_ptr.h (default_delete, default_delete<T[]>):\n\tUse _Require for constraints.\n\t(operator>(nullptr_t, const unique_ptr<T,D>&)): Implement exactly as\n\tper the standard.\n\t(__uniq_ptr_hash): New base class with conditionally-disabled call\n\toperator.\n\t(hash<unique_ptr<T,D>>): Derive from __uniq_ptr_hash.\n\t* testsuite/20_util/default_delete/48631_neg.cc: Adjust dg-error line.\n\t* testsuite/20_util/unique_ptr/hash/90388.cc: New test.\n\nFrom-SVN: r271078", "tree": {"sha": "0d945d627e2583d50ac319f8f646456033b25a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d945d627e2583d50ac319f8f646456033b25a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fb65a875956bac7095c17c545f2bfa131209f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb65a875956bac7095c17c545f2bfa131209f50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb65a875956bac7095c17c545f2bfa131209f50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb65a875956bac7095c17c545f2bfa131209f50/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302b6996078bca83fbb51e7b77bce9fbb4e8072b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302b6996078bca83fbb51e7b77bce9fbb4e8072b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302b6996078bca83fbb51e7b77bce9fbb4e8072b"}], "stats": {"total": 161, "additions": 138, "deletions": 23}, "files": [{"sha": "c37cab49396567ecc756c03917444ec6771cd47e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb65a875956bac7095c17c545f2bfa131209f50/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb65a875956bac7095c17c545f2bfa131209f50/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7fb65a875956bac7095c17c545f2bfa131209f50", "patch": "@@ -1,5 +1,16 @@\n 2019-05-10  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/90388\n+\t* include/bits/unique_ptr.h (default_delete, default_delete<T[]>):\n+\tUse _Require for constraints.\n+\t(operator>(nullptr_t, const unique_ptr<T,D>&)): Implement exactly as\n+\tper the standard.\n+\t(__uniq_ptr_hash): New base class with conditionally-disabled call\n+\toperator.\n+\t(hash<unique_ptr<T,D>>): Derive from __uniq_ptr_hash.\n+\t* testsuite/20_util/default_delete/48631_neg.cc: Adjust dg-error line.\n+\t* testsuite/20_util/unique_ptr/hash/90388.cc: New test.\n+\n \t* include/bits/shared_ptr.h: Improve docs.\n \t* include/bits/shared_ptr_base.h: Likewise.\n \t* include/bits/stl_uninitialized.h: Likewise."}, {"sha": "a9e74725dfd1338c70ce04f5b58c87b819d9ce09", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb65a875956bac7095c17c545f2bfa131209f50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb65a875956bac7095c17c545f2bfa131209f50/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=7fb65a875956bac7095c17c545f2bfa131209f50", "patch": "@@ -66,8 +66,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * Allows conversion from a deleter for objects of another type, `_Up`,\n        * only if `_Up*` is convertible to `_Tp*`.\n        */\n-      template<typename _Up, typename = typename\n-\t       enable_if<is_convertible<_Up*, _Tp*>::value>::type>\n+      template<typename _Up,\n+\t       typename = _Require<is_convertible<_Up*, _Tp*>>>\n         default_delete(const default_delete<_Up>&) noexcept { }\n \n       /// Calls `delete __ptr`\n@@ -102,19 +102,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * it is undefined to `delete[]` an array of derived types through a\n        * pointer to the base type.\n        */\n-      template<typename _Up, typename = typename\n-\t       enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type>\n+      template<typename _Up,\n+\t       typename = _Require<is_convertible<_Up(*)[], _Tp(*)[]>>>\n         default_delete(const default_delete<_Up[]>&) noexcept { }\n \n       /// Calls `delete[] __ptr`\n       template<typename _Up>\n-      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type\n+\ttypename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type\n \toperator()(_Up* __ptr) const\n-      {\n-\tstatic_assert(sizeof(_Tp)>0,\n-\t\t      \"can't delete pointer to incomplete type\");\n-\tdelete [] __ptr;\n-      }\n+\t{\n+\t  static_assert(sizeof(_Tp)>0,\n+\t\t\t\"can't delete pointer to incomplete type\");\n+\t  delete [] __ptr;\n+\t}\n     };\n \n   /// @cond undocumented\n@@ -712,7 +712,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t unique_ptr<_Tp, _Dp>&) = delete;\n #endif\n \n-  /// Equality operator for unique_ptr objects, compares the owned pointers.\n+  /// Equality operator for unique_ptr objects, compares the owned pointers\n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     _GLIBCXX_NODISCARD inline bool\n@@ -848,23 +848,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_NODISCARD inline bool\n     operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n     { return !(nullptr < __x); }\n+  // @} relates unique_ptr\n+\n+  /// @cond undocumented\n+  template<typename _Up, typename _Ptr = typename _Up::pointer,\n+\t   bool = __poison_hash<_Ptr>::__enable_hash_call>\n+    struct __uniq_ptr_hash\n+#if ! _GLIBCXX_INLINE_VERSION\n+    : private __poison_hash<_Ptr>\n+#endif\n+    {\n+      size_t\n+      operator()(const _Up& __u) const\n+      noexcept(noexcept(std::declval<hash<_Ptr>>()(std::declval<_Ptr>())))\n+      { return hash<_Ptr>()(__u.get()); }\n+    };\n+\n+  template<typename _Up, typename _Ptr>\n+    struct __uniq_ptr_hash<_Up, _Ptr, false>\n+    : private __poison_hash<_Ptr>\n+    { };\n+  /// @endcond\n \n   /// std::hash specialization for unique_ptr.\n   template<typename _Tp, typename _Dp>\n     struct hash<unique_ptr<_Tp, _Dp>>\n     : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,\n-    private __poison_hash<typename unique_ptr<_Tp, _Dp>::pointer>\n-    {\n-      size_t\n-      operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept\n-      {\n-\ttypedef unique_ptr<_Tp, _Dp> _UP;\n-\treturn std::hash<typename _UP::pointer>()(__u.get());\n-      }\n-    };\n+      public __uniq_ptr_hash<unique_ptr<_Tp, _Dp>>\n+    { };\n \n #if __cplusplus > 201103L\n-\n+  /// @relates unique_ptr @{\n #define __cpp_lib_make_unique 201304\n \n   /// @cond undocumented\n@@ -899,9 +913,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename... _Args>\n     inline typename _MakeUniq<_Tp>::__invalid_type\n     make_unique(_Args&&...) = delete;\n+  // @} relates unique_ptr\n #endif\n \n-  // @} relates unique_ptr\n   // @} group pointer_abstractions\n \n #if __cplusplus >= 201703L"}, {"sha": "111a42434dbc8cbcb25369a147369e0599826119", "filename": "libstdc++-v3/testsuite/20_util/default_delete/48631_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb65a875956bac7095c17c545f2bfa131209f50/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb65a875956bac7095c17c545f2bfa131209f50/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc?ref=7fb65a875956bac7095c17c545f2bfa131209f50", "patch": "@@ -26,4 +26,4 @@ struct D : B { };\n D d;\n std::default_delete<B[]> db;\n typedef decltype(db(&d)) type; // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 111 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 112 }"}, {"sha": "0f3b785779744df9035e1300f0e92c262eec116c", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/hash/90388.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb65a875956bac7095c17c545f2bfa131209f50/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fhash%2F90388.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb65a875956bac7095c17c545f2bfa131209f50/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fhash%2F90388.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fhash%2F90388.cc?ref=7fb65a875956bac7095c17c545f2bfa131209f50", "patch": "@@ -0,0 +1,90 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <memory>\n+\n+template<typename Func, typename Arg, typename = void>\n+  struct is_callable\n+  : std::false_type\n+  { };\n+\n+template<typename Func, typename Arg>\n+  struct is_callable<Func, Arg,\n+    decltype((void)(std::declval<Func&>()(std::declval<Arg>())))>\n+  : std::true_type\n+  { };\n+\n+void\n+test01()\n+{\n+  struct D {\n+    struct pointer { };\n+    void operator()(pointer) const noexcept { }\n+  };\n+  static_assert( !is_callable<std::hash<D::pointer>&, D::pointer>::value );\n+\n+  using UP = std::unique_ptr<int, D>;\n+  // [unord.hash]\n+  // Disabled specializations of hash are not function object types\n+  static_assert( !is_callable<std::hash<UP>&, UP>::value );\n+  static_assert( !is_callable<std::hash<UP>&, UP&>::value );\n+  static_assert( !is_callable<std::hash<UP>&, const UP&>::value );\n+}\n+\n+struct D {\n+  struct pointer { };\n+  void operator()(pointer) const noexcept { }\n+};\n+\n+bool operator==(D::pointer, std::nullptr_t) { return false; }\n+bool operator!=(D::pointer, std::nullptr_t) { return true; }\n+\n+namespace std {\n+  template<> struct hash<D::pointer> {\n+    size_t operator()(D::pointer) const { throw 1; }\n+  };\n+}\n+\n+void\n+test02()\n+{\n+  using UP = std::unique_ptr<int, D>;\n+  UP p;\n+  std::hash<UP> h;\n+  try {\n+    // [util.smartptr.hash]\n+    // The member functions are not guaranteed to be noexcept.\n+    h(p);\n+    throw \"should not reach here\";\n+  } catch (int) {\n+    // Should catch exception here, rather than terminating.\n+  }\n+\n+  // Should still be noexcept if the underlying hash object is:\n+  using UP2 = std::unique_ptr<int>;\n+  UP2 p2;\n+  std::hash<UP2> h2;\n+  static_assert( noexcept(h2(p2)), \"operator() is noexcept\" );\n+}\n+\n+int\n+main()\n+{\n+  test02();\n+}"}]}