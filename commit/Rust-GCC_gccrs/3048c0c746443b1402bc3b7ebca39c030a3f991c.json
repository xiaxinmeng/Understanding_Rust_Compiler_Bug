{"sha": "3048c0c746443b1402bc3b7ebca39c030a3f991c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0OGMwYzc0NjQ0M2IxNDAyYmMzYjdlYmNhMzljMDMwYTNmOTkxYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-06-30T14:31:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-06-30T14:31:36Z"}, "message": "re PR debug/66653 (ice in gen_type_die_with_usage, at dwarf2out.c:20876)\n\n\tPR debug/66653\n\t* cp-tree.h (CP_DECL_THREAD_LOCAL_P): New.\n\t(DECL_GNU_TLS_P): Use DECL_LANG_SPECIFIC field.\n\t(SET_DECL_GNU_TLS_P): New.\n\t* call.c (make_temporary_var_for_ref_to_temp): Use\n\tCP_DECL_THREAD_LOCAL_P.\n\t(set_up_extended_ref_temp): Likewise.\n\t* decl.c (duplicate_decls, expand_static_init): Likewise.\n\t(redeclaration_error_message, grokvardecl): Likewise.\n\t(start_decl, register_dtor_fn, grokdeclarator): Likewise.\n\t* decl2.c (get_guard, var_needs_tls_wrapper): Likewise.\n\t(handle_tls_init): Likewise.\n\t* pt.c (tsubst_decl, tsubst_copy_and_build): Likewise.\n\t* semantics.c (finish_id_expression): Likewise.\n\t(handle_omp_array_sections_1, finish_omp_clauses): Likewise.\n\t(finish_omp_threadprivate): Likewise.\n\t* tree.c (decl_storage_duration): Likewise.\n\t* cp-gimplify.c (omp_var_to_track): Likewise.\n\t(cp_genericize_r): Check that it matches DECL_THREAD_LOCAL_P.\n\t* lex.c (retrofit_lang_decl): Return if DECL_LANG_SPECIFIC is\n\talready set.\n\nFrom-SVN: r225192", "tree": {"sha": "d596be866a55e81c7c92dab11b20197e048889f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d596be866a55e81c7c92dab11b20197e048889f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3048c0c746443b1402bc3b7ebca39c030a3f991c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3048c0c746443b1402bc3b7ebca39c030a3f991c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3048c0c746443b1402bc3b7ebca39c030a3f991c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3048c0c746443b1402bc3b7ebca39c030a3f991c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ea37bcabade6c00ef5bc454d9a6ddc49dfdd3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea37bcabade6c00ef5bc454d9a6ddc49dfdd3cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea37bcabade6c00ef5bc454d9a6ddc49dfdd3cc"}], "stats": {"total": 138, "additions": 102, "deletions": 36}, "files": [{"sha": "cdb37c41fb75cc22c452faceb0792cd3943d228d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -1,3 +1,27 @@\n+2015-06-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR debug/66653\n+\t* cp-tree.h (CP_DECL_THREAD_LOCAL_P): New.\n+\t(DECL_GNU_TLS_P): Use DECL_LANG_SPECIFIC field.\n+\t(SET_DECL_GNU_TLS_P): New.\n+\t* call.c (make_temporary_var_for_ref_to_temp): Use\n+\tCP_DECL_THREAD_LOCAL_P.\n+\t(set_up_extended_ref_temp): Likewise.\n+\t* decl.c (duplicate_decls, expand_static_init): Likewise.\n+\t(redeclaration_error_message, grokvardecl): Likewise.\n+\t(start_decl, register_dtor_fn, grokdeclarator): Likewise.\n+\t* decl2.c (get_guard, var_needs_tls_wrapper): Likewise.\n+\t(handle_tls_init): Likewise.\n+\t* pt.c (tsubst_decl, tsubst_copy_and_build): Likewise.\n+\t* semantics.c (finish_id_expression): Likewise.\n+\t(handle_omp_array_sections_1, finish_omp_clauses): Likewise.\n+\t(finish_omp_threadprivate): Likewise.\n+\t* tree.c (decl_storage_duration): Likewise.\n+\t* cp-gimplify.c (omp_var_to_track): Likewise.\n+\t(cp_genericize_r): Check that it matches DECL_THREAD_LOCAL_P.\n+\t* lex.c (retrofit_lang_decl): Return if DECL_LANG_SPECIFIC is\n+\talready set.\n+\n 2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement N4197 - Adding u8 character literals"}, {"sha": "44346bf8f92aaf2db4b989f138e673289edf26c0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -9556,13 +9556,14 @@ make_temporary_var_for_ref_to_temp (tree decl, tree type)\n \n   /* Register the variable.  */\n   if (VAR_P (decl)\n-      && (TREE_STATIC (decl) || DECL_THREAD_LOCAL_P (decl)))\n+      && (TREE_STATIC (decl) || CP_DECL_THREAD_LOCAL_P (decl)))\n     {\n       /* Namespace-scope or local static; give it a mangled name.  */\n       /* FIXME share comdat with decl?  */\n       tree name;\n \n       TREE_STATIC (var) = TREE_STATIC (decl);\n+      CP_DECL_THREAD_LOCAL_P (var) = CP_DECL_THREAD_LOCAL_P (decl);\n       set_decl_tls_model (var, DECL_TLS_MODEL (decl));\n       name = mangle_ref_init_variable (decl);\n       DECL_NAME (var) = name;\n@@ -9683,7 +9684,7 @@ set_up_extended_ref_temp (tree decl, tree expr, vec<tree, va_gc> **cleanups,\n       rest_of_decl_compilation (var, /*toplev=*/1, at_eof);\n       if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n \t{\n-\t  if (DECL_THREAD_LOCAL_P (var))\n+\t  if (CP_DECL_THREAD_LOCAL_P (var))\n \t    tls_aggregates = tree_cons (NULL_TREE, var,\n \t\t\t\t\ttls_aggregates);\n \t  else"}, {"sha": "b95489e78162e4238c585c4ce06cce3559968b93", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -831,7 +831,7 @@ omp_var_to_track (tree decl)\n     type = TREE_TYPE (type);\n   if (type == error_mark_node || !CLASS_TYPE_P (type))\n     return false;\n-  if (VAR_P (decl) && DECL_THREAD_LOCAL_P (decl))\n+  if (VAR_P (decl) && CP_DECL_THREAD_LOCAL_P (decl))\n     return false;\n   if (cxx_omp_predetermined_sharing (decl) != OMP_CLAUSE_DEFAULT_UNSPECIFIED)\n     return false;\n@@ -1157,6 +1157,12 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       *stmt_p = build1 (NOP_EXPR, void_type_node, integer_zero_node);\n       *walk_subtrees = 0;\n     }\n+  else if (TREE_CODE (stmt) == DECL_EXPR)\n+    {\n+      tree d = DECL_EXPR_DECL (stmt);\n+      if (TREE_CODE (d) == VAR_DECL)\n+\tgcc_assert (CP_DECL_THREAD_LOCAL_P (d) == DECL_THREAD_LOCAL_P (d));\n+    }\n   else if (TREE_CODE (stmt) == OMP_PARALLEL || TREE_CODE (stmt) == OMP_TASK)\n     {\n       struct cp_genericize_omp_taskreg omp_ctx;"}, {"sha": "18cf87e893ac41ca7b144681c89276eb244b6de1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -51,7 +51,7 @@ c-common.h, not after.\n       AGGR_INIT_VIA_CTOR_P (in AGGR_INIT_EXPR)\n       PTRMEM_OK_P (in ADDR_EXPR, OFFSET_REF, SCOPE_REF)\n       PAREN_STRING_LITERAL (in STRING_CST)\n-      DECL_GNU_TLS_P (in VAR_DECL)\n+      CP_DECL_THREAD_LOCAL_P (in VAR_DECL)\n       KOENIG_LOOKUP_P (in CALL_EXPR)\n       STATEMENT_LIST_NO_SCOPE (in STATEMENT_LIST).\n       EXPR_STMT_STMT_EXPR_RESULT (in EXPR_STMT)\n@@ -2017,7 +2017,7 @@ struct GTY(()) lang_decl_base {\n   unsigned repo_available_p : 1;\t   /* var or fn */\n   unsigned threadprivate_or_deleted_p : 1; /* var or fn */\n   unsigned anticipated_p : 1;\t\t   /* fn, type or template */\n-  unsigned friend_attr : 1;\t\t   /* fn, type or template */\n+  unsigned friend_or_tls : 1;\t\t   /* var, fn, type or template */\n   unsigned template_conv_p : 1;\t\t   /* var or template */\n   unsigned odr_used : 1;\t\t   /* var or fn */\n   unsigned u2sel : 1;\n@@ -2438,7 +2438,16 @@ struct GTY(()) lang_decl {\n    and should not be added to the list of members for this class.  */\n #define DECL_FRIEND_P(NODE) \\\n   (DECL_LANG_SPECIFIC (TYPE_FUNCTION_OR_TEMPLATE_DECL_CHECK (NODE)) \\\n-   ->u.base.friend_attr)\n+   ->u.base.friend_or_tls)\n+\n+/* Nonzero if the thread-local variable was declared with __thread as\n+   opposed to thread_local.  */\n+#define DECL_GNU_TLS_P(NODE)\t\t\t\t\\\n+  (DECL_LANG_SPECIFIC (VAR_DECL_CHECK (NODE))\t\t\\\n+   && DECL_LANG_SPECIFIC (NODE)->u.base.friend_or_tls)\n+#define SET_DECL_GNU_TLS_P(NODE)\t\t\t\t\\\n+  (retrofit_lang_decl (VAR_DECL_CHECK (NODE)),\t\t\t\\\n+   DECL_LANG_SPECIFIC (NODE)->u.base.friend_or_tls = true)\n \n /* A TREE_LIST of the types which have befriended this FUNCTION_DECL.  */\n #define DECL_BEFRIENDING_CLASSES(NODE) \\\n@@ -2566,9 +2575,11 @@ struct GTY(()) lang_decl {\n   (DECL_NAME (NODE) \\\n    && !strcmp (IDENTIFIER_POINTER (DECL_NAME (NODE)), \"__PRETTY_FUNCTION__\"))\n \n-/* Nonzero if the thread-local variable was declared with __thread\n-   as opposed to thread_local.  */\n-#define DECL_GNU_TLS_P(NODE) \\\n+/* Nonzero if the variable was declared to be thread-local.\n+   We need a special C++ version of this test because the middle-end\n+   DECL_THREAD_LOCAL_P uses the symtab, so we can't use it for\n+   templates.  */\n+#define CP_DECL_THREAD_LOCAL_P(NODE) \\\n   (TREE_LANG_FLAG_0 (VAR_DECL_CHECK (NODE)))\n \n /* The _TYPE context in which this _DECL appears.  This field holds the"}, {"sha": "9fabde7881ba15dfc2bec1cd331c7ac67023d6a6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -2523,8 +2523,12 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t}\n \n       if (VAR_P (newdecl)\n-\t  && DECL_THREAD_LOCAL_P (newdecl))\n-\tset_decl_tls_model (olddecl, DECL_TLS_MODEL (newdecl));\n+\t  && CP_DECL_THREAD_LOCAL_P (newdecl))\n+\t{\n+\t  CP_DECL_THREAD_LOCAL_P (olddecl) = true;\n+\t  if (!processing_template_decl)\n+\t    set_decl_tls_model (olddecl, DECL_TLS_MODEL (newdecl));\n+\t}\n     }\n \n   DECL_UID (olddecl) = olddecl_uid;\n@@ -2702,14 +2706,14 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n       return NULL;\n     }\n   else if (VAR_P (newdecl)\n-\t   && DECL_THREAD_LOCAL_P (newdecl) != DECL_THREAD_LOCAL_P (olddecl)\n+\t   && CP_DECL_THREAD_LOCAL_P (newdecl) != CP_DECL_THREAD_LOCAL_P (olddecl)\n \t   && (! DECL_LANG_SPECIFIC (olddecl)\n \t       || ! CP_DECL_THREADPRIVATE_P (olddecl)\n-\t       || DECL_THREAD_LOCAL_P (newdecl)))\n+\t       || CP_DECL_THREAD_LOCAL_P (newdecl)))\n     {\n       /* Only variables can be thread-local, and all declarations must\n \t agree on this property.  */\n-      if (DECL_THREAD_LOCAL_P (newdecl))\n+      if (CP_DECL_THREAD_LOCAL_P (newdecl))\n \treturn G_(\"thread-local declaration of %q#D follows \"\n \t          \"non-thread-local declaration\");\n       else\n@@ -4859,7 +4863,7 @@ start_decl (const cp_declarator *declarator,\n       && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n     {\n       bool ok = false;\n-      if (DECL_THREAD_LOCAL_P (decl))\n+      if (CP_DECL_THREAD_LOCAL_P (decl))\n \terror (\"%qD declared %<thread_local%> in %<constexpr%> function\",\n \t       decl);\n       else if (TREE_STATIC (decl))\n@@ -7056,7 +7060,7 @@ register_dtor_fn (tree decl)\n      function to do the cleanup.  */\n   dso_parm = (flag_use_cxa_atexit\n \t      && !targetm.cxx.use_atexit_for_cxa_atexit ());\n-  ob_parm = (DECL_THREAD_LOCAL_P (decl) || dso_parm);\n+  ob_parm = (CP_DECL_THREAD_LOCAL_P (decl) || dso_parm);\n   use_dtor = ob_parm && CLASS_TYPE_P (type);\n   if (use_dtor)\n     {\n@@ -7099,7 +7103,7 @@ register_dtor_fn (tree decl)\n   mark_used (cleanup);\n   cleanup = build_address (cleanup);\n \n-  if (DECL_THREAD_LOCAL_P (decl))\n+  if (CP_DECL_THREAD_LOCAL_P (decl))\n     atex_node = get_thread_atexit_node ();\n   else\n     atex_node = get_atexit_node ();\n@@ -7139,7 +7143,7 @@ register_dtor_fn (tree decl)\n \n   if (ob_parm)\n     {\n-      if (!DECL_THREAD_LOCAL_P (decl)\n+      if (!CP_DECL_THREAD_LOCAL_P (decl)\n \t  && targetm.cxx.use_aeabi_atexit ())\n \t{\n \t  arg1 = cleanup;\n@@ -7179,7 +7183,7 @@ expand_static_init (tree decl, tree init)\n \treturn;\n     }\n \n-  if (DECL_THREAD_LOCAL_P (decl) && DECL_GNU_TLS_P (decl)\n+  if (CP_DECL_THREAD_LOCAL_P (decl) && DECL_GNU_TLS_P (decl)\n       && !DECL_FUNCTION_SCOPE_P (decl))\n     {\n       if (init)\n@@ -7208,7 +7212,7 @@ expand_static_init (tree decl, tree init)\n       tree flag, begin;\n       /* We don't need thread-safety code for thread-local vars.  */\n       bool thread_guard = (flag_threadsafe_statics\n-\t\t\t   && !DECL_THREAD_LOCAL_P (decl));\n+\t\t\t   && !CP_DECL_THREAD_LOCAL_P (decl));\n \n       /* Emit code to perform this initialization but once.  This code\n \t looks like:\n@@ -7321,7 +7325,7 @@ expand_static_init (tree decl, tree init)\n       finish_then_clause (if_stmt);\n       finish_if_stmt (if_stmt);\n     }\n-  else if (DECL_THREAD_LOCAL_P (decl))\n+  else if (CP_DECL_THREAD_LOCAL_P (decl))\n     tls_aggregates = tree_cons (init, decl, tls_aggregates);\n   else\n     static_aggregates = tree_cons (init, decl, static_aggregates);\n@@ -8182,9 +8186,13 @@ grokvardecl (tree type,\n   if (decl_spec_seq_has_spec_p (declspecs, ds_thread))\n     {\n       if (DECL_EXTERNAL (decl) || TREE_STATIC (decl))\n-        set_decl_tls_model (decl, decl_default_tls_model (decl));\n+\t{\n+\t  CP_DECL_THREAD_LOCAL_P (decl) = true;\n+\t  if (!processing_template_decl)\n+\t    set_decl_tls_model (decl, decl_default_tls_model (decl));\n+\t}\n       if (declspecs->gnu_thread_keyword_p)\n-\tDECL_GNU_TLS_P (decl) = true;\n+\tSET_DECL_GNU_TLS_P (decl);\n     }\n \n   /* If the type of the decl has no linkage, make sure that we'll\n@@ -10857,9 +10865,11 @@ grokdeclarator (const cp_declarator *declarator,\n \n \t\tif (thread_p)\n \t\t  {\n-\t\t    set_decl_tls_model (decl, decl_default_tls_model (decl));\n+\t\t    CP_DECL_THREAD_LOCAL_P (decl) = true;\n+\t\t    if (!processing_template_decl)\n+\t\t      set_decl_tls_model (decl, decl_default_tls_model (decl));\n \t\t    if (declspecs->gnu_thread_keyword_p)\n-\t\t      DECL_GNU_TLS_P (decl) = true;\n+\t\t      SET_DECL_GNU_TLS_P (decl);\n \t\t  }\n \n \t\tif (constexpr_p && !initialized)"}, {"sha": "5032333c314d418aab23e1e3c40dc226cda93400", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -3005,6 +3005,7 @@ get_guard (tree decl)\n       TREE_STATIC (guard) = TREE_STATIC (decl);\n       DECL_COMMON (guard) = DECL_COMMON (decl);\n       DECL_COMDAT (guard) = DECL_COMDAT (decl);\n+      CP_DECL_THREAD_LOCAL_P (guard) = CP_DECL_THREAD_LOCAL_P (decl);\n       set_decl_tls_model (guard, DECL_TLS_MODEL (decl));\n       if (DECL_ONE_ONLY (decl))\n \tmake_decl_one_only (guard, cxx_comdat_group (guard));\n@@ -3143,7 +3144,7 @@ static bool\n var_needs_tls_wrapper (tree var)\n {\n   return (!error_operand_p (var)\n-\t  && DECL_THREAD_LOCAL_P (var)\n+\t  && CP_DECL_THREAD_LOCAL_P (var)\n \t  && !DECL_GNU_TLS_P (var)\n \t  && !DECL_FUNCTION_SCOPE_P (var)\n \t  && !var_defined_without_dynamic_init (var));\n@@ -4278,6 +4279,7 @@ handle_tls_init (void)\n   DECL_ARTIFICIAL (guard) = true;\n   DECL_IGNORED_P (guard) = true;\n   TREE_USED (guard) = true;\n+  CP_DECL_THREAD_LOCAL_P (guard) = true;\n   set_decl_tls_model (guard, decl_default_tls_model (guard));\n   pushdecl_top_level_and_finish (guard, NULL_TREE);\n "}, {"sha": "915fbddff022640ea031851427a0c23af2ef0a65", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -553,6 +553,9 @@ retrofit_lang_decl (tree t)\n   size_t size;\n   int sel;\n \n+  if (DECL_LANG_SPECIFIC (t))\n+    return;\n+\n   if (TREE_CODE (t) == FUNCTION_DECL)\n     sel = 1, size = sizeof (struct lang_decl_fn);\n   else if (TREE_CODE (t) == NAMESPACE_DECL)"}, {"sha": "6b73d49ce29c3d69db6485a6c6064ca9e6a1c9c5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -11467,8 +11467,9 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t\t  }\n \t\tSET_DECL_VALUE_EXPR (r, ve);\n \t      }\n-\t    if (TREE_STATIC (r) || DECL_EXTERNAL (r))\n-\t      set_decl_tls_model (r, decl_tls_model (t));\n+\t    if (CP_DECL_THREAD_LOCAL_P (r)\n+\t\t&& !processing_template_decl)\n+\t      set_decl_tls_model (r, decl_default_tls_model (r));\n \t  }\n \telse if (DECL_SELF_REFERENCE_P (t))\n \t  SET_DECL_SELF_REFERENCE_P (r);\n@@ -15696,7 +15697,7 @@ tsubst_copy_and_build (tree t,\n \t    && !processing_template_decl\n \t    && !cp_unevaluated_operand\n \t    && (TREE_STATIC (r) || DECL_EXTERNAL (r))\n-\t    && DECL_THREAD_LOCAL_P (r))\n+\t    && CP_DECL_THREAD_LOCAL_P (r))\n \t  {\n \t    if (tree wrap = get_tls_wrapper_fn (r))\n \t      /* Replace an evaluated use of the thread_local variable with"}, {"sha": "8de2522a6d4bd5ab56c67ee820452e84f5077f45", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -3553,7 +3553,7 @@ finish_id_expression (tree id_expression,\n \t  && !cp_unevaluated_operand\n \t  && !processing_template_decl\n \t  && (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n-\t  && DECL_THREAD_LOCAL_P (decl)\n+\t  && CP_DECL_THREAD_LOCAL_P (decl)\n \t  && (wrap = get_tls_wrapper_fn (decl)))\n \t{\n \t  /* Replace an evaluated use of the thread_local variable with\n@@ -4291,7 +4291,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \t  return error_mark_node;\n \t}\n       else if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_DEPEND\n-\t       && VAR_P (t) && DECL_THREAD_LOCAL_P (t))\n+\t       && VAR_P (t) && CP_DECL_THREAD_LOCAL_P (t))\n \t{\n \t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t    \"%qD is threadprivate variable in %qs clause\", t,\n@@ -5784,7 +5784,7 @@ finish_omp_clauses (tree clauses)\n \t\t       omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t      remove = true;\n \t    }\n-\t  else if (VAR_P (t) && DECL_THREAD_LOCAL_P (t))\n+\t  else if (VAR_P (t) && CP_DECL_THREAD_LOCAL_P (t))\n \t    {\n \t      error (\"%qD is threadprivate variable in %qs clause\", t,\n \t\t     omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n@@ -5954,7 +5954,7 @@ finish_omp_clauses (tree clauses)\n \t  break;\n \n \tcase OMP_CLAUSE_COPYIN:\n-\t  if (!VAR_P (t) || !DECL_THREAD_LOCAL_P (t))\n+\t  if (!VAR_P (t) || !CP_DECL_THREAD_LOCAL_P (t))\n \t    {\n \t      error (\"%qE must be %<threadprivate%> for %<copyin%>\", t);\n \t      remove = true;\n@@ -5982,7 +5982,7 @@ finish_omp_clauses (tree clauses)\n \t{\n \t  const char *share_name = NULL;\n \n-\t  if (VAR_P (t) && DECL_THREAD_LOCAL_P (t))\n+\t  if (VAR_P (t) && CP_DECL_THREAD_LOCAL_P (t))\n \t    share_name = \"threadprivate\";\n \t  else switch (cxx_omp_predetermined_sharing (t))\n \t    {\n@@ -6085,8 +6085,9 @@ finish_omp_threadprivate (tree vars)\n \t\tDECL_LANG_SPECIFIC (v)->u.base.u2sel = 1;\n \t    }\n \n-\t  if (! DECL_THREAD_LOCAL_P (v))\n+\t  if (! CP_DECL_THREAD_LOCAL_P (v))\n \t    {\n+\t      CP_DECL_THREAD_LOCAL_P (v) = true;\n \t      set_decl_tls_model (v, decl_default_tls_model (v));\n \t      /* If rtl has been already set for this var, call\n \t\t make_decl_rtl once again, so that encode_section_info"}, {"sha": "0d1112c33d0ff31c3d42efb3e0d788e8eca9e0aa", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -4036,7 +4036,7 @@ decl_storage_duration (tree decl)\n   if (!TREE_STATIC (decl)\n       && !DECL_EXTERNAL (decl))\n     return dk_auto;\n-  if (DECL_THREAD_LOCAL_P (decl))\n+  if (CP_DECL_THREAD_LOCAL_P (decl))\n     return dk_thread;\n   return dk_static;\n }"}, {"sha": "6286d7b27ba3155c0c52541c3d18e6e4be3b2755", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/tls1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftls1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3048c0c746443b1402bc3b7ebca39c030a3f991c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftls1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftls1.C?ref=3048c0c746443b1402bc3b7ebca39c030a3f991c", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/66653\n+// { dg-options \"-gdwarf\" }\n+\n+template <typename T> class A\n+{\n+  static __thread T a;\n+};"}]}