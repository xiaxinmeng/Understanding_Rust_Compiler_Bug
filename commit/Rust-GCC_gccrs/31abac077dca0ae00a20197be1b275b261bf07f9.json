{"sha": "31abac077dca0ae00a20197be1b275b261bf07f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFhYmFjMDc3ZGNhMGFlMDBhMjAxOTdiZTFiMjc1YjI2MWJmMDdmOQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@apple.com", "date": "2006-03-01T00:02:14Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-03-01T00:02:14Z"}, "message": "darwin.h (ENABLE_STACK_EXECUTE): Define.\n\n2006-02-28  Eric Christopher  <echristo@apple.com>\n\n        * config/rs6000/darwin.h (ENABLE_STACK_EXECUTE): Define.\n        Set up IN_LIBGCC definition of TARGET_64BIT.\n        * config/i386/darwin.h (ENABLE_STACK_EXECUTE): Define.\n\nFrom-SVN: r111584", "tree": {"sha": "b7ae9b0d0987c4b0d41703a56f2ac323eb1801e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7ae9b0d0987c4b0d41703a56f2ac323eb1801e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31abac077dca0ae00a20197be1b275b261bf07f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31abac077dca0ae00a20197be1b275b261bf07f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31abac077dca0ae00a20197be1b275b261bf07f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31abac077dca0ae00a20197be1b275b261bf07f9/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b295c471c2c534ed75ecb18a9b8ca4d319a9aee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b295c471c2c534ed75ecb18a9b8ca4d319a9aee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b295c471c2c534ed75ecb18a9b8ca4d319a9aee1"}], "stats": {"total": 115, "additions": 112, "deletions": 3}, "files": [{"sha": "4893f0b428b7f75e53046fd2fc228a8fa6856d62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31abac077dca0ae00a20197be1b275b261bf07f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31abac077dca0ae00a20197be1b275b261bf07f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31abac077dca0ae00a20197be1b275b261bf07f9", "patch": "@@ -1,3 +1,9 @@\n+2006-02-28  Eric Christopher  <echristo@apple.com>\n+\n+\t* config/rs6000/darwin.h (ENABLE_STACK_EXECUTE): Define.\n+\tSet up IN_LIBGCC definition of TARGET_64BIT.\n+\t* config/i386/darwin.h (ENABLE_STACK_EXECUTE): Define.\n+\n 2006-02-28  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/14752"}, {"sha": "7481ea886e48d67088af5004efb25c0d72ab7508", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31abac077dca0ae00a20197be1b275b261bf07f9/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31abac077dca0ae00a20197be1b275b261bf07f9/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=31abac077dca0ae00a20197be1b275b261bf07f9", "patch": "@@ -170,3 +170,50 @@ extern void darwin_x86_file_end (void);\n    : (n) == 4 ? 5\t\t\t\t\t\t\t\\\n    : (n) >= 11 && (n) <= 18 ? (n) + 1\t\t\t\t\t\\\n    : (n))\n+\n+/* Attempt to turn on execute permission for the stack.  This may be\n+    used by INITIALIZE_TRAMPOLINE of the target needs it (that is,\n+    if the target machine can change execute permissions on a page).\n+\n+    There is no way to query the execute permission of the stack, so\n+    we always issue the mprotect() call.\n+\n+    Note that we go out of our way to use namespace-non-invasive calls\n+    here.  Unfortunately, there is no libc-internal name for mprotect().\n+\n+    Also note that no errors should be emitted by this code; it is\n+    considered dangerous for library calls to send messages to\n+    stdout/stderr.  */\n+\n+#define ENABLE_EXECUTE_STACK                                            \\\n+extern void __enable_execute_stack (void *);                            \\\n+void                                                                    \\\n+__enable_execute_stack (void *addr)                                     \\\n+{                                                                       \\\n+   extern int mprotect (void *, size_t, int);                           \\\n+   extern int __sysctl (int *, unsigned int, void *, size_t *,          \\\n+                       void *, size_t);                                 \\\n+                                                                        \\\n+   static int size;                                                     \\\n+   static long mask;                                                    \\\n+                                                                        \\\n+   char *page, *end;                                                    \\\n+                                                                        \\\n+   if (size == 0)                                                       \\\n+     {                                                                  \\\n+       int mib[2];                                                      \\\n+       size_t len;                                                      \\\n+                                                                        \\\n+       mib[0] = 6; /* CTL_HW */                                         \\\n+       mib[1] = 7; /* HW_PAGESIZE */                                    \\\n+       len = sizeof (size);                                             \\\n+       (void) __sysctl (mib, 2, &size, &len, NULL, 0);                  \\\n+       mask = ~((long) size - 1);                                       \\\n+     }                                                                  \\\n+                                                                        \\\n+   page = (char *) (((long) addr) & mask);                              \\\n+   end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n+                                                                        \\\n+   /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */                        \\\n+   (void) mprotect (page, end - page, 7);                               \\\n+}"}, {"sha": "c116fa4e852a01c882969195b8d4431abe5cfaeb", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31abac077dca0ae00a20197be1b275b261bf07f9/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31abac077dca0ae00a20197be1b275b261bf07f9/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=31abac077dca0ae00a20197be1b275b261bf07f9", "patch": "@@ -27,6 +27,15 @@\n \n #define DEFAULT_ABI ABI_DARWIN\n \n+#ifdef IN_LIBGCC2\n+#undef TARGET_64BIT\n+#ifdef __powerpc64__\n+#define TARGET_64BIT 1\n+#else\n+#define TARGET_64BIT 0\n+#endif\n+#endif\n+\n /* The object file format is Mach-O.  */\n \n #define TARGET_OBJECT_FORMAT OBJECT_MACHO\n@@ -338,11 +347,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef DEFAULT_SIGNED_CHAR\n #define DEFAULT_SIGNED_CHAR (1)\n \n-/* Given an rtx X being reloaded into a reg required to be      \n-   in class CLASS, return the class of reg to actually use.     \n+/* Given an rtx X being reloaded into a reg required to be\n+   in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines\n    in some cases it is preferable to use a more restrictive class.\n-  \n+\n    On the RS/6000, we have to return NO_REGS when we want to reload a\n    floating-point CONST_DOUBLE to force it to be copied to memory.\n \n@@ -439,3 +448,50 @@ do {\t\t\t\t\t\t\t\t\t\\\n   (TARGET_64BIT\t\t\t\t\t\t\t\\\n    || (darwin_macosx_version_min\t\t\t\t\\\n        && strverscmp (darwin_macosx_version_min, \"10.3\") >= 0))\n+\n+/* Attempt to turn on execute permission for the stack.  This may be\n+    used by INITIALIZE_TRAMPOLINE of the target needs it (that is,\n+    if the target machine can change execute permissions on a page).\n+\n+    There is no way to query the execute permission of the stack, so\n+    we always issue the mprotect() call.\n+\n+    Note that we go out of our way to use namespace-non-invasive calls\n+    here.  Unfortunately, there is no libc-internal name for mprotect().\n+\n+    Also note that no errors should be emitted by this code; it is\n+    considered dangerous for library calls to send messages to\n+    stdout/stderr.  */\n+\n+#define ENABLE_EXECUTE_STACK                                            \\\n+extern void __enable_execute_stack (void *);                            \\\n+void                                                                    \\\n+__enable_execute_stack (void *addr)                                     \\\n+{                                                                       \\\n+   extern int mprotect (void *, size_t, int);                           \\\n+   extern int __sysctl (int *, unsigned int, void *, size_t *,          \\\n+                       void *, size_t);                                 \\\n+                                                                        \\\n+   static int size;                                                     \\\n+   static long mask;                                                    \\\n+                                                                        \\\n+   char *page, *end;                                                    \\\n+                                                                        \\\n+   if (size == 0)                                                       \\\n+     {                                                                  \\\n+       int mib[2];                                                      \\\n+       size_t len;                                                      \\\n+                                                                        \\\n+       mib[0] = 6; /* CTL_HW */                                         \\\n+       mib[1] = 7; /* HW_PAGESIZE */                                    \\\n+       len = sizeof (size);                                             \\\n+       (void) __sysctl (mib, 2, &size, &len, NULL, 0);                  \\\n+       mask = ~((long) size - 1);                                       \\\n+     }                                                                  \\\n+                                                                        \\\n+   page = (char *) (((long) addr) & mask);                              \\\n+   end  = (char *) ((((long) (addr + (TARGET_64BIT ? 48 : 40))) & mask) + size); \\\n+                                                                        \\\n+   /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */                        \\\n+   (void) mprotect (page, end - page, 7);                               \\\n+}"}]}