{"sha": "f52d97dada071e84460a3fd56a176d0f098e28b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUyZDk3ZGFkYTA3MWU4NDQ2MGEzZmQ1NmExNzZkMGYwOThlMjhiMg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-03-31T15:22:32Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-03-31T15:22:32Z"}, "message": "h8300.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove macro.\n\n\t* config/h8300/h8300.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove macro.\n\t* config/h8300/h8300-protos.h (h8300_get_index): Remove.\n\t* config/h8300/h8300.c (TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n\t(h8300_mode_dependent_address_p): New function.\n\t(h8300_get_index): Make static.\n\nFrom-SVN: r171787", "tree": {"sha": "a245303e5be419b165f50a5025ba82e8a081ed68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a245303e5be419b165f50a5025ba82e8a081ed68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f52d97dada071e84460a3fd56a176d0f098e28b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52d97dada071e84460a3fd56a176d0f098e28b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f52d97dada071e84460a3fd56a176d0f098e28b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52d97dada071e84460a3fd56a176d0f098e28b2/comments", "author": null, "committer": null, "parents": [{"sha": "9ba60cb3ff53d1cd0d45fa54a943e29ae8b59464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba60cb3ff53d1cd0d45fa54a943e29ae8b59464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba60cb3ff53d1cd0d45fa54a943e29ae8b59464"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "a4984dc269ccc9cc1d87f44ba851958fa2f1e5c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52d97dada071e84460a3fd56a176d0f098e28b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52d97dada071e84460a3fd56a176d0f098e28b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f52d97dada071e84460a3fd56a176d0f098e28b2", "patch": "@@ -1,3 +1,11 @@\n+2011-03-31  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/h8300/h8300.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove macro.\n+\t* config/h8300/h8300-protos.h (h8300_get_index): Remove.\n+\t* config/h8300/h8300.c (TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n+\t(h8300_mode_dependent_address_p): New function.\n+\t(h8300_get_index): Make static.\n+\n 2011-03-31  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-forwprop.c (forward_propagate_into_cond): Avoid "}, {"sha": "131410172b9d7144cfe1d0090eefaf9a554b5dd1", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52d97dada071e84460a3fd56a176d0f098e28b2/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52d97dada071e84460a3fd56a176d0f098e28b2/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=f52d97dada071e84460a3fd56a176d0f098e28b2", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Renesas H8/300 version\n-   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2009, 2010\n+   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n@@ -110,7 +110,6 @@ struct cpp_reader;\n extern void h8300_pr_interrupt (struct cpp_reader *);\n extern void h8300_pr_saveall (struct cpp_reader *);\n extern enum reg_class  h8300_reg_class_from_letter (int);\n-extern rtx             h8300_get_index (rtx, enum machine_mode mode, int *);\n extern unsigned int    h8300_insn_length_from_table (rtx, rtx *);\n extern const char *    output_h8sx_shift (rtx *, int, int);\n extern bool            h8300_operands_match_p (rtx *);"}, {"sha": "6649b3fb52c3b7c5720c5fc3c512160d4e59ae41", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52d97dada071e84460a3fd56a176d0f098e28b2/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52d97dada071e84460a3fd56a176d0f098e28b2/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f52d97dada071e84460a3fd56a176d0f098e28b2", "patch": "@@ -113,6 +113,7 @@ static unsigned int  h8300_binary_length          (rtx, const h8300_length_table\n static bool          h8300_short_move_mem_p       (rtx, enum rtx_code);\n static unsigned int  h8300_move_length            (rtx *, const h8300_length_table *);\n static bool\t     h8300_hard_regno_scratch_ok  (unsigned int);\n+static rtx\t     h8300_get_index (rtx, enum machine_mode mode, int *);\n \n /* CPU_TYPE, says what cpu we're compiling for.  */\n int cpu_type;\n@@ -2094,7 +2095,7 @@ notice_update_cc (rtx body, rtx insn)\n    MODE is the mode of the value being accessed.  It can be VOIDmode\n    if the address is known to be valid, but its mode is unknown.  */\n \n-rtx\n+static rtx\n h8300_get_index (rtx x, enum machine_mode mode, int *size)\n {\n   int dummy, factor;\n@@ -2156,6 +2157,21 @@ h8300_get_index (rtx x, enum machine_mode mode, int *size)\n   return x;\n }\n \f\n+/* Worker function for TARGET_MODE_DEPENDENT_ADDRESS_P.\n+\n+   On the H8/300, the predecrement and postincrement address depend thus\n+   (the amount of decrement or increment being the length of the operand).  */\n+\n+static bool\n+h8300_mode_dependent_address_p (const_rtx addr)\n+{\n+  if (GET_CODE (addr) == PLUS\n+      && h8300_get_index (XEXP (addr, 0), VOIDmode, 0) != XEXP (addr, 0))\n+    return true;\n+\n+  return false;\n+}\n+\f\n static const h8300_length_table addb_length_table =\n {\n   /* #xx  Rs   @aa  @Rs  @xx  */\n@@ -6026,4 +6042,7 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n \n+#undef TARGET_MODE_DEPENDENT_ADDRESS_P\n+#define TARGET_MODE_DEPENDENT_ADDRESS_P h8300_mode_dependent_address_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "ce81dcd1d7859338dea119b10da3a8604440b9ba", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52d97dada071e84460a3fd56a176d0f098e28b2/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52d97dada071e84460a3fd56a176d0f098e28b2/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=f52d97dada071e84460a3fd56a176d0f098e28b2", "patch": "@@ -762,17 +762,6 @@ struct cum_arg\n   ((C) == 'W')\n \n \f\n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.\n-\n-   On the H8/300, the predecrement and postincrement address depend thus\n-   (the amount of decrement or increment being the length of the operand).  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL) \\\n-  if (GET_CODE (ADDR) == PLUS \\\n-      && h8300_get_index (XEXP (ADDR, 0), VOIDmode, 0) != XEXP (ADDR, 0)) \\\n-    goto LABEL;\n-\f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode"}]}