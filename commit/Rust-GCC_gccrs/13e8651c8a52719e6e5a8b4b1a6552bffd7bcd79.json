{"sha": "13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNlODY1MWM4YTUyNzE5ZTZlNWE4YjRiMWE2NTUyYmZmZDdiY2Q3OQ==", "commit": {"author": {"name": "Theodore A. Roth", "email": "troth@verinet.com", "date": "2002-09-28T14:14:12Z"}, "committer": {"name": "Marek Michalkiewicz", "email": "marekm@gcc.gnu.org", "date": "2002-09-28T14:14:12Z"}, "message": "avr.c: Eliminate use of _PC_ in pc relative insns.\n\n\n\t* config/avr/avr.c: Eliminate use of _PC_ in pc relative insns.\n\t* config/avr/avr.md: Ditto.\n\nFrom-SVN: r57613", "tree": {"sha": "2b740552b9e38f4b75c8a1ffa365fa470bbea4af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b740552b9e38f4b75c8a1ffa365fa470bbea4af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79/comments", "author": null, "committer": null, "parents": [{"sha": "5831424ed72881751a20ab8948b1efc09dab241b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5831424ed72881751a20ab8948b1efc09dab241b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5831424ed72881751a20ab8948b1efc09dab241b"}], "stats": {"total": 98, "additions": 51, "deletions": 47}, "files": [{"sha": "4d7d27ebe84d84bf724b284f539117aa82c3d6da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79", "patch": "@@ -1,3 +1,8 @@\n+2002-09-26  Theodore A. Roth  <troth@verinet.com>\n+\n+        * config/avr/avr.c: Eliminate use of _PC_ in pc relative insns.\n+        * config/avr/avr.md: Ditto.\n+\n 2002-09-27  Alexander N. Kabaev <ak03@gte.com>\n \n \tPR preprocessor/8055"}, {"sha": "1a06ed12ef9179b1a9075c630953c406b5fcaa3e", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79", "patch": "@@ -1313,60 +1313,60 @@ ret_cond_branch (x, len, reverse)\n     {\n     case GT:\n       if (cc_prev_status.flags & CC_OVERFLOW_UNUSABLE)\n-\treturn (len == 1 ? (AS1 (breq,_PC_+2) CR_TAB\n+\treturn (len == 1 ? (AS1 (breq,.+2) CR_TAB\n \t\t\t    AS1 (brpl,%0)) :\n-\t\tlen == 2 ? (AS1 (breq,_PC_+4) CR_TAB\n-\t\t\t    AS1 (brmi,_PC_+2) CR_TAB\n+\t\tlen == 2 ? (AS1 (breq,.+4) CR_TAB\n+\t\t\t    AS1 (brmi,.+2) CR_TAB\n \t\t\t    AS1 (rjmp,%0)) :\n-\t\t(AS1 (breq,_PC_+6) CR_TAB\n-\t\t AS1 (brmi,_PC_+4) CR_TAB\n+\t\t(AS1 (breq,.+6) CR_TAB\n+\t\t AS1 (brmi,.+4) CR_TAB\n \t\t AS1 (jmp,%0)));\n \t  \n       else\n-\treturn (len == 1 ? (AS1 (breq,_PC_+2) CR_TAB\n+\treturn (len == 1 ? (AS1 (breq,.+2) CR_TAB\n \t\t\t    AS1 (brge,%0)) :\n-\t\tlen == 2 ? (AS1 (breq,_PC_+4) CR_TAB\n-\t\t\t    AS1 (brlt,_PC_+2) CR_TAB\n+\t\tlen == 2 ? (AS1 (breq,.+4) CR_TAB\n+\t\t\t    AS1 (brlt,.+2) CR_TAB\n \t\t\t    AS1 (rjmp,%0)) :\n-\t\t(AS1 (breq,_PC_+6) CR_TAB\n-\t\t AS1 (brlt,_PC_+4) CR_TAB\n+\t\t(AS1 (breq,.+6) CR_TAB\n+\t\t AS1 (brlt,.+4) CR_TAB\n \t\t AS1 (jmp,%0)));\n     case GTU:\n-      return (len == 1 ? (AS1 (breq,_PC_+2) CR_TAB\n+      return (len == 1 ? (AS1 (breq,.+2) CR_TAB\n                           AS1 (brsh,%0)) :\n-              len == 2 ? (AS1 (breq,_PC_+4) CR_TAB\n-                          AS1 (brlo,_PC_+2) CR_TAB\n+              len == 2 ? (AS1 (breq,.+4) CR_TAB\n+                          AS1 (brlo,.+2) CR_TAB\n                           AS1 (rjmp,%0)) :\n-              (AS1 (breq,_PC_+6) CR_TAB\n-               AS1 (brlo,_PC_+4) CR_TAB\n+              (AS1 (breq,.+6) CR_TAB\n+               AS1 (brlo,.+4) CR_TAB\n                AS1 (jmp,%0)));\n     case LE:\n       if (cc_prev_status.flags & CC_OVERFLOW_UNUSABLE)\n \treturn (len == 1 ? (AS1 (breq,%0) CR_TAB\n \t\t\t    AS1 (brmi,%0)) :\n-\t\tlen == 2 ? (AS1 (breq,_PC_+2) CR_TAB\n-\t\t\t    AS1 (brpl,_PC_+2) CR_TAB\n+\t\tlen == 2 ? (AS1 (breq,.+2) CR_TAB\n+\t\t\t    AS1 (brpl,.+2) CR_TAB\n \t\t\t    AS1 (rjmp,%0)) :\n-\t\t(AS1 (breq,_PC_+2) CR_TAB\n-\t\t AS1 (brpl,_PC_+4) CR_TAB\n+\t\t(AS1 (breq,.+2) CR_TAB\n+\t\t AS1 (brpl,.+4) CR_TAB\n \t\t AS1 (jmp,%0)));\n       else\n \treturn (len == 1 ? (AS1 (breq,%0) CR_TAB\n \t\t\t    AS1 (brlt,%0)) :\n-\t\tlen == 2 ? (AS1 (breq,_PC_+2) CR_TAB\n-\t\t\t    AS1 (brge,_PC_+2) CR_TAB\n+\t\tlen == 2 ? (AS1 (breq,.+2) CR_TAB\n+\t\t\t    AS1 (brge,.+2) CR_TAB\n \t\t\t    AS1 (rjmp,%0)) :\n-\t\t(AS1 (breq,_PC_+2) CR_TAB\n-\t\t AS1 (brge,_PC_+4) CR_TAB\n+\t\t(AS1 (breq,.+2) CR_TAB\n+\t\t AS1 (brge,.+4) CR_TAB\n \t\t AS1 (jmp,%0)));\n     case LEU:\n       return (len == 1 ? (AS1 (breq,%0) CR_TAB\n                           AS1 (brlo,%0)) :\n-              len == 2 ? (AS1 (breq,_PC_+2) CR_TAB\n-                          AS1 (brsh,_PC_+2) CR_TAB\n+              len == 2 ? (AS1 (breq,.+2) CR_TAB\n+                          AS1 (brsh,.+2) CR_TAB\n \t\t\t  AS1 (rjmp,%0)) :\n-              (AS1 (breq,_PC_+2) CR_TAB\n-               AS1 (brsh,_PC_+4) CR_TAB\n+              (AS1 (breq,.+2) CR_TAB\n+               AS1 (brsh,.+4) CR_TAB\n \t       AS1 (jmp,%0)));\n     default:\n       if (reverse)\n@@ -1376,10 +1376,10 @@ ret_cond_branch (x, len, reverse)\n \t    case 1:\n \t      return AS1 (br%k1,%0);\n \t    case 2:\n-\t      return (AS1 (br%j1,_PC_+2) CR_TAB\n+\t      return (AS1 (br%j1,.+2) CR_TAB\n \t\t      AS1 (rjmp,%0));\n \t    default:\n-\t      return (AS1 (br%j1,_PC_+4) CR_TAB\n+\t      return (AS1 (br%j1,.+4) CR_TAB\n \t\t      AS1 (jmp,%0));\n \t    }\n \t}\n@@ -1390,10 +1390,10 @@ ret_cond_branch (x, len, reverse)\n \t      case 1:\n \t\treturn AS1 (br%j1,%0);\n \t      case 2:\n-\t\treturn (AS1 (br%k1,_PC_+2) CR_TAB\n+\t\treturn (AS1 (br%k1,.+2) CR_TAB\n \t\t\tAS1 (rjmp,%0));\n \t      default:\n-\t\treturn (AS1 (br%k1,_PC_+4) CR_TAB\n+\t\treturn (AS1 (br%k1,.+4) CR_TAB\n \t\t\tAS1 (jmp,%0));\n \t      }\n \t  }\n@@ -4887,8 +4887,7 @@ asm_file_start (file)\n \t \"__SP_L__ = 0x3d\\n\", file);\n   \n   fputs (\"__tmp_reg__ = 0\\n\" \n-\t \"__zero_reg__ = 1\\n\"\n-\t \"_PC_ = 2\\n\", file);\n+         \"__zero_reg__ = 1\\n\", file);\n \n   /* FIXME: output these only if there is anything in the .data / .bss\n      sections - some code size could be saved by not linking in the\n@@ -5596,7 +5595,7 @@ avr_out_sbxx_branch (insn, operands)\n     }\n \n   if (long_jump)\n-    return (AS1 (rjmp,_PC_+4) CR_TAB\n+    return (AS1 (rjmp,.+4) CR_TAB\n \t    AS1 (jmp,%3));\n   if (!reverse)\n     return AS1 (rjmp,%3);"}, {"sha": "dd51f0e72409fe10e4166fc1a96c8d26d79ad17f", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79", "patch": "@@ -387,7 +387,7 @@\n   \"ld __tmp_reg__,%a1+\n \tst %a0+,__tmp_reg__\n \tdec %2\n-\tbrne _PC_-8\"\n+\tbrne .-8\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -405,13 +405,13 @@\n        return (AS2 (ld,__tmp_reg__,%a1+) CR_TAB\n \t       AS2 (st,%a0+,__tmp_reg__)  CR_TAB\n \t       AS2 (sbiw,%A2,1) CR_TAB\n-\t       AS1 (brne,_PC_-8));\n+\t       AS1 (brne,.-8));\n      else\n        return (AS2 (ld,__tmp_reg__,%a1+) CR_TAB\n \t       AS2 (st,%a0+,__tmp_reg__)  CR_TAB\n \t       AS2 (subi,%A2,1) CR_TAB\n \t       AS2 (sbci,%B2,0) CR_TAB\n-\t       AS1 (brne,_PC_-10));\n+\t       AS1 (brne,.-10));\n }\"\n   [(set_attr \"length\" \"4,5\")\n    (set_attr \"cc\" \"clobber,clobber\")])\n@@ -457,7 +457,7 @@\n   \"\"\n   \"st %a0+,__zero_reg__\n         dec %1\n-\tbrne _PC_-6\"\n+\tbrne .-6\"\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -473,12 +473,12 @@\n      if (which_alternative==0)\n        return (AS2 (st,%a0+,__zero_reg__) CR_TAB\n \t       AS2 (sbiw,%A1,1) CR_TAB\n-\t       AS1 (brne,_PC_-6));\n+\t       AS1 (brne,.-6));\n      else\n        return (AS2 (st,%a0+,__zero_reg__) CR_TAB\n \t       AS2 (subi,%A1,1) CR_TAB\n \t       AS2 (sbci,%B1,0) CR_TAB\n-\t       AS1 (brne,_PC_-8));\n+\t       AS1 (brne,.-8));\n }\"\n   [(set_attr \"length\" \"3,4\")\n    (set_attr \"cc\" \"clobber,clobber\")])\n@@ -512,7 +512,7 @@\n   \"\"\n   \"ld __tmp_reg__,%a0+\n \ttst __tmp_reg__\n-\tbrne _PC_-6\"\n+\tbrne .-6\"\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -2423,10 +2423,10 @@\n     case 1:\n       return AS1 (brcc,%2);\n     case 2:\n-      return (AS1 (brcs,_PC_+2) CR_TAB\n+      return (AS1 (brcs,.+2) CR_TAB\n               AS1 (rjmp,%2));\n   }\n-  return (AS1 (brcs,_PC_+4) CR_TAB\n+  return (AS1 (brcs,.+4) CR_TAB\n           AS1 (jmp,%2));\n }\")\n \n@@ -2458,10 +2458,10 @@\n     case 1:\n       return AS1 (brcc,%2);\n     case 2:\n-      return (AS1 (brcs,_PC_+2) CR_TAB\n+      return (AS1 (brcs,.+2) CR_TAB\n               AS1 (rjmp,%2));\n   }\n-  return (AS1 (brcs,_PC_+4) CR_TAB\n+  return (AS1 (brcs,.+4) CR_TAB\n           AS1 (jmp,%2));\n }\")\n \n@@ -2488,10 +2488,10 @@\n     case 1:\n       return AS1 (brcc,%1);\n     case 2:\n-      return (AS1 (brcs,_PC_+2) CR_TAB\n+      return (AS1 (brcs,.+2) CR_TAB\n               AS1 (rjmp,%1));\n   }\n-  return (AS1 (brcs,_PC_+4) CR_TAB\n+  return (AS1 (brcs,.+4) CR_TAB\n           AS1 (jmp,%1));\n }\")\n "}]}