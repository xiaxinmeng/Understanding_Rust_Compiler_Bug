{"sha": "008d5fccd8a264d12330914f5b14e74a51c9ef03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA4ZDVmY2NkOGEyNjRkMTIzMzA5MTRmNWIxNGU3NGE1MWM5ZWYwMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-10-14T14:43:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-14T14:43:03Z"}, "message": "re PR c++/38174 (Missing some built-in candidates for operator overloading)\n\n/cp\n2011-10-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/38174\n\t* call.c (add_builtin_candidate): If two pointers have a composite\n\tpointer type, generate a single candidate with that type.\n\n/testsuite\n2011-10-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/38174\n\t* g++.dg/overload/operator4.C: New.\n\nFrom-SVN: r179984", "tree": {"sha": "966c87c3a0905c1a73be4ebf2261795115117c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/966c87c3a0905c1a73be4ebf2261795115117c51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/008d5fccd8a264d12330914f5b14e74a51c9ef03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008d5fccd8a264d12330914f5b14e74a51c9ef03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/008d5fccd8a264d12330914f5b14e74a51c9ef03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008d5fccd8a264d12330914f5b14e74a51c9ef03/comments", "author": null, "committer": null, "parents": [{"sha": "e11a4c8086c3e6fadeb25950bffca82be527ed8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11a4c8086c3e6fadeb25950bffca82be527ed8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11a4c8086c3e6fadeb25950bffca82be527ed8b"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "aac66d540b418f61a3a073544b0293620bc56206", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008d5fccd8a264d12330914f5b14e74a51c9ef03/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008d5fccd8a264d12330914f5b14e74a51c9ef03/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=008d5fccd8a264d12330914f5b14e74a51c9ef03", "patch": "@@ -1,3 +1,9 @@\n+2011-10-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/38174\n+\t* call.c (add_builtin_candidate): If two pointers have a composite\n+\tpointer type, generate a single candidate with that type.\n+\n 2011-10-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50614"}, {"sha": "7e87bdfea02689b1400075a5a61a861e7b197151", "filename": "gcc/cp/call.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008d5fccd8a264d12330914f5b14e74a51c9ef03/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008d5fccd8a264d12330914f5b14e74a51c9ef03/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=008d5fccd8a264d12330914f5b14e74a51c9ef03", "patch": "@@ -2582,6 +2582,21 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n \t  || MAYBE_CLASS_TYPE_P (type1)\n \t  || TREE_CODE (type1) == ENUMERAL_TYPE))\n     {\n+      if (TYPE_PTR_P (type1) || TYPE_PTR_TO_MEMBER_P (type1))\n+\t{\n+\t  tree cptype = composite_pointer_type (type1, type2,\n+\t\t\t\t\t\terror_mark_node,\n+\t\t\t\t\t\terror_mark_node,\n+\t\t\t\t\t\tCPO_CONVERSION,\n+\t\t\t\t\t\ttf_none);\n+\t  if (cptype != error_mark_node)\n+\t    {\n+\t      build_builtin_candidate\n+\t\t(candidates, fnname, cptype, cptype, args, argtypes, flags);\n+\t      return;\n+\t    }\n+\t}\n+\n       build_builtin_candidate\n \t(candidates, fnname, type1, type1, args, argtypes, flags);\n       build_builtin_candidate"}, {"sha": "e04f5277d0273e0a4a3f3e7d7b4d9f405c21bd4d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008d5fccd8a264d12330914f5b14e74a51c9ef03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008d5fccd8a264d12330914f5b14e74a51c9ef03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=008d5fccd8a264d12330914f5b14e74a51c9ef03", "patch": "@@ -1,3 +1,8 @@\n+2011-10-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/38174\n+\t* g++.dg/overload/operator4.C: New.\n+\n 2011-10-14  David Alan Gilbert  <david.gilbert@linaro.org>\n \n \t* gcc.dg/di-longlong64-sync-1.c: New test."}, {"sha": "3ec1eb472dd926093708a58e6111c99dad952fae", "filename": "gcc/testsuite/g++.dg/overload/operator4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/008d5fccd8a264d12330914f5b14e74a51c9ef03/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/008d5fccd8a264d12330914f5b14e74a51c9ef03/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator4.C?ref=008d5fccd8a264d12330914f5b14e74a51c9ef03", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/38174\n+\n+struct VolatileIntPtr {\n+  operator int volatile *();\n+};\n+\n+struct ConstIntPtr {\n+  operator int const *();\n+};\n+\n+void test_with_ptrs(VolatileIntPtr vip, ConstIntPtr cip) {\n+  bool b1 = (vip == cip);\n+  long p1 = vip - cip;\n+}"}]}