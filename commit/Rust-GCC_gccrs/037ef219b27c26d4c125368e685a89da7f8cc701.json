{"sha": "037ef219b27c26d4c125368e685a89da7f8cc701", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM3ZWYyMTliMjdjMjZkNGMxMjUzNjhlNjg1YTg5ZGE3ZjhjYzcwMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-24T13:42:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-24T15:12:44Z"}, "message": "libstdc++: Add std::is_layout_compatible trait for C++20\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (is_layout_compatible): Define.\n\t(is_corresponding_member): Define.\n\t* include/std/version (__cpp_lib_is_layout_compatible): Define.\n\t* testsuite/20_util/is_layout_compatible/is_corresponding_member.cc:\n\tNew test.\n\t* testsuite/20_util/is_layout_compatible/value.cc: New test.\n\t* testsuite/20_util/is_layout_compatible/version.cc: New test.\n\t* testsuite/20_util/is_pointer_interconvertible/with_class.cc:\n\tNew test.\n\t* testsuite/23_containers/span/layout_compat.cc: Do not use real\n\tstd::is_layout_compatible trait if available.", "tree": {"sha": "a1c12e03ad596ea1384bcd6c4cb9f5a4caf99ea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1c12e03ad596ea1384bcd6c4cb9f5a4caf99ea8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/037ef219b27c26d4c125368e685a89da7f8cc701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/037ef219b27c26d4c125368e685a89da7f8cc701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/037ef219b27c26d4c125368e685a89da7f8cc701", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/037ef219b27c26d4c125368e685a89da7f8cc701/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce18a29ef717f5920ebf5dc1d9e84570a1827d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce18a29ef717f5920ebf5dc1d9e84570a1827d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ce18a29ef717f5920ebf5dc1d9e84570a1827d4"}], "stats": {"total": 162, "additions": 153, "deletions": 9}, "files": [{"sha": "a0010d960b2dba095df463bd23628006a2a852ee", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=037ef219b27c26d4c125368e685a89da7f8cc701", "patch": "@@ -3414,6 +3414,31 @@ template<typename _Ret, typename _Fn, typename... _Args>\n     inline constexpr bool is_unbounded_array_v\n       = is_unbounded_array<_Tp>::value;\n \n+#if __has_builtin(__is_layout_compatible)\n+\n+  /// @since C++20\n+  template<typename _Tp, typename _Up>\n+    struct is_layout_compatible\n+    : bool_constant<__is_layout_compatible(_Tp, _Up)>\n+    { };\n+\n+  /// @ingroup variable_templates\n+  /// @since C++20\n+  template<typename _Tp, typename _Up>\n+    constexpr bool is_layout_compatible_v\n+      = __is_layout_compatible(_Tp, _Up);\n+\n+#if __has_builtin(__builtin_is_corresponding_member)\n+#define __cpp_lib_is_layout_compatible 201907L\n+\n+  /// @since C++20\n+  template<typename _S1, typename _S2, typename _M1, typename _M2>\n+    constexpr bool\n+    is_corresponding_member(_M1 _S1::*__m1, _M2 _S2::*__m2) noexcept\n+    { return __builtin_is_corresponding_member(__m1, __m2); }\n+#endif\n+#endif\n+\n #if __has_builtin(__is_pointer_interconvertible_base_of)\n   /// True if `_Derived` is standard-layout and has a base class of type `_Base`\n   /// @since C++20"}, {"sha": "70d573bb5174949e48612119535fdfb96ca6f5b5", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=037ef219b27c26d4c125368e685a89da7f8cc701", "patch": "@@ -236,6 +236,10 @@\n #ifdef _GLIBCXX_HAS_GTHREADS\n # define __cpp_lib_jthread 201911L\n #endif\n+#if __has_builtin(__is_layout_compatible) \\\n+  && __has_builtin(__builtin_is_corresponding_member)\n+# define __cpp_lib_is_layout_compatible 201907L\n+#endif\n #if __has_builtin(__is_pointer_interconvertible_base_of) \\\n  && __has_builtin(__builtin_is_pointer_interconvertible_with_class)\n # define __cpp_lib_is_pointer_interconvertible 201907L"}, {"sha": "69b359aa1d57874d58222936ea763e0639a529ff", "filename": "libstdc++-v3/testsuite/20_util/is_layout_compatible/is_corresponding_member.cc", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_layout_compatible%2Fis_corresponding_member.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_layout_compatible%2Fis_corresponding_member.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_layout_compatible%2Fis_corresponding_member.cc?ref=037ef219b27c26d4c125368e685a89da7f8cc701", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+#include <type_traits>\n+\n+using std::is_corresponding_member;\n+\n+struct A { int a; };\n+struct B { int b; };\n+struct C: public A, public B { };  // not a standard-layout class\n+\n+static_assert( is_corresponding_member( &C::a, &C::b ) );\n+// Succeeds because arguments have types int A::* and int B::*\n+\n+constexpr int C::*a = &C::a;\n+constexpr int C::*b = &C::b;\n+static_assert( ! is_corresponding_member( a, b ) );\n+// Not corresponding members, because arguments both have type int C::*\n+\n+static_assert( noexcept(!is_corresponding_member(a, b)) );"}, {"sha": "7686b34fc5a40d8cd23d17daf452269de6533f66", "filename": "libstdc++-v3/testsuite/20_util/is_layout_compatible/value.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_layout_compatible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_layout_compatible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_layout_compatible%2Fvalue.cc?ref=037ef219b27c26d4c125368e685a89da7f8cc701", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+#include <type_traits>\n+\n+#ifndef __cpp_lib_is_layout_compatible\n+# error \"Feature test macro for is_layout_compatible is missing in <type_traits>\"\n+#elif __cpp_lib_is_layout_compatible < 201907L\n+# error \"Feature test macro for is_layout_compatible has wrong value in <type_traits>\"\n+#endif\n+\n+template<typename T, typename U>\n+concept variable_template_is_correct\n+  = std::is_layout_compatible_v<T, U> == std::is_layout_compatible<T, U>::value;\n+\n+template<typename T, typename U>\n+requires variable_template_is_correct<T, U>\n+constexpr bool is_layout_compatible = std::is_layout_compatible_v<T, U>;\n+\n+static_assert( is_layout_compatible<void, void> );\n+static_assert( is_layout_compatible<int, int> );\n+static_assert( ! is_layout_compatible<int, int[]> );\n+static_assert( ! is_layout_compatible<int, int[1]> );\n+static_assert( is_layout_compatible<int[], int[]> );\n+static_assert( is_layout_compatible<int[1], int[1]> );\n+static_assert( ! is_layout_compatible<int[1], int[]> );\n+static_assert( ! is_layout_compatible<int[1], int[2]> );\n+\n+struct Incomplete;\n+// The standard says these are undefined, but they should work really:\n+// static_assert( is_layout_compatible<Incomplete, Incomplete> );\n+// static_assert( ! is_layout_compatible<Incomplete[], Incomplete> );\n+static_assert( is_layout_compatible<Incomplete[], Incomplete[]> );\n+\n+enum E1 : int { };\n+enum E2 : int;\n+static_assert( is_layout_compatible<E1, E2> );\n+enum E3 : unsigned int;\n+static_assert( ! is_layout_compatible<E1, E3> );\n+enum E4 : char { };\n+enum E5 : signed char { };\n+enum E6 : unsigned char { };\n+static_assert( ! is_layout_compatible<E4, E5> );\n+static_assert( ! is_layout_compatible<E4, E6> );\n+static_assert( ! is_layout_compatible<E5, E6> );\n+\n+struct A { int a; };\n+struct B { const int b; };\n+static_assert( is_layout_compatible<A, B> );\n+static_assert( is_layout_compatible<B, A> );\n+\n+struct C : A { };\n+struct D : B { };\n+static_assert( is_layout_compatible<C, D> );\n+\n+struct E : A { int i; }; // not standard-layout\n+static_assert( ! is_layout_compatible<E, A> );"}, {"sha": "1a32275fdf51224afc6a544c777f965671ff3bce", "filename": "libstdc++-v3/testsuite/20_util/is_layout_compatible/version.cc", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_layout_compatible%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_layout_compatible%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_layout_compatible%2Fversion.cc?ref=037ef219b27c26d4c125368e685a89da7f8cc701", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_is_layout_compatible\n+# error \"Feature test macro for is_layout_compatible is missing in <version>\"\n+#elif __cpp_lib_is_pointer_interconvertible < 201907L\n+# error \"Feature test macro for is_layout_compatible has wrong value in <version>\"\n+#endif"}, {"sha": "28de9b416fc3b14ec76874acbfdfa9361f358134", "filename": "libstdc++-v3/testsuite/20_util/is_pointer_interconvertible/with_class.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pointer_interconvertible%2Fwith_class.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pointer_interconvertible%2Fwith_class.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pointer_interconvertible%2Fwith_class.cc?ref=037ef219b27c26d4c125368e685a89da7f8cc701", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+#include <type_traits>\n+\n+struct A { int i; long l; };\n+\n+static_assert( std::is_pointer_interconvertible_with_class(&A::i) );\n+static_assert( ! std::is_pointer_interconvertible_with_class(&A::l) );\n+\n+constexpr int A::*a = nullptr;\n+static_assert( ! std::is_pointer_interconvertible_with_class(a) );\n+static_assert( noexcept( std::is_pointer_interconvertible_with_class(a) ) );\n+\n+struct B { const int i; };\n+static_assert( std::is_pointer_interconvertible_with_class(&B::i) );\n+\n+struct C { int f(); };\n+static_assert( ! std::is_pointer_interconvertible_with_class(&C::f) );\n+\n+struct D : A { };\n+static_assert( std::is_pointer_interconvertible_with_class(&D::i) );\n+\n+struct E : A { int j; };\n+// This works because the type of &E::i is int A::* and A is standard-layout:\n+static_assert( std::is_pointer_interconvertible_with_class(&E::i) );\n+constexpr int E::*e = a;\n+// This fails because E is not standard-layout:\n+static_assert( ! std::is_pointer_interconvertible_with_class(e) );\n+static_assert( ! std::is_pointer_interconvertible_with_class(&E::j) );"}, {"sha": "bb560fe5e6c58f3d1ac0f1afe22b9122b6e75582", "filename": "libstdc++-v3/testsuite/23_containers/span/layout_compat.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flayout_compat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037ef219b27c26d4c125368e685a89da7f8cc701/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flayout_compat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flayout_compat.cc?ref=037ef219b27c26d4c125368e685a89da7f8cc701", "patch": "@@ -27,22 +27,23 @@\n struct iovec { void* iov_base; std::size_t iov_len; };\n #endif\n \n-#if __cpp_lib_is_layout_compatible\n-using std::is_layout_compatible_v;\n-#else\n-// A poor substitute for is_layout_compatible_v\n+// std::span cannot possibly be layout-compatible with struct iovec because\n+// iovec::iov_base is a void* and span<void> is ill-formed. Additionally,\n+// the libstdc++ std::span uses [[no_unique_address]] on the second member,\n+// so that it's not present for a span of static extent, and that affects\n+// layout-compatibility too.\n+// Use this to check the size and alignment are compatible.\n template<typename T, typename U>\n-  constexpr bool is_layout_compatible_v\n+  constexpr bool same_size_and_alignment\n     = std::is_standard_layout_v<T> && std::is_standard_layout_v<U>\n       && sizeof(T) == sizeof(U) && alignof(T) == alignof(U);\n-#endif\n \n void\n test_pr95609()\n {\n   using rbuf = std::span<const std::byte>;\n-  using wbuf = std::span<std::byte>;\n+  static_assert(same_size_and_alignment<rbuf, struct iovec>);\n \n-  static_assert(is_layout_compatible_v<rbuf, struct iovec>);\n-  static_assert(is_layout_compatible_v<wbuf, struct iovec>);\n+  using wbuf = std::span<std::byte>;\n+  static_assert(same_size_and_alignment<wbuf, struct iovec>);\n }"}]}