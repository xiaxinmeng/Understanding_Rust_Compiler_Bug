{"sha": "71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFiZDcxODYwYTYxZGJkYmUyZmY2MGExYTQ2YTk3OGJhZjA0OTdhYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-11-03T02:48:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-11-03T02:48:44Z"}, "message": "re PR c++/18124 (ICE with invalid template template parameter)\n\n\tPR c++/18124\n\t* parser.c (cp_parser_type_parameter): Robustify.\n\n\tPR c++/18155\n\t* parser.c (cp_parser_single_declaration): Disallow template\n\ttypedefs.\n\n\tPR c++/18177\n\t* typeck.c (build_const_cast): Use error_operand_p.\n\n\tPR c++/18124\n\t* g++.dg/template/crash25.C: New test.\n\n\tPR c++/18155\n\t* g++.dg/template/typedef2.C: New test.\n\t* g++.dg/parse/crash13.C: Adjust error markers.\n\n\tPR c++/18177\n\t* g++.dg/conversion/const3.C: New test.\n\nFrom-SVN: r90016", "tree": {"sha": "9b03eb1ecacc97313559f4f706dc4a6cdffcee9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b03eb1ecacc97313559f4f706dc4a6cdffcee9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/comments", "author": null, "committer": null, "parents": [{"sha": "359202709b30a7b66b858591dfba5621caa0e5aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359202709b30a7b66b858591dfba5621caa0e5aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/359202709b30a7b66b858591dfba5621caa0e5aa"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "ef855e337a82cd3be79502c082839a583b6726a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "patch": "@@ -1,3 +1,15 @@\n+2004-11-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18124\n+\t* parser.c (cp_parser_type_parameter): Robustify.\n+\n+\tPR c++/18155\n+\t* parser.c (cp_parser_single_declaration): Disallow template\n+\ttypedefs.\n+\n+\tPR c++/18177\n+\t* typeck.c (build_const_cast): Use error_operand_p.\n+\n 2004-11-02  Ziemowit Laski  <zlaski@apple.com>\n \n \t* cp-lang.c (cxx_types_compatible_p): Remove prototype and definition."}, {"sha": "bea2f61ec3f0c295a51cc0658f42a34df619c1e2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "patch": "@@ -8186,9 +8186,15 @@ cp_parser_type_parameter (cp_parser* parser)\n \tif (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ)\n \t    && cp_lexer_next_token_is_not (parser->lexer, CPP_GREATER)\n \t    && cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))\n-\t  identifier = cp_parser_identifier (parser);\n+\t  {\n+\t    identifier = cp_parser_identifier (parser);\n+\t    /* Treat invalid names as if the parameter were nameless. */\n+\t    if (identifier == error_mark_node)\n+\t      identifier = NULL_TREE;\n+\t  }\n \telse\n \t  identifier = NULL_TREE;\n+\n \t/* Create the template parameter.  */\n \tparameter = finish_template_template_parm (class_type_node,\n \t\t\t\t\t\t   identifier);\n@@ -8231,15 +8237,13 @@ cp_parser_type_parameter (cp_parser* parser)\n \n \t/* Create the combined representation of the parameter and the\n \t   default argument.  */\n-\tparameter =  build_tree_list (default_argument, parameter);\n+\tparameter = build_tree_list (default_argument, parameter);\n       }\n       break;\n \n     default:\n-      /* Anything else is an error.  */\n-      cp_parser_error (parser,\n-\t\t       \"expected %<class%>, %<typename%>, or %<template%>\");\n-      parameter = error_mark_node;\n+      gcc_unreachable ();\n+      break;\n     }\n \n   return parameter;\n@@ -14801,6 +14805,11 @@ cp_parser_single_declaration (cp_parser* parser,\n   cp_decl_specifier_seq decl_specifiers;\n   bool function_definition_p = false;\n \n+  /* This function is only used when processing a template\n+     declaration.  */\n+  gcc_assert (innermost_scope_kind () == sk_template_parms\n+\t      || innermost_scope_kind () == sk_template_spec);\n+\n   /* Defer access checks until we know what is being declared.  */\n   push_deferring_access_checks (dk_deferred);\n \n@@ -14812,6 +14821,14 @@ cp_parser_single_declaration (cp_parser* parser,\n \t\t\t\t&declares_class_or_enum);\n   if (friend_p)\n     *friend_p = cp_parser_friend_p (&decl_specifiers);\n+\n+  /* There are no template typedefs.  */\n+  if (decl_specifiers.specs[(int) ds_typedef])\n+    {\n+      error (\"template declaration of %qs\", \"typedef\");\n+      decl = error_mark_node;\n+    }\n+\n   /* Gather up the access checks that occurred the\n      decl-specifier-seq.  */\n   stop_deferring_access_checks ();\n@@ -14843,8 +14860,6 @@ cp_parser_single_declaration (cp_parser* parser,\n \t    decl = error_mark_node;\n \t}\n     }\n-  else\n-    decl = NULL_TREE;\n   /* If it's not a template class, try for a template function.  If\n      the next token is a `;', then this declaration does not declare\n      anything.  But, if there were errors in the decl-specifiers, then\n@@ -14869,7 +14884,8 @@ cp_parser_single_declaration (cp_parser* parser,\n   parser->object_scope = NULL_TREE;\n   /* Look for a trailing `;' after the declaration.  */\n   if (!function_definition_p\n-      && !cp_parser_require (parser, CPP_SEMICOLON, \"`;'\"))\n+      && (decl == error_mark_node\n+\t  || !cp_parser_require (parser, CPP_SEMICOLON, \"`;'\")))\n     cp_parser_skip_to_end_of_block_or_statement (parser);\n \n   return decl;"}, {"sha": "325dd5682f227b04d98c0a960931ad70763f5a80", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "patch": "@@ -5099,7 +5099,7 @@ build_const_cast_1 (tree dst_type, tree expr, bool complain,\n tree\n build_const_cast (tree type, tree expr)\n {\n-  if (type == error_mark_node || expr == error_mark_node)\n+  if (type == error_mark_node || error_operand_p (expr))\n     return error_mark_node;\n \n   if (processing_template_decl)"}, {"sha": "68f830e313f4dbb406cd233d173de782996d5373", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "patch": "@@ -1,3 +1,15 @@\n+2004-11-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18124\n+\t* g++.dg/template/crash25.C: New test.\n+\n+\tPR c++/18155\n+\t* g++.dg/template/typedef2.C: New test.\n+\t* g++.dg/parse/crash13.C: Adjust error markers.\n+\n+\tPR c++/18177\n+\t* g++.dg/conversion/const3.C: New test.\n+\t\n 2004-11-03  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/17535"}, {"sha": "faa9f810c19b31a9911560f8ffd1298f33c52c5f", "filename": "gcc/testsuite/g++.dg/conversion/const3.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fconst3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fconst3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fconst3.C?ref=71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/18177\n+\n+void foo()\n+{\n+  X; // { dg-error \"\" }\n+  const_cast<int&>(X);\n+}"}, {"sha": "3c298ec8ede58f767d05e6a6eeabcd40ddd8a6bd", "filename": "gcc/testsuite/g++.dg/parse/crash13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C?ref=71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "patch": "@@ -13,7 +13,7 @@ struct A\n \n template <typename T> \n void func(A<T>::B* )\t// { dg-error \"variable|template|expression\" }\n-{\t\t\t// { dg-error \";\" }\n+{\n }\n \n int main() "}, {"sha": "fa77f0d4fb67579798dd8cb1c75752132a979fbc", "filename": "gcc/testsuite/g++.dg/template/crash25.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash25.C?ref=71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "patch": "@@ -0,0 +1,3 @@\n+// PR c++/18124\n+\n+template <template <int> class class> class A {}; // { dg-error \"\" }"}, {"sha": "6c65671f6fe46c346f7804c507f5d0b9993948ad", "filename": "gcc/testsuite/g++.dg/template/typedef2.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71bd71860a61dbdbe2ff60a1a46a978baf0497ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef2.C?ref=71bd71860a61dbdbe2ff60a1a46a978baf0497ac", "patch": "@@ -0,0 +1,3 @@\n+// PR c++/18155\n+\n+template<int> typedef struct A; // { dg-error \"\" }"}]}