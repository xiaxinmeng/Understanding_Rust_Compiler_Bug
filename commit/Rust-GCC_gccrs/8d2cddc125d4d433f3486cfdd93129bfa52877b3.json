{"sha": "8d2cddc125d4d433f3486cfdd93129bfa52877b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyY2RkYzEyNWQ0ZDQzM2YzNDg2Y2ZkZDkzMTI5YmZhNTI4NzdiMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-06-16T16:35:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-06-16T16:35:06Z"}, "message": "shared_mutex: Implement N3659.\n\n\t* include/std/shared_mutex: Implement N3659.\n\t* include/bits/c++14_warning.h: New.\n\t* include/Makefile.am: Add new headers.\n\t* include/Makefile.in: Regenerate.\n\t* testsuite/30_threads/shared_lock/cons/1.cc: New.\n\t* testsuite/30_threads/shared_lock/locking/2.cc: New.\n\t* testsuite/30_threads/shared_lock/cons/2.cc: New.\n\t* testsuite/30_threads/shared_lock/locking/3.cc: New.\n\t* testsuite/30_threads/shared_lock/cons/3.cc: New.\n\t* testsuite/30_threads/shared_lock/locking/4.cc: New.\n\t* testsuite/30_threads/shared_lock/cons/4.cc: New.\n\t* testsuite/30_threads/shared_lock/modifiers/1.cc: New.\n\t* testsuite/30_threads/shared_lock/cons/5.cc: New.\n\t* testsuite/30_threads/shared_lock/modifiers/2.cc: New.\n\t* testsuite/30_threads/shared_lock/cons/6.cc: New.\n\t* testsuite/30_threads/shared_lock/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/30_threads/shared_lock/locking/1.cc: New.\n\t* testsuite/30_threads/shared_lock/requirements/typedefs.cc: New.\n\t* testsuite/30_threads/shared_mutex/cons/1.cc: New.\n\t* testsuite/30_threads/shared_mutex/cons/assign_neg.cc: New.\n\t* testsuite/30_threads/shared_mutex/cons/copy_neg.cc: New.\n\t* testsuite/30_threads/shared_mutex/requirements/\n\tstandard_layout.cc: New.\n\t* testsuite/30_threads/shared_mutex/try_lock/1.cc: New.\n\t* testsuite/30_threads/shared_mutex/try_lock/2.cc: New.\n\nFrom-SVN: r200134", "tree": {"sha": "bcfb049cd10a5204e2abcd09e3d0cf750be6743a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcfb049cd10a5204e2abcd09e3d0cf750be6743a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d2cddc125d4d433f3486cfdd93129bfa52877b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2cddc125d4d433f3486cfdd93129bfa52877b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2cddc125d4d433f3486cfdd93129bfa52877b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2cddc125d4d433f3486cfdd93129bfa52877b3/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/393f9fedf35f006eb9c8c5ca185ae99aa2a0cce6"}], "stats": {"total": 1606, "additions": 1606, "deletions": 0}, "files": [{"sha": "9f288bd6a1daa765f765efc5bf1fd0e4fef7eadd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -1,3 +1,32 @@\n+2013-06-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/shared_mutex: Implement N3659.\n+\t* include/bits/c++14_warning.h: New.\n+\t* include/Makefile.am: Add new headers.\n+\t* include/Makefile.in: Regenerate.\n+\t* testsuite/30_threads/shared_lock/cons/1.cc: New.\n+\t* testsuite/30_threads/shared_lock/locking/2.cc: New.\n+\t* testsuite/30_threads/shared_lock/cons/2.cc: New.\n+\t* testsuite/30_threads/shared_lock/locking/3.cc: New.\n+\t* testsuite/30_threads/shared_lock/cons/3.cc: New.\n+\t* testsuite/30_threads/shared_lock/locking/4.cc: New.\n+\t* testsuite/30_threads/shared_lock/cons/4.cc: New.\n+\t* testsuite/30_threads/shared_lock/modifiers/1.cc: New.\n+\t* testsuite/30_threads/shared_lock/cons/5.cc: New.\n+\t* testsuite/30_threads/shared_lock/modifiers/2.cc: New.\n+\t* testsuite/30_threads/shared_lock/cons/6.cc: New.\n+\t* testsuite/30_threads/shared_lock/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/30_threads/shared_lock/locking/1.cc: New.\n+\t* testsuite/30_threads/shared_lock/requirements/typedefs.cc: New.\n+\t* testsuite/30_threads/shared_mutex/cons/1.cc: New.\n+\t* testsuite/30_threads/shared_mutex/cons/assign_neg.cc: New.\n+\t* testsuite/30_threads/shared_mutex/cons/copy_neg.cc: New.\n+\t* testsuite/30_threads/shared_mutex/requirements/\n+\tstandard_layout.cc: New.\n+\t* testsuite/30_threads/shared_mutex/try_lock/1.cc: New.\n+\t* testsuite/30_threads/shared_mutex/try_lock/2.cc: New.\n+\n 2013-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/57619"}, {"sha": "801a8858087d5da9b74d5a29a64c2bbb61479506", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -58,6 +58,7 @@ std_headers = \\\n \t${std_srcdir}/regex \\\n \t${std_srcdir}/scoped_allocator \\\n \t${std_srcdir}/set \\\n+\t${std_srcdir}/shared_mutex \\\n \t${std_srcdir}/sstream \\\n \t${std_srcdir}/stack \\\n \t${std_srcdir}/stdexcept \\\n@@ -87,6 +88,7 @@ bits_headers = \\\n \t${bits_srcdir}/basic_string.tcc \\\n \t${bits_srcdir}/boost_concept_check.h \\\n \t${bits_srcdir}/c++0x_warning.h \\\n+\t${bits_srcdir}/c++14_warning.h \\\n \t${bits_srcdir}/char_traits.h \\\n \t${bits_srcdir}/codecvt.h \\\n \t${bits_srcdir}/concept_check.h \\"}, {"sha": "995b898520eb061186a27afa5123e9d823c473c2", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -320,6 +320,7 @@ std_headers = \\\n \t${std_srcdir}/regex \\\n \t${std_srcdir}/scoped_allocator \\\n \t${std_srcdir}/set \\\n+\t${std_srcdir}/shared_mutex \\\n \t${std_srcdir}/sstream \\\n \t${std_srcdir}/stack \\\n \t${std_srcdir}/stdexcept \\\n@@ -349,6 +350,7 @@ bits_headers = \\\n \t${bits_srcdir}/basic_string.tcc \\\n \t${bits_srcdir}/boost_concept_check.h \\\n \t${bits_srcdir}/c++0x_warning.h \\\n+\t${bits_srcdir}/c++14_warning.h \\\n \t${bits_srcdir}/char_traits.h \\\n \t${bits_srcdir}/codecvt.h \\\n \t${bits_srcdir}/concept_check.h \\"}, {"sha": "ff2adfa75da23690239d8cdfb4425848d9c74870", "filename": "libstdc++-v3/include/bits/c++14_warning.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2B14_warning.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2B14_warning.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2B14_warning.h?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/c++14_warning.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n+ */\n+\n+#ifndef _CXX14_WARNING_H\n+#define _CXX14_WARNING_H 1\n+\n+#if __cplusplus <= 201103L\n+#error This file requires compiler and library support for the forthcoming \\\n+ISO C++ 2014 standard. This support is currently experimental, and must be \\\n+enabled with the -std=c++1y or -std=gnu++1y compiler options.\n+#endif\n+\n+#endif"}, {"sha": "f60628278f85b105eceb75cc4786b130b26e4921", "filename": "libstdc++-v3/include/std/shared_mutex", "status": "added", "additions": 434, "deletions": 0, "changes": 434, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,434 @@\n+// <shared_mutex> -*- C++ -*-\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/shared_mutex\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_SHARED_MUTEX\n+#define _GLIBCXX_SHARED_MUTEX 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <bits/c++config.h>\n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+# include <mutex>\n+# include <condition_variable>\n+#endif\n+#include <bits/functexcept.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /**\n+   * @ingroup mutexes\n+   * @{\n+   */\n+\n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+  /// shared_mutex\n+  class shared_mutex\n+  {\n+#if _GTHREAD_USE_MUTEX_TIMEDLOCK\n+    struct _Mutex : mutex\n+    {\n+      typedef chrono::steady_clock \t  \t__clock_t;\n+\n+      template <class _Rep, class _Period>\n+\tbool\n+\ttry_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n+\t{ return __try_lock_for_impl(__rtime); }\n+\n+      template <class _Clock, class _Duration>\n+\tbool\n+\ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n+\t{\n+\t  chrono::time_point<_Clock, chrono::seconds> __s =\n+\t    chrono::time_point_cast<chrono::seconds>(__atime);\n+\n+\t  chrono::nanoseconds __ns =\n+\t    chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n+\n+\t  __gthread_time_t __ts = {\n+\t    static_cast<std::time_t>(__s.time_since_epoch().count()),\n+\t    static_cast<long>(__ns.count())\n+\t  };\n+\n+\t  return !__gthread_mutex_timedlock(native_handle(), &__ts);\n+\t}\n+\n+    private:\n+      template<typename _Rep, typename _Period>\n+\ttypename enable_if<\n+\t  ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+\t__try_lock_for_impl(const chrono::duration<_Rep, _Period>& __rtime)\n+\t{\n+\t  __clock_t::time_point __atime = __clock_t::now()\n+\t    + chrono::duration_cast<__clock_t::duration>(__rtime);\n+\n+\t  return try_lock_until(__atime);\n+\t}\n+\n+      template <typename _Rep, typename _Period>\n+\ttypename enable_if<\n+\t  !ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+\t__try_lock_for_impl(const chrono::duration<_Rep, _Period>& __rtime)\n+\t{\n+\t  __clock_t::time_point __atime = __clock_t::now()\n+\t    + ++chrono::duration_cast<__clock_t::duration>(__rtime);\n+\n+\t  return try_lock_until(__atime);\n+\t}\n+    };\n+#else\n+    typedef mutex _Mutex;\n+#endif\n+\n+    // Based on Howard Hinnant's reference implementation from N2406\n+\n+    _Mutex\t\t_M_mut;\n+    condition_variable\t_M_gate1;\n+    condition_variable\t_M_gate2;\n+    unsigned\t\t_M_state;\n+\n+    static constexpr unsigned _S_write_entered\n+      = 1U << (sizeof(unsigned)*__CHAR_BIT__ - 1);\n+    static constexpr unsigned _M_n_readers = ~_S_write_entered;\n+\n+  public:\n+    shared_mutex() : _M_state(0) {}\n+\n+    ~shared_mutex()\n+    {\n+      _GLIBCXX_DEBUG_ASSERT( _M_state == 0 );\n+    }\n+\n+    shared_mutex(const shared_mutex&) = delete;\n+    shared_mutex& operator=(const shared_mutex&) = delete;\n+\n+    // Exclusive ownership\n+\n+    void\n+    lock()\n+    {\n+      unique_lock<mutex> __lk(_M_mut);\n+      while (_M_state & _S_write_entered)\n+\t_M_gate1.wait(__lk);\n+      _M_state |= _S_write_entered;\n+      while (_M_state & _M_n_readers)\n+\t_M_gate2.wait(__lk);\n+    }\n+\n+    bool\n+    try_lock()\n+    {\n+      unique_lock<mutex> __lk(_M_mut, try_to_lock);\n+      if (__lk.owns_lock() && _M_state == 0)\n+\t{\n+\t  _M_state = _S_write_entered;\n+\t  return true;\n+\t}\n+      return false;\n+    }\n+\n+#if _GTHREAD_USE_MUTEX_TIMEDLOCK\n+    template<typename _Rep, typename _Period>\n+      bool\n+      try_lock_for(const chrono::duration<_Rep, _Period>& __rel_time)\n+      {\n+\tunique_lock<_Mutex> __lk(_M_mut, __rel_time);\n+\tif (__lk.owns_lock() && _M_state == 0)\n+\t  {\n+\t    _M_state = _S_write_entered;\n+\t    return true;\n+\t  }\n+\treturn false;\n+      }\n+\n+    template<typename _Clock, typename _Duration>\n+      bool\n+      try_lock_until(const chrono::time_point<_Clock, _Duration>& __abs_time)\n+      {\n+\tunique_lock<_Mutex> __lk(_M_mut, __abs_time);\n+\tif (__lk.owns_lock() && _M_state == 0)\n+\t  {\n+\t    _M_state = _S_write_entered;\n+\t    return true;\n+\t  }\n+\treturn false;\n+      }\n+#endif\n+\n+    void\n+    unlock()\n+    {\n+      {\n+\tlock_guard<_Mutex> __lk(_M_mut);\n+\t_M_state = 0;\n+      }\n+      _M_gate1.notify_all();\n+    }\n+\n+    // Shared ownership\n+\n+    void\n+    lock_shared()\n+    {\n+      unique_lock<mutex> __lk(_M_mut);\n+      while ((_M_state & _S_write_entered)\n+\t  || (_M_state & _M_n_readers) == _M_n_readers)\n+\t{\n+\t  _M_gate1.wait(__lk);\n+\t}\n+      unsigned __num_readers = (_M_state & _M_n_readers) + 1;\n+      _M_state &= ~_M_n_readers;\n+      _M_state |= __num_readers;\n+    }\n+\n+    bool\n+    try_lock_shared()\n+    {\n+      unique_lock<_Mutex> __lk(_M_mut, try_to_lock);\n+      unsigned __num_readers = _M_state & _M_n_readers;\n+      if (__lk.owns_lock() && !(_M_state & _S_write_entered)\n+\t  && __num_readers != _M_n_readers)\n+\t{\n+\t  ++__num_readers;\n+\t  _M_state &= ~_M_n_readers;\n+\t  _M_state |= __num_readers;\n+\t  return true;\n+\t}\n+      return false;\n+    }\n+\n+#if _GTHREAD_USE_MUTEX_TIMEDLOCK\n+    template<typename _Rep, typename _Period>\n+      bool\n+      try_lock_shared_for(const chrono::duration<_Rep, _Period>& __rel_time)\n+      {\n+\tunique_lock<_Mutex> __lk(_M_mut, __rel_time);\n+\tif (__lk.owns_lock())\n+\t  {\n+\t    unsigned __num_readers = _M_state & _M_n_readers;\n+\t    if (!(_M_state & _S_write_entered)\n+\t\t&& __num_readers != _M_n_readers)\n+\t      {\n+\t\t++__num_readers;\n+\t\t_M_state &= ~_M_n_readers;\n+\t\t_M_state |= __num_readers;\n+\t\treturn true;\n+\t      }\n+\t  }\n+\treturn false;\n+      }\n+\n+    template <typename _Clock, typename _Duration>\n+      bool\n+      try_lock_shared_until(const chrono::time_point<_Clock,\n+\t\t\t\t\t\t     _Duration>& __abs_time)\n+      {\n+\tunique_lock<_Mutex> __lk(_M_mut, __abs_time);\n+\tif (__lk.owns_lock())\n+\t  {\n+\t    unsigned __num_readers = _M_state & _M_n_readers;\n+\t    if (!(_M_state & _S_write_entered)\n+\t\t&& __num_readers != _M_n_readers)\n+\t      {\n+\t\t++__num_readers;\n+\t\t_M_state &= ~_M_n_readers;\n+\t\t_M_state |= __num_readers;\n+\t\treturn true;\n+\t      }\n+\t  }\n+\treturn false;\n+      }\n+#endif\n+\n+    void\n+    unlock_shared()\n+    {\n+      lock_guard<_Mutex> __lk(_M_mut);\n+      unsigned __num_readers = (_M_state & _M_n_readers) - 1;\n+      _M_state &= ~_M_n_readers;\n+      _M_state |= __num_readers;\n+      if (_M_state & _S_write_entered)\n+\t{\n+\t  if (__num_readers == 0)\n+\t    _M_gate2.notify_one();\n+\t}\n+      else\n+\t{\n+\t  if (__num_readers == _M_n_readers - 1)\n+\t    _M_gate1.notify_one();\n+\t}\n+    }\n+  };\n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+\n+  /// shared_lock\n+  template<typename _Mutex>\n+    class shared_lock\n+    {\n+    public:\n+      typedef _Mutex mutex_type;\n+\n+      // Shared locking\n+\n+      shared_lock() noexcept : _M_pm(nullptr), _M_owns(false) { }\n+\n+      explicit\n+      shared_lock(mutex_type& __m) : _M_pm(&__m), _M_owns(true)\n+      { __m.lock_shared(); }\n+\n+      shared_lock(mutex_type& __m, defer_lock_t) noexcept\n+      : _M_pm(&__m), _M_owns(false) { }\n+\n+      shared_lock(mutex_type& __m, try_to_lock_t)\n+      : _M_pm(&__m), _M_owns(__m.try_lock_shared()) { }\n+\n+      shared_lock(mutex_type& __m, adopt_lock_t)\n+      : _M_pm(&__m), _M_owns(true) { }\n+\n+      template<typename _Clock, typename _Duration>\n+\tshared_lock(mutex_type& __m,\n+\t\t    const chrono::time_point<_Clock, _Duration>& __abs_time)\n+      : _M_pm(&__m), _M_owns(__m.try_lock_shared_until(__abs_time)) { }\n+\n+      template<typename _Rep, typename _Period>\n+\tshared_lock(mutex_type& __m,\n+\t\t    const chrono::duration<_Rep, _Period>& __rel_time)\n+      : _M_pm(&__m), _M_owns(__m.try_lock_shared_for(__rel_time)) { }\n+\n+      ~shared_lock()\n+      {\n+\tif (_M_owns)\n+\t  _M_pm->unlock_shared();\n+      }\n+\n+      shared_lock(shared_lock const&) = delete;\n+      shared_lock& operator=(shared_lock const&) = delete;\n+\n+      shared_lock(shared_lock&& __sl) noexcept : shared_lock()\n+      { swap(__sl); }\n+\n+      shared_lock&\n+      operator=(shared_lock&& __sl) noexcept\n+      { shared_lock(std::move(__sl)).swap(*this); }\n+\n+      void\n+      lock()\n+      {\n+\t_M_lockable();\n+\t_M_pm->lock_shared();\n+\t_M_owns = true;\n+      }\n+\n+      bool\n+      try_lock()\n+      {\n+\t_M_lockable();\n+\treturn _M_owns = _M_pm->try_lock_shared();\n+      }\n+\n+      template<typename _Rep, typename _Period>\n+\tbool\n+\ttry_lock_for(const chrono::duration<_Rep, _Period>& __rel_time)\n+\t{\n+\t  _M_lockable();\n+\t  return _M_owns = _M_pm->try_lock_shared_for(__rel_time);\n+\t}\n+\n+      template<typename _Clock, typename _Duration>\n+\tbool\n+\ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __abs_time)\n+\t{\n+\t  _M_lockable();\n+\t  return _M_owns = _M_pm->try_lock_shared_until(__abs_time);\n+\t}\n+\n+      void\n+      unlock()\n+      {\n+\tif (!_M_owns)\n+\t  __throw_system_error(int(errc::resource_deadlock_would_occur));\n+\t_M_pm->unlock_shared();\n+\t_M_owns = false;\n+      }\n+\n+      // Setters\n+\n+      void\n+      swap(shared_lock& __u) noexcept\n+      {\n+\tstd::swap(_M_pm, __u._M_pm);\n+\tstd::swap(_M_owns, __u._M_owns);\n+      }\n+\n+      mutex_type*\n+      release() noexcept\n+      {\n+\t_M_owns = false;\n+\treturn std::exchange(_M_pm, nullptr);\n+      }\n+\n+      // Getters\n+\n+      bool owns_lock() const noexcept { return _M_owns; }\n+\n+      explicit operator bool() const noexcept { return _M_owns; }\n+\n+      mutex_type* mutex() const noexcept { return _M_pm; }\n+\n+    private:\n+      void\n+      _M_lockable() const\n+      {\n+\tif (_M_pm == nullptr)\n+\t  __throw_system_error(int(errc::operation_not_permitted));\n+\tif (_M_owns)\n+\t  __throw_system_error(int(errc::resource_deadlock_would_occur));\n+      }\n+\n+      mutex_type*\t_M_pm;\n+      bool\t\t_M_owns;\n+    };\n+\n+  /// Swap specialization for shared_lock\n+  template<typename _Mutex>\n+    void\n+    swap(shared_lock<_Mutex>& __x, shared_lock<_Mutex>& __y) noexcept\n+    { __x.swap(__y); }\n+\n+  // @} group mutexes\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_SHARED_MUTEX"}, {"sha": "c05044e347161133848a60da1082fd0172482297", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/cons/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F1.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      lock_type lock;\n+\n+      VERIFY( !lock.owns_lock() );\n+      VERIFY( !(bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "02d1d6bcecafeea752d8e7d540c09bb658c6d991", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/cons/2.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F2.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      lock_type lock(m);\n+\n+      VERIFY( lock.owns_lock() );\n+      VERIFY( (bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "9af2bfa46a0d5541db4222bf4272a26f3e3838f8", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/cons/3.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F3.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      lock_type lock(m, std::defer_lock);\n+\n+      VERIFY( !lock.owns_lock() );\n+      VERIFY( !(bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "e80d1ae8fc73ae47c0ca4f32c6d2dbc1662d84ea", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/cons/4.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F4.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      lock_type lock(m, std::try_to_lock);\n+\n+      VERIFY( lock.owns_lock() );\n+      VERIFY( (bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "95a704c935e56f4baf99787e44e4d03786106e99", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/cons/5.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F5.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads-timed \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <chrono>\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+  typedef std::chrono::system_clock clock_type;\n+\n+  try\n+    {\n+      clock_type::time_point t = clock_type::now() + std::chrono::seconds(5);\n+\n+      mutex_type m;\n+      lock_type lock(m, t);\n+\n+      VERIFY( lock.owns_lock() );\n+      VERIFY( (bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "a1a8eea79087e241cfe6c1e077717a9b3601eb1b", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/cons/6.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fcons%2F6.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads-timed \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <chrono>\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+  typedef std::chrono::system_clock clock_type;\n+\n+  try\n+    {\n+      clock_type::duration d = std::chrono::seconds(5);\n+\n+      mutex_type m;\n+      lock_type lock(m, d);\n+\n+      VERIFY( lock.owns_lock() );\n+      VERIFY( (bool)lock );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "1d52cd928cdc32ba609b6ae96c347a70074a0fbf", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/locking/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F1.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      lock_type l(m, std::defer_lock);\n+\n+      l.lock();\n+\n+      VERIFY( (bool)l );\n+      VERIFY( l.owns_lock() );\n+\n+      l.unlock();\n+\n+      VERIFY( !(bool)l );\n+      VERIFY( !l.owns_lock() );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "38886d97b1cdc16d2ef674f0c9320cde2e9d79ea", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/locking/2.cc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F2.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,106 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      lock_type l;\n+\n+      // Lock shared_lock w/o mutex\n+      try\n+        {\n+          l.lock();\n+        }\n+      catch (const std::system_error& ex)\n+        {\n+\t  VERIFY( ex.code() == std::make_error_code\n+\t\t  (std::errc::operation_not_permitted) );\n+        }\n+      catch (...)\n+        {\n+          VERIFY( false );\n+        }\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      lock_type l(m);\n+\n+      // Lock already locked shared_lock.\n+      try\n+\t{\n+\t  l.lock();\n+\t}\n+      catch (const std::system_error& ex)\n+\t{\n+\t  VERIFY( ex.code() == std::make_error_code\n+\t\t  (std::errc::resource_deadlock_would_occur) );\n+\t}\n+      catch (...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "a8b3ff7dec6e0353c09203a56f3c1493f5aaa640", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/locking/3.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F3.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads-timed \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <chrono>\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      lock_type l(m, std::defer_lock);\n+\n+      try\n+\t{\n+\t  l.try_lock_for(std::chrono::milliseconds(100));\n+\t}\n+      catch(const std::system_error&)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      catch (...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      VERIFY( l.owns_lock() );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "4b4743e14c6acff031012836b4d22b4fd0eba476", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/locking/4.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F4.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,69 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads-timed \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <chrono>\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+  typedef std::chrono::system_clock clock_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      lock_type l(m, std::defer_lock);\n+      clock_type::time_point t = clock_type::now() + std::chrono::seconds(1);\n+\n+      try\n+\t{\n+\t  l.try_lock_until(t);\n+\t}\n+      catch(const std::system_error&)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      catch (...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      VERIFY( l.owns_lock() );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "fd661de63ce59615c00f42b46af1d805737e494c", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/modifiers/1.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fmodifiers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fmodifiers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fmodifiers%2F1.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,68 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      lock_type l1(m);\n+      lock_type l2;\n+\n+      try\n+\t{\n+\t  l1.swap(l2);\n+\t}\n+      catch (const std::system_error&)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      catch(...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      VERIFY( !(bool)l1 );\n+      VERIFY( (bool)l2 );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "c22340060b949a20ea17b7431d67cecd0e96efa3", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/modifiers/2.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Fmodifiers%2F2.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,68 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+  typedef std::shared_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      lock_type l1(m);\n+      lock_type l2;\n+\n+      try\n+\t{\n+\t  l1.swap(l2);\n+\t}\n+      catch (const std::system_error&)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      catch(...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      VERIFY( !(bool)l1 );\n+      VERIFY( (bool)l2 );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "53d7a98641f672ed941b8f043364fe1042d9cc92", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Frequirements%2Fexplicit_instantiation.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// NB: This file is for testing with NO OTHER INCLUDES.\n+\n+#include <shared_mutex>\n+\n+namespace std\n+{\n+  template class shared_lock<shared_mutex>;\n+}"}, {"sha": "cd4fa3ea8519205a29df5ec9165ff9f8d5ad49d6", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Frequirements%2Ftypedefs.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// NB: This file is for testing with NO OTHER INCLUDES.\n+\n+#include <shared_mutex>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::shared_lock<std::shared_mutex> test_type;\n+  typedef test_type::mutex_type mutex_type;\n+}"}, {"sha": "794e8ae57c311140b85d3e776c8b560fac8523a0", "filename": "libstdc++-v3/testsuite/30_threads/shared_mutex/cons/1.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Fcons%2F1.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+\n+  try\n+    {\n+      mutex_type m1;\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "092cd100bac1185671fc31722be848d65d441892", "filename": "libstdc++-v3/testsuite/30_threads/shared_mutex/cons/assign_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Fcons%2Fassign_neg.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::shared_mutex mutex_type;\n+  mutex_type m1;\n+  mutex_type m2;\n+  m1 = m2;\t\t\t// { dg-error \"deleted\" }\n+}\n+\n+// { dg-prune-output \"include\" }"}, {"sha": "a9faf279de103271d52e6060a858d3652ef859b9", "filename": "libstdc++-v3/testsuite/30_threads/shared_mutex/cons/copy_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Fcons%2Fcopy_neg.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::shared_mutex mutex_type;\n+  mutex_type m1;\n+  mutex_type m2(m1);\t\t// { dg-error \"deleted\" }\n+}\n+\n+// { dg-prune-output \"include\" }"}, {"sha": "84f22cc239f8b5068934656a663a23013d9d6ccb", "filename": "libstdc++-v3/testsuite/30_threads/shared_mutex/requirements/standard_layout.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Frequirements%2Fstandard_layout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Frequirements%2Fstandard_layout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Frequirements%2Fstandard_layout.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <testsuite_common_types.h>\n+\n+void test01()\n+{\n+  __gnu_test::standard_layout test;\n+  test.operator()<std::shared_mutex>();\n+}"}, {"sha": "7381ec2e8621a9e1cab1197a903d70cfde62ada0", "filename": "libstdc++-v3/testsuite/30_threads/shared_mutex/try_lock/1.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Ftry_lock%2F1.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      bool b = m.try_lock();\n+      VERIFY( b );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "393d9f2dba75e3f51752719447e68a97fcce821f", "filename": "libstdc++-v3/testsuite/30_threads/shared_mutex/try_lock/2.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2cddc125d4d433f3486cfdd93129bfa52877b3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_mutex%2Ftry_lock%2F2.cc?ref=8d2cddc125d4d433f3486cfdd93129bfa52877b3", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++1y -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++1y \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::shared_mutex mutex_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      std::thread t([&] {\n+        try\n+          {\n+            b = m.try_lock();\n+          }\n+        catch (const std::system_error& e)\n+          {\n+            VERIFY( false );\n+          }\n+      });\n+      t.join();\n+      VERIFY( !b );\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}]}