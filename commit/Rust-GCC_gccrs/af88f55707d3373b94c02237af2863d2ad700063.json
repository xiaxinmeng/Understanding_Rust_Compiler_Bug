{"sha": "af88f55707d3373b94c02237af2863d2ad700063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY4OGY1NTcwN2QzMzczYjk0YzAyMjM3YWYyODYzZDJhZDcwMDA2Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-03-31T06:40:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-31T06:40:39Z"}, "message": "re PR libstdc++/80251 (Is the is_aggregate meta function missing?)\n\n\tPR libstdc++/80251\nc-family/\n\t* c-common.h (enum rid): Add RID_IS_AGGREGATE.\n\t* c-common.c (c_common_reswords): Add __is_aggregate trait.\ncp/\n\t* cp-tree.h (enum cp_trait_kind): Add CPTK_IS_AGGREGATE.\n\t* cxx-pretty-print.c (pp_cxx_trait_expression): Handle\n\tCPTK_IS_AGGREGATE.\n\t* semantics.c (trait_expr_value): Handle CPTK_IS_AGGREGATE.\n\tRemove extraneous parens.\n\t(finish_trait_expr): Handle CPTK_IS_AGGREGATE.\n\t* parser.c (cp_parser_primary_expression): Handle RID_IS_AGGREGATE.\n\t(cp_parser_trait_expr): Likewise.\ntestsuite/\n\t* g++.dg/ext/is_aggregate.C: New test.\n\nFrom-SVN: r246609", "tree": {"sha": "cdd1f27aaae10888509d5ce06f0f1ca486071e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd1f27aaae10888509d5ce06f0f1ca486071e92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af88f55707d3373b94c02237af2863d2ad700063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af88f55707d3373b94c02237af2863d2ad700063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af88f55707d3373b94c02237af2863d2ad700063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af88f55707d3373b94c02237af2863d2ad700063/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d790165457c7c6912ed98da4a64d9b020c6f483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d790165457c7c6912ed98da4a64d9b020c6f483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d790165457c7c6912ed98da4a64d9b020c6f483"}], "stats": {"total": 179, "additions": 165, "deletions": 14}, "files": [{"sha": "a129f5def777a84b9f60552edb5e3397a8c2b569", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=af88f55707d3373b94c02237af2863d2ad700063", "patch": "@@ -1,3 +1,9 @@\n+2017-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/80251\n+\t* c-common.h (enum rid): Add RID_IS_AGGREGATE.\n+\t* c-common.c (c_common_reswords): Add __is_aggregate trait.\n+\n 2017-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/80162"}, {"sha": "824fdc71233af6c8d19361f57276f4f82a0d10d0", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=af88f55707d3373b94c02237af2863d2ad700063", "patch": "@@ -403,6 +403,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__inline\",\t\tRID_INLINE,\t0 },\n   { \"__inline__\",\tRID_INLINE,\t0 },\n   { \"__is_abstract\",\tRID_IS_ABSTRACT, D_CXXONLY },\n+  { \"__is_aggregate\",\tRID_IS_AGGREGATE, D_CXXONLY },\n   { \"__is_base_of\",\tRID_IS_BASE_OF, D_CXXONLY },\n   { \"__is_class\",\tRID_IS_CLASS,\tD_CXXONLY },\n   { \"__is_empty\",\tRID_IS_EMPTY,\tD_CXXONLY },"}, {"sha": "b933342043437488b0ea8684b6af9784930a47a1", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=af88f55707d3373b94c02237af2863d2ad700063", "patch": "@@ -162,8 +162,8 @@ enum rid\n   RID_HAS_TRIVIAL_CONSTRUCTOR, RID_HAS_TRIVIAL_COPY,\n   RID_HAS_TRIVIAL_DESTRUCTOR,  RID_HAS_UNIQUE_OBJ_REPRESENTATIONS,\n   RID_HAS_VIRTUAL_DESTRUCTOR,\n-  RID_IS_ABSTRACT,             RID_IS_BASE_OF,\n-  RID_IS_CLASS,\n+  RID_IS_ABSTRACT,             RID_IS_AGGREGATE,\n+  RID_IS_BASE_OF,              RID_IS_CLASS,\n   RID_IS_EMPTY,                RID_IS_ENUM,\n   RID_IS_FINAL,                RID_IS_LITERAL_TYPE,\n   RID_IS_POD,                  RID_IS_POLYMORPHIC,"}, {"sha": "14eee1c33409008b1017524b11610cb823e283e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=af88f55707d3373b94c02237af2863d2ad700063", "patch": "@@ -1,3 +1,15 @@\n+2017-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/80251\n+\t* cp-tree.h (enum cp_trait_kind): Add CPTK_IS_AGGREGATE.\n+\t* cxx-pretty-print.c (pp_cxx_trait_expression): Handle\n+\tCPTK_IS_AGGREGATE.\n+\t* semantics.c (trait_expr_value): Handle CPTK_IS_AGGREGATE.\n+\tRemove extraneous parens.\n+\t(finish_trait_expr): Handle CPTK_IS_AGGREGATE.\n+\t* parser.c (cp_parser_primary_expression): Handle RID_IS_AGGREGATE.\n+\t(cp_parser_trait_expr): Likewise.\n+\n 2017-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/80162"}, {"sha": "57c1401a9d139753a2954bdf5804a7507cc113f6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=af88f55707d3373b94c02237af2863d2ad700063", "patch": "@@ -728,6 +728,7 @@ enum cp_trait_kind\n   CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS,\n   CPTK_HAS_VIRTUAL_DESTRUCTOR,\n   CPTK_IS_ABSTRACT,\n+  CPTK_IS_AGGREGATE,\n   CPTK_IS_BASE_OF,\n   CPTK_IS_CLASS,\n   CPTK_IS_EMPTY,"}, {"sha": "470d124102dcae05fd370b06b85482013ff7b34c", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=af88f55707d3373b94c02237af2863d2ad700063", "patch": "@@ -2585,6 +2585,9 @@ pp_cxx_trait_expression (cxx_pretty_printer *pp, tree t)\n     case CPTK_IS_ABSTRACT:\n       pp_cxx_ws_string (pp, \"__is_abstract\");\n       break;\n+    case CPTK_IS_AGGREGATE:\n+      pp_cxx_ws_string (pp, \"__is_aggregate\");\n+      break;\n     case CPTK_IS_BASE_OF:\n       pp_cxx_ws_string (pp, \"__is_base_of\");\n       break;"}, {"sha": "e93855fb69d728bc07beb97a4bedc933223260c8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=af88f55707d3373b94c02237af2863d2ad700063", "patch": "@@ -5121,6 +5121,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \tcase RID_HAS_UNIQUE_OBJ_REPRESENTATIONS:\n \tcase RID_HAS_VIRTUAL_DESTRUCTOR:\n \tcase RID_IS_ABSTRACT:\n+\tcase RID_IS_AGGREGATE:\n \tcase RID_IS_BASE_OF:\n \tcase RID_IS_CLASS:\n \tcase RID_IS_EMPTY:\n@@ -9611,6 +9612,9 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n     case RID_IS_ABSTRACT:\n       kind = CPTK_IS_ABSTRACT;\n       break;\n+    case RID_IS_AGGREGATE:\n+      kind = CPTK_IS_AGGREGATE;\n+      break;\n     case RID_IS_BASE_OF:\n       kind = CPTK_IS_BASE_OF;\n       binary = true;"}, {"sha": "c57264623d1472be70db5d98153c4df1f2216328", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=af88f55707d3373b94c02237af2863d2ad700063", "patch": "@@ -9144,42 +9144,45 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n       return type_has_unique_obj_representations (type1);\n \n     case CPTK_IS_ABSTRACT:\n-      return (ABSTRACT_CLASS_TYPE_P (type1));\n+      return ABSTRACT_CLASS_TYPE_P (type1);\n+\n+    case CPTK_IS_AGGREGATE:\n+      return CP_AGGREGATE_TYPE_P (type1);\n \n     case CPTK_IS_BASE_OF:\n       return (NON_UNION_CLASS_TYPE_P (type1) && NON_UNION_CLASS_TYPE_P (type2)\n \t      && (same_type_ignoring_top_level_qualifiers_p (type1, type2)\n \t\t  || DERIVED_FROM_P (type1, type2)));\n \n     case CPTK_IS_CLASS:\n-      return (NON_UNION_CLASS_TYPE_P (type1));\n+      return NON_UNION_CLASS_TYPE_P (type1);\n \n     case CPTK_IS_EMPTY:\n-      return (NON_UNION_CLASS_TYPE_P (type1) && CLASSTYPE_EMPTY_P (type1));\n+      return NON_UNION_CLASS_TYPE_P (type1) && CLASSTYPE_EMPTY_P (type1);\n \n     case CPTK_IS_ENUM:\n-      return (type_code1 == ENUMERAL_TYPE);\n+      return type_code1 == ENUMERAL_TYPE;\n \n     case CPTK_IS_FINAL:\n-      return (CLASS_TYPE_P (type1) && CLASSTYPE_FINAL (type1));\n+      return CLASS_TYPE_P (type1) && CLASSTYPE_FINAL (type1);\n \n     case CPTK_IS_LITERAL_TYPE:\n-      return (literal_type_p (type1));\n+      return literal_type_p (type1);\n \n     case CPTK_IS_POD:\n-      return (pod_type_p (type1));\n+      return pod_type_p (type1);\n \n     case CPTK_IS_POLYMORPHIC:\n-      return (CLASS_TYPE_P (type1) && TYPE_POLYMORPHIC_P (type1));\n+      return CLASS_TYPE_P (type1) && TYPE_POLYMORPHIC_P (type1);\n \n     case CPTK_IS_SAME_AS:\n       return same_type_p (type1, type2);\n \n     case CPTK_IS_STD_LAYOUT:\n-      return (std_layout_type_p (type1));\n+      return std_layout_type_p (type1);\n \n     case CPTK_IS_TRIVIAL:\n-      return (trivial_type_p (type1));\n+      return trivial_type_p (type1);\n \n     case CPTK_IS_TRIVIALLY_ASSIGNABLE:\n       return is_trivially_xible (MODIFY_EXPR, type1, type2);\n@@ -9188,10 +9191,10 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n       return is_trivially_xible (INIT_EXPR, type1, type2);\n \n     case CPTK_IS_TRIVIALLY_COPYABLE:\n-      return (trivially_copyable_p (type1));\n+      return trivially_copyable_p (type1);\n \n     case CPTK_IS_UNION:\n-      return (type_code1 == UNION_TYPE);\n+      return type_code1 == UNION_TYPE;\n \n     default:\n       gcc_unreachable ();\n@@ -9253,6 +9256,7 @@ finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS:\n     case CPTK_HAS_VIRTUAL_DESTRUCTOR:\n     case CPTK_IS_ABSTRACT:\n+    case CPTK_IS_AGGREGATE:\n     case CPTK_IS_EMPTY:\n     case CPTK_IS_FINAL:\n     case CPTK_IS_LITERAL_TYPE:"}, {"sha": "26fdfb3e26be44d2a6f737d9189716794ab1edaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af88f55707d3373b94c02237af2863d2ad700063", "patch": "@@ -1,5 +1,8 @@\n 2017-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR libstdc++/80251\n+\t* g++.dg/ext/is_aggregate.C: New test.\n+\n \tPR middle-end/80173\n \t* gcc.target/i386/pr80173.c: New test.\n "}, {"sha": "8adc6c455f040500856f4b7e473d72a088d0b6ba", "filename": "gcc/testsuite/g++.dg/ext/is_aggregate.C", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_aggregate.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88f55707d3373b94c02237af2863d2ad700063/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_aggregate.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_aggregate.C?ref=af88f55707d3373b94c02237af2863d2ad700063", "patch": "@@ -0,0 +1,117 @@\n+// { dg-do run { target c++11 } }\n+#include <cassert>\n+\n+template<typename T>\n+  bool\n+  f()\n+  { return __is_aggregate(T); } \n+\n+template<typename T>\n+  class My\n+  {\n+  public:\n+    bool\n+    f()\n+    { return !!__is_aggregate(T); }\n+  };\n+\n+template<typename T>\n+  class My2\n+  {\n+  public:\n+    static const bool trait = __is_aggregate(T);\n+  };\n+\n+template<typename T>\n+  const bool My2<T>::trait;\n+\n+template<typename T, bool b = __is_aggregate(T)>\n+  struct My3_help\n+  { static const bool trait = b; };\n+\n+template<typename T, bool b>\n+  const bool My3_help<T, b>::trait;\n+\n+template<typename T>\n+  class My3\n+  {\n+  public:\n+    bool\n+    f()\n+    { return My3_help<T>::trait; }\n+  };\n+\n+#define PTEST(T) (__is_aggregate(T) && f<T>() \\\n+\t\t  && My<T>().f() && My2<T>::trait && My3<T>().f())\n+\n+#define NTEST(T) (!__is_aggregate(T) && !f<T>() \\\n+\t\t  && !My<T>().f() && !My2<T>::trait && !My3<T>().f())\n+\n+struct A { int a, b, c; };\n+class B { static int a; private: static int b; public: int c; };\n+struct C { C () {} int a, b, c; };\n+struct D { explicit D (int) {} int a, b, c; };\n+struct E : public A { int d, e, f; };\n+struct F : public C { using C::C; int d, e, f; };\n+class G { int a, b; };\n+struct H { private: int a, b; };\n+struct I { protected: int a, b; };\n+struct J { int a, b; void foo (); };\n+struct K { int a, b; virtual void foo (); };\n+struct L : virtual public A { int d, e; };\n+struct M : protected A { int d, e; };\n+struct N : private A { int d, e; };\n+typedef int T;\n+typedef float U;\n+typedef int V __attribute__((vector_size (4 * sizeof (int))));\n+typedef double W __attribute__((vector_size (8 * sizeof (double))));\n+\n+int\n+main ()\n+{\n+  assert (NTEST (void));\n+  assert (NTEST (int));\n+  assert (NTEST (double));\n+  assert (NTEST (T));\n+  assert (NTEST (U));\n+  assert (PTEST (V));\n+  assert (PTEST (W));\n+  assert (PTEST (A));\n+  assert (PTEST (B));\n+  assert (NTEST (C));\n+  assert (NTEST (D));\n+#if __cplusplus >= 201703L\n+  assert (PTEST (E));\n+#else\n+  assert (NTEST (E));\n+#endif\n+  assert (NTEST (F));\n+  assert (NTEST (G));\n+  assert (NTEST (H));\n+  assert (NTEST (I));\n+  assert (PTEST (J));\n+  assert (NTEST (K));\n+  assert (NTEST (L));\n+  assert (NTEST (M));\n+  assert (NTEST (N));\n+  assert (PTEST (int[]));\n+  assert (PTEST (double[]));\n+  assert (PTEST (T[2]));\n+  assert (PTEST (U[]));\n+  assert (PTEST (V[]));\n+  assert (PTEST (W[]));\n+  assert (PTEST (A[19]));\n+  assert (PTEST (B[]));\n+  assert (PTEST (C[]));\n+  assert (PTEST (D[]));\n+  assert (PTEST (E[]));\n+  assert (PTEST (F[]));\n+  assert (PTEST (G[]));\n+  assert (PTEST (H[]));\n+  assert (PTEST (I[]));\n+  assert (PTEST (J[24]));\n+  assert (PTEST (K[]));\n+  assert (PTEST (L[]));\n+  assert (PTEST (M[6]));\n+  assert (PTEST (N[]));\n+}"}]}