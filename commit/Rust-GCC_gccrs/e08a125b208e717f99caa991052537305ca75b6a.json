{"sha": "e08a125b208e717f99caa991052537305ca75b6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4YTEyNWIyMDhlNzE3Zjk5Y2FhOTkxMDUyNTM3MzA1Y2E3NWI2YQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-16T09:34:43Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-22T02:40:11Z"}, "message": "Add vect_recog_popcount_pattern to handle mismatch between the vectorized popcount IFN and scalar popcount builtin.\n\nThe patch remove those pro- and demotions when backend support direct\noptab.\n\nFor i386: it enables vectorization for vpopcntb/vpopcntw and optimized\nfor vpopcntq.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/97770\n\t* tree-vect-patterns.c (vect_recog_popcount_pattern):\n\tNew.\n\t(vect_recog_func vect_vect_recog_func_ptrs): Add new pattern.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/97770\n\t* gcc.target/i386/avx512bitalg-pr97770-1.c: Remove xfail.\n\t* gcc.target/i386/avx512vpopcntdq-pr97770-1.c: Remove xfail.", "tree": {"sha": "ec363835ab057252d5648807ab2180610442a92a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec363835ab057252d5648807ab2180610442a92a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e08a125b208e717f99caa991052537305ca75b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08a125b208e717f99caa991052537305ca75b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08a125b208e717f99caa991052537305ca75b6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08a125b208e717f99caa991052537305ca75b6a/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f51618f301664d02cc41205f1386c0c9b9a29a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51618f301664d02cc41205f1386c0c9b9a29a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51618f301664d02cc41205f1386c0c9b9a29a54"}], "stats": {"total": 148, "additions": 129, "deletions": 19}, "files": [{"sha": "d1beec4cdb4c265f4cf41ef385a6eb094439f093", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-pr97770-1.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08a125b208e717f99caa991052537305ca75b6a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-pr97770-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08a125b208e717f99caa991052537305ca75b6a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-pr97770-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-pr97770-1.c?ref=e08a125b208e717f99caa991052537305ca75b6a", "patch": "@@ -1,59 +1,58 @@\n /* PR target/97770 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mavx512bitalg -mavx512vl -mprefer-vector-width=512\" } */\n-/* Add xfail since no IFN for QI/HImode popcount */\n-/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*xmm\" 1 {xfail *-*-*} } } */\n-/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*xmm\" 1 {xfail *-*-*} } } */\n-/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*ymm\" 1 {xfail *-*-*} } } */\n-/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*ymm\" 1 {xfail *-*-*} } } */\n-/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*zmm\" 1 {xfail *-*-*} } } */\n-/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*zmm\" 1 {xfail *-*-*} } } */\n+/* { dg-options \"-O2 -march=icelake-server -mprefer-vector-width=512\" } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*xmm\" 1  } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*xmm\" 1  } } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*ymm\" 1  } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*ymm\" 1  } } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*zmm\" 1  } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*zmm\" 1  } } */\n \n #include <immintrin.h>\n \n void\n __attribute__ ((noipa, optimize(\"-O3\")))\n-popcountb_128 (char * __restrict dest, char* src)\n+popcountb_128 (unsigned char * __restrict dest, unsigned char* src)\n {\n   for (int i = 0; i != 16; i++)\n     dest[i] = __builtin_popcount (src[i]);\n }\n \n void\n __attribute__ ((noipa, optimize(\"-O3\")))\n-popcountw_128 (short* __restrict dest, short* src)\n+popcountw_128 (unsigned short* __restrict dest, unsigned short* src)\n {\n   for (int i = 0; i != 8; i++)\n     dest[i] = __builtin_popcount (src[i]);\n }\n \n void\n __attribute__ ((noipa, optimize(\"-O3\")))\n-popcountb_256 (char * __restrict dest, char* src)\n+popcountb_256 (unsigned char * __restrict dest, unsigned char* src)\n {\n   for (int i = 0; i != 32; i++)\n     dest[i] = __builtin_popcount (src[i]);\n }\n \n void\n __attribute__ ((noipa, optimize(\"-O3\")))\n-popcountw_256 (short* __restrict dest, short* src)\n+popcountw_256 (unsigned short* __restrict dest, unsigned short* src)\n {\n   for (int i = 0; i != 16; i++)\n     dest[i] = __builtin_popcount (src[i]);\n }\n \n void\n __attribute__ ((noipa, optimize(\"-O3\")))\n-popcountb_512 (char * __restrict dest, char* src)\n+popcountb_512 (unsigned char * __restrict dest, unsigned char* src)\n {\n   for (int i = 0; i != 64; i++)\n     dest[i] = __builtin_popcount (src[i]);\n }\n \n void\n __attribute__ ((noipa, optimize(\"-O3\")))\n-popcountw_512 (short* __restrict dest, short* src)\n+popcountw_512 (unsigned short* __restrict dest, unsigned short* src)\n {\n   for (int i = 0; i != 32; i++)\n     dest[i] = __builtin_popcount (src[i]);"}, {"sha": "dedd2e4c3d64eabc7d18810252e166fbc070b5f2", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-pr97770-1.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08a125b208e717f99caa991052537305ca75b6a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-pr97770-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08a125b208e717f99caa991052537305ca75b6a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-pr97770-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-pr97770-1.c?ref=e08a125b208e717f99caa991052537305ca75b6a", "patch": "@@ -1,13 +1,12 @@\n /* PR target/97770 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mavx512vpopcntdq -mavx512vl -mprefer-vector-width=512\" } */\n+/* { dg-options \"-O2 -march=icelake-server -mprefer-vector-width=512\" } */\n /* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*xmm\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*ymm\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*zmm\" 1 } } */\n-/* Add xfail since current vectorizor cannot generate expected code for DImode popcount */\n-/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*xmm\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*ymm\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*zmm\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*xmm\" 1  } } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*ymm\" 1  } } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*zmm\" 1  } } */\n #ifndef AVX512VPOPCNTQ_H_INCLUDED\n #define AVX512VPOPCNTQ_H_INCLUDED\n "}, {"sha": "59727056dc7dfa240557e617cb7f08242bcf3945", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08a125b208e717f99caa991052537305ca75b6a/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08a125b208e717f99caa991052537305ca75b6a/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=e08a125b208e717f99caa991052537305ca75b6a", "patch": "@@ -1292,6 +1292,117 @@ vect_recog_widen_minus_pattern (vec_info *vinfo, stmt_vec_info last_stmt_info,\n \t\t\t\t      \"vect_recog_widen_minus_pattern\");\n }\n \n+/* Function vect_recog_popcount_pattern\n+\n+   Try to find the following pattern:\n+\n+   UTYPE1 A;\n+   TYPE1 B;\n+   UTYPE2 temp_in;\n+   TYPE3 temp_out;\n+   temp_in = (TYPE2)A;\n+\n+   temp_out = __builtin_popcount{,l,ll} (temp_in);\n+   B = (TYPE1) temp_out;\n+\n+   TYPE2 may or may not be equal to TYPE3.\n+   i.e. TYPE2 is equal to TYPE3 for __builtin_popcount\n+   i.e. TYPE2 is not equal to TYPE3 for __builtin_popcountll\n+\n+   Input:\n+\n+   * STMT_VINFO: The stmt from which the pattern search begins.\n+   here it starts with B = (TYPE1) temp_out;\n+\n+   Output:\n+\n+   * TYPE_OUT: The vector type of the output of this pattern.\n+\n+   * Return value: A new stmt that will be used to replace the sequence of\n+   stmts that constitute the pattern. In this case it will be:\n+   B = .POPCOUNT (A);\n+*/\n+\n+static gimple *\n+vect_recog_popcount_pattern (vec_info *vinfo,\n+\t\t\t     stmt_vec_info stmt_vinfo, tree *type_out)\n+{\n+  gassign *last_stmt = dyn_cast <gassign *> (stmt_vinfo->stmt);\n+  gimple *popcount_stmt, *pattern_stmt;\n+  tree rhs_oprnd, rhs_origin, lhs_oprnd, lhs_type, vec_type, new_var;\n+  auto_vec<tree> vargs;\n+\n+  /* Find B = (TYPE1) temp_out. */\n+  if (!last_stmt)\n+    return NULL;\n+  tree_code code = gimple_assign_rhs_code (last_stmt);\n+  if (!CONVERT_EXPR_CODE_P (code))\n+    return NULL;\n+\n+  lhs_oprnd = gimple_assign_lhs (last_stmt);\n+  lhs_type = TREE_TYPE (lhs_oprnd);\n+  if (!INTEGRAL_TYPE_P (lhs_type))\n+    return NULL;\n+\n+  rhs_oprnd = gimple_assign_rhs1 (last_stmt);\n+  if (TREE_CODE (rhs_oprnd) != SSA_NAME\n+      || !has_single_use (rhs_oprnd))\n+    return NULL;\n+  popcount_stmt = SSA_NAME_DEF_STMT (rhs_oprnd);\n+\n+  /* Find temp_out = __builtin_popcount{,l,ll} (temp_in);  */\n+  if (!is_gimple_call (popcount_stmt))\n+    return NULL;\n+  switch (gimple_call_combined_fn (popcount_stmt))\n+    {\n+    CASE_CFN_POPCOUNT:\n+      break;\n+    default:\n+      return NULL;\n+    }\n+\n+  if (gimple_call_num_args (popcount_stmt) != 1)\n+    return NULL;\n+\n+  rhs_oprnd = gimple_call_arg (popcount_stmt, 0);\n+  vect_unpromoted_value unprom_diff;\n+  rhs_origin = vect_look_through_possible_promotion (vinfo, rhs_oprnd,\n+\t\t\t\t\t\t    &unprom_diff);\n+\n+  if (!rhs_origin)\n+    return NULL;\n+\n+  /* Input and outout of .POPCOUNT should be same-precision integer.\n+     Also A should be unsigned or same presion as temp_in,\n+     otherwise there would be sign_extend from A to temp_in.  */\n+  if (TYPE_PRECISION (unprom_diff.type) != TYPE_PRECISION (lhs_type)\n+      || (!TYPE_UNSIGNED (unprom_diff.type)\n+\t  && (TYPE_PRECISION (unprom_diff.type)\n+\t      != TYPE_PRECISION (TREE_TYPE (rhs_oprnd)))))\n+    return NULL;\n+  vargs.safe_push (unprom_diff.op);\n+\n+  vect_pattern_detected (\"vec_regcog_popcount_pattern\", popcount_stmt);\n+  vec_type = get_vectype_for_scalar_type (vinfo, lhs_type);\n+  /* Do it only the backend existed popcount<vector_mode>2.  */\n+  if (!direct_internal_fn_supported_p (IFN_POPCOUNT,\n+\t\t\t\t       vec_type,\n+\t\t\t\t       OPTIMIZE_FOR_SPEED))\n+    return NULL;\n+\n+  /* Create B = .POPCOUNT (A).  */\n+  new_var = vect_recog_temp_ssa_var (lhs_type, NULL);\n+  pattern_stmt = gimple_build_call_internal_vec (IFN_POPCOUNT, vargs);\n+  gimple_call_set_lhs (pattern_stmt, new_var);\n+  gimple_set_location (pattern_stmt, gimple_location (last_stmt));\n+  *type_out = vec_type;\n+\n+  if (dump_enabled_p ())\n+    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t     \"created pattern stmt: %G\", pattern_stmt);\n+  return pattern_stmt;\n+}\n+\n /* Function vect_recog_pow_pattern\n \n    Try to find the following pattern:\n@@ -5283,6 +5394,7 @@ static vect_recog_func vect_vect_recog_func_ptrs[] = {\n   { vect_recog_sad_pattern, \"sad\" },\n   { vect_recog_widen_sum_pattern, \"widen_sum\" },\n   { vect_recog_pow_pattern, \"pow\" },\n+  { vect_recog_popcount_pattern, \"popcount\" },\n   { vect_recog_widen_shift_pattern, \"widen_shift\" },\n   { vect_recog_rotate_pattern, \"rotate\" },\n   { vect_recog_vector_vector_shift_pattern, \"vector_vector_shift\" },"}]}