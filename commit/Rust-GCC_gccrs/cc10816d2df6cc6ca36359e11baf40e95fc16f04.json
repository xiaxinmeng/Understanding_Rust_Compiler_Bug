{"sha": "cc10816d2df6cc6ca36359e11baf40e95fc16f04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxMDgxNmQyZGY2Y2M2Y2EzNjM1OWUxMWJhZjQwZTk1ZmMxNmYwNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-08-15T11:24:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-08-15T11:24:17Z"}, "message": "* predict.def: Update hitrates.\n\nFrom-SVN: r44920", "tree": {"sha": "eb462fa7de3248afd4b06ace45182e5e6dd29dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb462fa7de3248afd4b06ace45182e5e6dd29dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc10816d2df6cc6ca36359e11baf40e95fc16f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc10816d2df6cc6ca36359e11baf40e95fc16f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc10816d2df6cc6ca36359e11baf40e95fc16f04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc10816d2df6cc6ca36359e11baf40e95fc16f04/comments", "author": null, "committer": null, "parents": [{"sha": "fd7e958f94d3143c2c59d0ad159e07414f790b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7e958f94d3143c2c59d0ad159e07414f790b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7e958f94d3143c2c59d0ad159e07414f790b56"}], "stats": {"total": 43, "additions": 14, "deletions": 29}, "files": [{"sha": "5f0784020aef981de98c8100b1b82c5d6abb818a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc10816d2df6cc6ca36359e11baf40e95fc16f04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc10816d2df6cc6ca36359e11baf40e95fc16f04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc10816d2df6cc6ca36359e11baf40e95fc16f04", "patch": "@@ -1,3 +1,7 @@\n+Wed Aug 15 12:41:32 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.def: Update hitrates.\n+\n 2001-08-15  Richard Henderson  <rth@redhat.com>\n \n \t* except.c (TYPE_HASH): Cast to size_t, not HOST_WIDE_INT."}, {"sha": "63819e3276b4dbbc8744861975a72f0c0388b5c7", "filename": "gcc/predict.c", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc10816d2df6cc6ca36359e11baf40e95fc16f04/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc10816d2df6cc6ca36359e11baf40e95fc16f04/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=cc10816d2df6cc6ca36359e11baf40e95fc16f04", "patch": "@@ -608,10 +608,6 @@ typedef struct block_info_def\n \n   /* True if block already converted.  */\n   int visited:1;\n-\n-  /* Number of block proceeded before adding basic block to the queue.  Used\n-     to recognize irregular regions.  */\n-  int nvisited;\n } *block_info;\n \n /* Similar information for edges.  */\n@@ -638,7 +634,6 @@ propagate_freq (head)\n   basic_block last = bb;\n   edge e;\n   basic_block nextbb;\n-  int nvisited = 0;\n \n   BLOCK_INFO (head)->frequency = 1;\n   for (; bb; bb = nextbb)\n@@ -652,38 +647,25 @@ propagate_freq (head)\n       if (bb != head)\n \t{\n \t  for (e = bb->pred; e; e = e->pred_next)\n-\t    if (!BLOCK_INFO (e->src)->visited && !EDGE_INFO (e)->back_edge)\n+\t    if (!BLOCK_INFO (e->src)->visited && !(e->flags & EDGE_DFS_BACK))\n \t      break;\n \n-\t  /* We haven't proceeded all predecessors of edge e yet.\n-\t     These may be waiting in the queue or we may hit an\n-\t     irreducible region.\n-\n-\t     To avoid infinite looping on irrecudible regions, count\n-\t     the number of blocks proceeded at the time the basic\n-\t     block has been queued.  In the case the number doesn't\n-\t     change, we've hit an irreducible region and we can forget\n-\t     the backward edge.\t This can increase the time complexity\n-\t     by the number of irreducible blocks, but in the same way\n-\t     the standard the loop does, so it should not result in a\n-\t     noticeable slowdown.\n-\n-\t     Alternatively we may distinguish backward and cross edges\n-\t     in the DFS tree by the preprocessing pass and ignore the\n-\t     existence of non-loop backward edges.  */\n-\t  if (e && BLOCK_INFO (bb)->nvisited != nvisited)\n+\t  /* We haven't proceeded all predecessors of edge e yet.  */\n+\t  if (e)\n \t    {\n \t      if (!nextbb)\n \t\tnextbb = e->dest;\n \t      else\n \t\tBLOCK_INFO (last)->next = e->dest;\n-\t      BLOCK_INFO (last)->nvisited = nvisited;\n \t      last = e->dest;\n \t      continue;\n \t    }\n-\t  else if (e && rtl_dump_file)\n-\t    fprintf (rtl_dump_file, \"Irreducible region hit, ignoring edge to bb %i\\n\",\n-\t\t     bb->index);\n+\t  if (rtl_dump_file)\n+\t    for (e = bb->pred; e; e = e->pred_next)\n+\t      if (!BLOCK_INFO (e->src)->visited && !EDGE_INFO (e)->back_edge)\n+\t\tfprintf (rtl_dump_file,\n+\t\t\t \"Irreducible region hit, ignoring edge to %i->%i\\n\",\n+\t\t\t e->src->index, bb->index);\n \n \t  for (e = bb->pred; e; e = e->pred_next)\n \t    if (EDGE_INFO (e)->back_edge)\n@@ -718,10 +700,8 @@ propagate_freq (head)\n \t      nextbb = e->dest;\n \t    else\n \t      BLOCK_INFO (last)->next = e->dest;\n-\t    BLOCK_INFO (last)->nvisited = nvisited;\n \t    last = e->dest;\n \t  }\n-      nvisited ++;\n     }\n }\n \n@@ -801,6 +781,7 @@ estimate_bb_frequencies (loops)\n   int i;\n   double freq_max = 0;\n \n+  mark_dfs_back_edges ();\n   if (flag_branch_probabilities)\n     {\n       counts_to_freqs ();"}]}