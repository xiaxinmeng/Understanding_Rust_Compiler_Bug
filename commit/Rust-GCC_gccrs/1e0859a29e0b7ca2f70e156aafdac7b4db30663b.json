{"sha": "1e0859a29e0b7ca2f70e156aafdac7b4db30663b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwODU5YTI5ZTBiN2NhMmY3MGUxNTZhYWZkYWM3YjRkYjMwNjYzYg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-07-02T10:26:12Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-07-02T10:26:12Z"}, "message": "Missed in last commit.\n\nFrom-SVN: r161701", "tree": {"sha": "f567bcb3a99f67f80da42c751bc3e12aec06fdb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f567bcb3a99f67f80da42c751bc3e12aec06fdb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e0859a29e0b7ca2f70e156aafdac7b4db30663b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0859a29e0b7ca2f70e156aafdac7b4db30663b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0859a29e0b7ca2f70e156aafdac7b4db30663b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0859a29e0b7ca2f70e156aafdac7b4db30663b/comments", "author": null, "committer": null, "parents": [{"sha": "ca6d1176f717cfb0ba3e0ea1a930aa3d33905a9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6d1176f717cfb0ba3e0ea1a930aa3d33905a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6d1176f717cfb0ba3e0ea1a930aa3d33905a9e"}], "stats": {"total": 308, "additions": 308, "deletions": 0}, "files": [{"sha": "defa206131a54414b8b2a2f89d85483dacad6caf", "filename": "config/gc++filt.m4", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0859a29e0b7ca2f70e156aafdac7b4db30663b/config%2Fgc%2B%2Bfilt.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0859a29e0b7ca2f70e156aafdac7b4db30663b/config%2Fgc%2B%2Bfilt.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fgc%2B%2Bfilt.m4?ref=1e0859a29e0b7ca2f70e156aafdac7b4db30663b", "patch": "@@ -0,0 +1,26 @@\n+# gc++filt.m4 serial 1\t\t\t\t\t-*- Autoconf -*-\n+# Find an instance of GNU c++filt on PATH.\n+\n+dnl Copyright (C) 2010 Free Software Foundation, Inc.\n+dnl This file is free software, distributed under the terms of the GNU\n+dnl General Public License.  As a special exception to the GNU General\n+dnl Public License, this file may be distributed as part of a program\n+dnl that contains a configuration script generated by Autoconf, under\n+dnl the same distribution terms as the rest of that program.\n+\n+dnl From Rainer Orth.\n+\n+# GCC_PROG_GNU_CXXFILT\n+# --------------------\n+# Check for GNU c++filt.\n+# FIXME: Maybe need TARGET variant, though c++filt should be target\n+# independent.\n+AC_DEFUN([GCC_PROG_GNU_CXXFILT],\n+  [AC_ARG_VAR([CXXFILT], [Location of GNU c++filt.  Defaults to the first\n+    GNU version of `c++filt', `gc++filt' on PATH.])\n+  AC_CACHE_CHECK([for GNU c++filt], [ac_cv_path_CXXFILT],\n+    [AC_PATH_PROGS_FEATURE_CHECK([CXXFILT], [c++filt gc++filt],\n+      [_AC_PATH_PROG_FLAVOR_GNU([$ac_path_CXXFILT],\n+\t[ac_cv_path_CXXFILT=$ac_path_CXXFILT && ac_path_CXXFILT_found=:])])])\n+  CXXFILT=$ac_cv_path_CXXFILT\n+])"}, {"sha": "8d7ccc3ebb2c1603f09505249c6f1ec6c005696c", "filename": "contrib/make_sunver.pl", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0859a29e0b7ca2f70e156aafdac7b4db30663b/contrib%2Fmake_sunver.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0859a29e0b7ca2f70e156aafdac7b4db30663b/contrib%2Fmake_sunver.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmake_sunver.pl?ref=1e0859a29e0b7ca2f70e156aafdac7b4db30663b", "patch": "@@ -0,0 +1,280 @@\n+#!/usr/bin/perl -w\n+\n+# make_sunver.pl\n+#\n+# This script takes at least two arguments, a GNU style version script and\n+# a list of object and archive files, and generates a corresponding Sun\n+# style version script as follows:\n+#\n+# Each glob pattern, C++ mangled pattern or literal in the input script is\n+# matched against all global symbols in the input objects, emitting those\n+# that matched (or nothing if no match was found).\n+# A comment with the original pattern and its type is left in the output\n+# file to make it easy to understand the matches.\n+#\n+# It expects a 'nm' with the POSIX '-P' option, but everyone has one of\n+# those, right?\n+# It depends on the GNU version of c++filt, since it must understand the\n+# GNU mangling style.\n+\n+use File::Glob ':glob';\n+use FileHandle;\n+use IPC::Open2;\n+\n+# Input version script, GNU style.\n+my $symvers = shift;\n+\n+##########\n+# Get all the symbols from the library, match them, and add them to a hash.\n+\n+my %sym_hash = ();\n+\n+# List of objects and archives to process.\n+my @OBJECTS = ();\n+\n+# List of shared objects to omit from processing.\n+my @SHAREDOBJS = ();\n+\n+# Filter out those input archives that have corresponding shared objects to\n+# avoid adding all symbols matched in the archive to the output map.\n+foreach $file (@ARGV) {\n+    if (($so = $file) =~ s/\\.a$/.so/ && -e $so) {\n+\tprintf STDERR \"omitted $file -> $so\\n\";\n+\tpush (@SHAREDOBJS, $so);\n+    } else {\n+\tpush (@OBJECTS, $file);\n+    }\n+}\n+\n+# The nm command to use.\n+my $nm = $ENV{'NM_FOR_TARGET'} || \"nm\";\n+\n+# Process each symbol.\n+open NM,$nm.' -P '.(join ' ',@OBJECTS).'|' or die $!;\n+while (<NM>) {\n+    my $i;\n+    chomp;\n+\n+    # nm prints out stuff at the start, ignore it.\n+    next if (/^$/);\n+    next if (/:$/);\n+    # Ignore register (SPARC only), undefined and local symbols.  The\n+    # symbol name is optional; Sun nm emits none for local or .bss symbols.\n+    next if (/^([^ ]+)?[ \\t]+[RUa-z][ \\t]+ /);\n+    # Ignore objects without symbol table.  Message goes to stdout with Sun\n+    # nm, while GNU nm emits the corresponding message to stderr.\n+    next if (/.* - No symbol table data/);\n+\n+    # $sym is the name of the symbol.\n+    die \"unknown nm output $_\" if (! /^([^ ]+)[ \\t]+[A-Z][ \\t]+/);\n+    my $sym = $1;\n+\n+    # Remember symbol.\n+    $sym_hash{$sym}++;\n+}\n+close NM or die \"nm error\";\n+\n+##########\n+# The various types of glob patterns.\n+#\n+# A glob pattern that is to be applied to the demangled name: 'cxx'.\n+# A glob patterns that applies directly to the name in the .o files: 'glob'.\n+# This pattern is ignored; used for local variables (usually just '*'): 'ign'.\n+\n+# The type of the current pattern.\n+my $glob = 'glob';\n+\n+# We're currently inside `extern \"C++\"', which Sun ld doesn't understand.\n+my $in_extern = 0;\n+\n+# We're currently inside a conditional section: just skip it.\n+my $in_ifdef = 0;\n+\n+# The c++filt command to use.  This *must* be GNU c++filt; the Sun Studio\n+# c++filt doesn't handle the GNU mangling style.\n+my $cxxfilt = $ENV{'CXXFILT'} || \"c++filt\";\n+\n+# The current version name.\n+my $current_version = \"\";\n+\n+# Was there any attempt to match a symbol to this version?\n+my $matches_attempted;\n+\n+# The number of versions which matched this symbol.\n+my $matched_symbols;\n+\n+open F,$symvers or die $!;\n+\n+# Print information about generating this file\n+print \"# This file was generated by make_sunver.pl.  DO NOT EDIT!\\n\";\n+print \"# It was generated by:\\n\";\n+printf \"# %s %s %s\\n\", $0, $symvers, (join ' ',@ARGV);\n+printf \"# Omitted archives with corresponding shared libraries: %s\\n\",\n+    (join ' ', @SHAREDOBJS) if $#SHAREDOBJS >= 0;\n+print \"#\\n\\n\";\n+\n+while (<F>) {\n+    # End of skipped section.\n+    if (/^[ \\t]*\\#endif/) {\n+\t$in_ifdef = 0;\n+\tnext;\n+    }\n+\n+    # Just skip a conditional section.\n+    if ($in_ifdef) { next; }\n+\n+    # Lines of the form '};'\n+    if (/^([ \\t]*)(\\}[ \\t]*;[ \\t]*)$/) {\n+\t$glob = 'glob';\n+\tif ($in_extern) {\n+\t    $in_extern--;\n+\t    print \"$1##$2\";\n+\t} else {\n+\t    print;\n+\t}\n+\tnext;\n+    }\n+\n+    # Lines of the form '} SOME_VERSION_NAME_1.0;'\n+    if (/^[ \\t]*\\}[ \\tA-Z0-9_.a-z]+;[ \\t]*$/) {\n+\t$glob = 'glob';\n+\t# We tried to match symbols agains this version, but none matched.\n+\t# Emit dummy hidden symbol to avoid marking this version WEAK.\n+\tif ($matches_attempted && $matched_symbols == 0) {\n+\t    print \"  hidden:\\n\";\n+\t    print \"    .force_WEAK_off_$current_version = DATA S0x0 V0x0;\\n\";\n+\t}\n+\tprint; next;\n+    }\n+\n+    # Special comments that look like C preprocessor conditionals.\n+    # Just skip the contents for now.\n+    # FIXME: Allow passing in conditionals from the command line to really\n+    # control the skipping.\n+    if (/^[ \\t]*\\#ifdef/) {\n+\t$in_ifdef = 1;\n+\tnext;\n+    }\n+\n+    # Comment and blank lines\n+    if (/^[ \\t]*\\#/) { print; next; }\n+    if (/^[ \\t]*$/) { print; next; }\n+\n+    # Lines of the form '{'\n+    if (/^([ \\t]*){$/) {\n+\tif ($in_extern) {\n+\t    print \"$1##{\\n\";\n+\t} else {\n+\t    print;\n+\t}\n+\tnext;\n+    }\n+\n+    # Lines of the form 'SOME_VERSION_NAME_1.1 {'\n+    if (/^([A-Z0-9_.]+)[ \\t]+{$/) {\n+\t# Record version name.\n+\t$current_version = $1;\n+\t# Reset match attempts, #matched symbols for this version.\n+\t$matches_attempted = 0;\n+\t$matched_symbols = 0;\n+\tprint;\n+\tnext;\n+    }\n+\n+    # Ignore 'global:'\n+    if (/^[ \\t]*global:$/) { print; next; }\n+\n+    # After 'local:', globs should be ignored, they won't be exported.\n+    if (/^[ \\t]*local:$/) {\n+\t$glob = 'ign';\n+\tprint;\n+\tnext;\n+    }\n+\n+    # After 'extern \"C++\"', globs are C++ patterns\n+    if (/^([ \\t]*)(extern \\\"C\\+\\+\\\"[ \\t]*)$/) {\n+\t$in_extern++;\n+\t$glob = 'cxx';\n+\t# Need to comment, Sun ld cannot handle this.\n+\tprint \"$1##$2\\n\"; next;\n+    }\n+\n+    # Chomp newline now we're done with passing through the input file.\n+    chomp;\n+\n+    # Catch globs.  Note that '{}' is not allowed in globs by this script,\n+    # so only '*' and '[]' are available.\n+    if (/^([ \\t]*)([^ \\t;{}#]+);?[ \\t]*$/) {\n+\tmy $ws = $1;\n+\tmy $ptn = $2;\n+\t# Turn the glob into a regex by replacing '*' with '.*'.\n+\t# Keep $ptn so we can still print the original form.\n+\t($pattern = $ptn) =~ s/\\*/\\.\\*/g;\n+\n+\tif ($glob eq 'ign') {\n+\t    # We're in a local: * section; just continue.\n+\t    print \"$_\\n\";\n+\t    next;\n+\t}\n+\n+\t# Print the glob commented for human readers.\n+\tprint \"$ws##$ptn ($glob)\\n\";\n+\t# We tried to match a symbol to this version.\n+\t$matches_attempted++;\n+\n+\tif ($glob eq 'glob') {\n+\t    my %ptn_syms = ();\n+\n+\t    # Match ptn against symbols in %sym_hash.\n+\t    foreach my $sym (keys %sym_hash) {\n+\t\t# Maybe it matches one of the patterns based on the symbol in\n+\t\t# the .o file.\n+\t\t$ptn_syms{$sym}++ if ($sym =~ /^$pattern$/);\n+\t    }\n+\n+\t    foreach my $sym (sort keys(%ptn_syms)) {\n+\t\t$matched_symbols++;\n+\t\tprint \"$ws$sym;\\n\";\n+\t    }\n+\t} elsif ($glob eq 'cxx') {\n+\t    my %dem_syms = ();\n+\n+\t    # Verify that we're actually using GNU c++filt.  Other versions\n+\t    # most likely cannot handle GNU style symbol mangling.\n+\t    my $cxxout = `$cxxfilt --version 2>&1`;\n+\t    $cxxout =~ m/GNU/ or die \"$0 requires GNU c++filt to function\";\n+\n+\t    # Talk to c++filt through a pair of file descriptors.\n+\t    # Need to start a fresh instance per pattern, otherwise the\n+\t    # process grows to 500+ MB.\n+\t    my $pid = open2(*FILTIN, *FILTOUT, $cxxfilt) or die $!;\n+\n+\t    # Match ptn against symbols in %sym_hash.\n+\t    foreach my $sym (keys %sym_hash) {\n+\t\t# No?  Well, maybe its demangled form matches one of those\n+\t\t# patterns.\n+\t\tprintf FILTOUT \"%s\\n\",$sym;\n+\t\tmy $dem = <FILTIN>;\n+\t\tchomp $dem;\n+\t\t$dem_syms{$sym}++ if ($dem =~ /^$pattern$/);\n+\t    }\n+\n+\t    close FILTOUT or die \"c++filt error\";\n+\t    close FILTIN or die \"c++filt error\";\n+\t    # Need to wait for the c++filt process to avoid lots of zombies.\n+\t    waitpid $pid, 0;\n+\n+\t    foreach my $sym (sort keys(%dem_syms)) {\n+\t\t$matched_symbols++;\n+\t\tprint \"$ws$sym;\\n\";\n+\t    }\n+\t} else {\n+\t    # No?  Well, then ignore it.\n+\t}\n+\tnext;\n+    }\n+    # Important sanity check.  This script can't handle lots of formats\n+    # that GNU ld can, so be sure to error out if one is seen!\n+    die \"strange line `$_'\";\n+}\n+close F;"}, {"sha": "d42eccac31e0beb53de8b2908152401c9c471b9e", "filename": "libstdc++-v3/python/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0859a29e0b7ca2f70e156aafdac7b4db30663b/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0859a29e0b7ca2f70e156aafdac7b4db30663b/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2FMakefile.in?ref=1e0859a29e0b7ca2f70e156aafdac7b4db30663b", "patch": "@@ -55,6 +55,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n \t$(top_srcdir)/../lt~obsolete.m4 $(top_srcdir)/crossconfig.m4 \\\n \t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n+\t$(top_srcdir)/../config/gc++filt.m4 \\\n \t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n@@ -123,6 +124,7 @@ CTIME_CC = @CTIME_CC@\n CTIME_H = @CTIME_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n+CXXFILT = @CXXFILT@\n CXXFLAGS = @CXXFLAGS@\n CYGPATH_W = @CYGPATH_W@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}]}