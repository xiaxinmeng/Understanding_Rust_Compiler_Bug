{"sha": "f824e18c061f9ffa8c49275ba072c120a5b7cdba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgyNGUxOGMwNjFmOWZmYThjNDkyNzViYTA3MmMxMjBhNWI3Y2RiYQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2018-11-13T15:46:46Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2018-11-13T15:46:46Z"}, "message": "tree-vrp.c (value_range_base::dump): Dump type.\n\n\t* tree-vrp.c (value_range_base::dump): Dump type.\n\tDo not use INF nomenclature for 1-bit types.\n\t(dump_value_range): Group all variants to common dumping code.\n\t(debug): New overloaded functions for value_ranges.\n\t(value_range_base::dump): Remove no argument version.\n\t(value_range::dump): Same.\n\ntestsuite/\n\t* gcc.dg/tree-ssa/pr64130.c: Adjust for new value_range pretty\n\tprinter.\n\t* gcc.dg/tree-ssa/vrp92.c: Same.\n\nFrom-SVN: r266077", "tree": {"sha": "6022ce2793ea0c98ff106233301858d55943faa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6022ce2793ea0c98ff106233301858d55943faa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f824e18c061f9ffa8c49275ba072c120a5b7cdba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f824e18c061f9ffa8c49275ba072c120a5b7cdba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f824e18c061f9ffa8c49275ba072c120a5b7cdba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f824e18c061f9ffa8c49275ba072c120a5b7cdba/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f9414c1df0ac04e5b031d99b8d5eeda403b3f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9414c1df0ac04e5b031d99b8d5eeda403b3f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9414c1df0ac04e5b031d99b8d5eeda403b3f32"}], "stats": {"total": 122, "additions": 64, "deletions": 58}, "files": [{"sha": "670b1623ed8487a1bafdeb1888a7cc230a3b50b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f824e18c061f9ffa8c49275ba072c120a5b7cdba", "patch": "@@ -1,3 +1,12 @@\n+2018-11-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (value_range_base::dump): Dump type.\n+\tDo not use INF nomenclature for 1-bit types.\n+\t(dump_value_range): Group all variants to common dumping code.\n+\t(debug): New overloaded functions for value_ranges.\n+\t(value_range_base::dump): Remove no argument version.\n+\t(value_range::dump): Same.\n+\n 2018-11-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87931"}, {"sha": "979f5978c494146702379731af067f6d44dd811e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f824e18c061f9ffa8c49275ba072c120a5b7cdba", "patch": "@@ -1,3 +1,9 @@\n+2018-11-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr64130.c: Adjust for new value_range pretty\n+\tprinter.\n+\t* gcc.dg/tree-ssa/vrp92.c: Same.\n+\n 2018-11-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87931"}, {"sha": "28ffbb76da8827f891ecd3905f299d6e351df55a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr64130.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64130.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64130.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64130.c?ref=f824e18c061f9ffa8c49275ba072c120a5b7cdba", "patch": "@@ -15,6 +15,6 @@ int funsigned2 (uint32_t a)\n   return (-1 * 0x1ffffffffL) / a == 0;\n }\n \n-/* { dg-final { scan-tree-dump \": \\\\\\[2, 8589934591\\\\\\]\" \"evrp\" } } */\n-/* { dg-final { scan-tree-dump \": \\\\\\[-8589934591, -2\\\\\\]\" \"evrp\" } } */\n+/* { dg-final { scan-tree-dump \"int \\\\\\[2, 8589934591\\\\\\]\" \"evrp\" } } */\n+/* { dg-final { scan-tree-dump \"int \\\\\\[-8589934591, -2\\\\\\]\" \"evrp\" } } */\n "}, {"sha": "66d74e9b5e9853ccd73b32db9da39d1cc320c575", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp92.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c?ref=f824e18c061f9ffa8c49275ba072c120a5b7cdba", "patch": "@@ -18,5 +18,5 @@ int foo (int i, int j)\n   return j;\n }\n \n-/* { dg-final { scan-tree-dump \"res_.: \\\\\\[1, 1\\\\\\]\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"res_.: int \\\\\\[1, 1\\\\\\]\" \"vrp1\" } } */\n /* { dg-final { scan-tree-dump-not \"Threaded\" \"vrp1\" } } */"}, {"sha": "f498386e8eb0144712235163858542ae76b9ba24", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 46, "deletions": 52, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f824e18c061f9ffa8c49275ba072c120a5b7cdba", "patch": "@@ -365,30 +365,33 @@ value_range_base::type () const\n   return TREE_TYPE (min ());\n }\n \n-/* Dump value range to FILE.  */\n-\n void\n value_range_base::dump (FILE *file) const\n {\n   if (undefined_p ())\n     fprintf (file, \"UNDEFINED\");\n   else if (m_kind == VR_RANGE || m_kind == VR_ANTI_RANGE)\n     {\n-      tree type = TREE_TYPE (min ());\n+      tree ttype = type ();\n+\n+      print_generic_expr (file, ttype);\n+      fprintf (file, \" \");\n \n       fprintf (file, \"%s[\", (m_kind == VR_ANTI_RANGE) ? \"~\" : \"\");\n \n-      if (INTEGRAL_TYPE_P (type)\n-\t  && !TYPE_UNSIGNED (type)\n-\t  && vrp_val_is_min (min ()))\n+      if (INTEGRAL_TYPE_P (ttype)\n+\t  && !TYPE_UNSIGNED (ttype)\n+\t  && vrp_val_is_min (min ())\n+\t  && TYPE_PRECISION (ttype) != 1)\n \tfprintf (file, \"-INF\");\n       else\n \tprint_generic_expr (file, min ());\n \n       fprintf (file, \", \");\n \n-      if (INTEGRAL_TYPE_P (type)\n-\t  && vrp_val_is_max (max ()))\n+      if (INTEGRAL_TYPE_P (ttype)\n+\t  && vrp_val_is_max (max ())\n+\t  && TYPE_PRECISION (ttype) != 1)\n \tfprintf (file, \"+INF\");\n       else\n \tprint_generic_expr (file, max ());\n@@ -398,7 +401,7 @@ value_range_base::dump (FILE *file) const\n   else if (varying_p ())\n     fprintf (file, \"VARYING\");\n   else\n-    fprintf (file, \"INVALID RANGE\");\n+    gcc_unreachable ();\n }\n \n void\n@@ -425,17 +428,45 @@ value_range::dump (FILE *file) const\n }\n \n void\n-value_range_base::dump () const\n+dump_value_range (FILE *file, const value_range *vr)\n {\n-  dump_value_range (stderr, this);\n-  fprintf (stderr, \"\\n\");\n+  if (!vr)\n+    fprintf (file, \"[]\");\n+  else\n+    vr->dump (file);\n }\n \n void\n-value_range::dump () const\n+dump_value_range (FILE *file, const value_range_base *vr)\n+{\n+  if (!vr)\n+    fprintf (file, \"[]\");\n+  else\n+    vr->dump (file);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const value_range_base *vr)\n+{\n+  dump_value_range (stderr, vr);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const value_range_base &vr)\n+{\n+  dump_value_range (stderr, &vr);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const value_range *vr)\n+{\n+  dump_value_range (stderr, vr);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const value_range &vr)\n {\n-  dump_value_range (stderr, this);\n-  fprintf (stderr, \"\\n\");\n+  dump_value_range (stderr, &vr);\n }\n \n /* Return true if the SSA name NAME is live on the edge E.  */\n@@ -2165,43 +2196,6 @@ extract_range_from_unary_expr (value_range_base *vr,\n   return;\n }\n \n-/* Debugging dumps.  */\n-\n-void\n-dump_value_range (FILE *file, const value_range *vr)\n-{\n-  if (!vr)\n-    fprintf (file, \"[]\");\n-  else\n-    vr->dump (file);\n-}\n-\n-void\n-dump_value_range (FILE *file, const value_range_base *vr)\n-{\n-  if (!vr)\n-    fprintf (file, \"[]\");\n-  else\n-    vr->dump (file);\n-}\n-\n-/* Dump value range VR to stderr.  */\n-\n-DEBUG_FUNCTION void\n-debug_value_range (const value_range_base *vr)\n-{\n-  dump_value_range (stderr, vr);\n-}\n-\n-/* Dump value range VR to stderr.  */\n-\n-DEBUG_FUNCTION void\n-debug_value_range (const value_range *vr)\n-{\n-  dump_value_range (stderr, vr);\n-}\n-\n-\n /* Given a COND_EXPR COND of the form 'V OP W', and an SSA name V,\n    create a new SSA name N and return the assertion assignment\n    'N = ASSERT_EXPR <V, V OP W>'.  */"}, {"sha": "287860399c4d19521cd9ab6793b085d06ac1c3c5", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f824e18c061f9ffa8c49275ba072c120a5b7cdba/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=f824e18c061f9ffa8c49275ba072c120a5b7cdba", "patch": "@@ -71,9 +71,7 @@ class GTY((for_user)) value_range_base\n   void set_and_canonicalize (enum value_range_kind, tree, tree);\n   bool zero_p () const;\n   bool singleton_p (tree *result = NULL) const;\n-\n   void dump (FILE *) const;\n-  void dump () const;\n \n protected:\n   void check ();\n@@ -139,7 +137,6 @@ class GTY((user)) value_range : public value_range_base\n   void deep_copy (const value_range *);\n   void set_and_canonicalize (enum value_range_kind, tree, tree, bitmap = NULL);\n   void dump (FILE *) const;\n-  void dump () const;\n \n  private:\n   /* Deep-copies bitmap argument.  */"}]}