{"sha": "c3cb71ef35522f46afa6f11ee376cdcb73b893e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNjYjcxZWYzNTUyMmY0NmFmYTZmMTFlZTM3NmNkY2I3M2I4OTNlOA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2019-12-05T15:18:39Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-12-05T15:18:39Z"}, "message": "OpenMP] Fix use_device_\u2026 with absent optional arg\n\n        gcc/fortran/\n        * trans-openmp.c (gfc_omp_is_optional_argument,\n        gfc_omp_check_optional_argument): Handle type(c_ptr),value which uses a\n        hidden argument for the is-present check.\n\n        gcc/\n        * omp-low.c (lower_omp_target): For use_device_ptr/use_derice_addr\n        and Fortran's optional arguments, unconditionally add the is-present\n        condition before the libgomp call.\n\n        libgomp/\n        * testsuite/libgomp.fortran/use_device_ptr-optional-2.f90: Add\n        'type(c_ptr), value' test case. Conditionally map the per-value\n        passed arguments.\n\nFrom-SVN: r279004", "tree": {"sha": "00586bccd3b51836b13802be9977e0024a9a7476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00586bccd3b51836b13802be9977e0024a9a7476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3cb71ef35522f46afa6f11ee376cdcb73b893e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3cb71ef35522f46afa6f11ee376cdcb73b893e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3cb71ef35522f46afa6f11ee376cdcb73b893e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "705f02b0ca8e625c4f513a66efe28b403c796c22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705f02b0ca8e625c4f513a66efe28b403c796c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/705f02b0ca8e625c4f513a66efe28b403c796c22"}], "stats": {"total": 96, "additions": 68, "deletions": 28}, "files": [{"sha": "87dc67ee53b83ea2c4b47a5763f3367cb882dc7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3cb71ef35522f46afa6f11ee376cdcb73b893e8", "patch": "@@ -1,3 +1,9 @@\n+2019-12-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* omp-low.c (lower_omp_target): For use_device_ptr/use_derice_addr\n+\tand Fortran's optional arguments, unconditionally add the is-present\n+\tcondition before the libgomp call.\n+\n 2019-12-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/92768"}, {"sha": "04861c75a415e987eda7b8a774fa54ddf9d9846c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c3cb71ef35522f46afa6f11ee376cdcb73b893e8", "patch": "@@ -1,3 +1,8 @@\n+2019-12-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-openmp.c (gfc_omp_is_optional_argument,\n+\tgfc_omp_check_optional_argument): Handle type(c_ptr),value which uses a\n+\n 2019-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/92781"}, {"sha": "2f9456d80f9d8698179534ce229bb42c4568db8a", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=c3cb71ef35522f46afa6f11ee376cdcb73b893e8", "patch": "@@ -60,14 +60,16 @@ gfc_omp_is_allocatable_or_ptr (const_tree decl)\n \n /* True if the argument is an optional argument; except that false is also\n    returned for arguments with the value attribute (nonpointers) and for\n-   assumed-shape variables (decl is a local variable containing arg->data).  */\n+   assumed-shape variables (decl is a local variable containing arg->data).\n+   Note that pvoid_type_node is for 'type(c_ptr), value.  */\n \n static bool\n gfc_omp_is_optional_argument (const_tree decl)\n {\n   return (TREE_CODE (decl) == PARM_DECL\n \t  && DECL_LANG_SPECIFIC (decl)\n \t  && TREE_CODE (TREE_TYPE (decl)) == POINTER_TYPE\n+\t  && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl)))\n \t  && GFC_DECL_OPTIONAL_ARGUMENT (decl));\n }\n \n@@ -99,9 +101,12 @@ gfc_omp_check_optional_argument (tree decl, bool for_present_check)\n       || !GFC_DECL_OPTIONAL_ARGUMENT (decl))\n     return NULL_TREE;\n \n-  /* For VALUE, the scalar variable is passed as is but a hidden argument\n-     denotes the value.  Cf. trans-expr.c.  */\n-  if (TREE_CODE (TREE_TYPE (decl)) != POINTER_TYPE)\n+   /* Scalars with VALUE attribute which are passed by value use a hidden\n+      argument to denote the present status.  They are passed as nonpointer type\n+      with one exception: 'type(c_ptr), value' as 'void*'.  */\n+   /* Cf. trans-expr.c's gfc_conv_expr_present.  */\n+   if (TREE_CODE (TREE_TYPE (decl)) != POINTER_TYPE\n+       || VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl))))\n     {\n       char name[GFC_MAX_SYMBOL_LEN + 2];\n       tree tree_name;"}, {"sha": "b0168d7c53c05d2459d4877d9899a89092a1d7e7", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=c3cb71ef35522f46afa6f11ee376cdcb73b893e8", "patch": "@@ -11981,8 +11981,6 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  case OMP_CLAUSE_USE_DEVICE_PTR:\n \t  case OMP_CLAUSE_USE_DEVICE_ADDR:\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n-\t    bool do_optional_check;\n-\t    do_optional_check = false;\n \t    ovar = OMP_CLAUSE_DECL (c);\n \t    var = lookup_decl_in_outer_ctx (ovar, ctx);\n \n@@ -12004,10 +12002,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      }\n \t    type = TREE_TYPE (ovar);\n \t    if (lang_hooks.decls.omp_array_data (ovar, true))\n-\t      {\n-\t\tvar = lang_hooks.decls.omp_array_data (ovar, false);\n-\t\tdo_optional_check = true;\n-\t      }\n+\t      var = lang_hooks.decls.omp_array_data (ovar, false);\n \t    else if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_ADDR\n \t\t      && !omp_is_reference (ovar)\n \t\t      && !omp_is_allocatable_or_ptr (ovar))\n@@ -12025,16 +12020,12 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t    && !omp_is_allocatable_or_ptr (ovar))\n \t\t\t   || (omp_is_reference (ovar)\n \t\t\t       && omp_is_allocatable_or_ptr (ovar))))\n-\t\t      {\n-\t\t\tvar = build_simple_mem_ref (var);\n-\t\t\tdo_optional_check = true;\n-\t\t      }\n+\t\t      var = build_simple_mem_ref (var);\n \t\t    var = fold_convert (TREE_TYPE (x), var);\n \t\t  }\n \t      }\n \t    tree present;\n-\t    present = (do_optional_check\n-\t\t       ? omp_check_optional_argument (ovar, true) : NULL_TREE);\n+\t    present = omp_check_optional_argument (ovar, true);\n \t    if (present)\n \t      {\n \t\ttree null_label = create_artificial_label (UNKNOWN_LOCATION);"}, {"sha": "34e5783cedd4f090ef32f72e51150d111c7865c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3cb71ef35522f46afa6f11ee376cdcb73b893e8", "patch": "@@ -1,3 +1,9 @@\n+2019-12-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/use_device_ptr-optional-2.f90: Add\n+\t'type(c_ptr), value' test case. Conditionally map the per-value\n+\tpassed arguments.\n+\n 2019-12-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/92768"}, {"sha": "6eefbe135c4a5aa5df3dcc29824379a29d914d19", "filename": "libgomp/testsuite/libgomp.fortran/use_device_ptr-optional-2.f90", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-optional-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cb71ef35522f46afa6f11ee376cdcb73b893e8/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-optional-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-optional-2.f90?ref=c3cb71ef35522f46afa6f11ee376cdcb73b893e8", "patch": "@@ -1,33 +1,60 @@\n ! Check whether absent optional arguments are properly\n ! handled with use_device_{addr,ptr}.\n program main\n+ use iso_c_binding, only: c_ptr, c_loc, c_associated\n  implicit none (type, external)\n  call foo()\n contains\n-  subroutine foo(v, w, x, y, z)\n+  subroutine foo(v, w, x, y, z, cptr, cptr_in)\n     integer, target, optional, value :: v\n     integer, target, optional :: w\n     integer, target, optional :: x(:)\n     integer, target, optional, allocatable :: y\n     integer, target, optional, allocatable :: z(:)\n+    type(c_ptr), target, optional, value :: cptr\n+    type(c_ptr), target, optional, value, intent(in) :: cptr_in\n     integer :: d\n \n-    !$omp target data map(d) use_device_addr(v, w, x, y, z)\n-      if(present(v)) stop 1\n-      if(present(w)) stop 2\n-      if(present(x)) stop 3\n-      if(present(y)) stop 4\n-      if(present(z)) stop 5\n+    ! Need to map per-VALUE arguments, if present\n+    if (present(v)) then\n+      !$omp target enter data map(to:v)\n+      stop 1  ! \u2013 but it shall not be present in this test case.\n+    end if\n+    if (present(cptr)) then\n+      !$omp target enter data map(to:cptr)\n+      stop 2  ! \u2013 but it shall not be present in this test case.\n+    end if\n+    if (present(cptr_in)) then\n+      !$omp target enter data map(to:cptr_in)\n+      stop 3  ! \u2013 but it shall not be present in this test case.\n+    end if\n+\n+    !$omp target data map(d) use_device_addr(v, w, x, y, z, cptr, cptr_in)\n+      if (present(v)) then; v    = 5; stop 11; endif\n+      if (present(w)) then; w    = 5; stop 12; endif\n+      if (present(x)) then; x(1) = 5; stop 13; endif\n+      if (present(y)) then; y    = 5; stop 14; endif\n+      if (present(z)) then; z(1) = 5; stop 15; endif\n+      if (present(cptr)) then; cptr = c_loc(v); stop 16; endif\n+      if (present(cptr_in)) then\n+        if (c_associated(cptr_in, c_loc(x))) stop 26\n+        stop 27\n+      endif\n     !$omp end target data\n \n ! Using 'v' in use_device_ptr gives an ICE\n ! TODO: Find out what the OpenMP spec permits for use_device_ptr\n \n-    !$omp target data map(d) use_device_ptr(w, x, y, z)\n-      if(present(w)) stop 6\n-      if(present(x)) stop 7\n-      if(present(y)) stop 8\n-      if(present(z)) stop 9\n+    !$omp target data map(d) use_device_ptr(w, x, y, z, cptr, cptr_in)\n+      if (present(w)) then; w    = 5; stop 21; endif\n+      if (present(x)) then; x(1) = 5; stop 22; endif\n+      if (present(y)) then; y    = 5; stop 23; endif\n+      if (present(z)) then; z(1) = 5; stop 24; endif\n+      if (present(cptr)) then; cptr = c_loc(x); stop 25; endif\n+      if (present(cptr_in)) then\n+        if (c_associated(cptr_in, c_loc(x))) stop 26\n+        stop 27\n+      endif\n     !$omp end target data\n   end subroutine foo\n end program main"}]}