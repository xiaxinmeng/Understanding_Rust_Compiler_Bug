{"sha": "9e207d6fec83ee36458d59254d3fd40b3752bec2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyMDdkNmZlYzgzZWUzNjQ1OGQ1OTI1NGQzZmQ0MGIzNzUyYmVjMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-08-09T07:49:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-08-09T07:49:14Z"}, "message": "re PR tree-optimization/72824 (Signed floating point zero semantics broken at optimization level -O3 (tree-loop-distribute-patterns))\n\n\tPR tree-optimization/72824\n\t* tree-loop-distribution.c (const_with_all_bytes_same): Verify\n\treal_zerop is not negative.\n\n\t* gcc.c-torture/execute/ieee/pr72824.c: New test.\n\nFrom-SVN: r239275", "tree": {"sha": "f9c8a787b868065680fcf3982a8ae8846c37d368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9c8a787b868065680fcf3982a8ae8846c37d368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e207d6fec83ee36458d59254d3fd40b3752bec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e207d6fec83ee36458d59254d3fd40b3752bec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e207d6fec83ee36458d59254d3fd40b3752bec2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e207d6fec83ee36458d59254d3fd40b3752bec2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50bf47fdc08807bf8fc0362d677c8fc7dd4514b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50bf47fdc08807bf8fc0362d677c8fc7dd4514b0"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "e71b548253ef25002454e547f87459aaccb05958", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e207d6fec83ee36458d59254d3fd40b3752bec2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e207d6fec83ee36458d59254d3fd40b3752bec2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e207d6fec83ee36458d59254d3fd40b3752bec2", "patch": "@@ -1,3 +1,9 @@\n+2016-08-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/72824\n+\t* tree-loop-distribution.c (const_with_all_bytes_same): Verify\n+\treal_zerop is not negative.\n+\n 2016-08-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71802"}, {"sha": "711778bfb8ebc65d5296e91c2a07efcc0e611d9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e207d6fec83ee36458d59254d3fd40b3752bec2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e207d6fec83ee36458d59254d3fd40b3752bec2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e207d6fec83ee36458d59254d3fd40b3752bec2", "patch": "@@ -1,3 +1,8 @@\n+2016-08-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/72824\n+\t* gcc.c-torture/execute/ieee/pr72824.c: New test.\n+\n 2016-08-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71802"}, {"sha": "1c213733ca1a7ac42fe5a177f70db3dcb686c2b3", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/pr72824.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e207d6fec83ee36458d59254d3fd40b3752bec2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr72824.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e207d6fec83ee36458d59254d3fd40b3752bec2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr72824.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr72824.c?ref=9e207d6fec83ee36458d59254d3fd40b3752bec2", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/72824 */\n+\n+static inline void\n+foo (float *x, float value)\n+{\n+  int i;\n+  for (i = 0; i < 32; ++i)\n+    x[i] = value;\n+}\n+\n+int\n+main ()\n+{\n+  float x[32];\n+  foo (x, -0.f);\n+  if (__builtin_copysignf (1.0, x[3]) != -1.0f)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "342b9647fe71b1975fb30946cedc2990ba9206ec", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e207d6fec83ee36458d59254d3fd40b3752bec2/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e207d6fec83ee36458d59254d3fd40b3752bec2/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=9e207d6fec83ee36458d59254d3fd40b3752bec2", "patch": "@@ -750,12 +750,40 @@ const_with_all_bytes_same (tree val)\n   int i, len;\n \n   if (integer_zerop (val)\n-      || real_zerop (val)\n       || (TREE_CODE (val) == CONSTRUCTOR\n           && !TREE_CLOBBER_P (val)\n           && CONSTRUCTOR_NELTS (val) == 0))\n     return 0;\n \n+  if (real_zerop (val))\n+    {\n+      /* Only return 0 for +0.0, not for -0.0, which doesn't have\n+\t an all bytes same memory representation.  Don't transform\n+\t -0.0 stores into +0.0 even for !HONOR_SIGNED_ZEROS.  */\n+      switch (TREE_CODE (val))\n+\t{\n+\tcase REAL_CST:\n+\t  if (!real_isneg (TREE_REAL_CST_PTR (val)))\n+\t    return 0;\n+\t  break;\n+\tcase COMPLEX_CST:\n+\t  if (!const_with_all_bytes_same (TREE_REALPART (val))\n+\t      && !const_with_all_bytes_same (TREE_IMAGPART (val)))\n+\t    return 0;\n+\t  break;\n+\tcase VECTOR_CST:\n+\t  unsigned int j;\n+\t  for (j = 0; j < VECTOR_CST_NELTS (val); ++j)\n+\t    if (const_with_all_bytes_same (VECTOR_CST_ELT (val, i)))\n+\t      break;\n+\t  if (j == VECTOR_CST_NELTS (val))\n+\t    return 0;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+\n   if (CHAR_BIT != 8 || BITS_PER_UNIT != 8)\n     return -1;\n "}]}