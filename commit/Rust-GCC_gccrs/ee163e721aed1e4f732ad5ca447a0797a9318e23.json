{"sha": "ee163e721aed1e4f732ad5ca447a0797a9318e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxNjNlNzIxYWVkMWU0ZjczMmFkNWNhNDQ3YTA3OTdhOTMxOGUyMw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2013-10-07T07:50:25Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2013-10-07T07:50:25Z"}, "message": "2013-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.md (\"tbegin\", \"tbegin_nofloat\", \"tbegin_retry\")\n\t(\"tbegin_retry_nofloat\", \"tend\", \"tabort\", \"tx_assist\"): Remove\n\tconstraint letters from expanders.\n\t(\"tbegin_retry\", \"tbegin_retry_nofloat\"): Change predicate of the\n\tretry count to general_operand.\n\t(\"tabort\"): Give operand 0 a mode.\n\t(\"tabort_1\"): Add mode and constraint letter for operand 0.\n\t* doc/extend.texi: Fix protoype of __builtin_non_tx_store.\n\n2013-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.target/s390/htm-1.c: Add more tests to cover different\n\toperand types.\n\nFrom-SVN: r203239", "tree": {"sha": "644e37d1107cff6b03cc1ec491d9e08343ab9a94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/644e37d1107cff6b03cc1ec491d9e08343ab9a94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee163e721aed1e4f732ad5ca447a0797a9318e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee163e721aed1e4f732ad5ca447a0797a9318e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee163e721aed1e4f732ad5ca447a0797a9318e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee163e721aed1e4f732ad5ca447a0797a9318e23/comments", "author": null, "committer": null, "parents": [{"sha": "2a1a5775d94b931c52693410393e8ec1b460ddfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1a5775d94b931c52693410393e8ec1b460ddfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1a5775d94b931c52693410393e8ec1b460ddfd"}], "stats": {"total": 94, "additions": 73, "deletions": 21}, "files": [{"sha": "d91beec906ba0248ec986ad7c84b2a42036258d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee163e721aed1e4f732ad5ca447a0797a9318e23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee163e721aed1e4f732ad5ca447a0797a9318e23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee163e721aed1e4f732ad5ca447a0797a9318e23", "patch": "@@ -1,3 +1,14 @@\n+2013-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.md (\"tbegin\", \"tbegin_nofloat\", \"tbegin_retry\")\n+\t(\"tbegin_retry_nofloat\", \"tend\", \"tabort\", \"tx_assist\"): Remove\n+\tconstraint letters from expanders.\n+\t(\"tbegin_retry\", \"tbegin_retry_nofloat\"): Change predicate of the\n+\tretry count to general_operand.\n+\t(\"tabort\"): Give operand 0 a mode.\n+\t(\"tabort_1\"): Add mode and constraint letter for operand 0.\n+\t* doc/extend.texi: Fix protoype of __builtin_non_tx_store.\n+\n 2013-10-04  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-threadedge.c: Fix some trailing whitespace problems."}, {"sha": "bb1408efd8101fa0a91f6d8b66faa9281d465c81", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee163e721aed1e4f732ad5ca447a0797a9318e23/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee163e721aed1e4f732ad5ca447a0797a9318e23/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=ee163e721aed1e4f732ad5ca447a0797a9318e23", "patch": "@@ -9962,37 +9962,37 @@\n ; Non-constrained transaction begin\n \n (define_expand \"tbegin\"\n-  [(match_operand:SI 0 \"register_operand\" \"=d\")\n-   (match_operand:BLK 1 \"memory_operand\"  \"=Q\")]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:BLK 1 \"memory_operand\" \"\")]\n   \"TARGET_HTM\"\n {\n   s390_expand_tbegin (operands[0], operands[1], NULL_RTX, true);\n   DONE;\n })\n \n (define_expand \"tbegin_nofloat\"\n-  [(match_operand:SI 0 \"register_operand\" \"=d\")\n-   (match_operand:BLK 1 \"memory_operand\"  \"=Q\")]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:BLK 1 \"memory_operand\" \"\")]\n   \"TARGET_HTM\"\n {\n   s390_expand_tbegin (operands[0], operands[1], NULL_RTX, false);\n   DONE;\n })\n \n (define_expand \"tbegin_retry\"\n-  [(match_operand:SI 0 \"register_operand\" \"=d\")\n-   (match_operand:BLK 1 \"memory_operand\"  \"=Q\")\n-   (match_operand 2 \"const_int_operand\")]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:BLK 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"general_operand\" \"\")]\n   \"TARGET_HTM\"\n {\n   s390_expand_tbegin (operands[0], operands[1], operands[2], true);\n   DONE;\n })\n \n (define_expand \"tbegin_retry_nofloat\"\n-  [(match_operand:SI 0 \"register_operand\" \"=d\")\n-   (match_operand:BLK 1 \"memory_operand\"  \"=Q\")\n-   (match_operand 2 \"const_int_operand\")]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:BLK 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"general_operand\" \"\")]\n   \"TARGET_HTM\"\n {\n   s390_expand_tbegin (operands[0], operands[1], operands[2], false);\n@@ -10059,7 +10059,7 @@\n (define_expand \"tend\"\n   [(set (reg:CCRAW CC_REGNUM)\n \t(unspec_volatile:CCRAW [(const_int 0)] UNSPECV_TEND))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n+   (set (match_operand:SI 0 \"register_operand\" \"\")\n \t(unspec:SI [(reg:CCRAW CC_REGNUM)] UNSPEC_CC_TO_INT))]\n   \"TARGET_HTM\"\n   \"\")\n@@ -10074,7 +10074,7 @@\n ; Transaction abort\n \n (define_expand \"tabort\"\n-  [(unspec_volatile [(match_operand 0 \"shift_count_or_setmem_operand\" \"\")]\n+  [(unspec_volatile [(match_operand:SI 0 \"shift_count_or_setmem_operand\" \"\")]\n \t\t    UNSPECV_TABORT)]\n   \"TARGET_HTM && operands != NULL\"\n {\n@@ -10089,7 +10089,7 @@\n })\n \n (define_insn \"*tabort_1\"\n-  [(unspec_volatile [(match_operand 0 \"shift_count_or_setmem_operand\" \"\")]\n+  [(unspec_volatile [(match_operand:SI 0 \"shift_count_or_setmem_operand\" \"Y\")]\n \t\t    UNSPECV_TABORT)]\n   \"TARGET_HTM && operands != NULL\"\n   \"tabort\\t%Y0\"\n@@ -10118,7 +10118,7 @@\n \n (define_expand \"tx_assist\"\n   [(set (match_dup 1) (const_int 0))\n-   (unspec_volatile [(match_operand:SI 0 \"register_operand\" \"d\")\n+   (unspec_volatile [(match_operand:SI 0 \"register_operand\" \"\")\n \t\t     (match_dup 1)\n \t\t     (const_int 1)]\n \t\t    UNSPECV_PPA)]"}, {"sha": "782c55e2fa651a7a0a67cdde7450824c8d959d59", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee163e721aed1e4f732ad5ca447a0797a9318e23/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee163e721aed1e4f732ad5ca447a0797a9318e23/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ee163e721aed1e4f732ad5ca447a0797a9318e23", "patch": "@@ -15046,7 +15046,7 @@ depth is returned as integer value.  For a nesting depth of 0 the code\n is not executed as part of an transaction.\n @end deftypefn\n \n-@deftypefn {Built-in Function} void __builtin_non_tx_store (unsigned long long *, unsigned long long)\n+@deftypefn {Built-in Function} void __builtin_non_tx_store (uint64_t *, uint64_t)\n \n Generates the @code{ntstg} machine instruction.  The second argument\n is written to the first arguments location.  The store operation will"}, {"sha": "5dccbe77057489f3573da2ef94f25b562acd0155", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee163e721aed1e4f732ad5ca447a0797a9318e23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee163e721aed1e4f732ad5ca447a0797a9318e23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee163e721aed1e4f732ad5ca447a0797a9318e23", "patch": "@@ -1,3 +1,8 @@\n+2013-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.target/s390/htm-1.c: Add more tests to cover different\n+\toperand types.\n+\n 2013-10-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58126"}, {"sha": "245ba2c7ef9dea76e2c05ef0151cc189a96611d3", "filename": "gcc/testsuite/gcc.target/s390/htm-1.c", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee163e721aed1e4f732ad5ca447a0797a9318e23/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee163e721aed1e4f732ad5ca447a0797a9318e23/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-1.c?ref=ee163e721aed1e4f732ad5ca447a0797a9318e23", "patch": "@@ -7,31 +7,67 @@\n #include <stdint.h>\n #include <htmintrin.h>\n \n-int a = 0;\n+int global = 0;\n uint64_t g;\n+struct __htm_tdb global_tdb;\n \n int\n-foo (struct __htm_tdb* tdb)\n+foo (struct __htm_tdb* tdb, int reg, int *mem, uint64_t *mem64)\n {\n \n   int cc;\n   int n;\n \n   cc = __builtin_tbegin (0);\n   cc = __builtin_tbegin (tdb);\n+  cc = __builtin_tbegin (&global_tdb);\n+\n   cc = __builtin_tbegin_nofloat (0);\n-  cc = __builtin_tbegin_nofloat (tdb);\n+  cc = __builtin_tbegin_nofloat (&global_tdb);\n+\n   cc = __builtin_tbegin_retry (0, 42);\n+  cc = __builtin_tbegin_retry (0, reg);\n+  cc = __builtin_tbegin_retry (0, *mem);\n+  cc = __builtin_tbegin_retry (0, global);\n   cc = __builtin_tbegin_retry (tdb, 42);\n+  cc = __builtin_tbegin_retry (&global_tdb, 42);\n+\n   cc = __builtin_tbegin_retry_nofloat (0, 42);\n-  cc = __builtin_tbegin_retry_nofloat (tdb, 42);\n+  cc = __builtin_tbegin_retry_nofloat (0, reg);\n+  cc = __builtin_tbegin_retry_nofloat (0, *mem);\n+  cc = __builtin_tbegin_retry_nofloat (0, global);\n+  cc = __builtin_tbegin_retry_nofloat (&global_tdb, 42);\n+\n   __builtin_tbeginc ();\n+\n   n = __builtin_tx_nesting_depth();\n-  __builtin_non_tx_store(&g, n);\n+\n+  __builtin_non_tx_store(&g, 23);\n+  __builtin_non_tx_store(mem64, 23);\n+  __builtin_non_tx_store(&g, reg);\n+  __builtin_non_tx_store(&g, *mem);\n+  __builtin_non_tx_store(&g, global);\n+\n   __builtin_tabort (42 + 255);\n+  __builtin_tabort (reg);\n+  /* { dg-final { scan-assembler-times \"tabort\\t255\" 1 } } */\n+  __builtin_tabort (reg + 255);\n+  __builtin_tabort (*mem);\n+  __builtin_tabort (global);\n+  /* Here global + 255 gets reloaded into a reg.  Better would be to\n+     just reload global or *mem and get the +255 for free as address\n+     arithmetic.  */\n+  __builtin_tabort (*mem + 255);\n+  __builtin_tabort (global + 255);\n+\n   __builtin_tend();\n+\n   __builtin_tx_assist (23);\n+  __builtin_tx_assist (reg);\n+  __builtin_tx_assist (*mem);\n+  __builtin_tx_assist (global);\n }\n+\n /* Make sure the tdb NULL argument ends up as immediate value in the\n    instruction.  */\n-/* { dg-final { scan-assembler-times \"tbegin\\t0,\" 4 } } */\n+/* { dg-final { scan-assembler-times \"tbegin\\t0,\" 10 } } */"}]}