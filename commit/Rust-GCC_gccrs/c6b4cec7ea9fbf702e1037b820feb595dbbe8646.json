{"sha": "c6b4cec7ea9fbf702e1037b820feb595dbbe8646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZiNGNlYzdlYTlmYmY3MDJlMTAzN2I4MjBmZWI1OTVkYmJlODY0Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-29T17:55:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-29T17:55:29Z"}, "message": "i386.md (*floathi<mode>2_i387_with_temp): Do not allocate scratch memory for alternative 0.\n\n\t* config/i386/i386.md (*floathi<mode>2_i387_with_temp): Do not\n\tallocate scratch memory for alternative 0.\n\nFrom-SVN: r181811", "tree": {"sha": "74b5603820b82a0e2db1d972fcddb80797ccaef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74b5603820b82a0e2db1d972fcddb80797ccaef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6b4cec7ea9fbf702e1037b820feb595dbbe8646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b4cec7ea9fbf702e1037b820feb595dbbe8646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b4cec7ea9fbf702e1037b820feb595dbbe8646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b4cec7ea9fbf702e1037b820feb595dbbe8646/comments", "author": null, "committer": null, "parents": [{"sha": "645e511b2006cb2635b30a7a44d295dfc312c596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645e511b2006cb2635b30a7a44d295dfc312c596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/645e511b2006cb2635b30a7a44d295dfc312c596"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "272133edc691c8930bfb780fa5702df559621b74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b4cec7ea9fbf702e1037b820feb595dbbe8646/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b4cec7ea9fbf702e1037b820feb595dbbe8646/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6b4cec7ea9fbf702e1037b820feb595dbbe8646", "patch": "@@ -1,3 +1,8 @@\n+2011-11-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*floathi<mode>2_i387_with_temp): Do not\n+\tallocate scratch memory for alternative 0.\n+\n 2011-11-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-builtins.def: Completely rewrite builtin\n@@ -10,17 +15,15 @@\n \tthe use of a builtin unless the appropriate switch is used, or\n \t#pragma GCC target is used to change the options.  If the user\n \tuses #pragma GCC target, update the appropriate hardware macros.\n-\t* common/config/rs6000/rs6000-common.c (rs6000_handle_option):\n-\tDitto.\n+\t* common/config/rs6000/rs6000-common.c (rs6000_handle_option): Ditto.\n \t* config/rs6000/rs6000.opt (rs6000_builtin_mask): Ditto.\n \t* config/rs6000/rs6000-c.c (rs6000_macro_to_expand): Ditto.\n \t(rs6000_define_or_undefine_macro): Ditto.\n \t(rs6000_target_modify_macros): Ditto.\n \t(rs6000_cpu_cpp_builtins): Ditto.\n \t(altivec_overloaded_builtins): Ditto.\n \t(altivec_build_resolved_builtin): Ditto.\n-\t* config/rs6000/rs6000.c (rs6000_target_modify_macros_ptr):\n-\tDitto.\n+\t* config/rs6000/rs6000.c (rs6000_target_modify_macros_ptr): Ditto.\n \t(rs6000_builtin_info): Ditto.\n \t(def_builtin): Ditto.\n \t(enable_mask_for_builtins): Ditto.\n@@ -65,17 +68,15 @@\n \t(RS6000_BTC_*): Ditto.\n \t(RS6000_BTM_*): Ditto.\n \t(enum rs6000_builtins): Ditto.\n-\t* config/rs6000/rs6000-protos.h (rs6000_overloaded_builtin_p):\n-\tDitto.\n+\t* config/rs6000/rs6000-protos.h (rs6000_overloaded_builtin_p): Ditto.\n \t(rs6000_target_modify_macros): Ditto.\n \t(rs6000_target_modify_macros_ptr): Ditto.\n \n \t* config/rs6000/vector.md (unsfloat<VEC_int><mode>2): Use the\n \tstandard name for converting vector unsigned values to floating\n \tpoint.  Delete the TARGET_VECTORIZE_BUILTIN_CONVERSION hook, which\n \tis handled by machine independent code.\n-\t* config/rs6000/rs6000.c (TARGET_VECTORIZE_BUILTIN_CONVERSION):\n-\tDitto.\n+\t* config/rs6000/rs6000.c (TARGET_VECTORIZE_BUILTIN_CONVERSION): Ditto.\n \t(rs6000_builtin_conversion): Ditto.\n \n 2011-11-29  Dodji Seketeli  <dodji@redhat.com>\n@@ -99,19 +100,18 @@\n 2011-11-29   Diego Novillo  <dnovillo@google.com>\n \n \t* gimple.c (gimple_call_set_cannot_inline): Move from gimple.h.\n-\tUpdate field call_stmt_cannot_inline_p from call graph edge, if\n-\tneeded.\n+\tUpdate field call_stmt_cannot_inline_p from call graph edge, if needed.\n \t* gimple.h (gimple_call_set_cannot_inline): Move to gimple.c.\n \n 2011-11-29  Sameera Deshpande  <sameera.deshpande@arm.com>\n \n \t* config/arm/arm.md (arm_movdi): Update NEG_POOL_RANGE.\n-\t  (movdf_soft_insn): Likewise.\n+\t(movdf_soft_insn): Likewise.\n \t* config/arm/fpa.md (thumb2_movdf_fpa): Likewise.\n \t* config/arm/neon.md (neon_mov<mode>): Likewise.\n \t* config/arm/vfp.md (movdi_vfp): Likewise.\n-\t (movdi_vfp_cortexa8): Likewise.\n-\t (movdf_vfp): Likewise.\n+\t(movdi_vfp_cortexa8): Likewise.\n+\t(movdf_vfp): Likewise.\n \n 2011-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -244,8 +244,7 @@\n \t(init_reg_sets_1): Limit operand_reg_set to accessible_reg_set.\n \tRemove NO_REGS registers from operand_reg_set.  Treat members\n \tof operand_reg_set as fixed.\n-\t* recog.c (general_operand): Check operand_reg_set rather than\n-\tNO_REGS.\n+\t* recog.c (general_operand): Check operand_reg_set rather than NO_REGS.\n \t(register_operand, nonmemory_operand): Likewise.\n \t* varasm.c (make_decl_rtl): Always use DECL_MODE as the mode of\n \tregister variables.  Check accessible_reg_set and operand_reg_set."}, {"sha": "47e7c6b33e51e7ee0a1ef107dcee3f8382f9ed2f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b4cec7ea9fbf702e1037b820feb595dbbe8646/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b4cec7ea9fbf702e1037b820feb595dbbe8646/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c6b4cec7ea9fbf702e1037b820feb595dbbe8646", "patch": "@@ -4679,7 +4679,7 @@\n (define_insn \"*floathi<mode>2_i387_with_temp\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,f\")\n \t(float:X87MODEF (match_operand:HI 1 \"nonimmediate_operand\" \"m,?r\")))\n-  (clobber (match_operand:HI 2 \"memory_operand\" \"=m,m\"))]\n+  (clobber (match_operand:HI 2 \"memory_operand\" \"=X,m\"))]\n   \"TARGET_80387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\""}]}