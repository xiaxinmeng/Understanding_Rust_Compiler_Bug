{"sha": "541840b891d61ea70cddd046c96698bb70d7f52c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQxODQwYjg5MWQ2MWVhNzBjZGRkMDQ2Yzk2Njk4YmI3MGQ3ZjUyYw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-03-14T14:42:52Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-03-15T15:57:42Z"}, "message": "coroutines : Convert await_ready () expressions to bool [PR99047].\n\nThe awaiter.await_ready() should be converted per [expr.await]/3\n\n(3.6) await-ready is the expression e.await_ready(), contextually\n      converted to bool.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99047\n\t* coroutines.cc (expand_one_await_expression): If the\n\tawait_ready() expression is not a boolean then convert it\n\tas required.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99047\n\t* g++.dg/coroutines/pr99047.C: New test.", "tree": {"sha": "cd8f9ae7496569d1fbd22420faaaff24f65a1eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd8f9ae7496569d1fbd22420faaaff24f65a1eba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/541840b891d61ea70cddd046c96698bb70d7f52c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541840b891d61ea70cddd046c96698bb70d7f52c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541840b891d61ea70cddd046c96698bb70d7f52c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541840b891d61ea70cddd046c96698bb70d7f52c/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "020b286c769f4dc8a6b45491351f6bc2e69d7a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020b286c769f4dc8a6b45491351f6bc2e69d7a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/020b286c769f4dc8a6b45491351f6bc2e69d7a7f"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "51984efe2fd3a6a6bd0ccb85cc96240ea36fc142", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541840b891d61ea70cddd046c96698bb70d7f52c/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541840b891d61ea70cddd046c96698bb70d7f52c/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=541840b891d61ea70cddd046c96698bb70d7f52c", "patch": "@@ -1586,7 +1586,13 @@ expand_one_await_expression (tree *stmt, tree *await_expr, void *d)\n \n   /* Use the await_ready() call to test if we need to suspend.  */\n   tree ready_cond = TREE_VEC_ELT (awaiter_calls, 0); /* await_ready().  */\n-  ready_cond = build1_loc (loc, TRUTH_NOT_EXPR, boolean_type_node, ready_cond);\n+  /* Convert to bool, if necessary.  */\n+  if (TREE_CODE (TREE_TYPE (ready_cond)) != BOOLEAN_TYPE)\n+    ready_cond = cp_convert (boolean_type_node, ready_cond,\n+\t\t\t     tf_warning_or_error);\n+  /* Be aggressive in folding here, since there are a significant number of\n+     cases where the ready condition is constant.  */\n+  ready_cond = invert_truthvalue_loc (loc, ready_cond);\n   ready_cond\n     = build1_loc (loc, CLEANUP_POINT_EXPR, boolean_type_node, ready_cond);\n "}, {"sha": "124633a08e63ffed10ab82c04e86b025b3b2ceea", "filename": "gcc/testsuite/g++.dg/coroutines/pr99047.C", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541840b891d61ea70cddd046c96698bb70d7f52c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr99047.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541840b891d61ea70cddd046c96698bb70d7f52c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr99047.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr99047.C?ref=541840b891d61ea70cddd046c96698bb70d7f52c", "patch": "@@ -0,0 +1,83 @@\n+#include <optional>\n+#include <coroutine>\n+\n+template <typename T>\n+struct [[nodiscard]] task {\n+    struct promise_type  {\n+        std::suspend_always initial_suspend() {\n+            return {};\n+        }\n+        auto final_suspend() noexcept {\n+            struct awaiter {\n+#if 1\n+                std::false_type await_ready() noexcept {\n+                    return {};\n+                }\n+#else\n+                bool await_ready() noexcept {\n+                    return false;\n+                }\n+#endif\n+                std::coroutine_handle<> await_suspend(std::coroutine_handle<>) noexcept {\n+                    return next;\n+                }\n+                void await_resume() noexcept {\n+                }\n+                std::coroutine_handle<> next;\n+            };\n+            return awaiter{next};\n+        }\n+\n+        void unhandled_exception() noexcept {\n+            std::terminate();\n+        }\n+        auto get_return_object() {\n+            return task(this);\n+        }\n+        auto coro() {\n+            return std::coroutine_handle<promise_type>::from_promise(*this);\n+        }\n+        void return_value(T val) {\n+            result.emplace(std::move(val));\n+        }\n+\n+        std::coroutine_handle<> next;\n+        std::optional<T> result;\n+    };\n+\n+    task(task&& source) : p(std::exchange(source.p, nullptr)) {}\n+    explicit task(promise_type* p) : p(p) {}\n+    ~task() {\n+        if (p)\n+            p->coro().destroy();\n+    }\n+\n+    bool await_ready() noexcept {\n+        return p->coro().done();\n+    }\n+    std::coroutine_handle<> await_suspend(std::coroutine_handle<> next) noexcept {\n+        p->next = next;\n+        return p->coro();\n+    }\n+    const T& await_resume() const& noexcept {\n+        return *p->result;\n+    }\n+\n+    promise_type* p;\n+};\n+\n+task<int> five() {\n+    co_return 5;\n+}\n+\n+task<int> six() {\n+    co_return co_await five() + 1;\n+}\n+\n+\n+int main() {\n+    auto task = six();\n+    task.p->next = std::noop_coroutine();\n+    task.p->coro().resume();\n+    return *task.p->result;\n+}"}]}