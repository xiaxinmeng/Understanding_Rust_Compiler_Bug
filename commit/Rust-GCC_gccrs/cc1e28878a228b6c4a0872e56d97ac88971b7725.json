{"sha": "cc1e28878a228b6c4a0872e56d97ac88971b7725", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxZTI4ODc4YTIyOGI2YzRhMDg3MmU1NmQ5N2FjODg5NzFiNzcyNQ==", "commit": {"author": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2021-09-14T15:41:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-15T08:49:33Z"}, "message": "libstdc++: Check for TLS support on mingw cross-compilers\n\nNative mingw builds enable TLS, but crosses don't because we don't use\nGCC_CHECK_TLS in the cross-compiler config.\n\nlibstdc++-v3/ChangeLog:\n\n\t* crossconfig.m4: Check for TLS support on mingw.\n\t* configure: Regenerate.", "tree": {"sha": "df79cbadd9ce4c6c0ee6894b5b3ff9cfc6911c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df79cbadd9ce4c6c0ee6894b5b3ff9cfc6911c2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc1e28878a228b6c4a0872e56d97ac88971b7725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1e28878a228b6c4a0872e56d97ac88971b7725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1e28878a228b6c4a0872e56d97ac88971b7725", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1e28878a228b6c4a0872e56d97ac88971b7725/comments", "author": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243e0a5b1942879bc005bf150a744e69a4fcdc87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243e0a5b1942879bc005bf150a744e69a4fcdc87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243e0a5b1942879bc005bf150a744e69a4fcdc87"}], "stats": {"total": 209, "additions": 209, "deletions": 0}, "files": [{"sha": "c1aea82707011f52937a63685d6642633b81e405", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e28878a228b6c4a0872e56d97ac88971b7725/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e28878a228b6c4a0872e56d97ac88971b7725/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=cc1e28878a228b6c4a0872e56d97ac88971b7725", "patch": "@@ -60242,6 +60242,214 @@ _ACEOF\n fi\n done\n \n+\n+\n+   # Check whether --enable-tls was given.\n+if test \"${enable_tls+set}\" = set; then :\n+  enableval=$enable_tls;\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) as_fn_error $? \"Argument to enable/disable tls must be yes or no\" \"$LINENO\" 5 ;;\n+      esac\n+\n+else\n+  enable_tls=yes\n+fi\n+\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the target supports thread-local storage\" >&5\n+$as_echo_n \"checking whether the target supports thread-local storage... \" >&6; }\n+if ${gcc_cv_have_tls+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test \"$cross_compiling\" = yes; then :\n+                if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+__thread int a; int b; int main() { return a = b; }\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  chktls_save_LDFLAGS=\"$LDFLAGS\"\n+\t  \t  \t  case $host in\n+\t    *-*-linux* | -*-uclinuxfdpic*)\n+\t      LDFLAGS=\"-shared -Wl,--no-undefined $LDFLAGS\"\n+\t      ;;\n+\t  esac\n+\t  chktls_save_CFLAGS=\"$CFLAGS\"\n+\t  CFLAGS=\"-fPIC $CFLAGS\"\n+\t  \t  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+int f() { return 0; }\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+__thread int a; int b; int f() { return a = b; }\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  gcc_cv_have_tls=yes\n+else\n+  gcc_cv_have_tls=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+else\n+  gcc_cv_have_tls=yes\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\t  CFLAGS=\"$chktls_save_CFLAGS\"\n+\t  LDFLAGS=\"$chktls_save_LDFLAGS\"\n+else\n+  gcc_cv_have_tls=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\n+\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+__thread int a; int b; int main() { return a = b; }\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+                      chktls_save_LDFLAGS=\"$LDFLAGS\"\n+      LDFLAGS=\"-static $LDFLAGS\"\n+      if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+int main() { return 0; }\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+__thread int a; int b; int main() { return a = b; }\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  gcc_cv_have_tls=yes\n+else\n+  gcc_cv_have_tls=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+else\n+  gcc_cv_have_tls=yes\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+      LDFLAGS=\"$chktls_save_LDFLAGS\"\n+      if test $gcc_cv_have_tls = yes; then\n+\t\t\t\t\t\tchktls_save_CFLAGS=\"$CFLAGS\"\n+\tthread_CFLAGS=failed\n+\tfor flag in '' '-pthread' '-lpthread'; do\n+\t  CFLAGS=\"$flag $chktls_save_CFLAGS\"\n+\t  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <pthread.h>\n+\t\tvoid *g(void *d) { return NULL; }\n+int\n+main ()\n+{\n+pthread_t t; pthread_create(&t,NULL,g,NULL);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  thread_CFLAGS=\"$flag\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\t  if test \"X$thread_CFLAGS\" != Xfailed; then\n+\t    break\n+\t  fi\n+\tdone\n+\tCFLAGS=\"$chktls_save_CFLAGS\"\n+\tif test \"X$thread_CFLAGS\" != Xfailed; then\n+\t  CFLAGS=\"$thread_CFLAGS $chktls_save_CFLAGS\"\n+ \t  \t  \t  \t  \t  \t  if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <pthread.h>\n+\t\t__thread int a;\n+\t\tstatic int *volatile a_in_other_thread;\n+\t\tstatic void *\n+\t\tthread_func (void *arg)\n+\t\t{\n+\t\t  a_in_other_thread = &a;\n+\t\t  return (void *)0;\n+\t\t}\n+int\n+main ()\n+{\n+pthread_t thread;\n+\t\tvoid *thread_retval;\n+\t\tint *volatile a_in_main_thread;\n+\t\ta_in_main_thread = &a;\n+\t\tif (pthread_create (&thread, (pthread_attr_t *)0,\n+\t\t\t\t    thread_func, (void *)0))\n+\t\t  return 0;\n+\t\tif (pthread_join (thread, &thread_retval))\n+\t\t  return 0;\n+\t\treturn (a_in_other_thread == a_in_main_thread);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  gcc_cv_have_tls=yes\n+else\n+  gcc_cv_have_tls=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+\t  CFLAGS=\"$chktls_save_CFLAGS\"\n+\tfi\n+      fi\n+else\n+  gcc_cv_have_tls=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_have_tls\" >&5\n+$as_echo \"$gcc_cv_have_tls\" >&6; }\n+  if test \"$enable_tls $gcc_cv_have_tls\" = \"yes yes\"; then\n+\n+$as_echo \"#define HAVE_TLS 1\" >>confdefs.h\n+\n+  fi\n     ;;\n   *-netbsd* | *-openbsd*)\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'"}, {"sha": "ae5283b7ad378934b409455e7409ac9cac26a20a", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e28878a228b6c4a0872e56d97ac88971b7725/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e28878a228b6c4a0872e56d97ac88971b7725/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=cc1e28878a228b6c4a0872e56d97ac88971b7725", "patch": "@@ -204,6 +204,7 @@ case \"${host}\" in\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n     AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)\n     AC_CHECK_FUNCS(_wfopen)\n+    GCC_CHECK_TLS\n     ;;\n   *-netbsd* | *-openbsd*)\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'"}]}