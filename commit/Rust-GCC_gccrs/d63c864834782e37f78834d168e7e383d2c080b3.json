{"sha": "d63c864834782e37f78834d168e7e383d2c080b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzYzg2NDgzNDc4MmUzN2Y3ODgzNGQxNjhlN2UzODNkMmMwODBiMw==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-08-19T13:42:36Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-08-19T13:42:36Z"}, "message": "Avoid signed left shift undefined behaviour in sext_hwi\n\ngcc/\n\tPR other/67042\n\t* hwint.h (sext_hwi): Switch to unsigned for the left shift, and\n\tconditionalize the whole on __GNUC__.  Add fallback code\n\tdepending neither on undefined nor implementation-defined behaviour.\n\nFrom-SVN: r227008", "tree": {"sha": "7fc210dbbfce746c7c7751a31a39af13ad6a75b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fc210dbbfce746c7c7751a31a39af13ad6a75b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d63c864834782e37f78834d168e7e383d2c080b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63c864834782e37f78834d168e7e383d2c080b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63c864834782e37f78834d168e7e383d2c080b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63c864834782e37f78834d168e7e383d2c080b3/comments", "author": null, "committer": null, "parents": [{"sha": "dce573c43f4e754e2aa0224a67626792b31eaf26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce573c43f4e754e2aa0224a67626792b31eaf26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce573c43f4e754e2aa0224a67626792b31eaf26"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "bae3c94585c7331e7cadc6e589a0516f9b4c1afc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63c864834782e37f78834d168e7e383d2c080b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63c864834782e37f78834d168e7e383d2c080b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d63c864834782e37f78834d168e7e383d2c080b3", "patch": "@@ -1,9 +1,16 @@\n+2015-08-19  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR other/67042\n+\t* hwint.h (sext_hwi): Switch to unsigned for the left shift, and\n+\tconditionalize the whole on __GNUC__.  Add fallback code\n+\tdepending neither on undefined nor implementation-defined behaviour.\n+\n 2015-08-19  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Replace\n \twhitespaces with tab.\n \n-2015-08-13  Florian Weimer  <fweimer@redhat.com>\n+2015-08-19  Florian Weimer  <fweimer@redhat.com>\n \n \t* prj.adb (For_Every_Project_Imported_Context.Recursive_Check_Context):\n \tMove Name_Id_Set instantiation to the Prj package, to avoid trampolines."}, {"sha": "4acbf8e79cad1234ed4ab48043e95bf8bcb6f08c", "filename": "gcc/hwint.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63c864834782e37f78834d168e7e383d2c080b3/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63c864834782e37f78834d168e7e383d2c080b3/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=d63c864834782e37f78834d168e7e383d2c080b3", "patch": "@@ -244,11 +244,27 @@ sext_hwi (HOST_WIDE_INT src, unsigned int prec)\n   if (prec == HOST_BITS_PER_WIDE_INT)\n     return src;\n   else\n+#if defined (__GNUC__)\n     {\n+      /* Take the faster path if the implementation-defined bits it's relying\n+\t on are implemented the way we expect them to be.  Namely, conversion\n+\t from unsigned to signed preserves bit pattern, and right shift of\n+\t a signed value propagates the sign bit.\n+\t We have to convert from signed to unsigned and back, because when left\n+\t shifting signed values, any overflow is undefined behaviour.  */\n       gcc_checking_assert (prec < HOST_BITS_PER_WIDE_INT);\n       int shift = HOST_BITS_PER_WIDE_INT - prec;\n-      return (src << shift) >> shift;\n+      return ((HOST_WIDE_INT) ((unsigned HOST_WIDE_INT) src << shift)) >> shift;\n     }\n+#else\n+    {\n+      /* Fall back to the slower, well defined path otherwise.  */\n+      gcc_checking_assert (prec < HOST_BITS_PER_WIDE_INT);\n+      HOST_WIDE_INT sign_mask = HOST_WIDE_INT_1 << (prec - 1);\n+      HOST_WIDE_INT value_mask = (HOST_WIDE_INT_1U << prec) - HOST_WIDE_INT_1U;\n+      return (((src & value_mask) ^ sign_mask) - sign_mask);\n+    }\n+#endif\n }\n \n /* Zero extend SRC starting from PREC.  */"}]}