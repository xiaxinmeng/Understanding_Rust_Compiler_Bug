{"sha": "eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhNGFkODkyYjFhOGZmMWY0YTYzNzJiNDJiMDk5ZGY1YjZhMWQ2YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-03T04:28:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-03T04:28:25Z"}, "message": "Make sure variable type is determined when var initialized to var.\n\nFrom-SVN: r170643", "tree": {"sha": "c77f49c08b9271ddc951203bd632b0404a669ee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c77f49c08b9271ddc951203bd632b0404a669ee0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/comments", "author": null, "committer": null, "parents": [{"sha": "ba6413bd1854385bfc397d59d69eedf419ef2313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6413bd1854385bfc397d59d69eedf419ef2313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6413bd1854385bfc397d59d69eedf419ef2313"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "a94a70771e146b7b06600168a6dd54d8f89662c2", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a", "patch": "@@ -957,6 +957,15 @@ Var_expression::do_type()\n     gcc_unreachable();\n }\n \n+// Determine the type of a reference to a variable.\n+\n+void\n+Var_expression::do_determine_type(const Type_context*)\n+{\n+  if (this->variable_->is_variable())\n+    this->variable_->var_value()->determine_type();\n+}\n+\n // Something takes the address of this variable.  This means that we\n // may want to move the variable onto the heap.\n "}, {"sha": "20386469f73fd806e28370fbf42b4731c5a44479", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a", "patch": "@@ -915,8 +915,7 @@ class Var_expression : public Expression\n   do_type();\n \n   void\n-  do_determine_type(const Type_context*)\n-  { }\n+  do_determine_type(const Type_context*);\n \n   Expression*\n   do_copy()"}, {"sha": "52370499f45e7d798fabc55251870b9ded4a813f", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a", "patch": "@@ -1730,7 +1730,7 @@ Shortcuts::convert_shortcut(Block* enclosing, Expression** pshortcut)\n   Block* retblock = new Block(enclosing, loc);\n   retblock->set_end_location(loc);\n \n-  Temporary_statement* ts = Statement::make_temporary(Type::make_boolean_type(),\n+  Temporary_statement* ts = Statement::make_temporary(Type::lookup_bool_type(),\n \t\t\t\t\t\t      left, loc);\n   retblock->add_statement(ts);\n \n@@ -2086,7 +2086,7 @@ Build_recover_thunks::function(Named_object* orig_no)\n   ++count;\n   std::string can_recover_name = buf;\n   new_params->push_back(Typed_identifier(can_recover_name,\n-\t\t\t\t\t Type::make_boolean_type(),\n+\t\t\t\t\t Type::lookup_bool_type(),\n \t\t\t\t\t orig_fntype->location()));\n \n   const Typed_identifier_list* orig_results = orig_fntype->results();\n@@ -2222,7 +2222,7 @@ Build_recover_thunks::function(Named_object* orig_no)\n \n   // Add the can_recover argument to the (now) new bindings, and\n   // attach it to any recover statements.\n-  Variable* can_recover_var = new Variable(Type::make_boolean_type(), NULL,\n+  Variable* can_recover_var = new Variable(Type::lookup_bool_type(), NULL,\n \t\t\t\t\t   false, true, false, location);\n   can_recover_no = new_bindings->add_variable(can_recover_name, NULL,\n \t\t\t\t\t      can_recover_var);\n@@ -2273,7 +2273,7 @@ Build_recover_thunks::can_recover_arg(source_location location)\n       Typed_identifier_list* param_types = new Typed_identifier_list();\n       Type* voidptr_type = Type::make_pointer_type(Type::make_void_type());\n       param_types->push_back(Typed_identifier(\"a\", voidptr_type, bloc));\n-      Type* boolean_type = Type::make_boolean_type();\n+      Type* boolean_type = Type::lookup_bool_type();\n       Typed_identifier_list* results = new Typed_identifier_list();\n       results->push_back(Typed_identifier(\"\", boolean_type, bloc));\n       Function_type* fntype = Type::make_function_type(NULL, param_types,\n@@ -3216,7 +3216,7 @@ Variable::Variable(Type* type, Expression* init, bool is_global,\n     is_address_taken_(false), seen_(false), init_is_lowered_(false),\n     type_from_init_tuple_(false), type_from_range_index_(false),\n     type_from_range_value_(false), type_from_chan_element_(false),\n-    is_type_switch_var_(false)\n+    is_type_switch_var_(false), determined_type_(false)\n {\n   gcc_assert(type != NULL || init != NULL);\n   gcc_assert(!is_parameter || init == NULL);\n@@ -3456,6 +3456,10 @@ Variable::type() const\n void\n Variable::determine_type()\n {\n+  if (this->determined_type_)\n+    return;\n+  this->determined_type_ = true;\n+\n   if (this->preinit_ != NULL)\n     this->preinit_->determine_types();\n "}, {"sha": "7a52a51a2c650be92fa63ac22d659ec5584cba96", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a", "patch": "@@ -1307,6 +1307,8 @@ class Variable\n   bool type_from_chan_element_ : 1;\n   // True if this is a variable created for a type switch case.\n   bool is_type_switch_var_ : 1;\n+  // True if we have determined types.\n+  bool determined_type_ : 1;\n };\n \n // A variable which is really the name for a function return value, or"}, {"sha": "c443519b77d0c90adc3e737b9d85e726ae61865a", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=eba4ad892b1a8ff1f4a6372b42b099df5b6a1d6a", "patch": "@@ -970,7 +970,7 @@ Tuple_map_assignment_statement::do_lower(Gogo*, Block* enclosing)\n   param_types->push_back(Typed_identifier(\"val\", pval_type, bloc));\n \n   Typed_identifier_list* ret_types = new Typed_identifier_list();\n-  ret_types->push_back(Typed_identifier(\"\", Type::make_boolean_type(), bloc));\n+  ret_types->push_back(Typed_identifier(\"\", Type::lookup_bool_type(), bloc));\n \n   Function_type* fntype = Type::make_function_type(NULL, param_types,\n \t\t\t\t\t\t   ret_types, bloc);\n@@ -2026,7 +2026,7 @@ Thunk_statement::build_struct(Function_type* fntype)\n       // we add an argument when building recover thunks.  Handle that\n       // here.\n       fields->push_back(Struct_field(Typed_identifier(\"can_recover\",\n-\t\t\t\t\t\t      Type::make_boolean_type(),\n+\t\t\t\t\t\t      Type::lookup_bool_type(),\n \t\t\t\t\t\t      location)));\n     }\n \n@@ -2103,7 +2103,7 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name,\n       // return value, to disable tail call optimizations which will\n       // break the way we check whether recover is permitted.\n       thunk_results = new Typed_identifier_list();\n-      thunk_results->push_back(Typed_identifier(\"\", Type::make_boolean_type(),\n+      thunk_results->push_back(Typed_identifier(\"\", Type::lookup_bool_type(),\n \t\t\t\t\t\tlocation));\n     }\n \n@@ -2135,7 +2135,7 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name,\n \n \t  Typed_identifier_list* result_types = new Typed_identifier_list();\n \t  result_types->push_back(Typed_identifier(\"\",\n-\t\t\t\t\t\t   Type::make_boolean_type(),\n+\t\t\t\t\t\t   Type::lookup_bool_type(),\n \t\t\t\t\t\t   bloc));\n \n \t  Function_type* t = Type::make_function_type(NULL, param_types,"}]}