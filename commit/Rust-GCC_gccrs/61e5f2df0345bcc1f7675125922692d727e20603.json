{"sha": "61e5f2df0345bcc1f7675125922692d727e20603", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFlNWYyZGYwMzQ1YmNjMWY3Njc1MTI1OTIyNjkyZDcyN2UyMDYwMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-13T09:12:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-13T09:12:17Z"}, "message": "Account for the cost of generating loop masks\n\nWe didn't take the cost of generating loop masks into account, and so\ntended to underestimate the cost of loops that need multiple masks.\n\n2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Include\n\tthe cost of generating loop masks.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/mask_struct_store_3.c: Add\n\t-fno-vect-cost-model.\n\t* gcc.target/aarch64/sve/mask_struct_store_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/peel_ind_2.c: Likewise.\n\t* gcc.target/aarch64/sve/peel_ind_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/peel_ind_3.c: Likewise.\n\t* gcc.target/aarch64/sve/peel_ind_3_run.c: Likewise.\n\nFrom-SVN: r278125", "tree": {"sha": "d68f3d4304c78fa570671e44fcc8a57ab66db752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d68f3d4304c78fa570671e44fcc8a57ab66db752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61e5f2df0345bcc1f7675125922692d727e20603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e5f2df0345bcc1f7675125922692d727e20603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e5f2df0345bcc1f7675125922692d727e20603", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e5f2df0345bcc1f7675125922692d727e20603/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6eed64b96d886da2518d86eae5bc0a5ed66cabe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eed64b96d886da2518d86eae5bc0a5ed66cabe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eed64b96d886da2518d86eae5bc0a5ed66cabe0"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "047052835f0ea1d06a77e3d5350a0f767302b180", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61e5f2df0345bcc1f7675125922692d727e20603", "patch": "@@ -1,3 +1,8 @@\n+2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Include\n+\tthe cost of generating loop masks.\n+\n 2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (vect_apply_runtime_profitability_check_p):"}, {"sha": "834c17a6d7f75d660149e6703c80f1914b27946e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61e5f2df0345bcc1f7675125922692d727e20603", "patch": "@@ -1,3 +1,13 @@\n+2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/mask_struct_store_3.c: Add\n+\t-fno-vect-cost-model.\n+\t* gcc.target/aarch64/sve/mask_struct_store_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/peel_ind_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/peel_ind_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/peel_ind_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/peel_ind_3_run.c: Likewise.\n+\n 2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR c++/92206"}, {"sha": "1765d54a483e76984af52b9f6f779b693965c035", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_store_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_3.c?ref=61e5f2df0345bcc1f7675125922692d727e20603", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -fno-vect-cost-model\" } */\n \n #include <stdint.h>\n "}, {"sha": "4dbe0335c72fa6f3d655159ae80cd29b3bb44d36", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_store_3_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_3_run.c?ref=61e5f2df0345bcc1f7675125922692d727e20603", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -fno-vect-cost-model\" } */\n \n #include \"mask_struct_store_3.c\"\n "}, {"sha": "df82d58ea770d45b91aea806e832c9d2f6f9da03", "filename": "gcc/testsuite/gcc.target/aarch64/sve/peel_ind_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_2.c?ref=61e5f2df0345bcc1f7675125922692d727e20603", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* Pick an arbitrary target for which unaligned accesses are more\n    expensive.  */\n-/* { dg-options \"-O3 -msve-vector-bits=256 -mtune=thunderx\" } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 -mtune=thunderx -fno-vect-cost-model\" } */\n \n #define N 512\n #define START 7"}, {"sha": "b9785356d1826effe192f849509ec2c47c6bdae8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/peel_ind_2_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_2_run.c?ref=61e5f2df0345bcc1f7675125922692d727e20603", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n /* { dg-options \"-O3 -mtune=thunderx\" } */\n-/* { dg-options \"-O3 -mtune=thunderx -msve-vector-bits=256\" { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O3 -mtune=thunderx -msve-vector-bits=256 -fno-vect-cost-model\" { target aarch64_sve256_hw } } */\n \n #include \"peel_ind_2.c\"\n "}, {"sha": "1707f02fe92a719cfcf1016c30a0e7fa72eb08fc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/peel_ind_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_3.c?ref=61e5f2df0345bcc1f7675125922692d727e20603", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* Pick an arbitrary target for which unaligned accesses are more\n    expensive.  */\n-/* { dg-options \"-O3 -msve-vector-bits=256 -mtune=thunderx\" } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 -mtune=thunderx -fno-vect-cost-model\" } */\n \n #define N 32\n #define MAX_START 8"}, {"sha": "98389675d79ddbffc14c4e0ef2320a937c9bf1cc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/peel_ind_3_run.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpeel_ind_3_run.c?ref=61e5f2df0345bcc1f7675125922692d727e20603", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n-/* { dg-options \"-O3 -mtune=thunderx\" } */\n-/* { dg-options \"-O3 -mtune=thunderx -msve-vector-bits=256\" { target aarch64_sve256_hw } } */\n+/* { dg-options \"-O3 -mtune=thunderx -fno-vect-cost-model\" } */\n+/* { dg-options \"-O3 -mtune=thunderx -msve-vector-bits=256 -fno-vect-cost-model\" { target aarch64_sve256_hw } } */\n \n #include \"peel_ind_3.c\"\n "}, {"sha": "005fa308911bd3a2eb6a188e6fdf94f985ecb3ab", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e5f2df0345bcc1f7675125922692d727e20603/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=61e5f2df0345bcc1f7675125922692d727e20603", "patch": "@@ -3291,6 +3291,32 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \t\t\t\t  si->kind, si->stmt_info, si->misalign,\n \t\t\t\t  vect_epilogue);\n \t}\n+\n+      /* Calculate how many masks we need to generate.  */\n+      unsigned int num_masks = 0;\n+      rgroup_masks *rgm;\n+      unsigned int num_vectors_m1;\n+      FOR_EACH_VEC_ELT (LOOP_VINFO_MASKS (loop_vinfo), num_vectors_m1, rgm)\n+\tif (rgm->mask_type)\n+\t  num_masks += num_vectors_m1 + 1;\n+      gcc_assert (num_masks > 0);\n+\n+      /* In the worst case, we need to generate each mask in the prologue\n+\t and in the loop body.  One of the loop body mask instructions\n+\t replaces the comparison in the scalar loop, and since we don't\n+\t count the scalar comparison against the scalar body, we shouldn't\n+\t count that vector instruction against the vector body either.\n+\n+\t Sometimes we can use unpacks instead of generating prologue\n+\t masks and sometimes the prologue mask will fold to a constant,\n+\t so the actual prologue cost might be smaller.  However, it's\n+\t simpler and safer to use the worst-case cost; if this ends up\n+\t being the tie-breaker between vectorizing or not, then it's\n+\t probably better not to vectorize.  */\n+      (void) add_stmt_cost (target_cost_data, num_masks, vector_stmt,\n+\t\t\t    NULL, 0, vect_prologue);\n+      (void) add_stmt_cost (target_cost_data, num_masks - 1, vector_stmt,\n+\t\t\t    NULL, 0, vect_body);\n     }\n   else if (npeel < 0)\n     {"}]}