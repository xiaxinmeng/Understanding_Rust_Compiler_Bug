{"sha": "cbec710efcae143355573a17944f821557fb78af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JlYzcxMGVmY2FlMTQzMzU1NTczYTE3OTQ0ZjgyMTU1N2ZiNzhhZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-28T11:07:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-28T11:07:52Z"}, "message": "(expand_shift): If rotating by a constant, try both directions of rotate...\n\n(expand_shift): If rotating by a constant, try both directions of\nrotate; if can't open-code a rotate, do it as a pair of shifts\nfollowed by an IOR.\n\nFrom-SVN: r2971", "tree": {"sha": "5a9ae9474bf0930c30e3e87969569654cc2c1555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a9ae9474bf0930c30e3e87969569654cc2c1555"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbec710efcae143355573a17944f821557fb78af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbec710efcae143355573a17944f821557fb78af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbec710efcae143355573a17944f821557fb78af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbec710efcae143355573a17944f821557fb78af/comments", "author": null, "committer": null, "parents": [{"sha": "85d2e16cf73d8c815b73fe2d4680512a5669a768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d2e16cf73d8c815b73fe2d4680512a5669a768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d2e16cf73d8c815b73fe2d4680512a5669a768"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "0d18c5d068658aab1e5e8182fa58cf004ddb1ad7", "filename": "gcc/expmed.c", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbec710efcae143355573a17944f821557fb78af/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbec710efcae143355573a17944f821557fb78af/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=cbec710efcae143355573a17944f821557fb78af", "patch": "@@ -1535,11 +1535,56 @@ expand_shift (code, mode, shifted, amount, target, unsignedp)\n \t  if (methods == OPTAB_WIDEN)\n \t    continue;\n \t  else if (methods == OPTAB_LIB_WIDEN)\n-\t    methods = OPTAB_LIB;\n+\t    {\n+\t      /* If we are rotating by a constant that is valid and\n+\t\t we have been unable to open-code this by a rotation,\n+\t\t do it as the IOR of two shifts.  I.e., to rotate A\n+\t\t by N bits, compute (A << N) | ((unsigned) A >> (C - N))\n+\t\t where C is the bitsize of A.\n+\n+\t\t It is theoretically possible that the target machine might\n+\t\t not be able to perform either shift and hence we would\n+\t\t be making two libcalls rather than just the one for the\n+\t\t shift (similarly if IOR could not be done).  We will allow\n+\t\t this extremely unlikely lossage to avoid complicating the\n+\t\t code below.  */\n+\n+\t      if (GET_CODE (op1) == CONST_INT && INTVAL (op1) > 0\n+\t\t  && INTVAL (op1) < GET_MODE_BITSIZE (mode))\n+\t\t{\n+\t\t  rtx subtarget = target == shifted ? 0 : target;\n+\t\t  rtx temp1;\n+\t\t  tree other_amount\n+\t\t    = build_int_2 (GET_MODE_BITSIZE (mode) - INTVAL (op1), 0);\n+\n+\t\t  shifted = force_reg (mode, shifted);\n+\n+\t\t  temp = expand_shift (left ? LSHIFT_EXPR : RSHIFT_EXPR,\n+\t\t\t\t       mode, shifted, amount, subtarget, 1);\n+\t\t  temp1 = expand_shift (left ? RSHIFT_EXPR : LSHIFT_EXPR,\n+\t\t\t\t\tmode, shifted, other_amount, 0, 1);\n+\t\t  return expand_binop (mode, ior_optab, temp, temp1, target,\n+\t\t\t\t       unsignedp, methods);\n+\t\t}\n+\t      else\n+\t\tmethods = OPTAB_LIB;\n+\t    }\n \n \t  temp = expand_binop (mode,\n \t\t\t       left ? rotl_optab : rotr_optab,\n \t\t\t       shifted, op1, target, unsignedp, methods);\n+\n+\t  /* If we don't have the rotate, but we are rotating by a constant\n+\t     that is in range, try a rotate in the opposite direction.  */\n+\n+\t  if (temp == 0 && GET_CODE (op1) == CONST_INT\n+\t      && INTVAL (op1) > 0 && INTVAL (op1) < GET_MODE_BITSIZE (mode))\n+\t    temp = expand_binop (mode,\n+\t\t\t\t left ? rotr_optab : rotl_optab,\n+\t\t\t\t shifted, \n+\t\t\t\t GEN_INT (GET_MODE_BITSIZE (mode)\n+\t\t\t\t\t  - INTVAL (op1)),\n+\t\t\t\t target, unsignedp, methods);\n \t}\n       else if (unsignedp)\n \t{"}]}