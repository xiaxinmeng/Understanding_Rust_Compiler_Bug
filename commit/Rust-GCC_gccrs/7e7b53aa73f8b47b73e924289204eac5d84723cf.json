{"sha": "7e7b53aa73f8b47b73e924289204eac5d84723cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3YjUzYWE3M2Y4YjQ3YjczZTkyNDI4OTIwNGVhYzVkODQ3MjNjZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-11-26T01:25:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-11-26T01:25:20Z"}, "message": "re PR middle-end/25022 (failure to transform the unlocked stdio calls)\n\n\tPR middle-end/25022\n\t* builtins.c (expand_builtin_printf, expand_builtin_fprintf,\n\tfold_builtin_fputs, fold_builtin_printf, fold_builtin_fprintf):\n\tLookup the explicit replacement functions for any unlocked\n\tstdio builtin transformations.\n\ntestsuite:\n\t* gcc.c-torture/execute/builtins/fprintf.c,\n\tgcc.c-torture/execute/builtins/fputs-lib.c,\n\tgcc.c-torture/execute/builtins/fputs.c,\n\tgcc.c-torture/execute/builtins/lib/fprintf.c,\n\tgcc.c-torture/execute/builtins/lib/printf.c,\n\tgcc.c-torture/execute/builtins/printf.c: Test the unlocked style.\n\nFrom-SVN: r107535", "tree": {"sha": "3361bfee7bbd0f755ff02c5d8d2bb9e0a58ca2d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3361bfee7bbd0f755ff02c5d8d2bb9e0a58ca2d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e7b53aa73f8b47b73e924289204eac5d84723cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7b53aa73f8b47b73e924289204eac5d84723cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7b53aa73f8b47b73e924289204eac5d84723cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7b53aa73f8b47b73e924289204eac5d84723cf/comments", "author": null, "committer": null, "parents": [{"sha": "8712ef1a398996ea769ae7bf53b391bce1f264c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8712ef1a398996ea769ae7bf53b391bce1f264c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8712ef1a398996ea769ae7bf53b391bce1f264c0"}], "stats": {"total": 118, "additions": 103, "deletions": 15}, "files": [{"sha": "654acf22846a6a6c36f1fd7afbabca57095532a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e7b53aa73f8b47b73e924289204eac5d84723cf", "patch": "@@ -1,3 +1,11 @@\n+2005-11-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR middle-end/25022\n+\t* builtins.c (expand_builtin_printf, expand_builtin_fprintf,\n+\tfold_builtin_fputs, fold_builtin_printf, fold_builtin_fprintf):\n+\tLookup the explicit replacement functions for any unlocked\n+\tstdio builtin transformations.\n+\n 2005-11-25  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.md (\"reload_out<mode>\"): Mark operand 2 as"}, {"sha": "c2866ce512653772ff3a4a7acf6d1a1481b4d1d3", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7e7b53aa73f8b47b73e924289204eac5d84723cf", "patch": "@@ -4843,11 +4843,12 @@ expand_builtin_printf (tree exp, rtx target, enum machine_mode mode,\n \t\t       bool unlocked)\n {\n   tree arglist = TREE_OPERAND (exp, 1);\n-  tree fn_putchar = unlocked\n-\t\t    ? implicit_built_in_decls[BUILT_IN_PUTCHAR_UNLOCKED]\n-\t\t    : implicit_built_in_decls[BUILT_IN_PUTCHAR];\n-  tree fn_puts = unlocked ? implicit_built_in_decls[BUILT_IN_PUTS_UNLOCKED]\n-\t\t\t  : implicit_built_in_decls[BUILT_IN_PUTS];\n+  /* If we're using an unlocked function, assume the other unlocked\n+     functions exist explicitly.  */\n+  tree const fn_putchar = unlocked ? built_in_decls[BUILT_IN_PUTCHAR_UNLOCKED]\n+    : implicit_built_in_decls[BUILT_IN_PUTCHAR];\n+  tree const fn_puts = unlocked ? built_in_decls[BUILT_IN_PUTS_UNLOCKED]\n+    : implicit_built_in_decls[BUILT_IN_PUTS];\n   const char *fmt_str;\n   tree fn, fmt, arg;\n \n@@ -4949,10 +4950,12 @@ expand_builtin_fprintf (tree exp, rtx target, enum machine_mode mode,\n \t\t        bool unlocked)\n {\n   tree arglist = TREE_OPERAND (exp, 1);\n-  tree fn_fputc = unlocked ? implicit_built_in_decls[BUILT_IN_FPUTC_UNLOCKED]\n-\t\t\t   : implicit_built_in_decls[BUILT_IN_FPUTC];\n-  tree fn_fputs = unlocked ? implicit_built_in_decls[BUILT_IN_FPUTS_UNLOCKED]\n-\t\t\t   : implicit_built_in_decls[BUILT_IN_FPUTS];\n+  /* If we're using an unlocked function, assume the other unlocked\n+     functions exist explicitly.  */\n+  tree const fn_fputc = unlocked ? built_in_decls[BUILT_IN_FPUTC_UNLOCKED]\n+    : implicit_built_in_decls[BUILT_IN_FPUTC];\n+  tree const fn_fputs = unlocked ? built_in_decls[BUILT_IN_FPUTS_UNLOCKED]\n+    : implicit_built_in_decls[BUILT_IN_FPUTS];\n   const char *fmt_str;\n   tree fn, fmt, fp, arg;\n \n@@ -9611,9 +9614,11 @@ tree\n fold_builtin_fputs (tree arglist, bool ignore, bool unlocked, tree len)\n {\n   tree fn;\n-  tree fn_fputc = unlocked ? implicit_built_in_decls[BUILT_IN_FPUTC_UNLOCKED]\n+  /* If we're using an unlocked function, assume the other unlocked\n+     functions exist explicitly.  */\n+  tree const fn_fputc = unlocked ? built_in_decls[BUILT_IN_FPUTC_UNLOCKED]\n     : implicit_built_in_decls[BUILT_IN_FPUTC];\n-  tree fn_fwrite = unlocked ? implicit_built_in_decls[BUILT_IN_FWRITE_UNLOCKED]\n+  tree const fn_fwrite = unlocked ? built_in_decls[BUILT_IN_FWRITE_UNLOCKED]\n     : implicit_built_in_decls[BUILT_IN_FWRITE];\n \n   /* If the return value is used, or the replacement _DECL isn't\n@@ -10752,8 +10757,10 @@ fold_builtin_printf (tree fndecl, tree arglist, bool ignore,\n \n   if (fcode == BUILT_IN_PRINTF_UNLOCKED)\n     {\n-      fn_putchar = implicit_built_in_decls[BUILT_IN_PUTCHAR_UNLOCKED];\n-      fn_puts = implicit_built_in_decls[BUILT_IN_PUTS_UNLOCKED];\n+      /* If we're using an unlocked function, assume the other\n+\t unlocked functions exist explicitly.  */\n+      fn_putchar = built_in_decls[BUILT_IN_PUTCHAR_UNLOCKED];\n+      fn_puts = built_in_decls[BUILT_IN_PUTS_UNLOCKED];\n     }\n   else\n     {\n@@ -10908,8 +10915,10 @@ fold_builtin_fprintf (tree fndecl, tree arglist, bool ignore,\n \n   if (fcode == BUILT_IN_FPRINTF_UNLOCKED)\n     {\n-      fn_fputc = implicit_built_in_decls[BUILT_IN_FPUTC_UNLOCKED];\n-      fn_fputs = implicit_built_in_decls[BUILT_IN_FPUTS_UNLOCKED];\n+      /* If we're using an unlocked function, assume the other\n+\t unlocked functions exist explicitly.  */\n+      fn_fputc = built_in_decls[BUILT_IN_FPUTC_UNLOCKED];\n+      fn_fputs = built_in_decls[BUILT_IN_FPUTS_UNLOCKED];\n     }\n   else\n     {"}, {"sha": "99342b2e8716a89e015ab5043228e825c55d5778", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e7b53aa73f8b47b73e924289204eac5d84723cf", "patch": "@@ -1,3 +1,12 @@\n+2005-11-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/execute/builtins/fprintf.c,\n+\tgcc.c-torture/execute/builtins/fputs-lib.c,\n+\tgcc.c-torture/execute/builtins/fputs.c,\n+\tgcc.c-torture/execute/builtins/lib/fprintf.c,\n+\tgcc.c-torture/execute/builtins/lib/printf.c,\n+\tgcc.c-torture/execute/builtins/printf.c: Test the unlocked style.\n+\n 2005-11-25  J\"orn Rennecke <joern.rennecke@st.com>\n \n \t* gcc.dg/20050922-2.c: New test."}, {"sha": "f7db2e0618ee6b48d72fd2f4e4a716e926a36240", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/fprintf.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf.c?ref=7e7b53aa73f8b47b73e924289204eac5d84723cf", "patch": "@@ -6,6 +6,7 @@\n    Written by Kaveh R. Ghazi, 1/7/2001.  */\n \n #include <stdio.h>\n+extern int fprintf_unlocked (FILE *, const char *, ...);\n extern void abort(void);\n \n void\n@@ -15,6 +16,8 @@ main_test (void)\n   const char *const s1 = \"hello world\";\n   const char *const s2[] = { s1, 0 }, *const*s3;\n   \n+  fprintf (*s_ptr, \"\");\n+  fprintf (*s_ptr, \"%s\", \"\");\n   fprintf (*s_ptr, \"%s\", \"hello\");\n   fprintf (*s_ptr, \"%s\", \"\\n\");\n   fprintf (*s_ptr, \"%s\", *s2);\n@@ -49,4 +52,10 @@ main_test (void)\n   /* Test at least one instance of the __builtin_ style.  We do this\n      to ensure that it works and that the prototype is correct.  */\n   __builtin_fprintf (*s_ptr, \"%s\", \"hello world\\n\");\n+  /* Check the unlocked style, these evaluate to nothing to avoid\n+     problems on systems without the unlocked functions.  */\n+  fprintf_unlocked (*s_ptr, \"\");\n+  __builtin_fprintf_unlocked (*s_ptr, \"\");\n+  fprintf_unlocked (*s_ptr, \"%s\", \"\");\n+  __builtin_fprintf_unlocked (*s_ptr, \"%s\", \"\");\n }"}, {"sha": "c2292a7818ca84740a54d895721264b26a90d793", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/fputs-lib.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs-lib.c?ref=7e7b53aa73f8b47b73e924289204eac5d84723cf", "patch": "@@ -16,3 +16,9 @@ fputs(const char *string, FILE *stream)\n   return n > r ? EOF : 0;\n }\n \n+/* Locking stdio doesn't matter for the purposes of this test.  */\n+int\n+fputs_unlocked(const char *string, FILE *stream)\n+{\n+  return fputs (string, stream);\n+}"}, {"sha": "93fa9736449ce4f27c43c9262b2479611063b972", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/fputs.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffputs.c?ref=7e7b53aa73f8b47b73e924289204eac5d84723cf", "patch": "@@ -49,6 +49,10 @@ main_test(void)\n      prototypes are set correctly too.  */\n   __builtin_fputc ('\\n', *s_ptr);\n   __builtin_fwrite (\"hello\\n\", 1, 6, *s_ptr);\n+  /* Check the unlocked style, these evaluate to nothing to avoid\n+     problems on systems without the unlocked functions.  */\n+  fputs_unlocked (\"\", *s_ptr);\n+  __builtin_fputs_unlocked (\"\", *s_ptr);\n \n   /* Check side-effects in conditional expression.  */\n   s_ptr = s_array;"}, {"sha": "a22db41d800e4f94afa44b3911bc42050208e2b6", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/fprintf.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Ffprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Ffprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Ffprintf.c?ref=7e7b53aa73f8b47b73e924289204eac5d84723cf", "patch": "@@ -17,3 +17,19 @@ fprintf (FILE *fp, const char *string, ...)\n   va_end (ap);\n   return r;\n }\n+\n+/* Locking stdio doesn't matter for the purposes of this test.  */\n+int\n+fprintf_unlocked (FILE *fp, const char *string, ...)\n+{\n+  va_list ap;\n+  int r;\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort();\n+#endif\n+  va_start (ap, string);\n+  r = vfprintf (fp, string, ap);\n+  va_end (ap);\n+  return r;\n+}"}, {"sha": "2f8c133177c438f073cccd72fe198d2c9c329161", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/printf.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fprintf.c?ref=7e7b53aa73f8b47b73e924289204eac5d84723cf", "patch": "@@ -18,3 +18,19 @@ printf (const char *string, ...)\n   return r;\n }\n \n+\n+/* Locking stdio doesn't matter for the purposes of this test.  */\n+int\n+printf_unlocked (const char *string, ...)\n+{\n+  va_list ap;\n+  int r;\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort();\n+#endif\n+  va_start (ap, string);\n+  r = vprintf (string, ap);\n+  va_end (ap);\n+  return r;\n+}"}, {"sha": "e493f90b7cd452c9fb57f1b5537c63013d83fee9", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/printf.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7b53aa73f8b47b73e924289204eac5d84723cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fprintf.c?ref=7e7b53aa73f8b47b73e924289204eac5d84723cf", "patch": "@@ -6,6 +6,7 @@\n    Written by Kaveh R. Ghazi, 12/4/2000.  */\n \n extern int printf (const char *, ...);\n+extern int printf_unlocked (const char *, ...);\n extern void abort(void);\n \n void\n@@ -28,8 +29,12 @@ main_test (void)\n   if (s3 != s2+1 || *s3 != 0)\n     abort();\n   \n+  printf (\"\");\n+  printf (\"%s\", \"\");\n   printf (\"\\n\");\n+  printf (\"%s\", \"\\n\");\n   printf (\"hello world\\n\");\n+  printf (\"%s\", \"hello world\\n\");\n   \n   /* Test at least one instance of the __builtin_ style.  We do this\n      to ensure that it works and that the prototype is correct.  */\n@@ -38,4 +43,10 @@ main_test (void)\n      prototypes are set correctly too.  */\n   __builtin_putchar ('\\n');\n   __builtin_puts (\"hello\");\n+  /* Check the unlocked style, these evaluate to nothing to avoid\n+     problems on systems without the unlocked functions.  */\n+  printf_unlocked (\"\");\n+  __builtin_printf_unlocked (\"\");\n+  printf_unlocked (\"%s\", \"\");\n+  __builtin_printf_unlocked (\"%s\", \"\");\n }"}]}