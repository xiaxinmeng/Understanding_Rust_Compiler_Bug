{"sha": "ad5f4de228737897d59cb3e629f934d504029e16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1ZjRkZTIyODczNzg5N2Q1OWNiM2U2MjlmOTM0ZDUwNDAyOWUxNg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-08-31T18:56:46Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-08-31T18:56:46Z"}, "message": "re PR fortran/38282 (Bit intrinsics: ILEN and IBCHNG)\n\n\tPR fortran/38282\n\n\t* f95-lang.c (gfc_init_builtin_functions): Define popcount{,l,ll}\n\tand parity{,l,ll} builtins.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_popcnt_poppar): New function.\n\t(gfc_conv_intrinsic_function): Call above new functions.\n\t* simplify.c (gfc_simplify_popcnt, gfc_simplify_poppar): New\n\tfunctions.\n\t* intrinsic.texi: Document POPCNT and POPPAR.\n\n\t* gfortran.dg/popcnt_poppar_1.F90: New test.\n\t* gfortran.dg/popcnt_poppar_2.F90: New test.\n\nFrom-SVN: r163691", "tree": {"sha": "e145f27a4197eb4dadc10cca9f891e62a370f50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e145f27a4197eb4dadc10cca9f891e62a370f50d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad5f4de228737897d59cb3e629f934d504029e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5f4de228737897d59cb3e629f934d504029e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5f4de228737897d59cb3e629f934d504029e16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5f4de228737897d59cb3e629f934d504029e16/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18dbb8590310fedf2948bf0677d18cddb85fa5c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18dbb8590310fedf2948bf0677d18cddb85fa5c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18dbb8590310fedf2948bf0677d18cddb85fa5c9"}], "stats": {"total": 435, "additions": 432, "deletions": 3}, "files": [{"sha": "cdceae8d02dd39a8617ef0e690c76d61d43b666e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -1,3 +1,14 @@\n+2010-08-31  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/38282\n+\t* f95-lang.c (gfc_init_builtin_functions): Define popcount{,l,ll}\n+\tand parity{,l,ll} builtins.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_popcnt_poppar): New function.\n+\t(gfc_conv_intrinsic_function): Call above new functions.\n+\t* simplify.c (gfc_simplify_popcnt, gfc_simplify_poppar): New\n+\tfunctions.\n+\t* intrinsic.texi: Document POPCNT and POPPAR.\n+\n 2010-08-30  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45456"}, {"sha": "163c0d229ce8d8ac3a3053e9e74726e925030e26", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -938,27 +938,39 @@ gfc_init_builtin_functions (void)\n \t\t          BUILT_IN_SINCOSF, \"sincosf\", false);\n     }\n \n-  /* For LEADZ / TRAILZ.  */\n+  /* For LEADZ, TRAILZ, POPCNT and POPAR.  */\n   ftype = build_function_type_list (integer_type_node,\n                                     unsigned_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_clz\", ftype, BUILT_IN_CLZ,\n \t\t      \"__builtin_clz\", true);\n   gfc_define_builtin (\"__builtin_ctz\", ftype, BUILT_IN_CTZ,\n \t\t      \"__builtin_ctz\", true);\n+  gfc_define_builtin (\"__builtin_parity\", ftype, BUILT_IN_PARITY,\n+\t\t      \"__builtin_parity\", true);\n+  gfc_define_builtin (\"__builtin_popcount\", ftype, BUILT_IN_POPCOUNT,\n+\t\t      \"__builtin_popcount\", true);\n \n   ftype = build_function_type_list (integer_type_node,\n                                     long_unsigned_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_clzl\", ftype, BUILT_IN_CLZL,\n \t\t      \"__builtin_clzl\", true);\n   gfc_define_builtin (\"__builtin_ctzl\", ftype, BUILT_IN_CTZL,\n \t\t      \"__builtin_ctzl\", true);\n+  gfc_define_builtin (\"__builtin_parityl\", ftype, BUILT_IN_PARITYL,\n+\t\t      \"__builtin_parityl\", true);\n+  gfc_define_builtin (\"__builtin_popcountl\", ftype, BUILT_IN_POPCOUNTL,\n+\t\t      \"__builtin_popcountl\", true);\n \n   ftype = build_function_type_list (integer_type_node,\n                                     long_long_unsigned_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_clzll\", ftype, BUILT_IN_CLZLL,\n \t\t      \"__builtin_clzll\", true);\n   gfc_define_builtin (\"__builtin_ctzll\", ftype, BUILT_IN_CTZLL,\n \t\t      \"__builtin_ctzll\", true);\n+  gfc_define_builtin (\"__builtin_parityll\", ftype, BUILT_IN_PARITYLL,\n+\t\t      \"__builtin_parityll\", true);\n+  gfc_define_builtin (\"__builtin_popcountll\", ftype, BUILT_IN_POPCOUNTLL,\n+\t\t      \"__builtin_popcountll\", true);\n \n   /* Other builtin functions we use.  */\n "}, {"sha": "1ee9bd584020f99c6c306c9abbd714b9865af093", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -472,6 +472,8 @@ enum gfc_isym_id\n   GFC_ISYM_PACK,\n   GFC_ISYM_PARITY,\n   GFC_ISYM_PERROR,\n+  GFC_ISYM_POPCNT,\n+  GFC_ISYM_POPPAR,\n   GFC_ISYM_PRECISION,\n   GFC_ISYM_PRESENT,\n   GFC_ISYM_PRODUCT,"}, {"sha": "c14e14d75cdb038f60b668875b9271628be8f7f0", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -2299,6 +2299,20 @@ add_functions (void)\n \n   make_generic (\"parity\", GFC_ISYM_PARITY, GFC_STD_F2008);\n \n+  add_sym_1 (\"popcnt\", GFC_ISYM_POPCNT, CLASS_ELEMENTAL, ACTUAL_NO,\n+\t     BT_INTEGER, di, GFC_STD_F2008,\n+\t     gfc_check_i, gfc_simplify_popcnt, NULL,\n+\t     i, BT_INTEGER, di, REQUIRED);\n+\n+  make_generic (\"popcnt\", GFC_ISYM_POPCNT, GFC_STD_F2008);\n+\n+  add_sym_1 (\"poppar\", GFC_ISYM_POPPAR, CLASS_ELEMENTAL, ACTUAL_NO,\n+\t     BT_INTEGER, di, GFC_STD_F2008,\n+\t     gfc_check_i, gfc_simplify_poppar, NULL,\n+\t     i, BT_INTEGER, di, REQUIRED);\n+\n+  make_generic (\"poppar\", GFC_ISYM_POPPAR, GFC_STD_F2008);\n+\n   add_sym_1 (\"precision\", GFC_ISYM_PRECISION, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_precision, gfc_simplify_precision, NULL,\n \t     x, BT_UNKNOWN, 0, REQUIRED);"}, {"sha": "383ada085d40d0d7cc68afcbf8d7c129d4545501", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -317,6 +317,8 @@ gfc_expr *gfc_simplify_not (gfc_expr *);\n gfc_expr *gfc_simplify_or (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_pack (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_parity (gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_popcnt (gfc_expr *);\n+gfc_expr *gfc_simplify_poppar (gfc_expr *);\n gfc_expr *gfc_simplify_precision (gfc_expr *);\n gfc_expr *gfc_simplify_product (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_radix (gfc_expr *);"}, {"sha": "49b9d53f54004fa7105522f8e6ddcf6314517aab", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 93, "deletions": 2, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -211,6 +211,8 @@ Some basic guidelines for editing this document:\n * @code{PACK}:          PACK,      Pack an array into an array of rank one\n * @code{PARITY}:        PARITY,    Reduction with exclusive OR\n * @code{PERROR}:        PERROR,    Print system error message\n+* @code{POPCNT}:        POPCNT,    Number of bits set\n+* @code{POPPAR}:        POPPAR,    Parity of the number of bits set\n * @code{PRECISION}:     PRECISION, Decimal precision of a real kind\n * @code{PRESENT}:       PRESENT,   Determine whether an optional dummy argument is specified\n * @code{PRODUCT}:       PRODUCT,   Product of array elements\n@@ -6719,7 +6721,7 @@ END PROGRAM\n @end smallexample\n \n @item @emph{See also}:\n-@ref{BIT_SIZE}, @ref{TRAILZ}\n+@ref{BIT_SIZE}, @ref{TRAILZ}, @ref{POPCNT}, @ref{POPPAR}\n @end table\n \n \n@@ -8899,6 +8901,95 @@ end program prec_and_range\n \n \n \n+@node POPCNT\n+@section @code{POPCNT} --- Number of bits set\n+@fnindex POPCNT\n+@cindex binary representation\n+@cindex bits set\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{POPCNT(I)} returns the number of bits set ('1' bits) in the binary\n+representation of @code{I}.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = POPCNT(I)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{I} @tab Shall be of type @code{INTEGER}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER} and of the default integer\n+kind.\n+\n+@item @emph{See also}:\n+@ref{POPPAR}, @ref{LEADZ}, @ref{TRAILZ}\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_population\n+  print *, popcnt(127),       poppar(127)\n+  print *, popcnt(huge(0_4)), poppar(huge(0_4))\n+  print *, popcnt(huge(0_8)), poppar(huge(0_8))\n+end program test_population\n+@end smallexample\n+@end table\n+\n+\n+@node POPPAR\n+@section @code{POPPAR} --- Parity of the number of bits set\n+@fnindex POPPAR\n+@cindex binary representation\n+@cindex parity\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{POPPAR(I)} returns parity of the integer @code{I}, i.e. the parity\n+of the number of bits set ('1' bits) in the binary representation of\n+@code{I}. It is equal to 0 if @code{I} has an even number of bits set,\n+and 1 for an odd number of '1' bits.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = POPPAR(I)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{I} @tab Shall be of type @code{INTEGER}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER} and of the default integer\n+kind.\n+\n+@item @emph{See also}:\n+@ref{POPCNT}, @ref{LEADZ}, @ref{TRAILZ}\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_population\n+  print *, popcnt(127),       poppar(127)\n+  print *, popcnt(huge(0_4)), poppar(huge(0_4))\n+  print *, popcnt(huge(0_8)), poppar(huge(0_8))\n+end program test_population\n+@end smallexample\n+@end table\n+\n+\n+\n @node PRESENT\n @section @code{PRESENT} --- Determine whether an optional dummy argument is specified\n @fnindex PRESENT\n@@ -11228,7 +11319,7 @@ END PROGRAM\n @end smallexample\n \n @item @emph{See also}:\n-@ref{BIT_SIZE}, @ref{LEADZ}\n+@ref{BIT_SIZE}, @ref{LEADZ}, @ref{POPPAR}, @ref{POPCNT}\n @end table\n \n "}, {"sha": "864959798c053c55d2b32d1ba0b2e5dfe7c56aa6", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -4292,6 +4292,47 @@ gfc_simplify_parity (gfc_expr *e, gfc_expr *dim)\n }\n \n \n+gfc_expr *\n+gfc_simplify_popcnt (gfc_expr *e)\n+{\n+  int res, k;\n+  mpz_t x;\n+\n+  if (e->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  k = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n+\n+  /* Convert argument to unsigned, then count the '1' bits.  */\n+  mpz_init_set (x, e->value.integer);\n+  convert_mpz_to_unsigned (x, gfc_integer_kinds[k].bit_size);\n+  res = mpz_popcount (x);\n+  mpz_clear (x);\n+\n+  return gfc_get_int_expr (gfc_default_integer_kind, &e->where, res);\n+}\n+\n+\n+gfc_expr *\n+gfc_simplify_poppar (gfc_expr *e)\n+{\n+  gfc_expr *popcnt;\n+  const char *s;\n+  int i;\n+\n+  if (e->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  popcnt = gfc_simplify_popcnt (e);\n+  gcc_assert (popcnt);\n+\n+  s = gfc_extract_int (popcnt, &i);\n+  gcc_assert (!s);\n+\n+  return gfc_get_int_expr (gfc_default_integer_kind, &e->where, i % 2);\n+}\n+\n+\n gfc_expr *\n gfc_simplify_precision (gfc_expr *e)\n {"}, {"sha": "c0f39b22309fe1aac693b607f67a986e3e164ceb", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -3476,6 +3476,88 @@ gfc_conv_intrinsic_trailz (gfc_se * se, gfc_expr *expr)\n   se->expr = fold_build3 (COND_EXPR, result_type, cond, bit_size, trailz);\n }\n \n+/* Using __builtin_popcount for POPCNT and __builtin_parity for POPPAR;\n+   for types larger than \"long long\", we call the long long built-in for\n+   the lower and higher bits and combine the result.  */\n+ \n+static void\n+gfc_conv_intrinsic_popcnt_poppar (gfc_se * se, gfc_expr *expr, int parity)\n+{\n+  tree arg;\n+  tree arg_type;\n+  tree result_type;\n+  tree func;\n+  int argsize;\n+\n+  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  argsize = TYPE_PRECISION (TREE_TYPE (arg));\n+  result_type = gfc_get_int_type (gfc_default_integer_kind);\n+\n+  /* Which variant of the builtin should we call?  */\n+  if (argsize <= INT_TYPE_SIZE)\n+    {\n+      arg_type = unsigned_type_node;\n+      func = built_in_decls[parity ? BUILT_IN_PARITY : BUILT_IN_POPCOUNT];\n+    }\n+  else if (argsize <= LONG_TYPE_SIZE)\n+    {\n+      arg_type = long_unsigned_type_node;\n+      func = built_in_decls[parity ? BUILT_IN_PARITYL : BUILT_IN_POPCOUNTL];\n+    }\n+  else if (argsize <= LONG_LONG_TYPE_SIZE)\n+    {\n+      arg_type = long_long_unsigned_type_node;\n+      func = built_in_decls[parity ? BUILT_IN_PARITYLL : BUILT_IN_POPCOUNTLL];\n+    }\n+  else\n+    {\n+      /* Our argument type is larger than 'long long', which mean none\n+\t of the POPCOUNT builtins covers it.  We thus call the 'long long'\n+\t variant multiple times, and add the results.  */\n+      tree utype, arg2, call1, call2;\n+\n+      /* For now, we only cover the case where argsize is twice as large\n+\t as 'long long'.  */\n+      gcc_assert (argsize == 2 * LONG_LONG_TYPE_SIZE);\n+\n+      func = built_in_decls[parity ? BUILT_IN_PARITYLL : BUILT_IN_POPCOUNTLL];\n+\n+      /* Convert it to an integer, and store into a variable.  */\n+      utype = gfc_build_uint_type (argsize);\n+      arg = fold_convert (utype, arg);\n+      arg = gfc_evaluate_now (arg, &se->pre);\n+\n+      /* Call the builtin twice.  */\n+      call1 = build_call_expr_loc (input_location, func, 1,\n+\t\t\t\t   fold_convert (long_long_unsigned_type_node,\n+\t\t\t\t\t\t arg));\n+\n+      arg2 = fold_build2 (RSHIFT_EXPR, utype, arg,\n+\t\t\t  build_int_cst (utype, LONG_LONG_TYPE_SIZE));\n+      call2 = build_call_expr_loc (input_location, func, 1,\n+\t\t\t\t   fold_convert (long_long_unsigned_type_node,\n+\t\t\t\t\t\t arg2));\n+\t\t\t  \n+      /* Combine the results.  */\n+      if (parity)\n+\tse->expr = fold_build2 (BIT_XOR_EXPR, result_type, call1, call2);\n+      else\n+\tse->expr = fold_build2 (PLUS_EXPR, result_type, call1, call2);\n+\n+      return;\n+    }\n+\n+  /* Convert the actual argument twice: first, to the unsigned type of the\n+     same size; then, to the proper argument type for the built-in\n+     function.  */\n+  arg = fold_convert (gfc_build_uint_type (argsize), arg);\n+  arg = fold_convert (arg_type, arg);\n+\n+  se->expr = fold_convert (result_type,\n+\t\t\t   build_call_expr_loc (input_location, func, 1, arg));\n+}\n+\n+\n /* Process an intrinsic with unspecified argument-types that has an optional\n    argument (which could be of type character), e.g. EOSHIFT.  For those, we\n    need to append the string length of the optional argument if it is not\n@@ -5418,6 +5500,14 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_trailz (se, expr);\n       break;\n \n+    case GFC_ISYM_POPCNT:\n+      gfc_conv_intrinsic_popcnt_poppar (se, expr, 0);\n+      break;\n+\n+    case GFC_ISYM_POPPAR:\n+      gfc_conv_intrinsic_popcnt_poppar (se, expr, 1);\n+      break;\n+\n     case GFC_ISYM_LBOUND:\n       gfc_conv_intrinsic_bound (se, expr, 0);\n       break;"}, {"sha": "a42dfe0559e6560d6fed3688c97fc9c4a2f09a7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -1,3 +1,9 @@\n+2010-08-31  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/38282\n+\t* gfortran.dg/popcnt_poppar_1.F90: New test.\n+\t* gfortran.dg/popcnt_poppar_2.F90: New test.\n+\n 2010-08-31  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/volatile-2.c: Require nonpic target."}, {"sha": "3b7322b94fa924b4481369de09ed6feb122c54e6", "filename": "gcc/testsuite/gfortran.dg/popcnt_poppar_1.F90", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ftestsuite%2Fgfortran.dg%2Fpopcnt_poppar_1.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ftestsuite%2Fgfortran.dg%2Fpopcnt_poppar_1.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpopcnt_poppar_1.F90?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -0,0 +1,121 @@\n+! { dg-do run }\n+! { dg-options \"-ffree-line-length-none\" }\n+\n+interface runtime_popcnt\n+  procedure runtime_popcnt_i1\n+  procedure runtime_popcnt_i2\n+  procedure runtime_popcnt_i4\n+  procedure runtime_popcnt_i8\n+end interface\n+\n+interface runtime_poppar\n+  procedure runtime_poppar_i1\n+  procedure runtime_poppar_i2\n+  procedure runtime_poppar_i4\n+  procedure runtime_poppar_i8\n+end interface\n+\n+#define CHECK(val,res) \\\n+  if (popcnt(val) /= res) call abort ; \\\n+  if (runtime_popcnt(val) /= res) call abort\n+\n+#define CHECK2(val) \\\n+  if (poppar(val) /= modulo(popcnt(val),2)) call abort ; \\\n+  if (runtime_poppar(val) /= poppar(val)) call abort\n+\n+  CHECK(0_1, 0)\n+  CHECK(0_2, 0)\n+  CHECK(0_4, 0)\n+  CHECK(0_8, 0)\n+\n+  CHECK(1_1, 1)\n+  CHECK(1_2, 1)\n+  CHECK(1_4, 1)\n+  CHECK(1_8, 1)\n+\n+  CHECK(-1_1,8)\n+  CHECK(-1_2,16)\n+  CHECK(-1_4,32)\n+  CHECK(-1_8,64)\n+\n+  CHECK(-8_1,8-3)\n+  CHECK(-8_2,16-3)\n+  CHECK(-8_4,32-3)\n+  CHECK(-8_8,64-3)\n+\n+  CHECK(huge(0_1), 8-1)\n+  CHECK(huge(0_2), 16-1)\n+  CHECK(huge(0_4), 32-1)\n+  CHECK(huge(0_8), 64-1)\n+\n+  CHECK(-huge(0_1), 2)\n+  CHECK(-huge(0_2), 2)\n+  CHECK(-huge(0_4), 2)\n+  CHECK(-huge(0_8), 2)\n+\n+  CHECK2(0_1)\n+  CHECK2(0_2)\n+  CHECK2(0_4)\n+  CHECK2(0_8)\n+\n+  CHECK2(17_1)\n+  CHECK2(17_2)\n+  CHECK2(17_4)\n+  CHECK2(17_8)\n+\n+  CHECK2(-17_1)\n+  CHECK2(-17_2)\n+  CHECK2(-17_4)\n+  CHECK2(-17_8)\n+\n+  CHECK2(huge(0_1))\n+  CHECK2(huge(0_2))\n+  CHECK2(huge(0_4))\n+  CHECK2(huge(0_8))\n+\n+  CHECK2(-huge(0_1))\n+  CHECK2(-huge(0_2))\n+  CHECK2(-huge(0_4))\n+  CHECK2(-huge(0_8))\n+\n+contains\n+  integer function runtime_popcnt_i1 (i) result(res)\n+    integer(kind=1), intent(in) :: i\n+    res = popcnt(i)\n+  end function\n+\n+  integer function runtime_popcnt_i2 (i) result(res)\n+    integer(kind=2), intent(in) :: i\n+    res = popcnt(i)\n+  end function\n+\n+  integer function runtime_popcnt_i4 (i) result(res)\n+    integer(kind=4), intent(in) :: i\n+    res = popcnt(i)\n+  end function\n+\n+  integer function runtime_popcnt_i8 (i) result(res)\n+    integer(kind=8), intent(in) :: i\n+    res = popcnt(i)\n+  end function\n+\n+  integer function runtime_poppar_i1 (i) result(res)\n+    integer(kind=1), intent(in) :: i\n+    res = poppar(i)\n+  end function\n+\n+  integer function runtime_poppar_i2 (i) result(res)\n+    integer(kind=2), intent(in) :: i\n+    res = poppar(i)\n+  end function\n+\n+  integer function runtime_poppar_i4 (i) result(res)\n+    integer(kind=4), intent(in) :: i\n+    res = poppar(i)\n+  end function\n+\n+  integer function runtime_poppar_i8 (i) result(res)\n+    integer(kind=8), intent(in) :: i\n+    res = poppar(i)\n+  end function\n+end"}, {"sha": "fb984e2f55a0f6d52d86da52911f5a79afac0b89", "filename": "gcc/testsuite/gfortran.dg/popcnt_poppar_2.F90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ftestsuite%2Fgfortran.dg%2Fpopcnt_poppar_2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f4de228737897d59cb3e629f934d504029e16/gcc%2Ftestsuite%2Fgfortran.dg%2Fpopcnt_poppar_2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpopcnt_poppar_2.F90?ref=ad5f4de228737897d59cb3e629f934d504029e16", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+! { dg-options \"-ffree-line-length-none\" }\n+! { dg-require-effective-target fortran_integer_16 }\n+\n+#define CHECK(val,res) \\\n+  if (popcnt(val) /= res) call abort ; \\\n+  if (runtime_popcnt(val) /= res) call abort\n+\n+#define CHECK2(val) \\\n+  if (poppar(val) /= modulo(popcnt(val),2)) call abort ; \\\n+  if (runtime_poppar(val) /= poppar(val)) call abort\n+\n+  CHECK(0_16, 0)\n+  CHECK(1_16, 1)\n+\n+  CHECK(-1_16,128)\n+  CHECK(-8_16,128-3)\n+\n+  CHECK(huge(0_16), 128-1)\n+\n+  CHECK(-huge(0_16), 2)\n+\n+  CHECK2(0_16)\n+  CHECK2(17_16)\n+  CHECK2(-17_16)\n+  CHECK2(huge(0_16))\n+  CHECK2(-huge(0_16))\n+\n+contains\n+  integer function runtime_popcnt (i) result(res)\n+    integer(kind=16), intent(in) :: i\n+    res = popcnt(i)\n+  end function\n+\n+  integer function runtime_poppar (i) result(res)\n+    integer(kind=16), intent(in) :: i\n+    res = poppar(i)\n+  end function\n+end"}]}