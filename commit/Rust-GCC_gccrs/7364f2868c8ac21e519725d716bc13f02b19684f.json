{"sha": "7364f2868c8ac21e519725d716bc13f02b19684f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2NGYyODY4YzhhYzIxZTUxOTcyNWQ3MTZiYzEzZjAyYjE5Njg0Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-16T09:58:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-16T09:58:54Z"}, "message": "basic_string.h (stod, [...]): Declare in C++0x mode.\n\n2008-06-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/basic_string.h (stod, stof, stoi, stol, stold, stoll,\n\tstoul, stoull, to_string, to_wstring): Declare in C++0x mode.\n\t* src/string_conversions.cc: Add.\n\t* src/Makefile.am: Update.\n\t* config/abi/pre/gnu.ver: Adjust exports.\n\t* src/Makefile.in: Regenerate.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stod.cc:\n\tNew.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stof.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoi.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stol.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stold.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoll.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoul.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoull.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/\n\tto_string.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstod.cc: New.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstof.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstoi.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstol.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstold.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstoll.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstoul.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tstoull.cc: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tto_wstring.cc: Likewise.\n\nFrom-SVN: r136841", "tree": {"sha": "8685abf3ce961673fcc9761e7fded8aeef7e1b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8685abf3ce961673fcc9761e7fded8aeef7e1b6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7364f2868c8ac21e519725d716bc13f02b19684f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7364f2868c8ac21e519725d716bc13f02b19684f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7364f2868c8ac21e519725d716bc13f02b19684f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7364f2868c8ac21e519725d716bc13f02b19684f/comments", "author": null, "committer": null, "parents": [{"sha": "1b4b3957d77c7d12df446508b42f82bdaf8da8c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4b3957d77c7d12df446508b42f82bdaf8da8c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4b3957d77c7d12df446508b42f82bdaf8da8c8"}], "stats": {"total": 2935, "additions": 2927, "deletions": 8}, "files": [{"sha": "1b135fe6043c0793c62fa6d69e02f5e5b4ed861c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -1,3 +1,48 @@\n+2008-06-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/basic_string.h (stod, stof, stoi, stol, stold, stoll,\n+\tstoul, stoull, to_string, to_wstring): Declare in C++0x mode.\n+\t* src/string_conversions.cc: Add.\n+\t* src/Makefile.am: Update.\n+\t* config/abi/pre/gnu.ver: Adjust exports.\n+\t* src/Makefile.in: Regenerate.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stod.cc:\n+\tNew.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stof.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoi.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stol.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stold.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoll.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoul.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoull.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/\n+\tto_string.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstod.cc: New.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstof.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstoi.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstol.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstold.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstoll.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstoul.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tstoull.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tto_wstring.cc: Likewise.\n+\n 2008-06-15  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* include/Makefile.am: Remove trailing white space, fix typo."}, {"sha": "9bec6f56cb3c16bdad582cf7e0c756f78d1ee745", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -122,7 +122,8 @@ GLIBCXX_3.4 {\n #     std::string\n       std::strstream*;\n       std::strstreambuf*;\n-      std::t[a-q]*;\n+#     std::t[a-q]*;\n+      std::t[a-n]*;\n       std::tr1::h[^a]*;\n       std::t[s-z]*;\n       std::[A-Zu-z]*;\n@@ -895,6 +896,11 @@ GLIBCXX_3.4.11 {\n     # char16_t and char32_t\n     _ZNSt14numeric_limitsIu8char*;\n \n+    # string conversions\n+    _ZSt?sto*;\n+    _ZSt9to_string*;\n+    _ZSt10to_wstring*;    \n+\n } GLIBCXX_3.4.10;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "99ef4bb7b4093e968d23f563034adefd10a8c3d2", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -2473,6 +2473,42 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    wchar_t __delim);\n #endif  \n \n+\n+#if (defined(__GXX_EXPERIMENTAL_CXX0X__) && defined(_GLIBCXX_USE_C99))\n+\n+  // 21.4 Numeric Conversions [string.conversions].\n+  int stoi(const string&, size_t* = 0, int = 10);\n+  long stol(const string&, size_t* = 0, int = 10);\n+  unsigned long stoul(const string&, size_t* = 0, int = 10);\n+  long long stoll(const string&, size_t* = 0, int = 10);\n+  unsigned long long stoull(const string&, size_t* = 0, int = 10);\n+\n+  float stof(const string&, size_t* = 0);\n+  double stod(const string&, size_t* = 0);\n+  long double stold(const string&, size_t* = 0);\n+\n+  string to_string(long long);\n+  string to_string(unsigned long long);\n+  string to_string(long double);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  int stoi(const wstring&, size_t* = 0, int = 10);\n+  long stol(const wstring&, size_t* = 0, int = 10);\n+  unsigned long stoul(const wstring&, size_t* = 0, int = 10);\n+  long long stoll(const wstring&, size_t* = 0, int = 10);\n+  unsigned long long stoull(const wstring&, size_t* = 0, int = 10);\n+\n+  float stof(const wstring&, size_t* = 0);\n+  double stod(const wstring&, size_t* = 0);\n+  long double stold(const wstring&, size_t* = 0);\n+\n+  wstring to_wstring(long long);\n+  wstring to_wstring(unsigned long long);\n+  wstring to_wstring(long double);\n+#endif\n+\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _BASIC_STRING_H */"}, {"sha": "fa1e7c8d4278a19cfc54ee90adffbd333e1cd168", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -182,6 +182,7 @@ sources = \\\n \tstreambuf-inst.cc \\\n \tstreambuf.cc \\\n \tstring-inst.cc \\\n+\tstring_conversions.cc \\\n \tvalarray-inst.cc \\\n \twlocale-inst.cc \\\n \twstring-inst.cc \\\n@@ -278,6 +279,11 @@ atomic.lo: atomic.cc\n atomic.o: atomic.cc\n \t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n \n+string_conversions.lo: string_conversions.cc\n+\t$(LTCXXCOMPILE) -x c++ -std=gnu++0x -c $<\n+string_conversions.o: string_conversions.cc\n+\t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n+\n if GLIBCXX_LDBL_COMPAT\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64."}, {"sha": "7cf3f90414e8fd9a4a83155c7dc26f0993ff6093", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -83,11 +83,12 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tallocator-inst.cc concept-inst.cc fstream-inst.cc ext-inst.cc \\\n \tios-inst.cc iostream-inst.cc istream-inst.cc istream.cc \\\n \tlocale-inst.cc misc-inst.cc ostream-inst.cc sstream-inst.cc \\\n-\tstreambuf-inst.cc streambuf.cc string-inst.cc valarray-inst.cc \\\n-\twlocale-inst.cc wstring-inst.cc mutex.cc condition_variable.cc \\\n-\tatomicity.cc codecvt_members.cc collate_members.cc \\\n-\tctype_members.cc messages_members.cc monetary_members.cc \\\n-\tnumeric_members.cc time_members.cc basic_file.cc c++locale.cc \\\n+\tstreambuf-inst.cc streambuf.cc string-inst.cc \\\n+\tstring_conversions.cc valarray-inst.cc wlocale-inst.cc \\\n+\twstring-inst.cc mutex.cc condition_variable.cc atomicity.cc \\\n+\tcodecvt_members.cc collate_members.cc ctype_members.cc \\\n+\tmessages_members.cc monetary_members.cc numeric_members.cc \\\n+\ttime_members.cc basic_file.cc c++locale.cc \\\n \tcompatibility-ldbl.cc parallel_list.cc parallel_settings.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n@@ -108,8 +109,8 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tfstream-inst.lo ext-inst.lo ios-inst.lo iostream-inst.lo \\\n \tistream-inst.lo istream.lo locale-inst.lo misc-inst.lo \\\n \tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n-\tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n-\twstring-inst.lo mutex.lo condition_variable.lo \\\n+\tstring-inst.lo string_conversions.lo valarray-inst.lo \\\n+\twlocale-inst.lo wstring-inst.lo mutex.lo condition_variable.lo \\\n \t$(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n@@ -418,6 +419,7 @@ sources = \\\n \tstreambuf-inst.cc \\\n \tstreambuf.cc \\\n \tstring-inst.cc \\\n+\tstring_conversions.cc \\\n \tvalarray-inst.cc \\\n \twlocale-inst.cc \\\n \twstring-inst.cc \\\n@@ -872,6 +874,11 @@ atomic.lo: atomic.cc\n atomic.o: atomic.cc\n \t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n \n+string_conversions.lo: string_conversions.cc\n+\t$(LTCXXCOMPILE) -x c++ -std=gnu++0x -c $<\n+string_conversions.o: string_conversions.cc\n+\t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n+\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64.\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc"}, {"sha": "627ddfad4132db400a9d9c8a1ef9c1f105f296d0", "filename": "libstdc++-v3/src/string_conversions.cc", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Fsrc%2Fstring_conversions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Fsrc%2Fstring_conversions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring_conversions.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,195 @@\n+// String Conversions -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <string>\n+#include <limits>\n+#include <cerrno>\n+#include <cstdlib>\n+\n+#ifdef _GLIBCXX_USE_C99\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  // Helper for all the sto* functions.\n+  template<typename _TRet, typename _Ret = _TRet, typename _CharT,\n+\t   typename... _Base>\n+    inline _Ret\n+    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),\n+\t   const char* __name, const basic_string<_CharT>& __str,\n+\t   size_t* __idx, _Base... __base)\n+    {\n+      _Ret __ret;\n+\n+      _CharT* __endptr;\n+      errno = 0;\n+      const _TRet __tmp = __convf(__str.c_str(), &__endptr, __base...);\n+\n+      if (__endptr == __str.c_str())\n+\t__throw_invalid_argument(__name);\n+      else if (errno == ERANGE\n+\t       || (__are_same<_Ret, int>::__value\n+\t\t   && (__tmp < numeric_limits<_Ret>::min()\n+\t\t       || __tmp > numeric_limits<_Ret>::max())))\n+\t__throw_out_of_range(__name);\n+      else\n+\t__ret = __tmp;\n+\n+      if (__idx)\n+\t*__idx = __endptr - __str.c_str();\n+\n+      return __ret;\n+    }\n+\n+\n+  int\n+  stoi(const string& __str, size_t* __idx, int __base)\n+  { return std::__stoa<long, int>(&std::strtol, \"stoi\", __str,\n+\t\t\t\t  __idx, __base); }\n+\n+  long\n+  stol(const string& __str, size_t* __idx, int __base)\n+  { return std::__stoa(&std::strtol, \"stol\", __str, __idx, __base); }\n+\n+  unsigned long\n+  stoul(const string& __str, size_t* __idx, int __base)\n+  { return std::__stoa(&std::strtoul, \"stoul\", __str, __idx, __base); }\n+\n+  long long\n+  stoll(const string& __str, size_t* __idx, int __base)\n+  { return std::__stoa(&std::strtoll, \"stoll\", __str, __idx, __base); }\n+\n+  unsigned long long\n+  stoull(const string& __str, size_t* __idx, int __base)\n+  { return std::__stoa(&std::strtoull, \"stoull\", __str, __idx, __base); }\n+\n+  // NB: strtof vs strtod.\n+  float\n+  stof(const string& __str, size_t* __idx)\n+  { return std::__stoa(&std::strtof, \"stof\", __str, __idx); }\n+\n+  double\n+  stod(const string& __str, size_t* __idx)\n+  { return std::__stoa(&std::strtod, \"stod\", __str, __idx); }\n+\n+  long double\n+  stold(const string& __str, size_t* __idx)\n+  { return std::__stoa(&std::strtold, \"stold\", __str, __idx); }\n+\n+  string\n+  to_string(long long __val)\n+  {\n+    // XXX Eventually the result will be constructed in place in\n+    // the C++0x string, likely with the help of internal hooks.\n+    const int __n = 4 * sizeof(long long);\n+    char* __s = static_cast<char*>(__builtin_alloca(__n));\n+    return string(__s, __s + std::snprintf(__s, __n, \"%lld\", __val));\n+  }\n+\n+  string\n+  to_string(unsigned long long __val)\n+  {\n+    const int __n = 4 * sizeof(unsigned long long);\n+    char* __s = static_cast<char*>(__builtin_alloca(__n));\n+    return string(__s, __s + std::snprintf(__s, __n, \"%llu\", __val));\n+  }\n+\n+  string\n+  to_string(long double __val)\n+  {\n+    const int __n = numeric_limits<long double>::max_exponent10 + 20;\n+    char* __s = static_cast<char*>(__builtin_alloca(__n));\n+    return string(__s, __s + std::snprintf(__s, __n, \"%Lf\", __val));\n+  }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  int \n+  stoi(const wstring& __str, size_t* __idx, int __base)\n+  { return std::__stoa<long, int>(&std::wcstol, \"stoi\", __str,\n+\t\t\t\t  __idx, __base); }\n+\n+  long \n+  stol(const wstring& __str, size_t* __idx, int __base)\n+  { return std::__stoa(&std::wcstol, \"stol\", __str, __idx, __base); }\n+\n+  unsigned long\n+  stoul(const wstring& __str, size_t* __idx, int __base)\n+  { return std::__stoa(&std::wcstoul, \"stoul\", __str, __idx, __base); }\n+\n+  long long\n+  stoll(const wstring& __str, size_t* __idx, int __base)\n+  { return std::__stoa(&std::wcstoll, \"stoll\", __str, __idx, __base); }\n+\n+  unsigned long long\n+  stoull(const wstring& __str, size_t* __idx, int __base)\n+  { return std::__stoa(&std::wcstoull, \"stoull\", __str, __idx, __base); }\n+\n+  // NB: wcstof vs wcstod.\n+  float\n+  stof(const wstring& __str, size_t* __idx)\n+  { return std::__stoa(&std::wcstof, \"stof\", __str, __idx); }\n+\n+  double\n+  stod(const wstring& __str, size_t* __idx)\n+  { return std::__stoa(&std::wcstod, \"stod\", __str, __idx); }\n+\n+  long double\n+  stold(const wstring& __str, size_t* __idx)\n+  { return std::__stoa(&std::wcstold, \"stold\", __str, __idx); }\n+\n+  wstring\n+  to_wstring(long long __val)\n+  {\n+    const int __n = 4 * sizeof(long long);\n+    wchar_t* __s = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t)\n+\t\t\t\t\t\t\t  * __n));\n+    return wstring(__s, __s + std::swprintf(__s, __n, L\"%lld\", __val));\n+  }\n+\n+  wstring\n+  to_wstring(unsigned long long __val)\n+  {\n+    const int __n = 4 * sizeof(unsigned long long);\n+    wchar_t* __s = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t)\n+\t\t\t\t\t\t\t  * __n));\n+    return wstring(__s, __s + std::swprintf(__s, __n, L\"%llu\", __val));\n+  }\n+\n+  wstring\n+  to_wstring(long double __val)\n+  {\n+    const int __n = numeric_limits<long double>::max_exponent10 + 20;\n+    wchar_t* __s = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t)\n+\t\t\t\t\t\t\t  * __n));\n+    return wstring(__s, __s + std::swprintf(__s, __n, L\"%Lf\", __val));\n+  }\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "f26a865684d2fcab8a9861f4d07736b6e03f99e7", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stod.cc", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstod.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,139 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      string one;\n+      stod(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      string one(\"a\");\n+      stod(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  double d1 = 0.0;\n+  size_t idx1 = 0;\n+  try\n+    {\n+      string one(\"2.0a\");\n+      d1 = stod(one, &idx1);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( d1 == 2.0 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      string one(\"1e\");\n+      one.append(2 * numeric_limits<double>::max_exponent10, '9');\n+      d1 = stod(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( d1 == 2.0 );\n+\n+  try\n+    {\n+      long double ld0 = numeric_limits<double>::max() / 100.0;\n+      string one(to_string(ld0));\n+      stod(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+\n+  if (sizeof(double) < sizeof(long double))\n+    {\n+      test = false;\n+      d1 = -1.0;\n+      try\n+\t{\n+\t  long double ld1 = numeric_limits<double>::max();\n+\t  ld1 *= 100.0;\n+\t  string one(to_string(ld1));\n+\t  d1 = stod(one);\n+\t}\n+      catch(std::out_of_range)\n+\t{\n+\t  test = true;\n+\t}\n+      catch(...)\n+\t{\n+\t}\n+      VERIFY( test );\n+      VERIFY( d1 == -1.0 );\n+    }\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "515769e18f76f6d2429cb75f7ed06f68e614b5fe", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stof.cc", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstof.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,139 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      string one;\n+      stof(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      string one(\"a\");\n+      stof(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  float f1 = 0.0f;\n+  size_t idx1 = 0;\n+  try\n+    {\n+      string one(\"2.0a\");\n+      f1 = stof(one, &idx1);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( f1 == 2.0f );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      string one(\"1e\");\n+      one.append(2 * numeric_limits<float>::max_exponent10, '9');\n+      f1 = stof(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( f1 == 2.0f );\n+\n+  try\n+    {\n+      long double ld0 = numeric_limits<float>::max() / 100.0;\n+      string one(to_string(ld0));\n+      stof(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+\n+  if (sizeof(float) < sizeof(long double))\n+    {\n+      test = false;\n+      f1 = -1.0f;\n+      try\n+\t{\n+\t  long double ld1 = numeric_limits<float>::max();\n+\t  ld1 *= 100.0;\n+\t  string one(to_string(ld1));\n+\t  f1 = stof(one);\n+\t}\n+      catch(std::out_of_range)\n+\t{\n+\t  test = true;\n+\t}\n+      catch(...)\n+\t{\n+\t}\n+      VERIFY( test );\n+      VERIFY( f1 == -1.0f );\n+    }\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6f1efd0f4b93ceb916b805752ba85129f46405cb", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stoi.cc", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoi.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,205 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      string one;\n+      stoi(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      string one(\"a\");\n+      stoi(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  int i1 = 0;\n+  try\n+    {\n+      string one(\"a\");\n+      i1 = stoi(one, 0, 16);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 10 );\n+\n+  size_t idx1 = 0;\n+  try\n+    {\n+      string one(\"78\");\n+      i1 = stoi(one, &idx1, 8);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 7 );\n+  VERIFY( idx1 = 1 );\n+\n+  try\n+    {\n+      string one(\"10112\");\n+      i1 = stoi(one, &idx1, 2);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 11 );\n+  VERIFY( idx1 == 4 );\n+\n+  try\n+    {\n+      string one(\"0XE\");\n+      i1 = stoi(one, &idx1, 0);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 14 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      string one(1000, '9');\n+      i1 = stoi(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 14 );\n+\n+  try\n+    {\n+      i1 = numeric_limits<int>::max();\n+      string one(to_string((long long)i1));\n+      i1 = stoi(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == numeric_limits<int>::max() );\n+\n+  try\n+    {\n+      i1 = numeric_limits<int>::min();\n+      string one(to_string((long long)i1));\n+      i1 = stoi(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == numeric_limits<int>::min() );\n+\n+  test = false;\n+  i1 = 1;\n+  try\n+    {\n+      long long ll0 = numeric_limits<int>::max();\n+      ++ll0;\n+      string one(to_string(ll0));\n+      i1 = stoi(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 1 );\n+\n+  test = false;\n+  try\n+    {\n+      long long ll1 = numeric_limits<int>::min();\n+      --ll1;\n+      string one(to_string(ll1));\n+      i1 = stoi(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 1 );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "683063fadf0ecd7da2727407eb946ef8e46e4c00", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stol.cc", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstol.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstol.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstol.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,168 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      string one;\n+      stol(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      string one(\"a\");\n+      stol(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  long l1 = 0;\n+  try\n+    {\n+      string one(\"a\");\n+      l1 = stol(one, 0, 16);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == 10 );\n+\n+  size_t idx1 = 0;\n+  try\n+    {\n+      string one(\"78\");\n+      l1 = stol(one, &idx1, 8);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == 7 );\n+  VERIFY( idx1 = 1 );\n+\n+  try\n+    {\n+      string one(\"10112\");\n+      l1 = stol(one, &idx1, 2);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == 11 );\n+  VERIFY( idx1 == 4 );\n+\n+  try\n+    {\n+      string one(\"0XE\");\n+      l1 = stol(one, &idx1, 0);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == 14 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      string one(1000, '9');\n+      l1 = stol(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == 14 );\n+\n+  try\n+    {\n+      l1 = numeric_limits<long>::max();\n+      string one(to_string((long long)l1));\n+      l1 = stol(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == numeric_limits<long>::max() );\n+\n+  try\n+    {\n+      l1 = numeric_limits<long>::min();\n+      string one(to_string((long long)l1));\n+      l1 = stol(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == numeric_limits<long>::min() );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3a5d73a954b73da4353b55d183f3b7986b6324e4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stold.cc", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstold.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,117 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      string one;\n+      stold(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      string one(\"a\");\n+      stold(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  long double ld1 = 0.0L;\n+  size_t idx1 = 0;\n+  try\n+    {\n+      string one(\"2.0a\");\n+      ld1 = stold(one, &idx1);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ld1 == 2.0L );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      string one(\"1e\");\n+      one.append(2 * numeric_limits<long double>::max_exponent10, '9');\n+      ld1 = stold(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( ld1 == 2.0L );\n+\n+  try\n+    {\n+      long double ld0 = numeric_limits<long double>::max() / 100.0L;\n+      string one(to_string(ld0));\n+      stold(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6d922156281483edcf7a186c227843531d920a70", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stoll.cc", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoll.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoll.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoll.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,168 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      string one;\n+      stoll(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      string one(\"a\");\n+      stoll(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  long long ll1 = 0;\n+  try\n+    {\n+      string one(\"a\");\n+      ll1 = stoll(one, 0, 16);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == 10 );\n+\n+  size_t idx1 = 0;\n+  try\n+    {\n+      string one(\"78\");\n+      ll1 = stoll(one, &idx1, 8);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == 7 );\n+  VERIFY( idx1 = 1 );\n+\n+  try\n+    {\n+      string one(\"10112\");\n+      ll1 = stoll(one, &idx1, 2);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == 11 );\n+  VERIFY( idx1 == 4 );\n+\n+  try\n+    {\n+      string one(\"0XE\");\n+      ll1 = stoll(one, &idx1, 0);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == 14 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      string one(1000, '9');\n+      ll1 = stoll(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == 14 );\n+\n+  try\n+    {\n+      ll1 = numeric_limits<long long>::max();\n+      string one(to_string(ll1));\n+      ll1 = stoll(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == numeric_limits<long long>::max() );\n+\n+  try\n+    {\n+      ll1 = numeric_limits<long long>::min();\n+      string one(to_string(ll1));\n+      ll1 = stoll(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == numeric_limits<long long>::min() );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c2d6cead33774b6a0cc7f1949ddfd58500a457cd", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stoul.cc", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoul.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoul.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoul.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,155 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      string one;\n+      stoul(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      string one(\"a\");\n+      stoul(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  unsigned long ul1 = 0;\n+  try\n+    {\n+      string one(\"a\");\n+      ul1 = stoul(one, 0, 16);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == 10 );\n+\n+  size_t idx1 = 0;\n+  try\n+    {\n+      string one(\"78\");\n+      ul1 = stoul(one, &idx1, 8);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == 7 );\n+  VERIFY( idx1 = 1 );\n+\n+  try\n+    {\n+      string one(\"10112\");\n+      ul1 = stoul(one, &idx1, 2);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == 11 );\n+  VERIFY( idx1 == 4 );\n+\n+  try\n+    {\n+      string one(\"0XE\");\n+      ul1 = stoul(one, &idx1, 0);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == 14 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      string one(1000, '9');\n+      ul1 = stoul(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == 14 );\n+\n+  try\n+    {\n+      ul1 = numeric_limits<unsigned long>::max();\n+      string one(to_string((unsigned long long)ul1));\n+      ul1 = stoul(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == numeric_limits<unsigned long>::max() );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "30c94ff8255ef2a262b59f214abacc217f78a6a8", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stoull.cc", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoull.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,155 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      string one;\n+      stoull(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  \n+  test = false;\n+  try\n+    {\n+      string one(\"a\");\n+      stoull(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  unsigned long long ull1 = 0;\n+  try\n+    {\n+      string one(\"a\");\n+      ull1 = stoull(one, 0, 16);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == 10 );\n+\n+  size_t idx1 = 0;\n+  try\n+    {\n+      string one(\"78\");\n+      ull1 = stoull(one, &idx1, 8);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == 7 );\n+  VERIFY( idx1 = 1 );\n+\n+  try\n+    {\n+      string one(\"10112\");\n+      ull1 = stoull(one, &idx1, 2);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == 11 );\n+  VERIFY( idx1 == 4 );\n+\n+  try\n+    {\n+      string one(\"0XE\");\n+      ull1 = stoull(one, &idx1, 0);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == 14 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      string one(1000, '9');\n+      ull1 = stoull(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == 14 );\n+\n+  try\n+    {\n+      ull1 = numeric_limits<unsigned long long>::max();\n+      string one(to_string(ull1));\n+      ull1 = stoull(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == numeric_limits<unsigned long long>::max() );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7a7d065734081752abb4bdc9935cf7d00a272da6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/to_string.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fto_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fto_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fto_string.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  \n+  long long ll1 = -2;\n+  string one(to_string(ll1));\n+  VERIFY( one == \"-2\" );\n+\n+  long long ll2 = 10;\n+  string two(to_string(ll2));\n+  VERIFY( two == \"10\" );\n+\n+  unsigned long long ull1 = 2;\n+  string three(to_string(ull1));\n+  VERIFY( three == \"2\" );\n+\n+  unsigned long long ull2 = 3000;\n+  string four(to_string(ull2));\n+  VERIFY( four == \"3000\" );\n+\n+  long double ld1 = 2.0L;\n+  string five(to_string(ld1));\n+  VERIFY( five == \"2.000000\" );\n+\n+  long double ld2 = -4.0L;\n+  string six(to_string(ld2));\n+  VERIFY( six == \"-4.000000\" );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c1ebbb228d9b133d865ac04494fec713b8f7a811", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stod.cc", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstod.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,139 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      wstring one;\n+      stod(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      stod(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  double d1 = 0.0;\n+  size_t idx1 = 0;\n+  try\n+    {\n+      wstring one(L\"2.0a\");\n+      d1 = stod(one, &idx1);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( d1 == 2.0 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(L\"1e\");\n+      one.append(2 * numeric_limits<double>::max_exponent10, L'9');\n+      d1 = stod(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( d1 == 2.0 );\n+\n+  try\n+    {\n+      long double ld0 = numeric_limits<double>::max() / 100.0;\n+      wstring one(to_wstring(ld0));\n+      stod(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+\n+  if (sizeof(double) < sizeof(long double))\n+    {\n+      test = false;\n+      d1 = -1.0;\n+      try\n+\t{\n+\t  long double ld1 = numeric_limits<double>::max();\n+\t  ld1 *= 100.0;\n+\t  wstring one(to_wstring(ld1));\n+\t  d1 = stod(one);\n+\t}\n+      catch(std::out_of_range)\n+\t{\n+\t  test = true;\n+\t}\n+      catch(...)\n+\t{\n+\t}\n+      VERIFY( test );\n+      VERIFY( d1 == -1.0 );\n+    }\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6f443c8bf9731d119632376288025057915fce93", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stof.cc", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstof.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,139 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      wstring one;\n+      stof(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      stof(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  float f1 = 0.0f;\n+  size_t idx1 = 0;\n+  try\n+    {\n+      wstring one(L\"2.0a\");\n+      f1 = stof(one, &idx1);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( f1 == 2.0f );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(L\"1e\");\n+      one.append(2 * numeric_limits<float>::max_exponent10, L'9');\n+      f1 = stof(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( f1 == 2.0f );\n+\n+  try\n+    {\n+      long double ld0 = numeric_limits<float>::max() / 100.0;\n+      wstring one(to_wstring(ld0));\n+      stof(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+\n+  if (sizeof(float) < sizeof(long double))\n+    {\n+      test = false;\n+      f1 = -1.0f;\n+      try\n+\t{\n+\t  long double ld1 = numeric_limits<float>::max();\n+\t  ld1 *= 100.0;\n+\t  wstring one(to_wstring(ld1));\n+\t  f1 = stof(one);\n+\t}\n+      catch(std::out_of_range)\n+\t{\n+\t  test = true;\n+\t}\n+      catch(...)\n+\t{\n+\t}\n+      VERIFY( test );\n+      VERIFY( f1 == -1.0f );\n+    }\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d8c637dfdf3844c98e813893ab56f4b61932329a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoi.cc", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoi.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,205 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      wstring one;\n+      stoi(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      stoi(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  int i1 = 0;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      i1 = stoi(one, 0, 16);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 10 );\n+\n+  size_t idx1 = 0;\n+  try\n+    {\n+      wstring one(L\"78\");\n+      i1 = stoi(one, &idx1, 8);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 7 );\n+  VERIFY( idx1 = 1 );\n+\n+  try\n+    {\n+      wstring one(L\"10112\");\n+      i1 = stoi(one, &idx1, 2);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 11 );\n+  VERIFY( idx1 == 4 );\n+\n+  try\n+    {\n+      wstring one(L\"0XE\");\n+      i1 = stoi(one, &idx1, 0);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 14 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(1000, L'9');\n+      i1 = stoi(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 14 );\n+\n+  try\n+    {\n+      i1 = numeric_limits<int>::max();\n+      wstring one(to_wstring((long long)i1));\n+      i1 = stoi(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == numeric_limits<int>::max() );\n+\n+  try\n+    {\n+      i1 = numeric_limits<int>::min();\n+      wstring one(to_wstring((long long)i1));\n+      i1 = stoi(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == numeric_limits<int>::min() );\n+\n+  test = false;\n+  i1 = 1;\n+  try\n+    {\n+      long long ll0 = numeric_limits<int>::max();\n+      ++ll0;\n+      wstring one(to_wstring(ll0));\n+      i1 = stoi(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 1 );\n+\n+  test = false;\n+  try\n+    {\n+      long long ll1 = numeric_limits<int>::min();\n+      --ll1;\n+      wstring one(to_wstring(ll1));\n+      i1 = stoi(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( i1 == 1 );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1ae6a37de72a036227c0dbfc0602520a4e7c89d9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stol.cc", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstol.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstol.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstol.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,168 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      wstring one;\n+      stol(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      stol(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  long l1 = 0;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      l1 = stol(one, 0, 16);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == 10 );\n+\n+  size_t idx1 = 0;\n+  try\n+    {\n+      wstring one(L\"78\");\n+      l1 = stol(one, &idx1, 8);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == 7 );\n+  VERIFY( idx1 = 1 );\n+\n+  try\n+    {\n+      wstring one(L\"10112\");\n+      l1 = stol(one, &idx1, 2);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == 11 );\n+  VERIFY( idx1 == 4 );\n+\n+  try\n+    {\n+      wstring one(L\"0XE\");\n+      l1 = stol(one, &idx1, 0);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == 14 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(1000, L'9');\n+      l1 = stol(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == 14 );\n+\n+  try\n+    {\n+      l1 = numeric_limits<long>::max();\n+      wstring one(to_wstring((long long)l1));\n+      l1 = stol(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == numeric_limits<long>::max() );\n+\n+  try\n+    {\n+      l1 = numeric_limits<long>::min();\n+      wstring one(to_wstring((long long)l1));\n+      l1 = stol(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( l1 == numeric_limits<long>::min() );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7183a46fbf892170d10d39ce189e22f721ec2d25", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stold.cc", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstold.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,117 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      wstring one;\n+      stold(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      stold(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  long double ld1 = 0.0L;\n+  size_t idx1 = 0;\n+  try\n+    {\n+      wstring one(L\"2.0a\");\n+      ld1 = stold(one, &idx1);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ld1 == 2.0L );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(L\"1e\");\n+      one.append(2 * numeric_limits<long double>::max_exponent10, L'9');\n+      ld1 = stold(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( ld1 == 2.0L );\n+\n+  try\n+    {\n+      long double ld0 = numeric_limits<long double>::max() / 100.0L;\n+      wstring one(to_wstring(ld0));\n+      stold(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9ebaff2698913ab352a4527e398b248462c90965", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoll.cc", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoll.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoll.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoll.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,168 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      wstring one;\n+      stoll(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      stoll(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  long long ll1 = 0;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      ll1 = stoll(one, 0, 16);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == 10 );\n+\n+  size_t idx1 = 0;\n+  try\n+    {\n+      wstring one(L\"78\");\n+      ll1 = stoll(one, &idx1, 8);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == 7 );\n+  VERIFY( idx1 = 1 );\n+\n+  try\n+    {\n+      wstring one(L\"10112\");\n+      ll1 = stoll(one, &idx1, 2);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == 11 );\n+  VERIFY( idx1 == 4 );\n+\n+  try\n+    {\n+      wstring one(L\"0XE\");\n+      ll1 = stoll(one, &idx1, 0);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == 14 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(1000, L'9');\n+      ll1 = stoll(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == 14 );\n+\n+  try\n+    {\n+      ll1 = numeric_limits<long long>::max();\n+      wstring one(to_wstring(ll1));\n+      ll1 = stoll(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == numeric_limits<long long>::max() );\n+\n+  try\n+    {\n+      ll1 = numeric_limits<long long>::min();\n+      wstring one(to_wstring(ll1));\n+      ll1 = stoll(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ll1 == numeric_limits<long long>::min() );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3fd45097c201888f11496c4838accf4604f87594", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoul.cc", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoul.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoul.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoul.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,155 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      wstring one;\n+      stoul(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      stoul(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  unsigned long ul1 = 0;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      ul1 = stoul(one, 0, 16);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == 10 );\n+\n+  size_t idx1 = 0;\n+  try\n+    {\n+      wstring one(L\"78\");\n+      ul1 = stoul(one, &idx1, 8);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == 7 );\n+  VERIFY( idx1 = 1 );\n+\n+  try\n+    {\n+      wstring one(L\"10112\");\n+      ul1 = stoul(one, &idx1, 2);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == 11 );\n+  VERIFY( idx1 == 4 );\n+\n+  try\n+    {\n+      wstring one(L\"0XE\");\n+      ul1 = stoul(one, &idx1, 0);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == 14 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(1000, L'9');\n+      ul1 = stoul(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == 14 );\n+\n+  try\n+    {\n+      ul1 = numeric_limits<unsigned long>::max();\n+      wstring one(to_wstring((unsigned long long)ul1));\n+      ul1 = stoul(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ul1 == numeric_limits<unsigned long>::max() );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7605dc07e812114f7bbf481b1b905a702b174371", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoull.cc", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoull.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,155 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = false;\n+  using namespace std;\n+\n+  try\n+    {\n+      wstring one;\n+      stoull(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  \n+  test = false;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      stoull(one);      \n+    }\n+  catch(std::invalid_argument)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+\n+  unsigned long long ull1 = 0;\n+  try\n+    {\n+      wstring one(L\"a\");\n+      ull1 = stoull(one, 0, 16);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == 10 );\n+\n+  size_t idx1 = 0;\n+  try\n+    {\n+      wstring one(L\"78\");\n+      ull1 = stoull(one, &idx1, 8);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == 7 );\n+  VERIFY( idx1 = 1 );\n+\n+  try\n+    {\n+      wstring one(L\"10112\");\n+      ull1 = stoull(one, &idx1, 2);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == 11 );\n+  VERIFY( idx1 == 4 );\n+\n+  try\n+    {\n+      wstring one(L\"0XE\");\n+      ull1 = stoull(one, &idx1, 0);      \n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == 14 );\n+  VERIFY( idx1 == 3 );\n+\n+  test = false;\n+  try\n+    {\n+      wstring one(1000, L'9');\n+      ull1 = stoull(one);\n+    }\n+  catch(std::out_of_range)\n+    {\n+      test = true;\n+    }\n+  catch(...)\n+    {\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == 14 );\n+\n+  try\n+    {\n+      ull1 = numeric_limits<unsigned long long>::max();\n+      wstring one(to_wstring(ull1));\n+      ull1 = stoull(one);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n+  VERIFY( ull1 == numeric_limits<unsigned long long>::max() );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f8b640948dbdaafb4b2d7a9945923cb8cd1d731a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/to_wstring.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fto_wstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7364f2868c8ac21e519725d716bc13f02b19684f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fto_wstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fto_wstring.cc?ref=7364f2868c8ac21e519725d716bc13f02b19684f", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.4 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_USE_C99\n+\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  long long ll1 = -2;\n+  wstring one(to_wstring(ll1));\n+  VERIFY( one == L\"-2\" );\n+\n+  long long ll2 = 10;\n+  wstring two(to_wstring(ll2));\n+  VERIFY( two == L\"10\" );\n+\n+  unsigned long long ull1 = 2;\n+  wstring three(to_wstring(ull1));\n+  VERIFY( three == L\"2\" );\n+\n+  unsigned long long ull2 = 3000;\n+  wstring four(to_wstring(ull2));\n+  VERIFY( four == L\"3000\" );\n+\n+  long double ld1 = 2.0L;\n+  wstring five(to_wstring(ld1));\n+  VERIFY( five == L\"2.000000\" );\n+\n+  long double ld2 = -4.0L;\n+  wstring six(to_wstring(ld2));\n+  VERIFY( six == L\"-4.000000\" );\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}