{"sha": "7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzYjE5OTc1NzlhMDJkN2RmYjRlYzU0ZmQzOTk4ODE1YzA2Y2Q1Yw==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-05-27T15:07:44Z"}, "committer": {"name": "Carl Love", "email": "carll@us.ibm.com", "date": "2020-08-05T04:16:24Z"}, "message": "rs6000, Add vector splat builtin support\n\nGCC maintainers:\n\nThe following patch adds support for the vec_splati, vec_splatid and\nvec_splati_ins builtins.\n\nThis patch adds support for instructions that take a 32-bit immediate\nvalue that represents a floating point value.  This support adds new\npredicates and a support function to properly handle the immediate value.\n\nThe patch has been compiled and tested on\n\n  powerpc64le-unknown-linux-gnu (Power 8 LE)\n  powerpc64le-unknown-linux-gnu (Power 9 LE)\n\nwith no regression errors.\n\nThe test case was compiled on a Power 9 system and then tested on\nMambo.\n\nPlease let me know if this patch is acceptable for the mainline\nbranch.  Thanks.\n\n                         Carl Love\n--------------------------------------------------------\ngcc/ChangeLog\n\n\t    2020-08-04  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_splati, vec_splatid, vec_splati_ins):\n\tAdd defines.\n\t* config/rs6000/altivec.md (UNSPEC_XXSPLTIW, UNSPEC_XXSPLTID,\n\tUNSPEC_XXSPLTI32DX): New.\n\t(vxxspltiw_v4si, vxxspltiw_v4sf_inst, vxxspltidp_v2df_inst,\n\tvxxsplti32dx_v4si_inst, vxxsplti32dx_v4sf_inst): New define_insn.\n\t(vxxspltiw_v4sf, vxxspltidp_v2df, vxxsplti32dx_v4si,\n\tvxxsplti32dx_v4sf.): New define_expands.\n\t* config/rs6000/predicates.md (u1bit_cint_operand,\n\ts32bit_cint_operand, c32bit_cint_operand): New predicates.\n\t* config/rs6000/rs6000-builtin.def (VXXSPLTIW_V4SI, VXXSPLTIW_V4SF,\n\tVXXSPLTID): New definitions.\n\t(VXXSPLTI32DX_V4SI, VXXSPLTI32DX_V4SF): New BU_P10V_3\n\tdefinitions.\n\t(XXSPLTIW, XXSPLTID): New definitions.\n\t(XXSPLTI32DX): Add definitions.\n\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VEC_XXSPLTIW,\n\tP10_BUILTIN_VEC_XXSPLTID, P10_BUILTIN_VEC_XXSPLTI32DX):\n\tNew definitions.\n\t* config/rs6000/rs6000-protos.h (rs6000_constF32toI32): New extern\n\tdeclaration.\n\t* config/rs6000/rs6000.c (rs6000_constF32toI32): New function.\n\t* doc/extend.texi: Add documentation for vec_splati,\n\tvec_splatid, and vec_splati_ins.\n\ngcc/testsuite/ChangeLog\n\n\t    2020-08-04  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/vec-splati-runnable.c: New test.", "tree": {"sha": "8724a9fe2420ce1b7f3aba18750d02d1eadd639d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8724a9fe2420ce1b7f3aba18750d02d1eadd639d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82f10dee344bf0807cab9f32745b35af3f2139d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f10dee344bf0807cab9f32745b35af3f2139d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f10dee344bf0807cab9f32745b35af3f2139d8"}], "stats": {"total": 379, "additions": 379, "deletions": 0}, "files": [{"sha": "71249b50ef8eaba86d1defe102c3b693ae77bf3a", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "patch": "@@ -709,6 +709,9 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_replace_unaligned(a, b, c) __builtin_vec_replace_un (a, b, c)\n #define vec_sldb(a, b, c)      __builtin_vec_sldb (a, b, c)\n #define vec_srdb(a, b, c)      __builtin_vec_srdb (a, b, c)\n+#define vec_splati(a)  __builtin_vec_xxspltiw (a)\n+#define vec_splatid(a) __builtin_vec_xxspltid (a)\n+#define vec_splati_ins(a, b, c)        __builtin_vec_xxsplti32dx (a, b, c)\n \n #define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)\n #define vec_clrl(a, b)\t__builtin_vec_clrl (a, b)"}, {"sha": "2a5a254e6766e953946ed14fcc14f168d242bbfc", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "patch": "@@ -175,6 +175,9 @@\n    UNSPEC_VSTRIL\n    UNSPEC_SLDB\n    UNSPEC_SRDB\n+   UNSPEC_XXSPLTIW\n+   UNSPEC_XXSPLTID\n+   UNSPEC_XXSPLTI32DX\n ])\n \n (define_c_enum \"unspecv\"\n@@ -801,6 +804,109 @@\n   \"vs<SLDB_lr>dbi %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"xxspltiw_v4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SI [(match_operand:SI 1 \"s32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTIW))]\n+ \"TARGET_POWER10\"\n+ \"xxspltiw %x0,%1\"\n+ [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"xxspltiw_v4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:SF 1 \"const_double_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTIW))]\n+ \"TARGET_POWER10\"\n+{\n+  long long value = rs6000_const_f32_to_i32 (operands[1]);\n+  emit_insn (gen_xxspltiw_v4sf_inst (operands[0], GEN_INT (value)));\n+  DONE;\n+})\n+\n+(define_insn \"xxspltiw_v4sf_inst\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:SI 1 \"c32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTIW))]\n+ \"TARGET_POWER10\"\n+ \"xxspltiw %x0,%1\"\n+ [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"xxspltidp_v2df\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" )\n+\t(unspec:V2DF [(match_operand:SF 1 \"const_double_operand\")]\n+\t\t     UNSPEC_XXSPLTID))]\n+ \"TARGET_POWER10\"\n+{\n+  long value = rs6000_const_f32_to_i32 (operands[1]);\n+  rs6000_emit_xxspltidp_v2df (operands[0], value);\n+  DONE;\n+})\n+\n+(define_insn \"xxspltidp_v2df_inst\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V2DF [(match_operand:SI 1 \"c32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTID))]\n+  \"TARGET_POWER10\"\n+  \"xxspltidp %x0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"xxsplti32dx_v4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n+\t\t      (match_operand:SI 3 \"s32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTI32DX))]\n+ \"TARGET_POWER10\"\n+{\n+  int index = INTVAL (operands[2]);\n+\n+  if (!BYTES_BIG_ENDIAN)\n+    index = 1 - index;\n+\n+   emit_insn (gen_xxsplti32dx_v4si_inst (operands[0], operands[1],\n+\t\t\t\t\t GEN_INT (index), operands[3]));\n+   DONE;\n+}\n+ [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"xxsplti32dx_v4si_inst\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n+\t\t      (match_operand:SI 3 \"s32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTI32DX))]\n+  \"TARGET_POWER10\"\n+  \"xxsplti32dx %x0,%2,%3\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"xxsplti32dx_v4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n+\t\t      (match_operand:SF 3 \"const_double_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTI32DX))]\n+  \"TARGET_POWER10\"\n+{\n+  int index = INTVAL (operands[2]);\n+  long value = rs6000_const_f32_to_i32 (operands[3]);\n+  if (!BYTES_BIG_ENDIAN)\n+    index = 1 - index;\n+\n+   emit_insn (gen_xxsplti32dx_v4sf_inst (operands[0], operands[1],\n+\t\t\t\t\t GEN_INT (index), GEN_INT (value)));\n+   DONE;\n+})\n+\n+(define_insn \"xxsplti32dx_v4sf_inst\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n+\t\t      (match_operand:SI 3 \"s32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTI32DX))]\n+  \"TARGET_POWER10\"\n+  \"xxsplti32dx %x0,%2,%3\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n (define_expand \"vstrir_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\")\n \t(unspec:VIshort [(match_operand:VIshort 1 \"altivec_register_operand\")]"}, {"sha": "afb7c02f129384c31282fe578b43e7cda21c1d8d", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "patch": "@@ -214,6 +214,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) >= -16 && INTVAL (op) <= 15\")))\n \n+;; Return 1 if op is an unsigned 1-bit constant integer.\n+(define_predicate \"u1bit_cint_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) >= 0 && INTVAL (op) <= 1\")))\n+\n ;; Return 1 if op is a unsigned 3-bit constant integer.\n (define_predicate \"u3bit_cint_operand\"\n   (and (match_code \"const_int\")\n@@ -272,6 +277,16 @@\n        (match_test \"(unsigned HOST_WIDE_INT)\n \t\t    (INTVAL (op) + 0x8000) >= 0x10000\")))\n \n+;; Return 1 if op is a 32-bit constant signed integer\n+(define_predicate \"s32bit_cint_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(0x80000000 + UINTVAL (op)) >> 32 == 0\")))\n+\n+;; Return 1 if op is a constant 32-bit unsigned\n+(define_predicate \"c32bit_cint_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"((UINTVAL (op) >> 32) == 0)\")))\n+\n ;; Return 1 if op is a positive constant integer that is an exact power of 2.\n (define_predicate \"exact_log2_cint_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "c44587ae8d5c82ccaa8488434165da100e40604c", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "patch": "@@ -2774,6 +2774,14 @@ BU_P10V_3 (VSRDB_V8HI, \"vsrdb_v8hi\", CONST, vsrdb_v8hi)\n BU_P10V_3 (VSRDB_V4SI, \"vsrdb_v4si\", CONST, vsrdb_v4si)\n BU_P10V_3 (VSRDB_V2DI, \"vsrdb_v2di\", CONST, vsrdb_v2di)\n \n+BU_P10V_1 (VXXSPLTIW_V4SI, \"vxxspltiw_v4si\", CONST, xxspltiw_v4si)\n+BU_P10V_1 (VXXSPLTIW_V4SF, \"vxxspltiw_v4sf\", CONST, xxspltiw_v4sf)\n+\n+BU_P10V_1 (VXXSPLTID, \"vxxspltidp\", CONST, xxspltidp_v2df)\n+\n+BU_P10V_3 (VXXSPLTI32DX_V4SI, \"vxxsplti32dx_v4si\", CONST, xxsplti32dx_v4si)\n+BU_P10V_3 (VXXSPLTI32DX_V4SF, \"vxxsplti32dx_v4sf\", CONST, xxsplti32dx_v4sf)\n+\n BU_P10V_1 (VSTRIBR, \"vstribr\", CONST, vstrir_v16qi)\n BU_P10V_1 (VSTRIHR, \"vstrihr\", CONST, vstrir_v8hi)\n BU_P10V_1 (VSTRIBL, \"vstribl\", CONST, vstril_v16qi)\n@@ -2841,6 +2849,9 @@ BU_P10_OVERLOAD_1 (MTVSRQM, \"mtvsrqm\")\n BU_P10_OVERLOAD_2 (VCNTM, \"cntm\")\n BU_P10_OVERLOAD_1 (VEXPANDM, \"vexpandm\")\n BU_P10_OVERLOAD_1 (VEXTRACTM, \"vextractm\")\n+BU_P10_OVERLOAD_1 (XXSPLTIW, \"xxspltiw\")\n+BU_P10_OVERLOAD_1 (XXSPLTID, \"xxspltid\")\n+BU_P10_OVERLOAD_3 (XXSPLTI32DX, \"xxsplti32dx\")\n \n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox_v2di)"}, {"sha": "838f518f578be32aaf5b44c96a86b695ce8243ac", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "patch": "@@ -5694,6 +5694,22 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI },\n \n+  { P10_BUILTIN_VEC_XXSPLTIW, P10_BUILTIN_VXXSPLTIW_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, 0, 0 },\n+  { P10_BUILTIN_VEC_XXSPLTIW, P10_BUILTIN_VXXSPLTIW_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_float, 0, 0 },\n+\n+  { P10_BUILTIN_VEC_XXSPLTID, P10_BUILTIN_VXXSPLTID,\n+    RS6000_BTI_V2DF, RS6000_BTI_float, 0, 0 },\n+\n+  { P10_BUILTIN_VEC_XXSPLTI32DX, P10_BUILTIN_VXXSPLTI32DX_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_UINTQI, RS6000_BTI_INTSI },\n+  { P10_BUILTIN_VEC_XXSPLTI32DX, P10_BUILTIN_VXXSPLTI32DX_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI,\n+    RS6000_BTI_UINTSI },\n+  { P10_BUILTIN_VEC_XXSPLTI32DX, P10_BUILTIN_VXXSPLTI32DX_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_UINTQI, RS6000_BTI_float },\n+\n   { P10_BUILTIN_VEC_SRDB, P10_BUILTIN_VSRDB_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_UINTQI },\n@@ -14109,6 +14125,9 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case ALTIVEC_BUILTIN_VSRH:\n     case ALTIVEC_BUILTIN_VSRW:\n     case P8V_BUILTIN_VSRD:\n+    /* Vector splat immediate insert */\n+    case P10_BUILTIN_VXXSPLTI32DX_V4SI:\n+    case P10_BUILTIN_VXXSPLTI32DX_V4SF:\n       h.uns_p[2] = 1;\n       break;\n "}, {"sha": "28e859f4381cd573405f8e35017bcea7c63d4b9a", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "patch": "@@ -274,6 +274,7 @@ extern void rs6000_asm_output_dwarf_pcrel (FILE *file, int size,\n \t\t\t\t\t   const char *label);\n extern void rs6000_asm_output_dwarf_datarel (FILE *file, int size,\n \t\t\t\t\t     const char *label);\n+extern long long rs6000_const_f32_to_i32 (rtx operand);\n \n /* Declare functions in rs6000-c.c */\n \n@@ -309,4 +310,5 @@ extern bool rs6000_quadword_masked_address_p (const_rtx exp);\n extern rtx rs6000_gen_lvx (enum machine_mode, rtx, rtx);\n extern rtx rs6000_gen_stvx (enum machine_mode, rtx, rtx);\n \n+extern void rs6000_emit_xxspltidp_v2df (rtx, long value);\n #endif  /* rs6000-protos.h */"}, {"sha": "b48ec7243ae964ebc1b2dfea0ffd7badefc10e96", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "patch": "@@ -26806,6 +26806,28 @@ rs6000_invalid_conversion (const_tree fromtype, const_tree totype)\n   return NULL;\n }\n \n+long long\n+rs6000_const_f32_to_i32 (rtx operand)\n+{\n+  long long value;\n+  const struct real_value *rv = CONST_DOUBLE_REAL_VALUE (operand);\n+\n+  gcc_assert (GET_MODE (operand) == SFmode);\n+  REAL_VALUE_TO_TARGET_SINGLE (*rv, value);\n+  return value;\n+}\n+\n+void\n+rs6000_emit_xxspltidp_v2df (rtx dst, long value)\n+{\n+  printf(\"rs6000_emit_xxspltidp_v2df called %ld\\n\", value);\n+  printf(\"rs6000_emit_xxspltidp_v2df called 0x%lx\\n\", value);\n+  if (((value & 0x7F800000) == 0) && ((value & 0x7FFFFF) != 0))\n+    inform (input_location,\n+\t    \"the result for the xxspltidp instruction is undefined for subnormal input values.\\n\");\n+  emit_insn( gen_xxspltidp_v2df_inst (dst, GEN_INT (value)));\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-rs6000.h\""}, {"sha": "54a71c632e5d842dc78644b642e5020dccc6c2ff", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "patch": "@@ -21193,6 +21193,41 @@ using this built-in must be endian-aware.\n \n @findex vec_srdb\n \n+Vector Splat\n+\n+@smallexample\n+@exdent vector signed int vec_splati (const signed int);\n+@exdent vector float vec_splati (const float);\n+@end smallexample\n+\n+Splat a 32-bit immediate into a vector of words.\n+\n+@findex vec_splati\n+\n+@smallexample\n+@exdent vector double vec_splatid (const float);\n+@end smallexample\n+\n+Convert a single precision floating-point value to double-precision and splat\n+the result to a vector of double-precision floats.\n+\n+@findex vec_splatid\n+\n+@smallexample\n+@exdent vector signed int vec_splati_ins (vector signed int,\n+const unsigned int, const signed int);\n+@exdent vector unsigned int vec_splati_ins (vector unsigned int,\n+const unsigned int, const unsigned int);\n+@exdent vector float vec_splati_ins (vector float, const unsigned int,\n+const float);\n+@end smallexample\n+\n+Argument 2 must be either 0 or 1.  Splat the value of argument 3 into the word\n+identified by argument 2 of each doubleword of argument 1 and return the\n+result.  The other words of argument 1 are unchanged.\n+\n+@findex vec_splati_ins\n+\n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_pext (vector unsigned long long int, vector unsigned long long int)"}, {"sha": "afb0bfdef3a7fd9486640cee28f888c834f62dea", "filename": "gcc/testsuite/gcc.target/powerpc/vec-splati-runnable.c", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-splati-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b1997579a02d7dfb4ec54fd3998815c06cd5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-splati-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-splati-runnable.c?ref=7f3b1997579a02d7dfb4ec54fd3998815c06cd5c", "patch": "@@ -0,0 +1,166 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10\" } */\n+#include <altivec.h>\n+\n+#define DEBUG 0\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  int i;\n+  vector int vsrc_a_int;\n+  vector int vresult_int;\n+  vector int expected_vresult_int;\n+  int src_a_int = 13;\n+\n+  vector unsigned int vsrc_a_uint;\n+  vector unsigned int vresult_uint;\n+  vector unsigned int expected_vresult_uint;\n+  unsigned int src_a_uint = 7;\n+\n+  vector float vresult_f;\n+  vector float expected_vresult_f;\n+  vector float vsrc_a_f;\n+  float src_a_f = 23.0;\n+\n+  vector double vsrc_a_d;\n+  vector double vresult_d;\n+  vector double expected_vresult_d;\n+ \n+  /* Vector splati word */\n+  vresult_int = (vector signed int) { 1, 2, 3, 4 };\n+  expected_vresult_int = (vector signed int) { -13, -13, -13, -13 }; \n+\t\t\t\t\t\t \n+  vresult_int = vec_splati ( -13 );\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_splati (src_a_int)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vresult_f = (vector float) { 1.0, 2.0, 3.0, 4.0 };\n+  expected_vresult_f = (vector float) { 23.0, 23.0, 23.0, 23.0 };\n+\t\t\t\t\t\t \n+  vresult_f = vec_splati (23.0f);\n+\n+  if (!vec_all_eq (vresult_f,  expected_vresult_f)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_splati (src_a_f)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_f[%d] = %f, expected_vresult_f[%d] = %f\\n\",\n+\t     i, vresult_f[i], i, expected_vresult_f[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* Vector splati double */\n+  vresult_d = (vector double) { 2.0, 3.0 };\n+  expected_vresult_d = (vector double) { -31.0, -31.0 };\n+\t\t\t\t\t\t \n+  vresult_d = vec_splatid (-31.0f);\n+\n+  if (!vec_all_eq (vresult_d,  expected_vresult_d)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_splati (-31.0f)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_d[%i] = %f, expected_vresult_d[%i] = %f\\n\",\n+\t     i, vresult_d[i], i, expected_vresult_d[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* This test will generate a \"note\" to the user that the argument\n+     is subnormal.  It is not an error, but results are not defined.  */\n+  vresult_d = (vector double) { 2.0, 3.0 };\n+  expected_vresult_d = (vector double) { 6.6E-42f, 6.6E-42f };\n+\n+  vresult_d = vec_splatid (6.6E-42f);\n+\n+  /* Although the instruction says the results are not defined, it does seem\n+     to work, at least on Mambo.  But no guarentees!  */\n+  if (!vec_all_eq (vresult_d,  expected_vresult_d)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_splati (6.6E-42f)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_d[%i] = %e, expected_vresult_d[%i] = %e\\n\",\n+\t     i, vresult_d[i], i, expected_vresult_d[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* Vector splat immediate */\n+  vsrc_a_int = (vector int) { 2, 3, 4, 5 };\n+  vresult_int = (vector int) { 1, 1, 1, 1 };\n+  expected_vresult_int = (vector int) { 2, 20, 4, 20 };\n+\t\t\t\t\t\t \n+  vresult_int = vec_splati_ins (vsrc_a_int, 1, 20);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_splati_ins (vsrc_a_int, 1, 20)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%i] = %d, expected_vresult_int[%i] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+  \n+  vsrc_a_uint = (vector unsigned int) { 4, 5, 6, 7 };\n+  vresult_uint = (vector unsigned int) { 1, 1, 1, 1 };\n+  expected_vresult_uint = (vector unsigned int) { 4, 40, 6, 40 };\n+\t\t\t\t\t\t \n+  vresult_uint = vec_splati_ins (vsrc_a_uint, 1, 40);\n+\n+  if (!vec_all_eq (vresult_uint,  expected_vresult_uint)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_splati_ins (vsrc_a_uint, 1, 40)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_uint[%i] = %d, expected_vresult_uint[%i] = %d\\n\",\n+\t     i, vresult_uint[i], i, expected_vresult_uint[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+  \n+  vsrc_a_f = (vector float) { 2.0, 3.0, 4.0, 5.0 };\n+  vresult_f = (vector float) { 1.0, 1.0, 1.0, 1.0 };\n+  expected_vresult_f = (vector float) { 2.0, 20.1, 4.0, 20.1 };\n+\t\t\t\t\t\t \n+  vresult_f = vec_splati_ins (vsrc_a_f, 1, 20.1f);\n+\n+  if (!vec_all_eq (vresult_f,  expected_vresult_f)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_splati_ins (vsrc_a_f, 1, 20.1)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_f[%i] = %f, expected_vresult_f[%i] = %f\\n\",\n+\t     i, vresult_f[i], i, expected_vresult_f[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxxspltiw\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxxspltidp\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxxsplti32dx\\M} 3 } } */\n+\n+"}]}