{"sha": "765f1bf9e4451e97ccfba21bc2d9dcee8580fb31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1ZjFiZjllNDQ1MWU5N2NjZmJhMjFiYzJkOWRjZWU4NTgwZmIzMQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-04-01T16:45:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-04-01T16:45:34Z"}, "message": "gcc.c (init_gcc_specs): If HAVE_LD_AS_NEEDED, link with -lgcc --as-needed -lgcc_s --no-as-needed by default.\n\n\t* gcc.c (init_gcc_specs): If HAVE_LD_AS_NEEDED, link with\n\t-lgcc --as-needed -lgcc_s --no-as-needed by default.\n\t* configure.ac (HAVE_LD_AS_NEEDED): Check for ld --as-needed.\n\t* configure: Rebuilt.\n\t* config.in: Rebuilt.\n\t* Makefile.in (stage1-start): Copy also libgcc_s*$(SHLIB_EXT).\n\t(stage2-start, stage3-start, stage4-start): Likewise.\n\t(stageprofile-start, stagefeedback-start): Likewise.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r80302", "tree": {"sha": "1a3ce88b8909a989116b51749ef3a5f061786ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a3ce88b8909a989116b51749ef3a5f061786ed7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/comments", "author": null, "committer": null, "parents": [{"sha": "45dcc026e55601992454c81ff5c171a58a5ac4b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45dcc026e55601992454c81ff5c171a58a5ac4b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45dcc026e55601992454c81ff5c171a58a5ac4b9"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "7ba2f43f80e3029a376d0f8f581493fc4d43cbdf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=765f1bf9e4451e97ccfba21bc2d9dcee8580fb31", "patch": "@@ -1,3 +1,15 @@\n+2004-04-01  Alan Modra  <amodra@bigpond.net.au>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c (init_gcc_specs): If HAVE_LD_AS_NEEDED, link with\n+\t-lgcc --as-needed -lgcc_s --no-as-needed by default.\n+\t* configure.ac (HAVE_LD_AS_NEEDED): Check for ld --as-needed.\n+\t* configure: Rebuilt.\n+\t* config.in: Rebuilt.\n+\t* Makefile.in (stage1-start): Copy also libgcc_s*$(SHLIB_EXT).\n+\t(stage2-start, stage3-start, stage4-start): Likewise.\n+\t(stageprofile-start, stagefeedback-start): Likewise.\n+\n 2004-04-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/sparc/sparc.h (DITF_CONVERSION_LIBFUNCS): Define to 0."}, {"sha": "be9a647ef1d3e544453ec5c550c6601a7ba3657a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=765f1bf9e4451e97ccfba21bc2d9dcee8580fb31", "patch": "@@ -3639,13 +3639,15 @@ stage1-start:\n \t-if [ -f ld$(exeext) ] ; then (cd stage1 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage1 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stage1/libgcc.a stage1/libgcc_eh.a stage1/libgcov.a\n+\t-rm -f stage1/libgcc_s*$(SHLIB_EXT)\n \t-cp libgcc.a stage1\n \t-$(RANLIB_FOR_TARGET) stage1/libgcc.a\n \t-cp libgcov.a stage1\n \t-$(RANLIB_FOR_TARGET) stage1/libgcov.a\n \t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage1; \\\n \t   $(RANLIB_FOR_TARGET) stage1/libgcc_eh.a; \\\n \tfi\n+\t-cp libgcc_s*$(SHLIB_EXT) stage1\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage1/$${f} . ; \\\n \telse true; \\\n@@ -3672,13 +3674,15 @@ stage2-start:\n \t-if [ -f ld$(exeext) ] ; then (cd stage2 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage2 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stage2/libgcc.a stage2/libgcov.a stage2/libgcc_eh.a\n+\t-rm -f stage2/libgcc_s*$(SHLIB_EXT)\n \t-cp libgcc.a stage2\n \t-$(RANLIB_FOR_TARGET) stage2/libgcc.a\n \t-cp libgcov.a stage2\n \t-$(RANLIB_FOR_TARGET) stage2/libgcov.a\n \t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage2; \\\n \t   $(RANLIB_FOR_TARGET) stage2/libgcc_eh.a; \\\n \tfi\n+\t-cp libgcc_s*$(SHLIB_EXT) stage2\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage2/$${f} . ; \\\n \telse true; \\\n@@ -3701,13 +3705,15 @@ stage3-start:\n \t-if [ -f ld$(exeext) ] ; then (cd stage3 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage3 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stage3/libgcc.a stage3/libgcov.a stage3/libgcc_eh.a\n+\t-rm -f stage3/libgcc_s*$(SHLIB_EXT)\n \t-cp libgcc.a stage3\n \t-$(RANLIB_FOR_TARGET) stage3/libgcc.a\n \t-cp libgcov.a stage3\n \t-$(RANLIB_FOR_TARGET) stage3/libgcov.a\n \t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage3; \\\n \t   $(RANLIB_FOR_TARGET) stage3/libgcc_eh.a; \\\n \tfi\n+\t-cp libgcc_s*$(SHLIB_EXT) stage3\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage3/$${f} . ; \\\n \telse true; \\\n@@ -3730,13 +3736,15 @@ stage4-start:\n \t-if [ -f ld$(exeext) ] ; then (cd stage4 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stage4 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stage4/libgcc.a stage4/libgcov.a stage4/libgcc_eh.a\n+\t-rm -f stage4/libgcc_s*$(SHLIB_EXT)\n \t-cp libgcc.a stage4\n \t-$(RANLIB_FOR_TARGET) stage4/libgcc.a\n \t-cp libgcov.a stage4\n \t-$(RANLIB_FOR_TARGET) stage4/libgcov.a\n \t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage4; \\\n \t   $(RANLIB_FOR_TARGET) stage4/libgcc_eh.a; \\\n \tfi\n+\t-cp libgcc_s*$(SHLIB_EXT) stage4\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage4/$${f} . ; \\\n \telse true; \\\n@@ -3757,13 +3765,15 @@ stageprofile-start:\n \t-if [ -f ld$(exeext) ] ; then (cd stageprofile && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stageprofile && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stageprofile/libgcc.a stageprofile/libgcov.a stageprofile/libgcc_eh.a\n+\t-rm -f stageprofile/libgcc_s*$(SHLIB_EXT)\n \t-cp libgcc.a stageprofile\n \t-$(RANLIB_FOR_TARGET) stageprofile/libgcc.a\n \t-cp libgcov.a stageprofile\n \t-$(RANLIB_FOR_TARGET) stageprofile/libgcov.a\n \t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stageprofile; \\\n \t   $(RANLIB_FOR_TARGET) stageprofile/libgcc_eh.a; \\\n \tfi\n+\t-cp libgcc_s*$(SHLIB_EXT) stageprofile\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stageprofile/$${f} . ; \\\n \telse true; \\\n@@ -3784,6 +3794,7 @@ stagefeedback-start:\n \t-if [ -f ld$(exeext) ] ; then (cd stagefeedback && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n \t-if [ -f collect-ld$(exeext) ] ; then (cd stagefeedback && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n \t-rm -f stagefeedback/libgcc.a stagefeedback/libgcov.a stagefeedback/libgcc_eh.a\n+\t-rm -f stagefeedback/libgcc_s*$(SHLIB_EXT)\n \t-rm -f *.da\n \t-for dir in fixinc po testsuite $(SUBDIRS); \\\n \t do \\\n@@ -3796,6 +3807,7 @@ stagefeedback-start:\n \t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stagefeedback; \\\n \t   $(RANLIB_FOR_TARGET) stagefeedback/libgcc_eh.a; \\\n \tfi\n+\t-cp libgcc_s*$(SHLIB_EXT) stagefeedback\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stagefeedback/$${f} . ; \\\n \telse true; \\"}, {"sha": "2d8f5836dc11aac28c5debd178594621d463d3dd", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=765f1bf9e4451e97ccfba21bc2d9dcee8580fb31", "patch": "@@ -306,6 +306,9 @@\n /* Define to 1 if you have the <ldfcn.h> header file. */\n #undef HAVE_LDFCN_H\n \n+/* Define if your linker supports --as-needed and --no-as-needed options. */\n+#undef HAVE_LD_AS_NEEDED\n+\n /* Define if your linker supports --eh-frame-hdr option. */\n #undef HAVE_LD_EH_FRAME_HDR\n "}, {"sha": "f0d5d418e0fbfbe46047b76ca1a0dbf41fadc4f6", "filename": "gcc/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=765f1bf9e4451e97ccfba21bc2d9dcee8580fb31", "patch": "@@ -11916,6 +11916,30 @@ echo \"${ECHO_T}$gcc_cv_ld_pie\" >&6\n # UNSORTED\n # --------\n \n+echo \"$as_me:$LINENO: checking linker --as-needed support\" >&5\n+echo $ECHO_N \"checking linker --as-needed support... $ECHO_C\" >&6\n+gcc_cv_ld_as_needed=no\n+if test $in_tree_ld = yes ; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 16 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+     && test $in_tree_ld_is_elf = yes; then\n+    gcc_cv_ld_as_needed=yes\n+  fi\n+elif test x$gcc_cv_ld != x; then\n+\t# Check if linker supports --as-needed and --no-as-needed options\n+\tif $gcc_cv_ld --help 2>/dev/null | grep as-needed > /dev/null; then\n+\t\tgcc_cv_ld_as_needed=yes\n+\tfi\n+fi\n+if test x\"$gcc_cv_ld_as_needed\" = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LD_AS_NEEDED 1\n+_ACEOF\n+\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_ld_as_needed\" >&5\n+echo \"${ECHO_T}$gcc_cv_ld_as_needed\" >&6\n+\n if test x$with_sysroot = x && test x$host = x$target \\\n    && test \"$prefix\" != \"/usr\" && test \"x$prefix\" != \"x$local_prefix\" ; then\n "}, {"sha": "f35812d42f21ea8e73b2582f16aae6a4e1066a6f", "filename": "gcc/configure.ac", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=765f1bf9e4451e97ccfba21bc2d9dcee8580fb31", "patch": "@@ -2744,6 +2744,25 @@ AC_MSG_RESULT($gcc_cv_ld_pie)\n # UNSORTED\n # --------\n \n+AC_MSG_CHECKING(linker --as-needed support)\n+gcc_cv_ld_as_needed=no\n+if test $in_tree_ld = yes ; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 16 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+     && test $in_tree_ld_is_elf = yes; then\n+    gcc_cv_ld_as_needed=yes\n+  fi\n+elif test x$gcc_cv_ld != x; then\n+\t# Check if linker supports --as-needed and --no-as-needed options\n+\tif $gcc_cv_ld --help 2>/dev/null | grep as-needed > /dev/null; then\n+\t\tgcc_cv_ld_as_needed=yes\n+\tfi\n+fi\n+if test x\"$gcc_cv_ld_as_needed\" = xyes; then\n+\tAC_DEFINE(HAVE_LD_AS_NEEDED, 1,\n+[Define if your linker supports --as-needed and --no-as-needed options.])\n+fi\n+AC_MSG_RESULT($gcc_cv_ld_as_needed)\n+\n if test x$with_sysroot = x && test x$host = x$target \\\n    && test \"$prefix\" != \"/usr\" && test \"x$prefix\" != \"x$local_prefix\" ; then\n   AC_DEFINE_UNQUOTED(PREFIX_INCLUDE_DIR, \"$prefix/include\","}, {"sha": "d69d78a0d030515674b2cf800716e8d5aa243078", "filename": "gcc/gcc.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765f1bf9e4451e97ccfba21bc2d9dcee8580fb31/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=765f1bf9e4451e97ccfba21bc2d9dcee8580fb31", "patch": "@@ -1533,6 +1533,12 @@ init_gcc_specs (struct obstack *obstack, const char *shared_name,\n \n   buf = concat (\"%{static|static-libgcc:\", static_name, \" \", eh_name,\n \t\t\"}%{!static:%{!static-libgcc:\",\n+#ifdef HAVE_LD_AS_NEEDED\n+\t\t\"%{!shared-libgcc:\", static_name,\n+\t\t\" --as-needed \", shared_name, \" --no-as-needed}\"\n+\t\t\"%{shared-libgcc:\", shared_name, \"%{!shared: \", static_name,\n+\t\t\"}\",\n+#else\n \t\t\"%{!shared:%{!shared-libgcc:\", static_name, \" \",\n \t\teh_name, \"}%{shared-libgcc:\", shared_name, \" \",\n \t\tstatic_name, \"}}%{shared:\",\n@@ -1541,6 +1547,7 @@ init_gcc_specs (struct obstack *obstack, const char *shared_name,\n \t\t\"}%{!shared-libgcc:\", static_name, \"}\",\n #else\n \t\tshared_name,\n+#endif\n #endif\n \t\t\"}}}\", NULL);\n "}]}