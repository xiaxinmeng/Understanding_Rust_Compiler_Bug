{"sha": "4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY3N2NiNGIyMGRmYWEwMGVmYzZiMmY2ZTNiNTVmNzJmOTgwMWRkNQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1997-07-16T14:54:40Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1997-07-16T14:54:40Z"}, "message": "Initial revision\n\nFrom-SVN: r14458", "tree": {"sha": "820d6872ac7edcd82764928e3660773376614086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/820d6872ac7edcd82764928e3660773376614086"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5/comments", "author": null, "committer": null, "parents": [{"sha": "b111229af91d7ab08f334dfb16c55b4266e14a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b111229af91d7ab08f334dfb16c55b4266e14a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b111229af91d7ab08f334dfb16c55b4266e14a28"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "2bcd165181a73d391273c77dd0bc3ee5b9c5d571", "filename": "gcc/config/arm/netbsd.h", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5/gcc%2Fconfig%2Farm%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5/gcc%2Fconfig%2Farm%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd.h?ref=4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5", "patch": "@@ -0,0 +1,132 @@\n+/*\n+   NetBSD/arm (RiscBSD) version.\n+   Copyright (C) 1993, 1994 Free Software Foundation, Inc.\n+   Contributed by Mark Brinicombe (amb@physig.ph.kcl.ac.uk)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Run-time Target Specification.  */\n+#define TARGET_VERSION fputs (\" (ARM/NetBSD)\", stderr);\n+\n+/* This is used in ASM_FILE_START.  */\n+#define ARM_OS_NAME \"NetBSD\"\n+\n+/* Unsigned chars produces much better code than signed.  */\n+#define DEFAULT_SIGNED_CHAR  0\n+\n+/* Since we always use GAS as our assembler we support stabs.  */\n+#define DBX_DEBUGGING_INFO 1\n+\n+/*#undef ASM_DECLARE_FUNCTION_NAME*/\n+\n+/* ARM6 family default cpu.  */\n+#define SUBTARGET_CPU_DEFAULT TARGET_CPU_arm6\n+\n+/* Default is to use APCS-32 mode.  */\n+#define TARGET_DEFAULT ARM_FLAG_APCS_32\n+\n+#include \"arm/aout.h\"\n+\n+/* This gets redefined in config/netbsd.h.  */\n+#undef TARGET_MEM_FUNCTIONS\n+\n+#include <netbsd.h>\n+\n+/* Some defines for CPP.\n+   arm32 is the NetBSD port name, so we always define arm32 and __arm32__.  */\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"\\\n+-Dunix -Driscbsd -Darm32 -D__arm32__ -D__NetBSD__ \\\n+-Asystem(unix) -Asystem(NetBSD) -Acpu(arm) -Amachine(arm)\"\n+\n+/* Define _POSIX_SOURCE if necessary.  */\n+#undef CPP_SPEC\n+#define CPP_SPEC \"\\\n+%(cpp_cpu_arch) %(cpp_apcs_pc) %(cpp_float) %(cpp_endian) \\\n+%{posix:-D_POSIX_SOURCE} \\\n+\"\n+\n+/* Because TARGET_DEFAULT sets ARM_FLAG_APCS_32 */\n+#undef CPP_APCS_PC_DEFAULT_SPEC\n+#define CPP_APCS_PC_DEFAULT_SPEC \"-D__APCS_32__\"\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef WCHAR_UNSIGNED\n+#define WCHAR_UNSIGNED 0\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+#define HANDLE_SYSV_PRAGMA\n+\n+/* We don't have any limit on the length as out debugger is GDB.  */\n+#undef DBX_CONTIN_LENGTH\n+\n+/* NetBSD does its profiling differently to the Acorn compiler. We\n+   don't need a word following the mcount call; and to skip it\n+   requires either an assembly stub or use of fomit-frame-pointer when\n+   compiling the profiling functions.  Since we break Acorn CC\n+   compatibility below a little more won't hurt.  */\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(STREAM,LABELNO)  \t\t\t\t    \\\n+{\t\t\t\t\t\t\t\t\t    \\\n+  fprintf(STREAM, \"\\tmov\\t%sip, %slr\\n\", REGISTER_PREFIX, REGISTER_PREFIX); \\\n+  fprintf(STREAM, \"\\tbl\\tmcount\\n\");\t\t\t\t\t    \\\n+}\n+\n+/* VERY BIG NOTE : Change of structure alignment for RiscBSD.\n+   There are consequences you should be aware of...\n+\n+   Normally GCC/arm uses a structure alignment of 32 for compatibility\n+   with armcc.  This means that structures are padded to a word\n+   boundry.  However this causes problems with bugged NetBSD kernel\n+   code (possibly userland code as well - I have not checked every\n+   binary).  The nature of this bugged code is to rely on sizeof()\n+   returning the correct size of various structures rounded to the\n+   nearest byte (SCSI and ether code are two examples, the vm system\n+   is another).  This code breaks when the structure alignment is 32\n+   as sizeof() will report a word=rounded size.  By changing the\n+   structure alignment to 8. GCC will conform to what is expected by\n+   NetBSD.\n+\n+   This has several side effects that should be considered.\n+   1. Structures will only be aligned to the size of the largest member.\n+      i.e. structures containing only bytes will be byte aligned.\n+           structures containing shorts will be half word alinged.\n+           structures containing ints will be word aligned.\n+\n+      This means structures should be padded to a word boundry if\n+      alignment of 32 is required for byte structures etc.\n+      \n+   2. A potential performance penalty may exist if strings are no longer\n+      word aligned.  GCC will not be able to use word load/stores to copy\n+      short strings.\n+      \n+   This modification is not encouraged but with the present state of the\n+   NetBSD source tree it is currently the only solution that meets the\n+   requirements.  */\n+#undef STRUCTURE_SIZE_BOUNDARY\n+#define STRUCTURE_SIZE_BOUNDARY 8"}, {"sha": "edcea65c75127382ee7be006e4e4a33c4b5d81a6", "filename": "gcc/config/arm/t-netbsd", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5/gcc%2Fconfig%2Farm%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5/gcc%2Fconfig%2Farm%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-netbsd?ref=4677cb4b20dfaa00efc6b2f6e3b55f72f9801dd5", "patch": "@@ -0,0 +1,11 @@\n+# Just for these, we omit the frame pointer since it makes such a big\n+# difference.  It is then pointless adding debugging.\n+LIBGCC2_CFLAGS=-O2 -fomit-frame-pointer $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) -g0\n+#     -Dinhibit_libc\n+\n+# Don't build enquire\n+ENQUIRE=\n+\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = arm/lib1funcs.asm\n+LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls"}]}