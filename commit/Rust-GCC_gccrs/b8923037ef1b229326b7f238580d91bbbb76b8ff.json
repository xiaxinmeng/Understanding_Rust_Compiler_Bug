{"sha": "b8923037ef1b229326b7f238580d91bbbb76b8ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5MjMwMzdlZjFiMjI5MzI2YjdmMjM4NTgwZDkxYmJiYjc2YjhmZg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2018-11-21T07:48:49Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2018-11-21T07:48:49Z"}, "message": "S/390: Support vector load/store alignment hints\n\nThe IBM z14 POP adds an optional alignment operand to the vl, vst,\nvlm, and vstm instruction (vector loads and stores). Vectors residing\non 8 or 16 byte boundaries might get loaded or stored faster on some\nmodels given the instruction uses the proper hint operand.  A wrong\nhint will hurt performance though.\n\nThe attached testcase align-1 currently fails due to:\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=88085\n\ngcc/ChangeLog:\n\n2018-11-21  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* configure.ac: Add check for Binutils to determine whether vector\n\tload/store alignments hints are being supported.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* config/s390/s390.c (print_operand): Support new output\n\tmodifier A.\n\t* config/s390/s390.md (\"movti\"): Append alignment hint output\n\tusing the new output modifier 'A'.\n\t* config/s390/vector.md (\"mov<mode>\", \"*vec_tf_to_v1tf\")\n\t(\"*vec_ti_to_v1ti\"): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2018-11-21  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/vector/align-1.c: New test.\n\t* gcc.target/s390/vector/align-2.c: New test.\n\nFrom-SVN: r266336", "tree": {"sha": "c774c995e556775f66fd907b025e0e61f8f78669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c774c995e556775f66fd907b025e0e61f8f78669"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8923037ef1b229326b7f238580d91bbbb76b8ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8923037ef1b229326b7f238580d91bbbb76b8ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8923037ef1b229326b7f238580d91bbbb76b8ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8923037ef1b229326b7f238580d91bbbb76b8ff/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98f08eb8939735c1e9cbc1ec5cadebe79e935c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f08eb8939735c1e9cbc1ec5cadebe79e935c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f08eb8939735c1e9cbc1ec5cadebe79e935c90"}], "stats": {"total": 155, "additions": 147, "deletions": 8}, "files": [{"sha": "0f43084b9217789e8a6a2e23f907c33af6018a6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8923037ef1b229326b7f238580d91bbbb76b8ff", "patch": "@@ -1,3 +1,16 @@\n+2018-11-21  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* configure.ac: Add check for Binutils to determine whether vector\n+\tload/store alignments hints are being supported.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* config/s390/s390.c (print_operand): Support new output\n+\tmodifier A.\n+\t* config/s390/s390.md (\"movti\"): Append alignment hint output\n+\tusing the new output modifier 'A'.\n+\t* config/s390/vector.md (\"mov<mode>\", \"*vec_tf_to_v1tf\")\n+\t(\"*vec_ti_to_v1ti\"): Likewise.\n+\n 2018-11-20  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/extend.texi (Other Builtins): Add __builtin_has_attribute."}, {"sha": "999ade4154c6d506f12ae0c0f53095caebe97028", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=b8923037ef1b229326b7f238580d91bbbb76b8ff", "patch": "@@ -657,6 +657,13 @@\n #endif\n \n \n+/* Define if your assembler supports vl/vst/vlm/vstm with an optional\n+   alignment hint argument. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS\n+#endif\n+\n+\n /* Define if your assembler supports VSX instructions. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_VSX"}, {"sha": "277d555440b971b9716d0efe78e0fef4b61bb09d", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=b8923037ef1b229326b7f238580d91bbbb76b8ff", "patch": "@@ -7598,6 +7598,8 @@ print_operand_address (FILE *file, rtx addr)\n    CODE specified the format flag.  The following format flags\n    are recognized:\n \n+    'A': On z14 or higher: If operand is a mem print the alignment\n+\t hint usable with vl/vst prefixed by a comma.\n     'C': print opcode suffix for branch condition.\n     'D': print opcode suffix for inverse branch condition.\n     'E': print opcode suffix for branch on index instruction.\n@@ -7635,6 +7637,17 @@ print_operand (FILE *file, rtx x, int code)\n \n   switch (code)\n     {\n+    case 'A':\n+#ifdef HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS\n+      if (TARGET_Z14 && MEM_P (x))\n+\t{\n+\t  if (MEM_ALIGN (x) >= 128)\n+\t    fprintf (file, \",4\");\n+\t  else if (MEM_ALIGN (x) == 64)\n+\t    fprintf (file, \",3\");\n+\t}\n+#endif\n+      return;\n     case 'C':\n       fprintf (file, s390_branch_condition_mnemonic (x, FALSE));\n       return;"}, {"sha": "c6c960f77719d5fa4e6b0915c92cfeccf1d4f57b", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=b8923037ef1b229326b7f238580d91bbbb76b8ff", "patch": "@@ -1552,8 +1552,8 @@\n    vone\\t%v0\n    vlvgp\\t%v0,%1,%N1\n    #\n-   vl\\t%v0,%1\n-   vst\\t%v1,%0\n+   vl\\t%v0,%1%A1\n+   vst\\t%v1,%0%A0\n    #\n    #\n    #"}, {"sha": "f0e40490e020c230146a0d1e0cc008ead8bc5cde", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=b8923037ef1b229326b7f238580d91bbbb76b8ff", "patch": "@@ -198,8 +198,8 @@\n   \"\"\n   \"@\n    vlr\\t%v0,%v1\n-   vl\\t%v0,%1\n-   vst\\t%v1,%0\n+   vl\\t%v0,%1%A1\n+   vst\\t%v1,%0%A0\n    vzero\\t%v0\n    vone\\t%v0\n    vgbm\\t%v0,%t1\n@@ -551,8 +551,8 @@\n   \"TARGET_VX\"\n   \"@\n    vmrhg\\t%v0,%1,%N1\n-   vl\\t%v0,%1\n-   vst\\t%v1,%0\n+   vl\\t%v0,%1%A1\n+   vst\\t%v1,%0%A0\n    vzero\\t%v0\n    vlvgp\\t%v0,%1,%N1\"\n   [(set_attr \"op_type\" \"VRR,VRX,VRX,VRI,VRR\")])\n@@ -563,8 +563,8 @@\n   \"TARGET_VX\"\n   \"@\n    vlr\\t%v0,%v1\n-   vl\\t%v0,%1\n-   vst\\t%v1,%0\n+   vl\\t%v0,%1%A1\n+   vst\\t%v1,%0%A0\n    vzero\\t%v0\n    vone\\t%v0\n    vlvgp\\t%v0,%1,%N1\""}, {"sha": "3a20399adba3af64580c03903e24ffa7a46b0514", "filename": "gcc/configure", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b8923037ef1b229326b7f238580d91bbbb76b8ff", "patch": "@@ -27520,6 +27520,42 @@ $as_echo \"#define HAVE_AS_ARCHITECTURE_MODIFIERS 1\" >>confdefs.h\n \n fi\n \n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for vector load/store alignment hints\" >&5\n+$as_echo_n \"checking assembler for vector load/store alignment hints... \" >&6; }\n+if ${gcc_cv_as_s390_vector_loadstore_alignment_hints+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_s390_vector_loadstore_alignment_hints=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 31 \\) \\* 1000 + 0`\n+  then gcc_cv_as_s390_vector_loadstore_alignment_hints=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo '\tvl %v24,0(%r15),3 ' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_s390_vector_loadstore_alignment_hints=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_s390_vector_loadstore_alignment_hints\" >&5\n+$as_echo \"$gcc_cv_as_s390_vector_loadstore_alignment_hints\" >&6; }\n+if test $gcc_cv_as_s390_vector_loadstore_alignment_hints = yes; then\n+\n+$as_echo \"#define HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS 1\" >>confdefs.h\n+\n+fi\n+\n+\n     ;;\n esac\n "}, {"sha": "2a1f3bb39a45f78aa80d3ecfc54cf1a1d6ac9052", "filename": "gcc/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b8923037ef1b229326b7f238580d91bbbb76b8ff", "patch": "@@ -4846,6 +4846,12 @@ pointers into PC-relative form.])\n       [\t.machine z13+vx ],,\n       [AC_DEFINE(HAVE_AS_ARCHITECTURE_MODIFIERS, 1,\n \t  [Define if your assembler supports architecture modifiers.])])\n+    gcc_GAS_CHECK_FEATURE([vector load/store alignment hints],\n+      gcc_cv_as_s390_vector_loadstore_alignment_hints, [2,31,0],,\n+      [\tvl %v24,0(%r15),3 ],,\n+      [AC_DEFINE(HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS, 1,\n+\t  [Define if your assembler supports vl/vst/vlm/vstm with an optional alignment hint argument.])])\n+\n     ;;\n esac\n "}, {"sha": "b287dc555e96aed23650a82b7ee7c03c5abf6119", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8923037ef1b229326b7f238580d91bbbb76b8ff", "patch": "@@ -1,3 +1,8 @@\n+2018-11-21  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/align-1.c: New test.\n+\t* gcc.target/s390/vector/align-2.c: New test.\n+\n 2018-11-20  Martin Sebor  <msebor@redhat.com>\n \n \t* c-c++-common/builtin-has-attribute-2.c: New test."}, {"sha": "cc7777ad22a19330eb9b023522611585ecab78f0", "filename": "gcc/testsuite/gcc.target/s390/vector/align-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Falign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Falign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Falign-1.c?ref=b8923037ef1b229326b7f238580d91bbbb76b8ff", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z14\" } */\n+\n+/* The user alignment ends up in DECL_ALIGN of the VAR_DECL and is\n+   currently ignored if it is smaller than the alignment of the type.\n+   In this testcase an alignment hint \",3\" is emitted also for\n+   accessing a4 which is wrong.\n+   Hence this testcase currently fails:\n+   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88085 */\n+\n+typedef int __attribute__((vector_size(16))) v4si;\n+\n+v4si a4 __attribute__((aligned(4)));\n+v4si a8 __attribute__((aligned(8)));\n+v4si a16 __attribute__((aligned(16)));\n+v4si a32 __attribute__((aligned(32)));\n+\n+void\n+foo (v4si a)\n+{\n+  a4 += a;  /* vl ...   vst ... */\n+  a8 += a;  /* vl ...,3 vst ...,3 */\n+  a16 += a; /* vl ...,4 vst ...,4 */\n+  a32 += a; /* vl ...,4 vst ...,4 */\n+}\n+\n+/* { dg-final { scan-assembler-times \"vl\\t%v\\[0-9\\]*,\\[0-9\\]*\\\\(%r\\[0-9\\]*\\\\),3\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vl\\t%v\\[0-9\\]*,\\[0-9\\]*\\\\(%r\\[0-9\\]*\\\\),4\\n\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vst\\t%v\\[0-9\\]*,\\[0-9\\]*\\\\(%r\\[0-9\\]*\\\\),3\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vst\\t%v\\[0-9\\]*,\\[0-9\\]*\\\\(%r\\[0-9\\]*\\\\),4\" 2 } } */"}, {"sha": "e4e2fba6a580e9890251e5cf43d7cd0d04b600a4", "filename": "gcc/testsuite/gcc.target/s390/vector/align-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Falign-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8923037ef1b229326b7f238580d91bbbb76b8ff/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Falign-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Falign-2.c?ref=b8923037ef1b229326b7f238580d91bbbb76b8ff", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z14\" } */\n+\n+/* The user alignment ends up in TYPE_ALIGN of the type of the\n+   VAR_DECL.  */\n+\n+typedef int __attribute__((vector_size(16),aligned(4))) v4si_4;\n+typedef int __attribute__((vector_size(16),aligned(8))) v4si_8;\n+typedef int __attribute__((vector_size(16),aligned(16))) v4si_16;\n+typedef int __attribute__((vector_size(16),aligned(32))) v4si_32;\n+\n+v4si_4 a4;\n+v4si_8 a8;\n+v4si_16 a16;\n+v4si_32 a32;\n+\n+void\n+foo (v4si_8 a)\n+{\n+  a4 += a;  /* vl ...   vst ... */\n+  a8 += a;  /* vl ...,3 vst ...,3 */\n+  a16 += a; /* vl ...,4 vst ...,4 */\n+  a32 += a; /* vl ...,4 vst ...,4 */\n+}\n+\n+/* { dg-final { scan-assembler-times \"vl\\t%v\\[0-9\\]*,\\[0-9\\]*\\\\(%r\\[0-9\\]*\\\\),3\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vl\\t%v\\[0-9\\]*,\\[0-9\\]*\\\\(%r\\[0-9\\]*\\\\),4\\n\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vst\\t%v\\[0-9\\]*,\\[0-9\\]*\\\\(%r\\[0-9\\]*\\\\),3\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vst\\t%v\\[0-9\\]*,\\[0-9\\]*\\\\(%r\\[0-9\\]*\\\\),4\" 2 } } */"}]}