{"sha": "24d2fbbeacb37a9a07ae7b038ce331630141aa10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRkMmZiYmVhY2IzN2E5YTA3YWU3YjAzOGNlMzMxNjMwMTQxYWExMA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2016-04-27T12:20:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:20:54Z"}, "message": "exp_ch3.adb (Expand_N_Object_Declaration): Rewrite an object declaration of the form \"X ...\n\n2016-04-27  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Rewrite an object\n\tdeclaration of the form \"X : T := Func (...);\", where T is\n\tcontrolled, as a renaming.\n\t* a-strunb-shared.adb (Finalize): Set the Unbounded_String Object\n\tto be an empty string, instead of null-ing out the Reference.\n\t* exp_util.adb (Needs_Finalization): Remove redundant code.\n\nFrom-SVN: r235488", "tree": {"sha": "7e1e1d662f59df187bb4e829a8f6ff36d75a78fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e1e1d662f59df187bb4e829a8f6ff36d75a78fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24d2fbbeacb37a9a07ae7b038ce331630141aa10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d2fbbeacb37a9a07ae7b038ce331630141aa10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d2fbbeacb37a9a07ae7b038ce331630141aa10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d2fbbeacb37a9a07ae7b038ce331630141aa10/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45e206963a226dc93046a671951f8cc5bcce52cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e206963a226dc93046a671951f8cc5bcce52cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e206963a226dc93046a671951f8cc5bcce52cf"}], "stats": {"total": 163, "additions": 100, "deletions": 63}, "files": [{"sha": "75f690448b59b4107efa5b68a68c86874071a2c1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d2fbbeacb37a9a07ae7b038ce331630141aa10/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d2fbbeacb37a9a07ae7b038ce331630141aa10/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=24d2fbbeacb37a9a07ae7b038ce331630141aa10", "patch": "@@ -1,3 +1,12 @@\n+2016-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Rewrite an object\n+\tdeclaration of the form \"X : T := Func (...);\", where T is\n+\tcontrolled, as a renaming.\n+\t* a-strunb-shared.adb (Finalize): Set the Unbounded_String Object\n+\tto be an empty string, instead of null-ing out the Reference.\n+\t* exp_util.adb (Needs_Finalization): Remove redundant code.\n+\n 2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* aspects.ads Aspects Export and Import do not require delay. They"}, {"sha": "72028e08d2ca6bf8c3b3001538cdbf1b00b83a17", "filename": "gcc/ada/a-strunb-shared.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d2fbbeacb37a9a07ae7b038ce331630141aa10/gcc%2Fada%2Fa-strunb-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d2fbbeacb37a9a07ae7b038ce331630141aa10/gcc%2Fada%2Fa-strunb-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb-shared.adb?ref=24d2fbbeacb37a9a07ae7b038ce331630141aa10", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -795,7 +795,10 @@ package body Ada.Strings.Unbounded is\n          --  so we need to add a guard for the case of finalizing the same\n          --  object twice.\n \n-         Object.Reference := null;\n+         --  We set the Object to the empty string so there will be no ill\n+         --  effects if a program references an already-finalized object.\n+\n+         Object.Reference := Null_Unbounded_String.Reference;\n          Unreference (SR);\n       end if;\n    end Finalize;"}, {"sha": "09253290f09983567a1febc2246701ddaf974470", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 83, "deletions": 56, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d2fbbeacb37a9a07ae7b038ce331630141aa10/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d2fbbeacb37a9a07ae7b038ce331630141aa10/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=24d2fbbeacb37a9a07ae7b038ce331630141aa10", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6336,11 +6336,46 @@ package body Exp_Ch3 is\n \n       function Rewrite_As_Renaming return Boolean is\n       begin\n-         return not Aliased_Present (N)\n-           and then Is_Entity_Name (Expr_Q)\n-           and then Ekind (Entity (Expr_Q)) = E_Variable\n-           and then OK_To_Rename (Entity (Expr_Q))\n-           and then Is_Entity_Name (Obj_Def);\n+         --  If the object declaration appears in the form\n+\n+         --    Obj : Ctrl_Typ := Func (...);\n+\n+         --  where Ctrl_Typ is controlled but not immutably limited type, then\n+         --  the expansion of the function call should use a dereference of the\n+         --  result to reference the value on the secondary stack.\n+\n+         --    Obj : Ctrl_Typ renames Func (...).all;\n+\n+         --  As a result, the call avoids an extra copy. This an optimization,\n+         --  but it is required for passing ACATS tests in some cases where it\n+         --  would otherwise make two copies. The RM allows removing redunant\n+         --  Adjust/Finalize calls, but does not allow insertion of extra ones.\n+\n+         return (Nkind (Expr_Q) = N_Explicit_Dereference\n+             and then not Comes_From_Source (Expr_Q)\n+             and then Nkind (Original_Node (Expr_Q)) = N_Function_Call\n+             and then Nkind (Object_Definition (N)) in N_Has_Entity\n+             and then (Needs_Finalization (Entity (Object_Definition (N)))))\n+\n+           --  If the initializing expression is for a variable with attribute\n+           --  OK_To_Rename set, then transform:\n+\n+           --     Obj : Typ := Expr;\n+\n+           --  into\n+\n+           --     Obj : Typ renames Expr;\n+\n+           --  provided that Obj is not aliased. The aliased case has to be\n+           --  excluded in general because Expr will not be aliased in\n+           --  general.\n+\n+           or else\n+             (not Aliased_Present (N)\n+               and then Is_Entity_Name (Expr_Q)\n+               and then Ekind (Entity (Expr_Q)) = E_Variable\n+               and then OK_To_Rename (Entity (Expr_Q))\n+               and then Is_Entity_Name (Obj_Def));\n       end Rewrite_As_Renaming;\n \n       --  Local variables\n@@ -6993,58 +7028,9 @@ package body Exp_Ch3 is\n                Insert_After_And_Analyze (Init_After, Stat);\n             end;\n          end if;\n-\n-         --  Final transformation, if the initializing expression is an entity\n-         --  for a variable with OK_To_Rename set, then we transform:\n-\n-         --     X : typ := expr;\n-\n-         --  into\n-\n-         --     X : typ renames expr\n-\n-         --  provided that X is not aliased. The aliased case has to be\n-         --  excluded in general because Expr will not be aliased in general.\n-\n-         if Rewrite_As_Renaming then\n-            Rewrite (N,\n-              Make_Object_Renaming_Declaration (Loc,\n-                Defining_Identifier => Defining_Identifier (N),\n-                Subtype_Mark        => Obj_Def,\n-                Name                => Expr_Q));\n-\n-            --  We do not analyze this renaming declaration, because all its\n-            --  components have already been analyzed, and if we were to go\n-            --  ahead and analyze it, we would in effect be trying to generate\n-            --  another declaration of X, which won't do.\n-\n-            Set_Renamed_Object (Defining_Identifier (N), Expr_Q);\n-            Set_Analyzed (N);\n-\n-            --  We do need to deal with debug issues for this renaming\n-\n-            --  First, if entity comes from source, then mark it as needing\n-            --  debug information, even though it is defined by a generated\n-            --  renaming that does not come from source.\n-\n-            if Comes_From_Source (Defining_Identifier (N)) then\n-               Set_Debug_Info_Needed (Defining_Identifier (N));\n-            end if;\n-\n-            --  Now call the routine to generate debug info for the renaming\n-\n-            declare\n-               Decl : constant Node_Id := Debug_Renaming_Declaration (N);\n-            begin\n-               if Present (Decl) then\n-                  Insert_Action (N, Decl);\n-               end if;\n-            end;\n-         end if;\n       end if;\n \n-      if Nkind (N) = N_Object_Declaration\n-        and then Nkind (Obj_Def) = N_Access_Definition\n+      if Nkind (Obj_Def) = N_Access_Definition\n         and then not Is_Local_Anonymous_Access (Etype (Def_Id))\n       then\n          --  An Ada 2012 stand-alone object of an anonymous access type\n@@ -7122,6 +7108,47 @@ package body Exp_Ch3 is\n          end;\n       end if;\n \n+      --  Final transformation - turn the object declaration into a renaming if\n+      --  appropriate.\n+\n+      if Present (Expr) then\n+         if Rewrite_As_Renaming then\n+            Rewrite (N,\n+              Make_Object_Renaming_Declaration (Loc,\n+                Defining_Identifier => Defining_Identifier (N),\n+                Subtype_Mark        => Obj_Def,\n+                Name                => Expr_Q));\n+\n+            --  We do not analyze this renaming declaration, because all its\n+            --  components have already been analyzed, and if we were to go\n+            --  ahead and analyze it, we would in effect be trying to generate\n+            --  another declaration of X, which won't do.\n+\n+            Set_Renamed_Object (Defining_Identifier (N), Expr_Q);\n+            Set_Analyzed (N);\n+\n+            --  We do need to deal with debug issues for this renaming\n+\n+            --  First, if entity comes from source, then mark it as needing\n+            --  debug information, even though it is defined by a generated\n+            --  renaming that does not come from source.\n+\n+            if Comes_From_Source (Defining_Identifier (N)) then\n+               Set_Debug_Info_Needed (Defining_Identifier (N));\n+            end if;\n+\n+            --  Now call the routine to generate debug info for the renaming\n+\n+            declare\n+               Decl : constant Node_Id := Debug_Renaming_Declaration (N);\n+            begin\n+               if Present (Decl) then\n+                  Insert_Action (N, Decl);\n+               end if;\n+            end;\n+         end if;\n+      end if;\n+\n    --  Exception on library entity not available\n \n    exception"}, {"sha": "2e8e1d6966fd1444a0a68b7c080d21b5a9732929", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d2fbbeacb37a9a07ae7b038ce331630141aa10/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d2fbbeacb37a9a07ae7b038ce331630141aa10/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=24d2fbbeacb37a9a07ae7b038ce331630141aa10", "patch": "@@ -6995,11 +6995,10 @@ package body Exp_Util is\n \n                return False;\n \n-            elsif Is_Array_Type (Rec) then\n-               return Needs_Finalization (Component_Type (Rec));\n-\n             else\n-               return Has_Controlled_Component (Rec);\n+               return\n+                 Is_Array_Type (Rec)\n+                   and then Needs_Finalization (Component_Type (Rec));\n             end if;\n          else\n             return False;\n@@ -7032,7 +7031,6 @@ package body Exp_Util is\n \n          return Is_Class_Wide_Type (T)\n              or else Is_Controlled (T)\n-             or else Has_Controlled_Component (T)\n              or else Has_Some_Controlled_Component (T)\n              or else\n                (Is_Concurrent_Type (T)"}]}