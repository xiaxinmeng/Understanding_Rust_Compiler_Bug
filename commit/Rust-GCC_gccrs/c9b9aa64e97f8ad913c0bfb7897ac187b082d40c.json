{"sha": "c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzliOWFhNjRlOTdmOGFkOTEzYzBiZmI3ODk3YWMxODdiMDgyZDQwYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-01T07:51:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-01T07:51:12Z"}, "message": "cgraph.h (cgraph_build_static_cdtor): Declare.\n\n        * cgraph.h (cgraph_build_static_cdtor): Declare.\n        * cgraphunit.c (cgraph_build_static_cdtor): New.\n        * c-objc-common.c (build_cdtor): Use it.\n        * coverage.c (create_coverage): Likewise.\n        * libfuncs.h (LTI_gcov_init, gcov_init_libfunc): Remove.\n        * optabs.c (init_optabs): Don't set gcov_init_libfunc.\njava/\n        * class.c (registerClass_libfunc): Remove.\n        (init_class_processing): Don't set it.\n        (emit_register_classes): Take list_p parameter.  Fill it in\n        with _Jv_RegisterClass calls.\n        * decl.c (java_init_decl_processing): Don't call\n        init_resource_processing.\n        * jcf-parse.c (java_emit_static_constructor): New.\n        (java_parse_file): Call it.\n        * resource.c (registerResource_libfunc): Remove.\n        (init_resource_processing): Remove.\n        (write_resource_constructor): Take list_p parameter.  Fill it in\n        with _Jv_RegisterResource calls.\n        * java-tree.h: Update prototypes.\n\nFrom-SVN: r83958", "tree": {"sha": "9e2f01325bb00a9ea11c2b59b1144a6756a6aa5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e2f01325bb00a9ea11c2b59b1144a6756a6aa5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/comments", "author": null, "committer": null, "parents": [{"sha": "276b3fab875aed7ef28e942a09017f795f1bb2c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/276b3fab875aed7ef28e942a09017f795f1bb2c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/276b3fab875aed7ef28e942a09017f795f1bb2c6"}], "stats": {"total": 397, "additions": 196, "deletions": 201}, "files": [{"sha": "dcd3ea7559b68a335f37d96f78653d22c4af2a51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -1,3 +1,12 @@\n+2004-07-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* cgraph.h (cgraph_build_static_cdtor): Declare.\n+\t* cgraphunit.c (cgraph_build_static_cdtor): New.\n+\t* c-objc-common.c (build_cdtor): Use it.\n+\t* coverage.c (create_coverage): Likewise.\n+\t* libfuncs.h (LTI_gcov_init, gcov_init_libfunc): Remove.\n+\t* optabs.c (init_optabs): Don't set gcov_init_libfunc.\n+\n 2004-06-30  Roger Sayle  <roger@eyesopen.com>\n \n \t* expmed.c (expand_shift): Consider expanding LSHIFT_EXPR by a"}, {"sha": "293884af7f6a6dc04e9cd1765b108e4110700689", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -184,27 +184,20 @@ c_objc_common_init (void)\n \n /* Synthesize a function which calls all the global ctors or global dtors\n    in this file.  */\n+\n static void\n build_cdtor (int method_type, tree cdtors)\n {\n-  tree fnname = get_file_function_name (method_type);\n-  tree cs;\n-\n-  start_function (void_list_node,\n-\t\t  build_nt (CALL_EXPR, fnname,\n-\t\t\t    tree_cons (NULL_TREE, NULL_TREE, void_list_node),\n-\t\t\t    NULL_TREE),\n-\t\t  NULL_TREE);\n-  store_parm_decls ();\n+  tree body;\n \n-  cs = c_begin_compound_stmt (true);\n+  body = push_stmt_list ();\n \n   for (; cdtors; cdtors = TREE_CHAIN (cdtors))\n-    add_stmt (build_function_call (TREE_VALUE (cdtors), 0));\n+    add_stmt (build_function_call (TREE_VALUE (cdtors), NULL_TREE));\n \n-  add_stmt (c_end_compound_stmt (cs, true));\n+  body = pop_stmt_list (body);\n \n-  finish_function ();\n+  cgraph_build_static_cdtor (method_type, body);\n }\n \n /* Called at end of parsing, but before end-of-file processing.  */"}, {"sha": "c91f6f87413cbb16b9d70b27618b9efa5c01bb76", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -192,5 +192,6 @@ void verify_cgraph (void);\n void verify_cgraph_node (struct cgraph_node *);\n void cgraph_mark_inline_edge (struct cgraph_edge *e);\n void cgraph_clone_inlined_nodes (struct cgraph_edge *e, bool duplicate);\n+void cgraph_build_static_cdtor (char which, tree body);\n \n #endif  /* GCC_CGRAPH_H  */"}, {"sha": "39a4e32ef0eb0bef0b7322e586002964d091c20e", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -168,6 +168,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n+#include \"rtl.h\"\n #include \"tree-inline.h\"\n #include \"langhooks.h\"\n #include \"hashtab.h\"\n@@ -1785,3 +1786,66 @@ cgraph_optimize (void)\n     }\n #endif\n }\n+\n+/* Generate and emit a static constructor or destructor.  WHICH must be\n+   one of 'I' or 'D'.  BODY should be a STATEMENT_LIST containing \n+   GENERIC statements.  */\n+\n+void\n+cgraph_build_static_cdtor (char which, tree body)\n+{\n+  static int counter = 0;\n+  char which_buf[16];\n+  tree decl, name;\n+\n+  sprintf (which_buf, \"%c_%d\", which, counter++);\n+  name = get_file_function_name_long (which_buf);\n+\n+  decl = build_decl (FUNCTION_DECL, name,\n+\t\t     build_function_type (void_type_node, void_list_node));\n+  current_function_decl = decl;\n+\n+  DECL_RESULT (decl) = build_decl (RESULT_DECL, NULL_TREE, void_type_node);\n+  allocate_struct_function (decl);\n+\n+  TREE_STATIC (decl) = 1;\n+  TREE_USED (decl) = 1;\n+  DECL_ARTIFICIAL (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+  DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (decl) = 1;\n+  DECL_SAVED_TREE (decl) = body;\n+  TREE_PUBLIC (decl) = ! targetm.have_ctors_dtors;\n+  DECL_UNINLINABLE (decl) = 1;\n+\n+  DECL_INITIAL (decl) = make_node (BLOCK);\n+  TREE_USED (DECL_INITIAL (decl)) = 1;\n+\n+  DECL_SOURCE_LOCATION (decl) = input_location;\n+  cfun->function_end_locus = input_location;\n+\n+  if (which == 'I')\n+    DECL_STATIC_CONSTRUCTOR (decl) = 1;\n+  else if (which == 'D')\n+    DECL_STATIC_DESTRUCTOR (decl) = 1;\n+  else\n+    abort ();\n+\n+  gimplify_function_tree (decl);\n+\n+  /* ??? We will get called LATE in the compilation process.  */\n+  if (cgraph_global_info_ready)\n+    tree_rest_of_compilation (decl, false);\n+  else\n+    cgraph_finalize_function (decl, 0);\n+  \n+  if (targetm.have_ctors_dtors)\n+    {\n+      void (*fn) (rtx, int);\n+\n+      if (which == 'I')\n+\tfn = targetm.asm_out.constructor;\n+      else\n+\tfn = targetm.asm_out.destructor;\n+      fn (XEXP (DECL_RTL (decl), 0), DEFAULT_INIT_PRIORITY);\n+    }\n+}"}, {"sha": "15a6a41873e9204afb4fd6c89b9743ac1b94762f", "filename": "gcc/coverage.c", "status": "modified", "additions": 26, "deletions": 53, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -39,11 +39,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"function.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n-#include \"target.h\"\n #include \"coverage.h\"\n-#include \"libfuncs.h\"\n #include \"langhooks.h\"\n #include \"hashtab.h\"\n+#include \"tree-iterator.h\"\n+#include \"cgraph.h\"\n \n #include \"gcov-io.c\"\n \n@@ -904,69 +904,42 @@ build_gcov_info (void)\n static void\n create_coverage (void)\n {\n-  tree gcov_info, gcov_info_value;\n-  char name[20];\n-  char *ctor_name;\n-  tree ctor;\n-  rtx gcov_info_address;\n+  tree gcov_info, gcov_init, body, t;\n+  char name_buf[32];\n \n   no_coverage = 1; /* Disable any further coverage.  */\n \n   if (!prg_ctr_mask)\n     return;\n \n-  gcov_info_value = build_gcov_info ();\n-\n-  gcov_info = build_decl (VAR_DECL, NULL_TREE, TREE_TYPE (gcov_info_value));\n-  DECL_INITIAL (gcov_info) = gcov_info_value;\n+  t = build_gcov_info ();\n \n+  gcov_info = build_decl (VAR_DECL, NULL_TREE, TREE_TYPE (t));\n   TREE_STATIC (gcov_info) = 1;\n-  ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 0);\n-  DECL_NAME (gcov_info) = get_identifier (name);\n+  ASM_GENERATE_INTERNAL_LABEL (name_buf, \"LPBX\", 0);\n+  DECL_NAME (gcov_info) = get_identifier (name_buf);\n+  DECL_INITIAL (gcov_info) = t;\n \n   /* Build structure.  */\n   assemble_variable (gcov_info, 0, 0, 0);\n \n-  /* Build the constructor function to invoke __gcov_init.  */\n-  ctor_name = concat (IDENTIFIER_POINTER (get_file_function_name ('I')),\n-\t\t      \"_GCOV\", NULL);\n-  ctor = build_decl (FUNCTION_DECL, get_identifier (ctor_name),\n-\t\t     build_function_type (void_type_node, NULL_TREE));\n-  free (ctor_name);\n-  DECL_EXTERNAL (ctor) = 0;\n-\n-  /* It can be a static function as long as collect2 does not have\n-     to scan the object file to find its ctor/dtor routine.  */\n-  TREE_PUBLIC (ctor) = ! targetm.have_ctors_dtors;\n-  TREE_USED (ctor) = 1;\n-  DECL_RESULT (ctor) = build_decl (RESULT_DECL, NULL_TREE, void_type_node);\n-  DECL_UNINLINABLE (ctor) = 1;\n-\n-  rest_of_decl_compilation (ctor, 0, 1, 0);\n-  announce_function (ctor);\n-  current_function_decl = ctor;\n-  make_decl_rtl (ctor, NULL);\n-  init_function_start (ctor);\n-  expand_function_start (ctor, 0);\n-  /* Actually generate the code to call __gcov_init.  */\n-  gcov_info_address = force_reg (Pmode, XEXP (DECL_RTL (gcov_info), 0));\n-  emit_library_call (gcov_init_libfunc, LCT_NORMAL, VOIDmode, 1,\n-\t\t     gcov_info_address, Pmode);\n-\n-  expand_function_end ();\n-  /* Create a dummy BLOCK.  */\n-  DECL_INITIAL (ctor) = make_node (BLOCK);\n-  TREE_USED (DECL_INITIAL (ctor)) = 1;\n-\n-  rest_of_compilation ();\n-\n-  if (! quiet_flag)\n-    fflush (asm_out_file);\n-  current_function_decl = NULL_TREE;\n-\n-  if (targetm.have_ctors_dtors)\n-    targetm.asm_out.constructor (XEXP (DECL_RTL (ctor), 0),\n-\t\t\t\t DEFAULT_INIT_PRIORITY);\n+  /* Build a decl for __gcov_init.  */\n+  t = build_pointer_type (TREE_TYPE (gcov_info));\n+  t = build_function_type_list (void_type_node, t, NULL);\n+  t = build_decl (FUNCTION_DECL, get_identifier (\"__gcov_init\"), t);\n+  TREE_PUBLIC (t) = 1;\n+  DECL_EXTERNAL (t) = 1;\n+  gcov_init = t;\n+\n+  /* Generate a call to __gcov_init(&gcov_info).  */\n+  body = NULL;\n+  t = build_fold_addr_expr (gcov_info);\n+  t = tree_cons (NULL, t, NULL);\n+  t = build_function_call_expr (gcov_init, t);\n+  append_to_statement_list (t, &body);\n+\n+  /* Generate a constructor to run it.  */\n+  cgraph_build_static_cdtor ('I', body);\n }\n \f\n /* Perform file-level initialization. Read in data file, generate name"}, {"sha": "135423a5f6456f89a03121a9703c60dde96e7510", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -1,3 +1,19 @@\n+2004-07-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* class.c (registerClass_libfunc): Remove.\n+\t(init_class_processing): Don't set it.\n+\t(emit_register_classes): Take list_p parameter.  Fill it in\n+\twith _Jv_RegisterClass calls.\n+\t* decl.c (java_init_decl_processing): Don't call\n+\tinit_resource_processing.\n+\t* jcf-parse.c (java_emit_static_constructor): New.\n+\t(java_parse_file): Call it.\n+\t* resource.c (registerResource_libfunc): Remove.\n+\t(init_resource_processing): Remove.\n+\t(write_resource_constructor): Take list_p parameter.  Fill it in\n+\twith _Jv_RegisterResource calls.\n+\t* java-tree.h: Update prototypes.\n+\n 2004-06-29  Bryce McKinlay  <mckinlay@redhat.com>\n \n \tPR java/1262"}, {"sha": "3c0538ad5f3d78c93d3cd9d194b4c23c48465afc", "filename": "gcc/java/class.c", "status": "modified", "additions": 27, "deletions": 50, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -43,6 +43,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"stdio.h\"\n #include \"target.h\"\n #include \"except.h\"\n+#include \"tree-iterator.h\"\n \n /* DOS brain-damage */\n #ifndef O_BINARY\n@@ -62,8 +63,6 @@ static void add_miranda_methods (tree, tree);\n static int assume_compiled (const char *);\n static tree build_symbol_entry (tree);\n \n-static GTY(()) rtx registerClass_libfunc;\n-\n struct obstack temporary_obstack;\n \n /* The compiler generates different code depending on whether or not\n@@ -2276,14 +2275,19 @@ register_class (void)\n /* Emit something to register classes at start-up time.\n \n    The preferred mechanism is through the .jcr section, which contain\n-   a list of pointers to classes which get registered during\n-   constructor invocation time.  The fallback mechanism is to generate\n-   a `constructor' function which calls _Jv_RegisterClass for each\n-   class in this file.  */\n+   a list of pointers to classes which get registered during constructor\n+   invocation time.\n+\n+   The fallback mechanism is to add statements to *LIST_P to call\n+   _Jv_RegisterClass for each class in this file.  These statements will\n+   be added to a static constructor function for this translation unit.  */\n \n void\n-emit_register_classes (void)\n+emit_register_classes (tree *list_p)\n {\n+  if (registered_class == NULL)\n+    return;\n+\n   /* ??? This isn't quite the correct test.  We also have to know\n      that the target is using gcc's crtbegin/crtend objects rather\n      than the ones that come with the operating system.  */\n@@ -2302,48 +2306,21 @@ emit_register_classes (void)\n     }\n   else\n     {\n-      extern tree get_file_function_name (int);\n-      tree init_name = get_file_function_name ('I');\n-      tree init_type = build_function_type (void_type_node, end_params_node);\n-      tree init_decl;\n-      tree t;\n-      location_t saved_loc = input_location;\n-      \n-      init_decl = build_decl (FUNCTION_DECL, init_name, init_type);\n-      SET_DECL_ASSEMBLER_NAME (init_decl, init_name);\n-      DECL_SOURCE_LINE (init_decl) = 0;\n-      TREE_STATIC (init_decl) = 1;\n-      current_function_decl = init_decl;\n-      DECL_INLINE (init_decl) = 0;\n-      DECL_UNINLINABLE (init_decl) = 1;\n-      DECL_RESULT (init_decl) = build_decl (RESULT_DECL, NULL_TREE,\n-\t\t\t\t\t    void_type_node);\n-\n-      /* It can be a static function as long as collect2 does not have\n-         to scan the object file to find its ctor/dtor routine.  */\n-      TREE_PUBLIC (init_decl) = ! targetm.have_ctors_dtors;\n-\n-      /* Suppress spurious warnings.  */\n-      TREE_USED (init_decl) = 1;\n-\n-      pushlevel (0);\n-      make_decl_rtl (init_decl, NULL);\n-      init_function_start (init_decl);\n-      expand_function_start (init_decl, 0);\n-\n-      for ( t = registered_class; t; t = TREE_CHAIN (t))\n-\temit_library_call (registerClass_libfunc, 0, VOIDmode, 1,\n-\t\t\t   XEXP (DECL_RTL (t), 0), Pmode);\n-      input_location = DECL_SOURCE_LOCATION (init_decl);\n-      expand_function_end ();\n-      poplevel (1, 0, 1);\n-      rest_of_compilation ();\n-      current_function_decl = NULL_TREE;\n-\n-      if (targetm.have_ctors_dtors)\n-\t(* targetm.asm_out.constructor) (XEXP (DECL_RTL (init_decl), 0),\n-\t\t\t\t\t DEFAULT_INIT_PRIORITY);\n-      input_location = saved_loc;\n+      tree klass, t, register_class_fn;\n+\n+      t = build_function_type_list (void_type_node, class_ptr_type, NULL);\n+      t = build_decl (FUNCTION_DECL, get_identifier (\"_Jv_RegisterClass\"), t);\n+      TREE_PUBLIC (t) = 1;\n+      DECL_EXTERNAL (t) = 1;\n+      register_class_fn = t;\n+\n+      for (klass = registered_class; klass; klass = TREE_CHAIN (klass))\n+\t{\n+\t  t = build_fold_addr_expr (klass);\n+\t  t = tree_cons (NULL, t, NULL);\n+\t  t = build_function_call_expr (register_class_fn, t);\n+\t  append_to_statement_list (t, list_p);\n+\t}\n     }\n }\n \n@@ -2483,9 +2460,9 @@ emit_catch_table (tree this_class)\n void\n init_class_processing (void)\n {\n-  registerClass_libfunc = gen_rtx_SYMBOL_REF (Pmode, \"_Jv_RegisterClass\");\n   fields_ident = get_identifier (\"fields\");\n   info_ident = get_identifier (\"info\");\n+\n   gcc_obstack_init (&temporary_obstack);\n }\n \f"}, {"sha": "5f2771d3ed314ac4676c0d007cb3649de8c47ee6", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -452,7 +452,6 @@ java_init_decl_processing (void)\n   tree t;\n \n   init_class_processing ();\n-  init_resource_processing ();\n \n   current_function_decl = NULL;\n   current_binding_level = NULL_BINDING_LEVEL;"}, {"sha": "6ebf6db45d655040de1fb1d0fc36d1680e23ce19", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -1245,7 +1245,7 @@ extern tree get_method_index (tree decl);\n extern void make_class_data (tree);\n extern void register_class (void);\n extern int alloc_name_constant (int, tree);\n-extern void emit_register_classes (void);\n+extern void emit_register_classes (tree *);\n extern tree emit_symbol_table (tree, tree, tree, tree, tree);\n extern void lang_init_source (int);\n extern void write_classfile (tree);\n@@ -1341,8 +1341,7 @@ extern void java_inlining_map_static_initializers (tree, void *);\n \n extern void compile_resource_data (const char *name, const char *buffer, int);\n extern void compile_resource_file (const char *, const char *);\n-extern void write_resource_constructor (void);\n-extern void init_resource_processing (void);\n+extern void write_resource_constructor (tree *);\n extern tree build_java_empty_stmt (void);\n extern tree add_stmt_to_compound (tree, tree, tree);\n extern tree java_add_stmt (tree);"}, {"sha": "0503ef9ceebef498be7af8641284262b7f77a6a3", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -875,6 +875,21 @@ predefined_filename_p (tree node)\n   return 0;\n }\n \n+/* Generate a function that does all static initialization for this \n+   translation unit.  */\n+\n+static void\n+java_emit_static_constructor (void)\n+{\n+  tree body = NULL;\n+\n+  emit_register_classes (&body);\n+  write_resource_constructor (&body);\n+\n+  if (body)\n+    cgraph_build_static_cdtor ('I', body);\n+}\n+\n void\n java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n {\n@@ -1013,7 +1028,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n       resource_filename = IDENTIFIER_POINTER (TREE_VALUE (current_file_list));\n       compile_resource_file (resource_name, resource_filename);\n \n-      return;\n+      goto finish;\n     }\n \n   current_jcf = main_jcf;\n@@ -1120,23 +1135,23 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n   input_filename = main_input_filename;\n \n   java_expand_classes ();\n-  if (!java_report_errors () && !flag_syntax_only)\n-    {\n-      /* Expand all classes compiled from source.  */\n-      java_finish_classes ();\n-\n-      /* Emit the .jcf section.  */\n-      emit_register_classes ();\n-\n-      /* Only finalize the compilation unit after we've told cgraph which\n-\t functions have their addresses stored.  */\n-      cgraph_finalize_compilation_unit ();\n-      cgraph_optimize ();\n-    }\n-\n-  write_resource_constructor ();\n+  if (java_report_errors () || flag_syntax_only)\n+    return;\n+    \n+  /* Expand all classes compiled from source.  */\n+  java_finish_classes ();\n+\n+ finish:\n+  /* Arrange for any necessary initialization to happen.  */\n+  java_emit_static_constructor ();\n+\n+  /* Only finalize the compilation unit after we've told cgraph which\n+     functions have their addresses stored.  */\n+  cgraph_finalize_compilation_unit ();\n+  cgraph_optimize ();\n }\n \n+\n /* Return the name of the class corresponding to the name of the file\n    in this zip entry.  The result is newly allocated using ALLOC.  */\n static char *"}, {"sha": "512b903ddba8ffb3cf0cf22902663f0f61ee5f2f", "filename": "gcc/java/resource.c", "status": "modified", "additions": 14, "deletions": 62, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Fjava%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fresource.c?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -41,6 +41,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"stdio.h\"\n #include \"target.h\"\n #include \"expr.h\"\n+#include \"tree-iterator.h\"\n \n /* DOS brain-damage */\n #ifndef O_BINARY\n@@ -50,9 +51,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n /* A list of all the resources files.  */\n static GTY(()) tree resources = NULL;\n \n-/* Function used to register resources.  */\n-static GTY(()) rtx registerResource_libfunc;\n-\n /* Count of all the resources compiled in this invocation.  */\n static int Jr_count = 0;\n \n@@ -101,65 +99,27 @@ compile_resource_data (const char *name, const char *buffer, int length)\n }\n \n void\n-write_resource_constructor (void)\n+write_resource_constructor (tree *list_p)\n {\n-  tree init_name, init_type, init_decl;\n-  tree iter;\n-  location_t saved_loc = input_location;\n-  char *resource_ctor_name;\n+  tree iter, t, register_resource_fn;\n \n-  /* Only do work if required.  */\n-  if (resources == NULL_TREE)\n+  if (resources == NULL)\n     return;\n \n-  resource_ctor_name = concat (IDENTIFIER_POINTER (get_file_function_name ('I')),\n-\t\t\t       \"_resource\", NULL);\n-  init_name = get_identifier (resource_ctor_name);\n-  free (resource_ctor_name);\n-  init_type = build_function_type (void_type_node, end_params_node);\n-\n-  init_decl = build_decl (FUNCTION_DECL, init_name, init_type);\n-  DECL_SOURCE_LINE (init_decl) = 0;\n-  SET_DECL_ASSEMBLER_NAME (init_decl, init_name);\n-  TREE_STATIC (init_decl) = 1;\n-  current_function_decl = init_decl;\n-  DECL_RESULT (init_decl) = build_decl (RESULT_DECL, \n-\t\t\t\t\tNULL_TREE, void_type_node);\n-\n-  /* It can be a static function as long as collect2 does not have\n-     to scan the object file to find its ctor/dtor routine.  */\n-  TREE_PUBLIC (init_decl) = ! targetm.have_ctors_dtors;\n-\n-  /* Suppress spurious warnings.  */\n-  TREE_USED (init_decl) = 1;\n-\n-  pushlevel (0);\n-  make_decl_rtl (init_decl, NULL);\n-  init_function_start (init_decl);\n-  expand_function_start (init_decl, 0);\n+  t = build_function_type_list (void_type_node, ptr_type_node, NULL);\n+  t = build_decl (FUNCTION_DECL, get_identifier (\"_Jv_RegisterResource\"), t);\n+  TREE_PUBLIC (t) = 1;\n+  DECL_EXTERNAL (t) = 1;\n+  register_resource_fn = t;\n \n   /* Write out entries in the same order in which they were defined.  */\n-  for (iter = nreverse (resources); iter != NULL_TREE;\n-       iter = TREE_CHAIN (iter))\n+  for (iter = nreverse (resources); iter ; iter = TREE_CHAIN (iter))\n     {\n-      emit_library_call (registerResource_libfunc, 0, VOIDmode, 1,\n-\t\t\t expand_expr (build_address_of (TREE_VALUE (iter)),\n-\t\t\t\t      0, Pmode, 0),\n-\t\t\t Pmode);\n+      t = build_fold_addr_expr (TREE_VALUE (iter));\n+      t = tree_cons (NULL, t, NULL);\n+      t = build_function_call_expr (register_resource_fn, t);\n+      append_to_statement_list (t, list_p);\n     }\n-\n-  input_location = DECL_SOURCE_LOCATION (init_decl);\n-  expand_function_end ();\n-  poplevel (1, 0, 1);\n-\n-  /* rest_of_compilation forces generation even if -finline-functions.  */\n-  rest_of_compilation ();\n-\n-  current_function_decl = NULL_TREE;\n-  if (targetm.have_ctors_dtors)\n-    targetm.asm_out.constructor (XEXP (DECL_RTL (init_decl), 0),\n-\t\t\t\t DEFAULT_INIT_PRIORITY);\n-  input_location = saved_loc;\n }\n \n /* Generate a byte array representing the contents of FILENAME.  The\n@@ -191,14 +151,6 @@ compile_resource_file (const char *name, const char *filename)\n   close (fd);\n \n   compile_resource_data (name, buffer, stat_buf.st_size);\n-  write_resource_constructor ();\n-}\n-\n-void\n-init_resource_processing (void)\n-{\n-  registerResource_libfunc =\n-    gen_rtx_SYMBOL_REF (Pmode, \"_Jv_RegisterResource\");\n }\n \n #include \"gt-java-resource.h\""}, {"sha": "1a9fe47490f485d980200acdbc38ae6b9f9ea033", "filename": "gcc/libfuncs.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Flibfuncs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Flibfuncs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibfuncs.h?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -45,7 +45,6 @@ enum libfunc_index\n   LTI_profile_function_exit,\n \n   LTI_gcov_flush,\n-  LTI_gcov_init,\n \n   LTI_MAX\n };\n@@ -78,6 +77,5 @@ extern GTY(()) rtx libfunc_table[LTI_MAX];\n #define profile_function_exit_libfunc\t(libfunc_table[LTI_profile_function_exit])\n \n #define gcov_flush_libfunc\t(libfunc_table[LTI_gcov_flush])\n-#define gcov_init_libfunc\t(libfunc_table[LTI_gcov_init])\n \n #endif /* GCC_LIBFUNCS_H */"}, {"sha": "f83dfb5668fda3d668abf8469b0b42a1d988d79b", "filename": "gcc/optabs.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9aa64e97f8ad913c0bfb7897ac187b082d40c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c9b9aa64e97f8ad913c0bfb7897ac187b082d40c", "patch": "@@ -5550,7 +5550,6 @@ init_optabs (void)\n     = init_one_libfunc (\"__cyg_profile_func_exit\");\n \n   gcov_flush_libfunc = init_one_libfunc (\"__gcov_flush\");\n-  gcov_init_libfunc = init_one_libfunc (\"__gcov_init\");\n \n   if (HAVE_conditional_trap)\n     trap_rtx = gen_rtx_fmt_ee (EQ, VOIDmode, NULL_RTX, NULL_RTX);"}]}