{"sha": "e3016344b3c8ca1ede6b31a8b9949998e5274cf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMwMTYzNDRiM2M4Y2ExZWRlNmIzMWE4Yjk5NDk5OThlNTI3NGNmNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-01-31T04:07:41Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-01-31T04:07:41Z"}, "message": "re PR c++/19395 (invalid scope qualifier allowed in typedef)\n\n\tPR c++/19395\n\t* decl.c (grokdeclarator): Refactor code so that qualified names\n\tare never allowed as the declarator in a typedef.\n\n\tPR c++/19367\n\t* name-lookup.c (do_nonmember_using_decl): Avoid overloading\n\tbuiltin declarations.\n\n\tPR c++/19395\n\t* g++.dg/parse/error24.C: New test.\n\n\tPR c++/19367\n\t* g++.dg/lookup/builtin1.C: New test.\n\nFrom-SVN: r94466", "tree": {"sha": "3efc5b87b185b27850c5bc0e135aea691edb8b36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3efc5b87b185b27850c5bc0e135aea691edb8b36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3016344b3c8ca1ede6b31a8b9949998e5274cf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3016344b3c8ca1ede6b31a8b9949998e5274cf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3016344b3c8ca1ede6b31a8b9949998e5274cf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/comments", "author": null, "committer": null, "parents": [{"sha": "8c55a142cd37140dbaaab358404bfdbacd996f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c55a142cd37140dbaaab358404bfdbacd996f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c55a142cd37140dbaaab358404bfdbacd996f8b"}], "stats": {"total": 87, "additions": 57, "deletions": 30}, "files": [{"sha": "0b1f7d1a3dea4943a671d09a7fb2cd4ff48bd9e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e3016344b3c8ca1ede6b31a8b9949998e5274cf7", "patch": "@@ -1,5 +1,13 @@\n 2005-01-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/19395\n+\t* decl.c (grokdeclarator): Refactor code so that qualified names\n+\tare never allowed as the declarator in a typedef.\n+\n+\tPR c++/19367\n+\t* name-lookup.c (do_nonmember_using_decl): Avoid overloading\n+\tbuiltin declarations.\n+\n \tPR c++/19457\n \t* call.c (convert_like_real): Inline call to\n \tdubious_conversion_warnings here."}, {"sha": "e2408e36b823de512de09ebc9dd1d4d1fa17cccd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e3016344b3c8ca1ede6b31a8b9949998e5274cf7", "patch": "@@ -7524,18 +7524,14 @@ grokdeclarator (const cp_declarator *declarator,\n \tTYPE_FOR_JAVA (type) = 1;\n \n       if (decl_context == FIELD)\n-\t{\n-\t  if (constructor_name_p (unqualified_id, current_class_type))\n-\t    pedwarn (\"ISO C++ forbids nested type %qD with same name \"\n-                     \"as enclosing class\",\n-\t\t     unqualified_id);\n-\t  decl = build_lang_decl (TYPE_DECL, unqualified_id, type);\n-\t}\n+\tdecl = build_lang_decl (TYPE_DECL, unqualified_id, type);\n       else\n+\tdecl = build_decl (TYPE_DECL, unqualified_id, type);\n+      if (id_declarator && declarator->u.id.qualifying_scope)\n+\terror (\"%Jtypedef name may not be a nested-name-specifier\", decl);\n+\n+      if (decl_context != FIELD)\n \t{\n-\t  decl = build_decl (TYPE_DECL, unqualified_id, type);\n-\t  if (in_namespace || ctype)\n-\t    error (\"%Jtypedef name may not be a nested-name-specifier\", decl);\n \t  if (!current_function_decl)\n \t    DECL_CONTEXT (decl) = FROB_CONTEXT (current_namespace);\n \t  else if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (current_function_decl)\n@@ -7547,6 +7543,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t       clones.  */\n \t    DECL_ABSTRACT (decl) = 1;\n \t}\n+      else if (constructor_name_p (unqualified_id, current_class_type))\n+\tpedwarn (\"ISO C++ forbids nested type %qD with same name \"\n+\t\t \"as enclosing class\",\n+\t\t unqualified_id);\n \n       /* If the user declares \"typedef struct {...} foo\" then the\n \t struct will have an anonymous name.  Fill that name in now."}, {"sha": "b72ded0903b8d6f88dc175d5e8172ca460f6e8d3", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=e3016344b3c8ca1ede6b31a8b9949998e5274cf7", "patch": "@@ -2036,6 +2036,15 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n \t  oldval = NULL_TREE;\n \t}\n \n+      /* It is impossible to overload a built-in function; any\n+\t explicit declaration eliminates the built-in declaration.\n+\t So, if OLDVAL is a built-in, then we can just pretend it\n+\t isn't there.  */\n+      if (oldval \n+\t  && TREE_CODE (oldval) == FUNCTION_DECL\n+\t  && DECL_ANTICIPATED (oldval))\n+\toldval = NULL_TREE;\n+\n       *newval = oldval;\n       for (tmp = decls.value; tmp; tmp = OVL_NEXT (tmp))\n \t{\n@@ -2059,33 +2068,18 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n \t      else if (compparms (TYPE_ARG_TYPES (TREE_TYPE (new_fn)),\n \t\t  \t\t  TYPE_ARG_TYPES (TREE_TYPE (old_fn))))\n \t\t{\n+\t\t  gcc_assert (!DECL_ANTICIPATED (old_fn));\n+\n \t          /* There was already a non-using declaration in\n \t\t     this scope with the same parameter types. If both\n \t             are the same extern \"C\" functions, that's ok.  */\n                   if (decls_match (new_fn, old_fn))\n-\t\t    {\n-\t\t      /* If the OLD_FN was a builtin, we've seen a real \n-\t\t\t declaration in another namespace.  Use it instead.\n-\t\t\t Set tmp1 to NULL so we can use the existing\n-\t\t\t OVERLOAD logic at the end of this inner loop.\n-\t\t      */\n-\t\t      if (DECL_ANTICIPATED (old_fn))\n-\t\t\t{\n-\t\t\t  gcc_assert (! DECL_ANTICIPATED (new_fn));\n-\t\t\t  tmp1 = NULL;\n-\t\t\t}\n-\t\t      break;\n-\t\t    }\n-\t\t  else if (!DECL_ANTICIPATED (old_fn))\n-\t\t    {\n-\t\t      /* If the OLD_FN was really declared, the\n-\t\t\t declarations don't match.  */\n+\t\t    break;\n+\t\t  else\n+ \t\t    {\n \t\t      error (\"%qD is already declared in this scope\", name);\n \t\t      break;\n \t\t    }\n-\n-\t\t  /* If the OLD_FN was not really there, just ignore\n-\t\t     it and keep going.  */\n \t\t}\n \t    }\n "}, {"sha": "0d7f5306e9d324c64c59e3194481875d416bb734", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3016344b3c8ca1ede6b31a8b9949998e5274cf7", "patch": "@@ -1,5 +1,11 @@\n 2005-01-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/19395\n+\t* g++.dg/parse/error24.C: New test. \n+\n+\tPR c++/19367\n+\t* g++.dg/lookup/builtin1.C: New test.\n+\n \tPR c++/19457\n \t* g++.dg/warn/conv3.C: New test.\n "}, {"sha": "5f25f28896511a7ad2046bb694c371c085ef13a2", "filename": "gcc/testsuite/g++.dg/lookup/builtin1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin1.C?ref=e3016344b3c8ca1ede6b31a8b9949998e5274cf7", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/19367\n+// { dg-do link } \n+\n+void abort (void) { throw 3; }\n+\n+namespace std { using ::abort; }\n+\n+int main ()\n+{\n+  using std::abort;\n+  abort();\n+}"}, {"sha": "c0722504271490234767c8d78b4068c92242fecc", "filename": "gcc/testsuite/g++.dg/parse/error24.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3016344b3c8ca1ede6b31a8b9949998e5274cf7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror24.C?ref=e3016344b3c8ca1ede6b31a8b9949998e5274cf7", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/19395\n+\n+struct A {\n+  typedef int ::X; // { dg-error \"\" }\n+};\n+\n+"}]}