{"sha": "0101807c0345c2e0a714e093b02fc6d694c3cb28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEwMTgwN2MwMzQ1YzJlMGE3MTRlMDkzYjAyZmM2ZDY5NGMzY2IyOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-02-20T16:23:50Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-02-20T16:23:50Z"}, "message": "re PR fortran/45077 (ICE with -fwhole-file in fold_convert_loc, at fold-const.c:2021)\n\n2011-02-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/45077\n\tPR fortran/44945\n\t* trans-types.c (gfc_get_derived_type): Remove code that looks\n\tfor decls in gsym and add call to gfc_get_module_backend_decl.\n\t* trans.h : Add prototype for gfc_get_module_backend_decl.\n\t* trans-decl.c (gfc_get_module_backend_decl): New function.\n\t(gfc_get_symbol_decl): Call it.\n\n2011-02-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/45077\n\tPR fortran/44945\n\t* gfortran.dg/whole_file_28.f90 : New test.\n\t* gfortran.dg/whole_file_29.f90 : New test.\n\nFrom-SVN: r170337", "tree": {"sha": "4ff3a532bee79b4ddcc2dc31cb1cf8024cceab09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ff3a532bee79b4ddcc2dc31cb1cf8024cceab09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0101807c0345c2e0a714e093b02fc6d694c3cb28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0101807c0345c2e0a714e093b02fc6d694c3cb28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0101807c0345c2e0a714e093b02fc6d694c3cb28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0101807c0345c2e0a714e093b02fc6d694c3cb28/comments", "author": null, "committer": null, "parents": [{"sha": "435eeab97f42819b07da3ab02b1e9fe520dd5929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435eeab97f42819b07da3ab02b1e9fe520dd5929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435eeab97f42819b07da3ab02b1e9fe520dd5929"}], "stats": {"total": 170, "additions": 127, "deletions": 43}, "files": [{"sha": "3d98c0a348b1e539004fab56fd09dc1baebb5a93", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0101807c0345c2e0a714e093b02fc6d694c3cb28", "patch": "@@ -1,3 +1,13 @@\n+2011-02-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/45077\n+\tPR fortran/44945\n+\t* trans-types.c (gfc_get_derived_type): Remove code that looks\n+\tfor decls in gsym and add call to gfc_get_module_backend_decl.\n+\t* trans.h : Add prototype for gfc_get_module_backend_decl.\n+\t* trans-decl.c (gfc_get_module_backend_decl): New function.\n+\t(gfc_get_symbol_decl): Call it.\n+\n 2011-02-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/47348"}, {"sha": "2315b231c81d79cccb967100081ae5565f7b89dd", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 63, "deletions": 23, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=0101807c0345c2e0a714e093b02fc6d694c3cb28", "patch": "@@ -632,6 +632,64 @@ gfc_defer_symbol_init (gfc_symbol * sym)\n }\n \n \n+/* Used in gfc_get_symbol_decl and gfc_get_derived_type to obtain the\n+   backend_decl for a module symbol, if it all ready exists.  If the\n+   module gsymbol does not exist, it is created.  If the symbol does\n+   not exist, it is added to the gsymbol namespace.  Returns true if\n+   an existing backend_decl is found.  */\n+\n+bool\n+gfc_get_module_backend_decl (gfc_symbol *sym)\n+{\n+  gfc_gsymbol *gsym;\n+  gfc_symbol *s;\n+  gfc_symtree *st;\n+\n+  gsym =  gfc_find_gsymbol (gfc_gsym_root, sym->module);\n+\n+  if (!gsym || (gsym->ns && gsym->type == GSYM_MODULE))\n+    {\n+      st = NULL;\n+      s = NULL;\n+\n+      if (gsym)\n+\tgfc_find_symbol (sym->name, gsym->ns, 0, &s);\n+\n+      if (!s)\n+\t{\n+\t  if (!gsym)\n+\t    {\n+\t      gsym = gfc_get_gsymbol (sym->module);\n+\t      gsym->type = GSYM_MODULE;\n+\t      gsym->ns = gfc_get_namespace (NULL, 0);\n+\t    }\n+\n+\t  st = gfc_new_symtree (&gsym->ns->sym_root, sym->name);\n+\t  st->n.sym = sym;\n+\t  sym->refs++;\n+\t}\n+      else if (sym->attr.flavor == FL_DERIVED)\n+\t{\n+\t  if (!s->backend_decl)\n+\t    s->backend_decl = gfc_get_derived_type (s);\n+\t  gfc_copy_dt_decls_ifequal (s, sym, true);\n+\t  return true;\n+\t}\n+      else if (s->backend_decl)\n+\t{\n+\t  if (sym->ts.type == BT_DERIVED)\n+\t    gfc_copy_dt_decls_ifequal (s->ts.u.derived, sym->ts.u.derived,\n+\t\t\t\t       true);\n+\t  else if (sym->ts.type == BT_CHARACTER)\n+\t    sym->ts.u.cl->backend_decl = s->ts.u.cl->backend_decl;\n+\t  sym->backend_decl = s->backend_decl;\n+\t  return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n+\n /* Create an array index type variable with function scope.  */\n \n static tree\n@@ -1176,29 +1234,11 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   if (gfc_option.flag_whole_file\n \t&& (sym->attr.flavor == FL_VARIABLE\n \t    || sym->attr.flavor == FL_PARAMETER)\n-\t&& sym->attr.use_assoc && !intrinsic_array_parameter\n-\t&& sym->module)\n-    {\n-      gfc_gsymbol *gsym;\n-\n-      gsym =  gfc_find_gsymbol (gfc_gsym_root, sym->module);\n-      if (gsym && gsym->ns && gsym->type == GSYM_MODULE)\n-\t{\n-\t  gfc_symbol *s;\n-\t  s = NULL;\n-\t  gfc_find_symbol (sym->name, gsym->ns, 0, &s);\n-\t  if (s && s->backend_decl)\n-\t    {\n-\t      if (sym->ts.type == BT_DERIVED)\n-\t\tgfc_copy_dt_decls_ifequal (s->ts.u.derived, sym->ts.u.derived,\n-\t\t\t\t\t   true);\n-\t      if (sym->ts.type == BT_CHARACTER)\n-\t\tsym->ts.u.cl->backend_decl = s->ts.u.cl->backend_decl;\n-\t      sym->backend_decl = s->backend_decl;\n-\t      return sym->backend_decl;\n-\t    }\n-\t}\n-    }\n+\t&& sym->attr.use_assoc\n+\t&& !intrinsic_array_parameter\n+\t&& sym->module\n+\t&& gfc_get_module_backend_decl (sym))\n+    return sym->backend_decl;\n \n   if (sym->attr.flavor == FL_PROCEDURE)\n     {"}, {"sha": "258685e1017f1a7c2e283e64ac273976eb304411", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=0101807c0345c2e0a714e093b02fc6d694c3cb28", "patch": "@@ -2087,7 +2087,7 @@ gfc_add_field_to_struct (tree context, tree name, tree type, tree **chain)\n \n int\n gfc_copy_dt_decls_ifequal (gfc_symbol *from, gfc_symbol *to,\n-\t\t       bool from_gsym)\n+\t\t\t   bool from_gsym)\n {\n   gfc_component *to_cm;\n   gfc_component *from_cm;\n@@ -2160,7 +2160,6 @@ gfc_get_derived_type (gfc_symbol * derived)\n   gfc_component *c;\n   gfc_dt_list *dt;\n   gfc_namespace *ns;\n-  gfc_gsymbol *gsym;\n \n   gcc_assert (derived && derived->attr.flavor == FL_DERIVED);\n \n@@ -2185,27 +2184,13 @@ gfc_get_derived_type (gfc_symbol * derived)\n       return derived->backend_decl;\n     }\n \n-/* If use associated, use the module type for this one.  */\n+  /* If use associated, use the module type for this one.  */\n   if (gfc_option.flag_whole_file\n \t&& derived->backend_decl == NULL\n \t&& derived->attr.use_assoc\n-\t&& derived->module)\n-    {\n-      gsym =  gfc_find_gsymbol (gfc_gsym_root, derived->module);\n-      if (gsym && gsym->ns && gsym->type == GSYM_MODULE)\n-\t{\n-\t  gfc_symbol *s;\n-\t  s = NULL;\n-\t  gfc_find_symbol (derived->name, gsym->ns, 0, &s);\n-\t  if (s)\n-\t    {\n-\t      if (!s->backend_decl)\n-\t\ts->backend_decl = gfc_get_derived_type (s);\n-\t      gfc_copy_dt_decls_ifequal (s, derived, true);\n-\t      goto copy_derived_types;\n-\t    }\n-\t}\n-    }\n+\t&& derived->module\n+\t&& gfc_get_module_backend_decl (derived))\n+    goto copy_derived_types;\n \n   /* If a whole file compilation, the derived types from an earlier\n      namespace can be used as the the canonical type.  */"}, {"sha": "40097a9f8203fb391d1aca5eecf8741932c99940", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=0101807c0345c2e0a714e093b02fc6d694c3cb28", "patch": "@@ -444,6 +444,9 @@ void gfc_build_builtin_function_decls (void);\n /* Set the backend source location of a decl.  */\n void gfc_set_decl_location (tree, locus *);\n \n+/* Get a module symbol backend_decl if possible.  */\n+bool gfc_get_module_backend_decl (gfc_symbol *);\n+\n /* Return the variable decl for a symbol.  */\n tree gfc_get_symbol_decl (gfc_symbol *);\n "}, {"sha": "077200e47bb9584016e3f09748b2a2f24ef96f63", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0101807c0345c2e0a714e093b02fc6d694c3cb28", "patch": "@@ -1,3 +1,10 @@\n+2011-02-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/45077\n+\tPR fortran/44945\n+\t* gfortran.dg/whole_file_28.f90 : New test.\n+\t* gfortran.dg/whole_file_29.f90 : New test.\n+\n 2011-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44118"}, {"sha": "78c848e40e6be31cd13d198ae091535266554965", "filename": "gcc/testsuite/gfortran.dg/whole_file_28.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_28.f90?ref=0101807c0345c2e0a714e093b02fc6d694c3cb28", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! Test the fix for the problem described in PR45077 comments #4 and #5.\n+! Note that the module file is kept for whole_file_29.f90\n+!\n+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>\n+!\n+module iso_red\n+  type, public :: varying_string\n+     character(LEN=1), dimension(:), allocatable :: chars\n+  end type varying_string\n+end module iso_red\n+! DO NOT CLEAN UP THE MODULE FILE - whole_file_29.f90 does it."}, {"sha": "2521dadac2a1d9f11a6a855b6dbfeb99ee2479e0", "filename": "gcc/testsuite/gfortran.dg/whole_file_29.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_29.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0101807c0345c2e0a714e093b02fc6d694c3cb28/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_29.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_29.f90?ref=0101807c0345c2e0a714e093b02fc6d694c3cb28", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! Test the fix for the problem described in PR45077 comments #4 and #5.\n+! Note that the module file from whole_file_28.f90, 'iso_red', is\n+! needed for this test.\n+!\n+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>\n+!\n+module ifiles\n+  use iso_red, string_t => varying_string\n+contains\n+  function line_get_string_advance (line) result (string)\n+    type(string_t) :: string\n+    character :: line\n+  end function line_get_string_advance\n+end module ifiles\n+\n+module syntax_rules\n+  use iso_red, string_t => varying_string\n+  use ifiles, only: line_get_string_advance\n+contains\n+  subroutine syntax_init_from_ifile ()\n+    type(string_t) :: string\n+       string = line_get_string_advance (\"\")\n+  end subroutine syntax_init_from_ifile\n+end module syntax_rules\n+end\n+! { dg-final { cleanup-modules \"syntax_rules ifiles iso_red\" } }"}]}