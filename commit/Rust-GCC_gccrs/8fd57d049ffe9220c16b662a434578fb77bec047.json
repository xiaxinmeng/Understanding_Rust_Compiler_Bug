{"sha": "8fd57d049ffe9220c16b662a434578fb77bec047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkNTdkMDQ5ZmZlOTIyMGMxNmI2NjJhNDM0NTc4ZmI3N2JlYzA0Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-09-28T14:30:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-09-28T14:30:19Z"}, "message": "dwarf2out.c (struct die_struct): Add removed flag.\n\n2016-09-28  Richard Biener  <rguenther@suse.de>\n\n\t* dwarf2out.c (struct die_struct): Add removed flag.\n\t(lookup_type_die): If the DIE is marked as removed, clear\n\tTYPE_SYMTAB_DIE and return NULL.\n\t(lookup_decl_die): If the DIE is marked as removed, remove it\n\tfrom the hash and return NULL.\n\t(mark_removed): New helper.\n\t(prune_unused_types_prune): Call it for removed DIEs.\n\t(gen_subprogram_die): Move the premark_used_types call to after\n\tDIEs for the functions scopes are generated.\n\t(process_scope_var): Do not re-create pruned types or type decls.\n\tMake sure to also re-parent type decls.\n\t(dwarf2out_finish): Move unused type pruning and debug_types\n\thandling ...\n\t(dwarf2out_early_finish): ... here.\n\nFrom-SVN: r240578", "tree": {"sha": "c6323f1bf248fc5410e81f50a55759b27be58c37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6323f1bf248fc5410e81f50a55759b27be58c37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fd57d049ffe9220c16b662a434578fb77bec047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd57d049ffe9220c16b662a434578fb77bec047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd57d049ffe9220c16b662a434578fb77bec047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd57d049ffe9220c16b662a434578fb77bec047/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf07c3ded0fdfe4c73b2a83a78126cd60973e0ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf07c3ded0fdfe4c73b2a83a78126cd60973e0ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf07c3ded0fdfe4c73b2a83a78126cd60973e0ba"}], "stats": {"total": 123, "additions": 90, "deletions": 33}, "files": [{"sha": "c03ac5358ef18cb7d1c10d231cdbc64c663d87b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd57d049ffe9220c16b662a434578fb77bec047/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd57d049ffe9220c16b662a434578fb77bec047/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fd57d049ffe9220c16b662a434578fb77bec047", "patch": "@@ -1,3 +1,20 @@\n+2016-09-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* dwarf2out.c (struct die_struct): Add removed flag.\n+\t(lookup_type_die): If the DIE is marked as removed, clear\n+\tTYPE_SYMTAB_DIE and return NULL.\n+\t(lookup_decl_die): If the DIE is marked as removed, remove it\n+\tfrom the hash and return NULL.\n+\t(mark_removed): New helper.\n+\t(prune_unused_types_prune): Call it for removed DIEs.\n+\t(gen_subprogram_die): Move the premark_used_types call to after\n+\tDIEs for the functions scopes are generated.\n+\t(process_scope_var): Do not re-create pruned types or type decls.\n+\tMake sure to also re-parent type decls.\n+\t(dwarf2out_finish): Move unused type pruning and debug_types\n+\thandling ...\n+\t(dwarf2out_early_finish): ... here.\n+\n 2016-09-29  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-c.c: New file."}, {"sha": "b6d6aceb9177c72ccdc99ec83cbd1d3af573fd59", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 73, "deletions": 33, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd57d049ffe9220c16b662a434578fb77bec047/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd57d049ffe9220c16b662a434578fb77bec047/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8fd57d049ffe9220c16b662a434578fb77bec047", "patch": "@@ -2687,6 +2687,10 @@ typedef struct GTY((chain_circular (\"%h.die_sib\"), for_user)) die_struct {\n   /* Die is used and must not be pruned as unused.  */\n   BOOL_BITFIELD die_perennial_p : 1;\n   BOOL_BITFIELD comdat_type_p : 1; /* DIE has a type signature */\n+  /* Whether this DIE was removed from the DIE tree, for example via\n+     prune_unused_types.  We don't consider those present from the\n+     DIE lookup routines.  */\n+  BOOL_BITFIELD removed : 1;\n   /* Lots of spare bits.  */\n }\n die_node;\n@@ -5066,7 +5070,13 @@ new_die (enum dwarf_tag tag_value, dw_die_ref parent_die, tree t)\n static inline dw_die_ref\n lookup_type_die (tree type)\n {\n-  return TYPE_SYMTAB_DIE (type);\n+  dw_die_ref die = TYPE_SYMTAB_DIE (type);\n+  if (die && die->removed)\n+    {\n+      TYPE_SYMTAB_DIE (type) = NULL;\n+      return NULL;\n+    }\n+  return die;\n }\n \n /* Given a TYPE_DIE representing the type TYPE, if TYPE is an\n@@ -5131,7 +5141,16 @@ decl_die_hasher::equal (die_node *x, tree y)\n static inline dw_die_ref\n lookup_decl_die (tree decl)\n {\n-  return decl_die_table->find_with_hash (decl, DECL_UID (decl));\n+  dw_die_ref *die = decl_die_table->find_slot_with_hash (decl, DECL_UID (decl),\n+\t\t\t\t\t\t\t NO_INSERT);\n+  if (!die)\n+    return NULL;\n+  if ((*die)->removed)\n+    {\n+      decl_die_table->clear_slot (die);\n+      return NULL;\n+    }\n+  return *die;\n }\n \n /* Returns a hash value for X (which really is a var_loc_list).  */\n@@ -20415,8 +20434,6 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n   int declaration = (current_function_decl != decl\n \t\t     || class_or_namespace_scope_p (context_die));\n \n-  premark_used_types (DECL_STRUCT_FUNCTION (decl));\n-\n   /* Now that the C++ front end lazily declares artificial member fns, we\n      might need to retrofit the declaration into its class.  */\n   if (!declaration && !origin && !old_die\n@@ -21138,6 +21155,9 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       call_site_count = -1;\n       tail_call_site_count = -1;\n     }\n+\n+  /* Mark used types after we have created DIEs for the functions scopes.  */\n+  premark_used_types (DECL_STRUCT_FUNCTION (decl));\n }\n \n /* Returns a hash value for X (which really is a die_struct).  */\n@@ -23221,9 +23241,16 @@ process_scope_var (tree stmt, tree decl, tree origin, dw_die_ref context_die)\n \n   if (TREE_CODE (decl_or_origin) == FUNCTION_DECL)\n     die = lookup_decl_die (decl_or_origin);\n-  else if (TREE_CODE (decl_or_origin) == TYPE_DECL\n-           && TYPE_DECL_IS_STUB (decl_or_origin))\n-    die = lookup_type_die (TREE_TYPE (decl_or_origin));\n+  else if (TREE_CODE (decl_or_origin) == TYPE_DECL)\n+    {\n+      if (TYPE_DECL_IS_STUB (decl_or_origin))\n+\tdie = lookup_type_die (TREE_TYPE (decl_or_origin));\n+      else\n+\tdie = lookup_decl_die (decl_or_origin);\n+      /* Avoid re-creating the DIE late if it was optimized as unused early.  */\n+      if (! die && ! early_dwarf)\n+\treturn;\n+    }\n   else\n     die = NULL;\n \n@@ -26176,6 +26203,16 @@ prune_unused_types_update_strings (dw_die_ref die)\n       }\n }\n \n+/* Mark DIE and its children as removed.  */\n+\n+static void\n+mark_removed (dw_die_ref die)\n+{\n+  dw_die_ref c;\n+  die->removed = true;\n+  FOR_EACH_CHILD (die, c, mark_removed (c));\n+}\n+\n /* Remove from the tree DIE any dies that aren't marked.  */\n \n static void\n@@ -26205,12 +26242,14 @@ prune_unused_types_prune (dw_die_ref die)\n \t      die->die_child = prev;\n \t    }\n \t  c->die_sib = NULL;\n+\t  mark_removed (c);\n \t  return;\n \t}\n       else\n \t{\n \t  next = c->die_sib;\n \t  c->die_sib = NULL;\n+\t  mark_removed (c);\n \t}\n \n     if (c != prev->die_sib)\n@@ -27816,32 +27855,6 @@ dwarf2out_finish (const char *)\n   resolve_addr (comp_unit_die ());\n   move_marked_base_types ();\n \n-  if (flag_eliminate_unused_debug_types)\n-    prune_unused_types ();\n-\n-  /* Generate separate COMDAT sections for type DIEs. */\n-  if (use_debug_types)\n-    {\n-      break_out_comdat_types (comp_unit_die ());\n-\n-      /* Each new type_unit DIE was added to the limbo die list when created.\n-         Since these have all been added to comdat_type_list, clear the\n-         limbo die list.  */\n-      limbo_die_list = NULL;\n-\n-      /* For each new comdat type unit, copy declarations for incomplete\n-         types to make the new unit self-contained (i.e., no direct\n-         references to the main compile unit).  */\n-      for (ctnode = comdat_type_list; ctnode != NULL; ctnode = ctnode->next)\n-        copy_decls_for_unworthy_types (ctnode->root_die);\n-      copy_decls_for_unworthy_types (comp_unit_die ());\n-\n-      /* In the process of copying declarations from one unit to another,\n-         we may have left some declarations behind that are no longer\n-         referenced.  Prune them.  */\n-      prune_unused_types ();\n-    }\n-\n   /* Generate separate CUs for each of the include files we've seen.\n      They will go into limbo_die_list.  */\n   if (flag_eliminate_dwarf2_dups)\n@@ -28177,6 +28190,33 @@ dwarf2out_early_finish (const char *filename)\n     }\n   deferred_asm_name = NULL;\n \n+  if (flag_eliminate_unused_debug_types)\n+    prune_unused_types ();\n+\n+  /* Generate separate COMDAT sections for type DIEs. */\n+  if (use_debug_types)\n+    {\n+      break_out_comdat_types (comp_unit_die ());\n+\n+      /* Each new type_unit DIE was added to the limbo die list when created.\n+         Since these have all been added to comdat_type_list, clear the\n+         limbo die list.  */\n+      limbo_die_list = NULL;\n+\n+      /* For each new comdat type unit, copy declarations for incomplete\n+         types to make the new unit self-contained (i.e., no direct\n+         references to the main compile unit).  */\n+      for (comdat_type_node *ctnode = comdat_type_list;\n+\t   ctnode != NULL; ctnode = ctnode->next)\n+        copy_decls_for_unworthy_types (ctnode->root_die);\n+      copy_decls_for_unworthy_types (comp_unit_die ());\n+\n+      /* In the process of copying declarations from one unit to another,\n+         we may have left some declarations behind that are no longer\n+         referenced.  Prune them.  */\n+      prune_unused_types ();\n+    }\n+\n   /* The early debug phase is now finished.  */\n   early_dwarf_finished = true;\n }"}]}