{"sha": "61864771af6d7a5834f9df225b4ddd5542d656b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4NjQ3NzFhZjZkN2E1ODM0ZjlkZjIyNWI0ZGRkNTU0MmQ2NTZiMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2006-02-10T19:22:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-02-10T19:22:58Z"}, "message": "re PR tree-optimization/26213 (new (within last few days) infinite loop with -O1)\n\n\n\tPR tree-optimization/26213\n\t* tree-ssa-threadedge.c (simplify_control_stmt_condition): Do not\n\tloop trying to follow SSA_NAME_VALUE chains.\n\n\t* gcc.c-torture/compile/pr26213.c: New test.\n\nFrom-SVN: r110846", "tree": {"sha": "5d6054da917dffe6c192e92e66570bbe9eaddf9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d6054da917dffe6c192e92e66570bbe9eaddf9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61864771af6d7a5834f9df225b4ddd5542d656b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61864771af6d7a5834f9df225b4ddd5542d656b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61864771af6d7a5834f9df225b4ddd5542d656b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61864771af6d7a5834f9df225b4ddd5542d656b0/comments", "author": null, "committer": null, "parents": [{"sha": "def661340610359e6eea3cdd4189089b3b9b7acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def661340610359e6eea3cdd4189089b3b9b7acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def661340610359e6eea3cdd4189089b3b9b7acd"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "e9225a4faf8c203eb6c185c0e273ab90a6446ee7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61864771af6d7a5834f9df225b4ddd5542d656b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61864771af6d7a5834f9df225b4ddd5542d656b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61864771af6d7a5834f9df225b4ddd5542d656b0", "patch": "@@ -1,3 +1,9 @@\n+2006-02-10  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/26213\n+\t* tree-ssa-threadedge.c (simplify_control_stmt_condition): Do not\n+\tloop trying to follow SSA_NAME_VALUE chains.\n+\n 2006-02-10  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-dfa.c (get_ref_base_and_extent): When computing maxsize"}, {"sha": "b158d4a292da425ccd3bb3381b8b2dd66967eef8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61864771af6d7a5834f9df225b4ddd5542d656b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61864771af6d7a5834f9df225b4ddd5542d656b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61864771af6d7a5834f9df225b4ddd5542d656b0", "patch": "@@ -1,3 +1,7 @@\n+2006-02-10  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.c-torture/compile/pr26213.c: New test.\n+\n 2006-02-10  Steven G. Kargl  <kargls@comcast.net>\n \n \tgfortran.dg/null_1.f90: New test."}, {"sha": "7a6600c18d504e857b8923d2822e724beddc5b52", "filename": "gcc/testsuite/gcc.c-torture/compile/pr26213.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61864771af6d7a5834f9df225b4ddd5542d656b0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr26213.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61864771af6d7a5834f9df225b4ddd5542d656b0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr26213.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr26213.c?ref=61864771af6d7a5834f9df225b4ddd5542d656b0", "patch": "@@ -0,0 +1,15 @@\n+void\n+xnanosleep (_Bool overflow)\n+{\n+  struct { int tv_nsec; } ts_sleep;\n+  if (0 <= ts_sleep.tv_nsec)\n+    overflow |= 1;\n+\n+  for (;;)\n+    {\n+      if (overflow)\n+        ts_sleep.tv_nsec = 0;\n+      if (foo (ts_sleep))\n+        break;\n+    }\n+}"}, {"sha": "cc98867b6eccd34e3be8af446d2a95ca2f6a51ef", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61864771af6d7a5834f9df225b4ddd5542d656b0/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61864771af6d7a5834f9df225b4ddd5542d656b0/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=61864771af6d7a5834f9df225b4ddd5542d656b0", "patch": "@@ -441,10 +441,14 @@ simplify_control_stmt_condition (edge e,\n     {\n       cached_lhs = cond;\n \n-      /* Get the variable's current value from the equivalency chains.  */\n-      while (cached_lhs\n-\t     && TREE_CODE (cached_lhs) == SSA_NAME\n-\t     && SSA_NAME_VALUE (cached_lhs))\n+      /* Get the variable's current value from the equivalency chains.\n+\n+\t It is possible to get loops in the SSA_NAME_VALUE chains\n+\t (consider threading the backedge of a loop where we have\n+\t a loop invariant SSA_NAME used in the condition.  */\n+      if (cached_lhs\n+\t  && TREE_CODE (cached_lhs) == SSA_NAME\n+\t  && SSA_NAME_VALUE (cached_lhs))\n \tcached_lhs = SSA_NAME_VALUE (cached_lhs);\n \n       /* If we're dominated by a suitable ASSERT_EXPR, then"}]}