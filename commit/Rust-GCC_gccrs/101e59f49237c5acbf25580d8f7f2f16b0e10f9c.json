{"sha": "101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxZTU5ZjQ5MjM3YzVhY2JmMjU1ODBkOGY3ZjJmMTZiMGUxMGY5Yw==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "2000-01-18T00:01:06Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "2000-01-18T00:01:06Z"}, "message": "c-parse.in (SAVE_WARN_FLAGS): Create an INTEGER_CST.\n\n\t* c-parse.in (SAVE_WARN_FLAGS): Create an INTEGER_CST.\n\t(RESTORE_WARN_FLAGS): Unpack it.\n\tChange semantic type of extension to ttype.\n\t* c-common.c (split_specs_attrs): Expect an INTEGER_CST.\n\t* c-parse.y, c-parse.c, objc/objc-parse.y,\n\tobjc/objc-parse.c: Regenerate.\n\nFrom-SVN: r31478", "tree": {"sha": "9efb26d31ac8ff1aa8734ad2c269ff7117ddf3eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9efb26d31ac8ff1aa8734ad2c269ff7117ddf3eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/comments", "author": null, "committer": null, "parents": [{"sha": "18990de52b8166a8f5fb71271cf4c12d3c0f0a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18990de52b8166a8f5fb71271cf4c12d3c0f0a47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18990de52b8166a8f5fb71271cf4c12d3c0f0a47"}], "stats": {"total": 106, "additions": 65, "deletions": 41}, "files": [{"sha": "d884eae3d21f85775608d655695a819a2cdf59df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "patch": "@@ -1,3 +1,12 @@\n+2000-01-18  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* c-parse.in (SAVE_WARN_FLAGS): Create an INTEGER_CST.\n+\t(RESTORE_WARN_FLAGS): Unpack it.\n+\tChange semantic type of extension to ttype.\n+\t* c-common.c (split_specs_attrs): Expect an INTEGER_CST.\n+\t* c-parse.y, c-parse.c, objc/objc-parse.y, \n+\tobjc/objc-parse.c: Regenerate.\n+\n 2000-01-17  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* fixinc/fixlib.c: Add copyright notice."}, {"sha": "0ce1ff19a4fc8163534f846c46309e8f891af413", "filename": "gcc/c-common.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "patch": "@@ -1079,6 +1079,15 @@ split_specs_attrs (specs_attrs, declspecs, prefix_attributes)\n {\n   tree t, s, a, next, specs, attrs;\n \n+  /* This can happen after an __extension__ in pedantic mode.  */\n+  if (specs_attrs != NULL_TREE \n+      && TREE_CODE (specs_attrs) == INTEGER_CST)\n+    {\n+      *declspecs = NULL_TREE;\n+      *prefix_attributes = NULL_TREE;\n+      return;\n+    }\n+\n   /* This can happen in c++ (eg: decl: typespec initdecls ';').  */\n   if (specs_attrs != NULL_TREE\n       && TREE_CODE (specs_attrs) != TREE_LIST)"}, {"sha": "e4b1f39ead1716f654a392d9354e57946b17211a", "filename": "gcc/c-parse.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.c?ref=101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "patch": "@@ -1,6 +1,7 @@\n \n /*  A Bison parser, made from c-parse.y\n-    by GNU Bison version 1.28  */\n+ by  GNU Bison version 1.27\n+  */\n \n #define YYBISON 1  /* Identify Bison output.  */\n \n@@ -98,7 +99,7 @@ const char * const language_string = \"GNU C\";\n #line 64 \"c-parse.y\"\n typedef union {long itype; tree ttype; enum tree_code code;\n \tchar *filename; int lineno; int ends_in_label; } YYSTYPE;\n-#line 186 \"c-parse.y\"\n+#line 184 \"c-parse.y\"\n \n /* Number of statements (loosely speaking) and compound statements \n    seen so far.  */\n@@ -122,9 +123,11 @@ static int undeclared_variable_notice;\n \n /* For __extension__, save/restore the warning flags which are\n    controlled by __extension__.  */\n-#define SAVE_WARN_FLAGS() (pedantic | (warn_pointer_arith << 1))\n-#define RESTORE_WARN_FLAGS(val) \\\n+#define SAVE_WARN_FLAGS()\t\\\n+\tbuild_int_2 (pedantic | (warn_pointer_arith << 1), 0)\n+#define RESTORE_WARN_FLAGS(tval) \\\n   do {                                     \\\n+    int val = TREE_INT_CST_LOW (tval);     \\\n     pedantic = val & 1;                    \\\n     warn_pointer_arith = (val >> 1) & 1;   \\\n   } while (0)\n@@ -1263,8 +1266,8 @@ static const short yycheck[] = {    38,\n     51,    52,    53,    54\n };\n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/share/misc/bison.simple\"\n-/* This file comes from bison-1.28.  */\n+#line 3 \"/usr/share/bison.simple\"\n+/* This file comes from bison-1.27.  */\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -1477,7 +1480,7 @@ __yy_memcpy (char *to, char *from, unsigned int count)\n #endif\n #endif\n \f\n-#line 217 \"/usr/share/misc/bison.simple\"\n+#line 216 \"/usr/share/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -1842,7 +1845,7 @@ case 9:\n     break;}\n case 10:\n #line 270 \"c-parse.y\"\n-{ RESTORE_WARN_FLAGS (yyvsp[-1].itype); ;\n+{ RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 11:\n #line 275 \"c-parse.y\"\n@@ -2012,7 +2015,7 @@ case 46:\n case 47:\n #line 406 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n-\t\t  RESTORE_WARN_FLAGS (yyvsp[-1].itype); ;\n+\t\t  RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 48:\n #line 409 \"c-parse.y\"\n@@ -2511,7 +2514,7 @@ case 126:\n     break;}\n case 127:\n #line 864 \"c-parse.y\"\n-{ RESTORE_WARN_FLAGS (yyvsp[-1].itype); ;\n+{ RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 128:\n #line 874 \"c-parse.y\"\n@@ -3065,7 +3068,7 @@ case 271:\n case 272:\n #line 1441 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n-\t\t  RESTORE_WARN_FLAGS (yyvsp[-1].itype); ;\n+\t\t  RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 274:\n #line 1448 \"c-parse.y\"\n@@ -3882,13 +3885,13 @@ case 406:\n     break;}\n case 407:\n #line 2272 \"c-parse.y\"\n-{ yyval.itype = SAVE_WARN_FLAGS();\n+{ yyval.ttype = SAVE_WARN_FLAGS();\n \t\t  pedantic = 0;\n \t\t  warn_pointer_arith = 0; ;\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 543 \"/usr/share/misc/bison.simple\"\n+#line 542 \"/usr/share/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;"}, {"sha": "80ed5c3b925f780cc1282b9c948af2bd296bd201", "filename": "gcc/c-parse.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "patch": "@@ -166,7 +166,7 @@ end ifc\n %type <ttype> init maybeasm\n %type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers\n %type <ttype> maybe_attribute attributes attribute attribute_list attrib\n-%type <ttype> any_word\n+%type <ttype> any_word extension\n \n %type <ttype> compstmt compstmt_nostart compstmt_primary_start\n \n@@ -185,8 +185,6 @@ end ifc\n %type <ttype> parmlist_or_identifiers parmlist_or_identifiers_1\n %type <ttype> identifiers_or_typenames\n \n-%type <itype> extension\n-\n %type <itype> setspecs\n \n %type <ends_in_label> lineno_stmt_or_label lineno_stmt_or_labels stmt_or_label\n@@ -231,9 +229,11 @@ static int undeclared_variable_notice;\n \n /* For __extension__, save/restore the warning flags which are\n    controlled by __extension__.  */\n-#define SAVE_WARN_FLAGS() (pedantic | (warn_pointer_arith << 1))\n-#define RESTORE_WARN_FLAGS(val) \\\n+#define SAVE_WARN_FLAGS()\t\\\n+\tbuild_int_2 (pedantic | (warn_pointer_arith << 1), 0)\n+#define RESTORE_WARN_FLAGS(tval) \\\n   do {                                     \\\n+    int val = TREE_INT_CST_LOW (tval);     \\\n     pedantic = val & 1;                    \\\n     warn_pointer_arith = (val >> 1) & 1;   \\\n   } while (0)"}, {"sha": "44fe723dafb8295ed57a82bb4aa8e9b842e4a328", "filename": "gcc/c-parse.y", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "patch": "@@ -154,7 +154,7 @@ const char * const language_string = \"GNU C\";\n %type <ttype> init maybeasm\n %type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers\n %type <ttype> maybe_attribute attributes attribute attribute_list attrib\n-%type <ttype> any_word\n+%type <ttype> any_word extension\n \n %type <ttype> compstmt compstmt_nostart compstmt_primary_start\n \n@@ -173,8 +173,6 @@ const char * const language_string = \"GNU C\";\n %type <ttype> parmlist_or_identifiers parmlist_or_identifiers_1\n %type <ttype> identifiers_or_typenames\n \n-%type <itype> extension\n-\n %type <itype> setspecs\n \n %type <ends_in_label> lineno_stmt_or_label lineno_stmt_or_labels stmt_or_label\n@@ -206,9 +204,11 @@ static int undeclared_variable_notice;\n \n /* For __extension__, save/restore the warning flags which are\n    controlled by __extension__.  */\n-#define SAVE_WARN_FLAGS() (pedantic | (warn_pointer_arith << 1))\n-#define RESTORE_WARN_FLAGS(val) \\\n+#define SAVE_WARN_FLAGS()\t\\\n+\tbuild_int_2 (pedantic | (warn_pointer_arith << 1), 0)\n+#define RESTORE_WARN_FLAGS(tval) \\\n   do {                                     \\\n+    int val = TREE_INT_CST_LOW (tval);     \\\n     pedantic = val & 1;                    \\\n     warn_pointer_arith = (val >> 1) & 1;   \\\n   } while (0)"}, {"sha": "a2e0ff8a08b79da9fc87517f842f65650dd5efbd", "filename": "gcc/objc/objc-parse.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fobjc%2Fobjc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fobjc%2Fobjc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.c?ref=101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "patch": "@@ -1,6 +1,7 @@\n \n /*  A Bison parser, made from objc-parse.y\n-    by GNU Bison version 1.28  */\n+ by  GNU Bison version 1.27\n+  */\n \n #define YYBISON 1  /* Identify Bison output.  */\n \n@@ -99,7 +100,7 @@ const char * const language_string = \"GNU Obj-C\";\n #line 65 \"objc-parse.y\"\n typedef union {long itype; tree ttype; enum tree_code code;\n \tchar *filename; int lineno; int ends_in_label; } YYSTYPE;\n-#line 198 \"objc-parse.y\"\n+#line 196 \"objc-parse.y\"\n \n /* Number of statements (loosely speaking) and compound statements \n    seen so far.  */\n@@ -123,9 +124,11 @@ static int undeclared_variable_notice;\n \n /* For __extension__, save/restore the warning flags which are\n    controlled by __extension__.  */\n-#define SAVE_WARN_FLAGS() (pedantic | (warn_pointer_arith << 1))\n-#define RESTORE_WARN_FLAGS(val) \\\n+#define SAVE_WARN_FLAGS()\t\\\n+\tbuild_int_2 (pedantic | (warn_pointer_arith << 1), 0)\n+#define RESTORE_WARN_FLAGS(tval) \\\n   do {                                     \\\n+    int val = TREE_INT_CST_LOW (tval);     \\\n     pedantic = val & 1;                    \\\n     warn_pointer_arith = (val >> 1) & 1;   \\\n   } while (0)\n@@ -1746,8 +1749,8 @@ static const short yycheck[] = {    56,\n     46,    47,    48,    49,    50,    51,    52,    53,    54\n };\n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/share/misc/bison.simple\"\n-/* This file comes from bison-1.28.  */\n+#line 3 \"/usr/share/bison.simple\"\n+/* This file comes from bison-1.27.  */\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -1960,7 +1963,7 @@ __yy_memcpy (char *to, char *from, unsigned int count)\n #endif\n #endif\n \f\n-#line 217 \"/usr/share/misc/bison.simple\"\n+#line 216 \"/usr/share/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -2325,7 +2328,7 @@ case 10:\n     break;}\n case 11:\n #line 294 \"objc-parse.y\"\n-{ RESTORE_WARN_FLAGS (yyvsp[-1].itype); ;\n+{ RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 12:\n #line 299 \"objc-parse.y\"\n@@ -2495,7 +2498,7 @@ case 49:\n case 50:\n #line 432 \"objc-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n-\t\t  RESTORE_WARN_FLAGS (yyvsp[-1].itype); ;\n+\t\t  RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 51:\n #line 435 \"objc-parse.y\"\n@@ -3093,7 +3096,7 @@ case 136:\n     break;}\n case 137:\n #line 982 \"objc-parse.y\"\n-{ RESTORE_WARN_FLAGS (yyvsp[-1].itype); ;\n+{ RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 138:\n #line 992 \"objc-parse.y\"\n@@ -3652,7 +3655,7 @@ case 282:\n case 283:\n #line 1569 \"objc-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n-\t\t  RESTORE_WARN_FLAGS (yyvsp[-1].itype); ;\n+\t\t  RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 285:\n #line 1576 \"objc-parse.y\"\n@@ -4471,7 +4474,7 @@ case 417:\n     break;}\n case 418:\n #line 2402 \"objc-parse.y\"\n-{ yyval.itype = SAVE_WARN_FLAGS();\n+{ yyval.ttype = SAVE_WARN_FLAGS();\n \t\t  pedantic = 0;\n \t\t  warn_pointer_arith = 0; ;\n     break;}\n@@ -5150,7 +5153,7 @@ case 570:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 543 \"/usr/share/misc/bison.simple\"\n+#line 542 \"/usr/share/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;"}, {"sha": "1b03e8c83da721a43410a08a8e4a140013a0b587", "filename": "gcc/objc/objc-parse.y", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fobjc%2Fobjc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101e59f49237c5acbf25580d8f7f2f16b0e10f9c/gcc%2Fobjc%2Fobjc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.y?ref=101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "patch": "@@ -155,7 +155,7 @@ const char * const language_string = \"GNU Obj-C\";\n %type <ttype> init maybeasm\n %type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers\n %type <ttype> maybe_attribute attributes attribute attribute_list attrib\n-%type <ttype> any_word\n+%type <ttype> any_word extension\n \n %type <ttype> compstmt compstmt_nostart compstmt_primary_start\n \n@@ -174,8 +174,6 @@ const char * const language_string = \"GNU Obj-C\";\n %type <ttype> parmlist_or_identifiers parmlist_or_identifiers_1\n %type <ttype> identifiers_or_typenames\n \n-%type <itype> extension\n-\n %type <itype> setspecs\n \n %type <ends_in_label> lineno_stmt_or_label lineno_stmt_or_labels stmt_or_label\n@@ -218,9 +216,11 @@ static int undeclared_variable_notice;\n \n /* For __extension__, save/restore the warning flags which are\n    controlled by __extension__.  */\n-#define SAVE_WARN_FLAGS() (pedantic | (warn_pointer_arith << 1))\n-#define RESTORE_WARN_FLAGS(val) \\\n+#define SAVE_WARN_FLAGS()\t\\\n+\tbuild_int_2 (pedantic | (warn_pointer_arith << 1), 0)\n+#define RESTORE_WARN_FLAGS(tval) \\\n   do {                                     \\\n+    int val = TREE_INT_CST_LOW (tval);     \\\n     pedantic = val & 1;                    \\\n     warn_pointer_arith = (val >> 1) & 1;   \\\n   } while (0)"}]}