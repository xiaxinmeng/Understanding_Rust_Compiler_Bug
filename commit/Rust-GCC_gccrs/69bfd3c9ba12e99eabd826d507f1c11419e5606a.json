{"sha": "69bfd3c9ba12e99eabd826d507f1c11419e5606a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliZmQzYzliYTEyZTk5ZWFiZDgyNmQ1MDdmMWMxMTQxOWU1NjA2YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-07-27T16:02:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-07-27T16:02:27Z"}, "message": "re PR middle-end/28071 (A file that can not be compiled in reasonable time/space)\n\n\tPR rtl-optimization/28071\n\t* global.c (greg_obstack): New obstack.\n\t(allocate_bb_info): Use it.\n\t(free_bb_info): Likewise.\n\t(modify_reg_pav): Likewise.\n\nFrom-SVN: r115776", "tree": {"sha": "0a780a2ce13e176f1482a3fb433d964690bddbf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a780a2ce13e176f1482a3fb433d964690bddbf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69bfd3c9ba12e99eabd826d507f1c11419e5606a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bfd3c9ba12e99eabd826d507f1c11419e5606a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69bfd3c9ba12e99eabd826d507f1c11419e5606a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bfd3c9ba12e99eabd826d507f1c11419e5606a/comments", "author": null, "committer": null, "parents": [{"sha": "482c6ce8854e83bb5d89f367cf2a391e454c4735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/482c6ce8854e83bb5d89f367cf2a391e454c4735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/482c6ce8854e83bb5d89f367cf2a391e454c4735"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "4ebe39ffb02eedaa0e40053852c9818378f521be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bfd3c9ba12e99eabd826d507f1c11419e5606a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bfd3c9ba12e99eabd826d507f1c11419e5606a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69bfd3c9ba12e99eabd826d507f1c11419e5606a", "patch": "@@ -1,3 +1,11 @@\n+2006-07-27  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR rtl-optimization/28071\n+\t* global.c (greg_obstack): New obstack.\n+\t(allocate_bb_info): Use it.\n+\t(free_bb_info): Likewise.\n+\t(modify_reg_pav): Likewise.\n+\n 2006-07-27  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (fold_fixed_mathfn): When long and long long are the"}, {"sha": "7bc9233c43425b302fc9c4cfb7d03e50e4ccd922", "filename": "gcc/global.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bfd3c9ba12e99eabd826d507f1c11419e5606a/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bfd3c9ba12e99eabd826d507f1c11419e5606a/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=69bfd3c9ba12e99eabd826d507f1c11419e5606a", "patch": "@@ -2047,6 +2047,7 @@ struct bb_info\n #define BB_INFO(BB) ((struct bb_info *) (BB)->aux)\n #define BB_INFO_BY_INDEX(N) BB_INFO (BASIC_BLOCK(N))\n \n+static struct bitmap_obstack greg_obstack;\n /* The function allocates the info structures of each basic block.  It\n    also initialized LIVE_PAVIN and LIVE_PAVOUT as if all hard\n    registers were partially available.  */\n@@ -2063,14 +2064,15 @@ allocate_bb_info (void)\n   init = BITMAP_ALLOC (NULL);\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     bitmap_set_bit (init, i);\n+  bitmap_obstack_initialize (&greg_obstack); \n   FOR_EACH_BB (bb)\n     {\n       bb_info = bb->aux;\n-      bb_info->earlyclobber = BITMAP_ALLOC (NULL);\n-      bb_info->avloc = BITMAP_ALLOC (NULL);\n-      bb_info->killed = BITMAP_ALLOC (NULL);\n-      bb_info->live_pavin = BITMAP_ALLOC (NULL);\n-      bb_info->live_pavout = BITMAP_ALLOC (NULL);\n+      bb_info->earlyclobber = BITMAP_ALLOC (&greg_obstack);\n+      bb_info->avloc = BITMAP_ALLOC (&greg_obstack);\n+      bb_info->killed = BITMAP_ALLOC (&greg_obstack);\n+      bb_info->live_pavin = BITMAP_ALLOC (&greg_obstack);\n+      bb_info->live_pavout = BITMAP_ALLOC (&greg_obstack);\n       bitmap_copy (bb_info->live_pavin, init);\n       bitmap_copy (bb_info->live_pavout, init);\n     }\n@@ -2082,18 +2084,7 @@ allocate_bb_info (void)\n static void\n free_bb_info (void)\n {\n-  basic_block bb;\n-  struct bb_info *bb_info;\n-\n-  FOR_EACH_BB (bb)\n-    {\n-      bb_info = BB_INFO (bb);\n-      BITMAP_FREE (bb_info->live_pavout);\n-      BITMAP_FREE (bb_info->live_pavin);\n-      BITMAP_FREE (bb_info->killed);\n-      BITMAP_FREE (bb_info->avloc);\n-      BITMAP_FREE (bb_info->earlyclobber);\n-    }\n+  bitmap_obstack_release (&greg_obstack); \n   free_aux_for_blocks ();\n }\n \n@@ -2415,7 +2406,7 @@ modify_reg_pav (void)\n   CLEAR_HARD_REG_SET (stack_hard_regs);\n   for (i = FIRST_STACK_REG; i <= LAST_STACK_REG; i++)\n     SET_HARD_REG_BIT(stack_hard_regs, i);\n-  stack_regs = BITMAP_ALLOC (NULL);\n+  stack_regs = BITMAP_ALLOC (&greg_obstack);\n   for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n     {\n       COPY_HARD_REG_SET (used, reg_class_contents[reg_preferred_class (i)]);"}]}