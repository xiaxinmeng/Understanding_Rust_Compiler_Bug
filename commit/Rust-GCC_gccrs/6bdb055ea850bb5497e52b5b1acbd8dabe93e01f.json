{"sha": "6bdb055ea850bb5497e52b5b1acbd8dabe93e01f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJkYjA1NWVhODUwYmI1NDk3ZTUyYjViMWFjYmQ4ZGFiZTkzZTAxZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2018-11-21T16:59:59Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-11-21T16:59:59Z"}, "message": "compute discriminator info for overrides\n\nIn some cases of overriding or resetting locations, we might retain\ndiscriminator info from earlier locations, when we should take\ndiscriminator information from the overriding location or reset it.\n\nfor  gcc/ChangeLog\n\n\t* final.c (compute_discriminator): Declare.  Renamed from...\n\t(maybe_set_discriminator): ... this.  Set and return a local.\n\t(override_discriminator): New.\n\t(final_scan_insn_1): Set it.\n\t(notice_source_line): Adjust.  Always set discriminator.\n\nFrom-SVN: r266349", "tree": {"sha": "49c8c6ff0551992afd9ebf079e393428236a7c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49c8c6ff0551992afd9ebf079e393428236a7c08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bdb055ea850bb5497e52b5b1acbd8dabe93e01f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bdb055ea850bb5497e52b5b1acbd8dabe93e01f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bdb055ea850bb5497e52b5b1acbd8dabe93e01f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bdb055ea850bb5497e52b5b1acbd8dabe93e01f/comments", "author": null, "committer": null, "parents": [{"sha": "ea6306c7b7cace30efad9582be9d3c50167c91aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6306c7b7cace30efad9582be9d3c50167c91aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6306c7b7cace30efad9582be9d3c50167c91aa"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "88db1c1e15d6b99fd8f268565aa4b97eeeccad15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bdb055ea850bb5497e52b5b1acbd8dabe93e01f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bdb055ea850bb5497e52b5b1acbd8dabe93e01f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bdb055ea850bb5497e52b5b1acbd8dabe93e01f", "patch": "@@ -1,3 +1,11 @@\n+2018-11-21  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* final.c (compute_discriminator): Declare.  Renamed from...\n+\t(maybe_set_discriminator): ... this.  Set and return a local.\n+\t(override_discriminator): New.\n+\t(final_scan_insn_1): Set it.\n+\t(notice_source_line): Adjust.  Always set discriminator.\n+\n 2018-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/87839"}, {"sha": "f707d2fc0bcd934d0c7871db6e70ca0924bbcd05", "filename": "gcc/final.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bdb055ea850bb5497e52b5b1acbd8dabe93e01f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bdb055ea850bb5497e52b5b1acbd8dabe93e01f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6bdb055ea850bb5497e52b5b1acbd8dabe93e01f", "patch": "@@ -128,6 +128,7 @@ static int last_discriminator;\n /* Discriminator to be written to assembly for current instruction.\n    Note: actual usage depends on loc_discriminator_kind setting.  */\n static int discriminator;\n+static inline int compute_discriminator (location_t loc);\n \n /* Discriminator identifying current basic block among others sharing\n    the same locus.  */\n@@ -149,6 +150,7 @@ static const char *last_filename;\n static const char *override_filename;\n static int override_linenum;\n static int override_columnnum;\n+static int override_discriminator;\n \n /* Whether to force emission of a line note before the next insn.  */\n static bool force_source_line = false;\n@@ -2342,6 +2344,7 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t\t  override_filename = LOCATION_FILE (*locus_ptr);\n \t\t  override_linenum = LOCATION_LINE (*locus_ptr);\n \t\t  override_columnnum = LOCATION_COLUMN (*locus_ptr);\n+\t\t  override_discriminator = compute_discriminator (*locus_ptr);\n \t\t}\n \t    }\n \t  break;\n@@ -2379,12 +2382,14 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t\t  override_filename = LOCATION_FILE (*locus_ptr);\n \t\t  override_linenum = LOCATION_LINE (*locus_ptr);\n \t\t  override_columnnum = LOCATION_COLUMN (*locus_ptr);\n+\t\t  override_discriminator = compute_discriminator (*locus_ptr);\n \t\t}\n \t      else\n \t\t{\n \t\t  override_filename = NULL;\n \t\t  override_linenum = 0;\n \t\t  override_columnnum = 0;\n+\t\t  override_discriminator = 0;\n \t\t}\n \t    }\n \t  break;\n@@ -3185,9 +3190,11 @@ map_decl_to_instance (const_tree decl)\n \n /* Set DISCRIMINATOR to the appropriate value, possibly derived from LOC.  */\n \n-static inline void\n-maybe_set_discriminator (location_t loc)\n+static inline int\n+compute_discriminator (location_t loc)\n {\n+  int discriminator;\n+\n   if (!decl_to_instance_map)\n     discriminator = bb_discriminator;\n   else\n@@ -3209,6 +3216,8 @@ maybe_set_discriminator (location_t loc)\n \n       discriminator = map_decl_to_instance (decl);\n     }\n+\n+  return discriminator;\n }\n \n /* Return whether a source line note needs to be emitted before INSN.\n@@ -3234,28 +3243,30 @@ notice_source_line (rtx_insn *insn, bool *is_stmt)\n       filename = xloc.file;\n       linenum = xloc.line;\n       columnnum = xloc.column;\n-      maybe_set_discriminator (loc);\n+      discriminator = compute_discriminator (loc);\n       force_source_line = true;\n     }\n   else if (override_filename)\n     {\n       filename = override_filename;\n       linenum = override_linenum;\n       columnnum = override_columnnum;\n+      discriminator = override_discriminator;\n     }\n   else if (INSN_HAS_LOCATION (insn))\n     {\n       expanded_location xloc = insn_location (insn);\n       filename = xloc.file;\n       linenum = xloc.line;\n       columnnum = xloc.column;\n-      maybe_set_discriminator (INSN_LOCATION (insn));\n+      discriminator = compute_discriminator (INSN_LOCATION (insn));\n     }\n   else\n     {\n       filename = NULL;\n       linenum = 0;\n       columnnum = 0;\n+      discriminator = 0;\n     }\n \n   if (filename == NULL)"}]}