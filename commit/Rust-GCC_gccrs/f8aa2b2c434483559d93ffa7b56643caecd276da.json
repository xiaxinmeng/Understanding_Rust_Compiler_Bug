{"sha": "f8aa2b2c434483559d93ffa7b56643caecd276da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhhYTJiMmM0MzQ0ODM1NTlkOTNmZmE3YjU2NjQzY2FlY2QyNzZkYQ==", "commit": {"author": {"name": "Sebastian Peryt", "email": "sebastian.peryt@intel.com", "date": "2017-07-05T16:44:18Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-07-05T16:44:18Z"}, "message": "Scalar mask and round RTL templates\n\ngcc/\n\t* config/i386/subst.md (mask_scalar, round_scalar,\n\tround_saeonly_scalar): New meta-templates.\n\t(mask_scalar_name, mask_scalar_operand3, round_scalar_name,\n\tround_scalar_mask_operand3, round_scalar_mask_op3,\n\tround_scalar_constraint, round_scalar_prefix, round_saeonly_scalar_name,\n\tround_saeonly_scalar_mask_operand3, round_saeonly_scalar_mask_op3,\n\tround_saeonly_scalar_constraint,\n\tround_saeonly_scalar_prefix): New subst attribute.\n\t* config/i386/sse.md\n\t(<sse>_vm<plusminus_insn><mode>3<mask_name><round_name>): Renamed to ...\n\t<sse>_vm<plusminus_insn><mode>3<mask_scalar_name>\n\t<round_scalar_name> ... this.\n\t(<sse>_vm<multdiv_mnemonic><mode>3<mask_name><round_name>): Renamed to ...\n\t<sse>_vm<multdiv_mnemonic><mode>3<mask_scalar_name>\n\t<round_scalar_name> ... this.\n\t(<sse>_vm<code><mode>3<mask_name><round_saeonly_name>): Renamed to ...\n\t<sse>_vm<code><mode>3<mask_scalar_name>\n\t<round_saeonly_scalar_name> ... this.\n\t(v<plusminus_mnemonic><ssescalarmodesuffix>\n\t\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|\n\t%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}): Changed to ...\n\tv<plusminus_mnemonic><ssescalarmodesuffix>\n\t\\t{<round_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|\n\t%0<mask_scalar_operand3>, %1, %<iptr>2<round_scalar_mask_op3>} ... this.\n\t(v<multdiv_mnemonic><ssescalarmodesuffix>\n\t\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|\n\t%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}): Changed to ...\n\tv<multdiv_mnemonic><ssescalarmodesuffix>\n\t\\t{<round_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|\n\t%0<mask_scalar_operand3>, %1, %<iptr>2<round_scalar_mask_op3>} ... this.\n\t(v<maxmin_float><ssescalarmodesuffix>\n\t\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|\n\t%0<mask_operand3>, %1, %<iptr>2<round_saeonly_mask_op3>}): Changed to ...\n\tv<maxmin_float><ssescalarmodesuffix>\n\t\\t{<round_saeonly_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|\n\t%0<mask_scalar_operand3>, %1, %<iptr>2\n\t<round_saeonly_scalar_mask_op3>} ... this.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-vaddsd-3.c: New test for mask 0 verification.\n\t* gcc.target/i386/avx512f-vaddss-3.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivsd-3.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivss-3.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxsd-3.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxss-3.c: Ditto.\n\t* gcc.target/i386/avx512f-vminsd-3.c: Ditto.\n\t* gcc.target/i386/avx512f-vminss-3.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulsd-3.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulss-3.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubsd-3.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubss-3.c: Ditto.\n\nFrom-SVN: r250006", "tree": {"sha": "f0ae15880ac515b34d43c364e5d4bb1cf5c14908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0ae15880ac515b34d43c364e5d4bb1cf5c14908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8aa2b2c434483559d93ffa7b56643caecd276da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8aa2b2c434483559d93ffa7b56643caecd276da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8aa2b2c434483559d93ffa7b56643caecd276da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8aa2b2c434483559d93ffa7b56643caecd276da/comments", "author": {"login": "speryt", "id": 44768132, "node_id": "MDQ6VXNlcjQ0NzY4MTMy", "avatar_url": "https://avatars.githubusercontent.com/u/44768132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/speryt", "html_url": "https://github.com/speryt", "followers_url": "https://api.github.com/users/speryt/followers", "following_url": "https://api.github.com/users/speryt/following{/other_user}", "gists_url": "https://api.github.com/users/speryt/gists{/gist_id}", "starred_url": "https://api.github.com/users/speryt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/speryt/subscriptions", "organizations_url": "https://api.github.com/users/speryt/orgs", "repos_url": "https://api.github.com/users/speryt/repos", "events_url": "https://api.github.com/users/speryt/events{/privacy}", "received_events_url": "https://api.github.com/users/speryt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75e2d19bc75321122cbe87bc57a5d825dd2fc6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e2d19bc75321122cbe87bc57a5d825dd2fc6df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e2d19bc75321122cbe87bc57a5d825dd2fc6df"}], "stats": {"total": 903, "additions": 891, "deletions": 12}, "files": [{"sha": "3c66d2f4ad0b356c3e1c9002a14b2ba4ed9aede3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -1,3 +1,43 @@\n+2017-07-05  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* config/i386/subst.md (mask_scalar, round_scalar,\n+\tround_saeonly_scalar): New meta-templates.\n+\t(mask_scalar_name, mask_scalar_operand3, round_scalar_name,\n+\tround_scalar_mask_operand3, round_scalar_mask_op3,\n+\tround_scalar_constraint, round_scalar_prefix, round_saeonly_scalar_name,\n+\tround_saeonly_scalar_mask_operand3, round_saeonly_scalar_mask_op3,\n+\tround_saeonly_scalar_constraint,\n+\tround_saeonly_scalar_prefix): New subst attribute.\n+\t* config/i386/sse.md\n+\t(<sse>_vm<plusminus_insn><mode>3<mask_name><round_name>): Renamed to ...\n+\t<sse>_vm<plusminus_insn><mode>3<mask_scalar_name>\n+\t<round_scalar_name> ... this.\n+\t(<sse>_vm<multdiv_mnemonic><mode>3<mask_name><round_name>): Renamed to ...\n+\t<sse>_vm<multdiv_mnemonic><mode>3<mask_scalar_name>\n+\t<round_scalar_name> ... this.\n+\t(<sse>_vm<code><mode>3<mask_name><round_saeonly_name>): Renamed to ...\n+\t<sse>_vm<code><mode>3<mask_scalar_name>\n+\t<round_saeonly_scalar_name> ... this.\n+\t(v<plusminus_mnemonic><ssescalarmodesuffix>\n+\t\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|\n+\t%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}): Changed to ...\n+\tv<plusminus_mnemonic><ssescalarmodesuffix>\n+\t\\t{<round_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|\n+\t%0<mask_scalar_operand3>, %1, %<iptr>2<round_scalar_mask_op3>} ... this.\n+\t(v<multdiv_mnemonic><ssescalarmodesuffix>\n+\t\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|\n+\t%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}): Changed to ...\n+\tv<multdiv_mnemonic><ssescalarmodesuffix>\n+\t\\t{<round_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|\n+\t%0<mask_scalar_operand3>, %1, %<iptr>2<round_scalar_mask_op3>} ... this.\n+\t(v<maxmin_float><ssescalarmodesuffix>\n+\t\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|\n+\t%0<mask_operand3>, %1, %<iptr>2<round_saeonly_mask_op3>}): Changed to ...\n+\tv<maxmin_float><ssescalarmodesuffix>\n+\t\\t{<round_saeonly_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|\n+\t%0<mask_scalar_operand3>, %1, %<iptr>2\n+\t<round_saeonly_scalar_mask_op3>} ... this.\n+\n 2017-07-05  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.c (arm_fixed_condition_code_regs): New function."}, {"sha": "e557b35cd1eb2f7a3d638c9370001700c92cb7bc", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -1568,21 +1568,21 @@\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vm<plusminus_insn><mode>3<mask_name><round_name>\"\n+(define_insn \"<sse>_vm<plusminus_insn><mode>3<mask_scalar_name><round_scalar_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (plusminus:VF_128\n \t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"vector_operand\" \"xBm,<round_constraint>\"))\n+\t    (match_operand:VF_128 2 \"vector_operand\" \"xBm,<round_scalar_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n    <plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n-   v<plusminus_mnemonic><ssescalarmodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}\"\n+   v<plusminus_mnemonic><ssescalarmodesuffix>\\t{<round_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %1, %<iptr>2<round_scalar_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"<round_prefix>\")\n+   (set_attr \"prefix\" \"<round_scalar_prefix>\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_expand \"mul<mode>3<mask_name><round_name>\"\n@@ -1608,21 +1608,21 @@\n    (set_attr \"btver2_decode\" \"direct,double\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vm<multdiv_mnemonic><mode>3<mask_name><round_name>\"\n+(define_insn \"<sse>_vm<multdiv_mnemonic><mode>3<mask_scalar_name><round_scalar_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (multdiv:VF_128\n \t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"vector_operand\" \"xBm,<round_constraint>\"))\n+\t    (match_operand:VF_128 2 \"vector_operand\" \"xBm,<round_scalar_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n    <multdiv_mnemonic><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n-   v<multdiv_mnemonic><ssescalarmodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}\"\n+   v<multdiv_mnemonic><ssescalarmodesuffix>\\t{<round_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %1, %<iptr>2<round_scalar_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse<multdiv_mnemonic>\")\n-   (set_attr \"prefix\" \"<round_prefix>\")\n+   (set_attr \"prefix\" \"<round_scalar_prefix>\")\n    (set_attr \"btver2_decode\" \"direct,double\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -1944,22 +1944,22 @@\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vm<code><mode>3<mask_name><round_saeonly_name>\"\n+(define_insn \"<sse>_vm<code><mode>3<mask_scalar_name><round_saeonly_scalar_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (smaxmin:VF_128\n \t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"vector_operand\" \"xBm,<round_saeonly_constraint>\"))\n+\t    (match_operand:VF_128 2 \"vector_operand\" \"xBm,<round_saeonly_scalar_constraint>\"))\n \t (match_dup 1)\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n    <maxmin_float><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n-   v<maxmin_float><ssescalarmodesuffix>\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_saeonly_mask_op3>}\"\n+   v<maxmin_float><ssescalarmodesuffix>\\t{<round_saeonly_scalar_mask_op3>%2, %1, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %1, %<iptr>2<round_saeonly_scalar_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n    (set_attr \"btver2_sse_attr\" \"maxmin\")\n-   (set_attr \"prefix\" \"<round_saeonly_prefix>\")\n+   (set_attr \"prefix\" \"<round_saeonly_scalar_prefix>\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"avx_addsubv4df3\""}, {"sha": "1c7306efd3e58b50048a4ccfb054ecb81edda6fe", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -236,3 +236,66 @@\n     (match_dup 3)\n     (match_operand:SUBST_V 4 \"vector_move_operand\")\n     (match_operand:<avx512fmaskmode> 5 \"register_operand\")])\n+\n+(define_subst_attr \"mask_scalar_name\" \"mask_scalar\" \"\" \"_mask\")\n+(define_subst_attr \"mask_scalar_operand3\" \"mask_scalar\" \"\" \"%{%4%}%N3\")\n+\n+(define_subst \"mask_scalar\"\n+  [(set (match_operand:SUBST_V 0)\n+\t(vec_merge:SUBST_V\n+\t  (match_operand:SUBST_V 1)\n+\t  (match_operand:SUBST_V 2)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  [(set (match_dup 0)\n+\t(vec_merge:SUBST_V\n+\t  (vec_merge:SUBST_V\n+\t    (match_dup 1)\n+\t    (match_operand:SUBST_V 3 \"vector_move_operand\" \"0C\")\n+\t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n+\t  (match_dup 2)\n+\t  (const_int 1)))])\n+\n+(define_subst_attr \"round_scalar_name\" \"round_scalar\" \"\" \"_round\")\n+(define_subst_attr \"round_scalar_mask_operand3\" \"mask_scalar\" \"%R3\" \"%R5\")\n+(define_subst_attr \"round_scalar_mask_op3\" \"round_scalar\" \"\" \"<round_scalar_mask_operand3>\")\n+(define_subst_attr \"round_scalar_constraint\" \"round_scalar\" \"vm\" \"v\")\n+(define_subst_attr \"round_scalar_prefix\" \"round_scalar\" \"vex\" \"evex\")\n+\n+(define_subst \"round_scalar\"\n+  [(set (match_operand:SUBST_V 0)\n+        (vec_merge:SUBST_V\n+          (match_operand:SUBST_V 1)\n+          (match_operand:SUBST_V 2)\n+          (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  [(set (match_dup 0)\n+\t(unspec:SUBST_V [\n+\t     (vec_merge:SUBST_V\n+\t\t(match_dup 1)\n+\t\t(match_dup 2)\n+\t\t(const_int 1))\n+\t     (match_operand:SI 3 \"const_4_or_8_to_11_operand\")]\n+\t\tUNSPEC_EMBEDDED_ROUNDING))])\n+\n+(define_subst_attr \"round_saeonly_scalar_name\" \"round_saeonly_scalar\" \"\" \"_round\")\n+(define_subst_attr \"round_saeonly_scalar_mask_operand3\" \"mask_scalar\" \"%r3\" \"%r5\")\n+(define_subst_attr \"round_saeonly_scalar_mask_op3\" \"round_saeonly_scalar\" \"\" \"<round_saeonly_scalar_mask_operand3>\")\n+(define_subst_attr \"round_saeonly_scalar_constraint\" \"round_saeonly_scalar\" \"vm\" \"v\")\n+(define_subst_attr \"round_saeonly_scalar_prefix\" \"round_saeonly_scalar\" \"vex\" \"evex\")\n+\n+(define_subst \"round_saeonly_scalar\"\n+  [(set (match_operand:SUBST_V 0)\n+        (vec_merge:SUBST_V\n+          (match_operand:SUBST_V 1)\n+          (match_operand:SUBST_V 2)\n+          (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  [(set (match_dup 0)\n+\t(unspec:SUBST_V [\n+\t     (vec_merge:SUBST_V\n+\t\t(match_dup 1)\n+\t\t(match_dup 2)\n+\t\t(const_int 1))\n+\t     (match_operand:SI 3 \"const48_operand\")]\n+\t\tUNSPEC_EMBEDDED_ROUNDING))])"}, {"sha": "90092cfec7e04af63dc18e302a220b065d821a8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -1,3 +1,18 @@\n+2017-07-05  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vaddsd-3.c: New test for mask 0 verification.\n+\t* gcc.target/i386/avx512f-vaddss-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivsd-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivss-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxsd-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxss-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminsd-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminss-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulsd-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulss-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubsd-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubss-3.c: Ditto.\n+\n 2017-07-05  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/81305"}, {"sha": "fbe09b1220b25237dfd36e089f26c92ab04ea218", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddsd-3.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (double *r, double *s1, double *s2)\n+{\n+  r[0] = s1[0] + s2[0];\n+  r[1] = s1[1];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_add_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_add_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_add_round_sd (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_add_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_add (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  calc_add (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "45fb29594e5c03b3c350fa7899443e0e6e9ac667", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddss-3.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (float *r, float *s1, float *s2)\n+{\n+  r[0] = s1[0] + s2[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_add_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_add_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_add_round_ss (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_add_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_add (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  calc_add (res_ref, src1.a, src2.a);\n+  \n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "0baaf75e194d21ee8e54139b0238671a28cb9304", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivsd-3.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_div (double *r, double *s1, double *s2)\n+{\n+  r[0] = s1[0] / s2[0];\n+  r[1] = s1[1];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_div_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_div_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_div_round_sd (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_div_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_div (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  calc_div (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "d337bb211823ee1b3b4597cf3124e2b5d872bd82", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivss-3.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_div (float *r, float *s1, float *s2)\n+{\n+  r[0] = s1[0] / s2[0];\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_div_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_div_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_div_round_ss (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_div_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_div (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  calc_div (res_ref, src1.a, src2.a);\n+  \n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "95c9c6335af57b522b8a350c8a75609242027a56", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxsd-3.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_max (double *r, double *s1, double *s2)\n+{\n+  r[0] = s1[0] > s2[0] ? s1[0] : s2[0];\n+  r[1] = s1[1];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_max_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_max_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_max_round_sd (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_max_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_max (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  calc_max (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "e40c891001bbb3d498d7541e474896a26ab2b4ab", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxss-3.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_max (float *r, float *s1, float *s2)\n+{\n+  r[0] = s1[0] > s2[0] ? s1[0] : s2[0];\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    {\n+      r[i] = s1[i];\n+    }\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_max_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_max_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_max_round_ss (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_max_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_max (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  calc_max (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "eac806b0f235cdbc0117efdafde301deb9b993c0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminsd-3.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_min (double *r, double *s1, double *s2)\n+{\n+  r[0] = s1[0] < s2[0] ? s1[0] : s2[0];\n+  r[1] = s1[1];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+ \n+  res1.x = _mm_mask_min_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_min_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_min_round_sd (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_min_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_min (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  calc_min (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "0ecddd6803ea336bee6f3d9588e1920b8d15e2a9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminss-3.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_min (float *r, float *s1, float *s2)\n+{\n+  r[0] = s1[0] < s2[0] ? s1[0] : s2[0];\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    {\n+      r[i] = s1[i];\n+    }\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_min_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_min_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_min_round_ss (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_min_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_min (res_ref, src1.a, src2.a);\n+ \n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  calc_min (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "f6afb693e68c1ea2fafca47777614559b14b481f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulsd-3.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_mul (double *r, double *s1, double *s2)\n+{\n+  r[0] = s1[0] * s2[0];\n+  r[1] = s1[1];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_mul_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_mul_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_mul_round_sd (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_mul_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_mul (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  calc_mul (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "3d579905bae5b157d263e64524135d3ab69e93a5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulss-3.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_mul (float *r, float *s1, float *s2)\n+{\n+  r[0] = s1[0] * s2[0];\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_mul_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_mul_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_mul_round_ss (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_mul_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_mul (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  calc_mul (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "d9f79133937a0f67ddb81e248bd4d2152a6b7787", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubsd-3.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_sub (double *r, double *s1, double *s2)\n+{\n+  r[0] = s1[0] - s2[0];\n+  r[1] = s1[1];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_sub_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_sub_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_sub_round_sd (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_sub_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_sub (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  calc_sub (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "bd597c959a683e9dc56ab0046df8bfc37ceb4953", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubss-3.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8aa2b2c434483559d93ffa7b56643caecd276da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-3.c?ref=f8aa2b2c434483559d93ffa7b56643caecd276da", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_sub (float *r, float *s1, float *s2)\n+{\n+  r[0] = s1[0] - s2[0];\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, src1, src2;\n+  MASK_TYPE mask = 0;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = _mm_mask_sub_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_sub_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_mask_sub_round_ss (res3.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_maskz_sub_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_sub (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  calc_sub (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+}\n+"}]}