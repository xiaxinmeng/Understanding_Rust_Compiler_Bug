{"sha": "7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FiYTVhNWZmOTI3MDZiM2RiMmVmM2JmYThkZjIyZWExNGJjMjExOA==", "commit": {"author": {"name": "Chris Demetriou", "email": "cgd@sibyte.com", "date": "2000-05-18T17:53:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-18T17:53:04Z"}, "message": "c-common.h (enum c_tree_index): Add g77 type entries.\n\n        * c-common.h (enum c_tree_index): Add g77 type entries.\n        (g77_integer_type_node, g77_uinteger_type_node): New.\n        (g77_longint_type_node, g77_ulongint_type_node): New.\n        * c-decl.c (init_decl_processing): Initialize them.\n\nCo-Authored-By: Richard Henderson <rth@cygnus.com>\n\nFrom-SVN: r33992", "tree": {"sha": "c3ae46a413ca81be9f5e82070f7c0313b25dbf07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3ae46a413ca81be9f5e82070f7c0313b25dbf07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118/comments", "author": null, "committer": null, "parents": [{"sha": "91542396a697108f57f553951d6ff7c0c03c38d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91542396a697108f57f553951d6ff7c0c03c38d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91542396a697108f57f553951d6ff7c0c03c38d8"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "da4f13157a3661be8e95648ca8ff1a388be27506", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118", "patch": "@@ -1,3 +1,11 @@\n+2000-05-18  Chris Demetriou  <cgd@sibyte.com>\n+\t    Richard Henderson  <rth@cygnus.com>\n+\n+\t* c-common.h (enum c_tree_index): Add g77 type entries.\n+\t(g77_integer_type_node, g77_uinteger_type_node): New.\n+\t(g77_longint_type_node, g77_ulongint_type_node): New.\n+\t* c-decl.c (init_decl_processing): Initialize them.\n+\n 2000-05-18  Richard Henderson  <rth@cygnus.com>\n \n \t* config/h8300/h8300.md (subs patterns): Use %G to negate."}, {"sha": "0d25b2a18b8bc84f0081ae522a96bb2acd0b2174", "filename": "gcc/c-common.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118", "patch": "@@ -45,7 +45,12 @@ enum c_tree_index\n     CTI_VOID_FTYPE_PTR,\n     CTI_INT_FTYPE_INT,\n     CTI_PTR_FTYPE_SIZETYPE,\n-    \n+\n+    CTI_G77_INTEGER_TYPE,\n+    CTI_G77_UINTEGER_TYPE,\n+    CTI_G77_LONGINT_TYPE,\n+    CTI_G77_ULONGINT_TYPE,\n+\n     CTI_MAX\n };\n \n@@ -74,6 +79,12 @@ extern tree c_global_trees[CTI_MAX];\n #define int_ftype_int\t\t\tc_global_trees[CTI_INT_FTYPE_INT]\n #define ptr_ftype_sizetype\t\tc_global_trees[CTI_PTR_FTYPE_SIZETYPE]\n \n+/* g77 integer types, which which must be kept in sync with f/com.h */\n+#define g77_integer_type_node\t\tc_global_trees[CTI_G77_INTEGER_TYPE]\n+#define g77_uinteger_type_node\t\tc_global_trees[CTI_G77_UINTEGER_TYPE]\n+#define g77_longint_type_node\t\tc_global_trees[CTI_G77_LONGINT_TYPE]\n+#define g77_ulongint_type_node\t\tc_global_trees[CTI_G77_ULONGINT_TYPE]\n+\n /* Pointer to function to generate the VAR_DECL for __FUNCTION__ etc.\n    ID is the identifier to use, NAME is the string.\n    TYPE_DEP indicates whether it depends on type of the function or not"}, {"sha": "d1393d4ba9568776d16a07c1f3f721e41303f5d0", "filename": "gcc/c-decl.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=7aba5a5ff92706b3db2ef3bfa8df22ea14bc2118", "patch": "@@ -3034,6 +3034,55 @@ init_decl_processing ()\n     = build_function_type (ptr_type_node,\n \t\t\t   tree_cons (NULL_TREE, ptr_type_node, endlink));\n \n+  /* Types which are common to the fortran compiler and libf2c.  When\n+     changing these, you also need to be concerned with f/com.h. */\n+\n+  if (TYPE_PRECISION (float_type_node)\n+      == TYPE_PRECISION (long_integer_type_node))\n+    {\n+      g77_integer_type_node = long_integer_type_node;\n+      g77_uinteger_type_node = long_unsigned_type_node;\n+    }\n+  else if (TYPE_PRECISION (float_type_node)\n+\t   == TYPE_PRECISION (integer_type_node))\n+    {\n+      g77_integer_type_node = integer_type_node;\n+      g77_uinteger_type_node = unsigned_type_node;\n+    }\n+  else\n+    g77_integer_type_node = g77_uinteger_type_node = NULL_TREE;\n+\n+  if (g77_integer_type_node != NULL_TREE)\n+    {\n+      pushdecl (build_decl (TYPE_DECL, get_identifier (\"__g77_integer\"),\n+\t\t\t    g77_integer_type_node));\n+      pushdecl (build_decl (TYPE_DECL, get_identifier (\"__g77_uinteger\"),\n+\t\t\t    g77_uinteger_type_node));\n+    }\n+\n+  if (TYPE_PRECISION (float_type_node) * 2\n+      == TYPE_PRECISION (long_integer_type_node))\n+    {\n+      g77_longint_type_node = long_integer_type_node;\n+      g77_ulongint_type_node = long_unsigned_type_node;\n+    }\n+  else if (TYPE_PRECISION (float_type_node) * 2\n+\t   == TYPE_PRECISION (long_long_integer_type_node))\n+    {\n+      g77_longint_type_node = long_long_integer_type_node;\n+      g77_ulongint_type_node = long_long_unsigned_type_node;\n+    }\n+  else\n+    g77_longint_type_node = g77_ulongint_type_node = NULL_TREE;\n+\n+  if (g77_longint_type_node != NULL_TREE)\n+    {\n+      pushdecl (build_decl (TYPE_DECL, get_identifier (\"__g77_longint\"),\n+\t\t\t    g77_longint_type_node));\n+      pushdecl (build_decl (TYPE_DECL, get_identifier (\"__g77_ulongint\"),\n+\t\t\t    g77_ulongint_type_node));\n+    }\n+\n   builtin_function (\"__builtin_aggregate_incoming_address\",\n \t\t    build_function_type (ptr_type_node, NULL_TREE),\n \t\t    BUILT_IN_AGGREGATE_INCOMING_ADDRESS,"}]}