{"sha": "5ca3d30cfb7596bbdabf9e644db03526958ba821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNhM2QzMGNmYjc1OTZiYmRhYmY5ZTY0NGRiMDM1MjY5NThiYTgyMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2008-01-31T19:28:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-01-31T19:28:03Z"}, "message": "re PR target/34900 (target mips64vrel-elf. Internal compiler error (in reload_cse_simplify_operands, at postreload.c:392) while building libiberty)\n\ngcc/\n\tPR target/34900\n\t* config/mips/mips.c (gen_load_const_gp): New function, taking a\n\tcomment from...\n\t(mips16_gp_pseudo_reg): ...here.\n\t* config/mips/mips.md (load_const_gp): Replace with...\n\t(load_const_gp_<mode>): ...this :P-based insn.\n\nFrom-SVN: r131983", "tree": {"sha": "9864e508e478cc6dad56de474b61508453a23f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9864e508e478cc6dad56de474b61508453a23f5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ca3d30cfb7596bbdabf9e644db03526958ba821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca3d30cfb7596bbdabf9e644db03526958ba821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ca3d30cfb7596bbdabf9e644db03526958ba821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca3d30cfb7596bbdabf9e644db03526958ba821/comments", "author": null, "committer": null, "parents": [{"sha": "28dac70a082f1433c513b4928bb178062967ba33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28dac70a082f1433c513b4928bb178062967ba33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28dac70a082f1433c513b4928bb178062967ba33"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "007d67b5f0ebe2cfc6a724d9b12979b3df3c8d41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca3d30cfb7596bbdabf9e644db03526958ba821/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca3d30cfb7596bbdabf9e644db03526958ba821/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ca3d30cfb7596bbdabf9e644db03526958ba821", "patch": "@@ -1,3 +1,12 @@\n+2008-01-31  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\tPR target/34900\n+\t* config/mips/mips.c (gen_load_const_gp): New function, taking a\n+\tcomment from...\n+\t(mips16_gp_pseudo_reg): ...here.\n+\t* config/mips/mips.md (load_const_gp): Replace with...\n+\t(load_const_gp_<mode>): ...this :P-based insn.\n+\n 2008-01-31  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* doc/invoke.texi (-ansi): Mention explicitly corresponding -std="}, {"sha": "da8b4aa4c961a0161bc2a505ca7adb7007e73305", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca3d30cfb7596bbdabf9e644db03526958ba821/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca3d30cfb7596bbdabf9e644db03526958ba821/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5ca3d30cfb7596bbdabf9e644db03526958ba821", "patch": "@@ -2161,6 +2161,18 @@ mips_emit_call_insn (rtx pattern, bool lazy_p)\n   return insn;\n }\n \f\n+/* Return an instruction that copies $gp into register REG.  We want\n+   GCC to treat the register's value as constant, so that its value\n+   can be rematerialized on demand.  */\n+\n+static rtx\n+gen_load_const_gp (rtx reg)\n+{\n+  return (Pmode == SImode\n+\t  ? gen_load_const_gp_si (reg)\n+\t  : gen_load_const_gp_di (reg));\n+}\n+\n /* Return a pseudo register that contains the value of $gp throughout\n    the current function.  Such registers are needed by MIPS16 functions,\n    for which $gp itself is not a valid base register or addition operand.  */\n@@ -2179,8 +2191,6 @@ mips16_gp_pseudo_reg (void)\n     {\n       rtx insn, scan, after;\n \n-      /* We want GCC to treat the register's value as constant, so that\n-\t it can be rematerialized on demand.  */\n       insn = gen_load_const_gp (cfun->machine->mips16_gp_pseudo_rtx);\n \n       push_topmost_sequence ();"}, {"sha": "a6ddb8c967f46dadc6a0e4964d82072ba794b0b8", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca3d30cfb7596bbdabf9e644db03526958ba821/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca3d30cfb7596bbdabf9e644db03526958ba821/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=5ca3d30cfb7596bbdabf9e644db03526958ba821", "patch": "@@ -4265,9 +4265,9 @@\n    (set_attr \"mode\" \"<HALFMODE>\")])\n \n ;; Move a constant that satisfies CONST_GP_P into operand 0.\n-(define_expand \"load_const_gp\"\n-  [(set (match_operand 0 \"register_operand\" \"=d\")\n-\t(const (unspec [(const_int 0)] UNSPEC_GP)))])\n+(define_expand \"load_const_gp_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(const:P (unspec:P [(const_int 0)] UNSPEC_GP)))])\n \n ;; Insn to initialize $gp for n32/n64 abicalls.  Operand 0 is the offset\n ;; of _gp from the start of this function.  Operand 1 is the incoming"}]}