{"sha": "4c619132b3f14dc5e672a7f2f0e09cb784193559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM2MTkxMzJiM2YxNGRjNWU2NzJhN2YyZjBlMDljYjc4NDE5MzU1OQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-08T10:46:14Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-08T10:47:55Z"}, "message": "PR tree-optimization/40210: Fold (bswap(X)>>C1)&C2 to (X>>C3)&C2 in match.pd\n\nAll of the optimizations/transformations mentioned in bugzilla for\nPR tree-optimization/40210 are already implemented in mainline GCC,\nwith one exception.  In comment #5, there's a suggestion that\n(bswap64(x)>>56)&0xff can be implemented without the bswap as\n(unsigned char)x, or equivalently x&0xff.\n\nThis patch implements the above optimization, and closely related\nvariants.  For any single bit, (bswap(X)>>C1)&1 can be simplified\nto (X>>C2)&1, where bit position C2 is the appropriate permutation\nof C1.  Similarly, the bswap can eliminated if the desired set of\nbits all lie within the same byte, hence (bswap(x)>>8)&255 can\nalways be optimized, as can (bswap(x)>>8)&123.\n\nPreviously,\nint foo(long long x) {\n  return (__builtin_bswap64(x) >> 56) & 0xff;\n}\n\ncompiled with -O2 to\nfoo:\tmovq    %rdi, %rax\n        bswap   %rax\n        shrq    $56, %rax\n        ret\n\nwith this patch, it now compiles to\nfoo:\tmovzbl  %dil, %eax\n        ret\n\n2021-07-08  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\tPR tree-optimization/40210\n\t* match.pd (bswap optimizations): Simplify (bswap(x)>>C1)&C2 as\n\t(x>>C3)&C2 when possible.  Simplify bswap(x)>>C1 as ((T)x)>>C2\n\twhen possible.  Simplify bswap(x)&C1 as (x>>C2)&C1 when 0<=C1<=255.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/40210\n\t* gcc.dg/builtin-bswap-13.c: New test.\n\t* gcc.dg/builtin-bswap-14.c: New test.", "tree": {"sha": "63d472f471b0c12d4140ad40b0fc3f53630ae5ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63d472f471b0c12d4140ad40b0fc3f53630ae5ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c619132b3f14dc5e672a7f2f0e09cb784193559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c619132b3f14dc5e672a7f2f0e09cb784193559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c619132b3f14dc5e672a7f2f0e09cb784193559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c619132b3f14dc5e672a7f2f0e09cb784193559/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "663a014e77709bfbd4145c605b178169eaf334fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663a014e77709bfbd4145c605b178169eaf334fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/663a014e77709bfbd4145c605b178169eaf334fc"}], "stats": {"total": 699, "additions": 697, "deletions": 2}, "files": [{"sha": "334e8cc0496bebee50f1bf9a06cae0f3c685eae7", "filename": "gcc/match.pd", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c619132b3f14dc5e672a7f2f0e09cb784193559/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c619132b3f14dc5e672a7f2f0e09cb784193559/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=4c619132b3f14dc5e672a7f2f0e09cb784193559", "patch": "@@ -3610,7 +3610,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (complex (convert:itype @0) (negate (convert:itype @1)))))\n \n /* BSWAP simplifications, transforms checked by gcc.dg/builtin-bswap-8.c.  */\n-(for bswap (BUILT_IN_BSWAP16 BUILT_IN_BSWAP32 BUILT_IN_BSWAP64)\n+(for bswap (BUILT_IN_BSWAP16 BUILT_IN_BSWAP32\n+\t    BUILT_IN_BSWAP64 BUILT_IN_BSWAP128)\n  (simplify\n   (bswap (bswap @0))\n   @0)\n@@ -3620,7 +3621,70 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (for bitop (bit_xor bit_ior bit_and)\n   (simplify\n    (bswap (bitop:c (bswap @0) @1))\n-   (bitop @0 (bswap @1)))))\n+   (bitop @0 (bswap @1))))\n+ /* (bswap(x) >> C1) & C2 can sometimes be simplified to (x >> C3) & C2.  */\n+ (simplify\n+  (bit_and (convert1? (rshift@0 (convert2? (bswap@4 @1)) INTEGER_CST@2))\n+\t   INTEGER_CST@3)\n+   (if (BITS_PER_UNIT == 8\n+\t&& tree_fits_uhwi_p (@2)\n+\t&& tree_fits_uhwi_p (@3))\n+    (with\n+     {\n+      unsigned HOST_WIDE_INT prec = TYPE_PRECISION (TREE_TYPE (@4));\n+      unsigned HOST_WIDE_INT bits = tree_to_uhwi (@2);\n+      unsigned HOST_WIDE_INT mask = tree_to_uhwi (@3);\n+      unsigned HOST_WIDE_INT lo = bits & 7;\n+      unsigned HOST_WIDE_INT hi = bits - lo;\n+     }\n+     (if (bits < prec\n+\t  && mask < (256u>>lo)\n+\t  && bits < TYPE_PRECISION (TREE_TYPE(@0)))\n+      (with { unsigned HOST_WIDE_INT ns = (prec - (hi + 8)) + lo; }\n+       (if (ns == 0)\n+\t(bit_and (convert @1) @3)\n+\t(with\n+\t {\n+\t  tree utype = unsigned_type_for (TREE_TYPE (@1));\n+\t  tree nst = build_int_cst (integer_type_node, ns);\n+\t }\n+\t (bit_and (convert (rshift:utype (convert:utype @1) {nst;})) @3))))))))\n+ /* bswap(x) >> C1 can sometimes be simplified to (T)x >> C2.  */\n+ (simplify\n+  (rshift (convert? (bswap@2 @0)) INTEGER_CST@1)\n+   (if (BITS_PER_UNIT == 8\n+\t&& CHAR_TYPE_SIZE == 8\n+\t&& tree_fits_uhwi_p (@1))\n+    (with\n+     {\n+      unsigned HOST_WIDE_INT prec = TYPE_PRECISION (TREE_TYPE (@2));\n+      unsigned HOST_WIDE_INT bits = tree_to_uhwi (@1);\n+     }\n+     (if (bits + 8 == prec)\n+      (if (TYPE_UNSIGNED (type))\n+       (convert (convert:unsigned_char_type_node @0))\n+       (convert (convert:signed_char_type_node @0)))\n+      (if (bits < prec && bits + 8 > prec)\n+       (with \n+\t{\n+\t tree nst = build_int_cst (integer_type_node, bits & 7);\n+\t tree bt = TYPE_UNSIGNED (type) ? unsigned_char_type_node\n+\t\t\t\t\t: signed_char_type_node;\n+\t}\n+\t(convert (rshift:bt (convert:bt @0) {nst;}))))))))\n+ /* bswap(x) & C1 can sometimes be simplified to (x >> C2) & C1.  */\n+ (simplify\n+  (bit_and (convert? (bswap@2 @0)) INTEGER_CST@1)\n+   (if (BITS_PER_UNIT == 8\n+\t&& tree_fits_uhwi_p (@1)\n+\t&& tree_to_uhwi (@1) < 256)\n+    (with\n+     {\n+      unsigned HOST_WIDE_INT prec = TYPE_PRECISION (TREE_TYPE (@2));\n+      tree utype = unsigned_type_for (TREE_TYPE (@0));\n+      tree nst = build_int_cst (integer_type_node, prec - 8);\n+     }\n+     (bit_and (convert (rshift:utype (convert:utype @0) {nst;})) @1)))))\n \n \n /* Combine COND_EXPRs and VEC_COND_EXPRs.  */"}, {"sha": "6dc4c15b45021414f58d5d60460b58b27529d599", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-13.c", "status": "added", "additions": 329, "deletions": 0, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c619132b3f14dc5e672a7f2f0e09cb784193559/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c619132b3f14dc5e672a7f2f0e09cb784193559/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-13.c?ref=4c619132b3f14dc5e672a7f2f0e09cb784193559", "patch": "@@ -0,0 +1,329 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int test_s32_0_1(int x) { return __builtin_bswap32(x) & 1; }\n+int test_s32_0_2(int x) { return __builtin_bswap32(x) & 2; }\n+int test_s32_0_240(int x) { return __builtin_bswap32(x) & 240; }\n+int test_s32_0_255(int x) { return __builtin_bswap32(x) & 255; }\n+int test_s32_1_1(int x) { return (__builtin_bswap32(x) >> 1) & 1; }\n+int test_s32_7_1(int x) { return (__builtin_bswap32(x) >> 7) & 1; }\n+int test_s32_8_1(int x) { return (__builtin_bswap32(x) >> 8) & 1; }\n+int test_s32_8_240(int x) { return (__builtin_bswap32(x) >> 8) & 240; }\n+int test_s32_8_255(int x) { return (__builtin_bswap32(x) >> 8) & 255; }\n+int test_s32_15_1(int x) { return (__builtin_bswap32(x) >> 15) & 1; }\n+int test_s32_16_1(int x) { return (__builtin_bswap32(x) >> 16) & 1; }\n+int test_s32_16_240(int x) { return (__builtin_bswap32(x) >> 16) & 240; }\n+int test_s32_16_255(int x) { return (__builtin_bswap32(x) >> 16) & 255; }\n+int test_s32_24_1(int x) { return (__builtin_bswap32(x) >> 24) & 1; }\n+int test_s32_24_240(int x) { return (__builtin_bswap32(x) >> 24) & 240; }\n+int test_s32_24_255(int x) { return (__builtin_bswap32(x) >> 24) & 255; }\n+int test_s32_31_1(int x) { return (__builtin_bswap32(x) >> 31) & 1; }\n+\n+int test_S32_0_1(int x) { return (int)__builtin_bswap32(x) & 1; }\n+int test_S32_0_2(int x) { return (int)__builtin_bswap32(x) & 2; }\n+int test_S32_0_240(int x) { return (int)__builtin_bswap32(x) & 240; }\n+int test_S32_0_255(int x) { return (int)__builtin_bswap32(x) & 255; }\n+int test_S32_1_1(int x) { return ((int)__builtin_bswap32(x) >> 1) & 1; }\n+int test_S32_7_1(int x) { return ((int)__builtin_bswap32(x) >> 7) & 1; }\n+int test_S32_8_1(int x) { return ((int)__builtin_bswap32(x) >> 8) & 1; }\n+int test_S32_8_240(int x) { return ((int)__builtin_bswap32(x) >> 8) & 240; }\n+int test_S32_8_255(int x) { return ((int)__builtin_bswap32(x) >> 8) & 255; }\n+int test_S32_15_1(int x) { return ((int)__builtin_bswap32(x) >> 15) & 1; }\n+int test_S32_16_1(int x) { return ((int)__builtin_bswap32(x) >> 16) & 1; }\n+int test_S32_16_240(int x) { return ((int)__builtin_bswap32(x) >> 16) & 240; }\n+int test_S32_16_255(int x) { return ((int)__builtin_bswap32(x) >> 16) & 255; }\n+int test_S32_24_1(int x) { return ((int)__builtin_bswap32(x) >> 24) & 1; }\n+int test_S32_24_240(int x) { return ((int)__builtin_bswap32(x) >> 24) & 240; }\n+int test_S32_24_255(int x) { return ((int)__builtin_bswap32(x) >> 24) & 255; }\n+int test_S32_31_1(int x) { return ((int)__builtin_bswap32(x) >> 31) & 1; }\n+\n+unsigned int test_u32_24_255(unsigned int x) {\n+  return (__builtin_bswap32(x) >> 24) & 255;\n+}\n+\n+long long test_s64_0_1(long long x) {\n+  return __builtin_bswap64(x) & 1;\n+}\n+long long test_s64_0_2(long long x) {\n+  return __builtin_bswap64(x) & 2;\n+}\n+long long test_s64_0_240(long long x) {\n+  return __builtin_bswap64(x) & 240;\n+}\n+long long test_s64_0_255(long long x) {\n+  return __builtin_bswap64(x) & 255;\n+}\n+long long test_s64_7_1(long long x) {\n+  return (__builtin_bswap64(x) >> 7) & 1;\n+}\n+long long test_s64_8_1(long long x) {\n+  return (__builtin_bswap64(x) >> 8) & 1;\n+}\n+long long test_s64_8_240(long long x) {\n+  return (__builtin_bswap64(x) >> 56) & 240;\n+}\n+long long test_s64_8_255(long long x) {\n+  return (__builtin_bswap64(x) >> 8) & 255;\n+}\n+long long test_s64_9_1(long long x) {\n+  return (__builtin_bswap64(x) >> 9) & 1;\n+}\n+long long test_s64_31_1(long long x) {\n+  return (__builtin_bswap64(x) >> 31) & 1;\n+}\n+long long test_s64_32_1(long long x) {\n+  return (__builtin_bswap64(x) >> 32) & 1;\n+}\n+long long test_s64_32_240(long long x) {\n+  return (__builtin_bswap64(x) >> 32) & 240;\n+}\n+long long test_s64_32_255(long long x) {\n+  return (__builtin_bswap64(x) >> 32) & 255;\n+}\n+long long test_s64_33_1(long long x) {\n+  return (__builtin_bswap64(x) >> 33) & 1;\n+}\n+long long test_s64_48_1(long long x) {\n+  return (__builtin_bswap64(x) >> 48) & 1;\n+}\n+long long test_s64_48_240(long long x) {\n+  return (__builtin_bswap64(x) >> 48) & 240;\n+}\n+long long test_s64_48_255(long long x) {\n+  return (__builtin_bswap64(x) >> 48) & 255;\n+}\n+long long test_s64_56_1(long long x) {\n+  return (__builtin_bswap64(x) >> 56) & 1;\n+}\n+long long test_s64_56_240(long long x) {\n+  return (__builtin_bswap64(x) >> 56) & 240;\n+}\n+long long test_s64_56_255(long long x) {\n+  return (__builtin_bswap64(x) >> 56) & 255;\n+}\n+long long test_s64_57_1(long long x) {\n+  return (__builtin_bswap64(x) >> 57) & 1;\n+}\n+long long test_s64_63_1(long long x) {\n+  return (__builtin_bswap64(x) >> 63) & 1;\n+}\n+\n+long long test_S64_0_1(long long x) {\n+  return (long long)__builtin_bswap64(x) & 1;\n+}\n+long long test_S64_0_2(long long x) {\n+  return (long long)__builtin_bswap64(x) & 2;\n+}\n+long long test_S64_0_240(long long x) {\n+  return (long long)__builtin_bswap64(x) & 240;\n+}\n+long long test_S64_0_255(long long x) {\n+  return (long long)__builtin_bswap64(x) & 255;\n+}\n+long long test_S64_7_1(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 7) & 1;\n+}\n+long long test_S64_8_1(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 8) & 1;\n+}\n+long long test_S64_8_240(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 56) & 240;\n+}\n+long long test_S64_8_255(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 8) & 255;\n+}\n+long long test_S64_9_1(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 9) & 1;\n+}\n+long long test_S64_31_1(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 31) & 1;\n+}\n+long long test_S64_32_1(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 32) & 1;\n+}\n+long long test_S64_32_240(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 32) & 240;\n+}\n+long long test_S64_32_255(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 32) & 255;\n+}\n+long long test_S64_33_1(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 33) & 1;\n+}\n+long long test_S64_48_1(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 48) & 1;\n+}\n+long long test_S64_48_240(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 48) & 240;\n+}\n+long long test_S64_48_255(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 48) & 255;\n+}\n+long long test_S64_56_1(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 56) & 1;\n+}\n+long long test_S64_56_240(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 56) & 240;\n+}\n+long long test_S64_56_255(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 56) & 255;\n+}\n+long long test_S64_57_1(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 57) & 1;\n+}\n+long long test_S64_63_1(long long x) {\n+  return ((long long)__builtin_bswap64(x) >> 63) & 1;\n+}\n+\n+unsigned long long test_u64_56_255(unsigned long long x) {\n+  return (__builtin_bswap64(x) >> 56) & 255;\n+}\n+\n+short test_s16_0_1(short x) {\n+  return __builtin_bswap16(x) & 1;\n+}\n+short test_s16_0_240(short x) {\n+  return __builtin_bswap16(x) & 240;\n+}\n+short test_s16_0_255(short x) {\n+  return __builtin_bswap16(x) & 255;\n+}\n+short test_s16_1_1(short x) {\n+  return (__builtin_bswap16(x) >> 1) & 1;\n+}\n+short test_s16_7_1(short x) {\n+  return (__builtin_bswap16(x) >> 7) & 1;\n+}\n+short test_s16_8_1(short x) {\n+  return (__builtin_bswap16(x) >> 8) & 1;\n+}\n+short test_s16_8_240(short x) {\n+  return (__builtin_bswap16(x) >> 8) & 240;\n+}\n+short test_s16_8_255(short x) {\n+  return (__builtin_bswap16(x) >> 8) & 255;\n+}\n+short test_s16_9_1(short x) {\n+  return (__builtin_bswap16(x) >> 9) & 1;\n+}\n+short test_s16_15_1(short x) {\n+  return (__builtin_bswap16(x) >> 15) & 1;\n+}\n+\n+short test_S16_0_1(short x) {\n+  return (short)__builtin_bswap16(x) & 1;\n+}\n+short test_S16_0_240(short x) {\n+  return (short)__builtin_bswap16(x) & 240;\n+}\n+short test_S16_0_255(short x) {\n+  return (short)__builtin_bswap16(x) & 255;\n+}\n+short test_S16_1_1(short x) {\n+  return ((short)__builtin_bswap16(x) >> 1) & 1;\n+}\n+short test_S16_7_1(short x) {\n+  return ((short)__builtin_bswap16(x) >> 7) & 1;\n+}\n+short test_S16_8_1(short x) {\n+  return ((short)__builtin_bswap16(x) >> 8) & 1;\n+}\n+short test_S16_8_240(short x) {\n+  return ((short)__builtin_bswap16(x) >> 8) & 240;\n+}\n+short test_S16_8_255(short x) {\n+  return ((short)__builtin_bswap16(x) >> 8) & 255;\n+}\n+short test_S16_9_1(short x) {\n+  return ((short)__builtin_bswap16(x) >> 9) & 1;\n+}\n+short test_S16_15_1(short x) {\n+  return ((short)__builtin_bswap16(x) >> 15) & 1;\n+}\n+\n+unsigned short test_u16_8_255(unsigned short x) {\n+  return (__builtin_bswap16(x) >> 8) & 255;\n+}\n+\n+\n+/* Shifts only */\n+int test_s32_24(int x) {\n+  return __builtin_bswap32(x) >> 24;\n+}\n+int test_s32_25(int x) {\n+  return __builtin_bswap32(x) >> 25;\n+}\n+int test_s32_30(int x) {\n+  return __builtin_bswap32(x) >> 30;\n+}\n+int test_s32_31(int x) {\n+  return __builtin_bswap32(x) >> 31;\n+}\n+\n+unsigned int test_u32_24(unsigned int x) {\n+ return __builtin_bswap32(x) >> 24;\n+}\n+unsigned int test_u32_25(unsigned int x) {\n+ return __builtin_bswap32(x) >> 25;\n+}\n+unsigned int test_u32_30(unsigned int x) {\n+ return __builtin_bswap32(x) >> 30;\n+}\n+unsigned int test_u32_31(unsigned int x) {\n+ return __builtin_bswap32(x) >> 31;\n+}\n+\n+long long test_s64_56(long long x) {\n+  return __builtin_bswap64(x) >> 56;\n+}\n+long long test_s64_57(long long x) {\n+  return __builtin_bswap64(x) >> 57;\n+}\n+long long test_s64_62(long long x) {\n+  return __builtin_bswap64(x) >> 62;\n+}\n+long long test_s64_63(long long x) {\n+  return __builtin_bswap64(x) >> 63;\n+}\n+\n+unsigned long long test_u64_56(unsigned long long x) {\n+  return __builtin_bswap64(x) >> 56;\n+}\n+unsigned long long test_u64_57(unsigned long long x) {\n+  return __builtin_bswap64(x) >> 57;\n+}\n+unsigned long long test_u64_62(unsigned long long x) {\n+  return __builtin_bswap64(x) >> 62;\n+}\n+unsigned long long test_u64_63(unsigned long long x) {\n+  return __builtin_bswap64(x) >> 63;\n+}\n+\n+short test_s16_8(short x) {\n+  return __builtin_bswap16(x) >> 8;\n+}\n+short test_s16_9(short x) {\n+  return __builtin_bswap16(x) >> 9;\n+}\n+short test_s16_14(short x) {\n+  return __builtin_bswap16(x) >> 14;\n+}\n+short test_s16_15(short x) {\n+  return __builtin_bswap16(x) >> 15;\n+}\n+\n+unsigned short test_u16_8(unsigned short x) {\n+  return __builtin_bswap16(x) >> 8;\n+}\n+unsigned short test_u16_9(unsigned short x) {\n+  return __builtin_bswap16(x) >> 9;\n+}\n+unsigned short test_u16_14(unsigned short x) {\n+  return __builtin_bswap16(x) >> 14;\n+}\n+unsigned short test_u16_15(unsigned short x) {\n+  return __builtin_bswap16(x) >> 15;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__builtin_bswap\" \"optimized\" } } */\n+"}, {"sha": "62711d8ef64d4964d901e5d8b780f93c7329008f", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-14.c", "status": "added", "additions": 302, "deletions": 0, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c619132b3f14dc5e672a7f2f0e09cb784193559/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c619132b3f14dc5e672a7f2f0e09cb784193559/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-14.c?ref=4c619132b3f14dc5e672a7f2f0e09cb784193559", "patch": "@@ -0,0 +1,302 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+\n+__attribute__ ((noinline, noclone))\n+static int rt32 (int x, int y, int z) {\n+  return (__builtin_bswap32(x) >> y) & z;\n+}\n+#define TEST32(X,Y,Z) if(((__builtin_bswap32(X)>>Y)&Z)!=rt32(X,Y,Z)) abort()\n+void test32(int x)\n+{\n+  TEST32(x,0,1);\n+  TEST32(x,0,255);\n+  TEST32(x,1,1);\n+  TEST32(x,2,1);\n+  TEST32(x,3,1);\n+  TEST32(x,4,1);\n+  TEST32(x,5,1);\n+  TEST32(x,6,1);\n+  TEST32(x,7,1);\n+  TEST32(x,8,1);\n+  TEST32(x,8,255);\n+  TEST32(x,9,1);\n+  TEST32(x,10,1);\n+  TEST32(x,11,1);\n+  TEST32(x,12,1);\n+  TEST32(x,13,1);\n+  TEST32(x,14,1);\n+  TEST32(x,15,1);\n+  TEST32(x,16,1);\n+  TEST32(x,16,255);\n+  TEST32(x,17,1);\n+  TEST32(x,18,1);\n+  TEST32(x,19,1);\n+  TEST32(x,20,1);\n+  TEST32(x,21,1);\n+  TEST32(x,22,1);\n+  TEST32(x,23,1);\n+  TEST32(x,24,1);\n+  TEST32(x,24,255);\n+  TEST32(x,25,1);\n+  TEST32(x,26,1);\n+  TEST32(x,27,1);\n+  TEST32(x,28,1);\n+  TEST32(x,29,1);\n+  TEST32(x,30,1);\n+  TEST32(x,31,1);\n+}\n+\n+#if __SIZEOF_LONG_LONG__ == 8\n+__attribute__ ((noinline, noclone))\n+static long long rt64 (long long x, int y, long long z) {\n+  return (__builtin_bswap64(x) >> y) & z;\n+}\n+#define TEST64(X,Y,Z) if(((__builtin_bswap64(X)>>Y)&Z)!=rt64(X,Y,Z)) abort()\n+void test64(long long x)\n+{\n+  TEST64(x,0,1);\n+  TEST64(x,0,255);\n+  TEST64(x,1,1);\n+  TEST64(x,2,1);\n+  TEST64(x,3,1);\n+  TEST64(x,4,1);\n+  TEST64(x,5,1);\n+  TEST64(x,6,1);\n+  TEST64(x,7,1);\n+  TEST64(x,8,1);\n+  TEST64(x,8,255);\n+  TEST64(x,9,1);\n+  TEST64(x,10,1);\n+  TEST64(x,11,1);\n+  TEST64(x,12,1);\n+  TEST64(x,13,1);\n+  TEST64(x,14,1);\n+  TEST64(x,15,1);\n+  TEST64(x,16,1);\n+  TEST64(x,16,255);\n+  TEST64(x,17,1);\n+  TEST64(x,18,1);\n+  TEST64(x,19,1);\n+  TEST64(x,20,1);\n+  TEST64(x,21,1);\n+  TEST64(x,22,1);\n+  TEST64(x,23,1);\n+  TEST64(x,24,1);\n+  TEST64(x,24,255);\n+  TEST64(x,25,1);\n+  TEST64(x,26,1);\n+  TEST64(x,27,1);\n+  TEST64(x,28,1);\n+  TEST64(x,29,1);\n+  TEST64(x,30,1);\n+  TEST64(x,31,1);\n+  TEST64(x,32,1);\n+  TEST64(x,32,255);\n+  TEST64(x,33,1);\n+  TEST64(x,34,1);\n+  TEST64(x,35,1);\n+  TEST64(x,36,1);\n+  TEST64(x,37,1);\n+  TEST64(x,38,1);\n+  TEST64(x,39,1);\n+  TEST64(x,40,1);\n+  TEST64(x,40,255);\n+  TEST64(x,41,1);\n+  TEST64(x,42,1);\n+  TEST64(x,43,1);\n+  TEST64(x,44,1);\n+  TEST64(x,45,1);\n+  TEST64(x,46,1);\n+  TEST64(x,47,1);\n+  TEST64(x,48,1);\n+  TEST64(x,48,255);\n+  TEST64(x,49,1);\n+  TEST64(x,50,1);\n+  TEST64(x,51,1);\n+  TEST64(x,52,1);\n+  TEST64(x,53,1);\n+  TEST64(x,54,1);\n+  TEST64(x,55,1);\n+  TEST64(x,56,1);\n+  TEST64(x,56,255);\n+  TEST64(x,57,1);\n+  TEST64(x,58,1);\n+  TEST64(x,59,1);\n+  TEST64(x,60,1);\n+  TEST64(x,61,1);\n+  TEST64(x,62,1);\n+  TEST64(x,63,1);\n+}\n+#endif\n+\n+__attribute__ ((noinline, noclone))\n+static int rt16 (int x, int y, int z) {\n+  return (__builtin_bswap16(x) >> y) & z;\n+}\n+#define TEST16(X,Y,Z) if(((__builtin_bswap16(X)>>Y)&Z)!=rt16(X,Y,Z)) abort()\n+void test16(int x)\n+{\n+  TEST16(x,0,1);\n+  TEST16(x,0,255);\n+  TEST16(x,1,1);\n+  TEST16(x,2,1);\n+  TEST16(x,3,1);\n+  TEST16(x,4,1);\n+  TEST16(x,5,1);\n+  TEST16(x,6,1);\n+  TEST16(x,7,1);\n+  TEST16(x,8,1);\n+  TEST16(x,8,255);\n+  TEST16(x,9,1);\n+  TEST16(x,10,1);\n+  TEST16(x,11,1);\n+  TEST16(x,12,1);\n+  TEST16(x,13,1);\n+  TEST16(x,14,1);\n+  TEST16(x,15,1);\n+}\n+\n+int main()\n+{\n+  test32(0x00000000);\n+  test32(0xffffffff);\n+  test32(0x00000001);\n+  test32(0x00000002);\n+  test32(0x00000004);\n+  test32(0x00000008);\n+  test32(0x00000010);\n+  test32(0x00000020);\n+  test32(0x00000040);\n+  test32(0x00000080);\n+  test32(0x00000100);\n+  test32(0x00000200);\n+  test32(0x00000400);\n+  test32(0x00000800);\n+  test32(0x00001000);\n+  test32(0x00002000);\n+  test32(0x00004000);\n+  test32(0x00008000);\n+  test32(0x00010000);\n+  test32(0x00020000);\n+  test32(0x00040000);\n+  test32(0x00080000);\n+  test32(0x00100000);\n+  test32(0x00200000);\n+  test32(0x00400000);\n+  test32(0x00800000);\n+  test32(0x01000000);\n+  test32(0x02000000);\n+  test32(0x04000000);\n+  test32(0x08000000);\n+  test32(0x10000000);\n+  test32(0x20000000);\n+  test32(0x40000000);\n+  test32(0x80000000);\n+  test32(0x12345678);\n+  test32(0x87654321);\n+  test32(0xdeadbeef);\n+  test32(0xcafebabe);\n+\n+#if __SIZEOF_LONG_LONG__ == 8\n+  test64(0x0000000000000000ll);\n+  test64(0xffffffffffffffffll);\n+  test64(0x0000000000000001ll);\n+  test64(0x0000000000000002ll);\n+  test64(0x0000000000000004ll);\n+  test64(0x0000000000000008ll);\n+  test64(0x0000000000000010ll);\n+  test64(0x0000000000000020ll);\n+  test64(0x0000000000000040ll);\n+  test64(0x0000000000000080ll);\n+  test64(0x0000000000000100ll);\n+  test64(0x0000000000000200ll);\n+  test64(0x0000000000000400ll);\n+  test64(0x0000000000000800ll);\n+  test64(0x0000000000001000ll);\n+  test64(0x0000000000002000ll);\n+  test64(0x0000000000004000ll);\n+  test64(0x0000000000008000ll);\n+  test64(0x0000000000010000ll);\n+  test64(0x0000000000020000ll);\n+  test64(0x0000000000040000ll);\n+  test64(0x0000000000080000ll);\n+  test64(0x0000000000100000ll);\n+  test64(0x0000000000200000ll);\n+  test64(0x0000000000400000ll);\n+  test64(0x0000000000800000ll);\n+  test64(0x0000000001000000ll);\n+  test64(0x0000000002000000ll);\n+  test64(0x0000000004000000ll);\n+  test64(0x0000000008000000ll);\n+  test64(0x0000000010000000ll);\n+  test64(0x0000000020000000ll);\n+  test64(0x0000000040000000ll);\n+  test64(0x0000000080000000ll);\n+  test64(0x0000000100000000ll);\n+  test64(0x0000000200000000ll);\n+  test64(0x0000000400000000ll);\n+  test64(0x0000000800000000ll);\n+  test64(0x0000001000000000ll);\n+  test64(0x0000002000000000ll);\n+  test64(0x0000004000000000ll);\n+  test64(0x0000008000000000ll);\n+  test64(0x0000010000000000ll);\n+  test64(0x0000020000000000ll);\n+  test64(0x0000040000000000ll);\n+  test64(0x0000080000000000ll);\n+  test64(0x0000100000000000ll);\n+  test64(0x0000200000000000ll);\n+  test64(0x0000400000000000ll);\n+  test64(0x0000800000000000ll);\n+  test64(0x0001000000000000ll);\n+  test64(0x0002000000000000ll);\n+  test64(0x0004000000000000ll);\n+  test64(0x0008000000000000ll);\n+  test64(0x0010000000000000ll);\n+  test64(0x0020000000000000ll);\n+  test64(0x0040000000000000ll);\n+  test64(0x0080000000000000ll);\n+  test64(0x0100000000000000ll);\n+  test64(0x0200000000000000ll);\n+  test64(0x0400000000000000ll);\n+  test64(0x0800000000000000ll);\n+  test64(0x1000000000000000ll);\n+  test64(0x2000000000000000ll);\n+  test64(0x4000000000000000ll);\n+  test64(0x8000000000000000ll);\n+  test64(0x0123456789abcdefll);\n+  test64(0xfedcba9876543210ll);\n+  test64(0xdeadbeefdeadbeefll);\n+  test64(0xcafebabecafebabell);\n+#endif\n+\n+  test16(0x0000);\n+  test16(0xffff);\n+  test16(0x0001);\n+  test16(0x0002);\n+  test16(0x0004);\n+  test16(0x0008);\n+  test16(0x0010);\n+  test16(0x0020);\n+  test16(0x0040);\n+  test16(0x0080);\n+  test16(0x0100);\n+  test16(0x0200);\n+  test16(0x0400);\n+  test16(0x0800);\n+  test16(0x1000);\n+  test16(0x2000);\n+  test16(0x4000);\n+  test16(0x8000);\n+  test16(0x1234);\n+  test16(0x4321);\n+  test16(0xdead);\n+  test16(0xbeef);\n+  test16(0xcafe);\n+  test16(0xbabe);\n+\n+  return 0;\n+}"}]}