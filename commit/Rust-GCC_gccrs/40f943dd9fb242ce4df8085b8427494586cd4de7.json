{"sha": "40f943dd9fb242ce4df8085b8427494586cd4de7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmOTQzZGQ5ZmIyNDJjZTRkZjgwODViODQyNzQ5NDU4NmNkNGRlNw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1998-07-14T14:18:56Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1998-07-14T14:18:56Z"}, "message": "Improve --help support.\n\nFrom-SVN: r21141", "tree": {"sha": "27978e1c1914d8a070117b8398d234716be58b8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27978e1c1914d8a070117b8398d234716be58b8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f943dd9fb242ce4df8085b8427494586cd4de7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f943dd9fb242ce4df8085b8427494586cd4de7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f943dd9fb242ce4df8085b8427494586cd4de7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f943dd9fb242ce4df8085b8427494586cd4de7/comments", "author": null, "committer": null, "parents": [{"sha": "0650ddf440548e1015b92504a9e9f922b279c769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0650ddf440548e1015b92504a9e9f922b279c769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0650ddf440548e1015b92504a9e9f922b279c769"}], "stats": {"total": 102, "additions": 74, "deletions": 28}, "files": [{"sha": "4c94b2778f4cd158553a6dc7385710a5bc08fc8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f943dd9fb242ce4df8085b8427494586cd4de7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f943dd9fb242ce4df8085b8427494586cd4de7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40f943dd9fb242ce4df8085b8427494586cd4de7", "patch": "@@ -1,3 +1,9 @@\n+Tue Jul 14 14:15:30 1998  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* gcc.c: Remove ANSI-C ism from --help code.\n+\n+\t* toplev.c: Support --help with USE_CPPLIB.\n+\n Tue Jul 14 14:46:08 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* mn10300.md (movsi, movsf, movdi, movdf): Remove \"x\" from I -> a"}, {"sha": "90da0f010d5b1c0250d5cce2cf56782f7ae71762", "filename": "gcc/gcc.c", "status": "modified", "additions": 56, "deletions": 26, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f943dd9fb242ce4df8085b8427494586cd4de7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f943dd9fb242ce4df8085b8427494586cd4de7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=40f943dd9fb242ce4df8085b8427494586cd4de7", "patch": "@@ -2444,9 +2444,9 @@ display_help ()\n   printf (\"  -print-multi-directory   Display the root directory for versions of libgcc\\n\");\n   printf (\"  -print-multi-lib         Display the mapping between command line options and\\n\");\n   printf (\"                            multiple library search directories\\n\");\n-  printf (\"  -Wa,<text>               Pass <text> on to the assembler\\n\");\n-  printf (\"  -Wp,<text>               Pass <text> on to the preprocessor\\n\");\n-  printf (\"  -Wl,<text>               Pass <text> on to the linker\\n\");\n+  printf (\"  -Wa,<options>            Pass comma-separated <options> on to the assembler\\n\");\n+  printf (\"  -Wp,<options>            Pass comma-separated <options> on to the preprocessor\\n\");\n+  printf (\"  -Wl,<options>            Pass comma-separated <options> on to the linker\\n\");\n   printf (\"  -Xlinker <arg>           Pass <arg> on to the linker\\n\");\n   printf (\"  -save-temps              Do not delete intermediate files\\n\");\n   printf (\"  -pipe                    Use pipes rather than intermediate files\\n\");\n@@ -2459,7 +2459,7 @@ display_help ()\n   printf (\"  -S                       Compile only; do not assemble or link\\n\");\n   printf (\"  -c                       Compile and assemble, but do not link\\n\");\n   printf (\"  -o <file>                Place the output into <file>\\n\");\n-  printf (\"  -x <language>            Specifiy the language of the following input files\\n\");\n+  printf (\"  -x <language>            Specify the language of the following input files\\n\");\n   printf (\"                            Permissable languages include: c c++ assembler none\\n\");\n   printf (\"                            'none' means revert to the default behaviour of\\n\");\n   printf (\"                            guessing the language based on the file's extension\\n\");\n@@ -2473,29 +2473,59 @@ display_help ()\n      sub-processes.  */\n }\n \n-#define ADD_XXX_OPTION(name) \t\t\t\t\t\t\\\n-static void \t\t\t\t\t\t\t\t\\\n-add_##name##_option (option, len)\t\t\t\t\t\\\n-     char * option;\t\t\t\t\t\t\t\\\n-     int    len;\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  n_##name##_options++;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (! ##name##_options)\t\t\t\t\t\t\\\n-    name##_options\t\t\t\t\t\t\t\\\n-      = (char **) xmalloc (n_##name##_options * sizeof (char **));\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    name##_options\t\t\t\t\t\t\t\\\n-      = (char **) xrealloc (##name##_options,\t\t\t\t\\\n-\t\t\t    n_##name##_options * sizeof (char **));\t\\\n-  \t\t\t\t\t\t\t\t\t\\\n-  name##_options [n_##name##_options - 1] = save_string (option, len);  \\\n+static void \t\t\t\t\t\t\t\t\n+add_preprocessor_option (option, len)\t\t\t\t\t\n+     char * option;\t\t\t\t\t\t\t\n+     int    len;\t\t\t\t\t\t\t\n+{\t\t\t\t\t\t\t\t\t\n+  n_preprocessor_options++;\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t\t\n+  if (! preprocessor_options)\t\t\t\t\t\t\n+    preprocessor_options\t\t\t\t\t\t\t\n+      = (char **) xmalloc (n_preprocessor_options * sizeof (char **));\t\n+  else\t\t\t\t\t\t\t\t\t\n+    preprocessor_options\t\t\t\t\t\t\t\n+      = (char **) xrealloc (preprocessor_options,\t\t\t\t\n+\t\t\t    n_preprocessor_options * sizeof (char **));\t\n+  \t\t\t\t\t\t\t\t\t\n+  preprocessor_options [n_preprocessor_options - 1] = save_string (option, len);  \n+}\n+     \n+static void \t\t\t\t\t\t\t\t\n+add_assembler_option (option, len)\t\t\t\t\t\n+     char * option;\t\t\t\t\t\t\t\n+     int    len;\t\t\t\t\t\t\t\n+{\t\t\t\t\t\t\t\t\t\n+  n_assembler_options++;\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t\t\n+  if (! assembler_options)\t\t\t\t\t\t\n+    assembler_options\t\t\t\t\t\t\t\n+      = (char **) xmalloc (n_assembler_options * sizeof (char **));\t\n+  else\t\t\t\t\t\t\t\t\t\n+    assembler_options\t\t\t\t\t\t\t\n+      = (char **) xrealloc (assembler_options,\t\t\t\t\n+\t\t\t    n_assembler_options * sizeof (char **));\t\n+  \t\t\t\t\t\t\t\t\t\n+  assembler_options [n_assembler_options - 1] = save_string (option, len);  \n }\n-\n-ADD_XXX_OPTION (preprocessor)\n-ADD_XXX_OPTION (assembler)\n-ADD_XXX_OPTION (linker)\n      \n+static void \t\t\t\t\t\t\t\t\n+add_linker_option (option, len)\t\t\t\t\t\n+     char * option;\t\t\t\t\t\t\t\n+     int    len;\t\t\t\t\t\t\t\n+{\t\t\t\t\t\t\t\t\t\n+  n_linker_options++;\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t\t\n+  if (! linker_options)\t\t\t\t\t\t\n+    linker_options\t\t\t\t\t\t\t\n+      = (char **) xmalloc (n_linker_options * sizeof (char **));\t\n+  else\t\t\t\t\t\t\t\t\t\n+    linker_options\t\t\t\t\t\t\t\n+      = (char **) xrealloc (linker_options,\t\t\t\t\n+\t\t\t    n_linker_options * sizeof (char **));\t\n+  \t\t\t\t\t\t\t\t\t\n+  linker_options [n_linker_options - 1] = save_string (option, len);  \n+}\n \f\n /* Create the vector `switches' and its contents.\n    Store its length in `n_switches'.  */\n@@ -3089,7 +3119,7 @@ process_command (argc, argv)\n \t      infiles[n_infiles].language = \"c\";\n \t      infiles[n_infiles++].name   = \"help-dummy\";\n \t      \n-\t      /* Preserve the --help switch so that it can bet caught by the\n+\t      /* Preserve the --help switch so that it can be caught by the\n \t\t cc1 spec string.  */\n \t      switches[n_switches].part1     = \"--help\";\n \t      switches[n_switches].args      = 0;"}, {"sha": "266a209f9bf0297426c66481048bcfbd60f21a11", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f943dd9fb242ce4df8085b8427494586cd4de7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f943dd9fb242ce4df8085b8427494586cd4de7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=40f943dd9fb242ce4df8085b8427494586cd4de7", "patch": "@@ -858,7 +858,7 @@ lang_independent_options f_options[] =\n   {\"sched-spec-load-dangerous\",&flag_schedule_speculative_load_dangerous, 1,\n    \"Allow speculative motion of more loads\" },\n   {\"branch-count-reg\",&flag_branch_on_count_reg, 1,\n-   \"Replace add,compare,branch with branch on count register\"},\n+   \"Replace add,compare,branch with branch on count reg\"},\n #endif  /* HAIFA */\n   {\"pic\", &flag_pic, 1,\n    \"Generate position independent code, if possible\"},\n@@ -1030,6 +1030,7 @@ documented_lang_options[] =\n \n   /* These are for languages with USE_CPPLIB.  */\n   /* These options are already documented in cpplib.c */\n+  { \"--help\", \"\" },\n   { \"-A\", \"\" },\n   { \"-D\", \"\" },\n   { \"-I\", \"\" },\n@@ -3940,8 +3941,10 @@ display_help ()\n   long\t i;\n   char * lang;\n   \n+#ifndef USE_CPPLIB  \n   printf (\"Usage: %s input [switches]\\n\", progname);\n   printf (\"Switches:\\n\");\n+#endif\n   printf (\"  -ffixed-<register>      Mark <register> as being unavailable to the compiler\\n\");\n   printf (\"  -fcall-used-<register>  Mark <register> as being corrupted by function calls\\n\");\n   printf (\"  -fcall-saved-<register> Mark <register> as being preserved across functions\\n\");\n@@ -3982,7 +3985,7 @@ display_help ()\n #endif  \n   printf (\"  -o <file>               Place output into <file> \\n\");\n   printf (\"  -G <number>             Put global and static data smaller than <number>\\n\");\n-  printf (\"                           bytes into a special section [on some targets]\\n\");\n+  printf (\"                           bytes into a special section (on some targets)\\n\");\n   \n   for (i = NUM_ELEM (debug_args); i--;)\n     {\n@@ -4318,6 +4321,13 @@ main (argc, argv, envp)\n \t  /* If the option is valid for *some* language,\n \t     treat it as valid even if this language doesn't understand it.  */\n \t  int strings_processed = lang_decode_option (argc - i, argv + i);\n+\t  \n+\t  if (!strcmp (argv[i], \"--help\"))\n+\t    {\n+\t      display_help ();\n+\t      exit (0);\n+\t    }\n+\t  \n \t  if (strings_processed != 0)\n \t    i += strings_processed - 1;\n \t}"}]}