{"sha": "80512db770127b1a868fb97007144edc00be95d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA1MTJkYjc3MDEyN2IxYTg2OGZiOTcwMDcxNDRlZGMwMGJlOTVkMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-11T17:27:17Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-11T17:27:17Z"}, "message": "(rescan): Don't look for C++ // comment before directive.\n\nHandle \\-newline inside a C++ // comment.\n(skip_if_group): Likewise.\n(handle_directive): Also handle C++ // comment after #.  Point\nip->bufp after the comment start before calling\nskip_to_end_of_comment.\n(validate_else): Handle \\-newline inside a C++ // comment.\n(skip_to_end_of_comment, macarg1, discard_comments): Likewise.\n\nFrom-SVN: r7028", "tree": {"sha": "ad5b080eac9a3f34d366550316f9a8f6fc08d192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad5b080eac9a3f34d366550316f9a8f6fc08d192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80512db770127b1a868fb97007144edc00be95d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80512db770127b1a868fb97007144edc00be95d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80512db770127b1a868fb97007144edc00be95d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80512db770127b1a868fb97007144edc00be95d3/comments", "author": null, "committer": null, "parents": [{"sha": "2ba3a0eceffae2f34927301ae596ca1befcbbff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba3a0eceffae2f34927301ae596ca1befcbbff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba3a0eceffae2f34927301ae596ca1befcbbff9"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "ac0772defb6da5612e1a618f06bf4f1d2b50ac2d", "filename": "gcc/cccp.c", "status": "modified", "additions": 47, "deletions": 21, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80512db770127b1a868fb97007144edc00be95d3/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80512db770127b1a868fb97007144edc00be95d3/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=80512db770127b1a868fb97007144edc00be95d3", "patch": "@@ -2536,10 +2536,9 @@ do { ip = &instack[indepth];\t\t\\\n \t\tbp++;\n \t      bp += 2;\n \t    }\n-\t    else if (cplusplus_comments && *bp == '/' && bp[1] == '/') {\n-\t      bp += 2;\n-\t      while (*bp++ != '\\n') ;\n-\t    }\n+\t    /* There is no point in trying to deal with C++ // comments here,\n+\t       because if there is one, then this # must be part of the\n+\t       comment and we would never reach here.  */\n \t    else break;\n \t  }\n \tif (bp + 1 != ibp)\n@@ -2708,13 +2707,23 @@ do { ip = &instack[indepth];\t\t\\\n \t  U_CHAR *before_bp = ibp+2;\n \n \t  while (ibp < limit) {\n-\t    if (*ibp++ == '\\n') {\n-\t      ibp--;\n+\t    if (ibp[-1] != '\\\\' && *ibp == '\\n') {\n \t      if (put_out_comments) {\n \t\tbcopy (before_bp, obp, ibp - before_bp);\n \t\tobp += ibp - before_bp;\n \t      }\n \t      break;\n+\t    } else {\n+\t      if (*ibp == '\\n') {\n+\t\t++ip->lineno;\n+\t\t/* Copy the newline into the output buffer, in order to\n+\t\t   avoid the pain of a #line every time a multiline comment\n+\t\t   is seen.  */\n+\t\tif (!put_out_comments)\n+\t\t  *obp++ = '\\n';\n+\t\t++op->lineno;\n+\t      }\n+\t      ibp++;\n \t    }\n \t  }\n \t  break;\n@@ -3361,8 +3370,9 @@ handle_directive (ip, op)\n \tpedwarn (\"%s in preprocessing directive\",\n \t\t *bp == '\\f' ? \"formfeed\" : \"vertical tab\");\n       bp++;\n-    } else if (*bp == '/' && bp[1] == '*') {\n-      ip->bufp = bp;\n+    } else if (*bp == '/' && (bp[1] == '*'\n+\t\t\t      || (cplusplus_comments && bp[1] == '/'))) {\n+      ip->bufp = bp + 2;\n       skip_to_end_of_comment (ip, &ip->lineno, 0);\n       bp = ip->bufp;\n     } else if (*bp == '\\\\' && bp[1] == '\\n') {\n@@ -6836,10 +6846,10 @@ skip_if_group (ip, any)\n \t    while (!(*bp == '*' && bp[1] == '/'))\n \t      bp++;\n \t    bp += 2;\n-\t  } else if (cplusplus_comments && *bp == '/' && bp[1] == '/') {\n-\t    bp += 2;\n-\t    while (*bp++ != '\\n') ;\n \t  }\n+\t  /* There is no point in trying to deal with C++ // comments here,\n+\t     because if there is one, then this # must be part of the\n+\t     comment and we would never reach here.  */\n \t  else break;\n \t}\n       if (bp != ip->bufp) {\n@@ -6865,7 +6875,11 @@ skip_if_group (ip, any)\n \t  bp += 2;\n \t} else if (cplusplus_comments && *bp == '/' && bp[1] == '/') {\n \t  bp += 2;\n-\t  while (*bp++ != '\\n') ;\n+\t  while (bp[-1] == '\\\\' || *bp != '\\n') {\n+\t    if (*bp == '\\n')\n+\t      ip->lineno++;\n+\t    bp++;\n+\t  }\n         }\n \telse break;\n       }\n@@ -7132,7 +7146,8 @@ validate_else (p)\n       }\n       else if (cplusplus_comments && p[1] == '/') {\n \tp += 2;\n-\twhile (*p && *p++ != '\\n') ;\n+\twhile (*p && (*p != '\\n' || p[-1] == '\\\\'))\n+\t  p++;\n       }\n     } else break;\n   }\n@@ -7170,19 +7185,27 @@ skip_to_end_of_comment (ip, line_counter, nowarn)\n   }\n   if (cplusplus_comments && bp[-1] == '/') {\n     if (output) {\n-      while (bp < limit)\n-\tif ((*op->bufp++ = *bp++) == '\\n') {\n-\t  bp--;\n+      while (bp < limit) {\n+\t*op->bufp++ = *bp;\n+\tif (*bp == '\\n' && bp[-1] != '\\\\')\n \t  break;\n+\tif (*bp == '\\n') {\n+\t  ++*line_counter;\n+\t  ++op->lineno;\n \t}\n+\tbp++;\n+      }\n       op->bufp[-1] = '*';\n       *op->bufp++ = '/';\n       *op->bufp++ = '\\n';\n     } else {\n       while (bp < limit) {\n-\tif (*bp++ == '\\n') {\n-\t  bp--;\n+\tif (bp[-1] != '\\\\' && *bp == '\\n') {\n \t  break;\n+\t} else {\n+\t  if (*bp == '\\n' && line_counter)\n+\t    ++*line_counter;\n+\t  bp++;\n \t}\n       }\n     }\n@@ -8061,8 +8084,10 @@ macarg1 (start, limit, depthptr, newlines, comments, rest_args)\n       if (cplusplus_comments && bp[1] == '/') {\n \t*comments = 1;\n \tbp += 2;\n-\twhile (bp < limit && *bp++ != '\\n') ;\n-\t++*newlines;\n+\twhile (bp < limit && (*bp != '\\n' || bp[-1] == '\\\\')) {\n+\t  if (*bp == '\\n') ++*newlines;\n+\t  bp++;\n+\t}\n \tbreak;\n       }\n       if (bp[1] != '*' || bp + 1 >= limit)\n@@ -8173,7 +8198,8 @@ discard_comments (start, length, newlines)\n \t/* Comments are equivalent to spaces.  */\n \tobp[-1] = ' ';\n \tibp++;\n-\twhile (ibp < limit && *ibp++ != '\\n') ;\n+\twhile (ibp < limit && (*ibp != '\\n' || ibp[-1] == '\\\\'))\n+\t  ibp++;\n \tbreak;\n       }\n       if (ibp[0] != '*' || ibp + 1 >= limit)"}]}