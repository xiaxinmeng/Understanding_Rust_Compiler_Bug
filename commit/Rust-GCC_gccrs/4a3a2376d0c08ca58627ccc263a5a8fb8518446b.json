{"sha": "4a3a2376d0c08ca58627ccc263a5a8fb8518446b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzYTIzNzZkMGMwOGNhNTg2MjdjY2MyNjNhNWE4ZmI4NTE4NDQ2Yg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2009-04-23T22:48:47Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2009-04-23T22:48:47Z"}, "message": "spu-builtins.h: Delete file.\n\n\t* config/spu/spu-builtins.h: Delete file.\n\n\t* config/spu/spu.h (enum spu_builtin_type): Move here from\n\tspu-builtins.h.\n\t(struct spu_builtin_description): Likewise.  Add GTY marker.\n\tDo not use enum spu_function_code or enum insn_code.\n\t(spu_builtins): Add extern declaration.\n\n\t* config/spu/spu.c: Do not include \"spu-builtins.h\".\n\t(enum spu_function_code, enum spu_builtin_type_index,\n\tV16QI_type_node, V8HI_type_node, V4SI_type_node, V2DI_type_node,\n\tV4SF_type_node, V2DF_type_node, unsigned_V16QI_type_node,\n\tunsigned_V8HI_type_node, unsigned_V4SI_type_node,\n\tunsigned_V2DI_type_node): Move here from spu-builtins.h.\n\t(spu_builtin_types): Make static.  Add GTY marker.\n\t(spu_builtins): Add extern declaration with GTY marker.\n\tInclude \"gt-spu.h\".\n\n\t* config/spu/spu-c.c: Do not include \"spu-builtins.h\".\n\t(spu_resolve_overloaded_builtin): Do not use spu_function_code.\n\tCheck programmatically whether all parameters are scalar.\n\n\t* config/spu/t-spu-elf (spu.o, spu-c.o): Update dependencies.\n\nFrom-SVN: r146660", "tree": {"sha": "5d2532db5c7f8ebb76683b0584c57697a9254274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d2532db5c7f8ebb76683b0584c57697a9254274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a3a2376d0c08ca58627ccc263a5a8fb8518446b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3a2376d0c08ca58627ccc263a5a8fb8518446b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a3a2376d0c08ca58627ccc263a5a8fb8518446b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/comments", "author": null, "committer": null, "parents": [{"sha": "bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489"}], "stats": {"total": 276, "additions": 144, "deletions": 132}, "files": [{"sha": "abf2b2eab80dee6566cd6d0e21d941de8e0011a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a3a2376d0c08ca58627ccc263a5a8fb8518446b", "patch": "@@ -1,3 +1,29 @@\n+2009-04-23  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/spu/spu-builtins.h: Delete file.\n+\n+\t* config/spu/spu.h (enum spu_builtin_type): Move here from\n+\tspu-builtins.h.\n+\t(struct spu_builtin_description): Likewise.  Add GTY marker.\n+\tDo not use enum spu_function_code or enum insn_code.\n+\t(spu_builtins): Add extern declaration.\n+\n+\t* config/spu/spu.c: Do not include \"spu-builtins.h\".\n+\t(enum spu_function_code, enum spu_builtin_type_index,\n+\tV16QI_type_node, V8HI_type_node, V4SI_type_node, V2DI_type_node,\n+\tV4SF_type_node, V2DF_type_node, unsigned_V16QI_type_node,\n+\tunsigned_V8HI_type_node, unsigned_V4SI_type_node,\n+\tunsigned_V2DI_type_node): Move here from spu-builtins.h.\n+\t(spu_builtin_types): Make static.  Add GTY marker.\n+\t(spu_builtins): Add extern declaration with GTY marker.\n+\tInclude \"gt-spu.h\".\n+\n+\t* config/spu/spu-c.c: Do not include \"spu-builtins.h\".\n+\t(spu_resolve_overloaded_builtin): Do not use spu_function_code.\n+\tCheck programmatically whether all parameters are scalar.\n+\n+\t* config/spu/t-spu-elf (spu.o, spu-c.o): Update dependencies.\n+\n 2009-04-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimplify.c (gimplify_modify_expr_rhs) <VAR_DECL>: Do not do a direct"}, {"sha": "9acdbf1682abd10176aa38c7bbc024c3ba4f6c33", "filename": "gcc/config/spu/spu-builtins.h", "status": "removed", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fconfig%2Fspu%2Fspu-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fconfig%2Fspu%2Fspu-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-builtins.h?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -1,119 +0,0 @@\n-/* Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n-\n-   This file is free software; you can redistribute it and/or modify it under\n-   the terms of the GNU General Public License as published by the Free\n-   Software Foundation; either version 3 of the License, or (at your option) \n-   any later version.\n-\n-   This file is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-   for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\f\n-/* built-ins */\n-\n-enum spu_builtin_type_index\n-{\n-  SPU_BTI_END_OF_PARAMS,\n-\n-  /* We create new type nodes for these. */\n-  SPU_BTI_V16QI,\n-  SPU_BTI_V8HI,\n-  SPU_BTI_V4SI,\n-  SPU_BTI_V2DI,\n-  SPU_BTI_V4SF,\n-  SPU_BTI_V2DF,\n-  SPU_BTI_UV16QI,\n-  SPU_BTI_UV8HI,\n-  SPU_BTI_UV4SI,\n-  SPU_BTI_UV2DI,\n-\n-  /* A 16-byte type. (Implemented with V16QI_type_node) */\n-  SPU_BTI_QUADWORD,\n-\n-  /* These all correspond to intSI_type_node */\n-  SPU_BTI_7,\n-  SPU_BTI_S7,\n-  SPU_BTI_U7,\n-  SPU_BTI_S10,\n-  SPU_BTI_S10_4,\n-  SPU_BTI_U14,\n-  SPU_BTI_16,\n-  SPU_BTI_S16,\n-  SPU_BTI_S16_2,\n-  SPU_BTI_U16,\n-  SPU_BTI_U16_2,\n-  SPU_BTI_U18,\n-\n-  /* These correspond to the standard types */\n-  SPU_BTI_INTQI, \n-  SPU_BTI_INTHI, \n-  SPU_BTI_INTSI, \n-  SPU_BTI_INTDI, \n-\n-  SPU_BTI_UINTQI,\n-  SPU_BTI_UINTHI,\n-  SPU_BTI_UINTSI,\n-  SPU_BTI_UINTDI,\n-\n-  SPU_BTI_FLOAT, \n-  SPU_BTI_DOUBLE,\n-\n-  SPU_BTI_VOID,   \n-  SPU_BTI_PTR,   \n-\n-  SPU_BTI_MAX\n-};\n-\n-#define V16QI_type_node               (spu_builtin_types[SPU_BTI_V16QI])\n-#define V8HI_type_node                (spu_builtin_types[SPU_BTI_V8HI])\n-#define V4SI_type_node                (spu_builtin_types[SPU_BTI_V4SI])\n-#define V2DI_type_node                (spu_builtin_types[SPU_BTI_V2DI])\n-#define V4SF_type_node                (spu_builtin_types[SPU_BTI_V4SF])\n-#define V2DF_type_node                (spu_builtin_types[SPU_BTI_V2DF])\n-#define unsigned_V16QI_type_node      (spu_builtin_types[SPU_BTI_UV16QI])\n-#define unsigned_V8HI_type_node       (spu_builtin_types[SPU_BTI_UV8HI])\n-#define unsigned_V4SI_type_node       (spu_builtin_types[SPU_BTI_UV4SI])\n-#define unsigned_V2DI_type_node       (spu_builtin_types[SPU_BTI_UV2DI])\n-\n-extern GTY(()) tree spu_builtin_types[SPU_BTI_MAX];\n-\n-/* Some builtins require special handling.  This enum differentiates. */\n-enum spu_builtin_type {\n-    B_INSN,\n-    B_JUMP,\n-    B_BISLED,\n-    B_CALL,\n-    B_HINT,\n-    B_OVERLOAD, \n-    B_INTERNAL\n-};\n-\n-typedef enum {\n-#define DEF_BUILTIN(fcode, icode, name, type, params) fcode,\n-#include \"spu-builtins.def\"\n-#undef DEF_BUILTIN\n-   NUM_SPU_BUILTINS\n-} spu_function_code;\n-\n-struct spu_builtin_description {\n-    spu_function_code fcode;\n-    enum insn_code icode;\n-    const char *name;\n-    enum spu_builtin_type type;\n-\n-    /* The first element of parm is always the return type.  The rest\n-     * are a zero terminated list of parameters. */\n-    int parm[5];\n-\n-    tree fndecl;\n-};\n-\n-extern GTY(()) struct spu_builtin_description spu_builtins[];\n-\n-\n-"}, {"sha": "e1352b14a8a661d4a8fa80042c680c960e170839", "filename": "gcc/config/spu/spu-c.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/gcc%2Fconfig%2Fspu%2Fspu-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/gcc%2Fconfig%2Fspu%2Fspu-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-c.c?ref=4a3a2376d0c08ca58627ccc263a5a8fb8518446b", "patch": "@@ -31,7 +31,6 @@\n #include \"insn-codes.h\"\n #include \"recog.h\"\n #include \"optabs.h\"\n-#include \"spu-builtins.h\"\n \f\n \n /* Keep the vector keywords handy for fast comparisons.  */\n@@ -102,8 +101,7 @@ spu_resolve_overloaded_builtin (tree fndecl, void *passed_args)\n \t\t\t  || POINTER_TYPE_P (t))\n   VEC(tree,gc) *fnargs = (VEC(tree,gc) *) passed_args;\n   unsigned int nargs = VEC_length (tree, fnargs);\n-  spu_function_code new_fcode, fcode =\n-    DECL_FUNCTION_CODE (fndecl) - END_BUILTINS;\n+  int new_fcode, fcode = DECL_FUNCTION_CODE (fndecl) - END_BUILTINS;\n   struct spu_builtin_description *desc;\n   tree match = NULL_TREE;\n \n@@ -123,8 +121,15 @@ spu_resolve_overloaded_builtin (tree fndecl, void *passed_args)\n       tree decl = spu_builtins[new_fcode].fndecl;\n       tree params = TYPE_ARG_TYPES (TREE_TYPE (decl));\n       tree param;\n+      bool all_scalar;\n       unsigned int p;\n \n+      /* Check whether all parameters are scalar.  */\n+      all_scalar = true;\n+      for (param = params; param != void_list_node; param = TREE_CHAIN (param))\n+      if (!SCALAR_TYPE_P (TREE_VALUE (param)))\n+\tall_scalar = false;\n+\n       for (param = params, p = 0;\n \t   param != void_list_node;\n \t   param = TREE_CHAIN (param), p++)\n@@ -156,10 +161,7 @@ spu_resolve_overloaded_builtin (tree fndecl, void *passed_args)\n \t     parameter. */\n \t  if ((!SCALAR_TYPE_P (param_type)\n \t       || !SCALAR_TYPE_P (arg_type)\n-\t       || ((fcode == SPU_SPLATS || fcode == SPU_PROMOTE\n-\t\t    || fcode == SPU_HCMPEQ || fcode == SPU_HCMPGT\n-\t\t    || fcode == SPU_MASKB || fcode == SPU_MASKH\n-\t\t    || fcode == SPU_MASKW) && p == 0))\n+\t       || (all_scalar && p == 0))\n \t      && !comptypes (TYPE_MAIN_VARIANT (param_type),\n \t\t\t     TYPE_MAIN_VARIANT (arg_type)))\n \t    break;"}, {"sha": "a51170bad21b38141ec680b83d277cc4619ec0e4", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=4a3a2376d0c08ca58627ccc263a5a8fb8518446b", "patch": "@@ -52,13 +52,79 @@\n #include \"machmode.h\"\n #include \"gimple.h\"\n #include \"tm-constrs.h\"\n-#include \"spu-builtins.h\"\n #include \"ddg.h\"\n #include \"sbitmap.h\"\n #include \"timevar.h\"\n #include \"df.h\"\n \n /* Builtin types, data and prototypes. */\n+\n+enum spu_builtin_type_index\n+{\n+  SPU_BTI_END_OF_PARAMS,\n+\n+  /* We create new type nodes for these. */\n+  SPU_BTI_V16QI,\n+  SPU_BTI_V8HI,\n+  SPU_BTI_V4SI,\n+  SPU_BTI_V2DI,\n+  SPU_BTI_V4SF,\n+  SPU_BTI_V2DF,\n+  SPU_BTI_UV16QI,\n+  SPU_BTI_UV8HI,\n+  SPU_BTI_UV4SI,\n+  SPU_BTI_UV2DI,\n+\n+  /* A 16-byte type. (Implemented with V16QI_type_node) */\n+  SPU_BTI_QUADWORD,\n+\n+  /* These all correspond to intSI_type_node */\n+  SPU_BTI_7,\n+  SPU_BTI_S7,\n+  SPU_BTI_U7,\n+  SPU_BTI_S10,\n+  SPU_BTI_S10_4,\n+  SPU_BTI_U14,\n+  SPU_BTI_16,\n+  SPU_BTI_S16,\n+  SPU_BTI_S16_2,\n+  SPU_BTI_U16,\n+  SPU_BTI_U16_2,\n+  SPU_BTI_U18,\n+\n+  /* These correspond to the standard types */\n+  SPU_BTI_INTQI, \n+  SPU_BTI_INTHI, \n+  SPU_BTI_INTSI, \n+  SPU_BTI_INTDI, \n+\n+  SPU_BTI_UINTQI,\n+  SPU_BTI_UINTHI,\n+  SPU_BTI_UINTSI,\n+  SPU_BTI_UINTDI,\n+\n+  SPU_BTI_FLOAT, \n+  SPU_BTI_DOUBLE,\n+\n+  SPU_BTI_VOID,   \n+  SPU_BTI_PTR,   \n+\n+  SPU_BTI_MAX\n+};\n+\n+#define V16QI_type_node               (spu_builtin_types[SPU_BTI_V16QI])\n+#define V8HI_type_node                (spu_builtin_types[SPU_BTI_V8HI])\n+#define V4SI_type_node                (spu_builtin_types[SPU_BTI_V4SI])\n+#define V2DI_type_node                (spu_builtin_types[SPU_BTI_V2DI])\n+#define V4SF_type_node                (spu_builtin_types[SPU_BTI_V4SF])\n+#define V2DF_type_node                (spu_builtin_types[SPU_BTI_V2DF])\n+#define unsigned_V16QI_type_node      (spu_builtin_types[SPU_BTI_UV16QI])\n+#define unsigned_V8HI_type_node       (spu_builtin_types[SPU_BTI_UV8HI])\n+#define unsigned_V4SI_type_node       (spu_builtin_types[SPU_BTI_UV4SI])\n+#define unsigned_V2DI_type_node       (spu_builtin_types[SPU_BTI_UV2DI])\n+\n+static GTY(()) tree spu_builtin_types[SPU_BTI_MAX];\n+\n struct spu_builtin_range\n {\n   int low, high;\n@@ -202,8 +268,6 @@ spu_libgcc_cmp_return_mode (void);\n static enum machine_mode\n spu_libgcc_shift_count_mode (void);\n \n-/* Built in types.  */\n-tree spu_builtin_types[SPU_BTI_MAX];\n \f\n /*  TARGET overrides.  */\n \n@@ -5059,6 +5123,16 @@ spu_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n \f\n /* Create the built-in types and functions */\n \n+enum spu_function_code\n+{\n+#define DEF_BUILTIN(fcode, icode, name, type, params) fcode,\n+#include \"spu-builtins.def\"\n+#undef DEF_BUILTIN\n+   NUM_SPU_BUILTINS\n+};\n+\n+extern GTY(()) struct spu_builtin_description spu_builtins[NUM_SPU_BUILTINS];\n+\n struct spu_builtin_description spu_builtins[] = {\n #define DEF_BUILTIN(fcode, icode, name, type, params) \\\n   {fcode, icode, name, type, params, NULL_TREE},\n@@ -6289,3 +6363,5 @@ spu_section_type_flags (tree decl, const char *name, int reloc)\n     return SECTION_BSS;\n   return default_section_type_flags (decl, name, reloc);\n }\n+\n+#include \"gt-spu.h\""}, {"sha": "8780d1b90020ebeb285c0f9276e307d629a030d9", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=4a3a2376d0c08ca58627ccc263a5a8fb8518446b", "patch": "@@ -622,3 +622,33 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n extern GTY(()) rtx spu_compare_op0;\n extern GTY(()) rtx spu_compare_op1;\n \n+\n+/* Builtins.  */\n+\n+enum spu_builtin_type\n+{\n+  B_INSN,\n+  B_JUMP,\n+  B_BISLED,\n+  B_CALL,\n+  B_HINT,\n+  B_OVERLOAD,\n+  B_INTERNAL\n+};\n+\n+struct GTY(()) spu_builtin_description\n+{\n+  int fcode;\n+  int icode;\n+  const char *name;\n+  enum spu_builtin_type type;\n+\n+  /* The first element of parm is always the return type.  The rest\n+     are a zero terminated list of parameters.  */\n+  int parm[5];\n+\n+  tree fndecl;\n+};\n+\n+extern struct spu_builtin_description spu_builtins[];\n+"}, {"sha": "0a36e959c5bab6fd21c75284278ea38ab7da507b", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3a2376d0c08ca58627ccc263a5a8fb8518446b/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=4a3a2376d0c08ca58627ccc263a5a8fb8518446b", "patch": "@@ -85,13 +85,10 @@ spu.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   output.h $(BASIC_BLOCK_H) $(INTEGRATE_H) toplev.h $(GGC_H) $(HASHTAB_H) \\\n   $(TM_P_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h reload.h cfglayout.h \\\n   $(srcdir)/config/spu/spu-protos.h \\\n-  $(srcdir)/config/spu/spu-builtins.h \\\n   $(srcdir)/config/spu/spu-builtins.def \n \n spu-c.o: $(srcdir)/config/spu/spu-c.c \\\n     $(srcdir)/config/spu/spu-protos.h \\\n-    $(srcdir)/config/spu/spu-builtins.h \\\n-    $(srcdir)/config/spu/spu-builtins.def \\\n     $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(CPPLIB_H) \\\n     $(TM_P_H) c-pragma.h coretypes.h $(TM_H) insn-codes.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/spu/spu-c.c"}]}