{"sha": "ad5edba5cec413cf60b5c71046e7787a0048357f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1ZWRiYTVjZWM0MTNjZjYwYjVjNzEwNDZlNzc4N2EwMDQ4MzU3Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T07:57:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T07:57:40Z"}, "message": "[multiple changes]\n\n2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch8.adb (Build_Class_Wide_Wrapper): Mark the primitive as\n\treferenced once resolution has taken place.\n\n2014-08-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Type_Conversion): Don't\n\tcompare access levels in the case where the target type is the\n\tanonymous type of an access discriminant, since the level of\n\tsuch types is defined based on context. Add comment.\n\nFrom-SVN: r213534", "tree": {"sha": "9dba4c2c474be1f9b2df2220eaf2ff37f785c8db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dba4c2c474be1f9b2df2220eaf2ff37f785c8db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad5edba5cec413cf60b5c71046e7787a0048357f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5edba5cec413cf60b5c71046e7787a0048357f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5edba5cec413cf60b5c71046e7787a0048357f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5edba5cec413cf60b5c71046e7787a0048357f/comments", "author": null, "committer": null, "parents": [{"sha": "b6621d10eb36c29e6965678b7d53aa39eb302c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6621d10eb36c29e6965678b7d53aa39eb302c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6621d10eb36c29e6965678b7d53aa39eb302c9e"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "8f2243eb947e66a34cc5e9149d5ae4e0a6997d81", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5edba5cec413cf60b5c71046e7787a0048357f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5edba5cec413cf60b5c71046e7787a0048357f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ad5edba5cec413cf60b5c71046e7787a0048357f", "patch": "@@ -1,3 +1,15 @@\n+2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch8.adb (Build_Class_Wide_Wrapper): Mark the primitive as\n+\treferenced once resolution has taken place.\n+\n+2014-08-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Don't\n+\tcompare access levels in the case where the target type is the\n+\tanonymous type of an access discriminant, since the level of\n+\tsuch types is defined based on context. Add comment.\n+\n 2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch8.adb (Build_Class_Wide_Wrapper): Handle various special"}, {"sha": "6d43496d41947dc29c3610d5e96dc87fec04518e", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5edba5cec413cf60b5c71046e7787a0048357f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5edba5cec413cf60b5c71046e7787a0048357f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=ad5edba5cec413cf60b5c71046e7787a0048357f", "patch": "@@ -10417,12 +10417,24 @@ package body Exp_Ch4 is\n          --  level of the target type, then force Program_Error. Note that this\n          --  can only occur for cases where the attribute is within the body of\n          --  an instantiation (otherwise the conversion will already have been\n-         --  rejected as illegal). Note: warnings are issued by the analyzer\n-         --  for the instance cases.\n+         --  rejected as illegal). (Note: warnings are issued by the analyzer\n+         --  for the instance cases.) The case where the target type is an\n+         --  anonymous access type of a discriminant is excluded, because the\n+         --  level of such a type depends on the context and currently the\n+         --  level returned for such types is zero, resulting in warnings about\n+         --  about check failures in certain legal cases involving class-wide\n+         --  interfaces as the designated type (some cases, such as return\n+         --  statements, are checked at run time, but not clear if these are\n+         --  handled right in general, see 3.10.2(12/2-12.5/3) ???).\n \n          elsif In_Instance_Body\n-           and then Type_Access_Level (Operand_Type) >\n-                    Type_Access_Level (Target_Type)\n+           and then\n+             not (Ekind (Target_Type) = E_Anonymous_Access_Type\n+                   and then Present (Associated_Node_For_Itype (Target_Type))\n+                   and then Nkind (Associated_Node_For_Itype (Target_Type)) =\n+                                                  N_Discriminant_Specification)\n+           and then\n+             Type_Access_Level (Operand_Type) > Type_Access_Level (Target_Type)\n          then\n             Raise_Accessibility_Error;\n "}, {"sha": "0780f3f59210e5c8dfd5559b65fe3aaf499db687", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5edba5cec413cf60b5c71046e7787a0048357f/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5edba5cec413cf60b5c71046e7787a0048357f/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=ad5edba5cec413cf60b5c71046e7787a0048357f", "patch": "@@ -2290,12 +2290,13 @@ package body Sem_Ch8 is\n             return;\n          end if;\n \n-         --  Set the proper entity of the renamed generic formal subprogram\n-         --  and reset its overloaded status now that resolution has finally\n-         --  taken place.\n+         --  Set the proper entity of the renamed generic formal subprogram,\n+         --  reset its overloaded status and mark the primitive as referenced\n+         --  now that resolution has finally taken place.\n \n          Set_Entity        (Nam, Prim_Op);\n          Set_Is_Overloaded (Nam, False);\n+         Set_Referenced    (Prim_Op);\n \n          --  Step 3: Create the declaration and the body of the wrapper, insert\n          --  all the pieces into the tree."}]}