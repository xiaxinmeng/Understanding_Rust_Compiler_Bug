{"sha": "ac6f08b075eef606a4d0c63d28566150f70ac857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2ZjA4YjA3NWVlZjYwNmE0ZDBjNjNkMjg1NjYxNTBmNzBhYzg1Nw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-09-24T19:39:25Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-09-24T19:39:25Z"}, "message": "emit-rtl.c: (hard_frame_pointer_rtx): New variable.\n\n* emit-rtl.c: (hard_frame_pointer_rtx): New variable.\n(gen_rtx): return hard_frame_pointer_rtx if generating rtl\nfor HARD_FRAME_POINTER_REGNUM.\n(enit_emit_once): Generate initial rtl for hard_frame_pointer_rtx.\n\nFrom-SVN: r5453", "tree": {"sha": "ef76a27a55ca9ba23febabdee504ee28499b9d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef76a27a55ca9ba23febabdee504ee28499b9d30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac6f08b075eef606a4d0c63d28566150f70ac857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6f08b075eef606a4d0c63d28566150f70ac857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6f08b075eef606a4d0c63d28566150f70ac857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6f08b075eef606a4d0c63d28566150f70ac857/comments", "author": null, "committer": null, "parents": [{"sha": "804f56d8d906cf1a24c49b19c33d45aa2bf6f082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/804f56d8d906cf1a24c49b19c33d45aa2bf6f082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/804f56d8d906cf1a24c49b19c33d45aa2bf6f082"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "32bc6b69e114204ebbcaf4a08fe8f0c8581dad56", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6f08b075eef606a4d0c63d28566150f70ac857/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6f08b075eef606a4d0c63d28566150f70ac857/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=ac6f08b075eef606a4d0c63d28566150f70ac857", "patch": "@@ -128,10 +128,18 @@ REAL_VALUE_TYPE dconstm1;\n    But references that were originally to the frame-pointer can be\n    distinguished from the others because they contain frame_pointer_rtx.\n \n+   When to use frame_pointer_rtx and hard_frame_pointer_rtx is a little\n+   tricky: until register elimination has taken place hard_frame_pointer_rtx\n+   should be used if it is being set, and frame_pointer_rtx otherwise.  After \n+   register elimination hard_frame_pointer_rtx should always be used.\n+   On machines where the two registers are same (most) then these are the\n+   same.\n+\n    In an inline procedure, the stack and frame pointer rtxs may not be\n    used for anything else.  */\n rtx stack_pointer_rtx;\t\t/* (REG:Pmode STACK_POINTER_REGNUM) */\n rtx frame_pointer_rtx;\t\t/* (REG:Pmode FRAME_POINTER_REGNUM) */\n+rtx hard_frame_pointer_rtx;\t/* (REG:Pmode HARD_FRAME_POINTER_REGNUM) */\n rtx arg_pointer_rtx;\t\t/* (REG:Pmode ARG_POINTER_REGNUM) */\n rtx struct_value_rtx;\t\t/* (REG:Pmode STRUCT_VALUE_REGNUM) */\n rtx struct_value_incoming_rtx;\t/* (REG:Pmode STRUCT_VALUE_INCOMING_REGNUM) */\n@@ -305,7 +313,12 @@ gen_rtx (va_alist)\n       if (frame_pointer_rtx && regno == FRAME_POINTER_REGNUM && mode == Pmode\n \t  && ! reload_in_progress)\n \treturn frame_pointer_rtx;\n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+      if (hard_frame_pointer_rtx && regno == HARD_FRAME_POINTER_REGNUM\n+\t  && mode == Pmode && ! reload_in_progress)\n+\treturn hard_frame_pointer_rtx;\n+#endif\n+#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM && HARD_FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n       if (arg_pointer_rtx && regno == ARG_POINTER_REGNUM && mode == Pmode\n \t  && ! reload_in_progress)\n \treturn arg_pointer_rtx;\n@@ -3152,8 +3165,15 @@ init_emit_once (line_numbers)\n   stack_pointer_rtx = gen_rtx (REG, Pmode, STACK_POINTER_REGNUM);\n   frame_pointer_rtx = gen_rtx (REG, Pmode, FRAME_POINTER_REGNUM);\n \n+  if (HARD_FRAME_POINTER_REGNUM == FRAME_POINTER_REGNUM)\n+    hard_frame_pointer_rtx = frame_pointer_rtx;\n+  else\n+    hard_frame_pointer_rtx = gen_rtx (REG, Pmode, HARD_FRAME_POINTER_REGNUM);\n+  \n   if (FRAME_POINTER_REGNUM == ARG_POINTER_REGNUM)\n     arg_pointer_rtx = frame_pointer_rtx;\n+  else if (HARD_FRAME_POINTER_REGNUM == ARG_POINTER_REGNUM)\n+    arg_pointer_rtx = hard_frame_pointer_rtx;\n   else if (STACK_POINTER_REGNUM == ARG_POINTER_REGNUM)\n     arg_pointer_rtx = stack_pointer_rtx;\n   else"}]}