{"sha": "bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkYWYzNzA4NDUzY2M5ZjBhZDIzNTk4ZjY4MmUxN2ZmZDFlNWFmYw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-07-23T12:17:52Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-07-23T12:17:52Z"}, "message": "Check TYPE_OVERFLOW_WRAPS for parloops reductions\n\n2015-07-23  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-parloops.c (gather_scalar_reductions): Add arg to call to\n\tvect_force_simple_reduction.\n\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Same.\n\t(vect_is_simple_reduction_1): Add and handle\n\tneed_wrapping_integral_overflow parameter.\n\t(vect_is_simple_reduction, vect_force_simple_reduction): Add and pass\n\tneed_wrapping_integral_overflow parameter.\n\t(vectorizable_reduction): Add arg to call to vect_is_simple_reduction.\n\t* tree-vectorizer.h (vect_force_simple_reduction): Add parameter to decl.\n\n\t* gcc.dg/autopar/outer-4.c: Add xfail.\n\t* gcc.dg/autopar/outer-5.c: Same.\n\t* gcc.dg/autopar/outer-6.c: Same.\n\t* gcc.dg/autopar/reduc-2.c: Same.\n\t* gcc.dg/autopar/reduc-2char.c: Same.\n\t* gcc.dg/autopar/reduc-2short.c: Same.\n\t* gcc.dg/autopar/reduc-8.c: Same.\n\t* gcc.dg/autopar/uns-outer-4.c: New test.\n\t* gcc.dg/autopar/uns-outer-5.c: New test.\n\t* gcc.dg/autopar/uns-outer-6.c: New test.\n\nFrom-SVN: r226107", "tree": {"sha": "708b5d6ba2ce760f9aa54afab19127e158723c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/708b5d6ba2ce760f9aa54afab19127e158723c24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/comments", "author": null, "committer": null, "parents": [{"sha": "f45dacba22647dcee6d6b60751bca39940bbaaf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45dacba22647dcee6d6b60751bca39940bbaaf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45dacba22647dcee6d6b60751bca39940bbaaf2"}], "stats": {"total": 238, "additions": 208, "deletions": 30}, "files": [{"sha": "81c60beeba6d5dae09fd6bee262d19cb4eb1a337", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -1,3 +1,15 @@\n+2015-07-23  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-parloops.c (gather_scalar_reductions): Add arg to call to\n+\tvect_force_simple_reduction.\n+\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Same.\n+\t(vect_is_simple_reduction_1): Add and handle\n+\tneed_wrapping_integral_overflow parameter.\n+\t(vect_is_simple_reduction, vect_force_simple_reduction): Add and pass\n+\tneed_wrapping_integral_overflow parameter.\n+\t(vectorizable_reduction): Add arg to call to vect_is_simple_reduction.\n+\t* tree-vectorizer.h (vect_force_simple_reduction): Add parameter to decl.\n+\n 2015-07-23  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/66926,66951"}, {"sha": "3a6374cfadb68a7ce97301aa818569abb04e77b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -1,3 +1,16 @@\n+2015-07-23  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.dg/autopar/outer-4.c: Add xfail.\n+\t* gcc.dg/autopar/outer-5.c: Same.\n+\t* gcc.dg/autopar/outer-6.c: Same.\n+\t* gcc.dg/autopar/reduc-2.c: Same.\n+\t* gcc.dg/autopar/reduc-2char.c: Same.\n+\t* gcc.dg/autopar/reduc-2short.c: Same.\n+\t* gcc.dg/autopar/reduc-8.c: Same.\n+\t* gcc.dg/autopar/uns-outer-4.c: New test.\n+\t* gcc.dg/autopar/uns-outer-5.c: New test.\n+\t* gcc.dg/autopar/uns-outer-6.c: New test.\n+\n 2015-07-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66952"}, {"sha": "2027499eb288900b17e21e2e18e61b833bc70c82", "filename": "gcc/testsuite/gcc.dg/autopar/outer-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-4.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -32,4 +32,4 @@ int main(void)\n \n \n /* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" { xfail *-*-* } } } */"}, {"sha": "d6e0dd32836dab4081d9186d6c98671df3696e77", "filename": "gcc/testsuite/gcc.dg/autopar/outer-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-5.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -45,4 +45,4 @@ int main(void)\n }\n \n /* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" { xfail *-*-* } } } */"}, {"sha": "726794c25ca44b9a93f0ebdc83961ec8ae75aac0", "filename": "gcc/testsuite/gcc.dg/autopar/outer-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-6.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -44,6 +44,6 @@ int main(void)\n \n \n /* Check that outer loop is parallelized.  */\n-/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" { xfail *-*-* } } } */\n /* { dg-final { scan-tree-dump-times \"parallelizing inner loop\" 0 \"parloops\" } } */\n-/* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" { xfail *-*-* } } } */"}, {"sha": "2f4883d08e45529d4ace18b34730f6c22eb945d3", "filename": "gcc/testsuite/gcc.dg/autopar/reduc-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -63,6 +63,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Detected reduction\" 3 \"parloops\" } } */\n-/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 4 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"Detected reduction\" 3 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 4 \"parloops\" { xfail *-*-* } } } */\n "}, {"sha": "14867f343277cdc9b162806a6eba34217ed486bc", "filename": "gcc/testsuite/gcc.dg/autopar/reduc-2char.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2char.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -60,7 +60,7 @@ int main (void)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" } } */\n-/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops\" { xfail *-*-* } } } */\n \n "}, {"sha": "7c19cc59fd33b7edc91f424f8f7ce309c4cf6d67", "filename": "gcc/testsuite/gcc.dg/autopar/reduc-2short.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-2short.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -59,6 +59,6 @@ int main (void)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" } } */\n-/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops\" { xfail *-*-* } } } */\n "}, {"sha": "1d05c48274e7b6f45167a86fce04abd82cbb9e9b", "filename": "gcc/testsuite/gcc.dg/autopar/reduc-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-8.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -84,5 +84,5 @@ int main (void)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" } } */\n-/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops\" { xfail *-*-* } } } */"}, {"sha": "ef9fc2a9d4fc3e5c0541c09571f5960fe8542a37", "filename": "gcc/testsuite/gcc.dg/autopar/uns-outer-4.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-4.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-parallelize-loops=4 -fdump-tree-parloops-details -fdump-tree-optimized\" } */\n+\n+void abort (void);\n+\n+unsigned int g_sum=0;\n+unsigned int x[500][500];\n+\n+void __attribute__((noinline))\n+parloop (int N)\n+{\n+  int i, j;\n+  unsigned int sum;\n+\n+  /* Double reduction is currently not supported, outer loop is not\n+     parallelized.  Inner reduction is detected, inner loop is\n+     parallelized.  */\n+  sum = 0;\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      sum += x[i][j];\n+\n+  g_sum = sum;\n+}\n+\n+int\n+main (void)\n+{\n+  parloop (500);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" { xfail *-*-* } } } */"}, {"sha": "a929e5dc727b0485a293be299996388d73c3a3a7", "filename": "gcc/testsuite/gcc.dg/autopar/uns-outer-5.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-5.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-parallelize-loops=4 -fdump-tree-parloops-details -fdump-tree-optimized\" } */\n+\n+void abort (void);\n+\n+unsigned int x[500][500];\n+unsigned int y[500];\n+unsigned int g_sum=0;\n+\n+void __attribute__((noinline))\n+init (int i, int j)\n+{\n+  x[i][j]=1;\n+}\n+\n+void __attribute__((noinline))\n+parloop (int N)\n+{\n+  int i, j;\n+  unsigned int sum;\n+\n+  /* Inner cycle is currently not supported, outer loop is not\n+     parallelized.  Inner reduction is detected, inner loop is\n+     parallelized.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      sum = 0;\n+      for (j = 0; j < N; j++)\n+\tsum += x[i][j];\n+      y[i]=sum;\n+    }\n+  g_sum = sum;\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j;\n+  for (i = 0; i < 500; i++)\n+    for (j = 0; j < 500; j++)\n+      init (i, j);\n+\n+  parloop (500);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" } } */"}, {"sha": "5c745f80e93a3e35c950138b6351311ad3d62a1c", "filename": "gcc/testsuite/gcc.dg/autopar/uns-outer-6.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Funs-outer-6.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-parallelize-loops=4 -fdump-tree-parloops-details -fdump-tree-optimized\" } */\n+\n+void abort (void);\n+\n+unsigned int x[500][500];\n+unsigned int y[500];\n+unsigned int g_sum=0;\n+\n+\n+void __attribute__((noinline))\n+init (int i, int j)\n+{\n+  x[i][j]=1;\n+}\n+\n+void __attribute__((noinline))\n+parloop (int N)\n+{\n+  int i, j;\n+  unsigned int sum;\n+\n+  /* Outer loop reduction, outerloop is parallelized.  */\n+  sum=0;\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+\ty[i]=x[i][j];\n+      sum += y[i];\n+    }\n+  g_sum = sum;\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j;\n+  for (i = 0; i < 500; i++)\n+    for (j = 0; j < 500; j++)\n+      init (i, j);\n+\n+  parloop (500);\n+\n+  return 0;\n+}\n+\n+\n+/* Check that outer loop is parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"parallelizing inner loop\" 0 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 4 \"optimized\" } } */"}, {"sha": "88f22e85d44a3ed5352503c06c0c05e8d48d1438", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -2376,9 +2376,9 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n       if (!simple_iv (loop, loop, res, &iv, true)\n \t&& simple_loop_info)\n \t{\n-           gimple reduc_stmt = vect_force_simple_reduction (simple_loop_info,\n-\t\t\t\t\t\t\t    phi, true,\n-\t\t\t\t\t\t\t    &double_reduc);\n+\t   gimple reduc_stmt\n+\t     = vect_force_simple_reduction (simple_loop_info, phi, true,\n+\t\t\t\t\t    &double_reduc, true);\n \t   if (reduc_stmt && !double_reduc)\n               build_new_reduction (reduction_list, reduc_stmt, phi);\n         }"}, {"sha": "c31bfbdbad42d4f77c5207a38809fa7ccc90f805", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -715,7 +715,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \n       nested_cycle = (loop != LOOP_VINFO_LOOP (loop_vinfo));\n       reduc_stmt = vect_force_simple_reduction (loop_vinfo, phi, !nested_cycle,\n-\t\t\t\t\t\t&double_reduc);\n+\t\t\t\t\t\t&double_reduc, false);\n       if (reduc_stmt)\n         {\n           if (double_reduc)\n@@ -2339,7 +2339,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n static gimple\n vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n \t\t\t    bool check_reduction, bool *double_reduc,\n-\t\t\t    bool modify)\n+\t\t\t    bool modify, bool need_wrapping_integral_overflow)\n {\n   struct loop *loop = (gimple_bb (phi))->loop_father;\n   struct loop *vect_loop = LOOP_VINFO_LOOP (loop_info);\n@@ -2613,14 +2613,26 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n \t\t\t\"reduction: unsafe fp math optimization: \");\n       return NULL;\n     }\n-  else if (INTEGRAL_TYPE_P (type) && TYPE_OVERFLOW_TRAPS (type)\n-\t   && check_reduction)\n+  else if (INTEGRAL_TYPE_P (type) && check_reduction)\n     {\n-      /* Changing the order of operations changes the semantics.  */\n-      if (dump_enabled_p ())\n-\treport_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n-\t\t\t\"reduction: unsafe int math optimization: \");\n-      return NULL;\n+      if (TYPE_OVERFLOW_TRAPS (type))\n+\t{\n+\t  /* Changing the order of operations changes the semantics.  */\n+\t  if (dump_enabled_p ())\n+\t    report_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n+\t\t\t    \"reduction: unsafe int math optimization\"\n+\t\t\t    \" (overflow traps): \");\n+\t  return NULL;\n+\t}\n+      if (need_wrapping_integral_overflow && !TYPE_OVERFLOW_WRAPS (type))\n+\t{\n+\t  /* Changing the order of operations changes the semantics.  */\n+\t  if (dump_enabled_p ())\n+\t    report_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n+\t\t\t    \"reduction: unsafe int math optimization\"\n+\t\t\t    \" (overflow doesn't wrap): \");\n+\t  return NULL;\n+\t}\n     }\n   else if (SAT_FIXED_POINT_TYPE_P (type) && check_reduction)\n     {\n@@ -2749,10 +2761,12 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n \n static gimple\n vect_is_simple_reduction (loop_vec_info loop_info, gimple phi,\n-                          bool check_reduction, bool *double_reduc)\n+\t\t\t  bool check_reduction, bool *double_reduc,\n+\t\t\t  bool need_wrapping_integral_overflow)\n {\n   return vect_is_simple_reduction_1 (loop_info, phi, check_reduction,\n-\t\t\t\t     double_reduc, false);\n+\t\t\t\t     double_reduc, false,\n+\t\t\t\t     need_wrapping_integral_overflow);\n }\n \n /* Wrapper around vect_is_simple_reduction_1, which will modify code\n@@ -2761,10 +2775,12 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple phi,\n \n gimple\n vect_force_simple_reduction (loop_vec_info loop_info, gimple phi,\n-                          bool check_reduction, bool *double_reduc)\n+\t\t\t     bool check_reduction, bool *double_reduc,\n+\t\t\t     bool need_wrapping_integral_overflow)\n {\n   return vect_is_simple_reduction_1 (loop_info, phi, check_reduction,\n-\t\t\t\t     double_reduc, true);\n+\t\t\t\t     double_reduc, true,\n+\t\t\t\t     need_wrapping_integral_overflow);\n }\n \n /* Calculate cost of peeling the loop PEEL_ITERS_PROLOGUE times.  */\n@@ -5074,7 +5090,7 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n     }\n \n   gimple tmp = vect_is_simple_reduction (loop_vinfo, reduc_def_stmt,\n-\t\t\t\t\t !nested_cycle, &dummy);\n+\t\t\t\t\t !nested_cycle, &dummy, false);\n   if (orig_stmt)\n     gcc_assert (tmp == orig_stmt\n \t\t|| GROUP_FIRST_ELEMENT (vinfo_for_stmt (tmp)) == orig_stmt);"}, {"sha": "dfa879583ac81d78004806e79a3159acc4317605", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "patch": "@@ -1090,7 +1090,8 @@ extern tree vect_create_addr_base_for_vector_ref (gimple, gimple_seq *,\n /* In tree-vect-loop.c.  */\n /* FORNOW: Used in tree-parloops.c.  */\n extern void destroy_loop_vec_info (loop_vec_info, bool);\n-extern gimple vect_force_simple_reduction (loop_vec_info, gimple, bool, bool *);\n+extern gimple vect_force_simple_reduction (loop_vec_info, gimple, bool, bool *,\n+\t\t\t\t\t   bool);\n /* Drive for loop analysis stage.  */\n extern loop_vec_info vect_analyze_loop (struct loop *);\n /* Drive for loop transformation stage.  */"}]}