{"sha": "411be49d64b9be1b24a3925c5b245af0d876cffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDExYmU0OWQ2NGI5YmUxYjI0YTM5MjVjNWIyNDVhZjBkODc2Y2ZmYQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-06-25T23:12:07Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-06-25T23:12:07Z"}, "message": "re PR target/65979 ([SH] Wrong code is generated with stage1 compiler)\n\ngcc/\n\tPR target/65979\n\tPR target/66611\n\t* config/sh/sh.md (tstsi_t peephole2): Use insn_invalid_p to check if\n\tthe replacement insn will work.\n\nFrom-SVN: r224988", "tree": {"sha": "9ef02c399f6be2e6d8f5d97e20c1fbfb89103204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ef02c399f6be2e6d8f5d97e20c1fbfb89103204"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/411be49d64b9be1b24a3925c5b245af0d876cffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411be49d64b9be1b24a3925c5b245af0d876cffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/411be49d64b9be1b24a3925c5b245af0d876cffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411be49d64b9be1b24a3925c5b245af0d876cffa/comments", "author": null, "committer": null, "parents": [{"sha": "4115076d89d75a8ad4673df344645a05ad94c3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4115076d89d75a8ad4673df344645a05ad94c3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4115076d89d75a8ad4673df344645a05ad94c3c3"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "0a9c6b1086d040a83ae1a41fdde4cd8991429583", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411be49d64b9be1b24a3925c5b245af0d876cffa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411be49d64b9be1b24a3925c5b245af0d876cffa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=411be49d64b9be1b24a3925c5b245af0d876cffa", "patch": "@@ -1,3 +1,10 @@\n+2015-06-25  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/65979\n+\tPR target/66611\n+\t* config/sh/sh.md (tstsi_t peephole2): Use insn_invalid_p to check if\n+\tthe replacement insn will work.\n+\n 2015-06-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.c (driver_handle_option): Validate -pie if PIE is enabled"}, {"sha": "35113c092c0e6a0c0912baad8145541a98782b08", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411be49d64b9be1b24a3925c5b245af0d876cffa/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411be49d64b9be1b24a3925c5b245af0d876cffa/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=411be49d64b9be1b24a3925c5b245af0d876cffa", "patch": "@@ -14733,8 +14733,19 @@ label:\n   if (REGNO (operands[1]) == REGNO (operands[2]))\n       operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]));\n \n-  sh_check_add_incdec_notes (emit_insn (gen_rtx_SET (operands[2],\n-\t\t\t\t\t\t     operands[3])));\n+  // We don't know what the new set insn will be in detail.  Just make sure\n+  // that it still can be recognized and the constraints are satisfied.\n+  rtx_insn* i = emit_insn (gen_rtx_SET (operands[2], operands[3]));\n+\t\t\t\t\t\t     \n+  recog_data_d prev_recog_data = recog_data;\n+  bool i_invalid = insn_invalid_p (i, false); \n+  recog_data = prev_recog_data;\n+  \n+  if (i_invalid)\n+    FAIL;\n+    \n+  sh_check_add_incdec_notes (i);\n+\n   emit_insn (gen_tstsi_t (operands[2],\n \t\t\t  gen_rtx_REG (SImode, (REGNO (operands[1])))));\n })\n@@ -14761,8 +14772,19 @@ label:\n        || REGNO (operands[2]) == REGNO (operands[5]))\"\n   [(const_int 0)]\n {\n-  sh_check_add_incdec_notes (emit_insn (gen_rtx_SET (operands[2],\n-\t\t\t\t\t\t     operands[3])));\n+  // We don't know what the new set insn will be in detail.  Just make sure\n+  // that it still can be recognized and the constraints are satisfied.\n+  rtx_insn* i = emit_insn (gen_rtx_SET (operands[2], operands[3]));\n+\n+  recog_data_d prev_recog_data = recog_data;\n+  bool i_invalid = insn_invalid_p (i, false); \n+  recog_data = prev_recog_data;\n+  \n+  if (i_invalid)\n+    FAIL;\n+    \n+  sh_check_add_incdec_notes (i);\n+  \n   emit_insn (gen_tstsi_t (operands[2],\n \t\t\t  gen_rtx_REG (SImode, (REGNO (operands[1])))));\n })"}]}