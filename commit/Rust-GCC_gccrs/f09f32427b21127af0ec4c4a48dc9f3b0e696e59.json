{"sha": "f09f32427b21127af0ec4c4a48dc9f3b0e696e59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA5ZjMyNDI3YjIxMTI3YWYwZWM0YzRhNDhkYzlmM2IwZTY5NmU1OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-18T12:33:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-18T17:42:37Z"}, "message": "libstdc++: Reorder declarations of std::span members\n\nI find it easier to work with this class when the declarations match the\norder in the C++2a working paper.\n\nThere's no need to use long, descriptive template parameter names like\n_ContiguousIterator when the parameter is already constrained by the\nstd::contiguous_iterator concept. This is also consistent with the\nnaming conventions in the working paper.\n\n\t* include/std/span (span): Reorder members and rename template\n\tparameters to match declarations in the C++2a working paper.", "tree": {"sha": "ccf420f7b0a8d331e7db8ea5f9307cc8b191759e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccf420f7b0a8d331e7db8ea5f9307cc8b191759e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f09f32427b21127af0ec4c4a48dc9f3b0e696e59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09f32427b21127af0ec4c4a48dc9f3b0e696e59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f09f32427b21127af0ec4c4a48dc9f3b0e696e59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09f32427b21127af0ec4c4a48dc9f3b0e696e59/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b4dc38852f755de9c48cb78a773ab4e84b8078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b4dc38852f755de9c48cb78a773ab4e84b8078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b4dc38852f755de9c48cb78a773ab4e84b8078"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "6ae3955d2cef5d7d18a33ea3421808f98b5fce62", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f32427b21127af0ec4c4a48dc9f3b0e696e59/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f32427b21127af0ec4c4a48dc9f3b0e696e59/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f09f32427b21127af0ec4c4a48dc9f3b0e696e59", "patch": "@@ -1,5 +1,8 @@\n 2020-02-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/span (span): Reorder members and rename template\n+\tparameters to match declarations in the C++2a working paper.\n+\n \tP2116R0 Remove tuple-like protocol support from fixed-extent span\n \t* include/std/span (get, tuple_size, tuple_element): Remove.\n \t* testsuite/23_containers/span/everything.cc: Remove checks for"}, {"sha": "feb1c1f46ad10413482362f3cbc44995dfb9328f", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f32427b21127af0ec4c4a48dc9f3b0e696e59/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f32427b21127af0ec4c4a48dc9f3b0e696e59/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=f09f32427b21127af0ec4c4a48dc9f3b0e696e59", "patch": "@@ -140,34 +140,50 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n       // member types\n-      using value_type             = remove_cv_t<_Type>;\n       using element_type           = _Type;\n+      using value_type             = remove_cv_t<_Type>;\n       using size_type              = size_t;\n-      using reference              = element_type&;\n-      using const_reference        = const element_type&;\n+      using difference_type        = ptrdiff_t;\n       using pointer                = _Type*;\n       using const_pointer          = const _Type*;\n-      using iterator\n-\t= __gnu_cxx::__normal_iterator<pointer, span>;\n-      using const_iterator\n-\t= __gnu_cxx::__normal_iterator<const_pointer, span>;\n+      using reference              = element_type&;\n+      using const_reference        = const element_type&;\n+      using iterator = __gnu_cxx::__normal_iterator<pointer, span>;\n+      using const_iterator = __gnu_cxx::__normal_iterator<const_pointer, span>;\n       using reverse_iterator       = std::reverse_iterator<iterator>;\n       using const_reverse_iterator = std::reverse_iterator<const_iterator>;\n-      using difference_type        = ptrdiff_t;\n \n       // member constants\n-      static inline constexpr size_t extent = _Extent;\n+      static constexpr size_t extent = _Extent;\n \n-      // constructors\n+      // constructors, copy and assignment\n \n       constexpr\n       span() noexcept\n       requires ((_Extent + 1u) <= 1u)\n       : _M_extent(0), _M_ptr(nullptr)\n       { }\n \n-      constexpr\n-      span(const span&) noexcept = default;\n+      template<contiguous_iterator _It>\n+\trequires (__is_compatible_iterator<_It>::value)\n+\tconstexpr\n+\tspan(_It __first, size_type __count)\n+\tnoexcept\n+\t: _M_extent(__count), _M_ptr(std::to_address(__first))\n+\t{ __glibcxx_assert(_Extent == dynamic_extent || __count == _Extent); }\n+\n+      template<contiguous_iterator _It, sized_sentinel_for<_It> _End>\n+\t  requires (__is_compatible_iterator<_It>::value)\n+\t    && (!is_convertible_v<_End, size_type>)\n+\tconstexpr\n+\tspan(_It __first, _End __last)\n+\tnoexcept(noexcept(__last - __first))\n+\t: _M_extent(static_cast<size_type>(__last - __first)),\n+\t  _M_ptr(std::to_address(__first))\n+\t{\n+\t  if (_Extent != dynamic_extent)\n+\t    __glibcxx_assert((__last - __first) == _Extent);\n+\t}\n \n       template<typename _Tp, size_t _ArrayExtent>\n \trequires (__is_compatible_array<_Tp, _ArrayExtent>::value)\n@@ -203,27 +219,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: span(ranges::data(__range), ranges::size(__range))\n \t{ }\n \n-      template<contiguous_iterator _ContiguousIterator,\n-\tsized_sentinel_for<_ContiguousIterator> _Sentinel>\n-\t  requires (__is_compatible_iterator<_ContiguousIterator>::value)\n-\t    && (!is_convertible_v<_Sentinel, size_type>)\n-\tconstexpr\n-\tspan(_ContiguousIterator __first, _Sentinel __last)\n-\tnoexcept(noexcept(__last - __first))\n-\t: _M_extent(static_cast<size_type>(__last - __first)),\n-\t  _M_ptr(std::to_address(__first))\n-\t{\n-\t  if (_Extent != dynamic_extent)\n-\t    __glibcxx_assert((__last - __first) == _Extent);\n-\t}\n-\n-      template<contiguous_iterator _ContiguousIterator>\n-\trequires (__is_compatible_iterator<_ContiguousIterator>::value)\n-\tconstexpr\n-\tspan(_ContiguousIterator __first, size_type __count)\n-\tnoexcept\n-\t: _M_extent(__count), _M_ptr(std::to_address(__first))\n-\t{ __glibcxx_assert(_Extent == dynamic_extent || __count == _Extent); }\n+      constexpr\n+      span(const span&) noexcept = default;\n \n       template<typename _OType, size_t _OExtent>\n \trequires (_Extent == dynamic_extent || _Extent == _OExtent)\n@@ -233,7 +230,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_extent(__s.size()), _M_ptr(__s.data())\n \t{ }\n \n-      // assignment\n+      ~span() noexcept = default;\n \n       constexpr span&\n       operator=(const span&) noexcept = default;\n@@ -414,8 +411,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     span(const array<_Type, _ArrayExtent>&)\n       -> span<const _Type, _ArrayExtent>;\n \n-  template<contiguous_iterator _Iter, typename _Sentinel>\n-    span(_Iter, _Sentinel)\n+  template<contiguous_iterator _Iter, typename _End>\n+    span(_Iter, _End)\n       -> span<remove_reference_t<iter_reference_t<_Iter>>>;\n \n   template<typename _Range>"}]}