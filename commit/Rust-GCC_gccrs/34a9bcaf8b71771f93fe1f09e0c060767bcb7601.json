{"sha": "34a9bcaf8b71771f93fe1f09e0c060767bcb7601", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhOWJjYWY4YjcxNzcxZjkzZmUxZjA5ZTBjMDYwNzY3YmNiNzYwMQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2018-12-18T13:46:10Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-12-18T13:46:10Z"}, "message": "extend.texi (PowerPC Altivec/VSX Built-in Functions): Describe when a typedef name can be used as the type specifier for a vector type...\n\n2018-12-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* doc/extend.texi (PowerPC Altivec/VSX Built-in Functions):\n\tDescribe when a typedef name can be used as the type specifier for\n\ta vector type, and when it cannot.\n\nFrom-SVN: r267232", "tree": {"sha": "937714942d38f75c7a3222881fda0c5787c8d4bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/937714942d38f75c7a3222881fda0c5787c8d4bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a9bcaf8b71771f93fe1f09e0c060767bcb7601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a9bcaf8b71771f93fe1f09e0c060767bcb7601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a9bcaf8b71771f93fe1f09e0c060767bcb7601", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a9bcaf8b71771f93fe1f09e0c060767bcb7601/comments", "author": null, "committer": null, "parents": [{"sha": "68d459d955db9c017d948397d70a0f4f03309e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d459d955db9c017d948397d70a0f4f03309e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d459d955db9c017d948397d70a0f4f03309e93"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "7d97a05e6cd465408a48600508e852c04783ea69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a9bcaf8b71771f93fe1f09e0c060767bcb7601/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a9bcaf8b71771f93fe1f09e0c060767bcb7601/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34a9bcaf8b71771f93fe1f09e0c060767bcb7601", "patch": "@@ -1,3 +1,9 @@\n+2018-12-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* doc/extend.texi (PowerPC Altivec/VSX Built-in Functions):\n+\tDescribe when a typedef name can be used as the type specifier for\n+\ta vector type, and when it cannot.\n+\n 2018-12-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.h: Define TARGET_VTABLE_ENTRY_ALIGN."}, {"sha": "1849120b7bd16261d3558511523eb96fcfb4e4ae", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a9bcaf8b71771f93fe1f09e0c060767bcb7601/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a9bcaf8b71771f93fe1f09e0c060767bcb7601/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=34a9bcaf8b71771f93fe1f09e0c060767bcb7601", "patch": "@@ -16616,7 +16616,30 @@ disabled.  To use them, you must include @code{<altivec.h>} instead.\n \n @item\n GCC allows using a @code{typedef} name as the type specifier for a\n-vector type.\n+vector type, but only under the following circumstances:\n+\n+@itemize @bullet\n+\n+@item\n+When using @code{__vector} instead of @code{vector}; for example,\n+\n+@smallexample\n+typedef signed short int16;\n+__vector int16 data;\n+@end smallexample\n+\n+@item\n+When using @code{vector} in keyword-and-predefine mode; for example,\n+\n+@smallexample\n+typedef signed short int16;\n+vector int16 data;\n+@end smallexample\n+\n+Note that keyword-and-predefine mode is enabled by disabling GNU\n+extensions (e.g., by using @code{-std=c11}) and including\n+@code{<altivec.h>}.\n+@end itemize\n \n @item\n For C, overloaded functions are implemented with macros so the following"}]}