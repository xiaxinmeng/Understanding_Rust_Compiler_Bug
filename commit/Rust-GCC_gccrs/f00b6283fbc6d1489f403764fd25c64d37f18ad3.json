{"sha": "f00b6283fbc6d1489f403764fd25c64d37f18ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAwYjYyODNmYmM2ZDE0ODlmNDAzNzY0ZmQyNWM2NGQzN2YxOGFkMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-10-01T14:34:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-10-01T14:34:18Z"}, "message": "re PR middle-end/77798 (465.tonto ICE with trunk with -O2)\n\n2016-10-01  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/77798\n\t* genmatch.c (get_operand_type): Add operand position arg\n\tand handle COND_EXPR comparison operand with fixed boolean_type_node.\n\t(expr::gen_transform): Adjust.\n\t(dt_simplify::gen_1): Likewise.\n\n\t* gfortran.fortran-torture/compile/pr77798.f90: New testcase.\n\nFrom-SVN: r240696", "tree": {"sha": "950d06aa812fb57babca263e710c574a544041eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/950d06aa812fb57babca263e710c574a544041eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f00b6283fbc6d1489f403764fd25c64d37f18ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00b6283fbc6d1489f403764fd25c64d37f18ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f00b6283fbc6d1489f403764fd25c64d37f18ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00b6283fbc6d1489f403764fd25c64d37f18ad3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f0565b1438c82118f1f31f6880c509c472c3bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f0565b1438c82118f1f31f6880c509c472c3bf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f0565b1438c82118f1f31f6880c509c472c3bf5"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "90850713d4ed7f8a41aa6309ff101e1c34ca3f16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00b6283fbc6d1489f403764fd25c64d37f18ad3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00b6283fbc6d1489f403764fd25c64d37f18ad3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f00b6283fbc6d1489f403764fd25c64d37f18ad3", "patch": "@@ -1,3 +1,11 @@\n+2016-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/77798\n+\t* genmatch.c (get_operand_type): Add operand position arg\n+\tand handle COND_EXPR comparison operand with fixed boolean_type_node.\n+\t(expr::gen_transform): Adjust.\n+\t(dt_simplify::gen_1): Likewise.\n+\n 2016-10-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/sse.md (<mask_codefor><code><mode>): Add FALLTHRU"}, {"sha": "aa291ec30134450aad450097a97561f54c1501eb", "filename": "gcc/genmatch.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00b6283fbc6d1489f403764fd25c64d37f18ad3/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00b6283fbc6d1489f403764fd25c64d37f18ad3/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=f00b6283fbc6d1489f403764fd25c64d37f18ad3", "patch": "@@ -2216,11 +2216,12 @@ is_conversion (id_base *op)\n \t  || *op == VIEW_CONVERT_EXPR);\n }\n \n-/* Get the type to be used for generating operands of OP from the\n+/* Get the type to be used for generating operand POS of OP from the\n    various sources.  */\n \n static const char *\n-get_operand_type (id_base *op, const char *in_type,\n+get_operand_type (id_base *op, unsigned pos,\n+\t\t  const char *in_type,\n \t\t  const char *expr_type,\n \t\t  const char *other_oprnd_type)\n {\n@@ -2235,6 +2236,9 @@ get_operand_type (id_base *op, const char *in_type,\n   else if (is_a <operator_id *> (op)\n \t   && strcmp (as_a <operator_id *> (op)->tcc, \"tcc_comparison\") == 0)\n     return other_oprnd_type;\n+  else if (*op == COND_EXPR\n+\t   && pos == 0)\n+    return \"boolean_type_node\";\n   else\n     {\n       /* Otherwise all types should match - choose one in order of\n@@ -2319,7 +2323,7 @@ expr::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n       char dest[32];\n       snprintf (dest, 32, \"ops%d[%u]\", depth, i);\n       const char *optype\n-\t= get_operand_type (opr, in_type, expr_type,\n+\t= get_operand_type (opr, i, in_type, expr_type,\n \t\t\t    i == 0 ? NULL : op0type);\n       ops[i]->gen_transform (f, indent, dest, gimple, depth + 1, optype,\n \t\t\t     cinfo, indexes,\n@@ -3157,7 +3161,7 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t      char dest[32];\n \t      snprintf (dest, 32, \"res_ops[%d]\", j);\n \t      const char *optype\n-\t\t= get_operand_type (opr,\n+\t\t= get_operand_type (opr, j,\n \t\t\t\t    \"type\", e->expr_type,\n \t\t\t\t    j == 0 ? NULL : \"TREE_TYPE (res_ops[0])\");\n \t      /* We need to expand GENERIC conditions we captured from\n@@ -3247,7 +3251,7 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t\t  snprintf (dest, 32, \"res_op%d\", j);\n \t\t}\n \t      const char *optype\n-\t        = get_operand_type (opr,\n+\t        = get_operand_type (opr, j,\n \t\t\t\t    \"type\", e->expr_type,\n \t\t\t\t    j == 0\n \t\t\t\t    ? NULL : \"TREE_TYPE (res_op0)\");"}, {"sha": "6e5820347da9a878ac14f92f20db19f939ed62c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00b6283fbc6d1489f403764fd25c64d37f18ad3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00b6283fbc6d1489f403764fd25c64d37f18ad3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f00b6283fbc6d1489f403764fd25c64d37f18ad3", "patch": "@@ -1,3 +1,8 @@\n+2016-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/77798\n+\t* gfortran.fortran-torture/compile/pr77798.f90: New testcase.\n+\n 2016-10-01  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/77663"}, {"sha": "600216973889f1cb9ad82eb94791908870402897", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/pr77798.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00b6283fbc6d1489f403764fd25c64d37f18ad3/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr77798.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00b6283fbc6d1489f403764fd25c64d37f18ad3/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr77798.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr77798.f90?ref=f00b6283fbc6d1489f403764fd25c64d37f18ad3", "patch": "@@ -0,0 +1,17 @@\n+subroutine foo(self,value)\n+integer(kind=kind(1)), dimension(:) :: self\n+integer(kind=kind(1)), intent(in) :: value\n+integer(kind=kind(1)) :: x,y,sign\n+intent(inout) :: self\n+integer(kind=kind(1)) :: len,i\n+\n+len = size(self)\n+do i = 1,len\n+  x = self(i)\n+  if (x==0.0d0) cycle\n+  y = abs(x)\n+  sign = x/y\n+  self(i) = sign*min(value,y)\n+end do\n+\n+end subroutine"}]}