{"sha": "df9dda2d153cb89ae02d247648e859721b1c38f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY5ZGRhMmQxNTNjYjg5YWUwMmQyNDc2NDhlODU5NzIxYjFjMzhmNg==", "commit": {"author": {"name": "Sriraman Tallam", "email": "tmsriram@google.com", "date": "2013-07-18T19:24:22Z"}, "committer": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2013-07-18T19:24:22Z"}, "message": "PR57698, only report errors from early inlining when optimization is turned\n\nPR57698, only report errors from early inlining when optimization is turned\noff.\n\n\tPR middle-end/57698\n\t* tree-inline.c (expand_call_inline): Emit errors during\n\tearly_inlining only if optimization is not turned on.\n\n\tPR middle-end/57698\n\t* gcc.c-torture/compile/pr57698.c: New test.\n\t* gcc.c-torture/compile/pr43791.c: Remove prune output\n\tdirective.\n\t* gcc.c-torture/compile/pr44043.c: Ditto.\n\nFrom-SVN: r201039", "tree": {"sha": "ef5660a37382eb018b2fb4d5974e27e8cf33ea82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef5660a37382eb018b2fb4d5974e27e8cf33ea82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df9dda2d153cb89ae02d247648e859721b1c38f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9dda2d153cb89ae02d247648e859721b1c38f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df9dda2d153cb89ae02d247648e859721b1c38f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9dda2d153cb89ae02d247648e859721b1c38f6/comments", "author": {"login": "tmsri", "id": 38991943, "node_id": "MDQ6VXNlcjM4OTkxOTQz", "avatar_url": "https://avatars.githubusercontent.com/u/38991943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmsri", "html_url": "https://github.com/tmsri", "followers_url": "https://api.github.com/users/tmsri/followers", "following_url": "https://api.github.com/users/tmsri/following{/other_user}", "gists_url": "https://api.github.com/users/tmsri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmsri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmsri/subscriptions", "organizations_url": "https://api.github.com/users/tmsri/orgs", "repos_url": "https://api.github.com/users/tmsri/repos", "events_url": "https://api.github.com/users/tmsri/events{/privacy}", "received_events_url": "https://api.github.com/users/tmsri/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f9cdef43aad61c70a9f838d96c184bdffab7179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9cdef43aad61c70a9f838d96c184bdffab7179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9cdef43aad61c70a9f838d96c184bdffab7179"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "15591e1e288109a9644b04f0d1e3ae9f2359fa04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df9dda2d153cb89ae02d247648e859721b1c38f6", "patch": "@@ -1,3 +1,9 @@\n+2013-07-18  Sriraman Tallam  <tmsriram@google.com>\n+\n+\tPR middle-end/57698\n+\t* tree-inline.c (expand_call_inline): Emit errors during\n+\tearly_inlining only if optimization is not turned on.\n+\n 2013-07-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* passes.def: New."}, {"sha": "370aeaccf3355711c2e0e55e4d7968d0796008f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df9dda2d153cb89ae02d247648e859721b1c38f6", "patch": "@@ -1,3 +1,11 @@\n+2013-07-18  Sriraman Tallam  <tmsriram@google.com>\n+\n+\tPR middle-end/57698\n+\t* gcc.c-torture/compile/pr57698.c: New test.\n+\t* gcc.c-torture/compile/pr43791.c: Remove prune output\n+\tdirective.\n+\t* gcc.c-torture/compile/pr44043.c: Ditto.\n+\n 2013-07-18  Wei Mi  <wmi@google.com>\n \n \tPR rtl-optimization/57878"}, {"sha": "2b1d06ff78912cd83749c2de8ff4fdfd133848a5", "filename": "gcc/testsuite/gcc.c-torture/compile/pr43791.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43791.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43791.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43791.c?ref=df9dda2d153cb89ae02d247648e859721b1c38f6", "patch": "@@ -18,5 +18,3 @@ void fasttrylock(void (*slowfn)()) {\n void trylock(void) {\n      fasttrylock(slowtrylock);\n }\n-\n-/* { dg-prune-output \"(inlining failed in call to always_inline.*indirect function call with a yet undetermined callee|called from here)\" } */"}, {"sha": "943501b40915b9438995ca8ecda434bf79833deb", "filename": "gcc/testsuite/gcc.c-torture/compile/pr44043.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44043.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44043.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44043.c?ref=df9dda2d153cb89ae02d247648e859721b1c38f6", "patch": "@@ -85,5 +85,3 @@ int raw_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)\n {\n   raw_send_hdrinc(sk, msg->msg_iov, len, (void *)0, msg->msg_flags);\n }\n-\n-/* { dg-prune-output \"(inlining failed in call to always_inline.*indirect function call with a yet undetermined callee|called from here)\" } */"}, {"sha": "a9efb429022f33a6ef713c058d8d1deb9801fd21", "filename": "gcc/testsuite/gcc.c-torture/compile/pr57698.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr57698.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr57698.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr57698.c?ref=df9dda2d153cb89ae02d247648e859721b1c38f6", "patch": "@@ -0,0 +1,19 @@\n+typedef int (*IsAcceptableThis) (const int );\n+inline int\n+fn1 (IsAcceptableThis p1)\n+{\n+    p1 (0);\n+    return 0;\n+}\n+\n+__attribute__ ((always_inline))\n+inline int fn2 (const int a)\n+{\n+    return 0;\n+}\n+\n+void\n+fn3 ()\n+{\n+    fn1 (fn2);\n+}"}, {"sha": "cac868a864c46203b490039e685a8a9834a6e718", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9dda2d153cb89ae02d247648e859721b1c38f6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=df9dda2d153cb89ae02d247648e859721b1c38f6", "patch": "@@ -3905,6 +3905,10 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \t     for inlining, but we can't do that because frontends overwrite\n \t     the body.  */\n \t  && !cg_edge->callee->local.redefined_extern_inline\n+\t  /* During early inline pass, report only when optimization is\n+\t     not turned on.  */\n+\t  && (cgraph_global_info_ready\n+\t      || !optimize)\n \t  /* PR 20090218-1_0.c. Body can be provided by another module. */\n \t  && (reason != CIF_BODY_NOT_AVAILABLE || !flag_generate_lto))\n \t{"}]}