{"sha": "eb7d283dc33d007ef49e76ba16680644869877c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3ZDI4M2RjMzNkMDA3ZWY0OWU3NmJhMTY2ODA2NDQ4Njk4NzdjNA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2015-05-21T13:26:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-21T13:26:51Z"}, "message": "einfo.adb (Contract): This attribute now applies to constants.\n\n2015-05-21  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (Contract): This attribute now applies to constants.\n\t(Set_Contract): This attribute now applies to constants.\n\t(Write_Field34_Name): Add output for constants.\n\t* einfo.ads Attribute Contract now applies to constants.\n\t* sem_ch3.adb (Analyze_Object_Contract): Constants now have\n\ttheir Part_Of indicator verified.\n\t* sem_prag.adb (Analyze_Constituent): A constant is now a valid\n\tconstituent.\n\t(Analyze_Global_Item): A constant cannot act as an output.\n\t(Analyze_Initialization_Item): Constants are now a valid\n\tinitialization item.\n\t(Analyze_Initializes_In_Decl_Part): Rename\n\tglobal variable States_And_Vars to States_And_Objs and update\n\tall its occurrences.\n\t(Analyze_Input_Item): Constants are now a\n\tvalid initialization item. Remove SPARM RM references from error\n\tmessages.\n\t(Analyze_Pragma): Indicator Part_Of can now apply to a constant.\n\t(Collect_Body_States): Collect both source constants\n\tand variables.\n\t(Collect_States_And_Objects): Collect both source constants and\n\tvariables.\n\t(Collect_States_And_Variables): Rename\n\tto Collect_States_And_Objects and update all its occurrences.\n\t(Collect_Visible_States): Do not collect constants and variables\n\tused to map generic formals to actuals.\n\t(Find_Role): The role of a constant is that of an input. Separate the\n\trole of a variable from that of a constant.\n\t(Report_Unused_Constituents): Add specialized wording for constants.\n\t(Report_Unused_States): Add specialized wording for constants.\n\t* sem_util.adb (Add_Contract_Item): Add processing for constants.\n\t* sem_util.ads (Add_Contract_Item): Update the comment on usage.\n\t(Find_Placement_In_State_Space): Update the comment on usage.\n\nFrom-SVN: r223484", "tree": {"sha": "dace130e5b8463f0f6b2606f575f51211b70be8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dace130e5b8463f0f6b2606f575f51211b70be8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb7d283dc33d007ef49e76ba16680644869877c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7d283dc33d007ef49e76ba16680644869877c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb7d283dc33d007ef49e76ba16680644869877c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7d283dc33d007ef49e76ba16680644869877c4/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf"}], "stats": {"total": 297, "additions": 193, "deletions": 104}, "files": [{"sha": "27492bde478fb3e8388f7f4c8ebd29e9f66a351a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=eb7d283dc33d007ef49e76ba16680644869877c4", "patch": "@@ -1,3 +1,39 @@\n+2015-05-21  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (Contract): This attribute now applies to constants.\n+\t(Set_Contract): This attribute now applies to constants.\n+\t(Write_Field34_Name): Add output for constants.\n+\t* einfo.ads Attribute Contract now applies to constants.\n+\t* sem_ch3.adb (Analyze_Object_Contract): Constants now have\n+\ttheir Part_Of indicator verified.\n+\t* sem_prag.adb (Analyze_Constituent): A constant is now a valid\n+\tconstituent.\n+\t(Analyze_Global_Item): A constant cannot act as an output.\n+\t(Analyze_Initialization_Item): Constants are now a valid\n+\tinitialization item.\n+\t(Analyze_Initializes_In_Decl_Part): Rename\n+\tglobal variable States_And_Vars to States_And_Objs and update\n+\tall its occurrences.\n+\t(Analyze_Input_Item): Constants are now a\n+\tvalid initialization item. Remove SPARM RM references from error\n+\tmessages.\n+\t(Analyze_Pragma): Indicator Part_Of can now apply to a constant.\n+\t(Collect_Body_States): Collect both source constants\n+\tand variables.\n+\t(Collect_States_And_Objects): Collect both source constants and\n+\tvariables.\n+\t(Collect_States_And_Variables): Rename\n+\tto Collect_States_And_Objects and update all its occurrences.\n+\t(Collect_Visible_States): Do not collect constants and variables\n+\tused to map generic formals to actuals.\n+\t(Find_Role): The role of a constant is that of an input. Separate the\n+\trole of a variable from that of a constant.\n+\t(Report_Unused_Constituents): Add specialized wording for constants.\n+\t(Report_Unused_States): Add specialized wording for constants.\n+\t* sem_util.adb (Add_Contract_Item): Add processing for constants.\n+\t* sem_util.ads (Add_Contract_Item): Update the comment on usage.\n+\t(Find_Placement_In_State_Space): Update the comment on usage.\n+\n 2015-05-21  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch5.adb: minor reformatting."}, {"sha": "78ad3dcf5f0b6ae84d00526638a6a2d006ffec9a", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=eb7d283dc33d007ef49e76ba16680644869877c4", "patch": "@@ -1175,7 +1175,8 @@ package body Einfo is\n    function Contract (Id : E) return N is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Entry,\n+        (Ekind_In (Id, E_Constant,\n+                       E_Entry,\n                        E_Entry_Family,\n                        E_Generic_Package,\n                        E_Package,\n@@ -3748,7 +3749,8 @@ package body Einfo is\n    procedure Set_Contract (Id : E; V : N) is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Entry,\n+        (Ekind_In (Id, E_Constant,\n+                       E_Entry,\n                        E_Entry_Family,\n                        E_Generic_Package,\n                        E_Package,\n@@ -10066,7 +10068,8 @@ package body Einfo is\n    procedure Write_Field34_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n-         when E_Entry                                      |\n+         when E_Constant                                   |\n+              E_Entry                                      |\n               E_Entry_Family                               |\n               E_Generic_Package                            |\n               E_Package                                    |"}, {"sha": "f687d3d64b577baf9d9e3704fdfc5d014ae3a3ab", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=eb7d283dc33d007ef49e76ba16680644869877c4", "patch": "@@ -1096,10 +1096,10 @@ package Einfo is\n --       'COUNT when it applies to a family member.\n \n --    Contract (Node34)\n---       Defined in entry, entry family, [generic] package, package body,\n---       [generic] subprogram, subprogram body and variable entities. Points\n---       to the contract of the entity, holding various assertion items and\n---       data classifiers.\n+--       Defined in constant, entry, entry family, [generic] package, package\n+--       body, [generic] subprogram, subprogram body, and variable entities.\n+--       Points to the contract of the entity, holding various assertion items\n+--       and data classifiers.\n \n --    Entry_Parameters_Type (Node15)\n --       Defined in entries. Points to the access-to-record type that is\n@@ -5633,6 +5633,7 @@ package Einfo is\n    --    Activation_Record_Component         (Node31)\n    --    Encapsulating_State                 (Node32)   (constants only)\n    --    Linker_Section_Pragma               (Node33)\n+   --    Contract                            (Node34)   (constants only)\n    --    Has_Alignment_Clause                (Flag46)\n    --    Has_Atomic_Components               (Flag86)\n    --    Has_Biased_Representation           (Flag139)"}, {"sha": "47f6e701b1712ecbdbc96d010e1be5788847adfe", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=eb7d283dc33d007ef49e76ba16680644869877c4", "patch": "@@ -3205,6 +3205,8 @@ package body Sem_Ch3 is\n          return;\n       end if;\n \n+      --  Constant related checks\n+\n       if Ekind (Obj_Id) = E_Constant then\n \n          --  A constant cannot be effectively volatile. This check is only\n@@ -3224,6 +3226,8 @@ package body Sem_Ch3 is\n             Error_Msg_N (\"constant cannot be volatile\", Obj_Id);\n          end if;\n \n+      --  Variable related checks\n+\n       else pragma Assert (Ekind (Obj_Id) = E_Variable);\n \n          --  The following checks are only relevant when SPARK_Mode is on as\n@@ -3323,15 +3327,15 @@ package body Sem_Ch3 is\n          if Seen then\n             Check_External_Properties (Obj_Id, AR_Val, AW_Val, ER_Val, EW_Val);\n          end if;\n+      end if;\n \n-         --  Check whether the lack of indicator Part_Of agrees with the\n-         --  placement of the variable with respect to the state space.\n+      --  Check whether the lack of indicator Part_Of agrees with the placement\n+      --  of the object with respect to the state space.\n \n-         Prag := Get_Pragma (Obj_Id, Pragma_Part_Of);\n+      Prag := Get_Pragma (Obj_Id, Pragma_Part_Of);\n \n-         if No (Prag) then\n-            Check_Missing_Part_Of (Obj_Id);\n-         end if;\n+      if No (Prag) then\n+         Check_Missing_Part_Of (Obj_Id);\n       end if;\n \n       --  A ghost object cannot be imported or exported (SPARK RM 6.9(8))"}, {"sha": "7fb33b49cb018a4a95c7ff06954b9e2a2fdb8843", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 117, "deletions": 85, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=eb7d283dc33d007ef49e76ba16680644869877c4", "patch": "@@ -497,7 +497,7 @@ package body Sem_Prag is\n       --  A flag used to track the legality of a null output\n \n       Result_Seen : Boolean := False;\n-      --  A flag set when Subp_Id'Result is processed\n+      --  A flag set when Spec_Id'Result is processed\n \n       States_Seen : Elist_Id := No_Elist;\n       --  A list containing the entities of all states processed so far. It\n@@ -1048,6 +1048,11 @@ package body Sem_Prag is\n                   Item_Is_Output := True;\n                end if;\n \n+            --  Constant case\n+\n+            elsif Ekind (Item_Id) = E_Constant then\n+               Item_Is_Input := True;\n+\n             --  Generic parameter cases\n \n             elsif Ekind (Item_Id) = E_Generic_In_Parameter then\n@@ -1087,16 +1092,16 @@ package body Sem_Prag is\n                   Item_Is_Output := True;\n                end if;\n \n-            --  Object cases\n+            --  Variable case\n \n-            else pragma Assert (Ekind_In (Item_Id, E_Constant, E_Variable));\n+            else pragma Assert (Ekind (Item_Id) = E_Variable);\n \n-               --  When pragma Global is present, the mode of the object may\n+               --  When pragma Global is present, the mode of the variable may\n                --  be further constrained by setting a more restrictive mode.\n \n                if Global_Seen then\n \n-                  --  An object has mode IN when its type is unconstrained or\n+                  --  A variable has mode IN when its type is unconstrained or\n                   --  tagged because array bounds, discriminants or tags can be\n                   --  read.\n \n@@ -1110,7 +1115,7 @@ package body Sem_Prag is\n                      Item_Is_Output := True;\n                   end if;\n \n-               --  Otherwise the object has a default IN OUT mode\n+               --  Otherwise the variable has a default IN OUT mode\n \n                else\n                   Item_Is_Input  := True;\n@@ -1920,6 +1925,19 @@ package body Sem_Prag is\n                         Ref      => Item);\n                   end if;\n \n+               --  Constant related checks\n+\n+               elsif Ekind (Item_Id) = E_Constant then\n+\n+                  --  A constant is read-only item, therefore it cannot act as\n+                  --  an output.\n+\n+                  if Nam_In (Global_Mode, Name_In_Out, Name_Output) then\n+                     SPARK_Msg_NE\n+                       (\"constant & cannot act as output\", Item, Item_Id);\n+                     return;\n+                  end if;\n+\n                --  Variable related checks. These are only relevant when\n                --  SPARK_Mode is on as they are not standard Ada legality\n                --  rules.\n@@ -2275,8 +2293,8 @@ package body Sem_Prag is\n       Null_Seen     : Boolean := False;\n       --  Flags used to check the legality of a null initialization list\n \n-      States_And_Vars : Elist_Id := No_Elist;\n-      --  A list of all abstract states and variables declared in the visible\n+      States_And_Objs : Elist_Id := No_Elist;\n+      --  A list of all abstract states and objects declared in the visible\n       --  declarations of the related package. This list is used to detect the\n       --  legality of initialization items.\n \n@@ -2292,9 +2310,9 @@ package body Sem_Prag is\n       --  Verify the legality of a single initialization item followed by a\n       --  list of input items.\n \n-      procedure Collect_States_And_Variables;\n+      procedure Collect_States_And_Objects;\n       --  Inspect the visible declarations of the related package and gather\n-      --  the entities of all abstract states and variables in States_And_Vars.\n+      --  the entities of all abstract states and objects in States_And_Objs.\n \n       ---------------------------------\n       -- Analyze_Initialization_Item --\n@@ -2333,12 +2351,14 @@ package body Sem_Prag is\n             if Is_Entity_Name (Item) then\n                Item_Id := Entity_Of (Item);\n \n-               if Ekind_In (Item_Id, E_Abstract_State, E_Variable) then\n-\n+               if Ekind_In (Item_Id, E_Abstract_State,\n+                                     E_Constant,\n+                                     E_Variable)\n+               then\n                   --  The state or variable must be declared in the visible\n                   --  declarations of the package (SPARK RM 7.1.5(7)).\n \n-                  if not Contains (States_And_Vars, Item_Id) then\n+                  if not Contains (States_And_Objs, Item_Id) then\n                      Error_Msg_Name_1 := Chars (Pack_Id);\n                      SPARK_Msg_NE\n                        (\"initialization item & must appear in the visible \"\n@@ -2365,21 +2385,20 @@ package body Sem_Prag is\n                      end if;\n                   end if;\n \n-               --  The item references something that is not a state or a\n-               --  variable (SPARK RM 7.1.5(3)).\n+               --  The item references something that is not a state or object\n+               --  (SPARK RM 7.1.5(3)).\n \n                else\n                   SPARK_Msg_N\n-                    (\"initialization item must denote variable or state\",\n-                     Item);\n+                    (\"initialization item must denote object or state\", Item);\n                end if;\n \n             --  Some form of illegal construct masquerading as a name\n             --  (SPARK RM 7.1.5(3)). This is a syntax error, always report.\n \n             else\n                Error_Msg_N\n-                 (\"initialization item must denote variable or state\", Item);\n+                 (\"initialization item must denote object or state\", Item);\n             end if;\n          end if;\n       end Analyze_Initialization_Item;\n@@ -2439,20 +2458,20 @@ package body Sem_Prag is\n                   Input_Id := Entity_Of (Input);\n \n                   if Ekind_In (Input_Id, E_Abstract_State,\n+                                         E_Constant,\n                                          E_In_Parameter,\n                                          E_In_Out_Parameter,\n                                          E_Out_Parameter,\n                                          E_Variable)\n                   then\n-                     --  The input cannot denote states or variables declared\n-                     --  within the related package.\n+                     --  The input cannot denote states or objects declared\n+                     --  within the related package (SPARK RM 7.1.5(4)).\n \n                      if Within_Scope (Input_Id, Current_Scope) then\n                         Error_Msg_Name_1 := Chars (Pack_Id);\n                         SPARK_Msg_NE\n-                          (\"input item & cannot denote a visible variable or \"\n-                           & \"state of package % (SPARK RM 7.1.5(4))\",\n-                           Input, Input_Id);\n+                          (\"input item & cannot denote a visible object or \"\n+                           & \"state of package %\", Input, Input_Id);\n \n                      --  Detect a duplicate use of the same input item\n                      --  (SPARK RM 7.1.5(5)).\n@@ -2469,27 +2488,29 @@ package body Sem_Prag is\n                            Add_Item (Input_Id, States_Seen);\n                         end if;\n \n-                        if Ekind_In (Input_Id, E_Abstract_State, E_Variable)\n+                        if Ekind_In (Input_Id, E_Abstract_State,\n+                                               E_Constant,\n+                                               E_Variable)\n                           and then Present (Encapsulating_State (Input_Id))\n                         then\n                            Add_Item (Input_Id, Constits_Seen);\n                         end if;\n                      end if;\n \n-                  --  The input references something that is not a state or a\n-                  --  variable (SPARK RM 7.1.5(3)).\n+                  --  The input references something that is not a state or an\n+                  --  object (SPARK RM 7.1.5(3)).\n \n                   else\n                      SPARK_Msg_N\n-                       (\"input item must denote variable or state\", Input);\n+                       (\"input item must denote object or state\", Input);\n                   end if;\n \n                --  Some form of illegal construct masquerading as a name\n-               --  (SPARK RM 7.1.5(3)).\n+               --  (SPARK RM 7.1.5(3)). This is a syntax error, always report.\n \n                else\n-                  SPARK_Msg_N\n-                    (\"input item must denote variable or state\", Input);\n+                  Error_Msg_N\n+                    (\"input item must denote object or state\", Input);\n                end if;\n             end if;\n          end Analyze_Input_Item;\n@@ -2543,38 +2564,37 @@ package body Sem_Prag is\n          end if;\n       end Analyze_Initialization_Item_With_Inputs;\n \n-      ----------------------------------\n-      -- Collect_States_And_Variables --\n-      ----------------------------------\n+      --------------------------------\n+      -- Collect_States_And_Objects --\n+      --------------------------------\n \n-      procedure Collect_States_And_Variables is\n+      procedure Collect_States_And_Objects is\n          Pack_Spec : constant Node_Id := Specification (Pack_Decl);\n          Decl      : Node_Id;\n \n       begin\n          --  Collect the abstract states defined in the package (if any)\n \n          if Present (Abstract_States (Pack_Id)) then\n-            States_And_Vars := New_Copy_Elist (Abstract_States (Pack_Id));\n+            States_And_Objs := New_Copy_Elist (Abstract_States (Pack_Id));\n          end if;\n \n-         --  Collect all variables the appear in the visible declarations of\n-         --  the related package.\n+         --  Collect all objects the appear in the visible declarations of the\n+         --  related package.\n \n          if Present (Visible_Declarations (Pack_Spec)) then\n             Decl := First (Visible_Declarations (Pack_Spec));\n             while Present (Decl) loop\n-               if Nkind (Decl) = N_Object_Declaration\n-                 and then Ekind (Defining_Entity (Decl)) = E_Variable\n-                 and then Comes_From_Source (Decl)\n+               if Comes_From_Source (Decl)\n+                 and then Nkind (Decl) = N_Object_Declaration\n                then\n-                  Add_Item (Defining_Entity (Decl), States_And_Vars);\n+                  Add_Item (Defining_Entity (Decl), States_And_Objs);\n                end if;\n \n                Next (Decl);\n             end loop;\n          end if;\n-      end Collect_States_And_Variables;\n+      end Collect_States_And_Objects;\n \n       --  Local variables\n \n@@ -2600,7 +2620,7 @@ package body Sem_Prag is\n \n       --  Initialize the various lists used during analysis\n \n-      Collect_States_And_Variables;\n+      Collect_States_And_Objects;\n \n       if Present (Expressions (Inits)) then\n          Init := First (Expressions (Inits));\n@@ -3360,7 +3380,7 @@ package body Sem_Prag is\n             return;\n          end if;\n \n-         --  Determine where the state, variable or the package instantiation\n+         --  Determine where the state, object or the package instantiation\n          --  lives with respect to the enclosing packages or package bodies (if\n          --  any). This placement dictates the legality of the encapsulating\n          --  state.\n@@ -17380,7 +17400,7 @@ package body Sem_Prag is\n                State_Id : Entity_Id;\n                Instance : Node_Id);\n             --  Propagate the Part_Of indicator to all abstract states and\n-            --  variables declared in the visible state space of a package\n+            --  objects declared in the visible state space of a package\n             --  denoted by Pack_Id. State_Id is the encapsulating state.\n             --  Instance is the package instantiation node.\n \n@@ -17399,7 +17419,7 @@ package body Sem_Prag is\n \n                procedure Propagate_Part_Of (Pack_Id : Entity_Id);\n                --  Propagate the Part_Of indicator to all abstract states and\n-               --  variables declared in the visible state space of a package\n+               --  objects declared in the visible state space of a package\n                --  denoted by Pack_Id.\n \n                -----------------------\n@@ -17411,8 +17431,8 @@ package body Sem_Prag is\n \n                begin\n                   --  Traverse the entity chain of the package and set relevant\n-                  --  attributes of abstract states and variables declared in\n-                  --  the visible state space of the package.\n+                  --  attributes of abstract states and objects declared in the\n+                  --  visible state space of the package.\n \n                   Item_Id := First_Entity (Pack_Id);\n                   while Present (Item_Id)\n@@ -17423,11 +17443,11 @@ package body Sem_Prag is\n                      if not Comes_From_Source (Item_Id) then\n                         null;\n \n-                     --  The Part_Of indicator turns an abstract state or a\n-                     --  variable into a constituent of the encapsulating\n-                     --  state.\n+                     --  The Part_Of indicator turns an abstract state or an\n+                     --  object into a constituent of the encapsulating state.\n \n                      elsif Ekind_In (Item_Id, E_Abstract_State,\n+                                              E_Constant,\n                                               E_Variable)\n                      then\n                         Has_Item := True;\n@@ -17476,7 +17496,7 @@ package body Sem_Prag is\n             Check_Arg_Count (1);\n \n             --  Ensure the proper placement of the pragma. Part_Of must appear\n-            --  on a variable declaration or a package instantiation.\n+            --  on an object declaration or a package instantiation.\n \n             Stmt := Prev (N);\n             while Present (Stmt) loop\n@@ -17515,16 +17535,6 @@ package body Sem_Prag is\n                Stmt := Prev (Stmt);\n             end loop;\n \n-            --  When the context is an object declaration, ensure that it is a\n-            --  variable.\n-\n-            if Nkind (Stmt) = N_Object_Declaration\n-              and then Ekind (Defining_Entity (Stmt)) /= E_Variable\n-            then\n-               SPARK_Msg_N (\"indicator Part_Of must apply to a variable\", N);\n-               return;\n-            end if;\n-\n             --  Extract the entity of the related object declaration or package\n             --  instantiation. In the case of the instantiation, use the entity\n             --  of the instance spec.\n@@ -17549,10 +17559,10 @@ package body Sem_Prag is\n             if Legal then\n                State_Id := Entity (State);\n \n-               --  The Part_Of indicator turns a variable into a constituent\n-               --  of the encapsulating state.\n+               --  The Part_Of indicator turns an object into a constituent of\n+               --  the encapsulating state.\n \n-               if Ekind (Item_Id) = E_Variable then\n+               if Ekind_In (Item_Id, E_Constant, E_Variable) then\n                   Append_Elmt (Item_Id, Part_Of_Constituents (State_Id));\n                   Set_Encapsulating_State (Item_Id, State_Id);\n \n@@ -21983,7 +21993,7 @@ package body Sem_Prag is\n          --    2) Dep_Item denotes null and Ref_Item is Empty (special case)\n          --    3) Both items denote attribute 'Result\n          --    4) Both items denote the same formal parameter\n-         --    5) Both items denote the same variable\n+         --    5) Both items denote the same object\n          --    6) Dep_Item is an abstract state with visible null refinement\n          --       and Ref_Item denotes null.\n          --    7) Dep_Item is an abstract state with visible null refinement\n@@ -22079,7 +22089,7 @@ package body Sem_Prag is\n             then\n                Matched := True;\n \n-            --  Abstract states, formal parameters and variables\n+            --  Abstract states, formal parameters and objects\n \n             elsif Is_Entity_Name (Dep_Item) then\n \n@@ -22127,7 +22137,7 @@ package body Sem_Prag is\n                      Matched := True;\n                   end if;\n \n-               --  A formal parameter or a variable matches itself\n+               --  A formal parameter or an object matches itself\n \n                elsif Is_Entity_Name (Ref_Item)\n                  and then Entity_Of (Ref_Item) = Dep_Item_Id\n@@ -23392,7 +23402,6 @@ package body Sem_Prag is\n                Item := First (Expressions (List));\n                while Present (Item) loop\n                   Check_Refined_Global_Item (Item, Global_Mode);\n-\n                   Next (Item);\n                end loop;\n \n@@ -23770,7 +23779,7 @@ package body Sem_Prag is\n       --  Perform full analysis of a single refinement clause\n \n       function Collect_Body_States (Pack_Id : Entity_Id) return Elist_Id;\n-      --  Gather the entities of all abstract states and variables declared in\n+      --  Gather the entities of all abstract states and objects declared in\n       --  the body state space of package Pack_Id.\n \n       procedure Report_Unrefined_States (States : Elist_Id);\n@@ -23953,7 +23962,6 @@ package body Sem_Prag is\n \n                         if Node (State_Elmt) = Constit_Id then\n                            Check_Ghost_Constituent (Constit_Id);\n-\n                            Remove_Elmt (Body_States, State_Elmt);\n                            Collect_Constituent;\n                            return;\n@@ -24079,7 +24087,10 @@ package body Sem_Prag is\n                if Is_Entity_Name (Constit) then\n                   Constit_Id := Entity_Of (Constit);\n \n-                  if Ekind_In (Constit_Id, E_Abstract_State, E_Variable) then\n+                  if Ekind_In (Constit_Id, E_Abstract_State,\n+                                           E_Constant,\n+                                           E_Variable)\n+                  then\n                      Check_Matching_Constituent (Constit_Id);\n \n                   else\n@@ -24210,7 +24221,13 @@ package body Sem_Prag is\n                   if Ekind (Constit_Id) = E_Abstract_State then\n                      SPARK_Msg_NE\n                        (\"\\abstract state & defined #\", State, Constit_Id);\n+\n+                  elsif Ekind (Constit_Id) = E_Constant then\n+                     SPARK_Msg_NE\n+                       (\"\\constant & defined #\", State, Constit_Id);\n+\n                   else\n+                     pragma Assert (Ekind (Constit_Id) = E_Variable);\n                      SPARK_Msg_NE (\"\\variable & defined #\", State, Constit_Id);\n                   end if;\n \n@@ -24405,6 +24422,7 @@ package body Sem_Prag is\n          ----------------------------\n \n          procedure Collect_Visible_States (Pack_Id : Entity_Id) is\n+            Decl    : Node_Id;\n             Item_Id : Entity_Id;\n \n          begin\n@@ -24420,9 +24438,20 @@ package body Sem_Prag is\n                if not Comes_From_Source (Item_Id) then\n                   null;\n \n-               elsif Ekind_In (Item_Id, E_Abstract_State, E_Variable) then\n+               elsif Ekind (Item_Id) = E_Abstract_State then\n                   Add_Item (Item_Id, Result);\n \n+               elsif Ekind_In (Item_Id, E_Constant, E_Variable) then\n+                  Decl := Declaration_Node (Item_Id);\n+\n+                  --  Do not consider constants or variables that map generic\n+                  --  formals to their actuals as the formals cannot be named\n+                  --  from the outside and participate in refinement.\n+\n+                  if No (Corresponding_Generic_Association (Decl)) then\n+                     Add_Item (Item_Id, Result);\n+                  end if;\n+\n                --  Recursively gather the visible states of a nested package\n \n                elsif Ekind (Item_Id) = E_Package then\n@@ -24448,24 +24477,23 @@ package body Sem_Prag is\n \n          Decl := First (Declarations (Pack_Body));\n          while Present (Decl) loop\n+\n+            --  Capture source objects as internally generated temporaries\n+            --  cannot be named and participate in refinement.\n+\n             if Nkind (Decl) = N_Object_Declaration then\n                Item_Id := Defining_Entity (Decl);\n \n-               --  Capture source variables as internally generated temporaries\n-               --  cannot be named and participate in refinement.\n-\n-               if Ekind (Item_Id) = E_Variable\n-                 and then Comes_From_Source (Item_Id)\n-               then\n+               if Comes_From_Source (Item_Id) then\n                   Add_Item (Item_Id, Result);\n                end if;\n \n+            --  Capture the visible abstract states and objects of a source\n+            --  package [instantiation].\n+\n             elsif Nkind (Decl) = N_Package_Declaration then\n                Item_Id := Defining_Entity (Decl);\n \n-               --  Capture the visible abstract states and objects of a\n-               --  source package [instantiation].\n-\n                if Comes_From_Source (Item_Id) then\n                   Collect_Visible_States (Item_Id);\n                end if;\n@@ -24529,7 +24557,12 @@ package body Sem_Prag is\n                if Ekind (State_Id) = E_Abstract_State then\n                   SPARK_Msg_NE\n                     (\"\\abstract state & defined #\", Body_Id, State_Id);\n+\n+               elsif Ekind (State_Id) = E_Constant then\n+                  SPARK_Msg_NE (\"\\constant & defined #\", Body_Id, State_Id);\n+\n                else\n+                  pragma Assert (Ekind (State_Id) = E_Variable);\n                   SPARK_Msg_NE (\"\\variable & defined #\", Body_Id, State_Id);\n                end if;\n \n@@ -24553,7 +24586,7 @@ package body Sem_Prag is\n \n       Available_States := New_Copy_Elist (Abstract_States (Spec_Id));\n \n-      --  Gather all abstract states and variables declared in the visible\n+      --  Gather all abstract states and objects declared in the visible\n       --  state space of the package body. These items must be utilized as\n       --  constituents in a state refinement.\n \n@@ -24571,7 +24604,6 @@ package body Sem_Prag is\n             Clause := First (Component_Associations (Clauses));\n             while Present (Clause) loop\n                Analyze_Refinement_Clause (Clause);\n-\n                Next (Clause);\n             end loop;\n          end if;\n@@ -24587,7 +24619,7 @@ package body Sem_Prag is\n \n       Report_Unrefined_States (Available_States);\n \n-      --  Ensure that all abstract states and variables declared in the body\n+      --  Ensure that all abstract states and objects declared in the body\n       --  state space of the related package are utilized as constituents.\n \n       Report_Unused_States (Body_States);"}, {"sha": "716c2d84c3ea8bbb60f4f0d33e3eb132ba9e84db", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=eb7d283dc33d007ef49e76ba16680644869877c4", "patch": "@@ -312,14 +312,27 @@ package body Sem_Util is\n          Set_Contract (Id, Items);\n       end if;\n \n+      --  Contract items related to constants. Applicable pragmas are:\n+      --    Part_Of\n+\n+      if Ekind (Id) = E_Constant then\n+         if Prag_Nam = Name_Part_Of then\n+            Add_Classification;\n+\n+         --  The pragma is not a proper contract item\n+\n+         else\n+            raise Program_Error;\n+         end if;\n+\n       --  Contract items related to [generic] packages or instantiations. The\n       --  applicable pragmas are:\n       --    Abstract_States\n       --    Initial_Condition\n       --    Initializes\n       --    Part_Of (instantiation only)\n \n-      if Ekind_In (Id, E_Generic_Package, E_Package) then\n+      elsif Ekind_In (Id, E_Generic_Package, E_Package) then\n          if Nam_In (Prag_Nam, Name_Abstract_State,\n                               Name_Initial_Condition,\n                               Name_Initializes)"}, {"sha": "910b282d4d4e8f7769c2331dcc5408bd1f851a8a", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7d283dc33d007ef49e76ba16680644869877c4/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=eb7d283dc33d007ef49e76ba16680644869877c4", "patch": "@@ -50,7 +50,7 @@ package Sem_Util is\n    --  block already has an identifier, Id returns the entity of its label.\n \n    procedure Add_Contract_Item (Prag : Node_Id; Id : Entity_Id);\n-   --  Add pragma Prag to the contract of an entry, a package [body], a\n+   --  Add pragma Prag to the contract of a constant, entry, package [body],\n    --  subprogram [body] or variable denoted by Id. The following are valid\n    --  pragmas:\n    --    Abstract_State\n@@ -733,10 +733,10 @@ package Sem_Util is\n       Placement : out State_Space_Kind;\n       Pack_Id   : out Entity_Id);\n    --  Determine the state space placement of an item. Item_Id denotes the\n-   --  entity of an abstract state, variable or package instantiation.\n-   --  Placement captures the precise placement of the item in the enclosing\n-   --  state space. If the state space is that of a package, Pack_Id denotes\n-   --  its entity, otherwise Pack_Id is Empty.\n+   --  entity of an abstract state, object or package instantiation. Placement\n+   --  captures the precise placement of the item in the enclosing state space.\n+   --  If the state space is that of a package, Pack_Id denotes its entity,\n+   --  otherwise Pack_Id is Empty.\n \n    function Find_Static_Alternative (N : Node_Id) return Node_Id;\n    --  N is a case statement whose expression is a compile-time value."}]}