{"sha": "58c741a62e5f940a8e6f26b3154eebed3c03a466", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjNzQxYTYyZTVmOTQwYThlNmYyNmIzMTU0ZWViZWQzYzAzYTQ2Ng==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2011-01-26T04:19:58Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2011-01-26T04:19:58Z"}, "message": "re PR target/40125 (libgcc_s DLL installed in wrong directory in cross toolchain)\n\ngcc/ChangeLog:\n\n\tPR target/40125\n\t* config.gcc (i[34567]86-*-pe | i[34567]86-*-cygwin*): Select suitable\n\tt-dlldir{,-x} fragment for build and add it to tmake_file.\n\t(i[34567]86-*-mingw* | x86_64-*-mingw*): Likewise.\n\t* Makefile.in (libgcc.mvars): Also export SHLIB_DLLDIR to libgcc.\n\t* config/i386/t-dlldir: New file.\n\t(SHLIB_DLLDIR): Define.\n\t* config/i386/t-dlldir-x: New file.\n\t(SHLIB_DLLDIR): Define.\n\t* config/i386/t-cygming: Error out if SHLIB_DLLDIR is not set.\n\t(SHLIB_INSTALL): Use it.\n\nlibgcc/ChangeLog:\n\n\tPR target/40125\n\t* configure.ac: Call ACX_NONCANONICAL_TARGET.\n\t(toolexecdir): Calculate and AC_SUBST.\n\t(toolexeclibdir): Likewise.\n\t* Makefile.in (target_noncanonical): Import.\n\t(toolexecdir): Likewise.\n\t(toolexeclibdir): Likewise.\n\t* configure: Regenerate.\n\nFrom-SVN: r169274", "tree": {"sha": "5baaf71e1160b38141e3ca33b23497cde91da050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5baaf71e1160b38141e3ca33b23497cde91da050"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58c741a62e5f940a8e6f26b3154eebed3c03a466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c741a62e5f940a8e6f26b3154eebed3c03a466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c741a62e5f940a8e6f26b3154eebed3c03a466", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c741a62e5f940a8e6f26b3154eebed3c03a466/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7150b3d881e4386649de951cf314d9e9a86fc20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7150b3d881e4386649de951cf314d9e9a86fc20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7150b3d881e4386649de951cf314d9e9a86fc20"}], "stats": {"total": 139, "additions": 135, "deletions": 4}, "files": [{"sha": "71ae9814260411d686b5976bac5a94f658d9f301", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58c741a62e5f940a8e6f26b3154eebed3c03a466", "patch": "@@ -1,3 +1,17 @@\n+2011-01-26  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR target/40125\n+\t* config.gcc (i[34567]86-*-pe | i[34567]86-*-cygwin*): Select suitable\n+\tt-dlldir{,-x} fragment for build and add it to tmake_file.\n+\t(i[34567]86-*-mingw* | x86_64-*-mingw*): Likewise.\n+\t* Makefile.in (libgcc.mvars): Also export SHLIB_DLLDIR to libgcc.\n+\t* config/i386/t-dlldir: New file.\n+\t(SHLIB_DLLDIR): Define.\n+\t* config/i386/t-dlldir-x: New file.\n+\t(SHLIB_DLLDIR): Define.\n+\t* config/i386/t-cygming: Error out if SHLIB_DLLDIR is not set.\n+\t(SHLIB_INSTALL): Use it.\n+\n 2011-01-26  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \tPR target/47246"}, {"sha": "9a8262a0b74117af4896ae5327ec9b7ce6b98b4f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=58c741a62e5f940a8e6f26b3154eebed3c03a466", "patch": "@@ -1909,6 +1909,7 @@ libgcc.mvars: config.status Makefile $(LIB2ADD) $(LIB2ADD_ST) specs \\\n \techo GCC_EXTRA_PARTS = '$(GCC_EXTRA_PARTS)' >> tmp-libgcc.mvars\n \techo SHLIB_LINK = '$(subst $(GCC_FOR_TARGET),$$(GCC_FOR_TARGET),$(SHLIB_LINK))' >> tmp-libgcc.mvars\n \techo SHLIB_INSTALL = '$(SHLIB_INSTALL)' >> tmp-libgcc.mvars\n+\techo SHLIB_DLLDIR = '$(SHLIB_DLLDIR)' >> tmp-libgcc.mvars\n \techo SHLIB_EXT = '$(SHLIB_EXT)' >> tmp-libgcc.mvars\n \techo SHLIB_MKMAP = '$(call srcdirify,$(SHLIB_MKMAP))' >> tmp-libgcc.mvars\n \techo SHLIB_MKMAP_OPTS = '$(SHLIB_MKMAP_OPTS)' >> tmp-libgcc.mvars"}, {"sha": "516c41f9bdf76cc4ed48d19f6539ff4a574ae916", "filename": "gcc/config.gcc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=58c741a62e5f940a8e6f26b3154eebed3c03a466", "patch": "@@ -1424,7 +1424,13 @@ i[34567]86-*-pe | i[34567]86-*-cygwin*)\n \telse\n \t\ttmake_eh_file=\"i386/t-sjlj-eh\"\n \tfi\n-\ttmake_file=\"${tmake_file} ${tmake_eh_file} i386/t-cygming i386/t-cygwin\"\n+\t# Shared libgcc DLL install dir depends on cross/native build.\n+\tif test x${host} = x${target} ; then\n+\t\ttmake_dlldir_file=\"i386/t-dlldir\"\n+\telse\n+\t\ttmake_dlldir_file=\"i386/t-dlldir-x\"\n+\tfi\n+\ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-cygming i386/t-cygwin\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/i386/winnt.c\"\n \textra_options=\"${extra_options} i386/cygming.opt\"\n \textra_objs=\"winnt.o winnt-stubs.o\"\n@@ -1480,7 +1486,13 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \telse\n \t\ttmake_eh_file=\"i386/t-sjlj-eh\"\n \tfi\n-\ttmake_file=\"${tmake_file} ${tmake_eh_file} i386/t-cygming t-dfprules\"\n+\t# Shared libgcc DLL install dir depends on cross/native build.\n+\tif test x${host} = x${target} ; then\n+\t\ttmake_dlldir_file=\"i386/t-dlldir\"\n+\telse\n+\t\ttmake_dlldir_file=\"i386/t-dlldir-x\"\n+\tfi\n+\ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-cygming t-dfprules\"\n         case ${target} in\n                x86_64-w64-*)\n                \t\ttmake_file=\"${tmake_file} i386/t-mingw-w64\""}, {"sha": "ccae237d3015617728f569aa3b14d7eeaaaa9694", "filename": "gcc/config/i386/t-cygming", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2Fconfig%2Fi386%2Ft-cygming", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2Fconfig%2Fi386%2Ft-cygming", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygming?ref=58c741a62e5f940a8e6f26b3154eebed3c03a466", "patch": "@@ -72,6 +72,11 @@ SHLIB_MAP = @shlib_map_file@\n SHLIB_OBJS = @shlib_objs@\n SHLIB_DIR = @multilib_dir@/shlib\n SHLIB_SLIBDIR_QUAL = @shlib_slibdir_qual@\n+# SHLIB_DLLDIR is defined by including one of either t-dlldir or t-dlldir-x\n+# (native/cross build respectively) in the tmake_file list in gcc/config.gcc.\n+ifndef SHLIB_DLLDIR\n+$(error SHLIB_DLLDIR must be defined)\n+endif\n \n SHLIB_LINK = $(LN_S) -f $(SHLIB_MAP) $(SHLIB_MAP).def && \\\n \tif [ ! -d $(SHLIB_DIR) ]; then \\\n@@ -91,9 +96,10 @@ SHLIB_LINK = $(LN_S) -f $(SHLIB_MAP) $(SHLIB_MAP).def && \\\n # $(slibdir) double quoted to protect it from expansion while building\n # libgcc.mk.  We want this delayed until actual install time.\n SHLIB_INSTALL = \\\n-\t$$(mkinstalldirs) $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL); \\\n+\t$$(mkinstalldirs) $$(DESTDIR)$$(SHLIB_DLLDIR) \\\n+\t  $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL); \\\n \t$(INSTALL) $(SHLIB_DIR)/$(SHLIB_SONAME) \\\n-\t  $$(DESTDIR)$$(bindir)/$(SHLIB_SONAME); \\\n+\t  $$(DESTDIR)$$(SHLIB_DLLDIR)/$(SHLIB_SONAME); \\\n \t$(INSTALL_DATA) $(SHLIB_DIR)/$(SHLIB_IMPLIB) \\\n \t  $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_IMPLIB)\n SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk"}, {"sha": "a3e03317a040cc8827cfafc3449133de6e243595", "filename": "gcc/config/i386/t-dlldir", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2Fconfig%2Fi386%2Ft-dlldir", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2Fconfig%2Fi386%2Ft-dlldir", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-dlldir?ref=58c741a62e5f940a8e6f26b3154eebed3c03a466", "patch": "@@ -0,0 +1,6 @@\n+\n+# In a native build, target DLLs go in bindir, where they can be executed.\n+# Note double quoting to prevent variables from being evaluated until install\n+# time; we don't want to expand them during libgcc.mvars generation.\n+\n+SHLIB_DLLDIR = $$(bindir)"}, {"sha": "07dd845f0a6004dcc3fd3e83aa4372f631d0dd90", "filename": "gcc/config/i386/t-dlldir-x", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2Fconfig%2Fi386%2Ft-dlldir-x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c741a62e5f940a8e6f26b3154eebed3c03a466/gcc%2Fconfig%2Fi386%2Ft-dlldir-x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-dlldir-x?ref=58c741a62e5f940a8e6f26b3154eebed3c03a466", "patch": "@@ -0,0 +1,9 @@\n+\n+# In a cross build, bindir contains host not target binaries, so target DLLs\n+# instead go in toolexeclibdir, alongside other target binaries and static libs.\n+# Note double quoting to prevent variables from being evaluated until install\n+# time; we don't want to expand them during libgcc.mvars generation, and in\n+# any case, $toolexeclibdir is not defined in the gcc/ subdirectory, only in\n+# target lib directories.\n+\n+SHLIB_DLLDIR = $$(toolexeclibdir)"}, {"sha": "3368decd997f7c7b850710a029006975992b5a4e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c741a62e5f940a8e6f26b3154eebed3c03a466/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c741a62e5f940a8e6f26b3154eebed3c03a466/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=58c741a62e5f940a8e6f26b3154eebed3c03a466", "patch": "@@ -1,3 +1,14 @@\n+2011-01-26  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR target/40125\n+\t* configure.ac: Call ACX_NONCANONICAL_TARGET.\n+\t(toolexecdir): Calculate and AC_SUBST.\n+\t(toolexeclibdir): Likewise.\n+\t* Makefile.in (target_noncanonical): Import.\n+\t(toolexecdir): Likewise.\n+\t(toolexeclibdir): Likewise.\n+\t* configure: Regenerate.\n+\n 2010-12-13  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR target/46040"}, {"sha": "7e2ab93fc42f6771d3d448099632807f69b32cd9", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c741a62e5f940a8e6f26b3154eebed3c03a466/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c741a62e5f940a8e6f26b3154eebed3c03a466/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=58c741a62e5f940a8e6f26b3154eebed3c03a466", "patch": "@@ -41,6 +41,7 @@ enable_decimal_float = @enable_decimal_float@\n fixed_point = @fixed_point@\n \n host_noncanonical = @host_noncanonical@\n+target_noncanonical = @target_noncanonical@\n \n # List of extra object files that should be compiled for this target machine.\n # The rules for compiling them should be in the t-* file for the machine.\n@@ -175,6 +176,9 @@ STRIP_FOR_TARGET = $(STRIP)\n libsubdir = $(libdir)/gcc/$(host_noncanonical)/$(version)\n # Used to install the shared libgcc.\n slibdir = @slibdir@\n+# Maybe used for DLLs on Windows targets.\n+toolexecdir = @toolexecdir@\n+toolexeclibdir = @toolexeclibdir@\n \n export AR_FOR_TARGET\n export AR_CREATE_FOR_TARGET\n@@ -194,6 +198,8 @@ export STRIP_FOR_TARGET\n export RANLIB_FOR_TARGET\n export libsubdir\n export slibdir\n+export toolexecdir\n+export toolexeclibdir\n \n version := $(shell $(CC) -dumpversion)\n "}, {"sha": "8a27aab188602e8b058d3724b8b5b2e2130e03e9", "filename": "libgcc/configure", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c741a62e5f940a8e6f26b3154eebed3c03a466/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c741a62e5f940a8e6f26b3154eebed3c03a466/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=58c741a62e5f940a8e6f26b3154eebed3c03a466", "patch": "@@ -576,10 +576,13 @@ RANLIB\n NM\n LIPO\n AR\n+toolexeclibdir\n+toolexecdir\n target_subdir\n host_subdir\n build_subdir\n build_libsubdir\n+target_noncanonical\n host_noncanonical\n host_os\n host_vendor\n@@ -2174,6 +2177,8 @@ esac\n esac\n \n \n+\n+\n # post-stage1 host modules use a different CC_FOR_BUILD so, in order to\n # have matching libraries, they should use host libraries: Makefile.tpl\n # arranges to pass --with-build-libsubdir=$(HOST_SUBDIR).\n@@ -2204,6 +2209,36 @@ fi\n target_subdir=${target_noncanonical}\n \n \n+# Calculate toolexeclibdir\n+# Also toolexecdir, though it's only used in toolexeclibdir\n+case ${version_specific_libs} in\n+  yes)\n+    # Need the gcc compiler version to know where to install libraries\n+    # and header files if --enable-version-specific-runtime-libs option\n+    # is selected.\n+    toolexecdir='$(libdir)/gcc/$(target_noncanonical)'\n+    toolexeclibdir='$(toolexecdir)/$(gcc_version)$(MULTISUBDIR)'\n+    ;;\n+  no)\n+    if test -n \"$with_cross_host\" &&\n+       test x\"$with_cross_host\" != x\"no\"; then\n+      # Install a library built with a cross compiler in tooldir, not libdir.\n+      toolexecdir='$(exec_prefix)/$(target_noncanonical)'\n+      toolexeclibdir='$(toolexecdir)/lib'\n+    else\n+      toolexecdir='$(libdir)/gcc-lib/$(target_noncanonical)'\n+      toolexeclibdir='$(libdir)'\n+    fi\n+    multi_os_directory=`$CC -print-multi-os-directory`\n+    case $multi_os_directory in\n+      .) ;; # Avoid trailing /.\n+      *) toolexeclibdir=$toolexeclibdir/$multi_os_directory ;;\n+    esac\n+    ;;\n+esac\n+\n+\n+\n if test -n \"$ac_tool_prefix\"; then\n   # Extract the first word of \"${ac_tool_prefix}ar\", so it can be a program name with args.\n set dummy ${ac_tool_prefix}ar; ac_word=$2"}, {"sha": "7dbe114e39438f1aa803bfd3a449bc689334141e", "filename": "libgcc/configure.ac", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c741a62e5f940a8e6f26b3154eebed3c03a466/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c741a62e5f940a8e6f26b3154eebed3c03a466/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=58c741a62e5f940a8e6f26b3154eebed3c03a466", "patch": "@@ -104,8 +104,39 @@ esac\n \n AC_CANONICAL_HOST\n ACX_NONCANONICAL_HOST\n+ACX_NONCANONICAL_TARGET\n GCC_TOPLEV_SUBDIRS\n \n+# Calculate toolexeclibdir\n+# Also toolexecdir, though it's only used in toolexeclibdir\n+case ${version_specific_libs} in\n+  yes)\n+    # Need the gcc compiler version to know where to install libraries\n+    # and header files if --enable-version-specific-runtime-libs option\n+    # is selected.\n+    toolexecdir='$(libdir)/gcc/$(target_noncanonical)'\n+    toolexeclibdir='$(toolexecdir)/$(gcc_version)$(MULTISUBDIR)'\n+    ;;\n+  no)\n+    if test -n \"$with_cross_host\" &&\n+       test x\"$with_cross_host\" != x\"no\"; then\n+      # Install a library built with a cross compiler in tooldir, not libdir.\n+      toolexecdir='$(exec_prefix)/$(target_noncanonical)'\n+      toolexeclibdir='$(toolexecdir)/lib'\n+    else\n+      toolexecdir='$(libdir)/gcc-lib/$(target_noncanonical)'\n+      toolexeclibdir='$(libdir)'\n+    fi\n+    multi_os_directory=`$CC -print-multi-os-directory`\n+    case $multi_os_directory in\n+      .) ;; # Avoid trailing /.\n+      *) toolexeclibdir=$toolexeclibdir/$multi_os_directory ;;\n+    esac\n+    ;;\n+esac\n+AC_SUBST(toolexecdir)\n+AC_SUBST(toolexeclibdir)\n+\n dnl These must be called before AM_PROG_LIBTOOL, because it may want\n dnl to call AC_CHECK_PROG.\n AC_CHECK_TOOL(AR, ar)"}]}