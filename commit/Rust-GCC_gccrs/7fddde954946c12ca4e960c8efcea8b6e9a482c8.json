{"sha": "7fddde954946c12ca4e960c8efcea8b6e9a482c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZkZGRlOTU0OTQ2YzEyY2E0ZTk2MGM4ZWZjZWE4YjZlOWE0ODJjOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-06-29T09:01:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-06-29T09:01:27Z"}, "message": "decl.c (gnat_to_gnu_entity): Beep up comment on SAVED...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Beep up comment on SAVED,\n\tand tweak comment on the assertion about the scopes of Itypes.  Do not\n\tskip the regular processing for Itypes that are E_Record_Subtype with\n\ta Cloned_Subtype.  Get the Cloned_Subtype for every E_Record_Subtype\n\tif the type is dummy and hasn't got its own freeze node.\n\t<E_Record_Subtype>: Save again the DECL of the Cloned_Subtype, if any.\n\t<E_Access_Subtype>: Save again the DECL of the equivalent type.\n\t(Gigi_Equivalent_Type) <E_Access_Subtype>: New case.\n\nFrom-SVN: r272822", "tree": {"sha": "8221ffdbfcb43bb4d9511b9668299105c311382d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8221ffdbfcb43bb4d9511b9668299105c311382d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fddde954946c12ca4e960c8efcea8b6e9a482c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fddde954946c12ca4e960c8efcea8b6e9a482c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fddde954946c12ca4e960c8efcea8b6e9a482c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fddde954946c12ca4e960c8efcea8b6e9a482c8/comments", "author": null, "committer": null, "parents": [{"sha": "db53aa5c98f2698c11e74c755c78f9a32b15e28f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db53aa5c98f2698c11e74c755c78f9a32b15e28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db53aa5c98f2698c11e74c755c78f9a32b15e28f"}], "stats": {"total": 107, "additions": 94, "deletions": 13}, "files": [{"sha": "55e337cb09864fc2da6bc84bcbfd9d9fe26327b8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7fddde954946c12ca4e960c8efcea8b6e9a482c8", "patch": "@@ -1,3 +1,14 @@\n+2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Beep up comment on SAVED,\n+\tand tweak comment on the assertion about the scopes of Itypes.  Do not\n+\tskip the regular processing for Itypes that are E_Record_Subtype with\n+\ta Cloned_Subtype.  Get the Cloned_Subtype for every E_Record_Subtype\n+\tif the type is dummy and hasn't got its own freeze node.\n+\t<E_Record_Subtype>: Save again the DECL of the Cloned_Subtype, if any.\n+\t<E_Access_Subtype>: Save again the DECL of the equivalent type.\n+\t(Gigi_Equivalent_Type) <E_Access_Subtype>: New case.\n+\n 2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (unchecked_convert): Tweak comment.  Only skip"}, {"sha": "81f621b576f7f672c9daa2592ac0db393e78c3b8", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=7fddde954946c12ca4e960c8efcea8b6e9a482c8", "patch": "@@ -308,7 +308,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n   tree gnu_size = NULL_TREE;\n   /* Contains the GCC name to be used for the GCC node.  */\n   tree gnu_entity_name;\n-  /* True if we have already saved gnu_decl as a GNAT association.  */\n+  /* True if we have already saved gnu_decl as a GNAT association.  This can\n+     also be used to purposely avoid making such an association but this use\n+     case ought not to be applied to types because it can break the deferral\n+     mechanism implemented for access types.  */\n   bool saved = false;\n   /* True if we incremented defer_incomplete_level.  */\n   bool this_deferred = false;\n@@ -325,14 +328,11 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n   /* Since a use of an Itype is a definition, process it as such if it is in\n      the main unit, except for E_Access_Subtype because it's actually a use\n-     of its base type, and for E_Record_Subtype with cloned subtype because\n-     it's actually a use of the cloned subtype, see below.  */\n+     of its base type, see below.  */\n   if (!definition\n       && is_type\n       && Is_Itype (gnat_entity)\n-      && !(kind == E_Access_Subtype\n-\t   || (kind == E_Record_Subtype\n-\t       && Present (Cloned_Subtype (gnat_entity))))\n+      && Ekind (gnat_entity) != E_Access_Subtype\n       && !present_gnu_tree (gnat_entity)\n       && In_Extended_Main_Code_Unit (gnat_entity))\n     {\n@@ -375,7 +375,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t}\n \n       /* This abort means the Itype has an incorrect scope, i.e. that its\n-\t scope does not correspond to the subprogram it is declared in.  */\n+\t scope does not correspond to the subprogram it is first used in.  */\n       gcc_unreachable ();\n     }\n \n@@ -384,7 +384,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n      In that case, we will abort below when we try to save a new GCC tree\n      for this object.  We also need to handle the case of getting a dummy\n      type when a Full_View exists but be careful so as not to trigger its\n-     premature elaboration.  */\n+     premature elaboration.  Likewise for a cloned subtype without its own\n+     freeze node, which typically happens when a generic gets instantiated\n+     on an incomplete or private type.  */\n   if ((!definition || (is_type && imported_p))\n       && present_gnu_tree (gnat_entity))\n     {\n@@ -398,7 +400,23 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      || No (Freeze_Node (Full_View (gnat_entity)))))\n \t{\n \t  gnu_decl\n-\t    = gnat_to_gnu_entity (Full_View (gnat_entity), NULL_TREE, false);\n+\t    = gnat_to_gnu_entity (Full_View (gnat_entity), NULL_TREE,\n+\t\t\t\t  false);\n+\t  save_gnu_tree (gnat_entity, NULL_TREE, false);\n+\t  save_gnu_tree (gnat_entity, gnu_decl, false);\n+\t}\n+\n+      if (TREE_CODE (gnu_decl) == TYPE_DECL\n+\t  && TYPE_IS_DUMMY_P (TREE_TYPE (gnu_decl))\n+\t  && Ekind (gnat_entity) == E_Record_Subtype\n+\t  && No (Freeze_Node (gnat_entity))\n+\t  && Present (Cloned_Subtype (gnat_entity))\n+\t  && (present_gnu_tree (Cloned_Subtype (gnat_entity))\n+\t      || No (Freeze_Node (Cloned_Subtype (gnat_entity)))))\n+\t{\n+\t  gnu_decl\n+\t    = gnat_to_gnu_entity (Cloned_Subtype (gnat_entity), NULL_TREE,\n+\t\t\t\t  false);\n \t  save_gnu_tree (gnat_entity, NULL_TREE, false);\n \t  save_gnu_tree (gnat_entity, gnu_decl, false);\n \t}\n@@ -3338,14 +3356,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n     case E_Record_Subtype:\n       /* If Cloned_Subtype is Present it means this record subtype has\n \t identical layout to that type or subtype and we should use\n-\t that GCC type for this one.  The front end guarantees that\n+\t that GCC type for this one.  The front-end guarantees that\n \t the component list is shared.  */\n       if (Present (Cloned_Subtype (gnat_entity)))\n \t{\n \t  gnu_decl = gnat_to_gnu_entity (Cloned_Subtype (gnat_entity),\n \t\t\t\t\t NULL_TREE, false);\n \t  gnat_annotate_type = Cloned_Subtype (gnat_entity);\n-\t  saved = true;\n+\t  maybe_present = true;\n \t  break;\n \t}\n \n@@ -3758,8 +3776,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n     case E_Access_Subtype:\n       /* We treat this as identical to its base type; any constraint is\n \t meaningful only to the front-end.  */\n-      gnu_decl = gnat_to_gnu_entity (Etype (gnat_entity), NULL_TREE, false);\n-      saved = true;\n+      gnu_decl = gnat_to_gnu_entity (gnat_equiv_type, NULL_TREE, false);\n+      maybe_present = true;\n \n       /* The designated subtype must be elaborated as well, if it does\n \t not have its own freeze node.  But designated subtypes created\n@@ -4983,6 +5001,10 @@ Gigi_Equivalent_Type (Entity_Id gnat_entity)\n \tgnat_equiv = Equivalent_Type (gnat_entity);\n       break;\n \n+    case E_Access_Subtype:\n+      gnat_equiv = Etype (gnat_entity);\n+      break;\n+\n     case E_Class_Wide_Type:\n       gnat_equiv = Root_Type (gnat_entity);\n       break;"}, {"sha": "c6500c7f48f237aa2bf3250f4d5ce5e402861938", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fddde954946c12ca4e960c8efcea8b6e9a482c8", "patch": "@@ -1,3 +1,10 @@\n+2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/array5.ads: New test.\n+\t* gnat.dg/specs/array5_pkg1.ads: New helper.\n+\t* gnat.dg/specs/array5_pkg2.ads: Likewise.\n+\t* gnat.dg/specs/array5_pkg2-g.ads: Likewise.\n+\n 2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/unchecked_convert1.ads: New test."}, {"sha": "b0c2d2b56da1ec79bcc290a3356e9e85f30e3a43", "filename": "gcc/testsuite/gnat.dg/specs/array5.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5.ads?ref=7fddde954946c12ca4e960c8efcea8b6e9a482c8", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do compile }\r\n+\r\n+with Array5_Pkg1; use Array5_Pkg1;\r\n+\r\n+package Array5 is\r\n+\r\n+  C : constant Integer := Arr'Last;\r\n+\r\n+end Array5;\r"}, {"sha": "885d6a44ac60458ad9d96076fbf1597ab1433687", "filename": "gcc/testsuite/gnat.dg/specs/array5_pkg1.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5_pkg1.ads?ref=7fddde954946c12ca4e960c8efcea8b6e9a482c8", "patch": "@@ -0,0 +1,14 @@\n+with Array5_Pkg2; use Array5_Pkg2;\r\n+with Array5_Pkg2.G;\r\n+\r\n+package Array5_Pkg1 is\r\n+\r\n+  type Derived is new Root with record\r\n+    N : Integer;\r\n+  end record;\r\n+\r\n+  package My_G is new Array5_Pkg2.G (Derived);\r\n+\r\n+  type Arr is array (1 .. My_G.Data.N) of Integer;\r\n+\r\n+end Array5_Pkg1;\r"}, {"sha": "1bb93960333869640523c0fa5e16d0d8ab8a93a4", "filename": "gcc/testsuite/gnat.dg/specs/array5_pkg2-g.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5_pkg2-g.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5_pkg2-g.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5_pkg2-g.ads?ref=7fddde954946c12ca4e960c8efcea8b6e9a482c8", "patch": "@@ -0,0 +1,13 @@\n+with System.Address_To_Access_Conversions;\r\n+\r\n+generic\r\n+\r\n+  type T is new Root with private;\r\n+\r\n+package Array5_Pkg2.G is\r\n+\r\n+  package Ptr is new System.Address_To_Access_Conversions (T);\r\n+\r\n+  Data : Ptr.Object_Pointer;\r\n+\r\n+end Array5_Pkg2.G;\r"}, {"sha": "6c83460aeb3b1b1d3889e3a0172872fcd714fabe", "filename": "gcc/testsuite/gnat.dg/specs/array5_pkg2.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fddde954946c12ca4e960c8efcea8b6e9a482c8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Farray5_pkg2.ads?ref=7fddde954946c12ca4e960c8efcea8b6e9a482c8", "patch": "@@ -0,0 +1,5 @@\n+package Array5_Pkg2 is\r\n+\r\n+  type Root is tagged null record;\r\n+\r\n+end Array5_Pkg2;\r"}]}