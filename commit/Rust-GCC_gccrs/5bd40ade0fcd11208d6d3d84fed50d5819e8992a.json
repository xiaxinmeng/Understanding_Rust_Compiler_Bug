{"sha": "5bd40ade0fcd11208d6d3d84fed50d5819e8992a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJkNDBhZGUwZmNkMTEyMDhkNmQzZDg0ZmVkNTBkNTgxOWU4OTkyYQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-07-22T17:46:05Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-07-22T17:46:05Z"}, "message": "Fix typos.\n\nFrom-SVN: r201141", "tree": {"sha": "8b58e1e023885e16bf43f1478351e146b4c2d2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b58e1e023885e16bf43f1478351e146b4c2d2d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bd40ade0fcd11208d6d3d84fed50d5819e8992a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd40ade0fcd11208d6d3d84fed50d5819e8992a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd40ade0fcd11208d6d3d84fed50d5819e8992a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd40ade0fcd11208d6d3d84fed50d5819e8992a/comments", "author": null, "committer": null, "parents": [{"sha": "558f3755faa4bc4a15cc4b917d487aca8de09bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558f3755faa4bc4a15cc4b917d487aca8de09bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558f3755faa4bc4a15cc4b917d487aca8de09bcb"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "4dfaaa8a1a37e3b8857c5b42be2ee4a310bf8772", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd40ade0fcd11208d6d3d84fed50d5819e8992a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd40ade0fcd11208d6d3d84fed50d5819e8992a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5bd40ade0fcd11208d6d3d84fed50d5819e8992a", "patch": "@@ -16489,7 +16489,7 @@ namespace std @{\n     template <class T> struct A @{ @};\n   @}\n   using namespace debug __attribute ((__strong__));\n-  template <> struct A<int> @{ @};   // @r{ok to specialize}\n+  template <> struct A<int> @{ @};   // @r{OK to specialize}\n \n   template <class T> void f (A<T>);\n @}"}, {"sha": "f14e11f6166e0bef6c0c43573516faff3e8d5023", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd40ade0fcd11208d6d3d84fed50d5819e8992a/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd40ade0fcd11208d6d3d84fed50d5819e8992a/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=5bd40ade0fcd11208d6d3d84fed50d5819e8992a", "patch": "@@ -3086,7 +3086,7 @@ code output, can produce insns whose patterns consist of a @code{parallel}\n whose elements are the operands needed to output the resulting\n assembler code---often @code{reg}, @code{mem} or constant expressions.\n This would not be well-formed RTL at any other stage in compilation,\n-but it is ok then because no further optimization remains to be done.\n+but it is OK then because no further optimization remains to be done.\n However, the definition of the macro @code{NOTICE_UPDATE_CC}, if\n any, must deal with such insns if you define any peephole optimizations.\n "}, {"sha": "69e7e03cf68732a6fc15de531bee2202becef574", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd40ade0fcd11208d6d3d84fed50d5819e8992a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd40ade0fcd11208d6d3d84fed50d5819e8992a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5bd40ade0fcd11208d6d3d84fed50d5819e8992a", "patch": "@@ -4959,7 +4959,7 @@ the function prologue.  Normally, the profiling code comes after.\n @cindex tail calls\n \n @deftypefn {Target Hook} bool TARGET_FUNCTION_OK_FOR_SIBCALL (tree @var{decl}, tree @var{exp})\n-True if it is ok to do sibling call optimization for the specified\n+True if it is OK to do sibling call optimization for the specified\n call expression @var{exp}.  @var{decl} will be the called function,\n or @code{NULL} if this is an indirect call.\n \n@@ -9861,7 +9861,7 @@ needed.\n \n @deftypefn {Target Hook} bool TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P (const_tree @var{fndecl})\n @cindex inlining\n-This target hook returns @code{true} if it is ok to inline @var{fndecl}\n+This target hook returns @code{true} if it is OK to inline @var{fndecl}\n into the current function, despite its having target-specific\n attributes, @code{false} otherwise.  By default, if a function has a\n target specific attribute attached to it, it will not be inlined."}, {"sha": "561506f203e7da5315a9f81eac43f4cafe7d9231", "filename": "gcc/target.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd40ade0fcd11208d6d3d84fed50d5819e8992a/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd40ade0fcd11208d6d3d84fed50d5819e8992a/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=5bd40ade0fcd11208d6d3d84fed50d5819e8992a", "patch": "@@ -1880,7 +1880,7 @@ needed.\",\n DEFHOOK\n (function_attribute_inlinable_p,\n  \"@cindex inlining\\n\\\n-This target hook returns @code{true} if it is ok to inline @var{fndecl}\\n\\\n+This target hook returns @code{true} if it is OK to inline @var{fndecl}\\n\\\n into the current function, despite its having target-specific\\n\\\n attributes, @code{false} otherwise.  By default, if a function has a\\n\\\n target specific attribute attached to it, it will not be inlined.\",\n@@ -2529,7 +2529,7 @@ The default value of this hook is based on target's libc.\",\n    this is an indirect call.  */\n DEFHOOK\n (function_ok_for_sibcall,\n- \"True if it is ok to do sibling call optimization for the specified\\n\\\n+ \"True if it is OK to do sibling call optimization for the specified\\n\\\n call expression @var{exp}.  @var{decl} will be the called function,\\n\\\n or @code{NULL} if this is an indirect call.\\n\\\n \\n\\"}]}