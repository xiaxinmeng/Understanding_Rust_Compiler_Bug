{"sha": "87d9741e4e6ff884ec5e34b19d46bd17051dec63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdkOTc0MWU0ZTZmZjg4NGVjNWUzNGIxOWQ0NmJkMTcwNTFkZWM2Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-07-22T00:36:52Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-07-22T00:36:52Z"}, "message": "combine.c (if_then_else_cond): Simplify the comparison of rtx against -1, 0, and 1.\n\n\t* combine.c (if_then_else_cond): Simplify the comparison of\n\trtx against -1, 0, and 1.\n\t* loop.c (check_dbra_loop): Likewise.\n\t* optabs.c (emit_conditional_move): Likewise.\n\t(emit_conditional_add): Likewise.\n\t* config/i386/i386.md (*movsi_or): Likewise.\n\t(*movdi_or_rex6): Likewise.\n\nFrom-SVN: r69658", "tree": {"sha": "775d4ddb99f9b3f93365bd8925c483c84331fcc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/775d4ddb99f9b3f93365bd8925c483c84331fcc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87d9741e4e6ff884ec5e34b19d46bd17051dec63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d9741e4e6ff884ec5e34b19d46bd17051dec63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d9741e4e6ff884ec5e34b19d46bd17051dec63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d9741e4e6ff884ec5e34b19d46bd17051dec63/comments", "author": null, "committer": null, "parents": [{"sha": "32d0e51b548705973cc92c97069e56ad7095022f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d0e51b548705973cc92c97069e56ad7095022f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d0e51b548705973cc92c97069e56ad7095022f"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "ba40ac662f634fe7d09204cc03891db6da4c8c51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d9741e4e6ff884ec5e34b19d46bd17051dec63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d9741e4e6ff884ec5e34b19d46bd17051dec63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87d9741e4e6ff884ec5e34b19d46bd17051dec63", "patch": "@@ -1,3 +1,13 @@\n+2003-07-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* combine.c (if_then_else_cond): Simplify the comparison of\n+\trtx against -1, 0, and 1.\n+\t* loop.c (check_dbra_loop): Likewise.\n+\t* optabs.c (emit_conditional_move): Likewise.\n+\t(emit_conditional_add): Likewise.\n+\t* config/i386/i386.md (*movsi_or): Likewise.\n+\t(*movdi_or_rex6): Likewise.\n+\n Tue Jul 22 00:42:12 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (cgraph_finalize_compilation_unit): Remove redundant if."}, {"sha": "431a723cde7f2747ffe9d989fe6ca9545b074bc4", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d9741e4e6ff884ec5e34b19d46bd17051dec63/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d9741e4e6ff884ec5e34b19d46bd17051dec63/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=87d9741e4e6ff884ec5e34b19d46bd17051dec63", "patch": "@@ -7345,7 +7345,7 @@ if_then_else_cond (rtx x, rtx *ptrue, rtx *pfalse)\n \n   /* If we are comparing a value against zero, we are done.  */\n   if ((code == NE || code == EQ)\n-      && GET_CODE (XEXP (x, 1)) == CONST_INT && INTVAL (XEXP (x, 1)) == 0)\n+      && XEXP (x, 1) == const0_rtx)\n     {\n       *ptrue = (code == NE) ? const_true_rtx : const0_rtx;\n       *pfalse = (code == NE) ? const0_rtx : const_true_rtx;"}, {"sha": "0977d3a2e1e240114f7c6de550a69dd1a5109e87", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d9741e4e6ff884ec5e34b19d46bd17051dec63/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d9741e4e6ff884ec5e34b19d46bd17051dec63/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=87d9741e4e6ff884ec5e34b19d46bd17051dec63", "patch": "@@ -1166,8 +1166,8 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand:SI 1 \"immediate_operand\" \"i\"))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && GET_CODE (operands[1]) == CONST_INT\n-   && INTVAL (operands[1]) == -1\n+  \"reload_completed\n+   && operands[1] == constm1_rtx\n    && (TARGET_PENTIUM || optimize_size)\"\n {\n   operands[1] = constm1_rtx;\n@@ -1930,8 +1930,7 @@\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && (TARGET_PENTIUM || optimize_size)\n    && reload_completed\n-   && GET_CODE (operands[1]) == CONST_INT\n-   && INTVAL (operands[1]) == -1\"\n+   && operands[1] == constm1_rtx\"\n {\n   operands[1] = constm1_rtx;\n   return \"or{q}\\t{%1, %0|%0, %1}\";"}, {"sha": "7485126550134d00a6f6460b8adc573eeb1b5fac", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d9741e4e6ff884ec5e34b19d46bd17051dec63/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d9741e4e6ff884ec5e34b19d46bd17051dec63/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=87d9741e4e6ff884ec5e34b19d46bd17051dec63", "patch": "@@ -8034,9 +8034,7 @@ check_dbra_loop (struct loop *loop, int insn_count)\n      In this case, add a reg_note REG_NONNEG, which allows the\n      m68k DBRA instruction to be used.  */\n \n-  if (((GET_CODE (comparison) == GT\n-\t&& GET_CODE (XEXP (comparison, 1)) == CONST_INT\n-\t&& INTVAL (XEXP (comparison, 1)) == -1)\n+  if (((GET_CODE (comparison) == GT && XEXP (comparison, 1) == constm1_rtx)\n        || (GET_CODE (comparison) == NE && XEXP (comparison, 1) == const0_rtx))\n       && GET_CODE (bl->biv->add_val) == CONST_INT\n       && INTVAL (bl->biv->add_val) < 0)"}, {"sha": "7a4bd0f9e9dce47e5ac31f1c70ff661a58cba43e", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d9741e4e6ff884ec5e34b19d46bd17051dec63/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d9741e4e6ff884ec5e34b19d46bd17051dec63/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=87d9741e4e6ff884ec5e34b19d46bd17051dec63", "patch": "@@ -4259,9 +4259,9 @@ emit_conditional_move (rtx target, enum rtx_code code, rtx op0, rtx op1,\n   /* get_condition will prefer to generate LT and GT even if the old\n      comparison was against zero, so undo that canonicalization here since\n      comparisons against zero are cheaper.  */\n-  if (code == LT && GET_CODE (op1) == CONST_INT && INTVAL (op1) == 1)\n+  if (code == LT && op1 == const1_rtx)\n     code = LE, op1 = const0_rtx;\n-  else if (code == GT && GET_CODE (op1) == CONST_INT && INTVAL (op1) == -1)\n+  else if (code == GT && op1 == constm1_rtx)\n     code = GE, op1 = const0_rtx;\n \n   if (cmode == VOIDmode)\n@@ -4400,9 +4400,9 @@ emit_conditional_add (rtx target, enum rtx_code code, rtx op0, rtx op1,\n   /* get_condition will prefer to generate LT and GT even if the old\n      comparison was against zero, so undo that canonicalization here since\n      comparisons against zero are cheaper.  */\n-  if (code == LT && GET_CODE (op1) == CONST_INT && INTVAL (op1) == 1)\n+  if (code == LT && op1 == const1_rtx)\n     code = LE, op1 = const0_rtx;\n-  else if (code == GT && GET_CODE (op1) == CONST_INT && INTVAL (op1) == -1)\n+  else if (code == GT && op1 == constm1_rtx)\n     code = GE, op1 = const0_rtx;\n \n   if (cmode == VOIDmode)"}]}