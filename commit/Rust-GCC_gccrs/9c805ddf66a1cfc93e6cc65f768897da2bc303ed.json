{"sha": "9c805ddf66a1cfc93e6cc65f768897da2bc303ed", "node_id": "C_kwDOANBUbNoAKDljODA1ZGRmNjZhMWNmYzkzZTZjYzY1Zjc2ODg5N2RhMmJjMzAzZWQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-09-05T09:20:38Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-09-05T09:20:38Z"}, "message": "docs: rename DEBUGGER_REGISTER_NUMBER in texi\n\ngcc/ChangeLog:\n\n\t* doc/tm.texi.in: Rename DEBUGGER_REGISTER_NUMBER to\n\t  DEBUGGER_REGNO.\n\t* doc/tm.texi: Regenerate.", "tree": {"sha": "ca9664878e70f6e925eea440be0848829168f920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca9664878e70f6e925eea440be0848829168f920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c805ddf66a1cfc93e6cc65f768897da2bc303ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c805ddf66a1cfc93e6cc65f768897da2bc303ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c805ddf66a1cfc93e6cc65f768897da2bc303ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c805ddf66a1cfc93e6cc65f768897da2bc303ed/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "e47bf28089a6e9fb4f72cc03a2961f071d160c45", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c805ddf66a1cfc93e6cc65f768897da2bc303ed/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c805ddf66a1cfc93e6cc65f768897da2bc303ed/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9c805ddf66a1cfc93e6cc65f768897da2bc303ed", "patch": "@@ -3785,7 +3785,7 @@ Define this macro if the target's representation for dwarf registers\n used in .eh_frame or .debug_frame is different from that used in other\n debug info sections.  Given a GCC hard register number, this macro\n should return the .eh_frame register number.  The default is\n-@code{DEBUGGER_REGISTER_NUMBER (@var{regno})}.\n+@code{DEBUGGER_REGNO (@var{regno})}.\n \n @end defmac\n \n@@ -9948,7 +9948,7 @@ This describes how to specify debugging information.\n @c prevent bad page break with this line\n These macros affect all debugging formats.\n \n-@defmac DEBUGGER_REGISTER_NUMBER (@var{regno})\n+@defmac DEBUGGER_REGNO (@var{regno})\n A C expression that returns the debugger register number for the compiler\n register number @var{regno}.  In the default macro provided, the value\n of this expression will be @var{regno} itself.  But sometimes there are\n@@ -9958,11 +9958,11 @@ compiler and another for debugger@.\n \n If two registers have consecutive numbers inside GCC, and they can be\n used as a pair to hold a multiword value, then they @emph{must} have\n-consecutive numbers after renumbering with @code{DEBUGGER_REGISTER_NUMBER}.\n+consecutive numbers after renumbering with @code{DEBUGGER_REGNO}.\n Otherwise, debuggers will be unable to access such a pair, because they\n expect register pairs to be consecutive in their own numbering scheme.\n \n-If you find yourself defining @code{DEBUGGER_REGISTER_NUMBER} in way that\n+If you find yourself defining @code{DEBUGGER_REGNO} in way that\n does not preserve register pairs, then what you must do instead is\n redefine the actual register numbering scheme.\n @end defmac"}, {"sha": "5312059ea79149a9d065076617a5a5e8653aa624", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c805ddf66a1cfc93e6cc65f768897da2bc303ed/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c805ddf66a1cfc93e6cc65f768897da2bc303ed/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=9c805ddf66a1cfc93e6cc65f768897da2bc303ed", "patch": "@@ -3012,7 +3012,7 @@ Define this macro if the target's representation for dwarf registers\n used in .eh_frame or .debug_frame is different from that used in other\n debug info sections.  Given a GCC hard register number, this macro\n should return the .eh_frame register number.  The default is\n-@code{DEBUGGER_REGISTER_NUMBER (@var{regno})}.\n+@code{DEBUGGER_REGNO (@var{regno})}.\n \n @end defmac\n \n@@ -6618,7 +6618,7 @@ This describes how to specify debugging information.\n @c prevent bad page break with this line\n These macros affect all debugging formats.\n \n-@defmac DEBUGGER_REGISTER_NUMBER (@var{regno})\n+@defmac DEBUGGER_REGNO (@var{regno})\n A C expression that returns the debugger register number for the compiler\n register number @var{regno}.  In the default macro provided, the value\n of this expression will be @var{regno} itself.  But sometimes there are\n@@ -6628,11 +6628,11 @@ compiler and another for debugger@.\n \n If two registers have consecutive numbers inside GCC, and they can be\n used as a pair to hold a multiword value, then they @emph{must} have\n-consecutive numbers after renumbering with @code{DEBUGGER_REGISTER_NUMBER}.\n+consecutive numbers after renumbering with @code{DEBUGGER_REGNO}.\n Otherwise, debuggers will be unable to access such a pair, because they\n expect register pairs to be consecutive in their own numbering scheme.\n \n-If you find yourself defining @code{DEBUGGER_REGISTER_NUMBER} in way that\n+If you find yourself defining @code{DEBUGGER_REGNO} in way that\n does not preserve register pairs, then what you must do instead is\n redefine the actual register numbering scheme.\n @end defmac"}]}