{"sha": "988b853f9c829742907ae22ac66de56facfc7bc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg4Yjg1M2Y5YzgyOTc0MjkwN2FlMjJhYzY2ZGU1NmZhY2ZjN2JjNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-23T06:28:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-23T08:40:16Z"}, "message": "libstdc++: Simplify filesystem::path SFINAE constraints\n\nThis replaces the filesystem::__detail::_Path SFINAE helper with two\nseparate helpers, _Path and _Path2. This avoids having one helper which\ntries to check two different sets of requirements.\n\nThe _Path helper now uses variable templates instead of a set of\noverloaded functions to detect specializations of basic_string or\nbasic_string_view.\n\nThe __not_<is_void<remove_pointer_t<_Tp1>> check is not necessary in\nC++20 because iterator_traits<void*> is now empty. For C++17 replace\nthat check with a __safe_iterator_traits helper with partial\nspecializations for void pointers.\n\nFinally, the __is_encoded_char check no longer uses remove_const_t,\nwhich means that iterators with a const value_type will no longer be\naccepted as arguments for path creation. Such iterators resulted in\nundefined behaviour anyway, so it's still conforming to reject them in\nthe constraint checks.\n\n\t* include/bits/fs_path.h (filesystem::__detail::__is_encoded_char):\n\tReplace alias template with variable template. Don't remove const.\n\t(filesystem::__detail::__is_path_src): Replace overloaded function\n\ttemplate with variable template and specializations.\n\t(filesystem::__detail::__is_path_iter_src): Replace alias template\n\twith class template.\n\t(filesystem::__detail::_Path): Use __is_path_src. Remove support for\n\titerator pairs.\n\t(filesystem::__detail::_Path2): New alias template for checking\n\tInputIterator requirements.\n\t(filesystem::__detail::__constructible_from): Remove.\n\t(filesystem::path): Replace _Path<Iter, Iter> with _Path2<Iter>.\n\t* testsuite/27_io/filesystem/path/construct/80762.cc: Check with two\n\tconstructor arguments of void and void* types.", "tree": {"sha": "83dcecec62b21816b1a8e80811540a07be15bd3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83dcecec62b21816b1a8e80811540a07be15bd3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/988b853f9c829742907ae22ac66de56facfc7bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988b853f9c829742907ae22ac66de56facfc7bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/988b853f9c829742907ae22ac66de56facfc7bc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988b853f9c829742907ae22ac66de56facfc7bc5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "804254edb48f87d726a1bc9e95af04076c030e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/804254edb48f87d726a1bc9e95af04076c030e35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/804254edb48f87d726a1bc9e95af04076c030e35"}], "stats": {"total": 148, "additions": 100, "deletions": 48}, "files": [{"sha": "b82479f0ed607a8c4a512a2a4f0fa60533fce3a6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988b853f9c829742907ae22ac66de56facfc7bc5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988b853f9c829742907ae22ac66de56facfc7bc5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=988b853f9c829742907ae22ac66de56facfc7bc5", "patch": "@@ -1,3 +1,20 @@\n+2020-05-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (filesystem::__detail::__is_encoded_char):\n+\tReplace alias template with variable template. Don't remove const.\n+\t(filesystem::__detail::__is_path_src): Replace overloaded function\n+\ttemplate with variable template and specializations.\n+\t(filesystem::__detail::__is_path_iter_src): Replace alias template\n+\twith class template.\n+\t(filesystem::__detail::_Path): Use __is_path_src. Remove support for\n+\titerator pairs.\n+\t(filesystem::__detail::_Path2): New alias template for checking\n+\tInputIterator requirements.\n+\t(filesystem::__detail::__constructible_from): Remove.\n+\t(filesystem::path): Replace _Path<Iter, Iter> with _Path2<Iter>.\n+\t* testsuite/27_io/filesystem/path/construct/80762.cc: Check with two\n+\tconstructor arguments of void and void* types.\n+\n 2020-05-21  Matthias Kretz  <kretz@kde.org>\n \n \t* testsuite/Makefile.am: Remove dup target_triplet and set tool,"}, {"sha": "5a998284a99bfe2d2751f410117a07654eac0cc2", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 77, "deletions": 48, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988b853f9c829742907ae22ac66de56facfc7bc5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988b853f9c829742907ae22ac66de56facfc7bc5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=988b853f9c829742907ae22ac66de56facfc7bc5", "patch": "@@ -73,58 +73,87 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n namespace __detail\n {\n   template<typename _CharT>\n-    using __is_encoded_char = __is_one_of<remove_const_t<_CharT>,\n-\t  char,\n+    inline constexpr bool __is_encoded_char = false;\n+  template<>\n+    inline constexpr bool __is_encoded_char<char> = true;\n #ifdef _GLIBCXX_USE_CHAR8_T\n-\t  char8_t,\n+  template<>\n+    inline constexpr bool __is_encoded_char<char8_t> = true;\n #endif\n #if _GLIBCXX_USE_WCHAR_T\n-\t  wchar_t,\n+  template<>\n+    inline constexpr bool __is_encoded_char<wchar_t> = true;\n #endif\n-\t  char16_t, char32_t>;\n-\n-  template<typename _Iter,\n-\t   typename _Iter_traits = std::iterator_traits<_Iter>>\n-    using __is_path_iter_src\n-      = __and_<__is_encoded_char<typename _Iter_traits::value_type>,\n-\t       std::is_base_of<std::input_iterator_tag,\n-\t\t\t       typename _Iter_traits::iterator_category>>;\n+  template<>\n+    inline constexpr bool __is_encoded_char<char16_t> = true;\n+  template<>\n+    inline constexpr bool __is_encoded_char<char32_t> = true;\n \n+#if __cpp_concepts >= 201907L\n   template<typename _Iter>\n-    static __is_path_iter_src<_Iter>\n-    __is_path_src(_Iter, int);\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    static __is_encoded_char<_CharT>\n-    __is_path_src(const basic_string<_CharT, _Traits, _Alloc>&, int);\n-\n-  template<typename _CharT, typename _Traits>\n-    static __is_encoded_char<_CharT>\n-    __is_path_src(const basic_string_view<_CharT, _Traits>&, int);\n+    using __safe_iterator_traits = std::iterator_traits<_Iter>;\n+#else\n+  template<typename _Iter>\n+    struct __safe_iterator_traits : std::iterator_traits<_Iter>\n+    { };\n \n-  template<typename _Unknown>\n-    static std::false_type\n-    __is_path_src(const _Unknown&, ...);\n+  // Protect against ill-formed iterator_traits specializations in C++17\n+  template<> struct __safe_iterator_traits<void*> { };\n+  template<> struct __safe_iterator_traits<const void*> { };\n+  template<> struct __safe_iterator_traits<volatile void*> { };\n+  template<> struct __safe_iterator_traits<const volatile void*> { };\n+#endif\n \n-  template<typename _Tp1, typename _Tp2>\n-    struct __constructible_from;\n+  template<typename _Iter_traits, typename = void>\n+    struct __is_path_iter_src\n+    : false_type\n+    { };\n \n-  template<typename _Iter>\n-    struct __constructible_from<_Iter, _Iter>\n-    : __is_path_iter_src<_Iter>\n+  template<typename _Iter_traits>\n+    struct __is_path_iter_src<_Iter_traits,\n+\t\t\t      void_t<typename _Iter_traits::value_type>>\n+    : bool_constant<__is_encoded_char<typename _Iter_traits::value_type>>\n     { };\n \n   template<typename _Source>\n-    struct __constructible_from<_Source, void>\n-    : decltype(__is_path_src(std::declval<_Source>(), 0))\n-    { };\n+    inline constexpr bool __is_path_src\n+      = __is_path_iter_src<iterator_traits<decay_t<_Source>>>::value;\n+\n+  template<>\n+    inline constexpr bool __is_path_src<path> = false;\n+\n+  template<>\n+    inline constexpr bool __is_path_src<volatile path> = false;\n+\n+  template<>\n+    inline constexpr bool __is_path_src<void*> = false;\n+\n+  template<>\n+    inline constexpr bool __is_path_src<const void*> = false;\n+\n+  template<>\n+    inline constexpr bool __is_path_src<volatile void*> = false;\n+\n+  template<>\n+    inline constexpr bool __is_path_src<const volatile void*> = false;\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline constexpr bool\n+      __is_path_src<basic_string<_CharT, _Traits, _Alloc>>\n+\t= __is_encoded_char<_CharT>;\n+\n+  template<typename _CharT, typename _Traits>\n+    inline constexpr bool\n+      __is_path_src<basic_string_view<_CharT, _Traits>>\n+\t= __is_encoded_char<_CharT>;\n+\n+  // SFINAE constraint for Source parameters as required by [fs.path.req].\n+  template<typename _Tp>\n+    using _Path = enable_if_t<__is_path_src<_Tp>, path>;\n \n-  template<typename _Tp1, typename _Tp2 = void>\n-    using _Path = typename\n-      std::enable_if<__and_<__not_<is_same<remove_cv_t<_Tp1>, path>>,\n-\t\t\t    __not_<is_void<remove_pointer_t<_Tp1>>>,\n-\t\t\t    __constructible_from<_Tp1, _Tp2>>::value,\n-\t\t     path>::type;\n+  // SFINAE constraint for InputIterator parameters as required by [fs.req].\n+  template<typename _Iter, typename _Tr = __safe_iterator_traits<_Iter>>\n+    using _Path2 = enable_if_t<__is_path_iter_src<_Tr>::value, path>;\n \n   template<typename _Source>\n     static _Source\n@@ -227,7 +256,7 @@ namespace __detail\n       { _M_split_cmpts(); }\n \n     template<typename _InputIterator,\n-\t     typename _Require = __detail::_Path<_InputIterator, _InputIterator>>\n+\t     typename _Require = __detail::_Path2<_InputIterator>>\n       path(_InputIterator __first, _InputIterator __last, format = auto_format)\n       : _M_pathname(_S_convert(__first, __last))\n       { _M_split_cmpts(); }\n@@ -241,8 +270,8 @@ namespace __detail\n       { _M_split_cmpts(); }\n \n     template<typename _InputIterator,\n-\t     typename _Require = __detail::_Path<_InputIterator, _InputIterator>,\n-\t     typename _Require2 = __detail::__value_type_is_char<_InputIterator>>\n+\t     typename _Require = __detail::_Path2<_InputIterator>,\n+\t     typename _Req2 = __detail::__value_type_is_char<_InputIterator>>\n       path(_InputIterator __first, _InputIterator __last, const locale& __loc,\n \t   format = auto_format)\n       : _M_pathname(_S_convert_loc(__first, __last, __loc))\n@@ -268,7 +297,7 @@ namespace __detail\n       { return *this = path(__source); }\n \n     template<typename _InputIterator>\n-      __detail::_Path<_InputIterator, _InputIterator>&\n+      __detail::_Path2<_InputIterator>&\n       assign(_InputIterator __first, _InputIterator __last)\n       { return *this = path(__first, __last); }\n \n@@ -295,7 +324,7 @@ namespace __detail\n       }\n \n     template<typename _InputIterator>\n-      __detail::_Path<_InputIterator, _InputIterator>&\n+      __detail::_Path2<_InputIterator>&\n       append(_InputIterator __first, _InputIterator __last)\n       {\n \t_M_append(_S_convert(__first, __last));\n@@ -315,7 +344,7 @@ namespace __detail\n       operator+=(_Source const& __x) { return concat(__x); }\n \n     template<typename _CharT>\n-      __detail::_Path<_CharT*, _CharT*>&\n+      __detail::_Path2<_CharT*>&\n       operator+=(_CharT __x);\n \n     template<typename _Source>\n@@ -328,7 +357,7 @@ namespace __detail\n       }\n \n     template<typename _InputIterator>\n-      __detail::_Path<_InputIterator, _InputIterator>&\n+      __detail::_Path2<_InputIterator>&\n       concat(_InputIterator __first, _InputIterator __last)\n       {\n \t_M_concat(_S_convert(__first, __last));\n@@ -695,7 +724,7 @@ namespace __detail\n    * @relates std::filesystem::path\n    */\n   template<typename _InputIterator,\n-\t   typename _Require = __detail::_Path<_InputIterator, _InputIterator>,\n+\t   typename _Require = __detail::_Path2<_InputIterator>,\n \t   typename _CharT\n \t     = __detail::__value_type_is_char_or_char8_t<_InputIterator>>\n     inline path\n@@ -1000,7 +1029,7 @@ namespace __detail\n   }\n \n   template<typename _CharT>\n-    inline __detail::_Path<_CharT*, _CharT*>&\n+    inline __detail::_Path2<_CharT*>&\n     path::operator+=(_CharT __x)\n     {\n       auto* __addr = std::__addressof(__x);"}, {"sha": "2f37b663f26a4c5450849c2365f98f1544f193b1", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/80762.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988b853f9c829742907ae22ac66de56facfc7bc5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F80762.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988b853f9c829742907ae22ac66de56facfc7bc5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F80762.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F80762.cc?ref=988b853f9c829742907ae22ac66de56facfc7bc5", "patch": "@@ -37,3 +37,9 @@ static_assert( !std::is_constructible_v<path, const volatile void*> );\n static_assert( !std::is_constructible_v<path, void*&> );\n static_assert( !std::is_constructible_v<path, void* const&> );\n static_assert( !std::is_constructible_v<path, const void* const&> );\n+\n+static_assert( !std::is_constructible_v<path, void, void> );\n+static_assert( !std::is_constructible_v<path, void*, void*> );\n+static_assert( !std::is_constructible_v<path, const void*, void*> );\n+static_assert( !std::is_constructible_v<path, volatile void*, void*> );\n+static_assert( !std::is_constructible_v<path, const volatile void*, void*> );"}]}