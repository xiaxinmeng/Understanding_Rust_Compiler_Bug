{"sha": "d0ea9f0aa270f9791df42eb409e90c718575ad9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlYTlmMGFhMjcwZjk3OTFkZjQyZWI0MDllOTBjNzE4NTc1YWQ5YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-12-05T12:24:39Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-12-05T12:24:39Z"}, "message": "diagnostic.c (diagnostic_check_max_errors): New, broken out of ...\n\n\tgcc/\n\t* diagnostic.c (diagnostic_check_max_errors): New, broken out of ...\n\t(diagnostic_action_after_output): ... here.\n\t(diagnostic_report_diagnostic): Call it for non-notes.\n\t* diagnostic.h (struct diagnostic_context): Make max_errors signed\n\tint.\n\t(diagnostic_check_max_errors): Declare.\n\n\tgcc/fortran/\n\t* error.c (gfc_warning_check): Call diagnostic_check_max_errors.\n\t(gfc_error_check): Likewise.\n\n\tgcc/testsuite/\n\t* c-c++-common/fmax_errors.c: Check notes after last error are\n\temitted.\n\nFrom-SVN: r243254", "tree": {"sha": "63b942309e0e3faf9b2b19ff2be30494a2a4bbf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63b942309e0e3faf9b2b19ff2be30494a2a4bbf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0ea9f0aa270f9791df42eb409e90c718575ad9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ea9f0aa270f9791df42eb409e90c718575ad9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ea9f0aa270f9791df42eb409e90c718575ad9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ea9f0aa270f9791df42eb409e90c718575ad9a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb5e7daea59060603a2e526cab4e35b32a8e9438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5e7daea59060603a2e526cab4e35b32a8e9438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5e7daea59060603a2e526cab4e35b32a8e9438"}], "stats": {"total": 78, "additions": 63, "deletions": 15}, "files": [{"sha": "9488b0f7d9e1eb8facfc2ae7d908943fba5f0b63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0ea9f0aa270f9791df42eb409e90c718575ad9a", "patch": "@@ -1,3 +1,12 @@\n+2016-12-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* diagnostic.c (diagnostic_check_max_errors): New, broken out of ...\n+\t(diagnostic_action_after_output): ... here.\n+\t(diagnostic_report_diagnostic): Call it for non-notes.\n+\t* diagnostic.h (struct diagnostic_context): Make max_errors signed\n+\tint.\n+\t(diagnostic_check_max_errors): Declare.\n+\n 2016-12-05  Cupertino Miranda  <cmiranda@synopsys.com>\n \n \t* config/arc/arc.h (STARTFILE_SPEC): Use default linux specs."}, {"sha": "c06d2665e56f952da48aa67275eaed11764f0298", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=d0ea9f0aa270f9791df42eb409e90c718575ad9a", "patch": "@@ -446,6 +446,31 @@ bt_err_callback (void *data ATTRIBUTE_UNUSED, const char *msg, int errnum)\n \t   errnum == 0 ? \"\" : xstrerror (errnum));\n }\n \n+/* Check if we've met the maximum error limit, and if so fatally exit\n+   with a message.  CONTEXT is the context to check, and FLUSH\n+   indicates whether a diagnostic_finish call is needed.  */\n+\n+void\n+diagnostic_check_max_errors (diagnostic_context *context, bool flush)\n+{\n+  if (!context->max_errors)\n+    return;\n+\n+  int count = (diagnostic_kind_count (context, DK_ERROR)\n+\t       + diagnostic_kind_count (context, DK_SORRY)\n+\t       + diagnostic_kind_count (context, DK_WERROR));\n+\n+  if (count >= context->max_errors)\n+    {\n+      fnotice (stderr,\n+\t       \"compilation terminated due to -fmax-errors=%u.\\n\",\n+\t       context->max_errors);\n+      if (flush)\n+\tdiagnostic_finish (context);\n+      exit (FATAL_EXIT_CODE);\n+    }\n+}\n+\n /* Take any action which is expected to happen after the diagnostic\n    is written out.  This function does not always return.  */\n void\n@@ -470,18 +495,6 @@ diagnostic_action_after_output (diagnostic_context *context,\n \t  diagnostic_finish (context);\n \t  exit (FATAL_EXIT_CODE);\n \t}\n-      if (context->max_errors != 0\n-\t  && ((unsigned) (diagnostic_kind_count (context, DK_ERROR)\n-\t\t\t  + diagnostic_kind_count (context, DK_SORRY)\n-\t\t\t  + diagnostic_kind_count (context, DK_WERROR))\n-\t      >= context->max_errors))\n-\t{\n-\t  fnotice (stderr,\n-\t\t   \"compilation terminated due to -fmax-errors=%u.\\n\",\n-\t\t   context->max_errors);\n-\t  diagnostic_finish (context);\n-\t  exit (FATAL_EXIT_CODE);\n-\t}\n       break;\n \n     case DK_ICE:\n@@ -890,6 +903,9 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \treturn false;\n     }\n \n+  if (diagnostic->kind != DK_NOTE)\n+    diagnostic_check_max_errors (context);\n+\n   context->lock++;\n \n   if (diagnostic->kind == DK_ICE || diagnostic->kind == DK_ICE_NOBT)"}, {"sha": "f3bb494c9f97aa9e5d944123d15921a1ba62f0cc", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=d0ea9f0aa270f9791df42eb409e90c718575ad9a", "patch": "@@ -143,7 +143,7 @@ struct diagnostic_context\n   bool dc_warn_system_headers;\n \n   /* Maximum number of errors to report.  */\n-  unsigned int max_errors;\n+  int max_errors;\n \n   /* This function is called before any message is printed out.  It is\n      responsible for preparing message prefix and such.  For example, it\n@@ -320,6 +320,7 @@ void default_diagnostic_start_span_fn (diagnostic_context *,\n void default_diagnostic_finalizer (diagnostic_context *, diagnostic_info *);\n void diagnostic_set_caret_max_width (diagnostic_context *context, int value);\n void diagnostic_action_after_output (diagnostic_context *, diagnostic_t);\n+void diagnostic_check_max_errors (diagnostic_context *, bool flush = false);\n \n void diagnostic_file_cache_fini (void);\n "}, {"sha": "f1858eadbe3a7095557feadcb21014b49c8bdf92", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d0ea9f0aa270f9791df42eb409e90c718575ad9a", "patch": "@@ -1,3 +1,8 @@\n+2016-12-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* error.c (gfc_warning_check): Call diagnostic_check_max_errors.\n+\t(gfc_error_check): Likewise.\n+\n 2016-12-04  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/78618"}, {"sha": "757f7e295a1fe84432fa05af7351295b6592db0e", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=d0ea9f0aa270f9791df42eb409e90c718575ad9a", "patch": "@@ -1226,6 +1226,7 @@ gfc_warning_check (void)\n       diagnostic_action_after_output (global_dc,\n \t\t\t\t      warningcount_buffered\n \t\t\t\t      ? DK_WARNING : DK_ERROR);\n+      diagnostic_check_max_errors (global_dc, true);\n     }\n }\n \n@@ -1370,6 +1371,7 @@ gfc_error_check (void)\n       gcc_assert (gfc_output_buffer_empty_p (pp_error_buffer));\n       pp->buffer = tmp_buffer;\n       diagnostic_action_after_output (global_dc, DK_ERROR);\n+      diagnostic_check_max_errors (global_dc, true);\n       return true;\n     }\n "}, {"sha": "c40ffd60b21191874770221ca51929b4e4e5a776", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0ea9f0aa270f9791df42eb409e90c718575ad9a", "patch": "@@ -1,3 +1,8 @@\n+2016-12-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-c++-common/fmax_errors.c: Check notes after last error are\n+\temitted.\n+\n 2016-12-04  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \tPR rtl-optimization/78561"}, {"sha": "b44e2386ae566360aa89fb1d7a569b28a3dd5c5b", "filename": "gcc/testsuite/c-c++-common/fmax-errors.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmax-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ea9f0aa270f9791df42eb409e90c718575ad9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmax-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmax-errors.c?ref=d0ea9f0aa270f9791df42eb409e90c718575ad9a", "patch": "@@ -1,11 +1,21 @@\n /* PR c/44782 */\n /* { dg-do compile } */\n-/* { dg-options \"-fmax-errors=3\" } */\n+/* { dg-options \"-fmax-errors=3 -Wall\" } */\n \n void foo (unsigned int i, unsigned int j)\n {\n   (i) ();\t\t\t/* { dg-error \"\" } */\n   (j) ();\t\t\t/* { dg-error \"\" } */\n-  (i+j) ();\t\t\t/* { dg-error \"\" } */\n+\n+  i + j; /* { dg-warning \"\" }  */\n+\n+  (k) ();\t\t\t/* { dg-error \"\" } */\n+  /* Make sure we see the notes related to the final error we emit.  */\n+  /* { dg-message \"identifier\" \"\" { target c } 12 } */\n+\n+  /* Warnings after the final error should not appear.  */\n+  i + j; /* no warning.  */\n+\n   (i*j) ();\t\t\t/* no error here due to -fmax-errors */\n+\n } /* { dg-prune-output \"compilation terminated\" } */"}]}