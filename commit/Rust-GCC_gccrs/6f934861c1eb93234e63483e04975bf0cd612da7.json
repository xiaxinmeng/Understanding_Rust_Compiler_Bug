{"sha": "6f934861c1eb93234e63483e04975bf0cd612da7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY5MzQ4NjFjMWViOTMyMzRlNjM0ODNlMDQ5NzViZjBjZDYxMmRhNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2019-09-18T08:31:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-18T08:31:51Z"}, "message": "[Ada] Improve doc on Warning_As_Error\n\n2019-09-18  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Improve doc on\n\tWarning_As_Error.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r275842", "tree": {"sha": "84e56977dda54c6f75c60bb941a9c52bef90d6e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84e56977dda54c6f75c60bb941a9c52bef90d6e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f934861c1eb93234e63483e04975bf0cd612da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f934861c1eb93234e63483e04975bf0cd612da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f934861c1eb93234e63483e04975bf0cd612da7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f934861c1eb93234e63483e04975bf0cd612da7/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e58fc8977c671ebb4a50cc3170c3bc7988e3e99b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58fc8977c671ebb4a50cc3170c3bc7988e3e99b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58fc8977c671ebb4a50cc3170c3bc7988e3e99b"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "77089ccf1f79e25db8229062e06380dde5d88381", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f934861c1eb93234e63483e04975bf0cd612da7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f934861c1eb93234e63483e04975bf0cd612da7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6f934861c1eb93234e63483e04975bf0cd612da7", "patch": "@@ -1,3 +1,9 @@\n+2019-09-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Improve doc on\n+\tWarning_As_Error.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2019-09-18  Arnaud Charlet  <charlet@adacore.com>\n \n \t* doc/gnat_rm/implementation_defined_characteristics.rst,"}, {"sha": "8ce22f1c04d78e9836f33442f627d40d408660bb", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f934861c1eb93234e63483e04975bf0cd612da7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f934861c1eb93234e63483e04975bf0cd612da7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=6f934861c1eb93234e63483e04975bf0cd612da7", "patch": "@@ -7489,9 +7489,11 @@ message string (it is not necessary to put an asterisk at the start and\n the end of the message, since this is implied).\n \n Another possibility for the static_string_EXPRESSION which works whether\n-or not error tags are enabled (*-gnatw.d*) is to use the\n+or not error tags are enabled (*-gnatw.d*) is to use a single\n *-gnatw* tag string, enclosed in brackets,\n-as shown in the example below, to treat a class of warnings as errors.\n+as shown in the example below, to treat one category of warnings as errors.\n+Note that if you want to treat multiple categories of warnings as errors,\n+you can use multiple pragma Warning_As_Error.\n \n The above use of patterns to match the message applies only to warning\n messages generated by the front end. This pragma can also be applied to"}, {"sha": "1f5616fe39386545b301e557137889bcd3fe5696", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f934861c1eb93234e63483e04975bf0cd612da7/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f934861c1eb93234e63483e04975bf0cd612da7/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=6f934861c1eb93234e63483e04975bf0cd612da7", "patch": "@@ -8994,9 +8994,11 @@ message string (it is not necessary to put an asterisk at the start and\n the end of the message, since this is implied).\n \n Another possibility for the static_string_EXPRESSION which works whether\n-or not error tags are enabled (@emph{-gnatw.d}) is to use the\n+or not error tags are enabled (@emph{-gnatw.d}) is to use a single\n @emph{-gnatw} tag string, enclosed in brackets,\n-as shown in the example below, to treat a class of warnings as errors.\n+as shown in the example below, to treat one category of warnings as errors.\n+Note that if you want to treat multiple categories of warnings as errors,\n+you can use multiple pragma Warning_As_Error.\n \n The above use of patterns to match the message applies only to warning\n messages generated by the front end. This pragma can also be applied to"}]}