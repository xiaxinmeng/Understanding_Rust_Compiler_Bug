{"sha": "0ebe2584bbd4677d04e001e65456bcade831e66c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGViZTI1ODRiYmQ0Njc3ZDA0ZTAwMWU2NTQ1NmJjYWRlODMxZTY2Yw==", "commit": {"author": {"name": "Allan Sandfeld Jensen", "email": "sandfeld@kde.org", "date": "2014-01-27T22:45:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-01-27T22:45:02Z"}, "message": "i386.c (get_builtin_code_for_version): Separate Westmere from Nehalem...\n\n\t* config/i386/i386.c (get_builtin_code_for_version): Separate\n\tWestmere from Nehalem, Ivy Bridge from Sandy Bridge and\n\tBroadwell from Haswell.\n\ntestsuite/ChangeLog:\n\n\t* g++.dg/ext/mv16.C: New tests.\n\nFrom-SVN: r207155", "tree": {"sha": "405cfcab396c3701786967169e2c2bfb44aa74a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/405cfcab396c3701786967169e2c2bfb44aa74a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ebe2584bbd4677d04e001e65456bcade831e66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ebe2584bbd4677d04e001e65456bcade831e66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ebe2584bbd4677d04e001e65456bcade831e66c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ebe2584bbd4677d04e001e65456bcade831e66c/comments", "author": null, "committer": null, "parents": [{"sha": "a33fc7fe6c3f8c329c682877b1a7937a45d993dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33fc7fe6c3f8c329c682877b1a7937a45d993dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a33fc7fe6c3f8c329c682877b1a7937a45d993dd"}], "stats": {"total": 131, "additions": 106, "deletions": 25}, "files": [{"sha": "a27272464c6bcf2069674a9146d96fd2eaa452ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebe2584bbd4677d04e001e65456bcade831e66c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebe2584bbd4677d04e001e65456bcade831e66c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ebe2584bbd4677d04e001e65456bcade831e66c", "patch": "@@ -1,12 +1,18 @@\n+2014-01-27  Allan Sandfeld Jensen  <sandfeld@kde.org>\n+\n+\t* config/i386/i386.c (get_builtin_code_for_version): Separate\n+\tWestmere from Nehalem, Ivy Bridge from Sandy Bridge and\n+\tBroadwell from Haswell.\n+\n 2014-01-27  Steve Ellcey  <sellcey@mips.com>\n \n \t* common/config/mips/mips-common.c (TARGET_DEFAULT_TARGET_FLAGS):\n \tRemove TARGET_FP_EXCEPTIONS_DEFAULT and MASK_FUSED_MADD.\n \t* config/mips/mips.c (mips_option_override): Change setting\n \tof TARGET_DSP.\n \t* config/mips/mips.h (TARGET_FP_EXCEPTIONS_DEFAULT): Remove.\n-\t* config/mips/mips.opt (DSP, DSPR2, FP_EXCEPTIONS, FUSED_MADD,\n-\tMIPS3D) Change from Mask to Var.\n+\t* config/mips/mips.opt (DSP, DSPR2, FP_EXCEPTIONS, FUSED_MADD, MIPS3D):\n+\tChange from Mask to Var.\n \n 2014-01-27  Jeff Law  <law@redhat.com>\n \n@@ -89,7 +95,8 @@\n \n 2014-01-27  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-        * config/i386/avx512pfintrin.h (_mm512_mask_prefetch_i32gather_pd): New.\n+        * config/i386/avx512pfintrin.h (_mm512_mask_prefetch_i32gather_pd):\n+\tNew.\n \t(_mm512_mask_prefetch_i64gather_pd): Ditto.\n \t(_mm512_prefetch_i32scatter_pd): Ditto.\n \t(_mm512_mask_prefetch_i32scatter_pd): Ditto.\n@@ -102,7 +109,8 @@\n \t(_mm512_prefetch_i64scatter_ps): Ditto.\n \t(_mm512_mask_prefetch_i64scatter_ps): Ditto.\n \t* config/i386/i386-builtin-types.def: Define\n-\tVOID_FTYPE_QI_V8SI_PCINT64_INT_INT and VOID_FTYPE_QI_V8DI_PCINT64_INT_INT.\n+\tVOID_FTYPE_QI_V8SI_PCINT64_INT_INT\n+\tand VOID_FTYPE_QI_V8DI_PCINT64_INT_INT.\n \t* config/i386/i386.c (ix86_builtins): Define IX86_BUILTIN_GATHERPFQPD,\n \tIX86_BUILTIN_GATHERPFDPD, IX86_BUILTIN_SCATTERPFDPD,\n \tIX86_BUILTIN_SCATTERPFQPD.\n@@ -185,8 +193,7 @@\n \n \t* config/tilegx/tilegx.c (tilegx_gen_bundles): Delete barrier\n \tinsns before bundling.\n-\t* config/tilegx/tilegx.md (tile_network_barrier): Update\n-\tcomment.\n+\t* config/tilegx/tilegx.md (tile_network_barrier): Update comment.\n \n 2014-01-25  Walter Lee  <walt@tilera.com>\n \n@@ -206,8 +213,7 @@\n \n 2014-01-25  Walter Lee  <walt@tilera.com>\n \n-\t* config/tilepro/tilepro.md (ctzdi2): Use register_operand\n-\tpredicate.\n+\t* config/tilepro/tilepro.md (ctzdi2): Use register_operand predicate.\n \t(clzdi2): Ditto.\n \t(ffsdi2): Ditto.\n \n@@ -292,8 +298,8 @@\n \t-mquad-memory-atomic to ISA 2.07 support.\n \n \t* config/rs6000/rs6000.opt (-mquad-memory-atomic): Add new switch\n-\tto separate support of normal quad word memory operations (ldq,\n-\tstq) from the atomic quad word memory operations.\n+\tto separate support of normal quad word memory operations (ldq, stq)\n+\tfrom the atomic quad word memory operations.\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal): Add\n \tsupport to separate non-atomic quad word operations from atomic\n@@ -307,9 +313,8 @@\n \t* config/rs6000/rs6000.h (TARGET_SYNC_TI): Use\n \t-mquad-memory-atomic as the test for whether we have quad word\n \tatomic instructions.\n-\t(TARGET_SYNC_HI_QI): If either -mquad-memory-atomic,\n-\t-mquad-memory, or -mp8-vector are used, allow byte/half-word\n-\tatomic operations.\n+\t(TARGET_SYNC_HI_QI): If either -mquad-memory-atomic, -mquad-memory,\n+\tor -mp8-vector are used, allow byte/half-word atomic operations.\n \n \t* config/rs6000/sync.md (load_lockedti): Insure that the address\n \tis a proper indexed or indirect address for the lqarx instruction.\n@@ -445,7 +450,7 @@\n \t* config/aarch64/aarch64-simd.md\n \t(aarch64_be_checked_get_lane<mode>): New define_expand.\n \t* config/aarch64/aarch64-simd-builtins.def\n-\t(BUILTIN_VALL (GETLANE, be_checked_get_lane, 0):\n+\t(BUILTIN_VALL (GETLANE, be_checked_get_lane, 0)):\n \tNew builtin definition.\n \t* config/aarch64/arm_neon.h: (__aarch64_vget_lane_any):\n \tUse new safe be builtin.\n@@ -545,8 +550,7 @@\n \n \tPR rtl-optimization/59477\n \t* lra-constraints.c (inherit_in_ebb): Process call for living hard\n-\tregs.  Update reloads_num and potential_reload_hard_regs for all\n-\tinsns.\n+\tregs.  Update reloads_num and potential_reload_hard_regs for all insns.\n \n 2014-01-22  Tom Tromey  <tromey@redhat.com>\n \n@@ -600,14 +604,13 @@\n \tMAX_INLINE_INSNS_AUTO_LIMIT, INLINE_UNIT_GROWTH_LIMIT,\n \tRECURSIVE_INLINING, UNLIKELY_CALL, NOT_DECLARED_INLINED,\n \tOPTIMIZING_FOR_SIZE, ORIGINALLY_INDIRECT_CALL,\n-\tINDIRECT_UNKNOWN_CALL, USES_COMDAT_LOCAL. \n+\tINDIRECT_UNKNOWN_CALL, USES_COMDAT_LOCAL.\n \tAdd CIF_FINAL_ERROR to UNSPECIFIED, BODY_NOT_AVAILABLE,\n \tFUNCTION_NOT_INLINABLE, OVERWRITABLE, MISMATCHED_ARGUMENTS,\n \tEH_PERSONALITY, NON_CALL_EXCEPTIONS, TARGET_OPTION_MISMATCH,\n \tOPTIMIZATION_MISMATCH.\n \t* tree-inline.c (expand_call_inline): Emit errors during\n-\tearly_inlining if cgraph_inline_failed_type returns\n-\tCIF_FINAL_ERROR.\n+\tearly_inlining if cgraph_inline_failed_type returns CIF_FINAL_ERROR.\n \n 2014-01-20  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "38fb9fd148a4a1e251f02054fa15db3e150a4564", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebe2584bbd4677d04e001e65456bcade831e66c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebe2584bbd4677d04e001e65456bcade831e66c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0ebe2584bbd4677d04e001e65456bcade831e66c", "patch": "@@ -31348,18 +31348,27 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      priority = P_PROC_SSSE3;\n \t      break;\n \t    case PROCESSOR_NEHALEM:\n-\t      /* We translate \"arch=corei7\" and \"arch=nehelam\" to\n-\t\t \"corei7\" so that it will be mapped to M_INTEL_COREI7\n-\t\t as cpu type to cover all M_INTEL_COREI7_XXXs.  */\n-\t      arg_str = \"corei7\";\n+\t      if (new_target->x_ix86_isa_flags & OPTION_MASK_ISA_AES)\n+\t\targ_str = \"westmere\";\n+\t      else\n+\t\t/* We translate \"arch=corei7\" and \"arch=nehalem\" to\n+\t\t   \"corei7\" so that it will be mapped to M_INTEL_COREI7\n+\t\t   as cpu type to cover all M_INTEL_COREI7_XXXs.  */\n+\t\targ_str = \"corei7\";\n \t      priority = P_PROC_SSE4_2;\n \t      break;\n \t    case PROCESSOR_SANDYBRIDGE:\n-\t      arg_str = \"sandybridge\";\n+\t      if (new_target->x_ix86_isa_flags & OPTION_MASK_ISA_F16C)\n+\t\targ_str = \"ivybridge\";\n+\t      else\n+\t\targ_str = \"sandybridge\";\n \t      priority = P_PROC_AVX;\n \t      break;\n \t    case PROCESSOR_HASWELL:\n-\t      arg_str = \"haswell\";\n+\t      if (new_target->x_ix86_isa_flags & OPTION_MASK_ISA_ADX)\n+\t\targ_str = \"broadwell\";\n+\t      else\n+\t\targ_str = \"haswell\";\n \t      priority = P_PROC_AVX2;\n \t      break;\n \t    case PROCESSOR_BONNELL:"}, {"sha": "8ae82d5f975ad1aa494f12b1172b6d24de8fbee2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebe2584bbd4677d04e001e65456bcade831e66c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebe2584bbd4677d04e001e65456bcade831e66c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ebe2584bbd4677d04e001e65456bcade831e66c", "patch": "@@ -1,3 +1,7 @@\n+2014-01-27  Allan Sandfeld Jensen  <sandfeld@kde.org>\n+\n+\t* g++.dg/ext/mv16.C: New tests.\n+\n 2014-01-27  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* gcc.target/i386/avx512f-vexpandpd-1.c: Also test _mm512_expand_pd."}, {"sha": "8992bfc6fc147ac442b02c057bfaf7d1a2f7ad44", "filename": "gcc/testsuite/g++.dg/ext/mv16.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebe2584bbd4677d04e001e65456bcade831e66c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebe2584bbd4677d04e001e65456bcade831e66c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv16.C?ref=0ebe2584bbd4677d04e001e65456bcade831e66c", "patch": "@@ -0,0 +1,65 @@\n+// Test that dispatching can choose the right multiversion\n+// for Intel CPUs with the same internal GCC processor id\n+// but slighly different sets of x86 extensions.\n+\n+// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-require-ifunc \"\" }\n+// { dg-options \"-O2\" }\n+\n+#include <assert.h>\n+\n+int __attribute__ ((target(\"default\")))\n+foo ()\n+{\n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"arch=nehalem\")))\n+foo ()\n+{\n+  return 4;\n+}\n+\n+int __attribute__ ((target(\"arch=westmere\")))\n+foo ()\n+{\n+  return 5;\n+}\n+\n+int __attribute__ ((target(\"arch=sandybridge\")))\n+foo ()\n+{\n+  return 8;\n+}\n+\n+int __attribute__ ((target(\"arch=ivybridge\")))\n+foo ()\n+{\n+  return 9;\n+}\n+\n+int __attribute__ ((target(\"arch=haswell\")))\n+foo ()\n+{\n+  return 12;\n+}\n+\n+int main ()\n+{\n+  int val = foo ();\n+\n+  if (__builtin_cpu_is (\"nehalem\"))\n+    assert (val == 4);\n+  else if (__builtin_cpu_is (\"westmere\"))\n+    assert (val == 5);\n+  else if (__builtin_cpu_is (\"sandybridge\"))\n+    assert (val == 8);\n+  else if (__builtin_cpu_is (\"ivybridge\"))\n+    assert (val == 9);\n+  else if (__builtin_cpu_is (\"haswell\"))\n+    assert (val == 12);\n+  else\n+    assert (val == 0);\n+\n+  return 0;\n+}"}]}