{"sha": "0999b547483679fe9060506a28e170866d07cd92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk5OWI1NDc0ODM2NzlmZTkwNjA1MDZhMjhlMTcwODY2ZDA3Y2Q5Mg==", "commit": {"author": {"name": "Kevin Pouget", "email": "pouget@adacore.com", "date": "2008-08-22T12:41:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T12:41:03Z"}, "message": "s-shasto.ads, [...]: Move Shared_Var_ROpen...\n\n2008-08-22  Kevin Pouget  <pouget@adacore.com>\n\n\t* s-shasto.ads, s-shasto.adb: Move Shared_Var_ROpen, Shared_Var_WOpen and\n\tShared_Var_Close procedure specifications from package spec to package body.\n\n\t* rtsfind.ads: Remove RE_Shared_Var_Close, RE_Shared_Var_ROpen,\n\tRE_Shared_Var_WOpen entries.\n\n\t* exp_dist.adb: Update RE_Any_Content_Ptr to RE_Any_Container_Ptr in\n\tBuild_To_Any_Call, Build_TypeCode_Call and Build_From_Any_Call procedures.\n\nFrom-SVN: r139445", "tree": {"sha": "e71ada1b44accd69b5c3d3428de50631cc698cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e71ada1b44accd69b5c3d3428de50631cc698cbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0999b547483679fe9060506a28e170866d07cd92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0999b547483679fe9060506a28e170866d07cd92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0999b547483679fe9060506a28e170866d07cd92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0999b547483679fe9060506a28e170866d07cd92/comments", "author": null, "committer": null, "parents": [{"sha": "44b901601aa85ed438439772eab7549b485e0bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b901601aa85ed438439772eab7549b485e0bb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b901601aa85ed438439772eab7549b485e0bb8"}], "stats": {"total": 100, "additions": 40, "deletions": 60}, "files": [{"sha": "effa7c0f1cbdf4a94db49ed13cc7d5cbe5a26a3c", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0999b547483679fe9060506a28e170866d07cd92/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0999b547483679fe9060506a28e170866d07cd92/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=0999b547483679fe9060506a28e170866d07cd92", "patch": "@@ -8452,7 +8452,7 @@ package body Exp_Dist is\n \n             --  Special DSA types\n \n-            elsif Is_RTE (U_Type, RE_Any_Content_Ptr) then\n+            elsif Is_RTE (U_Type, RE_Any_Container_Ptr) then\n                Lib_RE := RE_FA_A;\n \n             --  Other (non-primitive) types\n@@ -9317,8 +9317,9 @@ package body Exp_Dist is\n \n             --  Special DSA types\n \n-            elsif Is_RTE (U_Type, RE_Any_Content_Ptr) then\n+            elsif Is_RTE (U_Type, RE_Any_Container_Ptr) then\n                Lib_RE := RE_TA_A;\n+               U_Type := Typ;\n \n             elsif U_Type = Underlying_Type (RTE (RE_TypeCode)) then\n                --  No corresponding FA_TC ???\n@@ -10086,7 +10087,7 @@ package body Exp_Dist is\n \n                --  Special DSA types\n \n-               elsif Is_RTE (U_Type, RE_Any_Content_Ptr) then\n+               elsif Is_RTE (U_Type, RE_Any_Container_Ptr) then\n                   Lib_RE := RE_TC_A;\n \n                --  Other (non-primitive) types"}, {"sha": "5404fcdcd2b1fb076a158d6dad7e4f548a72319a", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0999b547483679fe9060506a28e170866d07cd92/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0999b547483679fe9060506a28e170866d07cd92/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=0999b547483679fe9060506a28e170866d07cd92", "patch": "@@ -697,7 +697,7 @@ package Rtsfind is\n      RE_Get_Local_Partition_Id,          -- System.DSA_Services\n      RE_Get_Passive_Partition_Id,        -- System.DSA_Services\n \n-     RE_Any_Content_Ptr,                 -- System.DSA_Types\n+     RE_Any_Container_Ptr,               -- System.DSA_Types\n \n      RE_Register_Exception,              -- System.Exception_Table\n \n@@ -1261,11 +1261,8 @@ package Rtsfind is\n      RE_SS_Mark,                         -- System.Secondary_Stack\n      RE_SS_Release,                      -- System.Secondary_Stack\n \n-     RE_Shared_Var_Close,                -- System.Shared_Storage\n      RE_Shared_Var_Lock,                 -- System.Shared_Storage\n-     RE_Shared_Var_ROpen,                -- System.Shared_Storage\n      RE_Shared_Var_Unlock,               -- System.Shared_Storage\n-     RE_Shared_Var_WOpen,                -- System.Shared_Storage\n      RE_Shared_Var_Procs,                -- System.Shared_Storage\n \n      RE_Abort_Undefer_Direct,            -- System.Standard_Library\n@@ -1854,7 +1851,7 @@ package Rtsfind is\n      RE_Get_Local_Partition_Id           => System_DSA_Services,\n      RE_Get_Passive_Partition_Id         => System_DSA_Services,\n \n-     RE_Any_Content_Ptr                  => System_DSA_Types,\n+     RE_Any_Container_Ptr                => System_DSA_Types,\n \n      RE_Register_Exception               => System_Exception_Table,\n \n@@ -2418,11 +2415,8 @@ package Rtsfind is\n      RE_SS_Pool                          => System_Secondary_Stack,\n      RE_SS_Release                       => System_Secondary_Stack,\n \n-     RE_Shared_Var_Close                 => System_Shared_Storage,\n      RE_Shared_Var_Lock                  => System_Shared_Storage,\n-     RE_Shared_Var_ROpen                 => System_Shared_Storage,\n      RE_Shared_Var_Unlock                => System_Shared_Storage,\n-     RE_Shared_Var_WOpen                 => System_Shared_Storage,\n      RE_Shared_Var_Procs                 => System_Shared_Storage,\n \n      RE_Abort_Undefer_Direct             => System_Standard_Library,"}, {"sha": "b5d8a990bf6b6ba28e2828deb22f9943e15abc9d", "filename": "gcc/ada/s-shasto.adb", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0999b547483679fe9060506a28e170866d07cd92/gcc%2Fada%2Fs-shasto.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0999b547483679fe9060506a28e170866d07cd92/gcc%2Fada%2Fs-shasto.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shasto.adb?ref=0999b547483679fe9060506a28e170866d07cd92", "patch": "@@ -33,6 +33,7 @@\n \n with Ada.IO_Exceptions;\n with Ada.Streams;\n+with Ada.Streams.Stream_IO;\n \n with System.Global_Locks;\n with System.Soft_Links;\n@@ -55,6 +56,8 @@ package body System.Shared_Storage is\n \n    package SFI renames System.File_IO;\n \n+   package SIO renames Ada.Streams.Stream_IO;\n+\n    type String_Access is access String;\n    procedure Free is new Ada.Unchecked_Deallocation\n      (Object => String, Name => String_Access);\n@@ -168,6 +171,26 @@ package body System.Shared_Storage is\n    --  created entry is returned, after first moving it to the head of\n    --  the LRU chain. If not, then null is returned.\n \n+   function Shared_Var_ROpen (Var : String) return SIO.Stream_Access;\n+   --  As described above, this routine returns null if the\n+   --  corresponding shared storage does not exist, and otherwise, if\n+   --  the storage does exist, a Stream_Access value that references\n+   --  the shared storage, ready to read the current value.\n+\n+   function Shared_Var_WOpen (Var : String) return SIO.Stream_Access;\n+   --  As described above, this routine returns a Stream_Access value\n+   --  that references the shared storage, ready to write the new\n+   --  value. The storage is created by this call if it does not\n+   --  already exist.\n+\n+   procedure Shared_Var_Close (Var : SIO.Stream_Access);\n+   --  This routine signals the end of a read/assign operation. It can\n+   --  be useful to embrace a read/write operation between a call to\n+   --  open and a call to close which protect the whole operation.\n+   --  Otherwise, two simultaneous operations can result in the\n+   --  raising of exception Data_Error by setting the access mode of\n+   --  the variable in an incorrect mode.\n+\n    ---------------\n    -- Enter_SFE --\n    ---------------"}, {"sha": "40089a3307565c979a58d5b8283de93c176aa6aa", "filename": "gcc/ada/s-shasto.ads", "status": "modified", "additions": 11, "deletions": 49, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0999b547483679fe9060506a28e170866d07cd92/gcc%2Fada%2Fs-shasto.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0999b547483679fe9060506a28e170866d07cd92/gcc%2Fada%2Fs-shasto.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shasto.ads?ref=0999b547483679fe9060506a28e170866d07cd92", "patch": "@@ -82,30 +82,16 @@\n --    For each shared variable, var, an instantiation of the below generic\n --    package is created which provides Read and Write supporting procedures.\n \n---    The routine Shared_Var_ROpen in package System.Shared_Storage\n---    either returns null if the storage does not exist, or otherwise a\n---    Stream_Access value that references the corresponding shared\n---    storage, ready to read the current value.\n-\n---    The routine Shared_Var_WOpen in package System.Shared_Storage\n---    returns a Stream_Access value that references the corresponding\n---    shared storage, ready to write the new value.\n-\n---    Note that there is no general synchronization for these storage\n---    read and write operations, since it is assumed that a correctly\n---    operating programs will provide appropriate synchronization. In\n---    particular, variables can be protected using protected types with\n---    no entries.\n-\n---    The routine Shared_Var_Close is called to indicate the end of a\n---    read/write operations. This can be useful even in the context of\n---    the GNAT implementation. For instance, when a read operation and a\n---    write operation occur at the same time on the same partition, as\n---    the same stream is used simultaneously, both operations can\n---    terminate abruptly by raising exception Mode_Error because the\n---    stream has been opened in read mode and then in write mode and at\n---    least used by the read operation. To avoid this unexpected\n---    behaviour, we introduce a synchronization at the partition level.\n+--    The routine Read in package System.Shared_Storage.Shared_Var_Procs\n+--    ensures to assign variable V to the last written value among processes\n+--    referencing it. A call to this procedure is generated by the expander\n+--    before each read access to the shared variable.\n+\n+--    The routine Write in package System.Shared_Storage.Shared_Var_Proc\n+--    set a new value to the shared variable and, according to the used\n+--    implementation, propagate this value among processes referencing it.\n+--    A call to this procedure is generated by the expander after each\n+--    assignement of the shared varible.\n \n --  Note: a special circuit allows the use of stream attributes Read and\n --  Write for limited types (using the corresponding attribute for the\n@@ -150,32 +136,8 @@\n --    These calls to the read and assign routines, as well as the lock\n --    and unlock routines, are inserted by the expander (see exp_smem.adb).\n \n-with Ada.Streams.Stream_IO;\n-\n package System.Shared_Storage is\n \n-   package SIO renames Ada.Streams.Stream_IO;\n-\n-   function Shared_Var_ROpen (Var : String) return SIO.Stream_Access;\n-   --  As described above, this routine returns null if the\n-   --  corresponding shared storage does not exist, and otherwise, if\n-   --  the storage does exist, a Stream_Access value that references\n-   --  the shared storage, ready to read the current value.\n-\n-   function Shared_Var_WOpen (Var : String) return SIO.Stream_Access;\n-   --  As described above, this routine returns a Stream_Access value\n-   --  that references the shared storage, ready to write the new\n-   --  value. The storage is created by this call if it does not\n-   --  already exist.\n-\n-   procedure Shared_Var_Close (Var : SIO.Stream_Access);\n-   --  This routine signals the end of a read/assign operation. It can\n-   --  be useful to embrace a read/write operation between a call to\n-   --  open and a call to close which protect the whole operation.\n-   --  Otherwise, two simultaneous operations can result in the\n-   --  raising of exception Data_Error by setting the access mode of\n-   --  the variable in an incorrect mode.\n-\n    procedure Shared_Var_Lock (Var : String);\n    --  This procedure claims the shared storage lock. It is used for\n    --  protected types in shared passive packages. A call to this\n@@ -185,7 +147,7 @@ package System.Shared_Storage is\n \n    procedure Shared_Var_Unlock (Var : String);\n    --  This procedure releases the shared storage lock obtained by a\n-   --  prior call to the Shared_Mem_Lock procedure, and is to be\n+   --  prior call to the Shared_Var_Lock procedure, and is to be\n    --  generated as the last operation in the body of a protected\n    --  subprogram.\n "}]}