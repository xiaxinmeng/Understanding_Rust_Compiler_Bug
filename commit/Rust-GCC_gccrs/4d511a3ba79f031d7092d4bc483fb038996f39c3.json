{"sha": "4d511a3ba79f031d7092d4bc483fb038996f39c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ1MTFhM2JhNzlmMDMxZDcwOTJkNGJjNDgzZmIwMzg5OTZmMzljMw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-07-17T17:27:42Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-07-17T17:27:42Z"}, "message": "re PR fortran/52846 ([F2008] Support submodules)\n\n2015-07-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/52846\n\t* decl.c (gfc_match_end): Pick out declared submodule name from\n\tthe composite identifier.\n\t* gfortran.h : Add 'submodule_name' to gfc_use_list structure.\n\t* module.c (gfc_match_submodule): Define submodule_name and add\n\tstatic 'submodule_name'.\n\t(gfc_match_submodule): Build up submodule filenames, using '@'\n\tas a delimiter. Store the output filename in 'submodule_name'.\n\tSimilarly, the submodule identifier is built using '.' as an\n\tidentifier.\n\t(gfc_dump_module): If current state is COMP_SUBMODULE, write\n\tto file 'submodule_name', using SUBMODULE_EXTENSION.\n\t(gfc_use_module): Similarly, use the 'submodule_name' field in\n\tthe gfc_use_list structure and SUBMODULE_EXTENSION to read the\n\timplicitly used submodule files.\n\n2015-07-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/52846\n\t* lib/fortran-modules.exp (proc cleanup-submodules): New\n\tprocedure.\n\t* gfortran.dg/submodule_1.f08: Change extension and clean up\n\tthe submodule files.\n\t* gfortran.dg/submodule_2.f08: ditto\n\t* gfortran.dg/submodule_6.f08: ditto\n\t* gfortran.dg/submodule_7.f08: ditto\n\t* gfortran.dg/submodule_8.f08: New test\n\t* gfortran.dg/submodule_9.f08: New test\n\nFrom-SVN: r225957", "tree": {"sha": "8a34661847bf496f04af14c74188165f1115aa01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a34661847bf496f04af14c74188165f1115aa01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d511a3ba79f031d7092d4bc483fb038996f39c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d511a3ba79f031d7092d4bc483fb038996f39c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d511a3ba79f031d7092d4bc483fb038996f39c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d511a3ba79f031d7092d4bc483fb038996f39c3/comments", "author": null, "committer": null, "parents": [{"sha": "d0e8d89223cf24f067ddca3e01842374765af89a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e8d89223cf24f067ddca3e01842374765af89a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e8d89223cf24f067ddca3e01842374765af89a"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "15a38a58833c313a9f0ef83935e75cf944bc3681", "filename": "gcc/testsuite/gfortran.dg/submodule_8.f08", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d511a3ba79f031d7092d4bc483fb038996f39c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_8.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d511a3ba79f031d7092d4bc483fb038996f39c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_8.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_8.f08?ref=4d511a3ba79f031d7092d4bc483fb038996f39c3", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+!\n+! Checks that F2008:11.2.3 para 2 is correctly implemented so that\n+! no error results from using 'mod_s' for both a module name and\n+! a submodule name. The submodule is now identified as 'mod_a.mod_s'\n+! internally and the submodule file as 'mod_a@mod_s.smod'.\n+!\n+! Contributed by Reinhold Bader  <reinhold.bader@lrz.de>\n+!\n+module mod_a\n+  implicit none\n+  interface\n+    module subroutine p()\n+    end subroutine\n+  end interface\n+end module\n+\n+submodule (mod_a) mod_s\n+  implicit none\n+  integer :: i=-2\n+contains\n+  module procedure p\n+    if (i .ne. -2) then\n+      call abort\n+    end if\n+  end procedure\n+end submodule\n+\n+module mod_s\n+  use mod_a\n+  implicit none\n+  integer :: i=2\n+end module\n+\n+program a_s\n+  use mod_s\n+  implicit none\n+  if (i==2) then\n+    call p()\n+  else\n+    call abort\n+  end if\n+end program\n+! { dg-final { cleanup-submodules \"mod_a@mod_s\" } }"}, {"sha": "4589ebcd6d288deda2e330203493dec311f00e72", "filename": "gcc/testsuite/gfortran.dg/submodule_9.f08", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d511a3ba79f031d7092d4bc483fb038996f39c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_9.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d511a3ba79f031d7092d4bc483fb038996f39c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_9.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_9.f08?ref=4d511a3ba79f031d7092d4bc483fb038996f39c3", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do compile }\n+!\n+! Checks that the name clash between the two submodules 'mod_s' is an error.\n+!\n+! Contributed by Reinhold Bader  <reinhold.bader@lrz.de>\n+!\n+module mod_a\n+  implicit none\n+  interface\n+    module subroutine p()\n+    end subroutine\n+  end interface\n+end module\n+\n+submodule (mod_a) mod_s ! { dg-error \"already being used as a MODULE\" }\n+end submodule\n+\n+submodule (mod_a:mod_s) b\n+end submodule\n+\n+submodule (mod_a:b) mod_s ! { dg-error \"already being used as a MODULE\" }\n+  implicit none\n+  integer :: i=-2\n+contains\n+  module procedure p\n+    write(*,*) 'FAIL'\n+  end procedure\n+end submodule\n+\n+module mod_s\n+  use mod_a\n+  implicit none\n+  integer :: i=2\n+end module\n+\n+program a_s\n+  use mod_s\n+  implicit none\n+  call p()\n+end program"}]}